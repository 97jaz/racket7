  EVAL_ONE_STR(
"(linklet"
"()"
"((1/namespace-module-identifier namespace-module-identifier)"
"(1/eval eval)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(embedded-load embedded-load)"
"(1/syntax->datum syntax->datum)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(boot boot)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(1/current-namespace current-namespace)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-path-index-join module-path-index-join)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(identifier? identifier?)"
"(1/syntax-debug-info syntax-debug-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/compile compile)"
"(namespace->instance namespace->instance)"
"(1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/namespace-require namespace-require)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(1/resolved-module-path? resolved-module-path?)"
"(expand$1 expand)"
"(syntax?$1 syntax?)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/namespace-attach-module namespace-attach-module)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(1/syntax-e syntax-e)"
"(1/module->language-info module->language-info)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/datum->syntax datum->syntax))"
"(define-values"
"(qq-append)"
"  (lambda (a_106 b_107) (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing \"list?\" a_106))))"
"(define-values(call/ec) call-with-escape-continuation)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 \"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() #f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() #f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() #f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 2) #f)"
"(void)"
"                           (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() #f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28)))))"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_455 thunk_456)(begin0(with-continuation-mark exception-handler-key exnh_455(thunk_456))(void))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_457)(gensym)))"
"(let-values(((up_458)"
"(lambda(who_459 mut?_460 set_461 ht_462 key_463 xform_464 default_465)"
"(begin"
"(if(if(hash? ht_462)(if mut?_460(not(immutable? ht_462))(immutable? ht_462)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_459"
"                           (if mut?_460 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_462)))"
"(if(if(procedure? xform_464)(procedure-arity-includes? xform_464 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_459 \"(any/c . -> . any/c)\" xform_464)))"
"(let-values(((v_466)(hash-ref ht_462 key_463 default_465)))"
"(if(eq? v_466 not-there_457)"
"                          (raise-mismatch-error who_459 \"no value found for key: \" key_463)"
"(set_461 ht_462 key_463(xform_464 v_466))))))))"
"(let-values(((hash-update_467)"
"(case-lambda"
"((ht_471 key_472 xform_473 default_474)"
"(up_458 'hash-update #f hash-set ht_471 key_472 xform_473 default_474))"
"((ht_475 key_476 xform_477)(hash-update ht_475 key_476 xform_477 not-there_457))))"
"((hash-update!_468)"
"(case-lambda"
"((ht_478 key_479 xform_480 default_481)"
"(up_458 'hash-update! #t hash-set! ht_478 key_479 xform_480 default_481))"
"((ht_482 key_483 xform_484)(hash-update! ht_482 key_483 xform_484 not-there_457))))"
"((hash-has-key?_469)"
"(lambda(ht_485 key_486)"
"(begin"
"(if(hash? ht_485)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_485 key_486)))"
"(not(eq? not-there_457(hash-ref ht_485 key_486 not-there_457))))))"
"((hash-ref!_470)"
"(lambda(ht_487 key_488 new_489)"
"(begin"
"(if(if(hash? ht_487)(not(immutable? ht_487)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
"                             \"(and/c hash? (not/c immutable?))\""
" 0"
" ht_487"
" key_488"
" new_489)))"
"(let-values(((v_490)(hash-ref ht_487 key_488 not-there_457)))"
"(if(eq? not-there_457 v_490)"
"(let-values(((n_491)(if(procedure? new_489)(new_489) new_489)))"
"(begin(hash-set! ht_487 key_488 n_491) n_491))"
" v_490))))))"
"(values hash-update_467 hash-update!_468 hash-has-key?_469 hash-ref!_470)))))"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7) s_7 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c path-for-some-system? path-string?)\" 0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c string? bytes?)\" 1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
"            (let-values () (raise-mismatch-error who_10 \"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
"                                             (finish_24 (bytes-length bs_23) #\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" #f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_34 i_35) #\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_38 root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                           \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_38"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_38"
"                                 \"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_42 #\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) 1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4 5) #\"\\\\\" (subbytes bstr_42 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_42 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 0 1)(subbytes bstr_42 2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_3) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 #\"\") s_5)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) #f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" #f)"
"          (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"                        (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) #f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 #f))"
"((program_29)(find-executable-path program_29 #f #f))))"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" read-square-bracket-as-paren"
" #t"
" read-curly-brace-as-paren"
" #t"
" read-square-bracket-with-tag"
" #f"
" read-curly-brace-with-tag"
" #f"
" read-accept-box"
" #t"
" read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" read-cdot"
" #f"
" read-accept-dot"
" #t"
" read-accept-infix-dot"
" #t"
" read-accept-quasiquote"
" #t"
" read-accept-reader"
" #f"
" read-accept-lang"
" #t"
" current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_1)"
"(if(complete-path? collects-path_1)"
"(let-values()(simplify-path collects-path_1))"
"(if(absolute-path? collects-path_1)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_1 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_1 #t)))"
"(if p_6(simplify-path p_6) #f)))))))"
"(define-values"
"(-check-relpath)"
"(lambda(who_1 s_2)"
"(begin"
"      (if (path-string? s_2) (void) (let-values () (raise-argument-error who_1 \"path-string?\" s_2)))"
"(if(relative-path? s_2)"
"(void)"
"        (let-values () (raise-arguments-error who_1 \"invalid relative path\" \"path\" s_2))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_4 collection-path_5)"
"(begin(-check-relpath who_3 collection_4)(for-each(lambda(p_6)(-check-relpath who_3 p_6)) collection-path_5))))"
"(define-values"
"(-check-fail)"
"(lambda(who_7 fail_8)"
"(if(if(procedure? fail_8)(procedure-arity-includes? fail_8 1) #f)"
"(void)"
"      (let-values () (raise-argument-error who_7 \"(any/c . -> . any)\" fail_8)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_9 collection_10 collection-path_11)"
"(begin"
"(-check-collection 'collection-path collection_10 collection-path_11)"
"(-check-fail 'collection-path fail_9)"
"(find-col-file fail_9 collection_10 collection-path_11 #f #f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_12 check-compiled?_13 file-name_14 collection_15 collection-path_16)"
"(begin"
"(-check-relpath 'collection-file-path file-name_14)"
"(-check-collection 'collection-file-path collection_15 collection-path_16)"
"(-check-fail 'collection-file-path fail_12)"
"(find-col-file fail_12 collection_15 collection-path_16 file-name_14 check-compiled?_13))))"
"(define-values"
"(get-config-table)"
"(lambda(d_17)"
"    (let-values (((p_18) (if d_17 (build-path d_17 \"config.rktd\") #f)))"
"(let-values(((or-part_19)"
"(if p_18"
"(if(file-exists? p_18)"
"(with-input-from-file"
" p_18"
"(lambda()"
"(let-values(((v_20)(call-with-default-reading-parameterization read)))"
"(if(hash? v_20) v_20 #f))))"
" #f)"
" #f)))"
"(if or-part_19 or-part_19 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_21)(hash-ref config-table_21 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_22)"
"(if(string? p_22)"
"(let-values()(collects-relative-path->complete-path(string->path p_22)))"
"(if(bytes? p_22)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_22)))"
"(if(path? p_22)(let-values()(collects-relative-path->complete-path p_22))(let-values() p_22))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_23)"
"(if(complete-path? p_23)"
"(let-values() p_23)"
"(let-values()"
"(path->complete-path"
" p_23"
"(let-values(((or-part_24)(find-main-collects)))(if or-part_24 or-part_24(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_25 key_26 orig-l_27)"
"(let-values(((l_28)(hash-ref ht_25 key_26 #f)))"
"(if l_28"
"((letrec-values(((loop_29)"
"(lambda(l_30)"
"(if(null? l_30)"
"(let-values() null)"
"(if(not(car l_30))"
"(let-values()(append orig-l_27(loop_29(cdr l_30))))"
"(let-values()(cons(coerce-to-path(car l_30))(loop_29(cdr l_30)))))))))"
" loop_29)"
" l_28)"
" orig-l_27))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_31)(get-config-table(find-main-config))))"
"(let-values(((lf_32)"
"(coerce-to-path"
"(let-values(((or-part_33)(hash-ref ht_31 'links-file #f)))"
"(if or-part_33"
" or-part_33"
"(build-path"
"(let-values(((or-part_34)(hash-ref ht_31 'share-dir #f)))"
"                            (if or-part_34 or-part_34 (build-path 'up \"share\")))"
"                          \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) #f)"
"           (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_31) \"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_31 'links-search-files(list lf_32)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout 0(cdr old-stamp_36))) #f) #f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() #f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() #f))"
"(loop_39 base_41))"
" #f)))))"
" loop_39)"
" path_35)"
" #f)))"
"(if(not(file-exists? path_35))"
"(cons #f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_35(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes 8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes 8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 #f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= 2(length p_62))))"
"(if or-part_63 or-part_63(= 3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_60)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 #f #f)"
"(void)"
"(let-values()(hash-set! ht_67 #f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
"        (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) #f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 #f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) #t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
"                                                                                \"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
"                                                (string-append (to-string_103 collection_93) \"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_119) (format \"\\n ~a ~a\" \" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) 5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_122) (format \"\\n   ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
"                                                \"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) #t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring"
" file-name_127"
"(- len_128 4)))"
"(string-append"
"(substring file-name_127 0(- len_128 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" #f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values(((or-part_129) found-col_112))"
"(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
"          (let-values (((try-path_134) (path-add-extension path_131 #\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" #f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_140)(find-library-collection-paths extra-collects-dirs_140 null))"
"((extra-collects-dirs_141 post-collects-dirs_142)"
"(let-values(((user-too?_143)(use-user-specific-search-paths))"
"((cons-if_144)(lambda(f_146 r_147)(if f_146(cons f_146 r_147) r_147)))"
"((config-table_145)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_143"
"         (let-values (((c_148) (environment-variables-ref (current-environment-variables) #\"PLTCOLLECTS\")))"
"           (if c_148 (bytes->string/locale c_148 '#\\?) \"\"))"
"         \"\")"
"(add-config-search"
" config-table_145"
" 'collects-search-dirs"
"(cons-if_144"
"(if user-too?_143"
"           (build-path (find-system-path 'addon-dir) (get-installation-name config-table_145) \"collects\")"
" #f)"
"((letrec-values(((loop_149)"
"(lambda(l_150)"
"(if(null? l_150)"
" null"
"(let-values(((collects-path_151)(car l_150)))"
"(let-values(((v_152)(exe-relative-path->complete-path collects-path_151)))"
"(if v_152"
"(cons"
"(simplify-path(path->complete-path v_152(current-directory)))"
"(loop_149(cdr l_150)))"
"(loop_149(cdr l_150)))))))))"
" loop_149)"
"(append extra-collects-dirs_141(list(find-system-path 'collects-dir)) post-collects-dirs_142)))))))))"
"(define-values(load/use-compiled)(lambda(f_1)((current-load/use-compiled) f_1 #f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 #f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))(if or-part_9 or-part_9 0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max 0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1534)"
"(if(keyword-impersonator? v_1534)(let-values()((keyword-impersonator-ref v_1534) v_1534))(let-values() #f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref 0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref 1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1535)"
"(let-values(((req_1536 allowed_1537)(procedure-keywords proc_1535))"
"((a_1538)(procedure-arity proc_1535))"
"((keywords-desc_1539)"
"(lambda(opt_1541 req_1542)"
"(format"
"                     \"~a with keyword~a~a\""
"                     (if (null? (cdr req_1542)) (format \"an ~aargument\" opt_1541) (format \"~aarguments\" opt_1541))"
"                     (if (null? (cdr req_1542)) \"\" \"s\")"
"(let-values(((tmp_1543)(length req_1542)))"
"(if(equal? tmp_1543 1)"
"                         (let-values () (format \" ~a\" (car req_1542)))"
"(if(equal? tmp_1543 2)"
"                           (let-values () (format \" ~a and ~a\" (car req_1542) (cadr req_1542)))"
"(let-values()"
"((letrec-values(((loop_1544)"
"(lambda(req_1545)"
"(if(null?(cdr req_1545))"
"                                                   (format \" and ~a\" (car req_1545))"
"                                                   (format \" ~a,~a\" (car req_1545) (loop_1544 (cdr req_1545)))))))"
" loop_1544)"
" req_1542))))))))"
"((method-adjust_1540)"
"(lambda(a_1546)"
"(if(let-values(((or-part_1547)(okm? proc_1535)))"
"(if or-part_1547 or-part_1547(keyword-method? proc_1535)))"
"(if(zero? a_1546) 0(sub1 a_1546))"
" a_1546))))"
"(string-append"
"(if(number? a_1538)"
"         (let-values () (let-values (((a_1548) (method-adjust_1540 a_1538))) (format \"~a\" a_1548)))"
"(if(arity-at-least? a_1538)"
"(let-values()"
"             (let-values (((a_1549) (method-adjust_1540 (arity-at-least-value a_1538)))) (format \"at least ~a\" a_1549)))"
"           (let-values () \"a different number\")))"
"       (if (null? req_1536) \"\" (format \" plus ~a\" (keywords-desc_1539 \"\" req_1536)))"
"(if allowed_1537"
"(let-values(((others_1550)"
"((letrec-values(((loop_1551)"
"(lambda(req_1552 allowed_1553)"
"(if(null? req_1552)"
"(let-values() allowed_1553)"
"(if(eq?(car req_1552)(car allowed_1553))"
"(let-values()(loop_1551(cdr req_1552)(cdr allowed_1553)))"
"(let-values()"
"(cons(car allowed_1553)(loop_1551 req_1552(cdr allowed_1553)))))))))"
" loop_1551)"
" req_1536"
" allowed_1537)))"
"           (if (null? others_1550) \"\" (format \" plus ~a\" (keywords-desc_1539 \"optional \" others_1550))))"
"         \" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" 0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(make-required)"
"(lambda(name_1554 fail-proc_1555 method?_1556 impersonator?_1557)"
"(let-values(((s:_1558 mk_1559 ?_1560 -ref_1561 -set!_1562)"
"(make-struct-type"
"(let-values(((or-part_1563) name_1554))(if or-part_1563 or-part_1563 'unknown))"
"(if impersonator?_1557"
"(if method?_1556 struct:keyword-method-impersonator struct:keyword-procedure-impersonator)"
"(if method?_1556 struct:keyword-method struct:keyword-procedure))"
" 0"
" 0"
" #f"
"(list"
"(cons prop:arity-string generate-arity-string)"
"(cons prop:named-keyword-procedure(cons name_1554 fail-proc_1555))"
"(cons prop:incomplete-arity #t))"
"(current-inspector)"
" fail-proc_1555)))"
" mk_1559)))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1564 info-l_1565)"
"(if(exact-integer? v_1564)(make-struct-field-accessor(list-ref info-l_1565 3) v_1564) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure-impersonator make-kpp keyword-procedure-impersonator? kpp-ref kpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1566)(kpp-ref v_1566 0))))))"
"(define-values"
"(struct:keyword-method-impersonator make-kmp keyword-method-impersonator? kmp-ref kmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-method"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1567)(kmp-ref v_1567 0))))))"
"(define-values"
"(struct:okpp make-optional-keyword-procedure-impersonator okpp? okpp-ref okpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1568)(okpp-ref v_1568 0))))))"
"(define-values"
"(struct:okmp make-optional-keyword-method-impersonator okmp? okmp-ref okmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1569)(okmp-ref v_1569 0))))))"
"(define-values"
"(make-keyword-procedure)"
"(case-lambda"
"((proc_1570)(make-keyword-procedure proc_1570(lambda args_1571(apply proc_1570 null null args_1571))))"
"((proc_1572 plain-proc_1573)"
"(make-optional-keyword-procedure"
"(make-keyword-checker null #f(procedure-arity proc_1572))"
" proc_1572"
" null"
" #f"
" plain-proc_1573))))"
"(define-values"
"(keyword-apply)"
"(lambda(proc_1574 kws_1575 kw-vals_1576 normal-args_1577 . normal-argss_1578)"
"(let-values(((type-error_1579)"
"(lambda(what_1580 which_1581)"
"(apply"
" raise-argument-error"
" 'keyword-apply"
" what_1580"
" which_1581"
" proc_1574"
" kws_1575"
" kw-vals_1576"
" normal-args_1577"
" normal-argss_1578))))"
"(begin"
"        (if (procedure? proc_1574) (void) (let-values () (type-error_1579 \"procedure?\" 0)))"
"((letrec-values(((loop_1582)"
"(lambda(ks_1583)"
"(if(null? ks_1583)"
"(let-values()(void))"
"(if(let-values(((or-part_1584)(not(pair? ks_1583))))"
"(if or-part_1584 or-part_1584(not(keyword?(car ks_1583)))))"
"                                (let-values () (type-error_1579 \"(listof keyword?)\" 1))"
"(if(null?(cdr ks_1583))"
"(let-values()(void))"
"(if(let-values(((or-part_1585)(not(pair?(cdr ks_1583)))))"
"(if or-part_1585 or-part_1585(not(keyword?(cadr ks_1583)))))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(if(keyword<?(car ks_1583)(cadr ks_1583))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(let-values()"
"                                        (type-error_1579 \"(and/c (listof? keyword?) sorted? distinct?)\" 1))))))))))"
" loop_1582)"
" kws_1575)"
"        (if (list? kw-vals_1576) (void) (let-values () (type-error_1579 \"list?\" 2)))"
"(if(=(length kws_1575)(length kw-vals_1576))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'keyword-apply"
"             \"keyword list length does not match value list length\""
"             \"keyword list length\""
"(length kws_1575)"
"             \"value list length\""
"(length kw-vals_1576)"
"             \"keyword list\""
" kws_1575"
"             \"value list\""
" kw-vals_1576)))"
"(let-values(((normal-args_1586)"
"((letrec-values(((loop_1587)"
"(lambda(normal-argss_1588 pos_1589)"
"(if(null?(cdr normal-argss_1588))"
"(let-values(((l_1590)(car normal-argss_1588)))"
"                                              (if (list? l_1590) l_1590 (type-error_1579 \"list?\" pos_1589)))"
"(cons"
"(car normal-argss_1588)"
"(loop_1587(cdr normal-argss_1588)(add1 pos_1589)))))))"
" loop_1587)"
"(cons normal-args_1577 normal-argss_1578)"
" 3)))"
"(if(null? kws_1575)"
"(apply proc_1574 normal-args_1586)"
"(apply"
"(keyword-procedure-extract/method kws_1575(+ 2(length normal-args_1586)) proc_1574 0)"
" kws_1575"
" kw-vals_1576"
" normal-args_1586)))))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1591)"
"(if(keyword-procedure? p_1591)"
"(let-values()(values(keyword-procedure-required p_1591)(keyword-procedure-allowed p_1591)))"
"(if(procedure? p_1591)"
"(let-values()"
"(if(new-procedure? p_1591)"
"(let-values(((v_1592)(new-procedure-ref p_1591)))"
"(if(procedure? v_1592)"
"(procedure-keywords v_1592)"
"(let-values(((a_1593)(procedure-accessor-ref p_1591)))"
"(if a_1593(procedure-keywords(a_1593 p_1591))(values null null)))))"
"(values null null)))"
"        (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_1591))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1594 . args_1595)(apply(keyword-procedure-extract/method null 0 proc_1594 0) null null args_1595)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1596 kws_1597)"
"((letrec-values(((loop_1598)"
"(lambda(kws_1599 required_1600 allowed_1601)"
"(if(null? kws_1599)"
"(let-values()(if(null? required_1600)(values #f #f)(values(car required_1600) #f)))"
"(if(if(pair? required_1600)(eq?(car required_1600)(car kws_1599)) #f)"
"(let-values()"
"(loop_1598(cdr kws_1599)(cdr required_1600)(if allowed_1601(cdr allowed_1601) #f)))"
"(if(not allowed_1601)"
"(let-values()(loop_1598(cdr kws_1599) required_1600 #f))"
"(if(pair? allowed_1601)"
"(let-values()"
"(if(eq?(car allowed_1601)(car kws_1599))"
"(loop_1598(cdr kws_1599) required_1600(cdr allowed_1601))"
"(loop_1598 kws_1599 required_1600(cdr allowed_1601))))"
"(let-values()(values #f(car kws_1599))))))))))"
" loop_1598)"
" kws_1597"
"(keyword-procedure-required p_1596)"
"(keyword-procedure-allowed p_1596))))"
"(define-values"
"(make-keyword-checker)"
"(lambda(req-kws_1602 allowed-kws_1603 arity_1604)"
"(if(not allowed-kws_1603)"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1615 a_1616)(if #t(= a_1616 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1617)(arity-at-least-value arity_1604)))"
"(lambda(kws_1618 a_1619)(if #t(>= a_1619 arity_1617) #f))))"
"(let-values()(lambda(kws_1620 a_1621)(if #t(arity-includes? arity_1604 a_1621) #f))))))"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1622 a_1623)(if(subset?$1 req-kws_1602 kws_1622)(= a_1623 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1624)(arity-at-least-value arity_1604)))"
"(lambda(kws_1625 a_1626)(if(subset?$1 req-kws_1602 kws_1625)(>= a_1626 arity_1624) #f))))"
"(let-values()"
"(lambda(kws_1627 a_1628)"
"(if(subset?$1 req-kws_1602 kws_1627)(arity-includes? arity_1604 a_1628) #f))))))))"
"(if(null? allowed-kws_1603)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1629 a_1630)(if(null? kws_1629)(= a_1630 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1631)(arity-at-least-value arity_1604)))"
"(lambda(kws_1632 a_1633)(if(null? kws_1632)(>= a_1633 arity_1631) #f))))"
"(let-values()(lambda(kws_1634 a_1635)(if(null? kws_1634)(arity-includes? arity_1604 a_1635) #f))))))"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1636 a_1637)(if(subset?$1 kws_1636 allowed-kws_1603)(= a_1637 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1638)(arity-at-least-value arity_1604)))"
"(lambda(kws_1639 a_1640)(if(subset?$1 kws_1639 allowed-kws_1603)(>= a_1640 arity_1638) #f))))"
"(let-values()"
"(lambda(kws_1641 a_1642)"
"(if(subset?$1 kws_1641 allowed-kws_1603)(arity-includes? arity_1604 a_1642) #f))))))"
"(let-values()"
"(if(equal? req-kws_1602 allowed-kws_1603)"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1643 a_1644)"
"(if((letrec-values(((loop_1645)"
"(lambda(kws_1646 req-kws_1647)"
"(if(null? req-kws_1647)"
"(null? kws_1646)"
"(if(null? kws_1646)"
" #f"
"(if(eq?(car kws_1646)(car req-kws_1647))"
"(loop_1645(cdr kws_1646)(cdr req-kws_1647))"
" #f))))))"
" loop_1645)"
" kws_1643"
" req-kws_1602)"
"(= a_1644 arity_1604)"
" #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1648)(arity-at-least-value arity_1604)))"
"(lambda(kws_1649 a_1650)"
"(if((letrec-values(((loop_1651)"
"(lambda(kws_1652 req-kws_1653)"
"(if(null? req-kws_1653)"
"(null? kws_1652)"
"(if(null? kws_1652)"
" #f"
"(if(eq?(car kws_1652)(car req-kws_1653))"
"(loop_1651(cdr kws_1652)(cdr req-kws_1653))"
" #f))))))"
" loop_1651)"
" kws_1649"
" req-kws_1602)"
"(>= a_1650 arity_1648)"
" #f))))"
"(let-values()"
"(lambda(kws_1654 a_1655)"
"(if((letrec-values(((loop_1656)"
"(lambda(kws_1657 req-kws_1658)"
"(if(null? req-kws_1658)"
"(null? kws_1657)"
"(if(null? kws_1657)"
" #f"
"(if(eq?(car kws_1657)(car req-kws_1658))"
"(loop_1656(cdr kws_1657)(cdr req-kws_1658))"
" #f))))))"
" loop_1656)"
" kws_1654"
" req-kws_1602)"
"(arity-includes? arity_1604 a_1655)"
" #f)))))"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1659 a_1660)"
"(if(subsets? req-kws_1602 kws_1659 allowed-kws_1603)(= a_1660 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1661)(arity-at-least-value arity_1604)))"
"(lambda(kws_1662 a_1663)"
"(if(subsets? req-kws_1602 kws_1662 allowed-kws_1603)(>= a_1663 arity_1661) #f))))"
"(let-values()"
"(lambda(kws_1664 a_1665)"
"(if(subsets? req-kws_1602 kws_1664 allowed-kws_1603)"
"(arity-includes? arity_1604 a_1665)"
" #f)))))))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(arity_1666 a_1667)"
"(if(integer? arity_1666)"
"(let-values()(= arity_1666 a_1667))"
"(if(arity-at-least? arity_1666)"
"(let-values()(>= a_1667(arity-at-least-value a_1667)))"
"(let-values()(ormap(lambda(ar_1668)(arity-includes? ar_1668 a_1667)) arity_1666))))))"
"(define-values"
"(subset?$1)"
"(lambda(l1_1669 l2_1670)"
"(if(null? l1_1669)"
"(let-values() #t)"
"(if(null? l2_1670)"
"(let-values() #f)"
"(if(eq?(car l1_1669)(car l2_1670))"
"(let-values()(subset?$1(cdr l1_1669)(cdr l2_1670)))"
"(let-values()(subset?$1 l1_1669(cdr l2_1670))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1671 l2_1672 l3_1673)"
"(if(null? l1_1671)"
"(let-values()(subset?$1 l2_1672 l3_1673))"
"(if(null? l2_1672)"
"(let-values() #f)"
"(if(null? l3_1673)"
"(let-values() #f)"
"(let-values()"
"(let-values(((v2_1674)(car l2_1672)))"
"(if(eq?(car l1_1671) v2_1674)"
"(let-values()(subsets?(cdr l1_1671)(cdr l2_1672)(cdr l3_1673)))"
"(if(eq? v2_1674(car l3_1673))"
"(let-values()(subsets? l1_1671(cdr l2_1672)(cdr l3_1673)))"
"(let-values()(subsets? l1_1671 l2_1672(cdr l3_1673))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1675 n_1676 p_1677 method-n_1678)"
"(if(if(keyword-procedure? p_1677)((keyword-procedure-checker p_1677) kws_1675 n_1676) #f)"
"(keyword-procedure-proc p_1677)"
"(let-values(((p2_1679)"
"(if(not(keyword-procedure? p_1677))"
"(if(procedure? p_1677)"
"(let-values(((or-part_1680)"
"(if(new-procedure? p_1677)"
"(let-values(((a_1681)(procedure-accessor-ref p_1677)))"
"(if a_1681(a_1681 p_1677) #f))"
" #f)))"
"(if or-part_1680"
" or-part_1680"
"(let-values(((or-part_1682)(procedure-extract-target p_1677)))"
"(if or-part_1682 or-part_1682(if(new-procedure? p_1677) 'method #f)))))"
" #f)"
" #f)))"
"(if p2_1679"
"(if(eq? p2_1679 'method)"
"(let-values(((p3_1683)"
"(keyword-procedure-extract/method"
" kws_1675"
"(add1 n_1676)"
"(new-procedure-ref p_1677)"
"(add1 method-n_1678))))"
"(lambda(kws_1684 kw-args_1685 . args_1686)"
"(apply p3_1683 kws_1684 kw-args_1685(cons p_1677 args_1686))))"
"(keyword-procedure-extract/method kws_1675 n_1676 p2_1679 method-n_1678))"
"(lambda(kws_1687 kw-args_1688 . args_1689)"
"(let-values(((missing-kw_1690 extra-kw_1691)"
"(if(keyword-procedure? p_1677)(check-kw-args p_1677 kws_1687)(values #f(car kws_1687)))))"
"(let-values(((n_1692)"
"(let-values(((method-n_1695)"
"(+"
" method-n_1678"
"(if(let-values(((or-part_1696)(keyword-method? p_1677)))"
"(if or-part_1696 or-part_1696(okm? p_1677)))"
" 1"
" 0))))"
"(if(>= n_1676 method-n_1695)(- n_1676 method-n_1695) n_1676)))"
"((args-str_1693)"
"(if(if(null? args_1689)(null? kws_1687) #f)"
"                              \"\""
"(apply"
" string-append"
"                               \"\\n  arguments...:\""
"(append"
"                                (map (lambda (v_1697) (format \"\\n   ~e\" v_1697)) args_1689)"
"(map"
"                                 (lambda (kw_1698 kw-arg_1699) (format \"\\n   ~a ~e\" kw_1698 kw-arg_1699))"
" kws_1687"
" kw-args_1688)))))"
"((proc-name_1694)"
"(lambda(p_1700)"
"(let-values(((or-part_1701)"
"(if(named-keyword-procedure? p_1700)"
"(car(keyword-procedure-name+fail p_1700))"
" #f)))"
"(if or-part_1701"
" or-part_1701"
"(let-values(((or-part_1702)(object-name p_1700)))"
"(if or-part_1702 or-part_1702 p_1700)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1691"
"(if(keyword-procedure? p_1677)"
"(format"
"(string-append"
"                        \"application: procedure does not expect an argument with given keyword\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  given keyword: ~a\""
"                        \"~a\")"
"(proc-name_1694 p_1677)"
" extra-kw_1691"
" args-str_1693)"
"(if(procedure? p_1677)"
"(format"
"(string-append"
"                          \"application: procedure does not accept keyword arguments\\n\""
"                          \"  procedure: ~a\""
"                          \"~a\")"
"(proc-name_1694 p_1677)"
" args-str_1693)"
"(format"
"(string-append"
"                          \"application: not a procedure;\\n\""
"                          \" expected a procedure that can be applied to arguments\\n\""
"                          \"  given: ~e\""
"                          \"~a\")"
" p_1677"
" args-str_1693)))"
"(if missing-kw_1690"
"(format"
"(string-append"
"                        \"application: required keyword argument not supplied\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  required keyword: ~a\""
"                        \"~a\")"
"(proc-name_1694 p_1677)"
" missing-kw_1690"
" args-str_1693)"
"(format"
"(string-append"
"                        \"application: no case matching ~a non-keyword argument~a\\n\""
"                        \"  procedure: ~a\""
"                        \"~a\")"
"(- n_1692 2)"
"                       (if (= 1 (- n_1692 2)) \"\" \"s\")"
"(proc-name_1694 p_1677)"
" args-str_1693)))"
"(current-continuation-marks)))))))))))"
"(define-values"
"(keyword-procedure-extract)"
"(lambda(p_1703 kws_1704 n_1705)(keyword-procedure-extract/method kws_1704 n_1705 p_1703 0)))"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
"                      (if (list? l_2) (void) (raise-argument-error 'reverse \"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence #f 1 0 #f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2558 si_2559)"
"(begin"
"(if(if(vector? v_2558)"
"(if(= 3(vector-length v_2558))"
"(if(procedure?(vector-ref v_2558 0))"
"(if(procedure-arity-includes?(vector-ref v_2558 0) 1)"
"(if(procedure?(vector-ref v_2558 1))"
"(if(procedure-arity-includes?(vector-ref v_2558 1) 1)"
"(if(procedure?(vector-ref v_2558 2))(procedure-arity-includes?(vector-ref v_2558 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_2558)))"
"(vector->immutable-vector v_2558)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2560 si_2561)"
"(begin"
"(if(if(procedure? v_2560)(procedure-arity-includes? v_2560 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_2560)))"
" v_2560))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2562 sinfo_2563)"
"(begin"
"(if(if(procedure? v_2562)(procedure-arity-includes? v_2562 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'sequence-property-guard \"(procedure-arity-includes/c 1)\" v_2562)))"
"(lambda(self_2564)"
"(let-values(((s_2565)(v_2562 self_2564)))"
"(begin"
"(if(sequence? s_2565)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
"                  \"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2565)))"
" s_2565)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2566)"
"(let-values(((or-part_2567)(list? v_2566)))(if or-part_2567 or-part_2567(stream-via-prop? v_2566)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2568)"
"(if(null? v_2568)"
" #f"
"(let-values(((or-part_2569)(pair? v_2568)))"
"(if or-part_2569 or-part_2569(not((unsafe-vector-ref(stream-ref v_2568) 0) v_2568)))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2572)"
"(if(pair? v_2572)"
"(let-values()(car v_2572))"
"(let-values()((unsafe-vector-ref(stream-ref v_2572) 1) v_2572)))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2574)"
"(if(pair? v_2574)"
"(let-values()(cdr v_2574))"
"(let-values()"
"(let-values(((r_2575)((unsafe-vector-ref(stream-ref v_2574) 2) v_2574)))"
"(begin"
"(if(stream? r_2575)"
"(void)"
"              (let-values () (raise-mismatch-error 'stream-rest-guard \"result is not a stream: \" r_2575)))"
" r_2575))))))"
"(define-values"
"(sequence?)"
"(lambda(v_2577)"
"(let-values(((or-part_2578)(exact-nonnegative-integer? v_2577)))"
"(if or-part_2578"
" or-part_2578"
"(let-values(((or-part_2579)(do-sequence? v_2577)))"
"(if or-part_2579"
" or-part_2579"
"(let-values(((or-part_2580)(sequence-via-prop? v_2577)))"
"(if or-part_2580"
" or-part_2580"
"(let-values(((or-part_2581)(stream? v_2577)))"
"(if or-part_2581"
" or-part_2581"
"(let-values(((or-part_2582)(mpair? v_2577)))"
"(if or-part_2582"
" or-part_2582"
"(let-values(((or-part_2583)(vector? v_2577)))"
"(if or-part_2583"
" or-part_2583"
"(let-values(((or-part_2584)(flvector? v_2577)))"
"(if or-part_2584"
" or-part_2584"
"(let-values(((or-part_2585)(fxvector? v_2577)))"
"(if or-part_2585"
" or-part_2585"
"(let-values(((or-part_2586)(string? v_2577)))"
"(if or-part_2586"
" or-part_2586"
"(let-values(((or-part_2587)(bytes? v_2577)))"
"(if or-part_2587"
" or-part_2587"
"(let-values(((or-part_2588)(input-port? v_2577)))"
"(if or-part_2588"
" or-part_2588"
"(let-values(((or-part_2589)(hash? v_2577)))"
"(if or-part_2589"
" or-part_2589"
"(if(:sequence? v_2577)"
"(not(struct-type? v_2577))"
" #f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2590 v_2591)"
"(if(exact-nonnegative-integer? v_2591)"
"(let-values()(:integer-gen v_2591))"
"(if(do-sequence? v_2591)"
"(let-values()((do-sequence-ref v_2591 0)))"
"(if(mpair? v_2591)"
"(let-values()(:mlist-gen v_2591))"
"(if(list? v_2591)"
"(let-values()(:list-gen v_2591))"
"(if(vector? v_2591)"
"(let-values()(:vector-gen v_2591 0(vector-length v_2591) 1))"
"(if(flvector? v_2591)"
"(let-values()(:flvector-gen v_2591 0(flvector-length v_2591) 1))"
"(if(fxvector? v_2591)"
"(let-values()(:fxvector-gen v_2591 0(fxvector-length v_2591) 1))"
"(if(string? v_2591)"
"(let-values()(:string-gen v_2591 0(string-length v_2591) 1))"
"(if(bytes? v_2591)"
"(let-values()(:bytes-gen v_2591 0(bytes-length v_2591) 1))"
"(if(input-port? v_2591)"
"(let-values()(:input-port-gen v_2591))"
"(if(hash? v_2591)"
"(let-values()(:hash-gen v_2591 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2591)"
"(let-values()((sequence-ref v_2591) v_2591))"
"(if(:sequence? v_2591)"
"(let-values()(make-sequence who_2590((:sequence-ref v_2591) v_2591)))"
"(if(stream? v_2591)"
"(let-values()(:stream-gen v_2591))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
"                                     \"for: expected a sequence for ~a, got something else: ~v\""
"(if(= 1(length who_2590))(car who_2590) who_2590)"
" v_2591)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2592)"
"(let-values(((cont?_2593)(range-ref v_2592 2)))(if cont?_2593(not(cont?_2593(range-ref v_2592 0))) #f)))"
"(lambda(v_2594)(range-ref v_2594 0))"
"(lambda(v_2595)"
"(make-range((range-ref v_2595 1)(range-ref v_2595 0))(range-ref v_2595 1)(range-ref v_2595 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2596)(values values(range-ref v_2596 1)(range-ref v_2596 0)(range-ref v_2596 2) #f #f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2597)(in-range 0 b_2597 1))"
"((a_2598 b_2599)(in-range a_2598 b_2599 1))"
"((a_2600 b_2601 step_2602)"
"(begin"
"      (if (real? a_2600) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_2600)))"
"      (if (real? b_2601) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_2601)))"
"      (if (real? step_2602) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_2602)))"
"(let-values(((cont?_2603)"
"(if(>= step_2602 0)(lambda(x_2604)(< x_2604 b_2601))(lambda(x_2605)(> x_2605 b_2601)))))"
"(let-values(((inc_2606)(lambda(x_2607)(+ x_2607 step_2602))))(make-range a_2600 inc_2606 cont?_2603)))))))"
"(define-values(:integer-gen)(lambda(v_2608)(values values add1 0(lambda(i_2609)(< i_2609 v_2608)) #f #f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals 0))"
"((n_2610)"
"(begin"
"(if(if(integer? n_2610)(if(exact? n_2610)(>= n_2610 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_2610)))"
"(make-range n_2610 add1 #f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2611)(not(pair?(list-stream-ref v_2611 0))))"
"(lambda(v_2612)(car(list-stream-ref v_2612 0)))"
"(lambda(v_2613)(make-list-stream(cdr(list-stream-ref v_2613 0))))))"
"(cons prop:gen-sequence(lambda(v_2614)(values car cdr(list-stream-ref v_2614 0) pair? #f #f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2615)"
"(begin"
"      (if (list? l_2615) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_2615)))"
"(make-list-stream l_2615))))"
"(define-values(:list-gen)(lambda(l_2616)(values car cdr l_2616 pair? #f #f)))"
"(define-values(:mlist-gen)(lambda(l_2618)(values mcar mcdr l_2618 mpair? #f #f)))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2620)(values read-byte values p_2620 #f(lambda(x_2621)(not(eof-object? x_2621))) #f)))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2639)(values unsafe-stream-first unsafe-stream-rest l_2639 unsafe-stream-not-empty? #f #f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2640 -get_2641 -first_2642 -next_2643)"
"(values"
"(lambda(pos_2644)(-get_2641 ht_2640 pos_2644))"
"(lambda(pos_2645)(-next_2643 ht_2640 pos_2645))"
"(-first_2642 ht_2640)"
"(lambda(pos_2646) pos_2646)"
" #f"
" #f)))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2649)"
"(begin"
"(if((lambda(ht_2650)(hash? ht_2650)) ht_2649)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash \"hash?\" ht_2649)))"
"(make-do-sequence(lambda()(:hash-gen ht_2649 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2653)"
"(begin"
"(if((lambda(ht_2654)(if(hash? ht_2654)(immutable? ht_2654) #f)) ht_2653)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_2653)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2653"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2657)"
"(begin"
"(if((lambda(ht_2658)(hash? ht_2658)) ht_2657)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_2657)))"
"(make-do-sequence(lambda()(:hash-gen ht_2657 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2661)"
"(begin"
"(if((lambda(ht_2662)(if(hash? ht_2662)(immutable? ht_2662) #f)) ht_2661)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_2661)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2661"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2665)"
"(begin"
"(if((lambda(ht_2666)(hash? ht_2666)) ht_2665)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_2665)))"
"(make-do-sequence(lambda()(:hash-gen ht_2665 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2681 vec_2682 start_2683 stop_2684 step_2685 len_2686)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2683)"
"(let-values(((or-part_2687)(< start_2683 len_2686)))"
"(if or-part_2687 or-part_2687(= len_2686 start_2683 stop_2684)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"starting \" start_2683 vec_2682 0 (sub1 len_2686))))"
"(if(if(exact-integer? stop_2684)(if(<= -1 stop_2684)(<= stop_2684 len_2686) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"stopping \" stop_2684 vec_2682 -1 len_2686)))"
"(if(if(exact-integer? step_2685)(not(zero? step_2685)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_2681 \"(and/c exact-integer? (not/c zero?))\" step_2685)))"
"(if(if(< start_2683 stop_2684)(< step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void))"
"(if(if(< stop_2684 start_2683)(> step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2688 type-name_2689 vector?_2690 unsafe-vector-length_2691 vec_2692 start_2693 stop_2694 step_2695)"
"(begin"
"(if(vector?_2690 vec_2692)(void)(let-values()(raise-argument-error who_2688 type-name_2689 vec_2692)))"
"(let-values(((len_2696)(unsafe-vector-length_2691 vec_2692)))"
"(let-values(((stop*_2697)(if stop_2694 stop_2694 len_2696)))"
"(begin"
"(check-ranges who_2688 vec_2692 start_2693 stop*_2697 step_2695 len_2696)"
"(values vec_2692 start_2693 stop*_2697 step_2695)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2698 start_2699 stop_2700 step_2701)"
"(values"
"(lambda(i_2702)(unsafe-vector-ref v_2698 i_2702))"
"(if(= step_2701 1) add1(lambda(i_2703)(+ i_2703 step_2701)))"
" start_2699"
"(if(> step_2701 0)(lambda(i_2704)(< i_2704 stop_2700))(lambda(i_2705)(> i_2705 stop_2700)))"
" #f"
" #f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2706)(in-vector v_2706 0 #f 1))"
"((v_2707 start_2708)(in-vector v_2707 start_2708 #f 1))"
"((v_2709 start_2710 stop_2711)(in-vector v_2709 start_2710 stop_2711 1))"
"((v_2712 start_2713 stop_2714 step_2715)"
"(let-values(((v_2716 start_2717 stop_2718 step_2719)"
"                  (normalise-inputs 'in-vector \"vector\" vector? vector-length v_2712 start_2713 stop_2714 step_2715)))"
"(make-do-sequence(lambda()(:vector-gen v_2716 start_2717 stop_2718 step_2719)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2720 start_2721 stop_2722 step_2723)"
"(values"
"(lambda(i_2724)(string-ref v_2720 i_2724))"
"(if(= step_2723 1) add1(lambda(i_2725)(+ i_2725 step_2723)))"
" start_2721"
"(if(> step_2723 0)(lambda(i_2726)(< i_2726 stop_2722))(lambda(i_2727)(> i_2727 stop_2722)))"
" #f"
" #f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2728)(in-string v_2728 0 #f 1))"
"((v_2729 start_2730)(in-string v_2729 start_2730 #f 1))"
"((v_2731 start_2732 stop_2733)(in-string v_2731 start_2732 stop_2733 1))"
"((v_2734 start_2735 stop_2736 step_2737)"
"(let-values(((v_2738 start_2739 stop_2740 step_2741)"
"                  (normalise-inputs 'in-string \"string\" string? string-length v_2734 start_2735 stop_2736 step_2737)))"
"(make-do-sequence(lambda()(:string-gen v_2738 start_2739 stop_2740 step_2741)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2742 start_2743 stop_2744 step_2745)"
"(values"
"(lambda(i_2746)(unsafe-bytes-ref v_2742 i_2746))"
"(if(= step_2745 1) add1(lambda(i_2747)(+ i_2747 step_2745)))"
" start_2743"
"(if(> step_2745 0)(lambda(i_2748)(< i_2748 stop_2744))(lambda(i_2749)(> i_2749 stop_2744)))"
" #f"
" #f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2750)(in-bytes v_2750 0 #f 1))"
"((v_2751 start_2752)(in-bytes v_2751 start_2752 #f 1))"
"((v_2753 start_2754 stop_2755)(in-bytes v_2753 start_2754 stop_2755 1))"
"((v_2756 start_2757 stop_2758 step_2759)"
"(let-values(((v_2760 start_2761 stop_2762 step_2763)"
"                  (normalise-inputs 'in-bytes \"bytes\" bytes? bytes-length v_2756 start_2757 stop_2758 step_2759)))"
"(make-do-sequence(lambda()(:bytes-gen v_2760 start_2761 stop_2762 step_2763)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2764 start_2765 stop_2766 step_2767)"
"(values"
"(lambda(i_2768)(unsafe-flvector-ref v_2764 i_2768))"
"(if(= step_2767 1) add1(lambda(i_2769)(+ i_2769 step_2767)))"
" start_2765"
"(if(> step_2767 0)(lambda(i_2770)(< i_2770 stop_2766))(lambda(i_2771)(> i_2771 stop_2766)))"
" #f"
" #f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2772 start_2773 stop_2774 step_2775)"
"(values"
"(lambda(i_2776)(unsafe-fxvector-ref v_2772 i_2776))"
"(if(= step_2775 1) add1(lambda(i_2777)(+ i_2777 step_2775)))"
" start_2773"
"(if(> step_2775 0)(lambda(i_2778)(< i_2778 stop_2774))(lambda(i_2779)(> i_2779 stop_2774)))"
" #f"
" #f)))"
"(define-values"
"(in-value)"
"(lambda(v_2817)"
"(make-do-sequence"
"(lambda()(values(lambda(pos_2818) v_2817)(lambda(pos_2819) #f) #t(lambda(pos_2820) pos_2820) void void)))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2940)((do-stream-ref v_2940 0)))"
"(lambda(v_2941)((do-stream-ref v_2941 1)))"
"(lambda(v_2942)((do-stream-ref v_2942 2))))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_2985)"
"(let-values(((n_2986)(vector-length vec_2985)))"
"(let-values(((new-vec_2987)(make-vector(* 2 n_2986))))"
"(begin(vector-copy! new-vec_2987 0 vec_2985 0 n_2986) new-vec_2987)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_2988 i_2989)"
"(let-values(((new-vec_2990)(make-vector i_2989)))"
"(begin(vector-copy! new-vec_2990 0 vec_2988 0 i_2989) new-vec_2990))))"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 1)(list? l_3) #f) #f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()(cons(f_2(car l_5))(loop_4(cdr l_5))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_6 l1_7 l2_8)"
"(if(if(procedure? f_6)"
"(if(procedure-arity-includes? f_6 2)"
"(if(list? l1_7)(if(list? l2_8)(=(length l1_7)(length l2_8)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_9)"
"(lambda(l1_10 l2_11)"
"(if(null? l1_10)"
"(let-values() null)"
"(let-values()"
"(cons(f_6(car l1_10)(car l2_11))(loop_9(cdr l1_10)(cdr l2_11))))))))"
" loop_9)"
" l1_7"
" l2_8)"
"(map f_6 l1_7 l2_8)))"
"((f_12 l_13 . args_14)(apply map f_12 l_13 args_14)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_15)"
"(case-lambda"
"((f_16 l_17)"
"(if(if(procedure? f_16)(if(procedure-arity-includes? f_16 1)(list? l_17) #f) #f)"
"((letrec-values(((loop_18)"
"(lambda(l_19)"
"(if(null? l_19)"
"(let-values()(void))"
"(let-values()(begin(f_16(car l_19))(loop_18(cdr l_19))))))))"
" loop_18)"
" l_17)"
"(for-each f_16 l_17)))"
"((f_20 l1_21 l2_22)"
"(if(if(procedure? f_20)"
"(if(procedure-arity-includes? f_20 2)"
"(if(list? l1_21)(if(list? l2_22)(=(length l1_21)(length l2_22)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_23)"
"(lambda(l1_24 l2_25)"
"(if(null? l1_24)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(f_20(car l1_24)(car l2_25))"
"(loop_23(cdr l1_24)(cdr l2_25))))))))"
" loop_23)"
" l1_21"
" l2_22)"
"(for-each f_20 l1_21 l2_22)))"
"((f_26 l_27 . args_28)(apply for-each f_26 l_27 args_28)))))"
" for-each_15))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_29)"
"(case-lambda"
"((f_30 l_31)"
"(if(if(procedure? f_30)(if(procedure-arity-includes? f_30 1)(list? l_31) #f) #f)"
"(if(null? l_31)"
" #t"
"((letrec-values(((loop_32)"
"(lambda(l_33)"
"(if(null?(cdr l_33))"
"(let-values()(f_30(car l_33)))"
"(let-values()(if(f_30(car l_33))(loop_32(cdr l_33)) #f))))))"
" loop_32)"
" l_31))"
"(andmap f_30 l_31)))"
"((f_34 l1_35 l2_36)"
"(if(if(procedure? f_34)"
"(if(procedure-arity-includes? f_34 2)"
"(if(list? l1_35)(if(list? l2_36)(=(length l1_35)(length l2_36)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_35)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l1_38 l2_39)"
"(if(null?(cdr l1_38))"
"(let-values()(f_34(car l1_38)(car l2_39)))"
"(let-values()"
"(if(f_34(car l1_38)(car l2_39))"
"(loop_37(cdr l1_38)(cdr l2_39))"
" #f))))))"
" loop_37)"
" l1_35"
" l2_36))"
"(andmap f_34 l1_35 l2_36)))"
"((f_40 l_41 . args_42)(apply andmap f_40 l_41 args_42)))))"
" andmap_29))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_43)"
"(case-lambda"
"((f_44 l_45)"
"(if(if(procedure? f_44)(if(procedure-arity-includes? f_44 1)(list? l_45) #f) #f)"
"(if(null? l_45)"
" #f"
"((letrec-values(((loop_46)"
"(lambda(l_47)"
"(if(null?(cdr l_47))"
"(let-values()(f_44(car l_47)))"
"(let-values()"
"(let-values(((or-part_48)(f_44(car l_47))))"
"(if or-part_48 or-part_48(loop_46(cdr l_47)))))))))"
" loop_46)"
" l_45))"
"(ormap f_44 l_45)))"
"((f_49 l1_50 l2_51)"
"(if(if(procedure? f_49)"
"(if(procedure-arity-includes? f_49 2)"
"(if(list? l1_50)(if(list? l2_51)(=(length l1_50)(length l2_51)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_50)"
" #f"
"((letrec-values(((loop_52)"
"(lambda(l1_53 l2_54)"
"(if(null?(cdr l1_53))"
"(let-values()(f_49(car l1_53)(car l2_54)))"
"(let-values()"
"(let-values(((or-part_55)(f_49(car l1_53)(car l2_54))))"
"(if or-part_55 or-part_55(loop_52(cdr l1_53)(cdr l2_54)))))))))"
" loop_52)"
" l1_50"
" l2_51))"
"(ormap f_49 l1_50 l2_51)))"
"((f_56 l_57 . args_58)(apply ormap f_56 l_57 args_58)))))"
" ormap_43))"
"(define-values"
"(sort)"
"(let-values()"
"(let-values(((sort-internals_29)(make-hasheq)))"
"(let-values(((__30)"
"(let-values()"
"(begin"
"(let-values(((proc_90)"
"(lambda(vec_91 n_92)"
"(let-values(((n/2-_93)(unsafe-fxrshift n_92 1)))"
"(let-values(((n/2+_94)(unsafe-fx- n_92 n/2-_93)))"
"(letrec-values(((copying-mergesort_169)"
"(lambda(Alo_170 Blo_171 n_172)"
"(if(unsafe-fx= n_172 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170)))"
"(if(unsafe-fx= n_172 2)"
"(let-values()"
"(let-values(((x_173)"
"(unsafe-vector-ref vec_91 Alo_170))"
"((y_174)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+ Alo_170 1))))"
"(if(if #f"
"(<(#f y_174)(#f x_173))"
"(< y_174 x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 y_174)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 x_173)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" y_174)))))"
"(if(unsafe-fx< n_172 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170))"
"((letrec-values(((iloop_175)"
"(lambda(i_176)"
"(if(unsafe-fx<"
" i_176"
" n_172)"
"(let-values()"
"(let-values(((ref-i_177)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+"
" Alo_170"
" i_176))))"
"((letrec-values(((jloop_178)"
"(lambda(j_179)"
"(let-values(((ref-j-1_180)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx-"
" j_179"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_171"
" j_179)"
"(if #f"
"(<"
"(#f"
" ref-i_177)"
"(#f"
" ref-j-1_180))"
"(<"
" ref-i_177"
" ref-j-1_180))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-j-1_180)"
"(jloop_178"
"(unsafe-fx-"
" j_179"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-i_177)"
"(iloop_175"
"(unsafe-fx+"
" i_176"
" 1))))))))"
" jloop_178)"
"(unsafe-fx+"
" Blo_171"
" i_176))))"
"(void)))))"
" iloop_175)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_181)"
"(unsafe-fxrshift n_172 1)))"
"(let-values(((n/2+_182)"
"(unsafe-fx- n_172 n/2-_181)))"
"(let-values(((Amid1_183)"
"(unsafe-fx+ Alo_170 n/2-_181))"
"((Amid2_184)"
"(unsafe-fx+ Alo_170 n/2+_182))"
"((Bmid1_185)"
"(unsafe-fx+ Blo_171 n/2-_181)))"
"(begin"
"(copying-mergesort_169"
" Amid1_183"
" Bmid1_185"
" n/2+_182)"
"(copying-mergesort_169"
" Alo_170"
" Amid2_184"
" n/2-_181)"
"(let-values(((b2_186)"
"(unsafe-fx+"
" Blo_171"
" n_172)))"
"((letrec-values(((loop_187)"
"(lambda(a1_188"
" b1_189"
" c1_190)"
"(let-values(((x_191)"
"(unsafe-vector-ref"
" vec_91"
" a1_188))"
"((y_192)"
"(unsafe-vector-ref"
" vec_91"
" b1_189)))"
"(if(if #t"
"(not"
"(if #f"
"(<"
"(#f"
" y_192)"
"(#f"
" x_191))"
"(<"
" y_192"
" x_191)))"
"(if #f"
"(<"
"(#f"
" x_191)"
"(#f"
" y_192))"
"(<"
" x_191"
" y_192)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" x_191)"
"(let-values(((a1_193)"
"(unsafe-fx+"
" a1_188"
" 1))"
"((c1_194)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<"
" c1_194"
" b1_189)"
"(let-values()"
"(loop_187"
" a1_193"
" b1_189"
" c1_194))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" y_192)"
"(let-values(((b1_195)"
"(unsafe-fx+"
" b1_189"
" 1))"
"((c1_196)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<="
" b2_186"
" b1_195)"
"((letrec-values(((loop_197)"
"(lambda(a1_198"
" c1_199)"
"(if(unsafe-fx<"
" c1_199"
" b1_195)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_199"
"(unsafe-vector-ref"
" vec_91"
" a1_198))"
"(loop_197"
"(unsafe-fx+"
" a1_198"
" 1)"
"(unsafe-fx+"
" c1_199"
" 1))))"
"(void)))))"
" loop_197)"
" a1_188"
" c1_196)"
"(loop_187"
" a1_188"
" b1_195"
" c1_196)))))))))"
" loop_187)"
" Amid2_184"
" Bmid1_185"
" Blo_171)))))))))))))"
"(let-values(((Alo_200) 0)"
"((Amid1_201) n/2-_93)"
"((Amid2_202) n/2+_94)"
"((Ahi_203) n_92)"
"((B1lo_204) n_92))"
"(begin"
"(copying-mergesort_169 Amid1_201 B1lo_204 n/2+_94)"
"(if(zero? n/2-_93)"
"(void)"
"(let-values()(copying-mergesort_169 Alo_200 Amid2_202 n/2-_93)))"
"(let-values(((b2_205) Ahi_203))"
"((letrec-values(((loop_206)"
"(lambda(a1_207 b1_208 c1_209)"
"(let-values(((x_210)"
"(unsafe-vector-ref vec_91 a1_207))"
"((y_211)"
"(unsafe-vector-ref"
" vec_91"
" b1_208)))"
"(if(if #f"
"(not"
"(if #f"
"(<(#f y_211)(#f x_210))"
"(< y_211 x_210)))"
"(if #f"
"(<(#f x_210)(#f y_211))"
"(< x_210 y_211)))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 x_210)"
"(let-values(((a1_212)"
"(unsafe-fx+ a1_207 1))"
"((c1_213)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx< c1_213 b1_208)"
"(let-values()"
"(loop_206 a1_212 b1_208 c1_213))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 y_211)"
"(let-values(((b1_214)"
"(unsafe-fx+ b1_208 1))"
"((c1_215)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx<= b2_205 b1_214)"
"((letrec-values(((loop_216)"
"(lambda(a1_217"
" c1_218)"
"(if(unsafe-fx<"
" c1_218"
" b1_214)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_218"
"(unsafe-vector-ref"
" vec_91"
" a1_217))"
"(loop_216"
"(unsafe-fx+"
" a1_217"
" 1)"
"(unsafe-fx+"
" c1_218"
" 1))))"
"(void)))))"
" loop_216)"
" a1_207"
" c1_215)"
"(loop_206"
" a1_207"
" b1_214"
" c1_215)))))))))"
" loop_206)"
" B1lo_204"
" Amid2_202"
" Alo_200))))))))))"
"(begin(hash-set! sort-internals_29 < proc_90)(hash-set! sort-internals_29 <= proc_90)))"
"(let-values(((proc_219)"
"(lambda(vec_220 n_221)"
"(let-values(((n/2-_222)(unsafe-fxrshift n_221 1)))"
"(let-values(((n/2+_223)(unsafe-fx- n_221 n/2-_222)))"
"(letrec-values(((copying-mergesort_298)"
"(lambda(Alo_299 Blo_300 n_301)"
"(if(unsafe-fx= n_301 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299)))"
"(if(unsafe-fx= n_301 2)"
"(let-values()"
"(let-values(((x_302)"
"(unsafe-vector-ref vec_220 Alo_299))"
"((y_303)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+ Alo_299 1))))"
"(if(if #f"
"(>(#f y_303)(#f x_302))"
"(> y_303 x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 y_303)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 x_302)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" y_303)))))"
"(if(unsafe-fx< n_301 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299))"
"((letrec-values(((iloop_304)"
"(lambda(i_305)"
"(if(unsafe-fx<"
" i_305"
" n_301)"
"(let-values()"
"(let-values(((ref-i_306)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+"
" Alo_299"
" i_305))))"
"((letrec-values(((jloop_307)"
"(lambda(j_308)"
"(let-values(((ref-j-1_309)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx-"
" j_308"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_300"
" j_308)"
"(if #f"
"(>"
"(#f"
" ref-i_306)"
"(#f"
" ref-j-1_309))"
"(>"
" ref-i_306"
" ref-j-1_309))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-j-1_309)"
"(jloop_307"
"(unsafe-fx-"
" j_308"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-i_306)"
"(iloop_304"
"(unsafe-fx+"
" i_305"
" 1))))))))"
" jloop_307)"
"(unsafe-fx+"
" Blo_300"
" i_305))))"
"(void)))))"
" iloop_304)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_310)"
"(unsafe-fxrshift n_301 1)))"
"(let-values(((n/2+_311)"
"(unsafe-fx- n_301 n/2-_310)))"
"(let-values(((Amid1_312)"
"(unsafe-fx+ Alo_299 n/2-_310))"
"((Amid2_313)"
"(unsafe-fx+ Alo_299 n/2+_311))"
"((Bmid1_314)"
"(unsafe-fx+ Blo_300 n/2-_310)))"
"(begin"
"(copying-mergesort_298"
" Amid1_312"
" Bmid1_314"
" n/2+_311)"
"(copying-mergesort_298"
" Alo_299"
" Amid2_313"
" n/2-_310)"
"(let-values(((b2_315)"
"(unsafe-fx+"
" Blo_300"
" n_301)))"
"((letrec-values(((loop_316)"
"(lambda(a1_317"
" b1_318"
" c1_319)"
"(let-values(((x_320)"
"(unsafe-vector-ref"
" vec_220"
" a1_317))"
"((y_321)"
"(unsafe-vector-ref"
" vec_220"
" b1_318)))"
"(if(if #t"
"(not"
"(if #f"
"(>"
"(#f"
" y_321)"
"(#f"
" x_320))"
"(>"
" y_321"
" x_320)))"
"(if #f"
"(>"
"(#f"
" x_320)"
"(#f"
" y_321))"
"(>"
" x_320"
" y_321)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" x_320)"
"(let-values(((a1_322)"
"(unsafe-fx+"
" a1_317"
" 1))"
"((c1_323)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<"
" c1_323"
" b1_318)"
"(let-values()"
"(loop_316"
" a1_322"
" b1_318"
" c1_323))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" y_321)"
"(let-values(((b1_324)"
"(unsafe-fx+"
" b1_318"
" 1))"
"((c1_325)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<="
" b2_315"
" b1_324)"
"((letrec-values(((loop_326)"
"(lambda(a1_327"
" c1_328)"
"(if(unsafe-fx<"
" c1_328"
" b1_324)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_328"
"(unsafe-vector-ref"
" vec_220"
" a1_327))"
"(loop_326"
"(unsafe-fx+"
" a1_327"
" 1)"
"(unsafe-fx+"
" c1_328"
" 1))))"
"(void)))))"
" loop_326)"
" a1_317"
" c1_325)"
"(loop_316"
" a1_317"
" b1_324"
" c1_325)))))))))"
" loop_316)"
" Amid2_313"
" Bmid1_314"
" Blo_300)))))))))))))"
"(let-values(((Alo_329) 0)"
"((Amid1_330) n/2-_222)"
"((Amid2_331) n/2+_223)"
"((Ahi_332) n_221)"
"((B1lo_333) n_221))"
"(begin"
"(copying-mergesort_298 Amid1_330 B1lo_333 n/2+_223)"
"(if(zero? n/2-_222)"
"(void)"
"(let-values()(copying-mergesort_298 Alo_329 Amid2_331 n/2-_222)))"
"(let-values(((b2_334) Ahi_332))"
"((letrec-values(((loop_335)"
"(lambda(a1_336 b1_337 c1_338)"
"(let-values(((x_339)"
"(unsafe-vector-ref"
" vec_220"
" a1_336))"
"((y_340)"
"(unsafe-vector-ref"
" vec_220"
" b1_337)))"
"(if(if #f"
"(not"
"(if #f"
"(>(#f y_340)(#f x_339))"
"(> y_340 x_339)))"
"(if #f"
"(>(#f x_339)(#f y_340))"
"(> x_339 y_340)))"
"(begin"
"(unsafe-vector-set! vec_220 c1_338 x_339)"
"(let-values(((a1_341)"
"(unsafe-fx+ a1_336 1))"
"((c1_342)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx< c1_342 b1_337)"
"(let-values()"
"(loop_335 a1_341 b1_337 c1_342))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_220 c1_338 y_340)"
"(let-values(((b1_343)"
"(unsafe-fx+ b1_337 1))"
"((c1_344)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx<= b2_334 b1_343)"
"((letrec-values(((loop_345)"
"(lambda(a1_346"
" c1_347)"
"(if(unsafe-fx<"
" c1_347"
" b1_343)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_347"
"(unsafe-vector-ref"
" vec_220"
" a1_346))"
"(loop_345"
"(unsafe-fx+"
" a1_346"
" 1)"
"(unsafe-fx+"
" c1_347"
" 1))))"
"(void)))))"
" loop_345)"
" a1_336"
" c1_344)"
"(loop_335"
" a1_336"
" b1_343"
" c1_344)))))))))"
" loop_335)"
" B1lo_333"
" Amid2_331"
" Alo_329))))))))))"
"(begin(hash-set! sort-internals_29 > proc_219)(hash-set! sort-internals_29 >= proc_219)))"
"(let-values(((proc_348)"
"(lambda(vec_349 n_350)"
"(let-values(((n/2-_351)(unsafe-fxrshift n_350 1)))"
"(let-values(((n/2+_352)(unsafe-fx- n_350 n/2-_351)))"
"(letrec-values(((copying-mergesort_427)"
"(lambda(Alo_428 Blo_429 n_430)"
"(if(unsafe-fx= n_430 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428)))"
"(if(unsafe-fx= n_430 2)"
"(let-values()"
"(let-values(((x_431)"
"(unsafe-vector-ref vec_349 Alo_428))"
"((y_432)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+ Alo_428 1))))"
"(if(if #f"
"(string<?(#f y_432)(#f x_431))"
"(string<? y_432 x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 y_432)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 x_431)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" y_432)))))"
"(if(unsafe-fx< n_430 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428))"
"((letrec-values(((iloop_433)"
"(lambda(i_434)"
"(if(unsafe-fx<"
" i_434"
" n_430)"
"(let-values()"
"(let-values(((ref-i_435)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+"
" Alo_428"
" i_434))))"
"((letrec-values(((jloop_436)"
"(lambda(j_437)"
"(let-values(((ref-j-1_438)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx-"
" j_437"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_429"
" j_437)"
"(if #f"
"(string<?"
"(#f"
" ref-i_435)"
"(#f"
" ref-j-1_438))"
"(string<?"
" ref-i_435"
" ref-j-1_438))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-j-1_438)"
"(jloop_436"
"(unsafe-fx-"
" j_437"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-i_435)"
"(iloop_433"
"(unsafe-fx+"
" i_434"
" 1))))))))"
" jloop_436)"
"(unsafe-fx+"
" Blo_429"
" i_434))))"
"(void)))))"
" iloop_433)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_439)"
"(unsafe-fxrshift n_430 1)))"
"(let-values(((n/2+_440)"
"(unsafe-fx- n_430 n/2-_439)))"
"(let-values(((Amid1_441)"
"(unsafe-fx+ Alo_428 n/2-_439))"
"((Amid2_442)"
"(unsafe-fx+ Alo_428 n/2+_440))"
"((Bmid1_443)"
"(unsafe-fx+ Blo_429 n/2-_439)))"
"(begin"
"(copying-mergesort_427"
" Amid1_441"
" Bmid1_443"
" n/2+_440)"
"(copying-mergesort_427"
" Alo_428"
" Amid2_442"
" n/2-_439)"
"(let-values(((b2_444)"
"(unsafe-fx+"
" Blo_429"
" n_430)))"
"((letrec-values(((loop_445)"
"(lambda(a1_446"
" b1_447"
" c1_448)"
"(let-values(((x_449)"
"(unsafe-vector-ref"
" vec_349"
" a1_446))"
"((y_450)"
"(unsafe-vector-ref"
" vec_349"
" b1_447)))"
"(if(if #t"
"(not"
"(if #f"
"(string<?"
"(#f"
" y_450)"
"(#f"
" x_449))"
"(string<?"
" y_450"
" x_449)))"
"(if #f"
"(string<?"
"(#f"
" x_449)"
"(#f"
" y_450))"
"(string<?"
" x_449"
" y_450)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" x_449)"
"(let-values(((a1_451)"
"(unsafe-fx+"
" a1_446"
" 1))"
"((c1_452)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<"
" c1_452"
" b1_447)"
"(let-values()"
"(loop_445"
" a1_451"
" b1_447"
" c1_452))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" y_450)"
"(let-values(((b1_453)"
"(unsafe-fx+"
" b1_447"
" 1))"
"((c1_454)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<="
" b2_444"
" b1_453)"
"((letrec-values(((loop_455)"
"(lambda(a1_456"
" c1_457)"
"(if(unsafe-fx<"
" c1_457"
" b1_453)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_457"
"(unsafe-vector-ref"
" vec_349"
" a1_456))"
"(loop_455"
"(unsafe-fx+"
" a1_456"
" 1)"
"(unsafe-fx+"
" c1_457"
" 1))))"
"(void)))))"
" loop_455)"
" a1_446"
" c1_454)"
"(loop_445"
" a1_446"
" b1_453"
" c1_454)))))))))"
" loop_445)"
" Amid2_442"
" Bmid1_443"
" Blo_429)))))))))))))"
"(let-values(((Alo_458) 0)"
"((Amid1_459) n/2-_351)"
"((Amid2_460) n/2+_352)"
"((Ahi_461) n_350)"
"((B1lo_462) n_350))"
"(begin"
"(copying-mergesort_427 Amid1_459 B1lo_462 n/2+_352)"
"(if(zero? n/2-_351)"
"(void)"
"(let-values()(copying-mergesort_427 Alo_458 Amid2_460 n/2-_351)))"
"(let-values(((b2_463) Ahi_461))"
"((letrec-values(((loop_464)"
"(lambda(a1_465 b1_466 c1_467)"
"(let-values(((x_468)"
"(unsafe-vector-ref"
" vec_349"
" a1_465))"
"((y_469)"
"(unsafe-vector-ref"
" vec_349"
" b1_466)))"
"(if(if #f"
"(not"
"(if #f"
"(string<?(#f y_469)(#f x_468))"
"(string<? y_469 x_468)))"
"(if #f"
"(string<?(#f x_468)(#f y_469))"
"(string<? x_468 y_469)))"
"(begin"
"(unsafe-vector-set! vec_349 c1_467 x_468)"
"(let-values(((a1_470)"
"(unsafe-fx+ a1_465 1))"
"((c1_471)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx< c1_471 b1_466)"
"(let-values()"
"(loop_464 a1_470 b1_466 c1_471))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_349 c1_467 y_469)"
"(let-values(((b1_472)"
"(unsafe-fx+ b1_466 1))"
"((c1_473)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx<= b2_463 b1_472)"
"((letrec-values(((loop_474)"
"(lambda(a1_475"
" c1_476)"
"(if(unsafe-fx<"
" c1_476"
" b1_472)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_476"
"(unsafe-vector-ref"
" vec_349"
" a1_475))"
"(loop_474"
"(unsafe-fx+"
" a1_475"
" 1)"
"(unsafe-fx+"
" c1_476"
" 1))))"
"(void)))))"
" loop_474)"
" a1_465"
" c1_473)"
"(loop_464"
" a1_465"
" b1_472"
" c1_473)))))))))"
" loop_464)"
" B1lo_462"
" Amid2_460"
" Alo_458))))))))))"
"(begin"
"(hash-set! sort-internals_29 string<? proc_348)"
"(hash-set! sort-internals_29 string<=? proc_348)))"
"(let-values(((proc_477)"
"(lambda(vec_478 n_479)"
"(let-values(((n/2-_480)(unsafe-fxrshift n_479 1)))"
"(let-values(((n/2+_481)(unsafe-fx- n_479 n/2-_480)))"
"(letrec-values(((copying-mergesort_556)"
"(lambda(Alo_557 Blo_558 n_559)"
"(if(unsafe-fx= n_559 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557)))"
"(if(unsafe-fx= n_559 2)"
"(let-values()"
"(let-values(((x_560)"
"(unsafe-vector-ref vec_478 Alo_557))"
"((y_561)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+ Alo_557 1))))"
"(if(if #f"
"(string-ci<?(#f y_561)(#f x_560))"
"(string-ci<? y_561 x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 y_561)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 x_560)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" y_561)))))"
"(if(unsafe-fx< n_559 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557))"
"((letrec-values(((iloop_562)"
"(lambda(i_563)"
"(if(unsafe-fx<"
" i_563"
" n_559)"
"(let-values()"
"(let-values(((ref-i_564)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+"
" Alo_557"
" i_563))))"
"((letrec-values(((jloop_565)"
"(lambda(j_566)"
"(let-values(((ref-j-1_567)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx-"
" j_566"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_558"
" j_566)"
"(if #f"
"(string-ci<?"
"(#f"
" ref-i_564)"
"(#f"
" ref-j-1_567))"
"(string-ci<?"
" ref-i_564"
" ref-j-1_567))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-j-1_567)"
"(jloop_565"
"(unsafe-fx-"
" j_566"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-i_564)"
"(iloop_562"
"(unsafe-fx+"
" i_563"
" 1))))))))"
" jloop_565)"
"(unsafe-fx+"
" Blo_558"
" i_563))))"
"(void)))))"
" iloop_562)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_568)"
"(unsafe-fxrshift n_559 1)))"
"(let-values(((n/2+_569)"
"(unsafe-fx- n_559 n/2-_568)))"
"(let-values(((Amid1_570)"
"(unsafe-fx+ Alo_557 n/2-_568))"
"((Amid2_571)"
"(unsafe-fx+ Alo_557 n/2+_569))"
"((Bmid1_572)"
"(unsafe-fx+ Blo_558 n/2-_568)))"
"(begin"
"(copying-mergesort_556"
" Amid1_570"
" Bmid1_572"
" n/2+_569)"
"(copying-mergesort_556"
" Alo_557"
" Amid2_571"
" n/2-_568)"
"(let-values(((b2_573)"
"(unsafe-fx+"
" Blo_558"
" n_559)))"
"((letrec-values(((loop_574)"
"(lambda(a1_575"
" b1_576"
" c1_577)"
"(let-values(((x_578)"
"(unsafe-vector-ref"
" vec_478"
" a1_575))"
"((y_579)"
"(unsafe-vector-ref"
" vec_478"
" b1_576)))"
"(if(if #t"
"(not"
"(if #f"
"(string-ci<?"
"(#f"
" y_579)"
"(#f"
" x_578))"
"(string-ci<?"
" y_579"
" x_578)))"
"(if #f"
"(string-ci<?"
"(#f"
" x_578)"
"(#f"
" y_579))"
"(string-ci<?"
" x_578"
" y_579)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" x_578)"
"(let-values(((a1_580)"
"(unsafe-fx+"
" a1_575"
" 1))"
"((c1_581)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<"
" c1_581"
" b1_576)"
"(let-values()"
"(loop_574"
" a1_580"
" b1_576"
" c1_581))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" y_579)"
"(let-values(((b1_582)"
"(unsafe-fx+"
" b1_576"
" 1))"
"((c1_583)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<="
" b2_573"
" b1_582)"
"((letrec-values(((loop_584)"
"(lambda(a1_585"
" c1_586)"
"(if(unsafe-fx<"
" c1_586"
" b1_582)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_586"
"(unsafe-vector-ref"
" vec_478"
" a1_585))"
"(loop_584"
"(unsafe-fx+"
" a1_585"
" 1)"
"(unsafe-fx+"
" c1_586"
" 1))))"
"(void)))))"
" loop_584)"
" a1_575"
" c1_583)"
"(loop_574"
" a1_575"
" b1_582"
" c1_583)))))))))"
" loop_574)"
" Amid2_571"
" Bmid1_572"
" Blo_558)))))))))))))"
"(let-values(((Alo_587) 0)"
"((Amid1_588) n/2-_480)"
"((Amid2_589) n/2+_481)"
"((Ahi_590) n_479)"
"((B1lo_591) n_479))"
"(begin"
"(copying-mergesort_556 Amid1_588 B1lo_591 n/2+_481)"
"(if(zero? n/2-_480)"
"(void)"
"(let-values()(copying-mergesort_556 Alo_587 Amid2_589 n/2-_480)))"
"(let-values(((b2_592) Ahi_590))"
"((letrec-values(((loop_593)"
"(lambda(a1_594 b1_595 c1_596)"
"(let-values(((x_597)"
"(unsafe-vector-ref"
" vec_478"
" a1_594))"
"((y_598)"
"(unsafe-vector-ref"
" vec_478"
" b1_595)))"
"(if(if #f"
"(not"
"(if #f"
"(string-ci<?(#f y_598)(#f x_597))"
"(string-ci<? y_598 x_597)))"
"(if #f"
"(string-ci<?(#f x_597)(#f y_598))"
"(string-ci<? x_597 y_598)))"
"(begin"
"(unsafe-vector-set! vec_478 c1_596 x_597)"
"(let-values(((a1_599)"
"(unsafe-fx+ a1_594 1))"
"((c1_600)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx< c1_600 b1_595)"
"(let-values()"
"(loop_593 a1_599 b1_595 c1_600))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_478 c1_596 y_598)"
"(let-values(((b1_601)"
"(unsafe-fx+ b1_595 1))"
"((c1_602)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx<= b2_592 b1_601)"
"((letrec-values(((loop_603)"
"(lambda(a1_604"
" c1_605)"
"(if(unsafe-fx<"
" c1_605"
" b1_601)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_605"
"(unsafe-vector-ref"
" vec_478"
" a1_604))"
"(loop_603"
"(unsafe-fx+"
" a1_604"
" 1)"
"(unsafe-fx+"
" c1_605"
" 1))))"
"(void)))))"
" loop_603)"
" a1_594"
" c1_602)"
"(loop_593"
" a1_594"
" b1_601"
" c1_602)))))))))"
" loop_593)"
" B1lo_591"
" Amid2_589"
" Alo_587))))))))))"
"(begin"
"(hash-set! sort-internals_29 string-ci<? proc_477)"
"(hash-set! sort-internals_29 string-ci<=? proc_477)))"
"(let-values(((proc_606)"
"(lambda(vec_607 n_608)"
"(let-values(((n/2-_609)(unsafe-fxrshift n_608 1)))"
"(let-values(((n/2+_610)(unsafe-fx- n_608 n/2-_609)))"
"(letrec-values(((copying-mergesort_685)"
"(lambda(Alo_686 Blo_687 n_688)"
"(if(unsafe-fx= n_688 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686)))"
"(if(unsafe-fx= n_688 2)"
"(let-values()"
"(let-values(((x_689)"
"(unsafe-vector-ref vec_607 Alo_686))"
"((y_690)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+ Alo_686 1))))"
"(if(if #f"
"(keyword<?(#f y_690)(#f x_689))"
"(keyword<? y_690 x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 y_690)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 x_689)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" y_690)))))"
"(if(unsafe-fx< n_688 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686))"
"((letrec-values(((iloop_691)"
"(lambda(i_692)"
"(if(unsafe-fx<"
" i_692"
" n_688)"
"(let-values()"
"(let-values(((ref-i_693)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+"
" Alo_686"
" i_692))))"
"((letrec-values(((jloop_694)"
"(lambda(j_695)"
"(let-values(((ref-j-1_696)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx-"
" j_695"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_687"
" j_695)"
"(if #f"
"(keyword<?"
"(#f"
" ref-i_693)"
"(#f"
" ref-j-1_696))"
"(keyword<?"
" ref-i_693"
" ref-j-1_696))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-j-1_696)"
"(jloop_694"
"(unsafe-fx-"
" j_695"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-i_693)"
"(iloop_691"
"(unsafe-fx+"
" i_692"
" 1))))))))"
" jloop_694)"
"(unsafe-fx+"
" Blo_687"
" i_692))))"
"(void)))))"
" iloop_691)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_697)"
"(unsafe-fxrshift n_688 1)))"
"(let-values(((n/2+_698)"
"(unsafe-fx- n_688 n/2-_697)))"
"(let-values(((Amid1_699)"
"(unsafe-fx+ Alo_686 n/2-_697))"
"((Amid2_700)"
"(unsafe-fx+ Alo_686 n/2+_698))"
"((Bmid1_701)"
"(unsafe-fx+ Blo_687 n/2-_697)))"
"(begin"
"(copying-mergesort_685"
" Amid1_699"
" Bmid1_701"
" n/2+_698)"
"(copying-mergesort_685"
" Alo_686"
" Amid2_700"
" n/2-_697)"
"(let-values(((b2_702)"
"(unsafe-fx+"
" Blo_687"
" n_688)))"
"((letrec-values(((loop_703)"
"(lambda(a1_704"
" b1_705"
" c1_706)"
"(let-values(((x_707)"
"(unsafe-vector-ref"
" vec_607"
" a1_704))"
"((y_708)"
"(unsafe-vector-ref"
" vec_607"
" b1_705)))"
"(if(if #t"
"(not"
"(if #f"
"(keyword<?"
"(#f"
" y_708)"
"(#f"
" x_707))"
"(keyword<?"
" y_708"
" x_707)))"
"(if #f"
"(keyword<?"
"(#f"
" x_707)"
"(#f"
" y_708))"
"(keyword<?"
" x_707"
" y_708)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" x_707)"
"(let-values(((a1_709)"
"(unsafe-fx+"
" a1_704"
" 1))"
"((c1_710)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<"
" c1_710"
" b1_705)"
"(let-values()"
"(loop_703"
" a1_709"
" b1_705"
" c1_710))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" y_708)"
"(let-values(((b1_711)"
"(unsafe-fx+"
" b1_705"
" 1))"
"((c1_712)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<="
" b2_702"
" b1_711)"
"((letrec-values(((loop_713)"
"(lambda(a1_714"
" c1_715)"
"(if(unsafe-fx<"
" c1_715"
" b1_711)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_715"
"(unsafe-vector-ref"
" vec_607"
" a1_714))"
"(loop_713"
"(unsafe-fx+"
" a1_714"
" 1)"
"(unsafe-fx+"
" c1_715"
" 1))))"
"(void)))))"
" loop_713)"
" a1_704"
" c1_712)"
"(loop_703"
" a1_704"
" b1_711"
" c1_712)))))))))"
" loop_703)"
" Amid2_700"
" Bmid1_701"
" Blo_687)))))))))))))"
"(let-values(((Alo_716) 0)"
"((Amid1_717) n/2-_609)"
"((Amid2_718) n/2+_610)"
"((Ahi_719) n_608)"
"((B1lo_720) n_608))"
"(begin"
"(copying-mergesort_685 Amid1_717 B1lo_720 n/2+_610)"
"(if(zero? n/2-_609)"
"(void)"
"(let-values()(copying-mergesort_685 Alo_716 Amid2_718 n/2-_609)))"
"(let-values(((b2_721) Ahi_719))"
"((letrec-values(((loop_722)"
"(lambda(a1_723 b1_724 c1_725)"
"(let-values(((x_726)"
"(unsafe-vector-ref"
" vec_607"
" a1_723))"
"((y_727)"
"(unsafe-vector-ref"
" vec_607"
" b1_724)))"
"(if(if #f"
"(not"
"(if #f"
"(keyword<?(#f y_727)(#f x_726))"
"(keyword<? y_727 x_726)))"
"(if #f"
"(keyword<?(#f x_726)(#f y_727))"
"(keyword<? x_726 y_727)))"
"(begin"
"(unsafe-vector-set! vec_607 c1_725 x_726)"
"(let-values(((a1_728)"
"(unsafe-fx+ a1_723 1))"
"((c1_729)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx< c1_729 b1_724)"
"(let-values()"
"(loop_722 a1_728 b1_724 c1_729))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_607 c1_725 y_727)"
"(let-values(((b1_730)"
"(unsafe-fx+ b1_724 1))"
"((c1_731)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx<= b2_721 b1_730)"
"((letrec-values(((loop_732)"
"(lambda(a1_733"
" c1_734)"
"(if(unsafe-fx<"
" c1_734"
" b1_730)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_734"
"(unsafe-vector-ref"
" vec_607"
" a1_733))"
"(loop_732"
"(unsafe-fx+"
" a1_733"
" 1)"
"(unsafe-fx+"
" c1_734"
" 1))))"
"(void)))))"
" loop_732)"
" a1_723"
" c1_731)"
"(loop_722"
" a1_723"
" b1_730"
" c1_731)))))))))"
" loop_722)"
" B1lo_720"
" Amid2_718"
" Alo_716))))))))))"
"(hash-set! sort-internals_29 keyword<? proc_606))))))"
"(case-lambda"
"((lst_735 <?_736)"
"(let-values(((n_737)(length lst_735)))"
"(if(= n_737 0)"
"(let-values() lst_735)"
"(if #f"
"(let-values()"
"(let-values(((vec_752)(make-vector(+ n_737(ceiling(/ n_737 2))))))"
"(begin"
"((letrec-values(((loop_753)"
"(lambda(i_754 lst_755)"
"(if(pair? lst_755)"
"(let-values()"
"(let-values(((x_756)(car lst_755)))"
"(begin"
"(vector-set! vec_752 i_754(cons(#f x_756) x_756))"
"(loop_753(add1 i_754)(cdr lst_755)))))"
"(void)))))"
" loop_753)"
" 0"
" lst_735)"
"(let-values()"
"(let-values(((n/2-_757)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_758)(unsafe-fx- n_737 n/2-_757)))"
"(letrec-values(((copying-mergesort_833)"
"(lambda(Alo_834 Blo_835 n_836)"
"(if(unsafe-fx= n_836 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_752"
" Blo_835"
"(unsafe-vector-ref vec_752 Alo_834)))"
"(if(unsafe-fx= n_836 2)"
"(let-values()"
"(let-values(((x_837)(unsafe-vector-ref vec_752 Alo_834))"
"((y_838)"
"(unsafe-vector-ref vec_752(unsafe-fx+ Alo_834 1))))"
"(if(if #t(<?_736(car y_838)(car x_837))(<?_736 y_838 x_837))"
"(begin"
"(unsafe-vector-set! vec_752 Blo_835 y_838)"
"(unsafe-vector-set! vec_752(unsafe-fx+ Blo_835 1) x_837))"
"(begin"
"(unsafe-vector-set! vec_752 Blo_835 x_837)"
"(unsafe-vector-set! vec_752(unsafe-fx+ Blo_835 1) y_838)))))"
"(if(unsafe-fx< n_836 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" Blo_835"
"(unsafe-vector-ref vec_752 Alo_834))"
"((letrec-values(((iloop_839)"
"(lambda(i_840)"
"(if(unsafe-fx< i_840 n_836)"
"(let-values()"
"(let-values(((ref-i_841)"
"(unsafe-vector-ref"
" vec_752"
"(unsafe-fx+"
" Alo_834"
" i_840))))"
"((letrec-values(((jloop_842)"
"(lambda(j_843)"
"(let-values(((ref-j-1_844)"
"(unsafe-vector-ref"
" vec_752"
"(unsafe-fx-"
" j_843"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_835"
" j_843)"
"(if #t"
"(<?_736"
"(car"
" ref-i_841)"
"(car"
" ref-j-1_844))"
"(<?_736"
" ref-i_841"
" ref-j-1_844))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" j_843"
" ref-j-1_844)"
"(jloop_842"
"(unsafe-fx-"
" j_843"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" j_843"
" ref-i_841)"
"(iloop_839"
"(unsafe-fx+"
" i_840"
" 1))))))))"
" jloop_842)"
"(unsafe-fx+ Blo_835 i_840))))"
"(void)))))"
" iloop_839)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_845)(unsafe-fxrshift n_836 1)))"
"(let-values(((n/2+_846)(unsafe-fx- n_836 n/2-_845)))"
"(let-values(((Amid1_847)(unsafe-fx+ Alo_834 n/2-_845))"
"((Amid2_848)(unsafe-fx+ Alo_834 n/2+_846))"
"((Bmid1_849)(unsafe-fx+ Blo_835 n/2-_845)))"
"(begin"
"(copying-mergesort_833 Amid1_847 Bmid1_849 n/2+_846)"
"(copying-mergesort_833 Alo_834 Amid2_848 n/2-_845)"
"(let-values(((b2_850)(unsafe-fx+ Blo_835 n_836)))"
"((letrec-values(((loop_851)"
"(lambda(a1_852 b1_853 c1_854)"
"(let-values(((x_855)"
"(unsafe-vector-ref"
" vec_752"
" a1_852))"
"((y_856)"
"(unsafe-vector-ref"
" vec_752"
" b1_853)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_736"
"(car y_856)"
"(car x_855))"
"(<?_736 y_856 x_855)))"
"(if #t"
"(<?_736"
"(car x_855)"
"(car y_856))"
"(<?_736 x_855 y_856)))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_854"
" x_855)"
"(let-values(((a1_857)"
"(unsafe-fx+"
" a1_852"
" 1))"
"((c1_858)"
"(unsafe-fx+"
" c1_854"
" 1)))"
"(if(unsafe-fx<"
" c1_858"
" b1_853)"
"(let-values()"
"(loop_851"
" a1_857"
" b1_853"
" c1_858))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_854"
" y_856)"
"(let-values(((b1_859)"
"(unsafe-fx+"
" b1_853"
" 1))"
"((c1_860)"
"(unsafe-fx+"
" c1_854"
" 1)))"
"(if(unsafe-fx<="
" b2_850"
" b1_859)"
"((letrec-values(((loop_861)"
"(lambda(a1_862"
" c1_863)"
"(if(unsafe-fx<"
" c1_863"
" b1_859)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_863"
"(unsafe-vector-ref"
" vec_752"
" a1_862))"
"(loop_861"
"(unsafe-fx+"
" a1_862"
" 1)"
"(unsafe-fx+"
" c1_863"
" 1))))"
"(void)))))"
" loop_861)"
" a1_852"
" c1_860)"
"(loop_851"
" a1_852"
" b1_859"
" c1_860)))))))))"
" loop_851)"
" Amid2_848"
" Bmid1_849"
" Blo_835)))))))))))))"
"(let-values(((Alo_864) 0)"
"((Amid1_865) n/2-_757)"
"((Amid2_866) n/2+_758)"
"((Ahi_867) n_737)"
"((B1lo_868) n_737))"
"(begin"
"(copying-mergesort_833 Amid1_865 B1lo_868 n/2+_758)"
"(if(zero? n/2-_757)"
"(void)"
"(let-values()(copying-mergesort_833 Alo_864 Amid2_866 n/2-_757)))"
"(let-values(((b2_869) Ahi_867))"
"((letrec-values(((loop_870)"
"(lambda(a1_871 b1_872 c1_873)"
"(let-values(((x_874)(unsafe-vector-ref vec_752 a1_871))"
"((y_875)(unsafe-vector-ref vec_752 b1_872)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_736(car y_875)(car x_874))"
"(<?_736 y_875 x_874)))"
"(if #t"
"(<?_736(car x_874)(car y_875))"
"(<?_736 x_874 y_875)))"
"(begin"
"(unsafe-vector-set! vec_752 c1_873 x_874)"
"(let-values(((a1_876)(unsafe-fx+ a1_871 1))"
"((c1_877)(unsafe-fx+ c1_873 1)))"
"(if(unsafe-fx< c1_877 b1_872)"
"(let-values()(loop_870 a1_876 b1_872 c1_877))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_752 c1_873 y_875)"
"(let-values(((b1_878)(unsafe-fx+ b1_872 1))"
"((c1_879)(unsafe-fx+ c1_873 1)))"
"(if(unsafe-fx<= b2_869 b1_878)"
"((letrec-values(((loop_880)"
"(lambda(a1_881 c1_882)"
"(if(unsafe-fx< c1_882 b1_878)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_882"
"(unsafe-vector-ref"
" vec_752"
" a1_881))"
"(loop_880"
"(unsafe-fx+ a1_881 1)"
"(unsafe-fx+ c1_882 1))))"
"(void)))))"
" loop_880)"
" a1_871"
" c1_879)"
"(loop_870 a1_871 b1_878 c1_879)))))))))"
" loop_870)"
" B1lo_868"
" Amid2_866"
" Alo_864))))))))"
"((letrec-values(((loop_883)"
"(lambda(i_884 r_885)"
"(let-values(((i_886)(sub1 i_884)))"
"(if(< i_886 0)"
" r_885"
"(loop_883 i_886(cons(cdr(vector-ref vec_752 i_886)) r_885)))))))"
" loop_883)"
" n_737"
" '()))))"
"(if(< n_737 2)"
"(let-values() lst_735)"
"(if((letrec-values(((loop_887)"
"(lambda(last_888 next_889)"
"(let-values(((or-part_890)(null? next_889)))"
"(if or-part_890"
" or-part_890"
"(if(not"
"(if #f"
"(<?_736(#f(car next_889))(#f last_888))"
"(<?_736(car next_889) last_888)))"
"(loop_887(car next_889)(cdr next_889))"
" #f))))))"
" loop_887)"
"(car lst_735)"
"(cdr lst_735))"
"(let-values() lst_735)"
"(if(<= n_737 3)"
"(let-values()"
"(if(= n_737 2)"
"(list(cadr lst_735)(car lst_735))"
"(let-values(((a_891)(car lst_735))((b_892)(cadr lst_735))((c_893)(caddr lst_735)))"
"(let-values(((a_894)(car lst_735))((b_895)(cadr lst_735))((c_896)(caddr lst_735)))"
"(if(if #f(<?_736(#f b_895)(#f a_894))(<?_736 b_895 a_894))"
"(if(if #f(<?_736(#f c_896)(#f b_895))(<?_736 c_896 b_895))"
"(list c_896 b_895 a_894)"
"(if(if #f(<?_736(#f c_896)(#f a_894))(<?_736 c_896 a_894))"
"(list b_895 c_896 a_894)"
"(list b_895 a_894 c_896)))"
"(if(if #f(<?_736(#f c_896)(#f a_894))(<?_736 c_896 a_894))"
"(list c_896 a_894 b_895)"
"(list a_894 c_896 b_895)))))))"
"(let-values()"
"(let-values(((vec_897)(make-vector(+ n_737(ceiling(/ n_737 2))))))"
"(begin"
"((letrec-values(((loop_898)"
"(lambda(i_899 lst_900)"
"(if(pair? lst_900)"
"(let-values()"
"(begin"
"(vector-set! vec_897 i_899(car lst_900))"
"(loop_898(add1 i_899)(cdr lst_900))))"
"(void)))))"
" loop_898)"
" 0"
" lst_735)"
"(if #f"
"(let-values()"
"(let-values(((n/2-_901)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_902)(unsafe-fx- n_737 n/2-_901)))"
"(letrec-values(((copying-mergesort_977)"
"(lambda(Alo_978 Blo_979 n_980)"
"(if(unsafe-fx= n_980 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_979"
"(unsafe-vector-ref vec_897 Alo_978)))"
"(if(unsafe-fx= n_980 2)"
"(let-values()"
"(let-values(((x_981)(unsafe-vector-ref vec_897 Alo_978))"
"((y_982)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_978 1))))"
"(if(if #t"
"(<?_736(#f y_982)(#f x_981))"
"(<?_736 y_982 x_981))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_979 y_982)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_979 1)"
" x_981))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_979 x_981)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_979 1)"
" y_982)))))"
"(if(unsafe-fx< n_980 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_979"
"(unsafe-vector-ref vec_897 Alo_978))"
"((letrec-values(((iloop_983)"
"(lambda(i_984)"
"(if(unsafe-fx< i_984 n_980)"
"(let-values()"
"(let-values(((ref-i_985)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_978"
" i_984))))"
"((letrec-values(((jloop_986)"
"(lambda(j_987)"
"(let-values(((ref-j-1_988)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_987"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_979"
" j_987)"
"(if #t"
"(<?_736"
"(#f"
" ref-i_985)"
"(#f"
" ref-j-1_988))"
"(<?_736"
" ref-i_985"
" ref-j-1_988))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_987"
" ref-j-1_988)"
"(jloop_986"
"(unsafe-fx-"
" j_987"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_987"
" ref-i_985)"
"(iloop_983"
"(unsafe-fx+"
" i_984"
" 1))))))))"
" jloop_986)"
"(unsafe-fx+"
" Blo_979"
" i_984))))"
"(void)))))"
" iloop_983)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_989)(unsafe-fxrshift n_980 1)))"
"(let-values(((n/2+_990)(unsafe-fx- n_980 n/2-_989)))"
"(let-values(((Amid1_991)"
"(unsafe-fx+ Alo_978 n/2-_989))"
"((Amid2_992)"
"(unsafe-fx+ Alo_978 n/2+_990))"
"((Bmid1_993)"
"(unsafe-fx+ Blo_979 n/2-_989)))"
"(begin"
"(copying-mergesort_977"
" Amid1_991"
" Bmid1_993"
" n/2+_990)"
"(copying-mergesort_977"
" Alo_978"
" Amid2_992"
" n/2-_989)"
"(let-values(((b2_994)"
"(unsafe-fx+ Blo_979 n_980)))"
"((letrec-values(((loop_995)"
"(lambda(a1_996"
" b1_997"
" c1_998)"
"(let-values(((x_999)"
"(unsafe-vector-ref"
" vec_897"
" a1_996))"
"((y_1000)"
"(unsafe-vector-ref"
" vec_897"
" b1_997)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_736"
"(#f y_1000)"
"(#f x_999))"
"(<?_736"
" y_1000"
" x_999)))"
"(if #t"
"(<?_736"
"(#f x_999)"
"(#f y_1000))"
"(<?_736"
" x_999"
" y_1000)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_998"
" x_999)"
"(let-values(((a1_1001)"
"(unsafe-fx+"
" a1_996"
" 1))"
"((c1_1002)"
"(unsafe-fx+"
" c1_998"
" 1)))"
"(if(unsafe-fx<"
" c1_1002"
" b1_997)"
"(let-values()"
"(loop_995"
" a1_1001"
" b1_997"
" c1_1002))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_998"
" y_1000)"
"(let-values(((b1_1003)"
"(unsafe-fx+"
" b1_997"
" 1))"
"((c1_1004)"
"(unsafe-fx+"
" c1_998"
" 1)))"
"(if(unsafe-fx<="
" b2_994"
" b1_1003)"
"((letrec-values(((loop_1005)"
"(lambda(a1_1006"
" c1_1007)"
"(if(unsafe-fx<"
" c1_1007"
" b1_1003)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1007"
"(unsafe-vector-ref"
" vec_897"
" a1_1006))"
"(loop_1005"
"(unsafe-fx+"
" a1_1006"
" 1)"
"(unsafe-fx+"
" c1_1007"
" 1))))"
"(void)))))"
" loop_1005)"
" a1_996"
" c1_1004)"
"(loop_995"
" a1_996"
" b1_1003"
" c1_1004)))))))))"
" loop_995)"
" Amid2_992"
" Bmid1_993"
" Blo_979)))))))))))))"
"(let-values(((Alo_1008) 0)"
"((Amid1_1009) n/2-_901)"
"((Amid2_1010) n/2+_902)"
"((Ahi_1011) n_737)"
"((B1lo_1012) n_737))"
"(begin"
"(copying-mergesort_977 Amid1_1009 B1lo_1012 n/2+_902)"
"(if(zero? n/2-_901)"
"(void)"
"(let-values()(copying-mergesort_977 Alo_1008 Amid2_1010 n/2-_901)))"
"(let-values(((b2_1013) Ahi_1011))"
"((letrec-values(((loop_1014)"
"(lambda(a1_1015 b1_1016 c1_1017)"
"(let-values(((x_1018)"
"(unsafe-vector-ref vec_897 a1_1015))"
"((y_1019)"
"(unsafe-vector-ref vec_897 b1_1016)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_736(#f y_1019)(#f x_1018))"
"(<?_736 y_1019 x_1018)))"
"(if #t"
"(<?_736(#f x_1018)(#f y_1019))"
"(<?_736 x_1018 y_1019)))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1017 x_1018)"
"(let-values(((a1_1020)(unsafe-fx+ a1_1015 1))"
"((c1_1021)(unsafe-fx+ c1_1017 1)))"
"(if(unsafe-fx< c1_1021 b1_1016)"
"(let-values()"
"(loop_1014 a1_1020 b1_1016 c1_1021))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1017 y_1019)"
"(let-values(((b1_1022)(unsafe-fx+ b1_1016 1))"
"((c1_1023)(unsafe-fx+ c1_1017 1)))"
"(if(unsafe-fx<= b2_1013 b1_1022)"
"((letrec-values(((loop_1024)"
"(lambda(a1_1025 c1_1026)"
"(if(unsafe-fx<"
" c1_1026"
" b1_1022)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1026"
"(unsafe-vector-ref"
" vec_897"
" a1_1025))"
"(loop_1024"
"(unsafe-fx+"
" a1_1025"
" 1)"
"(unsafe-fx+"
" c1_1026"
" 1))))"
"(void)))))"
" loop_1024)"
" a1_1015"
" c1_1023)"
"(loop_1014 a1_1015 b1_1022 c1_1023)))))))))"
" loop_1014)"
" B1lo_1012"
" Amid2_1010"
" Alo_1008))))))))"
"(let-values(((si_1027)(hash-ref sort-internals_29 <?_736 #f)))"
"(if si_1027"
"(si_1027 vec_897 n_737)"
"(let-values()"
"(let-values(((n/2-_1028)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_1029)(unsafe-fx- n_737 n/2-_1028)))"
"(letrec-values(((copying-mergesort_1104)"
"(lambda(Alo_1105 Blo_1106 n_1107)"
"(if(unsafe-fx= n_1107 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105)))"
"(if(unsafe-fx= n_1107 2)"
"(let-values()"
"(let-values(((x_1108)"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((y_1109)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_1105 1))))"
"(if(if #f"
"(<?_736(#f y_1109)(#f x_1108))"
"(<?_736 y_1109 x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 y_1109)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 x_1108)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" y_1109)))))"
"(if(unsafe-fx< n_1107 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((letrec-values(((iloop_1110)"
"(lambda(i_1111)"
"(if(unsafe-fx< i_1111 n_1107)"
"(let-values()"
"(let-values(((ref-i_1112)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_1105"
" i_1111))))"
"((letrec-values(((jloop_1113)"
"(lambda(j_1114)"
"(let-values(((ref-j-1_1115)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_1114"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1106"
" j_1114)"
"(if #f"
"(<?_736"
"(#f"
" ref-i_1112)"
"(#f"
" ref-j-1_1115))"
"(<?_736"
" ref-i_1112"
" ref-j-1_1115))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-j-1_1115)"
"(jloop_1113"
"(unsafe-fx-"
" j_1114"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-i_1112)"
"(iloop_1110"
"(unsafe-fx+"
" i_1111"
" 1))))))))"
" jloop_1113)"
"(unsafe-fx+"
" Blo_1106"
" i_1111))))"
"(void)))))"
" iloop_1110)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1116)"
"(unsafe-fxrshift n_1107 1)))"
"(let-values(((n/2+_1117)"
"(unsafe-fx- n_1107 n/2-_1116)))"
"(let-values(((Amid1_1118)"
"(unsafe-fx+ Alo_1105 n/2-_1116))"
"((Amid2_1119)"
"(unsafe-fx+ Alo_1105 n/2+_1117))"
"((Bmid1_1120)"
"(unsafe-fx+ Blo_1106 n/2-_1116)))"
"(begin"
"(copying-mergesort_1104"
" Amid1_1118"
" Bmid1_1120"
" n/2+_1117)"
"(copying-mergesort_1104"
" Alo_1105"
" Amid2_1119"
" n/2-_1116)"
"(let-values(((b2_1121)"
"(unsafe-fx+ Blo_1106 n_1107)))"
"((letrec-values(((loop_1122)"
"(lambda(a1_1123"
" b1_1124"
" c1_1125)"
"(let-values(((x_1126)"
"(unsafe-vector-ref"
" vec_897"
" a1_1123))"
"((y_1127)"
"(unsafe-vector-ref"
" vec_897"
" b1_1124)))"
"(if(if #t"
"(not"
"(if #f"
"(<?_736"
"(#f y_1127)"
"(#f"
" x_1126))"
"(<?_736"
" y_1127"
" x_1126)))"
"(if #f"
"(<?_736"
"(#f x_1126)"
"(#f y_1127))"
"(<?_736"
" x_1126"
" y_1127)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" x_1126)"
"(let-values(((a1_1128)"
"(unsafe-fx+"
" a1_1123"
" 1))"
"((c1_1129)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<"
" c1_1129"
" b1_1124)"
"(let-values()"
"(loop_1122"
" a1_1128"
" b1_1124"
" c1_1129))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" y_1127)"
"(let-values(((b1_1130)"
"(unsafe-fx+"
" b1_1124"
" 1))"
"((c1_1131)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<="
" b2_1121"
" b1_1130)"
"((letrec-values(((loop_1132)"
"(lambda(a1_1133"
" c1_1134)"
"(if(unsafe-fx<"
" c1_1134"
" b1_1130)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1134"
"(unsafe-vector-ref"
" vec_897"
" a1_1133))"
"(loop_1132"
"(unsafe-fx+"
" a1_1133"
" 1)"
"(unsafe-fx+"
" c1_1134"
" 1))))"
"(void)))))"
" loop_1132)"
" a1_1123"
" c1_1131)"
"(loop_1122"
" a1_1123"
" b1_1130"
" c1_1131)))))))))"
" loop_1122)"
" Amid2_1119"
" Bmid1_1120"
" Blo_1106)))))))))))))"
"(let-values(((Alo_1135) 0)"
"((Amid1_1136) n/2-_1028)"
"((Amid2_1137) n/2+_1029)"
"((Ahi_1138) n_737)"
"((B1lo_1139) n_737))"
"(begin"
"(copying-mergesort_1104 Amid1_1136 B1lo_1139 n/2+_1029)"
"(if(zero? n/2-_1028)"
"(void)"
"(let-values()(copying-mergesort_1104 Alo_1135 Amid2_1137 n/2-_1028)))"
"(let-values(((b2_1140) Ahi_1138))"
"((letrec-values(((loop_1141)"
"(lambda(a1_1142 b1_1143 c1_1144)"
"(let-values(((x_1145)"
"(unsafe-vector-ref vec_897 a1_1142))"
"((y_1146)"
"(unsafe-vector-ref vec_897 b1_1143)))"
"(if(if #f"
"(not"
"(if #f"
"(<?_736(#f y_1146)(#f x_1145))"
"(<?_736 y_1146 x_1145)))"
"(if #f"
"(<?_736(#f x_1145)(#f y_1146))"
"(<?_736 x_1145 y_1146)))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 x_1145)"
"(let-values(((a1_1147)"
"(unsafe-fx+ a1_1142 1))"
"((c1_1148)"
"(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx< c1_1148 b1_1143)"
"(let-values()"
"(loop_1141 a1_1147 b1_1143 c1_1148))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 y_1146)"
"(let-values(((b1_1149)"
"(unsafe-fx+ b1_1143 1))"
"((c1_1150)"
"(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx<= b2_1140 b1_1149)"
"((letrec-values(((loop_1151)"
"(lambda(a1_1152"
" c1_1153)"
"(if(unsafe-fx<"
" c1_1153"
" b1_1149)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1153"
"(unsafe-vector-ref"
" vec_897"
" a1_1152))"
"(loop_1151"
"(unsafe-fx+"
" a1_1152"
" 1)"
"(unsafe-fx+"
" c1_1153"
" 1))))"
"(void)))))"
" loop_1151)"
" a1_1142"
" c1_1150)"
"(loop_1141"
" a1_1142"
" b1_1149"
" c1_1150)))))))))"
" loop_1141)"
" B1lo_1139"
" Amid2_1137"
" Alo_1135)))))))))))"
"((letrec-values(((loop_1154)"
"(lambda(i_1155 r_1156)"
"(let-values(((i_1157)(sub1 i_1155)))"
"(if(< i_1157 0)"
" r_1156"
"(loop_1154 i_1157(cons(vector-ref vec_897 i_1157) r_1156)))))))"
" loop_1154)"
" n_737"
" '())))))))))))"
"((lst_1158 <?_1159 getkey_1160)"
"(if(if getkey_1160(not(eq? values getkey_1160)) #f)"
"(sort lst_1158 <?_1159 getkey_1160 #f)"
"(sort lst_1158 <?_1159)))"
"((lst_1161 <?_1162 getkey_1163 cache-keys?_1164)"
"(if(if getkey_1163(not(eq? values getkey_1163)) #f)"
"(let-values(((n_1165)(length lst_1161)))"
"(if(= n_1165 0)"
"(let-values() lst_1161)"
"(if cache-keys?_1164"
"(let-values()"
"(let-values(((vec_1180)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1181)"
"(lambda(i_1182 lst_1183)"
"(if(pair? lst_1183)"
"(let-values()"
"(let-values(((x_1184)(car lst_1183)))"
"(begin"
"(vector-set! vec_1180 i_1182(cons(getkey_1163 x_1184) x_1184))"
"(loop_1181(add1 i_1182)(cdr lst_1183)))))"
"(void)))))"
" loop_1181)"
" 0"
" lst_1161)"
"(let-values()"
"(let-values(((n/2-_1185)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1186)(unsafe-fx- n_1165 n/2-_1185)))"
"(letrec-values(((copying-mergesort_1261)"
"(lambda(Alo_1262 Blo_1263 n_1264)"
"(if(unsafe-fx= n_1264 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262)))"
"(if(unsafe-fx= n_1264 2)"
"(let-values()"
"(let-values(((x_1265)(unsafe-vector-ref vec_1180 Alo_1262))"
"((y_1266)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+ Alo_1262 1))))"
"(if(if #t"
"(<?_1162(car y_1266)(car x_1265))"
"(<?_1162 y_1266 x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 y_1266)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 x_1265)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" y_1266)))))"
"(if(unsafe-fx< n_1264 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262))"
"((letrec-values(((iloop_1267)"
"(lambda(i_1268)"
"(if(unsafe-fx< i_1268 n_1264)"
"(let-values()"
"(let-values(((ref-i_1269)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+"
" Alo_1262"
" i_1268))))"
"((letrec-values(((jloop_1270)"
"(lambda(j_1271)"
"(let-values(((ref-j-1_1272)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx-"
" j_1271"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1263"
" j_1271)"
"(if #t"
"(<?_1162"
"(car"
" ref-i_1269)"
"(car"
" ref-j-1_1272))"
"(<?_1162"
" ref-i_1269"
" ref-j-1_1272))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-j-1_1272)"
"(jloop_1270"
"(unsafe-fx-"
" j_1271"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-i_1269)"
"(iloop_1267"
"(unsafe-fx+"
" i_1268"
" 1))))))))"
" jloop_1270)"
"(unsafe-fx+ Blo_1263 i_1268))))"
"(void)))))"
" iloop_1267)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1273)(unsafe-fxrshift n_1264 1)))"
"(let-values(((n/2+_1274)(unsafe-fx- n_1264 n/2-_1273)))"
"(let-values(((Amid1_1275)(unsafe-fx+ Alo_1262 n/2-_1273))"
"((Amid2_1276)(unsafe-fx+ Alo_1262 n/2+_1274))"
"((Bmid1_1277)"
"(unsafe-fx+ Blo_1263 n/2-_1273)))"
"(begin"
"(copying-mergesort_1261"
" Amid1_1275"
" Bmid1_1277"
" n/2+_1274)"
"(copying-mergesort_1261 Alo_1262 Amid2_1276 n/2-_1273)"
"(let-values(((b2_1278)(unsafe-fx+ Blo_1263 n_1264)))"
"((letrec-values(((loop_1279)"
"(lambda(a1_1280 b1_1281 c1_1282)"
"(let-values(((x_1283)"
"(unsafe-vector-ref"
" vec_1180"
" a1_1280))"
"((y_1284)"
"(unsafe-vector-ref"
" vec_1180"
" b1_1281)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_1162"
"(car y_1284)"
"(car x_1283))"
"(<?_1162"
" y_1284"
" x_1283)))"
"(if #t"
"(<?_1162"
"(car x_1283)"
"(car y_1284))"
"(<?_1162"
" x_1283"
" y_1284)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" x_1283)"
"(let-values(((a1_1285)"
"(unsafe-fx+"
" a1_1280"
" 1))"
"((c1_1286)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<"
" c1_1286"
" b1_1281)"
"(let-values()"
"(loop_1279"
" a1_1285"
" b1_1281"
" c1_1286))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" y_1284)"
"(let-values(((b1_1287)"
"(unsafe-fx+"
" b1_1281"
" 1))"
"((c1_1288)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<="
" b2_1278"
" b1_1287)"
"((letrec-values(((loop_1289)"
"(lambda(a1_1290"
" c1_1291)"
"(if(unsafe-fx<"
" c1_1291"
" b1_1287)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1291"
"(unsafe-vector-ref"
" vec_1180"
" a1_1290))"
"(loop_1289"
"(unsafe-fx+"
" a1_1290"
" 1)"
"(unsafe-fx+"
" c1_1291"
" 1))))"
"(void)))))"
" loop_1289)"
" a1_1280"
" c1_1288)"
"(loop_1279"
" a1_1280"
" b1_1287"
" c1_1288)))))))))"
" loop_1279)"
" Amid2_1276"
" Bmid1_1277"
" Blo_1263)))))))))))))"
"(let-values(((Alo_1292) 0)"
"((Amid1_1293) n/2-_1185)"
"((Amid2_1294) n/2+_1186)"
"((Ahi_1295) n_1165)"
"((B1lo_1296) n_1165))"
"(begin"
"(copying-mergesort_1261 Amid1_1293 B1lo_1296 n/2+_1186)"
"(if(zero? n/2-_1185)"
"(void)"
"(let-values()(copying-mergesort_1261 Alo_1292 Amid2_1294 n/2-_1185)))"
"(let-values(((b2_1297) Ahi_1295))"
"((letrec-values(((loop_1298)"
"(lambda(a1_1299 b1_1300 c1_1301)"
"(let-values(((x_1302)(unsafe-vector-ref vec_1180 a1_1299))"
"((y_1303)(unsafe-vector-ref vec_1180 b1_1300)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_1162(car y_1303)(car x_1302))"
"(<?_1162 y_1303 x_1302)))"
"(if #t"
"(<?_1162(car x_1302)(car y_1303))"
"(<?_1162 x_1302 y_1303)))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 x_1302)"
"(let-values(((a1_1304)(unsafe-fx+ a1_1299 1))"
"((c1_1305)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx< c1_1305 b1_1300)"
"(let-values()(loop_1298 a1_1304 b1_1300 c1_1305))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 y_1303)"
"(let-values(((b1_1306)(unsafe-fx+ b1_1300 1))"
"((c1_1307)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx<= b2_1297 b1_1306)"
"((letrec-values(((loop_1308)"
"(lambda(a1_1309 c1_1310)"
"(if(unsafe-fx< c1_1310 b1_1306)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1310"
"(unsafe-vector-ref"
" vec_1180"
" a1_1309))"
"(loop_1308"
"(unsafe-fx+ a1_1309 1)"
"(unsafe-fx+ c1_1310 1))))"
"(void)))))"
" loop_1308)"
" a1_1299"
" c1_1307)"
"(loop_1298 a1_1299 b1_1306 c1_1307)))))))))"
" loop_1298)"
" B1lo_1296"
" Amid2_1294"
" Alo_1292))))))))"
"((letrec-values(((loop_1311)"
"(lambda(i_1312 r_1313)"
"(let-values(((i_1314)(sub1 i_1312)))"
"(if(< i_1314 0)"
" r_1313"
"(loop_1311 i_1314(cons(cdr(vector-ref vec_1180 i_1314)) r_1313)))))))"
" loop_1311)"
" n_1165"
" '()))))"
"(if(< n_1165 2)"
"(let-values() lst_1161)"
"(if((letrec-values(((loop_1315)"
"(lambda(last_1316 next_1317)"
"(let-values(((or-part_1318)(null? next_1317)))"
"(if or-part_1318"
" or-part_1318"
"(if(not"
"(if #t"
"(<?_1162(getkey_1163(car next_1317))(getkey_1163 last_1316))"
"(<?_1162(car next_1317) last_1316)))"
"(loop_1315(car next_1317)(cdr next_1317))"
" #f))))))"
" loop_1315)"
"(car lst_1161)"
"(cdr lst_1161))"
"(let-values() lst_1161)"
"(if(<= n_1165 3)"
"(let-values()"
"(if(= n_1165 2)"
"(list(cadr lst_1161)(car lst_1161))"
"(let-values(((a_1319)(car lst_1161))"
"((b_1320)(cadr lst_1161))"
"((c_1321)(caddr lst_1161)))"
"(let-values(((a_1322)(car lst_1161))"
"((b_1323)(cadr lst_1161))"
"((c_1324)(caddr lst_1161)))"
"(if(if #t(<?_1162(getkey_1163 b_1323)(getkey_1163 a_1322))(<?_1162 b_1323 a_1322))"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 b_1323))"
"(<?_1162 c_1324 b_1323))"
"(list c_1324 b_1323 a_1322)"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(<?_1162 c_1324 a_1322))"
"(list b_1323 c_1324 a_1322)"
"(list b_1323 a_1322 c_1324)))"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(<?_1162 c_1324 a_1322))"
"(list c_1324 a_1322 b_1323)"
"(list a_1322 c_1324 b_1323)))))))"
"(let-values()"
"(let-values(((vec_1325)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1326)"
"(lambda(i_1327 lst_1328)"
"(if(pair? lst_1328)"
"(let-values()"
"(begin"
"(vector-set! vec_1325 i_1327(car lst_1328))"
"(loop_1326(add1 i_1327)(cdr lst_1328))))"
"(void)))))"
" loop_1326)"
" 0"
" lst_1161)"
"(if getkey_1163"
"(let-values()"
"(let-values(((n/2-_1329)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1330)(unsafe-fx- n_1165 n/2-_1329)))"
"(letrec-values(((copying-mergesort_1405)"
"(lambda(Alo_1406 Blo_1407 n_1408)"
"(if(unsafe-fx= n_1408 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406)))"
"(if(unsafe-fx= n_1408 2)"
"(let-values()"
"(let-values(((x_1409)"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((y_1410)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1406 1))))"
"(if(if #t"
"(<?_1162"
"(getkey_1163 y_1410)"
"(getkey_1163 x_1409))"
"(<?_1162 y_1410 x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 y_1410)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 x_1409)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" y_1410)))))"
"(if(unsafe-fx< n_1408 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((letrec-values(((iloop_1411)"
"(lambda(i_1412)"
"(if(unsafe-fx< i_1412 n_1408)"
"(let-values()"
"(let-values(((ref-i_1413)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1406"
" i_1412))))"
"((letrec-values(((jloop_1414)"
"(lambda(j_1415)"
"(let-values(((ref-j-1_1416)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1415"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1407"
" j_1415)"
"(if #t"
"(<?_1162"
"(getkey_1163"
" ref-i_1413)"
"(getkey_1163"
" ref-j-1_1416))"
"(<?_1162"
" ref-i_1413"
" ref-j-1_1416))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-j-1_1416)"
"(jloop_1414"
"(unsafe-fx-"
" j_1415"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-i_1413)"
"(iloop_1411"
"(unsafe-fx+"
" i_1412"
" 1))))))))"
" jloop_1414)"
"(unsafe-fx+"
" Blo_1407"
" i_1412))))"
"(void)))))"
" iloop_1411)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1417)(unsafe-fxrshift n_1408 1)))"
"(let-values(((n/2+_1418)"
"(unsafe-fx- n_1408 n/2-_1417)))"
"(let-values(((Amid1_1419)"
"(unsafe-fx+ Alo_1406 n/2-_1417))"
"((Amid2_1420)"
"(unsafe-fx+ Alo_1406 n/2+_1418))"
"((Bmid1_1421)"
"(unsafe-fx+ Blo_1407 n/2-_1417)))"
"(begin"
"(copying-mergesort_1405"
" Amid1_1419"
" Bmid1_1421"
" n/2+_1418)"
"(copying-mergesort_1405"
" Alo_1406"
" Amid2_1420"
" n/2-_1417)"
"(let-values(((b2_1422)"
"(unsafe-fx+ Blo_1407 n_1408)))"
"((letrec-values(((loop_1423)"
"(lambda(a1_1424"
" b1_1425"
" c1_1426)"
"(let-values(((x_1427)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1424))"
"((y_1428)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1425)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_1162"
"(getkey_1163"
" y_1428)"
"(getkey_1163"
" x_1427))"
"(<?_1162"
" y_1428"
" x_1427)))"
"(if #t"
"(<?_1162"
"(getkey_1163"
" x_1427)"
"(getkey_1163"
" y_1428))"
"(<?_1162"
" x_1427"
" y_1428)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" x_1427)"
"(let-values(((a1_1429)"
"(unsafe-fx+"
" a1_1424"
" 1))"
"((c1_1430)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<"
" c1_1430"
" b1_1425)"
"(let-values()"
"(loop_1423"
" a1_1429"
" b1_1425"
" c1_1430))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" y_1428)"
"(let-values(((b1_1431)"
"(unsafe-fx+"
" b1_1425"
" 1))"
"((c1_1432)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<="
" b2_1422"
" b1_1431)"
"((letrec-values(((loop_1433)"
"(lambda(a1_1434"
" c1_1435)"
"(if(unsafe-fx<"
" c1_1435"
" b1_1431)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1435"
"(unsafe-vector-ref"
" vec_1325"
" a1_1434))"
"(loop_1433"
"(unsafe-fx+"
" a1_1434"
" 1)"
"(unsafe-fx+"
" c1_1435"
" 1))))"
"(void)))))"
" loop_1433)"
" a1_1424"
" c1_1432)"
"(loop_1423"
" a1_1424"
" b1_1431"
" c1_1432)))))))))"
" loop_1423)"
" Amid2_1420"
" Bmid1_1421"
" Blo_1407)))))))))))))"
"(let-values(((Alo_1436) 0)"
"((Amid1_1437) n/2-_1329)"
"((Amid2_1438) n/2+_1330)"
"((Ahi_1439) n_1165)"
"((B1lo_1440) n_1165))"
"(begin"
"(copying-mergesort_1405 Amid1_1437 B1lo_1440 n/2+_1330)"
"(if(zero? n/2-_1329)"
"(void)"
"(let-values()(copying-mergesort_1405 Alo_1436 Amid2_1438 n/2-_1329)))"
"(let-values(((b2_1441) Ahi_1439))"
"((letrec-values(((loop_1442)"
"(lambda(a1_1443 b1_1444 c1_1445)"
"(let-values(((x_1446)"
"(unsafe-vector-ref vec_1325 a1_1443))"
"((y_1447)"
"(unsafe-vector-ref vec_1325 b1_1444)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_1162"
"(getkey_1163 y_1447)"
"(getkey_1163 x_1446))"
"(<?_1162 y_1447 x_1446)))"
"(if #t"
"(<?_1162"
"(getkey_1163 x_1446)"
"(getkey_1163 y_1447))"
"(<?_1162 x_1446 y_1447)))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 x_1446)"
"(let-values(((a1_1448)(unsafe-fx+ a1_1443 1))"
"((c1_1449)(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx< c1_1449 b1_1444)"
"(let-values()"
"(loop_1442 a1_1448 b1_1444 c1_1449))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 y_1447)"
"(let-values(((b1_1450)(unsafe-fx+ b1_1444 1))"
"((c1_1451)(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx<= b2_1441 b1_1450)"
"((letrec-values(((loop_1452)"
"(lambda(a1_1453 c1_1454)"
"(if(unsafe-fx<"
" c1_1454"
" b1_1450)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1454"
"(unsafe-vector-ref"
" vec_1325"
" a1_1453))"
"(loop_1452"
"(unsafe-fx+"
" a1_1453"
" 1)"
"(unsafe-fx+"
" c1_1454"
" 1))))"
"(void)))))"
" loop_1452)"
" a1_1443"
" c1_1451)"
"(loop_1442 a1_1443 b1_1450 c1_1451)))))))))"
" loop_1442)"
" B1lo_1440"
" Amid2_1438"
" Alo_1436))))))))"
"(let-values(((si_1455)(hash-ref sort-internals_29 <?_1162 #f)))"
"(if si_1455"
"(si_1455 vec_1325 n_1165)"
"(let-values()"
"(let-values(((n/2-_1456)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1457)(unsafe-fx- n_1165 n/2-_1456)))"
"(letrec-values(((copying-mergesort_1532)"
"(lambda(Alo_1533 Blo_1534 n_1535)"
"(if(unsafe-fx= n_1535 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533)))"
"(if(unsafe-fx= n_1535 2)"
"(let-values()"
"(let-values(((x_1536)"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((y_1537)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1533 1))))"
"(if(if #f"
"(<?_1162(#f y_1537)(#f x_1536))"
"(<?_1162 y_1537 x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 y_1537)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 x_1536)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" y_1537)))))"
"(if(unsafe-fx< n_1535 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((letrec-values(((iloop_1538)"
"(lambda(i_1539)"
"(if(unsafe-fx<"
" i_1539"
" n_1535)"
"(let-values()"
"(let-values(((ref-i_1540)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1533"
" i_1539))))"
"((letrec-values(((jloop_1541)"
"(lambda(j_1542)"
"(let-values(((ref-j-1_1543)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1542"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1534"
" j_1542)"
"(if #f"
"(<?_1162"
"(#f"
" ref-i_1540)"
"(#f"
" ref-j-1_1543))"
"(<?_1162"
" ref-i_1540"
" ref-j-1_1543))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-j-1_1543)"
"(jloop_1541"
"(unsafe-fx-"
" j_1542"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-i_1540)"
"(iloop_1538"
"(unsafe-fx+"
" i_1539"
" 1))))))))"
" jloop_1541)"
"(unsafe-fx+"
" Blo_1534"
" i_1539))))"
"(void)))))"
" iloop_1538)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1544)"
"(unsafe-fxrshift n_1535 1)))"
"(let-values(((n/2+_1545)"
"(unsafe-fx- n_1535 n/2-_1544)))"
"(let-values(((Amid1_1546)"
"(unsafe-fx+ Alo_1533 n/2-_1544))"
"((Amid2_1547)"
"(unsafe-fx+ Alo_1533 n/2+_1545))"
"((Bmid1_1548)"
"(unsafe-fx+ Blo_1534 n/2-_1544)))"
"(begin"
"(copying-mergesort_1532"
" Amid1_1546"
" Bmid1_1548"
" n/2+_1545)"
"(copying-mergesort_1532"
" Alo_1533"
" Amid2_1547"
" n/2-_1544)"
"(let-values(((b2_1549)"
"(unsafe-fx+"
" Blo_1534"
" n_1535)))"
"((letrec-values(((loop_1550)"
"(lambda(a1_1551"
" b1_1552"
" c1_1553)"
"(let-values(((x_1554)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1551))"
"((y_1555)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1552)))"
"(if(if #t"
"(not"
"(if #f"
"(<?_1162"
"(#f"
" y_1555)"
"(#f"
" x_1554))"
"(<?_1162"
" y_1555"
" x_1554)))"
"(if #f"
"(<?_1162"
"(#f"
" x_1554)"
"(#f"
" y_1555))"
"(<?_1162"
" x_1554"
" y_1555)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" x_1554)"
"(let-values(((a1_1556)"
"(unsafe-fx+"
" a1_1551"
" 1))"
"((c1_1557)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<"
" c1_1557"
" b1_1552)"
"(let-values()"
"(loop_1550"
" a1_1556"
" b1_1552"
" c1_1557))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" y_1555)"
"(let-values(((b1_1558)"
"(unsafe-fx+"
" b1_1552"
" 1))"
"((c1_1559)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<="
" b2_1549"
" b1_1558)"
"((letrec-values(((loop_1560)"
"(lambda(a1_1561"
" c1_1562)"
"(if(unsafe-fx<"
" c1_1562"
" b1_1558)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1562"
"(unsafe-vector-ref"
" vec_1325"
" a1_1561))"
"(loop_1560"
"(unsafe-fx+"
" a1_1561"
" 1)"
"(unsafe-fx+"
" c1_1562"
" 1))))"
"(void)))))"
" loop_1560)"
" a1_1551"
" c1_1559)"
"(loop_1550"
" a1_1551"
" b1_1558"
" c1_1559)))))))))"
" loop_1550)"
" Amid2_1547"
" Bmid1_1548"
" Blo_1534)))))))))))))"
"(let-values(((Alo_1563) 0)"
"((Amid1_1564) n/2-_1456)"
"((Amid2_1565) n/2+_1457)"
"((Ahi_1566) n_1165)"
"((B1lo_1567) n_1165))"
"(begin"
"(copying-mergesort_1532 Amid1_1564 B1lo_1567 n/2+_1457)"
"(if(zero? n/2-_1456)"
"(void)"
"(let-values()"
"(copying-mergesort_1532 Alo_1563 Amid2_1565 n/2-_1456)))"
"(let-values(((b2_1568) Ahi_1566))"
"((letrec-values(((loop_1569)"
"(lambda(a1_1570 b1_1571 c1_1572)"
"(let-values(((x_1573)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1570))"
"((y_1574)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1571)))"
"(if(if #f"
"(not"
"(if #f"
"(<?_1162(#f y_1574)(#f x_1573))"
"(<?_1162 y_1574 x_1573)))"
"(if #f"
"(<?_1162(#f x_1573)(#f y_1574))"
"(<?_1162 x_1573 y_1574)))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1572 x_1573)"
"(let-values(((a1_1575)"
"(unsafe-fx+ a1_1570 1))"
"((c1_1576)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx< c1_1576 b1_1571)"
"(let-values()"
"(loop_1569 a1_1575 b1_1571 c1_1576))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1572 y_1574)"
"(let-values(((b1_1577)"
"(unsafe-fx+ b1_1571 1))"
"((c1_1578)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx<= b2_1568 b1_1577)"
"((letrec-values(((loop_1579)"
"(lambda(a1_1580"
" c1_1581)"
"(if(unsafe-fx<"
" c1_1581"
" b1_1577)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1581"
"(unsafe-vector-ref"
" vec_1325"
" a1_1580))"
"(loop_1579"
"(unsafe-fx+"
" a1_1580"
" 1)"
"(unsafe-fx+"
" c1_1581"
" 1))))"
"(void)))))"
" loop_1579)"
" a1_1570"
" c1_1578)"
"(loop_1569"
" a1_1570"
" b1_1577"
" c1_1578)))))))))"
" loop_1569)"
" B1lo_1567"
" Amid2_1565"
" Alo_1563)))))))))))"
"((letrec-values(((loop_1582)"
"(lambda(i_1583 r_1584)"
"(let-values(((i_1585)(sub1 i_1583)))"
"(if(< i_1585 0)"
" r_1584"
"(loop_1582 i_1585(cons(vector-ref vec_1325 i_1585) r_1584)))))))"
" loop_1582)"
" n_1165"
" '()))))))))))"
"(sort lst_1161 <?_1162))))))))"
"(define-values"
"(new:collection-path)"
"(let-values(((collection-path_54)"
"(let-values(((core4_55)"
"(lambda(fail1_56 fail2_57 collection3_58 new-rest_59)"
"(let-values(((collection_60) collection3_58))"
"(let-values(((fail_61)"
"(if fail2_57"
" fail1_56"
"(lambda(s_62)"
"(raise"
"(exn:fail:filesystem"
"                                                      (string-append \"collection-path: \" s_62)"
"(current-continuation-marks)))))))"
"(let-values(((collections_63) new-rest_59))"
"(collection-path fail_61 collection_60 collections_63)))))))"
"(let-values(((unpack5_64)"
"(lambda(given-kws_65 given-args_66 collection3_67 new-rest_68)"
"(let-values(((fail2_69)(pair? given-kws_65)))"
"(let-values(((fail1_70)(if fail2_69(car given-args_66)(void))))"
"(core4_55 fail1_70 fail2_69 collection3_67 new-rest_68))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_71 given-argc_72)"
"(if(>= given-argc_72 3)"
"(let-values(((l1_73) given-kws_71))"
"(let-values(((l1_74)"
"(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:fail)(cdr l1_73) l1_73))))"
"(null? l1_74)))"
" #f))"
"(case-lambda"
"((given-kws_75 given-args_76 collection_77 . collections_78)"
"(unpack5_64 given-kws_75 given-args_76 collection_77 collections_78)))"
" null"
" '(#:fail)"
"(let-values(((collection-path_79)"
"(case-lambda"
"((collection_80 . collections_81)"
"(unpack5_64 null null collection_80 collections_81)))))"
" collection-path_79))))))"
" collection-path_54))"
"(define-values"
"(new:collection-file-path)"
"(let-values(((collection-file-path_82)"
"(let-values(((core12_83)"
"(lambda(check-compiled?6_84"
" check-compiled?8_85"
" fail7_86"
" fail9_87"
" file-name10_88"
" collection11_89"
" new-rest_90)"
"(let-values(((file-name_91) file-name10_88))"
"(let-values(((collection_92) collection11_89))"
"(let-values(((check-compiled?_93)"
"(if check-compiled?8_85"
" check-compiled?6_84"
"(if(path-string? file-name_91)"
"                                                      (regexp-match? '#rx\".[.]rkt$\" file-name_91)"
" #f))))"
"(let-values(((fail_94)"
"(if fail9_87"
" fail7_86"
"(lambda(s_95)"
"(raise"
"(exn:fail:filesystem"
"                                                          (string-append \"collection-file-path: \" s_95)"
"(current-continuation-marks)))))))"
"(let-values(((collections_96) new-rest_90))"
"(collection-file-path"
" fail_94"
" check-compiled?_93"
" file-name_91"
" collection_92"
" collections_96)))))))))"
"(let-values(((unpack13_97)"
"(lambda(given-kws_98 given-args_99 file-name10_100 collection11_101 new-rest_102)"
"(let-values(((check-compiled?8_103)"
"(if(pair? given-kws_98)"
"(eq? '#:check-compiled?(car given-kws_98))"
" #f)))"
"(let-values(((check-compiled?6_104)"
"(if check-compiled?8_103(car given-args_99)(void)))"
"((given-kws_105)"
"(if check-compiled?8_103(cdr given-kws_98) given-kws_98))"
"((given-args_106)"
"(if check-compiled?8_103(cdr given-args_99) given-args_99)))"
"(let-values(((fail9_107)(pair? given-kws_105)))"
"(let-values(((fail7_108)(if fail9_107(car given-args_106)(void))))"
"(core12_83"
" check-compiled?6_104"
" check-compiled?8_103"
" fail7_108"
" fail9_107"
" file-name10_100"
" collection11_101"
" new-rest_102))))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_109 given-argc_110)"
"(if(>= given-argc_110 4)"
"(let-values(((l1_111) given-kws_109))"
"(let-values(((l1_112)"
"(if(null? l1_111)"
" l1_111"
"(if(eq?(car l1_111) '#:check-compiled?)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)"
"(if(null? l1_113)"
" l1_113"
"(if(eq?(car l1_113) '#:fail)(cdr l1_113) l1_113))))"
"(null? l1_114)))))"
" #f))"
"(case-lambda"
"((given-kws_115 given-args_116 file-name_117 collection_118 . collections_119)"
"(unpack13_97 given-kws_115 given-args_116 file-name_117 collection_118 collections_119)))"
" null"
" '(#:check-compiled? #:fail)"
"(let-values(((collection-file-path_120)"
"(case-lambda"
"((file-name_121 collection_122 . collections_123)"
"(unpack13_97 null null file-name_121 collection_122 collections_123)))))"
" collection-file-path_120))))))"
" collection-file-path_82))"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(define-values"
"(hash-values)"
"(lambda(table_4)"
"(begin"
"      (if (hash? table_4) (void) (let-values () (raise-argument-error 'hash-values \"hash?\" table_4)))"
"(hash-map table_4(lambda(k_5 v_6) v_6)))))"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values(((lst_7) lst5_5))"
"(let-values(((less?_8) less?6_6))"
"(let-values(((getkey_9)(if key3_4 key1_3 #f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
"(define-values"
"(unpack8.1$2)"
"(lambda(given-kws_11 given-args_12 lst5_13 less?6_14)"
"(let-values(((cache-keys?4_15)(if(pair? given-kws_11)(eq? '#:cache-keys?(car given-kws_11)) #f)))"
"(let-values(((cache-keys?2_16)(if cache-keys?4_15(car given-args_12)(void)))"
"((given-kws_17)(if cache-keys?4_15(cdr given-kws_11) given-kws_11))"
"((given-args_18)(if cache-keys?4_15(cdr given-args_12) given-args_12)))"
"(let-values(((key3_19)(pair? given-kws_17)))"
"(let-values(((key1_20)(if key3_19(car given-args_18)(void))))"
"(sort7.1 cache-keys?2_16 cache-keys?4_15 key1_20 key3_19 lst5_13 less?6_14)))))))"
"(define-values"
"(sort9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_21 given-argc_22)"
"(if(= given-argc_22 4)"
"(let-values(((l1_23) given-kws_21))"
"(let-values(((l1_24)(if(null? l1_23) l1_23(if(eq?(car l1_23) '#:cache-keys?)(cdr l1_23) l1_23))))"
"(let-values(((l1_25) l1_24))"
"(let-values(((l1_26)(if(null? l1_25) l1_25(if(eq?(car l1_25) '#:key)(cdr l1_25) l1_25))))"
"(null? l1_26)))))"
" #f))"
"(case-lambda((given-kws_27 given-args_28 lst_29 less?_30)(unpack8.1$2 given-kws_27 given-args_28 lst_29 less?_30)))"
" null"
" '(#:cache-keys? #:key)"
"(let-values(((sort_31)(case-lambda((lst_32 less?_33)(unpack8.1$2 null null lst_32 less?_33))))) sort_31)))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 \"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
"  (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 \"non-pair found in list: \" a_79 \" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 2) #f)"
"(void)"
"                        (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) #f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" #f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100))))"
"(define-values"
"(make-regexp-tweaker)"
"(lambda(tweaker_61)"
"(let-values(((t_62)(make-hash)))"
"(lambda(rx_63 n_64)"
"(let-values(((run-tweak_110)"
"(lambda()"
"(if(pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_111)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_112)(regexp? tweaked_111)))"
"(if or-part_112 or-part_112(byte-regexp? tweaked_111)))"
" tweaked_111"
"(pregexp(if(bytes? tweaked_111)(bytes->string/utf-8 tweaked_111) tweaked_111)))))"
"(if(regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_113)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_114)(regexp? tweaked_113)))"
"(if or-part_114 or-part_114(byte-regexp? tweaked_113)))"
" tweaked_113"
"(regexp(if(bytes? tweaked_113)(bytes->string/utf-8 tweaked_113) tweaked_113)))))"
"(if(byte-pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_115)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_116)(regexp? tweaked_115)))"
"(if or-part_116 or-part_116(byte-regexp? tweaked_115)))"
" tweaked_115"
"(byte-pregexp"
"(if(bytes? tweaked_115) tweaked_115(string->bytes/utf-8 tweaked_115))))))"
"(if(byte-regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_117)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_118)(regexp? tweaked_117)))"
"(if or-part_118 or-part_118(byte-regexp? tweaked_117)))"
" tweaked_117"
"(byte-regexp"
"(if(bytes? tweaked_117) tweaked_117(string->bytes/utf-8 tweaked_117))))))"
"(if(string? rx_63)"
"(let-values()"
"(let-values(((tweaked_119)(tweaker_61((lambda(x_120) x_120) rx_63) n_64)))"
"(if(let-values(((or-part_121)(regexp? tweaked_119)))"
"(if or-part_121 or-part_121(byte-regexp? tweaked_119)))"
" tweaked_119"
"(regexp"
"(if(bytes? tweaked_119)(bytes->string/utf-8 tweaked_119) tweaked_119)))))"
"(if(bytes? rx_63)"
"(let-values()"
"(let-values(((tweaked_122)(tweaker_61((lambda(x_123) x_123) rx_63) n_64)))"
"(if(let-values(((or-part_124)(regexp? tweaked_122)))"
"(if or-part_124 or-part_124(byte-regexp? tweaked_122)))"
" tweaked_122"
"(byte-regexp"
"(if(bytes? tweaked_122) tweaked_122(string->bytes/utf-8 tweaked_122))))))"
"(let-values()"
"(raise-argument-error"
" 'regexp-tweaker"
"                                       \"(or/c regexp? byte-regexp? string? bytes?)\""
" rx_63)))))))))))"
"(let-values(((key_125)(cons n_64 rx_63)))"
"(let-values(((or-part_126)(hash-ref t_62 key_125 #f)))"
"(if or-part_126"
" or-part_126"
"(let-values(((rx*_127)(run-tweak_110)))(begin(hash-set! t_62 key_125 rx*_127) rx*_127))))))))))"
"(define-values(bstring-length)(lambda(s_171)(if(bytes? s_171)(bytes-length s_171)(string-length s_171))))"
"(define-values"
"(no-empty-edge-matches)"
"(make-regexp-tweaker"
"(lambda(rx_172 n_173)"
"(if(bytes? rx_172)"
"       (bytes-append #\"(?:\" rx_172 #\")(?<=\" (make-bytes n_173 (char->integer '#\\.)) #\")\")"
"       (format \"(?:~a)(?<=~a)\" rx_172 (make-bytes n_173 (char->integer '#\\.)))))))"
"(define-values"
"(regexp-match-positions*33.1)"
"(lambda(match-select23_174"
" match-select24_175"
" pattern31_176"
" string32_177"
" start25_178"
" end26_179"
" ipre27_180"
" start28_181"
" end29_182"
" ipre30_183)"
"(let-values(((pattern_184) pattern31_176))"
"(let-values(((string_185) string32_177))"
"(let-values(((start_186)(if start28_181 start25_178 0)))"
"(let-values(((end_187)(if end29_182 end26_179 #f)))"
"            (let-values (((ipre_188) (if ipre30_183 ipre27_180 #\"\")))"
"(let-values(((match-select_189)(if match-select24_175 match-select23_174 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_189)"
"(void)"
"                      (let-values () (raise-argument-error 'regexp-match-positions* \"procedure?\" match-select_189)))"
"(if(eq? match-select_189 car)"
"(let-values(((string_190)"
"(if(path? string_185)"
"(if(let-values(((or-part_191)(string? pattern_184)))"
"(if or-part_191 or-part_191(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_192)"
"(if(string? string_190)"
"(let-values()(string-length string_190))"
"(if(bytes? string_190)"
"(let-values()(bytes-length string_190))"
"(let-values() #f)))))"
"(let-values(((orig-rx_193)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_194)(regexp-max-lookbehind orig-rx_193)))"
"(begin"
"(if #f"
"(if(input-port? string_190)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-positions* \"input-port?\" string_190)))"
"(if(let-values(((or-part_195) len_192))"
"(if or-part_195 or-part_195(input-port? string_190)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_190))))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_196)(not end_187)))"
"(if or-part_196"
" or-part_196"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_197)(input-port? string_190)))"
"(if or-part_197 or-part_197(if len_192(<= start_186 len_192) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_192)"
" start_186)))"
"(if(let-values(((or-part_198)(not end_187)))"
"(if or-part_198"
" or-part_198"
"(if(<= start_186 end_187)"
"(let-values(((or-part_199)(input-port? string_190)))"
"(if or-part_199 or-part_199(if len_192(<= end_187 len_192) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_192)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_200)"
"(lambda(acc_201 start_202 end_203 ipre_204 0-ok?_205)"
"(let-values(((rx_206)"
"(if 0-ok?_205"
" orig-rx_193"
"(no-empty-edge-matches"
" orig-rx_193"
"(add1(bytes-length ipre_204))))))"
"(if(if #f(input-port? string_190) #f)"
"(let-values(((__207)"
"(if(positive? start_202)"
"(let-values()"
"(let-values(((s_208)(make-bytes 4096)))"
"((letrec-values(((loop_209)"
"(lambda(n_210)"
"(if(= n_210 start_202)"
"(void)"
"(let-values()"
"(let-values(((m_211)"
"(read-bytes-avail!"
" s_208"
" string_190"
" 0"
"(min"
"(-"
" start_202"
" n_210)"
" 4096))))"
"(if(eof-object?"
" m_211)"
"(void)"
"(let-values()"
"(loop_209"
"(+"
" n_210"
" m_211))))))))))"
" loop_209)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_212)(if #f #f 0)))"
"(let-values(((spitout_213)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_214"
" start_215"
" end_216"
" flush?_217"
" breakable?_218)"
"(let-values(((c_219)"
"(- end_216 start_215)))"
"(begin"
"(set! discarded/leftovers_212"
"(+ c_219 discarded/leftovers_212))"
" c_219)))"
" void))))"
"(let-values(((end_220)"
"(if end_203(- end_203 start_202) #f)))"
"(let-values(((ms_221 ipre_222)"
"(regexp-match/end"
" rx_206"
" string_190"
" 0"
" end_220"
" spitout_213"
" ipre_204"
" max-lookbehind_194)))"
"(let-values(((m_223)(if ms_221(car ms_221) #f)))"
"(let-values(((discarded/leftovers_224)"
"(if #f"
"(get-output-bytes spitout_213)"
" discarded/leftovers_212)))"
"(let-values(((skipped_225)"
"(if #f"
"(bstring-length"
" discarded/leftovers_224)"
" discarded/leftovers_224)))"
"(let-values(((got_226)"
"(if m_223"
"(bstring-length m_223)"
" #f)))"
"(let-values(((end_227)"
"(if end_220"
"(if m_223"
"(-"
" end_220"
" skipped_225"
" got_226)"
" #f)"
" #f)))"
"(if m_223"
"(let-values(((0-ok?_228)"
"(not(zero? got_226))))"
"(loop_200"
"(#f"
" discarded/leftovers_224"
" ms_221"
" acc_201)"
" 0"
" end_227"
" ipre_222"
" 0-ok?_228))"
"(#f"
" acc_201"
" discarded/leftovers_224))))))))))))"
"(let-values(((m_229 ipre_230)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" #f"
" ipre_204"
" max-lookbehind_194)"
"(regexp-match-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" #f"
" ipre_204"
" max-lookbehind_194))))"
"(if(not m_229)"
"((lambda(acc_231 start_232 end_233) acc_231)"
" acc_201"
" start_202"
" end_203)"
"(let-values(((mstart_234)(caar m_229)))"
"(let-values(((mend_235)(cdar m_229)))"
"(let-values(((0-ok?_236)"
"(not(= mstart_234 mend_235))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mstart)(#%app caar ms))"
"((mend)(#%app cdar ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app + mend(#%app cdr p))))"
"(#%app"
" loop"
" '()"
" '0"
"(if end(#%app - end mend) '#f)))"
"(#%app cons(#%app car ms) acc))))"
"(input-port? string_190)"
" #f)"
"((lambda(loop_245"
" acc_246"
" start_247"
" end_248"
" ms_249)"
"(let-values(((mstart_250)(caar ms_249))"
"((mend_251)(cdar ms_249)))"
"(append"
"(map2"
"(lambda(p_252)"
"(cons"
"(+ mend_251(car p_252))"
"(+ mend_251(cdr p_252))))"
"(loop_245"
" '()"
" 0"
"(if end_248(- end_248 mend_251) #f)))"
"(cons(car ms_249) acc_246))))"
"(lambda(acc_253 new-start_254 new-end_255)"
"(loop_200"
" acc_253"
" new-start_254"
" new-end_255"
" ipre_230"
" 0-ok?_236))"
" acc_201"
" start_202"
" end_203"
" m_229)"
"(loop_200"
"((lambda(start_256 ms_257 acc_258)"
"(cons(car ms_257) acc_258))"
" start_202"
" m_229"
" acc_201)"
" mend_235"
" end_203"
" ipre_230"
" 0-ok?_236))))))))))))"
" loop_200)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t)))))))"
"(let-values(((string_259)"
"(if(path? string_185)"
"(if(let-values(((or-part_260)(string? pattern_184)))"
"(if or-part_260 or-part_260(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_261)"
"(if(string? string_259)"
"(let-values()(string-length string_259))"
"(if(bytes? string_259)"
"(let-values()(bytes-length string_259))"
"(let-values() #f)))))"
"(let-values(((orig-rx_262)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_263)(regexp-max-lookbehind orig-rx_262)))"
"(begin"
"(if #f"
"(if(input-port? string_259)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-positions* \"input-port?\" string_259)))"
"(if(let-values(((or-part_264) len_261))"
"(if or-part_264 or-part_264(input-port? string_259)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_259))))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_265)(not end_187)))"
"(if or-part_265"
" or-part_265"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_266)(input-port? string_259)))"
"(if or-part_266 or-part_266(if len_261(<= start_186 len_261) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_261)"
" start_186)))"
"(if(let-values(((or-part_267)(not end_187)))"
"(if or-part_267"
" or-part_267"
"(if(<= start_186 end_187)"
"(let-values(((or-part_268)(input-port? string_259)))"
"(if or-part_268 or-part_268(if len_261(<= end_187 len_261) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_261)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_269)"
"(lambda(acc_270 start_271 end_272 ipre_273 0-ok?_274)"
"(let-values(((rx_275)"
"(if 0-ok?_274"
" orig-rx_262"
"(no-empty-edge-matches"
" orig-rx_262"
"(add1(bytes-length ipre_273))))))"
"(if(if #f(input-port? string_259) #f)"
"(let-values(((__276)"
"(if(positive? start_271)"
"(let-values()"
"(let-values(((s_277)(make-bytes 4096)))"
"((letrec-values(((loop_278)"
"(lambda(n_279)"
"(if(= n_279 start_271)"
"(void)"
"(let-values()"
"(let-values(((m_280)"
"(read-bytes-avail!"
" s_277"
" string_259"
" 0"
"(min"
"(-"
" start_271"
" n_279)"
" 4096))))"
"(if(eof-object?"
" m_280)"
"(void)"
"(let-values()"
"(loop_278"
"(+"
" n_279"
" m_280))))))))))"
" loop_278)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_281)(if #f #f 0)))"
"(let-values(((spitout_282)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_283"
" start_284"
" end_285"
" flush?_286"
" breakable?_287)"
"(let-values(((c_288)"
"(- end_285 start_284)))"
"(begin"
"(set! discarded/leftovers_281"
"(+ c_288 discarded/leftovers_281))"
" c_288)))"
" void))))"
"(let-values(((end_289)"
"(if end_272(- end_272 start_271) #f)))"
"(let-values(((ms_290 ipre_291)"
"(regexp-match/end"
" rx_275"
" string_259"
" 0"
" end_289"
" spitout_282"
" ipre_273"
" max-lookbehind_263)))"
"(let-values(((m_292)(if ms_290(car ms_290) #f)))"
"(let-values(((discarded/leftovers_293)"
"(if #f"
"(get-output-bytes spitout_282)"
" discarded/leftovers_281)))"
"(let-values(((skipped_294)"
"(if #f"
"(bstring-length"
" discarded/leftovers_293)"
" discarded/leftovers_293)))"
"(let-values(((got_295)"
"(if m_292"
"(bstring-length m_292)"
" #f)))"
"(let-values(((end_296)"
"(if end_289"
"(if m_292"
"(-"
" end_289"
" skipped_294"
" got_295)"
" #f)"
" #f)))"
"(if m_292"
"(let-values(((0-ok?_297)"
"(not(zero? got_295))))"
"(loop_269"
"(#f"
" discarded/leftovers_293"
" ms_290"
" acc_270)"
" 0"
" end_296"
" ipre_291"
" 0-ok?_297))"
"(#f"
" acc_270"
" discarded/leftovers_293))))))))))))"
"(let-values(((m_298 ipre_299)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" #f"
" ipre_273"
" max-lookbehind_263)"
"(regexp-match-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" #f"
" ipre_273"
" max-lookbehind_263))))"
"(if(not m_298)"
"((lambda(acc_300 start_301 end_302) acc_300)"
" acc_270"
" start_271"
" end_272)"
"(let-values(((mstart_303)(caar m_298)))"
"(let-values(((mend_304)(cdar m_298)))"
"(let-values(((0-ok?_305)"
"(not(= mstart_303 mend_304))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mend)(#%app cdar ms)))"
"(let-values(((rest)"
"(#%app"
" loop"
" '()"
" '0"
"(if end"
"(#%app - end mend)"
" '#f))))"
"(let-values(((s)"
"(#%app"
" match-select"
" ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(if(let-values(((or-part)"
"(if(#%app"
" pair?"
" s)"
"(#%app"
" exact-integer?"
"(#%app"
" car"
" s))"
" '#f)))"
"(if or-part"
" or-part"
"(#%app not s)))"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p))))"
"(lambda(ps)"
"(#%app"
" map"
"(lambda(p)"
"(if p"
"(#%app"
" cons"
"(#%app"
" +"
" mend"
"(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p)))"
" '#f))"
" ps)))"
" rest)"
"(#%app cons s acc))))))"
"(input-port? string_259)"
" #f)"
"((lambda(loop_318"
" acc_319"
" start_320"
" end_321"
" ms_322)"
"(let-values(((mend_323)(cdar ms_322)))"
"(let-values(((rest_324)"
"(loop_318"
" '()"
" 0"
"(if end_321"
"(- end_321 mend_323)"
" #f))))"
"(let-values(((s_325)"
"(match-select_189 ms_322)))"
"(append"
"(map2"
"(if(let-values(((or-part_326)"
"(if(pair? s_325)"
"(exact-integer?"
"(car s_325))"
" #f)))"
"(if or-part_326"
" or-part_326"
"(not s_325)))"
"(lambda(p_327)"
"(cons"
"(+ mend_323(car p_327))"
"(+ mend_323(cdr p_327))))"
"(lambda(ps_328)"
"(map2"
"(lambda(p_329)"
"(if p_329"
"(cons"
"(+ mend_323(car p_329))"
"(+ mend_323(cdr p_329)))"
" #f))"
" ps_328)))"
" rest_324)"
"(cons s_325 acc_319))))))"
"(lambda(acc_330 new-start_331 new-end_332)"
"(loop_269"
" acc_330"
" new-start_331"
" new-end_332"
" ipre_299"
" 0-ok?_305))"
" acc_270"
" start_271"
" end_272"
" m_298)"
"(loop_269"
"((lambda(start_333 ms_334 acc_335)"
"(cons(match-select_189 ms_334) acc_335))"
" start_271"
" m_298"
" acc_270)"
" mend_304"
" end_272"
" ipre_299"
" 0-ok?_305))))))))))))"
" loop_269)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t))))))))))))))))))"
"(define-values"
"(unpack34.1$3)"
"(lambda(given-kws_336"
" given-args_337"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)"
"(let-values(((match-select24_346)(pair? given-kws_336)))"
"(let-values(((match-select23_347)(if match-select24_346(car given-args_337)(void))))"
"(regexp-match-positions*33.1"
" match-select23_347"
" match-select24_346"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)))))"
"(define-values"
"(regexp-match-peek-positions*46.1)"
"(lambda(match-select36_389"
" match-select37_390"
" pattern44_391"
" string45_392"
" start38_393"
" end39_394"
" ipre40_395"
" start41_396"
" end42_397"
" ipre43_398)"
"(let-values(((pattern_399) pattern44_391))"
"(let-values(((string_400) string45_392))"
"(let-values(((start_401)(if start41_396 start38_393 0)))"
"(let-values(((end_402)(if end42_397 end39_394 #f)))"
"            (let-values (((ipre_403) (if ipre43_398 ipre40_395 #\"\")))"
"(let-values(((match-select_404)(if match-select37_390 match-select36_389 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_404)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'regexp-match-peek-positions* \"procedure?\" match-select_404)))"
"(if(eq? match-select_404 car)"
"(let-values(((string_405)"
"(if(path? string_400)"
"(if(let-values(((or-part_406)(string? pattern_399)))"
"(if or-part_406 or-part_406(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_407)"
"(if(string? string_405)"
"(let-values()(string-length string_405))"
"(if(bytes? string_405)"
"(let-values()(bytes-length string_405))"
"(let-values() #f)))))"
"(let-values(((orig-rx_408)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_409)(regexp-max-lookbehind orig-rx_408)))"
"(begin"
"(if #t"
"(if(input-port? string_405)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_405)))"
"(if(let-values(((or-part_410) len_407))"
"(if or-part_410 or-part_410(input-port? string_405)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_405))))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_411)(not end_402)))"
"(if or-part_411"
" or-part_411"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_412)(input-port? string_405)))"
"(if or-part_412 or-part_412(if len_407(<= start_401 len_407) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_407)"
" start_401)))"
"(if(let-values(((or-part_413)(not end_402)))"
"(if or-part_413"
" or-part_413"
"(if(<= start_401 end_402)"
"(let-values(((or-part_414)(input-port? string_405)))"
"(if or-part_414 or-part_414(if len_407(<= end_402 len_407) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_407)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_415)"
"(lambda(acc_416 start_417 end_418 ipre_419 0-ok?_420)"
"(let-values(((rx_421)"
"(if 0-ok?_420"
" orig-rx_408"
"(no-empty-edge-matches"
" orig-rx_408"
"(add1(bytes-length ipre_419))))))"
"(if(if #f(input-port? string_405) #f)"
"(let-values(((__422)"
"(if(positive? start_417)"
"(let-values()"
"(let-values(((s_423)(make-bytes 4096)))"
"((letrec-values(((loop_424)"
"(lambda(n_425)"
"(if(= n_425 start_417)"
"(void)"
"(let-values()"
"(let-values(((m_426)"
"(read-bytes-avail!"
" s_423"
" string_405"
" 0"
"(min"
"(-"
" start_417"
" n_425)"
" 4096))))"
"(if(eof-object?"
" m_426)"
"(void)"
"(let-values()"
"(loop_424"
"(+"
" n_425"
" m_426))))))))))"
" loop_424)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_427)(if #f #f 0)))"
"(let-values(((spitout_428)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_429"
" start_430"
" end_431"
" flush?_432"
" breakable?_433)"
"(let-values(((c_434)"
"(- end_431 start_430)))"
"(begin"
"(set! discarded/leftovers_427"
"(+ c_434 discarded/leftovers_427))"
" c_434)))"
" void))))"
"(let-values(((end_435)"
"(if end_418(- end_418 start_417) #f)))"
"(let-values(((ms_436 ipre_437)"
"(regexp-match/end"
" rx_421"
" string_405"
" 0"
" end_435"
" spitout_428"
" ipre_419"
" max-lookbehind_409)))"
"(let-values(((m_438)(if ms_436(car ms_436) #f)))"
"(let-values(((discarded/leftovers_439)"
"(if #f"
"(get-output-bytes spitout_428)"
" discarded/leftovers_427)))"
"(let-values(((skipped_440)"
"(if #f"
"(bstring-length"
" discarded/leftovers_439)"
" discarded/leftovers_439)))"
"(let-values(((got_441)"
"(if m_438"
"(bstring-length m_438)"
" #f)))"
"(let-values(((end_442)"
"(if end_435"
"(if m_438"
"(-"
" end_435"
" skipped_440"
" got_441)"
" #f)"
" #f)))"
"(if m_438"
"(let-values(((0-ok?_443)"
"(not(zero? got_441))))"
"(loop_415"
"(#f"
" discarded/leftovers_439"
" ms_436"
" acc_416)"
" 0"
" end_442"
" ipre_437"
" 0-ok?_443))"
"(#f"
" acc_416"
" discarded/leftovers_439))))))))))))"
"(let-values(((m_444 ipre_445)"
"(if #t"
"(regexp-match-peek-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" #f"
" ipre_419"
" max-lookbehind_409)"
"(regexp-match-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" #f"
" ipre_419"
" max-lookbehind_409))))"
"(if(not m_444)"
"((lambda(acc_446 start_447 end_448) acc_446)"
" acc_416"
" start_417"
" end_418)"
"(let-values(((mstart_449)(caar m_444)))"
"(let-values(((mend_450)(cdar m_444)))"
"(let-values(((0-ok?_451)"
"(not(= mstart_449 mend_450))))"
"(if(if #f(input-port? string_405) #f)"
"(#f"
"(lambda(acc_452 new-start_453 new-end_454)"
"(loop_415"
" acc_452"
" new-start_453"
" new-end_454"
" ipre_445"
" 0-ok?_451))"
" acc_416"
" start_417"
" end_418"
" m_444)"
"(loop_415"
"((lambda(start_455 ms_456 acc_457)"
"(cons(car ms_456) acc_457))"
" start_417"
" m_444"
" acc_416)"
" mend_450"
" end_418"
" ipre_445"
" 0-ok?_451))))))))))))"
" loop_415)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t)))))))"
"(let-values(((string_458)"
"(if(path? string_400)"
"(if(let-values(((or-part_459)(string? pattern_399)))"
"(if or-part_459 or-part_459(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_460)"
"(if(string? string_458)"
"(let-values()(string-length string_458))"
"(if(bytes? string_458)"
"(let-values()(bytes-length string_458))"
"(let-values() #f)))))"
"(let-values(((orig-rx_461)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_462)(regexp-max-lookbehind orig-rx_461)))"
"(begin"
"(if #t"
"(if(input-port? string_458)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_458)))"
"(if(let-values(((or-part_463) len_460))"
"(if or-part_463 or-part_463(input-port? string_458)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_458))))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_464)(not end_402)))"
"(if or-part_464"
" or-part_464"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_465)(input-port? string_458)))"
"(if or-part_465 or-part_465(if len_460(<= start_401 len_460) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_460)"
" start_401)))"
"(if(let-values(((or-part_466)(not end_402)))"
"(if or-part_466"
" or-part_466"
"(if(<= start_401 end_402)"
"(let-values(((or-part_467)(input-port? string_458)))"
"(if or-part_467 or-part_467(if len_460(<= end_402 len_460) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_460)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_468)"
"(lambda(acc_469 start_470 end_471 ipre_472 0-ok?_473)"
"(let-values(((rx_474)"
"(if 0-ok?_473"
" orig-rx_461"
"(no-empty-edge-matches"
" orig-rx_461"
"(add1(bytes-length ipre_472))))))"
"(if(if #f(input-port? string_458) #f)"
"(let-values(((__475)"
"(if(positive? start_470)"
"(let-values()"
"(let-values(((s_476)(make-bytes 4096)))"
"((letrec-values(((loop_477)"
"(lambda(n_478)"
"(if(= n_478 start_470)"
"(void)"
"(let-values()"
"(let-values(((m_479)"
"(read-bytes-avail!"
" s_476"
" string_458"
" 0"
"(min"
"(-"
" start_470"
" n_478)"
" 4096))))"
"(if(eof-object?"
" m_479)"
"(void)"
"(let-values()"
"(loop_477"
"(+"
" n_478"
" m_479))))))))))"
" loop_477)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_480)(if #f #f 0)))"
"(let-values(((spitout_481)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_482"
" start_483"
" end_484"
" flush?_485"
" breakable?_486)"
"(let-values(((c_487)"
"(- end_484 start_483)))"
"(begin"
"(set! discarded/leftovers_480"
"(+ c_487 discarded/leftovers_480))"
" c_487)))"
" void))))"
"(let-values(((end_488)"
"(if end_471(- end_471 start_470) #f)))"
"(let-values(((ms_489 ipre_490)"
"(regexp-match/end"
" rx_474"
" string_458"
" 0"
" end_488"
" spitout_481"
" ipre_472"
" max-lookbehind_462)))"
"(let-values(((m_491)(if ms_489(car ms_489) #f)))"
"(let-values(((discarded/leftovers_492)"
"(if #f"
"(get-output-bytes spitout_481)"
" discarded/leftovers_480)))"
"(let-values(((skipped_493)"
"(if #f"
"(bstring-length"
" discarded/leftovers_492)"
" discarded/leftovers_492)))"
"(let-values(((got_494)"
"(if m_491"
"(bstring-length m_491)"
" #f)))"
"(let-values(((end_495)"
"(if end_488"
"(if m_491"
"(-"
" end_488"
" skipped_493"
" got_494)"
" #f)"
" #f)))"
"(if m_491"
"(let-values(((0-ok?_496)"
"(not(zero? got_494))))"
"(loop_468"
"(#f"
" discarded/leftovers_492"
" ms_489"
" acc_469)"
" 0"
" end_495"
" ipre_490"
" 0-ok?_496))"
"(#f"
" acc_469"
" discarded/leftovers_492))))))))))))"
"(let-values(((m_497 ipre_498)"
"(if #t"
"(regexp-match-peek-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" #f"
" ipre_472"
" max-lookbehind_462)"
"(regexp-match-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" #f"
" ipre_472"
" max-lookbehind_462))))"
"(if(not m_497)"
"((lambda(acc_499 start_500 end_501) acc_499)"
" acc_469"
" start_470"
" end_471)"
"(let-values(((mstart_502)(caar m_497)))"
"(let-values(((mend_503)(cdar m_497)))"
"(let-values(((0-ok?_504)"
"(not(= mstart_502 mend_503))))"
"(if(if #f(input-port? string_458) #f)"
"(#f"
"(lambda(acc_505 new-start_506 new-end_507)"
"(loop_468"
" acc_505"
" new-start_506"
" new-end_507"
" ipre_498"
" 0-ok?_504))"
" acc_469"
" start_470"
" end_471"
" m_497)"
"(loop_468"
"((lambda(start_508 ms_509 acc_510)"
"(cons(match-select_404 ms_509) acc_510))"
" start_470"
" m_497"
" acc_469)"
" mend_503"
" end_471"
" ipre_498"
" 0-ok?_504))))))))))))"
" loop_468)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t))))))))))))))))))"
"(define-values"
"(unpack47.1$2)"
"(lambda(given-kws_511"
" given-args_512"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)"
"(let-values(((match-select37_521)(pair? given-kws_511)))"
"(let-values(((match-select36_522)(if match-select37_521(car given-args_512)(void))))"
"(regexp-match-peek-positions*46.1"
" match-select36_522"
" match-select37_521"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)))))"
"(define-values"
"(get-buf+sub)"
"(lambda(string_564 pattern_565)"
"(let-values(((buf_566)"
"(if(if(string? string_564)"
"(let-values(((or-part_567)(byte-regexp? pattern_565)))"
"(if or-part_567 or-part_567(bytes? pattern_565)))"
" #f)"
"(string->bytes/utf-8 string_564(char->integer '#\\?))"
" string_564)))"
"(values"
" buf_566"
"(if(let-values(((or-part_568)(bytes? buf_566)))"
"(if or-part_568"
" or-part_568"
"(if(path? string_564)"
"(let-values(((or-part_569)(bytes? pattern_565)))"
"(if or-part_569 or-part_569(byte-regexp? pattern_565)))"
" #f)))"
" subbytes"
" substring)))))"
"(define-values"
"(regexp-split)"
"(let-values(((regexp-split57_570)"
"(lambda(pattern55_571 string56_572 start49_573 end50_574 ipre51_575 start52_576 end53_577 ipre54_578)"
"(let-values(((pattern_579) pattern55_571))"
"(let-values(((string_580) string56_572))"
"(let-values(((start_581)(if start52_576 start49_573 0)))"
"(let-values(((end_582)(if end53_577 end50_574 #f)))"
"                          (let-values (((ipre_583) (if ipre54_578 ipre51_575 #\"\")))"
"(let-values()"
"(let-values(((buf_584 sub_585)(get-buf+sub string_580 pattern_579)))"
"(let-values(((buf_586)"
"(if(path? buf_584)"
"(if(let-values(((or-part_587)(string? pattern_579)))"
"(if or-part_587 or-part_587(regexp? pattern_579)))"
"(path->string buf_584)"
"(path->bytes buf_584))"
" buf_584)))"
"(let-values(((len_588)"
"(if(string? buf_586)"
"(let-values()(string-length buf_586))"
"(if(bytes? buf_586)"
"(let-values()(bytes-length buf_586))"
"(let-values() #f)))))"
"(let-values(((orig-rx_589)"
"(if(bytes? pattern_579)"
"(let-values()(byte-regexp pattern_579))"
"(if(string? pattern_579)"
"(let-values()(regexp pattern_579))"
"(if(regexp? pattern_579)"
"(let-values() pattern_579)"
"(if(byte-regexp? pattern_579)"
"(let-values() pattern_579)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_579))))))))"
"(let-values(((max-lookbehind_590)(regexp-max-lookbehind orig-rx_589)))"
"(begin"
"(if #f"
"(if(input-port? buf_586)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'regexp-split \"input-port?\" buf_586)))"
"(if(let-values(((or-part_591) len_588))"
"(if or-part_591 or-part_591(input-port? buf_586)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_586))))"
"(if(if(number? start_581)"
"(if(exact? start_581)(if(integer? start_581)(>= start_581 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"exact-nonnegative-integer?\""
" start_581)))"
"(if(let-values(((or-part_592)(not end_582)))"
"(if or-part_592"
" or-part_592"
"(if(number? end_582)"
"(if(exact? end_582)(if(integer? end_582)(>= end_582 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_582)))"
"(if(bytes? ipre_583)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-split \"bytes?\" ipre_583)))"
"(if(let-values(((or-part_593)(input-port? buf_586)))"
"(if or-part_593 or-part_593(if len_588(<= start_581 len_588) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"starting offset index out of range [0,~a]: \" len_588)"
" start_581)))"
"(if(let-values(((or-part_594)(not end_582)))"
"(if or-part_594"
" or-part_594"
"(if(<= start_581 end_582)"
"(let-values(((or-part_595)(input-port? buf_586)))"
"(if or-part_595 or-part_595(if len_588(<= end_582 len_588) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_581 len_588)"
" end_582)))"
"(reverse"
"((letrec-values(((loop_596)"
"(lambda(acc_597 start_598 end_599 ipre_600 0-ok?_601)"
"(let-values(((rx_602)"
"(if 0-ok?_601"
" orig-rx_589"
"(no-empty-edge-matches"
" orig-rx_589"
"(add1(bytes-length ipre_600))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons leftovers acc))"
"(input-port? buf_586)"
" #f)"
"(let-values(((__606)"
"(if(positive? start_598)"
"(let-values()"
"(let-values(((s_607)"
"(make-bytes 4096)))"
"((letrec-values(((loop_608)"
"(lambda(n_609)"
"(if(="
" n_609"
" start_598)"
"(void)"
"(let-values()"
"(let-values(((m_610)"
"(read-bytes-avail!"
" s_607"
" buf_586"
" 0"
"(min"
"(-"
" start_598"
" n_609)"
" 4096))))"
"(if(eof-object?"
" m_610)"
"(void)"
"(let-values()"
"(loop_608"
"(+"
" n_609"
" m_610))))))))))"
" loop_608)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_611)"
"(if #t #f 0)))"
"(let-values(((spitout_612)"
"(if #t"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_613"
" start_614"
" end_615"
" flush?_616"
" breakable?_617)"
"(let-values(((c_618)"
"(-"
" end_615"
" start_614)))"
"(begin"
"(set! discarded/leftovers_611"
"(+"
" c_618"
" discarded/leftovers_611))"
" c_618)))"
" void))))"
"(let-values(((end_619)"
"(if end_599"
"(- end_599 start_598)"
" #f)))"
"(let-values(((ms_620 ipre_621)"
"(regexp-match/end"
" rx_602"
" buf_586"
" 0"
" end_619"
" spitout_612"
" ipre_600"
" max-lookbehind_590)))"
"(let-values(((m_622)"
"(if ms_620(car ms_620) #f)))"
"(let-values(((discarded/leftovers_623)"
"(if #t"
"(get-output-bytes"
" spitout_612)"
" discarded/leftovers_611)))"
"(let-values(((skipped_624)"
"(if #t"
"(bstring-length"
" discarded/leftovers_623)"
" discarded/leftovers_623)))"
"(let-values(((got_625)"
"(if m_622"
"(bstring-length"
" m_622)"
" #f)))"
"(let-values(((end_626)"
"(if end_619"
"(if m_622"
"(-"
" end_619"
" skipped_624"
" got_625)"
" #f)"
" #f)))"
"(if m_622"
"(let-values(((0-ok?_627)"
"(not"
"(zero?"
" got_625))))"
"(loop_596"
"((lambda(leftovers_628"
" ms_629"
" acc_630)"
"(cons"
" leftovers_628"
" acc_630))"
" discarded/leftovers_623"
" ms_620"
" acc_597)"
" 0"
" end_626"
" ipre_621"
" 0-ok?_627))"
"((lambda(acc_631 leftover_632)"
"(if leftover_632"
"(cons"
" leftover_632"
" acc_631)"
" acc_631))"
" acc_597"
" discarded/leftovers_623))))))))))))"
"(let-values(((m_633 ipre_634)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" #f"
" ipre_600"
" max-lookbehind_590)"
"(regexp-match-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" #f"
" ipre_600"
" max-lookbehind_590))))"
"(if(not m_633)"
"((lambda(acc_635 start_636 end_637)"
"(cons"
"(if end_637"
"(sub_585 buf_586 start_636 end_637)"
"(sub_585 buf_586 start_636))"
" acc_635))"
" acc_597"
" start_598"
" end_599)"
"(let-values(((mstart_638)(caar m_633)))"
"(let-values(((mend_639)(cdar m_633)))"
"(let-values(((0-ok?_640)"
"(not(= mstart_638 mend_639))))"
"(if(if #f(input-port? buf_586) #f)"
"(#f"
"(lambda(acc_641"
" new-start_642"
" new-end_643)"
"(loop_596"
" acc_641"
" new-start_642"
" new-end_643"
" ipre_634"
" 0-ok?_640))"
" acc_597"
" start_598"
" end_599"
" m_633)"
"(loop_596"
"((lambda(start_644 ms_645 acc_646)"
"(cons"
"(sub_585"
" buf_586"
" start_644"
"(caar ms_645))"
" acc_646))"
" start_598"
" m_633"
" acc_597)"
" mend_639"
" end_599"
" ipre_634"
" 0-ok?_640))))))))))))"
" loop_596)"
" '()"
" start_581"
" end_582"
" ipre_583"
" #t)))))))))))))))))"
"(case-lambda"
"((pattern_647 string_648)(regexp-split57_570 pattern_647 string_648 #f #f #f #f #f #f))"
"((pattern_649 string_650 start_651 end_652 ipre51_653)"
"(regexp-split57_570 pattern_649 string_650 start_651 end_652 ipre51_653 #t #t #t))"
"((pattern_654 string_655 start_656 end50_657)"
"(regexp-split57_570 pattern_654 string_655 start_656 end50_657 #f #t #t #f))"
"((pattern_658 string_659 start49_660)(regexp-split57_570 pattern_658 string_659 start49_660 #f #f #t #f #f)))))"
"(define-values"
"(regexp-match*71.1)"
"(lambda(gap-select?60_796"
" gap-select?62_797"
" match-select59_798"
" match-select61_799"
" pattern69_800"
" string70_801"
" start63_802"
" end64_803"
" ipre65_804"
" start66_805"
" end67_806"
" ipre68_807)"
"(let-values(((pattern_808) pattern69_800))"
"(let-values(((string_809) string70_801))"
"(let-values(((start_810)(if start66_805 start63_802 0)))"
"(let-values(((end_811)(if end67_806 end64_803 #f)))"
"            (let-values (((ipre_812) (if ipre68_807 ipre65_804 #\"\")))"
"(let-values(((match-select_813)(if match-select61_799 match-select59_798 car)))"
"(let-values(((gap-select_814)(if gap-select?62_797 gap-select?60_796 #f)))"
"(let-values()"
"(if(if(not match-select_813)(not gap-select_814) #f)"
"(let-values()"
"(raise"
"(exn:fail:contract"
"                          \"regexp-match*: one of `match-select' or `gap-select' must be non-#f\""
"(current-continuation-marks))))"
"(if(not match-select_813)"
"(let-values()(regexp-split pattern_808 string_809 start_810 end_811 ipre_812))"
"(if(not(procedure? match-select_813))"
"                          (let-values () (raise-argument-error 'regexp-match* \"(or/c procedure? #f)\" match-select_813))"
"(if(not(eq? match-select_813 car))"
"(let-values()"
"(let-values(((buf_815 sub_816)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_817)"
"(if(path? buf_815)"
"(if(let-values(((or-part_818)(string? pattern_808)))"
"(if or-part_818 or-part_818(regexp? pattern_808)))"
"(path->string buf_815)"
"(path->bytes buf_815))"
" buf_815)))"
"(let-values(((len_819)"
"(if(string? buf_817)"
"(let-values()(string-length buf_817))"
"(if(bytes? buf_817)"
"(let-values()(bytes-length buf_817))"
"(let-values() #f)))))"
"(let-values(((orig-rx_820)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_821)(regexp-max-lookbehind orig-rx_820)))"
"(begin"
"(if #f"
"(if(input-port? buf_817)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'regexp-explode \"input-port?\" buf_817)))"
"(if(let-values(((or-part_822) len_819))"
"(if or-part_822 or-part_822(input-port? buf_817)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_817))))"
"(if(if(number? start_810)"
"(if(exact? start_810)(if(integer? start_810)(>= start_810 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_823)(not end_811)))"
"(if or-part_823"
" or-part_823"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_824)(input-port? buf_817)))"
"(if or-part_824 or-part_824(if len_819(<= start_810 len_819) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"starting offset index out of range [0,~a]: \" len_819)"
" start_810)))"
"(if(let-values(((or-part_825)(not end_811)))"
"(if or-part_825"
" or-part_825"
"(if(<= start_810 end_811)"
"(let-values(((or-part_826)(input-port? buf_817)))"
"(if or-part_826 or-part_826(if len_819(<= end_811 len_819) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_810 len_819)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_827)"
"(lambda(acc_828 start_829 end_830 ipre_831 0-ok?_832)"
"(let-values(((rx_833)"
"(if 0-ok?_832"
" orig-rx_820"
"(no-empty-edge-matches"
" orig-rx_820"
"(add1(bytes-length ipre_831))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app match-select ms)"
"(if gap-select"
"(#%app cons leftovers acc)"
" acc)))"
"(input-port? buf_817)"
" #f)"
"(let-values(((__837)"
"(if(positive? start_829)"
"(let-values()"
"(let-values(((s_838)"
"(make-bytes 4096)))"
"((letrec-values(((loop_839)"
"(lambda(n_840)"
"(if(="
" n_840"
" start_829)"
"(void)"
"(let-values()"
"(let-values(((m_841)"
"(read-bytes-avail!"
" s_838"
" buf_817"
" 0"
"(min"
"(-"
" start_829"
" n_840)"
" 4096))))"
"(if(eof-object?"
" m_841)"
"(void)"
"(let-values()"
"(loop_839"
"(+"
" n_840"
" m_841))))))))))"
" loop_839)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_842)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_843)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_844"
" start_845"
" end_846"
" flush?_847"
" breakable?_848)"
"(let-values(((c_849)"
"(-"
" end_846"
" start_845)))"
"(begin"
"(set! discarded/leftovers_842"
"(+"
" c_849"
" discarded/leftovers_842))"
" c_849)))"
" void))))"
"(let-values(((end_850)"
"(if end_830"
"(- end_830 start_829)"
" #f)))"
"(let-values(((ms_851 ipre_852)"
"(regexp-match/end"
" rx_833"
" buf_817"
" 0"
" end_850"
" spitout_843"
" ipre_831"
" max-lookbehind_821)))"
"(let-values(((m_853)"
"(if ms_851(car ms_851) #f)))"
"(let-values(((discarded/leftovers_854)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_843)"
" discarded/leftovers_842)))"
"(let-values(((skipped_855)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_854)"
" discarded/leftovers_854)))"
"(let-values(((got_856)"
"(if m_853"
"(bstring-length"
" m_853)"
" #f)))"
"(let-values(((end_857)"
"(if end_850"
"(if m_853"
"(-"
" end_850"
" skipped_855"
" got_856)"
" #f)"
" #f)))"
"(if m_853"
"(let-values(((0-ok?_858)"
"(not"
"(zero?"
" got_856))))"
"(loop_827"
"((lambda(leftovers_859"
" ms_860"
" acc_861)"
"(cons"
"(match-select_813"
" ms_860)"
"(if gap-select_814"
"(cons"
" leftovers_859"
" acc_861)"
" acc_861)))"
" discarded/leftovers_854"
" ms_851"
" acc_828)"
" 0"
" end_857"
" ipre_852"
" 0-ok?_858))"
"((lambda(acc_862 leftover_863)"
"(if(if gap-select_814"
" leftover_863"
" #f)"
"(cons"
" leftover_863"
" acc_862)"
" acc_862))"
" acc_828"
" discarded/leftovers_854))))))))))))"
"(let-values(((m_864 ipre_865)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" #f"
" ipre_831"
" max-lookbehind_821)"
"(regexp-match-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" #f"
" ipre_831"
" max-lookbehind_821))))"
"(if(not m_864)"
"((lambda(acc_866 start_867 end_868)"
"(if gap-select_814"
"(cons"
"(if end_868"
"(sub_816 buf_817 start_867 end_868)"
"(sub_816 buf_817 start_867))"
" acc_866)"
" acc_866))"
" acc_828"
" start_829"
" end_830)"
"(let-values(((mstart_869)(caar m_864)))"
"(let-values(((mend_870)(cdar m_864)))"
"(let-values(((0-ok?_871)"
"(not(= mstart_869 mend_870))))"
"(if(if #f(input-port? buf_817) #f)"
"(#f"
"(lambda(acc_872"
" new-start_873"
" new-end_874)"
"(loop_827"
" acc_872"
" new-start_873"
" new-end_874"
" ipre_865"
" 0-ok?_871))"
" acc_828"
" start_829"
" end_830"
" m_864)"
"(loop_827"
"((lambda(start_875 ms_876 acc_877)"
"(cons"
"(let-values(((s_878)"
"(match-select_813"
" ms_876)))"
"(if(not(pair? s_878))"
"(let-values() s_878)"
"(if(integer?(car s_878))"
"(let-values()"
"(sub_816"
" buf_817"
"(car s_878)"
"(cdr s_878)))"
"(let-values()"
"(map2"
"(lambda(m_879)"
"(if m_879"
"(sub_816"
" buf_817"
"(car m_879)"
"(cdr m_879))"
" #f))"
" s_878)))))"
"(if gap-select_814"
"(cons"
"(sub_816"
" buf_817"
" start_875"
"(caar ms_876))"
" acc_877)"
" acc_877)))"
" start_829"
" m_864"
" acc_828)"
" mend_870"
" end_830"
" ipre_865"
" 0-ok?_871))))))))))))"
" loop_827)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(if gap-select_814"
"(let-values()"
"(let-values(((buf_880 sub_881)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_882)"
"(if(path? buf_880)"
"(if(let-values(((or-part_883)(string? pattern_808)))"
"(if or-part_883 or-part_883(regexp? pattern_808)))"
"(path->string buf_880)"
"(path->bytes buf_880))"
" buf_880)))"
"(let-values(((len_884)"
"(if(string? buf_882)"
"(let-values()(string-length buf_882))"
"(if(bytes? buf_882)"
"(let-values()(bytes-length buf_882))"
"(let-values() #f)))))"
"(let-values(((orig-rx_885)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_886)(regexp-max-lookbehind orig-rx_885)))"
"(begin"
"(if #f"
"(if(input-port? buf_882)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'regexp-explode \"input-port?\" buf_882)))"
"(if(let-values(((or-part_887) len_884))"
"(if or-part_887 or-part_887(input-port? buf_882)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                   \"(or/c string? bytes? path? input-port?)\""
" buf_882))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_888)(not end_811)))"
"(if or-part_888"
" or-part_888"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_889)(input-port? buf_882)))"
"(if or-part_889 or-part_889(if len_884(<= start_810 len_884) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_884)"
" start_810)))"
"(if(let-values(((or-part_890)(not end_811)))"
"(if or-part_890"
" or-part_890"
"(if(<= start_810 end_811)"
"(let-values(((or-part_891)(input-port? buf_882)))"
"(if or-part_891"
" or-part_891"
"(if len_884(<= end_811 len_884) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_884)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_892)"
"(lambda(acc_893 start_894 end_895 ipre_896 0-ok?_897)"
"(let-values(((rx_898)"
"(if 0-ok?_897"
" orig-rx_885"
"(no-empty-edge-matches"
" orig-rx_885"
"(add1(bytes-length ipre_896))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app car ms)"
"(#%app cons leftovers acc)))"
"(input-port? buf_882)"
" #f)"
"(let-values(((__902)"
"(if(positive? start_894)"
"(let-values()"
"(let-values(((s_903)"
"(make-bytes 4096)))"
"((letrec-values(((loop_904)"
"(lambda(n_905)"
"(if(="
" n_905"
" start_894)"
"(void)"
"(let-values()"
"(let-values(((m_906)"
"(read-bytes-avail!"
" s_903"
" buf_882"
" 0"
"(min"
"(-"
" start_894"
" n_905)"
" 4096))))"
"(if(eof-object?"
" m_906)"
"(void)"
"(let-values()"
"(loop_904"
"(+"
" n_905"
" m_906))))))))))"
" loop_904)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_907)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_908)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_909"
" start_910"
" end_911"
" flush?_912"
" breakable?_913)"
"(let-values(((c_914)"
"(-"
" end_911"
" start_910)))"
"(begin"
"(set! discarded/leftovers_907"
"(+"
" c_914"
" discarded/leftovers_907))"
" c_914)))"
" void))))"
"(let-values(((end_915)"
"(if end_895"
"(- end_895 start_894)"
" #f)))"
"(let-values(((ms_916 ipre_917)"
"(regexp-match/end"
" rx_898"
" buf_882"
" 0"
" end_915"
" spitout_908"
" ipre_896"
" max-lookbehind_886)))"
"(let-values(((m_918)"
"(if ms_916"
"(car ms_916)"
" #f)))"
"(let-values(((discarded/leftovers_919)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_908)"
" discarded/leftovers_907)))"
"(let-values(((skipped_920)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_919)"
" discarded/leftovers_919)))"
"(let-values(((got_921)"
"(if m_918"
"(bstring-length"
" m_918)"
" #f)))"
"(let-values(((end_922)"
"(if end_915"
"(if m_918"
"(-"
" end_915"
" skipped_920"
" got_921)"
" #f)"
" #f)))"
"(if m_918"
"(let-values(((0-ok?_923)"
"(not"
"(zero?"
" got_921))))"
"(loop_892"
"((lambda(leftovers_924"
" ms_925"
" acc_926)"
"(cons"
"(car ms_925)"
"(cons"
" leftovers_924"
" acc_926)))"
" discarded/leftovers_919"
" ms_916"
" acc_893)"
" 0"
" end_922"
" ipre_917"
" 0-ok?_923))"
"((lambda(acc_927"
" leftover_928)"
"(if leftover_928"
"(cons"
" leftover_928"
" acc_927)"
" acc_927))"
" acc_893"
" discarded/leftovers_919))))))))))))"
"(let-values(((m_929 ipre_930)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" #f"
" ipre_896"
" max-lookbehind_886)"
"(regexp-match-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" #f"
" ipre_896"
" max-lookbehind_886))))"
"(if(not m_929)"
"((lambda(acc_931 start_932 end_933)"
"(cons"
"(if end_933"
"(sub_881 buf_882 start_932 end_933)"
"(sub_881 buf_882 start_932))"
" acc_931))"
" acc_893"
" start_894"
" end_895)"
"(let-values(((mstart_934)(caar m_929)))"
"(let-values(((mend_935)(cdar m_929)))"
"(let-values(((0-ok?_936)"
"(not"
"(= mstart_934 mend_935))))"
"(if(if #f(input-port? buf_882) #f)"
"(#f"
"(lambda(acc_937"
" new-start_938"
" new-end_939)"
"(loop_892"
" acc_937"
" new-start_938"
" new-end_939"
" ipre_930"
" 0-ok?_936))"
" acc_893"
" start_894"
" end_895"
" m_929)"
"(loop_892"
"((lambda(start_940 ms_941 acc_942)"
"(cons"
"(sub_881"
" buf_882"
"(caar ms_941)"
"(cdar ms_941))"
"(cons"
"(sub_881"
" buf_882"
" start_940"
"(caar ms_941))"
" acc_942)))"
" start_894"
" m_929"
" acc_893)"
" mend_935"
" end_895"
" ipre_930"
" 0-ok?_936))))))))))))"
" loop_892)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(let-values()"
"(let-values(((buf_943 sub_944)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_945)"
"(if(path? buf_943)"
"(if(let-values(((or-part_946)(string? pattern_808)))"
"(if or-part_946 or-part_946(regexp? pattern_808)))"
"(path->string buf_943)"
"(path->bytes buf_943))"
" buf_943)))"
"(let-values(((len_947)"
"(if(string? buf_945)"
"(let-values()(string-length buf_945))"
"(if(bytes? buf_945)"
"(let-values()(bytes-length buf_945))"
"(let-values() #f)))))"
"(let-values(((orig-rx_948)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_949)(regexp-max-lookbehind orig-rx_948)))"
"(begin"
"(if #f"
"(if(input-port? buf_945)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'regexp-match* \"input-port?\" buf_945)))"
"(if(let-values(((or-part_950) len_947))"
"(if or-part_950 or-part_950(input-port? buf_945)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                   \"(or/c string? bytes? path? input-port?)\""
" buf_945))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_951)(not end_811)))"
"(if or-part_951"
" or-part_951"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-match* \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_952)(input-port? buf_945)))"
"(if or-part_952 or-part_952(if len_947(<= start_810 len_947) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_947)"
" start_810)))"
"(if(let-values(((or-part_953)(not end_811)))"
"(if or-part_953"
" or-part_953"
"(if(<= start_810 end_811)"
"(let-values(((or-part_954)(input-port? buf_945)))"
"(if or-part_954"
" or-part_954"
"(if len_947(<= end_811 len_947) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_947)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_955)"
"(lambda(acc_956 start_957 end_958 ipre_959 0-ok?_960)"
"(let-values(((rx_961)"
"(if 0-ok?_960"
" orig-rx_948"
"(no-empty-edge-matches"
" orig-rx_948"
"(add1(bytes-length ipre_959))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons(#%app car ms) acc))"
"(input-port? buf_945)"
" #f)"
"(let-values(((__965)"
"(if(positive? start_957)"
"(let-values()"
"(let-values(((s_966)"
"(make-bytes 4096)))"
"((letrec-values(((loop_967)"
"(lambda(n_968)"
"(if(="
" n_968"
" start_957)"
"(void)"
"(let-values()"
"(let-values(((m_969)"
"(read-bytes-avail!"
" s_966"
" buf_945"
" 0"
"(min"
"(-"
" start_957"
" n_968)"
" 4096))))"
"(if(eof-object?"
" m_969)"
"(void)"
"(let-values()"
"(loop_967"
"(+"
" n_968"
" m_969))))))))))"
" loop_967)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_970)"
"(if #f #f 0)))"
"(let-values(((spitout_971)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_972"
" start_973"
" end_974"
" flush?_975"
" breakable?_976)"
"(let-values(((c_977)"
"(-"
" end_974"
" start_973)))"
"(begin"
"(set! discarded/leftovers_970"
"(+"
" c_977"
" discarded/leftovers_970))"
" c_977)))"
" void))))"
"(let-values(((end_978)"
"(if end_958"
"(- end_958 start_957)"
" #f)))"
"(let-values(((ms_979 ipre_980)"
"(regexp-match/end"
" rx_961"
" buf_945"
" 0"
" end_978"
" spitout_971"
" ipre_959"
" max-lookbehind_949)))"
"(let-values(((m_981)"
"(if ms_979"
"(car ms_979)"
" #f)))"
"(let-values(((discarded/leftovers_982)"
"(if #f"
"(get-output-bytes"
" spitout_971)"
" discarded/leftovers_970)))"
"(let-values(((skipped_983)"
"(if #f"
"(bstring-length"
" discarded/leftovers_982)"
" discarded/leftovers_982)))"
"(let-values(((got_984)"
"(if m_981"
"(bstring-length"
" m_981)"
" #f)))"
"(let-values(((end_985)"
"(if end_978"
"(if m_981"
"(-"
" end_978"
" skipped_983"
" got_984)"
" #f)"
" #f)))"
"(if m_981"
"(let-values(((0-ok?_986)"
"(not"
"(zero?"
" got_984))))"
"(loop_955"
"((lambda(leftovers_987"
" ms_988"
" acc_989)"
"(cons"
"(car ms_988)"
" acc_989))"
" discarded/leftovers_982"
" ms_979"
" acc_956)"
" 0"
" end_985"
" ipre_980"
" 0-ok?_986))"
"((lambda(acc_990"
" leftover_991)"
" acc_990)"
" acc_956"
" discarded/leftovers_982))))))))))))"
"(let-values(((m_992 ipre_993)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" #f"
" ipre_959"
" max-lookbehind_949)"
"(regexp-match-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" #f"
" ipre_959"
" max-lookbehind_949))))"
"(if(not m_992)"
"((lambda(acc_994 start_995 end_996) acc_994)"
" acc_956"
" start_957"
" end_958)"
"(let-values(((mstart_997)(caar m_992)))"
"(let-values(((mend_998)(cdar m_992)))"
"(let-values(((0-ok?_999)"
"(not"
"(= mstart_997 mend_998))))"
"(if(if #f(input-port? buf_945) #f)"
"(#f"
"(lambda(acc_1000"
" new-start_1001"
" new-end_1002)"
"(loop_955"
" acc_1000"
" new-start_1001"
" new-end_1002"
" ipre_993"
" 0-ok?_999))"
" acc_956"
" start_957"
" end_958"
" m_992)"
"(loop_955"
"((lambda(start_1003 ms_1004 acc_1005)"
"(cons"
"(sub_944"
" buf_945"
"(caar ms_1004)"
"(cdar ms_1004))"
" acc_1005))"
" start_957"
" m_992"
" acc_956)"
" mend_998"
" end_958"
" ipre_993"
" 0-ok?_999))))))))))))"
" loop_955)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t))))))))))))))))))))))))"
"(define-values"
"(unpack72.1)"
"(lambda(given-kws_1006"
" given-args_1007"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)"
"(let-values(((gap-select?62_1016)(if(pair? given-kws_1006)(eq? '#:gap-select?(car given-kws_1006)) #f)))"
"(let-values(((gap-select?60_1017)(if gap-select?62_1016(car given-args_1007)(void)))"
"((given-kws_1018)(if gap-select?62_1016(cdr given-kws_1006) given-kws_1006))"
"((given-args_1019)(if gap-select?62_1016(cdr given-args_1007) given-args_1007)))"
"(let-values(((match-select61_1020)(pair? given-kws_1018)))"
"(let-values(((match-select59_1021)(if match-select61_1020(car given-args_1019)(void))))"
"(regexp-match*71.1"
" gap-select?60_1017"
" gap-select?62_1016"
" match-select59_1021"
" match-select61_1020"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)))))))"
"(define-values(exists-syms) '(error append update can-update replace truncate must-truncate truncate/replace))"
"(define-values"
"(exists-desc)"
"  \"(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)\")"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values(((path_6) path5_5))"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(unpack7.1$5)"
"(lambda(given-kws_9 given-args_10 path5_11)"
"(let-values(((for-module?4_12)(if(pair? given-kws_9)(eq? '#:for-module?(car given-kws_9)) #f)))"
"(let-values(((for-module?2_13)(if for-module?4_12(car given-args_10)(void)))"
"((given-kws_14)(if for-module?4_12(cdr given-kws_9) given-kws_9))"
"((given-args_15)(if for-module?4_12(cdr given-args_10) given-args_10)))"
"(let-values(((mode3_16)(pair? given-kws_14)))"
"(let-values(((mode1_17)(if mode3_16(car given-args_15)(void))))"
"(open-input-file6.1 for-module?2_13 for-module?4_12 mode1_17 mode3_16 path5_11)))))))"
"(define-values"
"(open-output-file14.1)"
"(lambda(exists10_29 exists12_30 mode9_31 mode11_32 path13_33)"
"(let-values(((path_34) path13_33))"
"(let-values(((mode_35)(if mode11_32 mode9_31 'binary)))"
"(let-values(((exists_36)(if exists12_30 exists10_29 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_34)"
"(void)"
"                (let-values () (raise-argument-error 'open-output-file \"path-string?\" path_34)))"
"(if(memq mode_35 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-output-file binary-or-text-desc mode_35)))"
"(if(memq exists_36 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-output-file exists-desc exists_36)))"
"(open-output-file path_34 mode_35 exists_36))))))))"
"(define-values"
"(unpack15.1$2)"
"(lambda(given-kws_37 given-args_38 path13_39)"
"(let-values(((exists12_40)(if(pair? given-kws_37)(eq? '#:exists(car given-kws_37)) #f)))"
"(let-values(((exists10_41)(if exists12_40(car given-args_38)(void)))"
"((given-kws_42)(if exists12_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if exists12_40(cdr given-args_38) given-args_38)))"
"(let-values(((mode11_44)(pair? given-kws_42)))"
"(let-values(((mode9_45)(if mode11_44(car given-args_43)(void))))"
"(open-output-file14.1 exists10_41 exists12_40 mode9_45 mode11_44 path13_39)))))))"
"(define-values"
"(open-input-output-file22.1)"
"(lambda(exists18_57 exists20_58 mode17_59 mode19_60 path21_61)"
"(let-values(((path_62) path21_61))"
"(let-values(((mode_63)(if mode19_60 mode17_59 'binary)))"
"(let-values(((exists_64)(if exists20_58 exists18_57 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_62)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-output-file \"path-string?\" path_62)))"
"(if(memq mode_63 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file binary-or-text-desc mode_63)))"
"(if(memq exists_64 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file exists-desc exists_64)))"
"(open-input-output-file path_62 mode_63 exists_64))))))))"
"(define-values"
"(unpack23.1)"
"(lambda(given-kws_65 given-args_66 path21_67)"
"(let-values(((exists20_68)(if(pair? given-kws_65)(eq? '#:exists(car given-kws_65)) #f)))"
"(let-values(((exists18_69)(if exists20_68(car given-args_66)(void)))"
"((given-kws_70)(if exists20_68(cdr given-kws_65) given-kws_65))"
"((given-args_71)(if exists20_68(cdr given-args_66) given-args_66)))"
"(let-values(((mode19_72)(pair? given-kws_70)))"
"(let-values(((mode17_73)(if mode19_72(car given-args_71)(void))))"
"(open-input-output-file22.1 exists18_69 exists20_68 mode17_73 mode19_72 path21_67)))))))"
"(define-values"
"(call-with-input-file29.1)"
"(lambda(mode25_85 mode26_86 path27_87 proc28_88)"
"(let-values(((path_89) path27_87))"
"(let-values(((proc_90) proc28_88))"
"(let-values(((mode_91)(if mode26_86 mode25_85 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_89)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"path-string?\" path_89)))"
"(if(if(procedure? proc_90)(procedure-arity-includes? proc_90 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"(input-port? . -> . any)\" proc_90)))"
"(if(memq mode_91 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file binary-or-text-desc mode_91)))"
"(call-with-input-file path_89 proc_90 mode_91))))))))"
"(define-values"
"(unpack30.1)"
"(lambda(given-kws_92 given-args_93 path27_94 proc28_95)"
"(let-values(((mode26_96)(pair? given-kws_92)))"
"(let-values(((mode25_97)(if mode26_96(car given-args_93)(void))))"
"(call-with-input-file29.1 mode25_97 mode26_96 path27_94 proc28_95)))))"
"(define-values"
"(call-with-output-file38.1)"
"(lambda(exists33_109 exists35_110 mode32_111 mode34_112 path36_113 proc37_114)"
"(let-values(((path_115) path36_113))"
"(let-values(((proc_116) proc37_114))"
"(let-values(((mode_117)(if mode34_112 mode32_111 'binary)))"
"(let-values(((exists_118)(if exists35_110 exists33_109 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_115)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"path-string?\" path_115)))"
"(if(if(procedure? proc_116)(procedure-arity-includes? proc_116 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"(output-port? . -> . any)\" proc_116)))"
"(if(memq mode_117 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file binary-or-text-desc mode_117)))"
"(if(memq exists_118 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file exists-desc exists_118)))"
"(call-with-output-file path_115 proc_116 mode_117 exists_118)))))))))"
"(define-values"
"(unpack39.1)"
"(lambda(given-kws_119 given-args_120 path36_121 proc37_122)"
"(let-values(((exists35_123)(if(pair? given-kws_119)(eq? '#:exists(car given-kws_119)) #f)))"
"(let-values(((exists33_124)(if exists35_123(car given-args_120)(void)))"
"((given-kws_125)(if exists35_123(cdr given-kws_119) given-kws_119))"
"((given-args_126)(if exists35_123(cdr given-args_120) given-args_120)))"
"(let-values(((mode34_127)(pair? given-kws_125)))"
"(let-values(((mode32_128)(if mode34_127(car given-args_126)(void))))"
"(call-with-output-file38.1 exists33_124 exists35_123 mode32_128 mode34_127 path36_121 proc37_122)))))))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_142 mode42_143 path43_144 proc44_145)"
"(let-values(((path_146) path43_144))"
"(let-values(((proc_147) proc44_145))"
"(let-values(((mode_148)(if mode42_143 mode41_142 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_146)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"path-string?\" path_146)))"
"(if(if(procedure? proc_147)(procedure-arity-includes? proc_147 0) #f)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"(-> any)\" proc_147)))"
"(if(memq mode_148 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_148)))"
"(with-input-from-file path_146 proc_147 mode_148))))))))"
"(define-values"
"(unpack46.1$1)"
"(lambda(given-kws_149 given-args_150 path43_151 proc44_152)"
"(let-values(((mode42_153)(pair? given-kws_149)))"
"(let-values(((mode41_154)(if mode42_153(car given-args_150)(void))))"
"(with-input-from-file45.1 mode41_154 mode42_153 path43_151 proc44_152)))))"
"(define-values"
"(with-output-to-file54.1)"
"(lambda(exists49_166 exists51_167 mode48_168 mode50_169 path52_170 proc53_171)"
"(let-values(((path_172) path52_170))"
"(let-values(((proc_173) proc53_171))"
"(let-values(((mode_174)(if mode50_169 mode48_168 'binary)))"
"(let-values(((exists_175)(if exists51_167 exists49_166 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_172)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"path-string?\" path_172)))"
"(if(if(procedure? proc_173)(procedure-arity-includes? proc_173 0) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"(-> any)\" proc_173)))"
"(if(memq mode_174 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file binary-or-text-desc mode_174)))"
"(if(memq exists_175 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file exists-desc exists_175)))"
"(with-output-to-file path_172 proc_173 mode_174 exists_175)))))))))"
"(define-values"
"(unpack55.1)"
"(lambda(given-kws_176 given-args_177 path52_178 proc53_179)"
"(let-values(((exists51_180)(if(pair? given-kws_176)(eq? '#:exists(car given-kws_176)) #f)))"
"(let-values(((exists49_181)(if exists51_180(car given-args_177)(void)))"
"((given-kws_182)(if exists51_180(cdr given-kws_176) given-kws_176))"
"((given-args_183)(if exists51_180(cdr given-args_177) given-args_177)))"
"(let-values(((mode50_184)(pair? given-kws_182)))"
"(let-values(((mode48_185)(if mode50_184(car given-args_183)(void))))"
"(with-output-to-file54.1 exists49_181 exists51_180 mode48_185 mode50_184 path52_178 proc53_179)))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values(((path_203) path59_201))"
"(let-values(((proc_204) proc60_202))"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(define-values"
"(unpack62.1)"
"(lambda(given-kws_207 given-args_208 path59_209 proc60_210)"
"(let-values(((mode58_211)(pair? given-kws_207)))"
"(let-values(((mode57_212)(if mode58_211(car given-args_208)(void))))"
"(call-with-input-file*61.1 mode57_212 mode58_211 path59_209 proc60_210)))))"
"(define-values"
"(call-with-input-file*63.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_213 given-argc_214)"
"(if(= given-argc_214 4)"
"(let-values(((l1_215) given-kws_213))"
"(let-values(((l1_216)(if(null? l1_215) l1_215(if(eq?(car l1_215) '#:mode)(cdr l1_215) l1_215))))"
"(null? l1_216)))"
" #f))"
"(case-lambda"
"((given-kws_217 given-args_218 path_219 proc_220)(unpack62.1 given-kws_217 given-args_218 path_219 proc_220)))"
" null"
" '(#:mode)"
"(let-values(((call-with-input-file*_221)"
"(case-lambda((path_222 proc_223)(unpack62.1 null null path_222 proc_223)))))"
" call-with-input-file*_221)))"
"(define-values"
"(call-with-output-file*70.1)"
"(lambda(exists65_224 exists67_225 mode64_226 mode66_227 path68_228 proc69_229)"
"(let-values(((path_230) path68_228))"
"(let-values(((proc_231) proc69_229))"
"(let-values(((mode_232)(if mode66_227 mode64_226 'binary)))"
"(let-values(((exists_233)(if exists67_225 exists65_224 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_230)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"path-string?\" path_230)))"
"(if(if(procedure? proc_231)(procedure-arity-includes? proc_231 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"(output-port? . -> . any)\" proc_231)))"
"(if(memq mode_232 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* binary-or-text-desc mode_232)))"
"(if(memq exists_233 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* exists-desc exists_233)))"
"(let-values(((p_234)(open-output-file path_230 mode_232 exists_233)))"
"(dynamic-wind void(lambda()(proc_231 p_234))(lambda()(close-output-port p_234))))))))))))"
"(define-values"
"(unpack71.1)"
"(lambda(given-kws_235 given-args_236 path68_237 proc69_238)"
"(let-values(((exists67_239)(if(pair? given-kws_235)(eq? '#:exists(car given-kws_235)) #f)))"
"(let-values(((exists65_240)(if exists67_239(car given-args_236)(void)))"
"((given-kws_241)(if exists67_239(cdr given-kws_235) given-kws_235))"
"((given-args_242)(if exists67_239(cdr given-args_236) given-args_236)))"
"(let-values(((mode66_243)(pair? given-kws_241)))"
"(let-values(((mode64_244)(if mode66_243(car given-args_242)(void))))"
"(call-with-output-file*70.1 exists65_240 exists67_239 mode64_244 mode66_243 path68_237 proc69_238)))))))"
"(define-values"
"(set)"
"(case-lambda"
"(() '#hash())"
"(l_71"
"(let-values(((lst_72) l_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(s_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((e_76)(unsafe-car lst_75)))"
"(if #t"
"(let-values(((s_77)"
"(let-values(((s_78) s_74))"
"(let-values(((s_79)(let-values()(hash-set s_78 e_76 #t))))"
"(values s_79)))))"
"(if #t(for-loop_73 s_77(unsafe-cdr lst_75)) s_77))"
" s_74))"
" s_74))))"
" for-loop_73)"
" '#hash()"
" lst_72))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() '#hasheq())"
"(l_80"
"(let-values(((lst_81) l_80))"
"(begin"
"(if(list? lst_81)(void)(let-values()(in-list lst_81)))"
"((letrec-values(((for-loop_82)"
"(lambda(s_83 lst_84)"
"(if(pair? lst_84)"
"(let-values(((e_85)(unsafe-car lst_84)))"
"(if #t"
"(let-values(((s_86)"
"(let-values(((s_87) s_83))"
"(let-values(((s_88)(let-values()(hash-set s_87 e_85 #t))))"
"(values s_88)))))"
"(if #t(for-loop_82 s_86(unsafe-cdr lst_84)) s_86))"
" s_83))"
" s_83))))"
" for-loop_82)"
" '#hasheq()"
" lst_81))))))"
"(define-values(set?)(lambda(s_89)(hash? s_89)))"
"(define-values(set-empty?)(lambda(s_90)(zero?(hash-count s_90))))"
"(define-values(set-member?)(lambda(s_91 e_92)(hash-ref s_91 e_92 #f)))"
"(define-values(set-count)(lambda(s_93)(hash-count s_93)))"
"(define-values(set-add)(lambda(s_94 e_95)(hash-set s_94 e_95 #t)))"
"(define-values(set-remove)(lambda(s_96 e_97)(hash-remove s_96 e_97)))"
"(define-values(set-first)(lambda(s_98)(hash-iterate-key s_98(hash-iterate-first s_98))))"
"(define-values(subset?)(lambda(s1_99 s2_100)(hash-keys-subset? s1_99 s2_100)))"
"(define-values"
"(set=?)"
"(lambda(s1_101 s2_102)(if(=(hash-count s1_101)(hash-count s2_102))(hash-keys-subset? s1_101 s2_102) #f)))"
"(define-values"
"(set-subtract)"
"(lambda(s1_103 s2_104)"
"(let-values(((ht_105) s2_104))"
"(begin"
"(if((lambda(ht_106)(if(hash? ht_106)(immutable? ht_106) #f)) ht_105)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_105)))"
"((letrec-values(((for-loop_107)"
"(lambda(s1_108 i_109)"
"(if i_109"
"(let-values(((k_110)(unsafe-immutable-hash-iterate-key ht_105 i_109)))"
"(if #t"
"(let-values(((s1_111)"
"(let-values(((s1_112) s1_108))"
"(let-values(((s1_113)(let-values()(hash-remove s1_112 k_110))))"
"(values s1_113)))))"
"(if #t"
"(for-loop_107 s1_111(unsafe-immutable-hash-iterate-next ht_105 i_109))"
" s1_111))"
" s1_108))"
" s1_108))))"
" for-loop_107)"
" s1_103"
"(unsafe-immutable-hash-iterate-first ht_105))))))"
"(define-values"
"(set-union)"
"(lambda(s1_114 s2_115)"
"(if(<(set-count s1_114)(set-count s2_115))"
"(set-union s2_115 s1_114)"
"(let-values(((ht_116) s2_115))"
"(begin"
"(if((lambda(ht_117)(if(hash? ht_117)(immutable? ht_117) #f)) ht_116)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_116)))"
"((letrec-values(((for-loop_118)"
"(lambda(s1_119 i_120)"
"(if i_120"
"(let-values(((k_121)(unsafe-immutable-hash-iterate-key ht_116 i_120)))"
"(if #t"
"(let-values(((s1_122)"
"(let-values(((s1_123) s1_119))"
"(let-values(((s1_124)(let-values()(hash-set s1_123 k_121 #t))))"
"(values s1_124)))))"
"(if #t"
"(for-loop_118 s1_122(unsafe-immutable-hash-iterate-next ht_116 i_120))"
" s1_122))"
" s1_119))"
" s1_119))))"
" for-loop_118)"
" s1_114"
"(unsafe-immutable-hash-iterate-first ht_116)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_125 pred_126 empty-y-set_127 empty-n-set_128)"
"(let-values(((ht_129) s_125))"
"(begin"
"(if((lambda(ht_130)(if(hash? ht_130)(immutable? ht_130) #f)) ht_129)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_129)))"
"((letrec-values(((for-loop_131)"
"(lambda(y_132 n_133 i_134)"
"(if i_134"
"(let-values(((v_135)(unsafe-immutable-hash-iterate-key ht_129 i_134)))"
"(if #t"
"(let-values(((y_136 n_137)"
"(let-values(((y_138) y_132)((n_139) n_133))"
"(let-values(((y_140 n_141)"
"(let-values()"
"(if(pred_126 v_135)"
"(values(set-add y_138 v_135) n_139)"
"(values y_138(set-add n_139 v_135))))))"
"(values y_140 n_141)))))"
"(if #t"
"(for-loop_131 y_136 n_137(unsafe-immutable-hash-iterate-next ht_129 i_134))"
"(values y_136 n_137)))"
"(values y_132 n_133)))"
"(values y_132 n_133)))))"
" for-loop_131)"
" empty-y-set_127"
" empty-n-set_128"
"(unsafe-immutable-hash-iterate-first ht_129))))))"
"(define-values"
"(set->list)"
"(lambda(s_142)"
"(alt-reverse"
"(let-values(((ht_143) s_142))"
"(begin"
"(if((lambda(ht_144)(if(hash? ht_144)(immutable? ht_144) #f)) ht_143)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_143)))"
"((letrec-values(((for-loop_145)"
"(lambda(fold-var_146 i_147)"
"(if i_147"
"(let-values(((k_148)(unsafe-immutable-hash-iterate-key ht_143 i_147)))"
"(if #t"
"(let-values(((fold-var_149)"
"(let-values(((fold-var_150) fold-var_146))"
"(let-values(((fold-var_151)"
"(let-values()"
"(cons(let-values() k_148) fold-var_150))))"
"(values fold-var_151)))))"
"(if #t"
"(for-loop_145 fold-var_149(unsafe-immutable-hash-iterate-next ht_143 i_147))"
" fold-var_149))"
" fold-var_146))"
" fold-var_146))))"
" for-loop_145)"
" null"
"(unsafe-immutable-hash-iterate-first ht_143)))))))"
"(define-values"
"(list->set)"
"(lambda(l_152)"
"(let-values(((lst_153) l_152))"
"(begin"
"(if(list? lst_153)(void)(let-values()(in-list lst_153)))"
"((letrec-values(((for-loop_154)"
"(lambda(table_155 lst_156)"
"(if(pair? lst_156)"
"(let-values(((k_157)(unsafe-car lst_156)))"
"(if #t"
"(let-values(((table_158)"
"(let-values(((table_159) table_155))"
"(let-values(((table_160)"
"(let-values()"
"(let-values(((key_161 val_162)"
"(let-values()"
"(values(let-values() k_157) #t))))"
"(hash-set table_159 key_161 val_162)))))"
"(values table_160)))))"
"(if #t(for-loop_154 table_158(unsafe-cdr lst_156)) table_158))"
" table_155))"
" table_155))))"
" for-loop_154)"
" '#hash()"
" lst_153)))))"
"(define-values"
"(list->seteq)"
"(lambda(l_163)"
"(let-values(((lst_164) l_163))"
"(begin"
"(if(list? lst_164)(void)(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(table_166 lst_167)"
"(if(pair? lst_167)"
"(let-values(((k_168)(unsafe-car lst_167)))"
"(if #t"
"(let-values(((table_169)"
"(let-values(((table_170) table_166))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((key_172 val_173)"
"(let-values()"
"(values(let-values() k_168) #t))))"
"(hash-set table_170 key_172 val_173)))))"
"(values table_171)))))"
"(if #t(for-loop_165 table_169(unsafe-cdr lst_167)) table_169))"
" table_166))"
" table_166))))"
" for-loop_165)"
" '#hasheq()"
" lst_164)))))"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
"        (if (let-values (((or-part_9) (equal? (cadr v_8) \"..\")))"
"(if or-part_9"
" or-part_9"
"                (let-values (((or-part_10) (equal? (cadr v_8) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14)))"
"(if #t"
"(let-values(((result_16)"
"(let-values(((result_17) result_13))"
"(let-values(((result_18)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_19)"
"                                                                                        (equal? e_15 \"..\")))"
"(if or-part_19"
" or-part_19"
"(symbol? e_15)))))))"
"(values result_18)))))"
"(if(if #t(not((lambda x_20(not result_16)) e_15)) #f)"
"(for-loop_12 result_16(unsafe-cdr lst_14))"
" result_16))"
" result_13))"
" result_13))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_21)"
"(let-values(((...arse-module-path.rkt:44:2_22) module-path-string?12.1)"
"((v13_23) v_21)"
"((temp14_24) #t)"
"((temp15_25) #t)"
"((temp16_26) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 temp14_24 #t temp16_26 #t #f #f temp15_25 #t v13_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:44:2_22"
" keyword-procedure-extract"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
"(list temp14_24 temp16_26 temp15_25)"
" v13_23)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_27)"
"(let-values(((temp17_28)(symbol->string v_27)))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_28)"
"(module-path-string?12.1 temp17_28)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_29)"
"(if(list? v_29)"
"(if(pair?(cdr v_29))"
"((letrec-values(((loop_30)"
"(lambda(v_31 first?_32)"
"(let-values(((or-part_33)(null? v_31)))"
"(if or-part_33"
" or-part_33"
"(if(string?(car v_31))"
"(if(let-values(((...arse-module-path.rkt:55:18_34) module-path-string?12.1)"
"((temp18_35)(car v_31))"
"((first?19_36) first?_32)"
"((first?20_37) first?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f first?20_37 #t #f #f first?19_36 #t temp18_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:55:18_34"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list first?20_37 first?19_36)"
" temp18_35)))"
"(loop_30(cdr v_31) #f)"
" #f)"
" #f))))))"
" loop_30)"
"(cdr v_29)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_39)(length v_38)))"
"(if(equal? tmp_39 1)"
"(let-values() #f)"
"(if(equal? tmp_39 2)"
"(let-values()"
"(let-values(((e_40)(cadr v_38)))"
"(if(string? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:68:12_41) module-path-string?12.1)"
"((e21_42) e_40)"
"((temp22_43) #t)"
"((temp23_44) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp23_44 #t temp22_43 #t #f #f e21_42)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:68:12_41"
" keyword-procedure-extract"
" '(#:file-end-ok? #:for-planet?)"
" 3)"
" '(#:file-end-ok? #:for-planet?)"
"(list temp23_44 temp22_43)"
" e21_42))))"
"(if(symbol? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:72:12_45) module-path-string?12.1)"
"((temp24_46)(symbol->string e_40))"
"((temp25_47) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f temp25_47 #t #f #f temp24_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:72:12_45"
" keyword-procedure-extract"
" '(#:for-planet?)"
" 3)"
" '(#:for-planet?)"
"(list temp25_47)"
" temp24_46))))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_48)(cadr v_38)))"
"(let-values(((pkg_49)(caddr v_38)))"
"(let-values(((subs_50)(cdddr v_38)))"
"(if file_48"
"(if(let-values(((...arse-module-path.rkt:80:15_51) module-path-string?12.1)"
"((file26_52) file_48)"
"((temp27_53) #t)"
"((temp28_54) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp28_54 #t #f #f temp27_53 #t file26_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:80:15_51"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list temp28_54 temp27_53)"
" file26_52)))"
"(if(if(list? pkg_49)"
"(if(<= 2(length pkg_49) 4)"
"(if(planet-user/pkg-string?(car pkg_49))"
"(if(planet-user/pkg-string?(cadr pkg_49))"
"(let-values(((or-part_55)(null?(cddr pkg_49))))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(planet-version-number?(caddr pkg_49))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(null?(cddr pkg_49))))"
"(if or-part_57"
" or-part_57"
"(planet-version-minor-spec?(cadddr pkg_49))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_58) subs_50))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((sub_62)(unsafe-car lst_61)))"
"(if #t"
"(let-values(((result_63)"
"(let-values(((result_64) result_60))"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_66)"
" sub_62))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path-string?12.1))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_66)"
"(module-path-string?12.1"
" sub29_66)))))))"
"(values result_65)))))"
"(if(if #t(not((lambda x_67(not result_63)) sub_62)) #f)"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63))"
" result_60))"
" result_60))))"
" for-loop_59)"
" #t"
" lst_58)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_68)(exact-nonnegative-integer? v_68)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_69)"
"(let-values(((or-part_70)(planet-version-number? v_69)))"
"(if or-part_70"
" or-part_70"
"(if(pair? v_69)"
"(if(list? v_69)"
"(if(= 2(length v_69))"
"(let-values(((tmp_71)(car v_69)))"
"(if(if(equal? tmp_71 '=) #t(if(equal? tmp_71 '+) #t(equal? tmp_71 '-)))"
"(let-values()(planet-version-number?(cadr v_69)))"
"(let-values()(if(planet-version-number?(car v_69))(planet-version-number?(cadr v_69)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_72"
" dots-dir-ok?6_73"
" file-end-ok?4_74"
" file-end-ok?8_75"
" for-planet?1_76"
" for-planet?5_77"
" just-file-ok?3_78"
" just-file-ok?7_79"
" v9_80)"
"(let-values(((v_81) v9_80))"
"(let-values(((for-planet?_82)(if for-planet?5_77 for-planet?1_76 #f)))"
"(let-values(((dots-dir-ok?_83)(if dots-dir-ok?6_73 dots-dir-ok?2_72 #f)))"
"(let-values(((just-file-ok?_84)(if just-file-ok?7_79 just-file-ok?3_78 #f)))"
"(let-values(((file-end-ok?_85)(if file-end-ok?8_75 file-end-ok?4_74 #f)))"
"(let-values()"
"(let-values(((len_86)(string-length v_81)))"
"(if(positive? len_86)"
"(if(not(char=? '#\\/(string-ref v_81 0)))"
"(if(not(char=? '#\\/(string-ref v_81(sub1 len_86))))"
"(let-values(((start-package-version-pos_87 end-package-version-pos_88)"
"(if for-planet?_82(check-planet-part v_81 len_86)(values 0 0))))"
"(if start-package-version-pos_87"
"((letrec-values(((loop_89)"
"(lambda(i_90 prev-was-slash?_91 saw-slash?_92 saw-dot?_93)"
"(if(not(zero? i_90))"
"(let-values()"
"(let-values(((c_94)(string-ref v_81 i_90)))"
"(if(char=? c_94 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_91)"
"(loop_89(sub1 i_90) #t #t saw-dot?_93)"
" #f))"
"(if(char=? c_94 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_90) len_86)"
"(if(not(char=?(string-ref v_81(add1 i_90)) '#\\/))"
"(not(char=?(string-ref v_81(add1 i_90)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_92)"
"(loop_89(sub1 i_90) #f saw-slash?_92 #t)"
" #f)"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93)))"
"(if(let-values(((or-part_95)(plain-char? c_94)))"
"(if or-part_95"
" or-part_95"
"(if(char=? c_94 '#\\%)"
"(if(<(+ i_90 2) len_86)"
"(hex-sequence? v_81(add1 i_90))"
" #f)"
" #f)))"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(if(if(>= i_90 start-package-version-pos_87)"
"(< i_90 end-package-version-pos_88)"
" #f)"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_84)"
"(if saw-dot?_93(not saw-slash?_92) #f)"
" #f))"
"(let-values(((or-part_96) dots-dir-ok?_83))"
"(if or-part_96"
" or-part_96"
"((letrec-values(((loop_97)"
"(lambda(i_98)"
"(if(= i_98 len_86)"
"(let-values() #t)"
"(if(char=?(string-ref v_81 i_98) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_99)"
"(="
" len_86"
"(add1 i_98))))"
"(if or-part_99"
" or-part_99"
"(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\.)"
"(let-values(((or-part_100)"
"(="
" len_86"
"(+"
" i_98"
" 2))))"
"(if or-part_100"
" or-part_100"
"(char=?"
"(string-ref"
" v_81"
"(+ i_98 2))"
" '#\\/)))"
" #f))"
"(loop_97"
"((letrec-values(((loop_101)"
"(lambda(i_102)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_81"
" i_102))"
"(loop_101"
"(add1"
" i_102))"
" i_102))))"
" loop_101)"
" i_98))"
" #f)"
" #f))"
"(let-values()"
"(loop_97(add1 i_98))))))))"
" loop_97)"
" 0)))"
" #f))))))"
" loop_89)"
"(sub1 len_86)"
" #f"
"(not file-end-ok?_85)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(unpack11.1$1)"
"(lambda(given-kws_103 given-args_104 v9_105)"
"(let-values(((dots-dir-ok?6_106)(if(pair? given-kws_103)(eq? '#:dots-dir-ok?(car given-kws_103)) #f)))"
"(let-values(((dots-dir-ok?2_107)(if dots-dir-ok?6_106(car given-args_104)(void)))"
"((given-kws_108)(if dots-dir-ok?6_106(cdr given-kws_103) given-kws_103))"
"((given-args_109)(if dots-dir-ok?6_106(cdr given-args_104) given-args_104)))"
"(let-values(((file-end-ok?8_110)(if(pair? given-kws_108)(eq? '#:file-end-ok?(car given-kws_108)) #f)))"
"(let-values(((file-end-ok?4_111)(if file-end-ok?8_110(car given-args_109)(void)))"
"((given-kws_112)(if file-end-ok?8_110(cdr given-kws_108) given-kws_108))"
"((given-args_113)(if file-end-ok?8_110(cdr given-args_109) given-args_109)))"
"(let-values(((for-planet?5_114)(if(pair? given-kws_112)(eq? '#:for-planet?(car given-kws_112)) #f)))"
"(let-values(((for-planet?1_115)(if for-planet?5_114(car given-args_113)(void)))"
"((given-kws_116)(if for-planet?5_114(cdr given-kws_112) given-kws_112))"
"((given-args_117)(if for-planet?5_114(cdr given-args_113) given-args_113)))"
"(let-values(((just-file-ok?7_118)(pair? given-kws_116)))"
"(let-values(((just-file-ok?3_119)(if just-file-ok?7_118(car given-args_117)(void))))"
"(module-path-string?10.1"
" dots-dir-ok?2_107"
" dots-dir-ok?6_106"
" file-end-ok?4_111"
" file-end-ok?8_110"
" for-planet?1_115"
" for-planet?5_114"
" just-file-ok?3_119"
" just-file-ok?7_118"
" v9_105)))))))))))"
"(define-values"
"(module-path-string?12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_120 given-argc_121)"
"(if(= given-argc_121 3)"
"(let-values(((l1_122) given-kws_120))"
"(let-values(((l1_123)(if(null? l1_122) l1_122(if(eq?(car l1_122) '#:dots-dir-ok?)(cdr l1_122) l1_122))))"
"(let-values(((l1_124) l1_123))"
"(let-values(((l1_125)"
"(if(null? l1_124) l1_124(if(eq?(car l1_124) '#:file-end-ok?)(cdr l1_124) l1_124))))"
"(let-values(((l1_126) l1_125))"
"(let-values(((l1_127)"
"(if(null? l1_126) l1_126(if(eq?(car l1_126) '#:for-planet?)(cdr l1_126) l1_126))))"
"(let-values(((l1_128) l1_127))"
"(let-values(((l1_129)"
"(if(null? l1_128)"
" l1_128"
"(if(eq?(car l1_128) '#:just-file-ok?)(cdr l1_128) l1_128))))"
"(null? l1_129)))))))))"
" #f))"
"(case-lambda((given-kws_130 given-args_131 v_132)(unpack11.1$1 given-kws_130 given-args_131 v_132)))"
" null"
" '(#:dots-dir-ok? #:file-end-ok? #:for-planet? #:just-file-ok?)"
"(let-values(((module-path-string?_133)(case-lambda((v_134)(unpack11.1$1 null null v_134)))))"
" module-path-string?_133)))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_135)"
"(if(string? v_135)"
"(let-values(((len_136)(string-length v_135)))"
"(if(positive? len_136)"
"(let-values(((vec_137 len_138)"
"(let-values(((vec_140) v_135))"
"(begin"
"(if(string? vec_140)(void)(let-values()(in-string vec_140)))"
"(values vec_140(string-length vec_140)))))"
"((start_139) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_139)(void)(let-values()(in-naturals start_139)))"
"((letrec-values(((for-loop_141)"
"(lambda(result_142 pos_143 pos_144)"
"(if(if(unsafe-fx< pos_143 len_138) #t #f)"
"(let-values(((c_145)(string-ref vec_137 pos_143))((i_146) pos_144))"
"(if(if #t #t #f)"
"(let-values(((result_147)"
"(let-values(((result_148) result_142))"
"(let-values(((result_149)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_150)"
"(plain-char? c_145)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)"
"(char=? '#\\. c_145)))"
"(if or-part_151"
" or-part_151"
"(if(char=? '#\\% c_145)"
"(if(< i_146(- len_136 2))"
"(hex-sequence? v_135(add1 i_146))"
" #f)"
" #f)))))))))"
"(values result_149)))))"
"(if(if(if #t(not((lambda x_152(not result_147)) c_145)) #f)"
"(if #t(not((lambda x_153(not result_147)) i_146)) #f)"
" #f)"
"(for-loop_141 result_147(unsafe-fx+ 1 pos_143)(+ pos_144 1))"
" result_147))"
" result_142))"
" result_142))))"
" for-loop_141)"
" #t"
" 0"
" start_139)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_154)"
"(let-values(((or-part_155)(char<=? '#\\a c_154 '#\\z)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char<=? '#\\A c_154 '#\\Z)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char<=? '#\\0 c_154 '#\\9)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char=? '#\\- c_154)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char=? '#\\_ c_154)))"
"(if or-part_159 or-part_159(char=? '#\\+ c_154)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_160 i_161)"
"(let-values(((c1_162)(string-ref s_160 i_161)))"
"(let-values(((c2_163)(string-ref s_160(add1 i_161))))"
"(if(hex-char? c1_162)"
"(if(hex-char? c2_163)"
"(let-values(((c_164)(integer->char(+(*(hex-char->integer c1_162) 16)(hex-char->integer c2_163)))))"
"(not(plain-char? c_164)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_165)"
"(let-values(((or-part_166)(char<=? '#\\a c_165 '#\\f)))(if or-part_166 or-part_166(char<=? '#\\0 c_165 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_167)"
"(if(char<=? '#\\a c_167 '#\\f)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_167 '#\\F)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_167)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_168 len_169)"
"(let-values(((start-package-version-pos_170 end-package-version-pos_171 colon1-pos_172 colon2-pos_173)"
"((letrec-values(((loop_174)"
"(lambda(j_175"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179)"
"(if(= j_175 len_169)"
"(let-values()"
"(values"
" start-package-version-pos_176"
"(let-values(((or-part_180) end-package-version-pos_177))"
"(if or-part_180 or-part_180 j_175))"
" colon1-pos_178"
" colon2-pos_179))"
"(let-values()"
"(let-values(((tmp_181)(string-ref v_168 j_175)))"
"(if(equal? tmp_181 '#\\/)"
"(let-values()"
"(loop_174"
"(add1 j_175)"
"(let-values(((or-part_182) start-package-version-pos_176))"
"(if or-part_182 or-part_182(add1 j_175)))"
"(if start-package-version-pos_176"
"(let-values(((or-part_183) end-package-version-pos_177))"
"(if or-part_183 or-part_183 j_175))"
" #f)"
" colon1-pos_178"
" colon2-pos_179))"
"(if(equal? tmp_181 '#\\:)"
"(let-values()"
"(if colon2-pos_179"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_178"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" j_175))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" j_175"
" #f)))))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179))))))))))"
" loop_174)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_170"
"(if(> end-package-version-pos_171 start-package-version-pos_170)"
"(let-values(((or-part_184)(not colon2-pos_173)))"
"(if or-part_184 or-part_184(<(add1 colon2-pos_173) end-package-version-pos_171)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_172"
"(let-values()"
"(let-values(((colon1-end_185)"
"(let-values(((or-part_186) colon2-pos_173))"
"(if or-part_186 or-part_186 end-package-version-pos_171))))"
"(if(if(integer-sequence? v_168(add1 colon1-pos_172) colon1-end_185)"
"(let-values(((or-part_187)(not colon2-pos_173)))"
"(if or-part_187"
" or-part_187"
"(let-values(((tmp_188)(string-ref v_168(add1 colon2-pos_173))))"
"(if(equal? tmp_188 '#\\=)"
"(let-values()(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))"
"(if(if(equal? tmp_188 '#\\>) #t(equal? tmp_188 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_173) end-package-version-pos_171)"
"(char=? '#\\=(string-ref v_168(+ colon2-pos_173 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_168(+ 3 colon2-pos_173) end-package-version-pos_171))"
"(let-values()"
"(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))))"
"(let-values()"
"(integer-range-sequence?"
" v_168"
"(add1 colon2-pos_173)"
" end-package-version-pos_171)))))))"
" #f)"
"(let-values()(values colon1-pos_172 end-package-version-pos_171))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_189 start_190 end_191)"
"(if(< start_190 end_191)"
"(let-values(((start_192) start_190)((end_193) end_191)((inc_194) 1))"
"(begin"
"(if(if(real? start_192)(if(real? end_193)(real? inc_194) #f) #f)"
"(void)"
"(let-values()(in-range start_192 end_193 inc_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(result_196 pos_197)"
"(if(< pos_197 end_193)"
"(let-values(((i_198) pos_197))"
"(if #t"
"(let-values(((result_199)"
"(let-values(((result_200) result_196))"
"(let-values(((result_201)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_189 i_198) '#\\9)))))"
"(values result_201)))))"
"(if(if #t(not((lambda x_202(not result_199)) i_198)) #f)"
"(for-loop_195 result_199(+ pos_197 inc_194))"
" result_199))"
" result_196))"
" result_196))))"
" for-loop_195)"
" #t"
" start_192)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_203 start_204 end_205)"
"(if(< start_204 end_205)"
"(if(let-values(((start_206) start_204)((end_207) end_205)((inc_208) 1))"
"(begin"
"(if(if(real? start_206)(if(real? end_207)(real? inc_208) #f) #f)"
"(void)"
"(let-values()(in-range start_206 end_207 inc_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(result_210 pos_211)"
"(if(< pos_211 end_207)"
"(let-values(((i_212) pos_211))"
"(if #t"
"(let-values(((result_213)"
"(let-values(((result_214) result_210))"
"(let-values(((result_215)"
"(let-values()"
"(let-values()"
"(let-values(((c_216)"
"(string-ref s_203 i_212)))"
"(let-values(((or-part_217)"
"(char=? c_216 '#\\-)))"
"(if or-part_217"
" or-part_217"
"(char<=? '#\\0 c_216 '#\\9))))))))"
"(values result_215)))))"
"(if(if #t(not((lambda x_218(not result_213)) i_212)) #f)"
"(for-loop_209 result_213(+ pos_211 inc_208))"
" result_213))"
" result_210))"
" result_210))))"
" for-loop_209)"
" #t"
" start_206)))"
"(>="
" 1"
"(let-values(((start_219) start_204)((end_220) end_205)((inc_221) 1))"
"(begin"
"(if(if(real? start_219)(if(real? end_220)(real? inc_221) #f) #f)"
"(void)"
"(let-values()(in-range start_219 end_220 inc_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_223 pos_224)"
"(if(< pos_224 end_220)"
"(let-values(((i_225) pos_224))"
"(if #t"
"(let-values(((result_226)"
"(let-values(((result_227) result_223))"
"(let-values(((result_228)"
"(let-values()"
"(+"
" result_227"
"(let-values()"
"(if(char=?(string-ref s_203 i_225) '#\\-)"
" 1"
" 0))))))"
"(values result_228)))))"
"(if #t(for-loop_222 result_226(+ pos_224 inc_221)) result_226))"
" result_223))"
" result_223))))"
" for-loop_222)"
" 0"
" start_219))))"
" #f)"
" #f)))"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_22 ser_23 state_24)"
"(list 'deserialize-resolved-module-path(ser_23(1/resolved-module-path-name r_22)))))"
"(cons"
" prop:custom-write"
"(lambda(r_25 port_26 mode_27)"
"(begin"
"                         (if mode_27 (let-values () (write-string \"#<resolved-module-path:\" port_26)) (void))"
"                         (fprintf port_26 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_25)))"
"                         (if mode_27 (let-values () (write-string \">\" port_26)) (void))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_29)"
"(if(path? p_29)"
"      (let-values () (string-append \"\\\"\" (path->string p_29) \"\\\"\"))"
"(if(symbol? p_29)"
"        (let-values () (format \"'~s\" p_29))"
"(let-values()"
"(format"
"           \"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_29))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_30 pos-next_31 init_32 pos-cont?_33 val-cont?_34 all-cont?_35)"
"(make-sequence '(i)(cdr p_29))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_36)"
"(lambda(fold-var_37 pos_38)"
"(if(if pos-cont?_33(pos-cont?_33 pos_38) #t)"
"(let-values(((i_39)(pos->vals_30 pos_38)))"
"(if(if val-cont?_34(val-cont?_34 i_39) #t)"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_37))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
"                                                                            (let-values () (format \" ~s\" i_39))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(if(if all-cont?_35(all-cont?_35 pos_38 i_39) #t)"
"(for-loop_36 fold-var_40(pos-next_31 pos_38))"
" fold-var_40))"
" fold-var_37))"
" fold-var_37))))"
" for-loop_36)"
" null"
" init_32)))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_43)"
"(let-values(((name_44)(1/resolved-module-path-name r_43)))(if(pair? name_44)(car name_44) name_44))))"
"(define-values(resolved-module-paths)(make-weak-hash))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_45)"
"(begin"
"(if(let-values(((or-part_46)(symbol? p_45)))"
"(if or-part_46"
" or-part_46"
"(let-values(((or-part_47)(if(path? p_45)(complete-path? p_45) #f)))"
"(if or-part_47"
" or-part_47"
"(if(pair? p_45)"
"(if(pair?(cdr p_45))"
"(if(list? p_45)"
"(if(let-values(((or-part_48)(symbol?(car p_45))))"
"(if or-part_48 or-part_48(if(path?(car p_45))(complete-path?(car p_45)) #f)))"
"(let-values(((lst_49)(cdr p_45)))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(result_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((s_53)(unsafe-car lst_52)))"
"(if #t"
"(let-values(((result_54)"
"(let-values(((result_55) result_51))"
"(let-values(((result_56)"
"(let-values()"
"(let-values()"
"(symbol? s_53)))))"
"(values result_56)))))"
"(if(if #t(not((lambda x_57(not result_54)) s_53)) #f)"
"(for-loop_50 result_54(unsafe-cdr lst_52))"
" result_54))"
" result_51))"
" result_51))))"
" for-loop_50)"
" #t"
" lst_49)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_45)))"
"(let-values(((or-part_58)"
"(let-values(((e_59)(hash-ref resolved-module-paths p_45 #f)))"
"(if e_59(ephemeron-value e_59) #f))))"
"(if or-part_58"
" or-part_58"
"(let-values(((r_60)(resolved-module-path1.1 p_45)))"
"(begin(hash-set! resolved-module-paths p_45(make-ephemeron p_45 r_60)) r_60)))))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_61)"
"(let-values(((name_62)(1/resolved-module-path-name r_61)))"
"(let-values(((root-name_63)(if(pair? name_62)(car name_62) name_62)))"
"(let-values(((root-mod-path_64)(if(path? root-name_63) root-name_63(list 'quote root-name_63))))"
"(if(pair? name_62)(list* 'submod root-mod-path_64(cdr name_62)) root-mod-path_64))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_65 make-_66 ?_67 -ref_68 -set!_69)"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_101 port_102 mode_103)"
"(begin"
"                         (write-string \"#<module-path-index\" port_102)"
"(if(top-level-module-path-index? r_101)"
"                           (let-values () (fprintf port_102 \":top-level\"))"
"(if(module-path-index-path r_101)"
"(let-values()"
"(let-values(((l_104)"
"((letrec-values(((loop_105)"
"(lambda(r_106)"
"(if(not r_106)"
"(let-values() null)"
"(if(module-path-index-path r_106)"
"(let-values()"
"(cons"
"                                                                        (format \"~.s\" (module-path-index-path r_106))"
"(loop_105(module-path-index-base r_106))))"
"(if(module-path-index-resolved r_106)"
"(let-values()"
"(list"
"                                                                          \"+\""
"(format"
"                                                                           \"~a\""
"(module-path-index-resolved r_106))))"
"(let-values() null)))))))"
" loop_105)"
" r_101)))"
"(fprintf"
" port_102"
"                                  \":~.a\""
"(apply"
" string-append"
"(car l_104)"
"(alt-reverse"
"(let-values(((lst_107)(cdr l_104)))"
"(begin"
"(if(list? lst_107)(void)(let-values()(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_109 lst_110)"
"(if(pair? lst_110)"
"(let-values(((i_111)(unsafe-car lst_110)))"
"(if #t"
"(let-values(((fold-var_112)"
"(let-values(((fold-var_113)"
" fold-var_109))"
"(let-values(((fold-var_114)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                      \" ~a\""
" i_111))"
" fold-var_113))))"
"(values fold-var_114)))))"
"(if #t"
"(for-loop_108 fold-var_112(unsafe-cdr lst_110))"
" fold-var_112))"
" fold-var_109))"
" fold-var_109))))"
" for-loop_108)"
" null"
" lst_107))))))))"
"(if(module-path-index-resolved r_101)"
"                               (let-values () (fprintf port_102 \"=~a\" (module-path-index-resolved r_101)))"
"(void))))"
"                         (write-string \">\" port_102))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_115 b_116 eql?_117)"
"(if(eql?_117(module-path-index-path a_115)(module-path-index-path b_116))"
"(eql?_117(module-path-index-base a_115)(module-path-index-base b_116))"
" #f))"
"(lambda(a_118 hash-code_119)"
"(+"
"(hash-code_119(module-path-index-path a_118))"
"(hash-code_119(module-path-index-base a_118))))"
"(lambda(a_120 hash-code_121)"
"(+"
"(hash-code_121(module-path-index-path a_120))"
"(hash-code_121(module-path-index-base a_120)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index))))"
"(values"
" struct:_65"
" make-_66"
" ?_67"
"(make-struct-field-accessor -ref_68 0 'path)"
"(make-struct-field-accessor -ref_68 1 'base)"
"(make-struct-field-accessor -ref_68 2 'resolved)"
"(make-struct-field-accessor -ref_68 3 'shift-cache)"
"(make-struct-field-mutator -set!_69 2 'resolved)"
"(make-struct-field-mutator -set!_69 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_122 base_123)(1/module-path-index-join path_122 base_123))"
"((name_124)(make-self-module-path-index(1/make-resolved-module-path name_124)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_125)"
"(lambda(mpi5_126 load?3_127 load?4_128)"
"(let-values(((mpi_129) mpi5_126))"
"(let-values(((load?_130)(if load?4_128 load?3_127 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_129)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_129)))"
"(let-values(((or-part_131)(module-path-index-resolved mpi_129)))"
"(if or-part_131"
" or-part_131"
"(let-values(((mod-name_132)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_129)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_129)"
" load?_130)"
" #f"
" load?_130)))"
"(begin"
"(if(1/resolved-module-path? mod-name_132)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_132)))"
"(set-module-path-index-resolved! mpi_129 mod-name_132)"
" mod-name_132)))))))))))"
"(case-lambda"
"((mpi_133)(module-path-index-resolve6_125 mpi_133 #f #f))"
"((mpi_134 load?3_135)(module-path-index-resolve6_125 mpi_134 load?3_135 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_136)"
"(if(module-path-index-resolved mpi_136)"
"(let-values()"
"(let-values(((path_137 base_138)(1/module-path-index-split mpi_136)))"
"(1/module-path-index-join path_137 base_138)))"
"(let-values() mpi_136))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_139)"
"(lambda(mod-path10_140 base11_141 submod8_142 submod9_143)"
"(let-values(((mod-path_144) mod-path10_140))"
"(let-values(((base_145) base11_141))"
"(let-values(((submod_146)(if submod9_143 submod8_142 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_147)(not mod-path_144)))"
"(if or-part_147 or-part_147(1/module-path? mod-path_144)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_144)))"
"(if(let-values(((or-part_148)(not base_145)))"
"(if or-part_148"
" or-part_148"
"(let-values(((or-part_149)(1/resolved-module-path? base_145)))"
"(if or-part_149 or-part_149(1/module-path-index? base_145)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_145)))"
"(if(let-values(((or-part_150)(not submod_146)))"
"(if or-part_150"
" or-part_150"
"(if(pair? submod_146)(if(list? submod_146)(andmap2 symbol? submod_146) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_146)))"
"(if(if(not mod-path_144) base_145 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_145))"
"(void))"
"(if(if submod_146 mod-path_144 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_144"
"                                 \"given submodule list\""
" submod_146))"
"(void))"
"(if submod_146"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_146))))"
"(let-values()"
"(let-values(((keep-base_151)"
"((letrec-values(((loop_152)"
"(lambda(mod-path_153)"
"(if(path? mod-path_153)"
"(let-values() #f)"
"(if(if(pair? mod-path_153)"
"(eq? 'quote(car mod-path_153))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_153)"
"(let-values() #f)"
"(if(if(pair? mod-path_153)"
"(eq? 'submod(car mod-path_153))"
" #f)"
"(let-values()(loop_152(cadr mod-path_153)))"
"(let-values() base_145))))))))"
" loop_152)"
" mod-path_144)))"
"(module-path-index2.1 mod-path_144 keep-base_151 #f #f))))))))))))"
"(case-lambda"
"((mod-path_154 base_155)(module-path-index-join12_139 mod-path_154 base_155 #f #f))"
"((mod-path_156 base_157 submod8_158)(module-path-index-join12_139 mod-path_156 base_157 submod8_158 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_159 load?_160)"
"(if(1/module-path-index? base_159)(1/module-path-index-resolve base_159 load?_160) base_159)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_161)"
"(begin"
"(if(1/module-path-index? mpi_161)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_161)))"
"(values(module-path-index-path mpi_161)(module-path-index-base mpi_161)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_162)"
"(begin"
"(if(1/module-path-index? mpi_162)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_162)))"
"(if(not(module-path-index-path mpi_162))"
"(let-values(((r_163)(module-path-index-resolved mpi_162)))"
"(if r_163(let-values(((p_164)(1/resolved-module-path-name r_163)))(if(pair? p_164)(cdr p_164) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_165)(module-path-index2.1 #f #f name_165 #f))"
"((name_166 enclosing_167)"
"(make-self-module-path-index"
"(let-values(((name25_168) name_166)"
"((temp26_169)(if enclosing_167(1/module-path-index-resolve enclosing_167) #f)))"
"(if(variable-reference-constant?(#%variable-reference build-module-name20.1))"
"(build-module-name18.1 #f #f name25_168 temp26_169)"
"(build-module-name20.1 name25_168 temp26_169)))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_170)"
"(let-values(((r_171)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_170))))"
"(let-values(((or-part_172)"
"(let-values(((e_173)(hash-ref generic-self-mpis r_171 #f)))"
"(if e_173(ephemeron-value e_173) #f))))"
"(if or-part_172"
" or-part_172"
"(let-values(((mpi_174)(module-path-index2.1 #f #f r_171 #f)))"
"(begin(hash-set! generic-self-mpis r_171(make-ephemeron r_171 mpi_174)) mpi_174)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_175)"
"(let-values(((name_176)(1/resolved-module-path-name r_175)))"
"(1/make-resolved-module-path"
"(if(symbol? name_176) generic-module-name(cons generic-module-name(cdr name_176)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_177)"
"(let-values(((r_178)(module-path-index-resolved mpi_177)))"
"(if r_178"
"(let-values()"
"(set-module-path-index-resolved! mpi_177(resolved-module-path-to-generic-resolved-module-path r_178)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_179 from-mpi_180 to-mpi_181)"
"(if(eq? mpi_179 from-mpi_180)"
"(let-values() to-mpi_181)"
"(let-values()"
"(let-values(((base_182)(module-path-index-base mpi_179)))"
"(if(not base_182)"
"(let-values() mpi_179)"
"(let-values()"
"(let-values(((shifted-base_183)(module-path-index-shift base_182 from-mpi_180 to-mpi_181)))"
"(if(eq? shifted-base_183 base_182)"
"(let-values() mpi_179)"
"(let-values(((c63002_184)"
"(shift-cache-ref(module-path-index-shift-cache shifted-base_183) mpi_179)))"
"(if c63002_184"
" c63002_184"
"(let-values()"
"(let-values(((shifted-mpi_185)"
"(module-path-index2.1(module-path-index-path mpi_179) shifted-base_183 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_183) mpi_179 shifted-mpi_185)"
" shifted-mpi_185))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_186)"
"(let-values(((or-part_187)(module-path-index-shift-cache mpi_186)))"
"(if or-part_187"
" or-part_187"
"(let-values(((cache_188)(make-weak-hasheq)))"
"(begin(set-module-path-index-shift-cache! mpi_186 cache_188) cache_188))))))"
"(define-values(shift-cache-ref)(lambda(cache_189 v_190)(if cache_189(hash-ref cache_189 v_190 #f) #f)))"
"(define-values(shift-cache-set!)(lambda(cache_191 v_192 r_193)(hash-set! cache_191 v_192 r_193)))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_194)(eq? top-level-module-path-index mpi_194)))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
"(case-lambda"
"((name_197 from-namespace_198)(void))"
"((p_199 enclosing_200 source-stx-stx_201 load?_202)"
"(begin"
"(if(1/module-path? p_199)"
"(void)"
"         (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_199)))"
"(if(let-values(((or-part_203)(not enclosing_200)))"
"(if or-part_203 or-part_203(1/resolved-module-path? enclosing_200)))"
"(void)"
"         (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_200)))"
"(if(if(list? p_199)(if(=(length p_199) 2)(if(eq? 'quote(car p_199))(symbol?(cadr p_199)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_199)))"
"         (if (if (list? p_199) (if (eq? 'submod (car p_199)) (equal? \"..\" (cadr p_199)) #f) #f)"
"(let-values()"
"(let-values(((lst_204)(cdr p_199)))"
"(begin"
"(if(list? lst_204)(void)(let-values()(in-list lst_204)))"
"((letrec-values(((for-loop_205)"
"(lambda(enclosing_206 lst_207)"
"(if(pair? lst_207)"
"(let-values(((s_208)(unsafe-car lst_207)))"
"(if #t"
"(let-values(((enclosing_209)"
"(let-values(((enclosing_210) enclosing_206))"
"(let-values(((enclosing_211)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:348:10_212)"
" build-module-name20.1)"
"((s27_213) s_208)"
"((enclosing28_214)"
" enclosing_210)"
"((p29_215) p_199))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p29_215"
" #t"
" s27_213"
" enclosing28_214)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:348:10_212"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p29_215)"
" s27_213"
" enclosing28_214))))))"
"(values enclosing_211)))))"
"(if #t(for-loop_205 enclosing_209(unsafe-cdr lst_207)) enclosing_209))"
" enclosing_206))"
" enclosing_206))))"
" for-loop_205)"
" enclosing_200"
" lst_204))))"
"           (if (if (list? p_199) (if (eq? 'submod (car p_199)) (equal? \".\" (cadr p_199)) #f) #f)"
"(let-values()"
"(let-values(((lst_216)(cddr p_199)))"
"(begin"
"(if(list? lst_216)(void)(let-values()(in-list lst_216)))"
"((letrec-values(((for-loop_217)"
"(lambda(enclosing_218 lst_219)"
"(if(pair? lst_219)"
"(let-values(((s_220)(unsafe-car lst_219)))"
"(if #t"
"(let-values(((enclosing_221)"
"(let-values(((enclosing_222) enclosing_218))"
"(let-values(((enclosing_223)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:353:10_224)"
" build-module-name20.1)"
"((s30_225) s_220)"
"((enclosing31_226)"
" enclosing_222)"
"((p32_227) p_199))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p32_227"
" #t"
" s30_225"
" enclosing31_226)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:353:10_224"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p32_227)"
" s30_225"
" enclosing31_226))))))"
"(values enclosing_223)))))"
"(if #t(for-loop_217 enclosing_221(unsafe-cdr lst_219)) enclosing_221))"
" enclosing_218))"
" enclosing_218))))"
" for-loop_217)"
" enclosing_200"
" lst_216))))"
"(if(if(list? p_199)(eq? 'submod(car p_199)) #f)"
"(let-values()"
"(let-values(((base_228)((1/current-module-name-resolver)(cadr p_199) enclosing_200 #f #f)))"
"(let-values(((lst_229)(cddr p_199)))"
"(begin"
"(if(list? lst_229)(void)(let-values()(in-list lst_229)))"
"((letrec-values(((for-loop_230)"
"(lambda(enclosing_231 lst_232)"
"(if(pair? lst_232)"
"(let-values(((s_233)(unsafe-car lst_232)))"
"(if #t"
"(let-values(((enclosing_234)"
"(let-values(((enclosing_235) enclosing_231))"
"(let-values(((enclosing_236)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:358:12_237)"
" build-module-name20.1)"
"((s33_238) s_233)"
"((enclosing34_239)"
" enclosing_235)"
"((p35_240) p_199))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p35_240"
" #t"
" s33_238"
" enclosing34_239)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:358:12_237"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p35_240)"
" s33_238"
" enclosing34_239))))))"
"(values enclosing_236)))))"
"(if #t"
"(for-loop_230 enclosing_234(unsafe-cdr lst_232))"
" enclosing_234))"
" enclosing_231))"
" enclosing_231))))"
" for-loop_230)"
" base_228"
" lst_229)))))"
"               (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_199)))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_241 original15_242 name16_243 enclosing17_244)"
"(let-values(((name_245) name16_243))"
"(let-values(((enclosing_246) enclosing17_244))"
"(let-values(((orig-name_247)(if original15_242 original14_241 name_245)))"
"(let-values()"
"(let-values(((enclosing-module-name_248)"
"(if enclosing_246(1/resolved-module-path-name enclosing_246) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_248)"
"(let-values() name_245)"
"(if(symbol? enclosing-module-name_248)"
"(let-values()(list enclosing-module-name_248 name_245))"
"                   (if (equal? name_245 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_248)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_247))"
"(if(= 2(length enclosing-module-name_248))"
"(let-values()(car enclosing-module-name_248))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_248)))))))"
"(let-values()(append enclosing-module-name_248(list name_245))))))))))))))"
"(define-values"
"(unpack19.1$1)"
"(lambda(given-kws_249 given-args_250 name16_251 enclosing17_252)"
"(let-values(((original15_253)(pair? given-kws_249)))"
"(let-values(((original14_254)(if original15_253(car given-args_250)(void))))"
"(build-module-name18.1 original14_254 original15_253 name16_251 enclosing17_252)))))"
"(define-values"
"(build-module-name20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_255 given-argc_256)"
"(if(= given-argc_256 4)"
"(let-values(((l1_257) given-kws_255))"
"(let-values(((l1_258)(if(null? l1_257) l1_257(if(eq?(car l1_257) '#:original)(cdr l1_257) l1_257))))"
"(null? l1_258)))"
" #f))"
"(case-lambda"
"((given-kws_259 given-args_260 name_261 enclosing_262)"
"(unpack19.1$1 given-kws_259 given-args_260 name_261 enclosing_262)))"
" null"
" '(#:original)"
"(let-values(((build-module-name_263)"
"(case-lambda((name_264 enclosing_265)(unpack19.1$1 null null name_264 enclosing_265)))))"
" build-module-name_263)))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_266)"
"(begin"
"(if(let-values(((or-part_267)(not r_266)))(if or-part_267 or-part_267(1/resolved-module-path? r_266)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_266)))"
" r_266))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_268)"
"(begin"
"(if(let-values(((or-part_269)(not s_268)))"
"(if or-part_269"
" or-part_269"
"(let-values(((or-part_270)(symbol? s_268)))"
"(if or-part_270 or-part_270(if(path? s_268)(complete-path? s_268) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
"            \"(or/c #f symbol? (and/c path? complete-path?))\""
" s_268)))"
" s_268))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_271)"
"(let-values(((current-name_272)(1/current-module-declare-name)))"
"(let-values(((root-name_273)"
"(if current-name_272"
"(resolved-module-path-root-name current-name_272)"
"(if(pair? default-name_271)(car default-name_271) default-name_271))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_271)(cons root-name_273(cdr default-name_271)) root-name_273))))))"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 0)))"
"(begin"
"(unsafe-struct-set! v_102 0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
"                                 (if write?_112 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_115))"
"                                (fprintf port_111 (if write?_112 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
"                                  (fprintf port_111 \"#<promise:!running!~a>\" r_116)"
"                                  (fprintf port_111 \"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c63654_117)(object-name v_114)))"
"(if c63654_117"
"                                    ((lambda (n_118) (fprintf port_111 \"#<promise:~a>\" n_118)) c63654_117)"
"                                    (let-values () (display \"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 0)))"
"(if(null? v_114)"
"                                  (let-values () (fprintf port_111 \"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
"                                      (fprintf port_111 (if write?_112 \"#<promise!~s>\" \"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_111)"
"                                        (let-values (((fmt_119) (if write?_112 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
"                                        (display \")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" #t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise))))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 0 'val)"
"(make-struct-field-mutator -set!_130 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_147 make-_148 ?_149 -ref_150 -set!_151)"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise))))"
"(values struct:_147 make-_148 ?_149)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_163 make-_164 ?_165 -ref_166 -set!_167)"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_184)(raise(reraise-val this_184)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise))))"
"(values struct:_163 make-_164 ?_165(make-struct-field-accessor -ref_166 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_185 make-_186 ?_187 -ref_188 -set!_189)"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_206 port_207 write?_208)"
"                       (fprintf port_207 (if write?_208 \"#<running:~s>\" \"#<running:~a>\") (running-name this_206))))"
"(cons"
" prop:procedure"
"(lambda(this_209)"
"(let-values(((name_210)(running-name this_209)))"
"(if name_210"
"                           (error 'force \"reentrant promise `~.s'\" name_210)"
"                           (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running))))"
"(values struct:_185 make-_186 ?_187(make-struct-field-accessor -ref_188 0 'name))))"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(let-values()"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_24)((unsafe-struct-ref p_24 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name))))"
"(values struct:_8 make-_9 ?_10)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_43 make-_44 ?_45 -ref_46 -set!_47)"
"(let-values()"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread))))"
"(values struct:_43 make-_44 ?_45(make-struct-field-accessor -ref_46 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(let-values()"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo))))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'thunk)"
"(make-struct-field-accessor -ref_67 1 'done-evt)"
"(make-struct-field-accessor -ref_67 2 'done-sema)"
"(make-struct-field-accessor -ref_67 3 'access-sema)"
"(make-struct-field-mutator -set!_68 0 'thunk))))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_132 make-_133 ?_134 -ref_135 -set!_136)"
"(let-values()"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_148)"
"(let-values(((v_149)(unsafe-struct-ref p_148 0)))"
"(wrap-evt(if(running? v_149)(running-thread-thread v_149) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_150)"
"(let-values(((v_151)(unsafe-struct-ref p_150 0)))"
"(reify-result"
"(if(running-thread? v_151)"
"(let-values(((t_152)(running-thread-thread v_151)))"
"(let-values((()(begin(thread-wait t_152)(values))))"
"(let-values(((v_153)(unsafe-struct-ref p_150 0)))"
"(if(running-thread? v_153)"
"(error"
" 'force"
"                                     \"promise's thread terminated ~a\\n  promise: ~e\""
"                                     \"without result or exception\""
" p_150)"
" v_153))))"
" v_151))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread))))"
"(values struct:_132 make-_133 ?_134)))"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) #f) #f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) #f) #f)))"
"(define-values"
"(phase<?)"
"(lambda(a_7 b_8)(if(not b_8)(let-values() #f)(if(not a_7)(let-values() #t)(let-values()(< a_7 b_8))))))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'serialize-state))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 6 'context-triples)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'interned-props))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_62)"
"(serialize-state1.1"
" reachable-scopes_62"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_63 state_64)"
"(let-values(((or-part_65)(hash-ref(serialize-state-scopes state_64) scs_63 #f)))"
"(if or-part_65 or-part_65(begin(hash-set!(serialize-state-scopes state_64) scs_63 scs_63) scs_63)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_66 state_67)"
"(let-values(((or-part_68)(hash-ref(serialize-state-shifted-multi-scopes state_67) sms_66 #f)))"
"(if or-part_68"
" or-part_68"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_67) sms_66 sms_66) sms_66)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_69 state_70)"
"(if(null? mpi-shifts_69)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_71)(intern-mpi-shifts(cdr mpi-shifts_69) state_70)))"
"(let-values(((tail-table_72)"
"(let-values(((or-part_73)(hash-ref(serialize-state-mpi-shifts state_70) tail_71 #f)))"
"(if or-part_73"
" or-part_73"
"(let-values(((ht_74)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_70) tail_71 ht_74) ht_74))))))"
"(let-values(((or-part_75)(hash-ref tail-table_72(car mpi-shifts_69) #f)))"
"(if or-part_75"
" or-part_75"
"(let-values(((v_76)(cons(car mpi-shifts_69) tail_71)))"
"(begin(hash-set! tail-table_72(car mpi-shifts_69) v_76) v_76))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_77 sms_78 mpi-shifts_79 state_80)"
"(let-values(((scs-ht_81)"
"(let-values(((or-part_83)(hash-ref(serialize-state-context-triples state_80) scs_77 #f)))"
"(if or-part_83"
" or-part_83"
"(let-values(((ht_84)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_80) scs_77 ht_84) ht_84))))))"
"(let-values(((sms-ht_82)"
"(let-values(((or-part_85)(hash-ref scs-ht_81 sms_78 #f)))"
"(if or-part_85"
" or-part_85"
"(let-values(((ht_86)(make-hasheq)))(begin(hash-set! scs-ht_81 sms_78 ht_86) ht_86))))))"
"(let-values(((or-part_87)(hash-ref sms-ht_82 mpi-shifts_79 #f)))"
"(if or-part_87"
" or-part_87"
"(let-values(((vec_88)(vector-immutable scs_77 sms_78 mpi-shifts_79)))"
"(begin(hash-set! sms-ht_82 mpi-shifts_79 vec_88) vec_88))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_89 get-preserved-props_90 state_91)"
"(let-values(((v_92)(hash-ref(serialize-state-props state_91) all-props_89 'no)))"
"(if(eq? v_92 'no)"
"(let-values()"
"(let-values(((preserved-props_93)(get-preserved-props_90)))"
"(let-values(((p_94)"
"(if(zero?(hash-count preserved-props_93))"
"(let-values() #f)"
"(let-values(((c65331_95)"
"(hash-ref(serialize-state-interned-props state_91) preserved-props_93 #f)))"
"(if c65331_95"
"((lambda(p_96) p_96) c65331_95)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_91)"
" preserved-props_93"
" preserved-props_93)"
" preserved-props_93)))))))"
"(begin(hash-set!(serialize-state-props state_91) all-props_89 p_94) p_94))))"
"(let-values() v_92)))))"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8)))))))))))"
"(define-values"
"(datum-map)"
"(let-values(((datum-map5_1)"
"(lambda(s3_2 f4_3 seen1_4 seen2_5)"
"(let-values(((s_6) s3_2))"
"(let-values(((f_7) f4_3))"
"(let-values(((seen_8)(if seen2_5 seen1_4 #f)))"
"(let-values()"
"((letrec-values(((loop_9)"
"(lambda(tail?_10 s_11 prev-depth_12 prev-seen_13)"
"(let-values(((depth_14)(add1 prev-depth_12)))"
"(let-values(((seen_15)"
"(if(if prev-seen_13"
"(if(> depth_14 32)(datum-has-elements? s_11) #f)"
" #f)"
"(let-values()"
"(if(hash-ref prev-seen_13 s_11 #f)"
"(let-values()"
"((hash-ref prev-seen_13 'cycle-fail) s_11))"
"(let-values()(hash-set prev-seen_13 s_11 #t))))"
"(let-values() prev-seen_13))))"
"(if(null? s_11)"
"(let-values()(f_7 tail?_10 s_11))"
"(if(pair? s_11)"
"(let-values()"
"(f_7"
" tail?_10"
"(cons"
"(loop_9 #f(car s_11) depth_14 seen_15)"
"(loop_9 #t(cdr s_11) depth_14 seen_15))))"
"(if(vector? s_11)"
"(let-values()"
"(f_7"
" #f"
"(vector->immutable-vector"
"(let-values(((len_16)(vector-length s_11)))"
"(begin"
"(if(exact-nonnegative-integer? len_16)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                     \"exact-nonnegative-integer?\""
" len_16)))"
"(let-values(((v_17)(make-vector len_16 0)))"
"(begin"
"(if(zero? len_16)"
"(void)"
"(let-values()"
"(let-values(((vec_18 len_19)"
"(let-values(((vec_20) s_11))"
"(begin"
"(if(vector? vec_20)"
"(void)"
"(let-values()"
"(in-vector vec_20)))"
"(values"
" vec_20"
"(unsafe-vector-length"
" vec_20))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_21)"
"(lambda(i_22 pos_23)"
"(if(unsafe-fx<"
" pos_23"
" len_19)"
"(let-values(((e_24)"
"(unsafe-vector-ref"
" vec_18"
" pos_23)))"
"(if #t"
"(let-values(((i_25)"
"(let-values(((i_26)"
" i_22))"
"(let-values(((i_27)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_17"
" i_26"
"(let-values()"
"(loop_9"
" #f"
" e_24"
" depth_14"
" seen_15)))"
"(unsafe-fx+"
" 1"
" i_26)))))"
"(values"
" i_27)))))"
"(if(if #t"
"(not"
"((lambda x_28"
"(unsafe-fx="
" i_25"
" len_16))"
" e_24))"
" #f)"
"(for-loop_21"
" i_25"
"(unsafe-fx+"
" 1"
" pos_23))"
" i_25))"
" i_22))"
" i_22))))"
" for-loop_21)"
" 0"
" 0)))))"
" v_17)))))))"
"(if(box? s_11)"
"(let-values()"
"(f_7"
" #f"
"(box-immutable(loop_9 #f(unbox s_11) depth_14 seen_15))))"
"(let-values(((c66407_29)(immutable-prefab-struct-key s_11)))"
"(if c66407_29"
"((lambda(key_30)"
"(f_7"
" #f"
"(apply"
" make-prefab-struct"
" key_30"
"(alt-reverse"
"(let-values(((v*_31 start*_32 stop*_33 step*_34)"
"(normalise-inputs"
" 'in-vector"
"                                                                                   \"vector\""
"(lambda(x_35)(vector? x_35))"
"(lambda(x_36)"
"(unsafe-vector-length x_36))"
"(struct->vector s_11)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_37)"
"(lambda(fold-var_38 idx_39)"
"(if(unsafe-fx<"
" idx_39"
" stop*_33)"
"(let-values(((e_40)"
"(unsafe-vector-ref"
" v*_31"
" idx_39)))"
"(if #t"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_38))"
"(let-values(((fold-var_43)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_9"
" #f"
" e_40"
" depth_14"
" seen_15))"
" fold-var_42))))"
"(values"
" fold-var_43)))))"
"(if #t"
"(for-loop_37"
" fold-var_41"
"(unsafe-fx+"
" idx_39"
" 1))"
" fold-var_41))"
" fold-var_38))"
" fold-var_38))))"
" for-loop_37)"
" null"
" start*_32)))))))"
" c66407_29)"
"(if(if(hash? s_11)(immutable? s_11) #f)"
"(let-values()"
"(if(hash-eq? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_44) s_11))"
"(begin"
"(if((lambda(ht_45)(hash? ht_45)) ht_44)"
"(void)"
"(let-values()(default-in-hash ht_44)))"
"((letrec-values(((for-loop_46)"
"(lambda(table_47 i_48)"
"(if i_48"
"(let-values(((k_49"
" v_50)"
"(hash-iterate-key+value"
" ht_44"
" i_48)))"
"(if #t"
"(let-values(((table_51)"
"(let-values(((table_52)"
" table_47))"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_54"
" val_55)"
"(let-values()"
"(values"
" k_49"
"(loop_9"
" #f"
" v_50"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_52"
" key_54"
" val_55)))))"
"(values"
" table_53)))))"
"(if #t"
"(for-loop_46"
" table_51"
"(hash-iterate-next"
" ht_44"
" i_48))"
" table_51))"
" table_47))"
" table_47))))"
" for-loop_46)"
" '#hasheq()"
"(hash-iterate-first ht_44))))))"
"(if(hash-eqv? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_56) s_11))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(table_59 i_60)"
"(if i_60"
"(let-values(((k_61"
" v_62)"
"(hash-iterate-key+value"
" ht_56"
" i_60)))"
"(if #t"
"(let-values(((table_63)"
"(let-values(((table_64)"
" table_59))"
"(let-values(((table_65)"
"(let-values()"
"(let-values(((key_66"
" val_67)"
"(let-values()"
"(values"
" k_61"
"(loop_9"
" #f"
" v_62"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_64"
" key_66"
" val_67)))))"
"(values"
" table_65)))))"
"(if #t"
"(for-loop_58"
" table_63"
"(hash-iterate-next"
" ht_56"
" i_60))"
" table_63))"
" table_59))"
" table_59))))"
" for-loop_58)"
" '#hasheqv()"
"(hash-iterate-first ht_56))))))"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_68) s_11))"
"(begin"
"(if((lambda(ht_69)(hash? ht_69)) ht_68)"
"(void)"
"(let-values()(default-in-hash ht_68)))"
"((letrec-values(((for-loop_70)"
"(lambda(table_71 i_72)"
"(if i_72"
"(let-values(((k_73"
" v_74)"
"(hash-iterate-key+value"
" ht_68"
" i_72)))"
"(if #t"
"(let-values(((table_75)"
"(let-values(((table_76)"
" table_71))"
"(let-values(((table_77)"
"(let-values()"
"(let-values(((key_78"
" val_79)"
"(let-values()"
"(values"
" k_73"
"(loop_9"
" #f"
" v_74"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_76"
" key_78"
" val_79)))))"
"(values"
" table_77)))))"
"(if #t"
"(for-loop_70"
" table_75"
"(hash-iterate-next"
" ht_68"
" i_72))"
" table_75))"
" table_71))"
" table_71))))"
" for-loop_70)"
" '#hash()"
"(hash-iterate-first ht_68)))))))))"
"(let-values()(f_7 #f s_11))))))))))))))"
" loop_9)"
" #f"
" s_6"
" 0"
" seen_8))))))))"
"(case-lambda"
"((s_80 f_81)(datum-map5_1 s_80 f_81 #f #f))"
"((s_82 f_83 seen1_84)(datum-map5_1 s_82 f_83 seen1_84 #t)))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_85)"
"(let-values(((or-part_86)(pair? d_85)))"
"(if or-part_86"
" or-part_86"
"(let-values(((or-part_87)(vector? d_85)))"
"(if or-part_87"
" or-part_87"
"(let-values(((or-part_88)(box? d_85)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_89)(immutable-prefab-struct-key d_85)))"
"(if or-part_89"
" or-part_89"
"(if(hash? d_85)(if(immutable? d_85)(positive?(hash-count d_85)) #f) #f)))))))))))"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_22)(if(preserved-property-value? v_22)(preserved-property-value-content v_22) v_22)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_24 syntax?_25)"
"(datum-map"
" v_24"
"(lambda(tail?_26 v_27)"
"(begin"
"(if(let-values(((or-part_28)(null? v_27)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_29)(boolean? v_27)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? v_27)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(number? v_27)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(char? v_27)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(string? v_27)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(bytes? v_27)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(regexp? v_27)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(syntax?_25 v_27)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(pair? v_27)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(vector? v_27)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(box? v_27)))"
"(if or-part_39"
" or-part_39"
"(let-values(((or-part_40)(hash? v_27)))"
"(if or-part_40"
" or-part_40"
"(immutable-prefab-struct-key"
" v_27)))))))))))))))))))))))))))"
"(void)"
"           (let-values () (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_27)))"
" v_27))"
" disallow-cycles$1)))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_41) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_41))))"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations"
" syntax-mpi-shifts"
" syntax-bulk-binding-registry"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_67 reach_68)"
"(let-values(((prop_69)(syntax-scope-propagations s_67)))"
"(begin"
"(reach_68(if prop_69((propagation-ref prop_69) s_67)(syntax-content s_67)))"
"(reach_68(syntax-scopes s_67))"
"(reach_68(syntax-shifted-multi-scopes s_67))"
"(let-values(((ht_70)(syntax-props s_67)))"
"(begin"
"(if((lambda(ht_71)(if(hash? ht_71)(immutable? ht_71) #f)) ht_70)"
"(void)"
"(let-values()(default-in-immutable-hash ht_70)))"
"((letrec-values(((for-loop_72)"
"(lambda(fold-var_73 i_74)"
"(if i_74"
"(let-values(((k_75 v_76)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_70"
" i_74)))"
"(if #t"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78) fold-var_73))"
"(if(preserved-property-value?"
"(plain-property-value v_76))"
"(let-values(((fold-var_79) fold-var_78))"
"(let-values(((fold-var_80)"
"(let-values()"
"(begin"
"(let-values()"
"(reach_68 v_76))"
"(void)))))"
"(values fold-var_80)))"
" fold-var_78))))"
"(if #t"
"(for-loop_72"
" fold-var_77"
"(unsafe-immutable-hash-iterate-next ht_70 i_74))"
" fold-var_77))"
" fold-var_73))"
" fold-var_73))))"
" for-loop_72)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_70))))))))"
"(cons"
" prop:serialize"
"(lambda(s_81 ser_82 state_83)"
"(let-values(((prop_84)(syntax-scope-propagations s_81)))"
"(let-values(((content_85)"
"(if prop_84((propagation-ref prop_84) s_81)(syntax-content s_81))))"
"(let-values(((properties_86)"
"(intern-properties"
"(syntax-props s_81)"
"(lambda()"
"(let-values(((ht_89)(syntax-props s_81)))"
"(begin"
"(if((lambda(ht_90)(hash? ht_90)) ht_89)"
"(void)"
"(let-values()(default-in-hash ht_89)))"
"((letrec-values(((for-loop_91)"
"(lambda(table_92 i_93)"
"(if i_93"
"(let-values(((k_94 v_95)"
"(hash-iterate-key+value"
" ht_89"
" i_93)))"
"(if #t"
"(let-values(((table_96)"
"(let-values(((table_97)"
" table_92))"
"(if(preserved-property-value?"
" v_95)"
"(let-values(((table_98)"
" table_97))"
"(let-values(((table_99)"
"(let-values()"
"(let-values(((key_100"
" val_101)"
"(let-values()"
"(values"
" k_94"
"(check-value-to-preserve"
"(plain-property-value"
" v_95)"
" syntax?$1)))))"
"(hash-set"
" table_98"
" key_100"
" val_101)))))"
"(values table_99)))"
" table_97))))"
"(if #t"
"(for-loop_91"
" table_96"
"(hash-iterate-next ht_89 i_93))"
" table_96))"
" table_92))"
" table_92))))"
" for-loop_91)"
" '#hasheq()"
"(hash-iterate-first ht_89)))))"
" state_83)))"
"(let-values(((tamper_87)(serialize-tamper(syntax-tamper s_81))))"
"(let-values(((context-triple_88)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_81) state_83)"
"(intern-shifted-multi-scopes(syntax-shifted-multi-scopes s_81) state_83)"
"(intern-mpi-shifts(syntax-mpi-shifts s_81) state_83)"
" state_83)))"
"(if(let-values(((or-part_102) properties_86))(if or-part_102 or-part_102 tamper_87))"
"(let-values()"
"(list->vector"
"(list"
"(ser_82 content_85)"
"(ser_82 context-triple_88 #t)"
"(ser_82(syntax-srcloc s_81) #t)"
"(ser_82 properties_86)"
"(ser_82 tamper_87))))"
"(let-values()"
"(list->vector"
"(list"
"(ser_82 content_85)"
"(ser_82 context-triple_88 #t)"
"(ser_82(syntax-srcloc s_81) #t))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_103 port_104 mode_105)"
"                       (let-values ((() (begin (write-string \"#<syntax\" port_104) (values))))"
"(let-values(((srcloc_106)(syntax-srcloc s_103)))"
"(begin"
"(if srcloc_106"
"(let-values()"
"(let-values(((srcloc-str_107)(srcloc->string srcloc_106)))"
"                                   (if srcloc-str_107 (let-values () (fprintf port_104 \":~a\" srcloc-str_107)) (void))))"
"(void))"
"                             (fprintf port_104 \" ~.s\" (syntax->datum$1 s_103))"
"                             (write-string \">\" port_104)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7 8)"
" #f"
" 'syntax))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'content)"
"(make-struct-field-accessor -ref_4 1 'scopes)"
"(make-struct-field-accessor -ref_4 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 3 'scope-propagations)"
"(make-struct-field-accessor -ref_4 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 5 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 6 'srcloc)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'inspector)"
"(make-struct-field-accessor -ref_4 9 'tamper)"
"(make-struct-field-mutator -set!_5 0 'content)"
"(make-struct-field-mutator -set!_5 3 'scope-propagations)"
"(make-struct-field-mutator -set!_5 9 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f #f empty-props #f #f))"
"(define-values(identifier?)(lambda(s_108)(if(syntax?$1 s_108)(symbol?(syntax-content s_108)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_109)(syntax-map s_109(lambda(tail?_110 x_111) x_111)(lambda(s_112 d_113) d_113) syntax-content)))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_114)"
"(lambda(stx-c6_115 s7_116 stx-l2_117 stx-p3_118 stx-l4_119 stx-p5_120)"
"(let-values(((stx-c_121) stx-c6_115))"
"(let-values(((s_122) s7_116))"
"(let-values(((stx-l_123)(if stx-l4_119 stx-l2_117 #f)))"
"(let-values(((stx-p_124)(if stx-p5_120 stx-p3_118 #f)))"
"(let-values()"
"(let-values(((wrap_125)"
"(lambda(content_126)"
"(syntax1.1"
" content_126"
"(if stx-c_121(syntax-scopes stx-c_121) empty-scopes)"
"(if stx-c_121"
"(syntax-shifted-multi-scopes stx-c_121)"
" empty-shifted-multi-scopes)"
" #f"
"(if stx-c_121(syntax-mpi-shifts stx-c_121) empty-mpi-shifts)"
"(if stx-c_121(syntax-bulk-binding-registry stx-c_121) #f)"
"(if stx-l_123(syntax-srcloc stx-l_123) #f)"
"(if stx-p_124(syntax-props stx-p_124) empty-props)"
"(if stx-c_121(syntax-inspector stx-c_121) #f)"
"(if stx-c_121"
"(if(syntax-tamper stx-c_121)"
"(tamper-tainted-for-content content_126)"
" #f)"
" #f)))))"
"(syntax-map"
" s_122"
"(lambda(tail?_127 x_128)(if tail?_127 x_128(wrap_125 x_128)))"
" #f"
" #f"
" disallow-cycles))))))))))"
"(case-lambda"
"((stx-c_129 s_130)(datum->syntax8_114 stx-c_129 s_130 #f #f #f #f))"
"((stx-c_131 s_132 stx-l_133 stx-p3_134)(datum->syntax8_114 stx-c_131 s_132 stx-l_133 stx-p3_134 #t #t))"
"((stx-c_135 s_136 stx-l2_137)(datum->syntax8_114 stx-c_135 s_136 stx-l2_137 #f #t #f)))))"
"(define-values"
"(syntax-map)"
"(let-values(((syntax-map16_138)"
"(lambda(s12_139 f13_140 d->s14_141 s-e15_142 seen10_143 seen11_144)"
"(let-values(((s_145) s12_139))"
"(let-values(((f_146) f13_140))"
"(let-values(((d->s_147) d->s14_141))"
"(let-values(((s-e_148) s-e15_142))"
"(let-values(((seen_149)(if seen11_144 seen10_143 #f)))"
"(let-values()"
"((letrec-values(((loop_150)"
"(lambda(s_151)"
"(datum-map"
" s_151"
"(lambda(tail?_152 v_153)"
"(if(syntax?$1 v_153)"
"(let-values()"
"(if d->s_147"
"(d->s_147"
" v_153"
"(if s-e_148"
"(loop_150(s-e_148 v_153))"
"(syntax-content v_153)))"
" v_153))"
"(let-values()(f_146 tail?_152 v_153))))"
" seen_149))))"
" loop_150)"
" s_145))))))))))"
"(case-lambda"
"((s_154 f_155 d->s_156 s-e_157)(syntax-map16_138 s_154 f_155 d->s_156 s-e_157 #f #f))"
"((s_158 f_159 d->s_160 s-e_161 seen10_162)(syntax-map16_138 s_158 f_159 d->s_160 s-e_161 seen10_162 #t)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_163) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_163))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_164 context-triple_165 srcloc_166 props_167 tamper_168 inspector_169)"
"(syntax1.1"
" content_164"
"(vector-ref context-triple_165 0)"
"(vector-ref context-triple_165 1)"
" #f"
"(vector-ref context-triple_165 2)"
" #f"
" srcloc_166"
"(if props_167"
"(let-values(((ht_170) props_167))"
"(begin"
"(if((lambda(ht_171)(if(hash? ht_171)(immutable? ht_171) #f)) ht_170)"
"(void)"
"(let-values()(default-in-immutable-hash ht_170)))"
"((letrec-values(((for-loop_172)"
"(lambda(table_173 i_174)"
"(if i_174"
"(let-values(((k_175 v_176)(unsafe-immutable-hash-iterate-key+value ht_170 i_174)))"
"(if #t"
"(let-values(((table_177)"
"(let-values(((table_178) table_173))"
"(let-values(((table_179)"
"(let-values()"
"(let-values(((key_180 val_181)"
"(let-values()"
"(values"
" k_175"
"(preserved-property-value1.1"
" v_176)))))"
"(hash-set table_178 key_180 val_181)))))"
"(values table_179)))))"
"(if #t"
"(for-loop_172 table_177(unsafe-immutable-hash-iterate-next ht_170 i_174))"
" table_177))"
" table_173))"
" table_173))))"
" for-loop_172)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_170))))"
" empty-props)"
" inspector_169"
"(deserialize-tamper tamper_168))))"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_45 ser_46 state_47)"
"(list"
" 'deserialize-table-with-bulk-bindings"
"(ser_46(table-with-bulk-bindings-syms twbb_45))"
"(ser_46(table-with-bulk-bindings-bulk-bindings twbb_45))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'table-with-bulk-bindings))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'syms)"
"(make-struct-field-accessor -ref_22 1 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_48 bulk-bindings_49)(table-with-bulk-bindings1.1 syms_48 bulk-bindings_49)))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_50 make-_51 ?_52 -ref_53 -set!_54)"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                    (cons prop:reach-scopes (lambda (sms_76 reach_77) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_78 ser_79 state_80)"
"(list"
" 'deserialize-bulk-binding-at"
"(ser_79(bulk-binding-at-scopes bba_78))"
"(ser_79(bulk-binding-at-bulk bba_78))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at))))"
"(values"
" struct:_50"
" make-_51"
" ?_52"
"(make-struct-field-accessor -ref_53 0 'scopes)"
"(make-struct-field-accessor -ref_53 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_81 bulk_82)(bulk-binding-at2.1 scopes_81 bulk_82)))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_83 make-_84 ?_85 -ref_86 -set!_87)"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class))))"
"(values"
" struct:_83"
" make-_84"
" ?_85"
"(make-struct-field-accessor -ref_86 0 'get-symbols)"
"(make-struct-field-accessor -ref_86 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_109 s_110 extra-shifts_111)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_109))"
" b_109"
"(append extra-shifts_111(if s_110(syntax-mpi-shifts s_110) null)))))"
"(define-values(bulk-binding-create)(lambda(b_112)(bulk-binding-class-create(bulk-binding-ref b_112))))"
"(define-values(binding-table-empty?)(lambda(bt_113)(if(hash? bt_113)(zero?(hash-count bt_113)) #f)))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_114 scopes_115 sym_116 binding_117)"
"(if(hash? bt_114)"
"(let-values()(hash-set bt_114 sym_116(hash-set(hash-ref bt_114 sym_116 '#hash()) scopes_115 binding_117)))"
"(let-values()"
"(let-values(((the-struct_118) bt_114))"
"(if(table-with-bulk-bindings? the-struct_118)"
"(let-values(((syms10_119)"
"(binding-table-add(table-with-bulk-bindings-syms bt_114) scopes_115 sym_116 binding_117)))"
"(table-with-bulk-bindings1.1 syms10_119(table-with-bulk-bindings-bulk-bindings the-struct_118)))"
"            (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_118)))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_120 scopes_121 bulk_122)"
"(if(table-with-bulk-bindings? bt_120)"
"(let-values()"
"(table-with-bulk-bindings1.1"
"(remove-matching-bindings(table-with-bulk-bindings-syms bt_120) scopes_121 bulk_122)"
"(cons(bulk-binding-at2.1 scopes_121 bulk_122)(table-with-bulk-bindings-bulk-bindings bt_120))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_120 null) scopes_121 bulk_122)))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_123 scopes_124 bulk_125)"
"(let-values(((bulk-symbols_126)(bulk-binding-symbols bulk_125 #f null)))"
"(if(<(hash-count syms_123)(hash-count bulk-symbols_126))"
"(let-values()"
"(let-values(((ht_127) syms_123))"
"(begin"
"(if((lambda(ht_128)(if(hash? ht_128)(immutable? ht_128) #f)) ht_127)"
"(void)"
"(let-values()(default-in-immutable-hash ht_127)))"
"((letrec-values(((for-loop_129)"
"(lambda(syms_130 i_131)"
"(if i_131"
"(let-values(((sym_132 sym-bindings_133)"
"(unsafe-immutable-hash-iterate-key+value ht_127 i_131)))"
"(if #t"
"(let-values(((syms_134)"
"(let-values(((syms_135) syms_130))"
"(let-values(((syms_136)"
"(let-values()"
"(if(hash-ref bulk-symbols_126 sym_132 #f)"
"(remove-matching-binding"
" syms_135"
" sym_132"
" sym-bindings_133"
" scopes_124)"
" syms_135))))"
"(values syms_136)))))"
"(if #t"
"(for-loop_129 syms_134(unsafe-immutable-hash-iterate-next ht_127 i_131))"
" syms_134))"
" syms_130))"
" syms_130))))"
" for-loop_129)"
" syms_123"
"(unsafe-immutable-hash-iterate-first ht_127)))))"
"(let-values()"
"(let-values(((ht_137) bulk-symbols_126))"
"(begin"
"(if((lambda(ht_138)(if(hash? ht_138)(immutable? ht_138) #f)) ht_137)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_137)))"
"((letrec-values(((for-loop_139)"
"(lambda(syms_140 i_141)"
"(if i_141"
"(let-values(((sym_142)(unsafe-immutable-hash-iterate-key ht_137 i_141)))"
"(if #t"
"(let-values(((syms_143)"
"(let-values(((syms_144) syms_140))"
"(let-values(((syms_145)"
"(let-values()"
"(let-values(((sym-bindings_146)"
"(hash-ref syms_144 sym_142 #f)))"
"(if sym-bindings_146"
"(remove-matching-binding"
" syms_144"
" sym_142"
" sym-bindings_146"
" scopes_124)"
" syms_144)))))"
"(values syms_145)))))"
"(if #t"
"(for-loop_139 syms_143(unsafe-immutable-hash-iterate-next ht_137 i_141))"
" syms_143))"
" syms_140))"
" syms_140))))"
" for-loop_139)"
" syms_123"
"(unsafe-immutable-hash-iterate-first ht_137)))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_147 sym_148 sym-bindings_149 scopes_150)"
"(hash-set syms_147 sym_148(hash-remove sym-bindings_149 scopes_150))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_151 scs_152 s_153 extra-shifts_154)"
"(let-values(((ht_155 bulk-bindings_156)"
"(if(hash? table_151)"
"(values table_151 null)"
"(values"
"(table-with-bulk-bindings-syms table_151)"
"(table-with-bulk-bindings-bulk-bindings table_151)))))"
"(set-union"
"(let-values(((ht_157) ht_155))"
"(begin"
"(if((lambda(ht_158)(hash? ht_158)) ht_157)(void)(let-values()(default-in-hash ht_157)))"
"((letrec-values(((for-loop_159)"
"(lambda(table_160 i_161)"
"(if i_161"
"(let-values(((sym_162 at-sym_163)(hash-iterate-key+value ht_157 i_161)))"
"(if #t"
"(let-values(((table_164)"
"(let-values(((table_165) table_160))"
"(if(let-values(((ht_166) at-sym_163))"
"(begin"
"(if((lambda(ht_167)(hash? ht_167)) ht_166)"
"(void)"
"(let-values()(default-in-hash-keys ht_166)))"
"((letrec-values(((for-loop_168)"
"(lambda(result_169 i_170)"
"(if i_170"
"(let-values(((an-scs_171)"
"(hash-iterate-key"
" ht_166"
" i_170)))"
"(if #t"
"(let-values(((result_172)"
"(let-values(((result_173)"
" result_169))"
"(let-values(((result_174)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_171"
" scs_152)))))"
"(values"
" result_174)))))"
"(if(if #t"
"(not"
"((lambda x_175"
" result_172)"
" an-scs_171))"
" #f)"
"(for-loop_168"
" result_172"
"(hash-iterate-next"
" ht_166"
" i_170))"
" result_172))"
" result_169))"
" result_169))))"
" for-loop_168)"
" #f"
"(hash-iterate-first ht_166))))"
"(let-values(((table_176) table_165))"
"(let-values(((table_177)"
"(let-values()"
"(let-values(((key_178 val_179)"
"(let-values()"
"(values"
"(let-values() sym_162)"
" #t))))"
"(hash-set table_176 key_178 val_179)))))"
"(values table_177)))"
" table_165))))"
"(if #t(for-loop_159 table_164(hash-iterate-next ht_157 i_161)) table_164))"
" table_160))"
" table_160))))"
" for-loop_159)"
" '#hasheq()"
"(hash-iterate-first ht_157))))"
"(let-values(((lst_180) bulk-bindings_156))"
"(begin"
"(if(list? lst_180)(void)(let-values()(in-list lst_180)))"
"((letrec-values(((for-loop_181)"
"(lambda(table_182 lst_183)"
"(if(pair? lst_183)"
"(let-values(((bba_184)(unsafe-car lst_183)))"
"(if #t"
"(let-values(((table_185)"
"(let-values(((table_186) table_182))"
"(if(subset?(bulk-binding-at-scopes bba_184) scs_152)"
"(let-values(((ht_187)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_184)"
" s_153"
" extra-shifts_154)))"
"(begin"
"(if((lambda(ht_188)(hash? ht_188)) ht_187)"
"(void)"
"(let-values()(default-in-hash-keys ht_187)))"
"((letrec-values(((for-loop_189)"
"(lambda(table_190 i_191)"
"(if i_191"
"(let-values(((sym_192)"
"(hash-iterate-key"
" ht_187"
" i_191)))"
"(if #t"
"(let-values(((table_193)"
"(let-values(((table_194)"
" table_190))"
"(let-values(((table_195)"
"(let-values()"
"(let-values(((key_196"
" val_197)"
"(let-values()"
"(values"
"(let-values()"
" sym_192)"
" #t))))"
"(hash-set"
" table_194"
" key_196"
" val_197)))))"
"(values"
" table_195)))))"
"(if #t"
"(for-loop_189"
" table_193"
"(hash-iterate-next"
" ht_187"
" i_191))"
" table_193))"
" table_190))"
" table_190))))"
" for-loop_189)"
" table_186"
"(hash-iterate-first ht_187))))"
" table_186))))"
"(if #t(for-loop_181 table_185(unsafe-cdr lst_183)) table_185))"
" table_182))"
" table_182))))"
" for-loop_181)"
" '#hasheq()"
" lst_180)))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_198 state_199)"
"(let-values(((or-part_200)(hash-ref(serialize-state-bindings-intern state_199) bt_198 #f)))"
"(if or-part_200"
" or-part_200"
"(let-values(((reachable-scopes_201)(serialize-state-reachable-scopes state_199)))"
"(let-values(((new-syms_202)"
"(let-values(((ht_205)(if(hash? bt_198) bt_198(table-with-bulk-bindings-syms bt_198))))"
"(begin"
"(if((lambda(ht_206)(if(hash? ht_206)(immutable? ht_206) #f)) ht_205)"
"(void)"
"(let-values()(default-in-immutable-hash ht_205)))"
"((letrec-values(((for-loop_207)"
"(lambda(table_208 i_209)"
"(if i_209"
"(let-values(((sym_210 bindings-for-sym_211)"
"(unsafe-immutable-hash-iterate-key+value ht_205 i_209)))"
"(if #t"
"(let-values(((table_212)"
"(let-values(((new-bindings-for-sym_213)"
"(let-values(((ht_214)"
" bindings-for-sym_211))"
"(begin"
"(if((lambda(ht_215)"
"(if(hash? ht_215)"
"(immutable? ht_215)"
" #f))"
" ht_214)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_214)))"
"((letrec-values(((for-loop_216)"
"(lambda(table_217"
" i_218)"
"(if i_218"
"(let-values(((scopes_219"
" binding_220)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_214"
" i_218)))"
"(if #t"
"(let-values(((table_221)"
"(let-values(((table_222)"
" table_217))"
"(if(subset?"
" scopes_219"
" reachable-scopes_201)"
"(let-values(((table_223)"
" table_222))"
"(let-values(((table_224)"
"(let-values()"
"(let-values(((key_225"
" val_226)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_219"
" state_199)"
" binding_220))))"
"(hash-set"
" table_223"
" key_225"
" val_226)))))"
"(values"
" table_224)))"
" table_222))))"
"(if #t"
"(for-loop_216"
" table_221"
"(unsafe-immutable-hash-iterate-next"
" ht_214"
" i_218))"
" table_221))"
" table_217))"
" table_217))))"
" for-loop_216)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_214))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_227)"
"(lambda(table_228)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_229)"
"(let-values(((table_230)"
" table_228))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_213))"
"(let-values(((table_231)"
" table_230))"
"(let-values(((table_232)"
"(let-values()"
"(let-values(((key_233"
" val_234)"
"(let-values()"
"(values"
" sym_210"
" new-bindings-for-sym_213))))"
"(hash-set"
" table_231"
" key_233"
" val_234)))))"
"(values"
" table_232)))"
" table_230))))"
"(if #f"
"(for-loop_227"
" table_229)"
" table_229))"
" table_228))"
" table_228))))"
" for-loop_227)"
" table_208)))))"
"(if #t"
"(for-loop_207"
" table_212"
"(unsafe-immutable-hash-iterate-next ht_205 i_209))"
" table_212))"
" table_208))"
" table_208))))"
" for-loop_207)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_205))))))"
"(let-values(((new-bulk-bindings_203)"
"(if(hash? bt_198)"
" null"
"(alt-reverse"
"(let-values(((lst_235)(table-with-bulk-bindings-bulk-bindings bt_198)))"
"(begin"
"(if(list? lst_235)(void)(let-values()(in-list lst_235)))"
"((letrec-values(((for-loop_236)"
"(lambda(fold-var_237 lst_238)"
"(if(pair? lst_238)"
"(let-values(((bba_239)(unsafe-car lst_238)))"
"(if #t"
"(let-values(((fold-var_240)"
"(let-values(((fold-var_241) fold-var_237))"
"(if(subset?"
"(bulk-binding-at-scopes bba_239)"
" reachable-scopes_201)"
"(let-values(((fold-var_242) fold-var_241))"
"(let-values(((fold-var_243)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_244)"
" bba_239))"
"(if(bulk-binding-at?"
" the-struct_244)"
"(let-values(((scopes11_245)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_239)"
" state_199)))"
"(bulk-binding-at2.1"
" scopes11_245"
"(bulk-binding-at-bulk"
" the-struct_244)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"bulk-binding-at?\""
" the-struct_244))))"
" fold-var_242))))"
"(values fold-var_243)))"
" fold-var_241))))"
"(if #t"
"(for-loop_236 fold-var_240(unsafe-cdr lst_238))"
" fold-var_240))"
" fold-var_237))"
" fold-var_237))))"
" for-loop_236)"
" null"
" lst_235)))))))"
"(let-values(((new-bt_204)"
"(if(pair? new-bulk-bindings_203)"
"(table-with-bulk-bindings1.1 new-syms_202 new-bulk-bindings_203)"
" new-syms_202)))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_199) bt_198 new-bt_204)"
" new-bt_204)))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_246 reachable-scopes_247 reach_248 register-trigger_249)"
"(let-values(((ht_250)(if(hash? bt_246) bt_246(table-with-bulk-bindings-syms bt_246))))"
"(begin"
"(if((lambda(ht_251)(if(hash? ht_251)(immutable? ht_251) #f)) ht_250)"
"(void)"
"(let-values()(default-in-immutable-hash ht_250)))"
"((letrec-values(((for-loop_252)"
"(lambda(fold-var_253 i_254)"
"(if i_254"
"(let-values(((sym_255 bindings-for-sym_256)"
"(unsafe-immutable-hash-iterate-key+value ht_250 i_254)))"
"(if #t"
"(let-values(((fold-var_257)"
"(let-values(((ht_258) bindings-for-sym_256))"
"(begin"
"(if((lambda(ht_259)(if(hash? ht_259)(immutable? ht_259) #f))"
" ht_258)"
"(void)"
"(let-values()(default-in-immutable-hash ht_258)))"
"((letrec-values(((for-loop_260)"
"(lambda(fold-var_261 i_262)"
"(if i_262"
"(let-values(((scopes_263 binding_264)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_258"
" i_262)))"
"(if #t"
"(let-values(((fold-var_265)"
"(let-values(((fold-var_266)"
" fold-var_261))"
"(let-values(((fold-var_267)"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_263"
" binding_264"
" reachable-scopes_247"
" reach_248"
" register-trigger_249))"
"(void)))))"
"(values"
" fold-var_267)))))"
"(if #t"
"(for-loop_260"
" fold-var_265"
"(unsafe-immutable-hash-iterate-next"
" ht_258"
" i_262))"
" fold-var_265))"
" fold-var_261))"
" fold-var_261))))"
" for-loop_260)"
" fold-var_253"
"(unsafe-immutable-hash-iterate-first ht_258))))))"
"(if #t"
"(for-loop_252 fold-var_257(unsafe-immutable-hash-iterate-next ht_250 i_254))"
" fold-var_257))"
" fold-var_253))"
" fold-var_253))))"
" for-loop_252)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_250))))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_268 binding_269 reachable-scopes_270 reach_271 register-trigger_272)"
"(let-values(((v_273)"
"(if(binding-reach-scopes? binding_269)((binding-reach-scopes-ref binding_269) binding_269) #f)))"
"(if v_273"
"(let-values()"
"(if(subset? scopes_268 reachable-scopes_270)"
"(let-values()(reach_271 v_273))"
"(let-values()"
"(let-values(((ht_274) scopes_268))"
"(begin"
"(if((lambda(ht_275)(if(hash? ht_275)(immutable? ht_275) #f)) ht_274)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_274)))"
"((letrec-values(((for-loop_276)"
"(lambda(fold-var_277 i_278)"
"(if i_278"
"(let-values(((sc_279)(unsafe-immutable-hash-iterate-key ht_274 i_278)))"
"(if #t"
"(let-values(((fold-var_280)"
"(let-values(((fold-var_281) fold-var_277))"
"(if(set-member? reachable-scopes_270 sc_279)"
" fold-var_281"
"(let-values(((fold-var_282) fold-var_281))"
"(let-values(((fold-var_283)"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_272 sc_279 v_273))"
"(void)))))"
"(values fold-var_283)))))))"
"(if #t"
"(for-loop_276"
" fold-var_280"
"(unsafe-immutable-hash-iterate-next ht_274 i_278))"
" fold-var_280))"
" fold-var_277))"
" fold-var_277))))"
" for-loop_276)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_274)))))))"
"(void)))))"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(syntax-map"
" d_2"
"(lambda(tail?_3 x_4) x_4)"
"(lambda(sub-s_5 d_6)"
"(if(tamper-tainted?(syntax-tamper sub-s_5))"
"(let-values() sub-s_5)"
"(let-values()"
"(let-values(((the-struct_7) sub-s_5))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((tamper6_8)(tamper-tainted-for-content(syntax-content sub-s_5))))"
"(syntax1.1"
"(syntax-content the-struct_7)"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
"(syntax-inspector the-struct_7)"
" tamper6_8))"
"               (raise-argument-error 'struct-copy \"syntax?\" the-struct_7))))))"
" #f)))"
"(define-values(syntax-tainted?$1)(lambda(s_9)(tamper-tainted?(syntax-tamper s_9))))"
"(define-values(syntax-clean?)(lambda(s_10)(tamper-clean?(syntax-tamper s_10))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_11 insp_12)"
"(let-values(((t_13)(syntax-tamper s_11)))"
"(if(tamper-tainted? t_13)"
"(let-values() s_11)"
"(if(if t_13"
"(let-values(((or-part_14)(set-member? t_13 insp_12)))"
"(if or-part_14"
" or-part_14"
"(let-values(((ht_15) t_13))"
"(begin"
"(if((lambda(ht_16)(if(hash? ht_16)(immutable? ht_16) #f)) ht_15)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(result_18 i_19)"
"(if i_19"
"(let-values(((already-insp_20)"
"(unsafe-immutable-hash-iterate-key ht_15 i_19)))"
"(if #t"
"(let-values(((result_21)"
"(let-values(((result_22) result_18))"
"(let-values(((result_23)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_20"
" insp_12)))))"
"(values result_23)))))"
"(if(if #t(not((lambda x_24 result_21) already-insp_20)) #f)"
"(for-loop_17"
" result_21"
"(unsafe-immutable-hash-iterate-next ht_15 i_19))"
" result_21))"
" result_18))"
" result_18))))"
" for-loop_17)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_15))))))"
" #f)"
"(let-values() s_11)"
"(let-values()"
"(let-values(((the-struct_25) s_11))"
"(if(syntax?$1 the-struct_25)"
"(let-values(((tamper7_26)(set-add(if t_13(remove-inferior t_13 insp_12)(seteq)) insp_12)))"
"(syntax1.1"
"(syntax-content the-struct_25)"
"(syntax-scopes the-struct_25)"
"(syntax-shifted-multi-scopes the-struct_25)"
"(syntax-scope-propagations the-struct_25)"
"(syntax-mpi-shifts the-struct_25)"
"(syntax-bulk-binding-registry the-struct_25)"
"(syntax-srcloc the-struct_25)"
"(syntax-props the-struct_25)"
"(syntax-inspector the-struct_25)"
" tamper7_26))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_25)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_27 insp_28)"
"(let-values(((ht_29) t_27))"
"(begin"
"(if((lambda(ht_30)(if(hash? ht_30)(immutable? ht_30) #f)) ht_29)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_29)))"
"((letrec-values(((for-loop_31)"
"(lambda(table_32 i_33)"
"(if i_33"
"(let-values(((already-insp_34)(unsafe-immutable-hash-iterate-key ht_29 i_33)))"
"(if #t"
"(let-values(((table_35)"
"(let-values(((table_36) table_32))"
"(if(inspector-superior-or-same? insp_28 already-insp_34)"
" table_36"
"(let-values(((table_37) table_36))"
"(let-values(((table_38)"
"(let-values()"
"(let-values(((key_39 val_40)"
"(let-values()"
"(values"
"(let-values() already-insp_34)"
" #t))))"
"(hash-set table_37 key_39 val_40)))))"
"(values table_38)))))))"
"(if #t"
"(for-loop_31 table_35(unsafe-immutable-hash-iterate-next ht_29 i_33))"
" table_35))"
" table_32))"
" table_32))))"
" for-loop_31)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_29))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_41)"
"(lambda(s3_42 insp1_43 insp2_44)"
"(let-values(((s_45) s3_42))"
"(let-values(((insp_46)(if insp2_44 insp1_43 #f)))"
"(let-values()"
"(let-values(((t_47)(syntax-tamper s_45)))"
"(if(not(tamper-armed? t_47))"
"(let-values() s_45)"
"(if(not insp_46)"
"(let-values()"
"(let-values(((the-struct_48) s_45))"
"(if(syntax?$1 the-struct_48)"
"(let-values(((tamper8_49) #f))"
"(syntax1.1"
"(syntax-content the-struct_48)"
"(syntax-scopes the-struct_48)"
"(syntax-shifted-multi-scopes the-struct_48)"
"(syntax-scope-propagations the-struct_48)"
"(syntax-mpi-shifts the-struct_48)"
"(syntax-bulk-binding-registry the-struct_48)"
"(syntax-srcloc the-struct_48)"
"(syntax-props the-struct_48)"
"(syntax-inspector the-struct_48)"
" tamper8_49))"
"                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_48))))"
"(let-values()"
"(let-values(((new-t_50)(remove-inferior t_47 insp_46)))"
"(let-values(((the-struct_51) s_45))"
"(if(syntax?$1 the-struct_51)"
"(let-values(((tamper9_52)(if(not(set-empty? new-t_50)) new-t_50 #f)))"
"(syntax1.1"
"(syntax-content the-struct_51)"
"(syntax-scopes the-struct_51)"
"(syntax-shifted-multi-scopes the-struct_51)"
"(syntax-scope-propagations the-struct_51)"
"(syntax-mpi-shifts the-struct_51)"
"(syntax-bulk-binding-registry the-struct_51)"
"(syntax-srcloc the-struct_51)"
"(syntax-props the-struct_51)"
"(syntax-inspector the-struct_51)"
" tamper9_52))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_51))))))))))))))"
"(case-lambda((s_53)(syntax-disarm4_41 s_53 #f #f))((s_54 insp1_55)(syntax-disarm4_41 s_54 insp1_55 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_56 from-s_57)"
"(let-values(((t_58)(syntax-tamper s_56)))"
"(if(tamper-tainted? t_58)"
"(let-values() s_56)"
"(let-values()"
"(let-values(((from-t_59)(syntax-tamper from-s_57)))"
"(if(tamper-clean? from-t_59)"
"(let-values() s_56)"
"(if(tamper-tainted? from-t_59)"
"(let-values()"
"(let-values(((the-struct_60) s_56))"
"(if(syntax?$1 the-struct_60)"
"(let-values(((tamper10_61)(tamper-tainted-for-content(syntax-content s_56))))"
"(syntax1.1"
"(syntax-content the-struct_60)"
"(syntax-scopes the-struct_60)"
"(syntax-shifted-multi-scopes the-struct_60)"
"(syntax-scope-propagations the-struct_60)"
"(syntax-mpi-shifts the-struct_60)"
"(syntax-bulk-binding-registry the-struct_60)"
"(syntax-srcloc the-struct_60)"
"(syntax-props the-struct_60)"
"(syntax-inspector the-struct_60)"
" tamper10_61))"
"                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_60))))"
"(if(tamper-clean? t_58)"
"(let-values()"
"(let-values(((the-struct_62) s_56))"
"(if(syntax?$1 the-struct_62)"
"(let-values(((tamper11_63) from-t_59))"
"(syntax1.1"
"(syntax-content the-struct_62)"
"(syntax-scopes the-struct_62)"
"(syntax-shifted-multi-scopes the-struct_62)"
"(syntax-scope-propagations the-struct_62)"
"(syntax-mpi-shifts the-struct_62)"
"(syntax-bulk-binding-registry the-struct_62)"
"(syntax-srcloc the-struct_62)"
"(syntax-props the-struct_62)"
"(syntax-inspector the-struct_62)"
" tamper11_63))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_62))))"
"(let-values()"
"(let-values(((the-struct_64) s_56))"
"(if(syntax?$1 the-struct_64)"
"(let-values(((tamper12_65)"
"(let-values(((ht_66) from-t_59))"
"(begin"
"(if((lambda(ht_67)(if(hash? ht_67)(immutable? ht_67) #f)) ht_66)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(t_69 i_70)"
"(if i_70"
"(let-values(((from-i_71)"
"(unsafe-immutable-hash-iterate-key"
" ht_66"
" i_70)))"
"(if #t"
"(let-values(((t_72)"
"(let-values(((t_73) t_69))"
"(let-values(((t_74)"
"(let-values()"
"(if(set-member?"
" t_73"
" from-i_71)"
"(let-values()"
" t_73)"
"(if(any-superior?"
" t_73"
" from-i_71)"
"(let-values()"
" t_73)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_73"
" from-i_71)"
" from-i_71))))))))"
"(values t_74)))))"
"(if #t"
"(for-loop_68"
" t_72"
"(unsafe-immutable-hash-iterate-next"
" ht_66"
" i_70))"
" t_72))"
" t_69))"
" t_69))))"
" for-loop_68)"
" t_58"
"(unsafe-immutable-hash-iterate-first ht_66))))))"
"(syntax1.1"
"(syntax-content the-struct_64)"
"(syntax-scopes the-struct_64)"
"(syntax-shifted-multi-scopes the-struct_64)"
"(syntax-scope-propagations the-struct_64)"
"(syntax-mpi-shifts the-struct_64)"
"(syntax-bulk-binding-registry the-struct_64)"
"(syntax-srcloc the-struct_64)"
"(syntax-props the-struct_64)"
"(syntax-inspector the-struct_64)"
" tamper12_65))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_64)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_75)"
"(if(tamper-tainted?(syntax-tamper s_75))"
" s_75"
"(let-values(((the-struct_76) s_75))"
"(if(syntax?$1 the-struct_76)"
"(let-values(((tamper13_77)(tamper-tainted-for-content(syntax-content s_75))))"
"(syntax1.1"
"(syntax-content the-struct_76)"
"(syntax-scopes the-struct_76)"
"(syntax-shifted-multi-scopes the-struct_76)"
"(syntax-scope-propagations the-struct_76)"
"(syntax-mpi-shifts the-struct_76)"
"(syntax-bulk-binding-registry the-struct_76)"
"(syntax-srcloc the-struct_76)"
"(syntax-props the-struct_76)"
"(syntax-inspector the-struct_76)"
" tamper13_77))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_76))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_78 from-i_79)"
"(let-values(((ht_80) t_78))"
"(begin"
"(if((lambda(ht_81)(if(hash? ht_81)(immutable? ht_81) #f)) ht_80)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_80)))"
"((letrec-values(((for-loop_82)"
"(lambda(result_83 i_84)"
"(if i_84"
"(let-values(((i_85)(unsafe-immutable-hash-iterate-key ht_80 i_84)))"
"(if #t"
"(let-values(((result_86)"
"(let-values(((result_87) result_83))"
"(let-values(((result_88)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_85 from-i_79)))))"
"(values result_88)))))"
"(if(if #t(not((lambda x_89 result_86) i_85)) #f)"
"(for-loop_82 result_86(unsafe-immutable-hash-iterate-next ht_80 i_84))"
" result_86))"
" result_83))"
" result_83))))"
" for-loop_82)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_80))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_90 i_91)"
"(let-values(((or-part_92)(eq? sup-i_90 i_91)))(if or-part_92 or-part_92(inspector-superior? sup-i_90 i_91)))))"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_22)(if(fallback? smss_22)(car(fallback-search-list smss_22)) smss_22)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_23)"
"(let-values(((l_24)(cdr(fallback-search-list smss_23))))(if(null?(cdr l_24))(car l_24)(fallback1.1 l_24)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_25 smss/maybe-fallback_26)"
"(fallback1.1"
"(cons"
" smss_25"
"(if(fallback? smss/maybe-fallback_26)"
"(fallback-search-list smss/maybe-fallback_26)"
"(list smss/maybe-fallback_26))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_27 f_28)"
"(if(fallback? smss_27)"
"(let-values(((l_29)(fallback-search-list smss_27)))(fallback1.1(cons(f_28(car l_29))(cdr l_29))))"
"(f_28 smss_27))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_30 f_31)"
"(if(fallback? smss_30)"
"(fallback1.1"
"(alt-reverse"
"(let-values(((lst_32)(fallback-search-list smss_30)))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((smss_36)(unsafe-car lst_35)))"
"(if #t"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38) fold-var_34))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()(f_31 smss_36))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(if #t(for-loop_33 fold-var_37(unsafe-cdr lst_35)) fold-var_37))"
" fold-var_34))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32)))))"
"(f_31 smss_30))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_40)(if(fallback? smss_40)(fallback-search-list smss_40)(list smss_40))))"
"(define-values(cache)(make-weak-box #f))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_1)(let-values(((c_2)(weak-box-value cache)))(if c_2(let-values()(hash-remove! c_2 sym_1))(void))))"
"(()(set! cache(make-weak-box(make-hasheq))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scopes entry-phase entry-binding)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()(make-struct-type 'entry #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'entry))))"
"(values"
" struct:_3"
" make-_4"
" ?_5"
"(make-struct-field-accessor -ref_6 0 'scopes)"
"(make-struct-field-accessor -ref_6 1 'phase)"
"(make-struct-field-accessor -ref_6 2 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_34 phase_35 scopes_36)"
"(let-values(((c_37)(weak-box-value cache)))"
"(if c_37"
"(let-values(((v_38)(hash-ref c_37 sym_34 #f)))"
"(if v_38"
"(if(eqv? phase_35(entry-phase v_38))"
"(if(set=? scopes_36(entry-scopes v_38))(entry-binding v_38) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_39 phase_40 scopes_41 b_42)"
"(let-values(((c_43)(weak-box-value cache)))"
"(if(not c_43)"
"(let-values()(begin(clear-resolve-cache!)(resolve-cache-set! sym_39 phase_40 scopes_41 b_42)))"
"(let-values()(hash-set! c_43 sym_39(entry1.1 scopes_41 phase_40 b_42)))))))"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_32 reachable-scopes_33 reach_34 register-trigger_35)"
"(binding-table-register-reachable"
"(scope-binding-table s_32)"
" reachable-scopes_33"
" reach_34"
" register-trigger_35)))"
"(cons prop:reach-scopes(lambda(s_36 reach_37)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_38 ser_39 state_40)"
"(if(binding-table-empty?(scope-binding-table s_38))"
" #f"
"(list"
" 'deserialize-scope-fill!"
"(ser_39(binding-table-prune-to-reachable(scope-binding-table s_38) state_40))))))"
"(cons"
" prop:serialize"
"(lambda(s_41 ser_42 state_43)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_43) s_41)"
"(void)"
"                           (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_41 top-level-common-scope)"
" '(deserialize-scope)"
"(list* 'deserialize-scope(scope-kind s_41))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_44 port_45 mode_46)"
"(begin"
"                         (write-string \"#<scope:\" port_45)"
"(display(scope-id sc_44) port_45)"
"                         (write-string \":\" port_45)"
"(display(scope-kind sc_44) port_45)"
"                         (write-string \">\" port_45)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'id)"
"(make-struct-field-accessor -ref_4 1 'kind)"
"(make-struct-field-accessor -ref_4 2 'binding-table)"
"(make-struct-field-mutator -set!_5 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_47)(scope1.1(new-deserialize-scope-id!) kind_47 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_48 bt_49)(set-scope-binding-table! s_48 bt_49)))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_50 make-_51 ?_52 -ref_53 -set!_54)"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_91 reach_92)(reach_92(multi-scope-scopes ms_91))))"
"(cons"
" prop:serialize"
"(lambda(ms_93 ser_94 state_95)"
"(list"
" 'deserialize-multi-scope"
"(ser_94(multi-scope-name ms_93))"
"(ser_94(multi-scope-scopes ms_93))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope))))"
"(values"
" struct:_50"
" make-_51"
" ?_52"
"(make-struct-field-accessor -ref_53 0 'id)"
"(make-struct-field-accessor -ref_53 1 'name)"
"(make-struct-field-accessor -ref_53 2 'scopes)"
"(make-struct-field-accessor -ref_53 3 'shifted)"
"(make-struct-field-accessor -ref_53 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_96 scopes_97)"
"(multi-scope2.1(new-deserialize-scope-id!) name_96 scopes_97(make-hasheqv)(make-hash))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_98 make-_99 ?_100 -ref_101 -set!_102)"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_124 reach_125)(reach_125(representative-scope-owner s_124))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_126 ser_127 state_128)"
"(list"
" 'deserialize-representative-scope-fill!"
"(ser_127(binding-table-prune-to-reachable(scope-binding-table s_126) state_128))"
"(ser_127(representative-scope-owner s_126)))))"
"(cons"
" prop:serialize"
"(lambda(s_129 ser_130 state_131)"
"(list"
" 'deserialize-representative-scope"
"(ser_130(scope-kind s_129))"
"(ser_130(representative-scope-phase s_129)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_132 port_133 mode_134)"
"(begin"
"                         (write-string \"#<scope:\" port_133)"
"(display(scope-id sc_132) port_133)"
"(if(representative-scope-owner sc_132)"
"(let-values()"
"(begin"
"                               (write-string \"=\" port_133)"
"(display(multi-scope-id(representative-scope-owner sc_132)) port_133)))"
"(void))"
"                         (write-string \"@\" port_133)"
"(display(representative-scope-phase sc_132) port_133)"
"                         (write-string \">\" port_133)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope))))"
"(values"
" struct:_98"
" make-_99"
" ?_100"
"(make-struct-field-accessor -ref_101 0 'owner)"
"(make-struct-field-accessor -ref_101 1 'phase)"
"(make-struct-field-mutator -set!_102 0 'owner)"
"(make-struct-field-mutator -set!_102 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_135 phase_136)(representative-scope3.1(new-deserialize-scope-id!) kind_135 #f #f phase_136)))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_137 bt_138 owner_139)"
"(begin(deserialize-scope-fill! s_137 bt_138)(set-representative-scope-owner! s_137 owner_139))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_140 make-_141 ?_142 -ref_143 -set!_144)"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_166 reach_167)(reach_167(shifted-multi-scope-multi-scope sms_166))))"
"(cons"
" prop:serialize"
"(lambda(sms_168 ser_169 state_170)"
"(list"
" 'deserialize-shifted-multi-scope"
"(ser_169(shifted-multi-scope-phase sms_168))"
"(ser_169(shifted-multi-scope-multi-scope sms_168)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_171 port_172 mode_173)"
"(begin"
"                         (write-string \"#<scope:\" port_172)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_171)) port_172)"
"                         (write-string \"@\" port_172)"
"(display(shifted-multi-scope-phase sms_171) port_172)"
"                         (write-string \">\" port_172)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope))))"
"(values"
" struct:_140"
" make-_141"
" ?_142"
"(make-struct-field-accessor -ref_143 0 'phase)"
"(make-struct-field-accessor -ref_143 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_174 multi-scope_175)(intern-shifted-multi-scope phase_174 multi-scope_175)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_176 multi-scope_177)"
"(if(phase? phase_176)"
"(let-values()"
"(let-values(((or-part_178)(hash-ref(multi-scope-shifted multi-scope_177) phase_176 #f)))"
"(if or-part_178"
" or-part_178"
"(let-values(((sms_179)(shifted-multi-scope4.1 phase_176 multi-scope_177)))"
"(begin(hash-set!(multi-scope-shifted multi-scope_177) phase_176 sms_179) sms_179)))))"
"(let-values()"
"(let-values(((or-part_180)(hash-ref(multi-scope-label-shifted multi-scope_177) phase_176 #f)))"
"(if or-part_180"
" or-part_180"
"(let-values(((sms_181)(shifted-multi-scope4.1 phase_176 multi-scope_177)))"
"(begin(hash-set!(multi-scope-label-shifted multi-scope_177) phase_176 sms_181) sms_181))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_182 make-_183 ?_184 -ref_185 -set!_186)"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase))))"
"(values struct:_182 make-_183 ?_184(make-struct-field-accessor -ref_185 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_203)(scope1.1(new-scope-id!) kind_203 empty-binding-table)))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_204)"
"(lambda(name6_205 name7_206)"
"(let-values(((name_207)(if name7_206 name6_205 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_207(make-hasheqv)(make-hasheqv)(make-hash))))))))"
"(case-lambda(()(new-multi-scope8_204 #f #f))((name6_208)(new-multi-scope8_204 name6_208 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_209 phase_210)"
"(let-values(((or-part_211)(hash-ref(multi-scope-scopes ms_209) phase_210 #f)))"
"(if or-part_211"
" or-part_211"
"(let-values(((s_212)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_209 phase_210)))"
"(begin(hash-set!(multi-scope-scopes ms_209) phase_210 s_212) s_212))))))"
"(define-values(scope>?)(lambda(sc1_213 sc2_214)(>(scope-id sc1_213)(scope-id sc2_214))))"
"(define-values"
"(apply-scope)"
"(lambda(s_215 sc_216 op_217 prop-op_218)"
"(if(shifted-multi-scope? sc_216)"
"(let-values(((the-struct_219) s_215))"
"(if(syntax?$1 the-struct_219)"
"(let-values(((shifted-multi-scopes32_220)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_215)"
"(lambda(smss_222)(op_217(fallback-first smss_222) sc_216))))"
"((scope-propagations33_221)"
"(if(datum-has-elements?(syntax-content s_215))"
"(prop-op_218"
"(syntax-scope-propagations s_215)"
" sc_216"
"(syntax-scopes s_215)"
"(syntax-shifted-multi-scopes s_215))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_219)"
"(syntax-scopes the-struct_219)"
" shifted-multi-scopes32_220"
" scope-propagations33_221"
"(syntax-mpi-shifts the-struct_219)"
"(syntax-bulk-binding-registry the-struct_219)"
"(syntax-srcloc the-struct_219)"
"(syntax-props the-struct_219)"
"(syntax-inspector the-struct_219)"
"(syntax-tamper the-struct_219)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_219)))"
"(let-values(((the-struct_223) s_215))"
"(if(syntax?$1 the-struct_223)"
"(let-values(((scopes34_224)(op_217(syntax-scopes s_215) sc_216))"
"((scope-propagations35_225)"
"(if(datum-has-elements?(syntax-content s_215))"
"(prop-op_218"
"(syntax-scope-propagations s_215)"
" sc_216"
"(syntax-scopes s_215)"
"(syntax-shifted-multi-scopes s_215))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_223)"
" scopes34_224"
"(syntax-shifted-multi-scopes the-struct_223)"
" scope-propagations35_225"
"(syntax-mpi-shifts the-struct_223)"
"(syntax-bulk-binding-registry the-struct_223)"
"(syntax-srcloc the-struct_223)"
"(syntax-props the-struct_223)"
"(syntax-inspector the-struct_223)"
"(syntax-tamper the-struct_223)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_223))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_226)"
"(let-values((()(begin(propagate-taint! s_226)(values))))"
"(let-values(((prop_227)(syntax-scope-propagations s_226)))"
"(if prop_227"
"(let-values(((new-content_228)"
"(syntax-map"
"(syntax-content s_226)"
"(lambda(tail?_229 x_230) x_230)"
"(lambda(sub-s_231 d_232)"
"(let-values(((the-struct_233) sub-s_231))"
"(if(syntax?$1 the-struct_233)"
"(let-values(((scopes36_234)"
"(propagation-apply prop_227(syntax-scopes sub-s_231) s_226))"
"((shifted-multi-scopes37_235)"
"(propagation-apply-shifted"
" prop_227"
"(syntax-shifted-multi-scopes sub-s_231)"
" s_226))"
"((scope-propagations38_236)"
"(propagation-merge"
" prop_227"
"(syntax-scope-propagations sub-s_231)"
"(syntax-scopes sub-s_231)"
"(syntax-shifted-multi-scopes sub-s_231))))"
"(syntax1.1"
"(syntax-content the-struct_233)"
" scopes36_234"
" shifted-multi-scopes37_235"
" scope-propagations38_236"
"(syntax-mpi-shifts the-struct_233)"
"(syntax-bulk-binding-registry the-struct_233)"
"(syntax-srcloc the-struct_233)"
"(syntax-props the-struct_233)"
"(syntax-inspector the-struct_233)"
"(syntax-tamper the-struct_233)))"
"                               (raise-argument-error 'struct-copy \"syntax?\" the-struct_233))))"
" #f)))"
"(begin"
"(set-syntax-content! s_226 new-content_228)"
"(set-syntax-scope-propagations! s_226 #f)"
" new-content_228))"
"(syntax-content s_226))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_237)"
"(let-values(((content_238)(syntax-e/no-taint s_237)))"
"(if(not(tamper-armed?(syntax-tamper s_237)))"
"(let-values() content_238)"
"(if(datum-has-elements? content_238)"
"(let-values()(taint-content content_238))"
"(let-values() content_238))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_239)"
"(if(representative-scope? sc_239)"
"(intern-shifted-multi-scope(representative-scope-phase sc_239)(representative-scope-owner sc_239))"
" sc_239)))"
"(define-values"
"(add-scope)"
"(lambda(s_240 sc_241)(apply-scope s_240(generalize-scope sc_241) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_242 scs_243)"
"(let-values(((lst_244) scs_243))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(s_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((sc_248)(unsafe-car lst_247)))"
"(if #t"
"(let-values(((s_249)"
"(let-values(((s_250) s_246))"
"(let-values(((s_251)(let-values()(add-scope s_250 sc_248))))"
"(values s_251)))))"
"(if #t(for-loop_245 s_249(unsafe-cdr lst_247)) s_249))"
" s_246))"
" s_246))))"
" for-loop_245)"
" s_242"
" lst_244)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_252 sc_253)(apply-scope s_252(generalize-scope sc_253) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_254 scs_255)"
"(let-values(((lst_256) scs_255))"
"(begin"
"(if(list? lst_256)(void)(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(s_258 lst_259)"
"(if(pair? lst_259)"
"(let-values(((sc_260)(unsafe-car lst_259)))"
"(if #t"
"(let-values(((s_261)"
"(let-values(((s_262) s_258))"
"(let-values(((s_263)(let-values()(remove-scope s_262 sc_260))))"
"(values s_263)))))"
"(if #t(for-loop_257 s_261(unsafe-cdr lst_259)) s_261))"
" s_258))"
" s_258))))"
" for-loop_257)"
" s_254"
" lst_256)))))"
"(define-values"
"(set-flip)"
"(lambda(s_264 e_265)(if(set-member? s_264 e_265)(set-remove s_264 e_265)(set-add s_264 e_265))))"
"(define-values"
"(flip-scope)"
"(lambda(s_266 sc_267)(apply-scope s_266(generalize-scope sc_267) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_268 scs_269)"
"(let-values(((lst_270) scs_269))"
"(begin"
"(if(list? lst_270)(void)(let-values()(in-list lst_270)))"
"((letrec-values(((for-loop_271)"
"(lambda(s_272 lst_273)"
"(if(pair? lst_273)"
"(let-values(((sc_274)(unsafe-car lst_273)))"
"(if #t"
"(let-values(((s_275)"
"(let-values(((s_276) s_272))"
"(let-values(((s_277)(let-values()(flip-scope s_276 sc_274))))"
"(values s_277)))))"
"(if #t(for-loop_271 s_275(unsafe-cdr lst_273)) s_275))"
" s_272))"
" s_272))))"
" for-loop_271)"
" s_268"
" lst_270)))))"
"(define-values"
"(push-scope)"
"(lambda(s_278 sms_279)"
"(let-values(((smss/maybe-fallbacks39_280) #f))"
"(let-values(((prev-result_281) #f))"
"(let-values(((push_282)"
"(lambda(smss/maybe-fallbacks_283)"
"(if(eq? smss/maybe-fallbacks39_280 smss/maybe-fallbacks_283)"
"(let-values() prev-result_281)"
"(let-values()"
"(let-values(((r_284)"
"(let-values()"
"(let-values(((smss_285)(fallback-first smss/maybe-fallbacks_283)))"
"(if(set-empty? smss_285)"
"(let-values()(set-add smss_285 sms_279))"
"(if(set-member? smss_285 sms_279)"
"(let-values() smss/maybe-fallbacks_283)"
"(let-values()"
"(fallback-push"
"(set-add smss_285 sms_279)"
" smss/maybe-fallbacks_283))))))))"
"(begin"
"(set! smss/maybe-fallbacks39_280 smss/maybe-fallbacks_283)"
"(set! prev-result_281 r_284)"
" r_284)))))))"
"(syntax-map"
" s_278"
"(lambda(tail?_286 x_287) x_287)"
"(lambda(s_288 d_289)"
"(let-values(((the-struct_290) s_288))"
"(if(syntax?$1 the-struct_290)"
"(let-values(((content40_291) d_289)"
"((shifted-multi-scopes41_292)(push_282(syntax-shifted-multi-scopes s_288))))"
"(syntax1.1"
" content40_291"
"(syntax-scopes the-struct_290)"
" shifted-multi-scopes41_292"
"(syntax-scope-propagations the-struct_290)"
"(syntax-mpi-shifts the-struct_290)"
"(syntax-bulk-binding-registry the-struct_290)"
"(syntax-srcloc the-struct_290)"
"(syntax-props the-struct_290)"
"(syntax-inspector the-struct_290)"
"(syntax-tamper the-struct_290)))"
"                 (raise-argument-error 'struct-copy \"syntax?\" the-struct_290))))"
" syntax-e/no-taint))))))"
"(define-values"
"(struct:propagation propagation10.1 propagation? propagation-prev-scs propagation-prev-smss propagation-scope-ops)"
"(let-values(((struct:_293 make-_294 ?_295 -ref_296 -set!_297)"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'propagation))))"
"(values"
" struct:_293"
" make-_294"
" ?_295"
"(make-struct-field-accessor -ref_296 0 'prev-scs)"
"(make-struct-field-accessor -ref_296 1 'prev-smss)"
"(make-struct-field-accessor -ref_296 2 'scope-ops))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_324 sc_325 prev-scs_326 prev-smss_327)"
"(if prop_324"
"(let-values(((the-struct_328) prop_324))"
"(if(propagation? the-struct_328)"
"(let-values(((scope-ops44_329)(hash-set(propagation-scope-ops prop_324) sc_325 'add)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_328)"
"(propagation-prev-smss the-struct_328)"
" scope-ops44_329))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_328)))"
"(propagation10.1 prev-scs_326 prev-smss_327(hasheq sc_325 'add)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_330 sc_331 prev-scs_332 prev-smss_333)"
"(if prop_330"
"(let-values(((the-struct_334) prop_330))"
"(if(propagation? the-struct_334)"
"(let-values(((scope-ops45_335)(hash-set(propagation-scope-ops prop_330) sc_331 'remove)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_334)"
"(propagation-prev-smss the-struct_334)"
" scope-ops45_335))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_334)))"
"(propagation10.1 prev-scs_332 prev-smss_333(hasheq sc_331 'remove)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_336 sc_337 prev-scs_338 prev-smss_339)"
"(if prop_336"
"(let-values(((ops_340)(propagation-scope-ops prop_336)))"
"(let-values(((current-op_341)(hash-ref ops_340 sc_337 #f)))"
"(if(if(eq? current-op_341 'flip)(= 1(hash-count ops_340)) #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_342) prop_336))"
"(if(propagation? the-struct_342)"
"(let-values(((scope-ops46_343)"
"(if(eq? current-op_341 'flip)"
"(hash-remove ops_340 sc_337)"
"(hash-set"
" ops_340"
" sc_337"
"(let-values(((tmp_344) current-op_341))"
"(if(equal? tmp_344 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_344 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_342)"
"(propagation-prev-smss the-struct_342)"
" scope-ops46_343))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_342)))))))"
"(propagation10.1 prev-scs_338 prev-smss_339(hasheq sc_337 'flip)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_345 scs_346 parent-s_347)"
"(if(not prop_345)"
"(let-values() scs_346)"
"(if(eq?(propagation-prev-scs prop_345) scs_346)"
"(let-values()(syntax-scopes parent-s_347))"
"(let-values()"
"(let-values(((ht_348)(propagation-scope-ops prop_345)))"
"(begin"
"(if((lambda(ht_349)(if(hash? ht_349)(immutable? ht_349) #f)) ht_348)"
"(void)"
"(let-values()(default-in-immutable-hash ht_348)))"
"((letrec-values(((for-loop_350)"
"(lambda(scs_351 i_352)"
"(if i_352"
"(let-values(((sc_353 op_354)"
"(unsafe-immutable-hash-iterate-key+value ht_348 i_352)))"
"(if #t"
"(let-values(((scs_355)"
"(let-values(((scs_356) scs_351))"
"(if(not(shifted-multi-scope? sc_353))"
"(let-values(((scs_357) scs_356))"
"(let-values(((scs_358)"
"(let-values()"
"(let-values(((tmp_359) op_354))"
"(if(equal? tmp_359 'add)"
"(let-values()(set-add scs_357 sc_353))"
"(if(equal? tmp_359 'remove)"
"(let-values()"
"(set-remove scs_357 sc_353))"
"(let-values()"
"(set-flip scs_357 sc_353))))))))"
"(values scs_358)))"
" scs_356))))"
"(if #t"
"(for-loop_350 scs_355(unsafe-immutable-hash-iterate-next ht_348 i_352))"
" scs_355))"
" scs_351))"
" scs_351))))"
" for-loop_350)"
" scs_346"
"(unsafe-immutable-hash-iterate-first ht_348)))))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_360 smss_361 parent-s_362)"
"(if(not prop_360)"
"(let-values() smss_361)"
"(if(eq?(propagation-prev-smss prop_360) smss_361)"
"(let-values()(syntax-shifted-multi-scopes parent-s_362))"
"(let-values()"
"(let-values(((ht_363)(propagation-scope-ops prop_360)))"
"(begin"
"(if((lambda(ht_364)(if(hash? ht_364)(immutable? ht_364) #f)) ht_363)"
"(void)"
"(let-values()(default-in-immutable-hash ht_363)))"
"((letrec-values(((for-loop_365)"
"(lambda(smss_366 i_367)"
"(if i_367"
"(let-values(((sms_368 op_369)"
"(unsafe-immutable-hash-iterate-key+value ht_363 i_367)))"
"(if #t"
"(let-values(((smss_370)"
"(let-values(((smss_371) smss_366))"
"(if(shifted-multi-scope? sms_368)"
"(let-values(((smss_372) smss_371))"
"(let-values(((smss_373)"
"(let-values()"
"(fallback-update-first"
" smss_372"
"(lambda(smss_374)"
"(let-values(((tmp_375) op_369))"
"(if(equal? tmp_375 'add)"
"(let-values()"
"(set-add smss_374 sms_368))"
"(if(equal? tmp_375 'remove)"
"(let-values()"
"(set-remove smss_374 sms_368))"
"(let-values()"
"(set-flip"
" smss_374"
" sms_368))))))))))"
"(values smss_373)))"
" smss_371))))"
"(if #t"
"(for-loop_365 smss_370(unsafe-immutable-hash-iterate-next ht_363 i_367))"
" smss_370))"
" smss_366))"
" smss_366))))"
" for-loop_365)"
" smss_361"
"(unsafe-immutable-hash-iterate-first ht_363)))))))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_376 base-prop_377 prev-scs_378 prev-smss_379)"
"(if(not prop_376)"
"(let-values() base-prop_377)"
"(if(not base-prop_377)"
"(let-values()(propagation10.1 prev-scs_378 prev-smss_379(propagation-scope-ops prop_376)))"
"(let-values()"
"(let-values(((new-ops_380)"
"(let-values(((ht_381)(propagation-scope-ops prop_376)))"
"(begin"
"(if((lambda(ht_382)(if(hash? ht_382)(immutable? ht_382) #f)) ht_381)"
"(void)"
"(let-values()(default-in-immutable-hash ht_381)))"
"((letrec-values(((for-loop_383)"
"(lambda(ops_384 i_385)"
"(if i_385"
"(let-values(((sc_386 op_387)"
"(unsafe-immutable-hash-iterate-key+value ht_381 i_385)))"
"(if #t"
"(let-values(((ops_388)"
"(let-values(((ops_389) ops_384))"
"(let-values(((ops_390)"
"(let-values()"
"(let-values(((tmp_391) op_387))"
"(if(equal? tmp_391 'add)"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'add))"
"(if(equal? tmp_391 'remove)"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'remove))"
"(let-values()"
"(let-values(((current-op_392)"
"(hash-ref"
" ops_389"
" sc_386"
" #f)))"
"(let-values(((tmp_393)"
" current-op_392))"
"(if(equal?"
" tmp_393"
" 'add)"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'remove))"
"(if(equal?"
" tmp_393"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'add))"
"(if(equal?"
" tmp_393"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_389"
" sc_386))"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'flip))))))))))))))"
"(values ops_390)))))"
"(if #t"
"(for-loop_383"
" ops_388"
"(unsafe-immutable-hash-iterate-next ht_381 i_385))"
" ops_388))"
" ops_384))"
" ops_384))))"
" for-loop_383)"
"(propagation-scope-ops base-prop_377)"
"(unsafe-immutable-hash-iterate-first ht_381))))))"
"(if(zero?(hash-count new-ops_380))"
" #f"
"(let-values(((the-struct_394) base-prop_377))"
"(if(propagation? the-struct_394)"
"(let-values(((scope-ops47_395) new-ops_380))"
"(propagation10.1"
"(propagation-prev-scs the-struct_394)"
"(propagation-prev-smss the-struct_394)"
" scope-ops47_395))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_394))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_396 delta_397)"
"(if(zero-phase? delta_397)"
"(let-values() sms_396)"
"(if(label-phase? delta_397)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_396))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_396)))"
"(shifted-multi-scope-multi-scope sms_396)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_396))"
"(let-values() sms_396)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_397(shifted-multi-scope-phase sms_396))"
"(shifted-multi-scope-multi-scope sms_396))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_398 phase_399)"
"(if(eqv? phase_399 0)"
" s_398"
"(let-values()"
"(let-values(((smss48_400) #f))"
"(let-values(((prev-result_401) #f))"
"(let-values(((shift-all_402)"
"(lambda(smss_403)"
"(if(eq? smss48_400 smss_403)"
"(let-values() prev-result_401)"
"(let-values()"
"(let-values(((r_404)"
"(let-values()"
"(fallback-map"
" smss_403"
"(lambda(smss_405)"
"(let-values(((ht_406) smss_405))"
"(begin"
"(if((lambda(ht_407)(if(hash? ht_407)(immutable? ht_407) #f))"
" ht_406)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_406)))"
"((letrec-values(((for-loop_408)"
"(lambda(table_409 i_410)"
"(if i_410"
"(let-values(((sms_411)"
"(unsafe-immutable-hash-iterate-key"
" ht_406"
" i_410)))"
"(if #t"
"(let-values(((table_412)"
"(let-values(((new-sms_413)"
"(shift-multi-scope"
" sms_411"
" phase_399)))"
"(begin"
" #t"
"((letrec-values(((for-loop_414)"
"(lambda(table_415)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_416)"
"(let-values(((table_417)"
" table_415))"
"(if new-sms_413"
"(let-values(((table_418)"
" table_417))"
"(let-values(((table_419)"
"(let-values()"
"(let-values(((key_420"
" val_421)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_413)"
" #t))))"
"(hash-set"
" table_418"
" key_420"
" val_421)))))"
"(values"
" table_419)))"
" table_417))))"
"(if #f"
"(for-loop_414"
" table_416)"
" table_416))"
" table_415))"
" table_415))))"
" for-loop_414)"
" table_409)))))"
"(if #t"
"(for-loop_408"
" table_412"
"(unsafe-immutable-hash-iterate-next"
" ht_406"
" i_410))"
" table_412))"
" table_409))"
" table_409))))"
" for-loop_408)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_406)))))))))"
"(begin(set! smss48_400 smss_403)(set! prev-result_401 r_404) r_404)))))))"
"(syntax-map"
" s_398"
"(lambda(tail?_422 d_423) d_423)"
"(lambda(s_424 d_425)"
"(let-values(((the-struct_426) s_424))"
"(if(syntax?$1 the-struct_426)"
"(let-values(((content49_427) d_425)"
"((shifted-multi-scopes50_428)(shift-all_402(syntax-shifted-multi-scopes s_424))))"
"(syntax1.1"
" content49_427"
"(syntax-scopes the-struct_426)"
" shifted-multi-scopes50_428"
"(syntax-scope-propagations the-struct_426)"
"(syntax-mpi-shifts the-struct_426)"
"(syntax-bulk-binding-registry the-struct_426)"
"(syntax-srcloc the-struct_426)"
"(syntax-props the-struct_426)"
"(syntax-inspector the-struct_426)"
"(syntax-tamper the-struct_426)))"
"                     (raise-argument-error 'struct-copy \"syntax?\" the-struct_426))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_429 src-scopes_430 dest-scopes_431)"
"(if(equal? src-scopes_430 dest-scopes_431)"
" s_429"
"(let-values(((src-smss_432 src-scs_433)"
"(set-partition"
"(let-values(((ht_436) src-scopes_430))"
"(begin"
"(if((lambda(ht_437)(if(hash? ht_437)(immutable? ht_437) #f)) ht_436)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_436)))"
"((letrec-values(((for-loop_438)"
"(lambda(table_439 i_440)"
"(if i_440"
"(let-values(((sc_441)(unsafe-immutable-hash-iterate-key ht_436 i_440)))"
"(if #t"
"(let-values(((table_442)"
"(let-values(((table_443) table_439))"
"(let-values(((table_444)"
"(let-values()"
"(let-values(((key_445 val_446)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_441))"
" #t))))"
"(hash-set"
" table_443"
" key_445"
" val_446)))))"
"(values table_444)))))"
"(if #t"
"(for-loop_438"
" table_442"
"(unsafe-immutable-hash-iterate-next ht_436 i_440))"
" table_442))"
" table_439))"
" table_439))))"
" for-loop_438)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_436))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_434 dest-scs_435)"
"(set-partition"
"(let-values(((ht_447) dest-scopes_431))"
"(begin"
"(if((lambda(ht_448)(if(hash? ht_448)(immutable? ht_448) #f)) ht_447)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_447)))"
"((letrec-values(((for-loop_449)"
"(lambda(table_450 i_451)"
"(if i_451"
"(let-values(((sc_452)(unsafe-immutable-hash-iterate-key ht_447 i_451)))"
"(if #t"
"(let-values(((table_453)"
"(let-values(((table_454) table_450))"
"(let-values(((table_455)"
"(let-values()"
"(let-values(((key_456 val_457)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_452))"
" #t))))"
"(hash-set"
" table_454"
" key_456"
" val_457)))))"
"(values table_455)))))"
"(if #t"
"(for-loop_449"
" table_453"
"(unsafe-immutable-hash-iterate-next ht_447 i_451))"
" table_453))"
" table_450))"
" table_450))))"
" for-loop_449)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_447))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs51_458) #f))"
"(let-values(((prev-result_459) #f))"
"(let-values(((swap-scs_460)"
"(lambda(scs_464)"
"(if(eq? scs51_458 scs_464)"
"(let-values() prev-result_459)"
"(let-values()"
"(let-values(((r_465)"
"(let-values()"
"(if(subset? src-scs_433 scs_464)"
"(set-union(set-subtract scs_464 src-scs_433) dest-scs_435)"
" scs_464))))"
"(begin(set! scs51_458 scs_464)(set! prev-result_459 r_465) r_465)))))))"
"(let-values(((smss52_461) #f))"
"(let-values(((prev-result_462) #f))"
"(let-values(((swap-smss_463)"
"(lambda(smss_466)"
"(if(eq? smss52_461 smss_466)"
"(let-values() prev-result_462)"
"(let-values()"
"(let-values(((r_467)"
"(let-values()"
"(fallback-update-first"
" smss_466"
"(lambda(smss_468)"
"(if(subset? src-smss_432 smss_468)"
"(set-union"
"(set-subtract smss_468 src-smss_432)"
" dest-smss_434)"
" smss_468))))))"
"(begin(set! smss52_461 smss_466)(set! prev-result_462 r_467) r_467)))))))"
"(syntax-map"
" s_429"
"(lambda(tail?_469 d_470) d_470)"
"(lambda(s_471 d_472)"
"(let-values(((the-struct_473) s_471))"
"(if(syntax?$1 the-struct_473)"
"(let-values(((content53_474) d_472)"
"((scopes54_475)(swap-scs_460(syntax-scopes s_471)))"
"((shifted-multi-scopes55_476)"
"(swap-smss_463(syntax-shifted-multi-scopes s_471))))"
"(syntax1.1"
" content53_474"
" scopes54_475"
" shifted-multi-scopes55_476"
"(syntax-scope-propagations the-struct_473)"
"(syntax-mpi-shifts the-struct_473)"
"(syntax-bulk-binding-registry the-struct_473)"
"(syntax-srcloc the-struct_473)"
"(syntax-props the-struct_473)"
"(syntax-inspector the-struct_473)"
"(syntax-tamper the-struct_473)))"
"                           (raise-argument-error 'struct-copy \"syntax?\" the-struct_473))))"
" syntax-e/no-taint)))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_477 phase_478)"
"(scope-set-at-fallback s_477(fallback-first(syntax-shifted-multi-scopes s_477)) phase_478)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_479 smss_480 phase_481)"
"(let-values(((ht_482) smss_480))"
"(begin"
"(if((lambda(ht_483)(if(hash? ht_483)(immutable? ht_483) #f)) ht_482)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_482)))"
"((letrec-values(((for-loop_484)"
"(lambda(scopes_485 i_486)"
"(if i_486"
"(let-values(((sms_487)(unsafe-immutable-hash-iterate-key ht_482 i_486)))"
"(if #t"
"(let-values(((scopes_488)"
"(let-values(((scopes_489) scopes_485))"
"(if(let-values(((or-part_490)(label-phase? phase_481)))"
"(if or-part_490"
" or-part_490"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_487)))))"
"(let-values(((scopes_491) scopes_489))"
"(let-values(((scopes_492)"
"(let-values()"
"(set-add"
" scopes_491"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_487)"
"(let-values(((ph_493)"
"(shifted-multi-scope-phase"
" sms_487)))"
"(if(shifted-to-label-phase? ph_493)"
"(shifted-to-label-phase-from ph_493)"
"(phase- ph_493 phase_481))))))))"
"(values scopes_492)))"
" scopes_489))))"
"(if #t"
"(for-loop_484 scopes_488(unsafe-immutable-hash-iterate-next ht_482 i_486))"
" scopes_488))"
" scopes_485))"
" scopes_485))))"
" for-loop_484)"
"(syntax-scopes s_479)"
"(unsafe-immutable-hash-iterate-first ht_482))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_494)"
"(begin"
"      (if (set-empty? scopes_494) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_495) scopes_494))"
"(begin"
"(if((lambda(ht_496)(if(hash? ht_496)(immutable? ht_496) #f)) ht_495)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_495)))"
"((letrec-values(((for-loop_497)"
"(lambda(max-sc_498 i_499)"
"(if i_499"
"(let-values(((sc_500)(unsafe-immutable-hash-iterate-key ht_495 i_499)))"
"(if #t"
"(let-values(((max-sc_501)"
"(let-values(((max-sc_502) max-sc_498))"
"(let-values(((max-sc_503)"
"(let-values()"
"(if(scope>? sc_500 max-sc_502)"
" sc_500"
" max-sc_502))))"
"(values max-sc_503)))))"
"(if #t"
"(for-loop_497 max-sc_501(unsafe-immutable-hash-iterate-next ht_495 i_499))"
" max-sc_501))"
" max-sc_498))"
" max-sc_498))))"
" for-loop_497)"
"(set-first scopes_494)"
"(unsafe-immutable-hash-iterate-first ht_495)))))))"
"(define-values"
"(add-binding-in-scopes!)"
"(lambda(scopes_504 sym_505 binding_506)"
"(let-values(((max-sc_507)(find-max-scope scopes_504)))"
"(let-values(((bt_508)(binding-table-add(scope-binding-table max-sc_507) scopes_504 sym_505 binding_506)))"
"(begin(set-scope-binding-table! max-sc_507 bt_508)(clear-resolve-cache! sym_505))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_509 bulk-binding_510)"
"(let-values(((max-sc_511)(find-max-scope scopes_509)))"
"(let-values(((bt_512)(binding-table-add-bulk(scope-binding-table max-sc_511) scopes_509 bulk-binding_510)))"
"(begin(set-scope-binding-table! max-sc_511 bt_512)(clear-resolve-cache!))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_513)"
"(let-values(((ht_514)(syntax-scopes s_513)))"
"(begin"
"(if((lambda(ht_515)(if(hash? ht_515)(immutable? ht_515) #f)) ht_514)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_514)))"
"((letrec-values(((for-loop_516)"
"(lambda(result_517 i_518)"
"(if i_518"
"(let-values(((sc_519)(unsafe-immutable-hash-iterate-key ht_514 i_518)))"
"(if #t"
"(let-values(((result_520)"
"(let-values(((result_521) result_517))"
"(let-values(((result_522)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_519) 'macro)))))"
"(values result_522)))))"
"(if(if #t(not((lambda x_523 result_520) sc_519)) #f)"
"(for-loop_516 result_520(unsafe-immutable-hash-iterate-next ht_514 i_518))"
" result_520))"
" result_517))"
" result_517))))"
" for-loop_516)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_514))))))"
"(define-values"
"(resolve19.1)"
"(lambda(ambiguous-value11_524"
" ambiguous-value14_525"
" exactly?12_526"
" exactly?15_527"
" extra-shifts13_528"
" extra-shifts16_529"
" s17_530"
" phase18_531)"
"(let-values(((s_532) s17_530))"
"(let-values(((phase_533) phase18_531))"
"(let-values(((ambiguous-value_534)(if ambiguous-value14_525 ambiguous-value11_524 #f)))"
"(let-values(((exactly?_535)(if exactly?15_527 exactly?12_526 #f)))"
"(let-values(((extra-shifts_536)(if extra-shifts16_529 extra-shifts13_528 null)))"
"(let-values()"
"(begin"
"                  (if (identifier? s_532) (void) (let-values () (raise-argument-error 'resolve \"identifier?\" s_532)))"
"                  (if (phase? phase_533) (void) (let-values () (raise-argument-error 'resolve \"phase?\" phase_533)))"
"((letrec-values(((fallback-loop_537)"
"(lambda(smss_538)"
"(let-values(((scopes_539)"
"(scope-set-at-fallback s_532(fallback-first smss_538) phase_533)))"
"(let-values(((sym_540)(syntax-content s_532)))"
"(let-values(((c69422_541)"
"(if(not exactly?_535)"
"(resolve-cache-get sym_540 phase_533 scopes_539)"
" #f)))"
"(if c69422_541"
"((lambda(b_542) b_542) c69422_541)"
"(let-values()"
"(let-values(((candidates_543)"
"(alt-reverse"
"(let-values(((ht_545) scopes_539))"
"(begin"
"(if((lambda(ht_546)"
"(if(hash? ht_546)(immutable? ht_546) #f))"
" ht_545)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_545)))"
"((letrec-values(((for-loop_547)"
"(lambda(fold-var_548 i_549)"
"(if i_549"
"(let-values(((sc_550)"
"(unsafe-immutable-hash-iterate-key"
" ht_545"
" i_549)))"
"(if #t"
"(let-values(((fold-var_551)"
"(let-values(((ht_552"
" bulk-bindings_553)"
"(let-values(((table_556)"
"(scope-binding-table"
" sc_550)))"
"(if(hash?"
" table_556)"
"(values"
"(hash-ref"
" table_556"
" sym_540"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_556)"
" sym_540"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_556)))))"
"((s_554)"
" s_532)"
"((extra-shifts_555)"
" extra-shifts_536))"
"(begin"
" #t"
"((letrec-values(((for-loop_557)"
"(lambda(fold-var_558"
" i_559"
" already-covered-scopes_560)"
"(if(not"
"(null?"
" i_559))"
"(let-values(((b-scopes_561)"
"(if(pair?"
" i_559)"
"(let-values()"
"(let-values(((scs_563)"
"(bulk-binding-at-scopes"
"(car"
" i_559))))"
"(if(not"
"(set-member?"
" already-covered-scopes_560"
" scs_563))"
" scs_563"
" #f)))"
"(let-values()"
"(hash-iterate-key"
" ht_552"
" i_559))))"
"((binding_562)"
"(if(pair?"
" i_559)"
"(let-values()"
"(let-values(((bulk_564)"
"(bulk-binding-at-bulk"
"(car"
" i_559))))"
"(let-values(((b-info_565)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_564"
" s_554"
" extra-shifts_555)"
" sym_540"
" #f)))"
"(if b-info_565"
"((bulk-binding-create"
" bulk_564)"
" bulk_564"
" b-info_565"
" sym_540)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_552"
" i_559)))))"
"(if #t"
"(let-values(((fold-var_566)"
"(let-values(((fold-var_567)"
" fold-var_558))"
"(if(if b-scopes_561"
"(if binding_562"
"(subset?"
" b-scopes_561"
" scopes_539)"
" #f)"
" #f)"
"(let-values(((fold-var_568)"
" fold-var_567))"
"(let-values(((fold-var_569)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" b-scopes_561"
" binding_562))"
" fold-var_568))))"
"(values"
" fold-var_569)))"
" fold-var_567))))"
"(if #t"
"(for-loop_557"
" fold-var_566"
"(if(pair?"
" i_559)"
"(let-values()"
"(cdr"
" i_559))"
"(let-values()"
"(let-values(((or-part_570)"
"(hash-iterate-next"
" ht_552"
" i_559)))"
"(if or-part_570"
" or-part_570"
" bulk-bindings_553))))"
"(if(if(pair?"
" bulk-bindings_553)"
"(if b-scopes_561"
"(if binding_562"
"(let-values(((or-part_571)"
"(not"
"(pair?"
" i_559))))"
"(if or-part_571"
" or-part_571"
"(not"
"(null?"
"(cdr"
" i_559)))))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(set-add"
" already-covered-scopes_560"
" b-scopes_561))"
"(let-values()"
" already-covered-scopes_560)))"
" fold-var_566))"
" fold-var_558))"
" fold-var_558))))"
" for-loop_557)"
" fold-var_548"
"(let-values(((or-part_572)"
"(hash-iterate-first"
" ht_552)))"
"(if or-part_572"
" or-part_572"
" bulk-bindings_553))"
" '#hasheq())))))"
"(if #t"
"(for-loop_547"
" fold-var_551"
"(unsafe-immutable-hash-iterate-next"
" ht_545"
" i_549))"
" fold-var_551))"
" fold-var_548))"
" fold-var_548))))"
" for-loop_547)"
" null"
"(unsafe-immutable-hash-iterate-first ht_545)))))))"
"(let-values(((max-candidate_544)"
"(if(pair? candidates_543)"
"(let-values(((lst_573)(cdr candidates_543)))"
"(begin"
"(if(list? lst_573)"
"(void)"
"(let-values()(in-list lst_573)))"
"((letrec-values(((for-loop_574)"
"(lambda(max-c_575 lst_576)"
"(if(pair? lst_576)"
"(let-values(((c_577)"
"(unsafe-car"
" lst_576)))"
"(if #t"
"(let-values(((max-c_578)"
"(let-values(((max-c_579)"
" max-c_575))"
"(let-values(((max-c_580)"
"(let-values()"
"(if(>"
"(set-count"
"(car"
" c_577))"
"(set-count"
"(car"
" max-c_579)))"
" c_577"
" max-c_579))))"
"(values"
" max-c_580)))))"
"(if #t"
"(for-loop_574"
" max-c_578"
"(unsafe-cdr"
" lst_576))"
" max-c_578))"
" max-c_575))"
" max-c_575))))"
" for-loop_574)"
"(car candidates_543)"
" lst_573)))"
" #f)))"
"(if max-candidate_544"
"(let-values()"
"(if(not"
"(let-values(((lst_581) candidates_543))"
"(begin"
"(if(list? lst_581)"
"(void)"
"(let-values()(in-list lst_581)))"
"((letrec-values(((for-loop_582)"
"(lambda(result_583 lst_584)"
"(if(pair? lst_584)"
"(let-values(((c_585)"
"(unsafe-car"
" lst_584)))"
"(if #t"
"(let-values(((result_586)"
"(let-values(((result_587)"
" result_583))"
"(let-values(((result_588)"
"(let-values()"
"(let-values()"
"(subset?"
"(car"
" c_585)"
"(car"
" max-candidate_544))))))"
"(values"
" result_588)))))"
"(if(if #t"
"(not"
"((lambda x_589"
"(not result_586))"
" c_585))"
" #f)"
"(for-loop_582"
" result_586"
"(unsafe-cdr lst_584))"
" result_586))"
" result_583))"
" result_583))))"
" for-loop_582)"
" #t"
" lst_581))))"
"(let-values()"
"(if(fallback? smss_538)"
"(fallback-loop_537(fallback-rest smss_538))"
" ambiguous-value_534))"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_540"
" phase_533"
" scopes_539"
"(cdr max-candidate_544))"
"(if(let-values(((or-part_590)(not exactly?_535)))"
"(if or-part_590"
" or-part_590"
"(equal?"
"(set-count scopes_539)"
"(set-count(car max-candidate_544)))))"
"(cdr max-candidate_544)"
" #f)))))"
"(let-values()"
"(if(fallback? smss_538)"
"(fallback-loop_537(fallback-rest smss_538))"
" #f)))))))))))))"
" fallback-loop_537)"
"(syntax-shifted-multi-scopes s_532)))))))))))"
"(define-values"
"(unpack20.1$1)"
"(lambda(given-kws_591 given-args_592 s17_593 phase18_594)"
"(let-values(((ambiguous-value14_595)(if(pair? given-kws_591)(eq? '#:ambiguous-value(car given-kws_591)) #f)))"
"(let-values(((ambiguous-value11_596)(if ambiguous-value14_595(car given-args_592)(void)))"
"((given-kws_597)(if ambiguous-value14_595(cdr given-kws_591) given-kws_591))"
"((given-args_598)(if ambiguous-value14_595(cdr given-args_592) given-args_592)))"
"(let-values(((exactly?15_599)(if(pair? given-kws_597)(eq? '#:exactly?(car given-kws_597)) #f)))"
"(let-values(((exactly?12_600)(if exactly?15_599(car given-args_598)(void)))"
"((given-kws_601)(if exactly?15_599(cdr given-kws_597) given-kws_597))"
"((given-args_602)(if exactly?15_599(cdr given-args_598) given-args_598)))"
"(let-values(((extra-shifts16_603)(pair? given-kws_601)))"
"(let-values(((extra-shifts13_604)(if extra-shifts16_603(car given-args_602)(void))))"
"(resolve19.1"
" ambiguous-value11_596"
" ambiguous-value14_595"
" exactly?12_600"
" exactly?15_599"
" extra-shifts13_604"
" extra-shifts16_603"
" s17_593"
" phase18_594)))))))))"
"(define-values"
"(resolve21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_605 given-argc_606)"
"(if(= given-argc_606 4)"
"(let-values(((l1_607) given-kws_605))"
"(let-values(((l1_608)"
"(if(null? l1_607) l1_607(if(eq?(car l1_607) '#:ambiguous-value)(cdr l1_607) l1_607))))"
"(let-values(((l1_609) l1_608))"
"(let-values(((l1_610)(if(null? l1_609) l1_609(if(eq?(car l1_609) '#:exactly?)(cdr l1_609) l1_609))))"
"(let-values(((l1_611) l1_610))"
"(let-values(((l1_612)"
"(if(null? l1_611) l1_611(if(eq?(car l1_611) '#:extra-shifts)(cdr l1_611) l1_611))))"
"(null? l1_612)))))))"
" #f))"
"(case-lambda"
"((given-kws_613 given-args_614 s_615 phase_616)(unpack20.1$1 given-kws_613 given-args_614 s_615 phase_616)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(let-values(((resolve_617)(case-lambda((s_618 phase_619)(unpack20.1$1 null null s_618 phase_619)))))"
" resolve_617)))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_620 b_621 phase_622)"
"(if(eq?(syntax-e$1 a_620)(syntax-e$1 b_621))"
"(equal?(syntax-scope-set a_620 phase_622)(syntax-scope-set b_621 phase_622))"
" #f)))"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 #f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-bulk-binding-registry the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_11"
"                               \"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-bulk-binding-registry the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
"      (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 #f)))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_19)"
"(begin"
"      (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_19)))"
"(alt-reverse"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(if(hash? ht_21)(immutable? ht_21) #f)) ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)(unsafe-immutable-hash-iterate-key+value ht_20 i_24)))"
"(if #t"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_23))"
"(if(if(symbol? k_25)(symbol-interned? k_25) #f)"
"(let-values(((fold-var_29) fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons(let-values() k_25) fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(if #t"
"(for-loop_22 fold-var_27(unsafe-immutable-hash-iterate-next ht_20 i_24))"
" fold-var_27))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first ht_20))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_31 key_32)"
"(if(hash-ref(syntax-props s_31) key_32 #f)"
"(let-values(((the-struct_33) s_31))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props3_34)(hash-remove(syntax-props s_31) key_32)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-bulk-binding-registry the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props3_34"
"(syntax-inspector the-struct_33)"
"(syntax-tamper the-struct_33)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))"
" s_31)))"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_27)(binding-free=id b_27))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_28)(if(full-binding? b_28)(full-binding-frame-id b_28) #f)))"
"(define-values(binding-free=id)(lambda(b_29)(if(full-binding? b_29)(full-binding-free=id b_29) #f)))"
"(define-values"
"(make-module-binding20.1)"
"(lambda(extra-inspector8_1"
" extra-inspector16_2"
" frame-id6_3"
" frame-id14_4"
" free=id7_5"
" free=id15_6"
" nominal-module2_7"
" nominal-module10_8"
" nominal-phase3_9"
" nominal-phase11_10"
" nominal-require-phase5_11"
" nominal-require-phase13_12"
" nominal-sym4_13"
" nominal-sym12_14"
" wrt1_15"
" wrt9_16"
" module17_17"
" phase18_18"
" sym19_19)"
"(let-values(((module_20) module17_17))"
"(let-values(((phase_21) phase18_18))"
"(let-values(((sym_22) sym19_19))"
"(let-values(((wrt-sym_23)(if wrt9_16 wrt1_15 sym_22)))"
"(let-values(((nominal-module_24)(if nominal-module10_8 nominal-module2_7 module_20)))"
"(let-values(((nominal-phase_25)(if nominal-phase11_10 nominal-phase3_9 phase_21)))"
"(let-values(((nominal-sym_26)(if nominal-sym12_14 nominal-sym4_13 sym_22)))"
"(let-values(((nominal-require-phase_27)(if nominal-require-phase13_12 nominal-require-phase5_11 0)))"
"(let-values(((frame-id_28)(if frame-id14_4 frame-id6_3 #f)))"
"(let-values(((free=id_29)(if free=id15_6 free=id7_5 #f)))"
"(let-values(((extra-inspector_30)(if extra-inspector16_2 extra-inspector8_1 #f)))"
"(let-values()"
"(if(let-values(((or-part_31) frame-id_28))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32) free=id_29))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33) extra-inspector_30))"
"(if or-part_33"
" or-part_33"
"(not"
"(if(eq? nominal-module_24 module_20)"
"(if(eqv? nominal-phase_25 phase_21)"
"(if(eq? nominal-sym_26 sym_22)(eqv? nominal-require-phase_27 0) #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding47.1"
" frame-id_28"
" free=id_29"
" module_20"
" phase_21"
" sym_22"
" nominal-module_24"
" nominal-phase_25"
" nominal-sym_26"
" nominal-require-phase_27"
" extra-inspector_30))"
"(let-values()(simple-module-binding48.1 module_20 phase_21 sym_22)))))))))))))))))"
"(define-values"
"(unpack21.1$1)"
"(lambda(given-kws_34 given-args_35 module17_36 phase18_37 sym19_38)"
"(let-values(((extra-inspector16_39)(if(pair? given-kws_34)(eq? '#:extra-inspector(car given-kws_34)) #f)))"
"(let-values(((extra-inspector8_40)(if extra-inspector16_39(car given-args_35)(void)))"
"((given-kws_41)(if extra-inspector16_39(cdr given-kws_34) given-kws_34))"
"((given-args_42)(if extra-inspector16_39(cdr given-args_35) given-args_35)))"
"(let-values(((frame-id14_43)(if(pair? given-kws_41)(eq? '#:frame-id(car given-kws_41)) #f)))"
"(let-values(((frame-id6_44)(if frame-id14_43(car given-args_42)(void)))"
"((given-kws_45)(if frame-id14_43(cdr given-kws_41) given-kws_41))"
"((given-args_46)(if frame-id14_43(cdr given-args_42) given-args_42)))"
"(let-values(((free=id15_47)(if(pair? given-kws_45)(eq? '#:free=id(car given-kws_45)) #f)))"
"(let-values(((free=id7_48)(if free=id15_47(car given-args_46)(void)))"
"((given-kws_49)(if free=id15_47(cdr given-kws_45) given-kws_45))"
"((given-args_50)(if free=id15_47(cdr given-args_46) given-args_46)))"
"(let-values(((nominal-module10_51)"
"(if(pair? given-kws_49)(eq? '#:nominal-module(car given-kws_49)) #f)))"
"(let-values(((nominal-module2_52)(if nominal-module10_51(car given-args_50)(void)))"
"((given-kws_53)(if nominal-module10_51(cdr given-kws_49) given-kws_49))"
"((given-args_54)(if nominal-module10_51(cdr given-args_50) given-args_50)))"
"(let-values(((nominal-phase11_55)"
"(if(pair? given-kws_53)(eq? '#:nominal-phase(car given-kws_53)) #f)))"
"(let-values(((nominal-phase3_56)(if nominal-phase11_55(car given-args_54)(void)))"
"((given-kws_57)(if nominal-phase11_55(cdr given-kws_53) given-kws_53))"
"((given-args_58)(if nominal-phase11_55(cdr given-args_54) given-args_54)))"
"(let-values(((nominal-require-phase13_59)"
"(if(pair? given-kws_57)(eq? '#:nominal-require-phase(car given-kws_57)) #f)))"
"(let-values(((nominal-require-phase5_60)"
"(if nominal-require-phase13_59(car given-args_58)(void)))"
"((given-kws_61)(if nominal-require-phase13_59(cdr given-kws_57) given-kws_57))"
"((given-args_62)"
"(if nominal-require-phase13_59(cdr given-args_58) given-args_58)))"
"(let-values(((nominal-sym12_63)"
"(if(pair? given-kws_61)(eq? '#:nominal-sym(car given-kws_61)) #f)))"
"(let-values(((nominal-sym4_64)(if nominal-sym12_63(car given-args_62)(void)))"
"((given-kws_65)(if nominal-sym12_63(cdr given-kws_61) given-kws_61))"
"((given-args_66)(if nominal-sym12_63(cdr given-args_62) given-args_62)))"
"(let-values(((wrt9_67)(pair? given-kws_65)))"
"(let-values(((wrt1_68)(if wrt9_67(car given-args_66)(void))))"
"(make-module-binding20.1"
" extra-inspector8_40"
" extra-inspector16_39"
" frame-id6_44"
" frame-id14_43"
" free=id7_48"
" free=id15_47"
" nominal-module2_52"
" nominal-module10_51"
" nominal-phase3_56"
" nominal-phase11_55"
" nominal-require-phase5_60"
" nominal-require-phase13_59"
" nominal-sym4_64"
" nominal-sym12_63"
" wrt1_68"
" wrt9_67"
" module17_36"
" phase18_37"
" sym19_38)))))))))))))))))))"
"(define-values"
"(make-module-binding22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_69 given-argc_70)"
"(if(= given-argc_70 5)"
"(let-values(((l1_71) given-kws_69))"
"(let-values(((l1_72)(if(null? l1_71) l1_71(if(eq?(car l1_71) '#:extra-inspector)(cdr l1_71) l1_71))))"
"(let-values(((l1_73) l1_72))"
"(let-values(((l1_74)(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:frame-id)(cdr l1_73) l1_73))))"
"(let-values(((l1_75) l1_74))"
"(let-values(((l1_76)(if(null? l1_75) l1_75(if(eq?(car l1_75) '#:free=id)(cdr l1_75) l1_75))))"
"(let-values(((l1_77) l1_76))"
"(let-values(((l1_78)"
"(if(null? l1_77) l1_77(if(eq?(car l1_77) '#:nominal-module)(cdr l1_77) l1_77))))"
"(let-values(((l1_79) l1_78))"
"(let-values(((l1_80)"
"(if(null? l1_79)"
" l1_79"
"(if(eq?(car l1_79) '#:nominal-phase)(cdr l1_79) l1_79))))"
"(let-values(((l1_81) l1_80))"
"(let-values(((l1_82)"
"(if(null? l1_81)"
" l1_81"
"(if(eq?(car l1_81) '#:nominal-require-phase)(cdr l1_81) l1_81))))"
"(let-values(((l1_83) l1_82))"
"(let-values(((l1_84)"
"(if(null? l1_83)"
" l1_83"
"(if(eq?(car l1_83) '#:nominal-sym)(cdr l1_83) l1_83))))"
"(let-values(((l1_85) l1_84))"
"(let-values(((l1_86)"
"(if(null? l1_85)"
" l1_85"
"(if(eq?(car l1_85) '#:wrt)(cdr l1_85) l1_85))))"
"(null? l1_86)))))))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_87 given-args_88 module_89 phase_90 sym_91)"
"(unpack21.1$1 given-kws_87 given-args_88 module_89 phase_90 sym_91)))"
" null"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:wrt)"
"(let-values(((make-module-binding_92)"
"(case-lambda((module_93 phase_94 sym_95)(unpack21.1$1 null null module_93 phase_94 sym_95)))))"
" make-module-binding_92)))"
"(define-values"
"(module-binding-update44.1)"
"(lambda(extra-inspector32_96"
" extra-inspector42_97"
" frame-id30_98"
" frame-id40_99"
" free=id31_100"
" free=id41_101"
" module23_102"
" module33_103"
" nominal-module26_104"
" nominal-module36_105"
" nominal-phase27_106"
" nominal-phase37_107"
" nominal-require-phase29_108"
" nominal-require-phase39_109"
" nominal-sym28_110"
" nominal-sym38_111"
" phase24_112"
" phase34_113"
" sym25_114"
" sym35_115"
" b43_116)"
"(let-values(((b_117) b43_116))"
"(let-values(((module_118)(if module33_103 module23_102(module-binding-module b_117))))"
"(let-values(((phase_119)(if phase34_113 phase24_112(module-binding-phase b_117))))"
"(let-values(((sym_120)(if sym35_115 sym25_114(module-binding-sym b_117))))"
"(let-values(((nominal-module_121)"
"(if nominal-module36_105 nominal-module26_104(module-binding-nominal-module b_117))))"
"(let-values(((nominal-phase_122)"
"(if nominal-phase37_107 nominal-phase27_106(module-binding-nominal-phase b_117))))"
"(let-values(((nominal-sym_123)"
"(if nominal-sym38_111 nominal-sym28_110(module-binding-nominal-sym b_117))))"
"(let-values(((nominal-require-phase_124)"
"(if nominal-require-phase39_109"
" nominal-require-phase29_108"
"(module-binding-nominal-require-phase b_117))))"
"(let-values(((frame-id_125)(if frame-id40_99 frame-id30_98(binding-frame-id b_117))))"
"(let-values(((free=id_126)(if free=id41_101 free=id31_100(binding-free=id b_117))))"
"(let-values(((extra-inspector_127)"
"(if extra-inspector42_97"
" extra-inspector32_96"
"(module-binding-extra-inspector b_117))))"
"(let-values()"
"(let-values(((...x/module-binding.rkt:62:2_128) make-module-binding22.1)"
"((module49_129) module_118)"
"((phase50_130) phase_119)"
"((sym51_131) sym_120)"
"((nominal-module52_132) nominal-module_121)"
"((nominal-phase53_133) nominal-phase_122)"
"((nominal-sym54_134) nominal-sym_123)"
"((nominal-require-phase55_135) nominal-require-phase_124)"
"((frame-id56_136) frame-id_125)"
"((free=id57_137) free=id_126)"
"((extra-inspector58_138) extra-inspector_127))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" extra-inspector58_138"
" #t"
" frame-id56_136"
" #t"
" free=id57_137"
" #t"
" nominal-module52_132"
" #t"
" nominal-phase53_133"
" #t"
" nominal-require-phase55_135"
" #t"
" nominal-sym54_134"
" #t"
" #f"
" #f"
" module49_129"
" phase50_130"
" sym51_131)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:62:2_128"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 5)"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" extra-inspector58_138"
" frame-id56_136"
" free=id57_137"
" nominal-module52_132"
" nominal-phase53_133"
" nominal-require-phase55_135"
" nominal-sym54_134)"
" module49_129"
" phase50_130"
" sym51_131)))))))))))))))))"
"(define-values"
"(unpack45.1)"
"(lambda(given-kws_139 given-args_140 b43_141)"
"(let-values(((extra-inspector42_142)(if(pair? given-kws_139)(eq? '#:extra-inspector(car given-kws_139)) #f)))"
"(let-values(((extra-inspector32_143)(if extra-inspector42_142(car given-args_140)(void)))"
"((given-kws_144)(if extra-inspector42_142(cdr given-kws_139) given-kws_139))"
"((given-args_145)(if extra-inspector42_142(cdr given-args_140) given-args_140)))"
"(let-values(((frame-id40_146)(if(pair? given-kws_144)(eq? '#:frame-id(car given-kws_144)) #f)))"
"(let-values(((frame-id30_147)(if frame-id40_146(car given-args_145)(void)))"
"((given-kws_148)(if frame-id40_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if frame-id40_146(cdr given-args_145) given-args_145)))"
"(let-values(((free=id41_150)(if(pair? given-kws_148)(eq? '#:free=id(car given-kws_148)) #f)))"
"(let-values(((free=id31_151)(if free=id41_150(car given-args_149)(void)))"
"((given-kws_152)(if free=id41_150(cdr given-kws_148) given-kws_148))"
"((given-args_153)(if free=id41_150(cdr given-args_149) given-args_149)))"
"(let-values(((module33_154)(if(pair? given-kws_152)(eq? '#:module(car given-kws_152)) #f)))"
"(let-values(((module23_155)(if module33_154(car given-args_153)(void)))"
"((given-kws_156)(if module33_154(cdr given-kws_152) given-kws_152))"
"((given-args_157)(if module33_154(cdr given-args_153) given-args_153)))"
"(let-values(((nominal-module36_158)"
"(if(pair? given-kws_156)(eq? '#:nominal-module(car given-kws_156)) #f)))"
"(let-values(((nominal-module26_159)(if nominal-module36_158(car given-args_157)(void)))"
"((given-kws_160)(if nominal-module36_158(cdr given-kws_156) given-kws_156))"
"((given-args_161)(if nominal-module36_158(cdr given-args_157) given-args_157)))"
"(let-values(((nominal-phase37_162)"
"(if(pair? given-kws_160)(eq? '#:nominal-phase(car given-kws_160)) #f)))"
"(let-values(((nominal-phase27_163)(if nominal-phase37_162(car given-args_161)(void)))"
"((given-kws_164)(if nominal-phase37_162(cdr given-kws_160) given-kws_160))"
"((given-args_165)(if nominal-phase37_162(cdr given-args_161) given-args_161)))"
"(let-values(((nominal-require-phase39_166)"
"(if(pair? given-kws_164)"
"(eq? '#:nominal-require-phase(car given-kws_164))"
" #f)))"
"(let-values(((nominal-require-phase29_167)"
"(if nominal-require-phase39_166(car given-args_165)(void)))"
"((given-kws_168)"
"(if nominal-require-phase39_166(cdr given-kws_164) given-kws_164))"
"((given-args_169)"
"(if nominal-require-phase39_166(cdr given-args_165) given-args_165)))"
"(let-values(((nominal-sym38_170)"
"(if(pair? given-kws_168)(eq? '#:nominal-sym(car given-kws_168)) #f)))"
"(let-values(((nominal-sym28_171)(if nominal-sym38_170(car given-args_169)(void)))"
"((given-kws_172)"
"(if nominal-sym38_170(cdr given-kws_168) given-kws_168))"
"((given-args_173)"
"(if nominal-sym38_170(cdr given-args_169) given-args_169)))"
"(let-values(((phase34_174)"
"(if(pair? given-kws_172)(eq? '#:phase(car given-kws_172)) #f)))"
"(let-values(((phase24_175)(if phase34_174(car given-args_173)(void)))"
"((given-kws_176)(if phase34_174(cdr given-kws_172) given-kws_172))"
"((given-args_177)"
"(if phase34_174(cdr given-args_173) given-args_173)))"
"(let-values(((sym35_178)(pair? given-kws_176)))"
"(let-values(((sym25_179)(if sym35_178(car given-args_177)(void))))"
"(module-binding-update44.1"
" extra-inspector32_143"
" extra-inspector42_142"
" frame-id30_147"
" frame-id40_146"
" free=id31_151"
" free=id41_150"
" module23_155"
" module33_154"
" nominal-module26_159"
" nominal-module36_158"
" nominal-phase27_163"
" nominal-phase37_162"
" nominal-require-phase29_167"
" nominal-require-phase39_166"
" nominal-sym28_171"
" nominal-sym38_170"
" phase24_175"
" phase34_174"
" sym25_179"
" sym35_178"
" b43_141)))))))))))))))))))))))"
"(define-values"
"(module-binding-update46.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_180 given-argc_181)"
"(if(= given-argc_181 3)"
"(let-values(((l1_182) given-kws_180))"
"(let-values(((l1_183)"
"(if(null? l1_182) l1_182(if(eq?(car l1_182) '#:extra-inspector)(cdr l1_182) l1_182))))"
"(let-values(((l1_184) l1_183))"
"(let-values(((l1_185)(if(null? l1_184) l1_184(if(eq?(car l1_184) '#:frame-id)(cdr l1_184) l1_184))))"
"(let-values(((l1_186) l1_185))"
"(let-values(((l1_187)"
"(if(null? l1_186) l1_186(if(eq?(car l1_186) '#:free=id)(cdr l1_186) l1_186))))"
"(let-values(((l1_188) l1_187))"
"(let-values(((l1_189)"
"(if(null? l1_188) l1_188(if(eq?(car l1_188) '#:module)(cdr l1_188) l1_188))))"
"(let-values(((l1_190) l1_189))"
"(let-values(((l1_191)"
"(if(null? l1_190)"
" l1_190"
"(if(eq?(car l1_190) '#:nominal-module)(cdr l1_190) l1_190))))"
"(let-values(((l1_192) l1_191))"
"(let-values(((l1_193)"
"(if(null? l1_192)"
" l1_192"
"(if(eq?(car l1_192) '#:nominal-phase)(cdr l1_192) l1_192))))"
"(let-values(((l1_194) l1_193))"
"(let-values(((l1_195)"
"(if(null? l1_194)"
" l1_194"
"(if(eq?(car l1_194) '#:nominal-require-phase)(cdr l1_194) l1_194))))"
"(let-values(((l1_196) l1_195))"
"(let-values(((l1_197)"
"(if(null? l1_196)"
" l1_196"
"(if(eq?(car l1_196) '#:nominal-sym)(cdr l1_196) l1_196))))"
"(let-values(((l1_198) l1_197))"
"(let-values(((l1_199)"
"(if(null? l1_198)"
" l1_198"
"(if(eq?(car l1_198) '#:phase)(cdr l1_198) l1_198))))"
"(let-values(((l1_200) l1_199))"
"(let-values(((l1_201)"
"(if(null? l1_200)"
" l1_200"
"(if(eq?(car l1_200) '#:sym)(cdr l1_200) l1_200))))"
"(null? l1_201)))))))))))))))))))))"
" #f))"
"(case-lambda((given-kws_202 given-args_203 b_204)(unpack45.1 given-kws_202 given-args_203 b_204)))"
" null"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:phase"
" #:sym)"
"(let-values(((module-binding-update_205)(case-lambda((b_206)(unpack45.1 null null b_206)))))"
" module-binding-update_205)))"
"(define-values"
"(module-binding?)"
"(lambda(b_207)"
"(let-values(((or-part_208)(simple-module-binding? b_207)))"
"(if or-part_208 or-part_208(full-module-binding? b_207)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding47.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector)"
"(let-values(((struct:_209 make-_210 ?_211 -ref_212 -set!_213)"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_265 ser_266 state_267)"
"(let-values(((simplified-b_268)"
"(if(full-binding-frame-id b_265)"
"(let-values(((...x/module-binding.rkt:87:16_269) module-binding-update46.1)"
"((b61_270) b_265)"
"((temp62_271) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" temp62_271"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b61_270)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:87:16_269"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list temp62_271)"
" b61_270)))"
" b_265)))"
"(if(full-module-binding? simplified-b_268)"
"(let-values()"
"(list"
" 'deserialize-full-module-binding"
"(ser_266(full-module-binding-module b_265))"
"(ser_266(full-module-binding-sym b_265))"
"(ser_266(full-module-binding-phase b_265))"
"(ser_266(full-module-binding-nominal-module b_265))"
"(ser_266(full-module-binding-nominal-phase b_265))"
"(ser_266(full-module-binding-nominal-sym b_265))"
"(ser_266(full-module-binding-nominal-require-phase b_265))"
"(ser_266(full-binding-free=id b_265))"
"(if(full-module-binding-extra-inspector b_265) '#:inspector(ser_266 #f))))"
"(let-values()(ser_266 simplified-b_268)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7)"
" #f"
" 'full-module-binding))))"
"(values"
" struct:_209"
" make-_210"
" ?_211"
"(make-struct-field-accessor -ref_212 0 'module)"
"(make-struct-field-accessor -ref_212 1 'phase)"
"(make-struct-field-accessor -ref_212 2 'sym)"
"(make-struct-field-accessor -ref_212 3 'nominal-module)"
"(make-struct-field-accessor -ref_212 4 'nominal-phase)"
"(make-struct-field-accessor -ref_212 5 'nominal-sym)"
"(make-struct-field-accessor -ref_212 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_212 7 'extra-inspector))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding48.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym)"
"(let-values(((struct:_272 make-_273 ?_274 -ref_275 -set!_276)"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_303 ser_304 state_305)"
"(list"
" 'deserialize-simple-module-binding"
"(ser_304(simple-module-binding-module b_303))"
"(ser_304(simple-module-binding-sym b_303))"
"(ser_304(simple-module-binding-phase b_303))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'simple-module-binding))))"
"(values"
" struct:_272"
" make-_273"
" ?_274"
"(make-struct-field-accessor -ref_275 0 'module)"
"(make-struct-field-accessor -ref_275 1 'phase)"
"(make-struct-field-accessor -ref_275 2 'sym))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_306"
" sym_307"
" phase_308"
" nominal-module_309"
" nominal-phase_310"
" nominal-sym_311"
" nominal-require-phase_312"
" free=id_313"
" extra-inspector_314)"
"(let-values(((...x/module-binding.rkt:125:2_315) make-module-binding22.1)"
"((module65_316) module_306)"
"((phase66_317) phase_308)"
"((sym67_318) sym_307)"
"((nominal-module68_319) nominal-module_309)"
"((nominal-phase69_320) nominal-phase_310)"
"((nominal-sym70_321) nominal-sym_311)"
"((nominal-require-phase71_322) nominal-require-phase_312)"
"((free=id72_323) free=id_313)"
"((extra-inspector73_324) extra-inspector_314))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" extra-inspector73_324"
" #t"
" #f"
" #f"
" free=id72_323"
" #t"
" nominal-module68_319"
" #t"
" nominal-phase69_320"
" #t"
" nominal-require-phase71_322"
" #t"
" nominal-sym70_321"
" #t"
" #f"
" #f"
" module65_316"
" phase66_317"
" sym67_318)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:125:2_315"
" keyword-procedure-extract"
" '(#:extra-inspector #:free=id #:nominal-module #:nominal-phase #:nominal-require-phase #:nominal-sym)"
" 5)"
" '(#:extra-inspector #:free=id #:nominal-module #:nominal-phase #:nominal-require-phase #:nominal-sym)"
"(list"
" extra-inspector73_324"
" free=id72_323"
" nominal-module68_319"
" nominal-phase69_320"
" nominal-require-phase71_322"
" nominal-sym70_321)"
" module65_316"
" phase66_317"
" sym67_318)))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_325 sym_326 phase_327)(simple-module-binding48.1 module_325 phase_327 sym_326)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_328)"
"(if(simple-module-binding? b_328)(simple-module-binding-module b_328)(full-module-binding-module b_328))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_329)"
"(if(simple-module-binding? b_329)(simple-module-binding-phase b_329)(full-module-binding-phase b_329))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_330)"
"(if(simple-module-binding? b_330)(simple-module-binding-sym b_330)(full-module-binding-sym b_330))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_331)"
"(if(simple-module-binding? b_331)"
"(simple-module-binding-module b_331)"
"(full-module-binding-nominal-module b_331))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_332)"
"(if(simple-module-binding? b_332)(simple-module-binding-phase b_332)(full-module-binding-nominal-phase b_332))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_333)"
"(if(simple-module-binding? b_333)(simple-module-binding-sym b_333)(full-module-binding-nominal-sym b_333))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_334)(if(simple-module-binding? b_334) 0(full-module-binding-nominal-require-phase b_334))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_335)(if(simple-module-binding? b_335) #f(full-module-binding-extra-inspector b_335))))"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_24 ser_25 state_26)"
"(list"
" 'deserialize-full-local-binding"
"(ser_25(full-local-binding-key b_24))"
"(ser_25(full-binding-free=id b_24))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_27 free=id_28)(full-local-binding1.1 #f free=id_28 key_27)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_29 frame-id4_30 free=id3_31 free=id5_32 key6_33)"
"(let-values(((key_34) key6_33))"
"(let-values(((frame-id_35)(if frame-id4_30 frame-id2_29 #f)))"
"(let-values(((free=id_36)(if free=id5_32 free=id3_31 #f)))"
"(let-values()"
"(if(if(not frame-id_35)(not free=id_36) #f)"
"(let-values() key_34)"
"(let-values()(full-local-binding1.1 frame-id_35 free=id_36 key_34)))))))))"
"(define-values"
"(unpack8.1$1)"
"(lambda(given-kws_37 given-args_38 key6_39)"
"(let-values(((frame-id4_40)(if(pair? given-kws_37)(eq? '#:frame-id(car given-kws_37)) #f)))"
"(let-values(((frame-id2_41)(if frame-id4_40(car given-args_38)(void)))"
"((given-kws_42)(if frame-id4_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if frame-id4_40(cdr given-args_38) given-args_38)))"
"(let-values(((free=id5_44)(pair? given-kws_42)))"
"(let-values(((free=id3_45)(if free=id5_44(car given-args_43)(void))))"
"(make-local-binding7.1 frame-id2_41 frame-id4_40 free=id3_45 free=id5_44 key6_39)))))))"
"(define-values"
"(make-local-binding9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_46 given-argc_47)"
"(if(= given-argc_47 3)"
"(let-values(((l1_48) given-kws_46))"
"(let-values(((l1_49)(if(null? l1_48) l1_48(if(eq?(car l1_48) '#:frame-id)(cdr l1_48) l1_48))))"
"(let-values(((l1_50) l1_49))"
"(let-values(((l1_51)(if(null? l1_50) l1_50(if(eq?(car l1_50) '#:free=id)(cdr l1_50) l1_50))))"
"(null? l1_51)))))"
" #f))"
"(case-lambda((given-kws_52 given-args_53 key_54)(unpack8.1$1 given-kws_52 given-args_53 key_54)))"
" null"
" '(#:frame-id #:free=id)"
"(let-values(((make-local-binding_55)(case-lambda((key_56)(unpack8.1$1 null null key_56)))))"
" make-local-binding_55)))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_57 frame-id14_58 free=id12_59 free=id15_60 key10_61 key13_62 b16_63)"
"(let-values(((b_64) b16_63))"
"(let-values(((key_65)(if key13_62 key10_61(local-binding-key b_64))))"
"(let-values(((frame-id_66)(if frame-id14_58 frame-id11_57(binding-frame-id b_64))))"
"(let-values(((free=id_67)(if free=id15_60 free=id12_59(binding-free=id b_64))))"
"(let-values()"
"(let-values(((...ax/local-binding.rkt:49:2_68) make-local-binding9.1)"
"((key22_69) key_65)"
"((frame-id23_70) frame-id_66)"
"((free=id24_71) free=id_67))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id23_70 #t free=id24_71 #t key22_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ax/local-binding.rkt:49:2_68"
" keyword-procedure-extract"
" '(#:frame-id #:free=id)"
" 3)"
" '(#:frame-id #:free=id)"
"(list frame-id23_70 free=id24_71)"
" key22_69))))))))))"
"(define-values"
"(unpack18.1$3)"
"(lambda(given-kws_72 given-args_73 b16_74)"
"(let-values(((frame-id14_75)(if(pair? given-kws_72)(eq? '#:frame-id(car given-kws_72)) #f)))"
"(let-values(((frame-id11_76)(if frame-id14_75(car given-args_73)(void)))"
"((given-kws_77)(if frame-id14_75(cdr given-kws_72) given-kws_72))"
"((given-args_78)(if frame-id14_75(cdr given-args_73) given-args_73)))"
"(let-values(((free=id15_79)(if(pair? given-kws_77)(eq? '#:free=id(car given-kws_77)) #f)))"
"(let-values(((free=id12_80)(if free=id15_79(car given-args_78)(void)))"
"((given-kws_81)(if free=id15_79(cdr given-kws_77) given-kws_77))"
"((given-args_82)(if free=id15_79(cdr given-args_78) given-args_78)))"
"(let-values(((key13_83)(pair? given-kws_81)))"
"(let-values(((key10_84)(if key13_83(car given-args_82)(void))))"
"(local-binding-update17.1"
" frame-id11_76"
" frame-id14_75"
" free=id12_80"
" free=id15_79"
" key10_84"
" key13_83"
" b16_74)))))))))"
"(define-values"
"(local-binding-update19.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_85 given-argc_86)"
"(if(= given-argc_86 3)"
"(let-values(((l1_87) given-kws_85))"
"(let-values(((l1_88)(if(null? l1_87) l1_87(if(eq?(car l1_87) '#:frame-id)(cdr l1_87) l1_87))))"
"(let-values(((l1_89) l1_88))"
"(let-values(((l1_90)(if(null? l1_89) l1_89(if(eq?(car l1_89) '#:free=id)(cdr l1_89) l1_89))))"
"(let-values(((l1_91) l1_90))"
"(let-values(((l1_92)(if(null? l1_91) l1_91(if(eq?(car l1_91) '#:key)(cdr l1_91) l1_91))))"
"(null? l1_92)))))))"
" #f))"
"(case-lambda((given-kws_93 given-args_94 b_95)(unpack18.1$3 given-kws_93 given-args_94 b_95)))"
" null"
" '(#:frame-id #:free=id #:key)"
"(let-values(((local-binding-update_96)(case-lambda((b_97)(unpack18.1$3 null null b_97)))))"
" local-binding-update_96)))"
"(define-values(local-binding-key)(lambda(b_98)(if(full-local-binding? b_98)(full-local-binding-key b_98) b_98)))"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer))))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'id)))))"
"(lambda(id_37)"
"(begin"
"(if(identifier? id_37)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_37)))"
"(rename-transformer1_12 id_37))))))"
"(define-values(1/rename-transformer-target)(lambda(t_38)((rename-transformer-value t_38) t_38)))"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((...r/syntax/binding.rkt:44:13_7) resolve+shift15.1)"
"((a21_8) a_1)"
"((a-phase22_9) a-phase_3)"
"((temp23_10) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp23_10 #t a21_8 a-phase22_9)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:44:13_7"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp23_10)"
" a21_8"
" a-phase22_9)))))"
"(let-values(((bb_6)"
"(let-values(((...r/syntax/binding.rkt:45:13_11) resolve+shift15.1)"
"((b24_12) b_2)"
"((b-phase25_13) b-phase_4)"
"((temp26_14) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp26_14 #t b24_12 b-phase25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:45:13_11"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp26_14)"
" b24_12"
" b-phase25_13)))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) #f))"
"        (let-values () (error \"bad binding\"))))))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_18 phase_19)"
"(let-values(((b_20)"
"(let-values(((...r/syntax/binding.rkt:69:12_21) resolve+shift15.1)"
"((id27_22) id_18)"
"((phase28_23) phase_19)"
"((temp29_24) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp29_24 #t id27_22 phase28_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:69:12_21"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp29_24)"
" id27_22"
" phase28_23)))))"
"(if(symbol? b_20)"
"(let-values() b_20)"
"(if(module-binding? b_20)"
"(let-values()(module-binding-sym b_20))"
"(if(local-binding? b_20)(let-values()(local-binding-key b_20))(let-values()(syntax-e$1 id_18))))))))"
"(define-values"
"(identifier-binding$1)"
"(lambda(id_25 phase_26)"
"(let-values(((b_27)"
"(let-values(((id30_28) id_25)((phase31_29) phase_26))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f id30_28 phase31_29)"
"(resolve+shift15.1 id30_28 phase31_29)))))"
"(if(module-binding? b_27)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_27))"
" #f"
"(list"
"(module-binding-module b_27)"
"(module-binding-sym b_27)"
"(module-binding-nominal-module b_27)"
"(module-binding-nominal-sym b_27)"
"(module-binding-phase b_27)"
"(module-binding-nominal-require-phase b_27)"
"(module-binding-nominal-phase b_27))))"
"(if(local-binding? b_27)(let-values() 'lexical)(let-values() #f))))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_30 id_31 phase_32)"
"(if(1/rename-transformer? val_30)"
"(let-values()"
"(let-values(((free=id_33)(1/rename-transformer-target val_30)))"
"(if(syntax-property$1 free=id_33 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_34)"
"(let-values(((...r/syntax/binding.rkt:101:16_35) resolve+shift15.1)"
"((id32_36) id_31)"
"((phase33_37) phase_32)"
"((temp34_38) #t)"
"((temp35_39) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp34_38 #t #f #f temp35_39 #t #f #f id32_36 phase33_37)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:101:16_35"
" keyword-procedure-extract"
" '(#:exactly? #:immediate?)"
" 4)"
" '(#:exactly? #:immediate?)"
"(list temp34_38 temp35_39)"
" id32_36"
" phase33_37)))))"
"(add-binding-in-scopes!"
"(syntax-scope-set id_31 phase_32)"
"(syntax-e$1 id_31)"
"(binding-set-free=id b_34 free=id_33)))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_40 free=id_41)"
"(if(module-binding? b_40)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:107:24_42) module-binding-update46.1)"
"((b36_43) b_40)"
"((free=id37_44) free=id_41))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1 #f #f #f #f free=id37_44 #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f b36_43)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:107:24_42"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id37_44)"
" b36_43))))"
"(if(local-binding? b_40)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:108:23_45) local-binding-update19.1)"
"((b38_46) b_40)"
"((free=id39_47) free=id_41))"
"(if(variable-reference-constant?(#%variable-reference local-binding-update19.1))"
"(local-binding-update17.1 #f #f free=id39_47 #t #f #f b38_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:108:23_45"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id39_47)"
" b38_46))))"
"        (let-values () (error \"bad binding for free=id:\" b_40))))))"
"(define-values"
"(syntax-module-path-index-shift)"
"(lambda(s_48 from-mpi_49 to-mpi_50)"
"(if(eq? from-mpi_49 to-mpi_50)"
" s_48"
"(let-values(((shift_51)(cons from-mpi_49 to-mpi_50)))"
"(let-values(((shifts40_52) #f))"
"(let-values(((prev-result_53) #f))"
"(let-values(((add-shift_54)"
"(lambda(shifts_55)"
"(if(eq? shifts40_52 shifts_55)"
"(let-values() prev-result_53)"
"(let-values()"
"(let-values(((r_56)(let-values()(cons shift_51 shifts_55))))"
"(begin(set! shifts40_52 shifts_55)(set! prev-result_53 r_56) r_56)))))))"
"(syntax-map"
" s_48"
"(lambda(tail?_57 d_58) d_58)"
"(lambda(s_59 d_60)"
"(let-values(((the-struct_61) s_59))"
"(if(syntax?$1 the-struct_61)"
"(let-values(((content41_62) d_60)((mpi-shifts42_63)(add-shift_54(syntax-mpi-shifts s_59))))"
"(syntax1.1"
" content41_62"
"(syntax-scopes the-struct_61)"
"(syntax-shifted-multi-scopes the-struct_61)"
"(syntax-scope-propagations the-struct_61)"
" mpi-shifts42_63"
"(syntax-bulk-binding-registry the-struct_61)"
"(syntax-srcloc the-struct_61)"
"(syntax-props the-struct_61)"
"(syntax-inspector the-struct_61)"
"(syntax-tamper the-struct_61)))"
"                     (raise-argument-error 'struct-copy \"syntax?\" the-struct_61))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(resolve+shift13.1)"
"(lambda(ambiguous-value1_64"
" ambiguous-value6_65"
" exactly?2_66"
" exactly?7_67"
" extra-shifts5_68"
" extra-shifts10_69"
" immediate?3_70"
" immediate?8_71"
" unbound-sym?4_72"
" unbound-sym?9_73"
" s11_74"
" phase12_75)"
"(let-values(((s_76) s11_74))"
"(let-values(((phase_77) phase12_75))"
"(let-values(((ambiguous-value_78)(if ambiguous-value6_65 ambiguous-value1_64 #f)))"
"(let-values(((exactly?_79)(if exactly?7_67 exactly?2_66 #f)))"
"(let-values(((immediate?_80)(if immediate?8_71 immediate?3_70 exactly?_79)))"
"(let-values(((unbound-sym?_81)(if unbound-sym?9_73 unbound-sym?4_72 #f)))"
"(let-values(((extra-shifts_82)(if extra-shifts10_69 extra-shifts5_68 null)))"
"(let-values()"
"(let-values(((immediate-b_83)"
"(let-values(((...r/syntax/binding.rkt:142:22_85) resolve21.1)"
"((s43_86) s_76)"
"((phase44_87) phase_77)"
"((ambiguous-value45_88) ambiguous-value_78)"
"((exactly?46_89) exactly?_79)"
"((extra-shifts47_90) extra-shifts_82))"
"(if(variable-reference-constant?(#%variable-reference resolve21.1))"
"(resolve19.1"
" ambiguous-value45_88"
" #t"
" exactly?46_89"
" #t"
" extra-shifts47_90"
" #t"
" s43_86"
" phase44_87)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:142:22_85"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(list ambiguous-value45_88 exactly?46_89 extra-shifts47_90)"
" s43_86"
" phase44_87)))))"
"(let-values(((b_84)"
"(if(if immediate-b_83"
"(if(not immediate?_80)(binding-free=id immediate-b_83) #f)"
" #f)"
"(let-values(((...r/syntax/binding.rkt:149:16_91) resolve+shift15.1)"
"((temp48_92)(binding-free=id immediate-b_83))"
"((phase49_93) phase_77)"
"((temp50_94)(append extra-shifts_82(syntax-mpi-shifts s_76)))"
"((ambiguous-value51_95) ambiguous-value_78)"
"((exactly?52_96) exactly?_79)"
"((unbound-sym?53_97) unbound-sym?_81))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" ambiguous-value51_95"
" #t"
" exactly?52_96"
" #t"
" temp50_94"
" #t"
" #f"
" #f"
" unbound-sym?53_97"
" #t"
" temp48_92"
" phase49_93)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:149:16_91"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
"(list ambiguous-value51_95 exactly?52_96 temp50_94 unbound-sym?53_97)"
" temp48_92"
" phase49_93)))"
" immediate-b_83)))"
"(if(module-binding? b_84)"
"(let-values()"
"(let-values(((mpi-shifts_98)(syntax-mpi-shifts s_76)))"
"(if(null? mpi-shifts_98)"
"(let-values() b_84)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:162:6_99) module-binding-update46.1)"
"((b54_100) b_84)"
"((temp55_101)"
"(apply-syntax-shifts(module-binding-module b_84) mpi-shifts_98))"
"((temp56_102)"
"(apply-syntax-shifts"
"(module-binding-nominal-module b_84)"
" mpi-shifts_98))"
"((temp57_103)"
"(if(binding-free=id b_84)"
"(syntax-transfer-shifts(binding-free=id b_84) s_76)"
" #f)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" #f"
" #f"
" temp57_103"
" #t"
" temp55_101"
" #t"
" temp56_102"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b54_100)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:162:6_99"
" keyword-procedure-extract"
" '(#:free=id #:module #:nominal-module)"
" 3)"
" '(#:free=id #:module #:nominal-module)"
"(list temp57_103 temp55_101 temp56_102)"
" b54_100)))))))"
"(if(if(not b_84) unbound-sym?_81 #f)"
"(let-values()(syntax-e$1 s_76))"
"(let-values() b_84)))))))))))))))"
"(define-values"
"(unpack14.1$1)"
"(lambda(given-kws_104 given-args_105 s11_106 phase12_107)"
"(let-values(((ambiguous-value6_108)(if(pair? given-kws_104)(eq? '#:ambiguous-value(car given-kws_104)) #f)))"
"(let-values(((ambiguous-value1_109)(if ambiguous-value6_108(car given-args_105)(void)))"
"((given-kws_110)(if ambiguous-value6_108(cdr given-kws_104) given-kws_104))"
"((given-args_111)(if ambiguous-value6_108(cdr given-args_105) given-args_105)))"
"(let-values(((exactly?7_112)(if(pair? given-kws_110)(eq? '#:exactly?(car given-kws_110)) #f)))"
"(let-values(((exactly?2_113)(if exactly?7_112(car given-args_111)(void)))"
"((given-kws_114)(if exactly?7_112(cdr given-kws_110) given-kws_110))"
"((given-args_115)(if exactly?7_112(cdr given-args_111) given-args_111)))"
"(let-values(((extra-shifts10_116)(if(pair? given-kws_114)(eq? '#:extra-shifts(car given-kws_114)) #f)))"
"(let-values(((extra-shifts5_117)(if extra-shifts10_116(car given-args_115)(void)))"
"((given-kws_118)(if extra-shifts10_116(cdr given-kws_114) given-kws_114))"
"((given-args_119)(if extra-shifts10_116(cdr given-args_115) given-args_115)))"
"(let-values(((immediate?8_120)(if(pair? given-kws_118)(eq? '#:immediate?(car given-kws_118)) #f)))"
"(let-values(((immediate?3_121)(if immediate?8_120(car given-args_119)(void)))"
"((given-kws_122)(if immediate?8_120(cdr given-kws_118) given-kws_118))"
"((given-args_123)(if immediate?8_120(cdr given-args_119) given-args_119)))"
"(let-values(((unbound-sym?9_124)(pair? given-kws_122)))"
"(let-values(((unbound-sym?4_125)(if unbound-sym?9_124(car given-args_123)(void))))"
"(resolve+shift13.1"
" ambiguous-value1_109"
" ambiguous-value6_108"
" exactly?2_113"
" exactly?7_112"
" extra-shifts5_117"
" extra-shifts10_116"
" immediate?3_121"
" immediate?8_120"
" unbound-sym?4_125"
" unbound-sym?9_124"
" s11_106"
" phase12_107)))))))))))))"
"(define-values"
"(resolve+shift15.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_126 given-argc_127)"
"(if(= given-argc_127 4)"
"(let-values(((l1_128) given-kws_126))"
"(let-values(((l1_129)"
"(if(null? l1_128) l1_128(if(eq?(car l1_128) '#:ambiguous-value)(cdr l1_128) l1_128))))"
"(let-values(((l1_130) l1_129))"
"(let-values(((l1_131)(if(null? l1_130) l1_130(if(eq?(car l1_130) '#:exactly?)(cdr l1_130) l1_130))))"
"(let-values(((l1_132) l1_131))"
"(let-values(((l1_133)"
"(if(null? l1_132) l1_132(if(eq?(car l1_132) '#:extra-shifts)(cdr l1_132) l1_132))))"
"(let-values(((l1_134) l1_133))"
"(let-values(((l1_135)"
"(if(null? l1_134)"
" l1_134"
"(if(eq?(car l1_134) '#:immediate?)(cdr l1_134) l1_134))))"
"(let-values(((l1_136) l1_135))"
"(let-values(((l1_137)"
"(if(null? l1_136)"
" l1_136"
"(if(eq?(car l1_136) '#:unbound-sym?)(cdr l1_136) l1_136))))"
"(null? l1_137)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_138 given-args_139 s_140 phase_141)(unpack14.1$1 given-kws_138 given-args_139 s_140 phase_141)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:immediate? #:unbound-sym?)"
"(let-values(((resolve+shift_142)(case-lambda((s_143 phase_144)(unpack14.1$1 null null s_143 phase_144)))))"
" resolve+shift_142)))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_145 shifts_146)"
"(if(null? shifts_146)"
"(let-values() mpi_145)"
"(let-values()"
"(let-values(((shifted-mpi_147)(apply-syntax-shifts mpi_145(cdr shifts_146))))"
"(module-path-index-shift shifted-mpi_147(caar shifts_146)(cdar shifts_146)))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_150 from-mpi_151 to-mpi_152)"
"(if(module-binding? b_150)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:187:4_153) module-binding-update46.1)"
"((b58_154) b_150)"
"((temp59_155)(module-path-index-shift(module-binding-module b_150) from-mpi_151 to-mpi_152))"
"((temp60_156)"
"(module-path-index-shift(module-binding-nominal-module b_150) from-mpi_151 to-mpi_152)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp59_155"
" #t"
" temp60_156"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b58_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:187:4_153"
" keyword-procedure-extract"
" '(#:module #:nominal-module)"
" 3)"
" '(#:module #:nominal-module)"
"(list temp59_155 temp60_156)"
" b58_154))))"
"(let-values() b_150))))"
"(define-values"
"(syntax-transfer-shifts)"
"(lambda(to-s_157 from-s_158)"
"(let-values(((lst_159)(alt-reverse(syntax-mpi-shifts from-s_158))))"
"(begin"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"((letrec-values(((for-loop_160)"
"(lambda(s_161 lst_162)"
"(if(pair? lst_162)"
"(let-values(((shift_163)(unsafe-car lst_162)))"
"(if #t"
"(let-values(((s_164)"
"(let-values(((s_165) s_161))"
"(let-values(((s_166)"
"(let-values()"
"(syntax-module-path-index-shift"
" s_165"
"(car shift_163)"
"(cdr shift_163)))))"
"(values s_166)))))"
"(if #t(for-loop_160 s_164(unsafe-cdr lst_162)) s_164))"
" s_161))"
" s_161))))"
" for-loop_160)"
" to-s_157"
" lst_159)))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module19_167)"
"(lambda(s18_168 source?16_169 source?17_170)"
"(let-values(((s_171) s18_168))"
"(let-values(((source?_172)(if source?17_170 source?16_169 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_171)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_171)))"
"(let-values(((lst_173)(alt-reverse(syntax-mpi-shifts s_171))))"
"(begin"
"(if(list? lst_173)(void)(let-values()(in-list lst_173)))"
"((letrec-values(((for-loop_174)"
"(lambda(result_175 lst_176)"
"(if(pair? lst_176)"
"(let-values(((shift_177)(unsafe-car lst_176)))"
"(if #t"
"(let-values(((result_178)"
"(let-values(((result_179) result_175))"
"(let-values(((result_180)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_181)"
"(car"
" shift_177)))"
"(let-values(((path_182"
" base_183)"
"(1/module-path-index-split"
" from-mpi_181)))"
"(if(not path_182)"
"(if(module-path-index-resolved"
" from-mpi_181)"
"(apply-syntax-shifts"
" from-mpi_181"
"(syntax-mpi-shifts"
" s_171))"
" #f)"
" #f)))))))"
"(values result_180)))))"
"(if(if #t(not((lambda x_184 result_178) shift_177)) #f)"
"(for-loop_174 result_178(unsafe-cdr lst_176))"
" result_178))"
" result_175))"
" result_175))))"
" for-loop_174)"
" #f"
" lst_173))))))))))"
"(case-lambda"
"((s_185)(syntax-source-module19_167 s_185 #f #f))"
"((s_186 source?16_187)(syntax-source-module19_167 s_186 source?16_187 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_188)"
"(begin"
"(if(identifier? id_188)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_188)))"
"(let-values(((the-struct_189)(datum->syntax$1 #f(syntax-e$1 id_188) id_188 id_188)))"
"(if(syntax?$1 the-struct_189)"
"(let-values(((mpi-shifts61_190)(syntax-mpi-shifts id_188)))"
"(syntax1.1"
"(syntax-content the-struct_189)"
"(syntax-scopes the-struct_189)"
"(syntax-shifted-multi-scopes the-struct_189)"
"(syntax-scope-propagations the-struct_189)"
" mpi-shifts61_190"
"(syntax-bulk-binding-registry the-struct_189)"
"(syntax-srcloc the-struct_189)"
"(syntax-props the-struct_189)"
"(syntax-inspector the-struct_189)"
"(syntax-tamper the-struct_189)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_189))))))"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 #t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
"    (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literalss-id)(make-built-in-symbol! 'syntax-literalss))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()(make-struct-type 'provided #f 3 0 #f null 'prefab #f '(0 1 2) #f 'provided))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_32)(if(provided? v_32)(provided-binding v_32) v_32)))"
"(define-values(provided-as-protected?)(lambda(v_33)(if(provided? v_33)(provided-protected? v_33) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_34)(if(provided? v_34)(provided-syntax? v_34) #f)))"
"(define-values"
"(lifted/1.1$27)"
"(make-required"
" 'provide-binding-to-require-binding"
"(case-lambda((self_2 binding/p_3 sym_4)(apply missing-kw self_2 binding/p_3 sym_4 null)))"
" #f"
" #f))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_5 phase-shift4_6 provide-phase-level3_7 self1_8 binding/p9_9 sym10_10)"
"(let-values(((binding/p_11) binding/p9_9))"
"(let-values(((sym_12) sym10_10))"
"(let-values(((self_13) self1_8))"
"(let-values(((mpi_14) mpi2_5))"
"(let-values(((provide-phase-level_15) provide-phase-level3_7))"
"(let-values(((phase-shift_16) phase-shift4_6))"
"(let-values()"
"(let-values(((binding_17)(provided-as-binding binding/p_11)))"
"(let-values(((from-mod_18)(module-binding-module binding_17)))"
"(let-values(((...tax/bulk-binding.rkt:51:2_19) module-binding-update46.1)"
"((binding17_20) binding_17)"
"((temp18_21)(module-path-index-shift from-mod_18 self_13 mpi_14))"
"((mpi19_22) mpi_14)"
"((provide-phase-level20_23) provide-phase-level_15)"
"((sym21_24) sym_12)"
"((phase-shift22_25) phase-shift_16)"
"((temp23_26) #f)"
"((temp24_27)"
"(if(not(provided-as-protected? binding/p_11))"
"(module-binding-extra-inspector binding_17)"
" #f)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" temp24_27"
" #t"
" temp23_26"
" #t"
" #f"
" #f"
" temp18_21"
" #t"
" mpi19_22"
" #t"
" provide-phase-level20_23"
" #t"
" phase-shift22_25"
" #t"
" sym21_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding17_20)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:51:2_19"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 3)"
" '(#:extra-inspector"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" temp24_27"
" temp23_26"
" temp18_21"
" mpi19_22"
" provide-phase-level20_23"
" phase-shift22_25"
" sym21_24)"
" binding17_20))))))))))))))"
"(define-values"
"(unpack12.1$4)"
"(lambda(given-kws_28 given-args_29 binding/p9_30 sym10_31)"
"(let-values(((mpi2_32)(car given-args_29))"
"((given-kws_33)(cdr given-kws_28))"
"((given-args_34)(cdr given-args_29)))"
"(let-values(((phase-shift4_35)(car given-args_34))"
"((given-kws_36)(cdr given-kws_33))"
"((given-args_37)(cdr given-args_34)))"
"(let-values(((provide-phase-level3_38)(car given-args_37))"
"((given-kws_39)(cdr given-kws_36))"
"((given-args_40)(cdr given-args_37)))"
"(let-values(((self1_41)(car given-args_40)))"
"(provide-binding-to-require-binding11.1"
" mpi2_32"
" phase-shift4_35"
" provide-phase-level3_38"
" self1_41"
" binding/p9_30"
" sym10_31)))))))"
"(define-values"
"(provide-binding-to-require-binding13.1)"
"(lifted/1.1$27"
"(lambda(given-kws_42 given-argc_43)"
"(if(= given-argc_43 4)"
"(let-values(((l2_44) given-kws_42))"
"(if(pair? l2_44)"
"(if(eq?(car l2_44) '#:mpi)"
"(let-values(((l2_45)(cdr l2_44)))"
"(if(pair? l2_45)"
"(if(eq?(car l2_45) '#:phase-shift)"
"(let-values(((l2_46)(cdr l2_45)))"
"(if(pair? l2_46)"
"(if(eq?(car l2_46) '#:provide-phase-level)"
"(let-values(((l2_47)(cdr l2_46)))"
"(if(pair? l2_47)(if(eq?(car l2_47) '#:self)(null?(cdr l2_47)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_48 given-args_49 binding/p_50 sym_51)(unpack12.1$4 given-kws_48 given-args_49 binding/p_50 sym_51)))"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_52 make-_53 ?_54 -ref_55 -set!_56)"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 6"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_98 ser_99 reachable-scopes_100)"
"(list*"
" 'deserialize-bulk-binding"
"(ser_99(bulk-binding-mpi b_98))"
"(ser_99(bulk-binding-provide-phase-level b_98))"
"(ser_99(bulk-binding-phase-shift b_98))"
" '(#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_101 mpi-shifts_102)"
"(let-values(((or-part_103)(bulk-binding-provides b_101)))"
"(if or-part_103"
" or-part_103"
"(let-values(((mod-name_104)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_101) mpi-shifts_102))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-registry16.1 b_101)"
"(void)"
"(let-values()"
"(error"
"                                                   \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_104)))"
"(values))))"
"(let-values(((table_105)"
"(bulk-binding-registry-table(bulk-binding-bulk-binding-registry b_101))))"
"(let-values(((bulk-provide_106)(hash-ref table_105 mod-name_104 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_106"
"(void)"
"(let-values()"
"(error"
"                                                         \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_104)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self!"
" b_101"
"(bulk-provide-self bulk-provide_106))"
"(values))))"
"(let-values(((provides_107)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_106)"
"(bulk-binding-provide-phase-level b_101))))"
"(begin(set-bulk-binding-provides! b_101 provides_107) provides_107)))))))))))"
"(lambda(b_108 binding_109 sym_110)"
"(let-values(((...tax/bulk-binding.rkt:105:11_111) provide-binding-to-require-binding13.1)"
"((binding27_112) binding_109)"
"((sym28_113) sym_110)"
"((temp29_114)(bulk-binding-self b_108))"
"((temp30_115)(bulk-binding-mpi b_108))"
"((temp31_116)(bulk-binding-provide-phase-level b_108))"
"((temp32_117)(bulk-binding-phase-shift b_108)))"
"(if(variable-reference-constant?"
"(#%variable-reference provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" temp30_115"
" temp32_117"
" temp31_116"
" temp29_114"
" binding27_112"
" sym28_113)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:105:11_111"
" keyword-procedure-extract"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" 4)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
"(list temp30_115 temp32_117 temp31_116 temp29_114)"
" binding27_112"
" sym28_113)))))))"
"(current-inspector)"
" #f"
" '(2 3 4 5)"
" #f"
" 'bulk-binding))))"
"(values"
" struct:_52"
" make-_53"
" ?_54"
"(make-struct-field-accessor -ref_55 0 'provides)"
"(make-struct-field-accessor -ref_55 1 'self)"
"(make-struct-field-accessor -ref_55 2 'mpi)"
"(make-struct-field-accessor -ref_55 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_55 4 'phase-shift)"
"(make-struct-field-accessor -ref_55 5 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_56 0 'provides)"
"(make-struct-field-mutator -set!_56 1 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(mpi_118 provide-phase-level_119 phase-shift_120 bulk-binding-registry_121)"
"(bulk-binding14.1 #f #f mpi_118 provide-phase-level_119 phase-shift_120 bulk-binding-registry_121)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_122 make-_123 ?_124 -ref_125 -set!_126)"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide))))"
"(values"
" struct:_122"
" make-_123"
" ?_124"
"(make-struct-field-accessor -ref_125 0 'self)"
"(make-struct-field-accessor -ref_125 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_148 make-_149 ?_150 -ref_151 -set!_152)"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry))))"
"(values struct:_148 make-_149 ?_150(make-struct-field-accessor -ref_151 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_169 mod-name_170 self_171 provides_172)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_169)"
" mod-name_170"
"(bulk-provide15.1 self_171 provides_172))))"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(define-values"
"(struct:root-expand-context"
" root-expand-context1.1"
" root-expand-context?"
" root-expand-context-module-scopes"
" root-expand-context-post-expansion-scope"
" root-expand-context-top-level-bind-scope"
" root-expand-context-all-scopes-stx"
" root-expand-context-use-site-scopes"
" root-expand-context-defined-syms"
" root-expand-context-frame-id"
" root-expand-context-counter"
" root-expand-context-lift-key)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'root-expand-context))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-scopes)"
"(make-struct-field-accessor -ref_4 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_4 4 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 5 'defined-syms)"
"(make-struct-field-accessor -ref_4 6 'frame-id)"
"(make-struct-field-accessor -ref_4 7 'counter)"
"(make-struct-field-accessor -ref_4 8 'lift-key))))"
"(define-values"
"(make-root-expand-context10.1)"
"(lambda(all-scopes-stx5_62"
" all-scopes-stx9_63"
" initial-scopes2_64"
" initial-scopes6_65"
" outside-scope3_66"
" outside-scope7_67"
" post-expansion-scope4_68"
" post-expansion-scope8_69)"
"(let-values(((initial-scopes_70)(if initial-scopes6_65 initial-scopes2_64 null)))"
"(let-values(((outside-scope_71)(if outside-scope7_67 outside-scope3_66 top-level-common-scope)))"
"(let-values(((post-expansion-scope_72)"
"(if post-expansion-scope8_69 post-expansion-scope4_68(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_73)(if all-scopes-stx9_63 all-scopes-stx5_62 #f)))"
"(let-values()"
"(let-values(((module-scopes_74)(list* post-expansion-scope_72 outside-scope_71 initial-scopes_70)))"
"(root-expand-context1.1"
" module-scopes_74"
" post-expansion-scope_72"
"(new-scope 'module)"
"(let-values(((or-part_75) all-scopes-stx_73))"
"(if or-part_75 or-part_75(add-scopes empty-syntax module-scopes_74)))"
"(box null)"
"(make-hasheqv)"
"(gensym)"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(unpack11.1)"
"(lambda(given-kws_76 given-args_77)"
"(let-values(((all-scopes-stx9_78)(if(pair? given-kws_76)(eq? '#:all-scopes-stx(car given-kws_76)) #f)))"
"(let-values(((all-scopes-stx5_79)(if all-scopes-stx9_78(car given-args_77)(void)))"
"((given-kws_80)(if all-scopes-stx9_78(cdr given-kws_76) given-kws_76))"
"((given-args_81)(if all-scopes-stx9_78(cdr given-args_77) given-args_77)))"
"(let-values(((initial-scopes6_82)(if(pair? given-kws_80)(eq? '#:initial-scopes(car given-kws_80)) #f)))"
"(let-values(((initial-scopes2_83)(if initial-scopes6_82(car given-args_81)(void)))"
"((given-kws_84)(if initial-scopes6_82(cdr given-kws_80) given-kws_80))"
"((given-args_85)(if initial-scopes6_82(cdr given-args_81) given-args_81)))"
"(let-values(((outside-scope7_86)(if(pair? given-kws_84)(eq? '#:outside-scope(car given-kws_84)) #f)))"
"(let-values(((outside-scope3_87)(if outside-scope7_86(car given-args_85)(void)))"
"((given-kws_88)(if outside-scope7_86(cdr given-kws_84) given-kws_84))"
"((given-args_89)(if outside-scope7_86(cdr given-args_85) given-args_85)))"
"(let-values(((post-expansion-scope8_90)(pair? given-kws_88)))"
"(let-values(((post-expansion-scope4_91)(if post-expansion-scope8_90(car given-args_89)(void))))"
"(make-root-expand-context10.1"
" all-scopes-stx5_79"
" all-scopes-stx9_78"
" initial-scopes2_83"
" initial-scopes6_82"
" outside-scope3_87"
" outside-scope7_86"
" post-expansion-scope4_91"
" post-expansion-scope8_90)))))))))))"
"(define-values"
"(make-root-expand-context12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_92 given-argc_93)"
"(if(= given-argc_93 2)"
"(let-values(((l1_94) given-kws_92))"
"(let-values(((l1_95)(if(null? l1_94) l1_94(if(eq?(car l1_94) '#:all-scopes-stx)(cdr l1_94) l1_94))))"
"(let-values(((l1_96) l1_95))"
"(let-values(((l1_97)(if(null? l1_96) l1_96(if(eq?(car l1_96) '#:initial-scopes)(cdr l1_96) l1_96))))"
"(let-values(((l1_98) l1_97))"
"(let-values(((l1_99)"
"(if(null? l1_98) l1_98(if(eq?(car l1_98) '#:outside-scope)(cdr l1_98) l1_98))))"
"(let-values(((l1_100) l1_99))"
"(let-values(((l1_101)"
"(if(null? l1_100)"
" l1_100"
"(if(eq?(car l1_100) '#:post-expansion-scope)(cdr l1_100) l1_100))))"
"(null? l1_101)))))))))"
" #f))"
"(case-lambda((given-kws_102 given-args_103)(unpack11.1 given-kws_102 given-args_103)))"
" null"
" '(#:all-scopes-stx #:initial-scopes #:outside-scope #:post-expansion-scope)"
"(let-values(((make-root-expand-context_104)(case-lambda(()(unpack11.1 null null)))))"
" make-root-expand-context_104)))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_105 orig-self_106 new-self_107)"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_105))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_105))"
"(syntax-module-path-index-shift(root-expand-context-all-scopes-stx ctx_105) orig-self_106 new-self_107)"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_105)))"
"(let-values(((ht_108)(root-expand-context-defined-syms ctx_105)))"
"(begin"
"(if((lambda(ht_109)(hash? ht_109)) ht_108)(void)(let-values()(default-in-hash ht_108)))"
"((letrec-values(((for-loop_110)"
"(lambda(table_111 i_112)"
"(if i_112"
"(let-values(((phase_113 ht_114)(hash-iterate-key+value ht_108 i_112)))"
"(if #t"
"(let-values(((table_115)"
"(let-values(((table_116) table_111))"
"(let-values(((table_117)"
"(let-values()"
"(let-values(((key_118 val_119)"
"(let-values()"
"(values phase_113 ht_114))))"
"(hash-set table_116 key_118 val_119)))))"
"(values table_117)))))"
"(if #t(for-loop_110 table_115(hash-iterate-next ht_108 i_112)) table_115))"
" table_111))"
" table_111))))"
" for-loop_110)"
" '#hasheqv()"
"(hash-iterate-first ht_108))))"
"(root-expand-context-frame-id ctx_105)"
"(unbox(root-expand-context-counter ctx_105))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_120)"
"(let-values(((vec_121)(if(syntax?$1 vec-s_120)(syntax-e$1 vec-s_120) #f)))"
"(begin"
"(if(if(vector? vec_121)"
"(if(=(vector-length vec_121) 7)"
"(if(syntax?$1(vector-ref vec_121 0))"
"(if(syntax-with-one-scope?(vector-ref vec_121 1))"
"(if(syntax?$1(vector-ref vec_121 2))"
"(if(syntax?$1(vector-ref vec_121 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_121 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_121 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_121 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_120)))"
"(root-expand-context1.1"
"(extract-scope-list(vector-ref vec_121 0))"
"(extract-scope(vector-ref vec_121 1))"
"(new-scope 'module)"
"(vector-ref vec_121 2)"
"(box(extract-scope-list(vector-ref vec_121 3)))"
"(unpack-defined-syms(vector-ref vec_121 4))"
"(syntax-e$1(vector-ref vec_121 5))"
"(box(syntax-e$1(vector-ref vec_121 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_122)"
"(let-values(((ht_123) v_122))"
"(begin"
"(if((lambda(ht_124)(hash? ht_124)) ht_123)(void)(let-values()(default-in-hash ht_123)))"
"((letrec-values(((for-loop_125)"
"(lambda(result_126 i_127)"
"(if i_127"
"(let-values(((phase_128 ht-s_129)(hash-iterate-key+value ht_123 i_127)))"
"(if #t"
"(let-values(((result_130)"
"(let-values(((result_131) result_126))"
"(let-values(((result_132)"
"(let-values()"
"(let-values()"
"(if(phase? phase_128)"
"(if(hash?(syntax-e$1 ht-s_129))"
"(let-values(((ht_133)(syntax-e$1 ht-s_129)))"
"(begin"
"(if((lambda(ht_134)(hash? ht_134))"
" ht_133)"
"(void)"
"(let-values()(default-in-hash ht_133)))"
"((letrec-values(((for-loop_135)"
"(lambda(result_136 i_137)"
"(if i_137"
"(let-values(((sym_138"
" id_139)"
"(hash-iterate-key+value"
" ht_133"
" i_137)))"
"(if #t"
"(let-values(((result_140)"
"(let-values(((result_141)"
" result_136))"
"(let-values(((result_142)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_138)"
"(identifier?"
" id_139)"
" #f)))))"
"(values"
" result_142)))))"
"(if(if #t"
"(not"
"((lambda x_143"
"(not"
" result_140))"
" sym_138"
" id_139))"
" #f)"
"(for-loop_135"
" result_140"
"(hash-iterate-next"
" ht_133"
" i_137))"
" result_140))"
" result_136))"
" result_136))))"
" for-loop_135)"
" #t"
"(hash-iterate-first ht_133))))"
" #f)"
" #f)))))"
"(values result_132)))))"
"(if(if #t(not((lambda x_144(not result_130)) phase_128 ht-s_129)) #f)"
"(for-loop_125 result_130(hash-iterate-next ht_123 i_127))"
" result_130))"
" result_126))"
" result_126))))"
" for-loop_125)"
" #t"
"(hash-iterate-first ht_123))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_145)(map2 generalize-scope(set->list(syntax-scope-set stx_145 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_146)(if(syntax?$1 stx_146)(= 1(set-count(syntax-scope-set stx_146 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_147)(let-values(((s_148)(syntax-scope-set stx_147 0)))(generalize-scope(set-first s_148)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_149)"
"(hash-copy"
"(let-values(((ht_150)(syntax-e$1 v_149)))"
"(begin"
"(if((lambda(ht_151)(hash? ht_151)) ht_150)(void)(let-values()(default-in-hash ht_150)))"
"((letrec-values(((for-loop_152)"
"(lambda(table_153 i_154)"
"(if i_154"
"(let-values(((phase_155 ht-s_156)(hash-iterate-key+value ht_150 i_154)))"
"(if #t"
"(let-values(((table_157)"
"(let-values(((table_158) table_153))"
"(let-values(((table_159)"
"(let-values()"
"(let-values(((key_160 val_161)"
"(let-values()"
"(values"
" phase_155"
"(hash-copy"
"(let-values(((ht_162)"
"(syntax-e$1"
" ht-s_156)))"
"(begin"
"(if((lambda(ht_163)"
"(hash? ht_163))"
" ht_162)"
"(void)"
"(let-values()"
"(default-in-hash ht_162)))"
"((letrec-values(((for-loop_164)"
"(lambda(table_165"
" i_166)"
"(if i_166"
"(let-values(((sym_167"
" id_168)"
"(hash-iterate-key+value"
" ht_162"
" i_166)))"
"(if #t"
"(let-values(((table_169)"
"(let-values(((table_170)"
" table_165))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((key_172"
" val_173)"
"(let-values()"
"(values"
" sym_167"
" id_168))))"
"(hash-set"
" table_170"
" key_172"
" val_173)))))"
"(values"
" table_171)))))"
"(if #t"
"(for-loop_164"
" table_169"
"(hash-iterate-next"
" ht_162"
" i_166))"
" table_169))"
" table_165))"
" table_165))))"
" for-loop_164)"
" '#hash()"
"(hash-iterate-first"
" ht_162)))))))))"
"(hash-set table_158 key_160 val_161)))))"
"(values table_159)))))"
"(if #t(for-loop_152 table_157(hash-iterate-next ht_150 i_154)) table_157))"
" table_153))"
" table_153))))"
" for-loop_152)"
" '#hasheqv()"
"(hash-iterate-first ht_150)))))))"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/primitive->compiled-position)(hash-ref linklet-primitive-table 'primitive->compiled-position #f))"
"(define-values(1/compiled-position->primitive)(hash-ref linklet-primitive-table 'compiled-position->primitive #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/recompile-linklet)(hash-ref linklet-primitive-table 'recompile-linklet #f))"
"(define-values(1/eval-linklet)(hash-ref linklet-primitive-table 'eval-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_27 proc_28)"
"(let-values(((lock-box_29)(module-registry-lock-box r_27)))"
"((letrec-values(((loop_30)"
"(lambda()"
"(let-values(((v_31)(unbox lock-box_29)))"
"(if(not v_31)"
"(let-values()"
"(let-values(((lock_32)(cons(make-semaphore)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_29 v_31 lock_32)"
"(let-values()(begin(proc_28) void))"
"(let-values() loop_30)))"
"(lambda()(semaphore-post(car lock_32)))))))"
"(if(eq?(current-thread)(cdr v_31))"
"(let-values()(proc_28))"
"(let-values()(begin(sync(car v_31)(cdr v_31))(loop_30)))))))))"
" loop_30)))))"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" namespace-module-registry$1"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_92 port_93 mode_94)"
"                       (let-values ((() (begin (write-string \"#<namespace\" port_93) (values))))"
"(let-values(((n_95)(namespace-source-name ns_92)))"
"(let-values((()"
"(begin"
"(if n_95"
"                                             (let-values () (fprintf port_93 \":~a\" (namespace->name ns_92)))"
"(void))"
"(values))))"
"(let-values(((phase_96)(namespace-phase ns_92)))"
"(begin"
"                                 (if (zero-phase? phase_96) (void) (let-values () (fprintf port_93 \":~s\" phase_96)))"
"                                 (write-string \">\" port_93)))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'source-name)"
"(make-struct-field-accessor -ref_4 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 3 'phase)"
"(make-struct-field-accessor -ref_4 4 '0-phase)"
"(make-struct-field-accessor -ref_4 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 7 'module-registry)"
"(make-struct-field-accessor -ref_4 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 10 'root-namespace)"
"(make-struct-field-accessor -ref_4 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 12 'inspector)"
"(make-struct-field-accessor -ref_4 13 'available-module-instances)"
"(make-struct-field-accessor -ref_4 14 'module-instances)"
"(make-struct-field-mutator -set!_5 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_97 make-_98 ?_99 -ref_100 -set!_101)"
"(let-values()"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions))))"
"(values"
" struct:_97"
" make-_98"
" ?_99"
"(make-struct-field-accessor -ref_100 0 'variables)"
"(make-struct-field-accessor -ref_100 1 'transformers))))"
"(define-values"
"(make-namespace)"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f #f #f)"
"(new-namespace11.1)))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_123"
" register?6_124"
" root-expand-ctx3_125"
" root-expand-ctx5_126"
" share-from-ns7_127"
" share-from-ns8_128)"
"(let-values(((share-from-ns_129)(if share-from-ns8_128 share-from-ns7_127 #f)))"
"(let-values(((root-expand-ctx_130)"
"(if root-expand-ctx5_126"
" root-expand-ctx3_125"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((register?_131)(if register?6_124 register?4_123 #t)))"
"(let-values()"
"(let-values(((phase_132)(if share-from-ns_129(namespace-phase share-from-ns_129) 0)))"
"(let-values(((ns_133)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_130)"
" phase_132"
" phase_132"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_129"
"(namespace-module-registry$1 share-from-ns_129)"
"(make-module-registry))"
"(if share-from-ns_129"
"(namespace-bulk-binding-registry share-from-ns_129)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_129"
"(let-values(((or-part_134)(namespace-root-namespace share-from-ns_129)))"
"(if or-part_134 or-part_134 share-from-ns_129))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_129"
"(namespace-available-module-instances share-from-ns_129)"
"(make-hasheqv))"
"(if share-from-ns_129(namespace-module-instances share-from-ns_129)(make-hasheqv)))))"
"(begin"
"(if register?_131"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_133) phase_132 ns_133))"
"(void))"
" ns_133)))))))))"
"(define-values"
"(unpack10.1$2)"
"(lambda(given-kws_135 given-args_136 share-from-ns7_137 share-from-ns8_138)"
"(let-values(((register?6_139)(if(pair? given-kws_135)(eq? '#:register?(car given-kws_135)) #f)))"
"(let-values(((register?4_140)(if register?6_139(car given-args_136)(void)))"
"((given-kws_141)(if register?6_139(cdr given-kws_135) given-kws_135))"
"((given-args_142)(if register?6_139(cdr given-args_136) given-args_136)))"
"(let-values(((root-expand-ctx5_143)(pair? given-kws_141)))"
"(let-values(((root-expand-ctx3_144)(if root-expand-ctx5_143(car given-args_142)(void))))"
"(new-namespace9.1"
" register?4_140"
" register?6_139"
" root-expand-ctx3_144"
" root-expand-ctx5_143"
" share-from-ns7_137"
" share-from-ns8_138)))))))"
"(define-values"
"(new-namespace11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_145 given-argc_146)"
"(if(if(>= given-argc_146 2)(<= given-argc_146 3) #f)"
"(let-values(((l1_147) given-kws_145))"
"(let-values(((l1_148)(if(null? l1_147) l1_147(if(eq?(car l1_147) '#:register?)(cdr l1_147) l1_147))))"
"(let-values(((l1_149) l1_148))"
"(let-values(((l1_150)"
"(if(null? l1_149) l1_149(if(eq?(car l1_149) '#:root-expand-ctx)(cdr l1_149) l1_149))))"
"(null? l1_150)))))"
" #f))"
"(case-lambda"
"((given-kws_151 given-args_152)(unpack10.1$2 given-kws_151 given-args_152 #f #f))"
"((given-kws_153 given-args_154 share-from-ns7_155)"
"(unpack10.1$2 given-kws_153 given-args_154 share-from-ns7_155 #t)))"
" null"
" '(#:register? #:root-expand-ctx)"
"(let-values(((new-namespace_156)"
"(case-lambda"
"(()(unpack10.1$2 null null #f #f))"
"((share-from-ns7_157)(unpack10.1$2 null null share-from-ns7_157 #t)))))"
" new-namespace_156)))"
"(define-values(1/current-namespace)(make-parameter(make-namespace)))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_158)(force(unbox(namespace-root-expand-ctx ns_158)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_159 root-ctx_160)(set-box!(namespace-root-expand-ctx ns_159) root-ctx_160)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_161 name_162)"
"(let-values(((or-part_163)(hash-ref(namespace-submodule-declarations ns_161) name_162 #f)))"
"(if or-part_163"
" or-part_163"
"(hash-ref(module-registry-declarations(namespace-module-registry$1 ns_161)) name_162 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_164 phase_165)"
"(let-values(((or-part_166)(hash-ref(namespace-phase-to-namespace ns_164) phase_165 #f)))"
"(if or-part_166"
" or-part_166"
"(let-values(((p-ns_167)"
"(let-values(((the-struct_168) ns_164))"
"(if(1/namespace? the-struct_168)"
"(let-values(((phase16_169) phase_165))"
"(namespace1.1"
"(namespace-mpi the-struct_168)"
"(namespace-source-name the-struct_168)"
"(namespace-root-expand-ctx the-struct_168)"
" phase16_169"
"(namespace-0-phase the-struct_168)"
"(namespace-phase-to-namespace the-struct_168)"
"(namespace-phase-level-to-definitions the-struct_168)"
"(namespace-module-registry$1 the-struct_168)"
"(namespace-bulk-binding-registry the-struct_168)"
"(namespace-submodule-declarations the-struct_168)"
"(namespace-root-namespace the-struct_168)"
"(namespace-declaration-inspector the-struct_168)"
"(namespace-inspector the-struct_168)"
"(namespace-available-module-instances the-struct_168)"
"(namespace-module-instances the-struct_168)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_168)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_164) phase_165 p-ns_167) p-ns_167))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_170)"
"(let-values(((n_171)(namespace-source-name ns_170)))"
"(let-values(((s_172)"
"(if(not n_171)"
"(let-values() 'top-level)"
"(if(symbol? n_171)"
"                        (let-values () (format \"'~s\" n_171))"
"                        (let-values () (string-append \"\\\"\" (path->string n_171) \"\\\"\"))))))"
"(let-values(((r_173)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_170)))))"
"          (if (pair? r_173) (string-append \"(submod \" s_172 \" \" (substring (format \"~s\" (cdr r_173)) 1)) s_172))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_174 phase-level_175)"
"(let-values(((d_176)(hash-ref(namespace-phase-level-to-definitions ns_174) phase-level_175 #f)))"
"(let-values(((or-part_177) d_176))"
"(if or-part_177"
" or-part_177"
"(let-values()"
"(let-values(((p-ns_178)"
"(namespace->namespace-at-phase ns_174(phase+(namespace-0-phase ns_174) phase-level_175))))"
"(let-values(((d_179)"
"(definitions2.1(1/make-instance(namespace->name p-ns_178) p-ns_178)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_174) phase-level_175 d_179) d_179)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(lambda(ns_180 phase-level_181 name_182 val_183)"
"(let-values(((d_184)(namespace->definitions ns_180 phase-level_181)))"
"(1/instance-set-variable-value!(definitions-variables d_184) name_182 val_183))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_185 phase-level_186 name_187)"
"(let-values(((d_188)(namespace->definitions ns_185 phase-level_186)))"
"(1/instance-unset-variable!(definitions-variables d_188) name_187))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_189 phase-level_190 name_191 val_192)"
"(let-values(((d_193)(namespace->definitions ns_189(add1 phase-level_190))))"
"(hash-set!(definitions-transformers d_193) name_191 val_192))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_194 phase-level_195 name_196 fail-k_197)"
"(let-values(((d_198)(namespace->definitions ns_194 phase-level_195)))"
"(1/instance-variable-value(definitions-variables d_198) name_196 fail-k_197))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_199 phase-level_200 name_201 fail-k_202)"
"(let-values(((d_203)(namespace->definitions ns_199(add1 phase-level_200))))"
"(hash-ref(definitions-transformers d_203) name_201 fail-k_202))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_204 phase-shift_205)(definitions-variables(namespace->definitions ns_204 phase-shift_205))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_206 b-ns_207)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_206)(namespace-0-phase a-ns_206) 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_207)(namespace-0-phase b-ns_207) 'no-b))))"
"(define-values(original-property-sym)(gensym 'original))"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 #f))))"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values(((new-stx_6) new-stx3_2))"
"(let-values(((old-stx_7) old-stx4_3))"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) #f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()(if id_8(syntax-property$1 new-stx_6 'origin(list id_8)) new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values(((the-struct_14) new-stx_6))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-bulk-binding-registry the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values(((the-struct_16) new-stx_6))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props8_17) old-props_10))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-bulk-binding-registry the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values(((ht_20) old-props-with-origin_18))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash? ht_21)(immutable? ht_21) #f))"
" ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_20"
" i_24)))"
"(if #t"
"(let-values(((new-props_27)"
"(let-values(((new-props_28)"
" new-props_23))"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(if #t"
"(for-loop_22"
" new-props_27"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))"
" new-props_27))"
" new-props_23))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(unsafe-immutable-hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values(((ht_31) new-props_11))"
"(begin"
"(if((lambda(ht_32)"
"(if(hash? ht_32)(immutable? ht_32) #f))"
" ht_31)"
"(void)"
"(let-values()(default-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_35)))"
"(if #t"
"(let-values(((old-props_38)"
"(let-values(((old-props_39)"
" old-props_34))"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(if #t"
"(for-loop_33"
" old-props_38"
"(unsafe-immutable-hash-iterate-next"
" ht_31"
" i_35))"
" old-props_38))"
" old-props_34))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(unsafe-immutable-hash-iterate-first ht_31))))))))"
"(let-values(((the-struct_42) new-stx_6))"
"(if(syntax?$1 the-struct_42)"
"(let-values(((props9_43) updated-props_19))"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-bulk-binding-registry the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 #f #f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_52 new-stx_53)"
"(let-values(((lst_54) old-stxes_52))"
"(begin"
"(if(list? lst_54)(void)(let-values()(in-list lst_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(new-stx_56 lst_57)"
"(if(pair? lst_57)"
"(let-values(((old-stx_58)(unsafe-car lst_57)))"
"(if #t"
"(let-values(((new-stx_59)"
"(let-values(((new-stx_60) new-stx_56))"
"(let-values(((new-stx_61)"
"(let-values()"
"(syntax-track-origin$1 new-stx_60 old-stx_58))))"
"(values new-stx_61)))))"
"(if #t(for-loop_55 new-stx_59(unsafe-cdr lst_57)) new-stx_59))"
" new-stx_56))"
" new-stx_56))))"
" for-loop_55)"
" new-stx_53"
" lst_54)))))"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list(cons prop:exn:srclocs(lambda(e_24)(1/exn:fail:syntax-exprs e_24))))"
" #f"
" #f"
" '(0)"
"(lambda(str_25 cm_26 exprs_27 info_28)"
"(begin"
"(if(if(list? exprs_27)(andmap2 syntax?$1 exprs_27) #f)"
"(void)"
"                         (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_27)))"
"(values str_25 cm_26 exprs_27)))"
" 'exn:fail:syntax))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_29 make-_30 ?_31 -ref_32 -set!_33)"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound))))"
"(values struct:_29 make-_30 ?_31)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_45)"
"(lambda(given-name9_46"
" message10_47"
" expr1_48"
" sub-expr2_49"
" extra-sources3_50"
" message-suffix4_51"
" expr5_52"
" sub-expr6_53"
" extra-sources7_54"
" message-suffix8_55)"
"(let-values(((given-name_56) given-name9_46))"
"(let-values(((message_57) message10_47))"
"(let-values(((expr_58)(if expr5_52 expr1_48 #f)))"
"(let-values(((sub-expr_59)(if sub-expr6_53 sub-expr2_49 #f)))"
"(let-values(((extra-sources_60)(if extra-sources7_54 extra-sources3_50 null)))"
"                            (let-values (((message-suffix_61) (if message-suffix8_55 message-suffix4_51 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax"
" given-name_56"
" message_57"
" expr_58"
" sub-expr_59"
" extra-sources_60"
" message-suffix_61)))))))))))"
"(case-lambda"
"((given-name_62 message_63)(raise-syntax-error11_45 given-name_62 message_63 #f #f #f #f #f #f #f #f))"
"((given-name_64 message_65 expr_66 sub-expr_67 extra-sources_68 message-suffix4_69)"
"(raise-syntax-error11_45"
" given-name_64"
" message_65"
" expr_66"
" sub-expr_67"
" extra-sources_68"
" message-suffix4_69"
" #t"
" #t"
" #t"
" #t))"
"((given-name_70 message_71 expr_72 sub-expr_73 extra-sources3_74)"
"(raise-syntax-error11_45 given-name_70 message_71 expr_72 sub-expr_73 extra-sources3_74 #f #t #t #t #f))"
"((given-name_75 message_76 expr_77 sub-expr2_78)"
"(raise-syntax-error11_45 given-name_75 message_76 expr_77 sub-expr2_78 #f #f #t #t #f #f))"
"((given-name_79 message_80 expr1_81)"
"(raise-syntax-error11_45 given-name_79 message_80 expr1_81 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_82)"
"(lambda(given-name21_83"
" message22_84"
" expr13_85"
" sub-expr14_86"
" extra-sources15_87"
" message-suffix16_88"
" expr17_89"
" sub-expr18_90"
" extra-sources19_91"
" message-suffix20_92)"
"(let-values(((given-name_93) given-name21_83))"
"(let-values(((message_94) message22_84))"
"(let-values(((expr_95)(if expr17_89 expr13_85 #f)))"
"(let-values(((sub-expr_96)(if sub-expr18_90 sub-expr14_86 #f)))"
"(let-values(((extra-sources_97)(if extra-sources19_91 extra-sources15_87 null)))"
"                            (let-values (((message-suffix_98) (if message-suffix20_92 message-suffix16_88 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound"
" given-name_93"
" message_94"
" expr_95"
" sub-expr_96"
" extra-sources_97"
" message-suffix_98)))))))))))"
"(case-lambda"
"((given-name_99 message_100)(raise-unbound-syntax-error23_82 given-name_99 message_100 #f #f #f #f #f #f #f #f))"
"((given-name_101 message_102 expr_103 sub-expr_104 extra-sources_105 message-suffix16_106)"
"(raise-unbound-syntax-error23_82"
" given-name_101"
" message_102"
" expr_103"
" sub-expr_104"
" extra-sources_105"
" message-suffix16_106"
" #t"
" #t"
" #t"
" #t))"
"((given-name_107 message_108 expr_109 sub-expr_110 extra-sources15_111)"
"(raise-unbound-syntax-error23_82"
" given-name_107"
" message_108"
" expr_109"
" sub-expr_110"
" extra-sources15_111"
" #f"
" #t"
" #t"
" #t"
" #f))"
"((given-name_112 message_113 expr_114 sub-expr14_115)"
"(raise-unbound-syntax-error23_82 given-name_112 message_113 expr_114 sub-expr14_115 #f #f #t #t #f #f))"
"((given-name_116 message_117 expr13_118)"
"(raise-unbound-syntax-error23_82 given-name_116 message_117 expr13_118 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_119 given-name_120 message_121 expr_122 sub-expr_123 extra-sources_124 message-suffix_125)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_130)(not given-name_120)))"
"(if or-part_130 or-part_130(symbol? given-name_120)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_120)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_121)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_121)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_124)(andmap2 syntax?$1 extra-sources_124) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_124)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_125)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_125)))"
"(values))))"
"(let-values(((name_126)"
"(format"
"                           \"~a\""
"(let-values(((or-part_131) given-name_120))"
"(if or-part_131"
" or-part_131"
"(let-values(((or-part_132)(extract-form-name expr_122)))"
"(if or-part_132 or-part_132 '?)))))))"
"(let-values(((at-message_127)"
"(let-values(((or-part_133)"
"(if sub-expr_123"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_123)))"
" #f)"
" #f)))"
"                              (if or-part_133 or-part_133 \"\"))))"
"(let-values(((in-message_128)"
"(let-values(((or-part_134)"
"(if expr_122"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_122)))"
" #f)"
" #f)))"
"                                (if or-part_134 or-part_134 \"\"))))"
"(let-values(((src-loc-str_129)"
"(let-values(((or-part_135)(extract-source-location sub-expr_123)))"
"(if or-part_135"
" or-part_135"
"(let-values(((or-part_136)(extract-source-location expr_122)))"
"                                      (if or-part_136 or-part_136 \"\"))))))"
"(raise"
"(exn:fail:syntax_119"
"(string-append"
" src-loc-str_129"
" name_126"
"                       \": \""
" message_121"
" at-message_127"
" in-message_128"
" message-suffix_125)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_137) sub-expr_123))(if or-part_137 or-part_137 expr_122))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_138) sub-expr_123))(if or-part_138 or-part_138 expr_122)))"
" extra-sources_124)"
" extra-sources_124))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_139)"
"(if(syntax?$1 s_139)"
"(let-values()"
"(let-values(((e_140)(syntax-e$1 s_139)))"
"(if(symbol? e_140)"
"(let-values() e_140)"
"(if(if(pair? e_140)(identifier?(car e_140)) #f)"
"(let-values()(syntax-e$1(car e_140)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_141)"
"(if(syntax?$1 s_141)"
"(if(syntax-srcloc s_141)"
"        (let-values (((str_142) (srcloc->string (syntax-srcloc s_141)))) (if str_142 (string-append str_142 \": \") #f))"
" #f)"
" #f)))"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 18"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17)"
" #f"
" 'module))))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 0 'source-name)"
"(make-struct-field-accessor -ref_8 1 'self)"
"(make-struct-field-accessor -ref_8 2 'requires)"
"(make-struct-field-accessor -ref_8 3 'provides)"
"(make-struct-field-accessor -ref_8 4 'access)"
"(make-struct-field-accessor -ref_8 5 'language-info)"
"(make-struct-field-accessor -ref_8 6 'min-phase-level)"
"(make-struct-field-accessor -ref_8 7 'max-phase-level)"
"(make-struct-field-accessor -ref_8 8 'prepare-instance)"
"(make-struct-field-accessor -ref_8 9 'instantiate-phase)"
"(make-struct-field-accessor -ref_8 10 'primitive?)"
"(make-struct-field-accessor -ref_8 11 'predefined?)"
"(make-struct-field-accessor -ref_8 12 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_8 13 'no-protected?)"
"(make-struct-field-accessor -ref_8 14 'inspector)"
"(make-struct-field-accessor -ref_8 15 'submodule-names)"
"(make-struct-field-accessor -ref_8 16 'supermodule-name)"
"(make-struct-field-accessor -ref_8 17 'get-all-variables)"
"(make-struct-field-mutator -set!_9 4 'access))))"
"(define-values"
"(lifted/1.1$24)"
"(make-required 'make-module(case-lambda((self_111)(apply missing-kw self_111 null))) #f #f))"
"(define-values"
"(make-module34.1)"
"(lambda(cross-phase-persistent?13_112"
" cross-phase-persistent?29_113"
" get-all-variables17_114"
" get-all-variables33_115"
" instantiate-phase-callback8_116"
" language-info10_117"
" language-info26_118"
" max-phase-level7_119"
" max-phase-level23_120"
" min-phase-level6_121"
" min-phase-level22_122"
" no-protected?14_123"
" no-protected?30_124"
" predefined?12_125"
" predefined?28_126"
" prepare-instance-callback9_127"
" prepare-instance-callback25_128"
" primitive?11_129"
" primitive?27_130"
" provides5_131"
" requires4_132"
" requires20_133"
" self3_134"
" source-name2_135"
" source-name18_136"
" submodule-names15_137"
" submodule-names31_138"
" supermodule-name16_139"
" supermodule-name32_140)"
"(let-values(((source-name_141)(if source-name18_136 source-name2_135 #f)))"
"(let-values(((self_142) self3_134))"
"(let-values(((requires_143)(if requires20_133 requires4_132 null)))"
"(let-values(((provides_144) provides5_131))"
"(let-values(((min-phase-level_145)(if min-phase-level22_122 min-phase-level6_121 0)))"
"(let-values(((max-phase-level_146)(if max-phase-level23_120 max-phase-level7_119 0)))"
"(let-values(((instantiate-phase_147) instantiate-phase-callback8_116))"
"(let-values(((prepare-instance_148)"
"(if prepare-instance-callback25_128 prepare-instance-callback9_127 void)))"
"(let-values(((language-info_149)(if language-info26_118 language-info10_117 #f)))"
"(let-values(((primitive?_150)(if primitive?27_130 primitive?11_129 #f)))"
"(let-values(((predefined?_151)(if predefined?28_126 predefined?12_125 #f)))"
"(let-values(((cross-phase-persistent?_152)"
"(if cross-phase-persistent?29_113"
" cross-phase-persistent?13_112"
" primitive?_150)))"
"(let-values(((no-protected?_153)(if no-protected?30_124 no-protected?14_123 #f)))"
"(let-values(((submodule-names_154)"
"(if submodule-names31_138 submodule-names15_137 null)))"
"(let-values(((supermodule-name_155)"
"(if supermodule-name32_140 supermodule-name16_139 #f)))"
"(let-values(((get-all-variables_156)"
"(if get-all-variables33_115 get-all-variables17_114(lambda() null))))"
"(let-values()"
"(module1.1"
" source-name_141"
" self_142"
" requires_143"
" provides_144"
" #f"
" language-info_149"
" min-phase-level_145"
" max-phase-level_146"
" prepare-instance_148"
" instantiate-phase_147"
" primitive?_150"
" predefined?_151"
" cross-phase-persistent?_152"
" no-protected?_153"
"(current-code-inspector)"
" submodule-names_154"
" supermodule-name_155"
" get-all-variables_156))))))))))))))))))))"
"(define-values"
"(unpack35.1)"
"(lambda(given-kws_157 given-args_158)"
"(let-values(((cross-phase-persistent?29_159)"
"(if(pair? given-kws_157)(eq? '#:cross-phase-persistent?(car given-kws_157)) #f)))"
"(let-values(((cross-phase-persistent?13_160)(if cross-phase-persistent?29_159(car given-args_158)(void)))"
"((given-kws_161)(if cross-phase-persistent?29_159(cdr given-kws_157) given-kws_157))"
"((given-args_162)(if cross-phase-persistent?29_159(cdr given-args_158) given-args_158)))"
"(let-values(((get-all-variables33_163)"
"(if(pair? given-kws_161)(eq? '#:get-all-variables(car given-kws_161)) #f)))"
"(let-values(((get-all-variables17_164)(if get-all-variables33_163(car given-args_162)(void)))"
"((given-kws_165)(if get-all-variables33_163(cdr given-kws_161) given-kws_161))"
"((given-args_166)(if get-all-variables33_163(cdr given-args_162) given-args_162)))"
"(let-values(((instantiate-phase-callback8_167)(car given-args_166))"
"((given-kws_168)(cdr given-kws_165))"
"((given-args_169)(cdr given-args_166)))"
"(let-values(((language-info26_170)"
"(if(pair? given-kws_168)(eq? '#:language-info(car given-kws_168)) #f)))"
"(let-values(((language-info10_171)(if language-info26_170(car given-args_169)(void)))"
"((given-kws_172)(if language-info26_170(cdr given-kws_168) given-kws_168))"
"((given-args_173)(if language-info26_170(cdr given-args_169) given-args_169)))"
"(let-values(((max-phase-level23_174)"
"(if(pair? given-kws_172)(eq? '#:max-phase-level(car given-kws_172)) #f)))"
"(let-values(((max-phase-level7_175)(if max-phase-level23_174(car given-args_173)(void)))"
"((given-kws_176)(if max-phase-level23_174(cdr given-kws_172) given-kws_172))"
"((given-args_177)(if max-phase-level23_174(cdr given-args_173) given-args_173)))"
"(let-values(((min-phase-level22_178)"
"(if(pair? given-kws_176)(eq? '#:min-phase-level(car given-kws_176)) #f)))"
"(let-values(((min-phase-level6_179)(if min-phase-level22_178(car given-args_177)(void)))"
"((given-kws_180)(if min-phase-level22_178(cdr given-kws_176) given-kws_176))"
"((given-args_181)(if min-phase-level22_178(cdr given-args_177) given-args_177)))"
"(let-values(((no-protected?30_182)"
"(if(pair? given-kws_180)(eq? '#:no-protected?(car given-kws_180)) #f)))"
"(let-values(((no-protected?14_183)(if no-protected?30_182(car given-args_181)(void)))"
"((given-kws_184)(if no-protected?30_182(cdr given-kws_180) given-kws_180))"
"((given-args_185)"
"(if no-protected?30_182(cdr given-args_181) given-args_181)))"
"(let-values(((predefined?28_186)"
"(if(pair? given-kws_184)(eq? '#:predefined?(car given-kws_184)) #f)))"
"(let-values(((predefined?12_187)(if predefined?28_186(car given-args_185)(void)))"
"((given-kws_188)(if predefined?28_186(cdr given-kws_184) given-kws_184))"
"((given-args_189)"
"(if predefined?28_186(cdr given-args_185) given-args_185)))"
"(let-values(((prepare-instance-callback25_190)"
"(if(pair? given-kws_188)"
"(eq? '#:prepare-instance-callback(car given-kws_188))"
" #f)))"
"(let-values(((prepare-instance-callback9_191)"
"(if prepare-instance-callback25_190(car given-args_189)(void)))"
"((given-kws_192)"
"(if prepare-instance-callback25_190"
"(cdr given-kws_188)"
" given-kws_188))"
"((given-args_193)"
"(if prepare-instance-callback25_190"
"(cdr given-args_189)"
" given-args_189)))"
"(let-values(((primitive?27_194)"
"(if(pair? given-kws_192)"
"(eq? '#:primitive?(car given-kws_192))"
" #f)))"
"(let-values(((primitive?11_195)"
"(if primitive?27_194(car given-args_193)(void)))"
"((given-kws_196)"
"(if primitive?27_194(cdr given-kws_192) given-kws_192))"
"((given-args_197)"
"(if primitive?27_194(cdr given-args_193) given-args_193)))"
"(let-values(((provides5_198)(car given-args_197))"
"((given-kws_199)(cdr given-kws_196))"
"((given-args_200)(cdr given-args_197)))"
"(let-values(((requires20_201)"
"(if(pair? given-kws_199)"
"(eq? '#:requires(car given-kws_199))"
" #f)))"
"(let-values(((requires4_202)"
"(if requires20_201(car given-args_200)(void)))"
"((given-kws_203)"
"(if requires20_201(cdr given-kws_199) given-kws_199))"
"((given-args_204)"
"(if requires20_201(cdr given-args_200) given-args_200)))"
"(let-values(((self3_205)(car given-args_204))"
"((given-kws_206)(cdr given-kws_203))"
"((given-args_207)(cdr given-args_204)))"
"(let-values(((source-name18_208)"
"(if(pair? given-kws_206)"
"(eq? '#:source-name(car given-kws_206))"
" #f)))"
"(let-values(((source-name2_209)"
"(if source-name18_208(car given-args_207)(void)))"
"((given-kws_210)"
"(if source-name18_208"
"(cdr given-kws_206)"
" given-kws_206))"
"((given-args_211)"
"(if source-name18_208"
"(cdr given-args_207)"
" given-args_207)))"
"(let-values(((submodule-names31_212)"
"(if(pair? given-kws_210)"
"(eq? '#:submodule-names(car given-kws_210))"
" #f)))"
"(let-values(((submodule-names15_213)"
"(if submodule-names31_212"
"(car given-args_211)"
"(void)))"
"((given-kws_214)"
"(if submodule-names31_212"
"(cdr given-kws_210)"
" given-kws_210))"
"((given-args_215)"
"(if submodule-names31_212"
"(cdr given-args_211)"
" given-args_211)))"
"(let-values(((supermodule-name32_216)(pair? given-kws_214)))"
"(let-values(((supermodule-name16_217)"
"(if supermodule-name32_216"
"(car given-args_215)"
"(void))))"
"(make-module34.1"
" cross-phase-persistent?13_160"
" cross-phase-persistent?29_159"
" get-all-variables17_164"
" get-all-variables33_163"
" instantiate-phase-callback8_167"
" language-info10_171"
" language-info26_170"
" max-phase-level7_175"
" max-phase-level23_174"
" min-phase-level6_179"
" min-phase-level22_178"
" no-protected?14_183"
" no-protected?30_182"
" predefined?12_187"
" predefined?28_186"
" prepare-instance-callback9_191"
" prepare-instance-callback25_190"
" primitive?11_195"
" primitive?27_194"
" provides5_198"
" requires4_202"
" requires20_201"
" self3_205"
" source-name2_209"
" source-name18_208"
" submodule-names15_213"
" submodule-names31_212"
" supermodule-name16_217"
" supermodule-name32_216))))))))))))))))))))))))))))))))"
"(define-values"
"(make-module36.1)"
"(lifted/1.1$24"
"(lambda(given-kws_218 given-argc_219)"
"(if(= given-argc_219 2)"
"(subsets?"
" '(#:instantiate-phase-callback #:provides #:self)"
" given-kws_218"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name))"
" #f))"
"(case-lambda((given-kws_220 given-args_221)(unpack35.1 given-kws_220 given-args_221)))"
" '(#:instantiate-phase-callback #:provides #:self)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)))"
"(define-values"
"(struct:module-instance"
" module-instance37.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_222 make-_223 ?_224 -ref_225 -set!_226)"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance))))"
"(values"
" struct:_222"
" make-_223"
" ?_224"
"(make-struct-field-accessor -ref_225 0 'namespace)"
"(make-struct-field-accessor -ref_225 1 'module)"
"(make-struct-field-accessor -ref_225 2 'shifted-requires)"
"(make-struct-field-accessor -ref_225 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_225 4 'made-available?)"
"(make-struct-field-accessor -ref_225 5 'attached?)"
"(make-struct-field-accessor -ref_225 6 'data-box)"
"(make-struct-field-mutator -set!_226 2 'shifted-requires)"
"(make-struct-field-mutator -set!_226 4 'made-available?)"
"(make-struct-field-mutator -set!_226 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_273 m_274)(module-instance37.1 m-ns_273 m_274 #f(make-hasheqv) #f #f(box #f))))"
"(define-values"
"(lifted/2.1$9)"
"(make-required"
" 'make-module-namespace"
"(case-lambda((self_275 ns_276)(apply missing-kw self_275 ns_276 null)))"
" #f"
" #f))"
"(define-values"
"(make-module-namespace45.1)"
"(lambda(for-submodule?40_277 mpi38_278 root-expand-context39_279 ns44_280)"
"(let-values(((ns_281) ns44_280))"
"(let-values(((name-mpi_282) mpi38_278))"
"(let-values(((root-expand-ctx_283) root-expand-context39_279))"
"(let-values(((for-submodule?_284) for-submodule?40_277))"
"(let-values()"
"(let-values(((phase_285) 0))"
"(let-values(((name_286)(1/module-path-index-resolve name-mpi_282)))"
"(let-values(((m-ns_287)"
"(let-values(((the-struct_289)"
"(let-values(((...namespace/module.rkt:135:27_290) new-namespace11.1)"
"((ns158_291) ns_281)"
"((root-expand-ctx159_292) root-expand-ctx_283)"
"((temp160_293) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference new-namespace11.1))"
"(new-namespace9.1"
" temp160_293"
" #t"
" root-expand-ctx159_292"
" #t"
" ns158_291"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:135:27_290"
" keyword-procedure-extract"
" '(#:register? #:root-expand-ctx)"
" 3)"
" '(#:register? #:root-expand-ctx)"
"(list temp160_293 root-expand-ctx159_292)"
" ns158_291)))))"
"(if(1/namespace? the-struct_289)"
"(let-values(((mpi150_294) name-mpi_282)"
"((source-name151_295)(resolved-module-path-root-name name_286))"
"((phase152_296) phase_285)"
"((0-phase153_297) phase_285)"
"((submodule-declarations154_298)"
"(if for-submodule?_284"
"(namespace-submodule-declarations ns_281)"
"(make-hash)))"
"((available-module-instances155_299)(make-hasheqv))"
"((module-instances156_300)(make-hasheqv))"
"((declaration-inspector157_301)(current-code-inspector)))"
"(namespace1.1"
" mpi150_294"
" source-name151_295"
"(namespace-root-expand-ctx the-struct_289)"
" phase152_296"
" 0-phase153_297"
"(namespace-phase-to-namespace the-struct_289)"
"(namespace-phase-level-to-definitions the-struct_289)"
"(namespace-module-registry$1 the-struct_289)"
"(namespace-bulk-binding-registry the-struct_289)"
" submodule-declarations154_298"
"(namespace-root-namespace the-struct_289)"
" declaration-inspector157_301"
"(namespace-inspector the-struct_289)"
" available-module-instances155_299"
" module-instances156_300))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_289)))))"
"(let-values((()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_287) phase_285 m-ns_287)"
"(values))))"
"(let-values(((at-phase_288)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_287) phase_285 at-phase_288)"
"(hash-set! at-phase_288 name_286(make-module-instance m-ns_287 #f))"
" m-ns_287)))))))))))))"
"(define-values"
"(unpack46.1)"
"(lambda(given-kws_302 given-args_303 ns44_304)"
"(let-values(((for-submodule?40_305)(car given-args_303))"
"((given-kws_306)(cdr given-kws_302))"
"((given-args_307)(cdr given-args_303)))"
"(let-values(((mpi38_308)(car given-args_307))"
"((given-kws_309)(cdr given-kws_306))"
"((given-args_310)(cdr given-args_307)))"
"(let-values(((root-expand-context39_311)(car given-args_310)))"
"(make-module-namespace45.1 for-submodule?40_305 mpi38_308 root-expand-context39_311 ns44_304))))))"
"(define-values"
"(make-module-namespace47.1)"
"(lifted/2.1$9"
"(lambda(given-kws_312 given-argc_313)"
"(if(= given-argc_313 3)"
"(let-values(((l2_314) given-kws_312))"
"(if(pair? l2_314)"
"(if(eq?(car l2_314) '#:for-submodule?)"
"(let-values(((l2_315)(cdr l2_314)))"
"(if(pair? l2_315)"
"(if(eq?(car l2_315) '#:mpi)"
"(let-values(((l2_316)(cdr l2_315)))"
"(if(pair? l2_316)(if(eq?(car l2_316) '#:root-expand-context)(null?(cdr l2_316)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_317 given-args_318 ns_319)(unpack46.1 given-kws_317 given-args_318 ns_319)))"
" '(#:for-submodule? #:mpi #:root-expand-context)"
" '(#:for-submodule? #:mpi #:root-expand-context)))"
"(define-values"
"(declare-module!53.1)"
"(lambda(with-submodules?48_320 with-submodules?49_321 ns50_322 m51_323 mod-name52_324)"
"(let-values(((ns_325) ns50_322))"
"(let-values(((m_326) m51_323))"
"(let-values(((mod-name_327) mod-name52_324))"
"(let-values(((with-submodules?_328)(if with-submodules?49_321 with-submodules?48_320 #t)))"
"(let-values()"
"(let-values(((prior-m_329)"
"(if with-submodules?_328"
"(hash-ref"
"(module-registry-declarations(namespace-module-registry$1 ns_325))"
" mod-name_327"
" #f)"
" #f)))"
"(let-values(((prior-mi_330)"
"(if prior-m_329"
"(if(not(eq? m_326 prior-m_329))"
"(let-values(((ns161_331) ns_325)"
"((mod-name162_332) mod-name_327)"
"((temp163_333)(namespace-phase ns_325)))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns161_331"
" mod-name162_332"
" temp163_333)"
"(namespace->module-instance69.1 ns161_331 mod-name162_332 temp163_333)))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_329(not(eq? m_326 prior-m_329)) #f)"
"(let-values()(check-redeclaration-ok prior-m_329 prior-mi_330 mod-name_327))"
"(void))"
"(hash-set!"
"(if with-submodules?_328"
"(module-registry-declarations(namespace-module-registry$1 ns_325))"
"(namespace-submodule-declarations ns_325))"
" mod-name_327"
" m_326)"
"(if with-submodules?_328"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_325)"
" mod-name_327"
"(module-self m_326)"
"(module-provides m_326)))"
"(void))"
"((1/current-module-name-resolver) mod-name_327 #f)"
"(if prior-mi_330"
"(let-values()"
"(let-values(((m-ns_334)(module-instance-namespace prior-mi_330)))"
"(let-values(((states_335)(module-instance-phase-level-to-state prior-mi_330)))"
"(let-values(((phase_336)(namespace-phase ns_325)))"
"(let-values(((visit?_337)(eq? 'started(hash-ref states_335(add1 phase_336) #f))))"
"(let-values(((run?_338)(eq? 'started(hash-ref states_335 phase_336 #f))))"
"(let-values(((at-phase_339)"
"(hash-ref(namespace-module-instances ns_325) phase_336)))"
"(begin"
"(hash-set! at-phase_339 mod-name_327(make-module-instance m-ns_334 m_326))"
"(if visit?_337"
"(let-values()"
"(let-values(((ns164_340) ns_325)"
"((temp165_341)(namespace-mpi m-ns_334))"
"((phase166_342) phase_336))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!103.1))"
"(namespace-module-visit!101.1 #f #f ns164_340 temp165_341 phase166_342)"
"(namespace-module-visit!103.1 ns164_340 temp165_341 phase166_342))))"
"(void))"
"(if run?_338"
"(let-values()"
"(let-values(((ns167_343) ns_325)"
"((temp168_344)(namespace-mpi m-ns_334))"
"((phase169_345) phase_336))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns167_343"
" temp168_344"
" phase169_345)"
"(namespace-module-instantiate!95.1 ns167_343 temp168_344 phase169_345))))"
"(void))))))))))"
"(void))))))))))))"
"(define-values"
"(unpack54.1$1)"
"(lambda(given-kws_346 given-args_347 ns50_348 m51_349 mod-name52_350)"
"(let-values(((with-submodules?49_351)(pair? given-kws_346)))"
"(let-values(((with-submodules?48_352)(if with-submodules?49_351(car given-args_347)(void))))"
"(declare-module!53.1 with-submodules?48_352 with-submodules?49_351 ns50_348 m51_349 mod-name52_350)))))"
"(define-values"
"(declare-module!55.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_353 given-argc_354)"
"(if(= given-argc_354 5)"
"(let-values(((l1_355) given-kws_353))"
"(let-values(((l1_356)"
"(if(null? l1_355) l1_355(if(eq?(car l1_355) '#:with-submodules?)(cdr l1_355) l1_355))))"
"(null? l1_356)))"
" #f))"
"(case-lambda"
"((given-kws_357 given-args_358 ns_359 m_360 mod-name_361)"
"(unpack54.1$1 given-kws_357 given-args_358 ns_359 m_360 mod-name_361)))"
" null"
" '(#:with-submodules?)"
"(let-values(((declare-module!_362)"
"(case-lambda((ns_363 m_364 mod-name_365)(unpack54.1$1 null null ns_363 m_364 mod-name_365)))))"
" declare-module!_362)))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_366 prior-mi_367 mod-name_368)"
"(begin"
"(if(module-cross-phase-persistent? prior-m_366)"
"(let-values()"
"          (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_368))"
"(void))"
"(if(if prior-mi_367"
"(let-values(((or-part_369)(module-instance-attached? prior-mi_367)))"
"(if or-part_369"
" or-part_369"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_367))))))"
" #f)"
"(let-values()"
"          (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_368))"
"(void)))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_370 mod-name_371) (raise-arguments-error who_370 \"unknown module\" \"module name\" mod-name_371)))"
"(define-values"
"(namespace->module-instance67.1)"
"(lambda(check-available-at-phase-level58_372"
" check-available-at-phase-level62_373"
" complain-on-failure?57_374"
" complain-on-failure?61_375"
" install!-namespace56_376"
" install!-namespace60_377"
" unavailable-callback59_378"
" unavailable-callback63_379"
" ns64_380"
" name65_381"
" 0-phase66_382)"
"(let-values(((ns_383) ns64_380))"
"(let-values(((name_384) name65_381))"
"(let-values(((0-phase_385) 0-phase66_382))"
"(let-values(((install!-ns_386)(if install!-namespace60_377 install!-namespace56_376 #f)))"
"(let-values(((complain-on-failure?_387)(if complain-on-failure?61_375 complain-on-failure?57_374 #f)))"
"(let-values(((check-available-at-phase-level_388)"
"(if check-available-at-phase-level62_373 check-available-at-phase-level58_372 #f)))"
"(let-values(((unavailable-callback_389)"
"(if unavailable-callback63_379 unavailable-callback59_378 void)))"
"(let-values()"
"(let-values(((mi_390)"
"(let-values(((or-part_391)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_383) 0-phase_385 '#hasheq())"
" name_384"
" #f)))"
"(if or-part_391"
" or-part_391"
"(let-values(((or-part_392)"
"(let-values(((c-ns_393)"
"(let-values(((or-part_394)"
"(namespace-root-namespace ns_383)))"
"(if or-part_394 or-part_394 ns_383))))"
"(hash-ref(namespace-module-instances c-ns_393) name_384 #f))))"
"(if or-part_392"
" or-part_392"
"(if complain-on-failure?_387"
"                                            (error \"no module instance found:\" name_384 0-phase_385)"
" #f)))))))"
"(begin"
"(if(if mi_390 check-available-at-phase-level_388 #f)"
"(let-values()"
"(check-availablilty mi_390 check-available-at-phase-level_388 unavailable-callback_389))"
"(void))"
" mi_390))))))))))))"
"(define-values"
"(unpack68.1$1)"
"(lambda(given-kws_395 given-args_396 ns64_397 name65_398 0-phase66_399)"
"(let-values(((check-available-at-phase-level62_400)"
"(if(pair? given-kws_395)(eq? '#:check-available-at-phase-level(car given-kws_395)) #f)))"
"(let-values(((check-available-at-phase-level58_401)"
"(if check-available-at-phase-level62_400(car given-args_396)(void)))"
"((given-kws_402)(if check-available-at-phase-level62_400(cdr given-kws_395) given-kws_395))"
"((given-args_403)(if check-available-at-phase-level62_400(cdr given-args_396) given-args_396)))"
"(let-values(((complain-on-failure?61_404)"
"(if(pair? given-kws_402)(eq? '#:complain-on-failure?(car given-kws_402)) #f)))"
"(let-values(((complain-on-failure?57_405)(if complain-on-failure?61_404(car given-args_403)(void)))"
"((given-kws_406)(if complain-on-failure?61_404(cdr given-kws_402) given-kws_402))"
"((given-args_407)(if complain-on-failure?61_404(cdr given-args_403) given-args_403)))"
"(let-values(((install!-namespace60_408)"
"(if(pair? given-kws_406)(eq? '#:install!-namespace(car given-kws_406)) #f)))"
"(let-values(((install!-namespace56_409)(if install!-namespace60_408(car given-args_407)(void)))"
"((given-kws_410)(if install!-namespace60_408(cdr given-kws_406) given-kws_406))"
"((given-args_411)(if install!-namespace60_408(cdr given-args_407) given-args_407)))"
"(let-values(((unavailable-callback63_412)(pair? given-kws_410)))"
"(let-values(((unavailable-callback59_413)"
"(if unavailable-callback63_412(car given-args_411)(void))))"
"(namespace->module-instance67.1"
" check-available-at-phase-level58_401"
" check-available-at-phase-level62_400"
" complain-on-failure?57_405"
" complain-on-failure?61_404"
" install!-namespace56_409"
" install!-namespace60_408"
" unavailable-callback59_413"
" unavailable-callback63_412"
" ns64_397"
" name65_398"
" 0-phase66_399)))))))))))"
"(define-values"
"(namespace->module-instance69.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_414 given-argc_415)"
"(if(= given-argc_415 5)"
"(let-values(((l1_416) given-kws_414))"
"(let-values(((l1_417)"
"(if(null? l1_416)"
" l1_416"
"(if(eq?(car l1_416) '#:check-available-at-phase-level)(cdr l1_416) l1_416))))"
"(let-values(((l1_418) l1_417))"
"(let-values(((l1_419)"
"(if(null? l1_418)"
" l1_418"
"(if(eq?(car l1_418) '#:complain-on-failure?)(cdr l1_418) l1_418))))"
"(let-values(((l1_420) l1_419))"
"(let-values(((l1_421)"
"(if(null? l1_420)"
" l1_420"
"(if(eq?(car l1_420) '#:install!-namespace)(cdr l1_420) l1_420))))"
"(let-values(((l1_422) l1_421))"
"(let-values(((l1_423)"
"(if(null? l1_422)"
" l1_422"
"(if(eq?(car l1_422) '#:unavailable-callback)(cdr l1_422) l1_422))))"
"(null? l1_423)))))))))"
" #f))"
"(case-lambda"
"((given-kws_424 given-args_425 ns_426 name_427 0-phase_428)"
"(unpack68.1$1 given-kws_424 given-args_425 ns_426 name_427 0-phase_428)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:install!-namespace #:unavailable-callback)"
"(let-values(((namespace->module-instance_429)"
"(case-lambda((ns_430 name_431 0-phase_432)(unpack68.1$1 null null ns_430 name_431 0-phase_432)))))"
" namespace->module-instance_429)))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_433 name_434 0-phase_435 m_436 existing-m-ns_437)"
"(let-values(((m-ns_438)"
"(let-values(((the-struct_440) ns_433))"
"(if(1/namespace? the-struct_440)"
"(let-values(((mpi170_441)(namespace-mpi existing-m-ns_437))"
"((source-name171_442)(namespace-source-name existing-m-ns_437))"
"((root-expand-ctx172_443)(namespace-root-expand-ctx existing-m-ns_437))"
"((phase173_444)(namespace-phase existing-m-ns_437))"
"((0-phase174_445)(namespace-0-phase existing-m-ns_437))"
"((phase-to-namespace175_446)(make-hasheqv))"
"((phase-level-to-definitions176_447)"
"(if(module-cross-phase-persistent? m_436)"
"(namespace-phase-level-to-definitions existing-m-ns_437)"
"(make-hasheqv)))"
"((declaration-inspector177_448)(module-inspector m_436))"
"((inspector178_449)(namespace-inspector existing-m-ns_437)))"
"(namespace1.1"
" mpi170_441"
" source-name171_442"
" root-expand-ctx172_443"
" phase173_444"
" 0-phase174_445"
" phase-to-namespace175_446"
" phase-level-to-definitions176_447"
"(namespace-module-registry$1 the-struct_440)"
"(namespace-bulk-binding-registry the-struct_440)"
"(namespace-submodule-declarations the-struct_440)"
"(namespace-root-namespace the-struct_440)"
" declaration-inspector177_448"
" inspector178_449"
"(namespace-available-module-instances the-struct_440)"
"(namespace-module-instances the-struct_440)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_440)))))"
"(let-values(((mi_439)(make-module-instance m-ns_438 m_436)))"
"(if(module-cross-phase-persistent? m_436)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_438) 0 m-ns_438)"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_450)(namespace-root-namespace ns_433)))(if or-part_450 or-part_450 ns_433)))"
" name_434"
" mi_439)"
"(hash-set!(module-instance-phase-level-to-state mi_439) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_438) 0-phase_435 m-ns_438)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_438)"
" 0-phase_435"
"(namespace->definitions existing-m-ns_437 0-phase_435))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_439) 0 'started)(values))))"
"(let-values(((at-phase_451)"
"(let-values(((or-part_452)"
"(hash-ref(namespace-module-instances ns_433) 0-phase_435 #f)))"
"(if or-part_452"
" or-part_452"
"(let-values(((at-phase_453)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_433) 0-phase_435 at-phase_453)"
" at-phase_453))))))"
"(hash-set! at-phase_451 name_434 mi_439)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_454 name_455 0-phase_456 m_457 mpi_458)"
"(let-values(((m-ns_459)"
"(let-values(((the-struct_461) ns_454))"
"(if(1/namespace? the-struct_461)"
"(let-values(((mpi179_462) mpi_458)"
"((source-name180_463)"
"(let-values(((or-part_471)(module-source-name m_457)))"
"(if or-part_471"
" or-part_471"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_458)))))"
"((root-expand-ctx181_464)(box #f))"
"((phase182_465) 0-phase_456)"
"((0-phase183_466) 0-phase_456)"
"((phase-to-namespace184_467)(make-hasheqv))"
"((phase-level-to-definitions185_468)(make-hasheqv))"
"((declaration-inspector186_469)(module-inspector m_457))"
"((inspector187_470)(make-inspector(module-inspector m_457))))"
"(namespace1.1"
" mpi179_462"
" source-name180_463"
" root-expand-ctx181_464"
" phase182_465"
" 0-phase183_466"
" phase-to-namespace184_467"
" phase-level-to-definitions185_468"
"(namespace-module-registry$1 the-struct_461)"
"(namespace-bulk-binding-registry the-struct_461)"
"(namespace-submodule-declarations the-struct_461)"
"(namespace-root-namespace the-struct_461)"
" declaration-inspector186_469"
" inspector187_470"
"(namespace-available-module-instances the-struct_461)"
"(namespace-module-instances the-struct_461)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_461)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_459) 0-phase_456 m-ns_459)(values))))"
"(let-values(((mi_460)(make-module-instance m-ns_459 m_457)))"
"(begin"
"(if(module-cross-phase-persistent? m_457)"
"(hash-set!(namespace-module-instances ns_454) name_455 mi_460)"
"(let-values(((at-phase_472)"
"(let-values(((or-part_473)(hash-ref(namespace-module-instances ns_454) 0-phase_456 #f)))"
"(if or-part_473"
" or-part_473"
"(let-values(((at-phase_474)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_454) 0-phase_456 at-phase_474)"
" at-phase_474))))))"
"(hash-set! at-phase_472 name_455 mi_460)))"
" mi_460))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_475 check-available-at-phase-level_476 unavailable-callback_477)"
"(let-values(((m_478)(module-instance-module mi_475)))"
"(if(if m_478"
"(if(<="
"(module-min-phase-level m_478)"
"(add1 check-available-at-phase-level_476)"
"(module-max-phase-level m_478))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_475)(add1 check-available-at-phase-level_476) #f))"
" #f)"
" #f)"
"(let-values()(unavailable-callback_477))"
"(void)))))"
"(define-values"
"(namespace->module-namespace79.1)"
"(lambda(check-available-at-phase-level71_479"
" check-available-at-phase-level74_480"
" complain-on-failure?70_481"
" complain-on-failure?73_482"
" unavailable-callback72_483"
" unavailable-callback75_484"
" ns76_485"
" name77_486"
" 0-phase78_487)"
"(let-values(((ns_488) ns76_485))"
"(let-values(((name_489) name77_486))"
"(let-values(((0-phase_490) 0-phase78_487))"
"(let-values(((complain-on-failure?_491)(if complain-on-failure?73_482 complain-on-failure?70_481 #f)))"
"(let-values(((check-available-at-phase-level_492)"
"(if check-available-at-phase-level74_480 check-available-at-phase-level71_479 #f)))"
"(let-values(((unavailable-callback_493)(if unavailable-callback75_484 unavailable-callback72_483 void)))"
"(let-values()"
"(let-values(((mi_494)"
"(let-values(((...namespace/module.rkt:304:13_495) namespace->module-instance69.1)"
"((ns188_496) ns_488)"
"((name189_497) name_489)"
"((0-phase190_498) 0-phase_490)"
"((complain-on-failure?191_499) complain-on-failure?_491)"
"((check-available-at-phase-level192_500)"
" check-available-at-phase-level_492)"
"((unavailable-callback193_501) unavailable-callback_493))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1"
" check-available-at-phase-level192_500"
" #t"
" complain-on-failure?191_499"
" #t"
" #f"
" #f"
" unavailable-callback193_501"
" #t"
" ns188_496"
" name189_497"
" 0-phase190_498)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:304:13_495"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(list"
" check-available-at-phase-level192_500"
" complain-on-failure?191_499"
" unavailable-callback193_501)"
" ns188_496"
" name189_497"
" 0-phase190_498)))))"
"(if mi_494(module-instance-namespace mi_494) #f)))))))))))"
"(define-values"
"(unpack80.1$1)"
"(lambda(given-kws_502 given-args_503 ns76_504 name77_505 0-phase78_506)"
"(let-values(((check-available-at-phase-level74_507)"
"(if(pair? given-kws_502)(eq? '#:check-available-at-phase-level(car given-kws_502)) #f)))"
"(let-values(((check-available-at-phase-level71_508)"
"(if check-available-at-phase-level74_507(car given-args_503)(void)))"
"((given-kws_509)(if check-available-at-phase-level74_507(cdr given-kws_502) given-kws_502))"
"((given-args_510)(if check-available-at-phase-level74_507(cdr given-args_503) given-args_503)))"
"(let-values(((complain-on-failure?73_511)"
"(if(pair? given-kws_509)(eq? '#:complain-on-failure?(car given-kws_509)) #f)))"
"(let-values(((complain-on-failure?70_512)(if complain-on-failure?73_511(car given-args_510)(void)))"
"((given-kws_513)(if complain-on-failure?73_511(cdr given-kws_509) given-kws_509))"
"((given-args_514)(if complain-on-failure?73_511(cdr given-args_510) given-args_510)))"
"(let-values(((unavailable-callback75_515)(pair? given-kws_513)))"
"(let-values(((unavailable-callback72_516)(if unavailable-callback75_515(car given-args_514)(void))))"
"(namespace->module-namespace79.1"
" check-available-at-phase-level71_508"
" check-available-at-phase-level74_507"
" complain-on-failure?70_512"
" complain-on-failure?73_511"
" unavailable-callback72_516"
" unavailable-callback75_515"
" ns76_504"
" name77_505"
" 0-phase78_506)))))))))"
"(define-values"
"(namespace->module-namespace81.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_517 given-argc_518)"
"(if(= given-argc_518 5)"
"(let-values(((l1_519) given-kws_517))"
"(let-values(((l1_520)"
"(if(null? l1_519)"
" l1_519"
"(if(eq?(car l1_519) '#:check-available-at-phase-level)(cdr l1_519) l1_519))))"
"(let-values(((l1_521) l1_520))"
"(let-values(((l1_522)"
"(if(null? l1_521)"
" l1_521"
"(if(eq?(car l1_521) '#:complain-on-failure?)(cdr l1_521) l1_521))))"
"(let-values(((l1_523) l1_522))"
"(let-values(((l1_524)"
"(if(null? l1_523)"
" l1_523"
"(if(eq?(car l1_523) '#:unavailable-callback)(cdr l1_523) l1_523))))"
"(null? l1_524)))))))"
" #f))"
"(case-lambda"
"((given-kws_525 given-args_526 ns_527 name_528 0-phase_529)"
"(unpack80.1$1 given-kws_525 given-args_526 ns_527 name_528 0-phase_529)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(let-values(((namespace->module-namespace_530)"
"(case-lambda((ns_531 name_532 0-phase_533)(unpack80.1$1 null null ns_531 name_532 0-phase_533)))))"
" namespace->module-namespace_530)))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_534 mod-name_535 phase_536)"
"(let-values(((mi_537)"
"(let-values(((ns194_538) ns_534)((mod-name195_539) mod-name_535)((phase196_540) phase_536))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1 #f #f #f #f #f #f #f #f ns194_538 mod-name195_539 phase196_540)"
"(namespace->module-instance69.1 ns194_538 mod-name195_539 phase196_540)))))"
"(set-module-instance-attached?! mi_537 #t))))"
"(define-values"
"(namespace-module-instantiate!93.1)"
"(lambda(otherwise-available?84_541"
" otherwise-available?88_542"
" run-phase82_543"
" run-phase86_544"
" seen85_545"
" seen89_546"
" skip-run?83_547"
" skip-run?87_548"
" ns90_549"
" mpi91_550"
" instance-phase92_551)"
"(let-values(((ns_552) ns90_549))"
"(let-values(((mpi_553) mpi91_550))"
"(let-values(((instance-phase_554) instance-phase92_551))"
"(let-values(((run-phase_555)(if run-phase86_544 run-phase82_543(namespace-phase ns_552))))"
"(let-values(((skip-run?_556)(if skip-run?87_548 skip-run?83_547 #f)))"
"(let-values(((otherwise-available?_557)(if otherwise-available?88_542 otherwise-available?84_541 #t)))"
"(let-values(((seen_558)(if seen89_546 seen85_545 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_553)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_553)))"
"(values))))"
"(let-values(((name_559)(1/module-path-index-resolve mpi_553 #t)))"
"(let-values(((m_560)(namespace->module ns_552 name_559)))"
"(let-values((()"
"(begin"
"(if m_560"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_559)))"
"(values))))"
"(let-values(((instantiate!_561)"
"(lambda(instance-phase_562 run-phase_563 ns_564)"
"(let-values(((mi_565)"
"(let-values(((or-part_566)"
"(let-values(((ns203_567) ns_564)"
"((name204_568) name_559)"
"((instance-phase205_569)"
" instance-phase_562))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-instance69.1))"
"(namespace->module-instance67.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns203_567"
" name204_568"
" instance-phase205_569)"
"(namespace->module-instance69.1"
" ns203_567"
" name204_568"
" instance-phase205_569)))))"
"(if or-part_566"
" or-part_566"
"(namespace-create-module-instance!"
" ns_564"
" name_559"
" instance-phase_562"
" m_560"
" mpi_553)))))"
"(let-values(((...namespace/module.rkt:331:4_570)"
" run-module-instance!124.1)"
"((mi197_571) mi_565)"
"((ns198_572) ns_564)"
"((run-phase199_573) run-phase_563)"
"((skip-run?200_574) skip-run?_556)"
"((otherwise-available?201_575) otherwise-available?_557)"
"((seen202_576) seen_558))"
"(if(variable-reference-constant?"
"(#%variable-reference run-module-instance!124.1))"
"(run-module-instance!122.1"
" otherwise-available?201_575"
" run-phase199_573"
" seen202_576"
" #t"
" skip-run?200_574"
" mi197_571"
" ns198_572)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:331:4_570"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(list"
" otherwise-available?201_575"
" run-phase199_573"
" seen202_576"
" skip-run?200_574)"
" mi197_571"
" ns198_572)))))))"
"(if(module-cross-phase-persistent? m_560)"
"(let-values()"
"(instantiate!_561"
" 0"
" 0"
"(let-values(((or-part_577)(namespace-root-namespace ns_552)))"
"(if or-part_577 or-part_577 ns_552))))"
"(let-values()"
"(instantiate!_561 instance-phase_554 run-phase_555 ns_552))))))))))))))))))"
"(define-values"
"(unpack94.1)"
"(lambda(given-kws_578 given-args_579 ns90_580 mpi91_581 instance-phase92_582)"
"(let-values(((otherwise-available?88_583)"
"(if(pair? given-kws_578)(eq? '#:otherwise-available?(car given-kws_578)) #f)))"
"(let-values(((otherwise-available?84_584)(if otherwise-available?88_583(car given-args_579)(void)))"
"((given-kws_585)(if otherwise-available?88_583(cdr given-kws_578) given-kws_578))"
"((given-args_586)(if otherwise-available?88_583(cdr given-args_579) given-args_579)))"
"(let-values(((run-phase86_587)(if(pair? given-kws_585)(eq? '#:run-phase(car given-kws_585)) #f)))"
"(let-values(((run-phase82_588)(if run-phase86_587(car given-args_586)(void)))"
"((given-kws_589)(if run-phase86_587(cdr given-kws_585) given-kws_585))"
"((given-args_590)(if run-phase86_587(cdr given-args_586) given-args_586)))"
"(let-values(((seen89_591)(if(pair? given-kws_589)(eq? '#:seen(car given-kws_589)) #f)))"
"(let-values(((seen85_592)(if seen89_591(car given-args_590)(void)))"
"((given-kws_593)(if seen89_591(cdr given-kws_589) given-kws_589))"
"((given-args_594)(if seen89_591(cdr given-args_590) given-args_590)))"
"(let-values(((skip-run?87_595)(pair? given-kws_593)))"
"(let-values(((skip-run?83_596)(if skip-run?87_595(car given-args_594)(void))))"
"(namespace-module-instantiate!93.1"
" otherwise-available?84_584"
" otherwise-available?88_583"
" run-phase82_588"
" run-phase86_587"
" seen85_592"
" seen89_591"
" skip-run?83_596"
" skip-run?87_595"
" ns90_580"
" mpi91_581"
" instance-phase92_582)))))))))))"
"(define-values"
"(namespace-module-instantiate!95.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_597 given-argc_598)"
"(if(= given-argc_598 5)"
"(let-values(((l1_599) given-kws_597))"
"(let-values(((l1_600)"
"(if(null? l1_599) l1_599(if(eq?(car l1_599) '#:otherwise-available?)(cdr l1_599) l1_599))))"
"(let-values(((l1_601) l1_600))"
"(let-values(((l1_602)"
"(if(null? l1_601) l1_601(if(eq?(car l1_601) '#:run-phase)(cdr l1_601) l1_601))))"
"(let-values(((l1_603) l1_602))"
"(let-values(((l1_604)(if(null? l1_603) l1_603(if(eq?(car l1_603) '#:seen)(cdr l1_603) l1_603))))"
"(let-values(((l1_605) l1_604))"
"(let-values(((l1_606)"
"(if(null? l1_605) l1_605(if(eq?(car l1_605) '#:skip-run?)(cdr l1_605) l1_605))))"
"(null? l1_606)))))))))"
" #f))"
"(case-lambda"
"((given-kws_607 given-args_608 ns_609 mpi_610 instance-phase_611)"
"(unpack94.1 given-kws_607 given-args_608 ns_609 mpi_610 instance-phase_611)))"
" null"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(let-values(((namespace-module-instantiate!_612)"
"(case-lambda"
"((ns_613 mpi_614 instance-phase_615)(unpack94.1 null null ns_613 mpi_614 instance-phase_615)))))"
" namespace-module-instantiate!_612)))"
"(define-values"
"(namespace-module-visit!101.1)"
"(lambda(visit-phase96_616 visit-phase97_617 ns98_618 mpi99_619 instance-phase100_620)"
"(let-values(((ns_621) ns98_618))"
"(let-values(((mpi_622) mpi99_619))"
"(let-values(((instance-phase_623) instance-phase100_620))"
"(let-values(((visit-phase_624)(if visit-phase97_617 visit-phase96_616(namespace-phase ns_621))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:344:2_625) namespace-module-instantiate!95.1)"
"((ns206_626) ns_621)"
"((mpi207_627) mpi_622)"
"((instance-phase208_628) instance-phase_623)"
"((temp209_629)(add1 visit-phase_624)))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" temp209_629"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns206_626"
" mpi207_627"
" instance-phase208_628)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:344:2_625"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list temp209_629)"
" ns206_626"
" mpi207_627"
" instance-phase208_628))))))))))"
"(define-values"
"(unpack102.1)"
"(lambda(given-kws_630 given-args_631 ns98_632 mpi99_633 instance-phase100_634)"
"(let-values(((visit-phase97_635)(pair? given-kws_630)))"
"(let-values(((visit-phase96_636)(if visit-phase97_635(car given-args_631)(void))))"
"(namespace-module-visit!101.1 visit-phase96_636 visit-phase97_635 ns98_632 mpi99_633 instance-phase100_634)))))"
"(define-values"
"(namespace-module-visit!103.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_637 given-argc_638)"
"(if(= given-argc_638 5)"
"(let-values(((l1_639) given-kws_637))"
"(let-values(((l1_640)(if(null? l1_639) l1_639(if(eq?(car l1_639) '#:visit-phase)(cdr l1_639) l1_639))))"
"(null? l1_640)))"
" #f))"
"(case-lambda"
"((given-kws_641 given-args_642 ns_643 mpi_644 instance-phase_645)"
"(unpack102.1 given-kws_641 given-args_642 ns_643 mpi_644 instance-phase_645)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-visit!_646)"
"(case-lambda"
"((ns_647 mpi_648 instance-phase_649)(unpack102.1 null null ns_647 mpi_648 instance-phase_649)))))"
" namespace-module-visit!_646)))"
"(define-values"
"(namespace-module-make-available!109.1)"
"(lambda(visit-phase104_650 visit-phase105_651 ns106_652 mpi107_653 instance-phase108_654)"
"(let-values(((ns_655) ns106_652))"
"(let-values(((mpi_656) mpi107_653))"
"(let-values(((instance-phase_657) instance-phase108_654))"
"(let-values(((visit-phase_658)(if visit-phase105_651 visit-phase104_650(namespace-phase ns_655))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:347:2_659) namespace-module-instantiate!95.1)"
"((ns210_660) ns_655)"
"((mpi211_661) mpi_656)"
"((instance-phase212_662) instance-phase_657)"
"((temp213_663)(add1 visit-phase_658))"
"((temp214_664) #t))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" temp213_663"
" #t"
" #f"
" #f"
" temp214_664"
" #t"
" ns210_660"
" mpi211_661"
" instance-phase212_662)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:347:2_659"
" keyword-procedure-extract"
" '(#:run-phase #:skip-run?)"
" 5)"
" '(#:run-phase #:skip-run?)"
"(list temp213_663 temp214_664)"
" ns210_660"
" mpi211_661"
" instance-phase212_662))))))))))"
"(define-values"
"(unpack110.1$1)"
"(lambda(given-kws_665 given-args_666 ns106_667 mpi107_668 instance-phase108_669)"
"(let-values(((visit-phase105_670)(pair? given-kws_665)))"
"(let-values(((visit-phase104_671)(if visit-phase105_670(car given-args_666)(void))))"
"(namespace-module-make-available!109.1"
" visit-phase104_671"
" visit-phase105_670"
" ns106_667"
" mpi107_668"
" instance-phase108_669)))))"
"(define-values"
"(namespace-module-make-available!111.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_672 given-argc_673)"
"(if(= given-argc_673 5)"
"(let-values(((l1_674) given-kws_672))"
"(let-values(((l1_675)(if(null? l1_674) l1_674(if(eq?(car l1_674) '#:visit-phase)(cdr l1_674) l1_674))))"
"(null? l1_675)))"
" #f))"
"(case-lambda"
"((given-kws_676 given-args_677 ns_678 mpi_679 instance-phase_680)"
"(unpack110.1$1 given-kws_676 given-args_677 ns_678 mpi_679 instance-phase_680)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-make-available!_681)"
"(case-lambda"
"((ns_682 mpi_683 instance-phase_684)(unpack110.1$1 null null ns_682 mpi_683 instance-phase_684)))))"
" namespace-module-make-available!_681)))"
"(define-values"
"(lifted/3.1$4)"
"(make-required"
" 'run-module-instance!"
"(case-lambda((self_685 mi_686 ns_687)(apply missing-kw self_685 mi_686 ns_687 null)))"
" #f"
" #f))"
"(define-values"
"(run-module-instance!122.1)"
"(lambda(otherwise-available?114_688 run-phase112_689 seen115_690 seen119_691 skip-run?113_692 mi120_693 ns121_694)"
"(let-values(((mi_695) mi120_693))"
"(let-values(((ns_696) ns121_694))"
"(let-values(((run-phase_697) run-phase112_689))"
"(let-values(((skip-run?_698) skip-run?113_692))"
"(let-values(((otherwise-available?_699) otherwise-available?114_688))"
"(let-values(((seen_700)(if seen119_691 seen115_690 '#hasheq())))"
"(let-values()"
"(let-values(((m-ns_701)(module-instance-namespace mi_695)))"
"(let-values(((instance-phase_702)(namespace-0-phase m-ns_701)))"
"(let-values(((run-phase-level_703)(phase- run-phase_697 instance-phase_702)))"
"(if(if(let-values(((or-part_704) skip-run?_698))"
"(if or-part_704"
" or-part_704"
"(eq?"
" 'started"
"(hash-ref(module-instance-phase-level-to-state mi_695) run-phase-level_703 #f))))"
"(let-values(((or-part_705)(not otherwise-available?_699)))"
"(if or-part_705 or-part_705(module-instance-made-available? mi_695)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_706)(module-instance-module mi_695)))"
"(let-values(((mpi_707)(namespace-mpi m-ns_701)))"
"(let-values(((phase-shift_708) instance-phase_702))"
"(let-values(((bulk-binding-registry_709)(namespace-bulk-binding-registry m-ns_701)))"
"(begin"
"(if(hash-ref seen_700 mi_695 #f)"
"(let-values()"
"                                          (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_695)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_695"
"(alt-reverse"
"(let-values(((lst_710)(module-requires m_706)))"
"(begin"
"(if(list? lst_710)(void)(let-values()(in-list lst_710)))"
"((letrec-values(((for-loop_711)"
"(lambda(fold-var_712 lst_713)"
"(if(pair? lst_713)"
"(let-values(((phase+mpis_714)"
"(unsafe-car lst_713)))"
"(if #t"
"(let-values(((fold-var_715)"
"(let-values(((fold-var_716)"
" fold-var_712))"
"(let-values(((fold-var_717)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_714)"
"(alt-reverse"
"(let-values(((lst_718)"
"(cdr"
" phase+mpis_714)))"
"(begin"
"(if(list?"
" lst_718)"
"(void)"
"(let-values()"
"(in-list"
" lst_718)))"
"((letrec-values(((for-loop_719)"
"(lambda(fold-var_720"
" lst_721)"
"(if(pair?"
" lst_721)"
"(let-values(((req-mpi_722)"
"(unsafe-car"
" lst_721)))"
"(if #t"
"(let-values(((fold-var_723)"
"(let-values(((fold-var_724)"
" fold-var_720))"
"(let-values(((fold-var_725)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
"(module-path-index-shift"
" req-mpi_722"
"(module-self"
" m_706)"
" mpi_707)))"
" fold-var_724))))"
"(values"
" fold-var_725)))))"
"(if #t"
"(for-loop_719"
" fold-var_723"
"(unsafe-cdr"
" lst_721))"
" fold-var_723))"
" fold-var_720))"
" fold-var_720))))"
" for-loop_719)"
" null"
" lst_718))))))"
" fold-var_716))))"
"(values fold-var_717)))))"
"(if #t"
"(for-loop_711"
" fold-var_715"
"(unsafe-cdr lst_713))"
" fold-var_715))"
" fold-var_712))"
" fold-var_712))))"
" for-loop_711)"
" null"
" lst_710)))))))"
"(let-values(((lst_726)(module-instance-shifted-requires mi_695)))"
"(begin"
"(if(list? lst_726)(void)(let-values()(in-list lst_726)))"
"((letrec-values(((for-loop_727)"
"(lambda(fold-var_728 lst_729)"
"(if(pair? lst_729)"
"(let-values(((phase+mpis_730)(unsafe-car lst_729)))"
"(if #t"
"(let-values(((fold-var_731)"
"(let-values(((fold-var_732)"
" fold-var_728))"
"(let-values(((fold-var_733)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_734)"
"(car"
" phase+mpis_730)))"
"(let-values(((lst_735)"
"(cdr"
" phase+mpis_730)))"
"(begin"
"(if(list?"
" lst_735)"
"(void)"
"(let-values()"
"(in-list"
" lst_735)))"
"((letrec-values(((for-loop_736)"
"(lambda(fold-var_737"
" lst_738)"
"(if(pair?"
" lst_738)"
"(let-values(((req-mpi_739)"
"(unsafe-car"
" lst_738)))"
"(if #t"
"(let-values(((fold-var_740)"
"(let-values(((fold-var_741)"
" fold-var_737))"
"(let-values(((fold-var_742)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:397:8_743)"
" namespace-module-instantiate!95.1)"
"((ns215_744)"
" ns_696)"
"((req-mpi216_745)"
" req-mpi_739)"
"((temp217_746)"
"(phase+"
" instance-phase_702"
" req-phase_734))"
"((run-phase218_747)"
" run-phase_697)"
"((skip-run?219_748)"
" skip-run?_698)"
"((otherwise-available?220_749)"
" otherwise-available?_699)"
"((temp221_750)"
"(hash-set"
" seen_700"
" mi_695"
" #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" otherwise-available?220_749"
" #t"
" run-phase218_747"
" #t"
" temp221_750"
" #t"
" skip-run?219_748"
" #t"
" ns215_744"
" req-mpi216_745"
" temp217_746)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:397:8_743"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
" 5)"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
"(list"
" otherwise-available?220_749"
" run-phase218_747"
" temp221_750"
" skip-run?219_748)"
" ns215_744"
" req-mpi216_745"
" temp217_746))))"
"(void)))))"
"(values"
" fold-var_742)))))"
"(if #t"
"(for-loop_736"
" fold-var_740"
"(unsafe-cdr"
" lst_738))"
" fold-var_740))"
" fold-var_737))"
" fold-var_737))))"
" for-loop_736)"
"(void)"
" lst_735)))))"
"(void)))))"
"(values fold-var_733)))))"
"(if #t"
"(for-loop_727 fold-var_731(unsafe-cdr lst_729))"
" fold-var_731))"
" fold-var_728))"
" fold-var_728))))"
" for-loop_727)"
"(void)"
" lst_726)))"
"(if(label-phase? instance-phase_702)"
"(void)"
"(let-values()"
"(let-values(((start_751)(module-max-phase-level m_706))"
"((end_752)(sub1(module-min-phase-level m_706)))"
"((inc_753) -1))"
"(begin"
"(if(if(real? start_751)(if(real? end_752)(real? inc_753) #f) #f)"
"(void)"
"(let-values()(in-range start_751 end_752 inc_753)))"
"((letrec-values(((for-loop_754)"
"(lambda(fold-var_755 pos_756)"
"(if(> pos_756 end_752)"
"(let-values(((phase-level_757) pos_756))"
"(if #t"
"(let-values(((fold-var_758)"
"(let-values(((fold-var_759)"
" fold-var_755))"
"(let-values(((fold-var_760)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_761)"
"(phase+"
" phase-level_757"
" phase-shift_708)))"
"(if(if(not"
" skip-run?_698)"
"(eqv?"
" phase_761"
" run-phase_697)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_695)"
" phase-level_757"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_695)"
" phase-level_757"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_701"
" phase-level_757))"
"(values))))"
"(let-values(((p-ns_762)"
"(namespace->namespace-at-phase"
" m-ns_701"
" phase_761)))"
"(let-values(((insp_763)"
"(module-inspector"
" m_706)))"
"(let-values(((data-box_764)"
"(module-instance-data-box"
" mi_695)))"
"(let-values(((prep_765)"
"(module-prepare-instance"
" m_706)))"
"(let-values(((go_766)"
"(module-instantiate-phase"
" m_706)))"
"(begin"
"(prep_765"
" data-box_764"
" p-ns_762"
" phase-shift_708"
" mpi_707"
" bulk-binding-registry_709"
" insp_763)"
"(go_766"
" data-box_764"
" p-ns_762"
" phase-shift_708"
" phase-level_757"
" mpi_707"
" bulk-binding-registry_709"
" insp_763))))))))))))"
"(if(if otherwise-available?_699"
"(if(not"
"(negative?"
" run-phase_697))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_695)"
" phase-level_757"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_696)"
" phase_761"
"(lambda(l_769)"
"(cons"
" mi_695"
" l_769))"
" null)"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_695)"
" phase-level_757"
" 'available)"
"(values))))"
"(let-values(((insp_767)"
"(module-inspector"
" m_706)))"
"(let-values(((prep_768)"
"(module-prepare-instance"
" m_706)))"
"(prep_768"
"(module-instance-data-box"
" mi_695)"
" m-ns_701"
" phase-shift_708"
" mpi_707"
" bulk-binding-registry_709"
" insp_767))))))"
"(void)))))"
"(void)))))"
"(values fold-var_760)))))"
"(if #t"
"(for-loop_754"
" fold-var_758"
"(+ pos_756 inc_753))"
" fold-var_758))"
" fold-var_755))"
" fold-var_755))))"
" for-loop_754)"
"(void)"
" start_751)))))"
"(if otherwise-available?_699"
"(let-values()(set-module-instance-made-available?! mi_695 #t))"
"(void))"
"(if skip-run?_698"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_695)"
" run-phase-level_703"
" 'started))))))))))))))))))))))"
"(define-values"
"(unpack123.1)"
"(lambda(given-kws_770 given-args_771 mi120_772 ns121_773)"
"(let-values(((otherwise-available?114_774)(car given-args_771))"
"((given-kws_775)(cdr given-kws_770))"
"((given-args_776)(cdr given-args_771)))"
"(let-values(((run-phase112_777)(car given-args_776))"
"((given-kws_778)(cdr given-kws_775))"
"((given-args_779)(cdr given-args_776)))"
"(let-values(((seen119_780)(if(pair? given-kws_778)(eq? '#:seen(car given-kws_778)) #f)))"
"(let-values(((seen115_781)(if seen119_780(car given-args_779)(void)))"
"((given-kws_782)(if seen119_780(cdr given-kws_778) given-kws_778))"
"((given-args_783)(if seen119_780(cdr given-args_779) given-args_779)))"
"(let-values(((skip-run?113_784)(car given-args_783)))"
"(run-module-instance!122.1"
" otherwise-available?114_774"
" run-phase112_777"
" seen115_781"
" seen119_780"
" skip-run?113_784"
" mi120_772"
" ns121_773))))))))"
"(define-values"
"(run-module-instance!124.1)"
"(lifted/3.1$4"
"(lambda(given-kws_785 given-argc_786)"
"(if(= given-argc_786 4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_785"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" #f))"
"(case-lambda((given-kws_787 given-args_788 mi_789 ns_790)(unpack123.1 given-kws_787 given-args_788 mi_789 ns_790)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!128_791)"
"(lambda(ns127_792 run-phase125_793 run-phase126_794)"
"(let-values(((ns_795) ns127_792))"
"(let-values(((run-phase_796)(if run-phase126_794 run-phase125_793(namespace-phase ns_795))))"
"(let-values()(namespace-run-available-modules! ns_795(add1 run-phase_796))))))))"
"(case-lambda"
"((ns_797)(namespace-visit-available-modules!128_791 ns_797 #f #f))"
"((ns_798 run-phase125_799)(namespace-visit-available-modules!128_791 ns_798 run-phase125_799 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!133_800)"
"(lambda(ns132_801 run-phase130_802 run-phase131_803)"
"(let-values(((ns_804) ns132_801))"
"(let-values(((run-phase_805)(if run-phase131_803 run-phase130_802(namespace-phase ns_804))))"
"(let-values()"
"(registry-call-with-lock"
"(namespace-module-registry$1 ns_804)"
"(lambda()"
"((letrec-values(((loop_806)"
"(lambda()"
"(let-values(((mis_807)"
"(hash-ref"
"(namespace-available-module-instances ns_804)"
" run-phase_805"
" null)))"
"(if(null? mis_807)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_804)"
" run-phase_805"
" null)"
"(let-values(((lst_808)(alt-reverse mis_807)))"
"(begin"
"(if(list? lst_808)(void)(let-values()(in-list lst_808)))"
"((letrec-values(((for-loop_809)"
"(lambda(fold-var_810 lst_811)"
"(if(pair? lst_811)"
"(let-values(((mi_812)"
"(unsafe-car lst_811)))"
"(if #t"
"(let-values(((fold-var_813)"
"(let-values(((fold-var_814)"
" fold-var_810))"
"(let-values(((fold-var_815)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:454:11_816)"
" run-module-instance!124.1)"
"((mi222_817)"
" mi_812)"
"((ns223_818)"
" ns_804)"
"((run-phase224_819)"
" run-phase_805)"
"((temp225_820)"
" #f)"
"((temp226_821)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" run-module-instance!124.1))"
"(run-module-instance!122.1"
" temp226_821"
" run-phase224_819"
" #f"
" #f"
" temp225_820"
" mi222_817"
" ns223_818)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:454:11_816"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
" 4)"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
"(list"
" temp226_821"
" run-phase224_819"
" temp225_820)"
" mi222_817"
" ns223_818))))"
"(void)))))"
"(values"
" fold-var_815)))))"
"(if #t"
"(for-loop_809"
" fold-var_813"
"(unsafe-cdr lst_811))"
" fold-var_813))"
" fold-var_810))"
" fold-var_810))))"
" for-loop_809)"
"(void)"
" lst_808)))"
"(loop_806))))))))"
" loop_806))))))))))"
"(case-lambda"
"((ns_822)(namespace-run-available-modules!133_800 ns_822 #f #f))"
"((ns_823 run-phase130_824)(namespace-run-available-modules!133_800 ns_823 run-phase130_824 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_825 name_826)"
"(let-values(((mi_827)(hash-ref(namespace-module-instances ns_825)(1/make-resolved-module-path name_826))))"
"(let-values(((...namespace/module.rkt:460:2_828) run-module-instance!124.1)"
"((mi227_829) mi_827)"
"((ns228_830) ns_825)"
"((temp229_831) 1)"
"((temp230_832) #f)"
"((temp231_833) #t))"
"(if(variable-reference-constant?(#%variable-reference run-module-instance!124.1))"
"(run-module-instance!122.1 temp231_833 temp229_831 #f #f temp230_832 mi227_829 ns228_830)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:460:2_828"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
"(list temp231_833 temp229_831 temp230_832)"
" mi227_829"
" ns228_830))))))"
"(define-values"
"(lifted/4.1$3)"
"(make-required"
" 'namespace-module-use->module+linklet-instances"
"(case-lambda((self_834 ns_835 mu_836)(apply missing-kw self_834 ns_835 mu_836 null)))"
" #f"
" #f))"
"(define-values"
"(namespace-module-use->module+linklet-instances143.1)"
"(lambda(phase-shift137_837 shift-from135_838 shift-from138_839 shift-to136_840 shift-to139_841 ns141_842 mu142_843)"
"(let-values(((ns_844) ns141_842))"
"(let-values(((mu_845) mu142_843))"
"(let-values(((shift-from_846)(if shift-from138_839 shift-from135_838 #f)))"
"(let-values(((shift-to_847)(if shift-to139_841 shift-to136_840 #f)))"
"(let-values(((phase-shift_848) phase-shift137_837))"
"(let-values()"
"(let-values(((mod_849)(module-use-module mu_845)))"
"(let-values(((mi_850)"
"(let-values(((...namespace/module.rkt:470:4_853) namespace->module-instance69.1)"
"((ns232_854) ns_844)"
"((temp233_855)"
"(1/module-path-index-resolve"
"(if shift-from_846"
"(module-path-index-shift mod_849 shift-from_846 shift-to_847)"
" mod_849)))"
"((phase-shift234_856) phase-shift_848)"
"((temp235_857) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1"
" #f"
" #f"
" temp235_857"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns232_854"
" temp233_855"
" phase-shift234_856)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:470:4_853"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp235_857)"
" ns232_854"
" temp233_855"
" phase-shift234_856)))))"
"(let-values(((m-ns_851)(module-instance-namespace mi_850)))"
"(let-values(((d_852)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_851)"
"(module-use-phase mu_845)"
" #f)))"
"(if d_852"
"(values mi_850(definitions-variables d_852))"
"                          (error \"namespace mismatch: phase level not found\"))))))))))))))"
"(define-values"
"(unpack144.1)"
"(lambda(given-kws_858 given-args_859 ns141_860 mu142_861)"
"(let-values(((phase-shift137_862)(car given-args_859))"
"((given-kws_863)(cdr given-kws_858))"
"((given-args_864)(cdr given-args_859)))"
"(let-values(((shift-from138_865)(if(pair? given-kws_863)(eq? '#:shift-from(car given-kws_863)) #f)))"
"(let-values(((shift-from135_866)(if shift-from138_865(car given-args_864)(void)))"
"((given-kws_867)(if shift-from138_865(cdr given-kws_863) given-kws_863))"
"((given-args_868)(if shift-from138_865(cdr given-args_864) given-args_864)))"
"(let-values(((shift-to139_869)(pair? given-kws_867)))"
"(let-values(((shift-to136_870)(if shift-to139_869(car given-args_868)(void))))"
"(namespace-module-use->module+linklet-instances143.1"
" phase-shift137_862"
" shift-from135_866"
" shift-from138_865"
" shift-to136_870"
" shift-to139_869"
" ns141_860"
" mu142_861))))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances145.1)"
"(lifted/4.1$3"
"(lambda(given-kws_871 given-argc_872)"
"(if(= given-argc_872 4)(subsets? '(#:phase-shift) given-kws_871 '(#:phase-shift #:shift-from #:shift-to)) #f))"
"(case-lambda((given-kws_873 given-args_874 ns_875 mu_876)(unpack144.1 given-kws_873 given-args_874 ns_875 mu_876)))"
" '(#:phase-shift)"
" '(#:phase-shift #:shift-from #:shift-to)))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_877)"
"(let-values(((access_878)"
"(let-values(((ht_879)(module-provides m_877)))"
"(begin"
"(if((lambda(ht_880)(hash? ht_880)) ht_879)(void)(let-values()(default-in-hash ht_879)))"
"((letrec-values(((for-loop_881)"
"(lambda(table_882 i_883)"
"(if i_883"
"(let-values(((phase_884 at-phase_885)"
"(hash-iterate-key+value ht_879 i_883)))"
"(if #t"
"(let-values(((table_886)"
"(let-values(((table_887) table_882))"
"(let-values(((table_888)"
"(let-values()"
"(let-values(((key_889 val_890)"
"(let-values()"
"(values"
" phase_884"
"(let-values(((ht_891)"
" at-phase_885))"
"(begin"
"(if((lambda(ht_892)"
"(hash?"
" ht_892))"
" ht_891)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_891)))"
"((letrec-values(((for-loop_893)"
"(lambda(table_894"
" i_895)"
"(if i_895"
"(let-values(((sym_896"
" binding/p_897)"
"(hash-iterate-key+value"
" ht_891"
" i_895)))"
"(if #t"
"(let-values(((table_898)"
"(let-values(((table_899)"
" table_894))"
"(let-values(((table_900)"
"(let-values()"
"(let-values(((key_901"
" val_902)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_897))"
"(if(provided-as-protected?"
" binding/p_897)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_899"
" key_901"
" val_902)))))"
"(values"
" table_900)))))"
"(if #t"
"(for-loop_893"
" table_898"
"(hash-iterate-next"
" ht_891"
" i_895))"
" table_898))"
" table_894))"
" table_894))))"
" for-loop_893)"
" '#hash()"
"(hash-iterate-first"
" ht_891))))))))"
"(hash-set"
" table_887"
" key_889"
" val_890)))))"
"(values table_888)))))"
"(if #t"
"(for-loop_881 table_886(hash-iterate-next ht_879 i_883))"
" table_886))"
" table_882))"
" table_882))))"
" for-loop_881)"
" '#hasheqv()"
"(hash-iterate-first ht_879))))))"
"(begin(set-module-access! m_877 access_878) access_878))))"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((...inding-to-module.rkt:14:4_7) namespace->module-instance69.1)"
"((ns1_8) ns_2)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                                       \"module mismatch;\\n\""
"                                       \" attempted to use a module that is not available\\n\""
"                                       \"  possible cause:\\n\""
"                                       \"   using (dynamic-require .... #f)\\n\""
"                                       \"   but need (dynamic-require .... 0)\\n\""
"                                       \"  module: ~s\\n\""
"                                       \"  phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1 temp4_11 #t #f #f #f #f temp5_12 #t ns1_8 temp2_9 at-phase3_10)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...inding-to-module.rkt:14:4_7"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:unavailable-callback)"
"(list temp4_11 temp5_12)"
" ns1_8"
" temp2_9"
" at-phase3_10)))))"
"(begin"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_4))"
"(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((...r/expand/protect.rkt:53:14_23) resolve+shift15.1)"
"((id1_24) id_20)"
"((phase2_25) phase_17)"
"((temp3_26) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f temp3_26 #t #f #f id1_24 phase2_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:53:14_23"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_26)"
" id1_24"
" phase2_25)))))"
"(let-values(((c79637_27)(binding-free=id b_22)))"
"(if c79637_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
"                                                       (check-access b_22 mi_30 id_20 in-s_21 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_28"
"(let-values(((or-part_31) in-s_21))"
"(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((...r/expand/protect.rkt:66:13_32) module-binding-update46.1)"
"((next-b4_33) next-b_29)"
"((temp5_34)(syntax-inspector id_20)))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" temp5_34"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b4_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:66:13_32"
" keyword-procedure-extract"
" '(#:extra-inspector)"
" 3)"
" '(#:extra-inspector)"
"(list temp5_34)"
" next-b4_33))))"
"(let-values() next-b_29)))))"
" c79637_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" #f)))"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_8) (error \"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer))))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_36)"
"(begin"
"(if(if(procedure? proc_36)(procedure-arity-includes? proc_36 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_36)))"
"(set!-transformer1_11 proc_36))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_37)"
"(let-values(((v_38)((set!-transformer-value t_37) t_37)))"
"(if(procedure-arity-includes? v_38 1) v_38(lambda(s_39)(v_38 t_37 s_39))))))"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_2 key_3 val_4)(hash-set env_2 key_3 val_4)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_5)(let-values(((or-part_6)(eq? t_5 variable)))(if or-part_6 or-part_6(local-variable? t_5)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_7 make-_8 ?_9 -ref_10 -set!_11)"
"(let-values()"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable))))"
"(values struct:_7 make-_8 ?_9(make-struct-field-accessor -ref_10 0 'id))))"
"(define-values"
"(lifted/1.1$23)"
"(make-required"
" 'substitute-variable"
"(case-lambda((self_28 id_29 t_30)(apply missing-kw self_28 id_29 t_30 null)))"
" #f"
" #f))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_31 id4_32 t5_33)"
"(let-values(((id_34) id4_32))"
"(let-values(((t_35) t5_33))"
"(let-values(((no-stops?_36) no-stops?2_31))"
"(let-values()"
"(if(if no-stops?_36(local-variable? t_35) #f)"
"(let-values(((bind-id_37)(local-variable-id t_35)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_37)(syntax-e$1 bind-id_37) id_34 id_34)"
" id_34))"
" id_34)))))))"
"(define-values"
"(unpack7.1$4)"
"(lambda(given-kws_38 given-args_39 id4_40 t5_41)"
"(let-values(((no-stops?2_42)(car given-args_39)))(substitute-variable6.1 no-stops?2_42 id4_40 t5_41))))"
"(define-values"
"(substitute-variable8.1)"
"(lifted/1.1$23"
"(lambda(given-kws_43 given-argc_44)"
"(if(= given-argc_44 4)"
"(let-values(((l2_45) given-kws_43))"
"(if(pair? l2_45)(if(eq?(car l2_45) '#:no-stops?)(null?(cdr l2_45)) #f) #f))"
" #f))"
"(case-lambda((given-kws_46 given-args_47 id_48 t_49)(unpack7.1$4 given-kws_46 given-args_47 id_48 t_49)))"
" '(#:no-stops?)"
" '(#:no-stops?)))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_51)"
"(let-values(((or-part_52)(procedure? t_51)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(1/set!-transformer? t_51)))"
"(if or-part_53 or-part_53(1/rename-transformer? t_51)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_54)"
"(if(1/set!-transformer? t_54)"
"(let-values()(1/set!-transformer-procedure t_54))"
"(if(1/rename-transformer? t_54)(let-values()(lambda(s_55) s_55))(let-values() t_54)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_56 make-_57 ?_58 -ref_59 -set!_60)"
"(let-values()(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form))))"
"(values"
" struct:_56"
" make-_57"
" ?_58"
"(make-struct-field-accessor -ref_59 0 'expander)"
"(make-struct-field-accessor -ref_59 1 'name))))"
"(define-values"
"(add-binding!15.1)"
"(lambda(in10_82 in11_83 id12_84 binding13_85 phase14_86)"
"(let-values(((id_87) id12_84))"
"(let-values(((binding_88) binding13_85))"
"(let-values(((phase_89) phase14_86))"
"(let-values(((in-s_90)(if in11_83 in10_82 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_87 in-s_90)"
"(add-binding-in-scopes!(syntax-scope-set id_87 phase_89)(syntax-e$1 id_87) binding_88)))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_91 given-args_92 id12_93 binding13_94 phase14_95)"
"(let-values(((in11_96)(pair? given-kws_91)))"
"(let-values(((in10_97)(if in11_96(car given-args_92)(void))))"
"(add-binding!15.1 in10_97 in11_96 id12_93 binding13_94 phase14_95)))))"
"(define-values"
"(add-binding!17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_98 given-argc_99)"
"(if(= given-argc_99 5)"
"(let-values(((l1_100) given-kws_98))"
"(let-values(((l1_101)(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:in)(cdr l1_100) l1_100))))"
"(null? l1_101)))"
" #f))"
"(case-lambda"
"((given-kws_102 given-args_103 id_104 binding_105 phase_106)"
"(unpack16.1$3 given-kws_102 given-args_103 id_104 binding_105 phase_106)))"
" null"
" '(#:in)"
"(let-values(((add-binding!_107)"
"(case-lambda((id_108 binding_109 phase_110)(unpack16.1$3 null null id_108 binding_109 phase_110)))))"
" add-binding!_107)))"
"(define-values"
"(add-bulk-binding!23.1)"
"(lambda(in18_111 in19_112 s20_113 binding21_114 phase22_115)"
"(let-values(((s_116) s20_113))"
"(let-values(((binding_117) binding21_114))"
"(let-values(((phase_118) phase22_115))"
"(let-values(((in-s_119)(if in19_112 in18_111 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_116)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_119 s_116))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_116 phase_118) binding_117)))))))))"
"(define-values"
"(unpack24.1)"
"(lambda(given-kws_120 given-args_121 s20_122 binding21_123 phase22_124)"
"(let-values(((in19_125)(pair? given-kws_120)))"
"(let-values(((in18_126)(if in19_125(car given-args_121)(void))))"
"(add-bulk-binding!23.1 in18_126 in19_125 s20_122 binding21_123 phase22_124)))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_127 given-argc_128)"
"(if(= given-argc_128 5)"
"(let-values(((l1_129) given-kws_127))"
"(let-values(((l1_130)(if(null? l1_129) l1_129(if(eq?(car l1_129) '#:in)(cdr l1_129) l1_129))))"
"(null? l1_130)))"
" #f))"
"(case-lambda"
"((given-kws_131 given-args_132 s_133 binding_134 phase_135)"
"(unpack24.1 given-kws_131 given-args_132 s_133 binding_134 phase_135)))"
" null"
" '(#:in)"
"(let-values(((add-bulk-binding!_136)"
"(case-lambda((s_137 binding_138 phase_139)(unpack24.1 null null s_137 binding_138 phase_139)))))"
" add-bulk-binding!_136)))"
"(define-values"
"(add-local-binding!33.1)"
"(lambda(frame-id26_140 frame-id28_141 in27_142 in29_143 id30_144 phase31_145 counter32_146)"
"(let-values(((id_147) id30_144))"
"(let-values(((phase_148) phase31_145))"
"(let-values(((counter_149) counter32_146))"
"(let-values(((frame-id_150)(if frame-id28_141 frame-id26_140 #f)))"
"(let-values(((in-s_151)(if in29_143 in27_142 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_147 in-s_151)(values))))"
"(let-values((()(begin(set-box! counter_149(add1(unbox counter_149)))(values))))"
"(let-values(((key_152)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_147) (unbox counter_149)))))"
"(begin"
"(add-binding-in-scopes!"
"(syntax-scope-set id_147 phase_148)"
"(syntax-e$1 id_147)"
"(let-values(((...ander/expand/env.rkt:97:68_153) make-local-binding9.1)"
"((key53_154) key_152)"
"((frame-id54_155) frame-id_150))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id54_155 #t #f #f key53_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/env.rkt:97:68_153"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list frame-id54_155)"
" key53_154))))"
" key_152))))))))))))"
"(define-values"
"(unpack34.1$2)"
"(lambda(given-kws_156 given-args_157 id30_158 phase31_159 counter32_160)"
"(let-values(((frame-id28_161)(if(pair? given-kws_156)(eq? '#:frame-id(car given-kws_156)) #f)))"
"(let-values(((frame-id26_162)(if frame-id28_161(car given-args_157)(void)))"
"((given-kws_163)(if frame-id28_161(cdr given-kws_156) given-kws_156))"
"((given-args_164)(if frame-id28_161(cdr given-args_157) given-args_157)))"
"(let-values(((in29_165)(pair? given-kws_163)))"
"(let-values(((in27_166)(if in29_165(car given-args_164)(void))))"
"(add-local-binding!33.1"
" frame-id26_162"
" frame-id28_161"
" in27_166"
" in29_165"
" id30_158"
" phase31_159"
" counter32_160)))))))"
"(define-values"
"(add-local-binding!35.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_167 given-argc_168)"
"(if(= given-argc_168 5)"
"(let-values(((l1_169) given-kws_167))"
"(let-values(((l1_170)(if(null? l1_169) l1_169(if(eq?(car l1_169) '#:frame-id)(cdr l1_169) l1_169))))"
"(let-values(((l1_171) l1_170))"
"(let-values(((l1_172)(if(null? l1_171) l1_171(if(eq?(car l1_171) '#:in)(cdr l1_171) l1_171))))"
"(null? l1_172)))))"
" #f))"
"(case-lambda"
"((given-kws_173 given-args_174 id_175 phase_176 counter_177)"
"(unpack34.1$2 given-kws_173 given-args_174 id_175 phase_176 counter_177)))"
" null"
" '(#:frame-id #:in)"
"(let-values(((add-local-binding!_178)"
"(case-lambda((id_179 phase_180 counter_181)(unpack34.1$2 null null id_179 phase_180 counter_181)))))"
" add-local-binding!_178)))"
"(define-values"
"(check-id-taint)"
"(lambda(id_182 in-s_183)"
"(if(syntax-tainted?$1 id_182)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_183 id_182))"
"(void))))"
"(define-values"
"(binding-lookup46.1)"
"(lambda(in36_184"
" in38_185"
" out-of-context-as-variable?37_186"
" out-of-context-as-variable?39_187"
" b40_188"
" env41_189"
" lift-envs42_190"
" ns43_191"
" phase44_192"
" id45_193)"
"(let-values(((b_194) b40_188))"
"(let-values(((env_195) env41_189))"
"(let-values(((lift-envs_196) lift-envs42_190))"
"(let-values(((ns_197) ns43_191))"
"(let-values(((phase_198) phase44_192))"
"(let-values(((id_199) id45_193))"
"(let-values(((in-s_200)(if in38_185 in36_184 #f)))"
"(let-values(((out-of-context-as-variable?_201)"
"(if out-of-context-as-variable?39_187 out-of-context-as-variable?37_186 #f)))"
"(let-values()"
"(if(module-binding? b_194)"
"(let-values()"
"(let-values(((top-level?_202)(top-level-module-path-index?(module-binding-module b_194))))"
"(let-values(((mi_203)"
"(if(not top-level?_202)"
"(binding->module-instance b_194 ns_197 phase_198 id_199)"
" #f)))"
"(let-values(((m-ns_204)"
"(if top-level?_202"
" ns_197"
"(if mi_203(module-instance-namespace mi_203) #f))))"
"(let-values((()(begin(check-taint id_199)(values))))"
"(let-values(((t_205)"
"(namespace-get-transformer"
" m-ns_204"
"(module-binding-phase b_194)"
"(module-binding-sym b_194)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_203"
"(let-values()"
"(check-access"
" b_194"
" mi_203"
" id_199"
" in-s_200"
"                                                         (if t_205 \"transformer\" \"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_206)"
"(if mi_203"
"(if(module-instance-module mi_203)"
"(module-inspector(module-instance-module mi_203))"
" #f)"
" #f)))"
"(values t_205 insp_206)))))))))"
"(if(local-binding? b_194)"
"(let-values()"
"(let-values(((t_207)(hash-ref env_195(local-binding-key b_194) missing)))"
"(if(eq? t_207 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_208)"
"(let-values(((lst_209) lift-envs_196))"
"(begin"
"(if(list? lst_209)(void)(let-values()(in-list lst_209)))"
"((letrec-values(((for-loop_210)"
"(lambda(result_211 lst_212)"
"(if(pair? lst_212)"
"(let-values(((lift-env_213)"
"(unsafe-car lst_212)))"
"(if #t"
"(let-values(((result_214)"
"(let-values(((result_215)"
" result_211))"
"(let-values(((result_216)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_213)"
"(local-binding-key"
" b_194)"
" #f)))))"
"(values result_216)))))"
"(if(if #t"
"(not"
"((lambda x_217 result_214)"
" lift-env_213))"
" #f)"
"(for-loop_210"
" result_214"
"(unsafe-cdr lst_212))"
" result_214))"
" result_211))"
" result_211))))"
" for-loop_210)"
" #f"
" lst_209)))))"
"(if or-part_208"
" or-part_208"
"(if out-of-context-as-variable?_201"
" variable"
"                                         (error \"identifier used out of context:\" id_199))))"
" #f))"
"(let-values()(begin(check-taint id_199)(values t_207 #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_194)))))))))))))))"
"(define-values"
"(unpack47.1$1)"
"(lambda(given-kws_218 given-args_219 b40_220 env41_221 lift-envs42_222 ns43_223 phase44_224 id45_225)"
"(let-values(((in38_226)(if(pair? given-kws_218)(eq? '#:in(car given-kws_218)) #f)))"
"(let-values(((in36_227)(if in38_226(car given-args_219)(void)))"
"((given-kws_228)(if in38_226(cdr given-kws_218) given-kws_218))"
"((given-args_229)(if in38_226(cdr given-args_219) given-args_219)))"
"(let-values(((out-of-context-as-variable?39_230)(pair? given-kws_228)))"
"(let-values(((out-of-context-as-variable?37_231)"
"(if out-of-context-as-variable?39_230(car given-args_229)(void))))"
"(binding-lookup46.1"
" in36_227"
" in38_226"
" out-of-context-as-variable?37_231"
" out-of-context-as-variable?39_230"
" b40_220"
" env41_221"
" lift-envs42_222"
" ns43_223"
" phase44_224"
" id45_225)))))))"
"(define-values"
"(binding-lookup48.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_232 given-argc_233)"
"(if(= given-argc_233 8)"
"(let-values(((l1_234) given-kws_232))"
"(let-values(((l1_235)(if(null? l1_234) l1_234(if(eq?(car l1_234) '#:in)(cdr l1_234) l1_234))))"
"(let-values(((l1_236) l1_235))"
"(let-values(((l1_237)"
"(if(null? l1_236)"
" l1_236"
"(if(eq?(car l1_236) '#:out-of-context-as-variable?)(cdr l1_236) l1_236))))"
"(null? l1_237)))))"
" #f))"
"(case-lambda"
"((given-kws_238 given-args_239 b_240 env_241 lift-envs_242 ns_243 phase_244 id_245)"
"(unpack47.1$1 given-kws_238 given-args_239 b_240 env_241 lift-envs_242 ns_243 phase_244 id_245)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((binding-lookup_246)"
"(case-lambda"
"((b_247 env_248 lift-envs_249 ns_250 phase_251 id_252)"
"(unpack47.1$1 null null b_247 env_248 lift-envs_249 ns_250 phase_251 id_252)))))"
" binding-lookup_246)))"
"(define-values"
"(check-taint)"
"(lambda(id_253)"
"(if(syntax-tainted?$1 id_253)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_253))"
"(void))))"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values(((lst_3) ids_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((ht_8)"
"(let-values(((ht_9) ht_5))"
"(let-values(((ht_10)"
"(let-values()"
"(hash-update"
" ht_9"
"(identifier-binding-symbol$1 id_7 phase_1)"
"(lambda(l_11)(cons id_7 l_11))"
" null))))"
"(values ht_10)))))"
"(if #t(for-loop_4 ht_8(unsafe-cdr lst_6)) ht_8))"
" ht_5))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_12 phase_13 given-id_14)"
"(if(zero?(hash-count fs_12))"
" #f"
"(let-values(((lst_15)(hash-ref fs_12(identifier-binding-symbol$1 given-id_14 phase_13) null)))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((id_19)(unsafe-car lst_18)))"
"(if #t"
"(let-values(((result_20)"
"(let-values(((result_21) result_17))"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_19"
" given-id_14"
" phase_13"
" phase_13)))))"
"(values result_22)))))"
"(if(if #t(not((lambda x_23 result_20) id_19)) #f)"
"(for-loop_16 result_20(unsafe-cdr lst_18))"
" result_20))"
" result_17))"
" result_17))))"
" for-loop_16)"
" #f"
" lst_15))))))"
"(define-values(free-id-set-empty?)(lambda(fs_24)(zero?(hash-count fs_24))))"
"(define-values"
"(struct:expand-context"
" expand-context1.1"
" expand-context?"
" expand-context-context"
" expand-context-phase"
" expand-context-namespace"
" expand-context-env"
" expand-context-user-env"
" expand-context-post-expansion-scope-action"
" expand-context-scopes"
" expand-context-def-ctx-scopes"
" expand-context-reference-records"
" expand-context-only-immediate?"
" expand-context-just-once?"
" expand-context-module-begin-k"
" expand-context-need-eventually-defined"
" expand-context-allow-unbound?"
" expand-context-preserve-#%expression-and-do-not-add-#%top?"
" expand-context-stops"
" expand-context-current-introduction-scopes"
" expand-context-declared-submodule-names"
" expand-context-lifts"
" expand-context-lift-envs"
" expand-context-module-lifts"
" expand-context-require-lifts"
" expand-context-to-module-lifts"
" expand-context-requires+provides"
" expand-context-name"
" expand-context-observer)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(let-values()"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context"
" 26"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25)"
" #f"
" 'expand-context))))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 0 'context)"
"(make-struct-field-accessor -ref_5 1 'phase)"
"(make-struct-field-accessor -ref_5 2 'namespace)"
"(make-struct-field-accessor -ref_5 3 'env)"
"(make-struct-field-accessor -ref_5 4 'user-env)"
"(make-struct-field-accessor -ref_5 5 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_5 6 'scopes)"
"(make-struct-field-accessor -ref_5 7 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_5 8 'reference-records)"
"(make-struct-field-accessor -ref_5 9 'only-immediate?)"
"(make-struct-field-accessor -ref_5 10 'just-once?)"
"(make-struct-field-accessor -ref_5 11 'module-begin-k)"
"(make-struct-field-accessor -ref_5 12 'need-eventually-defined)"
"(make-struct-field-accessor -ref_5 13 'allow-unbound?)"
"(make-struct-field-accessor -ref_5 14 'preserve-#%expression-and-do-not-add-#%top?)"
"(make-struct-field-accessor -ref_5 15 'stops)"
"(make-struct-field-accessor -ref_5 16 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_5 17 'declared-submodule-names)"
"(make-struct-field-accessor -ref_5 18 'lifts)"
"(make-struct-field-accessor -ref_5 19 'lift-envs)"
"(make-struct-field-accessor -ref_5 20 'module-lifts)"
"(make-struct-field-accessor -ref_5 21 'require-lifts)"
"(make-struct-field-accessor -ref_5 22 'to-module-lifts)"
"(make-struct-field-accessor -ref_5 23 'requires+provides)"
"(make-struct-field-accessor -ref_5 24 'name)"
"(make-struct-field-accessor -ref_5 25 'observer))))"
"(define-values"
"(make-expand-context)"
"(lambda(ns_148)"
"(let-values(((root-ctx_149)(namespace-get-root-expand-ctx ns_148)))"
"(expand-context1.1"
"(root-expand-context-module-scopes root-ctx_149)"
"(root-expand-context-post-expansion-scope root-ctx_149)"
"(root-expand-context-top-level-bind-scope root-ctx_149)"
"(root-expand-context-all-scopes-stx root-ctx_149)"
"(root-expand-context-use-site-scopes root-ctx_149)"
"(root-expand-context-defined-syms root-ctx_149)"
"(root-expand-context-frame-id root-ctx_149)"
"(root-expand-context-counter root-ctx_149)"
"(root-expand-context-lift-key root-ctx_149)"
" 'top-level"
"(namespace-phase ns_148)"
" ns_148"
" empty-env"
" '#hasheq()"
" push-scope"
" null"
" #f"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe)))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_150 root-ctx_151)"
"(let-values(((the-struct_152) ctx_150))"
"(if(expand-context? the-struct_152)"
"(let-values(((module-scopes17_153)(root-expand-context-module-scopes root-ctx_151))"
"((post-expansion-scope18_154)(root-expand-context-post-expansion-scope root-ctx_151))"
"((top-level-bind-scope19_155)(root-expand-context-top-level-bind-scope root-ctx_151))"
"((all-scopes-stx20_156)(root-expand-context-all-scopes-stx root-ctx_151))"
"((use-site-scopes21_157)(root-expand-context-use-site-scopes root-ctx_151))"
"((defined-syms22_158)(root-expand-context-defined-syms root-ctx_151))"
"((frame-id23_159)(root-expand-context-frame-id root-ctx_151))"
"((counter24_160)(root-expand-context-counter root-ctx_151))"
"((lift-key25_161)(root-expand-context-lift-key root-ctx_151)))"
"(expand-context1.1"
" module-scopes17_153"
" post-expansion-scope18_154"
" top-level-bind-scope19_155"
" all-scopes-stx20_156"
" use-site-scopes21_157"
" defined-syms22_158"
" frame-id23_159"
" counter24_160"
" lift-key25_161"
"(expand-context-context the-struct_152)"
"(expand-context-phase the-struct_152)"
"(expand-context-namespace the-struct_152)"
"(expand-context-env the-struct_152)"
"(expand-context-user-env the-struct_152)"
"(expand-context-post-expansion-scope-action the-struct_152)"
"(expand-context-scopes the-struct_152)"
"(expand-context-def-ctx-scopes the-struct_152)"
"(expand-context-reference-records the-struct_152)"
"(expand-context-only-immediate? the-struct_152)"
"(expand-context-just-once? the-struct_152)"
"(expand-context-module-begin-k the-struct_152)"
"(expand-context-need-eventually-defined the-struct_152)"
"(expand-context-allow-unbound? the-struct_152)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_152)"
"(expand-context-stops the-struct_152)"
"(expand-context-current-introduction-scopes the-struct_152)"
"(expand-context-declared-submodule-names the-struct_152)"
"(expand-context-lifts the-struct_152)"
"(expand-context-lift-envs the-struct_152)"
"(expand-context-module-lifts the-struct_152)"
"(expand-context-require-lifts the-struct_152)"
"(expand-context-to-module-lifts the-struct_152)"
"(expand-context-requires+provides the-struct_152)"
"(expand-context-name the-struct_152)"
"(expand-context-observer the-struct_152)))"
"        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_152)))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context6.1)"
"(lambda(fail-ok?2_162 fail-ok?3_163 who4_164 who5_165)"
"(let-values(((who_166)(if who5_165 who4_164 'unexpected)))"
"(let-values(((fail-ok?_167)(if fail-ok?3_163 fail-ok?2_162 #f)))"
"(let-values()"
"(let-values(((or-part_168)(force(current-expand-context))))"
"(if or-part_168"
" or-part_168"
"              (if fail-ok?_167 #f (raise-arguments-error who_166 \"not currently expanding\")))))))))"
"(define-values"
"(unpack7.1$3)"
"(lambda(given-kws_169 given-args_170 who4_171 who5_172)"
"(let-values(((fail-ok?3_173)(pair? given-kws_169)))"
"(let-values(((fail-ok?2_174)(if fail-ok?3_173(car given-args_170)(void))))"
"(get-current-expand-context6.1 fail-ok?2_174 fail-ok?3_173 who4_171 who5_172)))))"
"(define-values"
"(get-current-expand-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_175 given-argc_176)"
"(if(if(>= given-argc_176 2)(<= given-argc_176 3) #f)"
"(let-values(((l1_177) given-kws_175))"
"(let-values(((l1_178)(if(null? l1_177) l1_177(if(eq?(car l1_177) '#:fail-ok?)(cdr l1_177) l1_177))))"
"(null? l1_178)))"
" #f))"
"(case-lambda"
"((given-kws_179 given-args_180)(unpack7.1$3 given-kws_179 given-args_180 #f #f))"
"((given-kws_181 given-args_182 who4_183)(unpack7.1$3 given-kws_181 given-args_182 who4_183 #t)))"
" null"
" '(#:fail-ok?)"
"(let-values(((get-current-expand-context_184)"
"(case-lambda(()(unpack7.1$3 null null #f #f))((who4_185)(unpack7.1$3 null null who4_185 #t)))))"
" get-current-expand-context_184)))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_186)"
"(begin"
"(if(let-values(((or-part_187)(not v_186)))"
"(if or-part_187 or-part_187(if(procedure? v_186)(procedure-arity-includes? v_186 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_186)))"
" v_186))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_188)"
"(if(if(eq? 'expression(expand-context-context ctx_188))(not(expand-context-name ctx_188)) #f)"
"(let-values() ctx_188)"
"(let-values()"
"(let-values(((the-struct_189) ctx_188))"
"(if(expand-context? the-struct_189)"
"(let-values(((context26_190) 'expression)"
"((name27_191) #f)"
"((use-site-scopes28_192) #f)"
"((post-expansion-scope29_193) #f)"
"((frame-id30_194) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_189)"
" post-expansion-scope29_193"
"(root-expand-context-top-level-bind-scope the-struct_189)"
"(root-expand-context-all-scopes-stx the-struct_189)"
" use-site-scopes28_192"
"(root-expand-context-defined-syms the-struct_189)"
" frame-id30_194"
"(root-expand-context-counter the-struct_189)"
"(root-expand-context-lift-key the-struct_189)"
" context26_190"
"(expand-context-phase the-struct_189)"
"(expand-context-namespace the-struct_189)"
"(expand-context-env the-struct_189)"
"(expand-context-user-env the-struct_189)"
"(expand-context-post-expansion-scope-action the-struct_189)"
"(expand-context-scopes the-struct_189)"
"(expand-context-def-ctx-scopes the-struct_189)"
"(expand-context-reference-records the-struct_189)"
"(expand-context-only-immediate? the-struct_189)"
"(expand-context-just-once? the-struct_189)"
"(expand-context-module-begin-k the-struct_189)"
"(expand-context-need-eventually-defined the-struct_189)"
"(expand-context-allow-unbound? the-struct_189)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_189)"
"(expand-context-stops the-struct_189)"
"(expand-context-current-introduction-scopes the-struct_189)"
"(expand-context-declared-submodule-names the-struct_189)"
"(expand-context-lifts the-struct_189)"
"(expand-context-lift-envs the-struct_189)"
"(expand-context-module-lifts the-struct_189)"
"(expand-context-require-lifts the-struct_189)"
"(expand-context-to-module-lifts the-struct_189)"
"(expand-context-requires+provides the-struct_189)"
" name27_191"
"(expand-context-observer the-struct_189)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_189)))))))"
"(define-values"
"(lifted/1.1$22)"
"(make-required 'as-tail-context(case-lambda((self_195 ctx_196)(apply missing-kw self_195 ctx_196 null))) #f #f))"
"(define-values"
"(as-tail-context12.1)"
"(lambda(wrt9_197 ctx11_198)"
"(let-values(((ctx_199) ctx11_198))"
"(let-values(((wrt-ctx_200) wrt9_197))"
"(let-values()"
"(if(expand-context-name wrt-ctx_200)"
"(let-values()"
"(let-values(((the-struct_201) ctx_199))"
"(if(expand-context? the-struct_201)"
"(let-values(((name31_202)(expand-context-name wrt-ctx_200)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_201)"
"(root-expand-context-post-expansion-scope the-struct_201)"
"(root-expand-context-top-level-bind-scope the-struct_201)"
"(root-expand-context-all-scopes-stx the-struct_201)"
"(root-expand-context-use-site-scopes the-struct_201)"
"(root-expand-context-defined-syms the-struct_201)"
"(root-expand-context-frame-id the-struct_201)"
"(root-expand-context-counter the-struct_201)"
"(root-expand-context-lift-key the-struct_201)"
"(expand-context-context the-struct_201)"
"(expand-context-phase the-struct_201)"
"(expand-context-namespace the-struct_201)"
"(expand-context-env the-struct_201)"
"(expand-context-user-env the-struct_201)"
"(expand-context-post-expansion-scope-action the-struct_201)"
"(expand-context-scopes the-struct_201)"
"(expand-context-def-ctx-scopes the-struct_201)"
"(expand-context-reference-records the-struct_201)"
"(expand-context-only-immediate? the-struct_201)"
"(expand-context-just-once? the-struct_201)"
"(expand-context-module-begin-k the-struct_201)"
"(expand-context-need-eventually-defined the-struct_201)"
"(expand-context-allow-unbound? the-struct_201)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_201)"
"(expand-context-stops the-struct_201)"
"(expand-context-current-introduction-scopes the-struct_201)"
"(expand-context-declared-submodule-names the-struct_201)"
"(expand-context-lifts the-struct_201)"
"(expand-context-lift-envs the-struct_201)"
"(expand-context-module-lifts the-struct_201)"
"(expand-context-require-lifts the-struct_201)"
"(expand-context-to-module-lifts the-struct_201)"
"(expand-context-requires+provides the-struct_201)"
" name31_202"
"(expand-context-observer the-struct_201)))"
"                  (raise-argument-error 'struct-copy \"expand-context?\" the-struct_201))))"
"(let-values() ctx_199)))))))"
"(define-values"
"(unpack13.1$1)"
"(lambda(given-kws_203 given-args_204 ctx11_205)"
"(let-values(((wrt9_206)(car given-args_204)))(as-tail-context12.1 wrt9_206 ctx11_205))))"
"(define-values"
"(as-tail-context14.1)"
"(lifted/1.1$22"
"(lambda(given-kws_207 given-argc_208)"
"(if(= given-argc_208 3)"
"(let-values(((l2_209) given-kws_207))"
"(if(pair? l2_209)(if(eq?(car l2_209) '#:wrt)(null?(cdr l2_209)) #f) #f))"
" #f))"
"(case-lambda((given-kws_210 given-args_211 ctx_212)(unpack13.1$1 given-kws_210 given-args_211 ctx_212)))"
" '(#:wrt)"
" '(#:wrt)))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_213 ids_214)"
"(if(if(pair? ids_214)(null?(cdr ids_214)) #f)"
"(let-values()"
"(let-values(((the-struct_215) ctx_213))"
"(if(expand-context? the-struct_215)"
"(let-values(((name32_216)(car ids_214)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_215)"
"(root-expand-context-post-expansion-scope the-struct_215)"
"(root-expand-context-top-level-bind-scope the-struct_215)"
"(root-expand-context-all-scopes-stx the-struct_215)"
"(root-expand-context-use-site-scopes the-struct_215)"
"(root-expand-context-defined-syms the-struct_215)"
"(root-expand-context-frame-id the-struct_215)"
"(root-expand-context-counter the-struct_215)"
"(root-expand-context-lift-key the-struct_215)"
"(expand-context-context the-struct_215)"
"(expand-context-phase the-struct_215)"
"(expand-context-namespace the-struct_215)"
"(expand-context-env the-struct_215)"
"(expand-context-user-env the-struct_215)"
"(expand-context-post-expansion-scope-action the-struct_215)"
"(expand-context-scopes the-struct_215)"
"(expand-context-def-ctx-scopes the-struct_215)"
"(expand-context-reference-records the-struct_215)"
"(expand-context-only-immediate? the-struct_215)"
"(expand-context-just-once? the-struct_215)"
"(expand-context-module-begin-k the-struct_215)"
"(expand-context-need-eventually-defined the-struct_215)"
"(expand-context-allow-unbound? the-struct_215)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_215)"
"(expand-context-stops the-struct_215)"
"(expand-context-current-introduction-scopes the-struct_215)"
"(expand-context-declared-submodule-names the-struct_215)"
"(expand-context-lifts the-struct_215)"
"(expand-context-lift-envs the-struct_215)"
"(expand-context-module-lifts the-struct_215)"
"(expand-context-require-lifts the-struct_215)"
"(expand-context-to-module-lifts the-struct_215)"
"(expand-context-requires+provides the-struct_215)"
" name32_216"
"(expand-context-observer the-struct_215)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_215))))"
"(let-values() ctx_213))))"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_289)"
"(if(pair? s_289)"
"(let-values()(let-values(((r_290)(to-syntax-list.1(cdr s_289))))(if r_290(cons(car s_289) r_290) #f)))"
"(if(syntax?$1 s_289)"
"(let-values()(to-syntax-list.1(syntax-e$1 s_289)))"
"(if(list? s_289)(let-values() s_289)(let-values() #f))))))"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_1 proc_2)(begin(add-core-binding! sym_1)(set! core-forms(hash-set core-forms sym_1 proc_2)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_3 val_4)"
"(begin(add-core-binding! sym_3)(set! core-primitives(hash-set core-primitives sym_3 val_4)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_5)"
"(let-values(((temp1_6)(datum->syntax$1 core-stx sym_5))"
"((temp2_7)"
"(let-values(((core-mpi4_9) core-mpi)((temp5_10) 0)((sym6_11) sym_5))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_9"
" temp5_10"
" sym6_11)"
"(make-module-binding22.1 core-mpi4_9 temp5_10 sym6_11))))"
"((temp3_8) 0))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f temp1_6 temp2_7 temp3_8)"
"(add-binding!17.1 temp1_6 temp2_7 temp3_8)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_12)"
"(let-values(((ns7_13) ns_12)"
"((temp8_14)"
"(let-values(((...r/namespace/core.rkt:59:3_16) make-module36.1)"
"((temp10_17) #t)"
"((temp11_18) #t)"
"((temp12_19) #t)"
"((core-mpi13_20) core-mpi)"
"((temp14_21)"
"(hasheqv"
" 0"
"(let-values(((lst_23)(list core-primitives core-forms))((lst_24) '(#f #t)))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(table_26 lst_27 lst_28)"
"(if(if(pair? lst_27)(pair? lst_28) #f)"
"(let-values(((syms_29)(unsafe-car lst_27))"
"((syntax?_30)(unsafe-car lst_28)))"
"(if(if #t #t #f)"
"(let-values(((table_31)"
"(let-values(((table_32) table_26))"
"(if #t"
"(let-values(((ht_33) syms_29))"
"(begin"
"(if((lambda(ht_34)(hash? ht_34))"
" ht_33)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_33)))"
"((letrec-values(((for-loop_35)"
"(lambda(table_36"
" i_37)"
"(if i_37"
"(let-values(((sym_38)"
"(hash-iterate-key"
" ht_33"
" i_37)))"
"(if #t"
"(let-values(((table_39)"
"(let-values(((table_40)"
" table_36))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_42"
" val_43)"
"(let-values()"
"(let-values(((b_44)"
"(let-values(((core-mpi16_45)"
" core-mpi)"
"((temp17_46)"
" 0)"
"((sym18_47)"
" sym_38))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi16_45"
" temp17_46"
" sym18_47)"
"(make-module-binding22.1"
" core-mpi16_45"
" temp17_46"
" sym18_47)))))"
"(values"
" sym_38"
"(if syntax?_30"
"(provided1.1"
" b_44"
" #f"
" #t)"
" b_44))))))"
"(hash-set"
" table_40"
" key_42"
" val_43)))))"
"(values"
" table_41)))))"
"(if #t"
"(for-loop_35"
" table_39"
"(hash-iterate-next"
" ht_33"
" i_37))"
" table_39))"
" table_36))"
" table_36))))"
" for-loop_35)"
" table_32"
"(hash-iterate-first ht_33))))"
" table_32))))"
"(if(if #t #t #f)"
"(for-loop_25"
" table_31"
"(unsafe-cdr lst_27)"
"(unsafe-cdr lst_28))"
" table_31))"
" table_26))"
" table_26))))"
" for-loop_25)"
" '#hasheq()"
" lst_23"
" lst_24)))))"
"((temp15_22)"
"(lambda(data-box_48"
" ns_49"
" phase_50"
" phase-level_51"
" self_52"
" bulk-binding-registry_53"
" insp_54)"
"(let-values(((tmp_55) phase-level_51))"
"(if(equal? tmp_55 0)"
"(let-values()"
"(begin"
"(let-values(((ht_56) core-primitives))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(fold-var_59 i_60)"
"(if i_60"
"(let-values(((sym_61 val_62)"
"(hash-iterate-key+value ht_56 i_60)))"
"(if #t"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_64)"
" fold-var_59))"
"(let-values(((fold-var_65)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_49"
" 0"
" sym_61"
" val_62))"
"(void)))))"
"(values fold-var_65)))))"
"(if #t"
"(for-loop_58"
" fold-var_63"
"(hash-iterate-next ht_56 i_60))"
" fold-var_63))"
" fold-var_59))"
" fold-var_59))))"
" for-loop_58)"
"(void)"
"(hash-iterate-first ht_56))))"
"(let-values(((ht_66) core-forms))"
"(begin"
"(if((lambda(ht_67)(hash? ht_67)) ht_66)"
"(void)"
"(let-values()(default-in-hash ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(fold-var_69 i_70)"
"(if i_70"
"(let-values(((sym_71 proc_72)"
"(hash-iterate-key+value ht_66 i_70)))"
"(if #t"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74)"
" fold-var_69))"
"(let-values(((fold-var_75)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_49"
" 0"
" sym_71"
"(core-form9.1"
" proc_72"
" sym_71)))"
"(void)))))"
"(values fold-var_75)))))"
"(if #t"
"(for-loop_68"
" fold-var_73"
"(hash-iterate-next ht_66 i_70))"
" fold-var_73))"
" fold-var_69))"
" fold-var_69))))"
" for-loop_68)"
"(void)"
"(hash-iterate-first ht_66))))))"
"(let-values()(void)))))))"
"(if(variable-reference-constant?(#%variable-reference make-module36.1))"
"(make-module34.1"
" temp10_17"
" #t"
" #f"
" #f"
" temp15_22"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_18"
" #t"
" temp12_19"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_21"
" #f"
" #f"
" core-mpi13_20"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/namespace/core.rkt:59:3_16"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
"(list temp10_17 temp15_22 temp11_18 temp12_19 temp14_21 core-mpi13_20)))))"
"((core-module-name9_15) core-module-name))"
"(if(variable-reference-constant?(#%variable-reference declare-module!55.1))"
"(declare-module!53.1 #f #f ns7_13 temp8_14 core-module-name9_15)"
"(declare-module!55.1 ns7_13 temp8_14 core-module-name9_15)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_76 phase_77)"
"(let-values(((ok?_78 id19_79 _20_80)"
"(let-values(((s_91) s_76))"
"(if(if #t"
"(let-values(((s_92)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(if(pair? s_92)"
"(if(let-values(((s_93)(car s_92)))"
"(if(syntax?$1 s_93)(symbol?(syntax-e$1 s_93)) #f))"
"(let-values(((s_94)(cdr s_92))) #t)"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_95) s_91))"
"(let-values(((id19_96 _20_97)"
"(let-values(((s_98)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(if #t"
"(let-values(((id21_99)(let-values(((s_101)(car s_98))) s_101))"
"((_22_100)(let-values(((s_102)(cdr s_98))) s_102)))"
"(values id21_99 _22_100))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_95)))))"
"(values #t id19_96 _20_97)))"
"(values #f #f #f)))))"
"(if ok?_78"
"(let-values(((b_103)"
"(let-values(((temp23_104) id19_79)((phase24_105) phase_77))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f temp23_104 phase24_105)"
"(resolve+shift15.1 temp23_104 phase24_105)))))"
"(if(module-binding? b_103)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_103)))"
"(module-binding-sym b_103)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values(((tmp_7) mode_6))"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(syntax-map"
"(let-values(((or-part_9)(syntax->list$1 s_5)))"
"(if or-part_9 or-part_9(syntax-e$1 s_5)))"
"(lambda(tail?_10 d_11) d_11)"
"(lambda(s_12 d_13)(loop_4 s_12(syntax-taint-mode-property s_12)))"
" #f)))"
"(datum->syntax$1"
" #f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_14)(syntax-e$1 s_5)))"
"(if(pair? c_14)"
"(let-values()"
"(let-values(((cd_15)"
"(if(syntax?$1(cdr c_14))(syntax-e$1(cdr c_14))(cdr c_14))))"
"(if(let-values(((or-part_16)(pair? cd_15)))"
"(if or-part_16"
" or-part_16"
"(if(syntax?$1 cd_15)(pair?(syntax-e$1 cd_15)) #f)))"
"(let-values()"
"(let-values(((d_17)(if(syntax?$1 cd_15)(syntax-e$1 cd_15) cd_15)))"
"(datum->syntax$1"
" s_5"
"(cons"
"(loop_4(car c_14)(syntax-taint-mode-property s_5))"
"(cons"
"(loop_4(car d_17) 'transparent)"
"(syntax-map"
"(syntax->list$1(cdr d_17))"
"(lambda(tail?_18 d_19) d_19)"
"(lambda(s_20 d_21)(loop_4 s_20(syntax-taint-mode-property s_20)))"
" #f)))"
" s_5"
" s_5)))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_22)(syntax-e$1 s_5)))"
"(let-values(((tmp_23)(core-form-sym c_22 phase_3)))"
"(if(if(equal? tmp_23 'begin)"
" #t"
"(if(equal? tmp_23 'begin-for-syntax)"
" #t"
"(if(equal? tmp_23 'module) #t(equal? tmp_23 '#%module-begin))))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_23 'define-values) #t(equal? tmp_23 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_24)"
"(let-values(((or-part_25)(syntax-property$1 s_24 'taint-mode)))"
"(if or-part_25 or-part_25(syntax-property$1 s_24 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_26)(syntax-property-remove(syntax-property-remove s_26 'taint-mode) 'certify-mode)))"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(alt-reverse"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((smss_10)(unsafe-car lst_9)))"
"(if #t"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_14)"
"(if(identifier? s_1)"
"(hasheq"
" 'name"
"(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_15)"
"(scope-set-at-fallback"
" s_1"
" smss_10"
" phase_2)))"
"(let-values(((context_16)"
"(scope-set->context"
" s-scs_15)))"
"(let-values(((context-ht_17)"
"(hash-set"
" init-ht_14"
" 'context"
" context_16)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_1)))"
"(let-values(((bindings_19)"
"(if(identifier?"
" s_1)"
"(let-values()"
"(alt-reverse"
"(let-values(((ht_20)"
" s-scs_15))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash?"
" ht_21)"
"(immutable?"
" ht_21)"
" #f))"
" ht_20)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23"
" i_24)"
"(if i_24"
"(let-values(((sc_25)"
"(unsafe-immutable-hash-iterate-key"
" ht_20"
" i_24)))"
"(if #t"
"(let-values(((fold-var_26)"
"(let-values(((ht_27"
" bulk-bindings_28)"
"(let-values(((table_31)"
"(scope-binding-table"
" sc_25)))"
"(if(hash?"
" table_31)"
"(values"
"(hash-ref"
" table_31"
" sym_18"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_31)"
" sym_18"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_31)))))"
"((s_29)"
" s_1)"
"((extra-shifts_30)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33"
" i_34"
" already-covered-scopes_35)"
"(if(not"
"(null?"
" i_34))"
"(let-values(((scs_36)"
"(if(pair?"
" i_34)"
"(let-values()"
"(let-values(((scs_38)"
"(bulk-binding-at-scopes"
"(car"
" i_34))))"
"(if(not"
"(set-member?"
" already-covered-scopes_35"
" scs_38))"
" scs_38"
" #f)))"
"(let-values()"
"(hash-iterate-key"
" ht_27"
" i_34))))"
"((b_37)"
"(if(pair?"
" i_34)"
"(let-values()"
"(let-values(((bulk_39)"
"(bulk-binding-at-bulk"
"(car"
" i_34))))"
"(let-values(((b-info_40)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_39"
" s_29"
" extra-shifts_30)"
" sym_18"
" #f)))"
"(if b-info_40"
"((bulk-binding-create"
" bulk_39)"
" bulk_39"
" b-info_40"
" sym_18)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_27"
" i_34)))))"
"(if #t"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_33))"
"(if(if scs_36"
"(if b_37"
"(let-values(((or-part_43)"
" all-bindings?_3))"
"(if or-part_43"
" or-part_43"
"(subset?"
" scs_36"
" s-scs_15)))"
" #f)"
" #f)"
"(let-values(((fold-var_44)"
" fold-var_42))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_36)"
" 'match?"
"(subset?"
" scs_36"
" s-scs_15)"
"(if(local-binding?"
" b_37)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_37)"
"(local-binding-key"
" b_37)"
"(vector"
"(module-binding-sym"
" b_37)"
"(module-binding-module"
" b_37)"
"(module-binding-phase"
" b_37)))))"
" fold-var_44))))"
"(values"
" fold-var_45)))"
" fold-var_42))))"
"(if #t"
"(for-loop_32"
" fold-var_41"
"(if(pair?"
" i_34)"
"(let-values()"
"(cdr"
" i_34))"
"(let-values()"
"(let-values(((or-part_46)"
"(hash-iterate-next"
" ht_27"
" i_34)))"
"(if or-part_46"
" or-part_46"
" bulk-bindings_28))))"
"(if(if(pair?"
" bulk-bindings_28)"
"(if scs_36"
"(if b_37"
"(let-values(((or-part_47)"
"(not"
"(pair?"
" i_34))))"
"(if or-part_47"
" or-part_47"
"(not"
"(null?"
"(cdr"
" i_34)))))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(set-add"
" already-covered-scopes_35"
" scs_36))"
"(let-values()"
" already-covered-scopes_35)))"
" fold-var_41))"
" fold-var_33))"
" fold-var_33))))"
" for-loop_32)"
" fold-var_23"
"(let-values(((or-part_48)"
"(hash-iterate-first"
" ht_27)))"
"(if or-part_48"
" or-part_48"
" bulk-bindings_28))"
" '#hasheq())))))"
"(if #t"
"(for-loop_22"
" fold-var_26"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))"
" fold-var_26))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first"
" ht_20))))))"
"(let-values()"
" null))))"
"(if(null? bindings_19)"
" context-ht_17"
"(hash-set"
" context-ht_17"
" 'bindings"
" bindings_19)))))))))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(if #t(for-loop_7 fold-var_11(unsafe-cdr lst_9)) fold-var_11))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_49)"
"(let-values(((...der/syntax/debug.rkt:52:2_50) sort9.1)"
"((temp1_51)"
"(alt-reverse"
"(let-values(((ht_54) scs_49))"
"(begin"
"(if((lambda(ht_55)(if(hash? ht_55)(immutable? ht_55) #f)) ht_54)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_54)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57 i_58)"
"(if i_58"
"(let-values(((sc_59)(unsafe-immutable-hash-iterate-key ht_54 i_58)))"
"(if #t"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_57))"
"(let-values(((fold-var_62)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_59)"
"(vector"
"(scope-id sc_59)"
"(scope-kind sc_59)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_59)))"
"(vector"
"(scope-id sc_59)"
"(scope-kind sc_59))))"
" fold-var_61))))"
"(values fold-var_62)))))"
"(if #t"
"(for-loop_56"
" fold-var_60"
"(unsafe-immutable-hash-iterate-next ht_54 i_58))"
" fold-var_60))"
" fold-var_57))"
" fold-var_57))))"
" for-loop_56)"
" null"
"(unsafe-immutable-hash-iterate-first ht_54))))))"
"((<2_52) <)"
"((temp3_53)(lambda(v_63)(vector-ref v_63 0))))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f temp3_53 #t temp1_51 <2_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/syntax/debug.rkt:52:2_50"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list temp3_53)"
" temp1_51"
" <2_52)))))"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_1 #f null (syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) #t)))"
"((letrec-values(((loop_6)"
"(lambda(info_7 layer_8)"
"(string-append"
"                           \"\\n  context\""
"(layer->string layer_8)"
"                           \"...:\""
"(describe-context(hash-ref info_7 'context))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_9 pos-next_10 init_11 pos-cont?_12 val-cont?_13 all-cont?_14)"
"(make-sequence '(b)(hash-ref info_7 'bindings null))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_15)"
"(lambda(fold-var_16 pos_17)"
"(if(if pos-cont?_12(pos-cont?_12 pos_17) #t)"
"(let-values(((b_18)(pos->vals_9 pos_17)))"
"(if(if val-cont?_13(val-cont?_13 b_18) #t)"
"(let-values(((fold-var_19)"
"(let-values(((fold-var_20) fold-var_16))"
"(let-values(((fold-var_21)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                               \"\\n  \""
"(if(hash-ref"
" b_18"
" 'match?"
" #f)"
"                                                                                                 \"matching\""
"                                                                                                 \"other\")"
"                                                                                               \" binding\""
"(layer->string layer_8)"
"                                                                                               \"...:\""
"                                                                                               \"\\n   \""
"(if(hash-ref"
" b_18"
" 'local"
" #f)"
"                                                                                                 \"local\""
"(format"
"                                                                                                  \"~a\""
"(hash-ref"
" b_18"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_18"
" 'context))))"
" fold-var_20))))"
"(values fold-var_21)))))"
"(if(if all-cont?_14(all-cont?_14 pos_17 b_18) #t)"
"(for-loop_15 fold-var_19(pos-next_10 pos_17))"
" fold-var_19))"
" fold-var_16))"
" fold-var_16))))"
" for-loop_15)"
" null"
" init_11)))))"
"(let-values(((fallbacks_22)(hash-ref info_7 'fallbacks null)))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_23) fallbacks_22)((start_24)(add1 layer_8)))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(exact-nonnegative-integer? start_24)"
"(void)"
"(let-values()(in-naturals start_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27 pos_28)"
"(if(if(pair? lst_27) #t #f)"
"(let-values(((fallback_29)(unsafe-car lst_27))"
"((layer_30) pos_28))"
"(if(if #t #t #f)"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32) fold-var_26))"
"(let-values(((fold-var_33)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_6"
" fallback_29"
" layer_30))"
" fold-var_32))))"
"(values fold-var_33)))))"
"(if(if #t #t #f)"
"(for-loop_25"
" fold-var_31"
"(unsafe-cdr lst_27)"
"(+ pos_28 1))"
" fold-var_31))"
" fold-var_26))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_23"
" start_24))))))))))"
" loop_6)"
" info_5"
" 0))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_34)"
"(let-values(((strs_35)"
"((letrec-values(((loop_36)"
"(lambda(strs_37 scopes_38)"
"(if(null? scopes_38)"
"(let-values()(alt-reverse strs_37))"
"(let-values()"
"                                          (let-values (((str_39) (format \" ~a\" (car scopes_38))))"
"(if(if(pair? strs_37)"
"(<(+(string-length str_39)(string-length(car strs_37))) 72)"
" #f)"
"(loop_36"
"(cons(string-append(car strs_37) str_39)(cdr strs_37))"
"(cdr scopes_38))"
"(loop_36(cons str_39 strs_37)(cdr scopes_38)))))))))"
" loop_36)"
" null"
" scopes_34)))"
"(if(null? strs_35)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_40) strs_35))"
"(begin"
"(if(list? lst_40)(void)(let-values()(in-list lst_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_42 lst_43)"
"(if(pair? lst_43)"
"(let-values(((str_44)(unsafe-car lst_43)))"
"(if #t"
"(let-values(((fold-var_45)"
"(let-values(((fold-var_46) fold-var_42))"
"(let-values(((fold-var_47)"
"(let-values()"
"(cons"
"                                                                           (let-values () (string-append \"\\n  \" str_44))"
" fold-var_46))))"
"(values fold-var_47)))))"
"(if #t(for-loop_41 fold-var_45(unsafe-cdr lst_43)) fold-var_45))"
" fold-var_42))"
" fold-var_42))))"
" for-loop_41)"
" null"
" lst_40))))))))))"
" (define-values (layer->string) (lambda (layer_48) (if (zero? layer_48) \"\" (format \" at layer ~a\" layer_48))))"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values(((tmp_8) sym_2))"
"(if(equal? tmp_8 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_8 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not"
"(let-values(((trigger-id1_9) trigger-id_3)((phase2_10) phase_5))"
"(if(variable-reference-constant?(#%variable-reference resolve21.1))"
"(resolve19.1 #f #f #f #f #f #f trigger-id1_9 phase2_10)"
"(resolve21.1 trigger-id1_9 phase2_10))))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_2"
"(let-values(((tmp_11) phase_5))"
"(if(equal? tmp_11 0)"
"                (let-values () \"\")"
"(if(equal? tmp_11 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 #f)"
"(if unbound?_7(if(not(eq?(syntax-e$1 s_1)(syntax-e$1 trigger-id_3))) s_1 #f) #f)"
" null"
"           (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) \"\")))))))"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values(((ids_8) ids5_3))"
"(let-values(((phase_9) phase6_4))"
"(let-values(((s_10) s7_5))"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
"            (let-values (((what_12) (if what2_2 what1_1 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values(((lst_17) l_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20)))"
"(if #t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_19))"
"(let-values(((fold-var_24)"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_14"
" phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                    \"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(void)))))"
"(values fold-var_24)))))"
"(if #t"
"(for-loop_18"
" fold-var_22"
"(unsafe-cdr lst_20))"
" fold-var_22))"
" fold-var_19))"
" fold-var_19))))"
" for-loop_18)"
"(void)"
" lst_17)))"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(define-values"
"(unpack9.1$2)"
"(lambda(given-kws_25 given-args_26 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)"
"(let-values(((what2_32)(pair? given-kws_25)))"
"(let-values(((what1_33)(if what2_32(car given-args_26)(void))))"
"(check-no-duplicate-ids8.1 what1_33 what2_32 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)))))"
"(define-values"
"(check-no-duplicate-ids10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_34 given-argc_35)"
"(if(if(>= given-argc_35 5)(<= given-argc_35 6) #f)"
"(let-values(((l1_36) given-kws_34))"
"(let-values(((l1_37)(if(null? l1_36) l1_36(if(eq?(car l1_36) '#:what)(cdr l1_36) l1_36))))"
"(null? l1_37)))"
" #f))"
"(case-lambda"
"((given-kws_38 given-args_39 ids_40 phase_41 s_42)"
"(unpack9.1$2 given-kws_38 given-args_39 ids_40 phase_41 s_42 #f #f))"
"((given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48)"
"(unpack9.1$2 given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48 #t)))"
" null"
" '(#:what)"
"(let-values(((check-no-duplicate-ids_49)"
"(case-lambda"
"((ids_50 phase_51 s_52)(unpack9.1$2 null null ids_50 phase_51 s_52 #f #f))"
"((ids_53 phase_54 s_55 ht3_56)(unpack9.1$2 null null ids_53 phase_54 s_55 ht3_56 #t)))))"
" check-no-duplicate-ids_49)))"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(alt-reverse"
"(let-values(((lst_4) s_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_1))))"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'self)"
"(make-struct-field-accessor -ref_4 3 'module-self)"
"(make-struct-field-accessor -ref_4 4 'full-module-name)"
"(make-struct-field-accessor -ref_4 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_52"
" full-module-name12_53"
" lazy-syntax-literals?7_54"
" lazy-syntax-literals?13_55"
" module-self5_56"
" module-self11_57"
" namespace2_58"
" namespace8_59"
" phase3_60"
" phase9_61"
" self4_62"
" self10_63)"
"(let-values(((namespace_64)(if namespace8_59 namespace2_58(1/current-namespace))))"
"(let-values(((phase_65)(if phase9_61 phase3_60(namespace-phase namespace_64))))"
"(let-values(((self_66)(if self10_63 self4_62(namespace-mpi namespace_64))))"
"(let-values(((module-self_67)(if module-self11_57 module-self5_56 #f)))"
"(let-values(((full-module-name_68)(if full-module-name12_53 full-module-name6_52 #f)))"
"(let-values(((lazy-syntax-literals?_69)"
"(if lazy-syntax-literals?13_55 lazy-syntax-literals?7_54(if module-self_67 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_67(not full-module-name_68) #f)"
"                      (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_64"
" phase_65"
" self_66"
" module-self_67"
" full-module-name_68"
" lazy-syntax-literals?_69"
" #f)))))))))))"
"(define-values"
"(unpack15.1$1)"
"(lambda(given-kws_70 given-args_71)"
"(let-values(((full-module-name12_72)(if(pair? given-kws_70)(eq? '#:full-module-name(car given-kws_70)) #f)))"
"(let-values(((full-module-name6_73)(if full-module-name12_72(car given-args_71)(void)))"
"((given-kws_74)(if full-module-name12_72(cdr given-kws_70) given-kws_70))"
"((given-args_75)(if full-module-name12_72(cdr given-args_71) given-args_71)))"
"(let-values(((lazy-syntax-literals?13_76)"
"(if(pair? given-kws_74)(eq? '#:lazy-syntax-literals?(car given-kws_74)) #f)))"
"(let-values(((lazy-syntax-literals?7_77)(if lazy-syntax-literals?13_76(car given-args_75)(void)))"
"((given-kws_78)(if lazy-syntax-literals?13_76(cdr given-kws_74) given-kws_74))"
"((given-args_79)(if lazy-syntax-literals?13_76(cdr given-args_75) given-args_75)))"
"(let-values(((module-self11_80)(if(pair? given-kws_78)(eq? '#:module-self(car given-kws_78)) #f)))"
"(let-values(((module-self5_81)(if module-self11_80(car given-args_79)(void)))"
"((given-kws_82)(if module-self11_80(cdr given-kws_78) given-kws_78))"
"((given-args_83)(if module-self11_80(cdr given-args_79) given-args_79)))"
"(let-values(((namespace8_84)(if(pair? given-kws_82)(eq? '#:namespace(car given-kws_82)) #f)))"
"(let-values(((namespace2_85)(if namespace8_84(car given-args_83)(void)))"
"((given-kws_86)(if namespace8_84(cdr given-kws_82) given-kws_82))"
"((given-args_87)(if namespace8_84(cdr given-args_83) given-args_83)))"
"(let-values(((phase9_88)(if(pair? given-kws_86)(eq? '#:phase(car given-kws_86)) #f)))"
"(let-values(((phase3_89)(if phase9_88(car given-args_87)(void)))"
"((given-kws_90)(if phase9_88(cdr given-kws_86) given-kws_86))"
"((given-args_91)(if phase9_88(cdr given-args_87) given-args_87)))"
"(let-values(((self10_92)(pair? given-kws_90)))"
"(let-values(((self4_93)(if self10_92(car given-args_91)(void))))"
"(make-compile-context14.1"
" full-module-name6_73"
" full-module-name12_72"
" lazy-syntax-literals?7_77"
" lazy-syntax-literals?13_76"
" module-self5_81"
" module-self11_80"
" namespace2_85"
" namespace8_84"
" phase3_89"
" phase9_88"
" self4_93"
" self10_92)))))))))))))))"
"(define-values"
"(make-compile-context16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_94 given-argc_95)"
"(if(= given-argc_95 2)"
"(let-values(((l1_96) given-kws_94))"
"(let-values(((l1_97)(if(null? l1_96) l1_96(if(eq?(car l1_96) '#:full-module-name)(cdr l1_96) l1_96))))"
"(let-values(((l1_98) l1_97))"
"(let-values(((l1_99)"
"(if(null? l1_98) l1_98(if(eq?(car l1_98) '#:lazy-syntax-literals?)(cdr l1_98) l1_98))))"
"(let-values(((l1_100) l1_99))"
"(let-values(((l1_101)"
"(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:module-self)(cdr l1_100) l1_100))))"
"(let-values(((l1_102) l1_101))"
"(let-values(((l1_103)"
"(if(null? l1_102) l1_102(if(eq?(car l1_102) '#:namespace)(cdr l1_102) l1_102))))"
"(let-values(((l1_104) l1_103))"
"(let-values(((l1_105)"
"(if(null? l1_104) l1_104(if(eq?(car l1_104) '#:phase)(cdr l1_104) l1_104))))"
"(let-values(((l1_106) l1_105))"
"(let-values(((l1_107)"
"(if(null? l1_106)"
" l1_106"
"(if(eq?(car l1_106) '#:self)(cdr l1_106) l1_106))))"
"(null? l1_107)))))))))))))"
" #f))"
"(case-lambda((given-kws_108 given-args_109)(unpack15.1$1 given-kws_108 given-args_109)))"
" null"
" '(#:full-module-name #:lazy-syntax-literals? #:module-self #:namespace #:phase #:self)"
"(let-values(((make-compile-context_110)(case-lambda(()(unpack15.1$1 null null))))) make-compile-context_110)))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values(make-module-path-index-table)(lambda()(make-hasheq)))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_1 mpi_2)"
"(let-values(((pos_3)(add-module-path-index!/pos mpis_1 mpi_2)))"
"(if pos_3(list 'vector-ref mpi-vector-id pos_3) #f))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_4 mpi_5)"
"(if(not mpi_5)"
"(let-values() #f)"
"(if mpi_5"
"(let-values()"
"(let-values(((or-part_6)(hash-ref mpis_4 mpi_5 #f)))"
"(if or-part_6"
" or-part_6"
"(let-values(((pos_7)(hash-count mpis_4)))(begin(hash-set! mpis_4 mpi_5 pos_7) pos_7)))))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_8)"
"(let-values(((gen-order_9)(make-hasheqv)))"
"(let-values(((rev-mpis_10)"
"(let-values(((ht_13) mpis_8))"
"(begin"
"(if((lambda(ht_14)(hash? ht_14)) ht_13)(void)(let-values()(default-in-hash ht_13)))"
"((letrec-values(((for-loop_15)"
"(lambda(table_16 i_17)"
"(if i_17"
"(let-values(((k_18 v_19)(hash-iterate-key+value ht_13 i_17)))"
"(if #t"
"(let-values(((table_20)"
"(let-values(((table_21) table_16))"
"(let-values(((table_22)"
"(let-values()"
"(let-values(((key_23 val_24)"
"(let-values()"
"(values v_19 k_18))))"
"(hash-set"
" table_21"
" key_23"
" val_24)))))"
"(values table_22)))))"
"(if #t"
"(for-loop_15 table_20(hash-iterate-next ht_13 i_17))"
" table_20))"
" table_16))"
" table_16))))"
" for-loop_15)"
" '#hasheqv()"
"(hash-iterate-first ht_13))))))"
"(let-values((()"
"(begin"
"(let-values(((start_25) 0)((end_26)(hash-count rev-mpis_10))((inc_27) 1))"
"(begin"
"(if(if(real? start_25)(if(real? end_26)(real? inc_27) #f) #f)"
"(void)"
"(let-values()(in-range start_25 end_26 inc_27)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29 pos_30)"
"(if(< pos_30 end_26)"
"(let-values(((i_31) pos_30))"
"(if #t"
"(let-values(((fold-var_32)"
"(let-values(((fold-var_33) fold-var_29))"
"(let-values(((fold-var_34)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_35)"
"(hash-ref"
" rev-mpis_10"
" i_31)))"
"((letrec-values(((loop_36)"
"(lambda(mpi_37)"
"(if(hash-ref"
" gen-order_9"
" mpi_37"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_38"
" base_39)"
"(1/module-path-index-split"
" mpi_37)))"
"(begin"
"(if base_39"
"(let-values()"
"(loop_36"
" base_39))"
"(void))"
"(hash-set!"
" gen-order_9"
" mpi_37"
"(hash-count"
" gen-order_9)))))))))"
" loop_36)"
" mpi_35)))"
"(void)))))"
"(values fold-var_34)))))"
"(if #t(for-loop_28 fold-var_32(+ pos_30 inc_27)) fold-var_32))"
" fold-var_29))"
" fold-var_29))))"
" for-loop_28)"
"(void)"
" start_25)))"
"(values))))"
"(let-values(((rev-gen-order_11)"
"(let-values(((ht_40) gen-order_9))"
"(begin"
"(if((lambda(ht_41)(hash? ht_41)) ht_40)(void)(let-values()(default-in-hash ht_40)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43 i_44)"
"(if i_44"
"(let-values(((k_45 v_46)(hash-iterate-key+value ht_40 i_44)))"
"(if #t"
"(let-values(((table_47)"
"(let-values(((table_48) table_43))"
"(let-values(((table_49)"
"(let-values()"
"(let-values(((key_50 val_51)"
"(let-values()"
"(values"
" v_46"
" k_45))))"
"(hash-set"
" table_48"
" key_50"
" val_51)))))"
"(values table_49)))))"
"(if #t"
"(for-loop_42 table_47(hash-iterate-next ht_40 i_44))"
" table_47))"
" table_43))"
" table_43))))"
" for-loop_42)"
" '#hasheqv()"
"(hash-iterate-first ht_40))))))"
"(let-values(((gens_12)"
"(let-values(((len_52)(hash-count gen-order_9)))"
"(begin"
"(if(exact-nonnegative-integer? len_52)"
"(void)"
"                                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_52)))"
"(let-values(((v_53)(make-vector len_52 0)))"
"(begin"
"(if(zero? len_52)"
"(void)"
"(let-values()"
"(let-values(((start_54) 0)((end_55)(hash-count gen-order_9))((inc_56) 1))"
"(begin"
"(if(if(real? start_54)(if(real? end_55)(real? inc_56) #f) #f)"
"(void)"
"(let-values()(in-range start_54 end_55 inc_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(i_58 pos_59)"
"(if(< pos_59 end_55)"
"(let-values(((i_60) pos_59))"
"(if #t"
"(let-values(((i_61)"
"(let-values(((i_62) i_58))"
"(let-values(((i_63)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_53"
" i_62"
"(let-values()"
"(let-values(((mpi_64)"
"(hash-ref"
" rev-gen-order_11"
" i_60)))"
"(let-values(((path_65"
" base_66)"
"(1/module-path-index-split"
" mpi_64)))"
"(if(top-level-module-path-index?"
" mpi_64)"
"(let-values()"
" 'top)"
"(if(not"
" path_65)"
"(let-values()"
"(box"
"(let-values(((or-part_67)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_64))))"
"(if or-part_67"
" or-part_67"
" 'self))))"
"(if(not"
" base_66)"
"(let-values()"
"(vector"
" path_65))"
"(if base_66"
"(let-values()"
"(vector"
" path_65"
"(hash-ref"
" gen-order_9"
" base_66)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_62)))))"
"(values i_63)))))"
"(if(if #t"
"(not"
"((lambda x_68(unsafe-fx= i_61 len_52))"
" i_60))"
" #f)"
"(for-loop_57 i_61(+ pos_59 inc_56))"
" i_61))"
" i_58))"
" i_58))))"
" for-loop_57)"
" 0"
" start_54)))))"
" v_53))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_12)"
"(list"
" 'quote"
"(let-values(((vec_69 i_70)"
"(let-values(((start_71) 0)((end_72)(hash-count rev-mpis_10))((inc_73) 1))"
"(begin"
"(if(if(real? start_71)(if(real? end_72)(real? inc_73) #f) #f)"
"(void)"
"(let-values()(in-range start_71 end_72 inc_73)))"
"((letrec-values(((for-loop_74)"
"(lambda(vec_75 i_76 pos_77)"
"(if(< pos_77 end_72)"
"(let-values(((i_78) pos_77))"
"(if #t"
"(let-values(((vec_79 i_80)"
"(let-values(((vec_81) vec_75)((i_82) i_76))"
"(let-values(((vec_83 i_84)"
"(let-values()"
"(let-values(((new-vec_85)"
"(if(eq?"
" i_82"
"(unsafe-vector*-length"
" vec_81))"
"(grow-vector"
" vec_81)"
" vec_81)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_85"
" i_82"
"(let-values()"
"(hash-ref"
" gen-order_9"
"(hash-ref"
" rev-mpis_10"
" i_78))))"
"(values"
" new-vec_85"
"(unsafe-fx+"
" i_82"
" 1)))))))"
"(values vec_83 i_84)))))"
"(if #t"
"(for-loop_74 vec_79 i_80(+ pos_77 inc_73))"
"(values vec_79 i_80)))"
"(values vec_75 i_76)))"
"(values vec_75 i_76)))))"
" for-loop_74)"
"(make-vector 16)"
" 0"
" start_71)))))"
"(shrink-vector vec_69 i_70)))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_86 order-vec_87)"
"(let-values(((gen_88)(make-vector(vector-length gen-vec_86) #f)))"
"(begin"
"(let-values(((vec_89 len_90)"
"(let-values(((vec_92) gen-vec_86))"
"(begin"
"(if(vector? vec_92)(void)(let-values()(in-vector vec_92)))"
"(values vec_92(unsafe-vector-length vec_92)))))"
"((start_91) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_91)(void)(let-values()(in-naturals start_91)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_94 pos_95 pos_96)"
"(if(if(unsafe-fx< pos_95 len_90) #t #f)"
"(let-values(((d_97)(unsafe-vector-ref vec_89 pos_95))((i_98) pos_96))"
"(if(if #t #t #f)"
"(let-values(((fold-var_99)"
"(let-values(((fold-var_100) fold-var_94))"
"(let-values(((fold-var_101)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_88"
" i_98"
"(if(eq? d_97 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_97)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_97)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector-ref d_97 0)"
"(if(>(vector-length d_97) 1)"
"(vector-ref"
" gen_88"
"(vector-ref d_97 1))"
" #f)))))))"
"(void)))))"
"(values fold-var_101)))))"
"(if(if #t #t #f)"
"(for-loop_93 fold-var_99(unsafe-fx+ 1 pos_95)(+ pos_96 1))"
" fold-var_99))"
" fold-var_94))"
" fold-var_94))))"
" for-loop_93)"
"(void)"
" 0"
" start_91)))"
"(let-values(((len_102)(vector-length order-vec_87)))"
"(begin"
"(if(exact-nonnegative-integer? len_102)"
"(void)"
"              (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_102)))"
"(let-values(((v_103)(make-vector len_102 0)))"
"(begin"
"(if(zero? len_102)"
"(void)"
"(let-values()"
"(let-values(((vec_104 len_105)"
"(let-values(((vec_106) order-vec_87))"
"(begin"
"(if(vector? vec_106)(void)(let-values()(in-vector vec_106)))"
"(values vec_106(unsafe-vector-length vec_106))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_107)"
"(lambda(i_108 pos_109)"
"(if(unsafe-fx< pos_109 len_105)"
"(let-values(((p_110)(unsafe-vector-ref vec_104 pos_109)))"
"(if #t"
"(let-values(((i_111)"
"(let-values(((i_112) i_108))"
"(let-values(((i_113)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_103"
" i_112"
"(let-values()"
"(vector-ref gen_88 p_110)))"
"(unsafe-fx+ 1 i_112)))))"
"(values i_113)))))"
"(if(if #t"
"(not((lambda x_114(unsafe-fx= i_111 len_102)) p_110))"
" #f)"
"(for-loop_107 i_111(unsafe-fx+ 1 pos_109))"
" i_111))"
" i_108))"
" i_108))))"
" for-loop_107)"
" 0"
" 0)))))"
" v_103))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_115)"
"(let-values(((vec_116)(make-vector(hash-count mpis_115) #f)))"
"(begin"
"(let-values(((ht_117) mpis_115))"
"(begin"
"(if((lambda(ht_118)(hash? ht_118)) ht_117)(void)(let-values()(default-in-hash ht_117)))"
"((letrec-values(((for-loop_119)"
"(lambda(fold-var_120 i_121)"
"(if i_121"
"(let-values(((mpi_122 pos_123)(hash-iterate-key+value ht_117 i_121)))"
"(if #t"
"(let-values(((fold-var_124)"
"(let-values(((fold-var_125) fold-var_120))"
"(let-values(((fold-var_126)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_116 pos_123 mpi_122))"
"(void)))))"
"(values fold-var_126)))))"
"(if #t"
"(for-loop_119 fold-var_124(hash-iterate-next ht_117 i_121))"
" fold-var_124))"
" fold-var_120))"
" fold-var_120))))"
" for-loop_119)"
"(void)"
"(hash-iterate-first ht_117))))"
" vec_116))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_137 mpis_138)"
"(alt-reverse"
"(let-values(((lst_139) mus_137))"
"(begin"
"(if(list? lst_139)(void)(let-values()(in-list lst_139)))"
"((letrec-values(((for-loop_140)"
"(lambda(fold-var_141 lst_142)"
"(if(pair? lst_142)"
"(let-values(((mu_143)(unsafe-car lst_142)))"
"(if #t"
"(let-values(((fold-var_144)"
"(let-values(((fold-var_145) fold-var_141))"
"(let-values(((fold-var_146)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_138"
"(module-use-module mu_143))"
"(module-use-phase mu_143)))"
" fold-var_145))))"
"(values fold-var_146)))))"
"(if #t(for-loop_140 fold-var_144(unsafe-cdr lst_142)) fold-var_144))"
" fold-var_141))"
" fold-var_141))))"
" for-loop_140)"
" null"
" lst_139))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_147)"
"(let-values(((or-part_148)(null? v_147)))"
"(if or-part_148"
" or-part_148"
"(let-values(((or-part_149)(boolean? v_147)))"
"(if or-part_149"
" or-part_149"
"(let-values(((or-part_150)"
"(if(fixnum? v_147)(if(< v_147(sub1(expt 2 30)))(> v_147(-(expt 2 30))) #f) #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)(if(symbol? v_147)(symbol-interned? v_147) #f)))"
"(if or-part_151"
" or-part_151"
"(let-values(((or-part_152)(char? v_147)))(if or-part_152 or-part_152(keyword? v_147)))))))))))))"
"(define-values"
"(generate-deserialize5.1)"
"(lambda(syntax-support?1_153 syntax-support?2_154 v3_155 mpis4_156)"
"(let-values(((v_157) v3_155))"
"(let-values(((mpis_158) mpis4_156))"
"(let-values(((syntax-support?_159)(if syntax-support?2_154 syntax-support?1_153 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_160)(find-reachable-scopes v_157)))"
"(let-values(((state_161)(make-serialize-state reachable-scopes_160)))"
"(let-values(((mutables_162)(make-hasheq)))"
"(let-values(((objs_163)(make-hasheq)))"
"(let-values(((shares_164)(make-hasheq)))"
"(let-values(((obj-step_165) 0))"
"(let-values(((frontier_166) null))"
"(let-values(((add-frontier!_167)"
"(lambda(v_179)(set! frontier_166(cons v_179 frontier_166)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_180)"
"(lambda(v_181)"
"(begin"
"((letrec-values(((loop_182)"
"(lambda(v_183)"
"(if(let-values(((or-part_184)"
"(interned-literal?"
" v_183)))"
"(if or-part_184"
" or-part_184"
"(1/module-path-index?"
" v_183)))"
"(let-values()(void))"
"(if(hash-ref objs_163 v_183 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_162"
" v_183"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_164"
" v_183"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_183)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_162"
" v_183"
"(hash-count"
" mutables_162))"
"((serialize-fill!-ref"
" v_183)"
" v_183"
" add-frontier!_167"
" state_161)))"
"(if(serialize? v_183)"
"(let-values()"
"((serialize-ref"
" v_183)"
" v_183"
"(let-values(((core16_185)"
"(lambda(v15_186"
" ref?13_187"
" ref?14_188)"
"(let-values(((v_189)"
" v15_186))"
"(let-values(((ref?_190)"
"(if ref?14_188"
" ref?13_187"
" #f)))"
"(let-values()"
"(loop_182"
" v_189)))))))"
"(case-lambda"
"((v_191)"
"(core16_185"
" v_191"
" #f"
" #f))"
"((v_192"
" ref?13_193)"
"(core16_185"
" v_192"
" ref?13_193"
" #t))))"
" state_161))"
"(if(pair? v_183)"
"(let-values()"
"(begin"
"(loop_182"
"(car v_183))"
"(loop_182"
"(cdr v_183))))"
"(if(vector? v_183)"
"(let-values()"
"(if(let-values(((or-part_194)"
"(immutable?"
" v_183)))"
"(if or-part_194"
" or-part_194"
"(zero?"
"(vector-length"
" v_183))))"
"(let-values(((vec_195"
" len_196)"
"(let-values(((vec_197)"
" v_183))"
"(begin"
"(if(vector?"
" vec_197)"
"(void)"
"(let-values()"
"(in-vector"
" vec_197)))"
"(values"
" vec_197"
"(unsafe-vector-length"
" vec_197))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_198)"
"(lambda(fold-var_199"
" pos_200)"
"(if(unsafe-fx<"
" pos_200"
" len_196)"
"(let-values(((e_201)"
"(unsafe-vector-ref"
" vec_195"
" pos_200)))"
"(if #t"
"(let-values(((fold-var_202)"
"(let-values(((fold-var_203)"
" fold-var_199))"
"(let-values(((fold-var_204)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_182"
" e_201))"
"(void)))))"
"(values"
" fold-var_204)))))"
"(if #t"
"(for-loop_198"
" fold-var_202"
"(unsafe-fx+"
" 1"
" pos_200))"
" fold-var_202))"
" fold-var_199))"
" fold-var_199))))"
" for-loop_198)"
"(void)"
" 0)))"
"(begin"
"(hash-set!"
" mutables_162"
" v_183"
"(hash-count"
" mutables_162))"
"(let-values(((vec_205"
" len_206)"
"(let-values(((vec_207)"
" v_183))"
"(begin"
"(if(vector?"
" vec_207)"
"(void)"
"(let-values()"
"(in-vector"
" vec_207)))"
"(values"
" vec_207"
"(unsafe-vector-length"
" vec_207))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_208)"
"(lambda(fold-var_209"
" pos_210)"
"(if(unsafe-fx<"
" pos_210"
" len_206)"
"(let-values(((e_211)"
"(unsafe-vector-ref"
" vec_205"
" pos_210)))"
"(if #t"
"(let-values(((fold-var_212)"
"(let-values(((fold-var_213)"
" fold-var_209))"
"(let-values(((fold-var_214)"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_167"
" e_211))"
"(void)))))"
"(values"
" fold-var_214)))))"
"(if #t"
"(for-loop_208"
" fold-var_212"
"(unsafe-fx+"
" 1"
" pos_210))"
" fold-var_212))"
" fold-var_209))"
" fold-var_209))))"
" for-loop_208)"
"(void)"
" 0))))))"
"(if(box? v_183)"
"(let-values()"
"(if(immutable?"
" v_183)"
"(loop_182"
"(unbox"
" v_183))"
"(begin"
"(hash-set!"
" mutables_162"
" v_183"
"(hash-count"
" mutables_162))"
"(add-frontier!_167"
"(unbox"
" v_183)))))"
"(if(hash?"
" v_183)"
"(let-values()"
"(if(immutable?"
" v_183)"
"(let-values(((ht_215)"
" v_183))"
"(begin"
"(if((lambda(ht_216)"
"(hash?"
" ht_216))"
" ht_215)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_215)))"
"((letrec-values(((for-loop_217)"
"(lambda(fold-var_218"
" i_219)"
"(if i_219"
"(let-values(((k_220"
" v_221)"
"(hash-iterate-key+value"
" ht_215"
" i_219)))"
"(if #t"
"(let-values(((fold-var_222)"
"(let-values(((fold-var_223)"
" fold-var_218))"
"(let-values(((fold-var_224)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_182"
" k_220)"
"(loop_182"
" v_221)))"
"(void)))))"
"(values"
" fold-var_224)))))"
"(if #t"
"(for-loop_217"
" fold-var_222"
"(hash-iterate-next"
" ht_215"
" i_219))"
" fold-var_222))"
" fold-var_218))"
" fold-var_218))))"
" for-loop_217)"
"(void)"
"(hash-iterate-first"
" ht_215))))"
"(begin"
"(hash-set!"
" mutables_162"
" v_183"
"(hash-count"
" mutables_162))"
"(let-values(((ht_225)"
" v_183))"
"(begin"
"(if((lambda(ht_226)"
"(hash?"
" ht_226))"
" ht_225)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_225)))"
"((letrec-values(((for-loop_227)"
"(lambda(fold-var_228"
" i_229)"
"(if i_229"
"(let-values(((k_230"
" v_231)"
"(hash-iterate-key+value"
" ht_225"
" i_229)))"
"(if #t"
"(let-values(((fold-var_232)"
"(let-values(((fold-var_233)"
" fold-var_228))"
"(let-values(((fold-var_234)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_167"
" k_230)"
"(add-frontier!_167"
" v_231)))"
"(void)))))"
"(values"
" fold-var_234)))))"
"(if #t"
"(for-loop_227"
" fold-var_232"
"(hash-iterate-next"
" ht_225"
" i_229))"
" fold-var_232))"
" fold-var_228))"
" fold-var_228))))"
" for-loop_227)"
"(void)"
"(hash-iterate-first"
" ht_225)))))))"
"(if(prefab-struct-key"
" v_183)"
"(let-values()"
"(let-values(((v*_235"
" start*_236"
" stop*_237"
" step*_238)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                             \"vector\""
"(lambda(x_239)"
"(vector?"
" x_239))"
"(lambda(x_240)"
"(unsafe-vector-length"
" x_240))"
"(struct->vector"
" v_183)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_241)"
"(lambda(fold-var_242"
" idx_243)"
"(if(unsafe-fx<"
" idx_243"
" stop*_237)"
"(let-values(((e_244)"
"(unsafe-vector-ref"
" v*_235"
" idx_243)))"
"(if #t"
"(let-values(((fold-var_245)"
"(let-values(((fold-var_246)"
" fold-var_242))"
"(let-values(((fold-var_247)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_182"
" e_244))"
"(void)))))"
"(values"
" fold-var_247)))))"
"(if #t"
"(for-loop_241"
" fold-var_245"
"(unsafe-fx+"
" idx_243"
" 1))"
" fold-var_245))"
" fold-var_242))"
" fold-var_242))))"
" for-loop_241)"
"(void)"
" start*_236))))"
"(if(srcloc?"
" v_183)"
"(let-values()"
"(let-values(((v*_248"
" start*_249"
" stop*_250"
" step*_251)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_252)"
"(vector?"
" x_252))"
"(lambda(x_253)"
"(unsafe-vector-length"
" x_253))"
"(struct->vector"
" v_183)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_254)"
"(lambda(fold-var_255"
" idx_256)"
"(if(unsafe-fx<"
" idx_256"
" stop*_250)"
"(let-values(((e_257)"
"(unsafe-vector-ref"
" v*_248"
" idx_256)))"
"(if #t"
"(let-values(((fold-var_258)"
"(let-values(((fold-var_259)"
" fold-var_255))"
"(let-values(((fold-var_260)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_182"
" e_257))"
"(void)))))"
"(values"
" fold-var_260)))))"
"(if #t"
"(for-loop_254"
" fold-var_258"
"(unsafe-fx+"
" idx_256"
" 1))"
" fold-var_258))"
" fold-var_255))"
" fold-var_255))))"
" for-loop_254)"
"(void)"
" start*_249))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_163"
" v_183"
" obj-step_165)"
"(set! obj-step_165"
"(add1"
" obj-step_165)))))))))"
" loop_182)"
" v_181)"
"(if(null? frontier_166)"
"(void)"
"(let-values()"
"(let-values(((l_261) frontier_166))"
"(begin"
"(set! frontier_166 null)"
"(let-values(((lst_262) l_261))"
"(begin"
"(if(list? lst_262)"
"(void)"
"(let-values()(in-list lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(fold-var_264"
" lst_265)"
"(if(pair? lst_265)"
"(let-values(((v_266)"
"(unsafe-car"
" lst_265)))"
"(if #t"
"(let-values(((fold-var_267)"
"(let-values(((fold-var_268)"
" fold-var_264))"
"(let-values(((fold-var_269)"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_180"
" v_266))"
"(void)))))"
"(values"
" fold-var_269)))))"
"(if #t"
"(for-loop_263"
" fold-var_267"
"(unsafe-cdr"
" lst_265))"
" fold-var_267))"
" fold-var_264))"
" fold-var_264))))"
" for-loop_263)"
"(void)"
" lst_262)))))))))))"
" frontier-loop_180)"
" v_157)"
"(values))))"
"(let-values(((num-mutables_168)(hash-count mutables_162)))"
"(let-values(((share-step-positions_169)"
"(let-values(((share-steps_270)"
"(alt-reverse"
"(let-values(((ht_271) shares_164))"
"(begin"
"(if((lambda(ht_272)(hash? ht_272)) ht_271)"
"(void)"
"(let-values()(default-in-hash-keys ht_271)))"
"((letrec-values(((for-loop_273)"
"(lambda(fold-var_274 i_275)"
"(if i_275"
"(let-values(((obj_276)"
"(hash-iterate-key"
" ht_271"
" i_275)))"
"(if #t"
"(let-values(((fold-var_277)"
"(let-values(((fold-var_278)"
" fold-var_274))"
"(let-values(((fold-var_279)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_163"
" obj_276))"
" fold-var_278))))"
"(values"
" fold-var_279)))))"
"(if #t"
"(for-loop_273"
" fold-var_277"
"(hash-iterate-next"
" ht_271"
" i_275))"
" fold-var_277))"
" fold-var_274))"
" fold-var_274))))"
" for-loop_273)"
" null"
"(hash-iterate-first ht_271)))))))"
"(let-values(((lst_280)"
"(let-values(((share-steps18_282) share-steps_270)"
"((<19_283) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f share-steps18_282 <19_283)"
"(sort9.1 share-steps18_282 <19_283))))"
"((start_281) num-mutables_168))"
"(begin"
"(if(list? lst_280)(void)(let-values()(in-list lst_280)))"
"(if(exact-nonnegative-integer? start_281)"
"(void)"
"(let-values()(in-naturals start_281)))"
"((letrec-values(((for-loop_284)"
"(lambda(table_285 lst_286 pos_287)"
"(if(if(pair? lst_286) #t #f)"
"(let-values(((step_288)(unsafe-car lst_286))"
"((pos_289) pos_287))"
"(if(if #t #t #f)"
"(let-values(((table_290)"
"(let-values(((table_291)"
" table_285))"
"(let-values(((table_292)"
"(let-values()"
"(let-values(((key_293"
" val_294)"
"(let-values()"
"(values"
" step_288"
" pos_289))))"
"(hash-set"
" table_291"
" key_293"
" val_294)))))"
"(values table_292)))))"
"(if(if #t #t #f)"
"(for-loop_284"
" table_290"
"(unsafe-cdr lst_286)"
"(+ pos_287 1))"
" table_290))"
" table_285))"
" table_285))))"
" for-loop_284)"
" '#hasheqv()"
" lst_280"
" start_281))))))"
"(letrec-values(((ser_170)"
"(let-values(((ser11_295)"
"(lambda(v10_296 reference?8_297 reference?9_298)"
"(let-values(((v_299) v10_296))"
"(let-values(((reference?_300)"
"(if reference?9_298"
" reference?8_297"
" #f)))"
"(let-values()"
"(if(hash-ref shares_164 v_299 #f)"
"(let-values()"
"(let-values(((n_301)"
"(hash-ref"
" share-step-positions_169"
"(hash-ref objs_163 v_299))))"
"(if reference?_300"
" n_301"
"(box-immutable n_301))))"
"(let-values(((c86010_302)"
"(hash-ref"
" mutables_162"
" v_299"
" #f)))"
"(if c86010_302"
"((lambda(n_303)"
"(if reference?_300"
" n_303"
"(box-immutable n_303)))"
" c86010_302)"
"(let-values()"
"(do-ser_171 v_299)))))))))))"
"(case-lambda"
"((v_304)(ser11_295 v_304 #f #f))"
"((v_305 reference?8_306)(ser11_295 v_305 reference?8_306 #t)))))"
"((do-ser_171)"
"(lambda(v_307)"
"(if(1/module-path-index? v_307)"
"(let-values()"
"(list* 'mpi(add-module-path-index!/pos mpis_158 v_307)))"
"(if(serialize? v_307)"
"(let-values()((serialize-ref v_307) v_307 ser_170 state_161))"
"(if(pair? v_307)"
"(let-values()"
"(let-values(((a_308)(ser_170(car v_307))))"
"(let-values(((d_309)(ser_170(cdr v_307))))"
"(if(if(quoted?$1 a_308)(quoted?$1 d_309) #f)"
"(let-values()(quoted v_307))"
"(if(if(pair? d_309)(eq? 'list(car d_309)) #f)"
"(let-values()"
"(if(symbol? a_308)"
"(list* 'list a_308(cdr d_309))"
"(cons a_308(cdr d_309))))"
"(if(if(pair? d_309)"
"(not(symbol?(car d_309)))"
" #f)"
"(let-values()"
"(if(symbol? a_308)"
"(list* 'list a_308 d_309)"
"(cons a_308 d_309)))"
"(if(if(pair? d_309)"
"(if(eq? 'quote(car d_309))"
"(eq? '()(cdr d_309))"
" #f)"
" #f)"
"(let-values()"
"(if(symbol? a_308)"
"(list 'list a_308)"
"(list a_308)))"
"(let-values()(list 'cons a_308 d_309)))))))))"
"(if(null? v_307)"
"(let-values()(quoted '()))"
"(if(box? v_307)"
"(let-values()"
"(let-values(((content_310)(ser_170(unbox v_307))))"
"(if(quoted?$1 content_310)"
"(quoted v_307)"
"(list* 'box-immutable content_310))))"
"(if(vector? v_307)"
"(let-values()"
"(let-values(((content_311)"
"(alt-reverse"
"(let-values(((vec_312 len_313)"
"(let-values(((vec_314)"
" v_307))"
"(begin"
"(if(vector?"
" vec_314)"
"(void)"
"(let-values()"
"(in-vector"
" vec_314)))"
"(values"
" vec_314"
"(unsafe-vector-length"
" vec_314))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_315)"
"(lambda(fold-var_316"
" pos_317)"
"(if(unsafe-fx<"
" pos_317"
" len_313)"
"(let-values(((e_318)"
"(unsafe-vector-ref"
" vec_312"
" pos_317)))"
"(if #t"
"(let-values(((fold-var_319)"
"(let-values(((fold-var_320)"
" fold-var_316))"
"(let-values(((fold-var_321)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" e_318))"
" fold-var_320))))"
"(values"
" fold-var_321)))))"
"(if #t"
"(for-loop_315"
" fold-var_319"
"(unsafe-fx+"
" 1"
" pos_317))"
" fold-var_319))"
" fold-var_316))"
" fold-var_316))))"
" for-loop_315)"
" null"
" 0))))))"
"(if(andmap2 quoted?$1 content_311)"
"(quoted v_307)"
"(cons"
" 'vector-immutable"
"(list->vector content_311)))))"
"(if(hash? v_307)"
"(let-values()"
"(let-values(((k-content_322)"
"(alt-reverse"
"(let-values(((ht_324) v_307))"
"(begin"
"(if((lambda(ht_325)"
"(hash? ht_325))"
" ht_324)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_324)))"
"((letrec-values(((for-loop_326)"
"(lambda(fold-var_327"
" i_328)"
"(if i_328"
"(let-values(((k_329)"
"(hash-iterate-key"
" ht_324"
" i_328)))"
"(if #t"
"(let-values(((fold-var_330)"
"(let-values(((fold-var_331)"
" fold-var_327))"
"(let-values(((fold-var_332)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" k_329))"
" fold-var_331))))"
"(values"
" fold-var_332)))))"
"(if #t"
"(for-loop_326"
" fold-var_330"
"(hash-iterate-next"
" ht_324"
" i_328))"
" fold-var_330))"
" fold-var_327))"
" fold-var_327))))"
" for-loop_326)"
" null"
"(hash-iterate-first"
" ht_324)))))))"
"(let-values(((v-content_323)"
"(alt-reverse"
"(let-values(((ht_333) v_307))"
"(begin"
"(if((lambda(ht_334)"
"(hash? ht_334))"
" ht_333)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_333)))"
"((letrec-values(((for-loop_335)"
"(lambda(fold-var_336"
" i_337)"
"(if i_337"
"(let-values(((v_338)"
"(hash-iterate-value"
" ht_333"
" i_337)))"
"(if #t"
"(let-values(((fold-var_339)"
"(let-values(((fold-var_340)"
" fold-var_336))"
"(let-values(((fold-var_341)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" v_338))"
" fold-var_340))))"
"(values"
" fold-var_341)))))"
"(if #t"
"(for-loop_335"
" fold-var_339"
"(hash-iterate-next"
" ht_333"
" i_337))"
" fold-var_339))"
" fold-var_336))"
" fold-var_336))))"
" for-loop_335)"
" null"
"(hash-iterate-first"
" ht_333)))))))"
"(if(if(andmap2 quoted?$1 k-content_322)"
"(andmap2 quoted?$1 v-content_323)"
" #f)"
"(let-values()(quoted v_307))"
"(if(let-values(((lst_342) v-content_323))"
"(begin"
"(if(list? lst_342)"
"(void)"
"(let-values()(in-list lst_342)))"
"((letrec-values(((for-loop_343)"
"(lambda(result_344"
" lst_345)"
"(if(pair?"
" lst_345)"
"(let-values(((v_346)"
"(unsafe-car"
" lst_345)))"
"(if #t"
"(let-values(((result_347)"
"(let-values(((result_348)"
" result_344))"
"(let-values(((result_349)"
"(let-values()"
"(let-values()"
"(eq?"
" v_346"
" #t)))))"
"(values"
" result_349)))))"
"(if(if #t"
"(not"
"((lambda x_350"
"(not"
" result_347))"
" v_346))"
" #f)"
"(for-loop_343"
" result_347"
"(unsafe-cdr"
" lst_345))"
" result_347))"
" result_344))"
" result_344))))"
" for-loop_343)"
" #t"
" lst_342)))"
"(let-values()"
"(list*"
"(if(hash-eq? v_307)"
"(let-values() 'seteq)"
"(if(hash-eqv? v_307)"
"(let-values() 'seteqv)"
"(let-values() 'set)))"
"(list->vector k-content_322)))"
"(let-values()"
"(list"
"(if(hash-eq? v_307)"
"(let-values() 'hasheq)"
"(if(hash-eqv? v_307)"
"(let-values() 'hasheqv)"
"(let-values() 'hash)))"
"(list->vector k-content_322)"
"(list->vector v-content_323))))))))"
"(let-values(((c86011_351)"
"(prefab-struct-key v_307)))"
"(if c86011_351"
"((lambda(k_352)"
"(let-values(((content_353)"
"(alt-reverse"
"(let-values(((v*_354"
" start*_355"
" stop*_356"
" step*_357)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                        \"vector\""
"(lambda(x_358)"
"(vector?"
" x_358))"
"(lambda(x_359)"
"(unsafe-vector-length"
" x_359))"
"(struct->vector"
" v_307)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_360)"
"(lambda(fold-var_361"
" idx_362)"
"(if(unsafe-fx<"
" idx_362"
" stop*_356)"
"(let-values(((e_363)"
"(unsafe-vector-ref"
" v*_354"
" idx_362)))"
"(if #t"
"(let-values(((fold-var_364)"
"(let-values(((fold-var_365)"
" fold-var_361))"
"(let-values(((fold-var_366)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" e_363))"
" fold-var_365))))"
"(values"
" fold-var_366)))))"
"(if #t"
"(for-loop_360"
" fold-var_364"
"(unsafe-fx+"
" idx_362"
" 1))"
" fold-var_364))"
" fold-var_361))"
" fold-var_361))))"
" for-loop_360)"
" null"
" start*_355))))))"
"(if(andmap2 quoted?$1 content_353)"
"(quoted v_307)"
"(list*"
" 'make-prefab-struct"
" k_352"
" content_353))))"
" c86011_351)"
"(if(srcloc? v_307)"
"(let-values()"
"(let-values(((len_367) 6))"
"(begin"
"(if(exact-nonnegative-integer? len_367)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                                    \"exact-nonnegative-integer?\""
" len_367)))"
"(let-values(((v_368)"
"(make-vector len_367 0)))"
"(begin"
"(if(zero? len_367)"
"(void)"
"(let-values()"
"(let-values(((vec_369 len_370)"
"(let-values(((vec_372)"
"(struct->vector"
" v_307)))"
"(begin"
"(if(vector?"
" vec_372)"
"(void)"
"(let-values()"
"(in-vector"
" vec_372)))"
"(values"
" vec_372"
"(unsafe-vector-length"
" vec_372)))))"
"((start_371) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer?"
" start_371)"
"(void)"
"(let-values()"
"(in-naturals start_371)))"
"((letrec-values(((for-loop_373)"
"(lambda(i_374"
" pos_375"
" pos_376)"
"(if(if(unsafe-fx<"
" pos_375"
" len_370)"
" #t"
" #f)"
"(let-values(((e_377)"
"(unsafe-vector-ref"
" vec_369"
" pos_375))"
"((i_378)"
" pos_376))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((i_379)"
"(let-values(((i_380)"
" i_374))"
"(let-values(((i_381)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_368"
" i_380"
"(let-values()"
"(if(zero?"
" i_378)"
" #t"
"(ser_170"
" e_377))))"
"(unsafe-fx+"
" 1"
" i_380)))))"
"(values"
" i_381)))))"
"(if(if(if #t"
"(not"
"((lambda x_382"
"(unsafe-fx="
" i_379"
" len_367))"
" e_377))"
" #f)"
" #t"
" #f)"
"(for-loop_373"
" i_379"
"(unsafe-fx+"
" 1"
" pos_375)"
"(+"
" pos_376"
" 1))"
" i_379))"
" i_374))"
" i_374))))"
" for-loop_373)"
" 0"
" 0"
" start_371)))))"
" v_368)))))"
"(let-values()(quoted v_307)))))))))))))))"
"(let-values(((ser-shell_172)"
"(lambda(v_383)"
"(if(serialize-fill!? v_383)"
"(let-values()((serialize-ref v_383) v_383 ser_170 state_161))"
"(if(box? v_383)"
"(let-values() 'box)"
"(if(vector? v_383)"
"(let-values()(vector-length v_383))"
"(if(hash? v_383)"
"(let-values()"
"(if(hash-eq? v_383)"
"(let-values() 'hasheq)"
"(if(hash-eqv? v_383)"
"(let-values() 'hasheqv)"
"(let-values() 'hash))))"
"(let-values()"
"                                                              (error 'ser-shell \"unknown mutable: ~e\" v_383)))))))))"
"(let-values(((ser-shell-fill_173)"
"(lambda(v_384)"
"(if(serialize-fill!? v_384)"
"(let-values()"
"((serialize-fill!-ref v_384) v_384 ser_170 state_161))"
"(if(box? v_384)"
"(let-values()(list 'set-box!(ser_170(unbox v_384))))"
"(if(vector? v_384)"
"(let-values()"
"(list"
" 'set-vector!"
"(list->vector"
"(alt-reverse"
"(let-values(((vec_385 len_386)"
"(let-values(((vec_387) v_384))"
"(begin"
"(if(vector? vec_387)"
"(void)"
"(let-values()"
"(in-vector vec_387)))"
"(values"
" vec_387"
"(unsafe-vector-length vec_387))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_388)"
"(lambda(fold-var_389 pos_390)"
"(if(unsafe-fx<"
" pos_390"
" len_386)"
"(let-values(((v_391)"
"(unsafe-vector-ref"
" vec_385"
" pos_390)))"
"(if #t"
"(let-values(((fold-var_392)"
"(let-values(((fold-var_393)"
" fold-var_389))"
"(let-values(((fold-var_394)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" v_391))"
" fold-var_393))))"
"(values"
" fold-var_394)))))"
"(if #t"
"(for-loop_388"
" fold-var_392"
"(unsafe-fx+"
" 1"
" pos_390))"
" fold-var_392))"
" fold-var_389))"
" fold-var_389))))"
" for-loop_388)"
" null"
" 0)))))))"
"(if(hash? v_384)"
"(let-values()"
"(list"
" 'hash-set!"
"(list->vector"
"(alt-reverse"
"(let-values(((ht_395) v_384))"
"(begin"
"(if((lambda(ht_396)(hash? ht_396)) ht_395)"
"(void)"
"(let-values()(default-in-hash-keys ht_395)))"
"((letrec-values(((for-loop_397)"
"(lambda(fold-var_398 i_399)"
"(if i_399"
"(let-values(((k_400)"
"(hash-iterate-key"
" ht_395"
" i_399)))"
"(if #t"
"(let-values(((fold-var_401)"
"(let-values(((fold-var_402)"
" fold-var_398))"
"(let-values(((fold-var_403)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" k_400))"
" fold-var_402))))"
"(values"
" fold-var_403)))))"
"(if #t"
"(for-loop_397"
" fold-var_401"
"(hash-iterate-next"
" ht_395"
" i_399))"
" fold-var_401))"
" fold-var_398))"
" fold-var_398))))"
" for-loop_397)"
" null"
"(hash-iterate-first ht_395))))))"
"(list->vector"
"(alt-reverse"
"(let-values(((ht_404) v_384))"
"(begin"
"(if((lambda(ht_405)(hash? ht_405)) ht_404)"
"(void)"
"(let-values()"
"(default-in-hash-values ht_404)))"
"((letrec-values(((for-loop_406)"
"(lambda(fold-var_407 i_408)"
"(if i_408"
"(let-values(((v_409)"
"(hash-iterate-value"
" ht_404"
" i_408)))"
"(if #t"
"(let-values(((fold-var_410)"
"(let-values(((fold-var_411)"
" fold-var_407))"
"(let-values(((fold-var_412)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" v_409))"
" fold-var_411))))"
"(values"
" fold-var_412)))))"
"(if #t"
"(for-loop_406"
" fold-var_410"
"(hash-iterate-next"
" ht_404"
" i_408))"
" fold-var_410))"
" fold-var_407))"
" fold-var_407))))"
" for-loop_406)"
" null"
"(hash-iterate-first ht_404))))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                 \"unknown mutable: ~e\""
" v_384)))))))))"
"(let-values(((rev-mutables_174)"
"(let-values(((ht_413) mutables_162))"
"(begin"
"(if((lambda(ht_414)(hash? ht_414)) ht_413)"
"(void)"
"(let-values()(default-in-hash ht_413)))"
"((letrec-values(((for-loop_415)"
"(lambda(table_416 i_417)"
"(if i_417"
"(let-values(((k_418 v_419)"
"(hash-iterate-key+value"
" ht_413"
" i_417)))"
"(if #t"
"(let-values(((table_420)"
"(let-values(((table_421)"
" table_416))"
"(let-values(((table_422)"
"(let-values()"
"(let-values(((key_423"
" val_424)"
"(let-values()"
"(values"
" v_419"
" k_418))))"
"(hash-set"
" table_421"
" key_423"
" val_424)))))"
"(values"
" table_422)))))"
"(if #t"
"(for-loop_415"
" table_420"
"(hash-iterate-next"
" ht_413"
" i_417))"
" table_420))"
" table_416))"
" table_416))))"
" for-loop_415)"
" '#hasheqv()"
"(hash-iterate-first ht_413))))))"
"(let-values(((mutable-shell-bindings_175)"
"(let-values(((len_425)(hash-count mutables_162)))"
"(begin"
"(if(exact-nonnegative-integer? len_425)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                 \"exact-nonnegative-integer?\""
" len_425)))"
"(let-values(((v_426)(make-vector len_425 0)))"
"(begin"
"(if(zero? len_425)"
"(void)"
"(let-values()"
"(let-values(((start_427) 0)"
"((end_428)(hash-count mutables_162))"
"((inc_429) 1))"
"(begin"
"(if(if(real? start_427)"
"(if(real? end_428)(real? inc_429) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_427 end_428 inc_429)))"
"((letrec-values(((for-loop_430)"
"(lambda(i_431 pos_432)"
"(if(< pos_432 end_428)"
"(let-values(((i_433)"
" pos_432))"
"(if #t"
"(let-values(((i_434)"
"(let-values(((i_435)"
" i_431))"
"(let-values(((i_436)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_426"
" i_435"
"(let-values()"
"(ser-shell_172"
"(hash-ref"
" rev-mutables_174"
" i_433))))"
"(unsafe-fx+"
" 1"
" i_435)))))"
"(values"
" i_436)))))"
"(if(if #t"
"(not"
"((lambda x_437"
"(unsafe-fx="
" i_434"
" len_425))"
" i_433))"
" #f)"
"(for-loop_430"
" i_434"
"(+"
" pos_432"
" inc_429))"
" i_434))"
" i_431))"
" i_431))))"
" for-loop_430)"
" 0"
" start_427)))))"
" v_426))))))"
"(let-values(((rev-shares_176)"
"(let-values(((ht_438) shares_164))"
"(begin"
"(if((lambda(ht_439)(hash? ht_439)) ht_438)"
"(void)"
"(let-values()(default-in-hash-keys ht_438)))"
"((letrec-values(((for-loop_440)"
"(lambda(table_441 i_442)"
"(if i_442"
"(let-values(((obj_443)"
"(hash-iterate-key"
" ht_438"
" i_442)))"
"(if #t"
"(let-values(((table_444)"
"(let-values(((table_445)"
" table_441))"
"(let-values(((table_446)"
"(let-values()"
"(let-values(((key_447"
" val_448)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_169"
"(hash-ref"
" objs_163"
" obj_443))"
" obj_443))))"
"(hash-set"
" table_445"
" key_447"
" val_448)))))"
"(values"
" table_446)))))"
"(if #t"
"(for-loop_440"
" table_444"
"(hash-iterate-next"
" ht_438"
" i_442))"
" table_444))"
" table_441))"
" table_441))))"
" for-loop_440)"
" '#hasheqv()"
"(hash-iterate-first ht_438))))))"
"(let-values(((shared-bindings_177)"
"(let-values(((len_449)(hash-count shares_164)))"
"(begin"
"(if(exact-nonnegative-integer? len_449)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                     \"exact-nonnegative-integer?\""
" len_449)))"
"(let-values(((v_450)(make-vector len_449 0)))"
"(begin"
"(if(zero? len_449)"
"(void)"
"(let-values()"
"(let-values(((start_451) num-mutables_168)"
"((end_452)"
"(+"
" num-mutables_168"
"(hash-count shares_164)))"
"((inc_453) 1))"
"(begin"
"(if(if(real? start_451)"
"(if(real? end_452)"
"(real? inc_453)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_451 end_452 inc_453)))"
"((letrec-values(((for-loop_454)"
"(lambda(i_455 pos_456)"
"(if(< pos_456 end_452)"
"(let-values(((i_457)"
" pos_456))"
"(if #t"
"(let-values(((i_458)"
"(let-values(((i_459)"
" i_455))"
"(let-values(((i_460)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_450"
" i_459"
"(let-values()"
"(do-ser_171"
"(hash-ref"
" rev-shares_176"
" i_457))))"
"(unsafe-fx+"
" 1"
" i_459)))))"
"(values"
" i_460)))))"
"(if(if #t"
"(not"
"((lambda x_461"
"(unsafe-fx="
" i_458"
" len_449))"
" i_457))"
" #f)"
"(for-loop_454"
" i_458"
"(+"
" pos_456"
" inc_453))"
" i_458))"
" i_455))"
" i_455))))"
" for-loop_454)"
" 0"
" start_451)))))"
" v_450))))))"
"(let-values(((mutable-fills_178)"
"(let-values(((len_462)(hash-count mutables_162)))"
"(begin"
"(if(exact-nonnegative-integer? len_462)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                       \"exact-nonnegative-integer?\""
" len_462)))"
"(let-values(((v_463)(make-vector len_462 0)))"
"(begin"
"(if(zero? len_462)"
"(void)"
"(let-values()"
"(let-values(((start_464) 0)"
"((end_465)"
"(hash-count mutables_162))"
"((inc_466) 1))"
"(begin"
"(if(if(real? start_464)"
"(if(real? end_465)"
"(real? inc_466)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_464 end_465 inc_466)))"
"((letrec-values(((for-loop_467)"
"(lambda(i_468 pos_469)"
"(if(<"
" pos_469"
" end_465)"
"(let-values(((i_470)"
" pos_469))"
"(if #t"
"(let-values(((i_471)"
"(let-values(((i_472)"
" i_468))"
"(let-values(((i_473)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_463"
" i_472"
"(let-values()"
"(ser-shell-fill_173"
"(hash-ref"
" rev-mutables_174"
" i_470))))"
"(unsafe-fx+"
" 1"
" i_472)))))"
"(values"
" i_473)))))"
"(if(if #t"
"(not"
"((lambda x_474"
"(unsafe-fx="
" i_471"
" len_462))"
" i_470))"
" #f)"
"(for-loop_467"
" i_471"
"(+"
" pos_469"
" inc_466))"
" i_471))"
" i_468))"
" i_468))))"
" for-loop_467)"
" 0"
" start_464)))))"
" v_463))))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_159 inspector-id #f)"
"(if syntax-support?_159 bulk-binding-registry-id #f)"
"(list 'quote mutable-shell-bindings_175)"
"(list 'quote shared-bindings_177)"
"(list 'quote mutable-fills_178)"
"(list 'quote(ser_170 v_157))))))))))))))))))))))))))))"
"(define-values"
"(unpack6.1$2)"
"(lambda(given-kws_475 given-args_476 v3_477 mpis4_478)"
"(let-values(((syntax-support?2_479)(pair? given-kws_475)))"
"(let-values(((syntax-support?1_480)(if syntax-support?2_479(car given-args_476)(void))))"
"(generate-deserialize5.1 syntax-support?1_480 syntax-support?2_479 v3_477 mpis4_478)))))"
"(define-values"
"(generate-deserialize7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_481 given-argc_482)"
"(if(= given-argc_482 4)"
"(let-values(((l1_483) given-kws_481))"
"(let-values(((l1_484)"
"(if(null? l1_483) l1_483(if(eq?(car l1_483) '#:syntax-support?)(cdr l1_483) l1_483))))"
"(null? l1_484)))"
" #f))"
"(case-lambda"
"((given-kws_485 given-args_486 v_487 mpis_488)(unpack6.1$2 given-kws_485 given-args_486 v_487 mpis_488)))"
" null"
" '(#:syntax-support?)"
"(let-values(((generate-deserialize_489)(case-lambda((v_490 mpis_491)(unpack6.1$2 null null v_490 mpis_491)))))"
" generate-deserialize_489)))"
"(define-values"
"(quoted?$1)"
"(lambda(v_492)"
"(let-values(((or-part_493)(number? v_492)))"
"(if or-part_493"
" or-part_493"
"(let-values(((or-part_494)(boolean? v_492)))"
"(if or-part_494"
" or-part_494"
"(let-values(((or-part_495)(symbol? v_492)))"
"(if or-part_495 or-part_495(if(pair? v_492)(eq? 'quote(car v_492)) #f)))))))))"
"(define-values"
"(quoted)"
"(lambda(v_496)"
"(if(let-values(((or-part_497)(number? v_496)))"
"(if or-part_497"
" or-part_497"
"(let-values(((or-part_498)(boolean? v_496)))(if or-part_498 or-part_498(symbol? v_496)))))"
" v_496"
"(list* 'quote v_496))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_499"
" inspector_500"
" bulk-binding-registry_501"
" mutable-vec_502"
" shared-vec_503"
" mutable-fill-vec_504"
" result_505)"
"(let-values(((num-mutables_506)(vector-length mutable-vec_502)))"
"(let-values(((shared_507)(make-vector(+ num-mutables_506(vector-length shared-vec_503)) 'uninit)))"
"(begin"
"(let-values(((vec_508 len_509)"
"(let-values(((vec_511) mutable-vec_502))"
"(begin"
"(if(vector? vec_511)(void)(let-values()(in-vector vec_511)))"
"(values vec_511(unsafe-vector-length vec_511)))))"
"((start_510) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_510)(void)(let-values()(in-naturals start_510)))"
"((letrec-values(((for-loop_512)"
"(lambda(fold-var_513 pos_514 pos_515)"
"(if(if(unsafe-fx< pos_514 len_509) #t #f)"
"(let-values(((d_516)(unsafe-vector-ref vec_508 pos_514))((i_517) pos_515))"
"(if(if #t #t #f)"
"(let-values(((fold-var_518)"
"(let-values(((fold-var_519) fold-var_513))"
"(let-values(((fold-var_520)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" shared_507"
" i_517"
"(decode-shell"
" d_516"
" mpis_499"
" inspector_500"
" bulk-binding-registry_501"
" shared_507)))"
"(void)))))"
"(values fold-var_520)))))"
"(if(if #t #t #f)"
"(for-loop_512 fold-var_518(unsafe-fx+ 1 pos_514)(+ pos_515 1))"
" fold-var_518))"
" fold-var_513))"
" fold-var_513))))"
" for-loop_512)"
"(void)"
" 0"
" start_510)))"
"(let-values(((vec_521 len_522)"
"(let-values(((vec_524) shared-vec_503))"
"(begin"
"(if(vector? vec_524)(void)(let-values()(in-vector vec_524)))"
"(values vec_524(unsafe-vector-length vec_524)))))"
"((start_523) num-mutables_506))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_523)(void)(let-values()(in-naturals start_523)))"
"((letrec-values(((for-loop_525)"
"(lambda(fold-var_526 pos_527 pos_528)"
"(if(if(unsafe-fx< pos_527 len_522) #t #f)"
"(let-values(((d_529)(unsafe-vector-ref vec_521 pos_527))((i_530) pos_528))"
"(if(if #t #t #f)"
"(let-values(((fold-var_531)"
"(let-values(((fold-var_532) fold-var_526))"
"(let-values(((fold-var_533)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" shared_507"
" i_530"
"(decode"
" d_529"
" mpis_499"
" inspector_500"
" bulk-binding-registry_501"
" shared_507)))"
"(void)))))"
"(values fold-var_533)))))"
"(if(if #t #t #f)"
"(for-loop_525 fold-var_531(unsafe-fx+ 1 pos_527)(+ pos_528 1))"
" fold-var_531))"
" fold-var_526))"
" fold-var_526))))"
" for-loop_525)"
"(void)"
" 0"
" start_523)))"
"(let-values(((vec_534 len_535)"
"(let-values(((vec_539) mutable-fill-vec_504))"
"(begin"
"(if(vector? vec_539)(void)(let-values()(in-vector vec_539)))"
"(values vec_539(unsafe-vector-length vec_539)))))"
"((vec_536 len_537)"
"(let-values(((vec_540) shared_507))"
"(begin"
"(if(vector? vec_540)(void)(let-values()(in-vector vec_540)))"
"(values vec_540(unsafe-vector-length vec_540)))))"
"((start_538) 0))"
"(begin"
" #f"
" #f"
"(if(exact-nonnegative-integer? start_538)(void)(let-values()(in-naturals start_538)))"
"((letrec-values(((for-loop_541)"
"(lambda(fold-var_542 pos_543 pos_544 pos_545)"
"(if(if(unsafe-fx< pos_543 len_535)(if(unsafe-fx< pos_544 len_537) #t #f) #f)"
"(let-values(((d_546)(unsafe-vector-ref vec_534 pos_543))"
"((v_547)(unsafe-vector-ref vec_536 pos_544))"
"((i_548) pos_545))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_549)"
"(let-values(((fold-var_550) fold-var_542))"
"(let-values(((fold-var_551)"
"(let-values()"
"(begin"
"(let-values()"
"(decode-fill!"
" v_547"
" d_546"
" mpis_499"
" inspector_500"
" bulk-binding-registry_501"
" shared_507))"
"(void)))))"
"(values fold-var_551)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_541"
" fold-var_549"
"(unsafe-fx+ 1 pos_543)"
"(unsafe-fx+ 1 pos_544)"
"(+ pos_545 1))"
" fold-var_549))"
" fold-var_542))"
" fold-var_542))))"
" for-loop_541)"
"(void)"
" 0"
" 0"
" start_538)))"
"(decode result_505 mpis_499 inspector_500 bulk-binding-registry_501 shared_507))))))"
"(define-values"
"(decode-shell)"
"(lambda(d_552 mpis_553 inspector_554 bulk-binding-registry_555 shared_556)"
"(let-values(((tmp_557) d_552))"
"(if(equal? tmp_557 'box)"
"(let-values()(box #f))"
"(if(equal? tmp_557 'hash)"
"(let-values()(make-hasheq))"
"(if(equal? tmp_557 'hasheq)"
"(let-values()(make-hasheq))"
"(if(equal? tmp_557 'hasheqv)"
"(let-values()(make-hasheqv))"
"(let-values()"
"(if(exact-integer? d_552)"
"(let-values()(make-vector d_552))"
"(let-values()(decode d_552 mpis_553 inspector_554 bulk-binding-registry_555 shared_556)))))))))))"
"(define-values"
"(decode)"
"(lambda(d_558 mpis_559 inspector_560 bulk-binding-registry_561 shared_562)"
"((letrec-values(((decode_563)"
"(lambda(d_564)"
"(let-values(((decode-reference_600)"
"(lambda(v_601)"
"(if(number? v_601)(vector-ref shared_562 v_601)(decode_563 v_601)))))"
"(if(eq? d_564 '#:inspector)"
"(let-values() inspector_560)"
"(if(eq? d_564 '#:bulk-binding-registry)"
"(let-values() bulk-binding-registry_561)"
"(if(number? d_564)"
"(let-values() d_564)"
"(if(boolean? d_564)"
"(let-values() d_564)"
"(if(box? d_564)"
"(let-values()(vector-ref shared_562(unbox d_564)))"
"(if(symbol? d_564)"
"(let-values() d_564)"
"(if(vector? d_564)"
"(let-values()"
"(let-values(((tmp_602)(vector-length d_564)))"
"(if(equal? tmp_602 3)"
"(let-values()"
"(deserialize-syntax"
"(decode_563(vector-ref d_564 0))"
"(decode-reference_600(vector-ref d_564 1))"
"(decode-reference_600(vector-ref d_564 2))"
" #f"
" #f"
" inspector_560))"
"(if(equal? tmp_602 5)"
"(let-values()"
"(deserialize-syntax"
"(decode_563(vector-ref d_564 0))"
"(decode-reference_600(vector-ref d_564 1))"
"(decode-reference_600(vector-ref d_564 2))"
"(decode_563(vector-ref d_564 3))"
"(decode_563(vector-ref d_564 4))"
" inspector_560))"
"(if(equal? tmp_602 6)"
"(let-values()"
"(srcloc"
"(decode_563(vector-ref d_564 1))"
"(decode_563(vector-ref d_564 2))"
"(decode_563(vector-ref d_564 3))"
"(decode_563(vector-ref d_564 4))"
"(decode_563(vector-ref d_564 5))))"
"(if(equal? tmp_602 'else)"
"                                                    (let-values () (error 'deserialize \"bad encoding: ~e\" d_564))"
"(let-values()(void))))))))"
"(let-values()"
"(let-values(((tmp_603)(car d_564)))"
"(let-values(((index_604)"
"(if(symbol? tmp_603)"
"(hash-ref"
" '#hasheq((deserialize-bulk-binding-at . 18)"
"(set . 10)"
"(hash . 7)"
"(deserialize-simple-module-binding . 21)"
"(deserialize-multi-scope . 15)"
"(hasheqv . 9)"
"(seteqv . 12)"
"(deserialize-shifted-multi-scope . 16)"
"(box-immutable . 5)"
"(cons . 3)"
"(make-prefab-struct . 13)"
"(vector-immutable . 6)"
"(deserialize-scope . 14)"
"(quote . 1)"
"(deserialize-bulk-binding . 23)"
"(deserialize-table-with-bulk-bindings . 17)"
"(list . 4)"
"(deserialize-full-module-binding . 20)"
"(deserialize-representative-scope . 19)"
"(mpi . 2)"
"(hasheq . 8)"
"(deserialize-full-local-binding . 22)"
"(seteq . 11))"
" tmp_603"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_604 11)"
"(if(unsafe-fx< index_604 5)"
"(if(unsafe-fx< index_604 2)"
"(if(unsafe-fx< index_604 1)"
"(let-values()"
"(if(not(symbol?(car d_564)))"
"(alt-reverse"
"(let-values(((lst_605) d_564))"
"(begin"
"(if(list? lst_605)"
"(void)"
"(let-values()(in-list lst_605)))"
"((letrec-values(((for-loop_606)"
"(lambda(fold-var_607 lst_608)"
"(if(pair? lst_608)"
"(let-values(((d_609)"
"(unsafe-car"
" lst_608)))"
"(if #t"
"(let-values(((fold-var_610)"
"(let-values(((fold-var_611)"
" fold-var_607))"
"(let-values(((fold-var_612)"
"(let-values()"
"(cons"
"(let-values()"
"(decode_563"
" d_609))"
" fold-var_611))))"
"(values"
" fold-var_612)))))"
"(if #t"
"(for-loop_606"
" fold-var_610"
"(unsafe-cdr lst_608))"
" fold-var_610))"
" fold-var_607))"
" fold-var_607))))"
" for-loop_606)"
" null"
" lst_605))))"
"                                                          (error 'deserialize \"bad encoding: ~v\" d_564)))"
"(let-values()(cdr d_564)))"
"(if(unsafe-fx< index_604 3)"
"(let-values()(vector-ref mpis_559(cdr d_564)))"
"(if(unsafe-fx< index_604 4)"
"(let-values()"
"(cons(decode_563(cadr d_564))(decode_563(caddr d_564))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_613)(cdr d_564)))"
"(begin"
"(if(list? lst_613)"
"(void)"
"(let-values()(in-list lst_613)))"
"((letrec-values(((for-loop_614)"
"(lambda(fold-var_615 lst_616)"
"(if(pair? lst_616)"
"(let-values(((d_617)"
"(unsafe-car"
" lst_616)))"
"(if #t"
"(let-values(((fold-var_618)"
"(let-values(((fold-var_619)"
" fold-var_615))"
"(let-values(((fold-var_620)"
"(let-values()"
"(cons"
"(let-values()"
"(decode_563"
" d_617))"
" fold-var_619))))"
"(values"
" fold-var_620)))))"
"(if #t"
"(for-loop_614"
" fold-var_618"
"(unsafe-cdr lst_616))"
" fold-var_618))"
" fold-var_615))"
" fold-var_615))))"
" for-loop_614)"
" null"
" lst_613))))))))"
"(if(unsafe-fx< index_604 7)"
"(if(unsafe-fx< index_604 6)"
"(let-values()(box-immutable(decode_563(cdr d_564))))"
"(let-values()"
"(vector->immutable-vector"
"(let-values(((len_621)(vector-length(cdr d_564))))"
"(begin"
"(if(exact-nonnegative-integer? len_621)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                  \"exact-nonnegative-integer?\""
" len_621)))"
"(let-values(((v_622)(make-vector len_621 0)))"
"(begin"
"(if(zero? len_621)"
"(void)"
"(let-values()"
"(let-values(((vec_623 len_624)"
"(let-values(((vec_625)(cdr d_564)))"
"(begin"
"(if(vector? vec_625)"
"(void)"
"(let-values()"
"(in-vector vec_625)))"
"(values"
" vec_625"
"(unsafe-vector-length"
" vec_625))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_626)"
"(lambda(i_627 pos_628)"
"(if(unsafe-fx<"
" pos_628"
" len_624)"
"(let-values(((d_629)"
"(unsafe-vector-ref"
" vec_623"
" pos_628)))"
"(if #t"
"(let-values(((i_630)"
"(let-values(((i_631)"
" i_627))"
"(let-values(((i_632)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_622"
" i_631"
"(let-values()"
"(decode_563"
" d_629)))"
"(unsafe-fx+"
" 1"
" i_631)))))"
"(values"
" i_632)))))"
"(if(if #t"
"(not"
"((lambda x_633"
"(unsafe-fx="
" i_630"
" len_621))"
" d_629))"
" #f)"
"(for-loop_626"
" i_630"
"(unsafe-fx+"
" 1"
" pos_628))"
" i_630))"
" i_627))"
" i_627))))"
" for-loop_626)"
" 0"
" 0)))))"
" v_622)))))))"
"(if(unsafe-fx< index_604 8)"
"(let-values()"
"(let-values(((vec_634 len_635)"
"(let-values(((vec_638)(cadr d_564)))"
"(begin"
"(if(vector? vec_638)"
"(void)"
"(let-values()(in-vector vec_638)))"
"(values"
" vec_638"
"(unsafe-vector-length vec_638)))))"
"((vec_636 len_637)"
"(let-values(((vec_639)(caddr d_564)))"
"(begin"
"(if(vector? vec_639)"
"(void)"
"(let-values()(in-vector vec_639)))"
"(values"
" vec_639"
"(unsafe-vector-length vec_639))))))"
"(begin"
" #f"
" #f"
"((letrec-values(((for-loop_640)"
"(lambda(table_641 pos_642 pos_643)"
"(if(if(unsafe-fx< pos_642 len_635)"
"(unsafe-fx< pos_643 len_637)"
" #f)"
"(let-values(((k_644)"
"(unsafe-vector-ref"
" vec_634"
" pos_642))"
"((v_645)"
"(unsafe-vector-ref"
" vec_636"
" pos_643)))"
"(if(if #t #t #f)"
"(let-values(((table_646)"
"(let-values(((table_647)"
" table_641))"
"(let-values(((table_648)"
"(let-values()"
"(let-values(((key_649"
" val_650)"
"(let-values()"
"(values"
"(decode_563"
" k_644)"
"(decode_563"
" v_645)))))"
"(hash-set"
" table_647"
" key_649"
" val_650)))))"
"(values"
" table_648)))))"
"(if(if #t #t #f)"
"(for-loop_640"
" table_646"
"(unsafe-fx+ 1 pos_642)"
"(unsafe-fx+ 1 pos_643))"
" table_646))"
" table_641))"
" table_641))))"
" for-loop_640)"
" '#hash()"
" 0"
" 0))))"
"(if(unsafe-fx< index_604 9)"
"(let-values()"
"(let-values(((vec_651 len_652)"
"(let-values(((vec_655)(cadr d_564)))"
"(begin"
"(if(vector? vec_655)"
"(void)"
"(let-values()(in-vector vec_655)))"
"(values"
" vec_655"
"(unsafe-vector-length vec_655)))))"
"((vec_653 len_654)"
"(let-values(((vec_656)(caddr d_564)))"
"(begin"
"(if(vector? vec_656)"
"(void)"
"(let-values()(in-vector vec_656)))"
"(values"
" vec_656"
"(unsafe-vector-length vec_656))))))"
"(begin"
" #f"
" #f"
"((letrec-values(((for-loop_657)"
"(lambda(table_658 pos_659 pos_660)"
"(if(if(unsafe-fx< pos_659 len_652)"
"(unsafe-fx< pos_660 len_654)"
" #f)"
"(let-values(((k_661)"
"(unsafe-vector-ref"
" vec_651"
" pos_659))"
"((v_662)"
"(unsafe-vector-ref"
" vec_653"
" pos_660)))"
"(if(if #t #t #f)"
"(let-values(((table_663)"
"(let-values(((table_664)"
" table_658))"
"(let-values(((table_665)"
"(let-values()"
"(let-values(((key_666"
" val_667)"
"(let-values()"
"(values"
"(decode_563"
" k_661)"
"(decode_563"
" v_662)))))"
"(hash-set"
" table_664"
" key_666"
" val_667)))))"
"(values"
" table_665)))))"
"(if(if #t #t #f)"
"(for-loop_657"
" table_663"
"(unsafe-fx+ 1 pos_659)"
"(unsafe-fx+ 1 pos_660))"
" table_663))"
" table_658))"
" table_658))))"
" for-loop_657)"
" '#hasheq()"
" 0"
" 0))))"
"(if(unsafe-fx< index_604 10)"
"(let-values()"
"(let-values(((vec_668 len_669)"
"(let-values(((vec_672)(cadr d_564)))"
"(begin"
"(if(vector? vec_672)"
"(void)"
"(let-values()(in-vector vec_672)))"
"(values"
" vec_672"
"(unsafe-vector-length vec_672)))))"
"((vec_670 len_671)"
"(let-values(((vec_673)(caddr d_564)))"
"(begin"
"(if(vector? vec_673)"
"(void)"
"(let-values()(in-vector vec_673)))"
"(values"
" vec_673"
"(unsafe-vector-length vec_673))))))"
"(begin"
" #f"
" #f"
"((letrec-values(((for-loop_674)"
"(lambda(table_675 pos_676 pos_677)"
"(if(if(unsafe-fx< pos_676 len_669)"
"(unsafe-fx< pos_677 len_671)"
" #f)"
"(let-values(((k_678)"
"(unsafe-vector-ref"
" vec_668"
" pos_676))"
"((v_679)"
"(unsafe-vector-ref"
" vec_670"
" pos_677)))"
"(if(if #t #t #f)"
"(let-values(((table_680)"
"(let-values(((table_681)"
" table_675))"
"(let-values(((table_682)"
"(let-values()"
"(let-values(((key_683"
" val_684)"
"(let-values()"
"(values"
"(decode_563"
" k_678)"
"(decode_563"
" v_679)))))"
"(hash-set"
" table_681"
" key_683"
" val_684)))))"
"(values"
" table_682)))))"
"(if(if #t #t #f)"
"(for-loop_674"
" table_680"
"(unsafe-fx+ 1 pos_676)"
"(unsafe-fx+ 1 pos_677))"
" table_680))"
" table_675))"
" table_675))))"
" for-loop_674)"
" '#hasheqv()"
" 0"
" 0))))"
"(let-values()"
"(let-values(((vec_685 len_686)"
"(let-values(((vec_687)(cdr d_564)))"
"(begin"
"(if(vector? vec_687)"
"(void)"
"(let-values()(in-vector vec_687)))"
"(values"
" vec_687"
"(unsafe-vector-length vec_687))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_688)"
"(lambda(table_689 pos_690)"
"(if(unsafe-fx< pos_690 len_686)"
"(let-values(((k_691)"
"(unsafe-vector-ref"
" vec_685"
" pos_690)))"
"(if #t"
"(let-values(((table_692)"
"(let-values(((table_693)"
" table_689))"
"(let-values(((table_694)"
"(let-values()"
"(let-values(((key_695"
" val_696)"
"(let-values()"
"(values"
"(let-values()"
"(decode_563"
" k_691))"
" #t))))"
"(hash-set"
" table_693"
" key_695"
" val_696)))))"
"(values"
" table_694)))))"
"(if #t"
"(for-loop_688"
" table_692"
"(unsafe-fx+ 1 pos_690))"
" table_692))"
" table_689))"
" table_689))))"
" for-loop_688)"
" '#hash()"
" 0)))))))))"
"(if(unsafe-fx< index_604 17)"
"(if(unsafe-fx< index_604 13)"
"(if(unsafe-fx< index_604 12)"
"(let-values()"
"(let-values(((vec_697 len_698)"
"(let-values(((vec_699)(cdr d_564)))"
"(begin"
"(if(vector? vec_699)"
"(void)"
"(let-values()(in-vector vec_699)))"
"(values"
" vec_699"
"(unsafe-vector-length vec_699))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_700)"
"(lambda(table_701 pos_702)"
"(if(unsafe-fx< pos_702 len_698)"
"(let-values(((k_703)"
"(unsafe-vector-ref"
" vec_697"
" pos_702)))"
"(if #t"
"(let-values(((table_704)"
"(let-values(((table_705)"
" table_701))"
"(let-values(((table_706)"
"(let-values()"
"(let-values(((key_707"
" val_708)"
"(let-values()"
"(values"
"(let-values()"
"(decode_563"
" k_703))"
" #t))))"
"(hash-set"
" table_705"
" key_707"
" val_708)))))"
"(values"
" table_706)))))"
"(if #t"
"(for-loop_700"
" table_704"
"(unsafe-fx+ 1 pos_702))"
" table_704))"
" table_701))"
" table_701))))"
" for-loop_700)"
" '#hasheq()"
" 0))))"
"(let-values()"
"(let-values(((vec_709 len_710)"
"(let-values(((vec_711)(cdr d_564)))"
"(begin"
"(if(vector? vec_711)"
"(void)"
"(let-values()(in-vector vec_711)))"
"(values"
" vec_711"
"(unsafe-vector-length vec_711))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_712)"
"(lambda(table_713 pos_714)"
"(if(unsafe-fx< pos_714 len_710)"
"(let-values(((k_715)"
"(unsafe-vector-ref"
" vec_709"
" pos_714)))"
"(if #t"
"(let-values(((table_716)"
"(let-values(((table_717)"
" table_713))"
"(let-values(((table_718)"
"(let-values()"
"(let-values(((key_719"
" val_720)"
"(let-values()"
"(values"
"(let-values()"
"(decode_563"
" k_715))"
" #t))))"
"(hash-set"
" table_717"
" key_719"
" val_720)))))"
"(values"
" table_718)))))"
"(if #t"
"(for-loop_712"
" table_716"
"(unsafe-fx+ 1 pos_714))"
" table_716))"
" table_713))"
" table_713))))"
" for-loop_712)"
" '#hasheqv()"
" 0)))))"
"(if(unsafe-fx< index_604 14)"
"(let-values()"
"(apply"
" make-prefab-struct"
"(cadr d_564)"
"(alt-reverse"
"(let-values(((lst_721)(cddr d_564)))"
"(begin"
"(if(list? lst_721)"
"(void)"
"(let-values()(in-list lst_721)))"
"((letrec-values(((for-loop_722)"
"(lambda(fold-var_723 lst_724)"
"(if(pair? lst_724)"
"(let-values(((d_725)"
"(unsafe-car lst_724)))"
"(if #t"
"(let-values(((fold-var_726)"
"(let-values(((fold-var_727)"
" fold-var_723))"
"(let-values(((fold-var_728)"
"(let-values()"
"(cons"
"(let-values()"
"(decode_563"
" d_725))"
" fold-var_727))))"
"(values"
" fold-var_728)))))"
"(if #t"
"(for-loop_722"
" fold-var_726"
"(unsafe-cdr lst_724))"
" fold-var_726))"
" fold-var_723))"
" fold-var_723))))"
" for-loop_722)"
" null"
" lst_721))))))"
"(if(unsafe-fx< index_604 15)"
"(let-values()"
"(if(null?(cdr d_564))"
"(deserialize-scope)"
"(deserialize-scope(cdr d_564))))"
"(if(unsafe-fx< index_604 16)"
"(let-values()"
"(deserialize-multi-scope"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))"
"(let-values()"
"(deserialize-shifted-multi-scope"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))))))"
"(if(unsafe-fx< index_604 20)"
"(if(unsafe-fx< index_604 18)"
"(let-values()"
"(deserialize-table-with-bulk-bindings"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))"
"(if(unsafe-fx< index_604 19)"
"(let-values()"
"(deserialize-bulk-binding-at"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))"
"(let-values()"
"(deserialize-representative-scope"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))))"
"(if(unsafe-fx< index_604 21)"
"(let-values()"
"(deserialize-full-module-binding"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))"
"(decode_563(list-ref d_564 3))"
"(decode_563(list-ref d_564 4))"
"(decode_563(list-ref d_564 5))"
"(decode_563(list-ref d_564 6))"
"(decode_563(list-ref d_564 7))"
"(decode_563(list-ref d_564 8))"
"(decode_563(list-ref d_564 9))))"
"(if(unsafe-fx< index_604 22)"
"(let-values()"
"(deserialize-simple-module-binding"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))"
"(decode_563(list-ref d_564 3))))"
"(if(unsafe-fx< index_604 23)"
"(let-values()"
"(deserialize-full-local-binding"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))"
"(let-values()"
"(deserialize-bulk-binding"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))"
"(decode_563(list-ref d_564 3))"
"(decode_563(list-ref d_564 4))))))))))))))))))))))))"
" decode_563)"
" d_558)))"
"(define-values"
"(decode-fill!)"
"(lambda(v_729 d_730 mpis_731 inspector_732 bulk-binding-registry_733 shared_734)"
"(if d_730"
"(let-values()"
"(let-values(((tmp_735)(car d_730)))"
"(if(equal? tmp_735 'set-box!)"
"(let-values()"
"(set-box! v_729(decode(cadr d_730) mpis_731 inspector_732 bulk-binding-registry_733 shared_734)))"
"(if(equal? tmp_735 'set-vector!)"
"(let-values()"
"(let-values(((vec_736 len_737)"
"(let-values(((vec_739)(cdr d_730)))"
"(begin"
"(if(vector? vec_739)(void)(let-values()(in-vector vec_739)))"
"(values vec_739(unsafe-vector-length vec_739)))))"
"((start_738) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_738)(void)(let-values()(in-naturals start_738)))"
"((letrec-values(((for-loop_740)"
"(lambda(fold-var_741 pos_742 pos_743)"
"(if(if(unsafe-fx< pos_742 len_737) #t #f)"
"(let-values(((vv_744)(unsafe-vector-ref vec_736 pos_742))((i_745) pos_743))"
"(if(if #t #t #f)"
"(let-values(((fold-var_746)"
"(let-values(((fold-var_747) fold-var_741))"
"(let-values(((fold-var_748)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" v_729"
" i_745"
"(decode"
" vv_744"
" mpis_731"
" inspector_732"
" bulk-binding-registry_733"
" shared_734)))"
"(void)))))"
"(values fold-var_748)))))"
"(if(if #t #t #f)"
"(for-loop_740 fold-var_746(unsafe-fx+ 1 pos_742)(+ pos_743 1))"
" fold-var_746))"
" fold-var_741))"
" fold-var_741))))"
" for-loop_740)"
"(void)"
" 0"
" start_738))))"
"(if(equal? tmp_735 'hash-set!)"
"(let-values()"
"(let-values(((vec_749 len_750)"
"(let-values(((vec_753)(cadr d_730)))"
"(begin"
"(if(vector? vec_753)(void)(let-values()(in-vector vec_753)))"
"(values vec_753(unsafe-vector-length vec_753)))))"
"((vec_751 len_752)"
"(let-values(((vec_754)(caddr d_730)))"
"(begin"
"(if(vector? vec_754)(void)(let-values()(in-vector vec_754)))"
"(values vec_754(unsafe-vector-length vec_754))))))"
"(begin"
" #f"
" #f"
"((letrec-values(((for-loop_755)"
"(lambda(fold-var_756 pos_757 pos_758)"
"(if(if(unsafe-fx< pos_757 len_750)(unsafe-fx< pos_758 len_752) #f)"
"(let-values(((hk_759)(unsafe-vector-ref vec_749 pos_757))"
"((hv_760)(unsafe-vector-ref vec_751 pos_758)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_761)"
"(let-values(((fold-var_762) fold-var_756))"
"(let-values(((fold-var_763)"
"(let-values()"
"(begin"
"(let-values()"
"(hash-set!"
" v_729"
"(decode"
" hk_759"
" mpis_731"
" inspector_732"
" bulk-binding-registry_733"
" shared_734)"
"(decode"
" hv_760"
" mpis_731"
" inspector_732"
" bulk-binding-registry_733"
" shared_734)))"
"(void)))))"
"(values fold-var_763)))))"
"(if(if #t #t #f)"
"(for-loop_755"
" fold-var_761"
"(unsafe-fx+ 1 pos_757)"
"(unsafe-fx+ 1 pos_758))"
" fold-var_761))"
" fold-var_756))"
" fold-var_756))))"
" for-loop_755)"
"(void)"
" 0"
" 0))))"
"(if(equal? tmp_735 'deserialize-scope-fill!)"
"(let-values()"
"(deserialize-scope-fill!"
" v_729"
"(decode(cadr d_730) mpis_731 inspector_732 bulk-binding-registry_733 shared_734)))"
"(if(equal? tmp_735 'deserialize-representative-scope-fill!)"
"(let-values()"
"(deserialize-representative-scope-fill!"
" v_729"
"(decode(cadr d_730) mpis_731 inspector_732 bulk-binding-registry_733 shared_734)"
"(decode(caddr d_730) mpis_731 inspector_732 bulk-binding-registry_733 shared_734)))"
"                    (let-values () (error 'deserialize \"bad fill encoding: ~v\" d_730)))))))))"
"(void))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_764)"
"(let-values(((seen_765)(make-hasheq)))"
"(let-values(((reachable-scopes_766)(seteq)))"
"(let-values(((scope-triggers_767)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_768)"
"(lambda(v_769)"
"(if(interned-literal? v_769)"
"(let-values()(void))"
"(if(hash-ref seen_765 v_769 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_765 v_769 #t)"
"(if(scope-with-bindings? v_769)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_766"
"(set-add reachable-scopes_766 v_769))"
"(values))))"
"(let-values((()"
"(begin((reach-scopes-ref v_769) v_769 loop_768)(values))))"
"(let-values(((l_770)(hash-ref scope-triggers_767 v_769 null)))"
"(begin"
"(let-values(((lst_771) l_770))"
"(begin"
"(if(list? lst_771)(void)(let-values()(in-list lst_771)))"
"((letrec-values(((for-loop_772)"
"(lambda(fold-var_773 lst_774)"
"(if(pair? lst_774)"
"(let-values(((v_775)"
"(unsafe-car lst_774)))"
"(if #t"
"(let-values(((fold-var_776)"
"(let-values(((fold-var_777)"
" fold-var_773))"
"(let-values(((fold-var_778)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_768"
" v_775))"
"(void)))))"
"(values"
" fold-var_778)))))"
"(if #t"
"(for-loop_772"
" fold-var_776"
"(unsafe-cdr lst_774))"
" fold-var_776))"
" fold-var_773))"
" fold-var_773))))"
" for-loop_772)"
"(void)"
" lst_771)))"
"((scope-with-bindings-ref v_769)"
" v_769"
" reachable-scopes_766"
" loop_768"
"(lambda(sc-unreachable_779 b_780)"
"(hash-update!"
" scope-triggers_767"
" sc-unreachable_779"
"(lambda(l_781)(cons b_780 l_781))"
" null))))))))"
"(if(reach-scopes? v_769)"
"(let-values()((reach-scopes-ref v_769) v_769 loop_768))"
"(if(pair? v_769)"
"(let-values()(begin(loop_768(car v_769))(loop_768(cdr v_769))))"
"(if(vector? v_769)"
"(let-values()"
"(let-values(((vec_782 len_783)"
"(let-values(((vec_784) v_769))"
"(begin"
"(if(vector? vec_784)"
"(void)"
"(let-values()(in-vector vec_784)))"
"(values vec_784(unsafe-vector-length vec_784))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_785)"
"(lambda(fold-var_786 pos_787)"
"(if(unsafe-fx< pos_787 len_783)"
"(let-values(((e_788)"
"(unsafe-vector-ref"
" vec_782"
" pos_787)))"
"(if #t"
"(let-values(((fold-var_789)"
"(let-values(((fold-var_790)"
" fold-var_786))"
"(let-values(((fold-var_791)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_768"
" e_788))"
"(void)))))"
"(values"
" fold-var_791)))))"
"(if #t"
"(for-loop_785"
" fold-var_789"
"(unsafe-fx+ 1 pos_787))"
" fold-var_789))"
" fold-var_786))"
" fold-var_786))))"
" for-loop_785)"
"(void)"
" 0))))"
"(if(box? v_769)"
"(let-values()(loop_768(unbox v_769)))"
"(if(hash? v_769)"
"(let-values()"
"(let-values(((ht_792) v_769))"
"(begin"
"(if((lambda(ht_793)(hash? ht_793)) ht_792)"
"(void)"
"(let-values()(default-in-hash ht_792)))"
"((letrec-values(((for-loop_794)"
"(lambda(fold-var_795 i_796)"
"(if i_796"
"(let-values(((k_797 v_798)"
"(hash-iterate-key+value"
" ht_792"
" i_796)))"
"(if #t"
"(let-values(((fold-var_799)"
"(let-values(((fold-var_800)"
" fold-var_795))"
"(let-values(((fold-var_801)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_768"
" k_797)"
"(loop_768"
" v_798)))"
"(void)))))"
"(values"
" fold-var_801)))))"
"(if #t"
"(for-loop_794"
" fold-var_799"
"(hash-iterate-next"
" ht_792"
" i_796))"
" fold-var_799))"
" fold-var_795))"
" fold-var_795))))"
" for-loop_794)"
"(void)"
"(hash-iterate-first ht_792)))))"
"(if(prefab-struct-key v_769)"
"(let-values()"
"(let-values(((v*_802 start*_803 stop*_804 step*_805)"
"(normalise-inputs"
" 'in-vector"
"                                                                       \"vector\""
"(lambda(x_806)(vector? x_806))"
"(lambda(x_807)(unsafe-vector-length x_807))"
"(struct->vector v_769)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_808)"
"(lambda(fold-var_809 idx_810)"
"(if(unsafe-fx< idx_810 stop*_804)"
"(let-values(((e_811)"
"(unsafe-vector-ref"
" v*_802"
" idx_810)))"
"(if #t"
"(let-values(((fold-var_812)"
"(let-values(((fold-var_813)"
" fold-var_809))"
"(let-values(((fold-var_814)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_768"
" e_811))"
"(void)))))"
"(values"
" fold-var_814)))))"
"(if #t"
"(for-loop_808"
" fold-var_812"
"(unsafe-fx+ idx_810 1))"
" fold-var_812))"
" fold-var_809))"
" fold-var_809))))"
" for-loop_808)"
"(void)"
" start*_803))))"
"(let-values()(void))))))))))))))))"
" loop_768)"
" v_764)"
" reachable-scopes_766))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-phase"
" compiled-in-memory-max-phase"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literalss"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_67 port_68 mode_69)(write(compiled-in-memory-linklet-directory cim_67) port_68))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'compiled-in-memory))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'max-phase)"
"(make-struct-field-accessor -ref_4 3 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 4 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 5 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 6 'mpis)"
"(make-struct-field-accessor -ref_4 7 'syntax-literalss)"
"(make-struct-field-accessor -ref_4 8 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 9 'post-compiled-in-memorys))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_1 original-scopes-s_2 new-ns_3)"
"(let-values(((old-scs-post_4 old-scs-other_5)(decode-namespace-scopes original-scopes-s_2)))"
"(let-values(((new-scs-post_6 new-scs-other_7)(extract-namespace-scopes new-ns_3)))"
"(syntax-swap-scopes(syntax-swap-scopes s_1 old-scs-post_4 new-scs-post_6) old-scs-other_5 new-scs-other_7)))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_8)"
"(let-values(((root-ctx_9)(namespace-get-root-expand-ctx ns_8)))"
"(let-values(((post-expansion-sc_10)(root-expand-context-post-expansion-scope root-ctx_9)))"
"(values"
"(seteq post-expansion-sc_10)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_9)) post-expansion-sc_10))))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_11)"
"(let-values(((post-expansion-scs_12 other-scs_13)(extract-namespace-scopes ns_11)))"
"(let-values(((post-expansion-s_14)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_12))))"
"(let-values(((other-s_15)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_13))))"
"(datum->syntax$1 #f(vector post-expansion-s_14 other-s_15)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_16)"
"(let-values(((vec_17)(syntax-e$1 stx_16)))"
"(values(syntax-scope-set(vector-ref vec_17 0) 0)(syntax-scope-set(vector-ref vec_17 1) 0)))))"
"(define-values"
"(struct:header"
" header1.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" header-num-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!"
" set-header-num-syntax-literals!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type 'header #f 9 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_4 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_4 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_4 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_4 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_4 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_4 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_4 7 'syntax-literals)"
"(make-struct-field-accessor -ref_4 8 'num-syntax-literals)"
"(make-struct-field-mutator -set!_5 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_5 5 'require-vars-in-order)"
"(make-struct-field-mutator -set!_5 8 'num-syntax-literals))))"
"(define-values"
"(struct:variable-use variable-use2.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use))))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 0 'module-use)"
"(make-struct-field-accessor -ref_65 1 'sym))))"
"(define-values"
"(make-header)"
"(lambda(mpis_88)"
"(header1.1 mpis_88(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq)(box null) 0)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header_89 q_90)"
"(let-values(((pos_91)(header-num-syntax-literals header_89)))"
"(let-values((()(begin(set-header-num-syntax-literals! header_89(add1 pos_91))(values))))"
"(let-values(((b_92)(header-syntax-literals header_89)))"
"(begin(set-box! b_92(cons q_90(unbox b_92))) pos_91))))))"
"(define-values(empty-syntax-literals) '#&())"
"(define-values(header-empty-syntax-literals?)(lambda(header_93)(null?(unbox(header-syntax-literals header_93)))))"
"(define-values"
"(generate-lazy-syntax-literals!8.1)"
"(lambda(skip-deserialize?3_94 skip-deserialize?4_95 syntax-literals-boxes5_96 mpis6_97 self7_98)"
"(let-values(((syntax-literals-boxes_99) syntax-literals-boxes5_96))"
"(let-values(((mpis_100) mpis6_97))"
"(let-values(((self_101) self7_98))"
"(let-values(((skip-deserialize?_102)(if skip-deserialize?4_95 skip-deserialize?3_94 #f)))"
"(let-values()"
"(let-values(((syntax-literalss_103)(map2 unbox syntax-literals-boxes_99)))"
"(list"
"(list"
" 'define-values"
"(list syntax-literalss-id)"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((lst_104) syntax-literalss_103))"
"(begin"
"(if(list? lst_104)(void)(let-values()(in-list lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(fold-var_106 lst_107)"
"(if(pair? lst_107)"
"(let-values(((syntax-literals_108)(unsafe-car lst_107)))"
"(if #t"
"(let-values(((fold-var_109)"
"(let-values(((fold-var_110) fold-var_106))"
"(let-values(((fold-var_111)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'make-vector"
"(length syntax-literals_108)"
" '(#f)))"
" fold-var_110))))"
"(values fold-var_111)))))"
"(if #t"
"(for-loop_105 fold-var_109(unsafe-cdr lst_107))"
" fold-var_109))"
" fold-var_106))"
" fold-var_106))))"
" for-loop_105)"
" null"
" lst_104))))))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(phase pos)"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_102"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-vector-id '(phase))"
" '(void)"
"(list deserialize-syntax-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref(list* 'vector-ref deserialized-syntax-vector-id '(phase)) '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_100 self_101)"
" self-id)))"
"(list*"
" 'begin"
"(list* 'vector-set!(list* 'vector-ref syntax-literalss-id '(phase)) '(pos stx))"
" '(stx)))))))))))))))))"
"(define-values"
"(unpack9.1$1)"
"(lambda(given-kws_112 given-args_113 syntax-literals-boxes5_114 mpis6_115 self7_116)"
"(let-values(((skip-deserialize?4_117)(pair? given-kws_112)))"
"(let-values(((skip-deserialize?3_118)(if skip-deserialize?4_117(car given-args_113)(void))))"
"(generate-lazy-syntax-literals!8.1"
" skip-deserialize?3_118"
" skip-deserialize?4_117"
" syntax-literals-boxes5_114"
" mpis6_115"
" self7_116)))))"
"(define-values"
"(generate-lazy-syntax-literals!10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_119 given-argc_120)"
"(if(= given-argc_120 5)"
"(let-values(((l1_121) given-kws_119))"
"(let-values(((l1_122)"
"(if(null? l1_121) l1_121(if(eq?(car l1_121) '#:skip-deserialize?)(cdr l1_121) l1_121))))"
"(null? l1_122)))"
" #f))"
"(case-lambda"
"((given-kws_123 given-args_124 syntax-literals-boxes_125 mpis_126 self_127)"
"(unpack9.1$1 given-kws_123 given-args_124 syntax-literals-boxes_125 mpis_126 self_127)))"
" null"
" '(#:skip-deserialize?)"
"(let-values(((generate-lazy-syntax-literals!_128)"
"(case-lambda"
"((syntax-literals-boxes_129 mpis_130 self_131)"
"(unpack9.1$1 null null syntax-literals-boxes_129 mpis_130 self_131)))))"
" generate-lazy-syntax-literals!_128)))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(syntax-literals-boxes_132 mpis_133)"
"(let-values(((syntax-literalss_134)(map2 unbox syntax-literals-boxes_132)))"
"(if(andmap2 null? syntax-literalss_134)"
"(let-values() null)"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
" '()"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(let-values(((temp25_135)"
"(vector->immutable-vector"
"(list->vector"
"(map2"
" vector->immutable-vector"
"(map2 list->vector(map2 alt-reverse syntax-literalss_134))))))"
"((mpis26_136) mpis_133))"
"(if(variable-reference-constant?(#%variable-reference generate-deserialize7.1))"
"(generate-deserialize5.1 #f #f temp25_135 mpis26_136)"
"(generate-deserialize7.1 temp25_135 mpis26_136))))"
"(list* 'set! deserialize-syntax-id '(#f)))))))))))"
"(define-values"
"(generate-lazy-syntax-literal-lookup)"
"(lambda(phase_137 pos_138)"
"(list"
" 'let-values"
"(list(list '(stx)(generate-eager-syntax-literal-lookup phase_137 pos_138)))"
"(list 'if 'stx 'stx(list get-syntax-literal!-id(list 'quote phase_137)(list 'quote pos_138))))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(syntax-literals-boxes_139 mpis_140 base-phase_141 self_142 ns_143)"
"(let-values(((syntax-literalss_144)(map2 unbox syntax-literals-boxes_139)))"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_145)"
"(cons"
"(encode-namespace-scopes ns_143)"
"(append"
"(alt-reverse"
"(let-values(((start_147) 0)((end_148) base-phase_141)((inc_149) 1))"
"(begin"
"(if(if(real? start_147)(if(real? end_148)(real? inc_149) #f) #f)"
"(void)"
"(let-values()(in-range start_147 end_148 inc_149)))"
"((letrec-values(((for-loop_150)"
"(lambda(fold-var_151 pos_152)"
"(if(< pos_152 end_148)"
"(let-values(((i_153) pos_152))"
"(if #t"
"(let-values(((fold-var_154)"
"(let-values(((fold-var_155) fold-var_151))"
"(let-values(((fold-var_156)"
"(let-values()"
"(cons"
"(let-values() null)"
" fold-var_155))))"
"(values fold-var_156)))))"
"(if #t"
"(for-loop_150 fold-var_154(+ pos_152 inc_149))"
" fold-var_154))"
" fold-var_151))"
" fold-var_151))))"
" for-loop_150)"
" null"
" start_147))))"
"(map2 alt-reverse syntax-literalss_144))))"
"((mpis28_146) mpis_140))"
"(if(variable-reference-constant?(#%variable-reference generate-deserialize7.1))"
"(generate-deserialize5.1 #f #f temp27_145 mpis28_146)"
"(generate-deserialize7.1 temp27_145 mpis28_146)))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stxs)"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_141 dest-phase-id))"
"(add-module-path-index! mpis_140 self_142)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '(stxs))))"
" '((cdr ns+stxss)))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(phase_157 pos_158)"
"(list 'vector-ref(list 'vector-ref syntax-literalss-id(list 'quote phase_157))(list 'quote pos_158))))"
"(define-values"
"(syntax-literals-as-vectors)"
"(lambda(syntax-literals-boxes_159 base-phase_160)"
"(list->vector"
"(append"
"(alt-reverse"
"(let-values(((start_161) 0)((end_162) base-phase_160)((inc_163) 1))"
"(begin"
"(if(if(real? start_161)(if(real? end_162)(real? inc_163) #f) #f)"
"(void)"
"(let-values()(in-range start_161 end_162 inc_163)))"
"((letrec-values(((for-loop_164)"
"(lambda(fold-var_165 pos_166)"
"(if(< pos_166 end_162)"
"(let-values(((i_167) pos_166))"
"(if #t"
"(let-values(((fold-var_168)"
"(let-values(((fold-var_169) fold-var_165))"
"(let-values(((fold-var_170)"
"(let-values()"
"(cons(let-values() #f) fold-var_169))))"
"(values fold-var_170)))))"
"(if #t(for-loop_164 fold-var_168(+ pos_166 inc_163)) fold-var_168))"
" fold-var_165))"
" fold-var_165))))"
" for-loop_164)"
" null"
" start_161))))"
"(map2 list->vector(map2 alt-reverse(map2 unbox syntax-literals-boxes_159)))))))"
"(define-values(local-key->symbol)(lambda(key_171) key_171))"
"(define-values"
"(select-fresh)"
"(lambda(sym_172 header_173)"
"(if(symbol-conflicts? sym_172 header_173)"
"((letrec-values(((loop_174)"
"(lambda(pos_175)"
"                          (let-values (((new-sym_176) (string->symbol (format \"~a/~a\" pos_175 sym_172))))"
"(if(symbol-conflicts? new-sym_176 header_173)(loop_174(add1 pos_175)) new-sym_176)))))"
" loop_174)"
" 1)"
" sym_172)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_177 header_178)"
"(let-values(((or-part_179)(built-in-symbol? sym_177)))"
"(if or-part_179 or-part_179(hash-ref(header-define-and-import-syms header_178) sym_177 #f)))))"
"(define-values"
"(register-required-variable-use!18.1)"
"(lambda(defined?11_180 defined?12_181 header13_182 mpi14_183 phase15_184 sym16_185 extra-inspector17_186)"
"(let-values(((header_187) header13_182))"
"(let-values(((mpi_188) mpi14_183))"
"(let-values(((phase_189) phase15_184))"
"(let-values(((sym_190) sym16_185))"
"(let-values(((extra-inspector_191) extra-inspector17_186))"
"(let-values(((defined?_192)(if defined?12_181 defined?11_180 #f)))"
"(let-values()"
"(let-values(((key_193)(variable-use2.1(module-use1.1 mpi_188 phase_189) sym_190)))"
"(let-values(((variable-uses_194)(header-require-var-to-import-sym header_187)))"
"(let-values(((var-sym_195)"
"(let-values(((or-part_196)(hash-ref variable-uses_194 key_193 #f)))"
"(if or-part_196"
" or-part_196"
"(let-values(((sym_197)(select-fresh(variable-use-sym key_193) header_187)))"
"(begin"
"(hash-set! variable-uses_194 key_193 sym_197)"
"(set-header-require-vars-in-order!"
" header_187"
"(cons key_193(header-require-vars-in-order header_187)))"
"(hash-set!"
"(header-define-and-import-syms header_187)"
" sym_197"
"(if defined?_192 'defined 'required))"
" sym_197))))))"
"(begin"
"(if extra-inspector_191"
"(let-values()"
"(let-values(((extra-inspectors_198)(header-import-sym-to-extra-inspectors header_187)))"
"(hash-update!"
" extra-inspectors_198"
" var-sym_195"
"(lambda(s_199)(set-add s_199 extra-inspector_191))"
" '#hasheq())))"
"(void))"
" var-sym_195)))))))))))))"
"(define-values"
"(unpack19.1)"
"(lambda(given-kws_200 given-args_201 header13_202 mpi14_203 phase15_204 sym16_205 extra-inspector17_206)"
"(let-values(((defined?12_207)(pair? given-kws_200)))"
"(let-values(((defined?11_208)(if defined?12_207(car given-args_201)(void))))"
"(register-required-variable-use!18.1"
" defined?11_208"
" defined?12_207"
" header13_202"
" mpi14_203"
" phase15_204"
" sym16_205"
" extra-inspector17_206)))))"
"(define-values"
"(register-required-variable-use!20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_209 given-argc_210)"
"(if(= given-argc_210 7)"
"(let-values(((l1_211) given-kws_209))"
"(let-values(((l1_212)(if(null? l1_211) l1_211(if(eq?(car l1_211) '#:defined?)(cdr l1_211) l1_211))))"
"(null? l1_212)))"
" #f))"
"(case-lambda"
"((given-kws_213 given-args_214 header_215 mpi_216 phase_217 sym_218 extra-inspector_219)"
"(unpack19.1 given-kws_213 given-args_214 header_215 mpi_216 phase_217 sym_218 extra-inspector_219)))"
" null"
" '(#:defined?)"
"(let-values(((register-required-variable-use!_220)"
"(case-lambda"
"((header_221 mpi_222 phase_223 sym_224 extra-inspector_225)"
"(unpack19.1 null null header_221 mpi_222 phase_223 sym_224 extra-inspector_225)))))"
" register-required-variable-use!_220)))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_226 def-sym_227)(hash-set!(header-define-and-import-syms header_226) def-sym_227 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_228 var-sym_229)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_228) var-sym_229 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_230 phase_231 cctx_232)"
"(let-values(((mod-use-to-link-sym_233)"
"(let-values(((lst_235)(header-require-vars-in-order header_230)))"
"(begin"
"(if(list? lst_235)(void)(let-values()(in-list lst_235)))"
"((letrec-values(((for-loop_236)"
"(lambda(ht_237 lst_238)"
"(if(pair? lst_238)"
"(let-values(((vu_239)(unsafe-car lst_238)))"
"(if #t"
"(let-values(((ht_240)"
"(let-values(((ht_241) ht_237))"
"(let-values(((ht_242)"
"(let-values()"
"(let-values(((mu_243)"
"(variable-use-module-use"
" vu_239)))"
"(if(let-values(((or-part_244)"
"(hash-ref"
" ht_241"
" mu_243"
" #f)))"
"(if or-part_244"
" or-part_244"
"(eq?"
"(module-use-module mu_243)"
"(compile-context-self"
" cctx_232))))"
" ht_241"
"(hash-set"
" ht_241"
" mu_243"
"(string->symbol"
"(format"
"                                                                                       \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_243))"
"(module-use-phase mu_243)"
"(hash-count ht_241)))))))))"
"(values ht_242)))))"
"(if #t(for-loop_236 ht_240(unsafe-cdr lst_238)) ht_240))"
" ht_237))"
" ht_237))))"
" for-loop_236)"
" '#hash()"
" lst_235)))))"
"(let-values(((link-mod-uses_234)(hash-keys mod-use-to-link-sym_233)))"
"(values"
" link-mod-uses_234"
"(alt-reverse"
"(let-values(((lst_245) link-mod-uses_234))"
"(begin"
"(if(list? lst_245)(void)(let-values()(in-list lst_245)))"
"((letrec-values(((for-loop_246)"
"(lambda(fold-var_247 lst_248)"
"(if(pair? lst_248)"
"(let-values(((mu_249)(unsafe-car lst_248)))"
"(if #t"
"(let-values(((fold-var_250)"
"(let-values(((fold-var_251) fold-var_247))"
"(let-values(((fold-var_252)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_253)"
"(header-require-vars-in-order"
" header_230)))"
"(begin"
"(if(list? lst_253)"
"(void)"
"(let-values()(in-list lst_253)))"
"((letrec-values(((for-loop_254)"
"(lambda(fold-var_255"
" lst_256)"
"(if(pair? lst_256)"
"(let-values(((vu_257)"
"(unsafe-car"
" lst_256)))"
"(if #t"
"(let-values(((fold-var_258)"
"(let-values(((fold-var_259)"
" fold-var_255))"
"(if(equal?"
" mu_249"
"(variable-use-module-use"
" vu_257))"
"(let-values(((fold-var_260)"
" fold-var_259))"
"(let-values(((fold-var_261)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_262)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_230)"
" vu_257)))"
"(let-values(((ex-sym_263)"
"(variable-use-sym"
" vu_257)))"
"(if(eq?"
" var-sym_262"
" ex-sym_263)"
" var-sym_262"
"(list"
" ex-sym_263"
" var-sym_262)))))"
" fold-var_260))))"
"(values"
" fold-var_261)))"
" fold-var_259))))"
"(if #t"
"(for-loop_254"
" fold-var_258"
"(unsafe-cdr"
" lst_256))"
" fold-var_258))"
" fold-var_255))"
" fold-var_255))))"
" for-loop_254)"
" null"
" lst_253)))))"
" fold-var_251))))"
"(values fold-var_252)))))"
"(if #t(for-loop_246 fold-var_250(unsafe-cdr lst_248)) fold-var_250))"
" fold-var_247))"
" fold-var_247))))"
" for-loop_246)"
" null"
" lst_245))))"
"(alt-reverse"
"(let-values(((lst_264) link-mod-uses_234))"
"(begin"
"(if(list? lst_264)(void)(let-values()(in-list lst_264)))"
"((letrec-values(((for-loop_265)"
"(lambda(fold-var_266 lst_267)"
"(if(pair? lst_267)"
"(let-values(((mu_268)(unsafe-car lst_267)))"
"(if #t"
"(let-values(((fold-var_269)"
"(let-values(((fold-var_270) fold-var_266))"
"(let-values(((fold-var_271)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_272)"
"(alt-reverse"
"(let-values(((lst_273)"
"(header-require-vars-in-order"
" header_230)))"
"(begin"
"(if(list? lst_273)"
"(void)"
"(let-values()"
"(in-list lst_273)))"
"((letrec-values(((for-loop_274)"
"(lambda(fold-var_275"
" lst_276)"
"(if(pair?"
" lst_276)"
"(let-values(((vu_277)"
"(unsafe-car"
" lst_276)))"
"(if #t"
"(let-values(((fold-var_278)"
"(let-values(((fold-var_279)"
" fold-var_275))"
"(if(equal?"
" mu_268"
"(variable-use-module-use"
" vu_277))"
"(let-values(((fold-var_280)"
" fold-var_279))"
"(let-values(((fold-var_281)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_282)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_230)"
" vu_277)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_230)"
" var-sym_282"
" #f)))"
" fold-var_280))))"
"(values"
" fold-var_281)))"
" fold-var_279))))"
"(if #t"
"(for-loop_274"
" fold-var_278"
"(unsafe-cdr"
" lst_276))"
" fold-var_278))"
" fold-var_275))"
" fold-var_275))))"
" for-loop_274)"
" null"
" lst_273))))))"
"(if(ormap2 values extra-inspectorss_272)"
" extra-inspectorss_272"
" #f)))"
" fold-var_270))))"
"(values fold-var_271)))))"
"(if #t(for-loop_265 fold-var_269(unsafe-cdr lst_267)) fold-var_269))"
" fold-var_266))"
" fold-var_266))))"
" for-loop_265)"
" null"
" lst_264))))"
"(alt-reverse"
"(let-values(((lst_283)(header-require-vars-in-order header_230)))"
"(begin"
"(if(list? lst_283)(void)(let-values()(in-list lst_283)))"
"((letrec-values(((for-loop_284)"
"(lambda(fold-var_285 lst_286)"
"(if(pair? lst_286)"
"(let-values(((vu_287)(unsafe-car lst_286)))"
"(if #t"
"(let-values(((fold-var_288)"
"(let-values(((fold-var_289) fold-var_285))"
"(if(eq?"
"(module-use-module(variable-use-module-use vu_287))"
"(compile-context-self cctx_232))"
"(let-values(((fold-var_290) fold-var_289))"
"(let-values(((fold-var_291)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_292)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_230)"
" vu_287)))"
"(let-values(((ex-sym_293)"
"(variable-use-sym"
" vu_287)))"
"(if(eq? var-sym_292 ex-sym_293)"
" var-sym_292"
"(list var-sym_292 ex-sym_293)))))"
" fold-var_290))))"
"(values fold-var_291)))"
" fold-var_289))))"
"(if #t(for-loop_284 fold-var_288(unsafe-cdr lst_286)) fold-var_288))"
" fold-var_285))"
" fold-var_285))))"
" for-loop_284)"
" null"
" lst_283)))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_294)"
"(let-values(((p_295 base_296)(1/module-path-index-split mpi_294)))"
"(if(symbol? p_295)"
"(let-values() p_295)"
"(if(path? p_295)"
"(let-values()"
"            (let-values (((base_297 name_298 dir?_299) (split-path p_295))) (path-replace-extension name_298 #\"\")))"
"(if(string? p_295)"
"            (let-values () (path-replace-extension p_295 #\"\"))"
"(if(if(pair? p_295)(eq?(car p_295) 'quote) #f)"
"(let-values()(cadr p_295))"
"(if(if(pair? p_295)(eq?(car p_295) 'file) #f)"
"(let-values()"
"(let-values(((base_300 name_301 dir?_302)(split-path(cadr p_295))))"
"                    (path-replace-extension name_301 #\"\")))"
"(if(if(pair? p_295)(eq?(car p_295) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_295) #\"\"))"
"(let-values() 'module))))))))))"
"(define-values(instance-imports)(list ns-id phase-shift-id self-id inspector-id set-transformer!-id))"
"(define-values"
"(lifted/1.1$20)"
"(make-required 'make-instance-instance(case-lambda((self_3)(apply missing-kw self_3 null))) #f #f))"
"(define-values"
"(make-instance-instance11.1)"
"(lambda(inspector4_4 namespace1_5 phase-shift2_6 self3_7 set-transformer!5_8)"
"(let-values(((ns_9) namespace1_5))"
"(let-values(((phase-shift_10) phase-shift2_6))"
"(let-values(((self_11) self3_7))"
"(let-values(((inspector_12) inspector4_4))"
"(let-values(((set-transformer!_13) set-transformer!5_8))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_9"
" phase-shift-id"
" phase-shift_10"
" self-id"
" self_11"
" inspector-id"
" inspector_12"
" set-transformer!-id"
" set-transformer!_13)))))))))"
"(define-values"
"(unpack12.1$3)"
"(lambda(given-kws_14 given-args_15)"
"(let-values(((inspector4_16)(car given-args_15))"
"((given-kws_17)(cdr given-kws_14))"
"((given-args_18)(cdr given-args_15)))"
"(let-values(((namespace1_19)(car given-args_18))"
"((given-kws_20)(cdr given-kws_17))"
"((given-args_21)(cdr given-args_18)))"
"(let-values(((phase-shift2_22)(car given-args_21))"
"((given-kws_23)(cdr given-kws_20))"
"((given-args_24)(cdr given-args_21)))"
"(let-values(((self3_25)(car given-args_24))"
"((given-kws_26)(cdr given-kws_23))"
"((given-args_27)(cdr given-args_24)))"
"(let-values(((set-transformer!5_28)(car given-args_27)))"
"(make-instance-instance11.1"
" inspector4_16"
" namespace1_19"
" phase-shift2_22"
" self3_25"
" set-transformer!5_28))))))))"
"(define-values"
"(make-instance-instance13.1)"
"(lifted/1.1$20"
"(lambda(given-kws_29 given-argc_30)"
"(if(= given-argc_30 2)"
"(let-values(((l2_31) given-kws_29))"
"(if(pair? l2_31)"
"(if(eq?(car l2_31) '#:inspector)"
"(let-values(((l2_32)(cdr l2_31)))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:namespace)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)"
"(if(eq?(car l2_33) '#:phase-shift)"
"(let-values(((l2_34)(cdr l2_33)))"
"(if(pair? l2_34)"
"(if(eq?(car l2_34) '#:self)"
"(let-values(((l2_35)(cdr l2_34)))"
"(if(pair? l2_35)"
"(if(eq?(car l2_35) '#:set-transformer!)(null?(cdr l2_35)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_36 given-args_37)(unpack12.1$3 given-kws_36 given-args_37)))"
" '(#:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" '(#:inspector #:namespace #:phase-shift #:self #:set-transformer!)))"
"(define-values"
"(lifted/2.1$7)"
"(make-required 'make-module-body-instance-instance(case-lambda((self_38)(apply missing-kw self_38 null))) #f #f))"
"(define-values"
"(make-module-body-instance-instance16.1)"
"(lambda(set-transformer!14_39)"
"(let-values(((set-transformer!_40) set-transformer!14_39))"
"(let-values()(1/make-instance 'body-instance #f set-transformer!-id set-transformer!_40)))))"
"(define-values"
"(unpack17.1$3)"
"(lambda(given-kws_41 given-args_42)"
"(let-values(((set-transformer!14_43)(car given-args_42)))"
"(make-module-body-instance-instance16.1 set-transformer!14_43))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lifted/2.1$7"
"(lambda(given-kws_44 given-argc_45)"
"(if(= given-argc_45 2)"
"(let-values(((l2_46) given-kws_44))"
"(if(pair? l2_46)(if(eq?(car l2_46) '#:set-transformer!)(null?(cdr l2_46)) #f) #f))"
" #f))"
"(case-lambda((given-kws_47 given-args_48)(unpack17.1$3 given-kws_47 given-args_48)))"
" '(#:set-transformer!)"
" '(#:set-transformer!)))"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(lifted/1.1$19)"
"(make-required 'make-eager-instance-instance(case-lambda((self_2)(apply missing-kw self_2 null))) #f #f))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_3 dest-phase2_4 inspector5_5 namespace1_6 self3_7)"
"(let-values(((ns_8) namespace1_6))"
"(let-values(((dest-phase_9) dest-phase2_4))"
"(let-values(((self_10) self3_7))"
"(let-values(((bulk-binding-registry_11) bulk-binding-registry4_3))"
"(let-values(((inspector_12) inspector5_5))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_8"
" dest-phase-id"
" dest-phase_9"
" self-id"
" self_10"
" bulk-binding-registry-id"
" bulk-binding-registry_11"
" inspector-id"
" inspector_12"
" 'swap-top-level-scopes"
" swap-top-level-scopes)))))))))"
"(define-values"
"(unpack12.1$2)"
"(lambda(given-kws_13 given-args_14)"
"(let-values(((bulk-binding-registry4_15)(car given-args_14))"
"((given-kws_16)(cdr given-kws_13))"
"((given-args_17)(cdr given-args_14)))"
"(let-values(((dest-phase2_18)(car given-args_17))"
"((given-kws_19)(cdr given-kws_16))"
"((given-args_20)(cdr given-args_17)))"
"(let-values(((inspector5_21)(car given-args_20))"
"((given-kws_22)(cdr given-kws_19))"
"((given-args_23)(cdr given-args_20)))"
"(let-values(((namespace1_24)(car given-args_23))"
"((given-kws_25)(cdr given-kws_22))"
"((given-args_26)(cdr given-args_23)))"
"(let-values(((self3_27)(car given-args_26)))"
"(make-eager-instance-instance11.1"
" bulk-binding-registry4_15"
" dest-phase2_18"
" inspector5_21"
" namespace1_24"
" self3_27))))))))"
"(define-values"
"(make-eager-instance-instance13.1)"
"(lifted/1.1$19"
"(lambda(given-kws_28 given-argc_29)"
"(if(= given-argc_29 2)"
"(let-values(((l2_30) given-kws_28))"
"(if(pair? l2_30)"
"(if(eq?(car l2_30) '#:bulk-binding-registry)"
"(let-values(((l2_31)(cdr l2_30)))"
"(if(pair? l2_31)"
"(if(eq?(car l2_31) '#:dest-phase)"
"(let-values(((l2_32)(cdr l2_31)))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:inspector)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)"
"(if(eq?(car l2_33) '#:namespace)"
"(let-values(((l2_34)(cdr l2_33)))"
"(if(pair? l2_34)(if(eq?(car l2_34) '#:self)(null?(cdr l2_34)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_35 given-args_36)(unpack12.1$2 given-kws_35 given-args_36)))"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)))"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_1)"
"(let-values(((or-part_2)(number? datum_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_1)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_1)))(if or-part_4 or-part_4(bytes? datum_1)))))))))"
"(define-values(kernel-primitive-table$1)(primitive-table '#%kernel))"
"(define-values(datum->syntax$3)(hash-ref kernel-primitive-table$1 'datum->syntax))"
"(define-values(syntax-property$2)(hash-ref kernel-primitive-table$1 'syntax-property))"
"(define-values(syntax-e$3)(hash-ref kernel-primitive-table$1 'syntax-e))"
"(define-values(syntax?$2)(hash-ref kernel-primitive-table$1 'syntax?))"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_294)"
"(lambda(d3_295 srcloc1_296 srcloc2_297)"
"(let-values(((d_298) d3_295))"
"(let-values(((srcloc_299)(if srcloc2_297 srcloc1_296 #f)))"
"(let-values()(datum->syntax$3 #f d_298 srcloc_299)))))))"
"(case-lambda"
"((d_300)(datum->correlated4_294 d_300 #f #f))"
"((d_301 srcloc1_302)(datum->correlated4_294 d_301 srcloc1_302 #t)))))"
"(define-values(correlated-e)(lambda(e_303)(if(syntax?$2 e_303)(syntax-e$3 e_303) e_303)))"
"(define-values(correlated-cadr)(lambda(e_304)(car(correlated-e(cdr(correlated-e e_304))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_305)(let-values(((l_306)(correlated-e e_305)))(if(list? l_306)(length l_306) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_307)"
"((letrec-values(((loop_308)"
"(lambda(e_309)"
"(if(pair? e_309)"
"(let-values()(cons(car e_309)(loop_308(cdr e_309))))"
"(if(null? e_309)"
"(let-values() null)"
"(if(syntax?$2 e_309)"
"(let-values()(loop_308(syntax-e$3 e_309)))"
"                              (let-values () (error 'correlate->list \"not a list\"))))))))"
" loop_308)"
" e_307)))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_314 k_315)(syntax-property$2 e_314 k_315))"
"((e_316 k_317 v_318)(syntax-property$2 e_316 k_317 v_318))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_319)"
"(if(pair? s_319)"
"(let-values()(let-values(((r_320)(to-syntax-list.1$1(cdr s_319))))(if r_320(cons(car s_319) r_320) #f)))"
"(if(syntax?$2 s_319)"
"(let-values()(to-syntax-list.1$1(syntax-e$3 s_319)))"
"(if(list? s_319)(let-values() s_319)(let-values() #f))))))"
"(define-values(kernel-primitive-table)(1/primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(syntax-property-symbol-keys$1)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(syntax-position$1)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(syntax-column$1)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(syntax-source$1)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(syntax-e$2)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(define-values"
"(srcloc->vector)"
"(lambda(s_16)"
"(if s_16"
"(vector(srcloc-source s_16)(srcloc-line s_16)(srcloc-column s_16)(srcloc-position s_16)(srcloc-span s_16))"
" #f)))"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(let-values(((e_3)"
"(if(if(datum-has-elements? s-exp_2)(syntax-srcloc stx_1) #f)"
"(let-values()"
"(datum->correlated"
"(correlated-e(datum->correlated s-exp_2))"
"(srcloc->vector(syntax-srcloc stx_1))))"
"(let-values()(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1)))))))"
"(let-values(((maybe-n_4)(syntax-property$1 stx_1 'inferred-name)))"
"(if maybe-n_4"
"(correlated-property e_3 'inferred-name(if(syntax?$1 maybe-n_4)(syntax->datum$1 maybe-n_4) maybe-n_4))"
" e_3)))))"
"(define-values"
"(compile$2)"
"(let-values(((compile7_2)"
"(lambda(in-s5_3 cctx6_4 name1_5 result-used?2_6 name3_7 result-used?4_8)"
"(let-values(((in-s_9) in-s5_3))"
"(let-values(((cctx_10) cctx6_4))"
"(let-values(((name_11)(if name3_7 name1_5 #f)))"
"(let-values(((result-used?_12)(if result-used?4_8 result-used?2_6 #t)))"
"(let-values()"
"(let-values(((compile_13)"
"(lambda(s_14 name_15 result-used?_16)"
"(compile$2 s_14 cctx_10 name_15 result-used?_16))))"
"(let-values(((s_17)(syntax-disarm$1 in-s_9)))"
"(if(pair?(syntax-e$1 s_17))"
"(let-values()"
"(let-values(((phase_18)(compile-context-phase cctx_10)))"
"(let-values(((core-sym_19)(core-form-sym s_17 phase_18)))"
"(let-values(((tmp_20) core-sym_19))"
"(let-values(((index_21)"
"(if(symbol? tmp_20)"
"(hash-ref"
" '#hasheq((#%app . 5)"
"(with-continuation-mark . 7)"
"(begin . 8)"
"(module . 2)"
"(#%expression . 12)"
"(set! . 9)"
"(let-values . 10)"
"(if . 6)"
"(quote-syntax . 14)"
"(quote . 13)"
"(letrec-values . 11)"
"(begin0 . 8)"
"(#%variable-reference . 15)"
"(lambda . 3)"
"(case-lambda . 4)"
"(#%top . 16)"
"(module* . 2))"
" tmp_20"
"(lambda() 0))"
"(if(equal? tmp_20 #f)(let-values() 1)(let-values() 0)))))"
"(if(unsafe-fx< index_21 8)"
"(if(unsafe-fx< index_21 3)"
"(if(unsafe-fx< index_21 1)"
"                                                  (let-values () (error \"unrecognized core form:\" core-sym_19))"
"(if(unsafe-fx< index_21 2)"
"(let-values()"
"(error"
"                                                       \"internal error; not a core form:\""
" s_17"
"                                                       \"at phase:\""
" phase_18))"
"                                                    (let-values () (error \"not a core expression form:\" s_17))))"
"(if(unsafe-fx< index_21 5)"
"(if(unsafe-fx< index_21 4)"
"(let-values()"
"(if result-used?_12"
"(let-values()"
"(let-values(((ok?_22 lambda28_23 formals29_24 body30_25)"
"(let-values(((s_38) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_39) s_38))"
"(let-values(((lambda28_40"
" formals29_41"
" body30_42)"
"(let-values(((s_43)"
"(if(syntax?$1"
" s_38)"
"(syntax-e$1"
" s_38)"
" s_38)))"
"(if(pair? s_43)"
"(let-values(((lambda31_44)"
"(let-values(((s_47)"
"(car"
" s_43)))"
" s_47))"
"((formals32_45"
" body33_46)"
"(let-values(((s_48)"
"(cdr"
" s_43)))"
"(let-values(((s_49)"
"(if(syntax?$1"
" s_48)"
"(syntax-e$1"
" s_48)"
" s_48)))"
"(if(pair?"
" s_49)"
"(let-values(((formals34_50)"
"(let-values(((s_52)"
"(car"
" s_49)))"
" s_52))"
"((body35_51)"
"(let-values(((s_53)"
"(cdr"
" s_49)))"
"(let-values(((s_54)"
"(if(syntax?$1"
" s_53)"
"(syntax-e$1"
" s_53)"
" s_53)))"
"(if(pair?"
" s_54)"
"(let-values(((body36_55)"
"(let-values(((s_56)"
"(car"
" s_54)))"
" s_56))"
"(()"
"(let-values(((s_57)"
"(cdr"
" s_54)))"
"(let-values(((s_58)"
"(if(syntax?$1"
" s_57)"
"(syntax-e$1"
" s_57)"
" s_57)))"
"(if(null?"
" s_58)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_39))))))"
"(values"
" body36_55))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_39))))))"
"(values"
" formals34_50"
" body35_51))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_39))))))"
"(values"
" lambda31_44"
" formals32_45"
" body33_46))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_39)))))"
"(values"
" #t"
" lambda28_40"
" formals29_41"
" body30_42)))"
"(values #f #f #f #f)))))"
"(add-lambda-properties"
"(correlate*"
" s_17"
"(list*"
" 'lambda"
"(compile-lambda formals29_24 body30_25 cctx_10)))"
" name_11"
" s_17)))"
"(let-values()"
"(correlate* s_17(list 'quote(syntax->datum$1 s_17))))))"
"(let-values()"
"(if result-used?_12"
"(let-values()"
"(let-values(((ok?_59 case-lambda37_60 formals38_61 body39_62)"
"(let-values(((s_75) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_76) s_75))"
"(let-values(((case-lambda37_77"
" formals38_78"
" body39_79)"
"(let-values(((s_80)"
"(if(syntax?$1"
" s_75)"
"(syntax-e$1"
" s_75)"
" s_75)))"
"(if(pair? s_80)"
"(let-values(((case-lambda40_81)"
"(let-values(((s_84)"
"(car"
" s_80)))"
" s_84))"
"((formals41_82"
" body42_83)"
"(let-values(((s_85)"
"(cdr"
" s_80)))"
"(let-values(((s_86)"
"(if(syntax?$1"
" s_85)"
"(syntax-e$1"
" s_85)"
" s_85)))"
"(let-values(((flat-s_87)"
"(to-syntax-list.1"
" s_86)))"
"(if(not"
" flat-s_87)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_76))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_76))"
"(let-values()"
"(let-values(((formals_88"
" body_89)"
"(let-values(((lst_90)"
" flat-s_87))"
"(begin"
"(if(list?"
" lst_90)"
"(void)"
"(let-values()"
"(in-list"
" lst_90)))"
"((letrec-values(((for-loop_91)"
"(lambda(formals_92"
" body_93"
" lst_94)"
"(if(pair?"
" lst_94)"
"(let-values(((s_95)"
"(unsafe-car"
" lst_94)))"
"(if #t"
"(let-values(((formals_96"
" body_97)"
"(let-values(((formals_98)"
" formals_92)"
"((body_99)"
" body_93))"
"(let-values(((formals_100"
" body_101)"
"(let-values()"
"(let-values(((formals46_102"
" body47_103)"
"(let-values()"
"(let-values(((s_104)"
"(if(syntax?$1"
" s_95)"
"(syntax-e$1"
" s_95)"
" s_95)))"
"(if(pair?"
" s_104)"
"(let-values(((formals43_105)"
"(let-values(((s_107)"
"(car"
" s_104)))"
" s_107))"
"((body44_106)"
"(let-values(((s_108)"
"(cdr"
" s_104)))"
"(let-values(((s_109)"
"(if(syntax?$1"
" s_108)"
"(syntax-e$1"
" s_108)"
" s_108)))"
"(if(pair?"
" s_109)"
"(let-values(((body45_110)"
"(let-values(((s_111)"
"(car"
" s_109)))"
" s_111))"
"(()"
"(let-values(((s_112)"
"(cdr"
" s_109)))"
"(let-values(((s_113)"
"(if(syntax?$1"
" s_112)"
"(syntax-e$1"
" s_112)"
" s_112)))"
"(if(null?"
" s_113)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_76))))))"
"(values"
" body45_110))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_76))))))"
"(values"
" formals43_105"
" body44_106))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_76))))))"
"(values"
"(cons"
" formals46_102"
" formals_98)"
"(cons"
" body47_103"
" body_99))))))"
"(values"
" formals_100"
" body_101)))))"
"(if #t"
"(for-loop_91"
" formals_96"
" body_97"
"(unsafe-cdr"
" lst_94))"
"(values"
" formals_96"
" body_97)))"
"(values"
" formals_92"
" body_93)))"
"(values"
" formals_92"
" body_93)))))"
" for-loop_91)"
" null"
" null"
" lst_90)))))"
"(values"
"(alt-reverse"
" formals_88)"
"(alt-reverse"
" body_89)))))))))))"
"(values"
" case-lambda40_81"
" formals41_82"
" body42_83))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_76)))))"
"(values"
" #t"
" case-lambda37_77"
" formals38_78"
" body39_79)))"
"(values #f #f #f #f)))))"
"(add-lambda-properties"
"(correlate*"
" s_17"
"(list*"
" 'case-lambda"
"(alt-reverse"
"(let-values(((lst_114) formals38_61)"
"((lst_115) body39_62))"
"(begin"
"(if(list? lst_114)"
"(void)"
"(let-values()(in-list lst_114)))"
"(if(list? lst_115)"
"(void)"
"(let-values()(in-list lst_115)))"
"((letrec-values(((for-loop_116)"
"(lambda(fold-var_117"
" lst_118"
" lst_119)"
"(if(if(pair? lst_118)"
"(pair? lst_119)"
" #f)"
"(let-values(((formals_120)"
"(unsafe-car"
" lst_118))"
"((body_121)"
"(unsafe-car"
" lst_119)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123)"
" fold-var_117))"
"(let-values(((fold-var_124)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
" formals_120"
" body_121"
" cctx_10))"
" fold-var_123))))"
"(values"
" fold-var_124)))))"
"(if(if #t #t #f)"
"(for-loop_116"
" fold-var_122"
"(unsafe-cdr lst_118)"
"(unsafe-cdr lst_119))"
" fold-var_122))"
" fold-var_117))"
" fold-var_117))))"
" for-loop_116)"
" null"
" lst_114"
" lst_115))))))"
" name_11"
" s_17)))"
"(let-values()"
"(correlate* s_17(list 'quote(syntax->datum$1 s_17)))))))"
"(if(unsafe-fx< index_21 6)"
"(let-values()"
"(let-values(((ok?_125 #%app48_126 rest49_127)"
"(let-values(((s_139) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_140) s_139))"
"(let-values(((#%app48_141 rest49_142)"
"(let-values(((s_143)"
"(if(syntax?$1"
" s_139)"
"(syntax-e$1"
" s_139)"
" s_139)))"
"(if(pair? s_143)"
"(let-values(((#%app50_144)"
"(let-values(((s_146)"
"(car"
" s_143)))"
" s_146))"
"((rest51_145)"
"(let-values(((s_147)"
"(cdr"
" s_143)))"
" s_147)))"
"(values"
" #%app50_144"
" rest51_145))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_140)))))"
"(values #t #%app48_141 rest49_142)))"
"(values #f #f #f)))))"
"(let-values(((es_138)"
"(let-values(((es_148) rest49_127))"
"(if(syntax?$1 es_148)"
"(syntax->list$1(syntax-disarm$1 es_148))"
" es_148))))"
"(alt-reverse"
"(let-values(((lst_149) es_138))"
"(begin"
"(if(list? lst_149)"
"(void)"
"(let-values()(in-list lst_149)))"
"((letrec-values(((for-loop_150)"
"(lambda(fold-var_151 lst_152)"
"(if(pair? lst_152)"
"(let-values(((s_153)"
"(unsafe-car"
" lst_152)))"
"(if #t"
"(let-values(((fold-var_154)"
"(let-values(((fold-var_155)"
" fold-var_151))"
"(let-values(((fold-var_156)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_13"
" s_153"
" #f"
" #t))"
" fold-var_155))))"
"(values"
" fold-var_156)))))"
"(if #t"
"(for-loop_150"
" fold-var_154"
"(unsafe-cdr lst_152))"
" fold-var_154))"
" fold-var_151))"
" fold-var_151))))"
" for-loop_150)"
" null"
" lst_149)))))))"
"(if(unsafe-fx< index_21 7)"
"(let-values()"
"(let-values(((ok?_157 if52_158 tst53_159 thn54_160 els55_161)"
"(let-values(((s_176) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_177) s_176))"
"(let-values(((if52_178"
" tst53_179"
" thn54_180"
" els55_181)"
"(let-values(((s_182)"
"(if(syntax?$1"
" s_176)"
"(syntax-e$1"
" s_176)"
" s_176)))"
"(if(pair? s_182)"
"(let-values(((if56_183)"
"(let-values(((s_187)"
"(car"
" s_182)))"
" s_187))"
"((tst57_184"
" thn58_185"
" els59_186)"
"(let-values(((s_188)"
"(cdr"
" s_182)))"
"(let-values(((s_189)"
"(if(syntax?$1"
" s_188)"
"(syntax-e$1"
" s_188)"
" s_188)))"
"(if(pair?"
" s_189)"
"(let-values(((tst60_190)"
"(let-values(((s_193)"
"(car"
" s_189)))"
" s_193))"
"((thn61_191"
" els62_192)"
"(let-values(((s_194)"
"(cdr"
" s_189)))"
"(let-values(((s_195)"
"(if(syntax?$1"
" s_194)"
"(syntax-e$1"
" s_194)"
" s_194)))"
"(if(pair?"
" s_195)"
"(let-values(((thn63_196)"
"(let-values(((s_198)"
"(car"
" s_195)))"
" s_198))"
"((els64_197)"
"(let-values(((s_199)"
"(cdr"
" s_195)))"
"(let-values(((s_200)"
"(if(syntax?$1"
" s_199)"
"(syntax-e$1"
" s_199)"
" s_199)))"
"(if(pair?"
" s_200)"
"(let-values(((els65_201)"
"(let-values(((s_202)"
"(car"
" s_200)))"
" s_202))"
"(()"
"(let-values(((s_203)"
"(cdr"
" s_200)))"
"(let-values(((s_204)"
"(if(syntax?$1"
" s_203)"
"(syntax-e$1"
" s_203)"
" s_203)))"
"(if(null?"
" s_204)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_177))))))"
"(values"
" els65_201))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_177))))))"
"(values"
" thn63_196"
" els64_197))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_177))))))"
"(values"
" tst60_190"
" thn61_191"
" els62_192))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_177))))))"
"(values"
" if56_183"
" tst57_184"
" thn58_185"
" els59_186))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_177)))))"
"(values"
" #t"
" if52_178"
" tst53_179"
" thn54_180"
" els55_181)))"
"(values #f #f #f #f #f)))))"
"(correlate*"
" s_17"
"(list"
" 'if"
"(compile_13 tst53_159 #f #f)"
"(compile_13 thn54_160 name_11 result-used?_12)"
"(compile_13 els55_161 name_11 result-used?_12)))))"
"(let-values()"
"(let-values(((ok?_205 if66_206 key67_207 val68_208 body69_209)"
"(let-values(((s_224) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_225) s_224))"
"(let-values(((if66_226"
" key67_227"
" val68_228"
" body69_229)"
"(let-values(((s_230)"
"(if(syntax?$1"
" s_224)"
"(syntax-e$1"
" s_224)"
" s_224)))"
"(if(pair? s_230)"
"(let-values(((if70_231)"
"(let-values(((s_235)"
"(car"
" s_230)))"
" s_235))"
"((key71_232"
" val72_233"
" body73_234)"
"(let-values(((s_236)"
"(cdr"
" s_230)))"
"(let-values(((s_237)"
"(if(syntax?$1"
" s_236)"
"(syntax-e$1"
" s_236)"
" s_236)))"
"(if(pair?"
" s_237)"
"(let-values(((key74_238)"
"(let-values(((s_241)"
"(car"
" s_237)))"
" s_241))"
"((val75_239"
" body76_240)"
"(let-values(((s_242)"
"(cdr"
" s_237)))"
"(let-values(((s_243)"
"(if(syntax?$1"
" s_242)"
"(syntax-e$1"
" s_242)"
" s_242)))"
"(if(pair?"
" s_243)"
"(let-values(((val77_244)"
"(let-values(((s_246)"
"(car"
" s_243)))"
" s_246))"
"((body78_245)"
"(let-values(((s_247)"
"(cdr"
" s_243)))"
"(let-values(((s_248)"
"(if(syntax?$1"
" s_247)"
"(syntax-e$1"
" s_247)"
" s_247)))"
"(if(pair?"
" s_248)"
"(let-values(((body79_249)"
"(let-values(((s_250)"
"(car"
" s_248)))"
" s_250))"
"(()"
"(let-values(((s_251)"
"(cdr"
" s_248)))"
"(let-values(((s_252)"
"(if(syntax?$1"
" s_251)"
"(syntax-e$1"
" s_251)"
" s_251)))"
"(if(null?"
" s_252)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_225))))))"
"(values"
" body79_249))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_225))))))"
"(values"
" val77_244"
" body78_245))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_225))))))"
"(values"
" key74_238"
" val75_239"
" body76_240))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_225))))))"
"(values"
" if70_231"
" key71_232"
" val72_233"
" body73_234))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_225)))))"
"(values"
" #t"
" if66_226"
" key67_227"
" val68_228"
" body69_229)))"
"(values #f #f #f #f #f)))))"
"(correlate*"
" s_17"
"(list"
" 'with-continuation-mark"
"(compile_13 key67_207 #f #t)"
"(compile_13 val68_208 #f #t)"
"(compile_13 body69_209 name_11 result-used?_12)))))))))"
"(if(unsafe-fx< index_21 12)"
"(if(unsafe-fx< index_21 9)"
"(let-values()"
"(let-values(((ok?_253 begin80_254 e81_255)"
"(let-values(((s_267) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_268) s_267))"
"(let-values(((begin80_269 e81_270)"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_267)"
"(syntax-e$1 s_267)"
" s_267)))"
"(if(pair? s_271)"
"(let-values(((begin82_272)"
"(let-values(((s_274)"
"(car"
" s_271)))"
" s_274))"
"((e83_273)"
"(let-values(((s_275)"
"(cdr"
" s_271)))"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_275)"
"(syntax-e$1"
" s_275)"
" s_275)))"
"(let-values(((flat-s_277)"
"(to-syntax-list.1"
" s_276)))"
"(if(not"
" flat-s_277)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_268))"
"(if(null?"
" flat-s_277)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_268))"
"(let-values()"
" flat-s_277))))))))"
"(values"
" begin82_272"
" e83_273))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_268)))))"
"(values #t begin80_269 e81_270)))"
"(values #f #f #f)))))"
"(let-values(((used-pos_266)"
"(let-values(((tmp_278) core-sym_19))"
"(if(equal? tmp_278 'begin0)"
"(let-values() 0)"
"(let-values()(sub1(length e81_255)))))))"
"(correlate*"
" s_17"
"(list*"
" core-sym_19"
"(alt-reverse"
"(let-values(((lst_279) e81_255)((start_280) 0))"
"(begin"
"(if(list? lst_279)"
"(void)"
"(let-values()(in-list lst_279)))"
"(if(exact-nonnegative-integer? start_280)"
"(void)"
"(let-values()(in-naturals start_280)))"
"((letrec-values(((for-loop_281)"
"(lambda(fold-var_282 lst_283 pos_284)"
"(if(if(pair? lst_283) #t #f)"
"(let-values(((e_285)"
"(unsafe-car lst_283))"
"((i_286) pos_284))"
"(if(if #t #t #f)"
"(let-values(((fold-var_287)"
"(let-values(((fold-var_288)"
" fold-var_282))"
"(let-values(((fold-var_289)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_290)"
"(="
" i_286"
" used-pos_266)))"
"(compile_13"
" e_285"
"(if used?_290"
" name_11"
" #f)"
" used?_290)))"
" fold-var_288))))"
"(values"
" fold-var_289)))))"
"(if(if #t #t #f)"
"(for-loop_281"
" fold-var_287"
"(unsafe-cdr lst_283)"
"(+ pos_284 1))"
" fold-var_287))"
" fold-var_282))"
" fold-var_282))))"
" for-loop_281)"
" null"
" lst_279"
" start_280)))))))))"
"(if(unsafe-fx< index_21 10)"
"(let-values()"
"(let-values(((ok?_291 set!84_292 id85_293 rhs86_294)"
"(let-values(((s_307) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_308) s_307))"
"(let-values(((set!84_309 id85_310 rhs86_311)"
"(let-values(((s_312)"
"(if(syntax?$1"
" s_307)"
"(syntax-e$1"
" s_307)"
" s_307)))"
"(if(pair? s_312)"
"(let-values(((set!87_313)"
"(let-values(((s_316)"
"(car"
" s_312)))"
" s_316))"
"((id88_314"
" rhs89_315)"
"(let-values(((s_317)"
"(cdr"
" s_312)))"
"(let-values(((s_318)"
"(if(syntax?$1"
" s_317)"
"(syntax-e$1"
" s_317)"
" s_317)))"
"(if(pair?"
" s_318)"
"(let-values(((id90_319)"
"(let-values(((s_321)"
"(car"
" s_318)))"
"(if(let-values(((or-part_322)"
"(if(syntax?$1"
" s_321)"
"(symbol?"
"(syntax-e$1"
" s_321))"
" #f)))"
"(if or-part_322"
" or-part_322"
"(symbol?"
" s_321)))"
" s_321"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"not an identifier\""
" orig-s_308"
" s_321))))"
"((rhs91_320)"
"(let-values(((s_323)"
"(cdr"
" s_318)))"
"(let-values(((s_324)"
"(if(syntax?$1"
" s_323)"
"(syntax-e$1"
" s_323)"
" s_323)))"
"(if(pair?"
" s_324)"
"(let-values(((rhs92_325)"
"(let-values(((s_326)"
"(car"
" s_324)))"
" s_326))"
"(()"
"(let-values(((s_327)"
"(cdr"
" s_324)))"
"(let-values(((s_328)"
"(if(syntax?$1"
" s_327)"
"(syntax-e$1"
" s_327)"
" s_327)))"
"(if(null?"
" s_328)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_308))))))"
"(values"
" rhs92_325))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_308))))))"
"(values"
" id90_319"
" rhs91_320))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_308))))))"
"(values"
" set!87_313"
" id88_314"
" rhs89_315))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_308)))))"
"(values #t set!84_309 id85_310 rhs86_311)))"
"(values #f #f #f #f)))))"
"(correlate*"
" s_17"
"(let-values(((...der/compile/expr.rkt:100:27_329)"
" compile-identifier27.1)"
"((temp93_330) id85_293)"
"((cctx94_331) cctx_10)"
"((temp95_332)(compile_13 rhs86_294 id85_293 #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1"
" temp95_332"
" #t"
" #f"
" #f"
" temp93_330"
" cctx94_331)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:100:27_329"
" keyword-procedure-extract"
" '(#:set-to)"
" 4)"
" '(#:set-to)"
"(list temp95_332)"
" temp93_330"
" cctx94_331))))))"
"(if(unsafe-fx< index_21 11)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:103:9_333)"
" compile-let18.1)"
"((core-sym96_334) core-sym_19)"
"((s97_335) s_17)"
"((cctx98_336) cctx_10)"
"((name99_337) name_11)"
"((temp100_338) #f)"
"((result-used?101_339) result-used?_12))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-let18.1))"
"(compile-let16.1"
" temp100_338"
" core-sym96_334"
" s97_335"
" cctx98_336"
" name99_337"
" result-used?101_339)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:103:9_333"
" keyword-procedure-extract"
" '(#:rec?)"
" 7)"
" '(#:rec?)"
"(list temp100_338)"
" core-sym96_334"
" s97_335"
" cctx98_336"
" name99_337"
" result-used?101_339))))"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:105:9_340)"
" compile-let18.1)"
"((core-sym102_341) core-sym_19)"
"((s103_342) s_17)"
"((cctx104_343) cctx_10)"
"((name105_344) name_11)"
"((temp106_345) #f)"
"((result-used?107_346) result-used?_12))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-let18.1))"
"(compile-let16.1"
" temp106_345"
" core-sym102_341"
" s103_342"
" cctx104_343"
" name105_344"
" result-used?107_346)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:105:9_340"
" keyword-procedure-extract"
" '(#:rec?)"
" 7)"
" '(#:rec?)"
"(list temp106_345)"
" core-sym102_341"
" s103_342"
" cctx104_343"
" name105_344"
" result-used?107_346)))))))"
"(if(unsafe-fx< index_21 14)"
"(if(unsafe-fx< index_21 13)"
"(let-values()"
"(let-values(((ok?_347 #%expression108_348 e109_349)"
"(let-values(((s_360) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_361) s_360))"
"(let-values(((#%expression108_362 e109_363)"
"(let-values(((s_364)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(if(pair? s_364)"
"(let-values(((#%expression110_365)"
"(let-values(((s_367)"
"(car"
" s_364)))"
" s_367))"
"((e111_366)"
"(let-values(((s_368)"
"(cdr"
" s_364)))"
"(let-values(((s_369)"
"(if(syntax?$1"
" s_368)"
"(syntax-e$1"
" s_368)"
" s_368)))"
"(if(pair?"
" s_369)"
"(let-values(((e112_370)"
"(let-values(((s_371)"
"(car"
" s_369)))"
" s_371))"
"(()"
"(let-values(((s_372)"
"(cdr"
" s_369)))"
"(let-values(((s_373)"
"(if(syntax?$1"
" s_372)"
"(syntax-e$1"
" s_372)"
" s_372)))"
"(if(null?"
" s_373)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_361))))))"
"(values"
" e112_370))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_361))))))"
"(values"
" #%expression110_365"
" e111_366))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_361)))))"
"(values #t #%expression108_362 e109_363)))"
"(values #f #f #f)))))"
"(compile_13 e109_349 name_11 result-used?_12)))"
"(let-values()"
"(let-values(((ok?_374 quote113_375 datum114_376)"
"(let-values(((s_388) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_389) s_388))"
"(let-values(((quote113_390 datum114_391)"
"(let-values(((s_392)"
"(if(syntax?$1"
" s_388)"
"(syntax-e$1"
" s_388)"
" s_388)))"
"(if(pair? s_392)"
"(let-values(((quote115_393)"
"(let-values(((s_395)"
"(car"
" s_392)))"
" s_395))"
"((datum116_394)"
"(let-values(((s_396)"
"(cdr"
" s_392)))"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_396)"
"(syntax-e$1"
" s_396)"
" s_396)))"
"(if(pair?"
" s_397)"
"(let-values(((datum117_398)"
"(let-values(((s_399)"
"(car"
" s_397)))"
" s_399))"
"(()"
"(let-values(((s_400)"
"(cdr"
" s_397)))"
"(let-values(((s_401)"
"(if(syntax?$1"
" s_400)"
"(syntax-e$1"
" s_400)"
" s_400)))"
"(if(null?"
" s_401)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_389))))))"
"(values"
" datum117_398))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_389))))))"
"(values"
" quote115_393"
" datum116_394))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_389)))))"
"(values #t quote113_390 datum114_391)))"
"(values #f #f #f)))))"
"(let-values(((datum_387)(syntax->datum$1 datum114_376)))"
"(if(self-quoting-in-linklet? datum_387)"
"(let-values()(correlate* s_17 datum_387))"
"(let-values()"
"(correlate* s_17(list 'quote datum_387))))))))"
"(if(unsafe-fx< index_21 15)"
"(let-values()"
"(let-values(((ok?_402 quote-syntax118_403 datum119_404 _120_405)"
"(let-values(((s_418) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_419) s_418))"
"(let-values(((quote-syntax118_420"
" datum119_421"
" _120_422)"
"(let-values(((s_423)"
"(if(syntax?$1"
" s_418)"
"(syntax-e$1"
" s_418)"
" s_418)))"
"(if(pair? s_423)"
"(let-values(((quote-syntax121_424)"
"(let-values(((s_427)"
"(car"
" s_423)))"
" s_427))"
"((datum122_425"
" _123_426)"
"(let-values(((s_428)"
"(cdr"
" s_423)))"
"(let-values(((s_429)"
"(if(syntax?$1"
" s_428)"
"(syntax-e$1"
" s_428)"
" s_428)))"
"(if(pair?"
" s_429)"
"(let-values(((datum124_430)"
"(let-values(((s_432)"
"(car"
" s_429)))"
" s_432))"
"((_125_431)"
"(let-values(((s_433)"
"(cdr"
" s_429)))"
" s_433)))"
"(values"
" datum124_430"
" _125_431))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_419))))))"
"(values"
" quote-syntax121_424"
" datum122_425"
" _123_426))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_419)))))"
"(values"
" #t"
" quote-syntax118_420"
" datum119_421"
" _120_422)))"
"(values #f #f #f #f)))))"
"(if result-used?_12"
"(compile-quote-syntax datum119_404 phase_18 cctx_10)"
"(correlate*"
" s_17"
"(list 'quote(syntax->datum$1 datum119_404))))))"
"(if(unsafe-fx< index_21 16)"
"(let-values()"
"(let-values(((ok?_434 #%variable-reference126_435 id127_436)"
"(let-values(((s_464) s_17))"
"(if(if #t"
"(let-values(((s_465)"
"(if(syntax?$1 s_464)"
"(syntax-e$1 s_464)"
" s_464)))"
"(if(pair? s_465)"
"(if(let-values(((s_466)"
"(car s_465)))"
" #t)"
"(let-values(((s_467)(cdr s_465)))"
"(let-values(((s_468)"
"(if(syntax?$1"
" s_467)"
"(syntax-e$1 s_467)"
" s_467)))"
"(if(pair? s_468)"
"(if(let-values(((s_469)"
"(car"
" s_468)))"
"(if(syntax?$1 s_469)"
"(symbol?"
"(syntax-e$1 s_469))"
" #f))"
"(let-values(((s_470)"
"(cdr s_468)))"
"(let-values(((s_471)"
"(if(syntax?$1"
" s_470)"
"(syntax-e$1"
" s_470)"
" s_470)))"
"(null? s_471)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_472) s_464))"
"(let-values(((#%variable-reference126_473"
" id127_474)"
"(let-values(((s_475)"
"(if(syntax?$1"
" s_464)"
"(syntax-e$1"
" s_464)"
" s_464)))"
"(if #t"
"(let-values(((#%variable-reference128_476)"
"(let-values(((s_478)"
"(car"
" s_475)))"
" s_478))"
"((id129_477)"
"(let-values(((s_479)"
"(cdr"
" s_475)))"
"(let-values(((s_480)"
"(if(syntax?$1"
" s_479)"
"(syntax-e$1"
" s_479)"
" s_479)))"
"(if #t"
"(let-values(((id130_481)"
"(let-values(((s_482)"
"(car"
" s_480)))"
" s_482))"
"(()"
"(let-values(((s_483)"
"(cdr"
" s_480)))"
"(let-values(((s_484)"
"(if(syntax?$1"
" s_483)"
"(syntax-e$1"
" s_483)"
" s_483)))"
"(values)))))"
"(values"
" id130_481))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_472))))))"
"(values"
" #%variable-reference128_476"
" id129_477))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_472)))))"
"(values"
" #t"
" #%variable-reference126_473"
" id127_474)))"
"(values #f #f #f)))))"
"(let-values(((ok?_447"
" #%variable-reference131_448"
" #%top132_449"
" id133_450)"
"(let-values(((s_485) s_17))"
"(if(if(not ok?_434)"
"(let-values(((s_486)"
"(if(syntax?$1 s_485)"
"(syntax-e$1 s_485)"
" s_485)))"
"(if(pair? s_486)"
"(if(let-values(((s_487)"
"(car s_486)))"
" #t)"
"(let-values(((s_488)"
"(cdr s_486)))"
"(let-values(((s_489)"
"(if(syntax?$1"
" s_488)"
"(syntax-e$1"
" s_488)"
" s_488)))"
"(if(pair? s_489)"
"(if(let-values(((s_490)"
"(car"
" s_489)))"
"(let-values(((s_491)"
"(if(syntax?$1"
" s_490)"
"(syntax-e$1"
" s_490)"
" s_490)))"
"(if(pair? s_491)"
"(if(let-values(((s_492)"
"(car"
" s_491)))"
" #t)"
"(let-values(((s_493)"
"(cdr"
" s_491)))"
"(if(syntax?$1"
" s_493)"
"(symbol?"
"(syntax-e$1"
" s_493))"
" #f))"
" #f)"
" #f)))"
"(let-values(((s_494)"
"(cdr"
" s_489)))"
"(let-values(((s_495)"
"(if(syntax?$1"
" s_494)"
"(syntax-e$1"
" s_494)"
" s_494)))"
"(null? s_495)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_496) s_485))"
"(let-values(((#%variable-reference131_497"
" #%top132_498"
" id133_499)"
"(let-values(((s_500)"
"(if(syntax?$1"
" s_485)"
"(syntax-e$1"
" s_485)"
" s_485)))"
"(if #t"
"(let-values(((#%variable-reference134_501)"
"(let-values(((s_504)"
"(car"
" s_500)))"
" s_504))"
"((#%top135_502"
" id136_503)"
"(let-values(((s_505)"
"(cdr"
" s_500)))"
"(let-values(((s_506)"
"(if(syntax?$1"
" s_505)"
"(syntax-e$1"
" s_505)"
" s_505)))"
"(if #t"
"(let-values(((#%top137_507"
" id138_508)"
"(let-values(((s_509)"
"(car"
" s_506)))"
"(let-values(((s_510)"
"(if(syntax?$1"
" s_509)"
"(syntax-e$1"
" s_509)"
" s_509)))"
"(if #t"
"(let-values(((#%top139_511)"
"(let-values(((s_513)"
"(car"
" s_510)))"
" s_513))"
"((id140_512)"
"(let-values(((s_514)"
"(cdr"
" s_510)))"
" s_514)))"
"(values"
" #%top139_511"
" id140_512))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_496)))))"
"(()"
"(let-values(((s_515)"
"(cdr"
" s_506)))"
"(let-values(((s_516)"
"(if(syntax?$1"
" s_515)"
"(syntax-e$1"
" s_515)"
" s_515)))"
"(values)))))"
"(values"
" #%top137_507"
" id138_508))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_496))))))"
"(values"
" #%variable-reference134_501"
" #%top135_502"
" id136_503))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_496)))))"
"(values"
" #t"
" #%variable-reference131_497"
" #%top132_498"
" id133_499)))"
"(values #f #f #f #f)))))"
"(let-values(((id_463)"
"(let-values(((or-part_517)"
"(if ok?_434 id127_436 #f)))"
"(if or-part_517"
" or-part_517"
"(if ok?_447 id133_450 #f)))))"
"(correlate*"
" s_17"
"(if id_463"
"(list"
" '#%variable-reference"
"(let-values(((id141_518) id_463)"
"((cctx142_519) cctx_10))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1"
" #f"
" #f"
" #f"
" #f"
" id141_518"
" cctx142_519)"
"(compile-identifier27.1 id141_518 cctx142_519))))"
" '(#%variable-reference)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_10)"
"(let-values()"
"(error"
"                                                                             \"found `#%top` in a module body:\""
" s_17))"
"(void))"
"(values))))"
"(let-values(((ok?_520 #%top143_521 id144_522)"
"(let-values(((s_533) s_17))"
"(if(if #t #t #f)"
"(let-values(((orig-s_534) s_533))"
"(let-values(((#%top143_535 id144_536)"
"(let-values(((s_537)"
"(if(syntax?$1"
" s_533)"
"(syntax-e$1"
" s_533)"
" s_533)))"
"(if(pair? s_537)"
"(let-values(((#%top145_538)"
"(let-values(((s_540)"
"(car"
" s_537)))"
" s_540))"
"((id146_539)"
"(let-values(((s_541)"
"(cdr"
" s_537)))"
"(if(let-values(((or-part_542)"
"(if(syntax?$1"
" s_541)"
"(symbol?"
"(syntax-e$1"
" s_541))"
" #f)))"
"(if or-part_542"
" or-part_542"
"(symbol?"
" s_541)))"
" s_541"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"not an identifier\""
" orig-s_534"
" s_541)))))"
"(values"
" #%top145_538"
" id146_539))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_534)))))"
"(values #t #%top143_535 id144_536)))"
"(values #f #f #f)))))"
"(let-values(((...der/compile/expr.rkt:135:9_543)"
" compile-identifier27.1)"
"((temp147_544) id144_522)"
"((cctx148_545) cctx_10)"
"((temp149_546) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1"
" #f"
" #f"
" temp149_546"
" #t"
" temp147_544"
" cctx148_545)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:135:9_543"
" keyword-procedure-extract"
" '(#:top?)"
" 4)"
" '(#:top?)"
"(list temp149_546)"
" temp147_544"
" cctx148_545))))))))))))))))"
"(if(identifier? s_17)"
"(let-values()"
"(let-values(((s150_547) s_17)((cctx151_548) cctx_10))"
"(if(variable-reference-constant?(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1 #f #f #f #f s150_547 cctx151_548)"
"(compile-identifier27.1 s150_547 cctx151_548))))"
"                                    (let-values () (error \"bad syntax after expansion:\" s_17))))))))))))))"
"(case-lambda"
"((in-s_549 cctx_550)(compile7_2 in-s_549 cctx_550 #f #f #f #f))"
"((in-s_551 cctx_552 name_553 result-used?2_554)(compile7_2 in-s_551 cctx_552 name_553 result-used?2_554 #t #t))"
"((in-s_555 cctx_556 name1_557)(compile7_2 in-s_555 cctx_556 name1_557 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_558 body_559 cctx_560)"
"(let-values(((phase_561)(compile-context-phase cctx_560)))"
"(let-values(((gen-formals_562)"
"((letrec-values(((loop_563)"
"(lambda(formals_564)"
"(if(identifier? formals_564)"
"(let-values()(local-id->symbol formals_564 phase_561))"
"(if(syntax?$1 formals_564)"
"(let-values()(loop_563(syntax-e$1 formals_564)))"
"(if(pair? formals_564)"
"(let-values()"
"(cons(loop_563(car formals_564))(loop_563(cdr formals_564))))"
"(let-values() null)))))))"
" loop_563)"
" formals_558)))"
"(list gen-formals_562(compile$2 body_559 cctx_560 #f))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_565 inferred-name_566 orig-s_567)"
"(let-values(((name_568)"
"(let-values(((or-part_571) inferred-name_566))"
"(if or-part_571 or-part_571(syntax-property$1 orig-s_567 inferred-name_566)))))"
"(let-values(((named-s_569)"
"(if name_568"
"(correlated-property"
" s_565"
" 'inferred-name"
"(if(syntax?$1 name_568)(syntax-e$1 name_568) name_568))"
" s_565)))"
"(let-values(((as-method_570)(syntax-property$1 orig-s_567 'method-arity-error)))"
"(if as-method_570(correlated-property named-s_569 'method-arity-error as-method_570) named-s_569))))))"
"(define-values"
"(lifted/1.1$18)"
"(make-required"
" 'compile-let"
"(case-lambda"
"((self_572 core-sym_573 s_574 cctx_575 name_576 result-used?_577)"
"(apply missing-kw self_572 core-sym_573 s_574 cctx_575 name_576 result-used?_577 null)))"
" #f"
" #f))"
"(define-values"
"(compile-let16.1)"
"(lambda(rec?9_578 core-sym11_579 s12_580 cctx13_581 name14_582 result-used?15_583)"
"(let-values(((core-sym_584) core-sym11_579))"
"(let-values(((s_585) s12_580))"
"(let-values(((cctx_586) cctx13_581))"
"(let-values(((name_587) name14_582))"
"(let-values(((rec?_588) rec?9_578))"
"(let-values(((result-used?_589) result-used?15_583))"
"(let-values()"
"(let-values(((rec?_590)(eq? core-sym_584 'letrec-values)))"
"(let-values(((ok?_591 let-values152_592 id153_593 rhs154_594 body155_595)"
"(let-values(((s_613) s_585))"
"(if(if #t #t #f)"
"(let-values(((orig-s_614) s_613))"
"(let-values(((let-values152_615 id153_616 rhs154_617 body155_618)"
"(let-values(((s_619)"
"(if(syntax?$1 s_613)(syntax-e$1 s_613) s_613)))"
"(if(pair? s_619)"
"(let-values(((let-values156_620)"
"(let-values(((s_624)(car s_619))) s_624))"
"((id157_621 rhs158_622 body159_623)"
"(let-values(((s_625)(cdr s_619)))"
"(let-values(((s_626)"
"(if(syntax?$1 s_625)"
"(syntax-e$1 s_625)"
" s_625)))"
"(if(pair? s_626)"
"(let-values(((id160_627 rhs161_628)"
"(let-values(((s_630)"
"(car s_626)))"
"(let-values(((s_631)"
"(if(syntax?$1"
" s_630)"
"(syntax-e$1"
" s_630)"
" s_630)))"
"(let-values(((flat-s_632)"
"(to-syntax-list.1"
" s_631)))"
"(if(not flat-s_632)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_614))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_614))"
"(let-values()"
"(let-values(((id_633"
" rhs_634)"
"(let-values(((lst_635)"
" flat-s_632))"
"(begin"
"(if(list?"
" lst_635)"
"(void)"
"(let-values()"
"(in-list"
" lst_635)))"
"((letrec-values(((for-loop_636)"
"(lambda(id_637"
" rhs_638"
" lst_639)"
"(if(pair?"
" lst_639)"
"(let-values(((s_640)"
"(unsafe-car"
" lst_639)))"
"(if #t"
"(let-values(((id_641"
" rhs_642)"
"(let-values(((id_643)"
" id_637)"
"((rhs_644)"
" rhs_638))"
"(let-values(((id_645"
" rhs_646)"
"(let-values()"
"(let-values(((id167_647"
" rhs168_648)"
"(let-values()"
"(let-values(((s_649)"
"(if(syntax?$1"
" s_640)"
"(syntax-e$1"
" s_640)"
" s_640)))"
"(if(pair?"
" s_649)"
"(let-values(((id163_650)"
"(let-values(((s_652)"
"(car"
" s_649)))"
"(let-values(((s_653)"
"(if(syntax?$1"
" s_652)"
"(syntax-e$1"
" s_652)"
" s_652)))"
"(let-values(((flat-s_654)"
"(to-syntax-list.1"
" s_653)))"
"(if(not"
" flat-s_654)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_614))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_614))"
"(let-values()"
"(let-values(((id_655)"
"(let-values(((lst_656)"
" flat-s_654))"
"(begin"
"(if(list?"
" lst_656)"
"(void)"
"(let-values()"
"(in-list"
" lst_656)))"
"((letrec-values(((for-loop_657)"
"(lambda(id_658"
" lst_659)"
"(if(pair?"
" lst_659)"
"(let-values(((s_660)"
"(unsafe-car"
" lst_659)))"
"(if #t"
"(let-values(((id_661)"
"(let-values(((id_662)"
" id_658))"
"(let-values(((id_663)"
"(let-values()"
"(let-values(((id169_664)"
"(let-values()"
"(if(let-values(((or-part_665)"
"(if(syntax?$1"
" s_660)"
"(symbol?"
"(syntax-e$1"
" s_660))"
" #f)))"
"(if or-part_665"
" or-part_665"
"(symbol?"
" s_660)))"
" s_660"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_614"
" s_660)))))"
"(cons"
" id169_664"
" id_662)))))"
"(values"
" id_663)))))"
"(if #t"
"(for-loop_657"
" id_661"
"(unsafe-cdr"
" lst_659))"
" id_661))"
" id_658))"
" id_658))))"
" for-loop_657)"
" null"
" lst_656)))))"
"(alt-reverse"
" id_655)))))))))"
"((rhs164_651)"
"(let-values(((s_666)"
"(cdr"
" s_649)))"
"(let-values(((s_667)"
"(if(syntax?$1"
" s_666)"
"(syntax-e$1"
" s_666)"
" s_666)))"
"(if(pair?"
" s_667)"
"(let-values(((rhs165_668)"
"(let-values(((s_669)"
"(car"
" s_667)))"
" s_669))"
"(()"
"(let-values(((s_670)"
"(cdr"
" s_667)))"
"(let-values(((s_671)"
"(if(syntax?$1"
" s_670)"
"(syntax-e$1"
" s_670)"
" s_670)))"
"(if(null?"
" s_671)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_614))))))"
"(values"
" rhs165_668))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_614))))))"
"(values"
" id163_650"
" rhs164_651))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_614))))))"
"(values"
"(cons"
" id167_647"
" id_643)"
"(cons"
" rhs168_648"
" rhs_644))))))"
"(values"
" id_645"
" rhs_646)))))"
"(if #t"
"(for-loop_636"
" id_641"
" rhs_642"
"(unsafe-cdr"
" lst_639))"
"(values"
" id_641"
" rhs_642)))"
"(values"
" id_637"
" rhs_638)))"
"(values"
" id_637"
" rhs_638)))))"
" for-loop_636)"
" null"
" null"
" lst_635)))))"
"(values"
"(alt-reverse"
" id_633)"
"(alt-reverse"
" rhs_634))))))))))"
"((body162_629)"
"(let-values(((s_672)"
"(cdr s_626)))"
"(let-values(((s_673)"
"(if(syntax?$1"
" s_672)"
"(syntax-e$1"
" s_672)"
" s_672)))"
"(if(pair? s_673)"
"(let-values(((body166_674)"
"(let-values(((s_675)"
"(car"
" s_673)))"
" s_675))"
"(()"
"(let-values(((s_676)"
"(cdr"
" s_673)))"
"(let-values(((s_677)"
"(if(syntax?$1"
" s_676)"
"(syntax-e$1"
" s_676)"
" s_676)))"
"(if(null?"
" s_677)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_614))))))"
"(values"
" body166_674))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_614))))))"
"(values"
" id160_627"
" rhs161_628"
" body162_629))"
"(raise-syntax-error$1"
" #f"
"                                                                               \"bad syntax\""
" orig-s_614))))))"
"(values let-values156_620 id157_621 rhs158_622 body159_623))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_614)))))"
"(values #t let-values152_615 id153_616 rhs154_617 body155_618)))"
"(values #f #f #f #f #f)))))"
"(let-values(((phase_610)(compile-context-phase cctx_586)))"
"(let-values(((idss_611) id153_593))"
"(let-values(((symss_612)"
"(alt-reverse"
"(let-values(((lst_678) idss_611))"
"(begin"
"(if(list? lst_678)(void)(let-values()(in-list lst_678)))"
"((letrec-values(((for-loop_679)"
"(lambda(fold-var_680 lst_681)"
"(if(pair? lst_681)"
"(let-values(((ids_682)(unsafe-car lst_681)))"
"(if #t"
"(let-values(((fold-var_683)"
"(let-values(((fold-var_684)"
" fold-var_680))"
"(let-values(((fold-var_685)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_686)"
" ids_682))"
"(begin"
"(if(list?"
" lst_686)"
"(void)"
"(let-values()"
"(in-list"
" lst_686)))"
"((letrec-values(((for-loop_687)"
"(lambda(fold-var_688"
" lst_689)"
"(if(pair?"
" lst_689)"
"(let-values(((id_690)"
"(unsafe-car"
" lst_689)))"
"(if #t"
"(let-values(((fold-var_691)"
"(let-values(((fold-var_692)"
" fold-var_688))"
"(let-values(((fold-var_693)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_694)"
"(local-id->symbol"
" id_690"
" phase_610)))"
"(if rec?_590"
"(add-undefined-error-name-property"
" sym_694"
" id_690)"
" sym_694)))"
" fold-var_692))))"
"(values"
" fold-var_693)))))"
"(if #t"
"(for-loop_687"
" fold-var_691"
"(unsafe-cdr"
" lst_689))"
" fold-var_691))"
" fold-var_688))"
" fold-var_688))))"
" for-loop_687)"
" null"
" lst_686)))))"
" fold-var_684))))"
"(values fold-var_685)))))"
"(if #t"
"(for-loop_679"
" fold-var_683"
"(unsafe-cdr lst_681))"
" fold-var_683))"
" fold-var_680))"
" fold-var_680))))"
" for-loop_679)"
" null"
" lst_678))))))"
"(correlate*"
" s_585"
"(list"
" core-sym_584"
"(alt-reverse"
"(let-values(((lst_695) symss_612)((lst_696) idss_611)((lst_697) rhs154_594))"
"(begin"
"(if(list? lst_695)(void)(let-values()(in-list lst_695)))"
"(if(list? lst_696)(void)(let-values()(in-list lst_696)))"
"(if(list? lst_697)(void)(let-values()(in-list lst_697)))"
"((letrec-values(((for-loop_698)"
"(lambda(fold-var_699 lst_700 lst_701 lst_702)"
"(if(if(pair? lst_700)"
"(if(pair? lst_701)(pair? lst_702) #f)"
" #f)"
"(let-values(((syms_703)(unsafe-car lst_700))"
"((ids_704)(unsafe-car lst_701))"
"((rhs_705)(unsafe-car lst_702)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_706)"
"(let-values(((fold-var_707) fold-var_699))"
"(let-values(((fold-var_708)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" syms_703"
"(compile$2"
" rhs_705"
" cctx_586"
"(if(="
" 1"
"(length ids_704))"
"(car ids_704)"
" #f))))"
" fold-var_707))))"
"(values fold-var_708)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_698"
" fold-var_706"
"(unsafe-cdr lst_700)"
"(unsafe-cdr lst_701)"
"(unsafe-cdr lst_702))"
" fold-var_706))"
" fold-var_699))"
" fold-var_699))))"
" for-loop_698)"
" null"
" lst_695"
" lst_696"
" lst_697))))"
"(compile$2 body155_595 cctx_586 name_587 result-used?_589)))))))))))))))))"
"(define-values"
"(unpack17.1$2)"
"(lambda(given-kws_709 given-args_710 core-sym11_711 s12_712 cctx13_713 name14_714 result-used?15_715)"
"(let-values(((rec?9_716)(car given-args_710)))"
"(compile-let16.1 rec?9_716 core-sym11_711 s12_712 cctx13_713 name14_714 result-used?15_715))))"
"(define-values"
"(compile-let18.1)"
"(lifted/1.1$18"
"(lambda(given-kws_717 given-argc_718)"
"(if(= given-argc_718 7)"
"(let-values(((l2_719) given-kws_717))"
"(if(pair? l2_719)(if(eq?(car l2_719) '#:rec?)(null?(cdr l2_719)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_720 given-args_721 core-sym_722 s_723 cctx_724 name_725 result-used?_726)"
"(unpack17.1$2 given-kws_720 given-args_721 core-sym_722 s_723 cctx_724 name_725 result-used?_726)))"
" '(#:rec?)"
" '(#:rec?)))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_727 orig-id_728)"
"(let-values(((id_729)(correlate* orig-id_728 sym_727)))"
"(correlated-property"
" id_729"
" 'undefined-error-name"
"(let-values(((or-part_730)(syntax-property$1 orig-id_728 'undefined-error-name)))"
"(if or-part_730 or-part_730(syntax-e$1 orig-id_728)))))))"
"(define-values"
"(compile-identifier25.1)"
"(lambda(set-to19_731 set-to21_732 top?20_733 top?22_734 s23_735 cctx24_736)"
"(let-values(((s_737) s23_735))"
"(let-values(((cctx_738) cctx24_736))"
"(let-values(((rhs_739)(if set-to21_732 set-to19_731 #f)))"
"(let-values(((top?_740)(if top?22_734 top?20_733 #f)))"
"(let-values()"
"(let-values(((phase_741)(compile-context-phase cctx_738)))"
"(let-values(((normal-b_742)"
"(let-values(((s170_745) s_737)((phase171_746) phase_741))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f s170_745 phase171_746)"
"(resolve+shift15.1 s170_745 phase171_746)))))"
"(let-values(((b_743)"
"(let-values(((or-part_747) normal-b_742))"
"(if or-part_747"
" or-part_747"
"(let-values(((temp172_748)(compile-context-self cctx_738))"
"((phase173_749) phase_741)"
"((temp174_750)(syntax-e$1 s_737)))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp172_748"
" phase173_749"
" temp174_750)"
"(make-module-binding22.1 temp172_748 phase173_749 temp174_750)))))))"
"(let-values(((sym_744)"
"(if(local-binding? b_743)"
"(let-values()"
"(let-values(((sym_751)(local-key->symbol(local-binding-key b_743))))"
"(begin"
"(if sym_751"
"(void)"
"                                            (let-values () (error \"missing a binding after expansion:\" s_737)))"
" sym_751)))"
"(if(module-binding? b_743)"
"(let-values()"
"(let-values(((mpi_752)"
"(if top?_740"
"(compile-context-self cctx_738)"
"(module-binding-module b_743))))"
"(let-values(((mod-name_753)(1/module-path-index-resolve mpi_752)))"
"(let-values(((ns_754)(compile-context-namespace cctx_738)))"
"(let-values(((mod_755)(namespace->module ns_754 mod-name_753)))"
"(if(if mod_755(module-primitive? mod_755) #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(zero?(module-binding-phase b_743))"
"(void)"
"(let-values()"
"(error"
"                                                                         \"internal error: non-zero phase for a primitive\")))"
"(values))))"
"(let-values((()"
"(begin"
"(if rhs_739"
"(let-values()"
"(error"
"                                                                           \"internal error: cannot assign to a primitive:\""
" s_737))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ns175_757) ns_754)"
"((mpi176_758) mpi_752)"
"((temp177_759) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns175_757"
" mpi176_758"
" temp177_759)"
"(namespace-module-instantiate!95.1"
" ns175_757"
" mpi176_758"
" temp177_759)))"
"(values))))"
"(let-values(((m-ns_756)"
"(let-values(((ns178_760) ns_754)"
"((mod-name179_761) mod-name_753)"
"((temp180_762) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns178_760"
" mod-name179_761"
" temp180_762)"
"(namespace->module-namespace81.1"
" ns178_760"
" mod-name179_761"
" temp180_762)))))"
"(module-binding-sym b_743))))))"
"(if(eq? mpi_752(compile-context-module-self cctx_738))"
"(let-values()"
"(let-values(((header_763)(compile-context-header cctx_738)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_763)"
"(module-binding-sym b_743))))"
"(let-values()"
"(let-values(((temp181_764)(compile-context-header cctx_738))"
"((mpi182_765) mpi_752)"
"((temp183_766)(module-binding-phase b_743))"
"((temp184_767)(module-binding-sym b_743))"
"((temp185_768)"
"(let-values(((or-part_769)"
"(module-binding-extra-inspector"
" b_743)))"
"(if or-part_769"
" or-part_769"
"(syntax-inspector s_737)))))"
"(if(variable-reference-constant?"
"(#%variable-reference register-required-variable-use!20.1))"
"(register-required-variable-use!18.1"
" #f"
" #f"
" temp181_764"
" mpi182_765"
" temp183_766"
" temp184_767"
" temp185_768)"
"(register-required-variable-use!20.1"
" temp181_764"
" mpi182_765"
" temp183_766"
" temp184_767"
" temp185_768)))))))))))"
"                                      (let-values () (error \"not a reference to a module or local binding:\" s_737))))))"
"(correlate* s_737(if rhs_739(list 'set! sym_744 rhs_739) sym_744)))))))))))))"
"(define-values"
"(unpack26.1$1)"
"(lambda(given-kws_770 given-args_771 s23_772 cctx24_773)"
"(let-values(((set-to21_774)(if(pair? given-kws_770)(eq? '#:set-to(car given-kws_770)) #f)))"
"(let-values(((set-to19_775)(if set-to21_774(car given-args_771)(void)))"
"((given-kws_776)(if set-to21_774(cdr given-kws_770) given-kws_770))"
"((given-args_777)(if set-to21_774(cdr given-args_771) given-args_771)))"
"(let-values(((top?22_778)(pair? given-kws_776)))"
"(let-values(((top?20_779)(if top?22_778(car given-args_777)(void))))"
"(compile-identifier25.1 set-to19_775 set-to21_774 top?20_779 top?22_778 s23_772 cctx24_773)))))))"
"(define-values"
"(compile-identifier27.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_780 given-argc_781)"
"(if(= given-argc_781 4)"
"(let-values(((l1_782) given-kws_780))"
"(let-values(((l1_783)(if(null? l1_782) l1_782(if(eq?(car l1_782) '#:set-to)(cdr l1_782) l1_782))))"
"(let-values(((l1_784) l1_783))"
"(let-values(((l1_785)(if(null? l1_784) l1_784(if(eq?(car l1_784) '#:top?)(cdr l1_784) l1_784))))"
"(null? l1_785)))))"
" #f))"
"(case-lambda"
"((given-kws_786 given-args_787 s_788 cctx_789)(unpack26.1$1 given-kws_786 given-args_787 s_788 cctx_789)))"
" null"
" '(#:set-to #:top?)"
"(let-values(((compile-identifier_790)(case-lambda((s_791 cctx_792)(unpack26.1$1 null null s_791 cctx_792)))))"
" compile-identifier_790)))"
"(define-values"
"(local-id->symbol)"
"(lambda(id_793 phase_794)"
"(let-values(((b_795)"
"(let-values(((id186_796) id_793)((phase187_797) phase_794))"
"(if(variable-reference-constant?(#%variable-reference resolve21.1))"
"(resolve19.1 #f #f #f #f #f #f id186_796 phase187_797)"
"(resolve21.1 id186_796 phase187_797)))))"
"(begin"
"        (if (local-binding? b_795) (void) (let-values () (error \"bad binding:\" id_793 phase_794 b_795)))"
"(local-key->symbol(local-binding-key b_795))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_798 phase_799 cctx_800)"
"(let-values(((pos_801)(add-syntax-literal!(compile-context-header cctx_800) q_798)))"
"(if(compile-context-lazy-syntax-literals? cctx_800)"
"(let-values()(generate-lazy-syntax-literal-lookup phase_799 pos_801))"
"(let-values()(generate-eager-syntax-literal-lookup phase_799 pos_801))))))"
"(define-values"
"(def-ids-to-binding-syms)"
"(lambda(ids_1 phase_2 self_3)"
"(alt-reverse"
"(let-values(((lst_4) ids_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_12)"
"(let-values(((...ile/id-to-symbol.rkt:12:14_13)"
" resolve+shift15.1)"
"((id1_14) id_8)"
"((phase2_15) phase_2)"
"((temp3_16) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp3_16"
" #t"
" #f"
" #f"
" id1_14"
" phase2_15)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ile/id-to-symbol.rkt:12:14_13"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_16)"
" id1_14"
" phase2_15)))))"
"(begin"
"(if(if(module-binding? b_12)"
"(if(eq?"
" self_3"
"(module-binding-module b_12))"
"(eqv?"
" phase_2"
"(module-binding-phase b_12))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                               \"bad binding for definition:\""
" id_8"
" self_3"
"                                                                               \"vs.\""
"(if b_12(module-binding-module b_12) #f)"
" phase_2)))"
"(module-binding-sym b_12))))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))"
"(define-values"
"(lifted/1.1$17)"
"(make-required"
" 'compile-forms"
"(case-lambda((self_2 bodys_3 cctx_4 mpis_5)(apply missing-kw self_2 bodys_3 cctx_4 mpis_5 null)))"
" #f"
" #f))"
"(define-values"
"(compile-forms16.1)"
"(lambda(body-imports1_6"
" compiled-expression-callback4_7"
" compiled-expression-callback10_8"
" encoded-root-expand-ctx-box2_9"
" encoded-root-expand-ctx-box8_10"
" other-form-callback5_11"
" other-form-callback11_12"
" root-ctx-only-if-syntax?3_13"
" root-ctx-only-if-syntax?9_14"
" to-source?6_15"
" to-source?12_16"
" bodys13_17"
" cctx14_18"
" mpis15_19)"
"(let-values(((bodys_20) bodys13_17))"
"(let-values(((cctx_21) cctx14_18))"
"(let-values(((mpis_22) mpis15_19))"
"(let-values(((body-imports_23) body-imports1_6))"
"(let-values(((encoded-root-expand-ctx-box_24)"
"(if encoded-root-expand-ctx-box8_10 encoded-root-expand-ctx-box2_9 #f)))"
"(let-values(((root-ctx-only-if-syntax?_25)"
"(if root-ctx-only-if-syntax?9_14 root-ctx-only-if-syntax?3_13 #f)))"
"(let-values(((compiled-expression-callback_26)"
"(if compiled-expression-callback10_8 compiled-expression-callback4_7 void)))"
"(let-values(((other-form-callback_27)(if other-form-callback11_12 other-form-callback5_11 void)))"
"(let-values(((to-source?_28)(if to-source?12_16 to-source?6_15 #f)))"
"(let-values()"
"(let-values(((phase_29)(compile-context-phase cctx_21)))"
"(let-values(((self_30)(compile-context-self cctx_21)))"
"(let-values(((phase-to-body_31)(make-hasheqv)))"
"(let-values(((add-body!_32)"
"(lambda(phase_56 body_57)"
"(hash-update!"
" phase-to-body_31"
" phase_56"
"(lambda(l_58)(cons body_57 l_58))"
" null))))"
"(let-values(((phase-to-header_33)(make-hasheqv)))"
"(let-values(((find-or-create-header!_34)"
"(lambda(phase_59)"
"(let-values(((or-part_60)(hash-ref phase-to-header_33 phase_59 #f)))"
"(if or-part_60"
" or-part_60"
"(let-values(((header_61)(make-header mpis_22)))"
"(begin"
"(hash-set! phase-to-header_33 phase_59 header_61)"
" header_61)))))))"
"(let-values(((saw-define-syntaxes?_35) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_21)"
"(let-values()"
"((letrec-values(((loop!_62)"
"(lambda(bodys_63 phase_64 header_65)"
"(let-values(((lst_66) bodys_63))"
"(begin"
"(if(list? lst_66)"
"(void)"
"(let-values()(in-list lst_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68"
" lst_69)"
"(if(pair? lst_69)"
"(let-values(((body_70)"
"(unsafe-car"
" lst_69)))"
"(if #t"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_68))"
"(let-values(((fold-var_73)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_74)"
"(core-form-sym"
" body_70"
" phase_64)))"
"(if(equal?"
" tmp_74"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_75"
" define-values20_76"
" id21_77"
" rhs22_78)"
"(let-values(((s_91)"
" body_70))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_92)"
" s_91))"
"(let-values(((define-values20_93"
" id21_94"
" rhs22_95)"
"(let-values(((s_96)"
"(if(syntax?$1"
" s_91)"
"(syntax-e$1"
" s_91)"
" s_91)))"
"(if(pair?"
" s_96)"
"(let-values(((define-values23_97)"
"(let-values(((s_100)"
"(car"
" s_96)))"
" s_100))"
"((id24_98"
" rhs25_99)"
"(let-values(((s_101)"
"(cdr"
" s_96)))"
"(let-values(((s_102)"
"(if(syntax?$1"
" s_101)"
"(syntax-e$1"
" s_101)"
" s_101)))"
"(if(pair?"
" s_102)"
"(let-values(((id26_103)"
"(let-values(((s_105)"
"(car"
" s_102)))"
"(let-values(((s_106)"
"(if(syntax?$1"
" s_105)"
"(syntax-e$1"
" s_105)"
" s_105)))"
"(let-values(((flat-s_107)"
"(to-syntax-list.1"
" s_106)))"
"(if(not"
" flat-s_107)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_92))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_92))"
"(let-values()"
"(let-values(((id_108)"
"(let-values(((lst_109)"
" flat-s_107))"
"(begin"
"(if(list?"
" lst_109)"
"(void)"
"(let-values()"
"(in-list"
" lst_109)))"
"((letrec-values(((for-loop_110)"
"(lambda(id_111"
" lst_112)"
"(if(pair?"
" lst_112)"
"(let-values(((s_113)"
"(unsafe-car"
" lst_112)))"
"(if #t"
"(let-values(((id_114)"
"(let-values(((id_115)"
" id_111))"
"(let-values(((id_116)"
"(let-values()"
"(let-values(((id29_117)"
"(let-values()"
"(if(let-values(((or-part_118)"
"(if(syntax?$1"
" s_113)"
"(symbol?"
"(syntax-e$1"
" s_113))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(symbol?"
" s_113)))"
" s_113"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_92"
" s_113)))))"
"(cons"
" id29_117"
" id_115)))))"
"(values"
" id_116)))))"
"(if #t"
"(for-loop_110"
" id_114"
"(unsafe-cdr"
" lst_112))"
" id_114))"
" id_111))"
" id_111))))"
" for-loop_110)"
" null"
" lst_109)))))"
"(alt-reverse"
" id_108)))))))))"
"((rhs27_104)"
"(let-values(((s_119)"
"(cdr"
" s_102)))"
"(let-values(((s_120)"
"(if(syntax?$1"
" s_119)"
"(syntax-e$1"
" s_119)"
" s_119)))"
"(if(pair?"
" s_120)"
"(let-values(((rhs28_121)"
"(let-values(((s_122)"
"(car"
" s_120)))"
" s_122))"
"(()"
"(let-values(((s_123)"
"(cdr"
" s_120)))"
"(let-values(((s_124)"
"(if(syntax?$1"
" s_123)"
"(syntax-e$1"
" s_123)"
" s_123)))"
"(if(null?"
" s_124)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_92))))))"
"(values"
" rhs28_121))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_92))))))"
"(values"
" id26_103"
" rhs27_104))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_92))))))"
"(values"
" define-values23_97"
" id24_98"
" rhs25_99))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_92)))))"
"(values"
" #t"
" define-values20_93"
" id21_94"
" rhs22_95)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((lst_125)"
"(def-ids-to-binding-syms"
" id21_77"
" phase_64"
" self_30)))"
"(begin"
"(if(list?"
" lst_125)"
"(void)"
"(let-values()"
"(in-list"
" lst_125)))"
"((letrec-values(((for-loop_126)"
"(lambda(fold-var_127"
" lst_128)"
"(if(pair?"
" lst_128)"
"(let-values(((sym_129)"
"(unsafe-car"
" lst_128)))"
"(if #t"
"(let-values(((fold-var_130)"
"(let-values(((fold-var_131)"
" fold-var_127))"
"(let-values(((fold-var_132)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_133)"
"(select-fresh"
" sym_129"
" header_65)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_65)"
" sym_129"
" def-sym_133)"
"(set-header-binding-syms-in-order!"
" header_65"
"(cons"
" sym_129"
"(header-binding-syms-in-order"
" header_65)))"
"(register-as-defined!"
" header_65"
" def-sym_133))))"
"(void)))))"
"(values"
" fold-var_132)))))"
"(if #t"
"(for-loop_126"
" fold-var_130"
"(unsafe-cdr"
" lst_128))"
" fold-var_130))"
" fold-var_127))"
" fold-var_127))))"
" for-loop_126)"
"(void)"
" lst_125)))))"
"(if(equal?"
" tmp_74"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_134"
" begin-for-syntax30_135"
" e31_136)"
"(let-values(((s_147)"
" body_70))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_148)"
" s_147))"
"(let-values(((begin-for-syntax30_149"
" e31_150)"
"(let-values(((s_151)"
"(if(syntax?$1"
" s_147)"
"(syntax-e$1"
" s_147)"
" s_147)))"
"(if(pair?"
" s_151)"
"(let-values(((begin-for-syntax32_152)"
"(let-values(((s_154)"
"(car"
" s_151)))"
" s_154))"
"((e33_153)"
"(let-values(((s_155)"
"(cdr"
" s_151)))"
"(let-values(((s_156)"
"(if(syntax?$1"
" s_155)"
"(syntax-e$1"
" s_155)"
" s_155)))"
"(let-values(((flat-s_157)"
"(to-syntax-list.1"
" s_156)))"
"(if(not"
" flat-s_157)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_148))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_148))"
"(let-values()"
" flat-s_157))))))))"
"(values"
" begin-for-syntax32_152"
" e33_153))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_148)))))"
"(values"
" #t"
" begin-for-syntax30_149"
" e31_150)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop!_62"
" e31_136"
"(add1"
" phase_64)"
"(find-or-create-header!_34"
"(add1"
" phase_64)))))"
"(let-values()"
"(void))))))"
"(void)))))"
"(values"
" fold-var_73)))))"
"(if #t"
"(for-loop_67"
" fold-var_71"
"(unsafe-cdr"
" lst_69))"
" fold-var_71))"
" fold-var_68))"
" fold-var_68))))"
" for-loop_67)"
"(void)"
" lst_66))))))"
" loop!_62)"
" bodys_20"
" phase_29"
"(find-or-create-header!_34 phase_29)))"
"(void))"
"(values))))"
"(let-values(((as-required?_36)"
"(lambda(header_158)"
"(lambda(sym_159)"
"(registered-as-required? header_158 sym_159)))))"
"(let-values(((last-i_37)(sub1(length bodys_20))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_160)"
"(lambda(bodys_161 phase_162 header_163)"
"(let-values(((lst_164) bodys_161)"
"((start_165) 0))"
"(begin"
"(if(list? lst_164)"
"(void)"
"(let-values()(in-list lst_164)))"
"(if(exact-nonnegative-integer?"
" start_165)"
"(void)"
"(let-values()"
"(in-naturals start_165)))"
"((letrec-values(((for-loop_166)"
"(lambda(fold-var_167"
" lst_168"
" pos_169)"
"(if(if(pair?"
" lst_168)"
" #t"
" #f)"
"(let-values(((in-body_170)"
"(unsafe-car"
" lst_168))"
"((i_171)"
" pos_169))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_172)"
"(let-values(((fold-var_173)"
" fold-var_167))"
"(let-values(((fold-var_174)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((body_175)"
"(syntax-disarm$1"
" in-body_170)))"
"(let-values(((tmp_176)"
"(core-form-sym"
" body_175"
" phase_162)))"
"(if(equal?"
" tmp_176"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_177"
" define-values34_178"
" id35_179"
" rhs36_180)"
"(let-values(((s_197)"
" body_175))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_198)"
" s_197))"
"(let-values(((define-values34_199"
" id35_200"
" rhs36_201)"
"(let-values(((s_202)"
"(if(syntax?$1"
" s_197)"
"(syntax-e$1"
" s_197)"
" s_197)))"
"(if(pair?"
" s_202)"
"(let-values(((define-values37_203)"
"(let-values(((s_206)"
"(car"
" s_202)))"
" s_206))"
"((id38_204"
" rhs39_205)"
"(let-values(((s_207)"
"(cdr"
" s_202)))"
"(let-values(((s_208)"
"(if(syntax?$1"
" s_207)"
"(syntax-e$1"
" s_207)"
" s_207)))"
"(if(pair?"
" s_208)"
"(let-values(((id40_209)"
"(let-values(((s_211)"
"(car"
" s_208)))"
"(let-values(((s_212)"
"(if(syntax?$1"
" s_211)"
"(syntax-e$1"
" s_211)"
" s_211)))"
"(let-values(((flat-s_213)"
"(to-syntax-list.1"
" s_212)))"
"(if(not"
" flat-s_213)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_198))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_198))"
"(let-values()"
"(let-values(((id_214)"
"(let-values(((lst_215)"
" flat-s_213))"
"(begin"
"(if(list?"
" lst_215)"
"(void)"
"(let-values()"
"(in-list"
" lst_215)))"
"((letrec-values(((for-loop_216)"
"(lambda(id_217"
" lst_218)"
"(if(pair?"
" lst_218)"
"(let-values(((s_219)"
"(unsafe-car"
" lst_218)))"
"(if #t"
"(let-values(((id_220)"
"(let-values(((id_221)"
" id_217))"
"(let-values(((id_222)"
"(let-values()"
"(let-values(((id43_223)"
"(let-values()"
"(if(let-values(((or-part_224)"
"(if(syntax?$1"
" s_219)"
"(symbol?"
"(syntax-e$1"
" s_219))"
" #f)))"
"(if or-part_224"
" or-part_224"
"(symbol?"
" s_219)))"
" s_219"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_198"
" s_219)))))"
"(cons"
" id43_223"
" id_221)))))"
"(values"
" id_222)))))"
"(if #t"
"(for-loop_216"
" id_220"
"(unsafe-cdr"
" lst_218))"
" id_220))"
" id_217))"
" id_217))))"
" for-loop_216)"
" null"
" lst_215)))))"
"(alt-reverse"
" id_214)))))))))"
"((rhs41_210)"
"(let-values(((s_225)"
"(cdr"
" s_208)))"
"(let-values(((s_226)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_226)"
"(let-values(((rhs42_227)"
"(let-values(((s_228)"
"(car"
" s_226)))"
" s_228))"
"(()"
"(let-values(((s_229)"
"(cdr"
" s_226)))"
"(let-values(((s_230)"
"(if(syntax?$1"
" s_229)"
"(syntax-e$1"
" s_229)"
" s_229)))"
"(if(null?"
" s_230)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_198))))))"
"(values"
" rhs42_227))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_198))))))"
"(values"
" id40_209"
" rhs41_210))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_198))))))"
"(values"
" define-values37_203"
" id38_204"
" rhs39_205))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_198)))))"
"(values"
" #t"
" define-values34_199"
" id35_200"
" rhs36_201)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_193)"
" id35_179))"
"(let-values(((binding-syms_194)"
"(def-ids-to-binding-syms"
" ids_193"
" phase_162"
" self_30)))"
"(let-values(((def-syms_195)"
"(if(compile-context-module-self"
" cctx_21)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_231)"
" binding-syms_194))"
"(begin"
"(if(list?"
" lst_231)"
"(void)"
"(let-values()"
"(in-list"
" lst_231)))"
"((letrec-values(((for-loop_232)"
"(lambda(fold-var_233"
" lst_234)"
"(if(pair?"
" lst_234)"
"(let-values(((binding-sym_235)"
"(unsafe-car"
" lst_234)))"
"(if #t"
"(let-values(((fold-var_236)"
"(let-values(((fold-var_237)"
" fold-var_233))"
"(let-values(((fold-var_238)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_163)"
" binding-sym_235))"
" fold-var_237))))"
"(values"
" fold-var_238)))))"
"(if #t"
"(for-loop_232"
" fold-var_236"
"(unsafe-cdr"
" lst_234))"
" fold-var_236))"
" fold-var_233))"
" fold-var_233))))"
" for-loop_232)"
" null"
" lst_231)))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_239)"
" binding-syms_194))"
"(begin"
"(if(list?"
" lst_239)"
"(void)"
"(let-values()"
"(in-list"
" lst_239)))"
"((letrec-values(((for-loop_240)"
"(lambda(fold-var_241"
" lst_242)"
"(if(pair?"
" lst_242)"
"(let-values(((binding-sym_243)"
"(unsafe-car"
" lst_242)))"
"(if #t"
"(let-values(((fold-var_244)"
"(let-values(((fold-var_245)"
" fold-var_241))"
"(let-values(((fold-var_246)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...der/compile/form.rkt:104:15_247)"
" register-required-variable-use!20.1)"
"((header44_248)"
" header_163)"
"((temp45_249)"
"(compile-context-self"
" cctx_21))"
"((phase46_250)"
" phase_162)"
"((binding-sym47_251)"
" binding-sym_243)"
"((temp48_252)"
" #f)"
"((temp49_253)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" register-required-variable-use!20.1))"
"(register-required-variable-use!18.1"
" temp49_253"
" #t"
" header44_248"
" temp45_249"
" phase46_250"
" binding-sym47_251"
" temp48_252)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/form.rkt:104:15_247"
" keyword-procedure-extract"
" '(#:defined?)"
" 7)"
" '(#:defined?)"
"(list"
" temp49_253)"
" header44_248"
" temp45_249"
" phase46_250"
" binding-sym47_251"
" temp48_252))))"
" fold-var_245))))"
"(values"
" fold-var_246)))))"
"(if #t"
"(for-loop_240"
" fold-var_244"
"(unsafe-cdr"
" lst_242))"
" fold-var_244))"
" fold-var_241))"
" fold-var_241))))"
" for-loop_240)"
" null"
" lst_239))))))))"
"(let-values(((rhs_196)"
"(compile$2"
" rhs36_180"
"(let-values(((the-struct_254)"
" cctx_21))"
"(if(compile-context?"
" the-struct_254)"
"(let-values(((phase50_255)"
" phase_162)"
"((header51_256)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_254)"
" phase50_255"
"(compile-context-self"
" the-struct_254)"
"(compile-context-module-self"
" the-struct_254)"
"(compile-context-full-module-name"
" the-struct_254)"
"(compile-context-lazy-syntax-literals?"
" the-struct_254)"
" header51_256))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                      \"compile-context?\""
" the-struct_254)))"
"(if(="
"(length"
" ids_193)"
" 1)"
"(car"
" ids_193)"
" #f))))"
"(begin"
"(compiled-expression-callback_26"
" rhs_196"
"(length"
" def-syms_195)"
" phase_162"
"(as-required?_36"
" header_163))"
"(add-body!_32"
" phase_162"
"(list"
" 'define-values"
" def-syms_195"
" rhs_196))"
"(if(let-values(((or-part_257)"
"(compile-context-module-self"
" cctx_21)))"
"(if or-part_257"
" or-part_257"
"(null?"
" ids_193)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_32"
" phase_162"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_258)"
" def-syms_195))"
"(begin"
"(if(list?"
" lst_258)"
"(void)"
"(let-values()"
"(in-list"
" lst_258)))"
"((letrec-values(((for-loop_259)"
"(lambda(fold-var_260"
" lst_261)"
"(if(pair?"
" lst_261)"
"(let-values(((def-sym_262)"
"(unsafe-car"
" lst_261)))"
"(if #t"
"(let-values(((fold-var_263)"
"(let-values(((fold-var_264)"
" fold-var_260))"
"(let-values(((fold-var_265)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_262"
" '(#f)))"
" fold-var_264))))"
"(values"
" fold-var_265)))))"
"(if #t"
"(for-loop_259"
" fold-var_263"
"(unsafe-cdr"
" lst_261))"
" fold-var_263))"
" fold-var_260))"
" fold-var_260))))"
" for-loop_259)"
" null"
" lst_258)))))"
" '((void))))"
"(add-body!_32"
" phase_162"
"(compile-top-level-bind"
" ids_193"
" binding-syms_194"
"(let-values(((the-struct_266)"
" cctx_21))"
"(if(compile-context?"
" the-struct_266)"
"(let-values(((phase52_267)"
" phase_162)"
"((header53_268)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_266)"
" phase52_267"
"(compile-context-self"
" the-struct_266)"
"(compile-context-module-self"
" the-struct_266)"
"(compile-context-full-module-name"
" the-struct_266)"
"(compile-context-lazy-syntax-literals?"
" the-struct_266)"
" header53_268))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                   \"compile-context?\""
" the-struct_266)))"
" #f))))))))))))"
"(if(equal?"
" tmp_176"
" 'define-syntaxes)"
"(let-values()"
"(let-values(((ok?_269"
" define-syntaxes54_270"
" id55_271"
" rhs56_272)"
"(let-values(((s_291)"
" body_175))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_292)"
" s_291))"
"(let-values(((define-syntaxes54_293"
" id55_294"
" rhs56_295)"
"(let-values(((s_296)"
"(if(syntax?$1"
" s_291)"
"(syntax-e$1"
" s_291)"
" s_291)))"
"(if(pair?"
" s_296)"
"(let-values(((define-syntaxes57_297)"
"(let-values(((s_300)"
"(car"
" s_296)))"
" s_300))"
"((id58_298"
" rhs59_299)"
"(let-values(((s_301)"
"(cdr"
" s_296)))"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_301)"
"(syntax-e$1"
" s_301)"
" s_301)))"
"(if(pair?"
" s_302)"
"(let-values(((id60_303)"
"(let-values(((s_305)"
"(car"
" s_302)))"
"(let-values(((s_306)"
"(if(syntax?$1"
" s_305)"
"(syntax-e$1"
" s_305)"
" s_305)))"
"(let-values(((flat-s_307)"
"(to-syntax-list.1"
" s_306)))"
"(if(not"
" flat-s_307)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_292))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_292))"
"(let-values()"
"(let-values(((id_308)"
"(let-values(((lst_309)"
" flat-s_307))"
"(begin"
"(if(list?"
" lst_309)"
"(void)"
"(let-values()"
"(in-list"
" lst_309)))"
"((letrec-values(((for-loop_310)"
"(lambda(id_311"
" lst_312)"
"(if(pair?"
" lst_312)"
"(let-values(((s_313)"
"(unsafe-car"
" lst_312)))"
"(if #t"
"(let-values(((id_314)"
"(let-values(((id_315)"
" id_311))"
"(let-values(((id_316)"
"(let-values()"
"(let-values(((id63_317)"
"(let-values()"
"(if(let-values(((or-part_318)"
"(if(syntax?$1"
" s_313)"
"(symbol?"
"(syntax-e$1"
" s_313))"
" #f)))"
"(if or-part_318"
" or-part_318"
"(symbol?"
" s_313)))"
" s_313"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_292"
" s_313)))))"
"(cons"
" id63_317"
" id_315)))))"
"(values"
" id_316)))))"
"(if #t"
"(for-loop_310"
" id_314"
"(unsafe-cdr"
" lst_312))"
" id_314))"
" id_311))"
" id_311))))"
" for-loop_310)"
" null"
" lst_309)))))"
"(alt-reverse"
" id_308)))))))))"
"((rhs61_304)"
"(let-values(((s_319)"
"(cdr"
" s_302)))"
"(let-values(((s_320)"
"(if(syntax?$1"
" s_319)"
"(syntax-e$1"
" s_319)"
" s_319)))"
"(if(pair?"
" s_320)"
"(let-values(((rhs62_321)"
"(let-values(((s_322)"
"(car"
" s_320)))"
" s_322))"
"(()"
"(let-values(((s_323)"
"(cdr"
" s_320)))"
"(let-values(((s_324)"
"(if(syntax?$1"
" s_323)"
"(syntax-e$1"
" s_323)"
" s_323)))"
"(if(null?"
" s_324)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_292))))))"
"(values"
" rhs62_321))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_292))))))"
"(values"
" id60_303"
" rhs61_304))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_292))))))"
"(values"
" define-syntaxes57_297"
" id58_298"
" rhs59_299))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_292)))))"
"(values"
" #t"
" define-syntaxes54_293"
" id55_294"
" rhs56_295)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_285)"
" id55_271))"
"(let-values(((binding-syms_286)"
"(def-ids-to-binding-syms"
" ids_285"
" phase_162"
" self_30)))"
"(let-values(((next-header_287)"
"(find-or-create-header!_34"
"(add1"
" phase_162))))"
"(let-values(((gen-syms_288)"
"(alt-reverse"
"(let-values(((lst_325)"
" binding-syms_286))"
"(begin"
"(if(list?"
" lst_325)"
"(void)"
"(let-values()"
"(in-list"
" lst_325)))"
"((letrec-values(((for-loop_326)"
"(lambda(fold-var_327"
" lst_328)"
"(if(pair?"
" lst_328)"
"(let-values(((binding-sym_329)"
"(unsafe-car"
" lst_328)))"
"(if #t"
"(let-values(((fold-var_330)"
"(let-values(((fold-var_331)"
" fold-var_327))"
"(let-values(((fold-var_332)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_329"
" next-header_287))"
" fold-var_331))))"
"(values"
" fold-var_332)))))"
"(if #t"
"(for-loop_326"
" fold-var_330"
"(unsafe-cdr"
" lst_328))"
" fold-var_330))"
" fold-var_327))"
" fold-var_327))))"
" for-loop_326)"
" null"
" lst_325))))))"
"(let-values(((rhs_289)"
"(compile$2"
" rhs56_272"
"(let-values(((the-struct_333)"
" cctx_21))"
"(if(compile-context?"
" the-struct_333)"
"(let-values(((phase64_334)"
"(add1"
" phase_162))"
"((header65_335)"
" next-header_287))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_333)"
" phase64_334"
"(compile-context-self"
" the-struct_333)"
"(compile-context-module-self"
" the-struct_333)"
"(compile-context-full-module-name"
" the-struct_333)"
"(compile-context-lazy-syntax-literals?"
" the-struct_333)"
" header65_335))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                          \"compile-context?\""
" the-struct_333))))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_26"
" rhs_289"
"(length"
" gen-syms_288)"
"(add1"
" phase_162)"
"(as-required?_36"
" header_163))"
"(values))))"
"(let-values(((transformer-set!s_290)"
"(alt-reverse"
"(let-values(((lst_336)"
" binding-syms_286)"
"((lst_337)"
" gen-syms_288))"
"(begin"
"(if(list?"
" lst_336)"
"(void)"
"(let-values()"
"(in-list"
" lst_336)))"
"(if(list?"
" lst_337)"
"(void)"
"(let-values()"
"(in-list"
" lst_337)))"
"((letrec-values(((for-loop_338)"
"(lambda(fold-var_339"
" lst_340"
" lst_341)"
"(if(if(pair?"
" lst_340)"
"(pair?"
" lst_341)"
" #f)"
"(let-values(((binding-sym_342)"
"(unsafe-car"
" lst_340))"
"((gen-sym_343)"
"(unsafe-car"
" lst_341)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_344)"
"(let-values(((fold-var_345)"
" fold-var_339))"
"(let-values(((fold-var_346)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_342)"
" gen-sym_343))"
" fold-var_345))))"
"(values"
" fold-var_346)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_338"
" fold-var_344"
"(unsafe-cdr"
" lst_340)"
"(unsafe-cdr"
" lst_341))"
" fold-var_344))"
" fold-var_339))"
" fold-var_339))))"
" for-loop_338)"
" null"
" lst_336"
" lst_337))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_21)"
"(let-values()"
"(add-body!_32"
"(add1"
" phase_162)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_288"
" rhs_289))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_290"
" '((void)))))))"
"(let-values()"
"(add-body!_32"
"(add1"
" phase_162)"
"(generate-top-level-define-syntaxes"
" gen-syms_288"
" rhs_289"
" transformer-set!s_290"
"(compile-top-level-bind"
" ids_285"
" binding-syms_286"
"(let-values(((the-struct_347)"
" cctx_21))"
"(if(compile-context?"
" the-struct_347)"
"(let-values(((phase66_348)"
" phase_162)"
"((header67_349)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_347)"
" phase66_348"
"(compile-context-self"
" the-struct_347)"
"(compile-context-module-self"
" the-struct_347)"
"(compile-context-full-module-name"
" the-struct_347)"
"(compile-context-lazy-syntax-literals?"
" the-struct_347)"
" header67_349))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                          \"compile-context?\""
" the-struct_347)))"
" gen-syms_288)))))"
"(set! saw-define-syntaxes?_35"
" #t)))))))))))"
"(if(equal?"
" tmp_176"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_350"
" begin-for-syntax68_351"
" e69_352)"
"(let-values(((s_363)"
" body_175))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_364)"
" s_363))"
"(let-values(((begin-for-syntax68_365"
" e69_366)"
"(let-values(((s_367)"
"(if(syntax?$1"
" s_363)"
"(syntax-e$1"
" s_363)"
" s_363)))"
"(if(pair?"
" s_367)"
"(let-values(((begin-for-syntax70_368)"
"(let-values(((s_370)"
"(car"
" s_367)))"
" s_370))"
"((e71_369)"
"(let-values(((s_371)"
"(cdr"
" s_367)))"
"(let-values(((s_372)"
"(if(syntax?$1"
" s_371)"
"(syntax-e$1"
" s_371)"
" s_371)))"
"(let-values(((flat-s_373)"
"(to-syntax-list.1"
" s_372)))"
"(if(not"
" flat-s_373)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_364))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_364))"
"(let-values()"
" flat-s_373))))))))"
"(values"
" begin-for-syntax70_368"
" e71_369))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_364)))))"
"(values"
" #t"
" begin-for-syntax68_365"
" e69_366)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop!_160"
" e69_352"
"(add1"
" phase_162)"
"(find-or-create-header!_34"
"(add1"
" phase_162)))))"
"(if(if(equal?"
" tmp_176"
" '#%require)"
" #t"
"(if(equal?"
" tmp_176"
" '#%provide)"
" #t"
"(if(equal?"
" tmp_176"
" '#%declare)"
" #t"
"(if(equal?"
" tmp_176"
" 'module)"
" #t"
"(equal?"
" tmp_176"
" 'module*)))))"
"(let-values()"
"(let-values(((e_374)"
"(other-form-callback_27"
" body_175"
"(let-values(((the-struct_375)"
" cctx_21))"
"(if(compile-context?"
" the-struct_375)"
"(let-values(((phase72_376)"
" phase_162)"
"((header73_377)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_375)"
" phase72_376"
"(compile-context-self"
" the-struct_375)"
"(compile-context-module-self"
" the-struct_375)"
"(compile-context-full-module-name"
" the-struct_375)"
"(compile-context-lazy-syntax-literals?"
" the-struct_375)"
" header73_377))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                    \"compile-context?\""
" the-struct_375))))))"
"(if e_374"
"(let-values()"
"(begin"
"(compiled-expression-callback_26"
" e_374"
" #f"
" phase_162"
"(as-required?_36"
" header_163))"
"(add-body!_32"
" phase_162"
" e_374)))"
"(void))))"
"(let-values()"
"(let-values(((e_378)"
"(compile$2"
" body_175"
"(let-values(((the-struct_379)"
" cctx_21))"
"(if(compile-context?"
" the-struct_379)"
"(let-values(((phase74_380)"
" phase_162)"
"((header75_381)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_379)"
" phase74_380"
"(compile-context-self"
" the-struct_379)"
"(compile-context-module-self"
" the-struct_379)"
"(compile-context-full-module-name"
" the-struct_379)"
"(compile-context-lazy-syntax-literals?"
" the-struct_379)"
" header75_381))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                    \"compile-context?\""
" the-struct_379)))"
" #f"
"(="
" i_171"
" last-i_37))))"
"(begin"
"(compiled-expression-callback_26"
" e_378"
" #f"
" phase_162"
"(as-required?_36"
" header_163))"
"(add-body!_32"
" phase_162"
" e_378)))))))))))"
"(void)))))"
"(values"
" fold-var_174)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_166"
" fold-var_172"
"(unsafe-cdr"
" lst_168)"
"(+"
" pos_169"
" 1))"
" fold-var_172))"
" fold-var_167))"
" fold-var_167))))"
" for-loop_166)"
"(void)"
" lst_164"
" start_165))))))"
" loop!_160)"
" bodys_20"
" phase_29"
"(find-or-create-header!_34 phase_29))"
"(values))))"
"(let-values(((encoded-root-expand-header_38)"
"(if encoded-root-expand-ctx-box_24"
"(if(unbox encoded-root-expand-ctx-box_24)"
"(if(not"
"(if root-ctx-only-if-syntax?_25"
"(if(not saw-define-syntaxes?_35)"
"(let-values(((ht_382) phase-to-header_33))"
"(begin"
"(if((lambda(ht_383)(hash? ht_383))"
" ht_382)"
"(void)"
"(let-values()"
"(default-in-hash-values ht_382)))"
"((letrec-values(((for-loop_384)"
"(lambda(result_385"
" i_386)"
"(if i_386"
"(let-values(((h_387)"
"(hash-iterate-value"
" ht_382"
" i_386)))"
"(if #t"
"(let-values(((result_388)"
"(let-values(((result_389)"
" result_385))"
"(let-values(((result_390)"
"(let-values()"
"(let-values()"
"(header-empty-syntax-literals?"
" h_387)))))"
"(values"
" result_390)))))"
"(if(if #t"
"(not"
"((lambda x_391"
"(not"
" result_388))"
" h_387))"
" #f)"
"(for-loop_384"
" result_388"
"(hash-iterate-next"
" ht_382"
" i_386))"
" result_388))"
" result_385))"
" result_385))))"
" for-loop_384)"
" #t"
"(hash-iterate-first ht_382))))"
" #f)"
" #f))"
"(let-values(((h_392)"
"(find-or-create-header!_34 'root-ctx)))"
"(begin"
"(add-syntax-literal!"
" h_392"
"(unbox encoded-root-expand-ctx-box_24))"
" h_392))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_39)"
"(let-values(((temp76_393)(hash-keys phase-to-body_31))"
"((<77_394) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp76_393 <77_394)"
"(sort9.1 temp76_393 <77_394)))))"
"(let-values(((min-phase_40)"
"(if(pair? phases-in-order_39)"
"(car phases-in-order_39)"
" phase_29)))"
"(let-values(((max-phase_41)"
"(if(pair? phases-in-order_39)"
"(car(alt-reverse phases-in-order_39))"
" phase_29)))"
"(let-values(((struct:link-info_42"
" link-info19_43"
" link-info?_44"
" link-info-link-module-uses_45"
" link-info-imports_46"
" link-info-extra-inspectorsss_47"
" link-info-def-decls_48)"
"(let-values(((struct:_395"
" make-_396"
" ?_397"
" -ref_398"
" -set!_399)"
"(let-values()"
"(make-struct-type"
" 'link-info"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'link-info))))"
"(values"
" struct:_395"
" make-_396"
" ?_397"
"(make-struct-field-accessor"
" -ref_398"
" 0"
" 'link-module-uses)"
"(make-struct-field-accessor -ref_398 1 'imports)"
"(make-struct-field-accessor"
" -ref_398"
" 2"
" 'extra-inspectorsss)"
"(make-struct-field-accessor"
" -ref_398"
" 3"
" 'def-decls)))))"
"(let-values(((phase-to-link-info_50)"
"(let-values(((lst_431) phases-in-order_39))"
"(begin"
"(if(list? lst_431)"
"(void)"
"(let-values()(in-list lst_431)))"
"((letrec-values(((for-loop_432)"
"(lambda(table_433 lst_434)"
"(if(pair? lst_434)"
"(let-values(((phase_435)"
"(unsafe-car"
" lst_434)))"
"(if #t"
"(let-values(((table_436)"
"(let-values(((table_437)"
" table_433))"
"(let-values(((table_438)"
"(let-values()"
"(let-values(((key_439"
" val_440)"
"(let-values()"
"(let-values(((header_441)"
"(hash-ref"
" phase-to-header_33"
" phase_435"
" #f)))"
"(let-values(((link-module-uses_442"
" imports_443"
" extra-inspectorsss_444"
" def-decls_445)"
"(generate-links+imports"
" header_441"
" phase_435"
" cctx_21)))"
"(values"
" phase_435"
"(link-info19_43"
" link-module-uses_442"
" imports_443"
" extra-inspectorsss_444"
" def-decls_445)))))))"
"(hash-set"
" table_437"
" key_439"
" val_440)))))"
"(values"
" table_438)))))"
"(if #t"
"(for-loop_432"
" table_436"
"(unsafe-cdr"
" lst_434))"
" table_436))"
" table_433))"
" table_433))))"
" for-loop_432)"
" '#hash()"
" lst_431)))))"
"(let-values(((body-linklets_51)"
"(let-values(((lst_446) phases-in-order_39))"
"(begin"
"(if(list? lst_446)"
"(void)"
"(let-values()(in-list lst_446)))"
"((letrec-values(((for-loop_447)"
"(lambda(table_448"
" lst_449)"
"(if(pair? lst_449)"
"(let-values(((phase_450)"
"(unsafe-car"
" lst_449)))"
"(if #t"
"(let-values(((table_451)"
"(let-values(((table_452)"
" table_448))"
"(let-values(((table_453)"
"(let-values()"
"(let-values(((key_454"
" val_455)"
"(let-values()"
"(let-values(((bodys_456)"
"(hash-ref"
" phase-to-body_31"
" phase_450)))"
"(let-values(((li_457)"
"(hash-ref"
" phase-to-link-info_50"
" phase_450)))"
"(let-values(((binding-sym-to-define-sym_458)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_33"
" phase_450))))"
"(values"
" phase_450"
"((if to-source?_28"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_23"
"(link-info-imports_46"
" li_457))"
"(qq-append"
"(link-info-def-decls_48"
" li_457)"
"(alt-reverse"
"(let-values(((lst_459)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_33"
" phase_450))))"
"(begin"
"(if(list?"
" lst_459)"
"(void)"
"(let-values()"
"(in-list"
" lst_459)))"
"((letrec-values(((for-loop_460)"
"(lambda(fold-var_461"
" lst_462)"
"(if(pair?"
" lst_462)"
"(let-values(((binding-sym_463)"
"(unsafe-car"
" lst_462)))"
"(if #t"
"(let-values(((fold-var_464)"
"(let-values(((fold-var_465)"
" fold-var_461))"
"(let-values(((fold-var_466)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_467)"
"(hash-ref"
" binding-sym-to-define-sym_458"
" binding-sym_463)))"
"(list"
" def-sym_467"
" binding-sym_463)))"
" fold-var_465))))"
"(values"
" fold-var_466)))))"
"(if #t"
"(for-loop_460"
" fold-var_464"
"(unsafe-cdr"
" lst_462))"
" fold-var_464))"
" fold-var_461))"
" fold-var_461))))"
" for-loop_460)"
" null"
" lst_459)))))"
"(alt-reverse"
" bodys_456))))))))))"
"(hash-set"
" table_452"
" key_454"
" val_455)))))"
"(values"
" table_453)))))"
"(if #t"
"(for-loop_447"
" table_451"
"(unsafe-cdr"
" lst_449))"
" table_451))"
" table_448))"
" table_448))))"
" for-loop_447)"
" '#hasheq()"
" lst_446)))))"
"(let-values(((phase-to-link-module-uses_52)"
"(let-values(((ht_468) phase-to-link-info_50))"
"(begin"
"(if((lambda(ht_469)(hash? ht_469))"
" ht_468)"
"(void)"
"(let-values()"
"(default-in-hash ht_468)))"
"((letrec-values(((for-loop_470)"
"(lambda(table_471"
" i_472)"
"(if i_472"
"(let-values(((phase_473"
" li_474)"
"(hash-iterate-key+value"
" ht_468"
" i_472)))"
"(if #t"
"(let-values(((table_475)"
"(let-values(((table_476)"
" table_471))"
"(let-values(((table_477)"
"(let-values()"
"(let-values(((key_478"
" val_479)"
"(let-values()"
"(values"
" phase_473"
"(link-info-link-module-uses_45"
" li_474)))))"
"(hash-set"
" table_476"
" key_478"
" val_479)))))"
"(values"
" table_477)))))"
"(if #t"
"(for-loop_470"
" table_475"
"(hash-iterate-next"
" ht_468"
" i_472))"
" table_475))"
" table_471))"
" table_471))))"
" for-loop_470)"
" '#hash()"
"(hash-iterate-first ht_468))))))"
"(let-values(((phase-to-link-module-uses-expr_53)"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_480)"
" phases-in-order_39))"
"(begin"
"(if(list? lst_480)"
"(void)"
"(let-values()(in-list lst_480)))"
"((letrec-values(((for-loop_481)"
"(lambda(fold-var_482"
" lst_483)"
"(if(pair?"
" lst_483)"
"(let-values(((phase_484)"
"(unsafe-car"
" lst_483)))"
"(if #t"
"(let-values(((fold-var_485)"
"(let-values(((fold-var_486)"
" fold-var_482))"
"(let-values(((fold-var_487)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_484"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_52"
" phase_484)"
" mpis_22))))"
" fold-var_486))))"
"(values"
" fold-var_487)))))"
"(if #t"
"(for-loop_481"
" fold-var_485"
"(unsafe-cdr"
" lst_483))"
" fold-var_485))"
" fold-var_482))"
" fold-var_482))))"
" for-loop_481)"
" null"
" lst_480))))))))"
"(let-values(((phase-to-link-extra-inspectorsss_54)"
"(let-values(((ht_488)"
" phase-to-link-info_50))"
"(begin"
"(if((lambda(ht_489)(hash? ht_489))"
" ht_488)"
"(void)"
"(let-values()"
"(default-in-hash ht_488)))"
"((letrec-values(((for-loop_490)"
"(lambda(table_491"
" i_492)"
"(if i_492"
"(let-values(((phase_493"
" li_494)"
"(hash-iterate-key+value"
" ht_488"
" i_492)))"
"(if #t"
"(let-values(((table_495)"
"(let-values(((table_496)"
" table_491))"
"(let-values(((table_497)"
"(let-values()"
"(let-values(((key_498"
" val_499)"
"(let-values()"
"(values"
" phase_493"
"(link-info-extra-inspectorsss_47"
" li_494)))))"
"(hash-set"
" table_496"
" key_498"
" val_499)))))"
"(values"
" table_497)))))"
"(if #t"
"(for-loop_490"
" table_495"
"(hash-iterate-next"
" ht_488"
" i_492))"
" table_495))"
" table_491))"
" table_491))))"
" for-loop_490)"
" '#hash()"
"(hash-iterate-first ht_488))))))"
"(let-values(((syntax-literalss_55)"
"(alt-reverse"
"(let-values(((start_500) phase_29)"
"((end_501)"
"(add1 max-phase_41))"
"((inc_502) 1))"
"(begin"
"(if(if(real? start_500)"
"(if(real? end_501)"
"(real? inc_502)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_500"
" end_501"
" inc_502)))"
"((letrec-values(((for-loop_503)"
"(lambda(fold-var_504"
" pos_505)"
"(if(<"
" pos_505"
" end_501)"
"(let-values(((phase_506)"
" pos_505))"
"(if #t"
"(let-values(((fold-var_507)"
"(let-values(((fold-var_508)"
" fold-var_504))"
"(let-values(((fold-var_509)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((h_510)"
"(hash-ref"
" phase-to-header_33"
" phase_506"
" #f)))"
"(if h_510"
"(header-syntax-literals"
" h_510)"
" empty-syntax-literals)))"
" fold-var_508))))"
"(values"
" fold-var_509)))))"
"(if #t"
"(for-loop_503"
" fold-var_507"
"(+"
" pos_505"
" inc_502))"
" fold-var_507))"
" fold-var_504))"
" fold-var_504))))"
" for-loop_503)"
" null"
" start_500))))))"
"(values"
" body-linklets_51"
" min-phase_40"
" max-phase_41"
" phase-to-link-module-uses_52"
" phase-to-link-module-uses-expr_53"
" phase-to-link-extra-inspectorsss_54"
" syntax-literalss_55"
"(if encoded-root-expand-header_38"
"(header-syntax-literals"
" encoded-root-expand-header_38)"
" #f))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack17.1$1)"
"(lambda(given-kws_511 given-args_512 bodys13_513 cctx14_514 mpis15_515)"
"(let-values(((body-imports1_516)(car given-args_512))"
"((given-kws_517)(cdr given-kws_511))"
"((given-args_518)(cdr given-args_512)))"
"(let-values(((compiled-expression-callback10_519)"
"(if(pair? given-kws_517)(eq? '#:compiled-expression-callback(car given-kws_517)) #f)))"
"(let-values(((compiled-expression-callback4_520)"
"(if compiled-expression-callback10_519(car given-args_518)(void)))"
"((given-kws_521)(if compiled-expression-callback10_519(cdr given-kws_517) given-kws_517))"
"((given-args_522)(if compiled-expression-callback10_519(cdr given-args_518) given-args_518)))"
"(let-values(((encoded-root-expand-ctx-box8_523)"
"(if(pair? given-kws_521)(eq? '#:encoded-root-expand-ctx-box(car given-kws_521)) #f)))"
"(let-values(((encoded-root-expand-ctx-box2_524)"
"(if encoded-root-expand-ctx-box8_523(car given-args_522)(void)))"
"((given-kws_525)(if encoded-root-expand-ctx-box8_523(cdr given-kws_521) given-kws_521))"
"((given-args_526)(if encoded-root-expand-ctx-box8_523(cdr given-args_522) given-args_522)))"
"(let-values(((other-form-callback11_527)"
"(if(pair? given-kws_525)(eq? '#:other-form-callback(car given-kws_525)) #f)))"
"(let-values(((other-form-callback5_528)(if other-form-callback11_527(car given-args_526)(void)))"
"((given-kws_529)(if other-form-callback11_527(cdr given-kws_525) given-kws_525))"
"((given-args_530)(if other-form-callback11_527(cdr given-args_526) given-args_526)))"
"(let-values(((root-ctx-only-if-syntax?9_531)"
"(if(pair? given-kws_529)(eq? '#:root-ctx-only-if-syntax?(car given-kws_529)) #f)))"
"(let-values(((root-ctx-only-if-syntax?3_532)"
"(if root-ctx-only-if-syntax?9_531(car given-args_530)(void)))"
"((given-kws_533)(if root-ctx-only-if-syntax?9_531(cdr given-kws_529) given-kws_529))"
"((given-args_534)"
"(if root-ctx-only-if-syntax?9_531(cdr given-args_530) given-args_530)))"
"(let-values(((to-source?12_535)(pair? given-kws_533)))"
"(let-values(((to-source?6_536)(if to-source?12_535(car given-args_534)(void))))"
"(compile-forms16.1"
" body-imports1_516"
" compiled-expression-callback4_520"
" compiled-expression-callback10_519"
" encoded-root-expand-ctx-box2_524"
" encoded-root-expand-ctx-box8_523"
" other-form-callback5_528"
" other-form-callback11_527"
" root-ctx-only-if-syntax?3_532"
" root-ctx-only-if-syntax?9_531"
" to-source?6_536"
" to-source?12_535"
" bodys13_513"
" cctx14_514"
" mpis15_515))))))))))))))"
"(define-values"
"(compile-forms18.1)"
"(lifted/1.1$17"
"(lambda(given-kws_537 given-argc_538)"
"(if(= given-argc_538 5)"
"(subsets?"
" '(#:body-imports)"
" given-kws_537"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?))"
" #f))"
"(case-lambda"
"((given-kws_539 given-args_540 bodys_541 cctx_542 mpis_543)"
"(unpack17.1$1 given-kws_539 given-args_540 bodys_541 cctx_542 mpis_543)))"
" '(#:body-imports)"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_544 binding-syms_545 cctx_546 trans-exprs_547)"
"(let-values(((phase_548)(compile-context-phase cctx_546)))"
"(let-values(((self_549)(compile-context-self cctx_546)))"
"(let-values(((header_550)(compile-context-header cctx_546)))"
"(let-values(((mpis_551)(header-module-path-indexes header_550)))"
"(let-values(((top-level-bind-scope_552)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_546)))))"
"(let-values(((self-expr_553)(add-module-path-index! mpis_551 self_549)))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_554) ids_544)"
"((lst_555) binding-syms_545)"
"((lst_556)"
"(let-values(((or-part_557) trans-exprs_547))"
"(if or-part_557"
" or-part_557"
"(alt-reverse"
"(let-values(((lst_558) ids_544))"
"(begin"
"(if(list? lst_558)(void)(let-values()(in-list lst_558)))"
"((letrec-values(((for-loop_559)"
"(lambda(fold-var_560 lst_561)"
"(if(pair? lst_561)"
"(let-values(((id_562)(unsafe-car lst_561)))"
"(if #t"
"(let-values(((fold-var_563)"
"(let-values(((fold-var_564)"
" fold-var_560))"
"(let-values(((fold-var_565)"
"(let-values()"
"(cons"
"(let-values() ''#f)"
" fold-var_564))))"
"(values fold-var_565)))))"
"(if #t"
"(for-loop_559 fold-var_563(unsafe-cdr lst_561))"
" fold-var_563))"
" fold-var_560))"
" fold-var_560))))"
" for-loop_559)"
" null"
" lst_558))))))))"
"(begin"
"(if(list? lst_554)(void)(let-values()(in-list lst_554)))"
"(if(list? lst_555)(void)(let-values()(in-list lst_555)))"
"(if(list? lst_556)(void)(let-values()(in-list lst_556)))"
"((letrec-values(((for-loop_566)"
"(lambda(fold-var_567 lst_568 lst_569 lst_570)"
"(if(if(pair? lst_568)(if(pair? lst_569)(pair? lst_570) #f) #f)"
"(let-values(((id_571)(unsafe-car lst_568))"
"((binding-sym_572)(unsafe-car lst_569))"
"((trans-expr_573)(unsafe-car lst_570)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_574)"
"(let-values(((fold-var_575) fold-var_567))"
"(let-values(((fold-var_576)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_577)"
"(compile-quote-syntax"
"(remove-scope"
" id_571"
" top-level-bind-scope_552)"
" phase_548"
" cctx_546)))"
"(list"
" top-level-bind!-id"
" id-stx_577"
" self-expr_553"
" phase_548"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_572)"
" trans-expr_573)))"
" fold-var_575))))"
"(values fold-var_576)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_566"
" fold-var_574"
"(unsafe-cdr lst_568)"
"(unsafe-cdr lst_569)"
"(unsafe-cdr lst_570))"
" fold-var_574))"
" fold-var_567))"
" fold-var_567))))"
" for-loop_566)"
" null"
" lst_554"
" lst_555"
" lst_556)))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_581 rhs_582 transformer-set!s_583 finish_584)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_582)"
"(list"
" 'case-lambda"
"(list gen-syms_581(list* 'begin(qq-append transformer-set!s_583(list* finish_584 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_581"
"(list*"
" 'values"
"(alt-reverse"
"(let-values(((lst_585) gen-syms_581))"
"(begin"
"(if(list? lst_585)(void)(let-values()(in-list lst_585)))"
"((letrec-values(((for-loop_586)"
"(lambda(fold-var_587 lst_588)"
"(if(pair? lst_588)"
"(let-values(((s_589)(unsafe-car lst_588)))"
"(if #t"
"(let-values(((fold-var_590)"
"(let-values(((fold-var_591) fold-var_587))"
"(let-values(((fold-var_592)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_591))))"
"(values fold-var_592)))))"
"(if #t(for-loop_586 fold-var_590(unsafe-cdr lst_588)) fold-var_590))"
" fold-var_587))"
" fold-var_587))))"
" for-loop_586)"
" null"
" lst_585)))))))"
"(list* 'begin finish_584 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_581 '((apply values args)))) '((void))))))))"
"(define-values"
"(compiled-tops->compiled-top4.1)"
"(lambda(to-source?1_1 to-source?2_2 cims3_3)"
"(let-values(((cims_4) cims3_3))"
"(let-values(((to-source?_5)(if to-source?2_2 to-source?1_1 #f)))"
"(let-values()"
"(let-values(((ht_6)"
"(let-values(((lst_7) cims_4)((start_8) 0))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"(if(exact-nonnegative-integer? start_8)(void)(let-values()(in-naturals start_8)))"
"((letrec-values(((for-loop_9)"
"(lambda(table_10 lst_11 pos_12)"
"(if(if(pair? lst_11) #t #f)"
"(let-values(((cim_13)(unsafe-car lst_11))((i_14) pos_12))"
"(if(if #t #t #f)"
"(let-values(((table_15)"
"(let-values(((table_16) table_10))"
"(let-values(((table_17)"
"(let-values()"
"(let-values(((key_18 val_19)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_14))"
"((if to-source?_5"
" values"
" compiled-in-memory-linklet-directory)"
" cim_13)))))"
"(hash-set"
" table_16"
" key_18"
" val_19)))))"
"(values table_17)))))"
"(if(if #t #t #f)"
"(for-loop_9 table_15(unsafe-cdr lst_11)(+ pos_12 1))"
" table_15))"
" table_10))"
" table_10))))"
" for-loop_9)"
" '#hasheq()"
" lst_7"
" start_8)))))"
"(if to-source?_5"
"(let-values() ht_6)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_6)"
" 0"
" 0"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_4"
" null)))))))))"
"(define-values"
"(unpack5.1)"
"(lambda(given-kws_20 given-args_21 cims3_22)"
"(let-values(((to-source?2_23)(pair? given-kws_20)))"
"(let-values(((to-source?1_24)(if to-source?2_23(car given-args_21)(void))))"
"(compiled-tops->compiled-top4.1 to-source?1_24 to-source?2_23 cims3_22)))))"
"(define-values"
"(compiled-tops->compiled-top6.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_25 given-argc_26)"
"(if(= given-argc_26 3)"
"(let-values(((l1_27) given-kws_25))"
"(let-values(((l1_28)(if(null? l1_27) l1_27(if(eq?(car l1_27) '#:to-source?)(cdr l1_27) l1_27))))"
"(null? l1_28)))"
" #f))"
"(case-lambda((given-kws_29 given-args_30 cims_31)(unpack5.1 given-kws_29 given-args_30 cims_31)))"
" null"
" '(#:to-source?)"
"(let-values(((compiled-tops->compiled-top_32)(case-lambda((cims_33)(unpack5.1 null null cims_33)))))"
" compiled-tops->compiled-top_32)))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_34)"
"(let-values(((ht_35)(1/linklet-directory->hash ld_34)))"
"(alt-reverse"
"(let-values(((start_36) 0)((end_37)(hash-count ht_35))((inc_38) 1))"
"(begin"
"(if(if(real? start_36)(if(real? end_37)(real? inc_38) #f) #f)"
"(void)"
"(let-values()(in-range start_36 end_37 inc_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 pos_41)"
"(if(< pos_41 end_37)"
"(let-values(((i_42) pos_41))"
"(if #t"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44) fold-var_40))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" ht_35"
"(string->symbol(number->string i_42))))"
" fold-var_44))))"
"(values fold-var_45)))))"
"(if #t(for-loop_39 fold-var_43(+ pos_41 inc_38)) fold-var_43))"
" fold-var_40))"
" fold-var_40))))"
" for-loop_39)"
" null"
" start_36)))))))"
"(define-values"
"(compile-single)"
"(lambda(s_1 cctx_2)"
"(let-values(((...nder/compile/top.rkt:25:2_3) compile-top11.1)"
"((s12_4) s_1)"
"((cctx13_5) cctx_2)"
"((temp14_6) #f)"
"((temp15_7) #t))"
"(if(variable-reference-constant?(#%variable-reference compile-top11.1))"
"(compile-top9.1 temp14_6 #t temp15_7 #t #f #f s12_4 cctx13_5)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:25:2_3"
" keyword-procedure-extract"
" '(#:serializable? #:single-expression?)"
" 4)"
" '(#:serializable? #:single-expression?)"
"(list temp14_6 temp15_7)"
" s12_4"
" cctx13_5)))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_8"
" serializable?4_9"
" single-expression?2_10"
" single-expression?5_11"
" to-source?3_12"
" to-source?6_13"
" s7_14"
" cctx8_15)"
"(let-values(((s_16) s7_14))"
"(let-values(((cctx_17) cctx8_15))"
"(let-values(((serializable?_18)(if serializable?4_9 serializable?1_8 #t)))"
"(let-values(((single-expression?_19)(if single-expression?5_11 single-expression?2_10 #f)))"
"(let-values(((to-source?_20)(if to-source?6_13 to-source?3_12 #f)))"
"(let-values()"
"(let-values(((phase_21)(compile-context-phase cctx_17)))"
"(let-values(((mpis_22)(make-module-path-index-table)))"
"(let-values(((body-linklets_23"
" min-phase_24"
" max-phase_25"
" phase-to-link-module-uses_26"
" phase-to-link-module-uses-expr_27"
" phase-to-link-extra-inspectorsss_28"
" syntax-literalss_29"
" no-root-context-syntax-literals_30)"
"(let-values(((...nder/compile/top.rkt:53:4_33) compile-forms18.1)"
"((temp16_34)(list s_16))"
"((cctx17_35) cctx_17)"
"((mpis18_36) mpis_22)"
"((temp19_37)"
"(if single-expression?_19"
"(list* '()(list syntax-literalss-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literalss-id)"
" instance-imports)))"
"((to-source?20_38) to-source?_20)"
"((compile-top-level-require21_39) compile-top-level-require))"
"(if(variable-reference-constant?(#%variable-reference compile-forms18.1))"
"(compile-forms16.1"
" temp19_37"
" #f"
" #f"
" #f"
" #f"
" compile-top-level-require21_39"
" #t"
" #f"
" #f"
" to-source?20_38"
" #t"
" temp16_34"
" cctx17_35"
" mpis18_36)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:53:4_33"
" keyword-procedure-extract"
" '(#:body-imports #:other-form-callback #:to-source?)"
" 5)"
" '(#:body-imports #:other-form-callback #:to-source?)"
"(list temp19_37 compile-top-level-require21_39 to-source?20_38)"
" temp16_34"
" cctx17_35"
" mpis18_36)))))"
"(let-values(((add-metadata_31)"
"(lambda(ht_40)"
"(let-values(((ht_41)(hash-set ht_40 'original-phase phase_21)))"
"(let-values(((ht_42)(hash-set ht_41 'max-phase max-phase_25))) ht_42)))))"
"(let-values(((bundle_32)"
"((if to-source?_20 values 1/hash->linklet-bundle)"
"(add-metadata_31"
"(if serializable?_18"
"(let-values()"
"(let-values(((syntax-literalss-expr_43)"
"(generate-eager-syntax-literals!"
" syntax-literalss_29"
" mpis_22"
" phase_21"
"(compile-context-self cctx_17)"
"(compile-context-namespace cctx_17))))"
"(let-values(((link-linklet_44)"
"((if to-source?_20 values 1/compile-linklet)"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literalss-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_22))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_21) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_27)"
"(list"
" 'define-values"
"(list syntax-literalss-id)"
" syntax-literalss-expr_43)))))"
"(hash-set body-linklets_23 'link link-linklet_44))))"
"(let-values() body-linklets_23))))))"
"(if to-source?_20"
"(let-values()(hasheq #f bundle_32))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_32))"
" phase_21"
" max-phase_25"
" phase-to-link-module-uses_26"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_28"
"(mpis-as-vector mpis_22)"
"(syntax-literals-as-vectors syntax-literalss_29 phase_21)"
" null"
" null))))))))))))))))"
"(define-values"
"(unpack10.1$1)"
"(lambda(given-kws_45 given-args_46 s7_47 cctx8_48)"
"(let-values(((serializable?4_49)(if(pair? given-kws_45)(eq? '#:serializable?(car given-kws_45)) #f)))"
"(let-values(((serializable?1_50)(if serializable?4_49(car given-args_46)(void)))"
"((given-kws_51)(if serializable?4_49(cdr given-kws_45) given-kws_45))"
"((given-args_52)(if serializable?4_49(cdr given-args_46) given-args_46)))"
"(let-values(((single-expression?5_53)"
"(if(pair? given-kws_51)(eq? '#:single-expression?(car given-kws_51)) #f)))"
"(let-values(((single-expression?2_54)(if single-expression?5_53(car given-args_52)(void)))"
"((given-kws_55)(if single-expression?5_53(cdr given-kws_51) given-kws_51))"
"((given-args_56)(if single-expression?5_53(cdr given-args_52) given-args_52)))"
"(let-values(((to-source?6_57)(pair? given-kws_55)))"
"(let-values(((to-source?3_58)(if to-source?6_57(car given-args_56)(void))))"
"(compile-top9.1"
" serializable?1_50"
" serializable?4_49"
" single-expression?2_54"
" single-expression?5_53"
" to-source?3_58"
" to-source?6_57"
" s7_47"
" cctx8_48)))))))))"
"(define-values"
"(compile-top11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_59 given-argc_60)"
"(if(= given-argc_60 4)"
"(let-values(((l1_61) given-kws_59))"
"(let-values(((l1_62)(if(null? l1_61) l1_61(if(eq?(car l1_61) '#:serializable?)(cdr l1_61) l1_61))))"
"(let-values(((l1_63) l1_62))"
"(let-values(((l1_64)"
"(if(null? l1_63) l1_63(if(eq?(car l1_63) '#:single-expression?)(cdr l1_63) l1_63))))"
"(let-values(((l1_65) l1_64))"
"(let-values(((l1_66)(if(null? l1_65) l1_65(if(eq?(car l1_65) '#:to-source?)(cdr l1_65) l1_65))))"
"(null? l1_66)))))))"
" #f))"
"(case-lambda((given-kws_67 given-args_68 s_69 cctx_70)(unpack10.1$1 given-kws_67 given-args_68 s_69 cctx_70)))"
" null"
" '(#:serializable? #:single-expression? #:to-source?)"
"(let-values(((compile-top_71)(case-lambda((s_72 cctx_73)(unpack10.1$1 null null s_72 cctx_73)))))"
" compile-top_71)))"
"(define-values"
"(compile-top-level-require)"
"(lambda(s_74 cctx_75)"
"(let-values(((phase_76)(compile-context-phase cctx_75)))"
"(let-values(((tmp_77)(core-form-sym s_74 phase_76)))"
"(if(equal? tmp_77 '#%require)"
"(let-values()"
"(let-values(((form-stx_78)(compile-quote-syntax s_74 phase_76 cctx_75)))"
"(list top-level-require!-id form-stx_78 ns-id)))"
"(let-values() #f))))))"
"(define-values"
"(any-side-effects?6.1)"
"(lambda(locals1_1 locals2_2 e3_3 expected-results4_4 required-reference?5_5)"
"(let-values(((e_6) e3_3))"
"(let-values(((expected-results_7) expected-results4_4))"
"(let-values(((required-reference?_8) required-reference?5_5))"
"(let-values(((locals_9)(if locals2_2 locals1_1 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_10)"
"((letrec-values(((loop_11)"
"(lambda(e_12 locals_13)"
"(let-values(((tmp_14)"
"(if(pair?(correlated-e e_12))"
"(correlated-e(car(correlated-e e_12)))"
" #f)))"
"(if(if(equal? tmp_14 'quote)"
" #t"
"(if(equal? tmp_14 'lambda)"
" #t"
"(if(equal? tmp_14 'case-lambda)"
" #t"
"(equal? tmp_14 '#%variable-reference))))"
"(let-values() 1)"
"(if(if(equal? tmp_14 'letrec-values)"
" #t"
"(equal? tmp_14 'let-values))"
"(let-values()"
"(let-values(((ok?_15 _9_16 ids10_17 rhs11_18 body12_19)"
"(let-values(((s_34) e_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_35) s_34))"
"(let-values(((_9_36"
" ids10_37"
" rhs11_38"
" body12_39)"
"(let-values(((s_40)"
"(if(syntax?$2"
" s_34)"
"(syntax-e$3"
" s_34)"
" s_34)))"
"(if(pair? s_40)"
"(let-values(((_13_41)"
"(let-values(((s_45)"
"(car"
" s_40)))"
" s_45))"
"((ids14_42"
" rhs15_43"
" body16_44)"
"(let-values(((s_46)"
"(cdr"
" s_40)))"
"(let-values(((s_47)"
"(if(syntax?$2"
" s_46)"
"(syntax-e$3"
" s_46)"
" s_46)))"
"(if(pair?"
" s_47)"
"(let-values(((ids17_48"
" rhs18_49)"
"(let-values(((s_51)"
"(car"
" s_47)))"
"(let-values(((s_52)"
"(if(syntax?$2"
" s_51)"
"(syntax-e$3"
" s_51)"
" s_51)))"
"(let-values(((flat-s_53)"
"(to-syntax-list.1$1"
" s_52)))"
"(if(not"
" flat-s_53)"
"(let-values()"
"((lambda(false_54"
" str_55"
" e_56)"
"(error"
" str_55))"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_35))"
"(if #f"
"(let-values()"
"((lambda(false_57"
" str_58"
" e_59)"
"(error"
" str_58))"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_35))"
"(let-values()"
"(let-values(((ids_60"
" rhs_61)"
"(let-values(((lst_62)"
" flat-s_53))"
"(begin"
"(if(list?"
" lst_62)"
"(void)"
"(let-values()"
"(in-list"
" lst_62)))"
"((letrec-values(((for-loop_63)"
"(lambda(ids_64"
" rhs_65"
" lst_66)"
"(if(pair?"
" lst_66)"
"(let-values(((s_67)"
"(unsafe-car"
" lst_66)))"
"(if #t"
"(let-values(((ids_68"
" rhs_69)"
"(let-values(((ids_70)"
" ids_64)"
"((rhs_71)"
" rhs_65))"
"(let-values(((ids_72"
" rhs_73)"
"(let-values()"
"(let-values(((ids24_74"
" rhs25_75)"
"(let-values()"
"(let-values(((s_76)"
"(if(syntax?$2"
" s_67)"
"(syntax-e$3"
" s_67)"
" s_67)))"
"(if(pair?"
" s_76)"
"(let-values(((ids20_77)"
"(let-values(((s_79)"
"(car"
" s_76)))"
" s_79))"
"((rhs21_78)"
"(let-values(((s_80)"
"(cdr"
" s_76)))"
"(let-values(((s_81)"
"(if(syntax?$2"
" s_80)"
"(syntax-e$3"
" s_80)"
" s_80)))"
"(if(pair?"
" s_81)"
"(let-values(((rhs22_82)"
"(let-values(((s_83)"
"(car"
" s_81)))"
" s_83))"
"(()"
"(let-values(((s_84)"
"(cdr"
" s_81)))"
"(let-values(((s_85)"
"(if(syntax?$2"
" s_84)"
"(syntax-e$3"
" s_84)"
" s_84)))"
"(if(null?"
" s_85)"
"(values)"
"((lambda(false_86"
" str_87"
" e_88)"
"(error"
" str_87))"
" #f"
"                                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_35))))))"
"(values"
" rhs22_82))"
"((lambda(false_89"
" str_90"
" e_91)"
"(error"
" str_90))"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_35))))))"
"(values"
" ids20_77"
" rhs21_78))"
"((lambda(false_92"
" str_93"
" e_94)"
"(error"
" str_93))"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_35))))))"
"(values"
"(cons"
" ids24_74"
" ids_70)"
"(cons"
" rhs25_75"
" rhs_71))))))"
"(values"
" ids_72"
" rhs_73)))))"
"(if #t"
"(for-loop_63"
" ids_68"
" rhs_69"
"(unsafe-cdr"
" lst_66))"
"(values"
" ids_68"
" rhs_69)))"
"(values"
" ids_64"
" rhs_65)))"
"(values"
" ids_64"
" rhs_65)))))"
" for-loop_63)"
" null"
" null"
" lst_62)))))"
"(values"
"(alt-reverse"
" ids_60)"
"(alt-reverse"
" rhs_61))))))))))"
"((body19_50)"
"(let-values(((s_95)"
"(cdr"
" s_47)))"
"(let-values(((s_96)"
"(if(syntax?$2"
" s_95)"
"(syntax-e$3"
" s_95)"
" s_95)))"
"(if(pair?"
" s_96)"
"(let-values(((body23_97)"
"(let-values(((s_98)"
"(car"
" s_96)))"
" s_98))"
"(()"
"(let-values(((s_99)"
"(cdr"
" s_96)))"
"(let-values(((s_100)"
"(if(syntax?$2"
" s_99)"
"(syntax-e$3"
" s_99)"
" s_99)))"
"(if(null?"
" s_100)"
"(values)"
"((lambda(false_101"
" str_102"
" e_103)"
"(error"
" str_102))"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_35))))))"
"(values"
" body23_97))"
"((lambda(false_104"
" str_105"
" e_106)"
"(error"
" str_105))"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_35))))))"
"(values"
" ids17_48"
" rhs18_49"
" body19_50))"
"((lambda(false_107"
" str_108"
" e_109)"
"(error"
" str_108))"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_35))))))"
"(values"
" _13_41"
" ids14_42"
" rhs15_43"
" body16_44))"
"((lambda(false_110"
" str_111"
" e_112)"
"(error str_111))"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_35)))))"
"(values"
" #t"
" _9_36"
" ids10_37"
" rhs11_38"
" body12_39)))"
"(values #f #f #f #f #f)))))"
"(if(not"
"(let-values(((lst_113) ids10_17)((lst_114) rhs11_18))"
"(begin"
"(if(list? lst_113)"
"(void)"
"(let-values()(in-list lst_113)))"
"(if(list? lst_114)"
"(void)"
"(let-values()(in-list lst_114)))"
"((letrec-values(((for-loop_115)"
"(lambda(result_116"
" lst_117"
" lst_118)"
"(if(if(pair? lst_117)"
"(pair? lst_118)"
" #f)"
"(let-values(((ids_119)"
"(unsafe-car"
" lst_117))"
"((rhs_120)"
"(unsafe-car"
" lst_118)))"
"(if(if #t #t #f)"
"(let-values(((result_121)"
"(let-values(((result_122)"
" result_116))"
"(let-values(((result_123)"
"(let-values()"
"(let-values()"
"(let-values(((...pile/side-effect.rkt:27:21_124)"
" any-side-effects?8.1)"
"((rhs26_125)"
" rhs_120)"
"((temp27_126)"
"(correlated-length"
" ids_119))"
"((required-reference?28_127)"
" required-reference?_8)"
"((locals29_128)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals29_128"
" #t"
" rhs26_125"
" temp27_126"
" required-reference?28_127)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:27:21_124"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals29_128)"
" rhs26_125"
" temp27_126"
" required-reference?28_127)))))))"
"(values"
" result_123)))))"
"(if(if(if #t"
"(not"
"((lambda x_129"
" result_121)"
" ids_119))"
" #f)"
"(if #t"
"(not"
"((lambda x_130"
" result_121)"
" rhs_120))"
" #f)"
" #f)"
"(for-loop_115"
" result_121"
"(unsafe-cdr lst_117)"
"(unsafe-cdr lst_118))"
" result_121))"
" result_116))"
" result_116))))"
" for-loop_115)"
" #f"
" lst_113"
" lst_114))))"
"(loop_11"
" body12_19"
"(add-binding-info locals_13 ids10_17 rhs11_18))"
" #f)))"
"(if(equal? tmp_14 'values)"
"(let-values()"
"(let-values(((ok?_131 _30_132 e31_133)"
"(let-values(((s_144) e_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_145) s_144))"
"(let-values(((_30_146 e31_147)"
"(let-values(((s_148)"
"(if(syntax?$2"
" s_144)"
"(syntax-e$3"
" s_144)"
" s_144)))"
"(if(pair? s_148)"
"(let-values(((_32_149)"
"(let-values(((s_151)"
"(car"
" s_148)))"
" s_151))"
"((e33_150)"
"(let-values(((s_152)"
"(cdr"
" s_148)))"
"(let-values(((s_153)"
"(if(syntax?$2"
" s_152)"
"(syntax-e$3"
" s_152)"
" s_152)))"
"(let-values(((flat-s_154)"
"(to-syntax-list.1$1"
" s_153)))"
"(if(not"
" flat-s_154)"
"(let-values()"
"((lambda(false_155"
" str_156"
" e_157)"
"(error"
" str_156))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_145))"
"(if #f"
"(let-values()"
"((lambda(false_158"
" str_159"
" e_160)"
"(error"
" str_159))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_145))"
"(let-values()"
" flat-s_154))))))))"
"(values"
" _32_149"
" e33_150))"
"((lambda(false_161"
" str_162"
" e_163)"
"(error str_162))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_145)))))"
"(values #t _30_146 e31_147)))"
"(values #f #f #f)))))"
"(if(let-values(((lst_164) e31_133))"
"(begin"
"(if(list? lst_164)"
"(void)"
"(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(result_166 lst_167)"
"(if(pair? lst_167)"
"(let-values(((e_168)"
"(unsafe-car"
" lst_167)))"
"(if #t"
"(let-values(((result_169)"
"(let-values(((result_170)"
" result_166))"
"(let-values(((result_171)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:33:21_172)"
" any-side-effects?8.1)"
"((e34_173)"
" e_168)"
"((temp35_174)"
" 1)"
"((required-reference?36_175)"
" required-reference?_8)"
"((locals37_176)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals37_176"
" #t"
" e34_173"
" temp35_174"
" required-reference?36_175)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:33:21_172"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals37_176)"
" e34_173"
" temp35_174"
" required-reference?36_175))))))))"
"(values"
" result_171)))))"
"(if(if #t"
"(not"
"((lambda x_177"
"(not"
" result_169))"
" e_168))"
" #f)"
"(for-loop_165"
" result_169"
"(unsafe-cdr lst_167))"
" result_169))"
" result_166))"
" result_166))))"
" for-loop_165)"
" #t"
" lst_164)))"
"(length e31_133)"
" #f)))"
"(if(equal? tmp_14 'make-struct-type)"
"(let-values()"
"(if(ok-make-struct-type? e_12 required-reference?_8) 5 #f))"
"(if(equal? tmp_14 'make-struct-field-accessor)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'accessor)"
" 1"
" #f))"
"(if(equal? tmp_14 'make-struct-field-mutator)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'mutator)"
" 1"
" #f))"
"(let-values()"
"(let-values(((v_178)(correlated-e e_12)))"
"(if(let-values(((or-part_179)"
"(self-quoting-in-linklet? v_178)))"
"(if or-part_179"
" or-part_179"
"(if(symbol? v_178)"
"(let-values(((or-part_180)"
"(hash-ref"
" locals_13"
" v_178"
" #f)))"
"(if or-part_180"
" or-part_180"
"(let-values(((or-part_181)"
"(built-in-symbol? v_178)))"
"(if or-part_181"
" or-part_181"
"(required-reference?_8 v_178)))))"
" #f)))"
" 1"
" #f)))))))))))))"
" loop_11)"
" e_6"
" locals_9)))"
"(not"
"(if actual-results_10"
"(let-values(((or-part_182)(not expected-results_7)))"
"(if or-part_182 or-part_182(= actual-results_10 expected-results_7)))"
" #f))))))))))"
"(define-values"
"(unpack7.1$2)"
"(lambda(given-kws_183 given-args_184 e3_185 expected-results4_186 required-reference?5_187)"
"(let-values(((locals2_188)(pair? given-kws_183)))"
"(let-values(((locals1_189)(if locals2_188(car given-args_184)(void))))"
"(any-side-effects?6.1 locals1_189 locals2_188 e3_185 expected-results4_186 required-reference?5_187)))))"
"(define-values"
"(any-side-effects?8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_190 given-argc_191)"
"(if(= given-argc_191 5)"
"(let-values(((l1_192) given-kws_190))"
"(let-values(((l1_193)(if(null? l1_192) l1_192(if(eq?(car l1_192) '#:locals)(cdr l1_192) l1_192))))"
"(null? l1_193)))"
" #f))"
"(case-lambda"
"((given-kws_194 given-args_195 e_196 expected-results_197 required-reference?_198)"
"(unpack7.1$2 given-kws_194 given-args_195 e_196 expected-results_197 required-reference?_198)))"
" null"
" '(#:locals)"
"(let-values(((any-side-effects?_199)"
"(case-lambda"
"((e_200 expected-results_201 required-reference?_202)"
"(unpack7.1$2 null null e_200 expected-results_201 required-reference?_202)))))"
" any-side-effects?_199)))"
"(define-values"
"(struct:struct-op make-struct-op struct-op? struct-op-type struct-op-field-count)"
"(let-values(((struct:_203 make-_204 ?_205 -ref_206 -set!_207)"
"(let-values()(make-struct-type 'struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'struct-op))))"
"(values"
" struct:_203"
" make-_204"
" ?_205"
"(make-struct-field-accessor -ref_206 0 'type)"
"(make-struct-field-accessor -ref_206 1 'field-count))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_229 idss_230 rhss_231)"
"(let-values(((lst_232) idss_230)((lst_233) rhss_231))"
"(begin"
"(if(list? lst_232)(void)(let-values()(in-list lst_232)))"
"(if(list? lst_233)(void)(let-values()(in-list lst_233)))"
"((letrec-values(((for-loop_234)"
"(lambda(locals_235 lst_236 lst_237)"
"(if(if(pair? lst_236)(pair? lst_237) #f)"
"(let-values(((ids_238)(unsafe-car lst_236))((rhs_239)(unsafe-car lst_237)))"
"(if(if #t #t #f)"
"(let-values(((locals_240)"
"(let-values(((locals_241) locals_235))"
"(let-values(((locals_242)"
"(let-values()"
"((letrec-values(((loop_243)"
"(lambda(rhs_244)"
"(let-values(((tmp_245)"
"(if(pair?"
"(correlated-e"
" rhs_244))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_244)))"
" #f)))"
"(if(equal?"
" tmp_245"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_246)"
"(extract-struct-field-count-lower-bound"
" rhs_244)))"
"(let-values(((lst_247)"
"(correlated->list"
" ids_238))"
"((lst_248)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_247)"
"(void)"
"(let-values()"
"(in-list"
" lst_247)))"
"(if(list? lst_248)"
"(void)"
"(let-values()"
"(in-list"
" lst_248)))"
"((letrec-values(((for-loop_249)"
"(lambda(locals_250"
" lst_251"
" lst_252)"
"(if(if(pair?"
" lst_251)"
"(pair?"
" lst_252)"
" #f)"
"(let-values(((id_253)"
"(unsafe-car"
" lst_251))"
"((type_254)"
"(unsafe-car"
" lst_252)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((locals_255)"
"(let-values(((locals_256)"
" locals_250))"
"(let-values(((locals_257)"
"(let-values()"
"(hash-set"
" locals_256"
"(correlated-e"
" id_253)"
"(make-struct-op"
" type_254"
" field-count_246)))))"
"(values"
" locals_257)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_249"
" locals_255"
"(unsafe-cdr"
" lst_251)"
"(unsafe-cdr"
" lst_252))"
" locals_255))"
" locals_250))"
" locals_250))))"
" for-loop_249)"
" locals_241"
" lst_247"
" lst_248)))))"
"(if(equal?"
" tmp_245"
" 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_244)))"
"(loop_243"
"(caddr"
"(correlated->list"
" rhs_244)))"
"(loop_243 #f)))"
"(let-values()"
"(let-values(((lst_258)"
"(correlated->list"
" ids_238)))"
"(begin"
"(if(list? lst_258)"
"(void)"
"(let-values()"
"(in-list"
" lst_258)))"
"((letrec-values(((for-loop_259)"
"(lambda(locals_260"
" lst_261)"
"(if(pair?"
" lst_261)"
"(let-values(((id_262)"
"(unsafe-car"
" lst_261)))"
"(if #t"
"(let-values(((locals_263)"
"(let-values(((locals_264)"
" locals_260))"
"(let-values(((locals_265)"
"(let-values()"
"(hash-set"
" locals_264"
" id_262"
" #t))))"
"(values"
" locals_265)))))"
"(if #t"
"(for-loop_259"
" locals_263"
"(unsafe-cdr"
" lst_261))"
" locals_263))"
" locals_260))"
" locals_260))))"
" for-loop_259)"
" locals_241"
" lst_258))))))))))"
" loop_243)"
" rhs_239))))"
"(values locals_242)))))"
"(if(if #t #t #f)"
"(for-loop_234 locals_240(unsafe-cdr lst_236)(unsafe-cdr lst_237))"
" locals_240))"
" locals_235))"
" locals_235))))"
" for-loop_234)"
" locals_229"
" lst_232"
" lst_233)))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_266 required-reference?_267)"
"(let-values(((l_268)(correlated->list e_266)))"
"(let-values(((init-field-count-expr_269)(if(>(length l_268) 3)(list-ref l_268 3) #f)))"
"(let-values(((immutables-expr_270)"
"(let-values(((or-part_271)(if(>(length l_268) 9)(list-ref l_268 9) #f)))"
"(if or-part_271 or-part_271 'null))))"
"(if(>=(length l_268) 5)"
"(if(<=(length l_268) 12)"
"(let-values(((pos->vals_272 pos-next_273 init_274 pos-cont?_275 val-cont?_276 all-cont?_277)"
"(make-sequence '(arg)(cdr l_268)))"
"((pos->vals_278 pos-next_279 init_280 pos-cont?_281 val-cont?_282 all-cont?_283)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_284)(quoted? symbol? v_284))"
"(lambda(v_285)(quoted? false? v_285))"
"(lambda(v_286)(field-count-expr-to-field-count v_286))"
"(lambda(v_287)(field-count-expr-to-field-count v_287))"
"(lambda(v_288)"
"(not"
"(let-values(((v40_289) v_288)"
"((temp41_290) 1)"
"((required-reference?42_291) required-reference?_267))"
"(if(variable-reference-constant?(#%variable-reference any-side-effects?8.1))"
"(any-side-effects?6.1 #f #f v40_289 temp41_290 required-reference?42_291)"
"(any-side-effects?8.1 v40_289 temp41_290 required-reference?42_291)))))"
"(lambda(v_292)(known-good-struct-properties? v_292 immutables-expr_270))"
"(lambda(v_293)(inspector-or-false? v_293))"
"(lambda(v_294)(procedure-spec? v_294 immutables-expr_270))"
"(lambda(v_295)(immutables-ok? v_295 init-field-count-expr_269))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_296)"
"(lambda(result_297 pos_298 pos_299)"
"(if(if(if pos-cont?_275(pos-cont?_275 pos_298) #t)"
"(if pos-cont?_281(pos-cont?_281 pos_299) #t)"
" #f)"
"(let-values(((arg_300)(pos->vals_272 pos_298))"
"((pred_301)(pos->vals_278 pos_299)))"
"(if(if(if val-cont?_276(val-cont?_276 arg_300) #t)"
"(if val-cont?_282(val-cont?_282 pred_301) #t)"
" #f)"
"(let-values(((result_302)"
"(let-values(((result_303) result_297))"
"(let-values(((result_304)"
"(let-values()"
"(let-values()(pred_301 arg_300)))))"
"(values result_304)))))"
"(if(if(if(if all-cont?_277(all-cont?_277 pos_298 arg_300) #t)"
"(not((lambda x_305(not result_302)) arg_300))"
" #f)"
"(if(if all-cont?_283(all-cont?_283 pos_299 pred_301) #t)"
"(not((lambda x_306(not result_302)) pred_301))"
" #f)"
" #f)"
"(for-loop_296 result_302(pos-next_273 pos_298)(pos-next_279 pos_299))"
" result_302))"
" result_297))"
" result_297))))"
" for-loop_296)"
" #t"
" init_274"
" init_280)))"
" #f)"
" #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_307)"
"(let-values(((l_308)(correlated->list e_307)))"
"(+(field-count-expr-to-field-count(list-ref l_308 3))(field-count-expr-to-field-count(list-ref l_308 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_309 v_310)"
"(let-values(((or-part_311)"
"(if(pair?(correlated-e v_310))"
"(if(eq?(correlated-e(car(correlated-e v_310))) 'quote)"
"(val?_309(correlated-e(correlated-cadr v_310)))"
" #f)"
" #f)))"
"(if or-part_311 or-part_311(val?_309(correlated-e v_310))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_312)(if(pair?(correlated-e v_312))(correlated-e(correlated-cadr v_312))(correlated-e v_312))))"
"(define-values(false?)(lambda(v_313)(eq?(correlated-e v_313) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_314)(if(quoted? exact-nonnegative-integer? v_314)(quoted-value v_314) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_315)"
"(let-values(((or-part_316)(quoted? false? v_315)))"
"(if or-part_316"
" or-part_316"
"(if(= 1(correlated-length v_315))(eq? 'current-inspector(correlated-e(car(correlated-e v_315)))) #f)))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_317 immutables-expr_318)"
"(let-values(((or-part_319)(quoted? null? v_317)))"
"(if or-part_319"
" or-part_319"
"(let-values(((or-part_320)(eq? 'null(correlated-e v_317))))"
"(if or-part_320"
" or-part_320"
"(if(pair?(correlated-e v_317))"
"(if(eq?(correlated-e(car(correlated-e v_317))) 'list)"
"(if(let-values(((lst_321)(cdr(correlated->list v_317))))"
"(begin"
"(if(list? lst_321)(void)(let-values()(in-list lst_321)))"
"((letrec-values(((for-loop_322)"
"(lambda(result_323 lst_324)"
"(if(pair? lst_324)"
"(let-values(((prop+val_325)(unsafe-car lst_324)))"
"(if #t"
"(let-values(((result_326)"
"(let-values(((result_327) result_323))"
"(let-values(((result_328)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_325)"
" 3)"
"(let-values(((prop+val_329)"
"(correlated->list"
" prop+val_325)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_329)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_329 1)"
"(list-ref prop+val_329 2)"
" immutables-expr_318)"
" #f))"
" #f)))))"
"(values result_328)))))"
"(if(if #t(not((lambda x_330(not result_326)) prop+val_325)) #f)"
"(for-loop_322 result_326(unsafe-cdr lst_324))"
" result_326))"
" result_323))"
" result_323))))"
" for-loop_322)"
" #t"
" lst_321)))"
"(="
"(sub1(correlated-length v_317))"
"(set-count"
"(let-values(((lst_331)(cdr(correlated->list v_317))))"
"(begin"
"(if(list? lst_331)(void)(let-values()(in-list lst_331)))"
"((letrec-values(((for-loop_332)"
"(lambda(table_333 lst_334)"
"(if(pair? lst_334)"
"(let-values(((prop+val_335)(unsafe-car lst_334)))"
"(if #t"
"(let-values(((table_336)"
"(let-values(((table_337) table_333))"
"(let-values(((table_338)"
"(let-values()"
"(let-values(((key_339 val_340)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_335)"
" 1)))"
" #t))))"
"(hash-set"
" table_337"
" key_339"
" val_340)))))"
"(values table_338)))))"
"(if #t(for-loop_332 table_336(unsafe-cdr lst_334)) table_336))"
" table_333))"
" table_333))))"
" for-loop_332)"
" '#hash()"
" lst_331)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_341 val-expr_342 immutables-expr_343)"
"(let-values(((tmp_344)(correlated-e prop-expr_341)))"
"(if(equal? tmp_344 'prop:evt)"
"(let-values()(immutable-field? val-expr_342 immutables-expr_343))"
"(if(equal? tmp_344 'prop:procedure)"
"(let-values()(immutable-field? val-expr_342 immutables-expr_343))"
"(let-values() #f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_345 immutables-expr_346)"
"(if(quoted? exact-nonnegative-integer? val-expr_345)"
"(memv(quoted-value val-expr_345)(immutables-expr-to-immutables immutables-expr_346 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_347 fail-v_348)"
"(let-values(((tmp_349)(if(pair?(correlated-e e_347))(correlated-e(car(correlated-e e_347))) #f)))"
"(if(equal? tmp_349 'quote)"
"(let-values()"
"(let-values(((v_350)(correlated-cadr e_347)))"
"(let-values(((or-part_351)"
"(if(correlated-length v_350)"
"(let-values(((l_352)(map2 correlated-e(correlated->list v_350))))"
"(if(andmap2 exact-nonnegative-integer? l_352)"
"(if(=(length l_352)(set-count(list->set l_352))) l_352 #f)"
" #f))"
" #f)))"
"(if or-part_351 or-part_351 fail-v_348))))"
"(let-values() fail-v_348)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_353 immutables-expr_354)"
"(let-values(((or-part_355)(quoted? false? e_353)))"
"(if or-part_355"
" or-part_355"
"(if(quoted? exact-nonnegative-integer? e_353)"
"(memv(quoted-value e_353)(immutables-expr-to-immutables immutables-expr_354 null))"
" #f)))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_356 init-field-count-expr_357)"
"(let-values(((l_358)(immutables-expr-to-immutables e_356 #f)))"
"(let-values(((c_359)(field-count-expr-to-field-count init-field-count-expr_357)))"
"(if l_358"
"(let-values(((lst_360) l_358))"
"(begin"
"(if(list? lst_360)(void)(let-values()(in-list lst_360)))"
"((letrec-values(((for-loop_361)"
"(lambda(result_362 lst_363)"
"(if(pair? lst_363)"
"(let-values(((n_364)(unsafe-car lst_363)))"
"(if #t"
"(let-values(((result_365)"
"(let-values(((result_366) result_362))"
"(let-values(((result_367)"
"(let-values()(let-values()(< n_364 c_359)))))"
"(values result_367)))))"
"(if(if #t(not((lambda x_368(not result_365)) n_364)) #f)"
"(for-loop_361 result_365(unsafe-cdr lst_363))"
" result_365))"
" result_362))"
" result_362))))"
" for-loop_361)"
" #t"
" lst_360)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_369 locals_370 type_371)"
"(let-values(((l_372)(correlated->list e_369)))"
"(let-values(((a_373)(if(=(length l_372) 4)(hash-ref locals_370(correlated-e(list-ref l_372 1)) #f) #f)))"
"(if(struct-op? a_373)"
"(if(eq?(struct-op-type a_373) type_371)"
"(if(<(field-count-expr-to-field-count(list-ref l_372 2))(struct-op-field-count a_373))"
"(quoted? symbol?(list-ref l_372 3))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(compile-module13.1)"
"(lambda(as-submodule?3_2"
" as-submodule?8_3"
" self1_4"
" self6_5"
" serializable?4_6"
" serializable?9_7"
" to-source?5_8"
" to-source?10_9"
" with-submodules?2_10"
" with-submodules?7_11"
" s11_12"
" cctx12_13)"
"(let-values(((s_14) s11_12))"
"(let-values(((cctx_15) cctx12_13))"
"(let-values(((given-self_16)(if self6_5 self1_4 #f)))"
"(let-values(((with-submodules?_17)(if with-submodules?7_11 with-submodules?2_10 #t)))"
"(let-values(((as-submodule?_18)(if as-submodule?8_3 as-submodule?3_2 #f)))"
"(let-values(((serializable?_19)(if serializable?9_7 serializable?4_6 with-submodules?_17)))"
"(let-values(((to-source?_20)(if to-source?10_9 to-source?5_8 #f)))"
"(let-values()"
"(let-values(((ok?_21 module30_22 name31_23 initial-require32_24 mb33_25)"
"(let-values(((s_86)(syntax-disarm$1 s_14)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_87) s_86))"
"(let-values(((module30_88 name31_89 initial-require32_90 mb33_91)"
"(let-values(((s_92)"
"(if(syntax?$1 s_86)(syntax-e$1 s_86) s_86)))"
"(if(pair? s_92)"
"(let-values(((module34_93)"
"(let-values(((s_97)(car s_92))) s_97))"
"((name35_94 initial-require36_95 mb37_96)"
"(let-values(((s_98)(cdr s_92)))"
"(let-values(((s_99)"
"(if(syntax?$1 s_98)"
"(syntax-e$1 s_98)"
" s_98)))"
"(if(pair? s_99)"
"(let-values(((name38_100)"
"(let-values(((s_103)"
"(car s_99)))"
" s_103))"
"((initial-require39_101"
" mb40_102)"
"(let-values(((s_104)"
"(cdr s_99)))"
"(let-values(((s_105)"
"(if(syntax?$1"
" s_104)"
"(syntax-e$1"
" s_104)"
" s_104)))"
"(if(pair? s_105)"
"(let-values(((initial-require41_106)"
"(let-values(((s_108)"
"(car"
" s_105)))"
" s_108))"
"((mb42_107)"
"(let-values(((s_109)"
"(cdr"
" s_105)))"
"(let-values(((s_110)"
"(if(syntax?$1"
" s_109)"
"(syntax-e$1"
" s_109)"
" s_109)))"
"(if(pair?"
" s_110)"
"(let-values(((mb43_111)"
"(let-values(((s_112)"
"(car"
" s_110)))"
" s_112))"
"(()"
"(let-values(((s_113)"
"(cdr"
" s_110)))"
"(let-values(((s_114)"
"(if(syntax?$1"
" s_113)"
"(syntax-e$1"
" s_113)"
" s_113)))"
"(if(null?"
" s_114)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_87))))))"
"(values"
" mb43_111))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_87))))))"
"(values"
" initial-require41_106"
" mb42_107))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_87))))))"
"(values"
" name38_100"
" initial-require39_101"
" mb40_102))"
"(raise-syntax-error$1"
" #f"
"                                                                               \"bad syntax\""
" orig-s_87))))))"
"(values module34_93 name35_94 initial-require36_95 mb37_96))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_87)))))"
"(values #t module30_88 name31_89 initial-require32_90 mb33_91)))"
"(values #f #f #f #f #f)))))"
"(let-values(((ok?_40 #%module-begin44_41 body45_42)"
"(let-values(((s_115)(syntax-disarm$1 mb33_25)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_116) s_115))"
"(let-values(((#%module-begin44_117 body45_118)"
"(let-values(((s_119)"
"(if(syntax?$1 s_115)(syntax-e$1 s_115) s_115)))"
"(if(pair? s_119)"
"(let-values(((#%module-begin46_120)"
"(let-values(((s_122)(car s_119))) s_122))"
"((body47_121)"
"(let-values(((s_123)(cdr s_119)))"
"(let-values(((s_124)"
"(if(syntax?$1 s_123)"
"(syntax-e$1 s_123)"
" s_123)))"
"(let-values(((flat-s_125)"
"(to-syntax-list.1 s_124)))"
"(if(not flat-s_125)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_116))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_116))"
"(let-values() flat-s_125))))))))"
"(values #%module-begin46_120 body47_121))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_116)))))"
"(values #t #%module-begin44_117 body45_118)))"
"(values #f #f #f)))))"
"(let-values(((enclosing-self_53)(compile-context-module-self cctx_15)))"
"(let-values(((self_54)"
"(let-values(((or-part_126) given-self_16))"
"(if or-part_126"
" or-part_126"
"(make-generic-self-module-path-index"
"(make-self-module-path-index(syntax-e$1 name31_23) enclosing-self_53))))))"
"(let-values(((full-module-name_55)"
"(let-values(((parent-full-name_127)"
"(compile-context-full-module-name cctx_15))"
"((name_128)(syntax-e$1 name31_23)))"
"(if parent-full-name_127"
"(append"
"(if(list? parent-full-name_127)"
" parent-full-name_127"
"(list parent-full-name_127))"
"(list name_128))"
" name_128))))"
"(let-values(((requires_56)(syntax-property$1 s_14 'module-requires)))"
"(let-values(((provides_57)(syntax-property$1 s_14 'module-provides)))"
"(let-values(((encoded-root-expand-ctx-box_58)"
"(box(syntax-property$1 s_14 'module-root-expand-context))))"
"(let-values(((body-context-simple?_59)"
"(syntax-property$1 s_14 'module-body-context-simple?)))"
"(let-values(((language-info_60)"
"(filter-language-info(syntax-property$1 s_14 'module-language))))"
"(let-values(((bodys_61) body45_42))"
"(let-values(((empty-result-for-module->namespace?_62) #f))"
"(let-values(((mpis_63)(make-module-path-index-table)))"
"(let-values(((body-cctx_64)"
"(let-values(((the-struct_129) cctx_15))"
"(if(compile-context? the-struct_129)"
"(let-values(((phase48_130) 0)"
"((self49_131) self_54)"
"((module-self50_132) self_54)"
"((full-module-name51_133)"
" full-module-name_55)"
"((lazy-syntax-literals?52_134) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_129)"
" phase48_130"
" self49_131"
" module-self50_132"
" full-module-name51_133"
" lazy-syntax-literals?52_134"
"(compile-context-header the-struct_129)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"compile-context?\""
" the-struct_129)))))"
"(let-values(((cross-phase-persistent?_65) #f))"
"(let-values(((side-effects_66)(make-hasheqv)))"
"(let-values(((check-side-effects!_67)"
"(lambda(e_135"
" expected-results_136"
" phase_137"
" required-reference?_138)"
"(if(hash-ref side-effects_66 phase_137 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e53_139) e_135)"
"((expected-results54_140)"
" expected-results_136)"
"((required-reference?55_141)"
" required-reference?_138))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" #f"
" #f"
" e53_139"
" expected-results54_140"
" required-reference?55_141)"
"(any-side-effects?8.1"
" e53_139"
" expected-results54_140"
" required-reference?55_141)))"
"(let-values()"
"(hash-set! side-effects_66 phase_137 #t))"
"(void)))))))"
"(let-values(((body-linklets_68"
" min-phase_69"
" max-phase_70"
" phase-to-link-module-uses_71"
" phase-to-link-module-uses-expr_72"
" phase-to-link-extra-inspectorsss_73"
" syntax-literalss_74"
" root-ctx-syntax-literals_75)"
"(let-values(((...r/compile/module.rkt:91:4_142)"
" compile-forms18.1)"
"((bodys56_143) bodys_61)"
"((body-cctx57_144) body-cctx_64)"
"((mpis58_145) mpis_63)"
"((temp59_146)"
"(list"
"(list"
" syntax-literalss-id"
" get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((encoded-root-expand-ctx-box60_147)"
" encoded-root-expand-ctx-box_58)"
"((body-context-simple?61_148)"
" body-context-simple?_59)"
"((check-side-effects!62_149)"
" check-side-effects!_67)"
"((temp63_150)"
"(lambda(body_152 cctx_153)"
"(let-values(((tmp_154)"
"(core-form-sym"
" body_152"
"(compile-context-phase"
" cctx_153))))"
"(if(equal? tmp_154 '#%declare)"
"(let-values()"
"(let-values(((ok?_155"
" #%declare65_156"
" kw66_157)"
"(let-values(((s_168)"
" body_152))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_169)"
" s_168))"
"(let-values(((#%declare65_170"
" kw66_171)"
"(let-values(((s_172)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(pair?"
" s_172)"
"(let-values(((#%declare67_173)"
"(let-values(((s_175)"
"(car"
" s_172)))"
" s_175))"
"((kw68_174)"
"(let-values(((s_176)"
"(cdr"
" s_172)))"
"(let-values(((s_177)"
"(if(syntax?$1"
" s_176)"
"(syntax-e$1"
" s_176)"
" s_176)))"
"(let-values(((flat-s_178)"
"(to-syntax-list.1"
" s_177)))"
"(if(not"
" flat-s_178)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_169))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_169))"
"(let-values()"
" flat-s_178))))))))"
"(values"
" #%declare67_173"
" kw68_174))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_169)))))"
"(values"
" #t"
" #%declare65_170"
" kw66_171)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((lst_179)"
" kw66_157))"
"(begin"
"(if(list? lst_179)"
"(void)"
"(let-values()"
"(in-list"
" lst_179)))"
"((letrec-values(((for-loop_180)"
"(lambda(fold-var_181"
" lst_182)"
"(if(pair?"
" lst_182)"
"(let-values(((kw_183)"
"(unsafe-car"
" lst_182)))"
"(if #t"
"(let-values(((fold-var_184)"
"(let-values(((fold-var_185)"
" fold-var_181))"
"(let-values(((fold-var_186)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_183)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_65"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_183)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_62"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_58"
" #t)))"
"(void))))"
"(void)))))"
"(values"
" fold-var_186)))))"
"(if #t"
"(for-loop_180"
" fold-var_184"
"(unsafe-cdr"
" lst_182))"
" fold-var_184))"
" fold-var_181))"
" fold-var_181))))"
" for-loop_180)"
"(void)"
" lst_179)))"
" #f)))"
"(let-values() #f)))))"
"((to-source?64_151) to-source?_20))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-forms18.1))"
"(compile-forms16.1"
" temp59_146"
" check-side-effects!62_149"
" #t"
" encoded-root-expand-ctx-box60_147"
" #t"
" temp63_150"
" #t"
" body-context-simple?61_148"
" #t"
" to-source?64_151"
" #t"
" bodys56_143"
" body-cctx57_144"
" mpis58_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:91:4_142"
" keyword-procedure-extract"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
" 5)"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
"(list"
" temp59_146"
" check-side-effects!62_149"
" encoded-root-expand-ctx-box60_147"
" temp63_150"
" body-context-simple?61_148"
" to-source?64_151)"
" bodys56_143"
" body-cctx57_144"
" mpis58_145)))))"
"(let-values(((all-syntax-literalss_76)"
"(if root-ctx-syntax-literals_75"
"(append"
" syntax-literalss_74"
"(list root-ctx-syntax-literals_75))"
" syntax-literalss_74)))"
"(let-values(((pre-submodules_77)"
"(let-values(((...r/compile/module.rkt:118:25_187)"
" compile-submodules29.1)"
"((temp69_188) 'module)"
"((bodys70_189) bodys_61)"
"((with-submodules?71_190)"
" with-submodules?_17)"
"((serializable?72_191)"
" serializable?_19)"
"((to-source?73_192) to-source?_20)"
"((body-cctx74_193) body-cctx_64))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules29.1))"
"(compile-submodules27.1"
" bodys70_189"
" body-cctx74_193"
" serializable?72_191"
" to-source?73_192"
" with-submodules?71_190"
" temp69_188)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:118:25_187"
" keyword-procedure-extract"
" '(#:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
" 3)"
" '(#:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
"(list"
" bodys70_189"
" body-cctx74_193"
" serializable?72_191"
" to-source?73_192"
" with-submodules?71_190)"
" temp69_188)))))"
"(let-values(((post-submodules_78)"
"(let-values(((...r/compile/module.rkt:124:26_194)"
" compile-submodules29.1)"
"((temp75_195) 'module*)"
"((bodys76_196) bodys_61)"
"((with-submodules?77_197)"
" with-submodules?_17)"
"((serializable?78_198)"
" serializable?_19)"
"((to-source?79_199)"
" to-source?_20)"
"((body-cctx80_200) body-cctx_64))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules29.1))"
"(compile-submodules27.1"
" bodys76_196"
" body-cctx80_200"
" serializable?78_198"
" to-source?79_199"
" with-submodules?77_197"
" temp75_195)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:124:26_194"
" keyword-procedure-extract"
" '(#:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
" 3)"
" '(#:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
"(list"
" bodys76_196"
" body-cctx80_200"
" serializable?78_198"
" to-source?79_199"
" with-submodules?77_197)"
" temp75_195)))))"
"(let-values(((declaration-body_79)"
"(list"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index! mpis_63 self_54))"
"(list"
" 'define-values"
" '(cross-phase-persistent?)"
" cross-phase-persistent?_65)"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((...r/compile/module.rkt:136:33_201)"
" generate-deserialize7.1)"
"((requires81_202)"
" requires_56)"
"((mpis82_203) mpis_63)"
"((temp83_204) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-deserialize7.1))"
"(generate-deserialize5.1"
" temp83_204"
" #t"
" requires81_202"
" mpis82_203)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:136:33_201"
" keyword-procedure-extract"
" '(#:syntax-support?)"
" 4)"
" '(#:syntax-support?)"
"(list temp83_204)"
" requires81_202"
" mpis82_203))))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((...r/compile/module.rkt:137:33_205)"
" generate-deserialize7.1)"
"((provides84_206)"
" provides_57)"
"((mpis85_207) mpis_63)"
"((temp86_208) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-deserialize7.1))"
"(generate-deserialize5.1"
" temp86_208"
" #t"
" provides84_206"
" mpis85_207)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:137:33_205"
" keyword-procedure-extract"
" '(#:syntax-support?)"
" 4)"
" '(#:syntax-support?)"
"(list temp86_208)"
" provides84_206"
" mpis85_207))))"
"(list"
" 'define-values"
" '(side-effects)"
"(list"
" 'quote"
"(let-values(((temp87_209)"
"(hash-keys"
" side-effects_66))"
"((<88_210) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp87_209"
" <88_210)"
"(sort9.1 temp87_209 <88_210)))))"
"(list"
" 'define-values"
" '(min-phase)"
" min-phase_69)"
"(list"
" 'define-values"
" '(max-phase)"
" max-phase_70)"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_72)"
"(list"
" 'define-values"
" '(language-info)"
"(list 'quote language-info_60)))))"
"(let-values(((declaration-linklet_80)"
"((if to-source?_20"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" variables"
" side-effects"
" cross-phase-persistent?"
" min-phase"
" max-phase"
" phase-to-link-modules"
" language-info)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
" declaration-body_79))))"
"(let-values(((syntax-literals-linklet_81)"
"((if to-source?_20"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_19"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" syntax-literalss-id"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((...r/compile/module.rkt:187:9_211)"
" generate-lazy-syntax-literals!10.1)"
"((all-syntax-literalss89_212)"
" all-syntax-literalss_76)"
"((mpis90_213) mpis_63)"
"((self91_214) self_54)"
"((temp92_215)"
"(not"
" serializable?_19)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-lazy-syntax-literals!10.1))"
"(generate-lazy-syntax-literals!8.1"
" temp92_215"
" #t"
" all-syntax-literalss89_212"
" mpis90_213"
" self91_214)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:187:9_211"
" keyword-procedure-extract"
" '(#:skip-deserialize?)"
" 5)"
" '(#:skip-deserialize?)"
"(list temp92_215)"
" all-syntax-literalss89_212"
" mpis90_213"
" self91_214)))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-syntax-literals_75"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
"(add1 max-phase_70)"
" 0)))"
"(if empty-result-for-module->namespace?_62"
"(let-values() ''empty)"
"(let-values() ''#f))))))))))"
"(let-values(((syntax-literals-data-linklet_82)"
"(if serializable?_19"
"((if to-source?_20"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list"
" inspector-id"
" bulk-binding-registry-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(+ 2 max-phase_70)"
" '(#f)))"
"(generate-lazy-syntax-literals-data!"
" all-syntax-literalss_76"
" mpis_63)))"
" #f)))"
"(let-values(((data-linklet_83)"
"(if serializable?_19"
"((if to-source?_20"
" values"
" 1/compile-linklet)"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_63))))"
" #f)))"
"(let-values(((bundle_84)"
"(let-values(((linklets_216)"
"(hash-set"
" body-linklets_68"
" 'decl"
" declaration-linklet_80)))"
"(let-values(((linklets_217)"
"(if data-linklet_83"
"(hash-set"
" linklets_216"
" 'data"
" data-linklet_83)"
" linklets_216)))"
"(let-values(((linklets_218)"
"(hash-set"
" linklets_217"
" 'stx"
" syntax-literals-linklet_81)))"
"(let-values(((linklets_219)"
"(if syntax-literals-data-linklet_82"
"(hash-set"
" linklets_218"
" 'stx-data"
" syntax-literals-data-linklet_82)"
" linklets_218)))"
"(let-values(((linklets_220)"
"(hash-set"
" linklets_219"
" 'pre"
"(map2"
" car"
" pre-submodules_77))))"
"(let-values(((linklets_221)"
"(hash-set"
" linklets_220"
" 'post"
"(map2"
" car"
" post-submodules_78))))"
"(let-values(((linklets_222)"
"(hash-set"
" linklets_221"
" 'name"
" full-module-name_55)))"
"(1/hash->linklet-bundle"
" linklets_222))))))))))"
"(let-values(((ld_85)"
"(if(if(null?"
" pre-submodules_77)"
"(if(null?"
" post-submodules_78)"
"(not as-submodule?_18)"
" #f)"
" #f)"
"(let-values() bundle_84)"
"(let-values()"
"((if to-source?_20"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_223)"
"(append"
" pre-submodules_77"
" post-submodules_78)))"
"(begin"
"(if(list? lst_223)"
"(void)"
"(let-values()"
"(in-list lst_223)))"
"((letrec-values(((for-loop_224)"
"(lambda(ht_225"
" lst_226)"
"(if(pair?"
" lst_226)"
"(let-values(((sm_227)"
"(unsafe-car"
" lst_226)))"
"(if #t"
"(let-values(((ht_228)"
"(let-values(((ht_229)"
" ht_225))"
"(let-values(((ht_230)"
"(let-values()"
"(hash-set"
" ht_229"
"(car"
" sm_227)"
"((if to-source?_20"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_227))))))"
"(values"
" ht_230)))))"
"(if #t"
"(for-loop_224"
" ht_228"
"(unsafe-cdr"
" lst_226))"
" ht_228))"
" ht_225))"
" ht_225))))"
" for-loop_224)"
"(hasheq #f bundle_84)"
" lst_223))))))))"
"(if to-source?_20"
"(let-values() ld_85)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_85"
" 0"
" max-phase_70"
" phase-to-link-module-uses_71"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_73"
"(mpis-as-vector mpis_63)"
"(syntax-literals-as-vectors"
" all-syntax-literalss_76"
" 0)"
"(map2 cdr pre-submodules_77)"
"(map2"
" cdr"
" post-submodules_78))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack14.1)"
"(lambda(given-kws_231 given-args_232 s11_233 cctx12_234)"
"(let-values(((as-submodule?8_235)(if(pair? given-kws_231)(eq? '#:as-submodule?(car given-kws_231)) #f)))"
"(let-values(((as-submodule?3_236)(if as-submodule?8_235(car given-args_232)(void)))"
"((given-kws_237)(if as-submodule?8_235(cdr given-kws_231) given-kws_231))"
"((given-args_238)(if as-submodule?8_235(cdr given-args_232) given-args_232)))"
"(let-values(((self6_239)(if(pair? given-kws_237)(eq? '#:self(car given-kws_237)) #f)))"
"(let-values(((self1_240)(if self6_239(car given-args_238)(void)))"
"((given-kws_241)(if self6_239(cdr given-kws_237) given-kws_237))"
"((given-args_242)(if self6_239(cdr given-args_238) given-args_238)))"
"(let-values(((serializable?9_243)"
"(if(pair? given-kws_241)(eq? '#:serializable?(car given-kws_241)) #f)))"
"(let-values(((serializable?4_244)(if serializable?9_243(car given-args_242)(void)))"
"((given-kws_245)(if serializable?9_243(cdr given-kws_241) given-kws_241))"
"((given-args_246)(if serializable?9_243(cdr given-args_242) given-args_242)))"
"(let-values(((to-source?10_247)(if(pair? given-kws_245)(eq? '#:to-source?(car given-kws_245)) #f)))"
"(let-values(((to-source?5_248)(if to-source?10_247(car given-args_246)(void)))"
"((given-kws_249)(if to-source?10_247(cdr given-kws_245) given-kws_245))"
"((given-args_250)(if to-source?10_247(cdr given-args_246) given-args_246)))"
"(let-values(((with-submodules?7_251)(pair? given-kws_249)))"
"(let-values(((with-submodules?2_252)(if with-submodules?7_251(car given-args_250)(void))))"
"(compile-module13.1"
" as-submodule?3_236"
" as-submodule?8_235"
" self1_240"
" self6_239"
" serializable?4_244"
" serializable?9_243"
" to-source?5_248"
" to-source?10_247"
" with-submodules?2_252"
" with-submodules?7_251"
" s11_233"
" cctx12_234)))))))))))))"
"(define-values"
"(compile-module15.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_253 given-argc_254)"
"(if(= given-argc_254 4)"
"(let-values(((l1_255) given-kws_253))"
"(let-values(((l1_256)"
"(if(null? l1_255) l1_255(if(eq?(car l1_255) '#:as-submodule?)(cdr l1_255) l1_255))))"
"(let-values(((l1_257) l1_256))"
"(let-values(((l1_258)(if(null? l1_257) l1_257(if(eq?(car l1_257) '#:self)(cdr l1_257) l1_257))))"
"(let-values(((l1_259) l1_258))"
"(let-values(((l1_260)"
"(if(null? l1_259) l1_259(if(eq?(car l1_259) '#:serializable?)(cdr l1_259) l1_259))))"
"(let-values(((l1_261) l1_260))"
"(let-values(((l1_262)"
"(if(null? l1_261)"
" l1_261"
"(if(eq?(car l1_261) '#:to-source?)(cdr l1_261) l1_261))))"
"(let-values(((l1_263) l1_262))"
"(let-values(((l1_264)"
"(if(null? l1_263)"
" l1_263"
"(if(eq?(car l1_263) '#:with-submodules?)(cdr l1_263) l1_263))))"
"(null? l1_264)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_265 given-args_266 s_267 cctx_268)(unpack14.1 given-kws_265 given-args_266 s_267 cctx_268)))"
" null"
" '(#:as-submodule? #:self #:serializable? #:to-source? #:with-submodules?)"
"(let-values(((compile-module_269)(case-lambda((s_270 cctx_271)(unpack14.1 null null s_270 cctx_271)))))"
" compile-module_269)))"
"(define-values"
"(lifted/1.1$16)"
"(make-required"
" 'compile-submodules"
"(case-lambda((self_272 form-name_273)(apply missing-kw self_272 form-name_273 null)))"
" #f"
" #f))"
"(define-values"
"(compile-submodules27.1)"
"(lambda(bodys16_274 cctx20_275 serializable?18_276 to-source?19_277 with-submodules?17_278 form-name26_279)"
"(let-values(((form-name_280) form-name26_279))"
"(let-values(((bodys_281) bodys16_274))"
"(let-values(((with-submodules?_282) with-submodules?17_278))"
"(let-values(((serializable?_283) serializable?18_276))"
"(let-values(((to-source?_284) to-source?19_277))"
"(let-values(((body-cctx_285) cctx20_275))"
"(let-values()"
"(if(not with-submodules?_282)"
"(let-values() null)"
"(let-values()"
"((letrec-values(((loop_286)"
"(lambda(bodys_287 phase_288)"
"(if(null? bodys_287)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_289)(syntax-disarm$1(car bodys_287))))"
"(let-values(((f_290)(core-form-sym body_289 phase_288)))"
"(if(eq? f_290 form-name_280)"
"(let-values()"
"(let-values(((ok?_291 _93_292 name94_293 _95_294)"
"(let-values(((s_324) body_289))"
"(if(if #t #t #f)"
"(let-values(((orig-s_325) s_324))"
"(let-values(((_93_326 name94_327 _95_328)"
"(let-values(((s_329)"
"(if(syntax?$1"
" s_324)"
"(syntax-e$1"
" s_324)"
" s_324)))"
"(if(pair? s_329)"
"(let-values(((_96_330)"
"(let-values(((s_333)"
"(car"
" s_329)))"
" s_333))"
"((name97_331"
" _98_332)"
"(let-values(((s_334)"
"(cdr"
" s_329)))"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_334)"
"(syntax-e$1"
" s_334)"
" s_334)))"
"(if(pair?"
" s_335)"
"(let-values(((name99_336)"
"(let-values(((s_338)"
"(car"
" s_335)))"
" s_338))"
"((_100_337)"
"(let-values(((s_339)"
"(cdr"
" s_335)))"
" s_339)))"
"(values"
" name99_336"
" _100_337))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_325))))))"
"(values"
" _96_330"
" name97_331"
" _98_332))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_325)))))"
"(values #t _93_326 name94_327 _95_328)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_307 module*101_308 name102_309 _103_310)"
"(let-values(((s_340) body_289))"
"(if(if #t"
"(let-values(((s_341)"
"(if(syntax?$1 s_340)"
"(syntax-e$1 s_340)"
" s_340)))"
"(if(pair? s_341)"
"(if(let-values(((s_342)"
"(car s_341)))"
" #t)"
"(let-values(((s_343)(cdr s_341)))"
"(let-values(((s_344)"
"(if(syntax?$1"
" s_343)"
"(syntax-e$1 s_343)"
" s_343)))"
"(if(pair? s_344)"
"(if(let-values(((s_345)"
"(car"
" s_344)))"
" #t)"
"(let-values(((s_346)"
"(cdr s_344)))"
"(let-values(((s_347)"
"(if(syntax?$1"
" s_346)"
"(syntax-e$1"
" s_346)"
" s_346)))"
"(if(pair? s_347)"
"(if(let-values(((s_348)"
"(car"
" s_347)))"
"(let-values(((s_349)"
"(if(syntax?$1"
" s_348)"
"(syntax-e$1"
" s_348)"
" s_348)))"
"(eq?"
" #f"
" s_349)))"
"(let-values(((s_350)"
"(cdr"
" s_347)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_351) s_340))"
"(let-values(((module*101_352"
" name102_353"
" _103_354)"
"(let-values(((s_355)"
"(if(syntax?$1"
" s_340)"
"(syntax-e$1"
" s_340)"
" s_340)))"
"(if #t"
"(let-values(((module*104_356)"
"(let-values(((s_359)"
"(car"
" s_355)))"
" s_359))"
"((name105_357"
" _106_358)"
"(let-values(((s_360)"
"(cdr"
" s_355)))"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(if #t"
"(let-values(((name107_362)"
"(let-values(((s_364)"
"(car"
" s_361)))"
" s_364))"
"((_108_363)"
"(let-values(((s_365)"
"(cdr"
" s_361)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(if #t"
"(let-values((()"
"(let-values(((s_368)"
"(car"
" s_366)))"
"(let-values(((s_369)"
"(if(syntax?$1"
" s_368)"
"(syntax-e$1"
" s_368)"
" s_368)))"
"(values))))"
"((_109_367)"
"(let-values(((s_370)"
"(cdr"
" s_366)))"
" s_370)))"
"(values"
" _109_367))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_351))))))"
"(values"
" name107_362"
" _108_363))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_351))))))"
"(values"
" module*104_356"
" name105_357"
" _106_358))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_351)))))"
"(values"
" #t"
" module*101_352"
" name102_353"
" _103_354)))"
"(values #f #f #f #f)))))"
"(let-values(((s-shifted_323)"
"(if ok?_307"
"(let-values()"
"(syntax-shift-phase-level$1"
" body_289"
"(phase- 0 phase_288)))"
"(let-values() body_289))))"
"(cons"
"(cons"
"(syntax-e$1 name94_293)"
"(let-values(((...r/compile/module.rkt:314:22_371)"
" compile-module15.1)"
"((s-shifted110_372) s-shifted_323)"
"((body-cctx111_373) body-cctx_285)"
"((temp112_374) #t)"
"((serializable?113_375) serializable?_283)"
"((to-source?114_376) to-source?_284))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module15.1))"
"(compile-module13.1"
" temp112_374"
" #t"
" #f"
" #f"
" serializable?113_375"
" #t"
" to-source?114_376"
" #t"
" #f"
" #f"
" s-shifted110_372"
" body-cctx111_373)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:314:22_371"
" keyword-procedure-extract"
" '(#:as-submodule? #:serializable? #:to-source?)"
" 4)"
" '(#:as-submodule? #:serializable? #:to-source?)"
"(list"
" temp112_374"
" serializable?113_375"
" to-source?114_376)"
" s-shifted110_372"
" body-cctx111_373))))"
"(loop_286(cdr bodys_287) phase_288))))))"
"(if(eq? f_290 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_377 begin-for-syntax115_378 e116_379)"
"(let-values(((s_390) body_289))"
"(if(if #t #t #f)"
"(let-values(((orig-s_391) s_390))"
"(let-values(((begin-for-syntax115_392"
" e116_393)"
"(let-values(((s_394)"
"(if(syntax?$1"
" s_390)"
"(syntax-e$1"
" s_390)"
" s_390)))"
"(if(pair? s_394)"
"(let-values(((begin-for-syntax117_395)"
"(let-values(((s_397)"
"(car"
" s_394)))"
" s_397))"
"((e118_396)"
"(let-values(((s_398)"
"(cdr"
" s_394)))"
"(let-values(((s_399)"
"(if(syntax?$1"
" s_398)"
"(syntax-e$1"
" s_398)"
" s_398)))"
"(let-values(((flat-s_400)"
"(to-syntax-list.1"
" s_399)))"
"(if(not"
" flat-s_400)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_391))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_391))"
"(let-values()"
" flat-s_400))))))))"
"(values"
" begin-for-syntax117_395"
" e118_396))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_391)))))"
"(values"
" #t"
" begin-for-syntax115_392"
" e116_393)))"
"(values #f #f #f)))))"
"(append"
"(loop_286 e116_379(add1 phase_288))"
"(loop_286(cdr bodys_287) phase_288))))"
"(let-values()(loop_286(cdr bodys_287) phase_288)))))))))))"
" loop_286)"
" bodys_281"
" 0))))))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_401 given-args_402 form-name26_403)"
"(let-values(((bodys16_404)(car given-args_402))"
"((given-kws_405)(cdr given-kws_401))"
"((given-args_406)(cdr given-args_402)))"
"(let-values(((cctx20_407)(car given-args_406))"
"((given-kws_408)(cdr given-kws_405))"
"((given-args_409)(cdr given-args_406)))"
"(let-values(((serializable?18_410)(car given-args_409))"
"((given-kws_411)(cdr given-kws_408))"
"((given-args_412)(cdr given-args_409)))"
"(let-values(((to-source?19_413)(car given-args_412))"
"((given-kws_414)(cdr given-kws_411))"
"((given-args_415)(cdr given-args_412)))"
"(let-values(((with-submodules?17_416)(car given-args_415)))"
"(compile-submodules27.1"
" bodys16_404"
" cctx20_407"
" serializable?18_410"
" to-source?19_413"
" with-submodules?17_416"
" form-name26_403))))))))"
"(define-values"
"(compile-submodules29.1)"
"(lifted/1.1$16"
"(lambda(given-kws_417 given-argc_418)"
"(if(= given-argc_418 3)"
"(let-values(((l2_419) given-kws_417))"
"(if(pair? l2_419)"
"(if(eq?(car l2_419) '#:bodys)"
"(let-values(((l2_420)(cdr l2_419)))"
"(if(pair? l2_420)"
"(if(eq?(car l2_420) '#:cctx)"
"(let-values(((l2_421)(cdr l2_420)))"
"(if(pair? l2_421)"
"(if(eq?(car l2_421) '#:serializable?)"
"(let-values(((l2_422)(cdr l2_421)))"
"(if(pair? l2_422)"
"(if(eq?(car l2_422) '#:to-source?)"
"(let-values(((l2_423)(cdr l2_422)))"
"(if(pair? l2_423)"
"(if(eq?(car l2_423) '#:with-submodules?)(null?(cdr l2_423)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_424 given-args_425 form-name_426)(unpack28.1 given-kws_424 given-args_425 form-name_426)))"
" '(#:bodys #:cctx #:serializable? #:to-source? #:with-submodules?)"
" '(#:bodys #:cctx #:serializable? #:to-source? #:with-submodules?)))"
"(define-values"
"(filter-language-info)"
"(lambda(li_427)"
"(if(vector? li_427)"
"(if(= 3(vector-length li_427))"
"(if(1/module-path?(vector-ref li_427 0))(if(symbol?(vector-ref li_427 1)) li_427 #f) #f)"
" #f)"
" #f)))"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_1 declared-submodule-names2_2 mod-path3_3 self4_4)"
"(let-values(((mod-path_5) mod-path3_3))"
"(let-values(((self_6) self4_4))"
"(let-values(((declared-submodule-names_7)"
"(if declared-submodule-names2_2 declared-submodule-names1_1 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))(hash-ref declared-submodule-names_7(cadr mod-path_5) #f) #f)"
" #f)"
" #f)"
" #f)"
"              (1/module-path-index-join (list 'submod \".\" (cadr mod-path_5)) self_6)"
"(1/module-path-index-join mod-path_5 self_6))))))))"
"(define-values"
"(unpack6.1$1)"
"(lambda(given-kws_8 given-args_9 mod-path3_10 self4_11)"
"(let-values(((declared-submodule-names2_12)(pair? given-kws_8)))"
"(let-values(((declared-submodule-names1_13)(if declared-submodule-names2_12(car given-args_9)(void))))"
"(module-path->mpi5.1 declared-submodule-names1_13 declared-submodule-names2_12 mod-path3_10 self4_11)))))"
"(define-values"
"(module-path->mpi7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_14 given-argc_15)"
"(if(= given-argc_15 4)"
"(let-values(((l1_16) given-kws_14))"
"(let-values(((l1_17)"
"(if(null? l1_16) l1_16(if(eq?(car l1_16) '#:declared-submodule-names)(cdr l1_16) l1_16))))"
"(null? l1_17)))"
" #f))"
"(case-lambda"
"((given-kws_18 given-args_19 mod-path_20 self_21)(unpack6.1$1 given-kws_18 given-args_19 mod-path_20 self_21)))"
" null"
" '(#:declared-submodule-names)"
"(let-values(((module-path->mpi_22)"
"(case-lambda((mod-path_23 self_24)(unpack6.1$1 null null mod-path_23 self_24)))))"
" module-path->mpi_22)))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_25 ctx_26)"
"(let-values(((...pand/module-path.rkt:20:2_27) module-path->mpi7.1)"
"((mod-path8_28) mod-path_25)"
"((temp9_29)(namespace-mpi(expand-context-namespace ctx_26)))"
"((temp10_30)(expand-context-declared-submodule-names ctx_26)))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi7.1))"
"(module-path->mpi5.1 temp10_30 #t mod-path8_28 temp9_29)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pand/module-path.rkt:20:2_27"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 4)"
" '(#:declared-submodule-names)"
"(list temp10_30)"
" mod-path8_28"
" temp9_29)))))"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis/fast"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_7 make-_8 ?_9 -ref_10 -set!_11)"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'requires+provides))))"
"(values"
" struct:_7"
" make-_8"
" ?_9"
"(make-struct-field-accessor -ref_10 0 'self)"
"(make-struct-field-accessor -ref_10 1 'require-mpis)"
"(make-struct-field-accessor -ref_10 2 'require-mpis/fast)"
"(make-struct-field-accessor -ref_10 3 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_10 4 'requires)"
"(make-struct-field-accessor -ref_10 5 'provides)"
"(make-struct-field-accessor -ref_10 6 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_10 7 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_10 8 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_11 7 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_11 8 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_68 make-_69 ?_70 -ref_71 -set!_72)"
"(let-values()"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required))))"
"(values"
" struct:_68"
" make-_69"
" ?_70"
"(make-struct-field-accessor -ref_71 0 'id)"
"(make-struct-field-accessor -ref_71 1 'phase)"
"(make-struct-field-accessor -ref_71 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_71 3 'as-transformer?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_104)"
"(requires+provides1.1"
" self_104"
"(make-hash)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_105)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_105))"
"(hash-clear!(requires+provides-requires r+p_105))"
"(hash-clear!(requires+provides-provides r+p_105))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_105)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_106 mpi_107)"
"(let-values(((or-part_108)(hash-ref(requires+provides-require-mpis/fast r+p_106) mpi_107 #f)))"
"(if or-part_108"
" or-part_108"
"(let-values(((or-part_109)(hash-ref(requires+provides-require-mpis r+p_106) mpi_107 #f)))"
"(if or-part_109"
" or-part_109"
"(begin"
"(hash-set!(requires+provides-require-mpis r+p_106) mpi_107 mpi_107)"
"(hash-set!(requires+provides-require-mpis/fast r+p_106) mpi_107 mpi_107)"
" mpi_107)))))))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_110 mod-name_111 phase-shift_112 is-cross-phase-persistent?_113)"
"(let-values(((mpi_114)(intern-mpi r+p_110 mod-name_111)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_110) mpi_114 '#hasheqv()) phase-shift_112 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_110)"
" phase-shift_112"
"(lambda(l_115)(cons mpi_114 l_115))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_110) mpi_114 make-hasheqv)"
" phase-shift_112"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_113"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_110 #f)))"
" mpi_114))))"
"(define-values"
"(lifted/1.1$15)"
"(make-required"
" 'add-defined-or-required-id!"
"(case-lambda"
"((self_116 r+p_117 id_118 phase_119 binding_120)"
"(apply missing-kw self_116 r+p_117 id_118 phase_119 binding_120 null)))"
" #f"
" #f))"
"(define-values"
"(add-defined-or-required-id!11.1)"
"(lambda(as-transformer?4_121 can-be-shadowed?3_122 can-be-shadowed?5_123 r+p7_124 id8_125 phase9_126 binding10_127)"
"(let-values(((r+p_128) r+p7_124))"
"(let-values(((id_129) id8_125))"
"(let-values(((phase_130) phase9_126))"
"(let-values(((binding_131) binding10_127))"
"(let-values(((can-be-shadowed?_132)(if can-be-shadowed?5_123 can-be-shadowed?3_122 #f)))"
"(let-values(((as-transformer?_133) as-transformer?4_121))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_130"
"(phase+"
"(module-binding-nominal-phase binding_131)"
"(module-binding-nominal-require-phase binding_131)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:112:2_134) add-defined-or-required-id-at-nominal!27.1)"
"((r+p74_135) r+p_128)"
"((id75_136) id_129)"
"((phase76_137) phase_130)"
"((temp77_138)(module-binding-nominal-module binding_131))"
"((temp78_139)(module-binding-nominal-require-phase binding_131))"
"((can-be-shadowed?79_140) can-be-shadowed?_132)"
"((as-transformer?80_141) as-transformer?_133))"
"(if(variable-reference-constant?"
"(#%variable-reference add-defined-or-required-id-at-nominal!27.1))"
"(add-defined-or-required-id-at-nominal!25.1"
" as-transformer?80_141"
" can-be-shadowed?79_140"
" temp77_138"
" temp78_139"
" r+p74_135"
" id75_136"
" phase76_137)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:112:2_134"
" keyword-procedure-extract"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" 5)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
"(list as-transformer?80_141 can-be-shadowed?79_140 temp77_138 temp78_139)"
" r+p74_135"
" id75_136"
" phase76_137)))))))))))))"
"(define-values"
"(unpack12.1$1)"
"(lambda(given-kws_142 given-args_143 r+p7_144 id8_145 phase9_146 binding10_147)"
"(let-values(((as-transformer?4_148)(car given-args_143))"
"((given-kws_149)(cdr given-kws_142))"
"((given-args_150)(cdr given-args_143)))"
"(let-values(((can-be-shadowed?5_151)(pair? given-kws_149)))"
"(let-values(((can-be-shadowed?3_152)(if can-be-shadowed?5_151(car given-args_150)(void))))"
"(add-defined-or-required-id!11.1"
" as-transformer?4_148"
" can-be-shadowed?3_152"
" can-be-shadowed?5_151"
" r+p7_144"
" id8_145"
" phase9_146"
" binding10_147))))))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lifted/1.1$15"
"(lambda(given-kws_153 given-argc_154)"
"(if(= given-argc_154 6)(subsets? '(#:as-transformer?) given-kws_153 '(#:as-transformer? #:can-be-shadowed?)) #f))"
"(case-lambda"
"((given-kws_155 given-args_156 r+p_157 id_158 phase_159 binding_160)"
"(unpack12.1$1 given-kws_155 given-args_156 r+p_157 id_158 phase_159 binding_160)))"
" '(#:as-transformer?)"
" '(#:as-transformer? #:can-be-shadowed?)))"
"(define-values"
"(lifted/2.1$6)"
"(make-required"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_161 r+p_162 id_163 phase_164)(apply missing-kw self_161 r+p_162 id_163 phase_164 null)))"
" #f"
" #f))"
"(define-values"
"(add-defined-or-required-id-at-nominal!25.1)"
"(lambda(as-transformer?17_165"
" can-be-shadowed?16_166"
" nominal-module14_167"
" nominal-require-phase15_168"
" r+p22_169"
" id23_170"
" phase24_171)"
"(let-values(((r+p_172) r+p22_169))"
"(let-values(((id_173) id23_170))"
"(let-values(((phase_174) phase24_171))"
"(let-values(((nominal-module_175) nominal-module14_167))"
"(let-values(((nominal-require-phase_176) nominal-require-phase15_168))"
"(let-values(((can-be-shadowed?_177) can-be-shadowed?16_166))"
"(let-values(((as-transformer?_178) as-transformer?17_165))"
"(let-values()"
"(let-values(((at-mod_179)"
"(hash-ref!"
"(requires+provides-requires r+p_172)"
"(intern-mpi r+p_172 nominal-module_175)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_180)(hash-ref! at-mod_179 nominal-require-phase_176 make-hasheq)))"
"(let-values(((sym_181)(syntax-e$1 id_173)))"
"(hash-set!"
" sym-to-reqds_180"
" sym_181"
"(cons"
"(required2.1 id_173 phase_174 can-be-shadowed?_177 as-transformer?_178)"
"(hash-ref sym-to-reqds_180 sym_181 null))))))))))))))))"
"(define-values"
"(unpack26.1)"
"(lambda(given-kws_182 given-args_183 r+p22_184 id23_185 phase24_186)"
"(let-values(((as-transformer?17_187)(car given-args_183))"
"((given-kws_188)(cdr given-kws_182))"
"((given-args_189)(cdr given-args_183)))"
"(let-values(((can-be-shadowed?16_190)(car given-args_189))"
"((given-kws_191)(cdr given-kws_188))"
"((given-args_192)(cdr given-args_189)))"
"(let-values(((nominal-module14_193)(car given-args_192))"
"((given-kws_194)(cdr given-kws_191))"
"((given-args_195)(cdr given-args_192)))"
"(let-values(((nominal-require-phase15_196)(car given-args_195)))"
"(add-defined-or-required-id-at-nominal!25.1"
" as-transformer?17_187"
" can-be-shadowed?16_190"
" nominal-module14_193"
" nominal-require-phase15_196"
" r+p22_184"
" id23_185"
" phase24_186)))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lifted/2.1$6"
"(lambda(given-kws_197 given-argc_198)"
"(if(= given-argc_198 5)"
"(let-values(((l2_199) given-kws_197))"
"(if(pair? l2_199)"
"(if(eq?(car l2_199) '#:as-transformer?)"
"(let-values(((l2_200)(cdr l2_199)))"
"(if(pair? l2_200)"
"(if(eq?(car l2_200) '#:can-be-shadowed?)"
"(let-values(((l2_201)(cdr l2_200)))"
"(if(pair? l2_201)"
"(if(eq?(car l2_201) '#:nominal-module)"
"(let-values(((l2_202)(cdr l2_201)))"
"(if(pair? l2_202)"
"(if(eq?(car l2_202) '#:nominal-require-phase)(null?(cdr l2_202)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_203 given-args_204 r+p_205 id_206 phase_207)"
"(unpack26.1 given-kws_203 given-args_204 r+p_205 id_206 phase_207)))"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(lifted/3.1$2)"
"(make-required"
" 'add-enclosing-module-defined-and-required!"
"(case-lambda"
"((self_208 r+p_209 enclosing-mod_210 phase-shift_211)"
"(apply missing-kw self_208 r+p_209 enclosing-mod_210 phase-shift_211 null)))"
" #f"
" #f))"
"(define-values"
"(add-enclosing-module-defined-and-required!33.1)"
"(lambda(enclosing-requires+provides28_212 r+p30_213 enclosing-mod31_214 phase-shift32_215)"
"(let-values(((r+p_216) r+p30_213))"
"(let-values(((enclosing-r+p_217) enclosing-requires+provides28_212))"
"(let-values(((enclosing-mod_218) enclosing-mod31_214))"
"(let-values(((phase-shift_219) phase-shift32_215))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_216 #f)"
"(let-values(((ht_220)(requires+provides-requires enclosing-r+p_217)))"
"(begin"
"(if((lambda(ht_221)(hash? ht_221)) ht_220)(void)(let-values()(default-in-hash ht_220)))"
"((letrec-values(((for-loop_222)"
"(lambda(fold-var_223 i_224)"
"(if i_224"
"(let-values(((mod-name_225 at-mod_226)"
"(hash-iterate-key+value ht_220 i_224)))"
"(if #t"
"(let-values(((fold-var_227)"
"(let-values(((fold-var_228) fold-var_223))"
"(let-values(((fold-var_229)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ht_230) at-mod_226))"
"(begin"
"(if((lambda(ht_231)"
"(hash? ht_231))"
" ht_230)"
"(void)"
"(let-values()"
"(default-in-hash ht_230)))"
"((letrec-values(((for-loop_232)"
"(lambda(fold-var_233"
" i_234)"
"(if i_234"
"(let-values(((phase_235"
" at-phase_236)"
"(hash-iterate-key+value"
" ht_230"
" i_234)))"
"(if #t"
"(let-values(((fold-var_237)"
"(let-values(((ht_238)"
" at-phase_236))"
"(begin"
"(if((lambda(ht_239)"
"(hash?"
" ht_239))"
" ht_238)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_238)))"
"((letrec-values(((for-loop_240)"
"(lambda(fold-var_241"
" i_242)"
"(if i_242"
"(let-values(((reqds_243)"
"(hash-iterate-value"
" ht_238"
" i_242)))"
"(if #t"
"(let-values(((fold-var_244)"
"(let-values(((lst_245)"
" reqds_243))"
"(begin"
"(if(list?"
" lst_245)"
"(void)"
"(let-values()"
"(in-list"
" lst_245)))"
"((letrec-values(((for-loop_246)"
"(lambda(fold-var_247"
" lst_248)"
"(if(pair?"
" lst_248)"
"(let-values(((reqd_249)"
"(unsafe-car"
" lst_248)))"
"(if #t"
"(let-values(((fold-var_250)"
"(let-values(((fold-var_251)"
" fold-var_247))"
"(let-values(((fold-var_252)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((.../require+provide.rkt:143:6_253)"
" add-defined-or-required-id-at-nominal!27.1)"
"((r+p81_254)"
" r+p_216)"
"((temp82_255)"
"(syntax-module-path-index-shift"
"(required-id"
" reqd_249)"
"(requires+provides-self"
" enclosing-r+p_217)"
" enclosing-mod_218))"
"((temp83_256)"
"(phase+"
"(required-phase"
" reqd_249)"
" phase-shift_219))"
"((enclosing-mod84_257)"
" enclosing-mod_218)"
"((phase-shift85_258)"
" phase-shift_219)"
"((temp86_259)"
" #t)"
"((temp87_260)"
"(required-as-transformer?"
" reqd_249)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id-at-nominal!27.1))"
"(add-defined-or-required-id-at-nominal!25.1"
" temp87_260"
" temp86_259"
" enclosing-mod84_257"
" phase-shift85_258"
" r+p81_254"
" temp82_255"
" temp83_256)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:143:6_253"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
" 5)"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
"(list"
" temp87_260"
" temp86_259"
" enclosing-mod84_257"
" phase-shift85_258)"
" r+p81_254"
" temp82_255"
" temp83_256))))"
"(void)))))"
"(values"
" fold-var_252)))))"
"(if #t"
"(for-loop_246"
" fold-var_250"
"(unsafe-cdr"
" lst_248))"
" fold-var_250))"
" fold-var_247))"
" fold-var_247))))"
" for-loop_246)"
" fold-var_241"
" lst_245)))))"
"(if #t"
"(for-loop_240"
" fold-var_244"
"(hash-iterate-next"
" ht_238"
" i_242))"
" fold-var_244))"
" fold-var_241))"
" fold-var_241))))"
" for-loop_240)"
" fold-var_233"
"(hash-iterate-first"
" ht_238))))))"
"(if #t"
"(for-loop_232"
" fold-var_237"
"(hash-iterate-next"
" ht_230"
" i_234))"
" fold-var_237))"
" fold-var_233))"
" fold-var_233))))"
" for-loop_232)"
"(void)"
"(hash-iterate-first ht_230)))))"
"(void)))))"
"(values fold-var_229)))))"
"(if #t"
"(for-loop_222 fold-var_227(hash-iterate-next ht_220 i_224))"
" fold-var_227))"
" fold-var_223))"
" fold-var_223))))"
" for-loop_222)"
"(void)"
"(hash-iterate-first ht_220))))))))))))"
"(define-values"
"(unpack34.1$1)"
"(lambda(given-kws_261 given-args_262 r+p30_263 enclosing-mod31_264 phase-shift32_265)"
"(let-values(((enclosing-requires+provides28_266)(car given-args_262)))"
"(add-enclosing-module-defined-and-required!33.1"
" enclosing-requires+provides28_266"
" r+p30_263"
" enclosing-mod31_264"
" phase-shift32_265))))"
"(define-values"
"(add-enclosing-module-defined-and-required!35.1)"
"(lifted/3.1$2"
"(lambda(given-kws_267 given-argc_268)"
"(if(= given-argc_268 5)"
"(let-values(((l2_269) given-kws_267))"
"(if(pair? l2_269)(if(eq?(car l2_269) '#:enclosing-requires+provides)(null?(cdr l2_269)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_270 given-args_271 r+p_272 enclosing-mod_273 phase-shift_274)"
"(unpack34.1$1 given-kws_270 given-args_271 r+p_272 enclosing-mod_273 phase-shift_274)))"
" '(#:enclosing-requires+provides)"
" '(#:enclosing-requires+provides)))"
"(define-values"
"(lifted/4.1$2)"
"(make-required"
" 'remove-required-id!"
"(case-lambda((self_275 r+p_276 id_277 phase_278)(apply missing-kw self_275 r+p_276 id_277 phase_278 null)))"
" #f"
" #f))"
"(define-values"
"(remove-required-id!41.1)"
"(lambda(unless-matches36_279 r+p38_280 id39_281 phase40_282)"
"(let-values(((r+p_283) r+p38_280))"
"(let-values(((id_284) id39_281))"
"(let-values(((phase_285) phase40_282))"
"(let-values(((binding_286) unless-matches36_279))"
"(let-values()"
"(let-values(((b_287)"
"(let-values(((.../require+provide.rkt:156:12_288) resolve+shift15.1)"
"((id88_289) id_284)"
"((phase89_290) phase_285)"
"((temp90_291) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp90_291 #t #f #f #f #f #f #f id88_289 phase89_290)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:156:12_288"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp90_291)"
" id88_289"
" phase89_290)))))"
"(if b_287"
"(let-values()"
"(let-values(((at-mod_292)"
"(hash-ref"
"(requires+provides-requires r+p_283)"
"(intern-mpi r+p_283(module-binding-nominal-module b_287))"
" #f)))"
"(if at-mod_292"
"(let-values()"
"(let-values(((sym-to-reqds_293)"
"(hash-ref at-mod_292(module-binding-nominal-require-phase b_287) #f)))"
"(if sym-to-reqds_293"
"(let-values()"
"(let-values(((sym_294)(syntax-e$1 id_284)))"
"(let-values(((l_295)(hash-ref sym-to-reqds_293 sym_294 null)))"
"(if(null? l_295)"
"(void)"
"(let-values()"
"(if(same-binding? b_287 binding_286)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_293"
" sym_294"
"(alt-reverse"
"(let-values(((lst_296) l_295))"
"(begin"
"(if(list? lst_296)(void)(let-values()(in-list lst_296)))"
"((letrec-values(((for-loop_297)"
"(lambda(fold-var_298 lst_299)"
"(if(pair? lst_299)"
"(let-values(((r_300)(unsafe-car lst_299)))"
"(if #t"
"(let-values(((fold-var_301)"
"(let-values(((fold-var_302)"
" fold-var_298))"
"(if(free-identifier=?$1"
"(required-id r_300)"
" id_284"
" phase_285"
" phase_285)"
" fold-var_302"
"(let-values(((fold-var_303)"
" fold-var_302))"
"(let-values(((fold-var_304)"
"(let-values()"
"(cons"
"(let-values()"
" r_300)"
" fold-var_303))))"
"(values"
" fold-var_304)))))))"
"(if #t"
"(for-loop_297"
" fold-var_301"
"(unsafe-cdr lst_299))"
" fold-var_301))"
" fold-var_298))"
" fold-var_298))))"
" for-loop_297)"
" null"
" lst_296))))))))))))"
"(void))))"
"(void))))"
"(void))))))))))"
"(define-values"
"(unpack42.1$1)"
"(lambda(given-kws_305 given-args_306 r+p38_307 id39_308 phase40_309)"
"(let-values(((unless-matches36_310)(car given-args_306)))"
"(remove-required-id!41.1 unless-matches36_310 r+p38_307 id39_308 phase40_309))))"
"(define-values"
"(remove-required-id!43.1)"
"(lifted/4.1$2"
"(lambda(given-kws_311 given-argc_312)"
"(if(= given-argc_312 5)"
"(let-values(((l2_313) given-kws_311))"
"(if(pair? l2_313)(if(eq?(car l2_313) '#:unless-matches)(null?(cdr l2_313)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_314 given-args_315 r+p_316 id_317 phase_318)"
"(unpack42.1$1 given-kws_314 given-args_315 r+p_316 id_317 phase_318)))"
" '(#:unless-matches)"
" '(#:unless-matches)))"
"(define-values"
"(lifted/5.1$1)"
"(make-required"
" 'check-not-defined"
"(case-lambda((self_319 r+p_320 id_321 phase_322)(apply missing-kw self_319 r+p_320 id_321 phase_322 null)))"
" #f"
" #f))"
"(define-values"
"(check-not-defined53.1)"
"(lambda(check-not-required?44_323"
" check-not-required?47_324"
" in45_325"
" unless-matches46_326"
" unless-matches49_327"
" r+p50_328"
" id51_329"
" phase52_330)"
"(let-values(((check-not-required?_331)(if check-not-required?47_324 check-not-required?44_323 #f)))"
"(let-values(((r+p_332) r+p50_328))"
"(let-values(((id_333) id51_329))"
"(let-values(((phase_334) phase52_330))"
"(let-values(((orig-s_335) in45_325))"
"(let-values(((ok-binding_336)(if unless-matches49_327 unless-matches46_326 #f)))"
"(let-values()"
"(let-values(((b_337)"
"(let-values(((.../require+provide.rkt:181:12_338) resolve+shift15.1)"
"((id91_339) id_333)"
"((phase92_340) phase_334)"
"((temp93_341) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp93_341 #t #f #f #f #f #f #f id91_339 phase92_340)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:181:12_338"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp93_341)"
" id91_339"
" phase92_340)))))"
"(if(not b_337)"
"(let-values()(void))"
"(if(not(module-binding? b_337))"
"                        (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_333))"
"(let-values()"
"(let-values(((defined?_342)"
"(if b_337"
"(eq?(requires+provides-self r+p_332)(module-binding-module b_337))"
" #f)))"
"(if(if(not defined?_342)(not check-not-required?_331) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_332 #f))"
"(if(if defined?_342"
"(not"
"(hash-ref"
"(hash-ref(requires+provides-phase-to-defined-syms r+p_332) phase_334 '#hasheq())"
"(module-binding-sym b_337)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((at-mod_343)"
"(hash-ref"
"(requires+provides-requires r+p_332)"
"(intern-mpi r+p_332(module-binding-nominal-module b_337))"
" #f)))"
"(if(not at-mod_343)"
"(let-values()(void))"
"(let-values()"
"(let-values(((lst_344)"
"(hash-ref"
"(hash-ref"
" at-mod_343"
"(module-binding-nominal-require-phase b_337)"
" '#hasheq())"
"(syntax-e$1 id_333)"
" null)))"
"(begin"
"(if(list? lst_344)(void)(let-values()(in-list lst_344)))"
"((letrec-values(((for-loop_345)"
"(lambda(fold-var_346 lst_347)"
"(if(pair? lst_347)"
"(let-values(((r_348)(unsafe-car lst_347)))"
"(if #t"
"(let-values(((fold-var_349)"
"(let-values(((fold-var_350)"
" fold-var_346))"
"(let-values(((fold-var_351)"
"(let-values()"
"(begin"
"(let-values()"
"(if(if ok-binding_336"
"(same-binding?"
" b_337"
" ok-binding_336)"
" #f)"
"(let-values()"
"(void))"
"(if(required-can-be-shadowed?"
" r_348)"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_332"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"identifier already \""
"(if defined?_342"
"                                                                                                                    \"defined\""
"                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_334)"
"(let-values()"
"                                                                                                                      \"\")"
"(if(label-phase?"
" phase_334)"
"(let-values()"
"                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_334)"
"(let-values()"
"                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                           \" for phase ~a\""
" phase_334))))))"
" orig-s_335"
" id_333)))))"
"(void)))))"
"(values fold-var_351)))))"
"(if #t"
"(for-loop_345"
" fold-var_349"
"(unsafe-cdr lst_347))"
" fold-var_349))"
" fold-var_346))"
" fold-var_346))))"
" for-loop_345)"
"(void)"
" lst_344)))))))))))))))))))))))"
"(define-values"
"(unpack54.1)"
"(lambda(given-kws_352 given-args_353 r+p50_354 id51_355 phase52_356)"
"(let-values(((check-not-required?47_357)"
"(if(pair? given-kws_352)(eq? '#:check-not-required?(car given-kws_352)) #f)))"
"(let-values(((check-not-required?44_358)(if check-not-required?47_357(car given-args_353)(void)))"
"((given-kws_359)(if check-not-required?47_357(cdr given-kws_352) given-kws_352))"
"((given-args_360)(if check-not-required?47_357(cdr given-args_353) given-args_353)))"
"(let-values(((in45_361)(car given-args_360))"
"((given-kws_362)(cdr given-kws_359))"
"((given-args_363)(cdr given-args_360)))"
"(let-values(((unless-matches49_364)(pair? given-kws_362)))"
"(let-values(((unless-matches46_365)(if unless-matches49_364(car given-args_363)(void))))"
"(check-not-defined53.1"
" check-not-required?44_358"
" check-not-required?47_357"
" in45_361"
" unless-matches46_365"
" unless-matches49_364"
" r+p50_354"
" id51_355"
" phase52_356))))))))"
"(define-values"
"(check-not-defined55.1)"
"(lifted/5.1$1"
"(lambda(given-kws_366 given-argc_367)"
"(if(= given-argc_367 5)(subsets? '(#:in) given-kws_366 '(#:check-not-required? #:in #:unless-matches)) #f))"
"(case-lambda"
"((given-kws_368 given-args_369 r+p_370 id_371 phase_372)"
"(unpack54.1 given-kws_368 given-args_369 r+p_370 id_371 phase_372)))"
" '(#:in)"
" '(#:check-not-required? #:in #:unless-matches)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_373 syms_374 phase_375)"
"(let-values(((phase-to-defined-syms_376)(requires+provides-phase-to-defined-syms r+p_373)))"
"(let-values(((defined-syms_377)(hash-ref phase-to-defined-syms_376 phase_375 '#hasheq())))"
"(let-values(((new-defined-syms_378)"
"(let-values(((lst_379) syms_374))"
"(begin"
"(if(list? lst_379)(void)(let-values()(in-list lst_379)))"
"((letrec-values(((for-loop_380)"
"(lambda(defined-syms_381 lst_382)"
"(if(pair? lst_382)"
"(let-values(((sym_383)(unsafe-car lst_382)))"
"(if #t"
"(let-values(((defined-syms_384)"
"(let-values(((defined-syms_385) defined-syms_381))"
"(let-values(((defined-syms_386)"
"(let-values()"
"(hash-set"
" defined-syms_385"
" sym_383"
" #t))))"
"(values defined-syms_386)))))"
"(if #t"
"(for-loop_380 defined-syms_384(unsafe-cdr lst_382))"
" defined-syms_384))"
" defined-syms_381))"
" defined-syms_381))))"
" for-loop_380)"
" defined-syms_377"
" lst_379)))))"
"(hash-set! phase-to-defined-syms_376 phase_375 new-defined-syms_378))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_387 mod-name_388 phase_389)"
"(let-values(((at-mod_390)(hash-ref(requires+provides-requires r+p_387)(intern-mpi r+p_387 mod-name_388) #f)))"
"(if at-mod_390(apply append(hash-values(hash-ref at-mod_390 phase_389 '#hasheq()))) #f))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_391)"
"(let-values(((or-part_392)(extract-module-requires r+p_391(requires+provides-self r+p_391) 0)))"
"(if or-part_392 or-part_392 null))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_393 mod-name_394 phase_395)"
"(let-values(((self_396)(requires+provides-self r+p_393)))"
"(let-values(((requires_397)(requires+provides-requires r+p_393)))"
"(call/ec"
"(lambda(esc_398)"
"(alt-reverse"
"(let-values(((lst_399)"
"(if mod-name_394(list(intern-mpi r+p_393 mod-name_394))(hash-keys requires_397))))"
"(begin"
"(if(list? lst_399)(void)(let-values()(in-list lst_399)))"
"((letrec-values(((for-loop_400)"
"(lambda(fold-var_401 lst_402)"
"(if(pair? lst_402)"
"(let-values(((mod-name_403)(unsafe-car lst_402)))"
"(if #t"
"(let-values(((fold-var_404)"
"(let-values(((fold-var_405) fold-var_401))"
"(if(eq? mod-name_403 self_396)"
" fold-var_405"
"(let-values(((phase-to-requireds_406)"
"(hash-ref"
" requires_397"
" mod-name_403"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_407)"
"(lambda(fold-var_408)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_409)"
"(let-values(((lst_410)"
"(if(eq?"
" phase_395"
" 'all)"
"(hash-keys"
" phase-to-requireds_406)"
"(list"
" phase_395))))"
"(begin"
"(if(list?"
" lst_410)"
"(void)"
"(let-values()"
"(in-list"
" lst_410)))"
"((letrec-values(((for-loop_411)"
"(lambda(fold-var_412"
" lst_413)"
"(if(pair?"
" lst_413)"
"(let-values(((phase_414)"
"(unsafe-car"
" lst_413)))"
"(if #t"
"(let-values(((fold-var_415)"
"(let-values(((ht_416)"
"(hash-ref"
" phase-to-requireds_406"
" phase_414"
"(lambda()"
"(esc_398"
" #f)))))"
"(begin"
"(if((lambda(ht_417)"
"(hash?"
" ht_417))"
" ht_416)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_416)))"
"((letrec-values(((for-loop_418)"
"(lambda(fold-var_419"
" i_420)"
"(if i_420"
"(let-values(((reqds_421)"
"(hash-iterate-value"
" ht_416"
" i_420)))"
"(if #t"
"(let-values(((fold-var_422)"
"(let-values(((lst_423)"
" reqds_421))"
"(begin"
"(if(list?"
" lst_423)"
"(void)"
"(let-values()"
"(in-list"
" lst_423)))"
"((letrec-values(((for-loop_424)"
"(lambda(fold-var_425"
" lst_426)"
"(if(pair?"
" lst_426)"
"(let-values(((reqd_427)"
"(unsafe-car"
" lst_426)))"
"(if #t"
"(let-values(((fold-var_428)"
"(let-values(((fold-var_429)"
" fold-var_425))"
"(let-values(((fold-var_430)"
"(let-values()"
"(cons"
"(let-values()"
" reqd_427)"
" fold-var_429))))"
"(values"
" fold-var_430)))))"
"(if #t"
"(for-loop_424"
" fold-var_428"
"(unsafe-cdr"
" lst_426))"
" fold-var_428))"
" fold-var_425))"
" fold-var_425))))"
" for-loop_424)"
" fold-var_419"
" lst_423)))))"
"(if #t"
"(for-loop_418"
" fold-var_422"
"(hash-iterate-next"
" ht_416"
" i_420))"
" fold-var_422))"
" fold-var_419))"
" fold-var_419))))"
" for-loop_418)"
" fold-var_412"
"(hash-iterate-first"
" ht_416))))))"
"(if #t"
"(for-loop_411"
" fold-var_415"
"(unsafe-cdr"
" lst_413))"
" fold-var_415))"
" fold-var_412))"
" fold-var_412))))"
" for-loop_411)"
" fold-var_408"
" lst_410)))))"
"(if #f"
"(for-loop_407"
" fold-var_409)"
" fold-var_409))"
" fold-var_408))"
" fold-var_408))))"
" for-loop_407)"
" fold-var_405)))))))"
"(if #t(for-loop_400 fold-var_404(unsafe-cdr lst_402)) fold-var_404))"
" fold-var_401))"
" fold-var_401))))"
" for-loop_400)"
" null"
" lst_399))))))))))"
"(define-values"
"(lifted/6.1$1)"
"(make-required"
" 'add-provide!"
"(case-lambda"
"((self_431 r+p_432 sym_433 phase_434 binding_435 immed-binding_436 id_437 orig-s_438)"
"(apply missing-kw self_431 r+p_432 sym_433 phase_434 binding_435 immed-binding_436 id_437 orig-s_438 null)))"
" #f"
" #f))"
"(define-values"
"(add-provide!67.1)"
"(lambda(as-protected?56_439"
" as-transformer?57_440"
" r+p60_441"
" sym61_442"
" phase62_443"
" binding63_444"
" immed-binding64_445"
" id65_446"
" orig-s66_447)"
"(let-values(((r+p_448) r+p60_441))"
"(let-values(((sym_449) sym61_442))"
"(let-values(((phase_450) phase62_443))"
"(let-values(((binding_451) binding63_444))"
"(let-values(((immed-binding_452) immed-binding64_445))"
"(let-values(((id_453) id65_446))"
"(let-values(((orig-s_454) orig-s66_447))"
"(let-values(((as-protected?_455) as-protected?56_439))"
"(let-values(((as-transformer?_456) as-transformer?57_440))"
"(let-values()"
"(begin"
"(if(if as-protected?_455"
"(not(eq?(module-binding-module immed-binding_452)(requires+provides-self r+p_448)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect imported identifier with re-provide\" sym_449))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_448)"
" phase_450"
"(lambda(at-phase_457)"
"(let-values(((b/p_458)(hash-ref at-phase_457 sym_449 #f)))"
"(let-values(((b_459)(provided-as-binding b/p_458)))"
"(if(not b_459)"
"(let-values()"
"(hash-set"
" at-phase_457"
" sym_449"
"(if(let-values(((or-part_460) as-protected?_455))"
"(if or-part_460 or-part_460 as-transformer?_456))"
"(provided1.1 binding_451 as-protected?_455 as-transformer?_456)"
" binding_451)))"
"(if(same-binding? b_459 binding_451)"
"(let-values() at-phase_457)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_454"
" id_453)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(unpack68.1)"
"(lambda(given-kws_461"
" given-args_462"
" r+p60_463"
" sym61_464"
" phase62_465"
" binding63_466"
" immed-binding64_467"
" id65_468"
" orig-s66_469)"
"(let-values(((as-protected?56_470)(car given-args_462))"
"((given-kws_471)(cdr given-kws_461))"
"((given-args_472)(cdr given-args_462)))"
"(let-values(((as-transformer?57_473)(car given-args_472)))"
"(add-provide!67.1"
" as-protected?56_470"
" as-transformer?57_473"
" r+p60_463"
" sym61_464"
" phase62_465"
" binding63_466"
" immed-binding64_467"
" id65_468"
" orig-s66_469)))))"
"(define-values"
"(add-provide!69.1)"
"(lifted/6.1$1"
"(lambda(given-kws_474 given-argc_475)"
"(if(= given-argc_475 9)"
"(let-values(((l2_476) given-kws_474))"
"(if(pair? l2_476)"
"(if(eq?(car l2_476) '#:as-protected?)"
"(let-values(((l2_477)(cdr l2_476)))"
"(if(pair? l2_477)(if(eq?(car l2_477) '#:as-transformer?)(null?(cdr l2_477)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_478 given-args_479 r+p_480 sym_481 phase_482 binding_483 immed-binding_484 id_485 orig-s_486)"
"(unpack68.1"
" given-kws_478"
" given-args_479"
" r+p_480"
" sym_481"
" phase_482"
" binding_483"
" immed-binding_484"
" id_485"
" orig-s_486)))"
" '(#:as-protected? #:as-transformer?)"
" '(#:as-protected? #:as-transformer?)))"
"(define-values"
"(attach-require-provide-properties)"
"(lambda(r+p_487 s_488 old-self_489 new-self_490)"
"(let-values(((extract-requires_491)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_493)(requires+provides-require-mpis-in-order r+p_487)))"
"(let-values(((phases-in-order_494)"
"(let-values(((temp94_495)(hash-keys phase-to-mpis-in-order_493))"
"((phase<?95_496) phase<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp94_495 phase<?95_496)"
"(sort9.1 temp94_495 phase<?95_496)))))"
"(alt-reverse"
"(let-values(((lst_497) phases-in-order_494))"
"(begin"
"(if(list? lst_497)(void)(let-values()(in-list lst_497)))"
"((letrec-values(((for-loop_498)"
"(lambda(fold-var_499 lst_500)"
"(if(pair? lst_500)"
"(let-values(((phase_501)(unsafe-car lst_500)))"
"(if #t"
"(let-values(((fold-var_502)"
"(let-values(((fold-var_503) fold-var_499))"
"(let-values(((fold-var_504)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_501"
"(alt-reverse"
"(let-values(((lst_505)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_493"
" phase_501))))"
"(begin"
"(if(list? lst_505)"
"(void)"
"(let-values()"
"(in-list lst_505)))"
"((letrec-values(((for-loop_506)"
"(lambda(fold-var_507"
" lst_508)"
"(if(pair?"
" lst_508)"
"(let-values(((mpi_509)"
"(unsafe-car"
" lst_508)))"
"(if #t"
"(let-values(((fold-var_510)"
"(let-values(((fold-var_511)"
" fold-var_507))"
"(if(eq?"
" mpi_509"
" old-self_489)"
" fold-var_511"
"(let-values(((fold-var_512)"
" fold-var_511))"
"(let-values(((fold-var_513)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_509"
" old-self_489"
" new-self_490))"
" fold-var_512))))"
"(values"
" fold-var_513)))))))"
"(if #t"
"(for-loop_506"
" fold-var_510"
"(unsafe-cdr"
" lst_508))"
" fold-var_510))"
" fold-var_507))"
" fold-var_507))))"
" for-loop_506)"
" null"
" lst_505))))))"
" fold-var_503))))"
"(values fold-var_504)))))"
"(if #t"
"(for-loop_498 fold-var_502(unsafe-cdr lst_500))"
" fold-var_502))"
" fold-var_499))"
" fold-var_499))))"
" for-loop_498)"
" null"
" lst_497)))))))))"
"(let-values(((extract-provides_492)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_487)"
" old-self_489"
" new-self_490))))"
"(let-values(((s_514)(syntax-property$1 s_488 'module-requires(extract-requires_491))))"
"(let-values(((s_515)(syntax-property$1 s_514 'module-provides(extract-provides_492)))) s_515))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_539 from-mpi_540 to-mpi_541)"
"(if(eq? from-mpi_540 to-mpi_541)"
"(let-values() provides_539)"
"(let-values()"
"(let-values(((ht_542) provides_539))"
"(begin"
"(if((lambda(ht_543)(hash? ht_543)) ht_542)(void)(let-values()(default-in-hash ht_542)))"
"((letrec-values(((for-loop_544)"
"(lambda(table_545 i_546)"
"(if i_546"
"(let-values(((phase_547 at-phase_548)(hash-iterate-key+value ht_542 i_546)))"
"(if #t"
"(let-values(((table_549)"
"(let-values(((table_550) table_545))"
"(let-values(((table_551)"
"(let-values()"
"(let-values(((key_552 val_553)"
"(let-values()"
"(values"
" phase_547"
"(let-values(((ht_554)"
" at-phase_548))"
"(begin"
"(if((lambda(ht_555)"
"(hash? ht_555))"
" ht_554)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_554)))"
"((letrec-values(((for-loop_556)"
"(lambda(table_557"
" i_558)"
"(if i_558"
"(let-values(((sym_559"
" binding_560)"
"(hash-iterate-key+value"
" ht_554"
" i_558)))"
"(if #t"
"(let-values(((table_561)"
"(let-values(((table_562)"
" table_557))"
"(let-values(((table_563)"
"(let-values()"
"(let-values(((key_564"
" val_565)"
"(let-values()"
"(values"
" sym_559"
"((letrec-values(((loop_566)"
"(lambda(binding_567)"
"(if(provided?"
" binding_567)"
"(let-values()"
"(provided1.1"
"(loop_566"
"(provided-binding"
" binding_567))"
"(provided-protected?"
" binding_567)"
"(provided-syntax?"
" binding_567)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_567"
" from-mpi_540"
" to-mpi_541))))))"
" loop_566)"
" binding_560)))))"
"(hash-set"
" table_562"
" key_564"
" val_565)))))"
"(values"
" table_563)))))"
"(if #t"
"(for-loop_556"
" table_561"
"(hash-iterate-next"
" ht_554"
" i_558))"
" table_561))"
" table_557))"
" table_557))))"
" for-loop_556)"
" '#hasheq()"
"(hash-iterate-first"
" ht_554))))))))"
"(hash-set table_550 key_552 val_553)))))"
"(values table_551)))))"
"(if #t(for-loop_544 table_549(hash-iterate-next ht_542 i_546)) table_549))"
" table_545))"
" table_545))))"
" for-loop_544)"
" '#hasheqv()"
"(hash-iterate-first ht_542))))))))"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_24 make-_25 ?_26 -ref_27 -set!_28)"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix))))"
"(values struct:_24 make-_25 ?_26(make-struct-field-accessor -ref_27 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_45 make-_46 ?_47 -ref_48 -set!_49)"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except))))"
"(values"
" struct:_45"
" make-_46"
" ?_47"
"(make-struct-field-accessor -ref_48 0 'prefix-sym)"
"(make-struct-field-accessor -ref_48 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_71 make-_72 ?_73 -ref_74 -set!_75)"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename))))"
"(values"
" struct:_71"
" make-_72"
" ?_73"
"(make-struct-field-accessor -ref_74 0 'to-id)"
"(make-struct-field-accessor -ref_74 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!20.1)"
"(lambda(declared-submodule-names9_97"
" declared-submodule-names14_98"
" run-phase6_99"
" run-phase11_100"
" run?7_101"
" run?12_102"
" self5_103"
" self10_104"
" visit?8_105"
" visit?13_106"
" reqs15_107"
" orig-s16_108"
" m-ns17_109"
" phase-shift18_110"
" requires+provides19_111)"
"(let-values(((reqs_112) reqs15_107))"
"(let-values(((orig-s_113) orig-s16_108))"
"(let-values(((m-ns_114) m-ns17_109))"
"(let-values(((phase-shift_115) phase-shift18_110))"
"(let-values(((requires+provides_116) requires+provides19_111))"
"(let-values(((self_117)(if self10_104 self5_103 #f)))"
"(let-values(((run-phase_118)(if run-phase11_100 run-phase6_99(namespace-phase m-ns_114))))"
"(let-values(((run?_119)(if run?12_102 run?7_101 #f)))"
"(let-values(((visit?_120)(if visit?13_106 visit?8_105 #t)))"
"(let-values(((declared-submodule-names_121)"
"(if declared-submodule-names14_98 declared-submodule-names9_97 '#hasheq())))"
"(let-values()"
"((letrec-values(((loop_122)"
"(lambda(reqs_123"
" top-req_124"
" phase-shift_125"
" just-meta_126"
" adjust_127"
" for-meta-ok?_128"
" just-meta-ok?_129"
" layer_130)"
"(let-values(((lst_131) reqs_123))"
"(begin"
"(if(list? lst_131)(void)(let-values()(in-list lst_131)))"
"((letrec-values(((for-loop_132)"
"(lambda(result_133 lst_134)"
"(if(pair? lst_134)"
"(let-values(((req_135)(unsafe-car lst_134)))"
"(if #t"
"(let-values(((result_136)"
"(let-values(((result_137)"
" result_133))"
"(let-values(((result_138)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_139)"
"(let-values(((check-nested76_141)"
"(lambda(want-layer75_142"
" ok?73_143"
" ok?74_144)"
"(let-values(((want-layer_145)"
" want-layer75_142))"
"(let-values(((ok?_146)"
"(if ok?74_144"
" ok?73_143"
" #t)))"
"(let-values()"
"(if(if ok?_146"
"(member"
" want-layer_145"
"(member"
" layer_130"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"invalid nesting\""
" orig-s_113"
" req_135)))))))))"
"(case-lambda"
"((want-layer_147)"
"(check-nested76_141"
" want-layer_147"
" #f"
" #f))"
"((want-layer_148"
" ok?73_149)"
"(check-nested76_141"
" want-layer_148"
" ok?73_149"
" #t))))))"
"(let-values(((fm_140)"
"(if(pair?"
"(syntax-e$1"
" req_135))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_135)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_135)))"
" #f)"
" #f)))"
"(let-values(((tmp_150)"
" fm_140))"
"(if(equal?"
" tmp_150"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_151"
" for-meta78_152"
" phase-level79_153"
" spec80_154)"
"(let-values(((s_168)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_169)"
" s_168))"
"(let-values(((for-meta78_170"
" phase-level79_171"
" spec80_172)"
"(let-values(((s_173)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(pair?"
" s_173)"
"(let-values(((for-meta81_174)"
"(let-values(((s_177)"
"(car"
" s_173)))"
" s_177))"
"((phase-level82_175"
" spec83_176)"
"(let-values(((s_178)"
"(cdr"
" s_173)))"
"(let-values(((s_179)"
"(if(syntax?$1"
" s_178)"
"(syntax-e$1"
" s_178)"
" s_178)))"
"(if(pair?"
" s_179)"
"(let-values(((phase-level84_180)"
"(let-values(((s_182)"
"(car"
" s_179)))"
" s_182))"
"((spec85_181)"
"(let-values(((s_183)"
"(cdr"
" s_179)))"
"(let-values(((s_184)"
"(if(syntax?$1"
" s_183)"
"(syntax-e$1"
" s_183)"
" s_183)))"
"(let-values(((flat-s_185)"
"(to-syntax-list.1"
" s_184)))"
"(if(not"
" flat-s_185)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_169))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_169))"
"(let-values()"
" flat-s_185))))))))"
"(values"
" phase-level84_180"
" spec85_181))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_169))))))"
"(values"
" for-meta81_174"
" phase-level82_175"
" spec83_176))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_169)))))"
"(values"
" #t"
" for-meta78_170"
" phase-level79_171"
" spec80_172)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_167)"
"(syntax-e$1"
" phase-level79_153)))"
"(begin"
"(if(phase?"
" p_167)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad phase\""
" orig-s_113"
" req_135)))"
"(loop_122"
" spec80_154"
"(let-values(((or-part_186)"
" top-req_124))"
"(if or-part_186"
" or-part_186"
" req_135))"
"(phase+"
" phase-shift_125"
" p_167)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))))"
"(if(equal?"
" tmp_150"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_187"
" for-syntax86_188"
" spec87_189)"
"(let-values(((s_200)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_201)"
" s_200))"
"(let-values(((for-syntax86_202"
" spec87_203)"
"(let-values(((s_204)"
"(if(syntax?$1"
" s_200)"
"(syntax-e$1"
" s_200)"
" s_200)))"
"(if(pair?"
" s_204)"
"(let-values(((for-syntax88_205)"
"(let-values(((s_207)"
"(car"
" s_204)))"
" s_207))"
"((spec89_206)"
"(let-values(((s_208)"
"(cdr"
" s_204)))"
"(let-values(((s_209)"
"(if(syntax?$1"
" s_208)"
"(syntax-e$1"
" s_208)"
" s_208)))"
"(let-values(((flat-s_210)"
"(to-syntax-list.1"
" s_209)))"
"(if(not"
" flat-s_210)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_201))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_201))"
"(let-values()"
" flat-s_210))))))))"
"(values"
" for-syntax88_205"
" spec89_206))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_201)))))"
"(values"
" #t"
" for-syntax86_202"
" spec87_203)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec87_189"
"(let-values(((or-part_211)"
" top-req_124))"
"(if or-part_211"
" or-part_211"
" req_135))"
"(phase+"
" phase-shift_125"
" 1)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_212"
" for-template90_213"
" spec91_214)"
"(let-values(((s_225)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_226)"
" s_225))"
"(let-values(((for-template90_227"
" spec91_228)"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_229)"
"(let-values(((for-template92_230)"
"(let-values(((s_232)"
"(car"
" s_229)))"
" s_232))"
"((spec93_231)"
"(let-values(((s_233)"
"(cdr"
" s_229)))"
"(let-values(((s_234)"
"(if(syntax?$1"
" s_233)"
"(syntax-e$1"
" s_233)"
" s_233)))"
"(let-values(((flat-s_235)"
"(to-syntax-list.1"
" s_234)))"
"(if(not"
" flat-s_235)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_226))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_226))"
"(let-values()"
" flat-s_235))))))))"
"(values"
" for-template92_230"
" spec93_231))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_226)))))"
"(values"
" #t"
" for-template90_227"
" spec91_228)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec91_214"
"(let-values(((or-part_236)"
" top-req_124))"
"(if or-part_236"
" or-part_236"
" req_135))"
"(phase+"
" phase-shift_125"
" -1)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_237"
" for-label94_238"
" spec95_239)"
"(let-values(((s_250)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_251)"
" s_250))"
"(let-values(((for-label94_252"
" spec95_253)"
"(let-values(((s_254)"
"(if(syntax?$1"
" s_250)"
"(syntax-e$1"
" s_250)"
" s_250)))"
"(if(pair?"
" s_254)"
"(let-values(((for-label96_255)"
"(let-values(((s_257)"
"(car"
" s_254)))"
" s_257))"
"((spec97_256)"
"(let-values(((s_258)"
"(cdr"
" s_254)))"
"(let-values(((s_259)"
"(if(syntax?$1"
" s_258)"
"(syntax-e$1"
" s_258)"
" s_258)))"
"(let-values(((flat-s_260)"
"(to-syntax-list.1"
" s_259)))"
"(if(not"
" flat-s_260)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_251))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_251))"
"(let-values()"
" flat-s_260))))))))"
"(values"
" for-label96_255"
" spec97_256))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_251)))))"
"(values"
" #t"
" for-label94_252"
" spec95_253)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec95_239"
"(let-values(((or-part_261)"
" top-req_124))"
"(if or-part_261"
" or-part_261"
" req_135))"
"(phase+"
" phase-shift_125"
" #f)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" just-meta-ok?_129)"
"(values))))"
"(let-values(((ok?_262"
" just-meta98_263"
" phase-level99_264"
" spec100_265)"
"(let-values(((s_279)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_280)"
" s_279))"
"(let-values(((just-meta98_281"
" phase-level99_282"
" spec100_283)"
"(let-values(((s_284)"
"(if(syntax?$1"
" s_279)"
"(syntax-e$1"
" s_279)"
" s_279)))"
"(if(pair?"
" s_284)"
"(let-values(((just-meta101_285)"
"(let-values(((s_288)"
"(car"
" s_284)))"
" s_288))"
"((phase-level102_286"
" spec103_287)"
"(let-values(((s_289)"
"(cdr"
" s_284)))"
"(let-values(((s_290)"
"(if(syntax?$1"
" s_289)"
"(syntax-e$1"
" s_289)"
" s_289)))"
"(if(pair?"
" s_290)"
"(let-values(((phase-level104_291)"
"(let-values(((s_293)"
"(car"
" s_290)))"
" s_293))"
"((spec105_292)"
"(let-values(((s_294)"
"(cdr"
" s_290)))"
"(let-values(((s_295)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1"
" s_294)"
" s_294)))"
"(let-values(((flat-s_296)"
"(to-syntax-list.1"
" s_295)))"
"(if(not"
" flat-s_296)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_280))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_280))"
"(let-values()"
" flat-s_296))))))))"
"(values"
" phase-level104_291"
" spec105_292))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_280))))))"
"(values"
" just-meta101_285"
" phase-level102_286"
" spec103_287))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_280)))))"
"(values"
" #t"
" just-meta98_281"
" phase-level99_282"
" spec100_283)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_278)"
"(syntax-e$1"
" phase-level99_264)))"
"(begin"
"(if(phase?"
" p_278)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad phase\""
" orig-s_113"
" req_135)))"
"(loop_122"
" spec100_265"
"(let-values(((or-part_297)"
" top-req_124))"
"(if or-part_297"
" or-part_297"
" req_135))"
" phase-shift_125"
" just-meta_126"
" adjust_127"
" for-meta-ok?_128"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_150"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_298"
" only106_299"
" spec107_300"
" id108_301)"
"(let-values(((s_314)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_315)"
" s_314))"
"(let-values(((only106_316"
" spec107_317"
" id108_318)"
"(let-values(((s_319)"
"(if(syntax?$1"
" s_314)"
"(syntax-e$1"
" s_314)"
" s_314)))"
"(if(pair?"
" s_319)"
"(let-values(((only109_320)"
"(let-values(((s_323)"
"(car"
" s_319)))"
" s_323))"
"((spec110_321"
" id111_322)"
"(let-values(((s_324)"
"(cdr"
" s_319)))"
"(let-values(((s_325)"
"(if(syntax?$1"
" s_324)"
"(syntax-e$1"
" s_324)"
" s_324)))"
"(if(pair?"
" s_325)"
"(let-values(((spec112_326)"
"(let-values(((s_328)"
"(car"
" s_325)))"
" s_328))"
"((id113_327)"
"(let-values(((s_329)"
"(cdr"
" s_325)))"
"(let-values(((s_330)"
"(if(syntax?$1"
" s_329)"
"(syntax-e$1"
" s_329)"
" s_329)))"
"(let-values(((flat-s_331)"
"(to-syntax-list.1"
" s_330)))"
"(if(not"
" flat-s_331)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_315))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_315))"
"(let-values()"
"(let-values(((id_332)"
"(let-values(((lst_333)"
" flat-s_331))"
"(begin"
"(if(list?"
" lst_333)"
"(void)"
"(let-values()"
"(in-list"
" lst_333)))"
"((letrec-values(((for-loop_334)"
"(lambda(id_335"
" lst_336)"
"(if(pair?"
" lst_336)"
"(let-values(((s_337)"
"(unsafe-car"
" lst_336)))"
"(if #t"
"(let-values(((id_338)"
"(let-values(((id_339)"
" id_335))"
"(let-values(((id_340)"
"(let-values()"
"(let-values(((id114_341)"
"(let-values()"
"(if(let-values(((or-part_342)"
"(if(syntax?$1"
" s_337)"
"(symbol?"
"(syntax-e$1"
" s_337))"
" #f)))"
"(if or-part_342"
" or-part_342"
"(symbol?"
" s_337)))"
" s_337"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_315"
" s_337)))))"
"(cons"
" id114_341"
" id_339)))))"
"(values"
" id_340)))))"
"(if #t"
"(for-loop_334"
" id_338"
"(unsafe-cdr"
" lst_336))"
" id_338))"
" id_335))"
" id_335))))"
" for-loop_334)"
" null"
" lst_333)))))"
"(alt-reverse"
" id_332))))))))))"
"(values"
" spec112_326"
" id113_327))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_315))))))"
"(values"
" only109_320"
" spec110_321"
" id111_322))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_315)))))"
"(values"
" #t"
" only106_316"
" spec107_317"
" id108_318)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec107_300)"
"(let-values(((or-part_343)"
" top-req_124))"
"(if or-part_343"
" or-part_343"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-only1.1"
"(ids->sym-set"
" id108_301))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_344"
" prefix115_345"
" id:prefix116_346"
" spec117_347)"
"(let-values(((s_360)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_361)"
" s_360))"
"(let-values(((prefix115_362"
" id:prefix116_363"
" spec117_364)"
"(let-values(((s_365)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(if(pair?"
" s_365)"
"(let-values(((prefix118_366)"
"(let-values(((s_369)"
"(car"
" s_365)))"
" s_369))"
"((id:prefix119_367"
" spec120_368)"
"(let-values(((s_370)"
"(cdr"
" s_365)))"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_370)"
"(syntax-e$1"
" s_370)"
" s_370)))"
"(if(pair?"
" s_371)"
"(let-values(((id:prefix121_372)"
"(let-values(((s_374)"
"(car"
" s_371)))"
"(if(let-values(((or-part_375)"
"(if(syntax?$1"
" s_374)"
"(symbol?"
"(syntax-e$1"
" s_374))"
" #f)))"
"(if or-part_375"
" or-part_375"
"(symbol?"
" s_374)))"
" s_374"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_361"
" s_374))))"
"((spec122_373)"
"(let-values(((s_376)"
"(cdr"
" s_371)))"
"(let-values(((s_377)"
"(if(syntax?$1"
" s_376)"
"(syntax-e$1"
" s_376)"
" s_376)))"
"(if(pair?"
" s_377)"
"(let-values(((spec123_378)"
"(let-values(((s_379)"
"(car"
" s_377)))"
" s_379))"
"(()"
"(let-values(((s_380)"
"(cdr"
" s_377)))"
"(let-values(((s_381)"
"(if(syntax?$1"
" s_380)"
"(syntax-e$1"
" s_380)"
" s_380)))"
"(if(null?"
" s_381)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_361))))))"
"(values"
" spec123_378))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_361))))))"
"(values"
" id:prefix121_372"
" spec122_373))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_361))))))"
"(values"
" prefix118_366"
" id:prefix119_367"
" spec120_368))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_361)))))"
"(values"
" #t"
" prefix115_362"
" id:prefix116_363"
" spec117_364)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec117_347)"
"(let-values(((or-part_382)"
" top-req_124))"
"(if or-part_382"
" or-part_382"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix116_346))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_383"
" all-except124_384"
" spec125_385"
" id126_386)"
"(let-values(((s_399)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_400)"
" s_399))"
"(let-values(((all-except124_401"
" spec125_402"
" id126_403)"
"(let-values(((s_404)"
"(if(syntax?$1"
" s_399)"
"(syntax-e$1"
" s_399)"
" s_399)))"
"(if(pair?"
" s_404)"
"(let-values(((all-except127_405)"
"(let-values(((s_408)"
"(car"
" s_404)))"
" s_408))"
"((spec128_406"
" id129_407)"
"(let-values(((s_409)"
"(cdr"
" s_404)))"
"(let-values(((s_410)"
"(if(syntax?$1"
" s_409)"
"(syntax-e$1"
" s_409)"
" s_409)))"
"(if(pair?"
" s_410)"
"(let-values(((spec130_411)"
"(let-values(((s_413)"
"(car"
" s_410)))"
" s_413))"
"((id131_412)"
"(let-values(((s_414)"
"(cdr"
" s_410)))"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(let-values(((flat-s_416)"
"(to-syntax-list.1"
" s_415)))"
"(if(not"
" flat-s_416)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_400))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_400))"
"(let-values()"
"(let-values(((id_417)"
"(let-values(((lst_418)"
" flat-s_416))"
"(begin"
"(if(list?"
" lst_418)"
"(void)"
"(let-values()"
"(in-list"
" lst_418)))"
"((letrec-values(((for-loop_419)"
"(lambda(id_420"
" lst_421)"
"(if(pair?"
" lst_421)"
"(let-values(((s_422)"
"(unsafe-car"
" lst_421)))"
"(if #t"
"(let-values(((id_423)"
"(let-values(((id_424)"
" id_420))"
"(let-values(((id_425)"
"(let-values()"
"(let-values(((id132_426)"
"(let-values()"
"(if(let-values(((or-part_427)"
"(if(syntax?$1"
" s_422)"
"(symbol?"
"(syntax-e$1"
" s_422))"
" #f)))"
"(if or-part_427"
" or-part_427"
"(symbol?"
" s_422)))"
" s_422"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_400"
" s_422)))))"
"(cons"
" id132_426"
" id_424)))))"
"(values"
" id_425)))))"
"(if #t"
"(for-loop_419"
" id_423"
"(unsafe-cdr"
" lst_421))"
" id_423))"
" id_420))"
" id_420))))"
" for-loop_419)"
" null"
" lst_418)))))"
"(alt-reverse"
" id_417))))))))))"
"(values"
" spec130_411"
" id131_412))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_400))))))"
"(values"
" all-except127_405"
" spec128_406"
" id129_407))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_400)))))"
"(values"
" #t"
" all-except124_401"
" spec125_402"
" id126_403)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec125_385)"
"(let-values(((or-part_428)"
" top-req_124))"
"(if or-part_428"
" or-part_428"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id126_386))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_429"
" prefix-all-except133_430"
" id:prefix134_431"
" spec135_432"
" id136_433)"
"(let-values(((s_448)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_449)"
" s_448))"
"(let-values(((prefix-all-except133_450"
" id:prefix134_451"
" spec135_452"
" id136_453)"
"(let-values(((s_454)"
"(if(syntax?$1"
" s_448)"
"(syntax-e$1"
" s_448)"
" s_448)))"
"(if(pair?"
" s_454)"
"(let-values(((prefix-all-except137_455)"
"(let-values(((s_459)"
"(car"
" s_454)))"
" s_459))"
"((id:prefix138_456"
" spec139_457"
" id140_458)"
"(let-values(((s_460)"
"(cdr"
" s_454)))"
"(let-values(((s_461)"
"(if(syntax?$1"
" s_460)"
"(syntax-e$1"
" s_460)"
" s_460)))"
"(if(pair?"
" s_461)"
"(let-values(((id:prefix141_462)"
"(let-values(((s_465)"
"(car"
" s_461)))"
"(if(let-values(((or-part_466)"
"(if(syntax?$1"
" s_465)"
"(symbol?"
"(syntax-e$1"
" s_465))"
" #f)))"
"(if or-part_466"
" or-part_466"
"(symbol?"
" s_465)))"
" s_465"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_449"
" s_465))))"
"((spec142_463"
" id143_464)"
"(let-values(((s_467)"
"(cdr"
" s_461)))"
"(let-values(((s_468)"
"(if(syntax?$1"
" s_467)"
"(syntax-e$1"
" s_467)"
" s_467)))"
"(if(pair?"
" s_468)"
"(let-values(((spec144_469)"
"(let-values(((s_471)"
"(car"
" s_468)))"
" s_471))"
"((id145_470)"
"(let-values(((s_472)"
"(cdr"
" s_468)))"
"(let-values(((s_473)"
"(if(syntax?$1"
" s_472)"
"(syntax-e$1"
" s_472)"
" s_472)))"
"(let-values(((flat-s_474)"
"(to-syntax-list.1"
" s_473)))"
"(if(not"
" flat-s_474)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_449))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_449))"
"(let-values()"
"(let-values(((id_475)"
"(let-values(((lst_476)"
" flat-s_474))"
"(begin"
"(if(list?"
" lst_476)"
"(void)"
"(let-values()"
"(in-list"
" lst_476)))"
"((letrec-values(((for-loop_477)"
"(lambda(id_478"
" lst_479)"
"(if(pair?"
" lst_479)"
"(let-values(((s_480)"
"(unsafe-car"
" lst_479)))"
"(if #t"
"(let-values(((id_481)"
"(let-values(((id_482)"
" id_478))"
"(let-values(((id_483)"
"(let-values()"
"(let-values(((id146_484)"
"(let-values()"
"(if(let-values(((or-part_485)"
"(if(syntax?$1"
" s_480)"
"(symbol?"
"(syntax-e$1"
" s_480))"
" #f)))"
"(if or-part_485"
" or-part_485"
"(symbol?"
" s_480)))"
" s_480"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_449"
" s_480)))))"
"(cons"
" id146_484"
" id_482)))))"
"(values"
" id_483)))))"
"(if #t"
"(for-loop_477"
" id_481"
"(unsafe-cdr"
" lst_479))"
" id_481))"
" id_478))"
" id_478))))"
" for-loop_477)"
" null"
" lst_476)))))"
"(alt-reverse"
" id_475))))))))))"
"(values"
" spec144_469"
" id145_470))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_449))))))"
"(values"
" id:prefix141_462"
" spec142_463"
" id143_464))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_449))))))"
"(values"
" prefix-all-except137_455"
" id:prefix138_456"
" spec139_457"
" id140_458))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_449)))))"
"(values"
" #t"
" prefix-all-except133_450"
" id:prefix134_451"
" spec135_452"
" id136_453)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec135_432)"
"(let-values(((or-part_486)"
" top-req_124))"
"(if or-part_486"
" or-part_486"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix134_431)"
"(ids->sym-set"
" id136_433))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_487"
" rename147_488"
" spec148_489"
" id:to149_490"
" id:from150_491)"
"(let-values(((s_506)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_507)"
" s_506))"
"(let-values(((rename147_508"
" spec148_509"
" id:to149_510"
" id:from150_511)"
"(let-values(((s_512)"
"(if(syntax?$1"
" s_506)"
"(syntax-e$1"
" s_506)"
" s_506)))"
"(if(pair?"
" s_512)"
"(let-values(((rename151_513)"
"(let-values(((s_517)"
"(car"
" s_512)))"
" s_517))"
"((spec152_514"
" id:to153_515"
" id:from154_516)"
"(let-values(((s_518)"
"(cdr"
" s_512)))"
"(let-values(((s_519)"
"(if(syntax?$1"
" s_518)"
"(syntax-e$1"
" s_518)"
" s_518)))"
"(if(pair?"
" s_519)"
"(let-values(((spec155_520)"
"(let-values(((s_523)"
"(car"
" s_519)))"
" s_523))"
"((id:to156_521"
" id:from157_522)"
"(let-values(((s_524)"
"(cdr"
" s_519)))"
"(let-values(((s_525)"
"(if(syntax?$1"
" s_524)"
"(syntax-e$1"
" s_524)"
" s_524)))"
"(if(pair?"
" s_525)"
"(let-values(((id:to158_526)"
"(let-values(((s_528)"
"(car"
" s_525)))"
"(if(let-values(((or-part_529)"
"(if(syntax?$1"
" s_528)"
"(symbol?"
"(syntax-e$1"
" s_528))"
" #f)))"
"(if or-part_529"
" or-part_529"
"(symbol?"
" s_528)))"
" s_528"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_507"
" s_528))))"
"((id:from159_527)"
"(let-values(((s_530)"
"(cdr"
" s_525)))"
"(let-values(((s_531)"
"(if(syntax?$1"
" s_530)"
"(syntax-e$1"
" s_530)"
" s_530)))"
"(if(pair?"
" s_531)"
"(let-values(((id:from160_532)"
"(let-values(((s_533)"
"(car"
" s_531)))"
"(if(let-values(((or-part_534)"
"(if(syntax?$1"
" s_533)"
"(symbol?"
"(syntax-e$1"
" s_533))"
" #f)))"
"(if or-part_534"
" or-part_534"
"(symbol?"
" s_533)))"
" s_533"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_507"
" s_533))))"
"(()"
"(let-values(((s_535)"
"(cdr"
" s_531)))"
"(let-values(((s_536)"
"(if(syntax?$1"
" s_535)"
"(syntax-e$1"
" s_535)"
" s_535)))"
"(if(null?"
" s_536)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_507))))))"
"(values"
" id:from160_532))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_507))))))"
"(values"
" id:to158_526"
" id:from159_527))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_507))))))"
"(values"
" spec155_520"
" id:to156_521"
" id:from157_522))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_507))))))"
"(values"
" rename151_513"
" spec152_514"
" id:to153_515"
" id:from154_516))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_507)))))"
"(values"
" #t"
" rename147_508"
" spec148_509"
" id:to149_510"
" id:from150_511)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec148_489)"
"(let-values(((or-part_537)"
" top-req_124))"
"(if or-part_537"
" or-part_537"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-rename4.1"
" id:to149_490"
"(syntax-e$1"
" id:from150_491))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_538)"
"(syntax->datum$1"
" req_135)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_541)"
"(1/module-path?"
" maybe-mp_538)))"
"(if or-part_541"
" or-part_541"
"(1/resolved-module-path?"
" maybe-mp_538)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad require spec\""
" orig-s_113"
" req_135)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_542)"
" adjust_127))"
"(if or-part_542"
" or-part_542"
"(not"
"(eq?"
" just-meta_126"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_116"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_539)"
"(if(1/resolved-module-path?"
" maybe-mp_538)"
"(resolved-module-path->module-path"
" maybe-mp_538)"
" maybe-mp_538)))"
"(let-values(((mpi_540)"
"(let-values(((...r/expand/require.rkt:160:21_543)"
" module-path->mpi7.1)"
"((mp173_544)"
" mp_539)"
"((self174_545)"
" self_117)"
"((declared-submodule-names175_546)"
" declared-submodule-names_121))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path->mpi7.1))"
"(module-path->mpi5.1"
" declared-submodule-names175_546"
" #t"
" mp173_544"
" self174_545)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:160:21_543"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 4)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names175_546)"
" mp173_544"
" self174_545)))))"
"(let-values(((...r/expand/require.rkt:162:9_547)"
" perform-require!48.1)"
"((mpi161_548)"
" mpi_540)"
"((temp162_549)"
" #f)"
"((self163_550)"
" self_117)"
"((temp164_551)"
"(let-values(((or-part_560)"
" req_135))"
"(if or-part_560"
" or-part_560"
" top-req_124)))"
"((m-ns165_552)"
" m-ns_114)"
"((phase-shift166_553)"
" phase-shift_125)"
"((run-phase167_554)"
" run-phase_118)"
"((just-meta168_555)"
" just-meta_126)"
"((adjust169_556)"
" adjust_127)"
"((requires+provides170_557)"
" requires+provides_116)"
"((run?171_558)"
" run?_119)"
"((visit?172_559)"
" visit?_120))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!48.1))"
"(perform-require!46.1"
" adjust169_556"
" #t"
" #f"
" #f"
" #f"
" #f"
" just-meta168_555"
" #t"
" phase-shift166_553"
" requires+provides170_557"
" #t"
" run-phase167_554"
" run?171_558"
" #t"
" visit?172_559"
" #t"
" mpi161_548"
" temp162_549"
" self163_550"
" temp164_551"
" m-ns165_552)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:162:9_547"
" keyword-procedure-extract"
" '(#:adjust"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)"
" 7)"
" '(#:adjust"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)"
"(list"
" adjust169_556"
" just-meta168_555"
" phase-shift166_553"
" requires+provides170_557"
" run-phase167_554"
" run?171_558"
" visit?172_559)"
" mpi161_548"
" temp162_549"
" self163_550"
" temp164_551"
" m-ns165_552))))))))))))))))))))))))))"
"(values result_138)))))"
"(if(if #t"
"(not"
"((lambda x_561(not result_136))"
" req_135))"
" #f)"
"(for-loop_132"
" result_136"
"(unsafe-cdr lst_134))"
" result_136))"
" result_133))"
" result_133))))"
" for-loop_132)"
" #t"
" lst_131))))))"
" loop_122)"
" reqs_112"
" #f"
" phase-shift_115"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))"
"(define-values"
"(unpack21.1)"
"(lambda(given-kws_562 given-args_563 reqs15_564 orig-s16_565 m-ns17_566 phase-shift18_567 requires+provides19_568)"
"(let-values(((declared-submodule-names14_569)"
"(if(pair? given-kws_562)(eq? '#:declared-submodule-names(car given-kws_562)) #f)))"
"(let-values(((declared-submodule-names9_570)(if declared-submodule-names14_569(car given-args_563)(void)))"
"((given-kws_571)(if declared-submodule-names14_569(cdr given-kws_562) given-kws_562))"
"((given-args_572)(if declared-submodule-names14_569(cdr given-args_563) given-args_563)))"
"(let-values(((run-phase11_573)(if(pair? given-kws_571)(eq? '#:run-phase(car given-kws_571)) #f)))"
"(let-values(((run-phase6_574)(if run-phase11_573(car given-args_572)(void)))"
"((given-kws_575)(if run-phase11_573(cdr given-kws_571) given-kws_571))"
"((given-args_576)(if run-phase11_573(cdr given-args_572) given-args_572)))"
"(let-values(((run?12_577)(if(pair? given-kws_575)(eq? '#:run?(car given-kws_575)) #f)))"
"(let-values(((run?7_578)(if run?12_577(car given-args_576)(void)))"
"((given-kws_579)(if run?12_577(cdr given-kws_575) given-kws_575))"
"((given-args_580)(if run?12_577(cdr given-args_576) given-args_576)))"
"(let-values(((self10_581)(if(pair? given-kws_579)(eq? '#:self(car given-kws_579)) #f)))"
"(let-values(((self5_582)(if self10_581(car given-args_580)(void)))"
"((given-kws_583)(if self10_581(cdr given-kws_579) given-kws_579))"
"((given-args_584)(if self10_581(cdr given-args_580) given-args_580)))"
"(let-values(((visit?13_585)(pair? given-kws_583)))"
"(let-values(((visit?8_586)(if visit?13_585(car given-args_584)(void))))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names9_570"
" declared-submodule-names14_569"
" run-phase6_574"
" run-phase11_573"
" run?7_578"
" run?12_577"
" self5_582"
" self10_581"
" visit?8_586"
" visit?13_585"
" reqs15_564"
" orig-s16_565"
" m-ns17_566"
" phase-shift18_567"
" requires+provides19_568)))))))))))))"
"(define-values"
"(parse-and-perform-requires!22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_587 given-argc_588)"
"(if(= given-argc_588 7)"
"(let-values(((l1_589) given-kws_587))"
"(let-values(((l1_590)"
"(if(null? l1_589)"
" l1_589"
"(if(eq?(car l1_589) '#:declared-submodule-names)(cdr l1_589) l1_589))))"
"(let-values(((l1_591) l1_590))"
"(let-values(((l1_592)"
"(if(null? l1_591) l1_591(if(eq?(car l1_591) '#:run-phase)(cdr l1_591) l1_591))))"
"(let-values(((l1_593) l1_592))"
"(let-values(((l1_594)(if(null? l1_593) l1_593(if(eq?(car l1_593) '#:run?)(cdr l1_593) l1_593))))"
"(let-values(((l1_595) l1_594))"
"(let-values(((l1_596)"
"(if(null? l1_595) l1_595(if(eq?(car l1_595) '#:self)(cdr l1_595) l1_595))))"
"(let-values(((l1_597) l1_596))"
"(let-values(((l1_598)"
"(if(null? l1_597)"
" l1_597"
"(if(eq?(car l1_597) '#:visit?)(cdr l1_597) l1_597))))"
"(null? l1_598)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_599 given-args_600 reqs_601 orig-s_602 m-ns_603 phase-shift_604 requires+provides_605)"
"(unpack21.1 given-kws_599 given-args_600 reqs_601 orig-s_602 m-ns_603 phase-shift_604 requires+provides_605)))"
" null"
" '(#:declared-submodule-names #:run-phase #:run? #:self #:visit?)"
"(let-values(((parse-and-perform-requires!_606)"
"(case-lambda"
"((reqs_607 orig-s_608 m-ns_609 phase-shift_610 requires+provides_611)"
"(unpack21.1 null null reqs_607 orig-s_608 m-ns_609 phase-shift_610 requires+provides_611)))))"
" parse-and-perform-requires!_606)))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_612)"
"(let-values(((lst_613) ids_612))"
"(begin"
"(if(list? lst_613)(void)(let-values()(in-list lst_613)))"
"((letrec-values(((for-loop_614)"
"(lambda(table_615 lst_616)"
"(if(pair? lst_616)"
"(let-values(((id_617)(unsafe-car lst_616)))"
"(if #t"
"(let-values(((table_618)"
"(let-values(((table_619) table_615))"
"(let-values(((table_620)"
"(let-values()"
"(let-values(((key_621 val_622)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_617))"
" #t))))"
"(hash-set table_619 key_621 val_622)))))"
"(values table_620)))))"
"(if #t(for-loop_614 table_618(unsafe-cdr lst_616)) table_618))"
" table_615))"
" table_615))))"
" for-loop_614)"
" '#hash()"
" lst_613)))))"
"(define-values"
"(perform-initial-require!)"
"(lambda(mod-path_623 self_624 in-stx_625 m-ns_626 requires+provides_627)"
"(let-values(((...r/expand/require.rkt:181:2_628) perform-require!48.1)"
"((temp176_629)"
"(let-values(((mod-path186_639) mod-path_623)((self187_640) self_624))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi7.1))"
"(module-path->mpi5.1 #f #f mod-path186_639 self187_640)"
"(module-path->mpi7.1 mod-path186_639 self187_640))))"
"((temp177_630) #f)"
"((self178_631) self_624)"
"((in-stx179_632) in-stx_625)"
"((m-ns180_633) m-ns_626)"
"((temp181_634) 0)"
"((temp182_635) 0)"
"((requires+provides183_636) requires+provides_627)"
"((temp184_637) #t)"
"((temp185_638) #t))"
"(if(variable-reference-constant?(#%variable-reference perform-require!48.1))"
"(perform-require!46.1"
" #f"
" #f"
" temp184_637"
" #t"
" temp185_638"
" #t"
" #f"
" #f"
" temp181_634"
" requires+provides183_636"
" #t"
" temp182_635"
" #f"
" #f"
" #f"
" #f"
" temp176_629"
" temp177_630"
" self178_631"
" in-stx179_632"
" m-ns180_633)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:181:2_628"
" keyword-procedure-extract"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase)"
" 7)"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase)"
"(list temp184_637 temp185_638 temp181_634 requires+provides183_636 temp182_635)"
" temp176_629"
" temp177_630"
" self178_631"
" in-stx179_632"
" m-ns180_633)))))"
"(define-values"
"(lifted/1.1$14)"
"(make-required"
" 'perform-require!"
"(case-lambda"
"((self_641 mpi_642 orig-s_643 self_644 in-stx_645 m-ns_646)"
"(apply missing-kw self_641 mpi_642 orig-s_643 self_644 in-stx_645 m-ns_646 null)))"
" #f"
" #f))"
"(define-values"
"(perform-require!46.1)"
"(lambda(adjust26_647"
" adjust35_648"
" can-be-shadowed?30_649"
" can-be-shadowed?39_650"
" initial-require?31_651"
" initial-require?40_652"
" just-meta25_653"
" just-meta34_654"
" phase-shift23_655"
" requires+provides27_656"
" requires+provides36_657"
" run-phase24_658"
" run?29_659"
" run?38_660"
" visit?28_661"
" visit?37_662"
" mpi41_663"
" orig-s42_664"
" self43_665"
" in-stx44_666"
" m-ns45_667)"
"(let-values(((mpi_668) mpi41_663))"
"(let-values(((orig-s_669) orig-s42_664))"
"(let-values(((self_670) self43_665))"
"(let-values(((in-stx_671) in-stx44_666))"
"(let-values(((m-ns_672) m-ns45_667))"
"(let-values(((phase-shift_673) phase-shift23_655))"
"(let-values(((run-phase_674) run-phase24_658))"
"(let-values(((just-meta_675)(if just-meta34_654 just-meta25_653 'all)))"
"(let-values(((adjust_676)(if adjust35_648 adjust26_647 #f)))"
"(let-values(((requires+provides_677)(if requires+provides36_657 requires+provides27_656 #f)))"
"(let-values(((visit?_678)(if visit?37_662 visit?28_661 #t)))"
"(let-values(((run?_679)(if run?38_660 run?29_659 #f)))"
"(let-values(((can-be-shadowed?_680)(if can-be-shadowed?39_650 can-be-shadowed?30_649 #f)))"
"(let-values(((initial-require?_681)"
"(if initial-require?40_652 initial-require?31_651 #f)))"
"(let-values()"
"(let-values(((module-name_682)(1/module-path-index-resolve mpi_668 #t)))"
"(let-values(((bind-in-stx_683)"
"(if(adjust-rename? adjust_676)"
"(adjust-rename-to-id adjust_676)"
" in-stx_671)))"
"(let-values(((done-syms_684)(if adjust_676(make-hash) #f)))"
"(let-values(((m_685)(namespace->module m-ns_672 module-name_682)))"
"(let-values((()"
"(begin"
"(if m_685"
"(void)"
"(let-values()"
"(raise-unknown-module-error 'require module-name_682)))"
"(values))))"
"(let-values(((interned-mpi_686)"
"(if requires+provides_677"
"(add-required-module!"
" requires+provides_677"
" mpi_668"
" phase-shift_673"
"(module-cross-phase-persistent? m_685))"
" mpi_668)))"
"(let-values((()"
"(begin"
"(if visit?_678"
"(let-values()"
"(let-values(((...r/expand/require.rkt:215:4_688)"
" namespace-module-visit!103.1)"
"((m-ns197_689) m-ns_672)"
"((interned-mpi198_690) interned-mpi_686)"
"((phase-shift199_691) phase-shift_673)"
"((run-phase200_692) run-phase_674))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!103.1))"
"(namespace-module-visit!101.1"
" run-phase200_692"
" #t"
" m-ns197_689"
" interned-mpi198_690"
" phase-shift199_691)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:215:4_688"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase200_692)"
" m-ns197_689"
" interned-mpi198_690"
" phase-shift199_691))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_679"
"(let-values()"
"(let-values(((...r/expand/require.rkt:217:4_693)"
" namespace-module-instantiate!95.1)"
"((m-ns201_694) m-ns_672)"
"((interned-mpi202_695)"
" interned-mpi_686)"
"((phase-shift203_696) phase-shift_673)"
"((run-phase204_697) run-phase_674))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" run-phase204_697"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns201_694"
" interned-mpi202_695"
" phase-shift203_696)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:217:4_693"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list run-phase204_697)"
" m-ns201_694"
" interned-mpi202_695"
" phase-shift203_696))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_698) visit?_678))"
"(if or-part_698 or-part_698 run?_679)))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:220:4_699)"
" namespace-module-make-available!111.1)"
"((m-ns205_700) m-ns_672)"
"((interned-mpi206_701)"
" interned-mpi_686)"
"((phase-shift207_702)"
" phase-shift_673)"
"((run-phase208_703) run-phase_674))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-make-available!111.1))"
"(namespace-module-make-available!109.1"
" run-phase208_703"
" #t"
" m-ns205_700"
" interned-mpi206_701"
" phase-shift207_702)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:220:4_699"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase208_703)"
" m-ns205_700"
" interned-mpi206_701"
" phase-shift207_702))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:221:2_704)"
" bind-all-provides!64.1)"
"((m188_705) m_685)"
"((bind-in-stx189_706) bind-in-stx_683)"
"((phase-shift190_707) phase-shift_673)"
"((m-ns191_708) m-ns_672)"
"((interned-mpi192_709)"
" interned-mpi_686)"
"((orig-s193_710) orig-s_669)"
"((temp194_711)"
"(if(adjust-only? adjust_676)"
"(let-values()"
"(set->list"
"(adjust-only-syms adjust_676)))"
"(if(adjust-rename? adjust_676)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_676)))"
"(let-values() #f))))"
"((temp195_712)(not adjust_676))"
"((temp196_713)"
"(if(let-values(((or-part_714)"
" adjust_676))"
"(if or-part_714"
" or-part_714"
" requires+provides_677))"
"(lambda(binding_715"
" as-transformer?_716)"
"(let-values(((sym_717)"
"(module-binding-nominal-sym"
" binding_715)))"
"(let-values(((provide-phase_718)"
"(module-binding-nominal-phase"
" binding_715)))"
"(let-values(((adjusted-sym_719)"
"(if(if(not"
"(eq?"
" just-meta_675"
" 'all))"
"(not"
"(equal?"
" provide-phase_718"
" just-meta_675))"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_676)"
"(let-values()"
" sym_717)"
"(if(adjust-only?"
" adjust_676)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_676)"
" sym_717)"
"(if(hash-set!"
" done-syms_684"
" sym_717"
" #t)"
" sym_717"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_676)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                    \"~a~a\""
"(adjust-prefix-sym"
" adjust_676)"
" sym_717)))"
"(if(adjust-all-except?"
" adjust_676)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_676)"
" sym_717)"
"(hash-set!"
" done-syms_684"
" sym_717"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                        \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_676)"
" sym_717))"
" #f))"
"(if(adjust-rename?"
" adjust_676)"
"(let-values()"
"(if(eq?"
" sym_717"
"(adjust-rename-from-sym"
" adjust_676))"
"(if(hash-set!"
" done-syms_684"
" sym_717"
" #t)"
"(adjust-rename-to-id"
" adjust_676)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_719"
" requires+provides_677"
" #f)"
"(let-values()"
"(let-values(((s_720)"
"(datum->syntax$1"
" bind-in-stx_683"
" adjusted-sym_719)))"
"(let-values(((bind-phase_721)"
"(phase+"
" phase-shift_673"
" provide-phase_718)))"
"(begin"
"(if initial-require?_681"
"(void)"
"(let-values()"
"(begin"
"(let-values(((...r/expand/require.rkt:262:19_722)"
" check-not-defined55.1)"
"((temp215_723)"
" #t)"
"((requires+provides216_724)"
" requires+provides_677)"
"((s217_725)"
" s_720)"
"((bind-phase218_726)"
" bind-phase_721)"
"((binding219_727)"
" binding_715)"
"((in-stx220_728)"
" in-stx_671))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined55.1))"
"(check-not-defined53.1"
" temp215_723"
" #t"
" in-stx220_728"
" binding219_727"
" #t"
" requires+provides216_724"
" s217_725"
" bind-phase218_726)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:262:19_722"
" keyword-procedure-extract"
" '(#:check-not-required?"
" #:in"
" #:unless-matches)"
" 5)"
" '(#:check-not-required?"
" #:in"
" #:unless-matches)"
"(list"
" temp215_723"
" in-stx220_728"
" binding219_727)"
" requires+provides216_724"
" s217_725"
" bind-phase218_726)))"
"(let-values(((...r/expand/require.rkt:267:19_729)"
" remove-required-id!43.1)"
"((requires+provides221_730)"
" requires+provides_677)"
"((s222_731)"
" s_720)"
"((bind-phase223_732)"
" bind-phase_721)"
"((binding224_733)"
" binding_715))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!43.1))"
"(remove-required-id!41.1"
" binding224_733"
" requires+provides221_730"
" s222_731"
" bind-phase223_732)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:267:19_729"
" keyword-procedure-extract"
" '(#:unless-matches)"
" 5)"
" '(#:unless-matches)"
"(list"
" binding224_733)"
" requires+provides221_730"
" s222_731"
" bind-phase223_732))))))"
"(let-values(((...r/expand/require.rkt:268:17_734)"
" add-defined-or-required-id!13.1)"
"((requires+provides209_735)"
" requires+provides_677)"
"((s210_736)"
" s_720)"
"((bind-phase211_737)"
" bind-phase_721)"
"((binding212_738)"
" binding_715)"
"((can-be-shadowed?213_739)"
" can-be-shadowed?_680)"
"((as-transformer?214_740)"
" as-transformer?_716))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!13.1))"
"(add-defined-or-required-id!11.1"
" as-transformer?214_740"
" can-be-shadowed?213_739"
" #t"
" requires+provides209_735"
" s210_736"
" bind-phase211_737"
" binding212_738)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:268:17_734"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
" 6)"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
"(list"
" as-transformer?214_740"
" can-be-shadowed?213_739)"
" requires+provides209_735"
" s210_736"
" bind-phase211_737"
" binding212_738)))))))"
"(void))"
" adjusted-sym_719)))))"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" bind-all-provides!64.1))"
"(bind-all-provides!62.1"
" temp195_712"
" temp196_713"
" orig-s193_710"
" temp194_711"
" m188_705"
" bind-in-stx189_706"
" phase-shift190_707"
" m-ns191_708"
" interned-mpi192_709)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:221:2_704"
" keyword-procedure-extract"
" '(#:can-bulk? #:filter #:in #:only)"
" 7)"
" '(#:can-bulk? #:filter #:in #:only)"
"(list"
" temp195_712"
" temp196_713"
" orig-s193_710"
" temp194_711)"
" m188_705"
" bind-in-stx189_706"
" phase-shift190_707"
" m-ns191_708"
" interned-mpi192_709)))"
"(values))))"
"(let-values(((need-syms_687)"
"(if(adjust-only? adjust_676)"
"(let-values()(adjust-only-syms adjust_676))"
"(if(adjust-all-except? adjust_676)"
"(let-values()"
"(adjust-all-except-syms adjust_676))"
"(if(adjust-rename? adjust_676)"
"(let-values()"
"(set(adjust-rename-from-sym adjust_676)))"
"(let-values() #f))))))"
"(if(if need-syms_687"
"(not"
"(=(set-count need-syms_687)(hash-count done-syms_684)))"
" #f)"
"(let-values()"
"(let-values(((ht_741) need-syms_687))"
"(begin"
"(if((lambda(ht_742)"
"(if(hash? ht_742)(immutable? ht_742) #f))"
" ht_741)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_741)))"
"((letrec-values(((for-loop_743)"
"(lambda(fold-var_744 i_745)"
"(if i_745"
"(let-values(((sym_746)"
"(unsafe-immutable-hash-iterate-key"
" ht_741"
" i_745)))"
"(if #t"
"(let-values(((fold-var_747)"
"(let-values(((fold-var_748)"
" fold-var_744))"
"(let-values(((fold-var_749)"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_684"
" sym_746"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"not in nested spec\""
" orig-s_669"
" sym_746))))"
"(void)))))"
"(values"
" fold-var_749)))))"
"(if #t"
"(for-loop_743"
" fold-var_747"
"(unsafe-immutable-hash-iterate-next"
" ht_741"
" i_745))"
" fold-var_747))"
" fold-var_744))"
" fold-var_744))))"
" for-loop_743)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_741)))))"
"(void))))))))))))))))))))))))))))))"
"(define-values"
"(unpack47.1)"
"(lambda(given-kws_750 given-args_751 mpi41_752 orig-s42_753 self43_754 in-stx44_755 m-ns45_756)"
"(let-values(((adjust35_757)(if(pair? given-kws_750)(eq? '#:adjust(car given-kws_750)) #f)))"
"(let-values(((adjust26_758)(if adjust35_757(car given-args_751)(void)))"
"((given-kws_759)(if adjust35_757(cdr given-kws_750) given-kws_750))"
"((given-args_760)(if adjust35_757(cdr given-args_751) given-args_751)))"
"(let-values(((can-be-shadowed?39_761)"
"(if(pair? given-kws_759)(eq? '#:can-be-shadowed?(car given-kws_759)) #f)))"
"(let-values(((can-be-shadowed?30_762)(if can-be-shadowed?39_761(car given-args_760)(void)))"
"((given-kws_763)(if can-be-shadowed?39_761(cdr given-kws_759) given-kws_759))"
"((given-args_764)(if can-be-shadowed?39_761(cdr given-args_760) given-args_760)))"
"(let-values(((initial-require?40_765)"
"(if(pair? given-kws_763)(eq? '#:initial-require?(car given-kws_763)) #f)))"
"(let-values(((initial-require?31_766)(if initial-require?40_765(car given-args_764)(void)))"
"((given-kws_767)(if initial-require?40_765(cdr given-kws_763) given-kws_763))"
"((given-args_768)(if initial-require?40_765(cdr given-args_764) given-args_764)))"
"(let-values(((just-meta34_769)(if(pair? given-kws_767)(eq? '#:just-meta(car given-kws_767)) #f)))"
"(let-values(((just-meta25_770)(if just-meta34_769(car given-args_768)(void)))"
"((given-kws_771)(if just-meta34_769(cdr given-kws_767) given-kws_767))"
"((given-args_772)(if just-meta34_769(cdr given-args_768) given-args_768)))"
"(let-values(((phase-shift23_773)(car given-args_772))"
"((given-kws_774)(cdr given-kws_771))"
"((given-args_775)(cdr given-args_772)))"
"(let-values(((requires+provides36_776)"
"(if(pair? given-kws_774)(eq? '#:requires+provides(car given-kws_774)) #f)))"
"(let-values(((requires+provides27_777)"
"(if requires+provides36_776(car given-args_775)(void)))"
"((given-kws_778)(if requires+provides36_776(cdr given-kws_774) given-kws_774))"
"((given-args_779)"
"(if requires+provides36_776(cdr given-args_775) given-args_775)))"
"(let-values(((run-phase24_780)(car given-args_779))"
"((given-kws_781)(cdr given-kws_778))"
"((given-args_782)(cdr given-args_779)))"
"(let-values(((run?38_783)(if(pair? given-kws_781)(eq? '#:run?(car given-kws_781)) #f)))"
"(let-values(((run?29_784)(if run?38_783(car given-args_782)(void)))"
"((given-kws_785)(if run?38_783(cdr given-kws_781) given-kws_781))"
"((given-args_786)(if run?38_783(cdr given-args_782) given-args_782)))"
"(let-values(((visit?37_787)(pair? given-kws_785)))"
"(let-values(((visit?28_788)(if visit?37_787(car given-args_786)(void))))"
"(perform-require!46.1"
" adjust26_758"
" adjust35_757"
" can-be-shadowed?30_762"
" can-be-shadowed?39_761"
" initial-require?31_766"
" initial-require?40_765"
" just-meta25_770"
" just-meta34_769"
" phase-shift23_773"
" requires+provides27_777"
" requires+provides36_776"
" run-phase24_780"
" run?29_784"
" run?38_783"
" visit?28_788"
" visit?37_787"
" mpi41_752"
" orig-s42_753"
" self43_754"
" in-stx44_755"
" m-ns45_756)))))))))))))))))))"
"(define-values"
"(perform-require!48.1)"
"(lifted/1.1$14"
"(lambda(given-kws_789 given-argc_790)"
"(if(= given-argc_790 7)"
"(subsets?"
" '(#:phase-shift #:run-phase)"
" given-kws_789"
" '(#:adjust"
" #:can-be-shadowed?"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?))"
" #f))"
"(case-lambda"
"((given-kws_791 given-args_792 mpi_793 orig-s_794 self_795 in-stx_796 m-ns_797)"
"(unpack47.1 given-kws_791 given-args_792 mpi_793 orig-s_794 self_795 in-stx_796 m-ns_797)))"
" '(#:phase-shift #:run-phase)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)))"
"(define-values"
"(lifted/2.1$5)"
"(make-required"
" 'bind-all-provides!"
"(case-lambda"
"((self_798 m_799 in-stx_800 phase-shift_801 ns_802 mpi_803)"
"(apply missing-kw self_798 m_799 in-stx_800 phase-shift_801 ns_802 mpi_803 null)))"
" #f"
" #f))"
"(define-values"
"(bind-all-provides!62.1)"
"(lambda(can-bulk?51_804 filter52_805 in49_806 only50_807 m57_808 in-stx58_809 phase-shift59_810 ns60_811 mpi61_812)"
"(let-values(((m_813) m57_808))"
"(let-values(((in-stx_814) in-stx58_809))"
"(let-values(((phase-shift_815) phase-shift59_810))"
"(let-values(((ns_816) ns60_811))"
"(let-values(((mpi_817) mpi61_812))"
"(let-values(((orig-s_818) in49_806))"
"(let-values(((only-syms_819) only50_807))"
"(let-values(((can-bulk?_820) can-bulk?51_804))"
"(let-values(((filter_821) filter52_805))"
"(let-values()"
"(let-values(((self_822)(module-self m_813)))"
"(let-values(((ht_823)(module-provides m_813)))"
"(begin"
"(if((lambda(ht_824)(hash? ht_824)) ht_823)"
"(void)"
"(let-values()(default-in-hash ht_823)))"
"((letrec-values(((for-loop_825)"
"(lambda(fold-var_826 i_827)"
"(if i_827"
"(let-values(((provide-phase-level_828 provides_829)"
"(hash-iterate-key+value ht_823 i_827)))"
"(if #t"
"(let-values(((fold-var_830)"
"(let-values(((fold-var_831) fold-var_826))"
"(let-values(((fold-var_832)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_833)"
"(phase+"
" phase-shift_815"
" provide-phase-level_828)))"
"(begin"
"(if filter_821"
"(let-values()"
"(let-values(((lst_834)"
"(let-values(((or-part_835)"
" only-syms_819))"
"(if or-part_835"
" or-part_835"
"(hash-keys"
" provides_829)))))"
"(begin"
"(if(list?"
" lst_834)"
"(void)"
"(let-values()"
"(in-list"
" lst_834)))"
"((letrec-values(((for-loop_836)"
"(lambda(fold-var_837"
" lst_838)"
"(if(pair?"
" lst_838)"
"(let-values(((sym_839)"
"(unsafe-car"
" lst_838)))"
"(if #t"
"(let-values(((fold-var_840)"
"(let-values(((fold-var_841)"
" fold-var_837))"
"(let-values(((fold-var_842)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_843)"
"(hash-ref"
" provides_829"
" sym_839"
" #f)))"
"(if binding/p_843"
"(let-values()"
"(let-values(((b_844)"
"(let-values(((...r/expand/require.rkt:302:20_845)"
" provide-binding-to-require-binding13.1)"
"((binding/p225_846)"
" binding/p_843)"
"((sym226_847)"
" sym_839)"
"((self227_848)"
" self_822)"
"((mpi228_849)"
" mpi_817)"
"((provide-phase-level229_850)"
" provide-phase-level_828)"
"((phase-shift230_851)"
" phase-shift_815))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" mpi228_849"
" phase-shift230_851"
" provide-phase-level229_850"
" self227_848"
" binding/p225_846"
" sym226_847)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:302:20_845"
" keyword-procedure-extract"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
" 4)"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
"(list"
" mpi228_849"
" phase-shift230_851"
" provide-phase-level229_850"
" self227_848)"
" binding/p225_846"
" sym226_847)))))"
"(let-values(((sym_852)"
"(filter_821"
" b_844"
"(provided-as-transformer?"
" binding/p_843))))"
"(if(if sym_852"
"(not"
" can-bulk?_820)"
" #f)"
"(let-values()"
"(let-values(((temp231_853)"
"(datum->syntax$1"
" in-stx_814"
" sym_852))"
"((b232_854)"
" b_844)"
"((phase233_855)"
" phase_833))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" #f"
" #f"
" temp231_853"
" b232_854"
" phase233_855)"
"(add-binding!17.1"
" temp231_853"
" b232_854"
" phase233_855))))"
"(void)))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_842)))))"
"(if #t"
"(for-loop_836"
" fold-var_840"
"(unsafe-cdr"
" lst_838))"
" fold-var_840))"
" fold-var_837))"
" fold-var_837))))"
" for-loop_836)"
"(void)"
" lst_834))))"
"(void))"
"(if can-bulk?_820"
"(let-values()"
"(let-values(((...r/expand/require.rkt:314:6_856)"
" add-bulk-binding!25.1)"
"((in-stx234_857)"
" in-stx_814)"
"((temp235_858)"
"(bulk-binding14.1"
" provides_829"
" self_822"
" mpi_817"
" provide-phase-level_828"
" phase-shift_815"
"(namespace-bulk-binding-registry"
" ns_816)))"
"((phase236_859)"
" phase_833)"
"((orig-s237_860)"
" orig-s_818))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-bulk-binding!25.1))"
"(add-bulk-binding!23.1"
" orig-s237_860"
" #t"
" in-stx234_857"
" temp235_858"
" phase236_859)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:314:6_856"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s237_860)"
" in-stx234_857"
" temp235_858"
" phase236_859))))"
"(void)))))"
"(void)))))"
"(values fold-var_832)))))"
"(if #t"
"(for-loop_825 fold-var_830(hash-iterate-next ht_823 i_827))"
" fold-var_830))"
" fold-var_826))"
" fold-var_826))))"
" for-loop_825)"
"(void)"
"(hash-iterate-first ht_823)))))))))))))))))"
"(define-values"
"(unpack63.1)"
"(lambda(given-kws_861 given-args_862 m57_863 in-stx58_864 phase-shift59_865 ns60_866 mpi61_867)"
"(let-values(((can-bulk?51_868)(car given-args_862))"
"((given-kws_869)(cdr given-kws_861))"
"((given-args_870)(cdr given-args_862)))"
"(let-values(((filter52_871)(car given-args_870))"
"((given-kws_872)(cdr given-kws_869))"
"((given-args_873)(cdr given-args_870)))"
"(let-values(((in49_874)(car given-args_873))"
"((given-kws_875)(cdr given-kws_872))"
"((given-args_876)(cdr given-args_873)))"
"(let-values(((only50_877)(car given-args_876)))"
"(bind-all-provides!62.1"
" can-bulk?51_868"
" filter52_871"
" in49_874"
" only50_877"
" m57_863"
" in-stx58_864"
" phase-shift59_865"
" ns60_866"
" mpi61_867)))))))"
"(define-values"
"(bind-all-provides!64.1)"
"(lifted/2.1$5"
"(lambda(given-kws_878 given-argc_879)"
"(if(= given-argc_879 7)"
"(let-values(((l2_880) given-kws_878))"
"(if(pair? l2_880)"
"(if(eq?(car l2_880) '#:can-bulk?)"
"(let-values(((l2_881)(cdr l2_880)))"
"(if(pair? l2_881)"
"(if(eq?(car l2_881) '#:filter)"
"(let-values(((l2_882)(cdr l2_881)))"
"(if(pair? l2_882)"
"(if(eq?(car l2_882) '#:in)"
"(let-values(((l2_883)(cdr l2_882)))"
"(if(pair? l2_883)(if(eq?(car l2_883) '#:only)(null?(cdr l2_883)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_884 given-args_885 m_886 in-stx_887 phase-shift_888 ns_889 mpi_890)"
"(unpack63.1 given-kws_884 given-args_885 m_886 in-stx_887 phase-shift_888 ns_889 mpi_890)))"
" '(#:can-bulk? #:filter #:in #:only)"
" '(#:can-bulk? #:filter #:in #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_891)"
"(let-values(((rebuild-req_892)"
"(lambda(req_894 new-req_895)(datum->syntax$1 req_894 new-req_895 req_894 req_894))))"
"(letrec-values(((loop_893)"
"(lambda(shifted?_896)"
"(lambda(req_897)"
"(let-values(((fm_898)"
"(if(pair?(syntax-e$1 req_897))"
"(if(identifier?(car(syntax-e$1 req_897)))"
"(syntax-e$1(car(syntax-e$1 req_897)))"
" #f)"
" #f)))"
"(let-values(((tmp_899) fm_898))"
"(if(equal? tmp_899 'for-meta)"
"(let-values()"
"(let-values(((ok?_900 for-meta238_901 phase-level239_902 spec240_903)"
"(let-values(((s_917) req_897))"
"(if(if #t #t #f)"
"(let-values(((orig-s_918) s_917))"
"(let-values(((for-meta238_919 phase-level239_920 spec240_921)"
"(let-values(((s_922)"
"(if(syntax?$1 s_917)"
"(syntax-e$1 s_917)"
" s_917)))"
"(if(pair? s_922)"
"(let-values(((for-meta241_923)"
"(let-values(((s_926)"
"(car s_922)))"
" s_926))"
"((phase-level242_924 spec243_925)"
"(let-values(((s_927)"
"(cdr s_922)))"
"(let-values(((s_928)"
"(if(syntax?$1"
" s_927)"
"(syntax-e$1"
" s_927)"
" s_927)))"
"(if(pair? s_928)"
"(let-values(((phase-level244_929)"
"(let-values(((s_931)"
"(car"
" s_928)))"
" s_931))"
"((spec245_930)"
"(let-values(((s_932)"
"(cdr"
" s_928)))"
"(let-values(((s_933)"
"(if(syntax?$1"
" s_932)"
"(syntax-e$1"
" s_932)"
" s_932)))"
"(let-values(((flat-s_934)"
"(to-syntax-list.1"
" s_933)))"
"(if(not"
" flat-s_934)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_918))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_918))"
"(let-values()"
" flat-s_934))))))))"
"(values"
" phase-level244_929"
" spec245_930))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_918))))))"
"(values"
" for-meta241_923"
" phase-level242_924"
" spec243_925))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_918)))))"
"(values #t for-meta238_919 phase-level239_920 spec240_921)))"
"(values #f #f #f #f)))))"
"(let-values(((p_916)(syntax-e$1 phase-level239_902)))"
"(begin"
"(if(phase? p_916)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_897)))"
"(rebuild-req_892"
" req_897"
"(list* for-meta238_901(phase+ p_916 1)(map2(loop_893 #t) spec240_903)))))))"
"(if(equal? tmp_899 'for-syntax)"
"(let-values()"
"(let-values(((ok?_935 for-syntax246_936 spec247_937)"
"(let-values(((s_948) req_897))"
"(if(if #t #t #f)"
"(let-values(((orig-s_949) s_948))"
"(let-values(((for-syntax246_950 spec247_951)"
"(let-values(((s_952)"
"(if(syntax?$1 s_948)"
"(syntax-e$1 s_948)"
" s_948)))"
"(if(pair? s_952)"
"(let-values(((for-syntax248_953)"
"(let-values(((s_955)"
"(car s_952)))"
" s_955))"
"((spec249_954)"
"(let-values(((s_956)"
"(cdr s_952)))"
"(let-values(((s_957)"
"(if(syntax?$1"
" s_956)"
"(syntax-e$1"
" s_956)"
" s_956)))"
"(let-values(((flat-s_958)"
"(to-syntax-list.1"
" s_957)))"
"(if(not flat-s_958)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_949))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_949))"
"(let-values()"
" flat-s_958))))))))"
"(values for-syntax248_953 spec249_954))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_949)))))"
"(values #t for-syntax246_950 spec247_951)))"
"(values #f #f #f)))))"
"(rebuild-req_892 req_897(list* 'for-meta 2(map2(loop_893 #t) spec247_937)))))"
"(if(equal? tmp_899 'for-template)"
"(let-values()"
"(let-values(((ok?_959 for-template250_960 spec251_961)"
"(let-values(((s_972) req_897))"
"(if(if #t #t #f)"
"(let-values(((orig-s_973) s_972))"
"(let-values(((for-template250_974 spec251_975)"
"(let-values(((s_976)"
"(if(syntax?$1 s_972)"
"(syntax-e$1 s_972)"
" s_972)))"
"(if(pair? s_976)"
"(let-values(((for-template252_977)"
"(let-values(((s_979)"
"(car s_976)))"
" s_979))"
"((spec253_978)"
"(let-values(((s_980)"
"(cdr s_976)))"
"(let-values(((s_981)"
"(if(syntax?$1"
" s_980)"
"(syntax-e$1"
" s_980)"
" s_980)))"
"(let-values(((flat-s_982)"
"(to-syntax-list.1"
" s_981)))"
"(if(not flat-s_982)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_973))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_973))"
"(let-values()"
" flat-s_982))))))))"
"(values for-template252_977 spec253_978))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_973)))))"
"(values #t for-template250_974 spec251_975)))"
"(values #f #f #f)))))"
"(rebuild-req_892"
" req_897"
"(list* 'for-meta 0(map2(loop_893 #t) spec251_961)))))"
"(if(equal? tmp_899 'for-label)"
"(let-values()"
"(let-values(((ok?_983 for-label254_984 spec255_985)"
"(let-values(((s_996) req_897))"
"(if(if #t #t #f)"
"(let-values(((orig-s_997) s_996))"
"(let-values(((for-label254_998 spec255_999)"
"(let-values(((s_1000)"
"(if(syntax?$1 s_996)"
"(syntax-e$1 s_996)"
" s_996)))"
"(if(pair? s_1000)"
"(let-values(((for-label256_1001)"
"(let-values(((s_1003)"
"(car"
" s_1000)))"
" s_1003))"
"((spec257_1002)"
"(let-values(((s_1004)"
"(cdr"
" s_1000)))"
"(let-values(((s_1005)"
"(if(syntax?$1"
" s_1004)"
"(syntax-e$1"
" s_1004)"
" s_1004)))"
"(let-values(((flat-s_1006)"
"(to-syntax-list.1"
" s_1005)))"
"(if(not flat-s_1006)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_997))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_997))"
"(let-values()"
" flat-s_1006))))))))"
"(values"
" for-label256_1001"
" spec257_1002))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_997)))))"
"(values #t for-label254_998 spec255_999)))"
"(values #f #f #f)))))"
"(rebuild-req_892"
" req_897"
"(list* for-label254_984(map2(loop_893 #t) spec255_985)))))"
"(if(equal? tmp_899 'just-meta)"
"(let-values()"
"(let-values(((ok?_1007 just-meta258_1008 phase-level259_1009 spec260_1010)"
"(let-values(((s_1023) req_897))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1024) s_1023))"
"(let-values(((just-meta258_1025"
" phase-level259_1026"
" spec260_1027)"
"(let-values(((s_1028)"
"(if(syntax?$1 s_1023)"
"(syntax-e$1 s_1023)"
" s_1023)))"
"(if(pair? s_1028)"
"(let-values(((just-meta261_1029)"
"(let-values(((s_1032)"
"(car"
" s_1028)))"
" s_1032))"
"((phase-level262_1030"
" spec263_1031)"
"(let-values(((s_1033)"
"(cdr"
" s_1028)))"
"(let-values(((s_1034)"
"(if(syntax?$1"
" s_1033)"
"(syntax-e$1"
" s_1033)"
" s_1033)))"
"(if(pair? s_1034)"
"(let-values(((phase-level264_1035)"
"(let-values(((s_1037)"
"(car"
" s_1034)))"
" s_1037))"
"((spec265_1036)"
"(let-values(((s_1038)"
"(cdr"
" s_1034)))"
"(let-values(((s_1039)"
"(if(syntax?$1"
" s_1038)"
"(syntax-e$1"
" s_1038)"
" s_1038)))"
"(let-values(((flat-s_1040)"
"(to-syntax-list.1"
" s_1039)))"
"(if(not"
" flat-s_1040)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_1024))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1024))"
"(let-values()"
" flat-s_1040))))))))"
"(values"
" phase-level264_1035"
" spec265_1036))"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1024))))))"
"(values"
" just-meta261_1029"
" phase-level262_1030"
" spec263_1031))"
"(raise-syntax-error$1"
" #f"
"                                                                                  \"bad syntax\""
" orig-s_1024)))))"
"(values"
" #t"
" just-meta258_1025"
" phase-level259_1026"
" spec260_1027)))"
"(values #f #f #f #f)))))"
"(rebuild-req_892"
" req_897"
"(list*"
" just-meta258_1008"
" phase-level259_1009"
"(map2(loop_893 #f) spec260_1010)))))"
"(let-values()"
"(if shifted?_896"
" req_897"
"(datum->syntax$1 #f(list 'for-syntax req_897)))))))))))))))"
"((loop_893 #f) req_891)))))"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" top-level-bind!-id"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans-val_7)"
"(let-values(((phase_8)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_9)"
"(let-values(((...p-level-instance.rkt:25:15_10) make-module-binding22.1)"
"((mpi4_11) mpi_2)"
"((phase5_12) phase_8)"
"((sym6_13) sym_6)"
"((temp7_14)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" temp7_14"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi4_11"
" phase5_12"
" sym6_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:25:15_10"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list temp7_14)"
" mpi4_11"
" phase5_12"
" sym6_13)))))"
"(begin"
"(let-values(((id1_15) id_1)((b2_16) b_9)((phase3_17) phase_8))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f id1_15 b2_16 phase3_17)"
"(add-binding!17.1 id1_15 b2_16 phase3_17)))"
"(if trans-val_7(let-values()(maybe-install-free=id! trans-val_7 id_1 phase_8))(void))))))"
" top-level-require!-id"
"(lambda(stx_18 ns_19)"
"(let-values(((reqs_20)(cdr(syntax->list$1 stx_18))))"
"(let-values(((...p-level-instance.rkt:35:5_21) parse-and-perform-requires!22.1)"
"((temp8_22) #t)"
"((temp9_23) #f)"
"((reqs10_24) reqs_20)"
"((temp11_25) #f)"
"((ns12_26) ns_19)"
"((temp13_27)(namespace-phase ns_19))"
"((temp14_28)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" temp8_22"
" #t"
" #f"
" #f"
" temp9_23"
" #t"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:35:5_21"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 7)"
" '(#:run? #:visit?)"
"(list temp8_22 temp9_23)"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)))))))"
"(define-values"
"(lifted/1.1$13)"
"(make-required"
" 'check-require-access"
"(case-lambda"
"((self_2 linklet_3 import-module-uses_4 import-module-instances_5 insp_6 extra-inspector_7 extra-inspectorsss_8)"
"(apply"
" missing-kw"
" self_2"
" linklet_3"
" import-module-uses_4"
" import-module-instances_5"
" insp_6"
" extra-inspector_7"
" extra-inspectorsss_8"
" null)))"
" #f"
" #f))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_9"
" linklet3_10"
" import-module-uses4_11"
" import-module-instances5_12"
" insp6_13"
" extra-inspector7_14"
" extra-inspectorsss8_15)"
"(let-values(((linklet_16) linklet3_10))"
"(let-values(((skip-num-imports_17) skip-imports1_9))"
"(let-values(((import-module-uses_18) import-module-uses4_11))"
"(let-values(((import-module-instances_19) import-module-instances5_12))"
"(let-values(((insp_20) insp6_13))"
"(let-values(((extra-inspector_21) extra-inspector7_14))"
"(let-values(((extra-inspectorsss_22) extra-inspectorsss8_15))"
"(let-values()"
"(let-values(((lst_23)(list-tail(1/linklet-import-variables linklet_16) skip-num-imports_17))"
"((lst_24) import-module-uses_18)"
"((lst_25) import-module-instances_19)"
"((lst_26)"
"(let-values(((or-part_27) extra-inspectorsss_22))"
"(if or-part_27 or-part_27 import-module-uses_18))))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"(if(list? lst_25)(void)(let-values()(in-list lst_25)))"
"(if(list? lst_26)(void)(let-values()(in-list lst_26)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29 lst_30 lst_31 lst_32 lst_33)"
"(if(if(pair? lst_30)"
"(if(pair? lst_31)(if(pair? lst_32)(pair? lst_33) #f) #f)"
" #f)"
"(let-values(((import-syms_34)(unsafe-car lst_30))"
"((mu_35)(unsafe-car lst_31))"
"((mi_36)(unsafe-car lst_32))"
"((extra-inspectorss_37)(unsafe-car lst_33)))"
"(if(if #t(if #t(if #t #t #f) #f) #f)"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_29))"
"(let-values(((fold-var_40)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_41)"
"(module-instance-module"
" mi_36)))"
"(if(module-no-protected? m_41)"
"(void)"
"(let-values()"
"(let-values(((access_42)"
"(let-values(((or-part_43)"
"(module-access"
" m_41)))"
"(if or-part_43"
" or-part_43"
"(module-compute-access!"
" m_41)))))"
"(let-values(((lst_44)"
" import-syms_34)"
"((lst_45)"
"(let-values(((or-part_46)"
"(if extra-inspectorsss_22"
" extra-inspectorss_37"
" #f)))"
"(if or-part_46"
" or-part_46"
" import-syms_34))))"
"(begin"
"(if(list? lst_44)"
"(void)"
"(let-values()"
"(in-list lst_44)))"
"(if(list? lst_45)"
"(void)"
"(let-values()"
"(in-list lst_45)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49"
" lst_50)"
"(if(if(pair?"
" lst_49)"
"(pair?"
" lst_50)"
" #f)"
"(let-values(((import-sym_51)"
"(unsafe-car"
" lst_49))"
"((extra-inspectors_52)"
"(unsafe-car"
" lst_50)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54)"
" fold-var_48))"
"(let-values(((fold-var_55)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_56)"
"(hash-ref"
"(hash-ref"
" access_42"
"(module-use-phase"
" mu_35)"
" '#hasheq())"
" import-sym_51"
" 'unexported)))"
"(if(let-values(((or-part_57)"
"(eq?"
" a_56"
" 'unexported)))"
"(if or-part_57"
" or-part_57"
"(eq?"
" a_56"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_58)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_36))))"
"(if(let-values(((or-part_59)"
"(inspector-superior?"
" insp_20"
" guard-insp_58)))"
"(if or-part_59"
" or-part_59"
"(let-values(((or-part_60)"
"(if extra-inspector_21"
"(inspector-superior?"
" extra-inspector_21"
" guard-insp_58)"
" #f)))"
"(if or-part_60"
" or-part_60"
"(if extra-inspectorsss_22"
"(if extra-inspectorss_37"
"(let-values(((ht_61)"
" extra-inspectors_52))"
"(begin"
"(if((lambda(ht_62)"
"(if(hash?"
" ht_62)"
"(immutable?"
" ht_62)"
" #f))"
" ht_61)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_61)))"
"((letrec-values(((for-loop_63)"
"(lambda(result_64"
" i_65)"
"(if i_65"
"(let-values(((extra-insp_66)"
"(unsafe-immutable-hash-iterate-key"
" ht_61"
" i_65)))"
"(if #t"
"(let-values(((result_67)"
"(let-values(((result_68)"
" result_64))"
"(let-values(((result_69)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_66"
" guard-insp_58)))))"
"(values"
" result_69)))))"
"(if(if #t"
"(not"
"((lambda x_70"
"(not"
" result_67))"
" extra-insp_66))"
" #f)"
"(for-loop_63"
" result_67"
"(unsafe-immutable-hash-iterate-next"
" ht_61"
" i_65))"
" result_67))"
" result_64))"
" result_64))))"
" for-loop_63)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_61))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                              \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                              \"  variable: ~s\\n\""
"                                                                                                                                                                              \"  from module: ~a\")"
" a_56"
" import-sym_51"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_36))))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_55)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_47"
" fold-var_53"
"(unsafe-cdr"
" lst_49)"
"(unsafe-cdr"
" lst_50))"
" fold-var_53))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_44"
" lst_45))))))))"
"(void)))))"
"(values fold-var_40)))))"
"(if(if #t(if #t(if #t #t #f) #f) #f)"
"(for-loop_28"
" fold-var_38"
"(unsafe-cdr lst_30)"
"(unsafe-cdr lst_31)"
"(unsafe-cdr lst_32)"
"(unsafe-cdr lst_33))"
" fold-var_38))"
" fold-var_29))"
" fold-var_29))))"
" for-loop_28)"
"(void)"
" lst_23"
" lst_24"
" lst_25"
" lst_26)))))))))))))"
"(define-values"
"(unpack10.1)"
"(lambda(given-kws_71"
" given-args_72"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78)"
"(let-values(((skip-imports1_79)(car given-args_72)))"
"(check-require-access9.1"
" skip-imports1_79"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78))))"
"(define-values"
"(check-require-access11.1)"
"(lifted/1.1$13"
"(lambda(given-kws_80 given-argc_81)"
"(if(= given-argc_81 8)"
"(let-values(((l2_82) given-kws_80))"
"(if(pair? l2_82)(if(eq?(car l2_82) '#:skip-imports)(null?(cdr l2_82)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)"
"(unpack10.1"
" given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)))"
" '(#:skip-imports)"
" '(#:skip-imports)))"
"(define-values"
"(eval-single-top)"
"(lambda(c_2 ns_3)"
"(let-values(((...xpander/eval/top.rkt:23:2_4) eval-one-top26.1)((c27_5) c_2)((ns28_6) ns_3)((temp29_7) #t))"
"(if(variable-reference-constant?(#%variable-reference eval-one-top26.1))"
"(eval-one-top24.1 #f #f temp29_7 #t c27_5 ns28_6)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:23:2_4"
" keyword-procedure-extract"
" '(#:single-expression?)"
" 4)"
" '(#:single-expression?)"
"(list temp29_7)"
" c27_5"
" ns28_6)))))"
"(define-values"
"(eval-top7.1)"
"(lambda(as-tail?1_8 as-tail?2_9 c5_10 ns6_11 eval-compiled3_12 eval-compiled4_13)"
"(let-values(((c_14) c5_10))"
"(let-values(((ns_15) ns6_11))"
"(let-values(((eval-compiled_16)(if eval-compiled4_13 eval-compiled3_12 eval-top9.1)))"
"(let-values(((as-tail?_17)(if as-tail?2_9 as-tail?1_8 #t)))"
"(let-values()"
"(let-values(((ld_18)(if(compiled-in-memory? c_14)(compiled-in-memory-linklet-directory c_14) c_14)))"
"(if(hash-ref(1/linklet-directory->hash ld_18) #f #f)"
"(let-values(((...xpander/eval/top.rkt:30:6_19) eval-one-top26.1)"
"((c30_20) c_14)"
"((ns31_21) ns_15)"
"((as-tail?32_22) as-tail?_17))"
"(if(variable-reference-constant?(#%variable-reference eval-one-top26.1))"
"(eval-one-top24.1 as-tail?32_22 #t #f #f c30_20 ns31_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:30:6_19"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list as-tail?32_22)"
" c30_20"
" ns31_21)))"
"(let-values(((...xpander/eval/top.rkt:31:6_23) eval-multiple-tops17.1)"
"((c33_24) c_14)"
"((ns34_25) ns_15)"
"((eval-compiled35_26) eval-compiled_16)"
"((as-tail?36_27) as-tail?_17))"
"(if(variable-reference-constant?(#%variable-reference eval-multiple-tops17.1))"
"(eval-multiple-tops15.1 as-tail?36_27 c33_24 ns34_25 eval-compiled35_26)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:31:6_23"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 5)"
" '(#:as-tail?)"
"(list as-tail?36_27)"
" c33_24"
" ns34_25"
" eval-compiled35_26))))))))))))"
"(define-values"
"(unpack8.1)"
"(lambda(given-kws_28 given-args_29 c5_30 ns6_31 eval-compiled3_32 eval-compiled4_33)"
"(let-values(((as-tail?2_34)(pair? given-kws_28)))"
"(let-values(((as-tail?1_35)(if as-tail?2_34(car given-args_29)(void))))"
"(eval-top7.1 as-tail?1_35 as-tail?2_34 c5_30 ns6_31 eval-compiled3_32 eval-compiled4_33)))))"
"(define-values"
"(eval-top9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_36 given-argc_37)"
"(if(if(>= given-argc_37 4)(<= given-argc_37 5) #f)"
"(let-values(((l1_38) given-kws_36))"
"(let-values(((l1_39)(if(null? l1_38) l1_38(if(eq?(car l1_38) '#:as-tail?)(cdr l1_38) l1_38))))"
"(null? l1_39)))"
" #f))"
"(case-lambda"
"((given-kws_40 given-args_41 c_42 ns_43)(unpack8.1 given-kws_40 given-args_41 c_42 ns_43 #f #f))"
"((given-kws_44 given-args_45 c_46 ns_47 eval-compiled3_48)"
"(unpack8.1 given-kws_44 given-args_45 c_46 ns_47 eval-compiled3_48 #t)))"
" null"
" '(#:as-tail?)"
"(let-values(((eval-top_49)"
"(case-lambda"
"((c_50 ns_51)(unpack8.1 null null c_50 ns_51 #f #f))"
"((c_52 ns_53 eval-compiled3_54)(unpack8.1 null null c_52 ns_53 eval-compiled3_54 #t)))))"
" eval-top_49)))"
"(define-values"
"(lifted/1.1$12)"
"(make-required"
" 'eval-multiple-tops"
"(case-lambda((self_55 c_56 ns_57 eval-compiled_58)(apply missing-kw self_55 c_56 ns_57 eval-compiled_58 null)))"
" #f"
" #f))"
"(define-values"
"(eval-multiple-tops15.1)"
"(lambda(as-tail?10_59 c12_60 ns13_61 eval-compiled14_62)"
"(let-values(((c_63) c12_60))"
"(let-values(((ns_64) ns13_61))"
"(let-values(((eval-compiled_65) eval-compiled14_62))"
"(let-values(((as-tail?_66) as-tail?10_59))"
"(let-values()"
"(if(compiled-in-memory? c_63)"
"(let-values()"
"((letrec-values(((loop_67)"
"(lambda(cims_68)"
"(if(null? cims_68)"
"(let-values() void)"
"(if(null?(cdr cims_68))"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:41:8_69) eval-compiled_65)"
"((temp37_70)(car cims_68))"
"((ns38_71) ns_64)"
"((as-tail?39_72) as-tail?_66))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:41:8_69"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list as-tail?39_72)"
" temp37_70"
" ns38_71)))"
"(let-values()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:43:8_73) eval-compiled_65)"
"((temp40_74)(car cims_68))"
"((ns41_75) ns_64)"
"((temp42_76) #f))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:43:8_73"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list temp42_76)"
" temp40_74"
" ns41_75))"
"(loop_67(cdr cims_68)))))))))"
" loop_67)"
"(compiled-in-memory-pre-compiled-in-memorys c_63)))"
"(let-values()"
"((letrec-values(((loop_77)"
"(lambda(lds_78)"
"(if(null? lds_78)"
"(let-values()(void))"
"(if(null?(cdr lds_78))"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:51:8_79) eval-compiled_65)"
"((temp43_80)(car lds_78))"
"((ns44_81) ns_64)"
"((as-tail?45_82) as-tail?_66))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:51:8_79"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list as-tail?45_82)"
" temp43_80"
" ns44_81)))"
"(let-values()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:53:8_83) eval-compiled_65)"
"((temp46_84)(car lds_78))"
"((ns47_85) ns_64)"
"((temp48_86) #f))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:53:8_83"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list temp48_86)"
" temp46_84"
" ns47_85))"
"(loop_77(cdr lds_78)))))))))"
" loop_77)"
"(compiled-top->compiled-tops c_63)))))))))))"
"(define-values"
"(unpack16.1$2)"
"(lambda(given-kws_87 given-args_88 c12_89 ns13_90 eval-compiled14_91)"
"(let-values(((as-tail?10_92)(car given-args_88)))"
"(eval-multiple-tops15.1 as-tail?10_92 c12_89 ns13_90 eval-compiled14_91))))"
"(define-values"
"(eval-multiple-tops17.1)"
"(lifted/1.1$12"
"(lambda(given-kws_93 given-argc_94)"
"(if(= given-argc_94 5)"
"(let-values(((l2_95) given-kws_93))"
"(if(pair? l2_95)(if(eq?(car l2_95) '#:as-tail?)(null?(cdr l2_95)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_96 given-args_97 c_98 ns_99 eval-compiled_100)"
"(unpack16.1$2 given-kws_96 given-args_97 c_98 ns_99 eval-compiled_100)))"
" '(#:as-tail?)"
" '(#:as-tail?)))"
"(define-values"
"(eval-one-top24.1)"
"(lambda(as-tail?19_101 as-tail?21_102 single-expression?18_103 single-expression?20_104 c22_105 ns23_106)"
"(let-values(((c_107) c22_105))"
"(let-values(((ns_108) ns23_106))"
"(let-values(((single-expression?_109)(if single-expression?20_104 single-expression?18_103 #f)))"
"(let-values(((as-tail?_110)(if as-tail?21_102 as-tail?19_101 #t)))"
"(let-values()"
"(let-values(((ld_111)"
"(if(compiled-in-memory? c_107)(compiled-in-memory-linklet-directory c_107) c_107)))"
"(let-values(((h_112)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_111) #f))))"
"(let-values(((link-instance_113)"
"(if(compiled-in-memory? c_107)"
"(link-instance-from-compiled-in-memory c_107)"
"(1/instantiate-linklet"
"(hash-ref h_112 'link)"
"(list"
" deserialize-instance"
"(let-values(((...xpander/eval/top.rkt:68:35_121) make-eager-instance-instance13.1)"
"((ns49_122) ns_108)"
"((temp50_123)(namespace-phase ns_108))"
"((temp51_124)(namespace-mpi ns_108))"
"((temp52_125)(namespace-bulk-binding-registry ns_108))"
"((temp53_126)(current-code-inspector)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-eager-instance-instance13.1))"
"(make-eager-instance-instance11.1"
" temp52_125"
" temp50_123"
" temp53_126"
" ns49_122"
" temp51_124)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:68:35_121"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" 2)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
"(list temp52_125 temp50_123 temp53_126 ns49_122 temp51_124)))))))))"
"(let-values(((orig-phase_114)(hash-ref h_112 'original-phase)))"
"(let-values(((max-phase_115)(hash-ref h_112 'max-phase)))"
"(let-values(((phase-shift_116)(phase-(namespace-phase ns_108) orig-phase_114)))"
"(let-values(((extra-inspector_117)"
"(if(compiled-in-memory? c_107)"
"(compiled-in-memory-compile-time-inspector c_107)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_118)"
"(if(compiled-in-memory? c_107)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_107)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_119)"
"(if(compiled-in-memory? c_107)"
"(compiled-in-memory-phase-to-link-module-uses c_107)"
"(1/instance-variable-value link-instance_113 'phase-to-link-modules))))"
"(let-values(((thunk_120)"
"(let-values(((start_127) max-phase_115)"
"((end_128)(sub1 orig-phase_114))"
"((inc_129) -1))"
"(begin"
"(if(if(real? start_127)(if(real? end_128)(real? inc_129) #f) #f)"
"(void)"
"(let-values()(in-range start_127 end_128 inc_129)))"
"((letrec-values(((for-loop_130)"
"(lambda(prev-thunk_131 pos_132)"
"(if(> pos_132 end_128)"
"(let-values(((phase_133) pos_132))"
"(if #t"
"(let-values(((prev-thunk_134)"
"(let-values(((prev-thunk_135)"
" prev-thunk_131))"
"(let-values(((prev-thunk_136)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_135"
" #f)"
"(values))))"
"(let-values(((module-uses_137)"
"(hash-ref"
" phase-to-link-modules_119"
" phase_133"
" null)))"
"(let-values(((import-module-instances_138"
" import-instances_139)"
"(let-values(((mis_143"
" is_144)"
"(let-values(((lst_145)"
" module-uses_137))"
"(begin"
"(if(list?"
" lst_145)"
"(void)"
"(let-values()"
"(in-list"
" lst_145)))"
"((letrec-values(((for-loop_146)"
"(lambda(mis_147"
" is_148"
" lst_149)"
"(if(pair?"
" lst_149)"
"(let-values(((mu_150)"
"(unsafe-car"
" lst_149)))"
"(if #t"
"(let-values(((mis_151"
" is_152)"
"(let-values(((mis_153)"
" mis_147)"
"((is_154)"
" is_148))"
"(let-values(((mis_155"
" is_156)"
"(let-values()"
"(let-values(((mis54_157"
" is55_158)"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:99:19_159)"
" namespace-module-use->module+linklet-instances145.1)"
"((ns56_160)"
" ns_108)"
"((mu57_161)"
" mu_150)"
"((temp58_162)"
"(phase-"
"(phase+"
" phase_133"
" phase-shift_116)"
"(module-use-phase"
" mu_150))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances145.1))"
"(namespace-module-use->module+linklet-instances143.1"
" temp58_162"
" #f"
" #f"
" #f"
" #f"
" ns56_160"
" mu57_161)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:99:19_159"
" keyword-procedure-extract"
" '(#:phase-shift)"
" 4)"
" '(#:phase-shift)"
"(list"
" temp58_162)"
" ns56_160"
" mu57_161))))))"
"(values"
"(cons"
" mis54_157"
" mis_153)"
"(cons"
" is55_158"
" is_154))))))"
"(values"
" mis_155"
" is_156)))))"
"(if #t"
"(for-loop_146"
" mis_151"
" is_152"
"(unsafe-cdr"
" lst_149))"
"(values"
" mis_151"
" is_152)))"
"(values"
" mis_147"
" is_148)))"
"(values"
" mis_147"
" is_148)))))"
" for-loop_146)"
" null"
" null"
" lst_145)))))"
"(values"
"(alt-reverse"
" mis_143)"
"(alt-reverse"
" is_144)))))"
"(let-values(((phase-ns_140)"
"(namespace->namespace-at-phase"
" ns_108"
"(phase+"
" phase_133"
" phase-shift_116))))"
"(let-values(((inst_141)"
"(if single-expression?_109"
" link-instance_113"
"(let-values(((...xpander/eval/top.rkt:109:23_163)"
" make-instance-instance13.1)"
"((phase-ns59_164)"
" phase-ns_140)"
"((phase-shift60_165)"
" phase-shift_116)"
"((temp61_166)"
"(namespace-mpi"
" ns_108))"
"((temp62_167)"
"(namespace-inspector"
" ns_108))"
"((temp63_168)"
"(lambda(name_169"
" val_170)"
"(namespace-set-transformer!"
" ns_108"
"(phase+"
"(sub1"
" phase_133)"
" phase-shift_116)"
" name_169"
" val_170))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-instance-instance13.1))"
"(make-instance-instance11.1"
" temp62_167"
" phase-ns59_164"
" phase-shift60_165"
" temp61_166"
" temp63_168)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:109:23_163"
" keyword-procedure-extract"
" '(#:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
" 2)"
" '(#:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
"(list"
" temp62_167"
" phase-ns59_164"
" phase-shift60_165"
" temp61_166"
" temp63_168)))))))"
"(let-values(((linklet_142)"
"(hash-ref"
" h_112"
" phase_133"
" #f)))"
"(if linklet_142"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:124:8_172)"
" check-require-access11.1)"
"((linklet64_173)"
" linklet_142)"
"((temp65_174)"
" 3)"
"((module-uses66_175)"
" module-uses_137)"
"((import-module-instances67_176)"
" import-module-instances_138)"
"((temp68_177)"
"(current-code-inspector))"
"((extra-inspector69_178)"
" extra-inspector_117)"
"((temp70_179)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_118"
" phase_133"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp65_174"
" linklet64_173"
" module-uses66_175"
" import-module-instances67_176"
" temp68_177"
" extra-inspector69_178"
" temp70_179)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:124:8_172"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp65_174)"
" linklet64_173"
" module-uses66_175"
" import-module-instances67_176"
" temp68_177"
" extra-inspector69_178"
" temp70_179)))"
"(values))))"
"(let-values(((instantiate_171)"
"(lambda(tail?_180)"
"(1/instantiate-linklet"
" linklet_142"
"(list*"
" top-level-instance"
" link-instance_113"
" inst_141"
" import-instances_139)"
"(namespace->instance"
" ns_108"
"(phase+"
" phase_133"
" phase-shift_116))"
"(not"
" tail?_180)))))"
"(if(eqv?"
" phase_133"
" orig-phase_114)"
"(let-values()"
"(if(zero-phase?"
" phase_133)"
" instantiate_171"
"(lambda(tail?_181)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_140)"
"(let-values()"
"(instantiate_171"
" tail?_181))))))"
"(let-values()"
" instantiate_171)))))"
"(let-values()"
" void)))))))))))"
"(values"
" prev-thunk_136)))))"
"(if #t"
"(for-loop_130"
" prev-thunk_134"
"(+ pos_132 inc_129))"
" prev-thunk_134))"
" prev-thunk_131))"
" prev-thunk_131))))"
" for-loop_130)"
" void"
" start_127)))))"
"(thunk_120 as-tail?_110))))))))))))))))))"
"(define-values"
"(unpack25.1$1)"
"(lambda(given-kws_182 given-args_183 c22_184 ns23_185)"
"(let-values(((as-tail?21_186)(if(pair? given-kws_182)(eq? '#:as-tail?(car given-kws_182)) #f)))"
"(let-values(((as-tail?19_187)(if as-tail?21_186(car given-args_183)(void)))"
"((given-kws_188)(if as-tail?21_186(cdr given-kws_182) given-kws_182))"
"((given-args_189)(if as-tail?21_186(cdr given-args_183) given-args_183)))"
"(let-values(((single-expression?20_190)(pair? given-kws_188)))"
"(let-values(((single-expression?18_191)(if single-expression?20_190(car given-args_189)(void))))"
"(eval-one-top24.1"
" as-tail?19_187"
" as-tail?21_186"
" single-expression?18_191"
" single-expression?20_190"
" c22_184"
" ns23_185)))))))"
"(define-values"
"(eval-one-top26.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_192 given-argc_193)"
"(if(= given-argc_193 4)"
"(let-values(((l1_194) given-kws_192))"
"(let-values(((l1_195)(if(null? l1_194) l1_194(if(eq?(car l1_194) '#:as-tail?)(cdr l1_194) l1_194))))"
"(let-values(((l1_196) l1_195))"
"(let-values(((l1_197)"
"(if(null? l1_196)"
" l1_196"
"(if(eq?(car l1_196) '#:single-expression?)(cdr l1_196) l1_196))))"
"(null? l1_197)))))"
" #f))"
"(case-lambda((given-kws_198 given-args_199 c_200 ns_201)(unpack25.1$1 given-kws_198 given-args_199 c_200 ns_201)))"
" null"
" '(#:as-tail? #:single-expression?)"
"(let-values(((eval-one-top_202)(case-lambda((c_203 ns_204)(unpack25.1$1 null null c_203 ns_204)))))"
" eval-one-top_202)))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_205)"
"(1/make-instance"
" 'link"
" #f"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_205)"
" syntax-literalss-id"
"(compiled-in-memory-syntax-literalss cim_205))))"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(add-binding-in-scopes!"
"(syntax-scope-set runtime-stx 0)"
" sym_1"
"(let-values(((runtime-mpi1_2) runtime-mpi)((temp2_3) 0)((sym3_4) sym_1))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1 #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f runtime-mpi1_2 temp2_3 sym3_4)"
"(make-module-binding22.1 runtime-mpi1_2 temp2_3 sym3_4))))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(define-values"
"(lifted/1.1$11)"
"(make-required"
" 'select-defined-syms-and-bind!"
"(case-lambda"
"((self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7)"
"(apply missing-kw self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7 null)))"
" #f"
" #f))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_8"
" as-transformer?10_9"
" frame-id1_10"
" in4_11"
" in9_12"
" requires+provides3_13"
" requires+provides8_14"
" top-level-bind-scope2_15"
" top-level-bind-scope7_16"
" ids11_17"
" defined-syms12_18"
" self13_19"
" phase14_20"
" all-scopes-stx15_21)"
"(let-values(((ids_22) ids11_17))"
"(let-values(((defined-syms_23) defined-syms12_18))"
"(let-values(((self_24) self13_19))"
"(let-values(((phase_25) phase14_20))"
"(let-values(((all-scopes-stx_26) all-scopes-stx15_21))"
"(let-values(((frame-id_27) frame-id1_10))"
"(let-values(((top-level-bind-scope_28)(if top-level-bind-scope7_16 top-level-bind-scope2_15 #f)))"
"(let-values(((requires+provides_29)(if requires+provides8_14 requires+provides3_13 #f)))"
"(let-values(((orig-s_30)(if in9_12 in4_11 #f)))"
"(let-values(((as-transformer?_31)(if as-transformer?10_9 as-transformer?5_8 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_32)"
"(let-values(((or-part_33)(hash-ref defined-syms_23 phase_25 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((ht_34)(make-hasheq)))"
"(begin(hash-set! defined-syms_23 phase_25 ht_34) ht_34))))))"
"(alt-reverse"
"(let-values(((lst_35) ids_22))"
"(begin"
"(if(list? lst_35)(void)(let-values()(in-list lst_35)))"
"((letrec-values(((for-loop_36)"
"(lambda(fold-var_37 lst_38)"
"(if(pair? lst_38)"
"(let-values(((id_39)(unsafe-car lst_38)))"
"(if #t"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_37))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_43)"
"(syntax-e$1"
" id_39)))"
"(let-values(((defined-sym_44)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_32"
" sym_43"
" #f)"
" id_39"
" phase_25"
" top-level-bind-scope_28))"
"(no-extra-scopes?"
" id_39"
" all-scopes-stx_26"
" top-level-bind-scope_28"
" phase_25)"
" #f)"
" sym_43"
"((letrec-values(((loop_46)"
"(lambda(pos_47)"
"(let-values(((s_48)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                    \"~a.~a\""
" sym_43"
" pos_47))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_32"
" s_48"
" #f)"
" id_39"
" phase_25"
" top-level-bind-scope_28)"
"(loop_46"
"(add1"
" pos_47))"
" s_48)))))"
" loop_46)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_32"
" defined-sym_44"
" id_39)"
"(values))))"
"(let-values(((b_45)"
"(let-values(((...er/expand/def-id.rkt:61:14_49)"
" make-module-binding22.1)"
"((self23_50)"
" self_24)"
"((phase24_51)"
" phase_25)"
"((defined-sym25_52)"
" defined-sym_44)"
"((frame-id26_53)"
" frame-id_27)"
"((sym27_54)"
" sym_43))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" frame-id26_53"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sym27_54"
" #t"
" #f"
" #f"
" self23_50"
" phase24_51"
" defined-sym25_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:61:14_49"
" keyword-procedure-extract"
" '(#:frame-id"
" #:nominal-sym)"
" 5)"
" '(#:frame-id"
" #:nominal-sym)"
"(list"
" frame-id26_53"
" sym27_54)"
" self23_50"
" phase24_51"
" defined-sym25_52)))))"
"(begin"
"(if requires+provides_29"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:64:6_55)"
" remove-required-id!43.1)"
"((requires+provides28_56)"
" requires+provides_29)"
"((id29_57)"
" id_39)"
"((phase30_58)"
" phase_25)"
"((b31_59)"
" b_45))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!43.1))"
"(remove-required-id!41.1"
" b31_59"
" requires+provides28_56"
" id29_57"
" phase30_58)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:64:6_55"
" keyword-procedure-extract"
" '(#:unless-matches)"
" 5)"
" '(#:unless-matches)"
"(list"
" b31_59)"
" requires+provides28_56"
" id29_57"
" phase30_58))))"
"(void))"
"(let-values(((...er/expand/def-id.rkt:65:4_60)"
" add-binding!17.1)"
"((id19_61)"
" id_39)"
"((b20_62)"
" b_45)"
"((phase21_63)"
" phase_25)"
"((orig-s22_64)"
" orig-s_30))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" orig-s22_64"
" #t"
" id19_61"
" b20_62"
" phase21_63)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:65:4_60"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s22_64)"
" id19_61"
" b20_62"
" phase21_63)))"
"(if requires+provides_29"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:67:6_65)"
" add-defined-or-required-id!13.1)"
"((requires+provides32_66)"
" requires+provides_29)"
"((id33_67)"
" id_39)"
"((phase34_68)"
" phase_25)"
"((b35_69)"
" b_45)"
"((as-transformer?36_70)"
" as-transformer?_31))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!13.1))"
"(add-defined-or-required-id!11.1"
" as-transformer?36_70"
" #f"
" #f"
" requires+provides32_66"
" id33_67"
" phase34_68"
" b35_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:67:6_65"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 6)"
" '(#:as-transformer?)"
"(list"
" as-transformer?36_70)"
" requires+provides32_66"
" id33_67"
" phase34_68"
" b35_69))))"
"(void))"
" defined-sym_44))))))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(if #t"
"(for-loop_36 fold-var_40(unsafe-cdr lst_38))"
" fold-var_40))"
" fold-var_37))"
" fold-var_37))))"
" for-loop_36)"
" null"
" lst_35))))))))))))))))))"
"(define-values"
"(unpack17.1)"
"(lambda(given-kws_71 given-args_72 ids11_73 defined-syms12_74 self13_75 phase14_76 all-scopes-stx15_77)"
"(let-values(((as-transformer?10_78)(if(pair? given-kws_71)(eq? '#:as-transformer?(car given-kws_71)) #f)))"
"(let-values(((as-transformer?5_79)(if as-transformer?10_78(car given-args_72)(void)))"
"((given-kws_80)(if as-transformer?10_78(cdr given-kws_71) given-kws_71))"
"((given-args_81)(if as-transformer?10_78(cdr given-args_72) given-args_72)))"
"(let-values(((frame-id1_82)(car given-args_81))"
"((given-kws_83)(cdr given-kws_80))"
"((given-args_84)(cdr given-args_81)))"
"(let-values(((in9_85)(if(pair? given-kws_83)(eq? '#:in(car given-kws_83)) #f)))"
"(let-values(((in4_86)(if in9_85(car given-args_84)(void)))"
"((given-kws_87)(if in9_85(cdr given-kws_83) given-kws_83))"
"((given-args_88)(if in9_85(cdr given-args_84) given-args_84)))"
"(let-values(((requires+provides8_89)"
"(if(pair? given-kws_87)(eq? '#:requires+provides(car given-kws_87)) #f)))"
"(let-values(((requires+provides3_90)(if requires+provides8_89(car given-args_88)(void)))"
"((given-kws_91)(if requires+provides8_89(cdr given-kws_87) given-kws_87))"
"((given-args_92)(if requires+provides8_89(cdr given-args_88) given-args_88)))"
"(let-values(((top-level-bind-scope7_93)(pair? given-kws_91)))"
"(let-values(((top-level-bind-scope2_94)(if top-level-bind-scope7_93(car given-args_92)(void))))"
"(select-defined-syms-and-bind!16.1"
" as-transformer?5_79"
" as-transformer?10_78"
" frame-id1_82"
" in4_86"
" in9_85"
" requires+provides3_90"
" requires+provides8_89"
" top-level-bind-scope2_94"
" top-level-bind-scope7_93"
" ids11_73"
" defined-syms12_74"
" self13_75"
" phase14_76"
" all-scopes-stx15_77))))))))))))"
"(define-values"
"(select-defined-syms-and-bind!18.1)"
"(lifted/1.1$11"
"(lambda(given-kws_95 given-argc_96)"
"(if(= given-argc_96 7)"
"(subsets?"
" '(#:frame-id)"
" given-kws_95"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope))"
" #f))"
"(case-lambda"
"((given-kws_97 given-args_98 ids_99 defined-syms_100 self_101 phase_102 all-scopes-stx_103)"
"(unpack17.1 given-kws_97 given-args_98 ids_99 defined-syms_100 self_101 phase_102 all-scopes-stx_103)))"
" '(#:frame-id)"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope)))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_104 all-scopes-stx_105 top-level-bind-scope_106 phase_107)"
"(let-values(((m-id_108)(datum->syntax$1 all-scopes-stx_105(syntax-e$1 id_104))))"
"(let-values(((or-part_109)(bound-identifier=?$1 id_104 m-id_108 phase_107)))"
"(if or-part_109"
" or-part_109"
"(if top-level-bind-scope_106"
"(bound-identifier=?$1 id_104(add-scope m-id_108 top-level-bind-scope_106) phase_107)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_110 id_111 phase_112 top-level-bind-scope_113)"
"(if prev-id_110"
"(if(not(bound-identifier=?$1 prev-id_110 id_111 phase_112))"
"(let-values(((or-part_114)(not top-level-bind-scope_113)))"
"(if or-part_114"
" or-part_114"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_110 top-level-bind-scope_113)"
"(remove-scope id_111 top-level-bind-scope_113)"
" phase_112))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_115 ctx_116)"
"(let-values(((...er/expand/def-id.rkt:87:2_117) select-defined-syms-and-bind!18.1)"
"((tl-ids37_118) tl-ids_115)"
"((temp38_119)(root-expand-context-defined-syms ctx_116))"
"((temp39_120)(namespace-mpi(expand-context-namespace ctx_116)))"
"((temp40_121)(expand-context-phase ctx_116))"
"((temp41_122)(root-expand-context-all-scopes-stx ctx_116))"
"((temp42_123)(root-expand-context-frame-id ctx_116))"
"((temp43_124)(root-expand-context-top-level-bind-scope ctx_116)))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp42_123"
" #f"
" #f"
" #f"
" #f"
" temp43_124"
" #t"
" tl-ids37_118"
" temp38_119"
" temp39_120"
" temp40_121"
" temp41_122)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:87:2_117"
" keyword-procedure-extract"
" '(#:frame-id #:top-level-bind-scope)"
" 7)"
" '(#:frame-id #:top-level-bind-scope)"
"(list temp42_123 temp43_124)"
" tl-ids37_118"
" temp38_119"
" temp39_120"
" temp40_121"
" temp41_122)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_125 phase_126 sym_127 id_128)"
"(let-values(((defined-syms-at-phase_129)"
"(let-values(((or-part_130)(hash-ref defined-syms_125 phase_126 #f)))"
"(if or-part_130"
" or-part_130"
"(let-values(((ht_131)(make-hasheq)))"
"(begin(hash-set! defined-syms_125 phase_126 ht_131) ht_131))))))"
"(hash-set! defined-syms-at-phase_129 sym_127 id_128))))"
"(define-values(box-cons!)(lambda(b_2 v_3)(set-box! b_2(cons v_3(unbox b_2)))))"
"(define-values(box-clear!)(lambda(b_4)(begin0(alt-reverse(unbox b_4))(set-box! b_4 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context))))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 0 'convert)"
"(make-struct-field-accessor -ref_8 1 'lifts)"
"(make-struct-field-accessor -ref_8 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-rhs)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(make-struct-type 'lifted-bind #f 2 0 #f null(current-inspector) #f '(0 1) #f 'lifted-bind))))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'ids)"
"(make-struct-field-accessor -ref_39 1 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_62 module*-ok?4_63 convert5_64)"
"(let-values(((convert_65) convert5_64))"
"(let-values(((module*-ok?_66)(if module*-ok?4_63 module*-ok?3_62 #f)))"
"(let-values()(lift-context1.1 convert_65(box null) module*-ok?_66))))))"
"(define-values"
"(unpack7.1$1)"
"(lambda(given-kws_67 given-args_68 convert5_69)"
"(let-values(((module*-ok?4_70)(pair? given-kws_67)))"
"(let-values(((module*-ok?3_71)(if module*-ok?4_70(car given-args_68)(void))))"
"(make-lift-context6.1 module*-ok?3_71 module*-ok?4_70 convert5_69)))))"
"(define-values"
"(make-lift-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_72 given-argc_73)"
"(if(= given-argc_73 3)"
"(let-values(((l1_74) given-kws_72))"
"(let-values(((l1_75)(if(null? l1_74) l1_74(if(eq?(car l1_74) '#:module*-ok?)(cdr l1_74) l1_74))))"
"(null? l1_75)))"
" #f))"
"(case-lambda((given-kws_76 given-args_77 convert_78)(unpack7.1$1 given-kws_76 given-args_77 convert_78)))"
" null"
" '(#:module*-ok?)"
"(let-values(((make-lift-context_79)(case-lambda((convert_80)(unpack7.1$1 null null convert_80)))))"
" make-lift-context_79)))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_81 ids_82 rhs_83 phase_84)"
"(let-values(((lifted-ids_85 lifted_86)((lift-context-convert lifts_81) ids_82 rhs_83 phase_84)))"
"(begin(box-cons!(lift-context-lifts lifts_81) lifted_86) lifted-ids_85))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_87)(box-clear!(lift-context-lifts lifts_87))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_88 counter_89)"
"(lambda(ids_90 rhs_91 phase_92)"
"(begin"
"(let-values(((lst_93) ids_90))"
"(begin"
"(if(list? lst_93)(void)(let-values()(in-list lst_93)))"
"((letrec-values(((for-loop_94)"
"(lambda(fold-var_95 lst_96)"
"(if(pair? lst_96)"
"(let-values(((id_97)(unsafe-car lst_96)))"
"(if #t"
"(let-values(((fold-var_98)"
"(let-values(((fold-var_99) fold-var_95))"
"(let-values(((fold-var_100)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((key_101)"
"(let-values(((id33_102) id_97)"
"((phase34_103)"
" phase_92)"
"((counter35_104)"
" counter_89))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" #f"
" #f"
" id33_102"
" phase34_103"
" counter35_104)"
"(add-local-binding!35.1"
" id33_102"
" phase34_103"
" counter35_104)))))"
"(set-box!"
" lift-env_88"
"(hash-set"
"(unbox lift-env_88)"
" key_101"
" variable))))"
"(void)))))"
"(values fold-var_100)))))"
"(if #t(for-loop_94 fold-var_98(unsafe-cdr lst_96)) fold-var_98))"
" fold-var_95))"
" fold-var_95))))"
" for-loop_94)"
"(void)"
" lst_93)))"
"(values ids_90(lifted-bind2.1 ids_90 rhs_91))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_105)"
"(lambda(ids_106 rhs_107 phase_108)"
"(let-values(((post-scope_109)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_105)))))"
"(let-values(((tl-ids_110)"
"(alt-reverse"
"(let-values(((lst_111) ids_106))"
"(begin"
"(if(list? lst_111)(void)(let-values()(in-list lst_111)))"
"((letrec-values(((for-loop_112)"
"(lambda(fold-var_113 lst_114)"
"(if(pair? lst_114)"
"(let-values(((id_115)(unsafe-car lst_114)))"
"(if #t"
"(let-values(((fold-var_116)"
"(let-values(((fold-var_117) fold-var_113))"
"(let-values(((fold-var_118)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_115"
" post-scope_109))"
" fold-var_117))))"
"(values fold-var_118)))))"
"(if #t"
"(for-loop_112 fold-var_116(unsafe-cdr lst_114))"
" fold-var_116))"
" fold-var_113))"
" fold-var_113))))"
" for-loop_112)"
" null"
" lst_111))))))"
"(begin"
"(select-defined-syms-and-bind!/ctx tl-ids_110 ctx_105)"
"(values tl-ids_110(lifted-bind2.1 tl-ids_110 rhs_107))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_119 body_120 s_121 phase_122)"
"(datum->syntax$1"
" #f"
"(let-values(((lst_123)(alt-reverse lifts_119)))"
"(begin"
"(if(list? lst_123)(void)(let-values()(in-list lst_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(body_125 lst_126)"
"(if(pair? lst_126)"
"(let-values(((lift_127)(unsafe-car lst_126)))"
"(if #t"
"(let-values(((body_128)"
"(let-values(((body_129) body_125))"
"(let-values(((body_130)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_127)"
"(void)"
"(let-values()"
"                                                                         (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_122)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_127)"
"(lifted-bind-rhs lift_127)))"
" body_129)))))"
"(values body_130)))))"
"(if #t(for-loop_124 body_128(unsafe-cdr lst_126)) body_128))"
" body_125))"
" body_125))))"
" for-loop_124)"
" body_120"
" lst_123))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_131 adjust-form10_132 lifts11_133 body12_134 s13_135 phase14_136)"
"(let-values(((lifts_137) lifts11_133))"
"(let-values(((body_138) body12_134))"
"(let-values(((s_139) s13_135))"
"(let-values(((phase_140) phase14_136))"
"(let-values(((adjust-form_141)(if adjust-form10_132 adjust-form9_131 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_140) 'begin)"
"(append"
"(alt-reverse"
"(let-values(((lst_142) lifts_137))"
"(begin"
"(if(list? lst_142)(void)(let-values()(in-list lst_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(fold-var_144 lst_145)"
"(if(pair? lst_145)"
"(let-values(((lift_146)(unsafe-car lst_145)))"
"(if #t"
"(let-values(((fold-var_147)"
"(let-values(((fold-var_148) fold-var_144))"
"(let-values(((fold-var_149)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_141"
"(if(lifted-bind? lift_146)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_140)"
" 'define-values)"
"(lifted-bind-ids lift_146)"
"(lifted-bind-rhs"
" lift_146))))"
"(let-values() lift_146))))"
" fold-var_148))))"
"(values fold-var_149)))))"
"(if #t"
"(for-loop_143 fold-var_147(unsafe-cdr lst_145))"
" fold-var_147))"
" fold-var_144))"
" fold-var_144))))"
" for-loop_143)"
" null"
" lst_142))))"
"(list body_138))))))))))))"
"(define-values"
"(unpack16.1$1)"
"(lambda(given-kws_150 given-args_151 lifts11_152 body12_153 s13_154 phase14_155)"
"(let-values(((adjust-form10_156)(pair? given-kws_150)))"
"(let-values(((adjust-form9_157)(if adjust-form10_156(car given-args_151)(void))))"
"(wrap-lifts-as-begin15.1 adjust-form9_157 adjust-form10_156 lifts11_152 body12_153 s13_154 phase14_155)))))"
"(define-values"
"(wrap-lifts-as-begin17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_158 given-argc_159)"
"(if(= given-argc_159 6)"
"(let-values(((l1_160) given-kws_158))"
"(let-values(((l1_161)(if(null? l1_160) l1_160(if(eq?(car l1_160) '#:adjust-form)(cdr l1_160) l1_160))))"
"(null? l1_161)))"
" #f))"
"(case-lambda"
"((given-kws_162 given-args_163 lifts_164 body_165 s_166 phase_167)"
"(unpack16.1$1 given-kws_162 given-args_163 lifts_164 body_165 s_166 phase_167)))"
" null"
" '(#:adjust-form)"
"(let-values(((wrap-lifts-as-begin_168)"
"(case-lambda"
"((lifts_169 body_170 s_171 phase_172)(unpack16.1$1 null null lifts_169 body_170 s_171 phase_172)))))"
" wrap-lifts-as-begin_168)))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_173 make-_174 ?_175 -ref_176 -set!_177)"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context))))"
"(values"
" struct:_173"
" make-_174"
" ?_175"
"(make-struct-field-accessor -ref_176 0 'wrt-phase)"
"(make-struct-field-accessor -ref_176 1 'lifts)"
"(make-struct-field-accessor -ref_176 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_204 module*-ok?_205)(module-lift-context18.1 phase_204(box null) module*-ok?_205)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_206)(box-clear!(module-lift-context-lifts module-lifts_206))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_207 s_208 phase_209)"
"(begin"
"(if(let-values(((or-part_210)"
"(if(module-lift-context? module-lifts_207)"
"(module-lift-context-module*-ok? module-lifts_207)"
" #f)))"
"(if or-part_210"
" or-part_210"
"(if(lift-context? module-lifts_207)(lift-context-module*-ok? module-lifts_207) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_211)(core-form-sym s_208 phase_209)))"
"(if(equal? tmp_211 'module)"
"(let-values()(void))"
"(if(equal? tmp_211 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_208))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_208)))))))"
"(if(module-lift-context? module-lifts_207)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_207) s_208))"
"(if(lift-context? module-lifts_207)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_207) s_208))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_212 make-_213 ?_214 -ref_215 -set!_216)"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context))))"
"(values"
" struct:_212"
" make-_213"
" ?_214"
"(make-struct-field-accessor -ref_215 0 'do-require)"
"(make-struct-field-accessor -ref_215 1 'wrt-phase)"
"(make-struct-field-accessor -ref_215 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_243 do-require_244)(require-lift-context19.1 do-require_244 wrt-phase_243(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_245)(box-clear!(require-lift-context-requires require-lifts_245))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_246 s_247 phase_248)"
"(begin"
"((require-lift-context-do-require require-lifts_246) s_247 phase_248)"
"(box-cons!(require-lift-context-requires require-lifts_246) s_247))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_249 make-_250 ?_251 -ref_252 -set!_253)"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context))))"
"(values"
" struct:_249"
" make-_250"
" ?_251"
"(make-struct-field-accessor -ref_252 0 'wrt-phase)"
"(make-struct-field-accessor -ref_252 1 'provides)"
"(make-struct-field-accessor -ref_252 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_252 3 'ends))))"
"(define-values"
"(lifted/1.1$10)"
"(make-required"
" 'make-to-module-lift-context"
"(case-lambda((self_285 phase_286)(apply missing-kw self_285 phase_286 null)))"
" #f"
" #f))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_287 shared-module-ends21_288 phase25_289)"
"(let-values(((phase_290) phase25_289))"
"(let-values(((ends_291) shared-module-ends21_288))"
"(let-values(((end-as-expressions?_292) end-as-expressions?22_287))"
"(let-values()(to-module-lift-context20.1 phase_290(box null) end-as-expressions?_292 ends_291)))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_293 given-args_294 phase25_295)"
"(let-values(((end-as-expressions?22_296)(car given-args_294))"
"((given-kws_297)(cdr given-kws_293))"
"((given-args_298)(cdr given-args_294)))"
"(let-values(((shared-module-ends21_299)(car given-args_298)))"
"(make-to-module-lift-context26.1 end-as-expressions?22_296 shared-module-ends21_299 phase25_295)))))"
"(define-values"
"(make-to-module-lift-context28.1)"
"(lifted/1.1$10"
"(lambda(given-kws_300 given-argc_301)"
"(if(= given-argc_301 3)"
"(let-values(((l2_302) given-kws_300))"
"(if(pair? l2_302)"
"(if(eq?(car l2_302) '#:end-as-expressions?)"
"(let-values(((l2_303)(cdr l2_302)))"
"(if(pair? l2_303)(if(eq?(car l2_303) '#:shared-module-ends)(null?(cdr l2_303)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_304 given-args_305 phase_306)(unpack27.1 given-kws_304 given-args_305 phase_306)))"
" '(#:end-as-expressions? #:shared-module-ends)"
" '(#:end-as-expressions? #:shared-module-ends)))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_307)(box-clear!(to-module-lift-context-ends to-module-lifts_307))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_308)(box-clear!(to-module-lift-context-provides to-module-lifts_308))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_309 s_310 phase_311)"
"(box-cons!(to-module-lift-context-provides to-module-lifts_309) s_310)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_312 s_313 phase_314)(box-cons!(to-module-lift-context-ends to-module-lifts_312) s_313)))"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-all-scopes-stx)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'already-expanded"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'all-scopes-stx))))"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context))))"
"(values struct:_1 make-_2 ?_3)))"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values(((lst_3) v_1))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((result_8)"
"(let-values(((result_9) result_5))"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_10)))))"
"(if(if #t(not((lambda x_11(not result_8)) s_7)) #f)"
"(for-loop_4 result_8(unsafe-cdr lst_6))"
" result_8))"
" result_5))"
" result_5))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_12 ctx_13)"
"(if(expansion-contexts? t_12)"
"(not(memq(context->symbol(expand-context-context ctx_13))(expansion-contexts-ref t_12)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_14)(if(symbol? context_14) context_14 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_15 t_16 ctx_17)"
"(let-values(((wrap_18)"
"(lambda(sym_20)"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_20)(expand-context-phase ctx_17))"
" s_15)))))"
"(let-values(((fail_19)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_17)))"
" s_15))))"
"(let-values(((tmp_21)(context->symbol(expand-context-context ctx_17))))"
"(if(equal? tmp_21 'module-begin)"
"(let-values()(wrap_18 'begin))"
"(if(if(equal? tmp_21 'module) #t(if(equal? tmp_21 'top-level) #t(equal? tmp_21 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_16))(wrap_18 '#%expression)(fail_19)))"
"(let-values()(fail_19)))))))))"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_32 key_33)"
"(if(set-member?(reference-record-already-bound rr_32) key_33)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_32"
"(set-add(reference-record-reference-before-bound rr_32) key_33))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_34)"
"(let-values(((stop?_35 fold-var_36)"
"(let-values(((lst_37) rrs_34))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(stop-after?_39 fold-var_40 lst_41)"
"(if(pair? lst_41)"
"(let-values(((rr_42)(unsafe-car lst_41)))"
"(if #t"
"(let-values(((stop-after?_43 fold-var_44)"
"(let-values(((stop-after?_45) stop-after?_39)"
"((fold-var_46) fold-var_40))"
"(if #t"
"(let-values(((stop?_47)"
"(reference-record-all-referenced?"
" rr_42)))"
"(begin"
" #t"
"((letrec-values(((for-loop_48)"
"(lambda(stop-after?_49"
" fold-var_50)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((stop-after?_51"
" fold-var_52)"
"(let-values(((stop-after?_53)"
" stop-after?_49)"
"((fold-var_54)"
" fold-var_50))"
"(if #t"
"(let-values(((stop-after?_55)"
"(let-values(((or-part_56)"
" stop-after?_53))"
"(if or-part_56"
" or-part_56"
" stop?_47))))"
"(begin"
" #t"
"((letrec-values(((for-loop_57)"
"(lambda(stop-after?_58"
" fold-var_59)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((stop-after?_60"
" fold-var_61)"
"(let-values(((stop-after?_62)"
" stop-after?_58)"
"((fold-var_63)"
" fold-var_59))"
"(if stop?_47"
"(values"
" stop-after?_62"
" fold-var_63)"
"(let-values(((stop-after?_64)"
" stop-after?_62)"
"((fold-var_65)"
" fold-var_63))"
"(let-values(((stop-after?_66"
" fold-var_67)"
"(let-values()"
"(let-values(((fold-var_68)"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?!"
" rr_42"
" #t))"
"(void)))))"
"(values"
" stop-after?_64"
" fold-var_68)))))"
"(values"
" stop-after?_66"
" fold-var_67)))))))"
"(if #f"
"(for-loop_57"
" stop-after?_60"
" fold-var_61)"
"(values"
" stop-after?_60"
" fold-var_61)))"
"(values"
" stop-after?_58"
" fold-var_59)))"
"(values"
" stop-after?_58"
" fold-var_59)))))"
" for-loop_57)"
" stop-after?_55"
" fold-var_54)))"
"(values"
" stop-after?_53"
" fold-var_54)))))"
"(if #f"
"(for-loop_48"
" stop-after?_51"
" fold-var_52)"
"(values"
" stop-after?_51"
" fold-var_52)))"
"(values"
" stop-after?_49"
" fold-var_50)))"
"(values"
" stop-after?_49"
" fold-var_50)))))"
" for-loop_48)"
" stop-after?_45"
" fold-var_46)))"
"(values stop-after?_45 fold-var_46)))))"
"(if(if #t(not((lambda x_69 stop-after?_43) rr_42)) #f)"
"(for-loop_38 stop-after?_43 fold-var_44(unsafe-cdr lst_41))"
"(values stop-after?_43 fold-var_44)))"
"(values stop-after?_39 fold-var_40)))"
"(values stop-after?_39 fold-var_40)))))"
" for-loop_38)"
" #f"
"(void)"
" lst_37)))))"
"(values fold-var_36))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_70 keys_71)"
"(begin"
"(set-reference-record-already-bound!"
" rr_70"
"(let-values(((lst_72) keys_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(ab_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((key_76)(unsafe-car lst_75)))"
"(if #t"
"(let-values(((ab_77)"
"(let-values(((ab_78) ab_74))"
"(let-values(((ab_79)(let-values()(set-add ab_78 key_76))))"
"(values ab_79)))))"
"(if #t(for-loop_73 ab_77(unsafe-cdr lst_75)) ab_77))"
" ab_74))"
" ab_74))))"
" for-loop_73)"
"(reference-record-already-bound rr_70)"
" lst_72))))"
"(set-reference-record-reference-before-bound!"
" rr_70"
"(let-values(((lst_80) keys_71))"
"(begin"
"(if(list? lst_80)(void)(let-values()(in-list lst_80)))"
"((letrec-values(((for-loop_81)"
"(lambda(rbb_82 lst_83)"
"(if(pair? lst_83)"
"(let-values(((key_84)(unsafe-car lst_83)))"
"(if #t"
"(let-values(((rbb_85)"
"(let-values(((rbb_86) rbb_82))"
"(let-values(((rbb_87)(let-values()(set-remove rbb_86 key_84))))"
"(values rbb_87)))))"
"(if #t(for-loop_81 rbb_85(unsafe-cdr lst_83)) rbb_85))"
" rbb_82))"
" rbb_82))))"
" for-loop_81)"
"(reference-record-reference-before-bound rr_70)"
" lst_80)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_88)"
"(let-values(((or-part_89)(reference-record-all-referenced? rr_88)))"
"(if or-part_89 or-part_89(positive?(set-count(reference-record-reference-before-bound rr_88)))))))"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() #f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((exit-check . 127)"
"(prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(exit-local-expr . 140)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-list . 5)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(enter-macro . 8)"
"(opaque-expr . 146)"
"(tag . 142)"
"(prim-if . 105)"
"(enter-local . 130)"
"(prim-define-values . 104)"
"(prim-submodule* . 159)"
"(block->letrec . 14)"
"(lift-provide . 151)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(prim-provide . 122)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(start-expand . 141)"
"(enter-block . 10)"
"(prim-module-begin . 102)"
"(letrec-syntaxes-renames . 19)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(prim-quote-syntax . 118)"
"(prim-let-values . 112)"
"(exit-bind . 145)"
"(module-body . 23)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(block-renames . 24)"
"(prim-quote . 117)"
"(enter-check . 126)"
"(block->list . 12)"
"(macro-pre-x . 21)"
"(prim-letrec-values . 113)"
"(prim-begin-for-syntax . 156)"
"(prim-set! . 123)"
"(local-bind . 143)"
"(local-pre . 132)"
"(prim-#%top . 116)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(lift-statement . 134)"
"(prim-begin . 107)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(enter-prim . 6)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(track-origin . 152)"
"(lift-loop . 128)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(prim-with-continaution-mark . 106)"
"(next . 3)"
"(prim-#%datum . 115)"
"(case-lambda-renames . 18)"
"(enter-list . 4)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(next-group . 13)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(exit-prim . 7)"
"(module-lift-loop . 137)"
"(visit . 0)"
"(resolve . 1)))"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_24 alternate-id2_25 s3_26 ctx4_27)"
"(let-values(((s_28) s3_26))"
"(let-values(((ctx_29) ctx4_27))"
"(let-values(((alternate-id_30)(if alternate-id2_25 alternate-id1_24 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_31)(expand-context-observer ctx_29)))"
"(if obs_31"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_31"
"(if(expand-context-only-immediate? ctx_29) 'enter-check 'visit)"
" s_28))"
"(void)))"
"(void)))"
"(if(identifier? s_28)"
"(let-values()(expand-identifier s_28 ctx_29 alternate-id_30))"
"(if(if(pair?(syntax-e/no-taint s_28))(identifier?(car(syntax-e/no-taint s_28))) #f)"
"(let-values()(expand-id-application-form s_28 ctx_29 alternate-id_30))"
"(if(let-values(((or-part_32)(pair?(syntax-e$1(syntax-disarm$1 s_28)))))"
"(if or-part_32 or-part_32(null?(syntax-e$1(syntax-disarm$1 s_28)))))"
"(let-values()(expand-implicit '#%app s_28 ctx_29 #f))"
"(if(already-expanded?(syntax-e/no-taint s_28))"
"(let-values()(expand-already-expanded s_28 ctx_29))"
"(let-values()(expand-implicit '#%datum s_28 ctx_29 #f)))))))))))))"
"(define-values"
"(unpack6.1)"
"(lambda(given-kws_33 given-args_34 s3_35 ctx4_36)"
"(let-values(((alternate-id2_37)(pair? given-kws_33)))"
"(let-values(((alternate-id1_38)(if alternate-id2_37(car given-args_34)(void))))"
"(expand5.1 alternate-id1_38 alternate-id2_37 s3_35 ctx4_36)))))"
"(define-values"
"(expand7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_39 given-argc_40)"
"(if(= given-argc_40 4)"
"(let-values(((l1_41) given-kws_39))"
"(let-values(((l1_42)(if(null? l1_41) l1_41(if(eq?(car l1_41) '#:alternate-id)(cdr l1_41) l1_41))))"
"(null? l1_42)))"
" #f))"
"(case-lambda((given-kws_43 given-args_44 s_45 ctx_46)(unpack6.1 given-kws_43 given-args_44 s_45 ctx_46)))"
" null"
" '(#:alternate-id)"
"(let-values(((expand_47)(case-lambda((s_48 ctx_49)(unpack6.1 null null s_48 ctx_49))))) expand_47)))"
"(define-values"
"(expand-identifier)"
"(lambda(s_50 ctx_51 alternate-id_52)"
"(let-values(((id_53)(let-values(((or-part_54) alternate-id_52))(if or-part_54 or-part_54 s_50))))"
"(if(free-id-set-member?(expand-context-stops ctx_51)(expand-context-phase ctx_51) id_53)"
"(let-values()"
"(begin"
"(let-values(((obs_55)(expand-context-observer ctx_51)))"
"(if obs_55"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_51))"
"(let-values()"
"(begin"
"(call-expand-observe obs_55 'enter-prim s_50)"
"(call-expand-observe obs_55 'prim-stop)"
"(call-expand-observe obs_55 'exit-prim s_50)"
"(call-expand-observe obs_55 'return s_50)))"
"(void)))"
"(void)))"
" s_50))"
"(let-values()"
"(let-values(((binding_56)"
"(let-values(((...nder/expand/main.rkt:85:19_57) resolve+shift15.1)"
"((id103_58) id_53)"
"((temp104_59)(expand-context-phase ctx_51))"
"((temp105_60) 'ambiguous)"
"((temp106_61) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp105_60 #t #f #f #f #f temp106_61 #t #f #f id103_58 temp104_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:85:19_57"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp105_60 temp106_61)"
" id103_58"
" temp104_59)))))"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_51)))"
"(if obs_62"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_51))"
"(let-values()(call-expand-observe obs_62 'resolve id_53))"
"(void)))"
"(void)))"
"(if(eq? binding_56 'ambiguous)"
"(let-values()(raise-ambiguous-error id_53 ctx_51))"
"(if(not binding_56)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_50 alternate-id_52) ctx_51 s_50))"
"(let-values()"
"(let-values(((t_63 insp-of-t_64)"
"(let-values(((...nder/expand/main.rkt:97:34_65) lookup17.1)"
"((binding107_66) binding_56)"
"((ctx108_67) ctx_51)"
"((id109_68) id_53)"
"((temp110_69)(if alternate-id_52 s_50 #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp110_69 #t #f #f binding107_66 ctx108_67 id109_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:97:34_65"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp110_69)"
" binding107_66"
" ctx108_67"
" id109_68)))))"
"(dispatch t_63 insp-of-t_64 s_50 id_53 ctx_51 binding_56))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_70 ctx_71 alternate-id_72)"
"(let-values(((disarmed-s_73)(syntax-disarm$1 s_70 #f)))"
"(let-values(((id_74)"
"(let-values(((or-part_75) alternate-id_72))"
"(if or-part_75 or-part_75(car(syntax-e$1 disarmed-s_73))))))"
"(if(free-id-set-member?(expand-context-stops ctx_71)(expand-context-phase ctx_71) id_74)"
"(let-values()"
"(begin"
"(let-values(((obs_76)(expand-context-observer ctx_71)))"
"(if obs_76"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_71))"
"(let-values()"
"(begin"
"(call-expand-observe obs_76 'enter-prim s_70)"
"(call-expand-observe obs_76 'prim-stop)"
"(call-expand-observe obs_76 'exit-prim s_70)"
"(call-expand-observe obs_76 'return s_70)))"
"(void)))"
"(void)))"
" s_70))"
"(let-values()"
"(let-values(((binding_77)"
"(let-values(((...nder/expand/main.rkt:106:19_78) resolve+shift15.1)"
"((id111_79) id_74)"
"((temp112_80)(expand-context-phase ctx_71))"
"((temp113_81) 'ambiguous)"
"((temp114_82) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp113_81 #t #f #f #f #f temp114_82 #t #f #f id111_79 temp112_80)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:106:19_78"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp113_81 temp114_82)"
" id111_79"
" temp112_80)))))"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_71)))"
"(if obs_83"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_71))"
"(let-values()(call-expand-observe obs_83 'resolve id_74))"
"(void)))"
"(void)))"
"(if(eq? binding_77 'ambiguous)"
"(let-values()(raise-ambiguous-error id_74 ctx_71))"
"(if(not binding_77)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_70 alternate-id_72) ctx_71 id_74))"
"(let-values()"
"(let-values(((t_84 insp-of-t_85)"
"(let-values(((...nder/expand/main.rkt:118:34_86) lookup17.1)"
"((binding115_87) binding_77)"
"((ctx116_88) ctx_71)"
"((id117_89) id_74)"
"((temp118_90)"
"(if alternate-id_72(car(syntax-e$1 disarmed-s_73)) #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp118_90 #t #f #f binding115_87 ctx116_88 id117_89)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:118:34_86"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp118_90)"
" binding115_87"
" ctx116_88"
" id117_89)))))"
"(if(variable? t_84)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_70 alternate-id_72) ctx_71 id_74))"
"(let-values()(dispatch t_84 insp-of-t_85 s_70 id_74 ctx_71 binding_77)))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_91 s_92 ctx_93 trigger-id_94)"
"(let-values(((disarmed-s_95)(syntax-disarm$1 s_92)))"
"(let-values(((id_96)(datum->syntax$1 disarmed-s_95 sym_91)))"
"(if(free-id-set-member?(expand-context-stops ctx_93)(expand-context-phase ctx_93) id_96)"
"(let-values()"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_93)))"
"(if obs_97"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_93))"
"(let-values()"
"(begin"
"(call-expand-observe obs_97 'enter-prim s_92)"
"(call-expand-observe obs_97 'prim-stop)"
"(call-expand-observe obs_97 'exit-prim s_92)"
"(call-expand-observe obs_97 'return s_92)))"
"(void)))"
"(void)))"
" s_92))"
"(let-values()"
"(let-values(((b_98)"
"(let-values(((...nder/expand/main.rkt:136:13_99) resolve+shift15.1)"
"((id119_100) id_96)"
"((temp120_101)(expand-context-phase ctx_93))"
"((temp121_102) 'ambiguous)"
"((temp122_103) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp121_102 #t #f #f #f #f temp122_103 #t #f #f id119_100 temp120_101)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:136:13_99"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp121_102 temp122_103)"
" id119_100"
" temp120_101)))))"
"(if(eq? b_98 'ambiguous)"
"(let-values()(raise-ambiguous-error id_96 ctx_93))"
"(let-values()"
"(let-values(((t_104 insp-of-t_105)"
"(if b_98"
"(let-values(((b123_106) b_98)((ctx124_107) ctx_93)((id125_108) id_96))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 #f #f #f #f b123_106 ctx124_107 id125_108)"
"(lookup17.1 b123_106 ctx124_107 id125_108)))"
"(values #f #f))))"
"(if(transformer? t_104)"
"(let-values()"
"(dispatch-transformer"
" t_104"
" insp-of-t_105"
"(make-explicit sym_91 s_92 disarmed-s_95)"
" id_96"
" ctx_93"
" b_98))"
"(if(expand-context-only-immediate? ctx_93)"
"(let-values()"
"(begin"
"(let-values(((obs_109)(expand-context-observer ctx_93)))"
"(if obs_109"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_109 'exit-check s_92))(void)))"
"(void)))"
" s_92))"
"(if(core-form? t_104)"
"(let-values()"
"(if(if(eq? sym_91 '#%top)"
"(if(eq?(core-form-name t_104) '#%top)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_93)"
" #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_104 s_92 ctx_93))"
"(let-values()"
"(dispatch-core-form t_104(make-explicit sym_91 s_92 disarmed-s_95) ctx_93))))"
"(let-values()(raise-syntax-implicit-error s_92 sym_91 trigger-id_94 ctx_93)))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_110 ctx_111)"
"(let-values(((ae_112)(syntax-e$1 s_110)))"
"(let-values((()"
"(begin"
"(if(bound-identifier=?$1"
"(root-expand-context-all-scopes-stx ctx_111)"
"(already-expanded-all-scopes-stx ae_112)"
"(expand-context-phase ctx_111))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_112))))"
"(values))))"
"(let-values(((result-s_113)(syntax-track-origin$1(already-expanded-s ae_112) s_110)))"
"(begin"
"(let-values(((obs_114)(expand-context-observer ctx_111)))"
"(if obs_114"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_114 'tag result-s_113)"
"(call-expand-observe obs_114 'opaque-expr result-s_113)))"
"(void)))"
"(void)))"
" result-s_113))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_115 s_116 disarmed-s_117)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_117(cons sym_115 disarmed-s_117) s_116 s_116) s_116)))"
"(define-values"
"(dispatch)"
"(lambda(t_118 insp-of-t_119 s_120 id_121 ctx_122 binding_123)"
"(if(core-form? t_118)"
"(let-values()(dispatch-core-form t_118 s_120 ctx_122))"
"(if(transformer? t_118)"
"(let-values()(dispatch-transformer t_118 insp-of-t_119 s_120 id_121 ctx_122 binding_123))"
"(if(variable? t_118)"
"(let-values()(dispatch-variable t_118 s_120 id_121 ctx_122 binding_123))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" t_118)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_124 s_125 ctx_126)"
"(if(expand-context-only-immediate? ctx_126)"
"(let-values()"
"(begin"
"(let-values(((obs_127)(expand-context-observer ctx_126)))"
"(if obs_127"
"(let-values()(if #t(let-values()(call-expand-observe obs_127 'exit-check s_125))(void)))"
"(void)))"
" s_125))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_129)(expand-context-observer ctx_126)))"
"(if obs_129"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_129 'enter-prim s_125))(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_128)((core-form-expander t_124) s_125 ctx_126)))"
"(begin"
"(let-values(((obs_130)(expand-context-observer ctx_126)))"
"(if obs_130"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_130 'exit-prim result-s_128)"
"(call-expand-observe obs_130 'return result-s_128)))"
"(void)))"
"(void)))"
" result-s_128)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_131 s_132 ctx_133)"
"(let-values((()"
"(begin"
"(let-values(((obs_135)(expand-context-observer ctx_133)))"
"(if obs_135"
"(let-values()(if #t(let-values()(call-expand-observe obs_135 'enter-prim s_132))(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_134)((core-form-expander t_131) s_132 ctx_133 #t)))"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_133)))"
"(if obs_136"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_136 'exit-prim result-s_134)"
"(call-expand-observe obs_136 'return result-s_134)))"
"(void)))"
"(void)))"
" result-s_134)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_137 insp-of-t_138 s_139 id_140 ctx_141 binding_142)"
"(if(not-in-this-expand-context? t_137 ctx_141)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_144)(expand-context-observer ctx_141)))"
"(if obs_144"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_144 'enter-macro s_139))(void)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_143)"
"(avoid-current-expand-context(substitute-alternate-id s_139 id_140) t_137 ctx_141)))"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_141)))"
"(if obs_145"
"(let-values()(if #t(let-values()(call-expand-observe obs_145 'exit-macro s_139))(void)))"
"(void)))"
"(let-values(((adj-s126_146) adj-s_143)((ctx127_147) ctx_141))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f adj-s126_146 ctx127_147)"
"(expand7.1 adj-s126_146 ctx127_147)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_150)(expand-context-observer ctx_141)))"
"(if obs_150"
"(let-values()"
"(if(expand-context-only-immediate? ctx_141)"
"(let-values()"
"(begin"
"(call-expand-observe obs_150 'visit s_139)"
"(call-expand-observe obs_150 'resolves id_140)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_148 re-ctx_149)"
"(apply-transformer t_137 insp-of-t_138 s_139 id_140 ctx_141 binding_142)))"
"(begin"
"(let-values(((obs_151)(expand-context-observer ctx_141)))"
"(if obs_151"
"(let-values()"
"(if(expand-context-only-immediate? ctx_141)"
"(let-values()(call-expand-observe obs_151 'return exp-s_148))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_141)"
"(let-values() exp-s_148)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:234:11_152) expand7.1)"
"((exp-s128_153) exp-s_148)"
"((re-ctx129_154) re-ctx_149)"
"((temp130_155)"
"(if(1/rename-transformer? t_137)(1/rename-transformer-target t_137) #f)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 temp130_155 #t exp-s128_153 re-ctx129_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:234:11_152"
" keyword-procedure-extract"
" '(#:alternate-id)"
" 4)"
" '(#:alternate-id)"
"(list temp130_155)"
" exp-s128_153"
" re-ctx129_154))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_156 s_157 id_158 ctx_159 binding_160)"
"(if(expand-context-only-immediate? ctx_159)"
"(let-values()"
"(begin"
"(let-values(((obs_161)(expand-context-observer ctx_159)))"
"(if obs_161"
"(let-values()(if #t(let-values()(call-expand-observe obs_161 'exit-check s_157))(void)))"
"(void)))"
" id_158))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_163)(expand-context-observer ctx_159)))"
"(if obs_163"
"(let-values()(if #t(let-values()(call-expand-observe obs_163 'variable s_157))(void)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_160)(values))))"
"(let-values(((result-s_162)"
"(let-values(((...nder/expand/main.rkt:249:21_164) substitute-variable8.1)"
"((id131_165) id_158)"
"((t132_166) t_156)"
"((temp133_167)(free-id-set-empty?(expand-context-stops ctx_159))))"
"(if(variable-reference-constant?(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1 temp133_167 id131_165 t132_166)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:249:21_164"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp133_167)"
" id131_165"
" t132_166)))))"
"(begin"
"(let-values(((obs_168)(expand-context-observer ctx_159)))"
"(if obs_168"
"(let-values()(if #t(let-values()(call-expand-observe obs_168 'return result-s_162))(void)))"
"(void)))"
" result-s_162))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_169 insp-of-t_170 s_171 id_172 ctx_173 binding_174)"
"(let-values((()"
"(begin"
"(let-values(((obs_187)(expand-context-observer ctx_173)))"
"(if obs_187"
"(let-values()(if #t(let-values()(call-expand-observe obs_187 'enter-macro s_171))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_175)(syntax-disarm$1 s_171)))"
"(let-values(((intro-scope_176)(new-scope 'macro)))"
"(let-values(((intro-s_177)(add-scope disarmed-s_175 intro-scope_176)))"
"(let-values(((use-s_178 use-scopes_179)(maybe-add-use-site-scope intro-s_177 ctx_173 binding_174)))"
"(let-values(((cleaned-s_180)(syntax-remove-taint-dispatch-properties use-s_178)))"
"(let-values(((def-ctx-scopes_181)(box null)))"
"(let-values(((transformed-s_182)"
"(apply-transformer-in-context"
" t_169"
" cleaned-s_180"
" ctx_173"
" insp-of-t_170"
" intro-scope_176"
" use-scopes_179"
" def-ctx-scopes_181"
" id_172)))"
"(let-values(((result-s_183)(flip-scope transformed-s_182 intro-scope_176)))"
"(let-values(((post-s_184)(maybe-add-post-expansion-scope result-s_183 ctx_173)))"
"(let-values(((tracked-s_185)(syntax-track-origin$1 post-s_184 cleaned-s_180 id_172)))"
"(let-values(((rearmed-s_186)"
"(taint-dispatch"
" tracked-s_185"
"(lambda(t-s_188)(syntax-rearm$1 t-s_188 s_171))"
"(expand-context-phase ctx_173))))"
"(begin"
"(let-values(((obs_189)(expand-context-observer ctx_173)))"
"(if obs_189"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_189 'exit-macro rearmed-s_186))"
"(void)))"
"(void)))"
"(values"
" rearmed-s_186"
"(accumulate-def-ctx-scopes ctx_173 def-ctx-scopes_181)))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_190 cleaned-s_191 ctx_192 insp-of-t_193 intro-scope_194 use-scopes_195 def-ctx-scopes_196 id_197)"
"(let-values((()"
"(begin"
"(let-values(((obs_202)(expand-context-observer ctx_192)))"
"(if obs_202"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_202 'macro-pre-x cleaned-s_191))(void)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_198)"
"(not"
"(let-values(((or-part_203)(expand-context-only-immediate? ctx_192)))"
"(if or-part_203 or-part_203(not(free-id-set-empty?(expand-context-stops ctx_192))))))))"
"(let-values(((accum-ctx_199)"
"(if(if confine-def-ctx-scopes?_198"
"(if(expand-context-def-ctx-scopes ctx_192)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_192))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_192(expand-context-def-ctx-scopes ctx_192))"
" ctx_192)))"
"(let-values(((m-ctx_200)"
"(let-values(((the-struct_204) accum-ctx_199))"
"(if(expand-context? the-struct_204)"
"(let-values(((current-introduction-scopes134_205)(cons intro-scope_194 use-scopes_195))"
"((def-ctx-scopes135_206)"
"(if confine-def-ctx-scopes?_198"
" def-ctx-scopes_196"
"(expand-context-def-ctx-scopes ctx_192))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_204)"
"(root-expand-context-post-expansion-scope the-struct_204)"
"(root-expand-context-top-level-bind-scope the-struct_204)"
"(root-expand-context-all-scopes-stx the-struct_204)"
"(root-expand-context-use-site-scopes the-struct_204)"
"(root-expand-context-defined-syms the-struct_204)"
"(root-expand-context-frame-id the-struct_204)"
"(root-expand-context-counter the-struct_204)"
"(root-expand-context-lift-key the-struct_204)"
"(expand-context-context the-struct_204)"
"(expand-context-phase the-struct_204)"
"(expand-context-namespace the-struct_204)"
"(expand-context-env the-struct_204)"
"(expand-context-user-env the-struct_204)"
"(expand-context-post-expansion-scope-action the-struct_204)"
"(expand-context-scopes the-struct_204)"
" def-ctx-scopes135_206"
"(expand-context-reference-records the-struct_204)"
"(expand-context-only-immediate? the-struct_204)"
"(expand-context-just-once? the-struct_204)"
"(expand-context-module-begin-k the-struct_204)"
"(expand-context-need-eventually-defined the-struct_204)"
"(expand-context-allow-unbound? the-struct_204)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_204)"
"(expand-context-stops the-struct_204)"
" current-introduction-scopes134_205"
"(expand-context-declared-submodule-names the-struct_204)"
"(expand-context-lifts the-struct_204)"
"(expand-context-lift-envs the-struct_204)"
"(expand-context-module-lifts the-struct_204)"
"(expand-context-require-lifts the-struct_204)"
"(expand-context-to-module-lifts the-struct_204)"
"(expand-context-requires+provides the-struct_204)"
"(expand-context-name the-struct_204)"
"(expand-context-observer the-struct_204)))"
"                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_204)))))"
"(let-values(((transformed-s_201)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_200"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_192)"
"(add1(expand-context-phase ctx_192)))"
" current-module-code-inspector"
"(let-values(((or-part_207) insp-of-t_193))"
"(if or-part_207 or-part_207(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_190) cleaned-s_191)))))))"
"(begin"
"(let-values(((obs_208)(expand-context-observer ctx_192)))"
"(if obs_208"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_208 'macro-post-x transformed-s_201))(void)))"
"(void)))"
"(if(syntax?$1 transformed-s_201)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_197)"
"                     \"received value from syntax expander was not syntax\""
"                     \"received\""
" transformed-s_201)))"
" transformed-s_201))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_209 ctx_210 binding_211)"
"(if(if(root-expand-context-use-site-scopes ctx_210)"
"(if(root-expand-context-frame-id ctx_210)"
"(eq?(root-expand-context-frame-id ctx_210)(binding-frame-id binding_211))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((sc_212)(new-scope 'use-site)))"
"(let-values(((b_213)(root-expand-context-use-site-scopes ctx_210)))"
"(begin(set-box! b_213(cons sc_212(unbox b_213)))(values(add-scope s_209 sc_212)(list sc_212))))))"
"(let-values()(values s_209 null)))))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_214 ctx_215)"
"(if(root-expand-context-post-expansion-scope ctx_215)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_215) s_214(root-expand-context-post-expansion-scope ctx_215)))"
"(let-values() s_214))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_216 def-ctx-scopes_217)"
"(if(null?(unbox def-ctx-scopes_217))"
" ctx_216"
"(let-values(((the-struct_218) ctx_216))"
"(if(expand-context? the-struct_218)"
"(let-values(((scopes136_219)(append(unbox def-ctx-scopes_217)(expand-context-scopes ctx_216)))"
"((all-scopes-stx137_220)"
"(add-scopes"
"(root-expand-context-all-scopes-stx ctx_216)"
"(let-values(((b_221)(expand-context-def-ctx-scopes ctx_216)))"
"(if b_221(unbox b_221) null)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_218)"
"(root-expand-context-post-expansion-scope the-struct_218)"
"(root-expand-context-top-level-bind-scope the-struct_218)"
" all-scopes-stx137_220"
"(root-expand-context-use-site-scopes the-struct_218)"
"(root-expand-context-defined-syms the-struct_218)"
"(root-expand-context-frame-id the-struct_218)"
"(root-expand-context-counter the-struct_218)"
"(root-expand-context-lift-key the-struct_218)"
"(expand-context-context the-struct_218)"
"(expand-context-phase the-struct_218)"
"(expand-context-namespace the-struct_218)"
"(expand-context-env the-struct_218)"
"(expand-context-user-env the-struct_218)"
"(expand-context-post-expansion-scope-action the-struct_218)"
" scopes136_219"
"(expand-context-def-ctx-scopes the-struct_218)"
"(expand-context-reference-records the-struct_218)"
"(expand-context-only-immediate? the-struct_218)"
"(expand-context-just-once? the-struct_218)"
"(expand-context-module-begin-k the-struct_218)"
"(expand-context-need-eventually-defined the-struct_218)"
"(expand-context-allow-unbound? the-struct_218)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_218)"
"(expand-context-stops the-struct_218)"
"(expand-context-current-introduction-scopes the-struct_218)"
"(expand-context-declared-submodule-names the-struct_218)"
"(expand-context-lifts the-struct_218)"
"(expand-context-lift-envs the-struct_218)"
"(expand-context-module-lifts the-struct_218)"
"(expand-context-require-lifts the-struct_218)"
"(expand-context-to-module-lifts the-struct_218)"
"(expand-context-requires+provides the-struct_218)"
"(expand-context-name the-struct_218)"
"(expand-context-observer the-struct_218)))"
"          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_218))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_222"
" in10_223"
" out-of-context-as-variable?9_224"
" out-of-context-as-variable?11_225"
" b12_226"
" ctx13_227"
" id14_228)"
"(let-values(((b_229) b12_226))"
"(let-values(((ctx_230) ctx13_227))"
"(let-values(((id_231) id14_228))"
"(let-values(((in-s_232)(if in10_223 in8_222 #f)))"
"(let-values(((out-of-context-as-variable?_233)"
"(if out-of-context-as-variable?11_225 out-of-context-as-variable?9_224 #f)))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:381:2_234) binding-lookup48.1)"
"((b138_235) b_229)"
"((temp139_236)(expand-context-env ctx_230))"
"((temp140_237)(expand-context-lift-envs ctx_230))"
"((temp141_238)(expand-context-namespace ctx_230))"
"((temp142_239)(expand-context-phase ctx_230))"
"((id143_240) id_231)"
"((in-s144_241) in-s_232)"
"((out-of-context-as-variable?145_242) out-of-context-as-variable?_233))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup48.1))"
"(binding-lookup46.1"
" in-s144_241"
" #t"
" out-of-context-as-variable?145_242"
" #t"
" b138_235"
" temp139_236"
" temp140_237"
" temp141_238"
" temp142_239"
" id143_240)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:381:2_234"
" keyword-procedure-extract"
" '(#:in #:out-of-context-as-variable?)"
" 8)"
" '(#:in #:out-of-context-as-variable?)"
"(list in-s144_241 out-of-context-as-variable?145_242)"
" b138_235"
" temp139_236"
" temp140_237"
" temp141_238"
" temp142_239"
" id143_240)))))))))))"
"(define-values"
"(unpack16.1)"
"(lambda(given-kws_243 given-args_244 b12_245 ctx13_246 id14_247)"
"(let-values(((in10_248)(if(pair? given-kws_243)(eq? '#:in(car given-kws_243)) #f)))"
"(let-values(((in8_249)(if in10_248(car given-args_244)(void)))"
"((given-kws_250)(if in10_248(cdr given-kws_243) given-kws_243))"
"((given-args_251)(if in10_248(cdr given-args_244) given-args_244)))"
"(let-values(((out-of-context-as-variable?11_252)(pair? given-kws_250)))"
"(let-values(((out-of-context-as-variable?9_253)"
"(if out-of-context-as-variable?11_252(car given-args_251)(void))))"
"(lookup15.1"
" in8_249"
" in10_248"
" out-of-context-as-variable?9_253"
" out-of-context-as-variable?11_252"
" b12_245"
" ctx13_246"
" id14_247)))))))"
"(define-values"
"(lookup17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_254 given-argc_255)"
"(if(= given-argc_255 5)"
"(let-values(((l1_256) given-kws_254))"
"(let-values(((l1_257)(if(null? l1_256) l1_256(if(eq?(car l1_256) '#:in)(cdr l1_256) l1_256))))"
"(let-values(((l1_258) l1_257))"
"(let-values(((l1_259)"
"(if(null? l1_258)"
" l1_258"
"(if(eq?(car l1_258) '#:out-of-context-as-variable?)(cdr l1_258) l1_258))))"
"(null? l1_259)))))"
" #f))"
"(case-lambda"
"((given-kws_260 given-args_261 b_262 ctx_263 id_264)"
"(unpack16.1 given-kws_260 given-args_261 b_262 ctx_263 id_264)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((lookup_265)(case-lambda((b_266 ctx_267 id_268)(unpack16.1 null null b_266 ctx_267 id_268)))))"
" lookup_265)))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_269 alternate-id_270)"
"(if(not alternate-id_270)"
"(let-values() s_269)"
"(if(identifier? s_269)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_270 s_269) s_269))"
"(let-values()"
"(let-values(((disarmed-s_271)(syntax-disarm$1 s_269)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_271(cons alternate-id_270(cdr(syntax-e$1 disarmed-s_271))) s_269)"
" s_269)"
" s_269)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_272)"
"(if(if(local-binding? binding_272)(reference-record?(binding-frame-id binding_272)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_272)(local-binding-key binding_272)))"
"(void))))"
"(define-values"
"(lifted/21.1)"
"(make-required"
" 'expand-body"
"(case-lambda((self_273 bodys_274 ctx_275)(apply missing-kw self_273 bodys_274 ctx_275 null)))"
" #f"
" #f))"
"(define-values"
"(expand-body28.1)"
"(lambda(disarmed-source19_276"
" source18_277"
" stratified?20_278"
" stratified?24_279"
" track?21_280"
" track?25_281"
" bodys26_282"
" ctx27_283)"
"(let-values(((bodys_284) bodys26_282))"
"(let-values(((ctx_285) ctx27_283))"
"(let-values(((s_286) source18_277))"
"(let-values(((disarmed-s_287) disarmed-source19_276))"
"(let-values(((stratified?_288)(if stratified?24_279 stratified?20_278 #f)))"
"(let-values(((track?_289)(if track?25_281 track?21_280 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_297)(expand-context-observer ctx_285)))"
"(if obs_297"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_297 'enter-block))(void)))"
"(void)))"
"(values))))"
"(let-values(((outside-sc_290)(new-scope 'local)))"
"(let-values(((inside-sc_291)(new-scope 'intdef)))"
"(let-values(((init-bodys_292)"
"(alt-reverse"
"(let-values(((lst_298) bodys_284))"
"(begin"
"(if(list? lst_298)(void)(let-values()(in-list lst_298)))"
"((letrec-values(((for-loop_299)"
"(lambda(fold-var_300 lst_301)"
"(if(pair? lst_301)"
"(let-values(((body_302)(unsafe-car lst_301)))"
"(if #t"
"(let-values(((fold-var_303)"
"(let-values(((fold-var_304)"
" fold-var_300))"
"(let-values(((fold-var_305)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(add-scope"
" body_302"
" outside-sc_290)"
" inside-sc_291))"
" fold-var_304))))"
"(values fold-var_305)))))"
"(if #t"
"(for-loop_299"
" fold-var_303"
"(unsafe-cdr lst_301))"
" fold-var_303))"
" fold-var_300))"
" fold-var_300))))"
" for-loop_299)"
" null"
" lst_298))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_306)(expand-context-observer ctx_285)))"
"(if obs_306"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_306"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_292)"
"(datum->syntax$1 #f bodys_284)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_293)(expand-context-phase ctx_285)))"
"(let-values(((frame-id_294)(make-reference-record)))"
"(let-values(((def-ctx-scopes_295)(box null)))"
"(let-values(((body-ctx_296)"
"(let-values(((the-struct_307) ctx_285))"
"(if(expand-context? the-struct_307)"
"(let-values(((context146_308)(list(make-liberal-define-context)))"
"((only-immediate?147_309) #t)"
"((def-ctx-scopes148_310) def-ctx-scopes_295)"
"((post-expansion-scope149_311) inside-sc_291)"
"((post-expansion-scope-action150_312) add-scope)"
"((scopes151_313)"
"(list*"
" outside-sc_290"
" inside-sc_291"
"(expand-context-scopes ctx_285)))"
"((use-site-scopes152_314)(box null))"
"((frame-id153_315) frame-id_294)"
"((reference-records154_316)"
"(cons"
" frame-id_294"
"(expand-context-reference-records ctx_285)))"
"((all-scopes-stx155_317)"
"(add-scope"
"(add-scope"
"(root-expand-context-all-scopes-stx ctx_285)"
" outside-sc_290)"
" inside-sc_291)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_307)"
" post-expansion-scope149_311"
"(root-expand-context-top-level-bind-scope the-struct_307)"
" all-scopes-stx155_317"
" use-site-scopes152_314"
"(root-expand-context-defined-syms the-struct_307)"
" frame-id153_315"
"(root-expand-context-counter the-struct_307)"
"(root-expand-context-lift-key the-struct_307)"
" context146_308"
"(expand-context-phase the-struct_307)"
"(expand-context-namespace the-struct_307)"
"(expand-context-env the-struct_307)"
"(expand-context-user-env the-struct_307)"
" post-expansion-scope-action150_312"
" scopes151_313"
" def-ctx-scopes148_310"
" reference-records154_316"
" only-immediate?147_309"
"(expand-context-just-once? the-struct_307)"
"(expand-context-module-begin-k the-struct_307)"
"(expand-context-need-eventually-defined the-struct_307)"
"(expand-context-allow-unbound? the-struct_307)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_307)"
"(expand-context-stops the-struct_307)"
"(expand-context-current-introduction-scopes the-struct_307)"
"(expand-context-declared-submodule-names the-struct_307)"
"(expand-context-lifts the-struct_307)"
"(expand-context-lift-envs the-struct_307)"
"(expand-context-module-lifts the-struct_307)"
"(expand-context-require-lifts the-struct_307)"
"(expand-context-to-module-lifts the-struct_307)"
"(expand-context-requires+provides the-struct_307)"
"(expand-context-name the-struct_307)"
"(expand-context-observer the-struct_307)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"expand-context?\""
" the-struct_307)))))"
"((letrec-values(((loop_318)"
"(lambda(body-ctx_319"
" bodys_320"
" done-bodys_321"
" val-idss_322"
" val-keyss_323"
" val-rhss_324"
" track-stxs_325"
" trans-idss_326"
" dups_327)"
"(if(null? bodys_320)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_329)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_329"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_329"
"(if(null? val-idss_322)"
" 'block->list"
" 'block->letrec)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_328)"
"(let-values(((...nder/expand/main.rkt:480:8_330)"
" finish-expanding-body49.1)"
"((body-ctx156_331)"
" body-ctx_319)"
"((frame-id157_332)"
" frame-id_294)"
"((def-ctx-scopes158_333)"
" def-ctx-scopes_295)"
"((temp159_334)"
"(alt-reverse val-idss_322))"
"((temp160_335)"
"(alt-reverse val-keyss_323))"
"((temp161_336)"
"(alt-reverse val-rhss_324))"
"((temp162_337)"
"(alt-reverse track-stxs_325))"
"((temp163_338)"
"(alt-reverse done-bodys_321))"
"((s164_339) s_286)"
"((disarmed-s165_340)"
" disarmed-s_287)"
"((stratified?166_341)"
" stratified?_288)"
"((track?167_342) track?_289))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body49.1))"
"(finish-expanding-body47.1"
" disarmed-s165_340"
" s164_339"
" stratified?166_341"
" track?167_342"
" body-ctx156_331"
" frame-id157_332"
" def-ctx-scopes158_333"
" temp159_334"
" temp160_335"
" temp161_336"
" temp162_337"
" temp163_338)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:480:8_330"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source"
" #:stratified?"
" #:track?)"
" 10)"
" '(#:disarmed-source"
" #:source"
" #:stratified?"
" #:track?)"
"(list"
" disarmed-s165_340"
" s164_339"
" stratified?166_341"
" track?167_342)"
" body-ctx156_331"
" frame-id157_332"
" def-ctx-scopes158_333"
" temp159_334"
" temp160_335"
" temp161_336"
" temp162_337"
" temp163_338)))))"
"(attach-disappeared-transformer-bindings"
" result-s_328"
"(alt-reverse trans-idss_326)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_345)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_345"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_345"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_343)"
"(let-values(((temp168_346)"
"(syntax-disarm$1"
"(car bodys_320)))"
"((body-ctx169_347)"
" body-ctx_319))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp168_346"
" body-ctx169_347)"
"(expand7.1"
" temp168_346"
" body-ctx169_347)))))"
"(let-values(((disarmed-exp-body_344)"
"(syntax-disarm$1 exp-body_343)))"
"(let-values(((tmp_348)"
"(core-form-sym"
" disarmed-exp-body_344"
" phase_293)))"
"(if(equal? tmp_348 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_364)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_364"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_364"
" 'prim-begin))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_349 begin170_350 e171_351)"
"(let-values(((s_365)"
" disarmed-exp-body_344))"
"(if(if #t #t #f)"
"(let-values(((orig-s_366)"
" s_365))"
"(let-values(((begin170_367"
" e171_368)"
"(let-values(((s_369)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(if(pair?"
" s_369)"
"(let-values(((begin172_370)"
"(let-values(((s_372)"
"(car"
" s_369)))"
" s_372))"
"((e173_371)"
"(let-values(((s_373)"
"(cdr"
" s_369)))"
"(let-values(((s_374)"
"(if(syntax?$1"
" s_373)"
"(syntax-e$1"
" s_373)"
" s_373)))"
"(let-values(((flat-s_375)"
"(to-syntax-list.1"
" s_374)))"
"(if(not"
" flat-s_375)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_366))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_366))"
"(let-values()"
" flat-s_375))))))))"
"(values"
" begin172_370"
" e173_371))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_366)))))"
"(values"
" #t"
" begin170_367"
" e171_368)))"
"(values #f #f #f)))))"
"(let-values(((track_362)"
"(lambda(e_376)"
"(syntax-track-origin$1"
" e_376"
" exp-body_343))))"
"(let-values(((splice-bodys_363)"
"(append"
"(map2 track_362 e171_351)"
"(cdr bodys_320))))"
"(begin"
"(let-values(((obs_377)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_377"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_377"
" 'splice"
" splice-bodys_363))"
"(void)))"
"(void)))"
"(loop_318"
" body-ctx_319"
" splice-bodys_363"
" done-bodys_321"
" val-idss_322"
" val-keyss_323"
" val-rhss_324"
" track-stxs_325"
" trans-idss_326"
" dups_327)))))))"
"(if(equal? tmp_348 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_399)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_399"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_399"
" 'prim-define-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_378"
" define-values174_379"
" id175_380"
" rhs176_381)"
"(let-values(((s_400)"
" disarmed-exp-body_344))"
"(if(if #t #t #f)"
"(let-values(((orig-s_401)"
" s_400))"
"(let-values(((define-values174_402"
" id175_403"
" rhs176_404)"
"(let-values(((s_405)"
"(if(syntax?$1"
" s_400)"
"(syntax-e$1"
" s_400)"
" s_400)))"
"(if(pair?"
" s_405)"
"(let-values(((define-values177_406)"
"(let-values(((s_409)"
"(car"
" s_405)))"
" s_409))"
"((id178_407"
" rhs179_408)"
"(let-values(((s_410)"
"(cdr"
" s_405)))"
"(let-values(((s_411)"
"(if(syntax?$1"
" s_410)"
"(syntax-e$1"
" s_410)"
" s_410)))"
"(if(pair?"
" s_411)"
"(let-values(((id180_412)"
"(let-values(((s_414)"
"(car"
" s_411)))"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(let-values(((flat-s_416)"
"(to-syntax-list.1"
" s_415)))"
"(if(not"
" flat-s_416)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_401))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_401))"
"(let-values()"
"(let-values(((id_417)"
"(let-values(((lst_418)"
" flat-s_416))"
"(begin"
"(if(list?"
" lst_418)"
"(void)"
"(let-values()"
"(in-list"
" lst_418)))"
"((letrec-values(((for-loop_419)"
"(lambda(id_420"
" lst_421)"
"(if(pair?"
" lst_421)"
"(let-values(((s_422)"
"(unsafe-car"
" lst_421)))"
"(if #t"
"(let-values(((id_423)"
"(let-values(((id_424)"
" id_420))"
"(let-values(((id_425)"
"(let-values()"
"(let-values(((id183_426)"
"(let-values()"
"(if(let-values(((or-part_427)"
"(if(syntax?$1"
" s_422)"
"(symbol?"
"(syntax-e$1"
" s_422))"
" #f)))"
"(if or-part_427"
" or-part_427"
"(symbol?"
" s_422)))"
" s_422"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_401"
" s_422)))))"
"(cons"
" id183_426"
" id_424)))))"
"(values"
" id_425)))))"
"(if #t"
"(for-loop_419"
" id_423"
"(unsafe-cdr"
" lst_421))"
" id_423))"
" id_420))"
" id_420))))"
" for-loop_419)"
" null"
" lst_418)))))"
"(alt-reverse"
" id_417)))))))))"
"((rhs181_413)"
"(let-values(((s_428)"
"(cdr"
" s_411)))"
"(let-values(((s_429)"
"(if(syntax?$1"
" s_428)"
"(syntax-e$1"
" s_428)"
" s_428)))"
"(if(pair?"
" s_429)"
"(let-values(((rhs182_430)"
"(let-values(((s_431)"
"(car"
" s_429)))"
" s_431))"
"(()"
"(let-values(((s_432)"
"(cdr"
" s_429)))"
"(let-values(((s_433)"
"(if(syntax?$1"
" s_432)"
"(syntax-e$1"
" s_432)"
" s_432)))"
"(if(null?"
" s_433)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_401))))))"
"(values"
" rhs182_430))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_401))))))"
"(values"
" id180_412"
" rhs181_413))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_401))))))"
"(values"
" define-values177_406"
" id178_407"
" rhs179_408))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_401)))))"
"(values"
" #t"
" define-values174_402"
" id175_403"
" rhs176_404)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_394)"
"(remove-use-site-scopes"
" id175_380"
" body-ctx_319)))"
"(let-values((()"
"(begin"
"(let-values(((obs_434)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_434"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_434"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_394"
" rhs176_381))))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((new-dups_395)"
"(let-values(((ids184_435)"
" ids_394)"
"((phase185_436)"
" phase_293)"
"((exp-body186_437)"
" exp-body_343)"
"((dups187_438)"
" dups_327))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids184_435"
" phase185_436"
" exp-body186_437"
" dups187_438"
" #t)"
"(check-no-duplicate-ids10.1"
" ids184_435"
" phase185_436"
" exp-body186_437"
" dups187_438)))))"
"(let-values(((counter_396)"
"(root-expand-context-counter"
" ctx_285)))"
"(let-values(((keys_397)"
"(alt-reverse"
"(let-values(((lst_439)"
" ids_394))"
"(begin"
"(if(list?"
" lst_439)"
"(void)"
"(let-values()"
"(in-list"
" lst_439)))"
"((letrec-values(((for-loop_440)"
"(lambda(fold-var_441"
" lst_442)"
"(if(pair?"
" lst_442)"
"(let-values(((id_443)"
"(unsafe-car"
" lst_442)))"
"(if #t"
"(let-values(((fold-var_444)"
"(let-values(((fold-var_445)"
" fold-var_441))"
"(let-values(((fold-var_446)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:518:24_447)"
" add-local-binding!35.1)"
"((id188_448)"
" id_443)"
"((phase189_449)"
" phase_293)"
"((counter190_450)"
" counter_396)"
"((frame-id191_451)"
" frame-id_294)"
"((exp-body192_452)"
" exp-body_343))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id191_451"
" #t"
" exp-body192_452"
" #t"
" id188_448"
" phase189_449"
" counter190_450)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:518:24_447"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id191_451"
" exp-body192_452)"
" id188_448"
" phase189_449"
" counter190_450))))"
" fold-var_445))))"
"(values"
" fold-var_446)))))"
"(if #t"
"(for-loop_440"
" fold-var_444"
"(unsafe-cdr"
" lst_442))"
" fold-var_444))"
" fold-var_441))"
" fold-var_441))))"
" for-loop_440)"
" null"
" lst_439))))))"
"(let-values(((extended-env_398)"
"(let-values(((lst_453)"
" keys_397)"
"((lst_454)"
" ids_394))"
"(begin"
"(if(list?"
" lst_453)"
"(void)"
"(let-values()"
"(in-list"
" lst_453)))"
"(if(list?"
" lst_454)"
"(void)"
"(let-values()"
"(in-list"
" lst_454)))"
"((letrec-values(((for-loop_455)"
"(lambda(env_456"
" lst_457"
" lst_458)"
"(if(if(pair?"
" lst_457)"
"(pair?"
" lst_458)"
" #f)"
"(let-values(((key_459)"
"(unsafe-car"
" lst_457))"
"((id_460)"
"(unsafe-car"
" lst_458)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((env_461)"
"(let-values(((env_462)"
" env_456))"
"(let-values(((env_463)"
"(let-values()"
"(env-extend"
" env_462"
" key_459"
"(local-variable1.1"
" id_460)))))"
"(values"
" env_463)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_455"
" env_461"
"(unsafe-cdr"
" lst_457)"
"(unsafe-cdr"
" lst_458))"
" env_461))"
" env_456))"
" env_456))))"
" for-loop_455)"
"(expand-context-env"
" body-ctx_319)"
" lst_453"
" lst_454)))))"
"(loop_318"
"(let-values(((the-struct_464)"
" body-ctx_319))"
"(if(expand-context?"
" the-struct_464)"
"(let-values(((env193_465)"
" extended-env_398))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_464)"
"(root-expand-context-post-expansion-scope"
" the-struct_464)"
"(root-expand-context-top-level-bind-scope"
" the-struct_464)"
"(root-expand-context-all-scopes-stx"
" the-struct_464)"
"(root-expand-context-use-site-scopes"
" the-struct_464)"
"(root-expand-context-defined-syms"
" the-struct_464)"
"(root-expand-context-frame-id"
" the-struct_464)"
"(root-expand-context-counter"
" the-struct_464)"
"(root-expand-context-lift-key"
" the-struct_464)"
"(expand-context-context"
" the-struct_464)"
"(expand-context-phase"
" the-struct_464)"
"(expand-context-namespace"
" the-struct_464)"
" env193_465"
"(expand-context-user-env"
" the-struct_464)"
"(expand-context-post-expansion-scope-action"
" the-struct_464)"
"(expand-context-scopes"
" the-struct_464)"
"(expand-context-def-ctx-scopes"
" the-struct_464)"
"(expand-context-reference-records"
" the-struct_464)"
"(expand-context-only-immediate?"
" the-struct_464)"
"(expand-context-just-once?"
" the-struct_464)"
"(expand-context-module-begin-k"
" the-struct_464)"
"(expand-context-need-eventually-defined"
" the-struct_464)"
"(expand-context-allow-unbound?"
" the-struct_464)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_464)"
"(expand-context-stops"
" the-struct_464)"
"(expand-context-current-introduction-scopes"
" the-struct_464)"
"(expand-context-declared-submodule-names"
" the-struct_464)"
"(expand-context-lifts"
" the-struct_464)"
"(expand-context-lift-envs"
" the-struct_464)"
"(expand-context-module-lifts"
" the-struct_464)"
"(expand-context-require-lifts"
" the-struct_464)"
"(expand-context-to-module-lifts"
" the-struct_464)"
"(expand-context-requires+provides"
" the-struct_464)"
"(expand-context-name"
" the-struct_464)"
"(expand-context-observer"
" the-struct_464)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                \"expand-context?\""
" the-struct_464)))"
"(cdr bodys_320)"
" null"
"(cons"
" ids_394"
"(append"
"(alt-reverse"
"(let-values(((lst_466)"
" done-bodys_321))"
"(begin"
"(if(list? lst_466)"
"(void)"
"(let-values()"
"(in-list"
" lst_466)))"
"((letrec-values(((for-loop_467)"
"(lambda(fold-var_468"
" lst_469)"
"(if(pair?"
" lst_469)"
"(let-values(((done-body_470)"
"(unsafe-car"
" lst_469)))"
"(if #t"
"(let-values(((fold-var_471)"
"(let-values(((fold-var_472)"
" fold-var_468))"
"(let-values(((fold-var_473)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_472))))"
"(values"
" fold-var_473)))))"
"(if #t"
"(for-loop_467"
" fold-var_471"
"(unsafe-cdr"
" lst_469))"
" fold-var_471))"
" fold-var_468))"
" fold-var_468))))"
" for-loop_467)"
" null"
" lst_466))))"
" val-idss_322))"
"(cons"
" keys_397"
"(append"
"(alt-reverse"
"(let-values(((lst_474)"
" done-bodys_321))"
"(begin"
"(if(list? lst_474)"
"(void)"
"(let-values()"
"(in-list"
" lst_474)))"
"((letrec-values(((for-loop_475)"
"(lambda(fold-var_476"
" lst_477)"
"(if(pair?"
" lst_477)"
"(let-values(((done-body_478)"
"(unsafe-car"
" lst_477)))"
"(if #t"
"(let-values(((fold-var_479)"
"(let-values(((fold-var_480)"
" fold-var_476))"
"(let-values(((fold-var_481)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_480))))"
"(values"
" fold-var_481)))))"
"(if #t"
"(for-loop_475"
" fold-var_479"
"(unsafe-cdr"
" lst_477))"
" fold-var_479))"
" fold-var_476))"
" fold-var_476))))"
" for-loop_475)"
" null"
" lst_474))))"
" val-keyss_323))"
"(cons"
" rhs176_381"
"(append"
"(alt-reverse"
"(let-values(((lst_482)"
" done-bodys_321))"
"(begin"
"(if(list? lst_482)"
"(void)"
"(let-values()"
"(in-list"
" lst_482)))"
"((letrec-values(((for-loop_483)"
"(lambda(fold-var_484"
" lst_485)"
"(if(pair?"
" lst_485)"
"(let-values(((done-body_486)"
"(unsafe-car"
" lst_485)))"
"(if #t"
"(let-values(((fold-var_487)"
"(let-values(((fold-var_488)"
" fold-var_484))"
"(let-values(((fold-var_489)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_486"
" s_286"
" phase_293))"
" fold-var_488))))"
"(values"
" fold-var_489)))))"
"(if #t"
"(for-loop_483"
" fold-var_487"
"(unsafe-cdr"
" lst_485))"
" fold-var_487))"
" fold-var_484))"
" fold-var_484))))"
" for-loop_483)"
" null"
" lst_482))))"
" val-rhss_324))"
"(cons"
" exp-body_343"
"(append"
"(alt-reverse"
"(let-values(((lst_490)"
" done-bodys_321))"
"(begin"
"(if(list? lst_490)"
"(void)"
"(let-values()"
"(in-list"
" lst_490)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" lst_493)"
"(if(pair?"
" lst_493)"
"(let-values(((done-body_494)"
"(unsafe-car"
" lst_493)))"
"(if #t"
"(let-values(((fold-var_495)"
"(let-values(((fold-var_496)"
" fold-var_492))"
"(let-values(((fold-var_497)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_496))))"
"(values"
" fold-var_497)))))"
"(if #t"
"(for-loop_491"
" fold-var_495"
"(unsafe-cdr"
" lst_493))"
" fold-var_495))"
" fold-var_492))"
" fold-var_492))))"
" for-loop_491)"
" null"
" lst_490))))"
" track-stxs_325))"
" trans-idss_326"
" new-dups_395))))))))))"
"(if(equal? tmp_348 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_520)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_520"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_520"
" 'prim-define-syntaxes))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_498"
" define-syntaxes194_499"
" id195_500"
" rhs196_501)"
"(let-values(((s_521)"
" disarmed-exp-body_344))"
"(if(if #t #t #f)"
"(let-values(((orig-s_522)"
" s_521))"
"(let-values(((define-syntaxes194_523"
" id195_524"
" rhs196_525)"
"(let-values(((s_526)"
"(if(syntax?$1"
" s_521)"
"(syntax-e$1"
" s_521)"
" s_521)))"
"(if(pair?"
" s_526)"
"(let-values(((define-syntaxes197_527)"
"(let-values(((s_530)"
"(car"
" s_526)))"
" s_530))"
"((id198_528"
" rhs199_529)"
"(let-values(((s_531)"
"(cdr"
" s_526)))"
"(let-values(((s_532)"
"(if(syntax?$1"
" s_531)"
"(syntax-e$1"
" s_531)"
" s_531)))"
"(if(pair?"
" s_532)"
"(let-values(((id200_533)"
"(let-values(((s_535)"
"(car"
" s_532)))"
"(let-values(((s_536)"
"(if(syntax?$1"
" s_535)"
"(syntax-e$1"
" s_535)"
" s_535)))"
"(let-values(((flat-s_537)"
"(to-syntax-list.1"
" s_536)))"
"(if(not"
" flat-s_537)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_522))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_522))"
"(let-values()"
"(let-values(((id_538)"
"(let-values(((lst_539)"
" flat-s_537))"
"(begin"
"(if(list?"
" lst_539)"
"(void)"
"(let-values()"
"(in-list"
" lst_539)))"
"((letrec-values(((for-loop_540)"
"(lambda(id_541"
" lst_542)"
"(if(pair?"
" lst_542)"
"(let-values(((s_543)"
"(unsafe-car"
" lst_542)))"
"(if #t"
"(let-values(((id_544)"
"(let-values(((id_545)"
" id_541))"
"(let-values(((id_546)"
"(let-values()"
"(let-values(((id203_547)"
"(let-values()"
"(if(let-values(((or-part_548)"
"(if(syntax?$1"
" s_543)"
"(symbol?"
"(syntax-e$1"
" s_543))"
" #f)))"
"(if or-part_548"
" or-part_548"
"(symbol?"
" s_543)))"
" s_543"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_522"
" s_543)))))"
"(cons"
" id203_547"
" id_545)))))"
"(values"
" id_546)))))"
"(if #t"
"(for-loop_540"
" id_544"
"(unsafe-cdr"
" lst_542))"
" id_544))"
" id_541))"
" id_541))))"
" for-loop_540)"
" null"
" lst_539)))))"
"(alt-reverse"
" id_538)))))))))"
"((rhs201_534)"
"(let-values(((s_549)"
"(cdr"
" s_532)))"
"(let-values(((s_550)"
"(if(syntax?$1"
" s_549)"
"(syntax-e$1"
" s_549)"
" s_549)))"
"(if(pair?"
" s_550)"
"(let-values(((rhs202_551)"
"(let-values(((s_552)"
"(car"
" s_550)))"
" s_552))"
"(()"
"(let-values(((s_553)"
"(cdr"
" s_550)))"
"(let-values(((s_554)"
"(if(syntax?$1"
" s_553)"
"(syntax-e$1"
" s_553)"
" s_553)))"
"(if(null?"
" s_554)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_522))))))"
"(values"
" rhs202_551))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_522))))))"
"(values"
" id200_533"
" rhs201_534))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_522))))))"
"(values"
" define-syntaxes197_527"
" id198_528"
" rhs199_529))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_522)))))"
"(values"
" #t"
" define-syntaxes194_523"
" id195_524"
" rhs196_525)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_514)"
"(remove-use-site-scopes"
" id195_500"
" body-ctx_319)))"
"(let-values((()"
"(begin"
"(let-values(((obs_555)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_555"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_555"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_514"
" rhs196_501))))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((new-dups_515)"
"(let-values(((ids204_556)"
" ids_514)"
"((phase205_557)"
" phase_293)"
"((exp-body206_558)"
" exp-body_343)"
"((dups207_559)"
" dups_327))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids204_556"
" phase205_557"
" exp-body206_558"
" dups207_559"
" #t)"
"(check-no-duplicate-ids10.1"
" ids204_556"
" phase205_557"
" exp-body206_558"
" dups207_559)))))"
"(let-values(((counter_516)"
"(root-expand-context-counter"
" ctx_285)))"
"(let-values(((keys_517)"
"(alt-reverse"
"(let-values(((lst_560)"
" ids_514))"
"(begin"
"(if(list?"
" lst_560)"
"(void)"
"(let-values()"
"(in-list"
" lst_560)))"
"((letrec-values(((for-loop_561)"
"(lambda(fold-var_562"
" lst_563)"
"(if(pair?"
" lst_563)"
"(let-values(((id_564)"
"(unsafe-car"
" lst_563)))"
"(if #t"
"(let-values(((fold-var_565)"
"(let-values(((fold-var_566)"
" fold-var_562))"
"(let-values(((fold-var_567)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:560:24_568)"
" add-local-binding!35.1)"
"((id208_569)"
" id_564)"
"((phase209_570)"
" phase_293)"
"((counter210_571)"
" counter_516)"
"((frame-id211_572)"
" frame-id_294)"
"((exp-body212_573)"
" exp-body_343))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id211_572"
" #t"
" exp-body212_573"
" #t"
" id208_569"
" phase209_570"
" counter210_571)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:560:24_568"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id211_572"
" exp-body212_573)"
" id208_569"
" phase209_570"
" counter210_571))))"
" fold-var_566))))"
"(values"
" fold-var_567)))))"
"(if #t"
"(for-loop_561"
" fold-var_565"
"(unsafe-cdr"
" lst_563))"
" fold-var_565))"
" fold-var_562))"
" fold-var_562))))"
" for-loop_561)"
" null"
" lst_560))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_574)"
"(expand-context-observer"
" body-ctx_319)))"
"(if obs_574"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_574"
" 'prepare-env))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((vals_518)"
"(eval-for-syntaxes-binding"
" rhs196_501"
" ids_514"
" body-ctx_319)))"
"(let-values(((extended-env_519)"
"(let-values(((lst_575)"
" keys_517)"
"((lst_576)"
" vals_518)"
"((lst_577)"
" ids_514))"
"(begin"
"(if(list?"
" lst_575)"
"(void)"
"(let-values()"
"(in-list"
" lst_575)))"
"(if(list?"
" lst_576)"
"(void)"
"(let-values()"
"(in-list"
" lst_576)))"
"(if(list?"
" lst_577)"
"(void)"
"(let-values()"
"(in-list"
" lst_577)))"
"((letrec-values(((for-loop_578)"
"(lambda(env_579"
" lst_580"
" lst_581"
" lst_582)"
"(if(if(pair?"
" lst_580)"
"(if(pair?"
" lst_581)"
"(pair?"
" lst_582)"
" #f)"
" #f)"
"(let-values(((key_583)"
"(unsafe-car"
" lst_580))"
"((val_584)"
"(unsafe-car"
" lst_581))"
"((id_585)"
"(unsafe-car"
" lst_582)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((env_586)"
"(let-values(((env_587)"
" env_579))"
"(let-values(((env_588)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_584"
" id_585"
" phase_293)"
"(env-extend"
" env_587"
" key_583"
" val_584)))))"
"(values"
" env_588)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_578"
" env_586"
"(unsafe-cdr"
" lst_580)"
"(unsafe-cdr"
" lst_581)"
"(unsafe-cdr"
" lst_582))"
" env_586))"
" env_579))"
" env_579))))"
" for-loop_578)"
"(expand-context-env"
" body-ctx_319)"
" lst_575"
" lst_576"
" lst_577)))))"
"(loop_318"
"(let-values(((the-struct_589)"
" body-ctx_319))"
"(if(expand-context?"
" the-struct_589)"
"(let-values(((env213_590)"
" extended-env_519))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_589)"
"(root-expand-context-post-expansion-scope"
" the-struct_589)"
"(root-expand-context-top-level-bind-scope"
" the-struct_589)"
"(root-expand-context-all-scopes-stx"
" the-struct_589)"
"(root-expand-context-use-site-scopes"
" the-struct_589)"
"(root-expand-context-defined-syms"
" the-struct_589)"
"(root-expand-context-frame-id"
" the-struct_589)"
"(root-expand-context-counter"
" the-struct_589)"
"(root-expand-context-lift-key"
" the-struct_589)"
"(expand-context-context"
" the-struct_589)"
"(expand-context-phase"
" the-struct_589)"
"(expand-context-namespace"
" the-struct_589)"
" env213_590"
"(expand-context-user-env"
" the-struct_589)"
"(expand-context-post-expansion-scope-action"
" the-struct_589)"
"(expand-context-scopes"
" the-struct_589)"
"(expand-context-def-ctx-scopes"
" the-struct_589)"
"(expand-context-reference-records"
" the-struct_589)"
"(expand-context-only-immediate?"
" the-struct_589)"
"(expand-context-just-once?"
" the-struct_589)"
"(expand-context-module-begin-k"
" the-struct_589)"
"(expand-context-need-eventually-defined"
" the-struct_589)"
"(expand-context-allow-unbound?"
" the-struct_589)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_589)"
"(expand-context-stops"
" the-struct_589)"
"(expand-context-current-introduction-scopes"
" the-struct_589)"
"(expand-context-declared-submodule-names"
" the-struct_589)"
"(expand-context-lifts"
" the-struct_589)"
"(expand-context-lift-envs"
" the-struct_589)"
"(expand-context-module-lifts"
" the-struct_589)"
"(expand-context-require-lifts"
" the-struct_589)"
"(expand-context-to-module-lifts"
" the-struct_589)"
"(expand-context-requires+provides"
" the-struct_589)"
"(expand-context-name"
" the-struct_589)"
"(expand-context-observer"
" the-struct_589)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                      \"expand-context?\""
" the-struct_589)))"
"(cdr bodys_320)"
" done-bodys_321"
" val-idss_322"
" val-keyss_323"
" val-rhss_324"
" track-stxs_325"
"(cons"
" ids_514"
" trans-idss_326)"
" new-dups_515))))))))))))"
"(let-values()"
"(if stratified?_288"
"(let-values()"
"(loop_318"
" body-ctx_319"
" null"
"(append"
"(alt-reverse bodys_320)"
"(cons exp-body_343 done-bodys_321))"
" val-idss_322"
" val-keyss_323"
" val-rhss_324"
" track-stxs_325"
" trans-idss_326"
" dups_327))"
"(let-values()"
"(loop_318"
" body-ctx_319"
"(cdr bodys_320)"
"(cons exp-body_343 done-bodys_321)"
" val-idss_322"
" val-keyss_323"
" val-rhss_324"
" track-stxs_325"
" trans-idss_326"
" dups_327))))))))))))))))"
" loop_318)"
" body-ctx_296"
" init-bodys_292"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table))))))))))))))))))))"
"(define-values"
"(unpack29.1)"
"(lambda(given-kws_591 given-args_592 bodys26_593 ctx27_594)"
"(let-values(((disarmed-source19_595)(car given-args_592))"
"((given-kws_596)(cdr given-kws_591))"
"((given-args_597)(cdr given-args_592)))"
"(let-values(((source18_598)(car given-args_597))"
"((given-kws_599)(cdr given-kws_596))"
"((given-args_600)(cdr given-args_597)))"
"(let-values(((stratified?24_601)(if(pair? given-kws_599)(eq? '#:stratified?(car given-kws_599)) #f)))"
"(let-values(((stratified?20_602)(if stratified?24_601(car given-args_600)(void)))"
"((given-kws_603)(if stratified?24_601(cdr given-kws_599) given-kws_599))"
"((given-args_604)(if stratified?24_601(cdr given-args_600) given-args_600)))"
"(let-values(((track?25_605)(pair? given-kws_603)))"
"(let-values(((track?21_606)(if track?25_605(car given-args_604)(void))))"
"(expand-body28.1"
" disarmed-source19_595"
" source18_598"
" stratified?20_602"
" stratified?24_601"
" track?21_606"
" track?25_605"
" bodys26_593"
" ctx27_594)))))))))"
"(define-values"
"(expand-body30.1)"
"(lifted/21.1"
"(lambda(given-kws_607 given-argc_608)"
"(if(= given-argc_608 4)"
"(subsets? '(#:disarmed-source #:source) given-kws_607 '(#:disarmed-source #:source #:stratified? #:track?))"
" #f))"
"(case-lambda"
"((given-kws_609 given-args_610 bodys_611 ctx_612)(unpack29.1 given-kws_609 given-args_610 bodys_611 ctx_612)))"
" '(#:disarmed-source #:source)"
" '(#:disarmed-source #:source #:stratified? #:track?)))"
"(define-values"
"(lifted/22.1)"
"(make-required"
" 'finish-expanding-body"
"(case-lambda"
"((self_613"
" body-ctx_614"
" frame-id_615"
" def-ctx-scopes_616"
" val-idss_617"
" val-keyss_618"
" val-rhss_619"
" track-stxs_620"
" done-bodys_621)"
"(apply"
" missing-kw"
" self_613"
" body-ctx_614"
" frame-id_615"
" def-ctx-scopes_616"
" val-idss_617"
" val-keyss_618"
" val-rhss_619"
" track-stxs_620"
" done-bodys_621"
" null)))"
" #f"
" #f))"
"(define-values"
"(finish-expanding-body47.1)"
"(lambda(disarmed-source32_622"
" source31_623"
" stratified?33_624"
" track?34_625"
" body-ctx39_626"
" frame-id40_627"
" def-ctx-scopes41_628"
" val-idss42_629"
" val-keyss43_630"
" val-rhss44_631"
" track-stxs45_632"
" done-bodys46_633)"
"(let-values(((body-ctx_634) body-ctx39_626))"
"(let-values(((frame-id_635) frame-id40_627))"
"(let-values(((def-ctx-scopes_636) def-ctx-scopes41_628))"
"(let-values(((val-idss_637) val-idss42_629))"
"(let-values(((val-keyss_638) val-keyss43_630))"
"(let-values(((val-rhss_639) val-rhss44_631))"
"(let-values(((track-stxs_640) track-stxs45_632))"
"(let-values(((done-bodys_641) done-bodys46_633))"
"(let-values(((s_642) source31_623))"
"(let-values(((disarmed-s_643) disarmed-source32_622))"
"(let-values(((stratified?_644) stratified?33_624))"
"(let-values(((track?_645) track?34_625))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_641)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                   \"no expression after a sequence of internal definitions\""
" s_642))"
"(void))"
"(values))))"
"(let-values(((s-core-stx_646)"
"(syntax-shift-phase-level$1"
" core-stx"
"(expand-context-phase body-ctx_634))))"
"(let-values(((finish-ctx_647)"
"(let-values(((the-struct_649)"
"(accumulate-def-ctx-scopes"
" body-ctx_634"
" def-ctx-scopes_636)))"
"(if(expand-context? the-struct_649)"
"(let-values(((context214_650) 'expression)"
"((use-site-scopes215_651) #f)"
"((scopes216_652)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_634))"
"(expand-context-scopes body-ctx_634)))"
"((only-immediate?217_653) #f)"
"((def-ctx-scopes218_654) #f)"
"((post-expansion-scope219_655) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_649)"
" post-expansion-scope219_655"
"(root-expand-context-top-level-bind-scope the-struct_649)"
"(root-expand-context-all-scopes-stx the-struct_649)"
" use-site-scopes215_651"
"(root-expand-context-defined-syms the-struct_649)"
"(root-expand-context-frame-id the-struct_649)"
"(root-expand-context-counter the-struct_649)"
"(root-expand-context-lift-key the-struct_649)"
" context214_650"
"(expand-context-phase the-struct_649)"
"(expand-context-namespace the-struct_649)"
"(expand-context-env the-struct_649)"
"(expand-context-user-env the-struct_649)"
"(expand-context-post-expansion-scope-action the-struct_649)"
" scopes216_652"
" def-ctx-scopes218_654"
"(expand-context-reference-records the-struct_649)"
" only-immediate?217_653"
"(expand-context-just-once? the-struct_649)"
"(expand-context-module-begin-k the-struct_649)"
"(expand-context-need-eventually-defined the-struct_649)"
"(expand-context-allow-unbound? the-struct_649)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_649)"
"(expand-context-stops the-struct_649)"
"(expand-context-current-introduction-scopes the-struct_649)"
"(expand-context-declared-submodule-names the-struct_649)"
"(expand-context-lifts the-struct_649)"
"(expand-context-lift-envs the-struct_649)"
"(expand-context-module-lifts the-struct_649)"
"(expand-context-require-lifts the-struct_649)"
"(expand-context-to-module-lifts the-struct_649)"
"(expand-context-requires+provides the-struct_649)"
"(expand-context-name the-struct_649)"
"(expand-context-observer the-struct_649)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"expand-context?\""
" the-struct_649)))))"
"(let-values(((finish-bodys_648)"
"(lambda(track?_656)"
"(let-values(((block->list?_657)(null? val-idss_637)))"
"(begin"
"(if block->list?_657"
"(void)"
"(let-values()"
"(let-values(((obs_658)"
"(expand-context-observer body-ctx_634)))"
"(if obs_658"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_658 'next-group))"
"(void)))"
"(void)))))"
"(if(null?(cdr done-bodys_641))"
"(let-values()"
"(let-values(((last-ctx_659)"
"(let-values(((the-struct_661)"
" finish-ctx_647))"
"(if(expand-context? the-struct_661)"
"(let-values(((reference-records220_662)"
"(cdr"
"(expand-context-reference-records"
" finish-ctx_647))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_661)"
"(root-expand-context-post-expansion-scope"
" the-struct_661)"
"(root-expand-context-top-level-bind-scope"
" the-struct_661)"
"(root-expand-context-all-scopes-stx"
" the-struct_661)"
"(root-expand-context-use-site-scopes"
" the-struct_661)"
"(root-expand-context-defined-syms"
" the-struct_661)"
"(root-expand-context-frame-id"
" the-struct_661)"
"(root-expand-context-counter"
" the-struct_661)"
"(root-expand-context-lift-key"
" the-struct_661)"
"(expand-context-context the-struct_661)"
"(expand-context-phase the-struct_661)"
"(expand-context-namespace"
" the-struct_661)"
"(expand-context-env the-struct_661)"
"(expand-context-user-env"
" the-struct_661)"
"(expand-context-post-expansion-scope-action"
" the-struct_661)"
"(expand-context-scopes the-struct_661)"
"(expand-context-def-ctx-scopes"
" the-struct_661)"
" reference-records220_662"
"(expand-context-only-immediate?"
" the-struct_661)"
"(expand-context-just-once?"
" the-struct_661)"
"(expand-context-module-begin-k"
" the-struct_661)"
"(expand-context-need-eventually-defined"
" the-struct_661)"
"(expand-context-allow-unbound?"
" the-struct_661)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_661)"
"(expand-context-stops the-struct_661)"
"(expand-context-current-introduction-scopes"
" the-struct_661)"
"(expand-context-declared-submodule-names"
" the-struct_661)"
"(expand-context-lifts the-struct_661)"
"(expand-context-lift-envs"
" the-struct_661)"
"(expand-context-module-lifts"
" the-struct_661)"
"(expand-context-require-lifts"
" the-struct_661)"
"(expand-context-to-module-lifts"
" the-struct_661)"
"(expand-context-requires+provides"
" the-struct_661)"
"(expand-context-name the-struct_661)"
"(expand-context-observer"
" the-struct_661)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                               \"expand-context?\""
" the-struct_661)))))"
"(let-values(((exp-body_660)"
"(let-values(((temp221_663)"
"(car done-bodys_641))"
"((last-ctx222_664)"
" last-ctx_659))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp221_663"
" last-ctx222_664)"
"(expand7.1"
" temp221_663"
" last-ctx222_664)))))"
"(if track?_656"
"(let-values(((result-s_665)"
"(syntax-track-origin$1"
" exp-body_660"
" s_642)))"
"(begin"
"(let-values(((obs_666)"
"(expand-context-observer"
" body-ctx_634)))"
"(if obs_666"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_666"
" 'tag"
" result-s_665))"
"(void)))"
"(void)))"
" result-s_665))"
" exp-body_660))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if block->list?_657"
"(void)"
"(let-values()"
"(let-values(((obs_668)"
"(expand-context-observer"
" body-ctx_634)))"
"(if obs_668"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_668"
" 'prim-begin))"
"(void)))"
"(void)))))"
"(values))))"
"(letrec-values((()"
"(begin"
"(let-values(((obs_669)"
"(expand-context-observer"
" body-ctx_634)))"
"(if obs_669"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_669"
" 'enter-list"
" exp-bodys_667))"
"(void)))"
"(void)))"
"(values)))"
"((exp-bodys_667)"
"(alt-reverse"
"(let-values(((lst_670) done-bodys_641))"
"(begin"
"(if(list? lst_670)"
"(void)"
"(let-values()(in-list lst_670)))"
"((letrec-values(((for-loop_671)"
"(lambda(fold-var_672"
" lst_673)"
"(if(pair?"
" lst_673)"
"(let-values(((body_674)"
"(unsafe-car"
" lst_673)))"
"(if #t"
"(let-values(((fold-var_675)"
"(let-values(((fold-var_676)"
" fold-var_672))"
"(let-values(((fold-var_677)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_678)"
"(expand-context-observer"
" body-ctx_634)))"
"(if obs_678"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_678"
" 'next))"
"(void)))"
"(void)))"
"(let-values(((body227_679)"
" body_674)"
"((finish-ctx228_680)"
" finish-ctx_647))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" body227_679"
" finish-ctx228_680)"
"(expand7.1"
" body227_679"
" finish-ctx228_680)))))"
" fold-var_676))))"
"(values"
" fold-var_677)))))"
"(if #t"
"(for-loop_671"
" fold-var_675"
"(unsafe-cdr"
" lst_673))"
" fold-var_675))"
" fold-var_672))"
" fold-var_672))))"
" for-loop_671)"
" null"
" lst_670))))))"
"(begin"
"(let-values(((obs_681)"
"(expand-context-observer body-ctx_634)))"
"(if obs_681"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_681"
" 'exit-list"
" exp-bodys_667))"
"(void)))"
"(void)))"
"(let-values(((...nder/expand/main.rkt:647:6_682)"
" rebuild102.1)"
"((track?223_683) track?_656)"
"((s224_684) s_642)"
"((disarmed-s225_685) disarmed-s_643)"
"((temp226_686)"
"(list*"
"(datum->syntax$1 s-core-stx_646 'begin)"
" exp-bodys_667)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" track?223_683"
" #t"
" s224_684"
" disarmed-s225_685"
" temp226_686)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:647:6_682"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?223_683)"
" s224_684"
" disarmed-s225_685"
" temp226_686)))))))))))))"
"(if(null? val-idss_637)"
"(let-values()(finish-bodys_648 track?_645))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:659:4_687)"
" expand-and-split-bindings-by-reference70.1)"
"((val-idss229_688) val-idss_637)"
"((val-keyss230_689) val-keyss_638)"
"((val-rhss231_690) val-rhss_639)"
"((track-stxs232_691) track-stxs_640)"
"((temp233_692)(not stratified?_644))"
"((frame-id234_693) frame-id_635)"
"((finish-ctx235_694) finish-ctx_647)"
"((s236_695) s_642)"
"((disarmed-s237_696) disarmed-s_643)"
"((finish-bodys238_697) finish-bodys_648)"
"((track?239_698) track?_645))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-and-split-bindings-by-reference70.1))"
"(expand-and-split-bindings-by-reference68.1"
" finish-ctx235_694"
" disarmed-s237_696"
" frame-id234_693"
" finish-bodys238_697"
" s236_695"
" temp233_692"
" track?239_698"
" val-idss229_688"
" val-keyss230_689"
" val-rhss231_690"
" track-stxs232_691)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:659:4_687"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" finish-ctx235_694"
" disarmed-s237_696"
" frame-id234_693"
" finish-bodys238_697"
" s236_695"
" temp233_692"
" track?239_698)"
" val-idss229_688"
" val-keyss230_689"
" val-rhss231_690"
" track-stxs232_691))))))))))))))))))))))))"
"(define-values"
"(unpack48.1)"
"(lambda(given-kws_699"
" given-args_700"
" body-ctx39_701"
" frame-id40_702"
" def-ctx-scopes41_703"
" val-idss42_704"
" val-keyss43_705"
" val-rhss44_706"
" track-stxs45_707"
" done-bodys46_708)"
"(let-values(((disarmed-source32_709)(car given-args_700))"
"((given-kws_710)(cdr given-kws_699))"
"((given-args_711)(cdr given-args_700)))"
"(let-values(((source31_712)(car given-args_711))"
"((given-kws_713)(cdr given-kws_710))"
"((given-args_714)(cdr given-args_711)))"
"(let-values(((stratified?33_715)(car given-args_714))"
"((given-kws_716)(cdr given-kws_713))"
"((given-args_717)(cdr given-args_714)))"
"(let-values(((track?34_718)(car given-args_717)))"
"(finish-expanding-body47.1"
" disarmed-source32_709"
" source31_712"
" stratified?33_715"
" track?34_718"
" body-ctx39_701"
" frame-id40_702"
" def-ctx-scopes41_703"
" val-idss42_704"
" val-keyss43_705"
" val-rhss44_706"
" track-stxs45_707"
" done-bodys46_708)))))))"
"(define-values"
"(finish-expanding-body49.1)"
"(lifted/22.1"
"(lambda(given-kws_719 given-argc_720)"
"(if(= given-argc_720 10)"
"(let-values(((l2_721) given-kws_719))"
"(if(pair? l2_721)"
"(if(eq?(car l2_721) '#:disarmed-source)"
"(let-values(((l2_722)(cdr l2_721)))"
"(if(pair? l2_722)"
"(if(eq?(car l2_722) '#:source)"
"(let-values(((l2_723)(cdr l2_722)))"
"(if(pair? l2_723)"
"(if(eq?(car l2_723) '#:stratified?)"
"(let-values(((l2_724)(cdr l2_723)))"
"(if(pair? l2_724)(if(eq?(car l2_724) '#:track?)(null?(cdr l2_724)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_725"
" given-args_726"
" body-ctx_727"
" frame-id_728"
" def-ctx-scopes_729"
" val-idss_730"
" val-keyss_731"
" val-rhss_732"
" track-stxs_733"
" done-bodys_734)"
"(unpack48.1"
" given-kws_725"
" given-args_726"
" body-ctx_727"
" frame-id_728"
" def-ctx-scopes_729"
" val-idss_730"
" val-keyss_731"
" val-rhss_732"
" track-stxs_733"
" done-bodys_734)))"
" '(#:disarmed-source #:source #:stratified? #:track?)"
" '(#:disarmed-source #:source #:stratified? #:track?)))"
"(define-values"
"(lifted/23.1)"
"(make-required"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_735 idss_736 keyss_737 rhss_738 track-stxs_739)"
"(apply missing-kw self_735 idss_736 keyss_737 rhss_738 track-stxs_739 null)))"
" #f"
" #f))"
"(define-values"
"(expand-and-split-bindings-by-reference68.1)"
"(lambda(ctx52_740"
" disarmed-source54_741"
" frame-id51_742"
" get-body55_743"
" source53_744"
" split?50_745"
" track?56_746"
" idss64_747"
" keyss65_748"
" rhss66_749"
" track-stxs67_750)"
"(let-values(((idss_751) idss64_747))"
"(let-values(((keyss_752) keyss65_748))"
"(let-values(((rhss_753) rhss66_749))"
"(let-values(((track-stxs_754) track-stxs67_750))"
"(let-values(((split?_755) split?50_745))"
"(let-values(((frame-id_756) frame-id51_742))"
"(let-values(((ctx_757) ctx52_740))"
"(let-values(((s_758) source53_744))"
"(let-values(((disarmed-s_759) disarmed-source54_741))"
"(let-values(((get-body_760) get-body55_743))"
"(let-values(((track?_761) track?56_746))"
"(let-values()"
"(let-values(((s-core-stx_762)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_757))))"
"((letrec-values(((loop_763)"
"(lambda(idss_764"
" keyss_765"
" rhss_766"
" track-stxs_767"
" accum-idss_768"
" accum-rhss_769"
" accum-track-stxs_770"
" track?_771)"
"(if(null? idss_764)"
"(let-values()"
"(if(null? accum-idss_768)"
"(let-values()(get-body_760 track?_771))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:686:8_772)"
" rebuild102.1)"
"((track?240_773) track?_771)"
"((s241_774) s_758)"
"((disarmed-s242_775) disarmed-s_759)"
"((temp243_776)"
"(list"
"(datum->syntax$1 s-core-stx_762 'letrec-values)"
"(build-clauses"
" accum-idss_768"
" accum-rhss_769"
" accum-track-stxs_770)"
"(get-body_760 #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" track?240_773"
" #t"
" s241_774"
" disarmed-s242_775"
" temp243_776)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:686:8_772"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?240_773)"
" s241_774"
" disarmed-s242_775"
" temp243_776))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_782)"
"(expand-context-observer ctx_757)))"
"(if obs_782"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_782 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ids_777)(car idss_764)))"
"(let-values(((expanded-rhs_778)"
"(let-values(((temp244_783)(car rhss_766))"
"((temp245_784)"
"(as-named-context"
" ctx_757"
" ids_777)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp244_783 temp245_784)"
"(expand7.1 temp244_783 temp245_784)))))"
"(let-values(((track-stx_779)(car track-stxs_767)))"
"(let-values(((local-or-forward-references?_780)"
"(reference-record-forward-references?"
" frame-id_756)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_756"
"(car keyss_765))"
"(values))))"
"(let-values(((forward-references?_781)"
"(reference-record-forward-references?"
" frame-id_756)))"
"(if(if(not local-or-forward-references?_780)"
" split?_755"
" #f)"
"(let-values()"
"(begin"
"(if(null? accum-idss_768)"
"(void)"
"(let-values()"
"(error"
"                                                                               \"internal error: accumulated ids not empty\")))"
"(let-values(((...nder/expand/main.rkt:706:8_785)"
" rebuild102.1)"
"((track?246_786) track?_771)"
"((s247_787) s_758)"
"((disarmed-s248_788)"
" disarmed-s_759)"
"((temp249_789)"
"(list"
"(datum->syntax$1"
" s-core-stx_762"
" 'let-values)"
"(list"
"(build-clause"
" ids_777"
" expanded-rhs_778"
" track-stx_779))"
"(loop_763"
"(cdr idss_764)"
"(cdr keyss_765)"
"(cdr rhss_766)"
"(cdr track-stxs_767)"
" null"
" null"
" null"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" track?246_786"
" #t"
" s247_787"
" disarmed-s248_788"
" temp249_789)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:706:8_785"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?246_786)"
" s247_787"
" disarmed-s248_788"
" temp249_789)))))"
"(if(if(not forward-references?_781)"
"(let-values(((or-part_790) split?_755))"
"(if or-part_790"
" or-part_790"
"(null?(cdr idss_764))))"
" #f)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:716:8_791)"
" rebuild102.1)"
"((track?250_792) track?_771)"
"((s251_793) s_758)"
"((disarmed-s252_794)"
" disarmed-s_759)"
"((temp253_795)"
"(list"
"(datum->syntax$1"
" s-core-stx_762"
" 'letrec-values)"
"(build-clauses"
"(cons ids_777 accum-idss_768)"
"(cons"
" expanded-rhs_778"
" accum-rhss_769)"
"(cons"
" track-stx_779"
" accum-track-stxs_770))"
"(loop_763"
"(cdr idss_764)"
"(cdr keyss_765)"
"(cdr rhss_766)"
"(cdr track-stxs_767)"
" null"
" null"
" null"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" track?250_792"
" #t"
" s251_793"
" disarmed-s252_794"
" temp253_795)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:716:8_791"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?250_792)"
" s251_793"
" disarmed-s252_794"
" temp253_795))))"
"(let-values()"
"(loop_763"
"(cdr idss_764)"
"(cdr keyss_765)"
"(cdr rhss_766)"
"(cdr track-stxs_767)"
"(cons ids_777 accum-idss_768)"
"(cons expanded-rhs_778 accum-rhss_769)"
"(cons track-stx_779 accum-track-stxs_770)"
" track?_771))))))))))))))))"
" loop_763)"
" idss_751"
" keyss_752"
" rhss_753"
" track-stxs_754"
" null"
" null"
" null"
" track?_761))))))))))))))))"
"(define-values"
"(unpack69.1)"
"(lambda(given-kws_796 given-args_797 idss64_798 keyss65_799 rhss66_800 track-stxs67_801)"
"(let-values(((ctx52_802)(car given-args_797))"
"((given-kws_803)(cdr given-kws_796))"
"((given-args_804)(cdr given-args_797)))"
"(let-values(((disarmed-source54_805)(car given-args_804))"
"((given-kws_806)(cdr given-kws_803))"
"((given-args_807)(cdr given-args_804)))"
"(let-values(((frame-id51_808)(car given-args_807))"
"((given-kws_809)(cdr given-kws_806))"
"((given-args_810)(cdr given-args_807)))"
"(let-values(((get-body55_811)(car given-args_810))"
"((given-kws_812)(cdr given-kws_809))"
"((given-args_813)(cdr given-args_810)))"
"(let-values(((source53_814)(car given-args_813))"
"((given-kws_815)(cdr given-kws_812))"
"((given-args_816)(cdr given-args_813)))"
"(let-values(((split?50_817)(car given-args_816))"
"((given-kws_818)(cdr given-kws_815))"
"((given-args_819)(cdr given-args_816)))"
"(let-values(((track?56_820)(car given-args_819)))"
"(expand-and-split-bindings-by-reference68.1"
" ctx52_802"
" disarmed-source54_805"
" frame-id51_808"
" get-body55_811"
" source53_814"
" split?50_817"
" track?56_820"
" idss64_798"
" keyss65_799"
" rhss66_800"
" track-stxs67_801))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference70.1)"
"(lifted/23.1"
"(lambda(given-kws_821 given-argc_822)"
"(if(= given-argc_822 6)"
"(let-values(((l2_823) given-kws_821))"
"(if(pair? l2_823)"
"(if(eq?(car l2_823) '#:ctx)"
"(let-values(((l2_824)(cdr l2_823)))"
"(if(pair? l2_824)"
"(if(eq?(car l2_824) '#:disarmed-source)"
"(let-values(((l2_825)(cdr l2_824)))"
"(if(pair? l2_825)"
"(if(eq?(car l2_825) '#:frame-id)"
"(let-values(((l2_826)(cdr l2_825)))"
"(if(pair? l2_826)"
"(if(eq?(car l2_826) '#:get-body)"
"(let-values(((l2_827)(cdr l2_826)))"
"(if(pair? l2_827)"
"(if(eq?(car l2_827) '#:source)"
"(let-values(((l2_828)(cdr l2_827)))"
"(if(pair? l2_828)"
"(if(eq?(car l2_828) '#:split?)"
"(let-values(((l2_829)(cdr l2_828)))"
"(if(pair? l2_829)"
"(if(eq?(car l2_829) '#:track?)(null?(cdr l2_829)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_830 given-args_831 idss_832 keyss_833 rhss_834 track-stxs_835)"
"(unpack69.1 given-kws_830 given-args_831 idss_832 keyss_833 rhss_834 track-stxs_835)))"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_836 accum-rhss_837 accum-track-stxs_838)"
"(map2 build-clause(alt-reverse accum-idss_836)(alt-reverse accum-rhss_837)(alt-reverse accum-track-stxs_838))))"
"(define-values"
"(build-clause)"
"(lambda(ids_839 rhs_840 track-stx_841)"
"(let-values(((clause_842)(datum->syntax$1 #f(list ids_839 rhs_840))))"
"(if track-stx_841(syntax-track-origin$1 clause_842 track-stx_841) clause_842))))"
"(define-values"
"(no-binds)"
"(lambda(expr_843 s_844 phase_845)"
"(let-values(((s-core-stx_846)(syntax-shift-phase-level$1 core-stx phase_845)))"
"(let-values(((s-runtime-stx_847)(syntax-shift-phase-level$1 runtime-stx phase_845)))"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1 s-core-stx_846 'begin)"
" expr_843"
"(list(datum->syntax$1 s-core-stx_846 '#%app)(datum->syntax$1 s-runtime-stx_847 'values)))"
" s_844)))))"
"(define-values"
"(expand/capture-lifts79.1)"
"(lambda(begin-form?72_848"
" begin-form?75_849"
" expand-lifts?71_850"
" expand-lifts?74_851"
" lift-key73_852"
" lift-key76_853"
" s77_854"
" ctx78_855)"
"(let-values(((s_856) s77_854))"
"(let-values(((ctx_857) ctx78_855))"
"(let-values(((expand-lifts?_858)(if expand-lifts?74_851 expand-lifts?71_850 #f)))"
"(let-values(((begin-form?_859)(if begin-form?75_849 begin-form?72_848 #f)))"
"(let-values(((lift-key_860)(if lift-key76_853 lift-key73_852(generate-lift-key))))"
"(let-values()"
"(let-values(((context_861)(expand-context-context ctx_857)))"
"(let-values(((phase_862)(expand-context-phase ctx_857)))"
"(let-values(((local?_863)(not begin-form?_859)))"
"((letrec-values(((loop_864)"
"(lambda(s_865)"
"(let-values(((lift-env_866)(if local?_863(box empty-env) #f)))"
"(let-values(((lift-ctx_867)"
"(let-values(((...nder/expand/main.rkt:769:21_871)"
" make-lift-context8.1)"
"((temp254_872)"
"(if local?_863"
"(make-local-lift"
" lift-env_866"
"(root-expand-context-counter ctx_857))"
"(make-top-level-lift ctx_857)))"
"((temp255_873)"
"(if(not local?_863)"
"(eq? context_861 'module)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 temp255_873 #t temp254_872)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:769:21_871"
" keyword-procedure-extract"
" '(#:module*-ok?)"
" 3)"
" '(#:module*-ok?)"
"(list temp255_873)"
" temp254_872)))))"
"(let-values(((capture-ctx_868)"
"(let-values(((the-struct_874) ctx_857))"
"(if(expand-context? the-struct_874)"
"(let-values(((lift-key256_875) lift-key_860)"
"((lifts257_876) lift-ctx_867)"
"((lift-envs258_877)"
"(if local?_863"
"(cons"
" lift-env_866"
"(expand-context-lift-envs ctx_857))"
"(expand-context-lift-envs ctx_857)))"
"((module-lifts259_878)"
"(if(let-values(((or-part_879)"
" local?_863))"
"(if or-part_879"
" or-part_879"
"(not"
"(memq"
" context_861"
" '(top-level module)))))"
"(expand-context-module-lifts ctx_857)"
" lift-ctx_867)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_874)"
"(root-expand-context-post-expansion-scope"
" the-struct_874)"
"(root-expand-context-top-level-bind-scope"
" the-struct_874)"
"(root-expand-context-all-scopes-stx the-struct_874)"
"(root-expand-context-use-site-scopes the-struct_874)"
"(root-expand-context-defined-syms the-struct_874)"
"(root-expand-context-frame-id the-struct_874)"
"(root-expand-context-counter the-struct_874)"
" lift-key256_875"
"(expand-context-context the-struct_874)"
"(expand-context-phase the-struct_874)"
"(expand-context-namespace the-struct_874)"
"(expand-context-env the-struct_874)"
"(expand-context-user-env the-struct_874)"
"(expand-context-post-expansion-scope-action"
" the-struct_874)"
"(expand-context-scopes the-struct_874)"
"(expand-context-def-ctx-scopes the-struct_874)"
"(expand-context-reference-records the-struct_874)"
"(expand-context-only-immediate? the-struct_874)"
"(expand-context-just-once? the-struct_874)"
"(expand-context-module-begin-k the-struct_874)"
"(expand-context-need-eventually-defined"
" the-struct_874)"
"(expand-context-allow-unbound? the-struct_874)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_874)"
"(expand-context-stops the-struct_874)"
"(expand-context-current-introduction-scopes"
" the-struct_874)"
"(expand-context-declared-submodule-names"
" the-struct_874)"
" lifts257_876"
" lift-envs258_877"
" module-lifts259_878"
"(expand-context-require-lifts the-struct_874)"
"(expand-context-to-module-lifts the-struct_874)"
"(expand-context-requires+provides the-struct_874)"
"(expand-context-name the-struct_874)"
"(expand-context-observer the-struct_874)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"expand-context?\""
" the-struct_874)))))"
"(let-values(((exp-s_869)"
"(let-values(((s260_880) s_865)"
"((capture-ctx261_881) capture-ctx_868))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f s260_880 capture-ctx261_881)"
"(expand7.1 s260_880 capture-ctx261_881)))))"
"(let-values(((lifts_870)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_868))))"
"(if(null? lifts_870)"
"(let-values() exp-s_869)"
"(let-values()"
"(let-values(((with-lifts-s_882)"
"(if begin-form?_859"
"(let-values(((lifts262_883) lifts_870)"
"((exp-s263_884) exp-s_869)"
"((s264_885) s_865)"
"((phase265_886) phase_862))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" lifts262_883"
" exp-s263_884"
" s264_885"
" phase265_886)"
"(wrap-lifts-as-begin17.1"
" lifts262_883"
" exp-s263_884"
" s264_885"
" phase265_886)))"
"(wrap-lifts-as-let"
" lifts_870"
" exp-s_869"
" s_865"
" phase_862))))"
"(begin"
"(let-values(((obs_887)(expand-context-observer ctx_857)))"
"(if obs_887"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_887"
" 'lift-loop"
" with-lifts-s_882))"
"(void)))"
"(void)))"
"(if expand-lifts?_858"
"(loop_864 with-lifts-s_882)"
" with-lifts-s_882)))))))))))))"
" loop_864)"
" s_856))))))))))))"
"(define-values"
"(unpack80.1)"
"(lambda(given-kws_888 given-args_889 s77_890 ctx78_891)"
"(let-values(((begin-form?75_892)(if(pair? given-kws_888)(eq? '#:begin-form?(car given-kws_888)) #f)))"
"(let-values(((begin-form?72_893)(if begin-form?75_892(car given-args_889)(void)))"
"((given-kws_894)(if begin-form?75_892(cdr given-kws_888) given-kws_888))"
"((given-args_895)(if begin-form?75_892(cdr given-args_889) given-args_889)))"
"(let-values(((expand-lifts?74_896)(if(pair? given-kws_894)(eq? '#:expand-lifts?(car given-kws_894)) #f)))"
"(let-values(((expand-lifts?71_897)(if expand-lifts?74_896(car given-args_895)(void)))"
"((given-kws_898)(if expand-lifts?74_896(cdr given-kws_894) given-kws_894))"
"((given-args_899)(if expand-lifts?74_896(cdr given-args_895) given-args_895)))"
"(let-values(((lift-key76_900)(pair? given-kws_898)))"
"(let-values(((lift-key73_901)(if lift-key76_900(car given-args_899)(void))))"
"(expand/capture-lifts79.1"
" begin-form?72_893"
" begin-form?75_892"
" expand-lifts?71_897"
" expand-lifts?74_896"
" lift-key73_901"
" lift-key76_900"
" s77_890"
" ctx78_891)))))))))"
"(define-values"
"(expand/capture-lifts81.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_902 given-argc_903)"
"(if(= given-argc_903 4)"
"(let-values(((l1_904) given-kws_902))"
"(let-values(((l1_905)(if(null? l1_904) l1_904(if(eq?(car l1_904) '#:begin-form?)(cdr l1_904) l1_904))))"
"(let-values(((l1_906) l1_905))"
"(let-values(((l1_907)"
"(if(null? l1_906) l1_906(if(eq?(car l1_906) '#:expand-lifts?)(cdr l1_906) l1_906))))"
"(let-values(((l1_908) l1_907))"
"(let-values(((l1_909)"
"(if(null? l1_908) l1_908(if(eq?(car l1_908) '#:lift-key)(cdr l1_908) l1_908))))"
"(null? l1_909)))))))"
" #f))"
"(case-lambda((given-kws_910 given-args_911 s_912 ctx_913)(unpack80.1 given-kws_910 given-args_911 s_912 ctx_913)))"
" null"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
"(let-values(((expand/capture-lifts_914)(case-lambda((s_915 ctx_916)(unpack80.1 null null s_915 ctx_916)))))"
" expand/capture-lifts_914)))"
"(define-values"
"(expand-transformer92.1)"
"(lambda(begin-form?83_917"
" begin-form?87_918"
" context82_919"
" context86_920"
" expand-lifts?84_921"
" expand-lifts?88_922"
" lift-key85_923"
" lift-key89_924"
" s90_925"
" ctx91_926)"
"(let-values(((s_927) s90_925))"
"(let-values(((ctx_928) ctx91_926))"
"(let-values(((context_929)(if context86_920 context82_919 'expression)))"
"(let-values(((begin-form?_930)(if begin-form?87_918 begin-form?83_917 #f)))"
"(let-values(((expand-lifts?_931)(if expand-lifts?88_922 expand-lifts?84_921 #t)))"
"(let-values(((lift-key_932)(if lift-key89_924 lift-key85_923(generate-lift-key))))"
"(let-values()"
"(let-values(((phase_933)(add1(expand-context-phase ctx_928))))"
"(let-values(((ns_934)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_928) phase_933)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_934 phase_933)(values))))"
"(let-values(((trans-ctx_935)"
"(let-values(((the-struct_936) ctx_928))"
"(if(expand-context? the-struct_936)"
"(let-values(((context271_937) context_929)"
"((scopes272_938) null)"
"((phase273_939) phase_933)"
"((namespace274_940) ns_934)"
"((env275_941) empty-env)"
"((only-immediate?276_942) #f)"
"((def-ctx-scopes277_943) #f)"
"((post-expansion-scope278_944) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_936)"
" post-expansion-scope278_944"
"(root-expand-context-top-level-bind-scope the-struct_936)"
"(root-expand-context-all-scopes-stx the-struct_936)"
"(root-expand-context-use-site-scopes the-struct_936)"
"(root-expand-context-defined-syms the-struct_936)"
"(root-expand-context-frame-id the-struct_936)"
"(root-expand-context-counter the-struct_936)"
"(root-expand-context-lift-key the-struct_936)"
" context271_937"
" phase273_939"
" namespace274_940"
" env275_941"
"(expand-context-user-env the-struct_936)"
"(expand-context-post-expansion-scope-action the-struct_936)"
" scopes272_938"
" def-ctx-scopes277_943"
"(expand-context-reference-records the-struct_936)"
" only-immediate?276_942"
"(expand-context-just-once? the-struct_936)"
"(expand-context-module-begin-k the-struct_936)"
"(expand-context-need-eventually-defined the-struct_936)"
"(expand-context-allow-unbound? the-struct_936)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_936)"
"(expand-context-stops the-struct_936)"
"(expand-context-current-introduction-scopes the-struct_936)"
"(expand-context-declared-submodule-names the-struct_936)"
"(expand-context-lifts the-struct_936)"
"(expand-context-lift-envs the-struct_936)"
"(expand-context-module-lifts the-struct_936)"
"(expand-context-require-lifts the-struct_936)"
"(expand-context-to-module-lifts the-struct_936)"
"(expand-context-requires+provides the-struct_936)"
"(expand-context-name the-struct_936)"
"(expand-context-observer the-struct_936)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_936)))))"
"(let-values(((...nder/expand/main.rkt:830:2_945) expand/capture-lifts81.1)"
"((s266_946) s_927)"
"((trans-ctx267_947) trans-ctx_935)"
"((expand-lifts?268_948) expand-lifts?_931)"
"((begin-form?269_949) begin-form?_930)"
"((lift-key270_950) lift-key_932))"
"(if(variable-reference-constant?(#%variable-reference expand/capture-lifts81.1))"
"(expand/capture-lifts79.1"
" begin-form?269_949"
" #t"
" expand-lifts?268_948"
" #t"
" lift-key270_950"
" #t"
" s266_946"
" trans-ctx267_947)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:830:2_945"
" keyword-procedure-extract"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
" 4)"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
"(list begin-form?269_949 expand-lifts?268_948 lift-key270_950)"
" s266_946"
" trans-ctx267_947))))))))))))))))"
"(define-values"
"(unpack93.1)"
"(lambda(given-kws_951 given-args_952 s90_953 ctx91_954)"
"(let-values(((begin-form?87_955)(if(pair? given-kws_951)(eq? '#:begin-form?(car given-kws_951)) #f)))"
"(let-values(((begin-form?83_956)(if begin-form?87_955(car given-args_952)(void)))"
"((given-kws_957)(if begin-form?87_955(cdr given-kws_951) given-kws_951))"
"((given-args_958)(if begin-form?87_955(cdr given-args_952) given-args_952)))"
"(let-values(((context86_959)(if(pair? given-kws_957)(eq? '#:context(car given-kws_957)) #f)))"
"(let-values(((context82_960)(if context86_959(car given-args_958)(void)))"
"((given-kws_961)(if context86_959(cdr given-kws_957) given-kws_957))"
"((given-args_962)(if context86_959(cdr given-args_958) given-args_958)))"
"(let-values(((expand-lifts?88_963)"
"(if(pair? given-kws_961)(eq? '#:expand-lifts?(car given-kws_961)) #f)))"
"(let-values(((expand-lifts?84_964)(if expand-lifts?88_963(car given-args_962)(void)))"
"((given-kws_965)(if expand-lifts?88_963(cdr given-kws_961) given-kws_961))"
"((given-args_966)(if expand-lifts?88_963(cdr given-args_962) given-args_962)))"
"(let-values(((lift-key89_967)(pair? given-kws_965)))"
"(let-values(((lift-key85_968)(if lift-key89_967(car given-args_966)(void))))"
"(expand-transformer92.1"
" begin-form?83_956"
" begin-form?87_955"
" context82_960"
" context86_959"
" expand-lifts?84_964"
" expand-lifts?88_963"
" lift-key85_968"
" lift-key89_967"
" s90_953"
" ctx91_954)))))))))))"
"(define-values"
"(expand-transformer94.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_969 given-argc_970)"
"(if(= given-argc_970 4)"
"(let-values(((l1_971) given-kws_969))"
"(let-values(((l1_972)(if(null? l1_971) l1_971(if(eq?(car l1_971) '#:begin-form?)(cdr l1_971) l1_971))))"
"(let-values(((l1_973) l1_972))"
"(let-values(((l1_974)(if(null? l1_973) l1_973(if(eq?(car l1_973) '#:context)(cdr l1_973) l1_973))))"
"(let-values(((l1_975) l1_974))"
"(let-values(((l1_976)"
"(if(null? l1_975) l1_975(if(eq?(car l1_975) '#:expand-lifts?)(cdr l1_975) l1_975))))"
"(let-values(((l1_977) l1_976))"
"(let-values(((l1_978)"
"(if(null? l1_977) l1_977(if(eq?(car l1_977) '#:lift-key)(cdr l1_977) l1_977))))"
"(null? l1_978)))))))))"
" #f))"
"(case-lambda((given-kws_979 given-args_980 s_981 ctx_982)(unpack93.1 given-kws_979 given-args_980 s_981 ctx_982)))"
" null"
" '(#:begin-form? #:context #:expand-lifts? #:lift-key)"
"(let-values(((expand-transformer_983)(case-lambda((s_984 ctx_985)(unpack93.1 null null s_984 ctx_985)))))"
" expand-transformer_983)))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_986 ids_987 ctx_988)"
"(let-values(((exp-rhs_989)"
"(let-values(((rhs279_991) rhs_986)((temp280_992)(as-named-context ctx_988 ids_987)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer94.1))"
"(expand-transformer92.1 #f #f #f #f #f #f #f #f rhs279_991 temp280_992)"
"(expand-transformer94.1 rhs279_991 temp280_992)))))"
"(let-values(((phase_990)(add1(expand-context-phase ctx_988))))"
"(values"
" exp-rhs_989"
"(eval-for-bindings"
" ids_987"
" exp-rhs_989"
" phase_990"
"(namespace->namespace-at-phase(expand-context-namespace ctx_988) phase_990)"
" ctx_988))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_993 ids_994 ctx_995)"
"(let-values(((exp-rhs_996 vals_997)(expand+eval-for-syntaxes-binding rhs_993 ids_994 ctx_995))) vals_997)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_998 s_999 phase_1000 ns_1001 ctx_1002)"
"(let-values(((compiled_1003)"
"(compile-single"
" s_999"
"(let-values(((...nder/expand/main.rkt:861:37_1005) make-compile-context16.1)"
"((ns281_1006) ns_1001)"
"((phase282_1007) phase_1000))"
"(if(variable-reference-constant?(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1 #f #f #f #f #f #f ns281_1006 #t phase282_1007 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:861:37_1005"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list ns281_1006 phase282_1007)))))))"
"(let-values(((vals_1004)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_1002"
" 1/current-namespace"
" ns_1001"
" eval-jit-enabled"
" #f)"
"(let-values()(eval-single-top compiled_1003 ns_1001))))"
" list)))"
"(begin"
"(if(=(length vals_1004)(length ids_998))"
"(void)"
"(let-values()"
"              (error \"wrong number of results (\" (length vals_1004) \"vs.\" (length ids_998) \")\" \"from\" s_999)))"
" vals_1004)))))"
"(define-values"
"(rebuild100.1)"
"(lambda(track?95_1008 track?96_1009 orig-s97_1010 disarmed-orig-s98_1011 new99_1012)"
"(let-values(((orig-s_1013) orig-s97_1010))"
"(let-values(((disarmed-orig-s_1014) disarmed-orig-s98_1011))"
"(let-values(((new_1015) new99_1012))"
"(let-values(((track?_1016)(if track?96_1009 track?95_1008 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1 disarmed-orig-s_1014 new_1015 orig-s_1013(if track?_1016 orig-s_1013 #f))"
" orig-s_1013))))))))"
"(define-values"
"(unpack101.1)"
"(lambda(given-kws_1017 given-args_1018 orig-s97_1019 disarmed-orig-s98_1020 new99_1021)"
"(let-values(((track?96_1022)(pair? given-kws_1017)))"
"(let-values(((track?95_1023)(if track?96_1022(car given-args_1018)(void))))"
"(rebuild100.1 track?95_1023 track?96_1022 orig-s97_1019 disarmed-orig-s98_1020 new99_1021)))))"
"(define-values"
"(rebuild102.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_1024 given-argc_1025)"
"(if(= given-argc_1025 5)"
"(let-values(((l1_1026) given-kws_1024))"
"(let-values(((l1_1027)(if(null? l1_1026) l1_1026(if(eq?(car l1_1026) '#:track?)(cdr l1_1026) l1_1026))))"
"(null? l1_1027)))"
" #f))"
"(case-lambda"
"((given-kws_1028 given-args_1029 orig-s_1030 disarmed-orig-s_1031 new_1032)"
"(unpack101.1 given-kws_1028 given-args_1029 orig-s_1030 disarmed-orig-s_1031 new_1032)))"
" null"
" '(#:track?)"
"(let-values(((rebuild_1033)"
"(case-lambda"
"((orig-s_1034 disarmed-orig-s_1035 new_1036)"
"(unpack101.1 null null orig-s_1034 disarmed-orig-s_1035 new_1036)))))"
" rebuild_1033)))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_1037 trans-idss_1038)"
"(if(null? trans-idss_1038)"
"(let-values() s_1037)"
"(let-values()"
"(syntax-property$1"
" s_1037"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_1038)"
"(let-values(((or-part_1039)(syntax-property$1 s_1037 'disappeared-binding)))"
"(if or-part_1039 or-part_1039 null))))))))"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= 1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$1 p-core-stx_3 'module*) phase_2 phase_2)"
" #f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(alt-reverse"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((sym_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_3 sym_8))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context))))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 0 'frame-id)"
"(make-struct-field-accessor -ref_5 1 'scope)"
"(make-struct-field-accessor -ref_5 2 'add-scope?)"
"(make-struct-field-accessor -ref_5 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_38 make-_39 ?_40 -ref_41 -set!_42)"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin))))"
"(values"
" struct:_38"
" make-_39"
" ?_40"
"(make-struct-field-accessor -ref_41 0 'id)"
"(make-struct-field-accessor -ref_41 1 'sym)"
"(make-struct-field-accessor -ref_41 2 'value)"
"(make-struct-field-accessor -ref_41 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_74)"
"(lambda(parent-ctx3_75 add-scope?4_76 parent-ctx5_77 add-scope?6_78)"
"(let-values(((parent-ctx_79)(if parent-ctx5_77 parent-ctx3_75 #f)))"
"(let-values(((add-scope?_80)(if add-scope?6_78 add-scope?4_76 #t)))"
"(let-values()"
"(let-values(((ctx_81)"
"(let-values(((temp40_85) 'syntax-local-make-definition-context))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp40_85 #t)"
"(get-current-expand-context8.1 temp40_85)))))"
"(let-values(((frame-id_82)"
"(let-values(((or-part_86)(root-expand-context-frame-id ctx_81)))"
"(if or-part_86 or-part_86(gensym)))))"
"(let-values(((sc_83)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_84)(expand-context-def-ctx-scopes ctx_81)))"
"(begin"
"(if def-ctx-scopes_84"
"(void)"
"(let-values()"
"                                      (error \"internal error: no box to accumulate definition-context scopes\")))"
"(set-box! def-ctx-scopes_84(cons sc_83(unbox def-ctx-scopes_84)))"
"(internal-definition-context1.1 frame-id_82 sc_83 add-scope?_80(box null)))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_74 #f #f #f #f))"
"((parent-ctx_87 add-scope?4_88)(syntax-local-make-definition-context7_74 parent-ctx_87 add-scope?4_88 #t #t))"
"((parent-ctx3_89)(syntax-local-make-definition-context7_74 parent-ctx3_89 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_90 s_91 intdef_92)"
"(let-values((()"
"(begin"
"(if(if(list? ids_90)(andmap2 identifier? ids_90) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_90)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_100)(not s_91)))(if or-part_100 or-part_100(syntax?$1 s_91)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_91)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_92)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                             \"internal-definition-context?\""
" intdef_92)))"
"(values))))"
"(let-values(((ctx_93)"
"(let-values(((temp41_101) 'local-expand))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp41_101 #t)"
"(get-current-expand-context8.1 temp41_101)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_102)(expand-context-observer ctx_93)))"
"(if obs_102"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_102 'local-bind ids_90))(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_94)(expand-context-phase ctx_93)))"
"(let-values(((intdef-env_95)(add-intdef-bindings(expand-context-env ctx_93) intdef_92)))"
"(let-values(((intdef-ids_96)"
"(alt-reverse"
"(let-values(((lst_103) ids_90))"
"(begin"
"(if(list? lst_103)(void)(let-values()(in-list lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(fold-var_105 lst_106)"
"(if(pair? lst_106)"
"(let-values(((id_107)(unsafe-car lst_106)))"
"(if #t"
"(let-values(((fold-var_108)"
"(let-values(((fold-var_109) fold-var_105))"
"(let-values(((fold-var_110)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_111)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_107"
" ctx_93)"
" ctx_93)))"
"(let-values(((...finition-context.rkt:66:23_112)"
" add-intdef-scopes23.1)"
"((pre-id42_113)"
" pre-id_111)"
"((intdef43_114)"
" intdef_92)"
"((temp44_115)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp44_115"
" #t"
" pre-id42_113"
" intdef43_114)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:66:23_112"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list"
" temp44_115)"
" pre-id42_113"
" intdef43_114)))))"
" fold-var_109))))"
"(values fold-var_110)))))"
"(if #t"
"(for-loop_104 fold-var_108(unsafe-cdr lst_106))"
" fold-var_108))"
" fold-var_105))"
" fold-var_105))))"
" for-loop_104)"
" null"
" lst_103))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_116)(expand-context-observer ctx_93)))"
"(if obs_116"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_116 'rename-list intdef-ids_96))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((syms_97)"
"(alt-reverse"
"(let-values(((lst_117) intdef-ids_96))"
"(begin"
"(if(list? lst_117)(void)(let-values()(in-list lst_117)))"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 lst_120)"
"(if(pair? lst_120)"
"(let-values(((intdef-id_121)(unsafe-car lst_120)))"
"(if #t"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123)"
" fold-var_119))"
"(let-values(((fold-var_124)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...finition-context.rkt:69:17_125)"
" add-local-binding!35.1)"
"((intdef-id45_126)"
" intdef-id_121)"
"((phase46_127)"
" phase_94)"
"((temp47_128)"
"(root-expand-context-counter"
" ctx_93))"
"((temp48_129)"
"(internal-definition-context-frame-id"
" intdef_92)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" temp48_129"
" #t"
" #f"
" #f"
" intdef-id45_126"
" phase46_127"
" temp47_128)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:69:17_125"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list"
" temp48_129)"
" intdef-id45_126"
" phase46_127"
" temp47_128))))"
" fold-var_123))))"
"(values fold-var_124)))))"
"(if #t"
"(for-loop_118 fold-var_122(unsafe-cdr lst_120))"
" fold-var_122))"
" fold-var_119))"
" fold-var_119))))"
" for-loop_118)"
" null"
" lst_117))))))"
"(let-values(((vals_98)"
"(if s_91"
"(let-values()"
"(let-values(((input-s_130)"
"(flip-introduction-scopes"
"(let-values(((...finition-context.rkt:74:48_132)"
" add-intdef-scopes23.1)"
"((s49_133) s_91)"
"((intdef50_134) intdef_92)"
"((temp51_135) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp51_135"
" #t"
" s49_133"
" intdef50_134)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:74:48_132"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list temp51_135)"
" s49_133"
" intdef50_134)))"
" ctx_93)))"
"(let-values(((tmp-env_131)"
"(let-values(((lst_136) syms_97))"
"(begin"
"(if(list? lst_136)"
"(void)"
"(let-values()(in-list lst_136)))"
"((letrec-values(((for-loop_137)"
"(lambda(env_138 lst_139)"
"(if(pair? lst_139)"
"(let-values(((sym_140)"
"(unsafe-car lst_139)))"
"(if #t"
"(let-values(((env_141)"
"(let-values(((env_142)"
" env_138))"
"(let-values(((env_143)"
"(let-values()"
"(hash-set"
" env_142"
" sym_140"
" variable))))"
"(values"
" env_143)))))"
"(if #t"
"(for-loop_137"
" env_141"
"(unsafe-cdr lst_139))"
" env_141))"
" env_138))"
" env_138))))"
" for-loop_137)"
" intdef-env_95"
" lst_136)))))"
"(eval-for-syntaxes-binding"
" input-s_130"
" ids_90"
"(let-values(((...finition-context.rkt:79:33_144)"
" make-local-expand-context35.1)"
"((temp52_145)"
"(let-values(((the-struct_148) ctx_93))"
"(if(expand-context? the-struct_148)"
"(let-values(((env55_149) tmp-env_131))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_148)"
"(root-expand-context-post-expansion-scope"
" the-struct_148)"
"(root-expand-context-top-level-bind-scope"
" the-struct_148)"
"(root-expand-context-all-scopes-stx the-struct_148)"
"(root-expand-context-use-site-scopes the-struct_148)"
"(root-expand-context-defined-syms the-struct_148)"
"(root-expand-context-frame-id the-struct_148)"
"(root-expand-context-counter the-struct_148)"
"(root-expand-context-lift-key the-struct_148)"
"(expand-context-context the-struct_148)"
"(expand-context-phase the-struct_148)"
"(expand-context-namespace the-struct_148)"
" env55_149"
"(expand-context-user-env the-struct_148)"
"(expand-context-post-expansion-scope-action"
" the-struct_148)"
"(expand-context-scopes the-struct_148)"
"(expand-context-def-ctx-scopes the-struct_148)"
"(expand-context-reference-records the-struct_148)"
"(expand-context-only-immediate? the-struct_148)"
"(expand-context-just-once? the-struct_148)"
"(expand-context-module-begin-k the-struct_148)"
"(expand-context-need-eventually-defined"
" the-struct_148)"
"(expand-context-allow-unbound? the-struct_148)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_148)"
"(expand-context-stops the-struct_148)"
"(expand-context-current-introduction-scopes"
" the-struct_148)"
"(expand-context-declared-submodule-names"
" the-struct_148)"
"(expand-context-lifts the-struct_148)"
"(expand-context-lift-envs the-struct_148)"
"(expand-context-module-lifts the-struct_148)"
"(expand-context-require-lifts the-struct_148)"
"(expand-context-to-module-lifts the-struct_148)"
"(expand-context-requires+provides the-struct_148)"
"(expand-context-name the-struct_148)"
"(expand-context-observer the-struct_148)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_148))))"
"((temp53_146) 'expression)"
"((intdef54_147) intdef_92))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" temp53_146"
" intdef54_147"
" #f"
" #f"
" #f"
" #f"
" temp52_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:79:33_144"
" keyword-procedure-extract"
" '(#:context #:intdefs)"
" 3)"
" '(#:context #:intdefs)"
"(list temp53_146 intdef54_147)"
" temp52_145)))))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_150) ids_90))"
"(begin"
"(if(list? lst_150)(void)(let-values()(in-list lst_150)))"
"((letrec-values(((for-loop_151)"
"(lambda(fold-var_152 lst_153)"
"(if(pair? lst_153)"
"(let-values(((id_154)(unsafe-car lst_153)))"
"(if #t"
"(let-values(((fold-var_155)"
"(let-values(((fold-var_156)"
" fold-var_152))"
"(let-values(((fold-var_157)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_156))))"
"(values fold-var_157)))))"
"(if #t"
"(for-loop_151"
" fold-var_155"
"(unsafe-cdr lst_153))"
" fold-var_155))"
" fold-var_152))"
" fold-var_152))))"
" for-loop_151)"
" null"
" lst_150))))))))"
"(let-values(((env-mixins_99)(internal-definition-context-env-mixins intdef_92)))"
"(begin"
"(set-box!"
" env-mixins_99"
"(append"
"(alt-reverse"
"(let-values(((lst_158) intdef-ids_96)((lst_159) syms_97)((lst_160) vals_98))"
"(begin"
"(if(list? lst_158)(void)(let-values()(in-list lst_158)))"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"(if(list? lst_160)(void)(let-values()(in-list lst_160)))"
"((letrec-values(((for-loop_161)"
"(lambda(fold-var_162 lst_163 lst_164 lst_165)"
"(if(if(pair? lst_163)"
"(if(pair? lst_164)(pair? lst_165) #f)"
" #f)"
"(let-values(((intdef-id_166)(unsafe-car lst_163))"
"((sym_167)(unsafe-car lst_164))"
"((val_168)(unsafe-car lst_165)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_169)"
"(let-values(((fold-var_170) fold-var_162))"
"(let-values(((fold-var_171)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_168"
" intdef-id_166"
" phase_94)"
"(env-mixin2.1"
" intdef-id_166"
" sym_167"
" val_168"
"(make-weak-hasheq))))"
" fold-var_170))))"
"(values fold-var_171)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_161"
" fold-var_169"
"(unsafe-cdr lst_163)"
"(unsafe-cdr lst_164)"
"(unsafe-cdr lst_165))"
" fold-var_169))"
" fold-var_162))"
" fold-var_162))))"
" for-loop_161)"
" null"
" lst_158"
" lst_159"
" lst_160))))"
"(unbox env-mixins_99)))"
"(let-values(((obs_172)(expand-context-observer ctx_93)))"
"(if obs_172"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_172 'exit-local-bind))(void)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_173)"
"(begin"
"(if(1/internal-definition-context? intdef_173)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_173)))"
"(alt-reverse"
"(let-values(((lst_174)(unbox(internal-definition-context-env-mixins intdef_173))))"
"(begin"
"(if(list? lst_174)(void)(let-values()(in-list lst_174)))"
"((letrec-values(((for-loop_175)"
"(lambda(fold-var_176 lst_177)"
"(if(pair? lst_177)"
"(let-values(((env-mixin_178)(unsafe-car lst_177)))"
"(if #t"
"(let-values(((fold-var_179)"
"(let-values(((fold-var_180) fold-var_176))"
"(let-values(((fold-var_181)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_178))"
" fold-var_180))))"
"(values fold-var_181)))))"
"(if #t(for-loop_175 fold-var_179(unsafe-cdr lst_177)) fold-var_179))"
" fold-var_176))"
" fold-var_176))))"
" for-loop_175)"
" null"
" lst_174)))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_182)"
"(lambda(intdef11_183 s12_184 mode9_185 mode10_186)"
"(let-values(((intdef_187) intdef11_183))"
"(let-values(((s_188) s12_184))"
"(let-values(((mode_189)(if mode10_186 mode9_185 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_187)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_187)))"
"(if(syntax?$1 s_188)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_188)))"
"(let-values(((...finition-context.rkt:107:2_190) add-intdef-scopes23.1)"
"((s56_191) s_188)"
"((intdef57_192) intdef_187)"
"((temp58_193)"
"(let-values(((tmp_194) mode_189))"
"(if(equal? tmp_194 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_194 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_194 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_189))))))))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 temp58_193 #t #f #f s56_191 intdef57_192)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:107:2_190"
" keyword-procedure-extract"
" '(#:action)"
" 4)"
" '(#:action)"
"(list temp58_193)"
" s56_191"
" intdef57_192)))))))))))"
"(case-lambda"
"((intdef_195 s_196)(internal-definition-context-introduce13_182 intdef_195 s_196 #f #f))"
"((intdef_197 s_198 mode9_199)(internal-definition-context-introduce13_182 intdef_197 s_198 mode9_199 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_200)"
"(begin"
"(if(1/internal-definition-context? intdef_200)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_200)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_201 intdef_202)"
"(begin"
"(if(identifier? id_201)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_201)))"
"(if(let-values(((or-part_203)(1/internal-definition-context? intdef_202)))"
"(if or-part_203 or-part_203(if(list? intdef_202)(andmap2 1/internal-definition-context? intdef_202) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_202)))"
"(let-values(((pos->vals_204 pos-next_205 init_206 pos-cont?_207 val-cont?_208 all-cont?_209)"
"(make-sequence '(intdef)(in-intdefs intdef_202))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_210)"
"(lambda(id_211 pos_212)"
"(if(if pos-cont?_207(pos-cont?_207 pos_212) #t)"
"(let-values(((intdef_213)(pos->vals_204 pos_212)))"
"(if(if val-cont?_208(val-cont?_208 intdef_213) #t)"
"(let-values(((id_214)"
"(let-values(((id_215) id_211))"
"(let-values(((id_216)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_213"
" id_215"
" 'remove))))"
"(values id_216)))))"
"(if(if all-cont?_209(all-cont?_209 pos_212 intdef_213) #t)"
"(for-loop_210 id_214(pos-next_205 pos_212))"
" id_214))"
" id_211))"
" id_211))))"
" for-loop_210)"
" id_201"
" init_206))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_217)"
"(if(not intdefs_217)"
"(let-values()(in-list null))"
"(if(list? intdefs_217)"
"(let-values()(in-list(alt-reverse intdefs_217)))"
"(let-values()(in-value intdefs_217))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_218 intdefs_219)"
"(let-values(((pos->vals_220 pos-next_221 init_222 pos-cont?_223 val-cont?_224 all-cont?_225)"
"(make-sequence '(intdef)(in-intdefs intdefs_219))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_226)"
"(lambda(env_227 pos_228)"
"(if(if pos-cont?_223(pos-cont?_223 pos_228) #t)"
"(let-values(((intdef_229)(pos->vals_220 pos_228)))"
"(if(if val-cont?_224(val-cont?_224 intdef_229) #t)"
"(let-values(((env_230)"
"(let-values(((env_231) env_227))"
"(let-values(((env_232)"
"(let-values()"
"(let-values(((env-mixins_233)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_229))))"
"((letrec-values(((loop_234)"
"(lambda(env_235 env-mixins_236)"
"(if(null? env-mixins_236)"
"(let-values() env_235)"
"(let-values()"
"(let-values(((env-mixin_237)"
"(car"
" env-mixins_236)))"
"(let-values(((or-part_238)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" #f)))"
"(if or-part_238"
" or-part_238"
"(let-values(((new-env_239)"
"(env-extend"
"(loop_234"
" env_235"
"(cdr"
" env-mixins_236))"
"(env-mixin-sym"
" env-mixin_237)"
"(env-mixin-value"
" env-mixin_237))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" new-env_239)"
" new-env_239))))))))))"
" loop_234)"
" env_231"
" env-mixins_233)))))"
"(values env_232)))))"
"(if(if all-cont?_225(all-cont?_225 pos_228 intdef_229) #t)"
"(for-loop_226 env_230(pos-next_221 pos_228))"
" env_230))"
" env_227))"
" env_227))))"
" for-loop_226)"
" env_218"
" init_222)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_240 action18_241 always?15_242 always?17_243 s19_244 intdefs20_245)"
"(let-values(((s_246) s19_244))"
"(let-values(((intdefs_247) intdefs20_245))"
"(let-values(((always?_248)(if always?17_243 always?15_242 #f)))"
"(let-values(((action_249)(if action18_241 action16_240 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_250 pos-next_251 init_252 pos-cont?_253 val-cont?_254 all-cont?_255)"
"(make-sequence '(intdef)(in-intdefs intdefs_247))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_256)"
"(lambda(s_257 pos_258)"
"(if(if pos-cont?_253(pos-cont?_253 pos_258) #t)"
"(let-values(((intdef_259)(pos->vals_250 pos_258)))"
"(if(if val-cont?_254(val-cont?_254 intdef_259) #t)"
"(let-values(((s_260)"
"(let-values(((s_261) s_257))"
"(if(let-values(((or-part_262) always?_248))"
"(if or-part_262"
" or-part_262"
"(internal-definition-context-add-scope?"
" intdef_259)))"
"(let-values(((s_263) s_261))"
"(let-values(((s_264)"
"(let-values()"
"(action_249"
" s_263"
"(internal-definition-context-scope"
" intdef_259)))))"
"(values s_264)))"
" s_261))))"
"(if(if all-cont?_255(all-cont?_255 pos_258 intdef_259) #t)"
"(for-loop_256 s_260(pos-next_251 pos_258))"
" s_260))"
" s_257))"
" s_257))))"
" for-loop_256)"
" s_246"
" init_252))))))))))"
"(define-values"
"(unpack22.1)"
"(lambda(given-kws_265 given-args_266 s19_267 intdefs20_268)"
"(let-values(((action18_269)(if(pair? given-kws_265)(eq? '#:action(car given-kws_265)) #f)))"
"(let-values(((action16_270)(if action18_269(car given-args_266)(void)))"
"((given-kws_271)(if action18_269(cdr given-kws_265) given-kws_265))"
"((given-args_272)(if action18_269(cdr given-args_266) given-args_266)))"
"(let-values(((always?17_273)(pair? given-kws_271)))"
"(let-values(((always?15_274)(if always?17_273(car given-args_272)(void))))"
"(add-intdef-scopes21.1 action16_270 action18_269 always?15_274 always?17_273 s19_267 intdefs20_268)))))))"
"(define-values"
"(add-intdef-scopes23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_275 given-argc_276)"
"(if(= given-argc_276 4)"
"(let-values(((l1_277) given-kws_275))"
"(let-values(((l1_278)(if(null? l1_277) l1_277(if(eq?(car l1_277) '#:action)(cdr l1_277) l1_277))))"
"(let-values(((l1_279) l1_278))"
"(let-values(((l1_280)(if(null? l1_279) l1_279(if(eq?(car l1_279) '#:always?)(cdr l1_279) l1_279))))"
"(null? l1_280)))))"
" #f))"
"(case-lambda"
"((given-kws_281 given-args_282 s_283 intdefs_284)(unpack22.1 given-kws_281 given-args_282 s_283 intdefs_284)))"
" null"
" '(#:action #:always?)"
"(let-values(((add-intdef-scopes_285)(case-lambda((s_286 intdefs_287)(unpack22.1 null null s_286 intdefs_287)))))"
" add-intdef-scopes_285)))"
"(define-values"
"(lifted/1.1$9)"
"(make-required"
" 'make-local-expand-context"
"(case-lambda((self_288 ctx_289)(apply missing-kw self_288 ctx_289 null)))"
" #f"
" #f))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_290 intdefs26_291 phase25_292 phase29_293 stop-ids27_294 stop-ids31_295 ctx32_296)"
"(let-values(((ctx_297) ctx32_296))"
"(let-values(((context_298) context24_290))"
"(let-values(((phase_299)(if phase29_293 phase25_292(expand-context-phase ctx_297))))"
"(let-values(((intdefs_300) intdefs26_291))"
"(let-values(((stop-ids_301)(if stop-ids31_295 stop-ids27_294 #f)))"
"(let-values()"
"(let-values(((same-kind?_302)"
"(let-values(((or-part_305)(eq? context_298(expand-context-context ctx_297))))"
"(if or-part_305"
" or-part_305"
"(if(list? context_298)(list?(expand-context-context ctx_297)) #f)))))"
"(let-values(((all-stop-ids_303)"
"(if stop-ids_301(stop-ids->all-stop-ids stop-ids_301 phase_299) #f)))"
"(let-values(((def-ctx-scopes_304)"
"(if(expand-context-def-ctx-scopes ctx_297)"
"(unbox(expand-context-def-ctx-scopes ctx_297))"
" null)))"
"(let-values(((the-struct_306) ctx_297))"
"(if(expand-context? the-struct_306)"
"(let-values(((context59_307) context_298)"
"((env60_308)(add-intdef-bindings(expand-context-env ctx_297) intdefs_300))"
"((use-site-scopes61_309)"
"(if(let-values(((or-part_320)(eq? context_298 'module)))"
"(if or-part_320 or-part_320(list? context_298)))"
"(let-values(((or-part_321)(root-expand-context-use-site-scopes ctx_297)))"
"(if or-part_321 or-part_321(box null)))"
" #f))"
"((frame-id62_310)"
"(if same-kind?_302"
"(let-values()(root-expand-context-frame-id ctx_297))"
"(if(pair? intdefs_300)"
"(let-values()(internal-definition-context-frame-id(car intdefs_300)))"
"(let-values() #f))))"
"((post-expansion-scope63_311)"
"(if intdefs_300"
"(new-scope 'macro)"
"(if same-kind?_302"
"(if(memq context_298 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_297)"
" #f)"
" #f)))"
"((post-expansion-scope-action64_312)"
"(if intdefs_300"
"(lambda(s_322 placeholder-sc_323)"
"(let-values(((s72_324) s_322)((intdefs73_325) intdefs_300))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f s72_324 intdefs73_325)"
"(add-intdef-scopes23.1 s72_324 intdefs73_325))))"
"(expand-context-post-expansion-scope-action ctx_297)))"
"((scopes65_313)(append def-ctx-scopes_304(expand-context-scopes ctx_297)))"
"((only-immediate?66_314)(not stop-ids_301))"
"((just-once?67_315) #f)"
"((preserve-#%expression-and-do-not-add-#%top?68_316) #t)"
"((stops69_317)"
"(free-id-set"
" phase_299"
"(let-values(((or-part_326) all-stop-ids_303))"
"(if or-part_326 or-part_326 null))))"
"((current-introduction-scopes70_318) null)"
"((all-scopes-stx71_319)"
"(let-values(((...finition-context.rkt:218:31_327) add-intdef-scopes23.1)"
"((temp74_328)(root-expand-context-all-scopes-stx ctx_297))"
"((intdefs75_329) intdefs_300)"
"((temp76_330) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f temp76_330 #t temp74_328 intdefs75_329)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:218:31_327"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list temp76_330)"
" temp74_328"
" intdefs75_329)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_306)"
" post-expansion-scope63_311"
"(root-expand-context-top-level-bind-scope the-struct_306)"
" all-scopes-stx71_319"
" use-site-scopes61_309"
"(root-expand-context-defined-syms the-struct_306)"
" frame-id62_310"
"(root-expand-context-counter the-struct_306)"
"(root-expand-context-lift-key the-struct_306)"
" context59_307"
"(expand-context-phase the-struct_306)"
"(expand-context-namespace the-struct_306)"
" env60_308"
"(expand-context-user-env the-struct_306)"
" post-expansion-scope-action64_312"
" scopes65_313"
"(expand-context-def-ctx-scopes the-struct_306)"
"(expand-context-reference-records the-struct_306)"
" only-immediate?66_314"
" just-once?67_315"
"(expand-context-module-begin-k the-struct_306)"
"(expand-context-need-eventually-defined the-struct_306)"
"(expand-context-allow-unbound? the-struct_306)"
" preserve-#%expression-and-do-not-add-#%top?68_316"
" stops69_317"
" current-introduction-scopes70_318"
"(expand-context-declared-submodule-names the-struct_306)"
"(expand-context-lifts the-struct_306)"
"(expand-context-lift-envs the-struct_306)"
"(expand-context-module-lifts the-struct_306)"
"(expand-context-require-lifts the-struct_306)"
"(expand-context-to-module-lifts the-struct_306)"
"(expand-context-requires+provides the-struct_306)"
"(expand-context-name the-struct_306)"
"(expand-context-observer the-struct_306)))"
"                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_306))))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_331 given-args_332 ctx32_333)"
"(let-values(((context24_334)(car given-args_332))"
"((given-kws_335)(cdr given-kws_331))"
"((given-args_336)(cdr given-args_332)))"
"(let-values(((intdefs26_337)(car given-args_336))"
"((given-kws_338)(cdr given-kws_335))"
"((given-args_339)(cdr given-args_336)))"
"(let-values(((phase29_340)(if(pair? given-kws_338)(eq? '#:phase(car given-kws_338)) #f)))"
"(let-values(((phase25_341)(if phase29_340(car given-args_339)(void)))"
"((given-kws_342)(if phase29_340(cdr given-kws_338) given-kws_338))"
"((given-args_343)(if phase29_340(cdr given-args_339) given-args_339)))"
"(let-values(((stop-ids31_344)(pair? given-kws_342)))"
"(let-values(((stop-ids27_345)(if stop-ids31_344(car given-args_343)(void))))"
"(make-local-expand-context33.1"
" context24_334"
" intdefs26_337"
" phase25_341"
" phase29_340"
" stop-ids27_345"
" stop-ids31_344"
" ctx32_333)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/1.1$9"
"(lambda(given-kws_346 given-argc_347)"
"(if(= given-argc_347 3)"
"(subsets? '(#:context #:intdefs) given-kws_346 '(#:context #:intdefs #:phase #:stop-ids))"
" #f))"
"(case-lambda((given-kws_348 given-args_349 ctx_350)(unpack34.1 given-kws_348 given-args_349 ctx_350)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_351 ctx_352)(flip-scopes s_351(expand-context-current-introduction-scopes ctx_352))))"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(if(let-values(((...and/syntax-local.rkt:65:7_3) get-current-expand-context8.1)((temp65_4) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_4 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:65:7_3"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp65_4))))"
" #t"
" #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_5)"
"(let-values(((...and/syntax-local.rkt:68:14_6) get-current-expand-context8.1)((temp66_7) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp66_7 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:68:14_6"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp66_7))))))"
"(if ctx_5(if(expand-context-lifts ctx_5) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_8)"
"(let-values(((...and/syntax-local.rkt:74:14_9) get-current-expand-context8.1)((temp67_10) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp67_10 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:74:14_9"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp67_10))))))"
"(if ctx_8(if(expand-context-to-module-lifts ctx_8) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_11)"
"(let-values(((...and/syntax-local.rkt:80:14_12) get-current-expand-context8.1)((temp68_13) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp68_13 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:80:14_12"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp68_13))))))"
"(if ctx_11(if(expand-context-requires+provides ctx_11) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_14)"
"(let-values(((temp69_15) 'syntax-local-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp69_15 #t)"
"(get-current-expand-context8.1 temp69_15)))))"
"(expand-context-context ctx_14))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_16)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_16)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_16)))"
"(values))))"
"(let-values(((ctx_17)"
"(let-values(((temp70_18) 'syntax-local-introduce))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp70_18 #t)"
"(get-current-expand-context8.1 temp70_18)))))"
"(flip-introduction-scopes s_16 ctx_17)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_19)"
"(let-values((()"
"(begin"
"(if(identifier? id_19)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_19)))"
"(values))))"
"(let-values(((ctx_20)"
"(let-values(((temp71_21) 'syntax-local-identifier-as-binding))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp71_21 #t)"
"(get-current-expand-context8.1 temp71_21)))))"
"(remove-use-site-scopes id_19 ctx_20)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((...and/syntax-local.rkt:102:14_23) get-current-expand-context8.1)((temp72_24) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp72_24 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:102:14_23"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp72_24))))))"
"(if ctx_22(expand-context-phase ctx_22) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_25)"
"(let-values(((temp73_27) 'syntax-local-name))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp73_27 #t)"
"(get-current-expand-context8.1 temp73_27)))))"
"(let-values(((id_26)(expand-context-name ctx_25)))"
"(if id_26(datum->syntax$1 #f(syntax-e$1 id_26) id_26) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_28)"
"(lambda(as-use-site?1_29 as-use-site?2_30)"
"(let-values(((as-use-site?_31)(if as-use-site?2_30 as-use-site?1_29 #f)))"
"(let-values()"
"(let-values(((sc_32)(new-scope(if as-use-site?_31 'use-site 'macro))))"
"(let-values(((core77_33)"
"(lambda(s76_34 mode74_35 mode75_36)"
"(let-values(((s_37) s76_34))"
"(let-values(((mode_38)(if mode75_36 mode74_35 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_37)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_37)))"
"(let-values(((tmp_39) mode_38))"
"(if(equal? tmp_39 'add)"
"(let-values()(add-scope s_37 sc_32))"
"(if(equal? tmp_39 'remove)"
"(let-values()(remove-scope s_37 sc_32))"
"(if(equal? tmp_39 'flip)"
"(let-values()(flip-scope s_37 sc_32))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_38)))))))))))))"
"(case-lambda"
"((s_40)(core77_33 s_40 #f #f))"
"((s_41 mode74_42)(core77_33 s_41 mode74_42 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_28 #f #f))"
"((as-use-site?1_43)(make-syntax-introducer3_28 as-use-site?1_43 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_44)"
"(lambda(ext-s7_45 base-s8_46 phase5_47 phase6_48)"
"(let-values(((ext-s_49) ext-s7_45))"
"(let-values(((base-s_50) base-s8_46))"
"(let-values(((phase_51)(if phase6_48 phase5_47(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_49)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_49)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_56)(syntax?$1 base-s_50)))"
"(if or-part_56 or-part_56(not base-s_50)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_50)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_51)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_51)))"
"(values))))"
"(let-values(((ext-scs_52)(syntax-scope-set ext-s_49 phase_51)))"
"(let-values(((base-scs_53)"
"(syntax-scope-set"
"(let-values(((or-part_57) base-s_50))"
"(if or-part_57 or-part_57 empty-syntax))"
" phase_51)))"
"(let-values(((delta-scs_54)(set->list(set-subtract ext-scs_52 base-scs_53))))"
"(let-values(((maybe-taint_55)"
"(if(syntax-clean? ext-s_49) values syntax-taint$1)))"
"(let-values(((core82_58)"
"(lambda(s81_59 mode79_60 mode80_61)"
"(let-values(((s_62) s81_59))"
"(let-values(((mode_63)(if mode80_61 mode79_60 'add)))"
"(let-values()"
"(maybe-taint_55"
"(let-values(((tmp_64) mode_63))"
"(if(equal? tmp_64 'add)"
"(let-values()(add-scopes s_62 delta-scs_54))"
"(if(equal? tmp_64 'remove)"
"(let-values()(remove-scopes s_62 delta-scs_54))"
"(if(equal? tmp_64 'flip)"
"(let-values()(flip-scopes s_62 delta-scs_54))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                          \"(or/c 'add 'remove 'flip)\""
" mode_63)))))))))))))"
"(case-lambda"
"((s_65)(core82_58 s_65 #f #f))"
"((s_66 mode79_67)(core82_58 s_66 mode79_67 #t))))))))))))))))))"
"(case-lambda"
"((ext-s_68 base-s_69)(make-syntax-delta-introducer9_44 ext-s_68 base-s_69 #f #f))"
"((ext-s_70 base-s_71 phase5_72)(make-syntax-delta-introducer9_44 ext-s_70 base-s_71 phase5_72 #t)))))"
"(define-values"
"(lifted/1.1$8)"
"(make-required"
" 'do-syntax-local-value"
"(case-lambda"
"((self_73 who_74 id_75 intdef_76 failure-thunk_77)"
"(apply missing-kw self_73 who_74 id_75 intdef_76 failure-thunk_77 null)))"
" #f"
" #f))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_78 who13_79 id14_80 intdef15_81 failure-thunk16_82)"
"(let-values(((who_83) who13_79))"
"(let-values(((id_84) id14_80))"
"(let-values(((intdef_85) intdef15_81))"
"(let-values(((failure-thunk_86) failure-thunk16_82))"
"(let-values(((immediate?_87) immediate?11_78))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_84)"
"(void)"
"                                  (let-values () (raise-argument-error who_83 \"identifier?\" id_84)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_91)(not failure-thunk_86)))"
"(if or-part_91"
" or-part_91"
"(if(procedure? failure-thunk_86)"
"(procedure-arity-includes? failure-thunk_86 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_83"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_86)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_92)(not intdef_85)))"
"(if or-part_92 or-part_92(1/internal-definition-context? intdef_85)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_83"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_86)))"
"(values))))"
"(let-values(((current-ctx_88)"
"(let-values(((who84_93) who_83))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who84_93 #t)"
"(get-current-expand-context8.1 who84_93)))))"
"(let-values(((ctx_89)"
"(if intdef_85"
"(let-values(((the-struct_94) current-ctx_88))"
"(if(expand-context? the-struct_94)"
"(let-values(((env85_95)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_88)"
" intdef_85)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_94)"
"(root-expand-context-post-expansion-scope the-struct_94)"
"(root-expand-context-top-level-bind-scope the-struct_94)"
"(root-expand-context-all-scopes-stx the-struct_94)"
"(root-expand-context-use-site-scopes the-struct_94)"
"(root-expand-context-defined-syms the-struct_94)"
"(root-expand-context-frame-id the-struct_94)"
"(root-expand-context-counter the-struct_94)"
"(root-expand-context-lift-key the-struct_94)"
"(expand-context-context the-struct_94)"
"(expand-context-phase the-struct_94)"
"(expand-context-namespace the-struct_94)"
" env85_95"
"(expand-context-user-env the-struct_94)"
"(expand-context-post-expansion-scope-action the-struct_94)"
"(expand-context-scopes the-struct_94)"
"(expand-context-def-ctx-scopes the-struct_94)"
"(expand-context-reference-records the-struct_94)"
"(expand-context-only-immediate? the-struct_94)"
"(expand-context-just-once? the-struct_94)"
"(expand-context-module-begin-k the-struct_94)"
"(expand-context-need-eventually-defined the-struct_94)"
"(expand-context-allow-unbound? the-struct_94)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_94)"
"(expand-context-stops the-struct_94)"
"(expand-context-current-introduction-scopes the-struct_94)"
"(expand-context-declared-submodule-names the-struct_94)"
"(expand-context-lifts the-struct_94)"
"(expand-context-lift-envs the-struct_94)"
"(expand-context-module-lifts the-struct_94)"
"(expand-context-require-lifts the-struct_94)"
"(expand-context-to-module-lifts the-struct_94)"
"(expand-context-requires+provides the-struct_94)"
"(expand-context-name the-struct_94)"
"(expand-context-observer the-struct_94)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_94)))"
" current-ctx_88)))"
"(let-values((()"
"(begin"
"(let-values(((obs_96)(expand-context-observer ctx_89)))"
"(if obs_96"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_96 'local-value id_84))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_90)(expand-context-phase ctx_89)))"
"((letrec-values(((loop_97)"
"(lambda(id_98)"
"(let-values(((b_99)"
"(if immediate?_87"
"(let-values(((...and/syntax-local.rkt:170:18_100)"
" resolve+shift15.1)"
"((id86_101) id_98)"
"((phase87_102) phase_90)"
"((temp88_103) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp88_103"
" #t"
" #f"
" #f"
" id86_101"
" phase87_102)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:170:18_100"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp88_103)"
" id86_101"
" phase87_102)))"
"(resolve+shift/extra-inspector"
" id_98"
" phase_90"
"(expand-context-namespace ctx_89)))))"
"(begin"
"(let-values(((obs_104)(expand-context-observer ctx_89)))"
"(if obs_104"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_104 'resolve id_98))"
"(void)))"
"(void)))"
"(if(not b_99)"
"(let-values()"
"(begin"
"(let-values(((obs_105)(expand-context-observer ctx_89)))"
"(if obs_105"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_105"
" 'local-value-result"
" #f))"
"(void)))"
"(void)))"
"(if failure-thunk_86"
"(failure-thunk_86)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_98))))"
"(let-values()"
"(let-values(((v_106 insp_107)"
"(let-values(((...and/syntax-local.rkt:180:30_108)"
" lookup17.1)"
"((b89_109) b_99)"
"((ctx90_110) ctx_89)"
"((id91_111) id_98)"
"((temp92_112) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" temp92_112"
" #t"
" b89_109"
" ctx90_110"
" id91_111)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:180:30_108"
" keyword-procedure-extract"
" '(#:out-of-context-as-variable?)"
" 5)"
" '(#:out-of-context-as-variable?)"
"(list temp92_112)"
" b89_109"
" ctx90_110"
" id91_111)))))"
"(if(let-values(((or-part_113)(variable? v_106)))"
"(if or-part_113 or-part_113(core-form? v_106)))"
"(let-values()"
"(begin"
"(let-values(((obs_114)"
"(expand-context-observer ctx_89)))"
"(if obs_114"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_114"
" 'local-value-result"
" #f))"
"(void)))"
"(void)))"
"(if failure-thunk_86"
"(failure-thunk_86)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_98))))"
"(let-values()"
"(begin"
"(let-values(((obs_115)"
"(expand-context-observer ctx_89)))"
"(if obs_115"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_115"
" 'local-value-result"
" #t))"
"(void)))"
"(void)))"
"(if(1/rename-transformer? v_106)"
"(let-values()"
"(if immediate?_87"
"(values"
" v_106"
"(1/rename-transformer-target v_106))"
"(loop_97(1/rename-transformer-target v_106))))"
"(if immediate?_87"
"(let-values()(values v_106 #f))"
"(let-values() v_106))))))))))))))"
" loop_97)"
"(flip-introduction-scopes id_84 ctx_89)))))))))))))))))"
"(define-values"
"(unpack18.1$2)"
"(lambda(given-kws_116 given-args_117 who13_118 id14_119 intdef15_120 failure-thunk16_121)"
"(let-values(((immediate?11_122)(car given-args_117)))"
"(do-syntax-local-value17.1 immediate?11_122 who13_118 id14_119 intdef15_120 failure-thunk16_121))))"
"(define-values"
"(do-syntax-local-value19.1)"
"(lifted/1.1$8"
"(lambda(given-kws_123 given-argc_124)"
"(if(= given-argc_124 6)"
"(let-values(((l2_125) given-kws_123))"
"(if(pair? l2_125)(if(eq?(car l2_125) '#:immediate?)(null?(cdr l2_125)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_126 given-args_127 who_128 id_129 intdef_130 failure-thunk_131)"
"(unpack18.1$2 given-kws_126 given-args_127 who_128 id_129 intdef_130 failure-thunk_131)))"
" '(#:immediate?)"
" '(#:immediate?)))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_132)"
"(lambda(id24_133 failure-thunk20_134 intdef21_135 failure-thunk22_136 intdef23_137)"
"(let-values(((id_138) id24_133))"
"(let-values(((failure-thunk_139)(if failure-thunk22_136 failure-thunk20_134 #f)))"
"(let-values(((intdef_140)(if intdef23_137 intdef21_135 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:198:2_141) do-syntax-local-value19.1)"
"((temp93_142) 'syntax-local-value)"
"((temp94_143) #f)"
"((id95_144) id_138)"
"((intdef96_145) intdef_140)"
"((failure-thunk97_146) failure-thunk_139))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp94_143"
" temp93_142"
" id95_144"
" intdef96_145"
" failure-thunk97_146)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:198:2_141"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp94_143)"
" temp93_142"
" id95_144"
" intdef96_145"
" failure-thunk97_146))))))))))"
"(case-lambda"
"((id_147)(syntax-local-value25_132 id_147 #f #f #f #f))"
"((id_148 failure-thunk_149 intdef21_150)(syntax-local-value25_132 id_148 failure-thunk_149 intdef21_150 #t #t))"
"((id_151 failure-thunk20_152)(syntax-local-value25_132 id_151 failure-thunk20_152 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_153)"
"(lambda(id31_154 failure-thunk27_155 intdef28_156 failure-thunk29_157 intdef30_158)"
"(let-values(((id_159) id31_154))"
"(let-values(((failure-thunk_160)(if failure-thunk29_157 failure-thunk27_155 #f)))"
"(let-values(((intdef_161)(if intdef30_158 intdef28_156 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:201:2_162) do-syntax-local-value19.1)"
"((temp98_163) 'syntax-local-value/immediate)"
"((temp99_164) #t)"
"((id100_165) id_159)"
"((intdef101_166) intdef_161)"
"((failure-thunk102_167) failure-thunk_160))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp99_164"
" temp98_163"
" id100_165"
" intdef101_166"
" failure-thunk102_167)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:201:2_162"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp99_164)"
" temp98_163"
" id100_165"
" intdef101_166"
" failure-thunk102_167))))))))))"
"(case-lambda"
"((id_168)(syntax-local-value/immediate32_153 id_168 #f #f #f #f))"
"((id_169 failure-thunk_170 intdef28_171)"
"(syntax-local-value/immediate32_153 id_169 failure-thunk_170 intdef28_171 #t #t))"
"((id_172 failure-thunk27_173)(syntax-local-value/immediate32_153 id_172 failure-thunk27_173 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_174 n_175 s_176)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_176) (void) (let-values () (raise-argument-error who_174 \"syntax?\" s_176)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_175)"
"(void)"
"                        (let-values () (raise-argument-error who_174 \"exact-nonnegative-integer?\" n_175)))"
"(values))))"
"(let-values(((ctx_177)"
"(let-values(((who103_181) who_174))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who103_181 #t)"
"(get-current-expand-context8.1 who103_181)))))"
"(let-values(((lifts_178)(expand-context-lifts ctx_177)))"
"(let-values(((counter_179)(root-expand-context-counter ctx_177)))"
"(let-values(((ids_180)"
"(alt-reverse"
"(let-values(((start_182) 0)((end_183) n_175)((inc_184) 1))"
"(begin"
"(if(if(real? start_182)(if(real? end_183)(real? inc_184) #f) #f)"
"(void)"
"(let-values()(in-range start_182 end_183 inc_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(fold-var_186 pos_187)"
"(if(< pos_187 end_183)"
"(let-values(((i_188) pos_187))"
"(if #t"
"(let-values(((fold-var_189)"
"(let-values(((fold-var_190) fold-var_186))"
"(let-values(((fold-var_191)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_179"
"(add1"
"(unbox"
" counter_179)))"
"(values))))"
"(let-values(((name_192)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                \"lifted/~a\""
"(unbox"
" counter_179)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_192)"
"(new-scope"
" 'macro)))))"
" fold-var_190))))"
"(values fold-var_191)))))"
"(if #t"
"(for-loop_185 fold-var_189(+ pos_187 inc_184))"
" fold-var_189))"
" fold-var_186))"
" fold-var_186))))"
" for-loop_185)"
" null"
" start_182))))))"
"(begin"
"(let-values(((obs_193)(expand-context-observer ctx_177)))"
"(if obs_193"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_193 'local-lift ids_180 s_176))(void)))"
"(void)))"
"(map2"
"(lambda(id_194)(flip-introduction-scopes id_194 ctx_177))"
"(add-lifted!"
" lifts_178"
" ids_180"
"(flip-introduction-scopes s_176 ctx_177)"
"(expand-context-phase ctx_177))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_195)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_195))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_196 s_197)(do-lift-values-expression 'syntax-local-lift-values-expression n_196 s_197)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_198)"
"(let-values(((temp104_199) 'syntax-local-lift-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp104_199 #t)"
"(get-current-expand-context8.1 temp104_199)))))"
"(root-expand-context-lift-key ctx_198))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_200)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_200)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_200)))"
"(values))))"
"(let-values(((ctx_201)"
"(let-values(((temp105_203) 'syntax-local-lift-module))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp105_203 #t)"
"(get-current-expand-context8.1 temp105_203)))))"
"(let-values(((phase_202)(expand-context-phase ctx_201)))"
"(begin"
"(let-values(((tmp_204)(core-form-sym s_200 phase_202)))"
"(if(if(equal? tmp_204 'module) #t(equal? tmp_204 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_201) s_200 phase_202))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_200))))"
"(let-values(((obs_205)(expand-context-observer ctx_201)))"
"(if obs_205"
"(let-values()(if #t(let-values()(call-expand-observe obs_205 'lift-statement s_200))(void)))"
"(void)))))))))"
"(define-values"
"(lifted/2.1$4)"
"(make-required"
" 'do-local-lift-to-module"
"(case-lambda((self_206 who_207 s_208)(apply missing-kw self_206 who_207 s_208 null)))"
" #f"
" #f))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_209"
" get-lift-ctx36_210"
" get-wrt-phase38_211"
" intro?34_212"
" intro?42_213"
" more-checks35_214"
" more-checks43_215"
" post-wrap41_216"
" post-wrap49_217"
" pre-wrap39_218"
" pre-wrap47_219"
" shift-wrap40_220"
" shift-wrap48_221"
" who50_222"
" s51_223)"
"(let-values(((who_224) who50_222))"
"(let-values(((s_225) s51_223))"
"(let-values(((intro?_226)(if intro?42_213 intro?34_212 #t)))"
"(let-values(((more-checks_227)(if more-checks43_215 more-checks35_214 void)))"
"(let-values(((get-lift-ctx_228) get-lift-ctx36_210))"
"(let-values(((add-lifted!_229) add-lifted!37_209))"
"(let-values(((get-wrt-phase_230) get-wrt-phase38_211))"
"(let-values(((pre-wrap_231)"
"(if pre-wrap47_219 pre-wrap39_218(lambda(s_232 phase_233 lift-ctx_234) s_232))))"
"(let-values(((shift-wrap_235)"
"(if shift-wrap48_221 shift-wrap40_220(lambda(s_236 phase_237 lift-ctx_238) s_236))))"
"(let-values(((post-wrap_239)"
"(if post-wrap49_217 post-wrap41_216(lambda(s_240 phase_241 lift-ctx_242) s_240))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_225)"
"(void)"
"                                            (let-values () (raise-argument-error who_224 \"syntax?\" s_225)))"
"(values))))"
"(let-values((()(begin(more-checks_227)(values))))"
"(let-values(((ctx_243)"
"(let-values(((who106_251) who_224))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who106_251 #t)"
"(get-current-expand-context8.1 who106_251)))))"
"(let-values(((lift-ctx_244)(get-lift-ctx_228 ctx_243)))"
"(let-values(((phase_245)(expand-context-phase ctx_243)))"
"(let-values(((wrt-phase_246)(get-wrt-phase_230 lift-ctx_244)))"
"(let-values(((added-s_247)"
"(if intro?_226(flip-introduction-scopes s_225 ctx_243) s_225)))"
"(let-values(((pre-s_248)(pre-wrap_231 added-s_247 phase_245 lift-ctx_244)))"
"(let-values(((shift-s_249)"
"(let-values(((start_252) phase_245)"
"((end_253) wrt-phase_246)"
"((inc_254) -1))"
"(begin"
"(if(if(real? start_252)"
"(if(real? end_253)(real? inc_254) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_252 end_253 inc_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(s_256 pos_257)"
"(if(> pos_257 end_253)"
"(let-values(((phase_258) pos_257))"
"(if #t"
"(let-values(((s_259)"
"(let-values(((s_260)"
" s_256))"
"(let-values(((s_261)"
"(let-values()"
"(shift-wrap_235"
" s_260"
"(sub1"
" phase_258)"
" lift-ctx_244))))"
"(values"
" s_261)))))"
"(if #t"
"(for-loop_255"
" s_259"
"(+ pos_257 inc_254))"
" s_259))"
" s_256))"
" s_256))))"
" for-loop_255)"
" pre-s_248"
" start_252)))))"
"(let-values(((post-s_250)"
"(post-wrap_239 shift-s_249 wrt-phase_246 lift-ctx_244)))"
"(begin"
"(add-lifted!_229 lift-ctx_244 post-s_250 wrt-phase_246)"
"(values ctx_243 added-s_247)))))))))))))))))))))))))"
"(define-values"
"(unpack53.1)"
"(lambda(given-kws_262 given-args_263 who50_264 s51_265)"
"(let-values(((add-lifted!37_266)(car given-args_263))"
"((given-kws_267)(cdr given-kws_262))"
"((given-args_268)(cdr given-args_263)))"
"(let-values(((get-lift-ctx36_269)(car given-args_268))"
"((given-kws_270)(cdr given-kws_267))"
"((given-args_271)(cdr given-args_268)))"
"(let-values(((get-wrt-phase38_272)(car given-args_271))"
"((given-kws_273)(cdr given-kws_270))"
"((given-args_274)(cdr given-args_271)))"
"(let-values(((intro?42_275)(if(pair? given-kws_273)(eq? '#:intro?(car given-kws_273)) #f)))"
"(let-values(((intro?34_276)(if intro?42_275(car given-args_274)(void)))"
"((given-kws_277)(if intro?42_275(cdr given-kws_273) given-kws_273))"
"((given-args_278)(if intro?42_275(cdr given-args_274) given-args_274)))"
"(let-values(((more-checks43_279)(if(pair? given-kws_277)(eq? '#:more-checks(car given-kws_277)) #f)))"
"(let-values(((more-checks35_280)(if more-checks43_279(car given-args_278)(void)))"
"((given-kws_281)(if more-checks43_279(cdr given-kws_277) given-kws_277))"
"((given-args_282)(if more-checks43_279(cdr given-args_278) given-args_278)))"
"(let-values(((post-wrap49_283)(if(pair? given-kws_281)(eq? '#:post-wrap(car given-kws_281)) #f)))"
"(let-values(((post-wrap41_284)(if post-wrap49_283(car given-args_282)(void)))"
"((given-kws_285)(if post-wrap49_283(cdr given-kws_281) given-kws_281))"
"((given-args_286)(if post-wrap49_283(cdr given-args_282) given-args_282)))"
"(let-values(((pre-wrap47_287)"
"(if(pair? given-kws_285)(eq? '#:pre-wrap(car given-kws_285)) #f)))"
"(let-values(((pre-wrap39_288)(if pre-wrap47_287(car given-args_286)(void)))"
"((given-kws_289)(if pre-wrap47_287(cdr given-kws_285) given-kws_285))"
"((given-args_290)(if pre-wrap47_287(cdr given-args_286) given-args_286)))"
"(let-values(((shift-wrap48_291)(pair? given-kws_289)))"
"(let-values(((shift-wrap40_292)(if shift-wrap48_291(car given-args_290)(void))))"
"(do-local-lift-to-module52.1"
" add-lifted!37_266"
" get-lift-ctx36_269"
" get-wrt-phase38_272"
" intro?34_276"
" intro?42_275"
" more-checks35_280"
" more-checks43_279"
" post-wrap41_284"
" post-wrap49_283"
" pre-wrap39_288"
" pre-wrap47_287"
" shift-wrap40_292"
" shift-wrap48_291"
" who50_264"
" s51_265))))))))))))))))"
"(define-values"
"(do-local-lift-to-module54.1)"
"(lifted/2.1$4"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 4)"
"(subsets?"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" given-kws_293"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap))"
" #f))"
"(case-lambda((given-kws_295 given-args_296 who_297 s_298)(unpack53.1 given-kws_295 given-args_296 who_297 s_298)))"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap)))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_299 use-s_300)"
"(let-values(((sc_301)(new-scope 'macro)))"
"(let-values(((ctx_302 added-s_303)"
"(let-values(((...and/syntax-local.rkt:275:4_305) do-local-lift-to-module54.1)"
"((temp107_306) 'syntax-local-lift-require)"
"((temp108_307)(datum->syntax$1 #f s_299))"
"((temp109_308) #f)"
"((temp110_309)"
"(lambda()"
"(if(syntax?$1 use-s_300)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_300)))))"
"((expand-context-require-lifts111_310) expand-context-require-lifts)"
"((require-lift-context-wrt-phase112_311) require-lift-context-wrt-phase)"
"((add-lifted-require!113_312) add-lifted-require!)"
"((temp114_313)"
"(lambda(s_315 phase_316 require-lift-ctx_317)(require-spec-shift-for-syntax s_315)))"
"((temp115_314)"
"(lambda(s_318 phase_319 require-lift-ctx_320)"
"(wrap-form '#%require(add-scope s_318 sc_301) phase_319))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-require!113_312"
" expand-context-require-lifts111_310"
" require-lift-context-wrt-phase112_311"
" temp109_308"
" #t"
" temp110_309"
" #t"
" temp115_314"
" #t"
" #f"
" #f"
" temp114_313"
" #t"
" temp107_306"
" temp108_307)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:275:4_305"
" keyword-procedure-extract"
" '(#:add-lifted!"
" #:get-lift-ctx"
" #:get-wrt-phase"
" #:intro?"
" #:more-checks"
" #:post-wrap"
" #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-require!113_312"
" expand-context-require-lifts111_310"
" require-lift-context-wrt-phase112_311"
" temp109_308"
" temp110_309"
" temp115_314"
" temp114_313)"
" temp107_306"
" temp108_307)))))"
"(let-values(((result-s_304)(add-scope use-s_300 sc_301)))"
"(begin"
"(let-values(((obs_321)(expand-context-observer ctx_302)))"
"(if obs_321"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_321 'lift-require added-s_303 use-s_300 result-s_304))"
"(void)))"
"(void)))"
" result-s_304))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_322)"
"(let-values(((ctx_323 result-s_324)"
"(let-values(((...and/syntax-local.rkt:298:4_325) do-local-lift-to-module54.1)"
"((temp116_326) 'syntax-local-lift-module-end-declaration)"
"((s117_327) s_322)"
"((expand-context-to-module-lifts118_328) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase119_329) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!120_330) add-lifted-to-module-provide!)"
"((temp121_331)"
"(lambda(s_333 phase_334 to-module-lift-ctx_335)(wrap-form 'for-syntax s_333 #f)))"
"((temp122_332)"
"(lambda(s_336 phase_337 to-module-lift-ctx_338)"
"(wrap-form '#%provide s_336 phase_337))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!120_330"
" expand-context-to-module-lifts118_328"
" to-module-lift-context-wrt-phase119_329"
" #f"
" #f"
" #f"
" #f"
" temp122_332"
" #t"
" #f"
" #f"
" temp121_331"
" #t"
" temp116_326"
" s117_327)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:298:4_325"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-provide!120_330"
" expand-context-to-module-lifts118_328"
" to-module-lift-context-wrt-phase119_329"
" temp122_332"
" temp121_331)"
" temp116_326"
" s117_327)))))"
"(let-values(((obs_339)(expand-context-observer ctx_323)))"
"(if obs_339"
"(let-values()(if #t(let-values()(call-expand-observe obs_339 'lift-provide result-s_324))(void)))"
"(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_340)"
"(let-values(((ctx_341 also-s_342)"
"(let-values(((...and/syntax-local.rkt:313:4_343) do-local-lift-to-module54.1)"
"((temp123_344) 'syntax-local-lift-module-end-declaration)"
"((s124_345) s_340)"
"((expand-context-to-module-lifts125_346) expand-context-to-module-lifts)"
"((temp126_347)(lambda(lift-ctx_351) 0))"
"((add-lifted-to-module-end!127_348) add-lifted-to-module-end!)"
"((temp128_349)"
"(lambda(orig-s_352 phase_353 to-module-lift-ctx_354)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_354)"
"(wrap-form '#%expression orig-s_352 phase_353)"
" orig-s_352)))"
"((temp129_350)"
"(lambda(s_355 phase_356 to-module-lift-ctx_357)"
"(wrap-form 'begin-for-syntax s_355 phase_356))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!127_348"
" expand-context-to-module-lifts125_346"
" temp126_347"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp128_349"
" #t"
" temp129_350"
" #t"
" temp123_344"
" s124_345)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:313:4_343"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-end!127_348"
" expand-context-to-module-lifts125_346"
" temp126_347"
" temp128_349"
" temp129_350)"
" temp123_344"
" s124_345)))))"
"(let-values(((obs_358)(expand-context-observer ctx_341)))"
"(if obs_358"
"(let-values()(if #t(let-values()(call-expand-observe obs_358 'lift-statement s_340))(void)))"
"(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_359 s_360 phase_361)"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_361(syntax-shift-phase-level$1 core-stx phase_361) #f) sym_359) s_360))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_362)"
"(let-values(((temp130_363) 'syntax-local-module-defined-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp130_363 #t)"
"(get-current-expand-context8.1 temp130_363)))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_362)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_364 phase-level_365)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_370)(not mod-path_364)))"
"(if or-part_370 or-part_370(1/module-path? mod-path_364)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_364)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_371)(eq? phase-level_365 #t)))"
"(if or-part_371 or-part_371(phase? phase-level_365)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_365)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_366)"
"(let-values(((temp131_372) 'syntax-local-module-required-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp131_372 #t)"
"(get-current-expand-context8.1 temp131_372)))))"
"(let-values(((requires+provides_367)(expand-context-requires+provides ctx_366)))"
"(let-values(((mpi_368)(if mod-path_364(module-path->mpi/context mod-path_364 ctx_366) #f)))"
"(let-values(((requireds_369)"
"(extract-all-module-requires"
" requires+provides_367"
" mpi_368"
"(if(eq? phase-level_365 #t) 'all phase-level_365))))"
"(if requireds_369"
"(alt-reverse"
"(let-values(((ht_373)(requireds->phase-ht requireds_369)))"
"(begin"
"(if((lambda(ht_374)(hash? ht_374)) ht_373)(void)(let-values()(default-in-hash ht_373)))"
"((letrec-values(((for-loop_375)"
"(lambda(fold-var_376 i_377)"
"(if i_377"
"(let-values(((phase_378 ids_379)(hash-iterate-key+value ht_373 i_377)))"
"(if #t"
"(let-values(((fold-var_380)"
"(let-values(((fold-var_381) fold-var_376))"
"(let-values(((fold-var_382)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_378 ids_379))"
" fold-var_381))))"
"(values fold-var_382)))))"
"(if #t"
"(for-loop_375 fold-var_380(hash-iterate-next ht_373 i_377))"
" fold-var_380))"
" fold-var_376))"
" fold-var_376))))"
" for-loop_375)"
" null"
"(hash-iterate-first ht_373)))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_383)"
"(let-values(((lst_384) requireds_383))"
"(begin"
"(if(list? lst_384)(void)(let-values()(in-list lst_384)))"
"((letrec-values(((for-loop_385)"
"(lambda(ht_386 lst_387)"
"(if(pair? lst_387)"
"(let-values(((r_388)(unsafe-car lst_387)))"
"(if #t"
"(let-values(((ht_389)"
"(let-values(((ht_390) ht_386))"
"(let-values(((ht_391)"
"(let-values()"
"(hash-update"
" ht_390"
"(required-phase r_388)"
"(lambda(l_392)(cons(required-id r_388) l_392))"
" null))))"
"(values ht_391)))))"
"(if #t(for-loop_385 ht_389(unsafe-cdr lst_387)) ht_389))"
" ht_386))"
" ht_386))))"
" for-loop_385)"
"(hasheqv)"
" lst_384)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_393)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_398)(1/module-path? mod-path_393)))"
"(if or-part_398"
" or-part_398"
"(if(syntax?$1 mod-path_393)(1/module-path?(syntax->datum$1 mod-path_393)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_393)))"
"(values))))"
"(let-values(((ctx_394)"
"(let-values(((temp132_399) 'syntax-local-module-exports))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp132_399 #t)"
"(get-current-expand-context8.1 temp132_399)))))"
"(let-values(((ns_395)(expand-context-namespace ctx_394)))"
"(let-values(((mod-name_396)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_393)(syntax->datum$1 mod-path_393) mod-path_393)"
" ctx_394)"
" #t)))"
"(let-values(((m_397)(namespace->module ns_395 mod-name_396)))"
"(begin"
"(if m_397(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_396)))"
"(alt-reverse"
"(let-values(((ht_400)(module-provides m_397)))"
"(begin"
"(if((lambda(ht_401)(hash? ht_401)) ht_400)(void)(let-values()(default-in-hash ht_400)))"
"((letrec-values(((for-loop_402)"
"(lambda(fold-var_403 i_404)"
"(if i_404"
"(let-values(((phase_405 syms_406)(hash-iterate-key+value ht_400 i_404)))"
"(if #t"
"(let-values(((fold-var_407)"
"(let-values(((fold-var_408) fold-var_403))"
"(let-values(((fold-var_409)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_405"
"(alt-reverse"
"(let-values(((ht_410) syms_406))"
"(begin"
"(if((lambda(ht_411)"
"(hash? ht_411))"
" ht_410)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_410)))"
"((letrec-values(((for-loop_412)"
"(lambda(fold-var_413"
" i_414)"
"(if i_414"
"(let-values(((sym_415)"
"(hash-iterate-key"
" ht_410"
" i_414)))"
"(if #t"
"(let-values(((fold-var_416)"
"(let-values(((fold-var_417)"
" fold-var_413))"
"(let-values(((fold-var_418)"
"(let-values()"
"(cons"
"(let-values()"
" sym_415)"
" fold-var_417))))"
"(values"
" fold-var_418)))))"
"(if #t"
"(for-loop_412"
" fold-var_416"
"(hash-iterate-next"
" ht_410"
" i_414))"
" fold-var_416))"
" fold-var_413))"
" fold-var_413))))"
" for-loop_412)"
" null"
"(hash-iterate-first"
" ht_410)))))))"
" fold-var_408))))"
"(values fold-var_409)))))"
"(if #t"
"(for-loop_402 fold-var_407(hash-iterate-next ht_400 i_404))"
" fold-var_407))"
" fold-var_403))"
" fold-var_403))))"
" for-loop_402)"
" null"
"(hash-iterate-first ht_400)))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_419)"
"(let-values(((temp133_421) 'syntax-local-submodules))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp133_421 #t)"
"(get-current-expand-context8.1 temp133_421)))))"
"(let-values(((submods_420)(expand-context-declared-submodule-names ctx_419)))"
"(alt-reverse"
"(let-values(((ht_422) submods_420))"
"(begin"
"(if((lambda(ht_423)(hash? ht_423)) ht_422)(void)(let-values()(default-in-hash ht_422)))"
"((letrec-values(((for-loop_424)"
"(lambda(fold-var_425 i_426)"
"(if i_426"
"(let-values(((name_427 kind_428)(hash-iterate-key+value ht_422 i_426)))"
"(if #t"
"(let-values(((fold-var_429)"
"(let-values(((fold-var_430) fold-var_425))"
"(if(eq? kind_428 'module)"
"(let-values(((fold-var_431) fold-var_430))"
"(let-values(((fold-var_432)"
"(let-values()"
"(cons"
"(let-values() name_427)"
" fold-var_431))))"
"(values fold-var_432)))"
" fold-var_430))))"
"(if #t"
"(for-loop_424 fold-var_429(hash-iterate-next ht_422 i_426))"
" fold-var_429))"
" fold-var_425))"
" fold-var_425))))"
" for-loop_424)"
" null"
"(hash-iterate-first ht_422)))))))))"
"(define-values"
"(syntax-local-environment-ref)"
"(let-values(((syntax-local-environment-ref58_433)"
"(lambda(key57_434 default55_435 default56_436)"
"(let-values(((key_437) key57_434))"
"(let-values(((default_438)(if default56_436 default55_435 #f)))"
"(let-values()"
"(let-values(((ctx_439)"
"(let-values(((temp134_440) 'syntax-local-environment-ref))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp134_440 #t)"
"(get-current-expand-context8.1 temp134_440)))))"
"(hash-ref(expand-context-user-env ctx_439) key_437 default_438))))))))"
"(case-lambda"
"((key_441)(syntax-local-environment-ref58_433 key_441 #f #f))"
"((key_442 default55_443)(syntax-local-environment-ref58_433 key_442 default55_443 #t)))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower63_444)"
"(lambda(id62_445 only-generated?60_446 only-generated?61_447)"
"(let-values(((id_448) id62_445))"
"(let-values(((only-generated?_449)(if only-generated?61_447 only-generated?60_446 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_448)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_448)))"
"(values))))"
"(let-values(((ctx_450)"
"(let-values(((temp135_452) 'syntax-local-get-shadower))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp135_452 #t)"
"(get-current-expand-context8.1 temp135_452)))))"
"(let-values(((new-id_451)"
"(add-scopes"
" id_448"
"(set->list"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx ctx_450)"
"(expand-context-phase ctx_450))))))"
"(if(syntax-clean? id_448) new-id_451(syntax-taint$1 new-id_451)))))))))))"
"(case-lambda"
"((id_453)(syntax-local-get-shadower63_444 id_453 #f #f))"
"((id_454 only-generated?60_455)(syntax-local-get-shadower63_444 id_454 only-generated?60_455 #t)))))"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 \"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) #f))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) 5)(srcloc-vector?(list->vector v_5)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) 5)(srcloc-vector? v_5) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 0)"
"(vector-ref v_12 1)"
"(vector-ref v_12 2)"
"(vector-ref v_12 3)"
"(vector-ref v_12 4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
"(syntax-bulk-binding-registry the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(define-values"
"(reader-syntax->syntax)"
"(lambda(v_1)"
"(datum-map"
" v_1"
"(lambda(tail?_2 v_3)"
"(if(1/syntax? v_3)"
"(let-values()"
"(let-values(((e_4)(syntax-e$2 v_3)))"
"(if(syntax?$1 e_4)"
"(let-values() e_4)"
"(let-values()"
"(let-values(((s_5)"
"(let-values(((the-struct_7) empty-syntax))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8)(reader-syntax->syntax(syntax-e$2 v_3)))"
"((srcloc2_9)"
"(srcloc"
"(syntax-source$1 v_3)"
"(syntax-line$1 v_3)"
"(syntax-column$1 v_3)"
"(syntax-position$1 v_3)"
"(syntax-span$1 v_3)))"
"((props3_10)"
"(let-values(((tmp_11)(1/syntax-property v_3 'paren-shape)))"
"(if(equal? tmp_11 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_11 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
" srcloc2_9"
" props3_10"
"(syntax-inspector the-struct_7)"
"(syntax-tamper the-struct_7)))"
"                                   (raise-argument-error 'struct-copy \"syntax?\" the-struct_7)))))"
"(let-values(((keys_6)(syntax-property-symbol-keys$1 v_3)))"
"(if(null? keys_6)"
"(let-values() s_5)"
"(if(if(null?(cdr keys_6))(eq?(car keys_6) 'paren-shape) #f)"
"(let-values() s_5)"
"(let-values()"
"(let-values(((lst_12) keys_6))"
"(begin"
"(if(list? lst_12)(void)(let-values()(in-list lst_12)))"
"((letrec-values(((for-loop_13)"
"(lambda(s_14 lst_15)"
"(if(pair? lst_15)"
"(let-values(((key_16)(unsafe-car lst_15)))"
"(if #t"
"(let-values(((s_17)"
"(let-values(((s_18) s_14))"
"(let-values(((s_19)"
"(let-values()"
"(syntax-property$1"
" s_18"
" key_16"
"(1/syntax-property v_3 key_16)"
" #t))))"
"(values s_19)))))"
"(if #t(for-loop_13 s_17(unsafe-cdr lst_15)) s_17))"
" s_14))"
" s_14))))"
" for-loop_13)"
" s_5"
" lst_12))))))))))))"
"(let-values() v_3))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(define-values(read-syntax$1)(lambda(src_1 in_2)(reader-syntax->syntax(read-syntax$2 src_1 in_2))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(reader-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7))))"
"(define-values"
"(1/syntax-e)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
"      (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values(maybe-syntax->datum)(lambda(s_3)(if(syntax?$1 s_3)(syntax->datum$1 s_3) s_3)))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_4)"
"(lambda(stx-c7_5 s8_6 stx-l1_7 stx-p2_8 ignored3_9 stx-l4_10 stx-p5_11 ignored6_12)"
"(let-values(((stx-c_13) stx-c7_5))"
"(let-values(((s_14) s8_6))"
"(let-values(((stx-l_15)(if stx-l4_10 stx-l1_7 #f)))"
"(let-values(((stx-p_16)(if stx-p5_11 stx-p2_8 #f)))"
"(let-values(((ignored_17)(if ignored6_12 ignored3_9 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_18)(not stx-c_13)))"
"(if or-part_18 or-part_18(syntax?$1 stx-c_13)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_13)))"
"(if(let-values(((or-part_19)(not stx-l_15)))"
"(if or-part_19"
" or-part_19"
"(let-values(((or-part_20)(syntax?$1 stx-l_15)))"
"(if or-part_20 or-part_20(encoded-srcloc? stx-l_15)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_15)))"
"(if(let-values(((or-part_21)(not stx-p_16)))"
"(if or-part_21 or-part_21(syntax?$1 stx-p_16)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_16)))"
"(datum->syntax$1 stx-c_13 s_14(to-srcloc-stx stx-l_15) stx-p_16)))))))))))"
"(case-lambda"
"((stx-c_22 s_23)(datum->syntax9_4 stx-c_22 s_23 #f #f #f #f #f #f))"
"((stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28)"
"(datum->syntax9_4 stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28 #t #t #t))"
"((stx-c_29 s_30 stx-l_31 stx-p2_32)(datum->syntax9_4 stx-c_29 s_30 stx-l_31 stx-p2_32 #f #t #t #f))"
"((stx-c_33 s_34 stx-l1_35)(datum->syntax9_4 stx-c_33 s_34 stx-l1_35 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_36)"
"(begin"
"      (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_36)))"
"(syntax->list$1 s_36))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_37)"
"(begin"
"      (if (syntax?$1 s_37) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_37)))"
"(if(syntax-property$1 s_37 original-property-sym)(not(syntax-any-macro-scopes? s_37)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_38)"
"(lambda(a13_39 b14_40 phase11_41 phase12_42)"
"(let-values(((a_43) a13_39))"
"(let-values(((b_44) b14_40))"
"(let-values(((phase_45)(if phase12_42 phase11_41(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_43)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_43)))"
"(if(identifier? b_44)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_44)))"
"(if(phase? phase_45)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_45)))"
"(bound-identifier=?$1 a_43 b_44 phase_45)))))))))"
"(case-lambda"
"((a_46 b_47)(bound-identifier=?15_38 a_46 b_47 #f #f))"
"((a_48 b_49 phase11_50)(bound-identifier=?15_38 a_48 b_49 phase11_50 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_51)"
"(lambda(a21_52 b22_53 a-phase17_54 b-phase18_55 a-phase19_56 b-phase20_57)"
"(let-values(((a_58) a21_52))"
"(let-values(((b_59) b22_53))"
"(let-values(((a-phase_60)(if a-phase19_56 a-phase17_54(1/syntax-local-phase-level))))"
"(let-values(((b-phase_61)(if b-phase20_57 b-phase18_55 a-phase_60)))"
"(let-values()"
"(begin"
"(if(identifier? a_58)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_58)))"
"(if(identifier? b_59)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_59)))"
"(if(phase? a-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_60)))"
"(if(phase? b-phase_61)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_61)))"
"(free-identifier=?$1 a_58 b_59 a-phase_60 b-phase_61))))))))))"
"(case-lambda"
"((a_62 b_63)(free-identifier=?23_51 a_62 b_63 #f #f #f #f))"
"((a_64 b_65 a-phase_66 b-phase18_67)(free-identifier=?23_51 a_64 b_65 a-phase_66 b-phase18_67 #t #t))"
"((a_68 b_69 a-phase17_70)(free-identifier=?23_51 a_68 b_69 a-phase17_70 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_71 b_72)"
"(let-values((()"
"(begin"
"(if(identifier? a_71)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_71)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_72)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_72)))"
"(values))))"
"(let-values(((phase_73)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_71 b_72 phase_73 phase_73))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_74 b_75)"
"(let-values((()"
"(begin"
"(if(identifier? a_74)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_74)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_75)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_75)))"
"(values))))"
"(let-values(((phase_76)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_74 b_75 phase_76 phase_76))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_77 b_78)"
"(begin"
"      (if (identifier? a_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_77)))"
"      (if (identifier? b_78) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_78)))"
"(free-identifier=?$1 a_77 b_78 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding28_79)"
"(lambda(id27_80 phase25_81 phase26_82)"
"(let-values(((id_83) id27_80))"
"(let-values(((phase_84)(if phase26_82 phase25_81(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_83)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_83)))"
"(if(phase? phase_84)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_84)))"
"(identifier-binding$1 id_83 phase_84))))))))"
"(case-lambda"
"((id_85)(identifier-binding28_79 id_85 #f #f))"
"((id_86 phase25_87)(identifier-binding28_79 id_86 phase25_87 #t)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(lambda(id_88)"
"(begin"
"(if(identifier? id_88)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_88)))"
"(identifier-binding$1 id_88(add1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_89)"
"(begin"
"(if(identifier? id_89)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_89)))"
"(identifier-binding$1 id_89(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_90)"
"(begin"
"(if(identifier? id_90)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_90)))"
"(identifier-binding$1 id_90 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol33_91)"
"(lambda(id32_92 phase30_93 phase31_94)"
"(let-values(((id_95) id32_92))"
"(let-values(((phase_96)(if phase31_94 phase30_93(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_95)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_95)))"
"(if(phase? phase_96)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_96)))"
"(identifier-binding-symbol$1 id_95 phase_96))))))))"
"(case-lambda"
"((id_97)(identifier-binding-symbol33_91 id_97 #f #f))"
"((id_98 phase30_99)(identifier-binding-symbol33_91 id_98 phase30_99 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context38_100)"
"(lambda(id37_101 syms35_102 syms36_103)"
"(let-values(((id_104) id37_101))"
"(let-values(((syms_105)(if syms36_103 syms35_102 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_104)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_104)))"
"(if(if(list? syms_105)(andmap2 symbol? syms_105) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_105)))"
" id_104)))))))"
"(case-lambda"
"((id_106)(identifier-prune-lexical-context38_100 id_106 #f #f))"
"((id_107 syms35_108)(identifier-prune-lexical-context38_100 id_107 syms35_108 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info45_109)"
"(lambda(s44_110 phase40_111 all-bindings?41_112 phase42_113 all-bindings?43_114)"
"(let-values(((s_115) s44_110))"
"(let-values(((phase_116)(if phase42_113 phase40_111(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_117)(if all-bindings?43_114 all-bindings?41_112 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_115)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_115)))"
"(if(phase? phase_116)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_116)))"
"(syntax-debug-info$1 s_115 phase_116 all-bindings?_117)))))))))"
"(case-lambda"
"((s_118)(syntax-debug-info45_109 s_118 #f #f #f #f))"
"((s_119 phase_120 all-bindings?41_121)(syntax-debug-info45_109 s_119 phase_120 all-bindings?41_121 #t #t))"
"((s_122 phase40_123)(syntax-debug-info45_109 s_122 phase40_123 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_124 phase_125)"
"(begin"
"      (if (syntax?$1 s_124) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_124)))"
"(if(phase? phase_125)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_125)))"
"(syntax-shift-phase-level$1 s_124 phase_125))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_126 old-stx_127 id_128)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_126)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_126)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_127)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_128)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_128)))"
"(values))))"
"(let-values(((s_129)(syntax-track-origin$1 new-stx_126 old-stx_127 id_128)))"
"(let-values(((ctx_130)"
"(let-values(((...ander/syntax/api.rkt:191:14_131) get-current-expand-context8.1)"
"((temp65_132) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_132 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/syntax/api.rkt:191:14_131"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp65_132))))))"
"(begin"
"(if ctx_130"
"(let-values()"
"(let-values(((obs_133)(expand-context-observer ctx_130)))"
"(if obs_133"
"(let-values()(if #t(let-values()(call-expand-observe obs_133 'track-origin s_129))(void)))"
"(void))))"
"(void))"
" s_129))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax51_134)"
"(lambda(src47_135 in48_136 src49_137 in50_138)"
"(let-values(((src_139)(if src49_137 src47_135(object-name(current-input-port)))))"
"(let-values(((in_140)(if in50_138 in48_136(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_140)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_140)))"
"(read-syntax$1 src_139 in_140))))))))"
"(case-lambda"
"(()(read-syntax51_134 #f #f #f #f))"
"((src_141 in48_142)(read-syntax51_134 src_141 in48_142 #t #t))"
"((src47_143)(read-syntax51_134 src47_143 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive63_144)"
"(lambda(src53_145"
" in54_146"
" start55_147"
" readtable56_148"
" graph?57_149"
" src58_150"
" in59_151"
" start60_152"
" readtable61_153"
" graph?62_154)"
"(let-values(((src_155)(if src58_150 src53_145(object-name(current-input-port)))))"
"(let-values(((in_156)(if in59_151 in54_146(current-input-port))))"
"(let-values(((start_157)(if start60_152 start55_147 #f)))"
"(let-values(((readtable_158)(if readtable61_153 readtable56_148(current-readtable))))"
"(let-values(((graph?_159)(if graph?62_154 graph?57_149 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_156)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_156)))"
"(if(let-values(((or-part_160)(char? start_157)))"
"(if or-part_160 or-part_160(not start_157)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_157)))"
"(if(let-values(((or-part_161)(readtable? readtable_158)))"
"(if or-part_161 or-part_161(not readtable_158)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_158)))"
"(read-syntax/recursive$1 src_155 in_156 start_157 readtable_158 graph?_159)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive63_144 #f #f #f #f #f #f #f #f #f #f))"
"((src_162 in_163 start_164 readtable_165 graph?57_166)"
"(read-syntax/recursive63_144 src_162 in_163 start_164 readtable_165 graph?57_166 #t #t #t #t #t))"
"((src_167 in_168 start_169 readtable56_170)"
"(read-syntax/recursive63_144 src_167 in_168 start_169 readtable56_170 #f #t #t #t #t #f))"
"((src_171 in_172 start55_173)(read-syntax/recursive63_144 src_171 in_172 start55_173 #f #f #t #t #t #f #f))"
"((src_174 in54_175)(read-syntax/recursive63_144 src_174 in54_175 #f #f #f #t #t #f #f #f))"
"((src53_176)(read-syntax/recursive63_144 src53_176 #f #f #f #f #t #f #f #f #f)))))"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))"
"(let-values(((s_8)"
"(syntax-shift-phase-level$1"
"(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))"
" phase-shift_4)))"
"(let-values((()"
"(begin"
"(let-values(((lst_10) requires_1))"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(fold-var_12 lst_13)"
"(if(pair? lst_13)"
"(let-values(((phase+reqs_14)(unsafe-car lst_13)))"
"(if #t"
"(let-values(((fold-var_15)"
"(let-values(((fold-var_16) fold-var_12))"
"(let-values(((fold-var_17)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_18)"
"(car"
" phase+reqs_14)))"
"(let-values(((lst_19)"
"(cdr"
" phase+reqs_14)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()"
"(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((req_23)"
"(unsafe-car"
" lst_22)))"
"(if #t"
"(let-values(((fold-var_24)"
"(let-values(((fold-var_25)"
" fold-var_21))"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_27)"
"(module-path-index-shift"
" req_23"
" original-self_5"
" self_6)))"
"(let-values(((...val/root-context.rkt:35:8_28)"
" perform-require!48.1)"
"((mpi1_29)"
" mpi_27)"
"((s2_30)"
" s_8)"
"((self3_31)"
" self_6)"
"((s4_32)"
" s_8)"
"((ns5_33)"
" ns_3)"
"((temp6_34)"
"(phase+"
" phase_18"
" phase-shift_4))"
"((phase-shift7_35)"
" phase-shift_4))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!48.1))"
"(perform-require!46.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_34"
" #f"
" #f"
" phase-shift7_35"
" #f"
" #f"
" #f"
" #f"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...val/root-context.rkt:35:8_28"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:run-phase)"
" 7)"
" '(#:phase-shift"
" #:run-phase)"
"(list"
" temp6_34"
" phase-shift7_35)"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)))))"
"(void)))))"
"(values"
" fold-var_26)))))"
"(if #t"
"(for-loop_20"
" fold-var_24"
"(unsafe-cdr"
" lst_22))"
" fold-var_24))"
" fold-var_21))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))))"
"(void)))))"
"(values fold-var_17)))))"
"(if #t"
"(for-loop_11 fold-var_15(unsafe-cdr lst_13))"
" fold-var_15))"
" fold-var_12))"
" fold-var_12))))"
" for-loop_11)"
"(void)"
" lst_10)))"
"(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_36) evaled-ld-h_2))"
"(begin"
"(if((lambda(ht_37)(hash? ht_37)) ht_36)(void)(let-values()(default-in-hash ht_36)))"
"((letrec-values(((for-loop_38)"
"(lambda(fold-var_39 i_40)"
"(if i_40"
"(let-values(((phase_41 linklet_42)(hash-iterate-key+value ht_36 i_40)))"
"(if #t"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44) fold-var_39))"
"(let-values(((fold-var_45)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_46)"
"(1/linklet-export-variables"
" linklet_42)))"
"(begin"
"(if(list? lst_46)"
"(void)"
"(let-values()"
"(in-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49)"
"(if(pair?"
" lst_49)"
"(let-values(((sym_50)"
"(unsafe-car"
" lst_49)))"
"(if #t"
"(let-values(((fold-var_51)"
"(let-values(((fold-var_52)"
" fold-var_48))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_54)"
"(datum->syntax$1"
" s_8"
" sym_50)))"
"(begin"
"(let-values(((id8_55)"
" id_54)"
"((temp9_56)"
"(let-values(((self11_58)"
" self_6)"
"((phase12_59)"
" phase_41)"
"((sym13_60)"
" sym_50))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self11_58"
" phase12_59"
" sym13_60)"
"(make-module-binding22.1"
" self11_58"
" phase12_59"
" sym13_60))))"
"((temp10_57)"
"(phase+"
" phase_41"
" phase-shift_4)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" #f"
" #f"
" id8_55"
" temp9_56"
" temp10_57)"
"(add-binding!17.1"
" id8_55"
" temp9_56"
" temp10_57)))"
"(add-defined-sym!"
" defined-syms_9"
" phase_41"
" sym_50"
" id_54))))"
"(void)))))"
"(values"
" fold-var_53)))))"
"(if #t"
"(for-loop_47"
" fold-var_51"
"(unsafe-cdr"
" lst_49))"
" fold-var_51))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_46))))"
"(void)))))"
"(values fold-var_45)))))"
"(if #t"
"(for-loop_38 fold-var_43(hash-iterate-next ht_36 i_40))"
" fold-var_43))"
" fold-var_39))"
" fold-var_39))))"
" for-loop_38)"
"(void)"
"(hash-iterate-first ht_36))))"
" root-ctx_7))))))))"
"(define-values(module-cache)(make-weak-hash))"
"(define-values(make-module-cache-key)(lambda(hash-code_1)(if hash-code_1(list hash-code_1) #f)))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_2 proc_3)(hash-set! module-cache key_2(make-ephemeron key_2 proc_3))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_4)(let-values(((e_5)(hash-ref module-cache key_4 #f)))(if e_5(ephemeron-value e_5) #f))))"
"(define-values"
"(lifted/34.1)"
"(make-required 'declare-this-module(case-lambda((self_173)(apply missing-kw self_173 null))) #f #f))"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_1"
" namespace4_2"
" supermodule-name3_3"
" supermodule-name6_4"
" with-submodules?2_5"
" with-submodules?5_6"
" c7_7)"
"(let-values(((c_8) c7_7))"
"(let-values(((ns_9)(if namespace4_2 namespace1_1(1/current-namespace))))"
"(let-values(((with-submodules?_10)(if with-submodules?5_6 with-submodules?2_5 #t)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_4 supermodule-name3_3 #f)))"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((syntax-literals-data-instance_16)"
"(if(compiled-in-memory? c_8)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_8)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_13 'stx-data))"
"(list"
" deserialize-instance"
" data-instance_14"
"(make-declaration-context-instance ns_9))))))"
"(let-values(((decl_17)(lambda(key_39)(1/instance-variable-value declaration-instance_15 key_39))))"
"(let-values(((pre-submodule-names_18)(hash-ref h_13 'pre null)))"
"(let-values(((post-submodule-names_19)(hash-ref h_13 'post null)))"
"(let-values(((default-name_20)(hash-ref h_13 'name 'module)))"
"(let-values(((cache-key_21)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_18)"
"(if(null? post-submodule-names_19)(hash-ref h_13 'hash-code #f) #f)"
" #f))))"
"(let-values(((min-phase_22)(decl_17 'min-phase)))"
"(let-values(((max-phase_23)(decl_17 'max-phase)))"
"(let-values(((phases-h_24)"
"(let-values(((start_40) min-phase_22)"
"((end_41)(add1 max-phase_23))"
"((inc_42) 1))"
"(begin"
"(if(if(real? start_40)(if(real? end_41)(real? inc_42) #f) #f)"
"(void)"
"(let-values()(in-range start_40 end_41 inc_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(table_44 pos_45)"
"(if(< pos_45 end_41)"
"(let-values(((phase-level_46) pos_45))"
"(if #t"
"(let-values(((table_47)"
"(let-values(((v_48)"
"(hash-ref"
" h_13"
" phase-level_46"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_49)"
"(lambda(table_50)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_51)"
"(let-values(((table_52)"
" table_50))"
"(if v_48"
"(let-values(((table_53)"
" table_52))"
"(let-values(((table_54)"
"(let-values()"
"(let-values(((key_55"
" val_56)"
"(let-values()"
"(values"
" phase-level_46"
"(1/eval-linklet"
" v_48)))))"
"(hash-set"
" table_53"
" key_55"
" val_56)))))"
"(values"
" table_54)))"
" table_52))))"
"(if #f"
"(for-loop_49"
" table_51)"
" table_51))"
" table_50))"
" table_50))))"
" for-loop_49)"
" table_44)))))"
"(if #t"
"(for-loop_43 table_47(+ pos_45 inc_42))"
" table_47))"
" table_44))"
" table_44))))"
" for-loop_43)"
" '#hash()"
" start_40)))))"
"(let-values(((syntax-literals-linklet_25)(1/eval-linklet(hash-ref h_13 'stx))))"
"(let-values(((extra-inspector_26)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-compile-time-inspector c_8)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_27)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv())))"
"(let-values(((requires_28)(decl_17 'requires)))"
"(let-values(((provides_29)(decl_17 'provides)))"
"(let-values(((original-self_30)(decl_17 'self-mpi)))"
"(let-values(((phase-to-link-modules_31)"
"(decl_17 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_32)"
"(make-create-root-expand-context-from-module"
" requires_28"
" phases-h_24)))"
"(let-values(((declare-submodules_33)"
"(lambda(names_57 declare-name_58 pre?_59)"
"(if dh_12"
"(let-values()"
"(if(compiled-in-memory? c_8)"
"(let-values(((lst_60)"
"(if pre?_59"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_8)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_8))))"
"(begin"
"(if(list? lst_60)"
"(void)"
"(let-values()(in-list lst_60)))"
"((letrec-values(((for-loop_61)"
"(lambda(fold-var_62"
" lst_63)"
"(if(pair? lst_63)"
"(let-values(((c_64)"
"(unsafe-car"
" lst_63)))"
"(if #t"
"(let-values(((fold-var_65)"
"(let-values(((fold-var_66)"
" fold-var_62))"
"(let-values(((fold-var_67)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:89:12_68)"
" eval-module10.1)"
"((c18_69)"
" c_64)"
"((ns19_70)"
" ns_9)"
"((declare-name20_71)"
" declare-name_58))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" ns19_70"
" #t"
" declare-name20_71"
" #t"
" #f"
" #f"
" c18_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:89:12_68"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns19_70"
" declare-name20_71)"
" c18_69))))"
"(void)))))"
"(values"
" fold-var_67)))))"
"(if #t"
"(for-loop_61"
" fold-var_65"
"(unsafe-cdr"
" lst_63))"
" fold-var_65))"
" fold-var_62))"
" fold-var_62))))"
" for-loop_61)"
"(void)"
" lst_60)))"
"(let-values(((lst_72) names_57))"
"(begin"
"(if(list? lst_72)"
"(void)"
"(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_74"
" lst_75)"
"(if(pair? lst_75)"
"(let-values(((name_76)"
"(unsafe-car"
" lst_75)))"
"(if #t"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78)"
" fold-var_74))"
"(let-values(((fold-var_79)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_80)"
"(hash-ref"
" dh_12"
" name_76"
" #f)))"
"(begin"
"(if sm-cd_80"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                   \"missing submodule declaration:\""
" name_76)))"
"(let-values(((...nder/eval/module.rkt:93:12_81)"
" eval-module10.1)"
"((sm-cd21_82)"
" sm-cd_80)"
"((ns22_83)"
" ns_9)"
"((declare-name23_84)"
" declare-name_58))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" ns22_83"
" #t"
" declare-name23_84"
" #t"
" #f"
" #f"
" sm-cd21_82)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:93:12_81"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns22_83"
" declare-name23_84)"
" sm-cd21_82))))))"
"(void)))))"
"(values"
" fold-var_79)))))"
"(if #t"
"(for-loop_73"
" fold-var_77"
"(unsafe-cdr"
" lst_75))"
" fold-var_77))"
" fold-var_74))"
" fold-var_74))))"
" for-loop_73)"
"(void)"
" lst_72)))))"
"(void)))))"
"(let-values(((declare-this-module14_36)"
"(lambda(namespace12_85)"
"(let-values(((ns_86) namespace12_85))"
"(let-values()"
"(let-values(((m_87)"
"(let-values(((...nder/eval/module.rkt:101:16_89)"
" make-module36.1)"
"((temp28_90)"
"(1/current-module-declare-source))"
"((original-self29_91)"
" original-self_30)"
"((requires30_92)"
" requires_28)"
"((provides31_93)"
" provides_29)"
"((temp32_94)"
"(decl_17"
" 'language-info))"
"((min-phase33_95)"
" min-phase_22)"
"((max-phase34_96)"
" max-phase_23)"
"((temp35_97)"
"(decl_17"
" 'cross-phase-persistent?))"
"((temp36_98)"
"(append"
" pre-submodule-names_18"
" post-submodule-names_19))"
"((supermodule-name37_99)"
" supermodule-name_11)"
"((temp38_100)"
"(lambda()"
"(get-all-variables"
" phases-h_24)))"
"((temp39_101)"
"(lambda(data-box_103"
" ns_104"
" phase-shift_105"
" self_106"
" bulk-binding-registry_107"
" insp_108)"
"(if(unbox"
" data-box_103)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_103"
" cache-key_21"
" ns_104"
" syntax-literals-linklet_25"
" data-instance_14"
" syntax-literals-data-instance_16"
" phase-shift_105"
" original-self_30"
" self_106"
" bulk-binding-registry_107"
" insp_108"
" create-root-expand-context-from-module_32)))))"
"((temp40_102)"
"(lambda(data-box_109"
" ns_110"
" phase-shift_111"
" phase-level_112"
" self_113"
" bulk-binding-registry_114"
" insp_115)"
"(let-values(((syntax-literals-instance_116)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_109))))"
"(let-values(((phase-linklet_117)"
"(hash-ref"
" phases-h_24"
" phase-level_112"
" #f)))"
"(if phase-linklet_117"
"(let-values()"
"(let-values(((module-uses_118)"
"(hash-ref"
" phase-to-link-modules_31"
" phase-level_112)))"
"(let-values(((import-module-instances_119"
" import-instances_120)"
"(let-values(((mis_123"
" is_124)"
"(let-values(((lst_125)"
" module-uses_118))"
"(begin"
"(if(list?"
" lst_125)"
"(void)"
"(let-values()"
"(in-list"
" lst_125)))"
"((letrec-values(((for-loop_126)"
"(lambda(mis_127"
" is_128"
" lst_129)"
"(if(pair?"
" lst_129)"
"(let-values(((mu_130)"
"(unsafe-car"
" lst_129)))"
"(if #t"
"(let-values(((mis_131"
" is_132)"
"(let-values(((mis_133)"
" mis_127)"
"((is_134)"
" is_128))"
"(let-values(((mis_135"
" is_136)"
"(let-values()"
"(let-values(((mis48_137"
" is49_138)"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:129:46_139)"
" namespace-module-use->module+linklet-instances145.1)"
"((ns50_140)"
" ns_110)"
"((mu51_141)"
" mu_130)"
"((original-self52_142)"
" original-self_30)"
"((self53_143)"
" self_113)"
"((temp54_144)"
"(phase+"
"(phase-"
" phase-level_112"
"(module-use-phase"
" mu_130))"
" phase-shift_111)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances145.1))"
"(namespace-module-use->module+linklet-instances143.1"
" temp54_144"
" original-self52_142"
" #t"
" self53_143"
" #t"
" ns50_140"
" mu51_141)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:129:46_139"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
" 4)"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
"(list"
" temp54_144"
" original-self52_142"
" self53_143)"
" ns50_140"
" mu51_141))))))"
"(values"
"(cons"
" mis48_137"
" mis_133)"
"(cons"
" is49_138"
" is_134))))))"
"(values"
" mis_135"
" is_136)))))"
"(if #t"
"(for-loop_126"
" mis_131"
" is_132"
"(unsafe-cdr"
" lst_129))"
"(values"
" mis_131"
" is_132)))"
"(values"
" mis_127"
" is_128)))"
"(values"
" mis_127"
" is_128)))))"
" for-loop_126)"
" null"
" null"
" lst_125)))))"
"(values"
"(alt-reverse"
" mis_123)"
"(alt-reverse"
" is_124)))))"
"(let-values((()"
"(begin"
"(let-values(((...nder/eval/module.rkt:137:33_145)"
" check-require-access11.1)"
"((phase-linklet41_146)"
" phase-linklet_117)"
"((temp42_147)"
" 2)"
"((module-uses43_148)"
" module-uses_118)"
"((import-module-instances44_149)"
" import-module-instances_119)"
"((insp45_150)"
" insp_115)"
"((extra-inspector46_151)"
" extra-inspector_26)"
"((temp47_152)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_27"
" phase-level_112"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp42_147"
" phase-linklet41_146"
" module-uses43_148"
" import-module-instances44_149"
" insp45_150"
" extra-inspector46_151"
" temp47_152)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:137:33_145"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp42_147)"
" phase-linklet41_146"
" module-uses43_148"
" import-module-instances44_149"
" insp45_150"
" extra-inspector46_151"
" temp47_152)))"
"(values))))"
"(let-values(((module-body-instance-instance_121)"
"(let-values(((...nder/eval/module.rkt:143:35_153)"
" make-module-body-instance-instance18.1)"
"((temp55_154)"
"(lambda(name_155"
" val_156)"
"(namespace-set-transformer!"
" ns_110"
"(sub1"
" phase-level_112)"
" name_155"
" val_156))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-body-instance-instance18.1))"
"(make-module-body-instance-instance16.1"
" temp55_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:143:35_153"
" keyword-procedure-extract"
" '(#:set-transformer!)"
" 2)"
" '(#:set-transformer!)"
"(list"
" temp55_154))))))"
"(let-values(((instantiate-body_122)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_117"
"(list*"
" syntax-literals-instance_116"
" module-body-instance-instance_121"
" import-instances_120)"
"(namespace->instance"
" ns_110"
" phase-level_112)))))"
"(if(zero-phase?"
" phase-level_112)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_111)"
"(let-values()"
"(instantiate-body_122))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_110)"
"(let-values()"
"(instantiate-body_122))))))"
"(let-values()"
"(let-values(((ns-1_157)"
"(namespace->namespace-at-phase"
" ns_110"
"(phase+"
" phase-shift_111"
"(sub1"
" phase-level_112)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(make-expand-context"
" ns-1_157)))"
" 1/current-namespace"
" ns_110"
" current-module-code-inspector"
" insp_115)"
"(let-values()"
"(instantiate-body_122))))))))))))"
"(void)))))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module36.1))"
"(make-module34.1"
" temp35_97"
" #t"
" temp38_100"
" #t"
" temp40_102"
" temp32_94"
" #t"
" max-phase34_96"
" #t"
" min-phase33_95"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp39_101"
" #t"
" #f"
" #f"
" provides31_93"
" requires30_92"
" #t"
" original-self29_91"
" temp28_90"
" #t"
" temp36_98"
" #t"
" supermodule-name37_99"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:101:16_89"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)"
" 2)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)"
"(list"
" temp35_97"
" temp38_100"
" temp40_102"
" temp32_94"
" max-phase34_96"
" min-phase33_95"
" temp39_101"
" provides31_93"
" requires30_92"
" original-self29_91"
" temp28_90"
" temp36_98"
" supermodule-name37_99))))))"
"(let-values(((declare-name_88)"
"(substitute-module-declare-name"
" default-name_20)))"
"(begin"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_33"
" pre-submodule-names_18"
" declare-name_88"
" #t))"
"(void))"
"(let-values(((...nder/eval/module.rkt:178:6_158)"
" declare-module!55.1)"
"((ns24_159) ns_86)"
"((m25_160) m_87)"
"((declare-name26_161)"
" declare-name_88)"
"((with-submodules?27_162)"
" with-submodules?_10))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!55.1))"
"(declare-module!53.1"
" with-submodules?27_162"
" #t"
" ns24_159"
" m25_160"
" declare-name26_161)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:178:6_158"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 5)"
" '(#:with-submodules?)"
"(list with-submodules?27_162)"
" ns24_159"
" m25_160"
" declare-name26_161)))"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_33"
" post-submodule-names_19"
" declare-name_88"
" #f))"
"(void))))))))))"
"(let-values(((unpack15_37)"
"(lambda(given-kws_163 given-args_164)"
"(let-values(((namespace12_165)"
"(car given-args_164)))"
"(declare-this-module14_36 namespace12_165)))))"
"(let-values(((declare-this-module16_38)"
"(lifted/34.1"
"(lambda(given-kws_166 given-argc_167)"
"(if(= given-argc_167 2)"
"(let-values(((l2_168) given-kws_166))"
"(if(pair? l2_168)"
"(if(eq?(car l2_168) '#:namespace)"
"(null?(cdr l2_168))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_169 given-args_170)"
"(unpack15_37 given-kws_169 given-args_170)))"
" '(#:namespace)"
" '(#:namespace))))"
"(begin"
"(if cache-key_21"
"(let-values()"
"(module-cache-set!"
" cache-key_21"
" declare-this-module16_38))"
"(void))"
"(let-values(((...nder/eval/module.rkt:193:2_171)"
" declare-this-module16_38)"
"((ns17_172) ns_9))"
"(if(variable-reference-constant?"
"(#%variable-reference declare-this-module16_38))"
"(declare-this-module14_36 ns17_172)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:193:2_171"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list ns17_172))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack9.1)"
"(lambda(given-kws_174 given-args_175 c7_176)"
"(let-values(((namespace4_177)(if(pair? given-kws_174)(eq? '#:namespace(car given-kws_174)) #f)))"
"(let-values(((namespace1_178)(if namespace4_177(car given-args_175)(void)))"
"((given-kws_179)(if namespace4_177(cdr given-kws_174) given-kws_174))"
"((given-args_180)(if namespace4_177(cdr given-args_175) given-args_175)))"
"(let-values(((supermodule-name6_181)"
"(if(pair? given-kws_179)(eq? '#:supermodule-name(car given-kws_179)) #f)))"
"(let-values(((supermodule-name3_182)(if supermodule-name6_181(car given-args_180)(void)))"
"((given-kws_183)(if supermodule-name6_181(cdr given-kws_179) given-kws_179))"
"((given-args_184)(if supermodule-name6_181(cdr given-args_180) given-args_180)))"
"(let-values(((with-submodules?5_185)(pair? given-kws_183)))"
"(let-values(((with-submodules?2_186)(if with-submodules?5_185(car given-args_184)(void))))"
"(eval-module8.1"
" namespace1_178"
" namespace4_177"
" supermodule-name3_182"
" supermodule-name6_181"
" with-submodules?2_186"
" with-submodules?5_185"
" c7_176)))))))))"
"(define-values"
"(eval-module10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_187 given-argc_188)"
"(if(= given-argc_188 3)"
"(let-values(((l1_189) given-kws_187))"
"(let-values(((l1_190)(if(null? l1_189) l1_189(if(eq?(car l1_189) '#:namespace)(cdr l1_189) l1_189))))"
"(let-values(((l1_191) l1_190))"
"(let-values(((l1_192)"
"(if(null? l1_191) l1_191(if(eq?(car l1_191) '#:supermodule-name)(cdr l1_191) l1_191))))"
"(let-values(((l1_193) l1_192))"
"(let-values(((l1_194)"
"(if(null? l1_193)"
" l1_193"
"(if(eq?(car l1_193) '#:with-submodules?)(cdr l1_193) l1_193))))"
"(null? l1_194)))))))"
" #f))"
"(case-lambda((given-kws_195 given-args_196 c_197)(unpack9.1 given-kws_195 given-args_196 c_197)))"
" null"
" '(#:namespace #:supermodule-name #:with-submodules?)"
"(let-values(((eval-module_198)(case-lambda((c_199)(unpack9.1 null null c_199))))) eval-module_198)))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_200 make-_201 ?_202 -ref_203 -set!_204)"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data))))"
"(values"
" struct:_200"
" make-_201"
" ?_202"
"(make-struct-field-accessor -ref_203 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_203 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_226"
" cache-key_227"
" ns_228"
" syntax-literals-linklet_229"
" data-instance_230"
" syntax-literals-data-instance_231"
" phase-shift_232"
" original-self_233"
" self_234"
" bulk-binding-registry_235"
" insp_236"
" create-root-expand-context-from-module_237)"
"(let-values(((inst_238)"
"(let-values(((...nder/eval/module.rkt:205:4_241) make-instance-instance13.1)"
"((ns58_242) ns_228)"
"((phase-shift59_243) phase-shift_232)"
"((self60_244) self_234)"
"((insp61_245) insp_236)"
"((temp62_246)"
"                                (lambda (name_247 val_248) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(if(variable-reference-constant?(#%variable-reference make-instance-instance13.1))"
"(make-instance-instance11.1 insp61_245 ns58_242 phase-shift59_243 self60_244 temp62_246)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:205:4_241"
" keyword-procedure-extract"
" '(#:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" 2)"
" '(#:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
"(list insp61_245 ns58_242 phase-shift59_243 self60_244 temp62_246))))))"
"(let-values(((syntax-literals-instance_239)"
"(1/instantiate-linklet"
" syntax-literals-linklet_229"
"(list deserialize-instance data-instance_230 syntax-literals-data-instance_231 inst_238))))"
"(let-values((()"
"(begin"
"(set-box! data-box_226(instance-data11.1 syntax-literals-instance_239 cache-key_227))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_240)"
"(1/instance-variable-value syntax-literals-instance_239 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_240 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_228"
"(delay"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))))"
"(if(procedure? get-encoded-root-expand-ctx_240)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_228"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_240))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_228"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_237"
" ns_228"
" phase-shift_232"
" original-self_233"
" self_234)))))))))))))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_249)"
"(let-values(((ld/h_250)(if(compiled-in-memory? c_249)(compiled-in-memory-linklet-directory c_249) c_249)))"
"(let-values(((dh_251)"
"(if(1/linklet-directory? ld/h_250)"
"(let-values()(1/linklet-directory->hash ld/h_250))"
"(let-values() #f))))"
"(let-values(((h_252)(1/linklet-bundle->hash(if dh_251(hash-ref dh_251 #f) ld/h_250))))"
"(let-values(((data-instance_253)"
"(if(compiled-in-memory? c_249)"
"(make-data-instance-from-compiled-in-memory c_249)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_252 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_254)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_252 'decl))"
"(list deserialize-instance data-instance_253))))"
"(values dh_251 h_252 data-instance_253 declaration-instance_254))))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_255)"
"(let-values(((dh_256 h_257 data-instance_258 declaration-instance_259)"
"(compiled-module->dh+h+data-instance+declaration-instance c_255)))"
" declaration-instance_259)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_260)"
"(let-values(((dh_261 h_262 data-instance_263 declaration-instance_264)"
"(compiled-module->dh+h+data-instance+declaration-instance c_260)))"
"(values h_262 declaration-instance_264))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_265)(1/make-instance 'data #f mpi-vector-id(compiled-in-memory-mpis cim_265))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_266)"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literalss cim_266))))"
"(define-values"
"(make-declaration-context-instance)"
"(lambda(ns_267)"
"(1/make-instance"
" 'declaration-context"
" #f"
" inspector-id"
"(current-code-inspector)"
" bulk-binding-registry-id"
"(namespace-bulk-binding-registry ns_267))))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_268)"
"(let-values(((ht_269) phases-h_268))"
"(begin"
"(if((lambda(ht_270)(hash? ht_270)) ht_269)(void)(let-values()(default-in-hash ht_269)))"
"((letrec-values(((for-loop_271)"
"(lambda(table_272 i_273)"
"(if i_273"
"(let-values(((phase_274 linklet_275)(hash-iterate-key+value ht_269 i_273)))"
"(if #t"
"(let-values(((table_276)"
"(let-values(((table_277) table_272))"
"(let-values(((table_278)"
"(let-values()"
"(let-values(((key_279 val_280)"
"(let-values()"
"(values"
" phase_274"
"(1/linklet-export-variables"
" linklet_275)))))"
"(hash-set table_277 key_279 val_280)))))"
"(values table_278)))))"
"(if #t(for-loop_271 table_276(hash-iterate-next ht_269 i_273)) table_276))"
" table_272))"
" table_272))))"
" for-loop_271)"
" '#hash()"
"(hash-iterate-first ht_269))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_1 insp_2)"
"(syntax-map"
" s_1"
"(lambda(tail?_3 d_4) d_4)"
"(lambda(s_5 d_6)"
"(let-values(((the-struct_7) s_5))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8) d_6)"
"((inspector2_9)"
"(let-values(((or-part_10)(syntax-inspector s_5)))(if or-part_10 or-part_10 insp_2))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
" inspector2_9"
"(syntax-tamper the-struct_7)))"
"           (raise-argument-error 'struct-copy \"syntax?\" the-struct_7))))"
" syntax-content)))"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_1 phase_2)"
"(let-values(((s-scs_3)(syntax-scope-set s_1 phase_2)))"
"(let-values(((ht_4) s-scs_3))"
"(begin"
"(if((lambda(ht_5)(if(hash? ht_5)(immutable? ht_5) #f)) ht_4)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_4)))"
"((letrec-values(((for-loop_6)"
"(lambda(syms_7 i_8)"
"(if i_8"
"(let-values(((sc_9)(unsafe-immutable-hash-iterate-key ht_4 i_8)))"
"(if #t"
"(let-values(((syms_10)"
"(let-values(((syms_11) syms_7))"
"(let-values(((syms_12)"
"(let-values()"
"(set-union"
" syms_11"
"(binding-table-symbols"
"(scope-binding-table sc_9)"
" s-scs_3"
" s_1"
" null)))))"
"(values syms_12)))))"
"(if #t"
"(for-loop_6 syms_10(unsafe-immutable-hash-iterate-next ht_4 i_8))"
" syms_10))"
" syms_7))"
" syms_7))))"
" for-loop_6)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_4)))))))"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values(((src-namespace_6) src-namespace3_2))"
"(let-values(((mod-path_7) mod-path4_3))"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:14:2_9) do-attach-module21.1)"
"((temp22_10) 'namespace-attach-module)"
"((src-namespace23_11) src-namespace_6)"
"((mod-path24_12) mod-path_7)"
"((dest-namespace25_13) dest-namespace_8)"
"((temp26_14) #t))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp26_14"
" #t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:14:2_9"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp26_14)"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13))))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 #f #f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values(((src-namespace_25) src-namespace9_21))"
"(let-values(((mod-path_26) mod-path10_22))"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:21:2_28) do-attach-module21.1)"
"((temp27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_25)"
"((mod-path29_31) mod-path_26)"
"((dest-namespace30_32) dest-namespace_27)"
"((temp31_33) #f))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp31_33"
" #t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:21:2_28"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp31_33)"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32))))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 #f #f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values(((who_45) who15_41))"
"(let-values(((src-namespace_46) src-namespace16_42))"
"(let-values(((mod-path_47) mod-path17_43))"
"(let-values(((dest-namespace_48) dest-namespace18_44))"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
"                                  (let-values () (raise-argument-error who_45 \"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_47)"
"(void)"
"                                    (let-values () (raise-argument-error who_45 \"module-path?\" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
"                                      (let-values () (raise-argument-error who_45 \"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_50"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_54)"
"(lambda(mpi_55"
" phase_56"
" attach-instances?_57"
" attach-phase_58)"
"(let-values(((mod-name_59)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_55)))))"
"(let-values(((attach-this-instance?_60)"
"(if attach-instances?_57"
"(eqv? phase_56 attach-phase_58)"
" #f)))"
"(let-values(((m-ns_61)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_59"
" '#hasheqv())"
" phase_56"
" missing_52)))"
"(if(let-values(((or-part_62)"
"(eq? missing_52 m-ns_61)))"
"(if or-part_62"
" or-part_62"
"(if attach-this-instance?_60"
"(not m-ns_61)"
" #f)))"
"(let-values()"
"(let-values(((m_63)"
"(namespace->module"
" src-namespace_46"
" mod-name_59)))"
"(begin"
"(if m_63"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_59)))"
"(if(if(module-cross-phase-persistent?"
" m_63)"
"(if(not(label-phase? phase_56))"
"(not(zero-phase? phase_56))"
" #f)"
" #f)"
"(let-values()"
"(loop_54"
" mpi_55"
" 0"
" attach-instances?_57"
" 0))"
"(let-values()"
"(let-values(((already-m_64)"
"(namespace->module"
" dest-namespace_48"
" mod-name_59)))"
"(let-values((()"
"(begin"
"(if(if already-m_64"
"(not"
"(eq?"
" already-m_64"
" m_63))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_59))"
"(void))"
"(values))))"
"(let-values(((m-ns_65"
" already?_66)"
"(if attach-this-instance?_60"
"(let-values()"
"(let-values(((m-ns_67)"
"(let-values(((src-namespace32_69)"
" src-namespace_46)"
"((mod-name33_70)"
" mod-name_59)"
"((phase34_71)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_69"
" mod-name33_70"
" phase34_71)"
"(namespace->module-namespace81.1"
" src-namespace32_69"
" mod-name33_70"
" phase34_71)))))"
"(let-values((()"
"(begin"
"(if m-ns_67"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_59)))"
"(values))))"
"(let-values(((already-m-ns_68)"
"(if already-m_64"
"(let-values(((dest-namespace35_72)"
" dest-namespace_48)"
"((mod-name36_73)"
" mod-name_59)"
"((phase37_74)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_72"
" mod-name36_73"
" phase37_74)"
"(namespace->module-namespace81.1"
" dest-namespace35_72"
" mod-name36_73"
" phase37_74)))"
" #f)))"
"(begin"
"(if(if already-m-ns_68"
"(if(not"
"(eq?"
" m-ns_67"
" already-m-ns_68))"
"(not"
"(namespace-same-instance?"
" m-ns_67"
" already-m-ns_68))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_59))"
"(void))"
"(values"
" m-ns_67"
"(if already-m-ns_68"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_56)"
"(not"
"(let-values(((src-namespace38_75)"
" src-namespace_46)"
"((mod-name39_76)"
" mod-name_59)"
"((phase40_77)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_75"
" mod-name39_76"
" phase40_77)"
"(namespace->module-namespace81.1"
" src-namespace38_75"
" mod-name39_76"
" phase40_77))))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values(((src-namespace41_78)"
" src-namespace_46)"
"((mpi42_79)"
" mpi_55)"
"((phase43_80)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_78"
" mpi42_79"
" phase43_80)"
"(namespace-module-instantiate!95.1"
" src-namespace41_78"
" mpi42_79"
" phase43_80))))))"
"(void))"
"(values"
" #f"
"(if already-m_64"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_59"
"(lambda(ht_81)"
"(hash-set"
" ht_81"
" phase_56"
" m-ns_65))"
" '#hasheqv())"
"(if already?_66"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_82)"
"(module-requires"
" m_63)))"
"(begin"
"(if(list? lst_82)"
"(void)"
"(let-values()"
"(in-list"
" lst_82)))"
"((letrec-values(((for-loop_83)"
"(lambda(fold-var_84"
" lst_85)"
"(if(pair?"
" lst_85)"
"(let-values(((phase+reqs_86)"
"(unsafe-car"
" lst_85)))"
"(if #t"
"(let-values(((fold-var_87)"
"(let-values(((lst_88)"
"(cdr"
" phase+reqs_86)))"
"(begin"
"(if(list?"
" lst_88)"
"(void)"
"(let-values()"
"(in-list"
" lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(fold-var_90"
" lst_91)"
"(if(pair?"
" lst_91)"
"(let-values(((req_92)"
"(unsafe-car"
" lst_91)))"
"(if #t"
"(let-values(((fold-var_93)"
"(let-values(((fold-var_94)"
" fold-var_90))"
"(let-values(((fold-var_95)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(module-path-index-shift"
" req_92"
"(module-self"
" m_63)"
" mpi_55)"
"(phase+"
" phase_56"
"(car"
" phase+reqs_86))"
" attach-instances?_57"
" attach-phase_58))"
"(void)))))"
"(values"
" fold-var_95)))))"
"(if #t"
"(for-loop_89"
" fold-var_93"
"(unsafe-cdr"
" lst_91))"
" fold-var_93))"
" fold-var_90))"
" fold-var_90))))"
" for-loop_89)"
" fold-var_84"
" lst_88)))))"
"(if #t"
"(for-loop_83"
" fold-var_87"
"(unsafe-cdr"
" lst_85))"
" fold-var_87))"
" fold-var_84))"
" fold-var_84))))"
" for-loop_83)"
"(void)"
" lst_82)))"
"(let-values(((lst_96)"
"(module-submodule-names"
" m_63)))"
"(begin"
"(if(list? lst_96)"
"(void)"
"(let-values()"
"(in-list"
" lst_96)))"
"((letrec-values(((for-loop_97)"
"(lambda(fold-var_98"
" lst_99)"
"(if(pair?"
" lst_99)"
"(let-values(((submod-name_100)"
"(unsafe-car"
" lst_99)))"
"(if #t"
"(let-values(((fold-var_101)"
"(let-values(((fold-var_102)"
" fold-var_98))"
"(let-values(((fold-var_103)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                       \".\""
" submod-name_100)"
" mpi_55)"
" #f"
" #f"
" attach-phase_58))"
"(void)))))"
"(values"
" fold-var_103)))))"
"(if #t"
"(for-loop_97"
" fold-var_101"
"(unsafe-cdr"
" lst_99))"
" fold-var_101))"
" fold-var_98))"
" fold-var_98))))"
" for-loop_97)"
"(void)"
" lst_96)))"
"(if(module-supermodule-name"
" m_63)"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_55)"
" #f"
" #f"
" attach-phase_58))"
"(void))))))))))))))"
"(void))))))))"
" loop_54)"
"(1/module-path-index-join mod-path_47 #f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_104) todo_51))"
"(begin"
"(if((lambda(ht_105)(hash? ht_105)) ht_104)"
"(void)"
"(let-values()(default-in-hash ht_104)))"
"((letrec-values(((for-loop_106)"
"(lambda(fold-var_107 i_108)"
"(if i_108"
"(let-values(((mod-name_109 phases_110)"
"(hash-iterate-key+value"
" ht_104"
" i_108)))"
"(if #t"
"(let-values(((fold-var_111)"
"(let-values(((ht_112)"
" phases_110))"
"(begin"
"(if((lambda(ht_113)"
"(hash? ht_113))"
" ht_112)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_112)))"
"((letrec-values(((for-loop_114)"
"(lambda(fold-var_115"
" i_116)"
"(if i_116"
"(let-values(((phase_117"
" m-ns_118)"
"(hash-iterate-key+value"
" ht_112"
" i_116)))"
"(if #t"
"(let-values(((fold-var_119)"
"(let-values(((fold-var_120)"
" fold-var_115))"
"(let-values(((fold-var_121)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_122)"
"(namespace->module"
" src-namespace_46"
" mod-name_109)))"
"(begin"
"(let-values(((dest-namespace44_123)"
" dest-namespace_48)"
"((m45_124)"
" m_122)"
"((mod-name46_125)"
" mod-name_109))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!55.1))"
"(declare-module!53.1"
" #f"
" #f"
" dest-namespace44_123"
" m45_124"
" mod-name46_125)"
"(declare-module!55.1"
" dest-namespace44_123"
" m45_124"
" mod-name46_125)))"
"(if m-ns_118"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_46"
" mod-name_109"
" phase_117)"
"(let-values(((or-part_126)"
"(let-values(((dest-namespace47_127)"
" dest-namespace_48)"
"((mod-name48_128)"
" mod-name_109)"
"((phase49_129)"
" phase_117))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_127"
" mod-name48_128"
" phase49_129)"
"(namespace->module-namespace81.1"
" dest-namespace47_127"
" mod-name48_128"
" phase49_129)))))"
"(if or-part_126"
" or-part_126"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_109"
" phase_117"
" m_122"
" m-ns_118)))))"
"(void)))))"
"(void)))))"
"(values"
" fold-var_121)))))"
"(if #t"
"(for-loop_114"
" fold-var_119"
"(hash-iterate-next"
" ht_112"
" i_116))"
" fold-var_119))"
" fold-var_115))"
" fold-var_115))))"
" for-loop_114)"
" fold-var_107"
"(hash-iterate-first"
" ht_112))))))"
"(if #t"
"(for-loop_106"
" fold-var_111"
"(hash-iterate-next ht_104 i_108))"
" fold-var_111))"
" fold-var_107))"
" fold-var_107))))"
" for-loop_106)"
"(void)"
"(hash-iterate-first ht_104))))"
"(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(let-values(((ht_130) todo_51))"
"(begin"
"(if((lambda(ht_131)(hash? ht_131)) ht_130)"
"(void)"
"(let-values()(default-in-hash-keys ht_130)))"
"((letrec-values(((for-loop_132)"
"(lambda(fold-var_133 i_134)"
"(if i_134"
"(let-values(((mod-name_135)"
"(hash-iterate-key ht_130 i_134)))"
"(if #t"
"(let-values(((fold-var_136)"
"(let-values(((fold-var_137)"
" fold-var_133))"
"(let-values(((fold-var_138)"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_135"
" src-namespace_46))"
"(void)))))"
"(values fold-var_138)))))"
"(if #t"
"(for-loop_132"
" fold-var_136"
"(hash-iterate-next ht_130 i_134))"
" fold-var_136))"
" fold-var_133))"
" fold-var_133))))"
" for-loop_132)"
"(void)"
"(hash-iterate-first ht_130))))))))))))))))))))))))"
"(define-values"
"(unpack20.1)"
"(lambda(given-kws_139 given-args_140 who15_141 src-namespace16_142 mod-path17_143 dest-namespace18_144)"
"(let-values(((attach-instances?14_145)(pair? given-kws_139)))"
"(let-values(((attach-instances?13_146)(if attach-instances?14_145(car given-args_140)(void))))"
"(do-attach-module19.1"
" attach-instances?13_146"
" attach-instances?14_145"
" who15_141"
" src-namespace16_142"
" mod-path17_143"
" dest-namespace18_144)))))"
"(define-values"
"(do-attach-module21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_147 given-argc_148)"
"(if(= given-argc_148 6)"
"(let-values(((l1_149) given-kws_147))"
"(let-values(((l1_150)"
"(if(null? l1_149) l1_149(if(eq?(car l1_149) '#:attach-instances?)(cdr l1_149) l1_149))))"
"(null? l1_150)))"
" #f))"
"(case-lambda"
"((given-kws_151 given-args_152 who_153 src-namespace_154 mod-path_155 dest-namespace_156)"
"(unpack20.1 given-kws_151 given-args_152 who_153 src-namespace_154 mod-path_155 dest-namespace_156)))"
" null"
" '(#:attach-instances?)"
"(let-values(((do-attach-module_157)"
"(case-lambda"
"((who_158 src-namespace_159 mod-path_160 dest-namespace_161)"
"(unpack20.1 null null who_158 src-namespace_159 mod-path_160 dest-namespace_161)))))"
" do-attach-module_157)))"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_2)(1/current-namespace)))"
"(let-values(((phase_3)(namespace-phase current-ns_2)))"
"(let-values(((ns_4)(namespace->namespace-at-phase(make-namespace) phase_3)))"
"(begin"
"(1/namespace-attach-module current-ns_2 ''#%kernel ns_4)"
"(namespace-primitive-module-visit! ns_4 '#%kernel)"
" ns_4))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_5)"
"(lambda(s3_6 ns1_7 ns2_8)"
"(let-values(((s_9) s3_6))"
"(let-values(((ns_10)(if ns2_8 ns1_7(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_9)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_10)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_10)))"
"(values))))"
"(let-values(((root-ctx_11)(namespace-get-root-expand-ctx ns_10)))"
"(let-values(((post-scope_12)(root-expand-context-post-expansion-scope root-ctx_11)))"
"(let-values(((other-namespace-scopes_13)"
"(alt-reverse"
"(let-values(((ht_16)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_11)"
"(namespace-phase ns_10))))"
"(begin"
"(if((lambda(ht_17)(if(hash? ht_17)(immutable? ht_17) #f)) ht_16)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_16)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 i_20)"
"(if i_20"
"(let-values(((sc_21)"
"(unsafe-immutable-hash-iterate-key"
" ht_16"
" i_20)))"
"(if #t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_19))"
"(if(equal?"
" sc_21"
" post-scope_12)"
" fold-var_23"
"(let-values(((fold-var_24)"
" fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
" sc_21)"
" fold-var_24))))"
"(values"
" fold-var_25)))))))"
"(if #t"
"(for-loop_18"
" fold-var_22"
"(unsafe-immutable-hash-iterate-next"
" ht_16"
" i_20))"
" fold-var_22))"
" fold-var_19))"
" fold-var_19))))"
" for-loop_18)"
" null"
"(unsafe-immutable-hash-iterate-first ht_16)))))))"
"(let-values(((add-ns-scopes_14)"
"(lambda(s_26)"
"(syntax-set-inspector"
"(syntax-transfer-shifts"
"(add-scopes"
"(push-scope s_26 post-scope_12)"
" other-namespace-scopes_13)"
"(root-expand-context-all-scopes-stx root-ctx_11))"
"(let-values(((or-part_27)(namespace-declaration-inspector ns_10)))"
"(if or-part_27 or-part_27(current-code-inspector)))))))"
"(let-values(((maybe-module-id_15)"
"(if(pair?(1/syntax-e s_9))"
"(if(identifier?(car(1/syntax-e s_9)))"
"(add-ns-scopes_14(car(1/syntax-e s_9)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_15"
"(1/free-identifier=?"
" maybe-module-id_15"
"(1/namespace-module-identifier ns_10))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_9"
"(cons maybe-module-id_15(cdr(1/syntax-e s_9)))"
" s_9"
" s_9))"
"(let-values()(add-ns-scopes_14 s_9))))))))))))))))"
"(case-lambda"
"((s_28)(namespace-syntax-introduce4_5 s_28 #f #f))"
"((s_29 ns1_30)(namespace-syntax-introduce4_5 s_29 ns1_30 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_31)"
"(lambda(where6_32 where7_33)"
"(let-values(((where_34)(if where7_33 where6_32(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_35)(1/namespace? where_34)))"
"(if or-part_35 or-part_35(phase? where_34)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_34)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_34)(namespace-phase where_34) where_34))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_31 #f #f))"
"((where6_36)(namespace-module-identifier8_31 where6_36 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_37)"
"(begin"
"      (if (symbol? sym_37) (void) (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_37)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_37)))))"
"(define-values"
"(lifted/1.1$7)"
"(make-required"
" 'do-namespace-require"
"(case-lambda((self_38 who_39 req_40 ns_41)(apply missing-kw self_38 who_39 req_40 ns_41 null)))"
" #f"
" #f))"
"(define-values"
"(do-namespace-require17.1)"
"(lambda(run?10_42 visit?11_43 who14_44 req15_45 ns16_46)"
"(let-values(((run?_47) run?10_42))"
"(let-values(((visit?_48) visit?11_43))"
"(let-values(((who_49) who14_44))"
"(let-values(((req_50) req15_45))"
"(let-values(((ns_51) ns16_46))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_51)"
"(void)"
"                                  (let-values () (raise-argument-error who_49 \"namespace?\" ns_51)))"
"(values))))"
"(let-values(((ctx-stx_52)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_51)))))"
"(if(let-values(((or-part_53)(1/module-path-index? req_50)))"
"(if or-part_53 or-part_53(1/module-path? req_50)))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:113:4_54) perform-require!48.1)"
"((temp70_55)"
"(if(1/module-path-index? req_50) req_50(1/module-path-index-join req_50 #f)))"
"((temp71_56) #f)"
"((temp72_57) #f)"
"((ctx-stx73_58) ctx-stx_52)"
"((ns74_59) ns_51)"
"((run?75_60) run?_47)"
"((visit?76_61) visit?_48)"
"((temp77_62)(namespace-phase ns_51))"
"((temp78_63)(namespace-phase ns_51)))"
"(if(variable-reference-constant?(#%variable-reference perform-require!48.1))"
"(perform-require!46.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp77_62"
" #f"
" #f"
" temp78_63"
" run?75_60"
" #t"
" visit?76_61"
" #t"
" temp70_55"
" temp71_56"
" temp72_57"
" ctx-stx73_58"
" ns74_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:113:4_54"
" keyword-procedure-extract"
" '(#:phase-shift #:run-phase #:run? #:visit?)"
" 7)"
" '(#:phase-shift #:run-phase #:run? #:visit?)"
"(list temp77_62 temp78_63 run?75_60 visit?76_61)"
" temp70_55"
" temp71_56"
" temp72_57"
" ctx-stx73_58"
" ns74_59))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:124:4_64) parse-and-perform-requires!22.1)"
"((run?79_65) run?_47)"
"((visit?80_66) visit?_48)"
"((temp81_67)(list(1/datum->syntax ctx-stx_52 req_50)))"
"((temp82_68) #f)"
"((ns83_69) ns_51)"
"((temp84_70)(namespace-phase ns_51))"
"((temp85_71)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" run?79_65"
" #t"
" #f"
" #f"
" visit?80_66"
" #t"
" temp81_67"
" temp82_68"
" ns83_69"
" temp84_70"
" temp85_71)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:124:4_64"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 7)"
" '(#:run? #:visit?)"
"(list run?79_65 visit?80_66)"
" temp81_67"
" temp82_68"
" ns83_69"
" temp84_70"
" temp85_71)))))))))))))))"
"(define-values"
"(unpack18.1$1)"
"(lambda(given-kws_72 given-args_73 who14_74 req15_75 ns16_76)"
"(let-values(((run?10_77)(car given-args_73))"
"((given-kws_78)(cdr given-kws_72))"
"((given-args_79)(cdr given-args_73)))"
"(let-values(((visit?11_80)(car given-args_79)))"
"(do-namespace-require17.1 run?10_77 visit?11_80 who14_74 req15_75 ns16_76)))))"
"(define-values"
"(do-namespace-require19.1)"
"(lifted/1.1$7"
"(lambda(given-kws_81 given-argc_82)"
"(if(= given-argc_82 5)"
"(let-values(((l2_83) given-kws_81))"
"(if(pair? l2_83)"
"(if(eq?(car l2_83) '#:run?)"
"(let-values(((l2_84)(cdr l2_83)))"
"(if(pair? l2_84)(if(eq?(car l2_84) '#:visit?)(null?(cdr l2_84)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_85 given-args_86 who_87 req_88 ns_89)(unpack18.1$1 given-kws_85 given-args_86 who_87 req_88 ns_89)))"
" '(#:run? #:visit?)"
" '(#:run? #:visit?)))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require23_90)"
"(lambda(req22_91 ns20_92 ns21_93)"
"(let-values(((req_94) req22_91))"
"(let-values(((ns_95)(if ns21_93 ns20_92(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:133:2_96) do-namespace-require19.1)"
"((temp86_97) #t)"
"((temp87_98) #f)"
"((temp88_99) 'namespace-require)"
"((req89_100) req_94)"
"((ns90_101) ns_95))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require19.1))"
"(do-namespace-require17.1 temp86_97 temp87_98 temp88_99 req89_100 ns90_101)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:133:2_96"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 5)"
" '(#:run? #:visit?)"
"(list temp86_97 temp87_98)"
" temp88_99"
" req89_100"
" ns90_101)))))))))"
"(case-lambda"
"((req_102)(namespace-require23_90 req_102 #f #f))"
"((req_103 ns20_104)(namespace-require23_90 req_103 ns20_104 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time28_105)"
"(lambda(req27_106 ns25_107 ns26_108)"
"(let-values(((req_109) req27_106))"
"(let-values(((ns_110)(if ns26_108 ns25_107(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:136:2_111) do-namespace-require19.1)"
"((temp91_112) #f)"
"((temp92_113) #t)"
"((temp93_114) 'namespace-require/expansion-time)"
"((req94_115) req_109)"
"((ns95_116) ns_110))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require19.1))"
"(do-namespace-require17.1 temp91_112 temp92_113 temp93_114 req94_115 ns95_116)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:136:2_111"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 5)"
" '(#:run? #:visit?)"
"(list temp91_112 temp92_113)"
" temp93_114"
" req94_115"
" ns95_116)))))))))"
"(case-lambda"
"((req_117)(namespace-require/expansion-time28_105 req_117 #f #f))"
"((req_118 ns25_119)(namespace-require/expansion-time28_105 req_118 ns25_119 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant33_120)"
"(lambda(req32_121 ns30_122 ns31_123)"
"(let-values(((req_124) req32_121))"
"(let-values(((ns_125)(if ns31_123 ns30_122(1/current-namespace))))"
"(let-values()(1/namespace-require req_124 ns_125)))))))"
"(case-lambda"
"((req_126)(namespace-require/constant33_120 req_126 #f #f))"
"((req_127 ns30_128)(namespace-require/constant33_120 req_127 ns30_128 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy38_129)"
"(lambda(req37_130 ns35_131 ns36_132)"
"(let-values(((req_133) req37_130))"
"(let-values(((ns_134)(if ns36_132 ns35_131(1/current-namespace))))"
"(let-values()(1/namespace-require req_133 ns_134)))))))"
"(case-lambda"
"((req_135)(namespace-require/copy38_129 req_135 #f #f))"
"((req_136 ns35_137)(namespace-require/copy38_129 req_136 ns35_137 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value47_138)"
"(lambda(sym46_139"
" use-mapping?40_140"
" failure-thunk41_141"
" ns42_142"
" use-mapping?43_143"
" failure-thunk44_144"
" ns45_145)"
"(let-values(((sym_146) sym46_139))"
"(let-values(((use-mapping?_147)(if use-mapping?43_143 use-mapping?40_140 #f)))"
"(let-values(((failure-thunk_148)(if failure-thunk44_144 failure-thunk41_141 #f)))"
"(let-values(((ns_149)(if ns45_145 ns42_142(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_146)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_146)))"
"(if(let-values(((or-part_150)(not failure-thunk_148)))"
"(if or-part_150"
" or-part_150"
"(if(procedure? failure-thunk_148)"
"(procedure-arity-includes? failure-thunk_148 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                   \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_148)))"
"(if(1/namespace? ns_149)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_149)))"
"((call/ec"
"(lambda(escape_151)"
"(let-values(((var-ns_152 var-phase-level_153 var-sym_154)"
"(if use-mapping?_147"
"(let-values()"
"(let-values(((id_156)(1/datum->syntax #f sym_146)))"
"(let-values(((b_157)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_156 ns_149)"
"(namespace-phase ns_149)"
" ns_149)))"
"(let-values(((v_158)"
"(if b_157"
"(let-values(((b96_159) b_157)"
"((empty-env97_160) empty-env)"
"((null98_161) null)"
"((ns99_162) ns_149)"
"((temp100_163)"
"(namespace-phase ns_149))"
"((id101_164) id_156))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" binding-lookup48.1))"
"(binding-lookup46.1"
" #f"
" #f"
" #f"
" #f"
" b96_159"
" empty-env97_160"
" null98_161"
" ns99_162"
" temp100_163"
" id101_164)"
"(binding-lookup48.1"
" b96_159"
" empty-env97_160"
" null98_161"
" ns99_162"
" temp100_163"
" id101_164)))"
" variable)))"
"(begin"
"(if(variable? v_158)"
"(void)"
"(let-values()"
"(escape_151"
"(let-values(((or-part_165) failure-thunk_148))"
"(if or-part_165"
" or-part_165"
"(lambda()"
"(raise"
"(make-exn:fail:syntax"
"(format"
"(string-append"
"                                                                           \"namespace-variable-value: bound to syntax\\n\""
"                                                                           \"  in: ~s\")"
" sym_146)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_157)"
"(values"
"(let-values(((ns102_166) ns_149)"
"((temp103_167)"
"(module-binding-module b_157))"
"((temp104_168)"
"(phase-"
"(namespace-phase ns_149)"
"(module-binding-phase b_157))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns102_166"
" temp103_167"
" temp104_168)"
"(namespace->module-namespace81.1"
" ns102_166"
" temp103_167"
" temp104_168)))"
"(module-binding-phase b_157)"
"(module-binding-sym b_157))"
"(values ns_149(namespace-phase ns_149) sym_146)))))))"
"(let-values()(values ns_149(namespace-phase ns_149) sym_146)))))"
"(let-values(((val_155)"
"(namespace-get-variable"
" var-ns_152"
" var-phase-level_153"
" var-sym_154"
"(lambda()"
"(escape_151"
"(let-values(((or-part_169) failure-thunk_148))"
"(if or-part_169"
" or-part_169"
"(raise"
" exn:fail:contract:variable"
"(format"
"(string-append"
"                                                             \"namespace-variable-value: given name is not defined\\n\""
"                                                             \"  name: ~s\"))"
" sym_146))))))))"
"(lambda() val_155)))))))))))))))"
"(case-lambda"
"((sym_170)(namespace-variable-value47_138 sym_170 #f #f #f #f #f #f))"
"((sym_171 use-mapping?_172 failure-thunk_173 ns42_174)"
"(namespace-variable-value47_138 sym_171 use-mapping?_172 failure-thunk_173 ns42_174 #t #t #t))"
"((sym_175 use-mapping?_176 failure-thunk41_177)"
"(namespace-variable-value47_138 sym_175 use-mapping?_176 failure-thunk41_177 #f #t #t #f))"
"((sym_178 use-mapping?40_179)(namespace-variable-value47_138 sym_178 use-mapping?40_179 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!55_180)"
"(lambda(sym53_181 val54_182 map?49_183 ns50_184 map?51_185 ns52_186)"
"(let-values(((sym_187) sym53_181))"
"(let-values(((val_188) val54_182))"
"(let-values(((map?_189)(if map?51_185 map?49_183 #f)))"
"(let-values(((ns_190)(if ns52_186 ns50_184(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_187)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_187)))"
"(if(1/namespace? ns_190)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_190)))"
"(namespace-set-variable! ns_190(namespace-phase ns_190) sym_187 val_188)"
"(if map?_189"
"(let-values()"
"(let-values(((id_191)(1/datum->syntax #f sym_187)))"
"(let-values(((temp105_192)(1/namespace-syntax-introduce id_191 ns_190))"
"((temp106_193)"
"(let-values(((temp108_195)(namespace-mpi ns_190))"
"((temp109_196)(namespace-phase ns_190))"
"((sym110_197) sym_187))"
"(if(variable-reference-constant?"
"(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp108_195"
" temp109_196"
" sym110_197)"
"(make-module-binding22.1 temp108_195 temp109_196 sym110_197))))"
"((temp107_194)(namespace-phase ns_190)))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f temp105_192 temp106_193 temp107_194)"
"(add-binding!17.1 temp105_192 temp106_193 temp107_194)))))"
"(void)))))))))))"
"(case-lambda"
"((sym_198 val_199)(namespace-set-variable-value!55_180 sym_198 val_199 #f #f #f #f))"
"((sym_200 val_201 map?_202 ns50_203)(namespace-set-variable-value!55_180 sym_200 val_201 map?_202 ns50_203 #t #t))"
"((sym_204 val_205 map?49_206)(namespace-set-variable-value!55_180 sym_204 val_205 map?49_206 #f #t #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!60_207)"
"(lambda(sym59_208 ns57_209 ns58_210)"
"(let-values(((sym_211) sym59_208))"
"(let-values(((ns_212)(if ns58_210 ns57_209(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_211)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_211)))"
"(if(1/namespace? ns_212)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_212)))"
"(namespace-unset-variable! ns_212(namespace-phase ns_212) sym_211))))))))"
"(case-lambda"
"((sym_213)(namespace-undefine-variable!60_207 sym_213 #f #f))"
"((sym_214 ns57_215)(namespace-undefine-variable!60_207 sym_214 ns57_215 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols64_216)"
"(lambda(ns62_217 ns63_218)"
"(let-values(((ns_219)(if ns63_218 ns62_217(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_219)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_219)))"
"(set->list"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_219))"
"(namespace-phase ns_219)))))))))"
"(case-lambda"
"(()(namespace-mapped-symbols64_216 #f #f))"
"((ns62_220)(namespace-mapped-symbols64_216 ns62_220 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase68_221)"
"(lambda(ns66_222 ns67_223)"
"(let-values(((ns_224)(if ns67_223 ns66_222(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_224)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_224)))"
"(namespace-phase ns_224)))))))"
"(case-lambda(()(namespace-base-phase68_221 #f #f))((ns66_225)(namespace-base-phase68_221 ns66_225 #t)))))"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_1 self_2)"
"(let-values(((extract_3)"
"(lambda(ok?_4)"
"(let-values(((result-l_5)"
"(alt-reverse"
"(let-values(((ht_6) provides_1))"
"(begin"
"(if((lambda(ht_7)(hash? ht_7)) ht_6)"
"(void)"
"(let-values()(default-in-hash ht_6)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 i_10)"
"(if i_10"
"(let-values(((phase_11 at-phase_12)"
"(hash-iterate-key+value ht_6 i_10)))"
"(if #t"
"(let-values(((fold-var_13)"
"(let-values(((l_14)"
"(alt-reverse"
"(let-values(((ht_15)"
" at-phase_12))"
"(begin"
"(if((lambda(ht_16)"
"(hash? ht_16))"
" ht_15)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18"
" i_19)"
"(if i_19"
"(let-values(((sym_20"
" b/p_21)"
"(hash-iterate-key+value"
" ht_15"
" i_19)))"
"(if #t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_18))"
"(if(ok?_4"
" b/p_21)"
"(let-values(((fold-var_24)"
" fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_26)"
"(provided-as-binding"
" b/p_21)))"
"(cons"
" sym_20"
"(if(eq?"
" self_2"
"(module-binding-module"
" b_26))"
"(let-values()"
" null)"
"(if(if(zero-phase?"
"(module-binding-phase"
" b_26))"
"(if(zero-phase?"
"(module-binding-nominal-phase"
" b_26))"
"(eq?"
"(module-binding-sym"
" b_26)"
" sym_20)"
" #f)"
" #f)"
"(let-values()"
"(list"
"(module-binding-module"
" b_26)))"
"(let-values()"
"(list"
"(module-binding-module"
" b_26)"
"(module-binding-phase"
" b_26)"
"(module-binding-sym"
" b_26)"
"(module-binding-nominal-phase"
" b_26))))))))"
" fold-var_24))))"
"(values"
" fold-var_25)))"
" fold-var_23))))"
"(if #t"
"(for-loop_17"
" fold-var_22"
"(hash-iterate-next"
" ht_15"
" i_19))"
" fold-var_22))"
" fold-var_18))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(hash-iterate-first"
" ht_15)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_27)"
"(lambda(fold-var_28)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30)"
" fold-var_28))"
"(if(null?"
" l_14)"
" fold-var_30"
"(let-values(((fold-var_31)"
" fold-var_30))"
"(let-values(((fold-var_32)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_11"
"(let-values(((.../provide-for-api.rkt:31:20_33)"
" sort9.1)"
"((l4_34)"
" l_14)"
"((symbol<?5_35)"
" symbol<?)"
"((car6_36)"
" car))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" car6_36"
" #t"
" l4_34"
" symbol<?5_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:31:20_33"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list"
" car6_36)"
" l4_34"
" symbol<?5_35)))))"
" fold-var_31))))"
"(values"
" fold-var_32)))))))"
"(if #f"
"(for-loop_27"
" fold-var_29)"
" fold-var_29))"
" fold-var_28))"
" fold-var_28))))"
" for-loop_27)"
" fold-var_9)))))"
"(if #t"
"(for-loop_8"
" fold-var_13"
"(hash-iterate-next ht_6 i_10))"
" fold-var_13))"
" fold-var_9))"
" fold-var_9))))"
" for-loop_8)"
" null"
"(hash-iterate-first ht_6)))))))"
"(let-values(((.../provide-for-api.rkt:32:4_37) sort9.1)"
"((result-l1_38) result-l_5)"
"((<2_39) <)"
"((car3_40) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car3_40 #t result-l1_38 <2_39)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:32:4_37"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car3_40)"
" result-l1_38"
" <2_39)))))))"
"(values"
"(extract_3(lambda(b/p_41)(not(provided-as-transformer? b/p_41))))"
"(extract_3 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_42 all-vars_43)"
"(let-values(((result-l_44)"
"(alt-reverse"
"(let-values(((ht_45) all-vars_43))"
"(begin"
"(if((lambda(ht_46)(hash? ht_46)) ht_45)(void)(let-values()(default-in-hash ht_45)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48 i_49)"
"(if i_49"
"(let-values(((phase_50 vars_51)(hash-iterate-key+value ht_45 i_49)))"
"(if #t"
"(let-values(((fold-var_52)"
"(let-values(((fold-var_53) fold-var_48))"
"(if #t"
"(let-values(((l_54)"
"(let-values(((syms_55)"
"(hash-ref"
" provides_42"
" phase_50"
" '#hasheq())))"
"(alt-reverse"
"(let-values(((lst_56) vars_51))"
"(begin"
"(if(list? lst_56)"
"(void)"
"(let-values()"
"(in-list lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58"
" lst_59)"
"(if(pair?"
" lst_59)"
"(let-values(((var-sym_60)"
"(unsafe-car"
" lst_59)))"
"(if #t"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62)"
" fold-var_58))"
"(if(hash-ref"
" syms_55"
" var-sym_60"
" #f)"
" fold-var_62"
"(let-values(((fold-var_63)"
" fold-var_62))"
"(let-values(((fold-var_64)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_60)"
" fold-var_63))))"
"(values"
" fold-var_64)))))))"
"(if #t"
"(for-loop_57"
" fold-var_61"
"(unsafe-cdr"
" lst_59))"
" fold-var_61))"
" fold-var_58))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_56)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_68)"
" fold-var_66))"
"(if(null?"
" l_54)"
" fold-var_68"
"(let-values(((fold-var_69)"
" fold-var_68))"
"(let-values(((fold-var_70)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_50"
"(let-values(((l10_71)"
" l_54)"
"((symbol<?11_72)"
" symbol<?))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_71"
" symbol<?11_72)"
"(sort9.1"
" l10_71"
" symbol<?11_72)))))"
" fold-var_69))))"
"(values"
" fold-var_70)))))))"
"(if #f"
"(for-loop_65"
" fold-var_67)"
" fold-var_67))"
" fold-var_66))"
" fold-var_66))))"
" for-loop_65)"
" fold-var_53)))"
" fold-var_53))))"
"(if #t"
"(for-loop_47 fold-var_52(hash-iterate-next ht_45 i_49))"
" fold-var_52))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
" null"
"(hash-iterate-first ht_45)))))))"
"(let-values(((.../provide-for-api.rkt:49:2_73) sort9.1)((result-l7_74) result-l_44)((<8_75) <)((car9_76) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car9_76 #t result-l7_74 <8_75)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:49:2_73"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car9_76)"
" result-l7_74"
" <8_75))))))"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(1/linklet-directory? c_1)))(if or-part_3 or-part_3(1/linklet-bundle? c_1)))))))"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_4)(if(compiled-in-memory? c_4)(compiled-in-memory-linklet-directory c_4) c_4)))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_5)"
"(let-values(((ld_6)(compiled->linklet-directory-or-bundle c_5)))"
"(let-values(((or-part_7)"
"(if(1/linklet-directory? ld_6)"
"(if(let-values(((b_8)(hash-ref(1/linklet-directory->hash ld_6) #f #f)))"
"(if b_8(hash-ref(1/linklet-bundle->hash b_8) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_7"
" or-part_7"
"(if(1/linklet-bundle? ld_6)(if(hash-ref(1/linklet-bundle->hash ld_6) 'decl #f) #t #f) #f))))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_9)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_9)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_9)))"
"(values))))"
"(let-values(((ld_10)(compiled->linklet-directory-or-bundle c_9)))"
"(let-values(((b_11)(if(1/linklet-bundle? ld_10) ld_10(hash-ref(1/linklet-directory->hash ld_10) #f))))"
"(hash-ref(1/linklet-bundle->hash b_11) 'name)))))"
"((c_12 name_13)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_12)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(symbol? name_13)))"
"(if or-part_15"
" or-part_15"
"(if(pair? name_13)(if(list? name_13)(andmap2 symbol? name_13) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_13)))"
"(values))))"
"(let-values(((prefix_14)(if(symbol? name_13) null(alt-reverse(cdr(alt-reverse name_13))))))"
"(change-module-name c_12 name_13 prefix_14)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_16 non-star?_17)"
"(begin"
"(if(1/compiled-module-expression? c_16)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_16)))"
"(if(compiled-in-memory? c_16)"
"(let-values()"
"(if non-star?_17"
"(compiled-in-memory-pre-compiled-in-memorys c_16)"
"(compiled-in-memory-post-compiled-in-memorys c_16)))"
"(let-values()"
"(if(1/linklet-directory? c_16)"
"(let-values()"
"(let-values(((ht_18)(1/linklet-directory->hash c_16)))"
"(let-values(((bh_19)(1/linklet-bundle->hash(hash-ref ht_18 #f))))"
"(let-values(((names_20)(hash-ref bh_19(if non-star?_17 'pre 'post) null)))"
"(alt-reverse"
"(let-values(((lst_21) names_20))"
"(begin"
"(if(list? lst_21)(void)(let-values()(in-list lst_21)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 lst_24)"
"(if(pair? lst_24)"
"(let-values(((name_25)(unsafe-car lst_24)))"
"(if #t"
"(let-values(((fold-var_26)"
"(let-values(((fold-var_27) fold-var_23))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref ht_18 name_25))"
" fold-var_27))))"
"(values fold-var_28)))))"
"(if #t(for-loop_22 fold-var_26(unsafe-cdr lst_24)) fold-var_26))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
" lst_21))))))))"
"(let-values() null))))))"
"((c_29 non-star?_30 submods_31)"
"(begin"
"(if(1/compiled-module-expression? c_29)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_29)))"
"(if(if(list? submods_31)(andmap2 1/compiled-module-expression? submods_31) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_31)))"
"(if(if(null? submods_31)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_29)) #f)"
"(let-values() c_29)"
"(if(if(compiled-in-memory? c_29)(andmap2 compiled-in-memory? submods_31) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_32)"
"(if non-star?_30 submods_31(compiled-in-memory-pre-compiled-in-memorys c_29))))"
"(let-values(((post-compiled-in-memorys_33)"
"(if non-star?_30(compiled-in-memory-post-compiled-in-memorys c_29) submods_31)))"
"(let-values(((n-c_34)(normalize-to-linklet-directory c_29)))"
"(fixup-submodule-names"
"(let-values(((the-struct_35) n-c_34))"
"(if(compiled-in-memory? the-struct_35)"
"(let-values(((pre-compiled-in-memorys1_36) pre-compiled-in-memorys_32)"
"((post-compiled-in-memorys2_37) post-compiled-in-memorys_33)"
"((linklet-directory3_38)"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_34))"
" #f)"
" non-star?_30"
" submods_31)"
"(append pre-compiled-in-memorys_32 post-compiled-in-memorys_33))))"
"(compiled-in-memory1.1"
" linklet-directory3_38"
"(compiled-in-memory-phase the-struct_35)"
"(compiled-in-memory-max-phase the-struct_35)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_35)"
"(compiled-in-memory-compile-time-inspector the-struct_35)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_35)"
"(compiled-in-memory-mpis the-struct_35)"
"(compiled-in-memory-syntax-literalss the-struct_35)"
" pre-compiled-in-memorys1_36"
" post-compiled-in-memorys2_37))"
"                       (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_35))))))))"
"(let-values()"
"(let-values(((n-c_39)(normalize-to-linklet-directory c_29)))"
"(fixup-submodule-names"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_39)) #f)"
" non-star?_30"
" submods_31)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_30 submods_31(1/module-compiled-submodules c_29 #t))"
"(if non-star?_30(1/module-compiled-submodules c_29 #f) submods_31)))))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_40)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_40)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_40)))"
"(values))))"
"(let-values(((inst_41)(compiled-module->declaration-instance c_40)))"
"(1/instance-variable-value inst_41 'language-info)))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_42)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_42)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_42)))"
"(values))))"
"(let-values(((inst_43)(compiled-module->declaration-instance c_42)))"
"(1/instance-variable-value inst_43 'requires)))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_44)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_44)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_44)))"
"(values))))"
"(let-values(((inst_45)(compiled-module->declaration-instance c_44)))"
"(provides->api-provides"
"(1/instance-variable-value inst_45 'provides)"
"(1/instance-variable-value inst_45 'self-mpi))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_46)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_46)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_46)))"
"(values))))"
"(let-values(((h_47 inst_48)(compiled-module->h+declaration-instance c_46)))"
"(let-values(((min-phase_49)(1/instance-variable-value inst_48 'min-phase)))"
"(let-values(((max-phase_50)(1/instance-variable-value inst_48 'max-phase)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_48 'provides)"
"(let-values(((start_51) min-phase_49)((end_52)(add1 max-phase_50))((inc_53) 1))"
"(begin"
"(if(if(real? start_51)(if(real? end_52)(real? inc_53) #f) #f)"
"(void)"
"(let-values()(in-range start_51 end_52 inc_53)))"
"((letrec-values(((for-loop_54)"
"(lambda(table_55 pos_56)"
"(if(< pos_56 end_52)"
"(let-values(((phase-level_57) pos_56))"
"(if #t"
"(let-values(((table_58)"
"(let-values(((table_59) table_55))"
"(let-values(((table_60)"
"(let-values()"
"(let-values(((key_61 val_62)"
"(let-values()"
"(let-values(((linklet_63)"
"(hash-ref"
" h_47"
" phase-level_57"
" #f)))"
"(values"
" phase-level_57"
"(if linklet_63"
"(1/linklet-export-variables"
" linklet_63)"
" null))))))"
"(hash-set table_59 key_61 val_62)))))"
"(values table_60)))))"
"(if #t(for-loop_54 table_58(+ pos_56 inc_53)) table_58))"
" table_55))"
" table_55))))"
" for-loop_54)"
" '#hash()"
" start_51))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_64)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_64)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                         \"compiled-module-expression?\""
" c_64)))"
"(values))))"
"(let-values(((inst_65)(compiled-module->declaration-instance c_64)))"
"(1/instance-variable-value inst_65 'cross-phase-persistent?)))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_66)"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_66))"
"(let-values() c_66)"
"(if(1/linklet-bundle? c_66)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_66)))"
"(let-values()"
"(let-values(((the-struct_67) c_66))"
"(if(compiled-in-memory? the-struct_67)"
"(let-values(((linklet-directory4_68)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_66))))"
"(compiled-in-memory1.1"
" linklet-directory4_68"
"(compiled-in-memory-phase the-struct_67)"
"(compiled-in-memory-max-phase the-struct_67)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_67)"
"(compiled-in-memory-compile-time-inspector the-struct_67)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_67)"
"(compiled-in-memory-mpis the-struct_67)"
"(compiled-in-memory-syntax-literalss the-struct_67)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_67)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_67)))"
"              (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_67))))))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_69)(let-values(((n_70)(1/module-compiled-name c_69)))(if(pair? n_70)(car(alt-reverse n_70)) n_70))))"
"(define-values"
"(change-module-name)"
"(lambda(c_71 name_72 prefix_73)"
"(let-values(((full-name_74)(if(null? prefix_73) name_72(append prefix_73(list name_72)))))"
"(let-values(((next-prefix_75)(if(null? prefix_73)(list name_72) full-name_74)))"
"(let-values(((recur_76)"
"(lambda(sub-c_77 name_78)"
"(if(equal?(1/module-compiled-name sub-c_77)(append next-prefix_75(list name_78)))"
" sub-c_77"
"(change-module-name sub-c_77 name_78 next-prefix_75)))))"
"(if(compiled-in-memory? c_71)"
"(let-values()"
"(let-values(((change-submodule-name_79)"
"(lambda(sub-c_82)(recur_76 sub-c_82(module-compiled-immediate-name sub-c_82)))))"
"(let-values(((pre-compiled-in-memorys_80)"
"(map2 change-submodule-name_79(compiled-in-memory-pre-compiled-in-memorys c_71))))"
"(let-values(((post-compiled-in-memorys_81)"
"(map2 change-submodule-name_79(compiled-in-memory-post-compiled-in-memorys c_71))))"
"(let-values(((the-struct_83) c_71))"
"(if(compiled-in-memory? the-struct_83)"
"(let-values(((pre-compiled-in-memorys5_84) pre-compiled-in-memorys_80)"
"((post-compiled-in-memorys6_85) post-compiled-in-memorys_81)"
"((linklet-directory7_86)"
"(rebuild-linklet-directory"
"(update-one-name"
"(hash-ref"
"(1/linklet-directory->hash(compiled->linklet-directory-or-bundle c_71))"
" #f)"
" full-name_74)"
"(append pre-compiled-in-memorys_80 post-compiled-in-memorys_81))))"
"(compiled-in-memory1.1"
" linklet-directory7_86"
"(compiled-in-memory-phase the-struct_83)"
"(compiled-in-memory-max-phase the-struct_83)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_83)"
"(compiled-in-memory-compile-time-inspector the-struct_83)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_83)"
"(compiled-in-memory-mpis the-struct_83)"
"(compiled-in-memory-syntax-literalss the-struct_83)"
" pre-compiled-in-memorys5_84"
" post-compiled-in-memorys6_85))"
"                        (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_83)))))))"
"(if(1/linklet-directory? c_71)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_87)(1/linklet-directory->hash c_71)))"
"(begin"
"(if((lambda(ht_88)(hash? ht_88)) ht_87)(void)(let-values()(default-in-hash ht_87)))"
"((letrec-values(((for-loop_89)"
"(lambda(table_90 i_91)"
"(if i_91"
"(let-values(((key_92 val_93)(hash-iterate-key+value ht_87 i_91)))"
"(if #t"
"(let-values(((table_94)"
"(let-values(((table_95) table_90))"
"(let-values(((table_96)"
"(let-values()"
"(let-values(((key_97 val_98)"
"(let-values()"
"(values"
" key_92"
"(if(not key_92)"
"(update-one-name"
" val_93"
" full-name_74)"
"(recur_76"
" val_93"
" key_92))))))"
"(hash-set table_95 key_97 val_98)))))"
"(values table_96)))))"
"(if #t(for-loop_89 table_94(hash-iterate-next ht_87 i_91)) table_94))"
" table_90))"
" table_90))))"
" for-loop_89)"
" '#hasheq()"
"(hash-iterate-first ht_87))))))"
"(let-values()(update-one-name c_71 full-name_74)))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_99 name_100)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_99) 'name name_100))))"
"(define-values(fixup-submodule-names)(lambda(c_101)(1/module-compiled-name c_101(1/module-compiled-name c_101))))"
"(define-values"
"(rebuild-linklet-directory)"
"(lambda(main_102 submods_103)"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_104) submods_103))"
"(begin"
"(if(list? lst_104)(void)(let-values()(in-list lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(ht_106 lst_107)"
"(if(pair? lst_107)"
"(let-values(((submod_108)(unsafe-car lst_107)))"
"(if #t"
"(let-values(((ht_109)"
"(let-values(((ht_110) ht_106))"
"(let-values(((ht_111)"
"(let-values()"
"(let-values(((name_112)"
"(module-compiled-immediate-name"
" submod_108)))"
"(if(hash-ref ht_110 name_112 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                           \"change would result in duplicate submodule name\""
"                                                                           \"name\""
" name_112))"
"(let-values()"
"(hash-set ht_110 name_112 submod_108)))))))"
"(values ht_111)))))"
"(if #t(for-loop_105 ht_109(unsafe-cdr lst_107)) ht_109))"
" ht_106))"
" ht_106))))"
" for-loop_105)"
" '#hasheq()"
" lst_104)))"
" #f"
" main_102))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_113 pre?_114 submods_115)"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_113)"
"(if pre?_114 'pre 'post)"
"(map2 module-compiled-immediate-name submods_115)))))"
"(define-values"
"(1/eval)"
"(let-values(((eval6_2)"
"(lambda(s5_3 ns1_4 compile2_5 ns3_6 compile4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((ns_9)(if ns3_6 ns1_4(1/current-namespace))))"
"(let-values(((compile_10)"
"(if compile4_7 compile2_5(lambda(s_11 ns_12)(1/compile s_11 ns_12 #f)))))"
"(let-values()"
"(if(let-values(((or-part_13)(compiled-in-memory? s_8)))"
"(if or-part_13"
" or-part_13"
"(let-values(((or-part_14)(1/linklet-directory? s_8)))"
"(if or-part_14 or-part_14(1/linklet-bundle? s_8)))))"
"(let-values()"
"(let-values(((s61_15) s_8)((ns62_16) ns_9))"
"(if(variable-reference-constant?(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 #f #f s61_15 ns62_16)"
"(eval-compiled14.1 s61_15 ns62_16))))"
"(if(if(syntax?$1 s_8)"
"(let-values(((or-part_17)(compiled-in-memory?(1/syntax-e s_8))))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(1/linklet-directory?(1/syntax-e s_8))))"
"(if or-part_18 or-part_18(1/linklet-bundle?(1/syntax-e s_8))))))"
" #f)"
"(let-values()"
"(let-values(((temp63_19)(1/syntax->datum s_8))((ns64_20) ns_9))"
"(if(variable-reference-constant?(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 #f #f temp63_19 ns64_20)"
"(eval-compiled14.1 temp63_19 ns64_20))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:54:4_21) per-top-level60.1)"
"((s65_22) s_8)"
"((ns66_23) ns_9)"
"((temp67_24)"
"(lambda(s_25 ns_26 tail?_27)"
"(let-values(((...pander/eval/main.rkt:56:30_28) eval-compiled14.1)"
"((temp68_29)(compile_10 s_25 ns_26))"
"((ns69_30) ns_26)"
"((tail?70_31) tail?_27))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 tail?70_31 #t temp68_29 ns69_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:56:30_28"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list tail?70_31)"
" temp68_29"
" ns69_30))))))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1 #f #f #f #f temp67_24 #f #f s65_22 ns66_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:54:4_21"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp67_24)"
" s65_22"
" ns66_23)))))))))))))"
"(case-lambda"
"((s_32)(eval6_2 s_32 #f #f #f #f))"
"((s_33 ns_34 compile2_35)(eval6_2 s_33 ns_34 compile2_35 #t #t))"
"((s_36 ns1_37)(eval6_2 s_36 ns1_37 #f #t #f)))))"
"(define-values"
"(eval-compiled12.1)"
"(lambda(as-tail?8_38 as-tail?9_39 c10_40 ns11_41)"
"(let-values(((c_42) c10_40))"
"(let-values(((ns_43) ns11_41))"
"(let-values(((as-tail?_44)(if as-tail?9_39 as-tail?8_38 #t)))"
"(let-values()"
"(if(1/compiled-module-expression? c_42)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:61:4_45) eval-module10.1)((c71_46) c_42)((ns72_47) ns_43))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 ns72_47 #t #f #f #f #f c71_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:61:4_45"
" keyword-procedure-extract"
" '(#:namespace)"
" 3)"
" '(#:namespace)"
"(list ns72_47)"
" c71_46))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:63:4_48) eval-top9.1)"
"((c73_49) c_42)"
"((ns74_50) ns_43)"
"((eval-compiled75_51) eval-compiled14.1)"
"((as-tail?76_52) as-tail?_44))"
"(if(variable-reference-constant?(#%variable-reference eval-top9.1))"
"(eval-top7.1 as-tail?76_52 #t c73_49 ns74_50 eval-compiled75_51 #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:63:4_48"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 5)"
" '(#:as-tail?)"
"(list as-tail?76_52)"
" c73_49"
" ns74_50"
" eval-compiled75_51)))))))))))"
"(define-values"
"(unpack13.1)"
"(lambda(given-kws_53 given-args_54 c10_55 ns11_56)"
"(let-values(((as-tail?9_57)(pair? given-kws_53)))"
"(let-values(((as-tail?8_58)(if as-tail?9_57(car given-args_54)(void))))"
"(eval-compiled12.1 as-tail?8_58 as-tail?9_57 c10_55 ns11_56)))))"
"(define-values"
"(eval-compiled14.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_59 given-argc_60)"
"(if(= given-argc_60 4)"
"(let-values(((l1_61) given-kws_59))"
"(let-values(((l1_62)(if(null? l1_61) l1_61(if(eq?(car l1_61) '#:as-tail?)(cdr l1_61) l1_61))))"
"(null? l1_62)))"
" #f))"
"(case-lambda((given-kws_63 given-args_64 c_65 ns_66)(unpack13.1 given-kws_63 given-args_64 c_65 ns_66)))"
" null"
" '(#:as-tail?)"
"(let-values(((eval-compiled_67)(case-lambda((c_68 ns_69)(unpack13.1 null null c_68 ns_69))))) eval-compiled_67)))"
"(define-values"
"(1/compile)"
"(let-values(((compile24_70)"
"(lambda(s23_71"
" ns15_72"
" serializable?16_73"
" expand17_74"
" to-source?18_75"
" ns19_76"
" serializable?20_77"
" expand21_78"
" to-source?22_79)"
"(let-values(((s_80) s23_71))"
"(let-values(((ns_81)(if ns19_76 ns15_72(1/current-namespace))))"
"(let-values(((serializable?_82)(if serializable?20_77 serializable?16_73 #t)))"
"(let-values(((expand_83)(if expand21_78 expand17_74 expand$1)))"
"(let-values(((to-source?_84)(if to-source?22_79 to-source?18_75 #f)))"
"(let-values()"
"(let-values(((cs_85)"
"(if(1/compiled-expression? s_80)"
"(let-values()(list s_80))"
"(if(if(syntax?$1 s_80)(1/compiled-expression?(1/syntax-e s_80)) #f)"
"(let-values()(list(1/syntax-e s_80)))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:81:6_86) per-top-level60.1)"
"((s77_87) s_80)"
"((ns78_88) ns_81)"
"((temp79_89)"
"(lambda(s_91 ns_92 as-tail?_93)"
"(list"
"(compile-single$1"
" s_91"
" ns_92"
" expand_83"
" serializable?_82"
" to-source?_84))))"
"((append80_90) append))"
"(if(variable-reference-constant?"
"(#%variable-reference per-top-level60.1))"
"(per-top-level58.1"
" append80_90"
" #t"
" #f"
" #f"
" temp79_89"
" #f"
" #f"
" s77_87"
" ns78_88)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:81:6_86"
" keyword-procedure-extract"
" '(#:combine #:single)"
" 4)"
" '(#:combine #:single)"
"(list append80_90 temp79_89)"
" s77_87"
" ns78_88))))))))"
"(if(= 1(length cs_85))"
"(car cs_85)"
"(let-values(((...pander/eval/main.rkt:89:6_94) compiled-tops->compiled-top6.1)"
"((cs81_95) cs_85)"
"((to-source?82_96) to-source?_84))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top6.1))"
"(compiled-tops->compiled-top4.1 to-source?82_96 #t cs81_95)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:89:6_94"
" keyword-procedure-extract"
" '(#:to-source?)"
" 3)"
" '(#:to-source?)"
"(list to-source?82_96)"
" cs81_95))))))))))))))"
"(case-lambda"
"((s_97)(compile24_70 s_97 #f #f #f #f #f #f #f #f))"
"((s_98 ns_99 serializable?_100 expand_101 to-source?18_102)"
"(compile24_70 s_98 ns_99 serializable?_100 expand_101 to-source?18_102 #t #t #t #t))"
"((s_103 ns_104 serializable?_105 expand17_106)"
"(compile24_70 s_103 ns_104 serializable?_105 expand17_106 #f #t #t #t #f))"
"((s_107 ns_108 serializable?16_109)(compile24_70 s_107 ns_108 serializable?16_109 #f #f #t #t #f #f))"
"((s_110 ns15_111)(compile24_70 s_110 ns15_111 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets29_112)"
"(lambda(s28_113 ns26_114 ns27_115)"
"(let-values(((s_116) s28_113))"
"(let-values(((ns_117)(if ns27_115 ns26_114(1/current-namespace))))"
"(let-values()(1/compile s_116 ns_117 #t expand$1 #t)))))))"
"(case-lambda"
"((s_118)(compile-to-linklets29_112 s_118 #f #f))"
"((s_119 ns26_120)(compile-to-linklets29_112 s_119 ns26_120 #t)))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_121 ns_122 expand_123 serializable?_124 to-source?_125)"
"(let-values(((exp-s_126)(expand_123 s_121 ns_122)))"
"((letrec-values(((loop_127)"
"(lambda(exp-s_128)"
"(let-values(((disarmed-exp-s_129)(syntax-disarm$1 exp-s_128)))"
"(let-values(((tmp_130)(core-form-sym disarmed-exp-s_129(namespace-phase ns_122))))"
"(if(equal? tmp_130 'module)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:104:7_131) compile-module15.1)"
"((exp-s83_132) exp-s_128)"
"((temp84_133)"
"(let-values(((...pander/eval/main.rkt:104:29_136)"
" make-compile-context16.1)"
"((ns87_137) ns_122))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1 #f #f #f #f #f #f ns87_137 #t #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:104:29_136"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list ns87_137)))))"
"((serializable?85_134) serializable?_124)"
"((to-source?86_135) to-source?_125))"
"(if(variable-reference-constant?(#%variable-reference compile-module15.1))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" serializable?85_134"
" #t"
" to-source?86_135"
" #t"
" #f"
" #f"
" exp-s83_132"
" temp84_133)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:104:7_131"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?85_134 to-source?86_135)"
" exp-s83_132"
" temp84_133))))"
"(if(equal? tmp_130 'begin)"
"(let-values()"
"(let-values(((ok?_138 begin88_139 e89_140)"
"(let-values(((s_151) disarmed-exp-s_129))"
"(if(if #t #t #f)"
"(let-values(((orig-s_152) s_151))"
"(let-values(((begin88_153 e89_154)"
"(let-values(((s_155)"
"(if(syntax?$1 s_151)"
"(syntax-e$1 s_151)"
" s_151)))"
"(if(pair? s_155)"
"(let-values(((begin90_156)"
"(let-values(((s_158)"
"(car s_155)))"
" s_158))"
"((e91_157)"
"(let-values(((s_159)"
"(cdr s_155)))"
"(let-values(((s_160)"
"(if(syntax?$1"
" s_159)"
"(syntax-e$1"
" s_159)"
" s_159)))"
"(let-values(((flat-s_161)"
"(to-syntax-list.1"
" s_160)))"
"(if(not flat-s_161)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_152))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_152))"
"(let-values()"
" flat-s_161))))))))"
"(values begin90_156 e91_157))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_152)))))"
"(values #t begin88_153 e89_154)))"
"(values #f #f #f)))))"
"(let-values(((...pander/eval/main.rkt:110:7_162) compiled-tops->compiled-top6.1)"
"((temp92_163)"
"(alt-reverse"
"(let-values(((lst_165) e89_140))"
"(begin"
"(if(list? lst_165)(void)(let-values()(in-list lst_165)))"
"((letrec-values(((for-loop_166)"
"(lambda(fold-var_167 lst_168)"
"(if(pair? lst_168)"
"(let-values(((e_169)"
"(unsafe-car lst_168)))"
"(if #t"
"(let-values(((fold-var_170)"
"(let-values(((fold-var_171)"
" fold-var_167))"
"(let-values(((fold-var_172)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_127"
" e_169))"
" fold-var_171))))"
"(values"
" fold-var_172)))))"
"(if #t"
"(for-loop_166"
" fold-var_170"
"(unsafe-cdr lst_168))"
" fold-var_170))"
" fold-var_167))"
" fold-var_167))))"
" for-loop_166)"
" null"
" lst_165)))))"
"((to-source?93_164) to-source?_125))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top6.1))"
"(compiled-tops->compiled-top4.1 to-source?93_164 #t temp92_163)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:110:7_162"
" keyword-procedure-extract"
" '(#:to-source?)"
" 3)"
" '(#:to-source?)"
"(list to-source?93_164)"
" temp92_163)))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:115:7_173) compile-top11.1)"
"((exp-s94_174) exp-s_128)"
"((temp95_175)"
"(let-values(((...pander/eval/main.rkt:115:26_178)"
" make-compile-context16.1)"
"((ns98_179) ns_122))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns98_179"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:115:26_178"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list ns98_179)))))"
"((serializable?96_176) serializable?_124)"
"((to-source?97_177) to-source?_125))"
"(if(variable-reference-constant?(#%variable-reference compile-top11.1))"
"(compile-top9.1"
" serializable?96_176"
" #t"
" #f"
" #f"
" to-source?97_177"
" #t"
" exp-s94_174"
" temp95_175)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:115:7_173"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?96_176 to-source?97_177)"
" exp-s94_174"
" temp95_175)))))))))))"
" loop_127)"
" exp-s_126))))"
"(define-values"
"(expand$1)"
"(let-values(((expand36_180)"
"(lambda(s35_181 ns31_182 log-expand?32_183 ns33_184 log-expand?34_185)"
"(let-values(((s_186) s35_181))"
"(let-values(((ns_187)(if ns33_184 ns31_182(1/current-namespace))))"
"(let-values(((log-expand?_188)(if log-expand?34_185 log-expand?32_183 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_188(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:125:2_189) per-top-level60.1)"
"((s99_190) s_186)"
"((ns100_191) ns_187)"
"((temp101_192)"
"(lambda(s_195 ns_196 as-tail?_197)(expand-single s_195 ns_196)))"
"((cons102_193) cons)"
"((re-pair103_194) re-pair))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1 cons102_193 #t #f #f temp101_192 re-pair103_194 #t s99_190 ns100_191)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:125:2_189"
" keyword-procedure-extract"
" '(#:combine #:single #:wrap)"
" 4)"
" '(#:combine #:single #:wrap)"
"(list cons102_193 temp101_192 re-pair103_194)"
" s99_190"
" ns100_191)))))))))))"
"(case-lambda"
"((s_198)(expand36_180 s_198 #f #f #f #f))"
"((s_199 ns_200 log-expand?32_201)(expand36_180 s_199 ns_200 log-expand?32_201 #t #t))"
"((s_202 ns31_203)(expand36_180 s_202 ns31_203 #f #t #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_204 ns_205)"
"(let-values(((require-lifts_206 lifts_207 exp-s_208)(expand-capturing-lifts s_204(make-expand-context ns_205))))"
"(if(if(null? require-lifts_206)(null? lifts_207) #f)"
"(let-values() exp-s_208)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:136:4_209) wrap-lifts-as-begin17.1)"
"((temp104_210)(append require-lifts_206 lifts_207))"
"((temp105_211)(lambda(form_215)(expand-single form_215 ns_205)))"
"((exp-s106_212) exp-s_208)"
"((s107_213) s_204)"
"((temp108_214)(namespace-phase ns_205)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 temp105_211 #t temp104_210 exp-s106_212 s107_213 temp108_214)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:136:4_209"
" keyword-procedure-extract"
" '(#:adjust-form)"
" 6)"
" '(#:adjust-form)"
"(list temp105_211)"
" temp104_210"
" exp-s106_212"
" s107_213"
" temp108_214))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once41_216)"
"(lambda(s40_217 ns38_218 ns39_219)"
"(let-values(((s_220) s40_217))"
"(let-values(((ns_221)(if ns39_219 ns38_218(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:142:2_222) per-top-level60.1)"
"((s109_223) s_220)"
"((ns110_224) ns_221)"
"((temp111_225)"
"(lambda(s_229 ns_230 as-tail?_231)(expand-single-once s_229 ns_230)))"
"((cons112_226) cons)"
"((re-pair113_227) re-pair)"
"((temp114_228) #t))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1"
" cons112_226"
" #t"
" temp114_228"
" #t"
" temp111_225"
" re-pair113_227"
" #t"
" s109_223"
" ns110_224)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:142:2_222"
" keyword-procedure-extract"
" '(#:combine #:just-once? #:single #:wrap)"
" 4)"
" '(#:combine #:just-once? #:single #:wrap)"
"(list cons112_226 temp114_228 temp111_225 re-pair113_227)"
" s109_223"
" ns110_224)))))))))"
"(case-lambda((s_232)(expand-once41_216 s_232 #f #f))((s_233 ns38_234)(expand-once41_216 s_233 ns38_234 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_235 ns_236)"
"(let-values(((require-lifts_237 lifts_238 exp-s_239)"
"(expand-capturing-lifts"
" s_235"
"(let-values(((the-struct_240)(make-expand-context ns_236)))"
"(if(expand-context? the-struct_240)"
"(let-values(((just-once?115_241) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_240)"
"(root-expand-context-post-expansion-scope the-struct_240)"
"(root-expand-context-top-level-bind-scope the-struct_240)"
"(root-expand-context-all-scopes-stx the-struct_240)"
"(root-expand-context-use-site-scopes the-struct_240)"
"(root-expand-context-defined-syms the-struct_240)"
"(root-expand-context-frame-id the-struct_240)"
"(root-expand-context-counter the-struct_240)"
"(root-expand-context-lift-key the-struct_240)"
"(expand-context-context the-struct_240)"
"(expand-context-phase the-struct_240)"
"(expand-context-namespace the-struct_240)"
"(expand-context-env the-struct_240)"
"(expand-context-user-env the-struct_240)"
"(expand-context-post-expansion-scope-action the-struct_240)"
"(expand-context-scopes the-struct_240)"
"(expand-context-def-ctx-scopes the-struct_240)"
"(expand-context-reference-records the-struct_240)"
"(expand-context-only-immediate? the-struct_240)"
" just-once?115_241"
"(expand-context-module-begin-k the-struct_240)"
"(expand-context-need-eventually-defined the-struct_240)"
"(expand-context-allow-unbound? the-struct_240)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_240)"
"(expand-context-stops the-struct_240)"
"(expand-context-current-introduction-scopes the-struct_240)"
"(expand-context-declared-submodule-names the-struct_240)"
"(expand-context-lifts the-struct_240)"
"(expand-context-lift-envs the-struct_240)"
"(expand-context-module-lifts the-struct_240)"
"(expand-context-require-lifts the-struct_240)"
"(expand-context-to-module-lifts the-struct_240)"
"(expand-context-requires+provides the-struct_240)"
"(expand-context-name the-struct_240)"
"(expand-context-observer the-struct_240)))"
"                       (raise-argument-error 'struct-copy \"expand-context?\" the-struct_240))))))"
"(if(if(null? require-lifts_237)(null? lifts_238) #f)"
"(let-values() exp-s_239)"
"(let-values()"
"(let-values(((temp116_242)(append require-lifts_237 lifts_238))"
"((exp-s117_243) exp-s_239)"
"((s118_244) s_235)"
"((temp119_245)(namespace-phase ns_236)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 #f #f temp116_242 exp-s117_243 s118_244 temp119_245)"
"(wrap-lifts-as-begin17.1 temp116_242 exp-s117_243 s118_244 temp119_245))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form46_246)"
"(lambda(s45_247 ns43_248 ns44_249)"
"(let-values(((s_250) s45_247))"
"(let-values(((ns_251)(if ns44_249 ns43_248(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:162:2_252) per-top-level60.1)"
"((s120_253) s_250)"
"((ns121_254) ns_251)"
"((temp122_255) #f))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1 #f #f #f #f temp122_255 #f #f s120_253 ns121_254)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:162:2_252"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp122_255)"
" s120_253"
" ns121_254)))))))))"
"(case-lambda"
"((s_256)(expand-to-top-form46_246 s_256 #f #f))"
"((s_257 ns43_258)(expand-to-top-form46_246 s_257 ns43_258 #t)))))"
"(define-values"
"(lifted/1.1$6)"
"(make-required"
" 'per-top-level"
"(case-lambda((self_259 given-s_260 ns_261)(apply missing-kw self_259 given-s_260 ns_261 null)))"
" #f"
" #f))"
"(define-values"
"(per-top-level58.1)"
"(lambda(combine49_262"
" combine53_263"
" just-once?51_264"
" just-once?55_265"
" single48_266"
" wrap50_267"
" wrap54_268"
" given-s56_269"
" ns57_270)"
"(let-values(((given-s_271) given-s56_269))"
"(let-values(((ns_272) ns57_270))"
"(let-values(((single_273) single48_266))"
"(let-values(((combine_274)(if combine53_263 combine49_262 #f)))"
"(let-values(((wrap_275)(if wrap54_268 wrap50_267 #f)))"
"(let-values(((just-once?_276)(if just-once?55_265 just-once?51_264 #f)))"
"(let-values()"
"(let-values(((s_277)(maybe-intro given-s_271 ns_272)))"
"(let-values(((ctx_278)(make-expand-context ns_272)))"
"(let-values(((phase_279)(namespace-phase ns_272)))"
"((letrec-values(((loop_280)"
"(lambda(s_281 phase_282 ns_283 as-tail?_284)"
"(let-values(((tl-ctx_285)"
"(let-values(((the-struct_290) ctx_278))"
"(if(expand-context? the-struct_290)"
"(let-values(((phase123_291) phase_282)"
"((namespace124_292) ns_283)"
"((just-once?125_293) just-once?_276))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_290)"
"(root-expand-context-post-expansion-scope"
" the-struct_290)"
"(root-expand-context-top-level-bind-scope"
" the-struct_290)"
"(root-expand-context-all-scopes-stx the-struct_290)"
"(root-expand-context-use-site-scopes the-struct_290)"
"(root-expand-context-defined-syms the-struct_290)"
"(root-expand-context-frame-id the-struct_290)"
"(root-expand-context-counter the-struct_290)"
"(root-expand-context-lift-key the-struct_290)"
"(expand-context-context the-struct_290)"
" phase123_291"
" namespace124_292"
"(expand-context-env the-struct_290)"
"(expand-context-user-env the-struct_290)"
"(expand-context-post-expansion-scope-action"
" the-struct_290)"
"(expand-context-scopes the-struct_290)"
"(expand-context-def-ctx-scopes the-struct_290)"
"(expand-context-reference-records the-struct_290)"
"(expand-context-only-immediate? the-struct_290)"
" just-once?125_293"
"(expand-context-module-begin-k the-struct_290)"
"(expand-context-need-eventually-defined the-struct_290)"
"(expand-context-allow-unbound? the-struct_290)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_290)"
"(expand-context-stops the-struct_290)"
"(expand-context-current-introduction-scopes"
" the-struct_290)"
"(expand-context-declared-submodule-names"
" the-struct_290)"
"(expand-context-lifts the-struct_290)"
"(expand-context-lift-envs the-struct_290)"
"(expand-context-module-lifts the-struct_290)"
"(expand-context-require-lifts the-struct_290)"
"(expand-context-to-module-lifts the-struct_290)"
"(expand-context-requires+provides the-struct_290)"
"(expand-context-name the-struct_290)"
"(expand-context-observer the-struct_290)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"expand-context?\""
" the-struct_290)))))"
"(let-values(((require-lifts_286 lifts_287 exp-s_288)"
"(expand-capturing-lifts"
" s_281"
"(let-values(((the-struct_294) tl-ctx_285))"
"(if(expand-context? the-struct_294)"
"(let-values(((only-immediate?126_295) #t)"
"((def-ctx-scopes127_296)(box null))"
"((phase128_297) phase_282)"
"((namespace129_298) ns_283))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_294)"
"(root-expand-context-post-expansion-scope"
" the-struct_294)"
"(root-expand-context-top-level-bind-scope"
" the-struct_294)"
"(root-expand-context-all-scopes-stx the-struct_294)"
"(root-expand-context-use-site-scopes the-struct_294)"
"(root-expand-context-defined-syms the-struct_294)"
"(root-expand-context-frame-id the-struct_294)"
"(root-expand-context-counter the-struct_294)"
"(root-expand-context-lift-key the-struct_294)"
"(expand-context-context the-struct_294)"
" phase128_297"
" namespace129_298"
"(expand-context-env the-struct_294)"
"(expand-context-user-env the-struct_294)"
"(expand-context-post-expansion-scope-action"
" the-struct_294)"
"(expand-context-scopes the-struct_294)"
" def-ctx-scopes127_296"
"(expand-context-reference-records the-struct_294)"
" only-immediate?126_295"
"(expand-context-just-once? the-struct_294)"
"(expand-context-module-begin-k the-struct_294)"
"(expand-context-need-eventually-defined"
" the-struct_294)"
"(expand-context-allow-unbound? the-struct_294)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_294)"
"(expand-context-stops the-struct_294)"
"(expand-context-current-introduction-scopes"
" the-struct_294)"
"(expand-context-declared-submodule-names"
" the-struct_294)"
"(expand-context-lifts the-struct_294)"
"(expand-context-lift-envs the-struct_294)"
"(expand-context-module-lifts the-struct_294)"
"(expand-context-require-lifts the-struct_294)"
"(expand-context-to-module-lifts the-struct_294)"
"(expand-context-requires+provides the-struct_294)"
"(expand-context-name the-struct_294)"
"(expand-context-observer the-struct_294)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_294))))))"
"(let-values(((disarmed-exp-s_289)(syntax-disarm$1 exp-s_288)))"
"(if(let-values(((or-part_299)(pair? require-lifts_286)))"
"(if or-part_299 or-part_299(pair? lifts_287)))"
"(let-values()"
"(let-values(((new-s_300)"
"(let-values(((temp130_301)"
"(append require-lifts_286 lifts_287))"
"((exp-s131_302) exp-s_288)"
"((s132_303) s_281)"
"((phase133_304) phase_282))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" temp130_301"
" exp-s131_302"
" s132_303"
" phase133_304)"
"(wrap-lifts-as-begin17.1"
" temp130_301"
" exp-s131_302"
" s132_303"
" phase133_304)))))"
"(if just-once?_276"
" new-s_300"
"(loop_280 new-s_300 phase_282 ns_283 as-tail?_284))))"
"(if(not single_273)"
"(let-values() exp-s_288)"
"(if(if just-once?_276(not(eq? exp-s_288 s_281)) #f)"
"(let-values() exp-s_288)"
"(let-values()"
"(let-values(((tmp_305)"
"(core-form-sym disarmed-exp-s_289 phase_282)))"
"(if(equal? tmp_305 'begin)"
"(let-values()"
"(let-values(((ok?_306 begin134_307 e135_308)"
"(let-values(((s_320) disarmed-exp-s_289))"
"(if(if #t #t #f)"
"(let-values(((orig-s_321) s_320))"
"(let-values(((begin134_322"
" e135_323)"
"(let-values(((s_324)"
"(if(syntax?$1"
" s_320)"
"(syntax-e$1"
" s_320)"
" s_320)))"
"(if(pair? s_324)"
"(let-values(((begin136_325)"
"(let-values(((s_327)"
"(car"
" s_324)))"
" s_327))"
"((e137_326)"
"(let-values(((s_328)"
"(cdr"
" s_324)))"
"(let-values(((s_329)"
"(if(syntax?$1"
" s_328)"
"(syntax-e$1"
" s_328)"
" s_328)))"
"(let-values(((flat-s_330)"
"(to-syntax-list.1"
" s_329)))"
"(if(not"
" flat-s_330)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_321))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_321))"
"(let-values()"
" flat-s_330))))))))"
"(values"
" begin136_325"
" e137_326))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_321)))))"
"(values"
" #t"
" begin134_322"
" e135_323)))"
"(values #f #f #f)))))"
"(letrec-values(((begin-loop_319)"
"(lambda(es_331)"
"(if(null? es_331)"
"(let-values()"
"(if combine_274 null(void)))"
"(if(if(not combine_274)"
"(null?(cdr es_331))"
" #f)"
"(let-values()"
"(loop_280"
"(car es_331)"
" phase_282"
" ns_283"
" as-tail?_284))"
"(let-values()"
"(let-values(((a_332)"
"(loop_280"
"(car es_331)"
" phase_282"
" ns_283"
" #f)))"
"(if combine_274"
"(combine_274"
" a_332"
"(begin-loop_319"
"(cdr es_331)))"
"(begin-loop_319"
"(cdr es_331))))))))))"
"(if wrap_275"
"(wrap_275"
" begin134_307"
" exp-s_288"
"(begin-loop_319 e135_308))"
"(begin-loop_319 e135_308)))))"
"(if(equal? tmp_305 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_333"
" begin-for-syntax138_334"
" e139_335)"
"(let-values(((s_349)"
" disarmed-exp-s_289))"
"(if(if #t #t #f)"
"(let-values(((orig-s_350) s_349))"
"(let-values(((begin-for-syntax138_351"
" e139_352)"
"(let-values(((s_353)"
"(if(syntax?$1"
" s_349)"
"(syntax-e$1"
" s_349)"
" s_349)))"
"(if(pair? s_353)"
"(let-values(((begin-for-syntax140_354)"
"(let-values(((s_356)"
"(car"
" s_353)))"
" s_356))"
"((e141_355)"
"(let-values(((s_357)"
"(cdr"
" s_353)))"
"(let-values(((s_358)"
"(if(syntax?$1"
" s_357)"
"(syntax-e$1"
" s_357)"
" s_357)))"
"(let-values(((flat-s_359)"
"(to-syntax-list.1"
" s_358)))"
"(if(not"
" flat-s_359)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_350))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_350))"
"(let-values()"
" flat-s_359))))))))"
"(values"
" begin-for-syntax140_354"
" e141_355))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_350)))))"
"(values"
" #t"
" begin-for-syntax138_351"
" e139_352)))"
"(values #f #f #f)))))"
"(let-values(((next-phase_346)(add1 phase_282)))"
"(let-values(((next-ns_347)"
"(namespace->namespace-at-phase"
" ns_283"
" next-phase_346)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_347)"
"(values))))"
"(let-values(((l_348)"
"(alt-reverse"
"(let-values(((lst_360)"
" e139_335))"
"(begin"
"(if(list? lst_360)"
"(void)"
"(let-values()"
"(in-list lst_360)))"
"((letrec-values(((for-loop_361)"
"(lambda(fold-var_362"
" lst_363)"
"(if(pair?"
" lst_363)"
"(let-values(((s_364)"
"(unsafe-car"
" lst_363)))"
"(if #t"
"(let-values(((fold-var_365)"
"(let-values(((fold-var_366)"
" fold-var_362))"
"(let-values(((fold-var_367)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_280"
" s_364"
" next-phase_346"
" next-ns_347"
" #f))"
" fold-var_366))))"
"(values"
" fold-var_367)))))"
"(if #t"
"(for-loop_361"
" fold-var_365"
"(unsafe-cdr"
" lst_363))"
" fold-var_365))"
" fold-var_362))"
" fold-var_362))))"
" for-loop_361)"
" null"
" lst_360))))))"
"(if wrap_275"
"(let-values()"
"(wrap_275"
" begin-for-syntax138_334"
" exp-s_288"
" l_348))"
"(if combine_274"
"(let-values() l_348)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_273"
" exp-s_288"
" ns_283"
" as-tail?_284)))))))))))))))"
" loop_280)"
" s_277"
" phase_279"
" ns_272"
" #t)))))))))))))"
"(define-values"
"(unpack59.1)"
"(lambda(given-kws_368 given-args_369 given-s56_370 ns57_371)"
"(let-values(((combine53_372)(if(pair? given-kws_368)(eq? '#:combine(car given-kws_368)) #f)))"
"(let-values(((combine49_373)(if combine53_372(car given-args_369)(void)))"
"((given-kws_374)(if combine53_372(cdr given-kws_368) given-kws_368))"
"((given-args_375)(if combine53_372(cdr given-args_369) given-args_369)))"
"(let-values(((just-once?55_376)(if(pair? given-kws_374)(eq? '#:just-once?(car given-kws_374)) #f)))"
"(let-values(((just-once?51_377)(if just-once?55_376(car given-args_375)(void)))"
"((given-kws_378)(if just-once?55_376(cdr given-kws_374) given-kws_374))"
"((given-args_379)(if just-once?55_376(cdr given-args_375) given-args_375)))"
"(let-values(((single48_380)(car given-args_379))"
"((given-kws_381)(cdr given-kws_378))"
"((given-args_382)(cdr given-args_379)))"
"(let-values(((wrap54_383)(pair? given-kws_381)))"
"(let-values(((wrap50_384)(if wrap54_383(car given-args_382)(void))))"
"(per-top-level58.1"
" combine49_373"
" combine53_372"
" just-once?51_377"
" just-once?55_376"
" single48_380"
" wrap50_384"
" wrap54_383"
" given-s56_370"
" ns57_371))))))))))"
"(define-values"
"(per-top-level60.1)"
"(lifted/1.1$6"
"(lambda(given-kws_385 given-argc_386)"
"(if(= given-argc_386 4)(subsets? '(#:single) given-kws_385 '(#:combine #:just-once? #:single #:wrap)) #f))"
"(case-lambda"
"((given-kws_387 given-args_388 given-s_389 ns_390)(unpack59.1 given-kws_387 given-args_388 given-s_389 ns_390)))"
" '(#:single)"
" '(#:combine #:just-once? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_391 ns_392)(if(syntax?$1 s_391) s_391(1/namespace-syntax-introduce(1/datum->syntax #f s_391) ns_392))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_393 s_394 r_395)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_394)(cons form-id_393 r_395) s_394 s_394) s_394)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_396 ctx_397)"
"(let-values(((ns_398)(expand-context-namespace ctx_397)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_398)(values))))"
"(let-values(((lift-ctx_399)"
"(let-values(((temp142_402)(make-top-level-lift ctx_397)))"
"(if(variable-reference-constant?(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 #f #f temp142_402)"
"(make-lift-context8.1 temp142_402)))))"
"(let-values(((require-lift-ctx_400)"
"(make-require-lift-context(namespace-phase ns_398)(make-parse-top-lifted-require ns_398))))"
"(let-values(((exp-s_401)"
"(let-values(((s143_403) s_396)"
"((temp144_404)"
"(let-values(((the-struct_405) ctx_397))"
"(if(expand-context? the-struct_405)"
"(let-values(((lifts145_406) lift-ctx_399)"
"((module-lifts146_407) lift-ctx_399)"
"((require-lifts147_408) require-lift-ctx_400))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_405)"
"(root-expand-context-post-expansion-scope the-struct_405)"
"(root-expand-context-top-level-bind-scope the-struct_405)"
"(root-expand-context-all-scopes-stx the-struct_405)"
"(root-expand-context-use-site-scopes the-struct_405)"
"(root-expand-context-defined-syms the-struct_405)"
"(root-expand-context-frame-id the-struct_405)"
"(root-expand-context-counter the-struct_405)"
"(root-expand-context-lift-key the-struct_405)"
"(expand-context-context the-struct_405)"
"(expand-context-phase the-struct_405)"
"(expand-context-namespace the-struct_405)"
"(expand-context-env the-struct_405)"
"(expand-context-user-env the-struct_405)"
"(expand-context-post-expansion-scope-action the-struct_405)"
"(expand-context-scopes the-struct_405)"
"(expand-context-def-ctx-scopes the-struct_405)"
"(expand-context-reference-records the-struct_405)"
"(expand-context-only-immediate? the-struct_405)"
"(expand-context-just-once? the-struct_405)"
"(expand-context-module-begin-k the-struct_405)"
"(expand-context-need-eventually-defined the-struct_405)"
"(expand-context-allow-unbound? the-struct_405)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_405)"
"(expand-context-stops the-struct_405)"
"(expand-context-current-introduction-scopes the-struct_405)"
"(expand-context-declared-submodule-names the-struct_405)"
" lifts145_406"
"(expand-context-lift-envs the-struct_405)"
" module-lifts146_407"
" require-lifts147_408"
"(expand-context-to-module-lifts the-struct_405)"
"(expand-context-requires+provides the-struct_405)"
"(expand-context-name the-struct_405)"
"(expand-context-observer the-struct_405)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_405)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f s143_403 temp144_404)"
"(expand7.1 s143_403 temp144_404)))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_400)"
"(get-and-clear-lifts! lift-ctx_399)"
" exp-s_401))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_409)"
"(lambda(s_410 phase_411)"
"(let-values(((ok?_412 #%require148_413 req149_414)"
"(let-values(((s_425)(syntax-disarm$1 s_410)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_426) s_425))"
"(let-values(((#%require148_427 req149_428)"
"(let-values(((s_429)(if(syntax?$1 s_425)(syntax-e$1 s_425) s_425)))"
"(if(pair? s_429)"
"(let-values(((#%require150_430)(let-values(((s_432)(car s_429))) s_432))"
"((req151_431)"
"(let-values(((s_433)(cdr s_429)))"
"(let-values(((s_434)"
"(if(syntax?$1 s_433)"
"(syntax-e$1 s_433)"
" s_433)))"
"(if(pair? s_434)"
"(let-values(((req152_435)"
"(let-values(((s_436)(car s_434)))"
" s_436))"
"(()"
"(let-values(((s_437)(cdr s_434)))"
"(let-values(((s_438)"
"(if(syntax?$1 s_437)"
"(syntax-e$1 s_437)"
" s_437)))"
"(if(null? s_438)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_426))))))"
"(values req152_435))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_426))))))"
"(values #%require150_430 req151_431))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_426)))))"
"(values #t #%require148_427 req149_428)))"
"(values #f #f #f)))))"
"(let-values(((...pander/eval/main.rkt:273:4_439) parse-and-perform-requires!22.1)"
"((temp153_440)(list req149_414))"
"((s154_441) s_410)"
"((ns155_442) ns_409)"
"((phase156_443) phase_411)"
"((phase157_444) phase_411)"
"((temp158_445)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" phase157_444"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp153_440"
" s154_441"
" ns155_442"
" phase156_443"
" temp158_445)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:273:4_439"
" keyword-procedure-extract"
" '(#:run-phase)"
" 7)"
" '(#:run-phase)"
"(list phase157_444)"
" temp153_440"
" s154_441"
" ns155_442"
" phase156_443"
" temp158_445)))))))"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_1)"
"(lambda(who3_2 mod-path4_3 sym5_4 fail-k1_5 fail-k2_6)"
"(let-values(((who_7) who3_2))"
"(let-values(((mod-path_8) mod-path4_3))"
"(let-values(((sym_9) sym5_4))"
"(let-values(((fail-k_10)(if fail-k2_6 fail-k1_5 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(1/module-path? mod-path_8)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(1/module-path-index? mod-path_8)))"
"(if or-part_16 or-part_16(1/resolved-module-path? mod-path_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_7"
"                                                 \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_17)(symbol? sym_9)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(not sym_9)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(equal? sym_9 0)))"
"(if or-part_19 or-part_19(void? sym_9)))))))"
"(void)"
"(let-values()"
"                                                  (raise-argument-error who_7 \"(or/c symbol? #f 0 void?)\" sym_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_10)"
"(procedure-arity-includes? fail-k_10 0)"
" #f)"
"(void)"
"                                                  (let-values () (raise-argument-error who_7 \"(-> any)\" fail-k_10)))"
"(values))))"
"(let-values(((ns_11)(1/current-namespace)))"
"(let-values(((mpi_12)"
"(if(1/module-path? mod-path_8)"
"(let-values()(1/module-path-index-join mod-path_8 #f))"
"(if(1/module-path-index? mod-path_8)"
"(let-values() mod-path_8)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_8)"
" #f))))))"
"(let-values(((mod-name_13)(1/module-path-index-resolve mpi_12 #t)))"
"(let-values(((phase_14)(namespace-phase ns_11)))"
"(if(not sym_9)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:43:4_20)"
" namespace-module-instantiate!95.1)"
"((ns20_21) ns_11)"
"((mpi21_22) mpi_12)"
"((phase22_23) phase_14)"
"((phase23_24) phase_14)"
"((temp24_25) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" temp24_25"
" #t"
" phase23_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns20_21"
" mpi21_22"
" phase22_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:43:4_20"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase)"
" 5)"
" '(#:otherwise-available? #:run-phase)"
"(list temp24_25 phase23_24)"
" ns20_21"
" mpi21_22"
" phase22_23))))"
"(if(equal? sym_9 0)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:47:4_26)"
" namespace-module-instantiate!95.1)"
"((ns25_27) ns_11)"
"((mpi26_28) mpi_12)"
"((phase27_29) phase_14)"
"((phase28_30) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" phase28_30"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns25_27"
" mpi26_28"
" phase27_29)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:47:4_26"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase28_30)"
" ns25_27"
" mpi26_28"
" phase27_29))))"
"(if(void? sym_9)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:50:4_31)"
" namespace-module-visit!103.1)"
"((ns29_32) ns_11)"
"((mpi30_33) mpi_12)"
"((phase31_34) phase_14)"
"((phase32_35) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!103.1))"
"(namespace-module-visit!101.1"
" phase32_35"
" #t"
" ns29_32"
" mpi30_33"
" phase31_34)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:50:4_31"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list phase32_35)"
" ns29_32"
" mpi30_33"
" phase31_34))))"
"(let-values()"
"(let-values(((m_36)(namespace->module ns_11 mod-name_13)))"
"(let-values((()"
"(begin"
"(if m_36"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_13)))"
"(values))))"
"(let-values(((binding/p_37)"
"(hash-ref"
"(hash-ref(module-provides m_36) 0 '#hasheq())"
" sym_9"
" #f)))"
"(if(not binding/p_37)"
"(let-values()"
"(if(eq? fail-k_10 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                               \"name is not provided\""
"                                                               \"name\""
" sym_9"
"                                                               \"module\""
" mod-name_13)"
"(fail-k_10)))"
"(let-values()"
"(let-values(((binding_38)"
"(provided-as-binding binding/p_37)))"
"(let-values(((ex-sym_39)"
"(module-binding-sym binding_38)))"
"(let-values(((ex-phase_40)"
"(module-binding-phase binding_38)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:72:6_43)"
" namespace-module-instantiate!95.1)"
"((ns33_44) ns_11)"
"((mpi34_45) mpi_12)"
"((phase35_46) phase_14)"
"((phase36_47) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" phase36_47"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns33_44"
" mpi34_45"
" phase35_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:72:6_43"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase36_47)"
" ns33_44"
" mpi34_45"
" phase35_46)))"
"(values))))"
"(let-values(((m-ns_41)"
"(let-values(((.../dynamic-require.rkt:73:19_48)"
" namespace->module-namespace81.1)"
"((ns37_49) ns_11)"
"((temp38_50)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module"
" binding_38)"
"(module-self m_36)"
" mpi_12)))"
"((temp39_51)"
"(phase-"
" phase_14"
" ex-phase_40))"
"((temp40_52) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" temp40_52"
" #t"
" #f"
" #f"
" ns37_49"
" temp38_50"
" temp39_51)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:73:19_48"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp40_52)"
" ns37_49"
" temp38_50"
" temp39_51)))))"
"(let-values((()"
"(begin"
"(if(if(provided-as-protected?"
" binding/p_37)"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_41)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_38)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_38)"
"(namespace-inspector"
" m-ns_41))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
"                                                                                           \"name is protected\""
"                                                                                           \"name\""
" sym_9"
"                                                                                           \"module\""
" mod-name_13))"
"(void))"
"(values))))"
"(let-values(((fail_42)"
"(lambda()"
"(if(eq?"
" fail-k_10"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                           \"name's binding is missing\""
"                                                                                           \"name\""
" sym_9"
"                                                                                           \"module\""
" mod-name_13)"
"(fail-k_10)))))"
"(if(not"
"(provided-as-transformer? binding/p_37))"
"(let-values()"
"(namespace-get-variable"
" m-ns_41"
" ex-phase_40"
" ex-sym_39"
" fail_42))"
"(let-values()"
"(let-values(((missing_53)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:103:8_55)"
" namespace-module-visit!103.1)"
"((ns41_56)"
" ns_11)"
"((mpi42_57)"
" mpi_12)"
"((phase43_58)"
" phase_14)"
"((phase44_59)"
" phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!103.1))"
"(namespace-module-visit!101.1"
" phase44_59"
" #t"
" ns41_56"
" mpi42_57"
" phase43_58)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:103:8_55"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list phase44_59)"
" ns41_56"
" mpi42_57"
" phase43_58)))"
"(values))))"
"(let-values(((t_54)"
"(namespace-get-transformer"
" m-ns_41"
" ex-phase_40"
" ex-sym_39"
" missing_53)))"
"(if(eq? t_54 missing_53)"
"(let-values()(fail_42))"
"(let-values()"
"(let-values(((tmp-ns_60)"
"(let-values(((ns45_62)"
" ns_11))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" new-namespace11.1))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_62"
" #t)"
"(new-namespace11.1"
" ns45_62)))))"
"(let-values(((mod-path_61)"
"(resolved-module-path->module-path"
" mod-name_13)))"
"(begin"
"(1/namespace-require"
" mod-path_61"
" tmp-ns_60)"
"(1/eval"
" sym_9"
" tmp-ns_60))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_63 mod-path_64 sym_65)(do-dynamic-require6_1 who_63 mod-path_64 sym_65 #f #f))"
"((who_66 mod-path_67 sym_68 fail-k1_69)(do-dynamic-require6_1 who_66 mod-path_67 sym_68 fail-k1_69 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_70)"
"(lambda(mod-path10_71 sym11_72 fail-k8_73 fail-k9_74)"
"(let-values(((mod-path_75) mod-path10_71))"
"(let-values(((sym_76) sym11_72))"
"(let-values(((fail-k_77)(if fail-k9_74 fail-k8_73 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_75 sym_76 fail-k_77))))))))"
"(case-lambda"
"((mod-path_78 sym_79)(dynamic-require12_70 mod-path_78 sym_79 #f #f))"
"((mod-path_80 sym_81 fail-k8_82)(dynamic-require12_70 mod-path_80 sym_81 fail-k8_82 #t)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax18_83)"
"(lambda(mod-path16_84 sym17_85 fail-k14_86 fail-k15_87)"
"(let-values(((mod-path_88) mod-path16_84))"
"(let-values(((sym_89) sym17_85))"
"(let-values(((fail-k_90)(if fail-k15_87 fail-k14_86 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_91) 1/current-namespace))"
"(namespace->namespace-at-phase ns_91(add1(namespace-phase ns_91)))))"
"(let-values()"
"(do-dynamic-require 'dynamic-require-for-syntax mod-path_88 sym_89 fail-k_90))))))))))"
"(case-lambda"
"((mod-path_92 sym_93)(dynamic-require-for-syntax18_83 mod-path_92 sym_93 #f #f))"
"((mod-path_94 sym_95 fail-k14_96)(dynamic-require-for-syntax18_83 mod-path_94 sym_95 fail-k14_96 #t)))))"
"(define-values"
"(eval$1)"
"(case-lambda"
"((s_1)((current-eval)(intro s_1)))"
"((s_2 ns_3)"
"(begin"
"      (if (1/namespace? ns_3) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_3)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_3)"
"(let-values()((current-eval)(intro s_2 ns_3))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_4)"
"(begin"
"      (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_4)))"
"((current-eval) s_4)))"
"((s_5 ns_6)"
"(begin"
"      (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_5)))"
"      (if (1/namespace? ns_6) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_6)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_6)"
"(let-values()((current-eval) s_5)))))))"
"(define-values(compile$1)(lambda(s_7)((current-compile)(intro s_7) #f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_8)"
"(begin"
"      (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_8)))"
"((current-compile) s_8 #f))))"
"(define-values(1/expand)(lambda(s_9)(expand$1(intro s_9)(1/current-namespace) #t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_10)"
"(begin"
"      (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_10)))"
"(expand$1 s_10(1/current-namespace) #t))))"
"(define-values(1/expand-once)(lambda(s_11)(expand-once$1(intro s_11))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_12)"
"(begin"
"      (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_12)))"
"(expand-once$1 s_12))))"
"(define-values(1/expand-to-top-form)(lambda(s_13)(expand-to-top-form$1(intro s_13))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_14)"
"(begin"
"      (if (syntax?$1 s_14) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_14)))"
"(expand-to-top-form$1 s_14))))"
"(define-values"
"(intro)"
"(let-values(((intro4_15)"
"(lambda(given-s3_16 ns1_17 ns2_18)"
"(let-values(((given-s_19) given-s3_16))"
"(let-values(((ns_20)(if ns2_18 ns1_17(1/current-namespace))))"
"(let-values()"
"(let-values(((s_21)(if(syntax?$1 given-s_19) given-s_19(1/datum->syntax #f given-s_19))))"
"(1/namespace-syntax-introduce s_21 ns_20))))))))"
"(case-lambda((given-s_22)(intro4_15 given-s_22 #f #f))((given-s_23 ns1_24)(intro4_15 given-s_23 ns1_24 #t)))))"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_2)"
"(lambda(mod3_3 load?1_4 load?2_5)"
"(let-values(((mod_6) mod3_3))"
"(let-values(((load?_7)(if load?2_5 load?1_4 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_6)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_6)))"
"(values))))"
"(let-values(((ns_8)(1/current-namespace)))"
"(let-values(((name_9)"
"(let-values(((...space/api-module.rkt:26:15_10)"
" reference->resolved-module-path34.1)"
"((mod35_11) mod_6)"
"((load?36_12) load?_7))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?36_12 mod35_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:26:15_10"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?36_12)"
" mod35_11)))))"
"(if(namespace->module ns_8 name_9) #t #f))))))))))"
"(case-lambda"
"((mod_13)(module-declared?4_2 mod_13 #f #f))"
"((mod_14 load?1_15)(module-declared?4_2 mod_14 load?1_15 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_16)"
"(let-values((()"
"(begin"
"(if(module-reference? mod_16)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_16)))"
"(values))))"
"(let-values(((ns_17)(1/current-namespace)))"
"(let-values(((name_18)"
"(let-values(((...space/api-module.rkt:33:15_20) reference->resolved-module-path34.1)"
"((mod37_21) mod_16)"
"((temp38_22) #f))"
"(if(variable-reference-constant?(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp38_22 mod37_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:33:15_20"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp38_22)"
" mod37_21)))))"
"(let-values(((m_19)(namespace->module ns_17 name_18)))(if m_19(module-primitive? m_19) #f)))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_23)"
"(lambda(extract8_24 who9_25 mod10_26 load?6_27 load?7_28)"
"(let-values(((extract_29) extract8_24))"
"(let-values(((who_30) who9_25))"
"(let-values(((mod_31) mod10_26))"
"(let-values(((load?_32)(if load?7_28 load?6_27 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_31)"
"(void)"
"(let-values()(raise-argument-error who_30 module-reference-str mod_31)))"
"(values))))"
"(let-values(((m_33)"
"(namespace->module/complain"
" who_30"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:42:40_34)"
" reference->resolved-module-path34.1)"
"((mod39_35) mod_31)"
"((load?40_36) load?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?40_36 mod39_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:42:40_34"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?40_36)"
" mod39_35))))))"
"(extract_29 m_33)))))))))))"
"(case-lambda"
"((extract_37 who_38 mod_39)(module->11_23 extract_37 who_38 mod_39 #f #f))"
"((extract_40 who_41 mod_42 load?6_43)(module->11_23 extract_40 who_41 mod_42 load?6_43 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_44)"
"(lambda(mod15_45 load?13_46 load?14_47)"
"(let-values(((mod_48) mod15_45))"
"(let-values(((load?_49)(if load?14_47 load?13_46 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_48 load?_49)))))))"
"(case-lambda"
"((mod_50)(module->language-info16_44 mod_50 #f #f))"
"((mod_51 load?13_52)(module->language-info16_44 mod_51 load?13_52 #t)))))"
"(define-values(1/module->imports)(lambda(mod_53)(module-> module-requires 'module->imports mod_53)))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_54)"
"(let-values(((provides_55 self_56)"
"(module->"
"(lambda(m_57)(values(module-provides m_57)(module-self m_57)))"
" 'module->exports"
" mod_54)))"
"(provides->api-provides provides_55 self_56))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_58)"
"(module->"
"(lambda(m_59)(variables->api-nonprovides(module-provides m_59)((module-get-all-variables m_59))))"
" 'module->indirect-exports"
" mod_58)))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_60)"
"(lambda(mod20_61 ns18_62 ns19_63)"
"(let-values(((mod_64) mod20_61))"
"(let-values(((ns_65)(if ns19_63 ns18_62(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_64)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_64)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_65)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'module->namespace \"namespace?\" ns_65)))"
"(values))))"
"(let-values(((name_66)"
"(let-values(((...space/api-module.rkt:66:15_69)"
" reference->resolved-module-path34.1)"
"((mod44_70) mod_64)"
"((temp45_71) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp45_71 mod44_70)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:66:15_69"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp45_71)"
" mod44_70)))))"
"(let-values(((phase_67)(namespace-phase ns_65)))"
"(let-values(((m-ns_68)"
"(let-values(((ns46_72) ns_65)"
"((name47_73) name_66)"
"((phase48_74) phase_67))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_72"
" name47_73"
" phase48_74)"
"(namespace->module-namespace81.1 ns46_72 name47_73 phase48_74)))))"
"(begin"
"(if m-ns_68"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_65 name_66)"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"module not instantiated in the current namespace\""
"                                           \"name\""
" name_66))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_68))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                         \"current code inspector cannot access namespace of module\""
"                                         \"module name\""
" name_66)))"
"(if(namespace-get-root-expand-ctx m-ns_68)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_68"
"(let-values()"
"(if(variable-reference-constant?"
"(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((ns41_75) ns_65)"
"((temp42_76)(namespace-mpi m-ns_68))"
"((phase43_77) phase_67))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-make-available!111.1))"
"(namespace-module-make-available!109.1 #f #f ns41_75 temp42_76 phase43_77)"
"(namespace-module-make-available!111.1 ns41_75 temp42_76 phase43_77)))"
" m-ns_68))))))))))))"
"(case-lambda"
"((mod_78)(module->namespace21_60 mod_78 #f #f))"
"((mod_79 ns18_80)(module->namespace21_60 mod_79 ns18_80 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_81)"
"(lambda(insp25_82 mod26_83 ns23_84 ns24_85)"
"(let-values(((insp_86) insp25_82))"
"(let-values(((mod_87) mod26_83))"
"(let-values(((ns_88)(if ns24_85 ns23_84(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_86)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-unprotect-module \"inspector?\" insp_86)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_87)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"module-path?\""
" mod_87)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_88)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"namespace?\""
" ns_88)))"
"(values))))"
"(let-values(((name_89)"
"(let-values(((...space/api-module.rkt:91:15_92)"
" reference->resolved-module-path34.1)"
"((mod49_93) mod_87)"
"((temp50_94) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp50_94 mod49_93)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:91:15_92"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp50_94)"
" mod49_93)))))"
"(let-values(((phase_90)(namespace-phase ns_88)))"
"(let-values(((m-ns_91)"
"(let-values(((ns51_95) ns_88)"
"((name52_96) name_89)"
"((phase53_97) phase_90))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_95"
" name52_96"
" phase53_97)"
"(namespace->module-namespace81.1 ns51_95 name52_96 phase53_97)))))"
"(begin"
"(if m-ns_91"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                             \"module not instantiated\""
"                                             \"module name\""
" name_89)))"
"(if(inspector-superior? insp_86(namespace-inspector m-ns_91))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_91"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_98 mod_99)(namespace-unprotect-module27_81 insp_98 mod_99 #f #f))"
"((insp_100 mod_101 ns23_102)(namespace-unprotect-module27_81 insp_100 mod_101 ns23_102 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_103 ns_104 name_105)"
"(let-values(((or-part_106)(namespace->module ns_104 name_105)))"
"(if or-part_106"
" or-part_106"
"        (raise-arguments-error who_103 \"unknown module in the current namespace\" \"name\" name_105)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_107)"
"(let-values(((or-part_108)(1/module-path? mod_107)))"
"(if or-part_108"
" or-part_108"
"(let-values(((or-part_109)(1/module-path-index? mod_107)))"
"(if or-part_109 or-part_109(1/resolved-module-path? mod_107)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$4)"
"(make-required"
" 'reference->resolved-module-path"
"(case-lambda((self_110 mod_111)(apply missing-kw self_110 mod_111 null)))"
" #f"
" #f))"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_112 mod31_113)"
"(let-values(((mod_114) mod31_113))"
"(let-values(((load?_115) load?29_112))"
"(let-values()"
"(if(1/resolved-module-path? mod_114)"
"(let-values() mod_114)"
"(let-values()"
"(let-values(((mpi_116)"
"(if(1/module-path-index? mod_114) mod_114(1/module-path-index-join mod_114 #f))))"
"(1/module-path-index-resolve mpi_116 load?_115)))))))))"
"(define-values"
"(unpack33.1)"
"(lambda(given-kws_117 given-args_118 mod31_119)"
"(let-values(((load?29_120)(car given-args_118)))(reference->resolved-module-path32.1 load?29_120 mod31_119))))"
"(define-values"
"(reference->resolved-module-path34.1)"
"(lifted/1.1$4"
"(lambda(given-kws_121 given-argc_122)"
"(if(= given-argc_122 3)"
"(let-values(((l2_123) given-kws_121))"
"(if(pair? l2_123)(if(eq?(car l2_123) '#:load?)(null?(cdr l2_123)) #f) #f))"
" #f))"
"(case-lambda((given-kws_124 given-args_125 mod_126)(unpack33.1 given-kws_124 given-args_125 mod_126)))"
" '(#:load?)"
" '(#:load?)))"
"(define-values"
"(prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list(cons prop:missing-module(lambda(e_26)(1/exn:fail:filesystem:missing-module-path e_26))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module))))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_27 make-_28 ?_29 -ref_30 -set!_31)"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons prop:missing-module(lambda(e_48)(1/exn:fail:syntax:missing-module-path e_48))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module))))"
"(values struct:_27 make-_28 ?_29(make-struct-field-accessor -ref_30 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_49)"
"(begin"
"(if(let-values(((or-part_50)(not v_49)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(1/module-path? v_49)))"
"(if or-part_51 or-part_51(if(syntax?$1 v_49)(1/module-path?(syntax->datum$1 v_49)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_49)))"
" v_49))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_52 filename_53 pre_54 rel_55 post_56 errstr_57)"
"(let-values(((path_58)(1/current-module-path-for-load)))"
"(if path_58"
"(let-values()"
"(begin"
"(if(syntax?$1 path_58)"
"(let-values()"
"(raise"
"(make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_58)(srcloc->string(syntax-srcloc path_58)) name_52)"
"(syntax->datum$1 path_58)"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
"(list path_58)"
"(syntax->datum$1 path_58))))"
"(void))"
"(raise"
"(make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_52"
" path_58"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)))))"
"(void)))))"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values(((s_7) s3_2))"
"(let-values(((context_8) context4_3))"
"(let-values(((stop-ids_9) stop-ids5_4))"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 #f)))"
"(let-values()"
"(let-values(((temp63_11) 'local-expand)"
"((s64_12) s_7)"
"((context65_13) context_8)"
"((stop-ids66_14) stop-ids_9)"
"((intdefs67_15) intdefs_10))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp63_11"
" s64_12"
" context65_13"
" stop-ids66_14"
" intdefs67_15"
" #t)"
"(do-local-expand62.1 temp63_11 s64_12 context65_13 stop-ids66_14 intdefs67_15)))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 #f #f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values(((s_31) s12_24))"
"(let-values(((context_32) context13_25))"
"(let-values(((stop-ids_33) stop-ids14_26))"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 #f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:26:2_36) do-local-expand62.1)"
"((temp68_37) 'local-expand)"
"((s69_38) s_31)"
"((context70_39) context_32)"
"((stop-ids71_40) stop-ids_33)"
"((intdefs72_41) intdefs_34)"
"((temp73_42) #t)"
"((lift-key74_43) lift-key_35))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" temp73_42"
" #t"
" lift-key74_43"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:26:2_36"
" keyword-procedure-extract"
" '(#:capture-lifts? #:lift-key)"
" 7)"
" '(#:capture-lifts? #:lift-key)"
"(list temp73_42 lift-key74_43)"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41))))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 #f #f #f #f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 #t #t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values(((s_62) s19_57))"
"(let-values(((context_63) context20_58))"
"(let-values(((stop-ids_64) stop-ids21_59))"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 #f)))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:31:2_66) do-local-expand62.1)"
"((temp75_67) 'local-expand)"
"((s76_68) s_62)"
"((context77_69) context_63)"
"((stop-ids78_70) stop-ids_64)"
"((intdefs79_71) intdefs_65)"
"((temp80_72) #t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" temp80_72"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:31:2_66"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 7)"
" '(#:as-transformer?)"
"(list temp80_72)"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71)))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 #f #f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values(((s_88) s28_81))"
"(let-values(((context_89) context29_82))"
"(let-values(((stop-ids_90) stop-ids30_83))"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 #f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:35:2_93) do-local-expand62.1)"
"((temp81_94) 'local-expand)"
"((s82_95) s_88)"
"((context83_96) context_89)"
"((stop-ids84_97) stop-ids_90)"
"((intdefs85_98) intdefs_91)"
"((temp86_99) #t)"
"((temp87_100) #t)"
"((lift-key88_101) lift-key_92))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" temp86_99"
" #t"
" temp87_100"
" #t"
" lift-key88_101"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:35:2_93"
" keyword-procedure-extract"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
" 7)"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
"(list temp86_99 temp87_100 lift-key88_101)"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98))))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 #f #f #f #f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 #t #t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 #f #t #f)))))"
"(define-values"
"(do-syntax-local-expand-expression39.1)"
"(lambda(local-keys33_114 local-keys35_115 local-values34_116 local-values36_117 who37_118 s38_119)"
"(let-values(((who_120) who37_118))"
"(let-values(((s_121) s38_119))"
"(let-values(((local-keys_122)(if local-keys35_115 local-keys33_114 null)))"
"(let-values(((local-values_123)(if local-values36_117 local-values34_116 null)))"
"(let-values()"
"(let-values(((exp-s_124)"
"(let-values(((...and/local-expand.rkt:43:16_126) do-local-expand62.1)"
"((who89_127) who_120)"
"((s90_128) s_121)"
"((temp91_129) 'expression)"
"((null92_130) null)"
"((temp93_131) #f)"
"((temp94_132) #t)"
"((local-keys95_133) local-keys_122)"
"((local-values96_134) local-values_123))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" local-keys95_133"
" #t"
" local-values96_134"
" #t"
" temp94_132"
" #t"
" who89_127"
" s90_128"
" temp91_129"
" null92_130"
" temp93_131"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:43:16_126"
" keyword-procedure-extract"
" '(#:local-keys #:local-values #:skip-log-exit?)"
" 7)"
" '(#:local-keys #:local-values #:skip-log-exit?)"
"(list local-keys95_133 local-values96_134 temp94_132)"
" who89_127"
" s90_128"
" temp91_129"
" null92_130"
" temp93_131)))))"
"(let-values(((ae_125)"
"(already-expanded1.1"
" exp-s_124"
"(root-expand-context-all-scopes-stx"
"(let-values(((temp97_135) 'syntax-local-expand-expression))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp97_135 #t)"
"(get-current-expand-context8.1 temp97_135)))))))"
"(begin"
"(let-values(((ctx_136)"
"(let-values()"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f #f #f)"
"(get-current-expand-context8.1)))))"
"(begin"
"(let-values(((obs_137)(expand-context-observer ctx_136)))"
"(if obs_137"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_137 'opaque-expr ae_125))(void)))"
"(void)))"
"(let-values(((obs_138)(expand-context-observer ctx_136)))"
"(if obs_138"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_138 'exit-local exp-s_124))(void)))"
"(void)))))"
"(values exp-s_124(datum->syntax$1 #f ae_125))))))))))))"
"(define-values"
"(unpack40.1$1)"
"(lambda(given-kws_139 given-args_140 who37_141 s38_142)"
"(let-values(((local-keys35_143)(if(pair? given-kws_139)(eq? '#:local-keys(car given-kws_139)) #f)))"
"(let-values(((local-keys33_144)(if local-keys35_143(car given-args_140)(void)))"
"((given-kws_145)(if local-keys35_143(cdr given-kws_139) given-kws_139))"
"((given-args_146)(if local-keys35_143(cdr given-args_140) given-args_140)))"
"(let-values(((local-values36_147)(pair? given-kws_145)))"
"(let-values(((local-values34_148)(if local-values36_147(car given-args_146)(void))))"
"(do-syntax-local-expand-expression39.1"
" local-keys33_144"
" local-keys35_143"
" local-values34_148"
" local-values36_147"
" who37_141"
" s38_142)))))))"
"(define-values"
"(do-syntax-local-expand-expression41.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_149 given-argc_150)"
"(if(= given-argc_150 4)"
"(let-values(((l1_151) given-kws_149))"
"(let-values(((l1_152)(if(null? l1_151) l1_151(if(eq?(car l1_151) '#:local-keys)(cdr l1_151) l1_151))))"
"(let-values(((l1_153) l1_152))"
"(let-values(((l1_154)"
"(if(null? l1_153) l1_153(if(eq?(car l1_153) '#:local-values)(cdr l1_153) l1_153))))"
"(null? l1_154)))))"
" #f))"
"(case-lambda"
"((given-kws_155 given-args_156 who_157 s_158)(unpack40.1$1 given-kws_155 given-args_156 who_157 s_158)))"
" null"
" '(#:local-keys #:local-values)"
"(let-values(((do-syntax-local-expand-expression_159)"
"(case-lambda((who_160 s_161)(unpack40.1$1 null null who_160 s_161)))))"
" do-syntax-local-expand-expression_159)))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_162)"
"(let-values(((temp98_163) 'syntax-local-expand-expression)((s99_164) s_162))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-expand-expression41.1))"
"(do-syntax-local-expand-expression39.1 #f #f #f #f temp98_163 s99_164)"
"(do-syntax-local-expand-expression41.1 temp98_163 s99_164)))))"
"(define-values"
"(syntax-local-expand-expression/extend-environment)"
"(lambda(s_165 keys_166 values_167)"
"(let-values(((...and/local-expand.rkt:60:2_168) do-syntax-local-expand-expression41.1)"
"((temp100_169) 'syntax-local-expand-expression/extend-environment)"
"((s101_170) s_165)"
"((keys102_171) keys_166)"
"((values103_172) values_167))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-expand-expression41.1))"
"(do-syntax-local-expand-expression39.1 keys102_171 #t values103_172 #t temp100_169 s101_170)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:60:2_168"
" keyword-procedure-extract"
" '(#:local-keys #:local-values)"
" 4)"
" '(#:local-keys #:local-values)"
"(list keys102_171 values103_172)"
" temp100_169"
" s101_170)))))"
"(define-values"
"(do-local-expand60.1)"
"(lambda(as-transformer?43_173"
" as-transformer?49_174"
" capture-lifts?42_175"
" capture-lifts?48_176"
" lift-key44_177"
" lift-key50_178"
" local-keys46_179"
" local-keys52_180"
" local-values47_181"
" local-values53_182"
" skip-log-exit?45_183"
" skip-log-exit?51_184"
" who56_185"
" s57_186"
" context58_187"
" stop-ids59_188"
" intdefs54_189"
" intdefs55_190)"
"(let-values(((who_191) who56_185))"
"(let-values(((s_192) s57_186))"
"(let-values(((context_193) context58_187))"
"(let-values(((stop-ids_194) stop-ids59_188))"
"(let-values(((intdefs_195)(if intdefs55_190 intdefs54_189 #f)))"
"(let-values(((capture-lifts?_196)(if capture-lifts?48_176 capture-lifts?42_175 #f)))"
"(let-values(((as-transformer?_197)(if as-transformer?49_174 as-transformer?43_173 #f)))"
"(let-values(((lift-key_198)"
"(if lift-key50_178"
" lift-key44_177"
"(if(let-values(((or-part_199) capture-lifts?_196))"
"(if or-part_199 or-part_199 as-transformer?_197))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_200)(if skip-log-exit?51_184 skip-log-exit?45_183 #f)))"
"(let-values(((local-keys_201)(if local-keys52_180 local-keys46_179 null)))"
"(let-values(((local-values_202)(if local-values53_182 local-values47_181 null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_192)"
"(void)"
"                                              (let-values () (raise-argument-error who_191 \"syntax?\" s_192)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_210)(list? context_193)))"
"(if or-part_210"
" or-part_210"
"(memq"
" context_193"
"(if as-transformer?_197"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"(if as-transformer?_197"
"                                                     \"(or/c 'expression 'top-level list?)\""
"                                                     \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_193)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_211)(not stop-ids_194)))"
"(if or-part_211"
" or-part_211"
"(if(list? stop-ids_194)"
"(andmap2 identifier? stop-ids_194)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"                                                     \"(or/c (listof identifier?) #f)\""
" stop-ids_194)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_212)(not intdefs_195)))"
"(if or-part_212"
" or-part_212"
"(let-values(((or-part_213)"
"(1/internal-definition-context? intdefs_195)))"
"(if or-part_213"
" or-part_213"
"(if(list? intdefs_195)"
"(andmap2 1/internal-definition-context? intdefs_195)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"                                                       \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_195)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-keys_201)"
"(void)"
"(let-values()"
"                                                        (raise-argument-error who_191 \"list?\" local-keys_201)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-values_202)"
"(void)"
"(let-values()"
"                                                          (raise-argument-error who_191 \"list?\" local-values_202)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(=(length local-keys_201)(length local-values_202))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_191"
"                                                             \"different lengths for list of keys and values for extending the environment\""
"                                                             \"keys\""
" local-keys_201"
"                                                             \"values\""
" local-values_202)))"
"(values))))"
"(let-values(((ctx_203)"
"(let-values(((who104_214) who_191))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who104_214 #t)"
"(get-current-expand-context8.1 who104_214)))))"
"(let-values(((phase_204)"
"(if as-transformer?_197"
"(add1(expand-context-phase ctx_203))"
"(expand-context-phase ctx_203))))"
"(let-values(((base-local-ctx_205)"
"(let-values(((...and/local-expand.rkt:111:25_215)"
" make-local-expand-context35.1)"
"((ctx105_216) ctx_203)"
"((context106_217) context_193)"
"((phase107_218) phase_204)"
"((intdefs108_219) intdefs_195)"
"((stop-ids109_220) stop-ids_194))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" context106_217"
" intdefs108_219"
" phase107_218"
" #t"
" stop-ids109_220"
" #t"
" ctx105_216)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:111:25_215"
" keyword-procedure-extract"
" '(#:context #:intdefs #:phase #:stop-ids)"
" 3)"
" '(#:context #:intdefs #:phase #:stop-ids)"
"(list"
" context106_217"
" intdefs108_219"
" phase107_218"
" stop-ids109_220)"
" ctx105_216)))))"
"(let-values(((local-ctx_206)"
"(let-values(((the-struct_221) base-local-ctx_205))"
"(if(expand-context? the-struct_221)"
"(let-values(((user-env110_222)"
"(let-values(((lst_223) local-keys_201)"
"((lst_224)"
" local-values_202))"
"(begin"
"(if(list? lst_223)"
"(void)"
"(let-values()(in-list lst_223)))"
"(if(list? lst_224)"
"(void)"
"(let-values()(in-list lst_224)))"
"((letrec-values(((for-loop_225)"
"(lambda(user-env_226"
" lst_227"
" lst_228)"
"(if(if(pair?"
" lst_227)"
"(pair?"
" lst_228)"
" #f)"
"(let-values(((key_229)"
"(unsafe-car"
" lst_227))"
"((value_230)"
"(unsafe-car"
" lst_228)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((user-env_231)"
"(let-values(((user-env_232)"
" user-env_226))"
"(let-values(((user-env_233)"
"(let-values()"
"(hash-set"
" user-env_232"
" key_229"
" value_230))))"
"(values"
" user-env_233)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_225"
" user-env_231"
"(unsafe-cdr"
" lst_227)"
"(unsafe-cdr"
" lst_228))"
" user-env_231))"
" user-env_226))"
" user-env_226))))"
" for-loop_225)"
"(expand-context-user-env"
" base-local-ctx_205)"
" lst_223"
" lst_224)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_221)"
"(root-expand-context-post-expansion-scope"
" the-struct_221)"
"(root-expand-context-top-level-bind-scope"
" the-struct_221)"
"(root-expand-context-all-scopes-stx the-struct_221)"
"(root-expand-context-use-site-scopes"
" the-struct_221)"
"(root-expand-context-defined-syms the-struct_221)"
"(root-expand-context-frame-id the-struct_221)"
"(root-expand-context-counter the-struct_221)"
"(root-expand-context-lift-key the-struct_221)"
"(expand-context-context the-struct_221)"
"(expand-context-phase the-struct_221)"
"(expand-context-namespace the-struct_221)"
"(expand-context-env the-struct_221)"
" user-env110_222"
"(expand-context-post-expansion-scope-action"
" the-struct_221)"
"(expand-context-scopes the-struct_221)"
"(expand-context-def-ctx-scopes the-struct_221)"
"(expand-context-reference-records the-struct_221)"
"(expand-context-only-immediate? the-struct_221)"
"(expand-context-just-once? the-struct_221)"
"(expand-context-module-begin-k the-struct_221)"
"(expand-context-need-eventually-defined"
" the-struct_221)"
"(expand-context-allow-unbound? the-struct_221)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_221)"
"(expand-context-stops the-struct_221)"
"(expand-context-current-introduction-scopes"
" the-struct_221)"
"(expand-context-declared-submodule-names"
" the-struct_221)"
"(expand-context-lifts the-struct_221)"
"(expand-context-lift-envs the-struct_221)"
"(expand-context-module-lifts the-struct_221)"
"(expand-context-require-lifts the-struct_221)"
"(expand-context-to-module-lifts the-struct_221)"
"(expand-context-requires+provides the-struct_221)"
"(expand-context-name the-struct_221)"
"(expand-context-observer the-struct_221)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context?\""
" the-struct_221)))))"
"(let-values(((input-s_207)"
"(let-values(((temp111_234)"
"(flip-introduction-scopes s_192 ctx_203))"
"((intdefs112_235) intdefs_195))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" #f"
" #f"
" temp111_234"
" intdefs112_235)"
"(add-intdef-scopes23.1"
" temp111_234"
" intdefs112_235)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_236)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_236"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_236"
" 'enter-local))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_197"
"(let-values()"
"(let-values(((obs_237)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_237"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_237"
" 'phase-up))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_238)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_238"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_238"
" 'local-pre"
" input-s_207)"
"(call-expand-observe"
" obs_238"
" 'start-expand)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((output-s_208)"
"(if(if as-transformer?_197"
" capture-lifts?_196"
" #f)"
"(let-values()"
"(let-values(((...and/local-expand.rkt:129:21_239)"
" expand-transformer94.1)"
"((input-s113_240) input-s_207)"
"((local-ctx114_241)"
" local-ctx_206)"
"((context115_242) context_193)"
"((temp116_243) #t)"
"((lift-key117_244)"
" lift-key_198))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-transformer94.1))"
"(expand-transformer92.1"
" temp116_243"
" #t"
" context115_242"
" #t"
" #f"
" #f"
" lift-key117_244"
" #t"
" input-s113_240"
" local-ctx114_241)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:129:21_239"
" keyword-procedure-extract"
" '(#:begin-form? #:context #:lift-key)"
" 4)"
" '(#:begin-form? #:context #:lift-key)"
"(list"
" temp116_243"
" context115_242"
" lift-key117_244)"
" input-s113_240"
" local-ctx114_241))))"
"(if as-transformer?_197"
"(let-values()"
"(let-values(((...and/local-expand.rkt:134:21_245)"
" expand-transformer94.1)"
"((input-s118_246)"
" input-s_207)"
"((local-ctx119_247)"
" local-ctx_206)"
"((context120_248)"
" context_193)"
"((temp121_249) #f)"
"((temp122_250)"
"(eq?"
" 'top-level"
" context_193))"
"((lift-key123_251)"
" lift-key_198))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-transformer94.1))"
"(expand-transformer92.1"
" temp122_250"
" #t"
" context120_248"
" #t"
" temp121_249"
" #t"
" lift-key123_251"
" #t"
" input-s118_246"
" local-ctx119_247)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:134:21_245"
" keyword-procedure-extract"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
" 4)"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
"(list"
" temp122_250"
" context120_248"
" temp121_249"
" lift-key123_251)"
" input-s118_246"
" local-ctx119_247))))"
"(if capture-lifts?_196"
"(let-values()"
"(let-values(((...and/local-expand.rkt:140:21_252)"
" expand/capture-lifts81.1)"
"((input-s124_253)"
" input-s_207)"
"((local-ctx125_254)"
" local-ctx_206)"
"((temp126_255) #t)"
"((lift-key127_256)"
" lift-key_198))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand/capture-lifts81.1))"
"(expand/capture-lifts79.1"
" temp126_255"
" #t"
" #f"
" #f"
" lift-key127_256"
" #t"
" input-s124_253"
" local-ctx125_254)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:140:21_252"
" keyword-procedure-extract"
" '(#:begin-form? #:lift-key)"
" 4)"
" '(#:begin-form? #:lift-key)"
"(list temp126_255 lift-key127_256)"
" input-s124_253"
" local-ctx125_254))))"
"(let-values()"
"(let-values(((input-s128_257)"
" input-s_207)"
"((local-ctx129_258)"
" local-ctx_206))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" input-s128_257"
" local-ctx129_258)"
"(expand7.1"
" input-s128_257"
" local-ctx129_258)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_259)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_259"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_259"
" 'local-post"
" output-s_208))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_209)"
"(flip-introduction-scopes"
" output-s_208"
" ctx_203)))"
"(begin"
"(if skip-log-exit?_200"
"(void)"
"(let-values()"
"(let-values(((obs_260)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_260"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_260"
" 'exit-local"
" result-s_209))"
"(void)))"
"(void)))))"
" result-s_209)))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack61.1)"
"(lambda(given-kws_261 given-args_262 who56_263 s57_264 context58_265 stop-ids59_266 intdefs54_267 intdefs55_268)"
"(let-values(((as-transformer?49_269)(if(pair? given-kws_261)(eq? '#:as-transformer?(car given-kws_261)) #f)))"
"(let-values(((as-transformer?43_270)(if as-transformer?49_269(car given-args_262)(void)))"
"((given-kws_271)(if as-transformer?49_269(cdr given-kws_261) given-kws_261))"
"((given-args_272)(if as-transformer?49_269(cdr given-args_262) given-args_262)))"
"(let-values(((capture-lifts?48_273)(if(pair? given-kws_271)(eq? '#:capture-lifts?(car given-kws_271)) #f)))"
"(let-values(((capture-lifts?42_274)(if capture-lifts?48_273(car given-args_272)(void)))"
"((given-kws_275)(if capture-lifts?48_273(cdr given-kws_271) given-kws_271))"
"((given-args_276)(if capture-lifts?48_273(cdr given-args_272) given-args_272)))"
"(let-values(((lift-key50_277)(if(pair? given-kws_275)(eq? '#:lift-key(car given-kws_275)) #f)))"
"(let-values(((lift-key44_278)(if lift-key50_277(car given-args_276)(void)))"
"((given-kws_279)(if lift-key50_277(cdr given-kws_275) given-kws_275))"
"((given-args_280)(if lift-key50_277(cdr given-args_276) given-args_276)))"
"(let-values(((local-keys52_281)(if(pair? given-kws_279)(eq? '#:local-keys(car given-kws_279)) #f)))"
"(let-values(((local-keys46_282)(if local-keys52_281(car given-args_280)(void)))"
"((given-kws_283)(if local-keys52_281(cdr given-kws_279) given-kws_279))"
"((given-args_284)(if local-keys52_281(cdr given-args_280) given-args_280)))"
"(let-values(((local-values53_285)"
"(if(pair? given-kws_283)(eq? '#:local-values(car given-kws_283)) #f)))"
"(let-values(((local-values47_286)(if local-values53_285(car given-args_284)(void)))"
"((given-kws_287)(if local-values53_285(cdr given-kws_283) given-kws_283))"
"((given-args_288)(if local-values53_285(cdr given-args_284) given-args_284)))"
"(let-values(((skip-log-exit?51_289)(pair? given-kws_287)))"
"(let-values(((skip-log-exit?45_290)(if skip-log-exit?51_289(car given-args_288)(void))))"
"(do-local-expand60.1"
" as-transformer?43_270"
" as-transformer?49_269"
" capture-lifts?42_274"
" capture-lifts?48_273"
" lift-key44_278"
" lift-key50_277"
" local-keys46_282"
" local-keys52_281"
" local-values47_286"
" local-values53_285"
" skip-log-exit?45_290"
" skip-log-exit?51_289"
" who56_263"
" s57_264"
" context58_265"
" stop-ids59_266"
" intdefs54_267"
" intdefs55_268)))))))))))))))"
"(define-values"
"(do-local-expand62.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_291 given-argc_292)"
"(if(if(>= given-argc_292 6)(<= given-argc_292 7) #f)"
"(let-values(((l1_293) given-kws_291))"
"(let-values(((l1_294)"
"(if(null? l1_293) l1_293(if(eq?(car l1_293) '#:as-transformer?)(cdr l1_293) l1_293))))"
"(let-values(((l1_295) l1_294))"
"(let-values(((l1_296)"
"(if(null? l1_295) l1_295(if(eq?(car l1_295) '#:capture-lifts?)(cdr l1_295) l1_295))))"
"(let-values(((l1_297) l1_296))"
"(let-values(((l1_298)"
"(if(null? l1_297) l1_297(if(eq?(car l1_297) '#:lift-key)(cdr l1_297) l1_297))))"
"(let-values(((l1_299) l1_298))"
"(let-values(((l1_300)"
"(if(null? l1_299)"
" l1_299"
"(if(eq?(car l1_299) '#:local-keys)(cdr l1_299) l1_299))))"
"(let-values(((l1_301) l1_300))"
"(let-values(((l1_302)"
"(if(null? l1_301)"
" l1_301"
"(if(eq?(car l1_301) '#:local-values)(cdr l1_301) l1_301))))"
"(let-values(((l1_303) l1_302))"
"(let-values(((l1_304)"
"(if(null? l1_303)"
" l1_303"
"(if(eq?(car l1_303) '#:skip-log-exit?)(cdr l1_303) l1_303))))"
"(null? l1_304)))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_305 given-args_306 who_307 s_308 context_309 stop-ids_310)"
"(unpack61.1 given-kws_305 given-args_306 who_307 s_308 context_309 stop-ids_310 #f #f))"
"((given-kws_311 given-args_312 who_313 s_314 context_315 stop-ids_316 intdefs54_317)"
"(unpack61.1 given-kws_311 given-args_312 who_313 s_314 context_315 stop-ids_316 intdefs54_317 #t)))"
" null"
" '(#:as-transformer? #:capture-lifts? #:lift-key #:local-keys #:local-values #:skip-log-exit?)"
"(let-values(((do-local-expand_318)"
"(case-lambda"
"((who_319 s_320 context_321 stop-ids_322)"
"(unpack61.1 null null who_319 s_320 context_321 stop-ids_322 #f #f))"
"((who_323 s_324 context_325 stop-ids_326 intdefs54_327)"
"(unpack61.1 null null who_323 s_324 context_325 stop-ids_326 intdefs54_327 #t)))))"
" do-local-expand_318)))"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 #f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 #f #f #f #f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 #t #t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values(((s_29) s10_25))"
"(let-values(((from-s_30) from-s11_26))"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 #f #f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
"      (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values(((or-part_40) maybe-insp_39))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f temp1_2 #t)"
"(new-namespace11.1 temp1_2))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) #f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((ns_9)(1/variable-reference->namespace vr_8)))(namespace-source-name ns_9)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'syntax-local-expand-expression/extend-environment"
" 'syntax-local-environment-ref"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e 1/syntax-e)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source 1/syntax-source)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column 1/syntax-column)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position 1/syntax-position)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'syntax-local-expand-expression/extend-environment"
" syntax-local-expand-expression/extend-environment))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-environment-ref syntax-local-environment-ref))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry namespace-module-registry$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(define-values"
"(lifted/1.1$2)"
"(make-required 'declare-kernel-module!(case-lambda((self_5 ns_6)(apply missing-kw self_5 ns_6 null))) #f #f))"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_7 main-ids2_8 ns5_9)"
"(let-values(((ns_10) ns5_9))"
"(let-values(((eval_11) eval1_7))"
"(let-values(((main-ids_12) main-ids2_8))"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_13) copy-runtime-module!26.1)"
"((temp51_14) '#%kernel)"
"((temp52_15) '#%runtime)"
"((temp53_16)(set-union primitive-ids main-ids_12))"
"((temp54_17)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"((ns55_18) ns_10))"
"(if(variable-reference-constant?(#%variable-reference copy-runtime-module!26.1))"
"(copy-runtime-module!24.1 #f #f temp54_17 #t ns55_18 #f #f #f #f temp53_16 #t temp52_15 #t temp51_14)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:23:2_13"
" keyword-procedure-extract"
" '(#:extras #:namespace #:skip #:to)"
" 3)"
" '(#:extras #:namespace #:skip #:to)"
"(list temp54_17 ns55_18 temp53_16 temp52_15)"
" temp51_14)))"
"(let-values(((...nder/boot/kernel.rkt:30:2_19) declare-reexporting-module!50.1)"
"((temp56_20) '#%kernel)"
"((temp57_21) '(#%core #%runtime #%main))"
"((ns58_22) ns_10))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns58_22 #f #f temp56_20 temp57_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:30:2_19"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns58_22)"
" temp56_20"
" temp57_21))))))))))"
"(define-values"
"(unpack7.1)"
"(lambda(given-kws_23 given-args_24 ns5_25)"
"(let-values(((eval1_26)(car given-args_24))"
"((given-kws_27)(cdr given-kws_23))"
"((given-args_28)(cdr given-args_24)))"
"(let-values(((main-ids2_29)(car given-args_28)))(declare-kernel-module!6.1 eval1_26 main-ids2_29 ns5_25)))))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lifted/1.1$2"
"(lambda(given-kws_30 given-argc_31)"
"(if(= given-argc_31 3)"
"(let-values(((l2_32) given-kws_30))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:eval)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)(if(eq?(car l2_33) '#:main-ids)(null?(cdr l2_33)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_34 given-args_35 ns_36)(unpack7.1 given-kws_34 given-args_35 ns_36)))"
" '(#:eval #:main-ids)"
" '(#:eval #:main-ids)))"
"(define-values"
"(lifted/2.1$2)"
"(make-required 'copy-runtime-module!(case-lambda((self_37 name_38)(apply missing-kw self_37 name_38 null))) #f #f))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lambda(alts12_39"
" alts19_40"
" extras13_41"
" extras20_42"
" namespace10_43"
" primitive?14_44"
" primitive?21_45"
" protected?15_46"
" protected?22_47"
" skip11_48"
" skip18_49"
" to9_50"
" to16_51"
" name23_52)"
"(let-values(((name_53) name23_52))"
"(let-values(((to-name_54)(if to16_51 to9_50 name_53)))"
"(let-values(((ns_55) namespace10_43))"
"(let-values(((skip-syms_56)(if skip18_49 skip11_48(seteq))))"
"(let-values(((alts_57)(if alts19_40 alts12_39 '#hasheq())))"
"(let-values(((extras_58)(if extras20_42 extras13_41 '#hasheq())))"
"(let-values(((primitive?_59)(if primitive?21_45 primitive?14_44 #t)))"
"(let-values(((protected?_60)(if protected?22_47 protected?15_46 #f)))"
"(let-values()"
"(let-values(((mod-name_61)(list 'quote name_53)))"
"(let-values(((prims_62)(1/primitive-table name_53)))"
"(let-values((()"
"(begin"
"(let-values(((ht_65) prims_62))"
"(begin"
"(if((lambda(ht_66)(hash? ht_66)) ht_65)"
"(void)"
"(let-values()(default-in-hash-keys ht_65)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68 i_69)"
"(if i_69"
"(let-values(((sym_70)"
"(hash-iterate-key ht_65 i_69)))"
"(if #t"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_68))"
"(let-values(((fold-var_73)"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_70))"
"(void)))))"
"(values fold-var_73)))))"
"(if #t"
"(for-loop_67"
" fold-var_71"
"(hash-iterate-next ht_65 i_69))"
" fold-var_71))"
" fold-var_68))"
" fold-var_68))))"
" for-loop_67)"
"(void)"
"(hash-iterate-first ht_65))))"
"(values))))"
"(let-values(((ht_63)"
"(let-values(((ht_74) prims_62))"
"(begin"
"(if((lambda(ht_75)(hash? ht_75)) ht_74)"
"(void)"
"(let-values()(default-in-hash ht_74)))"
"((letrec-values(((for-loop_76)"
"(lambda(table_77 i_78)"
"(if i_78"
"(let-values(((sym_79 val_80)"
"(hash-iterate-key+value ht_74 i_78)))"
"(if #t"
"(let-values(((table_81)"
"(let-values(((table_82)"
" table_77))"
"(if(set-member?"
" skip-syms_56"
" sym_79)"
" table_82"
"(let-values(((table_83)"
" table_82))"
"(let-values(((table_84)"
"(let-values()"
"(let-values(((key_85"
" val_86)"
"(let-values()"
"(values"
" sym_79"
"(let-values(((or-part_87)"
"(hash-ref"
" alts_57"
" sym_79"
" #f)))"
"(if or-part_87"
" or-part_87"
" val_80))))))"
"(hash-set"
" table_83"
" key_85"
" val_86)))))"
"(values table_84)))))))"
"(if #t"
"(for-loop_76"
" table_81"
"(hash-iterate-next ht_74 i_78))"
" table_81))"
" table_77))"
" table_77))))"
" for-loop_76)"
" '#hasheq()"
"(hash-iterate-first ht_74))))))"
"(let-values(((ht+extras_64)"
"(let-values(((ht_88) extras_58))"
"(begin"
"(if((lambda(ht_89)(hash? ht_89)) ht_88)"
"(void)"
"(let-values()(default-in-hash ht_88)))"
"((letrec-values(((for-loop_90)"
"(lambda(ht_91 i_92)"
"(if i_92"
"(let-values(((k_93 v_94)"
"(hash-iterate-key+value"
" ht_88"
" i_92)))"
"(if #t"
"(let-values(((ht_95)"
"(let-values(((ht_96) ht_91))"
"(let-values(((ht_97)"
"(let-values()"
"(hash-set"
" ht_96"
" k_93"
" v_94))))"
"(values ht_97)))))"
"(if #t"
"(for-loop_90"
" ht_95"
"(hash-iterate-next ht_88 i_92))"
" ht_95))"
" ht_91))"
" ht_91))))"
" for-loop_90)"
" ht_63"
"(hash-iterate-first ht_88))))))"
"(let-values(((...nder/boot/kernel.rkt:51:2_98) declare-hash-based-module!41.1)"
"((to-name59_99) to-name_54)"
"((ht+extras60_100) ht+extras_64)"
"((ns61_101) ns_55)"
"((primitive?62_102) primitive?_59)"
"((protected?63_103) protected?_60))"
"(if(variable-reference-constant?"
"(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns61_101"
" primitive?62_102"
" #t"
" #f"
" #f"
" protected?63_103"
" #t"
" #f"
" #f"
" to-name59_99"
" ht+extras60_100)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:51:2_98"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:protected?)"
" 4)"
" '(#:namespace #:primitive? #:protected?)"
"(list ns61_101 primitive?62_102 protected?63_103)"
" to-name59_99"
" ht+extras60_100)))))))))))))))))))"
"(define-values"
"(unpack25.1)"
"(lambda(given-kws_104 given-args_105 name23_106)"
"(let-values(((alts19_107)(if(pair? given-kws_104)(eq? '#:alts(car given-kws_104)) #f)))"
"(let-values(((alts12_108)(if alts19_107(car given-args_105)(void)))"
"((given-kws_109)(if alts19_107(cdr given-kws_104) given-kws_104))"
"((given-args_110)(if alts19_107(cdr given-args_105) given-args_105)))"
"(let-values(((extras20_111)(if(pair? given-kws_109)(eq? '#:extras(car given-kws_109)) #f)))"
"(let-values(((extras13_112)(if extras20_111(car given-args_110)(void)))"
"((given-kws_113)(if extras20_111(cdr given-kws_109) given-kws_109))"
"((given-args_114)(if extras20_111(cdr given-args_110) given-args_110)))"
"(let-values(((namespace10_115)(car given-args_114))"
"((given-kws_116)(cdr given-kws_113))"
"((given-args_117)(cdr given-args_114)))"
"(let-values(((primitive?21_118)(if(pair? given-kws_116)(eq? '#:primitive?(car given-kws_116)) #f)))"
"(let-values(((primitive?14_119)(if primitive?21_118(car given-args_117)(void)))"
"((given-kws_120)(if primitive?21_118(cdr given-kws_116) given-kws_116))"
"((given-args_121)(if primitive?21_118(cdr given-args_117) given-args_117)))"
"(let-values(((protected?22_122)"
"(if(pair? given-kws_120)(eq? '#:protected?(car given-kws_120)) #f)))"
"(let-values(((protected?15_123)(if protected?22_122(car given-args_121)(void)))"
"((given-kws_124)(if protected?22_122(cdr given-kws_120) given-kws_120))"
"((given-args_125)(if protected?22_122(cdr given-args_121) given-args_121)))"
"(let-values(((skip18_126)(if(pair? given-kws_124)(eq? '#:skip(car given-kws_124)) #f)))"
"(let-values(((skip11_127)(if skip18_126(car given-args_125)(void)))"
"((given-kws_128)(if skip18_126(cdr given-kws_124) given-kws_124))"
"((given-args_129)(if skip18_126(cdr given-args_125) given-args_125)))"
"(let-values(((to16_130)(pair? given-kws_128)))"
"(let-values(((to9_131)(if to16_130(car given-args_129)(void))))"
"(copy-runtime-module!24.1"
" alts12_108"
" alts19_107"
" extras13_112"
" extras20_111"
" namespace10_115"
" primitive?14_119"
" primitive?21_118"
" protected?15_123"
" protected?22_122"
" skip11_127"
" skip18_126"
" to9_131"
" to16_130"
" name23_106))))))))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lifted/2.1$2"
"(lambda(given-kws_132 given-argc_133)"
"(if(= given-argc_133 3)"
"(subsets? '(#:namespace) given-kws_132 '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to))"
" #f))"
"(case-lambda((given-kws_134 given-args_135 name_136)(unpack25.1 given-kws_134 given-args_135 name_136)))"
" '(#:namespace)"
" '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/3.1$1)"
"(make-required"
" 'declare-hash-based-module!"
"(case-lambda((self_137 name_138 ht_139)(apply missing-kw self_137 name_138 ht_139 null)))"
" #f"
" #f))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lambda(namespace27_140"
" primitive?28_141"
" primitive?33_142"
" protected30_143"
" protected35_144"
" protected?29_145"
" protected?34_146"
" register-builtin?31_147"
" register-builtin?36_148"
" name37_149"
" ht38_150)"
"(let-values(((name_151) name37_149))"
"(let-values(((ht_152) ht38_150))"
"(let-values(((ns_153) namespace27_140))"
"(let-values(((primitive?_154)(if primitive?33_142 primitive?28_141 #f)))"
"(let-values(((protected?_155)(if protected?34_146 protected?29_145 #f)))"
"(let-values(((protected-syms_156)(if protected35_144 protected30_143 null)))"
"(let-values(((register-builtin?_157)(if register-builtin?36_148 register-builtin?31_147 #f)))"
"(let-values()"
"(let-values(((mpi_158)(1/module-path-index-join(list 'quote name_151) #f)))"
"(let-values(((ns64_159) ns_153)"
"((temp65_160)"
"(let-values(((...nder/boot/kernel.rkt:65:3_162) make-module36.1)"
"((temp67_163) #t)"
"((primitive?68_164) primitive?_154)"
"((temp69_165) #t)"
"((temp70_166)(not protected?_155))"
"((mpi71_167) mpi_158)"
"((temp72_168)"
"(hasheqv"
" 0"
"(let-values(((ht_170) ht_152))"
"(begin"
"(if((lambda(ht_171)(hash? ht_171)) ht_170)"
"(void)"
"(let-values()(default-in-hash-keys ht_170)))"
"((letrec-values(((for-loop_172)"
"(lambda(table_173 i_174)"
"(if i_174"
"(let-values(((sym_175)"
"(hash-iterate-key"
" ht_170"
" i_174)))"
"(if #t"
"(let-values(((table_176)"
"(let-values(((table_177)"
" table_173))"
"(let-values(((table_178)"
"(let-values()"
"(let-values(((key_179"
" val_180)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_157"
"(let-values()"
"(register-built-in-symbol!"
" sym_175))"
"(void))"
"(values))))"
"(let-values(((binding_181)"
"(let-values(((mpi74_182)"
" mpi_158)"
"((temp75_183)"
" 0)"
"((sym76_184)"
" sym_175))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi74_182"
" temp75_183"
" sym76_184)"
"(make-module-binding22.1"
" mpi74_182"
" temp75_183"
" sym76_184)))))"
"(values"
" sym_175"
"(if(let-values(((or-part_185)"
" protected?_155))"
"(if or-part_185"
" or-part_185"
"(member"
" sym_175"
" protected-syms_156)))"
"(provided1.1"
" binding_181"
" #t"
" #f)"
" binding_181)))))))"
"(hash-set"
" table_177"
" key_179"
" val_180)))))"
"(values"
" table_178)))))"
"(if #t"
"(for-loop_172"
" table_176"
"(hash-iterate-next ht_170 i_174))"
" table_176))"
" table_173))"
" table_173))))"
" for-loop_172)"
" '#hash()"
"(hash-iterate-first ht_170))))))"
"((temp73_169)"
"(lambda(data-box_186"
" ns_187"
" phase-shift_188"
" phase-level_189"
" self_190"
" bulk-binding-registry_191"
" insp_192)"
"(if(= 0 phase-level_189)"
"(let-values()"
"(let-values(((ht_193) ht_152))"
"(begin"
"(if((lambda(ht_194)(hash? ht_194)) ht_193)"
"(void)"
"(let-values()(default-in-hash ht_193)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_196 i_197)"
"(if i_197"
"(let-values(((sym_198 val_199)"
"(hash-iterate-key+value"
" ht_193"
" i_197)))"
"(if #t"
"(let-values(((fold-var_200)"
"(let-values(((fold-var_201)"
" fold-var_196))"
"(let-values(((fold-var_202)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_187"
" 0"
" sym_198"
" val_199))"
"(void)))))"
"(values"
" fold-var_202)))))"
"(if #t"
"(for-loop_195"
" fold-var_200"
"(hash-iterate-next"
" ht_193"
" i_197))"
" fold-var_200))"
" fold-var_196))"
" fold-var_196))))"
" for-loop_195)"
"(void)"
"(hash-iterate-first ht_193)))))"
"(void)))))"
"(if(variable-reference-constant?(#%variable-reference make-module36.1))"
"(make-module34.1"
" temp67_163"
" #t"
" #f"
" #f"
" temp73_169"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp70_166"
" #t"
" temp69_165"
" #t"
" #f"
" #f"
" primitive?68_164"
" #t"
" temp72_168"
" #f"
" #f"
" mpi71_167"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:65:3_162"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
"(list"
" temp67_163"
" temp73_169"
" temp70_166"
" temp69_165"
" primitive?68_164"
" temp72_168"
" mpi71_167)))))"
"((temp66_161)(1/module-path-index-resolve mpi_158)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!55.1))"
"(declare-module!53.1 #f #f ns64_159 temp65_160 temp66_161)"
"(declare-module!55.1 ns64_159 temp65_160 temp66_161))))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_203 given-args_204 name37_205 ht38_206)"
"(let-values(((namespace27_207)(car given-args_204))"
"((given-kws_208)(cdr given-kws_203))"
"((given-args_209)(cdr given-args_204)))"
"(let-values(((primitive?33_210)(if(pair? given-kws_208)(eq? '#:primitive?(car given-kws_208)) #f)))"
"(let-values(((primitive?28_211)(if primitive?33_210(car given-args_209)(void)))"
"((given-kws_212)(if primitive?33_210(cdr given-kws_208) given-kws_208))"
"((given-args_213)(if primitive?33_210(cdr given-args_209) given-args_209)))"
"(let-values(((protected35_214)(if(pair? given-kws_212)(eq? '#:protected(car given-kws_212)) #f)))"
"(let-values(((protected30_215)(if protected35_214(car given-args_213)(void)))"
"((given-kws_216)(if protected35_214(cdr given-kws_212) given-kws_212))"
"((given-args_217)(if protected35_214(cdr given-args_213) given-args_213)))"
"(let-values(((protected?34_218)(if(pair? given-kws_216)(eq? '#:protected?(car given-kws_216)) #f)))"
"(let-values(((protected?29_219)(if protected?34_218(car given-args_217)(void)))"
"((given-kws_220)(if protected?34_218(cdr given-kws_216) given-kws_216))"
"((given-args_221)(if protected?34_218(cdr given-args_217) given-args_217)))"
"(let-values(((register-builtin?36_222)(pair? given-kws_220)))"
"(let-values(((register-builtin?31_223)(if register-builtin?36_222(car given-args_221)(void))))"
"(declare-hash-based-module!39.1"
" namespace27_207"
" primitive?28_211"
" primitive?33_210"
" protected30_215"
" protected35_214"
" protected?29_219"
" protected?34_218"
" register-builtin?31_223"
" register-builtin?36_222"
" name37_205"
" ht38_206))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lifted/3.1$1"
"(lambda(given-kws_224 given-argc_225)"
"(if(= given-argc_225 4)"
"(subsets? '(#:namespace) given-kws_224 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" #f))"
"(case-lambda"
"((given-kws_226 given-args_227 name_228 ht_229)(unpack40.1 given-kws_226 given-args_227 name_228 ht_229)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/4.1$1)"
"(make-required"
" 'declare-reexporting-module!"
"(case-lambda((self_230 name_231 require-names_232)(apply missing-kw self_230 name_231 require-names_232 null)))"
" #f"
" #f))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lambda(namespace43_233 reexport?42_234 reexport?44_235 name46_236 require-names47_237)"
"(let-values(((name_238) name46_236))"
"(let-values(((require-names_239) require-names47_237))"
"(let-values(((reexport?_240)(if reexport?44_235 reexport?42_234 #t)))"
"(let-values(((ns_241) namespace43_233))"
"(let-values()"
"(let-values(((mpi_242)(1/module-path-index-join(list 'quote name_238) #f)))"
"(let-values(((require-mpis_243)"
"(alt-reverse"
"(let-values(((lst_244) require-names_239))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((require-name_248)(unsafe-car lst_247)))"
"(if #t"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250) fold-var_246))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_248)"
" #f))"
" fold-var_250))))"
"(values fold-var_251)))))"
"(if #t"
"(for-loop_245 fold-var_249(unsafe-cdr lst_247))"
" fold-var_249))"
" fold-var_246))"
" fold-var_246))))"
" for-loop_245)"
" null"
" lst_244))))))"
"(let-values(((ns77_252) ns_241)"
"((temp78_253)"
"(let-values(((...nder/boot/kernel.rkt:95:3_255) make-module36.1)"
"((temp80_256) #t)"
"((temp81_257) #t)"
"((mpi82_258) mpi_242)"
"((temp83_259)(list(cons 0 require-mpis_243)))"
"((temp84_260)"
"(if reexport?_240"
"(hasheqv"
" 0"
"(let-values(((lst_262) require-mpis_243))"
"(begin"
"(if(list? lst_262)(void)(let-values()(in-list lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(table_264 lst_265)"
"(if(pair? lst_265)"
"(let-values(((require-mpi_266)"
"(unsafe-car lst_265)))"
"(if #t"
"(let-values(((table_267)"
"(let-values(((m_268)"
"(namespace->module"
" ns_241"
"(1/module-path-index-resolve"
" require-mpi_266))))"
"(begin"
" #t"
"((letrec-values(((for-loop_269)"
"(lambda(table_270)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_271)"
"(let-values(((ht_272)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_268)"
"(module-self"
" m_268)"
" require-mpi_266)"
" 0)))"
"(begin"
"(if((lambda(ht_273)"
"(hash?"
" ht_273))"
" ht_272)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_272)))"
"((letrec-values(((for-loop_274)"
"(lambda(table_275"
" i_276)"
"(if i_276"
"(let-values(((sym_277"
" binding_278)"
"(hash-iterate-key+value"
" ht_272"
" i_276)))"
"(if #t"
"(let-values(((table_279)"
"(let-values(((table_280)"
" table_275))"
"(let-values(((table_281)"
"(let-values()"
"(let-values(((key_282"
" val_283)"
"(let-values()"
"(values"
" sym_277"
" binding_278))))"
"(hash-set"
" table_280"
" key_282"
" val_283)))))"
"(values"
" table_281)))))"
"(if #t"
"(for-loop_274"
" table_279"
"(hash-iterate-next"
" ht_272"
" i_276))"
" table_279))"
" table_275))"
" table_275))))"
" for-loop_274)"
" table_270"
"(hash-iterate-first"
" ht_272))))))"
"(if #f"
"(for-loop_269"
" table_271)"
" table_271))"
" table_270))"
" table_270))))"
" for-loop_269)"
" table_264)))))"
"(if #t"
"(for-loop_263"
" table_267"
"(unsafe-cdr lst_265))"
" table_267))"
" table_264))"
" table_264))))"
" for-loop_263)"
" '#hash()"
" lst_262))))"
" '#hasheqv()))"
"((void85_261) void))"
"(if(variable-reference-constant?(#%variable-reference make-module36.1))"
"(make-module34.1"
" temp80_256"
" #t"
" #f"
" #f"
" void85_261"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_257"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp84_260"
" temp83_259"
" #t"
" mpi82_258"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:95:3_255"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
"(list temp80_256 void85_261 temp81_257 temp84_260 temp83_259 mpi82_258)))))"
"((temp79_254)(1/module-path-index-resolve mpi_242)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!55.1))"
"(declare-module!53.1 #f #f ns77_252 temp78_253 temp79_254)"
"(declare-module!55.1 ns77_252 temp78_253 temp79_254))))))))))))"
"(define-values"
"(unpack49.1)"
"(lambda(given-kws_284 given-args_285 name46_286 require-names47_287)"
"(let-values(((namespace43_288)(car given-args_285))"
"((given-kws_289)(cdr given-kws_284))"
"((given-args_290)(cdr given-args_285)))"
"(let-values(((reexport?44_291)(pair? given-kws_289)))"
"(let-values(((reexport?42_292)(if reexport?44_291(car given-args_290)(void))))"
"(declare-reexporting-module!48.1"
" namespace43_288"
" reexport?42_292"
" reexport?44_291"
" name46_286"
" require-names47_287))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lifted/4.1$1"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 4)(subsets? '(#:namespace) given-kws_293 '(#:namespace #:reexport?)) #f))"
"(case-lambda"
"((given-kws_295 given-args_296 name_297 require-names_298)"
"(unpack49.1 given-kws_295 given-args_296 name_297 require-names_298)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" new:collection-path"
" 'collection-file-path"
" new:collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_1)(TH-place-channel-ref x_1 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_2)(TH-place-channel-ref x_2 0))(lambda(x_3)(TH-place-channel-ref x_3 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-accept-compiled"
" #t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(1/syntax-e exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_6)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(1/syntax-e exp_5))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_5))))"
"(let-values(((r_8)(cdr(1/syntax-e exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(1/syntax-e r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'default-load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_6)"
" #f)))))))"
"(define-values"
"(default-load-handler)"
"(lambda(path_1 expected-mod_2)"
"(begin"
"(if(path-string? path_1)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_1)))"
"(if(let-values(((or-part_3)(not expected-mod_2)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(symbol? expected-mod_2)))"
"(if or-part_4"
" or-part_4"
"(if(pair? expected-mod_2)"
"(if(list? expected-mod_2)"
"(if(let-values(((or-part_5)(not(car expected-mod_2))))"
"(if or-part_5 or-part_5(symbol?(car expected-mod_2))))"
"(andmap2 symbol?(cdr expected-mod_2))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_2)))"
"(if expected-mod_2"
"(let-values()"
"((let-values(((path1_6) path_1)"
"((temp2_7)"
"(lambda(i_8)"
"(begin"
"                             (if (regexp-match? '#rx\"[.]zo$\" path_1) (void) (let-values () (port-count-lines! i_8)))"
"(with-module-reading-parameterization+delay-source"
" path_1"
"(lambda()"
"(let-values(((c110433_9)(linklet-directory-start i_8)))"
"(if c110433_9"
"((lambda(pos_10)"
"(let-values(((b-pos_11)"
"(search-directory i_8 pos_10(encode-symbols expected-mod_2))))"
"(if b-pos_11"
"(let-values()"
"(begin"
"(file-position i_8 b-pos_11)"
"(let-values(((or-part_12)(cached-bundle i_8)))"
"(if or-part_12"
" or-part_12"
"(let-values(((v_13)(read i_8)))"
"(if(1/compiled-module-expression? v_13)"
"(lambda()((current-eval) v_13))"
"(error"
" 'default-load-handler"
"(string-append"
"                                                         \"expected a compiled module\\n\""
"                                                         \"  in: ~e\\n\""
"                                                         \"  found: ~e\")"
"(object-name i_8)"
" v_13)))))))"
"(if(pair? expected-mod_2)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                                (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_8)))))))"
" c110433_9)"
"(let-values(((c110434_14)(cached-bundle i_8)))"
"(if c110434_14"
"((lambda(thunk_15) thunk_15) c110434_14)"
"(if(if(pair? expected-mod_2)(not(car expected-mod_2)) #f)"
"(let-values() void)"
"(let-values()"
"(let-values(((s_16)(1/read-syntax(object-name i_8) i_8)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_16)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                                    \"expected a `module' declaration;\\n\""
"                                                                    \" found end-of-file\\n\""
"                                                                    \"  in: ~e\")"
"(object-name i_8)))"
"(void))"
"(values))))"
"(let-values(((m-s_17)(check-module-form s_16 path_1)))"
"(let-values(((s2_18)(1/read-syntax(object-name i_8) i_8)))"
"(begin"
"(if(eof-object? s2_18)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                            \"expected a `module' declaration;\\n\""
"                                                            \" found an extra form\\n\""
"                                                            \"  in: ~e\\n\""
"                                                            \"  found: ~.s\")"
"(object-name i_8)"
" s2_18)))"
"(lambda()((current-eval) m-s_17)))))))))))))))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 #f #f path1_6 temp2_7)"
"(call-with-input-file*63.1 path1_6 temp2_7)))))"
"(let-values()"
"(let-values(((add-top-interaction_19)"
"(lambda(s_20)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_20))))))"
"(let-values(((path3_21) path_1)"
"((temp4_22)"
"(lambda(i_23)"
"(begin"
"(port-count-lines! i_23)"
"((letrec-values(((loop_24)"
"(lambda(vals_25)"
"(let-values(((s_26)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t)"
"(let-values()"
"(1/read-syntax(object-name i_23) i_23)))))"
"(if(eof-object? s_26)"
"(apply values vals_25)"
"(loop_24"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_19 s_26)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_27"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_27)))))))))"
" loop_24)"
"(list(void)))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 #f #f path3_21 temp4_22)"
"(call-with-input-file*63.1 path3_21 temp4_22)))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_28 tag_29)"
"(let-values(((version-length_30)(string-length(version))))"
"(if(equal?(peek-byte i_28)(char->integer '#\\#))"
"(if(equal?(peek-byte i_28 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_28 2) version-length_30)"
"(if(equal?(peek-bytes version-length_30 3 i_28)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_28(+ 3 version-length_30))(char->integer tag_29))(+ version-length_30 4) #f)"
" #f)"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_31)(let-values(((pos_32)(linklet-bundle-or-directory-start i_31 '#\\D)))(if pos_32(+ pos_32 4) #f))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_33)"
"(let-values(((pos_34)(linklet-bundle-or-directory-start i_33 '#\\B)))"
"(let-values(((hash-code_35)(if pos_34(peek-bytes 20 pos_34 i_33) #f)))"
"(if(bytes? hash-code_35)"
"(if(= 20(bytes-length hash-code_35))"
"(if(let-values(((vec_36 len_37)"
"(let-values(((vec_38) hash-code_35))"
"(begin"
"(if(bytes? vec_38)(void)(let-values()(in-bytes vec_38)))"
"(values vec_38(bytes-length vec_38))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_39)"
"(lambda(result_40 pos_41)"
"(if(unsafe-fx< pos_41 len_37)"
"(let-values(((c_42)(bytes-ref vec_36 pos_41)))"
"(if #t"
"(let-values(((result_43)"
"(let-values(((result_44) result_40))"
"(let-values(((result_45)"
"(let-values()"
"(let-values()(not(eq? c_42 0))))))"
"(values result_45)))))"
"(if(if #t(not((lambda x_46 result_43) c_42)) #f)"
"(for-loop_39 result_43(unsafe-fx+ 1 pos_41))"
" result_43))"
" result_40))"
" result_40))))"
" for-loop_39)"
" #f"
" 0)))"
" hash-code_35"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_47)"
"(let-values(((c110435_48)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_47)))))"
"(if c110435_48"
"((lambda(declare-module_49)"
"(lambda()"
"(let-values(((...oot/load-handler.rkt:148:11_50) declare-module_49)((temp5_51)(1/current-namespace)))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...oot/load-handler.rkt:148:11_50"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list temp5_51)))))"
" c110435_48)"
"(let-values() #f)))))"
"(define-values"
"(read-number)"
"(lambda(i_52)"
"(let-values(((read-byte/not-eof_53)"
"(lambda(i_54)(let-values(((v_55)(read-byte i_54)))(if(eof-object? v_55) 0 v_55)))))"
"(bitwise-ior"
"(read-byte/not-eof_53 i_52)"
"(arithmetic-shift(read-byte/not-eof_53 i_52) 8)"
"(arithmetic-shift(read-byte/not-eof_53 i_52) 16)"
"(arithmetic-shift(read-byte/not-eof_53 i_52) 24)))))"
"(define-values"
"(search-directory)"
"(lambda(i_56 pos_57 bstr_58)"
"(if(zero? pos_57)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_56 pos_57)(values))))"
"(let-values(((name-len_59)(read-number i_56)))"
"(let-values(((v_60)(read-bytes name-len_59 i_56)))"
"(begin"
"(if(if(bytes? v_60)(=(bytes-length v_60) name-len_59) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                      \"failure getting submodule path\\n\""
"                      \"  in: ~e\\n\""
"                      \"  at position: ~a\\n\""
"                      \"  expected bytes: ~a\\n\""
"                      \"  read bytes: ~e\")"
"(object-name i_56)"
" pos_57"
" name-len_59"
" v_60)))"
"(if(bytes=? bstr_58 v_60)"
"(let-values()(read-number i_56))"
"(if(bytes<? bstr_58 v_60)"
"(let-values()"
"(begin(read-number i_56)(read-number i_56)(search-directory i_56(read-number i_56) bstr_58)))"
"(let-values()"
"(begin"
"(read-number i_56)"
"(read-number i_56)"
"(read-number i_56)"
"(search-directory i_56(read-number i_56) bstr_58)))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_61)"
"(if(symbol? expected-mod_61)"
"      (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(alt-reverse"
"(let-values(((lst_62)(cdr expected-mod_61)))"
"(begin"
"(if(list? lst_62)(void)(let-values()(in-list lst_62)))"
"((letrec-values(((for-loop_63)"
"(lambda(fold-var_64 lst_65)"
"(if(pair? lst_65)"
"(let-values(((s_66)(unsafe-car lst_65)))"
"(if #t"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_68) fold-var_64))"
"(let-values(((fold-var_69)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_70)"
"(string->bytes/utf-8"
"(symbol->string s_66))))"
"(let-values(((len_71)"
"(bytes-length bstr_70)))"
"(if(< len_71 255)"
"(let-values()"
"(bytes-append"
"(bytes len_71)"
" bstr_70))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_71"
" 4"
" #f"
" #f)"
" bstr_70))))))"
" fold-var_68))))"
"(values fold-var_69)))))"
"(if #t(for-loop_63 fold-var_67(unsafe-cdr lst_65)) fold-var_67))"
" fold-var_64))"
" fold-var_64))))"
" for-loop_63)"
" null"
" lst_62)))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_72 thunk_73)"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_72))"
"(let-values()(with-module-reading-parameterization thunk_73)))"
"(with-module-reading-parameterization thunk_73))))"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 #f(lambda() #f))))"
"(if v_6(cons a_5 v_6) #f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                        (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                        (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
"                                                                     (path-add-extension file_36 #\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
"                                                                       (path-add-extension alt-file_37 #\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68) alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c110637_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c110637_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c110637_71)"
"(let-values(((c110638_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c110638_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c110638_73)"
"(let-values(((c110639_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c110639_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c110639_75)"
"(let-values(((c110640_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c110640_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c110640_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) #f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) #f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box"
"(cons(cons p_92 v_93)(let-values(((or-part_97) l_96))(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" 0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_110)"
"(1/syntax-line stx_110)"
"(1/syntax-column stx_110)"
"(1/syntax-position stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) #f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1 from-namespace_115)"
" #f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 #f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 #t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
"                                                                       (if (equal? (car l_137) \"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_133 \".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"                                               (if (let-values (((or-part_138) (equal? (cadr s_126) \".\")))"
"                                                     (if or-part_138 or-part_138 (equal? (cadr s_126) \"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
"                                                             (if (equal? (cadr s_126) \"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 #f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" #f))))"
" #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(namespace-module-registry$1(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" #f)"
" #f)))"
"(if or-part_159"
" or-part_159"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_157"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_160 0(- len_161 3))"
"                                                                    \".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
"                                                                   (path-replace-extension p_162 #\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((v_166)(cadr s_126)))"
"                                                                 (if (let-values (((or-part_167) (equal? v_166 \".\")))"
"                                                                       (if or-part_167 or-part_167 (equal? v_166 \"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
"                                                                                                    \".\")))"
"(if or-part_170"
" or-part_170"
"                                                                                         (equal? (cadr s_126) \"..\")))"
" relto_127"
" #f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
"                                                                                                  \"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_126) \"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) #f))"
" #f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" #f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_176"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" #t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" #f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
"                                                                                    (if (string=? s_182 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_182 \"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" #f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_185)"
" #f)"
" #t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" #t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" #t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_173 (car s-parsed_173) \"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 0)"
"(simplify-path(cleanse-path s-parsed_173) #f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 3)"
"                                                                           (path-replace-extension name_194 #\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" #f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" #f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" #f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" #f)"
"(cons #f subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(1/eval"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))"
"(lambda(e_218 ns_219)"
"(if(eq? ns_219(1/current-namespace))"
"(c_217 e_218 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_219)"
"(let-values()(c_217 e_218 #t)))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(1/compile s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_222 in_223)"
"(begin"
"(if(input-port? in_223)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_223)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_222 in_223))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader5_1)"
"(lambda(mod-path3_2 sym4_3 fail-thunk1_4 fail-thunk2_5)"
"(let-values(((mod-path_6) mod-path3_2))"
"(let-values(((sym_7) sym4_3))"
"(let-values(((fail-thunk_8)(if fail-thunk2_5 fail-thunk1_4 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_9)(namespace-root-namespace(1/current-namespace))))"
"(let-values(((proc_10)"
"(if root-ns_9"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_9)"
"(let-values()(1/dynamic-require mod-path_6 sym_7 fail-thunk_8)))"
"(1/dynamic-require mod-path_6 sym_7 fail-thunk_8))))"
"(if(if(eq? sym_7 'read-syntax)"
"(if(procedure? proc_10)(procedure-arity-includes? proc_10 6) #f)"
" #f)"
"(let-values()"
"(lambda(name_11 input_12 mod-s_13 line_14 column_15 position_16)"
"(proc_10"
" name_11"
" input_12"
"(reader-syntax->syntax mod-s_13)"
" line_14"
" column_15"
" position_16)))"
"(let-values() proc_10)))))))))))"
"(case-lambda"
"((mod-path_17 sym_18)(dynamic-require-reader5_1 mod-path_17 sym_18 #f #f))"
"((mod-path_19 sym_20 fail-thunk1_21)(dynamic-require-reader5_1 mod-path_19 sym_20 fail-thunk1_21 #t)))))"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_3 disarmed-s_4 formals_5 bodys_6 ctx_7 log-renames-tag_8)"
"(let-values(((sc_9)(new-scope 'local)))"
"(let-values(((phase_10)(expand-context-phase ctx_7)))"
"(let-values(((ids_11)(parse-and-flatten-formals formals_5 sc_9 disarmed-s_4)))"
"(let-values((()"
"(begin"
"(let-values(((...nder/expand/expr.rkt:34:2_19) check-no-duplicate-ids10.1)"
"((ids30_20) ids_11)"
"((phase31_21) phase_10)"
"((s32_22) s_3)"
"                                       ((temp33_23) \"argument name\"))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 temp33_23 #t ids30_20 phase31_21 s32_22 #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:34:2_19"
" keyword-procedure-extract"
" '(#:what)"
" 5)"
" '(#:what)"
"(list temp33_23)"
" ids30_20"
" phase31_21"
" s32_22)))"
"(values))))"
"(let-values(((counter_12)(root-expand-context-counter ctx_7)))"
"(let-values(((keys_13)"
"(alt-reverse"
"(let-values(((lst_24) ids_11))"
"(begin"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27)"
"(if(pair? lst_27)"
"(let-values(((id_28)(unsafe-car lst_27)))"
"(if #t"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30) fold-var_26))"
"(let-values(((fold-var_31)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:39:17_32)"
" add-local-binding!35.1)"
"((id34_33)"
" id_28)"
"((phase35_34)"
" phase_10)"
"((counter36_35)"
" counter_12)"
"((s37_36)"
" s_3))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" s37_36"
" #t"
" id34_33"
" phase35_34"
" counter36_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:39:17_32"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list s37_36)"
" id34_33"
" phase35_34"
" counter36_35))))"
" fold-var_30))))"
"(values fold-var_31)))))"
"(if #t"
"(for-loop_25 fold-var_29(unsafe-cdr lst_27))"
" fold-var_29))"
" fold-var_26))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_24))))))"
"(let-values(((body-env_14)"
"(let-values(((lst_37) keys_13)((lst_38) ids_11))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"(if(list? lst_38)(void)(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(env_40 lst_41 lst_42)"
"(if(if(pair? lst_41)(pair? lst_42) #f)"
"(let-values(((key_43)(unsafe-car lst_41))"
"((id_44)(unsafe-car lst_42)))"
"(if(if #t #t #f)"
"(let-values(((env_45)"
"(let-values(((env_46) env_40))"
"(let-values(((env_47)"
"(let-values()"
"(env-extend"
" env_46"
" key_43"
"(local-variable1.1"
" id_44)))))"
"(values env_47)))))"
"(if(if #t #t #f)"
"(for-loop_39"
" env_45"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42))"
" env_45))"
" env_40))"
" env_40))))"
" for-loop_39)"
"(expand-context-env ctx_7)"
" lst_37"
" lst_38)))))"
"(let-values(((sc-formals_15)(add-scope formals_5 sc_9)))"
"(let-values(((sc-bodys_16)"
"(alt-reverse"
"(let-values(((lst_48) bodys_6))"
"(begin"
"(if(list? lst_48)(void)(let-values()(in-list lst_48)))"
"((letrec-values(((for-loop_49)"
"(lambda(fold-var_50 lst_51)"
"(if(pair? lst_51)"
"(let-values(((body_52)(unsafe-car lst_51)))"
"(if #t"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54) fold-var_50))"
"(let-values(((fold-var_55)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_52"
" sc_9))"
" fold-var_54))))"
"(values fold-var_55)))))"
"(if #t"
"(for-loop_49 fold-var_53(unsafe-cdr lst_51))"
" fold-var_53))"
" fold-var_50))"
" fold-var_50))))"
" for-loop_49)"
" null"
" lst_48))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_56)(expand-context-observer ctx_7)))"
"(if obs_56"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_56"
" log-renames-tag_8"
" sc-formals_15"
"(datum->syntax$1 #f sc-bodys_16)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_17)"
"(let-values(((the-struct_57) ctx_7))"
"(if(expand-context? the-struct_57)"
"(let-values(((env38_58) body-env_14)"
"((scopes39_59)(cons sc_9(expand-context-scopes ctx_7)))"
"((all-scopes-stx40_60)"
"(add-scope(root-expand-context-all-scopes-stx ctx_7) sc_9)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_57)"
"(root-expand-context-post-expansion-scope the-struct_57)"
"(root-expand-context-top-level-bind-scope the-struct_57)"
" all-scopes-stx40_60"
"(root-expand-context-use-site-scopes the-struct_57)"
"(root-expand-context-defined-syms the-struct_57)"
"(root-expand-context-frame-id the-struct_57)"
"(root-expand-context-counter the-struct_57)"
"(root-expand-context-lift-key the-struct_57)"
"(expand-context-context the-struct_57)"
"(expand-context-phase the-struct_57)"
"(expand-context-namespace the-struct_57)"
" env38_58"
"(expand-context-user-env the-struct_57)"
"(expand-context-post-expansion-scope-action the-struct_57)"
" scopes39_59"
"(expand-context-def-ctx-scopes the-struct_57)"
"(expand-context-reference-records the-struct_57)"
"(expand-context-only-immediate? the-struct_57)"
"(expand-context-just-once? the-struct_57)"
"(expand-context-module-begin-k the-struct_57)"
"(expand-context-need-eventually-defined the-struct_57)"
"(expand-context-allow-unbound? the-struct_57)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_57)"
"(expand-context-stops the-struct_57)"
"(expand-context-current-introduction-scopes the-struct_57)"
"(expand-context-declared-submodule-names the-struct_57)"
"(expand-context-lifts the-struct_57)"
"(expand-context-lift-envs the-struct_57)"
"(expand-context-module-lifts the-struct_57)"
"(expand-context-require-lifts the-struct_57)"
"(expand-context-to-module-lifts the-struct_57)"
"(expand-context-requires+provides the-struct_57)"
"(expand-context-name the-struct_57)"
"(expand-context-observer the-struct_57)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_57)))))"
"(let-values(((exp-body_18)"
"(let-values(((...nder/expand/expr.rkt:53:19_61) expand-body30.1)"
"((sc-bodys41_62) sc-bodys_16)"
"((body-ctx42_63) body-ctx_17)"
"((s43_64) s_3)"
"((disarmed-s44_65) disarmed-s_4))"
"(if(variable-reference-constant?(#%variable-reference expand-body30.1))"
"(expand-body28.1"
" disarmed-s44_65"
" s43_64"
" #f"
" #f"
" #f"
" #f"
" sc-bodys41_62"
" body-ctx42_63)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:53:19_61"
" keyword-procedure-extract"
" '(#:disarmed-source #:source)"
" 4)"
" '(#:disarmed-source #:source)"
"(list disarmed-s44_65 s43_64)"
" sc-bodys41_62"
" body-ctx42_63)))))"
"(values sc-formals_15 exp-body_18)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_66)"
"(lambda(s_67 ctx_68)"
"(let-values((()"
"(begin"
"(let-values(((obs_88)(expand-context-observer ctx_68)))"
"(if obs_88"
"(let-values()(if #t(let-values()(call-expand-observe obs_88 'prim-lambda))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_69)(syntax-disarm$1 s_67)))"
"(let-values(((ok?_70 lambda45_71 formals46_72 body47_73)"
"(let-values(((s_89) disarmed-s_69))"
"(if(if #t #t #f)"
"(let-values(((orig-s_90) s_89))"
"(let-values(((lambda45_91 formals46_92 body47_93)"
"(let-values(((s_94)(if(syntax?$1 s_89)(syntax-e$1 s_89) s_89)))"
"(if(pair? s_94)"
"(let-values(((lambda48_95)(let-values(((s_98)(car s_94))) s_98))"
"((formals49_96 body50_97)"
"(let-values(((s_99)(cdr s_94)))"
"(let-values(((s_100)"
"(if(syntax?$1 s_99)"
"(syntax-e$1 s_99)"
" s_99)))"
"(if(pair? s_100)"
"(let-values(((formals51_101)"
"(let-values(((s_103)(car s_100)))"
" s_103))"
"((body52_102)"
"(let-values(((s_104)(cdr s_100)))"
"(let-values(((s_105)"
"(if(syntax?$1 s_104)"
"(syntax-e$1 s_104)"
" s_104)))"
"(let-values(((flat-s_106)"
"(to-syntax-list.1"
" s_105)))"
"(if(not flat-s_106)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_90))"
"(if(null? flat-s_106)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_90))"
"(let-values()"
" flat-s_106))))))))"
"(values formals51_101 body52_102))"
"(raise-syntax-error$1"
" #f"
"                                                                     \"bad syntax\""
" orig-s_90))))))"
"(values lambda48_95 formals49_96 body50_97))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_90)))))"
"(values #t lambda45_91 formals46_92 body47_93)))"
"(values #f #f #f #f)))))"
"(let-values(((formals_86 body_87)"
"(lambda-clause-expander s_67 disarmed-s_69 formals46_72 body47_73 ctx_68 'lambda-renames)))"
"(let-values(((s53_107) s_67)"
"((disarmed-s54_108) disarmed-s_69)"
"((temp55_109)(list(get-lambda_66 ctx_68 lambda45_71) formals_86 body_87)))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s53_107 disarmed-s54_108 temp55_109)"
"(rebuild102.1 s53_107 disarmed-s54_108 temp55_109))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_110 lam-id_111) lam-id_111))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_112 lam-id_113)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_112))"
" 'lambda"
" lam-id_113"
" lam-id_113)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_114 ctx_115)"
"(let-values((()"
"(begin"
"(let-values(((obs_146)(expand-context-observer ctx_115)))"
"(if obs_146"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_146 'prim-case-lambda))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_116)(syntax-disarm$1 s_114)))"
"(let-values(((ok?_117 case-lambda56_118 formals57_119 body58_120)"
"(let-values(((s_147) disarmed-s_116))"
"(if(if #t #t #f)"
"(let-values(((orig-s_148) s_147))"
"(let-values(((case-lambda56_149 formals57_150 body58_151)"
"(let-values(((s_152)(if(syntax?$1 s_147)(syntax-e$1 s_147) s_147)))"
"(if(pair? s_152)"
"(let-values(((case-lambda59_153)"
"(let-values(((s_156)(car s_152))) s_156))"
"((formals60_154 body61_155)"
"(let-values(((s_157)(cdr s_152)))"
"(let-values(((s_158)"
"(if(syntax?$1 s_157)"
"(syntax-e$1 s_157)"
" s_157)))"
"(let-values(((flat-s_159)(to-syntax-list.1 s_158)))"
"(if(not flat-s_159)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_148))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_148))"
"(let-values()"
"(let-values(((formals_160 body_161)"
"(let-values(((lst_162)"
" flat-s_159))"
"(begin"
"(if(list? lst_162)"
"(void)"
"(let-values()"
"(in-list lst_162)))"
"((letrec-values(((for-loop_163)"
"(lambda(formals_164"
" body_165"
" lst_166)"
"(if(pair?"
" lst_166)"
"(let-values(((s_167)"
"(unsafe-car"
" lst_166)))"
"(if #t"
"(let-values(((formals_168"
" body_169)"
"(let-values(((formals_170)"
" formals_164)"
"((body_171)"
" body_165))"
"(let-values(((formals_172"
" body_173)"
"(let-values()"
"(let-values(((formals71_174"
" body72_175)"
"(let-values()"
"(let-values(((s_176)"
"(if(syntax?$1"
" s_167)"
"(syntax-e$1"
" s_167)"
" s_167)))"
"(if(pair?"
" s_176)"
"(let-values(((formals62_177)"
"(let-values(((s_179)"
"(car"
" s_176)))"
" s_179))"
"((body63_178)"
"(let-values(((s_180)"
"(cdr"
" s_176)))"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_180)"
"(syntax-e$1"
" s_180)"
" s_180)))"
"(let-values(((flat-s_182)"
"(to-syntax-list.1"
" s_181)))"
"(if(not"
" flat-s_182)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_148))"
"(if(null?"
" flat-s_182)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                      \"bad syntax\""
" orig-s_148))"
"(let-values()"
" flat-s_182))))))))"
"(values"
" formals62_177"
" body63_178))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_148))))))"
"(values"
"(cons"
" formals71_174"
" formals_170)"
"(cons"
" body72_175"
" body_171))))))"
"(values"
" formals_172"
" body_173)))))"
"(if #t"
"(for-loop_163"
" formals_168"
" body_169"
"(unsafe-cdr"
" lst_166))"
"(values"
" formals_168"
" body_169)))"
"(values"
" formals_164"
" body_165)))"
"(values"
" formals_164"
" body_165)))))"
" for-loop_163)"
" null"
" null"
" lst_162)))))"
"(values"
"(alt-reverse formals_160)"
"(alt-reverse body_161)))))))))))"
"(values case-lambda59_153 formals60_154 body61_155))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_148)))))"
"(values #t case-lambda56_149 formals57_150 body58_151)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_133 case-lambda64_134 clause65_135)"
"(let-values(((s_183) disarmed-s_116))"
"(if(if #t #t #f)"
"(let-values(((orig-s_184) s_183))"
"(let-values(((case-lambda64_185 clause65_186)"
"(let-values(((s_187)(if(syntax?$1 s_183)(syntax-e$1 s_183) s_183)))"
"(if(pair? s_187)"
"(let-values(((case-lambda66_188)"
"(let-values(((s_190)(car s_187))) s_190))"
"((clause67_189)"
"(let-values(((s_191)(cdr s_187)))"
"(let-values(((s_192)"
"(if(syntax?$1 s_191)"
"(syntax-e$1 s_191)"
" s_191)))"
"(let-values(((flat-s_193)"
"(to-syntax-list.1 s_192)))"
"(if(not flat-s_193)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_184))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_184))"
"(let-values() flat-s_193))))))))"
"(values case-lambda66_188 clause67_189))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_184)))))"
"(values #t case-lambda64_185 clause65_186)))"
"(values #f #f #f)))))"
"(let-values(((s68_194) s_114)"
"((disarmed-s69_195) disarmed-s_116)"
"((temp70_196)"
"(list*"
" case-lambda56_118"
"(alt-reverse"
"(let-values(((lst_197) formals57_119)((lst_198) body58_120)((lst_199) clause65_135))"
"(begin"
"(if(list? lst_197)(void)(let-values()(in-list lst_197)))"
"(if(list? lst_198)(void)(let-values()(in-list lst_198)))"
"(if(list? lst_199)(void)(let-values()(in-list lst_199)))"
"((letrec-values(((for-loop_200)"
"(lambda(fold-var_201 lst_202 lst_203 lst_204)"
"(if(if(pair? lst_202)"
"(if(pair? lst_203)(pair? lst_204) #f)"
" #f)"
"(let-values(((formals_205)(unsafe-car lst_202))"
"((bodys_206)(unsafe-car lst_203))"
"((clause_207)(unsafe-car lst_204)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_208)"
"(let-values(((fold-var_209) fold-var_201))"
"(let-values(((fold-var_210)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_213)"
"(expand-context-observer"
" ctx_115)))"
"(if obs_213"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_213"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-formals_211"
" exp-body_212)"
"(lambda-clause-expander"
" s_114"
" disarmed-s_116"
" formals_205"
" bodys_206"
" ctx_115"
" 'case-lambda-renames)))"
"(let-values(((clause73_214)"
" clause_207)"
"((clause74_215)"
" clause_207)"
"((temp75_216)"
"(list"
" exp-formals_211"
" exp-body_212)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" clause73_214"
" clause74_215"
" temp75_216)"
"(rebuild102.1"
" clause73_214"
" clause74_215"
" temp75_216))))))"
" fold-var_209))))"
"(values fold-var_210)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_200"
" fold-var_208"
"(unsafe-cdr lst_202)"
"(unsafe-cdr lst_203)"
"(unsafe-cdr lst_204))"
" fold-var_208))"
" fold-var_201))"
" fold-var_201))))"
" for-loop_200)"
" null"
" lst_197"
" lst_198"
" lst_199)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s68_194 disarmed-s69_195 temp70_196)"
"(rebuild102.1 s68_194 disarmed-s69_195 temp70_196))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_217 sc_218 s_219)"
"((letrec-values(((loop_220)"
"(lambda(formals_221)"
"(if(identifier? formals_221)"
"(let-values()(list(add-scope formals_221 sc_218)))"
"(if(syntax?$1 formals_221)"
"(let-values()"
"(let-values(((p_222)(syntax-e$1 formals_221)))"
"(if(pair? p_222)"
"(let-values()(loop_220 p_222))"
"(if(null? p_222)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_219 p_222))))))"
"(if(pair? formals_221)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_221))"
"(void)"
"(let-values()"
"                                      (raise-syntax-error$1 #f \"not an identifier\" s_219 (car formals_221))))"
"(cons(add-scope(car formals_221) sc_218)(loop_220(cdr formals_221)))))"
"(if(null? formals_221)"
"(let-values() null)"
"(let-values()"
"                                  (raise-syntax-error$1 \"bad argument sequence\" s_219 all-formals_217)))))))))"
" loop_220)"
" all-formals_217)))"
"(define-values"
"(lifted/1.1$1)"
"(make-required 'make-let-values-form(case-lambda((self_223)(apply missing-kw self_223 null))) #f #f))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_224"
" rec?3_225"
" rec?8_226"
" renames-log-tag5_227"
" renames-log-tag10_228"
" split-by-reference?4_229"
" split-by-reference?9_230"
" syntaxes?2_231"
" syntaxes?7_232)"
"(let-values(((log-tag_233) log-tag1_224))"
"(let-values(((syntaxes?_234)(if syntaxes?7_232 syntaxes?2_231 #f)))"
"(let-values(((rec?_235)(if rec?8_226 rec?3_225 #f)))"
"(let-values(((split-by-reference?_236)(if split-by-reference?9_230 split-by-reference?4_229 #f)))"
"(let-values(((renames-log-tag_237)(if renames-log-tag10_228 renames-log-tag5_227 'let-renames)))"
"(let-values()"
"(lambda(s_238 ctx_239)"
"(let-values((()"
"(begin"
"(let-values(((obs_303)(expand-context-observer ctx_239)))"
"(if obs_303"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_303 log-tag_233))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_240)(syntax-disarm$1 s_238)))"
"(let-values(((ok?_241"
" letrec-syntaxes+values76_242"
" id:trans77_243"
" trans-rhs78_244"
" id:val79_245"
" val-rhs80_246"
" body81_247)"
"(let-values(((s_304) disarmed-s_240))"
"(if(if syntaxes?_234 #t #f)"
"(let-values(((orig-s_305) s_304))"
"(let-values(((letrec-syntaxes+values76_306"
" id:trans77_307"
" trans-rhs78_308"
" id:val79_309"
" val-rhs80_310"
" body81_311)"
"(let-values(((s_312)"
"(if(syntax?$1 s_304)(syntax-e$1 s_304) s_304)))"
"(if(pair? s_312)"
"(let-values(((letrec-syntaxes+values82_313)"
"(let-values(((s_319)(car s_312))) s_319))"
"((id:trans83_314"
" trans-rhs84_315"
" id:val85_316"
" val-rhs86_317"
" body87_318)"
"(let-values(((s_320)(cdr s_312)))"
"(let-values(((s_321)"
"(if(syntax?$1 s_320)"
"(syntax-e$1 s_320)"
" s_320)))"
"(if(pair? s_321)"
"(let-values(((id:trans88_322"
" trans-rhs89_323)"
"(let-values(((s_327)"
"(car"
" s_321)))"
"(let-values(((s_328)"
"(if(syntax?$1"
" s_327)"
"(syntax-e$1"
" s_327)"
" s_327)))"
"(let-values(((flat-s_329)"
"(to-syntax-list.1"
" s_328)))"
"(if(not flat-s_329)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_305))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_305))"
"(let-values()"
"(let-values(((id:trans_330"
" trans-rhs_331)"
"(let-values(((lst_332)"
" flat-s_329))"
"(begin"
"(if(list?"
" lst_332)"
"(void)"
"(let-values()"
"(in-list"
" lst_332)))"
"((letrec-values(((for-loop_333)"
"(lambda(id:trans_334"
" trans-rhs_335"
" lst_336)"
"(if(pair?"
" lst_336)"
"(let-values(((s_337)"
"(unsafe-car"
" lst_336)))"
"(if #t"
"(let-values(((id:trans_338"
" trans-rhs_339)"
"(let-values(((id:trans_340)"
" id:trans_334)"
"((trans-rhs_341)"
" trans-rhs_335))"
"(let-values(((id:trans_342"
" trans-rhs_343)"
"(let-values()"
"(let-values(((id:trans119_344"
" trans-rhs120_345)"
"(let-values()"
"(let-values(((s_346)"
"(if(syntax?$1"
" s_337)"
"(syntax-e$1"
" s_337)"
" s_337)))"
"(if(pair?"
" s_346)"
"(let-values(((id:trans93_347)"
"(let-values(((s_349)"
"(car"
" s_346)))"
"(let-values(((s_350)"
"(if(syntax?$1"
" s_349)"
"(syntax-e$1"
" s_349)"
" s_349)))"
"(let-values(((flat-s_351)"
"(to-syntax-list.1"
" s_350)))"
"(if(not"
" flat-s_351)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_305))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_305))"
"(let-values()"
"(let-values(((id:trans_352)"
"(let-values(((lst_353)"
" flat-s_351))"
"(begin"
"(if(list?"
" lst_353)"
"(void)"
"(let-values()"
"(in-list"
" lst_353)))"
"((letrec-values(((for-loop_354)"
"(lambda(id:trans_355"
" lst_356)"
"(if(pair?"
" lst_356)"
"(let-values(((s_357)"
"(unsafe-car"
" lst_356)))"
"(if #t"
"(let-values(((id:trans_358)"
"(let-values(((id:trans_359)"
" id:trans_355))"
"(let-values(((id:trans_360)"
"(let-values()"
"(let-values(((id:trans121_361)"
"(let-values()"
"(if(let-values(((or-part_362)"
"(if(syntax?$1"
" s_357)"
"(symbol?"
"(syntax-e$1"
" s_357))"
" #f)))"
"(if or-part_362"
" or-part_362"
"(symbol?"
" s_357)))"
" s_357"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_305"
" s_357)))))"
"(cons"
" id:trans121_361"
" id:trans_359)))))"
"(values"
" id:trans_360)))))"
"(if #t"
"(for-loop_354"
" id:trans_358"
"(unsafe-cdr"
" lst_356))"
" id:trans_358))"
" id:trans_355))"
" id:trans_355))))"
" for-loop_354)"
" null"
" lst_353)))))"
"(alt-reverse"
" id:trans_352)))))))))"
"((trans-rhs94_348)"
"(let-values(((s_363)"
"(cdr"
" s_346)))"
"(let-values(((s_364)"
"(if(syntax?$1"
" s_363)"
"(syntax-e$1"
" s_363)"
" s_363)))"
"(if(pair?"
" s_364)"
"(let-values(((trans-rhs95_365)"
"(let-values(((s_366)"
"(car"
" s_364)))"
" s_366))"
"(()"
"(let-values(((s_367)"
"(cdr"
" s_364)))"
"(let-values(((s_368)"
"(if(syntax?$1"
" s_367)"
"(syntax-e$1"
" s_367)"
" s_367)))"
"(if(null?"
" s_368)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_305))))))"
"(values"
" trans-rhs95_365))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_305))))))"
"(values"
" id:trans93_347"
" trans-rhs94_348))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_305))))))"
"(values"
"(cons"
" id:trans119_344"
" id:trans_340)"
"(cons"
" trans-rhs120_345"
" trans-rhs_341))))))"
"(values"
" id:trans_342"
" trans-rhs_343)))))"
"(if #t"
"(for-loop_333"
" id:trans_338"
" trans-rhs_339"
"(unsafe-cdr"
" lst_336))"
"(values"
" id:trans_338"
" trans-rhs_339)))"
"(values"
" id:trans_334"
" trans-rhs_335)))"
"(values"
" id:trans_334"
" trans-rhs_335)))))"
" for-loop_333)"
" null"
" null"
" lst_332)))))"
"(values"
"(alt-reverse"
" id:trans_330)"
"(alt-reverse"
" trans-rhs_331))))))))))"
"((id:val90_324"
" val-rhs91_325"
" body92_326)"
"(let-values(((s_369)"
"(cdr"
" s_321)))"
"(let-values(((s_370)"
"(if(syntax?$1"
" s_369)"
"(syntax-e$1"
" s_369)"
" s_369)))"
"(if(pair? s_370)"
"(let-values(((id:val96_371"
" val-rhs97_372)"
"(let-values(((s_374)"
"(car"
" s_370)))"
"(let-values(((s_375)"
"(if(syntax?$1"
" s_374)"
"(syntax-e$1"
" s_374)"
" s_374)))"
"(let-values(((flat-s_376)"
"(to-syntax-list.1"
" s_375)))"
"(if(not"
" flat-s_376)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_305))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_305))"
"(let-values()"
"(let-values(((id:val_377"
" val-rhs_378)"
"(let-values(((lst_379)"
" flat-s_376))"
"(begin"
"(if(list?"
" lst_379)"
"(void)"
"(let-values()"
"(in-list"
" lst_379)))"
"((letrec-values(((for-loop_380)"
"(lambda(id:val_381"
" val-rhs_382"
" lst_383)"
"(if(pair?"
" lst_383)"
"(let-values(((s_384)"
"(unsafe-car"
" lst_383)))"
"(if #t"
"(let-values(((id:val_385"
" val-rhs_386)"
"(let-values(((id:val_387)"
" id:val_381)"
"((val-rhs_388)"
" val-rhs_382))"
"(let-values(((id:val_389"
" val-rhs_390)"
"(let-values()"
"(let-values(((id:val122_391"
" val-rhs123_392)"
"(let-values()"
"(let-values(((s_393)"
"(if(syntax?$1"
" s_384)"
"(syntax-e$1"
" s_384)"
" s_384)))"
"(if(pair?"
" s_393)"
"(let-values(((id:val99_394)"
"(let-values(((s_396)"
"(car"
" s_393)))"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_396)"
"(syntax-e$1"
" s_396)"
" s_396)))"
"(let-values(((flat-s_398)"
"(to-syntax-list.1"
" s_397)))"
"(if(not"
" flat-s_398)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_305))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_305))"
"(let-values()"
"(let-values(((id:val_399)"
"(let-values(((lst_400)"
" flat-s_398))"
"(begin"
"(if(list?"
" lst_400)"
"(void)"
"(let-values()"
"(in-list"
" lst_400)))"
"((letrec-values(((for-loop_401)"
"(lambda(id:val_402"
" lst_403)"
"(if(pair?"
" lst_403)"
"(let-values(((s_404)"
"(unsafe-car"
" lst_403)))"
"(if #t"
"(let-values(((id:val_405)"
"(let-values(((id:val_406)"
" id:val_402))"
"(let-values(((id:val_407)"
"(let-values()"
"(let-values(((id:val124_408)"
"(let-values()"
"(if(let-values(((or-part_409)"
"(if(syntax?$1"
" s_404)"
"(symbol?"
"(syntax-e$1"
" s_404))"
" #f)))"
"(if or-part_409"
" or-part_409"
"(symbol?"
" s_404)))"
" s_404"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_305"
" s_404)))))"
"(cons"
" id:val124_408"
" id:val_406)))))"
"(values"
" id:val_407)))))"
"(if #t"
"(for-loop_401"
" id:val_405"
"(unsafe-cdr"
" lst_403))"
" id:val_405))"
" id:val_402))"
" id:val_402))))"
" for-loop_401)"
" null"
" lst_400)))))"
"(alt-reverse"
" id:val_399)))))))))"
"((val-rhs100_395)"
"(let-values(((s_410)"
"(cdr"
" s_393)))"
"(let-values(((s_411)"
"(if(syntax?$1"
" s_410)"
"(syntax-e$1"
" s_410)"
" s_410)))"
"(if(pair?"
" s_411)"
"(let-values(((val-rhs101_412)"
"(let-values(((s_413)"
"(car"
" s_411)))"
" s_413))"
"(()"
"(let-values(((s_414)"
"(cdr"
" s_411)))"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(if(null?"
" s_415)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_305))))))"
"(values"
" val-rhs101_412))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_305))))))"
"(values"
" id:val99_394"
" val-rhs100_395))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_305))))))"
"(values"
"(cons"
" id:val122_391"
" id:val_387)"
"(cons"
" val-rhs123_392"
" val-rhs_388))))))"
"(values"
" id:val_389"
" val-rhs_390)))))"
"(if #t"
"(for-loop_380"
" id:val_385"
" val-rhs_386"
"(unsafe-cdr"
" lst_383))"
"(values"
" id:val_385"
" val-rhs_386)))"
"(values"
" id:val_381"
" val-rhs_382)))"
"(values"
" id:val_381"
" val-rhs_382)))))"
" for-loop_380)"
" null"
" null"
" lst_379)))))"
"(values"
"(alt-reverse"
" id:val_377)"
"(alt-reverse"
" val-rhs_378))))))))))"
"((body98_373)"
"(let-values(((s_416)"
"(cdr"
" s_370)))"
"(let-values(((s_417)"
"(if(syntax?$1"
" s_416)"
"(syntax-e$1"
" s_416)"
" s_416)))"
"(let-values(((flat-s_418)"
"(to-syntax-list.1"
" s_417)))"
"(if(not"
" flat-s_418)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_305))"
"(if(null?"
" flat-s_418)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_305))"
"(let-values()"
" flat-s_418))))))))"
"(values"
" id:val96_371"
" val-rhs97_372"
" body98_373))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_305))))))"
"(values"
" id:trans88_322"
" trans-rhs89_323"
" id:val90_324"
" val-rhs91_325"
" body92_326))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_305))))))"
"(values"
" letrec-syntaxes+values82_313"
" id:trans83_314"
" trans-rhs84_315"
" id:val85_316"
" val-rhs86_317"
" body87_318))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_305)))))"
"(values"
" #t"
" letrec-syntaxes+values76_306"
" id:trans77_307"
" trans-rhs78_308"
" id:val79_309"
" val-rhs80_310"
" body81_311)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_266 let-values102_267 id:val103_268 val-rhs104_269 body105_270)"
"(let-values(((s_419) disarmed-s_240))"
"(if(if(not syntaxes?_234) #t #f)"
"(let-values(((orig-s_420) s_419))"
"(let-values(((let-values102_421 id:val103_422 val-rhs104_423 body105_424)"
"(let-values(((s_425)"
"(if(syntax?$1 s_419)"
"(syntax-e$1 s_419)"
" s_419)))"
"(if(pair? s_425)"
"(let-values(((let-values106_426)"
"(let-values(((s_430)(car s_425))) s_430))"
"((id:val107_427 val-rhs108_428 body109_429)"
"(let-values(((s_431)(cdr s_425)))"
"(let-values(((s_432)"
"(if(syntax?$1 s_431)"
"(syntax-e$1 s_431)"
" s_431)))"
"(if(pair? s_432)"
"(let-values(((id:val110_433"
" val-rhs111_434)"
"(let-values(((s_436)"
"(car"
" s_432)))"
"(let-values(((s_437)"
"(if(syntax?$1"
" s_436)"
"(syntax-e$1"
" s_436)"
" s_436)))"
"(let-values(((flat-s_438)"
"(to-syntax-list.1"
" s_437)))"
"(if(not"
" flat-s_438)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_420))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_420))"
"(let-values()"
"(let-values(((id:val_439"
" val-rhs_440)"
"(let-values(((lst_441)"
" flat-s_438))"
"(begin"
"(if(list?"
" lst_441)"
"(void)"
"(let-values()"
"(in-list"
" lst_441)))"
"((letrec-values(((for-loop_442)"
"(lambda(id:val_443"
" val-rhs_444"
" lst_445)"
"(if(pair?"
" lst_445)"
"(let-values(((s_446)"
"(unsafe-car"
" lst_445)))"
"(if #t"
"(let-values(((id:val_447"
" val-rhs_448)"
"(let-values(((id:val_449)"
" id:val_443)"
"((val-rhs_450)"
" val-rhs_444))"
"(let-values(((id:val_451"
" val-rhs_452)"
"(let-values()"
"(let-values(((id:val125_453"
" val-rhs126_454)"
"(let-values()"
"(let-values(((s_455)"
"(if(syntax?$1"
" s_446)"
"(syntax-e$1"
" s_446)"
" s_446)))"
"(if(pair?"
" s_455)"
"(let-values(((id:val113_456)"
"(let-values(((s_458)"
"(car"
" s_455)))"
"(let-values(((s_459)"
"(if(syntax?$1"
" s_458)"
"(syntax-e$1"
" s_458)"
" s_458)))"
"(let-values(((flat-s_460)"
"(to-syntax-list.1"
" s_459)))"
"(if(not"
" flat-s_460)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_420))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_420))"
"(let-values()"
"(let-values(((id:val_461)"
"(let-values(((lst_462)"
" flat-s_460))"
"(begin"
"(if(list?"
" lst_462)"
"(void)"
"(let-values()"
"(in-list"
" lst_462)))"
"((letrec-values(((for-loop_463)"
"(lambda(id:val_464"
" lst_465)"
"(if(pair?"
" lst_465)"
"(let-values(((s_466)"
"(unsafe-car"
" lst_465)))"
"(if #t"
"(let-values(((id:val_467)"
"(let-values(((id:val_468)"
" id:val_464))"
"(let-values(((id:val_469)"
"(let-values()"
"(let-values(((id:val127_470)"
"(let-values()"
"(if(let-values(((or-part_471)"
"(if(syntax?$1"
" s_466)"
"(symbol?"
"(syntax-e$1"
" s_466))"
" #f)))"
"(if or-part_471"
" or-part_471"
"(symbol?"
" s_466)))"
" s_466"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_420"
" s_466)))))"
"(cons"
" id:val127_470"
" id:val_468)))))"
"(values"
" id:val_469)))))"
"(if #t"
"(for-loop_463"
" id:val_467"
"(unsafe-cdr"
" lst_465))"
" id:val_467))"
" id:val_464))"
" id:val_464))))"
" for-loop_463)"
" null"
" lst_462)))))"
"(alt-reverse"
" id:val_461)))))))))"
"((val-rhs114_457)"
"(let-values(((s_472)"
"(cdr"
" s_455)))"
"(let-values(((s_473)"
"(if(syntax?$1"
" s_472)"
"(syntax-e$1"
" s_472)"
" s_472)))"
"(if(pair?"
" s_473)"
"(let-values(((val-rhs115_474)"
"(let-values(((s_475)"
"(car"
" s_473)))"
" s_475))"
"(()"
"(let-values(((s_476)"
"(cdr"
" s_473)))"
"(let-values(((s_477)"
"(if(syntax?$1"
" s_476)"
"(syntax-e$1"
" s_476)"
" s_476)))"
"(if(null?"
" s_477)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_420))))))"
"(values"
" val-rhs115_474))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_420))))))"
"(values"
" id:val113_456"
" val-rhs114_457))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_420))))))"
"(values"
"(cons"
" id:val125_453"
" id:val_449)"
"(cons"
" val-rhs126_454"
" val-rhs_450))))))"
"(values"
" id:val_451"
" val-rhs_452)))))"
"(if #t"
"(for-loop_442"
" id:val_447"
" val-rhs_448"
"(unsafe-cdr"
" lst_445))"
"(values"
" id:val_447"
" val-rhs_448)))"
"(values"
" id:val_443"
" val-rhs_444)))"
"(values"
" id:val_443"
" val-rhs_444)))))"
" for-loop_442)"
" null"
" null"
" lst_441)))))"
"(values"
"(alt-reverse"
" id:val_439)"
"(alt-reverse"
" val-rhs_440))))))))))"
"((body112_435)"
"(let-values(((s_478)"
"(cdr"
" s_432)))"
"(let-values(((s_479)"
"(if(syntax?$1"
" s_478)"
"(syntax-e$1"
" s_478)"
" s_478)))"
"(let-values(((flat-s_480)"
"(to-syntax-list.1"
" s_479)))"
"(if(not"
" flat-s_480)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_420))"
"(if(null?"
" flat-s_480)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_420))"
"(let-values()"
" flat-s_480))))))))"
"(values"
" id:val110_433"
" val-rhs111_434"
" body112_435))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_420))))))"
"(values"
" let-values106_426"
" id:val107_427"
" val-rhs108_428"
" body109_429))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_420)))))"
"(values #t let-values102_421 id:val103_422 val-rhs104_423 body105_424)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_285)(new-scope 'local)))"
"(let-values(((phase_286)(expand-context-phase ctx_239)))"
"(let-values(((frame-id_287)(if split-by-reference?_236(make-reference-record) #f)))"
"(let-values(((trans-idss_288)"
"(alt-reverse"
"(let-values(((lst_481)(if syntaxes?_234 id:trans77_243 null)))"
"(begin"
"(if(list? lst_481)(void)(let-values()(in-list lst_481)))"
"((letrec-values(((for-loop_482)"
"(lambda(fold-var_483 lst_484)"
"(if(pair? lst_484)"
"(let-values(((ids_485)(unsafe-car lst_484)))"
"(if #t"
"(let-values(((fold-var_486)"
"(let-values(((fold-var_487)"
" fold-var_483))"
"(let-values(((fold-var_488)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_489)"
" ids_485))"
"(begin"
"(if(list?"
" lst_489)"
"(void)"
"(let-values()"
"(in-list"
" lst_489)))"
"((letrec-values(((for-loop_490)"
"(lambda(fold-var_491"
" lst_492)"
"(if(pair?"
" lst_492)"
"(let-values(((id_493)"
"(unsafe-car"
" lst_492)))"
"(if #t"
"(let-values(((fold-var_494)"
"(let-values(((fold-var_495)"
" fold-var_491))"
"(let-values(((fold-var_496)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_493"
" sc_285))"
" fold-var_495))))"
"(values"
" fold-var_496)))))"
"(if #t"
"(for-loop_490"
" fold-var_494"
"(unsafe-cdr"
" lst_492))"
" fold-var_494))"
" fold-var_491))"
" fold-var_491))))"
" for-loop_490)"
" null"
" lst_489)))))"
" fold-var_487))))"
"(values fold-var_488)))))"
"(if #t"
"(for-loop_482"
" fold-var_486"
"(unsafe-cdr lst_484))"
" fold-var_486))"
" fold-var_483))"
" fold-var_483))))"
" for-loop_482)"
" null"
" lst_481))))))"
"(let-values(((val-idss_289)"
"(alt-reverse"
"(let-values(((lst_497)(if syntaxes?_234 id:val79_245 id:val103_268)))"
"(begin"
"(if(list? lst_497)(void)(let-values()(in-list lst_497)))"
"((letrec-values(((for-loop_498)"
"(lambda(fold-var_499 lst_500)"
"(if(pair? lst_500)"
"(let-values(((ids_501)"
"(unsafe-car lst_500)))"
"(if #t"
"(let-values(((fold-var_502)"
"(let-values(((fold-var_503)"
" fold-var_499))"
"(let-values(((fold-var_504)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_505)"
" ids_501))"
"(begin"
"(if(list?"
" lst_505)"
"(void)"
"(let-values()"
"(in-list"
" lst_505)))"
"((letrec-values(((for-loop_506)"
"(lambda(fold-var_507"
" lst_508)"
"(if(pair?"
" lst_508)"
"(let-values(((id_509)"
"(unsafe-car"
" lst_508)))"
"(if #t"
"(let-values(((fold-var_510)"
"(let-values(((fold-var_511)"
" fold-var_507))"
"(let-values(((fold-var_512)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_509"
" sc_285))"
" fold-var_511))))"
"(values"
" fold-var_512)))))"
"(if #t"
"(for-loop_506"
" fold-var_510"
"(unsafe-cdr"
" lst_508))"
" fold-var_510))"
" fold-var_507))"
" fold-var_507))))"
" for-loop_506)"
" null"
" lst_505)))))"
" fold-var_503))))"
"(values"
" fold-var_504)))))"
"(if #t"
"(for-loop_498"
" fold-var_502"
"(unsafe-cdr lst_500))"
" fold-var_502))"
" fold-var_499))"
" fold-var_499))))"
" for-loop_498)"
" null"
" lst_497))))))"
"(let-values((()"
"(begin"
"(let-values(((temp116_513)(list trans-idss_288 val-idss_289))"
"((phase117_514) phase_286)"
"((s118_515) s_238))"
"(if(variable-reference-constant?"
"(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp116_513"
" phase117_514"
" s118_515"
" #f"
" #f)"
"(check-no-duplicate-ids10.1 temp116_513 phase117_514 s118_515)))"
"(values))))"
"(let-values(((counter_290)(root-expand-context-counter ctx_239)))"
"(let-values(((trans-keyss_291)"
"(alt-reverse"
"(let-values(((lst_516) trans-idss_288))"
"(begin"
"(if(list? lst_516)(void)(let-values()(in-list lst_516)))"
"((letrec-values(((for-loop_517)"
"(lambda(fold-var_518 lst_519)"
"(if(pair? lst_519)"
"(let-values(((ids_520)"
"(unsafe-car lst_519)))"
"(if #t"
"(let-values(((fold-var_521)"
"(let-values(((fold-var_522)"
" fold-var_518))"
"(let-values(((fold-var_523)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_524)"
" ids_520))"
"(begin"
"(if(list?"
" lst_524)"
"(void)"
"(let-values()"
"(in-list"
" lst_524)))"
"((letrec-values(((for-loop_525)"
"(lambda(fold-var_526"
" lst_527)"
"(if(pair?"
" lst_527)"
"(let-values(((id_528)"
"(unsafe-car"
" lst_527)))"
"(if #t"
"(let-values(((fold-var_529)"
"(let-values(((fold-var_530)"
" fold-var_526))"
"(let-values(((fold-var_531)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:156:27_532)"
" add-local-binding!35.1)"
"((id128_533)"
" id_528)"
"((phase129_534)"
" phase_286)"
"((counter130_535)"
" counter_290)"
"((s131_536)"
" s_238))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" s131_536"
" #t"
" id128_533"
" phase129_534"
" counter130_535)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:156:27_532"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" s131_536)"
" id128_533"
" phase129_534"
" counter130_535))))"
" fold-var_530))))"
"(values"
" fold-var_531)))))"
"(if #t"
"(for-loop_525"
" fold-var_529"
"(unsafe-cdr"
" lst_527))"
" fold-var_529))"
" fold-var_526))"
" fold-var_526))))"
" for-loop_525)"
" null"
" lst_524)))))"
" fold-var_522))))"
"(values"
" fold-var_523)))))"
"(if #t"
"(for-loop_517"
" fold-var_521"
"(unsafe-cdr lst_519))"
" fold-var_521))"
" fold-var_518))"
" fold-var_518))))"
" for-loop_517)"
" null"
" lst_516))))))"
"(let-values(((val-keyss_292)"
"(alt-reverse"
"(let-values(((lst_537) val-idss_289))"
"(begin"
"(if(list? lst_537)"
"(void)"
"(let-values()(in-list lst_537)))"
"((letrec-values(((for-loop_538)"
"(lambda(fold-var_539 lst_540)"
"(if(pair? lst_540)"
"(let-values(((ids_541)"
"(unsafe-car lst_540)))"
"(if #t"
"(let-values(((fold-var_542)"
"(let-values(((fold-var_543)"
" fold-var_539))"
"(let-values(((fold-var_544)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_545)"
" ids_541))"
"(begin"
"(if(list?"
" lst_545)"
"(void)"
"(let-values()"
"(in-list"
" lst_545)))"
"((letrec-values(((for-loop_546)"
"(lambda(fold-var_547"
" lst_548)"
"(if(pair?"
" lst_548)"
"(let-values(((id_549)"
"(unsafe-car"
" lst_548)))"
"(if #t"
"(let-values(((fold-var_550)"
"(let-values(((fold-var_551)"
" fold-var_547))"
"(let-values(((fold-var_552)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:159:25_553)"
" add-local-binding!35.1)"
"((id132_554)"
" id_549)"
"((phase133_555)"
" phase_286)"
"((counter134_556)"
" counter_290)"
"((frame-id135_557)"
" frame-id_287)"
"((s136_558)"
" s_238))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id135_557"
" #t"
" s136_558"
" #t"
" id132_554"
" phase133_555"
" counter134_556)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:159:25_553"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id135_557"
" s136_558)"
" id132_554"
" phase133_555"
" counter134_556))))"
" fold-var_551))))"
"(values"
" fold-var_552)))))"
"(if #t"
"(for-loop_546"
" fold-var_550"
"(unsafe-cdr"
" lst_548))"
" fold-var_550))"
" fold-var_547))"
" fold-var_547))))"
" for-loop_546)"
" null"
" lst_545)))))"
" fold-var_543))))"
"(values"
" fold-var_544)))))"
"(if #t"
"(for-loop_538"
" fold-var_542"
"(unsafe-cdr lst_540))"
" fold-var_542))"
" fold-var_539))"
" fold-var_539))))"
" for-loop_538)"
" null"
" lst_537))))))"
"(let-values(((bodys_293)"
"(alt-reverse"
"(let-values(((lst_559)"
"(if syntaxes?_234 body81_247 body105_270)))"
"(begin"
"(if(list? lst_559)"
"(void)"
"(let-values()(in-list lst_559)))"
"((letrec-values(((for-loop_560)"
"(lambda(fold-var_561 lst_562)"
"(if(pair? lst_562)"
"(let-values(((body_563)"
"(unsafe-car"
" lst_562)))"
"(if #t"
"(let-values(((fold-var_564)"
"(let-values(((fold-var_565)"
" fold-var_561))"
"(let-values(((fold-var_566)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_563"
" sc_285))"
" fold-var_565))))"
"(values"
" fold-var_566)))))"
"(if #t"
"(for-loop_560"
" fold-var_564"
"(unsafe-cdr lst_562))"
" fold-var_564))"
" fold-var_561))"
" fold-var_561))))"
" for-loop_560)"
" null"
" lst_559))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_567)"
"(expand-context-observer ctx_239)))"
"(if obs_567"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_567"
" renames-log-tag_237"
" val-idss_289"
"(datum->syntax$1 #f bodys_293)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_234"
"(let-values()"
"(begin"
"(let-values(((obs_568)"
"(expand-context-observer ctx_239)))"
"(if obs_568"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_568"
" 'prepare-env))"
"(void)))"
"(void)))"
"(let-values(((obs_569)"
"(expand-context-observer ctx_239)))"
"(if obs_569"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_569"
" 'enter-bind))"
"(void)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_294)"
"(alt-reverse"
"(let-values(((lst_570)"
"(if syntaxes?_234 trans-rhs78_244 '()))"
"((lst_571) trans-idss_288))"
"(begin"
"(if(list? lst_570)"
"(void)"
"(let-values()(in-list lst_570)))"
"(if(list? lst_571)"
"(void)"
"(let-values()(in-list lst_571)))"
"((letrec-values(((for-loop_572)"
"(lambda(fold-var_573"
" lst_574"
" lst_575)"
"(if(if(pair? lst_574)"
"(pair? lst_575)"
" #f)"
"(let-values(((rhs_576)"
"(unsafe-car"
" lst_574))"
"((ids_577)"
"(unsafe-car"
" lst_575)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_578)"
"(let-values(((fold-var_579)"
" fold-var_573))"
"(let-values(((fold-var_580)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_581)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_581"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_581"
" 'next))"
"(void)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_576"
" sc_285)"
" ids_577"
" ctx_239)))"
" fold-var_579))))"
"(values"
" fold-var_580)))))"
"(if(if #t #t #f)"
"(for-loop_572"
" fold-var_578"
"(unsafe-cdr lst_574)"
"(unsafe-cdr"
" lst_575))"
" fold-var_578))"
" fold-var_573))"
" fold-var_573))))"
" for-loop_572)"
" null"
" lst_570"
" lst_571))))))"
"(let-values(((rec-val-env_295)"
"(let-values(((lst_582) val-keyss_292)"
"((lst_583) val-idss_289))"
"(begin"
"(if(list? lst_582)"
"(void)"
"(let-values()(in-list lst_582)))"
"(if(list? lst_583)"
"(void)"
"(let-values()(in-list lst_583)))"
"((letrec-values(((for-loop_584)"
"(lambda(env_585"
" lst_586"
" lst_587)"
"(if(if(pair? lst_586)"
"(pair? lst_587)"
" #f)"
"(let-values(((keys_588)"
"(unsafe-car"
" lst_586))"
"((ids_589)"
"(unsafe-car"
" lst_587)))"
"(if(if #t #t #f)"
"(let-values(((env_590)"
"(let-values(((env_591)"
" env_585))"
"(if #t"
"(let-values(((lst_592)"
" keys_588)"
"((lst_593)"
" ids_589))"
"(begin"
"(if(list?"
" lst_592)"
"(void)"
"(let-values()"
"(in-list"
" lst_592)))"
"(if(list?"
" lst_593)"
"(void)"
"(let-values()"
"(in-list"
" lst_593)))"
"((letrec-values(((for-loop_594)"
"(lambda(env_595"
" lst_596"
" lst_597)"
"(if(if(pair?"
" lst_596)"
"(pair?"
" lst_597)"
" #f)"
"(let-values(((key_598)"
"(unsafe-car"
" lst_596))"
"((id_599)"
"(unsafe-car"
" lst_597)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((env_600)"
"(let-values(((env_601)"
" env_595))"
"(let-values(((env_602)"
"(let-values()"
"(env-extend"
" env_601"
" key_598"
"(local-variable1.1"
" id_599)))))"
"(values"
" env_602)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_594"
" env_600"
"(unsafe-cdr"
" lst_596)"
"(unsafe-cdr"
" lst_597))"
" env_600))"
" env_595))"
" env_595))))"
" for-loop_594)"
" env_591"
" lst_592"
" lst_593)))"
" env_591))))"
"(if(if #t #t #f)"
"(for-loop_584"
" env_590"
"(unsafe-cdr"
" lst_586)"
"(unsafe-cdr"
" lst_587))"
" env_590))"
" env_585))"
" env_585))))"
" for-loop_584)"
"(expand-context-env ctx_239)"
" lst_582"
" lst_583)))))"
"(let-values(((rec-env_296)"
"(let-values(((lst_603) trans-keyss_291)"
"((lst_604) trans-valss_294)"
"((lst_605) trans-idss_288))"
"(begin"
"(if(list? lst_603)"
"(void)"
"(let-values()(in-list lst_603)))"
"(if(list? lst_604)"
"(void)"
"(let-values()(in-list lst_604)))"
"(if(list? lst_605)"
"(void)"
"(let-values()(in-list lst_605)))"
"((letrec-values(((for-loop_606)"
"(lambda(env_607"
" lst_608"
" lst_609"
" lst_610)"
"(if(if(pair? lst_608)"
"(if(pair? lst_609)"
"(pair? lst_610)"
" #f)"
" #f)"
"(let-values(((keys_611)"
"(unsafe-car"
" lst_608))"
"((vals_612)"
"(unsafe-car"
" lst_609))"
"((ids_613)"
"(unsafe-car"
" lst_610)))"
"(if(if #t"
"(if #t #t #f)"
" #f)"
"(let-values(((env_614)"
"(let-values(((env_615)"
" env_607))"
"(let-values(((env_616)"
"(let-values()"
"(let-values(((lst_617)"
" keys_611)"
"((lst_618)"
" vals_612)"
"((lst_619)"
" ids_613))"
"(begin"
"(if(list?"
" lst_617)"
"(void)"
"(let-values()"
"(in-list"
" lst_617)))"
"(if(list?"
" lst_618)"
"(void)"
"(let-values()"
"(in-list"
" lst_618)))"
"(if(list?"
" lst_619)"
"(void)"
"(let-values()"
"(in-list"
" lst_619)))"
"((letrec-values(((for-loop_620)"
"(lambda(env_621"
" lst_622"
" lst_623"
" lst_624)"
"(if(if(pair?"
" lst_622)"
"(if(pair?"
" lst_623)"
"(pair?"
" lst_624)"
" #f)"
" #f)"
"(let-values(((key_625)"
"(unsafe-car"
" lst_622))"
"((val_626)"
"(unsafe-car"
" lst_623))"
"((id_627)"
"(unsafe-car"
" lst_624)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((env_628)"
"(let-values(((env_629)"
" env_621))"
"(let-values(((env_630)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_626"
" id_627"
" phase_286)"
"(env-extend"
" env_629"
" key_625"
" val_626)))))"
"(values"
" env_630)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_620"
" env_628"
"(unsafe-cdr"
" lst_622)"
"(unsafe-cdr"
" lst_623)"
"(unsafe-cdr"
" lst_624))"
" env_628))"
" env_621))"
" env_621))))"
" for-loop_620)"
" env_615"
" lst_617"
" lst_618"
" lst_619))))))"
"(values"
" env_616)))))"
"(if(if #t"
"(if #t #t #f)"
" #f)"
"(for-loop_606"
" env_614"
"(unsafe-cdr"
" lst_608)"
"(unsafe-cdr"
" lst_609)"
"(unsafe-cdr"
" lst_610))"
" env_614))"
" env_607))"
" env_607))))"
" for-loop_606)"
" rec-val-env_295"
" lst_603"
" lst_604"
" lst_605)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_234"
"(let-values()"
"(let-values(((obs_631)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_631"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_631"
" 'exit-bind))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_297)(as-expression-context ctx_239)))"
"(let-values(((orig-rrs_298)"
"(expand-context-reference-records"
" expr-ctx_297)))"
"(let-values(((rec-ctx_299)"
"(let-values(((the-struct_632)"
" expr-ctx_297))"
"(if(expand-context? the-struct_632)"
"(let-values(((env137_633) rec-env_296)"
"((scopes138_634)"
"(cons"
" sc_285"
"(expand-context-scopes"
" ctx_239)))"
"((reference-records139_635)"
"(if split-by-reference?_236"
"(cons"
" frame-id_287"
" orig-rrs_298)"
" orig-rrs_298))"
"((all-scopes-stx140_636)"
"(add-scope"
"(root-expand-context-all-scopes-stx"
" ctx_239)"
" sc_285)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_632)"
"(root-expand-context-post-expansion-scope"
" the-struct_632)"
"(root-expand-context-top-level-bind-scope"
" the-struct_632)"
" all-scopes-stx140_636"
"(root-expand-context-use-site-scopes"
" the-struct_632)"
"(root-expand-context-defined-syms"
" the-struct_632)"
"(root-expand-context-frame-id"
" the-struct_632)"
"(root-expand-context-counter"
" the-struct_632)"
"(root-expand-context-lift-key"
" the-struct_632)"
"(expand-context-context"
" the-struct_632)"
"(expand-context-phase the-struct_632)"
"(expand-context-namespace"
" the-struct_632)"
" env137_633"
"(expand-context-user-env"
" the-struct_632)"
"(expand-context-post-expansion-scope-action"
" the-struct_632)"
" scopes138_634"
"(expand-context-def-ctx-scopes"
" the-struct_632)"
" reference-records139_635"
"(expand-context-only-immediate?"
" the-struct_632)"
"(expand-context-just-once?"
" the-struct_632)"
"(expand-context-module-begin-k"
" the-struct_632)"
"(expand-context-need-eventually-defined"
" the-struct_632)"
"(expand-context-allow-unbound?"
" the-struct_632)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_632)"
"(expand-context-stops the-struct_632)"
"(expand-context-current-introduction-scopes"
" the-struct_632)"
"(expand-context-declared-submodule-names"
" the-struct_632)"
"(expand-context-lifts the-struct_632)"
"(expand-context-lift-envs"
" the-struct_632)"
"(expand-context-module-lifts"
" the-struct_632)"
"(expand-context-require-lifts"
" the-struct_632)"
"(expand-context-to-module-lifts"
" the-struct_632)"
"(expand-context-requires+provides"
" the-struct_632)"
"(expand-context-name the-struct_632)"
"(expand-context-observer"
" the-struct_632)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"expand-context?\""
" the-struct_632)))))"
"(let-values(((letrec-values-id_300)"
"(if syntaxes?_234"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_286)"
" 'letrec-values)"
" let-values102_267)))"
"(let-values(((get-body_301)"
"(lambda(track?_637)"
"(let-values((()"
"(begin"
"(let-values(((obs_640)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_640"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_640"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_638)"
"(let-values(((the-struct_641)"
" rec-ctx_299))"
"(if(expand-context?"
" the-struct_641)"
"(let-values(((reference-records141_642)"
" orig-rrs_298))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_641)"
"(root-expand-context-post-expansion-scope"
" the-struct_641)"
"(root-expand-context-top-level-bind-scope"
" the-struct_641)"
"(root-expand-context-all-scopes-stx"
" the-struct_641)"
"(root-expand-context-use-site-scopes"
" the-struct_641)"
"(root-expand-context-defined-syms"
" the-struct_641)"
"(root-expand-context-frame-id"
" the-struct_641)"
"(root-expand-context-counter"
" the-struct_641)"
"(root-expand-context-lift-key"
" the-struct_641)"
"(expand-context-context"
" the-struct_641)"
"(expand-context-phase"
" the-struct_641)"
"(expand-context-namespace"
" the-struct_641)"
"(expand-context-env"
" the-struct_641)"
"(expand-context-user-env"
" the-struct_641)"
"(expand-context-post-expansion-scope-action"
" the-struct_641)"
"(expand-context-scopes"
" the-struct_641)"
"(expand-context-def-ctx-scopes"
" the-struct_641)"
" reference-records141_642"
"(expand-context-only-immediate?"
" the-struct_641)"
"(expand-context-just-once?"
" the-struct_641)"
"(expand-context-module-begin-k"
" the-struct_641)"
"(expand-context-need-eventually-defined"
" the-struct_641)"
"(expand-context-allow-unbound?"
" the-struct_641)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_641)"
"(expand-context-stops"
" the-struct_641)"
"(expand-context-current-introduction-scopes"
" the-struct_641)"
"(expand-context-declared-submodule-names"
" the-struct_641)"
"(expand-context-lifts"
" the-struct_641)"
"(expand-context-lift-envs"
" the-struct_641)"
"(expand-context-module-lifts"
" the-struct_641)"
"(expand-context-require-lifts"
" the-struct_641)"
"(expand-context-to-module-lifts"
" the-struct_641)"
"(expand-context-requires+provides"
" the-struct_641)"
"(expand-context-name"
" the-struct_641)"
"(expand-context-observer"
" the-struct_641)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"expand-context?\""
" the-struct_641)))))"
"(let-values(((exp-body_639)"
"(let-values(((...nder/expand/expr.rkt:211:22_643)"
" expand-body30.1)"
"((bodys142_644)"
" bodys_293)"
"((temp143_645)"
"(let-values(((...nder/expand/expr.rkt:211:41_648)"
" as-tail-context14.1)"
"((body-ctx146_649)"
" body-ctx_638)"
"((ctx147_650)"
" ctx_239))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx147_650"
" body-ctx146_649)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:211:41_648"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx147_650)"
" body-ctx146_649))))"
"((s144_646)"
" s_238)"
"((disarmed-s145_647)"
" disarmed-s_240))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-body30.1))"
"(expand-body28.1"
" disarmed-s145_647"
" s144_646"
" #f"
" #f"
" #f"
" #f"
" bodys142_644"
" temp143_645)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:211:22_643"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source)"
" 4)"
" '(#:disarmed-source"
" #:source)"
"(list"
" disarmed-s145_647"
" s144_646)"
" bodys142_644"
" temp143_645)))))"
"(if track?_637"
"(let-values(((result-s_651)"
"(syntax-track-origin$1"
" exp-body_639"
" s_238)))"
"(begin"
"(let-values(((obs_652)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_652"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_652"
" 'tag"
" result-s_651))"
"(void)))"
"(void)))"
" result-s_651))"
" exp-body_639)))))))"
"(let-values(((result-s_302)"
"(if(not split-by-reference?_236)"
"(let-values()"
"(let-values(((s148_653) s_238)"
"((disarmed-s149_654)"
" disarmed-s_240)"
"((temp150_655)"
"(list"
" letrec-values-id_300"
"(alt-reverse"
"(let-values(((lst_656)"
" val-idss_289)"
"((lst_657)"
"(if syntaxes?_234"
" val-rhs80_246"
" val-rhs104_269)))"
"(begin"
"(if(list?"
" lst_656)"
"(void)"
"(let-values()"
"(in-list"
" lst_656)))"
"(if(list?"
" lst_657)"
"(void)"
"(let-values()"
"(in-list"
" lst_657)))"
"((letrec-values(((for-loop_658)"
"(lambda(fold-var_659"
" lst_660"
" lst_661)"
"(if(if(pair?"
" lst_660)"
"(pair?"
" lst_661)"
" #f)"
"(let-values(((ids_662)"
"(unsafe-car"
" lst_660))"
"((rhs_663)"
"(unsafe-car"
" lst_661)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_664)"
"(let-values(((fold-var_665)"
" fold-var_659))"
"(let-values(((fold-var_666)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_667)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_667"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_667"
" 'next))"
"(void)))"
"(void)))"
"(list"
" ids_662"
"(if rec?_235"
"(let-values(((temp151_668)"
"(add-scope"
" rhs_663"
" sc_285))"
"((temp152_669)"
"(as-named-context"
" rec-ctx_299"
" ids_662)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp151_668"
" temp152_669)"
"(expand7.1"
" temp151_668"
" temp152_669)))"
"(let-values(((rhs153_670)"
" rhs_663)"
"((temp154_671)"
"(as-named-context"
" expr-ctx_297"
" ids_662)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" rhs153_670"
" temp154_671)"
"(expand7.1"
" rhs153_670"
" temp154_671)))))))"
" fold-var_665))))"
"(values"
" fold-var_666)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_658"
" fold-var_664"
"(unsafe-cdr"
" lst_660)"
"(unsafe-cdr"
" lst_661))"
" fold-var_664))"
" fold-var_659))"
" fold-var_659))))"
" for-loop_658)"
" null"
" lst_656"
" lst_657))))"
"(get-body_301"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" s148_653"
" disarmed-s149_654"
" temp150_655)"
"(rebuild102.1"
" s148_653"
" disarmed-s149_654"
" temp150_655))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_673)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_673"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_673"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_674)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_674"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_674"
" 'letrec-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_672)"
"(alt-reverse"
"(let-values(((lst_675)"
"(if syntaxes?_234"
" val-rhs80_246"
" val-rhs104_269)))"
"(begin"
"(if(list?"
" lst_675)"
"(void)"
"(let-values()"
"(in-list"
" lst_675)))"
"((letrec-values(((for-loop_676)"
"(lambda(fold-var_677"
" lst_678)"
"(if(pair?"
" lst_678)"
"(let-values(((rhs_679)"
"(unsafe-car"
" lst_678)))"
"(if #t"
"(let-values(((fold-var_680)"
"(let-values(((fold-var_681)"
" fold-var_677))"
"(let-values(((fold-var_682)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_679"
" sc_285))"
" fold-var_681))))"
"(values"
" fold-var_682)))))"
"(if #t"
"(for-loop_676"
" fold-var_680"
"(unsafe-cdr"
" lst_678))"
" fold-var_680))"
" fold-var_677))"
" fold-var_677))))"
" for-loop_676)"
" null"
" lst_675))))))"
"(let-values(((...nder/expand/expr.rkt:238:7_683)"
" expand-and-split-bindings-by-reference70.1)"
"((val-idss155_684)"
" val-idss_289)"
"((val-keyss156_685)"
" val-keyss_292)"
"((val-rhss157_686)"
" val-rhss_672)"
"((temp158_687)"
"(alt-reverse"
"(let-values(((lst_695)"
" val-idss_289))"
"(begin"
"(if(list?"
" lst_695)"
"(void)"
"(let-values()"
"(in-list"
" lst_695)))"
"((letrec-values(((for-loop_696)"
"(lambda(fold-var_697"
" lst_698)"
"(if(pair?"
" lst_698)"
"(let-values(((rhs_699)"
"(unsafe-car"
" lst_698)))"
"(if #t"
"(let-values(((fold-var_700)"
"(let-values(((fold-var_701)"
" fold-var_697))"
"(let-values(((fold-var_702)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_701))))"
"(values"
" fold-var_702)))))"
"(if #t"
"(for-loop_696"
" fold-var_700"
"(unsafe-cdr"
" lst_698))"
" fold-var_700))"
" fold-var_697))"
" fold-var_697))))"
" for-loop_696)"
" null"
" lst_695)))))"
"((temp159_688)"
" #t)"
"((frame-id160_689)"
" frame-id_287)"
"((rec-ctx161_690)"
" rec-ctx_299)"
"((s162_691)"
" s_238)"
"((disarmed-s163_692)"
" disarmed-s_240)"
"((get-body164_693)"
" get-body_301)"
"((temp165_694)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-and-split-bindings-by-reference70.1))"
"(expand-and-split-bindings-by-reference68.1"
" rec-ctx161_690"
" disarmed-s163_692"
" frame-id160_689"
" get-body164_693"
" s162_691"
" temp159_688"
" temp165_694"
" val-idss155_684"
" val-keyss156_685"
" val-rhss157_686"
" temp158_687)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:238:7_683"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" rec-ctx161_690"
" disarmed-s163_692"
" frame-id160_689"
" get-body164_693"
" s162_691"
" temp159_688"
" temp165_694)"
" val-idss155_684"
" val-keyss156_685"
" val-rhss157_686"
" temp158_687))))))))))"
"(attach-disappeared-transformer-bindings"
" result-s_302"
" trans-idss_288))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack12.1)"
"(lambda(given-kws_703 given-args_704)"
"(let-values(((log-tag1_705)(car given-args_704))"
"((given-kws_706)(cdr given-kws_703))"
"((given-args_707)(cdr given-args_704)))"
"(let-values(((rec?8_708)(if(pair? given-kws_706)(eq? '#:rec?(car given-kws_706)) #f)))"
"(let-values(((rec?3_709)(if rec?8_708(car given-args_707)(void)))"
"((given-kws_710)(if rec?8_708(cdr given-kws_706) given-kws_706))"
"((given-args_711)(if rec?8_708(cdr given-args_707) given-args_707)))"
"(let-values(((renames-log-tag10_712)"
"(if(pair? given-kws_710)(eq? '#:renames-log-tag(car given-kws_710)) #f)))"
"(let-values(((renames-log-tag5_713)(if renames-log-tag10_712(car given-args_711)(void)))"
"((given-kws_714)(if renames-log-tag10_712(cdr given-kws_710) given-kws_710))"
"((given-args_715)(if renames-log-tag10_712(cdr given-args_711) given-args_711)))"
"(let-values(((split-by-reference?9_716)"
"(if(pair? given-kws_714)(eq? '#:split-by-reference?(car given-kws_714)) #f)))"
"(let-values(((split-by-reference?4_717)(if split-by-reference?9_716(car given-args_715)(void)))"
"((given-kws_718)(if split-by-reference?9_716(cdr given-kws_714) given-kws_714))"
"((given-args_719)(if split-by-reference?9_716(cdr given-args_715) given-args_715)))"
"(let-values(((syntaxes?7_720)(pair? given-kws_718)))"
"(let-values(((syntaxes?2_721)(if syntaxes?7_720(car given-args_719)(void))))"
"(make-let-values-form11.1"
" log-tag1_705"
" rec?3_709"
" rec?8_708"
" renames-log-tag5_713"
" renames-log-tag10_712"
" split-by-reference?4_717"
" split-by-reference?9_716"
" syntaxes?2_721"
" syntaxes?7_720))))))))))))"
"(define-values"
"(make-let-values-form13.1)"
"(lifted/1.1$1"
"(lambda(given-kws_722 given-argc_723)"
"(if(= given-argc_723 2)"
"(subsets? '(#:log-tag) given-kws_722 '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?))"
" #f))"
"(case-lambda((given-kws_724 given-args_725)(unpack12.1 given-kws_724 given-args_725)))"
" '(#:log-tag)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((...nder/expand/expr.rkt:250:1_726) make-let-values-form13.1)((temp166_727) 'prim-let-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp166_727 #f #f #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:250:1_726"
" keyword-procedure-extract"
" '(#:log-tag)"
" 2)"
" '(#:log-tag)"
"(list temp166_727))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((...nder/expand/expr.rkt:254:1_728) make-let-values-form13.1)"
"((temp167_729) #t)"
"((temp168_730) 'prim-letrec-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp168_730 temp167_729 #t #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:254:1_728"
" keyword-procedure-extract"
" '(#:log-tag #:rec?)"
" 2)"
" '(#:log-tag #:rec?)"
"(list temp168_730 temp167_729))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((...nder/expand/expr.rkt:258:1_731) make-let-values-form13.1)"
"((temp169_732) #t)"
"((temp170_733) #t)"
"((temp171_734) #t)"
"((temp172_735) 'prim-letrec-syntaxes+values)"
"((temp173_736) 'letrec-syntaxes-renames))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp172_735 temp170_733 #t temp173_736 #t temp171_734 #t temp169_732 #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:258:1_731"
" keyword-procedure-extract"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
" 2)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
"(list temp172_735 temp170_733 temp173_736 temp171_734 temp169_732))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_737 ctx_738)"
"(let-values((()"
"(begin"
"(let-values(((obs_753)(expand-context-observer ctx_738)))"
"(if obs_753"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_753 'prim-#%stratified))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_739)(syntax-disarm$1 s_737)))"
"(let-values(((ok?_740 #%stratified-body174_741 body175_742)"
"(let-values(((s_754) disarmed-s_739))"
"(if(if #t #t #f)"
"(let-values(((orig-s_755) s_754))"
"(let-values(((#%stratified-body174_756 body175_757)"
"(let-values(((s_758)(if(syntax?$1 s_754)(syntax-e$1 s_754) s_754)))"
"(if(pair? s_758)"
"(let-values(((#%stratified-body176_759)"
"(let-values(((s_761)(car s_758))) s_761))"
"((body177_760)"
"(let-values(((s_762)(cdr s_758)))"
"(let-values(((s_763)"
"(if(syntax?$1 s_762)"
"(syntax-e$1 s_762)"
" s_762)))"
"(let-values(((flat-s_764)(to-syntax-list.1 s_763)))"
"(if(not flat-s_764)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_755))"
"(if(null? flat-s_764)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_755))"
"(let-values() flat-s_764))))))))"
"(values #%stratified-body176_759 body177_760))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_755)))))"
"(values #t #%stratified-body174_756 body175_757)))"
"(values #f #f #f)))))"
"(let-values(((...nder/expand/expr.rkt:270:3_765) expand-body30.1)"
"((temp178_766) body175_742)"
"((ctx179_767) ctx_738)"
"((temp180_768) #t)"
"((temp181_769) #t)"
"((s182_770) s_737)"
"((disarmed-s183_771) disarmed-s_739))"
"(if(variable-reference-constant?(#%variable-reference expand-body30.1))"
"(expand-body28.1 disarmed-s183_771 s182_770 temp180_768 #t temp181_769 #t temp178_766 ctx179_767)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:270:3_765"
" keyword-procedure-extract"
" '(#:disarmed-source #:source #:stratified? #:track?)"
" 4)"
" '(#:disarmed-source #:source #:stratified? #:track?)"
"(list disarmed-s183_771 s182_770 temp180_768 temp181_769)"
" temp178_766"
" ctx179_767)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_772 ctx_773)"
"(let-values((()"
"(begin"
"(let-values(((obs_790)(expand-context-observer ctx_773)))"
"(if obs_790"
"(let-values()(if #t(let-values()(call-expand-observe obs_790 'prim-#%datum))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_774)(syntax-disarm$1 s_772)))"
"(let-values(((ok?_775 #%datum184_776 datum185_777)"
"(let-values(((s_791) disarmed-s_774))"
"(if(if #t #t #f)"
"(let-values(((orig-s_792) s_791))"
"(let-values(((#%datum184_793 datum185_794)"
"(let-values(((s_795)(if(syntax?$1 s_791)(syntax-e$1 s_791) s_791)))"
"(if(pair? s_795)"
"(let-values(((#%datum186_796)"
"(let-values(((s_798)(car s_795))) s_798))"
"((datum187_797)"
"(let-values(((s_799)(cdr s_795))) s_799)))"
"(values #%datum186_796 datum187_797))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_792)))))"
"(values #t #%datum184_793 datum185_794)))"
"(values #f #f #f)))))"
"(let-values(((datum_788) datum185_777))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_788)(keyword?(syntax-e$1 datum_788)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_788))"
"(void))"
"(values))))"
"(let-values(((phase_789)(expand-context-phase ctx_773)))"
"(let-values(((s188_800) s_772)"
"((disarmed-s189_801) disarmed-s_774)"
"((temp190_802)"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_789) 'quote)"
" datum_788)))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s188_800 disarmed-s189_801 temp190_802)"
"(rebuild102.1 s188_800 disarmed-s189_801 temp190_802))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_803 ctx_804)"
"(let-values((()"
"(begin"
"(let-values(((obs_820)(expand-context-observer ctx_804)))"
"(if obs_820"
"(let-values()(if #t(let-values()(call-expand-observe obs_820 'prim-#%app))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_805)(syntax-disarm$1 s_803)))"
"(let-values(((ok?_806 #%app191_807 e192_808)"
"(let-values(((s_821) disarmed-s_805))"
"(if(if #t #t #f)"
"(let-values(((orig-s_822) s_821))"
"(let-values(((#%app191_823 e192_824)"
"(let-values(((s_825)(if(syntax?$1 s_821)(syntax-e$1 s_821) s_821)))"
"(if(pair? s_825)"
"(let-values(((#%app193_826)"
"(let-values(((s_828)(car s_825))) s_828))"
"((e194_827)"
"(let-values(((s_829)(cdr s_825)))"
"(let-values(((s_830)"
"(if(syntax?$1 s_829)"
"(syntax-e$1 s_829)"
" s_829)))"
"(let-values(((flat-s_831)(to-syntax-list.1 s_830)))"
"(if(not flat-s_831)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_822))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_822))"
"(let-values() flat-s_831))))))))"
"(values #%app193_826 e194_827))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_822)))))"
"(values #t #%app191_823 e192_824)))"
"(values #f #f #f)))))"
"(let-values(((es_819) e192_808))"
"(if(null? es_819)"
"(let-values()"
"(let-values(((phase_832)(expand-context-phase ctx_804)))"
"(let-values(((s195_833) s_803)"
"((disarmed-s196_834) disarmed-s_805)"
"((temp197_835)"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_832) 'quote)"
" null)))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s195_833 disarmed-s196_834 temp197_835)"
"(rebuild102.1 s195_833 disarmed-s196_834 temp197_835)))))"
"(let-values()"
"(let-values(((expr-ctx_836)(as-expression-context ctx_804)))"
"(let-values(((exp-es_837)"
"(alt-reverse"
"(let-values(((lst_839) es_819))"
"(begin"
"(if(list? lst_839)(void)(let-values()(in-list lst_839)))"
"((letrec-values(((for-loop_840)"
"(lambda(fold-var_841 lst_842)"
"(if(pair? lst_842)"
"(let-values(((e_843)(unsafe-car lst_842)))"
"(if #t"
"(let-values(((fold-var_844)"
"(let-values(((fold-var_845)"
" fold-var_841))"
"(let-values(((fold-var_846)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((e201_847)"
" e_843)"
"((expr-ctx202_848)"
" expr-ctx_836))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e201_847"
" expr-ctx202_848)"
"(expand7.1"
" e201_847"
" expr-ctx202_848))))"
" fold-var_845))))"
"(values fold-var_846)))))"
"(if #t"
"(for-loop_840 fold-var_844(unsafe-cdr lst_842))"
" fold-var_844))"
" fold-var_841))"
" fold-var_841))))"
" for-loop_840)"
" null"
" lst_839))))))"
"(let-values(((prefixless_838)(cdr(syntax-e$1 disarmed-s_805))))"
"(let-values(((s198_849) s_803)"
"((disarmed-s199_850) disarmed-s_805)"
"((temp200_851)"
"(cons"
" #%app191_807"
"(if(syntax?$1 prefixless_838)"
"(let-values(((prefixless203_852) prefixless_838)"
"((prefixless204_853) prefixless_838)"
"((exp-es205_854) exp-es_837))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f prefixless203_852 prefixless204_853 exp-es205_854)"
"(rebuild102.1 prefixless203_852 prefixless204_853 exp-es205_854)))"
" exp-es_837))))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s198_849 disarmed-s199_850 temp200_851)"
"(rebuild102.1 s198_849 disarmed-s199_850 temp200_851)))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_855 ctx_856)"
"(let-values((()"
"(begin"
"(let-values(((obs_870)(expand-context-observer ctx_856)))"
"(if obs_870"
"(let-values()(if #t(let-values()(call-expand-observe obs_870 'prim-quote))(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_857 quote206_858 datum207_859)"
"(let-values(((s_871)(syntax-disarm$1 s_855)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_872) s_871))"
"(let-values(((quote206_873 datum207_874)"
"(let-values(((s_875)(if(syntax?$1 s_871)(syntax-e$1 s_871) s_871)))"
"(if(pair? s_875)"
"(let-values(((quote208_876)(let-values(((s_878)(car s_875))) s_878))"
"((datum209_877)"
"(let-values(((s_879)(cdr s_875)))"
"(let-values(((s_880)"
"(if(syntax?$1 s_879)"
"(syntax-e$1 s_879)"
" s_879)))"
"(if(pair? s_880)"
"(let-values(((datum210_881)"
"(let-values(((s_882)(car s_880)))"
" s_882))"
"(()"
"(let-values(((s_883)(cdr s_880)))"
"(let-values(((s_884)"
"(if(syntax?$1 s_883)"
"(syntax-e$1 s_883)"
" s_883)))"
"(if(null? s_884)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_872))))))"
"(values datum210_881))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_872))))))"
"(values quote208_876 datum209_877))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_872)))))"
"(values #t quote206_873 datum207_874)))"
"(values #f #f #f)))))"
" s_855)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_885 ctx_886)"
"(let-values((()"
"(begin"
"(let-values(((obs_914)(expand-context-observer ctx_886)))"
"(if obs_914"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_914 'prim-quote-syntax))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_887)(syntax-disarm$1 s_885)))"
"(let-values(((ok?_888 quote-syntax211_889 datum212_890)"
"(let-values(((s_915) disarmed-s_887))"
"(if(if #t"
"(let-values(((s_916)(if(syntax?$1 s_915)(syntax-e$1 s_915) s_915)))"
"(if(pair? s_916)"
"(if(let-values(((s_917)(car s_916))) #t)"
"(let-values(((s_918)(cdr s_916)))"
"(let-values(((s_919)(if(syntax?$1 s_918)(syntax-e$1 s_918) s_918)))"
"(if(pair? s_919)"
"(if(let-values(((s_920)(car s_919))) #t)"
"(let-values(((s_921)(cdr s_919)))"
"(let-values(((s_922)(if(syntax?$1 s_921)(syntax-e$1 s_921) s_921)))"
"(if(pair? s_922)"
"(if(let-values(((s_923)(car s_922)))"
"(let-values(((s_924)"
"(if(syntax?$1 s_923)"
"(syntax-e$1 s_923)"
" s_923)))"
"(eq? '#:local s_924)))"
"(let-values(((s_925)(cdr s_922)))"
"(let-values(((s_926)"
"(if(syntax?$1 s_925)(syntax-e$1 s_925) s_925)))"
"(null? s_926)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_927) s_915))"
"(let-values(((quote-syntax211_928 datum212_929)"
"(let-values(((s_930)(if(syntax?$1 s_915)(syntax-e$1 s_915) s_915)))"
"(if #t"
"(let-values(((quote-syntax213_931)"
"(let-values(((s_933)(car s_930))) s_933))"
"((datum214_932)"
"(let-values(((s_934)(cdr s_930)))"
"(let-values(((s_935)"
"(if(syntax?$1 s_934)"
"(syntax-e$1 s_934)"
" s_934)))"
"(if #t"
"(let-values(((datum215_936)"
"(let-values(((s_937)(car s_935)))"
" s_937))"
"(()"
"(let-values(((s_938)(cdr s_935)))"
"(let-values(((s_939)"
"(if(syntax?$1 s_938)"
"(syntax-e$1 s_938)"
" s_938)))"
"(if #t"
"(let-values((()"
"(let-values(((s_940)"
"(car"
" s_939)))"
"(let-values(((s_941)"
"(if(syntax?$1"
" s_940)"
"(syntax-e$1"
" s_940)"
" s_940)))"
"(values))))"
"(()"
"(let-values(((s_942)"
"(cdr"
" s_939)))"
"(let-values(((s_943)"
"(if(syntax?$1"
" s_942)"
"(syntax-e$1"
" s_942)"
" s_942)))"
"(values)))))"
"(values))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_927))))))"
"(values datum215_936))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_927))))))"
"(values quote-syntax213_931 datum214_932))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_927)))))"
"(values #t quote-syntax211_928 datum212_929)))"
"(values #f #f #f)))))"
"(let-values(((ok?_901 quote-syntax216_902 datum217_903)"
"(let-values(((s_944) disarmed-s_887))"
"(if(if(not ok?_888) #t #f)"
"(let-values(((orig-s_945) s_944))"
"(let-values(((quote-syntax216_946 datum217_947)"
"(let-values(((s_948)(if(syntax?$1 s_944)(syntax-e$1 s_944) s_944)))"
"(if(pair? s_948)"
"(let-values(((quote-syntax218_949)"
"(let-values(((s_951)(car s_948))) s_951))"
"((datum219_950)"
"(let-values(((s_952)(cdr s_948)))"
"(let-values(((s_953)"
"(if(syntax?$1 s_952)"
"(syntax-e$1 s_952)"
" s_952)))"
"(if(pair? s_953)"
"(let-values(((datum220_954)"
"(let-values(((s_955)(car s_953)))"
" s_955))"
"(()"
"(let-values(((s_956)(cdr s_953)))"
"(let-values(((s_957)"
"(if(syntax?$1"
" s_956)"
"(syntax-e$1"
" s_956)"
" s_956)))"
"(if(null? s_957)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_945))))))"
"(values datum220_954))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_945))))))"
"(values quote-syntax218_949 datum219_950))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_945)))))"
"(values #t quote-syntax216_946 datum217_947)))"
"(values #f #f #f)))))"
"(if ok?_888"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_886))"
"(values))))"
"(let-values(((ok?_958 _221_959 _222_960 kw223_961)"
"(let-values(((s_974) disarmed-s_887))"
"(if(if #t #t #f)"
"(let-values(((orig-s_975) s_974))"
"(let-values(((_221_976 _222_977 kw223_978)"
"(let-values(((s_979)"
"(if(syntax?$1 s_974)(syntax-e$1 s_974) s_974)))"
"(if(pair? s_979)"
"(let-values(((_224_980)"
"(let-values(((s_983)(car s_979))) s_983))"
"((_225_981 kw226_982)"
"(let-values(((s_984)(cdr s_979)))"
"(let-values(((s_985)"
"(if(syntax?$1 s_984)"
"(syntax-e$1 s_984)"
" s_984)))"
"(if(pair? s_985)"
"(let-values(((_227_986)"
"(let-values(((s_988)"
"(car s_985)))"
" s_988))"
"((kw228_987)"
"(let-values(((s_989)"
"(cdr s_985)))"
"(let-values(((s_990)"
"(if(syntax?$1"
" s_989)"
"(syntax-e$1"
" s_989)"
" s_989)))"
"(if(pair? s_990)"
"(let-values(((kw229_991)"
"(let-values(((s_992)"
"(car"
" s_990)))"
" s_992))"
"(()"
"(let-values(((s_993)"
"(cdr"
" s_990)))"
"(let-values(((s_994)"
"(if(syntax?$1"
" s_993)"
"(syntax-e$1"
" s_993)"
" s_993)))"
"(if(null?"
" s_994)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_975))))))"
"(values kw229_991))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_975))))))"
"(values _227_986 kw228_987))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_975))))))"
"(values _224_980 _225_981 kw226_982))"
"                                                           (raise-syntax-error$1 #f \"bad syntax\" orig-s_975)))))"
"(values #t _221_976 _222_977 kw223_978)))"
"(values #f #f #f #f)))))"
"(let-values(((s230_995) s_885)"
"((disarmed-s231_996) disarmed-s_887)"
"((temp232_997)(list quote-syntax211_889 datum212_890 kw223_961)))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s230_995 disarmed-s231_996 temp232_997)"
"(rebuild102.1 s230_995 disarmed-s231_996 temp232_997))))))"
"(let-values()"
"(let-values(((s233_998) s_885)"
"((disarmed-s234_999) disarmed-s_887)"
"((temp235_1000)"
"(list"
" quote-syntax216_902"
"(remove-scopes datum217_903(expand-context-scopes ctx_886)))))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s233_998 disarmed-s234_999 temp235_1000)"
"(rebuild102.1 s233_998 disarmed-s234_999 temp235_1000))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_1001 ctx_1002)"
"(let-values((()"
"(begin"
"(let-values(((obs_1025)(expand-context-observer ctx_1002)))"
"(if obs_1025"
"(let-values()(if #t(let-values()(call-expand-observe obs_1025 'prim-if))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1003)(syntax-disarm$1 s_1001)))"
"(let-values(((ok?_1004 if236_1005 tst237_1006 thn238_1007 els239_1008)"
"(let-values(((s_1026) disarmed-s_1003))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1027) s_1026))"
"(let-values(((if236_1028 tst237_1029 thn238_1030 els239_1031)"
"(let-values(((s_1032)(if(syntax?$1 s_1026)(syntax-e$1 s_1026) s_1026)))"
"(if(pair? s_1032)"
"(let-values(((if240_1033)"
"(let-values(((s_1037)(car s_1032))) s_1037))"
"((tst241_1034 thn242_1035 els243_1036)"
"(let-values(((s_1038)(cdr s_1032)))"
"(let-values(((s_1039)"
"(if(syntax?$1 s_1038)"
"(syntax-e$1 s_1038)"
" s_1038)))"
"(if(pair? s_1039)"
"(let-values(((tst244_1040)"
"(let-values(((s_1043)(car s_1039)))"
" s_1043))"
"((thn245_1041 els246_1042)"
"(let-values(((s_1044)(cdr s_1039)))"
"(let-values(((s_1045)"
"(if(syntax?$1"
" s_1044)"
"(syntax-e$1 s_1044)"
" s_1044)))"
"(if(pair? s_1045)"
"(let-values(((thn247_1046)"
"(let-values(((s_1048)"
"(car"
" s_1045)))"
" s_1048))"
"((els248_1047)"
"(let-values(((s_1049)"
"(cdr"
" s_1045)))"
"(let-values(((s_1050)"
"(if(syntax?$1"
" s_1049)"
"(syntax-e$1"
" s_1049)"
" s_1049)))"
"(if(pair?"
" s_1050)"
"(let-values(((els249_1051)"
"(let-values(((s_1052)"
"(car"
" s_1050)))"
" s_1052))"
"(()"
"(let-values(((s_1053)"
"(cdr"
" s_1050)))"
"(let-values(((s_1054)"
"(if(syntax?$1"
" s_1053)"
"(syntax-e$1"
" s_1053)"
" s_1053)))"
"(if(null?"
" s_1054)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_1027))))))"
"(values"
" els249_1051))"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1027))))))"
"(values"
" thn247_1046"
" els248_1047))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1027))))))"
"(values tst244_1040 thn245_1041 els246_1042))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1027))))))"
"(values if240_1033 tst241_1034 thn242_1035 els243_1036))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1027)))))"
"(values #t if236_1028 tst237_1029 thn238_1030 els239_1031)))"
"(values #f #f #f #f #f)))))"
"(let-values(((expr-ctx_1023)(as-expression-context ctx_1002)))"
"(let-values(((tail-ctx_1024)"
"(let-values(((...nder/expand/expr.rkt:355:20_1055) as-tail-context14.1)"
"((expr-ctx253_1056) expr-ctx_1023)"
"((ctx254_1057) ctx_1002))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx254_1057 expr-ctx253_1056)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:355:20_1055"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx254_1057)"
" expr-ctx253_1056)))))"
"(begin"
"(let-values(((obs_1058)(expand-context-observer ctx_1002)))"
"(if obs_1058"
"(let-values()(if #t(let-values()(call-expand-observe obs_1058 'next-group))(void)))"
"(void)))"
"(let-values(((s250_1059) s_1001)"
"((disarmed-s251_1060) disarmed-s_1003)"
"((temp252_1061)"
"(list"
" if236_1005"
"(let-values(((temp255_1062) tst237_1006)((expr-ctx256_1063) expr-ctx_1023))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp255_1062 expr-ctx256_1063)"
"(expand7.1 temp255_1062 expr-ctx256_1063)))"
"(begin"
"(let-values(((obs_1064)(expand-context-observer ctx_1002)))"
"(if obs_1064"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1064 'next))(void)))"
"(void)))"
"(let-values(((temp257_1065) thn238_1007)((tail-ctx258_1066) tail-ctx_1024))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp257_1065 tail-ctx258_1066)"
"(expand7.1 temp257_1065 tail-ctx258_1066))))"
"(begin"
"(let-values(((obs_1067)(expand-context-observer ctx_1002)))"
"(if obs_1067"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1067 'next))(void)))"
"(void)))"
"(let-values(((temp259_1068) els239_1008)((tail-ctx260_1069) tail-ctx_1024))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp259_1068 tail-ctx260_1069)"
"(expand7.1 temp259_1068 tail-ctx260_1069)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s250_1059 disarmed-s251_1060 temp252_1061)"
"(rebuild102.1 s250_1059 disarmed-s251_1060 temp252_1061))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_1070 ctx_1071)"
"(let-values((()"
"(begin"
"(let-values(((obs_1093)(expand-context-observer ctx_1071)))"
"(if obs_1093"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1093 'prim-with-continuation-mark))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1072)(syntax-disarm$1 s_1070)))"
"(let-values(((ok?_1073 with-continuation-mark261_1074 key262_1075 val263_1076 body264_1077)"
"(let-values(((s_1094) disarmed-s_1072))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1095) s_1094))"
"(let-values(((with-continuation-mark261_1096 key262_1097 val263_1098 body264_1099)"
"(let-values(((s_1100)(if(syntax?$1 s_1094)(syntax-e$1 s_1094) s_1094)))"
"(if(pair? s_1100)"
"(let-values(((with-continuation-mark265_1101)"
"(let-values(((s_1105)(car s_1100))) s_1105))"
"((key266_1102 val267_1103 body268_1104)"
"(let-values(((s_1106)(cdr s_1100)))"
"(let-values(((s_1107)"
"(if(syntax?$1 s_1106)"
"(syntax-e$1 s_1106)"
" s_1106)))"
"(if(pair? s_1107)"
"(let-values(((key269_1108)"
"(let-values(((s_1111)(car s_1107)))"
" s_1111))"
"((val270_1109 body271_1110)"
"(let-values(((s_1112)(cdr s_1107)))"
"(let-values(((s_1113)"
"(if(syntax?$1"
" s_1112)"
"(syntax-e$1 s_1112)"
" s_1112)))"
"(if(pair? s_1113)"
"(let-values(((val272_1114)"
"(let-values(((s_1116)"
"(car"
" s_1113)))"
" s_1116))"
"((body273_1115)"
"(let-values(((s_1117)"
"(cdr"
" s_1113)))"
"(let-values(((s_1118)"
"(if(syntax?$1"
" s_1117)"
"(syntax-e$1"
" s_1117)"
" s_1117)))"
"(if(pair?"
" s_1118)"
"(let-values(((body274_1119)"
"(let-values(((s_1120)"
"(car"
" s_1118)))"
" s_1120))"
"(()"
"(let-values(((s_1121)"
"(cdr"
" s_1118)))"
"(let-values(((s_1122)"
"(if(syntax?$1"
" s_1121)"
"(syntax-e$1"
" s_1121)"
" s_1121)))"
"(if(null?"
" s_1122)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_1095))))))"
"(values"
" body274_1119))"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1095))))))"
"(values"
" val272_1114"
" body273_1115))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1095))))))"
"(values key269_1108 val270_1109 body271_1110))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1095))))))"
"(values"
" with-continuation-mark265_1101"
" key266_1102"
" val267_1103"
" body268_1104))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1095)))))"
"(values #t with-continuation-mark261_1096 key262_1097 val263_1098 body264_1099)))"
"(values #f #f #f #f #f)))))"
"(let-values(((expr-ctx_1092)(as-expression-context ctx_1071)))"
"(let-values(((s275_1123) s_1070)"
"((disarmed-s276_1124) disarmed-s_1072)"
"((temp277_1125)"
"(list"
" with-continuation-mark261_1074"
"(let-values(((temp278_1126) key262_1075)((expr-ctx279_1127) expr-ctx_1092))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp278_1126 expr-ctx279_1127)"
"(expand7.1 temp278_1126 expr-ctx279_1127)))"
"(begin"
"(let-values(((obs_1128)(expand-context-observer ctx_1071)))"
"(if obs_1128"
"(let-values()(if #t(let-values()(call-expand-observe obs_1128 'next))(void)))"
"(void)))"
"(let-values(((temp280_1129) val263_1076)((expr-ctx281_1130) expr-ctx_1092))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp280_1129 expr-ctx281_1130)"
"(expand7.1 temp280_1129 expr-ctx281_1130))))"
"(begin"
"(let-values(((obs_1131)(expand-context-observer ctx_1071)))"
"(if obs_1131"
"(let-values()(if #t(let-values()(call-expand-observe obs_1131 'next))(void)))"
"(void)))"
"(let-values(((temp282_1132) body264_1077)"
"((temp283_1133)"
"(let-values(((...nder/expand/expr.rkt:384:30_1134) as-tail-context14.1)"
"((expr-ctx284_1135) expr-ctx_1092)"
"((ctx285_1136) ctx_1071))"
"(if(variable-reference-constant?"
"(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx285_1136 expr-ctx284_1135)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:384:30_1134"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx285_1136)"
" expr-ctx284_1135)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp282_1132 temp283_1133)"
"(expand7.1 temp282_1132 temp283_1133)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s275_1123 disarmed-s276_1124 temp277_1125)"
"(rebuild102.1 s275_1123 disarmed-s276_1124 temp277_1125))))))))))"
" print-values)"
"(define-values"
"(lifted/2.1$1)"
"(make-required"
" 'make-begin"
"(case-lambda((self_1137 log-tag_1138)(apply missing-kw self_1137 log-tag_1138 null)))"
" #f"
" #f))"
"(define-values"
"(make-begin17.1)"
"(lambda(list-start-index14_1139 log-tag16_1140)"
"(let-values(((log-tag_1141) log-tag16_1140))"
"(let-values(((list-start-index_1142) list-start-index14_1139))"
"(let-values()"
"(lambda(s_1143 ctx_1144)"
"(let-values((()"
"(begin"
"(let-values(((obs_1163)(expand-context-observer ctx_1144)))"
"(if obs_1163"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1163 log-tag_1141))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1145)(syntax-disarm$1 s_1143)))"
"(let-values(((ok?_1146 begin286_1147 e287_1148)"
"(let-values(((s_1164) disarmed-s_1145))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1165) s_1164))"
"(let-values(((begin286_1166 e287_1167)"
"(let-values(((s_1168)"
"(if(syntax?$1 s_1164)(syntax-e$1 s_1164) s_1164)))"
"(if(pair? s_1168)"
"(let-values(((begin288_1169)"
"(let-values(((s_1171)(car s_1168))) s_1171))"
"((e289_1170)"
"(let-values(((s_1172)(cdr s_1168)))"
"(let-values(((s_1173)"
"(if(syntax?$1 s_1172)"
"(syntax-e$1 s_1172)"
" s_1172)))"
"(let-values(((flat-s_1174)"
"(to-syntax-list.1 s_1173)))"
"(if(not flat-s_1174)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                               \"bad syntax\""
" orig-s_1165))"
"(if(null? flat-s_1174)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_1165))"
"(let-values() flat-s_1174))))))))"
"(values begin288_1169 e289_1170))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_1165)))))"
"(values #t begin286_1166 e287_1167)))"
"(values #f #f #f)))))"
"(let-values(((expr-ctx_1159)(as-expression-context ctx_1144)))"
"(let-values(((es_1160) e287_1148))"
"(let-values(((last-i_1161)(sub1(length es_1160))))"
"(let-values(((exp-es_1162)"
"(alt-reverse"
"(let-values(((lst_1175) es_1160)((start_1176) 0))"
"(begin"
"(if(list? lst_1175)(void)(let-values()(in-list lst_1175)))"
"(if(exact-nonnegative-integer? start_1176)"
"(void)"
"(let-values()(in-naturals start_1176)))"
"((letrec-values(((for-loop_1177)"
"(lambda(fold-var_1178 lst_1179 pos_1180)"
"(if(if(pair? lst_1179) #t #f)"
"(let-values(((e_1181)(unsafe-car lst_1179))"
"((i_1182) pos_1180))"
"(if(if #t #t #f)"
"(let-values(((fold-var_1183)"
"(let-values(((fold-var_1184)"
" fold-var_1178))"
"(let-values(((fold-var_1185)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(if(="
" i_1182"
" list-start-index_1142)"
"(let-values()"
"(let-values(((obs_1186)"
"(expand-context-observer"
" ctx_1144)))"
"(if obs_1186"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1186"
" 'enter-list"
"(list-tail"
" es_1160"
" i_1182)))"
"(void)))"
"(void))))"
"(void))"
"(let-values(((obs_1187)"
"(expand-context-observer"
" ctx_1144)))"
"(if obs_1187"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1187"
" 'next))"
"(void)))"
"(void)))"
"(let-values(((e293_1188)"
" e_1181)"
"((temp294_1189)"
"(if(="
" i_1182"
" last-i_1161)"
"(let-values(((...nder/expand/expr.rkt:401:21_1190)"
" as-tail-context14.1)"
"((expr-ctx295_1191)"
" expr-ctx_1159)"
"((ctx296_1192)"
" ctx_1144))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx296_1192"
" expr-ctx295_1191)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:401:21_1190"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx296_1192)"
" expr-ctx295_1191)))"
" expr-ctx_1159)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e293_1188"
" temp294_1189)"
"(expand7.1"
" e293_1188"
" temp294_1189)))))"
" fold-var_1184))))"
"(values fold-var_1185)))))"
"(if(if #t #t #f)"
"(for-loop_1177"
" fold-var_1183"
"(unsafe-cdr lst_1179)"
"(+ pos_1180 1))"
" fold-var_1183))"
" fold-var_1178))"
" fold-var_1178))))"
" for-loop_1177)"
" null"
" lst_1175"
" start_1176))))))"
"(begin"
"(if(if(= 1 list-start-index_1142)(null?(cdr es_1160)) #f)"
"(let-values()"
"(let-values(((obs_1193)(expand-context-observer ctx_1144)))"
"(if obs_1193"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1193 'enter-list(cdr es_1160)))"
"(void)))"
"(void))))"
"(void))"
"(let-values(((obs_1194)(expand-context-observer ctx_1144)))"
"(if obs_1194"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1194"
" 'exit-list"
"(list-tail exp-es_1162 list-start-index_1142)))"
"(void)))"
"(void)))"
"(let-values(((s290_1195) s_1143)"
"((disarmed-s291_1196) disarmed-s_1145)"
"((temp292_1197)(cons begin286_1147 exp-es_1162)))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s290_1195 disarmed-s291_1196 temp292_1197)"
"(rebuild102.1 s290_1195 disarmed-s291_1196 temp292_1197)))))))))))))))))"
"(define-values"
"(unpack18.1)"
"(lambda(given-kws_1198 given-args_1199 log-tag16_1200)"
"(let-values(((list-start-index14_1201)(car given-args_1199)))"
"(make-begin17.1 list-start-index14_1201 log-tag16_1200))))"
"(define-values"
"(make-begin19.1)"
"(lifted/2.1$1"
"(lambda(given-kws_1202 given-argc_1203)"
"(if(= given-argc_1203 3)"
"(let-values(((l2_1204) given-kws_1202))"
"(if(pair? l2_1204)(if(eq?(car l2_1204) '#:list-start-index)(null?(cdr l2_1204)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1205 given-args_1206 log-tag_1207)(unpack18.1 given-kws_1205 given-args_1206 log-tag_1207)))"
" '(#:list-start-index)"
" '(#:list-start-index)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((...nder/expand/expr.rkt:413:1_1208) make-begin19.1)"
"((temp297_1209) 'prim-begin0)"
"((temp298_1210) 0))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp298_1210 temp297_1209)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:413:1_1208"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp298_1210)"
" temp297_1209)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((...nder/expand/expr.rkt:417:1_1211) make-begin19.1)"
"((temp299_1212) 'prim-begin0)"
"((temp300_1213) 1))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp300_1213 temp299_1212)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:417:1_1211"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp300_1213)"
" temp299_1212)))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_1214 ctx_1215)"
"(if(if(expand-context-need-eventually-defined ctx_1215)(>=(expand-context-phase ctx_1215) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_1215)"
"(expand-context-phase ctx_1215)"
"(lambda(l_1216)(cons id_1214 l_1216))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core305_1217)"
"(lambda(s303_1218 ctx304_1219 implicit-omitted?301_1220 implicit-omitted?302_1221)"
"(let-values(((s_1222) s303_1218))"
"(let-values(((ctx_1223) ctx304_1219))"
"(let-values(((implicit-omitted?_1224)"
"(if implicit-omitted?302_1221 implicit-omitted?301_1220 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1228)(expand-context-observer ctx_1223)))"
"(if obs_1228"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1228 'prim-#%top))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1225)(syntax-disarm$1 s_1222)))"
"(let-values(((id_1226)"
"(if implicit-omitted?_1224"
"(let-values() s_1222)"
"(let-values()"
"(let-values(((ok?_1229 #%top307_1230 id308_1231)"
"(let-values(((s_1242) disarmed-s_1225))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1243) s_1242))"
"(let-values(((#%top307_1244 id308_1245)"
"(let-values(((s_1246)"
"(if(syntax?$1"
" s_1242)"
"(syntax-e$1 s_1242)"
" s_1242)))"
"(if(pair? s_1246)"
"(let-values(((#%top309_1247)"
"(let-values(((s_1249)"
"(car"
" s_1246)))"
" s_1249))"
"((id310_1248)"
"(let-values(((s_1250)"
"(cdr"
" s_1246)))"
"(if(let-values(((or-part_1251)"
"(if(syntax?$1"
" s_1250)"
"(symbol?"
"(syntax-e$1"
" s_1250))"
" #f)))"
"(if or-part_1251"
" or-part_1251"
"(symbol?"
" s_1250)))"
" s_1250"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"not an identifier\""
" orig-s_1243"
" s_1250)))))"
"(values"
" #%top309_1247"
" id310_1248))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1243)))))"
"(values #t #%top307_1244 id308_1245)))"
"(values #f #f #f)))))"
" id308_1231)))))"
"(let-values(((b_1227)"
"(let-values(((...nder/expand/expr.rkt:445:13_1252) resolve+shift15.1)"
"((id311_1253) id_1226)"
"((temp312_1254)(expand-context-phase ctx_1223))"
"((temp313_1255) 'ambiguous))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp313_1255"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id311_1253"
" temp312_1254)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:445:13_1252"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp313_1255)"
" id311_1253"
" temp312_1254)))))"
"(if(eq? b_1227 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1226 ctx_1223))"
"(if(if b_1227"
"(if(module-binding? b_1227)"
"(eq?"
"(module-binding-module b_1227)"
"(namespace-mpi(expand-context-namespace ctx_1223)))"
" #f)"
" #f)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_1227))"
"(let-values() s_1222)"
"(let-values() id_1226)))"
"(if(register-eventual-variable!? id_1226 ctx_1223)"
"(let-values() id_1226)"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1223))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1226"
" #f"
" null"
"(syntax-debug-info-string id_1226 ctx_1223)))"
"(let-values()"
"(let-values(((tl-id_1256)"
"(add-scope"
" id_1226"
"(root-expand-context-top-level-bind-scope ctx_1223))))"
"(if(let-values(((tl-id314_1257) tl-id_1256)"
"((temp315_1258)(expand-context-phase ctx_1223)))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve21.1))"
"(resolve19.1 #f #f #f #f #f #f tl-id314_1257 temp315_1258)"
"(resolve21.1 tl-id314_1257 temp315_1258)))"
"(let-values()"
"(let-values(((ok?_1259 #%top316_1260 id317_1261)"
"(let-values(((s_1272) disarmed-s_1225))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1273) s_1272))"
"(let-values(((#%top316_1274 id317_1275)"
"(let-values(((s_1276)"
"(if(syntax?$1"
" s_1272)"
"(syntax-e$1"
" s_1272)"
" s_1272)))"
"(if(pair? s_1276)"
"(let-values(((#%top318_1277)"
"(let-values(((s_1279)"
"(car"
" s_1276)))"
" s_1279))"
"((id319_1278)"
"(let-values(((s_1280)"
"(cdr"
" s_1276)))"
"(if(let-values(((or-part_1281)"
"(if(syntax?$1"
" s_1280)"
"(symbol?"
"(syntax-e$1"
" s_1280))"
" #f)))"
"(if or-part_1281"
" or-part_1281"
"(symbol?"
" s_1280)))"
" s_1280"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"not an identifier\""
" orig-s_1273"
" s_1280)))))"
"(values"
" #%top318_1277"
" id319_1278))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_1273)))))"
"(values #t #%top316_1274 id317_1275)))"
"(values #f #f #f)))))"
"(let-values(((s320_1282) s_1222)"
"((disarmed-s321_1283) disarmed-s_1225)"
"((temp322_1284)(cons #%top316_1260 tl-id_1256)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" s320_1282"
" disarmed-s321_1283"
" temp322_1284)"
"(rebuild102.1"
" s320_1282"
" disarmed-s321_1283"
" temp322_1284)))))"
"(let-values() s_1222))))))))))))))))))))"
"(case-lambda"
"((s_1285 ctx_1286)(core305_1217 s_1285 ctx_1286 #f #f))"
"((s_1287 ctx_1288 implicit-omitted?301_1289)(core305_1217 s_1287 ctx_1288 implicit-omitted?301_1289 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_1290 ctx_1291)"
"(let-values((()"
"(begin"
"(let-values(((obs_1310)(expand-context-observer ctx_1291)))"
"(if obs_1310"
"(let-values()(if #t(let-values()(call-expand-observe obs_1310 'prim-set!))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1292)(syntax-disarm$1 s_1290)))"
"(let-values(((ok?_1293 set!323_1294 id324_1295 rhs325_1296)"
"(let-values(((s_1311) disarmed-s_1292))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1312) s_1311))"
"(let-values(((set!323_1313 id324_1314 rhs325_1315)"
"(let-values(((s_1316)(if(syntax?$1 s_1311)(syntax-e$1 s_1311) s_1311)))"
"(if(pair? s_1316)"
"(let-values(((set!326_1317)"
"(let-values(((s_1320)(car s_1316))) s_1320))"
"((id327_1318 rhs328_1319)"
"(let-values(((s_1321)(cdr s_1316)))"
"(let-values(((s_1322)"
"(if(syntax?$1 s_1321)"
"(syntax-e$1 s_1321)"
" s_1321)))"
"(if(pair? s_1322)"
"(let-values(((id329_1323)"
"(let-values(((s_1325)(car s_1322)))"
"(if(let-values(((or-part_1326)"
"(if(syntax?$1"
" s_1325)"
"(symbol?"
"(syntax-e$1"
" s_1325))"
" #f)))"
"(if or-part_1326"
" or-part_1326"
"(symbol? s_1325)))"
" s_1325"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"not an identifier\""
" orig-s_1312"
" s_1325))))"
"((rhs330_1324)"
"(let-values(((s_1327)(cdr s_1322)))"
"(let-values(((s_1328)"
"(if(syntax?$1"
" s_1327)"
"(syntax-e$1 s_1327)"
" s_1327)))"
"(if(pair? s_1328)"
"(let-values(((rhs331_1329)"
"(let-values(((s_1330)"
"(car"
" s_1328)))"
" s_1330))"
"(()"
"(let-values(((s_1331)"
"(cdr"
" s_1328)))"
"(let-values(((s_1332)"
"(if(syntax?$1"
" s_1331)"
"(syntax-e$1"
" s_1331)"
" s_1331)))"
"(if(null?"
" s_1332)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1312))))))"
"(values rhs331_1329))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1312))))))"
"(values id329_1323 rhs330_1324))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1312))))))"
"(values set!326_1317 id327_1318 rhs328_1319))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1312)))))"
"(values #t set!323_1313 id324_1314 rhs325_1315)))"
"(values #f #f #f #f)))))"
"(let-values(((id_1309) id324_1295))"
"((letrec-values(((rename-loop_1333)"
"(lambda(id_1334 from-rename?_1335)"
"(let-values(((binding_1336)"
"(let-values(((...nder/expand/expr.rkt:487:21_1339) resolve+shift15.1)"
"((id332_1340) id_1334)"
"((temp333_1341)(expand-context-phase ctx_1291))"
"((temp334_1342) 'ambiguous)"
"((temp335_1343) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp334_1342"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp335_1343"
" #t"
" #f"
" #f"
" id332_1340"
" temp333_1341)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:487:21_1339"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp334_1342 temp335_1343)"
" id332_1340"
" temp333_1341)))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1336 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1334 ctx_1291))"
"(void))"
"(values))))"
"(let-values(((t_1337 insp_1338)"
"(if binding_1336"
"(let-values(((binding336_1344) binding_1336)"
"((ctx337_1345) ctx_1291)"
"((s338_1346) s_1290))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" #f"
" #f"
" binding336_1344"
" ctx337_1345"
" s338_1346)"
"(lookup17.1 binding336_1344 ctx337_1345 s338_1346)))"
"(values #f #f))))"
"(begin"
"(let-values(((obs_1347)(expand-context-observer ctx_1291)))"
"(if obs_1347"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1347 'resolve id_1334))"
"(void)))"
"(void)))"
"(if(let-values(((or-part_1348)(variable? t_1337)))"
"(if or-part_1348"
" or-part_1348"
"(if(not binding_1336)"
"(let-values(((or-part_1349)"
"(register-eventual-variable!? id_1334 ctx_1291)))"
"(if or-part_1349"
" or-part_1349"
"(expand-context-allow-unbound? ctx_1291)))"
" #f)))"
"(let-values()"
"(begin"
"(if(if(module-binding? binding_1336)"
"(not"
"(eq?"
"(module-binding-module binding_1336)"
"(namespace-mpi(expand-context-namespace ctx_1291))))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate imported identifier\""
" s_1290"
" id_1334))"
"(void))"
"(let-values(((obs_1350)(expand-context-observer ctx_1291)))"
"(if obs_1350"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1350 'next))"
"(void)))"
"(void)))"
"(register-variable-referenced-if-local! binding_1336)"
"(let-values(((s339_1351) s_1290)"
"((disarmed-s340_1352) disarmed-s_1292)"
"((temp341_1353)"
"(list"
" set!323_1294"
"(let-values(((...nder/expand/expr.rkt:510:14_1354)"
" substitute-variable8.1)"
"((id342_1355) id_1334)"
"((t343_1356) t_1337)"
"((temp344_1357)"
"(free-id-set-empty?"
"(expand-context-stops ctx_1291))))"
"(if(variable-reference-constant?"
"(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1"
" temp344_1357"
" id342_1355"
" t343_1356)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:510:14_1354"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp344_1357)"
" id342_1355"
" t343_1356)))"
"(let-values(((temp345_1358) rhs325_1296)"
"((temp346_1359)"
"(as-expression-context ctx_1291)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp345_1358 temp346_1359)"
"(expand7.1 temp345_1358 temp346_1359))))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s339_1351 disarmed-s340_1352 temp341_1353)"
"(rebuild102.1 s339_1351 disarmed-s340_1352 temp341_1353)))))"
"(if(not binding_1336)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_1290"
" id_1334"
" null"
"(syntax-debug-info-string id_1334 ctx_1291)))"
"(if(1/set!-transformer? t_1337)"
"(let-values()"
"(if(not-in-this-expand-context? t_1337 ctx_1291)"
"(let-values()"
"(let-values(((temp347_1360)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1290"
" disarmed-s_1292"
" set!323_1294"
" rhs325_1296"
" id_1334"
" from-rename?_1335)"
" t_1337"
" ctx_1291))"
"((ctx348_1361) ctx_1291))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp347_1360 ctx348_1361)"
"(expand7.1 temp347_1360 ctx348_1361))))"
"(let-values()"
"(let-values(((exp-s_1362 re-ctx_1363)"
"(apply-transformer"
" t_1337"
" insp_1338"
" s_1290"
" id_1334"
" ctx_1291"
" binding_1336)))"
"(if(expand-context-just-once? ctx_1291)"
"(let-values() exp-s_1362)"
"(let-values()"
"(let-values(((exp-s349_1364) exp-s_1362)"
"((re-ctx350_1365) re-ctx_1363))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f exp-s349_1364 re-ctx350_1365)"
"(expand7.1 exp-s349_1364 re-ctx350_1365)))))))))"
"(if(1/rename-transformer? t_1337)"
"(let-values()"
"(if(not-in-this-expand-context? t_1337 ctx_1291)"
"(let-values()"
"(let-values(((temp351_1366)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1290"
" disarmed-s_1292"
" set!323_1294"
" rhs325_1296"
" id_1334"
" from-rename?_1335"
" t_1337)"
" t_1337"
" ctx_1291))"
"((ctx352_1367) ctx_1291))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp351_1366 ctx352_1367)"
"(expand7.1 temp351_1366 ctx352_1367))))"
"(let-values()"
"(rename-loop_1333(1/rename-transformer-target t_1337) #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_1290"
" id_1334)))))))))))))"
" rename-loop_1333)"
" id_1309"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename28_1368)"
"(lambda(s22_1369"
" disarmed-s23_1370"
" set!-id24_1371"
" id25_1372"
" rhs-s26_1373"
" from-rename?27_1374"
" t20_1375"
" t21_1376)"
"(let-values(((s_1377) s22_1369))"
"(let-values(((disarmed-s_1378) disarmed-s23_1370))"
"(let-values(((set!-id_1379) set!-id24_1371))"
"(let-values(((id_1380) id25_1372))"
"(let-values(((rhs-s_1381) rhs-s26_1373))"
"(let-values(((from-rename?_1382) from-rename?27_1374))"
"(let-values(((t_1383)(if t21_1376 t20_1375 #f)))"
"(let-values()"
"(if(let-values(((or-part_1384) t_1383))"
"(if or-part_1384 or-part_1384 from-rename?_1382))"
"(let-values()"
"(let-values(((new-id_1385)"
"(if t_1383(1/rename-transformer-target t_1383) id_1380)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_1378"
"(list set!-id_1379 new-id_1385 rhs-s_1381)"
" disarmed-s_1378"
" disarmed-s_1378)"
" s_1377)))"
"(let-values() s_1377)))))))))))))"
"(case-lambda"
"((s_1386 disarmed-s_1387 set!-id_1388 id_1389 rhs-s_1390 from-rename?_1391)"
"(substitute-set!-rename28_1368 s_1386 disarmed-s_1387 set!-id_1388 id_1389 rhs-s_1390 from-rename?_1391 #f #f))"
"((s_1392 disarmed-s_1393 set!-id_1394 id_1395 rhs-s_1396 from-rename?_1397 t20_1398)"
"(substitute-set!-rename28_1368"
" s_1392"
" disarmed-s_1393"
" set!-id_1394"
" id_1395"
" rhs-s_1396"
" from-rename?_1397"
" t20_1398"
" #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_1399 ctx_1400)"
"(let-values((()"
"(begin"
"(let-values(((obs_1441)(expand-context-observer ctx_1400)))"
"(if obs_1441"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1441 'prim-#%variable-reference))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1401)(syntax-disarm$1 s_1399)))"
"(let-values(((ok?_1402 #%variable-reference353_1403 id354_1404)"
"(let-values(((s_1442) disarmed-s_1401))"
"(if(if #t"
"(let-values(((s_1443)(if(syntax?$1 s_1442)(syntax-e$1 s_1442) s_1442)))"
"(if(pair? s_1443)"
"(if(let-values(((s_1444)(car s_1443))) #t)"
"(let-values(((s_1445)(cdr s_1443)))"
"(let-values(((s_1446)(if(syntax?$1 s_1445)(syntax-e$1 s_1445) s_1445)))"
"(if(pair? s_1446)"
"(if(let-values(((s_1447)(car s_1446)))"
"(if(syntax?$1 s_1447)(symbol?(syntax-e$1 s_1447)) #f))"
"(let-values(((s_1448)(cdr s_1446)))"
"(let-values(((s_1449)"
"(if(syntax?$1 s_1448)(syntax-e$1 s_1448) s_1448)))"
"(null? s_1449)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1450) s_1442))"
"(let-values(((#%variable-reference353_1451 id354_1452)"
"(let-values(((s_1453)(if(syntax?$1 s_1442)(syntax-e$1 s_1442) s_1442)))"
"(if #t"
"(let-values(((#%variable-reference355_1454)"
"(let-values(((s_1456)(car s_1453))) s_1456))"
"((id356_1455)"
"(let-values(((s_1457)(cdr s_1453)))"
"(let-values(((s_1458)"
"(if(syntax?$1 s_1457)"
"(syntax-e$1 s_1457)"
" s_1457)))"
"(if #t"
"(let-values(((id357_1459)"
"(let-values(((s_1460)(car s_1458)))"
" s_1460))"
"(()"
"(let-values(((s_1461)(cdr s_1458)))"
"(let-values(((s_1462)"
"(if(syntax?$1"
" s_1461)"
"(syntax-e$1 s_1461)"
" s_1461)))"
"(values)))))"
"(values id357_1459))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1450))))))"
"(values #%variable-reference355_1454 id356_1455))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1450)))))"
"(values #t #%variable-reference353_1451 id354_1452)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1415 #%variable-reference358_1416 #%top359_1417 id360_1418)"
"(let-values(((s_1463) disarmed-s_1401))"
"(if(if(not ok?_1402)"
"(let-values(((s_1464)(if(syntax?$1 s_1463)(syntax-e$1 s_1463) s_1463)))"
"(if(pair? s_1464)"
"(if(let-values(((s_1465)(car s_1464))) #t)"
"(let-values(((s_1466)(cdr s_1464)))"
"(let-values(((s_1467)(if(syntax?$1 s_1466)(syntax-e$1 s_1466) s_1466)))"
"(if(pair? s_1467)"
"(if(let-values(((s_1468)(car s_1467)))"
"(let-values(((s_1469)"
"(if(syntax?$1 s_1468)(syntax-e$1 s_1468) s_1468)))"
"(if(pair? s_1469)"
"(if(let-values(((s_1470)(car s_1469))) #t)"
"(let-values(((s_1471)(cdr s_1469)))"
"(if(syntax?$1 s_1471)(symbol?(syntax-e$1 s_1471)) #f))"
" #f)"
" #f)))"
"(let-values(((s_1472)(cdr s_1467)))"
"(let-values(((s_1473)"
"(if(syntax?$1 s_1472)(syntax-e$1 s_1472) s_1472)))"
"(null? s_1473)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1474) s_1463))"
"(let-values(((#%variable-reference358_1475 #%top359_1476 id360_1477)"
"(let-values(((s_1478)"
"(if(syntax?$1 s_1463)(syntax-e$1 s_1463) s_1463)))"
"(if #t"
"(let-values(((#%variable-reference361_1479)"
"(let-values(((s_1482)(car s_1478))) s_1482))"
"((#%top362_1480 id363_1481)"
"(let-values(((s_1483)(cdr s_1478)))"
"(let-values(((s_1484)"
"(if(syntax?$1 s_1483)"
"(syntax-e$1 s_1483)"
" s_1483)))"
"(if #t"
"(let-values(((#%top364_1485 id365_1486)"
"(let-values(((s_1487)"
"(car s_1484)))"
"(let-values(((s_1488)"
"(if(syntax?$1"
" s_1487)"
"(syntax-e$1"
" s_1487)"
" s_1487)))"
"(if #t"
"(let-values(((#%top366_1489)"
"(let-values(((s_1491)"
"(car"
" s_1488)))"
" s_1491))"
"((id367_1490)"
"(let-values(((s_1492)"
"(cdr"
" s_1488)))"
" s_1492)))"
"(values"
" #%top366_1489"
" id367_1490))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1474)))))"
"(()"
"(let-values(((s_1493)"
"(cdr s_1484)))"
"(let-values(((s_1494)"
"(if(syntax?$1"
" s_1493)"
"(syntax-e$1"
" s_1493)"
" s_1493)))"
"(values)))))"
"(values #%top364_1485 id365_1486))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1474))))))"
"(values #%variable-reference361_1479 #%top362_1480 id363_1481))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_1474)))))"
"(values #t #%variable-reference358_1475 #%top359_1476 id360_1477)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1431 #%variable-reference368_1432)"
"(let-values(((s_1495) disarmed-s_1401))"
"(if(if(not"
"(let-values(((or-part_1496) ok?_1402))"
"(if or-part_1496 or-part_1496 ok?_1415)))"
" #t"
" #f)"
"(let-values(((orig-s_1497) s_1495))"
"(let-values(((#%variable-reference368_1498)"
"(let-values(((s_1499)"
"(if(syntax?$1 s_1495)(syntax-e$1 s_1495) s_1495)))"
"(if(pair? s_1499)"
"(let-values(((#%variable-reference369_1500)"
"(let-values(((s_1501)(car s_1499))) s_1501))"
"(()"
"(let-values(((s_1502)(cdr s_1499)))"
"(let-values(((s_1503)"
"(if(syntax?$1 s_1502)"
"(syntax-e$1 s_1502)"
" s_1502)))"
"(if(null? s_1503)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1497))))))"
"(values #%variable-reference369_1500))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1497)))))"
"(values #t #%variable-reference368_1498)))"
"(values #f #f)))))"
"(begin"
"(if(let-values(((or-part_1504) ok?_1402))(if or-part_1504 or-part_1504 ok?_1415))"
"(let-values()"
"(let-values(((var-id_1505)(if ok?_1402 id354_1404 id360_1418)))"
"(let-values(((binding_1506)"
"(let-values(((...nder/expand/expr.rkt:555:21_1507) resolve+shift15.1)"
"((var-id370_1508) var-id_1505)"
"((temp371_1509)(expand-context-phase ctx_1400))"
"((temp372_1510) 'ambiguous))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp372_1510"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" var-id370_1508"
" temp371_1509)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:555:21_1507"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp372_1510)"
" var-id370_1508"
" temp371_1509)))))"
"(begin"
"(if(eq? binding_1506 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1505 ctx_1400))"
"(void))"
"(if binding_1506"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                  \"unbound identifier\""
" s_1399"
" var-id_1505"
" null"
"(syntax-debug-info-string var-id_1505 ctx_1400))))))))"
"(void))"
" s_1399)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_1511 ctx_1512)"
"(let-values((()"
"(begin"
"(let-values(((obs_1528)(expand-context-observer ctx_1512)))"
"(if obs_1528"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1528 'prim-#%expression))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1513)(syntax-disarm$1 s_1511)))"
"(let-values(((ok?_1514 #%expression373_1515 e374_1516)"
"(let-values(((s_1529) disarmed-s_1513))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1530) s_1529))"
"(let-values(((#%expression373_1531 e374_1532)"
"(let-values(((s_1533)(if(syntax?$1 s_1529)(syntax-e$1 s_1529) s_1529)))"
"(if(pair? s_1533)"
"(let-values(((#%expression375_1534)"
"(let-values(((s_1536)(car s_1533))) s_1536))"
"((e376_1535)"
"(let-values(((s_1537)(cdr s_1533)))"
"(let-values(((s_1538)"
"(if(syntax?$1 s_1537)"
"(syntax-e$1 s_1537)"
" s_1537)))"
"(if(pair? s_1538)"
"(let-values(((e377_1539)"
"(let-values(((s_1540)(car s_1538)))"
" s_1540))"
"(()"
"(let-values(((s_1541)(cdr s_1538)))"
"(let-values(((s_1542)"
"(if(syntax?$1"
" s_1541)"
"(syntax-e$1 s_1541)"
" s_1541)))"
"(if(null? s_1542)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1530))))))"
"(values e377_1539))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1530))))))"
"(values #%expression375_1534 e376_1535))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1530)))))"
"(values #t #%expression373_1531 e374_1532)))"
"(values #f #f #f)))))"
"(let-values(((exp-e_1527)"
"(let-values(((temp378_1543) e374_1516)"
"((temp379_1544)"
"(let-values(((...nder/expand/expr.rkt:570:32_1545) as-tail-context14.1)"
"((temp380_1546)(as-expression-context ctx_1512))"
"((ctx381_1547) ctx_1512))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx381_1547 temp380_1546)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:570:32_1545"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx381_1547)"
" temp380_1546)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp378_1543 temp379_1544)"
"(expand7.1 temp378_1543 temp379_1544)))))"
"(let-values(((tmp_1548)"
"(if(not(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_1512))"
"(expand-context-context ctx_1512)"
" #f)))"
"(if(equal? tmp_1548 'expression)"
"(let-values()"
"(let-values(((result-s_1549)(syntax-track-origin$1 exp-e_1527 s_1511)))"
"(begin"
"(let-values(((obs_1550)(expand-context-observer ctx_1512)))"
"(if obs_1550"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1550 'tag result-s_1549))(void)))"
"(void)))"
" result-s_1549)))"
"(let-values()"
"(let-values(((s382_1551) s_1511)"
"((disarmed-s383_1552) disarmed-s_1513)"
"((temp384_1553)(list #%expression373_1515 exp-e_1527)))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s382_1551 disarmed-s383_1552 temp384_1553)"
"(rebuild102.1 s382_1551 disarmed-s383_1552 temp384_1553)))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_1554 ctx_1555) (raise-syntax-error$1 #f \"not in quasiquote\" s_1554))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_1556 ctx_1557) (raise-syntax-error$1 #f \"not in quasiquote\" s_1556))))"
" print-values)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_1 id_2 at-phase_3 ns_4)"
"(if(not at-phase_3)"
"(let-values()"
"(let-values(((m_5)(namespace->module ns_4(1/module-path-index-resolve(module-binding-nominal-module b_1)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_1) '#hasheq())"
"(module-binding-nominal-sym b_1)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 insp_8)"
"(let-values(((b1_9) b_1)"
"((empty-env2_10) empty-env)"
"((null3_11) null)"
"((ns4_12) ns_4)"
"((at-phase5_13) at-phase_3)"
"((id6_14) id_2))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup48.1))"
"(binding-lookup46.1 #f #f #f #f b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)"
"(binding-lookup48.1 b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)))))"
"(not(variable? val_7)))))))"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6 expand_7 rebuild_8)"
"(let-values(((ns_9)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_10)"
"(lambda(specs_11 at-phase_12 protected?_13 layer_14)"
"(let-values(((track-stxess_15 exp-specss_16)"
"(let-values(((track-stxes_17 exp-specs_18)"
"(let-values(((lst_19) specs_11))"
"(begin"
"(if(list? lst_19)(void)(let-values()(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(track-stxes_21 exp-specs_22 lst_23)"
"(if(pair? lst_23)"
"(let-values(((spec_24)"
"(unsafe-car lst_23)))"
"(if #t"
"(let-values(((track-stxes_25"
" exp-specs_26)"
"(let-values(((track-stxes_27)"
" track-stxes_21)"
"((exp-specs_28)"
" exp-specs_22))"
"(let-values(((track-stxes_29"
" exp-specs_30)"
"(let-values()"
"(let-values(((track-stxes1_31"
" exp-specs2_32)"
"(let-values()"
"(let-values(((disarmed-spec_33)"
"(syntax-disarm$1"
" spec_24)))"
"(let-values(((fm_34)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_33))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_33)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_33)))"
" #f)"
" #f)))"
"(let-values(((check-nested_35)"
"(lambda(want-layer_36)"
"(if(member"
" want-layer_36"
"(member"
" layer_14"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                              \"nested `~a' not allowed\""
" fm_34)"
" orig-s_2"
" spec_24))))))"
"(let-values(((tmp_37)"
" fm_34))"
"(let-values(((index_38)"
"(if(symbol?"
" tmp_37)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_37"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_38"
" 6)"
"(if(unsafe-fx<"
" index_38"
" 2)"
"(if(unsafe-fx<"
" index_38"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_24)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_24"
" orig-s_2"
"(syntax-e$1"
" spec_24)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(values"
" null"
"(list"
" spec_24))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                           \"bad syntax\""
" orig-s_2"
" spec_24))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'raw)"
"(values))))"
"(let-values(((ok?_39"
" for-meta3_40"
" phase-level4_41"
" spec5_42)"
"(let-values(((s_58)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_59)"
" s_58))"
"(let-values(((for-meta3_60"
" phase-level4_61"
" spec5_62)"
"(let-values(((s_63)"
"(if(syntax?$1"
" s_58)"
"(syntax-e$1"
" s_58)"
" s_58)))"
"(if(pair?"
" s_63)"
"(let-values(((for-meta6_64)"
"(let-values(((s_67)"
"(car"
" s_63)))"
" s_67))"
"((phase-level7_65"
" spec8_66)"
"(let-values(((s_68)"
"(cdr"
" s_63)))"
"(let-values(((s_69)"
"(if(syntax?$1"
" s_68)"
"(syntax-e$1"
" s_68)"
" s_68)))"
"(if(pair?"
" s_69)"
"(let-values(((phase-level9_70)"
"(let-values(((s_72)"
"(car"
" s_69)))"
" s_72))"
"((spec10_71)"
"(let-values(((s_73)"
"(cdr"
" s_69)))"
"(let-values(((s_74)"
"(if(syntax?$1"
" s_73)"
"(syntax-e$1"
" s_73)"
" s_73)))"
"(let-values(((flat-s_75)"
"(to-syntax-list.1"
" s_74)))"
"(if(not"
" flat-s_75)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_59))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_59))"
"(let-values()"
" flat-s_75))))))))"
"(values"
" phase-level9_70"
" spec10_71))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_59))))))"
"(values"
" for-meta6_64"
" phase-level7_65"
" spec8_66))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_59)))))"
"(values"
" #t"
" for-meta3_60"
" phase-level4_61"
" spec5_62)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_55)"
"(syntax-e$1"
" phase-level4_41)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_55)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                 \"bad `for-meta' phase\""
" orig-s_2"
" spec_24)))"
"(values))))"
"(let-values(((track-stxes_56"
" exp-specs_57)"
"(loop_10"
" spec5_42"
"(phase+"
" p_55"
" at-phase_12)"
" protected?_13"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_56"
"(rebuild_8"
" spec_24"
" spec_24"
"(list*"
" for-meta3_40"
" phase-level4_41"
" exp-specs_57))))))))))))"
"(if(unsafe-fx<"
" index_38"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'raw)"
"(values))))"
"(let-values(((ok?_76"
" for-syntax11_77"
" spec12_78)"
"(let-values(((s_91)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_92)"
" s_91))"
"(let-values(((for-syntax11_93"
" spec12_94)"
"(let-values(((s_95)"
"(if(syntax?$1"
" s_91)"
"(syntax-e$1"
" s_91)"
" s_91)))"
"(if(pair?"
" s_95)"
"(let-values(((for-syntax13_96)"
"(let-values(((s_98)"
"(car"
" s_95)))"
" s_98))"
"((spec14_97)"
"(let-values(((s_99)"
"(cdr"
" s_95)))"
"(let-values(((s_100)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1"
" s_99)"
" s_99)))"
"(let-values(((flat-s_101)"
"(to-syntax-list.1"
" s_100)))"
"(if(not"
" flat-s_101)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_92))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_92))"
"(let-values()"
" flat-s_101))))))))"
"(values"
" for-syntax13_96"
" spec14_97))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_92)))))"
"(values"
" #t"
" for-syntax11_93"
" spec12_94)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((track-stxes_89"
" exp-specs_90)"
"(loop_10"
" spec12_78"
"(phase+"
" 1"
" at-phase_12)"
" protected?_13"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_89"
"(rebuild_8"
" spec_24"
" spec_24"
"(list*"
" for-syntax11_77"
" exp-specs_90)))))))))"
"(if(unsafe-fx<"
" index_38"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'raw)"
"(values))))"
"(let-values(((ok?_102"
" for-label15_103"
" spec16_104)"
"(let-values(((s_117)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_118)"
" s_117))"
"(let-values(((for-label15_119"
" spec16_120)"
"(let-values(((s_121)"
"(if(syntax?$1"
" s_117)"
"(syntax-e$1"
" s_117)"
" s_117)))"
"(if(pair?"
" s_121)"
"(let-values(((for-label17_122)"
"(let-values(((s_124)"
"(car"
" s_121)))"
" s_124))"
"((spec18_123)"
"(let-values(((s_125)"
"(cdr"
" s_121)))"
"(let-values(((s_126)"
"(if(syntax?$1"
" s_125)"
"(syntax-e$1"
" s_125)"
" s_125)))"
"(let-values(((flat-s_127)"
"(to-syntax-list.1"
" s_126)))"
"(if(not"
" flat-s_127)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_118))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_118))"
"(let-values()"
" flat-s_127))))))))"
"(values"
" for-label17_122"
" spec18_123))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_118)))))"
"(values"
" #t"
" for-label15_119"
" spec16_120)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((track-stxes_115"
" exp-specs_116)"
"(loop_10"
" spec16_104"
" #f"
" protected?_13"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_115"
"(rebuild_8"
" spec_24"
" spec_24"
"(list*"
" for-label15_103"
" exp-specs_116)))))))))"
"(if(unsafe-fx<"
" index_38"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_13"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                 \"nested `protect' not allowed\""
" orig-s_2"
" spec_24))"
"(void))"
"(values))))"
"(let-values(((ok?_128"
" protect19_129"
" p-spec20_130)"
"(let-values(((s_143)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_144)"
" s_143))"
"(let-values(((protect19_145"
" p-spec20_146)"
"(let-values(((s_147)"
"(if(syntax?$1"
" s_143)"
"(syntax-e$1"
" s_143)"
" s_143)))"
"(if(pair?"
" s_147)"
"(let-values(((protect21_148)"
"(let-values(((s_150)"
"(car"
" s_147)))"
" s_150))"
"((p-spec22_149)"
"(let-values(((s_151)"
"(cdr"
" s_147)))"
"(let-values(((s_152)"
"(if(syntax?$1"
" s_151)"
"(syntax-e$1"
" s_151)"
" s_151)))"
"(let-values(((flat-s_153)"
"(to-syntax-list.1"
" s_152)))"
"(if(not"
" flat-s_153)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_144))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_144))"
"(let-values()"
" flat-s_153))))))))"
"(values"
" protect21_148"
" p-spec22_149))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_144)))))"
"(values"
" #t"
" protect19_145"
" p-spec20_146)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((track-stxes_141"
" exp-specs_142)"
"(loop_10"
" p-spec20_130"
" at-phase_12"
" #t"
" layer_14)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_141"
"(rebuild_8"
" spec_24"
" spec_24"
"(list*"
" protect19_129"
" exp-specs_142))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_154"
" rename23_155"
" id:from24_156"
" id:to25_157)"
"(let-values(((s_170)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_171)"
" s_170))"
"(let-values(((rename23_172"
" id:from24_173"
" id:to25_174)"
"(let-values(((s_175)"
"(if(syntax?$1"
" s_170)"
"(syntax-e$1"
" s_170)"
" s_170)))"
"(if(pair?"
" s_175)"
"(let-values(((rename26_176)"
"(let-values(((s_179)"
"(car"
" s_175)))"
" s_179))"
"((id:from27_177"
" id:to28_178)"
"(let-values(((s_180)"
"(cdr"
" s_175)))"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_180)"
"(syntax-e$1"
" s_180)"
" s_180)))"
"(if(pair?"
" s_181)"
"(let-values(((id:from29_182)"
"(let-values(((s_184)"
"(car"
" s_181)))"
"(if(let-values(((or-part_185)"
"(if(syntax?$1"
" s_184)"
"(symbol?"
"(syntax-e$1"
" s_184))"
" #f)))"
"(if or-part_185"
" or-part_185"
"(symbol?"
" s_184)))"
" s_184"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_171"
" s_184))))"
"((id:to30_183)"
"(let-values(((s_186)"
"(cdr"
" s_181)))"
"(let-values(((s_187)"
"(if(syntax?$1"
" s_186)"
"(syntax-e$1"
" s_186)"
" s_186)))"
"(if(pair?"
" s_187)"
"(let-values(((id:to31_188)"
"(let-values(((s_189)"
"(car"
" s_187)))"
"(if(let-values(((or-part_190)"
"(if(syntax?$1"
" s_189)"
"(symbol?"
"(syntax-e$1"
" s_189))"
" #f)))"
"(if or-part_190"
" or-part_190"
"(symbol?"
" s_189)))"
" s_189"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_171"
" s_189))))"
"(()"
"(let-values(((s_191)"
"(cdr"
" s_187)))"
"(let-values(((s_192)"
"(if(syntax?$1"
" s_191)"
"(syntax-e$1"
" s_191)"
" s_191)))"
"(if(null?"
" s_192)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_171))))))"
"(values"
" id:to31_188))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_171))))))"
"(values"
" id:from29_182"
" id:to30_183))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_171))))))"
"(values"
" rename26_176"
" id:from27_177"
" id:to28_178))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_171)))))"
"(values"
" #t"
" rename23_172"
" id:from24_173"
" id:to25_174)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-identifier!"
" id:from24_156"
" orig-s_2"
"(syntax-e$1"
" id:to25_157)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(values"
" null"
"(list"
" spec_24))))))))))"
"(if(unsafe-fx<"
" index_38"
" 9)"
"(if(unsafe-fx<"
" index_38"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_193"
" struct32_194"
" id:struct33_195"
" id:field34_196)"
"(let-values(((s_209)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_210)"
" s_209))"
"(let-values(((struct32_211"
" id:struct33_212"
" id:field34_213)"
"(let-values(((s_214)"
"(if(syntax?$1"
" s_209)"
"(syntax-e$1"
" s_209)"
" s_209)))"
"(if(pair?"
" s_214)"
"(let-values(((struct35_215)"
"(let-values(((s_218)"
"(car"
" s_214)))"
" s_218))"
"((id:struct36_216"
" id:field37_217)"
"(let-values(((s_219)"
"(cdr"
" s_214)))"
"(let-values(((s_220)"
"(if(syntax?$1"
" s_219)"
"(syntax-e$1"
" s_219)"
" s_219)))"
"(if(pair?"
" s_220)"
"(let-values(((id:struct38_221)"
"(let-values(((s_223)"
"(car"
" s_220)))"
"(if(let-values(((or-part_224)"
"(if(syntax?$1"
" s_223)"
"(symbol?"
"(syntax-e$1"
" s_223))"
" #f)))"
"(if or-part_224"
" or-part_224"
"(symbol?"
" s_223)))"
" s_223"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_210"
" s_223))))"
"((id:field39_222)"
"(let-values(((s_225)"
"(cdr"
" s_220)))"
"(let-values(((s_226)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_226)"
"(let-values(((id:field40_227)"
"(let-values(((s_228)"
"(car"
" s_226)))"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_228)"
"(syntax-e$1"
" s_228)"
" s_228)))"
"(let-values(((flat-s_230)"
"(to-syntax-list.1"
" s_229)))"
"(if(not"
" flat-s_230)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_210))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_210))"
"(let-values()"
"(let-values(((id:field_231)"
"(let-values(((lst_232)"
" flat-s_230))"
"(begin"
"(if(list?"
" lst_232)"
"(void)"
"(let-values()"
"(in-list"
" lst_232)))"
"((letrec-values(((for-loop_233)"
"(lambda(id:field_234"
" lst_235)"
"(if(pair?"
" lst_235)"
"(let-values(((s_236)"
"(unsafe-car"
" lst_235)))"
"(if #t"
"(let-values(((id:field_237)"
"(let-values(((id:field_238)"
" id:field_234))"
"(let-values(((id:field_239)"
"(let-values()"
"(let-values(((id:field41_240)"
"(let-values()"
"(if(let-values(((or-part_241)"
"(if(syntax?$1"
" s_236)"
"(symbol?"
"(syntax-e$1"
" s_236))"
" #f)))"
"(if or-part_241"
" or-part_241"
"(symbol?"
" s_236)))"
" s_236"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_210"
" s_236)))))"
"(cons"
" id:field41_240"
" id:field_238)))))"
"(values"
" id:field_239)))))"
"(if #t"
"(for-loop_233"
" id:field_237"
"(unsafe-cdr"
" lst_235))"
" id:field_237))"
" id:field_234))"
" id:field_234))))"
" for-loop_233)"
" null"
" lst_232)))))"
"(alt-reverse"
" id:field_231)))))))))"
"(()"
"(let-values(((s_242)"
"(cdr"
" s_226)))"
"(let-values(((s_243)"
"(if(syntax?$1"
" s_242)"
"(syntax-e$1"
" s_242)"
" s_242)))"
"(if(null?"
" s_243)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_210))))))"
"(values"
" id:field40_227))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_210))))))"
"(values"
" id:struct38_221"
" id:field39_222))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_210))))))"
"(values"
" struct35_215"
" id:struct36_216"
" id:field37_217))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_210)))))"
"(values"
" #t"
" struct32_211"
" id:struct33_212"
" id:field34_213)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-struct!"
" id:struct33_195"
" orig-s_2"
" id:field34_196"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(values"
" null"
"(list"
" spec_24))))))"
"(if(unsafe-fx<"
" index_38"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_244"
" all-from42_245"
" mod-path43_246)"
"(let-values(((s_257)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_258)"
" s_257))"
"(let-values(((all-from42_259"
" mod-path43_260)"
"(let-values(((s_261)"
"(if(syntax?$1"
" s_257)"
"(syntax-e$1"
" s_257)"
" s_257)))"
"(if(pair?"
" s_261)"
"(let-values(((all-from44_262)"
"(let-values(((s_264)"
"(car"
" s_261)))"
" s_264))"
"((mod-path45_263)"
"(let-values(((s_265)"
"(cdr"
" s_261)))"
"(let-values(((s_266)"
"(if(syntax?$1"
" s_265)"
"(syntax-e$1"
" s_265)"
" s_265)))"
"(if(pair?"
" s_266)"
"(let-values(((mod-path46_267)"
"(let-values(((s_268)"
"(car"
" s_266)))"
" s_268))"
"(()"
"(let-values(((s_269)"
"(cdr"
" s_266)))"
"(let-values(((s_270)"
"(if(syntax?$1"
" s_269)"
"(syntax-e$1"
" s_269)"
" s_269)))"
"(if(null?"
" s_270)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_258))))))"
"(values"
" mod-path46_267))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_258))))))"
"(values"
" all-from44_262"
" mod-path45_263))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_258)))))"
"(values"
" #t"
" all-from42_259"
" mod-path43_260)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from"
" mod-path43_246"
" orig-s_2"
" self_4"
" null"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13"
" ctx_6)"
"(values"
" null"
"(list"
" spec_24))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_271"
" all-from-except47_272"
" mod-path48_273"
" id49_274)"
"(let-values(((s_287)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_288)"
" s_287))"
"(let-values(((all-from-except47_289"
" mod-path48_290"
" id49_291)"
"(let-values(((s_292)"
"(if(syntax?$1"
" s_287)"
"(syntax-e$1"
" s_287)"
" s_287)))"
"(if(pair?"
" s_292)"
"(let-values(((all-from-except50_293)"
"(let-values(((s_296)"
"(car"
" s_292)))"
" s_296))"
"((mod-path51_294"
" id52_295)"
"(let-values(((s_297)"
"(cdr"
" s_292)))"
"(let-values(((s_298)"
"(if(syntax?$1"
" s_297)"
"(syntax-e$1"
" s_297)"
" s_297)))"
"(if(pair?"
" s_298)"
"(let-values(((mod-path53_299)"
"(let-values(((s_301)"
"(car"
" s_298)))"
" s_301))"
"((id54_300)"
"(let-values(((s_302)"
"(cdr"
" s_298)))"
"(let-values(((s_303)"
"(if(syntax?$1"
" s_302)"
"(syntax-e$1"
" s_302)"
" s_302)))"
"(let-values(((flat-s_304)"
"(to-syntax-list.1"
" s_303)))"
"(if(not"
" flat-s_304)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_288))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_288))"
"(let-values()"
"(let-values(((id_305)"
"(let-values(((lst_306)"
" flat-s_304))"
"(begin"
"(if(list?"
" lst_306)"
"(void)"
"(let-values()"
"(in-list"
" lst_306)))"
"((letrec-values(((for-loop_307)"
"(lambda(id_308"
" lst_309)"
"(if(pair?"
" lst_309)"
"(let-values(((s_310)"
"(unsafe-car"
" lst_309)))"
"(if #t"
"(let-values(((id_311)"
"(let-values(((id_312)"
" id_308))"
"(let-values(((id_313)"
"(let-values()"
"(let-values(((id55_314)"
"(let-values()"
"(if(let-values(((or-part_315)"
"(if(syntax?$1"
" s_310)"
"(symbol?"
"(syntax-e$1"
" s_310))"
" #f)))"
"(if or-part_315"
" or-part_315"
"(symbol?"
" s_310)))"
" s_310"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_288"
" s_310)))))"
"(cons"
" id55_314"
" id_312)))))"
"(values"
" id_313)))))"
"(if #t"
"(for-loop_307"
" id_311"
"(unsafe-cdr"
" lst_309))"
" id_311))"
" id_308))"
" id_308))))"
" for-loop_307)"
" null"
" lst_306)))))"
"(alt-reverse"
" id_305))))))))))"
"(values"
" mod-path53_299"
" id54_300))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_288))))))"
"(values"
" all-from-except50_293"
" mod-path51_294"
" id52_295))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_288)))))"
"(values"
" #t"
" all-from-except47_289"
" mod-path48_290"
" id49_291)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from"
" mod-path48_273"
" orig-s_2"
" self_4"
" id49_274"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13"
" ctx_6)"
"(values"
" null"
"(list"
" spec_24))))))))"
"(if(unsafe-fx<"
" index_38"
" 11)"
"(if(unsafe-fx<"
" index_38"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_316"
" all-defined56_317)"
"(let-values(((s_326)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_327)"
" s_326))"
"(let-values(((all-defined56_328)"
"(let-values(((s_329)"
"(if(syntax?$1"
" s_326)"
"(syntax-e$1"
" s_326)"
" s_326)))"
"(if(pair?"
" s_329)"
"(let-values(((all-defined57_330)"
"(let-values(((s_331)"
"(car"
" s_329)))"
" s_331))"
"(()"
"(let-values(((s_332)"
"(cdr"
" s_329)))"
"(let-values(((s_333)"
"(if(syntax?$1"
" s_332)"
"(syntax-e$1"
" s_332)"
" s_332)))"
"(if(null?"
" s_333)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_327))))))"
"(values"
" all-defined57_330))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_327)))))"
"(values"
" #t"
" all-defined56_328)))"
"(values"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_24"
" orig-s_2"
" null"
" #f"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(values"
" null"
"(list"
" spec_24))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_334"
" all-defined-except58_335"
" id59_336)"
"(let-values(((s_347)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_348)"
" s_347))"
"(let-values(((all-defined-except58_349"
" id59_350)"
"(let-values(((s_351)"
"(if(syntax?$1"
" s_347)"
"(syntax-e$1"
" s_347)"
" s_347)))"
"(if(pair?"
" s_351)"
"(let-values(((all-defined-except60_352)"
"(let-values(((s_354)"
"(car"
" s_351)))"
" s_354))"
"((id61_353)"
"(let-values(((s_355)"
"(cdr"
" s_351)))"
"(let-values(((s_356)"
"(if(syntax?$1"
" s_355)"
"(syntax-e$1"
" s_355)"
" s_355)))"
"(let-values(((flat-s_357)"
"(to-syntax-list.1"
" s_356)))"
"(if(not"
" flat-s_357)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_348))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_348))"
"(let-values()"
"(let-values(((id_358)"
"(let-values(((lst_359)"
" flat-s_357))"
"(begin"
"(if(list?"
" lst_359)"
"(void)"
"(let-values()"
"(in-list"
" lst_359)))"
"((letrec-values(((for-loop_360)"
"(lambda(id_361"
" lst_362)"
"(if(pair?"
" lst_362)"
"(let-values(((s_363)"
"(unsafe-car"
" lst_362)))"
"(if #t"
"(let-values(((id_364)"
"(let-values(((id_365)"
" id_361))"
"(let-values(((id_366)"
"(let-values()"
"(let-values(((id62_367)"
"(let-values()"
"(if(let-values(((or-part_368)"
"(if(syntax?$1"
" s_363)"
"(symbol?"
"(syntax-e$1"
" s_363))"
" #f)))"
"(if or-part_368"
" or-part_368"
"(symbol?"
" s_363)))"
" s_363"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_348"
" s_363)))))"
"(cons"
" id62_367"
" id_365)))))"
"(values"
" id_366)))))"
"(if #t"
"(for-loop_360"
" id_364"
"(unsafe-cdr"
" lst_362))"
" id_364))"
" id_361))"
" id_361))))"
" for-loop_360)"
" null"
" lst_359)))))"
"(alt-reverse"
" id_358))))))))))"
"(values"
" all-defined-except60_352"
" id61_353))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_348)))))"
"(values"
" #t"
" all-defined-except58_349"
" id59_350)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_24"
" orig-s_2"
" id59_336"
" #f"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(values"
" null"
"(list"
" spec_24)))))))"
"(if(unsafe-fx<"
" index_38"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_369"
" prefix-all-defined63_370"
" id:prefix64_371)"
"(let-values(((s_382)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_383)"
" s_382))"
"(let-values(((prefix-all-defined63_384"
" id:prefix64_385)"
"(let-values(((s_386)"
"(if(syntax?$1"
" s_382)"
"(syntax-e$1"
" s_382)"
" s_382)))"
"(if(pair?"
" s_386)"
"(let-values(((prefix-all-defined65_387)"
"(let-values(((s_389)"
"(car"
" s_386)))"
" s_389))"
"((id:prefix66_388)"
"(let-values(((s_390)"
"(cdr"
" s_386)))"
"(let-values(((s_391)"
"(if(syntax?$1"
" s_390)"
"(syntax-e$1"
" s_390)"
" s_390)))"
"(if(pair?"
" s_391)"
"(let-values(((id:prefix67_392)"
"(let-values(((s_393)"
"(car"
" s_391)))"
"(if(let-values(((or-part_394)"
"(if(syntax?$1"
" s_393)"
"(symbol?"
"(syntax-e$1"
" s_393))"
" #f)))"
"(if or-part_394"
" or-part_394"
"(symbol?"
" s_393)))"
" s_393"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_383"
" s_393))))"
"(()"
"(let-values(((s_395)"
"(cdr"
" s_391)))"
"(let-values(((s_396)"
"(if(syntax?$1"
" s_395)"
"(syntax-e$1"
" s_395)"
" s_395)))"
"(if(null?"
" s_396)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_383))))))"
"(values"
" id:prefix67_392))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_383))))))"
"(values"
" prefix-all-defined65_387"
" id:prefix66_388))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_383)))))"
"(values"
" #t"
" prefix-all-defined63_384"
" id:prefix64_385)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_24"
" orig-s_2"
" null"
"(syntax-e$1"
" id:prefix64_371)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(values"
" null"
"(list"
" spec_24))))))"
"(if(unsafe-fx<"
" index_38"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_35"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_397"
" prefix-all-defined-except68_398"
" id:prefix69_399"
" id70_400)"
"(let-values(((s_413)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_414)"
" s_413))"
"(let-values(((prefix-all-defined-except68_415"
" id:prefix69_416"
" id70_417)"
"(let-values(((s_418)"
"(if(syntax?$1"
" s_413)"
"(syntax-e$1"
" s_413)"
" s_413)))"
"(if(pair?"
" s_418)"
"(let-values(((prefix-all-defined-except71_419)"
"(let-values(((s_422)"
"(car"
" s_418)))"
" s_422))"
"((id:prefix72_420"
" id73_421)"
"(let-values(((s_423)"
"(cdr"
" s_418)))"
"(let-values(((s_424)"
"(if(syntax?$1"
" s_423)"
"(syntax-e$1"
" s_423)"
" s_423)))"
"(if(pair?"
" s_424)"
"(let-values(((id:prefix74_425)"
"(let-values(((s_427)"
"(car"
" s_424)))"
"(if(let-values(((or-part_428)"
"(if(syntax?$1"
" s_427)"
"(symbol?"
"(syntax-e$1"
" s_427))"
" #f)))"
"(if or-part_428"
" or-part_428"
"(symbol?"
" s_427)))"
" s_427"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_414"
" s_427))))"
"((id75_426)"
"(let-values(((s_429)"
"(cdr"
" s_424)))"
"(let-values(((s_430)"
"(if(syntax?$1"
" s_429)"
"(syntax-e$1"
" s_429)"
" s_429)))"
"(let-values(((flat-s_431)"
"(to-syntax-list.1"
" s_430)))"
"(if(not"
" flat-s_431)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_414))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_414))"
"(let-values()"
"(let-values(((id_432)"
"(let-values(((lst_433)"
" flat-s_431))"
"(begin"
"(if(list?"
" lst_433)"
"(void)"
"(let-values()"
"(in-list"
" lst_433)))"
"((letrec-values(((for-loop_434)"
"(lambda(id_435"
" lst_436)"
"(if(pair?"
" lst_436)"
"(let-values(((s_437)"
"(unsafe-car"
" lst_436)))"
"(if #t"
"(let-values(((id_438)"
"(let-values(((id_439)"
" id_435))"
"(let-values(((id_440)"
"(let-values()"
"(let-values(((id76_441)"
"(let-values()"
"(if(let-values(((or-part_442)"
"(if(syntax?$1"
" s_437)"
"(symbol?"
"(syntax-e$1"
" s_437))"
" #f)))"
"(if or-part_442"
" or-part_442"
"(symbol?"
" s_437)))"
" s_437"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_414"
" s_437)))))"
"(cons"
" id76_441"
" id_439)))))"
"(values"
" id_440)))))"
"(if #t"
"(for-loop_434"
" id_438"
"(unsafe-cdr"
" lst_436))"
" id_438))"
" id_435))"
" id_435))))"
" for-loop_434)"
" null"
" lst_433)))))"
"(alt-reverse"
" id_432))))))))))"
"(values"
" id:prefix74_425"
" id75_426))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_414))))))"
"(values"
" prefix-all-defined-except71_419"
" id:prefix72_420"
" id73_421))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_414)))))"
"(values"
" #t"
" prefix-all-defined-except68_415"
" id:prefix69_416"
" id70_417)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_24"
" orig-s_2"
" id70_400"
"(syntax-e$1"
" id:prefix69_399)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(values"
" null"
"(list"
" spec_24))))))"
"(let-values()"
"(let-values(((ok?_443"
" expand77_444"
" id78_445"
" datum79_446)"
"(let-values(((s_488)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_489)"
" s_488))"
"(let-values(((expand77_490"
" id78_491"
" datum79_492)"
"(let-values(((s_493)"
"(if(syntax?$1"
" s_488)"
"(syntax-e$1"
" s_488)"
" s_488)))"
"(if(pair?"
" s_493)"
"(let-values(((expand80_494)"
"(let-values(((s_497)"
"(car"
" s_493)))"
" s_497))"
"((id81_495"
" datum82_496)"
"(let-values(((s_498)"
"(cdr"
" s_493)))"
"(let-values(((s_499)"
"(if(syntax?$1"
" s_498)"
"(syntax-e$1"
" s_498)"
" s_498)))"
"(if(pair?"
" s_499)"
"(let-values(((id83_500"
" datum84_501)"
"(let-values(((s_502)"
"(car"
" s_499)))"
"(let-values(((s_503)"
"(if(syntax?$1"
" s_502)"
"(syntax-e$1"
" s_502)"
" s_502)))"
"(if(pair?"
" s_503)"
"(let-values(((id85_504)"
"(let-values(((s_506)"
"(car"
" s_503)))"
"(if(let-values(((or-part_507)"
"(if(syntax?$1"
" s_506)"
"(symbol?"
"(syntax-e$1"
" s_506))"
" #f)))"
"(if or-part_507"
" or-part_507"
"(symbol?"
" s_506)))"
" s_506"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_489"
" s_506))))"
"((datum86_505)"
"(let-values(((s_508)"
"(cdr"
" s_503)))"
" s_508)))"
"(values"
" id85_504"
" datum86_505))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_489)))))"
"(()"
"(let-values(((s_509)"
"(cdr"
" s_499)))"
"(let-values(((s_510)"
"(if(syntax?$1"
" s_509)"
"(syntax-e$1"
" s_509)"
" s_509)))"
"(if(null?"
" s_510)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_489))))))"
"(values"
" id83_500"
" datum84_501))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_489))))))"
"(values"
" expand80_494"
" id81_495"
" datum82_496))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_489)))))"
"(values"
" #t"
" expand77_490"
" id78_491"
" datum79_492)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ok?_459"
" expand87_460"
" form88_461)"
"(let-values(((s_511)"
" disarmed-spec_33))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_512)"
" s_511))"
"(let-values(((expand87_513"
" form88_514)"
"(let-values(((s_515)"
"(if(syntax?$1"
" s_511)"
"(syntax-e$1"
" s_511)"
" s_511)))"
"(if(pair?"
" s_515)"
"(let-values(((expand89_516)"
"(let-values(((s_518)"
"(car"
" s_515)))"
" s_518))"
"((form90_517)"
"(let-values(((s_519)"
"(cdr"
" s_515)))"
"(let-values(((s_520)"
"(if(syntax?$1"
" s_519)"
"(syntax-e$1"
" s_519)"
" s_519)))"
"(if(pair?"
" s_520)"
"(let-values(((form91_521)"
"(let-values(((s_522)"
"(car"
" s_520)))"
" s_522))"
"(()"
"(let-values(((s_523)"
"(cdr"
" s_520)))"
"(let-values(((s_524)"
"(if(syntax?$1"
" s_523)"
"(syntax-e$1"
" s_523)"
" s_523)))"
"(if(null?"
" s_524)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_512))))))"
"(values"
" form91_521))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_512))))))"
"(values"
" expand89_516"
" form90_517))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_512)))))"
"(values"
" #t"
" expand87_513"
" form88_514)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((exp-spec_472)"
"(expand_7"
" form88_461"
"(let-values(((the-struct_525)"
" ctx_6))"
"(if(expand-context?"
" the-struct_525)"
"(let-values(((only-immediate?96_526)"
" #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_525)"
"(root-expand-context-post-expansion-scope"
" the-struct_525)"
"(root-expand-context-top-level-bind-scope"
" the-struct_525)"
"(root-expand-context-all-scopes-stx"
" the-struct_525)"
"(root-expand-context-use-site-scopes"
" the-struct_525)"
"(root-expand-context-defined-syms"
" the-struct_525)"
"(root-expand-context-frame-id"
" the-struct_525)"
"(root-expand-context-counter"
" the-struct_525)"
"(root-expand-context-lift-key"
" the-struct_525)"
"(expand-context-context"
" the-struct_525)"
"(expand-context-phase"
" the-struct_525)"
"(expand-context-namespace"
" the-struct_525)"
"(expand-context-env"
" the-struct_525)"
"(expand-context-user-env"
" the-struct_525)"
"(expand-context-post-expansion-scope-action"
" the-struct_525)"
"(expand-context-scopes"
" the-struct_525)"
"(expand-context-def-ctx-scopes"
" the-struct_525)"
"(expand-context-reference-records"
" the-struct_525)"
" only-immediate?96_526"
"(expand-context-just-once?"
" the-struct_525)"
"(expand-context-module-begin-k"
" the-struct_525)"
"(expand-context-need-eventually-defined"
" the-struct_525)"
"(expand-context-allow-unbound?"
" the-struct_525)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_525)"
"(expand-context-stops"
" the-struct_525)"
"(expand-context-current-introduction-scopes"
" the-struct_525)"
"(expand-context-declared-submodule-names"
" the-struct_525)"
"(expand-context-lifts"
" the-struct_525)"
"(expand-context-lift-envs"
" the-struct_525)"
"(expand-context-module-lifts"
" the-struct_525)"
"(expand-context-require-lifts"
" the-struct_525)"
"(expand-context-to-module-lifts"
" the-struct_525)"
"(expand-context-requires+provides"
" the-struct_525)"
"(expand-context-name"
" the-struct_525)"
"(expand-context-observer"
" the-struct_525)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                  \"expand-context?\""
" the-struct_525))))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_472))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_472)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_472"
" at-phase_12))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                     \"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_24)))"
"(values))))"
"(let-values(((ok?_473"
" begin92_474"
" spec93_475)"
"(let-values(((s_527)"
" exp-spec_472))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_528)"
" s_527))"
"(let-values(((begin92_529"
" spec93_530)"
"(let-values(((s_531)"
"(if(syntax?$1"
" s_527)"
"(syntax-e$1"
" s_527)"
" s_527)))"
"(if(pair?"
" s_531)"
"(let-values(((begin94_532)"
"(let-values(((s_534)"
"(car"
" s_531)))"
" s_534))"
"((spec95_533)"
"(let-values(((s_535)"
"(cdr"
" s_531)))"
"(let-values(((s_536)"
"(if(syntax?$1"
" s_535)"
"(syntax-e$1"
" s_535)"
" s_535)))"
"(let-values(((flat-s_537)"
"(to-syntax-list.1"
" s_536)))"
"(if(not"
" flat-s_537)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_528))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_528))"
"(let-values()"
" flat-s_537))))))))"
"(values"
" begin94_532"
" spec95_533))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_528)))))"
"(values"
" #t"
" begin92_529"
" spec93_530)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((track-stxes_486"
" exp-specs_487)"
"(loop_10"
" spec93_475"
" at-phase_12"
" protected?_13"
" layer_14)))"
"(values"
"(list*"
" spec_24"
" exp-spec_472"
" track-stxes_486)"
" exp-specs_487)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_31"
" track-stxes_27)"
"(cons"
" exp-specs2_32"
" exp-specs_28))))))"
"(values"
" track-stxes_29"
" exp-specs_30)))))"
"(if #t"
"(for-loop_20"
" track-stxes_25"
" exp-specs_26"
"(unsafe-cdr lst_23))"
"(values"
" track-stxes_25"
" exp-specs_26)))"
"(values"
" track-stxes_21"
" exp-specs_22)))"
"(values track-stxes_21 exp-specs_22)))))"
" for-loop_20)"
" null"
" null"
" lst_19)))))"
"(values(alt-reverse track-stxes_17)(alt-reverse exp-specs_18)))))"
"(values(apply append track-stxess_15)(apply append exp-specss_16))))))"
" loop_10)"
" specs_1"
" phase_5"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_538 orig-s_539 sym_540 at-phase_541 ns_542 rp_543 protected?_544)"
"(let-values(((b_545)(resolve+shift/extra-inspector spec_538 at-phase_541 ns_542)))"
"(let-values((()"
"(begin"
"(if b_545"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_539"
" spec_538)))"
"(values))))"
"(let-values(((as-transformer?_546)(binding-for-transformer? b_545 spec_538 at-phase_541 ns_542)))"
"(let-values(((immed-b_547)"
"(let-values(((...r/expand/provide.rkt:183:18_548) resolve+shift15.1)"
"((spec106_549) spec_538)"
"((at-phase107_550) at-phase_541)"
"((temp108_551) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f temp108_551 #t #f #f spec106_549 at-phase107_550)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:183:18_548"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp108_551)"
" spec106_549"
" at-phase107_550)))))"
"(let-values(((...r/expand/provide.rkt:184:2_552) add-provide!69.1)"
"((rp97_553) rp_543)"
"((sym98_554) sym_540)"
"((at-phase99_555) at-phase_541)"
"((b100_556) b_545)"
"((immed-b101_557) immed-b_547)"
"((spec102_558) spec_538)"
"((orig-s103_559) orig-s_539)"
"((protected?104_560) protected?_544)"
"((as-transformer?105_561) as-transformer?_546))"
"(if(variable-reference-constant?(#%variable-reference add-provide!69.1))"
"(add-provide!67.1"
" protected?104_560"
" as-transformer?105_561"
" rp97_553"
" sym98_554"
" at-phase99_555"
" b100_556"
" immed-b101_557"
" spec102_558"
" orig-s103_559)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:184:2_552"
" keyword-procedure-extract"
" '(#:as-protected? #:as-transformer?)"
" 9)"
" '(#:as-protected? #:as-transformer?)"
"(list protected?104_560 as-transformer?105_561)"
" rp97_553"
" sym98_554"
" at-phase99_555"
" b100_556"
" immed-b101_557"
" spec102_558"
" orig-s103_559)))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_562 orig-s_563 fields_564 at-phase_565 ns_566 rp_567 protected?_568)"
"(let-values(((mk_569)"
"(lambda(fmt_571)"
"(let-values(((sym_572)(string->symbol(format fmt_571(syntax-e$1 id:struct_562)))))"
"(datum->syntax$1 id:struct_562 sym_572 id:struct_562)))))"
"(let-values(((mk2_570)"
"(lambda(fmt_573 field-id_574)"
"(let-values(((sym_575)"
"(string->symbol"
"(format fmt_573(syntax-e$1 id:struct_562)(syntax-e$1 field-id_574)))))"
"(datum->syntax$1 id:struct_562 sym_575 id:struct_562)))))"
"(begin"
"(let-values(((pos->vals_576 pos-next_577 init_578 pos-cont?_579 val-cont?_580 all-cont?_581)"
"                        (make-sequence '(fmt) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_582)"
"(lambda(fold-var_583 pos_584)"
"(if(if pos-cont?_579(pos-cont?_579 pos_584) #t)"
"(let-values(((fmt_585)(pos->vals_576 pos_584)))"
"(if(if val-cont?_580(val-cont?_580 fmt_585) #t)"
"(let-values(((fold-var_586)"
"(let-values(((fold-var_587) fold-var_583))"
"(let-values(((fold-var_588)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_589)(mk_569 fmt_585)))"
"(parse-identifier!"
" id_589"
" orig-s_563"
"(syntax-e$1 id_589)"
" at-phase_565"
" ns_566"
" rp_567"
" protected?_568)))"
"(void)))))"
"(values fold-var_588)))))"
"(if(if all-cont?_581(all-cont?_581 pos_584 fmt_585) #t)"
"(for-loop_582 fold-var_586(pos-next_577 pos_584))"
" fold-var_586))"
" fold-var_583))"
" fold-var_583))))"
" for-loop_582)"
"(void)"
" init_578)))"
"(let-values(((lst_590) fields_564))"
"(begin"
"(if(list? lst_590)(void)(let-values()(in-list lst_590)))"
"((letrec-values(((for-loop_591)"
"(lambda(fold-var_592 lst_593)"
"(if(pair? lst_593)"
"(let-values(((field_594)(unsafe-car lst_593)))"
"(if #t"
"(let-values(((fold-var_595)"
"(let-values(((fold-var_596) fold-var_592))"
"(let-values(((fold-var_597)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_598)"
"                                                                                          (mk2_570 \"~a-~a\" field_594)))"
"(let-values(((set-id_599)"
"(mk2_570"
"                                                                                             \"set-~a-~a!\""
" field_594)))"
"(begin"
"(parse-identifier!"
" get-id_598"
" orig-s_563"
"(syntax-e$1 get-id_598)"
" at-phase_565"
" ns_566"
" rp_567"
" protected?_568)"
"(parse-identifier!"
" set-id_599"
" orig-s_563"
"(syntax-e$1 set-id_599)"
" at-phase_565"
" ns_566"
" rp_567"
" protected?_568)))))"
"(void)))))"
"(values fold-var_597)))))"
"(if #t(for-loop_591 fold-var_595(unsafe-cdr lst_593)) fold-var_595))"
" fold-var_592))"
" fold-var_592))))"
" for-loop_591)"
"(void)"
" lst_590))))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_600 orig-s_601 self_602 except-ids_603 at-phase_604 ns_605 rp_606 protected?_607 ctx_608)"
"(let-values(((mod-path_609)(syntax->datum$1 mod-path-stx_600)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_609)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_601 mod-path-stx_600)))"
"(values))))"
"(let-values(((mpi_610)(module-path->mpi/context mod-path_609 ctx_608)))"
"(parse-all-from-module mpi_610 #f orig-s_601 except-ids_603 #f at-phase_604 ns_605 rp_606 protected?_607))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_611 matching-stx_612 orig-s_613 except-ids_614 prefix-sym_615 at-phase_616 ns_617 rp_618 protected?_619)"
"(let-values(((requireds_620)(extract-module-requires rp_618 mpi_611 at-phase_616)))"
"(let-values(((phase-desc_621)"
"(lambda()"
"(if(zero-phase? at-phase_616)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_616)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_616)))))))"
"(let-values((()"
"(begin"
"(if requireds_620"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_621))"
" orig-s_613"
" matching-stx_612)))"
"(values))))"
"(let-values(((add-prefix_622)"
"(lambda(sym_624)"
"                          (if prefix-sym_615 (string->symbol (format \"~a~a\" prefix-sym_615 sym_624)) sym_624))))"
"(let-values(((found_623)(make-hasheq)))"
"(begin"
"(let-values(((lst_625) requireds_620))"
"(begin"
"(if(list? lst_625)(void)(let-values()(in-list lst_625)))"
"((letrec-values(((for-loop_626)"
"(lambda(fold-var_627 lst_628)"
"(if(pair? lst_628)"
"(let-values(((i_629)(unsafe-car lst_628)))"
"(if #t"
"(let-values(((fold-var_630)"
"(let-values(((fold-var_631) fold-var_627))"
"(let-values(((fold-var_632)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_633)"
"(required-id i_629)))"
"(let-values(((phase_634)"
"(required-phase"
" i_629)))"
"(if(let-values(((or-part_635)"
"(if matching-stx_612"
"(not"
"(free-identifier=?$1"
" id_633"
"(datum->syntax$1"
" matching-stx_612"
"(syntax-e$1"
" id_633))"
" phase_634"
" phase_634))"
" #f)))"
"(if or-part_635"
" or-part_635"
"(let-values(((lst_636)"
" except-ids_614))"
"(begin"
"(if(list? lst_636)"
"(void)"
"(let-values()"
"(in-list"
" lst_636)))"
"((letrec-values(((for-loop_637)"
"(lambda(result_638"
" lst_639)"
"(if(pair?"
" lst_639)"
"(let-values(((except-id_640)"
"(unsafe-car"
" lst_639)))"
"(if #t"
"(let-values(((result_641)"
"(let-values(((result_642)"
" result_638))"
"(let-values(((result_643)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_633"
" except-id_640"
" phase_634"
" phase_634)"
"(hash-set!"
" found_623"
" except-id_640"
" #t)"
" #f)))))"
"(values"
" result_643)))))"
"(if(if #t"
"(not"
"((lambda x_644"
" result_641)"
" except-id_640))"
" #f)"
"(for-loop_637"
" result_641"
"(unsafe-cdr"
" lst_639))"
" result_641))"
" result_638))"
" result_638))))"
" for-loop_637)"
" #f"
" lst_636)))))"
"(void)"
"(let-values()"
"(let-values(((b_645)"
"(resolve+shift/extra-inspector"
" id_633"
" phase_634"
" ns_617)))"
"(let-values(((immed-b_646)"
"(let-values(((...r/expand/provide.rkt:250:22_647)"
" resolve+shift15.1)"
"((id118_648)"
" id_633)"
"((phase119_649)"
" phase_634)"
"((temp120_650)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp120_650"
" #t"
" #f"
" #f"
" id118_648"
" phase119_649)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:250:22_647"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list"
" temp120_650)"
" id118_648"
" phase119_649)))))"
"(let-values(((...r/expand/provide.rkt:251:6_651)"
" add-provide!69.1)"
"((rp109_652)"
" rp_618)"
"((temp110_653)"
"(add-prefix_622"
"(syntax-e$1"
" id_633)))"
"((phase111_654)"
" phase_634)"
"((b112_655)"
" b_645)"
"((immed-b113_656)"
" immed-b_646)"
"((id114_657)"
" id_633)"
"((orig-s115_658)"
" orig-s_613)"
"((protected?116_659)"
" protected?_619)"
"((temp117_660)"
"(required-as-transformer?"
" i_629)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-provide!69.1))"
"(add-provide!67.1"
" protected?116_659"
" temp117_660"
" rp109_652"
" temp110_653"
" phase111_654"
" b112_655"
" immed-b113_656"
" id114_657"
" orig-s115_658)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:251:6_651"
" keyword-procedure-extract"
" '(#:as-protected?"
" #:as-transformer?)"
" 9)"
" '(#:as-protected?"
" #:as-transformer?)"
"(list"
" protected?116_659"
" temp117_660)"
" rp109_652"
" temp110_653"
" phase111_654"
" b112_655"
" immed-b113_656"
" id114_657"
" orig-s115_658))))))))))"
"(void)))))"
"(values fold-var_632)))))"
"(if #t(for-loop_626 fold-var_630(unsafe-cdr lst_628)) fold-var_630))"
" fold-var_627))"
" fold-var_627))))"
" for-loop_626)"
"(void)"
" lst_625)))"
"(if(=(hash-count found_623)(length except-ids_614))"
"(void)"
"(let-values()"
"(let-values(((lst_661) except-ids_614))"
"(begin"
"(if(list? lst_661)(void)(let-values()(in-list lst_661)))"
"((letrec-values(((for-loop_662)"
"(lambda(fold-var_663 lst_664)"
"(if(pair? lst_664)"
"(let-values(((except-id_665)(unsafe-car lst_664)))"
"(if #t"
"(let-values(((fold-var_666)"
"(let-values(((fold-var_667) fold-var_663))"
"(let-values(((fold-var_668)"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_669)"
"(hash-ref"
" found_623"
" except-id_665"
" #f)))"
"(if or-part_669"
" or-part_669"
"(let-values(((lst_670)"
" requireds_620))"
"(begin"
"(if(list? lst_670)"
"(void)"
"(let-values()"
"(in-list"
" lst_670)))"
"((letrec-values(((for-loop_671)"
"(lambda(result_672"
" lst_673)"
"(if(pair?"
" lst_673)"
"(let-values(((i_674)"
"(unsafe-car"
" lst_673)))"
"(if #t"
"(let-values(((result_675)"
"(let-values(((result_676)"
" result_672))"
"(let-values(((result_677)"
"(let-values()"
"(let-values()"
"(let-values(((id_678)"
"(required-id"
" i_674)))"
"(let-values(((phase_679)"
"(required-phase"
" i_674)))"
"(free-identifier=?$1"
" id_678"
" except-id_665"
" phase_679"
" phase_679)))))))"
"(values"
" result_677)))))"
"(if(if #t"
"(not"
"((lambda x_680"
" result_675)"
" i_674))"
" #f)"
"(for-loop_671"
" result_675"
"(unsafe-cdr"
" lst_673))"
" result_675))"
" result_672))"
" result_672))))"
" for-loop_671)"
" #f"
" lst_670)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_612"
"                                                                                              \"excluded identifier was not defined or required in the module~a\""
"                                                                                              \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_621))"
" orig-s_613"
" except-id_665))))"
"(void)))))"
"(values fold-var_668)))))"
"(if #t"
"(for-loop_662 fold-var_666(unsafe-cdr lst_664))"
" fold-var_666))"
" fold-var_663))"
" fold-var_663))))"
" for-loop_662)"
"(void)"
" lst_661)))))))))))))"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(let-values(((lst_3) bodys_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(fold-var_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((body_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((fold-var_8)"
"(let-values(((fold-var_9) fold-var_5))"
"(let-values(((fold-var_10)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_11)(core-form-sym body_7 0)))"
"(if(equal? tmp_11 'begin)"
"(let-values()"
"(let-values(((ok?_12 begin1_13 e2_14)"
"(let-values(((s_25) body_7))"
"(if(if #t #t #f)"
"(let-values(((orig-s_26)"
" s_25))"
"(let-values(((begin1_27"
" e2_28)"
"(let-values(((s_29)"
"(if(syntax?$1"
" s_25)"
"(syntax-e$1"
" s_25)"
" s_25)))"
"(if(pair?"
" s_29)"
"(let-values(((begin3_30)"
"(let-values(((s_32)"
"(car"
" s_29)))"
" s_32))"
"((e4_31)"
"(let-values(((s_33)"
"(cdr"
" s_29)))"
"(let-values(((s_34)"
"(if(syntax?$1"
" s_33)"
"(syntax-e$1"
" s_33)"
" s_33)))"
"(let-values(((flat-s_35)"
"(to-syntax-list.1"
" s_34)))"
"(if(not"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_26))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_26))"
"(let-values()"
" flat-s_35))))))))"
"(values"
" begin3_30"
" e4_31))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_26)))))"
"(values"
" #t"
" begin1_27"
" e2_28)))"
"(values #f #f #f)))))"
"(check-body e2_14)))"
"(if(if(equal? tmp_11 '#%declare)"
" #t"
"(if(equal? tmp_11 '#%provide)"
" #t"
"(if(equal? tmp_11 '#%require)"
" #t"
"(if(equal? tmp_11 'module)"
" #t"
"(equal? tmp_11 'module*)))))"
"(let-values()(void))"
"(if(equal? tmp_11 'define-values)"
"(let-values()"
"(let-values(((ok?_36"
" define-values5_37"
" id6_38"
" rhs7_39)"
"(let-values(((s_52)"
" body_7))"
"(if(if #t #t #f)"
"(let-values(((orig-s_53)"
" s_52))"
"(let-values(((define-values5_54"
" id6_55"
" rhs7_56)"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_52)"
"(syntax-e$1"
" s_52)"
" s_52)))"
"(if(pair?"
" s_57)"
"(let-values(((define-values8_58)"
"(let-values(((s_61)"
"(car"
" s_57)))"
" s_61))"
"((id9_59"
" rhs10_60)"
"(let-values(((s_62)"
"(cdr"
" s_57)))"
"(let-values(((s_63)"
"(if(syntax?$1"
" s_62)"
"(syntax-e$1"
" s_62)"
" s_62)))"
"(if(pair?"
" s_63)"
"(let-values(((id11_64)"
"(let-values(((s_66)"
"(car"
" s_63)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(let-values(((flat-s_68)"
"(to-syntax-list.1"
" s_67)))"
"(if(not"
" flat-s_68)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_53))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_53))"
"(let-values()"
"(let-values(((id_69)"
"(let-values(((lst_70)"
" flat-s_68))"
"(begin"
"(if(list?"
" lst_70)"
"(void)"
"(let-values()"
"(in-list"
" lst_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(id_72"
" lst_73)"
"(if(pair?"
" lst_73)"
"(let-values(((s_74)"
"(unsafe-car"
" lst_73)))"
"(if #t"
"(let-values(((id_75)"
"(let-values(((id_76)"
" id_72))"
"(let-values(((id_77)"
"(let-values()"
"(let-values(((id14_78)"
"(let-values()"
"(if(let-values(((or-part_79)"
"(if(syntax?$1"
" s_74)"
"(symbol?"
"(syntax-e$1"
" s_74))"
" #f)))"
"(if or-part_79"
" or-part_79"
"(symbol?"
" s_74)))"
" s_74"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_53"
" s_74)))))"
"(cons"
" id14_78"
" id_76)))))"
"(values"
" id_77)))))"
"(if #t"
"(for-loop_71"
" id_75"
"(unsafe-cdr"
" lst_73))"
" id_75))"
" id_72))"
" id_72))))"
" for-loop_71)"
" null"
" lst_70)))))"
"(alt-reverse"
" id_69)))))))))"
"((rhs12_65)"
"(let-values(((s_80)"
"(cdr"
" s_63)))"
"(let-values(((s_81)"
"(if(syntax?$1"
" s_80)"
"(syntax-e$1"
" s_80)"
" s_80)))"
"(if(pair?"
" s_81)"
"(let-values(((rhs13_82)"
"(let-values(((s_83)"
"(car"
" s_81)))"
" s_83))"
"(()"
"(let-values(((s_84)"
"(cdr"
" s_81)))"
"(let-values(((s_85)"
"(if(syntax?$1"
" s_84)"
"(syntax-e$1"
" s_84)"
" s_84)))"
"(if(null?"
" s_85)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_53))))))"
"(values"
" rhs13_82))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_53))))))"
"(values"
" id11_64"
" rhs12_65))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_53))))))"
"(values"
" define-values8_58"
" id9_59"
" rhs10_60))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_53)))))"
"(values"
" #t"
" define-values5_54"
" id6_55"
" rhs7_56)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(check-expr"
" rhs7_39"
"(length id6_38)"
" body_7)))"
"(let-values()(disallow body_7)))))))"
"(void)))))"
"(values fold-var_10)))))"
"(if #t(for-loop_4 fold-var_8(unsafe-cdr lst_6)) fold-var_8))"
" fold-var_5))"
" fold-var_5))))"
" for-loop_4)"
"(void)"
" lst_3)))))"
"(define-values"
"(check-expr)"
"(lambda(e_86 num-results_87 enclosing_88)"
"(let-values(((tmp_89)(core-form-sym e_86 0)))"
"(if(if(equal? tmp_89 'lambda) #t(equal? tmp_89 'case-lambda))"
"(let-values()(check-count 1 num-results_87 enclosing_88))"
"(if(equal? tmp_89 'quote)"
"(let-values()"
"(let-values(((ok?_90 quote15_91 datum16_92)"
"(let-values(((s_103) e_86))"
"(if(if #t #t #f)"
"(let-values(((orig-s_104) s_103))"
"(let-values(((quote15_105 datum16_106)"
"(let-values(((s_107)(if(syntax?$1 s_103)(syntax-e$1 s_103) s_103)))"
"(if(pair? s_107)"
"(let-values(((quote17_108)"
"(let-values(((s_110)(car s_107))) s_110))"
"((datum18_109)"
"(let-values(((s_111)(cdr s_107)))"
"(let-values(((s_112)"
"(if(syntax?$1 s_111)"
"(syntax-e$1 s_111)"
" s_111)))"
"(if(pair? s_112)"
"(let-values(((datum19_113)"
"(let-values(((s_114)(car s_112)))"
" s_114))"
"(()"
"(let-values(((s_115)(cdr s_112)))"
"(let-values(((s_116)"
"(if(syntax?$1"
" s_115)"
"(syntax-e$1 s_115)"
" s_115)))"
"(if(null? s_116)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_104))))))"
"(values datum19_113))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_104))))))"
"(values quote17_108 datum18_109))"
"                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_104)))))"
"(values #t quote15_105 datum16_106)))"
"(values #f #f #f)))))"
"(begin(check-datum datum16_92)(check-count 1 num-results_87 enclosing_88))))"
"(if(equal? tmp_89 '#%app)"
"(let-values()"
"(let-values(((ok?_117 #%app20_118 rator21_119 rand22_120)"
"(let-values(((s_134) e_86))"
"(if(if #t #t #f)"
"(let-values(((orig-s_135) s_134))"
"(let-values(((#%app20_136 rator21_137 rand22_138)"
"(let-values(((s_139)(if(syntax?$1 s_134)(syntax-e$1 s_134) s_134)))"
"(if(pair? s_139)"
"(let-values(((#%app23_140)"
"(let-values(((s_143)(car s_139))) s_143))"
"((rator24_141 rand25_142)"
"(let-values(((s_144)(cdr s_139)))"
"(let-values(((s_145)"
"(if(syntax?$1 s_144)"
"(syntax-e$1 s_144)"
" s_144)))"
"(if(pair? s_145)"
"(let-values(((rator26_146)"
"(let-values(((s_148)"
"(car s_145)))"
" s_148))"
"((rand27_147)"
"(let-values(((s_149)"
"(cdr s_145)))"
"(let-values(((s_150)"
"(if(syntax?$1"
" s_149)"
"(syntax-e$1"
" s_149)"
" s_149)))"
"(let-values(((flat-s_151)"
"(to-syntax-list.1"
" s_150)))"
"(if(not flat-s_151)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_135))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_135))"
"(let-values()"
" flat-s_151))))))))"
"(values rator26_146 rand27_147))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_135))))))"
"(values #%app23_140 rator24_141 rand25_142))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_135)))))"
"(values #t #%app20_136 rator21_137 rand22_138)))"
"(values #f #f #f #f)))))"
"(let-values(((rands_133) rand22_120))"
"(begin"
"(let-values(((lst_152) rands_133))"
"(begin"
"(if(list? lst_152)(void)(let-values()(in-list lst_152)))"
"((letrec-values(((for-loop_153)"
"(lambda(fold-var_154 lst_155)"
"(if(pair? lst_155)"
"(let-values(((rand_156)(unsafe-car lst_155)))"
"(if #t"
"(let-values(((fold-var_157)"
"(let-values(((fold-var_158) fold-var_154))"
"(let-values(((fold-var_159)"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_156 1 e_86))"
"(void)))))"
"(values fold-var_159)))))"
"(if #t"
"(for-loop_153 fold-var_157(unsafe-cdr lst_155))"
" fold-var_157))"
" fold-var_154))"
" fold-var_154))))"
" for-loop_153)"
"(void)"
" lst_152)))"
"(let-values(((tmp_160)(cross-phase-primitive-name rator21_119)))"
"(if(if(equal? tmp_160 'cons) #t(equal? tmp_160 'list))"
"(let-values()(check-count 1 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'make-struct-type)"
"(let-values()(check-count 5 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'gensym)"
"(let-values()"
"(if(let-values(((or-part_161)(= 0(length rands_133))))"
"(if or-part_161"
" or-part_161"
"(if(= 1(length rands_133))(quoted-string?(car rands_133)) #f)))"
"(void)"
"(let-values()(disallow e_86))))"
"(if(equal? tmp_160 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_133))(quoted-string?(car rands_133)) #f)"
"(void)"
"(let-values()(disallow e_86))))"
"(let-values()(disallow e_86))))))))))))"
"(let-values()(void))))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_162 expected-num_163 enclosing_164)"
"(if(= is-num_162 expected-num_163)(void)(let-values()(disallow enclosing_164)))))"
"(define-values"
"(check-datum)"
"(lambda(datum_165)"
"(let-values(((d_166)(syntax-e$1 datum_165)))"
"(if(let-values(((or-part_167)(number? d_166)))"
"(if or-part_167"
" or-part_167"
"(let-values(((or-part_168)(boolean? d_166)))"
"(if or-part_168"
" or-part_168"
"(let-values(((or-part_169)(symbol? d_166)))"
"(if or-part_169"
" or-part_169"
"(let-values(((or-part_170)(string? d_166)))(if or-part_170 or-part_170(bytes? d_166)))))))))"
"(let-values()(void))"
"(let-values()(disallow datum_165))))))"
"(define-values"
"(quoted-string?)"
"(lambda(e_171)"
"(if(eq? 'quote(core-form-sym e_171 0))"
"(let-values()"
"(let-values(((ok?_172 quote28_173 datum29_174)"
"(let-values(((s_185) e_171))"
"(if(if #t #t #f)"
"(let-values(((orig-s_186) s_185))"
"(let-values(((quote28_187 datum29_188)"
"(let-values(((s_189)(if(syntax?$1 s_185)(syntax-e$1 s_185) s_185)))"
"(if(pair? s_189)"
"(let-values(((quote30_190)(let-values(((s_192)(car s_189))) s_192))"
"((datum31_191)"
"(let-values(((s_193)(cdr s_189)))"
"(let-values(((s_194)"
"(if(syntax?$1 s_193)"
"(syntax-e$1 s_193)"
" s_193)))"
"(if(pair? s_194)"
"(let-values(((datum32_195)"
"(let-values(((s_196)(car s_194)))"
" s_196))"
"(()"
"(let-values(((s_197)(cdr s_194)))"
"(let-values(((s_198)"
"(if(syntax?$1 s_197)"
"(syntax-e$1 s_197)"
" s_197)))"
"(if(null? s_198)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_186))))))"
"(values datum32_195))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_186))))))"
"(values quote30_190 datum31_191))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_186)))))"
"(values #t quote28_187 datum29_188)))"
"(values #f #f #f)))))"
"(string?(syntax-e$1 datum29_174))))"
" #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_199)"
"(let-values(((b_200)"
"(let-values(((id33_201) id_199)((temp34_202) 0))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f id33_201 temp34_202)"
"(resolve+shift15.1 id33_201 temp34_202)))))"
"(if(module-binding? b_200)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_200)))"
"(module-binding-sym b_200)"
" #f)"
" #f))))"
" (define-values (disallow) (lambda (body_203) (error \"not allowed in a cross-phase persistent module:\" body_203)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_11 ctx_12)"
"(begin"
"(if(eq?(expand-context-context ctx_12) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_13)(expand-context-observer ctx_12)))"
"(if obs_13"
"(let-values()(if #t(let-values()(call-expand-observe obs_13 'prim-module))(void)))"
"(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_11))))"
"(let-values(((s203_14) s_11)((ctx204_15) ctx_12)((temp205_16) #f))"
"(if(variable-reference-constant?(#%variable-reference expand-module16.1))"
"(expand-module14.1 #f #f #f #f #f #f #f #f #f #f s203_14 ctx204_15 temp205_16)"
"(expand-module16.1 s203_14 ctx204_15 temp205_16)))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_17 ctx_18)"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_18)))"
"(if obs_19(let-values()(if #t(let-values()(call-expand-observe obs_19 'prim-module))(void)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_17)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_20 ctx_21)"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_21)))"
"(if obs_22"
"(let-values()(if #t(let-values()(call-expand-observe obs_22 'prim-module-begin))(void)))"
"(void)))"
"(if(eq?(expand-context-context ctx_21) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_20)))"
"(if(expand-context-module-begin-k ctx_21)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_20)))"
"((expand-context-module-begin-k ctx_21)"
" s_20"
"(let-values(((the-struct_23) ctx_21))"
"(if(expand-context? the-struct_23)"
"(let-values(((module-begin-k206_24) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_23)"
"(root-expand-context-post-expansion-scope the-struct_23)"
"(root-expand-context-top-level-bind-scope the-struct_23)"
"(root-expand-context-all-scopes-stx the-struct_23)"
"(root-expand-context-use-site-scopes the-struct_23)"
"(root-expand-context-defined-syms the-struct_23)"
"(root-expand-context-frame-id the-struct_23)"
"(root-expand-context-counter the-struct_23)"
"(root-expand-context-lift-key the-struct_23)"
"(expand-context-context the-struct_23)"
"(expand-context-phase the-struct_23)"
"(expand-context-namespace the-struct_23)"
"(expand-context-env the-struct_23)"
"(expand-context-user-env the-struct_23)"
"(expand-context-post-expansion-scope-action the-struct_23)"
"(expand-context-scopes the-struct_23)"
"(expand-context-def-ctx-scopes the-struct_23)"
"(expand-context-reference-records the-struct_23)"
"(expand-context-only-immediate? the-struct_23)"
"(expand-context-just-once? the-struct_23)"
" module-begin-k206_24"
"(expand-context-need-eventually-defined the-struct_23)"
"(expand-context-allow-unbound? the-struct_23)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_23)"
"(expand-context-stops the-struct_23)"
"(expand-context-current-introduction-scopes the-struct_23)"
"(expand-context-declared-submodule-names the-struct_23)"
"(expand-context-lifts the-struct_23)"
"(expand-context-lift-envs the-struct_23)"
"(expand-context-module-lifts the-struct_23)"
"(expand-context-require-lifts the-struct_23)"
"(expand-context-to-module-lifts the-struct_23)"
"(expand-context-requires+provides the-struct_23)"
"(expand-context-name the-struct_23)"
"(expand-context-observer the-struct_23)))"
"              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_23))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_25 ctx_26)"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_26)))"
"(if obs_27(let-values()(if #t(let-values()(call-expand-observe obs_27 'prim-declare))(void)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_25)))))"
" print-values)"
"(define-values"
"(expand-module14.1)"
"(lambda(enclosing-all-scopes-stx2_28"
" enclosing-all-scopes-stx7_29"
" enclosing-is-cross-phase-persistent?3_30"
" enclosing-is-cross-phase-persistent?8_31"
" enclosing-requires+provides4_32"
" enclosing-requires+provides9_33"
" keep-enclosing-scope-at-phase1_34"
" keep-enclosing-scope-at-phase6_35"
" mpis-for-enclosing-reset5_36"
" mpis-for-enclosing-reset10_37"
" s11_38"
" init-ctx12_39"
" enclosing-self13_40)"
"(let-values(((s_41) s11_38))"
"(let-values(((init-ctx_42) init-ctx12_39))"
"(let-values(((enclosing-self_43) enclosing-self13_40))"
"(let-values(((keep-enclosing-scope-at-phase_44)"
"(if keep-enclosing-scope-at-phase6_35 keep-enclosing-scope-at-phase1_34 #f)))"
"(let-values(((enclosing-all-scopes-stx_45)"
"(if enclosing-all-scopes-stx7_29 enclosing-all-scopes-stx2_28 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_46)"
"(if enclosing-is-cross-phase-persistent?8_31 enclosing-is-cross-phase-persistent?3_30 #f)))"
"(let-values(((enclosing-r+p_47)"
"(if enclosing-requires+provides9_33 enclosing-requires+provides4_32 #f)))"
"(let-values(((mpis-for-enclosing-reset_48)"
"(if mpis-for-enclosing-reset10_37 mpis-for-enclosing-reset5_36 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_96)(expand-context-observer init-ctx_42)))"
"(if obs_96"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_96 'prim-module))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_49)(syntax-disarm$1 s_41)))"
"(let-values(((ok?_50 module207_51 id:module-name208_52 initial-require209_53 body210_54)"
"(let-values(((s_97) disarmed-s_49))"
"(if(if #t #t #f)"
"(let-values(((orig-s_98) s_97))"
"(let-values(((module207_99"
" id:module-name208_100"
" initial-require209_101"
" body210_102)"
"(let-values(((s_103)"
"(if(syntax?$1 s_97)(syntax-e$1 s_97) s_97)))"
"(if(pair? s_103)"
"(let-values(((module211_104)"
"(let-values(((s_108)(car s_103)))"
" s_108))"
"((id:module-name212_105"
" initial-require213_106"
" body214_107)"
"(let-values(((s_109)(cdr s_103)))"
"(let-values(((s_110)"
"(if(syntax?$1 s_109)"
"(syntax-e$1 s_109)"
" s_109)))"
"(if(pair? s_110)"
"(let-values(((id:module-name215_111)"
"(let-values(((s_114)"
"(car"
" s_110)))"
"(if(let-values(((or-part_115)"
"(if(syntax?$1"
" s_114)"
"(symbol?"
"(syntax-e$1"
" s_114))"
" #f)))"
"(if or-part_115"
" or-part_115"
"(symbol?"
" s_114)))"
" s_114"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"not an identifier\""
" orig-s_98"
" s_114))))"
"((initial-require216_112"
" body217_113)"
"(let-values(((s_116)"
"(cdr"
" s_110)))"
"(let-values(((s_117)"
"(if(syntax?$1"
" s_116)"
"(syntax-e$1"
" s_116)"
" s_116)))"
"(if(pair? s_117)"
"(let-values(((initial-require218_118)"
"(let-values(((s_120)"
"(car"
" s_117)))"
" s_120))"
"((body219_119)"
"(let-values(((s_121)"
"(cdr"
" s_117)))"
"(let-values(((s_122)"
"(if(syntax?$1"
" s_121)"
"(syntax-e$1"
" s_121)"
" s_121)))"
"(let-values(((flat-s_123)"
"(to-syntax-list.1"
" s_122)))"
"(if(not"
" flat-s_123)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_98))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_98))"
"(let-values()"
" flat-s_123))))))))"
"(values"
" initial-require218_118"
" body219_119))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_98))))))"
"(values"
" id:module-name215_111"
" initial-require216_112"
" body217_113))"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_98))))))"
"(values"
" module211_104"
" id:module-name212_105"
" initial-require213_106"
" body214_107))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_98)))))"
"(values"
" #t"
" module207_99"
" id:module-name208_100"
" initial-require209_101"
" body210_102)))"
"(values #f #f #f #f #f)))))"
"(let-values(((initial-require_69)(syntax->datum$1 initial-require209_53)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_124) keep-enclosing-scope-at-phase_44))"
"(if or-part_124 or-part_124(1/module-path? initial-require_69)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                   \"not a module path\""
" s_41"
" initial-require209_53)))"
"(values))))"
"(let-values(((phase_70) 0))"
"(let-values(((module-name-sym_71)(syntax-e$1 id:module-name208_52)))"
"(let-values(((outside-scope_72)(new-scope 'module)))"
"(let-values(((inside-scope_73)(new-multi-scope module-name-sym_71)))"
"(let-values(((self_74)"
"(make-self-module-path-index"
"(if enclosing-self_43"
" module-name-sym_71"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_71)))"
" enclosing-self_43)))"
"(let-values(((enclosing-mod_75)"
"(if enclosing-self_43"
"                                                          (1/module-path-index-join '(submod \"..\") self_74)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_75 mpis-for-enclosing-reset_48 #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_48"
"(cons"
" enclosing-mod_75"
"(unbox mpis-for-enclosing-reset_48))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_76)"
"(make-apply-module-scopes"
" outside-scope_72"
" inside-scope_73"
" init-ctx_42"
" keep-enclosing-scope-at-phase_44"
" self_74"
" enclosing-self_43"
" enclosing-mod_75)))"
"(let-values(((all-scopes-s_77)"
"(apply-module-scopes_76"
"(if enclosing-all-scopes-stx_45"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_45"
" keep-enclosing-scope-at-phase_44)"
" initial-require209_53))))"
"(let-values(((initial-require-s_78)"
"(apply-module-scopes_76 initial-require209_53)))"
"(let-values(((root-ctx_79)"
"(let-values(((...er/expand/module.rkt:122:20_125)"
" make-root-expand-context12.1)"
"((temp220_126)"
"(if keep-enclosing-scope-at-phase_44"
"(root-expand-context-module-scopes"
" init-ctx_42)"
" null))"
"((outside-scope221_127) outside-scope_72)"
"((inside-scope222_128) inside-scope_73)"
"((all-scopes-s223_129) all-scopes-s_77))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-root-expand-context12.1))"
"(make-root-expand-context10.1"
" all-scopes-s223_129"
" #t"
" temp220_126"
" #t"
" outside-scope221_127"
" #t"
" inside-scope222_128"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:122:20_125"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
" 2)"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
"(list"
" all-scopes-s223_129"
" temp220_126"
" outside-scope221_127"
" inside-scope222_128))))))"
"(let-values(((new-module-scopes_80)"
"(root-expand-context-module-scopes root-ctx_79)))"
"(let-values(((frame-id_81)"
"(root-expand-context-frame-id root-ctx_79)))"
"(let-values(((m-ns_82)"
"(let-values(((...er/expand/module.rkt:137:16_130)"
" make-module-namespace47.1)"
"((temp224_131)"
"(expand-context-namespace"
" init-ctx_42))"
"((self225_132) self_74)"
"((root-ctx226_133) root-ctx_79)"
"((temp227_134)"
"(if enclosing-self_43 #t #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-namespace47.1))"
"(make-module-namespace45.1"
" temp227_134"
" self225_132"
" root-ctx226_133"
" temp224_131)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:137:16_130"
" keyword-procedure-extract"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
" 3)"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
"(list"
" temp227_134"
" self225_132"
" root-ctx226_133)"
" temp224_131)))))"
"(let-values(((ctx_83)"
"(let-values(((the-struct_135)"
"(copy-root-expand-context"
" init-ctx_42"
" root-ctx_79)))"
"(if(expand-context? the-struct_135)"
"(let-values(((allow-unbound?228_136) #f)"
"((namespace229_137) m-ns_82)"
"((post-expansion-scope-action230_138)"
" add-scope)"
"((phase231_139) phase_70)"
"((just-once?232_140) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_135)"
"(root-expand-context-post-expansion-scope"
" the-struct_135)"
"(root-expand-context-top-level-bind-scope"
" the-struct_135)"
"(root-expand-context-all-scopes-stx"
" the-struct_135)"
"(root-expand-context-use-site-scopes"
" the-struct_135)"
"(root-expand-context-defined-syms"
" the-struct_135)"
"(root-expand-context-frame-id"
" the-struct_135)"
"(root-expand-context-counter"
" the-struct_135)"
"(root-expand-context-lift-key"
" the-struct_135)"
"(expand-context-context the-struct_135)"
" phase231_139"
" namespace229_137"
"(expand-context-env the-struct_135)"
"(expand-context-user-env"
" the-struct_135)"
" post-expansion-scope-action230_138"
"(expand-context-scopes the-struct_135)"
"(expand-context-def-ctx-scopes"
" the-struct_135)"
"(expand-context-reference-records"
" the-struct_135)"
"(expand-context-only-immediate?"
" the-struct_135)"
" just-once?232_140"
"(expand-context-module-begin-k"
" the-struct_135)"
"(expand-context-need-eventually-defined"
" the-struct_135)"
" allow-unbound?228_136"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_135)"
"(expand-context-stops the-struct_135)"
"(expand-context-current-introduction-scopes"
" the-struct_135)"
"(expand-context-declared-submodule-names"
" the-struct_135)"
"(expand-context-lifts the-struct_135)"
"(expand-context-lift-envs"
" the-struct_135)"
"(expand-context-module-lifts"
" the-struct_135)"
"(expand-context-require-lifts"
" the-struct_135)"
"(expand-context-to-module-lifts"
" the-struct_135)"
"(expand-context-requires+provides"
" the-struct_135)"
"(expand-context-name the-struct_135)"
"(expand-context-observer"
" the-struct_135)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                               \"expand-context?\""
" the-struct_135)))))"
"(let-values(((bodys_84)"
"(map2 apply-module-scopes_76 body210_54)))"
"(let-values(((requires+provides_85)"
"(make-requires+provides self_74)))"
"(let-values(((defined-syms_86)"
"(root-expand-context-defined-syms"
" root-ctx_79)))"
"(let-values(((mpis-to-reset_87)(box null)))"
"(let-values(((initial-require!_88)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_44)"
"(let-values()"
"(perform-initial-require!"
" initial-require_69"
" self_74"
" all-scopes-s_77"
" m-ns_82"
" requires+provides_85))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_85"
" enclosing-mod_75"
" keep-enclosing-scope-at-phase_44"
" enclosing-is-cross-phase-persistent?_46)"
"(let-values(((...er/expand/module.rkt:178:7_141)"
" add-enclosing-module-defined-and-required!35.1)"
"((requires+provides233_142)"
" requires+provides_85)"
"((enclosing-r+p234_143)"
" enclosing-r+p_47)"
"((enclosing-mod235_144)"
" enclosing-mod_75)"
"((keep-enclosing-scope-at-phase236_145)"
" keep-enclosing-scope-at-phase_44))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-enclosing-module-defined-and-required!35.1))"
"(add-enclosing-module-defined-and-required!33.1"
" enclosing-r+p234_143"
" requires+provides233_142"
" enclosing-mod235_144"
" keep-enclosing-scope-at-phase236_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:178:7_141"
" keyword-procedure-extract"
" '(#:enclosing-requires+provides)"
" 5)"
" '(#:enclosing-requires+provides)"
"(list"
" enclosing-r+p234_143)"
" requires+provides233_142"
" enclosing-mod235_144"
" keep-enclosing-scope-at-phase236_145)))"
"(let-values(((m-ns237_146)"
" m-ns_82)"
"((enclosing-mod238_147)"
" enclosing-mod_75)"
"((keep-enclosing-scope-at-phase239_148)"
" keep-enclosing-scope-at-phase_44))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!103.1))"
"(namespace-module-visit!101.1"
" #f"
" #f"
" m-ns237_146"
" enclosing-mod238_147"
" keep-enclosing-scope-at-phase239_148)"
"(namespace-module-visit!103.1"
" m-ns237_146"
" enclosing-mod238_147"
" keep-enclosing-scope-at-phase239_148)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_149)"
"(expand-context-observer"
" init-ctx_42)))"
"(if obs_149"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_149"
" 'prepare-env))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_88)"
"(values))))"
"(let-values(((again?_89) #f))"
"(let-values(((module-begin-k_90)"
"(lambda(mb-s_150 ctx_151)"
"(let-values((()"
"(begin"
"(if again?_89"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_85)"
"(initial-require!_88)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_89"
" #t)"
"(values))))"
"(let-values(((added-s_152)"
"(add-scope"
" mb-s_150"
" inside-scope_73)))"
"(let-values((()"
"(begin"
"(let-values(((obs_178)"
"(expand-context-observer"
" ctx_151)))"
"(if obs_178"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_178"
" 'rename-one"
" added-s_152))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_153)"
"(syntax-disarm$1"
" added-s_152)))"
"(let-values(((ok?_154"
" #%module-begin240_155"
" body241_156)"
"(let-values(((s_179)"
" disarmed-mb-s_153))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_180)"
" s_179))"
"(let-values(((#%module-begin240_181"
" body241_182)"
"(let-values(((s_183)"
"(if(syntax?$1"
" s_179)"
"(syntax-e$1"
" s_179)"
" s_179)))"
"(if(pair?"
" s_183)"
"(let-values(((#%module-begin242_184)"
"(let-values(((s_186)"
"(car"
" s_183)))"
" s_186))"
"((body243_185)"
"(let-values(((s_187)"
"(cdr"
" s_183)))"
"(let-values(((s_188)"
"(if(syntax?$1"
" s_187)"
"(syntax-e$1"
" s_187)"
" s_187)))"
"(let-values(((flat-s_189)"
"(to-syntax-list.1"
" s_188)))"
"(if(not"
" flat-s_189)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_180))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_180))"
"(let-values()"
" flat-s_189))))))))"
"(values"
" #%module-begin242_184"
" body243_185))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_180)))))"
"(values"
" #t"
" #%module-begin240_181"
" body241_182)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((bodys_167)"
" body241_156))"
"(let-values(((need-eventually-defined_168)"
"(make-hasheqv)))"
"(let-values(((module-ends_169)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_170)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_171)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_172)"
"((letrec-values(((pass-1-and-2-loop_190)"
"(lambda(bodys_191"
" phase_192)"
"(let-values(((def-ctx-scopes_193)"
"(box"
" null)))"
"(let-values(((partial-body-ctx_194)"
"(let-values(((the-struct_197)"
" ctx_151))"
"(if(expand-context?"
" the-struct_197)"
"(let-values(((context254_198)"
" 'module)"
"((phase255_199)"
" phase_192)"
"((namespace256_200)"
"(namespace->namespace-at-phase"
" m-ns_82"
" phase_192))"
"((only-immediate?257_201)"
" #t)"
"((def-ctx-scopes258_202)"
" def-ctx-scopes_193)"
"((need-eventually-defined259_203)"
" need-eventually-defined_168)"
"((declared-submodule-names260_204)"
" declared-submodule-names_171)"
"((lifts261_205)"
"(let-values(((temp265_209)"
"(make-wrap-as-definition"
" self_74"
" frame-id_81"
" inside-scope_73"
" all-scopes-s_77"
" defined-syms_86"
" requires+provides_85)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-lift-context8.1))"
"(make-lift-context6.1"
" #f"
" #f"
" temp265_209)"
"(make-lift-context8.1"
" temp265_209))))"
"((module-lifts262_206)"
"(make-module-lift-context"
" phase_192"
" #t))"
"((require-lifts263_207)"
"(make-require-lift-context"
" phase_192"
"(let-values(((...er/expand/module.rkt:256:63_210)"
" make-parse-lifted-require202.1)"
"((m-ns266_211)"
" m-ns_82)"
"((self267_212)"
" self_74)"
"((requires+provides268_213)"
" requires+provides_85)"
"((declared-submodule-names269_214)"
" declared-submodule-names_171))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-parse-lifted-require202.1))"
"(make-parse-lifted-require200.1"
" declared-submodule-names269_214"
" m-ns266_211"
" self267_212"
" requires+provides268_213)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:256:63_210"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 5)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names269_214)"
" m-ns266_211"
" self267_212"
" requires+provides268_213)))))"
"((to-module-lifts264_208)"
"(let-values(((...er/expand/module.rkt:258:64_215)"
" make-to-module-lift-context28.1)"
"((phase270_216)"
" phase_192)"
"((module-ends271_217)"
" module-ends_169)"
"((temp272_218)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp272_218"
" module-ends271_217"
" phase270_216)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:258:64_215"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp272_218"
" module-ends271_217)"
" phase270_216)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_197)"
"(root-expand-context-post-expansion-scope"
" the-struct_197)"
"(root-expand-context-top-level-bind-scope"
" the-struct_197)"
"(root-expand-context-all-scopes-stx"
" the-struct_197)"
"(root-expand-context-use-site-scopes"
" the-struct_197)"
"(root-expand-context-defined-syms"
" the-struct_197)"
"(root-expand-context-frame-id"
" the-struct_197)"
"(root-expand-context-counter"
" the-struct_197)"
"(root-expand-context-lift-key"
" the-struct_197)"
" context254_198"
" phase255_199"
" namespace256_200"
"(expand-context-env"
" the-struct_197)"
"(expand-context-user-env"
" the-struct_197)"
"(expand-context-post-expansion-scope-action"
" the-struct_197)"
"(expand-context-scopes"
" the-struct_197)"
" def-ctx-scopes258_202"
"(expand-context-reference-records"
" the-struct_197)"
" only-immediate?257_201"
"(expand-context-just-once?"
" the-struct_197)"
"(expand-context-module-begin-k"
" the-struct_197)"
" need-eventually-defined259_203"
"(expand-context-allow-unbound?"
" the-struct_197)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_197)"
"(expand-context-stops"
" the-struct_197)"
"(expand-context-current-introduction-scopes"
" the-struct_197)"
" declared-submodule-names260_204"
" lifts261_205"
"(expand-context-lift-envs"
" the-struct_197)"
" module-lifts262_206"
" require-lifts263_207"
" to-module-lifts264_208"
"(expand-context-requires+provides"
" the-struct_197)"
"(expand-context-name"
" the-struct_197)"
"(expand-context-observer"
" the-struct_197)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                           \"expand-context?\""
" the-struct_197)))))"
"(let-values(((partially-expanded-bodys_195)"
"(let-values(((...er/expand/module.rkt:264:11_219)"
" partially-expand-bodys77.1)"
"((bodys273_220)"
" bodys_191)"
"((s274_221)"
" s_41)"
"((temp275_222)"
"(zero?"
" phase_192))"
"((phase276_223)"
" phase_192)"
"((partial-body-ctx277_224)"
" partial-body-ctx_194)"
"((m-ns278_225)"
" m-ns_82)"
"((self279_226)"
" self_74)"
"((frame-id280_227)"
" frame-id_81)"
"((requires+provides281_228)"
" requires+provides_85)"
"((need-eventually-defined282_229)"
" need-eventually-defined_168)"
"((all-scopes-s283_230)"
" all-scopes-s_77)"
"((defined-syms284_231)"
" defined-syms_86)"
"((declared-keywords285_232)"
" declared-keywords_170)"
"((declared-submodule-names286_233)"
" declared-submodule-names_171)"
"((mpis-to-reset287_234)"
" mpis-to-reset_87)"
"((pass-1-and-2-loop288_235)"
" pass-1-and-2-loop_190))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" partially-expand-bodys77.1))"
"(partially-expand-bodys75.1"
" all-scopes-s283_230"
" partial-body-ctx277_224"
" declared-keywords285_232"
" declared-submodule-names286_233"
" defined-syms284_231"
" frame-id280_227"
" pass-1-and-2-loop288_235"
" mpis-to-reset287_234"
" m-ns278_225"
" need-eventually-defined282_229"
" s274_221"
" phase276_223"
" requires+provides281_228"
" self279_226"
" temp275_222"
" bodys273_220)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:264:11_219"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" 3)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
"(list"
" all-scopes-s283_230"
" partial-body-ctx277_224"
" declared-keywords285_232"
" declared-submodule-names286_233"
" defined-syms284_231"
" frame-id280_227"
" pass-1-and-2-loop288_235"
" mpis-to-reset287_234"
" m-ns278_225"
" need-eventually-defined282_229"
" s274_221"
" phase276_223"
" requires+provides281_228"
" self279_226"
" temp275_222)"
" bodys273_220)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_236)"
"(expand-context-observer"
" partial-body-ctx_194)))"
"(if obs_236"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_236"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_196)"
"(let-values(((the-struct_237)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_194"
" def-ctx-scopes_193)))"
"(if(expand-context?"
" the-struct_237)"
"(let-values(((only-immediate?289_238)"
" #f)"
"((def-ctx-scopes290_239)"
" #f)"
"((frame-id291_240)"
" #f)"
"((post-expansion-scope292_241)"
" #f)"
"((to-module-lifts293_242)"
"(let-values(((...er/expand/module.rkt:291:56_243)"
" make-to-module-lift-context28.1)"
"((phase294_244)"
" phase_192)"
"((module-ends295_245)"
" module-ends_169)"
"((temp296_246)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp296_246"
" module-ends295_245"
" phase294_244)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:291:56_243"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp296_246"
" module-ends295_245)"
" phase294_244)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_237)"
" post-expansion-scope292_241"
"(root-expand-context-top-level-bind-scope"
" the-struct_237)"
"(root-expand-context-all-scopes-stx"
" the-struct_237)"
"(root-expand-context-use-site-scopes"
" the-struct_237)"
"(root-expand-context-defined-syms"
" the-struct_237)"
" frame-id291_240"
"(root-expand-context-counter"
" the-struct_237)"
"(root-expand-context-lift-key"
" the-struct_237)"
"(expand-context-context"
" the-struct_237)"
"(expand-context-phase"
" the-struct_237)"
"(expand-context-namespace"
" the-struct_237)"
"(expand-context-env"
" the-struct_237)"
"(expand-context-user-env"
" the-struct_237)"
"(expand-context-post-expansion-scope-action"
" the-struct_237)"
"(expand-context-scopes"
" the-struct_237)"
" def-ctx-scopes290_239"
"(expand-context-reference-records"
" the-struct_237)"
" only-immediate?289_238"
"(expand-context-just-once?"
" the-struct_237)"
"(expand-context-module-begin-k"
" the-struct_237)"
"(expand-context-need-eventually-defined"
" the-struct_237)"
"(expand-context-allow-unbound?"
" the-struct_237)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_237)"
"(expand-context-stops"
" the-struct_237)"
"(expand-context-current-introduction-scopes"
" the-struct_237)"
"(expand-context-declared-submodule-names"
" the-struct_237)"
"(expand-context-lifts"
" the-struct_237)"
"(expand-context-lift-envs"
" the-struct_237)"
"(expand-context-module-lifts"
" the-struct_237)"
"(expand-context-require-lifts"
" the-struct_237)"
" to-module-lifts293_242"
"(expand-context-requires+provides"
" the-struct_237)"
"(expand-context-name"
" the-struct_237)"
"(expand-context-observer"
" the-struct_237)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                 \"expand-context?\""
" the-struct_237)))))"
"(let-values(((...er/expand/module.rkt:295:9_247)"
" finish-expanding-body-expressons93.1)"
"((partially-expanded-bodys247_248)"
" partially-expanded-bodys_195)"
"((temp248_249)"
"(zero?"
" phase_192))"
"((phase249_250)"
" phase_192)"
"((body-ctx250_251)"
" body-ctx_196)"
"((self251_252)"
" self_74)"
"((declared-submodule-names252_253)"
" declared-submodule-names_171)"
"((mpis-to-reset253_254)"
" mpis-to-reset_87))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body-expressons93.1))"
"(finish-expanding-body-expressons91.1"
" body-ctx250_251"
" declared-submodule-names252_253"
" mpis-to-reset253_254"
" phase249_250"
" self251_252"
" temp248_249"
" partially-expanded-bodys247_248)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:295:9_247"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
"(list"
" body-ctx250_251"
" declared-submodule-names252_253"
" mpis-to-reset253_254"
" phase249_250"
" self251_252"
" temp248_249)"
" partially-expanded-bodys247_248)))))))))))"
" pass-1-and-2-loop_190)"
" bodys_167"
" phase_70)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_168"
" self_74)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_255)"
"(expand-context-observer"
" ctx_151)))"
"(if obs_255"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_255"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_173)"
"(let-values(((...er/expand/module.rkt:312:7_256)"
" resolve-provides111.1)"
"((expression-expanded-bodys297_257)"
" expression-expanded-bodys_172)"
"((s298_258)"
" s_41)"
"((requires+provides299_259)"
" requires+provides_85)"
"((declared-submodule-names300_260)"
" declared-submodule-names_171)"
"((m-ns301_261)"
" m-ns_82)"
"((phase302_262)"
" phase_70)"
"((self303_263)"
" self_74)"
"((ctx304_264)"
" ctx_151))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve-provides111.1))"
"(resolve-provides109.1"
" ctx304_264"
" declared-submodule-names300_260"
" m-ns301_261"
" s298_258"
" phase302_262"
" requires+provides299_259"
" self303_263"
" expression-expanded-bodys297_257)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:312:7_256"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx304_264"
" declared-submodule-names300_260"
" m-ns301_261"
" s298_258"
" phase302_262"
" requires+provides299_259"
" self303_263)"
" expression-expanded-bodys297_257)))))"
"(let-values(((is-cross-phase-persistent?_174)"
"(hash-ref"
" declared-keywords_170"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_174"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_85)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"cannot be cross-phase persistent due to required modules\""
" s_41"
"(hash-ref"
" declared-keywords_170"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_173)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_265)"
"(expand-context-observer"
" ctx_151)))"
"(if obs_265"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_265"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((submod-ctx_175)"
"(let-values(((the-struct_266)"
" ctx_151))"
"(if(expand-context?"
" the-struct_266)"
"(let-values(((frame-id305_267)"
" #f)"
"((post-expansion-scope306_268)"
" #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_266)"
" post-expansion-scope306_268"
"(root-expand-context-top-level-bind-scope"
" the-struct_266)"
"(root-expand-context-all-scopes-stx"
" the-struct_266)"
"(root-expand-context-use-site-scopes"
" the-struct_266)"
"(root-expand-context-defined-syms"
" the-struct_266)"
" frame-id305_267"
"(root-expand-context-counter"
" the-struct_266)"
"(root-expand-context-lift-key"
" the-struct_266)"
"(expand-context-context"
" the-struct_266)"
"(expand-context-phase"
" the-struct_266)"
"(expand-context-namespace"
" the-struct_266)"
"(expand-context-env"
" the-struct_266)"
"(expand-context-user-env"
" the-struct_266)"
"(expand-context-post-expansion-scope-action"
" the-struct_266)"
"(expand-context-scopes"
" the-struct_266)"
"(expand-context-def-ctx-scopes"
" the-struct_266)"
"(expand-context-reference-records"
" the-struct_266)"
"(expand-context-only-immediate?"
" the-struct_266)"
"(expand-context-just-once?"
" the-struct_266)"
"(expand-context-module-begin-k"
" the-struct_266)"
"(expand-context-need-eventually-defined"
" the-struct_266)"
"(expand-context-allow-unbound?"
" the-struct_266)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_266)"
"(expand-context-stops"
" the-struct_266)"
"(expand-context-current-introduction-scopes"
" the-struct_266)"
"(expand-context-declared-submodule-names"
" the-struct_266)"
"(expand-context-lifts"
" the-struct_266)"
"(expand-context-lift-envs"
" the-struct_266)"
"(expand-context-module-lifts"
" the-struct_266)"
"(expand-context-require-lifts"
" the-struct_266)"
"(expand-context-to-module-lifts"
" the-struct_266)"
"(expand-context-requires+provides"
" the-struct_266)"
"(expand-context-name"
" the-struct_266)"
"(expand-context-observer"
" the-struct_266)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                     \"expand-context?\""
" the-struct_266)))))"
"(let-values(((declare-enclosing-module_176)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:340:14_269)"
" declare-module-for-expansion131.1)"
"((fully-expanded-bodys-except-post-submodules307_270)"
" fully-expanded-bodys-except-post-submodules_173)"
"((temp308_271)"
" id:module-name208_52)"
"((temp309_272)"
" initial-require209_53)"
"((temp310_273)"
" #%module-begin240_155)"
"((requires+provides311_274)"
" requires+provides_85)"
"((m-ns312_275)"
" m-ns_82)"
"((self313_276)"
" self_74)"
"((enclosing-self314_277)"
" enclosing-self_43)"
"((root-ctx315_278)"
" root-ctx_79))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module-for-expansion131.1))"
"(declare-module-for-expansion129.1"
" enclosing-self314_277"
" temp310_273"
" temp309_272"
" temp308_271"
" m-ns312_275"
" requires+provides311_274"
" root-ctx315_278"
" self313_276"
" fully-expanded-bodys-except-post-submodules307_270)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:340:14_269"
" keyword-procedure-extract"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" 3)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
"(list"
" enclosing-self314_277"
" temp310_273"
" temp309_272"
" temp308_271"
" m-ns312_275"
" requires+provides311_274"
" root-ctx315_278"
" self313_276)"
" fully-expanded-bodys-except-post-submodules307_270)))))))"
"(let-values(((fully-expanded-bodys_177)"
"(if(stop-at-module*?"
" ctx_151)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_173)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:355:9_279)"
" expand-post-submodules155.1)"
"((fully-expanded-bodys-except-post-submodules316_280)"
" fully-expanded-bodys-except-post-submodules_173)"
"((declare-enclosing-module317_281)"
" declare-enclosing-module_176)"
"((s318_282)"
" s_41)"
"((phase319_283)"
" phase_70)"
"((self320_284)"
" self_74)"
"((requires+provides321_285)"
" requires+provides_85)"
"((is-cross-phase-persistent?322_286)"
" is-cross-phase-persistent?_174)"
"((all-scopes-s323_287)"
" all-scopes-s_77)"
"((mpis-to-reset324_288)"
" mpis-to-reset_87)"
"((declared-submodule-names325_289)"
" declared-submodule-names_171)"
"((ctx326_290)"
" ctx_151))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-post-submodules155.1))"
"(expand-post-submodules153.1"
" all-scopes-s323_287"
" ctx326_290"
" declare-enclosing-module317_281"
" declared-submodule-names325_289"
" is-cross-phase-persistent?322_286"
" mpis-to-reset324_288"
" s318_282"
" phase319_283"
" requires+provides321_285"
" self320_284"
" fully-expanded-bodys-except-post-submodules316_280)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:355:9_279"
" keyword-procedure-extract"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" all-scopes-s323_287"
" ctx326_290"
" declare-enclosing-module317_281"
" declared-submodule-names325_289"
" is-cross-phase-persistent?322_286"
" mpis-to-reset324_288"
" s318_282"
" phase319_283"
" requires+provides321_285"
" self320_284)"
" fully-expanded-bodys-except-post-submodules316_280)))))))"
"(let-values(((mb-s244_291)"
" mb-s_150)"
"((disarmed-mb-s245_292)"
" disarmed-mb-s_153)"
"((temp246_293)"
"(list*"
" #%module-begin240_155"
" fully-expanded-bodys_177)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" mb-s244_291"
" disarmed-mb-s245_292"
" temp246_293)"
"(rebuild102.1"
" mb-s244_291"
" disarmed-mb-s245_292"
" temp246_293)))))))))))))))))))))))))))"
"(let-values(((mb-ctx_91)"
"(let-values(((the-struct_294)"
" ctx_83))"
"(if(expand-context?"
" the-struct_294)"
"(let-values(((context327_295)"
" 'module-begin)"
"((module-begin-k328_296)"
" module-begin-k_90))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_294)"
"(root-expand-context-post-expansion-scope"
" the-struct_294)"
"(root-expand-context-top-level-bind-scope"
" the-struct_294)"
"(root-expand-context-all-scopes-stx"
" the-struct_294)"
"(root-expand-context-use-site-scopes"
" the-struct_294)"
"(root-expand-context-defined-syms"
" the-struct_294)"
"(root-expand-context-frame-id"
" the-struct_294)"
"(root-expand-context-counter"
" the-struct_294)"
"(root-expand-context-lift-key"
" the-struct_294)"
" context327_295"
"(expand-context-phase"
" the-struct_294)"
"(expand-context-namespace"
" the-struct_294)"
"(expand-context-env"
" the-struct_294)"
"(expand-context-user-env"
" the-struct_294)"
"(expand-context-post-expansion-scope-action"
" the-struct_294)"
"(expand-context-scopes"
" the-struct_294)"
"(expand-context-def-ctx-scopes"
" the-struct_294)"
"(expand-context-reference-records"
" the-struct_294)"
"(expand-context-only-immediate?"
" the-struct_294)"
"(expand-context-just-once?"
" the-struct_294)"
" module-begin-k328_296"
"(expand-context-need-eventually-defined"
" the-struct_294)"
"(expand-context-allow-unbound?"
" the-struct_294)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_294)"
"(expand-context-stops"
" the-struct_294)"
"(expand-context-current-introduction-scopes"
" the-struct_294)"
"(expand-context-declared-submodule-names"
" the-struct_294)"
"(expand-context-lifts"
" the-struct_294)"
"(expand-context-lift-envs"
" the-struct_294)"
"(expand-context-module-lifts"
" the-struct_294)"
"(expand-context-require-lifts"
" the-struct_294)"
"(expand-context-to-module-lifts"
" the-struct_294)"
"(expand-context-requires+provides"
" the-struct_294)"
"(expand-context-name"
" the-struct_294)"
"(expand-context-observer"
" the-struct_294)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"expand-context?\""
" the-struct_294)))))"
"(let-values(((mb-scopes-s_92)"
"(if keep-enclosing-scope-at-phase_44"
" disarmed-s_49"
" all-scopes-s_77)))"
"(let-values(((mb_93)"
"(let-values(((...er/expand/module.rkt:396:5_297)"
" ensure-module-begin32.1)"
"((bodys329_298)"
" bodys_84)"
"((module-name-sym330_299)"
" module-name-sym_71)"
"((mb-scopes-s331_300)"
" mb-scopes-s_92)"
"((m-ns332_301)"
" m-ns_82)"
"((mb-ctx333_302)"
" mb-ctx_91)"
"((phase334_303)"
" phase_70)"
"((s335_304)"
" s_41))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" ensure-module-begin32.1))"
"(ensure-module-begin30.1"
" mb-ctx333_302"
" m-ns332_301"
" module-name-sym330_299"
" phase334_303"
" s335_304"
" mb-scopes-s331_300"
" bodys329_298)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:396:5_297"
" keyword-procedure-extract"
" '(#:ctx"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s"
" #:scopes-s)"
" 3)"
" '(#:ctx"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s"
" #:scopes-s)"
"(list"
" mb-ctx333_302"
" m-ns332_301"
" module-name-sym330_299"
" phase334_303"
" s335_304"
" mb-scopes-s331_300)"
" bodys329_298)))))"
"(let-values(((expanded-mb_94)"
"(let-values(((mb336_305)"
" mb_93)"
"((mb-ctx337_306)"
" mb-ctx_91))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" mb336_305"
" mb-ctx337_306)"
"(expand7.1"
" mb336_305"
" mb-ctx337_306)))))"
"(let-values(((generic-self_95)"
"(make-generic-self-module-path-index"
" self_74)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_74)"
"(let-values(((lst_307)"
"(unbox"
" mpis-to-reset_87)))"
"(begin"
"(if(list? lst_307)"
"(void)"
"(let-values()"
"(in-list lst_307)))"
"((letrec-values(((for-loop_308)"
"(lambda(fold-var_309"
" lst_310)"
"(if(pair?"
" lst_310)"
"(let-values(((mpi_311)"
"(unsafe-car"
" lst_310)))"
"(if #t"
"(let-values(((fold-var_312)"
"(let-values(((fold-var_313)"
" fold-var_309))"
"(let-values(((fold-var_314)"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_311))"
"(void)))))"
"(values"
" fold-var_314)))))"
"(if #t"
"(for-loop_308"
" fold-var_312"
"(unsafe-cdr"
" lst_310))"
" fold-var_312))"
" fold-var_309))"
" fold-var_309))))"
" for-loop_308)"
"(void)"
" lst_307)))"
"(let-values(((result-s_315)"
"(let-values(((s338_316)"
" s_41)"
"((disarmed-s339_317)"
" disarmed-s_49)"
"((temp340_318)"
"(list"
" module207_51"
" id:module-name208_52"
" initial-require-s_78"
" expanded-mb_94)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" s338_316"
" disarmed-s339_317"
" temp340_318)"
"(rebuild102.1"
" s338_316"
" disarmed-s339_317"
" temp340_318)))))"
"(let-values(((result-s_319)"
"(syntax-module-path-index-shift"
" result-s_315"
" self_74"
" generic-self_95)))"
"(let-values(((result-s_320)"
"(attach-require-provide-properties"
" requires+provides_85"
" result-s_319"
" self_74"
" generic-self_95)))"
"(let-values(((result-s_321)"
"(attach-root-expand-context-properties"
" result-s_320"
" root-ctx_79"
" self_74"
" generic-self_95)))"
"(let-values(((result-s_322)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_85)"
"(syntax-property$1"
" result-s_321"
" 'module-body-context-simple?"
" #t)"
" result-s_321)))"
"(begin"
"(let-values(((obs_323)"
"(expand-context-observer"
" ctx_83)))"
"(if obs_323"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_323"
" 'rename-one"
" result-s_322))"
"(void)))"
"(void)))"
" result-s_322))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack15.1)"
"(lambda(given-kws_324 given-args_325 s11_326 init-ctx12_327 enclosing-self13_328)"
"(let-values(((enclosing-all-scopes-stx7_329)"
"(if(pair? given-kws_324)(eq? '#:enclosing-all-scopes-stx(car given-kws_324)) #f)))"
"(let-values(((enclosing-all-scopes-stx2_330)(if enclosing-all-scopes-stx7_329(car given-args_325)(void)))"
"((given-kws_331)(if enclosing-all-scopes-stx7_329(cdr given-kws_324) given-kws_324))"
"((given-args_332)(if enclosing-all-scopes-stx7_329(cdr given-args_325) given-args_325)))"
"(let-values(((enclosing-is-cross-phase-persistent?8_333)"
"(if(pair? given-kws_331)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_331)) #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?3_334)"
"(if enclosing-is-cross-phase-persistent?8_333(car given-args_332)(void)))"
"((given-kws_335)"
"(if enclosing-is-cross-phase-persistent?8_333(cdr given-kws_331) given-kws_331))"
"((given-args_336)"
"(if enclosing-is-cross-phase-persistent?8_333(cdr given-args_332) given-args_332)))"
"(let-values(((enclosing-requires+provides9_337)"
"(if(pair? given-kws_335)(eq? '#:enclosing-requires+provides(car given-kws_335)) #f)))"
"(let-values(((enclosing-requires+provides4_338)"
"(if enclosing-requires+provides9_337(car given-args_336)(void)))"
"((given-kws_339)(if enclosing-requires+provides9_337(cdr given-kws_335) given-kws_335))"
"((given-args_340)(if enclosing-requires+provides9_337(cdr given-args_336) given-args_336)))"
"(let-values(((keep-enclosing-scope-at-phase6_341)"
"(if(pair? given-kws_339)(eq? '#:keep-enclosing-scope-at-phase(car given-kws_339)) #f)))"
"(let-values(((keep-enclosing-scope-at-phase1_342)"
"(if keep-enclosing-scope-at-phase6_341(car given-args_340)(void)))"
"((given-kws_343)"
"(if keep-enclosing-scope-at-phase6_341(cdr given-kws_339) given-kws_339))"
"((given-args_344)"
"(if keep-enclosing-scope-at-phase6_341(cdr given-args_340) given-args_340)))"
"(let-values(((mpis-for-enclosing-reset10_345)(pair? given-kws_343)))"
"(let-values(((mpis-for-enclosing-reset5_346)"
"(if mpis-for-enclosing-reset10_345(car given-args_344)(void))))"
"(expand-module14.1"
" enclosing-all-scopes-stx2_330"
" enclosing-all-scopes-stx7_329"
" enclosing-is-cross-phase-persistent?3_334"
" enclosing-is-cross-phase-persistent?8_333"
" enclosing-requires+provides4_338"
" enclosing-requires+provides9_337"
" keep-enclosing-scope-at-phase1_342"
" keep-enclosing-scope-at-phase6_341"
" mpis-for-enclosing-reset5_346"
" mpis-for-enclosing-reset10_345"
" s11_326"
" init-ctx12_327"
" enclosing-self13_328)))))))))))))"
"(define-values"
"(expand-module16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_347 given-argc_348)"
"(if(= given-argc_348 5)"
"(let-values(((l1_349) given-kws_347))"
"(let-values(((l1_350)"
"(if(null? l1_349)"
" l1_349"
"(if(eq?(car l1_349) '#:enclosing-all-scopes-stx)(cdr l1_349) l1_349))))"
"(let-values(((l1_351) l1_350))"
"(let-values(((l1_352)"
"(if(null? l1_351)"
" l1_351"
"(if(eq?(car l1_351) '#:enclosing-is-cross-phase-persistent?)(cdr l1_351) l1_351))))"
"(let-values(((l1_353) l1_352))"
"(let-values(((l1_354)"
"(if(null? l1_353)"
" l1_353"
"(if(eq?(car l1_353) '#:enclosing-requires+provides)(cdr l1_353) l1_353))))"
"(let-values(((l1_355) l1_354))"
"(let-values(((l1_356)"
"(if(null? l1_355)"
" l1_355"
"(if(eq?(car l1_355) '#:keep-enclosing-scope-at-phase)(cdr l1_355) l1_355))))"
"(let-values(((l1_357) l1_356))"
"(let-values(((l1_358)"
"(if(null? l1_357)"
" l1_357"
"(if(eq?(car l1_357) '#:mpis-for-enclosing-reset)(cdr l1_357) l1_357))))"
"(null? l1_358)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_359 given-args_360 s_361 init-ctx_362 enclosing-self_363)"
"(unpack15.1 given-kws_359 given-args_360 s_361 init-ctx_362 enclosing-self_363)))"
" null"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(let-values(((expand-module_364)"
"(case-lambda"
"((s_365 init-ctx_366 enclosing-self_367)"
"(unpack15.1 null null s_365 init-ctx_366 enclosing-self_367)))))"
" expand-module_364)))"
"(define-values"
"(lifted/1.1)"
"(make-required"
" 'ensure-module-begin"
"(case-lambda((self_368 bodys_369)(apply missing-kw self_368 bodys_369 null)))"
" #f"
" #f))"
"(define-values"
"(ensure-module-begin30.1)"
"(lambda(ctx20_370 m-ns19_371 module-name-sym17_372 phase21_373 s22_374 scopes-s18_375 bodys29_376)"
"(let-values(((bodys_377) bodys29_376))"
"(let-values(((module-name-sym_378) module-name-sym17_372))"
"(let-values(((scopes-s_379) scopes-s18_375))"
"(let-values(((m-ns_380) m-ns19_371))"
"(let-values(((ctx_381) ctx20_370))"
"(let-values(((phase_382) phase21_373))"
"(let-values(((s_383) s22_374))"
"(let-values()"
"(let-values(((make-mb-ctx_384)"
"(lambda()"
"(let-values(((the-struct_386) ctx_381))"
"(if(expand-context? the-struct_386)"
"(let-values(((context341_387) 'module-begin)((only-immediate?342_388) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_386)"
"(root-expand-context-post-expansion-scope the-struct_386)"
"(root-expand-context-top-level-bind-scope the-struct_386)"
"(root-expand-context-all-scopes-stx the-struct_386)"
"(root-expand-context-use-site-scopes the-struct_386)"
"(root-expand-context-defined-syms the-struct_386)"
"(root-expand-context-frame-id the-struct_386)"
"(root-expand-context-counter the-struct_386)"
"(root-expand-context-lift-key the-struct_386)"
" context341_387"
"(expand-context-phase the-struct_386)"
"(expand-context-namespace the-struct_386)"
"(expand-context-env the-struct_386)"
"(expand-context-user-env the-struct_386)"
"(expand-context-post-expansion-scope-action the-struct_386)"
"(expand-context-scopes the-struct_386)"
"(expand-context-def-ctx-scopes the-struct_386)"
"(expand-context-reference-records the-struct_386)"
" only-immediate?342_388"
"(expand-context-just-once? the-struct_386)"
"(expand-context-module-begin-k the-struct_386)"
"(expand-context-need-eventually-defined the-struct_386)"
"(expand-context-allow-unbound? the-struct_386)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_386)"
"(expand-context-stops the-struct_386)"
"(expand-context-current-introduction-scopes the-struct_386)"
"(expand-context-declared-submodule-names the-struct_386)"
"(expand-context-lifts the-struct_386)"
"(expand-context-lift-envs the-struct_386)"
"(expand-context-module-lifts the-struct_386)"
"(expand-context-require-lifts the-struct_386)"
"(expand-context-to-module-lifts the-struct_386)"
"(expand-context-requires+provides the-struct_386)"
"(expand-context-name the-struct_386)"
"(expand-context-observer the-struct_386)))"
"                                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_386))))))"
"(let-values(((mb_385)"
"(if(= 1(length bodys_377))"
"(let-values()"
"(begin"
"(let-values(((obs_389)(expand-context-observer ctx_381)))"
"(if obs_389"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_389 'rename-one(car bodys_377)))"
"(void)))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_377)) phase_382))"
"(let-values()(car bodys_377))"
"(let-values()"
"(let-values(((partly-expanded-body_390)"
"(let-values(((temp343_391)"
"(add-enclosing-name-property"
"(car bodys_377)"
" module-name-sym_378))"
"((temp344_392)(make-mb-ctx_384)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp343_391 temp344_392)"
"(expand7.1 temp343_391 temp344_392)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_390)"
" phase_382))"
"(let-values() partly-expanded-body_390)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:474:10_393)"
" add-module-begin43.1)"
"((temp345_394)(list partly-expanded-body_390))"
"((s346_395) s_383)"
"((scopes-s347_396) scopes-s_379)"
"((phase348_397) phase_382)"
"((module-name-sym349_398) module-name-sym_378)"
"((temp350_399)(make-mb-ctx_384))"
"((temp351_400) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference add-module-begin43.1))"
"(add-module-begin41.1"
" temp351_400"
" #t"
" temp345_394"
" s346_395"
" scopes-s347_396"
" phase348_397"
" module-name-sym349_398"
" temp350_399)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:474:10_393"
" keyword-procedure-extract"
" '(#:log-rename-one?)"
" 8)"
" '(#:log-rename-one?)"
"(list temp351_400)"
" temp345_394"
" s346_395"
" scopes-s347_396"
" phase348_397"
" module-name-sym349_398"
" temp350_399))))))))))"
"(let-values()"
"(let-values(((bodys352_401) bodys_377)"
"((s353_402) s_383)"
"((scopes-s354_403) scopes-s_379)"
"((phase355_404) phase_382)"
"((module-name-sym356_405) module-name-sym_378)"
"((temp357_406)(make-mb-ctx_384)))"
"(if(variable-reference-constant?(#%variable-reference add-module-begin43.1))"
"(add-module-begin41.1"
" #f"
" #f"
" bodys352_401"
" s353_402"
" scopes-s354_403"
" phase355_404"
" module-name-sym356_405"
" temp357_406)"
"(add-module-begin43.1"
" bodys352_401"
" s353_402"
" scopes-s354_403"
" phase355_404"
" module-name-sym356_405"
" temp357_406)))))))"
"(add-enclosing-name-property mb_385 module-name-sym_378)))))))))))))"
"(define-values"
"(unpack31.1)"
"(lambda(given-kws_407 given-args_408 bodys29_409)"
"(let-values(((ctx20_410)(car given-args_408))"
"((given-kws_411)(cdr given-kws_407))"
"((given-args_412)(cdr given-args_408)))"
"(let-values(((m-ns19_413)(car given-args_412))"
"((given-kws_414)(cdr given-kws_411))"
"((given-args_415)(cdr given-args_412)))"
"(let-values(((module-name-sym17_416)(car given-args_415))"
"((given-kws_417)(cdr given-kws_414))"
"((given-args_418)(cdr given-args_415)))"
"(let-values(((phase21_419)(car given-args_418))"
"((given-kws_420)(cdr given-kws_417))"
"((given-args_421)(cdr given-args_418)))"
"(let-values(((s22_422)(car given-args_421))"
"((given-kws_423)(cdr given-kws_420))"
"((given-args_424)(cdr given-args_421)))"
"(let-values(((scopes-s18_425)(car given-args_424)))"
"(ensure-module-begin30.1"
" ctx20_410"
" m-ns19_413"
" module-name-sym17_416"
" phase21_419"
" s22_422"
" scopes-s18_425"
" bodys29_409)))))))))"
"(define-values"
"(ensure-module-begin32.1)"
"(lifted/1.1"
"(lambda(given-kws_426 given-argc_427)"
"(if(= given-argc_427 3)"
"(let-values(((l2_428) given-kws_426))"
"(if(pair? l2_428)"
"(if(eq?(car l2_428) '#:ctx)"
"(let-values(((l2_429)(cdr l2_428)))"
"(if(pair? l2_429)"
"(if(eq?(car l2_429) '#:m-ns)"
"(let-values(((l2_430)(cdr l2_429)))"
"(if(pair? l2_430)"
"(if(eq?(car l2_430) '#:module-name-sym)"
"(let-values(((l2_431)(cdr l2_430)))"
"(if(pair? l2_431)"
"(if(eq?(car l2_431) '#:phase)"
"(let-values(((l2_432)(cdr l2_431)))"
"(if(pair? l2_432)"
"(if(eq?(car l2_432) '#:s)"
"(let-values(((l2_433)(cdr l2_432)))"
"(if(pair? l2_433)"
"(if(eq?(car l2_433) '#:scopes-s)(null?(cdr l2_433)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_434 given-args_435 bodys_436)(unpack31.1 given-kws_434 given-args_435 bodys_436)))"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)))"
"(define-values"
"(add-module-begin41.1)"
"(lambda(log-rename-one?33_437"
" log-rename-one?34_438"
" bodys35_439"
" s36_440"
" scopes-s37_441"
" phase38_442"
" module-name-sym39_443"
" mb-ctx40_444)"
"(let-values(((bodys_445) bodys35_439))"
"(let-values(((s_446) s36_440))"
"(let-values(((scopes-s_447) scopes-s37_441))"
"(let-values(((phase_448) phase38_442))"
"(let-values(((module-name-sym_449) module-name-sym39_443))"
"(let-values(((mb-ctx_450) mb-ctx40_444))"
"(let-values(((log-rename-one?_451)(if log-rename-one?34_438 log-rename-one?33_437 #t)))"
"(let-values()"
"(let-values(((disarmed-scopes-s_452)(syntax-disarm$1 scopes-s_447)))"
"(let-values(((mb-id_453)(datum->syntax$1 disarmed-scopes-s_452 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id358_456) mb-id_453)((phase359_457) phase_448))"
"(if(variable-reference-constant?(#%variable-reference resolve21.1))"
"(resolve19.1 #f #f #f #f #f #f mb-id358_456 phase359_457)"
"(resolve21.1 mb-id358_456 phase359_457)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_446)))"
"(values))))"
"(let-values(((mb_454)"
"(datum->syntax$1 disarmed-scopes-s_452(list* mb-id_453 bodys_445) s_446)))"
"(let-values((()"
"(begin"
"(let-values(((obs_458)(expand-context-observer mb-ctx_450)))"
"(if obs_458"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_458 'tag mb_454))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_451"
"(let-values()"
"(let-values(((obs_459)(expand-context-observer mb-ctx_450)))"
"(if obs_459"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_459 'rename-one mb_454))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_455)"
"(let-values(((temp360_460)"
"(add-enclosing-name-property mb_454 module-name-sym_449))"
"((mb-ctx361_461) mb-ctx_450))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp360_460 mb-ctx361_461)"
"(expand7.1 temp360_460 mb-ctx361_461)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_455) phase_448))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_446"
" partly-expanded-mb_455)))"
" partly-expanded-mb_455))))))))))))))))))"
"(define-values"
"(unpack42.1)"
"(lambda(given-kws_462"
" given-args_463"
" bodys35_464"
" s36_465"
" scopes-s37_466"
" phase38_467"
" module-name-sym39_468"
" mb-ctx40_469)"
"(let-values(((log-rename-one?34_470)(pair? given-kws_462)))"
"(let-values(((log-rename-one?33_471)(if log-rename-one?34_470(car given-args_463)(void))))"
"(add-module-begin41.1"
" log-rename-one?33_471"
" log-rename-one?34_470"
" bodys35_464"
" s36_465"
" scopes-s37_466"
" phase38_467"
" module-name-sym39_468"
" mb-ctx40_469)))))"
"(define-values"
"(add-module-begin43.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_472 given-argc_473)"
"(if(= given-argc_473 8)"
"(let-values(((l1_474) given-kws_472))"
"(let-values(((l1_475)"
"(if(null? l1_474) l1_474(if(eq?(car l1_474) '#:log-rename-one?)(cdr l1_474) l1_474))))"
"(null? l1_475)))"
" #f))"
"(case-lambda"
"((given-kws_476 given-args_477 bodys_478 s_479 scopes-s_480 phase_481 module-name-sym_482 mb-ctx_483)"
"(unpack42.1 given-kws_476 given-args_477 bodys_478 s_479 scopes-s_480 phase_481 module-name-sym_482 mb-ctx_483)))"
" null"
" '(#:log-rename-one?)"
"(let-values(((add-module-begin_484)"
"(case-lambda"
"((bodys_485 s_486 scopes-s_487 phase_488 module-name-sym_489 mb-ctx_490)"
"(unpack42.1 null null bodys_485 s_486 scopes-s_487 phase_488 module-name-sym_489 mb-ctx_490)))))"
" add-module-begin_484)))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_491 module-name-sym_492)(syntax-property$1 stx_491 'enclosing-module-name module-name-sym_492)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_493"
" outside-scope_494"
" init-ctx_495"
" keep-enclosing-scope-at-phase_496"
" self_497"
" enclosing-self_498"
" enclosing-mod_499)"
"(lambda(s_500)"
"(let-values(((s-without-enclosing_501)"
"(if keep-enclosing-scope-at-phase_496"
" s_500"
"(remove-use-site-scopes"
"(let-values(((lst_505)(root-expand-context-module-scopes init-ctx_495)))"
"(begin"
"(if(list? lst_505)(void)(let-values()(in-list lst_505)))"
"((letrec-values(((for-loop_506)"
"(lambda(s_507 lst_508)"
"(if(pair? lst_508)"
"(let-values(((sc_509)(unsafe-car lst_508)))"
"(if #t"
"(let-values(((s_510)"
"(let-values(((s_511) s_507))"
"(let-values(((s_512)"
"(let-values()"
"(remove-scope s_511 sc_509))))"
"(values s_512)))))"
"(if #t(for-loop_506 s_510(unsafe-cdr lst_508)) s_510))"
" s_507))"
" s_507))))"
" for-loop_506)"
" s_500"
" lst_505)))"
" init-ctx_495))))"
"(let-values(((s-with-edges_502)"
"(add-scope(add-scope s-without-enclosing_501 outside-scope_494) inside-scope_493)))"
"(let-values(((s-with-suitable-enclosing_503)"
"(if keep-enclosing-scope-at-phase_496"
"(let-values()"
"(syntax-module-path-index-shift s-with-edges_502 enclosing-self_498 enclosing-mod_499))"
"(let-values() s-with-edges_502))))"
"(let-values(((s-shifted_504)"
"(syntax-module-path-index-shift"
" s-with-suitable-enclosing_503"
"(make-generic-self-module-path-index self_497)"
" self_497)))"
"(syntax-set-inspector s-shifted_504(current-code-inspector)))))))))"
"(define-values"
"(lifted/2.1)"
"(make-required"
" 'partially-expand-bodys"
"(case-lambda((self_513 bodys_514)(apply missing-kw self_513 bodys_514 null)))"
" #f"
" #f))"
"(define-values"
"(partially-expand-bodys75.1)"
"(lambda(all-scopes-stx53_515"
" ctx47_516"
" declared-keywords55_517"
" declared-submodule-names56_518"
" defined-syms54_519"
" frame-id50_520"
" loop58_521"
" mpis-to-reset57_522"
" namespace48_523"
" need-eventually-defined52_524"
" original44_525"
" phase46_526"
" requires-and-provides51_527"
" self49_528"
" tail?45_529"
" bodys74_530)"
"(let-values(((bodys_531) bodys74_530))"
"(let-values(((s_532) original44_525))"
"(let-values(((tail?_533) tail?45_529))"
"(let-values(((phase_534) phase46_526))"
"(let-values(((partial-body-ctx_535) ctx47_516))"
"(let-values(((m-ns_536) namespace48_523))"
"(let-values(((self_537) self49_528))"
"(let-values(((frame-id_538) frame-id50_520))"
"(let-values(((requires+provides_539) requires-and-provides51_527))"
"(let-values(((need-eventually-defined_540) need-eventually-defined52_524))"
"(let-values(((all-scopes-stx_541) all-scopes-stx53_515))"
"(let-values(((defined-syms_542) defined-syms54_519))"
"(let-values(((declared-keywords_543) declared-keywords55_517))"
"(let-values(((declared-submodule-names_544) declared-submodule-names56_518))"
"(let-values(((mpis-to-reset_545) mpis-to-reset57_522))"
"(let-values(((pass-1-and-2-loop_546) loop58_521))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_536 phase_534)"
"((letrec-values(((loop_547)"
"(lambda(tail?_548 bodys_549)"
"(if(null? bodys_549)"
"(let-values()"
"(if tail?_548"
"(let-values()"
"(let-values(((bodys_550)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_535))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_535)))))"
"(if(null? bodys_550)"
" null"
"(loop_547"
" #t"
"(add-post-expansion-scope"
" bodys_550"
" partial-body-ctx_535)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_554)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_554"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_554"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_551)"
"(let-values(((temp362_555)"
"(car bodys_549))"
"((partial-body-ctx363_556)"
" partial-body-ctx_535))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp362_555"
" partial-body-ctx363_556)"
"(expand7.1"
" temp362_555"
" partial-body-ctx363_556)))))"
"(let-values(((disarmed-exp-body_552)"
"(syntax-disarm$1 exp-body_551)))"
"(let-values(((lifted-defns_553)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_535))))"
"(begin"
"(if(null? lifted-defns_553)"
"(let-values()"
"(begin"
"(let-values(((obs_557)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_557"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_557"
" 'rename-list"
" lifted-defns_553))"
"(void)))"
"(void)))"
"(let-values(((obs_558)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_558"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_558"
" 'module-lift-loop"
"(append"
" lifted-defns_553"
"(cons"
" exp-body_551"
"(cdr bodys_549)))))"
"(void)))"
"(void)))))"
"(let-values()"
"(let-values(((obs_559)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_559"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_559"
" 'module-lift-end-loop"
"(cons"
" exp-body_551"
"(cdr bodys_549))))"
"(void)))"
"(void)))))"
"(let-values(((obs_560)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_560"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_560"
" 'rename-one"
" exp-body_551))"
"(void)))"
"(void)))"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_535))"
" lifted-defns_553"
"(loop_547"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_535)))"
"(let-values(((tmp_561)"
"(core-form-sym"
" disarmed-exp-body_552"
" phase_534)))"
"(if(equal? tmp_561 'begin)"
"(let-values()"
"(let-values(((ok?_562"
" begin364_563"
" e365_564)"
"(let-values(((s_577)"
" disarmed-exp-body_552))"
"(if(if #t #t #f)"
"(let-values(((orig-s_578)"
" s_577))"
"(let-values(((begin364_579"
" e365_580)"
"(let-values(((s_581)"
"(if(syntax?$1"
" s_577)"
"(syntax-e$1"
" s_577)"
" s_577)))"
"(if(pair?"
" s_581)"
"(let-values(((begin366_582)"
"(let-values(((s_584)"
"(car"
" s_581)))"
" s_584))"
"((e367_583)"
"(let-values(((s_585)"
"(cdr"
" s_581)))"
"(let-values(((s_586)"
"(if(syntax?$1"
" s_585)"
"(syntax-e$1"
" s_585)"
" s_585)))"
"(let-values(((flat-s_587)"
"(to-syntax-list.1"
" s_586)))"
"(if(not"
" flat-s_587)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                \"bad syntax\""
" orig-s_578))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                  \"bad syntax\""
" orig-s_578))"
"(let-values()"
" flat-s_587))))))))"
"(values"
" begin366_582"
" e367_583))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_578)))))"
"(values"
" #t"
" begin364_579"
" e365_580)))"
"(values #f #f #f)))))"
"(let-values(((track_575)"
"(lambda(e_588)"
"(syntax-track-origin$1"
" e_588"
" exp-body_551))))"
"(let-values(((spliced-bodys_576)"
"(append"
"(map2"
" track_575"
" e365_564)"
"(cdr bodys_549))))"
"(begin"
"(let-values(((obs_589)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_589"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_589"
" 'splice"
" spliced-bodys_576))"
"(void)))"
"(void)))"
"(loop_547"
" tail?_548"
" spliced-bodys_576))))))"
"(if(equal? tmp_561 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_605)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_605"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_605"
" 'enter-prim"
" exp-body_551))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_606)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_606"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_606"
" 'enter-prim-begin-for-syntax))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_590"
" begin-for-syntax368_591"
" e369_592)"
"(let-values(((s_607)"
" disarmed-exp-body_552))"
"(if(if #t #t #f)"
"(let-values(((orig-s_608)"
" s_607))"
"(let-values(((begin-for-syntax368_609"
" e369_610)"
"(let-values(((s_611)"
"(if(syntax?$1"
" s_607)"
"(syntax-e$1"
" s_607)"
" s_607)))"
"(if(pair?"
" s_611)"
"(let-values(((begin-for-syntax370_612)"
"(let-values(((s_614)"
"(car"
" s_611)))"
" s_614))"
"((e371_613)"
"(let-values(((s_615)"
"(cdr"
" s_611)))"
"(let-values(((s_616)"
"(if(syntax?$1"
" s_615)"
"(syntax-e$1"
" s_615)"
" s_615)))"
"(let-values(((flat-s_617)"
"(to-syntax-list.1"
" s_616)))"
"(if(not"
" flat-s_617)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                      \"bad syntax\""
" orig-s_608))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_608))"
"(let-values()"
" flat-s_617))))))))"
"(values"
" begin-for-syntax370_612"
" e371_613))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_608)))))"
"(values"
" #t"
" begin-for-syntax368_609"
" e369_610)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((nested-bodys_603)"
"(pass-1-and-2-loop_546"
" e369_592"
"(add1"
" phase_534))))"
"(let-values(((ct-m-ns_604)"
"(namespace->namespace-at-phase"
" m-ns_536"
"(add1"
" phase_534))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_536"
"(add1 phase_534))"
"(eval-nested-bodys"
" nested-bodys_603"
"(add1 phase_534)"
" ct-m-ns_604"
" self_537"
" partial-body-ctx_535)"
"(namespace-visit-available-modules!"
" m-ns_536"
" phase_534)"
"(let-values(((obs_618)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_618"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_618"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body372_619)"
" exp-body_551)"
"((disarmed-exp-body373_620)"
" disarmed-exp-body_552)"
"((temp374_621)"
"(list*"
" begin-for-syntax368_591"
" nested-bodys_603)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" exp-body372_619"
" disarmed-exp-body373_620"
" temp374_621)"
"(rebuild102.1"
" exp-body372_619"
" disarmed-exp-body373_620"
" temp374_621)))"
"(loop_547"
" tail?_548"
"(cdr"
" bodys_549))))))))))"
"(if(equal? tmp_561 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_640)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_640"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_640"
" 'enter-prim"
" exp-body_551))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_641)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_641"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_641"
" 'enter-prim-define-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_622"
" define-values375_623"
" id376_624"
" rhs377_625)"
"(let-values(((s_642)"
" disarmed-exp-body_552))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_643)"
" s_642))"
"(let-values(((define-values375_644"
" id376_645"
" rhs377_646)"
"(let-values(((s_647)"
"(if(syntax?$1"
" s_642)"
"(syntax-e$1"
" s_642)"
" s_642)))"
"(if(pair?"
" s_647)"
"(let-values(((define-values378_648)"
"(let-values(((s_651)"
"(car"
" s_647)))"
" s_651))"
"((id379_649"
" rhs380_650)"
"(let-values(((s_652)"
"(cdr"
" s_647)))"
"(let-values(((s_653)"
"(if(syntax?$1"
" s_652)"
"(syntax-e$1"
" s_652)"
" s_652)))"
"(if(pair?"
" s_653)"
"(let-values(((id381_654)"
"(let-values(((s_656)"
"(car"
" s_653)))"
"(let-values(((s_657)"
"(if(syntax?$1"
" s_656)"
"(syntax-e$1"
" s_656)"
" s_656)))"
"(let-values(((flat-s_658)"
"(to-syntax-list.1"
" s_657)))"
"(if(not"
" flat-s_658)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_643))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_643))"
"(let-values()"
"(let-values(((id_659)"
"(let-values(((lst_660)"
" flat-s_658))"
"(begin"
"(if(list?"
" lst_660)"
"(void)"
"(let-values()"
"(in-list"
" lst_660)))"
"((letrec-values(((for-loop_661)"
"(lambda(id_662"
" lst_663)"
"(if(pair?"
" lst_663)"
"(let-values(((s_664)"
"(unsafe-car"
" lst_663)))"
"(if #t"
"(let-values(((id_665)"
"(let-values(((id_666)"
" id_662))"
"(let-values(((id_667)"
"(let-values()"
"(let-values(((id391_668)"
"(let-values()"
"(if(let-values(((or-part_669)"
"(if(syntax?$1"
" s_664)"
"(symbol?"
"(syntax-e$1"
" s_664))"
" #f)))"
"(if or-part_669"
" or-part_669"
"(symbol?"
" s_664)))"
" s_664"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                            \"not an identifier\""
" orig-s_643"
" s_664)))))"
"(cons"
" id391_668"
" id_666)))))"
"(values"
" id_667)))))"
"(if #t"
"(for-loop_661"
" id_665"
"(unsafe-cdr"
" lst_663))"
" id_665))"
" id_662))"
" id_662))))"
" for-loop_661)"
" null"
" lst_660)))))"
"(alt-reverse"
" id_659)))))))))"
"((rhs382_655)"
"(let-values(((s_670)"
"(cdr"
" s_653)))"
"(let-values(((s_671)"
"(if(syntax?$1"
" s_670)"
"(syntax-e$1"
" s_670)"
" s_670)))"
"(if(pair?"
" s_671)"
"(let-values(((rhs383_672)"
"(let-values(((s_673)"
"(car"
" s_671)))"
" s_673))"
"(()"
"(let-values(((s_674)"
"(cdr"
" s_671)))"
"(let-values(((s_675)"
"(if(syntax?$1"
" s_674)"
"(syntax-e$1"
" s_674)"
" s_674)))"
"(if(null?"
" s_675)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"bad syntax\""
" orig-s_643))))))"
"(values"
" rhs383_672))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                        \"bad syntax\""
" orig-s_643))))))"
"(values"
" id381_654"
" rhs382_655))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                    \"bad syntax\""
" orig-s_643))))))"
"(values"
" define-values378_648"
" id379_649"
" rhs380_650))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_643)))))"
"(values"
" #t"
" define-values375_644"
" id376_645"
" rhs377_646)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_638)"
"(remove-use-site-scopes"
" id376_624"
" partial-body-ctx_535)))"
"(let-values((()"
"(begin"
"(let-values(((ids384_676)"
" ids_638)"
"((phase385_677)"
" phase_534)"
"((exp-body386_678)"
" exp-body_551))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids384_676"
" phase385_677"
" exp-body386_678"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids384_676"
" phase385_677"
" exp-body386_678)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:631:10_679)"
" check-ids-unbound163.1)"
"((ids387_680)"
" ids_638)"
"((phase388_681)"
" phase_534)"
"((requires+provides389_682)"
" requires+provides_539)"
"((exp-body390_683)"
" exp-body_551))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound163.1))"
"(check-ids-unbound161.1"
" exp-body390_683"
" ids387_680"
" phase388_681"
" requires+provides389_682)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:631:10_679"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body390_683)"
" ids387_680"
" phase388_681"
" requires+provides389_682)))"
"(values))))"
"(let-values(((syms_639)"
"(let-values(((...er/expand/module.rkt:632:23_684)"
" select-defined-syms-and-bind!18.1)"
"((ids392_685)"
" ids_638)"
"((defined-syms393_686)"
" defined-syms_542)"
"((self394_687)"
" self_537)"
"((phase395_688)"
" phase_534)"
"((all-scopes-stx396_689)"
" all-scopes-stx_541)"
"((frame-id397_690)"
" frame-id_538)"
"((requires+provides398_691)"
" requires+provides_539)"
"((exp-body399_692)"
" exp-body_551))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id397_690"
" exp-body399_692"
" #t"
" requires+provides398_691"
" #t"
" #f"
" #f"
" ids392_685"
" defined-syms393_686"
" self394_687"
" phase395_688"
" all-scopes-stx396_689)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:632:23_684"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" frame-id397_690"
" exp-body399_692"
" requires+provides398_691)"
" ids392_685"
" defined-syms393_686"
" self394_687"
" phase395_688"
" all-scopes-stx396_689)))))"
"(begin"
"(add-defined-syms!"
" requires+provides_539"
" syms_639"
" phase_534)"
"(let-values(((obs_693)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_693"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_693"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body400_694)"
" exp-body_551)"
"((disarmed-exp-body401_695)"
" disarmed-exp-body_552)"
"((temp402_696)"
"(list"
" define-values375_623"
" ids_638"
" rhs377_625)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" exp-body400_694"
" disarmed-exp-body401_695"
" temp402_696)"
"(rebuild102.1"
" exp-body400_694"
" disarmed-exp-body401_695"
" temp402_696)))"
"(loop_547"
" tail?_548"
"(cdr"
" bodys_549))))))))))))"
"(if(equal? tmp_561 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_717)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_717"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_717"
" 'enter-prim"
" exp-body_551))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_718)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_718"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_718"
" 'enter-prim-define-syntaxes))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_697"
" define-syntaxes403_698"
" id404_699"
" rhs405_700)"
"(let-values(((s_719)"
" disarmed-exp-body_552))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_720)"
" s_719))"
"(let-values(((define-syntaxes403_721"
" id404_722"
" rhs405_723)"
"(let-values(((s_724)"
"(if(syntax?$1"
" s_719)"
"(syntax-e$1"
" s_719)"
" s_719)))"
"(if(pair?"
" s_724)"
"(let-values(((define-syntaxes406_725)"
"(let-values(((s_728)"
"(car"
" s_724)))"
" s_728))"
"((id407_726"
" rhs408_727)"
"(let-values(((s_729)"
"(cdr"
" s_724)))"
"(let-values(((s_730)"
"(if(syntax?$1"
" s_729)"
"(syntax-e$1"
" s_729)"
" s_729)))"
"(if(pair?"
" s_730)"
"(let-values(((id409_731)"
"(let-values(((s_733)"
"(car"
" s_730)))"
"(let-values(((s_734)"
"(if(syntax?$1"
" s_733)"
"(syntax-e$1"
" s_733)"
" s_733)))"
"(let-values(((flat-s_735)"
"(to-syntax-list.1"
" s_734)))"
"(if(not"
" flat-s_735)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_720))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_720))"
"(let-values()"
"(let-values(((id_736)"
"(let-values(((lst_737)"
" flat-s_735))"
"(begin"
"(if(list?"
" lst_737)"
"(void)"
"(let-values()"
"(in-list"
" lst_737)))"
"((letrec-values(((for-loop_738)"
"(lambda(id_739"
" lst_740)"
"(if(pair?"
" lst_740)"
"(let-values(((s_741)"
"(unsafe-car"
" lst_740)))"
"(if #t"
"(let-values(((id_742)"
"(let-values(((id_743)"
" id_739))"
"(let-values(((id_744)"
"(let-values()"
"(let-values(((id419_745)"
"(let-values()"
"(if(let-values(((or-part_746)"
"(if(syntax?$1"
" s_741)"
"(symbol?"
"(syntax-e$1"
" s_741))"
" #f)))"
"(if or-part_746"
" or-part_746"
"(symbol?"
" s_741)))"
" s_741"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                              \"not an identifier\""
" orig-s_720"
" s_741)))))"
"(cons"
" id419_745"
" id_743)))))"
"(values"
" id_744)))))"
"(if #t"
"(for-loop_738"
" id_742"
"(unsafe-cdr"
" lst_740))"
" id_742))"
" id_739))"
" id_739))))"
" for-loop_738)"
" null"
" lst_737)))))"
"(alt-reverse"
" id_736)))))))))"
"((rhs410_732)"
"(let-values(((s_747)"
"(cdr"
" s_730)))"
"(let-values(((s_748)"
"(if(syntax?$1"
" s_747)"
"(syntax-e$1"
" s_747)"
" s_747)))"
"(if(pair?"
" s_748)"
"(let-values(((rhs411_749)"
"(let-values(((s_750)"
"(car"
" s_748)))"
" s_750))"
"(()"
"(let-values(((s_751)"
"(cdr"
" s_748)))"
"(let-values(((s_752)"
"(if(syntax?$1"
" s_751)"
"(syntax-e$1"
" s_751)"
" s_751)))"
"(if(null?"
" s_752)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_720))))))"
"(values"
" rhs411_749))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                          \"bad syntax\""
" orig-s_720))))))"
"(values"
" id409_731"
" rhs410_732))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                      \"bad syntax\""
" orig-s_720))))))"
"(values"
" define-syntaxes406_725"
" id407_726"
" rhs408_727))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_720)))))"
"(values"
" #t"
" define-syntaxes403_721"
" id404_722"
" rhs405_723)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_713)"
"(remove-use-site-scopes"
" id404_699"
" partial-body-ctx_535)))"
"(let-values((()"
"(begin"
"(let-values(((ids412_753)"
" ids_713)"
"((phase413_754)"
" phase_534)"
"((exp-body414_755)"
" exp-body_551))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids412_753"
" phase413_754"
" exp-body414_755"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids412_753"
" phase413_754"
" exp-body414_755)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:649:10_756)"
" check-ids-unbound163.1)"
"((ids415_757)"
" ids_713)"
"((phase416_758)"
" phase_534)"
"((requires+provides417_759)"
" requires+provides_539)"
"((exp-body418_760)"
" exp-body_551))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound163.1))"
"(check-ids-unbound161.1"
" exp-body418_760"
" ids415_757"
" phase416_758"
" requires+provides417_759)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:649:10_756"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body418_760)"
" ids415_757"
" phase416_758"
" requires+provides417_759)))"
"(values))))"
"(let-values(((syms_714)"
"(let-values(((...er/expand/module.rkt:650:23_761)"
" select-defined-syms-and-bind!18.1)"
"((ids420_762)"
" ids_713)"
"((defined-syms421_763)"
" defined-syms_542)"
"((self422_764)"
" self_537)"
"((phase423_765)"
" phase_534)"
"((all-scopes-stx424_766)"
" all-scopes-stx_541)"
"((frame-id425_767)"
" frame-id_538)"
"((requires+provides426_768)"
" requires+provides_539)"
"((exp-body427_769)"
" exp-body_551)"
"((temp428_770)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" temp428_770"
" #t"
" frame-id425_767"
" exp-body427_769"
" #t"
" requires+provides426_768"
" #t"
" #f"
" #f"
" ids420_762"
" defined-syms421_763"
" self422_764"
" phase423_765"
" all-scopes-stx424_766)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:650:23_761"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" temp428_770"
" frame-id425_767"
" exp-body427_769"
" requires+provides426_768)"
" ids420_762"
" defined-syms421_763"
" self422_764"
" phase423_765"
" all-scopes-stx424_766)))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_539"
" syms_714"
" phase_534)"
"(values))))"
"(let-values(((exp-rhs_715"
" vals_716)"
"(expand+eval-for-syntaxes-binding"
" rhs405_700"
" ids_713"
"(let-values(((the-struct_771)"
" partial-body-ctx_535))"
"(if(expand-context?"
" the-struct_771)"
"(let-values(((need-eventually-defined429_772)"
" need-eventually-defined_540))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_771)"
"(root-expand-context-post-expansion-scope"
" the-struct_771)"
"(root-expand-context-top-level-bind-scope"
" the-struct_771)"
"(root-expand-context-all-scopes-stx"
" the-struct_771)"
"(root-expand-context-use-site-scopes"
" the-struct_771)"
"(root-expand-context-defined-syms"
" the-struct_771)"
"(root-expand-context-frame-id"
" the-struct_771)"
"(root-expand-context-counter"
" the-struct_771)"
"(root-expand-context-lift-key"
" the-struct_771)"
"(expand-context-context"
" the-struct_771)"
"(expand-context-phase"
" the-struct_771)"
"(expand-context-namespace"
" the-struct_771)"
"(expand-context-env"
" the-struct_771)"
"(expand-context-user-env"
" the-struct_771)"
"(expand-context-post-expansion-scope-action"
" the-struct_771)"
"(expand-context-scopes"
" the-struct_771)"
"(expand-context-def-ctx-scopes"
" the-struct_771)"
"(expand-context-reference-records"
" the-struct_771)"
"(expand-context-only-immediate?"
" the-struct_771)"
"(expand-context-just-once?"
" the-struct_771)"
"(expand-context-module-begin-k"
" the-struct_771)"
" need-eventually-defined429_772"
"(expand-context-allow-unbound?"
" the-struct_771)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_771)"
"(expand-context-stops"
" the-struct_771)"
"(expand-context-current-introduction-scopes"
" the-struct_771)"
"(expand-context-declared-submodule-names"
" the-struct_771)"
"(expand-context-lifts"
" the-struct_771)"
"(expand-context-lift-envs"
" the-struct_771)"
"(expand-context-module-lifts"
" the-struct_771)"
"(expand-context-require-lifts"
" the-struct_771)"
"(expand-context-to-module-lifts"
" the-struct_771)"
"(expand-context-requires+provides"
" the-struct_771)"
"(expand-context-name"
" the-struct_771)"
"(expand-context-observer"
" the-struct_771)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                           \"expand-context?\""
" the-struct_771))))))"
"(begin"
"(let-values(((lst_773)"
" syms_714)"
"((lst_774)"
" vals_716)"
"((lst_775)"
" ids_713))"
"(begin"
"(if(list?"
" lst_773)"
"(void)"
"(let-values()"
"(in-list"
" lst_773)))"
"(if(list?"
" lst_774)"
"(void)"
"(let-values()"
"(in-list"
" lst_774)))"
"(if(list?"
" lst_775)"
"(void)"
"(let-values()"
"(in-list"
" lst_775)))"
"((letrec-values(((for-loop_776)"
"(lambda(fold-var_777"
" lst_778"
" lst_779"
" lst_780)"
"(if(if(pair?"
" lst_778)"
"(if(pair?"
" lst_779)"
"(pair?"
" lst_780)"
" #f)"
" #f)"
"(let-values(((sym_781)"
"(unsafe-car"
" lst_778))"
"((val_782)"
"(unsafe-car"
" lst_779))"
"((id_783)"
"(unsafe-car"
" lst_780)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((fold-var_784)"
"(let-values(((fold-var_785)"
" fold-var_777))"
"(let-values(((fold-var_786)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_782"
" id_783"
" phase_534)"
"(namespace-set-transformer!"
" m-ns_536"
" phase_534"
" sym_781"
" val_782)))"
"(void)))))"
"(values"
" fold-var_786)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_776"
" fold-var_784"
"(unsafe-cdr"
" lst_778)"
"(unsafe-cdr"
" lst_779)"
"(unsafe-cdr"
" lst_780))"
" fold-var_784))"
" fold-var_777))"
" fold-var_777))))"
" for-loop_776)"
"(void)"
" lst_773"
" lst_774"
" lst_775)))"
"(let-values(((obs_787)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_787"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_787"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body430_788)"
" exp-body_551)"
"((disarmed-exp-body431_789)"
" disarmed-exp-body_552)"
"((temp432_790)"
"(list"
" define-syntaxes403_698"
" ids_713"
" exp-rhs_715)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" exp-body430_788"
" disarmed-exp-body431_789"
" temp432_790)"
"(rebuild102.1"
" exp-body430_788"
" disarmed-exp-body431_789"
" temp432_790)))"
"(loop_547"
" tail?_548"
"(cdr"
" bodys_549))))))))))))))"
"(if(equal? tmp_561 '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_805)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_805"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_805"
" 'enter-prim"
" exp-body_551))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_806)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_806"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_806"
" 'enter-prim-require))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_791)"
"(remove-use-site-scopes"
" disarmed-exp-body_552"
" partial-body-ctx_535)))"
"(let-values(((ok?_792"
" #%require433_793"
" req434_794)"
"(let-values(((s_807)"
" ready-body_791))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_808)"
" s_807))"
"(let-values(((#%require433_809"
" req434_810)"
"(let-values(((s_811)"
"(if(syntax?$1"
" s_807)"
"(syntax-e$1"
" s_807)"
" s_807)))"
"(if(pair?"
" s_811)"
"(let-values(((#%require435_812)"
"(let-values(((s_814)"
"(car"
" s_811)))"
" s_814))"
"((req436_813)"
"(let-values(((s_815)"
"(cdr"
" s_811)))"
"(let-values(((s_816)"
"(if(syntax?$1"
" s_815)"
"(syntax-e$1"
" s_815)"
" s_815)))"
"(let-values(((flat-s_817)"
"(to-syntax-list.1"
" s_816)))"
"(if(not"
" flat-s_817)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                              \"bad syntax\""
" orig-s_808))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                \"bad syntax\""
" orig-s_808))"
"(let-values()"
" flat-s_817))))))))"
"(values"
" #%require435_812"
" req436_813))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                      \"bad syntax\""
" orig-s_808)))))"
"(values"
" #t"
" #%require433_809"
" req434_810)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((...er/expand/module.rkt:678:10_818)"
" parse-and-perform-requires!22.1)"
"((temp437_819)"
" req434_794)"
"((exp-body438_820)"
" exp-body_551)"
"((self439_821)"
" self_537)"
"((m-ns440_822)"
" m-ns_536)"
"((phase441_823)"
" phase_534)"
"((phase442_824)"
" phase_534)"
"((requires+provides443_825)"
" requires+provides_539)"
"((declared-submodule-names444_826)"
" declared-submodule-names_544))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names444_826"
" #t"
" phase442_824"
" #t"
" #f"
" #f"
" self439_821"
" #t"
" #f"
" #f"
" temp437_819"
" exp-body438_820"
" m-ns440_822"
" phase441_823"
" requires+provides443_825)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:678:10_818"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self)"
" 7)"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self)"
"(list"
" declared-submodule-names444_826"
" phase442_824"
" self439_821)"
" temp437_819"
" exp-body438_820"
" m-ns440_822"
" phase441_823"
" requires+provides443_825)))"
"(let-values(((obs_827)"
"(expand-context-observer"
" partial-body-ctx_535)))"
"(if obs_827"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_827"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
" exp-body_551"
"(loop_547"
" tail?_548"
"(cdr"
" bodys_549)))))))))"
"(if(equal? tmp_561 '#%provide)"
"(let-values()"
"(cons"
" exp-body_551"
"(loop_547"
" tail?_548"
"(cdr bodys_549))))"
"(if(equal? tmp_561 'module)"
"(let-values()"
"(let-values(((ready-body_828)"
"(remove-use-site-scopes"
" exp-body_551"
" partial-body-ctx_535)))"
"(let-values(((submod_829)"
"(let-values(((...er/expand/module.rkt:693:12_830)"
" expand-submodule183.1)"
"((ready-body445_831)"
" ready-body_828)"
"((self446_832)"
" self_537)"
"((partial-body-ctx447_833)"
" partial-body-ctx_535)"
"((temp448_834)"
" #f)"
"((declared-submodule-names449_835)"
" declared-submodule-names_544)"
"((mpis-to-reset450_836)"
" mpis-to-reset_545))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names449_835"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp448_834"
" #f"
" #f"
" mpis-to-reset450_836"
" ready-body445_831"
" self446_832"
" partial-body-ctx447_833)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:693:12_830"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names449_835"
" temp448_834"
" mpis-to-reset450_836)"
" ready-body445_831"
" self446_832"
" partial-body-ctx447_833)))))"
"(cons"
" submod_829"
"(loop_547"
" tail?_548"
"(cdr bodys_549))))))"
"(if(equal? tmp_561 'module*)"
"(let-values()"
"(cons"
" exp-body_551"
"(loop_547"
" tail?_548"
"(cdr bodys_549))))"
"(if(equal?"
" tmp_561"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_837"
" #%declare451_838"
" kw452_839)"
"(let-values(((s_850)"
" disarmed-exp-body_552))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_851)"
" s_850))"
"(let-values(((#%declare451_852"
" kw452_853)"
"(let-values(((s_854)"
"(if(syntax?$1"
" s_850)"
"(syntax-e$1"
" s_850)"
" s_850)))"
"(if(pair?"
" s_854)"
"(let-values(((#%declare453_855)"
"(let-values(((s_857)"
"(car"
" s_854)))"
" s_857))"
"((kw454_856)"
"(let-values(((s_858)"
"(cdr"
" s_854)))"
"(let-values(((s_859)"
"(if(syntax?$1"
" s_858)"
"(syntax-e$1"
" s_858)"
" s_858)))"
"(let-values(((flat-s_860)"
"(to-syntax-list.1"
" s_859)))"
"(if(not"
" flat-s_860)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                \"bad syntax\""
" orig-s_851))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                  \"bad syntax\""
" orig-s_851))"
"(let-values()"
" flat-s_860))))))))"
"(values"
" #%declare453_855"
" kw454_856))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                        \"bad syntax\""
" orig-s_851)))))"
"(values"
" #t"
" #%declare451_852"
" kw452_853)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((lst_861)"
" kw452_839))"
"(begin"
"(if(list?"
" lst_861)"
"(void)"
"(let-values()"
"(in-list"
" lst_861)))"
"((letrec-values(((for-loop_862)"
"(lambda(fold-var_863"
" lst_864)"
"(if(pair?"
" lst_864)"
"(let-values(((kw_865)"
"(unsafe-car"
" lst_864)))"
"(if #t"
"(let-values(((fold-var_866)"
"(let-values(((fold-var_867)"
" fold-var_863))"
"(let-values(((fold-var_868)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_865))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"expected a keyword\""
" exp-body_551"
" kw_865)))"
"(if(memq"
"(syntax-e$1"
" kw_865)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"not an allowed declaration keyword\""
" exp-body_551"
" kw_865)))"
"(if(hash-ref"
" declared-keywords_543"
"(syntax-e$1"
" kw_865)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"keyword declared multiple times\""
" exp-body_551"
" kw_865))"
"(void))"
"(hash-set!"
" declared-keywords_543"
"(syntax-e$1"
" kw_865)"
" kw_865)))"
"(void)))))"
"(values"
" fold-var_868)))))"
"(if #t"
"(for-loop_862"
" fold-var_866"
"(unsafe-cdr"
" lst_864))"
" fold-var_866))"
" fold-var_863))"
" fold-var_863))))"
" for-loop_862)"
"(void)"
" lst_861)))"
"(cons"
" exp-body_551"
"(loop_547"
" tail?_548"
"(cdr"
" bodys_549))))))"
"(let-values()"
"(cons"
" exp-body_551"
"(loop_547"
" tail?_548"
"(cdr"
" bodys_549)))))))))))))))))))))))))"
" loop_547)"
" tail?_533"
" bodys_531)))))))))))))))))))))"
"(define-values"
"(unpack76.1)"
"(lambda(given-kws_869 given-args_870 bodys74_871)"
"(let-values(((all-scopes-stx53_872)(car given-args_870))"
"((given-kws_873)(cdr given-kws_869))"
"((given-args_874)(cdr given-args_870)))"
"(let-values(((ctx47_875)(car given-args_874))"
"((given-kws_876)(cdr given-kws_873))"
"((given-args_877)(cdr given-args_874)))"
"(let-values(((declared-keywords55_878)(car given-args_877))"
"((given-kws_879)(cdr given-kws_876))"
"((given-args_880)(cdr given-args_877)))"
"(let-values(((declared-submodule-names56_881)(car given-args_880))"
"((given-kws_882)(cdr given-kws_879))"
"((given-args_883)(cdr given-args_880)))"
"(let-values(((defined-syms54_884)(car given-args_883))"
"((given-kws_885)(cdr given-kws_882))"
"((given-args_886)(cdr given-args_883)))"
"(let-values(((frame-id50_887)(car given-args_886))"
"((given-kws_888)(cdr given-kws_885))"
"((given-args_889)(cdr given-args_886)))"
"(let-values(((loop58_890)(car given-args_889))"
"((given-kws_891)(cdr given-kws_888))"
"((given-args_892)(cdr given-args_889)))"
"(let-values(((mpis-to-reset57_893)(car given-args_892))"
"((given-kws_894)(cdr given-kws_891))"
"((given-args_895)(cdr given-args_892)))"
"(let-values(((namespace48_896)(car given-args_895))"
"((given-kws_897)(cdr given-kws_894))"
"((given-args_898)(cdr given-args_895)))"
"(let-values(((need-eventually-defined52_899)(car given-args_898))"
"((given-kws_900)(cdr given-kws_897))"
"((given-args_901)(cdr given-args_898)))"
"(let-values(((original44_902)(car given-args_901))"
"((given-kws_903)(cdr given-kws_900))"
"((given-args_904)(cdr given-args_901)))"
"(let-values(((phase46_905)(car given-args_904))"
"((given-kws_906)(cdr given-kws_903))"
"((given-args_907)(cdr given-args_904)))"
"(let-values(((requires-and-provides51_908)(car given-args_907))"
"((given-kws_909)(cdr given-kws_906))"
"((given-args_910)(cdr given-args_907)))"
"(let-values(((self49_911)(car given-args_910))"
"((given-kws_912)(cdr given-kws_909))"
"((given-args_913)(cdr given-args_910)))"
"(let-values(((tail?45_914)(car given-args_913)))"
"(partially-expand-bodys75.1"
" all-scopes-stx53_872"
" ctx47_875"
" declared-keywords55_878"
" declared-submodule-names56_881"
" defined-syms54_884"
" frame-id50_887"
" loop58_890"
" mpis-to-reset57_893"
" namespace48_896"
" need-eventually-defined52_899"
" original44_902"
" phase46_905"
" requires-and-provides51_908"
" self49_911"
" tail?45_914"
" bodys74_871))))))))))))))))))"
"(define-values"
"(partially-expand-bodys77.1)"
"(lifted/2.1"
"(lambda(given-kws_915 given-argc_916)"
"(if(= given-argc_916 3)"
"(let-values(((l2_917) given-kws_915))"
"(if(pair? l2_917)"
"(if(eq?(car l2_917) '#:all-scopes-stx)"
"(let-values(((l2_918)(cdr l2_917)))"
"(if(pair? l2_918)"
"(if(eq?(car l2_918) '#:ctx)"
"(let-values(((l2_919)(cdr l2_918)))"
"(if(pair? l2_919)"
"(if(eq?(car l2_919) '#:declared-keywords)"
"(let-values(((l2_920)(cdr l2_919)))"
"(if(pair? l2_920)"
"(if(eq?(car l2_920) '#:declared-submodule-names)"
"(let-values(((l2_921)(cdr l2_920)))"
"(if(pair? l2_921)"
"(if(eq?(car l2_921) '#:defined-syms)"
"(let-values(((l2_922)(cdr l2_921)))"
"(if(pair? l2_922)"
"(if(eq?(car l2_922) '#:frame-id)"
"(let-values(((l2_923)(cdr l2_922)))"
"(if(pair? l2_923)"
"(if(eq?(car l2_923) '#:loop)"
"(let-values(((l2_924)(cdr l2_923)))"
"(if(pair? l2_924)"
"(if(eq?(car l2_924) '#:mpis-to-reset)"
"(let-values(((l2_925)(cdr l2_924)))"
"(if(pair? l2_925)"
"(if(eq?(car l2_925) '#:namespace)"
"(let-values(((l2_926)(cdr l2_925)))"
"(if(pair? l2_926)"
"(if(eq?(car l2_926) '#:need-eventually-defined)"
"(let-values(((l2_927)(cdr l2_926)))"
"(if(pair? l2_927)"
"(if(eq?(car l2_927) '#:original)"
"(let-values(((l2_928)(cdr l2_927)))"
"(if(pair? l2_928)"
"(if(eq?(car l2_928) '#:phase)"
"(let-values(((l2_929)(cdr l2_928)))"
"(if(pair? l2_929)"
"(if(eq?"
"(car l2_929)"
" '#:requires-and-provides)"
"(let-values(((l2_930)"
"(cdr l2_929)))"
"(if(pair? l2_930)"
"(if(eq?(car l2_930) '#:self)"
"(let-values(((l2_931)"
"(cdr l2_930)))"
"(if(pair? l2_931)"
"(if(eq?"
"(car l2_931)"
" '#:tail?)"
"(null?(cdr l2_931))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_932 given-args_933 bodys_934)(unpack76.1 given-kws_932 given-args_933 bodys_934)))"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_935 frame-id_936 inside-scope_937 all-scopes-stx_938 defined-syms_939 requires+provides_940)"
"(lambda(ids_941 rhs_942 phase_943)"
"(let-values(((scoped-ids_944)"
"(alt-reverse"
"(let-values(((lst_945) ids_941))"
"(begin"
"(if(list? lst_945)(void)(let-values()(in-list lst_945)))"
"((letrec-values(((for-loop_946)"
"(lambda(fold-var_947 lst_948)"
"(if(pair? lst_948)"
"(let-values(((id_949)(unsafe-car lst_948)))"
"(if #t"
"(let-values(((fold-var_950)"
"(let-values(((fold-var_951) fold-var_947))"
"(let-values(((fold-var_952)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_949"
" inside-scope_937))"
" fold-var_951))))"
"(values fold-var_952)))))"
"(if #t"
"(for-loop_946 fold-var_950(unsafe-cdr lst_948))"
" fold-var_950))"
" fold-var_947))"
" fold-var_947))))"
" for-loop_946)"
" null"
" lst_945))))))"
"(begin"
"(let-values(((...er/expand/module.rkt:727:4_953) select-defined-syms-and-bind!18.1)"
"((scoped-ids455_954) scoped-ids_944)"
"((defined-syms456_955) defined-syms_939)"
"((self457_956) self_935)"
"((phase458_957) phase_943)"
"((all-scopes-stx459_958) all-scopes-stx_938)"
"((frame-id460_959) frame-id_936)"
"((requires+provides461_960) requires+provides_940))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id460_959"
" #f"
" #f"
" requires+provides461_960"
" #t"
" #f"
" #f"
" scoped-ids455_954"
" defined-syms456_955"
" self457_956"
" phase458_957"
" all-scopes-stx459_958)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:727:4_953"
" keyword-procedure-extract"
" '(#:frame-id #:requires+provides)"
" 7)"
" '(#:frame-id #:requires+provides)"
"(list frame-id460_959 requires+provides461_960)"
" scoped-ids455_954"
" defined-syms456_955"
" self457_956"
" phase458_957"
" all-scopes-stx459_958)))"
"(values"
" scoped-ids_944"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_943) 'define-values)"
" scoped-ids_944"
" rhs_942))"
" inside-scope_937)))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_961 ctx_962)"
"(let-values(((sc_963)(root-expand-context-post-expansion-scope ctx_962)))"
"(alt-reverse"
"(let-values(((lst_964) bodys_961))"
"(begin"
"(if(list? lst_964)(void)(let-values()(in-list lst_964)))"
"((letrec-values(((for-loop_965)"
"(lambda(fold-var_966 lst_967)"
"(if(pair? lst_967)"
"(let-values(((body_968)(unsafe-car lst_967)))"
"(if #t"
"(let-values(((fold-var_969)"
"(let-values(((fold-var_970) fold-var_966))"
"(let-values(((fold-var_971)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_968 sc_963))"
" fold-var_970))))"
"(values fold-var_971)))))"
"(if #t(for-loop_965 fold-var_969(unsafe-cdr lst_967)) fold-var_969))"
" fold-var_966))"
" fold-var_966))))"
" for-loop_965)"
" null"
" lst_964)))))))"
"(define-values"
"(lifted/3.1)"
"(make-required"
" 'finish-expanding-body-expressons"
"(case-lambda((self_972 partially-expanded-bodys_973)(apply missing-kw self_972 partially-expanded-bodys_973 null)))"
" #f"
" #f))"
"(define-values"
"(finish-expanding-body-expressons91.1)"
"(lambda(ctx80_974"
" declared-submodule-names82_975"
" mpis-to-reset83_976"
" phase79_977"
" self81_978"
" tail?78_979"
" partially-expanded-bodys90_980)"
"(let-values(((partially-expanded-bodys_981) partially-expanded-bodys90_980))"
"(let-values(((tail?_982) tail?78_979))"
"(let-values(((phase_983) phase79_977))"
"(let-values(((body-ctx_984) ctx80_974))"
"(let-values(((self_985) self81_978))"
"(let-values(((declared-submodule-names_986) declared-submodule-names82_975))"
"(let-values(((mpis-to-reset_987) mpis-to-reset83_976))"
"(let-values()"
"((letrec-values(((loop_988)"
"(lambda(tail?_989 bodys_990)"
"(if(null? bodys_990)"
"(let-values()"
"(if tail?_989"
"(let-values()"
"(let-values(((bodys_991)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_984))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_984)))))"
"(if(null? bodys_991) null(loop_988 #t bodys_991))))"
"(let-values() bodys_990)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_997)"
"(expand-context-observer body-ctx_984)))"
"(if obs_997"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_997 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-body_992)(syntax-disarm$1(car bodys_990))))"
"(let-values(((exp-body_993)"
"(let-values(((tmp_998)"
"(core-form-sym"
" disarmed-body_992"
" phase_983)))"
"(if(equal? tmp_998 'define-values)"
"(let-values()"
"(let-values(((ok?_999"
" define-values462_1000"
" id463_1001"
" rhs464_1002)"
"(let-values(((s_1016)"
" disarmed-body_992))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1017)"
" s_1016))"
"(let-values(((define-values462_1018"
" id463_1019"
" rhs464_1020)"
"(let-values(((s_1021)"
"(if(syntax?$1"
" s_1016)"
"(syntax-e$1"
" s_1016)"
" s_1016)))"
"(if(pair?"
" s_1021)"
"(let-values(((define-values465_1022)"
"(let-values(((s_1025)"
"(car"
" s_1021)))"
" s_1025))"
"((id466_1023"
" rhs467_1024)"
"(let-values(((s_1026)"
"(cdr"
" s_1021)))"
"(let-values(((s_1027)"
"(if(syntax?$1"
" s_1026)"
"(syntax-e$1"
" s_1026)"
" s_1026)))"
"(if(pair?"
" s_1027)"
"(let-values(((id468_1028)"
"(let-values(((s_1030)"
"(car"
" s_1027)))"
"(let-values(((s_1031)"
"(if(syntax?$1"
" s_1030)"
"(syntax-e$1"
" s_1030)"
" s_1030)))"
"(let-values(((flat-s_1032)"
"(to-syntax-list.1"
" s_1031)))"
"(if(not"
" flat-s_1032)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_1017))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_1017))"
"(let-values()"
"(let-values(((id_1033)"
"(let-values(((lst_1034)"
" flat-s_1032))"
"(begin"
"(if(list?"
" lst_1034)"
"(void)"
"(let-values()"
"(in-list"
" lst_1034)))"
"((letrec-values(((for-loop_1035)"
"(lambda(id_1036"
" lst_1037)"
"(if(pair?"
" lst_1037)"
"(let-values(((s_1038)"
"(unsafe-car"
" lst_1037)))"
"(if #t"
"(let-values(((id_1039)"
"(let-values(((id_1040)"
" id_1036))"
"(let-values(((id_1041)"
"(let-values()"
"(let-values(((id474_1042)"
"(let-values()"
"(if(let-values(((or-part_1043)"
"(if(syntax?$1"
" s_1038)"
"(symbol?"
"(syntax-e$1"
" s_1038))"
" #f)))"
"(if or-part_1043"
" or-part_1043"
"(symbol?"
" s_1038)))"
" s_1038"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_1017"
" s_1038)))))"
"(cons"
" id474_1042"
" id_1040)))))"
"(values"
" id_1041)))))"
"(if #t"
"(for-loop_1035"
" id_1039"
"(unsafe-cdr"
" lst_1037))"
" id_1039))"
" id_1036))"
" id_1036))))"
" for-loop_1035)"
" null"
" lst_1034)))))"
"(alt-reverse"
" id_1033)))))))))"
"((rhs469_1029)"
"(let-values(((s_1044)"
"(cdr"
" s_1027)))"
"(let-values(((s_1045)"
"(if(syntax?$1"
" s_1044)"
"(syntax-e$1"
" s_1044)"
" s_1044)))"
"(if(pair?"
" s_1045)"
"(let-values(((rhs470_1046)"
"(let-values(((s_1047)"
"(car"
" s_1045)))"
" s_1047))"
"(()"
"(let-values(((s_1048)"
"(cdr"
" s_1045)))"
"(let-values(((s_1049)"
"(if(syntax?$1"
" s_1048)"
"(syntax-e$1"
" s_1048)"
" s_1048)))"
"(if(null?"
" s_1049)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_1017))))))"
"(values"
" rhs470_1046))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_1017))))))"
"(values"
" id468_1028"
" rhs469_1029))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_1017))))))"
"(values"
" define-values465_1022"
" id466_1023"
" rhs467_1024))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_1017)))))"
"(values"
" #t"
" define-values462_1018"
" id463_1019"
" rhs464_1020)))"
"(values #f #f #f #f)))))"
"(let-values(((exp-rhs_1015)"
"(let-values(((temp475_1050)"
" rhs464_1002)"
"((temp476_1051)"
"(as-named-context"
"(as-expression-context"
" body-ctx_984)"
" id463_1001)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp475_1050"
" temp476_1051)"
"(expand7.1"
" temp475_1050"
" temp476_1051)))))"
"(let-values(((temp471_1052)(car bodys_990))"
"((disarmed-body472_1053)"
" disarmed-body_992)"
"((temp473_1054)"
"(list"
" define-values462_1000"
" id463_1001"
" exp-rhs_1015)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" temp471_1052"
" disarmed-body472_1053"
" temp473_1054)"
"(rebuild102.1"
" temp471_1052"
" disarmed-body472_1053"
" temp473_1054))))))"
"(if(if(equal? tmp_998 'define-syntaxes)"
" #t"
"(if(equal? tmp_998 '#%require)"
" #t"
"(if(equal? tmp_998 '#%provide)"
" #t"
"(if(equal? tmp_998 'begin-for-syntax)"
" #t"
"(if(equal? tmp_998 'module)"
" #t"
"(if(equal? tmp_998 'module*)"
" #t"
"(equal? tmp_998 '#%declare)))))))"
"(let-values()(car bodys_990))"
"(let-values()"
"(let-values(((temp477_1055)(car bodys_990))"
"((temp478_1056)"
"(as-expression-context"
" body-ctx_984)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp477_1055 temp478_1056)"
"(expand7.1 temp477_1055 temp478_1056)))))))))"
"(let-values(((lifted-defns_994)"
"(loop_988"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_984)))))"
"(let-values(((lifted-requires_995)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_984))))"
"(let-values(((lifted-modules_996)"
"(let-values(((...er/expand/module.rkt:795:8_1057)"
" expand-non-module*-submodules194.1)"
"((temp479_1058)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_984)))"
"((phase480_1059) phase_983)"
"((self481_1060) self_985)"
"((body-ctx482_1061) body-ctx_984)"
"((mpis-to-reset483_1062)"
" mpis-to-reset_987)"
"((declared-submodule-names484_1063)"
" declared-submodule-names_986))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-non-module*-submodules194.1))"
"(expand-non-module*-submodules192.1"
" declared-submodule-names484_1063"
" mpis-to-reset483_1062"
" temp479_1058"
" phase480_1059"
" self481_1060"
" body-ctx482_1061)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:795:8_1057"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:mpis-to-reset)"
" 6)"
" '(#:declared-submodule-names #:mpis-to-reset)"
"(list"
" declared-submodule-names484_1063"
" mpis-to-reset483_1062)"
" temp479_1058"
" phase480_1059"
" self481_1060"
" body-ctx482_1061)))))"
"(begin"
"(if(null? lifted-defns_994)"
"(let-values()"
"(let-values(((obs_1064)"
"(expand-context-observer body-ctx_984)))"
"(if obs_1064"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1064"
" 'module-lift-loop"
" lifted-defns_994))"
"(void)))"
"(void))))"
"(let-values()"
"(let-values(((obs_1065)"
"(expand-context-observer body-ctx_984)))"
"(if obs_1065"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1065"
" 'module-lift-end-loop"
"(cons exp-body_993(cdr bodys_990))))"
"(void)))"
"(void)))))"
"(append"
" lifted-requires_995"
" lifted-defns_994"
" lifted-modules_996"
"(cons"
" exp-body_993"
"(loop_988 tail?_989(cdr bodys_990))))))))))))))))"
" loop_988)"
" tail?_982"
" partially-expanded-bodys_981)))))))))))"
"(define-values"
"(unpack92.1)"
"(lambda(given-kws_1066 given-args_1067 partially-expanded-bodys90_1068)"
"(let-values(((ctx80_1069)(car given-args_1067))"
"((given-kws_1070)(cdr given-kws_1066))"
"((given-args_1071)(cdr given-args_1067)))"
"(let-values(((declared-submodule-names82_1072)(car given-args_1071))"
"((given-kws_1073)(cdr given-kws_1070))"
"((given-args_1074)(cdr given-args_1071)))"
"(let-values(((mpis-to-reset83_1075)(car given-args_1074))"
"((given-kws_1076)(cdr given-kws_1073))"
"((given-args_1077)(cdr given-args_1074)))"
"(let-values(((phase79_1078)(car given-args_1077))"
"((given-kws_1079)(cdr given-kws_1076))"
"((given-args_1080)(cdr given-args_1077)))"
"(let-values(((self81_1081)(car given-args_1080))"
"((given-kws_1082)(cdr given-kws_1079))"
"((given-args_1083)(cdr given-args_1080)))"
"(let-values(((tail?78_1084)(car given-args_1083)))"
"(finish-expanding-body-expressons91.1"
" ctx80_1069"
" declared-submodule-names82_1072"
" mpis-to-reset83_1075"
" phase79_1078"
" self81_1081"
" tail?78_1084"
" partially-expanded-bodys90_1068)))))))))"
"(define-values"
"(finish-expanding-body-expressons93.1)"
"(lifted/3.1"
"(lambda(given-kws_1085 given-argc_1086)"
"(if(= given-argc_1086 3)"
"(let-values(((l2_1087) given-kws_1085))"
"(if(pair? l2_1087)"
"(if(eq?(car l2_1087) '#:ctx)"
"(let-values(((l2_1088)(cdr l2_1087)))"
"(if(pair? l2_1088)"
"(if(eq?(car l2_1088) '#:declared-submodule-names)"
"(let-values(((l2_1089)(cdr l2_1088)))"
"(if(pair? l2_1089)"
"(if(eq?(car l2_1089) '#:mpis-to-reset)"
"(let-values(((l2_1090)(cdr l2_1089)))"
"(if(pair? l2_1090)"
"(if(eq?(car l2_1090) '#:phase)"
"(let-values(((l2_1091)(cdr l2_1090)))"
"(if(pair? l2_1091)"
"(if(eq?(car l2_1091) '#:self)"
"(let-values(((l2_1092)(cdr l2_1091)))"
"(if(pair? l2_1092)"
"(if(eq?(car l2_1092) '#:tail?)(null?(cdr l2_1092)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1093 given-args_1094 partially-expanded-bodys_1095)"
"(unpack92.1 given-kws_1093 given-args_1094 partially-expanded-bodys_1095)))"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_1096 self_1097)"
"(let-values(((ht_1098) need-eventually-defined_1096))"
"(begin"
"(if((lambda(ht_1099)(hash? ht_1099)) ht_1098)(void)(let-values()(default-in-hash ht_1098)))"
"((letrec-values(((for-loop_1100)"
"(lambda(fold-var_1101 i_1102)"
"(if i_1102"
"(let-values(((phase_1103 l_1104)(hash-iterate-key+value ht_1098 i_1102)))"
"(if #t"
"(let-values(((fold-var_1105)"
"(let-values(((fold-var_1106) fold-var_1101))"
"(let-values(((fold-var_1107)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_1108) l_1104))"
"(begin"
"(if(list? lst_1108)"
"(void)"
"(let-values()(in-list lst_1108)))"
"((letrec-values(((for-loop_1109)"
"(lambda(fold-var_1110"
" lst_1111)"
"(if(pair? lst_1111)"
"(let-values(((id_1112)"
"(unsafe-car"
" lst_1111)))"
"(if #t"
"(let-values(((fold-var_1113)"
"(let-values(((fold-var_1114)"
" fold-var_1110))"
"(let-values(((fold-var_1115)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1116)"
"(let-values(((id485_1117)"
" id_1112)"
"((phase486_1118)"
" phase_1103))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id485_1117"
" phase486_1118)"
"(resolve+shift15.1"
" id485_1117"
" phase486_1118)))))"
"(if(if b_1116"
"(if(module-binding?"
" b_1116)"
"(if(eq?"
"(module-binding-sym"
" b_1116)"
"(syntax-e$1"
" id_1112))"
"(eq?"
"(module-binding-module"
" b_1116)"
" self_1097)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"reference to an unbound identifier\""
" id_1112)))))"
"(void)))))"
"(values"
" fold-var_1115)))))"
"(if #t"
"(for-loop_1109"
" fold-var_1113"
"(unsafe-cdr"
" lst_1111))"
" fold-var_1113))"
" fold-var_1110))"
" fold-var_1110))))"
" for-loop_1109)"
"(void)"
" lst_1108))))"
"(void)))))"
"(values fold-var_1107)))))"
"(if #t"
"(for-loop_1100 fold-var_1105(hash-iterate-next ht_1098 i_1102))"
" fold-var_1105))"
" fold-var_1101))"
" fold-var_1101))))"
" for-loop_1100)"
"(void)"
"(hash-iterate-first ht_1098))))))"
"(define-values"
"(lifted/4.1)"
"(make-required"
" 'resolve-provides"
"(case-lambda"
"((self_1119 expression-expanded-bodys_1120)(apply missing-kw self_1119 expression-expanded-bodys_1120 null)))"
" #f"
" #f))"
"(define-values"
"(resolve-provides109.1)"
"(lambda(ctx100_1121"
" declared-submodule-names96_1122"
" namespace97_1123"
" original94_1124"
" phase98_1125"
" requires-and-provides95_1126"
" self99_1127"
" expression-expanded-bodys108_1128)"
"(let-values(((expression-expanded-bodys_1129) expression-expanded-bodys108_1128))"
"(let-values(((s_1130) original94_1124))"
"(let-values(((requires+provides_1131) requires-and-provides95_1126))"
"(let-values(((declared-submodule-names_1132) declared-submodule-names96_1122))"
"(let-values(((m-ns_1133) namespace97_1123))"
"(let-values(((phase_1134) phase98_1125))"
"(let-values(((self_1135) self99_1127))"
"(let-values(((ctx_1136) ctx100_1121))"
"(let-values()"
"((letrec-values(((loop_1137)"
"(lambda(bodys_1138 phase_1139)"
"(if(null? bodys_1138)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1140)(syntax-disarm$1(car bodys_1138))))"
"(let-values(((tmp_1141)(core-form-sym disarmed-body_1140 phase_1139)))"
"(if(equal? tmp_1141 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1157)"
"(expand-context-observer ctx_1136)))"
"(if obs_1157"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1157"
" 'enter-prim"
"(car bodys_1138)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1158)"
"(expand-context-observer"
" ctx_1136)))"
"(if obs_1158"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1158"
" 'enter-prim-provide))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1142 #%provide487_1143 spec488_1144)"
"(let-values(((s_1159) disarmed-body_1140))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1160) s_1159))"
"(let-values(((#%provide487_1161"
" spec488_1162)"
"(let-values(((s_1163)"
"(if(syntax?$1"
" s_1159)"
"(syntax-e$1"
" s_1159)"
" s_1159)))"
"(if(pair? s_1163)"
"(let-values(((#%provide489_1164)"
"(let-values(((s_1166)"
"(car"
" s_1163)))"
" s_1166))"
"((spec490_1165)"
"(let-values(((s_1167)"
"(cdr"
" s_1163)))"
"(let-values(((s_1168)"
"(if(syntax?$1"
" s_1167)"
"(syntax-e$1"
" s_1167)"
" s_1167)))"
"(let-values(((flat-s_1169)"
"(to-syntax-list.1"
" s_1168)))"
"(if(not"
" flat-s_1169)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1160))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1160))"
"(let-values()"
" flat-s_1169))))))))"
"(values"
" #%provide489_1164"
" spec490_1165))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_1160)))))"
"(values"
" #t"
" #%provide487_1161"
" spec488_1162)))"
"(values #f #f #f)))))"
"(let-values(((track-stxes_1155 specs_1156)"
"(parse-and-expand-provides!"
" spec488_1144"
"(car bodys_1138)"
" requires+provides_1131"
" self_1135"
" phase_1139"
"(let-values(((the-struct_1170) ctx_1136))"
"(if(expand-context? the-struct_1170)"
"(let-values(((context491_1171)"
" 'top-level)"
"((phase492_1172) phase_1139)"
"((namespace493_1173)"
"(namespace->namespace-at-phase"
" m-ns_1133"
" phase_1139))"
"((requires+provides494_1174)"
" requires+provides_1131)"
"((declared-submodule-names495_1175)"
" declared-submodule-names_1132))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1170)"
"(root-expand-context-post-expansion-scope"
" the-struct_1170)"
"(root-expand-context-top-level-bind-scope"
" the-struct_1170)"
"(root-expand-context-all-scopes-stx"
" the-struct_1170)"
"(root-expand-context-use-site-scopes"
" the-struct_1170)"
"(root-expand-context-defined-syms"
" the-struct_1170)"
"(root-expand-context-frame-id"
" the-struct_1170)"
"(root-expand-context-counter"
" the-struct_1170)"
"(root-expand-context-lift-key"
" the-struct_1170)"
" context491_1171"
" phase492_1172"
" namespace493_1173"
"(expand-context-env the-struct_1170)"
"(expand-context-user-env"
" the-struct_1170)"
"(expand-context-post-expansion-scope-action"
" the-struct_1170)"
"(expand-context-scopes"
" the-struct_1170)"
"(expand-context-def-ctx-scopes"
" the-struct_1170)"
"(expand-context-reference-records"
" the-struct_1170)"
"(expand-context-only-immediate?"
" the-struct_1170)"
"(expand-context-just-once?"
" the-struct_1170)"
"(expand-context-module-begin-k"
" the-struct_1170)"
"(expand-context-need-eventually-defined"
" the-struct_1170)"
"(expand-context-allow-unbound?"
" the-struct_1170)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1170)"
"(expand-context-stops the-struct_1170)"
"(expand-context-current-introduction-scopes"
" the-struct_1170)"
" declared-submodule-names495_1175"
"(expand-context-lifts the-struct_1170)"
"(expand-context-lift-envs"
" the-struct_1170)"
"(expand-context-module-lifts"
" the-struct_1170)"
"(expand-context-require-lifts"
" the-struct_1170)"
"(expand-context-to-module-lifts"
" the-struct_1170)"
" requires+provides494_1174"
"(expand-context-name the-struct_1170)"
"(expand-context-observer"
" the-struct_1170)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                \"expand-context?\""
" the-struct_1170)))"
" expand7.1"
" rebuild102.1)))"
"(begin"
"(let-values(((obs_1176)"
"(expand-context-observer ctx_1136)))"
"(if obs_1176"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_1176 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(syntax-track-origin*"
" track-stxes_1155"
"(let-values(((temp496_1177)(car bodys_1138))"
"((disarmed-body497_1178)"
" disarmed-body_1140)"
"((temp498_1179)"
"(list* #%provide487_1143 specs_1156)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" temp496_1177"
" disarmed-body497_1178"
" temp498_1179)"
"(rebuild102.1"
" temp496_1177"
" disarmed-body497_1178"
" temp498_1179))))"
"(loop_1137(cdr bodys_1138) phase_1139))))))))"
"(if(equal? tmp_1141 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1180 begin-for-syntax499_1181 e500_1182)"
"(let-values(((s_1194) disarmed-body_1140))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1195) s_1194))"
"(let-values(((begin-for-syntax499_1196"
" e500_1197)"
"(let-values(((s_1198)"
"(if(syntax?$1"
" s_1194)"
"(syntax-e$1"
" s_1194)"
" s_1194)))"
"(if(pair? s_1198)"
"(let-values(((begin-for-syntax501_1199)"
"(let-values(((s_1201)"
"(car"
" s_1198)))"
" s_1201))"
"((e502_1200)"
"(let-values(((s_1202)"
"(cdr"
" s_1198)))"
"(let-values(((s_1203)"
"(if(syntax?$1"
" s_1202)"
"(syntax-e$1"
" s_1202)"
" s_1202)))"
"(let-values(((flat-s_1204)"
"(to-syntax-list.1"
" s_1203)))"
"(if(not"
" flat-s_1204)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_1195))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1195))"
"(let-values()"
" flat-s_1204))))))))"
"(values"
" begin-for-syntax501_1199"
" e502_1200))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_1195)))))"
"(values"
" #t"
" begin-for-syntax499_1196"
" e500_1197)))"
"(values #f #f #f)))))"
"(let-values(((nested-bodys_1193)"
"(loop_1137 e500_1182(add1 phase_1139))))"
"(cons"
"(let-values(((temp503_1205)(car bodys_1138))"
"((disarmed-body504_1206) disarmed-body_1140)"
"((temp505_1207)"
"(list*"
" begin-for-syntax499_1181"
" nested-bodys_1193)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" temp503_1205"
" disarmed-body504_1206"
" temp505_1207)"
"(rebuild102.1"
" temp503_1205"
" disarmed-body504_1206"
" temp505_1207)))"
"(loop_1137(cdr bodys_1138) phase_1139)))))"
"(let-values()"
"(cons"
"(car bodys_1138)"
"(loop_1137(cdr bodys_1138) phase_1139))))))))))))"
" loop_1137)"
" expression-expanded-bodys_1129"
" phase_1134))))))))))))"
"(define-values"
"(unpack110.1)"
"(lambda(given-kws_1208 given-args_1209 expression-expanded-bodys108_1210)"
"(let-values(((ctx100_1211)(car given-args_1209))"
"((given-kws_1212)(cdr given-kws_1208))"
"((given-args_1213)(cdr given-args_1209)))"
"(let-values(((declared-submodule-names96_1214)(car given-args_1213))"
"((given-kws_1215)(cdr given-kws_1212))"
"((given-args_1216)(cdr given-args_1213)))"
"(let-values(((namespace97_1217)(car given-args_1216))"
"((given-kws_1218)(cdr given-kws_1215))"
"((given-args_1219)(cdr given-args_1216)))"
"(let-values(((original94_1220)(car given-args_1219))"
"((given-kws_1221)(cdr given-kws_1218))"
"((given-args_1222)(cdr given-args_1219)))"
"(let-values(((phase98_1223)(car given-args_1222))"
"((given-kws_1224)(cdr given-kws_1221))"
"((given-args_1225)(cdr given-args_1222)))"
"(let-values(((requires-and-provides95_1226)(car given-args_1225))"
"((given-kws_1227)(cdr given-kws_1224))"
"((given-args_1228)(cdr given-args_1225)))"
"(let-values(((self99_1229)(car given-args_1228)))"
"(resolve-provides109.1"
" ctx100_1211"
" declared-submodule-names96_1214"
" namespace97_1217"
" original94_1220"
" phase98_1223"
" requires-and-provides95_1226"
" self99_1229"
" expression-expanded-bodys108_1210))))))))))"
"(define-values"
"(resolve-provides111.1)"
"(lifted/4.1"
"(lambda(given-kws_1230 given-argc_1231)"
"(if(= given-argc_1231 3)"
"(let-values(((l2_1232) given-kws_1230))"
"(if(pair? l2_1232)"
"(if(eq?(car l2_1232) '#:ctx)"
"(let-values(((l2_1233)(cdr l2_1232)))"
"(if(pair? l2_1233)"
"(if(eq?(car l2_1233) '#:declared-submodule-names)"
"(let-values(((l2_1234)(cdr l2_1233)))"
"(if(pair? l2_1234)"
"(if(eq?(car l2_1234) '#:namespace)"
"(let-values(((l2_1235)(cdr l2_1234)))"
"(if(pair? l2_1235)"
"(if(eq?(car l2_1235) '#:original)"
"(let-values(((l2_1236)(cdr l2_1235)))"
"(if(pair? l2_1236)"
"(if(eq?(car l2_1236) '#:phase)"
"(let-values(((l2_1237)(cdr l2_1236)))"
"(if(pair? l2_1237)"
"(if(eq?(car l2_1237) '#:requires-and-provides)"
"(let-values(((l2_1238)(cdr l2_1237)))"
"(if(pair? l2_1238)"
"(if(eq?(car l2_1238) '#:self)(null?(cdr l2_1238)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1239 given-args_1240 expression-expanded-bodys_1241)"
"(unpack110.1 given-kws_1239 given-args_1240 expression-expanded-bodys_1241)))"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/5.1)"
"(make-required"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_1242 fully-expanded-bodys-except-post-submodules_1243)"
"(apply missing-kw self_1242 fully-expanded-bodys-except-post-submodules_1243 null)))"
" #f"
" #f))"
"(define-values"
"(declare-module-for-expansion129.1)"
"(lambda(enclosing118_1244"
" module-begin-id114_1245"
" module-intial-require113_1246"
" module-name-id112_1247"
" namespace116_1248"
" requires-and-provides115_1249"
" root-ctx119_1250"
" self117_1251"
" fully-expanded-bodys-except-post-submodules128_1252)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1253)"
" fully-expanded-bodys-except-post-submodules128_1252))"
"(let-values(((module-name-id_1254) module-name-id112_1247))"
"(let-values(((module-initial-require_1255) module-intial-require113_1246))"
"(let-values(((module-begin-id_1256) module-begin-id114_1245))"
"(let-values(((requires+provides_1257) requires-and-provides115_1249))"
"(let-values(((m-ns_1258) namespace116_1248))"
"(let-values(((self_1259) self117_1251))"
"(let-values(((enclosing-self_1260) enclosing118_1244))"
"(let-values(((root-ctx_1261) root-ctx119_1250))"
"(let-values()"
"(let-values(((tmp-mod_1262)"
"(attach-root-expand-context-properties"
"(attach-require-provide-properties"
" requires+provides_1257"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1 core-stx 'module)"
" module-name-id_1254"
" module-initial-require_1255"
"(list*"
" module-begin-id_1256"
" fully-expanded-bodys-except-post-submodules_1253)))"
" self_1259"
" self_1259)"
" root-ctx_1261"
" self_1259"
" self_1259)))"
"(let-values(((module-name_1263)"
"(1/module-path-index-resolve"
"(let-values(((or-part_1265) enclosing-self_1260))"
"(if or-part_1265 or-part_1265 self_1259)))))"
"(let-values(((root-module-name_1264)(resolved-module-path-root-name module-name_1263)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1258"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1264))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:904:4_1266) eval-module10.1)"
"((temp506_1267)"
"(let-values(((...er/expand/module.rkt:905:5_1269) compile-module15.1)"
"((tmp-mod508_1270) tmp-mod_1262)"
"((temp509_1271)"
"(let-values(((...er/expand/module.rkt:906:21_1274)"
" make-compile-context16.1)"
"((m-ns512_1275) m-ns_1258)"
"((enclosing-self513_1276) enclosing-self_1260)"
"((temp514_1277)"
"(if enclosing-self_1260"
"(1/resolved-module-path-name"
" module-name_1263)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" temp514_1277"
" #t"
" #f"
" #f"
" enclosing-self513_1276"
" #t"
" m-ns512_1275"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:906:21_1274"
" keyword-procedure-extract"
" '(#:full-module-name #:module-self #:namespace)"
" 2)"
" '(#:full-module-name #:module-self #:namespace)"
"(list"
" temp514_1277"
" enclosing-self513_1276"
" m-ns512_1275)))))"
"((self510_1272) self_1259)"
"((temp511_1273) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module15.1))"
"(compile-module13.1"
" #f"
" #f"
" self510_1272"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp511_1273"
" #t"
" tmp-mod508_1270"
" temp509_1271)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:905:5_1269"
" keyword-procedure-extract"
" '(#:self #:with-submodules?)"
" 4)"
" '(#:self #:with-submodules?)"
"(list self510_1272 temp511_1273)"
" tmp-mod508_1270"
" temp509_1271))))"
"((temp507_1268) #f))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 #f #f #f #f temp507_1268 #t temp506_1267)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:904:4_1266"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 3)"
" '(#:with-submodules?)"
"(list temp507_1268)"
" temp506_1267))))))))))))))))))))"
"(define-values"
"(unpack130.1)"
"(lambda(given-kws_1278 given-args_1279 fully-expanded-bodys-except-post-submodules128_1280)"
"(let-values(((enclosing118_1281)(car given-args_1279))"
"((given-kws_1282)(cdr given-kws_1278))"
"((given-args_1283)(cdr given-args_1279)))"
"(let-values(((module-begin-id114_1284)(car given-args_1283))"
"((given-kws_1285)(cdr given-kws_1282))"
"((given-args_1286)(cdr given-args_1283)))"
"(let-values(((module-intial-require113_1287)(car given-args_1286))"
"((given-kws_1288)(cdr given-kws_1285))"
"((given-args_1289)(cdr given-args_1286)))"
"(let-values(((module-name-id112_1290)(car given-args_1289))"
"((given-kws_1291)(cdr given-kws_1288))"
"((given-args_1292)(cdr given-args_1289)))"
"(let-values(((namespace116_1293)(car given-args_1292))"
"((given-kws_1294)(cdr given-kws_1291))"
"((given-args_1295)(cdr given-args_1292)))"
"(let-values(((requires-and-provides115_1296)(car given-args_1295))"
"((given-kws_1297)(cdr given-kws_1294))"
"((given-args_1298)(cdr given-args_1295)))"
"(let-values(((root-ctx119_1299)(car given-args_1298))"
"((given-kws_1300)(cdr given-kws_1297))"
"((given-args_1301)(cdr given-args_1298)))"
"(let-values(((self117_1302)(car given-args_1301)))"
"(declare-module-for-expansion129.1"
" enclosing118_1281"
" module-begin-id114_1284"
" module-intial-require113_1287"
" module-name-id112_1290"
" namespace116_1293"
" requires-and-provides115_1296"
" root-ctx119_1299"
" self117_1302"
" fully-expanded-bodys-except-post-submodules128_1280)))))))))))"
"(define-values"
"(declare-module-for-expansion131.1)"
"(lifted/5.1"
"(lambda(given-kws_1303 given-argc_1304)"
"(if(= given-argc_1304 3)"
"(let-values(((l2_1305) given-kws_1303))"
"(if(pair? l2_1305)"
"(if(eq?(car l2_1305) '#:enclosing)"
"(let-values(((l2_1306)(cdr l2_1305)))"
"(if(pair? l2_1306)"
"(if(eq?(car l2_1306) '#:module-begin-id)"
"(let-values(((l2_1307)(cdr l2_1306)))"
"(if(pair? l2_1307)"
"(if(eq?(car l2_1307) '#:module-intial-require)"
"(let-values(((l2_1308)(cdr l2_1307)))"
"(if(pair? l2_1308)"
"(if(eq?(car l2_1308) '#:module-name-id)"
"(let-values(((l2_1309)(cdr l2_1308)))"
"(if(pair? l2_1309)"
"(if(eq?(car l2_1309) '#:namespace)"
"(let-values(((l2_1310)(cdr l2_1309)))"
"(if(pair? l2_1310)"
"(if(eq?(car l2_1310) '#:requires-and-provides)"
"(let-values(((l2_1311)(cdr l2_1310)))"
"(if(pair? l2_1311)"
"(if(eq?(car l2_1311) '#:root-ctx)"
"(let-values(((l2_1312)(cdr l2_1311)))"
"(if(pair? l2_1312)"
"(if(eq?(car l2_1312) '#:self)(null?(cdr l2_1312)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1313 given-args_1314 fully-expanded-bodys-except-post-submodules_1315)"
"(unpack130.1 given-kws_1313 given-args_1314 fully-expanded-bodys-except-post-submodules_1315)))"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_1316 root-ctx_1317 orig-self_1318 new-self_1319)"
"(let-values(((s_1320)"
"(syntax-property$1"
" s_1316"
" 'module-root-expand-context"
"(root-expand-context-encode-for-module root-ctx_1317 orig-self_1318 new-self_1319))))"
"(let-values(((s_1321)"
"(syntax-property$1 s_1320 'module-body-context(root-expand-context-all-scopes-stx root-ctx_1317))))"
"(let-values(((s_1322)"
"(syntax-property$1"
" s_1321"
" 'module-body-inside-context"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope root-ctx_1317)))))"
" s_1322)))))"
"(define-values"
"(lifted/6.1)"
"(make-required"
" 'expand-post-submodules"
"(case-lambda"
"((self_1323 fully-expanded-bodys-except-post-submodules_1324)"
"(apply missing-kw self_1323 fully-expanded-bodys-except-post-submodules_1324 null)))"
" #f"
" #f))"
"(define-values"
"(expand-post-submodules153.1)"
"(lambda(all-scopes-s138_1325"
" ctx141_1326"
" declare-enclosing132_1327"
" declared-submodule-names140_1328"
" enclosing-is-cross-phase-persistent?137_1329"
" mpis-to-reset139_1330"
" original133_1331"
" phase134_1332"
" requires-and-provides136_1333"
" self135_1334"
" fully-expanded-bodys-except-post-submodules152_1335)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1336)"
" fully-expanded-bodys-except-post-submodules152_1335))"
"(let-values(((declare-enclosing-module_1337) declare-enclosing132_1327))"
"(let-values(((s_1338) original133_1331))"
"(let-values(((phase_1339) phase134_1332))"
"(let-values(((self_1340) self135_1334))"
"(let-values(((requires+provides_1341) requires-and-provides136_1333))"
"(let-values(((enclosing-is-cross-phase-persistent?_1342) enclosing-is-cross-phase-persistent?137_1329))"
"(let-values(((all-scopes-s_1343) all-scopes-s138_1325))"
"(let-values(((mpis-to-reset_1344) mpis-to-reset139_1330))"
"(let-values(((declared-submodule-names_1345) declared-submodule-names140_1328))"
"(let-values(((submod-ctx_1346) ctx141_1326))"
"(let-values()"
"((letrec-values(((loop_1347)"
"(lambda(bodys_1348 phase_1349)"
"(if(null? bodys_1348)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1350)"
"(syntax-disarm$1(car bodys_1348))))"
"(let-values(((tmp_1351)"
"(core-form-sym disarmed-body_1350 phase_1349)))"
"(if(equal? tmp_1351 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force declare-enclosing-module_1337)"
"(values))))"
"(let-values(((ready-body_1352)"
"(remove-use-site-scopes"
"(car bodys_1348)"
" submod-ctx_1346)))"
"(let-values(((ok?_1353"
" module*515_1354"
" name516_1355"
" _517_1356)"
"(let-values(((s_1370)"
" disarmed-body_1350))"
"(if(if #t"
"(let-values(((s_1371)"
"(if(syntax?$1"
" s_1370)"
"(syntax-e$1"
" s_1370)"
" s_1370)))"
"(if(pair? s_1371)"
"(if(let-values(((s_1372)"
"(car"
" s_1371)))"
" #t)"
"(let-values(((s_1373)"
"(cdr s_1371)))"
"(let-values(((s_1374)"
"(if(syntax?$1"
" s_1373)"
"(syntax-e$1"
" s_1373)"
" s_1373)))"
"(if(pair? s_1374)"
"(if(let-values(((s_1375)"
"(car"
" s_1374)))"
" #t)"
"(let-values(((s_1376)"
"(cdr"
" s_1374)))"
"(let-values(((s_1377)"
"(if(syntax?$1"
" s_1376)"
"(syntax-e$1"
" s_1376)"
" s_1376)))"
"(if(pair?"
" s_1377)"
"(if(let-values(((s_1378)"
"(car"
" s_1377)))"
"(let-values(((s_1379)"
"(if(syntax?$1"
" s_1378)"
"(syntax-e$1"
" s_1378)"
" s_1378)))"
"(eq?"
" #f"
" s_1379)))"
"(let-values(((s_1380)"
"(cdr"
" s_1377)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1381) s_1370))"
"(let-values(((module*515_1382"
" name516_1383"
" _517_1384)"
"(let-values(((s_1385)"
"(if(syntax?$1"
" s_1370)"
"(syntax-e$1"
" s_1370)"
" s_1370)))"
"(if #t"
"(let-values(((module*518_1386)"
"(let-values(((s_1389)"
"(car"
" s_1385)))"
" s_1389))"
"((name519_1387"
" _520_1388)"
"(let-values(((s_1390)"
"(cdr"
" s_1385)))"
"(let-values(((s_1391)"
"(if(syntax?$1"
" s_1390)"
"(syntax-e$1"
" s_1390)"
" s_1390)))"
"(if #t"
"(let-values(((name521_1392)"
"(let-values(((s_1394)"
"(car"
" s_1391)))"
" s_1394))"
"((_522_1393)"
"(let-values(((s_1395)"
"(cdr"
" s_1391)))"
"(let-values(((s_1396)"
"(if(syntax?$1"
" s_1395)"
"(syntax-e$1"
" s_1395)"
" s_1395)))"
"(if #t"
"(let-values((()"
"(let-values(((s_1398)"
"(car"
" s_1396)))"
"(let-values(((s_1399)"
"(if(syntax?$1"
" s_1398)"
"(syntax-e$1"
" s_1398)"
" s_1398)))"
"(values))))"
"((_523_1397)"
"(let-values(((s_1400)"
"(cdr"
" s_1396)))"
" s_1400)))"
"(values"
" _523_1397))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_1381))))))"
"(values"
" name521_1392"
" _522_1393))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1381))))))"
"(values"
" module*518_1386"
" name519_1387"
" _520_1388))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_1381)))))"
"(values"
" #t"
" module*515_1382"
" name516_1383"
" _517_1384)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_1369)"
"(if ok?_1353"
"(let-values()"
"(let-values(((neg-phase_1401)"
"(phase-"
" 0"
" phase_1349)))"
"(let-values(((shifted-s_1402)"
"(syntax-shift-phase-level$1"
" ready-body_1352"
" neg-phase_1401)))"
"(let-values(((submod_1403)"
"(let-values(((...er/expand/module.rkt:961:15_1404)"
" expand-submodule183.1)"
"((shifted-s524_1405)"
" shifted-s_1402)"
"((self525_1406)"
" self_1340)"
"((submod-ctx526_1407)"
" submod-ctx_1346)"
"((temp527_1408)"
" #t)"
"((neg-phase528_1409)"
" neg-phase_1401)"
"((all-scopes-s529_1410)"
" all-scopes-s_1343)"
"((requires+provides530_1411)"
" requires+provides_1341)"
"((enclosing-is-cross-phase-persistent?531_1412)"
" enclosing-is-cross-phase-persistent?_1342)"
"((mpis-to-reset532_1413)"
" mpis-to-reset_1344)"
"((declared-submodule-names533_1414)"
" declared-submodule-names_1345))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names533_1414"
" all-scopes-s529_1410"
" #t"
" enclosing-is-cross-phase-persistent?531_1412"
" #t"
" requires+provides530_1411"
" #t"
" temp527_1408"
" neg-phase528_1409"
" #t"
" mpis-to-reset532_1413"
" shifted-s524_1405"
" self525_1406"
" submod-ctx526_1407)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:961:15_1404"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names533_1414"
" all-scopes-s529_1410"
" enclosing-is-cross-phase-persistent?531_1412"
" requires+provides530_1411"
" temp527_1408"
" neg-phase528_1409"
" mpis-to-reset532_1413)"
" shifted-s524_1405"
" self525_1406"
" submod-ctx526_1407)))))"
"(syntax-shift-phase-level$1"
" submod_1403"
" phase_1349)))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:971:13_1415)"
" expand-submodule183.1)"
"((ready-body534_1416)"
" ready-body_1352)"
"((self535_1417)"
" self_1340)"
"((submod-ctx536_1418)"
" submod-ctx_1346)"
"((temp537_1419) #t)"
"((mpis-to-reset538_1420)"
" mpis-to-reset_1344)"
"((declared-submodule-names539_1421)"
" declared-submodule-names_1345))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names539_1421"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp537_1419"
" #f"
" #f"
" mpis-to-reset538_1420"
" ready-body534_1416"
" self535_1417"
" submod-ctx536_1418)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:971:13_1415"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names539_1421"
" temp537_1419"
" mpis-to-reset538_1420)"
" ready-body534_1416"
" self535_1417"
" submod-ctx536_1418)))))))"
"(cons"
" submod_1369"
"(loop_1347(cdr bodys_1348) phase_1349)))))))"
"(if(equal? tmp_1351 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1422"
" begin-for-syntax540_1423"
" e541_1424)"
"(let-values(((s_1436) disarmed-body_1350))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1437) s_1436))"
"(let-values(((begin-for-syntax540_1438"
" e541_1439)"
"(let-values(((s_1440)"
"(if(syntax?$1"
" s_1436)"
"(syntax-e$1"
" s_1436)"
" s_1436)))"
"(if(pair? s_1440)"
"(let-values(((begin-for-syntax542_1441)"
"(let-values(((s_1443)"
"(car"
" s_1440)))"
" s_1443))"
"((e543_1442)"
"(let-values(((s_1444)"
"(cdr"
" s_1440)))"
"(let-values(((s_1445)"
"(if(syntax?$1"
" s_1444)"
"(syntax-e$1"
" s_1444)"
" s_1444)))"
"(let-values(((flat-s_1446)"
"(to-syntax-list.1"
" s_1445)))"
"(if(not"
" flat-s_1446)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_1437))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_1437))"
"(let-values()"
" flat-s_1446))))))))"
"(values"
" begin-for-syntax542_1441"
" e543_1442))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_1437)))))"
"(values"
" #t"
" begin-for-syntax540_1438"
" e541_1439)))"
"(values #f #f #f)))))"
"(let-values(((nested-bodys_1435)"
"(loop_1347 e541_1424(add1 phase_1349))))"
"(cons"
"(let-values(((temp544_1447)(car bodys_1348))"
"((disarmed-body545_1448)"
" disarmed-body_1350)"
"((temp546_1449)"
"(list*"
" begin-for-syntax540_1423"
" nested-bodys_1435)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild102.1))"
"(rebuild100.1"
" #f"
" #f"
" temp544_1447"
" disarmed-body545_1448"
" temp546_1449)"
"(rebuild102.1"
" temp544_1447"
" disarmed-body545_1448"
" temp546_1449)))"
"(loop_1347(cdr bodys_1348) phase_1349)))))"
"(let-values()"
"(cons"
"(car bodys_1348)"
"(loop_1347(cdr bodys_1348) phase_1349))))))))))))"
" loop_1347)"
" fully-expanded-bodys-except-post-submodules_1336"
" phase_1339)))))))))))))))"
"(define-values"
"(unpack154.1)"
"(lambda(given-kws_1450 given-args_1451 fully-expanded-bodys-except-post-submodules152_1452)"
"(let-values(((all-scopes-s138_1453)(car given-args_1451))"
"((given-kws_1454)(cdr given-kws_1450))"
"((given-args_1455)(cdr given-args_1451)))"
"(let-values(((ctx141_1456)(car given-args_1455))"
"((given-kws_1457)(cdr given-kws_1454))"
"((given-args_1458)(cdr given-args_1455)))"
"(let-values(((declare-enclosing132_1459)(car given-args_1458))"
"((given-kws_1460)(cdr given-kws_1457))"
"((given-args_1461)(cdr given-args_1458)))"
"(let-values(((declared-submodule-names140_1462)(car given-args_1461))"
"((given-kws_1463)(cdr given-kws_1460))"
"((given-args_1464)(cdr given-args_1461)))"
"(let-values(((enclosing-is-cross-phase-persistent?137_1465)(car given-args_1464))"
"((given-kws_1466)(cdr given-kws_1463))"
"((given-args_1467)(cdr given-args_1464)))"
"(let-values(((mpis-to-reset139_1468)(car given-args_1467))"
"((given-kws_1469)(cdr given-kws_1466))"
"((given-args_1470)(cdr given-args_1467)))"
"(let-values(((original133_1471)(car given-args_1470))"
"((given-kws_1472)(cdr given-kws_1469))"
"((given-args_1473)(cdr given-args_1470)))"
"(let-values(((phase134_1474)(car given-args_1473))"
"((given-kws_1475)(cdr given-kws_1472))"
"((given-args_1476)(cdr given-args_1473)))"
"(let-values(((requires-and-provides136_1477)(car given-args_1476))"
"((given-kws_1478)(cdr given-kws_1475))"
"((given-args_1479)(cdr given-args_1476)))"
"(let-values(((self135_1480)(car given-args_1479)))"
"(expand-post-submodules153.1"
" all-scopes-s138_1453"
" ctx141_1456"
" declare-enclosing132_1459"
" declared-submodule-names140_1462"
" enclosing-is-cross-phase-persistent?137_1465"
" mpis-to-reset139_1468"
" original133_1471"
" phase134_1474"
" requires-and-provides136_1477"
" self135_1480"
" fully-expanded-bodys-except-post-submodules152_1452)))))))))))))"
"(define-values"
"(expand-post-submodules155.1)"
"(lifted/6.1"
"(lambda(given-kws_1481 given-argc_1482)"
"(if(= given-argc_1482 3)"
"(let-values(((l2_1483) given-kws_1481))"
"(if(pair? l2_1483)"
"(if(eq?(car l2_1483) '#:all-scopes-s)"
"(let-values(((l2_1484)(cdr l2_1483)))"
"(if(pair? l2_1484)"
"(if(eq?(car l2_1484) '#:ctx)"
"(let-values(((l2_1485)(cdr l2_1484)))"
"(if(pair? l2_1485)"
"(if(eq?(car l2_1485) '#:declare-enclosing)"
"(let-values(((l2_1486)(cdr l2_1485)))"
"(if(pair? l2_1486)"
"(if(eq?(car l2_1486) '#:declared-submodule-names)"
"(let-values(((l2_1487)(cdr l2_1486)))"
"(if(pair? l2_1487)"
"(if(eq?(car l2_1487) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1488)(cdr l2_1487)))"
"(if(pair? l2_1488)"
"(if(eq?(car l2_1488) '#:mpis-to-reset)"
"(let-values(((l2_1489)(cdr l2_1488)))"
"(if(pair? l2_1489)"
"(if(eq?(car l2_1489) '#:original)"
"(let-values(((l2_1490)(cdr l2_1489)))"
"(if(pair? l2_1490)"
"(if(eq?(car l2_1490) '#:phase)"
"(let-values(((l2_1491)(cdr l2_1490)))"
"(if(pair? l2_1491)"
"(if(eq?(car l2_1491) '#:requires-and-provides)"
"(let-values(((l2_1492)(cdr l2_1491)))"
"(if(pair? l2_1492)"
"(if(eq?(car l2_1492) '#:self)"
"(null?(cdr l2_1492))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1493 given-args_1494 fully-expanded-bodys-except-post-submodules_1495)"
"(unpack154.1 given-kws_1493 given-args_1494 fully-expanded-bodys-except-post-submodules_1495)))"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1496)"
"(free-id-set-member?"
"(expand-context-stops ctx_1496)"
"(expand-context-phase ctx_1496)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_1496)))))"
"(define-values"
"(lifted/7.1)"
"(make-required"
" 'check-ids-unbound"
"(case-lambda"
"((self_1497 ids_1498 phase_1499 requires+provides_1500)"
"(apply missing-kw self_1497 ids_1498 phase_1499 requires+provides_1500 null)))"
" #f"
" #f))"
"(define-values"
"(check-ids-unbound161.1)"
"(lambda(in156_1501 ids158_1502 phase159_1503 requires+provides160_1504)"
"(let-values(((ids_1505) ids158_1502))"
"(let-values(((phase_1506) phase159_1503))"
"(let-values(((requires+provides_1507) requires+provides160_1504))"
"(let-values(((s_1508) in156_1501))"
"(let-values()"
"(let-values(((lst_1509) ids_1505))"
"(begin"
"(if(list? lst_1509)(void)(let-values()(in-list lst_1509)))"
"((letrec-values(((for-loop_1510)"
"(lambda(fold-var_1511 lst_1512)"
"(if(pair? lst_1512)"
"(let-values(((id_1513)(unsafe-car lst_1512)))"
"(if #t"
"(let-values(((fold-var_1514)"
"(let-values(((fold-var_1515) fold-var_1511))"
"(let-values(((fold-var_1516)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...er/expand/module.rkt:996:4_1517)"
" check-not-defined55.1)"
"((requires+provides547_1518)"
" requires+provides_1507)"
"((id548_1519) id_1513)"
"((phase549_1520)"
" phase_1506)"
"((s550_1521) s_1508))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined55.1))"
"(check-not-defined53.1"
" #f"
" #f"
" s550_1521"
" #f"
" #f"
" requires+provides547_1518"
" id548_1519"
" phase549_1520)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:996:4_1517"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list s550_1521)"
" requires+provides547_1518"
" id548_1519"
" phase549_1520))))"
"(void)))))"
"(values fold-var_1516)))))"
"(if #t(for-loop_1510 fold-var_1514(unsafe-cdr lst_1512)) fold-var_1514))"
" fold-var_1511))"
" fold-var_1511))))"
" for-loop_1510)"
"(void)"
" lst_1509))))))))))"
"(define-values"
"(unpack162.1)"
"(lambda(given-kws_1522 given-args_1523 ids158_1524 phase159_1525 requires+provides160_1526)"
"(let-values(((in156_1527)(car given-args_1523)))"
"(check-ids-unbound161.1 in156_1527 ids158_1524 phase159_1525 requires+provides160_1526))))"
"(define-values"
"(check-ids-unbound163.1)"
"(lifted/7.1"
"(lambda(given-kws_1528 given-argc_1529)"
"(if(= given-argc_1529 5)"
"(let-values(((l2_1530) given-kws_1528))"
"(if(pair? l2_1530)(if(eq?(car l2_1530) '#:in)(null?(cdr l2_1530)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1531 given-args_1532 ids_1533 phase_1534 requires+provides_1535)"
"(unpack162.1 given-kws_1531 given-args_1532 ids_1533 phase_1534 requires+provides_1535)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1536 phase_1537 m-ns_1538 self_1539 ctx_1540)"
"(let-values(((lst_1541) bodys_1536))"
"(begin"
"(if(list? lst_1541)(void)(let-values()(in-list lst_1541)))"
"((letrec-values(((for-loop_1542)"
"(lambda(fold-var_1543 lst_1544)"
"(if(pair? lst_1544)"
"(let-values(((body_1545)(unsafe-car lst_1544)))"
"(if #t"
"(let-values(((fold-var_1546)"
"(let-values(((fold-var_1547) fold-var_1543))"
"(let-values(((fold-var_1548)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((disarmed-body_1549)"
"(syntax-disarm$1 body_1545)))"
"(let-values(((tmp_1550)"
"(core-form-sym"
" disarmed-body_1549"
" phase_1537)))"
"(if(equal? tmp_1550 'define-values)"
"(let-values()"
"(let-values(((ok?_1551"
" define-values551_1552"
" id552_1553"
" rhs553_1554)"
"(let-values(((s_1569)"
" disarmed-body_1549))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1570)"
" s_1569))"
"(let-values(((define-values551_1571"
" id552_1572"
" rhs553_1573)"
"(let-values(((s_1574)"
"(if(syntax?$1"
" s_1569)"
"(syntax-e$1"
" s_1569)"
" s_1569)))"
"(if(pair?"
" s_1574)"
"(let-values(((define-values554_1575)"
"(let-values(((s_1578)"
"(car"
" s_1574)))"
" s_1578))"
"((id555_1576"
" rhs556_1577)"
"(let-values(((s_1579)"
"(cdr"
" s_1574)))"
"(let-values(((s_1580)"
"(if(syntax?$1"
" s_1579)"
"(syntax-e$1"
" s_1579)"
" s_1579)))"
"(if(pair?"
" s_1580)"
"(let-values(((id557_1581)"
"(let-values(((s_1583)"
"(car"
" s_1580)))"
"(let-values(((s_1584)"
"(if(syntax?$1"
" s_1583)"
"(syntax-e$1"
" s_1583)"
" s_1583)))"
"(let-values(((flat-s_1585)"
"(to-syntax-list.1"
" s_1584)))"
"(if(not"
" flat-s_1585)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_1570))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_1570))"
"(let-values()"
"(let-values(((id_1586)"
"(let-values(((lst_1587)"
" flat-s_1585))"
"(begin"
"(if(list?"
" lst_1587)"
"(void)"
"(let-values()"
"(in-list"
" lst_1587)))"
"((letrec-values(((for-loop_1588)"
"(lambda(id_1589"
" lst_1590)"
"(if(pair?"
" lst_1590)"
"(let-values(((s_1591)"
"(unsafe-car"
" lst_1590)))"
"(if #t"
"(let-values(((id_1592)"
"(let-values(((id_1593)"
" id_1589))"
"(let-values(((id_1594)"
"(let-values()"
"(let-values(((id560_1595)"
"(let-values()"
"(if(let-values(((or-part_1596)"
"(if(syntax?$1"
" s_1591)"
"(symbol?"
"(syntax-e$1"
" s_1591))"
" #f)))"
"(if or-part_1596"
" or-part_1596"
"(symbol?"
" s_1591)))"
" s_1591"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_1570"
" s_1591)))))"
"(cons"
" id560_1595"
" id_1593)))))"
"(values"
" id_1594)))))"
"(if #t"
"(for-loop_1588"
" id_1592"
"(unsafe-cdr"
" lst_1590))"
" id_1592))"
" id_1589))"
" id_1589))))"
" for-loop_1588)"
" null"
" lst_1587)))))"
"(alt-reverse"
" id_1586)))))))))"
"((rhs558_1582)"
"(let-values(((s_1597)"
"(cdr"
" s_1580)))"
"(let-values(((s_1598)"
"(if(syntax?$1"
" s_1597)"
"(syntax-e$1"
" s_1597)"
" s_1597)))"
"(if(pair?"
" s_1598)"
"(let-values(((rhs559_1599)"
"(let-values(((s_1600)"
"(car"
" s_1598)))"
" s_1600))"
"(()"
"(let-values(((s_1601)"
"(cdr"
" s_1598)))"
"(let-values(((s_1602)"
"(if(syntax?$1"
" s_1601)"
"(syntax-e$1"
" s_1601)"
" s_1601)))"
"(if(null?"
" s_1602)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_1570))))))"
"(values"
" rhs559_1599))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_1570))))))"
"(values"
" id557_1581"
" rhs558_1582))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_1570))))))"
"(values"
" define-values554_1575"
" id555_1576"
" rhs556_1577))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_1570)))))"
"(values"
" #t"
" define-values551_1571"
" id552_1572"
" rhs553_1573)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_1567) id552_1553))"
"(let-values(((vals_1568)"
"(eval-for-bindings"
" ids_1567"
" rhs553_1554"
" phase_1537"
" m-ns_1538"
" ctx_1540)))"
"(let-values(((lst_1603) ids_1567)"
"((lst_1604) vals_1568))"
"(begin"
"(if(list? lst_1603)"
"(void)"
"(let-values()"
"(in-list lst_1603)))"
"(if(list? lst_1604)"
"(void)"
"(let-values()"
"(in-list lst_1604)))"
"((letrec-values(((for-loop_1605)"
"(lambda(fold-var_1606"
" lst_1607"
" lst_1608)"
"(if(if(pair?"
" lst_1607)"
"(pair?"
" lst_1608)"
" #f)"
"(let-values(((id_1609)"
"(unsafe-car"
" lst_1607))"
"((val_1610)"
"(unsafe-car"
" lst_1608)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_1611)"
"(let-values(((fold-var_1612)"
" fold-var_1606))"
"(let-values(((fold-var_1613)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1614)"
"(let-values(((id561_1615)"
" id_1609)"
"((phase562_1616)"
" phase_1537))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve21.1))"
"(resolve19.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id561_1615"
" phase562_1616)"
"(resolve21.1"
" id561_1615"
" phase562_1616)))))"
"(begin"
"(if(if(module-binding?"
" b_1614)"
"(equal?"
" self_1539"
"(module-binding-module"
" b_1614))"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                               \"internal error: nested binding is not to self\")))"
"(namespace-set-variable!"
" m-ns_1538"
" phase_1537"
"(module-binding-sym"
" b_1614)"
" val_1610))))"
"(void)))))"
"(values"
" fold-var_1613)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_1605"
" fold-var_1611"
"(unsafe-cdr"
" lst_1607)"
"(unsafe-cdr"
" lst_1608))"
" fold-var_1611))"
" fold-var_1606))"
" fold-var_1606))))"
" for-loop_1605)"
"(void)"
" lst_1603"
" lst_1604)))))))"
"(if(equal? tmp_1550 'define-syntaxes)"
"(let-values()(void))"
"(if(if(equal? tmp_1550 '#%provide)"
" #t"
"(if(equal? tmp_1550 '#%require)"
" #t"
"(if(equal? tmp_1550 'module)"
" #t"
"(if(equal? tmp_1550 'module*)"
" #t"
"(if(equal?"
" tmp_1550"
" 'begin-for-syntax)"
" #t"
"(equal?"
" tmp_1550"
" '#%declare))))))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_1540"
" 1/current-namespace"
" m-ns_1538)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" body_1545"
"(let-values(((...er/expand/module.rkt:1028:31_1617)"
" make-compile-context16.1)"
"((m-ns563_1618)"
" m-ns_1538)"
"((phase564_1619)"
" phase_1537))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context16.1))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns563_1618"
" #t"
" phase564_1619"
" #t"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1028:31_1617"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list"
" m-ns563_1618"
" phase564_1619)))))"
" m-ns_1538))))))))))"
"(void)))))"
"(values fold-var_1548)))))"
"(if #t(for-loop_1542 fold-var_1546(unsafe-cdr lst_1544)) fold-var_1546))"
" fold-var_1543))"
" fold-var_1543))))"
" for-loop_1542)"
"(void)"
" lst_1541)))))"
"(define-values"
"(lifted/8.1)"
"(make-required"
" 'expand-submodule"
"(case-lambda((self_1620 s_1621 self_1622 ctx_1623)(apply missing-kw self_1620 s_1621 self_1622 ctx_1623 null)))"
" #f"
" #f))"
"(define-values"
"(expand-submodule181.1)"
"(lambda(declared-submodule-names170_1624"
" enclosing-all-scopes-stx168_1625"
" enclosing-all-scopes-stx175_1626"
" enclosing-is-cross-phase-persistent?167_1627"
" enclosing-is-cross-phase-persistent?174_1628"
" enclosing-requires+provides166_1629"
" enclosing-requires+provides173_1630"
" is-star?164_1631"
" keep-enclosing-scope-at-phase165_1632"
" keep-enclosing-scope-at-phase172_1633"
" mpis-to-reset169_1634"
" s178_1635"
" self179_1636"
" ctx180_1637)"
"(let-values(((s_1638) s178_1635))"
"(let-values(((self_1639) self179_1636))"
"(let-values(((ctx_1640) ctx180_1637))"
"(let-values(((is-star?_1641) is-star?164_1631))"
"(let-values(((keep-enclosing-scope-at-phase_1642)"
"(if keep-enclosing-scope-at-phase172_1633 keep-enclosing-scope-at-phase165_1632 #f)))"
"(let-values(((enclosing-r+p_1643)"
"(if enclosing-requires+provides173_1630 enclosing-requires+provides166_1629 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1644)"
"(if enclosing-is-cross-phase-persistent?174_1628"
" enclosing-is-cross-phase-persistent?167_1627"
" #f)))"
"(let-values(((enclosing-all-scopes-stx_1645)"
"(if enclosing-all-scopes-stx175_1626 enclosing-all-scopes-stx168_1625 #f)))"
"(let-values(((mpis-to-reset_1646) mpis-to-reset169_1634))"
"(let-values(((declared-submodule-names_1647) declared-submodule-names170_1624))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1669)(expand-context-observer ctx_1640)))"
"(if obs_1669"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1669 'enter-prim s_1638))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1670)(expand-context-observer ctx_1640)))"
"(if obs_1670"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1670"
"(if is-star?_1641 'enter-prim-submodule* 'enter-prim-submodule)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1648 module565_1649 name566_1650 _567_1651)"
"(let-values(((s_1671) s_1638))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1672) s_1671))"
"(let-values(((module565_1673 name566_1674 _567_1675)"
"(let-values(((s_1676)"
"(if(syntax?$1 s_1671)"
"(syntax-e$1 s_1671)"
" s_1671)))"
"(if(pair? s_1676)"
"(let-values(((module568_1677)"
"(let-values(((s_1680)(car s_1676)))"
" s_1680))"
"((name569_1678 _570_1679)"
"(let-values(((s_1681)(cdr s_1676)))"
"(let-values(((s_1682)"
"(if(syntax?$1 s_1681)"
"(syntax-e$1 s_1681)"
" s_1681)))"
"(if(pair? s_1682)"
"(let-values(((name571_1683)"
"(let-values(((s_1685)"
"(car"
" s_1682)))"
" s_1685))"
"((_572_1684)"
"(let-values(((s_1686)"
"(cdr"
" s_1682)))"
" s_1686)))"
"(values"
" name571_1683"
" _572_1684))"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_1672))))))"
"(values module568_1677 name569_1678 _570_1679))"
"(raise-syntax-error$1"
" #f"
"                                                                     \"bad syntax\""
" orig-s_1672)))))"
"(values #t module565_1673 name566_1674 _567_1675)))"
"(values #f #f #f #f)))))"
"(let-values(((name_1664)(syntax-e$1 name566_1650)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1647 name_1664 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                       \"submodule already declared with the same name\""
" s_1638"
" name_1664))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1647"
" name_1664"
"(syntax-e$1 module565_1649))"
"(values))))"
"(let-values(((submod_1665)"
"(let-values(((...er/expand/module.rkt:1054:4_1687)"
" expand-module16.1)"
"((s573_1688) s_1638)"
"((temp574_1689)"
"(let-values(((the-struct_1696) ctx_1640))"
"(if(expand-context? the-struct_1696)"
"(let-values(((context581_1697) 'module)"
"((only-immediate?582_1698) #f)"
"((post-expansion-scope583_1699) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1696)"
" post-expansion-scope583_1699"
"(root-expand-context-top-level-bind-scope"
" the-struct_1696)"
"(root-expand-context-all-scopes-stx"
" the-struct_1696)"
"(root-expand-context-use-site-scopes"
" the-struct_1696)"
"(root-expand-context-defined-syms"
" the-struct_1696)"
"(root-expand-context-frame-id the-struct_1696)"
"(root-expand-context-counter the-struct_1696)"
"(root-expand-context-lift-key the-struct_1696)"
" context581_1697"
"(expand-context-phase the-struct_1696)"
"(expand-context-namespace the-struct_1696)"
"(expand-context-env the-struct_1696)"
"(expand-context-user-env the-struct_1696)"
"(expand-context-post-expansion-scope-action"
" the-struct_1696)"
"(expand-context-scopes the-struct_1696)"
"(expand-context-def-ctx-scopes the-struct_1696)"
"(expand-context-reference-records"
" the-struct_1696)"
" only-immediate?582_1698"
"(expand-context-just-once? the-struct_1696)"
"(expand-context-module-begin-k the-struct_1696)"
"(expand-context-need-eventually-defined"
" the-struct_1696)"
"(expand-context-allow-unbound? the-struct_1696)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1696)"
"(expand-context-stops the-struct_1696)"
"(expand-context-current-introduction-scopes"
" the-struct_1696)"
"(expand-context-declared-submodule-names"
" the-struct_1696)"
"(expand-context-lifts the-struct_1696)"
"(expand-context-lift-envs the-struct_1696)"
"(expand-context-module-lifts the-struct_1696)"
"(expand-context-require-lifts the-struct_1696)"
"(expand-context-to-module-lifts"
" the-struct_1696)"
"(expand-context-requires+provides"
" the-struct_1696)"
"(expand-context-name the-struct_1696)"
"(expand-context-observer the-struct_1696)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                       \"expand-context?\""
" the-struct_1696))))"
"((self575_1690) self_1639)"
"((keep-enclosing-scope-at-phase576_1691)"
" keep-enclosing-scope-at-phase_1642)"
"((enclosing-all-scopes-stx577_1692)"
" enclosing-all-scopes-stx_1645)"
"((enclosing-r+p578_1693) enclosing-r+p_1643)"
"((enclosing-is-cross-phase-persistent?579_1694)"
" enclosing-is-cross-phase-persistent?_1644)"
"((mpis-to-reset580_1695) mpis-to-reset_1646))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-module16.1))"
"(expand-module14.1"
" enclosing-all-scopes-stx577_1692"
" #t"
" enclosing-is-cross-phase-persistent?579_1694"
" #t"
" enclosing-r+p578_1693"
" #t"
" keep-enclosing-scope-at-phase576_1691"
" #t"
" mpis-to-reset580_1695"
" #t"
" s573_1688"
" temp574_1689"
" self575_1690)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1054:4_1687"
" keyword-procedure-extract"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
" 5)"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(list"
" enclosing-all-scopes-stx577_1692"
" enclosing-is-cross-phase-persistent?579_1694"
" enclosing-r+p578_1693"
" keep-enclosing-scope-at-phase576_1691"
" mpis-to-reset580_1695)"
" s573_1688"
" temp574_1689"
" self575_1690)))))"
"(let-values(((ns_1666)(expand-context-namespace ctx_1640)))"
"(let-values(((module-name_1667)(1/module-path-index-resolve self_1639)))"
"(let-values(((root-module-name_1668)"
"(resolved-module-path-root-name module-name_1667)))"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1666"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1668))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1073:4_1700) eval-module10.1)"
"((temp584_1701)"
"(let-values(((...er/expand/module.rkt:1074:5_1703)"
" compile-module15.1)"
"((submod586_1704) submod_1665)"
"((temp587_1705)"
"(let-values(((...er/expand/module.rkt:1075:21_1707)"
" make-compile-context16.1)"
"((ns589_1708) ns_1666)"
"((self590_1709) self_1639)"
"((temp591_1710)"
"(1/resolved-module-path-name"
" module-name_1667)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context16.1))"
"(make-compile-context14.1"
" temp591_1710"
" #t"
" #f"
" #f"
" self590_1709"
" #t"
" ns589_1708"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1075:21_1707"
" keyword-procedure-extract"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
" 2)"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
"(list"
" temp591_1710"
" self590_1709"
" ns589_1708)))))"
"((temp588_1706) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module15.1))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp588_1706"
" #t"
" submod586_1704"
" temp587_1705)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1074:5_1703"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 4)"
" '(#:with-submodules?)"
"(list temp588_1706)"
" submod586_1704"
" temp587_1705))))"
"((temp585_1702) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-module10.1))"
"(eval-module8.1 #f #f #f #f temp585_1702 #t temp584_1701)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1073:4_1700"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 3)"
" '(#:with-submodules?)"
"(list temp585_1702)"
" temp584_1701)))))"
"(let-values(((obs_1711)(expand-context-observer ctx_1640)))"
"(if obs_1711"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_1711 'exit-prim submod_1665))"
"(void)))"
"(void)))"
" submod_1665))))))))))))))))))))))))"
"(define-values"
"(unpack182.1)"
"(lambda(given-kws_1712 given-args_1713 s178_1714 self179_1715 ctx180_1716)"
"(let-values(((declared-submodule-names170_1717)(car given-args_1713))"
"((given-kws_1718)(cdr given-kws_1712))"
"((given-args_1719)(cdr given-args_1713)))"
"(let-values(((enclosing-all-scopes-stx175_1720)"
"(if(pair? given-kws_1718)(eq? '#:enclosing-all-scopes-stx(car given-kws_1718)) #f)))"
"(let-values(((enclosing-all-scopes-stx168_1721)"
"(if enclosing-all-scopes-stx175_1720(car given-args_1719)(void)))"
"((given-kws_1722)(if enclosing-all-scopes-stx175_1720(cdr given-kws_1718) given-kws_1718))"
"((given-args_1723)(if enclosing-all-scopes-stx175_1720(cdr given-args_1719) given-args_1719)))"
"(let-values(((enclosing-is-cross-phase-persistent?174_1724)"
"(if(pair? given-kws_1722)"
"(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1722))"
" #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?167_1725)"
"(if enclosing-is-cross-phase-persistent?174_1724(car given-args_1723)(void)))"
"((given-kws_1726)"
"(if enclosing-is-cross-phase-persistent?174_1724(cdr given-kws_1722) given-kws_1722))"
"((given-args_1727)"
"(if enclosing-is-cross-phase-persistent?174_1724(cdr given-args_1723) given-args_1723)))"
"(let-values(((enclosing-requires+provides173_1728)"
"(if(pair? given-kws_1726)(eq? '#:enclosing-requires+provides(car given-kws_1726)) #f)))"
"(let-values(((enclosing-requires+provides166_1729)"
"(if enclosing-requires+provides173_1728(car given-args_1727)(void)))"
"((given-kws_1730)"
"(if enclosing-requires+provides173_1728(cdr given-kws_1726) given-kws_1726))"
"((given-args_1731)"
"(if enclosing-requires+provides173_1728(cdr given-args_1727) given-args_1727)))"
"(let-values(((is-star?164_1732)(car given-args_1731))"
"((given-kws_1733)(cdr given-kws_1730))"
"((given-args_1734)(cdr given-args_1731)))"
"(let-values(((keep-enclosing-scope-at-phase172_1735)"
"(if(pair? given-kws_1733)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1733))"
" #f)))"
"(let-values(((keep-enclosing-scope-at-phase165_1736)"
"(if keep-enclosing-scope-at-phase172_1735(car given-args_1734)(void)))"
"((given-kws_1737)"
"(if keep-enclosing-scope-at-phase172_1735(cdr given-kws_1733) given-kws_1733))"
"((given-args_1738)"
"(if keep-enclosing-scope-at-phase172_1735(cdr given-args_1734) given-args_1734)))"
"(let-values(((mpis-to-reset169_1739)(car given-args_1738)))"
"(expand-submodule181.1"
" declared-submodule-names170_1717"
" enclosing-all-scopes-stx168_1721"
" enclosing-all-scopes-stx175_1720"
" enclosing-is-cross-phase-persistent?167_1725"
" enclosing-is-cross-phase-persistent?174_1724"
" enclosing-requires+provides166_1729"
" enclosing-requires+provides173_1728"
" is-star?164_1732"
" keep-enclosing-scope-at-phase165_1736"
" keep-enclosing-scope-at-phase172_1735"
" mpis-to-reset169_1739"
" s178_1714"
" self179_1715"
" ctx180_1716))))))))))))))"
"(define-values"
"(expand-submodule183.1)"
"(lifted/8.1"
"(lambda(given-kws_1740 given-argc_1741)"
"(if(= given-argc_1741 5)"
"(subsets?"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" given-kws_1740"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset))"
" #f))"
"(case-lambda"
"((given-kws_1742 given-args_1743 s_1744 self_1745 ctx_1746)"
"(unpack182.1 given-kws_1742 given-args_1743 s_1744 self_1745 ctx_1746)))"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/9.1)"
"(make-required"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1747 bodys_1748 phase_1749 self_1750 ctx_1751)"
"(apply missing-kw self_1747 bodys_1748 phase_1749 self_1750 ctx_1751 null)))"
" #f"
" #f))"
"(define-values"
"(expand-non-module*-submodules192.1)"
"(lambda(declared-submodule-names185_1752 mpis-to-reset184_1753 bodys188_1754 phase189_1755 self190_1756 ctx191_1757)"
"(let-values(((bodys_1758) bodys188_1754))"
"(let-values(((phase_1759) phase189_1755))"
"(let-values(((self_1760) self190_1756))"
"(let-values(((ctx_1761) ctx191_1757))"
"(let-values(((mpis-to-reset_1762) mpis-to-reset184_1753))"
"(let-values(((declared-submodule-names_1763) declared-submodule-names185_1752))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_1764) bodys_1758))"
"(begin"
"(if(list? lst_1764)(void)(let-values()(in-list lst_1764)))"
"((letrec-values(((for-loop_1765)"
"(lambda(fold-var_1766 lst_1767)"
"(if(pair? lst_1767)"
"(let-values(((body_1768)(unsafe-car lst_1767)))"
"(if #t"
"(let-values(((fold-var_1769)"
"(let-values(((fold-var_1770) fold-var_1766))"
"(let-values(((fold-var_1771)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_1772)"
"(core-form-sym"
"(syntax-disarm$1"
" body_1768)"
" phase_1759)))"
"(if(equal? tmp_1772 'module)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1093:7_1773)"
" expand-submodule183.1)"
"((body592_1774)"
" body_1768)"
"((self593_1775)"
" self_1760)"
"((ctx594_1776)"
" ctx_1761)"
"((temp595_1777)"
" #f)"
"((mpis-to-reset596_1778)"
" mpis-to-reset_1762)"
"((declared-submodule-names597_1779)"
" declared-submodule-names_1763))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names597_1779"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp595_1777"
" #f"
" #f"
" mpis-to-reset596_1778"
" body592_1774"
" self593_1775"
" ctx594_1776)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1093:7_1773"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names597_1779"
" temp595_1777"
" mpis-to-reset596_1778)"
" body592_1774"
" self593_1775"
" ctx594_1776))))"
"(let-values() body_1768))))"
" fold-var_1770))))"
"(values fold-var_1771)))))"
"(if #t"
"(for-loop_1765 fold-var_1769(unsafe-cdr lst_1767))"
" fold-var_1769))"
" fold-var_1766))"
" fold-var_1766))))"
" for-loop_1765)"
" null"
" lst_1764)))))))))))))"
"(define-values"
"(unpack193.1)"
"(lambda(given-kws_1780 given-args_1781 bodys188_1782 phase189_1783 self190_1784 ctx191_1785)"
"(let-values(((declared-submodule-names185_1786)(car given-args_1781))"
"((given-kws_1787)(cdr given-kws_1780))"
"((given-args_1788)(cdr given-args_1781)))"
"(let-values(((mpis-to-reset184_1789)(car given-args_1788)))"
"(expand-non-module*-submodules192.1"
" declared-submodule-names185_1786"
" mpis-to-reset184_1789"
" bodys188_1782"
" phase189_1783"
" self190_1784"
" ctx191_1785)))))"
"(define-values"
"(expand-non-module*-submodules194.1)"
"(lifted/9.1"
"(lambda(given-kws_1790 given-argc_1791)"
"(if(= given-argc_1791 6)"
"(let-values(((l2_1792) given-kws_1790))"
"(if(pair? l2_1792)"
"(if(eq?(car l2_1792) '#:declared-submodule-names)"
"(let-values(((l2_1793)(cdr l2_1792)))"
"(if(pair? l2_1793)(if(eq?(car l2_1793) '#:mpis-to-reset)(null?(cdr l2_1793)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1794 given-args_1795 bodys_1796 phase_1797 self_1798 ctx_1799)"
"(unpack193.1 given-kws_1794 given-args_1795 bodys_1796 phase_1797 self_1798 ctx_1799)))"
" '(#:declared-submodule-names #:mpis-to-reset)"
" '(#:declared-submodule-names #:mpis-to-reset)))"
"(define-values"
"(lifted/10.1)"
"(make-required"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_1800 m-ns_1801 self_1802 requires+provides_1803)"
"(apply missing-kw self_1800 m-ns_1801 self_1802 requires+provides_1803 null)))"
" #f"
" #f))"
"(define-values"
"(make-parse-lifted-require200.1)"
"(lambda(declared-submodule-names195_1804 m-ns197_1805 self198_1806 requires+provides199_1807)"
"(let-values(((m-ns_1808) m-ns197_1805))"
"(let-values(((self_1809) self198_1806))"
"(let-values(((requires+provides_1810) requires+provides199_1807))"
"(let-values(((declared-submodule-names_1811) declared-submodule-names195_1804))"
"(let-values()"
"(lambda(s_1812 phase_1813)"
"(let-values(((ok?_1814 #%require598_1815 req599_1816)"
"(let-values(((s_1827)(syntax-disarm$1 s_1812)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1828) s_1827))"
"(let-values(((#%require598_1829 req599_1830)"
"(let-values(((s_1831)"
"(if(syntax?$1 s_1827)(syntax-e$1 s_1827) s_1827)))"
"(if(pair? s_1831)"
"(let-values(((#%require600_1832)"
"(let-values(((s_1834)(car s_1831))) s_1834))"
"((req601_1833)"
"(let-values(((s_1835)(cdr s_1831)))"
"(let-values(((s_1836)"
"(if(syntax?$1 s_1835)"
"(syntax-e$1 s_1835)"
" s_1835)))"
"(if(pair? s_1836)"
"(let-values(((req602_1837)"
"(let-values(((s_1838)"
"(car s_1836)))"
" s_1838))"
"(()"
"(let-values(((s_1839)"
"(cdr s_1836)))"
"(let-values(((s_1840)"
"(if(syntax?$1"
" s_1839)"
"(syntax-e$1"
" s_1839)"
" s_1839)))"
"(if(null? s_1840)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_1828))))))"
"(values req602_1837))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_1828))))))"
"(values #%require600_1832 req601_1833))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_1828)))))"
"(values #t #%require598_1829 req599_1830)))"
"(values #f #f #f)))))"
"(let-values(((...er/expand/module.rkt:1105:4_1841) parse-and-perform-requires!22.1)"
"((temp603_1842)(list req599_1816))"
"((s604_1843) s_1812)"
"((self605_1844) self_1809)"
"((m-ns606_1845) m-ns_1808)"
"((phase607_1846) phase_1813)"
"((phase608_1847) phase_1813)"
"((requires+provides609_1848) requires+provides_1810)"
"((declared-submodule-names610_1849) declared-submodule-names_1811))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names610_1849"
" #t"
" phase608_1847"
" #t"
" #f"
" #f"
" self605_1844"
" #t"
" #f"
" #f"
" temp603_1842"
" s604_1843"
" m-ns606_1845"
" phase607_1846"
" requires+provides609_1848)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1105:4_1841"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:run-phase #:self)"
" 7)"
" '(#:declared-submodule-names #:run-phase #:self)"
"(list declared-submodule-names610_1849 phase608_1847 self605_1844)"
" temp603_1842"
" s604_1843"
" m-ns606_1845"
" phase607_1846"
" requires+provides609_1848))))))))))))"
"(define-values"
"(unpack201.1)"
"(lambda(given-kws_1850 given-args_1851 m-ns197_1852 self198_1853 requires+provides199_1854)"
"(let-values(((declared-submodule-names195_1855)(car given-args_1851)))"
"(make-parse-lifted-require200.1"
" declared-submodule-names195_1855"
" m-ns197_1852"
" self198_1853"
" requires+provides199_1854))))"
"(define-values"
"(make-parse-lifted-require202.1)"
"(lifted/10.1"
"(lambda(given-kws_1856 given-argc_1857)"
"(if(= given-argc_1857 5)"
"(let-values(((l2_1858) given-kws_1856))"
"(if(pair? l2_1858)(if(eq?(car l2_1858) '#:declared-submodule-names)(null?(cdr l2_1858)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1859 given-args_1860 m-ns_1861 self_1862 requires+provides_1863)"
"(unpack201.1 given-kws_1859 given-args_1860 m-ns_1861 self_1862 requires+provides_1863)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(alt-reverse"
"(let-values(((lst_6) ids_1))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((id_10)(unsafe-car lst_9)))"
"(if #t"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(remove-use-site-scopes"
" id_10"
" ctx_3)"
" top-level-bind-scope_4))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(if #t(for-loop_7 fold-var_11(unsafe-cdr lst_9)) fold-var_11))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(begin"
"(let-values(((tl-ids1_14) tl-ids_5)((temp2_15)(expand-context-phase ctx_3))((s3_16) s_2))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_14 temp2_15 s3_16 #f #f)"
"(check-no-duplicate-ids10.1 tl-ids1_14 temp2_15 s3_16)))"
"(select-defined-syms-and-bind!/ctx tl-ids_5 ctx_3)"
" tl-ids_5)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_2)))"
"(if obs_22"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_22 'prim-define-values))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values(((s_23) s_1))"
"(if(if #t #t #f)"
"(let-values(((orig-s_24) s_23))"
"(let-values(((define-values1_25 id2_26 rhs3_27)"
"(let-values(((s_28)(if(syntax?$1 s_23)(syntax-e$1 s_23) s_23)))"
"(if(pair? s_28)"
"(let-values(((define-values4_29)"
"(let-values(((s_32)(car s_28))) s_32))"
"((id5_30 rhs6_31)"
"(let-values(((s_33)(cdr s_28)))"
"(let-values(((s_34)"
"(if(syntax?$1 s_33)"
"(syntax-e$1 s_33)"
" s_33)))"
"(if(pair? s_34)"
"(let-values(((id7_35)"
"(let-values(((s_37)(car s_34)))"
"(let-values(((s_38)"
"(if(syntax?$1"
" s_37)"
"(syntax-e$1 s_37)"
" s_37)))"
"(let-values(((flat-s_39)"
"(to-syntax-list.1"
" s_38)))"
"(if(not flat-s_39)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_24))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_24))"
"(let-values()"
"(let-values(((id_40)"
"(let-values(((lst_41)"
" flat-s_39))"
"(begin"
"(if(list?"
" lst_41)"
"(void)"
"(let-values()"
"(in-list"
" lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(id_43"
" lst_44)"
"(if(pair?"
" lst_44)"
"(let-values(((s_45)"
"(unsafe-car"
" lst_44)))"
"(if #t"
"(let-values(((id_46)"
"(let-values(((id_47)"
" id_43))"
"(let-values(((id_48)"
"(let-values()"
"(let-values(((id13_49)"
"(let-values()"
"(if(let-values(((or-part_50)"
"(if(syntax?$1"
" s_45)"
"(symbol?"
"(syntax-e$1"
" s_45))"
" #f)))"
"(if or-part_50"
" or-part_50"
"(symbol?"
" s_45)))"
" s_45"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"not an identifier\""
" orig-s_24"
" s_45)))))"
"(cons"
" id13_49"
" id_47)))))"
"(values"
" id_48)))))"
"(if #t"
"(for-loop_42"
" id_46"
"(unsafe-cdr"
" lst_44))"
" id_46))"
" id_43))"
" id_43))))"
" for-loop_42)"
" null"
" lst_41)))))"
"(alt-reverse"
" id_40)))))))))"
"((rhs8_36)"
"(let-values(((s_51)(cdr s_34)))"
"(let-values(((s_52)"
"(if(syntax?$1"
" s_51)"
"(syntax-e$1 s_51)"
" s_51)))"
"(if(pair? s_52)"
"(let-values(((rhs9_53)"
"(let-values(((s_54)"
"(car"
" s_52)))"
" s_54))"
"(()"
"(let-values(((s_55)"
"(cdr"
" s_52)))"
"(let-values(((s_56)"
"(if(syntax?$1"
" s_55)"
"(syntax-e$1"
" s_55)"
" s_55)))"
"(if(null?"
" s_56)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_24))))))"
"(values rhs9_53))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_24))))))"
"(values id7_35 rhs8_36))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_24))))))"
"(values define-values4_29 id5_30 rhs6_31))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_24)))))"
"(values #t define-values1_25 id2_26 rhs3_27)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_20)(as-expand-time-top-level-bindings id2_6 s_1 ctx_2)))"
"(let-values(((exp-rhs_21)"
"(let-values(((temp14_57) rhs3_7)((temp15_58)(as-named-context ctx_2 ids_20)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp14_57 temp15_58)"
"(expand7.1 temp14_57 temp15_58)))))"
"(let-values(((s10_59) s_1)"
"((disarmed-s11_60) disarmed-s_3)"
"((temp12_61)(list define-values1_5 ids_20 exp-rhs_21)))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s10_59 disarmed-s11_60 temp12_61)"
"(rebuild102.1 s10_59 disarmed-s11_60 temp12_61))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_62 ctx_63)"
"(let-values((()"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_63)))"
"(if obs_83"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_83 'prim-define-syntaxes))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_84)(expand-context-observer ctx_63)))"
"(if obs_84"
"(let-values()(if #t(let-values()(call-expand-observe obs_84 'prepare-env))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_63) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_62)))"
"(values))))"
"(let-values(((disarmed-s_64)(syntax-disarm$1 s_62)))"
"(let-values(((ok?_65 define-syntaxes16_66 id17_67 rhs18_68)"
"(let-values(((s_85) disarmed-s_64))"
"(if(if #t #t #f)"
"(let-values(((orig-s_86) s_85))"
"(let-values(((define-syntaxes16_87 id17_88 rhs18_89)"
"(let-values(((s_90)(if(syntax?$1 s_85)(syntax-e$1 s_85) s_85)))"
"(if(pair? s_90)"
"(let-values(((define-syntaxes19_91)"
"(let-values(((s_94)(car s_90))) s_94))"
"((id20_92 rhs21_93)"
"(let-values(((s_95)(cdr s_90)))"
"(let-values(((s_96)"
"(if(syntax?$1 s_95)"
"(syntax-e$1 s_95)"
" s_95)))"
"(if(pair? s_96)"
"(let-values(((id22_97)"
"(let-values(((s_99)(car s_96)))"
"(let-values(((s_100)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1"
" s_99)"
" s_99)))"
"(let-values(((flat-s_101)"
"(to-syntax-list.1"
" s_100)))"
"(if(not flat-s_101)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_86))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_86))"
"(let-values()"
"(let-values(((id_102)"
"(let-values(((lst_103)"
" flat-s_101))"
"(begin"
"(if(list?"
" lst_103)"
"(void)"
"(let-values()"
"(in-list"
" lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(id_105"
" lst_106)"
"(if(pair?"
" lst_106)"
"(let-values(((s_107)"
"(unsafe-car"
" lst_106)))"
"(if #t"
"(let-values(((id_108)"
"(let-values(((id_109)"
" id_105))"
"(let-values(((id_110)"
"(let-values()"
"(let-values(((id28_111)"
"(let-values()"
"(if(let-values(((or-part_112)"
"(if(syntax?$1"
" s_107)"
"(symbol?"
"(syntax-e$1"
" s_107))"
" #f)))"
"(if or-part_112"
" or-part_112"
"(symbol?"
" s_107)))"
" s_107"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"not an identifier\""
" orig-s_86"
" s_107)))))"
"(cons"
" id28_111"
" id_109)))))"
"(values"
" id_110)))))"
"(if #t"
"(for-loop_104"
" id_108"
"(unsafe-cdr"
" lst_106))"
" id_108))"
" id_105))"
" id_105))))"
" for-loop_104)"
" null"
" lst_103)))))"
"(alt-reverse"
" id_102)))))))))"
"((rhs23_98)"
"(let-values(((s_113)"
"(cdr s_96)))"
"(let-values(((s_114)"
"(if(syntax?$1"
" s_113)"
"(syntax-e$1"
" s_113)"
" s_113)))"
"(if(pair? s_114)"
"(let-values(((rhs24_115)"
"(let-values(((s_116)"
"(car"
" s_114)))"
" s_116))"
"(()"
"(let-values(((s_117)"
"(cdr"
" s_114)))"
"(let-values(((s_118)"
"(if(syntax?$1"
" s_117)"
"(syntax-e$1"
" s_117)"
" s_117)))"
"(if(null?"
" s_118)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                  \"bad syntax\""
" orig-s_86))))))"
"(values rhs24_115))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_86))))))"
"(values id22_97 rhs23_98))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_86))))))"
"(values define-syntaxes19_91 id20_92 rhs21_93))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_86)))))"
"(values #t define-syntaxes16_87 id17_88 rhs18_89)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_81)(as-expand-time-top-level-bindings id17_67 s_62 ctx_63)))"
"(let-values(((exp-rhs_82)"
"(let-values(((temp29_119) rhs18_68)((temp30_120)(as-named-context ctx_63 ids_81)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer94.1))"
"(expand-transformer92.1 #f #f #f #f #f #f #f #f temp29_119 temp30_120)"
"(expand-transformer94.1 temp29_119 temp30_120)))))"
"(let-values(((s25_121) s_62)"
"((disarmed-s26_122) disarmed-s_64)"
"((temp27_123)(list define-syntaxes16_66 ids_81 exp-rhs_82)))"
"(if(variable-reference-constant?(#%variable-reference rebuild102.1))"
"(rebuild100.1 #f #f s25_121 disarmed-s26_122 temp27_123)"
"(rebuild102.1 s25_121 disarmed-s26_122 temp27_123)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_124 ctx_125) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_124))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_126 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_143)(expand-context-observer ctx_127)))"
"(if obs_143"
"(let-values()(if #t(let-values()(call-expand-observe obs_143 'prim-require))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_127) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_126)))"
"(values))))"
"(let-values(((disarmed-s_128)(syntax-disarm$1 s_126)))"
"(let-values(((ok?_129 #%require31_130 req32_131)"
"(let-values(((s_144) disarmed-s_128))"
"(if(if #t #t #f)"
"(let-values(((orig-s_145) s_144))"
"(let-values(((#%require31_146 req32_147)"
"(let-values(((s_148)(if(syntax?$1 s_144)(syntax-e$1 s_144) s_144)))"
"(if(pair? s_148)"
"(let-values(((#%require33_149)"
"(let-values(((s_151)(car s_148))) s_151))"
"((req34_150)"
"(let-values(((s_152)(cdr s_148)))"
"(let-values(((s_153)"
"(if(syntax?$1 s_152)"
"(syntax-e$1 s_152)"
" s_152)))"
"(let-values(((flat-s_154)"
"(to-syntax-list.1 s_153)))"
"(if(not flat-s_154)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_145))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_145))"
"(let-values() flat-s_154))))))))"
"(values #%require33_149 req34_150))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_145)))))"
"(values #t #%require31_146 req32_147)))"
"(values #f #f #f)))))"
"(let-values(((sc_142)(new-scope 'macro)))"
"(begin"
"(let-values(((...expand/top-level.rkt:62:3_155) parse-and-perform-requires!22.1)"
"((temp35_156)"
"(alt-reverse"
"(let-values(((lst_162) req32_131))"
"(begin"
"(if(list? lst_162)(void)(let-values()(in-list lst_162)))"
"((letrec-values(((for-loop_163)"
"(lambda(fold-var_164 lst_165)"
"(if(pair? lst_165)"
"(let-values(((req_166)(unsafe-car lst_165)))"
"(if #t"
"(let-values(((fold-var_167)"
"(let-values(((fold-var_168)"
" fold-var_164))"
"(let-values(((fold-var_169)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_166"
" sc_142))"
" fold-var_168))))"
"(values fold-var_169)))))"
"(if #t"
"(for-loop_163 fold-var_167(unsafe-cdr lst_165))"
" fold-var_167))"
" fold-var_164))"
" fold-var_164))))"
" for-loop_163)"
" null"
" lst_162)))))"
"((s36_157) s_126)"
"((temp37_158) #f)"
"((temp38_159)(expand-context-namespace ctx_127))"
"((temp39_160)(expand-context-phase ctx_127))"
"((temp40_161)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp37_158"
" #t"
" temp35_156"
" s36_157"
" temp38_159"
" temp39_160"
" temp40_161)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...expand/top-level.rkt:62:3_155"
" keyword-procedure-extract"
" '(#:visit?)"
" 7)"
" '(#:visit?)"
"(list temp37_158)"
" temp35_156"
" s36_157"
" temp38_159"
" temp39_160"
" temp40_161)))"
" s_126)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_170 ctx_171)"
"(begin"
"(let-values(((obs_172)(expand-context-observer ctx_171)))"
"(if obs_172"
"(let-values()(if #t(let-values()(call-expand-observe obs_172 'prim-provide))(void)))"
"(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_170)))))"
" print-values)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:100:0_1) declare-hash-based-module!41.1)"
"((temp1_2) '#%main)"
"((main-primitives2_3) main-primitives)"
"((ns3_4) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns3_4 #f #f #f #f #f #f #f #f temp1_2 main-primitives2_3)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:100:0_1"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns3_4)"
" temp1_2"
" main-primitives2_3))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:101:0_5) declare-hash-based-module!41.1)"
"((temp4_6) '#%utils)"
"((utils-primitives5_7) utils-primitives)"
"((ns6_8) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns6_8 #f #f #f #f #f #f #f #f temp4_6 utils-primitives5_7)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:101:0_5"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns6_8)"
" temp4_6"
" utils-primitives5_7))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:102:0_9) declare-hash-based-module!41.1)"
"((temp7_10) '#%place-struct)"
"((place-struct-primitives8_11) place-struct-primitives)"
"((ns9_12) ns)"
"((temp10_13) '(dynamic-place)))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns9_12 #f #f temp10_13 #t #f #f #f #f temp7_10 place-struct-primitives8_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:102:0_9"
" keyword-procedure-extract"
" '(#:namespace #:protected)"
" 4)"
" '(#:namespace #:protected)"
"(list ns9_12 temp10_13)"
" temp7_10"
" place-struct-primitives8_11))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:107:0_14) declare-hash-based-module!41.1)"
"((temp11_15) '#%boot)"
"((boot-primitives12_16) boot-primitives)"
"((ns13_17) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns13_17 #f #f #f #f #f #f #f #f temp11_15 boot-primitives12_16)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:107:0_14"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns13_17)"
" temp11_15"
" boot-primitives12_16))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_18)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((...tt/expander/main.rkt:114:2_19) declare-hash-based-module!41.1)"
"((temp25_20) '#%linklet)"
"((linklet-primitives26_21) linklet-primitives_18)"
"((ns27_22) ns)"
"((temp28_23) #t)"
"((temp29_24) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns27_22"
" temp28_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp29_24"
" #t"
" temp25_20"
" linklet-primitives26_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:114:2_19"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:register-builtin?)"
" 4)"
" '(#:namespace #:primitive? #:register-builtin?)"
"(list ns27_22 temp28_23 temp29_24)"
" temp25_20"
" linklet-primitives26_21)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:117:0_25) declare-hash-based-module!41.1)"
"((temp14_26) '#%expobs)"
"((expobs-primitives15_27) expobs-primitives)"
"((ns16_28) ns)"
"((temp17_29) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns16_28 #f #f #f #f temp17_29 #t #f #f temp14_26 expobs-primitives15_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:117:0_25"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 4)"
" '(#:namespace #:protected?)"
"(list ns16_28 temp17_29)"
" temp14_26"
" expobs-primitives15_27))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:119:0_30) declare-kernel-module!8.1)"
"((ns18_31) ns)"
"((eval19_32) 1/eval)"
"((temp20_33)"
"(let-values(((ht_34) main-primitives))"
"(begin"
"(if((lambda(ht_35)(hash? ht_35)) ht_34)(void)(let-values()(default-in-hash-keys ht_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_37 i_38)"
"(if i_38"
"(let-values(((name_39)(hash-iterate-key ht_34 i_38)))"
"(if #t"
"(let-values(((table_40)"
"(let-values(((table_41) table_37))"
"(let-values(((table_42)"
"(let-values()"
"(let-values(((key_43 val_44)"
"(let-values()"
"(values"
"(let-values() name_39)"
" #t))))"
"(hash-set table_41 key_43 val_44)))))"
"(values table_42)))))"
"(if #t"
"(for-loop_36 table_40(hash-iterate-next ht_34 i_38))"
" table_40))"
" table_37))"
" table_37))))"
" for-loop_36)"
" '#hash()"
"(hash-iterate-first ht_34))))))"
"(if(variable-reference-constant?(#%variable-reference declare-kernel-module!8.1))"
"(declare-kernel-module!6.1 eval19_32 temp20_33 ns18_31)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:119:0_30"
" keyword-procedure-extract"
" '(#:eval #:main-ids)"
" 3)"
" '(#:eval #:main-ids)"
"(list eval19_32 temp20_33)"
" ns18_31))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_45) runtime-instances))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((name_49)(unsafe-car lst_48)))"
"(if #t"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(if(eq? name_49 '#%kernel)"
" fold-var_51"
"(let-values(((fold-var_52) fold-var_51))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...tt/expander/main.rkt:125:2_54)"
" copy-runtime-module!26.1)"
"((name30_55) name_49)"
"((ns31_56) ns)"
"((temp32_57)"
"(let-values(((or-part_58)"
"(eq?"
" name_49"
" '#%foreign)))"
"(if or-part_58"
" or-part_58"
"(eq? name_49 '#%futures)))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" copy-runtime-module!26.1))"
"(copy-runtime-module!24.1"
" #f"
" #f"
" #f"
" #f"
" ns31_56"
" #f"
" #f"
" temp32_57"
" #t"
" #f"
" #f"
" #f"
" #f"
" name30_55)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:125:2_54"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 3)"
" '(#:namespace #:protected?)"
"(list ns31_56 temp32_57)"
" name30_55))))"
"(void)))))"
"(values fold-var_53)))))))"
"(if #t(for-loop_46 fold-var_50(unsafe-cdr lst_48)) fold-var_50))"
" fold-var_47))"
" fold-var_47))))"
" for-loop_46)"
"(void)"
" lst_45))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:129:0_59) declare-reexporting-module!50.1)"
"((temp21_60) '#%builtin)"
"((temp22_61)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns23_62) ns)"
"((temp24_63) #f))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns23_62 temp24_63 #t temp21_60 temp22_61)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:129:0_59"
" keyword-procedure-extract"
" '(#:namespace #:reexport?)"
" 4)"
" '(#:namespace #:reexport?)"
"(list ns23_62 temp24_63)"
" temp21_60"
" temp22_61))))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_64)(1/datum->syntax core-stx s_64))))"
);
