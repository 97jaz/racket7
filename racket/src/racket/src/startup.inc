  EVAL_ONE_STR(
"(linklet"
"()"
"((1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(embedded-load embedded-load)"
"(1/syntax->datum syntax->datum)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(1/resolved-module-path? resolved-module-path?)"
"(boot boot)"
"(1/current-namespace current-namespace)"
"(expand$1 expand)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-attach-module namespace-attach-module)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(identifier? identifier?)"
"(1/syntax-e syntax-e)"
"(1/syntax-debug-info syntax-debug-info)"
"(namespace->instance namespace->instance)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/eval eval)"
"(1/namespace-require namespace-require)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(syntax?$1 syntax?)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-path-index-join module-path-index-join)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(1/module->language-info module->language-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/compile compile)"
"(1/datum->syntax datum->syntax))"
"(void)"
"(define-values"
"(qq-append)"
"  (lambda (a_106 b_107) (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing \"list?\" a_106))))"
"(void)"
"(void)"
"(define-values(call/ec) call-with-escape-continuation)"
"(void)"
"(void)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 \"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() #f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() #f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() #f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() #f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28))))))"
"(void)"
"(void)"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_455 thunk_456)(begin0(with-continuation-mark exception-handler-key exnh_455(thunk_456))(void))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_457)(gensym)))"
"(let-values(((up_458)"
"(lambda(who_459 mut?_460 set_461 ht_462 key_463 xform_464 default_465)"
"(begin"
"(if(if(hash? ht_462)(if mut?_460(not(immutable? ht_462))(immutable? ht_462)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_459"
"                           (if mut?_460 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_462)))"
"(if(if(procedure? xform_464)(procedure-arity-includes? xform_464 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_459 \"(any/c . -> . any/c)\" xform_464)))"
"(let-values(((v_466)(hash-ref ht_462 key_463 default_465)))"
"(if(eq? v_466 not-there_457)"
"                          (raise-mismatch-error who_459 \"no value found for key: \" key_463)"
"(set_461 ht_462 key_463(xform_464 v_466))))))))"
"(let-values(((hash-update_467)"
"(case-lambda"
"((ht_471 key_472 xform_473 default_474)"
"(up_458 'hash-update #f hash-set ht_471 key_472 xform_473 default_474))"
"((ht_475 key_476 xform_477)(hash-update ht_475 key_476 xform_477 not-there_457))))"
"((hash-update!_468)"
"(case-lambda"
"((ht_478 key_479 xform_480 default_481)"
"(up_458 'hash-update! #t hash-set! ht_478 key_479 xform_480 default_481))"
"((ht_482 key_483 xform_484)(hash-update! ht_482 key_483 xform_484 not-there_457))))"
"((hash-has-key?_469)"
"(lambda(ht_485 key_486)"
"(begin"
"(if(hash? ht_485)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_485 key_486)))"
"(not(eq? not-there_457(hash-ref ht_485 key_486 not-there_457))))))"
"((hash-ref!_470)"
"(lambda(ht_487 key_488 new_489)"
"(begin"
"(if(if(hash? ht_487)(not(immutable? ht_487)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
"                             \"(and/c hash? (not/c immutable?))\""
" 0"
" ht_487"
" key_488"
" new_489)))"
"(let-values(((v_490)(hash-ref ht_487 key_488 not-there_457)))"
"(if(eq? not-there_457 v_490)"
"(let-values(((n_491)(if(procedure? new_489)(new_489) new_489)))"
"(begin(hash-set! ht_487 key_488 n_491) n_491))"
" v_490))))))"
"(values hash-update_467 hash-update!_468 hash-has-key?_469 hash-ref!_470)))))"
"(void)"
"(void)"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7) s_7 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c path-for-some-system? path-string?)\" 0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c string? bytes?)\" 1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
"            (let-values () (raise-mismatch-error who_10 \"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
"                                             (finish_24 (bytes-length bs_23) #\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" #f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_34 i_35) #\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_38 root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                           \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_38"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_38"
"                                 \"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_42 #\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) 1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4 5) #\"\\\\\" (subbytes bstr_42 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_42 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 0 1)(subbytes bstr_42 2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(void)"
"(void)"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_3) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 #\"\") s_5)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(void)"
"(void)"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) #f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" #f)"
"          (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"                        (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) #f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 #f))"
"((program_29)(find-executable-path program_29 #f #f))))"
"(void)"
"(void)"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" read-square-bracket-as-paren"
" #t"
" read-curly-brace-as-paren"
" #t"
" read-square-bracket-with-tag"
" #f"
" read-curly-brace-with-tag"
" #f"
" read-accept-box"
" #t"
" read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" read-cdot"
" #f"
" read-accept-dot"
" #t"
" read-accept-infix-dot"
" #t"
" read-accept-quasiquote"
" #t"
" read-accept-reader"
" #f"
" read-accept-lang"
" #t"
" current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(void)"
"(void)"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_1)"
"(if(complete-path? collects-path_1)"
"(let-values()(simplify-path collects-path_1))"
"(if(absolute-path? collects-path_1)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_1 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_1 #t)))"
"(if p_6(simplify-path p_6) #f)))))))"
"(void)"
"(void)"
"(define-values"
"(-check-relpath)"
"(lambda(who_1 s_2)"
"(begin"
"      (if (path-string? s_2) (void) (let-values () (raise-argument-error who_1 \"path-string?\" s_2)))"
"(if(relative-path? s_2)"
"(void)"
"        (let-values () (raise-arguments-error who_1 \"invalid relative path\" \"path\" s_2))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_4 collection-path_5)"
"(begin(-check-relpath who_3 collection_4)(for-each(lambda(p_6)(-check-relpath who_3 p_6)) collection-path_5))))"
"(define-values"
"(-check-fail)"
"(lambda(who_7 fail_8)"
"(if(if(procedure? fail_8)(procedure-arity-includes? fail_8 1) #f)"
"(void)"
"      (let-values () (raise-argument-error who_7 \"(any/c . -> . any)\" fail_8)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_9 collection_10 collection-path_11)"
"(begin"
"(-check-collection 'collection-path collection_10 collection-path_11)"
"(-check-fail 'collection-path fail_9)"
"(find-col-file fail_9 collection_10 collection-path_11 #f #f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_12 check-compiled?_13 file-name_14 collection_15 collection-path_16)"
"(begin"
"(-check-relpath 'collection-file-path file-name_14)"
"(-check-collection 'collection-file-path collection_15 collection-path_16)"
"(-check-fail 'collection-file-path fail_12)"
"(find-col-file fail_12 collection_15 collection-path_16 file-name_14 check-compiled?_13))))"
"(define-values"
"(get-config-table)"
"(lambda(d_17)"
"    (let-values (((p_18) (if d_17 (build-path d_17 \"config.rktd\") #f)))"
"(let-values(((or-part_19)"
"(if p_18"
"(if(file-exists? p_18)"
"(with-input-from-file"
" p_18"
"(lambda()"
"(let-values(((v_20)(call-with-default-reading-parameterization read)))"
"(if(hash? v_20) v_20 #f))))"
" #f)"
" #f)))"
"(if or-part_19 or-part_19 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_21)(hash-ref config-table_21 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_22)"
"(if(string? p_22)"
"(let-values()(collects-relative-path->complete-path(string->path p_22)))"
"(if(bytes? p_22)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_22)))"
"(if(path? p_22)(let-values()(collects-relative-path->complete-path p_22))(let-values() p_22))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_23)"
"(if(complete-path? p_23)"
"(let-values() p_23)"
"(let-values()"
"(path->complete-path"
" p_23"
"(let-values(((or-part_24)(find-main-collects)))(if or-part_24 or-part_24(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_25 key_26 orig-l_27)"
"(let-values(((l_28)(hash-ref ht_25 key_26 #f)))"
"(if l_28"
"((letrec-values(((loop_29)"
"(lambda(l_30)"
"(if(null? l_30)"
"(let-values() null)"
"(if(not(car l_30))"
"(let-values()(append orig-l_27(loop_29(cdr l_30))))"
"(let-values()(cons(coerce-to-path(car l_30))(loop_29(cdr l_30)))))))))"
" loop_29)"
" l_28)"
" orig-l_27))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_31)(get-config-table(find-main-config))))"
"(let-values(((lf_32)"
"(coerce-to-path"
"(let-values(((or-part_33)(hash-ref ht_31 'links-file #f)))"
"(if or-part_33"
" or-part_33"
"(build-path"
"(let-values(((or-part_34)(hash-ref ht_31 'share-dir #f)))"
"                            (if or-part_34 or-part_34 (build-path 'up \"share\")))"
"                          \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) #f)"
"           (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_31) \"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_31 'links-search-files(list lf_32)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout 0(cdr old-stamp_36))) #f) #f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() #f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() #f))"
"(loop_39 base_41))"
" #f)))))"
" loop_39)"
" path_35)"
" #f)))"
"(if(not(file-exists? path_35))"
"(cons #f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_35(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes 8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes 8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 #f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= 2(length p_62))))"
"(if or-part_63 or-part_63(= 3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_60)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 #f #f)"
"(void)"
"(let-values()(hash-set! ht_67 #f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
"        (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) #f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 #f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) #t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
"                                                                                \"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
"                                                (string-append (to-string_103 collection_93) \"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_119) (format \"\\n ~a ~a\" \" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) 5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_122) (format \"\\n   ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
"                                                \"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) #t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring"
" file-name_127"
"(- len_128 4)))"
"(string-append"
"(substring file-name_127 0(- len_128 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" #f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values(((or-part_129) found-col_112))"
"(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
"          (let-values (((try-path_134) (path-add-extension path_131 #\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" #f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_140)(find-library-collection-paths extra-collects-dirs_140 null))"
"((extra-collects-dirs_141 post-collects-dirs_142)"
"(let-values(((user-too?_143)(use-user-specific-search-paths))"
"((cons-if_144)(lambda(f_146 r_147)(if f_146(cons f_146 r_147) r_147)))"
"((config-table_145)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_143"
"         (let-values (((c_148) (environment-variables-ref (current-environment-variables) #\"PLTCOLLECTS\")))"
"           (if c_148 (bytes->string/locale c_148 '#\\?) \"\"))"
"         \"\")"
"(add-config-search"
" config-table_145"
" 'collects-search-dirs"
"(cons-if_144"
"(if user-too?_143"
"           (build-path (find-system-path 'addon-dir) (get-installation-name config-table_145) \"collects\")"
" #f)"
"((letrec-values(((loop_149)"
"(lambda(l_150)"
"(if(null? l_150)"
" null"
"(let-values(((collects-path_151)(car l_150)))"
"(let-values(((v_152)(exe-relative-path->complete-path collects-path_151)))"
"(if v_152"
"(cons"
"(simplify-path(path->complete-path v_152(current-directory)))"
"(loop_149(cdr l_150)))"
"(loop_149(cdr l_150)))))))))"
" loop_149)"
"(append extra-collects-dirs_141(list(find-system-path 'collects-dir)) post-collects-dirs_142)))))))))"
"(void)"
"(void)"
"(define-values(load/use-compiled)(lambda(f_1)((current-load/use-compiled) f_1 #f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 #f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))(if or-part_9 or-part_9 0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max 0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(void)"
"(void)"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1534)"
"(if(keyword-impersonator? v_1534)(let-values()((keyword-impersonator-ref v_1534) v_1534))(let-values() #f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref 0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref 1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1535)"
"(let-values(((req_1536 allowed_1537)(procedure-keywords proc_1535))"
"((a_1538)(procedure-arity proc_1535))"
"((keywords-desc_1539)"
"(lambda(opt_1541 req_1542)"
"(format"
"                     \"~a with keyword~a~a\""
"                     (if (null? (cdr req_1542)) (format \"an ~aargument\" opt_1541) (format \"~aarguments\" opt_1541))"
"                     (if (null? (cdr req_1542)) \"\" \"s\")"
"(let-values(((tmp_1543)(length req_1542)))"
"(if(equal? tmp_1543 1)"
"                         (let-values () (format \" ~a\" (car req_1542)))"
"(if(equal? tmp_1543 2)"
"                           (let-values () (format \" ~a and ~a\" (car req_1542) (cadr req_1542)))"
"(let-values()"
"((letrec-values(((loop_1544)"
"(lambda(req_1545)"
"(if(null?(cdr req_1545))"
"                                                   (format \" and ~a\" (car req_1545))"
"                                                   (format \" ~a,~a\" (car req_1545) (loop_1544 (cdr req_1545)))))))"
" loop_1544)"
" req_1542))))))))"
"((method-adjust_1540)"
"(lambda(a_1546)"
"(if(let-values(((or-part_1547)(okm? proc_1535)))"
"(if or-part_1547 or-part_1547(keyword-method? proc_1535)))"
"(if(zero? a_1546) 0(sub1 a_1546))"
" a_1546))))"
"(string-append"
"(if(number? a_1538)"
"         (let-values () (let-values (((a_1548) (method-adjust_1540 a_1538))) (format \"~a\" a_1548)))"
"(if(arity-at-least? a_1538)"
"(let-values()"
"             (let-values (((a_1549) (method-adjust_1540 (arity-at-least-value a_1538)))) (format \"at least ~a\" a_1549)))"
"           (let-values () \"a different number\")))"
"       (if (null? req_1536) \"\" (format \" plus ~a\" (keywords-desc_1539 \"\" req_1536)))"
"(if allowed_1537"
"(let-values(((others_1550)"
"((letrec-values(((loop_1551)"
"(lambda(req_1552 allowed_1553)"
"(if(null? req_1552)"
"(let-values() allowed_1553)"
"(if(eq?(car req_1552)(car allowed_1553))"
"(let-values()(loop_1551(cdr req_1552)(cdr allowed_1553)))"
"(let-values()"
"(cons(car allowed_1553)(loop_1551 req_1552(cdr allowed_1553)))))))))"
" loop_1551)"
" req_1536"
" allowed_1537)))"
"           (if (null? others_1550) \"\" (format \" plus ~a\" (keywords-desc_1539 \"optional \" others_1550))))"
"         \" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" 0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(make-required)"
"(lambda(name_1554 fail-proc_1555 method?_1556 impersonator?_1557)"
"(let-values(((s:_1558 mk_1559 ?_1560 -ref_1561 -set!_1562)"
"(make-struct-type"
"(let-values(((or-part_1563) name_1554))(if or-part_1563 or-part_1563 'unknown))"
"(if impersonator?_1557"
"(if method?_1556 struct:keyword-method-impersonator struct:keyword-procedure-impersonator)"
"(if method?_1556 struct:keyword-method struct:keyword-procedure))"
" 0"
" 0"
" #f"
"(list"
"(cons prop:arity-string generate-arity-string)"
"(cons prop:named-keyword-procedure(cons name_1554 fail-proc_1555))"
"(cons prop:incomplete-arity #t))"
"(current-inspector)"
" fail-proc_1555)))"
" mk_1559)))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1564 info-l_1565)"
"(if(exact-integer? v_1564)(make-struct-field-accessor(list-ref info-l_1565 3) v_1564) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure-impersonator make-kpp keyword-procedure-impersonator? kpp-ref kpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1566)(kpp-ref v_1566 0))))))"
"(define-values"
"(struct:keyword-method-impersonator make-kmp keyword-method-impersonator? kmp-ref kmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-method"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1567)(kmp-ref v_1567 0))))))"
"(define-values"
"(struct:okpp make-optional-keyword-procedure-impersonator okpp? okpp-ref okpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1568)(okpp-ref v_1568 0))))))"
"(define-values"
"(struct:okmp make-optional-keyword-method-impersonator okmp? okmp-ref okmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1569)(okmp-ref v_1569 0))))))"
"(define-values"
"(make-keyword-procedure)"
"(case-lambda"
"((proc_1570)(make-keyword-procedure proc_1570(lambda args_1571(apply proc_1570 null null args_1571))))"
"((proc_1572 plain-proc_1573)"
"(make-optional-keyword-procedure"
"(make-keyword-checker null #f(procedure-arity proc_1572))"
" proc_1572"
" null"
" #f"
" plain-proc_1573))))"
"(define-values"
"(keyword-apply)"
"(lambda(proc_1574 kws_1575 kw-vals_1576 normal-args_1577 . normal-argss_1578)"
"(let-values(((type-error_1579)"
"(lambda(what_1580 which_1581)"
"(apply"
" raise-argument-error"
" 'keyword-apply"
" what_1580"
" which_1581"
" proc_1574"
" kws_1575"
" kw-vals_1576"
" normal-args_1577"
" normal-argss_1578))))"
"(begin"
"        (if (procedure? proc_1574) (void) (let-values () (type-error_1579 \"procedure?\" 0)))"
"((letrec-values(((loop_1582)"
"(lambda(ks_1583)"
"(if(null? ks_1583)"
"(let-values()(void))"
"(if(let-values(((or-part_1584)(not(pair? ks_1583))))"
"(if or-part_1584 or-part_1584(not(keyword?(car ks_1583)))))"
"                                (let-values () (type-error_1579 \"(listof keyword?)\" 1))"
"(if(null?(cdr ks_1583))"
"(let-values()(void))"
"(if(let-values(((or-part_1585)(not(pair?(cdr ks_1583)))))"
"(if or-part_1585 or-part_1585(not(keyword?(cadr ks_1583)))))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(if(keyword<?(car ks_1583)(cadr ks_1583))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(let-values()"
"                                        (type-error_1579 \"(and/c (listof? keyword?) sorted? distinct?)\" 1))))))))))"
" loop_1582)"
" kws_1575)"
"        (if (list? kw-vals_1576) (void) (let-values () (type-error_1579 \"list?\" 2)))"
"(if(=(length kws_1575)(length kw-vals_1576))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'keyword-apply"
"             \"keyword list length does not match value list length\""
"             \"keyword list length\""
"(length kws_1575)"
"             \"value list length\""
"(length kw-vals_1576)"
"             \"keyword list\""
" kws_1575"
"             \"value list\""
" kw-vals_1576)))"
"(let-values(((normal-args_1586)"
"((letrec-values(((loop_1587)"
"(lambda(normal-argss_1588 pos_1589)"
"(if(null?(cdr normal-argss_1588))"
"(let-values(((l_1590)(car normal-argss_1588)))"
"                                              (if (list? l_1590) l_1590 (type-error_1579 \"list?\" pos_1589)))"
"(cons"
"(car normal-argss_1588)"
"(loop_1587(cdr normal-argss_1588)(add1 pos_1589)))))))"
" loop_1587)"
"(cons normal-args_1577 normal-argss_1578)"
" 3)))"
"(if(null? kws_1575)"
"(apply proc_1574 normal-args_1586)"
"(apply"
"(keyword-procedure-extract/method kws_1575(+ 2(length normal-args_1586)) proc_1574 0)"
" kws_1575"
" kw-vals_1576"
" normal-args_1586)))))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1591)"
"(if(keyword-procedure? p_1591)"
"(let-values()(values(keyword-procedure-required p_1591)(keyword-procedure-allowed p_1591)))"
"(if(procedure? p_1591)"
"(let-values()"
"(if(new-procedure? p_1591)"
"(let-values(((v_1592)(new-procedure-ref p_1591)))"
"(if(procedure? v_1592)"
"(procedure-keywords v_1592)"
"(let-values(((a_1593)(procedure-accessor-ref p_1591)))"
"(if a_1593(procedure-keywords(a_1593 p_1591))(values null null)))))"
"(values null null)))"
"        (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_1591))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1594 . args_1595)(apply(keyword-procedure-extract/method null 0 proc_1594 0) null null args_1595)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1596 kws_1597)"
"((letrec-values(((loop_1598)"
"(lambda(kws_1599 required_1600 allowed_1601)"
"(if(null? kws_1599)"
"(let-values()(if(null? required_1600)(values #f #f)(values(car required_1600) #f)))"
"(if(if(pair? required_1600)(eq?(car required_1600)(car kws_1599)) #f)"
"(let-values()"
"(loop_1598(cdr kws_1599)(cdr required_1600)(if allowed_1601(cdr allowed_1601) #f)))"
"(if(not allowed_1601)"
"(let-values()(loop_1598(cdr kws_1599) required_1600 #f))"
"(if(pair? allowed_1601)"
"(let-values()"
"(if(eq?(car allowed_1601)(car kws_1599))"
"(loop_1598(cdr kws_1599) required_1600(cdr allowed_1601))"
"(loop_1598 kws_1599 required_1600(cdr allowed_1601))))"
"(let-values()(values #f(car kws_1599))))))))))"
" loop_1598)"
" kws_1597"
"(keyword-procedure-required p_1596)"
"(keyword-procedure-allowed p_1596))))"
"(define-values"
"(make-keyword-checker)"
"(lambda(req-kws_1602 allowed-kws_1603 arity_1604)"
"(let-values()"
"(if(not allowed-kws_1603)"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1615 a_1616)(= a_1616 arity_1604)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1617)(arity-at-least-value arity_1604)))"
"(lambda(kws_1618 a_1619)(>= a_1619 arity_1617))))"
"(let-values()(lambda(kws_1620 a_1621)(arity-includes? arity_1604 a_1621))))))"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1622 a_1623)(if(subset?$1 req-kws_1602 kws_1622)(= a_1623 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1624)(arity-at-least-value arity_1604)))"
"(lambda(kws_1625 a_1626)(if(subset?$1 req-kws_1602 kws_1625)(>= a_1626 arity_1624) #f))))"
"(let-values()"
"(lambda(kws_1627 a_1628)"
"(if(subset?$1 req-kws_1602 kws_1627)(arity-includes? arity_1604 a_1628) #f))))))))"
"(if(null? allowed-kws_1603)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1629 a_1630)(if(null? kws_1629)(= a_1630 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1631)(arity-at-least-value arity_1604)))"
"(lambda(kws_1632 a_1633)(if(null? kws_1632)(>= a_1633 arity_1631) #f))))"
"(let-values()"
"(lambda(kws_1634 a_1635)(if(null? kws_1634)(arity-includes? arity_1604 a_1635) #f))))))"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1636 a_1637)(if(subset?$1 kws_1636 allowed-kws_1603)(= a_1637 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1638)(arity-at-least-value arity_1604)))"
"(lambda(kws_1639 a_1640)"
"(if(subset?$1 kws_1639 allowed-kws_1603)(>= a_1640 arity_1638) #f))))"
"(let-values()"
"(lambda(kws_1641 a_1642)"
"(if(subset?$1 kws_1641 allowed-kws_1603)(arity-includes? arity_1604 a_1642) #f))))))"
"(let-values()"
"(if(equal? req-kws_1602 allowed-kws_1603)"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1643 a_1644)"
"(if((letrec-values(((loop_1645)"
"(lambda(kws_1646 req-kws_1647)"
"(if(null? req-kws_1647)"
"(null? kws_1646)"
"(if(null? kws_1646)"
" #f"
"(if(eq?(car kws_1646)(car req-kws_1647))"
"(loop_1645(cdr kws_1646)(cdr req-kws_1647))"
" #f))))))"
" loop_1645)"
" kws_1643"
" req-kws_1602)"
"(= a_1644 arity_1604)"
" #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1648)(arity-at-least-value arity_1604)))"
"(lambda(kws_1649 a_1650)"
"(if((letrec-values(((loop_1651)"
"(lambda(kws_1652 req-kws_1653)"
"(if(null? req-kws_1653)"
"(null? kws_1652)"
"(if(null? kws_1652)"
" #f"
"(if(eq?(car kws_1652)(car req-kws_1653))"
"(loop_1651(cdr kws_1652)(cdr req-kws_1653))"
" #f))))))"
" loop_1651)"
" kws_1649"
" req-kws_1602)"
"(>= a_1650 arity_1648)"
" #f))))"
"(let-values()"
"(lambda(kws_1654 a_1655)"
"(if((letrec-values(((loop_1656)"
"(lambda(kws_1657 req-kws_1658)"
"(if(null? req-kws_1658)"
"(null? kws_1657)"
"(if(null? kws_1657)"
" #f"
"(if(eq?(car kws_1657)(car req-kws_1658))"
"(loop_1656(cdr kws_1657)(cdr req-kws_1658))"
" #f))))))"
" loop_1656)"
" kws_1654"
" req-kws_1602)"
"(arity-includes? arity_1604 a_1655)"
" #f)))))"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1659 a_1660)"
"(if(subsets? req-kws_1602 kws_1659 allowed-kws_1603)(= a_1660 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1661)(arity-at-least-value arity_1604)))"
"(lambda(kws_1662 a_1663)"
"(if(subsets? req-kws_1602 kws_1662 allowed-kws_1603)(>= a_1663 arity_1661) #f))))"
"(let-values()"
"(lambda(kws_1664 a_1665)"
"(if(subsets? req-kws_1602 kws_1664 allowed-kws_1603)"
"(arity-includes? arity_1604 a_1665)"
" #f))))))))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(arity_1666 a_1667)"
"(if(integer? arity_1666)"
"(let-values()(= arity_1666 a_1667))"
"(if(arity-at-least? arity_1666)"
"(let-values()(>= a_1667(arity-at-least-value a_1667)))"
"(let-values()(ormap(lambda(ar_1668)(arity-includes? ar_1668 a_1667)) arity_1666))))))"
"(define-values"
"(subset?$1)"
"(lambda(l1_1669 l2_1670)"
"(if(null? l1_1669)"
"(let-values() #t)"
"(if(null? l2_1670)"
"(let-values() #f)"
"(if(eq?(car l1_1669)(car l2_1670))"
"(let-values()(subset?$1(cdr l1_1669)(cdr l2_1670)))"
"(let-values()(subset?$1 l1_1669(cdr l2_1670))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1671 l2_1672 l3_1673)"
"(if(null? l1_1671)"
"(let-values()(subset?$1 l2_1672 l3_1673))"
"(if(null? l2_1672)"
"(let-values() #f)"
"(if(null? l3_1673)"
"(let-values() #f)"
"(let-values()"
"(let-values(((v2_1674)(car l2_1672)))"
"(if(eq?(car l1_1671) v2_1674)"
"(let-values()(subsets?(cdr l1_1671)(cdr l2_1672)(cdr l3_1673)))"
"(if(eq? v2_1674(car l3_1673))"
"(let-values()(subsets? l1_1671(cdr l2_1672)(cdr l3_1673)))"
"(let-values()(subsets? l1_1671 l2_1672(cdr l3_1673))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1675 n_1676 p_1677 method-n_1678)"
"(if(if(keyword-procedure? p_1677)((keyword-procedure-checker p_1677) kws_1675 n_1676) #f)"
"(keyword-procedure-proc p_1677)"
"(let-values(((p2_1679)"
"(if(not(keyword-procedure? p_1677))"
"(if(procedure? p_1677)"
"(let-values(((or-part_1680)"
"(if(new-procedure? p_1677)"
"(let-values(((a_1681)(procedure-accessor-ref p_1677)))"
"(if a_1681(a_1681 p_1677) #f))"
" #f)))"
"(if or-part_1680"
" or-part_1680"
"(let-values(((or-part_1682)(procedure-extract-target p_1677)))"
"(if or-part_1682 or-part_1682(if(new-procedure? p_1677) 'method #f)))))"
" #f)"
" #f)))"
"(if p2_1679"
"(if(eq? p2_1679 'method)"
"(let-values(((p3_1683)"
"(keyword-procedure-extract/method"
" kws_1675"
"(add1 n_1676)"
"(new-procedure-ref p_1677)"
"(add1 method-n_1678))))"
"(lambda(kws_1684 kw-args_1685 . args_1686)"
"(apply p3_1683 kws_1684 kw-args_1685(cons p_1677 args_1686))))"
"(keyword-procedure-extract/method kws_1675 n_1676 p2_1679 method-n_1678))"
"(lambda(kws_1687 kw-args_1688 . args_1689)"
"(let-values(((missing-kw_1690 extra-kw_1691)"
"(if(keyword-procedure? p_1677)(check-kw-args p_1677 kws_1687)(values #f(car kws_1687)))))"
"(let-values(((n_1692)"
"(let-values(((method-n_1695)"
"(+"
" method-n_1678"
"(if(let-values(((or-part_1696)(keyword-method? p_1677)))"
"(if or-part_1696 or-part_1696(okm? p_1677)))"
" 1"
" 0))))"
"(if(>= n_1676 method-n_1695)(- n_1676 method-n_1695) n_1676)))"
"((args-str_1693)"
"(if(if(null? args_1689)(null? kws_1687) #f)"
"                              \"\""
"(apply"
" string-append"
"                               \"\\n  arguments...:\""
"(append"
"                                (map (lambda (v_1697) (format \"\\n   ~e\" v_1697)) args_1689)"
"(map"
"                                 (lambda (kw_1698 kw-arg_1699) (format \"\\n   ~a ~e\" kw_1698 kw-arg_1699))"
" kws_1687"
" kw-args_1688)))))"
"((proc-name_1694)"
"(lambda(p_1700)"
"(let-values(((or-part_1701)"
"(if(named-keyword-procedure? p_1700)"
"(car(keyword-procedure-name+fail p_1700))"
" #f)))"
"(if or-part_1701"
" or-part_1701"
"(let-values(((or-part_1702)(object-name p_1700)))"
"(if or-part_1702 or-part_1702 p_1700)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1691"
"(if(keyword-procedure? p_1677)"
"(format"
"(string-append"
"                        \"application: procedure does not expect an argument with given keyword\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  given keyword: ~a\""
"                        \"~a\")"
"(proc-name_1694 p_1677)"
" extra-kw_1691"
" args-str_1693)"
"(if(procedure? p_1677)"
"(format"
"(string-append"
"                          \"application: procedure does not accept keyword arguments\\n\""
"                          \"  procedure: ~a\""
"                          \"~a\")"
"(proc-name_1694 p_1677)"
" args-str_1693)"
"(format"
"(string-append"
"                          \"application: not a procedure;\\n\""
"                          \" expected a procedure that can be applied to arguments\\n\""
"                          \"  given: ~e\""
"                          \"~a\")"
" p_1677"
" args-str_1693)))"
"(if missing-kw_1690"
"(format"
"(string-append"
"                        \"application: required keyword argument not supplied\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  required keyword: ~a\""
"                        \"~a\")"
"(proc-name_1694 p_1677)"
" missing-kw_1690"
" args-str_1693)"
"(format"
"(string-append"
"                        \"application: no case matching ~a non-keyword argument~a\\n\""
"                        \"  procedure: ~a\""
"                        \"~a\")"
"(- n_1692 2)"
"                       (if (= 1 (- n_1692 2)) \"\" \"s\")"
"(proc-name_1694 p_1677)"
" args-str_1693)))"
"(current-continuation-marks)))))))))))"
"(define-values"
"(keyword-procedure-extract)"
"(lambda(p_1703 kws_1704 n_1705)(keyword-procedure-extract/method kws_1704 n_1705 p_1703 0)))"
"(void)"
"(void)"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(void)"
"(void)"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
"                      (if (list? l_2) (void) (raise-argument-error 'reverse \"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(void)"
"(void)"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence #f 1 0 #f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2558 si_2559)"
"(begin"
"(if(if(vector? v_2558)"
"(if(= 3(vector-length v_2558))"
"(if(procedure?(vector-ref v_2558 0))"
"(if(procedure-arity-includes?(vector-ref v_2558 0) 1)"
"(if(procedure?(vector-ref v_2558 1))"
"(if(procedure-arity-includes?(vector-ref v_2558 1) 1)"
"(if(procedure?(vector-ref v_2558 2))(procedure-arity-includes?(vector-ref v_2558 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_2558)))"
"(vector->immutable-vector v_2558)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2560 si_2561)"
"(begin"
"(if(if(procedure? v_2560)(procedure-arity-includes? v_2560 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_2560)))"
" v_2560))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2562 sinfo_2563)"
"(begin"
"(if(if(procedure? v_2562)(procedure-arity-includes? v_2562 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'sequence-property-guard \"(procedure-arity-includes/c 1)\" v_2562)))"
"(lambda(self_2564)"
"(let-values(((s_2565)(v_2562 self_2564)))"
"(begin"
"(if(sequence? s_2565)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
"                  \"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2565)))"
" s_2565)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2566)"
"(let-values(((or-part_2567)(list? v_2566)))(if or-part_2567 or-part_2567(stream-via-prop? v_2566)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2568)"
"(if(null? v_2568)"
" #f"
"(let-values(((or-part_2569)(pair? v_2568)))"
"(if or-part_2569 or-part_2569(not((unsafe-vector-ref(stream-ref v_2568) 0) v_2568)))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2572)"
"(if(pair? v_2572)"
"(let-values()(car v_2572))"
"(let-values()((unsafe-vector-ref(stream-ref v_2572) 1) v_2572)))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2574)"
"(if(pair? v_2574)"
"(let-values()(cdr v_2574))"
"(let-values()"
"(let-values(((r_2575)((unsafe-vector-ref(stream-ref v_2574) 2) v_2574)))"
"(begin"
"(if(stream? r_2575)"
"(void)"
"              (let-values () (raise-mismatch-error 'stream-rest-guard \"result is not a stream: \" r_2575)))"
" r_2575))))))"
"(define-values"
"(sequence?)"
"(lambda(v_2577)"
"(let-values(((or-part_2578)(exact-nonnegative-integer? v_2577)))"
"(if or-part_2578"
" or-part_2578"
"(let-values(((or-part_2579)(do-sequence? v_2577)))"
"(if or-part_2579"
" or-part_2579"
"(let-values(((or-part_2580)(sequence-via-prop? v_2577)))"
"(if or-part_2580"
" or-part_2580"
"(let-values(((or-part_2581)(stream? v_2577)))"
"(if or-part_2581"
" or-part_2581"
"(let-values(((or-part_2582)(mpair? v_2577)))"
"(if or-part_2582"
" or-part_2582"
"(let-values(((or-part_2583)(vector? v_2577)))"
"(if or-part_2583"
" or-part_2583"
"(let-values(((or-part_2584)(flvector? v_2577)))"
"(if or-part_2584"
" or-part_2584"
"(let-values(((or-part_2585)(fxvector? v_2577)))"
"(if or-part_2585"
" or-part_2585"
"(let-values(((or-part_2586)(string? v_2577)))"
"(if or-part_2586"
" or-part_2586"
"(let-values(((or-part_2587)(bytes? v_2577)))"
"(if or-part_2587"
" or-part_2587"
"(let-values(((or-part_2588)(input-port? v_2577)))"
"(if or-part_2588"
" or-part_2588"
"(let-values(((or-part_2589)(hash? v_2577)))"
"(if or-part_2589"
" or-part_2589"
"(if(:sequence? v_2577)"
"(not(struct-type? v_2577))"
" #f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2590 v_2591)"
"(if(exact-nonnegative-integer? v_2591)"
"(let-values()(:integer-gen v_2591))"
"(if(do-sequence? v_2591)"
"(let-values()((do-sequence-ref v_2591 0)))"
"(if(mpair? v_2591)"
"(let-values()(:mlist-gen v_2591))"
"(if(list? v_2591)"
"(let-values()(:list-gen v_2591))"
"(if(vector? v_2591)"
"(let-values()(:vector-gen v_2591 0(vector-length v_2591) 1))"
"(if(flvector? v_2591)"
"(let-values()(:flvector-gen v_2591 0(flvector-length v_2591) 1))"
"(if(fxvector? v_2591)"
"(let-values()(:fxvector-gen v_2591 0(fxvector-length v_2591) 1))"
"(if(string? v_2591)"
"(let-values()(:string-gen v_2591 0(string-length v_2591) 1))"
"(if(bytes? v_2591)"
"(let-values()(:bytes-gen v_2591 0(bytes-length v_2591) 1))"
"(if(input-port? v_2591)"
"(let-values()(:input-port-gen v_2591))"
"(if(hash? v_2591)"
"(let-values()(:hash-gen v_2591 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2591)"
"(let-values()((sequence-ref v_2591) v_2591))"
"(if(:sequence? v_2591)"
"(let-values()(make-sequence who_2590((:sequence-ref v_2591) v_2591)))"
"(if(stream? v_2591)"
"(let-values()(:stream-gen v_2591))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
"                                     \"for: expected a sequence for ~a, got something else: ~v\""
"(if(= 1(length who_2590))(car who_2590) who_2590)"
" v_2591)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2592)"
"(let-values(((cont?_2593)(range-ref v_2592 2)))(if cont?_2593(not(cont?_2593(range-ref v_2592 0))) #f)))"
"(lambda(v_2594)(range-ref v_2594 0))"
"(lambda(v_2595)"
"(make-range((range-ref v_2595 1)(range-ref v_2595 0))(range-ref v_2595 1)(range-ref v_2595 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2596)(values values(range-ref v_2596 1)(range-ref v_2596 0)(range-ref v_2596 2) #f #f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2597)(in-range 0 b_2597 1))"
"((a_2598 b_2599)(in-range a_2598 b_2599 1))"
"((a_2600 b_2601 step_2602)"
"(begin"
"      (if (real? a_2600) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_2600)))"
"      (if (real? b_2601) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_2601)))"
"      (if (real? step_2602) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_2602)))"
"(let-values(((cont?_2603)"
"(if(>= step_2602 0)(lambda(x_2604)(< x_2604 b_2601))(lambda(x_2605)(> x_2605 b_2601)))))"
"(let-values(((inc_2606)(lambda(x_2607)(+ x_2607 step_2602))))(make-range a_2600 inc_2606 cont?_2603)))))))"
"(define-values(:integer-gen)(lambda(v_2608)(values values add1 0(lambda(i_2609)(< i_2609 v_2608)) #f #f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals 0))"
"((n_2610)"
"(begin"
"(if(if(integer? n_2610)(if(exact? n_2610)(>= n_2610 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_2610)))"
"(make-range n_2610 add1 #f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2611)(not(pair?(list-stream-ref v_2611 0))))"
"(lambda(v_2612)(car(list-stream-ref v_2612 0)))"
"(lambda(v_2613)(make-list-stream(cdr(list-stream-ref v_2613 0))))))"
"(cons prop:gen-sequence(lambda(v_2614)(values car cdr(list-stream-ref v_2614 0) pair? #f #f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2615)"
"(begin"
"      (if (list? l_2615) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_2615)))"
"(make-list-stream l_2615))))"
"(define-values(:list-gen)(lambda(l_2616)(values car cdr l_2616 pair? #f #f)))"
"(define-values(:mlist-gen)(lambda(l_2618)(values mcar mcdr l_2618 mpair? #f #f)))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2620)(values read-byte values p_2620 #f(lambda(x_2621)(not(eof-object? x_2621))) #f)))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2639)(values unsafe-stream-first unsafe-stream-rest l_2639 unsafe-stream-not-empty? #f #f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2640 -get_2641 -first_2642 -next_2643)"
"(values"
"(lambda(pos_2644)(-get_2641 ht_2640 pos_2644))"
"(lambda(pos_2645)(-next_2643 ht_2640 pos_2645))"
"(-first_2642 ht_2640)"
"(lambda(pos_2646) pos_2646)"
" #f"
" #f)))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2649)"
"(begin"
"(if((lambda(ht_2650)(hash? ht_2650)) ht_2649)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash \"hash?\" ht_2649)))"
"(make-do-sequence(lambda()(:hash-gen ht_2649 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2653)"
"(begin"
"(if((lambda(ht_2654)(if(hash? ht_2654)(immutable? ht_2654) #f)) ht_2653)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_2653)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2653"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2657)"
"(begin"
"(if((lambda(ht_2658)(hash? ht_2658)) ht_2657)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_2657)))"
"(make-do-sequence(lambda()(:hash-gen ht_2657 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2661)"
"(begin"
"(if((lambda(ht_2662)(if(hash? ht_2662)(immutable? ht_2662) #f)) ht_2661)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_2661)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2661"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2665)"
"(begin"
"(if((lambda(ht_2666)(hash? ht_2666)) ht_2665)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_2665)))"
"(make-do-sequence(lambda()(:hash-gen ht_2665 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2681 vec_2682 start_2683 stop_2684 step_2685 len_2686)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2683)"
"(let-values(((or-part_2687)(< start_2683 len_2686)))"
"(if or-part_2687 or-part_2687(= len_2686 start_2683 stop_2684)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"starting \" start_2683 vec_2682 0 (sub1 len_2686))))"
"(if(if(exact-integer? stop_2684)(if(<= -1 stop_2684)(<= stop_2684 len_2686) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"stopping \" stop_2684 vec_2682 -1 len_2686)))"
"(if(if(exact-integer? step_2685)(not(zero? step_2685)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_2681 \"(and/c exact-integer? (not/c zero?))\" step_2685)))"
"(if(if(< start_2683 stop_2684)(< step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void))"
"(if(if(< stop_2684 start_2683)(> step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2688 type-name_2689 vector?_2690 unsafe-vector-length_2691 vec_2692 start_2693 stop_2694 step_2695)"
"(begin"
"(if(vector?_2690 vec_2692)(void)(let-values()(raise-argument-error who_2688 type-name_2689 vec_2692)))"
"(let-values(((len_2696)(unsafe-vector-length_2691 vec_2692)))"
"(let-values(((stop*_2697)(if stop_2694 stop_2694 len_2696)))"
"(begin"
"(check-ranges who_2688 vec_2692 start_2693 stop*_2697 step_2695 len_2696)"
"(values vec_2692 start_2693 stop*_2697 step_2695)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2698 start_2699 stop_2700 step_2701)"
"(values"
"(lambda(i_2702)(unsafe-vector-ref v_2698 i_2702))"
"(if(= step_2701 1) add1(lambda(i_2703)(+ i_2703 step_2701)))"
" start_2699"
"(if(> step_2701 0)(lambda(i_2704)(< i_2704 stop_2700))(lambda(i_2705)(> i_2705 stop_2700)))"
" #f"
" #f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2706)(in-vector v_2706 0 #f 1))"
"((v_2707 start_2708)(in-vector v_2707 start_2708 #f 1))"
"((v_2709 start_2710 stop_2711)(in-vector v_2709 start_2710 stop_2711 1))"
"((v_2712 start_2713 stop_2714 step_2715)"
"(let-values(((v_2716 start_2717 stop_2718 step_2719)"
"                  (normalise-inputs 'in-vector \"vector\" vector? vector-length v_2712 start_2713 stop_2714 step_2715)))"
"(make-do-sequence(lambda()(:vector-gen v_2716 start_2717 stop_2718 step_2719)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2720 start_2721 stop_2722 step_2723)"
"(values"
"(lambda(i_2724)(string-ref v_2720 i_2724))"
"(if(= step_2723 1) add1(lambda(i_2725)(+ i_2725 step_2723)))"
" start_2721"
"(if(> step_2723 0)(lambda(i_2726)(< i_2726 stop_2722))(lambda(i_2727)(> i_2727 stop_2722)))"
" #f"
" #f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2728)(in-string v_2728 0 #f 1))"
"((v_2729 start_2730)(in-string v_2729 start_2730 #f 1))"
"((v_2731 start_2732 stop_2733)(in-string v_2731 start_2732 stop_2733 1))"
"((v_2734 start_2735 stop_2736 step_2737)"
"(let-values(((v_2738 start_2739 stop_2740 step_2741)"
"                  (normalise-inputs 'in-string \"string\" string? string-length v_2734 start_2735 stop_2736 step_2737)))"
"(make-do-sequence(lambda()(:string-gen v_2738 start_2739 stop_2740 step_2741)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2742 start_2743 stop_2744 step_2745)"
"(values"
"(lambda(i_2746)(unsafe-bytes-ref v_2742 i_2746))"
"(if(= step_2745 1) add1(lambda(i_2747)(+ i_2747 step_2745)))"
" start_2743"
"(if(> step_2745 0)(lambda(i_2748)(< i_2748 stop_2744))(lambda(i_2749)(> i_2749 stop_2744)))"
" #f"
" #f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2750)(in-bytes v_2750 0 #f 1))"
"((v_2751 start_2752)(in-bytes v_2751 start_2752 #f 1))"
"((v_2753 start_2754 stop_2755)(in-bytes v_2753 start_2754 stop_2755 1))"
"((v_2756 start_2757 stop_2758 step_2759)"
"(let-values(((v_2760 start_2761 stop_2762 step_2763)"
"                  (normalise-inputs 'in-bytes \"bytes\" bytes? bytes-length v_2756 start_2757 stop_2758 step_2759)))"
"(make-do-sequence(lambda()(:bytes-gen v_2760 start_2761 stop_2762 step_2763)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2764 start_2765 stop_2766 step_2767)"
"(values"
"(lambda(i_2768)(unsafe-flvector-ref v_2764 i_2768))"
"(if(= step_2767 1) add1(lambda(i_2769)(+ i_2769 step_2767)))"
" start_2765"
"(if(> step_2767 0)(lambda(i_2770)(< i_2770 stop_2766))(lambda(i_2771)(> i_2771 stop_2766)))"
" #f"
" #f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2772 start_2773 stop_2774 step_2775)"
"(values"
"(lambda(i_2776)(unsafe-fxvector-ref v_2772 i_2776))"
"(if(= step_2775 1) add1(lambda(i_2777)(+ i_2777 step_2775)))"
" start_2773"
"(if(> step_2775 0)(lambda(i_2778)(< i_2778 stop_2774))(lambda(i_2779)(> i_2779 stop_2774)))"
" #f"
" #f)))"
"(define-values"
"(in-value)"
"(lambda(v_2817)"
"(make-do-sequence"
"(lambda()(values(lambda(pos_2818) v_2817)(lambda(pos_2819) #f) #t(lambda(pos_2820) pos_2820) void void)))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2940)((do-stream-ref v_2940 0)))"
"(lambda(v_2941)((do-stream-ref v_2941 1)))"
"(lambda(v_2942)((do-stream-ref v_2942 2))))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_2985)"
"(let-values(((n_2986)(vector-length vec_2985)))"
"(let-values(((new-vec_2987)(make-vector(* 2 n_2986))))"
"(begin(vector-copy! new-vec_2987 0 vec_2985 0 n_2986) new-vec_2987)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_2988 i_2989)"
"(let-values(((new-vec_2990)(make-vector i_2989)))"
"(begin(vector-copy! new-vec_2990 0 vec_2988 0 i_2989) new-vec_2990))))"
"(void)"
"(void)"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 1)(list? l_3) #f) #f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()(cons(f_2(car l_5))(loop_4(cdr l_5))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_6 l1_7 l2_8)"
"(if(if(procedure? f_6)"
"(if(procedure-arity-includes? f_6 2)"
"(if(list? l1_7)(if(list? l2_8)(=(length l1_7)(length l2_8)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_9)"
"(lambda(l1_10 l2_11)"
"(if(null? l1_10)"
"(let-values() null)"
"(let-values()"
"(cons(f_6(car l1_10)(car l2_11))(loop_9(cdr l1_10)(cdr l2_11))))))))"
" loop_9)"
" l1_7"
" l2_8)"
"(map f_6 l1_7 l2_8)))"
"((f_12 l_13 . args_14)(apply map f_12 l_13 args_14)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_15)"
"(case-lambda"
"((f_16 l_17)"
"(if(if(procedure? f_16)(if(procedure-arity-includes? f_16 1)(list? l_17) #f) #f)"
"((letrec-values(((loop_18)"
"(lambda(l_19)"
"(if(null? l_19)"
"(let-values()(void))"
"(let-values()(begin(f_16(car l_19))(loop_18(cdr l_19))))))))"
" loop_18)"
" l_17)"
"(for-each f_16 l_17)))"
"((f_20 l1_21 l2_22)"
"(if(if(procedure? f_20)"
"(if(procedure-arity-includes? f_20 2)"
"(if(list? l1_21)(if(list? l2_22)(=(length l1_21)(length l2_22)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_23)"
"(lambda(l1_24 l2_25)"
"(if(null? l1_24)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(f_20(car l1_24)(car l2_25))"
"(loop_23(cdr l1_24)(cdr l2_25))))))))"
" loop_23)"
" l1_21"
" l2_22)"
"(for-each f_20 l1_21 l2_22)))"
"((f_26 l_27 . args_28)(apply for-each f_26 l_27 args_28)))))"
" for-each_15))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_29)"
"(case-lambda"
"((f_30 l_31)"
"(if(if(procedure? f_30)(if(procedure-arity-includes? f_30 1)(list? l_31) #f) #f)"
"(if(null? l_31)"
" #t"
"((letrec-values(((loop_32)"
"(lambda(l_33)"
"(if(null?(cdr l_33))"
"(let-values()(f_30(car l_33)))"
"(let-values()(if(f_30(car l_33))(loop_32(cdr l_33)) #f))))))"
" loop_32)"
" l_31))"
"(andmap f_30 l_31)))"
"((f_34 l1_35 l2_36)"
"(if(if(procedure? f_34)"
"(if(procedure-arity-includes? f_34 2)"
"(if(list? l1_35)(if(list? l2_36)(=(length l1_35)(length l2_36)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_35)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l1_38 l2_39)"
"(if(null?(cdr l1_38))"
"(let-values()(f_34(car l1_38)(car l2_39)))"
"(let-values()"
"(if(f_34(car l1_38)(car l2_39))"
"(loop_37(cdr l1_38)(cdr l2_39))"
" #f))))))"
" loop_37)"
" l1_35"
" l2_36))"
"(andmap f_34 l1_35 l2_36)))"
"((f_40 l_41 . args_42)(apply andmap f_40 l_41 args_42)))))"
" andmap_29))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_43)"
"(case-lambda"
"((f_44 l_45)"
"(if(if(procedure? f_44)(if(procedure-arity-includes? f_44 1)(list? l_45) #f) #f)"
"(if(null? l_45)"
" #f"
"((letrec-values(((loop_46)"
"(lambda(l_47)"
"(if(null?(cdr l_47))"
"(let-values()(f_44(car l_47)))"
"(let-values()"
"(let-values(((or-part_48)(f_44(car l_47))))"
"(if or-part_48 or-part_48(loop_46(cdr l_47)))))))))"
" loop_46)"
" l_45))"
"(ormap f_44 l_45)))"
"((f_49 l1_50 l2_51)"
"(if(if(procedure? f_49)"
"(if(procedure-arity-includes? f_49 2)"
"(if(list? l1_50)(if(list? l2_51)(=(length l1_50)(length l2_51)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_50)"
" #f"
"((letrec-values(((loop_52)"
"(lambda(l1_53 l2_54)"
"(if(null?(cdr l1_53))"
"(let-values()(f_49(car l1_53)(car l2_54)))"
"(let-values()"
"(let-values(((or-part_55)(f_49(car l1_53)(car l2_54))))"
"(if or-part_55 or-part_55(loop_52(cdr l1_53)(cdr l2_54)))))))))"
" loop_52)"
" l1_50"
" l2_51))"
"(ormap f_49 l1_50 l2_51)))"
"((f_56 l_57 . args_58)(apply ormap f_56 l_57 args_58)))))"
" ormap_43))"
"(void)"
"(void)"
"(define-values"
"(sort)"
"(let-values()"
"(let-values(((sort-internals_29)(make-hasheq)))"
"(let-values(((__30)"
"(let-values()"
"(let-values()"
"(begin"
"(let-values(((proc_90)"
"(lambda(vec_91 n_92)"
"(let-values(((n/2-_93)(unsafe-fxrshift n_92 1)))"
"(let-values(((n/2+_94)(unsafe-fx- n_92 n/2-_93)))"
"(letrec-values(((copying-mergesort_169)"
"(lambda(Alo_170 Blo_171 n_172)"
"(if(unsafe-fx= n_172 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170)))"
"(if(unsafe-fx= n_172 2)"
"(let-values()"
"(let-values(((x_173)"
"(unsafe-vector-ref vec_91 Alo_170))"
"((y_174)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+ Alo_170 1))))"
"(if(< y_174 x_173)"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 y_174)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 x_173)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" y_174)))))"
"(if(unsafe-fx< n_172 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170))"
"((letrec-values(((iloop_175)"
"(lambda(i_176)"
"(if(unsafe-fx<"
" i_176"
" n_172)"
"(let-values()"
"(let-values(((ref-i_177)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+"
" Alo_170"
" i_176))))"
"((letrec-values(((jloop_178)"
"(lambda(j_179)"
"(let-values(((ref-j-1_180)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx-"
" j_179"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_171"
" j_179)"
"(<"
" ref-i_177"
" ref-j-1_180)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-j-1_180)"
"(jloop_178"
"(unsafe-fx-"
" j_179"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-i_177)"
"(iloop_175"
"(unsafe-fx+"
" i_176"
" 1))))))))"
" jloop_178)"
"(unsafe-fx+"
" Blo_171"
" i_176))))"
"(void)))))"
" iloop_175)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_181)"
"(unsafe-fxrshift n_172 1)))"
"(let-values(((n/2+_182)"
"(unsafe-fx- n_172 n/2-_181)))"
"(let-values(((Amid1_183)"
"(unsafe-fx+"
" Alo_170"
" n/2-_181))"
"((Amid2_184)"
"(unsafe-fx+"
" Alo_170"
" n/2+_182))"
"((Bmid1_185)"
"(unsafe-fx+"
" Blo_171"
" n/2-_181)))"
"(begin"
"(copying-mergesort_169"
" Amid1_183"
" Bmid1_185"
" n/2+_182)"
"(copying-mergesort_169"
" Alo_170"
" Amid2_184"
" n/2-_181)"
"(let-values(((b2_186)"
"(unsafe-fx+"
" Blo_171"
" n_172)))"
"((letrec-values(((loop_187)"
"(lambda(a1_188"
" b1_189"
" c1_190)"
"(let-values(((x_191)"
"(unsafe-vector-ref"
" vec_91"
" a1_188))"
"((y_192)"
"(unsafe-vector-ref"
" vec_91"
" b1_189)))"
"(if(not"
"(<"
" y_192"
" x_191))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" x_191)"
"(let-values(((a1_193)"
"(unsafe-fx+"
" a1_188"
" 1))"
"((c1_194)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<"
" c1_194"
" b1_189)"
"(let-values()"
"(loop_187"
" a1_193"
" b1_189"
" c1_194))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" y_192)"
"(let-values(((b1_195)"
"(unsafe-fx+"
" b1_189"
" 1))"
"((c1_196)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<="
" b2_186"
" b1_195)"
"((letrec-values(((loop_197)"
"(lambda(a1_198"
" c1_199)"
"(if(unsafe-fx<"
" c1_199"
" b1_195)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_199"
"(unsafe-vector-ref"
" vec_91"
" a1_198))"
"(loop_197"
"(unsafe-fx+"
" a1_198"
" 1)"
"(unsafe-fx+"
" c1_199"
" 1))))"
"(void)))))"
" loop_197)"
" a1_188"
" c1_196)"
"(loop_187"
" a1_188"
" b1_195"
" c1_196)))))))))"
" loop_187)"
" Amid2_184"
" Bmid1_185"
" Blo_171)))))))))))))"
"(let-values(((Alo_200) 0)"
"((Amid1_201) n/2-_93)"
"((Amid2_202) n/2+_94)"
"((Ahi_203) n_92)"
"((B1lo_204) n_92))"
"(begin"
"(copying-mergesort_169 Amid1_201 B1lo_204 n/2+_94)"
"(if(zero? n/2-_93)"
"(void)"
"(let-values()(copying-mergesort_169 Alo_200 Amid2_202 n/2-_93)))"
"(let-values(((b2_205) Ahi_203))"
"((letrec-values(((loop_206)"
"(lambda(a1_207 b1_208 c1_209)"
"(let-values(((x_210)"
"(unsafe-vector-ref"
" vec_91"
" a1_207))"
"((y_211)"
"(unsafe-vector-ref"
" vec_91"
" b1_208)))"
"(if(< x_210 y_211)"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 x_210)"
"(let-values(((a1_212)"
"(unsafe-fx+ a1_207 1))"
"((c1_213)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx< c1_213 b1_208)"
"(let-values()"
"(loop_206 a1_212 b1_208 c1_213))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 y_211)"
"(let-values(((b1_214)"
"(unsafe-fx+ b1_208 1))"
"((c1_215)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx<= b2_205 b1_214)"
"((letrec-values(((loop_216)"
"(lambda(a1_217"
" c1_218)"
"(if(unsafe-fx<"
" c1_218"
" b1_214)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_218"
"(unsafe-vector-ref"
" vec_91"
" a1_217))"
"(loop_216"
"(unsafe-fx+"
" a1_217"
" 1)"
"(unsafe-fx+"
" c1_218"
" 1))))"
"(void)))))"
" loop_216)"
" a1_207"
" c1_215)"
"(loop_206"
" a1_207"
" b1_214"
" c1_215)))))))))"
" loop_206)"
" B1lo_204"
" Amid2_202"
" Alo_200))))))))))"
"(begin(hash-set! sort-internals_29 < proc_90)(hash-set! sort-internals_29 <= proc_90)))"
"(let-values(((proc_219)"
"(lambda(vec_220 n_221)"
"(let-values(((n/2-_222)(unsafe-fxrshift n_221 1)))"
"(let-values(((n/2+_223)(unsafe-fx- n_221 n/2-_222)))"
"(letrec-values(((copying-mergesort_298)"
"(lambda(Alo_299 Blo_300 n_301)"
"(if(unsafe-fx= n_301 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299)))"
"(if(unsafe-fx= n_301 2)"
"(let-values()"
"(let-values(((x_302)"
"(unsafe-vector-ref"
" vec_220"
" Alo_299))"
"((y_303)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+ Alo_299 1))))"
"(if(> y_303 x_302)"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 y_303)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 x_302)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" y_303)))))"
"(if(unsafe-fx< n_301 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299))"
"((letrec-values(((iloop_304)"
"(lambda(i_305)"
"(if(unsafe-fx<"
" i_305"
" n_301)"
"(let-values()"
"(let-values(((ref-i_306)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+"
" Alo_299"
" i_305))))"
"((letrec-values(((jloop_307)"
"(lambda(j_308)"
"(let-values(((ref-j-1_309)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx-"
" j_308"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_300"
" j_308)"
"(>"
" ref-i_306"
" ref-j-1_309)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-j-1_309)"
"(jloop_307"
"(unsafe-fx-"
" j_308"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-i_306)"
"(iloop_304"
"(unsafe-fx+"
" i_305"
" 1))))))))"
" jloop_307)"
"(unsafe-fx+"
" Blo_300"
" i_305))))"
"(void)))))"
" iloop_304)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_310)"
"(unsafe-fxrshift n_301 1)))"
"(let-values(((n/2+_311)"
"(unsafe-fx- n_301 n/2-_310)))"
"(let-values(((Amid1_312)"
"(unsafe-fx+"
" Alo_299"
" n/2-_310))"
"((Amid2_313)"
"(unsafe-fx+"
" Alo_299"
" n/2+_311))"
"((Bmid1_314)"
"(unsafe-fx+"
" Blo_300"
" n/2-_310)))"
"(begin"
"(copying-mergesort_298"
" Amid1_312"
" Bmid1_314"
" n/2+_311)"
"(copying-mergesort_298"
" Alo_299"
" Amid2_313"
" n/2-_310)"
"(let-values(((b2_315)"
"(unsafe-fx+"
" Blo_300"
" n_301)))"
"((letrec-values(((loop_316)"
"(lambda(a1_317"
" b1_318"
" c1_319)"
"(let-values(((x_320)"
"(unsafe-vector-ref"
" vec_220"
" a1_317))"
"((y_321)"
"(unsafe-vector-ref"
" vec_220"
" b1_318)))"
"(if(not"
"(>"
" y_321"
" x_320))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" x_320)"
"(let-values(((a1_322)"
"(unsafe-fx+"
" a1_317"
" 1))"
"((c1_323)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<"
" c1_323"
" b1_318)"
"(let-values()"
"(loop_316"
" a1_322"
" b1_318"
" c1_323))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" y_321)"
"(let-values(((b1_324)"
"(unsafe-fx+"
" b1_318"
" 1))"
"((c1_325)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<="
" b2_315"
" b1_324)"
"((letrec-values(((loop_326)"
"(lambda(a1_327"
" c1_328)"
"(if(unsafe-fx<"
" c1_328"
" b1_324)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_328"
"(unsafe-vector-ref"
" vec_220"
" a1_327))"
"(loop_326"
"(unsafe-fx+"
" a1_327"
" 1)"
"(unsafe-fx+"
" c1_328"
" 1))))"
"(void)))))"
" loop_326)"
" a1_317"
" c1_325)"
"(loop_316"
" a1_317"
" b1_324"
" c1_325)))))))))"
" loop_316)"
" Amid2_313"
" Bmid1_314"
" Blo_300)))))))))))))"
"(let-values(((Alo_329) 0)"
"((Amid1_330) n/2-_222)"
"((Amid2_331) n/2+_223)"
"((Ahi_332) n_221)"
"((B1lo_333) n_221))"
"(begin"
"(copying-mergesort_298 Amid1_330 B1lo_333 n/2+_223)"
"(if(zero? n/2-_222)"
"(void)"
"(let-values()"
"(copying-mergesort_298 Alo_329 Amid2_331 n/2-_222)))"
"(let-values(((b2_334) Ahi_332))"
"((letrec-values(((loop_335)"
"(lambda(a1_336 b1_337 c1_338)"
"(let-values(((x_339)"
"(unsafe-vector-ref"
" vec_220"
" a1_336))"
"((y_340)"
"(unsafe-vector-ref"
" vec_220"
" b1_337)))"
"(if(> x_339 y_340)"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_338"
" x_339)"
"(let-values(((a1_341)"
"(unsafe-fx+ a1_336 1))"
"((c1_342)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx< c1_342 b1_337)"
"(let-values()"
"(loop_335 a1_341 b1_337 c1_342))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_338"
" y_340)"
"(let-values(((b1_343)"
"(unsafe-fx+ b1_337 1))"
"((c1_344)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx<= b2_334 b1_343)"
"((letrec-values(((loop_345)"
"(lambda(a1_346"
" c1_347)"
"(if(unsafe-fx<"
" c1_347"
" b1_343)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_347"
"(unsafe-vector-ref"
" vec_220"
" a1_346))"
"(loop_345"
"(unsafe-fx+"
" a1_346"
" 1)"
"(unsafe-fx+"
" c1_347"
" 1))))"
"(void)))))"
" loop_345)"
" a1_336"
" c1_344)"
"(loop_335"
" a1_336"
" b1_343"
" c1_344)))))))))"
" loop_335)"
" B1lo_333"
" Amid2_331"
" Alo_329))))))))))"
"(begin(hash-set! sort-internals_29 > proc_219)(hash-set! sort-internals_29 >= proc_219)))"
"(let-values(((proc_348)"
"(lambda(vec_349 n_350)"
"(let-values(((n/2-_351)(unsafe-fxrshift n_350 1)))"
"(let-values(((n/2+_352)(unsafe-fx- n_350 n/2-_351)))"
"(letrec-values(((copying-mergesort_427)"
"(lambda(Alo_428 Blo_429 n_430)"
"(if(unsafe-fx= n_430 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428)))"
"(if(unsafe-fx= n_430 2)"
"(let-values()"
"(let-values(((x_431)"
"(unsafe-vector-ref"
" vec_349"
" Alo_428))"
"((y_432)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+ Alo_428 1))))"
"(if(string<? y_432 x_431)"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 y_432)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 x_431)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" y_432)))))"
"(if(unsafe-fx< n_430 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428))"
"((letrec-values(((iloop_433)"
"(lambda(i_434)"
"(if(unsafe-fx<"
" i_434"
" n_430)"
"(let-values()"
"(let-values(((ref-i_435)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+"
" Alo_428"
" i_434))))"
"((letrec-values(((jloop_436)"
"(lambda(j_437)"
"(let-values(((ref-j-1_438)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx-"
" j_437"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_429"
" j_437)"
"(string<?"
" ref-i_435"
" ref-j-1_438)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-j-1_438)"
"(jloop_436"
"(unsafe-fx-"
" j_437"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-i_435)"
"(iloop_433"
"(unsafe-fx+"
" i_434"
" 1))))))))"
" jloop_436)"
"(unsafe-fx+"
" Blo_429"
" i_434))))"
"(void)))))"
" iloop_433)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_439)"
"(unsafe-fxrshift n_430 1)))"
"(let-values(((n/2+_440)"
"(unsafe-fx- n_430 n/2-_439)))"
"(let-values(((Amid1_441)"
"(unsafe-fx+"
" Alo_428"
" n/2-_439))"
"((Amid2_442)"
"(unsafe-fx+"
" Alo_428"
" n/2+_440))"
"((Bmid1_443)"
"(unsafe-fx+"
" Blo_429"
" n/2-_439)))"
"(begin"
"(copying-mergesort_427"
" Amid1_441"
" Bmid1_443"
" n/2+_440)"
"(copying-mergesort_427"
" Alo_428"
" Amid2_442"
" n/2-_439)"
"(let-values(((b2_444)"
"(unsafe-fx+"
" Blo_429"
" n_430)))"
"((letrec-values(((loop_445)"
"(lambda(a1_446"
" b1_447"
" c1_448)"
"(let-values(((x_449)"
"(unsafe-vector-ref"
" vec_349"
" a1_446))"
"((y_450)"
"(unsafe-vector-ref"
" vec_349"
" b1_447)))"
"(if(not"
"(string<?"
" y_450"
" x_449))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" x_449)"
"(let-values(((a1_451)"
"(unsafe-fx+"
" a1_446"
" 1))"
"((c1_452)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<"
" c1_452"
" b1_447)"
"(let-values()"
"(loop_445"
" a1_451"
" b1_447"
" c1_452))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" y_450)"
"(let-values(((b1_453)"
"(unsafe-fx+"
" b1_447"
" 1))"
"((c1_454)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<="
" b2_444"
" b1_453)"
"((letrec-values(((loop_455)"
"(lambda(a1_456"
" c1_457)"
"(if(unsafe-fx<"
" c1_457"
" b1_453)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_457"
"(unsafe-vector-ref"
" vec_349"
" a1_456))"
"(loop_455"
"(unsafe-fx+"
" a1_456"
" 1)"
"(unsafe-fx+"
" c1_457"
" 1))))"
"(void)))))"
" loop_455)"
" a1_446"
" c1_454)"
"(loop_445"
" a1_446"
" b1_453"
" c1_454)))))))))"
" loop_445)"
" Amid2_442"
" Bmid1_443"
" Blo_429)))))))))))))"
"(let-values(((Alo_458) 0)"
"((Amid1_459) n/2-_351)"
"((Amid2_460) n/2+_352)"
"((Ahi_461) n_350)"
"((B1lo_462) n_350))"
"(begin"
"(copying-mergesort_427 Amid1_459 B1lo_462 n/2+_352)"
"(if(zero? n/2-_351)"
"(void)"
"(let-values()"
"(copying-mergesort_427 Alo_458 Amid2_460 n/2-_351)))"
"(let-values(((b2_463) Ahi_461))"
"((letrec-values(((loop_464)"
"(lambda(a1_465 b1_466 c1_467)"
"(let-values(((x_468)"
"(unsafe-vector-ref"
" vec_349"
" a1_465))"
"((y_469)"
"(unsafe-vector-ref"
" vec_349"
" b1_466)))"
"(if(string<? x_468 y_469)"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_467"
" x_468)"
"(let-values(((a1_470)"
"(unsafe-fx+ a1_465 1))"
"((c1_471)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx< c1_471 b1_466)"
"(let-values()"
"(loop_464 a1_470 b1_466 c1_471))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_467"
" y_469)"
"(let-values(((b1_472)"
"(unsafe-fx+ b1_466 1))"
"((c1_473)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx<= b2_463 b1_472)"
"((letrec-values(((loop_474)"
"(lambda(a1_475"
" c1_476)"
"(if(unsafe-fx<"
" c1_476"
" b1_472)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_476"
"(unsafe-vector-ref"
" vec_349"
" a1_475))"
"(loop_474"
"(unsafe-fx+"
" a1_475"
" 1)"
"(unsafe-fx+"
" c1_476"
" 1))))"
"(void)))))"
" loop_474)"
" a1_465"
" c1_473)"
"(loop_464"
" a1_465"
" b1_472"
" c1_473)))))))))"
" loop_464)"
" B1lo_462"
" Amid2_460"
" Alo_458))))))))))"
"(begin"
"(hash-set! sort-internals_29 string<? proc_348)"
"(hash-set! sort-internals_29 string<=? proc_348)))"
"(let-values(((proc_477)"
"(lambda(vec_478 n_479)"
"(let-values(((n/2-_480)(unsafe-fxrshift n_479 1)))"
"(let-values(((n/2+_481)(unsafe-fx- n_479 n/2-_480)))"
"(letrec-values(((copying-mergesort_556)"
"(lambda(Alo_557 Blo_558 n_559)"
"(if(unsafe-fx= n_559 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557)))"
"(if(unsafe-fx= n_559 2)"
"(let-values()"
"(let-values(((x_560)"
"(unsafe-vector-ref"
" vec_478"
" Alo_557))"
"((y_561)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+ Alo_557 1))))"
"(if(string-ci<? y_561 x_560)"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 y_561)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 x_560)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" y_561)))))"
"(if(unsafe-fx< n_559 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557))"
"((letrec-values(((iloop_562)"
"(lambda(i_563)"
"(if(unsafe-fx<"
" i_563"
" n_559)"
"(let-values()"
"(let-values(((ref-i_564)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+"
" Alo_557"
" i_563))))"
"((letrec-values(((jloop_565)"
"(lambda(j_566)"
"(let-values(((ref-j-1_567)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx-"
" j_566"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_558"
" j_566)"
"(string-ci<?"
" ref-i_564"
" ref-j-1_567)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-j-1_567)"
"(jloop_565"
"(unsafe-fx-"
" j_566"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-i_564)"
"(iloop_562"
"(unsafe-fx+"
" i_563"
" 1))))))))"
" jloop_565)"
"(unsafe-fx+"
" Blo_558"
" i_563))))"
"(void)))))"
" iloop_562)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_568)"
"(unsafe-fxrshift n_559 1)))"
"(let-values(((n/2+_569)"
"(unsafe-fx- n_559 n/2-_568)))"
"(let-values(((Amid1_570)"
"(unsafe-fx+"
" Alo_557"
" n/2-_568))"
"((Amid2_571)"
"(unsafe-fx+"
" Alo_557"
" n/2+_569))"
"((Bmid1_572)"
"(unsafe-fx+"
" Blo_558"
" n/2-_568)))"
"(begin"
"(copying-mergesort_556"
" Amid1_570"
" Bmid1_572"
" n/2+_569)"
"(copying-mergesort_556"
" Alo_557"
" Amid2_571"
" n/2-_568)"
"(let-values(((b2_573)"
"(unsafe-fx+"
" Blo_558"
" n_559)))"
"((letrec-values(((loop_574)"
"(lambda(a1_575"
" b1_576"
" c1_577)"
"(let-values(((x_578)"
"(unsafe-vector-ref"
" vec_478"
" a1_575))"
"((y_579)"
"(unsafe-vector-ref"
" vec_478"
" b1_576)))"
"(if(not"
"(string-ci<?"
" y_579"
" x_578))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" x_578)"
"(let-values(((a1_580)"
"(unsafe-fx+"
" a1_575"
" 1))"
"((c1_581)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<"
" c1_581"
" b1_576)"
"(let-values()"
"(loop_574"
" a1_580"
" b1_576"
" c1_581))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" y_579)"
"(let-values(((b1_582)"
"(unsafe-fx+"
" b1_576"
" 1))"
"((c1_583)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<="
" b2_573"
" b1_582)"
"((letrec-values(((loop_584)"
"(lambda(a1_585"
" c1_586)"
"(if(unsafe-fx<"
" c1_586"
" b1_582)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_586"
"(unsafe-vector-ref"
" vec_478"
" a1_585))"
"(loop_584"
"(unsafe-fx+"
" a1_585"
" 1)"
"(unsafe-fx+"
" c1_586"
" 1))))"
"(void)))))"
" loop_584)"
" a1_575"
" c1_583)"
"(loop_574"
" a1_575"
" b1_582"
" c1_583)))))))))"
" loop_574)"
" Amid2_571"
" Bmid1_572"
" Blo_558)))))))))))))"
"(let-values(((Alo_587) 0)"
"((Amid1_588) n/2-_480)"
"((Amid2_589) n/2+_481)"
"((Ahi_590) n_479)"
"((B1lo_591) n_479))"
"(begin"
"(copying-mergesort_556 Amid1_588 B1lo_591 n/2+_481)"
"(if(zero? n/2-_480)"
"(void)"
"(let-values()"
"(copying-mergesort_556 Alo_587 Amid2_589 n/2-_480)))"
"(let-values(((b2_592) Ahi_590))"
"((letrec-values(((loop_593)"
"(lambda(a1_594 b1_595 c1_596)"
"(let-values(((x_597)"
"(unsafe-vector-ref"
" vec_478"
" a1_594))"
"((y_598)"
"(unsafe-vector-ref"
" vec_478"
" b1_595)))"
"(if(string-ci<? x_597 y_598)"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_596"
" x_597)"
"(let-values(((a1_599)"
"(unsafe-fx+ a1_594 1))"
"((c1_600)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx< c1_600 b1_595)"
"(let-values()"
"(loop_593 a1_599 b1_595 c1_600))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_596"
" y_598)"
"(let-values(((b1_601)"
"(unsafe-fx+ b1_595 1))"
"((c1_602)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx<= b2_592 b1_601)"
"((letrec-values(((loop_603)"
"(lambda(a1_604"
" c1_605)"
"(if(unsafe-fx<"
" c1_605"
" b1_601)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_605"
"(unsafe-vector-ref"
" vec_478"
" a1_604))"
"(loop_603"
"(unsafe-fx+"
" a1_604"
" 1)"
"(unsafe-fx+"
" c1_605"
" 1))))"
"(void)))))"
" loop_603)"
" a1_594"
" c1_602)"
"(loop_593"
" a1_594"
" b1_601"
" c1_602)))))))))"
" loop_593)"
" B1lo_591"
" Amid2_589"
" Alo_587))))))))))"
"(begin"
"(hash-set! sort-internals_29 string-ci<? proc_477)"
"(hash-set! sort-internals_29 string-ci<=? proc_477)))"
"(let-values(((proc_606)"
"(lambda(vec_607 n_608)"
"(let-values(((n/2-_609)(unsafe-fxrshift n_608 1)))"
"(let-values(((n/2+_610)(unsafe-fx- n_608 n/2-_609)))"
"(letrec-values(((copying-mergesort_685)"
"(lambda(Alo_686 Blo_687 n_688)"
"(if(unsafe-fx= n_688 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686)))"
"(if(unsafe-fx= n_688 2)"
"(let-values()"
"(let-values(((x_689)"
"(unsafe-vector-ref"
" vec_607"
" Alo_686))"
"((y_690)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+ Alo_686 1))))"
"(if(keyword<? y_690 x_689)"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 y_690)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 x_689)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" y_690)))))"
"(if(unsafe-fx< n_688 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686))"
"((letrec-values(((iloop_691)"
"(lambda(i_692)"
"(if(unsafe-fx<"
" i_692"
" n_688)"
"(let-values()"
"(let-values(((ref-i_693)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+"
" Alo_686"
" i_692))))"
"((letrec-values(((jloop_694)"
"(lambda(j_695)"
"(let-values(((ref-j-1_696)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx-"
" j_695"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_687"
" j_695)"
"(keyword<?"
" ref-i_693"
" ref-j-1_696)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-j-1_696)"
"(jloop_694"
"(unsafe-fx-"
" j_695"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-i_693)"
"(iloop_691"
"(unsafe-fx+"
" i_692"
" 1))))))))"
" jloop_694)"
"(unsafe-fx+"
" Blo_687"
" i_692))))"
"(void)))))"
" iloop_691)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_697)"
"(unsafe-fxrshift n_688 1)))"
"(let-values(((n/2+_698)"
"(unsafe-fx- n_688 n/2-_697)))"
"(let-values(((Amid1_699)"
"(unsafe-fx+"
" Alo_686"
" n/2-_697))"
"((Amid2_700)"
"(unsafe-fx+"
" Alo_686"
" n/2+_698))"
"((Bmid1_701)"
"(unsafe-fx+"
" Blo_687"
" n/2-_697)))"
"(begin"
"(copying-mergesort_685"
" Amid1_699"
" Bmid1_701"
" n/2+_698)"
"(copying-mergesort_685"
" Alo_686"
" Amid2_700"
" n/2-_697)"
"(let-values(((b2_702)"
"(unsafe-fx+"
" Blo_687"
" n_688)))"
"((letrec-values(((loop_703)"
"(lambda(a1_704"
" b1_705"
" c1_706)"
"(let-values(((x_707)"
"(unsafe-vector-ref"
" vec_607"
" a1_704))"
"((y_708)"
"(unsafe-vector-ref"
" vec_607"
" b1_705)))"
"(if(not"
"(keyword<?"
" y_708"
" x_707))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" x_707)"
"(let-values(((a1_709)"
"(unsafe-fx+"
" a1_704"
" 1))"
"((c1_710)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<"
" c1_710"
" b1_705)"
"(let-values()"
"(loop_703"
" a1_709"
" b1_705"
" c1_710))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" y_708)"
"(let-values(((b1_711)"
"(unsafe-fx+"
" b1_705"
" 1))"
"((c1_712)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<="
" b2_702"
" b1_711)"
"((letrec-values(((loop_713)"
"(lambda(a1_714"
" c1_715)"
"(if(unsafe-fx<"
" c1_715"
" b1_711)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_715"
"(unsafe-vector-ref"
" vec_607"
" a1_714))"
"(loop_713"
"(unsafe-fx+"
" a1_714"
" 1)"
"(unsafe-fx+"
" c1_715"
" 1))))"
"(void)))))"
" loop_713)"
" a1_704"
" c1_712)"
"(loop_703"
" a1_704"
" b1_711"
" c1_712)))))))))"
" loop_703)"
" Amid2_700"
" Bmid1_701"
" Blo_687)))))))))))))"
"(let-values(((Alo_716) 0)"
"((Amid1_717) n/2-_609)"
"((Amid2_718) n/2+_610)"
"((Ahi_719) n_608)"
"((B1lo_720) n_608))"
"(begin"
"(copying-mergesort_685 Amid1_717 B1lo_720 n/2+_610)"
"(if(zero? n/2-_609)"
"(void)"
"(let-values()"
"(copying-mergesort_685 Alo_716 Amid2_718 n/2-_609)))"
"(let-values(((b2_721) Ahi_719))"
"((letrec-values(((loop_722)"
"(lambda(a1_723 b1_724 c1_725)"
"(let-values(((x_726)"
"(unsafe-vector-ref"
" vec_607"
" a1_723))"
"((y_727)"
"(unsafe-vector-ref"
" vec_607"
" b1_724)))"
"(if(keyword<? x_726 y_727)"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_725"
" x_726)"
"(let-values(((a1_728)"
"(unsafe-fx+ a1_723 1))"
"((c1_729)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx< c1_729 b1_724)"
"(let-values()"
"(loop_722 a1_728 b1_724 c1_729))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_725"
" y_727)"
"(let-values(((b1_730)"
"(unsafe-fx+ b1_724 1))"
"((c1_731)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx<= b2_721 b1_730)"
"((letrec-values(((loop_732)"
"(lambda(a1_733"
" c1_734)"
"(if(unsafe-fx<"
" c1_734"
" b1_730)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_734"
"(unsafe-vector-ref"
" vec_607"
" a1_733))"
"(loop_732"
"(unsafe-fx+"
" a1_733"
" 1)"
"(unsafe-fx+"
" c1_734"
" 1))))"
"(void)))))"
" loop_732)"
" a1_723"
" c1_731)"
"(loop_722"
" a1_723"
" b1_730"
" c1_731)))))))))"
" loop_722)"
" B1lo_720"
" Amid2_718"
" Alo_716))))))))))"
"(hash-set! sort-internals_29 keyword<? proc_606)))))))"
"(case-lambda"
"((lst_735 <?_736)"
"(let-values(((n_737)(length lst_735)))"
"(let-values()"
"(if(= n_737 0)"
"(let-values() lst_735)"
"(if(< n_737 2)"
"(let-values() lst_735)"
"(if((letrec-values(((loop_887)"
"(lambda(last_888 next_889)"
"(let-values(((or-part_890)(null? next_889)))"
"(if or-part_890"
" or-part_890"
"(if(not(<?_736(car next_889) last_888))"
"(loop_887(car next_889)(cdr next_889))"
" #f))))))"
" loop_887)"
"(car lst_735)"
"(cdr lst_735))"
"(let-values() lst_735)"
"(if(<= n_737 3)"
"(let-values()"
"(if(= n_737 2)"
"(list(cadr lst_735)(car lst_735))"
"(let-values(((a_891)(car lst_735))((b_892)(cadr lst_735))((c_893)(caddr lst_735)))"
"(let-values(((a_894)(car lst_735))((b_895)(cadr lst_735))((c_896)(caddr lst_735)))"
"(if(<?_736 b_895 a_894)"
"(if(<?_736 c_896 b_895)"
"(list c_896 b_895 a_894)"
"(if(<?_736 c_896 a_894)(list b_895 c_896 a_894)(list b_895 a_894 c_896)))"
"(if(<?_736 c_896 a_894)(list c_896 a_894 b_895)(list a_894 c_896 b_895)))))))"
"(let-values()"
"(let-values(((vec_897)(make-vector(+ n_737(ceiling(/ n_737 2))))))"
"(begin"
"((letrec-values(((loop_898)"
"(lambda(i_899 lst_900)"
"(if(pair? lst_900)"
"(let-values()"
"(begin"
"(vector-set! vec_897 i_899(car lst_900))"
"(loop_898(add1 i_899)(cdr lst_900))))"
"(void)))))"
" loop_898)"
" 0"
" lst_735)"
"(let-values(((si_1027)(hash-ref sort-internals_29 <?_736 #f)))"
"(if si_1027"
"(si_1027 vec_897 n_737)"
"(let-values()"
"(let-values(((n/2-_1028)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_1029)(unsafe-fx- n_737 n/2-_1028)))"
"(letrec-values(((copying-mergesort_1104)"
"(lambda(Alo_1105 Blo_1106 n_1107)"
"(if(unsafe-fx= n_1107 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105)))"
"(if(unsafe-fx= n_1107 2)"
"(let-values()"
"(let-values(((x_1108)"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((y_1109)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_1105 1))))"
"(if(<?_736 y_1109 x_1108)"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 y_1109)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 x_1108)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" y_1109)))))"
"(if(unsafe-fx< n_1107 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((letrec-values(((iloop_1110)"
"(lambda(i_1111)"
"(if(unsafe-fx< i_1111 n_1107)"
"(let-values()"
"(let-values(((ref-i_1112)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_1105"
" i_1111))))"
"((letrec-values(((jloop_1113)"
"(lambda(j_1114)"
"(let-values(((ref-j-1_1115)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_1114"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1106"
" j_1114)"
"(<?_736"
" ref-i_1112"
" ref-j-1_1115)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-j-1_1115)"
"(jloop_1113"
"(unsafe-fx-"
" j_1114"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-i_1112)"
"(iloop_1110"
"(unsafe-fx+"
" i_1111"
" 1))))))))"
" jloop_1113)"
"(unsafe-fx+"
" Blo_1106"
" i_1111))))"
"(void)))))"
" iloop_1110)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1116)(unsafe-fxrshift n_1107 1)))"
"(let-values(((n/2+_1117)"
"(unsafe-fx- n_1107 n/2-_1116)))"
"(let-values(((Amid1_1118)"
"(unsafe-fx+ Alo_1105 n/2-_1116))"
"((Amid2_1119)"
"(unsafe-fx+ Alo_1105 n/2+_1117))"
"((Bmid1_1120)"
"(unsafe-fx+ Blo_1106 n/2-_1116)))"
"(begin"
"(copying-mergesort_1104"
" Amid1_1118"
" Bmid1_1120"
" n/2+_1117)"
"(copying-mergesort_1104"
" Alo_1105"
" Amid2_1119"
" n/2-_1116)"
"(let-values(((b2_1121)"
"(unsafe-fx+ Blo_1106 n_1107)))"
"((letrec-values(((loop_1122)"
"(lambda(a1_1123"
" b1_1124"
" c1_1125)"
"(let-values(((x_1126)"
"(unsafe-vector-ref"
" vec_897"
" a1_1123))"
"((y_1127)"
"(unsafe-vector-ref"
" vec_897"
" b1_1124)))"
"(if(not"
"(<?_736"
" y_1127"
" x_1126))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" x_1126)"
"(let-values(((a1_1128)"
"(unsafe-fx+"
" a1_1123"
" 1))"
"((c1_1129)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<"
" c1_1129"
" b1_1124)"
"(let-values()"
"(loop_1122"
" a1_1128"
" b1_1124"
" c1_1129))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" y_1127)"
"(let-values(((b1_1130)"
"(unsafe-fx+"
" b1_1124"
" 1))"
"((c1_1131)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<="
" b2_1121"
" b1_1130)"
"((letrec-values(((loop_1132)"
"(lambda(a1_1133"
" c1_1134)"
"(if(unsafe-fx<"
" c1_1134"
" b1_1130)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1134"
"(unsafe-vector-ref"
" vec_897"
" a1_1133))"
"(loop_1132"
"(unsafe-fx+"
" a1_1133"
" 1)"
"(unsafe-fx+"
" c1_1134"
" 1))))"
"(void)))))"
" loop_1132)"
" a1_1123"
" c1_1131)"
"(loop_1122"
" a1_1123"
" b1_1130"
" c1_1131)))))))))"
" loop_1122)"
" Amid2_1119"
" Bmid1_1120"
" Blo_1106)))))))))))))"
"(let-values(((Alo_1135) 0)"
"((Amid1_1136) n/2-_1028)"
"((Amid2_1137) n/2+_1029)"
"((Ahi_1138) n_737)"
"((B1lo_1139) n_737))"
"(begin"
"(copying-mergesort_1104 Amid1_1136 B1lo_1139 n/2+_1029)"
"(if(zero? n/2-_1028)"
"(void)"
"(let-values()(copying-mergesort_1104 Alo_1135 Amid2_1137 n/2-_1028)))"
"(let-values(((b2_1140) Ahi_1138))"
"((letrec-values(((loop_1141)"
"(lambda(a1_1142 b1_1143 c1_1144)"
"(let-values(((x_1145)"
"(unsafe-vector-ref vec_897 a1_1142))"
"((y_1146)"
"(unsafe-vector-ref vec_897 b1_1143)))"
"(if(<?_736 x_1145 y_1146)"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 x_1145)"
"(let-values(((a1_1147)(unsafe-fx+ a1_1142 1))"
"((c1_1148)(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx< c1_1148 b1_1143)"
"(let-values()"
"(loop_1141 a1_1147 b1_1143 c1_1148))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 y_1146)"
"(let-values(((b1_1149)(unsafe-fx+ b1_1143 1))"
"((c1_1150)(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx<= b2_1140 b1_1149)"
"((letrec-values(((loop_1151)"
"(lambda(a1_1152 c1_1153)"
"(if(unsafe-fx<"
" c1_1153"
" b1_1149)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1153"
"(unsafe-vector-ref"
" vec_897"
" a1_1152))"
"(loop_1151"
"(unsafe-fx+"
" a1_1152"
" 1)"
"(unsafe-fx+"
" c1_1153"
" 1))))"
"(void)))))"
" loop_1151)"
" a1_1142"
" c1_1150)"
"(loop_1141 a1_1142 b1_1149 c1_1150)))))))))"
" loop_1141)"
" B1lo_1139"
" Amid2_1137"
" Alo_1135))))))))))"
"((letrec-values(((loop_1154)"
"(lambda(i_1155 r_1156)"
"(let-values(((i_1157)(sub1 i_1155)))"
"(if(< i_1157 0)"
" r_1156"
"(loop_1154 i_1157(cons(vector-ref vec_897 i_1157) r_1156)))))))"
" loop_1154)"
" n_737"
" '())))))))))))"
"((lst_1158 <?_1159 getkey_1160)"
"(if(if getkey_1160(not(eq? values getkey_1160)) #f)"
"(sort lst_1158 <?_1159 getkey_1160 #f)"
"(sort lst_1158 <?_1159)))"
"((lst_1161 <?_1162 getkey_1163 cache-keys?_1164)"
"(if(if getkey_1163(not(eq? values getkey_1163)) #f)"
"(let-values(((n_1165)(length lst_1161)))"
"(let-values()"
"(if(= n_1165 0)"
"(let-values() lst_1161)"
"(if cache-keys?_1164"
"(let-values()"
"(let-values(((vec_1180)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1181)"
"(lambda(i_1182 lst_1183)"
"(if(pair? lst_1183)"
"(let-values()"
"(let-values(((x_1184)(car lst_1183)))"
"(begin"
"(vector-set! vec_1180 i_1182(cons(getkey_1163 x_1184) x_1184))"
"(loop_1181(add1 i_1182)(cdr lst_1183)))))"
"(void)))))"
" loop_1181)"
" 0"
" lst_1161)"
"(let-values()"
"(let-values(((n/2-_1185)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1186)(unsafe-fx- n_1165 n/2-_1185)))"
"(letrec-values(((copying-mergesort_1261)"
"(lambda(Alo_1262 Blo_1263 n_1264)"
"(if(unsafe-fx= n_1264 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262)))"
"(if(unsafe-fx= n_1264 2)"
"(let-values()"
"(let-values(((x_1265)(unsafe-vector-ref vec_1180 Alo_1262))"
"((y_1266)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+ Alo_1262 1))))"
"(if(<?_1162(car y_1266)(car x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 y_1266)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 x_1265)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" y_1266)))))"
"(if(unsafe-fx< n_1264 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262))"
"((letrec-values(((iloop_1267)"
"(lambda(i_1268)"
"(if(unsafe-fx< i_1268 n_1264)"
"(let-values()"
"(let-values(((ref-i_1269)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+"
" Alo_1262"
" i_1268))))"
"((letrec-values(((jloop_1270)"
"(lambda(j_1271)"
"(let-values(((ref-j-1_1272)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx-"
" j_1271"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1263"
" j_1271)"
"(<?_1162"
"(car"
" ref-i_1269)"
"(car"
" ref-j-1_1272))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-j-1_1272)"
"(jloop_1270"
"(unsafe-fx-"
" j_1271"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-i_1269)"
"(iloop_1267"
"(unsafe-fx+"
" i_1268"
" 1))))))))"
" jloop_1270)"
"(unsafe-fx+ Blo_1263 i_1268))))"
"(void)))))"
" iloop_1267)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1273)(unsafe-fxrshift n_1264 1)))"
"(let-values(((n/2+_1274)(unsafe-fx- n_1264 n/2-_1273)))"
"(let-values(((Amid1_1275)"
"(unsafe-fx+ Alo_1262 n/2-_1273))"
"((Amid2_1276)"
"(unsafe-fx+ Alo_1262 n/2+_1274))"
"((Bmid1_1277)"
"(unsafe-fx+ Blo_1263 n/2-_1273)))"
"(begin"
"(copying-mergesort_1261"
" Amid1_1275"
" Bmid1_1277"
" n/2+_1274)"
"(copying-mergesort_1261"
" Alo_1262"
" Amid2_1276"
" n/2-_1273)"
"(let-values(((b2_1278)"
"(unsafe-fx+ Blo_1263 n_1264)))"
"((letrec-values(((loop_1279)"
"(lambda(a1_1280 b1_1281 c1_1282)"
"(let-values(((x_1283)"
"(unsafe-vector-ref"
" vec_1180"
" a1_1280))"
"((y_1284)"
"(unsafe-vector-ref"
" vec_1180"
" b1_1281)))"
"(if(not"
"(<?_1162"
"(car y_1284)"
"(car x_1283)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" x_1283)"
"(let-values(((a1_1285)"
"(unsafe-fx+"
" a1_1280"
" 1))"
"((c1_1286)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<"
" c1_1286"
" b1_1281)"
"(let-values()"
"(loop_1279"
" a1_1285"
" b1_1281"
" c1_1286))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" y_1284)"
"(let-values(((b1_1287)"
"(unsafe-fx+"
" b1_1281"
" 1))"
"((c1_1288)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<="
" b2_1278"
" b1_1287)"
"((letrec-values(((loop_1289)"
"(lambda(a1_1290"
" c1_1291)"
"(if(unsafe-fx<"
" c1_1291"
" b1_1287)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1291"
"(unsafe-vector-ref"
" vec_1180"
" a1_1290))"
"(loop_1289"
"(unsafe-fx+"
" a1_1290"
" 1)"
"(unsafe-fx+"
" c1_1291"
" 1))))"
"(void)))))"
" loop_1289)"
" a1_1280"
" c1_1288)"
"(loop_1279"
" a1_1280"
" b1_1287"
" c1_1288)))))))))"
" loop_1279)"
" Amid2_1276"
" Bmid1_1277"
" Blo_1263)))))))))))))"
"(let-values(((Alo_1292) 0)"
"((Amid1_1293) n/2-_1185)"
"((Amid2_1294) n/2+_1186)"
"((Ahi_1295) n_1165)"
"((B1lo_1296) n_1165))"
"(begin"
"(copying-mergesort_1261 Amid1_1293 B1lo_1296 n/2+_1186)"
"(if(zero? n/2-_1185)"
"(void)"
"(let-values()(copying-mergesort_1261 Alo_1292 Amid2_1294 n/2-_1185)))"
"(let-values(((b2_1297) Ahi_1295))"
"((letrec-values(((loop_1298)"
"(lambda(a1_1299 b1_1300 c1_1301)"
"(let-values(((x_1302)(unsafe-vector-ref vec_1180 a1_1299))"
"((y_1303)"
"(unsafe-vector-ref vec_1180 b1_1300)))"
"(if(<?_1162(car x_1302)(car y_1303))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 x_1302)"
"(let-values(((a1_1304)(unsafe-fx+ a1_1299 1))"
"((c1_1305)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx< c1_1305 b1_1300)"
"(let-values()"
"(loop_1298 a1_1304 b1_1300 c1_1305))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 y_1303)"
"(let-values(((b1_1306)(unsafe-fx+ b1_1300 1))"
"((c1_1307)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx<= b2_1297 b1_1306)"
"((letrec-values(((loop_1308)"
"(lambda(a1_1309 c1_1310)"
"(if(unsafe-fx<"
" c1_1310"
" b1_1306)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1310"
"(unsafe-vector-ref"
" vec_1180"
" a1_1309))"
"(loop_1308"
"(unsafe-fx+ a1_1309 1)"
"(unsafe-fx+"
" c1_1310"
" 1))))"
"(void)))))"
" loop_1308)"
" a1_1299"
" c1_1307)"
"(loop_1298 a1_1299 b1_1306 c1_1307)))))))))"
" loop_1298)"
" B1lo_1296"
" Amid2_1294"
" Alo_1292))))))))"
"((letrec-values(((loop_1311)"
"(lambda(i_1312 r_1313)"
"(let-values(((i_1314)(sub1 i_1312)))"
"(if(< i_1314 0)"
" r_1313"
"(loop_1311"
" i_1314"
"(cons(cdr(vector-ref vec_1180 i_1314)) r_1313)))))))"
" loop_1311)"
" n_1165"
" '()))))"
"(if(< n_1165 2)"
"(let-values() lst_1161)"
"(if((letrec-values(((loop_1315)"
"(lambda(last_1316 next_1317)"
"(let-values(((or-part_1318)(null? next_1317)))"
"(if or-part_1318"
" or-part_1318"
"(if(not"
"(<?_1162(getkey_1163(car next_1317))(getkey_1163 last_1316)))"
"(loop_1315(car next_1317)(cdr next_1317))"
" #f))))))"
" loop_1315)"
"(car lst_1161)"
"(cdr lst_1161))"
"(let-values() lst_1161)"
"(if(<= n_1165 3)"
"(let-values()"
"(if(= n_1165 2)"
"(list(cadr lst_1161)(car lst_1161))"
"(let-values(((a_1319)(car lst_1161))"
"((b_1320)(cadr lst_1161))"
"((c_1321)(caddr lst_1161)))"
"(let-values(((a_1322)(car lst_1161))"
"((b_1323)(cadr lst_1161))"
"((c_1324)(caddr lst_1161)))"
"(if(<?_1162(getkey_1163 b_1323)(getkey_1163 a_1322))"
"(if(<?_1162(getkey_1163 c_1324)(getkey_1163 b_1323))"
"(list c_1324 b_1323 a_1322)"
"(if(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(list b_1323 c_1324 a_1322)"
"(list b_1323 a_1322 c_1324)))"
"(if(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(list c_1324 a_1322 b_1323)"
"(list a_1322 c_1324 b_1323)))))))"
"(let-values()"
"(let-values(((vec_1325)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1326)"
"(lambda(i_1327 lst_1328)"
"(if(pair? lst_1328)"
"(let-values()"
"(begin"
"(vector-set! vec_1325 i_1327(car lst_1328))"
"(loop_1326(add1 i_1327)(cdr lst_1328))))"
"(void)))))"
" loop_1326)"
" 0"
" lst_1161)"
"(if getkey_1163"
"(let-values()"
"(let-values(((n/2-_1329)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1330)(unsafe-fx- n_1165 n/2-_1329)))"
"(letrec-values(((copying-mergesort_1405)"
"(lambda(Alo_1406 Blo_1407 n_1408)"
"(if(unsafe-fx= n_1408 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406)))"
"(if(unsafe-fx= n_1408 2)"
"(let-values()"
"(let-values(((x_1409)"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((y_1410)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1406 1))))"
"(if(<?_1162"
"(getkey_1163 y_1410)"
"(getkey_1163 x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 y_1410)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 x_1409)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" y_1410)))))"
"(if(unsafe-fx< n_1408 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((letrec-values(((iloop_1411)"
"(lambda(i_1412)"
"(if(unsafe-fx< i_1412 n_1408)"
"(let-values()"
"(let-values(((ref-i_1413)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1406"
" i_1412))))"
"((letrec-values(((jloop_1414)"
"(lambda(j_1415)"
"(let-values(((ref-j-1_1416)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1415"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1407"
" j_1415)"
"(<?_1162"
"(getkey_1163"
" ref-i_1413)"
"(getkey_1163"
" ref-j-1_1416))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-j-1_1416)"
"(jloop_1414"
"(unsafe-fx-"
" j_1415"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-i_1413)"
"(iloop_1411"
"(unsafe-fx+"
" i_1412"
" 1))))))))"
" jloop_1414)"
"(unsafe-fx+"
" Blo_1407"
" i_1412))))"
"(void)))))"
" iloop_1411)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1417)"
"(unsafe-fxrshift n_1408 1)))"
"(let-values(((n/2+_1418)"
"(unsafe-fx- n_1408 n/2-_1417)))"
"(let-values(((Amid1_1419)"
"(unsafe-fx+ Alo_1406 n/2-_1417))"
"((Amid2_1420)"
"(unsafe-fx+ Alo_1406 n/2+_1418))"
"((Bmid1_1421)"
"(unsafe-fx+ Blo_1407 n/2-_1417)))"
"(begin"
"(copying-mergesort_1405"
" Amid1_1419"
" Bmid1_1421"
" n/2+_1418)"
"(copying-mergesort_1405"
" Alo_1406"
" Amid2_1420"
" n/2-_1417)"
"(let-values(((b2_1422)"
"(unsafe-fx+ Blo_1407 n_1408)))"
"((letrec-values(((loop_1423)"
"(lambda(a1_1424"
" b1_1425"
" c1_1426)"
"(let-values(((x_1427)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1424))"
"((y_1428)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1425)))"
"(if(not"
"(<?_1162"
"(getkey_1163"
" y_1428)"
"(getkey_1163"
" x_1427)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" x_1427)"
"(let-values(((a1_1429)"
"(unsafe-fx+"
" a1_1424"
" 1))"
"((c1_1430)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<"
" c1_1430"
" b1_1425)"
"(let-values()"
"(loop_1423"
" a1_1429"
" b1_1425"
" c1_1430))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" y_1428)"
"(let-values(((b1_1431)"
"(unsafe-fx+"
" b1_1425"
" 1))"
"((c1_1432)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<="
" b2_1422"
" b1_1431)"
"((letrec-values(((loop_1433)"
"(lambda(a1_1434"
" c1_1435)"
"(if(unsafe-fx<"
" c1_1435"
" b1_1431)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1435"
"(unsafe-vector-ref"
" vec_1325"
" a1_1434))"
"(loop_1433"
"(unsafe-fx+"
" a1_1434"
" 1)"
"(unsafe-fx+"
" c1_1435"
" 1))))"
"(void)))))"
" loop_1433)"
" a1_1424"
" c1_1432)"
"(loop_1423"
" a1_1424"
" b1_1431"
" c1_1432)))))))))"
" loop_1423)"
" Amid2_1420"
" Bmid1_1421"
" Blo_1407)))))))))))))"
"(let-values(((Alo_1436) 0)"
"((Amid1_1437) n/2-_1329)"
"((Amid2_1438) n/2+_1330)"
"((Ahi_1439) n_1165)"
"((B1lo_1440) n_1165))"
"(begin"
"(copying-mergesort_1405 Amid1_1437 B1lo_1440 n/2+_1330)"
"(if(zero? n/2-_1329)"
"(void)"
"(let-values()(copying-mergesort_1405 Alo_1436 Amid2_1438 n/2-_1329)))"
"(let-values(((b2_1441) Ahi_1439))"
"((letrec-values(((loop_1442)"
"(lambda(a1_1443 b1_1444 c1_1445)"
"(let-values(((x_1446)"
"(unsafe-vector-ref vec_1325 a1_1443))"
"((y_1447)"
"(unsafe-vector-ref vec_1325 b1_1444)))"
"(if(<?_1162"
"(getkey_1163 x_1446)"
"(getkey_1163 y_1447))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 x_1446)"
"(let-values(((a1_1448)"
"(unsafe-fx+ a1_1443 1))"
"((c1_1449)"
"(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx< c1_1449 b1_1444)"
"(let-values()"
"(loop_1442 a1_1448 b1_1444 c1_1449))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 y_1447)"
"(let-values(((b1_1450)"
"(unsafe-fx+ b1_1444 1))"
"((c1_1451)"
"(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx<= b2_1441 b1_1450)"
"((letrec-values(((loop_1452)"
"(lambda(a1_1453"
" c1_1454)"
"(if(unsafe-fx<"
" c1_1454"
" b1_1450)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1454"
"(unsafe-vector-ref"
" vec_1325"
" a1_1453))"
"(loop_1452"
"(unsafe-fx+"
" a1_1453"
" 1)"
"(unsafe-fx+"
" c1_1454"
" 1))))"
"(void)))))"
" loop_1452)"
" a1_1443"
" c1_1451)"
"(loop_1442"
" a1_1443"
" b1_1450"
" c1_1451)))))))))"
" loop_1442)"
" B1lo_1440"
" Amid2_1438"
" Alo_1436))))))))"
"(let-values(((si_1455)(hash-ref sort-internals_29 <?_1162 #f)))"
"(if si_1455"
"(si_1455 vec_1325 n_1165)"
"(let-values()"
"(let-values(((n/2-_1456)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1457)(unsafe-fx- n_1165 n/2-_1456)))"
"(letrec-values(((copying-mergesort_1532)"
"(lambda(Alo_1533 Blo_1534 n_1535)"
"(if(unsafe-fx= n_1535 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533)))"
"(if(unsafe-fx= n_1535 2)"
"(let-values()"
"(let-values(((x_1536)"
"(unsafe-vector-ref"
" vec_1325"
" Alo_1533))"
"((y_1537)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1533 1))))"
"(if(<?_1162 y_1537 x_1536)"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 y_1537)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 x_1536)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" y_1537)))))"
"(if(unsafe-fx< n_1535 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((letrec-values(((iloop_1538)"
"(lambda(i_1539)"
"(if(unsafe-fx<"
" i_1539"
" n_1535)"
"(let-values()"
"(let-values(((ref-i_1540)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1533"
" i_1539))))"
"((letrec-values(((jloop_1541)"
"(lambda(j_1542)"
"(let-values(((ref-j-1_1543)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1542"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1534"
" j_1542)"
"(<?_1162"
" ref-i_1540"
" ref-j-1_1543)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-j-1_1543)"
"(jloop_1541"
"(unsafe-fx-"
" j_1542"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-i_1540)"
"(iloop_1538"
"(unsafe-fx+"
" i_1539"
" 1))))))))"
" jloop_1541)"
"(unsafe-fx+"
" Blo_1534"
" i_1539))))"
"(void)))))"
" iloop_1538)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1544)"
"(unsafe-fxrshift n_1535 1)))"
"(let-values(((n/2+_1545)"
"(unsafe-fx- n_1535 n/2-_1544)))"
"(let-values(((Amid1_1546)"
"(unsafe-fx+"
" Alo_1533"
" n/2-_1544))"
"((Amid2_1547)"
"(unsafe-fx+"
" Alo_1533"
" n/2+_1545))"
"((Bmid1_1548)"
"(unsafe-fx+"
" Blo_1534"
" n/2-_1544)))"
"(begin"
"(copying-mergesort_1532"
" Amid1_1546"
" Bmid1_1548"
" n/2+_1545)"
"(copying-mergesort_1532"
" Alo_1533"
" Amid2_1547"
" n/2-_1544)"
"(let-values(((b2_1549)"
"(unsafe-fx+"
" Blo_1534"
" n_1535)))"
"((letrec-values(((loop_1550)"
"(lambda(a1_1551"
" b1_1552"
" c1_1553)"
"(let-values(((x_1554)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1551))"
"((y_1555)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1552)))"
"(if(not"
"(<?_1162"
" y_1555"
" x_1554))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" x_1554)"
"(let-values(((a1_1556)"
"(unsafe-fx+"
" a1_1551"
" 1))"
"((c1_1557)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<"
" c1_1557"
" b1_1552)"
"(let-values()"
"(loop_1550"
" a1_1556"
" b1_1552"
" c1_1557))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" y_1555)"
"(let-values(((b1_1558)"
"(unsafe-fx+"
" b1_1552"
" 1))"
"((c1_1559)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<="
" b2_1549"
" b1_1558)"
"((letrec-values(((loop_1560)"
"(lambda(a1_1561"
" c1_1562)"
"(if(unsafe-fx<"
" c1_1562"
" b1_1558)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1562"
"(unsafe-vector-ref"
" vec_1325"
" a1_1561))"
"(loop_1560"
"(unsafe-fx+"
" a1_1561"
" 1)"
"(unsafe-fx+"
" c1_1562"
" 1))))"
"(void)))))"
" loop_1560)"
" a1_1551"
" c1_1559)"
"(loop_1550"
" a1_1551"
" b1_1558"
" c1_1559)))))))))"
" loop_1550)"
" Amid2_1547"
" Bmid1_1548"
" Blo_1534)))))))))))))"
"(let-values(((Alo_1563) 0)"
"((Amid1_1564) n/2-_1456)"
"((Amid2_1565) n/2+_1457)"
"((Ahi_1566) n_1165)"
"((B1lo_1567) n_1165))"
"(begin"
"(copying-mergesort_1532 Amid1_1564 B1lo_1567 n/2+_1457)"
"(if(zero? n/2-_1456)"
"(void)"
"(let-values()"
"(copying-mergesort_1532 Alo_1563 Amid2_1565 n/2-_1456)))"
"(let-values(((b2_1568) Ahi_1566))"
"((letrec-values(((loop_1569)"
"(lambda(a1_1570 b1_1571 c1_1572)"
"(let-values(((x_1573)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1570))"
"((y_1574)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1571)))"
"(if(<?_1162 x_1573 y_1574)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1572"
" x_1573)"
"(let-values(((a1_1575)"
"(unsafe-fx+ a1_1570 1))"
"((c1_1576)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx< c1_1576 b1_1571)"
"(let-values()"
"(loop_1569 a1_1575 b1_1571 c1_1576))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1572"
" y_1574)"
"(let-values(((b1_1577)"
"(unsafe-fx+ b1_1571 1))"
"((c1_1578)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx<= b2_1568 b1_1577)"
"((letrec-values(((loop_1579)"
"(lambda(a1_1580"
" c1_1581)"
"(if(unsafe-fx<"
" c1_1581"
" b1_1577)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1581"
"(unsafe-vector-ref"
" vec_1325"
" a1_1580))"
"(loop_1579"
"(unsafe-fx+"
" a1_1580"
" 1)"
"(unsafe-fx+"
" c1_1581"
" 1))))"
"(void)))))"
" loop_1579)"
" a1_1570"
" c1_1578)"
"(loop_1569"
" a1_1570"
" b1_1577"
" c1_1578)))))))))"
" loop_1569)"
" B1lo_1567"
" Amid2_1565"
" Alo_1563)))))))))))"
"((letrec-values(((loop_1582)"
"(lambda(i_1583 r_1584)"
"(let-values(((i_1585)(sub1 i_1583)))"
"(if(< i_1585 0)"
" r_1584"
"(loop_1582"
" i_1585"
"(cons(vector-ref vec_1325 i_1585) r_1584)))))))"
" loop_1582)"
" n_1165"
" '())))))))))))"
"(sort lst_1161 <?_1162))))))))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(new:collection-path)"
"(let-values(((collection-path_54)"
"(let-values(((core4_55)"
"(lambda(fail1_56 fail2_57 collection3_58 new-rest_59)"
"(let-values(((collection_60) collection3_58))"
"(let-values(((fail_61)"
"(if fail2_57"
" fail1_56"
"(lambda(s_62)"
"(raise"
"(exn:fail:filesystem"
"                                                      (string-append \"collection-path: \" s_62)"
"(current-continuation-marks)))))))"
"(let-values(((collections_63) new-rest_59))"
"(collection-path fail_61 collection_60 collections_63)))))))"
"(let-values(((unpack5_64)"
"(lambda(given-kws_65 given-args_66 collection3_67 new-rest_68)"
"(let-values(((fail2_69)(pair? given-kws_65)))"
"(let-values(((fail1_70)(if fail2_69(car given-args_66)(void))))"
"(core4_55 fail1_70 fail2_69 collection3_67 new-rest_68))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_71 given-argc_72)"
"(if(>= given-argc_72 3)"
"(let-values(((l1_73) given-kws_71))"
"(let-values(((l1_74)"
"(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:fail)(cdr l1_73) l1_73))))"
"(null? l1_74)))"
" #f))"
"(case-lambda"
"((given-kws_75 given-args_76 collection_77 . collections_78)"
"(unpack5_64 given-kws_75 given-args_76 collection_77 collections_78)))"
" null"
" '(#:fail)"
"(let-values(((collection-path_79)"
"(case-lambda"
"((collection_80 . collections_81)"
"(unpack5_64 null null collection_80 collections_81)))))"
" collection-path_79))))))"
" collection-path_54))"
"(define-values"
"(new:collection-file-path)"
"(let-values(((collection-file-path_82)"
"(let-values(((core12_83)"
"(lambda(check-compiled?6_84"
" check-compiled?8_85"
" fail7_86"
" fail9_87"
" file-name10_88"
" collection11_89"
" new-rest_90)"
"(let-values(((file-name_91) file-name10_88))"
"(let-values(((collection_92) collection11_89))"
"(let-values(((check-compiled?_93)"
"(if check-compiled?8_85"
" check-compiled?6_84"
"(if(path-string? file-name_91)"
"                                                      (regexp-match? '#rx\".[.]rkt$\" file-name_91)"
" #f))))"
"(let-values(((fail_94)"
"(if fail9_87"
" fail7_86"
"(lambda(s_95)"
"(raise"
"(exn:fail:filesystem"
"                                                          (string-append \"collection-file-path: \" s_95)"
"(current-continuation-marks)))))))"
"(let-values(((collections_96) new-rest_90))"
"(collection-file-path"
" fail_94"
" check-compiled?_93"
" file-name_91"
" collection_92"
" collections_96)))))))))"
"(let-values(((unpack13_97)"
"(lambda(given-kws_98 given-args_99 file-name10_100 collection11_101 new-rest_102)"
"(let-values(((check-compiled?8_103)"
"(if(pair? given-kws_98)"
"(eq? '#:check-compiled?(car given-kws_98))"
" #f)))"
"(let-values(((check-compiled?6_104)"
"(if check-compiled?8_103(car given-args_99)(void)))"
"((given-kws_105)"
"(if check-compiled?8_103(cdr given-kws_98) given-kws_98))"
"((given-args_106)"
"(if check-compiled?8_103(cdr given-args_99) given-args_99)))"
"(let-values(((fail9_107)(pair? given-kws_105)))"
"(let-values(((fail7_108)(if fail9_107(car given-args_106)(void))))"
"(core12_83"
" check-compiled?6_104"
" check-compiled?8_103"
" fail7_108"
" fail9_107"
" file-name10_100"
" collection11_101"
" new-rest_102))))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_109 given-argc_110)"
"(if(>= given-argc_110 4)"
"(let-values(((l1_111) given-kws_109))"
"(let-values(((l1_112)"
"(if(null? l1_111)"
" l1_111"
"(if(eq?(car l1_111) '#:check-compiled?)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)"
"(if(null? l1_113)"
" l1_113"
"(if(eq?(car l1_113) '#:fail)(cdr l1_113) l1_113))))"
"(null? l1_114)))))"
" #f))"
"(case-lambda"
"((given-kws_115 given-args_116 file-name_117 collection_118 . collections_119)"
"(unpack13_97 given-kws_115 given-args_116 file-name_117 collection_118 collections_119)))"
" null"
" '(#:check-compiled? #:fail)"
"(let-values(((collection-file-path_120)"
"(case-lambda"
"((file-name_121 collection_122 . collections_123)"
"(unpack13_97 null null file-name_121 collection_122 collections_123)))))"
" collection-file-path_120))))))"
" collection-file-path_82))"
"(void)"
"(void)"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(void)"
"(void)"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values(((lst_7) lst5_5))"
"(let-values(((less?_8) less?6_6))"
"(let-values(((getkey_9)(if key3_4 key1_3 #f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
"(define-values"
"(unpack8.1$2)"
"(lambda(given-kws_11 given-args_12 lst5_13 less?6_14)"
"(let-values(((cache-keys?4_15)(if(pair? given-kws_11)(eq? '#:cache-keys?(car given-kws_11)) #f)))"
"(let-values(((cache-keys?2_16)(if cache-keys?4_15(car given-args_12)(void)))"
"((given-kws_17)(if cache-keys?4_15(cdr given-kws_11) given-kws_11))"
"((given-args_18)(if cache-keys?4_15(cdr given-args_12) given-args_12)))"
"(let-values(((key3_19)(pair? given-kws_17)))"
"(let-values(((key1_20)(if key3_19(car given-args_18)(void))))"
"(sort7.1 cache-keys?2_16 cache-keys?4_15 key1_20 key3_19 lst5_13 less?6_14)))))))"
"(define-values"
"(sort9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_21 given-argc_22)"
"(if(= given-argc_22 4)"
"(let-values(((l1_23) given-kws_21))"
"(let-values(((l1_24)(if(null? l1_23) l1_23(if(eq?(car l1_23) '#:cache-keys?)(cdr l1_23) l1_23))))"
"(let-values(((l1_25) l1_24))"
"(let-values(((l1_26)(if(null? l1_25) l1_25(if(eq?(car l1_25) '#:key)(cdr l1_25) l1_25))))"
"(null? l1_26)))))"
" #f))"
"(case-lambda((given-kws_27 given-args_28 lst_29 less?_30)(unpack8.1$2 given-kws_27 given-args_28 lst_29 less?_30)))"
" null"
" '(#:cache-keys? #:key)"
"(let-values(((sort_31)(case-lambda((lst_32 less?_33)(unpack8.1$2 null null lst_32 less?_33))))) sort_31)))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 \"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
"  (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 \"non-pair found in list: \" a_79 \" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 1) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) #f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" #f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100)))))"
"(void)"
"(void)"
"(define-values"
"(make-regexp-tweaker)"
"(lambda(tweaker_61)"
"(let-values(((t_62)(make-hash)))"
"(lambda(rx_63 n_64)"
"(let-values(((run-tweak_110)"
"(lambda()"
"(if(pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_111)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_112)(regexp? tweaked_111)))"
"(if or-part_112 or-part_112(byte-regexp? tweaked_111)))"
" tweaked_111"
"(pregexp(if(bytes? tweaked_111)(bytes->string/utf-8 tweaked_111) tweaked_111)))))"
"(if(regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_113)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_114)(regexp? tweaked_113)))"
"(if or-part_114 or-part_114(byte-regexp? tweaked_113)))"
" tweaked_113"
"(regexp(if(bytes? tweaked_113)(bytes->string/utf-8 tweaked_113) tweaked_113)))))"
"(if(byte-pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_115)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_116)(regexp? tweaked_115)))"
"(if or-part_116 or-part_116(byte-regexp? tweaked_115)))"
" tweaked_115"
"(byte-pregexp"
"(if(bytes? tweaked_115) tweaked_115(string->bytes/utf-8 tweaked_115))))))"
"(if(byte-regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_117)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_118)(regexp? tweaked_117)))"
"(if or-part_118 or-part_118(byte-regexp? tweaked_117)))"
" tweaked_117"
"(byte-regexp"
"(if(bytes? tweaked_117) tweaked_117(string->bytes/utf-8 tweaked_117))))))"
"(if(string? rx_63)"
"(let-values()"
"(let-values(((tweaked_119)(tweaker_61((lambda(x_120) x_120) rx_63) n_64)))"
"(if(let-values(((or-part_121)(regexp? tweaked_119)))"
"(if or-part_121 or-part_121(byte-regexp? tweaked_119)))"
" tweaked_119"
"(regexp"
"(if(bytes? tweaked_119)(bytes->string/utf-8 tweaked_119) tweaked_119)))))"
"(if(bytes? rx_63)"
"(let-values()"
"(let-values(((tweaked_122)(tweaker_61((lambda(x_123) x_123) rx_63) n_64)))"
"(if(let-values(((or-part_124)(regexp? tweaked_122)))"
"(if or-part_124 or-part_124(byte-regexp? tweaked_122)))"
" tweaked_122"
"(byte-regexp"
"(if(bytes? tweaked_122) tweaked_122(string->bytes/utf-8 tweaked_122))))))"
"(let-values()"
"(raise-argument-error"
" 'regexp-tweaker"
"                                       \"(or/c regexp? byte-regexp? string? bytes?)\""
" rx_63)))))))))))"
"(let-values(((key_125)(cons n_64 rx_63)))"
"(let-values(((or-part_126)(hash-ref t_62 key_125 #f)))"
"(if or-part_126"
" or-part_126"
"(let-values(((rx*_127)(run-tweak_110)))(begin(hash-set! t_62 key_125 rx*_127) rx*_127))))))))))"
"(define-values(bstring-length)(lambda(s_171)(if(bytes? s_171)(bytes-length s_171)(string-length s_171))))"
"(define-values"
"(no-empty-edge-matches)"
"(make-regexp-tweaker"
"(lambda(rx_172 n_173)"
"(if(bytes? rx_172)"
"       (bytes-append #\"(?:\" rx_172 #\")(?<=\" (make-bytes n_173 (char->integer '#\\.)) #\")\")"
"       (format \"(?:~a)(?<=~a)\" rx_172 (make-bytes n_173 (char->integer '#\\.)))))))"
"(define-values"
"(regexp-match-positions*33.1)"
"(lambda(match-select23_174"
" match-select24_175"
" pattern31_176"
" string32_177"
" start25_178"
" end26_179"
" ipre27_180"
" start28_181"
" end29_182"
" ipre30_183)"
"(let-values(((pattern_184) pattern31_176))"
"(let-values(((string_185) string32_177))"
"(let-values(((start_186)(if start28_181 start25_178 0)))"
"(let-values(((end_187)(if end29_182 end26_179 #f)))"
"            (let-values (((ipre_188) (if ipre30_183 ipre27_180 #\"\")))"
"(let-values(((match-select_189)(if match-select24_175 match-select23_174 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_189)"
"(void)"
"                      (let-values () (raise-argument-error 'regexp-match-positions* \"procedure?\" match-select_189)))"
"(if(eq? match-select_189 car)"
"(let-values(((string_190)"
"(if(path? string_185)"
"(if(let-values(((or-part_191)(string? pattern_184)))"
"(if or-part_191 or-part_191(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_192)"
"(if(string? string_190)"
"(let-values()(string-length string_190))"
"(if(bytes? string_190)"
"(let-values()(bytes-length string_190))"
"(let-values() #f)))))"
"(let-values(((orig-rx_193)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_194)(regexp-max-lookbehind orig-rx_193)))"
"(begin"
"(if(let-values(((or-part_195) len_192))"
"(if or-part_195 or-part_195(input-port? string_190)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c string? bytes? path? input-port?)\""
" string_190)))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_196)(not end_187)))"
"(if or-part_196"
" or-part_196"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_197)(input-port? string_190)))"
"(if or-part_197 or-part_197(if len_192(<= start_186 len_192) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_192)"
" start_186)))"
"(if(let-values(((or-part_198)(not end_187)))"
"(if or-part_198"
" or-part_198"
"(if(<= start_186 end_187)"
"(let-values(((or-part_199)(input-port? string_190)))"
"(if or-part_199 or-part_199(if len_192(<= end_187 len_192) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_192)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_200)"
"(lambda(acc_201 start_202 end_203 ipre_204 0-ok?_205)"
"(let-values(((rx_206)"
"(if 0-ok?_205"
" orig-rx_193"
"(no-empty-edge-matches"
" orig-rx_193"
"(add1(bytes-length ipre_204))))))"
"(let-values(((m_229 ipre_230)"
"(regexp-match-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" #f"
" ipre_204"
" max-lookbehind_194)))"
"(if(not m_229)"
"((lambda(acc_231 start_232 end_233) acc_231)"
" acc_201"
" start_202"
" end_203)"
"(let-values(((mstart_234)(caar m_229)))"
"(let-values(((mend_235)(cdar m_229)))"
"(let-values(((0-ok?_236)(not(= mstart_234 mend_235))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mstart)(#%app caar ms))"
"((mend)(#%app cdar ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app + mend(#%app cdr p))))"
"(#%app"
" loop"
" '()"
" '0"
"(if end(#%app - end mend) '#f)))"
"(#%app cons(#%app car ms) acc))))"
"(input-port? string_190)"
" #f)"
"((lambda(loop_245 acc_246 start_247 end_248 ms_249)"
"(let-values(((mstart_250)(caar ms_249))"
"((mend_251)(cdar ms_249)))"
"(append"
"(map2"
"(lambda(p_252)"
"(cons"
"(+ mend_251(car p_252))"
"(+ mend_251(cdr p_252))))"
"(loop_245"
" '()"
" 0"
"(if end_248(- end_248 mend_251) #f)))"
"(cons(car ms_249) acc_246))))"
"(lambda(acc_253 new-start_254 new-end_255)"
"(loop_200"
" acc_253"
" new-start_254"
" new-end_255"
" ipre_230"
" 0-ok?_236))"
" acc_201"
" start_202"
" end_203"
" m_229)"
"(loop_200"
"((lambda(start_256 ms_257 acc_258)"
"(cons(car ms_257) acc_258))"
" start_202"
" m_229"
" acc_201)"
" mend_235"
" end_203"
" ipre_230"
" 0-ok?_236)))))))))))"
" loop_200)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t)))))))"
"(let-values(((string_259)"
"(if(path? string_185)"
"(if(let-values(((or-part_260)(string? pattern_184)))"
"(if or-part_260 or-part_260(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_261)"
"(if(string? string_259)"
"(let-values()(string-length string_259))"
"(if(bytes? string_259)"
"(let-values()(bytes-length string_259))"
"(let-values() #f)))))"
"(let-values(((orig-rx_262)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_263)(regexp-max-lookbehind orig-rx_262)))"
"(begin"
"(if(let-values(((or-part_264) len_261))"
"(if or-part_264 or-part_264(input-port? string_259)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c string? bytes? path? input-port?)\""
" string_259)))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_265)(not end_187)))"
"(if or-part_265"
" or-part_265"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_266)(input-port? string_259)))"
"(if or-part_266 or-part_266(if len_261(<= start_186 len_261) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_261)"
" start_186)))"
"(if(let-values(((or-part_267)(not end_187)))"
"(if or-part_267"
" or-part_267"
"(if(<= start_186 end_187)"
"(let-values(((or-part_268)(input-port? string_259)))"
"(if or-part_268 or-part_268(if len_261(<= end_187 len_261) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_261)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_269)"
"(lambda(acc_270 start_271 end_272 ipre_273 0-ok?_274)"
"(let-values(((rx_275)"
"(if 0-ok?_274"
" orig-rx_262"
"(no-empty-edge-matches"
" orig-rx_262"
"(add1(bytes-length ipre_273))))))"
"(let-values(((m_298 ipre_299)"
"(regexp-match-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" #f"
" ipre_273"
" max-lookbehind_263)))"
"(if(not m_298)"
"((lambda(acc_300 start_301 end_302) acc_300)"
" acc_270"
" start_271"
" end_272)"
"(let-values(((mstart_303)(caar m_298)))"
"(let-values(((mend_304)(cdar m_298)))"
"(let-values(((0-ok?_305)(not(= mstart_303 mend_304))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mend)(#%app cdar ms)))"
"(let-values(((rest)"
"(#%app"
" loop"
" '()"
" '0"
"(if end"
"(#%app - end mend)"
" '#f))))"
"(let-values(((s)"
"(#%app match-select ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(if(let-values(((or-part)"
"(if(#%app"
" pair?"
" s)"
"(#%app"
" exact-integer?"
"(#%app car s))"
" '#f)))"
"(if or-part"
" or-part"
"(#%app not s)))"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app + mend(#%app cdr p))))"
"(lambda(ps)"
"(#%app"
" map"
"(lambda(p)"
"(if p"
"(#%app"
" cons"
"(#%app"
" +"
" mend"
"(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p)))"
" '#f))"
" ps)))"
" rest)"
"(#%app cons s acc))))))"
"(input-port? string_259)"
" #f)"
"((lambda(loop_318 acc_319 start_320 end_321 ms_322)"
"(let-values(((mend_323)(cdar ms_322)))"
"(let-values(((rest_324)"
"(loop_318"
" '()"
" 0"
"(if end_321"
"(- end_321 mend_323)"
" #f))))"
"(let-values(((s_325)"
"(match-select_189 ms_322)))"
"(append"
"(map2"
"(if(let-values(((or-part_326)"
"(if(pair? s_325)"
"(exact-integer?"
"(car s_325))"
" #f)))"
"(if or-part_326"
" or-part_326"
"(not s_325)))"
"(lambda(p_327)"
"(cons"
"(+ mend_323(car p_327))"
"(+ mend_323(cdr p_327))))"
"(lambda(ps_328)"
"(map2"
"(lambda(p_329)"
"(if p_329"
"(cons"
"(+ mend_323(car p_329))"
"(+ mend_323(cdr p_329)))"
" #f))"
" ps_328)))"
" rest_324)"
"(cons s_325 acc_319))))))"
"(lambda(acc_330 new-start_331 new-end_332)"
"(loop_269"
" acc_330"
" new-start_331"
" new-end_332"
" ipre_299"
" 0-ok?_305))"
" acc_270"
" start_271"
" end_272"
" m_298)"
"(loop_269"
"((lambda(start_333 ms_334 acc_335)"
"(cons(match-select_189 ms_334) acc_335))"
" start_271"
" m_298"
" acc_270)"
" mend_304"
" end_272"
" ipre_299"
" 0-ok?_305)))))))))))"
" loop_269)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t))))))))))))))))))"
"(define-values"
"(unpack34.1$1)"
"(lambda(given-kws_336"
" given-args_337"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)"
"(let-values(((match-select24_346)(pair? given-kws_336)))"
"(let-values(((match-select23_347)(if match-select24_346(car given-args_337)(void))))"
"(regexp-match-positions*33.1"
" match-select23_347"
" match-select24_346"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)))))"
"(define-values"
"(regexp-match-peek-positions*46.1)"
"(lambda(match-select36_389"
" match-select37_390"
" pattern44_391"
" string45_392"
" start38_393"
" end39_394"
" ipre40_395"
" start41_396"
" end42_397"
" ipre43_398)"
"(let-values(((pattern_399) pattern44_391))"
"(let-values(((string_400) string45_392))"
"(let-values(((start_401)(if start41_396 start38_393 0)))"
"(let-values(((end_402)(if end42_397 end39_394 #f)))"
"            (let-values (((ipre_403) (if ipre43_398 ipre40_395 #\"\")))"
"(let-values(((match-select_404)(if match-select37_390 match-select36_389 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_404)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'regexp-match-peek-positions* \"procedure?\" match-select_404)))"
"(if(eq? match-select_404 car)"
"(let-values(((string_405)"
"(if(path? string_400)"
"(if(let-values(((or-part_406)(string? pattern_399)))"
"(if or-part_406 or-part_406(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_407)"
"(if(string? string_405)"
"(let-values()(string-length string_405))"
"(if(bytes? string_405)"
"(let-values()(bytes-length string_405))"
"(let-values() #f)))))"
"(let-values(((orig-rx_408)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_409)(regexp-max-lookbehind orig-rx_408)))"
"(begin"
"(if(input-port? string_405)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_405)))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_411)(not end_402)))"
"(if or-part_411"
" or-part_411"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_412)(input-port? string_405)))"
"(if or-part_412 or-part_412(if len_407(<= start_401 len_407) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_407)"
" start_401)))"
"(if(let-values(((or-part_413)(not end_402)))"
"(if or-part_413"
" or-part_413"
"(if(<= start_401 end_402)"
"(let-values(((or-part_414)(input-port? string_405)))"
"(if or-part_414 or-part_414(if len_407(<= end_402 len_407) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_407)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_415)"
"(lambda(acc_416 start_417 end_418 ipre_419 0-ok?_420)"
"(let-values(((rx_421)"
"(if 0-ok?_420"
" orig-rx_408"
"(no-empty-edge-matches"
" orig-rx_408"
"(add1(bytes-length ipre_419))))))"
"(let-values(((m_444 ipre_445)"
"(regexp-match-peek-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" #f"
" ipre_419"
" max-lookbehind_409)))"
"(if(not m_444)"
"((lambda(acc_446 start_447 end_448) acc_446)"
" acc_416"
" start_417"
" end_418)"
"(let-values(((mstart_449)(caar m_444)))"
"(let-values(((mend_450)(cdar m_444)))"
"(let-values(((0-ok?_451)(not(= mstart_449 mend_450))))"
"(loop_415"
"((lambda(start_455 ms_456 acc_457)"
"(cons(car ms_456) acc_457))"
" start_417"
" m_444"
" acc_416)"
" mend_450"
" end_418"
" ipre_445"
" 0-ok?_451))))))))))"
" loop_415)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t)))))))"
"(let-values(((string_458)"
"(if(path? string_400)"
"(if(let-values(((or-part_459)(string? pattern_399)))"
"(if or-part_459 or-part_459(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_460)"
"(if(string? string_458)"
"(let-values()(string-length string_458))"
"(if(bytes? string_458)"
"(let-values()(bytes-length string_458))"
"(let-values() #f)))))"
"(let-values(((orig-rx_461)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_462)(regexp-max-lookbehind orig-rx_461)))"
"(begin"
"(if(input-port? string_458)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_458)))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_464)(not end_402)))"
"(if or-part_464"
" or-part_464"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_465)(input-port? string_458)))"
"(if or-part_465 or-part_465(if len_460(<= start_401 len_460) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_460)"
" start_401)))"
"(if(let-values(((or-part_466)(not end_402)))"
"(if or-part_466"
" or-part_466"
"(if(<= start_401 end_402)"
"(let-values(((or-part_467)(input-port? string_458)))"
"(if or-part_467 or-part_467(if len_460(<= end_402 len_460) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_460)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_468)"
"(lambda(acc_469 start_470 end_471 ipre_472 0-ok?_473)"
"(let-values(((rx_474)"
"(if 0-ok?_473"
" orig-rx_461"
"(no-empty-edge-matches"
" orig-rx_461"
"(add1(bytes-length ipre_472))))))"
"(let-values(((m_497 ipre_498)"
"(regexp-match-peek-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" #f"
" ipre_472"
" max-lookbehind_462)))"
"(if(not m_497)"
"((lambda(acc_499 start_500 end_501) acc_499)"
" acc_469"
" start_470"
" end_471)"
"(let-values(((mstart_502)(caar m_497)))"
"(let-values(((mend_503)(cdar m_497)))"
"(let-values(((0-ok?_504)(not(= mstart_502 mend_503))))"
"(loop_468"
"((lambda(start_508 ms_509 acc_510)"
"(cons(match-select_404 ms_509) acc_510))"
" start_470"
" m_497"
" acc_469)"
" mend_503"
" end_471"
" ipre_498"
" 0-ok?_504))))))))))"
" loop_468)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t))))))))))))))))))"
"(define-values"
"(unpack47.1)"
"(lambda(given-kws_511"
" given-args_512"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)"
"(let-values(((match-select37_521)(pair? given-kws_511)))"
"(let-values(((match-select36_522)(if match-select37_521(car given-args_512)(void))))"
"(regexp-match-peek-positions*46.1"
" match-select36_522"
" match-select37_521"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)))))"
"(define-values"
"(get-buf+sub)"
"(lambda(string_564 pattern_565)"
"(let-values(((buf_566)"
"(if(if(string? string_564)"
"(let-values(((or-part_567)(byte-regexp? pattern_565)))"
"(if or-part_567 or-part_567(bytes? pattern_565)))"
" #f)"
"(string->bytes/utf-8 string_564(char->integer '#\\?))"
" string_564)))"
"(values"
" buf_566"
"(if(let-values(((or-part_568)(bytes? buf_566)))"
"(if or-part_568"
" or-part_568"
"(if(path? string_564)"
"(let-values(((or-part_569)(bytes? pattern_565)))"
"(if or-part_569 or-part_569(byte-regexp? pattern_565)))"
" #f)))"
" subbytes"
" substring)))))"
"(define-values"
"(regexp-split)"
"(let-values(((regexp-split57_570)"
"(lambda(pattern55_571 string56_572 start49_573 end50_574 ipre51_575 start52_576 end53_577 ipre54_578)"
"(let-values(((pattern_579) pattern55_571))"
"(let-values(((string_580) string56_572))"
"(let-values(((start_581)(if start52_576 start49_573 0)))"
"(let-values(((end_582)(if end53_577 end50_574 #f)))"
"                          (let-values (((ipre_583) (if ipre54_578 ipre51_575 #\"\")))"
"(let-values()"
"(let-values(((buf_584 sub_585)(get-buf+sub string_580 pattern_579)))"
"(let-values(((buf_586)"
"(if(path? buf_584)"
"(if(let-values(((or-part_587)(string? pattern_579)))"
"(if or-part_587 or-part_587(regexp? pattern_579)))"
"(path->string buf_584)"
"(path->bytes buf_584))"
" buf_584)))"
"(let-values(((len_588)"
"(if(string? buf_586)"
"(let-values()(string-length buf_586))"
"(if(bytes? buf_586)"
"(let-values()(bytes-length buf_586))"
"(let-values() #f)))))"
"(let-values(((orig-rx_589)"
"(if(bytes? pattern_579)"
"(let-values()(byte-regexp pattern_579))"
"(if(string? pattern_579)"
"(let-values()(regexp pattern_579))"
"(if(regexp? pattern_579)"
"(let-values() pattern_579)"
"(if(byte-regexp? pattern_579)"
"(let-values() pattern_579)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_579))))))))"
"(let-values(((max-lookbehind_590)(regexp-max-lookbehind orig-rx_589)))"
"(begin"
"(if(let-values(((or-part_591) len_588))"
"(if or-part_591 or-part_591(input-port? buf_586)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"(or/c string? bytes? path? input-port?)\""
" buf_586)))"
"(if(if(number? start_581)"
"(if(exact? start_581)(if(integer? start_581)(>= start_581 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"exact-nonnegative-integer?\""
" start_581)))"
"(if(let-values(((or-part_592)(not end_582)))"
"(if or-part_592"
" or-part_592"
"(if(number? end_582)"
"(if(exact? end_582)(if(integer? end_582)(>= end_582 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_582)))"
"(if(bytes? ipre_583)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-split \"bytes?\" ipre_583)))"
"(if(let-values(((or-part_593)(input-port? buf_586)))"
"(if or-part_593 or-part_593(if len_588(<= start_581 len_588) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"starting offset index out of range [0,~a]: \" len_588)"
" start_581)))"
"(if(let-values(((or-part_594)(not end_582)))"
"(if or-part_594"
" or-part_594"
"(if(<= start_581 end_582)"
"(let-values(((or-part_595)(input-port? buf_586)))"
"(if or-part_595 or-part_595(if len_588(<= end_582 len_588) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_581 len_588)"
" end_582)))"
"(reverse"
"((letrec-values(((loop_596)"
"(lambda(acc_597 start_598 end_599 ipre_600 0-ok?_601)"
"(let-values(((rx_602)"
"(if 0-ok?_601"
" orig-rx_589"
"(no-empty-edge-matches"
" orig-rx_589"
"(add1(bytes-length ipre_600))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons leftovers acc))"
"(input-port? buf_586)"
" #f)"
"(let-values(((__606)"
"(if(positive? start_598)"
"(let-values()"
"(let-values(((s_607)"
"(make-bytes 4096)))"
"((letrec-values(((loop_608)"
"(lambda(n_609)"
"(if(="
" n_609"
" start_598)"
"(void)"
"(let-values()"
"(let-values(((m_610)"
"(read-bytes-avail!"
" s_607"
" buf_586"
" 0"
"(min"
"(-"
" start_598"
" n_609)"
" 4096))))"
"(if(eof-object?"
" m_610)"
"(void)"
"(let-values()"
"(loop_608"
"(+"
" n_609"
" m_610))))))))))"
" loop_608)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_611) #f))"
"(let-values(((spitout_612)(open-output-bytes)))"
"(let-values(((end_619)"
"(if end_599"
"(- end_599 start_598)"
" #f)))"
"(let-values(((ms_620 ipre_621)"
"(regexp-match/end"
" rx_602"
" buf_586"
" 0"
" end_619"
" spitout_612"
" ipre_600"
" max-lookbehind_590)))"
"(let-values(((m_622)"
"(if ms_620(car ms_620) #f)))"
"(let-values(((discarded/leftovers_623)"
"(get-output-bytes"
" spitout_612)))"
"(let-values(((skipped_624)"
"(bstring-length"
" discarded/leftovers_623)))"
"(let-values(((got_625)"
"(if m_622"
"(bstring-length"
" m_622)"
" #f)))"
"(let-values(((end_626)"
"(if end_619"
"(if m_622"
"(-"
" end_619"
" skipped_624"
" got_625)"
" #f)"
" #f)))"
"(if m_622"
"(let-values(((0-ok?_627)"
"(not"
"(zero?"
" got_625))))"
"(loop_596"
"((lambda(leftovers_628"
" ms_629"
" acc_630)"
"(cons"
" leftovers_628"
" acc_630))"
" discarded/leftovers_623"
" ms_620"
" acc_597)"
" 0"
" end_626"
" ipre_621"
" 0-ok?_627))"
"((lambda(acc_631 leftover_632)"
"(if leftover_632"
"(cons"
" leftover_632"
" acc_631)"
" acc_631))"
" acc_597"
" discarded/leftovers_623))))))))))))"
"(let-values(((m_633 ipre_634)"
"(regexp-match-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" #f"
" ipre_600"
" max-lookbehind_590)))"
"(if(not m_633)"
"((lambda(acc_635 start_636 end_637)"
"(cons"
"(if end_637"
"(sub_585 buf_586 start_636 end_637)"
"(sub_585 buf_586 start_636))"
" acc_635))"
" acc_597"
" start_598"
" end_599)"
"(let-values(((mstart_638)(caar m_633)))"
"(let-values(((mend_639)(cdar m_633)))"
"(let-values(((0-ok?_640)"
"(not(= mstart_638 mend_639))))"
"(loop_596"
"((lambda(start_644 ms_645 acc_646)"
"(cons"
"(sub_585"
" buf_586"
" start_644"
"(caar ms_645))"
" acc_646))"
" start_598"
" m_633"
" acc_597)"
" mend_639"
" end_599"
" ipre_634"
" 0-ok?_640)))))))))))"
" loop_596)"
" '()"
" start_581"
" end_582"
" ipre_583"
" #t)))))))))))))))))"
"(case-lambda"
"((pattern_647 string_648)(regexp-split57_570 pattern_647 string_648 #f #f #f #f #f #f))"
"((pattern_649 string_650 start_651 end_652 ipre51_653)"
"(regexp-split57_570 pattern_649 string_650 start_651 end_652 ipre51_653 #t #t #t))"
"((pattern_654 string_655 start_656 end50_657)"
"(regexp-split57_570 pattern_654 string_655 start_656 end50_657 #f #t #t #f))"
"((pattern_658 string_659 start49_660)(regexp-split57_570 pattern_658 string_659 start49_660 #f #f #t #f #f)))))"
"(define-values"
"(regexp-match*71.1)"
"(lambda(gap-select?60_796"
" gap-select?62_797"
" match-select59_798"
" match-select61_799"
" pattern69_800"
" string70_801"
" start63_802"
" end64_803"
" ipre65_804"
" start66_805"
" end67_806"
" ipre68_807)"
"(let-values(((pattern_808) pattern69_800))"
"(let-values(((string_809) string70_801))"
"(let-values(((start_810)(if start66_805 start63_802 0)))"
"(let-values(((end_811)(if end67_806 end64_803 #f)))"
"            (let-values (((ipre_812) (if ipre68_807 ipre65_804 #\"\")))"
"(let-values(((match-select_813)(if match-select61_799 match-select59_798 car)))"
"(let-values(((gap-select_814)(if gap-select?62_797 gap-select?60_796 #f)))"
"(let-values()"
"(if(if(not match-select_813)(not gap-select_814) #f)"
"(let-values()"
"(raise"
"(exn:fail:contract"
"                          \"regexp-match*: one of `match-select' or `gap-select' must be non-#f\""
"(current-continuation-marks))))"
"(if(not match-select_813)"
"(let-values()(regexp-split pattern_808 string_809 start_810 end_811 ipre_812))"
"(if(not(procedure? match-select_813))"
"                          (let-values () (raise-argument-error 'regexp-match* \"(or/c procedure? #f)\" match-select_813))"
"(if(not(eq? match-select_813 car))"
"(let-values()"
"(let-values(((buf_815 sub_816)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_817)"
"(if(path? buf_815)"
"(if(let-values(((or-part_818)(string? pattern_808)))"
"(if or-part_818 or-part_818(regexp? pattern_808)))"
"(path->string buf_815)"
"(path->bytes buf_815))"
" buf_815)))"
"(let-values(((len_819)"
"(if(string? buf_817)"
"(let-values()(string-length buf_817))"
"(if(bytes? buf_817)"
"(let-values()(bytes-length buf_817))"
"(let-values() #f)))))"
"(let-values(((orig-rx_820)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_821)(regexp-max-lookbehind orig-rx_820)))"
"(begin"
"(if(let-values(((or-part_822) len_819))"
"(if or-part_822 or-part_822(input-port? buf_817)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"(or/c string? bytes? path? input-port?)\""
" buf_817)))"
"(if(if(number? start_810)"
"(if(exact? start_810)(if(integer? start_810)(>= start_810 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_823)(not end_811)))"
"(if or-part_823"
" or-part_823"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_824)(input-port? buf_817)))"
"(if or-part_824 or-part_824(if len_819(<= start_810 len_819) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"starting offset index out of range [0,~a]: \" len_819)"
" start_810)))"
"(if(let-values(((or-part_825)(not end_811)))"
"(if or-part_825"
" or-part_825"
"(if(<= start_810 end_811)"
"(let-values(((or-part_826)(input-port? buf_817)))"
"(if or-part_826 or-part_826(if len_819(<= end_811 len_819) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_810 len_819)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_827)"
"(lambda(acc_828 start_829 end_830 ipre_831 0-ok?_832)"
"(let-values(((rx_833)"
"(if 0-ok?_832"
" orig-rx_820"
"(no-empty-edge-matches"
" orig-rx_820"
"(add1(bytes-length ipre_831))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app match-select ms)"
"(if gap-select"
"(#%app cons leftovers acc)"
" acc)))"
"(input-port? buf_817)"
" #f)"
"(let-values(((__837)"
"(if(positive? start_829)"
"(let-values()"
"(let-values(((s_838)"
"(make-bytes 4096)))"
"((letrec-values(((loop_839)"
"(lambda(n_840)"
"(if(="
" n_840"
" start_829)"
"(void)"
"(let-values()"
"(let-values(((m_841)"
"(read-bytes-avail!"
" s_838"
" buf_817"
" 0"
"(min"
"(-"
" start_829"
" n_840)"
" 4096))))"
"(if(eof-object?"
" m_841)"
"(void)"
"(let-values()"
"(loop_839"
"(+"
" n_840"
" m_841))))))))))"
" loop_839)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_842)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_843)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_844"
" start_845"
" end_846"
" flush?_847"
" breakable?_848)"
"(let-values(((c_849)"
"(-"
" end_846"
" start_845)))"
"(begin"
"(set! discarded/leftovers_842"
"(+"
" c_849"
" discarded/leftovers_842))"
" c_849)))"
" void))))"
"(let-values(((end_850)"
"(if end_830"
"(- end_830 start_829)"
" #f)))"
"(let-values(((ms_851 ipre_852)"
"(regexp-match/end"
" rx_833"
" buf_817"
" 0"
" end_850"
" spitout_843"
" ipre_831"
" max-lookbehind_821)))"
"(let-values(((m_853)"
"(if ms_851(car ms_851) #f)))"
"(let-values(((discarded/leftovers_854)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_843)"
" discarded/leftovers_842)))"
"(let-values(((skipped_855)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_854)"
" discarded/leftovers_854)))"
"(let-values(((got_856)"
"(if m_853"
"(bstring-length"
" m_853)"
" #f)))"
"(let-values(((end_857)"
"(if end_850"
"(if m_853"
"(-"
" end_850"
" skipped_855"
" got_856)"
" #f)"
" #f)))"
"(if m_853"
"(let-values(((0-ok?_858)"
"(not"
"(zero?"
" got_856))))"
"(loop_827"
"((lambda(leftovers_859"
" ms_860"
" acc_861)"
"(cons"
"(match-select_813"
" ms_860)"
"(if gap-select_814"
"(cons"
" leftovers_859"
" acc_861)"
" acc_861)))"
" discarded/leftovers_854"
" ms_851"
" acc_828)"
" 0"
" end_857"
" ipre_852"
" 0-ok?_858))"
"((lambda(acc_862 leftover_863)"
"(if(if gap-select_814"
" leftover_863"
" #f)"
"(cons"
" leftover_863"
" acc_862)"
" acc_862))"
" acc_828"
" discarded/leftovers_854))))))))))))"
"(let-values(((m_864 ipre_865)"
"(regexp-match-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" #f"
" ipre_831"
" max-lookbehind_821)))"
"(if(not m_864)"
"((lambda(acc_866 start_867 end_868)"
"(if gap-select_814"
"(cons"
"(if end_868"
"(sub_816 buf_817 start_867 end_868)"
"(sub_816 buf_817 start_867))"
" acc_866)"
" acc_866))"
" acc_828"
" start_829"
" end_830)"
"(let-values(((mstart_869)(caar m_864)))"
"(let-values(((mend_870)(cdar m_864)))"
"(let-values(((0-ok?_871)"
"(not(= mstart_869 mend_870))))"
"(loop_827"
"((lambda(start_875 ms_876 acc_877)"
"(cons"
"(let-values(((s_878)"
"(match-select_813"
" ms_876)))"
"(if(not(pair? s_878))"
"(let-values() s_878)"
"(if(integer?(car s_878))"
"(let-values()"
"(sub_816"
" buf_817"
"(car s_878)"
"(cdr s_878)))"
"(let-values()"
"(map2"
"(lambda(m_879)"
"(if m_879"
"(sub_816"
" buf_817"
"(car m_879)"
"(cdr m_879))"
" #f))"
" s_878)))))"
"(if gap-select_814"
"(cons"
"(sub_816"
" buf_817"
" start_875"
"(caar ms_876))"
" acc_877)"
" acc_877)))"
" start_829"
" m_864"
" acc_828)"
" mend_870"
" end_830"
" ipre_865"
" 0-ok?_871)))))))))))"
" loop_827)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(if gap-select_814"
"(let-values()"
"(let-values(((buf_880 sub_881)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_882)"
"(if(path? buf_880)"
"(if(let-values(((or-part_883)(string? pattern_808)))"
"(if or-part_883 or-part_883(regexp? pattern_808)))"
"(path->string buf_880)"
"(path->bytes buf_880))"
" buf_880)))"
"(let-values(((len_884)"
"(if(string? buf_882)"
"(let-values()(string-length buf_882))"
"(if(bytes? buf_882)"
"(let-values()(bytes-length buf_882))"
"(let-values() #f)))))"
"(let-values(((orig-rx_885)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_886)(regexp-max-lookbehind orig-rx_885)))"
"(begin"
"(if(let-values(((or-part_887) len_884))"
"(if or-part_887 or-part_887(input-port? buf_882)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_882)))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_888)(not end_811)))"
"(if or-part_888"
" or-part_888"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_889)(input-port? buf_882)))"
"(if or-part_889 or-part_889(if len_884(<= start_810 len_884) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_884)"
" start_810)))"
"(if(let-values(((or-part_890)(not end_811)))"
"(if or-part_890"
" or-part_890"
"(if(<= start_810 end_811)"
"(let-values(((or-part_891)(input-port? buf_882)))"
"(if or-part_891"
" or-part_891"
"(if len_884(<= end_811 len_884) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_884)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_892)"
"(lambda(acc_893 start_894 end_895 ipre_896 0-ok?_897)"
"(let-values(((rx_898)"
"(if 0-ok?_897"
" orig-rx_885"
"(no-empty-edge-matches"
" orig-rx_885"
"(add1(bytes-length ipre_896))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app car ms)"
"(#%app cons leftovers acc)))"
"(input-port? buf_882)"
" #f)"
"(let-values(((__902)"
"(if(positive? start_894)"
"(let-values()"
"(let-values(((s_903)"
"(make-bytes 4096)))"
"((letrec-values(((loop_904)"
"(lambda(n_905)"
"(if(="
" n_905"
" start_894)"
"(void)"
"(let-values()"
"(let-values(((m_906)"
"(read-bytes-avail!"
" s_903"
" buf_882"
" 0"
"(min"
"(-"
" start_894"
" n_905)"
" 4096))))"
"(if(eof-object?"
" m_906)"
"(void)"
"(let-values()"
"(loop_904"
"(+"
" n_905"
" m_906))))))))))"
" loop_904)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_907)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_908)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_909"
" start_910"
" end_911"
" flush?_912"
" breakable?_913)"
"(let-values(((c_914)"
"(-"
" end_911"
" start_910)))"
"(begin"
"(set! discarded/leftovers_907"
"(+"
" c_914"
" discarded/leftovers_907))"
" c_914)))"
" void))))"
"(let-values(((end_915)"
"(if end_895"
"(- end_895 start_894)"
" #f)))"
"(let-values(((ms_916 ipre_917)"
"(regexp-match/end"
" rx_898"
" buf_882"
" 0"
" end_915"
" spitout_908"
" ipre_896"
" max-lookbehind_886)))"
"(let-values(((m_918)"
"(if ms_916"
"(car ms_916)"
" #f)))"
"(let-values(((discarded/leftovers_919)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_908)"
" discarded/leftovers_907)))"
"(let-values(((skipped_920)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_919)"
" discarded/leftovers_919)))"
"(let-values(((got_921)"
"(if m_918"
"(bstring-length"
" m_918)"
" #f)))"
"(let-values(((end_922)"
"(if end_915"
"(if m_918"
"(-"
" end_915"
" skipped_920"
" got_921)"
" #f)"
" #f)))"
"(if m_918"
"(let-values(((0-ok?_923)"
"(not"
"(zero?"
" got_921))))"
"(loop_892"
"((lambda(leftovers_924"
" ms_925"
" acc_926)"
"(cons"
"(car ms_925)"
"(cons"
" leftovers_924"
" acc_926)))"
" discarded/leftovers_919"
" ms_916"
" acc_893)"
" 0"
" end_922"
" ipre_917"
" 0-ok?_923))"
"((lambda(acc_927"
" leftover_928)"
"(if leftover_928"
"(cons"
" leftover_928"
" acc_927)"
" acc_927))"
" acc_893"
" discarded/leftovers_919))))))))))))"
"(let-values(((m_929 ipre_930)"
"(regexp-match-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" #f"
" ipre_896"
" max-lookbehind_886)))"
"(if(not m_929)"
"((lambda(acc_931 start_932 end_933)"
"(cons"
"(if end_933"
"(sub_881 buf_882 start_932 end_933)"
"(sub_881 buf_882 start_932))"
" acc_931))"
" acc_893"
" start_894"
" end_895)"
"(let-values(((mstart_934)(caar m_929)))"
"(let-values(((mend_935)(cdar m_929)))"
"(let-values(((0-ok?_936)"
"(not"
"(= mstart_934 mend_935))))"
"(loop_892"
"((lambda(start_940 ms_941 acc_942)"
"(cons"
"(sub_881"
" buf_882"
"(caar ms_941)"
"(cdar ms_941))"
"(cons"
"(sub_881"
" buf_882"
" start_940"
"(caar ms_941))"
" acc_942)))"
" start_894"
" m_929"
" acc_893)"
" mend_935"
" end_895"
" ipre_930"
" 0-ok?_936)))))))))))"
" loop_892)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(let-values()"
"(let-values(((buf_943 sub_944)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_945)"
"(if(path? buf_943)"
"(if(let-values(((or-part_946)(string? pattern_808)))"
"(if or-part_946 or-part_946(regexp? pattern_808)))"
"(path->string buf_943)"
"(path->bytes buf_943))"
" buf_943)))"
"(let-values(((len_947)"
"(if(string? buf_945)"
"(let-values()(string-length buf_945))"
"(if(bytes? buf_945)"
"(let-values()(bytes-length buf_945))"
"(let-values() #f)))))"
"(let-values(((orig-rx_948)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_949)(regexp-max-lookbehind orig-rx_948)))"
"(begin"
"(if(let-values(((or-part_950) len_947))"
"(if or-part_950 or-part_950(input-port? buf_945)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_945)))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_951)(not end_811)))"
"(if or-part_951"
" or-part_951"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-match* \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_952)(input-port? buf_945)))"
"(if or-part_952 or-part_952(if len_947(<= start_810 len_947) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_947)"
" start_810)))"
"(if(let-values(((or-part_953)(not end_811)))"
"(if or-part_953"
" or-part_953"
"(if(<= start_810 end_811)"
"(let-values(((or-part_954)(input-port? buf_945)))"
"(if or-part_954"
" or-part_954"
"(if len_947(<= end_811 len_947) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_947)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_955)"
"(lambda(acc_956 start_957 end_958 ipre_959 0-ok?_960)"
"(let-values(((rx_961)"
"(if 0-ok?_960"
" orig-rx_948"
"(no-empty-edge-matches"
" orig-rx_948"
"(add1(bytes-length ipre_959))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons(#%app car ms) acc))"
"(input-port? buf_945)"
" #f)"
"(let-values(((__965)"
"(if(positive? start_957)"
"(let-values()"
"(let-values(((s_966)"
"(make-bytes 4096)))"
"((letrec-values(((loop_967)"
"(lambda(n_968)"
"(if(="
" n_968"
" start_957)"
"(void)"
"(let-values()"
"(let-values(((m_969)"
"(read-bytes-avail!"
" s_966"
" buf_945"
" 0"
"(min"
"(-"
" start_957"
" n_968)"
" 4096))))"
"(if(eof-object?"
" m_969)"
"(void)"
"(let-values()"
"(loop_967"
"(+"
" n_968"
" m_969))))))))))"
" loop_967)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_970) 0))"
"(let-values(((spitout_971)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_972"
" start_973"
" end_974"
" flush?_975"
" breakable?_976)"
"(let-values(((c_977)"
"(-"
" end_974"
" start_973)))"
"(begin"
"(set! discarded/leftovers_970"
"(+"
" c_977"
" discarded/leftovers_970))"
" c_977)))"
" void)))"
"(let-values(((end_978)"
"(if end_958"
"(- end_958 start_957)"
" #f)))"
"(let-values(((ms_979 ipre_980)"
"(regexp-match/end"
" rx_961"
" buf_945"
" 0"
" end_978"
" spitout_971"
" ipre_959"
" max-lookbehind_949)))"
"(let-values(((m_981)"
"(if ms_979"
"(car ms_979)"
" #f)))"
"(let-values(((discarded/leftovers_982)"
" discarded/leftovers_970))"
"(let-values(((skipped_983)"
" discarded/leftovers_982))"
"(let-values(((got_984)"
"(if m_981"
"(bstring-length"
" m_981)"
" #f)))"
"(let-values(((end_985)"
"(if end_978"
"(if m_981"
"(-"
" end_978"
" skipped_983"
" got_984)"
" #f)"
" #f)))"
"(if m_981"
"(let-values(((0-ok?_986)"
"(not"
"(zero?"
" got_984))))"
"(loop_955"
"((lambda(leftovers_987"
" ms_988"
" acc_989)"
"(cons"
"(car ms_988)"
" acc_989))"
" discarded/leftovers_982"
" ms_979"
" acc_956)"
" 0"
" end_985"
" ipre_980"
" 0-ok?_986))"
"((lambda(acc_990"
" leftover_991)"
" acc_990)"
" acc_956"
" discarded/leftovers_982))))))))))))"
"(let-values(((m_992 ipre_993)"
"(regexp-match-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" #f"
" ipre_959"
" max-lookbehind_949)))"
"(if(not m_992)"
"((lambda(acc_994 start_995 end_996) acc_994)"
" acc_956"
" start_957"
" end_958)"
"(let-values(((mstart_997)(caar m_992)))"
"(let-values(((mend_998)(cdar m_992)))"
"(let-values(((0-ok?_999)"
"(not"
"(= mstart_997 mend_998))))"
"(loop_955"
"((lambda(start_1003 ms_1004 acc_1005)"
"(cons"
"(sub_944"
" buf_945"
"(caar ms_1004)"
"(cdar ms_1004))"
" acc_1005))"
" start_957"
" m_992"
" acc_956)"
" mend_998"
" end_958"
" ipre_993"
" 0-ok?_999)))))))))))"
" loop_955)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t))))))))))))))))))))))))"
"(define-values"
"(unpack72.1)"
"(lambda(given-kws_1006"
" given-args_1007"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)"
"(let-values(((gap-select?62_1016)(if(pair? given-kws_1006)(eq? '#:gap-select?(car given-kws_1006)) #f)))"
"(let-values(((gap-select?60_1017)(if gap-select?62_1016(car given-args_1007)(void)))"
"((given-kws_1018)(if gap-select?62_1016(cdr given-kws_1006) given-kws_1006))"
"((given-args_1019)(if gap-select?62_1016(cdr given-args_1007) given-args_1007)))"
"(let-values(((match-select61_1020)(pair? given-kws_1018)))"
"(let-values(((match-select59_1021)(if match-select61_1020(car given-args_1019)(void))))"
"(regexp-match*71.1"
" gap-select?60_1017"
" gap-select?62_1016"
" match-select59_1021"
" match-select61_1020"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)))))))"
"(void)"
"(void)"
"(define-values(exists-syms) '(error append update can-update replace truncate must-truncate truncate/replace))"
"(define-values"
"(exists-desc)"
"  \"(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)\")"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values(((path_6) path5_5))"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(unpack7.1$6)"
"(lambda(given-kws_9 given-args_10 path5_11)"
"(let-values(((for-module?4_12)(if(pair? given-kws_9)(eq? '#:for-module?(car given-kws_9)) #f)))"
"(let-values(((for-module?2_13)(if for-module?4_12(car given-args_10)(void)))"
"((given-kws_14)(if for-module?4_12(cdr given-kws_9) given-kws_9))"
"((given-args_15)(if for-module?4_12(cdr given-args_10) given-args_10)))"
"(let-values(((mode3_16)(pair? given-kws_14)))"
"(let-values(((mode1_17)(if mode3_16(car given-args_15)(void))))"
"(open-input-file6.1 for-module?2_13 for-module?4_12 mode1_17 mode3_16 path5_11)))))))"
"(define-values"
"(open-input-file8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_18 given-argc_19)"
"(if(= given-argc_19 3)"
"(let-values(((l1_20) given-kws_18))"
"(let-values(((l1_21)(if(null? l1_20) l1_20(if(eq?(car l1_20) '#:for-module?)(cdr l1_20) l1_20))))"
"(let-values(((l1_22) l1_21))"
"(let-values(((l1_23)(if(null? l1_22) l1_22(if(eq?(car l1_22) '#:mode)(cdr l1_22) l1_22))))"
"(null? l1_23)))))"
" #f))"
"(case-lambda((given-kws_24 given-args_25 path_26)(unpack7.1$6 given-kws_24 given-args_25 path_26)))"
" null"
" '(#:for-module? #:mode)"
"(let-values(((open-input-file_27)(case-lambda((path_28)(unpack7.1$6 null null path_28))))) open-input-file_27)))"
"(define-values"
"(open-output-file14.1)"
"(lambda(exists10_29 exists12_30 mode9_31 mode11_32 path13_33)"
"(let-values(((path_34) path13_33))"
"(let-values(((mode_35)(if mode11_32 mode9_31 'binary)))"
"(let-values(((exists_36)(if exists12_30 exists10_29 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_34)"
"(void)"
"                (let-values () (raise-argument-error 'open-output-file \"path-string?\" path_34)))"
"(if(memq mode_35 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-output-file binary-or-text-desc mode_35)))"
"(if(memq exists_36 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-output-file exists-desc exists_36)))"
"(open-output-file path_34 mode_35 exists_36))))))))"
"(define-values"
"(unpack15.1$1)"
"(lambda(given-kws_37 given-args_38 path13_39)"
"(let-values(((exists12_40)(if(pair? given-kws_37)(eq? '#:exists(car given-kws_37)) #f)))"
"(let-values(((exists10_41)(if exists12_40(car given-args_38)(void)))"
"((given-kws_42)(if exists12_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if exists12_40(cdr given-args_38) given-args_38)))"
"(let-values(((mode11_44)(pair? given-kws_42)))"
"(let-values(((mode9_45)(if mode11_44(car given-args_43)(void))))"
"(open-output-file14.1 exists10_41 exists12_40 mode9_45 mode11_44 path13_39)))))))"
"(define-values"
"(open-input-output-file22.1)"
"(lambda(exists18_57 exists20_58 mode17_59 mode19_60 path21_61)"
"(let-values(((path_62) path21_61))"
"(let-values(((mode_63)(if mode19_60 mode17_59 'binary)))"
"(let-values(((exists_64)(if exists20_58 exists18_57 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_62)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-output-file \"path-string?\" path_62)))"
"(if(memq mode_63 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file binary-or-text-desc mode_63)))"
"(if(memq exists_64 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file exists-desc exists_64)))"
"(open-input-output-file path_62 mode_63 exists_64))))))))"
"(define-values"
"(unpack23.1$1)"
"(lambda(given-kws_65 given-args_66 path21_67)"
"(let-values(((exists20_68)(if(pair? given-kws_65)(eq? '#:exists(car given-kws_65)) #f)))"
"(let-values(((exists18_69)(if exists20_68(car given-args_66)(void)))"
"((given-kws_70)(if exists20_68(cdr given-kws_65) given-kws_65))"
"((given-args_71)(if exists20_68(cdr given-args_66) given-args_66)))"
"(let-values(((mode19_72)(pair? given-kws_70)))"
"(let-values(((mode17_73)(if mode19_72(car given-args_71)(void))))"
"(open-input-output-file22.1 exists18_69 exists20_68 mode17_73 mode19_72 path21_67)))))))"
"(define-values"
"(call-with-input-file29.1)"
"(lambda(mode25_85 mode26_86 path27_87 proc28_88)"
"(let-values(((path_89) path27_87))"
"(let-values(((proc_90) proc28_88))"
"(let-values(((mode_91)(if mode26_86 mode25_85 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_89)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"path-string?\" path_89)))"
"(if(if(procedure? proc_90)(procedure-arity-includes? proc_90 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"(input-port? . -> . any)\" proc_90)))"
"(if(memq mode_91 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file binary-or-text-desc mode_91)))"
"(call-with-input-file path_89 proc_90 mode_91))))))))"
"(define-values"
"(unpack30.1$1)"
"(lambda(given-kws_92 given-args_93 path27_94 proc28_95)"
"(let-values(((mode26_96)(pair? given-kws_92)))"
"(let-values(((mode25_97)(if mode26_96(car given-args_93)(void))))"
"(call-with-input-file29.1 mode25_97 mode26_96 path27_94 proc28_95)))))"
"(define-values"
"(call-with-output-file38.1)"
"(lambda(exists33_109 exists35_110 mode32_111 mode34_112 path36_113 proc37_114)"
"(let-values(((path_115) path36_113))"
"(let-values(((proc_116) proc37_114))"
"(let-values(((mode_117)(if mode34_112 mode32_111 'binary)))"
"(let-values(((exists_118)(if exists35_110 exists33_109 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_115)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"path-string?\" path_115)))"
"(if(if(procedure? proc_116)(procedure-arity-includes? proc_116 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"(output-port? . -> . any)\" proc_116)))"
"(if(memq mode_117 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file binary-or-text-desc mode_117)))"
"(if(memq exists_118 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file exists-desc exists_118)))"
"(call-with-output-file path_115 proc_116 mode_117 exists_118)))))))))"
"(define-values"
"(unpack39.1$1)"
"(lambda(given-kws_119 given-args_120 path36_121 proc37_122)"
"(let-values(((exists35_123)(if(pair? given-kws_119)(eq? '#:exists(car given-kws_119)) #f)))"
"(let-values(((exists33_124)(if exists35_123(car given-args_120)(void)))"
"((given-kws_125)(if exists35_123(cdr given-kws_119) given-kws_119))"
"((given-args_126)(if exists35_123(cdr given-args_120) given-args_120)))"
"(let-values(((mode34_127)(pair? given-kws_125)))"
"(let-values(((mode32_128)(if mode34_127(car given-args_126)(void))))"
"(call-with-output-file38.1 exists33_124 exists35_123 mode32_128 mode34_127 path36_121 proc37_122)))))))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_142 mode42_143 path43_144 proc44_145)"
"(let-values(((path_146) path43_144))"
"(let-values(((proc_147) proc44_145))"
"(let-values(((mode_148)(if mode42_143 mode41_142 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_146)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"path-string?\" path_146)))"
"(if(if(procedure? proc_147)(procedure-arity-includes? proc_147 0) #f)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"(-> any)\" proc_147)))"
"(if(memq mode_148 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_148)))"
"(with-input-from-file path_146 proc_147 mode_148))))))))"
"(define-values"
"(unpack46.1)"
"(lambda(given-kws_149 given-args_150 path43_151 proc44_152)"
"(let-values(((mode42_153)(pair? given-kws_149)))"
"(let-values(((mode41_154)(if mode42_153(car given-args_150)(void))))"
"(with-input-from-file45.1 mode41_154 mode42_153 path43_151 proc44_152)))))"
"(define-values"
"(with-output-to-file54.1)"
"(lambda(exists49_166 exists51_167 mode48_168 mode50_169 path52_170 proc53_171)"
"(let-values(((path_172) path52_170))"
"(let-values(((proc_173) proc53_171))"
"(let-values(((mode_174)(if mode50_169 mode48_168 'binary)))"
"(let-values(((exists_175)(if exists51_167 exists49_166 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_172)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"path-string?\" path_172)))"
"(if(if(procedure? proc_173)(procedure-arity-includes? proc_173 0) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"(-> any)\" proc_173)))"
"(if(memq mode_174 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file binary-or-text-desc mode_174)))"
"(if(memq exists_175 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file exists-desc exists_175)))"
"(with-output-to-file path_172 proc_173 mode_174 exists_175)))))))))"
"(define-values"
"(unpack55.1)"
"(lambda(given-kws_176 given-args_177 path52_178 proc53_179)"
"(let-values(((exists51_180)(if(pair? given-kws_176)(eq? '#:exists(car given-kws_176)) #f)))"
"(let-values(((exists49_181)(if exists51_180(car given-args_177)(void)))"
"((given-kws_182)(if exists51_180(cdr given-kws_176) given-kws_176))"
"((given-args_183)(if exists51_180(cdr given-args_177) given-args_177)))"
"(let-values(((mode50_184)(pair? given-kws_182)))"
"(let-values(((mode48_185)(if mode50_184(car given-args_183)(void))))"
"(with-output-to-file54.1 exists49_181 exists51_180 mode48_185 mode50_184 path52_178 proc53_179)))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values(((path_203) path59_201))"
"(let-values(((proc_204) proc60_202))"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(define-values"
"(unpack62.1$1)"
"(lambda(given-kws_207 given-args_208 path59_209 proc60_210)"
"(let-values(((mode58_211)(pair? given-kws_207)))"
"(let-values(((mode57_212)(if mode58_211(car given-args_208)(void))))"
"(call-with-input-file*61.1 mode57_212 mode58_211 path59_209 proc60_210)))))"
"(define-values"
"(call-with-input-file*63.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_213 given-argc_214)"
"(if(= given-argc_214 4)"
"(let-values(((l1_215) given-kws_213))"
"(let-values(((l1_216)(if(null? l1_215) l1_215(if(eq?(car l1_215) '#:mode)(cdr l1_215) l1_215))))"
"(null? l1_216)))"
" #f))"
"(case-lambda"
"((given-kws_217 given-args_218 path_219 proc_220)(unpack62.1$1 given-kws_217 given-args_218 path_219 proc_220)))"
" null"
" '(#:mode)"
"(let-values(((call-with-input-file*_221)"
"(case-lambda((path_222 proc_223)(unpack62.1$1 null null path_222 proc_223)))))"
" call-with-input-file*_221)))"
"(define-values"
"(call-with-output-file*70.1)"
"(lambda(exists65_224 exists67_225 mode64_226 mode66_227 path68_228 proc69_229)"
"(let-values(((path_230) path68_228))"
"(let-values(((proc_231) proc69_229))"
"(let-values(((mode_232)(if mode66_227 mode64_226 'binary)))"
"(let-values(((exists_233)(if exists67_225 exists65_224 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_230)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"path-string?\" path_230)))"
"(if(if(procedure? proc_231)(procedure-arity-includes? proc_231 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"(output-port? . -> . any)\" proc_231)))"
"(if(memq mode_232 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* binary-or-text-desc mode_232)))"
"(if(memq exists_233 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* exists-desc exists_233)))"
"(let-values(((p_234)(open-output-file path_230 mode_232 exists_233)))"
"(dynamic-wind void(lambda()(proc_231 p_234))(lambda()(close-output-port p_234))))))))))))"
"(define-values"
"(unpack71.1)"
"(lambda(given-kws_235 given-args_236 path68_237 proc69_238)"
"(let-values(((exists67_239)(if(pair? given-kws_235)(eq? '#:exists(car given-kws_235)) #f)))"
"(let-values(((exists65_240)(if exists67_239(car given-args_236)(void)))"
"((given-kws_241)(if exists67_239(cdr given-kws_235) given-kws_235))"
"((given-args_242)(if exists67_239(cdr given-args_236) given-args_236)))"
"(let-values(((mode66_243)(pair? given-kws_241)))"
"(let-values(((mode64_244)(if mode66_243(car given-args_242)(void))))"
"(call-with-output-file*70.1 exists65_240 exists67_239 mode64_244 mode66_243 path68_237 proc69_238)))))))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(set)"
"(case-lambda"
"(() '#hash())"
"(l_71"
"(let-values(((lst_72) l_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(s_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((e_76)(unsafe-car lst_75)))"
"(let-values(((s_77)"
"(let-values(((s_78) s_74))"
"(let-values(((s_79)(let-values()(hash-set s_78 e_76 #t))))"
"(values s_79)))))"
"(for-loop_73 s_77(unsafe-cdr lst_75))))"
" s_74))))"
" for-loop_73)"
" '#hash()"
" lst_72))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() '#hasheq())"
"(l_80"
"(let-values(((lst_81) l_80))"
"(begin"
"(if(list? lst_81)(void)(let-values()(in-list lst_81)))"
"((letrec-values(((for-loop_82)"
"(lambda(s_83 lst_84)"
"(if(pair? lst_84)"
"(let-values(((e_85)(unsafe-car lst_84)))"
"(let-values(((s_86)"
"(let-values(((s_87) s_83))"
"(let-values(((s_88)(let-values()(hash-set s_87 e_85 #t))))"
"(values s_88)))))"
"(for-loop_82 s_86(unsafe-cdr lst_84))))"
" s_83))))"
" for-loop_82)"
" '#hasheq()"
" lst_81))))))"
"(define-values(seteqv)(lambda() '#hasheqv()))"
"(define-values(set?)(lambda(s_89)(hash? s_89)))"
"(define-values(set-empty?)(lambda(s_90)(zero?(hash-count s_90))))"
"(define-values(set-member?)(lambda(s_91 e_92)(hash-ref s_91 e_92 #f)))"
"(define-values(set-count)(lambda(s_93)(hash-count s_93)))"
"(define-values(set-add)(lambda(s_94 e_95)(hash-set s_94 e_95 #t)))"
"(define-values(set-remove)(lambda(s_96 e_97)(hash-remove s_96 e_97)))"
"(define-values(set-first)(lambda(s_98)(hash-iterate-key s_98(hash-iterate-first s_98))))"
"(define-values(subset?)(lambda(s1_99 s2_100)(hash-keys-subset? s1_99 s2_100)))"
"(define-values"
"(set=?)"
"(lambda(s1_101 s2_102)(if(=(hash-count s1_101)(hash-count s2_102))(hash-keys-subset? s1_101 s2_102) #f)))"
"(define-values"
"(set-subtract)"
"(lambda(s1_103 s2_104)"
"(let-values(((ht_105) s2_104))"
"(begin"
"(if((lambda(ht_106)(if(hash? ht_106)(immutable? ht_106) #f)) ht_105)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_105)))"
"((letrec-values(((for-loop_107)"
"(lambda(s1_108 i_109)"
"(if i_109"
"(let-values(((k_110)(unsafe-immutable-hash-iterate-key ht_105 i_109)))"
"(let-values(((s1_111)"
"(let-values(((s1_112) s1_108))"
"(let-values(((s1_113)(let-values()(hash-remove s1_112 k_110))))"
"(values s1_113)))))"
"(for-loop_107 s1_111(unsafe-immutable-hash-iterate-next ht_105 i_109))))"
" s1_108))))"
" for-loop_107)"
" s1_103"
"(unsafe-immutable-hash-iterate-first ht_105))))))"
"(define-values"
"(set-union)"
"(lambda(s1_114 s2_115)"
"(if(<(set-count s1_114)(set-count s2_115))"
"(set-union s2_115 s1_114)"
"(let-values(((ht_116) s2_115))"
"(begin"
"(if((lambda(ht_117)(if(hash? ht_117)(immutable? ht_117) #f)) ht_116)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_116)))"
"((letrec-values(((for-loop_118)"
"(lambda(s1_119 i_120)"
"(if i_120"
"(let-values(((k_121)(unsafe-immutable-hash-iterate-key ht_116 i_120)))"
"(let-values(((s1_122)"
"(let-values(((s1_123) s1_119))"
"(let-values(((s1_124)(let-values()(hash-set s1_123 k_121 #t))))"
"(values s1_124)))))"
"(for-loop_118 s1_122(unsafe-immutable-hash-iterate-next ht_116 i_120))))"
" s1_119))))"
" for-loop_118)"
" s1_114"
"(unsafe-immutable-hash-iterate-first ht_116)))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_125 s2_126)"
"(if(<(set-count s1_125)(set-count s2_126))"
"(set-union s2_126 s1_125)"
"(let-values(((ht_127) s2_126))"
"(begin"
"(if((lambda(ht_128)(if(hash? ht_128)(immutable? ht_128) #f)) ht_127)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_127)))"
"((letrec-values(((for-loop_129)"
"(lambda(s_130 i_131)"
"(if i_131"
"(let-values(((k_132)(unsafe-immutable-hash-iterate-key ht_127 i_131)))"
"(let-values(((s_133)"
"(let-values(((s_134) s_130))"
"(let-values(((s_135)"
"(let-values()"
"(if(hash-ref s1_125 k_132 #f)"
" s_134"
"(hash-remove s_134 k_132)))))"
"(values s_135)))))"
"(for-loop_129 s_133(unsafe-immutable-hash-iterate-next ht_127 i_131))))"
" s_130))))"
" for-loop_129)"
" s2_126"
"(unsafe-immutable-hash-iterate-first ht_127)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_136 pred_137 empty-y-set_138 empty-n-set_139)"
"(let-values(((ht_140) s_136))"
"(begin"
"(if((lambda(ht_141)(if(hash? ht_141)(immutable? ht_141) #f)) ht_140)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_140)))"
"((letrec-values(((for-loop_142)"
"(lambda(y_143 n_144 i_145)"
"(if i_145"
"(let-values(((v_146)(unsafe-immutable-hash-iterate-key ht_140 i_145)))"
"(let-values(((y_147 n_148)"
"(let-values(((y_149) y_143)((n_150) n_144))"
"(let-values(((y_151 n_152)"
"(let-values()"
"(if(pred_137 v_146)"
"(values(set-add y_149 v_146) n_150)"
"(values y_149(set-add n_150 v_146))))))"
"(values y_151 n_152)))))"
"(for-loop_142 y_147 n_148(unsafe-immutable-hash-iterate-next ht_140 i_145))))"
"(values y_143 n_144)))))"
" for-loop_142)"
" empty-y-set_138"
" empty-n-set_139"
"(unsafe-immutable-hash-iterate-first ht_140))))))"
"(define-values"
"(set->list)"
"(lambda(s_153)"
"(alt-reverse"
"(let-values(((ht_154) s_153))"
"(begin"
"(if((lambda(ht_155)(if(hash? ht_155)(immutable? ht_155) #f)) ht_154)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_154)))"
"((letrec-values(((for-loop_156)"
"(lambda(fold-var_157 i_158)"
"(if i_158"
"(let-values(((k_159)(unsafe-immutable-hash-iterate-key ht_154 i_158)))"
"(let-values(((fold-var_160)"
"(let-values(((fold-var_161) fold-var_157))"
"(let-values(((fold-var_162)"
"(let-values()"
"(cons(let-values() k_159) fold-var_161))))"
"(values fold-var_162)))))"
"(for-loop_156 fold-var_160(unsafe-immutable-hash-iterate-next ht_154 i_158))))"
" fold-var_157))))"
" for-loop_156)"
" null"
"(unsafe-immutable-hash-iterate-first ht_154)))))))"
"(define-values"
"(list->set)"
"(lambda(l_163)"
"(let-values(((lst_164) l_163))"
"(begin"
"(if(list? lst_164)(void)(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(table_166 lst_167)"
"(if(pair? lst_167)"
"(let-values(((k_168)(unsafe-car lst_167)))"
"(let-values(((table_169)"
"(let-values(((table_170) table_166))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((key_172 val_173)"
"(let-values()"
"(values(let-values() k_168) #t))))"
"(hash-set table_170 key_172 val_173)))))"
"(values table_171)))))"
"(for-loop_165 table_169(unsafe-cdr lst_167))))"
" table_166))))"
" for-loop_165)"
" '#hash()"
" lst_164)))))"
"(define-values"
"(list->seteq)"
"(lambda(l_174)"
"(let-values(((lst_175) l_174))"
"(begin"
"(if(list? lst_175)(void)(let-values()(in-list lst_175)))"
"((letrec-values(((for-loop_176)"
"(lambda(table_177 lst_178)"
"(if(pair? lst_178)"
"(let-values(((k_179)(unsafe-car lst_178)))"
"(let-values(((table_180)"
"(let-values(((table_181) table_177))"
"(let-values(((table_182)"
"(let-values()"
"(let-values(((key_183 val_184)"
"(let-values()"
"(values(let-values() k_179) #t))))"
"(hash-set table_181 key_183 val_184)))))"
"(values table_182)))))"
"(for-loop_176 table_180(unsafe-cdr lst_178))))"
" table_177))))"
" for-loop_176)"
" '#hasheq()"
" lst_175)))))"
"(void)"
"(void)"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(void)"
"(void)"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
"        (if (let-values (((or-part_9) (equal? (cadr v_8) \"..\")))"
"(if or-part_9"
" or-part_9"
"                (let-values (((or-part_10) (equal? (cadr v_8) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14)))"
"(let-values(((result_16)"
"(let-values(((result_17) result_13))"
"(let-values(((result_18)"
"(let-values()"
"(let-values()"
"                                                                        (let-values (((or-part_19) (equal? e_15 \"..\")))"
"(if or-part_19 or-part_19(symbol? e_15)))))))"
"(values result_18)))))"
"(if(not((lambda x_20(not result_16)) e_15))"
"(for-loop_12 result_16(unsafe-cdr lst_14))"
" result_16)))"
" result_13))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_21)"
"(let-values(((...arse-module-path.rkt:44:2_22) module-path-string?12.1)"
"((v13_23) v_21)"
"((temp14_24) #t)"
"((temp15_25) #t)"
"((temp16_26) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 temp14_24 #t temp16_26 #t #f #f temp15_25 #t v13_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:44:2_22"
" keyword-procedure-extract"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
"(list temp14_24 temp16_26 temp15_25)"
" v13_23)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_27)"
"(let-values(((temp17_28)(symbol->string v_27)))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_28)"
"(module-path-string?12.1 temp17_28)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_29)"
"(if(list? v_29)"
"(if(pair?(cdr v_29))"
"((letrec-values(((loop_30)"
"(lambda(v_31 first?_32)"
"(let-values(((or-part_33)(null? v_31)))"
"(if or-part_33"
" or-part_33"
"(if(string?(car v_31))"
"(if(let-values(((...arse-module-path.rkt:55:18_34) module-path-string?12.1)"
"((temp18_35)(car v_31))"
"((first?19_36) first?_32)"
"((first?20_37) first?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f first?20_37 #t #f #f first?19_36 #t temp18_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:55:18_34"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list first?20_37 first?19_36)"
" temp18_35)))"
"(loop_30(cdr v_31) #f)"
" #f)"
" #f))))))"
" loop_30)"
"(cdr v_29)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_39)(length v_38)))"
"(if(equal? tmp_39 1)"
"(let-values() #f)"
"(if(equal? tmp_39 2)"
"(let-values()"
"(let-values(((e_40)(cadr v_38)))"
"(if(string? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:68:12_41) module-path-string?12.1)"
"((e21_42) e_40)"
"((temp22_43) #t)"
"((temp23_44) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp23_44 #t temp22_43 #t #f #f e21_42)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:68:12_41"
" keyword-procedure-extract"
" '(#:file-end-ok? #:for-planet?)"
" 3)"
" '(#:file-end-ok? #:for-planet?)"
"(list temp23_44 temp22_43)"
" e21_42))))"
"(if(symbol? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:72:12_45) module-path-string?12.1)"
"((temp24_46)(symbol->string e_40))"
"((temp25_47) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f temp25_47 #t #f #f temp24_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:72:12_45"
" keyword-procedure-extract"
" '(#:for-planet?)"
" 3)"
" '(#:for-planet?)"
"(list temp25_47)"
" temp24_46))))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_48)(cadr v_38)))"
"(let-values(((pkg_49)(caddr v_38)))"
"(let-values(((subs_50)(cdddr v_38)))"
"(if file_48"
"(if(let-values(((...arse-module-path.rkt:80:15_51) module-path-string?12.1)"
"((file26_52) file_48)"
"((temp27_53) #t)"
"((temp28_54) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp28_54 #t #f #f temp27_53 #t file26_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:80:15_51"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list temp28_54 temp27_53)"
" file26_52)))"
"(if(if(list? pkg_49)"
"(if(<= 2(length pkg_49) 4)"
"(if(planet-user/pkg-string?(car pkg_49))"
"(if(planet-user/pkg-string?(cadr pkg_49))"
"(let-values(((or-part_55)(null?(cddr pkg_49))))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(planet-version-number?(caddr pkg_49))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(null?(cddr pkg_49))))"
"(if or-part_57"
" or-part_57"
"(planet-version-minor-spec?(cadddr pkg_49))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_58) subs_50))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((sub_62)(unsafe-car lst_61)))"
"(let-values(((result_63)"
"(let-values(((result_64) result_60))"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_66)"
" sub_62))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path-string?12.1))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_66)"
"(module-path-string?12.1"
" sub29_66)))))))"
"(values result_65)))))"
"(if(not((lambda x_67(not result_63)) sub_62))"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63)))"
" result_60))))"
" for-loop_59)"
" #t"
" lst_58)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_68)(exact-nonnegative-integer? v_68)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_69)"
"(let-values(((or-part_70)(planet-version-number? v_69)))"
"(if or-part_70"
" or-part_70"
"(if(pair? v_69)"
"(if(list? v_69)"
"(if(= 2(length v_69))"
"(let-values(((tmp_71)(car v_69)))"
"(if(if(equal? tmp_71 '=) #t(if(equal? tmp_71 '+) #t(equal? tmp_71 '-)))"
"(let-values()(planet-version-number?(cadr v_69)))"
"(let-values()(if(planet-version-number?(car v_69))(planet-version-number?(cadr v_69)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_72"
" dots-dir-ok?6_73"
" file-end-ok?4_74"
" file-end-ok?8_75"
" for-planet?1_76"
" for-planet?5_77"
" just-file-ok?3_78"
" just-file-ok?7_79"
" v9_80)"
"(let-values(((v_81) v9_80))"
"(let-values(((for-planet?_82)(if for-planet?5_77 for-planet?1_76 #f)))"
"(let-values(((dots-dir-ok?_83)(if dots-dir-ok?6_73 dots-dir-ok?2_72 #f)))"
"(let-values(((just-file-ok?_84)(if just-file-ok?7_79 just-file-ok?3_78 #f)))"
"(let-values(((file-end-ok?_85)(if file-end-ok?8_75 file-end-ok?4_74 #f)))"
"(let-values()"
"(let-values(((len_86)(string-length v_81)))"
"(if(positive? len_86)"
"(if(not(char=? '#\\/(string-ref v_81 0)))"
"(if(not(char=? '#\\/(string-ref v_81(sub1 len_86))))"
"(let-values(((start-package-version-pos_87 end-package-version-pos_88)"
"(if for-planet?_82(check-planet-part v_81 len_86)(values 0 0))))"
"(if start-package-version-pos_87"
"((letrec-values(((loop_89)"
"(lambda(i_90 prev-was-slash?_91 saw-slash?_92 saw-dot?_93)"
"(if(not(zero? i_90))"
"(let-values()"
"(let-values(((c_94)(string-ref v_81 i_90)))"
"(if(char=? c_94 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_91)"
"(loop_89(sub1 i_90) #t #t saw-dot?_93)"
" #f))"
"(if(char=? c_94 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_90) len_86)"
"(if(not(char=?(string-ref v_81(add1 i_90)) '#\\/))"
"(not(char=?(string-ref v_81(add1 i_90)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_92)"
"(loop_89(sub1 i_90) #f saw-slash?_92 #t)"
" #f)"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93)))"
"(if(let-values(((or-part_95)(plain-char? c_94)))"
"(if or-part_95"
" or-part_95"
"(if(char=? c_94 '#\\%)"
"(if(<(+ i_90 2) len_86)"
"(hex-sequence? v_81(add1 i_90))"
" #f)"
" #f)))"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(if(if(>= i_90 start-package-version-pos_87)"
"(< i_90 end-package-version-pos_88)"
" #f)"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_84)"
"(if saw-dot?_93(not saw-slash?_92) #f)"
" #f))"
"(let-values(((or-part_96) dots-dir-ok?_83))"
"(if or-part_96"
" or-part_96"
"((letrec-values(((loop_97)"
"(lambda(i_98)"
"(if(= i_98 len_86)"
"(let-values() #t)"
"(if(char=?(string-ref v_81 i_98) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_99)"
"(="
" len_86"
"(add1 i_98))))"
"(if or-part_99"
" or-part_99"
"(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\.)"
"(let-values(((or-part_100)"
"(="
" len_86"
"(+"
" i_98"
" 2))))"
"(if or-part_100"
" or-part_100"
"(char=?"
"(string-ref"
" v_81"
"(+ i_98 2))"
" '#\\/)))"
" #f))"
"(loop_97"
"((letrec-values(((loop_101)"
"(lambda(i_102)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_81"
" i_102))"
"(loop_101"
"(add1"
" i_102))"
" i_102))))"
" loop_101)"
" i_98))"
" #f)"
" #f))"
"(let-values()"
"(loop_97(add1 i_98))))))))"
" loop_97)"
" 0)))"
" #f))))))"
" loop_89)"
"(sub1 len_86)"
" #f"
"(not file-end-ok?_85)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(unpack11.1$1)"
"(lambda(given-kws_103 given-args_104 v9_105)"
"(let-values(((dots-dir-ok?6_106)(if(pair? given-kws_103)(eq? '#:dots-dir-ok?(car given-kws_103)) #f)))"
"(let-values(((dots-dir-ok?2_107)(if dots-dir-ok?6_106(car given-args_104)(void)))"
"((given-kws_108)(if dots-dir-ok?6_106(cdr given-kws_103) given-kws_103))"
"((given-args_109)(if dots-dir-ok?6_106(cdr given-args_104) given-args_104)))"
"(let-values(((file-end-ok?8_110)(if(pair? given-kws_108)(eq? '#:file-end-ok?(car given-kws_108)) #f)))"
"(let-values(((file-end-ok?4_111)(if file-end-ok?8_110(car given-args_109)(void)))"
"((given-kws_112)(if file-end-ok?8_110(cdr given-kws_108) given-kws_108))"
"((given-args_113)(if file-end-ok?8_110(cdr given-args_109) given-args_109)))"
"(let-values(((for-planet?5_114)(if(pair? given-kws_112)(eq? '#:for-planet?(car given-kws_112)) #f)))"
"(let-values(((for-planet?1_115)(if for-planet?5_114(car given-args_113)(void)))"
"((given-kws_116)(if for-planet?5_114(cdr given-kws_112) given-kws_112))"
"((given-args_117)(if for-planet?5_114(cdr given-args_113) given-args_113)))"
"(let-values(((just-file-ok?7_118)(pair? given-kws_116)))"
"(let-values(((just-file-ok?3_119)(if just-file-ok?7_118(car given-args_117)(void))))"
"(module-path-string?10.1"
" dots-dir-ok?2_107"
" dots-dir-ok?6_106"
" file-end-ok?4_111"
" file-end-ok?8_110"
" for-planet?1_115"
" for-planet?5_114"
" just-file-ok?3_119"
" just-file-ok?7_118"
" v9_105)))))))))))"
"(define-values"
"(module-path-string?12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_120 given-argc_121)"
"(if(= given-argc_121 3)"
"(let-values(((l1_122) given-kws_120))"
"(let-values(((l1_123)(if(null? l1_122) l1_122(if(eq?(car l1_122) '#:dots-dir-ok?)(cdr l1_122) l1_122))))"
"(let-values(((l1_124) l1_123))"
"(let-values(((l1_125)"
"(if(null? l1_124) l1_124(if(eq?(car l1_124) '#:file-end-ok?)(cdr l1_124) l1_124))))"
"(let-values(((l1_126) l1_125))"
"(let-values(((l1_127)"
"(if(null? l1_126) l1_126(if(eq?(car l1_126) '#:for-planet?)(cdr l1_126) l1_126))))"
"(let-values(((l1_128) l1_127))"
"(let-values(((l1_129)"
"(if(null? l1_128)"
" l1_128"
"(if(eq?(car l1_128) '#:just-file-ok?)(cdr l1_128) l1_128))))"
"(null? l1_129)))))))))"
" #f))"
"(case-lambda((given-kws_130 given-args_131 v_132)(unpack11.1$1 given-kws_130 given-args_131 v_132)))"
" null"
" '(#:dots-dir-ok? #:file-end-ok? #:for-planet? #:just-file-ok?)"
"(let-values(((module-path-string?_133)(case-lambda((v_134)(unpack11.1$1 null null v_134)))))"
" module-path-string?_133)))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_135)"
"(if(string? v_135)"
"(let-values(((len_136)(string-length v_135)))"
"(if(positive? len_136)"
"(let-values(((vec_137 len_138)"
"(let-values(((vec_140) v_135))"
"(begin"
"(if(string? vec_140)(void)(let-values()(in-string vec_140)))"
"(values vec_140(string-length vec_140)))))"
"((start_139) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_139)(void)(let-values()(in-naturals start_139)))"
"((letrec-values(((for-loop_141)"
"(lambda(result_142 pos_143 pos_144)"
"(if(if(unsafe-fx< pos_143 len_138) #t #f)"
"(let-values(((c_145)(string-ref vec_137 pos_143))((i_146) pos_144))"
"(let-values(((result_147)"
"(let-values(((result_148) result_142))"
"(let-values(((result_149)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_150)"
"(plain-char? c_145)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)"
"(char=? '#\\. c_145)))"
"(if or-part_151"
" or-part_151"
"(if(char=? '#\\% c_145)"
"(if(< i_146(- len_136 2))"
"(hex-sequence? v_135(add1 i_146))"
" #f)"
" #f)))))))))"
"(values result_149)))))"
"(if(if(not((lambda x_152(not result_147)) c_145))"
"(not((lambda x_153(not result_147)) i_146))"
" #f)"
"(for-loop_141 result_147(unsafe-fx+ 1 pos_143)(+ pos_144 1))"
" result_147)))"
" result_142))))"
" for-loop_141)"
" #t"
" 0"
" start_139)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_154)"
"(let-values(((or-part_155)(char<=? '#\\a c_154 '#\\z)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char<=? '#\\A c_154 '#\\Z)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char<=? '#\\0 c_154 '#\\9)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char=? '#\\- c_154)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char=? '#\\_ c_154)))"
"(if or-part_159 or-part_159(char=? '#\\+ c_154)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_160 i_161)"
"(let-values(((c1_162)(string-ref s_160 i_161)))"
"(let-values(((c2_163)(string-ref s_160(add1 i_161))))"
"(if(hex-char? c1_162)"
"(if(hex-char? c2_163)"
"(let-values(((c_164)(integer->char(+(*(hex-char->integer c1_162) 16)(hex-char->integer c2_163)))))"
"(not(plain-char? c_164)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_165)"
"(let-values(((or-part_166)(char<=? '#\\a c_165 '#\\f)))(if or-part_166 or-part_166(char<=? '#\\0 c_165 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_167)"
"(if(char<=? '#\\a c_167 '#\\f)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_167 '#\\F)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_167)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_168 len_169)"
"(let-values(((start-package-version-pos_170 end-package-version-pos_171 colon1-pos_172 colon2-pos_173)"
"((letrec-values(((loop_174)"
"(lambda(j_175"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179)"
"(if(= j_175 len_169)"
"(let-values()"
"(values"
" start-package-version-pos_176"
"(let-values(((or-part_180) end-package-version-pos_177))"
"(if or-part_180 or-part_180 j_175))"
" colon1-pos_178"
" colon2-pos_179))"
"(let-values()"
"(let-values(((tmp_181)(string-ref v_168 j_175)))"
"(if(equal? tmp_181 '#\\/)"
"(let-values()"
"(loop_174"
"(add1 j_175)"
"(let-values(((or-part_182) start-package-version-pos_176))"
"(if or-part_182 or-part_182(add1 j_175)))"
"(if start-package-version-pos_176"
"(let-values(((or-part_183) end-package-version-pos_177))"
"(if or-part_183 or-part_183 j_175))"
" #f)"
" colon1-pos_178"
" colon2-pos_179))"
"(if(equal? tmp_181 '#\\:)"
"(let-values()"
"(if colon2-pos_179"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_178"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" j_175))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" j_175"
" #f)))))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179))))))))))"
" loop_174)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_170"
"(if(> end-package-version-pos_171 start-package-version-pos_170)"
"(let-values(((or-part_184)(not colon2-pos_173)))"
"(if or-part_184 or-part_184(<(add1 colon2-pos_173) end-package-version-pos_171)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_172"
"(let-values()"
"(let-values(((colon1-end_185)"
"(let-values(((or-part_186) colon2-pos_173))"
"(if or-part_186 or-part_186 end-package-version-pos_171))))"
"(if(if(integer-sequence? v_168(add1 colon1-pos_172) colon1-end_185)"
"(let-values(((or-part_187)(not colon2-pos_173)))"
"(if or-part_187"
" or-part_187"
"(let-values(((tmp_188)(string-ref v_168(add1 colon2-pos_173))))"
"(if(equal? tmp_188 '#\\=)"
"(let-values()(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))"
"(if(if(equal? tmp_188 '#\\>) #t(equal? tmp_188 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_173) end-package-version-pos_171)"
"(char=? '#\\=(string-ref v_168(+ colon2-pos_173 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_168(+ 3 colon2-pos_173) end-package-version-pos_171))"
"(let-values()"
"(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))))"
"(let-values()"
"(integer-range-sequence?"
" v_168"
"(add1 colon2-pos_173)"
" end-package-version-pos_171)))))))"
" #f)"
"(let-values()(values colon1-pos_172 end-package-version-pos_171))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_189 start_190 end_191)"
"(if(< start_190 end_191)"
"(let-values(((start_192) start_190)((end_193) end_191)((inc_194) 1))"
"(begin"
"(if(if(real? start_192)(if(real? end_193)(real? inc_194) #f) #f)"
"(void)"
"(let-values()(in-range start_192 end_193 inc_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(result_196 pos_197)"
"(if(< pos_197 end_193)"
"(let-values(((i_198) pos_197))"
"(let-values(((result_199)"
"(let-values(((result_200) result_196))"
"(let-values(((result_201)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_189 i_198) '#\\9)))))"
"(values result_201)))))"
"(if(not((lambda x_202(not result_199)) i_198))"
"(for-loop_195 result_199(+ pos_197 inc_194))"
" result_199)))"
" result_196))))"
" for-loop_195)"
" #t"
" start_192)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_203 start_204 end_205)"
"(if(< start_204 end_205)"
"(if(let-values(((start_206) start_204)((end_207) end_205)((inc_208) 1))"
"(begin"
"(if(if(real? start_206)(if(real? end_207)(real? inc_208) #f) #f)"
"(void)"
"(let-values()(in-range start_206 end_207 inc_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(result_210 pos_211)"
"(if(< pos_211 end_207)"
"(let-values(((i_212) pos_211))"
"(let-values(((result_213)"
"(let-values(((result_214) result_210))"
"(let-values(((result_215)"
"(let-values()"
"(let-values()"
"(let-values(((c_216)(string-ref s_203 i_212)))"
"(let-values(((or-part_217)"
"(char=? c_216 '#\\-)))"
"(if or-part_217"
" or-part_217"
"(char<=? '#\\0 c_216 '#\\9))))))))"
"(values result_215)))))"
"(if(not((lambda x_218(not result_213)) i_212))"
"(for-loop_209 result_213(+ pos_211 inc_208))"
" result_213)))"
" result_210))))"
" for-loop_209)"
" #t"
" start_206)))"
"(>="
" 1"
"(let-values(((start_219) start_204)((end_220) end_205)((inc_221) 1))"
"(begin"
"(if(if(real? start_219)(if(real? end_220)(real? inc_221) #f) #f)"
"(void)"
"(let-values()(in-range start_219 end_220 inc_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_223 pos_224)"
"(if(< pos_224 end_220)"
"(let-values(((i_225) pos_224))"
"(let-values(((result_226)"
"(let-values(((result_227) result_223))"
"(let-values(((result_228)"
"(let-values()"
"(+"
" result_227"
"(let-values()"
"(if(char=?(string-ref s_203 i_225) '#\\-)"
" 1"
" 0))))))"
"(values result_228)))))"
"(for-loop_222 result_226(+ pos_224 inc_221))))"
" result_223))))"
" for-loop_222)"
" 0"
" start_219))))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()(make-struct-type 'table #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'table)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'ht)"
"(make-struct-field-accessor -ref_24 1 'count)"
"(make-struct-field-accessor -ref_24 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(weak-intern-table1.1(box(table2.1(hasheqv) 0 128)))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_51 v_52)"
"(let-values(((b_53)(weak-intern-table-box tt_51)))"
"(let-values(((t_54)(unbox b_53)))"
"(let-values(((code_55)(equal-hash-code v_52)))"
"(let-values(((vals_56)(hash-ref(table-ht t_54) code_55 null)))"
"(let-values(((or-part_57)"
"(let-values(((lst_58) vals_56))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((b_62)(unsafe-car lst_61)))"
"(let-values(((result_63)"
"(let-values(((result_64) result_60))"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((bv_66)"
"(weak-box-value"
" b_62)))"
"(if(equal? bv_66 v_52)"
" bv_66"
" #f))))))"
"(values result_65)))))"
"(if(not((lambda x_67 result_63) b_62))"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63)))"
" result_60))))"
" for-loop_59)"
" #f"
" lst_58)))))"
"(if or-part_57"
" or-part_57"
"(let-values(((pruned-t_68)(if(=(table-count t_54)(table-prune-at t_54))(prune-table t_54) t_54)))"
"(let-values(((ht_69)(table-ht pruned-t_68)))"
"(let-values(((new-t_70)"
"(table2.1"
"(hash-set ht_69 code_55(cons(make-weak-box v_52)(hash-ref ht_69 code_55 null)))"
"(add1(table-count pruned-t_68))"
"(table-prune-at pruned-t_68))))"
"(let-values(((or-part_71)(if(box-cas! b_53 t_54 new-t_70) v_52 #f)))"
"(if or-part_71 or-part_71(weak-intern! tt_51 v_52))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_72)"
"(let-values(((new-ht_73)"
"(let-values(((ht_75)(table-ht t_72)))"
"(begin"
"(if((lambda(ht_76)(hash? ht_76)) ht_75)(void)(let-values()(default-in-hash ht_75)))"
"((letrec-values(((for-loop_77)"
"(lambda(table_78 i_79)"
"(if i_79"
"(let-values(((k_80 vals_81)(hash-iterate-key+value ht_75 i_79)))"
"(let-values(((table_82)"
"(let-values(((new-vals_83)"
"(alt-reverse"
"(let-values(((lst_84) vals_81))"
"(begin"
"(if(list? lst_84)"
"(void)"
"(let-values()(in-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_86"
" lst_87)"
"(if(pair? lst_87)"
"(let-values(((b_88)"
"(unsafe-car"
" lst_87)))"
"(let-values(((fold-var_89)"
"(let-values(((fold-var_90)"
" fold-var_86))"
"(if(weak-box-value"
" b_88)"
"(let-values(((fold-var_91)"
" fold-var_90))"
"(let-values(((fold-var_92)"
"(let-values()"
"(cons"
"(let-values()"
" b_88)"
" fold-var_91))))"
"(values"
" fold-var_92)))"
" fold-var_90))))"
"(for-loop_85"
" fold-var_89"
"(unsafe-cdr"
" lst_87))))"
" fold-var_86))))"
" for-loop_85)"
" null"
" lst_84))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_93)"
"(lambda(table_94)"
"(let-values()"
"(let-values(((table_95)"
"(let-values(((table_96)"
" table_94))"
"(if(pair?"
" new-vals_83)"
"(let-values(((table_97)"
" table_96))"
"(let-values(((table_98)"
"(let-values()"
"(let-values(((key_99"
" val_100)"
"(let-values()"
"(values"
" k_80"
" new-vals_83))))"
"(hash-set"
" table_97"
" key_99"
" val_100)))))"
"(values"
" table_98)))"
" table_96))))"
" table_95)))))"
" for-loop_93)"
" table_78)))))"
"(for-loop_77 table_82(hash-iterate-next ht_75 i_79))))"
" table_78))))"
" for-loop_77)"
" '#hash()"
"(hash-iterate-first ht_75))))))"
"(let-values(((count_74)"
"(let-values(((ht_101) new-ht_73))"
"(begin"
"(if((lambda(ht_102)(hash? ht_102)) ht_101)(void)(let-values()(default-in-hash ht_101)))"
"((letrec-values(((for-loop_103)"
"(lambda(result_104 i_105)"
"(if i_105"
"(let-values(((k_106 vals_107)(hash-iterate-key+value ht_101 i_105)))"
"(let-values(((result_108)"
"(let-values(((result_109) result_104))"
"(let-values(((result_110)"
"(let-values()"
"(+"
" result_109"
"(let-values()(length vals_107))))))"
"(values result_110)))))"
"(for-loop_103 result_108(hash-iterate-next ht_101 i_105))))"
" result_104))))"
" for-loop_103)"
" 0"
"(hash-iterate-first ht_101))))))"
"(table2.1 new-ht_73 count_74(max 128(* 2 count_74)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_21 ser-push!_22 state_23)"
"(begin"
"(ser-push!_22 'tag '#:resolved-module-path)"
"(ser-push!_22(1/resolved-module-path-name r_21)))))"
"(cons"
" prop:custom-write"
"(lambda(r_24 port_25 mode_26)"
"(begin"
"                           (if mode_26 (let-values () (write-string \"#<resolved-module-path:\" port_25)) (void))"
"                           (fprintf port_25 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_24)))"
"                           (if mode_26 (let-values () (write-string \">\" port_25)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_27 b_28 eql?_29)"
"(eql?_29(1/resolved-module-path-name a_27)(1/resolved-module-path-name b_28)))"
"(lambda(a_30 hash-code_31)(hash-code_31(1/resolved-module-path-name a_30)))"
"(lambda(a_32 hash-code_33)(hash-code_33(1/resolved-module-path-name a_32))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_35)"
"(if(path? p_35)"
"      (let-values () (string-append \"\\\"\" (path->string p_35) \"\\\"\"))"
"(if(symbol? p_35)"
"        (let-values () (format \"'~s\" p_35))"
"(let-values()"
"(format"
"           \"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_35))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_36 pos-next_37 init_38 pos-cont?_39 val-cont?_40 all-cont?_41)"
"(make-sequence '(i)(cdr p_35))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_42)"
"(lambda(fold-var_43 pos_44)"
"(if(if pos-cont?_39(pos-cont?_39 pos_44) #t)"
"(let-values(((i_45)(pos->vals_36 pos_44)))"
"(if(if val-cont?_40(val-cont?_40 i_45) #t)"
"(let-values(((fold-var_46)"
"(let-values(((fold-var_47) fold-var_43))"
"(let-values(((fold-var_48)"
"(let-values()"
"(cons"
"                                                                            (let-values () (format \" ~s\" i_45))"
" fold-var_47))))"
"(values fold-var_48)))))"
"(if(if all-cont?_41(all-cont?_41 pos_44 i_45) #t)"
"(for-loop_42 fold-var_46(pos-next_37 pos_44))"
" fold-var_46))"
" fold-var_43))"
" fold-var_43))))"
" for-loop_42)"
" null"
" init_38)))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_49)"
"(let-values(((name_50)(1/resolved-module-path-name r_49)))(if(pair? name_50)(car name_50) name_50))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_51)"
"(begin"
"(if(let-values(((or-part_52)(symbol? p_51)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(if(path? p_51)(complete-path? p_51) #f)))"
"(if or-part_53"
" or-part_53"
"(if(pair? p_51)"
"(if(pair?(cdr p_51))"
"(if(list? p_51)"
"(if(let-values(((or-part_54)(symbol?(car p_51))))"
"(if or-part_54 or-part_54(if(path?(car p_51))(complete-path?(car p_51)) #f)))"
"(let-values(((lst_55)(cdr p_51)))"
"(begin"
"(if(list? lst_55)(void)(let-values()(in-list lst_55)))"
"((letrec-values(((for-loop_56)"
"(lambda(result_57 lst_58)"
"(if(pair? lst_58)"
"(let-values(((s_59)(unsafe-car lst_58)))"
"(let-values(((result_60)"
"(let-values(((result_61) result_57))"
"(let-values(((result_62)"
"(let-values()"
"(let-values()(symbol? s_59)))))"
"(values result_62)))))"
"(if(not((lambda x_63(not result_60)) s_59))"
"(for-loop_56 result_60(unsafe-cdr lst_58))"
" result_60)))"
" result_57))))"
" for-loop_56)"
" #t"
" lst_55)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_51)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_51)))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_64)"
"(let-values(((name_65)(1/resolved-module-path-name r_64)))"
"(let-values(((root-name_66)(if(pair? name_65)(car name_65) name_65)))"
"(let-values(((root-mod-path_67)(if(path? root-name_66) root-name_66(list 'quote root-name_66))))"
"(if(pair? name_65)(list* 'submod root-mod-path_67(cdr name_65)) root-mod-path_67))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_68 make-_69 ?_70 -ref_71 -set!_72)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_103 port_104 mode_105)"
"(begin"
"                           (write-string \"#<module-path-index\" port_104)"
"(if(top-level-module-path-index? r_103)"
"                             (let-values () (fprintf port_104 \":top-level\"))"
"(if(module-path-index-path r_103)"
"(let-values()"
"(let-values(((l_106)"
"((letrec-values(((loop_107)"
"(lambda(r_108)"
"(if(not r_108)"
"(let-values() null)"
"(if(1/resolved-module-path? r_108)"
"                                                                       (let-values () (list \"+\" (format \"~a\" r_108)))"
"(if(module-path-index-path r_108)"
"(let-values()"
"(cons"
"(format"
"                                                                             \"~.s\""
"(module-path-index-path r_108))"
"(loop_107(module-path-index-base r_108))))"
"(if(module-path-index-resolved r_108)"
"(let-values()"
"(list"
"                                                                              \"+\""
"(format"
"                                                                               \"~a\""
"(module-path-index-resolved r_108))))"
"(let-values() null))))))))"
" loop_107)"
" r_103)))"
"(fprintf"
" port_104"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_106)"
"(alt-reverse"
"(let-values(((lst_109)(cdr l_106)))"
"(begin"
"(if(list? lst_109)(void)(let-values()(in-list lst_109)))"
"((letrec-values(((for-loop_110)"
"(lambda(fold-var_111 lst_112)"
"(if(pair? lst_112)"
"(let-values(((i_113)(unsafe-car lst_112)))"
"(let-values(((fold-var_114)"
"(let-values(((fold-var_115)"
" fold-var_111))"
"(let-values(((fold-var_116)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                      \" ~a\""
" i_113))"
" fold-var_115))))"
"(values fold-var_116)))))"
"(for-loop_110 fold-var_114(unsafe-cdr lst_112))))"
" fold-var_111))))"
" for-loop_110)"
" null"
" lst_109))))))))"
"(if(module-path-index-resolved r_103)"
"                                 (let-values () (fprintf port_104 \"=~a\" (module-path-index-resolved r_103)))"
"(void))))"
"                           (write-string \">\" port_104))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_117 b_118 eql?_119)"
"(if(eql?_119(module-path-index-path a_117)(module-path-index-path b_118))"
"(eql?_119(module-path-index-base a_117)(module-path-index-base b_118))"
" #f))"
"(lambda(a_120 hash-code_121)"
"(+"
"(hash-code_121(module-path-index-path a_120))"
"(hash-code_121(module-path-index-base a_120))))"
"(lambda(a_122 hash-code_123)"
"(+"
"(hash-code_123(module-path-index-path a_122))"
"(hash-code_123(module-path-index-base a_122)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_68"
" make-_69"
" ?_70"
"(make-struct-field-accessor -ref_71 0 'path)"
"(make-struct-field-accessor -ref_71 1 'base)"
"(make-struct-field-accessor -ref_71 2 'resolved)"
"(make-struct-field-accessor -ref_71 3 'shift-cache)"
"(make-struct-field-mutator -set!_72 2 'resolved)"
"(make-struct-field-mutator -set!_72 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_124 base_125)(1/module-path-index-join path_124 base_125))"
"((name_126)(make-self-module-path-index(1/make-resolved-module-path name_126)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_127)"
"(lambda(mpi5_128 load?3_129 load?4_130)"
"(let-values(((mpi_131) mpi5_128))"
"(let-values(((load?_132)(if load?4_130 load?3_129 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_131)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_131)))"
"(let-values(((or-part_133)(module-path-index-resolved mpi_131)))"
"(if or-part_133"
" or-part_133"
"(let-values(((mod-name_134)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_131)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_131)"
" load?_132)"
" #f"
" load?_132)))"
"(begin"
"(if(1/resolved-module-path? mod-name_134)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_134)))"
"(set-module-path-index-resolved! mpi_131 mod-name_134)"
" mod-name_134)))))))))))"
"(case-lambda"
"((mpi_135)(module-path-index-resolve6_127 mpi_135 #f #f))"
"((mpi_136 load?3_137)(module-path-index-resolve6_127 mpi_136 load?3_137 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_138)"
"(if(module-path-index-resolved mpi_138)"
"(let-values()"
"(let-values(((path_139 base_140)(1/module-path-index-split mpi_138)))"
"(1/module-path-index-join path_139 base_140)))"
"(let-values() mpi_138))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_141)"
"(lambda(mod-path10_142 base11_143 submod8_144 submod9_145)"
"(let-values(((mod-path_146) mod-path10_142))"
"(let-values(((base_147) base11_143))"
"(let-values(((submod_148)(if submod9_145 submod8_144 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_149)(not mod-path_146)))"
"(if or-part_149 or-part_149(1/module-path? mod-path_146)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_146)))"
"(if(let-values(((or-part_150)(not base_147)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)(1/resolved-module-path? base_147)))"
"(if or-part_151 or-part_151(1/module-path-index? base_147)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_147)))"
"(if(let-values(((or-part_152)(not submod_148)))"
"(if or-part_152"
" or-part_152"
"(if(pair? submod_148)(if(list? submod_148)(andmap2 symbol? submod_148) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_148)))"
"(if(if(not mod-path_146) base_147 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_147))"
"(void))"
"(if(if submod_148 mod-path_146 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_146"
"                                 \"given submodule list\""
" submod_148))"
"(void))"
"(if submod_148"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_148))))"
"(let-values()"
"(let-values(((keep-base_153)"
"((letrec-values(((loop_154)"
"(lambda(mod-path_155)"
"(if(path? mod-path_155)"
"(let-values() #f)"
"(if(if(pair? mod-path_155)"
"(eq? 'quote(car mod-path_155))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_155)"
"(let-values() #f)"
"(if(if(pair? mod-path_155)"
"(eq? 'submod(car mod-path_155))"
" #f)"
"(let-values()(loop_154(cadr mod-path_155)))"
"(let-values() base_147))))))))"
" loop_154)"
" mod-path_146)))"
"(module-path-index2.1 mod-path_146 keep-base_153 #f #f))))))))))))"
"(case-lambda"
"((mod-path_156 base_157)(module-path-index-join12_141 mod-path_156 base_157 #f #f))"
"((mod-path_158 base_159 submod8_160)(module-path-index-join12_141 mod-path_158 base_159 submod8_160 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_161 load?_162)"
"(if(1/module-path-index? base_161)(1/module-path-index-resolve base_161 load?_162) base_161)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_163)"
"(begin"
"(if(1/module-path-index? mpi_163)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_163)))"
"(values(module-path-index-path mpi_163)(module-path-index-base mpi_163)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_164)"
"(begin"
"(if(1/module-path-index? mpi_164)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_164)))"
"(if(not(module-path-index-path mpi_164))"
"(let-values(((r_165)(module-path-index-resolved mpi_164)))"
"(if r_165(let-values(((p_166)(1/resolved-module-path-name r_165)))(if(pair? p_166)(cdr p_166) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_167)(module-path-index2.1 #f #f name_167 #f))"
"((name_168 enclosing_169)"
"(make-self-module-path-index"
"(let-values(((name23_170) name_168)"
"((temp24_171)(if enclosing_169(1/module-path-index-resolve enclosing_169) #f)))"
"(if(variable-reference-constant?(#%variable-reference build-module-name20.1))"
"(build-module-name18.1 #f #f name23_170 temp24_171)"
"(build-module-name20.1 name23_170 temp24_171)))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_172)"
"(let-values(((r_173)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_172))))"
"(let-values(((or-part_174)"
"(let-values(((e_175)(hash-ref generic-self-mpis r_173 #f)))"
"(if e_175(ephemeron-value e_175) #f))))"
"(if or-part_174"
" or-part_174"
"(let-values(((mpi_176)(module-path-index2.1 #f #f r_173 #f)))"
"(begin(hash-set! generic-self-mpis r_173(make-ephemeron r_173 mpi_176)) mpi_176)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_177)"
"(let-values(((name_178)(1/resolved-module-path-name r_177)))"
"(1/make-resolved-module-path"
"(if(symbol? name_178) generic-module-name(cons generic-module-name(cdr name_178)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_179)"
"(let-values(((r_180)(module-path-index-resolved mpi_179)))"
"(if r_180"
"(let-values()"
"(set-module-path-index-resolved! mpi_179(resolved-module-path-to-generic-resolved-module-path r_180)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_181 from-mpi_182 to-mpi_183)"
"(if(eq? mpi_181 from-mpi_182)"
"(let-values() to-mpi_183)"
"(let-values()"
"(let-values(((base_184)(module-path-index-base mpi_181)))"
"(if(not base_184)"
"(let-values() mpi_181)"
"(let-values()"
"(let-values(((shifted-base_185)(module-path-index-shift base_184 from-mpi_182 to-mpi_183)))"
"(if(eq? shifted-base_185 base_184)"
"(let-values() mpi_181)"
"(let-values(((c41165_186)"
"(shift-cache-ref(module-path-index-shift-cache shifted-base_185) mpi_181)))"
"(if c41165_186"
" c41165_186"
"(let-values()"
"(let-values(((shifted-mpi_187)"
"(module-path-index2.1(module-path-index-path mpi_181) shifted-base_185 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_185) mpi_181 shifted-mpi_187)"
" shifted-mpi_187))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_188)"
"(let-values(((or-part_189)(module-path-index-shift-cache mpi_188)))"
"(if or-part_189"
" or-part_189"
"(let-values(((cache_190)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_188 cache_190) cache_190))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_191 v_192)"
"(if cache_191"
"(let-values(((b_193)(weak-box-value cache_191)))(if b_193(hash-ref(unbox b_193) v_192 #f) #f))"
" #f)))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_194 v_195 r_196)"
"(let-values(((b_197)(weak-box-value cache_194)))"
"(if b_197(let-values()(set-box! b_197(hash-set(unbox b_197) v_195 r_196)))(void)))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_198)(eq? top-level-module-path-index mpi_198)))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
"(case-lambda"
"((name_201 from-namespace_202)(void))"
"((p_203 enclosing_204 source-stx-stx_205 load?_206)"
"(begin"
"(if(1/module-path? p_203)"
"(void)"
"         (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_203)))"
"(if(let-values(((or-part_207)(not enclosing_204)))"
"(if or-part_207 or-part_207(1/resolved-module-path? enclosing_204)))"
"(void)"
"         (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_204)))"
"(if(if(list? p_203)(if(=(length p_203) 2)(if(eq? 'quote(car p_203))(symbol?(cadr p_203)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_203)))"
"         (if (if (list? p_203) (if (eq? 'submod (car p_203)) (equal? \"..\" (cadr p_203)) #f) #f)"
"(let-values()"
"(let-values(((lst_208)(cdr p_203)))"
"(begin"
"(if(list? lst_208)(void)(let-values()(in-list lst_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(enclosing_210 lst_211)"
"(if(pair? lst_211)"
"(let-values(((s_212)(unsafe-car lst_211)))"
"(let-values(((enclosing_213)"
"(let-values(((enclosing_214) enclosing_210))"
"(let-values(((enclosing_215)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:366:10_216)"
" build-module-name20.1)"
"((s25_217) s_212)"
"((enclosing26_218) enclosing_214)"
"((p27_219) p_203))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p27_219"
" #t"
" s25_217"
" enclosing26_218)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:366:10_216"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p27_219)"
" s25_217"
" enclosing26_218))))))"
"(values enclosing_215)))))"
"(for-loop_209 enclosing_213(unsafe-cdr lst_211))))"
" enclosing_210))))"
" for-loop_209)"
" enclosing_204"
" lst_208))))"
"           (if (if (list? p_203) (if (eq? 'submod (car p_203)) (equal? \".\" (cadr p_203)) #f) #f)"
"(let-values()"
"(let-values(((lst_220)(cddr p_203)))"
"(begin"
"(if(list? lst_220)(void)(let-values()(in-list lst_220)))"
"((letrec-values(((for-loop_221)"
"(lambda(enclosing_222 lst_223)"
"(if(pair? lst_223)"
"(let-values(((s_224)(unsafe-car lst_223)))"
"(let-values(((enclosing_225)"
"(let-values(((enclosing_226) enclosing_222))"
"(let-values(((enclosing_227)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:371:10_228)"
" build-module-name20.1)"
"((s28_229) s_224)"
"((enclosing29_230)"
" enclosing_226)"
"((p30_231) p_203))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p30_231"
" #t"
" s28_229"
" enclosing29_230)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:371:10_228"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p30_231)"
" s28_229"
" enclosing29_230))))))"
"(values enclosing_227)))))"
"(for-loop_221 enclosing_225(unsafe-cdr lst_223))))"
" enclosing_222))))"
" for-loop_221)"
" enclosing_204"
" lst_220))))"
"(if(if(list? p_203)(eq? 'submod(car p_203)) #f)"
"(let-values()"
"(let-values(((base_232)((1/current-module-name-resolver)(cadr p_203) enclosing_204 #f #f)))"
"(let-values(((lst_233)(cddr p_203)))"
"(begin"
"(if(list? lst_233)(void)(let-values()(in-list lst_233)))"
"((letrec-values(((for-loop_234)"
"(lambda(enclosing_235 lst_236)"
"(if(pair? lst_236)"
"(let-values(((s_237)(unsafe-car lst_236)))"
"(let-values(((enclosing_238)"
"(let-values(((enclosing_239) enclosing_235))"
"(let-values(((enclosing_240)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:376:12_241)"
" build-module-name20.1)"
"((s31_242) s_237)"
"((enclosing32_243)"
" enclosing_239)"
"((p33_244) p_203))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p33_244"
" #t"
" s31_242"
" enclosing32_243)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:376:12_241"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p33_244)"
" s31_242"
" enclosing32_243))))))"
"(values enclosing_240)))))"
"(for-loop_234 enclosing_238(unsafe-cdr lst_236))))"
" enclosing_235))))"
" for-loop_234)"
" base_232"
" lst_233)))))"
"               (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_203)))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_245 original15_246 name16_247 enclosing17_248)"
"(let-values(((name_249) name16_247))"
"(let-values(((enclosing_250) enclosing17_248))"
"(let-values(((orig-name_251)(if original15_246 original14_245 name_249)))"
"(let-values()"
"(let-values(((enclosing-module-name_252)"
"(if enclosing_250(1/resolved-module-path-name enclosing_250) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_252)"
"(let-values() name_249)"
"(if(symbol? enclosing-module-name_252)"
"(let-values()(list enclosing-module-name_252 name_249))"
"                   (if (equal? name_249 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_252)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_251))"
"(if(= 2(length enclosing-module-name_252))"
"(let-values()(car enclosing-module-name_252))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_252)))))))"
"(let-values()(append enclosing-module-name_252(list name_249))))))))))))))"
"(define-values"
"(unpack19.1$1)"
"(lambda(given-kws_253 given-args_254 name16_255 enclosing17_256)"
"(let-values(((original15_257)(pair? given-kws_253)))"
"(let-values(((original14_258)(if original15_257(car given-args_254)(void))))"
"(build-module-name18.1 original14_258 original15_257 name16_255 enclosing17_256)))))"
"(define-values"
"(build-module-name20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_259 given-argc_260)"
"(if(= given-argc_260 4)"
"(let-values(((l1_261) given-kws_259))"
"(let-values(((l1_262)(if(null? l1_261) l1_261(if(eq?(car l1_261) '#:original)(cdr l1_261) l1_261))))"
"(null? l1_262)))"
" #f))"
"(case-lambda"
"((given-kws_263 given-args_264 name_265 enclosing_266)"
"(unpack19.1$1 given-kws_263 given-args_264 name_265 enclosing_266)))"
" null"
" '(#:original)"
"(let-values(((build-module-name_267)"
"(case-lambda((name_268 enclosing_269)(unpack19.1$1 null null name_268 enclosing_269)))))"
" build-module-name_267)))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_270)"
"(begin"
"(if(let-values(((or-part_271)(not r_270)))(if or-part_271 or-part_271(1/resolved-module-path? r_270)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_270)))"
" r_270))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_272)"
"(begin"
"(if(let-values(((or-part_273)(not s_272)))"
"(if or-part_273"
" or-part_273"
"(let-values(((or-part_274)(symbol? s_272)))"
"(if or-part_274 or-part_274(if(path? s_272)(complete-path? s_272) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
"            \"(or/c #f symbol? (and/c path? complete-path?))\""
" s_272)))"
" s_272))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_275)"
"(let-values(((current-name_276)(1/current-module-declare-name)))"
"(let-values(((root-name_277)"
"(if current-name_276"
"(resolved-module-path-root-name current-name_276)"
"(if(pair? default-name_275)(car default-name_275) default-name_275))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_275)(cons root-name_277(cdr default-name_275)) root-name_277))))))"
"(void)"
"(void)"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 0)))"
"(begin"
"(unsafe-struct-set! v_102 0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
"                                 (if write?_112 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_115))"
"                                (fprintf port_111 (if write?_112 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
"                                  (fprintf port_111 \"#<promise:!running!~a>\" r_116)"
"                                  (fprintf port_111 \"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c41702_117)(object-name v_114)))"
"(if c41702_117"
"                                    ((lambda (n_118) (fprintf port_111 \"#<promise:~a>\" n_118)) c41702_117)"
"                                    (let-values () (display \"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 0)))"
"(if(null? v_114)"
"                                  (let-values () (fprintf port_111 \"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
"                                      (fprintf port_111 (if write?_112 \"#<promise!~s>\" \"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_111)"
"                                        (let-values (((fmt_119) (if write?_112 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
"                                        (display \")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" #t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 0 'val)"
"(make-struct-field-mutator -set!_130 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_146 make-_147 ?_148 -ref_149 -set!_150)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))))"
"(values struct:_146 make-_147 ?_148)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_181)(raise(reraise-val this_181)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))))"
"(values struct:_161 make-_162 ?_163(make-struct-field-accessor -ref_164 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_182 make-_183 ?_184 -ref_185 -set!_186)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_202 port_203 write?_204)"
"                         (fprintf port_203 (if write?_204 \"#<running:~s>\" \"#<running:~a>\") (running-name this_202))))"
"(cons"
" prop:procedure"
"(lambda(this_205)"
"(let-values(((name_206)(running-name this_205)))"
"(if name_206"
"                             (error 'force \"reentrant promise `~.s'\" name_206)"
"                             (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))))"
"(values struct:_182 make-_183 ?_184(make-struct-field-accessor -ref_185 0 'name))))"
"(void)"
"(void)"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_23)((unsafe-struct-ref p_23 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))))"
"(values struct:_8 make-_9 ?_10)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))))"
"(values struct:_41 make-_42 ?_43(make-struct-field-accessor -ref_44 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 'thunk)"
"(make-struct-field-accessor -ref_64 1 'done-evt)"
"(make-struct-field-accessor -ref_64 2 'done-sema)"
"(make-struct-field-accessor -ref_64 3 'access-sema)"
"(make-struct-field-mutator -set!_65 0 'thunk))))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_127 make-_128 ?_129 -ref_130 -set!_131)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_142)"
"(let-values(((v_143)(unsafe-struct-ref p_142 0)))"
"(wrap-evt(if(running? v_143)(running-thread-thread v_143) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_144)"
"(let-values(((v_145)(unsafe-struct-ref p_144 0)))"
"(reify-result"
"(if(running-thread? v_145)"
"(let-values(((t_146)(running-thread-thread v_145)))"
"(let-values((()(begin(thread-wait t_146)(values))))"
"(let-values(((v_147)(unsafe-struct-ref p_144 0)))"
"(if(running-thread? v_147)"
"(error"
" 'force"
"                                       \"promise's thread terminated ~a\\n  promise: ~e\""
"                                       \"without result or exception\""
" p_144)"
" v_147))))"
" v_145))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))))"
"(values struct:_127 make-_128 ?_129)))"
"(void)"
"(void)"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) #f) #f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) #f) #f)))"
"(define-values"
"(phase<?)"
"(lambda(a_7 b_8)(if(not b_8)(let-values() #f)(if(not a_7)(let-values() #t)(let-values()(< a_7 b_8))))))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(void)"
"(void)"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 6 'context-triples)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'interned-props)"
"(make-struct-field-accessor -ref_4 9 'syntax-context)"
"(make-struct-field-accessor -ref_4 10 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_71)"
"(serialize-state1.1"
" reachable-scopes_71"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_72 state_73)"
"(let-values(((or-part_74)(hash-ref(serialize-state-scopes state_73) scs_72 #f)))"
"(if or-part_74 or-part_74(begin(hash-set!(serialize-state-scopes state_73) scs_72 scs_72) scs_72)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_75 state_76)"
"(let-values(((or-part_77)(hash-ref(serialize-state-shifted-multi-scopes state_76) sms_75 #f)))"
"(if or-part_77"
" or-part_77"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_76) sms_75 sms_75) sms_75)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_78 state_79)"
"(if(null? mpi-shifts_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_80)(intern-mpi-shifts(cdr mpi-shifts_78) state_79)))"
"(let-values(((tail-table_81)"
"(let-values(((or-part_82)(hash-ref(serialize-state-mpi-shifts state_79) tail_80 #f)))"
"(if or-part_82"
" or-part_82"
"(let-values(((ht_83)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_79) tail_80 ht_83) ht_83))))))"
"(let-values(((or-part_84)(hash-ref tail-table_81(car mpi-shifts_78) #f)))"
"(if or-part_84"
" or-part_84"
"(let-values(((v_85)(cons(car mpi-shifts_78) tail_80)))"
"(begin(hash-set! tail-table_81(car mpi-shifts_78) v_85) v_85))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_86 sms_87 mpi-shifts_88 state_89)"
"(let-values(((scs-ht_90)"
"(let-values(((or-part_92)(hash-ref(serialize-state-context-triples state_89) scs_86 #f)))"
"(if or-part_92"
" or-part_92"
"(let-values(((ht_93)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_89) scs_86 ht_93) ht_93))))))"
"(let-values(((sms-ht_91)"
"(let-values(((or-part_94)(hash-ref scs-ht_90 sms_87 #f)))"
"(if or-part_94"
" or-part_94"
"(let-values(((ht_95)(make-hasheq)))(begin(hash-set! scs-ht_90 sms_87 ht_95) ht_95))))))"
"(let-values(((or-part_96)(hash-ref sms-ht_91 mpi-shifts_88 #f)))"
"(if or-part_96"
" or-part_96"
"(let-values(((vec_97)(vector-immutable scs_86 sms_87 mpi-shifts_88)))"
"(begin(hash-set! sms-ht_91 mpi-shifts_88 vec_97) vec_97))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_98 get-preserved-props_99 state_100)"
"(let-values(((v_101)(hash-ref(serialize-state-props state_100) all-props_98 'no)))"
"(if(eq? v_101 'no)"
"(let-values()"
"(let-values(((preserved-props_102)(get-preserved-props_99)))"
"(let-values(((p_103)"
"(if(zero?(hash-count preserved-props_102))"
"(let-values() #f)"
"(let-values(((c42682_104)"
"(hash-ref(serialize-state-interned-props state_100) preserved-props_102 #f)))"
"(if c42682_104"
"((lambda(p_105) p_105) c42682_104)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_100)"
" preserved-props_102"
" preserved-props_102)"
" preserved-props_102)))))))"
"(begin(hash-set!(serialize-state-props state_100) all-props_98 p_103) p_103))))"
"(let-values() v_101)))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_106 v_107)"
"(let-values(((b_108)(serialize-state-syntax-context state_106)))(set-box! b_108(cons v_107(unbox b_108))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_109)"
"(let-values(((b_110)(serialize-state-syntax-context state_109)))"
"(if(null?(unbox b_110)) #f(car(unbox b_110))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_111)"
"(let-values(((b_112)(serialize-state-syntax-context state_111)))(set-box! b_112(cdr(unbox b_112))))))"
"(void)"
"(void)"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8)))))))))))"
"(void)"
"(void)"
"(define-values"
"(datum-map)"
"(let-values(((datum-map5_1)"
"(lambda(s3_2 f4_3 seen1_4 seen2_5)"
"(let-values(((s_6) s3_2))"
"(let-values(((f_7) f4_3))"
"(let-values(((seen_8)(if seen2_5 seen1_4 #f)))"
"(let-values()"
"((letrec-values(((loop_9)"
"(lambda(tail?_10 s_11 prev-depth_12 prev-seen_13)"
"(let-values(((depth_14)(add1 prev-depth_12)))"
"(let-values(((seen_15)"
"(if(if prev-seen_13"
"(if(> depth_14 32)(datum-has-elements? s_11) #f)"
" #f)"
"(let-values()"
"(if(hash-ref prev-seen_13 s_11 #f)"
"(let-values()"
"((hash-ref prev-seen_13 'cycle-fail) s_11))"
"(let-values()(hash-set prev-seen_13 s_11 #t))))"
"(let-values() prev-seen_13))))"
"(if(null? s_11)"
"(let-values()(f_7 tail?_10 s_11))"
"(if(pair? s_11)"
"(let-values()"
"(f_7"
" tail?_10"
"(cons"
"(loop_9 #f(car s_11) depth_14 seen_15)"
"(loop_9 #t(cdr s_11) depth_14 seen_15))))"
"(if(let-values(((or-part_16)(symbol? s_11)))"
"(if or-part_16"
" or-part_16"
"(let-values(((or-part_17)(boolean? s_11)))"
"(if or-part_17 or-part_17(number? s_11)))))"
"(let-values()(f_7 #f s_11))"
"(if(vector? s_11)"
"(let-values()"
"(f_7"
" #f"
"(vector->immutable-vector"
"(let-values(((len_18)(vector-length s_11)))"
"(begin"
"(if(exact-nonnegative-integer? len_18)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                       \"exact-nonnegative-integer?\""
" len_18)))"
"(let-values(((v_19)(make-vector len_18 0)))"
"(begin"
"(if(zero? len_18)"
"(void)"
"(let-values()"
"(let-values(((vec_20 len_21)"
"(let-values(((vec_22) s_11))"
"(begin"
"(if(vector? vec_22)"
"(void)"
"(let-values()"
"(in-vector vec_22)))"
"(values"
" vec_22"
"(unsafe-vector-length"
" vec_22))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_23)"
"(lambda(i_24 pos_25)"
"(if(unsafe-fx<"
" pos_25"
" len_21)"
"(let-values(((e_26)"
"(unsafe-vector-ref"
" vec_20"
" pos_25)))"
"(let-values(((i_27)"
"(let-values(((i_28)"
" i_24))"
"(let-values(((i_29)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_19"
" i_28"
"(let-values()"
"(loop_9"
" #f"
" e_26"
" depth_14"
" seen_15)))"
"(unsafe-fx+"
" 1"
" i_28)))))"
"(values"
" i_29)))))"
"(if(not"
"((lambda x_30"
"(unsafe-fx="
" i_27"
" len_18))"
" e_26))"
"(for-loop_23"
" i_27"
"(unsafe-fx+"
" 1"
" pos_25))"
" i_27)))"
" i_24))))"
" for-loop_23)"
" 0"
" 0)))))"
" v_19)))))))"
"(if(box? s_11)"
"(let-values()"
"(f_7"
" #f"
"(box-immutable"
"(loop_9 #f(unbox s_11) depth_14 seen_15))))"
"(let-values(((c43102_31)"
"(immutable-prefab-struct-key s_11)))"
"(if c43102_31"
"((lambda(key_32)"
"(f_7"
" #f"
"(apply"
" make-prefab-struct"
" key_32"
"(alt-reverse"
"(let-values(((v*_33 start*_34 stop*_35 step*_36)"
"(normalise-inputs"
" 'in-vector"
"                                                                                     \"vector\""
"(lambda(x_37)(vector? x_37))"
"(lambda(x_38)"
"(unsafe-vector-length x_38))"
"(struct->vector s_11)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 idx_41)"
"(if(unsafe-fx<"
" idx_41"
" stop*_35)"
"(let-values(((e_42)"
"(unsafe-vector-ref"
" v*_33"
" idx_41)))"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44)"
" fold-var_40))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_9"
" #f"
" e_42"
" depth_14"
" seen_15))"
" fold-var_44))))"
"(values"
" fold-var_45)))))"
"(for-loop_39"
" fold-var_43"
"(unsafe-fx+"
" idx_41"
" 1))))"
" fold-var_40))))"
" for-loop_39)"
" null"
" start*_34)))))))"
" c43102_31)"
"(if(if(hash? s_11)(immutable? s_11) #f)"
"(let-values()"
"(if(hash-eq? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_46) s_11))"
"(begin"
"(if((lambda(ht_47)(hash? ht_47)) ht_46)"
"(void)"
"(let-values()(default-in-hash ht_46)))"
"((letrec-values(((for-loop_48)"
"(lambda(table_49 i_50)"
"(if i_50"
"(let-values(((k_51"
" v_52)"
"(hash-iterate-key+value"
" ht_46"
" i_50)))"
"(let-values(((table_53)"
"(let-values(((table_54)"
" table_49))"
"(let-values(((table_55)"
"(let-values()"
"(let-values(((key_56"
" val_57)"
"(let-values()"
"(values"
" k_51"
"(loop_9"
" #f"
" v_52"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_54"
" key_56"
" val_57)))))"
"(values"
" table_55)))))"
"(for-loop_48"
" table_53"
"(hash-iterate-next"
" ht_46"
" i_50))))"
" table_49))))"
" for-loop_48)"
" '#hasheq()"
"(hash-iterate-first ht_46))))))"
"(if(hash-eqv? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_58) s_11))"
"(begin"
"(if((lambda(ht_59)(hash? ht_59))"
" ht_58)"
"(void)"
"(let-values()"
"(default-in-hash ht_58)))"
"((letrec-values(((for-loop_60)"
"(lambda(table_61 i_62)"
"(if i_62"
"(let-values(((k_63"
" v_64)"
"(hash-iterate-key+value"
" ht_58"
" i_62)))"
"(let-values(((table_65)"
"(let-values(((table_66)"
" table_61))"
"(let-values(((table_67)"
"(let-values()"
"(let-values(((key_68"
" val_69)"
"(let-values()"
"(values"
" k_63"
"(loop_9"
" #f"
" v_64"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_66"
" key_68"
" val_69)))))"
"(values"
" table_67)))))"
"(for-loop_60"
" table_65"
"(hash-iterate-next"
" ht_58"
" i_62))))"
" table_61))))"
" for-loop_60)"
" '#hasheqv()"
"(hash-iterate-first ht_58))))))"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_70) s_11))"
"(begin"
"(if((lambda(ht_71)(hash? ht_71))"
" ht_70)"
"(void)"
"(let-values()"
"(default-in-hash ht_70)))"
"((letrec-values(((for-loop_72)"
"(lambda(table_73 i_74)"
"(if i_74"
"(let-values(((k_75"
" v_76)"
"(hash-iterate-key+value"
" ht_70"
" i_74)))"
"(let-values(((table_77)"
"(let-values(((table_78)"
" table_73))"
"(let-values(((table_79)"
"(let-values()"
"(let-values(((key_80"
" val_81)"
"(let-values()"
"(values"
" k_75"
"(loop_9"
" #f"
" v_76"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_78"
" key_80"
" val_81)))))"
"(values"
" table_79)))))"
"(for-loop_72"
" table_77"
"(hash-iterate-next"
" ht_70"
" i_74))))"
" table_73))))"
" for-loop_72)"
" '#hash()"
"(hash-iterate-first ht_70)))))))))"
"(let-values()(f_7 #f s_11)))))))))))))))"
" loop_9)"
" #f"
" s_6"
" 0"
" seen_8))))))))"
"(case-lambda"
"((s_82 f_83)(datum-map5_1 s_82 f_83 #f #f))"
"((s_84 f_85 seen1_86)(datum-map5_1 s_84 f_85 seen1_86 #t)))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_87)"
"(let-values(((or-part_88)(pair? d_87)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_89)(vector? d_87)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)(box? d_87)))"
"(if or-part_90"
" or-part_90"
"(let-values(((or-part_91)(immutable-prefab-struct-key d_87)))"
"(if or-part_91"
" or-part_91"
"(if(hash? d_87)(if(immutable? d_87)(positive?(hash-count d_87)) #f) #f)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_21)(if(preserved-property-value? v_21)(preserved-property-value-content v_21) v_21)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_23 syntax?_24)"
"(datum-map"
" v_23"
"(lambda(tail?_25 v_26)"
"(begin"
"(if(let-values(((or-part_27)(null? v_26)))"
"(if or-part_27"
" or-part_27"
"(let-values(((or-part_28)(boolean? v_26)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_29)(symbol? v_26)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(number? v_26)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(char? v_26)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(string? v_26)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(bytes? v_26)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(regexp? v_26)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(syntax?_24 v_26)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(pair? v_26)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(vector? v_26)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(box? v_26)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(hash? v_26)))"
"(if or-part_39"
" or-part_39"
"(immutable-prefab-struct-key"
" v_26)))))))))))))))))))))))))))"
"(void)"
"           (let-values () (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_26)))"
" v_26))"
" disallow-cycles$1)))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_40) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_40))))"
"(void)"
"(void)"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_61 reach_62)"
"(let-values(((prop_63)(syntax-scope-propagations s_61)))"
"(begin"
"(reach_62(if prop_63((propagation-ref prop_63) s_61)(syntax-content s_61)))"
"(reach_62(syntax-scopes s_61))"
"(reach_62(syntax-shifted-multi-scopes s_61))"
"(let-values(((ht_64)(syntax-props s_61)))"
"(begin"
"(if((lambda(ht_65)(if(hash? ht_65)(immutable? ht_65) #f)) ht_64)"
"(void)"
"(let-values()(default-in-immutable-hash ht_64)))"
"((letrec-values(((for-loop_66)"
"(lambda(fold-var_67 i_68)"
"(if i_68"
"(let-values(((k_69 v_70)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_64"
" i_68)))"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72) fold-var_67))"
"(if(preserved-property-value?"
"(plain-property-value v_70))"
"(let-values(((fold-var_73) fold-var_72))"
"(let-values(((fold-var_74)"
"(let-values()"
"(begin"
"(let-values()"
"(reach_62 v_70))"
"(void)))))"
"(values fold-var_74)))"
" fold-var_72))))"
"(for-loop_66"
" fold-var_71"
"(unsafe-immutable-hash-iterate-next ht_64 i_68))))"
" fold-var_67))))"
" for-loop_66)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_64))))))))"
"(cons"
" prop:serialize"
"(lambda(s_75 ser-push!_76 state_77)"
"(let-values(((prop_78)(syntax-scope-propagations s_75)))"
"(let-values(((content_79)"
"(if prop_78((propagation-ref prop_78) s_75)(syntax-content s_75))))"
"(let-values(((properties_80)"
"(intern-properties"
"(syntax-props s_75)"
"(lambda()"
"(let-values(((ht_84)(syntax-props s_75)))"
"(begin"
"(if((lambda(ht_85)(hash? ht_85)) ht_84)"
"(void)"
"(let-values()(default-in-hash ht_84)))"
"((letrec-values(((for-loop_86)"
"(lambda(table_87 i_88)"
"(if i_88"
"(let-values(((k_89 v_90)"
"(hash-iterate-key+value"
" ht_84"
" i_88)))"
"(let-values(((table_91)"
"(let-values(((table_92)"
" table_87))"
"(if(preserved-property-value?"
" v_90)"
"(let-values(((table_93)"
" table_92))"
"(let-values(((table_94)"
"(let-values()"
"(let-values(((key_95"
" val_96)"
"(let-values()"
"(values"
" k_89"
"(check-value-to-preserve"
"(plain-property-value"
" v_90)"
" syntax?$1)))))"
"(hash-set"
" table_93"
" key_95"
" val_96)))))"
"(values table_94)))"
" table_92))))"
"(for-loop_86"
" table_91"
"(hash-iterate-next ht_84 i_88))))"
" table_87))))"
" for-loop_86)"
" '#hasheq()"
"(hash-iterate-first ht_84)))))"
" state_77)))"
"(let-values(((tamper_81)(serialize-tamper(syntax-tamper s_75))))"
"(let-values(((context-triple_82)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_75) state_77)"
"(intern-shifted-multi-scopes"
"(syntax-shifted-multi-scopes s_75)"
" state_77)"
"(intern-mpi-shifts(syntax-mpi-shifts s_75) state_77)"
" state_77)))"
"(let-values(((stx-state_83)(get-syntax-context state_77)))"
"(if(let-values(((or-part_97) properties_80))"
"(if or-part_97 or-part_97 tamper_81))"
"(let-values()"
"(begin"
"(ser-push!_76 'tag '#:syntax+props)"
"(push-syntax-context! state_77 #f)"
"(ser-push!_76 content_79)"
"(pop-syntax-context! state_77)"
"(ser-push!_76 'reference context-triple_82)"
"(ser-push!_76 'reference(syntax-srcloc s_75))"
"(ser-push!_76 properties_80)"
"(ser-push!_76 tamper_81)"
"(if stx-state_83"
"(let-values()(set-syntax-state-all-sharing?! stx-state_83 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_98)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_77)"
" s_75"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_98 'share)"
"(let-values()"
"(begin"
"(ser-push!_76 'tag '#:datum->syntax)"
"(ser-push!_76(syntax->datum$1 s_75))))"
"(if(eq? sharing-mode_98 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_76 'tag '#:syntax)(values))))"
"(let-values(((this-state_99)"
"(if(no-pair-syntax-in-cdr? content_79)"
"(syntax-state26.1"
" #t"
" context-triple_82"
"(syntax-srcloc s_75))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_77 this-state_99)"
"(values))))"
"(let-values((()(begin(ser-push!_76 content_79)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_77)"
"(values))))"
"(let-values(((new-sharing-mode_100)"
"(if(if this-state_99"
"(syntax-state-all-sharing?"
" this-state_99)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_77)"
" s_75"
" new-sharing-mode_100)"
"(if(if stx-state_83"
"(eq? new-sharing-mode_100 'none)"
" #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_83 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_76 'tag '#:syntax)"
"(push-syntax-context! state_77 #f)"
"(ser-push!_76 content_79)"
"(pop-syntax-context! state_77)))))"
"(ser-push!_76 'reference context-triple_82)"
"(ser-push!_76 'reference(syntax-srcloc s_75))"
"(if stx-state_83"
"(let-values()"
"(if(if(eq?"
" context-triple_82"
"(syntax-state-context-triple stx-state_83))"
"(equal?(syntax-srcloc s_75)(syntax-state-srcloc stx-state_83))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_83 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_101 port_102 mode_103)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_102) (values))))"
"(let-values(((srcloc_104)(syntax-srcloc s_101)))"
"(begin"
"(if srcloc_104"
"(let-values()"
"(let-values(((srcloc-str_105)(srcloc->string srcloc_104)))"
"(if srcloc-str_105"
"                                       (let-values () (fprintf port_102 \":~a\" srcloc-str_105))"
"(void))))"
"(void))"
"                               (fprintf port_102 \" ~.s\" (syntax->datum$1 s_101))"
"                               (write-string \">\" port_102)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'content)"
"(make-struct-field-accessor -ref_4 1 'scopes)"
"(make-struct-field-accessor -ref_4 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 3 'scope-propagations)"
"(make-struct-field-accessor -ref_4 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 5 'srcloc)"
"(make-struct-field-accessor -ref_4 6 'props)"
"(make-struct-field-accessor -ref_4 7 'inspector)"
"(make-struct-field-accessor -ref_4 8 'tamper)"
"(make-struct-field-mutator -set!_5 0 'content)"
"(make-struct-field-mutator -set!_5 3 'scope-propagations)"
"(make-struct-field-mutator -set!_5 8 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f #f))"
"(define-values(identifier?)(lambda(s_106)(if(syntax?$1 s_106)(symbol?(syntax-content s_106)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_107)(syntax-map s_107(lambda(tail?_108 x_109) x_109)(lambda(s_110 d_111) d_111) syntax-content)))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_112)"
"(lambda(stx-c6_113 s7_114 stx-l2_115 stx-p3_116 stx-l4_117 stx-p5_118)"
"(let-values(((stx-c_119) stx-c6_113))"
"(let-values(((s_120) s7_114))"
"(let-values(((stx-l_121)(if stx-l4_117 stx-l2_115 #f)))"
"(let-values(((stx-p_122)(if stx-p5_118 stx-p3_116 #f)))"
"(let-values()"
"(let-values(((wrap_123)"
"(lambda(content_124)"
"(syntax1.1"
" content_124"
"(if stx-c_119(syntax-scopes stx-c_119) empty-scopes)"
"(if stx-c_119"
"(syntax-shifted-multi-scopes stx-c_119)"
" empty-shifted-multi-scopes)"
" #f"
"(if stx-c_119(syntax-mpi-shifts stx-c_119) empty-mpi-shifts)"
"(if stx-l_121(syntax-srcloc stx-l_121) #f)"
"(if stx-p_122(syntax-props stx-p_122) empty-props)"
"(if stx-c_119(syntax-inspector stx-c_119) #f)"
"(if stx-c_119"
"(if(syntax-tamper stx-c_119)"
"(tamper-tainted-for-content content_124)"
" #f)"
" #f)))))"
"(non-syntax-map"
" s_120"
"(lambda(tail?_125 x_126)(if tail?_125 x_126(wrap_123 x_126)))"
"(lambda(s_127) s_127)"
" disallow-cycles))))))))))"
"(case-lambda"
"((stx-c_128 s_129)(datum->syntax8_112 stx-c_128 s_129 #f #f #f #f))"
"((stx-c_130 s_131 stx-l_132 stx-p3_133)(datum->syntax8_112 stx-c_130 s_131 stx-l_132 stx-p3_133 #t #t))"
"((stx-c_134 s_135 stx-l2_136)(datum->syntax8_112 stx-c_134 s_135 stx-l2_136 #f #t #f)))))"
"(define-values"
"(syntax-map)"
"(let-values(((syntax-map16_137)"
"(lambda(s12_138 f13_139 d->s14_140 s-e15_141 seen10_142 seen11_143)"
"(let-values(((s_144) s12_138))"
"(let-values(((f_145) f13_139))"
"(let-values(((d->s_146) d->s14_140))"
"(let-values(((s-e_147) s-e15_141))"
"(let-values(((seen_148)(if seen11_143 seen10_142 #f)))"
"(let-values()"
"((letrec-values(((loop_149)"
"(lambda(s_150)"
"(datum-map"
" s_150"
"(lambda(tail?_151 v_152)"
"(if(syntax?$1 v_152)"
"(let-values()(d->s_146 v_152(loop_149(s-e_147 v_152))))"
"(let-values()(f_145 tail?_151 v_152))))"
" seen_148))))"
" loop_149)"
" s_144))))))))))"
"(case-lambda"
"((s_153 f_154 d->s_155 s-e_156)(syntax-map16_137 s_153 f_154 d->s_155 s-e_156 #f #f))"
"((s_157 f_158 d->s_159 s-e_160 seen10_161)(syntax-map16_137 s_157 f_158 d->s_159 s-e_160 seen10_161 #t)))))"
"(define-values"
"(non-syntax-map)"
"(let-values(((non-syntax-map24_162)"
"(lambda(s22_163 f23_164 s->18_165 seen19_166 s->20_167 seen21_168)"
"(let-values(((s_169) s22_163))"
"(let-values(((f_170) f23_164))"
"(let-values(((s->_171)(if s->20_167 s->18_165(lambda(x_172) x_172))))"
"(let-values(((seen_173)(if seen21_168 seen19_166 #f)))"
"(let-values()"
"((letrec-values(((loop_174)"
"(lambda(s_175)"
"(datum-map"
" s_175"
"(lambda(tail?_176 v_177)"
"(if(syntax?$1 v_177)"
"(let-values()(s->_171 v_177))"
"(let-values()(f_170 tail?_176 v_177))))"
" seen_173))))"
" loop_174)"
" s_169)))))))))"
"(case-lambda"
"((s_178 f_179)(non-syntax-map24_162 s_178 f_179 #f #f #f #f))"
"((s_180 f_181 s->_182 seen19_183)(non-syntax-map24_162 s_180 f_181 s->_182 seen19_183 #t #t))"
"((s_184 f_185 s->18_186)(non-syntax-map24_162 s_184 f_185 s->18_186 #f #t #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_187) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_187))))"
"(define-values"
"(struct:syntax-state"
" syntax-state26.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_188 make-_189 ?_190 -ref_191 -set!_192)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_188"
" make-_189"
" ?_190"
"(make-struct-field-accessor -ref_191 0 'all-sharing?)"
"(make-struct-field-accessor -ref_191 1 'context-triple)"
"(make-struct-field-accessor -ref_191 2 'srcloc)"
"(make-struct-field-mutator -set!_192 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_218)"
"(if(pair? content_218)"
"(let-values()"
"((letrec-values(((loop_219)"
"(lambda(content_220)"
"(if(if(syntax?$1 content_220)(pair?(syntax-content content_220)) #f)"
"(let-values() #f)"
"(if(pair? content_220)"
"(let-values()(loop_219(cdr content_220)))"
"(let-values() #t))))))"
" loop_219)"
"(cdr content_218)))"
"(let-values() #t))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_221 context-triple_222 srcloc_223 props_224 tamper_225 inspector_226)"
"(syntax1.1"
" content_221"
"(vector-ref context-triple_222 0)"
"(vector-ref context-triple_222 1)"
" #f"
"(vector-ref context-triple_222 2)"
" srcloc_223"
"(if props_224"
"(let-values(((ht_227) props_224))"
"(begin"
"(if((lambda(ht_228)(if(hash? ht_228)(immutable? ht_228) #f)) ht_227)"
"(void)"
"(let-values()(default-in-immutable-hash ht_227)))"
"((letrec-values(((for-loop_229)"
"(lambda(table_230 i_231)"
"(if i_231"
"(let-values(((k_232 v_233)(unsafe-immutable-hash-iterate-key+value ht_227 i_231)))"
"(let-values(((table_234)"
"(let-values(((table_235) table_230))"
"(let-values(((table_236)"
"(let-values()"
"(let-values(((key_237 val_238)"
"(let-values()"
"(values"
" k_232"
"(preserved-property-value1.1"
" v_233)))))"
"(hash-set table_235 key_237 val_238)))))"
"(values table_236)))))"
"(for-loop_229 table_234(unsafe-immutable-hash-iterate-next ht_227 i_231))))"
" table_230))))"
" for-loop_229)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_227))))"
" empty-props)"
" inspector_226"
"(deserialize-tamper tamper_225))))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_239 context-triple_240 srcloc_241 inspector_242)"
"(let-values(((s_243)(deserialize-syntax #f context-triple_240 srcloc_241 #f #f inspector_242)))"
"(datum->syntax$1 s_243 content_239 s_243 s_243))))"
"(void)"
"(void)"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_49 ser-push!_50 state_51)"
"(begin"
"(ser-push!_50 'tag '#:table-with-bulk-bindings)"
"(ser-push!_50(table-with-bulk-bindings-syms/serialize twbb_49))"
"(ser-push!_50(table-with-bulk-bindings-bulk-bindings twbb_49))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'syms)"
"(make-struct-field-accessor -ref_22 1 'syms/serialize)"
"(make-struct-field-accessor -ref_22 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_52 bulk-bindings_53)(table-with-bulk-bindings1.1 syms_52 syms_52 bulk-bindings_53)))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_54 make-_55 ?_56 -ref_57 -set!_58)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                      (cons prop:reach-scopes (lambda (sms_79 reach_80) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_81 ser-push!_82 state_83)"
"(begin"
"(ser-push!_82 'tag '#:bulk-binding-at)"
"(ser-push!_82(bulk-binding-at-scopes bba_81))"
"(ser-push!_82(bulk-binding-at-bulk bba_81))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_54"
" make-_55"
" ?_56"
"(make-struct-field-accessor -ref_57 0 'scopes)"
"(make-struct-field-accessor -ref_57 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_84 bulk_85)(bulk-binding-at2.1 scopes_84 bulk_85)))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_86 make-_87 ?_88 -ref_89 -set!_90)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_86"
" make-_87"
" ?_88"
"(make-struct-field-accessor -ref_89 0 'get-symbols)"
"(make-struct-field-accessor -ref_89 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_111 s_112 extra-shifts_113)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_111))"
" b_111"
"(append extra-shifts_113(if s_112(syntax-mpi-shifts s_112) null)))))"
"(define-values(bulk-binding-create)(lambda(b_114)(bulk-binding-class-create(bulk-binding-ref b_114))))"
"(define-values(binding-table-empty?)(lambda(bt_115)(if(hash? bt_115)(zero?(hash-count bt_115)) #f)))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_116 scopes_117 sym_118 binding_119 just-for-nominal?_120)"
"(if(hash? bt_116)"
"(let-values()(hash-set bt_116 sym_118(hash-set(hash-ref bt_116 sym_118 '#hash()) scopes_117 binding_119)))"
"(let-values()"
"(let-values(((new-syms_121)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_116)"
" scopes_117"
" sym_118"
" binding_119"
" just-for-nominal?_120)))"
"(let-values(((new-syms/serialize_122)"
"(if just-for-nominal?_120"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_116))"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_116)"
"(table-with-bulk-bindings-syms/serialize bt_116))"
"(let-values() new-syms_121)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_116)"
" scopes_117"
" sym_118"
" binding_119"
" #f))))))"
"(let-values(((the-struct_123) bt_116))"
"(if(table-with-bulk-bindings? the-struct_123)"
"(let-values(((syms7_124) new-syms_121)((syms/serialize8_125) new-syms/serialize_122))"
"(table-with-bulk-bindings1.1"
" syms7_124"
" syms/serialize8_125"
"(table-with-bulk-bindings-bulk-bindings the-struct_123)))"
"                (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_123)))))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_126 scopes_127 bulk_128)"
"(if(table-with-bulk-bindings? bt_126)"
"(let-values()"
"(let-values(((new-syms_129)"
"(remove-matching-bindings(table-with-bulk-bindings-syms bt_126) scopes_127 bulk_128)))"
"(let-values(((new-syms/serialize_130)"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_126)"
"(table-with-bulk-bindings-syms/serialize bt_126))"
" new-syms_129"
"(remove-matching-bindings"
"(table-with-bulk-bindings-syms/serialize bt_126)"
" scopes_127"
" bulk_128))))"
"(table-with-bulk-bindings1.1"
" new-syms_129"
" new-syms/serialize_130"
"(cons(bulk-binding-at2.1 scopes_127 bulk_128)(table-with-bulk-bindings-bulk-bindings bt_126))))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_126 bt_126 null) scopes_127 bulk_128)))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_131 scopes_132 bulk_133)"
"(let-values(((bulk-symbols_134)(bulk-binding-symbols bulk_133 #f null)))"
"(if(<(hash-count syms_131)(hash-count bulk-symbols_134))"
"(let-values()"
"(let-values(((ht_135) syms_131))"
"(begin"
"(if((lambda(ht_136)(if(hash? ht_136)(immutable? ht_136) #f)) ht_135)"
"(void)"
"(let-values()(default-in-immutable-hash ht_135)))"
"((letrec-values(((for-loop_137)"
"(lambda(syms_138 i_139)"
"(if i_139"
"(let-values(((sym_140 sym-bindings_141)"
"(unsafe-immutable-hash-iterate-key+value ht_135 i_139)))"
"(let-values(((syms_142)"
"(let-values(((syms_143) syms_138))"
"(let-values(((syms_144)"
"(let-values()"
"(if(hash-ref bulk-symbols_134 sym_140 #f)"
"(remove-matching-binding"
" syms_143"
" sym_140"
" sym-bindings_141"
" scopes_132)"
" syms_143))))"
"(values syms_144)))))"
"(for-loop_137 syms_142(unsafe-immutable-hash-iterate-next ht_135 i_139))))"
" syms_138))))"
" for-loop_137)"
" syms_131"
"(unsafe-immutable-hash-iterate-first ht_135)))))"
"(let-values()"
"(let-values(((ht_145) bulk-symbols_134))"
"(begin"
"(if((lambda(ht_146)(if(hash? ht_146)(immutable? ht_146) #f)) ht_145)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_145)))"
"((letrec-values(((for-loop_147)"
"(lambda(syms_148 i_149)"
"(if i_149"
"(let-values(((sym_150)(unsafe-immutable-hash-iterate-key ht_145 i_149)))"
"(let-values(((syms_151)"
"(let-values(((syms_152) syms_148))"
"(let-values(((syms_153)"
"(let-values()"
"(let-values(((sym-bindings_154)"
"(hash-ref syms_152 sym_150 #f)))"
"(if sym-bindings_154"
"(remove-matching-binding"
" syms_152"
" sym_150"
" sym-bindings_154"
" scopes_132)"
" syms_152)))))"
"(values syms_153)))))"
"(for-loop_147 syms_151(unsafe-immutable-hash-iterate-next ht_145 i_149))))"
" syms_148))))"
" for-loop_147)"
" syms_131"
"(unsafe-immutable-hash-iterate-first ht_145)))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_155 sym_156 sym-bindings_157 scopes_158)"
"(hash-set syms_155 sym_156(hash-remove sym-bindings_157 scopes_158))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_159 scs_160 s_161 extra-shifts_162)"
"(let-values(((ht_163 bulk-bindings_164)"
"(if(hash? table_159)"
"(values table_159 null)"
"(values"
"(table-with-bulk-bindings-syms table_159)"
"(table-with-bulk-bindings-bulk-bindings table_159)))))"
"(set-union"
"(let-values(((ht_165) ht_163))"
"(begin"
"(if((lambda(ht_166)(hash? ht_166)) ht_165)(void)(let-values()(default-in-hash ht_165)))"
"((letrec-values(((for-loop_167)"
"(lambda(table_168 i_169)"
"(if i_169"
"(let-values(((sym_170 at-sym_171)(hash-iterate-key+value ht_165 i_169)))"
"(let-values(((table_172)"
"(let-values(((table_173) table_168))"
"(if(let-values(((ht_174) at-sym_171))"
"(begin"
"(if((lambda(ht_175)(hash? ht_175)) ht_174)"
"(void)"
"(let-values()(default-in-hash-keys ht_174)))"
"((letrec-values(((for-loop_176)"
"(lambda(result_177 i_178)"
"(if i_178"
"(let-values(((an-scs_179)"
"(hash-iterate-key"
" ht_174"
" i_178)))"
"(let-values(((result_180)"
"(let-values(((result_181)"
" result_177))"
"(let-values(((result_182)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_179"
" scs_160)))))"
"(values"
" result_182)))))"
"(if(not"
"((lambda x_183 result_180)"
" an-scs_179))"
"(for-loop_176"
" result_180"
"(hash-iterate-next"
" ht_174"
" i_178))"
" result_180)))"
" result_177))))"
" for-loop_176)"
" #f"
"(hash-iterate-first ht_174))))"
"(let-values(((table_184) table_173))"
"(let-values(((table_185)"
"(let-values()"
"(let-values(((key_186 val_187)"
"(let-values()"
"(values"
"(let-values() sym_170)"
" #t))))"
"(hash-set table_184 key_186 val_187)))))"
"(values table_185)))"
" table_173))))"
"(for-loop_167 table_172(hash-iterate-next ht_165 i_169))))"
" table_168))))"
" for-loop_167)"
" '#hasheq()"
"(hash-iterate-first ht_165))))"
"(let-values(((lst_188) bulk-bindings_164))"
"(begin"
"(if(list? lst_188)(void)(let-values()(in-list lst_188)))"
"((letrec-values(((for-loop_189)"
"(lambda(table_190 lst_191)"
"(if(pair? lst_191)"
"(let-values(((bba_192)(unsafe-car lst_191)))"
"(let-values(((table_193)"
"(let-values(((table_194) table_190))"
"(if(subset?(bulk-binding-at-scopes bba_192) scs_160)"
"(let-values(((ht_195)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_192)"
" s_161"
" extra-shifts_162)))"
"(begin"
"(if((lambda(ht_196)(hash? ht_196)) ht_195)"
"(void)"
"(let-values()(default-in-hash-keys ht_195)))"
"((letrec-values(((for-loop_197)"
"(lambda(table_198 i_199)"
"(if i_199"
"(let-values(((sym_200)"
"(hash-iterate-key"
" ht_195"
" i_199)))"
"(let-values(((table_201)"
"(let-values(((table_202)"
" table_198))"
"(let-values(((table_203)"
"(let-values()"
"(let-values(((key_204"
" val_205)"
"(let-values()"
"(values"
"(let-values()"
" sym_200)"
" #t))))"
"(hash-set"
" table_202"
" key_204"
" val_205)))))"
"(values"
" table_203)))))"
"(for-loop_197"
" table_201"
"(hash-iterate-next ht_195 i_199))))"
" table_198))))"
" for-loop_197)"
" table_194"
"(hash-iterate-first ht_195))))"
" table_194))))"
"(for-loop_189 table_193(unsafe-cdr lst_191))))"
" table_190))))"
" for-loop_189)"
" '#hasheq()"
" lst_188)))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_206 state_207)"
"(let-values(((or-part_208)(hash-ref(serialize-state-bindings-intern state_207) bt_206 #f)))"
"(if or-part_208"
" or-part_208"
"(let-values(((reachable-scopes_209)(serialize-state-reachable-scopes state_207)))"
"(let-values(((new-syms_210)"
"(let-values(((ht_213)"
"(if(hash? bt_206) bt_206(table-with-bulk-bindings-syms/serialize bt_206))))"
"(begin"
"(if((lambda(ht_214)(if(hash? ht_214)(immutable? ht_214) #f)) ht_213)"
"(void)"
"(let-values()(default-in-immutable-hash ht_213)))"
"((letrec-values(((for-loop_215)"
"(lambda(table_216 i_217)"
"(if i_217"
"(let-values(((sym_218 bindings-for-sym_219)"
"(unsafe-immutable-hash-iterate-key+value ht_213 i_217)))"
"(let-values(((table_220)"
"(let-values(((new-bindings-for-sym_221)"
"(let-values(((ht_222)"
" bindings-for-sym_219))"
"(begin"
"(if((lambda(ht_223)"
"(if(hash? ht_223)"
"(immutable? ht_223)"
" #f))"
" ht_222)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_222)))"
"((letrec-values(((for-loop_224)"
"(lambda(table_225"
" i_226)"
"(if i_226"
"(let-values(((scopes_227"
" binding_228)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_222"
" i_226)))"
"(let-values(((table_229)"
"(let-values(((table_230)"
" table_225))"
"(if(subset?"
" scopes_227"
" reachable-scopes_209)"
"(let-values(((table_231)"
" table_230))"
"(let-values(((table_232)"
"(let-values()"
"(let-values(((key_233"
" val_234)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_227"
" state_207)"
" binding_228))))"
"(hash-set"
" table_231"
" key_233"
" val_234)))))"
"(values"
" table_232)))"
" table_230))))"
"(for-loop_224"
" table_229"
"(unsafe-immutable-hash-iterate-next"
" ht_222"
" i_226))))"
" table_225))))"
" for-loop_224)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_222))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_235)"
"(lambda(table_236)"
"(let-values()"
"(let-values(((table_237)"
"(let-values(((table_238)"
" table_236))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_221))"
"(let-values(((table_239)"
" table_238))"
"(let-values(((table_240)"
"(let-values()"
"(let-values(((key_241"
" val_242)"
"(let-values()"
"(values"
" sym_218"
" new-bindings-for-sym_221))))"
"(hash-set"
" table_239"
" key_241"
" val_242)))))"
"(values"
" table_240)))"
" table_238))))"
" table_237)))))"
" for-loop_235)"
" table_216)))))"
"(for-loop_215"
" table_220"
"(unsafe-immutable-hash-iterate-next ht_213 i_217))))"
" table_216))))"
" for-loop_215)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_213))))))"
"(let-values(((new-bulk-bindings_211)"
"(if(hash? bt_206)"
" null"
"(alt-reverse"
"(let-values(((lst_243)(table-with-bulk-bindings-bulk-bindings bt_206)))"
"(begin"
"(if(list? lst_243)(void)(let-values()(in-list lst_243)))"
"((letrec-values(((for-loop_244)"
"(lambda(fold-var_245 lst_246)"
"(if(pair? lst_246)"
"(let-values(((bba_247)(unsafe-car lst_246)))"
"(let-values(((fold-var_248)"
"(let-values(((fold-var_249) fold-var_245))"
"(if(subset?"
"(bulk-binding-at-scopes bba_247)"
" reachable-scopes_209)"
"(let-values(((fold-var_250) fold-var_249))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_252)"
" bba_247))"
"(if(bulk-binding-at?"
" the-struct_252)"
"(let-values(((scopes9_253)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_247)"
" state_207)))"
"(bulk-binding-at2.1"
" scopes9_253"
"(bulk-binding-at-bulk"
" the-struct_252)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                     \"bulk-binding-at?\""
" the-struct_252))))"
" fold-var_250))))"
"(values fold-var_251)))"
" fold-var_249))))"
"(for-loop_244 fold-var_248(unsafe-cdr lst_246))))"
" fold-var_245))))"
" for-loop_244)"
" null"
" lst_243)))))))"
"(let-values(((new-bt_212)"
"(if(pair? new-bulk-bindings_211)"
"(table-with-bulk-bindings1.1 new-syms_210 new-syms_210 new-bulk-bindings_211)"
" new-syms_210)))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_207) bt_206 new-bt_212)"
" new-bt_212)))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_254 reachable-scopes_255 reach_256 register-trigger_257)"
"(let-values(((ht_258)(if(hash? bt_254) bt_254(table-with-bulk-bindings-syms/serialize bt_254))))"
"(begin"
"(if((lambda(ht_259)(if(hash? ht_259)(immutable? ht_259) #f)) ht_258)"
"(void)"
"(let-values()(default-in-immutable-hash ht_258)))"
"((letrec-values(((for-loop_260)"
"(lambda(fold-var_261 i_262)"
"(if i_262"
"(let-values(((sym_263 bindings-for-sym_264)"
"(unsafe-immutable-hash-iterate-key+value ht_258 i_262)))"
"(let-values(((fold-var_265)"
"(let-values(((ht_266) bindings-for-sym_264))"
"(begin"
"(if((lambda(ht_267)(if(hash? ht_267)(immutable? ht_267) #f))"
" ht_266)"
"(void)"
"(let-values()(default-in-immutable-hash ht_266)))"
"((letrec-values(((for-loop_268)"
"(lambda(fold-var_269 i_270)"
"(if i_270"
"(let-values(((scopes_271 binding_272)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_266"
" i_270)))"
"(let-values(((fold-var_273)"
"(let-values(((fold-var_274)"
" fold-var_269))"
"(let-values(((fold-var_275)"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_271"
" binding_272"
" reachable-scopes_255"
" reach_256"
" register-trigger_257))"
"(void)))))"
"(values fold-var_275)))))"
"(for-loop_268"
" fold-var_273"
"(unsafe-immutable-hash-iterate-next"
" ht_266"
" i_270))))"
" fold-var_269))))"
" for-loop_268)"
" fold-var_261"
"(unsafe-immutable-hash-iterate-first ht_266))))))"
"(for-loop_260 fold-var_265(unsafe-immutable-hash-iterate-next ht_258 i_262))))"
" fold-var_261))))"
" for-loop_260)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_258))))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_276 binding_277 reachable-scopes_278 reach_279 register-trigger_280)"
"(let-values(((v_281)"
"(if(binding-reach-scopes? binding_277)((binding-reach-scopes-ref binding_277) binding_277) #f)))"
"(if v_281"
"(let-values()"
"(if(subset? scopes_276 reachable-scopes_278)"
"(let-values()(reach_279 v_281))"
"(let-values()"
"(let-values(((ht_282) scopes_276))"
"(begin"
"(if((lambda(ht_283)(if(hash? ht_283)(immutable? ht_283) #f)) ht_282)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_282)))"
"((letrec-values(((for-loop_284)"
"(lambda(fold-var_285 i_286)"
"(if i_286"
"(let-values(((sc_287)(unsafe-immutable-hash-iterate-key ht_282 i_286)))"
"(let-values(((fold-var_288)"
"(let-values(((fold-var_289) fold-var_285))"
"(if(set-member? reachable-scopes_278 sc_287)"
" fold-var_289"
"(let-values(((fold-var_290) fold-var_289))"
"(let-values(((fold-var_291)"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_280 sc_287 v_281))"
"(void)))))"
"(values fold-var_291)))))))"
"(for-loop_284"
" fold-var_288"
"(unsafe-immutable-hash-iterate-next ht_282 i_286))))"
" fold-var_285))))"
" for-loop_284)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_282)))))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(non-syntax-map"
" d_2"
"(lambda(tail?_3 x_4) x_4)"
"(lambda(sub-s_5)"
"(if(tamper-tainted?(syntax-tamper sub-s_5))"
"(let-values() sub-s_5)"
"(let-values()"
"(let-values(((the-struct_6) sub-s_5))"
"(if(syntax?$1 the-struct_6)"
"(let-values(((tamper6_7)(tamper-tainted-for-content(syntax-content sub-s_5))))"
"(syntax1.1"
"(syntax-content the-struct_6)"
"(syntax-scopes the-struct_6)"
"(syntax-shifted-multi-scopes the-struct_6)"
"(syntax-scope-propagations the-struct_6)"
"(syntax-mpi-shifts the-struct_6)"
"(syntax-srcloc the-struct_6)"
"(syntax-props the-struct_6)"
"(syntax-inspector the-struct_6)"
" tamper6_7))"
"               (raise-argument-error 'struct-copy \"syntax?\" the-struct_6)))))))))"
"(define-values(syntax-tainted?$1)(lambda(s_8)(tamper-tainted?(syntax-tamper s_8))))"
"(define-values(syntax-clean?)(lambda(s_9)(tamper-clean?(syntax-tamper s_9))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_10 insp_11)"
"(let-values(((t_12)(syntax-tamper s_10)))"
"(if(tamper-tainted? t_12)"
"(let-values() s_10)"
"(if(if t_12"
"(let-values(((or-part_13)(set-member? t_12 insp_11)))"
"(if or-part_13"
" or-part_13"
"(let-values(((ht_14) t_12))"
"(begin"
"(if((lambda(ht_15)(if(hash? ht_15)(immutable? ht_15) #f)) ht_14)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_14)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 i_18)"
"(if i_18"
"(let-values(((already-insp_19)"
"(unsafe-immutable-hash-iterate-key ht_14 i_18)))"
"(let-values(((result_20)"
"(let-values(((result_21) result_17))"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_19"
" insp_11)))))"
"(values result_22)))))"
"(if(not((lambda x_23 result_20) already-insp_19))"
"(for-loop_16"
" result_20"
"(unsafe-immutable-hash-iterate-next ht_14 i_18))"
" result_20)))"
" result_17))))"
" for-loop_16)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_14))))))"
" #f)"
"(let-values() s_10)"
"(let-values()"
"(let-values(((the-struct_24) s_10))"
"(if(syntax?$1 the-struct_24)"
"(let-values(((tamper7_25)(set-add(if t_12(remove-inferior t_12 insp_11)(seteq)) insp_11)))"
"(syntax1.1"
"(syntax-content the-struct_24)"
"(syntax-scopes the-struct_24)"
"(syntax-shifted-multi-scopes the-struct_24)"
"(syntax-scope-propagations the-struct_24)"
"(syntax-mpi-shifts the-struct_24)"
"(syntax-srcloc the-struct_24)"
"(syntax-props the-struct_24)"
"(syntax-inspector the-struct_24)"
" tamper7_25))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_24)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_26 insp_27)"
"(let-values(((ht_28) t_26))"
"(begin"
"(if((lambda(ht_29)(if(hash? ht_29)(immutable? ht_29) #f)) ht_28)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_28)))"
"((letrec-values(((for-loop_30)"
"(lambda(table_31 i_32)"
"(if i_32"
"(let-values(((already-insp_33)(unsafe-immutable-hash-iterate-key ht_28 i_32)))"
"(let-values(((table_34)"
"(let-values(((table_35) table_31))"
"(if(inspector-superior-or-same? insp_27 already-insp_33)"
" table_35"
"(let-values(((table_36) table_35))"
"(let-values(((table_37)"
"(let-values()"
"(let-values(((key_38 val_39)"
"(let-values()"
"(values"
"(let-values() already-insp_33)"
" #t))))"
"(hash-set table_36 key_38 val_39)))))"
"(values table_37)))))))"
"(for-loop_30 table_34(unsafe-immutable-hash-iterate-next ht_28 i_32))))"
" table_31))))"
" for-loop_30)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_28))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_40)"
"(lambda(s3_41 insp1_42 insp2_43)"
"(let-values(((s_44) s3_41))"
"(let-values(((insp_45)(if insp2_43 insp1_42 #f)))"
"(let-values()"
"(let-values(((t_46)(syntax-tamper s_44)))"
"(if(not(tamper-armed? t_46))"
"(let-values() s_44)"
"(if(not insp_45)"
"(let-values()"
"(let-values(((the-struct_47) s_44))"
"(if(syntax?$1 the-struct_47)"
"(let-values(((tamper8_48) #f))"
"(syntax1.1"
"(syntax-content the-struct_47)"
"(syntax-scopes the-struct_47)"
"(syntax-shifted-multi-scopes the-struct_47)"
"(syntax-scope-propagations the-struct_47)"
"(syntax-mpi-shifts the-struct_47)"
"(syntax-srcloc the-struct_47)"
"(syntax-props the-struct_47)"
"(syntax-inspector the-struct_47)"
" tamper8_48))"
"                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_47))))"
"(let-values()"
"(let-values(((new-t_49)(remove-inferior t_46 insp_45)))"
"(let-values(((the-struct_50) s_44))"
"(if(syntax?$1 the-struct_50)"
"(let-values(((tamper9_51)(if(not(set-empty? new-t_49)) new-t_49 #f)))"
"(syntax1.1"
"(syntax-content the-struct_50)"
"(syntax-scopes the-struct_50)"
"(syntax-shifted-multi-scopes the-struct_50)"
"(syntax-scope-propagations the-struct_50)"
"(syntax-mpi-shifts the-struct_50)"
"(syntax-srcloc the-struct_50)"
"(syntax-props the-struct_50)"
"(syntax-inspector the-struct_50)"
" tamper9_51))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_50))))))))))))))"
"(case-lambda((s_52)(syntax-disarm4_40 s_52 #f #f))((s_53 insp1_54)(syntax-disarm4_40 s_53 insp1_54 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_55 from-s_56)"
"(let-values(((t_57)(syntax-tamper s_55)))"
"(if(tamper-tainted? t_57)"
"(let-values() s_55)"
"(let-values()"
"(let-values(((from-t_58)(syntax-tamper from-s_56)))"
"(if(tamper-clean? from-t_58)"
"(let-values() s_55)"
"(if(tamper-tainted? from-t_58)"
"(let-values()"
"(let-values(((the-struct_59) s_55))"
"(if(syntax?$1 the-struct_59)"
"(let-values(((tamper10_60)(tamper-tainted-for-content(syntax-content s_55))))"
"(syntax1.1"
"(syntax-content the-struct_59)"
"(syntax-scopes the-struct_59)"
"(syntax-shifted-multi-scopes the-struct_59)"
"(syntax-scope-propagations the-struct_59)"
"(syntax-mpi-shifts the-struct_59)"
"(syntax-srcloc the-struct_59)"
"(syntax-props the-struct_59)"
"(syntax-inspector the-struct_59)"
" tamper10_60))"
"                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_59))))"
"(if(tamper-clean? t_57)"
"(let-values()"
"(let-values(((the-struct_61) s_55))"
"(if(syntax?$1 the-struct_61)"
"(let-values(((tamper11_62) from-t_58))"
"(syntax1.1"
"(syntax-content the-struct_61)"
"(syntax-scopes the-struct_61)"
"(syntax-shifted-multi-scopes the-struct_61)"
"(syntax-scope-propagations the-struct_61)"
"(syntax-mpi-shifts the-struct_61)"
"(syntax-srcloc the-struct_61)"
"(syntax-props the-struct_61)"
"(syntax-inspector the-struct_61)"
" tamper11_62))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_61))))"
"(let-values()"
"(let-values(((the-struct_63) s_55))"
"(if(syntax?$1 the-struct_63)"
"(let-values(((tamper12_64)"
"(let-values(((ht_65) from-t_58))"
"(begin"
"(if((lambda(ht_66)(if(hash? ht_66)(immutable? ht_66) #f)) ht_65)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_65)))"
"((letrec-values(((for-loop_67)"
"(lambda(t_68 i_69)"
"(if i_69"
"(let-values(((from-i_70)"
"(unsafe-immutable-hash-iterate-key"
" ht_65"
" i_69)))"
"(let-values(((t_71)"
"(let-values(((t_72) t_68))"
"(let-values(((t_73)"
"(let-values()"
"(if(set-member?"
" t_72"
" from-i_70)"
"(let-values() t_72)"
"(if(any-superior?"
" t_72"
" from-i_70)"
"(let-values()"
" t_72)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_72"
" from-i_70)"
" from-i_70))))))))"
"(values t_73)))))"
"(for-loop_67"
" t_71"
"(unsafe-immutable-hash-iterate-next ht_65 i_69))))"
" t_68))))"
" for-loop_67)"
" t_57"
"(unsafe-immutable-hash-iterate-first ht_65))))))"
"(syntax1.1"
"(syntax-content the-struct_63)"
"(syntax-scopes the-struct_63)"
"(syntax-shifted-multi-scopes the-struct_63)"
"(syntax-scope-propagations the-struct_63)"
"(syntax-mpi-shifts the-struct_63)"
"(syntax-srcloc the-struct_63)"
"(syntax-props the-struct_63)"
"(syntax-inspector the-struct_63)"
" tamper12_64))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_63)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_74)"
"(if(tamper-tainted?(syntax-tamper s_74))"
" s_74"
"(let-values(((the-struct_75) s_74))"
"(if(syntax?$1 the-struct_75)"
"(let-values(((tamper13_76)(tamper-tainted-for-content(syntax-content s_74))))"
"(syntax1.1"
"(syntax-content the-struct_75)"
"(syntax-scopes the-struct_75)"
"(syntax-shifted-multi-scopes the-struct_75)"
"(syntax-scope-propagations the-struct_75)"
"(syntax-mpi-shifts the-struct_75)"
"(syntax-srcloc the-struct_75)"
"(syntax-props the-struct_75)"
"(syntax-inspector the-struct_75)"
" tamper13_76))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_75))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_77 from-i_78)"
"(let-values(((ht_79) t_77))"
"(begin"
"(if((lambda(ht_80)(if(hash? ht_80)(immutable? ht_80) #f)) ht_79)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_79)))"
"((letrec-values(((for-loop_81)"
"(lambda(result_82 i_83)"
"(if i_83"
"(let-values(((i_84)(unsafe-immutable-hash-iterate-key ht_79 i_83)))"
"(let-values(((result_85)"
"(let-values(((result_86) result_82))"
"(let-values(((result_87)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_84 from-i_78)))))"
"(values result_87)))))"
"(if(not((lambda x_88 result_85) i_84))"
"(for-loop_81 result_85(unsafe-immutable-hash-iterate-next ht_79 i_83))"
" result_85)))"
" result_82))))"
" for-loop_81)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_79))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_89 i_90)"
"(let-values(((or-part_91)(eq? sup-i_89 i_90)))(if or-part_91 or-part_91(inspector-superior? sup-i_89 i_90)))))"
"(void)"
"(void)"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_21)(if(fallback? smss_21)(car(fallback-search-list smss_21)) smss_21)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_22)"
"(let-values(((l_23)(cdr(fallback-search-list smss_22))))(if(null?(cdr l_23))(car l_23)(fallback1.1 l_23)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_24 smss/maybe-fallback_25)"
"(fallback1.1"
"(cons"
" smss_24"
"(if(fallback? smss/maybe-fallback_25)"
"(fallback-search-list smss/maybe-fallback_25)"
"(list smss/maybe-fallback_25))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_26 f_27)"
"(if(fallback? smss_26)"
"(let-values(((l_28)(fallback-search-list smss_26)))(fallback1.1(cons(f_27(car l_28))(cdr l_28))))"
"(f_27 smss_26))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_29 f_30)"
"(if(fallback? smss_29)"
"(fallback1.1"
"(alt-reverse"
"(let-values(((lst_31)(fallback-search-list smss_29)))"
"(begin"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33 lst_34)"
"(if(pair? lst_34)"
"(let-values(((smss_35)(unsafe-car lst_34)))"
"(let-values(((fold-var_36)"
"(let-values(((fold-var_37) fold-var_33))"
"(let-values(((fold-var_38)"
"(let-values()"
"(cons(let-values()(f_30 smss_35)) fold-var_37))))"
"(values fold-var_38)))))"
"(for-loop_32 fold-var_36(unsafe-cdr lst_34))))"
" fold-var_33))))"
" for-loop_32)"
" null"
" lst_31)))))"
"(f_30 smss_29))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_39)(if(fallback? smss_39)(fallback-search-list smss_39)(list smss_39))))"
"(void)"
"(void)"
"(define-values(cache)(make-weak-box #f))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_1)(let-values(((c_2)(weak-box-value cache)))(if c_2(let-values()(hash-remove! c_2 sym_1))(void))))"
"(()(set! cache(make-weak-box(make-hasheq))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scopes entry-phase entry-binding)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()(make-struct-type 'entry #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'entry)))))"
"(values"
" struct:_3"
" make-_4"
" ?_5"
"(make-struct-field-accessor -ref_6 0 'scopes)"
"(make-struct-field-accessor -ref_6 1 'phase)"
"(make-struct-field-accessor -ref_6 2 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_33 phase_34 scopes_35)"
"(let-values(((c_36)(weak-box-value cache)))"
"(if c_36"
"(let-values(((v_37)(hash-ref c_36 sym_33 #f)))"
"(if v_37"
"(if(eqv? phase_34(entry-phase v_37))"
"(if(set=? scopes_35(entry-scopes v_37))(entry-binding v_37) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_38 phase_39 scopes_40 b_41)"
"(let-values(((c_42)(weak-box-value cache)))"
"(if(not c_42)"
"(let-values()(begin(clear-resolve-cache!)(resolve-cache-set! sym_38 phase_39 scopes_40 b_41)))"
"(let-values()(hash-set! c_42 sym_38(entry1.1 scopes_40 phase_39 b_41)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_31 reachable-scopes_32 reach_33 register-trigger_34)"
"(binding-table-register-reachable"
"(scope-binding-table s_31)"
" reachable-scopes_32"
" reach_33"
" register-trigger_34)))"
"(cons prop:reach-scopes(lambda(s_35 reach_36)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_37 ser-push!_38 state_39)"
"(if(binding-table-empty?(scope-binding-table s_37))"
"(let-values()(ser-push!_38 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_38 'tag '#:scope-fill!)"
"(ser-push!_38"
"(binding-table-prune-to-reachable(scope-binding-table s_37) state_39)))))))"
"(cons"
" prop:serialize"
"(lambda(s_40 ser-push!_41 state_42)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_42) s_40)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_40 top-level-common-scope)"
"(let-values()(ser-push!_41 'tag '#:scope))"
"(let-values()"
"(begin(ser-push!_41 'tag '#:scope+kind)(ser-push!_41(scope-kind s_40))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_43 port_44 mode_45)"
"(begin"
"                           (write-string \"#<scope:\" port_44)"
"(display(scope-id sc_43) port_44)"
"                           (write-string \":\" port_44)"
"(display(scope-kind sc_43) port_44)"
"                           (write-string \">\" port_44)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'id)"
"(make-struct-field-accessor -ref_4 1 'kind)"
"(make-struct-field-accessor -ref_4 2 'binding-table)"
"(make-struct-field-mutator -set!_5 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_46)(scope1.1(new-deserialize-scope-id!) kind_46 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_47 bt_48)(set-scope-binding-table! s_47 bt_48)))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_49 make-_50 ?_51 -ref_52 -set!_53)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_89 reach_90)(reach_90(multi-scope-scopes ms_89))))"
"(cons"
" prop:serialize"
"(lambda(ms_91 ser-push!_92 state_93)"
"(begin"
"(ser-push!_92 'tag '#:multi-scope)"
"(ser-push!_92(multi-scope-name ms_91))"
"(ser-push!_92(multi-scope-scopes ms_91))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_49"
" make-_50"
" ?_51"
"(make-struct-field-accessor -ref_52 0 'id)"
"(make-struct-field-accessor -ref_52 1 'name)"
"(make-struct-field-accessor -ref_52 2 'scopes)"
"(make-struct-field-accessor -ref_52 3 'shifted)"
"(make-struct-field-accessor -ref_52 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_94 scopes_95)"
"(multi-scope2.1(new-deserialize-scope-id!) name_94 scopes_95(box(hasheqv))(box(hash)))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_96 make-_97 ?_98 -ref_99 -set!_100)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_121 reach_122)(reach_122(representative-scope-owner s_121))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_123 ser-push!_124 state_125)"
"(begin"
"(ser-push!_124 'tag '#:representative-scope-fill!)"
"(ser-push!_124(binding-table-prune-to-reachable(scope-binding-table s_123) state_125))"
"(ser-push!_124(representative-scope-owner s_123)))))"
"(cons"
" prop:serialize"
"(lambda(s_126 ser-push!_127 state_128)"
"(begin"
"(ser-push!_127 'tag '#:representative-scope)"
"(ser-push!_127(scope-kind s_126))"
"(ser-push!_127(representative-scope-phase s_126)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_129 port_130 mode_131)"
"(begin"
"                           (write-string \"#<scope:\" port_130)"
"(display(scope-id sc_129) port_130)"
"(if(representative-scope-owner sc_129)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_130)"
"(display(multi-scope-id(representative-scope-owner sc_129)) port_130)))"
"(void))"
"                           (write-string \"@\" port_130)"
"(display(representative-scope-phase sc_129) port_130)"
"                           (write-string \">\" port_130)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_96"
" make-_97"
" ?_98"
"(make-struct-field-accessor -ref_99 0 'owner)"
"(make-struct-field-accessor -ref_99 1 'phase)"
"(make-struct-field-mutator -set!_100 0 'owner)"
"(make-struct-field-mutator -set!_100 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_132 phase_133)"
"(let-values(((v_134)(representative-scope3.1(new-deserialize-scope-id!) kind_132 #f #f phase_133))) v_134)))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_135 bt_136 owner_137)"
"(begin(deserialize-scope-fill! s_135 bt_136)(set-representative-scope-owner! s_135 owner_137))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_138 make-_139 ?_140 -ref_141 -set!_142)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_163 reach_164)(reach_164(shifted-multi-scope-multi-scope sms_163))))"
"(cons"
" prop:serialize"
"(lambda(sms_165 ser-push!_166 state_167)"
"(begin"
"(ser-push!_166 'tag '#:shifted-multi-scope)"
"(ser-push!_166(shifted-multi-scope-phase sms_165))"
"(ser-push!_166(shifted-multi-scope-multi-scope sms_165)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_168 port_169 mode_170)"
"(begin"
"                           (write-string \"#<scope:\" port_169)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_168)) port_169)"
"                           (write-string \"@\" port_169)"
"(display(shifted-multi-scope-phase sms_168) port_169)"
"                           (write-string \">\" port_169)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_138"
" make-_139"
" ?_140"
"(make-struct-field-accessor -ref_141 0 'phase)"
"(make-struct-field-accessor -ref_141 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_171 multi-scope_172)(intern-shifted-multi-scope phase_171 multi-scope_172)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_173 multi-scope_174)"
"(letrec-values(((transaction-loop_175)"
"(lambda(boxed-table_176 key_177 make_178)"
"(let-values(((or-part_179)(hash-ref(unbox boxed-table_176) phase_173 #f)))"
"(if or-part_179"
" or-part_179"
"(let-values(((val_180)(make_178)))"
"(let-values(((current_181)(unbox boxed-table_176)))"
"(let-values(((next_182)(hash-set current_181 key_177 val_180)))"
"(if(box-cas! boxed-table_176 current_181 next_182)"
" val_180"
"(transaction-loop_175 boxed-table_176 key_177 make_178))))))))))"
"(if(phase? phase_173)"
"(let-values()"
"(let-values(((or-part_183)(hash-ref(unbox(multi-scope-shifted multi-scope_174)) phase_173 #f)))"
"(if or-part_183"
" or-part_183"
"(transaction-loop_175"
"(multi-scope-shifted multi-scope_174)"
" phase_173"
"(lambda()(shifted-multi-scope4.1 phase_173 multi-scope_174))))))"
"(let-values()"
"(let-values(((or-part_184)(hash-ref(unbox(multi-scope-label-shifted multi-scope_174)) phase_173 #f)))"
"(if or-part_184"
" or-part_184"
"(transaction-loop_175"
"(multi-scope-label-shifted multi-scope_174)"
" phase_173"
"(lambda()(shifted-multi-scope4.1 phase_173 multi-scope_174))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_185 make-_186 ?_187 -ref_188 -set!_189)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_185 make-_186 ?_187(make-struct-field-accessor -ref_188 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_205)(scope1.1(new-scope-id!) kind_205 empty-binding-table)))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_206)"
"(lambda(name6_207 name7_208)"
"(let-values(((name_209)(if name7_208 name6_207 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_209(make-hasheqv)(box(hasheqv))(box(hash)))))))))"
"(case-lambda(()(new-multi-scope8_206 #f #f))((name6_210)(new-multi-scope8_206 name6_210 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_211 phase_212)"
"(let-values(((or-part_213)(hash-ref(multi-scope-scopes ms_211) phase_212 #f)))"
"(if or-part_213"
" or-part_213"
"(let-values(((s_214)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_211 phase_212)))"
"(begin(hash-set!(multi-scope-scopes ms_211) phase_212 s_214) s_214))))))"
"(define-values(scope>?)(lambda(sc1_215 sc2_216)(>(scope-id sc1_215)(scope-id sc2_216))))"
"(define-values(scope<?)(lambda(sc1_217 sc2_218)(<(scope-id sc1_217)(scope-id sc2_218))))"
"(define-values"
"(shifted-multi-scope<?)"
"(lambda(sms1_219 sms2_220)"
"(let-values(((ms1_221)(shifted-multi-scope-multi-scope sms1_219)))"
"(let-values(((ms2_222)(shifted-multi-scope-multi-scope sms2_220)))"
"(if(eq? ms1_221 ms2_222)"
"(let-values(((p1_223)(shifted-multi-scope-phase sms1_219))((p2_224)(shifted-multi-scope-phase sms2_220)))"
"(if(shifted-to-label-phase? p1_223)"
"(let-values()"
"(if(shifted-to-label-phase? p2_224)"
"(let-values()(phase<?(shifted-to-label-phase-from p1_223)(shifted-to-label-phase-from p2_224)))"
"(let-values() #f)))"
"(if(shifted-to-label-phase? p2_224)(let-values() #t)(let-values()(phase<? p1_223 p2_224)))))"
"(<(multi-scope-id ms1_221)(multi-scope-id ms2_222)))))))"
"(define-values"
"(apply-scope)"
"(lambda(s_225 sc_226 op_227 prop-op_228)"
"(if(shifted-multi-scope? sc_226)"
"(let-values(((the-struct_229) s_225))"
"(if(syntax?$1 the-struct_229)"
"(let-values(((shifted-multi-scopes37_230)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_225)"
"(lambda(smss_232)(op_227(fallback-first smss_232) sc_226))))"
"((scope-propagations38_231)"
"(if(datum-has-elements?(syntax-content s_225))"
"(prop-op_228"
"(syntax-scope-propagations s_225)"
" sc_226"
"(syntax-scopes s_225)"
"(syntax-shifted-multi-scopes s_225))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_229)"
"(syntax-scopes the-struct_229)"
" shifted-multi-scopes37_230"
" scope-propagations38_231"
"(syntax-mpi-shifts the-struct_229)"
"(syntax-srcloc the-struct_229)"
"(syntax-props the-struct_229)"
"(syntax-inspector the-struct_229)"
"(syntax-tamper the-struct_229)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_229)))"
"(let-values(((the-struct_233) s_225))"
"(if(syntax?$1 the-struct_233)"
"(let-values(((scopes39_234)(op_227(syntax-scopes s_225) sc_226))"
"((scope-propagations40_235)"
"(if(datum-has-elements?(syntax-content s_225))"
"(prop-op_228"
"(syntax-scope-propagations s_225)"
" sc_226"
"(syntax-scopes s_225)"
"(syntax-shifted-multi-scopes s_225))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_233)"
" scopes39_234"
"(syntax-shifted-multi-scopes the-struct_233)"
" scope-propagations40_235"
"(syntax-mpi-shifts the-struct_233)"
"(syntax-srcloc the-struct_233)"
"(syntax-props the-struct_233)"
"(syntax-inspector the-struct_233)"
"(syntax-tamper the-struct_233)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_233))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_236)"
"(let-values((()(begin(propagate-taint! s_236)(values))))"
"(let-values(((prop_237)(syntax-scope-propagations s_236)))"
"(if prop_237"
"(let-values(((new-content_238)"
"(non-syntax-map"
"(syntax-content s_236)"
"(lambda(tail?_239 x_240) x_240)"
"(lambda(sub-s_241)"
"(let-values(((the-struct_242) sub-s_241))"
"(if(syntax?$1 the-struct_242)"
"(let-values(((scopes41_243)"
"(propagation-apply prop_237(syntax-scopes sub-s_241) s_236))"
"((shifted-multi-scopes42_244)"
"(propagation-apply-shifted"
" prop_237"
"(syntax-shifted-multi-scopes sub-s_241)"
" s_236))"
"((scope-propagations43_245)"
"(propagation-merge"
" prop_237"
"(syntax-scope-propagations sub-s_241)"
"(syntax-scopes sub-s_241)"
"(syntax-shifted-multi-scopes sub-s_241))))"
"(syntax1.1"
"(syntax-content the-struct_242)"
" scopes41_243"
" shifted-multi-scopes42_244"
" scope-propagations43_245"
"(syntax-mpi-shifts the-struct_242)"
"(syntax-srcloc the-struct_242)"
"(syntax-props the-struct_242)"
"(syntax-inspector the-struct_242)"
"(syntax-tamper the-struct_242)))"
"                               (raise-argument-error 'struct-copy \"syntax?\" the-struct_242)))))))"
"(begin"
"(set-syntax-content! s_236 new-content_238)"
"(set-syntax-scope-propagations! s_236 #f)"
" new-content_238))"
"(syntax-content s_236))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_246)"
"(let-values(((content_247)(syntax-e/no-taint s_246)))"
"(if(not(tamper-armed?(syntax-tamper s_246)))"
"(let-values() content_247)"
"(if(datum-has-elements? content_247)"
"(let-values()(taint-content content_247))"
"(let-values() content_247))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_248)"
"(if(representative-scope? sc_248)"
"(intern-shifted-multi-scope(representative-scope-phase sc_248)(representative-scope-owner sc_248))"
" sc_248)))"
"(define-values"
"(add-scope)"
"(lambda(s_249 sc_250)(apply-scope s_249(generalize-scope sc_250) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_251 scs_252)"
"(let-values(((lst_253) scs_252))"
"(begin"
"(if(list? lst_253)(void)(let-values()(in-list lst_253)))"
"((letrec-values(((for-loop_254)"
"(lambda(s_255 lst_256)"
"(if(pair? lst_256)"
"(let-values(((sc_257)(unsafe-car lst_256)))"
"(let-values(((s_258)"
"(let-values(((s_259) s_255))"
"(let-values(((s_260)(let-values()(add-scope s_259 sc_257))))"
"(values s_260)))))"
"(for-loop_254 s_258(unsafe-cdr lst_256))))"
" s_255))))"
" for-loop_254)"
" s_251"
" lst_253)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_261 sc_262)(apply-scope s_261(generalize-scope sc_262) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_263 scs_264)"
"(let-values(((lst_265) scs_264))"
"(begin"
"(if(list? lst_265)(void)(let-values()(in-list lst_265)))"
"((letrec-values(((for-loop_266)"
"(lambda(s_267 lst_268)"
"(if(pair? lst_268)"
"(let-values(((sc_269)(unsafe-car lst_268)))"
"(let-values(((s_270)"
"(let-values(((s_271) s_267))"
"(let-values(((s_272)(let-values()(remove-scope s_271 sc_269))))"
"(values s_272)))))"
"(for-loop_266 s_270(unsafe-cdr lst_268))))"
" s_267))))"
" for-loop_266)"
" s_263"
" lst_265)))))"
"(define-values"
"(set-flip)"
"(lambda(s_273 e_274)(if(set-member? s_273 e_274)(set-remove s_273 e_274)(set-add s_273 e_274))))"
"(define-values"
"(flip-scope)"
"(lambda(s_275 sc_276)(apply-scope s_275(generalize-scope sc_276) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_277 scs_278)"
"(let-values(((lst_279) scs_278))"
"(begin"
"(if(list? lst_279)(void)(let-values()(in-list lst_279)))"
"((letrec-values(((for-loop_280)"
"(lambda(s_281 lst_282)"
"(if(pair? lst_282)"
"(let-values(((sc_283)(unsafe-car lst_282)))"
"(let-values(((s_284)"
"(let-values(((s_285) s_281))"
"(let-values(((s_286)(let-values()(flip-scope s_285 sc_283))))"
"(values s_286)))))"
"(for-loop_280 s_284(unsafe-cdr lst_282))))"
" s_281))))"
" for-loop_280)"
" s_277"
" lst_279)))))"
"(define-values"
"(push-scope)"
"(lambda(s_287 sms_288)"
"(let-values(((smss/maybe-fallbacks44_289) #f))"
"(let-values(((prev-result_290) #f))"
"(let-values(((push_291)"
"(lambda(smss/maybe-fallbacks_292)"
"(if(eq? smss/maybe-fallbacks44_289 smss/maybe-fallbacks_292)"
"(let-values() prev-result_290)"
"(let-values()"
"(let-values(((r_293)"
"(let-values()"
"(let-values(((smss_294)(fallback-first smss/maybe-fallbacks_292)))"
"(if(set-empty? smss_294)"
"(let-values()(set-add smss_294 sms_288))"
"(if(set-member? smss_294 sms_288)"
"(let-values() smss/maybe-fallbacks_292)"
"(let-values()"
"(fallback-push"
"(set-add smss_294 sms_288)"
" smss/maybe-fallbacks_292))))))))"
"(begin"
"(set! smss/maybe-fallbacks44_289 smss/maybe-fallbacks_292)"
"(set! prev-result_290 r_293)"
" r_293)))))))"
"(syntax-map"
" s_287"
"(lambda(tail?_295 x_296) x_296)"
"(lambda(s_297 d_298)"
"(let-values(((the-struct_299) s_297))"
"(if(syntax?$1 the-struct_299)"
"(let-values(((content45_300) d_298)"
"((shifted-multi-scopes46_301)(push_291(syntax-shifted-multi-scopes s_297))))"
"(syntax1.1"
" content45_300"
"(syntax-scopes the-struct_299)"
" shifted-multi-scopes46_301"
"(syntax-scope-propagations the-struct_299)"
"(syntax-mpi-shifts the-struct_299)"
"(syntax-srcloc the-struct_299)"
"(syntax-props the-struct_299)"
"(syntax-inspector the-struct_299)"
"(syntax-tamper the-struct_299)))"
"                 (raise-argument-error 'struct-copy \"syntax?\" the-struct_299))))"
" syntax-e/no-taint))))))"
"(define-values"
"(struct:propagation propagation10.1 propagation? propagation-prev-scs propagation-prev-smss propagation-scope-ops)"
"(let-values(((struct:_302 make-_303 ?_304 -ref_305 -set!_306)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'propagation)))))"
"(values"
" struct:_302"
" make-_303"
" ?_304"
"(make-struct-field-accessor -ref_305 0 'prev-scs)"
"(make-struct-field-accessor -ref_305 1 'prev-smss)"
"(make-struct-field-accessor -ref_305 2 'scope-ops))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_332 sc_333 prev-scs_334 prev-smss_335)"
"(if prop_332"
"(let-values(((the-struct_336) prop_332))"
"(if(propagation? the-struct_336)"
"(let-values(((scope-ops48_337)(hash-set(propagation-scope-ops prop_332) sc_333 'add)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_336)"
"(propagation-prev-smss the-struct_336)"
" scope-ops48_337))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_336)))"
"(propagation10.1 prev-scs_334 prev-smss_335(hasheq sc_333 'add)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_338 sc_339 prev-scs_340 prev-smss_341)"
"(if prop_338"
"(let-values(((the-struct_342) prop_338))"
"(if(propagation? the-struct_342)"
"(let-values(((scope-ops49_343)(hash-set(propagation-scope-ops prop_338) sc_339 'remove)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_342)"
"(propagation-prev-smss the-struct_342)"
" scope-ops49_343))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_342)))"
"(propagation10.1 prev-scs_340 prev-smss_341(hasheq sc_339 'remove)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_344 sc_345 prev-scs_346 prev-smss_347)"
"(if prop_344"
"(let-values(((ops_348)(propagation-scope-ops prop_344)))"
"(let-values(((current-op_349)(hash-ref ops_348 sc_345 #f)))"
"(if(if(eq? current-op_349 'flip)(= 1(hash-count ops_348)) #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_350) prop_344))"
"(if(propagation? the-struct_350)"
"(let-values(((scope-ops50_351)"
"(if(eq? current-op_349 'flip)"
"(hash-remove ops_348 sc_345)"
"(hash-set"
" ops_348"
" sc_345"
"(let-values(((tmp_352) current-op_349))"
"(if(equal? tmp_352 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_352 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_350)"
"(propagation-prev-smss the-struct_350)"
" scope-ops50_351))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_350)))))))"
"(propagation10.1 prev-scs_346 prev-smss_347(hasheq sc_345 'flip)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_353 scs_354 parent-s_355)"
"(if(not prop_353)"
"(let-values() scs_354)"
"(if(eq?(propagation-prev-scs prop_353) scs_354)"
"(let-values()(syntax-scopes parent-s_355))"
"(let-values()"
"(let-values(((ht_356)(propagation-scope-ops prop_353)))"
"(begin"
"(if((lambda(ht_357)(if(hash? ht_357)(immutable? ht_357) #f)) ht_356)"
"(void)"
"(let-values()(default-in-immutable-hash ht_356)))"
"((letrec-values(((for-loop_358)"
"(lambda(scs_359 i_360)"
"(if i_360"
"(let-values(((sc_361 op_362)"
"(unsafe-immutable-hash-iterate-key+value ht_356 i_360)))"
"(let-values(((scs_363)"
"(let-values(((scs_364) scs_359))"
"(if(not(shifted-multi-scope? sc_361))"
"(let-values(((scs_365) scs_364))"
"(let-values(((scs_366)"
"(let-values()"
"(let-values(((tmp_367) op_362))"
"(if(equal? tmp_367 'add)"
"(let-values()(set-add scs_365 sc_361))"
"(if(equal? tmp_367 'remove)"
"(let-values()"
"(set-remove scs_365 sc_361))"
"(let-values()"
"(set-flip scs_365 sc_361))))))))"
"(values scs_366)))"
" scs_364))))"
"(for-loop_358 scs_363(unsafe-immutable-hash-iterate-next ht_356 i_360))))"
" scs_359))))"
" for-loop_358)"
" scs_354"
"(unsafe-immutable-hash-iterate-first ht_356)))))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_368 smss_369 parent-s_370)"
"(if(not prop_368)"
"(let-values() smss_369)"
"(if(eq?(propagation-prev-smss prop_368) smss_369)"
"(let-values()(syntax-shifted-multi-scopes parent-s_370))"
"(let-values()"
"(let-values(((ht_371)(propagation-scope-ops prop_368)))"
"(begin"
"(if((lambda(ht_372)(if(hash? ht_372)(immutable? ht_372) #f)) ht_371)"
"(void)"
"(let-values()(default-in-immutable-hash ht_371)))"
"((letrec-values(((for-loop_373)"
"(lambda(smss_374 i_375)"
"(if i_375"
"(let-values(((sms_376 op_377)"
"(unsafe-immutable-hash-iterate-key+value ht_371 i_375)))"
"(let-values(((smss_378)"
"(let-values(((smss_379) smss_374))"
"(if(shifted-multi-scope? sms_376)"
"(let-values(((smss_380) smss_379))"
"(let-values(((smss_381)"
"(let-values()"
"(fallback-update-first"
" smss_380"
"(lambda(smss_382)"
"(let-values(((tmp_383) op_377))"
"(if(equal? tmp_383 'add)"
"(let-values()"
"(set-add smss_382 sms_376))"
"(if(equal? tmp_383 'remove)"
"(let-values()"
"(set-remove smss_382 sms_376))"
"(let-values()"
"(set-flip"
" smss_382"
" sms_376))))))))))"
"(values smss_381)))"
" smss_379))))"
"(for-loop_373 smss_378(unsafe-immutable-hash-iterate-next ht_371 i_375))))"
" smss_374))))"
" for-loop_373)"
" smss_369"
"(unsafe-immutable-hash-iterate-first ht_371)))))))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_384 base-prop_385 prev-scs_386 prev-smss_387)"
"(if(not prop_384)"
"(let-values() base-prop_385)"
"(if(not base-prop_385)"
"(let-values()(propagation10.1 prev-scs_386 prev-smss_387(propagation-scope-ops prop_384)))"
"(let-values()"
"(let-values(((new-ops_388)"
"(let-values(((ht_389)(propagation-scope-ops prop_384)))"
"(begin"
"(if((lambda(ht_390)(if(hash? ht_390)(immutable? ht_390) #f)) ht_389)"
"(void)"
"(let-values()(default-in-immutable-hash ht_389)))"
"((letrec-values(((for-loop_391)"
"(lambda(ops_392 i_393)"
"(if i_393"
"(let-values(((sc_394 op_395)"
"(unsafe-immutable-hash-iterate-key+value ht_389 i_393)))"
"(let-values(((ops_396)"
"(let-values(((ops_397) ops_392))"
"(let-values(((ops_398)"
"(let-values()"
"(let-values(((tmp_399) op_395))"
"(if(equal? tmp_399 'add)"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'add))"
"(if(equal? tmp_399 'remove)"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'remove))"
"(let-values()"
"(let-values(((current-op_400)"
"(hash-ref"
" ops_397"
" sc_394"
" #f)))"
"(let-values(((tmp_401)"
" current-op_400))"
"(if(equal?"
" tmp_401"
" 'add)"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'remove))"
"(if(equal?"
" tmp_401"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'add))"
"(if(equal?"
" tmp_401"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_397"
" sc_394))"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'flip))))))))))))))"
"(values ops_398)))))"
"(for-loop_391"
" ops_396"
"(unsafe-immutable-hash-iterate-next ht_389 i_393))))"
" ops_392))))"
" for-loop_391)"
"(propagation-scope-ops base-prop_385)"
"(unsafe-immutable-hash-iterate-first ht_389))))))"
"(if(zero?(hash-count new-ops_388))"
" #f"
"(let-values(((the-struct_402) base-prop_385))"
"(if(propagation? the-struct_402)"
"(let-values(((scope-ops51_403) new-ops_388))"
"(propagation10.1"
"(propagation-prev-scs the-struct_402)"
"(propagation-prev-smss the-struct_402)"
" scope-ops51_403))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_402))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_404 delta_405)"
"(if(zero-phase? delta_405)"
"(let-values() sms_404)"
"(if(label-phase? delta_405)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_404))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_404)))"
"(shifted-multi-scope-multi-scope sms_404)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_404))"
"(let-values() sms_404)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_405(shifted-multi-scope-phase sms_404))"
"(shifted-multi-scope-multi-scope sms_404))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_406 phase_407)"
"(if(eqv? phase_407 0)"
" s_406"
"(let-values()"
"(let-values(((smss52_408) #f))"
"(let-values(((prev-result_409) #f))"
"(let-values(((shift-all_410)"
"(lambda(smss_411)"
"(if(eq? smss52_408 smss_411)"
"(let-values() prev-result_409)"
"(let-values()"
"(let-values(((r_412)"
"(let-values()"
"(fallback-map"
" smss_411"
"(lambda(smss_413)"
"(let-values(((ht_414) smss_413))"
"(begin"
"(if((lambda(ht_415)(if(hash? ht_415)(immutable? ht_415) #f))"
" ht_414)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_414)))"
"((letrec-values(((for-loop_416)"
"(lambda(table_417 i_418)"
"(if i_418"
"(let-values(((sms_419)"
"(unsafe-immutable-hash-iterate-key"
" ht_414"
" i_418)))"
"(let-values(((table_420)"
"(let-values(((new-sms_421)"
"(shift-multi-scope"
" sms_419"
" phase_407)))"
"(begin"
" #t"
"((letrec-values(((for-loop_422)"
"(lambda(table_423)"
"(let-values()"
"(let-values(((table_424)"
"(let-values(((table_425)"
" table_423))"
"(if new-sms_421"
"(let-values(((table_426)"
" table_425))"
"(let-values(((table_427)"
"(let-values()"
"(let-values(((key_428"
" val_429)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_421)"
" #t))))"
"(hash-set"
" table_426"
" key_428"
" val_429)))))"
"(values"
" table_427)))"
" table_425))))"
" table_424)))))"
" for-loop_422)"
" table_417)))))"
"(for-loop_416"
" table_420"
"(unsafe-immutable-hash-iterate-next"
" ht_414"
" i_418))))"
" table_417))))"
" for-loop_416)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_414)))))))))"
"(begin(set! smss52_408 smss_411)(set! prev-result_409 r_412) r_412)))))))"
"(syntax-map"
" s_406"
"(lambda(tail?_430 d_431) d_431)"
"(lambda(s_432 d_433)"
"(let-values(((the-struct_434) s_432))"
"(if(syntax?$1 the-struct_434)"
"(let-values(((content53_435) d_433)"
"((shifted-multi-scopes54_436)(shift-all_410(syntax-shifted-multi-scopes s_432))))"
"(syntax1.1"
" content53_435"
"(syntax-scopes the-struct_434)"
" shifted-multi-scopes54_436"
"(syntax-scope-propagations the-struct_434)"
"(syntax-mpi-shifts the-struct_434)"
"(syntax-srcloc the-struct_434)"
"(syntax-props the-struct_434)"
"(syntax-inspector the-struct_434)"
"(syntax-tamper the-struct_434)))"
"                     (raise-argument-error 'struct-copy \"syntax?\" the-struct_434))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_437 src-scopes_438 dest-scopes_439)"
"(if(equal? src-scopes_438 dest-scopes_439)"
" s_437"
"(let-values(((src-smss_440 src-scs_441)"
"(set-partition"
"(let-values(((ht_444) src-scopes_438))"
"(begin"
"(if((lambda(ht_445)(if(hash? ht_445)(immutable? ht_445) #f)) ht_444)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_444)))"
"((letrec-values(((for-loop_446)"
"(lambda(table_447 i_448)"
"(if i_448"
"(let-values(((sc_449)(unsafe-immutable-hash-iterate-key ht_444 i_448)))"
"(let-values(((table_450)"
"(let-values(((table_451) table_447))"
"(let-values(((table_452)"
"(let-values()"
"(let-values(((key_453 val_454)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_449))"
" #t))))"
"(hash-set"
" table_451"
" key_453"
" val_454)))))"
"(values table_452)))))"
"(for-loop_446"
" table_450"
"(unsafe-immutable-hash-iterate-next ht_444 i_448))))"
" table_447))))"
" for-loop_446)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_444))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_442 dest-scs_443)"
"(set-partition"
"(let-values(((ht_455) dest-scopes_439))"
"(begin"
"(if((lambda(ht_456)(if(hash? ht_456)(immutable? ht_456) #f)) ht_455)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_455)))"
"((letrec-values(((for-loop_457)"
"(lambda(table_458 i_459)"
"(if i_459"
"(let-values(((sc_460)(unsafe-immutable-hash-iterate-key ht_455 i_459)))"
"(let-values(((table_461)"
"(let-values(((table_462) table_458))"
"(let-values(((table_463)"
"(let-values()"
"(let-values(((key_464 val_465)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_460))"
" #t))))"
"(hash-set"
" table_462"
" key_464"
" val_465)))))"
"(values table_463)))))"
"(for-loop_457"
" table_461"
"(unsafe-immutable-hash-iterate-next ht_455 i_459))))"
" table_458))))"
" for-loop_457)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_455))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs55_466) #f))"
"(let-values(((prev-result_467) #f))"
"(let-values(((swap-scs_468)"
"(lambda(scs_472)"
"(if(eq? scs55_466 scs_472)"
"(let-values() prev-result_467)"
"(let-values()"
"(let-values(((r_473)"
"(let-values()"
"(if(subset? src-scs_441 scs_472)"
"(set-union(set-subtract scs_472 src-scs_441) dest-scs_443)"
" scs_472))))"
"(begin(set! scs55_466 scs_472)(set! prev-result_467 r_473) r_473)))))))"
"(let-values(((smss56_469) #f))"
"(let-values(((prev-result_470) #f))"
"(let-values(((swap-smss_471)"
"(lambda(smss_474)"
"(if(eq? smss56_469 smss_474)"
"(let-values() prev-result_470)"
"(let-values()"
"(let-values(((r_475)"
"(let-values()"
"(fallback-update-first"
" smss_474"
"(lambda(smss_476)"
"(if(subset? src-smss_440 smss_476)"
"(set-union"
"(set-subtract smss_476 src-smss_440)"
" dest-smss_442)"
" smss_476))))))"
"(begin(set! smss56_469 smss_474)(set! prev-result_470 r_475) r_475)))))))"
"(syntax-map"
" s_437"
"(lambda(tail?_477 d_478) d_478)"
"(lambda(s_479 d_480)"
"(let-values(((the-struct_481) s_479))"
"(if(syntax?$1 the-struct_481)"
"(let-values(((content57_482) d_480)"
"((scopes58_483)(swap-scs_468(syntax-scopes s_479)))"
"((shifted-multi-scopes59_484)"
"(swap-smss_471(syntax-shifted-multi-scopes s_479))))"
"(syntax1.1"
" content57_482"
" scopes58_483"
" shifted-multi-scopes59_484"
"(syntax-scope-propagations the-struct_481)"
"(syntax-mpi-shifts the-struct_481)"
"(syntax-srcloc the-struct_481)"
"(syntax-props the-struct_481)"
"(syntax-inspector the-struct_481)"
"(syntax-tamper the-struct_481)))"
"                           (raise-argument-error 'struct-copy \"syntax?\" the-struct_481))))"
" syntax-e/no-taint)))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_485 phase_486)"
"(scope-set-at-fallback s_485(fallback-first(syntax-shifted-multi-scopes s_485)) phase_486)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_487 smss_488 phase_489)"
"(let-values(((ht_490) smss_488))"
"(begin"
"(if((lambda(ht_491)(if(hash? ht_491)(immutable? ht_491) #f)) ht_490)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_490)))"
"((letrec-values(((for-loop_492)"
"(lambda(scopes_493 i_494)"
"(if i_494"
"(let-values(((sms_495)(unsafe-immutable-hash-iterate-key ht_490 i_494)))"
"(let-values(((scopes_496)"
"(let-values(((scopes_497) scopes_493))"
"(if(let-values(((or-part_498)(label-phase? phase_489)))"
"(if or-part_498"
" or-part_498"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_495)))))"
"(let-values(((scopes_499) scopes_497))"
"(let-values(((scopes_500)"
"(let-values()"
"(set-add"
" scopes_499"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_495)"
"(let-values(((ph_501)"
"(shifted-multi-scope-phase"
" sms_495)))"
"(if(shifted-to-label-phase? ph_501)"
"(shifted-to-label-phase-from ph_501)"
"(phase- ph_501 phase_489))))))))"
"(values scopes_500)))"
" scopes_497))))"
"(for-loop_492 scopes_496(unsafe-immutable-hash-iterate-next ht_490 i_494))))"
" scopes_493))))"
" for-loop_492)"
"(syntax-scopes s_487)"
"(unsafe-immutable-hash-iterate-first ht_490))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_502)"
"(begin"
"      (if (set-empty? scopes_502) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_503) scopes_502))"
"(begin"
"(if((lambda(ht_504)(if(hash? ht_504)(immutable? ht_504) #f)) ht_503)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_503)))"
"((letrec-values(((for-loop_505)"
"(lambda(max-sc_506 i_507)"
"(if i_507"
"(let-values(((sc_508)(unsafe-immutable-hash-iterate-key ht_503 i_507)))"
"(let-values(((max-sc_509)"
"(let-values(((max-sc_510) max-sc_506))"
"(let-values(((max-sc_511)"
"(let-values()"
"(if(scope>? sc_508 max-sc_510) sc_508 max-sc_510))))"
"(values max-sc_511)))))"
"(for-loop_505 max-sc_509(unsafe-immutable-hash-iterate-next ht_503 i_507))))"
" max-sc_506))))"
" for-loop_505)"
"(set-first scopes_502)"
"(unsafe-immutable-hash-iterate-first ht_503)))))))"
"(define-values"
"(add-binding-in-scopes!16.1)"
"(lambda(just-for-nominal?11_512 just-for-nominal?12_513 scopes13_514 sym14_515 binding15_516)"
"(let-values(((scopes_517) scopes13_514))"
"(let-values(((sym_518) sym14_515))"
"(let-values(((binding_519) binding15_516))"
"(let-values(((just-for-nominal?_520)(if just-for-nominal?12_513 just-for-nominal?11_512 #f)))"
"(let-values()"
"(let-values(((max-sc_521)(find-max-scope scopes_517)))"
"(let-values(((bt_522)"
"(binding-table-add"
"(scope-binding-table max-sc_521)"
" scopes_517"
" sym_518"
" binding_519"
" just-for-nominal?_520)))"
"(begin(set-scope-binding-table! max-sc_521 bt_522)(clear-resolve-cache! sym_518)))))))))))"
"(define-values"
"(unpack17.1$3)"
"(lambda(given-kws_523 given-args_524 scopes13_525 sym14_526 binding15_527)"
"(let-values(((just-for-nominal?12_528)(pair? given-kws_523)))"
"(let-values(((just-for-nominal?11_529)(if just-for-nominal?12_528(car given-args_524)(void))))"
"(add-binding-in-scopes!16.1"
" just-for-nominal?11_529"
" just-for-nominal?12_528"
" scopes13_525"
" sym14_526"
" binding15_527)))))"
"(define-values"
"(add-binding-in-scopes!18.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_530 given-argc_531)"
"(if(= given-argc_531 5)"
"(let-values(((l1_532) given-kws_530))"
"(let-values(((l1_533)"
"(if(null? l1_532) l1_532(if(eq?(car l1_532) '#:just-for-nominal?)(cdr l1_532) l1_532))))"
"(null? l1_533)))"
" #f))"
"(case-lambda"
"((given-kws_534 given-args_535 scopes_536 sym_537 binding_538)"
"(unpack17.1$3 given-kws_534 given-args_535 scopes_536 sym_537 binding_538)))"
" null"
" '(#:just-for-nominal?)"
"(let-values(((add-binding-in-scopes!_539)"
"(case-lambda"
"((scopes_540 sym_541 binding_542)(unpack17.1$3 null null scopes_540 sym_541 binding_542)))))"
" add-binding-in-scopes!_539)))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_543 bulk-binding_544)"
"(let-values(((max-sc_545)(find-max-scope scopes_543)))"
"(let-values(((bt_546)(binding-table-add-bulk(scope-binding-table max-sc_545) scopes_543 bulk-binding_544)))"
"(begin(set-scope-binding-table! max-sc_545 bt_546)(clear-resolve-cache!))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_548)"
"(let-values(((ht_549)(syntax-scopes s_548)))"
"(begin"
"(if((lambda(ht_550)(if(hash? ht_550)(immutable? ht_550) #f)) ht_549)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_549)))"
"((letrec-values(((for-loop_551)"
"(lambda(result_552 i_553)"
"(if i_553"
"(let-values(((sc_554)(unsafe-immutable-hash-iterate-key ht_549 i_553)))"
"(let-values(((result_555)"
"(let-values(((result_556) result_552))"
"(let-values(((result_557)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_554) 'macro)))))"
"(values result_557)))))"
"(if(not((lambda x_558 result_555) sc_554))"
"(for-loop_551 result_555(unsafe-immutable-hash-iterate-next ht_549 i_553))"
" result_555)))"
" result_552))))"
" for-loop_551)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_549))))))"
"(define-values"
"(resolve29.1)"
"(lambda(ambiguous-value19_559"
" ambiguous-value23_560"
" exactly?20_561"
" exactly?24_562"
" extra-shifts22_563"
" extra-shifts26_564"
" get-scopes?21_565"
" get-scopes?25_566"
" s27_567"
" phase28_568)"
"(let-values(((s_569) s27_567))"
"(let-values(((phase_570) phase28_568))"
"(let-values(((ambiguous-value_571)(if ambiguous-value23_560 ambiguous-value19_559 #f)))"
"(let-values(((exactly?_572)(if exactly?24_562 exactly?20_561 #f)))"
"(let-values(((get-scopes?_573)(if get-scopes?25_566 get-scopes?21_565 #f)))"
"(let-values(((extra-shifts_574)(if extra-shifts26_564 extra-shifts22_563 null)))"
"(let-values()"
"(begin"
"                    (if (identifier? s_569) (void) (let-values () (raise-argument-error 'resolve \"identifier?\" s_569)))"
"                    (if (phase? phase_570) (void) (let-values () (raise-argument-error 'resolve \"phase?\" phase_570)))"
"((letrec-values(((fallback-loop_575)"
"(lambda(smss_576)"
"(let-values(((scopes_577)"
"(scope-set-at-fallback"
" s_569"
"(fallback-first smss_576)"
" phase_570)))"
"(let-values(((sym_578)(syntax-content s_569)))"
"(let-values(((c45305_579)"
"(if(not exactly?_572)"
"(if(not get-scopes?_573)"
"(resolve-cache-get sym_578 phase_570 scopes_577)"
" #f)"
" #f)))"
"(if c45305_579"
"((lambda(b_580) b_580) c45305_579)"
"(let-values()"
"(let-values(((candidates_581)"
"(alt-reverse"
"(let-values(((ht_583) scopes_577))"
"(begin"
"(if((lambda(ht_584)"
"(if(hash? ht_584)(immutable? ht_584) #f))"
" ht_583)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_583)))"
"((letrec-values(((for-loop_585)"
"(lambda(fold-var_586 i_587)"
"(if i_587"
"(let-values(((sc_588)"
"(unsafe-immutable-hash-iterate-key"
" ht_583"
" i_587)))"
"(let-values(((fold-var_589)"
"(let-values(((ht_590"
" bulk-bindings_591)"
"(let-values(((table_594)"
"(scope-binding-table"
" sc_588)))"
"(if(hash?"
" table_594)"
"(values"
"(hash-ref"
" table_594"
" sym_578"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_594)"
" sym_578"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_594)))))"
"((s_592)"
" s_569)"
"((extra-shifts_593)"
" extra-shifts_574))"
"(begin"
" #t"
"((letrec-values(((for-loop_595)"
"(lambda(fold-var_596"
" i_597"
" already-covered-scopes_598)"
"(if(not"
"(null?"
" i_597))"
"(let-values(((b-scopes_599)"
"(if(pair?"
" i_597)"
"(let-values()"
"(let-values(((scs_601)"
"(bulk-binding-at-scopes"
"(car"
" i_597))))"
"(if(not"
"(set-member?"
" already-covered-scopes_598"
" scs_601))"
" scs_601"
" #f)))"
"(let-values()"
"(hash-iterate-key"
" ht_590"
" i_597))))"
"((binding_600)"
"(if(pair?"
" i_597)"
"(let-values()"
"(let-values(((bulk_602)"
"(bulk-binding-at-bulk"
"(car"
" i_597))))"
"(let-values(((b-info_603)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_602"
" s_592"
" extra-shifts_593)"
" sym_578"
" #f)))"
"(if b-info_603"
"((bulk-binding-create"
" bulk_602)"
" bulk_602"
" b-info_603"
" sym_578)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_590"
" i_597)))))"
"(let-values(((fold-var_604)"
"(let-values(((fold-var_605)"
" fold-var_596))"
"(if(if b-scopes_599"
"(if binding_600"
"(subset?"
" b-scopes_599"
" scopes_577)"
" #f)"
" #f)"
"(let-values(((fold-var_606)"
" fold-var_605))"
"(let-values(((fold-var_607)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" b-scopes_599"
" binding_600))"
" fold-var_606))))"
"(values"
" fold-var_607)))"
" fold-var_605))))"
"(for-loop_595"
" fold-var_604"
"(if(pair?"
" i_597)"
"(let-values()"
"(cdr"
" i_597))"
"(let-values()"
"(let-values(((or-part_608)"
"(hash-iterate-next"
" ht_590"
" i_597)))"
"(if or-part_608"
" or-part_608"
" bulk-bindings_591))))"
"(if(if(pair?"
" bulk-bindings_591)"
"(if b-scopes_599"
"(if binding_600"
"(let-values(((or-part_609)"
"(not"
"(pair?"
" i_597))))"
"(if or-part_609"
" or-part_609"
"(not"
"(null?"
"(cdr"
" i_597)))))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(set-add"
" already-covered-scopes_598"
" b-scopes_599))"
"(let-values()"
" already-covered-scopes_598)))))"
" fold-var_596))))"
" for-loop_595)"
" fold-var_586"
"(let-values(((or-part_610)"
"(hash-iterate-first"
" ht_590)))"
"(if or-part_610"
" or-part_610"
" bulk-bindings_591))"
" '#hasheq())))))"
"(for-loop_585"
" fold-var_589"
"(unsafe-immutable-hash-iterate-next"
" ht_583"
" i_587))))"
" fold-var_586))))"
" for-loop_585)"
" null"
"(unsafe-immutable-hash-iterate-first ht_583)))))))"
"(let-values(((max-candidate_582)"
"(if(pair? candidates_581)"
"(let-values(((lst_611)(cdr candidates_581)))"
"(begin"
"(if(list? lst_611)"
"(void)"
"(let-values()(in-list lst_611)))"
"((letrec-values(((for-loop_612)"
"(lambda(max-c_613 lst_614)"
"(if(pair? lst_614)"
"(let-values(((c_615)"
"(unsafe-car"
" lst_614)))"
"(let-values(((max-c_616)"
"(let-values(((max-c_617)"
" max-c_613))"
"(let-values(((max-c_618)"
"(let-values()"
"(if(>"
"(set-count"
"(car"
" c_615))"
"(set-count"
"(car"
" max-c_617)))"
" c_615"
" max-c_617))))"
"(values"
" max-c_618)))))"
"(for-loop_612"
" max-c_616"
"(unsafe-cdr"
" lst_614))))"
" max-c_613))))"
" for-loop_612)"
"(car candidates_581)"
" lst_611)))"
" #f)))"
"(if max-candidate_582"
"(let-values()"
"(if(not"
"(let-values(((lst_619) candidates_581))"
"(begin"
"(if(list? lst_619)"
"(void)"
"(let-values()(in-list lst_619)))"
"((letrec-values(((for-loop_620)"
"(lambda(result_621 lst_622)"
"(if(pair? lst_622)"
"(let-values(((c_623)"
"(unsafe-car"
" lst_622)))"
"(let-values(((result_624)"
"(let-values(((result_625)"
" result_621))"
"(let-values(((result_626)"
"(let-values()"
"(let-values()"
"(subset?"
"(car"
" c_623)"
"(car"
" max-candidate_582))))))"
"(values"
" result_626)))))"
"(if(not"
"((lambda x_627"
"(not result_624))"
" c_623))"
"(for-loop_620"
" result_624"
"(unsafe-cdr lst_622))"
" result_624)))"
" result_621))))"
" for-loop_620)"
" #t"
" lst_619))))"
"(let-values()"
"(if(fallback? smss_576)"
"(fallback-loop_575(fallback-rest smss_576))"
" ambiguous-value_571))"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_578"
" phase_570"
" scopes_577"
"(cdr max-candidate_582))"
"(if(let-values(((or-part_628)(not exactly?_572)))"
"(if or-part_628"
" or-part_628"
"(equal?"
"(set-count scopes_577)"
"(set-count(car max-candidate_582)))))"
"(if get-scopes?_573"
"(car max-candidate_582)"
"(cdr max-candidate_582))"
" #f)))))"
"(let-values()"
"(if(fallback? smss_576)"
"(fallback-loop_575(fallback-rest smss_576))"
" #f)))))))))))))"
" fallback-loop_575)"
"(syntax-shifted-multi-scopes s_569))))))))))))"
"(define-values"
"(unpack30.1)"
"(lambda(given-kws_629 given-args_630 s27_631 phase28_632)"
"(let-values(((ambiguous-value23_633)(if(pair? given-kws_629)(eq? '#:ambiguous-value(car given-kws_629)) #f)))"
"(let-values(((ambiguous-value19_634)(if ambiguous-value23_633(car given-args_630)(void)))"
"((given-kws_635)(if ambiguous-value23_633(cdr given-kws_629) given-kws_629))"
"((given-args_636)(if ambiguous-value23_633(cdr given-args_630) given-args_630)))"
"(let-values(((exactly?24_637)(if(pair? given-kws_635)(eq? '#:exactly?(car given-kws_635)) #f)))"
"(let-values(((exactly?20_638)(if exactly?24_637(car given-args_636)(void)))"
"((given-kws_639)(if exactly?24_637(cdr given-kws_635) given-kws_635))"
"((given-args_640)(if exactly?24_637(cdr given-args_636) given-args_636)))"
"(let-values(((extra-shifts26_641)(if(pair? given-kws_639)(eq? '#:extra-shifts(car given-kws_639)) #f)))"
"(let-values(((extra-shifts22_642)(if extra-shifts26_641(car given-args_640)(void)))"
"((given-kws_643)(if extra-shifts26_641(cdr given-kws_639) given-kws_639))"
"((given-args_644)(if extra-shifts26_641(cdr given-args_640) given-args_640)))"
"(let-values(((get-scopes?25_645)(pair? given-kws_643)))"
"(let-values(((get-scopes?21_646)(if get-scopes?25_645(car given-args_644)(void))))"
"(resolve29.1"
" ambiguous-value19_634"
" ambiguous-value23_633"
" exactly?20_638"
" exactly?24_637"
" extra-shifts22_642"
" extra-shifts26_641"
" get-scopes?21_646"
" get-scopes?25_645"
" s27_631"
" phase28_632)))))))))))"
"(define-values"
"(resolve31.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_647 given-argc_648)"
"(if(= given-argc_648 4)"
"(let-values(((l1_649) given-kws_647))"
"(let-values(((l1_650)"
"(if(null? l1_649) l1_649(if(eq?(car l1_649) '#:ambiguous-value)(cdr l1_649) l1_649))))"
"(let-values(((l1_651) l1_650))"
"(let-values(((l1_652)(if(null? l1_651) l1_651(if(eq?(car l1_651) '#:exactly?)(cdr l1_651) l1_651))))"
"(let-values(((l1_653) l1_652))"
"(let-values(((l1_654)"
"(if(null? l1_653) l1_653(if(eq?(car l1_653) '#:extra-shifts)(cdr l1_653) l1_653))))"
"(let-values(((l1_655) l1_654))"
"(let-values(((l1_656)"
"(if(null? l1_655)"
" l1_655"
"(if(eq?(car l1_655) '#:get-scopes?)(cdr l1_655) l1_655))))"
"(null? l1_656)))))))))"
" #f))"
"(case-lambda"
"((given-kws_657 given-args_658 s_659 phase_660)(unpack30.1 given-kws_657 given-args_658 s_659 phase_660)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:get-scopes?)"
"(let-values(((resolve_661)(case-lambda((s_662 phase_663)(unpack30.1 null null s_662 phase_663))))) resolve_661)))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_664 b_665 phase_666)"
"(if(eq?(syntax-e$1 a_664)(syntax-e$1 b_665))"
"(equal?(syntax-scope-set a_664 phase_666)(syntax-scope-set b_665 phase_666))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 #f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_11"
"                               \"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
"      (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 #f)))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_19)"
"(begin"
"      (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_19)))"
"(alt-reverse"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(if(hash? ht_21)(immutable? ht_21) #f)) ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)(unsafe-immutable-hash-iterate-key+value ht_20 i_24)))"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_23))"
"(if(if(symbol? k_25)(symbol-interned? k_25) #f)"
"(let-values(((fold-var_29) fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons(let-values() k_25) fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(for-loop_22 fold-var_27(unsafe-immutable-hash-iterate-next ht_20 i_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first ht_20))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_31 key_32)"
"(if(hash-ref(syntax-props s_31) key_32 #f)"
"(let-values(((the-struct_33) s_31))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props3_34)(hash-remove(syntax-props s_31) key_32)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props3_34"
"(syntax-inspector the-struct_33)"
"(syntax-tamper the-struct_33)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))"
" s_31)))"
"(void)"
"(void)"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_26)(binding-free=id b_26))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_27)(if(full-binding? b_27)(full-binding-frame-id b_27) #f)))"
"(define-values(binding-free=id)(lambda(b_28)(if(full-binding? b_28)(full-binding-free=id b_28) #f)))"
"(void)"
"(void)"
"(define-values"
"(make-module-binding22.1)"
"(lambda(extra-inspector8_1"
" extra-inspector17_2"
" extra-nominal-bindings9_3"
" extra-nominal-bindings18_4"
" frame-id6_5"
" frame-id15_6"
" free=id7_7"
" free=id16_8"
" nominal-module2_9"
" nominal-module11_10"
" nominal-phase3_11"
" nominal-phase12_12"
" nominal-require-phase5_13"
" nominal-require-phase14_14"
" nominal-sym4_15"
" nominal-sym13_16"
" wrt1_17"
" wrt10_18"
" module19_19"
" phase20_20"
" sym21_21)"
"(let-values(((module_22) module19_19))"
"(let-values(((phase_23) phase20_20))"
"(let-values(((sym_24) sym21_21))"
"(let-values(((wrt-sym_25)(if wrt10_18 wrt1_17 sym_24)))"
"(let-values(((nominal-module_26)(if nominal-module11_10 nominal-module2_9 module_22)))"
"(let-values(((nominal-phase_27)(if nominal-phase12_12 nominal-phase3_11 phase_23)))"
"(let-values(((nominal-sym_28)(if nominal-sym13_16 nominal-sym4_15 sym_24)))"
"(let-values(((nominal-require-phase_29)(if nominal-require-phase14_14 nominal-require-phase5_13 0)))"
"(let-values(((frame-id_30)(if frame-id15_6 frame-id6_5 #f)))"
"(let-values(((free=id_31)(if free=id16_8 free=id7_7 #f)))"
"(let-values(((extra-inspector_32)(if extra-inspector17_2 extra-inspector8_1 #f)))"
"(let-values(((extra-nominal-bindings_33)"
"(if extra-nominal-bindings18_4 extra-nominal-bindings9_3 null)))"
"(let-values()"
"(if(let-values(((or-part_34) frame-id_30))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35) free=id_31))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36) extra-inspector_32))"
"(if or-part_36"
" or-part_36"
"(not"
"(if(eqv? nominal-phase_27 phase_23)"
"(if(eq? nominal-sym_28 sym_24)"
"(if(eqv? nominal-require-phase_29 0)"
"(null? extra-nominal-bindings_33)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding51.1"
" frame-id_30"
" free=id_31"
" module_22"
" phase_23"
" sym_24"
" nominal-module_26"
" nominal-phase_27"
" nominal-sym_28"
" nominal-require-phase_29"
" extra-inspector_32"
" extra-nominal-bindings_33))"
"(let-values()"
"(simple-module-binding52.1"
" module_22"
" phase_23"
" sym_24"
" nominal-module_26))))))))))))))))))"
"(define-values"
"(unpack23.1)"
"(lambda(given-kws_37 given-args_38 module19_39 phase20_40 sym21_41)"
"(let-values(((extra-inspector17_42)(if(pair? given-kws_37)(eq? '#:extra-inspector(car given-kws_37)) #f)))"
"(let-values(((extra-inspector8_43)(if extra-inspector17_42(car given-args_38)(void)))"
"((given-kws_44)(if extra-inspector17_42(cdr given-kws_37) given-kws_37))"
"((given-args_45)(if extra-inspector17_42(cdr given-args_38) given-args_38)))"
"(let-values(((extra-nominal-bindings18_46)"
"(if(pair? given-kws_44)(eq? '#:extra-nominal-bindings(car given-kws_44)) #f)))"
"(let-values(((extra-nominal-bindings9_47)(if extra-nominal-bindings18_46(car given-args_45)(void)))"
"((given-kws_48)(if extra-nominal-bindings18_46(cdr given-kws_44) given-kws_44))"
"((given-args_49)(if extra-nominal-bindings18_46(cdr given-args_45) given-args_45)))"
"(let-values(((frame-id15_50)(if(pair? given-kws_48)(eq? '#:frame-id(car given-kws_48)) #f)))"
"(let-values(((frame-id6_51)(if frame-id15_50(car given-args_49)(void)))"
"((given-kws_52)(if frame-id15_50(cdr given-kws_48) given-kws_48))"
"((given-args_53)(if frame-id15_50(cdr given-args_49) given-args_49)))"
"(let-values(((free=id16_54)(if(pair? given-kws_52)(eq? '#:free=id(car given-kws_52)) #f)))"
"(let-values(((free=id7_55)(if free=id16_54(car given-args_53)(void)))"
"((given-kws_56)(if free=id16_54(cdr given-kws_52) given-kws_52))"
"((given-args_57)(if free=id16_54(cdr given-args_53) given-args_53)))"
"(let-values(((nominal-module11_58)"
"(if(pair? given-kws_56)(eq? '#:nominal-module(car given-kws_56)) #f)))"
"(let-values(((nominal-module2_59)(if nominal-module11_58(car given-args_57)(void)))"
"((given-kws_60)(if nominal-module11_58(cdr given-kws_56) given-kws_56))"
"((given-args_61)(if nominal-module11_58(cdr given-args_57) given-args_57)))"
"(let-values(((nominal-phase12_62)"
"(if(pair? given-kws_60)(eq? '#:nominal-phase(car given-kws_60)) #f)))"
"(let-values(((nominal-phase3_63)(if nominal-phase12_62(car given-args_61)(void)))"
"((given-kws_64)(if nominal-phase12_62(cdr given-kws_60) given-kws_60))"
"((given-args_65)(if nominal-phase12_62(cdr given-args_61) given-args_61)))"
"(let-values(((nominal-require-phase14_66)"
"(if(pair? given-kws_64)"
"(eq? '#:nominal-require-phase(car given-kws_64))"
" #f)))"
"(let-values(((nominal-require-phase5_67)"
"(if nominal-require-phase14_66(car given-args_65)(void)))"
"((given-kws_68)"
"(if nominal-require-phase14_66(cdr given-kws_64) given-kws_64))"
"((given-args_69)"
"(if nominal-require-phase14_66(cdr given-args_65) given-args_65)))"
"(let-values(((nominal-sym13_70)"
"(if(pair? given-kws_68)(eq? '#:nominal-sym(car given-kws_68)) #f)))"
"(let-values(((nominal-sym4_71)(if nominal-sym13_70(car given-args_69)(void)))"
"((given-kws_72)(if nominal-sym13_70(cdr given-kws_68) given-kws_68))"
"((given-args_73)"
"(if nominal-sym13_70(cdr given-args_69) given-args_69)))"
"(let-values(((wrt10_74)(pair? given-kws_72)))"
"(let-values(((wrt1_75)(if wrt10_74(car given-args_73)(void))))"
"(make-module-binding22.1"
" extra-inspector8_43"
" extra-inspector17_42"
" extra-nominal-bindings9_47"
" extra-nominal-bindings18_46"
" frame-id6_51"
" frame-id15_50"
" free=id7_55"
" free=id16_54"
" nominal-module2_59"
" nominal-module11_58"
" nominal-phase3_63"
" nominal-phase12_62"
" nominal-require-phase5_67"
" nominal-require-phase14_66"
" nominal-sym4_71"
" nominal-sym13_70"
" wrt1_75"
" wrt10_74"
" module19_39"
" phase20_40"
" sym21_41)))))))))))))))))))))"
"(define-values"
"(make-module-binding24.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_76 given-argc_77)"
"(if(= given-argc_77 5)"
"(let-values(((l1_78) given-kws_76))"
"(let-values(((l1_79)(if(null? l1_78) l1_78(if(eq?(car l1_78) '#:extra-inspector)(cdr l1_78) l1_78))))"
"(let-values(((l1_80) l1_79))"
"(let-values(((l1_81)"
"(if(null? l1_80) l1_80(if(eq?(car l1_80) '#:extra-nominal-bindings)(cdr l1_80) l1_80))))"
"(let-values(((l1_82) l1_81))"
"(let-values(((l1_83)(if(null? l1_82) l1_82(if(eq?(car l1_82) '#:frame-id)(cdr l1_82) l1_82))))"
"(let-values(((l1_84) l1_83))"
"(let-values(((l1_85)"
"(if(null? l1_84) l1_84(if(eq?(car l1_84) '#:free=id)(cdr l1_84) l1_84))))"
"(let-values(((l1_86) l1_85))"
"(let-values(((l1_87)"
"(if(null? l1_86)"
" l1_86"
"(if(eq?(car l1_86) '#:nominal-module)(cdr l1_86) l1_86))))"
"(let-values(((l1_88) l1_87))"
"(let-values(((l1_89)"
"(if(null? l1_88)"
" l1_88"
"(if(eq?(car l1_88) '#:nominal-phase)(cdr l1_88) l1_88))))"
"(let-values(((l1_90) l1_89))"
"(let-values(((l1_91)"
"(if(null? l1_90)"
" l1_90"
"(if(eq?(car l1_90) '#:nominal-require-phase)(cdr l1_90) l1_90))))"
"(let-values(((l1_92) l1_91))"
"(let-values(((l1_93)"
"(if(null? l1_92)"
" l1_92"
"(if(eq?(car l1_92) '#:nominal-sym)(cdr l1_92) l1_92))))"
"(let-values(((l1_94) l1_93))"
"(let-values(((l1_95)"
"(if(null? l1_94)"
" l1_94"
"(if(eq?(car l1_94) '#:wrt)(cdr l1_94) l1_94))))"
"(null? l1_95)))))))))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_96 given-args_97 module_98 phase_99 sym_100)"
"(unpack23.1 given-kws_96 given-args_97 module_98 phase_99 sym_100)))"
" null"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:wrt)"
"(let-values(((make-module-binding_101)"
"(case-lambda((module_102 phase_103 sym_104)(unpack23.1 null null module_102 phase_103 sym_104)))))"
" make-module-binding_101)))"
"(define-values"
"(module-binding-update48.1)"
"(lambda(extra-inspector34_105"
" extra-inspector45_106"
" extra-nominal-bindings35_107"
" extra-nominal-bindings46_108"
" frame-id32_109"
" frame-id43_110"
" free=id33_111"
" free=id44_112"
" module25_113"
" module36_114"
" nominal-module28_115"
" nominal-module39_116"
" nominal-phase29_117"
" nominal-phase40_118"
" nominal-require-phase31_119"
" nominal-require-phase42_120"
" nominal-sym30_121"
" nominal-sym41_122"
" phase26_123"
" phase37_124"
" sym27_125"
" sym38_126"
" b47_127)"
"(let-values(((b_128) b47_127))"
"(let-values(((module_129)(if module36_114 module25_113(module-binding-module b_128))))"
"(let-values(((phase_130)(if phase37_124 phase26_123(module-binding-phase b_128))))"
"(let-values(((sym_131)(if sym38_126 sym27_125(module-binding-sym b_128))))"
"(let-values(((nominal-module_132)"
"(if nominal-module39_116 nominal-module28_115(module-binding-nominal-module b_128))))"
"(let-values(((nominal-phase_133)"
"(if nominal-phase40_118 nominal-phase29_117(module-binding-nominal-phase b_128))))"
"(let-values(((nominal-sym_134)"
"(if nominal-sym41_122 nominal-sym30_121(module-binding-nominal-sym b_128))))"
"(let-values(((nominal-require-phase_135)"
"(if nominal-require-phase42_120"
" nominal-require-phase31_119"
"(module-binding-nominal-require-phase b_128))))"
"(let-values(((frame-id_136)(if frame-id43_110 frame-id32_109(binding-frame-id b_128))))"
"(let-values(((free=id_137)(if free=id44_112 free=id33_111(binding-free=id b_128))))"
"(let-values(((extra-inspector_138)"
"(if extra-inspector45_106"
" extra-inspector34_105"
"(module-binding-extra-inspector b_128))))"
"(let-values(((extra-nominal-bindings_139)"
"(if extra-nominal-bindings46_108"
" extra-nominal-bindings35_107"
"(module-binding-extra-nominal-bindings b_128))))"
"(let-values()"
"(let-values(((...x/module-binding.rkt:66:2_140) make-module-binding24.1)"
"((module53_141) module_129)"
"((phase54_142) phase_130)"
"((sym55_143) sym_131)"
"((nominal-module56_144) nominal-module_132)"
"((nominal-phase57_145) nominal-phase_133)"
"((nominal-sym58_146) nominal-sym_134)"
"((nominal-require-phase59_147) nominal-require-phase_135)"
"((frame-id60_148) frame-id_136)"
"((free=id61_149) free=id_137)"
"((extra-inspector62_150) extra-inspector_138)"
"((extra-nominal-bindings63_151) extra-nominal-bindings_139))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" extra-inspector62_150"
" #t"
" extra-nominal-bindings63_151"
" #t"
" frame-id60_148"
" #t"
" free=id61_149"
" #t"
" nominal-module56_144"
" #t"
" nominal-phase57_145"
" #t"
" nominal-require-phase59_147"
" #t"
" nominal-sym58_146"
" #t"
" #f"
" #f"
" module53_141"
" phase54_142"
" sym55_143)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:66:2_140"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 5)"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" extra-inspector62_150"
" extra-nominal-bindings63_151"
" frame-id60_148"
" free=id61_149"
" nominal-module56_144"
" nominal-phase57_145"
" nominal-require-phase59_147"
" nominal-sym58_146)"
" module53_141"
" phase54_142"
" sym55_143))))))))))))))))))"
"(define-values"
"(unpack49.1$3)"
"(lambda(given-kws_152 given-args_153 b47_154)"
"(let-values(((extra-inspector45_155)(if(pair? given-kws_152)(eq? '#:extra-inspector(car given-kws_152)) #f)))"
"(let-values(((extra-inspector34_156)(if extra-inspector45_155(car given-args_153)(void)))"
"((given-kws_157)(if extra-inspector45_155(cdr given-kws_152) given-kws_152))"
"((given-args_158)(if extra-inspector45_155(cdr given-args_153) given-args_153)))"
"(let-values(((extra-nominal-bindings46_159)"
"(if(pair? given-kws_157)(eq? '#:extra-nominal-bindings(car given-kws_157)) #f)))"
"(let-values(((extra-nominal-bindings35_160)(if extra-nominal-bindings46_159(car given-args_158)(void)))"
"((given-kws_161)(if extra-nominal-bindings46_159(cdr given-kws_157) given-kws_157))"
"((given-args_162)(if extra-nominal-bindings46_159(cdr given-args_158) given-args_158)))"
"(let-values(((frame-id43_163)(if(pair? given-kws_161)(eq? '#:frame-id(car given-kws_161)) #f)))"
"(let-values(((frame-id32_164)(if frame-id43_163(car given-args_162)(void)))"
"((given-kws_165)(if frame-id43_163(cdr given-kws_161) given-kws_161))"
"((given-args_166)(if frame-id43_163(cdr given-args_162) given-args_162)))"
"(let-values(((free=id44_167)(if(pair? given-kws_165)(eq? '#:free=id(car given-kws_165)) #f)))"
"(let-values(((free=id33_168)(if free=id44_167(car given-args_166)(void)))"
"((given-kws_169)(if free=id44_167(cdr given-kws_165) given-kws_165))"
"((given-args_170)(if free=id44_167(cdr given-args_166) given-args_166)))"
"(let-values(((module36_171)(if(pair? given-kws_169)(eq? '#:module(car given-kws_169)) #f)))"
"(let-values(((module25_172)(if module36_171(car given-args_170)(void)))"
"((given-kws_173)(if module36_171(cdr given-kws_169) given-kws_169))"
"((given-args_174)(if module36_171(cdr given-args_170) given-args_170)))"
"(let-values(((nominal-module39_175)"
"(if(pair? given-kws_173)(eq? '#:nominal-module(car given-kws_173)) #f)))"
"(let-values(((nominal-module28_176)(if nominal-module39_175(car given-args_174)(void)))"
"((given-kws_177)(if nominal-module39_175(cdr given-kws_173) given-kws_173))"
"((given-args_178)(if nominal-module39_175(cdr given-args_174) given-args_174)))"
"(let-values(((nominal-phase40_179)"
"(if(pair? given-kws_177)(eq? '#:nominal-phase(car given-kws_177)) #f)))"
"(let-values(((nominal-phase29_180)(if nominal-phase40_179(car given-args_178)(void)))"
"((given-kws_181)(if nominal-phase40_179(cdr given-kws_177) given-kws_177))"
"((given-args_182)"
"(if nominal-phase40_179(cdr given-args_178) given-args_178)))"
"(let-values(((nominal-require-phase42_183)"
"(if(pair? given-kws_181)"
"(eq? '#:nominal-require-phase(car given-kws_181))"
" #f)))"
"(let-values(((nominal-require-phase31_184)"
"(if nominal-require-phase42_183(car given-args_182)(void)))"
"((given-kws_185)"
"(if nominal-require-phase42_183(cdr given-kws_181) given-kws_181))"
"((given-args_186)"
"(if nominal-require-phase42_183(cdr given-args_182) given-args_182)))"
"(let-values(((nominal-sym41_187)"
"(if(pair? given-kws_185)"
"(eq? '#:nominal-sym(car given-kws_185))"
" #f)))"
"(let-values(((nominal-sym30_188)"
"(if nominal-sym41_187(car given-args_186)(void)))"
"((given-kws_189)"
"(if nominal-sym41_187(cdr given-kws_185) given-kws_185))"
"((given-args_190)"
"(if nominal-sym41_187(cdr given-args_186) given-args_186)))"
"(let-values(((phase37_191)"
"(if(pair? given-kws_189)(eq? '#:phase(car given-kws_189)) #f)))"
"(let-values(((phase26_192)(if phase37_191(car given-args_190)(void)))"
"((given-kws_193)"
"(if phase37_191(cdr given-kws_189) given-kws_189))"
"((given-args_194)"
"(if phase37_191(cdr given-args_190) given-args_190)))"
"(let-values(((sym38_195)(pair? given-kws_193)))"
"(let-values(((sym27_196)(if sym38_195(car given-args_194)(void))))"
"(module-binding-update48.1"
" extra-inspector34_156"
" extra-inspector45_155"
" extra-nominal-bindings35_160"
" extra-nominal-bindings46_159"
" frame-id32_164"
" frame-id43_163"
" free=id33_168"
" free=id44_167"
" module25_172"
" module36_171"
" nominal-module28_176"
" nominal-module39_175"
" nominal-phase29_180"
" nominal-phase40_179"
" nominal-require-phase31_184"
" nominal-require-phase42_183"
" nominal-sym30_188"
" nominal-sym41_187"
" phase26_192"
" phase37_191"
" sym27_196"
" sym38_195"
" b47_154)))))))))))))))))))))))))"
"(define-values"
"(module-binding-update50.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_197 given-argc_198)"
"(if(= given-argc_198 3)"
"(let-values(((l1_199) given-kws_197))"
"(let-values(((l1_200)"
"(if(null? l1_199) l1_199(if(eq?(car l1_199) '#:extra-inspector)(cdr l1_199) l1_199))))"
"(let-values(((l1_201) l1_200))"
"(let-values(((l1_202)"
"(if(null? l1_201)"
" l1_201"
"(if(eq?(car l1_201) '#:extra-nominal-bindings)(cdr l1_201) l1_201))))"
"(let-values(((l1_203) l1_202))"
"(let-values(((l1_204)"
"(if(null? l1_203) l1_203(if(eq?(car l1_203) '#:frame-id)(cdr l1_203) l1_203))))"
"(let-values(((l1_205) l1_204))"
"(let-values(((l1_206)"
"(if(null? l1_205) l1_205(if(eq?(car l1_205) '#:free=id)(cdr l1_205) l1_205))))"
"(let-values(((l1_207) l1_206))"
"(let-values(((l1_208)"
"(if(null? l1_207)"
" l1_207"
"(if(eq?(car l1_207) '#:module)(cdr l1_207) l1_207))))"
"(let-values(((l1_209) l1_208))"
"(let-values(((l1_210)"
"(if(null? l1_209)"
" l1_209"
"(if(eq?(car l1_209) '#:nominal-module)(cdr l1_209) l1_209))))"
"(let-values(((l1_211) l1_210))"
"(let-values(((l1_212)"
"(if(null? l1_211)"
" l1_211"
"(if(eq?(car l1_211) '#:nominal-phase)(cdr l1_211) l1_211))))"
"(let-values(((l1_213) l1_212))"
"(let-values(((l1_214)"
"(if(null? l1_213)"
" l1_213"
"(if(eq?(car l1_213) '#:nominal-require-phase)"
"(cdr l1_213)"
" l1_213))))"
"(let-values(((l1_215) l1_214))"
"(let-values(((l1_216)"
"(if(null? l1_215)"
" l1_215"
"(if(eq?(car l1_215) '#:nominal-sym)(cdr l1_215) l1_215))))"
"(let-values(((l1_217) l1_216))"
"(let-values(((l1_218)"
"(if(null? l1_217)"
" l1_217"
"(if(eq?(car l1_217) '#:phase)(cdr l1_217) l1_217))))"
"(let-values(((l1_219) l1_218))"
"(let-values(((l1_220)"
"(if(null? l1_219)"
" l1_219"
"(if(eq?(car l1_219) '#:sym)(cdr l1_219) l1_219))))"
"(null? l1_220)))))))))))))))))))))))"
" #f))"
"(case-lambda((given-kws_221 given-args_222 b_223)(unpack49.1$3 given-kws_221 given-args_222 b_223)))"
" null"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:free=id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:phase"
" #:sym)"
"(let-values(((module-binding-update_224)(case-lambda((b_225)(unpack49.1$3 null null b_225)))))"
" module-binding-update_224)))"
"(define-values"
"(module-binding?)"
"(lambda(b_226)"
"(let-values(((or-part_227)(simple-module-binding? b_226)))"
"(if or-part_227 or-part_227(full-module-binding? b_226)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding51.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_228 make-_229 ?_230 -ref_231 -set!_232)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_288 ser-push!_289 state_290)"
"(let-values(((simplified-b_291)"
"(if(full-binding-frame-id b_288)"
"(let-values(((...x/module-binding.rkt:93:16_292) module-binding-update50.1)"
"((b65_293) b_288)"
"((temp66_294) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" temp66_294"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b65_293)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:93:16_292"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list temp66_294)"
" b65_293)))"
" b_288)))"
"(if(full-module-binding? simplified-b_291)"
"(let-values()"
"(begin"
"(ser-push!_289 'tag '#:module-binding)"
"(ser-push!_289(full-module-binding-module b_288))"
"(ser-push!_289(full-module-binding-sym b_288))"
"(ser-push!_289(full-module-binding-phase b_288))"
"(ser-push!_289(full-module-binding-nominal-module b_288))"
"(ser-push!_289(full-module-binding-nominal-phase b_288))"
"(ser-push!_289(full-module-binding-nominal-sym b_288))"
"(ser-push!_289(full-module-binding-nominal-require-phase b_288))"
"(ser-push!_289(full-binding-free=id b_288))"
"(if(full-module-binding-extra-inspector b_288)"
"(ser-push!_289 'tag '#:inspector)"
"(ser-push!_289 #f))"
"(ser-push!_289(full-module-binding-extra-nominal-bindings b_288))))"
"(let-values()(ser-push!_289 simplified-b_291)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_228"
" make-_229"
" ?_230"
"(make-struct-field-accessor -ref_231 0 'module)"
"(make-struct-field-accessor -ref_231 1 'phase)"
"(make-struct-field-accessor -ref_231 2 'sym)"
"(make-struct-field-accessor -ref_231 3 'nominal-module)"
"(make-struct-field-accessor -ref_231 4 'nominal-phase)"
"(make-struct-field-accessor -ref_231 5 'nominal-sym)"
"(make-struct-field-accessor -ref_231 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_231 7 'extra-inspector)"
"(make-struct-field-accessor -ref_231 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding52.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_295 make-_296 ?_297 -ref_298 -set!_299)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_330 ser-push!_331 state_332)"
"(begin"
"(ser-push!_331 'tag '#:simple-module-binding)"
"(ser-push!_331(simple-module-binding-module b_330))"
"(ser-push!_331(simple-module-binding-sym b_330))"
"(ser-push!_331(simple-module-binding-phase b_330))"
"(ser-push!_331(simple-module-binding-nominal-module b_330))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_295"
" make-_296"
" ?_297"
"(make-struct-field-accessor -ref_298 0 'module)"
"(make-struct-field-accessor -ref_298 1 'phase)"
"(make-struct-field-accessor -ref_298 2 'sym)"
"(make-struct-field-accessor -ref_298 3 'nominal-module))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_333"
" sym_334"
" phase_335"
" nominal-module_336"
" nominal-phase_337"
" nominal-sym_338"
" nominal-require-phase_339"
" free=id_340"
" extra-inspector_341"
" extra-nominal-bindings_342)"
"(let-values(((...x/module-binding.rkt:131:2_343) make-module-binding24.1)"
"((module68_344) module_333)"
"((phase69_345) phase_335)"
"((sym70_346) sym_334)"
"((nominal-module71_347) nominal-module_336)"
"((nominal-phase72_348) nominal-phase_337)"
"((nominal-sym73_349) nominal-sym_338)"
"((nominal-require-phase74_350) nominal-require-phase_339)"
"((free=id75_351) free=id_340)"
"((extra-inspector76_352) extra-inspector_341)"
"((extra-nominal-bindings77_353) extra-nominal-bindings_342))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" extra-inspector76_352"
" #t"
" extra-nominal-bindings77_353"
" #t"
" #f"
" #f"
" free=id75_351"
" #t"
" nominal-module71_347"
" #t"
" nominal-phase72_348"
" #t"
" nominal-require-phase74_350"
" #t"
" nominal-sym73_349"
" #t"
" #f"
" #f"
" module68_344"
" phase69_345"
" sym70_346)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:131:2_343"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 5)"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" extra-inspector76_352"
" extra-nominal-bindings77_353"
" free=id75_351"
" nominal-module71_347"
" nominal-phase72_348"
" nominal-require-phase74_350"
" nominal-sym73_349)"
" module68_344"
" phase69_345"
" sym70_346)))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_354 sym_355 phase_356 nominal-module_357)"
"(simple-module-binding52.1 module_354 phase_356 sym_355 nominal-module_357)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_358)"
"(if(simple-module-binding? b_358)(simple-module-binding-module b_358)(full-module-binding-module b_358))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_359)"
"(if(simple-module-binding? b_359)(simple-module-binding-phase b_359)(full-module-binding-phase b_359))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_360)"
"(if(simple-module-binding? b_360)(simple-module-binding-sym b_360)(full-module-binding-sym b_360))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_361)"
"(if(simple-module-binding? b_361)"
"(simple-module-binding-nominal-module b_361)"
"(full-module-binding-nominal-module b_361))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_362)"
"(if(simple-module-binding? b_362)(simple-module-binding-phase b_362)(full-module-binding-nominal-phase b_362))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_363)"
"(if(simple-module-binding? b_363)(simple-module-binding-sym b_363)(full-module-binding-nominal-sym b_363))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_364)(if(simple-module-binding? b_364) 0(full-module-binding-nominal-require-phase b_364))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_365)(if(simple-module-binding? b_365) #f(full-module-binding-extra-inspector b_365))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_366)(if(simple-module-binding? b_366) null(full-module-binding-extra-nominal-bindings b_366))))"
"(void)"
"(void)"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_23 ser-push!_24 state_25)"
"(begin"
"(ser-push!_24 'tag '#:local-binding)"
"(ser-push!_24(full-local-binding-key b_23))"
"(ser-push!_24(full-binding-free=id b_23))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_26 free=id_27)(full-local-binding1.1 #f free=id_27 key_26)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_28 frame-id4_29 free=id3_30 free=id5_31 key6_32)"
"(let-values(((key_33) key6_32))"
"(let-values(((frame-id_34)(if frame-id4_29 frame-id2_28 #f)))"
"(let-values(((free=id_35)(if free=id5_31 free=id3_30 #f)))"
"(let-values()"
"(if(if(not frame-id_34)(not free=id_35) #f)"
"(let-values() key_33)"
"(let-values()(full-local-binding1.1 frame-id_34 free=id_35 key_33)))))))))"
"(define-values"
"(unpack8.1$1)"
"(lambda(given-kws_36 given-args_37 key6_38)"
"(let-values(((frame-id4_39)(if(pair? given-kws_36)(eq? '#:frame-id(car given-kws_36)) #f)))"
"(let-values(((frame-id2_40)(if frame-id4_39(car given-args_37)(void)))"
"((given-kws_41)(if frame-id4_39(cdr given-kws_36) given-kws_36))"
"((given-args_42)(if frame-id4_39(cdr given-args_37) given-args_37)))"
"(let-values(((free=id5_43)(pair? given-kws_41)))"
"(let-values(((free=id3_44)(if free=id5_43(car given-args_42)(void))))"
"(make-local-binding7.1 frame-id2_40 frame-id4_39 free=id3_44 free=id5_43 key6_38)))))))"
"(define-values"
"(make-local-binding9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_45 given-argc_46)"
"(if(= given-argc_46 3)"
"(let-values(((l1_47) given-kws_45))"
"(let-values(((l1_48)(if(null? l1_47) l1_47(if(eq?(car l1_47) '#:frame-id)(cdr l1_47) l1_47))))"
"(let-values(((l1_49) l1_48))"
"(let-values(((l1_50)(if(null? l1_49) l1_49(if(eq?(car l1_49) '#:free=id)(cdr l1_49) l1_49))))"
"(null? l1_50)))))"
" #f))"
"(case-lambda((given-kws_51 given-args_52 key_53)(unpack8.1$1 given-kws_51 given-args_52 key_53)))"
" null"
" '(#:frame-id #:free=id)"
"(let-values(((make-local-binding_54)(case-lambda((key_55)(unpack8.1$1 null null key_55)))))"
" make-local-binding_54)))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_56 frame-id14_57 free=id12_58 free=id15_59 key10_60 key13_61 b16_62)"
"(let-values(((b_63) b16_62))"
"(let-values(((key_64)(if key13_61 key10_60(local-binding-key b_63))))"
"(let-values(((frame-id_65)(if frame-id14_57 frame-id11_56(binding-frame-id b_63))))"
"(let-values(((free=id_66)(if free=id15_59 free=id12_58(binding-free=id b_63))))"
"(let-values()"
"(let-values(((...ax/local-binding.rkt:49:2_67) make-local-binding9.1)"
"((key21_68) key_64)"
"((frame-id22_69) frame-id_65)"
"((free=id23_70) free=id_66))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id22_69 #t free=id23_70 #t key21_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ax/local-binding.rkt:49:2_67"
" keyword-procedure-extract"
" '(#:frame-id #:free=id)"
" 3)"
" '(#:frame-id #:free=id)"
"(list frame-id22_69 free=id23_70)"
" key21_68))))))))))"
"(define-values"
"(unpack18.1$3)"
"(lambda(given-kws_71 given-args_72 b16_73)"
"(let-values(((frame-id14_74)(if(pair? given-kws_71)(eq? '#:frame-id(car given-kws_71)) #f)))"
"(let-values(((frame-id11_75)(if frame-id14_74(car given-args_72)(void)))"
"((given-kws_76)(if frame-id14_74(cdr given-kws_71) given-kws_71))"
"((given-args_77)(if frame-id14_74(cdr given-args_72) given-args_72)))"
"(let-values(((free=id15_78)(if(pair? given-kws_76)(eq? '#:free=id(car given-kws_76)) #f)))"
"(let-values(((free=id12_79)(if free=id15_78(car given-args_77)(void)))"
"((given-kws_80)(if free=id15_78(cdr given-kws_76) given-kws_76))"
"((given-args_81)(if free=id15_78(cdr given-args_77) given-args_77)))"
"(let-values(((key13_82)(pair? given-kws_80)))"
"(let-values(((key10_83)(if key13_82(car given-args_81)(void))))"
"(local-binding-update17.1"
" frame-id11_75"
" frame-id14_74"
" free=id12_79"
" free=id15_78"
" key10_83"
" key13_82"
" b16_73)))))))))"
"(define-values"
"(local-binding-update19.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_84 given-argc_85)"
"(if(= given-argc_85 3)"
"(let-values(((l1_86) given-kws_84))"
"(let-values(((l1_87)(if(null? l1_86) l1_86(if(eq?(car l1_86) '#:frame-id)(cdr l1_86) l1_86))))"
"(let-values(((l1_88) l1_87))"
"(let-values(((l1_89)(if(null? l1_88) l1_88(if(eq?(car l1_88) '#:free=id)(cdr l1_88) l1_88))))"
"(let-values(((l1_90) l1_89))"
"(let-values(((l1_91)(if(null? l1_90) l1_90(if(eq?(car l1_90) '#:key)(cdr l1_90) l1_90))))"
"(null? l1_91)))))))"
" #f))"
"(case-lambda((given-kws_92 given-args_93 b_94)(unpack18.1$3 given-kws_92 given-args_93 b_94)))"
" null"
" '(#:frame-id #:free=id #:key)"
"(let-values(((local-binding-update_95)(case-lambda((b_96)(unpack18.1$3 null null b_96)))))"
" local-binding-update_95)))"
"(define-values(local-binding-key)(lambda(b_97)(if(full-local-binding? b_97)(full-local-binding-key b_97) b_97)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer)))))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'id)))))"
"(lambda(id_36)"
"(begin"
"(if(identifier? id_36)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_36)))"
"(rename-transformer1_12 id_36))))))"
"(define-values(1/rename-transformer-target)(lambda(t_37)((rename-transformer-value t_37) t_37)))"
"(void)"
"(void)"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((...r/syntax/binding.rkt:45:13_7) resolve+shift22.1)"
"((a34_8) a_1)"
"((a-phase35_9) a-phase_3)"
"((temp36_10) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f temp36_10 #t a34_8 a-phase35_9)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:45:13_7"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp36_10)"
" a34_8"
" a-phase35_9)))))"
"(let-values(((bb_6)"
"(let-values(((...r/syntax/binding.rkt:46:13_11) resolve+shift22.1)"
"((b37_12) b_2)"
"((b-phase38_13) b-phase_4)"
"((temp39_14) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f temp39_14 #t b37_12 b-phase38_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:46:13_11"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp39_14)"
" b37_12"
" b-phase38_13)))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) #f))"
"        (let-values () (error \"bad binding\" ab_16))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_18 bb_19)"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_18))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_19)))"
"(if(eqv?(module-binding-nominal-require-phase ab_18)(module-binding-nominal-require-phase bb_19))"
"(eqv?(module-binding-nominal-sym ab_18)(module-binding-nominal-sym bb_19))"
" #f)"
" #f)))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_20 phase_21)"
"(let-values(((b_22)"
"(let-values(((...r/syntax/binding.rkt:81:12_23) resolve+shift22.1)"
"((id40_24) id_20)"
"((phase41_25) phase_21)"
"((temp42_26) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f temp42_26 #t id40_24 phase41_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:81:12_23"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp42_26)"
" id40_24"
" phase41_25)))))"
"(if(symbol? b_22)"
"(let-values() b_22)"
"(if(module-binding? b_22)"
"(let-values()(module-binding-sym b_22))"
"(if(local-binding? b_22)(let-values()(local-binding-key b_22))(let-values()(syntax-e$1 id_20))))))))"
"(define-values"
"(identifier-binding$1)"
"(lambda(id_27 phase_28)"
"(let-values(((b_29)"
"(let-values(((id43_30) id_27)((phase44_31) phase_28))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f id43_30 phase44_31)"
"(resolve+shift22.1 id43_30 phase44_31)))))"
"(if(module-binding? b_29)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_29))"
" #f"
"(list"
"(module-binding-module b_29)"
"(module-binding-sym b_29)"
"(module-binding-nominal-module b_29)"
"(module-binding-nominal-sym b_29)"
"(module-binding-phase b_29)"
"(module-binding-nominal-require-phase b_29)"
"(module-binding-nominal-phase b_29))))"
"(if(local-binding? b_29)(let-values() 'lexical)(let-values() #f))))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_32 id_33 phase_34)"
"(if(1/rename-transformer? val_32)"
"(let-values()"
"(let-values(((free=id_35)(1/rename-transformer-target val_32)))"
"(if(syntax-property$1 free=id_35 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_36)"
"(let-values(((...r/syntax/binding.rkt:113:16_37) resolve+shift22.1)"
"((id48_38) id_33)"
"((phase49_39) phase_34)"
"((temp50_40) #t)"
"((temp51_41) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f temp50_40 #t #f #f temp51_41 #t #f #f id48_38 phase49_39)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:113:16_37"
" keyword-procedure-extract"
" '(#:exactly? #:immediate?)"
" 4)"
" '(#:exactly? #:immediate?)"
"(list temp50_40 temp51_41)"
" id48_38"
" phase49_39)))))"
"(let-values(((temp45_42)(syntax-scope-set id_33 phase_34))"
"((temp46_43)(syntax-e$1 id_33))"
"((temp47_44)(binding-set-free=id b_36 free=id_35)))"
"(if(variable-reference-constant?(#%variable-reference add-binding-in-scopes!18.1))"
"(add-binding-in-scopes!16.1 #f #f temp45_42 temp46_43 temp47_44)"
"(add-binding-in-scopes!18.1 temp45_42 temp46_43 temp47_44))))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_45 free=id_46)"
"(if(module-binding? b_45)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:119:24_47) module-binding-update50.1)"
"((b52_48) b_45)"
"((free=id53_49) free=id_46))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" free=id53_49"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b52_48)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:119:24_47"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id53_49)"
" b52_48))))"
"(if(local-binding? b_45)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:120:23_50) local-binding-update19.1)"
"((b54_51) b_45)"
"((free=id55_52) free=id_46))"
"(if(variable-reference-constant?(#%variable-reference local-binding-update19.1))"
"(local-binding-update17.1 #f #f free=id55_52 #t #f #f b54_51)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:120:23_50"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id55_52)"
" b54_51))))"
"        (let-values () (error \"bad binding for free=id:\" b_45))))))"
"(define-values"
"(syntax-module-path-index-shift)"
"(let-values(((syntax-module-path-index-shift6_53)"
"(lambda(s3_54 from-mpi4_55 to-mpi5_56 inspector1_57 inspector2_58)"
"(let-values(((s_59) s3_54))"
"(let-values(((from-mpi_60) from-mpi4_55))"
"(let-values(((to-mpi_61) to-mpi5_56))"
"(let-values(((inspector_62)(if inspector2_58 inspector1_57 #f)))"
"(let-values()"
"(if(eq? from-mpi_60 to-mpi_61)"
"(let-values()(if inspector_62(syntax-set-inspector s_59 inspector_62) s_59))"
"(let-values()"
"(let-values(((shift_63)(cons from-mpi_60 to-mpi_61)))"
"(let-values(((shifts56_64) #f))"
"(let-values(((prev-result_65) #f))"
"(let-values(((add-shift_66)"
"(lambda(shifts_67)"
"(if(eq? shifts56_64 shifts_67)"
"(let-values() prev-result_65)"
"(let-values()"
"(let-values(((r_68)"
"(let-values()(cons shift_63 shifts_67))))"
"(begin"
"(set! shifts56_64 shifts_67)"
"(set! prev-result_65 r_68)"
" r_68)))))))"
"(syntax-map"
" s_59"
"(lambda(tail?_69 d_70) d_70)"
"(lambda(s_71 d_72)"
"(let-values(((the-struct_73) s_71))"
"(if(syntax?$1 the-struct_73)"
"(let-values(((content57_74) d_72)"
"((mpi-shifts58_75)(add-shift_66(syntax-mpi-shifts s_71)))"
"((inspector59_76)"
"(let-values(((or-part_77)(syntax-inspector s_71)))"
"(if or-part_77 or-part_77 inspector_62))))"
"(syntax1.1"
" content57_74"
"(syntax-scopes the-struct_73)"
"(syntax-shifted-multi-scopes the-struct_73)"
"(syntax-scope-propagations the-struct_73)"
" mpi-shifts58_75"
"(syntax-srcloc the-struct_73)"
"(syntax-props the-struct_73)"
" inspector59_76"
"(syntax-tamper the-struct_73)))"
"                                               (raise-argument-error 'struct-copy \"syntax?\" the-struct_73))))"
" syntax-e/no-taint)))))))))))))))"
"(case-lambda"
"((s_78 from-mpi_79 to-mpi_80)(syntax-module-path-index-shift6_53 s_78 from-mpi_79 to-mpi_80 #f #f))"
"((s_81 from-mpi_82 to-mpi_83 inspector1_84)"
"(syntax-module-path-index-shift6_53 s_81 from-mpi_82 to-mpi_83 inspector1_84 #t)))))"
"(define-values"
"(resolve+shift20.1)"
"(lambda(ambiguous-value8_85"
" ambiguous-value13_86"
" exactly?9_87"
" exactly?14_88"
" extra-shifts12_89"
" extra-shifts17_90"
" immediate?10_91"
" immediate?15_92"
" unbound-sym?11_93"
" unbound-sym?16_94"
" s18_95"
" phase19_96)"
"(let-values(((s_97) s18_95))"
"(let-values(((phase_98) phase19_96))"
"(let-values(((ambiguous-value_99)(if ambiguous-value13_86 ambiguous-value8_85 #f)))"
"(let-values(((exactly?_100)(if exactly?14_88 exactly?9_87 #f)))"
"(let-values(((immediate?_101)(if immediate?15_92 immediate?10_91 exactly?_100)))"
"(let-values(((unbound-sym?_102)(if unbound-sym?16_94 unbound-sym?11_93 #f)))"
"(let-values(((extra-shifts_103)(if extra-shifts17_90 extra-shifts12_89 null)))"
"(let-values()"
"(let-values(((immediate-b_104)"
"(let-values(((...r/syntax/binding.rkt:162:22_106) resolve31.1)"
"((s60_107) s_97)"
"((phase61_108) phase_98)"
"((ambiguous-value62_109) ambiguous-value_99)"
"((exactly?63_110) exactly?_100)"
"((extra-shifts64_111) extra-shifts_103))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1"
" ambiguous-value62_109"
" #t"
" exactly?63_110"
" #t"
" extra-shifts64_111"
" #t"
" #f"
" #f"
" s60_107"
" phase61_108)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:162:22_106"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(list ambiguous-value62_109 exactly?63_110 extra-shifts64_111)"
" s60_107"
" phase61_108)))))"
"(let-values(((b_105)"
"(if(if immediate-b_104"
"(if(not immediate?_101)(binding-free=id immediate-b_104) #f)"
" #f)"
"(let-values(((...r/syntax/binding.rkt:169:16_112) resolve+shift22.1)"
"((temp65_113)(binding-free=id immediate-b_104))"
"((phase66_114) phase_98)"
"((temp67_115)(append extra-shifts_103(syntax-mpi-shifts s_97)))"
"((ambiguous-value68_116) ambiguous-value_99)"
"((exactly?69_117) exactly?_100)"
"((unbound-sym?70_118) unbound-sym?_102))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" ambiguous-value68_116"
" #t"
" exactly?69_117"
" #t"
" temp67_115"
" #t"
" #f"
" #f"
" unbound-sym?70_118"
" #t"
" temp65_113"
" phase66_114)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:169:16_112"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
"(list ambiguous-value68_116 exactly?69_117 temp67_115 unbound-sym?70_118)"
" temp65_113"
" phase66_114)))"
" immediate-b_104)))"
"(if(module-binding? b_105)"
"(let-values()"
"(let-values(((mpi-shifts_119)(syntax-mpi-shifts s_97)))"
"(if(null? mpi-shifts_119)"
"(let-values() b_105)"
"(let-values()"
"(let-values(((mod_120)(module-binding-module b_105)))"
"(let-values(((shifted-mod_121)(apply-syntax-shifts mod_120 mpi-shifts_119)))"
"(let-values(((nominal-mod_122)(module-binding-nominal-module b_105)))"
"(let-values(((shifted-nominal-mod_123)"
"(if(eq? mod_120 nominal-mod_122)"
" shifted-mod_121"
"(apply-syntax-shifts nominal-mod_122 mpi-shifts_119))))"
"(if(if(eq? mod_120 shifted-mod_121)"
"(if(eq? nominal-mod_122 shifted-nominal-mod_123)"
"(if(not(binding-free=id b_105))"
"(null?(module-binding-extra-nominal-bindings b_105))"
" #f)"
" #f)"
" #f)"
" b_105"
"(let-values(((...r/syntax/binding.rkt:193:10_124)"
" module-binding-update50.1)"
"((b71_125) b_105)"
"((shifted-mod72_126) shifted-mod_121)"
"((shifted-nominal-mod73_127) shifted-nominal-mod_123)"
"((temp74_128)"
"(if(binding-free=id b_105)"
"(syntax-transfer-shifts(binding-free=id b_105) s_97)"
" #f))"
"((temp75_129)"
"(alt-reverse"
"(let-values(((lst_130)"
"(module-binding-extra-nominal-bindings b_105)))"
"(begin"
"(if(list? lst_130)"
"(void)"
"(let-values()(in-list lst_130)))"
"((letrec-values(((for-loop_131)"
"(lambda(fold-var_132 lst_133)"
"(if(pair? lst_133)"
"(let-values(((b_134)"
"(unsafe-car"
" lst_133)))"
"(let-values(((fold-var_135)"
"(let-values(((fold-var_136)"
" fold-var_132))"
"(let-values(((fold-var_137)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_134"
" mpi-shifts_119))"
" fold-var_136))))"
"(values"
" fold-var_137)))))"
"(for-loop_131"
" fold-var_135"
"(unsafe-cdr lst_133))))"
" fold-var_132))))"
" for-loop_131)"
" null"
" lst_130))))))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" temp75_129"
" #t"
" #f"
" #f"
" temp74_128"
" #t"
" shifted-mod72_126"
" #t"
" shifted-nominal-mod73_127"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b71_125)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:193:10_124"
" keyword-procedure-extract"
" '(#:extra-nominal-bindings #:free=id #:module #:nominal-module)"
" 3)"
" '(#:extra-nominal-bindings #:free=id #:module #:nominal-module)"
"(list"
" temp75_129"
" temp74_128"
" shifted-mod72_126"
" shifted-nominal-mod73_127)"
" b71_125))))))))))))"
"(if(if(not b_105) unbound-sym?_102 #f)"
"(let-values()(syntax-e$1 s_97))"
"(let-values() b_105)))))))))))))))"
"(define-values"
"(unpack21.1)"
"(lambda(given-kws_138 given-args_139 s18_140 phase19_141)"
"(let-values(((ambiguous-value13_142)(if(pair? given-kws_138)(eq? '#:ambiguous-value(car given-kws_138)) #f)))"
"(let-values(((ambiguous-value8_143)(if ambiguous-value13_142(car given-args_139)(void)))"
"((given-kws_144)(if ambiguous-value13_142(cdr given-kws_138) given-kws_138))"
"((given-args_145)(if ambiguous-value13_142(cdr given-args_139) given-args_139)))"
"(let-values(((exactly?14_146)(if(pair? given-kws_144)(eq? '#:exactly?(car given-kws_144)) #f)))"
"(let-values(((exactly?9_147)(if exactly?14_146(car given-args_145)(void)))"
"((given-kws_148)(if exactly?14_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if exactly?14_146(cdr given-args_145) given-args_145)))"
"(let-values(((extra-shifts17_150)(if(pair? given-kws_148)(eq? '#:extra-shifts(car given-kws_148)) #f)))"
"(let-values(((extra-shifts12_151)(if extra-shifts17_150(car given-args_149)(void)))"
"((given-kws_152)(if extra-shifts17_150(cdr given-kws_148) given-kws_148))"
"((given-args_153)(if extra-shifts17_150(cdr given-args_149) given-args_149)))"
"(let-values(((immediate?15_154)(if(pair? given-kws_152)(eq? '#:immediate?(car given-kws_152)) #f)))"
"(let-values(((immediate?10_155)(if immediate?15_154(car given-args_153)(void)))"
"((given-kws_156)(if immediate?15_154(cdr given-kws_152) given-kws_152))"
"((given-args_157)(if immediate?15_154(cdr given-args_153) given-args_153)))"
"(let-values(((unbound-sym?16_158)(pair? given-kws_156)))"
"(let-values(((unbound-sym?11_159)(if unbound-sym?16_158(car given-args_157)(void))))"
"(resolve+shift20.1"
" ambiguous-value8_143"
" ambiguous-value13_142"
" exactly?9_147"
" exactly?14_146"
" extra-shifts12_151"
" extra-shifts17_150"
" immediate?10_155"
" immediate?15_154"
" unbound-sym?11_159"
" unbound-sym?16_158"
" s18_140"
" phase19_141)))))))))))))"
"(define-values"
"(resolve+shift22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_160 given-argc_161)"
"(if(= given-argc_161 4)"
"(let-values(((l1_162) given-kws_160))"
"(let-values(((l1_163)"
"(if(null? l1_162) l1_162(if(eq?(car l1_162) '#:ambiguous-value)(cdr l1_162) l1_162))))"
"(let-values(((l1_164) l1_163))"
"(let-values(((l1_165)(if(null? l1_164) l1_164(if(eq?(car l1_164) '#:exactly?)(cdr l1_164) l1_164))))"
"(let-values(((l1_166) l1_165))"
"(let-values(((l1_167)"
"(if(null? l1_166) l1_166(if(eq?(car l1_166) '#:extra-shifts)(cdr l1_166) l1_166))))"
"(let-values(((l1_168) l1_167))"
"(let-values(((l1_169)"
"(if(null? l1_168)"
" l1_168"
"(if(eq?(car l1_168) '#:immediate?)(cdr l1_168) l1_168))))"
"(let-values(((l1_170) l1_169))"
"(let-values(((l1_171)"
"(if(null? l1_170)"
" l1_170"
"(if(eq?(car l1_170) '#:unbound-sym?)(cdr l1_170) l1_170))))"
"(null? l1_171)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_172 given-args_173 s_174 phase_175)(unpack21.1 given-kws_172 given-args_173 s_174 phase_175)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:immediate? #:unbound-sym?)"
"(let-values(((resolve+shift_176)(case-lambda((s_177 phase_178)(unpack21.1 null null s_177 phase_178)))))"
" resolve+shift_176)))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_179 shifts_180)"
"(if(null? shifts_180)"
"(let-values() mpi_179)"
"(let-values()"
"(let-values(((shifted-mpi_181)(apply-syntax-shifts mpi_179(cdr shifts_180))))"
"(module-path-index-shift shifted-mpi_181(caar shifts_180)(cdar shifts_180)))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_182 shifts_183)"
"(if(null? shifts_183)"
"(let-values() b_182)"
"(let-values()"
"(let-values(((shifted-b_184)(apply-syntax-shifts-to-binding b_182(cdr shifts_183))))"
"(binding-module-path-index-shift shifted-b_184(caar shifts_183)(cdar shifts_183)))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_187 from-mpi_188 to-mpi_189)"
"(if(module-binding? b_187)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:229:4_190) module-binding-update50.1)"
"((b76_191) b_187)"
"((temp77_192)(module-path-index-shift(module-binding-module b_187) from-mpi_188 to-mpi_189))"
"((temp78_193)"
"(module-path-index-shift(module-binding-nominal-module b_187) from-mpi_188 to-mpi_189))"
"((temp79_194)"
"(alt-reverse"
"(let-values(((lst_195)(module-binding-extra-nominal-bindings b_187)))"
"(begin"
"(if(list? lst_195)(void)(let-values()(in-list lst_195)))"
"((letrec-values(((for-loop_196)"
"(lambda(fold-var_197 lst_198)"
"(if(pair? lst_198)"
"(let-values(((b_199)(unsafe-car lst_198)))"
"(let-values(((fold-var_200)"
"(let-values(((fold-var_201) fold-var_197))"
"(let-values(((fold-var_202)"
"(let-values()"
"(cons"
"(let-values()"
"(binding-module-path-index-shift"
" b_199"
" from-mpi_188"
" to-mpi_189))"
" fold-var_201))))"
"(values fold-var_202)))))"
"(for-loop_196 fold-var_200(unsafe-cdr lst_198))))"
" fold-var_197))))"
" for-loop_196)"
" null"
" lst_195))))))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" temp79_194"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp77_192"
" #t"
" temp78_193"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b76_191)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:229:4_190"
" keyword-procedure-extract"
" '(#:extra-nominal-bindings #:module #:nominal-module)"
" 3)"
" '(#:extra-nominal-bindings #:module #:nominal-module)"
"(list temp79_194 temp77_192 temp78_193)"
" b76_191))))"
"(let-values() b_187))))"
"(define-values"
"(syntax-transfer-shifts)"
"(let-values(((syntax-transfer-shifts27_203)"
"(lambda(to-s25_204 from-s26_205 inspector23_206 inspector24_207)"
"(let-values(((to-s_208) to-s25_204))"
"(let-values(((from-s_209) from-s26_205))"
"(let-values(((inspector_210)(if inspector24_207 inspector23_206 #f)))"
"(let-values()"
"(let-values(((shifts_211)(syntax-mpi-shifts from-s_209)))"
"(if(if(null? shifts_211) inspector_210 #f)"
"(let-values()(syntax-set-inspector to-s_208 inspector_210))"
"(let-values()"
"(let-values(((lst_212)(alt-reverse shifts_211))((start_213) 0))"
"(begin"
"(if(list? lst_212)(void)(let-values()(in-list lst_212)))"
"(if(exact-nonnegative-integer? start_213)"
"(void)"
"(let-values()(in-naturals start_213)))"
"((letrec-values(((for-loop_214)"
"(lambda(s_215 lst_216 pos_217)"
"(if(if(pair? lst_216) #t #f)"
"(let-values(((shift_218)(unsafe-car lst_216))"
"((i_219) pos_217))"
"(let-values(((s_220)"
"(let-values(((s_221) s_215))"
"(let-values(((s_222)"
"(let-values()"
"(syntax-module-path-index-shift"
" s_221"
"(car shift_218)"
"(cdr shift_218)"
"(if(zero? i_219)"
" inspector_210"
" #f)))))"
"(values s_222)))))"
"(for-loop_214 s_220(unsafe-cdr lst_216)(+ pos_217 1))))"
" s_215))))"
" for-loop_214)"
" to-s_208"
" lst_212"
" start_213)))))))))))))"
"(case-lambda"
"((to-s_223 from-s_224)(syntax-transfer-shifts27_203 to-s_223 from-s_224 #f #f))"
"((to-s_225 from-s_226 inspector23_227)(syntax-transfer-shifts27_203 to-s_225 from-s_226 inspector23_227 #t)))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_228 insp_229)"
"(syntax-map"
" s_228"
"(lambda(tail?_230 d_231) d_231)"
"(lambda(s_232 d_233)"
"(let-values(((the-struct_234) s_232))"
"(if(syntax?$1 the-struct_234)"
"(let-values(((content80_235) d_233)"
"((inspector81_236)"
"(let-values(((or-part_237)(syntax-inspector s_232)))(if or-part_237 or-part_237 insp_229))))"
"(syntax1.1"
" content80_235"
"(syntax-scopes the-struct_234)"
"(syntax-shifted-multi-scopes the-struct_234)"
"(syntax-scope-propagations the-struct_234)"
"(syntax-mpi-shifts the-struct_234)"
"(syntax-srcloc the-struct_234)"
"(syntax-props the-struct_234)"
" inspector81_236"
"(syntax-tamper the-struct_234)))"
"           (raise-argument-error 'struct-copy \"syntax?\" the-struct_234))))"
" syntax-content)))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module32_238)"
"(lambda(s31_239 source?29_240 source?30_241)"
"(let-values(((s_242) s31_239))"
"(let-values(((source?_243)(if source?30_241 source?29_240 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_242)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_242)))"
"(let-values(((lst_244)(alt-reverse(syntax-mpi-shifts s_242))))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(result_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((shift_248)(unsafe-car lst_247)))"
"(let-values(((result_249)"
"(let-values(((result_250) result_246))"
"(let-values(((result_251)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_252)"
"(car shift_248)))"
"(let-values(((path_253"
" base_254)"
"(1/module-path-index-split"
" from-mpi_252)))"
"(if(not path_253)"
"(if(module-path-index-resolved"
" from-mpi_252)"
"(apply-syntax-shifts"
" from-mpi_252"
"(syntax-mpi-shifts"
" s_242))"
" #f)"
" #f)))))))"
"(values result_251)))))"
"(if(not((lambda x_255 result_249) shift_248))"
"(for-loop_245 result_249(unsafe-cdr lst_247))"
" result_249)))"
" result_246))))"
" for-loop_245)"
" #f"
" lst_244))))))))))"
"(case-lambda"
"((s_256)(syntax-source-module32_238 s_256 #f #f))"
"((s_257 source?29_258)(syntax-source-module32_238 s_257 source?29_258 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_259)"
"(begin"
"(if(identifier? id_259)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_259)))"
"(let-values(((the-struct_260)(datum->syntax$1 #f(syntax-e$1 id_259) id_259 id_259)))"
"(if(syntax?$1 the-struct_260)"
"(let-values(((mpi-shifts82_261)(syntax-mpi-shifts id_259)))"
"(syntax1.1"
"(syntax-content the-struct_260)"
"(syntax-scopes the-struct_260)"
"(syntax-shifted-multi-scopes the-struct_260)"
"(syntax-scope-propagations the-struct_260)"
" mpi-shifts82_261"
"(syntax-srcloc the-struct_260)"
"(syntax-props the-struct_260)"
"(syntax-inspector the-struct_260)"
"(syntax-tamper the-struct_260)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_260))))))"
"(void)"
"(void)"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 #t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
"    (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(void)"
"(void)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(void)"
"(void)"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(p_31 ser-push!_32 state_33)"
"(begin"
"(ser-push!_32 'tag '#:provided)"
"(ser-push!_32(provided-binding p_31))"
"(ser-push!_32(provided-protected? p_31))"
"(ser-push!_32(provided-syntax? p_31))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_34)(if(provided? v_34)(provided-binding v_34) v_34)))"
"(define-values(provided-as-protected?)(lambda(v_35)(if(provided? v_35)(provided-protected? v_35) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_36)(if(provided? v_36)(provided-syntax? v_36) #f)))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_37 protected?_38 syntax?_39)(provided1.1 binding_37 protected?_38 syntax?_39)))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$24)"
"(make-required"
" 'provide-binding-to-require-binding"
"(case-lambda((self_2 binding/p_3 sym_4)(apply missing-kw self_2 binding/p_3 sym_4 null)))"
" #f"
" #f))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_5 phase-shift4_6 provide-phase-level3_7 self1_8 binding/p9_9 sym10_10)"
"(let-values(((binding/p_11) binding/p9_9))"
"(let-values(((sym_12) sym10_10))"
"(let-values(((self_13) self1_8))"
"(let-values(((mpi_14) mpi2_5))"
"(let-values(((provide-phase-level_15) provide-phase-level3_7))"
"(let-values(((phase-shift_16) phase-shift4_6))"
"(let-values()"
"(let-values(((binding_17)(provided-as-binding binding/p_11)))"
"(let-values(((from-mod_18)(module-binding-module binding_17)))"
"(let-values(((...tax/bulk-binding.rkt:51:2_19) module-binding-update50.1)"
"((binding17_20) binding_17)"
"((temp18_21)(module-path-index-shift from-mod_18 self_13 mpi_14))"
"((mpi19_22) mpi_14)"
"((provide-phase-level20_23) provide-phase-level_15)"
"((sym21_24) sym_12)"
"((phase-shift22_25) phase-shift_16)"
"((temp23_26) #f)"
"((temp24_27)"
"(if(not(provided-as-protected? binding/p_11))"
"(module-binding-extra-inspector binding_17)"
" #f))"
"((null25_28) null))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" temp24_27"
" #t"
" null25_28"
" #t"
" temp23_26"
" #t"
" #f"
" #f"
" temp18_21"
" #t"
" mpi19_22"
" #t"
" provide-phase-level20_23"
" #t"
" phase-shift22_25"
" #t"
" sym21_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding17_20)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:51:2_19"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 3)"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" temp24_27"
" null25_28"
" temp23_26"
" temp18_21"
" mpi19_22"
" provide-phase-level20_23"
" phase-shift22_25"
" sym21_24)"
" binding17_20))))))))))))))"
"(define-values"
"(unpack12.1$2)"
"(lambda(given-kws_29 given-args_30 binding/p9_31 sym10_32)"
"(let-values(((mpi2_33)(car given-args_30))"
"((given-kws_34)(cdr given-kws_29))"
"((given-args_35)(cdr given-args_30)))"
"(let-values(((phase-shift4_36)(car given-args_35))"
"((given-kws_37)(cdr given-kws_34))"
"((given-args_38)(cdr given-args_35)))"
"(let-values(((provide-phase-level3_39)(car given-args_38))"
"((given-kws_40)(cdr given-kws_37))"
"((given-args_41)(cdr given-args_38)))"
"(let-values(((self1_42)(car given-args_41)))"
"(provide-binding-to-require-binding11.1"
" mpi2_33"
" phase-shift4_36"
" provide-phase-level3_39"
" self1_42"
" binding/p9_31"
" sym10_32)))))))"
"(define-values"
"(provide-binding-to-require-binding13.1)"
"(lifted/1.1$24"
"(lambda(given-kws_43 given-argc_44)"
"(if(= given-argc_44 4)"
"(let-values(((l2_45) given-kws_43))"
"(if(pair? l2_45)"
"(if(eq?(car l2_45) '#:mpi)"
"(let-values(((l2_46)(cdr l2_45)))"
"(if(pair? l2_46)"
"(if(eq?(car l2_46) '#:phase-shift)"
"(let-values(((l2_47)(cdr l2_46)))"
"(if(pair? l2_47)"
"(if(eq?(car l2_47) '#:provide-phase-level)"
"(let-values(((l2_48)(cdr l2_47)))"
"(if(pair? l2_48)(if(eq?(car l2_48) '#:self)(null?(cdr l2_48)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_49 given-args_50 binding/p_51 sym_52)(unpack12.1$2 given-kws_49 given-args_50 binding/p_51 sym_52)))"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_53 make-_54 ?_55 -ref_56 -set!_57)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_108 ser-push!_109 reachable-scopes_110)"
"(begin"
"(ser-push!_109 'tag '#:bulk-binding)"
"(ser-push!_109(bulk-binding-prefix b_108))"
"(ser-push!_109(bulk-binding-excepts b_108))"
"(ser-push!_109(bulk-binding-mpi b_108))"
"(ser-push!_109(bulk-binding-provide-phase-level b_108))"
"(ser-push!_109(bulk-binding-phase-shift b_108))"
"(ser-push!_109 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_111 mpi-shifts_112)"
"(let-values(((or-part_113)(bulk-binding-provides b_111)))"
"(if or-part_113"
" or-part_113"
"(let-values(((mod-name_114)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_111) mpi-shifts_112))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_111)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_114)))"
"(values))))"
"(let-values(((table_115)"
"(bulk-binding-registry-table"
"(bulk-binding-bulk-binding-registry b_111))))"
"(let-values(((bulk-provide_116)(hash-ref table_115 mod-name_114 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_116"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_114)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self!"
" b_111"
"(bulk-provide-self bulk-provide_116))"
"(values))))"
"(let-values(((provides_117)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_116)"
"(bulk-binding-provide-phase-level b_111))))"
"(let-values(((excepts_118)(bulk-binding-excepts b_111)))"
"(let-values(((prefix_119)(bulk-binding-prefix b_111)))"
"(let-values(((adjusted-provides_120)"
"(if(let-values(((or-part_121) prefix_119))"
"(if or-part_121"
" or-part_121"
"(positive?(hash-count excepts_118))))"
"(let-values()"
"(let-values(((ht_122) provides_117))"
"(begin"
"(if((lambda(ht_123)(hash? ht_123)) ht_122)"
"(void)"
"(let-values()(default-in-hash ht_122)))"
"((letrec-values(((for-loop_124)"
"(lambda(table_125 i_126)"
"(if i_126"
"(let-values(((sym_127"
" val_128)"
"(hash-iterate-key+value"
" ht_122"
" i_126)))"
"(let-values(((table_129)"
"(let-values(((table_130)"
" table_125))"
"(if(hash-ref"
" excepts_118"
" sym_127"
" #f)"
" table_130"
"(let-values(((table_131)"
" table_130))"
"(let-values(((table_132)"
"(let-values()"
"(let-values(((key_133"
" val_134)"
"(let-values()"
"(values"
"(if prefix_119"
"(string->symbol"
"(format"
"                                                                                                                                                       \"~a~a\""
" prefix_119"
" sym_127))"
" sym_127)"
" val_128))))"
"(hash-set"
" table_131"
" key_133"
" val_134)))))"
"(values"
" table_132)))))))"
"(for-loop_124"
" table_129"
"(hash-iterate-next"
" ht_122"
" i_126))))"
" table_125))))"
" for-loop_124)"
" '#hash()"
"(hash-iterate-first ht_122)))))"
"(let-values() provides_117))))"
"(begin"
"(set-bulk-binding-provides! b_111 adjusted-provides_120)"
" adjusted-provides_120))))))))))))))"
"(lambda(b_135 binding_136 sym_137)"
"(let-values(((...tax/bulk-binding.rkt:122:11_138) provide-binding-to-require-binding13.1)"
"((binding27_139) binding_136)"
"((temp28_140)"
"(if(bulk-binding-prefix b_135)"
"(string->symbol"
"(substring"
"(symbol->string sym_137)"
"(string-length(symbol->string(bulk-binding-prefix b_135)))))"
" sym_137))"
"((temp29_141)(bulk-binding-self b_135))"
"((temp30_142)(bulk-binding-mpi b_135))"
"((temp31_143)(bulk-binding-provide-phase-level b_135))"
"((temp32_144)(bulk-binding-phase-shift b_135)))"
"(if(variable-reference-constant?"
"(#%variable-reference provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" temp30_142"
" temp32_144"
" temp31_143"
" temp29_141"
" binding27_139"
" temp28_140)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:122:11_138"
" keyword-procedure-extract"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" 4)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
"(list temp30_142 temp32_144 temp31_143 temp29_141)"
" binding27_139"
" temp28_140)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_53"
" make-_54"
" ?_55"
"(make-struct-field-accessor -ref_56 0 'provides)"
"(make-struct-field-accessor -ref_56 1 'prefix)"
"(make-struct-field-accessor -ref_56 2 'excepts)"
"(make-struct-field-accessor -ref_56 3 'self)"
"(make-struct-field-accessor -ref_56 4 'mpi)"
"(make-struct-field-accessor -ref_56 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_56 6 'phase-shift)"
"(make-struct-field-accessor -ref_56 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_57 0 'provides)"
"(make-struct-field-mutator -set!_57 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_145 excepts_146 mpi_147 provide-phase-level_148 phase-shift_149 bulk-binding-registry_150)"
"(bulk-binding14.1"
" #f"
" prefix_145"
" excepts_146"
" #f"
" mpi_147"
" provide-phase-level_148"
" phase-shift_149"
" bulk-binding-registry_150)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_151 make-_152 ?_153 -ref_154 -set!_155)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_151"
" make-_152"
" ?_153"
"(make-struct-field-accessor -ref_154 0 'self)"
"(make-struct-field-accessor -ref_154 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_176 make-_177 ?_178 -ref_179 -set!_180)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_176 make-_177 ?_178(make-struct-field-accessor -ref_179 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_196 mod-name_197 self_198 provides_199)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_196)"
" mod-name_197"
"(bulk-provide15.1 self_198 provides_199))))"
"(void)"
"(void)"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(void)"
"(void)"
"(define-values"
"(struct:root-expand-context"
" root-expand-context1.1"
" root-expand-context?"
" root-expand-context-module-scopes"
" root-expand-context-post-expansion-scope"
" root-expand-context-top-level-bind-scope"
" root-expand-context-all-scopes-stx"
" root-expand-context-use-site-scopes"
" root-expand-context-defined-syms"
" root-expand-context-frame-id"
" root-expand-context-counter"
" root-expand-context-lift-key)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'root-expand-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-scopes)"
"(make-struct-field-accessor -ref_4 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_4 4 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 5 'defined-syms)"
"(make-struct-field-accessor -ref_4 6 'frame-id)"
"(make-struct-field-accessor -ref_4 7 'counter)"
"(make-struct-field-accessor -ref_4 8 'lift-key))))"
"(define-values"
"(make-root-expand-context10.1)"
"(lambda(all-scopes-stx5_61"
" all-scopes-stx9_62"
" initial-scopes2_63"
" initial-scopes6_64"
" outside-scope3_65"
" outside-scope7_66"
" post-expansion-scope4_67"
" post-expansion-scope8_68)"
"(let-values(((initial-scopes_69)(if initial-scopes6_64 initial-scopes2_63 null)))"
"(let-values(((outside-scope_70)(if outside-scope7_66 outside-scope3_65 top-level-common-scope)))"
"(let-values(((post-expansion-scope_71)"
"(if post-expansion-scope8_68 post-expansion-scope4_67(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_72)(if all-scopes-stx9_62 all-scopes-stx5_61 #f)))"
"(let-values()"
"(let-values(((module-scopes_73)(list* post-expansion-scope_71 outside-scope_70 initial-scopes_69)))"
"(root-expand-context1.1"
" module-scopes_73"
" post-expansion-scope_71"
"(new-scope 'module)"
"(let-values(((or-part_74) all-scopes-stx_72))"
"(if or-part_74 or-part_74(add-scopes empty-syntax module-scopes_73)))"
"(box null)"
"(make-hasheqv)"
"                 (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(unpack11.1)"
"(lambda(given-kws_75 given-args_76)"
"(let-values(((all-scopes-stx9_77)(if(pair? given-kws_75)(eq? '#:all-scopes-stx(car given-kws_75)) #f)))"
"(let-values(((all-scopes-stx5_78)(if all-scopes-stx9_77(car given-args_76)(void)))"
"((given-kws_79)(if all-scopes-stx9_77(cdr given-kws_75) given-kws_75))"
"((given-args_80)(if all-scopes-stx9_77(cdr given-args_76) given-args_76)))"
"(let-values(((initial-scopes6_81)(if(pair? given-kws_79)(eq? '#:initial-scopes(car given-kws_79)) #f)))"
"(let-values(((initial-scopes2_82)(if initial-scopes6_81(car given-args_80)(void)))"
"((given-kws_83)(if initial-scopes6_81(cdr given-kws_79) given-kws_79))"
"((given-args_84)(if initial-scopes6_81(cdr given-args_80) given-args_80)))"
"(let-values(((outside-scope7_85)(if(pair? given-kws_83)(eq? '#:outside-scope(car given-kws_83)) #f)))"
"(let-values(((outside-scope3_86)(if outside-scope7_85(car given-args_84)(void)))"
"((given-kws_87)(if outside-scope7_85(cdr given-kws_83) given-kws_83))"
"((given-args_88)(if outside-scope7_85(cdr given-args_84) given-args_84)))"
"(let-values(((post-expansion-scope8_89)(pair? given-kws_87)))"
"(let-values(((post-expansion-scope4_90)(if post-expansion-scope8_89(car given-args_88)(void))))"
"(make-root-expand-context10.1"
" all-scopes-stx5_78"
" all-scopes-stx9_77"
" initial-scopes2_82"
" initial-scopes6_81"
" outside-scope3_86"
" outside-scope7_85"
" post-expansion-scope4_90"
" post-expansion-scope8_89)))))))))))"
"(define-values"
"(make-root-expand-context12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_91 given-argc_92)"
"(if(= given-argc_92 2)"
"(let-values(((l1_93) given-kws_91))"
"(let-values(((l1_94)(if(null? l1_93) l1_93(if(eq?(car l1_93) '#:all-scopes-stx)(cdr l1_93) l1_93))))"
"(let-values(((l1_95) l1_94))"
"(let-values(((l1_96)(if(null? l1_95) l1_95(if(eq?(car l1_95) '#:initial-scopes)(cdr l1_95) l1_95))))"
"(let-values(((l1_97) l1_96))"
"(let-values(((l1_98)"
"(if(null? l1_97) l1_97(if(eq?(car l1_97) '#:outside-scope)(cdr l1_97) l1_97))))"
"(let-values(((l1_99) l1_98))"
"(let-values(((l1_100)"
"(if(null? l1_99)"
" l1_99"
"(if(eq?(car l1_99) '#:post-expansion-scope)(cdr l1_99) l1_99))))"
"(null? l1_100)))))))))"
" #f))"
"(case-lambda((given-kws_101 given-args_102)(unpack11.1 given-kws_101 given-args_102)))"
" null"
" '(#:all-scopes-stx #:initial-scopes #:outside-scope #:post-expansion-scope)"
"(let-values(((make-root-expand-context_103)(case-lambda(()(unpack11.1 null null)))))"
" make-root-expand-context_103)))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_104 orig-self_105 new-self_106)"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_104))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_104))"
"(syntax-module-path-index-shift(root-expand-context-all-scopes-stx ctx_104) orig-self_105 new-self_106)"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_104)))"
"(let-values(((ht_107)(root-expand-context-defined-syms ctx_104)))"
"(begin"
"(if((lambda(ht_108)(hash? ht_108)) ht_107)(void)(let-values()(default-in-hash ht_107)))"
"((letrec-values(((for-loop_109)"
"(lambda(table_110 i_111)"
"(if i_111"
"(let-values(((phase_112 ht_113)(hash-iterate-key+value ht_107 i_111)))"
"(let-values(((table_114)"
"(let-values(((table_115) table_110))"
"(let-values(((table_116)"
"(let-values()"
"(let-values(((key_117 val_118)"
"(let-values()"
"(values phase_112 ht_113))))"
"(hash-set table_115 key_117 val_118)))))"
"(values table_116)))))"
"(for-loop_109 table_114(hash-iterate-next ht_107 i_111))))"
" table_110))))"
" for-loop_109)"
" '#hasheqv()"
"(hash-iterate-first ht_107))))"
"(root-expand-context-frame-id ctx_104)"
"(unbox(root-expand-context-counter ctx_104))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_119)"
"(let-values(((vec_120)(if(syntax?$1 vec-s_119)(syntax-e$1 vec-s_119) #f)))"
"(begin"
"(if(if(vector? vec_120)"
"(if(=(vector-length vec_120) 7)"
"(if(syntax?$1(vector-ref vec_120 0))"
"(if(syntax-with-one-scope?(vector-ref vec_120 1))"
"(if(syntax?$1(vector-ref vec_120 2))"
"(if(syntax?$1(vector-ref vec_120 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_120 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_120 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_120 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_119)))"
"(root-expand-context1.1"
"(extract-scope-list(vector-ref vec_120 0))"
"(extract-scope(vector-ref vec_120 1))"
"(new-scope 'module)"
"(vector-ref vec_120 2)"
"(box(extract-scope-list(vector-ref vec_120 3)))"
"(unpack-defined-syms(vector-ref vec_120 4))"
"(syntax-e$1(vector-ref vec_120 5))"
"(box(syntax-e$1(vector-ref vec_120 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_121)"
"(let-values(((ht_122) v_121))"
"(begin"
"(if((lambda(ht_123)(hash? ht_123)) ht_122)(void)(let-values()(default-in-hash ht_122)))"
"((letrec-values(((for-loop_124)"
"(lambda(result_125 i_126)"
"(if i_126"
"(let-values(((phase_127 ht-s_128)(hash-iterate-key+value ht_122 i_126)))"
"(let-values(((result_129)"
"(let-values(((result_130) result_125))"
"(let-values(((result_131)"
"(let-values()"
"(let-values()"
"(if(phase? phase_127)"
"(if(hash?(syntax-e$1 ht-s_128))"
"(let-values(((ht_132)(syntax-e$1 ht-s_128)))"
"(begin"
"(if((lambda(ht_133)(hash? ht_133)) ht_132)"
"(void)"
"(let-values()(default-in-hash ht_132)))"
"((letrec-values(((for-loop_134)"
"(lambda(result_135 i_136)"
"(if i_136"
"(let-values(((sym_137"
" id_138)"
"(hash-iterate-key+value"
" ht_132"
" i_136)))"
"(let-values(((result_139)"
"(let-values(((result_140)"
" result_135))"
"(let-values(((result_141)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_137)"
"(identifier?"
" id_138)"
" #f)))))"
"(values"
" result_141)))))"
"(if(not"
"((lambda x_142"
"(not"
" result_139))"
" sym_137"
" id_138))"
"(for-loop_134"
" result_139"
"(hash-iterate-next"
" ht_132"
" i_136))"
" result_139)))"
" result_135))))"
" for-loop_134)"
" #t"
"(hash-iterate-first ht_132))))"
" #f)"
" #f)))))"
"(values result_131)))))"
"(if(not((lambda x_143(not result_129)) phase_127 ht-s_128))"
"(for-loop_124 result_129(hash-iterate-next ht_122 i_126))"
" result_129)))"
" result_125))))"
" for-loop_124)"
" #t"
"(hash-iterate-first ht_122))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_144)(map2 generalize-scope(set->list(syntax-scope-set stx_144 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_145)(if(syntax?$1 stx_145)(= 1(set-count(syntax-scope-set stx_145 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_146)(let-values(((s_147)(syntax-scope-set stx_146 0)))(generalize-scope(set-first s_147)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_148)"
"(hash-copy"
"(let-values(((ht_149)(syntax-e$1 v_148)))"
"(begin"
"(if((lambda(ht_150)(hash? ht_150)) ht_149)(void)(let-values()(default-in-hash ht_149)))"
"((letrec-values(((for-loop_151)"
"(lambda(table_152 i_153)"
"(if i_153"
"(let-values(((phase_154 ht-s_155)(hash-iterate-key+value ht_149 i_153)))"
"(let-values(((table_156)"
"(let-values(((table_157) table_152))"
"(let-values(((table_158)"
"(let-values()"
"(let-values(((key_159 val_160)"
"(let-values()"
"(values"
" phase_154"
"(hash-copy"
"(let-values(((ht_161)"
"(syntax-e$1 ht-s_155)))"
"(begin"
"(if((lambda(ht_162)"
"(hash? ht_162))"
" ht_161)"
"(void)"
"(let-values()"
"(default-in-hash ht_161)))"
"((letrec-values(((for-loop_163)"
"(lambda(table_164"
" i_165)"
"(if i_165"
"(let-values(((sym_166"
" id_167)"
"(hash-iterate-key+value"
" ht_161"
" i_165)))"
"(let-values(((table_168)"
"(let-values(((table_169)"
" table_164))"
"(let-values(((table_170)"
"(let-values()"
"(let-values(((key_171"
" val_172)"
"(let-values()"
"(values"
" sym_166"
" id_167))))"
"(hash-set"
" table_169"
" key_171"
" val_172)))))"
"(values"
" table_170)))))"
"(for-loop_163"
" table_168"
"(hash-iterate-next"
" ht_161"
" i_165))))"
" table_164))))"
" for-loop_163)"
" '#hash()"
"(hash-iterate-first"
" ht_161)))))))))"
"(hash-set table_157 key_159 val_160)))))"
"(values table_158)))))"
"(for-loop_151 table_156(hash-iterate-next ht_149 i_153))))"
" table_152))))"
" for-loop_151)"
" '#hasheqv()"
"(hash-iterate-first ht_149)))))))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/primitive->compiled-position)(hash-ref linklet-primitive-table 'primitive->compiled-position #f))"
"(define-values(1/compiled-position->primitive)(hash-ref linklet-primitive-table 'compiled-position->primitive #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/recompile-linklet)(hash-ref linklet-primitive-table 'recompile-linklet #f))"
"(define-values(1/eval-linklet)(hash-ref linklet-primitive-table 'eval-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_26 proc_27)"
"(let-values(((lock-box_28)(module-registry-lock-box r_26)))"
"((letrec-values(((loop_29)"
"(lambda()"
"(let-values(((v_30)(unbox lock-box_28)))"
"(if(let-values(((or-part_31)(not v_30)))"
"(if or-part_31 or-part_31(sync/timeout 0(car v_30)(cdr v_30))))"
"(let-values()"
"(let-values(((sema_32)(make-semaphore)))"
"(let-values(((lock_33)(cons(semaphore-peek-evt sema_32)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_28 v_30 lock_33)"
"(let-values()(begin(proc_27) void))"
"(let-values() loop_29)))"
"(lambda()(semaphore-post sema_32)))))))"
"(if(eq?(current-thread)(cdr v_30))"
"(let-values()(proc_27))"
"(let-values()(begin(sync(car v_30)(cdr v_30))(loop_29)))))))))"
" loop_29)))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" 1/namespace-module-registry"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_91 port_92 mode_93)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_92) (values))))"
"(let-values(((n_94)(namespace-source-name ns_91)))"
"(let-values((()"
"(begin"
"(if n_94"
"                                               (let-values () (fprintf port_92 \":~a\" (namespace->name ns_91)))"
"(void))"
"(values))))"
"(let-values(((phase_95)(namespace-phase ns_91)))"
"(begin"
"                                   (if (zero-phase? phase_95) (void) (let-values () (fprintf port_92 \":~s\" phase_95)))"
"                                   (write-string \">\" port_92)))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'source-name)"
"(make-struct-field-accessor -ref_4 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 3 'phase)"
"(make-struct-field-accessor -ref_4 4 '0-phase)"
"(make-struct-field-accessor -ref_4 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 7 'module-registry)"
"(make-struct-field-accessor -ref_4 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 10 'root-namespace)"
"(make-struct-field-accessor -ref_4 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 12 'inspector)"
"(make-struct-field-accessor -ref_4 13 'available-module-instances)"
"(make-struct-field-accessor -ref_4 14 'module-instances)"
"(make-struct-field-mutator -set!_5 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_96 make-_97 ?_98 -ref_99 -set!_100)"
"(let-values()"
"(let-values()"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))))"
"(values"
" struct:_96"
" make-_97"
" ?_98"
"(make-struct-field-accessor -ref_99 0 'variables)"
"(make-struct-field-accessor -ref_99 1 'transformers))))"
"(define-values"
"(make-namespace)"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f #f #f)"
"(new-namespace11.1)))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_121"
" register?6_122"
" root-expand-ctx3_123"
" root-expand-ctx5_124"
" share-from-ns7_125"
" share-from-ns8_126)"
"(let-values(((share-from-ns_127)(if share-from-ns8_126 share-from-ns7_125 #f)))"
"(let-values(((root-expand-ctx_128)"
"(if root-expand-ctx5_124"
" root-expand-ctx3_123"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((register?_129)(if register?6_122 register?4_121 #t)))"
"(let-values()"
"(let-values(((phase_130)(if share-from-ns_127(namespace-phase share-from-ns_127) 0)))"
"(let-values(((ns_131)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_128)"
" phase_130"
" phase_130"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_127"
"(1/namespace-module-registry share-from-ns_127)"
"(make-module-registry))"
"(if share-from-ns_127"
"(namespace-bulk-binding-registry share-from-ns_127)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_127"
"(let-values(((or-part_132)(namespace-root-namespace share-from-ns_127)))"
"(if or-part_132 or-part_132 share-from-ns_127))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_127"
"(namespace-available-module-instances share-from-ns_127)"
"(make-hasheqv))"
"(if share-from-ns_127(namespace-module-instances share-from-ns_127)(make-hasheqv)))))"
"(begin"
"(if register?_129"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_131) phase_130 ns_131))"
"(void))"
" ns_131)))))))))"
"(define-values"
"(unpack10.1$4)"
"(lambda(given-kws_133 given-args_134 share-from-ns7_135 share-from-ns8_136)"
"(let-values(((register?6_137)(if(pair? given-kws_133)(eq? '#:register?(car given-kws_133)) #f)))"
"(let-values(((register?4_138)(if register?6_137(car given-args_134)(void)))"
"((given-kws_139)(if register?6_137(cdr given-kws_133) given-kws_133))"
"((given-args_140)(if register?6_137(cdr given-args_134) given-args_134)))"
"(let-values(((root-expand-ctx5_141)(pair? given-kws_139)))"
"(let-values(((root-expand-ctx3_142)(if root-expand-ctx5_141(car given-args_140)(void))))"
"(new-namespace9.1"
" register?4_138"
" register?6_137"
" root-expand-ctx3_142"
" root-expand-ctx5_141"
" share-from-ns7_135"
" share-from-ns8_136)))))))"
"(define-values"
"(new-namespace11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_143 given-argc_144)"
"(if(if(>= given-argc_144 2)(<= given-argc_144 3) #f)"
"(let-values(((l1_145) given-kws_143))"
"(let-values(((l1_146)(if(null? l1_145) l1_145(if(eq?(car l1_145) '#:register?)(cdr l1_145) l1_145))))"
"(let-values(((l1_147) l1_146))"
"(let-values(((l1_148)"
"(if(null? l1_147) l1_147(if(eq?(car l1_147) '#:root-expand-ctx)(cdr l1_147) l1_147))))"
"(null? l1_148)))))"
" #f))"
"(case-lambda"
"((given-kws_149 given-args_150)(unpack10.1$4 given-kws_149 given-args_150 #f #f))"
"((given-kws_151 given-args_152 share-from-ns7_153)"
"(unpack10.1$4 given-kws_151 given-args_152 share-from-ns7_153 #t)))"
" null"
" '(#:register? #:root-expand-ctx)"
"(let-values(((new-namespace_154)"
"(case-lambda"
"(()(unpack10.1$4 null null #f #f))"
"((share-from-ns7_155)(unpack10.1$4 null null share-from-ns7_155 #t)))))"
" new-namespace_154)))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_156)"
"(begin"
"       (if (1/namespace? v_156) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_156)))"
" v_156))))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_157)(force(unbox(namespace-root-expand-ctx ns_157)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_158 root-ctx_159)(set-box!(namespace-root-expand-ctx ns_158) root-ctx_159)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_160 name_161)"
"(let-values(((or-part_162)(hash-ref(namespace-submodule-declarations ns_160) name_161 #f)))"
"(if or-part_162"
" or-part_162"
"(hash-ref(module-registry-declarations(1/namespace-module-registry ns_160)) name_161 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_163 phase_164)"
"(let-values(((or-part_165)(hash-ref(namespace-phase-to-namespace ns_163) phase_164 #f)))"
"(if or-part_165"
" or-part_165"
"(let-values(((p-ns_166)"
"(let-values(((the-struct_167) ns_163))"
"(if(1/namespace? the-struct_167)"
"(let-values(((phase22_168) phase_164))"
"(namespace1.1"
"(namespace-mpi the-struct_167)"
"(namespace-source-name the-struct_167)"
"(namespace-root-expand-ctx the-struct_167)"
" phase22_168"
"(namespace-0-phase the-struct_167)"
"(namespace-phase-to-namespace the-struct_167)"
"(namespace-phase-level-to-definitions the-struct_167)"
"(1/namespace-module-registry the-struct_167)"
"(namespace-bulk-binding-registry the-struct_167)"
"(namespace-submodule-declarations the-struct_167)"
"(namespace-root-namespace the-struct_167)"
"(namespace-declaration-inspector the-struct_167)"
"(namespace-inspector the-struct_167)"
"(namespace-available-module-instances the-struct_167)"
"(namespace-module-instances the-struct_167)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_167)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_163) phase_164 p-ns_166) p-ns_166))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_169)"
"(let-values(((n_170)(namespace-source-name ns_169)))"
"(let-values(((s_171)"
"(if(not n_170)"
"(let-values() 'top-level)"
"(if(symbol? n_170)"
"                        (let-values () (format \"'~s\" n_170))"
"                        (let-values () (string-append \"\\\"\" (path->string n_170) \"\\\"\"))))))"
"(let-values(((r_172)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_169)))))"
"          (if (pair? r_172) (string-append \"(submod \" s_171 \" \" (substring (format \"~s\" (cdr r_172)) 1)) s_171))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_173 phase-level_174)"
"(let-values(((d_175)(hash-ref(namespace-phase-level-to-definitions ns_173) phase-level_174 #f)))"
"(let-values(((or-part_176) d_175))"
"(if or-part_176"
" or-part_176"
"(let-values()"
"(let-values(((p-ns_177)"
"(namespace->namespace-at-phase ns_173(phase+(namespace-0-phase ns_173) phase-level_174))))"
"(let-values(((d_178)"
"(definitions2.1(1/make-instance(namespace->name p-ns_177) p-ns_177)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_173) phase-level_174 d_178) d_178)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!18_179)"
"(lambda(ns14_180 phase-level15_181 name16_182 val17_183 as-constant?12_184 as-constant?13_185)"
"(let-values(((ns_186) ns14_180))"
"(let-values(((phase-level_187) phase-level15_181))"
"(let-values(((name_188) name16_182))"
"(let-values(((val_189) val17_183))"
"(let-values(((as-constant?_190)(if as-constant?13_185 as-constant?12_184 #f)))"
"(let-values()"
"(let-values(((d_191)(namespace->definitions ns_186 phase-level_187)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_191)"
" name_188"
" val_189"
" as-constant?_190)))))))))))"
"(case-lambda"
"((ns_192 phase-level_193 name_194 val_195)"
"(namespace-set-variable!18_179 ns_192 phase-level_193 name_194 val_195 #f #f))"
"((ns_196 phase-level_197 name_198 val_199 as-constant?12_200)"
"(namespace-set-variable!18_179 ns_196 phase-level_197 name_198 val_199 as-constant?12_200 #t)))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_201 phase-level_202 name_203)"
"(let-values(((d_204)(namespace->definitions ns_201 phase-level_202)))"
"(1/instance-unset-variable!(definitions-variables d_204) name_203))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_205 phase-level_206 name_207 val_208)"
"(let-values(((d_209)(namespace->definitions ns_205(add1 phase-level_206))))"
"(hash-set!(definitions-transformers d_209) name_207 val_208))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_210 phase-level_211 name_212)"
"(let-values(((d_213)(namespace->definitions ns_210(add1 phase-level_211))))"
"(hash-remove!(definitions-transformers d_213) name_212))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_214 phase-level_215 name_216 fail-k_217)"
"(let-values(((d_218)(namespace->definitions ns_214 phase-level_215)))"
"(1/instance-variable-value(definitions-variables d_218) name_216 fail-k_217))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_219 phase-level_220 name_221 fail-k_222)"
"(let-values(((d_223)(namespace->definitions ns_219(add1 phase-level_220))))"
"(hash-ref(definitions-transformers d_223) name_221 fail-k_222))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_224 phase-shift_225)(definitions-variables(namespace->definitions ns_224 phase-shift_225))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_226 b-ns_227)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_226) 0 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_227) 0 'no-b))))"
"(void)"
"(void)"
"(define-values(original-property-sym)(gensym 'original))"
"(void)"
"(void)"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 #f))))"
"(void)"
"(void)"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values(((new-stx_6) new-stx3_2))"
"(let-values(((old-stx_7) old-stx4_3))"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) #f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()"
"(if id_8"
"(syntax-property$1"
" new-stx_6"
" 'origin"
"(cons id_8(hash-ref(syntax-props new-stx_6) 'origin null)))"
" new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values(((the-struct_14) new-stx_6))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values(((the-struct_16) new-stx_6))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props8_17) old-props_10))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values(((ht_20) old-props-with-origin_18))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash? ht_21)(immutable? ht_21) #f))"
" ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_20"
" i_24)))"
"(let-values(((new-props_27)"
"(let-values(((new-props_28)"
" new-props_23))"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(for-loop_22"
" new-props_27"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(unsafe-immutable-hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values(((ht_31) new-props_11))"
"(begin"
"(if((lambda(ht_32)"
"(if(hash? ht_32)(immutable? ht_32) #f))"
" ht_31)"
"(void)"
"(let-values()(default-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_35)))"
"(let-values(((old-props_38)"
"(let-values(((old-props_39)"
" old-props_34))"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(for-loop_33"
" old-props_38"
"(unsafe-immutable-hash-iterate-next"
" ht_31"
" i_35))))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(unsafe-immutable-hash-iterate-first ht_31))))))))"
"(let-values(((the-struct_42) new-stx_6))"
"(if(syntax?$1 the-struct_42)"
"(let-values(((props9_43) updated-props_19))"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 #f #f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_52 new-stx_53)"
"(let-values(((lst_54) old-stxes_52))"
"(begin"
"(if(list? lst_54)(void)(let-values()(in-list lst_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(new-stx_56 lst_57)"
"(if(pair? lst_57)"
"(let-values(((old-stx_58)(unsafe-car lst_57)))"
"(let-values(((new-stx_59)"
"(let-values(((new-stx_60) new-stx_56))"
"(let-values(((new-stx_61)"
"(let-values()"
"(syntax-track-origin$1 new-stx_60 old-stx_58))))"
"(values new-stx_61)))))"
"(for-loop_55 new-stx_59(unsafe-cdr lst_57))))"
" new-stx_56))))"
" for-loop_55)"
" new-stx_53"
" lst_54)))))"
"(void)"
"(void)"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list(cons prop:exn:srclocs(lambda(e_23)(1/exn:fail:syntax-exprs e_23))))"
" #f"
" #f"
" '(0)"
"(lambda(str_24 cm_25 exprs_26 info_27)"
"(begin"
"(if(if(list? exprs_26)(andmap2 syntax?$1 exprs_26) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_26)))"
"(values str_24 cm_25 exprs_26)))"
" 'exn:fail:syntax)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_28 make-_29 ?_30 -ref_31 -set!_32)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_28 make-_29 ?_30)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_43)"
"(lambda(given-name9_44"
" message10_45"
" expr1_46"
" sub-expr2_47"
" extra-sources3_48"
" message-suffix4_49"
" expr5_50"
" sub-expr6_51"
" extra-sources7_52"
" message-suffix8_53)"
"(let-values(((given-name_54) given-name9_44))"
"(let-values(((message_55) message10_45))"
"(let-values(((expr_56)(if expr5_50 expr1_46 #f)))"
"(let-values(((sub-expr_57)(if sub-expr6_51 sub-expr2_47 #f)))"
"(let-values(((extra-sources_58)(if extra-sources7_52 extra-sources3_48 null)))"
"                            (let-values (((message-suffix_59) (if message-suffix8_53 message-suffix4_49 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_54"
" message_55"
" expr_56"
" sub-expr_57"
" extra-sources_58"
" message-suffix_59)))))))))))"
"(case-lambda"
"((given-name_60 message_61)(raise-syntax-error11_43 given-name_60 message_61 #f #f #f #f #f #f #f #f))"
"((given-name_62 message_63 expr_64 sub-expr_65 extra-sources_66 message-suffix4_67)"
"(raise-syntax-error11_43"
" given-name_62"
" message_63"
" expr_64"
" sub-expr_65"
" extra-sources_66"
" message-suffix4_67"
" #t"
" #t"
" #t"
" #t))"
"((given-name_68 message_69 expr_70 sub-expr_71 extra-sources3_72)"
"(raise-syntax-error11_43 given-name_68 message_69 expr_70 sub-expr_71 extra-sources3_72 #f #t #t #t #f))"
"((given-name_73 message_74 expr_75 sub-expr2_76)"
"(raise-syntax-error11_43 given-name_73 message_74 expr_75 sub-expr2_76 #f #f #t #t #f #f))"
"((given-name_77 message_78 expr1_79)"
"(raise-syntax-error11_43 given-name_77 message_78 expr1_79 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_80)"
"(lambda(given-name21_81"
" message22_82"
" expr13_83"
" sub-expr14_84"
" extra-sources15_85"
" message-suffix16_86"
" expr17_87"
" sub-expr18_88"
" extra-sources19_89"
" message-suffix20_90)"
"(let-values(((given-name_91) given-name21_81))"
"(let-values(((message_92) message22_82))"
"(let-values(((expr_93)(if expr17_87 expr13_83 #f)))"
"(let-values(((sub-expr_94)(if sub-expr18_88 sub-expr14_84 #f)))"
"(let-values(((extra-sources_95)(if extra-sources19_89 extra-sources15_85 null)))"
"                            (let-values (((message-suffix_96) (if message-suffix20_90 message-suffix16_86 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_91"
" message_92"
" expr_93"
" sub-expr_94"
" extra-sources_95"
" message-suffix_96)))))))))))"
"(case-lambda"
"((given-name_97 message_98)(raise-unbound-syntax-error23_80 given-name_97 message_98 #f #f #f #f #f #f #f #f))"
"((given-name_99 message_100 expr_101 sub-expr_102 extra-sources_103 message-suffix16_104)"
"(raise-unbound-syntax-error23_80"
" given-name_99"
" message_100"
" expr_101"
" sub-expr_102"
" extra-sources_103"
" message-suffix16_104"
" #t"
" #t"
" #t"
" #t))"
"((given-name_105 message_106 expr_107 sub-expr_108 extra-sources15_109)"
"(raise-unbound-syntax-error23_80"
" given-name_105"
" message_106"
" expr_107"
" sub-expr_108"
" extra-sources15_109"
" #f"
" #t"
" #t"
" #t"
" #f))"
"((given-name_110 message_111 expr_112 sub-expr14_113)"
"(raise-unbound-syntax-error23_80 given-name_110 message_111 expr_112 sub-expr14_113 #f #f #t #t #f #f))"
"((given-name_114 message_115 expr13_116)"
"(raise-unbound-syntax-error23_80 given-name_114 message_115 expr13_116 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_117 given-name_118 message_119 expr_120 sub-expr_121 extra-sources_122 message-suffix_123)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_128)(not given-name_118)))"
"(if or-part_128 or-part_128(symbol? given-name_118)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_118)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_119)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_119)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_122)(andmap2 syntax?$1 extra-sources_122) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_122)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_123)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_123)))"
"(values))))"
"(let-values(((name_124)"
"(format"
"                           \"~a\""
"(let-values(((or-part_129) given-name_118))"
"(if or-part_129"
" or-part_129"
"(let-values(((or-part_130)(extract-form-name expr_120)))"
"(if or-part_130 or-part_130 '?)))))))"
"(let-values(((at-message_125)"
"(let-values(((or-part_131)"
"(if sub-expr_121"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_121)))"
" #f)"
" #f)))"
"                              (if or-part_131 or-part_131 \"\"))))"
"(let-values(((in-message_126)"
"(let-values(((or-part_132)"
"(if expr_120"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_120)))"
" #f)"
" #f)))"
"                                (if or-part_132 or-part_132 \"\"))))"
"(let-values(((src-loc-str_127)"
"(let-values(((or-part_133)(extract-source-location sub-expr_121)))"
"(if or-part_133"
" or-part_133"
"(let-values(((or-part_134)(extract-source-location expr_120)))"
"                                      (if or-part_134 or-part_134 \"\"))))))"
"(raise"
"(exn:fail:syntax_117"
"(string-append"
" src-loc-str_127"
" name_124"
"                       \": \""
" message_119"
" at-message_125"
" in-message_126"
" message-suffix_123)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_135) sub-expr_121))(if or-part_135 or-part_135 expr_120))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_136) sub-expr_121))(if or-part_136 or-part_136 expr_120)))"
" extra-sources_122)"
" extra-sources_122))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_137)"
"(if(syntax?$1 s_137)"
"(let-values()"
"(let-values(((e_138)(syntax-e$1 s_137)))"
"(if(symbol? e_138)"
"(let-values() e_138)"
"(if(if(pair? e_138)(identifier?(car e_138)) #f)"
"(let-values()(syntax-e$1(car e_138)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_139)"
"(if(syntax?$1 s_139)"
"(if(syntax-srcloc s_139)"
"        (let-values (((str_140) (srcloc->string (syntax-srcloc s_139)))) (if str_140 (string-append str_140 \": \") #f))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(void)"
"(void)"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 19"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18)"
" #f"
" 'module)))))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 0 'source-name)"
"(make-struct-field-accessor -ref_8 1 'self)"
"(make-struct-field-accessor -ref_8 2 'requires)"
"(make-struct-field-accessor -ref_8 3 'provides)"
"(make-struct-field-accessor -ref_8 4 'access)"
"(make-struct-field-accessor -ref_8 5 'language-info)"
"(make-struct-field-accessor -ref_8 6 'min-phase-level)"
"(make-struct-field-accessor -ref_8 7 'max-phase-level)"
"(make-struct-field-accessor -ref_8 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_8 9 'prepare-instance)"
"(make-struct-field-accessor -ref_8 10 'instantiate-phase)"
"(make-struct-field-accessor -ref_8 11 'primitive?)"
"(make-struct-field-accessor -ref_8 12 'predefined?)"
"(make-struct-field-accessor -ref_8 13 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_8 14 'no-protected?)"
"(make-struct-field-accessor -ref_8 15 'inspector)"
"(make-struct-field-accessor -ref_8 16 'submodule-names)"
"(make-struct-field-accessor -ref_8 17 'supermodule-name)"
"(make-struct-field-accessor -ref_8 18 'get-all-variables)"
"(make-struct-field-mutator -set!_9 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet"
" module-linklet-info-module-uses"
" module-linklet-info-self)"
"(let-values(((struct:_115 make-_116 ?_117 -ref_118 -set!_119)"
"(let-values()"
"(let-values()"
"(make-struct-type 'module-linklet-info #f 3 0 #f null #f #f '(0 1 2) #f 'module-linklet-info)))))"
"(values"
" struct:_115"
" make-_116"
" ?_117"
"(make-struct-field-accessor -ref_118 0 'linklet)"
"(make-struct-field-accessor -ref_118 1 'module-uses)"
"(make-struct-field-accessor -ref_118 2 'self))))"
"(define-values"
"(lifted/1.1$22)"
"(make-required 'make-module(case-lambda((self_145)(apply missing-kw self_145 null))) #f #f))"
"(define-values"
"(make-module37.1)"
"(lambda(cross-phase-persistent?15_146"
" cross-phase-persistent?32_147"
" get-all-variables19_148"
" get-all-variables36_149"
" instantiate-phase-callback9_150"
" language-info12_151"
" language-info29_152"
" max-phase-level8_153"
" max-phase-level25_154"
" min-phase-level7_155"
" min-phase-level24_156"
" no-protected?16_157"
" no-protected?33_158"
" phase-level-linklet-info-callback11_159"
" phase-level-linklet-info-callback28_160"
" predefined?14_161"
" predefined?31_162"
" prepare-instance-callback10_163"
" prepare-instance-callback27_164"
" primitive?13_165"
" primitive?30_166"
" provides6_167"
" requires5_168"
" requires22_169"
" self4_170"
" source-name3_171"
" source-name20_172"
" submodule-names17_173"
" submodule-names34_174"
" supermodule-name18_175"
" supermodule-name35_176)"
"(let-values(((source-name_177)(if source-name20_172 source-name3_171 #f)))"
"(let-values(((self_178) self4_170))"
"(let-values(((requires_179)(if requires22_169 requires5_168 null)))"
"(let-values(((provides_180) provides6_167))"
"(let-values(((min-phase-level_181)(if min-phase-level24_156 min-phase-level7_155 0)))"
"(let-values(((max-phase-level_182)(if max-phase-level25_154 max-phase-level8_153 0)))"
"(let-values(((instantiate-phase_183) instantiate-phase-callback9_150))"
"(let-values(((prepare-instance_184)"
"(if prepare-instance-callback27_164 prepare-instance-callback10_163 void)))"
"(let-values(((phase-level-linklet-info-callback_185)"
"(if phase-level-linklet-info-callback28_160"
" phase-level-linklet-info-callback11_159"
"(lambda(phase-level_186) #f))))"
"(let-values(((language-info_187)(if language-info29_152 language-info12_151 #f)))"
"(let-values(((primitive?_188)(if primitive?30_166 primitive?13_165 #f)))"
"(let-values(((predefined?_189)(if predefined?31_162 predefined?14_161 #f)))"
"(let-values(((cross-phase-persistent?_190)"
"(if cross-phase-persistent?32_147"
" cross-phase-persistent?15_146"
" primitive?_188)))"
"(let-values(((no-protected?_191)(if no-protected?33_158 no-protected?16_157 #f)))"
"(let-values(((submodule-names_192)"
"(if submodule-names34_174 submodule-names17_173 null)))"
"(let-values(((supermodule-name_193)"
"(if supermodule-name35_176 supermodule-name18_175 #f)))"
"(let-values(((get-all-variables_194)"
"(if get-all-variables36_149"
" get-all-variables19_148"
"(lambda() null))))"
"(let-values()"
"(module1.1"
" source-name_177"
" self_178"
" requires_179"
" provides_180"
" #f"
" language-info_187"
" min-phase-level_181"
" max-phase-level_182"
" phase-level-linklet-info-callback_185"
" prepare-instance_184"
" instantiate-phase_183"
" primitive?_188"
" predefined?_189"
" cross-phase-persistent?_190"
" no-protected?_191"
"(current-code-inspector)"
" submodule-names_192"
" supermodule-name_193"
" get-all-variables_194)))))))))))))))))))))"
"(define-values"
"(unpack38.1)"
"(lambda(given-kws_195 given-args_196)"
"(let-values(((cross-phase-persistent?32_197)"
"(if(pair? given-kws_195)(eq? '#:cross-phase-persistent?(car given-kws_195)) #f)))"
"(let-values(((cross-phase-persistent?15_198)(if cross-phase-persistent?32_197(car given-args_196)(void)))"
"((given-kws_199)(if cross-phase-persistent?32_197(cdr given-kws_195) given-kws_195))"
"((given-args_200)(if cross-phase-persistent?32_197(cdr given-args_196) given-args_196)))"
"(let-values(((get-all-variables36_201)"
"(if(pair? given-kws_199)(eq? '#:get-all-variables(car given-kws_199)) #f)))"
"(let-values(((get-all-variables19_202)(if get-all-variables36_201(car given-args_200)(void)))"
"((given-kws_203)(if get-all-variables36_201(cdr given-kws_199) given-kws_199))"
"((given-args_204)(if get-all-variables36_201(cdr given-args_200) given-args_200)))"
"(let-values(((instantiate-phase-callback9_205)(car given-args_204))"
"((given-kws_206)(cdr given-kws_203))"
"((given-args_207)(cdr given-args_204)))"
"(let-values(((language-info29_208)"
"(if(pair? given-kws_206)(eq? '#:language-info(car given-kws_206)) #f)))"
"(let-values(((language-info12_209)(if language-info29_208(car given-args_207)(void)))"
"((given-kws_210)(if language-info29_208(cdr given-kws_206) given-kws_206))"
"((given-args_211)(if language-info29_208(cdr given-args_207) given-args_207)))"
"(let-values(((max-phase-level25_212)"
"(if(pair? given-kws_210)(eq? '#:max-phase-level(car given-kws_210)) #f)))"
"(let-values(((max-phase-level8_213)(if max-phase-level25_212(car given-args_211)(void)))"
"((given-kws_214)(if max-phase-level25_212(cdr given-kws_210) given-kws_210))"
"((given-args_215)(if max-phase-level25_212(cdr given-args_211) given-args_211)))"
"(let-values(((min-phase-level24_216)"
"(if(pair? given-kws_214)(eq? '#:min-phase-level(car given-kws_214)) #f)))"
"(let-values(((min-phase-level7_217)(if min-phase-level24_216(car given-args_215)(void)))"
"((given-kws_218)(if min-phase-level24_216(cdr given-kws_214) given-kws_214))"
"((given-args_219)(if min-phase-level24_216(cdr given-args_215) given-args_215)))"
"(let-values(((no-protected?33_220)"
"(if(pair? given-kws_218)(eq? '#:no-protected?(car given-kws_218)) #f)))"
"(let-values(((no-protected?16_221)(if no-protected?33_220(car given-args_219)(void)))"
"((given-kws_222)(if no-protected?33_220(cdr given-kws_218) given-kws_218))"
"((given-args_223)"
"(if no-protected?33_220(cdr given-args_219) given-args_219)))"
"(let-values(((phase-level-linklet-info-callback28_224)"
"(if(pair? given-kws_222)"
"(eq? '#:phase-level-linklet-info-callback(car given-kws_222))"
" #f)))"
"(let-values(((phase-level-linklet-info-callback11_225)"
"(if phase-level-linklet-info-callback28_224(car given-args_223)(void)))"
"((given-kws_226)"
"(if phase-level-linklet-info-callback28_224"
"(cdr given-kws_222)"
" given-kws_222))"
"((given-args_227)"
"(if phase-level-linklet-info-callback28_224"
"(cdr given-args_223)"
" given-args_223)))"
"(let-values(((predefined?31_228)"
"(if(pair? given-kws_226)(eq? '#:predefined?(car given-kws_226)) #f)))"
"(let-values(((predefined?14_229)"
"(if predefined?31_228(car given-args_227)(void)))"
"((given-kws_230)"
"(if predefined?31_228(cdr given-kws_226) given-kws_226))"
"((given-args_231)"
"(if predefined?31_228(cdr given-args_227) given-args_227)))"
"(let-values(((prepare-instance-callback27_232)"
"(if(pair? given-kws_230)"
"(eq? '#:prepare-instance-callback(car given-kws_230))"
" #f)))"
"(let-values(((prepare-instance-callback10_233)"
"(if prepare-instance-callback27_232(car given-args_231)(void)))"
"((given-kws_234)"
"(if prepare-instance-callback27_232"
"(cdr given-kws_230)"
" given-kws_230))"
"((given-args_235)"
"(if prepare-instance-callback27_232"
"(cdr given-args_231)"
" given-args_231)))"
"(let-values(((primitive?30_236)"
"(if(pair? given-kws_234)"
"(eq? '#:primitive?(car given-kws_234))"
" #f)))"
"(let-values(((primitive?13_237)"
"(if primitive?30_236(car given-args_235)(void)))"
"((given-kws_238)"
"(if primitive?30_236(cdr given-kws_234) given-kws_234))"
"((given-args_239)"
"(if primitive?30_236(cdr given-args_235) given-args_235)))"
"(let-values(((provides6_240)(car given-args_239))"
"((given-kws_241)(cdr given-kws_238))"
"((given-args_242)(cdr given-args_239)))"
"(let-values(((requires22_243)"
"(if(pair? given-kws_241)"
"(eq? '#:requires(car given-kws_241))"
" #f)))"
"(let-values(((requires5_244)"
"(if requires22_243(car given-args_242)(void)))"
"((given-kws_245)"
"(if requires22_243(cdr given-kws_241) given-kws_241))"
"((given-args_246)"
"(if requires22_243"
"(cdr given-args_242)"
" given-args_242)))"
"(let-values(((self4_247)(car given-args_246))"
"((given-kws_248)(cdr given-kws_245))"
"((given-args_249)(cdr given-args_246)))"
"(let-values(((source-name20_250)"
"(if(pair? given-kws_248)"
"(eq? '#:source-name(car given-kws_248))"
" #f)))"
"(let-values(((source-name3_251)"
"(if source-name20_250"
"(car given-args_249)"
"(void)))"
"((given-kws_252)"
"(if source-name20_250"
"(cdr given-kws_248)"
" given-kws_248))"
"((given-args_253)"
"(if source-name20_250"
"(cdr given-args_249)"
" given-args_249)))"
"(let-values(((submodule-names34_254)"
"(if(pair? given-kws_252)"
"(eq? '#:submodule-names(car given-kws_252))"
" #f)))"
"(let-values(((submodule-names17_255)"
"(if submodule-names34_254"
"(car given-args_253)"
"(void)))"
"((given-kws_256)"
"(if submodule-names34_254"
"(cdr given-kws_252)"
" given-kws_252))"
"((given-args_257)"
"(if submodule-names34_254"
"(cdr given-args_253)"
" given-args_253)))"
"(let-values(((supermodule-name35_258)"
"(pair? given-kws_256)))"
"(let-values(((supermodule-name18_259)"
"(if supermodule-name35_258"
"(car given-args_257)"
"(void))))"
"(make-module37.1"
" cross-phase-persistent?15_198"
" cross-phase-persistent?32_197"
" get-all-variables19_202"
" get-all-variables36_201"
" instantiate-phase-callback9_205"
" language-info12_209"
" language-info29_208"
" max-phase-level8_213"
" max-phase-level25_212"
" min-phase-level7_217"
" min-phase-level24_216"
" no-protected?16_221"
" no-protected?33_220"
" phase-level-linklet-info-callback11_225"
" phase-level-linklet-info-callback28_224"
" predefined?14_229"
" predefined?31_228"
" prepare-instance-callback10_233"
" prepare-instance-callback27_232"
" primitive?13_237"
" primitive?30_236"
" provides6_240"
" requires5_244"
" requires22_243"
" self4_247"
" source-name3_251"
" source-name20_250"
" submodule-names17_255"
" submodule-names34_254"
" supermodule-name18_259"
" supermodule-name35_258))))))))))))))))))))))))))))))))))"
"(define-values"
"(make-module39.1)"
"(lifted/1.1$22"
"(lambda(given-kws_260 given-argc_261)"
"(if(= given-argc_261 2)"
"(subsets?"
" '(#:instantiate-phase-callback #:provides #:self)"
" given-kws_260"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:phase-level-linklet-info-callback"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name))"
" #f))"
"(case-lambda((given-kws_262 given-args_263)(unpack38.1 given-kws_262 given-args_263)))"
" '(#:instantiate-phase-callback #:provides #:self)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:phase-level-linklet-info-callback"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)))"
"(define-values"
"(struct:module-instance"
" module-instance40.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_264 make-_265 ?_266 -ref_267 -set!_268)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_264"
" make-_265"
" ?_266"
"(make-struct-field-accessor -ref_267 0 'namespace)"
"(make-struct-field-accessor -ref_267 1 'module)"
"(make-struct-field-accessor -ref_267 2 'shifted-requires)"
"(make-struct-field-accessor -ref_267 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_267 4 'made-available?)"
"(make-struct-field-accessor -ref_267 5 'attached?)"
"(make-struct-field-accessor -ref_267 6 'data-box)"
"(make-struct-field-mutator -set!_268 2 'shifted-requires)"
"(make-struct-field-mutator -set!_268 4 'made-available?)"
"(make-struct-field-mutator -set!_268 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_314 m_315)(module-instance40.1 m-ns_314 m_315 #f(make-hasheqv) #f #f(box #f))))"
"(define-values"
"(lifted/2.1$9)"
"(make-required"
" 'make-module-namespace"
"(case-lambda((self_316 ns_317)(apply missing-kw self_316 ns_317 null)))"
" #f"
" #f))"
"(define-values"
"(make-module-namespace48.1)"
"(lambda(for-submodule?43_318 mpi41_319 root-expand-context42_320 ns47_321)"
"(let-values(((ns_322) ns47_321))"
"(let-values(((name-mpi_323) mpi41_319))"
"(let-values(((root-expand-ctx_324) root-expand-context42_320))"
"(let-values(((for-submodule?_325) for-submodule?43_318))"
"(let-values()"
"(let-values(((phase_326) 0))"
"(let-values(((name_327)(1/module-path-index-resolve name-mpi_323)))"
"(let-values(((m-ns_328)"
"(let-values(((the-struct_330)"
"(let-values(((...namespace/module.rkt:145:27_331) new-namespace11.1)"
"((ns158_332) ns_322)"
"((root-expand-ctx159_333) root-expand-ctx_324)"
"((temp160_334) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference new-namespace11.1))"
"(new-namespace9.1"
" temp160_334"
" #t"
" root-expand-ctx159_333"
" #t"
" ns158_332"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:145:27_331"
" keyword-procedure-extract"
" '(#:register? #:root-expand-ctx)"
" 3)"
" '(#:register? #:root-expand-ctx)"
"(list temp160_334 root-expand-ctx159_333)"
" ns158_332)))))"
"(if(1/namespace? the-struct_330)"
"(let-values(((mpi150_335) name-mpi_323)"
"((source-name151_336)(resolved-module-path-root-name name_327))"
"((phase152_337) phase_326)"
"((0-phase153_338) phase_326)"
"((submodule-declarations154_339)"
"(if for-submodule?_325"
"(namespace-submodule-declarations ns_322)"
"(make-hash)))"
"((available-module-instances155_340)(make-hasheqv))"
"((module-instances156_341)(make-hasheqv))"
"((declaration-inspector157_342)(current-code-inspector)))"
"(namespace1.1"
" mpi150_335"
" source-name151_336"
"(namespace-root-expand-ctx the-struct_330)"
" phase152_337"
" 0-phase153_338"
"(namespace-phase-to-namespace the-struct_330)"
"(namespace-phase-level-to-definitions the-struct_330)"
"(1/namespace-module-registry the-struct_330)"
"(namespace-bulk-binding-registry the-struct_330)"
" submodule-declarations154_339"
"(namespace-root-namespace the-struct_330)"
" declaration-inspector157_342"
"(namespace-inspector the-struct_330)"
" available-module-instances155_340"
" module-instances156_341))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_330)))))"
"(let-values((()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_328) phase_326 m-ns_328)"
"(values))))"
"(let-values(((at-phase_329)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_328) phase_326 at-phase_329)"
"(hash-set! at-phase_329 name_327(make-module-instance m-ns_328 #f))"
" m-ns_328)))))))))))))"
"(define-values"
"(unpack49.1$2)"
"(lambda(given-kws_343 given-args_344 ns47_345)"
"(let-values(((for-submodule?43_346)(car given-args_344))"
"((given-kws_347)(cdr given-kws_343))"
"((given-args_348)(cdr given-args_344)))"
"(let-values(((mpi41_349)(car given-args_348))"
"((given-kws_350)(cdr given-kws_347))"
"((given-args_351)(cdr given-args_348)))"
"(let-values(((root-expand-context42_352)(car given-args_351)))"
"(make-module-namespace48.1 for-submodule?43_346 mpi41_349 root-expand-context42_352 ns47_345))))))"
"(define-values"
"(make-module-namespace50.1)"
"(lifted/2.1$9"
"(lambda(given-kws_353 given-argc_354)"
"(if(= given-argc_354 3)"
"(let-values(((l2_355) given-kws_353))"
"(if(pair? l2_355)"
"(if(eq?(car l2_355) '#:for-submodule?)"
"(let-values(((l2_356)(cdr l2_355)))"
"(if(pair? l2_356)"
"(if(eq?(car l2_356) '#:mpi)"
"(let-values(((l2_357)(cdr l2_356)))"
"(if(pair? l2_357)(if(eq?(car l2_357) '#:root-expand-context)(null?(cdr l2_357)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_358 given-args_359 ns_360)(unpack49.1$2 given-kws_358 given-args_359 ns_360)))"
" '(#:for-submodule? #:mpi #:root-expand-context)"
" '(#:for-submodule? #:mpi #:root-expand-context)))"
"(define-values"
"(declare-module!56.1)"
"(lambda(with-submodules?51_361 with-submodules?52_362 ns53_363 m54_364 mod-name55_365)"
"(let-values(((ns_366) ns53_363))"
"(let-values(((m_367) m54_364))"
"(let-values(((mod-name_368) mod-name55_365))"
"(let-values(((with-submodules?_369)(if with-submodules?52_362 with-submodules?51_361 #t)))"
"(let-values()"
"(let-values(((prior-m_370)"
"(if with-submodules?_369"
"(hash-ref"
"(module-registry-declarations(1/namespace-module-registry ns_366))"
" mod-name_368"
" #f)"
" #f)))"
"(let-values(((prior-mi_371)"
"(if prior-m_370"
"(if(not(eq? m_367 prior-m_370))"
"(let-values(((ns161_372) ns_366)"
"((mod-name162_373) mod-name_368)"
"((temp163_374)(namespace-phase ns_366)))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns161_372"
" mod-name162_373"
" temp163_374)"
"(namespace->module-instance70.1 ns161_372 mod-name162_373 temp163_374)))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_370(not(eq? m_367 prior-m_370)) #f)"
"(let-values()(check-redeclaration-ok prior-m_370 prior-mi_371 mod-name_368))"
"(void))"
"(hash-set!"
"(if with-submodules?_369"
"(module-registry-declarations(1/namespace-module-registry ns_366))"
"(namespace-submodule-declarations ns_366))"
" mod-name_368"
" m_367)"
"(if with-submodules?_369"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_366)"
" mod-name_368"
"(module-self m_367)"
"(module-provides m_367)))"
"(void))"
"((1/current-module-name-resolver) mod-name_368 #f)"
"(if prior-mi_371"
"(let-values()"
"(let-values(((m-ns_375)(module-instance-namespace prior-mi_371)))"
"(let-values(((states_376)(module-instance-phase-level-to-state prior-mi_371)))"
"(let-values(((phase_377)(namespace-phase ns_366)))"
"(let-values(((visit?_378)(eq? 'started(hash-ref states_376(add1 phase_377) #f))))"
"(let-values(((run?_379)(eq? 'started(hash-ref states_376 phase_377 #f))))"
"(let-values(((at-phase_380)"
"(hash-ref(namespace-module-instances ns_366) phase_377)))"
"(begin"
"(hash-set! at-phase_380 mod-name_368(make-module-instance m-ns_375 m_367))"
"(if visit?_378"
"(let-values()"
"(let-values(((ns164_381) ns_366)"
"((temp165_382)(namespace-mpi m-ns_375))"
"((phase166_383) phase_377))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!104.1))"
"(namespace-module-visit!102.1 #f #f ns164_381 temp165_382 phase166_383)"
"(namespace-module-visit!104.1 ns164_381 temp165_382 phase166_383))))"
"(void))"
"(if run?_379"
"(let-values()"
"(let-values(((ns167_384) ns_366)"
"((temp168_385)(namespace-mpi m-ns_375))"
"((phase169_386) phase_377))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns167_384"
" temp168_385"
" phase169_386)"
"(namespace-module-instantiate!96.1 ns167_384 temp168_385 phase169_386))))"
"(void))))))))))"
"(void))))))))))))"
"(define-values"
"(unpack57.1)"
"(lambda(given-kws_387 given-args_388 ns53_389 m54_390 mod-name55_391)"
"(let-values(((with-submodules?52_392)(pair? given-kws_387)))"
"(let-values(((with-submodules?51_393)(if with-submodules?52_392(car given-args_388)(void))))"
"(declare-module!56.1 with-submodules?51_393 with-submodules?52_392 ns53_389 m54_390 mod-name55_391)))))"
"(define-values"
"(declare-module!58.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_394 given-argc_395)"
"(if(= given-argc_395 5)"
"(let-values(((l1_396) given-kws_394))"
"(let-values(((l1_397)"
"(if(null? l1_396) l1_396(if(eq?(car l1_396) '#:with-submodules?)(cdr l1_396) l1_396))))"
"(null? l1_397)))"
" #f))"
"(case-lambda"
"((given-kws_398 given-args_399 ns_400 m_401 mod-name_402)"
"(unpack57.1 given-kws_398 given-args_399 ns_400 m_401 mod-name_402)))"
" null"
" '(#:with-submodules?)"
"(let-values(((declare-module!_403)"
"(case-lambda((ns_404 m_405 mod-name_406)(unpack57.1 null null ns_404 m_405 mod-name_406)))))"
" declare-module!_403)))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_407 prior-mi_408 mod-name_409)"
"(begin"
"(if(module-cross-phase-persistent? prior-m_407)"
"(let-values()"
"          (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_409))"
"(void))"
"(if(if prior-mi_408"
"(let-values(((or-part_410)(module-instance-attached? prior-mi_408)))"
"(if or-part_410"
" or-part_410"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_408))))))"
" #f)"
"(let-values()"
"          (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_409))"
"(void)))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_411 mod-name_412) (raise-arguments-error who_411 \"unknown module\" \"module name\" mod-name_412)))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_413 name_414 phase-level_415)"
"(let-values(((m_416)(namespace->module ns_413 name_414)))"
"(if m_416((module-phase-level-linklet-info-callback m_416) phase-level_415) #f))))"
"(define-values"
"(namespace->module-instance68.1)"
"(lambda(check-available-at-phase-level60_417"
" check-available-at-phase-level63_418"
" complain-on-failure?59_419"
" complain-on-failure?62_420"
" unavailable-callback61_421"
" unavailable-callback64_422"
" ns65_423"
" name66_424"
" 0-phase67_425)"
"(let-values(((ns_426) ns65_423))"
"(let-values(((name_427) name66_424))"
"(let-values(((0-phase_428) 0-phase67_425))"
"(let-values(((complain-on-failure?_429)(if complain-on-failure?62_420 complain-on-failure?59_419 #f)))"
"(let-values(((check-available-at-phase-level_430)"
"(if check-available-at-phase-level63_418 check-available-at-phase-level60_417 #f)))"
"(let-values(((unavailable-callback_431)(if unavailable-callback64_422 unavailable-callback61_421 void)))"
"(let-values()"
"(let-values(((mi_432)"
"(let-values(((or-part_433)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_426) 0-phase_428 '#hasheq())"
" name_427"
" #f)))"
"(if or-part_433"
" or-part_433"
"(let-values(((or-part_434)"
"(let-values(((c-ns_435)"
"(let-values(((or-part_436)"
"(namespace-root-namespace ns_426)))"
"(if or-part_436 or-part_436 ns_426))))"
"(hash-ref(namespace-module-instances c-ns_435) name_427 #f))))"
"(if or-part_434"
" or-part_434"
"(if complain-on-failure?_429"
"                                          (error \"no module instance found:\" name_427 0-phase_428)"
" #f)))))))"
"(begin"
"(if(if mi_432 check-available-at-phase-level_430 #f)"
"(let-values()"
"(check-availablilty mi_432 check-available-at-phase-level_430 unavailable-callback_431))"
"(void))"
" mi_432)))))))))))"
"(define-values"
"(unpack69.1)"
"(lambda(given-kws_437 given-args_438 ns65_439 name66_440 0-phase67_441)"
"(let-values(((check-available-at-phase-level63_442)"
"(if(pair? given-kws_437)(eq? '#:check-available-at-phase-level(car given-kws_437)) #f)))"
"(let-values(((check-available-at-phase-level60_443)"
"(if check-available-at-phase-level63_442(car given-args_438)(void)))"
"((given-kws_444)(if check-available-at-phase-level63_442(cdr given-kws_437) given-kws_437))"
"((given-args_445)(if check-available-at-phase-level63_442(cdr given-args_438) given-args_438)))"
"(let-values(((complain-on-failure?62_446)"
"(if(pair? given-kws_444)(eq? '#:complain-on-failure?(car given-kws_444)) #f)))"
"(let-values(((complain-on-failure?59_447)(if complain-on-failure?62_446(car given-args_445)(void)))"
"((given-kws_448)(if complain-on-failure?62_446(cdr given-kws_444) given-kws_444))"
"((given-args_449)(if complain-on-failure?62_446(cdr given-args_445) given-args_445)))"
"(let-values(((unavailable-callback64_450)(pair? given-kws_448)))"
"(let-values(((unavailable-callback61_451)(if unavailable-callback64_450(car given-args_449)(void))))"
"(namespace->module-instance68.1"
" check-available-at-phase-level60_443"
" check-available-at-phase-level63_442"
" complain-on-failure?59_447"
" complain-on-failure?62_446"
" unavailable-callback61_451"
" unavailable-callback64_450"
" ns65_439"
" name66_440"
" 0-phase67_441)))))))))"
"(define-values"
"(namespace->module-instance70.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_452 given-argc_453)"
"(if(= given-argc_453 5)"
"(let-values(((l1_454) given-kws_452))"
"(let-values(((l1_455)"
"(if(null? l1_454)"
" l1_454"
"(if(eq?(car l1_454) '#:check-available-at-phase-level)(cdr l1_454) l1_454))))"
"(let-values(((l1_456) l1_455))"
"(let-values(((l1_457)"
"(if(null? l1_456)"
" l1_456"
"(if(eq?(car l1_456) '#:complain-on-failure?)(cdr l1_456) l1_456))))"
"(let-values(((l1_458) l1_457))"
"(let-values(((l1_459)"
"(if(null? l1_458)"
" l1_458"
"(if(eq?(car l1_458) '#:unavailable-callback)(cdr l1_458) l1_458))))"
"(null? l1_459)))))))"
" #f))"
"(case-lambda"
"((given-kws_460 given-args_461 ns_462 name_463 0-phase_464)"
"(unpack69.1 given-kws_460 given-args_461 ns_462 name_463 0-phase_464)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(let-values(((namespace->module-instance_465)"
"(case-lambda((ns_466 name_467 0-phase_468)(unpack69.1 null null ns_466 name_467 0-phase_468)))))"
" namespace->module-instance_465)))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_469 name_470 0-phase_471 m_472 existing-m-ns_473)"
"(let-values(((m-ns_474)"
"(let-values(((the-struct_476) ns_469))"
"(if(1/namespace? the-struct_476)"
"(let-values(((mpi170_477)(namespace-mpi existing-m-ns_473))"
"((source-name171_478)(namespace-source-name existing-m-ns_473))"
"((root-expand-ctx172_479)(namespace-root-expand-ctx existing-m-ns_473))"
"((phase173_480)(namespace-phase existing-m-ns_473))"
"((0-phase174_481)(namespace-0-phase existing-m-ns_473))"
"((phase-to-namespace175_482)(make-hasheqv))"
"((phase-level-to-definitions176_483)"
"(if(module-cross-phase-persistent? m_472)"
"(namespace-phase-level-to-definitions existing-m-ns_473)"
"(make-hasheqv)))"
"((declaration-inspector177_484)(module-inspector m_472))"
"((inspector178_485)(namespace-inspector existing-m-ns_473)))"
"(namespace1.1"
" mpi170_477"
" source-name171_478"
" root-expand-ctx172_479"
" phase173_480"
" 0-phase174_481"
" phase-to-namespace175_482"
" phase-level-to-definitions176_483"
"(1/namespace-module-registry the-struct_476)"
"(namespace-bulk-binding-registry the-struct_476)"
"(namespace-submodule-declarations the-struct_476)"
"(namespace-root-namespace the-struct_476)"
" declaration-inspector177_484"
" inspector178_485"
"(namespace-available-module-instances the-struct_476)"
"(namespace-module-instances the-struct_476)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_476)))))"
"(let-values(((mi_475)(make-module-instance m-ns_474 m_472)))"
"(if(module-cross-phase-persistent? m_472)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_474) 0 m-ns_474)"
"(hash-set!(namespace-phase-level-to-definitions m-ns_474) 0(namespace->definitions existing-m-ns_473 0))"
"(hash-set!(namespace-phase-to-namespace m-ns_474) 1(namespace->namespace-at-phase m-ns_474 1))"
"(hash-set!(namespace-phase-level-to-definitions m-ns_474) 1(namespace->definitions existing-m-ns_473 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_486)(namespace-root-namespace ns_469)))(if or-part_486 or-part_486 ns_469)))"
" name_470"
" mi_475)"
"(hash-set!(module-instance-phase-level-to-state mi_475) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_474) 0-phase_471 m-ns_474)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_474)"
" 0"
"(namespace->definitions existing-m-ns_473 0))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_475) 0 'started)(values))))"
"(let-values(((at-phase_487)"
"(let-values(((or-part_488)"
"(hash-ref(namespace-module-instances ns_469) 0-phase_471 #f)))"
"(if or-part_488"
" or-part_488"
"(let-values(((at-phase_489)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_469) 0-phase_471 at-phase_489)"
" at-phase_489))))))"
"(hash-set! at-phase_487 name_470 mi_475)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_490 name_491 0-phase_492 m_493 mpi_494)"
"(let-values(((m-ns_495)"
"(let-values(((the-struct_497) ns_490))"
"(if(1/namespace? the-struct_497)"
"(let-values(((mpi179_498) mpi_494)"
"((source-name180_499)"
"(let-values(((or-part_507)(module-source-name m_493)))"
"(if or-part_507"
" or-part_507"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_494)))))"
"((root-expand-ctx181_500)(box #f))"
"((phase182_501) 0-phase_492)"
"((0-phase183_502) 0-phase_492)"
"((phase-to-namespace184_503)(make-hasheqv))"
"((phase-level-to-definitions185_504)(make-hasheqv))"
"((declaration-inspector186_505)(module-inspector m_493))"
"((inspector187_506)(make-inspector(module-inspector m_493))))"
"(namespace1.1"
" mpi179_498"
" source-name180_499"
" root-expand-ctx181_500"
" phase182_501"
" 0-phase183_502"
" phase-to-namespace184_503"
" phase-level-to-definitions185_504"
"(1/namespace-module-registry the-struct_497)"
"(namespace-bulk-binding-registry the-struct_497)"
"(namespace-submodule-declarations the-struct_497)"
"(namespace-root-namespace the-struct_497)"
" declaration-inspector186_505"
" inspector187_506"
"(namespace-available-module-instances the-struct_497)"
"(namespace-module-instances the-struct_497)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_497)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_495) 0-phase_492 m-ns_495)(values))))"
"(let-values(((mi_496)(make-module-instance m-ns_495 m_493)))"
"(begin"
"(if(module-cross-phase-persistent? m_493)"
"(hash-set!(namespace-module-instances ns_490) name_491 mi_496)"
"(let-values(((at-phase_508)"
"(let-values(((or-part_509)(hash-ref(namespace-module-instances ns_490) 0-phase_492 #f)))"
"(if or-part_509"
" or-part_509"
"(let-values(((at-phase_510)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_490) 0-phase_492 at-phase_510)"
" at-phase_510))))))"
"(hash-set! at-phase_508 name_491 mi_496)))"
" mi_496))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_511 check-available-at-phase-level_512 unavailable-callback_513)"
"(let-values(((m_514)(module-instance-module mi_511)))"
"(if(if m_514"
"(if(<="
"(module-min-phase-level m_514)"
"(add1 check-available-at-phase-level_512)"
"(module-max-phase-level m_514))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_511)(add1 check-available-at-phase-level_512) #f))"
" #f)"
" #f)"
"(let-values()(unavailable-callback_513))"
"(void)))))"
"(define-values"
"(namespace->module-namespace80.1)"
"(lambda(check-available-at-phase-level72_515"
" check-available-at-phase-level75_516"
" complain-on-failure?71_517"
" complain-on-failure?74_518"
" unavailable-callback73_519"
" unavailable-callback76_520"
" ns77_521"
" name78_522"
" 0-phase79_523)"
"(let-values(((ns_524) ns77_521))"
"(let-values(((name_525) name78_522))"
"(let-values(((0-phase_526) 0-phase79_523))"
"(let-values(((complain-on-failure?_527)(if complain-on-failure?74_518 complain-on-failure?71_517 #f)))"
"(let-values(((check-available-at-phase-level_528)"
"(if check-available-at-phase-level75_516 check-available-at-phase-level72_515 #f)))"
"(let-values(((unavailable-callback_529)(if unavailable-callback76_520 unavailable-callback73_519 void)))"
"(let-values()"
"(let-values(((mi_530)"
"(let-values(((...namespace/module.rkt:325:13_531) namespace->module-instance70.1)"
"((ns188_532) ns_524)"
"((name189_533) name_525)"
"((0-phase190_534) 0-phase_526)"
"((complain-on-failure?191_535) complain-on-failure?_527)"
"((check-available-at-phase-level192_536)"
" check-available-at-phase-level_528)"
"((unavailable-callback193_537) unavailable-callback_529))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1"
" check-available-at-phase-level192_536"
" #t"
" complain-on-failure?191_535"
" #t"
" unavailable-callback193_537"
" #t"
" ns188_532"
" name189_533"
" 0-phase190_534)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:325:13_531"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(list"
" check-available-at-phase-level192_536"
" complain-on-failure?191_535"
" unavailable-callback193_537)"
" ns188_532"
" name189_533"
" 0-phase190_534)))))"
"(if mi_530(module-instance-namespace mi_530) #f)))))))))))"
"(define-values"
"(unpack81.1)"
"(lambda(given-kws_538 given-args_539 ns77_540 name78_541 0-phase79_542)"
"(let-values(((check-available-at-phase-level75_543)"
"(if(pair? given-kws_538)(eq? '#:check-available-at-phase-level(car given-kws_538)) #f)))"
"(let-values(((check-available-at-phase-level72_544)"
"(if check-available-at-phase-level75_543(car given-args_539)(void)))"
"((given-kws_545)(if check-available-at-phase-level75_543(cdr given-kws_538) given-kws_538))"
"((given-args_546)(if check-available-at-phase-level75_543(cdr given-args_539) given-args_539)))"
"(let-values(((complain-on-failure?74_547)"
"(if(pair? given-kws_545)(eq? '#:complain-on-failure?(car given-kws_545)) #f)))"
"(let-values(((complain-on-failure?71_548)(if complain-on-failure?74_547(car given-args_546)(void)))"
"((given-kws_549)(if complain-on-failure?74_547(cdr given-kws_545) given-kws_545))"
"((given-args_550)(if complain-on-failure?74_547(cdr given-args_546) given-args_546)))"
"(let-values(((unavailable-callback76_551)(pair? given-kws_549)))"
"(let-values(((unavailable-callback73_552)(if unavailable-callback76_551(car given-args_550)(void))))"
"(namespace->module-namespace80.1"
" check-available-at-phase-level72_544"
" check-available-at-phase-level75_543"
" complain-on-failure?71_548"
" complain-on-failure?74_547"
" unavailable-callback73_552"
" unavailable-callback76_551"
" ns77_540"
" name78_541"
" 0-phase79_542)))))))))"
"(define-values"
"(namespace->module-namespace82.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_553 given-argc_554)"
"(if(= given-argc_554 5)"
"(let-values(((l1_555) given-kws_553))"
"(let-values(((l1_556)"
"(if(null? l1_555)"
" l1_555"
"(if(eq?(car l1_555) '#:check-available-at-phase-level)(cdr l1_555) l1_555))))"
"(let-values(((l1_557) l1_556))"
"(let-values(((l1_558)"
"(if(null? l1_557)"
" l1_557"
"(if(eq?(car l1_557) '#:complain-on-failure?)(cdr l1_557) l1_557))))"
"(let-values(((l1_559) l1_558))"
"(let-values(((l1_560)"
"(if(null? l1_559)"
" l1_559"
"(if(eq?(car l1_559) '#:unavailable-callback)(cdr l1_559) l1_559))))"
"(null? l1_560)))))))"
" #f))"
"(case-lambda"
"((given-kws_561 given-args_562 ns_563 name_564 0-phase_565)"
"(unpack81.1 given-kws_561 given-args_562 ns_563 name_564 0-phase_565)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(let-values(((namespace->module-namespace_566)"
"(case-lambda((ns_567 name_568 0-phase_569)(unpack81.1 null null ns_567 name_568 0-phase_569)))))"
" namespace->module-namespace_566)))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_570 mod-name_571 phase_572)"
"(let-values(((mi_573)"
"(let-values(((ns194_574) ns_570)((mod-name195_575) mod-name_571)((phase196_576) phase_572))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1 #f #f #f #f #f #f ns194_574 mod-name195_575 phase196_576)"
"(namespace->module-instance70.1 ns194_574 mod-name195_575 phase196_576)))))"
"(set-module-instance-attached?! mi_573 #t))))"
"(define-values"
"(namespace-module-instantiate!94.1)"
"(lambda(otherwise-available?85_577"
" otherwise-available?89_578"
" run-phase83_579"
" run-phase87_580"
" seen86_581"
" seen90_582"
" skip-run?84_583"
" skip-run?88_584"
" ns91_585"
" mpi92_586"
" instance-phase93_587)"
"(let-values(((ns_588) ns91_585))"
"(let-values(((mpi_589) mpi92_586))"
"(let-values(((instance-phase_590) instance-phase93_587))"
"(let-values(((run-phase_591)(if run-phase87_580 run-phase83_579(namespace-phase ns_588))))"
"(let-values(((skip-run?_592)(if skip-run?88_584 skip-run?84_583 #f)))"
"(let-values(((otherwise-available?_593)(if otherwise-available?89_578 otherwise-available?85_577 #t)))"
"(let-values(((seen_594)(if seen90_582 seen86_581 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_589)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_589)))"
"(values))))"
"(let-values(((name_595)(1/module-path-index-resolve mpi_589 #t)))"
"(let-values(((m_596)(namespace->module ns_588 name_595)))"
"(let-values((()"
"(begin"
"(if m_596"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_595)))"
"(values))))"
"(let-values(((instantiate!_597)"
"(lambda(instance-phase_598 run-phase_599 ns_600)"
"(let-values(((mi_601)"
"(let-values(((or-part_602)"
"(let-values(((ns203_603) ns_600)"
"((name204_604) name_595)"
"((instance-phase205_605)"
" instance-phase_598))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-instance70.1))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns203_603"
" name204_604"
" instance-phase205_605)"
"(namespace->module-instance70.1"
" ns203_603"
" name204_604"
" instance-phase205_605)))))"
"(if or-part_602"
" or-part_602"
"(namespace-create-module-instance!"
" ns_600"
" name_595"
" instance-phase_598"
" m_596"
" mpi_589)))))"
"(let-values(((...namespace/module.rkt:352:4_606)"
" run-module-instance!125.1)"
"((mi197_607) mi_601)"
"((ns198_608) ns_600)"
"((run-phase199_609) run-phase_599)"
"((skip-run?200_610) skip-run?_592)"
"((otherwise-available?201_611) otherwise-available?_593)"
"((seen202_612) seen_594))"
"(if(variable-reference-constant?"
"(#%variable-reference run-module-instance!125.1))"
"(run-module-instance!123.1"
" otherwise-available?201_611"
" run-phase199_609"
" seen202_612"
" #t"
" skip-run?200_610"
" mi197_607"
" ns198_608)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:352:4_606"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(list"
" otherwise-available?201_611"
" run-phase199_609"
" seen202_612"
" skip-run?200_610)"
" mi197_607"
" ns198_608)))))))"
"(if(module-cross-phase-persistent? m_596)"
"(let-values()"
"(instantiate!_597"
" 0"
" 0"
"(let-values(((or-part_613)(namespace-root-namespace ns_588)))"
"(if or-part_613 or-part_613 ns_588))))"
"(let-values()"
"(instantiate!_597 instance-phase_590 run-phase_591 ns_588))))))))))))))))))"
"(define-values"
"(unpack95.1)"
"(lambda(given-kws_614 given-args_615 ns91_616 mpi92_617 instance-phase93_618)"
"(let-values(((otherwise-available?89_619)"
"(if(pair? given-kws_614)(eq? '#:otherwise-available?(car given-kws_614)) #f)))"
"(let-values(((otherwise-available?85_620)(if otherwise-available?89_619(car given-args_615)(void)))"
"((given-kws_621)(if otherwise-available?89_619(cdr given-kws_614) given-kws_614))"
"((given-args_622)(if otherwise-available?89_619(cdr given-args_615) given-args_615)))"
"(let-values(((run-phase87_623)(if(pair? given-kws_621)(eq? '#:run-phase(car given-kws_621)) #f)))"
"(let-values(((run-phase83_624)(if run-phase87_623(car given-args_622)(void)))"
"((given-kws_625)(if run-phase87_623(cdr given-kws_621) given-kws_621))"
"((given-args_626)(if run-phase87_623(cdr given-args_622) given-args_622)))"
"(let-values(((seen90_627)(if(pair? given-kws_625)(eq? '#:seen(car given-kws_625)) #f)))"
"(let-values(((seen86_628)(if seen90_627(car given-args_626)(void)))"
"((given-kws_629)(if seen90_627(cdr given-kws_625) given-kws_625))"
"((given-args_630)(if seen90_627(cdr given-args_626) given-args_626)))"
"(let-values(((skip-run?88_631)(pair? given-kws_629)))"
"(let-values(((skip-run?84_632)(if skip-run?88_631(car given-args_630)(void))))"
"(namespace-module-instantiate!94.1"
" otherwise-available?85_620"
" otherwise-available?89_619"
" run-phase83_624"
" run-phase87_623"
" seen86_628"
" seen90_627"
" skip-run?84_632"
" skip-run?88_631"
" ns91_616"
" mpi92_617"
" instance-phase93_618)))))))))))"
"(define-values"
"(namespace-module-instantiate!96.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_633 given-argc_634)"
"(if(= given-argc_634 5)"
"(let-values(((l1_635) given-kws_633))"
"(let-values(((l1_636)"
"(if(null? l1_635) l1_635(if(eq?(car l1_635) '#:otherwise-available?)(cdr l1_635) l1_635))))"
"(let-values(((l1_637) l1_636))"
"(let-values(((l1_638)"
"(if(null? l1_637) l1_637(if(eq?(car l1_637) '#:run-phase)(cdr l1_637) l1_637))))"
"(let-values(((l1_639) l1_638))"
"(let-values(((l1_640)(if(null? l1_639) l1_639(if(eq?(car l1_639) '#:seen)(cdr l1_639) l1_639))))"
"(let-values(((l1_641) l1_640))"
"(let-values(((l1_642)"
"(if(null? l1_641) l1_641(if(eq?(car l1_641) '#:skip-run?)(cdr l1_641) l1_641))))"
"(null? l1_642)))))))))"
" #f))"
"(case-lambda"
"((given-kws_643 given-args_644 ns_645 mpi_646 instance-phase_647)"
"(unpack95.1 given-kws_643 given-args_644 ns_645 mpi_646 instance-phase_647)))"
" null"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(let-values(((namespace-module-instantiate!_648)"
"(case-lambda"
"((ns_649 mpi_650 instance-phase_651)(unpack95.1 null null ns_649 mpi_650 instance-phase_651)))))"
" namespace-module-instantiate!_648)))"
"(define-values"
"(namespace-module-visit!102.1)"
"(lambda(visit-phase97_652 visit-phase98_653 ns99_654 mpi100_655 instance-phase101_656)"
"(let-values(((ns_657) ns99_654))"
"(let-values(((mpi_658) mpi100_655))"
"(let-values(((instance-phase_659) instance-phase101_656))"
"(let-values(((visit-phase_660)(if visit-phase98_653 visit-phase97_652(namespace-phase ns_657))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:365:2_661) namespace-module-instantiate!96.1)"
"((ns206_662) ns_657)"
"((mpi207_663) mpi_658)"
"((instance-phase208_664) instance-phase_659)"
"((temp209_665)(add1 visit-phase_660)))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp209_665"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns206_662"
" mpi207_663"
" instance-phase208_664)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:365:2_661"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list temp209_665)"
" ns206_662"
" mpi207_663"
" instance-phase208_664))))))))))"
"(define-values"
"(unpack103.1)"
"(lambda(given-kws_666 given-args_667 ns99_668 mpi100_669 instance-phase101_670)"
"(let-values(((visit-phase98_671)(pair? given-kws_666)))"
"(let-values(((visit-phase97_672)(if visit-phase98_671(car given-args_667)(void))))"
"(namespace-module-visit!102.1 visit-phase97_672 visit-phase98_671 ns99_668 mpi100_669 instance-phase101_670)))))"
"(define-values"
"(namespace-module-visit!104.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_673 given-argc_674)"
"(if(= given-argc_674 5)"
"(let-values(((l1_675) given-kws_673))"
"(let-values(((l1_676)(if(null? l1_675) l1_675(if(eq?(car l1_675) '#:visit-phase)(cdr l1_675) l1_675))))"
"(null? l1_676)))"
" #f))"
"(case-lambda"
"((given-kws_677 given-args_678 ns_679 mpi_680 instance-phase_681)"
"(unpack103.1 given-kws_677 given-args_678 ns_679 mpi_680 instance-phase_681)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-visit!_682)"
"(case-lambda"
"((ns_683 mpi_684 instance-phase_685)(unpack103.1 null null ns_683 mpi_684 instance-phase_685)))))"
" namespace-module-visit!_682)))"
"(define-values"
"(namespace-module-make-available!110.1)"
"(lambda(visit-phase105_686 visit-phase106_687 ns107_688 mpi108_689 instance-phase109_690)"
"(let-values(((ns_691) ns107_688))"
"(let-values(((mpi_692) mpi108_689))"
"(let-values(((instance-phase_693) instance-phase109_690))"
"(let-values(((visit-phase_694)(if visit-phase106_687 visit-phase105_686(namespace-phase ns_691))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:368:2_695) namespace-module-instantiate!96.1)"
"((ns210_696) ns_691)"
"((mpi211_697) mpi_692)"
"((instance-phase212_698) instance-phase_693)"
"((temp213_699)(add1 visit-phase_694))"
"((temp214_700) #t))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp213_699"
" #t"
" #f"
" #f"
" temp214_700"
" #t"
" ns210_696"
" mpi211_697"
" instance-phase212_698)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:368:2_695"
" keyword-procedure-extract"
" '(#:run-phase #:skip-run?)"
" 5)"
" '(#:run-phase #:skip-run?)"
"(list temp213_699 temp214_700)"
" ns210_696"
" mpi211_697"
" instance-phase212_698))))))))))"
"(define-values"
"(unpack111.1)"
"(lambda(given-kws_701 given-args_702 ns107_703 mpi108_704 instance-phase109_705)"
"(let-values(((visit-phase106_706)(pair? given-kws_701)))"
"(let-values(((visit-phase105_707)(if visit-phase106_706(car given-args_702)(void))))"
"(namespace-module-make-available!110.1"
" visit-phase105_707"
" visit-phase106_706"
" ns107_703"
" mpi108_704"
" instance-phase109_705)))))"
"(define-values"
"(namespace-module-make-available!112.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_708 given-argc_709)"
"(if(= given-argc_709 5)"
"(let-values(((l1_710) given-kws_708))"
"(let-values(((l1_711)(if(null? l1_710) l1_710(if(eq?(car l1_710) '#:visit-phase)(cdr l1_710) l1_710))))"
"(null? l1_711)))"
" #f))"
"(case-lambda"
"((given-kws_712 given-args_713 ns_714 mpi_715 instance-phase_716)"
"(unpack111.1 given-kws_712 given-args_713 ns_714 mpi_715 instance-phase_716)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-make-available!_717)"
"(case-lambda"
"((ns_718 mpi_719 instance-phase_720)(unpack111.1 null null ns_718 mpi_719 instance-phase_720)))))"
" namespace-module-make-available!_717)))"
"(define-values"
"(lifted/3.1$5)"
"(make-required"
" 'run-module-instance!"
"(case-lambda((self_721 mi_722 ns_723)(apply missing-kw self_721 mi_722 ns_723 null)))"
" #f"
" #f))"
"(define-values"
"(run-module-instance!123.1)"
"(lambda(otherwise-available?115_724 run-phase113_725 seen116_726 seen120_727 skip-run?114_728 mi121_729 ns122_730)"
"(let-values(((mi_731) mi121_729))"
"(let-values(((ns_732) ns122_730))"
"(let-values(((run-phase_733) run-phase113_725))"
"(let-values(((skip-run?_734) skip-run?114_728))"
"(let-values(((otherwise-available?_735) otherwise-available?115_724))"
"(let-values(((seen_736)(if seen120_727 seen116_726 '#hasheq())))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_737)(module-instance-namespace mi_731)))"
"(let-values(((instance-phase_738)(namespace-0-phase m-ns_737)))"
"(let-values(((run-phase-level_739)(phase- run-phase_733 instance-phase_738)))"
"(if(if(let-values(((or-part_740) skip-run?_734))"
"(if or-part_740"
" or-part_740"
"(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state mi_731)"
" run-phase-level_739"
" #f))))"
"(let-values(((or-part_741)(not otherwise-available?_735)))"
"(if or-part_741 or-part_741(module-instance-made-available? mi_731)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_742)(module-instance-module mi_731)))"
"(let-values(((mpi_743)(namespace-mpi m-ns_737)))"
"(let-values(((phase-shift_744) instance-phase_738))"
"(let-values(((bulk-binding-registry_745)"
"(namespace-bulk-binding-registry m-ns_737)))"
"(begin"
"(if(hash-ref seen_736 mi_731 #f)"
"(let-values()"
"                                            (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_731)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_731"
"(alt-reverse"
"(let-values(((lst_746)(module-requires m_742)))"
"(begin"
"(if(list? lst_746)(void)(let-values()(in-list lst_746)))"
"((letrec-values(((for-loop_747)"
"(lambda(fold-var_748 lst_749)"
"(if(pair? lst_749)"
"(let-values(((phase+mpis_750)"
"(unsafe-car lst_749)))"
"(let-values(((fold-var_751)"
"(let-values(((fold-var_752)"
" fold-var_748))"
"(let-values(((fold-var_753)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_750)"
"(alt-reverse"
"(let-values(((lst_754)"
"(cdr"
" phase+mpis_750)))"
"(begin"
"(if(list?"
" lst_754)"
"(void)"
"(let-values()"
"(in-list"
" lst_754)))"
"((letrec-values(((for-loop_755)"
"(lambda(fold-var_756"
" lst_757)"
"(if(pair?"
" lst_757)"
"(let-values(((req-mpi_758)"
"(unsafe-car"
" lst_757)))"
"(let-values(((fold-var_759)"
"(let-values(((fold-var_760)"
" fold-var_756))"
"(let-values(((fold-var_761)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
"(module-path-index-shift"
" req-mpi_758"
"(module-self"
" m_742)"
" mpi_743)))"
" fold-var_760))))"
"(values"
" fold-var_761)))))"
"(for-loop_755"
" fold-var_759"
"(unsafe-cdr"
" lst_757))))"
" fold-var_756))))"
" for-loop_755)"
" null"
" lst_754))))))"
" fold-var_752))))"
"(values fold-var_753)))))"
"(for-loop_747"
" fold-var_751"
"(unsafe-cdr lst_749))))"
" fold-var_748))))"
" for-loop_747)"
" null"
" lst_746)))))))"
"(let-values(((lst_762)(module-instance-shifted-requires mi_731)))"
"(begin"
"(if(list? lst_762)(void)(let-values()(in-list lst_762)))"
"((letrec-values(((for-loop_763)"
"(lambda(fold-var_764 lst_765)"
"(if(pair? lst_765)"
"(let-values(((phase+mpis_766)(unsafe-car lst_765)))"
"(let-values(((fold-var_767)"
"(let-values(((fold-var_768)"
" fold-var_764))"
"(let-values(((fold-var_769)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_770)"
"(car"
" phase+mpis_766)))"
"(let-values(((lst_771)"
"(cdr"
" phase+mpis_766)))"
"(begin"
"(if(list?"
" lst_771)"
"(void)"
"(let-values()"
"(in-list"
" lst_771)))"
"((letrec-values(((for-loop_772)"
"(lambda(fold-var_773"
" lst_774)"
"(if(pair?"
" lst_774)"
"(let-values(((req-mpi_775)"
"(unsafe-car"
" lst_774)))"
"(let-values(((fold-var_776)"
"(let-values(((fold-var_777)"
" fold-var_773))"
"(let-values(((fold-var_778)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:420:9_779)"
" namespace-module-instantiate!96.1)"
"((ns215_780)"
" ns_732)"
"((req-mpi216_781)"
" req-mpi_775)"
"((temp217_782)"
"(phase+"
" instance-phase_738"
" req-phase_770))"
"((run-phase218_783)"
" run-phase_733)"
"((skip-run?219_784)"
" skip-run?_734)"
"((otherwise-available?220_785)"
" otherwise-available?_735)"
"((temp221_786)"
"(hash-set"
" seen_736"
" mi_731"
" #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" otherwise-available?220_785"
" #t"
" run-phase218_783"
" #t"
" temp221_786"
" #t"
" skip-run?219_784"
" #t"
" ns215_780"
" req-mpi216_781"
" temp217_782)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:420:9_779"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
" 5)"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
"(list"
" otherwise-available?220_785"
" run-phase218_783"
" temp221_786"
" skip-run?219_784)"
" ns215_780"
" req-mpi216_781"
" temp217_782))))"
"(void)))))"
"(values"
" fold-var_778)))))"
"(for-loop_772"
" fold-var_776"
"(unsafe-cdr"
" lst_774))))"
" fold-var_773))))"
" for-loop_772)"
"(void)"
" lst_771)))))"
"(void)))))"
"(values fold-var_769)))))"
"(for-loop_763 fold-var_767(unsafe-cdr lst_765))))"
" fold-var_764))))"
" for-loop_763)"
"(void)"
" lst_762)))"
"(if(label-phase? instance-phase_738)"
"(void)"
"(let-values()"
"(let-values(((start_787)(module-max-phase-level m_742))"
"((end_788)(sub1(module-min-phase-level m_742)))"
"((inc_789) -1))"
"(begin"
"(if(if(real? start_787)(if(real? end_788)(real? inc_789) #f) #f)"
"(void)"
"(let-values()(in-range start_787 end_788 inc_789)))"
"((letrec-values(((for-loop_790)"
"(lambda(fold-var_791 pos_792)"
"(if(> pos_792 end_788)"
"(let-values(((phase-level_793) pos_792))"
"(let-values(((fold-var_794)"
"(let-values(((fold-var_795)"
" fold-var_791))"
"(let-values(((fold-var_796)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_797)"
"(phase+"
" phase-level_793"
" phase-shift_744)))"
"(if(if(not"
" skip-run?_734)"
"(eqv?"
" phase_797"
" run-phase_733)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_731)"
" phase-level_793"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_731)"
" phase-level_793"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_737"
" phase-level_793))"
"(values))))"
"(let-values(((p-ns_798)"
"(namespace->namespace-at-phase"
" m-ns_737"
" phase_797)))"
"(let-values(((insp_799)"
"(module-inspector"
" m_742)))"
"(let-values(((data-box_800)"
"(module-instance-data-box"
" mi_731)))"
"(let-values(((prep_801)"
"(module-prepare-instance"
" m_742)))"
"(let-values(((go_802)"
"(module-instantiate-phase"
" m_742)))"
"(begin"
"(prep_801"
" data-box_800"
" p-ns_798"
" phase-shift_744"
" mpi_743"
" bulk-binding-registry_745"
" insp_799)"
"(go_802"
" data-box_800"
" p-ns_798"
" phase-shift_744"
" phase-level_793"
" mpi_743"
" bulk-binding-registry_745"
" insp_799))))))))))))"
"(if(if otherwise-available?_735"
"(if(not"
"(negative?"
" run-phase_733))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_731)"
" phase-level_793"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_732)"
" phase_797"
"(lambda(l_803)"
"(cons"
" mi_731"
" l_803))"
" null)"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_731)"
" phase-level_793"
" 'available)))"
"(void)))))"
"(void)))))"
"(values fold-var_796)))))"
"(for-loop_790"
" fold-var_794"
"(+ pos_792 inc_789))))"
" fold-var_791))))"
" for-loop_790)"
"(void)"
" start_787)))))"
"(if otherwise-available?_735"
"(let-values()(set-module-instance-made-available?! mi_731 #t))"
"(void))"
"(if skip-run?_734"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_731)"
" run-phase-level_739"
" 'started)))))))))))))))))))))))"
"(define-values"
"(unpack124.1)"
"(lambda(given-kws_804 given-args_805 mi121_806 ns122_807)"
"(let-values(((otherwise-available?115_808)(car given-args_805))"
"((given-kws_809)(cdr given-kws_804))"
"((given-args_810)(cdr given-args_805)))"
"(let-values(((run-phase113_811)(car given-args_810))"
"((given-kws_812)(cdr given-kws_809))"
"((given-args_813)(cdr given-args_810)))"
"(let-values(((seen120_814)(if(pair? given-kws_812)(eq? '#:seen(car given-kws_812)) #f)))"
"(let-values(((seen116_815)(if seen120_814(car given-args_813)(void)))"
"((given-kws_816)(if seen120_814(cdr given-kws_812) given-kws_812))"
"((given-args_817)(if seen120_814(cdr given-args_813) given-args_813)))"
"(let-values(((skip-run?114_818)(car given-args_817)))"
"(run-module-instance!123.1"
" otherwise-available?115_808"
" run-phase113_811"
" seen116_815"
" seen120_814"
" skip-run?114_818"
" mi121_806"
" ns122_807))))))))"
"(define-values"
"(run-module-instance!125.1)"
"(lifted/3.1$5"
"(lambda(given-kws_819 given-argc_820)"
"(if(= given-argc_820 4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_819"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" #f))"
"(case-lambda((given-kws_821 given-args_822 mi_823 ns_824)(unpack124.1 given-kws_821 given-args_822 mi_823 ns_824)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!129_825)"
"(lambda(ns128_826 run-phase126_827 run-phase127_828)"
"(let-values(((ns_829) ns128_826))"
"(let-values(((run-phase_830)(if run-phase127_828 run-phase126_827(namespace-phase ns_829))))"
"(let-values()(namespace-run-available-modules! ns_829(add1 run-phase_830))))))))"
"(case-lambda"
"((ns_831)(namespace-visit-available-modules!129_825 ns_831 #f #f))"
"((ns_832 run-phase126_833)(namespace-visit-available-modules!129_825 ns_832 run-phase126_833 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!134_834)"
"(lambda(ns133_835 run-phase131_836 run-phase132_837)"
"(let-values(((ns_838) ns133_835))"
"(let-values(((run-phase_839)(if run-phase132_837 run-phase131_836(namespace-phase ns_838))))"
"(let-values()"
"(if(null?(hash-ref(namespace-available-module-instances ns_838) run-phase_839 null))"
"(void)"
"(let-values()"
"(registry-call-with-lock"
"(1/namespace-module-registry ns_838)"
"(lambda()"
"((letrec-values(((loop_840)"
"(lambda()"
"(let-values(((mis_841)"
"(hash-ref"
"(namespace-available-module-instances ns_838)"
" run-phase_839"
" null)))"
"(if(null? mis_841)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_838)"
" run-phase_839"
" null)"
"(let-values(((lst_842)(alt-reverse mis_841)))"
"(begin"
"(if(list? lst_842)"
"(void)"
"(let-values()(in-list lst_842)))"
"((letrec-values(((for-loop_843)"
"(lambda(fold-var_844 lst_845)"
"(if(pair? lst_845)"
"(let-values(((mi_846)"
"(unsafe-car"
" lst_845)))"
"(let-values(((fold-var_847)"
"(let-values(((fold-var_848)"
" fold-var_844))"
"(let-values(((fold-var_849)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:476:13_850)"
" run-module-instance!125.1)"
"((mi222_851)"
" mi_846)"
"((ns223_852)"
" ns_838)"
"((run-phase224_853)"
" run-phase_839)"
"((temp225_854)"
" #f)"
"((temp226_855)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" run-module-instance!125.1))"
"(run-module-instance!123.1"
" temp226_855"
" run-phase224_853"
" #f"
" #f"
" temp225_854"
" mi222_851"
" ns223_852)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:476:13_850"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
" 4)"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
"(list"
" temp226_855"
" run-phase224_853"
" temp225_854)"
" mi222_851"
" ns223_852))))"
"(void)))))"
"(values"
" fold-var_849)))))"
"(for-loop_843"
" fold-var_847"
"(unsafe-cdr lst_845))))"
" fold-var_844))))"
" for-loop_843)"
"(void)"
" lst_842)))"
"(loop_840))))))))"
" loop_840))))))))))))"
"(case-lambda"
"((ns_856)(namespace-run-available-modules!134_834 ns_856 #f #f))"
"((ns_857 run-phase131_858)(namespace-run-available-modules!134_834 ns_857 run-phase131_858 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_859 name_860)"
"(let-values(((mi_861)(hash-ref(namespace-module-instances ns_859)(1/make-resolved-module-path name_860))))"
"(let-values(((...namespace/module.rkt:482:2_862) run-module-instance!125.1)"
"((mi227_863) mi_861)"
"((ns228_864) ns_859)"
"((temp229_865) 1)"
"((temp230_866) #f)"
"((temp231_867) #t))"
"(if(variable-reference-constant?(#%variable-reference run-module-instance!125.1))"
"(run-module-instance!123.1 temp231_867 temp229_865 #f #f temp230_866 mi227_863 ns228_864)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:482:2_862"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
"(list temp231_867 temp229_865 temp230_866)"
" mi227_863"
" ns228_864))))))"
"(define-values"
"(lifted/4.1$4)"
"(make-required"
" 'namespace-module-use->module+linklet-instances"
"(case-lambda((self_868 ns_869 mu_870)(apply missing-kw self_868 ns_869 mu_870 null)))"
" #f"
" #f))"
"(define-values"
"(namespace-module-use->module+linklet-instances144.1)"
"(lambda(phase-shift138_871 shift-from136_872 shift-from139_873 shift-to137_874 shift-to140_875 ns142_876 mu143_877)"
"(let-values(((ns_878) ns142_876))"
"(let-values(((mu_879) mu143_877))"
"(let-values(((shift-from_880)(if shift-from139_873 shift-from136_872 #f)))"
"(let-values(((shift-to_881)(if shift-to140_875 shift-to137_874 #f)))"
"(let-values(((phase-shift_882) phase-shift138_871))"
"(let-values()"
"(let-values(((mod_883)(module-use-module mu_879)))"
"(let-values(((mi_884)"
"(let-values(((...namespace/module.rkt:492:4_887) namespace->module-instance70.1)"
"((ns232_888) ns_878)"
"((temp233_889)"
"(1/module-path-index-resolve"
"(if shift-from_880"
"(module-path-index-shift mod_883 shift-from_880 shift-to_881)"
" mod_883)))"
"((phase-shift234_890) phase-shift_882)"
"((temp235_891) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1"
" #f"
" #f"
" temp235_891"
" #t"
" #f"
" #f"
" ns232_888"
" temp233_889"
" phase-shift234_890)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:492:4_887"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp235_891)"
" ns232_888"
" temp233_889"
" phase-shift234_890)))))"
"(let-values(((m-ns_885)(module-instance-namespace mi_884)))"
"(let-values(((d_886)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_885)"
"(module-use-phase mu_879)"
" #f)))"
"(if d_886"
"(values mi_884(definitions-variables d_886))"
"                          (error \"namespace mismatch: phase level not found\" mu_879))))))))))))))"
"(define-values"
"(unpack145.1)"
"(lambda(given-kws_892 given-args_893 ns142_894 mu143_895)"
"(let-values(((phase-shift138_896)(car given-args_893))"
"((given-kws_897)(cdr given-kws_892))"
"((given-args_898)(cdr given-args_893)))"
"(let-values(((shift-from139_899)(if(pair? given-kws_897)(eq? '#:shift-from(car given-kws_897)) #f)))"
"(let-values(((shift-from136_900)(if shift-from139_899(car given-args_898)(void)))"
"((given-kws_901)(if shift-from139_899(cdr given-kws_897) given-kws_897))"
"((given-args_902)(if shift-from139_899(cdr given-args_898) given-args_898)))"
"(let-values(((shift-to140_903)(pair? given-kws_901)))"
"(let-values(((shift-to137_904)(if shift-to140_903(car given-args_902)(void))))"
"(namespace-module-use->module+linklet-instances144.1"
" phase-shift138_896"
" shift-from136_900"
" shift-from139_899"
" shift-to137_904"
" shift-to140_903"
" ns142_894"
" mu143_895))))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances146.1)"
"(lifted/4.1$4"
"(lambda(given-kws_905 given-argc_906)"
"(if(= given-argc_906 4)(subsets? '(#:phase-shift) given-kws_905 '(#:phase-shift #:shift-from #:shift-to)) #f))"
"(case-lambda((given-kws_907 given-args_908 ns_909 mu_910)(unpack145.1 given-kws_907 given-args_908 ns_909 mu_910)))"
" '(#:phase-shift)"
" '(#:phase-shift #:shift-from #:shift-to)))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_911)"
"(let-values(((access_912)"
"(let-values(((ht_913)(module-provides m_911)))"
"(begin"
"(if((lambda(ht_914)(hash? ht_914)) ht_913)(void)(let-values()(default-in-hash ht_913)))"
"((letrec-values(((for-loop_915)"
"(lambda(table_916 i_917)"
"(if i_917"
"(let-values(((phase_918 at-phase_919)"
"(hash-iterate-key+value ht_913 i_917)))"
"(let-values(((table_920)"
"(let-values(((table_921) table_916))"
"(let-values(((table_922)"
"(let-values()"
"(let-values(((key_923 val_924)"
"(let-values()"
"(values"
" phase_918"
"(let-values(((ht_925)"
" at-phase_919))"
"(begin"
"(if((lambda(ht_926)"
"(hash?"
" ht_926))"
" ht_925)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_925)))"
"((letrec-values(((for-loop_927)"
"(lambda(table_928"
" i_929)"
"(if i_929"
"(let-values(((sym_930"
" binding/p_931)"
"(hash-iterate-key+value"
" ht_925"
" i_929)))"
"(let-values(((table_932)"
"(let-values(((table_933)"
" table_928))"
"(let-values(((table_934)"
"(let-values()"
"(let-values(((key_935"
" val_936)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_931))"
"(if(provided-as-protected?"
" binding/p_931)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_933"
" key_935"
" val_936)))))"
"(values"
" table_934)))))"
"(for-loop_927"
" table_932"
"(hash-iterate-next"
" ht_925"
" i_929))))"
" table_928))))"
" for-loop_927)"
" '#hash()"
"(hash-iterate-first"
" ht_925))))))))"
"(hash-set table_921 key_923 val_924)))))"
"(values table_922)))))"
"(for-loop_915 table_920(hash-iterate-next ht_913 i_917))))"
" table_916))))"
" for-loop_915)"
" '#hasheqv()"
"(hash-iterate-first ht_913))))))"
"(begin(set-module-access! m_911 access_912) access_912))))"
"(void)"
"(void)"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((...inding-to-module.rkt:14:4_7) namespace->module-instance70.1)"
"((ns1_8) ns_2)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                                       \"module mismatch;\\n\""
"                                       \" attempted to use a module that is not available\\n\""
"                                       \"  possible cause:\\n\""
"                                       \"   using (dynamic-require .... #f)\\n\""
"                                       \"   but need (dynamic-require .... 0)\\n\""
"                                       \"  module: ~s\\n\""
"                                       \"  phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1 temp4_11 #t #f #f temp5_12 #t ns1_8 temp2_9 at-phase3_10)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...inding-to-module.rkt:14:4_7"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:unavailable-callback)"
"(list temp4_11 temp5_12)"
" ns1_8"
" temp2_9"
" at-phase3_10)))))"
"(begin"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(void)"
"(void)"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_4))"
"(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((...r/expand/protect.rkt:53:14_23) resolve+shift22.1)"
"((id1_24) id_20)"
"((phase2_25) phase_17)"
"((temp3_26) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f temp3_26 #t #f #f id1_24 phase2_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:53:14_23"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_26)"
" id1_24"
" phase2_25)))))"
"(let-values(((c51372_27)(binding-free=id b_22)))"
"(if c51372_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
"                                                       (check-access b_22 mi_30 id_20 in-s_21 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_28"
"(let-values(((or-part_31) in-s_21))"
"(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((...r/expand/protect.rkt:66:13_32) module-binding-update50.1)"
"((next-b4_33) next-b_29)"
"((temp5_34)(syntax-inspector id_20)))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" temp5_34"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b4_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:66:13_32"
" keyword-procedure-extract"
" '(#:extra-inspector)"
" 3)"
" '(#:extra-inspector)"
"(list temp5_34)"
" next-b4_33))))"
"(let-values() next-b_29)))))"
" c51372_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_8) (error \"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_35)"
"(begin"
"(if(if(procedure? proc_35)(procedure-arity-includes? proc_35 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_35)))"
"(set!-transformer1_11 proc_35))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_36)"
"(let-values(((v_37)((set!-transformer-value t_36) t_36)))"
"(if(procedure-arity-includes? v_37 1) v_37(lambda(s_38)(v_37 t_36 s_38))))))"
"(void)"
"(void)"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_2 key_3 val_4)(hash-set env_2 key_3 val_4)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_5)(let-values(((or-part_6)(eq? t_5 variable)))(if or-part_6 or-part_6(local-variable? t_5)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_7 make-_8 ?_9 -ref_10 -set!_11)"
"(let-values()"
"(let-values()"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable)))))"
"(values struct:_7 make-_8 ?_9(make-struct-field-accessor -ref_10 0 'id))))"
"(define-values"
"(lifted/1.1$21)"
"(make-required"
" 'substitute-variable"
"(case-lambda((self_27 id_28 t_29)(apply missing-kw self_27 id_28 t_29 null)))"
" #f"
" #f))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_30 id4_31 t5_32)"
"(let-values(((id_33) id4_31))"
"(let-values(((t_34) t5_32))"
"(let-values(((no-stops?_35) no-stops?2_30))"
"(let-values()"
"(if(if no-stops?_35(local-variable? t_34) #f)"
"(let-values(((bind-id_36)(local-variable-id t_34)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_36)(syntax-e$1 bind-id_36) id_33 id_33)"
" id_33))"
" id_33)))))))"
"(define-values"
"(unpack7.1$5)"
"(lambda(given-kws_37 given-args_38 id4_39 t5_40)"
"(let-values(((no-stops?2_41)(car given-args_38)))(substitute-variable6.1 no-stops?2_41 id4_39 t5_40))))"
"(define-values"
"(substitute-variable8.1)"
"(lifted/1.1$21"
"(lambda(given-kws_42 given-argc_43)"
"(if(= given-argc_43 4)"
"(let-values(((l2_44) given-kws_42))"
"(if(pair? l2_44)(if(eq?(car l2_44) '#:no-stops?)(null?(cdr l2_44)) #f) #f))"
" #f))"
"(case-lambda((given-kws_45 given-args_46 id_47 t_48)(unpack7.1$5 given-kws_45 given-args_46 id_47 t_48)))"
" '(#:no-stops?)"
" '(#:no-stops?)))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_50)"
"(let-values(((or-part_51)(procedure? t_50)))"
"(if or-part_51"
" or-part_51"
"(let-values(((or-part_52)(1/set!-transformer? t_50)))"
"(if or-part_52 or-part_52(1/rename-transformer? t_50)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_53)"
"(if(1/set!-transformer? t_53)"
"(let-values()(1/set!-transformer-procedure t_53))"
"(if(1/rename-transformer? t_53)(let-values()(lambda(s_54) s_54))(let-values() t_53)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_55 make-_56 ?_57 -ref_58 -set!_59)"
"(let-values()"
"(let-values()(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form)))))"
"(values"
" struct:_55"
" make-_56"
" ?_57"
"(make-struct-field-accessor -ref_58 0 'expander)"
"(make-struct-field-accessor -ref_58 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_80 in12_81 just-for-nominal?11_82 just-for-nominal?13_83 id14_84 binding15_85 phase16_86)"
"(let-values(((id_87) id14_84))"
"(let-values(((binding_88) binding15_85))"
"(let-values(((phase_89) phase16_86))"
"(let-values(((in-s_90)(if in12_81 in10_80 #f)))"
"(let-values(((just-for-nominal?_91)(if just-for-nominal?13_83 just-for-nominal?11_82 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_87 in-s_90)"
"(let-values(((...ander/expand/env.rkt:85:2_92) add-binding-in-scopes!18.1)"
"((temp53_93)(syntax-scope-set id_87 phase_89))"
"((temp54_94)(syntax-e$1 id_87))"
"((binding55_95) binding_88)"
"((just-for-nominal?56_96) just-for-nominal?_91))"
"(if(variable-reference-constant?(#%variable-reference add-binding-in-scopes!18.1))"
"(add-binding-in-scopes!16.1 just-for-nominal?56_96 #t temp53_93 temp54_94 binding55_95)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/env.rkt:85:2_92"
" keyword-procedure-extract"
" '(#:just-for-nominal?)"
" 5)"
" '(#:just-for-nominal?)"
"(list just-for-nominal?56_96)"
" temp53_93"
" temp54_94"
" binding55_95))))))))))))"
"(define-values"
"(unpack18.1$2)"
"(lambda(given-kws_97 given-args_98 id14_99 binding15_100 phase16_101)"
"(let-values(((in12_102)(if(pair? given-kws_97)(eq? '#:in(car given-kws_97)) #f)))"
"(let-values(((in10_103)(if in12_102(car given-args_98)(void)))"
"((given-kws_104)(if in12_102(cdr given-kws_97) given-kws_97))"
"((given-args_105)(if in12_102(cdr given-args_98) given-args_98)))"
"(let-values(((just-for-nominal?13_106)(pair? given-kws_104)))"
"(let-values(((just-for-nominal?11_107)(if just-for-nominal?13_106(car given-args_105)(void))))"
"(add-binding!17.1"
" in10_103"
" in12_102"
" just-for-nominal?11_107"
" just-for-nominal?13_106"
" id14_99"
" binding15_100"
" phase16_101)))))))"
"(define-values"
"(add-binding!19.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_108 given-argc_109)"
"(if(= given-argc_109 5)"
"(let-values(((l1_110) given-kws_108))"
"(let-values(((l1_111)(if(null? l1_110) l1_110(if(eq?(car l1_110) '#:in)(cdr l1_110) l1_110))))"
"(let-values(((l1_112) l1_111))"
"(let-values(((l1_113)"
"(if(null? l1_112) l1_112(if(eq?(car l1_112) '#:just-for-nominal?)(cdr l1_112) l1_112))))"
"(null? l1_113)))))"
" #f))"
"(case-lambda"
"((given-kws_114 given-args_115 id_116 binding_117 phase_118)"
"(unpack18.1$2 given-kws_114 given-args_115 id_116 binding_117 phase_118)))"
" null"
" '(#:in #:just-for-nominal?)"
"(let-values(((add-binding!_119)"
"(case-lambda((id_120 binding_121 phase_122)(unpack18.1$2 null null id_120 binding_121 phase_122)))))"
" add-binding!_119)))"
"(define-values"
"(add-bulk-binding!25.1)"
"(lambda(in20_123 in21_124 s22_125 binding23_126 phase24_127)"
"(let-values(((s_128) s22_125))"
"(let-values(((binding_129) binding23_126))"
"(let-values(((phase_130) phase24_127))"
"(let-values(((in-s_131)(if in21_124 in20_123 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_128)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_131 s_128))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_128 phase_130) binding_129)))))))))"
"(define-values"
"(unpack26.1$1)"
"(lambda(given-kws_132 given-args_133 s22_134 binding23_135 phase24_136)"
"(let-values(((in21_137)(pair? given-kws_132)))"
"(let-values(((in20_138)(if in21_137(car given-args_133)(void))))"
"(add-bulk-binding!25.1 in20_138 in21_137 s22_134 binding23_135 phase24_136)))))"
"(define-values"
"(add-bulk-binding!27.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_139 given-argc_140)"
"(if(= given-argc_140 5)"
"(let-values(((l1_141) given-kws_139))"
"(let-values(((l1_142)(if(null? l1_141) l1_141(if(eq?(car l1_141) '#:in)(cdr l1_141) l1_141))))"
"(null? l1_142)))"
" #f))"
"(case-lambda"
"((given-kws_143 given-args_144 s_145 binding_146 phase_147)"
"(unpack26.1$1 given-kws_143 given-args_144 s_145 binding_146 phase_147)))"
" null"
" '(#:in)"
"(let-values(((add-bulk-binding!_148)"
"(case-lambda((s_149 binding_150 phase_151)(unpack26.1$1 null null s_149 binding_150 phase_151)))))"
" add-bulk-binding!_148)))"
"(define-values"
"(add-local-binding!35.1)"
"(lambda(frame-id28_152 frame-id30_153 in29_154 in31_155 id32_156 phase33_157 counter34_158)"
"(let-values(((id_159) id32_156))"
"(let-values(((phase_160) phase33_157))"
"(let-values(((counter_161) counter34_158))"
"(let-values(((frame-id_162)(if frame-id30_153 frame-id28_152 #f)))"
"(let-values(((in-s_163)(if in31_155 in29_154 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_159 in-s_163)(values))))"
"(let-values((()(begin(set-box! counter_161(add1(unbox counter_161)))(values))))"
"(let-values(((key_164)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_159) (unbox counter_161)))))"
"(begin"
"(let-values(((temp57_165)(syntax-scope-set id_159 phase_160))"
"((temp58_166)(syntax-e$1 id_159))"
"((temp59_167)"
"(let-values(((...ander/expand/env.rkt:98:68_168) make-local-binding9.1)"
"((key60_169) key_164)"
"((frame-id61_170) frame-id_162))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id61_170 #t #f #f key60_169)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/env.rkt:98:68_168"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list frame-id61_170)"
" key60_169)))))"
"(if(variable-reference-constant?(#%variable-reference add-binding-in-scopes!18.1))"
"(add-binding-in-scopes!16.1 #f #f temp57_165 temp58_166 temp59_167)"
"(add-binding-in-scopes!18.1 temp57_165 temp58_166 temp59_167)))"
" key_164))))))))))))"
"(define-values"
"(unpack36.1)"
"(lambda(given-kws_171 given-args_172 id32_173 phase33_174 counter34_175)"
"(let-values(((frame-id30_176)(if(pair? given-kws_171)(eq? '#:frame-id(car given-kws_171)) #f)))"
"(let-values(((frame-id28_177)(if frame-id30_176(car given-args_172)(void)))"
"((given-kws_178)(if frame-id30_176(cdr given-kws_171) given-kws_171))"
"((given-args_179)(if frame-id30_176(cdr given-args_172) given-args_172)))"
"(let-values(((in31_180)(pair? given-kws_178)))"
"(let-values(((in29_181)(if in31_180(car given-args_179)(void))))"
"(add-local-binding!35.1"
" frame-id28_177"
" frame-id30_176"
" in29_181"
" in31_180"
" id32_173"
" phase33_174"
" counter34_175)))))))"
"(define-values"
"(add-local-binding!37.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_182 given-argc_183)"
"(if(= given-argc_183 5)"
"(let-values(((l1_184) given-kws_182))"
"(let-values(((l1_185)(if(null? l1_184) l1_184(if(eq?(car l1_184) '#:frame-id)(cdr l1_184) l1_184))))"
"(let-values(((l1_186) l1_185))"
"(let-values(((l1_187)(if(null? l1_186) l1_186(if(eq?(car l1_186) '#:in)(cdr l1_186) l1_186))))"
"(null? l1_187)))))"
" #f))"
"(case-lambda"
"((given-kws_188 given-args_189 id_190 phase_191 counter_192)"
"(unpack36.1 given-kws_188 given-args_189 id_190 phase_191 counter_192)))"
" null"
" '(#:frame-id #:in)"
"(let-values(((add-local-binding!_193)"
"(case-lambda((id_194 phase_195 counter_196)(unpack36.1 null null id_194 phase_195 counter_196)))))"
" add-local-binding!_193)))"
"(define-values"
"(check-id-taint)"
"(lambda(id_197 in-s_198)"
"(if(syntax-tainted?$1 id_197)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_198 id_197))"
"(void))))"
"(define-values"
"(binding-lookup48.1)"
"(lambda(in38_199"
" in40_200"
" out-of-context-as-variable?39_201"
" out-of-context-as-variable?41_202"
" b42_203"
" env43_204"
" lift-envs44_205"
" ns45_206"
" phase46_207"
" id47_208)"
"(let-values(((b_209) b42_203))"
"(let-values(((env_210) env43_204))"
"(let-values(((lift-envs_211) lift-envs44_205))"
"(let-values(((ns_212) ns45_206))"
"(let-values(((phase_213) phase46_207))"
"(let-values(((id_214) id47_208))"
"(let-values(((in-s_215)(if in40_200 in38_199 #f)))"
"(let-values(((out-of-context-as-variable?_216)"
"(if out-of-context-as-variable?41_202 out-of-context-as-variable?39_201 #f)))"
"(let-values()"
"(if(module-binding? b_209)"
"(let-values()"
"(let-values(((top-level?_217)(top-level-module-path-index?(module-binding-module b_209))))"
"(let-values(((mi_218)"
"(if(not top-level?_217)"
"(binding->module-instance b_209 ns_212 phase_213 id_214)"
" #f)))"
"(let-values(((m-ns_219)"
"(if top-level?_217"
" ns_212"
"(if mi_218(module-instance-namespace mi_218) #f))))"
"(let-values((()(begin(check-taint id_214)(values))))"
"(let-values(((t_220)"
"(namespace-get-transformer"
" m-ns_219"
"(module-binding-phase b_209)"
"(module-binding-sym b_209)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_218"
"(let-values()"
"(check-access"
" b_209"
" mi_218"
" id_214"
" in-s_215"
"                                                         (if t_220 \"transformer\" \"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_221)"
"(if mi_218"
"(if(module-instance-module mi_218)"
"(module-inspector(module-instance-module mi_218))"
" #f)"
" #f)))"
"(values t_220 insp_221)))))))))"
"(if(local-binding? b_209)"
"(let-values()"
"(let-values(((t_222)(hash-ref env_210(local-binding-key b_209) missing)))"
"(if(eq? t_222 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_223)"
"(let-values(((lst_224) lift-envs_211))"
"(begin"
"(if(list? lst_224)(void)(let-values()(in-list lst_224)))"
"((letrec-values(((for-loop_225)"
"(lambda(result_226 lst_227)"
"(if(pair? lst_227)"
"(let-values(((lift-env_228)"
"(unsafe-car lst_227)))"
"(let-values(((result_229)"
"(let-values(((result_230)"
" result_226))"
"(let-values(((result_231)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_228)"
"(local-binding-key"
" b_209)"
" #f)))))"
"(values result_231)))))"
"(if(not"
"((lambda x_232 result_229)"
" lift-env_228))"
"(for-loop_225"
" result_229"
"(unsafe-cdr lst_227))"
" result_229)))"
" result_226))))"
" for-loop_225)"
" #f"
" lst_224)))))"
"(if or-part_223"
" or-part_223"
"(if out-of-context-as-variable?_216"
" variable"
"                                         (error \"identifier used out of context:\" id_214))))"
" #f))"
"(let-values()(begin(check-taint id_214)(values t_222 #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_209)))))))))))))))"
"(define-values"
"(unpack49.1$1)"
"(lambda(given-kws_233 given-args_234 b42_235 env43_236 lift-envs44_237 ns45_238 phase46_239 id47_240)"
"(let-values(((in40_241)(if(pair? given-kws_233)(eq? '#:in(car given-kws_233)) #f)))"
"(let-values(((in38_242)(if in40_241(car given-args_234)(void)))"
"((given-kws_243)(if in40_241(cdr given-kws_233) given-kws_233))"
"((given-args_244)(if in40_241(cdr given-args_234) given-args_234)))"
"(let-values(((out-of-context-as-variable?41_245)(pair? given-kws_243)))"
"(let-values(((out-of-context-as-variable?39_246)"
"(if out-of-context-as-variable?41_245(car given-args_244)(void))))"
"(binding-lookup48.1"
" in38_242"
" in40_241"
" out-of-context-as-variable?39_246"
" out-of-context-as-variable?41_245"
" b42_235"
" env43_236"
" lift-envs44_237"
" ns45_238"
" phase46_239"
" id47_240)))))))"
"(define-values"
"(binding-lookup50.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_247 given-argc_248)"
"(if(= given-argc_248 8)"
"(let-values(((l1_249) given-kws_247))"
"(let-values(((l1_250)(if(null? l1_249) l1_249(if(eq?(car l1_249) '#:in)(cdr l1_249) l1_249))))"
"(let-values(((l1_251) l1_250))"
"(let-values(((l1_252)"
"(if(null? l1_251)"
" l1_251"
"(if(eq?(car l1_251) '#:out-of-context-as-variable?)(cdr l1_251) l1_251))))"
"(null? l1_252)))))"
" #f))"
"(case-lambda"
"((given-kws_253 given-args_254 b_255 env_256 lift-envs_257 ns_258 phase_259 id_260)"
"(unpack49.1$1 given-kws_253 given-args_254 b_255 env_256 lift-envs_257 ns_258 phase_259 id_260)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((binding-lookup_261)"
"(case-lambda"
"((b_262 env_263 lift-envs_264 ns_265 phase_266 id_267)"
"(unpack49.1$1 null null b_262 env_263 lift-envs_264 ns_265 phase_266 id_267)))))"
" binding-lookup_261)))"
"(define-values"
"(check-taint)"
"(lambda(id_268)"
"(if(syntax-tainted?$1 id_268)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_268))"
"(void))))"
"(void)"
"(void)"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values(((lst_3) ids_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6)))"
"(let-values(((ht_8)"
"(let-values(((ht_9) ht_5))"
"(let-values(((ht_10)"
"(let-values()"
"(hash-update"
" ht_9"
"(identifier-binding-symbol$1 id_7 phase_1)"
"(lambda(l_11)(cons id_7 l_11))"
" null))))"
"(values ht_10)))))"
"(for-loop_4 ht_8(unsafe-cdr lst_6))))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_12 phase_13 given-id_14)"
"(if(zero?(hash-count fs_12))"
" #f"
"(let-values(((lst_15)(hash-ref fs_12(identifier-binding-symbol$1 given-id_14 phase_13) null)))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((id_19)(unsafe-car lst_18)))"
"(let-values(((result_20)"
"(let-values(((result_21) result_17))"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_19"
" given-id_14"
" phase_13"
" phase_13)))))"
"(values result_22)))))"
"(if(not((lambda x_23 result_20) id_19))"
"(for-loop_16 result_20(unsafe-cdr lst_18))"
" result_20)))"
" result_17))))"
" for-loop_16)"
" #f"
" lst_15))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_24)(let-values(((c_25)(hash-count fs_24)))(<= c_25 1))))"
"(void)"
"(void)"
"(define-values"
"(struct:expand-context"
" expand-context1.1"
" expand-context?"
" expand-context-context"
" expand-context-phase"
" expand-context-namespace"
" expand-context-env"
" expand-context-user-env"
" expand-context-post-expansion-scope-action"
" expand-context-scopes"
" expand-context-def-ctx-scopes"
" expand-context-binding-layer"
" expand-context-reference-records"
" expand-context-only-immediate?"
" expand-context-just-once?"
" expand-context-module-begin-k"
" expand-context-need-eventually-defined"
" expand-context-allow-unbound?"
" expand-context-preserve-#%expression-and-do-not-add-#%top?"
" expand-context-stops"
" expand-context-current-introduction-scopes"
" expand-context-declared-submodule-names"
" expand-context-lifts"
" expand-context-lift-envs"
" expand-context-module-lifts"
" expand-context-require-lifts"
" expand-context-to-module-lifts"
" expand-context-requires+provides"
" expand-context-name"
" expand-context-observer)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context"
" 27"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26)"
" #f"
" 'expand-context)))))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 0 'context)"
"(make-struct-field-accessor -ref_5 1 'phase)"
"(make-struct-field-accessor -ref_5 2 'namespace)"
"(make-struct-field-accessor -ref_5 3 'env)"
"(make-struct-field-accessor -ref_5 4 'user-env)"
"(make-struct-field-accessor -ref_5 5 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_5 6 'scopes)"
"(make-struct-field-accessor -ref_5 7 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_5 8 'binding-layer)"
"(make-struct-field-accessor -ref_5 9 'reference-records)"
"(make-struct-field-accessor -ref_5 10 'only-immediate?)"
"(make-struct-field-accessor -ref_5 11 'just-once?)"
"(make-struct-field-accessor -ref_5 12 'module-begin-k)"
"(make-struct-field-accessor -ref_5 13 'need-eventually-defined)"
"(make-struct-field-accessor -ref_5 14 'allow-unbound?)"
"(make-struct-field-accessor -ref_5 15 'preserve-#%expression-and-do-not-add-#%top?)"
"(make-struct-field-accessor -ref_5 16 'stops)"
"(make-struct-field-accessor -ref_5 17 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_5 18 'declared-submodule-names)"
"(make-struct-field-accessor -ref_5 19 'lifts)"
"(make-struct-field-accessor -ref_5 20 'lift-envs)"
"(make-struct-field-accessor -ref_5 21 'module-lifts)"
"(make-struct-field-accessor -ref_5 22 'require-lifts)"
"(make-struct-field-accessor -ref_5 23 'to-module-lifts)"
"(make-struct-field-accessor -ref_5 24 'requires+provides)"
"(make-struct-field-accessor -ref_5 25 'name)"
"(make-struct-field-accessor -ref_5 26 'observer))))"
"(define-values"
"(make-expand-context)"
"(lambda(ns_152)"
"(let-values(((root-ctx_153)(namespace-get-root-expand-ctx ns_152)))"
"(expand-context1.1"
"(root-expand-context-module-scopes root-ctx_153)"
"(root-expand-context-post-expansion-scope root-ctx_153)"
"(root-expand-context-top-level-bind-scope root-ctx_153)"
"(root-expand-context-all-scopes-stx root-ctx_153)"
"(root-expand-context-use-site-scopes root-ctx_153)"
"(root-expand-context-defined-syms root-ctx_153)"
"(root-expand-context-frame-id root-ctx_153)"
"(root-expand-context-counter root-ctx_153)"
"(root-expand-context-lift-key root-ctx_153)"
" 'top-level"
"(namespace-phase ns_152)"
" ns_152"
" empty-env"
" '#hasheq()"
" push-scope"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_153)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe)))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_154 root-ctx_155)"
"(let-values(((the-struct_156) ctx_154))"
"(if(expand-context? the-struct_156)"
"(let-values(((module-scopes16_157)(root-expand-context-module-scopes root-ctx_155))"
"((post-expansion-scope17_158)(root-expand-context-post-expansion-scope root-ctx_155))"
"((top-level-bind-scope18_159)(root-expand-context-top-level-bind-scope root-ctx_155))"
"((all-scopes-stx19_160)(root-expand-context-all-scopes-stx root-ctx_155))"
"((use-site-scopes20_161)(root-expand-context-use-site-scopes root-ctx_155))"
"((defined-syms21_162)(root-expand-context-defined-syms root-ctx_155))"
"((frame-id22_163)(root-expand-context-frame-id root-ctx_155))"
"((counter23_164)(root-expand-context-counter root-ctx_155))"
"((lift-key24_165)(root-expand-context-lift-key root-ctx_155))"
"((binding-layer25_166)(root-expand-context-frame-id root-ctx_155)))"
"(expand-context1.1"
" module-scopes16_157"
" post-expansion-scope17_158"
" top-level-bind-scope18_159"
" all-scopes-stx19_160"
" use-site-scopes20_161"
" defined-syms21_162"
" frame-id22_163"
" counter23_164"
" lift-key24_165"
"(expand-context-context the-struct_156)"
"(expand-context-phase the-struct_156)"
"(expand-context-namespace the-struct_156)"
"(expand-context-env the-struct_156)"
"(expand-context-user-env the-struct_156)"
"(expand-context-post-expansion-scope-action the-struct_156)"
"(expand-context-scopes the-struct_156)"
"(expand-context-def-ctx-scopes the-struct_156)"
" binding-layer25_166"
"(expand-context-reference-records the-struct_156)"
"(expand-context-only-immediate? the-struct_156)"
"(expand-context-just-once? the-struct_156)"
"(expand-context-module-begin-k the-struct_156)"
"(expand-context-need-eventually-defined the-struct_156)"
"(expand-context-allow-unbound? the-struct_156)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_156)"
"(expand-context-stops the-struct_156)"
"(expand-context-current-introduction-scopes the-struct_156)"
"(expand-context-declared-submodule-names the-struct_156)"
"(expand-context-lifts the-struct_156)"
"(expand-context-lift-envs the-struct_156)"
"(expand-context-module-lifts the-struct_156)"
"(expand-context-require-lifts the-struct_156)"
"(expand-context-to-module-lifts the-struct_156)"
"(expand-context-requires+provides the-struct_156)"
"(expand-context-name the-struct_156)"
"(expand-context-observer the-struct_156)))"
"        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_156)))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context6.1)"
"(lambda(fail-ok?2_167 fail-ok?3_168 who4_169 who5_170)"
"(let-values(((who_171)(if who5_170 who4_169 'unexpected)))"
"(let-values(((fail-ok?_172)(if fail-ok?3_168 fail-ok?2_167 #f)))"
"(let-values()"
"(let-values(((or-part_173)(force(current-expand-context))))"
"(if or-part_173"
" or-part_173"
"              (if fail-ok?_172 #f (raise-arguments-error who_171 \"not currently expanding\")))))))))"
"(define-values"
"(unpack7.1$4)"
"(lambda(given-kws_174 given-args_175 who4_176 who5_177)"
"(let-values(((fail-ok?3_178)(pair? given-kws_174)))"
"(let-values(((fail-ok?2_179)(if fail-ok?3_178(car given-args_175)(void))))"
"(get-current-expand-context6.1 fail-ok?2_179 fail-ok?3_178 who4_176 who5_177)))))"
"(define-values"
"(get-current-expand-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_180 given-argc_181)"
"(if(if(>= given-argc_181 2)(<= given-argc_181 3) #f)"
"(let-values(((l1_182) given-kws_180))"
"(let-values(((l1_183)(if(null? l1_182) l1_182(if(eq?(car l1_182) '#:fail-ok?)(cdr l1_182) l1_182))))"
"(null? l1_183)))"
" #f))"
"(case-lambda"
"((given-kws_184 given-args_185)(unpack7.1$4 given-kws_184 given-args_185 #f #f))"
"((given-kws_186 given-args_187 who4_188)(unpack7.1$4 given-kws_186 given-args_187 who4_188 #t)))"
" null"
" '(#:fail-ok?)"
"(let-values(((get-current-expand-context_189)"
"(case-lambda(()(unpack7.1$4 null null #f #f))((who4_190)(unpack7.1$4 null null who4_190 #t)))))"
" get-current-expand-context_189)))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_191)"
"(begin"
"(if(let-values(((or-part_192)(not v_191)))"
"(if or-part_192 or-part_192(if(procedure? v_191)(procedure-arity-includes? v_191 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_191)))"
" v_191))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_193)"
"(if(if(eq? 'expression(expand-context-context ctx_193))(not(expand-context-name ctx_193)) #f)"
"(let-values() ctx_193)"
"(let-values()"
"(let-values(((the-struct_194) ctx_193))"
"(if(expand-context? the-struct_194)"
"(let-values(((context26_195) 'expression)((name27_196) #f)((post-expansion-scope28_197) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_194)"
" post-expansion-scope28_197"
"(root-expand-context-top-level-bind-scope the-struct_194)"
"(root-expand-context-all-scopes-stx the-struct_194)"
"(root-expand-context-use-site-scopes the-struct_194)"
"(root-expand-context-defined-syms the-struct_194)"
"(root-expand-context-frame-id the-struct_194)"
"(root-expand-context-counter the-struct_194)"
"(root-expand-context-lift-key the-struct_194)"
" context26_195"
"(expand-context-phase the-struct_194)"
"(expand-context-namespace the-struct_194)"
"(expand-context-env the-struct_194)"
"(expand-context-user-env the-struct_194)"
"(expand-context-post-expansion-scope-action the-struct_194)"
"(expand-context-scopes the-struct_194)"
"(expand-context-def-ctx-scopes the-struct_194)"
"(expand-context-binding-layer the-struct_194)"
"(expand-context-reference-records the-struct_194)"
"(expand-context-only-immediate? the-struct_194)"
"(expand-context-just-once? the-struct_194)"
"(expand-context-module-begin-k the-struct_194)"
"(expand-context-need-eventually-defined the-struct_194)"
"(expand-context-allow-unbound? the-struct_194)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_194)"
"(expand-context-stops the-struct_194)"
"(expand-context-current-introduction-scopes the-struct_194)"
"(expand-context-declared-submodule-names the-struct_194)"
"(expand-context-lifts the-struct_194)"
"(expand-context-lift-envs the-struct_194)"
"(expand-context-module-lifts the-struct_194)"
"(expand-context-require-lifts the-struct_194)"
"(expand-context-to-module-lifts the-struct_194)"
"(expand-context-requires+provides the-struct_194)"
" name27_196"
"(expand-context-observer the-struct_194)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_194)))))))"
"(define-values"
"(lifted/1.1$20)"
"(make-required 'as-tail-context(case-lambda((self_198 ctx_199)(apply missing-kw self_198 ctx_199 null))) #f #f))"
"(define-values"
"(as-tail-context12.1)"
"(lambda(wrt9_200 ctx11_201)"
"(let-values(((ctx_202) ctx11_201))"
"(let-values(((wrt-ctx_203) wrt9_200))"
"(let-values()"
"(if(expand-context-name wrt-ctx_203)"
"(let-values()"
"(let-values(((the-struct_204) ctx_202))"
"(if(expand-context? the-struct_204)"
"(let-values(((name29_205)(expand-context-name wrt-ctx_203)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_204)"
"(root-expand-context-post-expansion-scope the-struct_204)"
"(root-expand-context-top-level-bind-scope the-struct_204)"
"(root-expand-context-all-scopes-stx the-struct_204)"
"(root-expand-context-use-site-scopes the-struct_204)"
"(root-expand-context-defined-syms the-struct_204)"
"(root-expand-context-frame-id the-struct_204)"
"(root-expand-context-counter the-struct_204)"
"(root-expand-context-lift-key the-struct_204)"
"(expand-context-context the-struct_204)"
"(expand-context-phase the-struct_204)"
"(expand-context-namespace the-struct_204)"
"(expand-context-env the-struct_204)"
"(expand-context-user-env the-struct_204)"
"(expand-context-post-expansion-scope-action the-struct_204)"
"(expand-context-scopes the-struct_204)"
"(expand-context-def-ctx-scopes the-struct_204)"
"(expand-context-binding-layer the-struct_204)"
"(expand-context-reference-records the-struct_204)"
"(expand-context-only-immediate? the-struct_204)"
"(expand-context-just-once? the-struct_204)"
"(expand-context-module-begin-k the-struct_204)"
"(expand-context-need-eventually-defined the-struct_204)"
"(expand-context-allow-unbound? the-struct_204)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_204)"
"(expand-context-stops the-struct_204)"
"(expand-context-current-introduction-scopes the-struct_204)"
"(expand-context-declared-submodule-names the-struct_204)"
"(expand-context-lifts the-struct_204)"
"(expand-context-lift-envs the-struct_204)"
"(expand-context-module-lifts the-struct_204)"
"(expand-context-require-lifts the-struct_204)"
"(expand-context-to-module-lifts the-struct_204)"
"(expand-context-requires+provides the-struct_204)"
" name29_205"
"(expand-context-observer the-struct_204)))"
"                  (raise-argument-error 'struct-copy \"expand-context?\" the-struct_204))))"
"(let-values() ctx_202)))))))"
"(define-values"
"(unpack13.1$1)"
"(lambda(given-kws_206 given-args_207 ctx11_208)"
"(let-values(((wrt9_209)(car given-args_207)))(as-tail-context12.1 wrt9_209 ctx11_208))))"
"(define-values"
"(as-tail-context14.1)"
"(lifted/1.1$20"
"(lambda(given-kws_210 given-argc_211)"
"(if(= given-argc_211 3)"
"(let-values(((l2_212) given-kws_210))"
"(if(pair? l2_212)(if(eq?(car l2_212) '#:wrt)(null?(cdr l2_212)) #f) #f))"
" #f))"
"(case-lambda((given-kws_213 given-args_214 ctx_215)(unpack13.1$1 given-kws_213 given-args_214 ctx_215)))"
" '(#:wrt)"
" '(#:wrt)))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_216 ids_217)"
"(if(if(pair? ids_217)(null?(cdr ids_217)) #f)"
"(let-values()"
"(let-values(((the-struct_218) ctx_216))"
"(if(expand-context? the-struct_218)"
"(let-values(((name30_219)(car ids_217)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_218)"
"(root-expand-context-post-expansion-scope the-struct_218)"
"(root-expand-context-top-level-bind-scope the-struct_218)"
"(root-expand-context-all-scopes-stx the-struct_218)"
"(root-expand-context-use-site-scopes the-struct_218)"
"(root-expand-context-defined-syms the-struct_218)"
"(root-expand-context-frame-id the-struct_218)"
"(root-expand-context-counter the-struct_218)"
"(root-expand-context-lift-key the-struct_218)"
"(expand-context-context the-struct_218)"
"(expand-context-phase the-struct_218)"
"(expand-context-namespace the-struct_218)"
"(expand-context-env the-struct_218)"
"(expand-context-user-env the-struct_218)"
"(expand-context-post-expansion-scope-action the-struct_218)"
"(expand-context-scopes the-struct_218)"
"(expand-context-def-ctx-scopes the-struct_218)"
"(expand-context-binding-layer the-struct_218)"
"(expand-context-reference-records the-struct_218)"
"(expand-context-only-immediate? the-struct_218)"
"(expand-context-just-once? the-struct_218)"
"(expand-context-module-begin-k the-struct_218)"
"(expand-context-need-eventually-defined the-struct_218)"
"(expand-context-allow-unbound? the-struct_218)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_218)"
"(expand-context-stops the-struct_218)"
"(expand-context-current-introduction-scopes the-struct_218)"
"(expand-context-declared-submodule-names the-struct_218)"
"(expand-context-lifts the-struct_218)"
"(expand-context-lift-envs the-struct_218)"
"(expand-context-module-lifts the-struct_218)"
"(expand-context-require-lifts the-struct_218)"
"(expand-context-to-module-lifts the-struct_218)"
"(expand-context-requires+provides the-struct_218)"
" name30_219"
"(expand-context-observer the-struct_218)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_218))))"
"(let-values() ctx_216))))"
"(void)"
"(void)"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_289)"
"(if(pair? s_289)"
"(let-values()(let-values(((r_290)(to-syntax-list.1(cdr s_289))))(if r_290(cons(car s_289) r_290) #f)))"
"(if(syntax?$1 s_289)"
"(let-values()(to-syntax-list.1(syntax-e$1 s_289)))"
"(if(list? s_289)(let-values() s_289)(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_1 proc_2)(begin(add-core-binding! sym_1)(set! core-forms(hash-set core-forms sym_1 proc_2)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_3 val_4)"
"(begin(add-core-binding! sym_3)(set! core-primitives(hash-set core-primitives sym_3 val_4)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_5)"
"(let-values(((temp1_6)(datum->syntax$1 core-stx sym_5))"
"((temp2_7)"
"(let-values(((core-mpi4_9) core-mpi)((temp5_10) 0)((sym6_11) sym_5))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_9"
" temp5_10"
" sym6_11)"
"(make-module-binding24.1 core-mpi4_9 temp5_10 sym6_11))))"
"((temp3_8) 0))"
"(if(variable-reference-constant?(#%variable-reference add-binding!19.1))"
"(add-binding!17.1 #f #f #f #f temp1_6 temp2_7 temp3_8)"
"(add-binding!19.1 temp1_6 temp2_7 temp3_8)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_12)"
"(let-values(((ns7_13) ns_12)"
"((temp8_14)"
"(let-values(((...r/namespace/core.rkt:59:3_16) make-module39.1)"
"((temp10_17) #t)"
"((temp11_18) #t)"
"((temp12_19) #t)"
"((core-mpi13_20) core-mpi)"
"((temp14_21)"
"(hasheqv"
" 0"
"(let-values(((lst_23)(list core-primitives core-forms))((lst_24) '(#f #t)))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(table_26 lst_27 lst_28)"
"(if(if(pair? lst_27)(pair? lst_28) #f)"
"(let-values(((syms_29)(unsafe-car lst_27))"
"((syntax?_30)(unsafe-car lst_28)))"
"(let-values(((table_31)"
"(let-values(((table_32) table_26))"
"(let-values(((ht_33) syms_29))"
"(begin"
"(if((lambda(ht_34)(hash? ht_34))"
" ht_33)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_33)))"
"((letrec-values(((for-loop_35)"
"(lambda(table_36"
" i_37)"
"(if i_37"
"(let-values(((sym_38)"
"(hash-iterate-key"
" ht_33"
" i_37)))"
"(let-values(((table_39)"
"(let-values(((table_40)"
" table_36))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_42"
" val_43)"
"(let-values()"
"(let-values(((b_44)"
"(let-values(((core-mpi16_45)"
" core-mpi)"
"((temp17_46)"
" 0)"
"((sym18_47)"
" sym_38))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi16_45"
" temp17_46"
" sym18_47)"
"(make-module-binding24.1"
" core-mpi16_45"
" temp17_46"
" sym18_47)))))"
"(values"
" sym_38"
"(if syntax?_30"
"(provided1.1"
" b_44"
" #f"
" #t)"
" b_44))))))"
"(hash-set"
" table_40"
" key_42"
" val_43)))))"
"(values"
" table_41)))))"
"(for-loop_35"
" table_39"
"(hash-iterate-next"
" ht_33"
" i_37))))"
" table_36))))"
" for-loop_35)"
" table_32"
"(hash-iterate-first ht_33)))))))"
"(for-loop_25"
" table_31"
"(unsafe-cdr lst_27)"
"(unsafe-cdr lst_28))))"
" table_26))))"
" for-loop_25)"
" '#hasheq()"
" lst_23"
" lst_24)))))"
"((temp15_22)"
"(lambda(data-box_48"
" ns_49"
" phase_50"
" phase-level_51"
" self_52"
" bulk-binding-registry_53"
" insp_54)"
"(let-values(((tmp_55) phase-level_51))"
"(if(equal? tmp_55 0)"
"(let-values()"
"(begin"
"(let-values(((ht_56) core-primitives))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(fold-var_59 i_60)"
"(if i_60"
"(let-values(((sym_61 val_62)"
"(hash-iterate-key+value ht_56 i_60)))"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_64)"
" fold-var_59))"
"(let-values(((fold-var_65)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_49"
" 0"
" sym_61"
" val_62))"
"(void)))))"
"(values fold-var_65)))))"
"(for-loop_58"
" fold-var_63"
"(hash-iterate-next ht_56 i_60))))"
" fold-var_59))))"
" for-loop_58)"
"(void)"
"(hash-iterate-first ht_56))))"
"(let-values(((ht_66) core-forms))"
"(begin"
"(if((lambda(ht_67)(hash? ht_67)) ht_66)"
"(void)"
"(let-values()(default-in-hash ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(fold-var_69 i_70)"
"(if i_70"
"(let-values(((sym_71 proc_72)"
"(hash-iterate-key+value ht_66 i_70)))"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74)"
" fold-var_69))"
"(let-values(((fold-var_75)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_49"
" 0"
" sym_71"
"(core-form9.1"
" proc_72"
" sym_71)))"
"(void)))))"
"(values fold-var_75)))))"
"(for-loop_68"
" fold-var_73"
"(hash-iterate-next ht_66 i_70))))"
" fold-var_69))))"
" for-loop_68)"
"(void)"
"(hash-iterate-first ht_66))))))"
"(let-values()(void)))))))"
"(if(variable-reference-constant?(#%variable-reference make-module39.1))"
"(make-module37.1"
" temp10_17"
" #t"
" #f"
" #f"
" temp15_22"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_18"
" #t"
" #f"
" #f"
" temp12_19"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_21"
" #f"
" #f"
" core-mpi13_20"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/namespace/core.rkt:59:3_16"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
"(list temp10_17 temp15_22 temp11_18 temp12_19 temp14_21 core-mpi13_20)))))"
"((core-module-name9_15) core-module-name))"
"(if(variable-reference-constant?(#%variable-reference declare-module!58.1))"
"(declare-module!56.1 #f #f ns7_13 temp8_14 core-module-name9_15)"
"(declare-module!58.1 ns7_13 temp8_14 core-module-name9_15)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_76 phase_77)"
"(let-values(((ok?_78 id19_79 _20_80)"
"(let-values(((s_91) s_76))"
"(if(let-values(((s_92)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(if(pair? s_92)"
"(if(let-values(((s_93)(car s_92)))(if(syntax?$1 s_93)(symbol?(syntax-e$1 s_93)) #f))"
"(let-values(((s_94)(cdr s_92))) #t)"
" #f)"
" #f))"
"(let-values(((orig-s_95) s_91))"
"(let-values(((id19_96 _20_97)"
"(let-values(((s_98)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(let-values(((id21_99)(let-values(((s_101)(car s_98))) s_101))"
"((_22_100)(let-values(((s_102)(cdr s_98))) s_102)))"
"(values id21_99 _22_100)))))"
"(values #t id19_96 _20_97)))"
"(values #f #f #f)))))"
"(if ok?_78"
"(let-values(((b_103)"
"(let-values(((temp23_104) id19_79)((phase24_105) phase_77))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f temp23_104 phase24_105)"
"(resolve+shift22.1 temp23_104 phase24_105)))))"
"(if(module-binding? b_103)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_103)))"
"(module-binding-sym b_103)"
" #f)"
" #f))"
" #f))))"
"(void)"
"(void)"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values(((tmp_7) mode_6))"
"(if(equal? tmp_7 'none)"
"(let-values() s_5)"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(non-syntax-map"
"(let-values(((or-part_9)(syntax->list$1 s_5)))"
"(if or-part_9 or-part_9(syntax-e$1 s_5)))"
"(lambda(tail?_10 d_11) d_11)"
"(lambda(s_12)(loop_4 s_12(syntax-taint-mode-property s_12))))))"
"(datum->syntax$1"
" #f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_13)(syntax-e$1 s_5)))"
"(if(pair? c_13)"
"(let-values()"
"(let-values(((cd_14)(cdr c_13)))"
"(if(let-values(((or-part_15)(pair? cd_14)))"
"(if or-part_15"
" or-part_15"
"(if(syntax?$1 cd_14)(pair?(syntax-e$1 cd_14)) #f)))"
"(let-values()"
"(let-values(((d_16)(if(syntax?$1 cd_14)(syntax-e$1 cd_14) cd_14)))"
"(datum->syntax$1"
" s_5"
"(cons"
"(loop_4(car c_13)(syntax-taint-mode-property(car c_13)))"
"(cons"
"(loop_4(car d_16) 'transparent)"
"(non-syntax-map"
"(let-values(((or-part_17)(syntax->list$1(cdr d_16))))"
"(if or-part_17 or-part_17(cdr d_16)))"
"(lambda(tail?_18 d_19) d_19)"
"(lambda(s_20)(loop_4 s_20(syntax-taint-mode-property s_20))))))"
" s_5"
" s_5)))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_21)(syntax-e$1 s_5)))"
"(let-values(((tmp_22)(core-form-sym c_21 phase_3)))"
"(if(if(equal? tmp_22 'begin)"
" #t"
"(if(equal? tmp_22 'begin-for-syntax) #t(equal? tmp_22 '#%module-begin)))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_22 'define-values) #t(equal? tmp_22 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque)))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_23)"
"(let-values(((or-part_24)(syntax-property$1 s_23 'taint-mode)))"
"(if or-part_24 or-part_24(syntax-property$1 s_23 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_25)(syntax-property-remove(syntax-property-remove s_25 'taint-mode) 'certify-mode)))"
"(void)"
"(void)"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(void)"
"(void)"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(alt-reverse"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((smss_10)(unsafe-car lst_9)))"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_14)"
"(if(identifier? s_1)"
"(hasheq"
" 'name"
"(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_15)"
"(scope-set-at-fallback"
" s_1"
" smss_10"
" phase_2)))"
"(let-values(((context_16)"
"(scope-set->context"
" s-scs_15)))"
"(let-values(((context-ht_17)"
"(hash-set"
" init-ht_14"
" 'context"
" context_16)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_1)))"
"(let-values(((bindings_19)"
"(if(identifier?"
" s_1)"
"(let-values()"
"(alt-reverse"
"(let-values(((ht_20)"
" s-scs_15))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash?"
" ht_21)"
"(immutable?"
" ht_21)"
" #f))"
" ht_20)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23"
" i_24)"
"(if i_24"
"(let-values(((sc_25)"
"(unsafe-immutable-hash-iterate-key"
" ht_20"
" i_24)))"
"(let-values(((fold-var_26)"
"(let-values(((ht_27"
" bulk-bindings_28)"
"(let-values(((table_31)"
"(scope-binding-table"
" sc_25)))"
"(if(hash?"
" table_31)"
"(values"
"(hash-ref"
" table_31"
" sym_18"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_31)"
" sym_18"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_31)))))"
"((s_29)"
" s_1)"
"((extra-shifts_30)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33"
" i_34"
" already-covered-scopes_35)"
"(if(not"
"(null?"
" i_34))"
"(let-values(((scs_36)"
"(if(pair?"
" i_34)"
"(let-values()"
"(let-values(((scs_38)"
"(bulk-binding-at-scopes"
"(car"
" i_34))))"
"(if(not"
"(set-member?"
" already-covered-scopes_35"
" scs_38))"
" scs_38"
" #f)))"
"(let-values()"
"(hash-iterate-key"
" ht_27"
" i_34))))"
"((b_37)"
"(if(pair?"
" i_34)"
"(let-values()"
"(let-values(((bulk_39)"
"(bulk-binding-at-bulk"
"(car"
" i_34))))"
"(let-values(((b-info_40)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_39"
" s_29"
" extra-shifts_30)"
" sym_18"
" #f)))"
"(if b-info_40"
"((bulk-binding-create"
" bulk_39)"
" bulk_39"
" b-info_40"
" sym_18)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_27"
" i_34)))))"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_33))"
"(if(if scs_36"
"(if b_37"
"(let-values(((or-part_43)"
" all-bindings?_3))"
"(if or-part_43"
" or-part_43"
"(subset?"
" scs_36"
" s-scs_15)))"
" #f)"
" #f)"
"(let-values(((fold-var_44)"
" fold-var_42))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_36)"
" 'match?"
"(subset?"
" scs_36"
" s-scs_15)"
"(if(local-binding?"
" b_37)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_37)"
"(local-binding-key"
" b_37)"
"(vector"
"(module-binding-sym"
" b_37)"
"(module-binding-module"
" b_37)"
"(module-binding-phase"
" b_37)))))"
" fold-var_44))))"
"(values"
" fold-var_45)))"
" fold-var_42))))"
"(for-loop_32"
" fold-var_41"
"(if(pair?"
" i_34)"
"(let-values()"
"(cdr"
" i_34))"
"(let-values()"
"(let-values(((or-part_46)"
"(hash-iterate-next"
" ht_27"
" i_34)))"
"(if or-part_46"
" or-part_46"
" bulk-bindings_28))))"
"(if(if(pair?"
" bulk-bindings_28)"
"(if scs_36"
"(if b_37"
"(let-values(((or-part_47)"
"(not"
"(pair?"
" i_34))))"
"(if or-part_47"
" or-part_47"
"(not"
"(null?"
"(cdr"
" i_34)))))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(set-add"
" already-covered-scopes_35"
" scs_36))"
"(let-values()"
" already-covered-scopes_35)))))"
" fold-var_33))))"
" for-loop_32)"
" fold-var_23"
"(let-values(((or-part_48)"
"(hash-iterate-first"
" ht_27)))"
"(if or-part_48"
" or-part_48"
" bulk-bindings_28))"
" '#hasheq())))))"
"(for-loop_22"
" fold-var_26"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first"
" ht_20))))))"
"(let-values()"
" null))))"
"(if(null? bindings_19)"
" context-ht_17"
"(hash-set"
" context-ht_17"
" 'bindings"
" bindings_19)))))))))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(for-loop_7 fold-var_11(unsafe-cdr lst_9))))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_49)"
"(let-values(((...der/syntax/debug.rkt:52:2_50) sort9.1)"
"((temp1_51)"
"(alt-reverse"
"(let-values(((ht_54) scs_49))"
"(begin"
"(if((lambda(ht_55)(if(hash? ht_55)(immutable? ht_55) #f)) ht_54)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_54)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57 i_58)"
"(if i_58"
"(let-values(((sc_59)(unsafe-immutable-hash-iterate-key ht_54 i_58)))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_57))"
"(let-values(((fold-var_62)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_59)"
"(vector"
"(scope-id sc_59)"
"(scope-kind sc_59)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_59)))"
"(vector"
"(scope-id sc_59)"
"(scope-kind sc_59))))"
" fold-var_61))))"
"(values fold-var_62)))))"
"(for-loop_56"
" fold-var_60"
"(unsafe-immutable-hash-iterate-next ht_54 i_58))))"
" fold-var_57))))"
" for-loop_56)"
" null"
"(unsafe-immutable-hash-iterate-first ht_54))))))"
"((<2_52) <)"
"((temp3_53)(lambda(v_63)(vector-ref v_63 0))))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f temp3_53 #t temp1_51 <2_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/syntax/debug.rkt:52:2_50"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list temp3_53)"
" temp1_51"
" <2_52)))))"
"(void)"
"(void)"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_1 #f null (syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) #t)))"
"(if(not"
"(let-values(((or-part_6)(pair?(hash-ref info_5 'bindings null))))"
"(if or-part_6"
" or-part_6"
"(let-values(((lst_7)(hash-ref info_5 'fallbacks null)))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(result_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((fb-info_11)(unsafe-car lst_10)))"
"(let-values(((result_12)"
"(let-values(((result_13) result_9))"
"(let-values(((result_14)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref fb-info_11 'bindings null))))))"
"(values result_14)))))"
"(if(not((lambda x_15 result_12) fb-info_11))"
"(for-loop_8 result_12(unsafe-cdr lst_10))"
" result_12)))"
" result_9))))"
" for-loop_8)"
" #f"
" lst_7))))))"
"        (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_16)"
"((letrec-values(((loop_18)"
"(lambda(info_19 layer_20)"
"(apply"
" append"
"(cons"
"(hash-ref info_19 'context)"
"(alt-reverse"
"(let-values(((lst_21)(hash-ref info_19 'bindings null)))"
"(begin"
"(if(list? lst_21)(void)(let-values()(in-list lst_21)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 lst_24)"
"(if(pair? lst_24)"
"(let-values(((b_25)(unsafe-car lst_24)))"
"(let-values(((fold-var_26)"
"(let-values(((fold-var_27)"
" fold-var_23))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" b_25"
" 'context))"
" fold-var_27))))"
"(values fold-var_28)))))"
"(for-loop_22"
" fold-var_26"
"(unsafe-cdr lst_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
" lst_21)))))"
"(let-values(((fallbacks_29)(hash-ref info_19 'fallbacks null)))"
"(alt-reverse"
"(let-values(((lst_30) fallbacks_29)((start_31)(add1 layer_20)))"
"(begin"
"(if(list? lst_30)(void)(let-values()(in-list lst_30)))"
"(if(exact-nonnegative-integer? start_31)"
"(void)"
"(let-values()(in-naturals start_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33 lst_34 pos_35)"
"(if(if(pair? lst_34) #t #f)"
"(let-values(((fallback_36)"
"(unsafe-car lst_34))"
"((layer_37) pos_35))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39)"
" fold-var_33))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_18"
" fallback_36"
" layer_37))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(for-loop_32"
" fold-var_38"
"(unsafe-cdr lst_34)"
"(+ pos_35 1))))"
" fold-var_33))))"
" for-loop_32)"
" null"
" lst_30"
" start_31)))))))))"
" loop_18)"
" info_5"
" 0)))"
"(let-values(((common-scopes_17)"
"(if(null? relevant-scope-sets_16)"
"(set)"
"(let-values(((lst_41) relevant-scope-sets_16))"
"(begin"
"(if(list? lst_41)(void)(let-values()(in-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(s_43 lst_44)"
"(if(pair? lst_44)"
"(let-values(((l_45)(unsafe-car lst_44)))"
"(let-values(((s_46)"
"(let-values(((s_47) s_43))"
"(let-values(((s_48)"
"(let-values()"
"(set-intersect"
" s_47"
"(list->set l_45)))))"
"(values s_48)))))"
"(for-loop_42 s_46(unsafe-cdr lst_44))))"
" s_43))))"
" for-loop_42)"
"(list->set(car relevant-scope-sets_16))"
" lst_41))))))"
"(string-append"
"((letrec-values(((loop_49)"
"(lambda(info_50 layer_51)"
"(string-append"
"                                    \"\\n  context\""
"(layer->string layer_51)"
"                                    \"...:\""
"(describe-context(hash-ref info_50 'context) common-scopes_17)"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_52)"
"(let-values(((temp1_53)(hash-ref info_50 'bindings null))"
"((temp2_54)"
"(lambda(a_55 b_56)"
"(if(hash-ref a_55 'match? #f)"
"(not(hash-ref b_56 'match? #f))"
" #f))))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp1_53 temp2_54)"
"(sort9.1 temp1_53 temp2_54)))))"
"(begin"
"(if(list? lst_52)(void)(let-values()(in-list lst_52)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58 lst_59)"
"(if(pair? lst_59)"
"(let-values(((b_60)(unsafe-car lst_59)))"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62)"
" fold-var_58))"
"(let-values(((fold-var_63)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                                      \"\\n  \""
"(if(hash-ref"
" b_60"
" 'match?"
" #f)"
"                                                                                                        \"matching\""
"                                                                                                        \"other\")"
"                                                                                                      \" binding\""
"(layer->string"
" layer_51)"
"                                                                                                      \"...:\""
"                                                                                                      \"\\n   \""
"(if(hash-ref"
" b_60"
" 'local"
" #f)"
"                                                                                                        \"local\""
"(format"
"                                                                                                         \"~a\""
"(hash-ref"
" b_60"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_60"
" 'context)"
" common-scopes_17)))"
" fold-var_62))))"
"(values fold-var_63)))))"
"(for-loop_57 fold-var_61(unsafe-cdr lst_59))))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_52)))))"
"(let-values(((fallbacks_64)(hash-ref info_50 'fallbacks null)))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_65) fallbacks_64)((start_66)(add1 layer_51)))"
"(begin"
"(if(list? lst_65)(void)(let-values()(in-list lst_65)))"
"(if(exact-nonnegative-integer? start_66)"
"(void)"
"(let-values()(in-naturals start_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68 lst_69 pos_70)"
"(if(if(pair? lst_69) #t #f)"
"(let-values(((fallback_71)(unsafe-car lst_69))"
"((layer_72) pos_70))"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74)"
" fold-var_68))"
"(let-values(((fold-var_75)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_49"
" fallback_71"
" layer_72))"
" fold-var_74))))"
"(values fold-var_75)))))"
"(for-loop_67"
" fold-var_73"
"(unsafe-cdr lst_69)"
"(+ pos_70 1))))"
" fold-var_68))))"
" for-loop_67)"
" null"
" lst_65"
" start_66))))))))))"
" loop_49)"
" info_5"
" 0)"
"(if(set-empty? common-scopes_17)"
"                 \"\""
"(string-append"
"                  \"\\n  common scopes...:\""
"(describe-context"
"(alt-reverse"
"(let-values(((lst_76)(hash-ref info_5 'context)))"
"(begin"
"(if(list? lst_76)(void)(let-values()(in-list lst_76)))"
"((letrec-values(((for-loop_77)"
"(lambda(fold-var_78 lst_79)"
"(if(pair? lst_79)"
"(let-values(((s_80)(unsafe-car lst_79)))"
"(let-values(((fold-var_81)"
"(let-values(((fold-var_82) fold-var_78))"
"(if(set-member? common-scopes_17 s_80)"
"(let-values(((fold-var_83) fold-var_82))"
"(let-values(((fold-var_84)"
"(let-values()"
"(cons"
"(let-values() s_80)"
" fold-var_83))))"
"(values fold-var_84)))"
" fold-var_82))))"
"(for-loop_77 fold-var_81(unsafe-cdr lst_79))))"
" fold-var_78))))"
" for-loop_77)"
" null"
" lst_76))))"
"(set))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_85 common-scopes_86)"
"(let-values(((strs_87)"
"((letrec-values(((loop_88)"
"(lambda(strs_89 scopes_90)"
"(if(null? scopes_90)"
"(let-values()(alt-reverse strs_89))"
"(let-values()"
"                                          (let-values (((str_91) (format \" ~a\" (car scopes_90))))"
"(if(if(pair? strs_89)"
"(<(+(string-length str_91)(string-length(car strs_89))) 72)"
" #f)"
"(loop_88"
"(cons(string-append(car strs_89) str_91)(cdr strs_89))"
"(cdr scopes_90))"
"(loop_88(cons str_91 strs_89)(cdr scopes_90)))))))))"
" loop_88)"
" null"
"(if(set-empty? common-scopes_86)"
" scopes_85"
"(append"
"(alt-reverse"
"(let-values(((lst_92) scopes_85))"
"(begin"
"(if(list? lst_92)(void)(let-values()(in-list lst_92)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_94 lst_95)"
"(if(pair? lst_95)"
"(let-values(((s_96)(unsafe-car lst_95)))"
"(let-values(((fold-var_97)"
"(let-values(((fold-var_98) fold-var_94))"
"(if(not(set-member? common-scopes_86 s_96))"
"(let-values(((fold-var_99) fold-var_98))"
"(let-values(((fold-var_100)"
"(let-values()"
"(cons"
"(let-values() s_96)"
" fold-var_99))))"
"(values fold-var_100)))"
" fold-var_98))))"
"(for-loop_93 fold-var_97(unsafe-cdr lst_95))))"
" fold-var_94))))"
" for-loop_93)"
" null"
" lst_92))))"
"                      (list \"[common scopes]\"))))))"
"(if(null? strs_87)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_101) strs_87))"
"(begin"
"(if(list? lst_101)(void)(let-values()(in-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_103 lst_104)"
"(if(pair? lst_104)"
"(let-values(((str_105)(unsafe-car lst_104)))"
"(let-values(((fold-var_106)"
"(let-values(((fold-var_107) fold-var_103))"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"                                                                         (let-values () (string-append \"\\n  \" str_105))"
" fold-var_107))))"
"(values fold-var_108)))))"
"(for-loop_102 fold-var_106(unsafe-cdr lst_104))))"
" fold-var_103))))"
" for-loop_102)"
" null"
" lst_101))))))))))"
" (define-values (layer->string) (lambda (layer_109) (if (zero? layer_109) \"\" (format \" at layer ~a\" layer_109))))"
"(void)"
"(void)"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values(((tmp_8) sym_2))"
"(if(equal? tmp_8 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_8 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not"
"(let-values(((trigger-id1_9) trigger-id_3)((phase2_10) phase_5))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1 #f #f #f #f #f #f #f #f trigger-id1_9 phase2_10)"
"(resolve31.1 trigger-id1_9 phase2_10))))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_2"
"(let-values(((tmp_11) phase_5))"
"(if(equal? tmp_11 0)"
"                (let-values () \"\")"
"(if(equal? tmp_11 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 #f)"
"(if unbound?_7(if(not(eq?(syntax-e$1 s_1)(syntax-e$1 trigger-id_3))) s_1 #f) #f)"
" null"
"           (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) \"\")))))))"
"(void)"
"(void)"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values(((ids_8) ids5_3))"
"(let-values(((phase_9) phase6_4))"
"(let-values(((s_10) s7_5))"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
"            (let-values (((what_12) (if what2_2 what1_1 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values(((lst_17) l_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20)))"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_19))"
"(let-values(((fold-var_24)"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_14"
" phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(void)))))"
"(values fold-var_24)))))"
"(for-loop_18"
" fold-var_22"
"(unsafe-cdr lst_20))))"
" fold-var_19))))"
" for-loop_18)"
"(void)"
" lst_17)))"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(define-values"
"(unpack9.1$2)"
"(lambda(given-kws_25 given-args_26 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)"
"(let-values(((what2_32)(pair? given-kws_25)))"
"(let-values(((what1_33)(if what2_32(car given-args_26)(void))))"
"(check-no-duplicate-ids8.1 what1_33 what2_32 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)))))"
"(define-values"
"(check-no-duplicate-ids10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_34 given-argc_35)"
"(if(if(>= given-argc_35 5)(<= given-argc_35 6) #f)"
"(let-values(((l1_36) given-kws_34))"
"(let-values(((l1_37)(if(null? l1_36) l1_36(if(eq?(car l1_36) '#:what)(cdr l1_36) l1_36))))"
"(null? l1_37)))"
" #f))"
"(case-lambda"
"((given-kws_38 given-args_39 ids_40 phase_41 s_42)"
"(unpack9.1$2 given-kws_38 given-args_39 ids_40 phase_41 s_42 #f #f))"
"((given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48)"
"(unpack9.1$2 given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48 #t)))"
" null"
" '(#:what)"
"(let-values(((check-no-duplicate-ids_49)"
"(case-lambda"
"((ids_50 phase_51 s_52)(unpack9.1$2 null null ids_50 phase_51 s_52 #f #f))"
"((ids_53 phase_54 s_55 ht3_56)(unpack9.1$2 null null ids_53 phase_54 s_55 ht3_56 #t)))))"
" check-no-duplicate-ids_49)))"
"(void)"
"(void)"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(alt-reverse"
"(let-values(((lst_4) s_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(for-loop_5 fold-var_9(unsafe-cdr lst_7))))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_1))))"
"(void)"
"(void)"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-top-level-bind-scope"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 3 'self)"
"(make-struct-field-accessor -ref_4 4 'module-self)"
"(make-struct-field-accessor -ref_4 5 'full-module-name)"
"(make-struct-field-accessor -ref_4 6 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 7 'header))))"
"(define-values"
"(make-compile-context16.1)"
"(lambda(full-module-name7_56"
" full-module-name14_57"
" lazy-syntax-literals?8_58"
" lazy-syntax-literals?15_59"
" module-self6_60"
" module-self13_61"
" namespace2_62"
" namespace9_63"
" phase3_64"
" phase10_65"
" self5_66"
" self12_67"
" top-level-bind-scope4_68"
" top-level-bind-scope11_69)"
"(let-values(((namespace_70)(if namespace9_63 namespace2_62(1/current-namespace))))"
"(let-values(((phase_71)(if phase10_65 phase3_64(namespace-phase namespace_70))))"
"(let-values(((top-level-bind-scope_72)(if top-level-bind-scope11_69 top-level-bind-scope4_68 #f)))"
"(let-values(((self_73)(if self12_67 self5_66(namespace-mpi namespace_70))))"
"(let-values(((module-self_74)(if module-self13_61 module-self6_60 #f)))"
"(let-values(((full-module-name_75)(if full-module-name14_57 full-module-name7_56 #f)))"
"(let-values(((lazy-syntax-literals?_76)"
"(if lazy-syntax-literals?15_59 lazy-syntax-literals?8_58(if module-self_74 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_74(not full-module-name_75) #f)"
"                        (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_70"
" phase_71"
" top-level-bind-scope_72"
" self_73"
" module-self_74"
" full-module-name_75"
" lazy-syntax-literals?_76"
" #f))))))))))))"
"(define-values"
"(unpack17.1$2)"
"(lambda(given-kws_77 given-args_78)"
"(let-values(((full-module-name14_79)(if(pair? given-kws_77)(eq? '#:full-module-name(car given-kws_77)) #f)))"
"(let-values(((full-module-name7_80)(if full-module-name14_79(car given-args_78)(void)))"
"((given-kws_81)(if full-module-name14_79(cdr given-kws_77) given-kws_77))"
"((given-args_82)(if full-module-name14_79(cdr given-args_78) given-args_78)))"
"(let-values(((lazy-syntax-literals?15_83)"
"(if(pair? given-kws_81)(eq? '#:lazy-syntax-literals?(car given-kws_81)) #f)))"
"(let-values(((lazy-syntax-literals?8_84)(if lazy-syntax-literals?15_83(car given-args_82)(void)))"
"((given-kws_85)(if lazy-syntax-literals?15_83(cdr given-kws_81) given-kws_81))"
"((given-args_86)(if lazy-syntax-literals?15_83(cdr given-args_82) given-args_82)))"
"(let-values(((module-self13_87)(if(pair? given-kws_85)(eq? '#:module-self(car given-kws_85)) #f)))"
"(let-values(((module-self6_88)(if module-self13_87(car given-args_86)(void)))"
"((given-kws_89)(if module-self13_87(cdr given-kws_85) given-kws_85))"
"((given-args_90)(if module-self13_87(cdr given-args_86) given-args_86)))"
"(let-values(((namespace9_91)(if(pair? given-kws_89)(eq? '#:namespace(car given-kws_89)) #f)))"
"(let-values(((namespace2_92)(if namespace9_91(car given-args_90)(void)))"
"((given-kws_93)(if namespace9_91(cdr given-kws_89) given-kws_89))"
"((given-args_94)(if namespace9_91(cdr given-args_90) given-args_90)))"
"(let-values(((phase10_95)(if(pair? given-kws_93)(eq? '#:phase(car given-kws_93)) #f)))"
"(let-values(((phase3_96)(if phase10_95(car given-args_94)(void)))"
"((given-kws_97)(if phase10_95(cdr given-kws_93) given-kws_93))"
"((given-args_98)(if phase10_95(cdr given-args_94) given-args_94)))"
"(let-values(((self12_99)(if(pair? given-kws_97)(eq? '#:self(car given-kws_97)) #f)))"
"(let-values(((self5_100)(if self12_99(car given-args_98)(void)))"
"((given-kws_101)(if self12_99(cdr given-kws_97) given-kws_97))"
"((given-args_102)(if self12_99(cdr given-args_98) given-args_98)))"
"(let-values(((top-level-bind-scope11_103)(pair? given-kws_101)))"
"(let-values(((top-level-bind-scope4_104)"
"(if top-level-bind-scope11_103(car given-args_102)(void))))"
"(make-compile-context16.1"
" full-module-name7_80"
" full-module-name14_79"
" lazy-syntax-literals?8_84"
" lazy-syntax-literals?15_83"
" module-self6_88"
" module-self13_87"
" namespace2_92"
" namespace9_91"
" phase3_96"
" phase10_95"
" self5_100"
" self12_99"
" top-level-bind-scope4_104"
" top-level-bind-scope11_103)))))))))))))))))"
"(define-values"
"(make-compile-context18.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_105 given-argc_106)"
"(if(= given-argc_106 2)"
"(let-values(((l1_107) given-kws_105))"
"(let-values(((l1_108)"
"(if(null? l1_107) l1_107(if(eq?(car l1_107) '#:full-module-name)(cdr l1_107) l1_107))))"
"(let-values(((l1_109) l1_108))"
"(let-values(((l1_110)"
"(if(null? l1_109)"
" l1_109"
"(if(eq?(car l1_109) '#:lazy-syntax-literals?)(cdr l1_109) l1_109))))"
"(let-values(((l1_111) l1_110))"
"(let-values(((l1_112)"
"(if(null? l1_111) l1_111(if(eq?(car l1_111) '#:module-self)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)"
"(if(null? l1_113) l1_113(if(eq?(car l1_113) '#:namespace)(cdr l1_113) l1_113))))"
"(let-values(((l1_115) l1_114))"
"(let-values(((l1_116)"
"(if(null? l1_115) l1_115(if(eq?(car l1_115) '#:phase)(cdr l1_115) l1_115))))"
"(let-values(((l1_117) l1_116))"
"(let-values(((l1_118)"
"(if(null? l1_117)"
" l1_117"
"(if(eq?(car l1_117) '#:self)(cdr l1_117) l1_117))))"
"(let-values(((l1_119) l1_118))"
"(let-values(((l1_120)"
"(if(null? l1_119)"
" l1_119"
"(if(eq?(car l1_119) '#:top-level-bind-scope)(cdr l1_119) l1_119))))"
"(null? l1_120)))))))))))))))"
" #f))"
"(case-lambda((given-kws_121 given-args_122)(unpack17.1$2 given-kws_121 given-args_122)))"
" null"
" '(#:full-module-name #:lazy-syntax-literals? #:module-self #:namespace #:phase #:self #:top-level-bind-scope)"
"(let-values(((make-compile-context_123)(case-lambda(()(unpack17.1$2 null null))))) make-compile-context_123)))"
"(void)"
"(void)"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'normal)"
"(make-struct-field-accessor -ref_4 1 'fast))))"
"(define-values(make-module-path-index-intern-table)(lambda()(mpi-intern-table1.1(make-hash)(make-hasheq))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_26 mpi_27)"
"(let-values(((or-part_28)(hash-ref(mpi-intern-table-fast t_26) mpi_27 #f)))"
"(if or-part_28"
" or-part_28"
"(let-values(((name_29 base_30)(1/module-path-index-split mpi_27)))"
"(if(not name_29)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 mpi_27) mpi_27))"
"(let-values()"
"(let-values(((interned-base_31)(if base_30(intern-module-path-index! t_26 base_30) #f)))"
"(let-values(((at-name_32)"
"(let-values(((or-part_34)(hash-ref(mpi-intern-table-normal t_26) name_29 #f)))"
"(if or-part_34"
" or-part_34"
"(let-values(((at-name_35)(make-hasheq)))"
"(begin"
"(hash-set!(mpi-intern-table-normal t_26) name_29 at-name_35)"
" at-name_35))))))"
"(let-values(((i-mpi_33)"
"(let-values(((or-part_36)(hash-ref at-name_32 interned-base_31 #f)))"
"(if or-part_36"
" or-part_36"
"(let-values(((mpi_37)"
"(if(eq? base_30 interned-base_31)"
" mpi_27"
"(let-values(((the-struct_38) mpi_27))"
"(if(1/module-path-index? the-struct_38)"
"(let-values(((base3_39) interned-base_31))"
"(module-path-index2.1"
"(module-path-index-path the-struct_38)"
" base3_39"
"(module-path-index-resolved the-struct_38)"
"(module-path-index-shift-cache the-struct_38)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"module-path-index?\""
" the-struct_38))))))"
"(begin(hash-set! at-name_32 interned-base_31 mpi_37) mpi_37))))))"
"(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 i-mpi_33) i-mpi_33)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'positions)"
"(make-struct-field-accessor -ref_4 1 'intern))))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_26 mpi_27)"
"(let-values(((pos_28)(add-module-path-index!/pos mpis_26 mpi_27)))"
"(if pos_28(list 'vector-ref mpi-vector-id pos_28) #f))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_29 mpi_30)"
"(if(not mpi_30)"
"(let-values() #f)"
"(if mpi_30"
"(let-values()"
"(let-values(((mpi_31)(intern-module-path-index!(module-path-index-table-intern mpis_29) mpi_30))"
"((positions_32)(module-path-index-table-positions mpis_29)))"
"(let-values(((or-part_33)(hash-ref positions_32 mpi_31 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((pos_34)(hash-count positions_32)))"
"(begin(hash-set! positions_32 mpi_31 pos_34) pos_34))))))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_35)"
"(let-values(((positions_36)(module-path-index-table-positions mpis_35)))"
"(let-values(((gen-order_37)(make-hasheqv)))"
"(let-values(((rev-positions_38)"
"(let-values(((ht_41) positions_36))"
"(begin"
"(if((lambda(ht_42)(hash? ht_42)) ht_41)(void)(let-values()(default-in-hash ht_41)))"
"((letrec-values(((for-loop_43)"
"(lambda(table_44 i_45)"
"(if i_45"
"(let-values(((k_46 v_47)(hash-iterate-key+value ht_41 i_45)))"
"(let-values(((table_48)"
"(let-values(((table_49) table_44))"
"(let-values(((table_50)"
"(let-values()"
"(let-values(((key_51 val_52)"
"(let-values()"
"(values v_47 k_46))))"
"(hash-set"
" table_49"
" key_51"
" val_52)))))"
"(values table_50)))))"
"(for-loop_43 table_48(hash-iterate-next ht_41 i_45))))"
" table_44))))"
" for-loop_43)"
" '#hasheqv()"
"(hash-iterate-first ht_41))))))"
"(let-values((()"
"(begin"
"(let-values(((start_53) 0)((end_54)(hash-count rev-positions_38))((inc_55) 1))"
"(begin"
"(if(if(real? start_53)(if(real? end_54)(real? inc_55) #f) #f)"
"(void)"
"(let-values()(in-range start_53 end_54 inc_55)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57 pos_58)"
"(if(< pos_58 end_54)"
"(let-values(((i_59) pos_58))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_57))"
"(let-values(((fold-var_62)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_63)"
"(hash-ref"
" rev-positions_38"
" i_59)))"
"((letrec-values(((loop_64)"
"(lambda(mpi_65)"
"(if(hash-ref"
" gen-order_37"
" mpi_65"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_66"
" base_67)"
"(1/module-path-index-split"
" mpi_65)))"
"(begin"
"(if base_67"
"(let-values()"
"(loop_64"
" base_67))"
"(void))"
"(hash-set!"
" gen-order_37"
" mpi_65"
"(hash-count"
" gen-order_37)))))))))"
" loop_64)"
" mpi_63)))"
"(void)))))"
"(values fold-var_62)))))"
"(for-loop_56 fold-var_60(+ pos_58 inc_55))))"
" fold-var_57))))"
" for-loop_56)"
"(void)"
" start_53)))"
"(values))))"
"(let-values(((rev-gen-order_39)"
"(let-values(((ht_68) gen-order_37))"
"(begin"
"(if((lambda(ht_69)(hash? ht_69)) ht_68)(void)(let-values()(default-in-hash ht_68)))"
"((letrec-values(((for-loop_70)"
"(lambda(table_71 i_72)"
"(if i_72"
"(let-values(((k_73 v_74)(hash-iterate-key+value ht_68 i_72)))"
"(let-values(((table_75)"
"(let-values(((table_76) table_71))"
"(let-values(((table_77)"
"(let-values()"
"(let-values(((key_78 val_79)"
"(let-values()"
"(values"
" v_74"
" k_73))))"
"(hash-set"
" table_76"
" key_78"
" val_79)))))"
"(values table_77)))))"
"(for-loop_70 table_75(hash-iterate-next ht_68 i_72))))"
" table_71))))"
" for-loop_70)"
" '#hasheqv()"
"(hash-iterate-first ht_68))))))"
"(let-values(((gens_40)"
"(let-values(((len_80)(hash-count gen-order_37)))"
"(begin"
"(if(exact-nonnegative-integer? len_80)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_80)))"
"(let-values(((v_81)(make-vector len_80 0)))"
"(begin"
"(if(zero? len_80)"
"(void)"
"(let-values()"
"(let-values(((start_82) 0)((end_83)(hash-count gen-order_37))((inc_84) 1))"
"(begin"
"(if(if(real? start_82)(if(real? end_83)(real? inc_84) #f) #f)"
"(void)"
"(let-values()(in-range start_82 end_83 inc_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(i_86 pos_87)"
"(if(< pos_87 end_83)"
"(let-values(((i_88) pos_87))"
"(let-values(((i_89)"
"(let-values(((i_90) i_86))"
"(let-values(((i_91)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_81"
" i_90"
"(let-values()"
"(let-values(((mpi_92)"
"(hash-ref"
" rev-gen-order_39"
" i_88)))"
"(let-values(((path_93"
" base_94)"
"(1/module-path-index-split"
" mpi_92)))"
"(if(top-level-module-path-index?"
" mpi_92)"
"(let-values()"
" 'top)"
"(if(not"
" path_93)"
"(let-values()"
"(box"
"(let-values(((or-part_95)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_92))))"
"(if or-part_95"
" or-part_95"
" 'self))))"
"(if(not"
" base_94)"
"(let-values()"
"(vector"
" path_93))"
"(if base_94"
"(let-values()"
"(vector"
" path_93"
"(hash-ref"
" gen-order_37"
" base_94)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_90)))))"
"(values i_91)))))"
"(if(not"
"((lambda x_96(unsafe-fx= i_89 len_80))"
" i_88))"
"(for-loop_85 i_89(+ pos_87 inc_84))"
" i_89)))"
" i_86))))"
" for-loop_85)"
" 0"
" start_82)))))"
" v_81))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_40)"
"(list"
" 'quote"
"(let-values(((vec_97 i_98)"
"(let-values(((start_99) 0)((end_100)(hash-count rev-positions_38))((inc_101) 1))"
"(begin"
"(if(if(real? start_99)(if(real? end_100)(real? inc_101) #f) #f)"
"(void)"
"(let-values()(in-range start_99 end_100 inc_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(vec_103 i_104 pos_105)"
"(if(< pos_105 end_100)"
"(let-values(((i_106) pos_105))"
"(let-values(((vec_107 i_108)"
"(let-values(((vec_109) vec_103)"
"((i_110) i_104))"
"(let-values(((vec_111 i_112)"
"(let-values()"
"(let-values(((new-vec_113)"
"(if(eq?"
" i_110"
"(unsafe-vector*-length"
" vec_109))"
"(grow-vector"
" vec_109)"
" vec_109)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_113"
" i_110"
"(let-values()"
"(hash-ref"
" gen-order_37"
"(hash-ref"
" rev-positions_38"
" i_106))))"
"(values"
" new-vec_113"
"(unsafe-fx+"
" i_110"
" 1)))))))"
"(values vec_111 i_112)))))"
"(for-loop_102 vec_107 i_108(+ pos_105 inc_101))))"
"(values vec_103 i_104)))))"
" for-loop_102)"
"(make-vector 16)"
" 0"
" start_99)))))"
"(shrink-vector vec_97 i_98))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_114 order-vec_115)"
"(let-values(((gen_116)(make-vector(vector-length gen-vec_114) #f)))"
"(begin"
"(let-values(((vec_117 len_118)"
"(let-values(((vec_120) gen-vec_114))"
"(begin"
"(if(vector? vec_120)(void)(let-values()(in-vector vec_120)))"
"(values vec_120(unsafe-vector-length vec_120)))))"
"((start_119) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_119)(void)(let-values()(in-naturals start_119)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_122 pos_123 pos_124)"
"(if(if(unsafe-fx< pos_123 len_118) #t #f)"
"(let-values(((d_125)(unsafe-vector-ref vec_117 pos_123))((i_126) pos_124))"
"(let-values(((fold-var_127)"
"(let-values(((fold-var_128) fold-var_122))"
"(let-values(((fold-var_129)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_116"
" i_126"
"(if(eq? d_125 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_125)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_125)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector-ref d_125 0)"
"(if(>(vector-length d_125) 1)"
"(vector-ref"
" gen_116"
"(vector-ref d_125 1))"
" #f)))))))"
"(void)))))"
"(values fold-var_129)))))"
"(for-loop_121 fold-var_127(unsafe-fx+ 1 pos_123)(+ pos_124 1))))"
" fold-var_122))))"
" for-loop_121)"
"(void)"
" 0"
" start_119)))"
"(let-values(((len_130)(vector-length order-vec_115)))"
"(begin"
"(if(exact-nonnegative-integer? len_130)"
"(void)"
"              (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_130)))"
"(let-values(((v_131)(make-vector len_130 0)))"
"(begin"
"(if(zero? len_130)"
"(void)"
"(let-values()"
"(let-values(((vec_132 len_133)"
"(let-values(((vec_134) order-vec_115))"
"(begin"
"(if(vector? vec_134)(void)(let-values()(in-vector vec_134)))"
"(values vec_134(unsafe-vector-length vec_134))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_135)"
"(lambda(i_136 pos_137)"
"(if(unsafe-fx< pos_137 len_133)"
"(let-values(((p_138)(unsafe-vector-ref vec_132 pos_137)))"
"(let-values(((i_139)"
"(let-values(((i_140) i_136))"
"(let-values(((i_141)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_131"
" i_140"
"(let-values()"
"(vector-ref gen_116 p_138)))"
"(unsafe-fx+ 1 i_140)))))"
"(values i_141)))))"
"(if(not((lambda x_142(unsafe-fx= i_139 len_130)) p_138))"
"(for-loop_135 i_139(unsafe-fx+ 1 pos_137))"
" i_139)))"
" i_136))))"
" for-loop_135)"
" 0"
" 0)))))"
" v_131))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_143)"
"(let-values(((positions_144)(module-path-index-table-positions mpis_143)))"
"(let-values(((vec_145)(make-vector(hash-count positions_144) #f)))"
"(begin"
"(let-values(((ht_146) positions_144))"
"(begin"
"(if((lambda(ht_147)(hash? ht_147)) ht_146)(void)(let-values()(default-in-hash ht_146)))"
"((letrec-values(((for-loop_148)"
"(lambda(fold-var_149 i_150)"
"(if i_150"
"(let-values(((mpi_151 pos_152)(hash-iterate-key+value ht_146 i_150)))"
"(let-values(((fold-var_153)"
"(let-values(((fold-var_154) fold-var_149))"
"(let-values(((fold-var_155)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_145 pos_152 mpi_151))"
"(void)))))"
"(values fold-var_155)))))"
"(for-loop_148 fold-var_153(hash-iterate-next ht_146 i_150))))"
" fold-var_149))))"
" for-loop_148)"
"(void)"
"(hash-iterate-first ht_146))))"
" vec_145)))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_166 mpis_167)"
"(alt-reverse"
"(let-values(((lst_168) mus_166))"
"(begin"
"(if(list? lst_168)(void)(let-values()(in-list lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(fold-var_170 lst_171)"
"(if(pair? lst_171)"
"(let-values(((mu_172)(unsafe-car lst_171)))"
"(let-values(((fold-var_173)"
"(let-values(((fold-var_174) fold-var_170))"
"(let-values(((fold-var_175)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_167"
"(module-use-module mu_172))"
"(module-use-phase mu_172)))"
" fold-var_174))))"
"(values fold-var_175)))))"
"(for-loop_169 fold-var_173(unsafe-cdr lst_171))))"
" fold-var_170))))"
" for-loop_169)"
" null"
" lst_168))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_176)"
"(let-values(((or-part_177)(null? v_176)))"
"(if or-part_177"
" or-part_177"
"(let-values(((or-part_178)(boolean? v_176)))"
"(if or-part_178"
" or-part_178"
"(let-values(((or-part_179)"
"(if(fixnum? v_176)(if(< v_176(sub1(expt 2 30)))(> v_176(-(expt 2 30))) #f) #f)))"
"(if or-part_179"
" or-part_179"
"(let-values(((or-part_180)(symbol? v_176)))"
"(if or-part_180"
" or-part_180"
"(let-values(((or-part_181)(char? v_176)))(if or-part_181 or-part_181(keyword? v_176)))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_182 mpis_183)"
"(let-values(((phases-in-order_184)"
"(let-values(((temp10_185)(hash-keys phase-to-link-module-uses_182))((<11_186) <))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp10_185 <11_186)"
"(sort9.1 temp10_185 <11_186)))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_187) phases-in-order_184))"
"(begin"
"(if(list? lst_187)(void)(let-values()(in-list lst_187)))"
"((letrec-values(((for-loop_188)"
"(lambda(fold-var_189 lst_190)"
"(if(pair? lst_190)"
"(let-values(((phase_191)(unsafe-car lst_190)))"
"(let-values(((fold-var_192)"
"(let-values(((fold-var_193) fold-var_189))"
"(let-values(((fold-var_194)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_191"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_182"
" phase_191)"
" mpis_183))))"
" fold-var_193))))"
"(values fold-var_194)))))"
"(for-loop_188 fold-var_192(unsafe-cdr lst_190))))"
" fold-var_189))))"
" for-loop_188)"
" null"
" lst_187)))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_195 syntax-support?3_196 v4_197 mpis5_198)"
"(let-values(((v_199) v4_197))"
"(let-values(((mpis_200) mpis5_198))"
"(let-values(((syntax-support?_201)(if syntax-support?3_196 syntax-support?2_195 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_202)(find-reachable-scopes v_199)))"
"(let-values(((state_203)(make-serialize-state reachable-scopes_202)))"
"(let-values(((mutables_204)(make-hasheq)))"
"(let-values(((objs_205)(make-hasheq)))"
"(let-values(((shares_206)(make-hasheq)))"
"(let-values(((obj-step_207) 0))"
"(let-values(((frontier_208) null))"
"(letrec-values(((add-frontier!_209)"
"(case-lambda"
"((v_228)(set! frontier_208(cons v_228 frontier_208)))"
"((kind_229 v_230)(add-frontier!_209 v_230)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_231)"
"(lambda(v_232)"
"(begin"
"((letrec-values(((loop_233)"
"(lambda(v_234)"
"(if(let-values(((or-part_235)"
"(interned-literal?"
" v_234)))"
"(if or-part_235"
" or-part_235"
"(1/module-path-index?"
" v_234)))"
"(let-values()(void))"
"(if(hash-ref objs_205 v_234 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_204"
" v_234"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_206"
" v_234"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_234)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"((serialize-fill!-ref"
" v_234)"
" v_234"
" add-frontier!_209"
" state_203)))"
"(if(serialize? v_234)"
"(let-values()"
"((serialize-ref"
" v_234)"
" v_234"
"(case-lambda"
"((v_236)"
"(loop_233 v_236))"
"((kind_237 v_238)"
"(loop_233"
" v_238)))"
" state_203))"
"(if(pair? v_234)"
"(let-values()"
"(begin"
"(loop_233"
"(car v_234))"
"(loop_233"
"(cdr v_234))))"
"(if(vector? v_234)"
"(let-values()"
"(if(let-values(((or-part_239)"
"(immutable?"
" v_234)))"
"(if or-part_239"
" or-part_239"
"(zero?"
"(vector-length"
" v_234))))"
"(let-values(((vec_240"
" len_241)"
"(let-values(((vec_242)"
" v_234))"
"(begin"
"(if(vector?"
" vec_242)"
"(void)"
"(let-values()"
"(in-vector"
" vec_242)))"
"(values"
" vec_242"
"(unsafe-vector-length"
" vec_242))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_243)"
"(lambda(fold-var_244"
" pos_245)"
"(if(unsafe-fx<"
" pos_245"
" len_241)"
"(let-values(((e_246)"
"(unsafe-vector-ref"
" vec_240"
" pos_245)))"
"(let-values(((fold-var_247)"
"(let-values(((fold-var_248)"
" fold-var_244))"
"(let-values(((fold-var_249)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_246))"
"(void)))))"
"(values"
" fold-var_249)))))"
"(for-loop_243"
" fold-var_247"
"(unsafe-fx+"
" 1"
" pos_245))))"
" fold-var_244))))"
" for-loop_243)"
"(void)"
" 0)))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(let-values(((vec_250"
" len_251)"
"(let-values(((vec_252)"
" v_234))"
"(begin"
"(if(vector?"
" vec_252)"
"(void)"
"(let-values()"
"(in-vector"
" vec_252)))"
"(values"
" vec_252"
"(unsafe-vector-length"
" vec_252))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_253)"
"(lambda(fold-var_254"
" pos_255)"
"(if(unsafe-fx<"
" pos_255"
" len_251)"
"(let-values(((e_256)"
"(unsafe-vector-ref"
" vec_250"
" pos_255)))"
"(let-values(((fold-var_257)"
"(let-values(((fold-var_258)"
" fold-var_254))"
"(let-values(((fold-var_259)"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_209"
" e_256))"
"(void)))))"
"(values"
" fold-var_259)))))"
"(for-loop_253"
" fold-var_257"
"(unsafe-fx+"
" 1"
" pos_255))))"
" fold-var_254))))"
" for-loop_253)"
"(void)"
" 0))))))"
"(if(box? v_234)"
"(let-values()"
"(if(immutable?"
" v_234)"
"(loop_233"
"(unbox"
" v_234))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(add-frontier!_209"
"(unbox"
" v_234)))))"
"(if(hash?"
" v_234)"
"(let-values()"
"(if(immutable?"
" v_234)"
"(let-values(((lst_260)"
"(sorted-hash-keys"
" v_234)))"
"(begin"
"(if(list?"
" lst_260)"
"(void)"
"(let-values()"
"(in-list"
" lst_260)))"
"((letrec-values(((for-loop_261)"
"(lambda(fold-var_262"
" lst_263)"
"(if(pair?"
" lst_263)"
"(let-values(((k_264)"
"(unsafe-car"
" lst_263)))"
"(let-values(((fold-var_265)"
"(let-values(((fold-var_266)"
" fold-var_262))"
"(let-values(((fold-var_267)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_233"
" k_264)"
"(loop_233"
"(hash-ref"
" v_234"
" k_264))))"
"(void)))))"
"(values"
" fold-var_267)))))"
"(for-loop_261"
" fold-var_265"
"(unsafe-cdr"
" lst_263))))"
" fold-var_262))))"
" for-loop_261)"
"(void)"
" lst_260)))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(let-values(((lst_268)"
"(sorted-hash-keys"
" v_234)))"
"(begin"
"(if(list?"
" lst_268)"
"(void)"
"(let-values()"
"(in-list"
" lst_268)))"
"((letrec-values(((for-loop_269)"
"(lambda(fold-var_270"
" lst_271)"
"(if(pair?"
" lst_271)"
"(let-values(((k_272)"
"(unsafe-car"
" lst_271)))"
"(let-values(((fold-var_273)"
"(let-values(((fold-var_274)"
" fold-var_270))"
"(let-values(((fold-var_275)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_209"
" k_272)"
"(add-frontier!_209"
"(hash-ref"
" v_234"
" k_272))))"
"(void)))))"
"(values"
" fold-var_275)))))"
"(for-loop_269"
" fold-var_273"
"(unsafe-cdr"
" lst_271))))"
" fold-var_270))))"
" for-loop_269)"
"(void)"
" lst_268))))))"
"(if(prefab-struct-key"
" v_234)"
"(let-values()"
"(let-values(((v*_276"
" start*_277"
" stop*_278"
" step*_279)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                             \"vector\""
"(lambda(x_280)"
"(vector?"
" x_280))"
"(lambda(x_281)"
"(unsafe-vector-length"
" x_281))"
"(struct->vector"
" v_234)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_282)"
"(lambda(fold-var_283"
" idx_284)"
"(if(unsafe-fx<"
" idx_284"
" stop*_278)"
"(let-values(((e_285)"
"(unsafe-vector-ref"
" v*_276"
" idx_284)))"
"(let-values(((fold-var_286)"
"(let-values(((fold-var_287)"
" fold-var_283))"
"(let-values(((fold-var_288)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_285))"
"(void)))))"
"(values"
" fold-var_288)))))"
"(for-loop_282"
" fold-var_286"
"(unsafe-fx+"
" idx_284"
" 1))))"
" fold-var_283))))"
" for-loop_282)"
"(void)"
" start*_277))))"
"(if(srcloc?"
" v_234)"
"(let-values()"
"(let-values(((v*_289"
" start*_290"
" stop*_291"
" step*_292)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_293)"
"(vector?"
" x_293))"
"(lambda(x_294)"
"(unsafe-vector-length"
" x_294))"
"(struct->vector"
" v_234)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_295)"
"(lambda(fold-var_296"
" idx_297)"
"(if(unsafe-fx<"
" idx_297"
" stop*_291)"
"(let-values(((e_298)"
"(unsafe-vector-ref"
" v*_289"
" idx_297)))"
"(let-values(((fold-var_299)"
"(let-values(((fold-var_300)"
" fold-var_296))"
"(let-values(((fold-var_301)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_298))"
"(void)))))"
"(values"
" fold-var_301)))))"
"(for-loop_295"
" fold-var_299"
"(unsafe-fx+"
" idx_297"
" 1))))"
" fold-var_296))))"
" for-loop_295)"
"(void)"
" start*_290))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_205"
" v_234"
" obj-step_207)"
"(set! obj-step_207"
"(add1"
" obj-step_207)))))))))"
" loop_233)"
" v_232)"
"(if(null? frontier_208)"
"(void)"
"(let-values()"
"(let-values(((l_302) frontier_208))"
"(begin"
"(set! frontier_208 null)"
"(let-values(((lst_303) l_302))"
"(begin"
"(if(list? lst_303)"
"(void)"
"(let-values()(in-list lst_303)))"
"((letrec-values(((for-loop_304)"
"(lambda(fold-var_305"
" lst_306)"
"(if(pair? lst_306)"
"(let-values(((v_307)"
"(unsafe-car"
" lst_306)))"
"(let-values(((fold-var_308)"
"(let-values(((fold-var_309)"
" fold-var_305))"
"(let-values(((fold-var_310)"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_231"
" v_307))"
"(void)))))"
"(values"
" fold-var_310)))))"
"(for-loop_304"
" fold-var_308"
"(unsafe-cdr"
" lst_306))))"
" fold-var_305))))"
" for-loop_304)"
"(void)"
" lst_303)))))))))))"
" frontier-loop_231)"
" v_199)"
"(values))))"
"(let-values(((num-mutables_210)(hash-count mutables_204)))"
"(let-values(((share-step-positions_211)"
"(let-values(((share-steps_311)"
"(alt-reverse"
"(let-values(((ht_312) shares_206))"
"(begin"
"(if((lambda(ht_313)(hash? ht_313)) ht_312)"
"(void)"
"(let-values()(default-in-hash-keys ht_312)))"
"((letrec-values(((for-loop_314)"
"(lambda(fold-var_315 i_316)"
"(if i_316"
"(let-values(((obj_317)"
"(hash-iterate-key"
" ht_312"
" i_316)))"
"(let-values(((fold-var_318)"
"(let-values(((fold-var_319)"
" fold-var_315))"
"(let-values(((fold-var_320)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_205"
" obj_317))"
" fold-var_319))))"
"(values"
" fold-var_320)))))"
"(for-loop_314"
" fold-var_318"
"(hash-iterate-next"
" ht_312"
" i_316))))"
" fold-var_315))))"
" for-loop_314)"
" null"
"(hash-iterate-first ht_312)))))))"
"(let-values(((lst_321)"
"(let-values(((share-steps12_323) share-steps_311)"
"((<13_324) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f share-steps12_323 <13_324)"
"(sort9.1 share-steps12_323 <13_324))))"
"((start_322) num-mutables_210))"
"(begin"
"(if(list? lst_321)(void)(let-values()(in-list lst_321)))"
"(if(exact-nonnegative-integer? start_322)"
"(void)"
"(let-values()(in-naturals start_322)))"
"((letrec-values(((for-loop_325)"
"(lambda(table_326 lst_327 pos_328)"
"(if(if(pair? lst_327) #t #f)"
"(let-values(((step_329)(unsafe-car lst_327))"
"((pos_330) pos_328))"
"(let-values(((table_331)"
"(let-values(((table_332)"
" table_326))"
"(let-values(((table_333)"
"(let-values()"
"(let-values(((key_334"
" val_335)"
"(let-values()"
"(values"
" step_329"
" pos_330))))"
"(hash-set"
" table_332"
" key_334"
" val_335)))))"
"(values table_333)))))"
"(for-loop_325"
" table_331"
"(unsafe-cdr lst_327)"
"(+ pos_328 1))))"
" table_326))))"
" for-loop_325)"
" '#hasheqv()"
" lst_321"
" start_322))))))"
"(let-values(((stream_212) null))"
"(let-values(((stream-size_213) 0))"
"(let-values(((next-push-position_214)(lambda() stream-size_213)))"
"(let-values(((quoted?_215)"
"(lambda(pos_336)"
"(let-values(((v_337)"
"(list-ref"
" stream_212"
"(- stream-size_213(add1 pos_336)))))"
"(let-values(((or-part_338)(not(keyword? v_337))))"
"(if or-part_338 or-part_338(eq? '#:quote v_337)))))))"
"(let-values(((ser-reset!_216)"
"(lambda(pos_339)"
"(begin"
"(set! stream_212"
"(list-tail stream_212(- stream-size_213 pos_339)))"
"(set! stream-size_213 pos_339)))))"
"(let-values(((reap-stream!_217)"
"(lambda()"
"(begin0"
"(list->vector(alt-reverse stream_212))"
"(set! stream_212 null)"
"(set! stream-size_213 0)))))"
"(letrec-values(((ser-push!_218)"
"(case-lambda"
"((v_340)"
"(if(hash-ref shares_206 v_340 #f)"
"(let-values()"
"(let-values(((n_341)"
"(hash-ref"
" share-step-positions_211"
"(hash-ref objs_205 v_340))))"
"(begin"
"(ser-push!_218 'tag '#:ref)"
"(ser-push!_218 'exact n_341))))"
"(let-values(((c55202_342)"
"(hash-ref mutables_204 v_340 #f)))"
"(if c55202_342"
"((lambda(n_343)"
"(begin"
"(ser-push!_218 'tag '#:ref)"
"(ser-push!_218 'exact n_343)))"
" c55202_342)"
"(let-values()(ser-push-encoded!_219 v_340))))))"
"((kind_344 v_345)"
"(let-values(((tmp_346) kind_344))"
"(if(equal? tmp_346 'exact)"
"(let-values()"
"(begin"
"(set! stream_212(cons v_345 stream_212))"
"(set! stream-size_213(add1 stream-size_213))))"
"(if(equal? tmp_346 'tag)"
"(let-values()(ser-push!_218 'exact v_345))"
"(if(equal? tmp_346 'reference)"
"(let-values()"
"(if(hash-ref shares_206 v_345 #f)"
"(let-values()"
"(let-values(((n_347)"
"(hash-ref"
" share-step-positions_211"
"(hash-ref"
" objs_205"
" v_345))))"
"(ser-push!_218 'exact n_347)))"
"(let-values(((c55208_348)"
"(hash-ref"
" mutables_204"
" v_345"
" #f)))"
"(if c55208_348"
"((lambda(n_349)"
"(ser-push!_218 'exact n_349))"
" c55208_348)"
"(let-values()"
"(ser-push!_218 v_345))))))"
"(let-values()(ser-push!_218 v_345)))))))))"
"((ser-push-encoded!_219)"
"(lambda(v_350)"
"(if(keyword? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:quote)"
"(ser-push!_218 'exact v_350)))"
"(if(1/module-path-index? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:mpi)"
"(ser-push!_218"
" 'exact"
"(add-module-path-index!/pos mpis_200 v_350))))"
"(if(serialize? v_350)"
"(let-values()"
"((serialize-ref v_350)"
" v_350"
" ser-push!_218"
" state_203))"
"(if(if(list? v_350)"
"(if(pair? v_350)(pair?(cdr v_350)) #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_351)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(length v_350))"
"(values))))"
"(let-values(((all-quoted?_352)"
"(let-values(((lst_353)"
" v_350))"
"(begin"
"(if(list? lst_353)"
"(void)"
"(let-values()"
"(in-list"
" lst_353)))"
"((letrec-values(((for-loop_354)"
"(lambda(all-quoted?_355"
" lst_356)"
"(if(pair?"
" lst_356)"
"(let-values(((i_357)"
"(unsafe-car"
" lst_356)))"
"(let-values(((all-quoted?_358)"
"(let-values(((all-quoted?_359)"
" all-quoted?_355))"
"(let-values(((all-quoted?_360)"
"(let-values()"
"(let-values(((i-pos_361)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_357)"
"(if all-quoted?_359"
"(quoted?_215"
" i-pos_361)"
" #f))))))"
"(values"
" all-quoted?_360)))))"
"(for-loop_354"
" all-quoted?_358"
"(unsafe-cdr"
" lst_356))))"
" all-quoted?_355))))"
" for-loop_354)"
" #t"
" lst_353)))))"
"(if all-quoted?_352"
"(let-values()"
"(begin"
"(ser-reset!_216 start-pos_351)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218 'exact v_350)))"
"(void)))))))"
"(if(pair? v_350)"
"(let-values()"
"(let-values(((start-pos_362)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_363)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
"(car v_350))"
"(values))))"
"(let-values(((d-pos_364)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218(cdr v_350))"
"(if(if(quoted?_215 a-pos_363)"
"(quoted?_215 d-pos_364)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_362)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
"(if(box? v_350)"
"(let-values()"
"(let-values(((start-pos_365)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_366)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218(unbox v_350))"
"(if(quoted?_215 v-pos_366)"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_365)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))"
"(if(vector? v_350)"
"(let-values()"
"(let-values(((start-pos_367)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(vector-length"
" v_350))"
"(values))))"
"(let-values(((all-quoted?_368)"
"(let-values(((vec_369"
" len_370)"
"(let-values(((vec_371)"
" v_350))"
"(begin"
"(if(vector?"
" vec_371)"
"(void)"
"(let-values()"
"(in-vector"
" vec_371)))"
"(values"
" vec_371"
"(unsafe-vector-length"
" vec_371))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_372)"
"(lambda(all-quoted?_373"
" pos_374)"
"(if(unsafe-fx<"
" pos_374"
" len_370)"
"(let-values(((i_375)"
"(unsafe-vector-ref"
" vec_369"
" pos_374)))"
"(let-values(((all-quoted?_376)"
"(let-values(((all-quoted?_377)"
" all-quoted?_373))"
"(let-values(((all-quoted?_378)"
"(let-values()"
"(let-values(((i-pos_379)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_375)"
"(if all-quoted?_377"
"(quoted?_215"
" i-pos_379)"
" #f))))))"
"(values"
" all-quoted?_378)))))"
"(for-loop_372"
" all-quoted?_376"
"(unsafe-fx+"
" 1"
" pos_374))))"
" all-quoted?_373))))"
" for-loop_372)"
" #t"
" 0)))))"
"(if all-quoted?_368"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_367)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))"
"(if(hash? v_350)"
"(let-values()"
"(let-values(((start-pos_380)"
"(next-push-position_214)))"
"(let-values(((as-set?_381)"
"(let-values(((ht_384)"
" v_350))"
"(begin"
"(if((lambda(ht_385)"
"(hash?"
" ht_385))"
" ht_384)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_384)))"
"((letrec-values(((for-loop_386)"
"(lambda(result_387"
" i_388)"
"(if i_388"
"(let-values(((val_389)"
"(hash-iterate-value"
" ht_384"
" i_388)))"
"(let-values(((result_390)"
"(let-values(((result_391)"
" result_387))"
"(let-values(((result_392)"
"(let-values()"
"(let-values()"
"(eq?"
" val_389"
" #t)))))"
"(values"
" result_392)))))"
"(if(not"
"((lambda x_393"
"(not"
" result_390))"
" val_389))"
"(for-loop_386"
" result_390"
"(hash-iterate-next"
" ht_384"
" i_388))"
" result_390)))"
" result_387))))"
" for-loop_386)"
" #t"
"(hash-iterate-first"
" ht_384))))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
"(if as-set?_381"
"(if(hash-eq?"
" v_350)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_350)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_350)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_350)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(hash-count"
" v_350))"
"(values))))"
"(let-values(((ks_382)"
"(sorted-hash-keys"
" v_350)))"
"(let-values(((all-quoted?_383)"
"(let-values(((lst_394)"
" ks_382))"
"(begin"
"(if(list?"
" lst_394)"
"(void)"
"(let-values()"
"(in-list"
" lst_394)))"
"((letrec-values(((for-loop_395)"
"(lambda(all-quoted?_396"
" lst_397)"
"(if(pair?"
" lst_397)"
"(let-values(((k_398)"
"(unsafe-car"
" lst_397)))"
"(let-values(((all-quoted?_399)"
"(let-values(((all-quoted?_400)"
" all-quoted?_396))"
"(let-values(((all-quoted?_401)"
"(let-values()"
"(let-values(((k-pos_402)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" k_398)"
"(values))))"
"(let-values(((v-pos_403)"
"(next-push-position_214)))"
"(begin"
"(if as-set?_381"
"(void)"
"(let-values()"
"(ser-push!_218"
"(hash-ref"
" v_350"
" k_398))))"
"(if all-quoted?_400"
"(if(quoted?_215"
" k-pos_402)"
"(let-values(((or-part_404)"
" as-set?_381))"
"(if or-part_404"
" or-part_404"
"(quoted?_215"
" v-pos_403)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_401)))))"
"(for-loop_395"
" all-quoted?_399"
"(unsafe-cdr"
" lst_397))))"
" all-quoted?_396))))"
" for-loop_395)"
" #t"
" lst_394)))))"
"(if all-quoted?_383"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_380)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
"(let-values(((c55213_405)"
"(prefab-struct-key"
" v_350)))"
"(if c55213_405"
"((lambda(k_406)"
"(let-values(((vec_407)"
"(struct->vector"
" v_350)))"
"(let-values(((start-pos_408)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
" k_406)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(sub1"
"(vector-length"
" vec_407)))"
"(values))))"
"(let-values(((all-quoted?_409)"
"(let-values(((v*_410"
" start*_411"
" stop*_412"
" step*_413)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_414)"
"(vector?"
" x_414))"
"(lambda(x_415)"
"(unsafe-vector-length"
" x_415))"
" vec_407"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_416)"
"(lambda(all-quoted?_417"
" idx_418)"
"(if(unsafe-fx<"
" idx_418"
" stop*_412)"
"(let-values(((i_419)"
"(unsafe-vector-ref"
" v*_410"
" idx_418)))"
"(let-values(((all-quoted?_420)"
"(let-values(((all-quoted?_421)"
" all-quoted?_417))"
"(let-values(((all-quoted?_422)"
"(let-values()"
"(let-values(((i-pos_423)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_419)"
"(if all-quoted?_421"
"(quoted?_215"
" i-pos_423)"
" #f))))))"
"(values"
" all-quoted?_422)))))"
"(for-loop_416"
" all-quoted?_420"
"(unsafe-fx+"
" idx_418"
" 1))))"
" all-quoted?_417))))"
" for-loop_416)"
" #t"
" start*_411)))))"
"(if all-quoted?_409"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_408)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
" c55213_405)"
"(if(srcloc? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:srcloc)"
"(ser-push!_218"
"(srcloc-source v_350))"
"(ser-push!_218"
"(srcloc-line v_350))"
"(ser-push!_218"
"(srcloc-column v_350))"
"(ser-push!_218"
"(srcloc-position v_350))"
"(ser-push!_218"
"(srcloc-span v_350))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350))))))))))))))))"
"((ser-push-optional-quote!_220)(lambda()(void))))"
"(let-values(((ser-shell!_221)"
"(lambda(v_424)"
"(if(serialize-fill!? v_424)"
"(let-values()"
"((serialize-ref v_424)"
" v_424"
" ser-push!_218"
" state_203))"
"(if(box? v_424)"
"(let-values()(ser-push!_218 'tag '#:box))"
"(if(vector? v_424)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:vector)"
"(ser-push!_218 'exact(vector-length v_424))))"
"(if(hash? v_424)"
"(let-values()"
"(ser-push!_218"
" 'tag"
"(if(hash-eq? v_424)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_424)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                           \"unknown mutable: ~e\""
" v_424)))))))))"
"(let-values(((ser-shell-fill!_222)"
"(lambda(v_425)"
"(if(serialize-fill!? v_425)"
"(let-values()"
"((serialize-fill!-ref v_425)"
" v_425"
" ser-push!_218"
" state_203))"
"(if(box? v_425)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:set-box!)"
"(ser-push!_218(unbox v_425))))"
"(if(vector? v_425)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:set-vector!)"
"(ser-push!_218 'exact(vector-length v_425))"
"(let-values(((vec_426 len_427)"
"(let-values(((vec_428)"
" v_425))"
"(begin"
"(if(vector? vec_428)"
"(void)"
"(let-values()"
"(in-vector vec_428)))"
"(values"
" vec_428"
"(unsafe-vector-length"
" vec_428))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_429)"
"(lambda(fold-var_430"
" pos_431)"
"(if(unsafe-fx<"
" pos_431"
" len_427)"
"(let-values(((v_432)"
"(unsafe-vector-ref"
" vec_426"
" pos_431)))"
"(let-values(((fold-var_433)"
"(let-values(((fold-var_434)"
" fold-var_430))"
"(let-values(((fold-var_435)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_218"
" v_432))"
"(void)))))"
"(values"
" fold-var_435)))))"
"(for-loop_429"
" fold-var_433"
"(unsafe-fx+"
" 1"
" pos_431))))"
" fold-var_430))))"
" for-loop_429)"
"(void)"
" 0)))))"
"(if(hash? v_425)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(hash-count v_425))"
"(values))))"
"(let-values(((ks_436)"
"(sorted-hash-keys v_425)))"
"(let-values(((lst_437) ks_436))"
"(begin"
"(if(list? lst_437)"
"(void)"
"(let-values()"
"(in-list lst_437)))"
"((letrec-values(((for-loop_438)"
"(lambda(fold-var_439"
" lst_440)"
"(if(pair?"
" lst_440)"
"(let-values(((k_441)"
"(unsafe-car"
" lst_440)))"
"(let-values(((fold-var_442)"
"(let-values(((fold-var_443)"
" fold-var_439))"
"(let-values(((fold-var_444)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_218"
" k_441)"
"(ser-push!_218"
"(hash-ref"
" v_425"
" k_441))))"
"(void)))))"
"(values"
" fold-var_444)))))"
"(for-loop_438"
" fold-var_442"
"(unsafe-cdr"
" lst_440))))"
" fold-var_439))))"
" for-loop_438)"
"(void)"
" lst_437)))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                             \"unknown mutable: ~e\""
" v_425)))))))))"
"(let-values(((rev-mutables_223)"
"(let-values(((ht_445) mutables_204))"
"(begin"
"(if((lambda(ht_446)(hash? ht_446)) ht_445)"
"(void)"
"(let-values()(default-in-hash ht_445)))"
"((letrec-values(((for-loop_447)"
"(lambda(table_448 i_449)"
"(if i_449"
"(let-values(((k_450 v_451)"
"(hash-iterate-key+value"
" ht_445"
" i_449)))"
"(let-values(((table_452)"
"(let-values(((table_453)"
" table_448))"
"(let-values(((table_454)"
"(let-values()"
"(let-values(((key_455"
" val_456)"
"(let-values()"
"(values"
" v_451"
" k_450))))"
"(hash-set"
" table_453"
" key_455"
" val_456)))))"
"(values"
" table_454)))))"
"(for-loop_447"
" table_452"
"(hash-iterate-next"
" ht_445"
" i_449))))"
" table_448))))"
" for-loop_447)"
" '#hasheqv()"
"(hash-iterate-first ht_445))))))"
"(let-values(((mutable-shell-bindings_224)"
"(begin"
"(let-values(((start_457) 0)"
"((end_458)(hash-count mutables_204))"
"((inc_459) 1))"
"(begin"
"(if(if(real? start_457)"
"(if(real? end_458)(real? inc_459) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_457 end_458 inc_459)))"
"((letrec-values(((for-loop_460)"
"(lambda(fold-var_461"
" pos_462)"
"(if(< pos_462 end_458)"
"(let-values(((i_463)"
" pos_462))"
"(let-values(((fold-var_464)"
"(let-values(((fold-var_465)"
" fold-var_461))"
"(let-values(((fold-var_466)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_221"
"(hash-ref"
" rev-mutables_223"
" i_463)))"
"(void)))))"
"(values"
" fold-var_466)))))"
"(for-loop_460"
" fold-var_464"
"(+"
" pos_462"
" inc_459))))"
" fold-var_461))))"
" for-loop_460)"
"(void)"
" start_457)))"
"(reap-stream!_217))))"
"(let-values(((rev-shares_225)"
"(let-values(((ht_467) shares_206))"
"(begin"
"(if((lambda(ht_468)(hash? ht_468)) ht_467)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_467)))"
"((letrec-values(((for-loop_469)"
"(lambda(table_470 i_471)"
"(if i_471"
"(let-values(((obj_472)"
"(hash-iterate-key"
" ht_467"
" i_471)))"
"(let-values(((table_473)"
"(let-values(((table_474)"
" table_470))"
"(let-values(((table_475)"
"(let-values()"
"(let-values(((key_476"
" val_477)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_211"
"(hash-ref"
" objs_205"
" obj_472))"
" obj_472))))"
"(hash-set"
" table_474"
" key_476"
" val_477)))))"
"(values"
" table_475)))))"
"(for-loop_469"
" table_473"
"(hash-iterate-next"
" ht_467"
" i_471))))"
" table_470))))"
" for-loop_469)"
" '#hasheqv()"
"(hash-iterate-first ht_467))))))"
"(let-values(((shared-bindings_226)"
"(begin"
"(let-values(((start_478) num-mutables_210)"
"((end_479)"
"(+"
" num-mutables_210"
"(hash-count shares_206)))"
"((inc_480) 1))"
"(begin"
"(if(if(real? start_478)"
"(if(real? end_479)"
"(real? inc_480)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_478 end_479 inc_480)))"
"((letrec-values(((for-loop_481)"
"(lambda(fold-var_482"
" pos_483)"
"(if(<"
" pos_483"
" end_479)"
"(let-values(((i_484)"
" pos_483))"
"(let-values(((fold-var_485)"
"(let-values(((fold-var_486)"
" fold-var_482))"
"(let-values(((fold-var_487)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_219"
"(hash-ref"
" rev-shares_225"
" i_484)))"
"(void)))))"
"(values"
" fold-var_487)))))"
"(for-loop_481"
" fold-var_485"
"(+"
" pos_483"
" inc_480))))"
" fold-var_482))))"
" for-loop_481)"
"(void)"
" start_478)))"
"(reap-stream!_217))))"
"(let-values(((mutable-fills_227)"
"(begin"
"(let-values(((start_488) 0)"
"((end_489)"
"(hash-count mutables_204))"
"((inc_490) 1))"
"(begin"
"(if(if(real? start_488)"
"(if(real? end_489)"
"(real? inc_490)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_488"
" end_489"
" inc_490)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" pos_493)"
"(if(<"
" pos_493"
" end_489)"
"(let-values(((i_494)"
" pos_493))"
"(let-values(((fold-var_495)"
"(let-values(((fold-var_496)"
" fold-var_492))"
"(let-values(((fold-var_497)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_222"
"(hash-ref"
" rev-mutables_223"
" i_494)))"
"(void)))))"
"(values"
" fold-var_497)))))"
"(for-loop_491"
" fold-var_495"
"(+"
" pos_493"
" inc_490))))"
" fold-var_492))))"
" for-loop_491)"
"(void)"
" start_488)))"
"(reap-stream!_217))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_201 inspector-id #f)"
"(if syntax-support?_201 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_204))"
"(list 'quote mutable-shell-bindings_224)"
"(list 'quote(hash-count shares_206))"
"(list 'quote shared-bindings_226)"
"(list 'quote mutable-fills_227)"
"(list"
" 'quote"
"(begin"
"(ser-push!_218 v_199)"
"(reap-stream!_217)))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack7.1$3)"
"(lambda(given-kws_498 given-args_499 v4_500 mpis5_501)"
"(let-values(((syntax-support?3_502)(pair? given-kws_498)))"
"(let-values(((syntax-support?2_503)(if syntax-support?3_502(car given-args_499)(void))))"
"(generate-deserialize6.1 syntax-support?2_503 syntax-support?3_502 v4_500 mpis5_501)))))"
"(define-values"
"(generate-deserialize8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_504 given-argc_505)"
"(if(= given-argc_505 4)"
"(let-values(((l1_506) given-kws_504))"
"(let-values(((l1_507)"
"(if(null? l1_506) l1_506(if(eq?(car l1_506) '#:syntax-support?)(cdr l1_506) l1_506))))"
"(null? l1_507)))"
" #f))"
"(case-lambda"
"((given-kws_508 given-args_509 v_510 mpis_511)(unpack7.1$3 given-kws_508 given-args_509 v_510 mpis_511)))"
" null"
" '(#:syntax-support?)"
"(let-values(((generate-deserialize_512)(case-lambda((v_513 mpis_514)(unpack7.1$3 null null v_513 mpis_514)))))"
" generate-deserialize_512)))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_515)"
"(let-values(((ks_516)(hash-keys ht_515)))"
"(if(null? ks_516)"
"(let-values() ks_516)"
"(if(null?(cdr ks_516))"
"(let-values() ks_516)"
"(if(andmap2 symbol? ks_516)"
"(let-values()"
"(let-values(((ks14_517) ks_516)((symbol<?15_518) symbol<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f ks14_517 symbol<?15_518)"
"(sort9.1 ks14_517 symbol<?15_518))))"
"(if(andmap2 scope? ks_516)"
"(let-values()"
"(let-values(((ks16_519) ks_516)((scope<?17_520) scope<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f ks16_519 scope<?17_520)"
"(sort9.1 ks16_519 scope<?17_520))))"
"(if(andmap2 shifted-multi-scope? ks_516)"
"(let-values()"
"(let-values(((ks18_521) ks_516)((shifted-multi-scope<?19_522) shifted-multi-scope<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f ks18_521 shifted-multi-scope<?19_522)"
"(sort9.1 ks18_521 shifted-multi-scope<?19_522))))"
"(if(andmap2 real? ks_516)"
"(let-values()"
"(let-values(((ks20_523) ks_516)((<21_524) <))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f ks20_523 <21_524)"
"(sort9.1 ks20_523 <21_524))))"
"(let-values() ks_516))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" num-mutables_528"
" mutable-vec_529"
" num-shared_530"
" shared-vec_531"
" mutable-fill-vec_532"
" result-vec_533)"
"(let-values(((shared_534)(make-vector(+ num-mutables_528 num-shared_530) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_537) 0)((end_538) num-mutables_528)((inc_539) 1))"
"(begin"
"(if(if(real? start_537)(if(real? end_538)(real? inc_539) #f) #f)"
"(void)"
"(let-values()(in-range start_537 end_538 inc_539)))"
"((letrec-values(((for-loop_540)"
"(lambda(pos_541 pos_542)"
"(if(< pos_542 end_538)"
"(let-values(((i_543) pos_542))"
"(let-values(((pos_544)"
"(let-values(((pos_545) pos_541))"
"(let-values(((pos_546)"
"(let-values()"
"(let-values(((d_547 next-pos_548)"
"(decode-shell"
" mutable-vec_529"
" pos_545"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534)))"
"(begin"
"(vector-set!"
" shared_534"
" i_543"
" d_547)"
" next-pos_548)))))"
"(values pos_546)))))"
"(for-loop_540 pos_544(+ pos_542 inc_539))))"
" pos_541))))"
" for-loop_540)"
" 0"
" start_537)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_549) num-mutables_528)"
"((end_550)(+ num-mutables_528 num-shared_530))"
"((inc_551) 1))"
"(begin"
"(if(if(real? start_549)(if(real? end_550)(real? inc_551) #f) #f)"
"(void)"
"(let-values()(in-range start_549 end_550 inc_551)))"
"((letrec-values(((for-loop_552)"
"(lambda(pos_553 pos_554)"
"(if(< pos_554 end_550)"
"(let-values(((i_555) pos_554))"
"(let-values(((pos_556)"
"(let-values(((pos_557) pos_553))"
"(let-values(((pos_558)"
"(let-values()"
"(let-values(((d_559 next-pos_560)"
"(decode"
" shared-vec_531"
" pos_557"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534)))"
"(begin"
"(vector-set!"
" shared_534"
" i_555"
" d_559)"
" next-pos_560)))))"
"(values pos_558)))))"
"(for-loop_552 pos_556(+ pos_554 inc_551))))"
" pos_553))))"
" for-loop_552)"
" 0"
" start_549)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_561) 0)"
"((end_562) num-mutables_528)"
"((inc_563) 1)"
"((vec_564 len_565)"
"(let-values(((vec_566) shared_534))"
"(begin"
"(if(vector? vec_566)(void)(let-values()(in-vector vec_566)))"
"(values vec_566(unsafe-vector-length vec_566))))))"
"(begin"
"(if(if(real? start_561)(if(real? end_562)(real? inc_563) #f) #f)"
"(void)"
"(let-values()(in-range start_561 end_562 inc_563)))"
" #f"
"((letrec-values(((for-loop_567)"
"(lambda(pos_568 pos_569 pos_570)"
"(if(if(< pos_569 end_562)(unsafe-fx< pos_570 len_565) #f)"
"(let-values(((i_571) pos_569)"
"((v_572)(unsafe-vector-ref vec_564 pos_570)))"
"(let-values(((pos_573)"
"(let-values(((pos_574) pos_568))"
"(let-values(((pos_575)"
"(let-values()"
"(decode-fill!"
" v_572"
" mutable-fill-vec_532"
" pos_574"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534))))"
"(values pos_575)))))"
"(for-loop_567"
" pos_573"
"(+ pos_569 inc_563)"
"(unsafe-fx+ 1 pos_570))))"
" pos_568))))"
" for-loop_567)"
" 0"
" start_561"
" 0)))"
"(values))))"
"(let-values(((result_535 done-pos_536)"
"(decode result-vec_533 0 mpis_525 inspector_526 bulk-binding-registry_527 shared_534)))"
" result_535)))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_576 pos_577 mpis_578 inspector_579 bulk-binding-registry_580 shared_581)"
"(let-values(((tmp_582)(vector-ref vec_576 pos_577)))"
"(if(equal? tmp_582 '#:box)"
"(let-values()(values(box #f)(add1 pos_577)))"
"(if(equal? tmp_582 '#:vector)"
"(let-values()(values(make-vector(vector-ref vec_576(add1 pos_577)))(+ pos_577 2)))"
"(if(equal? tmp_582 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_577)))"
"(if(equal? tmp_582 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_577)))"
"(if(equal? tmp_582 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_577)))"
"(let-values()"
"(decode vec_576 pos_577 mpis_578 inspector_579 bulk-binding-registry_580 shared_581))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_583 pos_584 mpis_585 inspector_586 bulk-binding-registry_587 shared_588)"
"(let-values()"
"(let-values(((tmp_650)(vector-ref vec_583 pos_584)))"
"(let-values(((index_651)"
"(if(keyword? tmp_650)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 23)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:bulk-binding-at . 21)"
"(#:multi-scope . 18)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 24)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 19)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 25)"
"(#:bulk-binding . 26)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 20)"
"(#:seteq . 14)"
"(#:provided . 27)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 22))"
" tmp_650"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_651 13)"
"(if(unsafe-fx< index_651 6)"
"(if(unsafe-fx< index_651 2)"
"(if(unsafe-fx< index_651 1)"
"(let-values()(values(vector-ref vec_583 pos_584)(add1 pos_584)))"
"(let-values()(values(vector-ref shared_588(vector-ref vec_583(add1 pos_584)))(+ pos_584 2))))"
"(if(unsafe-fx< index_651 3)"
"(let-values()(values inspector_586(add1 pos_584)))"
"(if(unsafe-fx< index_651 4)"
"(let-values()(values bulk-binding-registry_587(add1 pos_584)))"
"(if(unsafe-fx< index_651 5)"
"(let-values()"
"(let-values(((content_652 next-pos_653)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_654 next-pos_655)"
"(let-values(((i_656)(vector-ref vec_583 next-pos_653)))"
"(if(exact-integer? i_656)"
"(values(vector-ref shared_588 i_656)(add1 next-pos_653))"
"(decode"
" vec_583"
" next-pos_653"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_657 next-pos_658)"
"(let-values(((i_659)(vector-ref vec_583 next-pos_655)))"
"(if(exact-integer? i_659)"
"(values(vector-ref shared_588 i_659)(add1 next-pos_655))"
"(decode"
" vec_583"
" next-pos_655"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(values"
"(deserialize-syntax content_652 context_654 srcloc_657 #f #f inspector_586)"
" next-pos_658)))))"
"(let-values()"
"(let-values(((content_660 next-pos_661)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_662 next-pos_663)"
"(let-values(((i_664)(vector-ref vec_583 next-pos_661)))"
"(if(exact-integer? i_664)"
"(values(vector-ref shared_588 i_664)(add1 next-pos_661))"
"(decode"
" vec_583"
" next-pos_661"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_665 next-pos_666)"
"(let-values(((i_667)(vector-ref vec_583 next-pos_663)))"
"(if(exact-integer? i_667)"
"(values(vector-ref shared_588 i_667)(add1 next-pos_663))"
"(decode"
" vec_583"
" next-pos_663"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(values"
"(deserialize-datum->syntax content_660 context_662 srcloc_665 inspector_586)"
" next-pos_666)))))))))"
"(if(unsafe-fx< index_651 9)"
"(if(unsafe-fx< index_651 7)"
"(let-values()"
"(let-values(((content_668 next-pos_669)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_670 next-pos_671)"
"(let-values(((i_672)(vector-ref vec_583 next-pos_669)))"
"(if(exact-integer? i_672)"
"(values(vector-ref shared_588 i_672)(add1 next-pos_669))"
"(decode"
" vec_583"
" next-pos_669"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_673 next-pos_674)"
"(let-values(((i_675)(vector-ref vec_583 next-pos_671)))"
"(if(exact-integer? i_675)"
"(values(vector-ref shared_588 i_675)(add1 next-pos_671))"
"(decode"
" vec_583"
" next-pos_671"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((props_676 next-pos_677)"
"(decode"
" vec_583"
" next-pos_674"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((tamper_678 next-pos_679)"
"(decode"
" vec_583"
" next-pos_677"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-syntax"
" content_668"
" context_670"
" srcloc_673"
" props_676"
" tamper_678"
" inspector_586)"
" next-pos_679)))))))"
"(if(unsafe-fx< index_651 8)"
"(let-values()"
"(let-values(((source_680 next-pos_681)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((line_682 next-pos_683)"
"(decode"
" vec_583"
" next-pos_681"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((column_684 next-pos_685)"
"(decode"
" vec_583"
" next-pos_683"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((position_686 next-pos_687)"
"(decode"
" vec_583"
" next-pos_685"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((span_688 next-pos_689)"
"(decode"
" vec_583"
" next-pos_687"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(srcloc source_680 line_682 column_684 position_686 span_688)"
" next-pos_689)))))))"
"(let-values()(values(vector-ref vec_583(add1 pos_584))(+ pos_584 2)))))"
"(if(unsafe-fx< index_651 10)"
"(let-values()(values(vector-ref mpis_585(vector-ref vec_583(add1 pos_584)))(+ pos_584 2)))"
"(if(unsafe-fx< index_651 11)"
"(let-values()"
"(let-values(((v_690 next-pos_691)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(box-immutable v_690) next-pos_691)))"
"(if(unsafe-fx< index_651 12)"
"(let-values()"
"(let-values(((a_692 next-pos_693)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((d_694 next-pos_695)"
"(decode"
" vec_583"
" next-pos_693"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(cons a_692 d_694) next-pos_695))))"
"(let-values()"
"(let-values(((len_696)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((r_697)(make-vector len_696)))"
"(let-values(((next-pos_698)"
"(let-values(((start_699) 0)((end_700) len_696)((inc_701) 1))"
"(begin"
"(if(if(real? start_699)(if(real? end_700)(real? inc_701) #f) #f)"
"(void)"
"(let-values()(in-range start_699 end_700 inc_701)))"
"((letrec-values(((for-loop_702)"
"(lambda(pos_703 pos_704)"
"(if(< pos_704 end_700)"
"(let-values(((i_705) pos_704))"
"(let-values(((pos_706)"
"(let-values(((pos_707) pos_703))"
"(let-values(((pos_708)"
"(let-values()"
"(let-values(((v_709"
" next-pos_710)"
"(let-values(((v_711"
" next-pos_712)"
"(decode"
" vec_583"
" pos_707"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
" v_711"
" next-pos_712))))"
"(begin"
"(vector-set!"
" r_697"
" i_705"
" v_709)"
" next-pos_710)))))"
"(values pos_708)))))"
"(for-loop_702 pos_706(+ pos_704 inc_701))))"
" pos_703))))"
" for-loop_702)"
"(+ pos_584 2)"
" start_699)))))"
"(values"
"(if(eq?(vector-ref vec_583 pos_584) '#:list)"
"(vector->list r_697)"
"(vector->immutable-vector r_697))"
" next-pos_698))))))))))"
"(if(unsafe-fx< index_651 20)"
"(if(unsafe-fx< index_651 16)"
"(if(unsafe-fx< index_651 14)"
"(let-values()"
"(let-values(((ht_713)"
"(let-values(((tmp_715)(vector-ref vec_583 pos_584)))"
"(if(equal? tmp_715 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_715 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_715 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_714)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((start_716) 0)((end_717) len_714)((inc_718) 1))"
"(begin"
"(if(if(real? start_716)(if(real? end_717)(real? inc_718) #f) #f)"
"(void)"
"(let-values()(in-range start_716 end_717 inc_718)))"
"((letrec-values(((for-loop_719)"
"(lambda(ht_720 pos_721 pos_722)"
"(if(< pos_722 end_717)"
"(let-values(((i_723) pos_722))"
"(let-values(((ht_724 pos_725)"
"(let-values(((ht_726) ht_720)((pos_727) pos_721))"
"(let-values(((ht_728 pos_729)"
"(let-values()"
"(let-values(((k_730 next-pos_731)"
"(decode"
" vec_583"
" pos_727"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((v_732 next-pos_733)"
"(decode"
" vec_583"
" next-pos_731"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(hash-set ht_726 k_730 v_732)"
" next-pos_733))))))"
"(values ht_728 pos_729)))))"
"(for-loop_719 ht_724 pos_725(+ pos_722 inc_718))))"
"(values ht_720 pos_721)))))"
" for-loop_719)"
" ht_713"
"(+ pos_584 2)"
" start_716))))))"
"(if(unsafe-fx< index_651 15)"
"(let-values()"
"(let-values(((s_734)"
"(let-values(((tmp_736)(vector-ref vec_583 pos_584)))"
"(if(equal? tmp_736 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_736 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_736 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_735)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((start_737) 0)((end_738) len_735)((inc_739) 1))"
"(begin"
"(if(if(real? start_737)(if(real? end_738)(real? inc_739) #f) #f)"
"(void)"
"(let-values()(in-range start_737 end_738 inc_739)))"
"((letrec-values(((for-loop_740)"
"(lambda(s_741 pos_742 pos_743)"
"(if(< pos_743 end_738)"
"(let-values(((i_744) pos_743))"
"(let-values(((s_745 pos_746)"
"(let-values(((s_747) s_741)((pos_748) pos_742))"
"(let-values(((s_749 pos_750)"
"(let-values()"
"(let-values(((k_751 next-pos_752)"
"(decode"
" vec_583"
" pos_748"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(set-add s_747 k_751)"
" next-pos_752)))))"
"(values s_749 pos_750)))))"
"(for-loop_740 s_745 pos_746(+ pos_743 inc_739))))"
"(values s_741 pos_742)))))"
" for-loop_740)"
" s_734"
"(+ pos_584 2)"
" start_737))))))"
"(let-values()"
"(let-values(((key_753 next-pos_754)"
"(let-values(((k_758 next-pos_759)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values k_758 next-pos_759))))"
"(let-values(((len_755)(vector-ref vec_583 next-pos_754)))"
"(let-values(((r_756 done-pos_757)"
"(let-values(((start_760) 0)((end_761) len_755)((inc_762) 1))"
"(begin"
"(if(if(real? start_760)(if(real? end_761)(real? inc_762) #f) #f)"
"(void)"
"(let-values()(in-range start_760 end_761 inc_762)))"
"((letrec-values(((for-loop_763)"
"(lambda(r_764 pos_765 pos_766)"
"(if(< pos_766 end_761)"
"(let-values(((i_767) pos_766))"
"(let-values(((r_768 pos_769)"
"(let-values(((r_770) r_764)"
"((pos_771) pos_765))"
"(let-values(((r_772 pos_773)"
"(let-values()"
"(let-values(((v_774"
" next-pos_775)"
"(decode"
" vec_583"
" pos_771"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(cons"
" v_774"
" r_770)"
" next-pos_775)))))"
"(values r_772 pos_773)))))"
"(for-loop_763 r_768 pos_769(+ pos_766 inc_762))))"
"(values r_764 pos_765)))))"
" for-loop_763)"
" null"
"(add1 next-pos_754)"
" start_760)))))"
"(values(apply make-prefab-struct key_753(alt-reverse r_756)) done-pos_757)))))))"
"(if(unsafe-fx< index_651 17)"
"(let-values()(values(deserialize-scope)(add1 pos_584)))"
"(if(unsafe-fx< index_651 18)"
"(let-values()"
"(let-values(((kind_776 next-pos_777)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-scope kind_776) next-pos_777)))"
"(if(unsafe-fx< index_651 19)"
"(let-values()"
"(let-values(((name_778 next-pos_779)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((scopes_780 next-pos_781)"
"(decode"
" vec_583"
" next-pos_779"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-multi-scope name_778 scopes_780) next-pos_781))))"
"(let-values()"
"(let-values(((phase_782 next-pos_783)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((multi-scope_784 next-pos_785)"
"(decode"
" vec_583"
" next-pos_783"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-shifted-multi-scope phase_782 multi-scope_784) next-pos_785))))))))"
"(if(unsafe-fx< index_651 23)"
"(if(unsafe-fx< index_651 21)"
"(let-values()"
"(let-values(((syms_786 next-pos_787)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk-bindings_788 next-pos_789)"
"(decode"
" vec_583"
" next-pos_787"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-table-with-bulk-bindings syms_786 bulk-bindings_788) next-pos_789))))"
"(if(unsafe-fx< index_651 22)"
"(let-values()"
"(let-values(((scopes_790 next-pos_791)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk_792 next-pos_793)"
"(decode"
" vec_583"
" next-pos_791"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-bulk-binding-at scopes_790 bulk_792) next-pos_793))))"
"(let-values()"
"(let-values(((kind_794 next-pos_795)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_796 next-pos_797)"
"(decode"
" vec_583"
" next-pos_795"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-representative-scope kind_794 phase_796) next-pos_797))))))"
"(if(unsafe-fx< index_651 25)"
"(if(unsafe-fx< index_651 24)"
"(let-values()"
"(let-values(((module_798 next-pos_799)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_800 next-pos_801)"
"(decode"
" vec_583"
" next-pos_799"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_802 next-pos_803)"
"(decode"
" vec_583"
" next-pos_801"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-module_804 next-pos_805)"
"(decode"
" vec_583"
" next-pos_803"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-phase_806 next-pos_807)"
"(decode"
" vec_583"
" next-pos_805"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-sym_808 next-pos_809)"
"(decode"
" vec_583"
" next-pos_807"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-require-phase_810 next-pos_811)"
"(decode"
" vec_583"
" next-pos_809"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((free=id_812 next-pos_813)"
"(decode"
" vec_583"
" next-pos_811"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((extra-inspector_814 next-pos_815)"
"(decode"
" vec_583"
" next-pos_813"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((extra-nominal-bindings_816 next-pos_817)"
"(decode"
" vec_583"
" next-pos_815"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-full-module-binding"
" module_798"
" sym_800"
" phase_802"
" nominal-module_804"
" nominal-phase_806"
" nominal-sym_808"
" nominal-require-phase_810"
" free=id_812"
" extra-inspector_814"
" extra-nominal-bindings_816)"
" next-pos_817))))))))))))"
"(let-values()"
"(let-values(((module_818 next-pos_819)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_820 next-pos_821)"
"(decode"
" vec_583"
" next-pos_819"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_822 next-pos_823)"
"(decode"
" vec_583"
" next-pos_821"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-module_824 next-pos_825)"
"(decode"
" vec_583"
" next-pos_823"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-simple-module-binding module_818 sym_820 phase_822 nominal-module_824)"
" next-pos_825)))))))"
"(if(unsafe-fx< index_651 26)"
"(let-values()"
"(let-values(((key_826 next-pos_827)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((free=id_828 next-pos_829)"
"(decode"
" vec_583"
" next-pos_827"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-full-local-binding key_826 free=id_828) next-pos_829))))"
"(if(unsafe-fx< index_651 27)"
"(let-values()"
"(let-values(((prefix_830 next-pos_831)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((excepts_832 next-pos_833)"
"(decode"
" vec_583"
" next-pos_831"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((mpi_834 next-pos_835)"
"(decode"
" vec_583"
" next-pos_833"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((provide-phase-level_836 next-pos_837)"
"(decode"
" vec_583"
" next-pos_835"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase-shift_838 next-pos_839)"
"(decode"
" vec_583"
" next-pos_837"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk-binding-registry_840 next-pos_841)"
"(decode"
" vec_583"
" next-pos_839"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-bulk-binding"
" prefix_830"
" excepts_832"
" mpi_834"
" provide-phase-level_836"
" phase-shift_838"
" bulk-binding-registry_840)"
" next-pos_841))))))))"
"(let-values()"
"(let-values(((binding_842 next-pos_843)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((protected?_844 next-pos_845)"
"(decode"
" vec_583"
" next-pos_843"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((syntax?_846 next-pos_847)"
"(decode"
" vec_583"
" next-pos_845"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-provided binding_842 protected?_844 syntax?_846)"
" next-pos_847))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_848 vec_849 pos_850 mpis_851 inspector_852 bulk-binding-registry_853 shared_854)"
"(let-values(((tmp_855)(vector-ref vec_849 pos_850)))"
"(if(equal? tmp_855 #f)"
"(let-values()(add1 pos_850))"
"(if(equal? tmp_855 '#:set-box!)"
"(let-values()"
"(let-values(((c_856 next-pos_857)"
"(decode vec_849(add1 pos_850) mpis_851 inspector_852 bulk-binding-registry_853 shared_854)))"
"(begin(set-box! v_848 c_856) next-pos_857)))"
"(if(equal? tmp_855 '#:set-vector!)"
"(let-values()"
"(let-values(((len_858)(vector-ref vec_849(add1 pos_850))))"
"(let-values(((start_859) 0)((end_860) len_858)((inc_861) 1))"
"(begin"
"(if(if(real? start_859)(if(real? end_860)(real? inc_861) #f) #f)"
"(void)"
"(let-values()(in-range start_859 end_860 inc_861)))"
"((letrec-values(((for-loop_862)"
"(lambda(pos_863 pos_864)"
"(if(< pos_864 end_860)"
"(let-values(((i_865) pos_864))"
"(let-values(((pos_866)"
"(let-values(((pos_867) pos_863))"
"(let-values(((pos_868)"
"(let-values()"
"(let-values(((c_869 next-pos_870)"
"(decode"
" vec_849"
" pos_867"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin"
"(vector-set! v_848 i_865 c_869)"
" next-pos_870)))))"
"(values pos_868)))))"
"(for-loop_862 pos_866(+ pos_864 inc_861))))"
" pos_863))))"
" for-loop_862)"
"(+ pos_850 2)"
" start_859)))))"
"(if(equal? tmp_855 '#:set-hash!)"
"(let-values()"
"(let-values(((len_871)(vector-ref vec_849(add1 pos_850))))"
"(let-values(((start_872) 0)((end_873) len_871)((inc_874) 1))"
"(begin"
"(if(if(real? start_872)(if(real? end_873)(real? inc_874) #f) #f)"
"(void)"
"(let-values()(in-range start_872 end_873 inc_874)))"
"((letrec-values(((for-loop_875)"
"(lambda(pos_876 pos_877)"
"(if(< pos_877 end_873)"
"(let-values(((i_878) pos_877))"
"(let-values(((pos_879)"
"(let-values(((pos_880) pos_876))"
"(let-values(((pos_881)"
"(let-values()"
"(let-values(((key_882 next-pos_883)"
"(decode"
" vec_849"
" pos_880"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(let-values(((val_884 done-pos_885)"
"(decode"
" vec_849"
" next-pos_883"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin"
"(hash-set! v_848 key_882 val_884)"
" done-pos_885))))))"
"(values pos_881)))))"
"(for-loop_875 pos_879(+ pos_877 inc_874))))"
" pos_876))))"
" for-loop_875)"
"(+ pos_850 2)"
" start_872)))))"
"(if(equal? tmp_855 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_886 next-pos_887)"
"(decode"
" vec_849"
"(add1 pos_850)"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin(deserialize-scope-fill! v_848 c_886) next-pos_887)))"
"(if(equal? tmp_855 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_888 next-pos_889)"
"(decode"
" vec_849"
"(add1 pos_850)"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(let-values(((d_890 done-pos_891)"
"(decode"
" vec_849"
" next-pos_889"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin(deserialize-representative-scope-fill! v_848 a_888 d_890) done-pos_891))))"
"                  (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector-ref vec_849 pos_850))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_892)"
"(let-values(((seen_893)(make-hasheq)))"
"(let-values(((reachable-scopes_894)(seteq)))"
"(let-values(((scope-triggers_895)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_896)"
"(lambda(v_897)"
"(if(interned-literal? v_897)"
"(let-values()(void))"
"(if(hash-ref seen_893 v_897 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_893 v_897 #t)"
"(if(scope-with-bindings? v_897)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_894"
"(set-add reachable-scopes_894 v_897))"
"(values))))"
"(let-values((()"
"(begin((reach-scopes-ref v_897) v_897 loop_896)(values))))"
"(let-values(((l_898)(hash-ref scope-triggers_895 v_897 null)))"
"(begin"
"(let-values(((lst_899) l_898))"
"(begin"
"(if(list? lst_899)(void)(let-values()(in-list lst_899)))"
"((letrec-values(((for-loop_900)"
"(lambda(fold-var_901 lst_902)"
"(if(pair? lst_902)"
"(let-values(((v_903)"
"(unsafe-car lst_902)))"
"(let-values(((fold-var_904)"
"(let-values(((fold-var_905)"
" fold-var_901))"
"(let-values(((fold-var_906)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" v_903))"
"(void)))))"
"(values"
" fold-var_906)))))"
"(for-loop_900"
" fold-var_904"
"(unsafe-cdr lst_902))))"
" fold-var_901))))"
" for-loop_900)"
"(void)"
" lst_899)))"
"((scope-with-bindings-ref v_897)"
" v_897"
" reachable-scopes_894"
" loop_896"
"(lambda(sc-unreachable_907 b_908)"
"(hash-update!"
" scope-triggers_895"
" sc-unreachable_907"
"(lambda(l_909)(cons b_908 l_909))"
" null))))))))"
"(if(reach-scopes? v_897)"
"(let-values()((reach-scopes-ref v_897) v_897 loop_896))"
"(if(pair? v_897)"
"(let-values()(begin(loop_896(car v_897))(loop_896(cdr v_897))))"
"(if(vector? v_897)"
"(let-values()"
"(let-values(((vec_910 len_911)"
"(let-values(((vec_912) v_897))"
"(begin"
"(if(vector? vec_912)"
"(void)"
"(let-values()(in-vector vec_912)))"
"(values vec_912(unsafe-vector-length vec_912))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_913)"
"(lambda(fold-var_914 pos_915)"
"(if(unsafe-fx< pos_915 len_911)"
"(let-values(((e_916)"
"(unsafe-vector-ref"
" vec_910"
" pos_915)))"
"(let-values(((fold-var_917)"
"(let-values(((fold-var_918)"
" fold-var_914))"
"(let-values(((fold-var_919)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" e_916))"
"(void)))))"
"(values"
" fold-var_919)))))"
"(for-loop_913"
" fold-var_917"
"(unsafe-fx+ 1 pos_915))))"
" fold-var_914))))"
" for-loop_913)"
"(void)"
" 0))))"
"(if(box? v_897)"
"(let-values()(loop_896(unbox v_897)))"
"(if(hash? v_897)"
"(let-values()"
"(let-values(((ht_920) v_897))"
"(begin"
"(if((lambda(ht_921)(hash? ht_921)) ht_920)"
"(void)"
"(let-values()(default-in-hash ht_920)))"
"((letrec-values(((for-loop_922)"
"(lambda(fold-var_923 i_924)"
"(if i_924"
"(let-values(((k_925 v_926)"
"(hash-iterate-key+value"
" ht_920"
" i_924)))"
"(let-values(((fold-var_927)"
"(let-values(((fold-var_928)"
" fold-var_923))"
"(let-values(((fold-var_929)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_896"
" k_925)"
"(loop_896"
" v_926)))"
"(void)))))"
"(values"
" fold-var_929)))))"
"(for-loop_922"
" fold-var_927"
"(hash-iterate-next ht_920 i_924))))"
" fold-var_923))))"
" for-loop_922)"
"(void)"
"(hash-iterate-first ht_920)))))"
"(if(prefab-struct-key v_897)"
"(let-values()"
"(let-values(((v*_930 start*_931 stop*_932 step*_933)"
"(normalise-inputs"
" 'in-vector"
"                                                                       \"vector\""
"(lambda(x_934)(vector? x_934))"
"(lambda(x_935)(unsafe-vector-length x_935))"
"(struct->vector v_897)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_936)"
"(lambda(fold-var_937 idx_938)"
"(if(unsafe-fx< idx_938 stop*_932)"
"(let-values(((e_939)"
"(unsafe-vector-ref"
" v*_930"
" idx_938)))"
"(let-values(((fold-var_940)"
"(let-values(((fold-var_941)"
" fold-var_937))"
"(let-values(((fold-var_942)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" e_939))"
"(void)))))"
"(values"
" fold-var_942)))))"
"(for-loop_936"
" fold-var_940"
"(unsafe-fx+ idx_938 1))))"
" fold-var_937))))"
" for-loop_936)"
"(void)"
" start*_931))))"
"(let-values()(void))))))))))))))))"
" loop_896)"
" v_892)"
" reachable-scopes_894))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(void)"
"(void)"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_66 port_67 mode_68)(write(compiled-in-memory-linklet-directory cim_66) port_67))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 2 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 3 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 4 'mpis)"
"(make-struct-field-accessor -ref_4 5 'syntax-literals)"
"(make-struct-field-accessor -ref_4 6 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 7 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 8 'namespace-scopes)"
"(make-struct-field-accessor -ref_4 9 'purely-functional?))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'post)"
"(make-struct-field-accessor -ref_4 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_26 original-scopes-s_27 new-ns_28)"
"(let-values(((old-scs-post_29 old-scs-other_30)"
"(if(namespace-scopes? original-scopes-s_27)"
"(values(namespace-scopes-post original-scopes-s_27)(namespace-scopes-other original-scopes-s_27))"
"(decode-namespace-scopes original-scopes-s_27))))"
"(let-values(((new-scs-post_31 new-scs-other_32)(extract-namespace-scopes/values new-ns_28)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_26 old-scs-post_29 new-scs-post_31)"
" old-scs-other_30"
" new-scs-other_32)))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_33)"
"(let-values(((root-ctx_34)(namespace-get-root-expand-ctx ns_33)))"
"(let-values(((post-expansion-sc_35)(root-expand-context-post-expansion-scope root-ctx_34)))"
"(values"
"(seteq post-expansion-sc_35)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_34)) post-expansion-sc_35))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_36)"
"(let-values(((scs-post_37 scs-other_38)(extract-namespace-scopes/values ns_36)))"
"(namespace-scopes1.1 scs-post_37 scs-other_38))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_39)"
"(let-values(((post-expansion-scs_40 other-scs_41)(extract-namespace-scopes/values ns_39)))"
"(let-values(((post-expansion-s_42)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_40))))"
"(let-values(((other-s_43)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_41))))"
"(datum->syntax$1 #f(vector post-expansion-s_42 other-s_43)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_44)"
"(let-values(((vec_45)(syntax-e$1 stx_44)))"
"(values(syntax-scope-set(vector-ref vec_45 0) 0)(syntax-scope-set(vector-ref vec_45 1) 0)))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_46 nss2_47)"
"(if(set=?(namespace-scopes-post nss1_46)(namespace-scopes-post nss2_47))"
"(set=?(namespace-scopes-other nss1_46)(namespace-scopes-other nss2_47))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'stxes)"
"(make-struct-field-accessor -ref_4 1 'count)"
"(make-struct-field-mutator -set!_5 0 'stxes)"
"(make-struct-field-mutator -set!_5 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_29 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_29 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_29 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_29 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_29 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_29 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_29 7 'syntax-literals)"
"(make-struct-field-mutator -set!_30 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_30 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_81 make-_82 ?_83 -ref_84 -set!_85)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_81"
" make-_82"
" ?_83"
"(make-struct-field-accessor -ref_84 0 'module-use)"
"(make-struct-field-accessor -ref_84 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(syntax-literals1.1 null 0)))"
"(define-values"
"(make-header)"
"(lambda(mpis_106 syntax-literals_107)"
"(header2.1 mpis_106(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_107)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_108 q_109)"
"(let-values(((sl_110)"
"(if(header? header-or-literals_108)"
"(header-syntax-literals header-or-literals_108)"
" header-or-literals_108)))"
"(let-values(((pos_111)(syntax-literals-count sl_110)))"
"(begin"
"(set-syntax-literals-count! sl_110(add1 pos_111))"
"(set-syntax-literals-stxes! sl_110(cons q_109(syntax-literals-stxes sl_110)))"
" pos_111)))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_112 vec_113)"
"(let-values(((pos_114)(syntax-literals-count sl_112)))"
"(begin"
"(let-values(((vec_115 len_116)"
"(let-values(((vec_117) vec_113))"
"(begin"
"(if(vector? vec_117)(void)(let-values()(in-vector vec_117)))"
"(values vec_117(unsafe-vector-length vec_117))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 pos_120)"
"(if(unsafe-fx< pos_120 len_116)"
"(let-values(((e_121)(unsafe-vector-ref vec_115 pos_120)))"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123) fold-var_119))"
"(let-values(((fold-var_124)"
"(let-values()"
"(begin"
"(let-values()(add-syntax-literal! sl_112 e_121))"
"(void)))))"
"(values fold-var_124)))))"
"(for-loop_118 fold-var_122(unsafe-fx+ 1 pos_120))))"
" fold-var_119))))"
" for-loop_118)"
"(void)"
" 0)))"
"(cons pos_114(vector-length vec_113))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_125)(null?(syntax-literals-stxes sl_125))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_126 skip-deserialize?5_127 sl6_128 mpis7_129 self8_130)"
"(let-values(((sl_131) sl6_128))"
"(let-values(((mpis_132) mpis7_129))"
"(let-values(((self_133) self8_130))"
"(let-values(((skip-deserialize?_134)(if skip-deserialize?5_127 skip-deserialize?4_126 #f)))"
"(let-values()"
"(list"
"(list 'define-values(list syntax-literals-id)(list* 'make-vector(syntax-literals-count sl_131) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* 'vector-ref syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_134"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_132 self_133)"
" self-id"
" inspector-id)))"
"(list* 'begin(list* 'vector-set! syntax-literals-id '(pos stx)) '(stx))))))))))))))))))"
"(define-values"
"(unpack10.1$3)"
"(lambda(given-kws_135 given-args_136 sl6_137 mpis7_138 self8_139)"
"(let-values(((skip-deserialize?5_140)(pair? given-kws_135)))"
"(let-values(((skip-deserialize?4_141)(if skip-deserialize?5_140(car given-args_136)(void))))"
"(generate-lazy-syntax-literals!9.1"
" skip-deserialize?4_141"
" skip-deserialize?5_140"
" sl6_137"
" mpis7_138"
" self8_139)))))"
"(define-values"
"(generate-lazy-syntax-literals!11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_142 given-argc_143)"
"(if(= given-argc_143 5)"
"(let-values(((l1_144) given-kws_142))"
"(let-values(((l1_145)"
"(if(null? l1_144) l1_144(if(eq?(car l1_144) '#:skip-deserialize?)(cdr l1_144) l1_144))))"
"(null? l1_145)))"
" #f))"
"(case-lambda"
"((given-kws_146 given-args_147 sl_148 mpis_149 self_150)"
"(unpack10.1$3 given-kws_146 given-args_147 sl_148 mpis_149 self_150)))"
" null"
" '(#:skip-deserialize?)"
"(let-values(((generate-lazy-syntax-literals!_151)"
"(case-lambda((sl_152 mpis_153 self_154)(unpack10.1$3 null null sl_152 mpis_153 self_154)))))"
" generate-lazy-syntax-literals!_151)))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_155 mpis_156)"
"(if(syntax-literals-empty? sl_155)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_157)"
"(vector->immutable-vector(list->vector(alt-reverse(syntax-literals-stxes sl_155)))))"
"((mpis26_158) mpis_156))"
"(if(variable-reference-constant?(#%variable-reference generate-deserialize8.1))"
"(generate-deserialize6.1 #f #f temp25_157 mpis26_158)"
"(generate-deserialize8.1 temp25_157 mpis26_158)))))"
"(list* 'set! deserialize-syntax-id '(#f))))))))))"
"(define-values"
"(generate-lazy-syntax-literal-lookup)"
"(lambda(pos_159)(list get-syntax-literal!-id(list 'quote pos_159))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_160 mpis_161 base-phase_162 self_163 ns_164)"
"(if(syntax-literals-empty? sl_160)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_165)"
"(cons(encode-namespace-scopes ns_164)(alt-reverse(syntax-literals-stxes sl_160))))"
"((mpis28_166) mpis_161))"
"(if(variable-reference-constant?(#%variable-reference generate-deserialize8.1))"
"(generate-deserialize6.1 #f #f temp27_165 mpis28_166)"
"(generate-deserialize8.1 temp27_165 mpis28_166)))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_162 dest-phase-id))"
"(add-module-path-index! mpis_161 self_163)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss))))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(pos_167)(list 'vector-ref syntax-literals-id(list 'quote pos_167))))"
"(define-values"
"(syntax-literals-as-vector)"
"(lambda(sl_168)(list->vector(alt-reverse(syntax-literals-stxes sl_168)))))"
"(define-values(local-key->symbol)(lambda(key_170) key_170))"
"(define-values"
"(select-fresh)"
"(lambda(sym_171 header_172)"
"(if(symbol-conflicts? sym_171 header_172)"
"((letrec-values(((loop_173)"
"(lambda(pos_174)"
"                          (let-values (((new-sym_175) (string->symbol (format \"~a/~a\" pos_174 sym_171))))"
"(if(symbol-conflicts? new-sym_175 header_172)(loop_173(add1 pos_174)) new-sym_175)))))"
" loop_173)"
" 1)"
" sym_171)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_176 header_177)"
"(let-values(((or-part_178)(built-in-symbol? sym_176)))"
"(if or-part_178 or-part_178(hash-ref(header-define-and-import-syms header_177) sym_176 #f)))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_179 defined?13_180 header14_181 mpi15_182 phase16_183 sym17_184 extra-inspector18_185)"
"(let-values(((header_186) header14_181))"
"(let-values(((mpi_187) mpi15_182))"
"(let-values(((phase_188) phase16_183))"
"(let-values(((sym_189) sym17_184))"
"(let-values(((extra-inspector_190) extra-inspector18_185))"
"(let-values(((defined?_191)(if defined?13_180 defined?12_179 #f)))"
"(let-values()"
"(let-values(((key_192)(variable-use3.1(module-use1.1 mpi_187 phase_188) sym_189)))"
"(let-values(((variable-uses_193)(header-require-var-to-import-sym header_186)))"
"(let-values(((var-sym_194)"
"(let-values(((or-part_195)(hash-ref variable-uses_193 key_192 #f)))"
"(if or-part_195"
" or-part_195"
"(let-values(((sym_196)(select-fresh(variable-use-sym key_192) header_186)))"
"(begin"
"(hash-set! variable-uses_193 key_192 sym_196)"
"(set-header-require-vars-in-order!"
" header_186"
"(cons key_192(header-require-vars-in-order header_186)))"
"(hash-set!"
"(header-define-and-import-syms header_186)"
" sym_196"
"(if defined?_191 'defined 'required))"
" sym_196))))))"
"(begin"
"(if extra-inspector_190"
"(let-values()"
"(let-values(((extra-inspectors_197)(header-import-sym-to-extra-inspectors header_186)))"
"(hash-update!"
" extra-inspectors_197"
" var-sym_194"
"(lambda(s_198)(set-add s_198 extra-inspector_190))"
" '#hasheq())))"
"(void))"
" var-sym_194)))))))))))))"
"(define-values"
"(unpack20.1$1)"
"(lambda(given-kws_199 given-args_200 header14_201 mpi15_202 phase16_203 sym17_204 extra-inspector18_205)"
"(let-values(((defined?13_206)(pair? given-kws_199)))"
"(let-values(((defined?12_207)(if defined?13_206(car given-args_200)(void))))"
"(register-required-variable-use!19.1"
" defined?12_207"
" defined?13_206"
" header14_201"
" mpi15_202"
" phase16_203"
" sym17_204"
" extra-inspector18_205)))))"
"(define-values"
"(register-required-variable-use!21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_208 given-argc_209)"
"(if(= given-argc_209 7)"
"(let-values(((l1_210) given-kws_208))"
"(let-values(((l1_211)(if(null? l1_210) l1_210(if(eq?(car l1_210) '#:defined?)(cdr l1_210) l1_210))))"
"(null? l1_211)))"
" #f))"
"(case-lambda"
"((given-kws_212 given-args_213 header_214 mpi_215 phase_216 sym_217 extra-inspector_218)"
"(unpack20.1$1 given-kws_212 given-args_213 header_214 mpi_215 phase_216 sym_217 extra-inspector_218)))"
" null"
" '(#:defined?)"
"(let-values(((register-required-variable-use!_219)"
"(case-lambda"
"((header_220 mpi_221 phase_222 sym_223 extra-inspector_224)"
"(unpack20.1$1 null null header_220 mpi_221 phase_222 sym_223 extra-inspector_224)))))"
" register-required-variable-use!_219)))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_225 def-sym_226)(hash-set!(header-define-and-import-syms header_225) def-sym_226 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_227 var-sym_228)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_227) var-sym_228 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_229 phase_230 cctx_231)"
"(let-values(((mod-use-to-link-sym_232)"
"(let-values(((lst_234)(header-require-vars-in-order header_229)))"
"(begin"
"(if(list? lst_234)(void)(let-values()(in-list lst_234)))"
"((letrec-values(((for-loop_235)"
"(lambda(ht_236 lst_237)"
"(if(pair? lst_237)"
"(let-values(((vu_238)(unsafe-car lst_237)))"
"(let-values(((ht_239)"
"(let-values(((ht_240) ht_236))"
"(let-values(((ht_241)"
"(let-values()"
"(let-values(((mu_242)"
"(variable-use-module-use"
" vu_238)))"
"(if(let-values(((or-part_243)"
"(hash-ref"
" ht_240"
" mu_242"
" #f)))"
"(if or-part_243"
" or-part_243"
"(eq?"
"(module-use-module mu_242)"
"(compile-context-self"
" cctx_231))))"
" ht_240"
"(hash-set"
" ht_240"
" mu_242"
"(string->symbol"
"(format"
"                                                                                     \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_242))"
"(module-use-phase mu_242)"
"(hash-count ht_240)))))))))"
"(values ht_241)))))"
"(for-loop_235 ht_239(unsafe-cdr lst_237))))"
" ht_236))))"
" for-loop_235)"
" '#hash()"
" lst_234)))))"
"(let-values(((link-mod-uses_233)(hash-keys mod-use-to-link-sym_232)))"
"(values"
" link-mod-uses_233"
"(alt-reverse"
"(let-values(((lst_244) link-mod-uses_233))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((mu_248)(unsafe-car lst_247)))"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250) fold-var_246))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_252)"
"(header-require-vars-in-order"
" header_229)))"
"(begin"
"(if(list? lst_252)"
"(void)"
"(let-values()(in-list lst_252)))"
"((letrec-values(((for-loop_253)"
"(lambda(fold-var_254"
" lst_255)"
"(if(pair? lst_255)"
"(let-values(((vu_256)"
"(unsafe-car"
" lst_255)))"
"(let-values(((fold-var_257)"
"(let-values(((fold-var_258)"
" fold-var_254))"
"(if(equal?"
" mu_248"
"(variable-use-module-use"
" vu_256))"
"(let-values(((fold-var_259)"
" fold-var_258))"
"(let-values(((fold-var_260)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_261)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_256)))"
"(let-values(((ex-sym_262)"
"(variable-use-sym"
" vu_256)))"
"(if(eq?"
" var-sym_261"
" ex-sym_262)"
" var-sym_261"
"(list"
" ex-sym_262"
" var-sym_261)))))"
" fold-var_259))))"
"(values"
" fold-var_260)))"
" fold-var_258))))"
"(for-loop_253"
" fold-var_257"
"(unsafe-cdr"
" lst_255))))"
" fold-var_254))))"
" for-loop_253)"
" null"
" lst_252)))))"
" fold-var_250))))"
"(values fold-var_251)))))"
"(for-loop_245 fold-var_249(unsafe-cdr lst_247))))"
" fold-var_246))))"
" for-loop_245)"
" null"
" lst_244))))"
"(alt-reverse"
"(let-values(((lst_263) link-mod-uses_233))"
"(begin"
"(if(list? lst_263)(void)(let-values()(in-list lst_263)))"
"((letrec-values(((for-loop_264)"
"(lambda(fold-var_265 lst_266)"
"(if(pair? lst_266)"
"(let-values(((mu_267)(unsafe-car lst_266)))"
"(let-values(((fold-var_268)"
"(let-values(((fold-var_269) fold-var_265))"
"(let-values(((fold-var_270)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_271)"
"(alt-reverse"
"(let-values(((lst_272)"
"(header-require-vars-in-order"
" header_229)))"
"(begin"
"(if(list? lst_272)"
"(void)"
"(let-values()"
"(in-list lst_272)))"
"((letrec-values(((for-loop_273)"
"(lambda(fold-var_274"
" lst_275)"
"(if(pair?"
" lst_275)"
"(let-values(((vu_276)"
"(unsafe-car"
" lst_275)))"
"(let-values(((fold-var_277)"
"(let-values(((fold-var_278)"
" fold-var_274))"
"(if(equal?"
" mu_267"
"(variable-use-module-use"
" vu_276))"
"(let-values(((fold-var_279)"
" fold-var_278))"
"(let-values(((fold-var_280)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_281)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_276)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_229)"
" var-sym_281"
" #f)))"
" fold-var_279))))"
"(values"
" fold-var_280)))"
" fold-var_278))))"
"(for-loop_273"
" fold-var_277"
"(unsafe-cdr"
" lst_275))))"
" fold-var_274))))"
" for-loop_273)"
" null"
" lst_272))))))"
"(if(ormap2 values extra-inspectorss_271)"
" extra-inspectorss_271"
" #f)))"
" fold-var_269))))"
"(values fold-var_270)))))"
"(for-loop_264 fold-var_268(unsafe-cdr lst_266))))"
" fold-var_265))))"
" for-loop_264)"
" null"
" lst_263))))"
"(alt-reverse"
"(let-values(((lst_282)(header-require-vars-in-order header_229)))"
"(begin"
"(if(list? lst_282)(void)(let-values()(in-list lst_282)))"
"((letrec-values(((for-loop_283)"
"(lambda(fold-var_284 lst_285)"
"(if(pair? lst_285)"
"(let-values(((vu_286)(unsafe-car lst_285)))"
"(let-values(((fold-var_287)"
"(let-values(((fold-var_288) fold-var_284))"
"(if(eq?"
"(module-use-module(variable-use-module-use vu_286))"
"(compile-context-self cctx_231))"
"(let-values(((fold-var_289) fold-var_288))"
"(let-values(((fold-var_290)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_291)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_286)))"
"(let-values(((ex-sym_292)"
"(variable-use-sym vu_286)))"
"(if(eq? var-sym_291 ex-sym_292)"
" var-sym_291"
"(list var-sym_291 ex-sym_292)))))"
" fold-var_289))))"
"(values fold-var_290)))"
" fold-var_288))))"
"(for-loop_283 fold-var_287(unsafe-cdr lst_285))))"
" fold-var_284))))"
" for-loop_283)"
" null"
" lst_282)))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_293)"
"(let-values(((p_294 base_295)(1/module-path-index-split mpi_293)))"
"(if(symbol? p_294)"
"(let-values() p_294)"
"(if(path? p_294)"
"(let-values()"
"            (let-values (((base_296 name_297 dir?_298) (split-path p_294))) (path-replace-extension name_297 #\"\")))"
"(if(string? p_294)"
"            (let-values () (path-replace-extension p_294 #\"\"))"
"(if(if(pair? p_294)(eq?(car p_294) 'quote) #f)"
"(let-values()(cadr p_294))"
"(if(if(pair? p_294)(eq?(car p_294) 'file) #f)"
"(let-values()"
"(let-values(((base_299 name_300 dir?_301)(split-path(cadr p_294))))"
"                    (path-replace-extension name_300 #\"\")))"
"(if(if(pair? p_294)(eq?(car p_294) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_294) #\"\"))"
"(let-values() 'module))))))))))"
"(void)"
"(void)"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(lifted/1.1$19)"
"(make-required 'make-instance-instance(case-lambda((self_3)(apply missing-kw self_3 null))) #f #f))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_4 inspector4_5 namespace1_6 phase-shift2_7 self3_8 set-transformer!6_9)"
"(let-values(((ns_10) namespace1_6))"
"(let-values(((phase-shift_11) phase-shift2_7))"
"(let-values(((self_12) self3_8))"
"(let-values(((inspector_13) inspector4_5))"
"(let-values(((bulk-binding-registry_14) bulk-binding-registry5_4))"
"(let-values(((set-transformer!_15) set-transformer!6_9))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_10"
" phase-shift-id"
" phase-shift_11"
" self-id"
" self_12"
" inspector-id"
" inspector_13"
" bulk-binding-registry-id"
" bulk-binding-registry_14"
" set-transformer!-id"
" set-transformer!_15))))))))))"
"(define-values"
"(unpack14.1$1)"
"(lambda(given-kws_16 given-args_17)"
"(let-values(((bulk-binding-registry5_18)(car given-args_17))"
"((given-kws_19)(cdr given-kws_16))"
"((given-args_20)(cdr given-args_17)))"
"(let-values(((inspector4_21)(car given-args_20))"
"((given-kws_22)(cdr given-kws_19))"
"((given-args_23)(cdr given-args_20)))"
"(let-values(((namespace1_24)(car given-args_23))"
"((given-kws_25)(cdr given-kws_22))"
"((given-args_26)(cdr given-args_23)))"
"(let-values(((phase-shift2_27)(car given-args_26))"
"((given-kws_28)(cdr given-kws_25))"
"((given-args_29)(cdr given-args_26)))"
"(let-values(((self3_30)(car given-args_29))"
"((given-kws_31)(cdr given-kws_28))"
"((given-args_32)(cdr given-args_29)))"
"(let-values(((set-transformer!6_33)(car given-args_32)))"
"(make-instance-instance13.1"
" bulk-binding-registry5_18"
" inspector4_21"
" namespace1_24"
" phase-shift2_27"
" self3_30"
" set-transformer!6_33)))))))))"
"(define-values"
"(make-instance-instance15.1)"
"(lifted/1.1$19"
"(lambda(given-kws_34 given-argc_35)"
"(if(= given-argc_35 2)"
"(let-values(((l2_36) given-kws_34))"
"(if(pair? l2_36)"
"(if(eq?(car l2_36) '#:bulk-binding-registry)"
"(let-values(((l2_37)(cdr l2_36)))"
"(if(pair? l2_37)"
"(if(eq?(car l2_37) '#:inspector)"
"(let-values(((l2_38)(cdr l2_37)))"
"(if(pair? l2_38)"
"(if(eq?(car l2_38) '#:namespace)"
"(let-values(((l2_39)(cdr l2_38)))"
"(if(pair? l2_39)"
"(if(eq?(car l2_39) '#:phase-shift)"
"(let-values(((l2_40)(cdr l2_39)))"
"(if(pair? l2_40)"
"(if(eq?(car l2_40) '#:self)"
"(let-values(((l2_41)(cdr l2_40)))"
"(if(pair? l2_41)"
"(if(eq?(car l2_41) '#:set-transformer!)(null?(cdr l2_41)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_42 given-args_43)(unpack14.1$1 given-kws_42 given-args_43)))"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)))"
"(define-values"
"(lifted/2.1$8)"
"(make-required 'make-module-body-instance-instance(case-lambda((self_44)(apply missing-kw self_44 null))) #f #f))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_45)"
"(let-values(((set-transformer!_46) set-transformer!16_45))"
"(let-values()(1/make-instance 'body-instance #f set-transformer!-id set-transformer!_46)))))"
"(define-values"
"(unpack19.1)"
"(lambda(given-kws_47 given-args_48)"
"(let-values(((set-transformer!16_49)(car given-args_48)))"
"(make-module-body-instance-instance18.1 set-transformer!16_49))))"
"(define-values"
"(make-module-body-instance-instance20.1)"
"(lifted/2.1$8"
"(lambda(given-kws_50 given-argc_51)"
"(if(= given-argc_51 2)"
"(let-values(((l2_52) given-kws_50))"
"(if(pair? l2_52)(if(eq?(car l2_52) '#:set-transformer!)(null?(cdr l2_52)) #f) #f))"
" #f))"
"(case-lambda((given-kws_53 given-args_54)(unpack19.1 given-kws_53 given-args_54)))"
" '(#:set-transformer!)"
" '(#:set-transformer!)))"
"(void)"
"(void)"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(lifted/1.1$18)"
"(make-required 'make-eager-instance-instance(case-lambda((self_2)(apply missing-kw self_2 null))) #f #f))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_3 dest-phase2_4 inspector5_5 namespace1_6 self3_7)"
"(let-values(((ns_8) namespace1_6))"
"(let-values(((dest-phase_9) dest-phase2_4))"
"(let-values(((self_10) self3_7))"
"(let-values(((bulk-binding-registry_11) bulk-binding-registry4_3))"
"(let-values(((inspector_12) inspector5_5))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_8"
" dest-phase-id"
" dest-phase_9"
" self-id"
" self_10"
" bulk-binding-registry-id"
" bulk-binding-registry_11"
" inspector-id"
" inspector_12"
" 'swap-top-level-scopes"
" swap-top-level-scopes)))))))))"
"(define-values"
"(unpack12.1$1)"
"(lambda(given-kws_13 given-args_14)"
"(let-values(((bulk-binding-registry4_15)(car given-args_14))"
"((given-kws_16)(cdr given-kws_13))"
"((given-args_17)(cdr given-args_14)))"
"(let-values(((dest-phase2_18)(car given-args_17))"
"((given-kws_19)(cdr given-kws_16))"
"((given-args_20)(cdr given-args_17)))"
"(let-values(((inspector5_21)(car given-args_20))"
"((given-kws_22)(cdr given-kws_19))"
"((given-args_23)(cdr given-args_20)))"
"(let-values(((namespace1_24)(car given-args_23))"
"((given-kws_25)(cdr given-kws_22))"
"((given-args_26)(cdr given-args_23)))"
"(let-values(((self3_27)(car given-args_26)))"
"(make-eager-instance-instance11.1"
" bulk-binding-registry4_15"
" dest-phase2_18"
" inspector5_21"
" namespace1_24"
" self3_27))))))))"
"(define-values"
"(make-eager-instance-instance13.1)"
"(lifted/1.1$18"
"(lambda(given-kws_28 given-argc_29)"
"(if(= given-argc_29 2)"
"(let-values(((l2_30) given-kws_28))"
"(if(pair? l2_30)"
"(if(eq?(car l2_30) '#:bulk-binding-registry)"
"(let-values(((l2_31)(cdr l2_30)))"
"(if(pair? l2_31)"
"(if(eq?(car l2_31) '#:dest-phase)"
"(let-values(((l2_32)(cdr l2_31)))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:inspector)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)"
"(if(eq?(car l2_33) '#:namespace)"
"(let-values(((l2_34)(cdr l2_33)))"
"(if(pair? l2_34)(if(eq?(car l2_34) '#:self)(null?(cdr l2_34)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_35 given-args_36)(unpack12.1$1 given-kws_35 given-args_36)))"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)))"
"(void)"
"(void)"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_1)"
"(let-values(((or-part_2)(number? datum_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_1)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_1)))(if or-part_4 or-part_4(bytes? datum_1)))))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table$1)(primitive-table '#%kernel))"
"(define-values(datum->syntax$3)(hash-ref kernel-primitive-table$1 'datum->syntax))"
"(define-values(syntax-property$2)(hash-ref kernel-primitive-table$1 'syntax-property))"
"(define-values(syntax-e$3)(hash-ref kernel-primitive-table$1 'syntax-e))"
"(define-values(syntax?$2)(hash-ref kernel-primitive-table$1 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_294)"
"(lambda(d3_295 srcloc1_296 srcloc2_297)"
"(let-values(((d_298) d3_295))"
"(let-values(((srcloc_299)(if srcloc2_297 srcloc1_296 #f)))"
"(let-values()(datum->syntax$3 #f d_298 srcloc_299)))))))"
"(case-lambda"
"((d_300)(datum->correlated4_294 d_300 #f #f))"
"((d_301 srcloc1_302)(datum->correlated4_294 d_301 srcloc1_302 #t)))))"
"(define-values(correlated-e)(lambda(e_303)(if(syntax?$2 e_303)(syntax-e$3 e_303) e_303)))"
"(define-values(correlated-cadr)(lambda(e_304)(car(correlated-e(cdr(correlated-e e_304))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_305)(let-values(((l_306)(correlated-e e_305)))(if(list? l_306)(length l_306) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_307)"
"((letrec-values(((loop_308)"
"(lambda(e_309)"
"(if(pair? e_309)"
"(let-values()(cons(car e_309)(loop_308(cdr e_309))))"
"(if(null? e_309)"
"(let-values() null)"
"(if(syntax?$2 e_309)"
"(let-values()(loop_308(syntax-e$3 e_309)))"
"                              (let-values () (error 'correlate->list \"not a list\"))))))))"
" loop_308)"
" e_307)))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_314 k_315)(syntax-property$2 e_314 k_315))"
"((e_316 k_317 v_318)(syntax-property$2 e_316 k_317 v_318))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_319)"
"(if(pair? s_319)"
"(let-values()(let-values(((r_320)(to-syntax-list.1$1(cdr s_319))))(if r_320(cons(car s_319) r_320) #f)))"
"(if(syntax?$2 s_319)"
"(let-values()(to-syntax-list.1$1(syntax-e$3 s_319)))"
"(if(list? s_319)(let-values() s_319)(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table)(1/primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(syntax-property-symbol-keys$1)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(syntax-position$1)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(syntax-column$1)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(syntax-source$1)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(syntax-e$2)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(srcloc->vector)"
"(lambda(s_16)"
"(if s_16"
"(vector(srcloc-source s_16)(srcloc-line s_16)(srcloc-column s_16)(srcloc-position s_16)(srcloc-span s_16))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(let-values(((e_3)"
"(if(if(datum-has-elements? s-exp_2)(syntax-srcloc stx_1) #f)"
"(let-values()"
"(datum->correlated"
"(correlated-e(datum->correlated s-exp_2))"
"(srcloc->vector(syntax-srcloc stx_1))))"
"(let-values()(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1)))))))"
"(let-values(((maybe-n_4)(syntax-property$1 stx_1 'inferred-name)))"
"(if maybe-n_4"
"(correlated-property e_3 'inferred-name(if(syntax?$1 maybe-n_4)(syntax->datum$1 maybe-n_4) maybe-n_4))"
" e_3)))))"
"(void)"
"(void)"
"(define-values"
"(compile$2)"
"(let-values(((compile7_2)"
"(lambda(in-s5_3 cctx6_4 name1_5 result-used?2_6 name3_7 result-used?4_8)"
"(let-values(((in-s_9) in-s5_3))"
"(let-values(((cctx_10) cctx6_4))"
"(let-values(((name_11)(if name3_7 name1_5 #f)))"
"(let-values(((result-used?_12)(if result-used?4_8 result-used?2_6 #t)))"
"(let-values()"
"(let-values(((compile_13)"
"(lambda(s_14 name_15 result-used?_16)"
"(compile$2 s_14 cctx_10 name_15 result-used?_16))))"
"(let-values(((s_17)(syntax-disarm$1 in-s_9)))"
"(if(pair?(syntax-e$1 s_17))"
"(let-values()"
"(let-values(((phase_18)(compile-context-phase cctx_10)))"
"(let-values(((core-sym_19)(core-form-sym s_17 phase_18)))"
"(let-values(((tmp_20) core-sym_19))"
"(let-values(((index_21)"
"(if(symbol? tmp_20)"
"(hash-ref"
" '#hasheq((#%app . 5)"
"(with-continuation-mark . 7)"
"(begin . 9)"
"(module . 2)"
"(#%expression . 13)"
"(set! . 10)"
"(let-values . 11)"
"(if . 6)"
"(quote-syntax . 15)"
"(quote . 14)"
"(letrec-values . 12)"
"(begin0 . 8)"
"(#%variable-reference . 16)"
"(lambda . 3)"
"(case-lambda . 4)"
"(#%top . 17)"
"(module* . 2))"
" tmp_20"
"(lambda() 0))"
"(if(equal? tmp_20 #f)(let-values() 1)(let-values() 0)))))"
"(if(unsafe-fx< index_21 8)"
"(if(unsafe-fx< index_21 3)"
"(if(unsafe-fx< index_21 1)"
"                                                  (let-values () (error \"unrecognized core form:\" core-sym_19))"
"(if(unsafe-fx< index_21 2)"
"(let-values()"
"(error"
"                                                       \"internal error; not a core form:\""
" s_17"
"                                                       \"at phase:\""
" phase_18))"
"                                                    (let-values () (error \"not a core expression form:\" s_17))))"
"(if(unsafe-fx< index_21 5)"
"(if(unsafe-fx< index_21 4)"
"(let-values()"
"(if result-used?_12"
"(let-values()"
"(let-values(((ok?_22 lambda28_23 formals29_24 body30_25)"
"(let-values(((s_38) s_17))"
"(let-values(((orig-s_39) s_38))"
"(let-values(((lambda28_40"
" formals29_41"
" body30_42)"
"(let-values(((s_43)"
"(if(syntax?$1"
" s_38)"
"(syntax-e$1"
" s_38)"
" s_38)))"
"(if(pair? s_43)"
"(let-values(((lambda31_44)"
"(let-values(((s_47)"
"(car"
" s_43)))"
" s_47))"
"((formals32_45"
" body33_46)"
"(let-values(((s_48)"
"(cdr"
" s_43)))"
"(let-values(((s_49)"
"(if(syntax?$1"
" s_48)"
"(syntax-e$1"
" s_48)"
" s_48)))"
"(if(pair?"
" s_49)"
"(let-values(((formals34_50)"
"(let-values(((s_52)"
"(car"
" s_49)))"
" s_52))"
"((body35_51)"
"(let-values(((s_53)"
"(cdr"
" s_49)))"
"(let-values(((s_54)"
"(if(syntax?$1"
" s_53)"
"(syntax-e$1"
" s_53)"
" s_53)))"
"(let-values(((flat-s_55)"
"(to-syntax-list.1"
" s_54)))"
"(if(not"
" flat-s_55)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_39))"
"(if(null?"
" flat-s_55)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_39))"
"(let-values()"
" flat-s_55))))))))"
"(values"
" formals34_50"
" body35_51))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_39))))))"
"(values"
" lambda31_44"
" formals32_45"
" body33_46))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_39)))))"
"(values"
" #t"
" lambda28_40"
" formals29_41"
" body30_42))))))"
"(add-lambda-properties"
"(correlate*"
" s_17"
"(list*"
" 'lambda"
"(compile-lambda formals29_24 body30_25 cctx_10)))"
" name_11"
" s_17)))"
"(let-values()"
"(correlate* s_17(list 'quote(syntax->datum$1 s_17))))))"
"(let-values()"
"(if result-used?_12"
"(let-values()"
"(let-values(((ok?_56 case-lambda36_57 formals37_58 body38_59)"
"(let-values(((s_72) s_17))"
"(let-values(((orig-s_73) s_72))"
"(let-values(((case-lambda36_74"
" formals37_75"
" body38_76)"
"(let-values(((s_77)"
"(if(syntax?$1"
" s_72)"
"(syntax-e$1"
" s_72)"
" s_72)))"
"(if(pair? s_77)"
"(let-values(((case-lambda39_78)"
"(let-values(((s_81)"
"(car"
" s_77)))"
" s_81))"
"((formals40_79"
" body41_80)"
"(let-values(((s_82)"
"(cdr"
" s_77)))"
"(let-values(((s_83)"
"(if(syntax?$1"
" s_82)"
"(syntax-e$1"
" s_82)"
" s_82)))"
"(let-values(((flat-s_84)"
"(to-syntax-list.1"
" s_83)))"
"(if(not"
" flat-s_84)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_73))"
"(let-values()"
"(let-values(((formals_85"
" body_86)"
"(let-values(((lst_87)"
" flat-s_84))"
"(begin"
"(if(list?"
" lst_87)"
"(void)"
"(let-values()"
"(in-list"
" lst_87)))"
"((letrec-values(((for-loop_88)"
"(lambda(formals_89"
" body_90"
" lst_91)"
"(if(pair?"
" lst_91)"
"(let-values(((s_92)"
"(unsafe-car"
" lst_91)))"
"(let-values(((formals_93"
" body_94)"
"(let-values(((formals_95)"
" formals_89)"
"((body_96)"
" body_90))"
"(let-values(((formals_97"
" body_98)"
"(let-values()"
"(let-values(((formals44_99"
" body45_100)"
"(let-values()"
"(let-values(((s_101)"
"(if(syntax?$1"
" s_92)"
"(syntax-e$1"
" s_92)"
" s_92)))"
"(if(pair?"
" s_101)"
"(let-values(((formals42_102)"
"(let-values(((s_104)"
"(car"
" s_101)))"
" s_104))"
"((body43_103)"
"(let-values(((s_105)"
"(cdr"
" s_101)))"
"(let-values(((s_106)"
"(if(syntax?$1"
" s_105)"
"(syntax-e$1"
" s_105)"
" s_105)))"
"(let-values(((flat-s_107)"
"(to-syntax-list.1"
" s_106)))"
"(if(not"
" flat-s_107)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_73))"
"(if(null?"
" flat-s_107)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_73))"
"(let-values()"
" flat-s_107))))))))"
"(values"
" formals42_102"
" body43_103))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_73))))))"
"(values"
"(cons"
" formals44_99"
" formals_95)"
"(cons"
" body45_100"
" body_96))))))"
"(values"
" formals_97"
" body_98)))))"
"(for-loop_88"
" formals_93"
" body_94"
"(unsafe-cdr"
" lst_91))))"
"(values"
" formals_89"
" body_90)))))"
" for-loop_88)"
" null"
" null"
" lst_87)))))"
"(values"
"(alt-reverse"
" formals_85)"
"(alt-reverse"
" body_86))))))))))"
"(values"
" case-lambda39_78"
" formals40_79"
" body41_80))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_73)))))"
"(values"
" #t"
" case-lambda36_74"
" formals37_75"
" body38_76))))))"
"(add-lambda-properties"
"(correlate*"
" s_17"
"(list*"
" 'case-lambda"
"(alt-reverse"
"(let-values(((lst_108) formals37_58)"
"((lst_109) body38_59))"
"(begin"
"(if(list? lst_108)"
"(void)"
"(let-values()(in-list lst_108)))"
"(if(list? lst_109)"
"(void)"
"(let-values()(in-list lst_109)))"
"((letrec-values(((for-loop_110)"
"(lambda(fold-var_111"
" lst_112"
" lst_113)"
"(if(if(pair? lst_112)"
"(pair? lst_113)"
" #f)"
"(let-values(((formals_114)"
"(unsafe-car"
" lst_112))"
"((body_115)"
"(unsafe-car"
" lst_113)))"
"(let-values(((fold-var_116)"
"(let-values(((fold-var_117)"
" fold-var_111))"
"(let-values(((fold-var_118)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
" formals_114"
" body_115"
" cctx_10))"
" fold-var_117))))"
"(values"
" fold-var_118)))))"
"(for-loop_110"
" fold-var_116"
"(unsafe-cdr lst_112)"
"(unsafe-cdr lst_113))))"
" fold-var_111))))"
" for-loop_110)"
" null"
" lst_108"
" lst_109))))))"
" name_11"
" s_17)))"
"(let-values()"
"(correlate* s_17(list 'quote(syntax->datum$1 s_17)))))))"
"(if(unsafe-fx< index_21 6)"
"(let-values()"
"(let-values(((ok?_119 #%app46_120 rest47_121)"
"(let-values(((s_133) s_17))"
"(let-values(((orig-s_134) s_133))"
"(let-values(((#%app46_135 rest47_136)"
"(let-values(((s_137)"
"(if(syntax?$1"
" s_133)"
"(syntax-e$1 s_133)"
" s_133)))"
"(if(pair? s_137)"
"(let-values(((#%app48_138)"
"(let-values(((s_140)"
"(car"
" s_137)))"
" s_140))"
"((rest49_139)"
"(let-values(((s_141)"
"(cdr"
" s_137)))"
" s_141)))"
"(values"
" #%app48_138"
" rest49_139))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_134)))))"
"(values #t #%app46_135 rest47_136))))))"
"(let-values(((es_132)"
"(let-values(((es_142) rest47_121))"
"(if(syntax?$1 es_142)"
"(syntax->list$1(syntax-disarm$1 es_142))"
" es_142))))"
"(alt-reverse"
"(let-values(((lst_143) es_132))"
"(begin"
"(if(list? lst_143)"
"(void)"
"(let-values()(in-list lst_143)))"
"((letrec-values(((for-loop_144)"
"(lambda(fold-var_145 lst_146)"
"(if(pair? lst_146)"
"(let-values(((s_147)"
"(unsafe-car"
" lst_146)))"
"(let-values(((fold-var_148)"
"(let-values(((fold-var_149)"
" fold-var_145))"
"(let-values(((fold-var_150)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_13"
" s_147"
" #f"
" #t))"
" fold-var_149))))"
"(values"
" fold-var_150)))))"
"(for-loop_144"
" fold-var_148"
"(unsafe-cdr lst_146))))"
" fold-var_145))))"
" for-loop_144)"
" null"
" lst_143)))))))"
"(if(unsafe-fx< index_21 7)"
"(let-values()"
"(let-values(((ok?_151 if50_152 tst51_153 thn52_154 els53_155)"
"(let-values(((s_171) s_17))"
"(let-values(((orig-s_172) s_171))"
"(let-values(((if50_173"
" tst51_174"
" thn52_175"
" els53_176)"
"(let-values(((s_177)"
"(if(syntax?$1"
" s_171)"
"(syntax-e$1"
" s_171)"
" s_171)))"
"(if(pair? s_177)"
"(let-values(((if54_178)"
"(let-values(((s_182)"
"(car"
" s_177)))"
" s_182))"
"((tst55_179"
" thn56_180"
" els57_181)"
"(let-values(((s_183)"
"(cdr"
" s_177)))"
"(let-values(((s_184)"
"(if(syntax?$1"
" s_183)"
"(syntax-e$1"
" s_183)"
" s_183)))"
"(if(pair?"
" s_184)"
"(let-values(((tst58_185)"
"(let-values(((s_188)"
"(car"
" s_184)))"
" s_188))"
"((thn59_186"
" els60_187)"
"(let-values(((s_189)"
"(cdr"
" s_184)))"
"(let-values(((s_190)"
"(if(syntax?$1"
" s_189)"
"(syntax-e$1"
" s_189)"
" s_189)))"
"(if(pair?"
" s_190)"
"(let-values(((thn61_191)"
"(let-values(((s_193)"
"(car"
" s_190)))"
" s_193))"
"((els62_192)"
"(let-values(((s_194)"
"(cdr"
" s_190)))"
"(let-values(((s_195)"
"(if(syntax?$1"
" s_194)"
"(syntax-e$1"
" s_194)"
" s_194)))"
"(if(pair?"
" s_195)"
"(let-values(((els63_196)"
"(let-values(((s_197)"
"(car"
" s_195)))"
" s_197))"
"(()"
"(let-values(((s_198)"
"(cdr"
" s_195)))"
"(let-values(((s_199)"
"(if(syntax?$1"
" s_198)"
"(syntax-e$1"
" s_198)"
" s_198)))"
"(if(null?"
" s_199)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_172))))))"
"(values"
" els63_196))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_172))))))"
"(values"
" thn61_191"
" els62_192))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_172))))))"
"(values"
" tst58_185"
" thn59_186"
" els60_187))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_172))))))"
"(values"
" if54_178"
" tst55_179"
" thn56_180"
" els57_181))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_172)))))"
"(values"
" #t"
" if50_173"
" tst51_174"
" thn52_175"
" els53_176))))))"
"(let-values(((tst-e_170)(compile_13 tst51_153 #f #f)))"
"(if(eq?(correlated-e tst-e_170) #t)"
"(let-values()"
"(compile_13 thn52_154 name_11 result-used?_12))"
"(if(eq?(correlated-e tst-e_170) #f)"
"(let-values()"
"(compile_13 els53_155 name_11 result-used?_12))"
"(let-values()"
"(correlate*"
" s_17"
"(list"
" 'if"
" tst-e_170"
"(compile_13 thn52_154 name_11 result-used?_12)"
"(compile_13"
" els53_155"
" name_11"
" result-used?_12)))))))))"
"(let-values()"
"(let-values(((ok?_200 if64_201 key65_202 val66_203 body67_204)"
"(let-values(((s_219) s_17))"
"(let-values(((orig-s_220) s_219))"
"(let-values(((if64_221"
" key65_222"
" val66_223"
" body67_224)"
"(let-values(((s_225)"
"(if(syntax?$1"
" s_219)"
"(syntax-e$1"
" s_219)"
" s_219)))"
"(if(pair? s_225)"
"(let-values(((if68_226)"
"(let-values(((s_230)"
"(car"
" s_225)))"
" s_230))"
"((key69_227"
" val70_228"
" body71_229)"
"(let-values(((s_231)"
"(cdr"
" s_225)))"
"(let-values(((s_232)"
"(if(syntax?$1"
" s_231)"
"(syntax-e$1"
" s_231)"
" s_231)))"
"(if(pair?"
" s_232)"
"(let-values(((key72_233)"
"(let-values(((s_236)"
"(car"
" s_232)))"
" s_236))"
"((val73_234"
" body74_235)"
"(let-values(((s_237)"
"(cdr"
" s_232)))"
"(let-values(((s_238)"
"(if(syntax?$1"
" s_237)"
"(syntax-e$1"
" s_237)"
" s_237)))"
"(if(pair?"
" s_238)"
"(let-values(((val75_239)"
"(let-values(((s_241)"
"(car"
" s_238)))"
" s_241))"
"((body76_240)"
"(let-values(((s_242)"
"(cdr"
" s_238)))"
"(let-values(((s_243)"
"(if(syntax?$1"
" s_242)"
"(syntax-e$1"
" s_242)"
" s_242)))"
"(if(pair?"
" s_243)"
"(let-values(((body77_244)"
"(let-values(((s_245)"
"(car"
" s_243)))"
" s_245))"
"(()"
"(let-values(((s_246)"
"(cdr"
" s_243)))"
"(let-values(((s_247)"
"(if(syntax?$1"
" s_246)"
"(syntax-e$1"
" s_246)"
" s_246)))"
"(if(null?"
" s_247)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_220))))))"
"(values"
" body77_244))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_220))))))"
"(values"
" val75_239"
" body76_240))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_220))))))"
"(values"
" key72_233"
" val73_234"
" body74_235))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_220))))))"
"(values"
" if68_226"
" key69_227"
" val70_228"
" body71_229))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_220)))))"
"(values"
" #t"
" if64_221"
" key65_222"
" val66_223"
" body67_224))))))"
"(correlate*"
" s_17"
"(list"
" 'with-continuation-mark"
"(compile_13 key65_202 #f #t)"
"(compile_13 val66_203 #f #t)"
"(compile_13 body67_204 name_11 result-used?_12)))))))))"
"(if(unsafe-fx< index_21 12)"
"(if(unsafe-fx< index_21 9)"
"(let-values()"
"(let-values(((ok?_248 begin078_249 e79_250)"
"(let-values(((s_262) s_17))"
"(let-values(((orig-s_263) s_262))"
"(let-values(((begin078_264 e79_265)"
"(let-values(((s_266)"
"(if(syntax?$1 s_262)"
"(syntax-e$1 s_262)"
" s_262)))"
"(if(pair? s_266)"
"(let-values(((begin080_267)"
"(let-values(((s_269)"
"(car"
" s_266)))"
" s_269))"
"((e81_268)"
"(let-values(((s_270)"
"(cdr"
" s_266)))"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_270)"
"(syntax-e$1"
" s_270)"
" s_270)))"
"(let-values(((flat-s_272)"
"(to-syntax-list.1"
" s_271)))"
"(if(not"
" flat-s_272)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_263))"
"(if(null?"
" flat-s_272)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_263))"
"(let-values()"
" flat-s_272))))))))"
"(values begin080_267 e81_268))"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_263)))))"
"(values #t begin078_264 e79_265))))))"
"(let-values(((es_261) e79_250))"
"(correlate*"
" s_17"
"(list*"
" 'begin0"
"(compile_13(car es_261) name_11 result-used?_12)"
"(alt-reverse"
"(let-values(((lst_273)(cdr es_261)))"
"(begin"
"(if(list? lst_273)"
"(void)"
"(let-values()(in-list lst_273)))"
"((letrec-values(((for-loop_274)"
"(lambda(fold-var_275 lst_276)"
"(if(pair? lst_276)"
"(let-values(((e_277)"
"(unsafe-car"
" lst_276)))"
"(let-values(((fold-var_278)"
"(let-values(((fold-var_279)"
" fold-var_275))"
"(let-values(((fold-var_280)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_13"
" e_277"
" #f"
" #f))"
" fold-var_279))))"
"(values"
" fold-var_280)))))"
"(for-loop_274"
" fold-var_278"
"(unsafe-cdr lst_276))))"
" fold-var_275))))"
" for-loop_274)"
" null"
" lst_273)))))))))"
"(if(unsafe-fx< index_21 10)"
"(let-values()"
"(let-values(((ok?_281 begin82_282 e83_283)"
"(let-values(((s_294) s_17))"
"(let-values(((orig-s_295) s_294))"
"(let-values(((begin82_296 e83_297)"
"(let-values(((s_298)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1 s_294)"
" s_294)))"
"(if(pair? s_298)"
"(let-values(((begin84_299)"
"(let-values(((s_301)"
"(car"
" s_298)))"
" s_301))"
"((e85_300)"
"(let-values(((s_302)"
"(cdr"
" s_298)))"
"(let-values(((s_303)"
"(if(syntax?$1"
" s_302)"
"(syntax-e$1"
" s_302)"
" s_302)))"
"(let-values(((flat-s_304)"
"(to-syntax-list.1"
" s_303)))"
"(if(not"
" flat-s_304)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_295))"
"(if(null?"
" flat-s_304)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_295))"
"(let-values()"
" flat-s_304))))))))"
"(values"
" begin84_299"
" e85_300))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_295)))))"
"(values #t begin82_296 e83_297))))))"
"(correlate*"
" s_17"
"(compile-begin e83_283 cctx_10 name_11 result-used?_12))))"
"(if(unsafe-fx< index_21 11)"
"(let-values()"
"(let-values(((ok?_305 set!86_306 id87_307 rhs88_308)"
"(let-values(((s_321) s_17))"
"(let-values(((orig-s_322) s_321))"
"(let-values(((set!86_323 id87_324 rhs88_325)"
"(let-values(((s_326)"
"(if(syntax?$1"
" s_321)"
"(syntax-e$1"
" s_321)"
" s_321)))"
"(if(pair? s_326)"
"(let-values(((set!89_327)"
"(let-values(((s_330)"
"(car"
" s_326)))"
" s_330))"
"((id90_328"
" rhs91_329)"
"(let-values(((s_331)"
"(cdr"
" s_326)))"
"(let-values(((s_332)"
"(if(syntax?$1"
" s_331)"
"(syntax-e$1"
" s_331)"
" s_331)))"
"(if(pair?"
" s_332)"
"(let-values(((id92_333)"
"(let-values(((s_335)"
"(car"
" s_332)))"
"(if(let-values(((or-part_336)"
"(if(syntax?$1"
" s_335)"
"(symbol?"
"(syntax-e$1"
" s_335))"
" #f)))"
"(if or-part_336"
" or-part_336"
"(symbol?"
" s_335)))"
" s_335"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"not an identifier\""
" orig-s_322"
" s_335))))"
"((rhs93_334)"
"(let-values(((s_337)"
"(cdr"
" s_332)))"
"(let-values(((s_338)"
"(if(syntax?$1"
" s_337)"
"(syntax-e$1"
" s_337)"
" s_337)))"
"(if(pair?"
" s_338)"
"(let-values(((rhs94_339)"
"(let-values(((s_340)"
"(car"
" s_338)))"
" s_340))"
"(()"
"(let-values(((s_341)"
"(cdr"
" s_338)))"
"(let-values(((s_342)"
"(if(syntax?$1"
" s_341)"
"(syntax-e$1"
" s_341)"
" s_341)))"
"(if(null?"
" s_342)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_322))))))"
"(values"
" rhs94_339))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_322))))))"
"(values"
" id92_333"
" rhs93_334))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_322))))))"
"(values"
" set!89_327"
" id90_328"
" rhs91_329))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_322)))))"
"(values"
" #t"
" set!86_323"
" id87_324"
" rhs88_325))))))"
"(correlate*"
" s_17"
"(let-values(((...der/compile/expr.rkt:108:27_343)"
" compile-identifier27.1)"
"((temp95_344) id87_307)"
"((cctx96_345) cctx_10)"
"((temp97_346)"
"(compile_13 rhs88_308 id87_307 #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1"
" temp97_346"
" #t"
" #f"
" #f"
" temp95_344"
" cctx96_345)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:108:27_343"
" keyword-procedure-extract"
" '(#:set-to)"
" 4)"
" '(#:set-to)"
"(list temp97_346)"
" temp95_344"
" cctx96_345))))))"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:111:9_347)"
" compile-let18.1)"
"((core-sym98_348) core-sym_19)"
"((s99_349) s_17)"
"((cctx100_350) cctx_10)"
"((name101_351) name_11)"
"((temp102_352) #f)"
"((result-used?103_353) result-used?_12))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-let18.1))"
"(compile-let16.1"
" temp102_352"
" core-sym98_348"
" s99_349"
" cctx100_350"
" name101_351"
" result-used?103_353)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:111:9_347"
" keyword-procedure-extract"
" '(#:rec?)"
" 7)"
" '(#:rec?)"
"(list temp102_352)"
" core-sym98_348"
" s99_349"
" cctx100_350"
" name101_351"
" result-used?103_353)))))))"
"(if(unsafe-fx< index_21 14)"
"(if(unsafe-fx< index_21 13)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:113:9_354) compile-let18.1)"
"((core-sym104_355) core-sym_19)"
"((s105_356) s_17)"
"((cctx106_357) cctx_10)"
"((name107_358) name_11)"
"((temp108_359) #f)"
"((result-used?109_360) result-used?_12))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-let18.1))"
"(compile-let16.1"
" temp108_359"
" core-sym104_355"
" s105_356"
" cctx106_357"
" name107_358"
" result-used?109_360)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:113:9_354"
" keyword-procedure-extract"
" '(#:rec?)"
" 7)"
" '(#:rec?)"
"(list temp108_359)"
" core-sym104_355"
" s105_356"
" cctx106_357"
" name107_358"
" result-used?109_360))))"
"(let-values()"
"(let-values(((ok?_361 #%expression110_362 e111_363)"
"(let-values(((s_374) s_17))"
"(let-values(((orig-s_375) s_374))"
"(let-values(((#%expression110_376 e111_377)"
"(let-values(((s_378)"
"(if(syntax?$1"
" s_374)"
"(syntax-e$1 s_374)"
" s_374)))"
"(if(pair? s_378)"
"(let-values(((#%expression112_379)"
"(let-values(((s_381)"
"(car"
" s_378)))"
" s_381))"
"((e113_380)"
"(let-values(((s_382)"
"(cdr"
" s_378)))"
"(let-values(((s_383)"
"(if(syntax?$1"
" s_382)"
"(syntax-e$1"
" s_382)"
" s_382)))"
"(if(pair?"
" s_383)"
"(let-values(((e114_384)"
"(let-values(((s_385)"
"(car"
" s_383)))"
" s_385))"
"(()"
"(let-values(((s_386)"
"(cdr"
" s_383)))"
"(let-values(((s_387)"
"(if(syntax?$1"
" s_386)"
"(syntax-e$1"
" s_386)"
" s_386)))"
"(if(null?"
" s_387)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_375))))))"
"(values"
" e114_384))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_375))))))"
"(values"
" #%expression112_379"
" e113_380))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_375)))))"
"(values #t #%expression110_376 e111_377))))))"
"(compile_13 e111_363 name_11 result-used?_12))))"
"(if(unsafe-fx< index_21 15)"
"(let-values()"
"(let-values(((ok?_388 quote115_389 datum116_390)"
"(let-values(((s_402) s_17))"
"(let-values(((orig-s_403) s_402))"
"(let-values(((quote115_404 datum116_405)"
"(let-values(((s_406)"
"(if(syntax?$1"
" s_402)"
"(syntax-e$1 s_402)"
" s_402)))"
"(if(pair? s_406)"
"(let-values(((quote117_407)"
"(let-values(((s_409)"
"(car"
" s_406)))"
" s_409))"
"((datum118_408)"
"(let-values(((s_410)"
"(cdr"
" s_406)))"
"(let-values(((s_411)"
"(if(syntax?$1"
" s_410)"
"(syntax-e$1"
" s_410)"
" s_410)))"
"(if(pair?"
" s_411)"
"(let-values(((datum119_412)"
"(let-values(((s_413)"
"(car"
" s_411)))"
" s_413))"
"(()"
"(let-values(((s_414)"
"(cdr"
" s_411)))"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(if(null?"
" s_415)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_403))))))"
"(values"
" datum119_412))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_403))))))"
"(values"
" quote117_407"
" datum118_408))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_403)))))"
"(values #t quote115_404 datum116_405))))))"
"(let-values(((datum_401)(syntax->datum$1 datum116_390)))"
"(if(self-quoting-in-linklet? datum_401)"
"(let-values()(correlate* s_17 datum_401))"
"(let-values()"
"(correlate* s_17(list 'quote datum_401)))))))"
"(if(unsafe-fx< index_21 16)"
"(let-values()"
"(let-values(((ok?_416"
" quote-syntax120_417"
" datum121_418"
" _122_419)"
"(let-values(((s_432) s_17))"
"(let-values(((orig-s_433) s_432))"
"(let-values(((quote-syntax120_434"
" datum121_435"
" _122_436)"
"(let-values(((s_437)"
"(if(syntax?$1"
" s_432)"
"(syntax-e$1"
" s_432)"
" s_432)))"
"(if(pair? s_437)"
"(let-values(((quote-syntax123_438)"
"(let-values(((s_441)"
"(car"
" s_437)))"
" s_441))"
"((datum124_439"
" _125_440)"
"(let-values(((s_442)"
"(cdr"
" s_437)))"
"(let-values(((s_443)"
"(if(syntax?$1"
" s_442)"
"(syntax-e$1"
" s_442)"
" s_442)))"
"(if(pair?"
" s_443)"
"(let-values(((datum126_444)"
"(let-values(((s_446)"
"(car"
" s_443)))"
" s_446))"
"((_127_445)"
"(let-values(((s_447)"
"(cdr"
" s_443)))"
" s_447)))"
"(values"
" datum126_444"
" _127_445))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_433))))))"
"(values"
" quote-syntax123_438"
" datum124_439"
" _125_440))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_433)))))"
"(values"
" #t"
" quote-syntax120_434"
" datum121_435"
" _122_436))))))"
"(if result-used?_12"
"(compile-quote-syntax datum121_418 cctx_10)"
"(correlate*"
" s_17"
"(list 'quote(syntax->datum$1 datum121_418))))))"
"(if(unsafe-fx< index_21 17)"
"(let-values()"
"(let-values(((ok?_448 #%variable-reference128_449 id129_450)"
"(let-values(((s_478) s_17))"
"(if(let-values(((s_479)"
"(if(syntax?$1 s_478)"
"(syntax-e$1 s_478)"
" s_478)))"
"(if(pair? s_479)"
"(if(let-values(((s_480)"
"(car s_479)))"
" #t)"
"(let-values(((s_481)(cdr s_479)))"
"(let-values(((s_482)"
"(if(syntax?$1"
" s_481)"
"(syntax-e$1 s_481)"
" s_481)))"
"(if(pair? s_482)"
"(if(let-values(((s_483)"
"(car"
" s_482)))"
"(if(syntax?$1 s_483)"
"(symbol?"
"(syntax-e$1 s_483))"
" #f))"
"(let-values(((s_484)"
"(cdr s_482)))"
"(let-values(((s_485)"
"(if(syntax?$1"
" s_484)"
"(syntax-e$1"
" s_484)"
" s_484)))"
"(null? s_485)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_486) s_478))"
"(let-values(((#%variable-reference128_487"
" id129_488)"
"(let-values(((s_489)"
"(if(syntax?$1"
" s_478)"
"(syntax-e$1"
" s_478)"
" s_478)))"
"(let-values(((#%variable-reference130_490)"
"(let-values(((s_492)"
"(car"
" s_489)))"
" s_492))"
"((id131_491)"
"(let-values(((s_493)"
"(cdr"
" s_489)))"
"(let-values(((s_494)"
"(if(syntax?$1"
" s_493)"
"(syntax-e$1"
" s_493)"
" s_493)))"
"(let-values(((id132_495)"
"(let-values(((s_496)"
"(car"
" s_494)))"
" s_496))"
"(()"
"(let-values(((s_497)"
"(cdr"
" s_494)))"
"(let-values(((s_498)"
"(if(syntax?$1"
" s_497)"
"(syntax-e$1"
" s_497)"
" s_497)))"
"(values)))))"
"(values"
" id132_495))))))"
"(values"
" #%variable-reference130_490"
" id131_491)))))"
"(values"
" #t"
" #%variable-reference128_487"
" id129_488)))"
"(values #f #f #f)))))"
"(let-values(((ok?_461"
" #%variable-reference133_462"
" #%top134_463"
" id135_464)"
"(let-values(((s_499) s_17))"
"(if(if(not ok?_448)"
"(let-values(((s_500)"
"(if(syntax?$1 s_499)"
"(syntax-e$1 s_499)"
" s_499)))"
"(if(pair? s_500)"
"(if(let-values(((s_501)"
"(car s_500)))"
" #t)"
"(let-values(((s_502)"
"(cdr s_500)))"
"(let-values(((s_503)"
"(if(syntax?$1"
" s_502)"
"(syntax-e$1"
" s_502)"
" s_502)))"
"(if(pair? s_503)"
"(if(let-values(((s_504)"
"(car"
" s_503)))"
"(let-values(((s_505)"
"(if(syntax?$1"
" s_504)"
"(syntax-e$1"
" s_504)"
" s_504)))"
"(if(pair? s_505)"
"(if(let-values(((s_506)"
"(car"
" s_505)))"
" #t)"
"(let-values(((s_507)"
"(cdr"
" s_505)))"
"(if(syntax?$1"
" s_507)"
"(symbol?"
"(syntax-e$1"
" s_507))"
" #f))"
" #f)"
" #f)))"
"(let-values(((s_508)"
"(cdr"
" s_503)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(null? s_509)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_510) s_499))"
"(let-values(((#%variable-reference133_511"
" #%top134_512"
" id135_513)"
"(let-values(((s_514)"
"(if(syntax?$1"
" s_499)"
"(syntax-e$1"
" s_499)"
" s_499)))"
"(let-values(((#%variable-reference136_515)"
"(let-values(((s_518)"
"(car"
" s_514)))"
" s_518))"
"((#%top137_516"
" id138_517)"
"(let-values(((s_519)"
"(cdr"
" s_514)))"
"(let-values(((s_520)"
"(if(syntax?$1"
" s_519)"
"(syntax-e$1"
" s_519)"
" s_519)))"
"(let-values(((#%top139_521"
" id140_522)"
"(let-values(((s_523)"
"(car"
" s_520)))"
"(let-values(((s_524)"
"(if(syntax?$1"
" s_523)"
"(syntax-e$1"
" s_523)"
" s_523)))"
"(let-values(((#%top141_525)"
"(let-values(((s_527)"
"(car"
" s_524)))"
" s_527))"
"((id142_526)"
"(let-values(((s_528)"
"(cdr"
" s_524)))"
" s_528)))"
"(values"
" #%top141_525"
" id142_526)))))"
"(()"
"(let-values(((s_529)"
"(cdr"
" s_520)))"
"(let-values(((s_530)"
"(if(syntax?$1"
" s_529)"
"(syntax-e$1"
" s_529)"
" s_529)))"
"(values)))))"
"(values"
" #%top139_521"
" id140_522))))))"
"(values"
" #%variable-reference136_515"
" #%top137_516"
" id138_517)))))"
"(values"
" #t"
" #%variable-reference133_511"
" #%top134_512"
" id135_513)))"
"(values #f #f #f #f)))))"
"(let-values(((id_477)"
"(let-values(((or-part_531)"
"(if ok?_448 id129_450 #f)))"
"(if or-part_531"
" or-part_531"
"(if ok?_461 id135_464 #f)))))"
"(correlate*"
" s_17"
"(if id_477"
"(list"
" '#%variable-reference"
"(let-values(((id143_532) id_477)"
"((cctx144_533) cctx_10))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-identifier27.1))"
"(compile-identifier25.1"
" #f"
" #f"
" #f"
" #f"
" id143_532"
" cctx144_533)"
"(compile-identifier27.1"
" id143_532"
" cctx144_533))))"
" '(#%variable-reference)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_10)"
"(let-values()"
"(error"
"                                                                               \"found `#%top` in a module body:\""
" s_17))"
"(void))"
"(values))))"
"(let-values(((ok?_534 #%top145_535 id146_536)"
"(let-values(((s_547) s_17))"
"(let-values(((orig-s_548) s_547))"
"(let-values(((#%top145_549 id146_550)"
"(let-values(((s_551)"
"(if(syntax?$1"
" s_547)"
"(syntax-e$1"
" s_547)"
" s_547)))"
"(if(pair? s_551)"
"(let-values(((#%top147_552)"
"(let-values(((s_554)"
"(car"
" s_551)))"
" s_554))"
"((id148_553)"
"(let-values(((s_555)"
"(cdr"
" s_551)))"
"(if(let-values(((or-part_556)"
"(if(syntax?$1"
" s_555)"
"(symbol?"
"(syntax-e$1"
" s_555))"
" #f)))"
"(if or-part_556"
" or-part_556"
"(symbol?"
" s_555)))"
" s_555"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"not an identifier\""
" orig-s_548"
" s_555)))))"
"(values"
" #%top147_552"
" id148_553))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_548)))))"
"(values #t #%top145_549 id146_550))))))"
"(let-values(((...der/compile/expr.rkt:143:9_557)"
" compile-identifier27.1)"
"((temp149_558) id146_536)"
"((cctx150_559) cctx_10)"
"((temp151_560) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1"
" #f"
" #f"
" temp151_560"
" #t"
" temp149_558"
" cctx150_559)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:143:9_557"
" keyword-procedure-extract"
" '(#:top?)"
" 4)"
" '(#:top?)"
"(list temp151_560)"
" temp149_558"
" cctx150_559)))))))))))))))))"
"(if(identifier? s_17)"
"(let-values()"
"(let-values(((s152_561) s_17)((cctx153_562) cctx_10))"
"(if(variable-reference-constant?(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1 #f #f #f #f s152_561 cctx153_562)"
"(compile-identifier27.1 s152_561 cctx153_562))))"
"                                    (let-values () (error \"bad syntax after expansion:\" s_17))))))))))))))"
"(case-lambda"
"((in-s_563 cctx_564)(compile7_2 in-s_563 cctx_564 #f #f #f #f))"
"((in-s_565 cctx_566 name_567 result-used?2_568)(compile7_2 in-s_565 cctx_566 name_567 result-used?2_568 #t #t))"
"((in-s_569 cctx_570 name1_571)(compile7_2 in-s_569 cctx_570 name1_571 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_572 bodys_573 cctx_574)"
"(let-values(((phase_575)(compile-context-phase cctx_574)))"
"(let-values(((gen-formals_576)"
"((letrec-values(((loop_577)"
"(lambda(formals_578)"
"(if(identifier? formals_578)"
"(let-values()(local-id->symbol formals_578 phase_575))"
"(if(syntax?$1 formals_578)"
"(let-values()(loop_577(syntax-e$1 formals_578)))"
"(if(pair? formals_578)"
"(let-values()"
"(cons(loop_577(car formals_578))(loop_577(cdr formals_578))))"
"(let-values() null)))))))"
" loop_577)"
" formals_572)))"
"(list gen-formals_576(compile-sequence bodys_573 cctx_574 #f #t))))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_579 cctx_580 name_581 result-used?_582)"
"(if(null?(cdr bodys_579))"
"(compile$2(car bodys_579) cctx_580 name_581 result-used?_582)"
"(compile-begin bodys_579 cctx_580 name_581 result-used?_582))))"
"(define-values"
"(compile-begin)"
"(lambda(es_583 cctx_584 name_585 result-used?_586)"
"(let-values(((used-pos_587)(sub1(length es_583))))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_588) es_583)((start_589) 0))"
"(begin"
"(if(list? lst_588)(void)(let-values()(in-list lst_588)))"
"(if(exact-nonnegative-integer? start_589)(void)(let-values()(in-naturals start_589)))"
"((letrec-values(((for-loop_590)"
"(lambda(fold-var_591 lst_592 pos_593)"
"(if(if(pair? lst_592) #t #f)"
"(let-values(((e_594)(unsafe-car lst_592))((i_595) pos_593))"
"(let-values(((fold-var_596)"
"(let-values(((fold-var_597) fold-var_591))"
"(let-values(((fold-var_598)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_599)"
"(= i_595 used-pos_587)))"
"(compile$2"
" e_594"
" cctx_584"
"(if used?_599 name_585 #f)"
"(if used?_599 result-used?_586 #f))))"
" fold-var_597))))"
"(values fold-var_598)))))"
"(for-loop_590 fold-var_596(unsafe-cdr lst_592)(+ pos_593 1))))"
" fold-var_591))))"
" for-loop_590)"
" null"
" lst_588"
" start_589))))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_600 inferred-name_601 orig-s_602)"
"(letrec-values(((simplify-name_603)"
"(lambda(v_607)"
"(if(pair? v_607)"
"(let-values()"
"(let-values(((n1_608)(simplify-name_603(car v_607))))"
"(let-values(((n2_609)(simplify-name_603(cdr v_607))))"
"(if(eq? n1_608 n2_609) n1_608 v_607))))"
"(let-values() v_607)))))"
"(let-values(((name_604)"
"(let-values(((or-part_610)"
"(let-values(((v_611)"
"(simplify-name_603(syntax-property$1 orig-s_602 'inferred-name))))"
"(if(let-values(((or-part_612)(symbol? v_611)))"
"(if or-part_612"
" or-part_612"
"(let-values(((or-part_613)(syntax?$1 v_611)))"
"(if or-part_613 or-part_613(void? v_611)))))"
" v_611"
" #f))))"
"(if or-part_610 or-part_610 inferred-name_601))))"
"(let-values(((named-s_605)"
"(if name_604"
"(correlated-property"
" s_600"
" 'inferred-name"
"(if(syntax?$1 name_604)(syntax-e$1 name_604) name_604))"
" s_600)))"
"(let-values(((as-method_606)(syntax-property$1 orig-s_602 'method-arity-error)))"
"(if as-method_606(correlated-property named-s_605 'method-arity-error as-method_606) named-s_605)))))))"
"(define-values"
"(lifted/1.1$17)"
"(make-required"
" 'compile-let"
"(case-lambda"
"((self_614 core-sym_615 s_616 cctx_617 name_618 result-used?_619)"
"(apply missing-kw self_614 core-sym_615 s_616 cctx_617 name_618 result-used?_619 null)))"
" #f"
" #f))"
"(define-values"
"(compile-let16.1)"
"(lambda(rec?9_620 core-sym11_621 s12_622 cctx13_623 name14_624 result-used?15_625)"
"(let-values(((core-sym_626) core-sym11_621))"
"(let-values(((s_627) s12_622))"
"(let-values(((cctx_628) cctx13_623))"
"(let-values(((name_629) name14_624))"
"(let-values(((rec?_630) rec?9_620))"
"(let-values(((result-used?_631) result-used?15_625))"
"(let-values()"
"(let-values(((rec?_632)(eq? core-sym_626 'letrec-values)))"
"(let-values(((ok?_633 let-values154_634 id155_635 rhs156_636 body157_637)"
"(let-values(((s_655) s_627))"
"(let-values(((orig-s_656) s_655))"
"(let-values(((let-values154_657 id155_658 rhs156_659 body157_660)"
"(let-values(((s_661)"
"(if(syntax?$1 s_655)(syntax-e$1 s_655) s_655)))"
"(if(pair? s_661)"
"(let-values(((let-values158_662)"
"(let-values(((s_666)(car s_661))) s_666))"
"((id159_663 rhs160_664 body161_665)"
"(let-values(((s_667)(cdr s_661)))"
"(let-values(((s_668)"
"(if(syntax?$1 s_667)"
"(syntax-e$1 s_667)"
" s_667)))"
"(if(pair? s_668)"
"(let-values(((id162_669 rhs163_670)"
"(let-values(((s_672)"
"(car s_668)))"
"(let-values(((s_673)"
"(if(syntax?$1"
" s_672)"
"(syntax-e$1"
" s_672)"
" s_672)))"
"(let-values(((flat-s_674)"
"(to-syntax-list.1"
" s_673)))"
"(if(not flat-s_674)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_656))"
"(let-values()"
"(let-values(((id_675"
" rhs_676)"
"(let-values(((lst_677)"
" flat-s_674))"
"(begin"
"(if(list?"
" lst_677)"
"(void)"
"(let-values()"
"(in-list"
" lst_677)))"
"((letrec-values(((for-loop_678)"
"(lambda(id_679"
" rhs_680"
" lst_681)"
"(if(pair?"
" lst_681)"
"(let-values(((s_682)"
"(unsafe-car"
" lst_681)))"
"(let-values(((id_683"
" rhs_684)"
"(let-values(((id_685)"
" id_679)"
"((rhs_686)"
" rhs_680))"
"(let-values(((id_687"
" rhs_688)"
"(let-values()"
"(let-values(((id168_689"
" rhs169_690)"
"(let-values()"
"(let-values(((s_691)"
"(if(syntax?$1"
" s_682)"
"(syntax-e$1"
" s_682)"
" s_682)))"
"(if(pair?"
" s_691)"
"(let-values(((id165_692)"
"(let-values(((s_694)"
"(car"
" s_691)))"
"(let-values(((s_695)"
"(if(syntax?$1"
" s_694)"
"(syntax-e$1"
" s_694)"
" s_694)))"
"(let-values(((flat-s_696)"
"(to-syntax-list.1"
" s_695)))"
"(if(not"
" flat-s_696)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_656))"
"(let-values()"
"(let-values(((id_697)"
"(let-values(((lst_698)"
" flat-s_696))"
"(begin"
"(if(list?"
" lst_698)"
"(void)"
"(let-values()"
"(in-list"
" lst_698)))"
"((letrec-values(((for-loop_699)"
"(lambda(id_700"
" lst_701)"
"(if(pair?"
" lst_701)"
"(let-values(((s_702)"
"(unsafe-car"
" lst_701)))"
"(let-values(((id_703)"
"(let-values(((id_704)"
" id_700))"
"(let-values(((id_705)"
"(let-values()"
"(let-values(((id170_706)"
"(let-values()"
"(if(let-values(((or-part_707)"
"(if(syntax?$1"
" s_702)"
"(symbol?"
"(syntax-e$1"
" s_702))"
" #f)))"
"(if or-part_707"
" or-part_707"
"(symbol?"
" s_702)))"
" s_702"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_656"
" s_702)))))"
"(cons"
" id170_706"
" id_704)))))"
"(values"
" id_705)))))"
"(for-loop_699"
" id_703"
"(unsafe-cdr"
" lst_701))))"
" id_700))))"
" for-loop_699)"
" null"
" lst_698)))))"
"(alt-reverse"
" id_697))))))))"
"((rhs166_693)"
"(let-values(((s_708)"
"(cdr"
" s_691)))"
"(let-values(((s_709)"
"(if(syntax?$1"
" s_708)"
"(syntax-e$1"
" s_708)"
" s_708)))"
"(if(pair?"
" s_709)"
"(let-values(((rhs167_710)"
"(let-values(((s_711)"
"(car"
" s_709)))"
" s_711))"
"(()"
"(let-values(((s_712)"
"(cdr"
" s_709)))"
"(let-values(((s_713)"
"(if(syntax?$1"
" s_712)"
"(syntax-e$1"
" s_712)"
" s_712)))"
"(if(null?"
" s_713)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_656))))))"
"(values"
" rhs167_710))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_656))))))"
"(values"
" id165_692"
" rhs166_693))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_656))))))"
"(values"
"(cons"
" id168_689"
" id_685)"
"(cons"
" rhs169_690"
" rhs_686))))))"
"(values"
" id_687"
" rhs_688)))))"
"(for-loop_678"
" id_683"
" rhs_684"
"(unsafe-cdr"
" lst_681))))"
"(values"
" id_679"
" rhs_680)))))"
" for-loop_678)"
" null"
" null"
" lst_677)))))"
"(values"
"(alt-reverse"
" id_675)"
"(alt-reverse"
" rhs_676)))))))))"
"((body164_671)"
"(let-values(((s_714)"
"(cdr s_668)))"
"(let-values(((s_715)"
"(if(syntax?$1"
" s_714)"
"(syntax-e$1"
" s_714)"
" s_714)))"
"(let-values(((flat-s_716)"
"(to-syntax-list.1"
" s_715)))"
"(if(not flat-s_716)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_656))"
"(if(null? flat-s_716)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_656))"
"(let-values()"
" flat-s_716))))))))"
"(values id162_669 rhs163_670 body164_671))"
"(raise-syntax-error$1"
" #f"
"                                                                             \"bad syntax\""
" orig-s_656))))))"
"(values let-values158_662 id159_663 rhs160_664 body161_665))"
"                                                        (raise-syntax-error$1 #f \"bad syntax\" orig-s_656)))))"
"(values #t let-values154_657 id155_658 rhs156_659 body157_660))))))"
"(let-values(((phase_652)(compile-context-phase cctx_628)))"
"(let-values(((idss_653) id155_635))"
"(let-values(((symss_654)"
"(alt-reverse"
"(let-values(((lst_717) idss_653))"
"(begin"
"(if(list? lst_717)(void)(let-values()(in-list lst_717)))"
"((letrec-values(((for-loop_718)"
"(lambda(fold-var_719 lst_720)"
"(if(pair? lst_720)"
"(let-values(((ids_721)(unsafe-car lst_720)))"
"(let-values(((fold-var_722)"
"(let-values(((fold-var_723)"
" fold-var_719))"
"(let-values(((fold-var_724)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_725)"
" ids_721))"
"(begin"
"(if(list?"
" lst_725)"
"(void)"
"(let-values()"
"(in-list"
" lst_725)))"
"((letrec-values(((for-loop_726)"
"(lambda(fold-var_727"
" lst_728)"
"(if(pair?"
" lst_728)"
"(let-values(((id_729)"
"(unsafe-car"
" lst_728)))"
"(let-values(((fold-var_730)"
"(let-values(((fold-var_731)"
" fold-var_727))"
"(let-values(((fold-var_732)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_733)"
"(local-id->symbol"
" id_729"
" phase_652)))"
"(if rec?_632"
"(add-undefined-error-name-property"
" sym_733"
" id_729)"
" sym_733)))"
" fold-var_731))))"
"(values"
" fold-var_732)))))"
"(for-loop_726"
" fold-var_730"
"(unsafe-cdr"
" lst_728))))"
" fold-var_727))))"
" for-loop_726)"
" null"
" lst_725)))))"
" fold-var_723))))"
"(values fold-var_724)))))"
"(for-loop_718"
" fold-var_722"
"(unsafe-cdr lst_720))))"
" fold-var_719))))"
" for-loop_718)"
" null"
" lst_717))))))"
"(correlate*"
" s_627"
"(list"
" core-sym_626"
"(alt-reverse"
"(let-values(((lst_734) symss_654)((lst_735) idss_653)((lst_736) rhs156_636))"
"(begin"
"(if(list? lst_734)(void)(let-values()(in-list lst_734)))"
"(if(list? lst_735)(void)(let-values()(in-list lst_735)))"
"(if(list? lst_736)(void)(let-values()(in-list lst_736)))"
"((letrec-values(((for-loop_737)"
"(lambda(fold-var_738 lst_739 lst_740 lst_741)"
"(if(if(pair? lst_739)"
"(if(pair? lst_740)(pair? lst_741) #f)"
" #f)"
"(let-values(((syms_742)(unsafe-car lst_739))"
"((ids_743)(unsafe-car lst_740))"
"((rhs_744)(unsafe-car lst_741)))"
"(let-values(((fold-var_745)"
"(let-values(((fold-var_746) fold-var_738))"
"(let-values(((fold-var_747)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" syms_742"
"(compile$2"
" rhs_744"
" cctx_628"
"(if(="
" 1"
"(length ids_743))"
"(car ids_743)"
" #f))))"
" fold-var_746))))"
"(values fold-var_747)))))"
"(for-loop_737"
" fold-var_745"
"(unsafe-cdr lst_739)"
"(unsafe-cdr lst_740)"
"(unsafe-cdr lst_741))))"
" fold-var_738))))"
" for-loop_737)"
" null"
" lst_734"
" lst_735"
" lst_736))))"
"(compile-sequence body157_637 cctx_628 name_629 result-used?_631)))))))))))))))))"
"(define-values"
"(unpack17.1$1)"
"(lambda(given-kws_748 given-args_749 core-sym11_750 s12_751 cctx13_752 name14_753 result-used?15_754)"
"(let-values(((rec?9_755)(car given-args_749)))"
"(compile-let16.1 rec?9_755 core-sym11_750 s12_751 cctx13_752 name14_753 result-used?15_754))))"
"(define-values"
"(compile-let18.1)"
"(lifted/1.1$17"
"(lambda(given-kws_756 given-argc_757)"
"(if(= given-argc_757 7)"
"(let-values(((l2_758) given-kws_756))"
"(if(pair? l2_758)(if(eq?(car l2_758) '#:rec?)(null?(cdr l2_758)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_759 given-args_760 core-sym_761 s_762 cctx_763 name_764 result-used?_765)"
"(unpack17.1$1 given-kws_759 given-args_760 core-sym_761 s_762 cctx_763 name_764 result-used?_765)))"
" '(#:rec?)"
" '(#:rec?)))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_766 orig-id_767)"
"(let-values(((id_768)(correlate* orig-id_767 sym_766)))"
"(correlated-property"
" id_768"
" 'undefined-error-name"
"(let-values(((or-part_769)(syntax-property$1 orig-id_767 'undefined-error-name)))"
"(if or-part_769 or-part_769(syntax-e$1 orig-id_767)))))))"
"(define-values"
"(compile-identifier25.1)"
"(lambda(set-to19_770 set-to21_771 top?20_772 top?22_773 s23_774 cctx24_775)"
"(let-values(((s_776) s23_774))"
"(let-values(((cctx_777) cctx24_775))"
"(let-values(((rhs_778)(if set-to21_771 set-to19_770 #f)))"
"(let-values(((top?_779)(if top?22_773 top?20_772 #f)))"
"(let-values()"
"(let-values(((phase_780)(compile-context-phase cctx_777)))"
"(let-values(((normal-b_781)"
"(let-values(((s171_784) s_776)((phase172_785) phase_780))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f s171_784 phase172_785)"
"(resolve+shift22.1 s171_784 phase172_785)))))"
"(let-values(((b_782)"
"(let-values(((or-part_786) normal-b_781))"
"(if or-part_786"
" or-part_786"
"(let-values(((or-part_787)"
"(resolve-with-top-level-bind-scope s_776 phase_780 cctx_777)))"
"(if or-part_787"
" or-part_787"
"(let-values(((temp173_788)(compile-context-self cctx_777))"
"((phase174_789) phase_780)"
"((temp175_790)(syntax-e$1 s_776)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp173_788"
" phase174_789"
" temp175_790)"
"(make-module-binding24.1 temp173_788 phase174_789 temp175_790)))))))))"
"(let-values(((sym_783)"
"(if(local-binding? b_782)"
"(let-values()"
"(let-values(((sym_791)(local-key->symbol(local-binding-key b_782))))"
"(begin"
"(if sym_791"
"(void)"
"                                            (let-values () (error \"missing a binding after expansion:\" s_776)))"
" sym_791)))"
"(if(module-binding? b_782)"
"(let-values()"
"(let-values(((mpi_792)"
"(if top?_779"
"(compile-context-self cctx_777)"
"(module-binding-module b_782))))"
"(let-values(((mod-name_793)(1/module-path-index-resolve mpi_792)))"
"(let-values(((ns_794)(compile-context-namespace cctx_777)))"
"(let-values(((mod_795)(namespace->module ns_794 mod-name_793)))"
"(if(if mod_795(module-primitive? mod_795) #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(zero?(module-binding-phase b_782))"
"(void)"
"(let-values()"
"(error"
"                                                                         \"internal error: non-zero phase for a primitive\")))"
"(values))))"
"(let-values((()"
"(begin"
"(if rhs_778"
"(let-values()"
"(error"
"                                                                           \"internal error: cannot assign to a primitive:\""
" s_776))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ns176_797) ns_794)"
"((mpi177_798) mpi_792)"
"((temp178_799) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns176_797"
" mpi177_798"
" temp178_799)"
"(namespace-module-instantiate!96.1"
" ns176_797"
" mpi177_798"
" temp178_799)))"
"(values))))"
"(let-values(((m-ns_796)"
"(let-values(((ns179_800) ns_794)"
"((mod-name180_801) mod-name_793)"
"((temp181_802) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns179_800"
" mod-name180_801"
" temp181_802)"
"(namespace->module-namespace82.1"
" ns179_800"
" mod-name180_801"
" temp181_802)))))"
"(module-binding-sym b_782))))))"
"(if(eq? mpi_792(compile-context-module-self cctx_777))"
"(let-values()"
"(let-values(((header_803)(compile-context-header cctx_777)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_803)"
"(module-binding-sym b_782))))"
"(let-values()"
"(let-values(((temp182_804)(compile-context-header cctx_777))"
"((mpi183_805) mpi_792)"
"((temp184_806)(module-binding-phase b_782))"
"((temp185_807)(module-binding-sym b_782))"
"((temp186_808)"
"(let-values(((or-part_809)"
"(module-binding-extra-inspector"
" b_782)))"
"(if or-part_809"
" or-part_809"
"(syntax-inspector s_776)))))"
"(if(variable-reference-constant?"
"(#%variable-reference register-required-variable-use!21.1))"
"(register-required-variable-use!19.1"
" #f"
" #f"
" temp182_804"
" mpi183_805"
" temp184_806"
" temp185_807"
" temp186_808)"
"(register-required-variable-use!21.1"
" temp182_804"
" mpi183_805"
" temp184_806"
" temp185_807"
" temp186_808)))))))))))"
"                                      (let-values () (error \"not a reference to a module or local binding:\" s_776))))))"
"(correlate* s_776(if rhs_778(list 'set! sym_783 rhs_778) sym_783)))))))))))))"
"(define-values"
"(unpack26.1)"
"(lambda(given-kws_810 given-args_811 s23_812 cctx24_813)"
"(let-values(((set-to21_814)(if(pair? given-kws_810)(eq? '#:set-to(car given-kws_810)) #f)))"
"(let-values(((set-to19_815)(if set-to21_814(car given-args_811)(void)))"
"((given-kws_816)(if set-to21_814(cdr given-kws_810) given-kws_810))"
"((given-args_817)(if set-to21_814(cdr given-args_811) given-args_811)))"
"(let-values(((top?22_818)(pair? given-kws_816)))"
"(let-values(((top?20_819)(if top?22_818(car given-args_817)(void))))"
"(compile-identifier25.1 set-to19_815 set-to21_814 top?20_819 top?22_818 s23_812 cctx24_813)))))))"
"(define-values"
"(compile-identifier27.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_820 given-argc_821)"
"(if(= given-argc_821 4)"
"(let-values(((l1_822) given-kws_820))"
"(let-values(((l1_823)(if(null? l1_822) l1_822(if(eq?(car l1_822) '#:set-to)(cdr l1_822) l1_822))))"
"(let-values(((l1_824) l1_823))"
"(let-values(((l1_825)(if(null? l1_824) l1_824(if(eq?(car l1_824) '#:top?)(cdr l1_824) l1_824))))"
"(null? l1_825)))))"
" #f))"
"(case-lambda"
"((given-kws_826 given-args_827 s_828 cctx_829)(unpack26.1 given-kws_826 given-args_827 s_828 cctx_829)))"
" null"
" '(#:set-to #:top?)"
"(let-values(((compile-identifier_830)(case-lambda((s_831 cctx_832)(unpack26.1 null null s_831 cctx_832)))))"
" compile-identifier_830)))"
"(define-values"
"(resolve-with-top-level-bind-scope)"
"(lambda(s_833 phase_834 cctx_835)"
"(let-values(((top-level-scope_836)(compile-context-top-level-bind-scope cctx_835)))"
"(if top-level-scope_836"
"(let-values()"
"(let-values(((tl-s_837)(add-scope s_833 top-level-scope_836)))"
"(let-values(((tl-s187_838) tl-s_837)((phase188_839) phase_834))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f tl-s187_838 phase188_839)"
"(resolve+shift22.1 tl-s187_838 phase188_839)))))"
"(let-values() #f)))))"
"(define-values"
"(local-id->symbol)"
"(lambda(id_840 phase_841)"
"(let-values(((b_842)"
"(let-values(((id189_843) id_840)((phase190_844) phase_841))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1 #f #f #f #f #f #f #f #f id189_843 phase190_844)"
"(resolve31.1 id189_843 phase190_844)))))"
"(begin"
"        (if (local-binding? b_842) (void) (let-values () (error \"bad binding:\" id_840 phase_841 b_842)))"
"(local-key->symbol(local-binding-key b_842))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_845 cctx_846)"
"(let-values(((pos_847)(add-syntax-literal!(compile-context-header cctx_846) q_845)))"
"(if(compile-context-lazy-syntax-literals? cctx_846)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_847))"
"(let-values()(generate-eager-syntax-literal-lookup pos_847))))))"
"(void)"
"(void)"
"(define-values"
"(def-ids-to-binding-syms)"
"(lambda(ids_1 phase_2 self_3 cctx_4)"
"(alt-reverse"
"(let-values(((lst_5) ids_1))"
"(begin"
"(if(list? lst_5)(void)(let-values()(in-list lst_5)))"
"((letrec-values(((for-loop_6)"
"(lambda(fold-var_7 lst_8)"
"(if(pair? lst_8)"
"(let-values(((id_9)(unsafe-car lst_8)))"
"(let-values(((fold-var_10)"
"(let-values(((fold-var_11) fold-var_7))"
"(let-values(((fold-var_12)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((top-level-scope_13)"
"(compile-context-top-level-bind-scope"
" cctx_4)))"
"(let-values(((tl-id_14)"
"(if top-level-scope_13"
"(add-scope"
" id_9"
" top-level-scope_13)"
" id_9)))"
"(let-values(((b_15)"
"(let-values(((...ile/id-to-symbol.rkt:18:14_16)"
" resolve+shift22.1)"
"((tl-id1_17)"
" tl-id_14)"
"((phase2_18) phase_2)"
"((temp3_19) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp3_19"
" #t"
" #f"
" #f"
" tl-id1_17"
" phase2_18)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ile/id-to-symbol.rkt:18:14_16"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_19)"
" tl-id1_17"
" phase2_18)))))"
"(begin"
"(if(if(module-binding? b_15)"
"(if(eq?"
" self_3"
"(module-binding-module b_15))"
"(eqv?"
" phase_2"
"(module-binding-phase b_15))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                                 \"bad binding for definition:\""
" id_9"
" self_3"
"                                                                                 \"vs.\""
"(if b_15"
"(module-binding-module b_15)"
" #f)"
" phase_2)))"
"(module-binding-sym b_15))))))"
" fold-var_11))))"
"(values fold-var_12)))))"
"(for-loop_6 fold-var_10(unsafe-cdr lst_8))))"
" fold-var_7))))"
" for-loop_6)"
" null"
" lst_5))))))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$16)"
"(make-required"
" 'compile-forms"
"(case-lambda((self_2 bodys_3 cctx_4 mpis_5)(apply missing-kw self_2 bodys_3 cctx_4 mpis_5 null)))"
" #f"
" #f))"
"(define-values"
"(compile-forms24.1)"
"(lambda(body-imports1_6"
" body-suffix-forms2_7"
" body-suffix-forms12_8"
" compiled-expression-callback6_9"
" compiled-expression-callback16_10"
" definition-callback7_11"
" definition-callback17_12"
" encoded-root-expand-ctx-box4_13"
" encoded-root-expand-ctx-box14_14"
" force-phases3_15"
" force-phases13_16"
" get-module-linklet-info9_17"
" get-module-linklet-info19_18"
" other-form-callback8_19"
" other-form-callback18_20"
" root-ctx-only-if-syntax?5_21"
" root-ctx-only-if-syntax?15_22"
" to-source?10_23"
" to-source?20_24"
" bodys21_25"
" cctx22_26"
" mpis23_27)"
"(let-values(((bodys_28) bodys21_25))"
"(let-values(((cctx_29) cctx22_26))"
"(let-values(((mpis_30) mpis23_27))"
"(let-values(((body-imports_31) body-imports1_6))"
"(let-values(((body-suffix-forms_32)(if body-suffix-forms12_8 body-suffix-forms2_7 null)))"
"(let-values(((force-phases_33)(if force-phases13_16 force-phases3_15 null)))"
"(let-values(((encoded-root-expand-ctx-box_34)"
"(if encoded-root-expand-ctx-box14_14 encoded-root-expand-ctx-box4_13 #f)))"
"(let-values(((root-ctx-only-if-syntax?_35)"
"(if root-ctx-only-if-syntax?15_22 root-ctx-only-if-syntax?5_21 #f)))"
"(let-values(((compiled-expression-callback_36)"
"(if compiled-expression-callback16_10 compiled-expression-callback6_9 void)))"
"(let-values(((definition-callback_37)"
"(if definition-callback17_12 definition-callback7_11 void)))"
"(let-values(((other-form-callback_38)"
"(if other-form-callback18_20 other-form-callback8_19 void)))"
"(let-values(((get-module-linklet-info_39)"
"(if get-module-linklet-info19_18"
" get-module-linklet-info9_17"
"(lambda(mod-name_40 p_41) #f))))"
"(let-values(((to-source?_42)(if to-source?20_24 to-source?10_23 #f)))"
"(let-values()"
"(let-values(((phase_43)(compile-context-phase cctx_29)))"
"(let-values(((self_44)(compile-context-self cctx_29)))"
"(let-values(((syntax-literals_45)(make-syntax-literals)))"
"(let-values(((phase-to-body_46)(make-hasheqv)))"
"(let-values(((add-body!_47)"
"(lambda(phase_71 body_72)"
"(hash-update!"
" phase-to-body_46"
" phase_71"
"(lambda(l_73)(cons body_72 l_73))"
" null))))"
"(let-values(((phase-to-header_48)(make-hasheqv)))"
"(let-values(((find-or-create-header!_49)"
"(lambda(phase_74)"
"(let-values(((or-part_75)"
"(hash-ref phase-to-header_48 phase_74 #f)))"
"(if or-part_75"
" or-part_75"
"(let-values(((header_76)"
"(make-header mpis_30 syntax-literals_45)))"
"(begin"
"(hash-set! phase-to-header_48 phase_74 header_76)"
" header_76)))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_77) force-phases_33))"
"(begin"
"(if(list? lst_77)"
"(void)"
"(let-values()(in-list lst_77)))"
"((letrec-values(((for-loop_78)"
"(lambda(fold-var_79 lst_80)"
"(if(pair? lst_80)"
"(let-values(((phase_81)"
"(unsafe-car"
" lst_80)))"
"(let-values(((fold-var_82)"
"(let-values(((fold-var_83)"
" fold-var_79))"
"(let-values(((fold-var_84)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_49"
" phase_81)"
"(add-body!_47"
" phase_81"
" '(void))))"
"(void)))))"
"(values"
" fold-var_84)))))"
"(for-loop_78"
" fold-var_82"
"(unsafe-cdr lst_80))))"
" fold-var_79))))"
" for-loop_78)"
"(void)"
" lst_77)))"
"(values))))"
"(let-values(((saw-define-syntaxes?_50) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_29)"
"(let-values()"
"((letrec-values(((loop!_85)"
"(lambda(bodys_86"
" phase_87"
" header_88)"
"(let-values(((lst_89)"
" bodys_86))"
"(begin"
"(if(list? lst_89)"
"(void)"
"(let-values()"
"(in-list lst_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(fold-var_91"
" lst_92)"
"(if(pair?"
" lst_92)"
"(let-values(((body_93)"
"(unsafe-car"
" lst_92)))"
"(let-values(((fold-var_94)"
"(let-values(((fold-var_95)"
" fold-var_91))"
"(let-values(((fold-var_96)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_97)"
"(core-form-sym"
" body_93"
" phase_87)))"
"(if(equal?"
" tmp_97"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_98"
" define-values28_99"
" id29_100"
" rhs30_101)"
"(let-values(((s_114)"
" body_93))"
"(let-values(((orig-s_115)"
" s_114))"
"(let-values(((define-values28_116"
" id29_117"
" rhs30_118)"
"(let-values(((s_119)"
"(if(syntax?$1"
" s_114)"
"(syntax-e$1"
" s_114)"
" s_114)))"
"(if(pair?"
" s_119)"
"(let-values(((define-values31_120)"
"(let-values(((s_123)"
"(car"
" s_119)))"
" s_123))"
"((id32_121"
" rhs33_122)"
"(let-values(((s_124)"
"(cdr"
" s_119)))"
"(let-values(((s_125)"
"(if(syntax?$1"
" s_124)"
"(syntax-e$1"
" s_124)"
" s_124)))"
"(if(pair?"
" s_125)"
"(let-values(((id34_126)"
"(let-values(((s_128)"
"(car"
" s_125)))"
"(let-values(((s_129)"
"(if(syntax?$1"
" s_128)"
"(syntax-e$1"
" s_128)"
" s_128)))"
"(let-values(((flat-s_130)"
"(to-syntax-list.1"
" s_129)))"
"(if(not"
" flat-s_130)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_115))"
"(let-values()"
"(let-values(((id_131)"
"(let-values(((lst_132)"
" flat-s_130))"
"(begin"
"(if(list?"
" lst_132)"
"(void)"
"(let-values()"
"(in-list"
" lst_132)))"
"((letrec-values(((for-loop_133)"
"(lambda(id_134"
" lst_135)"
"(if(pair?"
" lst_135)"
"(let-values(((s_136)"
"(unsafe-car"
" lst_135)))"
"(let-values(((id_137)"
"(let-values(((id_138)"
" id_134))"
"(let-values(((id_139)"
"(let-values()"
"(let-values(((id37_140)"
"(let-values()"
"(if(let-values(((or-part_141)"
"(if(syntax?$1"
" s_136)"
"(symbol?"
"(syntax-e$1"
" s_136))"
" #f)))"
"(if or-part_141"
" or-part_141"
"(symbol?"
" s_136)))"
" s_136"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_115"
" s_136)))))"
"(cons"
" id37_140"
" id_138)))))"
"(values"
" id_139)))))"
"(for-loop_133"
" id_137"
"(unsafe-cdr"
" lst_135))))"
" id_134))))"
" for-loop_133)"
" null"
" lst_132)))))"
"(alt-reverse"
" id_131))))))))"
"((rhs35_127)"
"(let-values(((s_142)"
"(cdr"
" s_125)))"
"(let-values(((s_143)"
"(if(syntax?$1"
" s_142)"
"(syntax-e$1"
" s_142)"
" s_142)))"
"(if(pair?"
" s_143)"
"(let-values(((rhs36_144)"
"(let-values(((s_145)"
"(car"
" s_143)))"
" s_145))"
"(()"
"(let-values(((s_146)"
"(cdr"
" s_143)))"
"(let-values(((s_147)"
"(if(syntax?$1"
" s_146)"
"(syntax-e$1"
" s_146)"
" s_146)))"
"(if(null?"
" s_147)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_115))))))"
"(values"
" rhs36_144))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_115))))))"
"(values"
" id34_126"
" rhs35_127))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_115))))))"
"(values"
" define-values31_120"
" id32_121"
" rhs33_122))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_115)))))"
"(values"
" #t"
" define-values28_116"
" id29_117"
" rhs30_118))))))"
"(let-values(((lst_148)"
"(def-ids-to-binding-syms"
" id29_100"
" phase_87"
" self_44"
" cctx_29)))"
"(begin"
"(if(list?"
" lst_148)"
"(void)"
"(let-values()"
"(in-list"
" lst_148)))"
"((letrec-values(((for-loop_149)"
"(lambda(fold-var_150"
" lst_151)"
"(if(pair?"
" lst_151)"
"(let-values(((sym_152)"
"(unsafe-car"
" lst_151)))"
"(let-values(((fold-var_153)"
"(let-values(((fold-var_154)"
" fold-var_150))"
"(let-values(((fold-var_155)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_156)"
"(select-fresh"
" sym_152"
" header_88)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_88)"
" sym_152"
" def-sym_156)"
"(set-header-binding-syms-in-order!"
" header_88"
"(cons"
" sym_152"
"(header-binding-syms-in-order"
" header_88)))"
"(register-as-defined!"
" header_88"
" def-sym_156))))"
"(void)))))"
"(values"
" fold-var_155)))))"
"(for-loop_149"
" fold-var_153"
"(unsafe-cdr"
" lst_151))))"
" fold-var_150))))"
" for-loop_149)"
"(void)"
" lst_148)))))"
"(if(equal?"
" tmp_97"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_157"
" begin-for-syntax38_158"
" e39_159)"
"(let-values(((s_170)"
" body_93))"
"(let-values(((orig-s_171)"
" s_170))"
"(let-values(((begin-for-syntax38_172"
" e39_173)"
"(let-values(((s_174)"
"(if(syntax?$1"
" s_170)"
"(syntax-e$1"
" s_170)"
" s_170)))"
"(if(pair?"
" s_174)"
"(let-values(((begin-for-syntax40_175)"
"(let-values(((s_177)"
"(car"
" s_174)))"
" s_177))"
"((e41_176)"
"(let-values(((s_178)"
"(cdr"
" s_174)))"
"(let-values(((s_179)"
"(if(syntax?$1"
" s_178)"
"(syntax-e$1"
" s_178)"
" s_178)))"
"(let-values(((flat-s_180)"
"(to-syntax-list.1"
" s_179)))"
"(if(not"
" flat-s_180)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_171))"
"(let-values()"
" flat-s_180)))))))"
"(values"
" begin-for-syntax40_175"
" e41_176))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_171)))))"
"(values"
" #t"
" begin-for-syntax38_172"
" e39_173))))))"
"(loop!_85"
" e39_159"
"(add1"
" phase_87)"
"(find-or-create-header!_49"
"(add1"
" phase_87)))))"
"(let-values()"
"(void))))))"
"(void)))))"
"(values"
" fold-var_96)))))"
"(for-loop_90"
" fold-var_94"
"(unsafe-cdr"
" lst_92))))"
" fold-var_91))))"
" for-loop_90)"
"(void)"
" lst_89))))))"
" loop!_85)"
" bodys_28"
" phase_43"
"(find-or-create-header!_49 phase_43)))"
"(void))"
"(values))))"
"(let-values(((as-required?_51)"
"(lambda(header_181)"
"(lambda(sym_182)"
"(registered-as-required? header_181 sym_182)))))"
"(let-values(((last-i_52)(sub1(length bodys_28))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_183)"
"(lambda(bodys_184"
" phase_185"
" header_186)"
"(let-values(((lst_187)"
" bodys_184)"
"((start_188)"
" 0))"
"(begin"
"(if(list? lst_187)"
"(void)"
"(let-values()"
"(in-list lst_187)))"
"(if(exact-nonnegative-integer?"
" start_188)"
"(void)"
"(let-values()"
"(in-naturals"
" start_188)))"
"((letrec-values(((for-loop_189)"
"(lambda(fold-var_190"
" lst_191"
" pos_192)"
"(if(if(pair?"
" lst_191)"
" #t"
" #f)"
"(let-values(((in-body_193)"
"(unsafe-car"
" lst_191))"
"((i_194)"
" pos_192))"
"(let-values(((fold-var_195)"
"(let-values(((fold-var_196)"
" fold-var_190))"
"(let-values(((fold-var_197)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((body_198)"
"(syntax-disarm$1"
" in-body_193)))"
"(let-values(((tmp_199)"
"(core-form-sym"
" body_198"
" phase_185)))"
"(if(equal?"
" tmp_199"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_200"
" define-values42_201"
" id43_202"
" rhs44_203)"
"(let-values(((s_220)"
" body_198))"
"(let-values(((orig-s_221)"
" s_220))"
"(let-values(((define-values42_222"
" id43_223"
" rhs44_224)"
"(let-values(((s_225)"
"(if(syntax?$1"
" s_220)"
"(syntax-e$1"
" s_220)"
" s_220)))"
"(if(pair?"
" s_225)"
"(let-values(((define-values45_226)"
"(let-values(((s_229)"
"(car"
" s_225)))"
" s_229))"
"((id46_227"
" rhs47_228)"
"(let-values(((s_230)"
"(cdr"
" s_225)))"
"(let-values(((s_231)"
"(if(syntax?$1"
" s_230)"
"(syntax-e$1"
" s_230)"
" s_230)))"
"(if(pair?"
" s_231)"
"(let-values(((id48_232)"
"(let-values(((s_234)"
"(car"
" s_231)))"
"(let-values(((s_235)"
"(if(syntax?$1"
" s_234)"
"(syntax-e$1"
" s_234)"
" s_234)))"
"(let-values(((flat-s_236)"
"(to-syntax-list.1"
" s_235)))"
"(if(not"
" flat-s_236)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_221))"
"(let-values()"
"(let-values(((id_237)"
"(let-values(((lst_238)"
" flat-s_236))"
"(begin"
"(if(list?"
" lst_238)"
"(void)"
"(let-values()"
"(in-list"
" lst_238)))"
"((letrec-values(((for-loop_239)"
"(lambda(id_240"
" lst_241)"
"(if(pair?"
" lst_241)"
"(let-values(((s_242)"
"(unsafe-car"
" lst_241)))"
"(let-values(((id_243)"
"(let-values(((id_244)"
" id_240))"
"(let-values(((id_245)"
"(let-values()"
"(let-values(((id51_246)"
"(let-values()"
"(if(let-values(((or-part_247)"
"(if(syntax?$1"
" s_242)"
"(symbol?"
"(syntax-e$1"
" s_242))"
" #f)))"
"(if or-part_247"
" or-part_247"
"(symbol?"
" s_242)))"
" s_242"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_221"
" s_242)))))"
"(cons"
" id51_246"
" id_244)))))"
"(values"
" id_245)))))"
"(for-loop_239"
" id_243"
"(unsafe-cdr"
" lst_241))))"
" id_240))))"
" for-loop_239)"
" null"
" lst_238)))))"
"(alt-reverse"
" id_237))))))))"
"((rhs49_233)"
"(let-values(((s_248)"
"(cdr"
" s_231)))"
"(let-values(((s_249)"
"(if(syntax?$1"
" s_248)"
"(syntax-e$1"
" s_248)"
" s_248)))"
"(if(pair?"
" s_249)"
"(let-values(((rhs50_250)"
"(let-values(((s_251)"
"(car"
" s_249)))"
" s_251))"
"(()"
"(let-values(((s_252)"
"(cdr"
" s_249)))"
"(let-values(((s_253)"
"(if(syntax?$1"
" s_252)"
"(syntax-e$1"
" s_252)"
" s_252)))"
"(if(null?"
" s_253)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_221))))))"
"(values"
" rhs50_250))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_221))))))"
"(values"
" id48_232"
" rhs49_233))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_221))))))"
"(values"
" define-values45_226"
" id46_227"
" rhs47_228))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_221)))))"
"(values"
" #t"
" define-values42_222"
" id43_223"
" rhs44_224))))))"
"(let-values(((ids_216)"
" id43_202))"
"(let-values(((binding-syms_217)"
"(def-ids-to-binding-syms"
" ids_216"
" phase_185"
" self_44"
" cctx_29)))"
"(let-values(((def-syms_218)"
"(if(compile-context-module-self"
" cctx_29)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_254)"
" binding-syms_217))"
"(begin"
"(if(list?"
" lst_254)"
"(void)"
"(let-values()"
"(in-list"
" lst_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(fold-var_256"
" lst_257)"
"(if(pair?"
" lst_257)"
"(let-values(((binding-sym_258)"
"(unsafe-car"
" lst_257)))"
"(let-values(((fold-var_259)"
"(let-values(((fold-var_260)"
" fold-var_256))"
"(let-values(((fold-var_261)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_186)"
" binding-sym_258))"
" fold-var_260))))"
"(values"
" fold-var_261)))))"
"(for-loop_255"
" fold-var_259"
"(unsafe-cdr"
" lst_257))))"
" fold-var_256))))"
" for-loop_255)"
" null"
" lst_254)))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_262)"
" binding-syms_217))"
"(begin"
"(if(list?"
" lst_262)"
"(void)"
"(let-values()"
"(in-list"
" lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(fold-var_264"
" lst_265)"
"(if(pair?"
" lst_265)"
"(let-values(((binding-sym_266)"
"(unsafe-car"
" lst_265)))"
"(let-values(((fold-var_267)"
"(let-values(((fold-var_268)"
" fold-var_264))"
"(let-values(((fold-var_269)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...der/compile/form.rkt:121:15_270)"
" register-required-variable-use!21.1)"
"((header52_271)"
" header_186)"
"((temp53_272)"
"(compile-context-self"
" cctx_29))"
"((phase54_273)"
" phase_185)"
"((binding-sym55_274)"
" binding-sym_266)"
"((temp56_275)"
" #f)"
"((temp57_276)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" register-required-variable-use!21.1))"
"(register-required-variable-use!19.1"
" temp57_276"
" #t"
" header52_271"
" temp53_272"
" phase54_273"
" binding-sym55_274"
" temp56_275)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/form.rkt:121:15_270"
" keyword-procedure-extract"
" '(#:defined?)"
" 7)"
" '(#:defined?)"
"(list"
" temp57_276)"
" header52_271"
" temp53_272"
" phase54_273"
" binding-sym55_274"
" temp56_275))))"
" fold-var_268))))"
"(values"
" fold-var_269)))))"
"(for-loop_263"
" fold-var_267"
"(unsafe-cdr"
" lst_265))))"
" fold-var_264))))"
" for-loop_263)"
" null"
" lst_262))))))))"
"(let-values(((rhs_219)"
"(compile$2"
" rhs44_203"
"(let-values(((the-struct_277)"
" cctx_29))"
"(if(compile-context?"
" the-struct_277)"
"(let-values(((phase58_278)"
" phase_185)"
"((header59_279)"
" header_186))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_277)"
" phase58_278"
"(compile-context-top-level-bind-scope"
" the-struct_277)"
"(compile-context-self"
" the-struct_277)"
"(compile-context-module-self"
" the-struct_277)"
"(compile-context-full-module-name"
" the-struct_277)"
"(compile-context-lazy-syntax-literals?"
" the-struct_277)"
" header59_279))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_277)))"
"(if(="
"(length"
" ids_216)"
" 1)"
"(car"
" ids_216)"
" #f))))"
"(begin"
"(definition-callback_37)"
"(compiled-expression-callback_36"
" rhs_219"
"(length"
" def-syms_218)"
" phase_185"
"(as-required?_51"
" header_186))"
"(add-body!_47"
" phase_185"
"(propagate-inline-property"
"(correlate*"
" body_198"
"(list"
" 'define-values"
" def-syms_218"
" rhs_219))"
" body_198))"
"(if(let-values(((or-part_280)"
"(compile-context-module-self"
" cctx_29)))"
"(if or-part_280"
" or-part_280"
"(null?"
" ids_216)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_47"
" phase_185"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_281)"
" def-syms_218))"
"(begin"
"(if(list?"
" lst_281)"
"(void)"
"(let-values()"
"(in-list"
" lst_281)))"
"((letrec-values(((for-loop_282)"
"(lambda(fold-var_283"
" lst_284)"
"(if(pair?"
" lst_284)"
"(let-values(((def-sym_285)"
"(unsafe-car"
" lst_284)))"
"(let-values(((fold-var_286)"
"(let-values(((fold-var_287)"
" fold-var_283))"
"(let-values(((fold-var_288)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_285"
" '(#f)))"
" fold-var_287))))"
"(values"
" fold-var_288)))))"
"(for-loop_282"
" fold-var_286"
"(unsafe-cdr"
" lst_284))))"
" fold-var_283))))"
" for-loop_282)"
" null"
" lst_281)))))"
" '((void))))"
"(add-body!_47"
" phase_185"
"(compile-top-level-bind"
" ids_216"
" binding-syms_217"
"(let-values(((the-struct_289)"
" cctx_29))"
"(if(compile-context?"
" the-struct_289)"
"(let-values(((phase60_290)"
" phase_185)"
"((header61_291)"
" header_186))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_289)"
" phase60_290"
"(compile-context-top-level-bind-scope"
" the-struct_289)"
"(compile-context-self"
" the-struct_289)"
"(compile-context-module-self"
" the-struct_289)"
"(compile-context-full-module-name"
" the-struct_289)"
"(compile-context-lazy-syntax-literals?"
" the-struct_289)"
" header61_291))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"compile-context?\""
" the-struct_289)))"
" #f))))))))))))"
"(if(equal?"
" tmp_199"
" 'define-syntaxes)"
"(let-values()"
"(let-values(((ok?_292"
" define-syntaxes62_293"
" id63_294"
" rhs64_295)"
"(let-values(((s_314)"
" body_198))"
"(let-values(((orig-s_315)"
" s_314))"
"(let-values(((define-syntaxes62_316"
" id63_317"
" rhs64_318)"
"(let-values(((s_319)"
"(if(syntax?$1"
" s_314)"
"(syntax-e$1"
" s_314)"
" s_314)))"
"(if(pair?"
" s_319)"
"(let-values(((define-syntaxes65_320)"
"(let-values(((s_323)"
"(car"
" s_319)))"
" s_323))"
"((id66_321"
" rhs67_322)"
"(let-values(((s_324)"
"(cdr"
" s_319)))"
"(let-values(((s_325)"
"(if(syntax?$1"
" s_324)"
"(syntax-e$1"
" s_324)"
" s_324)))"
"(if(pair?"
" s_325)"
"(let-values(((id68_326)"
"(let-values(((s_328)"
"(car"
" s_325)))"
"(let-values(((s_329)"
"(if(syntax?$1"
" s_328)"
"(syntax-e$1"
" s_328)"
" s_328)))"
"(let-values(((flat-s_330)"
"(to-syntax-list.1"
" s_329)))"
"(if(not"
" flat-s_330)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_315))"
"(let-values()"
"(let-values(((id_331)"
"(let-values(((lst_332)"
" flat-s_330))"
"(begin"
"(if(list?"
" lst_332)"
"(void)"
"(let-values()"
"(in-list"
" lst_332)))"
"((letrec-values(((for-loop_333)"
"(lambda(id_334"
" lst_335)"
"(if(pair?"
" lst_335)"
"(let-values(((s_336)"
"(unsafe-car"
" lst_335)))"
"(let-values(((id_337)"
"(let-values(((id_338)"
" id_334))"
"(let-values(((id_339)"
"(let-values()"
"(let-values(((id71_340)"
"(let-values()"
"(if(let-values(((or-part_341)"
"(if(syntax?$1"
" s_336)"
"(symbol?"
"(syntax-e$1"
" s_336))"
" #f)))"
"(if or-part_341"
" or-part_341"
"(symbol?"
" s_336)))"
" s_336"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_315"
" s_336)))))"
"(cons"
" id71_340"
" id_338)))))"
"(values"
" id_339)))))"
"(for-loop_333"
" id_337"
"(unsafe-cdr"
" lst_335))))"
" id_334))))"
" for-loop_333)"
" null"
" lst_332)))))"
"(alt-reverse"
" id_331))))))))"
"((rhs69_327)"
"(let-values(((s_342)"
"(cdr"
" s_325)))"
"(let-values(((s_343)"
"(if(syntax?$1"
" s_342)"
"(syntax-e$1"
" s_342)"
" s_342)))"
"(if(pair?"
" s_343)"
"(let-values(((rhs70_344)"
"(let-values(((s_345)"
"(car"
" s_343)))"
" s_345))"
"(()"
"(let-values(((s_346)"
"(cdr"
" s_343)))"
"(let-values(((s_347)"
"(if(syntax?$1"
" s_346)"
"(syntax-e$1"
" s_346)"
" s_346)))"
"(if(null?"
" s_347)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_315))))))"
"(values"
" rhs70_344))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_315))))))"
"(values"
" id68_326"
" rhs69_327))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_315))))))"
"(values"
" define-syntaxes65_320"
" id66_321"
" rhs67_322))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_315)))))"
"(values"
" #t"
" define-syntaxes62_316"
" id63_317"
" rhs64_318))))))"
"(let-values(((ids_308)"
" id63_294))"
"(let-values(((binding-syms_309)"
"(def-ids-to-binding-syms"
" ids_308"
" phase_185"
" self_44"
" cctx_29)))"
"(let-values(((next-header_310)"
"(find-or-create-header!_49"
"(add1"
" phase_185))))"
"(let-values(((gen-syms_311)"
"(alt-reverse"
"(let-values(((lst_348)"
" binding-syms_309))"
"(begin"
"(if(list?"
" lst_348)"
"(void)"
"(let-values()"
"(in-list"
" lst_348)))"
"((letrec-values(((for-loop_349)"
"(lambda(fold-var_350"
" lst_351)"
"(if(pair?"
" lst_351)"
"(let-values(((binding-sym_352)"
"(unsafe-car"
" lst_351)))"
"(let-values(((fold-var_353)"
"(let-values(((fold-var_354)"
" fold-var_350))"
"(let-values(((fold-var_355)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_352"
" next-header_310))"
" fold-var_354))))"
"(values"
" fold-var_355)))))"
"(for-loop_349"
" fold-var_353"
"(unsafe-cdr"
" lst_351))))"
" fold-var_350))))"
" for-loop_349)"
" null"
" lst_348))))))"
"(let-values(((rhs_312)"
"(compile$2"
" rhs64_295"
"(let-values(((the-struct_356)"
" cctx_29))"
"(if(compile-context?"
" the-struct_356)"
"(let-values(((phase72_357)"
"(add1"
" phase_185))"
"((header73_358)"
" next-header_310))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_356)"
" phase72_357"
"(compile-context-top-level-bind-scope"
" the-struct_356)"
"(compile-context-self"
" the-struct_356)"
"(compile-context-module-self"
" the-struct_356)"
"(compile-context-full-module-name"
" the-struct_356)"
"(compile-context-lazy-syntax-literals?"
" the-struct_356)"
" header73_358))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                    \"compile-context?\""
" the-struct_356))))))"
"(let-values((()"
"(begin"
"(definition-callback_37)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_36"
" rhs_312"
"(length"
" gen-syms_311)"
"(add1"
" phase_185)"
"(as-required?_51"
" header_186))"
"(values))))"
"(let-values(((transformer-set!s_313)"
"(alt-reverse"
"(let-values(((lst_359)"
" binding-syms_309)"
"((lst_360)"
" gen-syms_311))"
"(begin"
"(if(list?"
" lst_359)"
"(void)"
"(let-values()"
"(in-list"
" lst_359)))"
"(if(list?"
" lst_360)"
"(void)"
"(let-values()"
"(in-list"
" lst_360)))"
"((letrec-values(((for-loop_361)"
"(lambda(fold-var_362"
" lst_363"
" lst_364)"
"(if(if(pair?"
" lst_363)"
"(pair?"
" lst_364)"
" #f)"
"(let-values(((binding-sym_365)"
"(unsafe-car"
" lst_363))"
"((gen-sym_366)"
"(unsafe-car"
" lst_364)))"
"(let-values(((fold-var_367)"
"(let-values(((fold-var_368)"
" fold-var_362))"
"(let-values(((fold-var_369)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_365)"
" gen-sym_366))"
" fold-var_368))))"
"(values"
" fold-var_369)))))"
"(for-loop_361"
" fold-var_367"
"(unsafe-cdr"
" lst_363)"
"(unsafe-cdr"
" lst_364))))"
" fold-var_362))))"
" for-loop_361)"
" null"
" lst_359"
" lst_360))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_29)"
"(let-values()"
"(add-body!_47"
"(add1"
" phase_185)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_311"
" rhs_312))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_313"
" '((void)))))))"
"(let-values()"
"(add-body!_47"
"(add1"
" phase_185)"
"(generate-top-level-define-syntaxes"
" gen-syms_311"
" rhs_312"
" transformer-set!s_313"
"(compile-top-level-bind"
" ids_308"
" binding-syms_309"
"(let-values(((the-struct_370)"
" cctx_29))"
"(if(compile-context?"
" the-struct_370)"
"(let-values(((phase74_371)"
" phase_185)"
"((header75_372)"
" header_186))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_370)"
" phase74_371"
"(compile-context-top-level-bind-scope"
" the-struct_370)"
"(compile-context-self"
" the-struct_370)"
"(compile-context-module-self"
" the-struct_370)"
"(compile-context-full-module-name"
" the-struct_370)"
"(compile-context-lazy-syntax-literals?"
" the-struct_370)"
" header75_372))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                      \"compile-context?\""
" the-struct_370)))"
" gen-syms_311)))))"
"(set! saw-define-syntaxes?_50"
" #t))))))))))))"
"(if(equal?"
" tmp_199"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_373"
" begin-for-syntax76_374"
" e77_375)"
"(let-values(((s_386)"
" body_198))"
"(let-values(((orig-s_387)"
" s_386))"
"(let-values(((begin-for-syntax76_388"
" e77_389)"
"(let-values(((s_390)"
"(if(syntax?$1"
" s_386)"
"(syntax-e$1"
" s_386)"
" s_386)))"
"(if(pair?"
" s_390)"
"(let-values(((begin-for-syntax78_391)"
"(let-values(((s_393)"
"(car"
" s_390)))"
" s_393))"
"((e79_392)"
"(let-values(((s_394)"
"(cdr"
" s_390)))"
"(let-values(((s_395)"
"(if(syntax?$1"
" s_394)"
"(syntax-e$1"
" s_394)"
" s_394)))"
"(let-values(((flat-s_396)"
"(to-syntax-list.1"
" s_395)))"
"(if(not"
" flat-s_396)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_387))"
"(let-values()"
" flat-s_396)))))))"
"(values"
" begin-for-syntax78_391"
" e79_392))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_387)))))"
"(values"
" #t"
" begin-for-syntax76_388"
" e77_389))))))"
"(loop!_183"
" e77_375"
"(add1"
" phase_185)"
"(find-or-create-header!_49"
"(add1"
" phase_185)))))"
"(if(if(equal?"
" tmp_199"
" '#%require)"
" #t"
"(if(equal?"
" tmp_199"
" '#%provide)"
" #t"
"(if(equal?"
" tmp_199"
" '#%declare)"
" #t"
"(if(equal?"
" tmp_199"
" 'module)"
" #t"
"(equal?"
" tmp_199"
" 'module*)))))"
"(let-values()"
"(let-values(((e_397)"
"(other-form-callback_38"
" body_198"
"(let-values(((the-struct_398)"
" cctx_29))"
"(if(compile-context?"
" the-struct_398)"
"(let-values(((phase80_399)"
" phase_185)"
"((header81_400)"
" header_186))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_398)"
" phase80_399"
"(compile-context-top-level-bind-scope"
" the-struct_398)"
"(compile-context-self"
" the-struct_398)"
"(compile-context-module-self"
" the-struct_398)"
"(compile-context-full-module-name"
" the-struct_398)"
"(compile-context-lazy-syntax-literals?"
" the-struct_398)"
" header81_400))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                              \"compile-context?\""
" the-struct_398))))))"
"(if e_397"
"(let-values()"
"(begin"
"(compiled-expression-callback_36"
" e_397"
" #f"
" phase_185"
"(as-required?_51"
" header_186))"
"(add-body!_47"
" phase_185"
" e_397)))"
"(void))))"
"(let-values()"
"(let-values(((e_401)"
"(compile$2"
" body_198"
"(let-values(((the-struct_402)"
" cctx_29))"
"(if(compile-context?"
" the-struct_402)"
"(let-values(((phase82_403)"
" phase_185)"
"((header83_404)"
" header_186))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_402)"
" phase82_403"
"(compile-context-top-level-bind-scope"
" the-struct_402)"
"(compile-context-self"
" the-struct_402)"
"(compile-context-module-self"
" the-struct_402)"
"(compile-context-full-module-name"
" the-struct_402)"
"(compile-context-lazy-syntax-literals?"
" the-struct_402)"
" header83_404))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                              \"compile-context?\""
" the-struct_402)))"
" #f"
"(="
" i_194"
" last-i_52))))"
"(begin"
"(compiled-expression-callback_36"
" e_401"
" #f"
" phase_185"
"(as-required?_51"
" header_186))"
"(add-body!_47"
" phase_185"
" e_401)))))))))))"
"(void)))))"
"(values"
" fold-var_197)))))"
"(for-loop_189"
" fold-var_195"
"(unsafe-cdr"
" lst_191)"
"(+"
" pos_192"
" 1))))"
" fold-var_190))))"
" for-loop_189)"
"(void)"
" lst_187"
" start_188))))))"
" loop!_183)"
" bodys_28"
" phase_43"
"(find-or-create-header!_49 phase_43))"
"(values))))"
"(let-values(((encoded-root-expand-pos_53)"
"(if encoded-root-expand-ctx-box_34"
"(if(unbox encoded-root-expand-ctx-box_34)"
"(if(not"
"(if root-ctx-only-if-syntax?_35"
"(if(not saw-define-syntaxes?_50)"
"(syntax-literals-empty?"
" syntax-literals_45)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_45"
"(unbox encoded-root-expand-ctx-box_34))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_54)"
"(let-values(((temp84_405)"
"(hash-keys phase-to-body_46))"
"((<85_406) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp84_405 <85_406)"
"(sort9.1 temp84_405 <85_406)))))"
"(let-values(((min-phase_55)"
"(if(pair? phases-in-order_54)"
"(car phases-in-order_54)"
" phase_43)))"
"(let-values(((max-phase_56)"
"(if(pair? phases-in-order_54)"
"(car(alt-reverse phases-in-order_54))"
" phase_43)))"
"(let-values(((struct:link-info_57"
" link-info27_58"
" link-info?_59"
" link-info-link-module-uses_60"
" link-info-imports_61"
" link-info-extra-inspectorsss_62"
" link-info-def-decls_63)"
"(let-values(((struct:_407"
" make-_408"
" ?_409"
" -ref_410"
" -set!_411)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'link-info"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'link-info)))))"
"(values"
" struct:_407"
" make-_408"
" ?_409"
"(make-struct-field-accessor"
" -ref_410"
" 0"
" 'link-module-uses)"
"(make-struct-field-accessor"
" -ref_410"
" 1"
" 'imports)"
"(make-struct-field-accessor"
" -ref_410"
" 2"
" 'extra-inspectorsss)"
"(make-struct-field-accessor"
" -ref_410"
" 3"
" 'def-decls)))))"
"(let-values(((phase-to-link-info_65)"
"(let-values(((lst_442)"
" phases-in-order_54))"
"(begin"
"(if(list? lst_442)"
"(void)"
"(let-values()"
"(in-list lst_442)))"
"((letrec-values(((for-loop_443)"
"(lambda(table_444"
" lst_445)"
"(if(pair?"
" lst_445)"
"(let-values(((phase_446)"
"(unsafe-car"
" lst_445)))"
"(let-values(((table_447)"
"(let-values(((table_448)"
" table_444))"
"(let-values(((table_449)"
"(let-values()"
"(let-values(((key_450"
" val_451)"
"(let-values()"
"(let-values(((header_452)"
"(hash-ref"
" phase-to-header_48"
" phase_446"
" #f)))"
"(let-values(((link-module-uses_453"
" imports_454"
" extra-inspectorsss_455"
" def-decls_456)"
"(generate-links+imports"
" header_452"
" phase_446"
" cctx_29)))"
"(values"
" phase_446"
"(link-info27_58"
" link-module-uses_453"
" imports_454"
" extra-inspectorsss_455"
" def-decls_456)))))))"
"(hash-set"
" table_448"
" key_450"
" val_451)))))"
"(values"
" table_449)))))"
"(for-loop_443"
" table_447"
"(unsafe-cdr"
" lst_445))))"
" table_444))))"
" for-loop_443)"
" '#hash()"
" lst_442)))))"
"(let-values(((body-linklets+module-uses_66)"
"(let-values(((lst_457)"
" phases-in-order_54))"
"(begin"
"(if(list? lst_457)"
"(void)"
"(let-values()"
"(in-list lst_457)))"
"((letrec-values(((for-loop_458)"
"(lambda(table_459"
" lst_460)"
"(if(pair?"
" lst_460)"
"(let-values(((phase_461)"
"(unsafe-car"
" lst_460)))"
"(let-values(((table_462)"
"(let-values(((table_463)"
" table_459))"
"(let-values(((table_464)"
"(let-values()"
"(let-values(((key_465"
" val_466)"
"(let-values()"
"(let-values(((bodys_467)"
"(hash-ref"
" phase-to-body_46"
" phase_461)))"
"(let-values(((li_468)"
"(hash-ref"
" phase-to-link-info_65"
" phase_461)))"
"(let-values(((binding-sym-to-define-sym_469)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_48"
" phase_461))))"
"(let-values(((module-uses_470)"
"(link-info-link-module-uses_60"
" li_468)))"
"(let-values(((linklet_471"
" new-module-uses_472)"
"(let-values()"
"((if to-source?_42"
"(lambda(l_473"
" name_474"
" keys_475"
" getter_476)"
"(values"
" l_473"
" keys_475))"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_31"
"(link-info-imports_61"
" li_468))"
"(qq-append"
"(link-info-def-decls_63"
" li_468)"
"(alt-reverse"
"(let-values(((lst_477)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_48"
" phase_461))))"
"(begin"
"(if(list?"
" lst_477)"
"(void)"
"(let-values()"
"(in-list"
" lst_477)))"
"((letrec-values(((for-loop_478)"
"(lambda(fold-var_479"
" lst_480)"
"(if(pair?"
" lst_480)"
"(let-values(((binding-sym_481)"
"(unsafe-car"
" lst_480)))"
"(let-values(((fold-var_482)"
"(let-values(((fold-var_483)"
" fold-var_479))"
"(let-values(((fold-var_484)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_485)"
"(hash-ref"
" binding-sym-to-define-sym_469"
" binding-sym_481)))"
"(list"
" def-sym_485"
" binding-sym_481)))"
" fold-var_483))))"
"(values"
" fold-var_484)))))"
"(for-loop_478"
" fold-var_482"
"(unsafe-cdr"
" lst_480))))"
" fold-var_479))))"
" for-loop_478)"
" null"
" lst_477)))))"
"(qq-append"
"(alt-reverse"
" bodys_467)"
" body-suffix-forms_32))"
" 'module"
"(list->vector"
"(append"
"(alt-reverse"
"(let-values(((lst_486)"
" body-imports_31))"
"(begin"
"(if(list?"
" lst_486)"
"(void)"
"(let-values()"
"(in-list"
" lst_486)))"
"((letrec-values(((for-loop_487)"
"(lambda(fold-var_488"
" lst_489)"
"(if(pair?"
" lst_489)"
"(let-values(((i_490)"
"(unsafe-car"
" lst_489)))"
"(let-values(((fold-var_491)"
"(let-values(((fold-var_492)"
" fold-var_488))"
"(let-values(((fold-var_493)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_492))))"
"(values"
" fold-var_493)))))"
"(for-loop_487"
" fold-var_491"
"(unsafe-cdr"
" lst_489))))"
" fold-var_488))))"
" for-loop_487)"
" null"
" lst_486))))"
"(link-info-link-module-uses_60"
" li_468)))"
"(make-module-use-to-linklet"
"(compile-context-namespace"
" cctx_29)"
" get-module-linklet-info_39"
"(link-info-link-module-uses_60"
" li_468))))))"
"(values"
" phase_461"
"(cons"
" linklet_471"
"(list-tail"
"(vector->list"
" new-module-uses_472)"
"(length"
" body-imports_31))))))))))))"
"(hash-set"
" table_463"
" key_465"
" val_466)))))"
"(values"
" table_464)))))"
"(for-loop_458"
" table_462"
"(unsafe-cdr"
" lst_460))))"
" table_459))))"
" for-loop_458)"
" '#hasheq()"
" lst_457)))))"
"(let-values(((body-linklets_67)"
"(let-values(((ht_494)"
" body-linklets+module-uses_66))"
"(begin"
"(if((lambda(ht_495)"
"(hash? ht_495))"
" ht_494)"
"(void)"
"(let-values()"
"(default-in-hash ht_494)))"
"((letrec-values(((for-loop_496)"
"(lambda(table_497"
" i_498)"
"(if i_498"
"(let-values(((phase_499"
" l+mus_500)"
"(hash-iterate-key+value"
" ht_494"
" i_498)))"
"(let-values(((table_501)"
"(let-values(((table_502)"
" table_497))"
"(let-values(((table_503)"
"(let-values()"
"(let-values(((key_504"
" val_505)"
"(let-values()"
"(values"
" phase_499"
"(car"
" l+mus_500)))))"
"(hash-set"
" table_502"
" key_504"
" val_505)))))"
"(values"
" table_503)))))"
"(for-loop_496"
" table_501"
"(hash-iterate-next"
" ht_494"
" i_498))))"
" table_497))))"
" for-loop_496)"
" '#hasheq()"
"(hash-iterate-first"
" ht_494))))))"
"(let-values(((phase-to-link-module-uses_68)"
"(let-values(((ht_506)"
" body-linklets+module-uses_66))"
"(begin"
"(if((lambda(ht_507)"
"(hash? ht_507))"
" ht_506)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_506)))"
"((letrec-values(((for-loop_508)"
"(lambda(table_509"
" i_510)"
"(if i_510"
"(let-values(((phase_511"
" l+mus_512)"
"(hash-iterate-key+value"
" ht_506"
" i_510)))"
"(let-values(((table_513)"
"(let-values(((table_514)"
" table_509))"
"(let-values(((table_515)"
"(let-values()"
"(let-values(((key_516"
" val_517)"
"(let-values()"
"(values"
" phase_511"
"(cdr"
" l+mus_512)))))"
"(hash-set"
" table_514"
" key_516"
" val_517)))))"
"(values"
" table_515)))))"
"(for-loop_508"
" table_513"
"(hash-iterate-next"
" ht_506"
" i_510))))"
" table_509))))"
" for-loop_508)"
" '#hasheq()"
"(hash-iterate-first"
" ht_506))))))"
"(let-values(((phase-to-link-module-uses-expr_69)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_68"
" mpis_30)))"
"(let-values(((phase-to-link-extra-inspectorsss_70)"
"(let-values(((ht_518)"
" phase-to-link-info_65))"
"(begin"
"(if((lambda(ht_519)"
"(hash? ht_519))"
" ht_518)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_518)))"
"((letrec-values(((for-loop_520)"
"(lambda(table_521"
" i_522)"
"(if i_522"
"(let-values(((phase_523"
" li_524)"
"(hash-iterate-key+value"
" ht_518"
" i_522)))"
"(let-values(((table_525)"
"(let-values(((table_526)"
" table_521))"
"(let-values(((table_527)"
"(let-values()"
"(let-values(((key_528"
" val_529)"
"(let-values()"
"(values"
" phase_523"
"(link-info-extra-inspectorsss_62"
" li_524)))))"
"(hash-set"
" table_526"
" key_528"
" val_529)))))"
"(values"
" table_527)))))"
"(for-loop_520"
" table_525"
"(hash-iterate-next"
" ht_518"
" i_522))))"
" table_521))))"
" for-loop_520)"
" '#hash()"
"(hash-iterate-first"
" ht_518))))))"
"(values"
" body-linklets_67"
" min-phase_55"
" max-phase_56"
" phase-to-link-module-uses_68"
" phase-to-link-module-uses-expr_69"
" phase-to-link-extra-inspectorsss_70"
" syntax-literals_45"
" encoded-root-expand-pos_53)))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack25.1$2)"
"(lambda(given-kws_530 given-args_531 bodys21_532 cctx22_533 mpis23_534)"
"(let-values(((body-imports1_535)(car given-args_531))"
"((given-kws_536)(cdr given-kws_530))"
"((given-args_537)(cdr given-args_531)))"
"(let-values(((body-suffix-forms12_538)"
"(if(pair? given-kws_536)(eq? '#:body-suffix-forms(car given-kws_536)) #f)))"
"(let-values(((body-suffix-forms2_539)(if body-suffix-forms12_538(car given-args_537)(void)))"
"((given-kws_540)(if body-suffix-forms12_538(cdr given-kws_536) given-kws_536))"
"((given-args_541)(if body-suffix-forms12_538(cdr given-args_537) given-args_537)))"
"(let-values(((compiled-expression-callback16_542)"
"(if(pair? given-kws_540)(eq? '#:compiled-expression-callback(car given-kws_540)) #f)))"
"(let-values(((compiled-expression-callback6_543)"
"(if compiled-expression-callback16_542(car given-args_541)(void)))"
"((given-kws_544)(if compiled-expression-callback16_542(cdr given-kws_540) given-kws_540))"
"((given-args_545)(if compiled-expression-callback16_542(cdr given-args_541) given-args_541)))"
"(let-values(((definition-callback17_546)"
"(if(pair? given-kws_544)(eq? '#:definition-callback(car given-kws_544)) #f)))"
"(let-values(((definition-callback7_547)(if definition-callback17_546(car given-args_545)(void)))"
"((given-kws_548)(if definition-callback17_546(cdr given-kws_544) given-kws_544))"
"((given-args_549)(if definition-callback17_546(cdr given-args_545) given-args_545)))"
"(let-values(((encoded-root-expand-ctx-box14_550)"
"(if(pair? given-kws_548)(eq? '#:encoded-root-expand-ctx-box(car given-kws_548)) #f)))"
"(let-values(((encoded-root-expand-ctx-box4_551)"
"(if encoded-root-expand-ctx-box14_550(car given-args_549)(void)))"
"((given-kws_552)"
"(if encoded-root-expand-ctx-box14_550(cdr given-kws_548) given-kws_548))"
"((given-args_553)"
"(if encoded-root-expand-ctx-box14_550(cdr given-args_549) given-args_549)))"
"(let-values(((force-phases13_554)"
"(if(pair? given-kws_552)(eq? '#:force-phases(car given-kws_552)) #f)))"
"(let-values(((force-phases3_555)(if force-phases13_554(car given-args_553)(void)))"
"((given-kws_556)(if force-phases13_554(cdr given-kws_552) given-kws_552))"
"((given-args_557)(if force-phases13_554(cdr given-args_553) given-args_553)))"
"(let-values(((get-module-linklet-info19_558)"
"(if(pair? given-kws_556)"
"(eq? '#:get-module-linklet-info(car given-kws_556))"
" #f)))"
"(let-values(((get-module-linklet-info9_559)"
"(if get-module-linklet-info19_558(car given-args_557)(void)))"
"((given-kws_560)"
"(if get-module-linklet-info19_558(cdr given-kws_556) given-kws_556))"
"((given-args_561)"
"(if get-module-linklet-info19_558(cdr given-args_557) given-args_557)))"
"(let-values(((other-form-callback18_562)"
"(if(pair? given-kws_560)"
"(eq? '#:other-form-callback(car given-kws_560))"
" #f)))"
"(let-values(((other-form-callback8_563)"
"(if other-form-callback18_562(car given-args_561)(void)))"
"((given-kws_564)"
"(if other-form-callback18_562(cdr given-kws_560) given-kws_560))"
"((given-args_565)"
"(if other-form-callback18_562(cdr given-args_561) given-args_561)))"
"(let-values(((root-ctx-only-if-syntax?15_566)"
"(if(pair? given-kws_564)"
"(eq? '#:root-ctx-only-if-syntax?(car given-kws_564))"
" #f)))"
"(let-values(((root-ctx-only-if-syntax?5_567)"
"(if root-ctx-only-if-syntax?15_566(car given-args_565)(void)))"
"((given-kws_568)"
"(if root-ctx-only-if-syntax?15_566(cdr given-kws_564) given-kws_564))"
"((given-args_569)"
"(if root-ctx-only-if-syntax?15_566"
"(cdr given-args_565)"
" given-args_565)))"
"(let-values(((to-source?20_570)(pair? given-kws_568)))"
"(let-values(((to-source?10_571)"
"(if to-source?20_570(car given-args_569)(void))))"
"(compile-forms24.1"
" body-imports1_535"
" body-suffix-forms2_539"
" body-suffix-forms12_538"
" compiled-expression-callback6_543"
" compiled-expression-callback16_542"
" definition-callback7_547"
" definition-callback17_546"
" encoded-root-expand-ctx-box4_551"
" encoded-root-expand-ctx-box14_550"
" force-phases3_555"
" force-phases13_554"
" get-module-linklet-info9_559"
" get-module-linklet-info19_558"
" other-form-callback8_563"
" other-form-callback18_562"
" root-ctx-only-if-syntax?5_567"
" root-ctx-only-if-syntax?15_566"
" to-source?10_571"
" to-source?20_570"
" bodys21_532"
" cctx22_533"
" mpis23_534))))))))))))))))))))))"
"(define-values"
"(compile-forms26.1)"
"(lifted/1.1$16"
"(lambda(given-kws_572 given-argc_573)"
"(if(= given-argc_573 5)"
"(subsets?"
" '(#:body-imports)"
" given-kws_572"
" '(#:body-imports"
" #:body-suffix-forms"
" #:compiled-expression-callback"
" #:definition-callback"
" #:encoded-root-expand-ctx-box"
" #:force-phases"
" #:get-module-linklet-info"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?))"
" #f))"
"(case-lambda"
"((given-kws_574 given-args_575 bodys_576 cctx_577 mpis_578)"
"(unpack25.1$2 given-kws_574 given-args_575 bodys_576 cctx_577 mpis_578)))"
" '(#:body-imports)"
" '(#:body-imports"
" #:body-suffix-forms"
" #:compiled-expression-callback"
" #:definition-callback"
" #:encoded-root-expand-ctx-box"
" #:force-phases"
" #:get-module-linklet-info"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_579 binding-syms_580 cctx_581 trans-exprs_582)"
"(let-values(((phase_583)(compile-context-phase cctx_581)))"
"(let-values(((self_584)(compile-context-self cctx_581)))"
"(let-values(((header_585)(compile-context-header cctx_581)))"
"(let-values(((mpis_586)(header-module-path-indexes header_585)))"
"(let-values(((top-level-bind-scope_587)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_581)))))"
"(let-values(((self-expr_588)(add-module-path-index! mpis_586 self_584)))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_589) ids_579)"
"((lst_590) binding-syms_580)"
"((lst_591)"
"(let-values(((or-part_592) trans-exprs_582))"
"(if or-part_592"
" or-part_592"
"(alt-reverse"
"(let-values(((lst_593) ids_579))"
"(begin"
"(if(list? lst_593)(void)(let-values()(in-list lst_593)))"
"((letrec-values(((for-loop_594)"
"(lambda(fold-var_595 lst_596)"
"(if(pair? lst_596)"
"(let-values(((id_597)(unsafe-car lst_596)))"
"(let-values(((fold-var_598)"
"(let-values(((fold-var_599)"
" fold-var_595))"
"(let-values(((fold-var_600)"
"(let-values()"
"(cons"
"(let-values() ''#f)"
" fold-var_599))))"
"(values fold-var_600)))))"
"(for-loop_594 fold-var_598(unsafe-cdr lst_596))))"
" fold-var_595))))"
" for-loop_594)"
" null"
" lst_593))))))))"
"(begin"
"(if(list? lst_589)(void)(let-values()(in-list lst_589)))"
"(if(list? lst_590)(void)(let-values()(in-list lst_590)))"
"(if(list? lst_591)(void)(let-values()(in-list lst_591)))"
"((letrec-values(((for-loop_601)"
"(lambda(fold-var_602 lst_603 lst_604 lst_605)"
"(if(if(pair? lst_603)(if(pair? lst_604)(pair? lst_605) #f) #f)"
"(let-values(((id_606)(unsafe-car lst_603))"
"((binding-sym_607)(unsafe-car lst_604))"
"((trans-expr_608)(unsafe-car lst_605)))"
"(let-values(((fold-var_609)"
"(let-values(((fold-var_610) fold-var_602))"
"(let-values(((fold-var_611)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_612)"
"(compile-quote-syntax"
"(remove-scope"
" id_606"
" top-level-bind-scope_587)"
" cctx_581)))"
"(list"
" top-level-bind!-id"
" id-stx_612"
" self-expr_588"
" phase_583"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_607)"
" trans-expr_608)))"
" fold-var_610))))"
"(values fold-var_611)))))"
"(for-loop_601"
" fold-var_609"
"(unsafe-cdr lst_603)"
"(unsafe-cdr lst_604)"
"(unsafe-cdr lst_605))))"
" fold-var_602))))"
" for-loop_601)"
" null"
" lst_589"
" lst_590"
" lst_591)))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_615 rhs_616 transformer-set!s_617 finish_618)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_616)"
"(list"
" 'case-lambda"
"(list gen-syms_615(list* 'begin(qq-append transformer-set!s_617(list* finish_618 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_615"
"(list*"
" 'values"
"(alt-reverse"
"(let-values(((lst_619) gen-syms_615))"
"(begin"
"(if(list? lst_619)(void)(let-values()(in-list lst_619)))"
"((letrec-values(((for-loop_620)"
"(lambda(fold-var_621 lst_622)"
"(if(pair? lst_622)"
"(let-values(((s_623)(unsafe-car lst_622)))"
"(let-values(((fold-var_624)"
"(let-values(((fold-var_625) fold-var_621))"
"(let-values(((fold-var_626)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_625))))"
"(values fold-var_626)))))"
"(for-loop_620 fold-var_624(unsafe-cdr lst_622))))"
" fold-var_621))))"
" for-loop_620)"
" null"
" lst_619)))))))"
"(list* 'begin finish_618 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_615 '((apply values args)))) '((void))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_627 orig-s_628)"
"(let-values(((v_629)(syntax-property$1 orig-s_628 'compiler-hint:cross-module-inline)))"
"(if v_629(correlated-property e_627 'compiler-hint:cross-module-inline v_629) e_627))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(ns_630 get-module-linklet-info_631 init-mus_632)"
"(let-values(((mu-intern-table_633)(make-hash)))"
"(let-values(((intern-module-use_634)"
"(lambda(mu_635)"
"(let-values(((mod-name_636)(1/module-path-index-resolve(module-use-module mu_635))))"
"(let-values(((or-part_637)"
"(hash-ref mu-intern-table_633(cons mod-name_636(module-use-phase mu_635)) #f)))"
"(if or-part_637"
" or-part_637"
"(begin"
"(hash-set! mu-intern-table_633(cons mod-name_636(module-use-phase mu_635)) mu_635)"
" mu_635)))))))"
"(begin"
"(for-each2 intern-module-use_634 init-mus_632)"
"(lambda(mu_638)"
"(if mu_638"
"(let-values()"
"(let-values(((mod-name_639)(1/module-path-index-resolve(module-use-module mu_638))))"
"(let-values(((mli_640)"
"(let-values(((or-part_641)"
"(get-module-linklet-info_631 mod-name_639(module-use-phase mu_638))))"
"(if or-part_641"
" or-part_641"
"(namespace->module-linklet-info ns_630 mod-name_639(module-use-phase mu_638))))))"
"(if mli_640"
"(values"
"(module-linklet-info-linklet mli_640)"
"(if(module-linklet-info-module-uses mli_640)"
"(list->vector"
"(append"
" '(#f #f)"
"(alt-reverse"
"(let-values(((pos->vals_642"
" pos-next_643"
" init_644"
" pos-cont?_645"
" val-cont?_646"
" all-cont?_647)"
"(make-sequence '(sub-mu)(module-linklet-info-module-uses mli_640))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_648)"
"(lambda(fold-var_649 pos_650)"
"(if(if pos-cont?_645(pos-cont?_645 pos_650) #t)"
"(let-values(((sub-mu_651)(pos->vals_642 pos_650)))"
"(if(if val-cont?_646(val-cont?_646 sub-mu_651) #t)"
"(let-values(((fold-var_652)"
"(let-values(((fold-var_653) fold-var_649))"
"(let-values(((fold-var_654)"
"(let-values()"
"(cons"
"(let-values()"
"(intern-module-use_634"
"(module-use1.1"
"(module-path-index-shift"
"(module-use-module"
" sub-mu_651)"
"(module-linklet-info-self"
" mli_640)"
"(module-use-module"
" mu_638))"
"(module-use-phase"
" sub-mu_651))))"
" fold-var_653))))"
"(values fold-var_654)))))"
"(if(if all-cont?_647(all-cont?_647 pos_650 sub-mu_651) #t)"
"(for-loop_648 fold-var_652(pos-next_643 pos_650))"
" fold-var_652))"
" fold-var_649))"
" fold-var_649))))"
" for-loop_648)"
" null"
" init_644))))))"
" #f))"
"(values #f #f)))))"
"(let-values()(values #f #f)))))))))"
"(void)"
"(void)"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_1 ns_2)"
"(let-values(((mpis_3)(make-module-path-index-table)))"
"(let-values(((mpi-trees_4)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_12)"
"(let-values(((vec_13 i_14)"
"(let-values(((vec_15 len_16)"
"(let-values(((vec_17)(compiled-in-memory-mpis cim_12)))"
"(begin"
"(if(vector? vec_17)(void)(let-values()(in-vector vec_17)))"
"(values vec_17(unsafe-vector-length vec_17))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_18)"
"(lambda(vec_19 i_20 pos_21)"
"(if(unsafe-fx< pos_21 len_16)"
"(let-values(((mpi_22)"
"(unsafe-vector-ref vec_15 pos_21)))"
"(let-values(((vec_23 i_24)"
"(let-values(((vec_25) vec_19)"
"((i_26) i_20))"
"(let-values(((vec_27 i_28)"
"(let-values()"
"(let-values(((new-vec_29)"
"(if(eq?"
" i_26"
"(unsafe-vector*-length"
" vec_25))"
"(grow-vector"
" vec_25)"
" vec_25)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_29"
" i_26"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_3"
" mpi_22)))"
"(values"
" new-vec_29"
"(unsafe-fx+"
" i_26"
" 1)))))))"
"(values vec_27 i_28)))))"
"(for-loop_18 vec_23 i_24(unsafe-fx+ 1 pos_21))))"
"(values vec_19 i_20)))))"
" for-loop_18)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_13 i_14))))))"
"(let-values(((syntax-literals_5)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_6)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_30)"
"(add-syntax-literals! syntax-literals_5(compiled-in-memory-syntax-literals cim_30))))))"
"(let-values(((module-uses-tables_7) null))"
"(let-values(((module-uses-tables-count_8) 0))"
"(let-values(((phase-to-link-module-uses-trees_9)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_31)"
"(let-values(((pos_32) module-uses-tables-count_8))"
"(begin"
"(set! module-uses-tables_7"
"(cons"
"(compiled-in-memory-phase-to-link-module-uses cim_31)"
" module-uses-tables_7))"
"(set! module-uses-tables-count_8(add1 pos_32))"
" pos_32))))))"
"(let-values(((syntax-literals-expr_10)"
"(generate-eager-syntax-literals! syntax-literals_5 mpis_3 0 #f ns_2)))"
"(let-values(((phase-to-link-module-uses-expr_11)"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((lst_33)(alt-reverse module-uses-tables_7)))"
"(begin"
"(if(list? lst_33)(void)(let-values()(in-list lst_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_35 lst_36)"
"(if(pair? lst_36)"
"(let-values(((phase-to-link-module-uses_37)"
"(unsafe-car lst_36)))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_35))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_37"
" mpis_3))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(for-loop_34 fold-var_38(unsafe-cdr lst_36))))"
" fold-var_35))))"
" for-loop_34)"
" null"
" lst_33)))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_3))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_4))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_11)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_9))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_10)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_6)))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_41 proc_42)"
"((letrec-values(((loop_43)"
"(lambda(cims_44)"
"(alt-reverse"
"(let-values(((lst_45) cims_44))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((cim_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(let-values(((fold-var_52)"
"(let-values()"
"(cons"
"(let-values()"
"(vector"
"(proc_42 cim_49)"
"(loop_43"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_49))"
"(loop_43"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_49))))"
" fold-var_51))))"
"(values fold-var_52)))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
" null"
" lst_45)))))))"
" loop_43)"
" cims_41)))"
"(void)"
"(void)"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_1"
" merge-serialization?5_2"
" namespace3_3"
" namespace6_4"
" to-source?1_5"
" to-source?4_6"
" all-cims7_7)"
"(let-values(((all-cims_8) all-cims7_7))"
"(let-values(((to-source?_9)(if to-source?4_6 to-source?1_5 #f)))"
"(let-values(((merge-serialization?_10)(if merge-serialization?5_2 merge-serialization?2_1 #f)))"
"(let-values(((ns_11)(if namespace6_4 namespace3_3 #f)))"
"(let-values()"
"(let-values(((cims_12)(remove-nontail-purely-functional all-cims_8)))"
"(if(= 1(length cims_12))"
"(let-values()(car cims_12))"
"(let-values()"
"(let-values(((sequence-ht_13)"
"(let-values(((lst_15) cims_12)((start_16) 0))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"(if(exact-nonnegative-integer? start_16)"
"(void)"
"(let-values()(in-naturals start_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(table_18 lst_19 pos_20)"
"(if(if(pair? lst_19) #t #f)"
"(let-values(((cim_21)(unsafe-car lst_19))((i_22) pos_20))"
"(let-values(((table_23)"
"(let-values(((table_24) table_18))"
"(let-values(((table_25)"
"(let-values()"
"(let-values(((key_26"
" val_27)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_22))"
"((if to-source?_9"
" values"
" compiled-in-memory-linklet-directory)"
" cim_21)))))"
"(hash-set"
" table_24"
" key_26"
" val_27)))))"
"(values table_25)))))"
"(for-loop_17"
" table_23"
"(unsafe-cdr lst_19)"
"(+ pos_20 1))))"
" table_18))))"
" for-loop_17)"
" '#hasheq()"
" lst_15"
" start_16)))))"
"(let-values(((ht_14)"
"(if merge-serialization?_10"
"(hash-set"
" sequence-ht_13"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle"
"(hasheq 0(build-shared-data-linklet cims_12 ns_11))))))"
" sequence-ht_13)))"
"(if to-source?_9"
"(let-values() ht_14)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_14)"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_12"
" null"
" #f"
" #f)))))))))))))))"
"(define-values"
"(unpack9.1$1)"
"(lambda(given-kws_28 given-args_29 all-cims7_30)"
"(let-values(((merge-serialization?5_31)"
"(if(pair? given-kws_28)(eq? '#:merge-serialization?(car given-kws_28)) #f)))"
"(let-values(((merge-serialization?2_32)(if merge-serialization?5_31(car given-args_29)(void)))"
"((given-kws_33)(if merge-serialization?5_31(cdr given-kws_28) given-kws_28))"
"((given-args_34)(if merge-serialization?5_31(cdr given-args_29) given-args_29)))"
"(let-values(((namespace6_35)(if(pair? given-kws_33)(eq? '#:namespace(car given-kws_33)) #f)))"
"(let-values(((namespace3_36)(if namespace6_35(car given-args_34)(void)))"
"((given-kws_37)(if namespace6_35(cdr given-kws_33) given-kws_33))"
"((given-args_38)(if namespace6_35(cdr given-args_34) given-args_34)))"
"(let-values(((to-source?4_39)(pair? given-kws_37)))"
"(let-values(((to-source?1_40)(if to-source?4_39(car given-args_38)(void))))"
"(compiled-tops->compiled-top8.1"
" merge-serialization?2_32"
" merge-serialization?5_31"
" namespace3_36"
" namespace6_35"
" to-source?1_40"
" to-source?4_39"
" all-cims7_30)))))))))"
"(define-values"
"(compiled-tops->compiled-top10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_41 given-argc_42)"
"(if(= given-argc_42 3)"
"(let-values(((l1_43) given-kws_41))"
"(let-values(((l1_44)"
"(if(null? l1_43) l1_43(if(eq?(car l1_43) '#:merge-serialization?)(cdr l1_43) l1_43))))"
"(let-values(((l1_45) l1_44))"
"(let-values(((l1_46)(if(null? l1_45) l1_45(if(eq?(car l1_45) '#:namespace)(cdr l1_45) l1_45))))"
"(let-values(((l1_47) l1_46))"
"(let-values(((l1_48)(if(null? l1_47) l1_47(if(eq?(car l1_47) '#:to-source?)(cdr l1_47) l1_47))))"
"(null? l1_48)))))))"
" #f))"
"(case-lambda((given-kws_49 given-args_50 all-cims_51)(unpack9.1$1 given-kws_49 given-args_50 all-cims_51)))"
" null"
" '(#:merge-serialization? #:namespace #:to-source?)"
"(let-values(((compiled-tops->compiled-top_52)(case-lambda((all-cims_53)(unpack9.1$1 null null all-cims_53)))))"
" compiled-tops->compiled-top_52)))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_54)"
"(let-values(((ht_55)(1/linklet-directory->hash ld_54)))"
"(alt-reverse"
"(let-values(((start_56) 0)((end_57)(hash-count ht_55))((inc_58) 1))"
"(begin"
"(if(if(real? start_56)(if(real? end_57)(real? inc_58) #f) #f)"
"(void)"
"(let-values()(in-range start_56 end_57 inc_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(fold-var_60 pos_61)"
"(if(< pos_61 end_57)"
"(let-values(((i_62) pos_61))"
"(let-values(((fold-var_63)"
"(let-values(((top_64)"
"(hash-ref"
" ht_55"
"(string->symbol(number->string i_62))"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66)"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_68)"
" fold-var_66))"
"(if top_64"
"(let-values(((fold-var_69)"
" fold-var_68))"
"(let-values(((fold-var_70)"
"(let-values()"
"(cons"
"(let-values()"
" top_64)"
" fold-var_69))))"
"(values fold-var_70)))"
" fold-var_68))))"
" fold-var_67)))))"
" for-loop_65)"
" fold-var_60)))))"
"(for-loop_59 fold-var_63(+ pos_61 inc_58))))"
" fold-var_60))))"
" for-loop_59)"
" null"
" start_56)))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_71)"
"((letrec-values(((loop_72)"
"(lambda(cims_73)"
"(if(null? cims_73)"
"(let-values() null)"
"(if(null?(cdr cims_73))"
"(let-values() cims_73)"
"(if(if(compiled-in-memory?(car cims_73))"
"(compiled-in-memory-purely-functional?(car cims_73))"
" #f)"
"(let-values()(loop_72(cdr cims_73)))"
"(let-values()(cons(car cims_73)(cdr cims_73)))))))))"
" loop_72)"
" cims_71)))"
"(void)"
"(void)"
"(define-values"
"(any-side-effects?6.1)"
"(lambda(locals1_1 locals2_2 e3_3 expected-results4_4 required-reference?5_5)"
"(let-values(((e_6) e3_3))"
"(let-values(((expected-results_7) expected-results4_4))"
"(let-values(((required-reference?_8) required-reference?5_5))"
"(let-values(((locals_9)(if locals2_2 locals1_1 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_10)"
"((letrec-values(((loop_11)"
"(lambda(e_12 locals_13)"
"(let-values(((tmp_14)"
"(if(pair?(correlated-e e_12))"
"(correlated-e(car(correlated-e e_12)))"
" #f)))"
"(let-values(((index_15)"
"(if(symbol? tmp_14)"
"(hash-ref"
" '#hasheq((values . 3)"
"(begin . 5)"
"(void . 4)"
"(make-struct-type . 7)"
"(let-values . 2)"
"(quote . 1)"
"(letrec-values . 2)"
"(make-struct-field-mutator . 9)"
"(begin0 . 6)"
"(#%variable-reference . 1)"
"(lambda . 1)"
"(case-lambda . 1)"
"(make-struct-field-accessor . 8))"
" tmp_14"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_15 4)"
"(if(unsafe-fx< index_15 1)"
"(let-values()"
"(let-values(((v_16)(correlated-e e_12)))"
"(if(let-values(((or-part_17)"
"(self-quoting-in-linklet? v_16)))"
"(if or-part_17"
" or-part_17"
"(if(symbol? v_16)"
"(let-values(((or-part_18)"
"(hash-ref locals_13 v_16 #f)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)"
"(built-in-symbol? v_16)))"
"(if or-part_19"
" or-part_19"
"(required-reference?_8 v_16)))))"
" #f)))"
" 1"
" #f)))"
"(if(unsafe-fx< index_15 2)"
"(let-values() 1)"
"(if(unsafe-fx< index_15 3)"
"(let-values()"
"(let-values(((ok?_20 _9_21 ids10_22 rhs11_23 body12_24)"
"(let-values(((s_39) e_12))"
"(let-values(((orig-s_40) s_39))"
"(let-values(((_9_41"
" ids10_42"
" rhs11_43"
" body12_44)"
"(let-values(((s_45)"
"(if(syntax?$2"
" s_39)"
"(syntax-e$3"
" s_39)"
" s_39)))"
"(if(pair? s_45)"
"(let-values(((_13_46)"
"(let-values(((s_50)"
"(car"
" s_45)))"
" s_50))"
"((ids14_47"
" rhs15_48"
" body16_49)"
"(let-values(((s_51)"
"(cdr"
" s_45)))"
"(let-values(((s_52)"
"(if(syntax?$2"
" s_51)"
"(syntax-e$3"
" s_51)"
" s_51)))"
"(if(pair?"
" s_52)"
"(let-values(((ids17_53"
" rhs18_54)"
"(let-values(((s_56)"
"(car"
" s_52)))"
"(let-values(((s_57)"
"(if(syntax?$2"
" s_56)"
"(syntax-e$3"
" s_56)"
" s_56)))"
"(let-values(((flat-s_58)"
"(to-syntax-list.1$1"
" s_57)))"
"(if(not"
" flat-s_58)"
"(let-values()"
"((lambda(false_59"
" str_60"
" e_61)"
"(error"
" str_60))"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_40))"
"(let-values()"
"(let-values(((ids_65"
" rhs_66)"
"(let-values(((lst_67)"
" flat-s_58))"
"(begin"
"(if(list?"
" lst_67)"
"(void)"
"(let-values()"
"(in-list"
" lst_67)))"
"((letrec-values(((for-loop_68)"
"(lambda(ids_69"
" rhs_70"
" lst_71)"
"(if(pair?"
" lst_71)"
"(let-values(((s_72)"
"(unsafe-car"
" lst_71)))"
"(let-values(((ids_73"
" rhs_74)"
"(let-values(((ids_75)"
" ids_69)"
"((rhs_76)"
" rhs_70))"
"(let-values(((ids_77"
" rhs_78)"
"(let-values()"
"(let-values(((ids24_79"
" rhs25_80)"
"(let-values()"
"(let-values(((s_81)"
"(if(syntax?$2"
" s_72)"
"(syntax-e$3"
" s_72)"
" s_72)))"
"(if(pair?"
" s_81)"
"(let-values(((ids20_82)"
"(let-values(((s_84)"
"(car"
" s_81)))"
" s_84))"
"((rhs21_83)"
"(let-values(((s_85)"
"(cdr"
" s_81)))"
"(let-values(((s_86)"
"(if(syntax?$2"
" s_85)"
"(syntax-e$3"
" s_85)"
" s_85)))"
"(if(pair?"
" s_86)"
"(let-values(((rhs22_87)"
"(let-values(((s_88)"
"(car"
" s_86)))"
" s_88))"
"(()"
"(let-values(((s_89)"
"(cdr"
" s_86)))"
"(let-values(((s_90)"
"(if(syntax?$2"
" s_89)"
"(syntax-e$3"
" s_89)"
" s_89)))"
"(if(null?"
" s_90)"
"(values)"
"((lambda(false_91"
" str_92"
" e_93)"
"(error"
" str_92))"
" #f"
"                                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_40))))))"
"(values"
" rhs22_87))"
"((lambda(false_94"
" str_95"
" e_96)"
"(error"
" str_95))"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_40))))))"
"(values"
" ids20_82"
" rhs21_83))"
"((lambda(false_97"
" str_98"
" e_99)"
"(error"
" str_98))"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_40))))))"
"(values"
"(cons"
" ids24_79"
" ids_75)"
"(cons"
" rhs25_80"
" rhs_76))))))"
"(values"
" ids_77"
" rhs_78)))))"
"(for-loop_68"
" ids_73"
" rhs_74"
"(unsafe-cdr"
" lst_71))))"
"(values"
" ids_69"
" rhs_70)))))"
" for-loop_68)"
" null"
" null"
" lst_67)))))"
"(values"
"(alt-reverse"
" ids_65)"
"(alt-reverse"
" rhs_66)))))))))"
"((body19_55)"
"(let-values(((s_100)"
"(cdr"
" s_52)))"
"(let-values(((s_101)"
"(if(syntax?$2"
" s_100)"
"(syntax-e$3"
" s_100)"
" s_100)))"
"(if(pair?"
" s_101)"
"(let-values(((body23_102)"
"(let-values(((s_103)"
"(car"
" s_101)))"
" s_103))"
"(()"
"(let-values(((s_104)"
"(cdr"
" s_101)))"
"(let-values(((s_105)"
"(if(syntax?$2"
" s_104)"
"(syntax-e$3"
" s_104)"
" s_104)))"
"(if(null?"
" s_105)"
"(values)"
"((lambda(false_106"
" str_107"
" e_108)"
"(error"
" str_107))"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_40))))))"
"(values"
" body23_102))"
"((lambda(false_109"
" str_110"
" e_111)"
"(error"
" str_110))"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_40))))))"
"(values"
" ids17_53"
" rhs18_54"
" body19_55))"
"((lambda(false_112"
" str_113"
" e_114)"
"(error"
" str_113))"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_40))))))"
"(values"
" _13_46"
" ids14_47"
" rhs15_48"
" body16_49))"
"((lambda(false_115"
" str_116"
" e_117)"
"(error str_116))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_40)))))"
"(values"
" #t"
" _9_41"
" ids10_42"
" rhs11_43"
" body12_44))))))"
"(if(not"
"(let-values(((lst_118) ids10_22)"
"((lst_119) rhs11_23))"
"(begin"
"(if(list? lst_118)"
"(void)"
"(let-values()(in-list lst_118)))"
"(if(list? lst_119)"
"(void)"
"(let-values()(in-list lst_119)))"
"((letrec-values(((for-loop_120)"
"(lambda(result_121"
" lst_122"
" lst_123)"
"(if(if(pair? lst_122)"
"(pair? lst_123)"
" #f)"
"(let-values(((ids_124)"
"(unsafe-car"
" lst_122))"
"((rhs_125)"
"(unsafe-car"
" lst_123)))"
"(let-values(((result_126)"
"(let-values(((result_127)"
" result_121))"
"(let-values(((result_128)"
"(let-values()"
"(let-values()"
"(let-values(((...pile/side-effect.rkt:27:21_129)"
" any-side-effects?8.1)"
"((rhs26_130)"
" rhs_125)"
"((temp27_131)"
"(correlated-length"
" ids_124))"
"((required-reference?28_132)"
" required-reference?_8)"
"((locals29_133)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals29_133"
" #t"
" rhs26_130"
" temp27_131"
" required-reference?28_132)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:27:21_129"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals29_133)"
" rhs26_130"
" temp27_131"
" required-reference?28_132)))))))"
"(values"
" result_128)))))"
"(if(if(not"
"((lambda x_134"
" result_126)"
" ids_124))"
"(not"
"((lambda x_135"
" result_126)"
" rhs_125))"
" #f)"
"(for-loop_120"
" result_126"
"(unsafe-cdr"
" lst_122)"
"(unsafe-cdr"
" lst_123))"
" result_126)))"
" result_121))))"
" for-loop_120)"
" #f"
" lst_118"
" lst_119))))"
"(loop_11"
" body12_24"
"(add-binding-info locals_13 ids10_22 rhs11_23))"
" #f)))"
"(let-values()"
"(let-values(((ok?_136 _30_137 e31_138)"
"(let-values(((s_149) e_12))"
"(let-values(((orig-s_150) s_149))"
"(let-values(((_30_151 e31_152)"
"(let-values(((s_153)"
"(if(syntax?$2"
" s_149)"
"(syntax-e$3"
" s_149)"
" s_149)))"
"(if(pair? s_153)"
"(let-values(((_32_154)"
"(let-values(((s_156)"
"(car"
" s_153)))"
" s_156))"
"((e33_155)"
"(let-values(((s_157)"
"(cdr"
" s_153)))"
"(let-values(((s_158)"
"(if(syntax?$2"
" s_157)"
"(syntax-e$3"
" s_157)"
" s_157)))"
"(let-values(((flat-s_159)"
"(to-syntax-list.1$1"
" s_158)))"
"(if(not"
" flat-s_159)"
"(let-values()"
"((lambda(false_160"
" str_161"
" e_162)"
"(error"
" str_161))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_150))"
"(let-values()"
" flat-s_159)))))))"
"(values"
" _32_154"
" e33_155))"
"((lambda(false_166"
" str_167"
" e_168)"
"(error str_167))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_150)))))"
"(values #t _30_151 e31_152))))))"
"(if(let-values(((lst_169) e31_138))"
"(begin"
"(if(list? lst_169)"
"(void)"
"(let-values()(in-list lst_169)))"
"((letrec-values(((for-loop_170)"
"(lambda(result_171 lst_172)"
"(if(pair? lst_172)"
"(let-values(((e_173)"
"(unsafe-car"
" lst_172)))"
"(let-values(((result_174)"
"(let-values(((result_175)"
" result_171))"
"(let-values(((result_176)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:33:21_177)"
" any-side-effects?8.1)"
"((e34_178)"
" e_173)"
"((temp35_179)"
" 1)"
"((required-reference?36_180)"
" required-reference?_8)"
"((locals37_181)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals37_181"
" #t"
" e34_178"
" temp35_179"
" required-reference?36_180)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:33:21_177"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals37_181)"
" e34_178"
" temp35_179"
" required-reference?36_180))))))))"
"(values"
" result_176)))))"
"(if(not"
"((lambda x_182"
"(not"
" result_174))"
" e_173))"
"(for-loop_170"
" result_174"
"(unsafe-cdr"
" lst_172))"
" result_174)))"
" result_171))))"
" for-loop_170)"
" #t"
" lst_169)))"
"(length e31_138)"
" #f))))))"
"(if(unsafe-fx< index_15 6)"
"(if(unsafe-fx< index_15 5)"
"(let-values()"
"(let-values(((ok?_183 _38_184 e39_185)"
"(let-values(((s_196) e_12))"
"(let-values(((orig-s_197) s_196))"
"(let-values(((_38_198 e39_199)"
"(let-values(((s_200)"
"(if(syntax?$2"
" s_196)"
"(syntax-e$3"
" s_196)"
" s_196)))"
"(if(pair? s_200)"
"(let-values(((_40_201)"
"(let-values(((s_203)"
"(car"
" s_200)))"
" s_203))"
"((e41_202)"
"(let-values(((s_204)"
"(cdr"
" s_200)))"
"(let-values(((s_205)"
"(if(syntax?$2"
" s_204)"
"(syntax-e$3"
" s_204)"
" s_204)))"
"(let-values(((flat-s_206)"
"(to-syntax-list.1$1"
" s_205)))"
"(if(not"
" flat-s_206)"
"(let-values()"
"((lambda(false_207"
" str_208"
" e_209)"
"(error"
" str_208))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_197))"
"(let-values()"
" flat-s_206)))))))"
"(values"
" _40_201"
" e41_202))"
"((lambda(false_213"
" str_214"
" e_215)"
"(error str_214))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_197)))))"
"(values #t _38_198 e39_199))))))"
"(if(let-values(((lst_216) e39_185))"
"(begin"
"(if(list? lst_216)"
"(void)"
"(let-values()(in-list lst_216)))"
"((letrec-values(((for-loop_217)"
"(lambda(result_218 lst_219)"
"(if(pair? lst_219)"
"(let-values(((e_220)"
"(unsafe-car"
" lst_219)))"
"(let-values(((result_221)"
"(let-values(((result_222)"
" result_218))"
"(let-values(((result_223)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:38:21_224)"
" any-side-effects?8.1)"
"((e42_225)"
" e_220)"
"((temp43_226)"
" 1)"
"((required-reference?44_227)"
" required-reference?_8)"
"((locals45_228)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals45_228"
" #t"
" e42_225"
" temp43_226"
" required-reference?44_227)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:38:21_224"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals45_228)"
" e42_225"
" temp43_226"
" required-reference?44_227))))))))"
"(values"
" result_223)))))"
"(if(not"
"((lambda x_229"
"(not"
" result_221))"
" e_220))"
"(for-loop_217"
" result_221"
"(unsafe-cdr lst_219))"
" result_221)))"
" result_218))))"
" for-loop_217)"
" #t"
" lst_216)))"
" 1"
" #f)))"
"(let-values()"
"(let-values(((ok?_230 _46_231 e47_232)"
"(let-values(((s_243) e_12))"
"(let-values(((orig-s_244) s_243))"
"(let-values(((_46_245 e47_246)"
"(let-values(((s_247)"
"(if(syntax?$2"
" s_243)"
"(syntax-e$3"
" s_243)"
" s_243)))"
"(if(pair? s_247)"
"(let-values(((_48_248)"
"(let-values(((s_250)"
"(car"
" s_247)))"
" s_250))"
"((e49_249)"
"(let-values(((s_251)"
"(cdr"
" s_247)))"
"(let-values(((s_252)"
"(if(syntax?$2"
" s_251)"
"(syntax-e$3"
" s_251)"
" s_251)))"
"(let-values(((flat-s_253)"
"(to-syntax-list.1$1"
" s_252)))"
"(if(not"
" flat-s_253)"
"(let-values()"
"((lambda(false_254"
" str_255"
" e_256)"
"(error"
" str_255))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_244))"
"(let-values()"
" flat-s_253)))))))"
"(values"
" _48_248"
" e49_249))"
"((lambda(false_260"
" str_261"
" e_262)"
"(error str_261))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_244)))))"
"(values #t _46_245 e47_246))))))"
"((letrec-values(((bloop_263)"
"(lambda(es_264)"
"(if(null? es_264)"
"(let-values() #f)"
"(if(null?(cdr es_264))"
"(let-values()"
"(loop_11"
"(car es_264)"
" locals_13))"
"(let-values()"
"(if(not"
"(let-values(((...pile/side-effect.rkt:46:28_265)"
" any-side-effects?8.1)"
"((temp50_266)"
"(car es_264))"
"((temp51_267)"
" #f)"
"((required-reference?52_268)"
" required-reference?_8)"
"((locals53_269)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals53_269"
" #t"
" temp50_266"
" temp51_267"
" required-reference?52_268)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:46:28_265"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list locals53_269)"
" temp50_266"
" temp51_267"
" required-reference?52_268))))"
"(bloop_263(cdr es_264))"
" #f)))))))"
" bloop_263)"
" e47_232))))"
"(if(unsafe-fx< index_15 7)"
"(let-values()"
"(let-values(((ok?_270 _54_271 e055_272 e56_273)"
"(let-values(((s_286) e_12))"
"(let-values(((orig-s_287) s_286))"
"(let-values(((_54_288 e055_289 e56_290)"
"(let-values(((s_291)"
"(if(syntax?$2"
" s_286)"
"(syntax-e$3"
" s_286)"
" s_286)))"
"(if(pair? s_291)"
"(let-values(((_57_292)"
"(let-values(((s_295)"
"(car"
" s_291)))"
" s_295))"
"((e058_293"
" e59_294)"
"(let-values(((s_296)"
"(cdr"
" s_291)))"
"(let-values(((s_297)"
"(if(syntax?$2"
" s_296)"
"(syntax-e$3"
" s_296)"
" s_296)))"
"(if(pair?"
" s_297)"
"(let-values(((e060_298)"
"(let-values(((s_300)"
"(car"
" s_297)))"
" s_300))"
"((e61_299)"
"(let-values(((s_301)"
"(cdr"
" s_297)))"
"(let-values(((s_302)"
"(if(syntax?$2"
" s_301)"
"(syntax-e$3"
" s_301)"
" s_301)))"
"(let-values(((flat-s_303)"
"(to-syntax-list.1$1"
" s_302)))"
"(if(not"
" flat-s_303)"
"(let-values()"
"((lambda(false_304"
" str_305"
" e_306)"
"(error"
" str_305))"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_287))"
"(let-values()"
" flat-s_303)))))))"
"(values"
" e060_298"
" e61_299))"
"((lambda(false_310"
" str_311"
" e_312)"
"(error"
" str_311))"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_287))))))"
"(values"
" _57_292"
" e058_293"
" e59_294))"
"((lambda(false_313"
" str_314"
" e_315)"
"(error str_314))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_287)))))"
"(values"
" #t"
" _54_288"
" e055_289"
" e56_290))))))"
"(if(let-values(((lst_316) e56_273))"
"(begin"
"(if(list? lst_316)"
"(void)"
"(let-values()(in-list lst_316)))"
"((letrec-values(((for-loop_317)"
"(lambda(result_318 lst_319)"
"(if(pair? lst_319)"
"(let-values(((e_320)"
"(unsafe-car"
" lst_319)))"
"(let-values(((result_321)"
"(let-values(((result_322)"
" result_318))"
"(let-values(((result_323)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:51:21_324)"
" any-side-effects?8.1)"
"((e62_325)"
" e_320)"
"((temp63_326)"
" #f)"
"((required-reference?64_327)"
" required-reference?_8)"
"((locals65_328)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals65_328"
" #t"
" e62_325"
" temp63_326"
" required-reference?64_327)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:51:21_324"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals65_328)"
" e62_325"
" temp63_326"
" required-reference?64_327))))))))"
"(values"
" result_323)))))"
"(if(not"
"((lambda x_329"
"(not"
" result_321))"
" e_320))"
"(for-loop_317"
" result_321"
"(unsafe-cdr lst_319))"
" result_321)))"
" result_318))))"
" for-loop_317)"
" #t"
" lst_316)))"
"(loop_11 e055_272 locals_13)"
" #f)))"
"(if(unsafe-fx< index_15 8)"
"(let-values()"
"(if(ok-make-struct-type? e_12 required-reference?_8)"
" 5"
" #f))"
"(if(unsafe-fx< index_15 9)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'accessor)"
" 1"
" #f))"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'mutator)"
" 1"
" #f))))))))))))"
" loop_11)"
" e_6"
" locals_9)))"
"(not"
"(if actual-results_10"
"(let-values(((or-part_330)(not expected-results_7)))"
"(if or-part_330 or-part_330(= actual-results_10 expected-results_7)))"
" #f))))))))))"
"(define-values"
"(unpack7.1$2)"
"(lambda(given-kws_331 given-args_332 e3_333 expected-results4_334 required-reference?5_335)"
"(let-values(((locals2_336)(pair? given-kws_331)))"
"(let-values(((locals1_337)(if locals2_336(car given-args_332)(void))))"
"(any-side-effects?6.1 locals1_337 locals2_336 e3_333 expected-results4_334 required-reference?5_335)))))"
"(define-values"
"(any-side-effects?8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_338 given-argc_339)"
"(if(= given-argc_339 5)"
"(let-values(((l1_340) given-kws_338))"
"(let-values(((l1_341)(if(null? l1_340) l1_340(if(eq?(car l1_340) '#:locals)(cdr l1_340) l1_340))))"
"(null? l1_341)))"
" #f))"
"(case-lambda"
"((given-kws_342 given-args_343 e_344 expected-results_345 required-reference?_346)"
"(unpack7.1$2 given-kws_342 given-args_343 e_344 expected-results_345 required-reference?_346)))"
" null"
" '(#:locals)"
"(let-values(((any-side-effects?_347)"
"(case-lambda"
"((e_348 expected-results_349 required-reference?_350)"
"(unpack7.1$2 null null e_348 expected-results_349 required-reference?_350)))))"
" any-side-effects?_347)))"
"(define-values"
"(struct:struct-op make-struct-op struct-op? struct-op-type struct-op-field-count)"
"(let-values(((struct:_351 make-_352 ?_353 -ref_354 -set!_355)"
"(let-values()"
"(let-values()(make-struct-type 'struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'struct-op)))))"
"(values"
" struct:_351"
" make-_352"
" ?_353"
"(make-struct-field-accessor -ref_354 0 'type)"
"(make-struct-field-accessor -ref_354 1 'field-count))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_376 idss_377 rhss_378)"
"(let-values(((lst_379) idss_377)((lst_380) rhss_378))"
"(begin"
"(if(list? lst_379)(void)(let-values()(in-list lst_379)))"
"(if(list? lst_380)(void)(let-values()(in-list lst_380)))"
"((letrec-values(((for-loop_381)"
"(lambda(locals_382 lst_383 lst_384)"
"(if(if(pair? lst_383)(pair? lst_384) #f)"
"(let-values(((ids_385)(unsafe-car lst_383))((rhs_386)(unsafe-car lst_384)))"
"(let-values(((locals_387)"
"(let-values(((locals_388) locals_382))"
"(let-values(((locals_389)"
"(let-values()"
"((letrec-values(((loop_390)"
"(lambda(rhs_391)"
"(let-values(((tmp_392)"
"(if(pair?"
"(correlated-e"
" rhs_391))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_391)))"
" #f)))"
"(if(equal?"
" tmp_392"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_393)"
"(extract-struct-field-count-lower-bound"
" rhs_391)))"
"(let-values(((lst_394)"
"(correlated->list"
" ids_385))"
"((lst_395)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_394)"
"(void)"
"(let-values()"
"(in-list lst_394)))"
"(if(list? lst_395)"
"(void)"
"(let-values()"
"(in-list lst_395)))"
"((letrec-values(((for-loop_396)"
"(lambda(locals_397"
" lst_398"
" lst_399)"
"(if(if(pair?"
" lst_398)"
"(pair?"
" lst_399)"
" #f)"
"(let-values(((id_400)"
"(unsafe-car"
" lst_398))"
"((type_401)"
"(unsafe-car"
" lst_399)))"
"(let-values(((locals_402)"
"(let-values(((locals_403)"
" locals_397))"
"(let-values(((locals_404)"
"(let-values()"
"(hash-set"
" locals_403"
"(correlated-e"
" id_400)"
"(make-struct-op"
" type_401"
" field-count_393)))))"
"(values"
" locals_404)))))"
"(for-loop_396"
" locals_402"
"(unsafe-cdr"
" lst_398)"
"(unsafe-cdr"
" lst_399))))"
" locals_397))))"
" for-loop_396)"
" locals_388"
" lst_394"
" lst_395)))))"
"(if(equal? tmp_392 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_391)))"
"(loop_390"
"(caddr"
"(correlated->list"
" rhs_391)))"
"(loop_390 #f)))"
"(let-values()"
"(let-values(((lst_405)"
"(correlated->list"
" ids_385)))"
"(begin"
"(if(list? lst_405)"
"(void)"
"(let-values()"
"(in-list lst_405)))"
"((letrec-values(((for-loop_406)"
"(lambda(locals_407"
" lst_408)"
"(if(pair?"
" lst_408)"
"(let-values(((id_409)"
"(unsafe-car"
" lst_408)))"
"(let-values(((locals_410)"
"(let-values(((locals_411)"
" locals_407))"
"(let-values(((locals_412)"
"(let-values()"
"(hash-set"
" locals_411"
"(correlated-e"
" id_409)"
" #t))))"
"(values"
" locals_412)))))"
"(for-loop_406"
" locals_410"
"(unsafe-cdr"
" lst_408))))"
" locals_407))))"
" for-loop_406)"
" locals_388"
" lst_405))))))))))"
" loop_390)"
" rhs_386))))"
"(values locals_389)))))"
"(for-loop_381 locals_387(unsafe-cdr lst_383)(unsafe-cdr lst_384))))"
" locals_382))))"
" for-loop_381)"
" locals_376"
" lst_379"
" lst_380)))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_413 required-reference?_414)"
"(let-values(((l_415)(correlated->list e_413)))"
"(let-values(((init-field-count-expr_416)(if(>(length l_415) 3)(list-ref l_415 3) #f)))"
"(let-values(((immutables-expr_417)"
"(let-values(((or-part_418)(if(>(length l_415) 9)(list-ref l_415 9) #f)))"
"(if or-part_418 or-part_418 'null))))"
"(if(>=(length l_415) 5)"
"(if(<=(length l_415) 12)"
"(let-values(((pos->vals_419 pos-next_420 init_421 pos-cont?_422 val-cont?_423 all-cont?_424)"
"(make-sequence '(arg)(cdr l_415)))"
"((pos->vals_425 pos-next_426 init_427 pos-cont?_428 val-cont?_429 all-cont?_430)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_431)(quoted? symbol? v_431))"
"(lambda(v_432)(quoted? false? v_432))"
"(lambda(v_433)(field-count-expr-to-field-count v_433))"
"(lambda(v_434)(field-count-expr-to-field-count v_434))"
"(lambda(v_435)"
"(not"
"(let-values(((v67_436) v_435)"
"((temp68_437) 1)"
"((required-reference?69_438) required-reference?_414))"
"(if(variable-reference-constant?(#%variable-reference any-side-effects?8.1))"
"(any-side-effects?6.1 #f #f v67_436 temp68_437 required-reference?69_438)"
"(any-side-effects?8.1 v67_436 temp68_437 required-reference?69_438)))))"
"(lambda(v_439)(known-good-struct-properties? v_439 immutables-expr_417))"
"(lambda(v_440)(inspector-or-false? v_440))"
"(lambda(v_441)(procedure-spec? v_441 immutables-expr_417))"
"(lambda(v_442)(immutables-ok? v_442 init-field-count-expr_416))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_443)"
"(lambda(result_444 pos_445 pos_446)"
"(if(if(if pos-cont?_422(pos-cont?_422 pos_445) #t)"
"(if pos-cont?_428(pos-cont?_428 pos_446) #t)"
" #f)"
"(let-values(((arg_447)(pos->vals_419 pos_445))"
"((pred_448)(pos->vals_425 pos_446)))"
"(if(if(if val-cont?_423(val-cont?_423 arg_447) #t)"
"(if val-cont?_429(val-cont?_429 pred_448) #t)"
" #f)"
"(let-values(((result_449)"
"(let-values(((result_450) result_444))"
"(let-values(((result_451)"
"(let-values()"
"(let-values()(pred_448 arg_447)))))"
"(values result_451)))))"
"(if(if(if(if all-cont?_424(all-cont?_424 pos_445 arg_447) #t)"
"(not((lambda x_452(not result_449)) arg_447))"
" #f)"
"(if(if all-cont?_430(all-cont?_430 pos_446 pred_448) #t)"
"(not((lambda x_453(not result_449)) pred_448))"
" #f)"
" #f)"
"(for-loop_443 result_449(pos-next_420 pos_445)(pos-next_426 pos_446))"
" result_449))"
" result_444))"
" result_444))))"
" for-loop_443)"
" #t"
" init_421"
" init_427)))"
" #f)"
" #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_454)"
"(let-values(((l_455)(correlated->list e_454)))"
"(+(field-count-expr-to-field-count(list-ref l_455 3))(field-count-expr-to-field-count(list-ref l_455 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_456 v_457)"
"(let-values(((or-part_458)"
"(if(pair?(correlated-e v_457))"
"(if(eq?(correlated-e(car(correlated-e v_457))) 'quote)"
"(val?_456(correlated-e(correlated-cadr v_457)))"
" #f)"
" #f)))"
"(if or-part_458 or-part_458(val?_456(correlated-e v_457))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_459)(if(pair?(correlated-e v_459))(correlated-e(correlated-cadr v_459))(correlated-e v_459))))"
"(define-values(false?)(lambda(v_460)(eq?(correlated-e v_460) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_461)(if(quoted? exact-nonnegative-integer? v_461)(quoted-value v_461) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_462)"
"(let-values(((or-part_463)(quoted? false? v_462)))"
"(if or-part_463"
" or-part_463"
"(if(= 1(correlated-length v_462))(eq? 'current-inspector(correlated-e(car(correlated-e v_462)))) #f)))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_464 immutables-expr_465)"
"(let-values(((or-part_466)(quoted? null? v_464)))"
"(if or-part_466"
" or-part_466"
"(let-values(((or-part_467)(eq? 'null(correlated-e v_464))))"
"(if or-part_467"
" or-part_467"
"(if(pair?(correlated-e v_464))"
"(if(eq?(correlated-e(car(correlated-e v_464))) 'list)"
"(if(let-values(((lst_468)(cdr(correlated->list v_464))))"
"(begin"
"(if(list? lst_468)(void)(let-values()(in-list lst_468)))"
"((letrec-values(((for-loop_469)"
"(lambda(result_470 lst_471)"
"(if(pair? lst_471)"
"(let-values(((prop+val_472)(unsafe-car lst_471)))"
"(let-values(((result_473)"
"(let-values(((result_474) result_470))"
"(let-values(((result_475)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_472)"
" 3)"
"(let-values(((prop+val_476)"
"(correlated->list"
" prop+val_472)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_476)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_476 1)"
"(list-ref prop+val_476 2)"
" immutables-expr_465)"
" #f))"
" #f)))))"
"(values result_475)))))"
"(if(not((lambda x_477(not result_473)) prop+val_472))"
"(for-loop_469 result_473(unsafe-cdr lst_471))"
" result_473)))"
" result_470))))"
" for-loop_469)"
" #t"
" lst_468)))"
"(="
"(sub1(correlated-length v_464))"
"(set-count"
"(let-values(((lst_478)(cdr(correlated->list v_464))))"
"(begin"
"(if(list? lst_478)(void)(let-values()(in-list lst_478)))"
"((letrec-values(((for-loop_479)"
"(lambda(table_480 lst_481)"
"(if(pair? lst_481)"
"(let-values(((prop+val_482)(unsafe-car lst_481)))"
"(let-values(((table_483)"
"(let-values(((table_484) table_480))"
"(let-values(((table_485)"
"(let-values()"
"(let-values(((key_486 val_487)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_482)"
" 1)))"
" #t))))"
"(hash-set"
" table_484"
" key_486"
" val_487)))))"
"(values table_485)))))"
"(for-loop_479 table_483(unsafe-cdr lst_481))))"
" table_480))))"
" for-loop_479)"
" '#hash()"
" lst_478)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_488 val-expr_489 immutables-expr_490)"
"(let-values(((tmp_491)(correlated-e prop-expr_488)))"
"(if(equal? tmp_491 'prop:evt)"
"(let-values()(immutable-field? val-expr_489 immutables-expr_490))"
"(if(equal? tmp_491 'prop:procedure)"
"(let-values()(immutable-field? val-expr_489 immutables-expr_490))"
"(let-values() #f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_492 immutables-expr_493)"
"(if(quoted? exact-nonnegative-integer? val-expr_492)"
"(memv(quoted-value val-expr_492)(immutables-expr-to-immutables immutables-expr_493 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_494 fail-v_495)"
"(let-values(((tmp_496)(if(pair?(correlated-e e_494))(correlated-e(car(correlated-e e_494))) #f)))"
"(if(equal? tmp_496 'quote)"
"(let-values()"
"(let-values(((v_497)(correlated-cadr e_494)))"
"(let-values(((or-part_498)"
"(if(correlated-length v_497)"
"(let-values(((l_499)(map2 correlated-e(correlated->list v_497))))"
"(if(andmap2 exact-nonnegative-integer? l_499)"
"(if(=(length l_499)(set-count(list->set l_499))) l_499 #f)"
" #f))"
" #f)))"
"(if or-part_498 or-part_498 fail-v_495))))"
"(let-values() fail-v_495)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_500 immutables-expr_501)"
"(let-values(((or-part_502)(quoted? false? e_500)))"
"(if or-part_502"
" or-part_502"
"(if(quoted? exact-nonnegative-integer? e_500)"
"(memv(quoted-value e_500)(immutables-expr-to-immutables immutables-expr_501 null))"
" #f)))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_503 init-field-count-expr_504)"
"(let-values(((l_505)(immutables-expr-to-immutables e_503 #f)))"
"(let-values(((c_506)(field-count-expr-to-field-count init-field-count-expr_504)))"
"(if l_505"
"(let-values(((lst_507) l_505))"
"(begin"
"(if(list? lst_507)(void)(let-values()(in-list lst_507)))"
"((letrec-values(((for-loop_508)"
"(lambda(result_509 lst_510)"
"(if(pair? lst_510)"
"(let-values(((n_511)(unsafe-car lst_510)))"
"(let-values(((result_512)"
"(let-values(((result_513) result_509))"
"(let-values(((result_514)"
"(let-values()(let-values()(< n_511 c_506)))))"
"(values result_514)))))"
"(if(not((lambda x_515(not result_512)) n_511))"
"(for-loop_508 result_512(unsafe-cdr lst_510))"
" result_512)))"
" result_509))))"
" for-loop_508)"
" #t"
" lst_507)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_516 locals_517 type_518)"
"(let-values(((l_519)(correlated->list e_516)))"
"(let-values(((a_520)(if(=(length l_519) 4)(hash-ref locals_517(correlated-e(list-ref l_519 1)) #f) #f)))"
"(if(struct-op? a_520)"
"(if(eq?(struct-op-type a_520) type_518)"
"(if(<(field-count-expr-to-field-count(list-ref l_519 2))(struct-op-field-count a_520))"
"(quoted? symbol?(list-ref l_519 3))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(void)"
"(define-values"
"(compile-single)"
"(lambda(s_1 cctx_2)"
"(let-values(((...nder/compile/top.rkt:28:2_3) compile-top11.1)"
"((s12_4) s_1)"
"((cctx13_5) cctx_2)"
"((temp14_6) #f)"
"((temp15_7) #t))"
"(if(variable-reference-constant?(#%variable-reference compile-top11.1))"
"(compile-top9.1 temp14_6 #t temp15_7 #t #f #f s12_4 cctx13_5)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:28:2_3"
" keyword-procedure-extract"
" '(#:serializable? #:single-expression?)"
" 4)"
" '(#:serializable? #:single-expression?)"
"(list temp14_6 temp15_7)"
" s12_4"
" cctx13_5)))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_8"
" serializable?4_9"
" single-expression?2_10"
" single-expression?5_11"
" to-source?3_12"
" to-source?6_13"
" s7_14"
" cctx8_15)"
"(let-values(((s_16) s7_14))"
"(let-values(((cctx_17) cctx8_15))"
"(let-values(((serializable?_18)(if serializable?4_9 serializable?1_8 #t)))"
"(let-values(((single-expression?_19)(if single-expression?5_11 single-expression?2_10 #f)))"
"(let-values(((to-source?_20)(if to-source?6_13 to-source?3_12 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_21)(compile-context-phase cctx_17)))"
"(let-values(((mpis_22)(make-module-path-index-table)))"
"(let-values(((purely-functional?_23) #t))"
"(let-values(((body-linklets_24"
" min-phase_25"
" max-phase_26"
" phase-to-link-module-uses_27"
" phase-to-link-module-uses-expr_28"
" phase-to-link-extra-inspectorsss_29"
" syntax-literals_30"
" no-root-context-pos_31)"
"(let-values(((...nder/compile/top.rkt:60:5_34) compile-forms26.1)"
"((temp16_35)(list s_16))"
"((cctx17_36) cctx_17)"
"((mpis18_37) mpis_22)"
"((temp19_38)"
"(if single-expression?_19"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((to-source?20_39) to-source?_20)"
"((temp21_40)(lambda()(set! purely-functional?_23 #f)))"
"((temp22_41)"
"(lambda(e_43 expected-results_44 phase_45 required-reference?_46)"
"(if(if purely-functional?_23"
"(let-values(((e24_47) e_43)"
"((expected-results25_48) expected-results_44)"
"((required-reference?26_49)"
" required-reference?_46))"
"(if(variable-reference-constant?"
"(#%variable-reference any-side-effects?8.1))"
"(any-side-effects?6.1"
" #f"
" #f"
" e24_47"
" expected-results25_48"
" required-reference?26_49)"
"(any-side-effects?8.1"
" e24_47"
" expected-results25_48"
" required-reference?26_49)))"
" #f)"
"(let-values()(set! purely-functional?_23 #f))"
"(void))))"
"((temp23_42)"
"(lambda(s_50 cctx_51)"
"(begin"
"(set! purely-functional?_23 #f)"
"(compile-top-level-require s_50 cctx_51)))))"
"(if(variable-reference-constant?(#%variable-reference compile-forms26.1))"
"(compile-forms24.1"
" temp19_38"
" #f"
" #f"
" temp22_41"
" #t"
" temp21_40"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp23_42"
" #t"
" #f"
" #f"
" to-source?20_39"
" #t"
" temp16_35"
" cctx17_36"
" mpis18_37)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:60:5_34"
" keyword-procedure-extract"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:definition-callback"
" #:other-form-callback"
" #:to-source?)"
" 5)"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:definition-callback"
" #:other-form-callback"
" #:to-source?)"
"(list temp19_38 temp22_41 temp21_40 temp23_42 to-source?20_39)"
" temp16_35"
" cctx17_36"
" mpis18_37)))))"
"(let-values(((add-metadata_32)"
"(lambda(ht_52)"
"(let-values(((ht_53)(hash-set ht_52 'original-phase phase_21)))"
"(let-values(((ht_54)(hash-set ht_53 'max-phase max-phase_26))) ht_54)))))"
"(let-values(((bundle_33)"
"((if to-source?_20 values 1/hash->linklet-bundle)"
"(add-metadata_32"
"(if serializable?_18"
"(let-values()"
"(let-values(((syntax-literals-expr_55)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_30"
" mpis_22"
" phase_21"
"(compile-context-self cctx_17)"
"(compile-context-namespace cctx_17)))))"
"(let-values(((link-linklet_56)"
"((if to-source?_20"
" values"
"(lambda(s_57)"
"(let-values()(1/compile-linklet s_57))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_22))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_21) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_28)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_55)))))"
"(hash-set body-linklets_24 'link link-linklet_56))))"
"(let-values() body-linklets_24))))))"
"(if to-source?_20"
"(let-values()(hasheq #f bundle_33))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_33))"
" phase-to-link-module-uses_27"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_29"
"(mpis-as-vector mpis_22)"
"(syntax-literals-as-vector syntax-literals_30)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_17))"
" purely-functional?_23))))))))))))))))))"
"(define-values"
"(unpack10.1$2)"
"(lambda(given-kws_58 given-args_59 s7_60 cctx8_61)"
"(let-values(((serializable?4_62)(if(pair? given-kws_58)(eq? '#:serializable?(car given-kws_58)) #f)))"
"(let-values(((serializable?1_63)(if serializable?4_62(car given-args_59)(void)))"
"((given-kws_64)(if serializable?4_62(cdr given-kws_58) given-kws_58))"
"((given-args_65)(if serializable?4_62(cdr given-args_59) given-args_59)))"
"(let-values(((single-expression?5_66)"
"(if(pair? given-kws_64)(eq? '#:single-expression?(car given-kws_64)) #f)))"
"(let-values(((single-expression?2_67)(if single-expression?5_66(car given-args_65)(void)))"
"((given-kws_68)(if single-expression?5_66(cdr given-kws_64) given-kws_64))"
"((given-args_69)(if single-expression?5_66(cdr given-args_65) given-args_65)))"
"(let-values(((to-source?6_70)(pair? given-kws_68)))"
"(let-values(((to-source?3_71)(if to-source?6_70(car given-args_69)(void))))"
"(compile-top9.1"
" serializable?1_63"
" serializable?4_62"
" single-expression?2_67"
" single-expression?5_66"
" to-source?3_71"
" to-source?6_70"
" s7_60"
" cctx8_61)))))))))"
"(define-values"
"(compile-top11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_72 given-argc_73)"
"(if(= given-argc_73 4)"
"(let-values(((l1_74) given-kws_72))"
"(let-values(((l1_75)(if(null? l1_74) l1_74(if(eq?(car l1_74) '#:serializable?)(cdr l1_74) l1_74))))"
"(let-values(((l1_76) l1_75))"
"(let-values(((l1_77)"
"(if(null? l1_76) l1_76(if(eq?(car l1_76) '#:single-expression?)(cdr l1_76) l1_76))))"
"(let-values(((l1_78) l1_77))"
"(let-values(((l1_79)(if(null? l1_78) l1_78(if(eq?(car l1_78) '#:to-source?)(cdr l1_78) l1_78))))"
"(null? l1_79)))))))"
" #f))"
"(case-lambda((given-kws_80 given-args_81 s_82 cctx_83)(unpack10.1$2 given-kws_80 given-args_81 s_82 cctx_83)))"
" null"
" '(#:serializable? #:single-expression? #:to-source?)"
"(let-values(((compile-top_84)(case-lambda((s_85 cctx_86)(unpack10.1$2 null null s_85 cctx_86)))))"
" compile-top_84)))"
"(define-values"
"(compile-top-level-require)"
"(lambda(s_87 cctx_88)"
"(let-values(((phase_89)(compile-context-phase cctx_88)))"
"(let-values(((tmp_90)(core-form-sym s_87 phase_89)))"
"(if(equal? tmp_90 '#%require)"
"(let-values()"
"(let-values(((form-stx_91)(compile-quote-syntax s_87 cctx_88)))"
"(list top-level-require!-id form-stx_91 ns-id)))"
"(let-values() #f))))))"
"(void)"
"(void)"
"(define-values"
"(compile-module15.1)"
"(lambda(as-submodule?3_2"
" as-submodule?9_3"
" modules-being-compiled6_4"
" modules-being-compiled12_5"
" self1_6"
" self7_7"
" serializable?4_8"
" serializable?10_9"
" to-source?5_10"
" to-source?11_11"
" with-submodules?2_12"
" with-submodules?8_13"
" s13_14"
" cctx14_15)"
"(let-values(((s_16) s13_14))"
"(let-values(((cctx_17) cctx14_15))"
"(let-values(((given-self_18)(if self7_7 self1_6 #f)))"
"(let-values(((with-submodules?_19)(if with-submodules?8_13 with-submodules?2_12 #t)))"
"(let-values(((as-submodule?_20)(if as-submodule?9_3 as-submodule?3_2 #f)))"
"(let-values(((serializable?_21)(if serializable?10_9 serializable?4_8 with-submodules?_19)))"
"(let-values(((to-source?_22)(if to-source?11_11 to-source?5_10 #f)))"
"(let-values(((modules-being-compiled_23)"
"(if modules-being-compiled12_5"
" modules-being-compiled6_4"
"(if with-submodules?_19(make-hasheq) #f))))"
"(let-values()"
"(let-values()"
"(let-values(((ok?_24 module34_25 name35_26 initial-require36_27 mb37_28)"
"(let-values(((s_88)(syntax-disarm$1 s_16)))"
"(let-values(((orig-s_89) s_88))"
"(let-values(((module34_90 name35_91 initial-require36_92 mb37_93)"
"(let-values(((s_94)"
"(if(syntax?$1 s_88)(syntax-e$1 s_88) s_88)))"
"(if(pair? s_94)"
"(let-values(((module38_95)"
"(let-values(((s_99)(car s_94))) s_99))"
"((name39_96 initial-require40_97 mb41_98)"
"(let-values(((s_100)(cdr s_94)))"
"(let-values(((s_101)"
"(if(syntax?$1 s_100)"
"(syntax-e$1 s_100)"
" s_100)))"
"(if(pair? s_101)"
"(let-values(((name42_102)"
"(let-values(((s_105)"
"(car"
" s_101)))"
" s_105))"
"((initial-require43_103"
" mb44_104)"
"(let-values(((s_106)"
"(cdr"
" s_101)))"
"(let-values(((s_107)"
"(if(syntax?$1"
" s_106)"
"(syntax-e$1"
" s_106)"
" s_106)))"
"(if(pair? s_107)"
"(let-values(((initial-require45_108)"
"(let-values(((s_110)"
"(car"
" s_107)))"
" s_110))"
"((mb46_109)"
"(let-values(((s_111)"
"(cdr"
" s_107)))"
"(let-values(((s_112)"
"(if(syntax?$1"
" s_111)"
"(syntax-e$1"
" s_111)"
" s_111)))"
"(if(pair?"
" s_112)"
"(let-values(((mb47_113)"
"(let-values(((s_114)"
"(car"
" s_112)))"
" s_114))"
"(()"
"(let-values(((s_115)"
"(cdr"
" s_112)))"
"(let-values(((s_116)"
"(if(syntax?$1"
" s_115)"
"(syntax-e$1"
" s_115)"
" s_115)))"
"(if(null?"
" s_116)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_89))))))"
"(values"
" mb47_113))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_89))))))"
"(values"
" initial-require45_108"
" mb46_109))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_89))))))"
"(values"
" name42_102"
" initial-require43_103"
" mb44_104))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_89))))))"
"(values"
" module38_95"
" name39_96"
" initial-require40_97"
" mb41_98))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_89)))))"
"(values #t module34_90 name35_91 initial-require36_92 mb37_93))))))"
"(let-values(((ok?_43 #%module-begin48_44 body49_45)"
"(let-values(((s_117)(syntax-disarm$1 mb37_28)))"
"(let-values(((orig-s_118) s_117))"
"(let-values(((#%module-begin48_119 body49_120)"
"(let-values(((s_121)"
"(if(syntax?$1 s_117)"
"(syntax-e$1 s_117)"
" s_117)))"
"(if(pair? s_121)"
"(let-values(((#%module-begin50_122)"
"(let-values(((s_124)(car s_121))) s_124))"
"((body51_123)"
"(let-values(((s_125)(cdr s_121)))"
"(let-values(((s_126)"
"(if(syntax?$1 s_125)"
"(syntax-e$1 s_125)"
" s_125)))"
"(let-values(((flat-s_127)"
"(to-syntax-list.1 s_126)))"
"(if(not flat-s_127)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_118))"
"(let-values() flat-s_127)))))))"
"(values #%module-begin50_122 body51_123))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_118)))))"
"(values #t #%module-begin48_119 body49_120))))))"
"(let-values(((enclosing-self_56)(compile-context-module-self cctx_17)))"
"(let-values(((self_57)"
"(let-values(((or-part_128) given-self_18))"
"(if or-part_128"
" or-part_128"
"(make-generic-self-module-path-index"
"(make-self-module-path-index"
"(syntax-e$1 name35_26)"
" enclosing-self_56))))))"
"(let-values(((full-module-name_58)"
"(let-values(((parent-full-name_129)"
"(compile-context-full-module-name cctx_17))"
"((name_130)(syntax-e$1 name35_26)))"
"(if parent-full-name_129"
"(append"
"(if(list? parent-full-name_129)"
" parent-full-name_129"
"(list parent-full-name_129))"
"(list name_130))"
" name_130))))"
"(let-values(((requires_59)(syntax-property$1 s_16 'module-requires)))"
"(let-values(((provides_60)(syntax-property$1 s_16 'module-provides)))"
"(let-values(((encoded-root-expand-ctx-box_61)"
"(box(syntax-property$1 s_16 'module-root-expand-context))))"
"(let-values(((body-context-simple?_62)"
"(syntax-property$1 s_16 'module-body-context-simple?)))"
"(let-values(((language-info_63)"
"(filter-language-info"
"(syntax-property$1 s_16 'module-language))))"
"(let-values(((bodys_64) body49_45))"
"(let-values(((empty-result-for-module->namespace?_65) #f))"
"(let-values(((mpis_66)(make-module-path-index-table)))"
"(let-values(((body-cctx_67)"
"(let-values(((the-struct_131) cctx_17))"
"(if(compile-context? the-struct_131)"
"(let-values(((phase52_132) 0)"
"((self53_133) self_57)"
"((module-self54_134) self_57)"
"((full-module-name55_135)"
" full-module-name_58)"
"((lazy-syntax-literals?56_136) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_131)"
" phase52_132"
"(compile-context-top-level-bind-scope"
" the-struct_131)"
" self53_133"
" module-self54_134"
" full-module-name55_135"
" lazy-syntax-literals?56_136"
"(compile-context-header the-struct_131)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"compile-context?\""
" the-struct_131)))))"
"(let-values(((cross-phase-persistent?_68) #f))"
"(let-values(((side-effects_69)(make-hasheqv)))"
"(let-values(((check-side-effects!_70)"
"(lambda(e_137"
" expected-results_138"
" phase_139"
" required-reference?_140)"
"(if(hash-ref side-effects_69 phase_139 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e57_141) e_137)"
"((expected-results58_142)"
" expected-results_138)"
"((required-reference?59_143)"
" required-reference?_140))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" #f"
" #f"
" e57_141"
" expected-results58_142"
" required-reference?59_143)"
"(any-side-effects?8.1"
" e57_141"
" expected-results58_142"
" required-reference?59_143)))"
"(let-values()"
"(hash-set!"
" side-effects_69"
" phase_139"
" #t))"
"(void)))))))"
"(let-values(((pre-submodules_71)"
"(let-values(((...r/compile/module.rkt:90:26_144)"
" compile-submodules33.1)"
"((temp60_145) 'module)"
"((bodys61_146) bodys_64)"
"((with-submodules?62_147)"
" with-submodules?_19)"
"((serializable?63_148)"
" serializable?_21)"
"((to-source?64_149) to-source?_22)"
"((body-cctx65_150) body-cctx_67)"
"((modules-being-compiled66_151)"
" modules-being-compiled_23))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules33.1))"
"(compile-submodules31.1"
" bodys61_146"
" body-cctx65_150"
" modules-being-compiled66_151"
" serializable?63_148"
" to-source?64_149"
" with-submodules?62_147"
" temp60_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:90:26_144"
" keyword-procedure-extract"
" '(#:bodys"
" #:cctx"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
" 3)"
" '(#:bodys"
" #:cctx"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
"(list"
" bodys61_146"
" body-cctx65_150"
" modules-being-compiled66_151"
" serializable?63_148"
" to-source?64_149"
" with-submodules?62_147)"
" temp60_145)))))"
"(let-values(((body-linklets_72"
" min-phase_73"
" max-phase_74"
" phase-to-link-module-uses_75"
" phase-to-link-module-uses-expr_76"
" phase-to-link-extra-inspectorsss_77"
" syntax-literals_78"
" root-ctx-pos_79)"
"(let-values(((...r/compile/module.rkt:107:5_152)"
" compile-forms26.1)"
"((bodys67_153) bodys_64)"
"((body-cctx68_154) body-cctx_67)"
"((mpis69_155) mpis_66)"
"((temp70_156)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp71_157) '((void)))"
"((temp72_158) '(0))"
"((encoded-root-expand-ctx-box73_159)"
" encoded-root-expand-ctx-box_61)"
"((body-context-simple?74_160)"
" body-context-simple?_62)"
"((check-side-effects!75_161)"
" check-side-effects!_70)"
"((temp76_162)"
"(lambda(body_165 cctx_166)"
"(let-values(((tmp_167)"
"(core-form-sym"
" body_165"
"(compile-context-phase"
" cctx_166))))"
"(if(equal?"
" tmp_167"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_168"
" #%declare79_169"
" kw80_170)"
"(let-values(((s_181)"
" body_165))"
"(let-values(((orig-s_182)"
" s_181))"
"(let-values(((#%declare79_183"
" kw80_184)"
"(let-values(((s_185)"
"(if(syntax?$1"
" s_181)"
"(syntax-e$1"
" s_181)"
" s_181)))"
"(if(pair?"
" s_185)"
"(let-values(((#%declare81_186)"
"(let-values(((s_188)"
"(car"
" s_185)))"
" s_188))"
"((kw82_187)"
"(let-values(((s_189)"
"(cdr"
" s_185)))"
"(let-values(((s_190)"
"(if(syntax?$1"
" s_189)"
"(syntax-e$1"
" s_189)"
" s_189)))"
"(let-values(((flat-s_191)"
"(to-syntax-list.1"
" s_190)))"
"(if(not"
" flat-s_191)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_182))"
"(let-values()"
" flat-s_191)))))))"
"(values"
" #%declare81_186"
" kw82_187))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_182)))))"
"(values"
" #t"
" #%declare79_183"
" kw80_184))))))"
"(begin"
"(let-values(((lst_192)"
" kw80_170))"
"(begin"
"(if(list?"
" lst_192)"
"(void)"
"(let-values()"
"(in-list"
" lst_192)))"
"((letrec-values(((for-loop_193)"
"(lambda(fold-var_194"
" lst_195)"
"(if(pair?"
" lst_195)"
"(let-values(((kw_196)"
"(unsafe-car"
" lst_195)))"
"(let-values(((fold-var_197)"
"(let-values(((fold-var_198)"
" fold-var_194))"
"(let-values(((fold-var_199)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_196)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_68"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_196)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_65"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_61"
" #t)))"
"(void))))"
"(void)))))"
"(values"
" fold-var_199)))))"
"(for-loop_193"
" fold-var_197"
"(unsafe-cdr"
" lst_195))))"
" fold-var_194))))"
" for-loop_193)"
"(void)"
" lst_192)))"
" #f)))"
"(let-values() #f)))))"
"((temp77_163)"
"(lambda(mod-name_200 phase_201)"
"(let-values(((ht_202)"
"(if modules-being-compiled_23"
"(hash-ref"
" modules-being-compiled_23"
" mod-name_200"
" #f)"
" #f)))"
"(if ht_202"
"(hash-ref"
" ht_202"
" phase_201"
" #f)"
" #f))))"
"((to-source?78_164)"
" to-source?_22))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-forms26.1))"
"(compile-forms24.1"
" temp70_156"
" temp71_157"
" #t"
" check-side-effects!75_161"
" #t"
" #f"
" #f"
" encoded-root-expand-ctx-box73_159"
" #t"
" temp72_158"
" #t"
" temp77_163"
" #t"
" temp76_162"
" #t"
" body-context-simple?74_160"
" #t"
" to-source?78_164"
" #t"
" bodys67_153"
" body-cctx68_154"
" mpis69_155)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:107:5_152"
" keyword-procedure-extract"
" '(#:body-imports"
" #:body-suffix-forms"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:force-phases"
" #:get-module-linklet-info"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
" 5)"
" '(#:body-imports"
" #:body-suffix-forms"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:force-phases"
" #:get-module-linklet-info"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
"(list"
" temp70_156"
" temp71_157"
" check-side-effects!75_161"
" encoded-root-expand-ctx-box73_159"
" temp72_158"
" temp77_163"
" temp76_162"
" body-context-simple?74_160"
" to-source?78_164)"
" bodys67_153"
" body-cctx68_154"
" mpis69_155)))))"
"(let-values((()"
"(begin"
"(if with-submodules?_19"
"(let-values()"
"(hash-set!"
" modules-being-compiled_23"
"(1/module-path-index-resolve self_57)"
"(let-values(((ht_203)"
" body-linklets_72))"
"(begin"
"(if((lambda(ht_204)"
"(hash? ht_204))"
" ht_203)"
"(void)"
"(let-values()"
"(default-in-hash ht_203)))"
"((letrec-values(((for-loop_205)"
"(lambda(table_206"
" i_207)"
"(if i_207"
"(let-values(((phase_208"
" linklet_209)"
"(hash-iterate-key+value"
" ht_203"
" i_207)))"
"(let-values(((table_210)"
"(let-values(((table_211)"
" table_206))"
"(let-values(((table_212)"
"(let-values()"
"(let-values(((key_213"
" val_214)"
"(let-values()"
"(values"
" phase_208"
"(module-linklet-info2.1"
" linklet_209"
"(hash-ref"
" phase-to-link-module-uses_75"
" phase_208"
" #f)"
" self_57)))))"
"(hash-set"
" table_211"
" key_213"
" val_214)))))"
"(values"
" table_212)))))"
"(for-loop_205"
" table_210"
"(hash-iterate-next"
" ht_203"
" i_207))))"
" table_206))))"
" for-loop_205)"
" '#hasheq()"
"(hash-iterate-first ht_203))))))"
"(void))"
"(values))))"
"(let-values(((post-submodules_80)"
"(let-values(((...r/compile/module.rkt:145:27_215)"
" compile-submodules33.1)"
"((temp83_216) 'module*)"
"((bodys84_217) bodys_64)"
"((with-submodules?85_218)"
" with-submodules?_19)"
"((serializable?86_219)"
" serializable?_21)"
"((to-source?87_220)"
" to-source?_22)"
"((body-cctx88_221)"
" body-cctx_67)"
"((modules-being-compiled89_222)"
" modules-being-compiled_23))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules33.1))"
"(compile-submodules31.1"
" bodys84_217"
" body-cctx88_221"
" modules-being-compiled89_222"
" serializable?86_219"
" to-source?87_220"
" with-submodules?85_218"
" temp83_216)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:145:27_215"
" keyword-procedure-extract"
" '(#:bodys"
" #:cctx"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
" 3)"
" '(#:bodys"
" #:cctx"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
"(list"
" bodys84_217"
" body-cctx88_221"
" modules-being-compiled89_222"
" serializable?86_219"
" to-source?87_220"
" with-submodules?85_218)"
" temp83_216)))))"
"(let-values(((declaration-body_81)"
"(list"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index!"
" mpis_66"
" self_57))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((...r/compile/module.rkt:157:34_223)"
" generate-deserialize8.1)"
"((requires90_224)"
" requires_59)"
"((mpis91_225) mpis_66)"
"((temp92_226) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-deserialize8.1))"
"(generate-deserialize6.1"
" temp92_226"
" #t"
" requires90_224"
" mpis91_225)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:157:34_223"
" keyword-procedure-extract"
" '(#:syntax-support?)"
" 4)"
" '(#:syntax-support?)"
"(list temp92_226)"
" requires90_224"
" mpis91_225))))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((...r/compile/module.rkt:158:34_227)"
" generate-deserialize8.1)"
"((provides93_228)"
" provides_60)"
"((mpis94_229) mpis_66)"
"((temp95_230) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-deserialize8.1))"
"(generate-deserialize6.1"
" temp95_230"
" #t"
" provides93_228"
" mpis94_229)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:158:34_227"
" keyword-procedure-extract"
" '(#:syntax-support?)"
" 4)"
" '(#:syntax-support?)"
"(list temp95_230)"
" provides93_228"
" mpis94_229))))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_76))))"
"(let-values(((declaration-linklet_82)"
"((if to-source?_22"
" values"
"(lambda(s_231)"
"(let-values()"
"(1/compile-linklet"
" s_231"
" 'decl))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
" declaration-body_81))))"
"(let-values(((syntax-literals-linklet_83)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_78))"
"((if to-source?_22"
" values"
"(lambda(s_232)"
"(let-values()"
"(1/compile-linklet"
" s_232"
" 'syntax-literals))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_21"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((...r/compile/module.rkt:201:15_233)"
" generate-lazy-syntax-literals!11.1)"
"((syntax-literals96_234)"
" syntax-literals_78)"
"((mpis97_235)"
" mpis_66)"
"((self98_236)"
" self_57)"
"((temp99_237)"
"(not"
" serializable?_21)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-lazy-syntax-literals!11.1))"
"(generate-lazy-syntax-literals!9.1"
" temp99_237"
" #t"
" syntax-literals96_234"
" mpis97_235"
" self98_236)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:201:15_233"
" keyword-procedure-extract"
" '(#:skip-deserialize?)"
" 5)"
" '(#:skip-deserialize?)"
"(list temp99_237)"
" syntax-literals96_234"
" mpis97_235"
" self98_236)))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_79"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_79)))"
"(if empty-result-for-module->namespace?_65"
"(let-values() ''empty)"
"(let-values()"
" ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_84)"
"(if serializable?_21"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_78))"
"((if to-source?_22"
" values"
"(lambda(s_238)"
"(let-values()"
"(1/compile-linklet"
" s_238"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_78)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_78"
" mpis_66))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_85)"
"(if serializable?_21"
"((if to-source?_22"
" values"
"(lambda(s_239)"
"(let-values()"
"(1/compile-linklet"
" s_239"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_66))))"
" #f)))"
"(let-values(((bundle_86)"
"(let-values(((bundle_240)"
"(hash-set"
" body-linklets_72"
" 'name"
" full-module-name_58)))"
"(let-values(((bundle_241)"
"(hash-set"
" bundle_240"
" 'decl"
" declaration-linklet_82)))"
"(let-values(((bundle_242)"
"(if data-linklet_85"
"(hash-set"
" bundle_241"
" 'data"
" data-linklet_85)"
" bundle_241)))"
"(let-values(((bundle_243)"
"(if syntax-literals-linklet_83"
"(hash-set"
" bundle_242"
" 'stx"
" syntax-literals-linklet_83)"
" bundle_242)))"
"(let-values(((bundle_244)"
"(if syntax-literals-data-linklet_84"
"(hash-set"
" bundle_243"
" 'stx-data"
" syntax-literals-data-linklet_84)"
" bundle_243)))"
"(let-values(((bundle_245)"
"(if(null?"
" pre-submodules_71)"
" bundle_244"
"(hash-set"
" bundle_244"
" 'pre"
"(map2"
" car"
" pre-submodules_71)))))"
"(let-values(((bundle_246)"
"(if(null?"
" post-submodules_80)"
" bundle_245"
"(hash-set"
" bundle_245"
" 'post"
"(map2"
" car"
" post-submodules_80)))))"
"(let-values(((bundle_247)"
"(if cross-phase-persistent?_68"
"(hash-set"
" bundle_246"
" 'cross-phase-persistent?"
" #t)"
" bundle_246)))"
"(let-values(((bundle_248)"
"(if language-info_63"
"(hash-set"
" bundle_247"
" 'language-info"
" language-info_63)"
" bundle_247)))"
"(let-values(((bundle_249)"
"(if(zero?"
" min-phase_73)"
" bundle_248"
"(hash-set"
" bundle_248"
" 'min-phase"
" min-phase_73))))"
"(let-values(((bundle_250)"
"(if(zero?"
" max-phase_74)"
" bundle_249"
"(hash-set"
" bundle_249"
" 'max-phase"
" max-phase_74))))"
"(let-values(((bundle_251)"
"(if(hash-count"
" side-effects_69)"
"(hash-set"
" bundle_250"
" 'side-effects"
"(let-values(((temp100_252)"
"(hash-keys"
" side-effects_69))"
"((<101_253)"
" <))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp100_252"
" <101_253)"
"(sort9.1"
" temp100_252"
" <101_253))))"
" bundle_250)))"
"(let-values(((bundle_254)"
"(if empty-result-for-module->namespace?_65"
"(hash-set"
" bundle_251"
" 'module->namespace"
" 'empty)"
" bundle_251)))"
"(1/hash->linklet-bundle"
" bundle_254))))))))))))))))"
"(let-values(((ld_87)"
"(if(if(null?"
" pre-submodules_71)"
"(if(null?"
" post-submodules_80)"
"(not"
" as-submodule?_20)"
" #f)"
" #f)"
"(let-values() bundle_86)"
"(let-values()"
"((if to-source?_22"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_255)"
"(append"
" pre-submodules_71"
" post-submodules_80)))"
"(begin"
"(if(list? lst_255)"
"(void)"
"(let-values()"
"(in-list"
" lst_255)))"
"((letrec-values(((for-loop_256)"
"(lambda(ht_257"
" lst_258)"
"(if(pair?"
" lst_258)"
"(let-values(((sm_259)"
"(unsafe-car"
" lst_258)))"
"(let-values(((ht_260)"
"(let-values(((ht_261)"
" ht_257))"
"(let-values(((ht_262)"
"(let-values()"
"(hash-set"
" ht_261"
"(car"
" sm_259)"
"((if to-source?_22"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_259))))))"
"(values"
" ht_262)))))"
"(for-loop_256"
" ht_260"
"(unsafe-cdr"
" lst_258))))"
" ht_257))))"
" for-loop_256)"
"(hasheq"
" #f"
" bundle_86)"
" lst_255))))))))"
"(if to-source?_22"
"(let-values() ld_87)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_87"
" phase-to-link-module-uses_75"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_77"
"(mpis-as-vector mpis_66)"
"(syntax-literals-as-vector"
" syntax-literals_78)"
"(map2 cdr pre-submodules_71)"
"(map2 cdr post-submodules_80)"
" #f"
" #f)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_263 given-args_264 s13_265 cctx14_266)"
"(let-values(((as-submodule?9_267)(if(pair? given-kws_263)(eq? '#:as-submodule?(car given-kws_263)) #f)))"
"(let-values(((as-submodule?3_268)(if as-submodule?9_267(car given-args_264)(void)))"
"((given-kws_269)(if as-submodule?9_267(cdr given-kws_263) given-kws_263))"
"((given-args_270)(if as-submodule?9_267(cdr given-args_264) given-args_264)))"
"(let-values(((modules-being-compiled12_271)"
"(if(pair? given-kws_269)(eq? '#:modules-being-compiled(car given-kws_269)) #f)))"
"(let-values(((modules-being-compiled6_272)(if modules-being-compiled12_271(car given-args_270)(void)))"
"((given-kws_273)(if modules-being-compiled12_271(cdr given-kws_269) given-kws_269))"
"((given-args_274)(if modules-being-compiled12_271(cdr given-args_270) given-args_270)))"
"(let-values(((self7_275)(if(pair? given-kws_273)(eq? '#:self(car given-kws_273)) #f)))"
"(let-values(((self1_276)(if self7_275(car given-args_274)(void)))"
"((given-kws_277)(if self7_275(cdr given-kws_273) given-kws_273))"
"((given-args_278)(if self7_275(cdr given-args_274) given-args_274)))"
"(let-values(((serializable?10_279)"
"(if(pair? given-kws_277)(eq? '#:serializable?(car given-kws_277)) #f)))"
"(let-values(((serializable?4_280)(if serializable?10_279(car given-args_278)(void)))"
"((given-kws_281)(if serializable?10_279(cdr given-kws_277) given-kws_277))"
"((given-args_282)(if serializable?10_279(cdr given-args_278) given-args_278)))"
"(let-values(((to-source?11_283)"
"(if(pair? given-kws_281)(eq? '#:to-source?(car given-kws_281)) #f)))"
"(let-values(((to-source?5_284)(if to-source?11_283(car given-args_282)(void)))"
"((given-kws_285)(if to-source?11_283(cdr given-kws_281) given-kws_281))"
"((given-args_286)(if to-source?11_283(cdr given-args_282) given-args_282)))"
"(let-values(((with-submodules?8_287)(pair? given-kws_285)))"
"(let-values(((with-submodules?2_288)(if with-submodules?8_287(car given-args_286)(void))))"
"(compile-module15.1"
" as-submodule?3_268"
" as-submodule?9_267"
" modules-being-compiled6_272"
" modules-being-compiled12_271"
" self1_276"
" self7_275"
" serializable?4_280"
" serializable?10_279"
" to-source?5_284"
" to-source?11_283"
" with-submodules?2_288"
" with-submodules?8_287"
" s13_265"
" cctx14_266)))))))))))))))"
"(define-values"
"(compile-module17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_289 given-argc_290)"
"(if(= given-argc_290 4)"
"(let-values(((l1_291) given-kws_289))"
"(let-values(((l1_292)"
"(if(null? l1_291) l1_291(if(eq?(car l1_291) '#:as-submodule?)(cdr l1_291) l1_291))))"
"(let-values(((l1_293) l1_292))"
"(let-values(((l1_294)"
"(if(null? l1_293)"
" l1_293"
"(if(eq?(car l1_293) '#:modules-being-compiled)(cdr l1_293) l1_293))))"
"(let-values(((l1_295) l1_294))"
"(let-values(((l1_296)(if(null? l1_295) l1_295(if(eq?(car l1_295) '#:self)(cdr l1_295) l1_295))))"
"(let-values(((l1_297) l1_296))"
"(let-values(((l1_298)"
"(if(null? l1_297)"
" l1_297"
"(if(eq?(car l1_297) '#:serializable?)(cdr l1_297) l1_297))))"
"(let-values(((l1_299) l1_298))"
"(let-values(((l1_300)"
"(if(null? l1_299)"
" l1_299"
"(if(eq?(car l1_299) '#:to-source?)(cdr l1_299) l1_299))))"
"(let-values(((l1_301) l1_300))"
"(let-values(((l1_302)"
"(if(null? l1_301)"
" l1_301"
"(if(eq?(car l1_301) '#:with-submodules?)(cdr l1_301) l1_301))))"
"(null? l1_302)))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_303 given-args_304 s_305 cctx_306)(unpack16.1$3 given-kws_303 given-args_304 s_305 cctx_306)))"
" null"
" '(#:as-submodule? #:modules-being-compiled #:self #:serializable? #:to-source? #:with-submodules?)"
"(let-values(((compile-module_307)(case-lambda((s_308 cctx_309)(unpack16.1$3 null null s_308 cctx_309)))))"
" compile-module_307)))"
"(define-values"
"(lifted/1.1$15)"
"(make-required"
" 'compile-submodules"
"(case-lambda((self_310 form-name_311)(apply missing-kw self_310 form-name_311 null)))"
" #f"
" #f))"
"(define-values"
"(compile-submodules31.1)"
"(lambda(bodys18_312"
" cctx22_313"
" modules-being-compiled23_314"
" serializable?20_315"
" to-source?21_316"
" with-submodules?19_317"
" form-name30_318)"
"(let-values(((form-name_319) form-name30_318))"
"(let-values(((bodys_320) bodys18_312))"
"(let-values(((with-submodules?_321) with-submodules?19_317))"
"(let-values(((serializable?_322) serializable?20_315))"
"(let-values(((to-source?_323) to-source?21_316))"
"(let-values(((body-cctx_324) cctx22_313))"
"(let-values(((modules-being-compiled_325) modules-being-compiled23_314))"
"(let-values()"
"(if(not with-submodules?_321)"
"(let-values() null)"
"(let-values()"
"((letrec-values(((loop_326)"
"(lambda(bodys_327 phase_328)"
"(if(null? bodys_327)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_329)(syntax-disarm$1(car bodys_327))))"
"(let-values(((f_330)(core-form-sym body_329 phase_328)))"
"(if(eq? f_330 form-name_319)"
"(let-values()"
"(let-values(((ok?_331 _102_332 name103_333 _104_334)"
"(let-values(((s_364) body_329))"
"(let-values(((orig-s_365) s_364))"
"(let-values(((_102_366 name103_367 _104_368)"
"(let-values(((s_369)"
"(if(syntax?$1"
" s_364)"
"(syntax-e$1"
" s_364)"
" s_364)))"
"(if(pair? s_369)"
"(let-values(((_105_370)"
"(let-values(((s_373)"
"(car"
" s_369)))"
" s_373))"
"((name106_371"
" _107_372)"
"(let-values(((s_374)"
"(cdr"
" s_369)))"
"(let-values(((s_375)"
"(if(syntax?$1"
" s_374)"
"(syntax-e$1"
" s_374)"
" s_374)))"
"(if(pair?"
" s_375)"
"(let-values(((name108_376)"
"(let-values(((s_378)"
"(car"
" s_375)))"
" s_378))"
"((_109_377)"
"(let-values(((s_379)"
"(cdr"
" s_375)))"
" s_379)))"
"(values"
" name108_376"
" _109_377))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_365))))))"
"(values"
" _105_370"
" name106_371"
" _107_372))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_365)))))"
"(values"
" #t"
" _102_366"
" name103_367"
" _104_368))))))"
"(let-values(((ok?_347 module*110_348 name111_349 _112_350)"
"(let-values(((s_380) body_329))"
"(if(let-values(((s_381)"
"(if(syntax?$1 s_380)"
"(syntax-e$1 s_380)"
" s_380)))"
"(if(pair? s_381)"
"(if(let-values(((s_382)"
"(car s_381)))"
" #t)"
"(let-values(((s_383)(cdr s_381)))"
"(let-values(((s_384)"
"(if(syntax?$1"
" s_383)"
"(syntax-e$1 s_383)"
" s_383)))"
"(if(pair? s_384)"
"(if(let-values(((s_385)"
"(car"
" s_384)))"
" #t)"
"(let-values(((s_386)"
"(cdr s_384)))"
"(let-values(((s_387)"
"(if(syntax?$1"
" s_386)"
"(syntax-e$1"
" s_386)"
" s_386)))"
"(if(pair? s_387)"
"(if(let-values(((s_388)"
"(car"
" s_387)))"
"(let-values(((s_389)"
"(if(syntax?$1"
" s_388)"
"(syntax-e$1"
" s_388)"
" s_388)))"
"(eq?"
" #f"
" s_389)))"
"(let-values(((s_390)"
"(cdr"
" s_387)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_391) s_380))"
"(let-values(((module*110_392"
" name111_393"
" _112_394)"
"(let-values(((s_395)"
"(if(syntax?$1"
" s_380)"
"(syntax-e$1"
" s_380)"
" s_380)))"
"(let-values(((module*113_396)"
"(let-values(((s_399)"
"(car"
" s_395)))"
" s_399))"
"((name114_397"
" _115_398)"
"(let-values(((s_400)"
"(cdr"
" s_395)))"
"(let-values(((s_401)"
"(if(syntax?$1"
" s_400)"
"(syntax-e$1"
" s_400)"
" s_400)))"
"(let-values(((name116_402)"
"(let-values(((s_404)"
"(car"
" s_401)))"
" s_404))"
"((_117_403)"
"(let-values(((s_405)"
"(cdr"
" s_401)))"
"(let-values(((s_406)"
"(if(syntax?$1"
" s_405)"
"(syntax-e$1"
" s_405)"
" s_405)))"
"(let-values((()"
"(let-values(((s_408)"
"(car"
" s_406)))"
"(let-values(((s_409)"
"(if(syntax?$1"
" s_408)"
"(syntax-e$1"
" s_408)"
" s_408)))"
"(values))))"
"((_118_407)"
"(let-values(((s_410)"
"(cdr"
" s_406)))"
" s_410)))"
"(values"
" _118_407))))))"
"(values"
" name116_402"
" _117_403))))))"
"(values"
" module*113_396"
" name114_397"
" _115_398)))))"
"(values"
" #t"
" module*110_392"
" name111_393"
" _112_394)))"
"(values #f #f #f #f)))))"
"(let-values(((s-shifted_363)"
"(if ok?_347"
"(let-values()"
"(syntax-shift-phase-level$1"
" body_329"
"(phase- 0 phase_328)))"
"(let-values() body_329))))"
"(cons"
"(cons"
"(syntax-e$1 name103_333)"
"(let-values(((...r/compile/module.rkt:362:22_411)"
" compile-module17.1)"
"((s-shifted119_412) s-shifted_363)"
"((body-cctx120_413) body-cctx_324)"
"((temp121_414) #t)"
"((serializable?122_415) serializable?_322)"
"((to-source?123_416) to-source?_323)"
"((modules-being-compiled124_417)"
" modules-being-compiled_325))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module17.1))"
"(compile-module15.1"
" temp121_414"
" #t"
" modules-being-compiled124_417"
" #t"
" #f"
" #f"
" serializable?122_415"
" #t"
" to-source?123_416"
" #t"
" #f"
" #f"
" s-shifted119_412"
" body-cctx120_413)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:362:22_411"
" keyword-procedure-extract"
" '(#:as-submodule?"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?)"
" 4)"
" '(#:as-submodule?"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?)"
"(list"
" temp121_414"
" modules-being-compiled124_417"
" serializable?122_415"
" to-source?123_416)"
" s-shifted119_412"
" body-cctx120_413))))"
"(loop_326(cdr bodys_327) phase_328))))))"
"(if(eq? f_330 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_418 begin-for-syntax125_419 e126_420)"
"(let-values(((s_431) body_329))"
"(let-values(((orig-s_432) s_431))"
"(let-values(((begin-for-syntax125_433"
" e126_434)"
"(let-values(((s_435)"
"(if(syntax?$1"
" s_431)"
"(syntax-e$1"
" s_431)"
" s_431)))"
"(if(pair? s_435)"
"(let-values(((begin-for-syntax127_436)"
"(let-values(((s_438)"
"(car"
" s_435)))"
" s_438))"
"((e128_437)"
"(let-values(((s_439)"
"(cdr"
" s_435)))"
"(let-values(((s_440)"
"(if(syntax?$1"
" s_439)"
"(syntax-e$1"
" s_439)"
" s_439)))"
"(let-values(((flat-s_441)"
"(to-syntax-list.1"
" s_440)))"
"(if(not"
" flat-s_441)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_432))"
"(let-values()"
" flat-s_441)))))))"
"(values"
" begin-for-syntax127_436"
" e128_437))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_432)))))"
"(values"
" #t"
" begin-for-syntax125_433"
" e126_434))))))"
"(append"
"(loop_326 e126_420(add1 phase_328))"
"(loop_326(cdr bodys_327) phase_328))))"
"(let-values()(loop_326(cdr bodys_327) phase_328)))))))))))"
" loop_326)"
" bodys_320"
" 0)))))))))))))"
"(define-values"
"(unpack32.1)"
"(lambda(given-kws_442 given-args_443 form-name30_444)"
"(let-values(((bodys18_445)(car given-args_443))"
"((given-kws_446)(cdr given-kws_442))"
"((given-args_447)(cdr given-args_443)))"
"(let-values(((cctx22_448)(car given-args_447))"
"((given-kws_449)(cdr given-kws_446))"
"((given-args_450)(cdr given-args_447)))"
"(let-values(((modules-being-compiled23_451)(car given-args_450))"
"((given-kws_452)(cdr given-kws_449))"
"((given-args_453)(cdr given-args_450)))"
"(let-values(((serializable?20_454)(car given-args_453))"
"((given-kws_455)(cdr given-kws_452))"
"((given-args_456)(cdr given-args_453)))"
"(let-values(((to-source?21_457)(car given-args_456))"
"((given-kws_458)(cdr given-kws_455))"
"((given-args_459)(cdr given-args_456)))"
"(let-values(((with-submodules?19_460)(car given-args_459)))"
"(compile-submodules31.1"
" bodys18_445"
" cctx22_448"
" modules-being-compiled23_451"
" serializable?20_454"
" to-source?21_457"
" with-submodules?19_460"
" form-name30_444)))))))))"
"(define-values"
"(compile-submodules33.1)"
"(lifted/1.1$15"
"(lambda(given-kws_461 given-argc_462)"
"(if(= given-argc_462 3)"
"(let-values(((l2_463) given-kws_461))"
"(if(pair? l2_463)"
"(if(eq?(car l2_463) '#:bodys)"
"(let-values(((l2_464)(cdr l2_463)))"
"(if(pair? l2_464)"
"(if(eq?(car l2_464) '#:cctx)"
"(let-values(((l2_465)(cdr l2_464)))"
"(if(pair? l2_465)"
"(if(eq?(car l2_465) '#:modules-being-compiled)"
"(let-values(((l2_466)(cdr l2_465)))"
"(if(pair? l2_466)"
"(if(eq?(car l2_466) '#:serializable?)"
"(let-values(((l2_467)(cdr l2_466)))"
"(if(pair? l2_467)"
"(if(eq?(car l2_467) '#:to-source?)"
"(let-values(((l2_468)(cdr l2_467)))"
"(if(pair? l2_468)"
"(if(eq?(car l2_468) '#:with-submodules?)(null?(cdr l2_468)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_469 given-args_470 form-name_471)(unpack32.1 given-kws_469 given-args_470 form-name_471)))"
" '(#:bodys #:cctx #:modules-being-compiled #:serializable? #:to-source? #:with-submodules?)"
" '(#:bodys #:cctx #:modules-being-compiled #:serializable? #:to-source? #:with-submodules?)))"
"(define-values"
"(filter-language-info)"
"(lambda(li_472)"
"(if(vector? li_472)"
"(if(= 3(vector-length li_472))"
"(if(1/module-path?(vector-ref li_472 0))(if(symbol?(vector-ref li_472 1)) li_472 #f) #f)"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_1 declared-submodule-names2_2 mod-path3_3 self4_4)"
"(let-values(((mod-path_5) mod-path3_3))"
"(let-values(((self_6) self4_4))"
"(let-values(((declared-submodule-names_7)"
"(if declared-submodule-names2_2 declared-submodule-names1_1 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))(hash-ref declared-submodule-names_7(cadr mod-path_5) #f) #f)"
" #f)"
" #f)"
" #f)"
"              (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_5)) self_6))"
"(if(if(list? mod-path_5)"
"(if(eq? 'submod(car mod-path_5))"
"(let-values(((mod-path_8)(cadr mod-path_5)))"
"(if(list? mod-path_8)"
"(if(= 2(length mod-path_8))"
"(if(eq? 'quote(car mod-path_8))"
"(if(symbol?(cadr mod-path_8))"
"(hash-ref declared-submodule-names_7(cadr mod-path_8) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                  (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_5)) (cddr mod-path_5)) self_6))"
"(let-values()(1/module-path-index-join mod-path_5 self_6))))))))))"
"(define-values"
"(unpack6.1$1)"
"(lambda(given-kws_9 given-args_10 mod-path3_11 self4_12)"
"(let-values(((declared-submodule-names2_13)(pair? given-kws_9)))"
"(let-values(((declared-submodule-names1_14)(if declared-submodule-names2_13(car given-args_10)(void))))"
"(module-path->mpi5.1 declared-submodule-names1_14 declared-submodule-names2_13 mod-path3_11 self4_12)))))"
"(define-values"
"(module-path->mpi7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_15 given-argc_16)"
"(if(= given-argc_16 4)"
"(let-values(((l1_17) given-kws_15))"
"(let-values(((l1_18)"
"(if(null? l1_17) l1_17(if(eq?(car l1_17) '#:declared-submodule-names)(cdr l1_17) l1_17))))"
"(null? l1_18)))"
" #f))"
"(case-lambda"
"((given-kws_19 given-args_20 mod-path_21 self_22)(unpack6.1$1 given-kws_19 given-args_20 mod-path_21 self_22)))"
" null"
" '(#:declared-submodule-names)"
"(let-values(((module-path->mpi_23)"
"(case-lambda((mod-path_24 self_25)(unpack6.1$1 null null mod-path_24 self_25)))))"
" module-path->mpi_23)))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_26 ctx_27)"
"(let-values(((...pand/module-path.rkt:31:2_28) module-path->mpi7.1)"
"((mod-path8_29) mod-path_26)"
"((temp9_30)(namespace-mpi(expand-context-namespace ctx_27)))"
"((temp10_31)(expand-context-declared-submodule-names ctx_27)))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi7.1))"
"(module-path->mpi5.1 temp10_31 #t mod-path8_29 temp9_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pand/module-path.rkt:31:2_28"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 4)"
" '(#:declared-submodule-names)"
"(list temp10_31)"
" mod-path8_29"
" temp9_30)))))"
"(void)"
"(void)"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_1 phase_2)"
"(let-values(((s-scs_3)(syntax-scope-set s_1 phase_2)))"
"(let-values(((ht_4) s-scs_3))"
"(begin"
"(if((lambda(ht_5)(if(hash? ht_5)(immutable? ht_5) #f)) ht_4)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_4)))"
"((letrec-values(((for-loop_6)"
"(lambda(syms_7 i_8)"
"(if i_8"
"(let-values(((sc_9)(unsafe-immutable-hash-iterate-key ht_4 i_8)))"
"(let-values(((syms_10)"
"(let-values(((syms_11) syms_7))"
"(let-values(((syms_12)"
"(let-values()"
"(set-union"
" syms_11"
"(binding-table-symbols"
"(scope-binding-table sc_9)"
" s-scs_3"
" s_1"
" null)))))"
"(values syms_12)))))"
"(for-loop_6 syms_10(unsafe-immutable-hash-iterate-next ht_4 i_8))))"
" syms_7))))"
" for-loop_6)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_4)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_8"
" make-_9"
" ?_10"
"(make-struct-field-accessor -ref_11 0 'self)"
"(make-struct-field-accessor -ref_11 1 'require-mpis)"
"(make-struct-field-accessor -ref_11 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_11 3 'requires)"
"(make-struct-field-accessor -ref_11 4 'provides)"
"(make-struct-field-accessor -ref_11 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_11 6 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_11 7 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_12 6 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_12 7 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_63 make-_64 ?_65 -ref_66 -set!_67)"
"(let-values()"
"(let-values()"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))))"
"(values"
" struct:_63"
" make-_64"
" ?_65"
"(make-struct-field-accessor -ref_66 0 'id)"
"(make-struct-field-accessor -ref_66 1 'phase)"
"(make-struct-field-accessor -ref_66 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_66 3 'as-transformer?))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_133 make-_134 ?_135 -ref_136 -set!_137)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_133"
" make-_134"
" ?_135"
"(make-struct-field-accessor -ref_136 0 'provides)"
"(make-struct-field-accessor -ref_136 1 'prefix-len)"
"(make-struct-field-accessor -ref_136 2 's)"
"(make-struct-field-accessor -ref_136 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_136 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_173)"
"(requires+provides1.1"
" self_173"
"(make-module-path-index-intern-table)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_174)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_174))"
"(hash-clear!(requires+provides-requires r+p_174))"
"(hash-clear!(requires+provides-provides r+p_174))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_174)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_175 mpi_176)(intern-module-path-index!(requires+provides-require-mpis r+p_175) mpi_176)))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_177 mod-name_178 phase-shift_179 is-cross-phase-persistent?_180)"
"(let-values(((mpi_181)(intern-mpi r+p_177 mod-name_178)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_177) mpi_181 '#hasheqv()) phase-shift_179 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_177)"
" phase-shift_179"
"(lambda(l_182)(cons mpi_181 l_182))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_177) mpi_181 make-hasheqv)"
" phase-shift_179"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_180"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_177 #f)))"
" mpi_181))))"
"(define-values"
"(lifted/1.1$14)"
"(make-required"
" 'add-defined-or-required-id!"
"(case-lambda"
"((self_183 r+p_184 id_185 phase_186 binding_187)"
"(apply missing-kw self_183 r+p_184 id_185 phase_186 binding_187 null)))"
" #f"
" #f))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lambda(as-transformer?6_188 can-be-shadowed?5_189 can-be-shadowed?7_190 r+p9_191 id10_192 phase11_193 binding12_194)"
"(let-values(((r+p_195) r+p9_191))"
"(let-values(((id_196) id10_192))"
"(let-values(((phase_197) phase11_193))"
"(let-values(((binding_198) binding12_194))"
"(let-values(((can-be-shadowed?_199)(if can-be-shadowed?7_190 can-be-shadowed?5_189 #f)))"
"(let-values(((as-transformer?_200) as-transformer?6_188))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_197"
"(phase+"
"(module-binding-nominal-phase binding_198)"
"(module-binding-nominal-require-phase binding_198)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:118:2_201) add-defined-or-required-id-at-nominal!29.1)"
"((r+p108_202) r+p_195)"
"((id109_203) id_196)"
"((phase110_204) phase_197)"
"((temp111_205)(module-binding-nominal-module binding_198))"
"((temp112_206)(module-binding-nominal-require-phase binding_198))"
"((can-be-shadowed?113_207) can-be-shadowed?_199)"
"((as-transformer?114_208) as-transformer?_200))"
"(if(variable-reference-constant?"
"(#%variable-reference add-defined-or-required-id-at-nominal!29.1))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?114_208"
" can-be-shadowed?113_207"
" temp111_205"
" temp112_206"
" r+p108_202"
" id109_203"
" phase110_204)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:118:2_201"
" keyword-procedure-extract"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" 5)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
"(list as-transformer?114_208 can-be-shadowed?113_207 temp111_205 temp112_206)"
" r+p108_202"
" id109_203"
" phase110_204)))))))))))))"
"(define-values"
"(unpack14.1)"
"(lambda(given-kws_209 given-args_210 r+p9_211 id10_212 phase11_213 binding12_214)"
"(let-values(((as-transformer?6_215)(car given-args_210))"
"((given-kws_216)(cdr given-kws_209))"
"((given-args_217)(cdr given-args_210)))"
"(let-values(((can-be-shadowed?7_218)(pair? given-kws_216)))"
"(let-values(((can-be-shadowed?5_219)(if can-be-shadowed?7_218(car given-args_217)(void))))"
"(add-defined-or-required-id!13.1"
" as-transformer?6_215"
" can-be-shadowed?5_219"
" can-be-shadowed?7_218"
" r+p9_211"
" id10_212"
" phase11_213"
" binding12_214))))))"
"(define-values"
"(add-defined-or-required-id!15.1)"
"(lifted/1.1$14"
"(lambda(given-kws_220 given-argc_221)"
"(if(= given-argc_221 6)(subsets? '(#:as-transformer?) given-kws_220 '(#:as-transformer? #:can-be-shadowed?)) #f))"
"(case-lambda"
"((given-kws_222 given-args_223 r+p_224 id_225 phase_226 binding_227)"
"(unpack14.1 given-kws_222 given-args_223 r+p_224 id_225 phase_226 binding_227)))"
" '(#:as-transformer?)"
" '(#:as-transformer? #:can-be-shadowed?)))"
"(define-values"
"(lifted/2.1$7)"
"(make-required"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_228 r+p_229 id_230 phase_231)(apply missing-kw self_228 r+p_229 id_230 phase_231 null)))"
" #f"
" #f))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lambda(as-transformer?19_232"
" can-be-shadowed?18_233"
" nominal-module16_234"
" nominal-require-phase17_235"
" r+p24_236"
" id25_237"
" phase26_238)"
"(let-values(((r+p_239) r+p24_236))"
"(let-values(((id_240) id25_237))"
"(let-values(((phase_241) phase26_238))"
"(let-values(((nominal-module_242) nominal-module16_234))"
"(let-values(((nominal-require-phase_243) nominal-require-phase17_235))"
"(let-values(((can-be-shadowed?_244) can-be-shadowed?18_233))"
"(let-values(((as-transformer?_245) as-transformer?19_232))"
"(let-values()"
"(let-values(((at-mod_246)"
"(hash-ref!"
"(requires+provides-requires r+p_239)"
"(intern-mpi r+p_239 nominal-module_242)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_247)(hash-ref! at-mod_246 nominal-require-phase_243 make-hasheq)))"
"(let-values(((sym_248)(syntax-e$1 id_240)))"
"(hash-set!"
" sym-to-reqds_247"
" sym_248"
"(cons"
"(required2.1 id_240 phase_241 can-be-shadowed?_244 as-transformer?_245)"
"(hash-ref sym-to-reqds_247 sym_248 null))))))))))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_249 given-args_250 r+p24_251 id25_252 phase26_253)"
"(let-values(((as-transformer?19_254)(car given-args_250))"
"((given-kws_255)(cdr given-kws_249))"
"((given-args_256)(cdr given-args_250)))"
"(let-values(((can-be-shadowed?18_257)(car given-args_256))"
"((given-kws_258)(cdr given-kws_255))"
"((given-args_259)(cdr given-args_256)))"
"(let-values(((nominal-module16_260)(car given-args_259))"
"((given-kws_261)(cdr given-kws_258))"
"((given-args_262)(cdr given-args_259)))"
"(let-values(((nominal-require-phase17_263)(car given-args_262)))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?19_254"
" can-be-shadowed?18_257"
" nominal-module16_260"
" nominal-require-phase17_263"
" r+p24_251"
" id25_252"
" phase26_253)))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!29.1)"
"(lifted/2.1$7"
"(lambda(given-kws_264 given-argc_265)"
"(if(= given-argc_265 5)"
"(let-values(((l2_266) given-kws_264))"
"(if(pair? l2_266)"
"(if(eq?(car l2_266) '#:as-transformer?)"
"(let-values(((l2_267)(cdr l2_266)))"
"(if(pair? l2_267)"
"(if(eq?(car l2_267) '#:can-be-shadowed?)"
"(let-values(((l2_268)(cdr l2_267)))"
"(if(pair? l2_268)"
"(if(eq?(car l2_268) '#:nominal-module)"
"(let-values(((l2_269)(cdr l2_268)))"
"(if(pair? l2_269)"
"(if(eq?(car l2_269) '#:nominal-require-phase)(null?(cdr l2_269)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_270 given-args_271 r+p_272 id_273 phase_274)"
"(unpack28.1 given-kws_270 given-args_271 r+p_272 id_273 phase_274)))"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(lifted/3.1$4)"
"(make-required"
" 'add-bulk-required-ids!"
"(case-lambda"
"((self_275 r+p_276 s_277 self_278 nominal-module_279 phase-shift_280 provides_281 provide-phase-level_282)"
"(apply"
" missing-kw"
" self_275"
" r+p_276"
" s_277"
" self_278"
" nominal-module_279"
" phase-shift_280"
" provides_281"
" provide-phase-level_282"
" null)))"
" #f"
" #f))"
"(define-values"
"(add-bulk-required-ids!53.1)"
"(lambda(accum-update-nominals36_283"
" can-be-shadowed?34_284"
" check-and-remove?35_285"
" excepts31_286"
" in33_287"
" prefix30_288"
" symbols-accum32_289"
" who37_290"
" r+p46_291"
" s47_292"
" self48_293"
" nominal-module49_294"
" phase-shift50_295"
" provides51_296"
" provide-phase-level52_297)"
"(let-values(((r+p_298) r+p46_291))"
"(let-values(((s_299) s47_292))"
"(let-values(((self_300) self48_293))"
"(let-values(((nominal-module_301) nominal-module49_294))"
"(let-values(((phase-shift_302) phase-shift50_295))"
"(let-values(((provides_303) provides51_296))"
"(let-values(((provide-phase-level_304) provide-phase-level52_297))"
"(let-values(((bulk-prefix_305) prefix30_288))"
"(let-values(((bulk-excepts_306) excepts31_286))"
"(let-values(((symbols-accum_307) symbols-accum32_289))"
"(let-values(((orig-s_308) in33_287))"
"(let-values(((can-be-shadowed?_309) can-be-shadowed?34_284))"
"(let-values(((check-and-remove?_310) check-and-remove?35_285))"
"(let-values(((accum-update-nominals_311) accum-update-nominals36_283))"
"(let-values(((who_312) who37_290))"
"(let-values()"
"(let-values(((phase_313)(phase+ provide-phase-level_304 phase-shift_302)))"
"(let-values(((shortcut-table_314)"
"(if check-and-remove?_310"
"(if(>(hash-count provides_303) 64)"
"(syntax-mapped-names s_299 phase_313)"
" #f)"
" #f)))"
"(let-values(((mpi_315)(intern-mpi r+p_298 nominal-module_301)))"
"(let-values(((at-mod_316)"
"(hash-ref!"
"(requires+provides-requires r+p_298)"
" mpi_315"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_317)"
"(hash-ref! at-mod_316 phase-shift_302 make-hasheq)))"
"(let-values(((prefix-len_318)"
"(if bulk-prefix_305"
"(string-length(symbol->string bulk-prefix_305))"
" 0)))"
"(let-values(((br_319)"
"(bulk-required4.1"
" provides_303"
" prefix-len_318"
" s_299"
" provide-phase-level_304"
" can-be-shadowed?_309)))"
"(let-values(((ht_320) provides_303))"
"(begin"
"(if((lambda(ht_321)(hash? ht_321)) ht_320)"
"(void)"
"(let-values()(default-in-hash ht_320)))"
"((letrec-values(((for-loop_322)"
"(lambda(fold-var_323 i_324)"
"(if i_324"
"(let-values(((out-sym_325 binding/p_326)"
"(hash-iterate-key+value"
" ht_320"
" i_324)))"
"(let-values(((fold-var_327)"
"(let-values(((fold-var_328)"
" fold-var_323))"
"(let-values(((fold-var_329)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if symbols-accum_307"
"(let-values()"
"(hash-set!"
" symbols-accum_307"
" out-sym_325"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_306"
" out-sym_325"
" #f)"
"(void)"
"(let-values()"
"(let-values(((sym_330)"
"(if(not"
" bulk-prefix_305)"
"(let-values()"
" out-sym_325)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                            \"~a~a\""
" bulk-prefix_305"
" out-sym_325))))))"
"(begin"
"(if(if check-and-remove?_310"
"(let-values(((or-part_331)"
"(not"
" shortcut-table_314)))"
"(if or-part_331"
" or-part_331"
"(hash-ref"
" shortcut-table_314"
" sym_330"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((.../require+provide.rkt:170:8_332)"
" check-not-defined89.1)"
"((temp115_333)"
" #t)"
"((r+p116_334)"
" r+p_298)"
"((temp117_335)"
"(datum->syntax$1"
" s_299"
" sym_330"
" s_299))"
"((phase118_336)"
" phase_313)"
"((orig-s119_337)"
" orig-s_308)"
"((temp120_338)"
"(lambda()"
"(let-values(((.../require+provide.rkt:174:29_342)"
" provide-binding-to-require-binding13.1)"
"((binding/p124_343)"
" binding/p_326)"
"((sym125_344)"
" sym_330)"
"((self126_345)"
" self_300)"
"((mpi127_346)"
" mpi_315)"
"((provide-phase-level128_347)"
" provide-phase-level_304)"
"((phase-shift129_348)"
" phase-shift_302))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" mpi127_346"
" phase-shift129_348"
" provide-phase-level128_347"
" self126_345"
" binding/p124_343"
" sym125_344)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:174:29_342"
" keyword-procedure-extract"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
" 4)"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
"(list"
" mpi127_346"
" phase-shift129_348"
" provide-phase-level128_347"
" self126_345)"
" binding/p124_343"
" sym125_344)))))"
"((temp121_339)"
" #t)"
"((accum-update-nominals122_340)"
" accum-update-nominals_311)"
"((who123_341)"
" who_312))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined89.1))"
"(check-not-defined87.1"
" accum-update-nominals122_340"
" #t"
" temp115_333"
" #t"
" orig-s119_337"
" temp121_339"
" #t"
" temp120_338"
" #t"
" who123_341"
" r+p116_334"
" temp117_335"
" phase118_336)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:170:8_332"
" keyword-procedure-extract"
" '(#:accum-update-nominals"
" #:check-not-required?"
" #:in"
" #:remove-shadowed!?"
" #:unless-matches"
" #:who)"
" 5)"
" '(#:accum-update-nominals"
" #:check-not-required?"
" #:in"
" #:remove-shadowed!?"
" #:unless-matches"
" #:who)"
"(list"
" accum-update-nominals122_340"
" temp115_333"
" orig-s119_337"
" temp121_339"
" temp120_338"
" who123_341)"
" r+p116_334"
" temp117_335"
" phase118_336))))"
"(void))"
"(hash-set!"
" sym-to-reqds_317"
" sym_330"
"(cons"
" br_319"
"(hash-ref"
" sym-to-reqds_317"
" sym_330"
" null)))))))))"
"(void)))))"
"(values"
" fold-var_329)))))"
"(for-loop_322"
" fold-var_327"
"(hash-iterate-next ht_320 i_324))))"
" fold-var_323))))"
" for-loop_322)"
"(void)"
"(hash-iterate-first ht_320)))))))))))))))))))))))))))))"
"(define-values"
"(unpack54.1)"
"(lambda(given-kws_349"
" given-args_350"
" r+p46_351"
" s47_352"
" self48_353"
" nominal-module49_354"
" phase-shift50_355"
" provides51_356"
" provide-phase-level52_357)"
"(let-values(((accum-update-nominals36_358)(car given-args_350))"
"((given-kws_359)(cdr given-kws_349))"
"((given-args_360)(cdr given-args_350)))"
"(let-values(((can-be-shadowed?34_361)(car given-args_360))"
"((given-kws_362)(cdr given-kws_359))"
"((given-args_363)(cdr given-args_360)))"
"(let-values(((check-and-remove?35_364)(car given-args_363))"
"((given-kws_365)(cdr given-kws_362))"
"((given-args_366)(cdr given-args_363)))"
"(let-values(((excepts31_367)(car given-args_366))"
"((given-kws_368)(cdr given-kws_365))"
"((given-args_369)(cdr given-args_366)))"
"(let-values(((in33_370)(car given-args_369))"
"((given-kws_371)(cdr given-kws_368))"
"((given-args_372)(cdr given-args_369)))"
"(let-values(((prefix30_373)(car given-args_372))"
"((given-kws_374)(cdr given-kws_371))"
"((given-args_375)(cdr given-args_372)))"
"(let-values(((symbols-accum32_376)(car given-args_375))"
"((given-kws_377)(cdr given-kws_374))"
"((given-args_378)(cdr given-args_375)))"
"(let-values(((who37_379)(car given-args_378)))"
"(add-bulk-required-ids!53.1"
" accum-update-nominals36_358"
" can-be-shadowed?34_361"
" check-and-remove?35_364"
" excepts31_367"
" in33_370"
" prefix30_373"
" symbols-accum32_376"
" who37_379"
" r+p46_351"
" s47_352"
" self48_353"
" nominal-module49_354"
" phase-shift50_355"
" provides51_356"
" provide-phase-level52_357)))))))))))"
"(define-values"
"(add-bulk-required-ids!55.1)"
"(lifted/3.1$4"
"(lambda(given-kws_380 given-argc_381)"
"(if(= given-argc_381 9)"
"(let-values(((l2_382) given-kws_380))"
"(if(pair? l2_382)"
"(if(eq?(car l2_382) '#:accum-update-nominals)"
"(let-values(((l2_383)(cdr l2_382)))"
"(if(pair? l2_383)"
"(if(eq?(car l2_383) '#:can-be-shadowed?)"
"(let-values(((l2_384)(cdr l2_383)))"
"(if(pair? l2_384)"
"(if(eq?(car l2_384) '#:check-and-remove?)"
"(let-values(((l2_385)(cdr l2_384)))"
"(if(pair? l2_385)"
"(if(eq?(car l2_385) '#:excepts)"
"(let-values(((l2_386)(cdr l2_385)))"
"(if(pair? l2_386)"
"(if(eq?(car l2_386) '#:in)"
"(let-values(((l2_387)(cdr l2_386)))"
"(if(pair? l2_387)"
"(if(eq?(car l2_387) '#:prefix)"
"(let-values(((l2_388)(cdr l2_387)))"
"(if(pair? l2_388)"
"(if(eq?(car l2_388) '#:symbols-accum)"
"(let-values(((l2_389)(cdr l2_388)))"
"(if(pair? l2_389)"
"(if(eq?(car l2_389) '#:who)(null?(cdr l2_389)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_390"
" given-args_391"
" r+p_392"
" s_393"
" self_394"
" nominal-module_395"
" phase-shift_396"
" provides_397"
" provide-phase-level_398)"
"(unpack54.1"
" given-kws_390"
" given-args_391"
" r+p_392"
" s_393"
" self_394"
" nominal-module_395"
" phase-shift_396"
" provides_397"
" provide-phase-level_398)))"
" '(#:accum-update-nominals #:can-be-shadowed? #:check-and-remove? #:excepts #:in #:prefix #:symbols-accum #:who)"
" '(#:accum-update-nominals #:can-be-shadowed? #:check-and-remove? #:excepts #:in #:prefix #:symbols-accum #:who)))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_399 nominal-module_400 phase_401 sym_402)"
"(let-values(((prefix-len_403)(bulk-required-prefix-len br_399)))"
"(let-values(((out-sym_404)"
"(if(zero? prefix-len_403)"
" sym_402"
"(string->symbol(substring(symbol->string sym_402) prefix-len_403)))))"
"(let-values(((binding/p_405)(hash-ref(bulk-required-provides br_399) out-sym_404)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_399) sym_402)"
"(phase+ phase_401(bulk-required-provide-phase-level br_399))"
"(bulk-required-can-be-shadowed? br_399)"
"(provided-as-transformer? binding/p_405)))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_406 mod-name_407 phase_408 sym_409)"
"(if(bulk-required? r_406)(bulk-required->required r_406 mod-name_407 phase_408 sym_409) r_406)))"
"(define-values"
"(lifted/4.1$3)"
"(make-required"
" 'add-enclosing-module-defined-and-required!"
"(case-lambda"
"((self_410 r+p_411 enclosing-mod_412 phase-shift_413)"
"(apply missing-kw self_410 r+p_411 enclosing-mod_412 phase-shift_413 null)))"
" #f"
" #f))"
"(define-values"
"(add-enclosing-module-defined-and-required!61.1)"
"(lambda(enclosing-requires+provides56_414 r+p58_415 enclosing-mod59_416 phase-shift60_417)"
"(let-values(((r+p_418) r+p58_415))"
"(let-values(((enclosing-r+p_419) enclosing-requires+provides56_414))"
"(let-values(((enclosing-mod_420) enclosing-mod59_416))"
"(let-values(((phase-shift_421) phase-shift60_417))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_418 #f)"
"(let-values(((ht_422)(requires+provides-requires enclosing-r+p_419)))"
"(begin"
"(if((lambda(ht_423)(hash? ht_423)) ht_422)(void)(let-values()(default-in-hash ht_422)))"
"((letrec-values(((for-loop_424)"
"(lambda(fold-var_425 i_426)"
"(if i_426"
"(let-values(((mod-name_427 at-mod_428)"
"(hash-iterate-key+value ht_422 i_426)))"
"(let-values(((fold-var_429)"
"(let-values(((fold-var_430) fold-var_425))"
"(let-values(((fold-var_431)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ht_432) at-mod_428))"
"(begin"
"(if((lambda(ht_433)"
"(hash? ht_433))"
" ht_432)"
"(void)"
"(let-values()"
"(default-in-hash ht_432)))"
"((letrec-values(((for-loop_434)"
"(lambda(fold-var_435"
" i_436)"
"(if i_436"
"(let-values(((phase_437"
" at-phase_438)"
"(hash-iterate-key+value"
" ht_432"
" i_436)))"
"(let-values(((fold-var_439)"
"(let-values(((ht_440)"
" at-phase_438))"
"(begin"
"(if((lambda(ht_441)"
"(hash?"
" ht_441))"
" ht_440)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_440)))"
"((letrec-values(((for-loop_442)"
"(lambda(fold-var_443"
" i_444)"
"(if i_444"
"(let-values(((sym_445"
" reqds_446)"
"(hash-iterate-key+value"
" ht_440"
" i_444)))"
"(let-values(((fold-var_447)"
"(let-values(((lst_448)"
" reqds_446))"
"(begin"
"(if(list?"
" lst_448)"
"(void)"
"(let-values()"
"(in-list"
" lst_448)))"
"((letrec-values(((for-loop_449)"
"(lambda(fold-var_450"
" lst_451)"
"(if(pair?"
" lst_451)"
"(let-values(((reqd/maybe-bulk_452)"
"(unsafe-car"
" lst_451)))"
"(let-values(((fold-var_453)"
"(let-values(((fold-var_454)"
" fold-var_450))"
"(let-values(((fold-var_455)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_456)"
"(normalize-required"
" reqd/maybe-bulk_452"
" mod-name_427"
" phase_437"
" sym_445)))"
"(let-values(((.../require+provide.rkt:214:6_457)"
" add-defined-or-required-id-at-nominal!29.1)"
"((r+p130_458)"
" r+p_418)"
"((temp131_459)"
"(syntax-shift-phase-level$1"
"(syntax-module-path-index-shift"
"(required-id"
" reqd_456)"
"(requires+provides-self"
" enclosing-r+p_419)"
" enclosing-mod_420)"
" phase-shift_421))"
"((temp132_460)"
"(phase+"
"(required-phase"
" reqd_456)"
" phase-shift_421))"
"((enclosing-mod133_461)"
" enclosing-mod_420)"
"((phase-shift134_462)"
" phase-shift_421)"
"((temp135_463)"
" #t)"
"((temp136_464)"
"(required-as-transformer?"
" reqd_456)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id-at-nominal!29.1))"
"(add-defined-or-required-id-at-nominal!27.1"
" temp136_464"
" temp135_463"
" enclosing-mod133_461"
" phase-shift134_462"
" r+p130_458"
" temp131_459"
" temp132_460)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:214:6_457"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
" 5)"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
"(list"
" temp136_464"
" temp135_463"
" enclosing-mod133_461"
" phase-shift134_462)"
" r+p130_458"
" temp131_459"
" temp132_460)))))"
"(void)))))"
"(values"
" fold-var_455)))))"
"(for-loop_449"
" fold-var_453"
"(unsafe-cdr"
" lst_451))))"
" fold-var_450))))"
" for-loop_449)"
" fold-var_443"
" lst_448)))))"
"(for-loop_442"
" fold-var_447"
"(hash-iterate-next"
" ht_440"
" i_444))))"
" fold-var_443))))"
" for-loop_442)"
" fold-var_435"
"(hash-iterate-first"
" ht_440))))))"
"(for-loop_434"
" fold-var_439"
"(hash-iterate-next"
" ht_432"
" i_436))))"
" fold-var_435))))"
" for-loop_434)"
"(void)"
"(hash-iterate-first ht_432)))))"
"(void)))))"
"(values fold-var_431)))))"
"(for-loop_424 fold-var_429(hash-iterate-next ht_422 i_426))))"
" fold-var_425))))"
" for-loop_424)"
"(void)"
"(hash-iterate-first ht_422))))))))))))"
"(define-values"
"(unpack62.1)"
"(lambda(given-kws_465 given-args_466 r+p58_467 enclosing-mod59_468 phase-shift60_469)"
"(let-values(((enclosing-requires+provides56_470)(car given-args_466)))"
"(add-enclosing-module-defined-and-required!61.1"
" enclosing-requires+provides56_470"
" r+p58_467"
" enclosing-mod59_468"
" phase-shift60_469))))"
"(define-values"
"(add-enclosing-module-defined-and-required!63.1)"
"(lifted/4.1$3"
"(lambda(given-kws_471 given-argc_472)"
"(if(= given-argc_472 5)"
"(let-values(((l2_473) given-kws_471))"
"(if(pair? l2_473)(if(eq?(car l2_473) '#:enclosing-requires+provides)(null?(cdr l2_473)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_474 given-args_475 r+p_476 enclosing-mod_477 phase-shift_478)"
"(unpack62.1 given-kws_474 given-args_475 r+p_476 enclosing-mod_477 phase-shift_478)))"
" '(#:enclosing-requires+provides)"
" '(#:enclosing-requires+provides)))"
"(define-values"
"(lifted/5.1$1)"
"(make-required"
" 'remove-required-id!"
"(case-lambda((self_479 r+p_480 id_481 phase_482)(apply missing-kw self_479 r+p_480 id_481 phase_482 null)))"
" #f"
" #f))"
"(define-values"
"(remove-required-id!69.1)"
"(lambda(unless-matches64_483 r+p66_484 id67_485 phase68_486)"
"(let-values(((r+p_487) r+p66_484))"
"(let-values(((id_488) id67_485))"
"(let-values(((phase_489) phase68_486))"
"(let-values(((binding_490) unless-matches64_483))"
"(let-values()"
"(let-values(((b_491)"
"(let-values(((.../require+provide.rkt:231:12_492) resolve+shift22.1)"
"((id137_493) id_488)"
"((phase138_494) phase_489)"
"((temp139_495) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f temp139_495 #t #f #f #f #f #f #f id137_493 phase138_494)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:231:12_492"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp139_495)"
" id137_493"
" phase138_494)))))"
"(if b_491"
"(let-values()"
"(let-values(((mpi_496)(intern-mpi r+p_487(module-binding-nominal-module b_491))))"
"(let-values(((at-mod_497)(hash-ref(requires+provides-requires r+p_487) mpi_496 #f)))"
"(if at-mod_497"
"(let-values()"
"(let-values(((nominal-phase_498)(module-binding-nominal-require-phase b_491)))"
"(let-values(((sym-to-reqds_499)(hash-ref at-mod_497 nominal-phase_498 #f)))"
"(if sym-to-reqds_499"
"(let-values()"
"(let-values(((sym_500)(syntax-e$1 id_488)))"
"(let-values(((l_501)(hash-ref sym-to-reqds_499 sym_500 null)))"
"(if(null? l_501)"
"(void)"
"(let-values()"
"(if(same-binding? b_491 binding_490)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_499"
" sym_500"
"(remove-non-matching-requireds"
" l_501"
" id_488"
" phase_489"
" mpi_496"
" nominal-phase_498"
" sym_500)))))))))"
"(void)))))"
"(void)))))"
"(void))))))))))"
"(define-values"
"(unpack70.1)"
"(lambda(given-kws_502 given-args_503 r+p66_504 id67_505 phase68_506)"
"(let-values(((unless-matches64_507)(car given-args_503)))"
"(remove-required-id!69.1 unless-matches64_507 r+p66_504 id67_505 phase68_506))))"
"(define-values"
"(remove-required-id!71.1)"
"(lifted/5.1$1"
"(lambda(given-kws_508 given-argc_509)"
"(if(= given-argc_509 5)"
"(let-values(((l2_510) given-kws_508))"
"(if(pair? l2_510)(if(eq?(car l2_510) '#:unless-matches)(null?(cdr l2_510)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_511 given-args_512 r+p_513 id_514 phase_515)"
"(unpack70.1 given-kws_511 given-args_512 r+p_513 id_514 phase_515)))"
" '(#:unless-matches)"
" '(#:unless-matches)))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_516 id_517 phase_518 mpi_519 nominal-phase_520 sym_521)"
"(alt-reverse"
"(let-values(((lst_522) reqds_516))"
"(begin"
"(if(list? lst_522)(void)(let-values()(in-list lst_522)))"
"((letrec-values(((for-loop_523)"
"(lambda(fold-var_524 lst_525)"
"(if(pair? lst_525)"
"(let-values(((r_526)(unsafe-car lst_525)))"
"(let-values(((fold-var_527)"
"(let-values(((r_528)"
"(normalize-required"
" r_526"
" mpi_519"
" nominal-phase_520"
" sym_521)))"
"(begin"
" #t"
"((letrec-values(((for-loop_529)"
"(lambda(fold-var_530)"
"(let-values()"
"(let-values(((fold-var_531)"
"(let-values(((fold-var_532)"
" fold-var_530))"
"(if(free-identifier=?$1"
"(required-id r_528)"
" id_517"
" phase_518"
" phase_518)"
" fold-var_532"
"(let-values(((fold-var_533)"
" fold-var_532))"
"(let-values(((fold-var_534)"
"(let-values()"
"(cons"
"(let-values()"
" r_528)"
" fold-var_533))))"
"(values"
" fold-var_534)))))))"
" fold-var_531)))))"
" for-loop_529)"
" fold-var_524)))))"
"(for-loop_523 fold-var_527(unsafe-cdr lst_525))))"
" fold-var_524))))"
" for-loop_523)"
" null"
" lst_522))))))"
"(define-values"
"(lifted/6.1$1)"
"(make-required"
" 'check-not-defined"
"(case-lambda((self_535 r+p_536 id_537 phase_538)(apply missing-kw self_535 r+p_536 id_537 phase_538 null)))"
" #f"
" #f))"
"(define-values"
"(check-not-defined87.1)"
"(lambda(accum-update-nominals76_539"
" accum-update-nominals82_540"
" check-not-required?72_541"
" check-not-required?78_542"
" in73_543"
" remove-shadowed!?75_544"
" remove-shadowed!?81_545"
" unless-matches74_546"
" unless-matches80_547"
" who77_548"
" r+p84_549"
" id85_550"
" phase86_551)"
"(let-values(((check-not-required?_552)(if check-not-required?78_542 check-not-required?72_541 #f)))"
"(let-values(((r+p_553) r+p84_549))"
"(let-values(((id_554) id85_550))"
"(let-values(((phase_555) phase86_551))"
"(let-values(((orig-s_556) in73_543))"
"(let-values(((ok-binding/delayed_557)(if unless-matches80_547 unless-matches74_546 #f)))"
"(let-values(((remove-shadowed!?_558)(if remove-shadowed!?81_545 remove-shadowed!?75_544 #f)))"
"(let-values(((accum-update-nominals_559)"
"(if accum-update-nominals82_540 accum-update-nominals76_539 #f)))"
"(let-values(((who_560) who77_548))"
"(let-values()"
"(let-values(((b_561)"
"(let-values(((.../require+provide.rkt:263:12_562) resolve+shift22.1)"
"((id140_563) id_554)"
"((phase141_564) phase_555)"
"((temp142_565) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" temp142_565"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id140_563"
" phase141_564)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:263:12_562"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp142_565)"
" id140_563"
" phase141_564)))))"
"(if(not b_561)"
"(let-values()(void))"
"(if(not(module-binding? b_561))"
"                              (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_554))"
"(let-values()"
"(let-values(((defined?_566)"
"(if b_561"
"(eq?(requires+provides-self r+p_553)(module-binding-module b_561))"
" #f)))"
"(if(if(not defined?_566)(not check-not-required?_552) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_553 #f))"
"(if(if defined?_566"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_553)"
" phase_555"
" '#hasheq())"
"(module-binding-sym b_561)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((mpi_567)"
"(intern-mpi r+p_553(module-binding-nominal-module b_561))))"
"(let-values(((at-mod_568)"
"(hash-ref(requires+provides-requires r+p_553) mpi_567 #f)))"
"(let-values(((ok-binding_569)"
"(if(procedure? ok-binding/delayed_557)"
"(ok-binding/delayed_557)"
" ok-binding/delayed_557)))"
"(if(not at-mod_568)"
"(let-values()(void))"
"(if(if ok-binding_569(same-binding? b_561 ok-binding_569) #f)"
"(let-values()"
"(if(same-binding-nominals? b_561 ok-binding_569)"
"(void)"
"(let-values()"
"(let-values(((update!_570)"
"(lambda()"
"(let-values(((.../require+provide.rkt:304:12_571)"
" add-binding!19.1)"
"((temp143_572) #t)"
"((id144_573) id_554)"
"((temp145_574)"
"(let-values(((.../require+provide.rkt:307:13_576)"
" module-binding-update50.1)"
"((b147_577) b_561)"
"((temp148_578)"
"(cons"
" ok-binding_569"
"(module-binding-extra-nominal-bindings"
" b_561))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" temp148_578"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b147_577)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:307:13_576"
" keyword-procedure-extract"
" '(#:extra-nominal-bindings)"
" 3)"
" '(#:extra-nominal-bindings)"
"(list temp148_578)"
" b147_577))))"
"((phase146_575) phase_555))"
"(if(variable-reference-constant?"
"(#%variable-reference add-binding!19.1))"
"(add-binding!17.1"
" #f"
" #f"
" temp143_572"
" #t"
" id144_573"
" temp145_574"
" phase146_575)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:304:12_571"
" keyword-procedure-extract"
" '(#:just-for-nominal?)"
" 5)"
" '(#:just-for-nominal?)"
"(list temp143_572)"
" id144_573"
" temp145_574"
" phase146_575))))))"
"(if accum-update-nominals_559"
"(let-values()"
"(set-box!"
" accum-update-nominals_559"
"(cons update!_570(unbox accum-update-nominals_559))))"
"(let-values()(update!_570)))))))"
"(let-values()"
"(let-values(((nominal-phase_579)"
"(module-binding-nominal-require-phase b_561)))"
"(let-values(((sym-to-reqds_580)"
"(hash-ref at-mod_568 nominal-phase_579 '#hasheq())))"
"(let-values(((reqds_581)"
"(hash-ref"
" sym-to-reqds_580"
"(syntax-e$1 id_554)"
" null)))"
"(begin"
"(let-values(((lst_582) reqds_581))"
"(begin"
"(if(list? lst_582)"
"(void)"
"(let-values()(in-list lst_582)))"
"((letrec-values(((for-loop_583)"
"(lambda(fold-var_584 lst_585)"
"(if(pair? lst_585)"
"(let-values(((r_586)"
"(unsafe-car"
" lst_585)))"
"(let-values(((fold-var_587)"
"(let-values(((fold-var_588)"
" fold-var_584))"
"(let-values(((fold-var_589)"
"(let-values()"
"(begin"
"(let-values()"
"(if(if(bulk-required?"
" r_586)"
"(bulk-required-can-be-shadowed?"
" r_586)"
"(required-can-be-shadowed?"
" r_586))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_553"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" who_560"
"(string-append"
"                                                                                                                                  \"identifier already \""
"(if defined?_566"
"                                                                                                                                    \"defined\""
"                                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_555)"
"(let-values()"
"                                                                                                                                      \"\")"
"(if(label-phase?"
" phase_555)"
"(let-values()"
"                                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_555)"
"(let-values()"
"                                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                                           \" for phase ~a\""
" phase_555))))))"
" orig-s_556"
" id_554))))"
"(void)))))"
"(values"
" fold-var_589)))))"
"(for-loop_583"
" fold-var_587"
"(unsafe-cdr lst_585))))"
" fold-var_584))))"
" for-loop_583)"
"(void)"
" lst_582)))"
"(if(if remove-shadowed!?_558(pair? reqds_581) #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_580"
"(syntax-e$1 id_554)"
"(remove-non-matching-requireds"
" reqds_581"
" id_554"
" phase_555"
" mpi_567"
" nominal-phase_579"
"(syntax-e$1 id_554))))"
"(void))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack88.1)"
"(lambda(given-kws_590 given-args_591 r+p84_592 id85_593 phase86_594)"
"(let-values(((accum-update-nominals82_595)"
"(if(pair? given-kws_590)(eq? '#:accum-update-nominals(car given-kws_590)) #f)))"
"(let-values(((accum-update-nominals76_596)(if accum-update-nominals82_595(car given-args_591)(void)))"
"((given-kws_597)(if accum-update-nominals82_595(cdr given-kws_590) given-kws_590))"
"((given-args_598)(if accum-update-nominals82_595(cdr given-args_591) given-args_591)))"
"(let-values(((check-not-required?78_599)"
"(if(pair? given-kws_597)(eq? '#:check-not-required?(car given-kws_597)) #f)))"
"(let-values(((check-not-required?72_600)(if check-not-required?78_599(car given-args_598)(void)))"
"((given-kws_601)(if check-not-required?78_599(cdr given-kws_597) given-kws_597))"
"((given-args_602)(if check-not-required?78_599(cdr given-args_598) given-args_598)))"
"(let-values(((in73_603)(car given-args_602))"
"((given-kws_604)(cdr given-kws_601))"
"((given-args_605)(cdr given-args_602)))"
"(let-values(((remove-shadowed!?81_606)"
"(if(pair? given-kws_604)(eq? '#:remove-shadowed!?(car given-kws_604)) #f)))"
"(let-values(((remove-shadowed!?75_607)(if remove-shadowed!?81_606(car given-args_605)(void)))"
"((given-kws_608)(if remove-shadowed!?81_606(cdr given-kws_604) given-kws_604))"
"((given-args_609)(if remove-shadowed!?81_606(cdr given-args_605) given-args_605)))"
"(let-values(((unless-matches80_610)"
"(if(pair? given-kws_608)(eq? '#:unless-matches(car given-kws_608)) #f)))"
"(let-values(((unless-matches74_611)(if unless-matches80_610(car given-args_609)(void)))"
"((given-kws_612)(if unless-matches80_610(cdr given-kws_608) given-kws_608))"
"((given-args_613)(if unless-matches80_610(cdr given-args_609) given-args_609)))"
"(let-values(((who77_614)(car given-args_613)))"
"(check-not-defined87.1"
" accum-update-nominals76_596"
" accum-update-nominals82_595"
" check-not-required?72_600"
" check-not-required?78_599"
" in73_603"
" remove-shadowed!?75_607"
" remove-shadowed!?81_606"
" unless-matches74_611"
" unless-matches80_610"
" who77_614"
" r+p84_592"
" id85_593"
" phase86_594)))))))))))))"
"(define-values"
"(check-not-defined89.1)"
"(lifted/6.1$1"
"(lambda(given-kws_615 given-argc_616)"
"(if(= given-argc_616 5)"
"(subsets?"
" '(#:in #:who)"
" given-kws_615"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who))"
" #f))"
"(case-lambda"
"((given-kws_617 given-args_618 r+p_619 id_620 phase_621)"
"(unpack88.1 given-kws_617 given-args_618 r+p_619 id_620 phase_621)))"
" '(#:in #:who)"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_622 syms_623 phase_624)"
"(let-values(((phase-to-defined-syms_625)(requires+provides-phase-to-defined-syms r+p_622)))"
"(let-values(((defined-syms_626)(hash-ref phase-to-defined-syms_625 phase_624 '#hasheq())))"
"(let-values(((new-defined-syms_627)"
"(let-values(((lst_628) syms_623))"
"(begin"
"(if(list? lst_628)(void)(let-values()(in-list lst_628)))"
"((letrec-values(((for-loop_629)"
"(lambda(defined-syms_630 lst_631)"
"(if(pair? lst_631)"
"(let-values(((sym_632)(unsafe-car lst_631)))"
"(let-values(((defined-syms_633)"
"(let-values(((defined-syms_634) defined-syms_630))"
"(let-values(((defined-syms_635)"
"(let-values()"
"(hash-set"
" defined-syms_634"
" sym_632"
" #t))))"
"(values defined-syms_635)))))"
"(for-loop_629 defined-syms_633(unsafe-cdr lst_631))))"
" defined-syms_630))))"
" for-loop_629)"
" defined-syms_626"
" lst_628)))))"
"(hash-set! phase-to-defined-syms_625 phase_624 new-defined-syms_627))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_636 mod-name_637 phase_638)"
"(let-values(((mpi_639)(intern-mpi r+p_636 mod-name_637)))"
"(let-values(((at-mod_640)(hash-ref(requires+provides-requires r+p_636) mpi_639 #f)))"
"(if at-mod_640"
"(alt-reverse"
"(let-values(((ht_641)(hash-ref at-mod_640 phase_638 '#hasheq())))"
"(begin"
"(if((lambda(ht_642)(hash? ht_642)) ht_641)(void)(let-values()(default-in-hash ht_641)))"
"((letrec-values(((for-loop_643)"
"(lambda(fold-var_644 i_645)"
"(if i_645"
"(let-values(((sym_646 reqds_647)(hash-iterate-key+value ht_641 i_645)))"
"(let-values(((fold-var_648)"
"(let-values(((lst_649) reqds_647))"
"(begin"
"(if(list? lst_649)(void)(let-values()(in-list lst_649)))"
"((letrec-values(((for-loop_650)"
"(lambda(fold-var_651 lst_652)"
"(if(pair? lst_652)"
"(let-values(((reqd_653)"
"(unsafe-car lst_652)))"
"(let-values(((fold-var_654)"
"(let-values(((fold-var_655)"
" fold-var_651))"
"(let-values(((fold-var_656)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_653"
" mpi_639"
" phase_638"
" sym_646))"
" fold-var_655))))"
"(values"
" fold-var_656)))))"
"(for-loop_650"
" fold-var_654"
"(unsafe-cdr lst_652))))"
" fold-var_651))))"
" for-loop_650)"
" fold-var_644"
" lst_649)))))"
"(for-loop_643 fold-var_648(hash-iterate-next ht_641 i_645))))"
" fold-var_644))))"
" for-loop_643)"
" null"
"(hash-iterate-first ht_641)))))"
" #f)))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_657)"
"(let-values(((or-part_658)(extract-module-requires r+p_657(requires+provides-self r+p_657) 0)))"
"(if or-part_658 or-part_658 null))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_659 mod-name_660 phase_661)"
"(let-values(((self_662)(requires+provides-self r+p_659)))"
"(let-values(((requires_663)(requires+provides-requires r+p_659)))"
"(call/ec"
"(lambda(esc_664)"
"(alt-reverse"
"(let-values(((lst_665)"
"(if mod-name_660(list(intern-mpi r+p_659 mod-name_660))(hash-keys requires_663))))"
"(begin"
"(if(list? lst_665)(void)(let-values()(in-list lst_665)))"
"((letrec-values(((for-loop_666)"
"(lambda(fold-var_667 lst_668)"
"(if(pair? lst_668)"
"(let-values(((mod-name_669)(unsafe-car lst_668)))"
"(let-values(((fold-var_670)"
"(let-values(((fold-var_671) fold-var_667))"
"(if(eq? mod-name_669 self_662)"
" fold-var_671"
"(let-values(((phase-to-requireds_672)"
"(hash-ref"
" requires_663"
" mod-name_669"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_673)"
"(lambda(fold-var_674)"
"(let-values()"
"(let-values(((fold-var_675)"
"(let-values(((lst_676)"
"(if(eq?"
" phase_661"
" 'all)"
"(hash-keys"
" phase-to-requireds_672)"
"(list"
" phase_661))))"
"(begin"
"(if(list?"
" lst_676)"
"(void)"
"(let-values()"
"(in-list"
" lst_676)))"
"((letrec-values(((for-loop_677)"
"(lambda(fold-var_678"
" lst_679)"
"(if(pair?"
" lst_679)"
"(let-values(((phase_680)"
"(unsafe-car"
" lst_679)))"
"(let-values(((fold-var_681)"
"(let-values(((ht_682)"
"(hash-ref"
" phase-to-requireds_672"
" phase_680"
"(lambda()"
"(esc_664"
" #f)))))"
"(begin"
"(if((lambda(ht_683)"
"(hash?"
" ht_683))"
" ht_682)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_682)))"
"((letrec-values(((for-loop_684)"
"(lambda(fold-var_685"
" i_686)"
"(if i_686"
"(let-values(((sym_687"
" reqds_688)"
"(hash-iterate-key+value"
" ht_682"
" i_686)))"
"(let-values(((fold-var_689)"
"(let-values(((lst_690)"
" reqds_688))"
"(begin"
"(if(list?"
" lst_690)"
"(void)"
"(let-values()"
"(in-list"
" lst_690)))"
"((letrec-values(((for-loop_691)"
"(lambda(fold-var_692"
" lst_693)"
"(if(pair?"
" lst_693)"
"(let-values(((reqd_694)"
"(unsafe-car"
" lst_693)))"
"(let-values(((fold-var_695)"
"(let-values(((fold-var_696)"
" fold-var_692))"
"(let-values(((fold-var_697)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_694"
" mod-name_669"
" phase_680"
" sym_687))"
" fold-var_696))))"
"(values"
" fold-var_697)))))"
"(for-loop_691"
" fold-var_695"
"(unsafe-cdr"
" lst_693))))"
" fold-var_692))))"
" for-loop_691)"
" fold-var_685"
" lst_690)))))"
"(for-loop_684"
" fold-var_689"
"(hash-iterate-next"
" ht_682"
" i_686))))"
" fold-var_685))))"
" for-loop_684)"
" fold-var_678"
"(hash-iterate-first"
" ht_682))))))"
"(for-loop_677"
" fold-var_681"
"(unsafe-cdr"
" lst_679))))"
" fold-var_678))))"
" for-loop_677)"
" fold-var_674"
" lst_676)))))"
" fold-var_675)))))"
" for-loop_673)"
" fold-var_671)))))))"
"(for-loop_666 fold-var_670(unsafe-cdr lst_668))))"
" fold-var_667))))"
" for-loop_666)"
" null"
" lst_665))))))))))"
"(define-values"
"(lifted/7.1$1)"
"(make-required"
" 'add-provide!"
"(case-lambda"
"((self_698 r+p_699 sym_700 phase_701 binding_702 immed-binding_703 id_704 orig-s_705)"
"(apply missing-kw self_698 r+p_699 sym_700 phase_701 binding_702 immed-binding_703 id_704 orig-s_705 null)))"
" #f"
" #f))"
"(define-values"
"(add-provide!101.1)"
"(lambda(as-protected?90_706"
" as-transformer?91_707"
" r+p94_708"
" sym95_709"
" phase96_710"
" binding97_711"
" immed-binding98_712"
" id99_713"
" orig-s100_714)"
"(let-values(((r+p_715) r+p94_708))"
"(let-values(((sym_716) sym95_709))"
"(let-values(((phase_717) phase96_710))"
"(let-values(((binding_718) binding97_711))"
"(let-values(((immed-binding_719) immed-binding98_712))"
"(let-values(((id_720) id99_713))"
"(let-values(((orig-s_721) orig-s100_714))"
"(let-values(((as-protected?_722) as-protected?90_706))"
"(let-values(((as-transformer?_723) as-transformer?91_707))"
"(let-values()"
"(begin"
"(if(if as-protected?_722"
"(not(eq?(module-binding-module immed-binding_719)(requires+provides-self r+p_715)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_716))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_715)"
" phase_717"
"(lambda(at-phase_724)"
"(let-values(((b/p_725)(hash-ref at-phase_724 sym_716 #f)))"
"(let-values(((b_726)(provided-as-binding b/p_725)))"
"(if(not b_726)"
"(let-values()"
"(hash-set"
" at-phase_724"
" sym_716"
"(if(let-values(((or-part_727) as-protected?_722))"
"(if or-part_727 or-part_727 as-transformer?_723))"
"(provided1.1 binding_718 as-protected?_722 as-transformer?_723)"
" binding_718)))"
"(if(same-binding? b_726 binding_718)"
"(let-values() at-phase_724)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_721"
" id_720)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(unpack102.1)"
"(lambda(given-kws_728"
" given-args_729"
" r+p94_730"
" sym95_731"
" phase96_732"
" binding97_733"
" immed-binding98_734"
" id99_735"
" orig-s100_736)"
"(let-values(((as-protected?90_737)(car given-args_729))"
"((given-kws_738)(cdr given-kws_728))"
"((given-args_739)(cdr given-args_729)))"
"(let-values(((as-transformer?91_740)(car given-args_739)))"
"(add-provide!101.1"
" as-protected?90_737"
" as-transformer?91_740"
" r+p94_730"
" sym95_731"
" phase96_732"
" binding97_733"
" immed-binding98_734"
" id99_735"
" orig-s100_736)))))"
"(define-values"
"(add-provide!103.1)"
"(lifted/7.1$1"
"(lambda(given-kws_741 given-argc_742)"
"(if(= given-argc_742 9)"
"(let-values(((l2_743) given-kws_741))"
"(if(pair? l2_743)"
"(if(eq?(car l2_743) '#:as-protected?)"
"(let-values(((l2_744)(cdr l2_743)))"
"(if(pair? l2_744)(if(eq?(car l2_744) '#:as-transformer?)(null?(cdr l2_744)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_745 given-args_746 r+p_747 sym_748 phase_749 binding_750 immed-binding_751 id_752 orig-s_753)"
"(unpack102.1"
" given-kws_745"
" given-args_746"
" r+p_747"
" sym_748"
" phase_749"
" binding_750"
" immed-binding_751"
" id_752"
" orig-s_753)))"
" '(#:as-protected? #:as-transformer?)"
" '(#:as-protected? #:as-transformer?)))"
"(define-values"
"(attach-require-provide-properties)"
"(lambda(r+p_754 s_755 old-self_756 new-self_757)"
"(let-values(((extract-requires_758)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_760)(requires+provides-require-mpis-in-order r+p_754)))"
"(let-values(((phases-in-order_761)"
"(let-values(((temp149_762)(hash-keys phase-to-mpis-in-order_760))"
"((phase<?150_763) phase<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp149_762 phase<?150_763)"
"(sort9.1 temp149_762 phase<?150_763)))))"
"(alt-reverse"
"(let-values(((lst_764) phases-in-order_761))"
"(begin"
"(if(list? lst_764)(void)(let-values()(in-list lst_764)))"
"((letrec-values(((for-loop_765)"
"(lambda(fold-var_766 lst_767)"
"(if(pair? lst_767)"
"(let-values(((phase_768)(unsafe-car lst_767)))"
"(let-values(((fold-var_769)"
"(let-values(((fold-var_770) fold-var_766))"
"(let-values(((fold-var_771)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_768"
"(alt-reverse"
"(let-values(((lst_772)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_760"
" phase_768))))"
"(begin"
"(if(list? lst_772)"
"(void)"
"(let-values()"
"(in-list lst_772)))"
"((letrec-values(((for-loop_773)"
"(lambda(fold-var_774"
" lst_775)"
"(if(pair?"
" lst_775)"
"(let-values(((mpi_776)"
"(unsafe-car"
" lst_775)))"
"(let-values(((fold-var_777)"
"(let-values(((fold-var_778)"
" fold-var_774))"
"(if(eq?"
" mpi_776"
" old-self_756)"
" fold-var_778"
"(let-values(((fold-var_779)"
" fold-var_778))"
"(let-values(((fold-var_780)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_776"
" old-self_756"
" new-self_757))"
" fold-var_779))))"
"(values"
" fold-var_780)))))))"
"(for-loop_773"
" fold-var_777"
"(unsafe-cdr"
" lst_775))))"
" fold-var_774))))"
" for-loop_773)"
" null"
" lst_772))))))"
" fold-var_770))))"
"(values fold-var_771)))))"
"(for-loop_765 fold-var_769(unsafe-cdr lst_767))))"
" fold-var_766))))"
" for-loop_765)"
" null"
" lst_764)))))))))"
"(let-values(((extract-provides_759)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_754)"
" old-self_756"
" new-self_757))))"
"(let-values(((s_781)(syntax-property$1 s_755 'module-requires(extract-requires_758))))"
"(let-values(((s_782)(syntax-property$1 s_781 'module-provides(extract-provides_759)))) s_782))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_806 from-mpi_807 to-mpi_808)"
"(if(eq? from-mpi_807 to-mpi_808)"
"(let-values() provides_806)"
"(let-values()"
"(let-values(((ht_809) provides_806))"
"(begin"
"(if((lambda(ht_810)(hash? ht_810)) ht_809)(void)(let-values()(default-in-hash ht_809)))"
"((letrec-values(((for-loop_811)"
"(lambda(table_812 i_813)"
"(if i_813"
"(let-values(((phase_814 at-phase_815)(hash-iterate-key+value ht_809 i_813)))"
"(let-values(((table_816)"
"(let-values(((table_817) table_812))"
"(let-values(((table_818)"
"(let-values()"
"(let-values(((key_819 val_820)"
"(let-values()"
"(values"
" phase_814"
"(let-values(((ht_821)"
" at-phase_815))"
"(begin"
"(if((lambda(ht_822)"
"(hash? ht_822))"
" ht_821)"
"(void)"
"(let-values()"
"(default-in-hash ht_821)))"
"((letrec-values(((for-loop_823)"
"(lambda(table_824"
" i_825)"
"(if i_825"
"(let-values(((sym_826"
" binding_827)"
"(hash-iterate-key+value"
" ht_821"
" i_825)))"
"(let-values(((table_828)"
"(let-values(((table_829)"
" table_824))"
"(if(symbol-interned?"
" sym_826)"
"(let-values(((table_830)"
" table_829))"
"(let-values(((table_831)"
"(let-values()"
"(let-values(((key_832"
" val_833)"
"(let-values()"
"(values"
" sym_826"
"((letrec-values(((loop_834)"
"(lambda(binding_835)"
"(if(provided?"
" binding_835)"
"(let-values()"
"(provided1.1"
"(loop_834"
"(provided-binding"
" binding_835))"
"(provided-protected?"
" binding_835)"
"(provided-syntax?"
" binding_835)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_835"
" from-mpi_807"
" to-mpi_808))))))"
" loop_834)"
" binding_827)))))"
"(hash-set"
" table_830"
" key_832"
" val_833)))))"
"(values"
" table_831)))"
" table_829))))"
"(for-loop_823"
" table_828"
"(hash-iterate-next"
" ht_821"
" i_825))))"
" table_824))))"
" for-loop_823)"
" '#hasheq()"
"(hash-iterate-first"
" ht_821))))))))"
"(hash-set table_817 key_819 val_820)))))"
"(values table_818)))))"
"(for-loop_811 table_816(hash-iterate-next ht_809 i_813))))"
" table_812))))"
" for-loop_811)"
" '#hasheqv()"
"(hash-iterate-first ht_809))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_25 make-_26 ?_27 -ref_28 -set!_29)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_25 make-_26 ?_27(make-struct-field-accessor -ref_28 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_45 make-_46 ?_47 -ref_48 -set!_49)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_45"
" make-_46"
" ?_47"
"(make-struct-field-accessor -ref_48 0 'prefix-sym)"
"(make-struct-field-accessor -ref_48 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_70 make-_71 ?_72 -ref_73 -set!_74)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_70"
" make-_71"
" ?_72"
"(make-struct-field-accessor -ref_73 0 'to-id)"
"(make-struct-field-accessor -ref_73 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(lifted/1.1$13)"
"(make-required"
" 'parse-and-perform-requires!"
"(case-lambda"
"((self_95 reqs_96 orig-s_97 m-ns_98 phase-shift_99 requires+provides_100)"
"(apply missing-kw self_95 reqs_96 orig-s_97 m-ns_98 phase-shift_99 requires+provides_100 null)))"
" #f"
" #f))"
"(define-values"
"(parse-and-perform-requires!28.1)"
"(lambda(copy-variable-as-constant?11_101"
" copy-variable-as-constant?20_102"
" copy-variable-phase-level10_103"
" copy-variable-phase-level19_104"
" declared-submodule-names9_105"
" declared-submodule-names18_106"
" run-phase6_107"
" run-phase15_108"
" run?7_109"
" run?16_110"
" self5_111"
" self14_112"
" skip-variable-phase-level12_113"
" skip-variable-phase-level21_114"
" visit?8_115"
" visit?17_116"
" who13_117"
" reqs23_118"
" orig-s24_119"
" m-ns25_120"
" phase-shift26_121"
" requires+provides27_122)"
"(let-values(((reqs_123) reqs23_118))"
"(let-values(((orig-s_124) orig-s24_119))"
"(let-values(((m-ns_125) m-ns25_120))"
"(let-values(((phase-shift_126) phase-shift26_121))"
"(let-values(((requires+provides_127) requires+provides27_122))"
"(let-values(((self_128)(if self14_112 self5_111 #f)))"
"(let-values(((run-phase_129)(if run-phase15_108 run-phase6_107(namespace-phase m-ns_125))))"
"(let-values(((run?_130)(if run?16_110 run?7_109 #f)))"
"(let-values(((visit?_131)(if visit?17_116 visit?8_115 #t)))"
"(let-values(((declared-submodule-names_132)"
"(if declared-submodule-names18_106 declared-submodule-names9_105 '#hasheq())))"
"(let-values(((copy-variable-phase-level_133)"
"(if copy-variable-phase-level19_104 copy-variable-phase-level10_103 #f)))"
"(let-values(((copy-variable-as-constant?_134)"
"(if copy-variable-as-constant?20_102 copy-variable-as-constant?11_101 #f)))"
"(let-values(((skip-variable-phase-level_135)"
"(if skip-variable-phase-level21_114 skip-variable-phase-level12_113 #f)))"
"(let-values(((who_136) who13_117))"
"(let-values()"
"((letrec-values(((loop_137)"
"(lambda(reqs_138"
" top-req_139"
" phase-shift_140"
" just-meta_141"
" adjust_142"
" for-meta-ok?_143"
" just-meta-ok?_144"
" layer_145)"
"(let-values(((lst_146) reqs_138))"
"(begin"
"(if(list? lst_146)(void)(let-values()(in-list lst_146)))"
"((letrec-values(((for-loop_147)"
"(lambda(result_148 lst_149)"
"(if(pair? lst_149)"
"(let-values(((req_150)"
"(unsafe-car lst_149)))"
"(let-values(((result_151)"
"(let-values(((result_152)"
" result_148))"
"(let-values(((result_153)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_154)"
"(let-values(((check-nested106_156)"
"(lambda(want-layer105_157"
" ok?103_158"
" ok?104_159)"
"(let-values(((want-layer_160)"
" want-layer105_157))"
"(let-values(((ok?_161)"
"(if ok?104_159"
" ok?103_158"
" #t)))"
"(let-values()"
"(if(if ok?_161"
"(member"
" want-layer_160"
"(member"
" layer_145"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"invalid nesting\""
" orig-s_124"
" req_150)))))))))"
"(case-lambda"
"((want-layer_162)"
"(check-nested106_156"
" want-layer_162"
" #f"
" #f))"
"((want-layer_163"
" ok?103_164)"
"(check-nested106_156"
" want-layer_163"
" ok?103_164"
" #t))))))"
"(let-values(((fm_155)"
"(if(pair?"
"(syntax-e$1"
" req_150))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_150)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_150)))"
" #f)"
" #f)))"
"(let-values(((tmp_165)"
" fm_155))"
"(if(equal?"
" tmp_165"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'raw"
" for-meta-ok?_143)"
"(values))))"
"(let-values(((ok?_166"
" for-meta108_167"
" phase-level109_168"
" spec110_169)"
"(let-values(((s_183)"
" req_150))"
"(let-values(((orig-s_184)"
" s_183))"
"(let-values(((for-meta108_185"
" phase-level109_186"
" spec110_187)"
"(let-values(((s_188)"
"(if(syntax?$1"
" s_183)"
"(syntax-e$1"
" s_183)"
" s_183)))"
"(if(pair?"
" s_188)"
"(let-values(((for-meta111_189)"
"(let-values(((s_192)"
"(car"
" s_188)))"
" s_192))"
"((phase-level112_190"
" spec113_191)"
"(let-values(((s_193)"
"(cdr"
" s_188)))"
"(let-values(((s_194)"
"(if(syntax?$1"
" s_193)"
"(syntax-e$1"
" s_193)"
" s_193)))"
"(if(pair?"
" s_194)"
"(let-values(((phase-level114_195)"
"(let-values(((s_197)"
"(car"
" s_194)))"
" s_197))"
"((spec115_196)"
"(let-values(((s_198)"
"(cdr"
" s_194)))"
"(let-values(((s_199)"
"(if(syntax?$1"
" s_198)"
"(syntax-e$1"
" s_198)"
" s_198)))"
"(let-values(((flat-s_200)"
"(to-syntax-list.1"
" s_199)))"
"(if(not"
" flat-s_200)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_184))"
"(let-values()"
" flat-s_200)))))))"
"(values"
" phase-level114_195"
" spec115_196))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_184))))))"
"(values"
" for-meta111_189"
" phase-level112_190"
" spec113_191))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_184)))))"
"(values"
" #t"
" for-meta108_185"
" phase-level109_186"
" spec110_187))))))"
"(let-values(((p_182)"
"(syntax-e$1"
" phase-level109_168)))"
"(begin"
"(if(phase?"
" p_182)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad phase\""
" orig-s_124"
" req_150)))"
"(loop_137"
" spec110_169"
"(let-values(((or-part_201)"
" top-req_139))"
"(if or-part_201"
" or-part_201"
" req_150))"
"(phase+"
" phase-shift_140"
" p_182)"
" just-meta_141"
" adjust_142"
" #f"
" just-meta-ok?_144"
" 'raw))))))"
"(if(equal?"
" tmp_165"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'raw"
" for-meta-ok?_143)"
"(values))))"
"(let-values(((ok?_202"
" for-syntax116_203"
" spec117_204)"
"(let-values(((s_215)"
" req_150))"
"(let-values(((orig-s_216)"
" s_215))"
"(let-values(((for-syntax116_217"
" spec117_218)"
"(let-values(((s_219)"
"(if(syntax?$1"
" s_215)"
"(syntax-e$1"
" s_215)"
" s_215)))"
"(if(pair?"
" s_219)"
"(let-values(((for-syntax118_220)"
"(let-values(((s_222)"
"(car"
" s_219)))"
" s_222))"
"((spec119_221)"
"(let-values(((s_223)"
"(cdr"
" s_219)))"
"(let-values(((s_224)"
"(if(syntax?$1"
" s_223)"
"(syntax-e$1"
" s_223)"
" s_223)))"
"(let-values(((flat-s_225)"
"(to-syntax-list.1"
" s_224)))"
"(if(not"
" flat-s_225)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_216))"
"(let-values()"
" flat-s_225)))))))"
"(values"
" for-syntax118_220"
" spec119_221))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_216)))))"
"(values"
" #t"
" for-syntax116_217"
" spec117_218))))))"
"(loop_137"
" spec117_204"
"(let-values(((or-part_226)"
" top-req_139))"
"(if or-part_226"
" or-part_226"
" req_150))"
"(phase+"
" phase-shift_140"
" 1)"
" just-meta_141"
" adjust_142"
" #f"
" just-meta-ok?_144"
" 'raw))))"
"(if(equal?"
" tmp_165"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'raw"
" for-meta-ok?_143)"
"(values))))"
"(let-values(((ok?_227"
" for-template120_228"
" spec121_229)"
"(let-values(((s_240)"
" req_150))"
"(let-values(((orig-s_241)"
" s_240))"
"(let-values(((for-template120_242"
" spec121_243)"
"(let-values(((s_244)"
"(if(syntax?$1"
" s_240)"
"(syntax-e$1"
" s_240)"
" s_240)))"
"(if(pair?"
" s_244)"
"(let-values(((for-template122_245)"
"(let-values(((s_247)"
"(car"
" s_244)))"
" s_247))"
"((spec123_246)"
"(let-values(((s_248)"
"(cdr"
" s_244)))"
"(let-values(((s_249)"
"(if(syntax?$1"
" s_248)"
"(syntax-e$1"
" s_248)"
" s_248)))"
"(let-values(((flat-s_250)"
"(to-syntax-list.1"
" s_249)))"
"(if(not"
" flat-s_250)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_241))"
"(let-values()"
" flat-s_250)))))))"
"(values"
" for-template122_245"
" spec123_246))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_241)))))"
"(values"
" #t"
" for-template120_242"
" spec121_243))))))"
"(loop_137"
" spec121_229"
"(let-values(((or-part_251)"
" top-req_139))"
"(if or-part_251"
" or-part_251"
" req_150))"
"(phase+"
" phase-shift_140"
" -1)"
" just-meta_141"
" adjust_142"
" #f"
" just-meta-ok?_144"
" 'raw))))"
"(if(equal?"
" tmp_165"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'raw"
" for-meta-ok?_143)"
"(values))))"
"(let-values(((ok?_252"
" for-label124_253"
" spec125_254)"
"(let-values(((s_265)"
" req_150))"
"(let-values(((orig-s_266)"
" s_265))"
"(let-values(((for-label124_267"
" spec125_268)"
"(let-values(((s_269)"
"(if(syntax?$1"
" s_265)"
"(syntax-e$1"
" s_265)"
" s_265)))"
"(if(pair?"
" s_269)"
"(let-values(((for-label126_270)"
"(let-values(((s_272)"
"(car"
" s_269)))"
" s_272))"
"((spec127_271)"
"(let-values(((s_273)"
"(cdr"
" s_269)))"
"(let-values(((s_274)"
"(if(syntax?$1"
" s_273)"
"(syntax-e$1"
" s_273)"
" s_273)))"
"(let-values(((flat-s_275)"
"(to-syntax-list.1"
" s_274)))"
"(if(not"
" flat-s_275)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_266))"
"(let-values()"
" flat-s_275)))))))"
"(values"
" for-label126_270"
" spec127_271))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_266)))))"
"(values"
" #t"
" for-label124_267"
" spec125_268))))))"
"(loop_137"
" spec125_254"
"(let-values(((or-part_276)"
" top-req_139))"
"(if or-part_276"
" or-part_276"
" req_150))"
"(phase+"
" phase-shift_140"
" #f)"
" just-meta_141"
" adjust_142"
" #f"
" just-meta-ok?_144"
" 'raw))))"
"(if(equal?"
" tmp_165"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'raw"
" just-meta-ok?_144)"
"(values))))"
"(let-values(((ok?_277"
" just-meta128_278"
" phase-level129_279"
" spec130_280)"
"(let-values(((s_294)"
" req_150))"
"(let-values(((orig-s_295)"
" s_294))"
"(let-values(((just-meta128_296"
" phase-level129_297"
" spec130_298)"
"(let-values(((s_299)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1"
" s_294)"
" s_294)))"
"(if(pair?"
" s_299)"
"(let-values(((just-meta131_300)"
"(let-values(((s_303)"
"(car"
" s_299)))"
" s_303))"
"((phase-level132_301"
" spec133_302)"
"(let-values(((s_304)"
"(cdr"
" s_299)))"
"(let-values(((s_305)"
"(if(syntax?$1"
" s_304)"
"(syntax-e$1"
" s_304)"
" s_304)))"
"(if(pair?"
" s_305)"
"(let-values(((phase-level134_306)"
"(let-values(((s_308)"
"(car"
" s_305)))"
" s_308))"
"((spec135_307)"
"(let-values(((s_309)"
"(cdr"
" s_305)))"
"(let-values(((s_310)"
"(if(syntax?$1"
" s_309)"
"(syntax-e$1"
" s_309)"
" s_309)))"
"(let-values(((flat-s_311)"
"(to-syntax-list.1"
" s_310)))"
"(if(not"
" flat-s_311)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_295))"
"(let-values()"
" flat-s_311)))))))"
"(values"
" phase-level134_306"
" spec135_307))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_295))))))"
"(values"
" just-meta131_300"
" phase-level132_301"
" spec133_302))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_295)))))"
"(values"
" #t"
" just-meta128_296"
" phase-level129_297"
" spec130_298))))))"
"(let-values(((p_293)"
"(syntax-e$1"
" phase-level129_279)))"
"(begin"
"(if(phase?"
" p_293)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad phase\""
" orig-s_124"
" req_150)))"
"(loop_137"
" spec130_280"
"(let-values(((or-part_312)"
" top-req_139))"
"(if or-part_312"
" or-part_312"
" req_150))"
" phase-shift_140"
" p_293"
" adjust_142"
" for-meta-ok?_143"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_165"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_313"
" only136_314"
" spec137_315"
" id138_316)"
"(let-values(((s_329)"
" req_150))"
"(let-values(((orig-s_330)"
" s_329))"
"(let-values(((only136_331"
" spec137_332"
" id138_333)"
"(let-values(((s_334)"
"(if(syntax?$1"
" s_329)"
"(syntax-e$1"
" s_329)"
" s_329)))"
"(if(pair?"
" s_334)"
"(let-values(((only139_335)"
"(let-values(((s_338)"
"(car"
" s_334)))"
" s_338))"
"((spec140_336"
" id141_337)"
"(let-values(((s_339)"
"(cdr"
" s_334)))"
"(let-values(((s_340)"
"(if(syntax?$1"
" s_339)"
"(syntax-e$1"
" s_339)"
" s_339)))"
"(if(pair?"
" s_340)"
"(let-values(((spec142_341)"
"(let-values(((s_343)"
"(car"
" s_340)))"
" s_343))"
"((id143_342)"
"(let-values(((s_344)"
"(cdr"
" s_340)))"
"(let-values(((s_345)"
"(if(syntax?$1"
" s_344)"
"(syntax-e$1"
" s_344)"
" s_344)))"
"(let-values(((flat-s_346)"
"(to-syntax-list.1"
" s_345)))"
"(if(not"
" flat-s_346)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_330))"
"(let-values()"
"(let-values(((id_347)"
"(let-values(((lst_348)"
" flat-s_346))"
"(begin"
"(if(list?"
" lst_348)"
"(void)"
"(let-values()"
"(in-list"
" lst_348)))"
"((letrec-values(((for-loop_349)"
"(lambda(id_350"
" lst_351)"
"(if(pair?"
" lst_351)"
"(let-values(((s_352)"
"(unsafe-car"
" lst_351)))"
"(let-values(((id_353)"
"(let-values(((id_354)"
" id_350))"
"(let-values(((id_355)"
"(let-values()"
"(let-values(((id144_356)"
"(let-values()"
"(if(let-values(((or-part_357)"
"(if(syntax?$1"
" s_352)"
"(symbol?"
"(syntax-e$1"
" s_352))"
" #f)))"
"(if or-part_357"
" or-part_357"
"(symbol?"
" s_352)))"
" s_352"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_330"
" s_352)))))"
"(cons"
" id144_356"
" id_354)))))"
"(values"
" id_355)))))"
"(for-loop_349"
" id_353"
"(unsafe-cdr"
" lst_351))))"
" id_350))))"
" for-loop_349)"
" null"
" lst_348)))))"
"(alt-reverse"
" id_347)))))))))"
"(values"
" spec142_341"
" id143_342))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_330))))))"
"(values"
" only139_335"
" spec140_336"
" id141_337))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_330)))))"
"(values"
" #t"
" only136_331"
" spec137_332"
" id138_333))))))"
"(loop_137"
"(list"
" spec137_315)"
"(let-values(((or-part_358)"
" top-req_139))"
"(if or-part_358"
" or-part_358"
" req_150))"
" phase-shift_140"
" just-meta_141"
"(adjust-only1.1"
"(ids->sym-set"
" id138_316))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_165"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_359"
" prefix145_360"
" id:prefix146_361"
" spec147_362)"
"(let-values(((s_375)"
" req_150))"
"(let-values(((orig-s_376)"
" s_375))"
"(let-values(((prefix145_377"
" id:prefix146_378"
" spec147_379)"
"(let-values(((s_380)"
"(if(syntax?$1"
" s_375)"
"(syntax-e$1"
" s_375)"
" s_375)))"
"(if(pair?"
" s_380)"
"(let-values(((prefix148_381)"
"(let-values(((s_384)"
"(car"
" s_380)))"
" s_384))"
"((id:prefix149_382"
" spec150_383)"
"(let-values(((s_385)"
"(cdr"
" s_380)))"
"(let-values(((s_386)"
"(if(syntax?$1"
" s_385)"
"(syntax-e$1"
" s_385)"
" s_385)))"
"(if(pair?"
" s_386)"
"(let-values(((id:prefix151_387)"
"(let-values(((s_389)"
"(car"
" s_386)))"
"(if(let-values(((or-part_390)"
"(if(syntax?$1"
" s_389)"
"(symbol?"
"(syntax-e$1"
" s_389))"
" #f)))"
"(if or-part_390"
" or-part_390"
"(symbol?"
" s_389)))"
" s_389"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_376"
" s_389))))"
"((spec152_388)"
"(let-values(((s_391)"
"(cdr"
" s_386)))"
"(let-values(((s_392)"
"(if(syntax?$1"
" s_391)"
"(syntax-e$1"
" s_391)"
" s_391)))"
"(if(pair?"
" s_392)"
"(let-values(((spec153_393)"
"(let-values(((s_394)"
"(car"
" s_392)))"
" s_394))"
"(()"
"(let-values(((s_395)"
"(cdr"
" s_392)))"
"(let-values(((s_396)"
"(if(syntax?$1"
" s_395)"
"(syntax-e$1"
" s_395)"
" s_395)))"
"(if(null?"
" s_396)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_376))))))"
"(values"
" spec153_393))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_376))))))"
"(values"
" id:prefix151_387"
" spec152_388))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_376))))))"
"(values"
" prefix148_381"
" id:prefix149_382"
" spec150_383))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_376)))))"
"(values"
" #t"
" prefix145_377"
" id:prefix146_378"
" spec147_379))))))"
"(loop_137"
"(list"
" spec147_362)"
"(let-values(((or-part_397)"
" top-req_139))"
"(if or-part_397"
" or-part_397"
" req_150))"
" phase-shift_140"
" just-meta_141"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix146_361))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_165"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_398"
" all-except154_399"
" spec155_400"
" id156_401)"
"(let-values(((s_414)"
" req_150))"
"(let-values(((orig-s_415)"
" s_414))"
"(let-values(((all-except154_416"
" spec155_417"
" id156_418)"
"(let-values(((s_419)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(if(pair?"
" s_419)"
"(let-values(((all-except157_420)"
"(let-values(((s_423)"
"(car"
" s_419)))"
" s_423))"
"((spec158_421"
" id159_422)"
"(let-values(((s_424)"
"(cdr"
" s_419)))"
"(let-values(((s_425)"
"(if(syntax?$1"
" s_424)"
"(syntax-e$1"
" s_424)"
" s_424)))"
"(if(pair?"
" s_425)"
"(let-values(((spec160_426)"
"(let-values(((s_428)"
"(car"
" s_425)))"
" s_428))"
"((id161_427)"
"(let-values(((s_429)"
"(cdr"
" s_425)))"
"(let-values(((s_430)"
"(if(syntax?$1"
" s_429)"
"(syntax-e$1"
" s_429)"
" s_429)))"
"(let-values(((flat-s_431)"
"(to-syntax-list.1"
" s_430)))"
"(if(not"
" flat-s_431)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_415))"
"(let-values()"
"(let-values(((id_432)"
"(let-values(((lst_433)"
" flat-s_431))"
"(begin"
"(if(list?"
" lst_433)"
"(void)"
"(let-values()"
"(in-list"
" lst_433)))"
"((letrec-values(((for-loop_434)"
"(lambda(id_435"
" lst_436)"
"(if(pair?"
" lst_436)"
"(let-values(((s_437)"
"(unsafe-car"
" lst_436)))"
"(let-values(((id_438)"
"(let-values(((id_439)"
" id_435))"
"(let-values(((id_440)"
"(let-values()"
"(let-values(((id162_441)"
"(let-values()"
"(if(let-values(((or-part_442)"
"(if(syntax?$1"
" s_437)"
"(symbol?"
"(syntax-e$1"
" s_437))"
" #f)))"
"(if or-part_442"
" or-part_442"
"(symbol?"
" s_437)))"
" s_437"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_415"
" s_437)))))"
"(cons"
" id162_441"
" id_439)))))"
"(values"
" id_440)))))"
"(for-loop_434"
" id_438"
"(unsafe-cdr"
" lst_436))))"
" id_435))))"
" for-loop_434)"
" null"
" lst_433)))))"
"(alt-reverse"
" id_432)))))))))"
"(values"
" spec160_426"
" id161_427))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_415))))))"
"(values"
" all-except157_420"
" spec158_421"
" id159_422))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_415)))))"
"(values"
" #t"
" all-except154_416"
" spec155_417"
" id156_418))))))"
"(loop_137"
"(list"
" spec155_400)"
"(let-values(((or-part_443)"
" top-req_139))"
"(if or-part_443"
" or-part_443"
" req_150))"
" phase-shift_140"
" just-meta_141"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id156_401))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_165"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_444"
" prefix-all-except163_445"
" id:prefix164_446"
" spec165_447"
" id166_448)"
"(let-values(((s_463)"
" req_150))"
"(let-values(((orig-s_464)"
" s_463))"
"(let-values(((prefix-all-except163_465"
" id:prefix164_466"
" spec165_467"
" id166_468)"
"(let-values(((s_469)"
"(if(syntax?$1"
" s_463)"
"(syntax-e$1"
" s_463)"
" s_463)))"
"(if(pair?"
" s_469)"
"(let-values(((prefix-all-except167_470)"
"(let-values(((s_474)"
"(car"
" s_469)))"
" s_474))"
"((id:prefix168_471"
" spec169_472"
" id170_473)"
"(let-values(((s_475)"
"(cdr"
" s_469)))"
"(let-values(((s_476)"
"(if(syntax?$1"
" s_475)"
"(syntax-e$1"
" s_475)"
" s_475)))"
"(if(pair?"
" s_476)"
"(let-values(((id:prefix171_477)"
"(let-values(((s_480)"
"(car"
" s_476)))"
"(if(let-values(((or-part_481)"
"(if(syntax?$1"
" s_480)"
"(symbol?"
"(syntax-e$1"
" s_480))"
" #f)))"
"(if or-part_481"
" or-part_481"
"(symbol?"
" s_480)))"
" s_480"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_464"
" s_480))))"
"((spec172_478"
" id173_479)"
"(let-values(((s_482)"
"(cdr"
" s_476)))"
"(let-values(((s_483)"
"(if(syntax?$1"
" s_482)"
"(syntax-e$1"
" s_482)"
" s_482)))"
"(if(pair?"
" s_483)"
"(let-values(((spec174_484)"
"(let-values(((s_486)"
"(car"
" s_483)))"
" s_486))"
"((id175_485)"
"(let-values(((s_487)"
"(cdr"
" s_483)))"
"(let-values(((s_488)"
"(if(syntax?$1"
" s_487)"
"(syntax-e$1"
" s_487)"
" s_487)))"
"(let-values(((flat-s_489)"
"(to-syntax-list.1"
" s_488)))"
"(if(not"
" flat-s_489)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_464))"
"(let-values()"
"(let-values(((id_490)"
"(let-values(((lst_491)"
" flat-s_489))"
"(begin"
"(if(list?"
" lst_491)"
"(void)"
"(let-values()"
"(in-list"
" lst_491)))"
"((letrec-values(((for-loop_492)"
"(lambda(id_493"
" lst_494)"
"(if(pair?"
" lst_494)"
"(let-values(((s_495)"
"(unsafe-car"
" lst_494)))"
"(let-values(((id_496)"
"(let-values(((id_497)"
" id_493))"
"(let-values(((id_498)"
"(let-values()"
"(let-values(((id176_499)"
"(let-values()"
"(if(let-values(((or-part_500)"
"(if(syntax?$1"
" s_495)"
"(symbol?"
"(syntax-e$1"
" s_495))"
" #f)))"
"(if or-part_500"
" or-part_500"
"(symbol?"
" s_495)))"
" s_495"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_464"
" s_495)))))"
"(cons"
" id176_499"
" id_497)))))"
"(values"
" id_498)))))"
"(for-loop_492"
" id_496"
"(unsafe-cdr"
" lst_494))))"
" id_493))))"
" for-loop_492)"
" null"
" lst_491)))))"
"(alt-reverse"
" id_490)))))))))"
"(values"
" spec174_484"
" id175_485))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_464))))))"
"(values"
" id:prefix171_477"
" spec172_478"
" id173_479))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_464))))))"
"(values"
" prefix-all-except167_470"
" id:prefix168_471"
" spec169_472"
" id170_473))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_464)))))"
"(values"
" #t"
" prefix-all-except163_465"
" id:prefix164_466"
" spec165_467"
" id166_468))))))"
"(loop_137"
"(list"
" spec165_447)"
"(let-values(((or-part_501)"
" top-req_139))"
"(if or-part_501"
" or-part_501"
" req_150))"
" phase-shift_140"
" just-meta_141"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix164_446)"
"(ids->sym-set"
" id166_448))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_165"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_154"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_502"
" rename177_503"
" spec178_504"
" id:to179_505"
" id:from180_506)"
"(let-values(((s_521)"
" req_150))"
"(let-values(((orig-s_522)"
" s_521))"
"(let-values(((rename177_523"
" spec178_524"
" id:to179_525"
" id:from180_526)"
"(let-values(((s_527)"
"(if(syntax?$1"
" s_521)"
"(syntax-e$1"
" s_521)"
" s_521)))"
"(if(pair?"
" s_527)"
"(let-values(((rename181_528)"
"(let-values(((s_532)"
"(car"
" s_527)))"
" s_532))"
"((spec182_529"
" id:to183_530"
" id:from184_531)"
"(let-values(((s_533)"
"(cdr"
" s_527)))"
"(let-values(((s_534)"
"(if(syntax?$1"
" s_533)"
"(syntax-e$1"
" s_533)"
" s_533)))"
"(if(pair?"
" s_534)"
"(let-values(((spec185_535)"
"(let-values(((s_538)"
"(car"
" s_534)))"
" s_538))"
"((id:to186_536"
" id:from187_537)"
"(let-values(((s_539)"
"(cdr"
" s_534)))"
"(let-values(((s_540)"
"(if(syntax?$1"
" s_539)"
"(syntax-e$1"
" s_539)"
" s_539)))"
"(if(pair?"
" s_540)"
"(let-values(((id:to188_541)"
"(let-values(((s_543)"
"(car"
" s_540)))"
"(if(let-values(((or-part_544)"
"(if(syntax?$1"
" s_543)"
"(symbol?"
"(syntax-e$1"
" s_543))"
" #f)))"
"(if or-part_544"
" or-part_544"
"(symbol?"
" s_543)))"
" s_543"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_522"
" s_543))))"
"((id:from189_542)"
"(let-values(((s_545)"
"(cdr"
" s_540)))"
"(let-values(((s_546)"
"(if(syntax?$1"
" s_545)"
"(syntax-e$1"
" s_545)"
" s_545)))"
"(if(pair?"
" s_546)"
"(let-values(((id:from190_547)"
"(let-values(((s_548)"
"(car"
" s_546)))"
"(if(let-values(((or-part_549)"
"(if(syntax?$1"
" s_548)"
"(symbol?"
"(syntax-e$1"
" s_548))"
" #f)))"
"(if or-part_549"
" or-part_549"
"(symbol?"
" s_548)))"
" s_548"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_522"
" s_548))))"
"(()"
"(let-values(((s_550)"
"(cdr"
" s_546)))"
"(let-values(((s_551)"
"(if(syntax?$1"
" s_550)"
"(syntax-e$1"
" s_550)"
" s_550)))"
"(if(null?"
" s_551)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_522))))))"
"(values"
" id:from190_547))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_522))))))"
"(values"
" id:to188_541"
" id:from189_542))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_522))))))"
"(values"
" spec185_535"
" id:to186_536"
" id:from187_537))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_522))))))"
"(values"
" rename181_528"
" spec182_529"
" id:to183_530"
" id:from184_531))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_522)))))"
"(values"
" #t"
" rename177_523"
" spec178_524"
" id:to179_525"
" id:from180_526))))))"
"(loop_137"
"(list"
" spec178_504)"
"(let-values(((or-part_552)"
" top-req_139))"
"(if or-part_552"
" or-part_552"
" req_150))"
" phase-shift_140"
" just-meta_141"
"(adjust-rename4.1"
" id:to179_505"
"(syntax-e$1"
" id:from180_506))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_553)"
"(syntax->datum$1"
" req_150)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_556)"
"(1/module-path?"
" maybe-mp_553)))"
"(if or-part_556"
" or-part_556"
"(1/resolved-module-path?"
" maybe-mp_553)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad require spec\""
" orig-s_124"
" req_150)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_557)"
" adjust_142))"
"(if or-part_557"
" or-part_557"
"(not"
"(eq?"
" just-meta_141"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_127"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_554)"
"(if(1/resolved-module-path?"
" maybe-mp_553)"
"(resolved-module-path->module-path"
" maybe-mp_553)"
" maybe-mp_553)))"
"(let-values(((mpi_555)"
"(let-values(((...r/expand/require.rkt:166:21_558)"
" module-path->mpi7.1)"
"((mp207_559)"
" mp_554)"
"((self208_560)"
" self_128)"
"((declared-submodule-names209_561)"
" declared-submodule-names_132))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path->mpi7.1))"
"(module-path->mpi5.1"
" declared-submodule-names209_561"
" #t"
" mp207_559"
" self208_560)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:166:21_558"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 4)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names209_561)"
" mp207_559"
" self208_560)))))"
"(let-values(((...r/expand/require.rkt:168:9_562)"
" perform-require!74.1)"
"((mpi191_563)"
" mpi_555)"
"((req192_564)"
" req_150)"
"((self193_565)"
" self_128)"
"((temp194_566)"
"(let-values(((or-part_579)"
" req_150))"
"(if or-part_579"
" or-part_579"
" top-req_139)))"
"((m-ns195_567)"
" m-ns_125)"
"((phase-shift196_568)"
" phase-shift_140)"
"((run-phase197_569)"
" run-phase_129)"
"((just-meta198_570)"
" just-meta_141)"
"((adjust199_571)"
" adjust_142)"
"((requires+provides200_572)"
" requires+provides_127)"
"((run?201_573)"
" run?_130)"
"((visit?202_574)"
" visit?_131)"
"((copy-variable-phase-level203_575)"
" copy-variable-phase-level_133)"
"((copy-variable-as-constant?204_576)"
" copy-variable-as-constant?_134)"
"((skip-variable-phase-level205_577)"
" skip-variable-phase-level_135)"
"((who206_578)"
" who_136))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!74.1))"
"(perform-require!72.1"
" adjust199_571"
" #t"
" #f"
" #f"
" copy-variable-as-constant?204_576"
" #t"
" copy-variable-phase-level203_575"
" #t"
" #f"
" #f"
" just-meta198_570"
" #t"
" phase-shift196_568"
" requires+provides200_572"
" #t"
" run-phase197_569"
" run?201_573"
" #t"
" skip-variable-phase-level205_577"
" #t"
" visit?202_574"
" #t"
" who206_578"
" mpi191_563"
" req192_564"
" self193_565"
" temp194_566"
" m-ns195_567)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:168:9_562"
" keyword-procedure-extract"
" '(#:adjust"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)"
" 7)"
" '(#:adjust"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)"
"(list"
" adjust199_571"
" copy-variable-as-constant?204_576"
" copy-variable-phase-level203_575"
" just-meta198_570"
" phase-shift196_568"
" requires+provides200_572"
" run-phase197_569"
" run?201_573"
" skip-variable-phase-level205_577"
" visit?202_574"
" who206_578)"
" mpi191_563"
" req192_564"
" self193_565"
" temp194_566"
" m-ns195_567))))))))))))))))))))))))))"
"(values"
" result_153)))))"
"(if(not"
"((lambda x_580"
"(not result_151))"
" req_150))"
"(for-loop_147"
" result_151"
"(unsafe-cdr lst_149))"
" result_151)))"
" result_148))))"
" for-loop_147)"
" #t"
" lst_146))))))"
" loop_137)"
" reqs_123"
" #f"
" phase-shift_126"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))))))"
"(define-values"
"(unpack29.1$1)"
"(lambda(given-kws_581 given-args_582 reqs23_583 orig-s24_584 m-ns25_585 phase-shift26_586 requires+provides27_587)"
"(let-values(((copy-variable-as-constant?20_588)"
"(if(pair? given-kws_581)(eq? '#:copy-variable-as-constant?(car given-kws_581)) #f)))"
"(let-values(((copy-variable-as-constant?11_589)"
"(if copy-variable-as-constant?20_588(car given-args_582)(void)))"
"((given-kws_590)(if copy-variable-as-constant?20_588(cdr given-kws_581) given-kws_581))"
"((given-args_591)(if copy-variable-as-constant?20_588(cdr given-args_582) given-args_582)))"
"(let-values(((copy-variable-phase-level19_592)"
"(if(pair? given-kws_590)(eq? '#:copy-variable-phase-level(car given-kws_590)) #f)))"
"(let-values(((copy-variable-phase-level10_593)"
"(if copy-variable-phase-level19_592(car given-args_591)(void)))"
"((given-kws_594)(if copy-variable-phase-level19_592(cdr given-kws_590) given-kws_590))"
"((given-args_595)(if copy-variable-phase-level19_592(cdr given-args_591) given-args_591)))"
"(let-values(((declared-submodule-names18_596)"
"(if(pair? given-kws_594)(eq? '#:declared-submodule-names(car given-kws_594)) #f)))"
"(let-values(((declared-submodule-names9_597)"
"(if declared-submodule-names18_596(car given-args_595)(void)))"
"((given-kws_598)(if declared-submodule-names18_596(cdr given-kws_594) given-kws_594))"
"((given-args_599)(if declared-submodule-names18_596(cdr given-args_595) given-args_595)))"
"(let-values(((run-phase15_600)(if(pair? given-kws_598)(eq? '#:run-phase(car given-kws_598)) #f)))"
"(let-values(((run-phase6_601)(if run-phase15_600(car given-args_599)(void)))"
"((given-kws_602)(if run-phase15_600(cdr given-kws_598) given-kws_598))"
"((given-args_603)(if run-phase15_600(cdr given-args_599) given-args_599)))"
"(let-values(((run?16_604)(if(pair? given-kws_602)(eq? '#:run?(car given-kws_602)) #f)))"
"(let-values(((run?7_605)(if run?16_604(car given-args_603)(void)))"
"((given-kws_606)(if run?16_604(cdr given-kws_602) given-kws_602))"
"((given-args_607)(if run?16_604(cdr given-args_603) given-args_603)))"
"(let-values(((self14_608)(if(pair? given-kws_606)(eq? '#:self(car given-kws_606)) #f)))"
"(let-values(((self5_609)(if self14_608(car given-args_607)(void)))"
"((given-kws_610)(if self14_608(cdr given-kws_606) given-kws_606))"
"((given-args_611)(if self14_608(cdr given-args_607) given-args_607)))"
"(let-values(((skip-variable-phase-level21_612)"
"(if(pair? given-kws_610)"
"(eq? '#:skip-variable-phase-level(car given-kws_610))"
" #f)))"
"(let-values(((skip-variable-phase-level12_613)"
"(if skip-variable-phase-level21_612(car given-args_611)(void)))"
"((given-kws_614)"
"(if skip-variable-phase-level21_612(cdr given-kws_610) given-kws_610))"
"((given-args_615)"
"(if skip-variable-phase-level21_612(cdr given-args_611) given-args_611)))"
"(let-values(((visit?17_616)"
"(if(pair? given-kws_614)(eq? '#:visit?(car given-kws_614)) #f)))"
"(let-values(((visit?8_617)(if visit?17_616(car given-args_615)(void)))"
"((given-kws_618)(if visit?17_616(cdr given-kws_614) given-kws_614))"
"((given-args_619)(if visit?17_616(cdr given-args_615) given-args_615)))"
"(let-values(((who13_620)(car given-args_619)))"
"(parse-and-perform-requires!28.1"
" copy-variable-as-constant?11_589"
" copy-variable-as-constant?20_588"
" copy-variable-phase-level10_593"
" copy-variable-phase-level19_592"
" declared-submodule-names9_597"
" declared-submodule-names18_596"
" run-phase6_601"
" run-phase15_600"
" run?7_605"
" run?16_604"
" self5_609"
" self14_608"
" skip-variable-phase-level12_613"
" skip-variable-phase-level21_612"
" visit?8_617"
" visit?17_616"
" who13_620"
" reqs23_583"
" orig-s24_584"
" m-ns25_585"
" phase-shift26_586"
" requires+provides27_587))))))))))))))))))))"
"(define-values"
"(parse-and-perform-requires!30.1)"
"(lifted/1.1$13"
"(lambda(given-kws_621 given-argc_622)"
"(if(= given-argc_622 7)"
"(subsets?"
" '(#:who)"
" given-kws_621"
" '(#:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:declared-submodule-names"
" #:run-phase"
" #:run?"
" #:self"
" #:skip-variable-phase-level"
" #:visit?"
" #:who))"
" #f))"
"(case-lambda"
"((given-kws_623 given-args_624 reqs_625 orig-s_626 m-ns_627 phase-shift_628 requires+provides_629)"
"(unpack29.1$1 given-kws_623 given-args_624 reqs_625 orig-s_626 m-ns_627 phase-shift_628 requires+provides_629)))"
" '(#:who)"
" '(#:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:declared-submodule-names"
" #:run-phase"
" #:run?"
" #:self"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_630)"
"(let-values(((lst_631) ids_630))"
"(begin"
"(if(list? lst_631)(void)(let-values()(in-list lst_631)))"
"((letrec-values(((for-loop_632)"
"(lambda(table_633 lst_634)"
"(if(pair? lst_634)"
"(let-values(((id_635)(unsafe-car lst_634)))"
"(let-values(((table_636)"
"(let-values(((table_637) table_633))"
"(let-values(((table_638)"
"(let-values()"
"(let-values(((key_639 val_640)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_635))"
" #t))))"
"(hash-set table_637 key_639 val_640)))))"
"(values table_638)))))"
"(for-loop_632 table_636(unsafe-cdr lst_634))))"
" table_633))))"
" for-loop_632)"
" '#hash()"
" lst_631)))))"
"(define-values"
"(lifted/2.1$6)"
"(make-required"
" 'perform-initial-require!"
"(case-lambda"
"((self_641 mod-path_642 self_643 in-stx_644 m-ns_645 requires+provides_646)"
"(apply missing-kw self_641 mod-path_642 self_643 in-stx_644 m-ns_645 requires+provides_646 null)))"
" #f"
" #f))"
"(define-values"
"(perform-initial-require!38.1)"
"(lambda(who31_647 mod-path33_648 self34_649 in-stx35_650 m-ns36_651 requires+provides37_652)"
"(let-values(((mod-path_653) mod-path33_648))"
"(let-values(((self_654) self34_649))"
"(let-values(((in-stx_655) in-stx35_650))"
"(let-values(((m-ns_656) m-ns36_651))"
"(let-values(((requires+provides_657) requires+provides37_652))"
"(let-values(((who_658) who31_647))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:192:2_659) perform-require!74.1)"
"((temp210_660)"
"(let-values(((mod-path221_671) mod-path_653)((self222_672) self_654))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi7.1))"
"(module-path->mpi5.1 #f #f mod-path221_671 self222_672)"
"(module-path->mpi7.1 mod-path221_671 self222_672))))"
"((temp211_661) #f)"
"((self212_662) self_654)"
"((in-stx213_663) in-stx_655)"
"((m-ns214_664) m-ns_656)"
"((temp215_665) 0)"
"((temp216_666) 0)"
"((requires+provides217_667) requires+provides_657)"
"((temp218_668) #t)"
"((temp219_669) #t)"
"((who220_670) who_658))"
"(if(variable-reference-constant?(#%variable-reference perform-require!74.1))"
"(perform-require!72.1"
" #f"
" #f"
" temp218_668"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp219_669"
" #t"
" #f"
" #f"
" temp215_665"
" requires+provides217_667"
" #t"
" temp216_666"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" who220_670"
" temp210_660"
" temp211_661"
" self212_662"
" in-stx213_663"
" m-ns214_664)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:192:2_659"
" keyword-procedure-extract"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase #:who)"
" 7)"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase #:who)"
"(list temp218_668 temp219_669 temp215_665 requires+provides217_667 temp216_666 who220_670)"
" temp210_660"
" temp211_661"
" self212_662"
" in-stx213_663"
" m-ns214_664))))))))))))"
"(define-values"
"(unpack39.1)"
"(lambda(given-kws_673 given-args_674 mod-path33_675 self34_676 in-stx35_677 m-ns36_678 requires+provides37_679)"
"(let-values(((who31_680)(car given-args_674)))"
"(perform-initial-require!38.1"
" who31_680"
" mod-path33_675"
" self34_676"
" in-stx35_677"
" m-ns36_678"
" requires+provides37_679))))"
"(define-values"
"(perform-initial-require!40.1)"
"(lifted/2.1$6"
"(lambda(given-kws_681 given-argc_682)"
"(if(= given-argc_682 7)"
"(let-values(((l2_683) given-kws_681))"
"(if(pair? l2_683)(if(eq?(car l2_683) '#:who)(null?(cdr l2_683)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_684 given-args_685 mod-path_686 self_687 in-stx_688 m-ns_689 requires+provides_690)"
"(unpack39.1 given-kws_684 given-args_685 mod-path_686 self_687 in-stx_688 m-ns_689 requires+provides_690)))"
" '(#:who)"
" '(#:who)))"
"(define-values"
"(lifted/3.1$3)"
"(make-required"
" 'perform-require!"
"(case-lambda"
"((self_691 mpi_692 orig-s_693 self_694 in-stx_695 m-ns_696)"
"(apply missing-kw self_691 mpi_692 orig-s_693 self_694 in-stx_695 m-ns_696 null)))"
" #f"
" #f))"
"(define-values"
"(perform-require!72.1)"
"(lambda(adjust44_697"
" adjust57_698"
" can-be-shadowed?48_699"
" can-be-shadowed?61_700"
" copy-variable-as-constant?51_701"
" copy-variable-as-constant?64_702"
" copy-variable-phase-level50_703"
" copy-variable-phase-level63_704"
" initial-require?49_705"
" initial-require?62_706"
" just-meta43_707"
" just-meta56_708"
" phase-shift41_709"
" requires+provides45_710"
" requires+provides58_711"
" run-phase42_712"
" run?47_713"
" run?60_714"
" skip-variable-phase-level52_715"
" skip-variable-phase-level65_716"
" visit?46_717"
" visit?59_718"
" who53_719"
" mpi67_720"
" orig-s68_721"
" self69_722"
" in-stx70_723"
" m-ns71_724)"
"(let-values(((mpi_725) mpi67_720))"
"(let-values(((orig-s_726) orig-s68_721))"
"(let-values(((self_727) self69_722))"
"(let-values(((in-stx_728) in-stx70_723))"
"(let-values(((m-ns_729) m-ns71_724))"
"(let-values(((phase-shift_730) phase-shift41_709))"
"(let-values(((run-phase_731) run-phase42_712))"
"(let-values(((just-meta_732)(if just-meta56_708 just-meta43_707 'all)))"
"(let-values(((adjust_733)(if adjust57_698 adjust44_697 #f)))"
"(let-values(((requires+provides_734)(if requires+provides58_711 requires+provides45_710 #f)))"
"(let-values(((visit?_735)(if visit?59_718 visit?46_717 #t)))"
"(let-values(((run?_736)(if run?60_714 run?47_713 #f)))"
"(let-values(((can-be-shadowed?_737)(if can-be-shadowed?61_700 can-be-shadowed?48_699 #f)))"
"(let-values(((initial-require?_738)"
"(if initial-require?62_706 initial-require?49_705 #f)))"
"(let-values(((copy-variable-phase-level_739)"
"(if copy-variable-phase-level63_704 copy-variable-phase-level50_703 #f)))"
"(let-values(((copy-variable-as-constant?_740)"
"(if copy-variable-as-constant?64_702"
" copy-variable-as-constant?51_701"
" #f)))"
"(let-values(((skip-variable-phase-level_741)"
"(if skip-variable-phase-level65_716"
" skip-variable-phase-level52_715"
" #f)))"
"(let-values(((who_742) who53_719))"
"(let-values()"
"(let-values()"
"(let-values(((module-name_743)(1/module-path-index-resolve mpi_725 #t)))"
"(let-values(((bind-in-stx_744)"
"(if(adjust-rename? adjust_733)"
"(adjust-rename-to-id adjust_733)"
" in-stx_728)))"
"(let-values(((done-syms_745)(if adjust_733(make-hash) #f)))"
"(let-values(((m_746)(namespace->module m-ns_729 module-name_743)))"
"(let-values((()"
"(begin"
"(if m_746"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_743)))"
"(values))))"
"(let-values(((interned-mpi_747)"
"(if requires+provides_734"
"(add-required-module!"
" requires+provides_734"
" mpi_725"
" phase-shift_730"
"(module-cross-phase-persistent? m_746))"
" mpi_725)))"
"(let-values((()"
"(begin"
"(if visit?_735"
"(let-values()"
"(let-values(((...r/expand/require.rkt:234:5_753)"
" namespace-module-visit!104.1)"
"((m-ns236_754) m-ns_729)"
"((interned-mpi237_755)"
" interned-mpi_747)"
"((phase-shift238_756)"
" phase-shift_730)"
"((run-phase239_757)"
" run-phase_731))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!104.1))"
"(namespace-module-visit!102.1"
" run-phase239_757"
" #t"
" m-ns236_754"
" interned-mpi237_755"
" phase-shift238_756)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:234:5_753"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase239_757)"
" m-ns236_754"
" interned-mpi237_755"
" phase-shift238_756))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_736"
"(let-values()"
"(let-values(((...r/expand/require.rkt:236:5_758)"
" namespace-module-instantiate!96.1)"
"((m-ns240_759) m-ns_729)"
"((interned-mpi241_760)"
" interned-mpi_747)"
"((phase-shift242_761)"
" phase-shift_730)"
"((run-phase243_762)"
" run-phase_731))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" run-phase243_762"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns240_759"
" interned-mpi241_760"
" phase-shift242_761)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:236:5_758"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list run-phase243_762)"
" m-ns240_759"
" interned-mpi241_760"
" phase-shift242_761))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_763)"
" visit?_735))"
"(if or-part_763"
" or-part_763"
" run?_736)))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:239:5_764)"
" namespace-module-make-available!112.1)"
"((m-ns244_765) m-ns_729)"
"((interned-mpi245_766)"
" interned-mpi_747)"
"((phase-shift246_767)"
" phase-shift_730)"
"((run-phase247_768)"
" run-phase_731))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-make-available!112.1))"
"(namespace-module-make-available!110.1"
" run-phase247_768"
" #t"
" m-ns244_765"
" interned-mpi245_766"
" phase-shift246_767)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:239:5_764"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase247_768)"
" m-ns244_765"
" interned-mpi245_766"
" phase-shift246_767))))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_748)"
"(if(let-values(((or-part_769)"
"(not adjust_733)))"
"(if or-part_769"
" or-part_769"
"(let-values(((or-part_770)"
"(adjust-prefix?"
" adjust_733)))"
"(if or-part_770"
" or-part_770"
"(adjust-all-except?"
" adjust_733)))))"
"(not skip-variable-phase-level_741)"
" #f)))"
"(let-values(((bulk-prefix_749)"
"(if(adjust-prefix? adjust_733)"
"(let-values()"
"(adjust-prefix-sym adjust_733))"
"(if(adjust-all-except? adjust_733)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_733))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_750)"
"(if(adjust-all-except? adjust_733)"
"(let-values()"
"(adjust-all-except-syms adjust_733))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_751)"
"(if can-bulk-bind?_748"
"(box null)"
" #f)))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:252:3_771)"
" bind-all-provides!98.1)"
"((m223_772) m_746)"
"((bind-in-stx224_773)"
" bind-in-stx_744)"
"((phase-shift225_774)"
" phase-shift_730)"
"((m-ns226_775)"
" m-ns_729)"
"((interned-mpi227_776)"
" interned-mpi_747)"
"((orig-s228_777)"
" orig-s_726)"
"((temp229_778)"
"(if(adjust-only?"
" adjust_733)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_733)))"
"(if(adjust-rename?"
" adjust_733)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_733)))"
"(let-values()"
" #f))))"
"((just-meta230_779)"
" just-meta_732)"
"((can-bulk-bind?231_780)"
" can-bulk-bind?_748)"
"((bulk-prefix232_781)"
" bulk-prefix_749)"
"((bulk-excepts233_782)"
" bulk-excepts_750)"
"((temp234_783)"
"(if requires+provides_734"
"(if can-bulk-bind?_748"
"(lambda(provides_785"
" provide-phase-level_786)"
"(let-values(((...r/expand/require.rkt:268:23_787)"
" add-bulk-required-ids!55.1)"
"((requires+provides248_788)"
" requires+provides_734)"
"((bind-in-stx249_789)"
" bind-in-stx_744)"
"((temp250_790)"
"(module-self"
" m_746))"
"((mpi251_791)"
" mpi_725)"
"((phase-shift252_792)"
" phase-shift_730)"
"((provides253_793)"
" provides_785)"
"((provide-phase-level254_794)"
" provide-phase-level_786)"
"((bulk-prefix255_795)"
" bulk-prefix_749)"
"((bulk-excepts256_796)"
" bulk-excepts_750)"
"((temp257_797)"
"(if(positive?"
"(hash-count"
" bulk-excepts_750))"
" done-syms_745"
" #f))"
"((can-be-shadowed?258_798)"
" can-be-shadowed?_737)"
"((temp259_799)"
"(not"
" initial-require?_738))"
"((orig-s260_800)"
" orig-s_726)"
"((update-nominals-box261_801)"
" update-nominals-box_751)"
"((who262_802)"
" who_742))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-bulk-required-ids!55.1))"
"(add-bulk-required-ids!53.1"
" update-nominals-box261_801"
" can-be-shadowed?258_798"
" temp259_799"
" bulk-excepts256_796"
" orig-s260_800"
" bulk-prefix255_795"
" temp257_797"
" who262_802"
" requires+provides248_788"
" bind-in-stx249_789"
" temp250_790"
" mpi251_791"
" phase-shift252_792"
" provides253_793"
" provide-phase-level254_794)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:268:23_787"
" keyword-procedure-extract"
" '(#:accum-update-nominals"
" #:can-be-shadowed?"
" #:check-and-remove?"
" #:excepts"
" #:in"
" #:prefix"
" #:symbols-accum"
" #:who)"
" 9)"
" '(#:accum-update-nominals"
" #:can-be-shadowed?"
" #:check-and-remove?"
" #:excepts"
" #:in"
" #:prefix"
" #:symbols-accum"
" #:who)"
"(list"
" update-nominals-box261_801"
" can-be-shadowed?258_798"
" temp259_799"
" bulk-excepts256_796"
" orig-s260_800"
" bulk-prefix255_795"
" temp257_797"
" who262_802)"
" requires+provides248_788"
" bind-in-stx249_789"
" temp250_790"
" mpi251_791"
" phase-shift252_792"
" provides253_793"
" provide-phase-level254_794))))"
" #f)"
" #f))"
"((temp235_784)"
"(if(let-values(((or-part_803)"
"(not"
" can-bulk-bind?_748)))"
"(if or-part_803"
" or-part_803"
" copy-variable-phase-level_739))"
"(lambda(binding_804"
" as-transformer?_805)"
"(let-values(((sym_806)"
"(module-binding-nominal-sym"
" binding_804)))"
"(let-values(((provide-phase_807)"
"(module-binding-nominal-phase"
" binding_804)))"
"(let-values(((adjusted-sym_808)"
"(if(if skip-variable-phase-level_741"
"(if(not"
" as-transformer?_805)"
"(equal?"
" provide-phase_807"
" skip-variable-phase-level_741)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_733)"
"(let-values()"
" sym_806)"
"(if(adjust-only?"
" adjust_733)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_733)"
" sym_806)"
"(if(hash-set!"
" done-syms_745"
" sym_806"
" #t)"
" sym_806"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_733)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                      \"~a~a\""
"(adjust-prefix-sym"
" adjust_733)"
" sym_806)))"
"(if(adjust-all-except?"
" adjust_733)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_733)"
" sym_806)"
"(hash-set!"
" done-syms_745"
" sym_806"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                          \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_733)"
" sym_806))"
" #f))"
"(if(adjust-rename?"
" adjust_733)"
"(let-values()"
"(if(eq?"
" sym_806"
"(adjust-rename-from-sym"
" adjust_733))"
"(if(hash-set!"
" done-syms_745"
" sym_806"
" #t)"
"(adjust-rename-to-id"
" adjust_733)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_808"
" requires+provides_734"
" #f)"
"(let-values()"
"(let-values(((s_809)"
"(datum->syntax$1"
" bind-in-stx_744"
" adjusted-sym_808)))"
"(let-values(((bind-phase_810)"
"(phase+"
" phase-shift_730"
" provide-phase_807)))"
"(begin"
"(if initial-require?_738"
"(void)"
"(let-values()"
"(let-values(((...r/expand/require.rkt:315:20_811)"
" check-not-defined89.1)"
"((temp269_812)"
" #t)"
"((requires+provides270_813)"
" requires+provides_734)"
"((s271_814)"
" s_809)"
"((bind-phase272_815)"
" bind-phase_810)"
"((binding273_816)"
" binding_804)"
"((orig-s274_817)"
" orig-s_726)"
"((temp275_818)"
" #t)"
"((who276_819)"
" who_742))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined89.1))"
"(check-not-defined87.1"
" #f"
" #f"
" temp269_812"
" #t"
" orig-s274_817"
" temp275_818"
" #t"
" binding273_816"
" #t"
" who276_819"
" requires+provides270_813"
" s271_814"
" bind-phase272_815)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:315:20_811"
" keyword-procedure-extract"
" '(#:check-not-required?"
" #:in"
" #:remove-shadowed!?"
" #:unless-matches"
" #:who)"
" 5)"
" '(#:check-not-required?"
" #:in"
" #:remove-shadowed!?"
" #:unless-matches"
" #:who)"
"(list"
" temp269_812"
" orig-s274_817"
" temp275_818"
" binding273_816"
" who276_819)"
" requires+provides270_813"
" s271_814"
" bind-phase272_815)))))"
"(let-values(((...r/expand/require.rkt:322:18_820)"
" add-defined-or-required-id!15.1)"
"((requires+provides263_821)"
" requires+provides_734)"
"((s264_822)"
" s_809)"
"((bind-phase265_823)"
" bind-phase_810)"
"((binding266_824)"
" binding_804)"
"((can-be-shadowed?267_825)"
" can-be-shadowed?_737)"
"((as-transformer?268_826)"
" as-transformer?_805))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!15.1))"
"(add-defined-or-required-id!13.1"
" as-transformer?268_826"
" can-be-shadowed?267_825"
" #t"
" requires+provides263_821"
" s264_822"
" bind-phase265_823"
" binding266_824)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:322:18_820"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
" 6)"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
"(list"
" as-transformer?268_826"
" can-be-shadowed?267_825)"
" requires+provides263_821"
" s264_822"
" bind-phase265_823"
" binding266_824)))))))"
"(void))"
"(if(if adjusted-sym_808"
"(if copy-variable-phase-level_739"
"(if(not"
" as-transformer?_805)"
"(equal?"
" provide-phase_807"
" copy-variable-phase-level_739)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_729"
" adjusted-sym_808"
" binding_804"
" copy-variable-phase-level_739"
" phase-shift_730"
" copy-variable-as-constant?_740))"
"(void))"
" adjusted-sym_808)))))"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" bind-all-provides!98.1))"
"(bind-all-provides!96.1"
" temp234_783"
" bulk-excepts233_782"
" bulk-prefix232_781"
" can-bulk-bind?231_780"
" temp235_784"
" orig-s228_777"
" just-meta230_779"
" temp229_778"
" m223_772"
" bind-in-stx224_773"
" phase-shift225_774"
" m-ns226_775"
" interned-mpi227_776)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:252:3_771"
" keyword-procedure-extract"
" '(#:bulk-callback"
" #:bulk-excepts"
" #:bulk-prefix"
" #:can-bulk?"
" #:filter"
" #:in"
" #:just-meta"
" #:only)"
" 7)"
" '(#:bulk-callback"
" #:bulk-excepts"
" #:bulk-prefix"
" #:can-bulk?"
" #:filter"
" #:in"
" #:just-meta"
" #:only)"
"(list"
" temp234_783"
" bulk-excepts233_782"
" bulk-prefix232_781"
" can-bulk-bind?231_780"
" temp235_784"
" orig-s228_777"
" just-meta230_779"
" temp229_778)"
" m223_772"
" bind-in-stx224_773"
" phase-shift225_774"
" m-ns226_775"
" interned-mpi227_776)))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_751"
"(let-values()"
"(let-values(((lst_827)"
"(unbox"
" update-nominals-box_751)))"
"(begin"
"(if(list? lst_827)"
"(void)"
"(let-values()"
"(in-list lst_827)))"
"((letrec-values(((for-loop_828)"
"(lambda(fold-var_829"
" lst_830)"
"(if(pair?"
" lst_830)"
"(let-values(((update!_831)"
"(unsafe-car"
" lst_830)))"
"(let-values(((fold-var_832)"
"(let-values(((fold-var_833)"
" fold-var_829))"
"(let-values(((fold-var_834)"
"(let-values()"
"(begin"
"(let-values()"
"(update!_831))"
"(void)))))"
"(values"
" fold-var_834)))))"
"(for-loop_828"
" fold-var_832"
"(unsafe-cdr"
" lst_830))))"
" fold-var_829))))"
" for-loop_828)"
"(void)"
" lst_827))))"
"(void))"
"(values))))"
"(let-values(((need-syms_752)"
"(if(adjust-only? adjust_733)"
"(let-values()"
"(adjust-only-syms"
" adjust_733))"
"(if(adjust-all-except?"
" adjust_733)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_733))"
"(if(adjust-rename?"
" adjust_733)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_733)))"
"(let-values() #f))))))"
"(if(if need-syms_752"
"(not"
"(="
"(set-count need-syms_752)"
"(hash-count done-syms_745)))"
" #f)"
"(let-values()"
"(let-values(((ht_835) need-syms_752))"
"(begin"
"(if((lambda(ht_836)"
"(if(hash? ht_836)"
"(immutable? ht_836)"
" #f))"
" ht_835)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_835)))"
"((letrec-values(((for-loop_837)"
"(lambda(fold-var_838"
" i_839)"
"(if i_839"
"(let-values(((sym_840)"
"(unsafe-immutable-hash-iterate-key"
" ht_835"
" i_839)))"
"(let-values(((fold-var_841)"
"(let-values(((fold-var_842)"
" fold-var_838))"
"(let-values(((fold-var_843)"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_745"
" sym_840"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_742"
"                                                                                                                                                     \"not in nested spec\""
" orig-s_726"
" sym_840))))"
"(void)))))"
"(values"
" fold-var_843)))))"
"(for-loop_837"
" fold-var_841"
"(unsafe-immutable-hash-iterate-next"
" ht_835"
" i_839))))"
" fold-var_838))))"
" for-loop_837)"
"(void)"
"(unsafe-immutable-hash-iterate-first"
" ht_835)))))"
"(void))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack73.1)"
"(lambda(given-kws_844 given-args_845 mpi67_846 orig-s68_847 self69_848 in-stx70_849 m-ns71_850)"
"(let-values(((adjust57_851)(if(pair? given-kws_844)(eq? '#:adjust(car given-kws_844)) #f)))"
"(let-values(((adjust44_852)(if adjust57_851(car given-args_845)(void)))"
"((given-kws_853)(if adjust57_851(cdr given-kws_844) given-kws_844))"
"((given-args_854)(if adjust57_851(cdr given-args_845) given-args_845)))"
"(let-values(((can-be-shadowed?61_855)"
"(if(pair? given-kws_853)(eq? '#:can-be-shadowed?(car given-kws_853)) #f)))"
"(let-values(((can-be-shadowed?48_856)(if can-be-shadowed?61_855(car given-args_854)(void)))"
"((given-kws_857)(if can-be-shadowed?61_855(cdr given-kws_853) given-kws_853))"
"((given-args_858)(if can-be-shadowed?61_855(cdr given-args_854) given-args_854)))"
"(let-values(((copy-variable-as-constant?64_859)"
"(if(pair? given-kws_857)(eq? '#:copy-variable-as-constant?(car given-kws_857)) #f)))"
"(let-values(((copy-variable-as-constant?51_860)"
"(if copy-variable-as-constant?64_859(car given-args_858)(void)))"
"((given-kws_861)(if copy-variable-as-constant?64_859(cdr given-kws_857) given-kws_857))"
"((given-args_862)(if copy-variable-as-constant?64_859(cdr given-args_858) given-args_858)))"
"(let-values(((copy-variable-phase-level63_863)"
"(if(pair? given-kws_861)(eq? '#:copy-variable-phase-level(car given-kws_861)) #f)))"
"(let-values(((copy-variable-phase-level50_864)"
"(if copy-variable-phase-level63_863(car given-args_862)(void)))"
"((given-kws_865)(if copy-variable-phase-level63_863(cdr given-kws_861) given-kws_861))"
"((given-args_866)"
"(if copy-variable-phase-level63_863(cdr given-args_862) given-args_862)))"
"(let-values(((initial-require?62_867)"
"(if(pair? given-kws_865)(eq? '#:initial-require?(car given-kws_865)) #f)))"
"(let-values(((initial-require?49_868)(if initial-require?62_867(car given-args_866)(void)))"
"((given-kws_869)(if initial-require?62_867(cdr given-kws_865) given-kws_865))"
"((given-args_870)(if initial-require?62_867(cdr given-args_866) given-args_866)))"
"(let-values(((just-meta56_871)"
"(if(pair? given-kws_869)(eq? '#:just-meta(car given-kws_869)) #f)))"
"(let-values(((just-meta43_872)(if just-meta56_871(car given-args_870)(void)))"
"((given-kws_873)(if just-meta56_871(cdr given-kws_869) given-kws_869))"
"((given-args_874)(if just-meta56_871(cdr given-args_870) given-args_870)))"
"(let-values(((phase-shift41_875)(car given-args_874))"
"((given-kws_876)(cdr given-kws_873))"
"((given-args_877)(cdr given-args_874)))"
"(let-values(((requires+provides58_878)"
"(if(pair? given-kws_876)"
"(eq? '#:requires+provides(car given-kws_876))"
" #f)))"
"(let-values(((requires+provides45_879)"
"(if requires+provides58_878(car given-args_877)(void)))"
"((given-kws_880)"
"(if requires+provides58_878(cdr given-kws_876) given-kws_876))"
"((given-args_881)"
"(if requires+provides58_878(cdr given-args_877) given-args_877)))"
"(let-values(((run-phase42_882)(car given-args_881))"
"((given-kws_883)(cdr given-kws_880))"
"((given-args_884)(cdr given-args_881)))"
"(let-values(((run?60_885)"
"(if(pair? given-kws_883)(eq? '#:run?(car given-kws_883)) #f)))"
"(let-values(((run?47_886)(if run?60_885(car given-args_884)(void)))"
"((given-kws_887)(if run?60_885(cdr given-kws_883) given-kws_883))"
"((given-args_888)"
"(if run?60_885(cdr given-args_884) given-args_884)))"
"(let-values(((skip-variable-phase-level65_889)"
"(if(pair? given-kws_887)"
"(eq? '#:skip-variable-phase-level(car given-kws_887))"
" #f)))"
"(let-values(((skip-variable-phase-level52_890)"
"(if skip-variable-phase-level65_889"
"(car given-args_888)"
"(void)))"
"((given-kws_891)"
"(if skip-variable-phase-level65_889"
"(cdr given-kws_887)"
" given-kws_887))"
"((given-args_892)"
"(if skip-variable-phase-level65_889"
"(cdr given-args_888)"
" given-args_888)))"
"(let-values(((visit?59_893)"
"(if(pair? given-kws_891)"
"(eq? '#:visit?(car given-kws_891))"
" #f)))"
"(let-values(((visit?46_894)"
"(if visit?59_893(car given-args_892)(void)))"
"((given-kws_895)"
"(if visit?59_893(cdr given-kws_891) given-kws_891))"
"((given-args_896)"
"(if visit?59_893(cdr given-args_892) given-args_892)))"
"(let-values(((who53_897)(car given-args_896)))"
"(perform-require!72.1"
" adjust44_852"
" adjust57_851"
" can-be-shadowed?48_856"
" can-be-shadowed?61_855"
" copy-variable-as-constant?51_860"
" copy-variable-as-constant?64_859"
" copy-variable-phase-level50_864"
" copy-variable-phase-level63_863"
" initial-require?49_868"
" initial-require?62_867"
" just-meta43_872"
" just-meta56_871"
" phase-shift41_875"
" requires+provides45_879"
" requires+provides58_878"
" run-phase42_882"
" run?47_886"
" run?60_885"
" skip-variable-phase-level52_890"
" skip-variable-phase-level65_889"
" visit?46_894"
" visit?59_893"
" who53_897"
" mpi67_846"
" orig-s68_847"
" self69_848"
" in-stx70_849"
" m-ns71_850))))))))))))))))))))))))))"
"(define-values"
"(perform-require!74.1)"
"(lifted/3.1$3"
"(lambda(given-kws_898 given-argc_899)"
"(if(= given-argc_899 7)"
"(subsets?"
" '(#:phase-shift #:run-phase #:who)"
" given-kws_898"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who))"
" #f))"
"(case-lambda"
"((given-kws_900 given-args_901 mpi_902 orig-s_903 self_904 in-stx_905 m-ns_906)"
"(unpack73.1 given-kws_900 given-args_901 mpi_902 orig-s_903 self_904 in-stx_905 m-ns_906)))"
" '(#:phase-shift #:run-phase #:who)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)))"
"(define-values"
"(lifted/4.1$2)"
"(make-required"
" 'bind-all-provides!"
"(case-lambda"
"((self_907 m_908 in-stx_909 phase-shift_910 ns_911 mpi_912)"
"(apply missing-kw self_907 m_908 in-stx_909 phase-shift_910 ns_911 mpi_912 null)))"
" #f"
" #f))"
"(define-values"
"(bind-all-provides!96.1)"
"(lambda(bulk-callback82_913"
" bulk-excepts80_914"
" bulk-prefix79_915"
" can-bulk?78_916"
" filter81_917"
" in75_918"
" just-meta77_919"
" only76_920"
" m91_921"
" in-stx92_922"
" phase-shift93_923"
" ns94_924"
" mpi95_925)"
"(let-values(((m_926) m91_921))"
"(let-values(((in-stx_927) in-stx92_922))"
"(let-values(((phase-shift_928) phase-shift93_923))"
"(let-values(((ns_929) ns94_924))"
"(let-values(((mpi_930) mpi95_925))"
"(let-values(((orig-s_931) in75_918))"
"(let-values(((only-syms_932) only76_920))"
"(let-values(((just-meta_933) just-meta77_919))"
"(let-values(((can-bulk?_934) can-bulk?78_916))"
"(let-values(((bulk-prefix_935) bulk-prefix79_915))"
"(let-values(((bulk-excepts_936) bulk-excepts80_914))"
"(let-values(((filter_937) filter81_917))"
"(let-values(((bulk-callback_938) bulk-callback82_913))"
"(let-values()"
"(let-values(((self_939)(module-self m_926)))"
"(let-values(((ht_940)(module-provides m_926)))"
"(begin"
"(if((lambda(ht_941)(hash? ht_941)) ht_940)"
"(void)"
"(let-values()(default-in-hash ht_940)))"
"((letrec-values(((for-loop_942)"
"(lambda(fold-var_943 i_944)"
"(if i_944"
"(let-values(((provide-phase-level_945 provides_946)"
"(hash-iterate-key+value ht_940 i_944)))"
"(let-values(((fold-var_947)"
"(let-values(((fold-var_948) fold-var_943))"
"(if(let-values(((or-part_949)"
"(eq?"
" just-meta_933"
" 'all)))"
"(if or-part_949"
" or-part_949"
"(eqv?"
" just-meta_933"
" provide-phase-level_945)))"
"(let-values(((fold-var_950)"
" fold-var_948))"
"(let-values(((fold-var_951)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_952)"
"(phase+"
" phase-shift_928"
" provide-phase-level_945)))"
"(begin"
"(if bulk-callback_938"
"(let-values()"
"(bulk-callback_938"
" provides_946"
" provide-phase-level_945))"
"(void))"
"(if filter_937"
"(let-values()"
"(let-values(((lst_953)"
"(let-values(((or-part_954)"
" only-syms_932))"
"(if or-part_954"
" or-part_954"
"(hash-keys"
" provides_946)))))"
"(begin"
"(if(list?"
" lst_953)"
"(void)"
"(let-values()"
"(in-list"
" lst_953)))"
"((letrec-values(((for-loop_955)"
"(lambda(fold-var_956"
" lst_957)"
"(if(pair?"
" lst_957)"
"(let-values(((sym_958)"
"(unsafe-car"
" lst_957)))"
"(let-values(((fold-var_959)"
"(let-values(((fold-var_960)"
" fold-var_956))"
"(let-values(((fold-var_961)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_962)"
"(hash-ref"
" provides_946"
" sym_958"
" #f)))"
"(if binding/p_962"
"(let-values()"
"(let-values(((b_963)"
"(let-values(((...r/expand/require.rkt:374:20_964)"
" provide-binding-to-require-binding13.1)"
"((binding/p277_965)"
" binding/p_962)"
"((sym278_966)"
" sym_958)"
"((self279_967)"
" self_939)"
"((mpi280_968)"
" mpi_930)"
"((provide-phase-level281_969)"
" provide-phase-level_945)"
"((phase-shift282_970)"
" phase-shift_928))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" mpi280_968"
" phase-shift282_970"
" provide-phase-level281_969"
" self279_967"
" binding/p277_965"
" sym278_966)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:374:20_964"
" keyword-procedure-extract"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
" 4)"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
"(list"
" mpi280_968"
" phase-shift282_970"
" provide-phase-level281_969"
" self279_967)"
" binding/p277_965"
" sym278_966)))))"
"(let-values(((sym_971)"
"(filter_937"
" b_963"
"(provided-as-transformer?"
" binding/p_962))))"
"(if(if sym_971"
"(not"
" can-bulk?_934)"
" #f)"
"(let-values()"
"(let-values(((temp283_972)"
"(datum->syntax$1"
" in-stx_927"
" sym_971))"
"((b284_973)"
" b_963)"
"((phase285_974)"
" phase_952))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!19.1))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" temp283_972"
" b284_973"
" phase285_974)"
"(add-binding!19.1"
" temp283_972"
" b284_973"
" phase285_974))))"
"(void)))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_961)))))"
"(for-loop_955"
" fold-var_959"
"(unsafe-cdr"
" lst_957))))"
" fold-var_956))))"
" for-loop_955)"
"(void)"
" lst_953))))"
"(void))"
"(if can-bulk?_934"
"(let-values()"
"(let-values(((...r/expand/require.rkt:386:6_975)"
" add-bulk-binding!27.1)"
"((in-stx286_976)"
" in-stx_927)"
"((temp287_977)"
"(bulk-binding14.1"
"(if(not"
" bulk-prefix_935)"
"(if(zero?"
"(hash-count"
" bulk-excepts_936))"
" provides_946"
" #f)"
" #f)"
" bulk-prefix_935"
" bulk-excepts_936"
" self_939"
" mpi_930"
" provide-phase-level_945"
" phase-shift_928"
"(namespace-bulk-binding-registry"
" ns_929)))"
"((phase288_978)"
" phase_952)"
"((orig-s289_979)"
" orig-s_931))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-bulk-binding!27.1))"
"(add-bulk-binding!25.1"
" orig-s289_979"
" #t"
" in-stx286_976"
" temp287_977"
" phase288_978)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:386:6_975"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s289_979)"
" in-stx286_976"
" temp287_977"
" phase288_978))))"
"(void)))))"
"(void)))))"
"(values fold-var_951)))"
" fold-var_948))))"
"(for-loop_942"
" fold-var_947"
"(hash-iterate-next ht_940 i_944))))"
" fold-var_943))))"
" for-loop_942)"
"(void)"
"(hash-iterate-first ht_940)))))))))))))))))))))"
"(define-values"
"(unpack97.1)"
"(lambda(given-kws_980 given-args_981 m91_982 in-stx92_983 phase-shift93_984 ns94_985 mpi95_986)"
"(let-values(((bulk-callback82_987)(car given-args_981))"
"((given-kws_988)(cdr given-kws_980))"
"((given-args_989)(cdr given-args_981)))"
"(let-values(((bulk-excepts80_990)(car given-args_989))"
"((given-kws_991)(cdr given-kws_988))"
"((given-args_992)(cdr given-args_989)))"
"(let-values(((bulk-prefix79_993)(car given-args_992))"
"((given-kws_994)(cdr given-kws_991))"
"((given-args_995)(cdr given-args_992)))"
"(let-values(((can-bulk?78_996)(car given-args_995))"
"((given-kws_997)(cdr given-kws_994))"
"((given-args_998)(cdr given-args_995)))"
"(let-values(((filter81_999)(car given-args_998))"
"((given-kws_1000)(cdr given-kws_997))"
"((given-args_1001)(cdr given-args_998)))"
"(let-values(((in75_1002)(car given-args_1001))"
"((given-kws_1003)(cdr given-kws_1000))"
"((given-args_1004)(cdr given-args_1001)))"
"(let-values(((just-meta77_1005)(car given-args_1004))"
"((given-kws_1006)(cdr given-kws_1003))"
"((given-args_1007)(cdr given-args_1004)))"
"(let-values(((only76_1008)(car given-args_1007)))"
"(bind-all-provides!96.1"
" bulk-callback82_987"
" bulk-excepts80_990"
" bulk-prefix79_993"
" can-bulk?78_996"
" filter81_999"
" in75_1002"
" just-meta77_1005"
" only76_1008"
" m91_982"
" in-stx92_983"
" phase-shift93_984"
" ns94_985"
" mpi95_986)))))))))))"
"(define-values"
"(bind-all-provides!98.1)"
"(lifted/4.1$2"
"(lambda(given-kws_1009 given-argc_1010)"
"(if(= given-argc_1010 7)"
"(let-values(((l2_1011) given-kws_1009))"
"(if(pair? l2_1011)"
"(if(eq?(car l2_1011) '#:bulk-callback)"
"(let-values(((l2_1012)(cdr l2_1011)))"
"(if(pair? l2_1012)"
"(if(eq?(car l2_1012) '#:bulk-excepts)"
"(let-values(((l2_1013)(cdr l2_1012)))"
"(if(pair? l2_1013)"
"(if(eq?(car l2_1013) '#:bulk-prefix)"
"(let-values(((l2_1014)(cdr l2_1013)))"
"(if(pair? l2_1014)"
"(if(eq?(car l2_1014) '#:can-bulk?)"
"(let-values(((l2_1015)(cdr l2_1014)))"
"(if(pair? l2_1015)"
"(if(eq?(car l2_1015) '#:filter)"
"(let-values(((l2_1016)(cdr l2_1015)))"
"(if(pair? l2_1016)"
"(if(eq?(car l2_1016) '#:in)"
"(let-values(((l2_1017)(cdr l2_1016)))"
"(if(pair? l2_1017)"
"(if(eq?(car l2_1017) '#:just-meta)"
"(let-values(((l2_1018)(cdr l2_1017)))"
"(if(pair? l2_1018)"
"(if(eq?(car l2_1018) '#:only)(null?(cdr l2_1018)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1019 given-args_1020 m_1021 in-stx_1022 phase-shift_1023 ns_1024 mpi_1025)"
"(unpack97.1 given-kws_1019 given-args_1020 m_1021 in-stx_1022 phase-shift_1023 ns_1024 mpi_1025)))"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_1026)"
"(let-values(((rebuild-req_1027)"
"(lambda(req_1029 new-req_1030)(datum->syntax$1 req_1029 new-req_1030 req_1029 req_1029))))"
"(letrec-values(((loop_1028)"
"(lambda(shifted?_1031)"
"(lambda(req_1032)"
"(let-values(((fm_1033)"
"(if(pair?(syntax-e$1 req_1032))"
"(if(identifier?(car(syntax-e$1 req_1032)))"
"(syntax-e$1(car(syntax-e$1 req_1032)))"
" #f)"
" #f)))"
"(let-values(((tmp_1034) fm_1033))"
"(if(equal? tmp_1034 'for-meta)"
"(let-values()"
"(let-values(((ok?_1035 for-meta290_1036 phase-level291_1037 spec292_1038)"
"(let-values(((s_1052) req_1032))"
"(let-values(((orig-s_1053) s_1052))"
"(let-values(((for-meta290_1054 phase-level291_1055 spec292_1056)"
"(let-values(((s_1057)"
"(if(syntax?$1 s_1052)"
"(syntax-e$1 s_1052)"
" s_1052)))"
"(if(pair? s_1057)"
"(let-values(((for-meta293_1058)"
"(let-values(((s_1061)"
"(car s_1057)))"
" s_1061))"
"((phase-level294_1059 spec295_1060)"
"(let-values(((s_1062)"
"(cdr s_1057)))"
"(let-values(((s_1063)"
"(if(syntax?$1"
" s_1062)"
"(syntax-e$1"
" s_1062)"
" s_1062)))"
"(if(pair? s_1063)"
"(let-values(((phase-level296_1064)"
"(let-values(((s_1066)"
"(car"
" s_1063)))"
" s_1066))"
"((spec297_1065)"
"(let-values(((s_1067)"
"(cdr"
" s_1063)))"
"(let-values(((s_1068)"
"(if(syntax?$1"
" s_1067)"
"(syntax-e$1"
" s_1067)"
" s_1067)))"
"(let-values(((flat-s_1069)"
"(to-syntax-list.1"
" s_1068)))"
"(if(not"
" flat-s_1069)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_1053))"
"(let-values()"
" flat-s_1069)))))))"
"(values"
" phase-level296_1064"
" spec297_1065))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1053))))))"
"(values"
" for-meta293_1058"
" phase-level294_1059"
" spec295_1060))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1053)))))"
"(values"
" #t"
" for-meta290_1054"
" phase-level291_1055"
" spec292_1056))))))"
"(let-values(((p_1051)(syntax-e$1 phase-level291_1037)))"
"(begin"
"(if(phase? p_1051)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_1032)))"
"(rebuild-req_1027"
" req_1032"
"(list*"
" for-meta290_1036"
"(phase+ p_1051 1)"
"(map2(loop_1028 #t) spec292_1038)))))))"
"(if(equal? tmp_1034 'for-syntax)"
"(let-values()"
"(let-values(((ok?_1070 for-syntax298_1071 spec299_1072)"
"(let-values(((s_1083) req_1032))"
"(let-values(((orig-s_1084) s_1083))"
"(let-values(((for-syntax298_1085 spec299_1086)"
"(let-values(((s_1087)"
"(if(syntax?$1 s_1083)"
"(syntax-e$1 s_1083)"
" s_1083)))"
"(if(pair? s_1087)"
"(let-values(((for-syntax300_1088)"
"(let-values(((s_1090)"
"(car s_1087)))"
" s_1090))"
"((spec301_1089)"
"(let-values(((s_1091)"
"(cdr s_1087)))"
"(let-values(((s_1092)"
"(if(syntax?$1"
" s_1091)"
"(syntax-e$1"
" s_1091)"
" s_1091)))"
"(let-values(((flat-s_1093)"
"(to-syntax-list.1"
" s_1092)))"
"(if(not flat-s_1093)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_1084))"
"(let-values()"
" flat-s_1093)))))))"
"(values for-syntax300_1088 spec301_1089))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1084)))))"
"(values #t for-syntax298_1085 spec299_1086))))))"
"(rebuild-req_1027"
" req_1032"
"(list* 'for-meta 2(map2(loop_1028 #t) spec299_1072)))))"
"(if(equal? tmp_1034 'for-template)"
"(let-values()"
"(let-values(((ok?_1094 for-template302_1095 spec303_1096)"
"(let-values(((s_1107) req_1032))"
"(let-values(((orig-s_1108) s_1107))"
"(let-values(((for-template302_1109 spec303_1110)"
"(let-values(((s_1111)"
"(if(syntax?$1 s_1107)"
"(syntax-e$1 s_1107)"
" s_1107)))"
"(if(pair? s_1111)"
"(let-values(((for-template304_1112)"
"(let-values(((s_1114)"
"(car s_1111)))"
" s_1114))"
"((spec305_1113)"
"(let-values(((s_1115)"
"(cdr s_1111)))"
"(let-values(((s_1116)"
"(if(syntax?$1"
" s_1115)"
"(syntax-e$1"
" s_1115)"
" s_1115)))"
"(let-values(((flat-s_1117)"
"(to-syntax-list.1"
" s_1116)))"
"(if(not flat-s_1117)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1108))"
"(let-values()"
" flat-s_1117)))))))"
"(values for-template304_1112 spec305_1113))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_1108)))))"
"(values #t for-template302_1109 spec303_1110))))))"
"(rebuild-req_1027"
" req_1032"
"(list* 'for-meta 0(map2(loop_1028 #t) spec303_1096)))))"
"(if(equal? tmp_1034 'for-label)"
"(let-values()"
"(let-values(((ok?_1118 for-label306_1119 spec307_1120)"
"(let-values(((s_1131) req_1032))"
"(let-values(((orig-s_1132) s_1131))"
"(let-values(((for-label306_1133 spec307_1134)"
"(let-values(((s_1135)"
"(if(syntax?$1 s_1131)"
"(syntax-e$1 s_1131)"
" s_1131)))"
"(if(pair? s_1135)"
"(let-values(((for-label308_1136)"
"(let-values(((s_1138)"
"(car s_1135)))"
" s_1138))"
"((spec309_1137)"
"(let-values(((s_1139)"
"(cdr s_1135)))"
"(let-values(((s_1140)"
"(if(syntax?$1"
" s_1139)"
"(syntax-e$1"
" s_1139)"
" s_1139)))"
"(let-values(((flat-s_1141)"
"(to-syntax-list.1"
" s_1140)))"
"(if(not flat-s_1141)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1132))"
"(let-values()"
" flat-s_1141)))))))"
"(values for-label308_1136 spec309_1137))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1132)))))"
"(values #t for-label306_1133 spec307_1134))))))"
"(rebuild-req_1027"
" req_1032"
"(list* for-label306_1119(map2(loop_1028 #t) spec307_1120)))))"
"(if(equal? tmp_1034 'just-meta)"
"(let-values()"
"(let-values(((ok?_1142 just-meta310_1143 phase-level311_1144 spec312_1145)"
"(let-values(((s_1158) req_1032))"
"(let-values(((orig-s_1159) s_1158))"
"(let-values(((just-meta310_1160"
" phase-level311_1161"
" spec312_1162)"
"(let-values(((s_1163)"
"(if(syntax?$1 s_1158)"
"(syntax-e$1 s_1158)"
" s_1158)))"
"(if(pair? s_1163)"
"(let-values(((just-meta313_1164)"
"(let-values(((s_1167)"
"(car"
" s_1163)))"
" s_1167))"
"((phase-level314_1165"
" spec315_1166)"
"(let-values(((s_1168)"
"(cdr"
" s_1163)))"
"(let-values(((s_1169)"
"(if(syntax?$1"
" s_1168)"
"(syntax-e$1"
" s_1168)"
" s_1168)))"
"(if(pair? s_1169)"
"(let-values(((phase-level316_1170)"
"(let-values(((s_1172)"
"(car"
" s_1169)))"
" s_1172))"
"((spec317_1171)"
"(let-values(((s_1173)"
"(cdr"
" s_1169)))"
"(let-values(((s_1174)"
"(if(syntax?$1"
" s_1173)"
"(syntax-e$1"
" s_1173)"
" s_1173)))"
"(let-values(((flat-s_1175)"
"(to-syntax-list.1"
" s_1174)))"
"(if(not"
" flat-s_1175)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                            \"bad syntax\""
" orig-s_1159))"
"(let-values()"
" flat-s_1175)))))))"
"(values"
" phase-level316_1170"
" spec317_1171))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1159))))))"
"(values"
" just-meta313_1164"
" phase-level314_1165"
" spec315_1166))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1159)))))"
"(values"
" #t"
" just-meta310_1160"
" phase-level311_1161"
" spec312_1162))))))"
"(rebuild-req_1027"
" req_1032"
"(list*"
" just-meta310_1143"
" phase-level311_1144"
"(map2(loop_1028 #f) spec312_1145)))))"
"(let-values()"
"(if shifted?_1031"
" req_1032"
"(datum->syntax$1 #f(list 'for-syntax req_1032)))))))))))))))"
"((loop_1028 #f) req_1026)))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_1176 adjusted-sym_1177 binding_1178 phase-level_1179 phase-shift_1180 as-constant?_1181)"
"(let-values(((i-ns_1182)"
"(let-values(((...r/expand/require.rkt:437:15_1184) namespace->module-namespace82.1)"
"((m-ns318_1185) m-ns_1176)"
"((temp319_1186)(1/module-path-index-resolve(module-binding-module binding_1178)))"
"((temp320_1187)(phase-(module-binding-phase binding_1178) phase-level_1179))"
"((temp321_1188) #t))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp321_1188"
" #t"
" #f"
" #f"
" m-ns318_1185"
" temp319_1186"
" temp320_1187)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:437:15_1184"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp321_1188)"
" m-ns318_1185"
" temp319_1186"
" temp320_1187)))))"
"(let-values(((val_1183)"
"(namespace-get-variable"
" i-ns_1182"
"(module-binding-phase binding_1178)"
"(module-binding-sym binding_1178)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                          \"namespace mismatch;\\n\""
"                          \" variable not found\\n\""
"                          \"  variable name: ~s\\n\""
"                          \"  phase level: ~s\")"
"(module-binding-sym binding_1178)"
"(module-binding-phase binding_1178)))))))"
"(namespace-set-variable!"
" m-ns_1176"
"(phase+ phase-shift_1180 phase-level_1179)"
" adjusted-sym_1177"
" val_1183"
" as-constant?_1181)))))"
"(void)"
"(void)"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" top-level-bind!-id"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans-val_7)"
"(let-values(((phase_8)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_9)"
"(let-values(((...p-level-instance.rkt:25:15_10) make-module-binding24.1)"
"((mpi4_11) mpi_2)"
"((phase5_12) phase_8)"
"((sym6_13) sym_6)"
"((temp7_14)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" temp7_14"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi4_11"
" phase5_12"
" sym6_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:25:15_10"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list temp7_14)"
" mpi4_11"
" phase5_12"
" sym6_13)))))"
"(begin"
"(let-values(((id1_15) id_1)((b2_16) b_9)((phase3_17) phase_8))"
"(if(variable-reference-constant?(#%variable-reference add-binding!19.1))"
"(add-binding!17.1 #f #f #f #f id1_15 b2_16 phase3_17)"
"(add-binding!19.1 id1_15 b2_16 phase3_17)))"
"(if trans-val_7(let-values()(maybe-install-free=id! trans-val_7 id_1 phase_8))(void))))))"
" top-level-require!-id"
"(lambda(stx_18 ns_19)"
"(let-values(((reqs_20)(cdr(syntax->list$1 stx_18))))"
"(let-values(((...p-level-instance.rkt:35:5_21) parse-and-perform-requires!30.1)"
"((temp8_22) #t)"
"((temp9_23) #f)"
"((reqs10_24) reqs_20)"
"((temp11_25) #f)"
"((ns12_26) ns_19)"
"((temp13_27)(namespace-phase ns_19))"
"((temp14_28)(make-requires+provides #f))"
"((temp15_29) 'require))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_22"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp9_23"
" #t"
" temp15_29"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:35:5_21"
" keyword-procedure-extract"
" '(#:run? #:visit? #:who)"
" 7)"
" '(#:run? #:visit? #:who)"
"(list temp8_22 temp9_23 temp15_29)"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)))))))"
"(void)"
"(void)"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_1 data-linklet_2 ns_3)"
"(let-values(((data-instance_4)"
"(1/instantiate-linklet"
" data-linklet_2"
"(list"
" deserialize-instance"
"(let-values(((...r/eval/multi-top.rkt:17:31_14) make-eager-instance-instance13.1)"
"((ns1_15) ns_3)"
"((temp2_16)(namespace-phase ns_3))"
"((temp3_17)(namespace-mpi ns_3))"
"((temp4_18)(namespace-bulk-binding-registry ns_3))"
"((temp5_19)(current-code-inspector)))"
"(if(variable-reference-constant?(#%variable-reference make-eager-instance-instance13.1))"
"(make-eager-instance-instance11.1 temp4_18 temp2_16 temp5_19 ns1_15 temp3_17)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/eval/multi-top.rkt:17:31_14"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" 2)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
"(list temp4_18 temp2_16 temp5_19 ns1_15 temp3_17))))))))"
"(let-values(((data_5)(lambda(key_20)(1/instance-variable-value data-instance_4 key_20))))"
"(let-values(((mpi-vector_6)(data_5 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_7)(data_5 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_8)(data_5 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_9)(data_5 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_10)(data_5 'syntax-literals)))"
"(let-values(((syntax-literals-trees_11)(data_5 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_12)(extract-namespace-scopes ns_3)))"
"(letrec-values(((construct-compiled-in-memory_13)"
"(lambda(ld_21"
" mpi-vector-tree_22"
" phase-to-link-modules-tree_23"
" syntax-literals-tree_24)"
"(let-values(((is-module?_25)"
"(let-values(((or-part_31)(1/linklet-bundle? ld_21)))"
"(if or-part_31"
" or-part_31"
"(let-values(((b_32)"
"(hash-ref"
"(1/linklet-directory->hash ld_21)"
" #f"
" #f)))"
"(if b_32"
"(hash-ref(1/linklet-bundle->hash b_32) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_26)(vector-ref mpi-vector-tree_22 0)))"
"(let-values(((syntax-literals-spec_27)"
"(vector-ref syntax-literals-tree_24 0)))"
"(let-values(((pres_28)"
"(if is-module?_25"
"(extract-submodules ld_21 'pre)"
"(compiled-top->compiled-tops ld_21))))"
"(let-values(((posts_29)"
"(if is-module?_25"
"(extract-submodules ld_21 'post)"
" null)))"
"(let-values(((map-construct-compiled-in-memory_30)"
"(lambda(l_33 vec-pos_34)"
"(alt-reverse"
"(let-values(((lst_35) l_33)"
"((lst_36)"
"(vector-ref"
" mpi-vector-tree_22"
" vec-pos_34))"
"((lst_37)"
"(vector-ref"
" phase-to-link-modules-tree_23"
" vec-pos_34))"
"((lst_38)"
"(vector-ref"
" syntax-literals-tree_24"
" vec-pos_34)))"
"(begin"
"(if(list? lst_35)"
"(void)"
"(let-values()(in-list lst_35)))"
"(if(list? lst_36)"
"(void)"
"(let-values()(in-list lst_36)))"
"(if(list? lst_37)"
"(void)"
"(let-values()(in-list lst_37)))"
"(if(list? lst_38)"
"(void)"
"(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40"
" lst_41"
" lst_42"
" lst_43"
" lst_44)"
"(if(if(pair? lst_41)"
"(if(pair? lst_42)"
"(if(pair? lst_43)"
"(pair? lst_44)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_45)"
"(unsafe-car"
" lst_41))"
"((mpi-vector-tree_46)"
"(unsafe-car"
" lst_42))"
"((phase-to-link-modules-tree_47)"
"(unsafe-car"
" lst_43))"
"((syntax-literals-tree_48)"
"(unsafe-car"
" lst_44)))"
"(let-values(((fold-var_49)"
"(let-values(((fold-var_50)"
" fold-var_40))"
"(let-values(((fold-var_51)"
"(let-values()"
"(cons"
"(let-values()"
"(construct-compiled-in-memory_13"
" sub-ld_45"
" mpi-vector-tree_46"
" phase-to-link-modules-tree_47"
" syntax-literals-tree_48))"
" fold-var_50))))"
"(values"
" fold-var_51)))))"
"(for-loop_39"
" fold-var_49"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42)"
"(unsafe-cdr lst_43)"
"(unsafe-cdr"
" lst_44))))"
" fold-var_40))))"
" for-loop_39)"
" null"
" lst_35"
" lst_36"
" lst_37"
" lst_38)))))))"
"(compiled-in-memory1.1"
" ld_21"
"(vector-ref"
" phase-to-link-modules-vector_8"
"(vector-ref phase-to-link-modules-tree_23 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_52)(vector-length mpi-pos-vec_26)))"
"(begin"
"(if(exact-nonnegative-integer? len_52)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_52)))"
"(let-values(((v_53)(make-vector len_52 0)))"
"(begin"
"(if(zero? len_52)"
"(void)"
"(let-values()"
"(let-values(((vec_54 len_55)"
"(let-values(((vec_56) mpi-pos-vec_26))"
"(begin"
"(if(vector? vec_56)"
"(void)"
"(let-values()"
"(in-vector vec_56)))"
"(values"
" vec_56"
"(unsafe-vector-length vec_56))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_57)"
"(lambda(i_58 pos_59)"
"(if(unsafe-fx< pos_59 len_55)"
"(let-values(((pos_60)"
"(unsafe-vector-ref"
" vec_54"
" pos_59)))"
"(let-values(((i_61)"
"(let-values(((i_62)"
" i_58))"
"(let-values(((i_63)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_53"
" i_62"
"(let-values()"
"(vector-ref"
" mpi-vector_6"
" pos_60)))"
"(unsafe-fx+"
" 1"
" i_62)))))"
"(values"
" i_63)))))"
"(if(not"
"((lambda x_64"
"(unsafe-fx="
" i_61"
" len_52))"
" pos_60))"
"(for-loop_57"
" i_61"
"(unsafe-fx+"
" 1"
" pos_59))"
" i_61)))"
" i_58))))"
" for-loop_57)"
" 0"
" 0)))))"
" v_53))))"
"(let-values(((len_65)(cdr syntax-literals-spec_27)))"
"(begin"
"(if(exact-nonnegative-integer? len_65)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_65)))"
"(let-values(((v_66)(make-vector len_65 0)))"
"(begin"
"(if(zero? len_65)"
"(void)"
"(let-values()"
"(let-values(((start_67) 0)"
"((end_68)(cdr syntax-literals-spec_27))"
"((inc_69) 1))"
"(begin"
"(if(if(real? start_67)"
"(if(real? end_68)(real? inc_69) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_67 end_68 inc_69)))"
"((letrec-values(((for-loop_70)"
"(lambda(i_71 pos_72)"
"(if(< pos_72 end_68)"
"(let-values(((i_73)"
" pos_72))"
"(let-values(((i_74)"
"(let-values(((i_75)"
" i_71))"
"(let-values(((i_76)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_66"
" i_75"
"(let-values()"
"(if syntax-literals_10"
"(vector-ref"
" syntax-literals_10"
"(+"
"(car"
" syntax-literals-spec_27)"
" i_73))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_75)))))"
"(values"
" i_76)))))"
"(if(not"
"((lambda x_77"
"(unsafe-fx="
" i_74"
" len_65))"
" i_73))"
"(for-loop_70"
" i_74"
"(+ pos_72 inc_69))"
" i_74)))"
" i_71))))"
" for-loop_70)"
" 0"
" start_67)))))"
" v_66))))"
"(map-construct-compiled-in-memory_30 pres_28 1)"
"(map-construct-compiled-in-memory_30 posts_29 2)"
" namespace-scopes_12"
" #f))))))))))"
"(map2"
" construct-compiled-in-memory_13"
" tops_1"
" mpi-vector-trees_7"
" phase-to-link-modules-trees_9"
" syntax-literals-trees_11)))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_78 names-key_79)"
"(if(1/linklet-bundle? ld_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_80)(1/linklet-directory->hash ld_78)))"
"(let-values(((mod_81)(hash-ref h_80 #f #f)))"
"            (let-values ((() (begin (if mod_81 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_82)(1/linklet-bundle->hash mod_81)))"
"(let-values(((names_83)(hash-ref mh_82 names-key_79 null)))"
"(alt-reverse"
"(let-values(((lst_84) names_83))"
"(begin"
"(if(list? lst_84)(void)(let-values()(in-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_86 lst_87)"
"(if(pair? lst_87)"
"(let-values(((name_88)(unsafe-car lst_87)))"
"(let-values(((fold-var_89)"
"(let-values(((fold-var_90) fold-var_86))"
"(let-values(((fold-var_91)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" h_80"
" name_88"
"(lambda()"
"(error"
"                                                                                      \"missing submodule declaration:\""
" name_88))))"
" fold-var_90))))"
"(values fold-var_91)))))"
"(for-loop_85 fold-var_89(unsafe-cdr lst_87))))"
" fold-var_86))))"
" for-loop_85)"
" null"
" lst_84)))))))))))))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$12)"
"(make-required"
" 'check-require-access"
"(case-lambda"
"((self_2 linklet_3 import-module-uses_4 import-module-instances_5 insp_6 extra-inspector_7 extra-inspectorsss_8)"
"(apply"
" missing-kw"
" self_2"
" linklet_3"
" import-module-uses_4"
" import-module-instances_5"
" insp_6"
" extra-inspector_7"
" extra-inspectorsss_8"
" null)))"
" #f"
" #f))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_9"
" linklet3_10"
" import-module-uses4_11"
" import-module-instances5_12"
" insp6_13"
" extra-inspector7_14"
" extra-inspectorsss8_15)"
"(let-values(((linklet_16) linklet3_10))"
"(let-values(((skip-num-imports_17) skip-imports1_9))"
"(let-values(((import-module-uses_18) import-module-uses4_11))"
"(let-values(((import-module-instances_19) import-module-instances5_12))"
"(let-values(((insp_20) insp6_13))"
"(let-values(((extra-inspector_21) extra-inspector7_14))"
"(let-values(((extra-inspectorsss_22) extra-inspectorsss8_15))"
"(let-values()"
"(let-values(((lst_23)(list-tail(1/linklet-import-variables linklet_16) skip-num-imports_17))"
"((lst_24) import-module-uses_18)"
"((lst_25) import-module-instances_19)"
"((lst_26)"
"(let-values(((or-part_27) extra-inspectorsss_22))"
"(if or-part_27 or-part_27 import-module-uses_18))))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"(if(list? lst_25)(void)(let-values()(in-list lst_25)))"
"(if(list? lst_26)(void)(let-values()(in-list lst_26)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29 lst_30 lst_31 lst_32 lst_33)"
"(if(if(pair? lst_30)"
"(if(pair? lst_31)(if(pair? lst_32)(pair? lst_33) #f) #f)"
" #f)"
"(let-values(((import-syms_34)(unsafe-car lst_30))"
"((mu_35)(unsafe-car lst_31))"
"((mi_36)(unsafe-car lst_32))"
"((extra-inspectorss_37)(unsafe-car lst_33)))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_29))"
"(let-values(((fold-var_40)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_41)"
"(module-instance-module"
" mi_36)))"
"(if(module-no-protected? m_41)"
"(void)"
"(let-values()"
"(let-values(((access_42)"
"(let-values(((or-part_43)"
"(module-access"
" m_41)))"
"(if or-part_43"
" or-part_43"
"(module-compute-access!"
" m_41)))))"
"(let-values(((lst_44)"
" import-syms_34)"
"((lst_45)"
"(let-values(((or-part_46)"
"(if extra-inspectorsss_22"
" extra-inspectorss_37"
" #f)))"
"(if or-part_46"
" or-part_46"
" import-syms_34))))"
"(begin"
"(if(list? lst_44)"
"(void)"
"(let-values()"
"(in-list lst_44)))"
"(if(list? lst_45)"
"(void)"
"(let-values()"
"(in-list lst_45)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49"
" lst_50)"
"(if(if(pair?"
" lst_49)"
"(pair?"
" lst_50)"
" #f)"
"(let-values(((import-sym_51)"
"(unsafe-car"
" lst_49))"
"((extra-inspectors_52)"
"(unsafe-car"
" lst_50)))"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54)"
" fold-var_48))"
"(let-values(((fold-var_55)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_56)"
"(hash-ref"
"(hash-ref"
" access_42"
"(module-use-phase"
" mu_35)"
" '#hasheq())"
" import-sym_51"
" 'unexported)))"
"(if(let-values(((or-part_57)"
"(eq?"
" a_56"
" 'unexported)))"
"(if or-part_57"
" or-part_57"
"(eq?"
" a_56"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_58)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_36))))"
"(if(let-values(((or-part_59)"
"(inspector-superior?"
" insp_20"
" guard-insp_58)))"
"(if or-part_59"
" or-part_59"
"(let-values(((or-part_60)"
"(if extra-inspector_21"
"(inspector-superior?"
" extra-inspector_21"
" guard-insp_58)"
" #f)))"
"(if or-part_60"
" or-part_60"
"(if extra-inspectorsss_22"
"(if extra-inspectorss_37"
"(let-values(((ht_61)"
" extra-inspectors_52))"
"(begin"
"(if((lambda(ht_62)"
"(if(hash?"
" ht_62)"
"(immutable?"
" ht_62)"
" #f))"
" ht_61)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_61)))"
"((letrec-values(((for-loop_63)"
"(lambda(result_64"
" i_65)"
"(if i_65"
"(let-values(((extra-insp_66)"
"(unsafe-immutable-hash-iterate-key"
" ht_61"
" i_65)))"
"(let-values(((result_67)"
"(let-values(((result_68)"
" result_64))"
"(let-values(((result_69)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_66"
" guard-insp_58)))))"
"(values"
" result_69)))))"
"(if(not"
"((lambda x_70"
"(not"
" result_67))"
" extra-insp_66))"
"(for-loop_63"
" result_67"
"(unsafe-immutable-hash-iterate-next"
" ht_61"
" i_65))"
" result_67)))"
" result_64))))"
" for-loop_63)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_61))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                          \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                          \"  variable: ~s\\n\""
"                                                                                                                                                                          \"  from module: ~a\")"
" a_56"
" import-sym_51"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_36))))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_55)))))"
"(for-loop_47"
" fold-var_53"
"(unsafe-cdr"
" lst_49)"
"(unsafe-cdr"
" lst_50))))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_44"
" lst_45))))))))"
"(void)))))"
"(values fold-var_40)))))"
"(for-loop_28"
" fold-var_38"
"(unsafe-cdr lst_30)"
"(unsafe-cdr lst_31)"
"(unsafe-cdr lst_32)"
"(unsafe-cdr lst_33))))"
" fold-var_29))))"
" for-loop_28)"
"(void)"
" lst_23"
" lst_24"
" lst_25"
" lst_26)))))))))))))"
"(define-values"
"(unpack10.1$1)"
"(lambda(given-kws_71"
" given-args_72"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78)"
"(let-values(((skip-imports1_79)(car given-args_72)))"
"(check-require-access9.1"
" skip-imports1_79"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78))))"
"(define-values"
"(check-require-access11.1)"
"(lifted/1.1$12"
"(lambda(given-kws_80 given-argc_81)"
"(if(= given-argc_81 8)"
"(let-values(((l2_82) given-kws_80))"
"(if(pair? l2_82)(if(eq?(car l2_82) '#:skip-imports)(null?(cdr l2_82)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)"
"(unpack10.1$1"
" given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)))"
" '(#:skip-imports)"
" '(#:skip-imports)))"
"(void)"
"(void)"
"(define-values"
"(eval-single-top)"
"(lambda(c_2 ns_3)"
"(let-values(((...xpander/eval/top.rkt:30:2_4) eval-one-top26.1)((c27_5) c_2)((ns28_6) ns_3)((temp29_7) #t))"
"(if(variable-reference-constant?(#%variable-reference eval-one-top26.1))"
"(eval-one-top24.1 #f #f temp29_7 #t c27_5 ns28_6)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:30:2_4"
" keyword-procedure-extract"
" '(#:single-expression?)"
" 4)"
" '(#:single-expression?)"
"(list temp29_7)"
" c27_5"
" ns28_6)))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_8)"
"(let-values(((ld_9)(if(compiled-in-memory? c_8)(compiled-in-memory-linklet-directory c_8) c_8)))"
"(if(1/linklet-directory? ld_9)(not(hash-ref(1/linklet-directory->hash ld_9) #f #f)) #f))))"
"(define-values"
"(eval-top7.1)"
"(lambda(as-tail?1_10 as-tail?2_11 c5_12 ns6_13 eval-compiled3_14 eval-compiled4_15)"
"(let-values(((c_16) c5_12))"
"(let-values(((ns_17) ns6_13))"
"(let-values(((eval-compiled_18)(if eval-compiled4_15 eval-compiled3_14 eval-top9.1)))"
"(let-values(((as-tail?_19)(if as-tail?2_11 as-tail?1_10 #t)))"
"(let-values()"
"(if(compiled-multiple-top? c_16)"
"(let-values(((...xpander/eval/top.rkt:41:6_20) eval-multiple-tops17.1)"
"((c30_21) c_16)"
"((ns31_22) ns_17)"
"((eval-compiled32_23) eval-compiled_18)"
"((as-tail?33_24) as-tail?_19))"
"(if(variable-reference-constant?(#%variable-reference eval-multiple-tops17.1))"
"(eval-multiple-tops15.1 as-tail?33_24 c30_21 ns31_22 eval-compiled32_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:41:6_20"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 5)"
" '(#:as-tail?)"
"(list as-tail?33_24)"
" c30_21"
" ns31_22"
" eval-compiled32_23)))"
"(let-values(((...xpander/eval/top.rkt:42:6_25) eval-one-top26.1)"
"((c34_26) c_16)"
"((ns35_27) ns_17)"
"((as-tail?36_28) as-tail?_19))"
"(if(variable-reference-constant?(#%variable-reference eval-one-top26.1))"
"(eval-one-top24.1 as-tail?36_28 #t #f #f c34_26 ns35_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:42:6_25"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list as-tail?36_28)"
" c34_26"
" ns35_27)))))))))))"
"(define-values"
"(unpack8.1)"
"(lambda(given-kws_29 given-args_30 c5_31 ns6_32 eval-compiled3_33 eval-compiled4_34)"
"(let-values(((as-tail?2_35)(pair? given-kws_29)))"
"(let-values(((as-tail?1_36)(if as-tail?2_35(car given-args_30)(void))))"
"(eval-top7.1 as-tail?1_36 as-tail?2_35 c5_31 ns6_32 eval-compiled3_33 eval-compiled4_34)))))"
"(define-values"
"(eval-top9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_37 given-argc_38)"
"(if(if(>= given-argc_38 4)(<= given-argc_38 5) #f)"
"(let-values(((l1_39) given-kws_37))"
"(let-values(((l1_40)(if(null? l1_39) l1_39(if(eq?(car l1_39) '#:as-tail?)(cdr l1_39) l1_39))))"
"(null? l1_40)))"
" #f))"
"(case-lambda"
"((given-kws_41 given-args_42 c_43 ns_44)(unpack8.1 given-kws_41 given-args_42 c_43 ns_44 #f #f))"
"((given-kws_45 given-args_46 c_47 ns_48 eval-compiled3_49)"
"(unpack8.1 given-kws_45 given-args_46 c_47 ns_48 eval-compiled3_49 #t)))"
" null"
" '(#:as-tail?)"
"(let-values(((eval-top_50)"
"(case-lambda"
"((c_51 ns_52)(unpack8.1 null null c_51 ns_52 #f #f))"
"((c_53 ns_54 eval-compiled3_55)(unpack8.1 null null c_53 ns_54 eval-compiled3_55 #t)))))"
" eval-top_50)))"
"(define-values"
"(lifted/1.1$11)"
"(make-required"
" 'eval-multiple-tops"
"(case-lambda((self_56 c_57 ns_58 eval-compiled_59)(apply missing-kw self_56 c_57 ns_58 eval-compiled_59 null)))"
" #f"
" #f))"
"(define-values"
"(eval-multiple-tops15.1)"
"(lambda(as-tail?10_60 c12_61 ns13_62 eval-compiled14_63)"
"(let-values(((c_64) c12_61))"
"(let-values(((ns_65) ns13_62))"
"(let-values(((eval-compiled_66) eval-compiled14_63))"
"(let-values(((as-tail?_67) as-tail?10_60))"
"(let-values()"
"(let-values(((eval-compiled-parts_68)"
"(lambda(l_69)"
"((letrec-values(((loop_70)"
"(lambda(l_71)"
"(if(null? l_71)"
"(let-values() void)"
"(if(null?(cdr l_71))"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:51:8_72)"
" eval-compiled_66)"
"((temp37_73)(car l_71))"
"((ns38_74) ns_65)"
"((as-tail?39_75) as-tail?_67))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:51:8_72"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list as-tail?39_75)"
" temp37_73"
" ns38_74)))"
"(let-values()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:53:8_76)"
" eval-compiled_66)"
"((temp40_77)(car l_71))"
"((ns41_78) ns_65)"
"((temp42_79) #f))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:53:8_76"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list temp42_79)"
" temp40_77"
" ns41_78))"
"(loop_70(cdr l_71)))))))))"
" loop_70)"
" l_69))))"
"(if(compiled-in-memory? c_64)"
"(let-values()(eval-compiled-parts_68(compiled-in-memory-pre-compiled-in-memorys c_64)))"
"(let-values(((c64142_80)(hash-ref(1/linklet-directory->hash c_64) 'data #f)))"
"(if c64142_80"
"((lambda(data-ld_81)"
"(eval-compiled-parts_68"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_64)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_81) #f)) 0)"
" ns_65)))"
" c64142_80)"
"(let-values()(eval-compiled-parts_68(compiled-top->compiled-tops c_64))))))))))))))"
"(define-values"
"(unpack16.1$2)"
"(lambda(given-kws_82 given-args_83 c12_84 ns13_85 eval-compiled14_86)"
"(let-values(((as-tail?10_87)(car given-args_83)))"
"(eval-multiple-tops15.1 as-tail?10_87 c12_84 ns13_85 eval-compiled14_86))))"
"(define-values"
"(eval-multiple-tops17.1)"
"(lifted/1.1$11"
"(lambda(given-kws_88 given-argc_89)"
"(if(= given-argc_89 5)"
"(let-values(((l2_90) given-kws_88))"
"(if(pair? l2_90)(if(eq?(car l2_90) '#:as-tail?)(null?(cdr l2_90)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_91 given-args_92 c_93 ns_94 eval-compiled_95)"
"(unpack16.1$2 given-kws_91 given-args_92 c_93 ns_94 eval-compiled_95)))"
" '(#:as-tail?)"
" '(#:as-tail?)))"
"(define-values"
"(eval-one-top24.1)"
"(lambda(as-tail?19_96 as-tail?21_97 single-expression?18_98 single-expression?20_99 c22_100 ns23_101)"
"(let-values(((c_102) c22_100))"
"(let-values(((ns_103) ns23_101))"
"(let-values(((single-expression?_104)(if single-expression?20_99 single-expression?18_98 #f)))"
"(let-values(((as-tail?_105)(if as-tail?21_97 as-tail?19_96 #t)))"
"(let-values()"
"(let-values()"
"(let-values(((ld_106)"
"(if(compiled-in-memory? c_102)(compiled-in-memory-linklet-directory c_102) c_102)))"
"(let-values(((h_107)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_106) #f))))"
"(let-values(((link-instance_108)"
"(if(compiled-in-memory? c_102)"
"(link-instance-from-compiled-in-memory"
" c_102"
"(if(not single-expression?_104) ns_103 #f))"
"(1/instantiate-linklet"
"(hash-ref h_107 'link)"
"(list"
" deserialize-instance"
"(let-values(((...xpander/eval/top.rkt:86:36_116)"
" make-eager-instance-instance13.1)"
"((ns43_117) ns_103)"
"((temp44_118)(namespace-phase ns_103))"
"((temp45_119)(namespace-mpi ns_103))"
"((temp46_120)(namespace-bulk-binding-registry ns_103))"
"((temp47_121)(current-code-inspector)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-eager-instance-instance13.1))"
"(make-eager-instance-instance11.1"
" temp46_120"
" temp44_118"
" temp47_121"
" ns43_117"
" temp45_119)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:86:36_116"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" 2)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
"(list temp46_120 temp44_118 temp47_121 ns43_117 temp45_119)))))))))"
"(let-values(((orig-phase_109)(hash-ref h_107 'original-phase)))"
"(let-values(((max-phase_110)(hash-ref h_107 'max-phase)))"
"(let-values(((phase-shift_111)(phase-(namespace-phase ns_103) orig-phase_109)))"
"(let-values(((extra-inspector_112)"
"(if(compiled-in-memory? c_102)"
"(compiled-in-memory-compile-time-inspector c_102)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_113)"
"(if(compiled-in-memory? c_102)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_102)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_114)"
"(if(compiled-in-memory? c_102)"
"(compiled-in-memory-phase-to-link-module-uses c_102)"
"(1/instance-variable-value link-instance_108 'phase-to-link-modules))))"
"(let-values(((thunk_115)"
"(let-values(((start_122) max-phase_110)"
"((end_123)(sub1 orig-phase_109))"
"((inc_124) -1))"
"(begin"
"(if(if(real? start_122)"
"(if(real? end_123)(real? inc_124) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_122 end_123 inc_124)))"
"((letrec-values(((for-loop_125)"
"(lambda(prev-thunk_126 pos_127)"
"(if(> pos_127 end_123)"
"(let-values(((phase_128) pos_127))"
"(let-values(((prev-thunk_129)"
"(let-values(((prev-thunk_130)"
" prev-thunk_126))"
"(let-values(((prev-thunk_131)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_130"
" #f)"
"(values))))"
"(let-values(((module-uses_132)"
"(hash-ref"
" phase-to-link-modules_114"
" phase_128"
" null)))"
"(let-values(((import-module-instances_133"
" import-instances_134)"
"(let-values(((mis_138"
" is_139)"
"(let-values(((lst_140)"
" module-uses_132))"
"(begin"
"(if(list?"
" lst_140)"
"(void)"
"(let-values()"
"(in-list"
" lst_140)))"
"((letrec-values(((for-loop_141)"
"(lambda(mis_142"
" is_143"
" lst_144)"
"(if(pair?"
" lst_144)"
"(let-values(((mu_145)"
"(unsafe-car"
" lst_144)))"
"(let-values(((mis_146"
" is_147)"
"(let-values(((mis_148)"
" mis_142)"
"((is_149)"
" is_143))"
"(let-values(((mis_150"
" is_151)"
"(let-values()"
"(let-values(((mis48_152"
" is49_153)"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:117:20_154)"
" namespace-module-use->module+linklet-instances146.1)"
"((ns50_155)"
" ns_103)"
"((mu51_156)"
" mu_145)"
"((temp52_157)"
"(phase-"
"(phase+"
" phase_128"
" phase-shift_111)"
"(module-use-phase"
" mu_145))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances146.1))"
"(namespace-module-use->module+linklet-instances144.1"
" temp52_157"
" #f"
" #f"
" #f"
" #f"
" ns50_155"
" mu51_156)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:117:20_154"
" keyword-procedure-extract"
" '(#:phase-shift)"
" 4)"
" '(#:phase-shift)"
"(list"
" temp52_157)"
" ns50_155"
" mu51_156))))))"
"(values"
"(cons"
" mis48_152"
" mis_148)"
"(cons"
" is49_153"
" is_149))))))"
"(values"
" mis_150"
" is_151)))))"
"(for-loop_141"
" mis_146"
" is_147"
"(unsafe-cdr"
" lst_144))))"
"(values"
" mis_142"
" is_143)))))"
" for-loop_141)"
" null"
" null"
" lst_140)))))"
"(values"
"(alt-reverse"
" mis_138)"
"(alt-reverse"
" is_139)))))"
"(let-values(((phase-ns_135)"
"(namespace->namespace-at-phase"
" ns_103"
"(phase+"
" phase_128"
" phase-shift_111))))"
"(let-values(((inst_136)"
"(if single-expression?_104"
" link-instance_108"
"(let-values(((...xpander/eval/top.rkt:127:24_158)"
" make-instance-instance15.1)"
"((phase-ns53_159)"
" phase-ns_135)"
"((phase-shift54_160)"
" phase-shift_111)"
"((temp55_161)"
"(namespace-mpi"
" ns_103))"
"((temp56_162)"
"(namespace-inspector"
" ns_103))"
"((temp57_163)"
"(namespace-bulk-binding-registry"
" ns_103))"
"((temp58_164)"
"(lambda(name_165"
" val_166)"
"(namespace-set-transformer!"
" ns_103"
"(phase+"
"(sub1"
" phase_128)"
" phase-shift_111)"
" name_165"
" val_166))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-instance-instance15.1))"
"(make-instance-instance13.1"
" temp57_163"
" temp56_162"
" phase-ns53_159"
" phase-shift54_160"
" temp55_161"
" temp58_164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:127:24_158"
" keyword-procedure-extract"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
" 2)"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
"(list"
" temp57_163"
" temp56_162"
" phase-ns53_159"
" phase-shift54_160"
" temp55_161"
" temp58_164)))))))"
"(let-values(((linklet_137)"
"(hash-ref"
" h_107"
" phase_128"
" #f)))"
"(if linklet_137"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:143:9_168)"
" check-require-access11.1)"
"((linklet59_169)"
" linklet_137)"
"((temp60_170)"
" 3)"
"((module-uses61_171)"
" module-uses_132)"
"((import-module-instances62_172)"
" import-module-instances_133)"
"((temp63_173)"
"(current-code-inspector))"
"((extra-inspector64_174)"
" extra-inspector_112)"
"((temp65_175)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_113"
" phase_128"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp60_170"
" linklet59_169"
" module-uses61_171"
" import-module-instances62_172"
" temp63_173"
" extra-inspector64_174"
" temp65_175)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:143:9_168"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp60_170)"
" linklet59_169"
" module-uses61_171"
" import-module-instances62_172"
" temp63_173"
" extra-inspector64_174"
" temp65_175)))"
"(values))))"
"(let-values(((instantiate_167)"
"(lambda(tail?_176)"
"(1/instantiate-linklet"
" linklet_137"
"(list*"
" top-level-instance"
" link-instance_108"
" inst_136"
" import-instances_134)"
"(namespace->instance"
" ns_103"
"(phase+"
" phase_128"
" phase-shift_111))"
"(not"
" tail?_176)))))"
"(if(zero-phase?"
" phase_128)"
"(let-values()"
" instantiate_167)"
"(if single-expression?_104"
"(let-values()"
"(lambda(tail?_177)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_135)"
"(let-values()"
"(instantiate_167"
" tail?_177)))))"
"(let-values()"
"(let-values(((ns-1_178)"
"(namespace->namespace-at-phase"
" phase-ns_135"
"(sub1"
" phase_128))))"
"(lambda(tail?_179)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(make-expand-context"
" ns-1_178)"
" 1/current-namespace"
" phase-ns_135)"
"(let-values()"
"(instantiate_167"
" tail?_179)))))))))))"
"(let-values()"
" void)))))))))))"
"(values"
" prev-thunk_131)))))"
"(for-loop_125"
" prev-thunk_129"
"(+ pos_127 inc_124))))"
" prev-thunk_126))))"
" for-loop_125)"
" void"
" start_122)))))"
"(thunk_115 as-tail?_105)))))))))))))))))))"
"(define-values"
"(unpack25.1$1)"
"(lambda(given-kws_180 given-args_181 c22_182 ns23_183)"
"(let-values(((as-tail?21_184)(if(pair? given-kws_180)(eq? '#:as-tail?(car given-kws_180)) #f)))"
"(let-values(((as-tail?19_185)(if as-tail?21_184(car given-args_181)(void)))"
"((given-kws_186)(if as-tail?21_184(cdr given-kws_180) given-kws_180))"
"((given-args_187)(if as-tail?21_184(cdr given-args_181) given-args_181)))"
"(let-values(((single-expression?20_188)(pair? given-kws_186)))"
"(let-values(((single-expression?18_189)(if single-expression?20_188(car given-args_187)(void))))"
"(eval-one-top24.1"
" as-tail?19_185"
" as-tail?21_184"
" single-expression?18_189"
" single-expression?20_188"
" c22_182"
" ns23_183)))))))"
"(define-values"
"(eval-one-top26.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_190 given-argc_191)"
"(if(= given-argc_191 4)"
"(let-values(((l1_192) given-kws_190))"
"(let-values(((l1_193)(if(null? l1_192) l1_192(if(eq?(car l1_192) '#:as-tail?)(cdr l1_192) l1_192))))"
"(let-values(((l1_194) l1_193))"
"(let-values(((l1_195)"
"(if(null? l1_194)"
" l1_194"
"(if(eq?(car l1_194) '#:single-expression?)(cdr l1_194) l1_194))))"
"(null? l1_195)))))"
" #f))"
"(case-lambda((given-kws_196 given-args_197 c_198 ns_199)(unpack25.1$1 given-kws_196 given-args_197 c_198 ns_199)))"
" null"
" '(#:as-tail? #:single-expression?)"
"(let-values(((eval-one-top_200)(case-lambda((c_201 ns_202)(unpack25.1$1 null null c_201 ns_202)))))"
" eval-one-top_200)))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_203 to-ns_204)"
"(let-values(((orig-syntax-literals_205)(compiled-in-memory-syntax-literals cim_203)))"
"(let-values(((syntax-literals_206)"
"(if(not to-ns_204)"
"(let-values() orig-syntax-literals_205)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_203)"
"(extract-namespace-scopes to-ns_204))"
"(let-values() orig-syntax-literals_205)"
"(let-values()"
"(let-values(((len_207)(vector-length orig-syntax-literals_205)))"
"(begin"
"(if(exact-nonnegative-integer? len_207)"
"(void)"
"                                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_207)))"
"(let-values(((v_208)(make-vector len_207 0)))"
"(begin"
"(if(zero? len_207)"
"(void)"
"(let-values()"
"(let-values(((vec_209 len_210)"
"(let-values(((vec_211) orig-syntax-literals_205))"
"(begin"
"(if(vector? vec_211)"
"(void)"
"(let-values()(in-vector vec_211)))"
"(values vec_211(unsafe-vector-length vec_211))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_212)"
"(lambda(i_213 pos_214)"
"(if(unsafe-fx< pos_214 len_210)"
"(let-values(((s_215)"
"(unsafe-vector-ref vec_209 pos_214)))"
"(let-values(((i_216)"
"(let-values(((i_217) i_213))"
"(let-values(((i_218)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_208"
" i_217"
"(let-values()"
"(swap-top-level-scopes"
" s_215"
"(compiled-in-memory-namespace-scopes"
" cim_203)"
" to-ns_204)))"
"(unsafe-fx+"
" 1"
" i_217)))))"
"(values i_218)))))"
"(if(not"
"((lambda x_219(unsafe-fx= i_216 len_207))"
" s_215))"
"(for-loop_212 i_216(unsafe-fx+ 1 pos_214))"
" i_216)))"
" i_213))))"
" for-loop_212)"
" 0"
" 0)))))"
" v_208)))))))))"
"(1/make-instance"
" 'link"
" #f"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_203)"
" syntax-literals-id"
" syntax-literals_206)))))"
"(void)"
"(void)"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(let-values(((temp1_2)(syntax-scope-set runtime-stx 0))"
"((sym2_3) sym_1)"
"((temp3_4)"
"(let-values(((runtime-mpi4_5) runtime-mpi)((temp5_6) 0)((sym6_7) sym_1))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" runtime-mpi4_5"
" temp5_6"
" sym6_7)"
"(make-module-binding24.1 runtime-mpi4_5 temp5_6 sym6_7)))))"
"(if(variable-reference-constant?(#%variable-reference add-binding-in-scopes!18.1))"
"(add-binding-in-scopes!16.1 #f #f temp1_2 sym2_3 temp3_4)"
"(add-binding-in-scopes!18.1 temp1_2 sym2_3 temp3_4)))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$10)"
"(make-required"
" 'select-defined-syms-and-bind!"
"(case-lambda"
"((self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7)"
"(apply missing-kw self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7 null)))"
" #f"
" #f))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_8"
" as-transformer?10_9"
" frame-id1_10"
" in4_11"
" in9_12"
" requires+provides3_13"
" requires+provides8_14"
" top-level-bind-scope2_15"
" top-level-bind-scope7_16"
" ids11_17"
" defined-syms12_18"
" self13_19"
" phase14_20"
" all-scopes-stx15_21)"
"(let-values(((ids_22) ids11_17))"
"(let-values(((defined-syms_23) defined-syms12_18))"
"(let-values(((self_24) self13_19))"
"(let-values(((phase_25) phase14_20))"
"(let-values(((all-scopes-stx_26) all-scopes-stx15_21))"
"(let-values(((frame-id_27) frame-id1_10))"
"(let-values(((top-level-bind-scope_28)(if top-level-bind-scope7_16 top-level-bind-scope2_15 #f)))"
"(let-values(((requires+provides_29)(if requires+provides8_14 requires+provides3_13 #f)))"
"(let-values(((orig-s_30)(if in9_12 in4_11 #f)))"
"(let-values(((as-transformer?_31)(if as-transformer?10_9 as-transformer?5_8 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_32)"
"(let-values(((or-part_33)(hash-ref defined-syms_23 phase_25 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((ht_34)(make-hasheq)))"
"(begin(hash-set! defined-syms_23 phase_25 ht_34) ht_34))))))"
"(alt-reverse"
"(let-values(((lst_35) ids_22))"
"(begin"
"(if(list? lst_35)(void)(let-values()(in-list lst_35)))"
"((letrec-values(((for-loop_36)"
"(lambda(fold-var_37 lst_38)"
"(if(pair? lst_38)"
"(let-values(((id_39)(unsafe-car lst_38)))"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_37))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_43)"
"(syntax-e$1"
" id_39)))"
"(let-values(((defined-sym_44)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_32"
" sym_43"
" #f)"
" id_39"
" phase_25"
" top-level-bind-scope_28))"
"(no-extra-scopes?"
" id_39"
" all-scopes-stx_26"
" top-level-bind-scope_28"
" phase_25)"
" #f)"
" sym_43"
"((letrec-values(((loop_46)"
"(lambda(pos_47)"
"(let-values(((s_48)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                  \"~a.~a\""
" sym_43"
" pos_47))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_32"
" s_48"
" #f)"
" id_39"
" phase_25"
" top-level-bind-scope_28)"
"(loop_46"
"(add1"
" pos_47))"
" s_48)))))"
" loop_46)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_32"
" defined-sym_44"
" id_39)"
"(values))))"
"(let-values(((b_45)"
"(let-values(((...er/expand/def-id.rkt:61:14_49)"
" make-module-binding24.1)"
"((self23_50)"
" self_24)"
"((phase24_51)"
" phase_25)"
"((defined-sym25_52)"
" defined-sym_44)"
"((frame-id26_53)"
" frame-id_27)"
"((sym27_54)"
" sym_43))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" frame-id26_53"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sym27_54"
" #t"
" #f"
" #f"
" self23_50"
" phase24_51"
" defined-sym25_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:61:14_49"
" keyword-procedure-extract"
" '(#:frame-id"
" #:nominal-sym)"
" 5)"
" '(#:frame-id"
" #:nominal-sym)"
"(list"
" frame-id26_53"
" sym27_54)"
" self23_50"
" phase24_51"
" defined-sym25_52)))))"
"(begin"
"(if requires+provides_29"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:64:6_55)"
" remove-required-id!71.1)"
"((requires+provides28_56)"
" requires+provides_29)"
"((id29_57)"
" id_39)"
"((phase30_58)"
" phase_25)"
"((b31_59)"
" b_45))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!71.1))"
"(remove-required-id!69.1"
" b31_59"
" requires+provides28_56"
" id29_57"
" phase30_58)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:64:6_55"
" keyword-procedure-extract"
" '(#:unless-matches)"
" 5)"
" '(#:unless-matches)"
"(list"
" b31_59)"
" requires+provides28_56"
" id29_57"
" phase30_58))))"
"(void))"
"(let-values(((...er/expand/def-id.rkt:65:4_60)"
" add-binding!19.1)"
"((id19_61)"
" id_39)"
"((b20_62)"
" b_45)"
"((phase21_63)"
" phase_25)"
"((orig-s22_64)"
" orig-s_30))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!19.1))"
"(add-binding!17.1"
" orig-s22_64"
" #t"
" #f"
" #f"
" id19_61"
" b20_62"
" phase21_63)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:65:4_60"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s22_64)"
" id19_61"
" b20_62"
" phase21_63)))"
"(if requires+provides_29"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:67:6_65)"
" add-defined-or-required-id!15.1)"
"((requires+provides32_66)"
" requires+provides_29)"
"((id33_67)"
" id_39)"
"((phase34_68)"
" phase_25)"
"((b35_69)"
" b_45)"
"((as-transformer?36_70)"
" as-transformer?_31))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!15.1))"
"(add-defined-or-required-id!13.1"
" as-transformer?36_70"
" #f"
" #f"
" requires+provides32_66"
" id33_67"
" phase34_68"
" b35_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:67:6_65"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 6)"
" '(#:as-transformer?)"
"(list"
" as-transformer?36_70)"
" requires+provides32_66"
" id33_67"
" phase34_68"
" b35_69))))"
"(void))"
" defined-sym_44))))))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(for-loop_36 fold-var_40(unsafe-cdr lst_38))))"
" fold-var_37))))"
" for-loop_36)"
" null"
" lst_35))))))))))))))))))"
"(define-values"
"(unpack17.1)"
"(lambda(given-kws_71 given-args_72 ids11_73 defined-syms12_74 self13_75 phase14_76 all-scopes-stx15_77)"
"(let-values(((as-transformer?10_78)(if(pair? given-kws_71)(eq? '#:as-transformer?(car given-kws_71)) #f)))"
"(let-values(((as-transformer?5_79)(if as-transformer?10_78(car given-args_72)(void)))"
"((given-kws_80)(if as-transformer?10_78(cdr given-kws_71) given-kws_71))"
"((given-args_81)(if as-transformer?10_78(cdr given-args_72) given-args_72)))"
"(let-values(((frame-id1_82)(car given-args_81))"
"((given-kws_83)(cdr given-kws_80))"
"((given-args_84)(cdr given-args_81)))"
"(let-values(((in9_85)(if(pair? given-kws_83)(eq? '#:in(car given-kws_83)) #f)))"
"(let-values(((in4_86)(if in9_85(car given-args_84)(void)))"
"((given-kws_87)(if in9_85(cdr given-kws_83) given-kws_83))"
"((given-args_88)(if in9_85(cdr given-args_84) given-args_84)))"
"(let-values(((requires+provides8_89)"
"(if(pair? given-kws_87)(eq? '#:requires+provides(car given-kws_87)) #f)))"
"(let-values(((requires+provides3_90)(if requires+provides8_89(car given-args_88)(void)))"
"((given-kws_91)(if requires+provides8_89(cdr given-kws_87) given-kws_87))"
"((given-args_92)(if requires+provides8_89(cdr given-args_88) given-args_88)))"
"(let-values(((top-level-bind-scope7_93)(pair? given-kws_91)))"
"(let-values(((top-level-bind-scope2_94)(if top-level-bind-scope7_93(car given-args_92)(void))))"
"(select-defined-syms-and-bind!16.1"
" as-transformer?5_79"
" as-transformer?10_78"
" frame-id1_82"
" in4_86"
" in9_85"
" requires+provides3_90"
" requires+provides8_89"
" top-level-bind-scope2_94"
" top-level-bind-scope7_93"
" ids11_73"
" defined-syms12_74"
" self13_75"
" phase14_76"
" all-scopes-stx15_77))))))))))))"
"(define-values"
"(select-defined-syms-and-bind!18.1)"
"(lifted/1.1$10"
"(lambda(given-kws_95 given-argc_96)"
"(if(= given-argc_96 7)"
"(subsets?"
" '(#:frame-id)"
" given-kws_95"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope))"
" #f))"
"(case-lambda"
"((given-kws_97 given-args_98 ids_99 defined-syms_100 self_101 phase_102 all-scopes-stx_103)"
"(unpack17.1 given-kws_97 given-args_98 ids_99 defined-syms_100 self_101 phase_102 all-scopes-stx_103)))"
" '(#:frame-id)"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope)))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_104 all-scopes-stx_105 top-level-bind-scope_106 phase_107)"
"(let-values(((m-id_108)(datum->syntax$1 all-scopes-stx_105(syntax-e$1 id_104))))"
"(let-values(((or-part_109)(bound-identifier=?$1 id_104 m-id_108 phase_107)))"
"(if or-part_109"
" or-part_109"
"(if top-level-bind-scope_106"
"(bound-identifier=?$1 id_104(add-scope m-id_108 top-level-bind-scope_106) phase_107)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_110 id_111 phase_112 top-level-bind-scope_113)"
"(if prev-id_110"
"(if(not(bound-identifier=?$1 prev-id_110 id_111 phase_112))"
"(let-values(((or-part_114)(not top-level-bind-scope_113)))"
"(if or-part_114"
" or-part_114"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_110 top-level-bind-scope_113)"
"(remove-scope id_111 top-level-bind-scope_113)"
" phase_112))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_115 ctx_116)"
"(let-values(((...er/expand/def-id.rkt:87:2_117) select-defined-syms-and-bind!18.1)"
"((tl-ids37_118) tl-ids_115)"
"((temp38_119)(root-expand-context-defined-syms ctx_116))"
"((temp39_120)(namespace-mpi(expand-context-namespace ctx_116)))"
"((temp40_121)(expand-context-phase ctx_116))"
"((temp41_122)(root-expand-context-all-scopes-stx ctx_116))"
"((temp42_123)(root-expand-context-frame-id ctx_116))"
"((temp43_124)(root-expand-context-top-level-bind-scope ctx_116)))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp42_123"
" #f"
" #f"
" #f"
" #f"
" temp43_124"
" #t"
" tl-ids37_118"
" temp38_119"
" temp39_120"
" temp40_121"
" temp41_122)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:87:2_117"
" keyword-procedure-extract"
" '(#:frame-id #:top-level-bind-scope)"
" 7)"
" '(#:frame-id #:top-level-bind-scope)"
"(list temp42_123 temp43_124)"
" tl-ids37_118"
" temp38_119"
" temp39_120"
" temp40_121"
" temp41_122)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_125 phase_126 sym_127 id_128)"
"(let-values(((defined-syms-at-phase_129)"
"(let-values(((or-part_130)(hash-ref defined-syms_125 phase_126 #f)))"
"(if or-part_130"
" or-part_130"
"(let-values(((ht_131)(make-hasheq)))"
"(begin(hash-set! defined-syms_125 phase_126 ht_131) ht_131))))))"
"(hash-set! defined-syms-at-phase_129 sym_127 id_128))))"
"(void)"
"(void)"
"(define-values(box-cons!)(lambda(b_2 v_3)(set-box! b_2(cons v_3(unbox b_2)))))"
"(define-values(box-clear!)(lambda(b_4)(begin0(alt-reverse(unbox b_4))(set-box! b_4 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 0 'convert)"
"(make-struct-field-accessor -ref_8 1 'lifts)"
"(make-struct-field-accessor -ref_8 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-rhs)"
"(let-values(((struct:_35 make-_36 ?_37 -ref_38 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lifted-bind #f 2 0 #f null(current-inspector) #f '(0 1) #f 'lifted-bind)))))"
"(values"
" struct:_35"
" make-_36"
" ?_37"
"(make-struct-field-accessor -ref_38 0 'ids)"
"(make-struct-field-accessor -ref_38 1 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_60 module*-ok?4_61 convert5_62)"
"(let-values(((convert_63) convert5_62))"
"(let-values(((module*-ok?_64)(if module*-ok?4_61 module*-ok?3_60 #f)))"
"(let-values()(lift-context1.1 convert_63(box null) module*-ok?_64))))))"
"(define-values"
"(unpack7.1$1)"
"(lambda(given-kws_65 given-args_66 convert5_67)"
"(let-values(((module*-ok?4_68)(pair? given-kws_65)))"
"(let-values(((module*-ok?3_69)(if module*-ok?4_68(car given-args_66)(void))))"
"(make-lift-context6.1 module*-ok?3_69 module*-ok?4_68 convert5_67)))))"
"(define-values"
"(make-lift-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_70 given-argc_71)"
"(if(= given-argc_71 3)"
"(let-values(((l1_72) given-kws_70))"
"(let-values(((l1_73)(if(null? l1_72) l1_72(if(eq?(car l1_72) '#:module*-ok?)(cdr l1_72) l1_72))))"
"(null? l1_73)))"
" #f))"
"(case-lambda((given-kws_74 given-args_75 convert_76)(unpack7.1$1 given-kws_74 given-args_75 convert_76)))"
" null"
" '(#:module*-ok?)"
"(let-values(((make-lift-context_77)(case-lambda((convert_78)(unpack7.1$1 null null convert_78)))))"
" make-lift-context_77)))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_79 ids_80 rhs_81 phase_82)"
"(let-values(((lifted-ids_83 lifted_84)((lift-context-convert lifts_79) ids_80 rhs_81 phase_82)))"
"(begin(box-cons!(lift-context-lifts lifts_79) lifted_84) lifted-ids_83))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_85)(box-clear!(lift-context-lifts lifts_85))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_86 counter_87)"
"(lambda(ids_88 rhs_89 phase_90)"
"(begin"
"(let-values(((lst_91) ids_88))"
"(begin"
"(if(list? lst_91)(void)(let-values()(in-list lst_91)))"
"((letrec-values(((for-loop_92)"
"(lambda(fold-var_93 lst_94)"
"(if(pair? lst_94)"
"(let-values(((id_95)(unsafe-car lst_94)))"
"(let-values(((fold-var_96)"
"(let-values(((fold-var_97) fold-var_93))"
"(let-values(((fold-var_98)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((key_99)"
"(let-values(((id31_100) id_95)"
"((phase32_101)"
" phase_90)"
"((counter33_102)"
" counter_87))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" #f"
" #f"
" #f"
" #f"
" id31_100"
" phase32_101"
" counter33_102)"
"(add-local-binding!37.1"
" id31_100"
" phase32_101"
" counter33_102)))))"
"(set-box!"
" lift-env_86"
"(hash-set"
"(unbox lift-env_86)"
" key_99"
" variable))))"
"(void)))))"
"(values fold-var_98)))))"
"(for-loop_92 fold-var_96(unsafe-cdr lst_94))))"
" fold-var_93))))"
" for-loop_92)"
"(void)"
" lst_91)))"
"(values ids_88(lifted-bind2.1 ids_88 rhs_89))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_103)"
"(lambda(ids_104 rhs_105 phase_106)"
"(let-values(((post-scope_107)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_103)))))"
"(let-values(((tl-ids_108)"
"(alt-reverse"
"(let-values(((lst_109) ids_104))"
"(begin"
"(if(list? lst_109)(void)(let-values()(in-list lst_109)))"
"((letrec-values(((for-loop_110)"
"(lambda(fold-var_111 lst_112)"
"(if(pair? lst_112)"
"(let-values(((id_113)(unsafe-car lst_112)))"
"(let-values(((fold-var_114)"
"(let-values(((fold-var_115) fold-var_111))"
"(let-values(((fold-var_116)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope id_113 post-scope_107))"
" fold-var_115))))"
"(values fold-var_116)))))"
"(for-loop_110 fold-var_114(unsafe-cdr lst_112))))"
" fold-var_111))))"
" for-loop_110)"
" null"
" lst_109))))))"
"(begin"
"(select-defined-syms-and-bind!/ctx tl-ids_108 ctx_103)"
"(values tl-ids_108(lifted-bind2.1 tl-ids_108 rhs_105))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_117 body_118 s_119 phase_120)"
"(datum->syntax$1"
" #f"
"(let-values(((lst_121)(alt-reverse lifts_117)))"
"(begin"
"(if(list? lst_121)(void)(let-values()(in-list lst_121)))"
"((letrec-values(((for-loop_122)"
"(lambda(body_123 lst_124)"
"(if(pair? lst_124)"
"(let-values(((lift_125)(unsafe-car lst_124)))"
"(let-values(((body_126)"
"(let-values(((body_127) body_123))"
"(let-values(((body_128)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_125)"
"(void)"
"(let-values()"
"                                                                       (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_120)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_125)"
"(lifted-bind-rhs lift_125)))"
" body_127)))))"
"(values body_128)))))"
"(for-loop_122 body_126(unsafe-cdr lst_124))))"
" body_123))))"
" for-loop_122)"
" body_118"
" lst_121))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_129 adjust-form10_130 lifts11_131 body12_132 s13_133 phase14_134)"
"(let-values(((lifts_135) lifts11_131))"
"(let-values(((body_136) body12_132))"
"(let-values(((s_137) s13_133))"
"(let-values(((phase_138) phase14_134))"
"(let-values(((adjust-form_139)(if adjust-form10_130 adjust-form9_129 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_138) 'begin)"
"(append"
"(alt-reverse"
"(let-values(((lst_140) lifts_135))"
"(begin"
"(if(list? lst_140)(void)(let-values()(in-list lst_140)))"
"((letrec-values(((for-loop_141)"
"(lambda(fold-var_142 lst_143)"
"(if(pair? lst_143)"
"(let-values(((lift_144)(unsafe-car lst_143)))"
"(let-values(((fold-var_145)"
"(let-values(((fold-var_146) fold-var_142))"
"(let-values(((fold-var_147)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_139"
"(if(lifted-bind? lift_144)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_138)"
" 'define-values)"
"(lifted-bind-ids lift_144)"
"(lifted-bind-rhs lift_144))))"
"(let-values() lift_144))))"
" fold-var_146))))"
"(values fold-var_147)))))"
"(for-loop_141 fold-var_145(unsafe-cdr lst_143))))"
" fold-var_142))))"
" for-loop_141)"
" null"
" lst_140))))"
"(list body_136))))))))))))"
"(define-values"
"(unpack16.1$1)"
"(lambda(given-kws_148 given-args_149 lifts11_150 body12_151 s13_152 phase14_153)"
"(let-values(((adjust-form10_154)(pair? given-kws_148)))"
"(let-values(((adjust-form9_155)(if adjust-form10_154(car given-args_149)(void))))"
"(wrap-lifts-as-begin15.1 adjust-form9_155 adjust-form10_154 lifts11_150 body12_151 s13_152 phase14_153)))))"
"(define-values"
"(wrap-lifts-as-begin17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_156 given-argc_157)"
"(if(= given-argc_157 6)"
"(let-values(((l1_158) given-kws_156))"
"(let-values(((l1_159)(if(null? l1_158) l1_158(if(eq?(car l1_158) '#:adjust-form)(cdr l1_158) l1_158))))"
"(null? l1_159)))"
" #f))"
"(case-lambda"
"((given-kws_160 given-args_161 lifts_162 body_163 s_164 phase_165)"
"(unpack16.1$1 given-kws_160 given-args_161 lifts_162 body_163 s_164 phase_165)))"
" null"
" '(#:adjust-form)"
"(let-values(((wrap-lifts-as-begin_166)"
"(case-lambda"
"((lifts_167 body_168 s_169 phase_170)(unpack16.1$1 null null lifts_167 body_168 s_169 phase_170)))))"
" wrap-lifts-as-begin_166)))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_171 make-_172 ?_173 -ref_174 -set!_175)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_171"
" make-_172"
" ?_173"
"(make-struct-field-accessor -ref_174 0 'wrt-phase)"
"(make-struct-field-accessor -ref_174 1 'lifts)"
"(make-struct-field-accessor -ref_174 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_201 module*-ok?_202)(module-lift-context18.1 phase_201(box null) module*-ok?_202)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_203)(box-clear!(module-lift-context-lifts module-lifts_203))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_204 s_205 phase_206)"
"(begin"
"(if(let-values(((or-part_207)"
"(if(module-lift-context? module-lifts_204)"
"(module-lift-context-module*-ok? module-lifts_204)"
" #f)))"
"(if or-part_207"
" or-part_207"
"(if(lift-context? module-lifts_204)(lift-context-module*-ok? module-lifts_204) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_208)(core-form-sym s_205 phase_206)))"
"(if(equal? tmp_208 'module)"
"(let-values()(void))"
"(if(equal? tmp_208 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_205))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_205)))))))"
"(if(module-lift-context? module-lifts_204)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_204) s_205))"
"(if(lift-context? module-lifts_204)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_204) s_205))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_209 make-_210 ?_211 -ref_212 -set!_213)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_209"
" make-_210"
" ?_211"
"(make-struct-field-accessor -ref_212 0 'do-require)"
"(make-struct-field-accessor -ref_212 1 'wrt-phase)"
"(make-struct-field-accessor -ref_212 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_239 do-require_240)(require-lift-context19.1 do-require_240 wrt-phase_239(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_241)(box-clear!(require-lift-context-requires require-lifts_241))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_242 s_243 phase_244)"
"(begin"
"((require-lift-context-do-require require-lifts_242) s_243 phase_244)"
"(box-cons!(require-lift-context-requires require-lifts_242) s_243))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_245 make-_246 ?_247 -ref_248 -set!_249)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_245"
" make-_246"
" ?_247"
"(make-struct-field-accessor -ref_248 0 'wrt-phase)"
"(make-struct-field-accessor -ref_248 1 'provides)"
"(make-struct-field-accessor -ref_248 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_248 3 'ends))))"
"(define-values"
"(lifted/1.1$9)"
"(make-required"
" 'make-to-module-lift-context"
"(case-lambda((self_280 phase_281)(apply missing-kw self_280 phase_281 null)))"
" #f"
" #f))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_282 shared-module-ends21_283 phase25_284)"
"(let-values(((phase_285) phase25_284))"
"(let-values(((ends_286) shared-module-ends21_283))"
"(let-values(((end-as-expressions?_287) end-as-expressions?22_282))"
"(let-values()(to-module-lift-context20.1 phase_285(box null) end-as-expressions?_287 ends_286)))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_288 given-args_289 phase25_290)"
"(let-values(((end-as-expressions?22_291)(car given-args_289))"
"((given-kws_292)(cdr given-kws_288))"
"((given-args_293)(cdr given-args_289)))"
"(let-values(((shared-module-ends21_294)(car given-args_293)))"
"(make-to-module-lift-context26.1 end-as-expressions?22_291 shared-module-ends21_294 phase25_290)))))"
"(define-values"
"(make-to-module-lift-context28.1)"
"(lifted/1.1$9"
"(lambda(given-kws_295 given-argc_296)"
"(if(= given-argc_296 3)"
"(let-values(((l2_297) given-kws_295))"
"(if(pair? l2_297)"
"(if(eq?(car l2_297) '#:end-as-expressions?)"
"(let-values(((l2_298)(cdr l2_297)))"
"(if(pair? l2_298)(if(eq?(car l2_298) '#:shared-module-ends)(null?(cdr l2_298)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_299 given-args_300 phase_301)(unpack27.1 given-kws_299 given-args_300 phase_301)))"
" '(#:end-as-expressions? #:shared-module-ends)"
" '(#:end-as-expressions? #:shared-module-ends)))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_302)(box-clear!(to-module-lift-context-ends to-module-lifts_302))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_303)(box-clear!(to-module-lift-context-provides to-module-lifts_303))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_304 s_305 phase_306)"
"(box-cons!(to-module-lift-context-provides to-module-lifts_304) s_305)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_307 s_308 phase_309)(box-cons!(to-module-lift-context-ends to-module-lifts_307) s_308)))"
"(void)"
"(void)"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'already-expanded"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'binding-layer))))"
"(void)"
"(void)"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_1 make-_2 ?_3)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values(((lst_3) v_1))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6)))"
"(let-values(((result_8)"
"(let-values(((result_9) result_5))"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_10)))))"
"(if(not((lambda x_11(not result_8)) s_7))"
"(for-loop_4 result_8(unsafe-cdr lst_6))"
" result_8)))"
" result_5))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_12 ctx_13)"
"(if(expansion-contexts? t_12)"
"(not(memq(context->symbol(expand-context-context ctx_13))(expansion-contexts-ref t_12)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_14)(if(symbol? context_14) context_14 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_15 t_16 ctx_17)"
"(let-values(((wrap_18)"
"(lambda(sym_20)"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_20)(expand-context-phase ctx_17))"
" s_15)))))"
"(let-values(((fail_19)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_17)))"
" s_15))))"
"(let-values(((tmp_21)(context->symbol(expand-context-context ctx_17))))"
"(if(equal? tmp_21 'module-begin)"
"(let-values()(wrap_18 'begin))"
"(if(if(equal? tmp_21 'module) #t(if(equal? tmp_21 'top-level) #t(equal? tmp_21 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_16))(wrap_18 '#%expression)(fail_19)))"
"(let-values()(fail_19)))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_31 key_32)"
"(if(set-member?(reference-record-already-bound rr_31) key_32)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_31"
"(set-add(reference-record-reference-before-bound rr_31) key_32))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_33)"
"(let-values(((stop?_34 fold-var_35)"
"(let-values(((lst_36) rrs_33))"
"(begin"
"(if(list? lst_36)(void)(let-values()(in-list lst_36)))"
"((letrec-values(((for-loop_37)"
"(lambda(stop-after?_38 fold-var_39 lst_40)"
"(if(pair? lst_40)"
"(let-values(((rr_41)(unsafe-car lst_40)))"
"(let-values(((stop-after?_42 fold-var_43)"
"(let-values(((stop-after?_44) stop-after?_38)"
"((fold-var_45) fold-var_39))"
"(let-values(((stop?_46)"
"(reference-record-all-referenced? rr_41)))"
"(begin"
" #t"
"((letrec-values(((for-loop_47)"
"(lambda(stop-after?_48 fold-var_49)"
"(let-values()"
"(let-values(((stop-after?_50"
" fold-var_51)"
"(let-values(((stop-after?_52)"
" stop-after?_48)"
"((fold-var_53)"
" fold-var_49))"
"(let-values(((stop-after?_54)"
"(let-values(((or-part_55)"
" stop-after?_52))"
"(if or-part_55"
" or-part_55"
" stop?_46))))"
"(begin"
" #t"
"((letrec-values(((for-loop_56)"
"(lambda(stop-after?_57"
" fold-var_58)"
"(let-values()"
"(let-values(((stop-after?_59"
" fold-var_60)"
"(let-values(((stop-after?_61)"
" stop-after?_57)"
"((fold-var_62)"
" fold-var_58))"
"(if stop?_46"
"(values"
" stop-after?_61"
" fold-var_62)"
"(let-values(((stop-after?_63)"
" stop-after?_61)"
"((fold-var_64)"
" fold-var_62))"
"(let-values(((stop-after?_65"
" fold-var_66)"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?!"
" rr_41"
" #t))"
"(void)))))"
"(values"
" stop-after?_63"
" fold-var_67)))))"
"(values"
" stop-after?_65"
" fold-var_66)))))))"
"(values"
" stop-after?_59"
" fold-var_60))))))"
" for-loop_56)"
" stop-after?_54"
" fold-var_53))))))"
"(values"
" stop-after?_50"
" fold-var_51))))))"
" for-loop_47)"
" stop-after?_44"
" fold-var_45))))))"
"(if(not((lambda x_68 stop-after?_42) rr_41))"
"(for-loop_37 stop-after?_42 fold-var_43(unsafe-cdr lst_40))"
"(values stop-after?_42 fold-var_43))))"
"(values stop-after?_38 fold-var_39)))))"
" for-loop_37)"
" #f"
"(void)"
" lst_36)))))"
"(values fold-var_35))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_69 keys_70)"
"(begin"
"(set-reference-record-already-bound!"
" rr_69"
"(let-values(((lst_71) keys_70))"
"(begin"
"(if(list? lst_71)(void)(let-values()(in-list lst_71)))"
"((letrec-values(((for-loop_72)"
"(lambda(ab_73 lst_74)"
"(if(pair? lst_74)"
"(let-values(((key_75)(unsafe-car lst_74)))"
"(let-values(((ab_76)"
"(let-values(((ab_77) ab_73))"
"(let-values(((ab_78)(let-values()(set-add ab_77 key_75))))"
"(values ab_78)))))"
"(for-loop_72 ab_76(unsafe-cdr lst_74))))"
" ab_73))))"
" for-loop_72)"
"(reference-record-already-bound rr_69)"
" lst_71))))"
"(set-reference-record-reference-before-bound!"
" rr_69"
"(let-values(((lst_79) keys_70))"
"(begin"
"(if(list? lst_79)(void)(let-values()(in-list lst_79)))"
"((letrec-values(((for-loop_80)"
"(lambda(rbb_81 lst_82)"
"(if(pair? lst_82)"
"(let-values(((key_83)(unsafe-car lst_82)))"
"(let-values(((rbb_84)"
"(let-values(((rbb_85) rbb_81))"
"(let-values(((rbb_86)(let-values()(set-remove rbb_85 key_83))))"
"(values rbb_86)))))"
"(for-loop_80 rbb_84(unsafe-cdr lst_82))))"
" rbb_81))))"
" for-loop_80)"
"(reference-record-reference-before-bound rr_69)"
" lst_79)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_87)"
"(let-values(((or-part_88)(reference-record-all-referenced? rr_87)))"
"(if or-part_88 or-part_88(positive?(set-count(reference-record-reference-before-bound rr_87)))))))"
"(void)"
"(void)"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() #f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(prim-letrec-values . 113)"
"(enter-macro . 8)"
"(opaque-expr . 146)"
"(prim-set! . 123)"
"(prim-if . 105)"
"(prim-define-values . 104)"
"(block->letrec . 14)"
"(lift-statement . 134)"
"(enter-prim . 6)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(track-origin . 152)"
"(lift-loop . 128)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(start-expand . 141)"
"(enter-block . 10)"
"(prim-module-begin . 102)"
"(letrec-syntaxes-renames . 19)"
"(prim-#%datum . 115)"
"(enter-list . 4)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(next-group . 13)"
"(prim-quote-syntax . 118)"
"(exit-prim . 7)"
"(module-lift-loop . 137)"
"(exit-bind . 145)"
"(module-body . 23)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(exit-check . 127)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(exit-local-expr . 140)"
"(exit-list . 5)"
"(block-renames . 24)"
"(prim-quote . 117)"
"(enter-check . 126)"
"(block->list . 12)"
"(macro-pre-x . 21)"
"(prim-begin-for-syntax . 156)"
"(tag . 142)"
"(local-bind . 143)"
"(enter-local . 130)"
"(local-pre . 132)"
"(prim-#%top . 116)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(prim-submodule* . 159)"
"(lift-provide . 151)"
"(prim-begin . 107)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(prim-provide . 122)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(prim-with-continaution-mark . 106)"
"(next . 3)"
"(case-lambda-renames . 18)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(visit . 0)"
"(prim-let-values . 112)"
"(resolve . 1)))"
"(void)"
"(void)"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_21 alternate-id2_22 s3_23 ctx4_24)"
"(let-values(((s_25) s3_23))"
"(let-values(((ctx_26) ctx4_24))"
"(let-values(((alternate-id_27)(if alternate-id2_22 alternate-id1_21 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_28)(expand-context-observer ctx_26)))"
"(if obs_28"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_28"
"(if(expand-context-only-immediate? ctx_26) 'enter-check 'visit)"
" s_25)))"
"(void)))"
"(if(identifier? s_25)"
"(let-values()(expand-identifier s_25 ctx_26 alternate-id_27))"
"(if(if(pair?(syntax-e/no-taint s_25))(identifier?(car(syntax-e/no-taint s_25))) #f)"
"(let-values()(expand-id-application-form s_25 ctx_26 alternate-id_27))"
"(if(let-values(((or-part_29)(pair?(syntax-e$1(syntax-disarm$1 s_25)))))"
"(if or-part_29 or-part_29(null?(syntax-e$1(syntax-disarm$1 s_25)))))"
"(let-values()(expand-implicit '#%app s_25 ctx_26 #f))"
"(if(already-expanded?(syntax-e/no-taint s_25))"
"(let-values()(expand-already-expanded s_25 ctx_26))"
"(let-values()(expand-implicit '#%datum s_25 ctx_26 #f)))))))))))))"
"(define-values"
"(unpack6.1)"
"(lambda(given-kws_30 given-args_31 s3_32 ctx4_33)"
"(let-values(((alternate-id2_34)(pair? given-kws_30)))"
"(let-values(((alternate-id1_35)(if alternate-id2_34(car given-args_31)(void))))"
"(expand5.1 alternate-id1_35 alternate-id2_34 s3_32 ctx4_33)))))"
"(define-values"
"(expand7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_36 given-argc_37)"
"(if(= given-argc_37 4)"
"(let-values(((l1_38) given-kws_36))"
"(let-values(((l1_39)(if(null? l1_38) l1_38(if(eq?(car l1_38) '#:alternate-id)(cdr l1_38) l1_38))))"
"(null? l1_39)))"
" #f))"
"(case-lambda((given-kws_40 given-args_41 s_42 ctx_43)(unpack6.1 given-kws_40 given-args_41 s_42 ctx_43)))"
" null"
" '(#:alternate-id)"
"(let-values(((expand_44)(case-lambda((s_45 ctx_46)(unpack6.1 null null s_45 ctx_46))))) expand_44)))"
"(define-values"
"(expand-identifier)"
"(lambda(s_47 ctx_48 alternate-id_49)"
"(let-values(((id_50)(let-values(((or-part_51) alternate-id_49))(if or-part_51 or-part_51 s_47))))"
"(if(free-id-set-member?(expand-context-stops ctx_48)(expand-context-phase ctx_48) id_50)"
"(let-values()"
"(begin"
"(let-values(((obs_52)(expand-context-observer ctx_48)))"
"(if obs_52"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()"
"(begin"
"(call-expand-observe obs_52 'enter-prim s_47)"
"(call-expand-observe obs_52 'prim-stop)"
"(call-expand-observe obs_52 'exit-prim s_47)"
"(call-expand-observe obs_52 'return s_47)))"
"(void)))"
"(void)))"
" s_47))"
"(let-values()"
"(let-values(((binding_53)"
"(let-values(((...nder/expand/main.rkt:85:19_54) resolve+shift22.1)"
"((id54_55) id_50)"
"((temp55_56)(expand-context-phase ctx_48))"
"((temp56_57) 'ambiguous)"
"((temp57_58) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 temp56_57 #t #f #f #f #f temp57_58 #t #f #f id54_55 temp55_56)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:85:19_54"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp56_57 temp57_58)"
" id54_55"
" temp55_56)))))"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_48)))"
"(if obs_59"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()(call-expand-observe obs_59 'resolve id_50))"
"(void)))"
"(void)))"
"(if(eq? binding_53 'ambiguous)"
"(let-values()(raise-ambiguous-error id_50 ctx_48))"
"(if(not binding_53)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_47 alternate-id_49) ctx_48 s_47))"
"(let-values()"
"(let-values(((t_60 insp-of-t_61)"
"(let-values(((...nder/expand/main.rkt:97:34_62) lookup17.1)"
"((binding58_63) binding_53)"
"((ctx59_64) ctx_48)"
"((id60_65) id_50)"
"((temp61_66)(if alternate-id_49 s_47 #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp61_66 #t #f #f binding58_63 ctx59_64 id60_65)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:97:34_62"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp61_66)"
" binding58_63"
" ctx59_64"
" id60_65)))))"
"(dispatch t_60 insp-of-t_61 s_47 id_50 ctx_48 binding_53))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_67 ctx_68 alternate-id_69)"
"(let-values(((disarmed-s_70)(syntax-disarm$1 s_67 #f)))"
"(let-values(((id_71)"
"(let-values(((or-part_72) alternate-id_69))"
"(if or-part_72 or-part_72(car(syntax-e$1 disarmed-s_70))))))"
"(if(free-id-set-member?(expand-context-stops ctx_68)(expand-context-phase ctx_68) id_71)"
"(let-values()"
"(begin"
"(let-values(((obs_73)(expand-context-observer ctx_68)))"
"(if obs_73"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_68))"
"(let-values()"
"(begin"
"(call-expand-observe obs_73 'enter-prim s_67)"
"(call-expand-observe obs_73 'prim-stop)"
"(call-expand-observe obs_73 'exit-prim s_67)"
"(call-expand-observe obs_73 'return s_67)))"
"(void)))"
"(void)))"
" s_67))"
"(let-values()"
"(let-values(((binding_74)"
"(let-values(((...nder/expand/main.rkt:106:19_75) resolve+shift22.1)"
"((id62_76) id_71)"
"((temp63_77)(expand-context-phase ctx_68))"
"((temp64_78) 'ambiguous)"
"((temp65_79) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 temp64_78 #t #f #f #f #f temp65_79 #t #f #f id62_76 temp63_77)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:106:19_75"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp64_78 temp65_79)"
" id62_76"
" temp63_77)))))"
"(begin"
"(let-values(((obs_80)(expand-context-observer ctx_68)))"
"(if obs_80"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_68))"
"(let-values()(call-expand-observe obs_80 'resolve id_71))"
"(void)))"
"(void)))"
"(if(eq? binding_74 'ambiguous)"
"(let-values()(raise-ambiguous-error id_71 ctx_68))"
"(if(not binding_74)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_67 alternate-id_69) ctx_68 id_71))"
"(let-values()"
"(let-values(((t_81 insp-of-t_82)"
"(let-values(((...nder/expand/main.rkt:118:34_83) lookup17.1)"
"((binding66_84) binding_74)"
"((ctx67_85) ctx_68)"
"((id68_86) id_71)"
"((temp69_87)(if alternate-id_69(car(syntax-e$1 disarmed-s_70)) #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp69_87 #t #f #f binding66_84 ctx67_85 id68_86)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:118:34_83"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp69_87)"
" binding66_84"
" ctx67_85"
" id68_86)))))"
"(if(variable? t_81)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_67 alternate-id_69) ctx_68 id_71))"
"(let-values()(dispatch t_81 insp-of-t_82 s_67 id_71 ctx_68 binding_74)))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_88 s_89 ctx_90 trigger-id_91)"
"(let-values(((disarmed-s_92)(syntax-disarm$1 s_89)))"
"(let-values(((id_93)(datum->syntax$1 disarmed-s_92 sym_88)))"
"(if(free-id-set-member?(expand-context-stops ctx_90)(expand-context-phase ctx_90) id_93)"
"(let-values()"
"(begin"
"(let-values(((obs_94)(expand-context-observer ctx_90)))"
"(if obs_94"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_90))"
"(let-values()"
"(begin"
"(call-expand-observe obs_94 'enter-prim s_89)"
"(call-expand-observe obs_94 'prim-stop)"
"(call-expand-observe obs_94 'exit-prim s_89)"
"(call-expand-observe obs_94 'return s_89)))"
"(void)))"
"(void)))"
" s_89))"
"(let-values()"
"(let-values(((b_95)"
"(let-values(((...nder/expand/main.rkt:136:13_96) resolve+shift22.1)"
"((id70_97) id_93)"
"((temp71_98)(expand-context-phase ctx_90))"
"((temp72_99) 'ambiguous)"
"((temp73_100) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 temp72_99 #t #f #f #f #f temp73_100 #t #f #f id70_97 temp71_98)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:136:13_96"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp72_99 temp73_100)"
" id70_97"
" temp71_98)))))"
"(if(eq? b_95 'ambiguous)"
"(let-values()(raise-ambiguous-error id_93 ctx_90))"
"(let-values()"
"(let-values(((t_101 insp-of-t_102)"
"(if b_95"
"(let-values(((b74_103) b_95)((ctx75_104) ctx_90)((id76_105) id_93))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 #f #f #f #f b74_103 ctx75_104 id76_105)"
"(lookup17.1 b74_103 ctx75_104 id76_105)))"
"(values #f #f))))"
"(if(transformer? t_101)"
"(let-values()"
"(dispatch-transformer"
" t_101"
" insp-of-t_102"
"(make-explicit sym_88 s_89 disarmed-s_92)"
" id_93"
" ctx_90"
" b_95))"
"(if(expand-context-only-immediate? ctx_90)"
"(let-values()"
"(begin"
"(let-values(((obs_106)(expand-context-observer ctx_90)))"
"(if obs_106"
"(let-values()(let-values()(call-expand-observe obs_106 'exit-check s_89)))"
"(void)))"
" s_89))"
"(if(core-form? t_101)"
"(let-values()"
"(if(if(eq? sym_88 '#%top)"
"(if(eq?(core-form-name t_101) '#%top)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_90)"
" #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_101 s_89 ctx_90))"
"(let-values()"
"(dispatch-core-form t_101(make-explicit sym_88 s_89 disarmed-s_92) ctx_90))))"
"(let-values()"
"(let-values(((tl-id_107)"
"(if(eq? sym_88 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_90)"
"(add-scope s_89(root-expand-context-top-level-bind-scope ctx_90))"
" #f)"
" #f)))"
"(if(if tl-id_107"
"(let-values(((tl-id77_108) tl-id_107)((temp78_109)(expand-context-phase ctx_90)))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1 #f #f #f #f #f #f #f #f tl-id77_108 temp78_109)"
"(resolve31.1 tl-id77_108 temp78_109)))"
" #f)"
"(let-values() tl-id_107)"
"(let-values()"
"(raise-syntax-implicit-error s_89 sym_88 trigger-id_91 ctx_90))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_110 ctx_111)"
"(let-values(((ae_112)(syntax-e$1 s_110)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_114)(syntax-any-macro-scopes? s_110)))"
"(if or-part_114"
" or-part_114"
"(not"
"(eq?(expand-context-binding-layer ctx_111)(already-expanded-binding-layer ae_112)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_112)))"
"(void))"
"(values))))"
"(let-values(((result-s_113)(syntax-track-origin$1(already-expanded-s ae_112) s_110)))"
"(begin"
"(let-values(((obs_115)(expand-context-observer ctx_111)))"
"(if obs_115"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_115 'tag result-s_113)"
"(call-expand-observe obs_115 'opaque-expr result-s_113))))"
"(void)))"
" result-s_113))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_116 s_117 disarmed-s_118)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_118(cons sym_116 disarmed-s_118) s_117 s_117) s_117)))"
"(define-values"
"(dispatch)"
"(lambda(t_119 insp-of-t_120 s_121 id_122 ctx_123 binding_124)"
"(if(core-form? t_119)"
"(let-values()(dispatch-core-form t_119 s_121 ctx_123))"
"(if(transformer? t_119)"
"(let-values()(dispatch-transformer t_119 insp-of-t_120 s_121 id_122 ctx_123 binding_124))"
"(if(variable? t_119)"
"(let-values()(dispatch-variable t_119 s_121 id_122 ctx_123 binding_124))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" t_119)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_125 s_126 ctx_127)"
"(if(expand-context-only-immediate? ctx_127)"
"(let-values()"
"(begin"
"(let-values(((obs_128)(expand-context-observer ctx_127)))"
"(if obs_128(let-values()(let-values()(call-expand-observe obs_128 'exit-check s_126)))(void)))"
" s_126))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_130)(expand-context-observer ctx_127)))"
"(if obs_130"
"(let-values()(let-values()(call-expand-observe obs_130 'enter-prim s_126)))"
"(void)))"
"(values))))"
"(let-values(((result-s_129)((core-form-expander t_125) s_126 ctx_127)))"
"(begin"
"(let-values(((obs_131)(expand-context-observer ctx_127)))"
"(if obs_131"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_131 'exit-prim result-s_129)"
"(call-expand-observe obs_131 'return result-s_129))))"
"(void)))"
" result-s_129)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_132 s_133 ctx_134)"
"(let-values((()"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_134)))"
"(if obs_136"
"(let-values()(let-values()(call-expand-observe obs_136 'enter-prim s_133)))"
"(void)))"
"(values))))"
"(let-values(((result-s_135)((core-form-expander t_132) s_133 ctx_134 #t)))"
"(begin"
"(let-values(((obs_137)(expand-context-observer ctx_134)))"
"(if obs_137"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_137 'exit-prim result-s_135)"
"(call-expand-observe obs_137 'return result-s_135))))"
"(void)))"
" result-s_135)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_138 insp-of-t_139 s_140 id_141 ctx_142 binding_143)"
"(if(not-in-this-expand-context? t_138 ctx_142)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_142)))"
"(if obs_145"
"(let-values()(let-values()(call-expand-observe obs_145 'enter-macro s_140)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_144)"
"(avoid-current-expand-context(substitute-alternate-id s_140 id_141) t_138 ctx_142)))"
"(begin"
"(let-values(((obs_146)(expand-context-observer ctx_142)))"
"(if obs_146(let-values()(let-values()(call-expand-observe obs_146 'exit-macro s_140)))(void)))"
"(let-values(((adj-s79_147) adj-s_144)((ctx80_148) ctx_142))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f adj-s79_147 ctx80_148)"
"(expand7.1 adj-s79_147 ctx80_148)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_151)(expand-context-observer ctx_142)))"
"(if obs_151"
"(let-values()"
"(if(expand-context-only-immediate? ctx_142)"
"(let-values()"
"(begin"
"(call-expand-observe obs_151 'visit s_140)"
"(call-expand-observe obs_151 'resolves id_141)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_149 re-ctx_150)"
"(apply-transformer t_138 insp-of-t_139 s_140 id_141 ctx_142 binding_143)))"
"(begin"
"(let-values(((obs_152)(expand-context-observer ctx_142)))"
"(if obs_152"
"(let-values()"
"(if(expand-context-only-immediate? ctx_142)"
"(let-values()(call-expand-observe obs_152 'return exp-s_149))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_142)"
"(let-values() exp-s_149)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:245:11_153) expand7.1)"
"((exp-s81_154) exp-s_149)"
"((re-ctx82_155) re-ctx_150)"
"((temp83_156)(if(1/rename-transformer? t_138)(1/rename-transformer-target t_138) #f)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 temp83_156 #t exp-s81_154 re-ctx82_155)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:245:11_153"
" keyword-procedure-extract"
" '(#:alternate-id)"
" 4)"
" '(#:alternate-id)"
"(list temp83_156)"
" exp-s81_154"
" re-ctx82_155))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_157 s_158 id_159 ctx_160 binding_161)"
"(if(expand-context-only-immediate? ctx_160)"
"(let-values()"
"(begin"
"(let-values(((obs_162)(expand-context-observer ctx_160)))"
"(if obs_162(let-values()(let-values()(call-expand-observe obs_162 'exit-check s_158)))(void)))"
" id_159))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_164)(expand-context-observer ctx_160)))"
"(if obs_164"
"(let-values()(let-values()(call-expand-observe obs_164 'variable s_158)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_161)(values))))"
"(let-values(((result-s_163)"
"(let-values(((...nder/expand/main.rkt:260:21_165) substitute-variable8.1)"
"((id84_166) id_159)"
"((t85_167) t_157)"
"((temp86_168)"
"(free-id-set-empty-or-just-module*?(expand-context-stops ctx_160))))"
"(if(variable-reference-constant?(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1 temp86_168 id84_166 t85_167)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:260:21_165"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp86_168)"
" id84_166"
" t85_167)))))"
"(begin"
"(let-values(((obs_169)(expand-context-observer ctx_160)))"
"(if obs_169"
"(let-values()(let-values()(call-expand-observe obs_169 'return result-s_163)))"
"(void)))"
" result-s_163))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_170 insp-of-t_171 s_172 id_173 ctx_174 binding_175)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_188)(expand-context-observer ctx_174)))"
"(if obs_188"
"(let-values()(let-values()(call-expand-observe obs_188 'enter-macro s_172)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_176)(syntax-disarm$1 s_172)))"
"(let-values(((intro-scope_177)(new-scope 'macro)))"
"(let-values(((intro-s_178)(add-scope disarmed-s_176 intro-scope_177)))"
"(let-values(((use-s_179 use-scopes_180)(maybe-add-use-site-scope intro-s_178 ctx_174 binding_175)))"
"(let-values(((cleaned-s_181)(syntax-remove-taint-dispatch-properties use-s_179)))"
"(let-values(((def-ctx-scopes_182)(box null)))"
"(let-values(((transformed-s_183)"
"(apply-transformer-in-context"
" t_170"
" cleaned-s_181"
" ctx_174"
" insp-of-t_171"
" intro-scope_177"
" use-scopes_180"
" def-ctx-scopes_182"
" id_173)))"
"(let-values(((result-s_184)(flip-scope transformed-s_183 intro-scope_177)))"
"(let-values(((post-s_185)(maybe-add-post-expansion-scope result-s_184 ctx_174)))"
"(let-values(((tracked-s_186)(syntax-track-origin$1 post-s_185 cleaned-s_181 id_173)))"
"(let-values(((rearmed-s_187)"
"(taint-dispatch"
" tracked-s_186"
"(lambda(t-s_189)(syntax-rearm$1 t-s_189 s_172))"
"(expand-context-phase ctx_174))))"
"(begin"
"(let-values(((obs_190)(expand-context-observer ctx_174)))"
"(if obs_190"
"(let-values()"
"(let-values()(call-expand-observe obs_190 'exit-macro rearmed-s_187)))"
"(void)))"
"(values"
" rearmed-s_187"
"(accumulate-def-ctx-scopes ctx_174 def-ctx-scopes_182))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_191 cleaned-s_192 ctx_193 insp-of-t_194 intro-scope_195 use-scopes_196 def-ctx-scopes_197 id_198)"
"(let-values((()"
"(begin"
"(let-values(((obs_203)(expand-context-observer ctx_193)))"
"(if obs_203"
"(let-values()(let-values()(call-expand-observe obs_203 'macro-pre-x cleaned-s_192)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_199)"
"(not"
"(let-values(((or-part_204)(expand-context-only-immediate? ctx_193)))"
"(if or-part_204"
" or-part_204"
"(not(free-id-set-empty-or-just-module*?(expand-context-stops ctx_193))))))))"
"(let-values(((accum-ctx_200)"
"(if(if confine-def-ctx-scopes?_199"
"(if(expand-context-def-ctx-scopes ctx_193)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_193))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_193(expand-context-def-ctx-scopes ctx_193))"
" ctx_193)))"
"(let-values(((m-ctx_201)"
"(let-values(((the-struct_205) accum-ctx_200))"
"(if(expand-context? the-struct_205)"
"(let-values(((current-introduction-scopes87_206)(cons intro-scope_195 use-scopes_196))"
"((def-ctx-scopes88_207)"
"(if confine-def-ctx-scopes?_199"
" def-ctx-scopes_197"
"(expand-context-def-ctx-scopes ctx_193))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_205)"
"(root-expand-context-post-expansion-scope the-struct_205)"
"(root-expand-context-top-level-bind-scope the-struct_205)"
"(root-expand-context-all-scopes-stx the-struct_205)"
"(root-expand-context-use-site-scopes the-struct_205)"
"(root-expand-context-defined-syms the-struct_205)"
"(root-expand-context-frame-id the-struct_205)"
"(root-expand-context-counter the-struct_205)"
"(root-expand-context-lift-key the-struct_205)"
"(expand-context-context the-struct_205)"
"(expand-context-phase the-struct_205)"
"(expand-context-namespace the-struct_205)"
"(expand-context-env the-struct_205)"
"(expand-context-user-env the-struct_205)"
"(expand-context-post-expansion-scope-action the-struct_205)"
"(expand-context-scopes the-struct_205)"
" def-ctx-scopes88_207"
"(expand-context-binding-layer the-struct_205)"
"(expand-context-reference-records the-struct_205)"
"(expand-context-only-immediate? the-struct_205)"
"(expand-context-just-once? the-struct_205)"
"(expand-context-module-begin-k the-struct_205)"
"(expand-context-need-eventually-defined the-struct_205)"
"(expand-context-allow-unbound? the-struct_205)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_205)"
"(expand-context-stops the-struct_205)"
" current-introduction-scopes87_206"
"(expand-context-declared-submodule-names the-struct_205)"
"(expand-context-lifts the-struct_205)"
"(expand-context-lift-envs the-struct_205)"
"(expand-context-module-lifts the-struct_205)"
"(expand-context-require-lifts the-struct_205)"
"(expand-context-to-module-lifts the-struct_205)"
"(expand-context-requires+provides the-struct_205)"
"(expand-context-name the-struct_205)"
"(expand-context-observer the-struct_205)))"
"                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_205)))))"
"(let-values(((transformed-s_202)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_201"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_193)"
"(add1(expand-context-phase ctx_193)))"
" current-module-code-inspector"
"(let-values(((or-part_208) insp-of-t_194))"
"(if or-part_208 or-part_208(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_191) cleaned-s_192)))))))"
"(begin"
"(let-values(((obs_209)(expand-context-observer ctx_193)))"
"(if obs_209"
"(let-values()(let-values()(call-expand-observe obs_209 'macro-post-x transformed-s_202)))"
"(void)))"
"(if(syntax?$1 transformed-s_202)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_198)"
"                     \"received value from syntax expander was not syntax\""
"                     \"received\""
" transformed-s_202)))"
" transformed-s_202))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_210 ctx_211 binding_212)"
"(if(if(root-expand-context-use-site-scopes ctx_211)"
"(matching-frame?(root-expand-context-frame-id ctx_211)(binding-frame-id binding_212))"
" #f)"
"(let-values()"
"(let-values(((sc_213)(new-scope 'use-site)))"
"(let-values(((b_214)(root-expand-context-use-site-scopes ctx_211)))"
"(begin(set-box! b_214(cons sc_213(unbox b_214)))(values(add-scope s_210 sc_213)(list sc_213))))))"
"(let-values()(values s_210 null)))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_215 bind-frame-id_216)"
"(if current-frame-id_215"
"(let-values(((or-part_217)(eq? current-frame-id_215 bind-frame-id_216)))"
"(if or-part_217 or-part_217(eq? current-frame-id_215 'all)))"
" #f)))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_218 ctx_219)"
"(if(root-expand-context-post-expansion-scope ctx_219)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_219) s_218(root-expand-context-post-expansion-scope ctx_219)))"
"(let-values() s_218))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_220 def-ctx-scopes_221)"
"(if(null?(unbox def-ctx-scopes_221))"
" ctx_220"
"(let-values(((the-struct_222) ctx_220))"
"(if(expand-context? the-struct_222)"
"(let-values(((scopes89_223)(append(unbox def-ctx-scopes_221)(expand-context-scopes ctx_220))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_222)"
"(root-expand-context-post-expansion-scope the-struct_222)"
"(root-expand-context-top-level-bind-scope the-struct_222)"
"(root-expand-context-all-scopes-stx the-struct_222)"
"(root-expand-context-use-site-scopes the-struct_222)"
"(root-expand-context-defined-syms the-struct_222)"
"(root-expand-context-frame-id the-struct_222)"
"(root-expand-context-counter the-struct_222)"
"(root-expand-context-lift-key the-struct_222)"
"(expand-context-context the-struct_222)"
"(expand-context-phase the-struct_222)"
"(expand-context-namespace the-struct_222)"
"(expand-context-env the-struct_222)"
"(expand-context-user-env the-struct_222)"
"(expand-context-post-expansion-scope-action the-struct_222)"
" scopes89_223"
"(expand-context-def-ctx-scopes the-struct_222)"
"(expand-context-binding-layer the-struct_222)"
"(expand-context-reference-records the-struct_222)"
"(expand-context-only-immediate? the-struct_222)"
"(expand-context-just-once? the-struct_222)"
"(expand-context-module-begin-k the-struct_222)"
"(expand-context-need-eventually-defined the-struct_222)"
"(expand-context-allow-unbound? the-struct_222)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_222)"
"(expand-context-stops the-struct_222)"
"(expand-context-current-introduction-scopes the-struct_222)"
"(expand-context-declared-submodule-names the-struct_222)"
"(expand-context-lifts the-struct_222)"
"(expand-context-lift-envs the-struct_222)"
"(expand-context-module-lifts the-struct_222)"
"(expand-context-require-lifts the-struct_222)"
"(expand-context-to-module-lifts the-struct_222)"
"(expand-context-requires+provides the-struct_222)"
"(expand-context-name the-struct_222)"
"(expand-context-observer the-struct_222)))"
"          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_222))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_224"
" in10_225"
" out-of-context-as-variable?9_226"
" out-of-context-as-variable?11_227"
" b12_228"
" ctx13_229"
" id14_230)"
"(let-values(((b_231) b12_228))"
"(let-values(((ctx_232) ctx13_229))"
"(let-values(((id_233) id14_230))"
"(let-values(((in-s_234)(if in10_225 in8_224 #f)))"
"(let-values(((out-of-context-as-variable?_235)"
"(if out-of-context-as-variable?11_227 out-of-context-as-variable?9_226 #f)))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:395:2_236) binding-lookup50.1)"
"((b90_237) b_231)"
"((temp91_238)(expand-context-env ctx_232))"
"((temp92_239)(expand-context-lift-envs ctx_232))"
"((temp93_240)(expand-context-namespace ctx_232))"
"((temp94_241)(expand-context-phase ctx_232))"
"((id95_242) id_233)"
"((in-s96_243) in-s_234)"
"((out-of-context-as-variable?97_244) out-of-context-as-variable?_235))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup50.1))"
"(binding-lookup48.1"
" in-s96_243"
" #t"
" out-of-context-as-variable?97_244"
" #t"
" b90_237"
" temp91_238"
" temp92_239"
" temp93_240"
" temp94_241"
" id95_242)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:395:2_236"
" keyword-procedure-extract"
" '(#:in #:out-of-context-as-variable?)"
" 8)"
" '(#:in #:out-of-context-as-variable?)"
"(list in-s96_243 out-of-context-as-variable?97_244)"
" b90_237"
" temp91_238"
" temp92_239"
" temp93_240"
" temp94_241"
" id95_242)))))))))))"
"(define-values"
"(unpack16.1)"
"(lambda(given-kws_245 given-args_246 b12_247 ctx13_248 id14_249)"
"(let-values(((in10_250)(if(pair? given-kws_245)(eq? '#:in(car given-kws_245)) #f)))"
"(let-values(((in8_251)(if in10_250(car given-args_246)(void)))"
"((given-kws_252)(if in10_250(cdr given-kws_245) given-kws_245))"
"((given-args_253)(if in10_250(cdr given-args_246) given-args_246)))"
"(let-values(((out-of-context-as-variable?11_254)(pair? given-kws_252)))"
"(let-values(((out-of-context-as-variable?9_255)"
"(if out-of-context-as-variable?11_254(car given-args_253)(void))))"
"(lookup15.1"
" in8_251"
" in10_250"
" out-of-context-as-variable?9_255"
" out-of-context-as-variable?11_254"
" b12_247"
" ctx13_248"
" id14_249)))))))"
"(define-values"
"(lookup17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_256 given-argc_257)"
"(if(= given-argc_257 5)"
"(let-values(((l1_258) given-kws_256))"
"(let-values(((l1_259)(if(null? l1_258) l1_258(if(eq?(car l1_258) '#:in)(cdr l1_258) l1_258))))"
"(let-values(((l1_260) l1_259))"
"(let-values(((l1_261)"
"(if(null? l1_260)"
" l1_260"
"(if(eq?(car l1_260) '#:out-of-context-as-variable?)(cdr l1_260) l1_260))))"
"(null? l1_261)))))"
" #f))"
"(case-lambda"
"((given-kws_262 given-args_263 b_264 ctx_265 id_266)"
"(unpack16.1 given-kws_262 given-args_263 b_264 ctx_265 id_266)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((lookup_267)(case-lambda((b_268 ctx_269 id_270)(unpack16.1 null null b_268 ctx_269 id_270)))))"
" lookup_267)))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_271 alternate-id_272)"
"(if(not alternate-id_272)"
"(let-values() s_271)"
"(if(identifier? s_271)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_272 s_271) s_271))"
"(let-values()"
"(let-values(((disarmed-s_273)(syntax-disarm$1 s_271)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_273(cons alternate-id_272(cdr(syntax-e$1 disarmed-s_273))) s_271)"
" s_271)"
" s_271)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_274)"
"(if(if(local-binding? binding_274)(reference-record?(binding-frame-id binding_274)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_274)(local-binding-key binding_274)))"
"(void))))"
"(define-values"
"(expand/capture-lifts28.1)"
"(lambda(always-wrap?21_275"
" always-wrap?25_276"
" begin-form?19_277"
" begin-form?23_278"
" expand-lifts?18_279"
" expand-lifts?22_280"
" lift-key20_281"
" lift-key24_282"
" s26_283"
" ctx27_284)"
"(let-values(((s_285) s26_283))"
"(let-values(((ctx_286) ctx27_284))"
"(let-values(((expand-lifts?_287)(if expand-lifts?22_280 expand-lifts?18_279 #f)))"
"(let-values(((begin-form?_288)(if begin-form?23_278 begin-form?19_277 #f)))"
"(let-values(((lift-key_289)(if lift-key24_282 lift-key20_281(generate-lift-key))))"
"(let-values(((always-wrap?_290)(if always-wrap?25_276 always-wrap?21_275 #f)))"
"(let-values()"
"(let-values(((context_291)(expand-context-context ctx_286)))"
"(let-values(((phase_292)(expand-context-phase ctx_286)))"
"(let-values(((local?_293)(not begin-form?_288)))"
"((letrec-values(((loop_294)"
"(lambda(s_295 always-wrap?_296)"
"(let-values(((lift-env_297)(if local?_293(box empty-env) #f)))"
"(let-values(((lift-ctx_298)"
"(let-values(((...nder/expand/main.rkt:451:21_303)"
" make-lift-context8.1)"
"((temp98_304)"
"(if local?_293"
"(make-local-lift"
" lift-env_297"
"(root-expand-context-counter ctx_286))"
"(make-top-level-lift ctx_286)))"
"((temp99_305)"
"(if(not local?_293)"
"(eq? context_291 'module)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 temp99_305 #t temp98_304)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:451:21_303"
" keyword-procedure-extract"
" '(#:module*-ok?)"
" 3)"
" '(#:module*-ok?)"
"(list temp99_305)"
" temp98_304)))))"
"(let-values(((capture-ctx_299)"
"(let-values(((the-struct_306) ctx_286))"
"(if(expand-context? the-struct_306)"
"(let-values(((lift-key100_307) lift-key_289)"
"((lifts101_308) lift-ctx_298)"
"((lift-envs102_309)"
"(if local?_293"
"(cons"
" lift-env_297"
"(expand-context-lift-envs ctx_286))"
"(expand-context-lift-envs ctx_286)))"
"((module-lifts103_310)"
"(if(let-values(((or-part_311)"
" local?_293))"
"(if or-part_311"
" or-part_311"
"(not"
"(memq"
" context_291"
" '(top-level module)))))"
"(expand-context-module-lifts ctx_286)"
" lift-ctx_298)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_306)"
"(root-expand-context-post-expansion-scope"
" the-struct_306)"
"(root-expand-context-top-level-bind-scope"
" the-struct_306)"
"(root-expand-context-all-scopes-stx the-struct_306)"
"(root-expand-context-use-site-scopes"
" the-struct_306)"
"(root-expand-context-defined-syms the-struct_306)"
"(root-expand-context-frame-id the-struct_306)"
"(root-expand-context-counter the-struct_306)"
" lift-key100_307"
"(expand-context-context the-struct_306)"
"(expand-context-phase the-struct_306)"
"(expand-context-namespace the-struct_306)"
"(expand-context-env the-struct_306)"
"(expand-context-user-env the-struct_306)"
"(expand-context-post-expansion-scope-action"
" the-struct_306)"
"(expand-context-scopes the-struct_306)"
"(expand-context-def-ctx-scopes the-struct_306)"
"(expand-context-binding-layer the-struct_306)"
"(expand-context-reference-records the-struct_306)"
"(expand-context-only-immediate? the-struct_306)"
"(expand-context-just-once? the-struct_306)"
"(expand-context-module-begin-k the-struct_306)"
"(expand-context-need-eventually-defined"
" the-struct_306)"
"(expand-context-allow-unbound? the-struct_306)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_306)"
"(expand-context-stops the-struct_306)"
"(expand-context-current-introduction-scopes"
" the-struct_306)"
"(expand-context-declared-submodule-names"
" the-struct_306)"
" lifts101_308"
" lift-envs102_309"
" module-lifts103_310"
"(expand-context-require-lifts the-struct_306)"
"(expand-context-to-module-lifts the-struct_306)"
"(expand-context-requires+provides the-struct_306)"
"(expand-context-name the-struct_306)"
"(expand-context-observer the-struct_306)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context?\""
" the-struct_306)))))"
"(let-values(((exp-s_300)"
"(let-values(((s104_312) s_295)"
"((capture-ctx105_313) capture-ctx_299))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f s104_312 capture-ctx105_313)"
"(expand7.1 s104_312 capture-ctx105_313)))))"
"(let-values(((lifts_301)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_299))))"
"(let-values(((with-lifts-s_302)"
"(if(let-values(((or-part_314)(pair? lifts_301)))"
"(if or-part_314 or-part_314 always-wrap?_296))"
"(let-values()"
"(if begin-form?_288"
"(let-values(((lifts106_315) lifts_301)"
"((exp-s107_316) exp-s_300)"
"((s108_317) s_295)"
"((phase109_318) phase_292))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" lifts106_315"
" exp-s107_316"
" s108_317"
" phase109_318)"
"(wrap-lifts-as-begin17.1"
" lifts106_315"
" exp-s107_316"
" s108_317"
" phase109_318)))"
"(wrap-lifts-as-let"
" lifts_301"
" exp-s_300"
" s_295"
" phase_292)))"
"(let-values() exp-s_300))))"
"(if(let-values(((or-part_319)(not expand-lifts?_287)))"
"(if or-part_319 or-part_319(null? lifts_301)))"
"(let-values() with-lifts-s_302)"
"(let-values()"
"(begin"
"(let-values(((obs_320)"
"(expand-context-observer ctx_286)))"
"(if obs_320"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_320"
" 'lift-loop"
" with-lifts-s_302)))"
"(void)))"
"(loop_294 with-lifts-s_302 #f)))))))))))))"
" loop_294)"
" s_285"
" always-wrap?_290)))))))))))))"
"(define-values"
"(unpack29.1)"
"(lambda(given-kws_321 given-args_322 s26_323 ctx27_324)"
"(let-values(((always-wrap?25_325)(if(pair? given-kws_321)(eq? '#:always-wrap?(car given-kws_321)) #f)))"
"(let-values(((always-wrap?21_326)(if always-wrap?25_325(car given-args_322)(void)))"
"((given-kws_327)(if always-wrap?25_325(cdr given-kws_321) given-kws_321))"
"((given-args_328)(if always-wrap?25_325(cdr given-args_322) given-args_322)))"
"(let-values(((begin-form?23_329)(if(pair? given-kws_327)(eq? '#:begin-form?(car given-kws_327)) #f)))"
"(let-values(((begin-form?19_330)(if begin-form?23_329(car given-args_328)(void)))"
"((given-kws_331)(if begin-form?23_329(cdr given-kws_327) given-kws_327))"
"((given-args_332)(if begin-form?23_329(cdr given-args_328) given-args_328)))"
"(let-values(((expand-lifts?22_333)"
"(if(pair? given-kws_331)(eq? '#:expand-lifts?(car given-kws_331)) #f)))"
"(let-values(((expand-lifts?18_334)(if expand-lifts?22_333(car given-args_332)(void)))"
"((given-kws_335)(if expand-lifts?22_333(cdr given-kws_331) given-kws_331))"
"((given-args_336)(if expand-lifts?22_333(cdr given-args_332) given-args_332)))"
"(let-values(((lift-key24_337)(pair? given-kws_335)))"
"(let-values(((lift-key20_338)(if lift-key24_337(car given-args_336)(void))))"
"(expand/capture-lifts28.1"
" always-wrap?21_326"
" always-wrap?25_325"
" begin-form?19_330"
" begin-form?23_329"
" expand-lifts?18_334"
" expand-lifts?22_333"
" lift-key20_338"
" lift-key24_337"
" s26_323"
" ctx27_324)))))))))))"
"(define-values"
"(expand/capture-lifts30.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_339 given-argc_340)"
"(if(= given-argc_340 4)"
"(let-values(((l1_341) given-kws_339))"
"(let-values(((l1_342)(if(null? l1_341) l1_341(if(eq?(car l1_341) '#:always-wrap?)(cdr l1_341) l1_341))))"
"(let-values(((l1_343) l1_342))"
"(let-values(((l1_344)"
"(if(null? l1_343) l1_343(if(eq?(car l1_343) '#:begin-form?)(cdr l1_343) l1_343))))"
"(let-values(((l1_345) l1_344))"
"(let-values(((l1_346)"
"(if(null? l1_345) l1_345(if(eq?(car l1_345) '#:expand-lifts?)(cdr l1_345) l1_345))))"
"(let-values(((l1_347) l1_346))"
"(let-values(((l1_348)"
"(if(null? l1_347) l1_347(if(eq?(car l1_347) '#:lift-key)(cdr l1_347) l1_347))))"
"(null? l1_348)))))))))"
" #f))"
"(case-lambda((given-kws_349 given-args_350 s_351 ctx_352)(unpack29.1 given-kws_349 given-args_350 s_351 ctx_352)))"
" null"
" '(#:always-wrap? #:begin-form? #:expand-lifts? #:lift-key)"
"(let-values(((expand/capture-lifts_353)(case-lambda((s_354 ctx_355)(unpack29.1 null null s_354 ctx_355)))))"
" expand/capture-lifts_353)))"
"(define-values"
"(expand-transformer43.1)"
"(lambda(always-wrap?35_356"
" always-wrap?40_357"
" begin-form?32_358"
" begin-form?37_359"
" context31_360"
" context36_361"
" expand-lifts?33_362"
" expand-lifts?38_363"
" lift-key34_364"
" lift-key39_365"
" s41_366"
" ctx42_367)"
"(let-values(((s_368) s41_366))"
"(let-values(((ctx_369) ctx42_367))"
"(let-values(((context_370)(if context36_361 context31_360 'expression)))"
"(let-values(((begin-form?_371)(if begin-form?37_359 begin-form?32_358 #f)))"
"(let-values(((expand-lifts?_372)(if expand-lifts?38_363 expand-lifts?33_362 #t)))"
"(let-values(((lift-key_373)(if lift-key39_365 lift-key34_364(generate-lift-key))))"
"(let-values(((always-wrap?_374)(if always-wrap?40_357 always-wrap?35_356 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_375)(add1(expand-context-phase ctx_369))))"
"(let-values(((ns_376)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_369) phase_375)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_376 phase_375)(values))))"
"(let-values(((trans-ctx_377)"
"(let-values(((the-struct_378) ctx_369))"
"(if(expand-context? the-struct_378)"
"(let-values(((context116_379) context_370)"
"((scopes117_380) null)"
"((phase118_381) phase_375)"
"((namespace119_382) ns_376)"
"((env120_383) empty-env)"
"((only-immediate?121_384) #f)"
"((def-ctx-scopes122_385) #f)"
"((post-expansion-scope123_386) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_378)"
" post-expansion-scope123_386"
"(root-expand-context-top-level-bind-scope the-struct_378)"
"(root-expand-context-all-scopes-stx the-struct_378)"
"(root-expand-context-use-site-scopes the-struct_378)"
"(root-expand-context-defined-syms the-struct_378)"
"(root-expand-context-frame-id the-struct_378)"
"(root-expand-context-counter the-struct_378)"
"(root-expand-context-lift-key the-struct_378)"
" context116_379"
" phase118_381"
" namespace119_382"
" env120_383"
"(expand-context-user-env the-struct_378)"
"(expand-context-post-expansion-scope-action the-struct_378)"
" scopes117_380"
" def-ctx-scopes122_385"
"(expand-context-binding-layer the-struct_378)"
"(expand-context-reference-records the-struct_378)"
" only-immediate?121_384"
"(expand-context-just-once? the-struct_378)"
"(expand-context-module-begin-k the-struct_378)"
"(expand-context-need-eventually-defined the-struct_378)"
"(expand-context-allow-unbound? the-struct_378)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_378)"
"(expand-context-stops the-struct_378)"
"(expand-context-current-introduction-scopes the-struct_378)"
"(expand-context-declared-submodule-names the-struct_378)"
"(expand-context-lifts the-struct_378)"
"(expand-context-lift-envs the-struct_378)"
"(expand-context-module-lifts the-struct_378)"
"(expand-context-require-lifts the-struct_378)"
"(expand-context-to-module-lifts the-struct_378)"
"(expand-context-requires+provides the-struct_378)"
"(expand-context-name the-struct_378)"
"(expand-context-observer the-struct_378)))"
"                                              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_378)))))"
"(let-values(((...nder/expand/main.rkt:517:3_387) expand/capture-lifts30.1)"
"((s110_388) s_368)"
"((trans-ctx111_389) trans-ctx_377)"
"((expand-lifts?112_390) expand-lifts?_372)"
"((begin-form?113_391) begin-form?_371)"
"((lift-key114_392) lift-key_373)"
"((always-wrap?115_393) always-wrap?_374))"
"(if(variable-reference-constant?(#%variable-reference expand/capture-lifts30.1))"
"(expand/capture-lifts28.1"
" always-wrap?115_393"
" #t"
" begin-form?113_391"
" #t"
" expand-lifts?112_390"
" #t"
" lift-key114_392"
" #t"
" s110_388"
" trans-ctx111_389)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:517:3_387"
" keyword-procedure-extract"
" '(#:always-wrap? #:begin-form? #:expand-lifts? #:lift-key)"
" 4)"
" '(#:always-wrap? #:begin-form? #:expand-lifts? #:lift-key)"
"(list always-wrap?115_393 begin-form?113_391 expand-lifts?112_390 lift-key114_392)"
" s110_388"
" trans-ctx111_389))))))))))))))))))"
"(define-values"
"(unpack44.1)"
"(lambda(given-kws_394 given-args_395 s41_396 ctx42_397)"
"(let-values(((always-wrap?40_398)(if(pair? given-kws_394)(eq? '#:always-wrap?(car given-kws_394)) #f)))"
"(let-values(((always-wrap?35_399)(if always-wrap?40_398(car given-args_395)(void)))"
"((given-kws_400)(if always-wrap?40_398(cdr given-kws_394) given-kws_394))"
"((given-args_401)(if always-wrap?40_398(cdr given-args_395) given-args_395)))"
"(let-values(((begin-form?37_402)(if(pair? given-kws_400)(eq? '#:begin-form?(car given-kws_400)) #f)))"
"(let-values(((begin-form?32_403)(if begin-form?37_402(car given-args_401)(void)))"
"((given-kws_404)(if begin-form?37_402(cdr given-kws_400) given-kws_400))"
"((given-args_405)(if begin-form?37_402(cdr given-args_401) given-args_401)))"
"(let-values(((context36_406)(if(pair? given-kws_404)(eq? '#:context(car given-kws_404)) #f)))"
"(let-values(((context31_407)(if context36_406(car given-args_405)(void)))"
"((given-kws_408)(if context36_406(cdr given-kws_404) given-kws_404))"
"((given-args_409)(if context36_406(cdr given-args_405) given-args_405)))"
"(let-values(((expand-lifts?38_410)"
"(if(pair? given-kws_408)(eq? '#:expand-lifts?(car given-kws_408)) #f)))"
"(let-values(((expand-lifts?33_411)(if expand-lifts?38_410(car given-args_409)(void)))"
"((given-kws_412)(if expand-lifts?38_410(cdr given-kws_408) given-kws_408))"
"((given-args_413)(if expand-lifts?38_410(cdr given-args_409) given-args_409)))"
"(let-values(((lift-key39_414)(pair? given-kws_412)))"
"(let-values(((lift-key34_415)(if lift-key39_414(car given-args_413)(void))))"
"(expand-transformer43.1"
" always-wrap?35_399"
" always-wrap?40_398"
" begin-form?32_403"
" begin-form?37_402"
" context31_407"
" context36_406"
" expand-lifts?33_411"
" expand-lifts?38_410"
" lift-key34_415"
" lift-key39_414"
" s41_396"
" ctx42_397)))))))))))))"
"(define-values"
"(expand-transformer45.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_416 given-argc_417)"
"(if(= given-argc_417 4)"
"(let-values(((l1_418) given-kws_416))"
"(let-values(((l1_419)(if(null? l1_418) l1_418(if(eq?(car l1_418) '#:always-wrap?)(cdr l1_418) l1_418))))"
"(let-values(((l1_420) l1_419))"
"(let-values(((l1_421)"
"(if(null? l1_420) l1_420(if(eq?(car l1_420) '#:begin-form?)(cdr l1_420) l1_420))))"
"(let-values(((l1_422) l1_421))"
"(let-values(((l1_423)"
"(if(null? l1_422) l1_422(if(eq?(car l1_422) '#:context)(cdr l1_422) l1_422))))"
"(let-values(((l1_424) l1_423))"
"(let-values(((l1_425)"
"(if(null? l1_424)"
" l1_424"
"(if(eq?(car l1_424) '#:expand-lifts?)(cdr l1_424) l1_424))))"
"(let-values(((l1_426) l1_425))"
"(let-values(((l1_427)"
"(if(null? l1_426)"
" l1_426"
"(if(eq?(car l1_426) '#:lift-key)(cdr l1_426) l1_426))))"
"(null? l1_427)))))))))))"
" #f))"
"(case-lambda((given-kws_428 given-args_429 s_430 ctx_431)(unpack44.1 given-kws_428 given-args_429 s_430 ctx_431)))"
" null"
" '(#:always-wrap? #:begin-form? #:context #:expand-lifts? #:lift-key)"
"(let-values(((expand-transformer_432)(case-lambda((s_433 ctx_434)(unpack44.1 null null s_433 ctx_434)))))"
" expand-transformer_432)))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_435 ids_436 ctx_437)"
"(let-values(((exp-rhs_438)"
"(let-values(((rhs124_440) rhs_435)((temp125_441)(as-named-context ctx_437 ids_436)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer45.1))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f rhs124_440 temp125_441)"
"(expand-transformer45.1 rhs124_440 temp125_441)))))"
"(let-values(((phase_439)(add1(expand-context-phase ctx_437))))"
"(values"
" exp-rhs_438"
"(eval-for-bindings"
" ids_436"
" exp-rhs_438"
" phase_439"
"(namespace->namespace-at-phase(expand-context-namespace ctx_437) phase_439)"
" ctx_437))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_442 ids_443 ctx_444)"
"(let-values(((exp-rhs_445 vals_446)(expand+eval-for-syntaxes-binding rhs_442 ids_443 ctx_444))) vals_446)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_447 s_448 phase_449 ns_450 ctx_451)"
"(let-values(((compiled_452)"
"(compile-single"
" s_448"
"(let-values(((...nder/expand/main.rkt:549:37_454) make-compile-context18.1)"
"((ns126_455) ns_450)"
"((phase127_456) phase_449))"
"(if(variable-reference-constant?(#%variable-reference make-compile-context18.1))"
"(make-compile-context16.1 #f #f #f #f #f #f ns126_455 #t phase127_456 #t #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:549:37_454"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list ns126_455 phase127_456)))))))"
"(let-values(((vals_453)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_451"
" 1/current-namespace"
" ns_450"
" eval-jit-enabled"
" #f)"
"(let-values()(eval-single-top compiled_452 ns_450))))"
" list)))"
"(begin"
"(if(=(length vals_453)(length ids_447))"
"(void)"
"(let-values()"
"              (error \"wrong number of results (\" (length vals_453) \"vs.\" (length ids_447) \")\" \"from\" s_448)))"
" vals_453)))))"
"(define-values"
"(rebuild51.1)"
"(lambda(track?46_457 track?47_458 orig-s48_459 disarmed-orig-s49_460 new50_461)"
"(let-values(((orig-s_462) orig-s48_459))"
"(let-values(((disarmed-orig-s_463) disarmed-orig-s49_460))"
"(let-values(((new_464) new50_461))"
"(let-values(((track?_465)(if track?47_458 track?46_457 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1 disarmed-orig-s_463 new_464 orig-s_462(if track?_465 orig-s_462 #f))"
" orig-s_462))))))))"
"(define-values"
"(unpack52.1$1)"
"(lambda(given-kws_466 given-args_467 orig-s48_468 disarmed-orig-s49_469 new50_470)"
"(let-values(((track?47_471)(pair? given-kws_466)))"
"(let-values(((track?46_472)(if track?47_471(car given-args_467)(void))))"
"(rebuild51.1 track?46_472 track?47_471 orig-s48_468 disarmed-orig-s49_469 new50_470)))))"
"(define-values"
"(rebuild53.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_473 given-argc_474)"
"(if(= given-argc_474 5)"
"(let-values(((l1_475) given-kws_473))"
"(let-values(((l1_476)(if(null? l1_475) l1_475(if(eq?(car l1_475) '#:track?)(cdr l1_475) l1_475))))"
"(null? l1_476)))"
" #f))"
"(case-lambda"
"((given-kws_477 given-args_478 orig-s_479 disarmed-orig-s_480 new_481)"
"(unpack52.1$1 given-kws_477 given-args_478 orig-s_479 disarmed-orig-s_480 new_481)))"
" null"
" '(#:track?)"
"(let-values(((rebuild_482)"
"(case-lambda"
"((orig-s_483 disarmed-orig-s_484 new_485)"
"(unpack52.1$1 null null orig-s_483 disarmed-orig-s_484 new_485)))))"
" rebuild_482)))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_486 trans-idss_487)"
"(if(null? trans-idss_487)"
"(let-values() s_486)"
"(let-values()"
"(syntax-property$1"
" s_486"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_487)"
"(let-values(((or-part_488)(syntax-property$1 s_486 'disappeared-binding)))"
"(if or-part_488 or-part_488 null))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_489 ctx_490)"
"(if((letrec-values(((loop_491)"
"(lambda(ids_492)"
"(let-values(((or-part_493)(identifier? ids_492)))"
"(if or-part_493"
" or-part_493"
"(if(pair? ids_492)"
"(let-values(((or-part_494)(loop_491(car ids_492))))"
"(if or-part_494 or-part_494(loop_491(cdr ids_492))))"
" #f))))))"
" loop_491)"
" ids_489)"
"(gensym 'binding-layer)"
"(expand-context-binding-layer ctx_490))))"
"(void)"
"(void)"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= 1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$1 p-core-stx_3 'module*) phase_2 phase_2)"
" #f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(alt-reverse"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((sym_8)(unsafe-car lst_7)))"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_3 sym_8))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(for-loop_5 fold-var_9(unsafe-cdr lst_7))))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(void)"
"(void)"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 0 'frame-id)"
"(make-struct-field-accessor -ref_5 1 'scope)"
"(make-struct-field-accessor -ref_5 2 'add-scope?)"
"(make-struct-field-accessor -ref_5 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_37 make-_38 ?_39 -ref_40 -set!_41)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_37"
" make-_38"
" ?_39"
"(make-struct-field-accessor -ref_40 0 'id)"
"(make-struct-field-accessor -ref_40 1 'sym)"
"(make-struct-field-accessor -ref_40 2 'value)"
"(make-struct-field-accessor -ref_40 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_72)"
"(lambda(parent-ctx3_73 add-scope?4_74 parent-ctx5_75 add-scope?6_76)"
"(let-values(((parent-ctx_77)(if parent-ctx5_75 parent-ctx3_73 #f)))"
"(let-values(((add-scope?_78)(if add-scope?6_76 add-scope?4_74 #t)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_83)(not parent-ctx_77)))"
"(if or-part_83 or-part_83(1/internal-definition-context? parent-ctx_77)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                             \"(or/c #f internal-definition-context?)\""
" parent-ctx_77)))"
"(values))))"
"(let-values(((ctx_79)"
"(let-values(((temp38_84) 'syntax-local-make-definition-context))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp38_84 #t)"
"(get-current-expand-context8.1 temp38_84)))))"
"(let-values(((frame-id_80)"
"(let-values(((or-part_85)(root-expand-context-frame-id ctx_79)))"
"(if or-part_85"
" or-part_85"
"(let-values(((or-part_86)"
"(if parent-ctx_77"
"(internal-definition-context-frame-id parent-ctx_77)"
" #f)))"
"(if or-part_86 or-part_86(gensym)))))))"
"(let-values(((sc_81)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_82)(expand-context-def-ctx-scopes ctx_79)))"
"(begin"
"(if def-ctx-scopes_82"
"(void)"
"(let-values()"
"                                        (error \"internal error: no box to accumulate definition-context scopes\")))"
"(set-box! def-ctx-scopes_82(cons sc_81(unbox def-ctx-scopes_82)))"
"(internal-definition-context1.1"
" frame-id_80"
" sc_81"
" add-scope?_78"
"(box null))))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_72 #f #f #f #f))"
"((parent-ctx_87 add-scope?4_88)(syntax-local-make-definition-context7_72 parent-ctx_87 add-scope?4_88 #t #t))"
"((parent-ctx3_89)(syntax-local-make-definition-context7_72 parent-ctx3_89 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_90 s_91 intdef_92)"
"(let-values((()"
"(begin"
"(if(if(list? ids_90)(andmap2 identifier? ids_90) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_90)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_100)(not s_91)))(if or-part_100 or-part_100(syntax?$1 s_91)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_91)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_92)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                             \"internal-definition-context?\""
" intdef_92)))"
"(values))))"
"(let-values(((ctx_93)"
"(let-values(((temp39_101) 'local-expand))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp39_101 #t)"
"(get-current-expand-context8.1 temp39_101)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_102)(expand-context-observer ctx_93)))"
"(if obs_102"
"(let-values()(let-values()(call-expand-observe obs_102 'local-bind ids_90)))"
"(void)))"
"(values))))"
"(let-values(((phase_94)(expand-context-phase ctx_93)))"
"(let-values(((intdef-env_95)(add-intdef-bindings(expand-context-env ctx_93) intdef_92)))"
"(let-values(((intdef-ids_96)"
"(alt-reverse"
"(let-values(((lst_103) ids_90))"
"(begin"
"(if(list? lst_103)(void)(let-values()(in-list lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(fold-var_105 lst_106)"
"(if(pair? lst_106)"
"(let-values(((id_107)(unsafe-car lst_106)))"
"(let-values(((fold-var_108)"
"(let-values(((fold-var_109) fold-var_105))"
"(let-values(((fold-var_110)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_111)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_107"
" ctx_93)"
" ctx_93)))"
"(let-values(((...finition-context.rkt:71:23_112)"
" add-intdef-scopes23.1)"
"((pre-id40_113)"
" pre-id_111)"
"((intdef41_114)"
" intdef_92)"
"((temp42_115)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp42_115"
" #t"
" pre-id40_113"
" intdef41_114)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:71:23_112"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list temp42_115)"
" pre-id40_113"
" intdef41_114)))))"
" fold-var_109))))"
"(values fold-var_110)))))"
"(for-loop_104 fold-var_108(unsafe-cdr lst_106))))"
" fold-var_105))))"
" for-loop_104)"
" null"
" lst_103))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_116)(expand-context-observer ctx_93)))"
"(if obs_116"
"(let-values()"
"(let-values()(call-expand-observe obs_116 'rename-list intdef-ids_96)))"
"(void)))"
"(values))))"
"(let-values(((syms_97)"
"(alt-reverse"
"(let-values(((lst_117) intdef-ids_96))"
"(begin"
"(if(list? lst_117)(void)(let-values()(in-list lst_117)))"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 lst_120)"
"(if(pair? lst_120)"
"(let-values(((intdef-id_121)(unsafe-car lst_120)))"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123)"
" fold-var_119))"
"(let-values(((fold-var_124)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...finition-context.rkt:74:17_125)"
" add-local-binding!37.1)"
"((intdef-id43_126)"
" intdef-id_121)"
"((phase44_127)"
" phase_94)"
"((temp45_128)"
"(root-expand-context-counter"
" ctx_93))"
"((temp46_129)"
"(internal-definition-context-frame-id"
" intdef_92)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" temp46_129"
" #t"
" #f"
" #f"
" intdef-id43_126"
" phase44_127"
" temp45_128)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:74:17_125"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list"
" temp46_129)"
" intdef-id43_126"
" phase44_127"
" temp45_128))))"
" fold-var_123))))"
"(values fold-var_124)))))"
"(for-loop_118 fold-var_122(unsafe-cdr lst_120))))"
" fold-var_119))))"
" for-loop_118)"
" null"
" lst_117))))))"
"(let-values(((vals_98)"
"(if s_91"
"(let-values()"
"(let-values(((input-s_130)"
"(flip-introduction-scopes"
"(let-values(((...finition-context.rkt:79:48_132)"
" add-intdef-scopes23.1)"
"((s47_133) s_91)"
"((intdef48_134) intdef_92)"
"((temp49_135) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp49_135"
" #t"
" s47_133"
" intdef48_134)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:79:48_132"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list temp49_135)"
" s47_133"
" intdef48_134)))"
" ctx_93)))"
"(let-values(((tmp-env_131)"
"(let-values(((lst_136) syms_97))"
"(begin"
"(if(list? lst_136)"
"(void)"
"(let-values()(in-list lst_136)))"
"((letrec-values(((for-loop_137)"
"(lambda(env_138 lst_139)"
"(if(pair? lst_139)"
"(let-values(((sym_140)"
"(unsafe-car lst_139)))"
"(let-values(((env_141)"
"(let-values(((env_142)"
" env_138))"
"(let-values(((env_143)"
"(let-values()"
"(hash-set"
" env_142"
" sym_140"
" variable))))"
"(values"
" env_143)))))"
"(for-loop_137"
" env_141"
"(unsafe-cdr lst_139))))"
" env_138))))"
" for-loop_137)"
" intdef-env_95"
" lst_136)))))"
"(eval-for-syntaxes-binding"
" input-s_130"
" ids_90"
"(let-values(((...finition-context.rkt:84:33_144)"
" make-local-expand-context35.1)"
"((temp50_145)"
"(let-values(((the-struct_148) ctx_93))"
"(if(expand-context? the-struct_148)"
"(let-values(((env53_149) tmp-env_131))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_148)"
"(root-expand-context-post-expansion-scope"
" the-struct_148)"
"(root-expand-context-top-level-bind-scope"
" the-struct_148)"
"(root-expand-context-all-scopes-stx the-struct_148)"
"(root-expand-context-use-site-scopes the-struct_148)"
"(root-expand-context-defined-syms the-struct_148)"
"(root-expand-context-frame-id the-struct_148)"
"(root-expand-context-counter the-struct_148)"
"(root-expand-context-lift-key the-struct_148)"
"(expand-context-context the-struct_148)"
"(expand-context-phase the-struct_148)"
"(expand-context-namespace the-struct_148)"
" env53_149"
"(expand-context-user-env the-struct_148)"
"(expand-context-post-expansion-scope-action"
" the-struct_148)"
"(expand-context-scopes the-struct_148)"
"(expand-context-def-ctx-scopes the-struct_148)"
"(expand-context-binding-layer the-struct_148)"
"(expand-context-reference-records the-struct_148)"
"(expand-context-only-immediate? the-struct_148)"
"(expand-context-just-once? the-struct_148)"
"(expand-context-module-begin-k the-struct_148)"
"(expand-context-need-eventually-defined"
" the-struct_148)"
"(expand-context-allow-unbound? the-struct_148)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_148)"
"(expand-context-stops the-struct_148)"
"(expand-context-current-introduction-scopes"
" the-struct_148)"
"(expand-context-declared-submodule-names"
" the-struct_148)"
"(expand-context-lifts the-struct_148)"
"(expand-context-lift-envs the-struct_148)"
"(expand-context-module-lifts the-struct_148)"
"(expand-context-require-lifts the-struct_148)"
"(expand-context-to-module-lifts the-struct_148)"
"(expand-context-requires+provides the-struct_148)"
"(expand-context-name the-struct_148)"
"(expand-context-observer the-struct_148)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_148))))"
"((temp51_146) 'expression)"
"((intdef52_147) intdef_92))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" temp51_146"
" intdef52_147"
" #f"
" #f"
" #f"
" #f"
" temp50_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:84:33_144"
" keyword-procedure-extract"
" '(#:context #:intdefs)"
" 3)"
" '(#:context #:intdefs)"
"(list temp51_146 intdef52_147)"
" temp50_145)))))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_150) ids_90))"
"(begin"
"(if(list? lst_150)(void)(let-values()(in-list lst_150)))"
"((letrec-values(((for-loop_151)"
"(lambda(fold-var_152 lst_153)"
"(if(pair? lst_153)"
"(let-values(((id_154)(unsafe-car lst_153)))"
"(let-values(((fold-var_155)"
"(let-values(((fold-var_156)"
" fold-var_152))"
"(let-values(((fold-var_157)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_156))))"
"(values fold-var_157)))))"
"(for-loop_151"
" fold-var_155"
"(unsafe-cdr lst_153))))"
" fold-var_152))))"
" for-loop_151)"
" null"
" lst_150))))))))"
"(let-values(((env-mixins_99)(internal-definition-context-env-mixins intdef_92)))"
"(begin"
"(set-box!"
" env-mixins_99"
"(append"
"(alt-reverse"
"(let-values(((lst_158) intdef-ids_96)((lst_159) syms_97)((lst_160) vals_98))"
"(begin"
"(if(list? lst_158)(void)(let-values()(in-list lst_158)))"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"(if(list? lst_160)(void)(let-values()(in-list lst_160)))"
"((letrec-values(((for-loop_161)"
"(lambda(fold-var_162 lst_163 lst_164 lst_165)"
"(if(if(pair? lst_163)"
"(if(pair? lst_164)(pair? lst_165) #f)"
" #f)"
"(let-values(((intdef-id_166)(unsafe-car lst_163))"
"((sym_167)(unsafe-car lst_164))"
"((val_168)(unsafe-car lst_165)))"
"(let-values(((fold-var_169)"
"(let-values(((fold-var_170) fold-var_162))"
"(let-values(((fold-var_171)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_168"
" intdef-id_166"
" phase_94)"
"(env-mixin2.1"
" intdef-id_166"
" sym_167"
" val_168"
"(make-weak-hasheq))))"
" fold-var_170))))"
"(values fold-var_171)))))"
"(for-loop_161"
" fold-var_169"
"(unsafe-cdr lst_163)"
"(unsafe-cdr lst_164)"
"(unsafe-cdr lst_165))))"
" fold-var_162))))"
" for-loop_161)"
" null"
" lst_158"
" lst_159"
" lst_160))))"
"(unbox env-mixins_99)))"
"(let-values(((obs_172)(expand-context-observer ctx_93)))"
"(if obs_172"
"(let-values()(let-values()(call-expand-observe obs_172 'exit-local-bind)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_173)"
"(begin"
"(if(1/internal-definition-context? intdef_173)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_173)))"
"(alt-reverse"
"(let-values(((lst_174)(unbox(internal-definition-context-env-mixins intdef_173))))"
"(begin"
"(if(list? lst_174)(void)(let-values()(in-list lst_174)))"
"((letrec-values(((for-loop_175)"
"(lambda(fold-var_176 lst_177)"
"(if(pair? lst_177)"
"(let-values(((env-mixin_178)(unsafe-car lst_177)))"
"(let-values(((fold-var_179)"
"(let-values(((fold-var_180) fold-var_176))"
"(let-values(((fold-var_181)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_178))"
" fold-var_180))))"
"(values fold-var_181)))))"
"(for-loop_175 fold-var_179(unsafe-cdr lst_177))))"
" fold-var_176))))"
" for-loop_175)"
" null"
" lst_174)))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_182)"
"(lambda(intdef11_183 s12_184 mode9_185 mode10_186)"
"(let-values(((intdef_187) intdef11_183))"
"(let-values(((s_188) s12_184))"
"(let-values(((mode_189)(if mode10_186 mode9_185 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_187)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_187)))"
"(if(syntax?$1 s_188)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_188)))"
"(let-values(((...finition-context.rkt:112:2_190) add-intdef-scopes23.1)"
"((s54_191) s_188)"
"((intdef55_192) intdef_187)"
"((temp56_193)"
"(let-values(((tmp_194) mode_189))"
"(if(equal? tmp_194 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_194 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_194 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_189))))))))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 temp56_193 #t #f #f s54_191 intdef55_192)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:112:2_190"
" keyword-procedure-extract"
" '(#:action)"
" 4)"
" '(#:action)"
"(list temp56_193)"
" s54_191"
" intdef55_192)))))))))))"
"(case-lambda"
"((intdef_195 s_196)(internal-definition-context-introduce13_182 intdef_195 s_196 #f #f))"
"((intdef_197 s_198 mode9_199)(internal-definition-context-introduce13_182 intdef_197 s_198 mode9_199 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_200)"
"(begin"
"(if(1/internal-definition-context? intdef_200)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_200)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_201 intdef_202)"
"(begin"
"(if(identifier? id_201)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_201)))"
"(if(let-values(((or-part_203)(1/internal-definition-context? intdef_202)))"
"(if or-part_203 or-part_203(if(list? intdef_202)(andmap2 1/internal-definition-context? intdef_202) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_202)))"
"(let-values(((pos->vals_204 pos-next_205 init_206 pos-cont?_207 val-cont?_208 all-cont?_209)"
"(make-sequence '(intdef)(in-intdefs intdef_202))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_210)"
"(lambda(id_211 pos_212)"
"(if(if pos-cont?_207(pos-cont?_207 pos_212) #t)"
"(let-values(((intdef_213)(pos->vals_204 pos_212)))"
"(if(if val-cont?_208(val-cont?_208 intdef_213) #t)"
"(let-values(((id_214)"
"(let-values(((id_215) id_211))"
"(let-values(((id_216)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_213"
" id_215"
" 'remove))))"
"(values id_216)))))"
"(if(if all-cont?_209(all-cont?_209 pos_212 intdef_213) #t)"
"(for-loop_210 id_214(pos-next_205 pos_212))"
" id_214))"
" id_211))"
" id_211))))"
" for-loop_210)"
" id_201"
" init_206))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_217)"
"(if(not intdefs_217)"
"(let-values()(in-list null))"
"(if(list? intdefs_217)"
"(let-values()(in-list(alt-reverse intdefs_217)))"
"(let-values()(in-value intdefs_217))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_218 intdefs_219)"
"(let-values(((pos->vals_220 pos-next_221 init_222 pos-cont?_223 val-cont?_224 all-cont?_225)"
"(make-sequence '(intdef)(in-intdefs intdefs_219))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_226)"
"(lambda(env_227 pos_228)"
"(if(if pos-cont?_223(pos-cont?_223 pos_228) #t)"
"(let-values(((intdef_229)(pos->vals_220 pos_228)))"
"(if(if val-cont?_224(val-cont?_224 intdef_229) #t)"
"(let-values(((env_230)"
"(let-values(((env_231) env_227))"
"(let-values(((env_232)"
"(let-values()"
"(let-values(((env-mixins_233)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_229))))"
"((letrec-values(((loop_234)"
"(lambda(env_235 env-mixins_236)"
"(if(null? env-mixins_236)"
"(let-values() env_235)"
"(let-values()"
"(let-values(((env-mixin_237)"
"(car"
" env-mixins_236)))"
"(let-values(((or-part_238)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" #f)))"
"(if or-part_238"
" or-part_238"
"(let-values(((new-env_239)"
"(env-extend"
"(loop_234"
" env_235"
"(cdr"
" env-mixins_236))"
"(env-mixin-sym"
" env-mixin_237)"
"(env-mixin-value"
" env-mixin_237))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" new-env_239)"
" new-env_239))))))))))"
" loop_234)"
" env_231"
" env-mixins_233)))))"
"(values env_232)))))"
"(if(if all-cont?_225(all-cont?_225 pos_228 intdef_229) #t)"
"(for-loop_226 env_230(pos-next_221 pos_228))"
" env_230))"
" env_227))"
" env_227))))"
" for-loop_226)"
" env_218"
" init_222)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_240 action18_241 always?15_242 always?17_243 s19_244 intdefs20_245)"
"(let-values(((s_246) s19_244))"
"(let-values(((intdefs_247) intdefs20_245))"
"(let-values(((always?_248)(if always?17_243 always?15_242 #f)))"
"(let-values(((action_249)(if action18_241 action16_240 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_250 pos-next_251 init_252 pos-cont?_253 val-cont?_254 all-cont?_255)"
"(make-sequence '(intdef)(in-intdefs intdefs_247))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_256)"
"(lambda(s_257 pos_258)"
"(if(if pos-cont?_253(pos-cont?_253 pos_258) #t)"
"(let-values(((intdef_259)(pos->vals_250 pos_258)))"
"(if(if val-cont?_254(val-cont?_254 intdef_259) #t)"
"(let-values(((s_260)"
"(let-values(((s_261) s_257))"
"(if(let-values(((or-part_262) always?_248))"
"(if or-part_262"
" or-part_262"
"(internal-definition-context-add-scope?"
" intdef_259)))"
"(let-values(((s_263) s_261))"
"(let-values(((s_264)"
"(let-values()"
"(action_249"
" s_263"
"(internal-definition-context-scope"
" intdef_259)))))"
"(values s_264)))"
" s_261))))"
"(if(if all-cont?_255(all-cont?_255 pos_258 intdef_259) #t)"
"(for-loop_256 s_260(pos-next_251 pos_258))"
" s_260))"
" s_257))"
" s_257))))"
" for-loop_256)"
" s_246"
" init_252))))))))))"
"(define-values"
"(unpack22.1)"
"(lambda(given-kws_265 given-args_266 s19_267 intdefs20_268)"
"(let-values(((action18_269)(if(pair? given-kws_265)(eq? '#:action(car given-kws_265)) #f)))"
"(let-values(((action16_270)(if action18_269(car given-args_266)(void)))"
"((given-kws_271)(if action18_269(cdr given-kws_265) given-kws_265))"
"((given-args_272)(if action18_269(cdr given-args_266) given-args_266)))"
"(let-values(((always?17_273)(pair? given-kws_271)))"
"(let-values(((always?15_274)(if always?17_273(car given-args_272)(void))))"
"(add-intdef-scopes21.1 action16_270 action18_269 always?15_274 always?17_273 s19_267 intdefs20_268)))))))"
"(define-values"
"(add-intdef-scopes23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_275 given-argc_276)"
"(if(= given-argc_276 4)"
"(let-values(((l1_277) given-kws_275))"
"(let-values(((l1_278)(if(null? l1_277) l1_277(if(eq?(car l1_277) '#:action)(cdr l1_277) l1_277))))"
"(let-values(((l1_279) l1_278))"
"(let-values(((l1_280)(if(null? l1_279) l1_279(if(eq?(car l1_279) '#:always?)(cdr l1_279) l1_279))))"
"(null? l1_280)))))"
" #f))"
"(case-lambda"
"((given-kws_281 given-args_282 s_283 intdefs_284)(unpack22.1 given-kws_281 given-args_282 s_283 intdefs_284)))"
" null"
" '(#:action #:always?)"
"(let-values(((add-intdef-scopes_285)(case-lambda((s_286 intdefs_287)(unpack22.1 null null s_286 intdefs_287)))))"
" add-intdef-scopes_285)))"
"(define-values"
"(lifted/1.1$8)"
"(make-required"
" 'make-local-expand-context"
"(case-lambda((self_288 ctx_289)(apply missing-kw self_288 ctx_289 null)))"
" #f"
" #f))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_290 intdefs26_291 phase25_292 phase29_293 stop-ids27_294 stop-ids31_295 ctx32_296)"
"(let-values(((ctx_297) ctx32_296))"
"(let-values(((context_298) context24_290))"
"(let-values(((phase_299)(if phase29_293 phase25_292(expand-context-phase ctx_297))))"
"(let-values(((intdefs_300) intdefs26_291))"
"(let-values(((stop-ids_301)(if stop-ids31_295 stop-ids27_294 #f)))"
"(let-values()"
"(let-values(((same-kind?_302)"
"(let-values(((or-part_305)(eq? context_298(expand-context-context ctx_297))))"
"(if or-part_305"
" or-part_305"
"(if(list? context_298)(list?(expand-context-context ctx_297)) #f)))))"
"(let-values(((all-stop-ids_303)"
"(if stop-ids_301(stop-ids->all-stop-ids stop-ids_301 phase_299) #f)))"
"(let-values(((def-ctx-scopes_304)"
"(if(expand-context-def-ctx-scopes ctx_297)"
"(unbox(expand-context-def-ctx-scopes ctx_297))"
" null)))"
"(let-values(((the-struct_306) ctx_297))"
"(if(expand-context? the-struct_306)"
"(let-values(((context57_307) context_298)"
"((env58_308)(add-intdef-bindings(expand-context-env ctx_297) intdefs_300))"
"((use-site-scopes59_309)"
"(if(let-values(((or-part_319)(eq? context_298 'module)))"
"(if or-part_319 or-part_319(list? context_298)))"
"(let-values(((or-part_320)(root-expand-context-use-site-scopes ctx_297)))"
"(if or-part_320 or-part_320(box null)))"
" #f))"
"((frame-id60_310)"
"(let-values(((pos->vals_321"
" pos-next_322"
" init_323"
" pos-cont?_324"
" val-cont?_325"
" all-cont?_326)"
"(make-sequence '(intdef)(in-intdefs intdefs_300))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_327)"
"(lambda(frame-id_328 pos_329)"
"(if(if pos-cont?_324(pos-cont?_324 pos_329) #t)"
"(let-values(((intdef_330)(pos->vals_321 pos_329)))"
"(if(if val-cont?_325(val-cont?_325 intdef_330) #t)"
"(let-values(((frame-id_331)"
"(let-values(((frame-id_332)"
" frame-id_328))"
"(let-values(((frame-id_333)"
"(let-values()"
"(let-values(((i-frame-id_334)"
"(internal-definition-context-frame-id"
" intdef_330)))"
"(if(if frame-id_332"
"(if i-frame-id_334"
"(not"
"(eq?"
" frame-id_332"
" i-frame-id_334))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values(((or-part_335)"
" frame-id_332))"
"(if or-part_335"
" or-part_335"
" i-frame-id_334))))))))"
"(values frame-id_333)))))"
"(if(if all-cont?_326"
"(all-cont?_326 pos_329 intdef_330)"
" #t)"
"(for-loop_327"
" frame-id_331"
"(pos-next_322 pos_329))"
" frame-id_331))"
" frame-id_328))"
" frame-id_328))))"
" for-loop_327)"
"(root-expand-context-frame-id ctx_297)"
" init_323))))"
"((post-expansion-scope61_311)"
"(if intdefs_300"
"(new-scope 'macro)"
"(if same-kind?_302"
"(if(memq context_298 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_297)"
" #f)"
" #f)))"
"((post-expansion-scope-action62_312)"
"(if intdefs_300"
"(lambda(s_336 placeholder-sc_337)"
"(let-values(((s69_338) s_336)((intdefs70_339) intdefs_300))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f s69_338 intdefs70_339)"
"(add-intdef-scopes23.1 s69_338 intdefs70_339))))"
"(expand-context-post-expansion-scope-action ctx_297)))"
"((scopes63_313)(append def-ctx-scopes_304(expand-context-scopes ctx_297)))"
"((only-immediate?64_314)(not stop-ids_301))"
"((just-once?65_315) #f)"
"((preserve-#%expression-and-do-not-add-#%top?66_316) #t)"
"((stops67_317)"
"(free-id-set"
" phase_299"
"(let-values(((or-part_340) all-stop-ids_303))"
"(if or-part_340 or-part_340 null))))"
"((current-introduction-scopes68_318) null))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_306)"
" post-expansion-scope61_311"
"(root-expand-context-top-level-bind-scope the-struct_306)"
"(root-expand-context-all-scopes-stx the-struct_306)"
" use-site-scopes59_309"
"(root-expand-context-defined-syms the-struct_306)"
" frame-id60_310"
"(root-expand-context-counter the-struct_306)"
"(root-expand-context-lift-key the-struct_306)"
" context57_307"
"(expand-context-phase the-struct_306)"
"(expand-context-namespace the-struct_306)"
" env58_308"
"(expand-context-user-env the-struct_306)"
" post-expansion-scope-action62_312"
" scopes63_313"
"(expand-context-def-ctx-scopes the-struct_306)"
"(expand-context-binding-layer the-struct_306)"
"(expand-context-reference-records the-struct_306)"
" only-immediate?64_314"
" just-once?65_315"
"(expand-context-module-begin-k the-struct_306)"
"(expand-context-need-eventually-defined the-struct_306)"
"(expand-context-allow-unbound? the-struct_306)"
" preserve-#%expression-and-do-not-add-#%top?66_316"
" stops67_317"
" current-introduction-scopes68_318"
"(expand-context-declared-submodule-names the-struct_306)"
"(expand-context-lifts the-struct_306)"
"(expand-context-lift-envs the-struct_306)"
"(expand-context-module-lifts the-struct_306)"
"(expand-context-require-lifts the-struct_306)"
"(expand-context-to-module-lifts the-struct_306)"
"(expand-context-requires+provides the-struct_306)"
"(expand-context-name the-struct_306)"
"(expand-context-observer the-struct_306)))"
"                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_306))))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_341 given-args_342 ctx32_343)"
"(let-values(((context24_344)(car given-args_342))"
"((given-kws_345)(cdr given-kws_341))"
"((given-args_346)(cdr given-args_342)))"
"(let-values(((intdefs26_347)(car given-args_346))"
"((given-kws_348)(cdr given-kws_345))"
"((given-args_349)(cdr given-args_346)))"
"(let-values(((phase29_350)(if(pair? given-kws_348)(eq? '#:phase(car given-kws_348)) #f)))"
"(let-values(((phase25_351)(if phase29_350(car given-args_349)(void)))"
"((given-kws_352)(if phase29_350(cdr given-kws_348) given-kws_348))"
"((given-args_353)(if phase29_350(cdr given-args_349) given-args_349)))"
"(let-values(((stop-ids31_354)(pair? given-kws_352)))"
"(let-values(((stop-ids27_355)(if stop-ids31_354(car given-args_353)(void))))"
"(make-local-expand-context33.1"
" context24_344"
" intdefs26_347"
" phase25_351"
" phase29_350"
" stop-ids27_355"
" stop-ids31_354"
" ctx32_343)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/1.1$8"
"(lambda(given-kws_356 given-argc_357)"
"(if(= given-argc_357 3)"
"(subsets? '(#:context #:intdefs) given-kws_356 '(#:context #:intdefs #:phase #:stop-ids))"
" #f))"
"(case-lambda((given-kws_358 given-args_359 ctx_360)(unpack34.1 given-kws_358 given-args_359 ctx_360)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_361 ctx_362)(flip-scopes s_361(expand-context-current-introduction-scopes ctx_362))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(if(let-values(((...and/syntax-local.rkt:65:7_3) get-current-expand-context8.1)((temp65_4) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_4 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:65:7_3"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp65_4))))"
" #t"
" #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_5)"
"(let-values(((...and/syntax-local.rkt:68:14_6) get-current-expand-context8.1)((temp66_7) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp66_7 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:68:14_6"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp66_7))))))"
"(if ctx_5(if(expand-context-lifts ctx_5) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_8)"
"(let-values(((...and/syntax-local.rkt:74:14_9) get-current-expand-context8.1)((temp67_10) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp67_10 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:74:14_9"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp67_10))))))"
"(if ctx_8(if(expand-context-to-module-lifts ctx_8) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_11)"
"(let-values(((...and/syntax-local.rkt:80:14_12) get-current-expand-context8.1)((temp68_13) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp68_13 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:80:14_12"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp68_13))))))"
"(if ctx_11(if(expand-context-requires+provides ctx_11) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_14)"
"(let-values(((temp69_15) 'syntax-local-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp69_15 #t)"
"(get-current-expand-context8.1 temp69_15)))))"
"(expand-context-context ctx_14))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_16)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_16)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_16)))"
"(values))))"
"(let-values(((ctx_17)"
"(let-values(((temp70_18) 'syntax-local-introduce))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp70_18 #t)"
"(get-current-expand-context8.1 temp70_18)))))"
"(flip-introduction-scopes s_16 ctx_17)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_19)"
"(let-values((()"
"(begin"
"(if(identifier? id_19)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_19)))"
"(values))))"
"(let-values(((ctx_20)"
"(let-values(((temp71_21) 'syntax-local-identifier-as-binding))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp71_21 #t)"
"(get-current-expand-context8.1 temp71_21)))))"
"(remove-use-site-scopes id_19 ctx_20)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((...and/syntax-local.rkt:102:14_23) get-current-expand-context8.1)((temp72_24) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp72_24 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:102:14_23"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp72_24))))))"
"(if ctx_22(expand-context-phase ctx_22) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_25)"
"(let-values(((temp73_27) 'syntax-local-name))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp73_27 #t)"
"(get-current-expand-context8.1 temp73_27)))))"
"(let-values(((id_26)(expand-context-name ctx_25)))"
"(if id_26(datum->syntax$1 #f(syntax-e$1 id_26) id_26) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_28)"
"(lambda(as-use-site?1_29 as-use-site?2_30)"
"(let-values(((as-use-site?_31)(if as-use-site?2_30 as-use-site?1_29 #f)))"
"(let-values()"
"(let-values(((sc_32)(new-scope(if as-use-site?_31 'use-site 'macro))))"
"(let-values(((core77_33)"
"(lambda(s76_34 mode74_35 mode75_36)"
"(let-values(((s_37) s76_34))"
"(let-values(((mode_38)(if mode75_36 mode74_35 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_37)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_37)))"
"(let-values(((tmp_39) mode_38))"
"(if(equal? tmp_39 'add)"
"(let-values()(add-scope s_37 sc_32))"
"(if(equal? tmp_39 'remove)"
"(let-values()(remove-scope s_37 sc_32))"
"(if(equal? tmp_39 'flip)"
"(let-values()(flip-scope s_37 sc_32))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_38)))))))))))))"
"(case-lambda"
"((s_40)(core77_33 s_40 #f #f))"
"((s_41 mode74_42)(core77_33 s_41 mode74_42 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_28 #f #f))"
"((as-use-site?1_43)(make-syntax-introducer3_28 as-use-site?1_43 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_44)"
"(lambda(ext-s7_45 base-s8_46 phase5_47 phase6_48)"
"(let-values(((ext-s_49) ext-s7_45))"
"(let-values(((base-s_50) base-s8_46))"
"(let-values(((phase_51)(if phase6_48 phase5_47(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_49)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_49)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_57)(syntax?$1 base-s_50)))"
"(if or-part_57 or-part_57(not base-s_50)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_50)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_51)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_51)))"
"(values))))"
"(let-values(((ext-scs_52)(syntax-scope-set ext-s_49 phase_51)))"
"(let-values(((base-scs_53)"
"(syntax-scope-set"
"(let-values(((or-part_58) base-s_50))"
"(if or-part_58 or-part_58 empty-syntax))"
" phase_51)))"
"(let-values(((use-base-scs_54)"
"(if(subset? base-scs_53 ext-scs_52)"
" base-scs_53"
"(let-values(((or-part_59)"
"(if(identifier? base-s_50)"
"(let-values(((...and/syntax-local.rkt:137:36_60)"
" resolve31.1)"
"((base-s79_61) base-s_50)"
"((phase80_62) phase_51)"
"((temp81_63) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve31.1))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_63"
" #t"
" base-s79_61"
" phase80_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:137:36_60"
" keyword-procedure-extract"
" '(#:get-scopes?)"
" 4)"
" '(#:get-scopes?)"
"(list temp81_63)"
" base-s79_61"
" phase80_62)))"
" #f)))"
"(if or-part_59 or-part_59(seteq))))))"
"(let-values(((delta-scs_55)"
"(set->list(set-subtract ext-scs_52 use-base-scs_54))))"
"(let-values(((maybe-taint_56)"
"(if(syntax-clean? ext-s_49) values syntax-taint$1)))"
"(let-values(((core85_64)"
"(lambda(s84_65 mode82_66 mode83_67)"
"(let-values(((s_68) s84_65))"
"(let-values(((mode_69)(if mode83_67 mode82_66 'add)))"
"(let-values()"
"(maybe-taint_56"
"(let-values(((tmp_70) mode_69))"
"(if(equal? tmp_70 'add)"
"(let-values()(add-scopes s_68 delta-scs_55))"
"(if(equal? tmp_70 'remove)"
"(let-values()(remove-scopes s_68 delta-scs_55))"
"(if(equal? tmp_70 'flip)"
"(let-values()(flip-scopes s_68 delta-scs_55))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                            \"(or/c 'add 'remove 'flip)\""
" mode_69)))))))))))))"
"(case-lambda"
"((s_71)(core85_64 s_71 #f #f))"
"((s_72 mode82_73)(core85_64 s_72 mode82_73 #t)))))))))))))))))))"
"(case-lambda"
"((ext-s_74 base-s_75)(make-syntax-delta-introducer9_44 ext-s_74 base-s_75 #f #f))"
"((ext-s_76 base-s_77 phase5_78)(make-syntax-delta-introducer9_44 ext-s_76 base-s_77 phase5_78 #t)))))"
"(define-values"
"(lifted/1.1$7)"
"(make-required"
" 'do-syntax-local-value"
"(case-lambda"
"((self_79 who_80 id_81 intdef_82 failure-thunk_83)"
"(apply missing-kw self_79 who_80 id_81 intdef_82 failure-thunk_83 null)))"
" #f"
" #f))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_84 who13_85 id14_86 intdef15_87 failure-thunk16_88)"
"(let-values(((who_89) who13_85))"
"(let-values(((id_90) id14_86))"
"(let-values(((intdef_91) intdef15_87))"
"(let-values(((failure-thunk_92) failure-thunk16_88))"
"(let-values(((immediate?_93) immediate?11_84))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_90)"
"(void)"
"                                  (let-values () (raise-argument-error who_89 \"identifier?\" id_90)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_97)(not failure-thunk_92)))"
"(if or-part_97"
" or-part_97"
"(if(procedure? failure-thunk_92)"
"(procedure-arity-includes? failure-thunk_92 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_89"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_92)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_98)(not intdef_91)))"
"(if or-part_98 or-part_98(1/internal-definition-context? intdef_91)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_89"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_92)))"
"(values))))"
"(let-values(((current-ctx_94)"
"(let-values(((who87_99) who_89))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who87_99 #t)"
"(get-current-expand-context8.1 who87_99)))))"
"(let-values(((ctx_95)"
"(if intdef_91"
"(let-values(((the-struct_100) current-ctx_94))"
"(if(expand-context? the-struct_100)"
"(let-values(((env88_101)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_94)"
" intdef_91)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_100)"
"(root-expand-context-post-expansion-scope the-struct_100)"
"(root-expand-context-top-level-bind-scope the-struct_100)"
"(root-expand-context-all-scopes-stx the-struct_100)"
"(root-expand-context-use-site-scopes the-struct_100)"
"(root-expand-context-defined-syms the-struct_100)"
"(root-expand-context-frame-id the-struct_100)"
"(root-expand-context-counter the-struct_100)"
"(root-expand-context-lift-key the-struct_100)"
"(expand-context-context the-struct_100)"
"(expand-context-phase the-struct_100)"
"(expand-context-namespace the-struct_100)"
" env88_101"
"(expand-context-user-env the-struct_100)"
"(expand-context-post-expansion-scope-action the-struct_100)"
"(expand-context-scopes the-struct_100)"
"(expand-context-def-ctx-scopes the-struct_100)"
"(expand-context-binding-layer the-struct_100)"
"(expand-context-reference-records the-struct_100)"
"(expand-context-only-immediate? the-struct_100)"
"(expand-context-just-once? the-struct_100)"
"(expand-context-module-begin-k the-struct_100)"
"(expand-context-need-eventually-defined the-struct_100)"
"(expand-context-allow-unbound? the-struct_100)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_100)"
"(expand-context-stops the-struct_100)"
"(expand-context-current-introduction-scopes the-struct_100)"
"(expand-context-declared-submodule-names the-struct_100)"
"(expand-context-lifts the-struct_100)"
"(expand-context-lift-envs the-struct_100)"
"(expand-context-module-lifts the-struct_100)"
"(expand-context-require-lifts the-struct_100)"
"(expand-context-to-module-lifts the-struct_100)"
"(expand-context-requires+provides the-struct_100)"
"(expand-context-name the-struct_100)"
"(expand-context-observer the-struct_100)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_100)))"
" current-ctx_94)))"
"(let-values((()"
"(begin"
"(let-values(((obs_102)(expand-context-observer ctx_95)))"
"(if obs_102"
"(let-values()"
"(let-values()(call-expand-observe obs_102 'local-value id_90)))"
"(void)))"
"(values))))"
"(let-values(((phase_96)(expand-context-phase ctx_95)))"
"((letrec-values(((loop_103)"
"(lambda(id_104)"
"(let-values(((b_105)"
"(if immediate?_93"
"(let-values(((...and/syntax-local.rkt:175:18_106)"
" resolve+shift22.1)"
"((id89_107) id_104)"
"((phase90_108) phase_96)"
"((temp91_109) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp91_109"
" #t"
" #f"
" #f"
" id89_107"
" phase90_108)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:175:18_106"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp91_109)"
" id89_107"
" phase90_108)))"
"(resolve+shift/extra-inspector"
" id_104"
" phase_96"
"(expand-context-namespace ctx_95)))))"
"(begin"
"(let-values(((obs_110)(expand-context-observer ctx_95)))"
"(if obs_110"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_110 'resolve id_104)))"
"(void)))"
"(if(not b_105)"
"(let-values()"
"(begin"
"(let-values(((obs_111)(expand-context-observer ctx_95)))"
"(if obs_111"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_111"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_92"
"(failure-thunk_92)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_104))))"
"(let-values()"
"(let-values(((v_112 insp_113)"
"(let-values(((...and/syntax-local.rkt:185:30_114)"
" lookup17.1)"
"((b92_115) b_105)"
"((ctx93_116) ctx_95)"
"((id94_117) id_104)"
"((temp95_118) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" temp95_118"
" #t"
" b92_115"
" ctx93_116"
" id94_117)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:185:30_114"
" keyword-procedure-extract"
" '(#:out-of-context-as-variable?)"
" 5)"
" '(#:out-of-context-as-variable?)"
"(list temp95_118)"
" b92_115"
" ctx93_116"
" id94_117)))))"
"(if(let-values(((or-part_119)(variable? v_112)))"
"(if or-part_119 or-part_119(core-form? v_112)))"
"(let-values()"
"(begin"
"(let-values(((obs_120)"
"(expand-context-observer ctx_95)))"
"(if obs_120"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_120"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_92"
"(failure-thunk_92)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_104))))"
"(let-values()"
"(begin"
"(let-values(((obs_121)"
"(expand-context-observer ctx_95)))"
"(if obs_121"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_121"
" 'local-value-result"
" #t)))"
"(void)))"
"(if(1/rename-transformer? v_112)"
"(let-values()"
"(if immediate?_93"
"(values"
" v_112"
"(1/rename-transformer-target v_112))"
"(loop_103(1/rename-transformer-target v_112))))"
"(if immediate?_93"
"(let-values()(values v_112 #f))"
"(let-values() v_112))))))))))))))"
" loop_103)"
"(flip-introduction-scopes id_90 ctx_95)))))))))))))))))"
"(define-values"
"(unpack18.1$1)"
"(lambda(given-kws_122 given-args_123 who13_124 id14_125 intdef15_126 failure-thunk16_127)"
"(let-values(((immediate?11_128)(car given-args_123)))"
"(do-syntax-local-value17.1 immediate?11_128 who13_124 id14_125 intdef15_126 failure-thunk16_127))))"
"(define-values"
"(do-syntax-local-value19.1)"
"(lifted/1.1$7"
"(lambda(given-kws_129 given-argc_130)"
"(if(= given-argc_130 6)"
"(let-values(((l2_131) given-kws_129))"
"(if(pair? l2_131)(if(eq?(car l2_131) '#:immediate?)(null?(cdr l2_131)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_132 given-args_133 who_134 id_135 intdef_136 failure-thunk_137)"
"(unpack18.1$1 given-kws_132 given-args_133 who_134 id_135 intdef_136 failure-thunk_137)))"
" '(#:immediate?)"
" '(#:immediate?)))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_138)"
"(lambda(id24_139 failure-thunk20_140 intdef21_141 failure-thunk22_142 intdef23_143)"
"(let-values(((id_144) id24_139))"
"(let-values(((failure-thunk_145)(if failure-thunk22_142 failure-thunk20_140 #f)))"
"(let-values(((intdef_146)(if intdef23_143 intdef21_141 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:203:2_147) do-syntax-local-value19.1)"
"((temp96_148) 'syntax-local-value)"
"((temp97_149) #f)"
"((id98_150) id_144)"
"((intdef99_151) intdef_146)"
"((failure-thunk100_152) failure-thunk_145))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp97_149"
" temp96_148"
" id98_150"
" intdef99_151"
" failure-thunk100_152)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:203:2_147"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp97_149)"
" temp96_148"
" id98_150"
" intdef99_151"
" failure-thunk100_152))))))))))"
"(case-lambda"
"((id_153)(syntax-local-value25_138 id_153 #f #f #f #f))"
"((id_154 failure-thunk_155 intdef21_156)(syntax-local-value25_138 id_154 failure-thunk_155 intdef21_156 #t #t))"
"((id_157 failure-thunk20_158)(syntax-local-value25_138 id_157 failure-thunk20_158 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_159)"
"(lambda(id31_160 failure-thunk27_161 intdef28_162 failure-thunk29_163 intdef30_164)"
"(let-values(((id_165) id31_160))"
"(let-values(((failure-thunk_166)(if failure-thunk29_163 failure-thunk27_161 #f)))"
"(let-values(((intdef_167)(if intdef30_164 intdef28_162 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:206:2_168) do-syntax-local-value19.1)"
"((temp101_169) 'syntax-local-value/immediate)"
"((temp102_170) #t)"
"((id103_171) id_165)"
"((intdef104_172) intdef_167)"
"((failure-thunk105_173) failure-thunk_166))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp102_170"
" temp101_169"
" id103_171"
" intdef104_172"
" failure-thunk105_173)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:206:2_168"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp102_170)"
" temp101_169"
" id103_171"
" intdef104_172"
" failure-thunk105_173))))))))))"
"(case-lambda"
"((id_174)(syntax-local-value/immediate32_159 id_174 #f #f #f #f))"
"((id_175 failure-thunk_176 intdef28_177)"
"(syntax-local-value/immediate32_159 id_175 failure-thunk_176 intdef28_177 #t #t))"
"((id_178 failure-thunk27_179)(syntax-local-value/immediate32_159 id_178 failure-thunk27_179 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_180 n_181 s_182)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_182) (void) (let-values () (raise-argument-error who_180 \"syntax?\" s_182)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_181)"
"(void)"
"                        (let-values () (raise-argument-error who_180 \"exact-nonnegative-integer?\" n_181)))"
"(values))))"
"(let-values(((ctx_183)"
"(let-values(((who106_187) who_180))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who106_187 #t)"
"(get-current-expand-context8.1 who106_187)))))"
"(let-values(((lifts_184)(expand-context-lifts ctx_183)))"
"(let-values(((counter_185)(root-expand-context-counter ctx_183)))"
"(let-values(((ids_186)"
"(alt-reverse"
"(let-values(((start_188) 0)((end_189) n_181)((inc_190) 1))"
"(begin"
"(if(if(real? start_188)(if(real? end_189)(real? inc_190) #f) #f)"
"(void)"
"(let-values()(in-range start_188 end_189 inc_190)))"
"((letrec-values(((for-loop_191)"
"(lambda(fold-var_192 pos_193)"
"(if(< pos_193 end_189)"
"(let-values(((i_194) pos_193))"
"(let-values(((fold-var_195)"
"(let-values(((fold-var_196) fold-var_192))"
"(let-values(((fold-var_197)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_185"
"(add1"
"(unbox"
" counter_185)))"
"(values))))"
"(let-values(((name_198)"
"(string->unreadable-symbol"
"(format"
"                                                                                                              \"lifted/~a\""
"(unbox"
" counter_185)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_198)"
"(new-scope 'macro)))))"
" fold-var_196))))"
"(values fold-var_197)))))"
"(for-loop_191 fold-var_195(+ pos_193 inc_190))))"
" fold-var_192))))"
" for-loop_191)"
" null"
" start_188))))))"
"(begin"
"(let-values(((obs_199)(expand-context-observer ctx_183)))"
"(if obs_199"
"(let-values()(let-values()(call-expand-observe obs_199 'local-lift ids_186 s_182)))"
"(void)))"
"(map2"
"(lambda(id_200)(flip-introduction-scopes id_200 ctx_183))"
"(add-lifted!"
" lifts_184"
" ids_186"
"(flip-introduction-scopes s_182 ctx_183)"
"(expand-context-phase ctx_183))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_201)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_201))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_202 s_203)(do-lift-values-expression 'syntax-local-lift-values-expression n_202 s_203)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_204)"
"(let-values(((temp107_205) 'syntax-local-lift-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp107_205 #t)"
"(get-current-expand-context8.1 temp107_205)))))"
"(root-expand-context-lift-key ctx_204))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_206)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_206)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_206)))"
"(values))))"
"(let-values(((ctx_207)"
"(let-values(((temp108_209) 'syntax-local-lift-module))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp108_209 #t)"
"(get-current-expand-context8.1 temp108_209)))))"
"(let-values(((phase_208)(expand-context-phase ctx_207)))"
"(begin"
"(let-values(((tmp_210)(core-form-sym s_206 phase_208)))"
"(if(if(equal? tmp_210 'module) #t(equal? tmp_210 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_207) s_206 phase_208))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_206))))"
"(let-values(((obs_211)(expand-context-observer ctx_207)))"
"(if obs_211"
"(let-values()(let-values()(call-expand-observe obs_211 'lift-statement s_206)))"
"(void)))))))))"
"(define-values"
"(lifted/2.1$5)"
"(make-required"
" 'do-local-lift-to-module"
"(case-lambda((self_212 who_213 s_214)(apply missing-kw self_212 who_213 s_214 null)))"
" #f"
" #f))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_215"
" get-lift-ctx36_216"
" get-wrt-phase38_217"
" intro?34_218"
" intro?42_219"
" more-checks35_220"
" more-checks43_221"
" post-wrap41_222"
" post-wrap49_223"
" pre-wrap39_224"
" pre-wrap47_225"
" shift-wrap40_226"
" shift-wrap48_227"
" who50_228"
" s51_229)"
"(let-values(((who_230) who50_228))"
"(let-values(((s_231) s51_229))"
"(let-values(((intro?_232)(if intro?42_219 intro?34_218 #t)))"
"(let-values(((more-checks_233)(if more-checks43_221 more-checks35_220 void)))"
"(let-values(((get-lift-ctx_234) get-lift-ctx36_216))"
"(let-values(((add-lifted!_235) add-lifted!37_215))"
"(let-values(((get-wrt-phase_236) get-wrt-phase38_217))"
"(let-values(((pre-wrap_237)"
"(if pre-wrap47_225 pre-wrap39_224(lambda(s_238 phase_239 lift-ctx_240) s_238))))"
"(let-values(((shift-wrap_241)"
"(if shift-wrap48_227 shift-wrap40_226(lambda(s_242 phase_243 lift-ctx_244) s_242))))"
"(let-values(((post-wrap_245)"
"(if post-wrap49_223 post-wrap41_222(lambda(s_246 phase_247 lift-ctx_248) s_246))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_231)"
"(void)"
"                                            (let-values () (raise-argument-error who_230 \"syntax?\" s_231)))"
"(values))))"
"(let-values((()(begin(more-checks_233)(values))))"
"(let-values(((ctx_249)"
"(let-values(((who109_257) who_230))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who109_257 #t)"
"(get-current-expand-context8.1 who109_257)))))"
"(let-values(((lift-ctx_250)(get-lift-ctx_234 ctx_249)))"
"(let-values(((phase_251)(expand-context-phase ctx_249)))"
"(let-values(((wrt-phase_252)(get-wrt-phase_236 lift-ctx_250)))"
"(let-values(((added-s_253)"
"(if intro?_232(flip-introduction-scopes s_231 ctx_249) s_231)))"
"(let-values(((pre-s_254)(pre-wrap_237 added-s_253 phase_251 lift-ctx_250)))"
"(let-values(((shift-s_255)"
"(let-values(((start_258) phase_251)"
"((end_259) wrt-phase_252)"
"((inc_260) -1))"
"(begin"
"(if(if(real? start_258)"
"(if(real? end_259)(real? inc_260) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_258 end_259 inc_260)))"
"((letrec-values(((for-loop_261)"
"(lambda(s_262 pos_263)"
"(if(> pos_263 end_259)"
"(let-values(((phase_264) pos_263))"
"(let-values(((s_265)"
"(let-values(((s_266)"
" s_262))"
"(let-values(((s_267)"
"(let-values()"
"(shift-wrap_241"
" s_266"
"(sub1"
" phase_264)"
" lift-ctx_250))))"
"(values s_267)))))"
"(for-loop_261"
" s_265"
"(+ pos_263 inc_260))))"
" s_262))))"
" for-loop_261)"
" pre-s_254"
" start_258)))))"
"(let-values(((post-s_256)"
"(post-wrap_245 shift-s_255 wrt-phase_252 lift-ctx_250)))"
"(begin"
"(add-lifted!_235 lift-ctx_250 post-s_256 wrt-phase_252)"
"(values ctx_249 added-s_253)))))))))))))))))))))))))"
"(define-values"
"(unpack53.1)"
"(lambda(given-kws_268 given-args_269 who50_270 s51_271)"
"(let-values(((add-lifted!37_272)(car given-args_269))"
"((given-kws_273)(cdr given-kws_268))"
"((given-args_274)(cdr given-args_269)))"
"(let-values(((get-lift-ctx36_275)(car given-args_274))"
"((given-kws_276)(cdr given-kws_273))"
"((given-args_277)(cdr given-args_274)))"
"(let-values(((get-wrt-phase38_278)(car given-args_277))"
"((given-kws_279)(cdr given-kws_276))"
"((given-args_280)(cdr given-args_277)))"
"(let-values(((intro?42_281)(if(pair? given-kws_279)(eq? '#:intro?(car given-kws_279)) #f)))"
"(let-values(((intro?34_282)(if intro?42_281(car given-args_280)(void)))"
"((given-kws_283)(if intro?42_281(cdr given-kws_279) given-kws_279))"
"((given-args_284)(if intro?42_281(cdr given-args_280) given-args_280)))"
"(let-values(((more-checks43_285)(if(pair? given-kws_283)(eq? '#:more-checks(car given-kws_283)) #f)))"
"(let-values(((more-checks35_286)(if more-checks43_285(car given-args_284)(void)))"
"((given-kws_287)(if more-checks43_285(cdr given-kws_283) given-kws_283))"
"((given-args_288)(if more-checks43_285(cdr given-args_284) given-args_284)))"
"(let-values(((post-wrap49_289)(if(pair? given-kws_287)(eq? '#:post-wrap(car given-kws_287)) #f)))"
"(let-values(((post-wrap41_290)(if post-wrap49_289(car given-args_288)(void)))"
"((given-kws_291)(if post-wrap49_289(cdr given-kws_287) given-kws_287))"
"((given-args_292)(if post-wrap49_289(cdr given-args_288) given-args_288)))"
"(let-values(((pre-wrap47_293)"
"(if(pair? given-kws_291)(eq? '#:pre-wrap(car given-kws_291)) #f)))"
"(let-values(((pre-wrap39_294)(if pre-wrap47_293(car given-args_292)(void)))"
"((given-kws_295)(if pre-wrap47_293(cdr given-kws_291) given-kws_291))"
"((given-args_296)(if pre-wrap47_293(cdr given-args_292) given-args_292)))"
"(let-values(((shift-wrap48_297)(pair? given-kws_295)))"
"(let-values(((shift-wrap40_298)(if shift-wrap48_297(car given-args_296)(void))))"
"(do-local-lift-to-module52.1"
" add-lifted!37_272"
" get-lift-ctx36_275"
" get-wrt-phase38_278"
" intro?34_282"
" intro?42_281"
" more-checks35_286"
" more-checks43_285"
" post-wrap41_290"
" post-wrap49_289"
" pre-wrap39_294"
" pre-wrap47_293"
" shift-wrap40_298"
" shift-wrap48_297"
" who50_270"
" s51_271))))))))))))))))"
"(define-values"
"(do-local-lift-to-module54.1)"
"(lifted/2.1$5"
"(lambda(given-kws_299 given-argc_300)"
"(if(= given-argc_300 4)"
"(subsets?"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" given-kws_299"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap))"
" #f))"
"(case-lambda((given-kws_301 given-args_302 who_303 s_304)(unpack53.1 given-kws_301 given-args_302 who_303 s_304)))"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap)))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_305 use-s_306)"
"(let-values(((sc_307)(new-scope 'macro)))"
"(let-values(((ctx_308 added-s_309)"
"(let-values(((...and/syntax-local.rkt:280:4_311) do-local-lift-to-module54.1)"
"((temp110_312) 'syntax-local-lift-require)"
"((temp111_313)(datum->syntax$1 #f s_305))"
"((temp112_314) #f)"
"((temp113_315)"
"(lambda()"
"(if(syntax?$1 use-s_306)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_306)))))"
"((expand-context-require-lifts114_316) expand-context-require-lifts)"
"((require-lift-context-wrt-phase115_317) require-lift-context-wrt-phase)"
"((add-lifted-require!116_318) add-lifted-require!)"
"((temp117_319)"
"(lambda(s_321 phase_322 require-lift-ctx_323)(require-spec-shift-for-syntax s_321)))"
"((temp118_320)"
"(lambda(s_324 phase_325 require-lift-ctx_326)"
"(wrap-form '#%require(add-scope s_324 sc_307) phase_325))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-require!116_318"
" expand-context-require-lifts114_316"
" require-lift-context-wrt-phase115_317"
" temp112_314"
" #t"
" temp113_315"
" #t"
" temp118_320"
" #t"
" #f"
" #f"
" temp117_319"
" #t"
" temp110_312"
" temp111_313)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:280:4_311"
" keyword-procedure-extract"
" '(#:add-lifted!"
" #:get-lift-ctx"
" #:get-wrt-phase"
" #:intro?"
" #:more-checks"
" #:post-wrap"
" #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-require!116_318"
" expand-context-require-lifts114_316"
" require-lift-context-wrt-phase115_317"
" temp112_314"
" temp113_315"
" temp118_320"
" temp117_319)"
" temp110_312"
" temp111_313)))))"
"(let-values(((result-s_310)(add-scope use-s_306 sc_307)))"
"(begin"
"(let-values(((obs_327)(expand-context-observer ctx_308)))"
"(if obs_327"
"(let-values()"
"(let-values()(call-expand-observe obs_327 'lift-require added-s_309 use-s_306 result-s_310)))"
"(void)))"
" result-s_310))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_328)"
"(let-values(((ctx_329 result-s_330)"
"(let-values(((...and/syntax-local.rkt:303:4_331) do-local-lift-to-module54.1)"
"((temp119_332) 'syntax-local-lift-module-end-declaration)"
"((s120_333) s_328)"
"((expand-context-to-module-lifts121_334) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase122_335) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!123_336) add-lifted-to-module-provide!)"
"((temp124_337)"
"(lambda(s_339 phase_340 to-module-lift-ctx_341)(wrap-form 'for-syntax s_339 #f)))"
"((temp125_338)"
"(lambda(s_342 phase_343 to-module-lift-ctx_344)"
"(wrap-form '#%provide s_342 phase_343))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!123_336"
" expand-context-to-module-lifts121_334"
" to-module-lift-context-wrt-phase122_335"
" #f"
" #f"
" #f"
" #f"
" temp125_338"
" #t"
" #f"
" #f"
" temp124_337"
" #t"
" temp119_332"
" s120_333)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:303:4_331"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-provide!123_336"
" expand-context-to-module-lifts121_334"
" to-module-lift-context-wrt-phase122_335"
" temp125_338"
" temp124_337)"
" temp119_332"
" s120_333)))))"
"(let-values(((obs_345)(expand-context-observer ctx_329)))"
"(if obs_345(let-values()(let-values()(call-expand-observe obs_345 'lift-provide result-s_330)))(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_346)"
"(let-values(((ctx_347 also-s_348)"
"(let-values(((...and/syntax-local.rkt:318:4_349) do-local-lift-to-module54.1)"
"((temp126_350) 'syntax-local-lift-module-end-declaration)"
"((s127_351) s_346)"
"((expand-context-to-module-lifts128_352) expand-context-to-module-lifts)"
"((temp129_353)(lambda(lift-ctx_357) 0))"
"((add-lifted-to-module-end!130_354) add-lifted-to-module-end!)"
"((temp131_355)"
"(lambda(orig-s_358 phase_359 to-module-lift-ctx_360)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_360)"
"(wrap-form '#%expression orig-s_358 phase_359)"
" orig-s_358)))"
"((temp132_356)"
"(lambda(s_361 phase_362 to-module-lift-ctx_363)"
"(wrap-form 'begin-for-syntax s_361 phase_362))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!130_354"
" expand-context-to-module-lifts128_352"
" temp129_353"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp131_355"
" #t"
" temp132_356"
" #t"
" temp126_350"
" s127_351)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:318:4_349"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-end!130_354"
" expand-context-to-module-lifts128_352"
" temp129_353"
" temp131_355"
" temp132_356)"
" temp126_350"
" s127_351)))))"
"(let-values(((obs_364)(expand-context-observer ctx_347)))"
"(if obs_364(let-values()(let-values()(call-expand-observe obs_364 'lift-statement s_346)))(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_365 s_366 phase_367)"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_367(syntax-shift-phase-level$1 core-stx phase_367) #f) sym_365) s_366))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_368)"
"(let-values(((temp133_369) 'syntax-local-module-defined-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp133_369 #t)"
"(get-current-expand-context8.1 temp133_369)))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_368)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_370 phase-level_371)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_376)(not mod-path_370)))"
"(if or-part_376 or-part_376(1/module-path? mod-path_370)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_370)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_377)(eq? phase-level_371 #t)))"
"(if or-part_377 or-part_377(phase? phase-level_371)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_371)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_372)"
"(let-values(((temp134_378) 'syntax-local-module-required-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp134_378 #t)"
"(get-current-expand-context8.1 temp134_378)))))"
"(let-values(((requires+provides_373)(expand-context-requires+provides ctx_372)))"
"(let-values(((mpi_374)(if mod-path_370(module-path->mpi/context mod-path_370 ctx_372) #f)))"
"(let-values(((requireds_375)"
"(extract-all-module-requires"
" requires+provides_373"
" mpi_374"
"(if(eq? phase-level_371 #t) 'all phase-level_371))))"
"(if requireds_375"
"(alt-reverse"
"(let-values(((ht_379)(requireds->phase-ht requireds_375)))"
"(begin"
"(if((lambda(ht_380)(hash? ht_380)) ht_379)(void)(let-values()(default-in-hash ht_379)))"
"((letrec-values(((for-loop_381)"
"(lambda(fold-var_382 i_383)"
"(if i_383"
"(let-values(((phase_384 ids_385)(hash-iterate-key+value ht_379 i_383)))"
"(let-values(((fold-var_386)"
"(let-values(((fold-var_387) fold-var_382))"
"(let-values(((fold-var_388)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_384 ids_385))"
" fold-var_387))))"
"(values fold-var_388)))))"
"(for-loop_381 fold-var_386(hash-iterate-next ht_379 i_383))))"
" fold-var_382))))"
" for-loop_381)"
" null"
"(hash-iterate-first ht_379)))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_389)"
"(let-values(((lst_390) requireds_389))"
"(begin"
"(if(list? lst_390)(void)(let-values()(in-list lst_390)))"
"((letrec-values(((for-loop_391)"
"(lambda(ht_392 lst_393)"
"(if(pair? lst_393)"
"(let-values(((r_394)(unsafe-car lst_393)))"
"(let-values(((ht_395)"
"(let-values(((ht_396) ht_392))"
"(let-values(((ht_397)"
"(let-values()"
"(hash-update"
" ht_396"
"(required-phase r_394)"
"(lambda(l_398)(cons(required-id r_394) l_398))"
" null))))"
"(values ht_397)))))"
"(for-loop_391 ht_395(unsafe-cdr lst_393))))"
" ht_392))))"
" for-loop_391)"
"(hasheqv)"
" lst_390)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_399)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_404)(1/module-path? mod-path_399)))"
"(if or-part_404"
" or-part_404"
"(if(syntax?$1 mod-path_399)(1/module-path?(syntax->datum$1 mod-path_399)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_399)))"
"(values))))"
"(let-values(((ctx_400)"
"(let-values(((temp135_405) 'syntax-local-module-exports))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp135_405 #t)"
"(get-current-expand-context8.1 temp135_405)))))"
"(let-values(((ns_401)(expand-context-namespace ctx_400)))"
"(let-values(((mod-name_402)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_399)(syntax->datum$1 mod-path_399) mod-path_399)"
" ctx_400)"
" #t)))"
"(let-values(((m_403)(namespace->module ns_401 mod-name_402)))"
"(begin"
"(if m_403(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_402)))"
"(alt-reverse"
"(let-values(((ht_406)(module-provides m_403)))"
"(begin"
"(if((lambda(ht_407)(hash? ht_407)) ht_406)(void)(let-values()(default-in-hash ht_406)))"
"((letrec-values(((for-loop_408)"
"(lambda(fold-var_409 i_410)"
"(if i_410"
"(let-values(((phase_411 syms_412)(hash-iterate-key+value ht_406 i_410)))"
"(let-values(((fold-var_413)"
"(let-values(((fold-var_414) fold-var_409))"
"(let-values(((fold-var_415)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_411"
"(alt-reverse"
"(let-values(((ht_416) syms_412))"
"(begin"
"(if((lambda(ht_417)"
"(hash? ht_417))"
" ht_416)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_416)))"
"((letrec-values(((for-loop_418)"
"(lambda(fold-var_419"
" i_420)"
"(if i_420"
"(let-values(((sym_421)"
"(hash-iterate-key"
" ht_416"
" i_420)))"
"(let-values(((fold-var_422)"
"(let-values(((fold-var_423)"
" fold-var_419))"
"(let-values(((fold-var_424)"
"(let-values()"
"(cons"
"(let-values()"
" sym_421)"
" fold-var_423))))"
"(values"
" fold-var_424)))))"
"(for-loop_418"
" fold-var_422"
"(hash-iterate-next"
" ht_416"
" i_420))))"
" fold-var_419))))"
" for-loop_418)"
" null"
"(hash-iterate-first ht_416)))))))"
" fold-var_414))))"
"(values fold-var_415)))))"
"(for-loop_408 fold-var_413(hash-iterate-next ht_406 i_410))))"
" fold-var_409))))"
" for-loop_408)"
" null"
"(hash-iterate-first ht_406)))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_425)"
"(let-values(((temp136_427) 'syntax-local-submodules))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp136_427 #t)"
"(get-current-expand-context8.1 temp136_427)))))"
"(let-values(((submods_426)(expand-context-declared-submodule-names ctx_425)))"
"(alt-reverse"
"(let-values(((ht_428) submods_426))"
"(begin"
"(if((lambda(ht_429)(hash? ht_429)) ht_428)(void)(let-values()(default-in-hash ht_428)))"
"((letrec-values(((for-loop_430)"
"(lambda(fold-var_431 i_432)"
"(if i_432"
"(let-values(((name_433 kind_434)(hash-iterate-key+value ht_428 i_432)))"
"(let-values(((fold-var_435)"
"(let-values(((fold-var_436) fold-var_431))"
"(if(eq? kind_434 'module)"
"(let-values(((fold-var_437) fold-var_436))"
"(let-values(((fold-var_438)"
"(let-values()"
"(cons(let-values() name_433) fold-var_437))))"
"(values fold-var_438)))"
" fold-var_436))))"
"(for-loop_430 fold-var_435(hash-iterate-next ht_428 i_432))))"
" fold-var_431))))"
" for-loop_430)"
" null"
"(hash-iterate-first ht_428)))))))))"
"(define-values"
"(1/syntax-local-environment-ref)"
"(let-values(((syntax-local-environment-ref58_439)"
"(lambda(key57_440 default55_441 default56_442)"
"(let-values(((key_443) key57_440))"
"(let-values(((default_444)(if default56_442 default55_441 #f)))"
"(let-values()"
"(let-values(((ctx_445)"
"(let-values(((temp137_446) 'syntax-local-environment-ref))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp137_446 #t)"
"(get-current-expand-context8.1 temp137_446)))))"
"(hash-ref(expand-context-user-env ctx_445) key_443 default_444))))))))"
"(case-lambda"
"((key_447)(syntax-local-environment-ref58_439 key_447 #f #f))"
"((key_448 default55_449)(syntax-local-environment-ref58_439 key_448 default55_449 #t)))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower63_450)"
"(lambda(id62_451 only-generated?60_452 only-generated?61_453)"
"(let-values(((id_454) id62_451))"
"(let-values(((only-generated?_455)(if only-generated?61_453 only-generated?60_452 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_454)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_454)))"
"(values))))"
"(let-values(((ctx_456)"
"(let-values(((temp138_458) 'syntax-local-get-shadower))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp138_458 #t)"
"(get-current-expand-context8.1 temp138_458)))))"
"(let-values(((new-id_457)(add-scopes id_454(expand-context-scopes ctx_456))))"
"(if(syntax-clean? id_454) new-id_457(syntax-taint$1 new-id_457)))))))))))"
"(case-lambda"
"((id_459)(syntax-local-get-shadower63_450 id_459 #f #f))"
"((id_460 only-generated?60_461)(syntax-local-get-shadower63_450 id_460 only-generated?60_461 #t)))))"
"(void)"
"(void)"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 \"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) #f))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) 5)(srcloc-vector?(list->vector v_5)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) 5)(srcloc-vector? v_5) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 0)"
"(vector-ref v_12 1)"
"(vector-ref v_12 2)"
"(vector-ref v_12 3)"
"(vector-ref v_12 4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(void)"
"(void)"
"(define-values"
"(reader-syntax->syntax)"
"(lambda(v_1)"
"(datum-map"
" v_1"
"(lambda(tail?_2 v_3)"
"(if(1/syntax? v_3)"
"(let-values()"
"(let-values(((e_4)(syntax-e$2 v_3)))"
"(if(syntax?$1 e_4)"
"(let-values() e_4)"
"(let-values()"
"(let-values(((s_5)"
"(let-values(((the-struct_7) empty-syntax))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8)(reader-syntax->syntax(syntax-e$2 v_3)))"
"((srcloc2_9)"
"(srcloc"
"(syntax-source$1 v_3)"
"(syntax-line$1 v_3)"
"(syntax-column$1 v_3)"
"(syntax-position$1 v_3)"
"(syntax-span$1 v_3)))"
"((props3_10)"
"(let-values(((tmp_11)(1/syntax-property v_3 'paren-shape)))"
"(if(equal? tmp_11 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_11 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
" srcloc2_9"
" props3_10"
"(syntax-inspector the-struct_7)"
"(syntax-tamper the-struct_7)))"
"                                   (raise-argument-error 'struct-copy \"syntax?\" the-struct_7)))))"
"(let-values(((keys_6)(syntax-property-symbol-keys$1 v_3)))"
"(if(null? keys_6)"
"(let-values() s_5)"
"(if(if(null?(cdr keys_6))(eq?(car keys_6) 'paren-shape) #f)"
"(let-values() s_5)"
"(let-values()"
"(let-values(((lst_12) keys_6))"
"(begin"
"(if(list? lst_12)(void)(let-values()(in-list lst_12)))"
"((letrec-values(((for-loop_13)"
"(lambda(s_14 lst_15)"
"(if(pair? lst_15)"
"(let-values(((key_16)(unsafe-car lst_15)))"
"(let-values(((s_17)"
"(let-values(((s_18) s_14))"
"(let-values(((s_19)"
"(let-values()"
"(syntax-property$1"
" s_18"
" key_16"
"(1/syntax-property v_3 key_16)"
" #t))))"
"(values s_19)))))"
"(for-loop_13 s_17(unsafe-cdr lst_15))))"
" s_14))))"
" for-loop_13)"
" s_5"
" lst_12))))))))))))"
"(let-values() v_3))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(void)"
"(void)"
"(define-values"
"(read-syntax$1)"
"(lambda(src_1 in_2)(let-values()(reader-syntax->syntax(read-syntax$2 src_1 in_2)))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(let-values()(reader-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7)))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-e)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
"      (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values(maybe-syntax->datum)(lambda(s_3)(if(syntax?$1 s_3)(syntax->datum$1 s_3) s_3)))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_4)"
"(lambda(stx-c7_5 s8_6 stx-l1_7 stx-p2_8 ignored3_9 stx-l4_10 stx-p5_11 ignored6_12)"
"(let-values(((stx-c_13) stx-c7_5))"
"(let-values(((s_14) s8_6))"
"(let-values(((stx-l_15)(if stx-l4_10 stx-l1_7 #f)))"
"(let-values(((stx-p_16)(if stx-p5_11 stx-p2_8 #f)))"
"(let-values(((ignored_17)(if ignored6_12 ignored3_9 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_18)(not stx-c_13)))"
"(if or-part_18 or-part_18(syntax?$1 stx-c_13)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_13)))"
"(if(let-values(((or-part_19)(not stx-l_15)))"
"(if or-part_19"
" or-part_19"
"(let-values(((or-part_20)(syntax?$1 stx-l_15)))"
"(if or-part_20 or-part_20(encoded-srcloc? stx-l_15)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_15)))"
"(if(let-values(((or-part_21)(not stx-p_16)))"
"(if or-part_21 or-part_21(syntax?$1 stx-p_16)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_16)))"
"(datum->syntax$1 stx-c_13 s_14(to-srcloc-stx stx-l_15) stx-p_16)))))))))))"
"(case-lambda"
"((stx-c_22 s_23)(datum->syntax9_4 stx-c_22 s_23 #f #f #f #f #f #f))"
"((stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28)"
"(datum->syntax9_4 stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28 #t #t #t))"
"((stx-c_29 s_30 stx-l_31 stx-p2_32)(datum->syntax9_4 stx-c_29 s_30 stx-l_31 stx-p2_32 #f #t #t #f))"
"((stx-c_33 s_34 stx-l1_35)(datum->syntax9_4 stx-c_33 s_34 stx-l1_35 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_36)"
"(begin"
"      (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_36)))"
"(syntax->list$1 s_36))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_37)"
"(begin"
"      (if (syntax?$1 s_37) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_37)))"
"(if(syntax-property$1 s_37 original-property-sym)(not(syntax-any-macro-scopes? s_37)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_38)"
"(lambda(a13_39 b14_40 phase11_41 phase12_42)"
"(let-values(((a_43) a13_39))"
"(let-values(((b_44) b14_40))"
"(let-values(((phase_45)(if phase12_42 phase11_41(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_43)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_43)))"
"(if(identifier? b_44)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_44)))"
"(if(phase? phase_45)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_45)))"
"(bound-identifier=?$1 a_43 b_44 phase_45)))))))))"
"(case-lambda"
"((a_46 b_47)(bound-identifier=?15_38 a_46 b_47 #f #f))"
"((a_48 b_49 phase11_50)(bound-identifier=?15_38 a_48 b_49 phase11_50 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_51)"
"(lambda(a21_52 b22_53 a-phase17_54 b-phase18_55 a-phase19_56 b-phase20_57)"
"(let-values(((a_58) a21_52))"
"(let-values(((b_59) b22_53))"
"(let-values(((a-phase_60)(if a-phase19_56 a-phase17_54(1/syntax-local-phase-level))))"
"(let-values(((b-phase_61)(if b-phase20_57 b-phase18_55 a-phase_60)))"
"(let-values()"
"(begin"
"(if(identifier? a_58)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_58)))"
"(if(identifier? b_59)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_59)))"
"(if(phase? a-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_60)))"
"(if(phase? b-phase_61)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_61)))"
"(free-identifier=?$1 a_58 b_59 a-phase_60 b-phase_61))))))))))"
"(case-lambda"
"((a_62 b_63)(free-identifier=?23_51 a_62 b_63 #f #f #f #f))"
"((a_64 b_65 a-phase_66 b-phase18_67)(free-identifier=?23_51 a_64 b_65 a-phase_66 b-phase18_67 #t #t))"
"((a_68 b_69 a-phase17_70)(free-identifier=?23_51 a_68 b_69 a-phase17_70 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_71 b_72)"
"(let-values((()"
"(begin"
"(if(identifier? a_71)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_71)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_72)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_72)))"
"(values))))"
"(let-values(((phase_73)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_71 b_72 phase_73 phase_73))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_74 b_75)"
"(let-values((()"
"(begin"
"(if(identifier? a_74)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_74)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_75)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_75)))"
"(values))))"
"(let-values(((phase_76)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_74 b_75 phase_76 phase_76))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_77 b_78)"
"(begin"
"      (if (identifier? a_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_77)))"
"      (if (identifier? b_78) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_78)))"
"(free-identifier=?$1 a_77 b_78 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding28_79)"
"(lambda(id27_80 phase25_81 phase26_82)"
"(let-values(((id_83) id27_80))"
"(let-values(((phase_84)(if phase26_82 phase25_81(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_83)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_83)))"
"(if(phase? phase_84)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_84)))"
"(identifier-binding$1 id_83 phase_84))))))))"
"(case-lambda"
"((id_85)(identifier-binding28_79 id_85 #f #f))"
"((id_86 phase25_87)(identifier-binding28_79 id_86 phase25_87 #t)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(lambda(id_88)"
"(begin"
"(if(identifier? id_88)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_88)))"
"(identifier-binding$1 id_88(add1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_89)"
"(begin"
"(if(identifier? id_89)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_89)))"
"(identifier-binding$1 id_89(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_90)"
"(begin"
"(if(identifier? id_90)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_90)))"
"(identifier-binding$1 id_90 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol33_91)"
"(lambda(id32_92 phase30_93 phase31_94)"
"(let-values(((id_95) id32_92))"
"(let-values(((phase_96)(if phase31_94 phase30_93(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_95)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_95)))"
"(if(phase? phase_96)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_96)))"
"(identifier-binding-symbol$1 id_95 phase_96))))))))"
"(case-lambda"
"((id_97)(identifier-binding-symbol33_91 id_97 #f #f))"
"((id_98 phase30_99)(identifier-binding-symbol33_91 id_98 phase30_99 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context38_100)"
"(lambda(id37_101 syms35_102 syms36_103)"
"(let-values(((id_104) id37_101))"
"(let-values(((syms_105)(if syms36_103 syms35_102 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_104)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_104)))"
"(if(if(list? syms_105)(andmap2 symbol? syms_105) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_105)))"
" id_104)))))))"
"(case-lambda"
"((id_106)(identifier-prune-lexical-context38_100 id_106 #f #f))"
"((id_107 syms35_108)(identifier-prune-lexical-context38_100 id_107 syms35_108 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info45_109)"
"(lambda(s44_110 phase40_111 all-bindings?41_112 phase42_113 all-bindings?43_114)"
"(let-values(((s_115) s44_110))"
"(let-values(((phase_116)(if phase42_113 phase40_111(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_117)(if all-bindings?43_114 all-bindings?41_112 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_115)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_115)))"
"(if(phase? phase_116)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_116)))"
"(syntax-debug-info$1 s_115 phase_116 all-bindings?_117)))))))))"
"(case-lambda"
"((s_118)(syntax-debug-info45_109 s_118 #f #f #f #f))"
"((s_119 phase_120 all-bindings?41_121)(syntax-debug-info45_109 s_119 phase_120 all-bindings?41_121 #t #t))"
"((s_122 phase40_123)(syntax-debug-info45_109 s_122 phase40_123 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_124 phase_125)"
"(begin"
"      (if (syntax?$1 s_124) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_124)))"
"(if(phase? phase_125)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_125)))"
"(syntax-shift-phase-level$1 s_124 phase_125))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_126 old-stx_127 id_128)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_126)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_126)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_127)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_128)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_128)))"
"(values))))"
"(let-values(((s_129)(syntax-track-origin$1 new-stx_126 old-stx_127 id_128)))"
"(let-values(((ctx_130)"
"(let-values(((...ander/syntax/api.rkt:191:14_131) get-current-expand-context8.1)"
"((temp65_132) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_132 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/syntax/api.rkt:191:14_131"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp65_132))))))"
"(begin"
"(if ctx_130"
"(let-values()"
"(let-values(((obs_133)(expand-context-observer ctx_130)))"
"(if obs_133"
"(let-values()(let-values()(call-expand-observe obs_133 'track-origin s_129)))"
"(void))))"
"(void))"
" s_129))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax51_134)"
"(lambda(src47_135 in48_136 src49_137 in50_138)"
"(let-values(((src_139)(if src49_137 src47_135(object-name(current-input-port)))))"
"(let-values(((in_140)(if in50_138 in48_136(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_140)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_140)))"
"(read-syntax$1 src_139 in_140))))))))"
"(case-lambda"
"(()(read-syntax51_134 #f #f #f #f))"
"((src_141 in48_142)(read-syntax51_134 src_141 in48_142 #t #t))"
"((src47_143)(read-syntax51_134 src47_143 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive63_144)"
"(lambda(src53_145"
" in54_146"
" start55_147"
" readtable56_148"
" graph?57_149"
" src58_150"
" in59_151"
" start60_152"
" readtable61_153"
" graph?62_154)"
"(let-values(((src_155)(if src58_150 src53_145(object-name(current-input-port)))))"
"(let-values(((in_156)(if in59_151 in54_146(current-input-port))))"
"(let-values(((start_157)(if start60_152 start55_147 #f)))"
"(let-values(((readtable_158)(if readtable61_153 readtable56_148(current-readtable))))"
"(let-values(((graph?_159)(if graph?62_154 graph?57_149 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_156)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_156)))"
"(if(let-values(((or-part_160)(char? start_157)))"
"(if or-part_160 or-part_160(not start_157)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_157)))"
"(if(let-values(((or-part_161)(readtable? readtable_158)))"
"(if or-part_161 or-part_161(not readtable_158)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_158)))"
"(read-syntax/recursive$1 src_155 in_156 start_157 readtable_158 graph?_159)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive63_144 #f #f #f #f #f #f #f #f #f #f))"
"((src_162 in_163 start_164 readtable_165 graph?57_166)"
"(read-syntax/recursive63_144 src_162 in_163 start_164 readtable_165 graph?57_166 #t #t #t #t #t))"
"((src_167 in_168 start_169 readtable56_170)"
"(read-syntax/recursive63_144 src_167 in_168 start_169 readtable56_170 #f #t #t #t #t #f))"
"((src_171 in_172 start55_173)(read-syntax/recursive63_144 src_171 in_172 start55_173 #f #f #t #t #t #f #f))"
"((src_174 in54_175)(read-syntax/recursive63_144 src_174 in54_175 #f #f #f #t #t #f #f #f))"
"((src53_176)(read-syntax/recursive63_144 src53_176 #f #f #f #f #t #f #f #f #f)))))"
"(void)"
"(void)"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))"
"(let-values(((s_8)"
"(syntax-shift-phase-level$1"
"(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))"
" phase-shift_4)))"
"(let-values((()"
"(begin"
"(let-values(((lst_10) requires_1))"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(fold-var_12 lst_13)"
"(if(pair? lst_13)"
"(let-values(((phase+reqs_14)(unsafe-car lst_13)))"
"(let-values(((fold-var_15)"
"(let-values(((fold-var_16) fold-var_12))"
"(let-values(((fold-var_17)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_18)"
"(car"
" phase+reqs_14)))"
"(let-values(((lst_19)"
"(cdr"
" phase+reqs_14)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()"
"(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((req_23)"
"(unsafe-car"
" lst_22)))"
"(let-values(((fold-var_24)"
"(let-values(((fold-var_25)"
" fold-var_21))"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_27)"
"(module-path-index-shift"
" req_23"
" original-self_5"
" self_6)))"
"(let-values(((...val/root-context.rkt:35:8_28)"
" perform-require!74.1)"
"((mpi1_29)"
" mpi_27)"
"((s2_30)"
" s_8)"
"((self3_31)"
" self_6)"
"((s4_32)"
" s_8)"
"((ns5_33)"
" ns_3)"
"((temp6_34)"
"(phase+"
" phase_18"
" phase-shift_4))"
"((phase-shift7_35)"
" phase-shift_4)"
"((temp8_36)"
" 'module))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!74.1))"
"(perform-require!72.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_34"
" #f"
" #f"
" phase-shift7_35"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_36"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...val/root-context.rkt:35:8_28"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:run-phase"
" #:who)"
" 7)"
" '(#:phase-shift"
" #:run-phase"
" #:who)"
"(list"
" temp6_34"
" phase-shift7_35"
" temp8_36)"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)))))"
"(void)))))"
"(values"
" fold-var_26)))))"
"(for-loop_20"
" fold-var_24"
"(unsafe-cdr"
" lst_22))))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))))"
"(void)))))"
"(values fold-var_17)))))"
"(for-loop_11 fold-var_15(unsafe-cdr lst_13))))"
" fold-var_12))))"
" for-loop_11)"
"(void)"
" lst_10)))"
"(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_37) evaled-ld-h_2))"
"(begin"
"(if((lambda(ht_38)(hash? ht_38)) ht_37)(void)(let-values()(default-in-hash ht_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 i_41)"
"(if i_41"
"(let-values(((phase_42 linklet_43)(hash-iterate-key+value ht_37 i_41)))"
"(let-values(((fold-var_44)"
"(let-values(((fold-var_45) fold-var_40))"
"(let-values(((fold-var_46)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_47)"
"(1/linklet-export-variables"
" linklet_43)))"
"(begin"
"(if(list? lst_47)"
"(void)"
"(let-values()(in-list lst_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(fold-var_49"
" lst_50)"
"(if(pair?"
" lst_50)"
"(let-values(((sym_51)"
"(unsafe-car"
" lst_50)))"
"(let-values(((fold-var_52)"
"(let-values(((fold-var_53)"
" fold-var_49))"
"(let-values(((fold-var_54)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_55)"
"(datum->syntax$1"
" s_8"
" sym_51)))"
"(begin"
"(let-values(((id9_56)"
" id_55)"
"((temp10_57)"
"(let-values(((self12_59)"
" self_6)"
"((phase13_60)"
" phase_42)"
"((sym14_61)"
" sym_51))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self12_59"
" phase13_60"
" sym14_61)"
"(make-module-binding24.1"
" self12_59"
" phase13_60"
" sym14_61))))"
"((temp11_58)"
"(phase+"
" phase_42"
" phase-shift_4)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!19.1))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" id9_56"
" temp10_57"
" temp11_58)"
"(add-binding!19.1"
" id9_56"
" temp10_57"
" temp11_58)))"
"(add-defined-sym!"
" defined-syms_9"
" phase_42"
" sym_51"
" id_55))))"
"(void)))))"
"(values"
" fold-var_54)))))"
"(for-loop_48"
" fold-var_52"
"(unsafe-cdr"
" lst_50))))"
" fold-var_49))))"
" for-loop_48)"
"(void)"
" lst_47))))"
"(void)))))"
"(values fold-var_46)))))"
"(for-loop_39 fold-var_44(hash-iterate-next ht_37 i_41))))"
" fold-var_40))))"
" for-loop_39)"
"(void)"
"(hash-iterate-first ht_37))))"
" root-ctx_7))))))))"
"(void)"
"(void)"
"(define-values(module-cache)(make-weak-hash))"
"(define-values(make-module-cache-key)(lambda(hash-code_1)(if hash-code_1(list hash-code_1) #f)))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_2 proc_3)(hash-set! module-cache key_2(make-ephemeron key_2 proc_3))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_4)(let-values(((e_5)(hash-ref module-cache key_4 #f)))(if e_5(ephemeron-value e_5) #f))))"
"(void)"
"(void)"
"(define-values"
"(lifted/36.1)"
"(make-required 'declare-this-module(case-lambda((self_181)(apply missing-kw self_181 null))) #f #f))"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_1"
" namespace4_2"
" supermodule-name3_3"
" supermodule-name6_4"
" with-submodules?2_5"
" with-submodules?5_6"
" c7_7)"
"(let-values(((c_8) c7_7))"
"(let-values(((ns_9)(if namespace4_2 namespace1_1(1/current-namespace))))"
"(let-values(((with-submodules?_10)(if with-submodules?5_6 with-submodules?2_5 #t)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_4 supermodule-name3_3 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((syntax-literals-data-instance_16)"
"(if(compiled-in-memory? c_8)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_8)"
"(let-values(((l_41)(hash-ref h_13 'stx-data #f)))"
"(if l_41"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_41)"
"(list deserialize-instance data-instance_14)))"
"(if(eq?(hash-ref h_13 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values((()"
"(begin"
"(if(not(load-on-demand-enabled))"
"(let-values()"
"(let-values(((deserialize-syntax_42)"
"(1/instance-variable-value"
" syntax-literals-data-instance_16"
" deserialize-syntax-id)))"
"(if deserialize-syntax_42(let-values()(deserialize-syntax_42))(void))))"
"(void))"
"(values))))"
"(let-values(((decl_17)"
"(lambda(key_43)(1/instance-variable-value declaration-instance_15 key_43))))"
"(let-values(((pre-submodule-names_18)(hash-ref h_13 'pre null)))"
"(let-values(((post-submodule-names_19)(hash-ref h_13 'post null)))"
"(let-values(((default-name_20)(hash-ref h_13 'name 'module)))"
"(let-values(((cache-key_21)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_18)"
"(if(null? post-submodule-names_19)(hash-ref h_13 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_22)(hash-ref h_13 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_23)(hash-ref h_13 'min-phase 0)))"
"(let-values(((max-phase_24)(hash-ref h_13 'max-phase 0)))"
"(let-values(((language-info_25)(hash-ref h_13 'language-info #f)))"
"(let-values(((phases-h_26)"
"(let-values(((start_44) min-phase_23)"
"((end_45)(add1 max-phase_24))"
"((inc_46) 1))"
"(begin"
"(if(if(real? start_44)"
"(if(real? end_45)(real? inc_46) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_44 end_45 inc_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(table_48 pos_49)"
"(if(< pos_49 end_45)"
"(let-values(((phase-level_50) pos_49))"
"(let-values(((table_51)"
"(let-values(((v_52)"
"(hash-ref"
" h_13"
" phase-level_50"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_53)"
"(lambda(table_54)"
"(let-values()"
"(let-values(((table_55)"
"(let-values(((table_56)"
" table_54))"
"(if v_52"
"(let-values(((table_57)"
" table_56))"
"(let-values(((table_58)"
"(let-values()"
"(let-values(((key_59"
" val_60)"
"(let-values()"
"(values"
" phase-level_50"
"(1/eval-linklet"
" v_52)))))"
"(hash-set"
" table_57"
" key_59"
" val_60)))))"
"(values"
" table_58)))"
" table_56))))"
" table_55)))))"
" for-loop_53)"
" table_48)))))"
"(for-loop_47"
" table_51"
"(+ pos_49 inc_46))))"
" table_48))))"
" for-loop_47)"
" '#hash()"
" start_44)))))"
"(let-values(((syntax-literals-linklet_27)"
"(let-values(((l_61)(hash-ref h_13 'stx #f)))"
"(if l_61(1/eval-linklet l_61) #f))))"
"(let-values(((extra-inspector_28)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-compile-time-inspector c_8)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_29)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv())))"
"(let-values(((requires_30)(decl_17 'requires)))"
"(let-values(((provides_31)(decl_17 'provides)))"
"(let-values(((original-self_32)(decl_17 'self-mpi)))"
"(let-values(((phase-to-link-modules_33)"
"(decl_17 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_34)"
"(make-create-root-expand-context-from-module"
" requires_30"
" phases-h_26)))"
"(let-values(((declare-submodules_35)"
"(lambda(ns_62 names_63 declare-name_64 pre?_65)"
"(if dh_12"
"(let-values()"
"(if(compiled-in-memory? c_8)"
"(let-values(((lst_66)"
"(if pre?_65"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_8)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_8))))"
"(begin"
"(if(list? lst_66)"
"(void)"
"(let-values()(in-list lst_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68"
" lst_69)"
"(if(pair?"
" lst_69)"
"(let-values(((c_70)"
"(unsafe-car"
" lst_69)))"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_68))"
"(let-values(((fold-var_73)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:108:13_74)"
" eval-module10.1)"
"((c18_75)"
" c_70)"
"((ns19_76)"
" ns_62)"
"((declare-name20_77)"
" declare-name_64))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" ns19_76"
" #t"
" declare-name20_77"
" #t"
" #f"
" #f"
" c18_75)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:108:13_74"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns19_76"
" declare-name20_77)"
" c18_75))))"
"(void)))))"
"(values"
" fold-var_73)))))"
"(for-loop_67"
" fold-var_71"
"(unsafe-cdr"
" lst_69))))"
" fold-var_68))))"
" for-loop_67)"
"(void)"
" lst_66)))"
"(let-values(((lst_78) names_63))"
"(begin"
"(if(list? lst_78)"
"(void)"
"(let-values()(in-list lst_78)))"
"((letrec-values(((for-loop_79)"
"(lambda(fold-var_80"
" lst_81)"
"(if(pair?"
" lst_81)"
"(let-values(((name_82)"
"(unsafe-car"
" lst_81)))"
"(let-values(((fold-var_83)"
"(let-values(((fold-var_84)"
" fold-var_80))"
"(let-values(((fold-var_85)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_86)"
"(hash-ref"
" dh_12"
" name_82"
" #f)))"
"(begin"
"(if sm-cd_86"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                         \"missing submodule declaration:\""
" name_82)))"
"(let-values(((...nder/eval/module.rkt:112:13_87)"
" eval-module10.1)"
"((sm-cd21_88)"
" sm-cd_86)"
"((ns22_89)"
" ns_62)"
"((declare-name23_90)"
" declare-name_64))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" ns22_89"
" #t"
" declare-name23_90"
" #t"
" #f"
" #f"
" sm-cd21_88)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:112:13_87"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns22_89"
" declare-name23_90)"
" sm-cd21_88))))))"
"(void)))))"
"(values"
" fold-var_85)))))"
"(for-loop_79"
" fold-var_83"
"(unsafe-cdr"
" lst_81))))"
" fold-var_80))))"
" for-loop_79)"
"(void)"
" lst_78)))))"
"(void)))))"
"(let-values(((declare-this-module14_38)"
"(lambda(namespace12_91)"
"(let-values(((ns_92) namespace12_91))"
"(let-values()"
"(let-values(((m_93)"
"(let-values(((...nder/eval/module.rkt:120:17_95)"
" make-module39.1)"
"((temp28_96)"
"(1/current-module-declare-source))"
"((original-self29_97)"
" original-self_32)"
"((requires30_98)"
" requires_30)"
"((provides31_99)"
" provides_31)"
"((language-info32_100)"
" language-info_25)"
"((min-phase33_101)"
" min-phase_23)"
"((max-phase34_102)"
" max-phase_24)"
"((cross-phase-persistent?35_103)"
" cross-phase-persistent?_22)"
"((temp36_104)"
"(append"
" pre-submodule-names_18"
" post-submodule-names_19))"
"((supermodule-name37_105)"
" supermodule-name_11)"
"((temp38_106)"
"(lambda()"
"(get-all-variables"
" phases-h_26)))"
"((temp39_107)"
"(lambda(phase-level_110)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_26"
" phase-level_110"
" #f)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_110"
" #f)"
" original-self_32)))"
"((temp40_108)"
"(lambda(data-box_111"
" ns_112"
" phase-shift_113"
" self_114"
" bulk-binding-registry_115"
" insp_116)"
"(if(unbox"
" data-box_111)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_111"
" cache-key_21"
" ns_112"
" syntax-literals-linklet_27"
" data-instance_14"
" syntax-literals-data-instance_16"
" phase-shift_113"
" original-self_32"
" self_114"
" bulk-binding-registry_115"
" insp_116"
" create-root-expand-context-from-module_34)))))"
"((temp41_109)"
"(lambda(data-box_117"
" ns_118"
" phase-shift_119"
" phase-level_120"
" self_121"
" bulk-binding-registry_122"
" insp_123)"
"(let-values()"
"(let-values(((syntax-literals-instance_124)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_117))))"
"(let-values(((phase-linklet_125)"
"(hash-ref"
" phases-h_26"
" phase-level_120"
" #f)))"
"(if phase-linklet_125"
"(let-values()"
"(let-values(((module-uses_126)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_120)))"
"(let-values(((import-module-instances_127"
" import-instances_128)"
"(let-values(((mis_131"
" is_132)"
"(let-values(((lst_133)"
" module-uses_126))"
"(begin"
"(if(list?"
" lst_133)"
"(void)"
"(let-values()"
"(in-list"
" lst_133)))"
"((letrec-values(((for-loop_134)"
"(lambda(mis_135"
" is_136"
" lst_137)"
"(if(pair?"
" lst_137)"
"(let-values(((mu_138)"
"(unsafe-car"
" lst_137)))"
"(let-values(((mis_139"
" is_140)"
"(let-values(((mis_141)"
" mis_135)"
"((is_142)"
" is_136))"
"(let-values(((mis_143"
" is_144)"
"(let-values()"
"(let-values(((mis49_145"
" is50_146)"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:155:48_147)"
" namespace-module-use->module+linklet-instances146.1)"
"((ns51_148)"
" ns_118)"
"((mu52_149)"
" mu_138)"
"((original-self53_150)"
" original-self_32)"
"((self54_151)"
" self_121)"
"((temp55_152)"
"(phase+"
"(phase-"
" phase-level_120"
"(module-use-phase"
" mu_138))"
" phase-shift_119)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances146.1))"
"(namespace-module-use->module+linklet-instances144.1"
" temp55_152"
" original-self53_150"
" #t"
" self54_151"
" #t"
" ns51_148"
" mu52_149)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:155:48_147"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
" 4)"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
"(list"
" temp55_152"
" original-self53_150"
" self54_151)"
" ns51_148"
" mu52_149))))))"
"(values"
"(cons"
" mis49_145"
" mis_141)"
"(cons"
" is50_146"
" is_142))))))"
"(values"
" mis_143"
" is_144)))))"
"(for-loop_134"
" mis_139"
" is_140"
"(unsafe-cdr"
" lst_137))))"
"(values"
" mis_135"
" is_136)))))"
" for-loop_134)"
" null"
" null"
" lst_133)))))"
"(values"
"(alt-reverse"
" mis_131)"
"(alt-reverse"
" is_132)))))"
"(let-values((()"
"(begin"
"(let-values(((...nder/eval/module.rkt:163:35_153)"
" check-require-access11.1)"
"((phase-linklet42_154)"
" phase-linklet_125)"
"((temp43_155)"
" 2)"
"((module-uses44_156)"
" module-uses_126)"
"((import-module-instances45_157)"
" import-module-instances_127)"
"((insp46_158)"
" insp_123)"
"((extra-inspector47_159)"
" extra-inspector_28)"
"((temp48_160)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_29"
" phase-level_120"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp43_155"
" phase-linklet42_154"
" module-uses44_156"
" import-module-instances45_157"
" insp46_158"
" extra-inspector47_159"
" temp48_160)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:163:35_153"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp43_155)"
" phase-linklet42_154"
" module-uses44_156"
" import-module-instances45_157"
" insp46_158"
" extra-inspector47_159"
" temp48_160)))"
"(values))))"
"(let-values(((module-body-instance-instance_129)"
"(let-values(((...nder/eval/module.rkt:169:37_161)"
" make-module-body-instance-instance20.1)"
"((temp56_162)"
"(lambda(name_163"
" val_164)"
"(namespace-set-transformer!"
" ns_118"
"(sub1"
" phase-level_120)"
" name_163"
" val_164))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-body-instance-instance20.1))"
"(make-module-body-instance-instance18.1"
" temp56_162)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:169:37_161"
" keyword-procedure-extract"
" '(#:set-transformer!)"
" 2)"
" '(#:set-transformer!)"
"(list"
" temp56_162))))))"
"(let-values(((instantiate-body_130)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_125"
"(list*"
" syntax-literals-instance_124"
" module-body-instance-instance_129"
" import-instances_128)"
"(namespace->instance"
" ns_118"
" phase-level_120)))))"
"(if(zero-phase?"
" phase-level_120)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_119)"
"(let-values()"
"(instantiate-body_130))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_118)"
"(let-values()"
"(instantiate-body_130))))))"
"(let-values()"
"(let-values(((ns-1_165)"
"(namespace->namespace-at-phase"
" ns_118"
"(phase+"
" phase-shift_119"
"(sub1"
" phase-level_120)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(make-expand-context"
" ns-1_165)))"
" 1/current-namespace"
" ns_118"
" current-module-code-inspector"
" insp_123)"
"(let-values()"
"(instantiate-body_130))))))))))))"
"(void))))))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module39.1))"
"(make-module37.1"
" cross-phase-persistent?35_103"
" #t"
" temp38_106"
" #t"
" temp41_109"
" language-info32_100"
" #t"
" max-phase34_102"
" #t"
" min-phase33_101"
" #t"
" #f"
" #f"
" temp39_107"
" #t"
" #f"
" #f"
" temp40_108"
" #t"
" #f"
" #f"
" provides31_99"
" requires30_98"
" #t"
" original-self29_97"
" temp28_96"
" #t"
" temp36_104"
" #t"
" supermodule-name37_105"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:120:17_95"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:phase-level-linklet-info-callback"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)"
" 2)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:phase-level-linklet-info-callback"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)"
"(list"
" cross-phase-persistent?35_103"
" temp38_106"
" temp41_109"
" language-info32_100"
" max-phase34_102"
" min-phase33_101"
" temp39_107"
" temp40_108"
" provides31_99"
" requires30_98"
" original-self29_97"
" temp28_96"
" temp36_104"
" supermodule-name37_105))))))"
"(let-values(((declare-name_94)"
"(substitute-module-declare-name"
" default-name_20)))"
"(begin"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_92"
" pre-submodule-names_18"
" declare-name_94"
" #t))"
"(void))"
"(let-values(((...nder/eval/module.rkt:204:7_166)"
" declare-module!58.1)"
"((ns24_167) ns_92)"
"((m25_168) m_93)"
"((declare-name26_169)"
" declare-name_94)"
"((with-submodules?27_170)"
" with-submodules?_10))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!58.1))"
"(declare-module!56.1"
" with-submodules?27_170"
" #t"
" ns24_167"
" m25_168"
" declare-name26_169)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:204:7_166"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 5)"
" '(#:with-submodules?)"
"(list with-submodules?27_170)"
" ns24_167"
" m25_168"
" declare-name26_169)))"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_92"
" post-submodule-names_19"
" declare-name_94"
" #f))"
"(void))))))))))"
"(let-values(((unpack15_39)"
"(lambda(given-kws_171 given-args_172)"
"(let-values(((namespace12_173)"
"(car given-args_172)))"
"(declare-this-module14_38"
" namespace12_173)))))"
"(let-values(((declare-this-module16_40)"
"(lifted/36.1"
"(lambda(given-kws_174 given-argc_175)"
"(if(= given-argc_175 2)"
"(let-values(((l2_176)"
" given-kws_174))"
"(if(pair? l2_176)"
"(if(eq?"
"(car l2_176)"
" '#:namespace)"
"(null?(cdr l2_176))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_177 given-args_178)"
"(unpack15_39"
" given-kws_177"
" given-args_178)))"
" '(#:namespace)"
" '(#:namespace))))"
"(begin"
"(if cache-key_21"
"(let-values()"
"(module-cache-set!"
" cache-key_21"
" declare-this-module16_40))"
"(void))"
"(let-values(((...nder/eval/module.rkt:219:3_179)"
" declare-this-module16_40)"
"((ns17_180) ns_9))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-this-module16_40))"
"(declare-this-module14_38 ns17_180)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:219:3_179"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list"
" ns17_180))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack9.1)"
"(lambda(given-kws_182 given-args_183 c7_184)"
"(let-values(((namespace4_185)(if(pair? given-kws_182)(eq? '#:namespace(car given-kws_182)) #f)))"
"(let-values(((namespace1_186)(if namespace4_185(car given-args_183)(void)))"
"((given-kws_187)(if namespace4_185(cdr given-kws_182) given-kws_182))"
"((given-args_188)(if namespace4_185(cdr given-args_183) given-args_183)))"
"(let-values(((supermodule-name6_189)"
"(if(pair? given-kws_187)(eq? '#:supermodule-name(car given-kws_187)) #f)))"
"(let-values(((supermodule-name3_190)(if supermodule-name6_189(car given-args_188)(void)))"
"((given-kws_191)(if supermodule-name6_189(cdr given-kws_187) given-kws_187))"
"((given-args_192)(if supermodule-name6_189(cdr given-args_188) given-args_188)))"
"(let-values(((with-submodules?5_193)(pair? given-kws_191)))"
"(let-values(((with-submodules?2_194)(if with-submodules?5_193(car given-args_192)(void))))"
"(eval-module8.1"
" namespace1_186"
" namespace4_185"
" supermodule-name3_190"
" supermodule-name6_189"
" with-submodules?2_194"
" with-submodules?5_193"
" c7_184)))))))))"
"(define-values"
"(eval-module10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_195 given-argc_196)"
"(if(= given-argc_196 3)"
"(let-values(((l1_197) given-kws_195))"
"(let-values(((l1_198)(if(null? l1_197) l1_197(if(eq?(car l1_197) '#:namespace)(cdr l1_197) l1_197))))"
"(let-values(((l1_199) l1_198))"
"(let-values(((l1_200)"
"(if(null? l1_199) l1_199(if(eq?(car l1_199) '#:supermodule-name)(cdr l1_199) l1_199))))"
"(let-values(((l1_201) l1_200))"
"(let-values(((l1_202)"
"(if(null? l1_201)"
" l1_201"
"(if(eq?(car l1_201) '#:with-submodules?)(cdr l1_201) l1_201))))"
"(null? l1_202)))))))"
" #f))"
"(case-lambda((given-kws_203 given-args_204 c_205)(unpack9.1 given-kws_203 given-args_204 c_205)))"
" null"
" '(#:namespace #:supermodule-name #:with-submodules?)"
"(let-values(((eval-module_206)(case-lambda((c_207)(unpack9.1 null null c_207))))) eval-module_206)))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_208 make-_209 ?_210 -ref_211 -set!_212)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_208"
" make-_209"
" ?_210"
"(make-struct-field-accessor -ref_211 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_211 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_233"
" cache-key_234"
" ns_235"
" syntax-literals-linklet_236"
" data-instance_237"
" syntax-literals-data-instance_238"
" phase-shift_239"
" original-self_240"
" self_241"
" bulk-binding-registry_242"
" insp_243"
" create-root-expand-context-from-module_244)"
"(let-values(((inst_245)"
"(let-values(((...nder/eval/module.rkt:231:4_248) make-instance-instance15.1)"
"((ns58_249) ns_235)"
"((phase-shift59_250) phase-shift_239)"
"((self60_251) self_241)"
"((insp61_252) insp_243)"
"((bulk-binding-registry62_253) bulk-binding-registry_242)"
"((temp63_254)"
"                                (lambda (name_255 val_256) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(if(variable-reference-constant?(#%variable-reference make-instance-instance15.1))"
"(make-instance-instance13.1"
" bulk-binding-registry62_253"
" insp61_252"
" ns58_249"
" phase-shift59_250"
" self60_251"
" temp63_254)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:231:4_248"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" 2)"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
"(list"
" bulk-binding-registry62_253"
" insp61_252"
" ns58_249"
" phase-shift59_250"
" self60_251"
" temp63_254))))))"
"(let-values(((syntax-literals-instance_246)"
"(if syntax-literals-linklet_236"
"(1/instantiate-linklet"
" syntax-literals-linklet_236"
"(list deserialize-instance data-instance_237 syntax-literals-data-instance_238 inst_245))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_233(instance-data11.1 syntax-literals-instance_246 cache-key_234))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_247)"
"(1/instance-variable-value syntax-literals-instance_246 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_247 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_235"
"(delay"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))))"
"(if(procedure? get-encoded-root-expand-ctx_247)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_235"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_247))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_235"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_244"
" ns_235"
" phase-shift_239"
" original-self_240"
" self_241)))))))))))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_257)"
"(let-values(((ld/h_258)(if(compiled-in-memory? c_257)(compiled-in-memory-linklet-directory c_257) c_257)))"
"(let-values(((dh_259)"
"(if(1/linklet-directory? ld/h_258)"
"(let-values()(1/linklet-directory->hash ld/h_258))"
"(let-values() #f))))"
"(let-values(((h_260)(1/linklet-bundle->hash(if dh_259(hash-ref dh_259 #f) ld/h_258))))"
"(values dh_259 h_260))))))"
"(define-values"
"(compiled-module->h)"
"(lambda(c_261)(let-values(((dh_262 h_263)(compiled-module->dh+h c_261))) h_263)))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_264)"
"(let-values(((dh_265 h_266)(compiled-module->dh+h c_264)))"
"(let-values(((data-instance_267)"
"(if(compiled-in-memory? c_264)"
"(make-data-instance-from-compiled-in-memory c_264)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_266 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_268)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_266 'decl))"
"(list deserialize-instance data-instance_267))))"
"(values dh_265 h_266 data-instance_267 declaration-instance_268))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_269)"
"(let-values(((dh_270 h_271 data-instance_272 declaration-instance_273)"
"(compiled-module->dh+h+data-instance+declaration-instance c_269)))"
" declaration-instance_273)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_274)"
"(let-values(((dh_275 h_276 data-instance_277 declaration-instance_278)"
"(compiled-module->dh+h+data-instance+declaration-instance c_274)))"
"(values h_276 declaration-instance_278))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_279)(1/make-instance 'data #f mpi-vector-id(compiled-in-memory-mpis cim_279))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_280)"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_280))))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f get-syntax-literal!-id(lambda(pos_281) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" get-syntax-literal!-id"
"(lambda(pos_282) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_283)"
"(let-values(((ht_284) phases-h_283))"
"(begin"
"(if((lambda(ht_285)(hash? ht_285)) ht_284)(void)(let-values()(default-in-hash ht_284)))"
"((letrec-values(((for-loop_286)"
"(lambda(table_287 i_288)"
"(if i_288"
"(let-values(((phase_289 linklet_290)(hash-iterate-key+value ht_284 i_288)))"
"(let-values(((table_291)"
"(let-values(((table_292) table_287))"
"(let-values(((table_293)"
"(let-values()"
"(let-values(((key_294 val_295)"
"(let-values()"
"(values"
" phase_289"
"(1/linklet-export-variables"
" linklet_290)))))"
"(hash-set table_292 key_294 val_295)))))"
"(values table_293)))))"
"(for-loop_286 table_291(hash-iterate-next ht_284 i_288))))"
" table_287))))"
" for-loop_286)"
" '#hash()"
"(hash-iterate-first ht_284))))))"
"(void)"
"(void)"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values(((src-namespace_6) src-namespace3_2))"
"(let-values(((mod-path_7) mod-path4_3))"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:14:2_9) do-attach-module21.1)"
"((temp22_10) 'namespace-attach-module)"
"((src-namespace23_11) src-namespace_6)"
"((mod-path24_12) mod-path_7)"
"((dest-namespace25_13) dest-namespace_8)"
"((temp26_14) #t))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp26_14"
" #t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:14:2_9"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp26_14)"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13))))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 #f #f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values(((src-namespace_25) src-namespace9_21))"
"(let-values(((mod-path_26) mod-path10_22))"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:21:2_28) do-attach-module21.1)"
"((temp27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_25)"
"((mod-path29_31) mod-path_26)"
"((dest-namespace30_32) dest-namespace_27)"
"((temp31_33) #f))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp31_33"
" #t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:21:2_28"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp31_33)"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32))))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 #f #f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values(((who_45) who15_41))"
"(let-values(((src-namespace_46) src-namespace16_42))"
"(let-values(((mod-path_47) mod-path17_43))"
"(let-values(((dest-namespace_48) dest-namespace18_44))"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
"                                  (let-values () (raise-argument-error who_45 \"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_54)(1/module-path? mod-path_47)))"
"(if or-part_54 or-part_54(1/resolved-module-path? mod-path_47)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_45"
"                                       \"(or/c module-path? resolved-module-path?)\""
" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
"                                      (let-values () (raise-argument-error who_45 \"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_50"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_55)"
"(lambda(mpi_56"
" phase_57"
" attach-instances?_58"
" attach-phase_59)"
"(let-values(((mod-name_60)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_56)))))"
"(let-values(((attach-this-instance?_61)"
"(if attach-instances?_58"
"(eqv? phase_57 attach-phase_59)"
" #f)))"
"(let-values(((m-ns_62)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_60"
" '#hasheqv())"
" phase_57"
" missing_52)))"
"(if(let-values(((or-part_63)"
"(eq? missing_52 m-ns_62)))"
"(if or-part_63"
" or-part_63"
"(if attach-this-instance?_61"
"(not m-ns_62)"
" #f)))"
"(let-values()"
"(let-values(((m_64)"
"(namespace->module"
" src-namespace_46"
" mod-name_60)))"
"(begin"
"(if m_64"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_60)))"
"(if(if(module-cross-phase-persistent?"
" m_64)"
"(if(not(label-phase? phase_57))"
"(not(zero-phase? phase_57))"
" #f)"
" #f)"
"(let-values()"
"(loop_55"
" mpi_56"
" 0"
" attach-instances?_58"
" 0))"
"(let-values()"
"(let-values(((already-m_65)"
"(namespace->module"
" dest-namespace_48"
" mod-name_60)))"
"(let-values((()"
"(begin"
"(if(if already-m_65"
"(not"
"(eq?"
" already-m_65"
" m_64))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_60))"
"(void))"
"(values))))"
"(let-values(((m-ns_66"
" already?_67)"
"(if attach-this-instance?_61"
"(let-values()"
"(let-values(((m-ns_68)"
"(let-values(((src-namespace32_70)"
" src-namespace_46)"
"((mod-name33_71)"
" mod-name_60)"
"((phase34_72)"
" phase_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_70"
" mod-name33_71"
" phase34_72)"
"(namespace->module-namespace82.1"
" src-namespace32_70"
" mod-name33_71"
" phase34_72)))))"
"(let-values((()"
"(begin"
"(if m-ns_68"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_60)))"
"(values))))"
"(let-values(((already-m-ns_69)"
"(if already-m_65"
"(let-values(((dest-namespace35_73)"
" dest-namespace_48)"
"((mod-name36_74)"
" mod-name_60)"
"((phase37_75)"
" phase_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_73"
" mod-name36_74"
" phase37_75)"
"(namespace->module-namespace82.1"
" dest-namespace35_73"
" mod-name36_74"
" phase37_75)))"
" #f)))"
"(begin"
"(if(if already-m-ns_69"
"(if(not"
"(eq?"
" m-ns_68"
" already-m-ns_69))"
"(not"
"(namespace-same-instance?"
" m-ns_68"
" already-m-ns_69))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_60))"
"(void))"
"(values"
" m-ns_68"
"(if already-m-ns_69"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_57)"
"(not"
"(let-values(((src-namespace38_76)"
" src-namespace_46)"
"((mod-name39_77)"
" mod-name_60)"
"((phase40_78)"
" phase_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_76"
" mod-name39_77"
" phase40_78)"
"(namespace->module-namespace82.1"
" src-namespace38_76"
" mod-name39_77"
" phase40_78))))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values(((src-namespace41_79)"
" src-namespace_46)"
"((mpi42_80)"
" mpi_56)"
"((phase43_81)"
" phase_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_79"
" mpi42_80"
" phase43_81)"
"(namespace-module-instantiate!96.1"
" src-namespace41_79"
" mpi42_80"
" phase43_81))))))"
"(void))"
"(values"
" #f"
"(if already-m_65"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_60"
"(lambda(ht_82)"
"(hash-set"
" ht_82"
" phase_57"
" m-ns_66))"
" '#hasheqv())"
"(if already?_67"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_83)"
"(module-requires"
" m_64)))"
"(begin"
"(if(list? lst_83)"
"(void)"
"(let-values()"
"(in-list"
" lst_83)))"
"((letrec-values(((for-loop_84)"
"(lambda(fold-var_85"
" lst_86)"
"(if(pair?"
" lst_86)"
"(let-values(((phase+reqs_87)"
"(unsafe-car"
" lst_86)))"
"(let-values(((fold-var_88)"
"(let-values(((lst_89)"
"(cdr"
" phase+reqs_87)))"
"(begin"
"(if(list?"
" lst_89)"
"(void)"
"(let-values()"
"(in-list"
" lst_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(fold-var_91"
" lst_92)"
"(if(pair?"
" lst_92)"
"(let-values(((req_93)"
"(unsafe-car"
" lst_92)))"
"(let-values(((fold-var_94)"
"(let-values(((fold-var_95)"
" fold-var_91))"
"(let-values(((fold-var_96)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(module-path-index-shift"
" req_93"
"(module-self"
" m_64)"
" mpi_56)"
"(phase+"
" phase_57"
"(car"
" phase+reqs_87))"
" attach-instances?_58"
" attach-phase_59))"
"(void)))))"
"(values"
" fold-var_96)))))"
"(for-loop_90"
" fold-var_94"
"(unsafe-cdr"
" lst_92))))"
" fold-var_91))))"
" for-loop_90)"
" fold-var_85"
" lst_89)))))"
"(for-loop_84"
" fold-var_88"
"(unsafe-cdr"
" lst_86))))"
" fold-var_85))))"
" for-loop_84)"
"(void)"
" lst_83)))"
"(let-values(((lst_97)"
"(module-submodule-names"
" m_64)))"
"(begin"
"(if(list? lst_97)"
"(void)"
"(let-values()"
"(in-list"
" lst_97)))"
"((letrec-values(((for-loop_98)"
"(lambda(fold-var_99"
" lst_100)"
"(if(pair?"
" lst_100)"
"(let-values(((submod-name_101)"
"(unsafe-car"
" lst_100)))"
"(let-values(((fold-var_102)"
"(let-values(((fold-var_103)"
" fold-var_99))"
"(let-values(((fold-var_104)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                     \".\""
" submod-name_101)"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void)))))"
"(values"
" fold-var_104)))))"
"(for-loop_98"
" fold-var_102"
"(unsafe-cdr"
" lst_100))))"
" fold-var_99))))"
" for-loop_98)"
"(void)"
" lst_97)))"
"(if(module-supermodule-name"
" m_64)"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void))))))))))))))"
"(void))))))))"
" loop_55)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_47)"
"(resolved-module-path->module-path mod-path_47)"
" mod-path_47)"
" #f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_105) todo_51))"
"(begin"
"(if((lambda(ht_106)(hash? ht_106)) ht_105)"
"(void)"
"(let-values()(default-in-hash ht_105)))"
"((letrec-values(((for-loop_107)"
"(lambda(fold-var_108 i_109)"
"(if i_109"
"(let-values(((mod-name_110 phases_111)"
"(hash-iterate-key+value"
" ht_105"
" i_109)))"
"(let-values(((fold-var_112)"
"(let-values(((ht_113)"
" phases_111))"
"(begin"
"(if((lambda(ht_114)"
"(hash? ht_114))"
" ht_113)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_113)))"
"((letrec-values(((for-loop_115)"
"(lambda(fold-var_116"
" i_117)"
"(if i_117"
"(let-values(((phase_118"
" m-ns_119)"
"(hash-iterate-key+value"
" ht_113"
" i_117)))"
"(let-values(((fold-var_120)"
"(let-values(((fold-var_121)"
" fold-var_116))"
"(let-values(((fold-var_122)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_123)"
"(namespace->module"
" src-namespace_46"
" mod-name_110)))"
"(begin"
"(let-values(((dest-namespace44_124)"
" dest-namespace_48)"
"((m45_125)"
" m_123)"
"((mod-name46_126)"
" mod-name_110))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!58.1))"
"(declare-module!56.1"
" #f"
" #f"
" dest-namespace44_124"
" m45_125"
" mod-name46_126)"
"(declare-module!58.1"
" dest-namespace44_124"
" m45_125"
" mod-name46_126)))"
"(if m-ns_119"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_46"
" mod-name_110"
" phase_118)"
"(let-values(((or-part_127)"
"(let-values(((dest-namespace47_128)"
" dest-namespace_48)"
"((mod-name48_129)"
" mod-name_110)"
"((phase49_130)"
" phase_118))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_128"
" mod-name48_129"
" phase49_130)"
"(namespace->module-namespace82.1"
" dest-namespace47_128"
" mod-name48_129"
" phase49_130)))))"
"(if or-part_127"
" or-part_127"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_110"
" phase_118"
" m_123"
" m-ns_119)))))"
"(void)))))"
"(void)))))"
"(values"
" fold-var_122)))))"
"(for-loop_115"
" fold-var_120"
"(hash-iterate-next"
" ht_113"
" i_117))))"
" fold-var_116))))"
" for-loop_115)"
" fold-var_108"
"(hash-iterate-first"
" ht_113))))))"
"(for-loop_107"
" fold-var_112"
"(hash-iterate-next ht_105 i_109))))"
" fold-var_108))))"
" for-loop_107)"
"(void)"
"(hash-iterate-first ht_105))))"
"(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(let-values(((ht_131) todo_51))"
"(begin"
"(if((lambda(ht_132)(hash? ht_132)) ht_131)"
"(void)"
"(let-values()(default-in-hash-keys ht_131)))"
"((letrec-values(((for-loop_133)"
"(lambda(fold-var_134 i_135)"
"(if i_135"
"(let-values(((mod-name_136)"
"(hash-iterate-key ht_131 i_135)))"
"(let-values(((fold-var_137)"
"(let-values(((fold-var_138)"
" fold-var_134))"
"(let-values(((fold-var_139)"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_136"
" src-namespace_46))"
"(void)))))"
"(values fold-var_139)))))"
"(for-loop_133"
" fold-var_137"
"(hash-iterate-next ht_131 i_135))))"
" fold-var_134))))"
" for-loop_133)"
"(void)"
"(hash-iterate-first ht_131))))))))))))))))))))))))"
"(define-values"
"(unpack20.1)"
"(lambda(given-kws_140 given-args_141 who15_142 src-namespace16_143 mod-path17_144 dest-namespace18_145)"
"(let-values(((attach-instances?14_146)(pair? given-kws_140)))"
"(let-values(((attach-instances?13_147)(if attach-instances?14_146(car given-args_141)(void))))"
"(do-attach-module19.1"
" attach-instances?13_147"
" attach-instances?14_146"
" who15_142"
" src-namespace16_143"
" mod-path17_144"
" dest-namespace18_145)))))"
"(define-values"
"(do-attach-module21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_148 given-argc_149)"
"(if(= given-argc_149 6)"
"(let-values(((l1_150) given-kws_148))"
"(let-values(((l1_151)"
"(if(null? l1_150) l1_150(if(eq?(car l1_150) '#:attach-instances?)(cdr l1_150) l1_150))))"
"(null? l1_151)))"
" #f))"
"(case-lambda"
"((given-kws_152 given-args_153 who_154 src-namespace_155 mod-path_156 dest-namespace_157)"
"(unpack20.1 given-kws_152 given-args_153 who_154 src-namespace_155 mod-path_156 dest-namespace_157)))"
" null"
" '(#:attach-instances?)"
"(let-values(((do-attach-module_158)"
"(case-lambda"
"((who_159 src-namespace_160 mod-path_161 dest-namespace_162)"
"(unpack20.1 null null who_159 src-namespace_160 mod-path_161 dest-namespace_162)))))"
" do-attach-module_158)))"
"(void)"
"(void)"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_1)(1/current-namespace)))"
"(let-values(((phase_2)(namespace-phase current-ns_1)))"
"(let-values(((ns_3)(namespace->namespace-at-phase(make-namespace) phase_2)))"
"(begin"
"(1/namespace-attach-module current-ns_1 ''#%kernel ns_3)"
"(namespace-primitive-module-visit! ns_3 '#%kernel)"
" ns_3))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_4)"
"(lambda(s3_5 ns1_6 ns2_7)"
"(let-values(((s_8) s3_5))"
"(let-values(((ns_9)(if ns2_7 ns1_6(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_9)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_9)))"
"(values))))"
"(let-values(((root-ctx_10)(namespace-get-root-expand-ctx ns_9)))"
"(let-values(((post-scope_11)(root-expand-context-post-expansion-scope root-ctx_10)))"
"(let-values(((other-namespace-scopes_12)"
"(alt-reverse"
"(let-values(((ht_15)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_10)"
"(namespace-phase ns_9))))"
"(begin"
"(if((lambda(ht_16)(if(hash? ht_16)(immutable? ht_16) #f)) ht_15)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18 i_19)"
"(if i_19"
"(let-values(((sc_20)"
"(unsafe-immutable-hash-iterate-key"
" ht_15"
" i_19)))"
"(let-values(((fold-var_21)"
"(let-values(((fold-var_22)"
" fold-var_18))"
"(if(equal?"
" sc_20"
" post-scope_11)"
" fold-var_22"
"(let-values(((fold-var_23)"
" fold-var_22))"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()"
" sc_20)"
" fold-var_23))))"
"(values"
" fold-var_24)))))))"
"(for-loop_17"
" fold-var_21"
"(unsafe-immutable-hash-iterate-next"
" ht_15"
" i_19))))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(unsafe-immutable-hash-iterate-first ht_15)))))))"
"(let-values(((add-ns-scopes_13)"
"(lambda(s_25)"
"(syntax-transfer-shifts"
"(add-scopes"
"(push-scope s_25 post-scope_11)"
" other-namespace-scopes_12)"
"(root-expand-context-all-scopes-stx root-ctx_10)"
"(let-values(((or-part_26)(namespace-declaration-inspector ns_9)))"
"(if or-part_26 or-part_26(current-code-inspector)))))))"
"(let-values(((maybe-module-id_14)"
"(if(pair?(1/syntax-e s_8))"
"(if(identifier?(car(1/syntax-e s_8)))"
"(add-ns-scopes_13(car(1/syntax-e s_8)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_14"
"(1/free-identifier=?"
" maybe-module-id_14"
"(1/namespace-module-identifier ns_9))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_8"
"(cons maybe-module-id_14(cdr(1/syntax-e s_8)))"
" s_8"
" s_8))"
"(let-values()(add-ns-scopes_13 s_8))))))))))))))))"
"(case-lambda"
"((s_27)(namespace-syntax-introduce4_4 s_27 #f #f))"
"((s_28 ns1_29)(namespace-syntax-introduce4_4 s_28 ns1_29 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_30)"
"(lambda(where6_31 where7_32)"
"(let-values(((where_33)(if where7_32 where6_31(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_34)(1/namespace? where_33)))"
"(if or-part_34 or-part_34(phase? where_33)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_33)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_33)(namespace-phase where_33) where_33))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_30 #f #f))"
"((where6_35)(namespace-module-identifier8_30 where6_35 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_36)"
"(begin"
"      (if (symbol? sym_36) (void) (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_36)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_36)))))"
"(define-values"
"(do-namespace-require23.1)"
"(lambda(copy-variable-as-constant?13_37"
" copy-variable-as-constant?18_38"
" copy-variable-phase-level12_39"
" copy-variable-phase-level17_40"
" run?10_41"
" run?15_42"
" skip-variable-phase-level14_43"
" skip-variable-phase-level19_44"
" visit?11_45"
" visit?16_46"
" who20_47"
" req21_48"
" ns22_49)"
"(let-values(((run?_50)(if run?15_42 run?10_41 #t)))"
"(let-values(((visit?_51)(if visit?16_46 visit?11_45 #f)))"
"(let-values(((who_52) who20_47))"
"(let-values(((req_53) req21_48))"
"(let-values(((ns_54) ns22_49))"
"(let-values(((copy-variable-phase-level_55)"
"(if copy-variable-phase-level17_40 copy-variable-phase-level12_39 #f)))"
"(let-values(((copy-variable-as-constant?_56)"
"(if copy-variable-as-constant?18_38 copy-variable-as-constant?13_37 #f)))"
"(let-values(((skip-variable-phase-level_57)"
"(if skip-variable-phase-level19_44 skip-variable-phase-level14_43 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_54)"
"(void)"
"                                        (let-values () (raise-argument-error who_52 \"namespace?\" ns_54)))"
"(values))))"
"(let-values(((ctx-stx_58)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_54)))))"
"(if(let-values(((or-part_59)(1/module-path-index? req_53)))"
"(if or-part_59 or-part_59(1/module-path? req_53)))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:116:4_60) perform-require!74.1)"
"((temp78_61)"
"(if(1/module-path-index? req_53)"
" req_53"
"(1/module-path-index-join req_53 #f)))"
"((temp79_62) #f)"
"((temp80_63) #f)"
"((ctx-stx81_64) ctx-stx_58)"
"((ns82_65) ns_54)"
"((run?83_66) run?_50)"
"((visit?84_67) visit?_51)"
"((temp85_68)(namespace-phase ns_54))"
"((temp86_69)(namespace-phase ns_54))"
"((copy-variable-phase-level87_70) copy-variable-phase-level_55)"
"((copy-variable-as-constant?88_71) copy-variable-as-constant?_56)"
"((skip-variable-phase-level89_72) skip-variable-phase-level_57)"
"((who90_73) who_52))"
"(if(variable-reference-constant?(#%variable-reference perform-require!74.1))"
"(perform-require!72.1"
" #f"
" #f"
" #f"
" #f"
" copy-variable-as-constant?88_71"
" #t"
" copy-variable-phase-level87_70"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp85_68"
" #f"
" #f"
" temp86_69"
" run?83_66"
" #t"
" skip-variable-phase-level89_72"
" #t"
" visit?84_67"
" #t"
" who90_73"
" temp78_61"
" temp79_62"
" temp80_63"
" ctx-stx81_64"
" ns82_65)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:116:4_60"
" keyword-procedure-extract"
" '(#:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:phase-shift"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)"
" 7)"
" '(#:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:phase-shift"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)"
"(list"
" copy-variable-as-constant?88_71"
" copy-variable-phase-level87_70"
" temp85_68"
" temp86_69"
" run?83_66"
" skip-variable-phase-level89_72"
" visit?84_67"
" who90_73)"
" temp78_61"
" temp79_62"
" temp80_63"
" ctx-stx81_64"
" ns82_65))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:131:4_74) parse-and-perform-requires!30.1)"
"((run?91_75) run?_50)"
"((visit?92_76) visit?_51)"
"((temp93_77)(list(1/datum->syntax ctx-stx_58 req_53)))"
"((temp94_78) #f)"
"((ns95_79) ns_54)"
"((temp96_80)(namespace-phase ns_54))"
"((temp97_81)(make-requires+provides #f))"
"((skip-variable-phase-level98_82) skip-variable-phase-level_57)"
"((who99_83) who_52))"
"(if(variable-reference-constant?"
"(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" run?91_75"
" #t"
" #f"
" #f"
" skip-variable-phase-level98_82"
" #t"
" visit?92_76"
" #t"
" who99_83"
" temp93_77"
" temp94_78"
" ns95_79"
" temp96_80"
" temp97_81)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:131:4_74"
" keyword-procedure-extract"
" '(#:run? #:skip-variable-phase-level #:visit? #:who)"
" 7)"
" '(#:run? #:skip-variable-phase-level #:visit? #:who)"
"(list run?91_75 skip-variable-phase-level98_82 visit?92_76 who99_83)"
" temp93_77"
" temp94_78"
" ns95_79"
" temp96_80"
" temp97_81))))))))))))))))))"
"(define-values"
"(unpack24.1)"
"(lambda(given-kws_84 given-args_85 who20_86 req21_87 ns22_88)"
"(let-values(((copy-variable-as-constant?18_89)"
"(if(pair? given-kws_84)(eq? '#:copy-variable-as-constant?(car given-kws_84)) #f)))"
"(let-values(((copy-variable-as-constant?13_90)(if copy-variable-as-constant?18_89(car given-args_85)(void)))"
"((given-kws_91)(if copy-variable-as-constant?18_89(cdr given-kws_84) given-kws_84))"
"((given-args_92)(if copy-variable-as-constant?18_89(cdr given-args_85) given-args_85)))"
"(let-values(((copy-variable-phase-level17_93)"
"(if(pair? given-kws_91)(eq? '#:copy-variable-phase-level(car given-kws_91)) #f)))"
"(let-values(((copy-variable-phase-level12_94)(if copy-variable-phase-level17_93(car given-args_92)(void)))"
"((given-kws_95)(if copy-variable-phase-level17_93(cdr given-kws_91) given-kws_91))"
"((given-args_96)(if copy-variable-phase-level17_93(cdr given-args_92) given-args_92)))"
"(let-values(((run?15_97)(if(pair? given-kws_95)(eq? '#:run?(car given-kws_95)) #f)))"
"(let-values(((run?10_98)(if run?15_97(car given-args_96)(void)))"
"((given-kws_99)(if run?15_97(cdr given-kws_95) given-kws_95))"
"((given-args_100)(if run?15_97(cdr given-args_96) given-args_96)))"
"(let-values(((skip-variable-phase-level19_101)"
"(if(pair? given-kws_99)(eq? '#:skip-variable-phase-level(car given-kws_99)) #f)))"
"(let-values(((skip-variable-phase-level14_102)"
"(if skip-variable-phase-level19_101(car given-args_100)(void)))"
"((given-kws_103)(if skip-variable-phase-level19_101(cdr given-kws_99) given-kws_99))"
"((given-args_104)"
"(if skip-variable-phase-level19_101(cdr given-args_100) given-args_100)))"
"(let-values(((visit?16_105)(pair? given-kws_103)))"
"(let-values(((visit?11_106)(if visit?16_105(car given-args_104)(void))))"
"(do-namespace-require23.1"
" copy-variable-as-constant?13_90"
" copy-variable-as-constant?18_89"
" copy-variable-phase-level12_94"
" copy-variable-phase-level17_93"
" run?10_98"
" run?15_97"
" skip-variable-phase-level14_102"
" skip-variable-phase-level19_101"
" visit?11_106"
" visit?16_105"
" who20_86"
" req21_87"
" ns22_88)))))))))))))"
"(define-values"
"(do-namespace-require25.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_107 given-argc_108)"
"(if(= given-argc_108 5)"
"(let-values(((l1_109) given-kws_107))"
"(let-values(((l1_110)"
"(if(null? l1_109)"
" l1_109"
"(if(eq?(car l1_109) '#:copy-variable-as-constant?)(cdr l1_109) l1_109))))"
"(let-values(((l1_111) l1_110))"
"(let-values(((l1_112)"
"(if(null? l1_111)"
" l1_111"
"(if(eq?(car l1_111) '#:copy-variable-phase-level)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)(if(null? l1_113) l1_113(if(eq?(car l1_113) '#:run?)(cdr l1_113) l1_113))))"
"(let-values(((l1_115) l1_114))"
"(let-values(((l1_116)"
"(if(null? l1_115)"
" l1_115"
"(if(eq?(car l1_115) '#:skip-variable-phase-level)(cdr l1_115) l1_115))))"
"(let-values(((l1_117) l1_116))"
"(let-values(((l1_118)"
"(if(null? l1_117)"
" l1_117"
"(if(eq?(car l1_117) '#:visit?)(cdr l1_117) l1_117))))"
"(null? l1_118)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_119 given-args_120 who_121 req_122 ns_123)"
"(unpack24.1 given-kws_119 given-args_120 who_121 req_122 ns_123)))"
" null"
" '(#:copy-variable-as-constant? #:copy-variable-phase-level #:run? #:skip-variable-phase-level #:visit?)"
"(let-values(((do-namespace-require_124)"
"(case-lambda((who_125 req_126 ns_127)(unpack24.1 null null who_125 req_126 ns_127)))))"
" do-namespace-require_124)))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require29_128)"
"(lambda(req28_129 ns26_130 ns27_131)"
"(let-values(((req_132) req28_129))"
"(let-values(((ns_133)(if ns27_131 ns26_130(1/current-namespace))))"
"(let-values()"
"(let-values(((temp100_134) 'namespace-require)((req101_135) req_132)((ns102_136) ns_133))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require25.1))"
"(do-namespace-require23.1 #f #f #f #f #f #f #f #f #f #f temp100_134 req101_135 ns102_136)"
"(do-namespace-require25.1 temp100_134 req101_135 ns102_136)))))))))"
"(case-lambda"
"((req_137)(namespace-require29_128 req_137 #f #f))"
"((req_138 ns26_139)(namespace-require29_128 req_138 ns26_139 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time34_140)"
"(lambda(req33_141 ns31_142 ns32_143)"
"(let-values(((req_144) req33_141))"
"(let-values(((ns_145)(if ns32_143 ns31_142(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:145:2_146) do-namespace-require25.1)"
"((temp103_147) #f)"
"((temp104_148) #t)"
"((temp105_149) 'namespace-require/expansion-time)"
"((req106_150) req_144)"
"((ns107_151) ns_145))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require25.1))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" temp103_147"
" #t"
" #f"
" #f"
" temp104_148"
" #t"
" temp105_149"
" req106_150"
" ns107_151)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:145:2_146"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 5)"
" '(#:run? #:visit?)"
"(list temp103_147 temp104_148)"
" temp105_149"
" req106_150"
" ns107_151)))))))))"
"(case-lambda"
"((req_152)(namespace-require/expansion-time34_140 req_152 #f #f))"
"((req_153 ns31_154)(namespace-require/expansion-time34_140 req_153 ns31_154 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant39_155)"
"(lambda(req38_156 ns36_157 ns37_158)"
"(let-values(((req_159) req38_156))"
"(let-values(((ns_160)(if ns37_158 ns36_157(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:148:2_161) do-namespace-require25.1)"
"((temp108_162) 'namespace-require/constant)"
"((req109_163) req_159)"
"((ns110_164) ns_160)"
"((temp111_165) 0)"
"((temp112_166) #t))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require25.1))"
"(do-namespace-require23.1"
" temp112_166"
" #t"
" temp111_165"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp108_162"
" req109_163"
" ns110_164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:148:2_161"
" keyword-procedure-extract"
" '(#:copy-variable-as-constant? #:copy-variable-phase-level)"
" 5)"
" '(#:copy-variable-as-constant? #:copy-variable-phase-level)"
"(list temp112_166 temp111_165)"
" temp108_162"
" req109_163"
" ns110_164)))))))))"
"(case-lambda"
"((req_167)(namespace-require/constant39_155 req_167 #f #f))"
"((req_168 ns36_169)(namespace-require/constant39_155 req_168 ns36_169 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy44_170)"
"(lambda(req43_171 ns41_172 ns42_173)"
"(let-values(((req_174) req43_171))"
"(let-values(((ns_175)(if ns42_173 ns41_172(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:153:2_176) do-namespace-require25.1)"
"((temp113_177) 'namespace-require/copy)"
"((req114_178) req_174)"
"((ns115_179) ns_175)"
"((temp116_180) 0)"
"((temp117_181) 0))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require25.1))"
"(do-namespace-require23.1"
" #f"
" #f"
" temp116_180"
" #t"
" #f"
" #f"
" temp117_181"
" #t"
" #f"
" #f"
" temp113_177"
" req114_178"
" ns115_179)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:153:2_176"
" keyword-procedure-extract"
" '(#:copy-variable-phase-level #:skip-variable-phase-level)"
" 5)"
" '(#:copy-variable-phase-level #:skip-variable-phase-level)"
"(list temp116_180 temp117_181)"
" temp113_177"
" req114_178"
" ns115_179)))))))))"
"(case-lambda"
"((req_182)(namespace-require/copy44_170 req_182 #f #f))"
"((req_183 ns41_184)(namespace-require/copy44_170 req_183 ns41_184 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value53_185)"
"(lambda(sym52_186"
" use-mapping?46_187"
" failure-thunk47_188"
" ns48_189"
" use-mapping?49_190"
" failure-thunk50_191"
" ns51_192)"
"(let-values(((sym_193) sym52_186))"
"(let-values(((use-mapping?_194)(if use-mapping?49_190 use-mapping?46_187 #f)))"
"(let-values(((failure-thunk_195)(if failure-thunk50_191 failure-thunk47_188 #f)))"
"(let-values(((ns_196)(if ns51_192 ns48_189(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_193)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_193)))"
"(if(let-values(((or-part_197)(not failure-thunk_195)))"
"(if or-part_197"
" or-part_197"
"(if(procedure? failure-thunk_195)"
"(procedure-arity-includes? failure-thunk_195 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                   \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_195)))"
"(if(1/namespace? ns_196)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_196)))"
"((call/ec"
"(lambda(escape_198)"
"(let-values(((var-ns_199 var-phase-level_200 var-sym_201)"
"(if use-mapping?_194"
"(let-values()"
"(let-values(((id_203)(1/datum->syntax #f sym_193)))"
"(let-values(((b_204)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_203 ns_196)"
"(namespace-phase ns_196)"
" ns_196)))"
"(let-values((()"
"(begin"
"(if b_204"
"(let-values()"
"(namespace-visit-available-modules! ns_196))"
"(void))"
"(values))))"
"(let-values(((v_205 extra-inspector_206)"
"(if b_204"
"(let-values(((b118_207) b_204)"
"((empty-env119_208) empty-env)"
"((null120_209) null)"
"((ns121_210) ns_196)"
"((temp122_211)"
"(namespace-phase ns_196))"
"((id123_212) id_203))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" binding-lookup50.1))"
"(binding-lookup48.1"
" #f"
" #f"
" #f"
" #f"
" b118_207"
" empty-env119_208"
" null120_209"
" ns121_210"
" temp122_211"
" id123_212)"
"(binding-lookup50.1"
" b118_207"
" empty-env119_208"
" null120_209"
" ns121_210"
" temp122_211"
" id123_212)))"
"(values variable #f))))"
"(begin"
"(if(variable? v_205)"
"(void)"
"(let-values()"
"(escape_198"
"(let-values(((or-part_213) failure-thunk_195))"
"(if or-part_213"
" or-part_213"
"(lambda()"
"(raise"
"(make-exn:fail:syntax$1"
"(format"
"(string-append"
"                                                                             \"namespace-variable-value: bound to syntax\\n\""
"                                                                             \"  in: ~s\")"
" sym_193)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_204)"
"(values"
"(if(top-level-module-path-index?"
"(module-binding-module b_204))"
" ns_196"
"(let-values(((...er/namespace/api.rkt:197:25_214)"
" namespace->module-namespace82.1)"
"((ns124_215) ns_196)"
"((temp125_216)"
"(module-binding-module b_204))"
"((temp126_217)"
"(phase-"
"(namespace-phase ns_196)"
"(module-binding-phase b_204)))"
"((temp127_218) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp127_218"
" #t"
" #f"
" #f"
" ns124_215"
" temp125_216"
" temp126_217)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:197:25_214"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp127_218)"
" ns124_215"
" temp125_216"
" temp126_217))))"
"(module-binding-phase b_204)"
"(module-binding-sym b_204))"
"(values ns_196(namespace-phase ns_196) sym_193))))))))"
"(let-values()(values ns_196(namespace-phase ns_196) sym_193)))))"
"(let-values(((val_202)"
"(namespace-get-variable"
" var-ns_199"
" var-phase-level_200"
" var-sym_201"
"(lambda()"
"(escape_198"
"(let-values(((or-part_219) failure-thunk_195))"
"(if or-part_219"
" or-part_219"
"(raise"
"(exn:fail:contract:variable"
"(format"
"(string-append"
"                                                              \"namespace-variable-value: given name is not defined\\n\""
"                                                              \"  name: ~s\")"
" sym_193)"
"(current-continuation-marks)"
" sym_193)))))))))"
"(lambda() val_202)))))))))))))))"
"(case-lambda"
"((sym_220)(namespace-variable-value53_185 sym_220 #f #f #f #f #f #f))"
"((sym_221 use-mapping?_222 failure-thunk_223 ns48_224)"
"(namespace-variable-value53_185 sym_221 use-mapping?_222 failure-thunk_223 ns48_224 #t #t #t))"
"((sym_225 use-mapping?_226 failure-thunk47_227)"
"(namespace-variable-value53_185 sym_225 use-mapping?_226 failure-thunk47_227 #f #t #t #f))"
"((sym_228 use-mapping?46_229)(namespace-variable-value53_185 sym_228 use-mapping?46_229 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!63_230)"
"(lambda(sym61_231"
" val62_232"
" map?55_233"
" ns56_234"
" as-constant?57_235"
" map?58_236"
" ns59_237"
" as-constant?60_238)"
"(let-values(((sym_239) sym61_231))"
"(let-values(((val_240) val62_232))"
"(let-values(((map?_241)(if map?58_236 map?55_233 #f)))"
"(let-values(((ns_242)(if ns59_237 ns56_234(1/current-namespace))))"
"(let-values(((as-constant?_243)(if as-constant?60_238 as-constant?57_235 #f)))"
"(let-values()"
"(begin"
"(if(symbol? sym_239)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_239)))"
"(if(1/namespace? ns_242)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_242)))"
"(namespace-set-variable!"
" ns_242"
"(namespace-phase ns_242)"
" sym_239"
" val_240"
" as-constant?_243)"
"(if map?_241"
"(let-values()"
"(let-values((()"
"(begin"
"(namespace-unset-transformer!"
" ns_242"
"(namespace-phase ns_242)"
" sym_239)"
"(values))))"
"(let-values(((id_244)(1/datum->syntax #f sym_239)))"
"(let-values(((temp128_245)(1/namespace-syntax-introduce id_244 ns_242))"
"((temp129_246)"
"(let-values(((temp131_248)(namespace-mpi ns_242))"
"((temp132_249)(namespace-phase ns_242))"
"((sym133_250) sym_239))"
"(if(variable-reference-constant?"
"(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp131_248"
" temp132_249"
" sym133_250)"
"(make-module-binding24.1"
" temp131_248"
" temp132_249"
" sym133_250))))"
"((temp130_247)(namespace-phase ns_242)))"
"(if(variable-reference-constant?(#%variable-reference add-binding!19.1))"
"(add-binding!17.1 #f #f #f #f temp128_245 temp129_246 temp130_247)"
"(add-binding!19.1 temp128_245 temp129_246 temp130_247))))))"
"(void))))))))))))"
"(case-lambda"
"((sym_251 val_252)(namespace-set-variable-value!63_230 sym_251 val_252 #f #f #f #f #f #f))"
"((sym_253 val_254 map?_255 ns_256 as-constant?57_257)"
"(namespace-set-variable-value!63_230 sym_253 val_254 map?_255 ns_256 as-constant?57_257 #t #t #t))"
"((sym_258 val_259 map?_260 ns56_261)"
"(namespace-set-variable-value!63_230 sym_258 val_259 map?_260 ns56_261 #f #t #t #f))"
"((sym_262 val_263 map?55_264)(namespace-set-variable-value!63_230 sym_262 val_263 map?55_264 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!68_265)"
"(lambda(sym67_266 ns65_267 ns66_268)"
"(let-values(((sym_269) sym67_266))"
"(let-values(((ns_270)(if ns66_268 ns65_267(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_269)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_269)))"
"(if(1/namespace? ns_270)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_270)))"
"(namespace-unset-variable! ns_270(namespace-phase ns_270) sym_269))))))))"
"(case-lambda"
"((sym_271)(namespace-undefine-variable!68_265 sym_271 #f #f))"
"((sym_272 ns65_273)(namespace-undefine-variable!68_265 sym_272 ns65_273 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols72_274)"
"(lambda(ns70_275 ns71_276)"
"(let-values(((ns_277)(if ns71_276 ns70_275(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_277)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_277)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_277))"
"(namespace-phase ns_277))"
"(list->set(1/instance-variable-names(namespace->instance ns_277 0)))))))))))"
"(case-lambda"
"(()(namespace-mapped-symbols72_274 #f #f))"
"((ns70_278)(namespace-mapped-symbols72_274 ns70_278 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase76_279)"
"(lambda(ns74_280 ns75_281)"
"(let-values(((ns_282)(if ns75_281 ns74_280(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_282)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_282)))"
"(namespace-phase ns_282)))))))"
"(case-lambda(()(namespace-base-phase76_279 #f #f))((ns74_283)(namespace-base-phase76_279 ns74_283 #t)))))"
"(void)"
"(void)"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_1 self_2)"
"(let-values(((extract_3)"
"(lambda(ok?_4)"
"(let-values(((result-l_5)"
"(alt-reverse"
"(let-values(((ht_6) provides_1))"
"(begin"
"(if((lambda(ht_7)(hash? ht_7)) ht_6)"
"(void)"
"(let-values()(default-in-hash ht_6)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 i_10)"
"(if i_10"
"(let-values(((phase_11 at-phase_12)"
"(hash-iterate-key+value ht_6 i_10)))"
"(let-values(((fold-var_13)"
"(let-values(((l_14)"
"(alt-reverse"
"(let-values(((ht_15)"
" at-phase_12))"
"(begin"
"(if((lambda(ht_16)"
"(hash? ht_16))"
" ht_15)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18"
" i_19)"
"(if i_19"
"(let-values(((sym_20"
" b/p_21)"
"(hash-iterate-key+value"
" ht_15"
" i_19)))"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_18))"
"(if(ok?_4"
" b/p_21)"
"(let-values(((fold-var_24)"
" fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_26)"
"(provided-as-binding"
" b/p_21)))"
"(list"
" sym_20"
"(if(eq?"
" self_2"
"(module-binding-module"
" b_26))"
"(let-values()"
" null)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_27)"
"(cons"
" b_26"
"(module-binding-extra-nominal-bindings"
" b_26))))"
"(begin"
"(if(list?"
" lst_27)"
"(void)"
"(let-values()"
"(in-list"
" lst_27)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29"
" lst_30)"
"(if(pair?"
" lst_30)"
"(let-values(((b_31)"
"(unsafe-car"
" lst_30)))"
"(let-values(((fold-var_32)"
"(let-values(((fold-var_33)"
" fold-var_29))"
"(let-values(((fold-var_34)"
"(let-values()"
"(cons"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_31)"
" phase_11)"
"(eq?"
"(module-binding-nominal-sym"
" b_31)"
" sym_20)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_31))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_31)"
"(module-binding-phase"
" b_31)"
"(module-binding-nominal-sym"
" b_31)"
"(module-binding-nominal-phase"
" b_31)))))"
" fold-var_33))))"
"(values"
" fold-var_34)))))"
"(for-loop_28"
" fold-var_32"
"(unsafe-cdr"
" lst_30))))"
" fold-var_29))))"
" for-loop_28)"
" null"
" lst_27)))))))))"
" fold-var_24))))"
"(values"
" fold-var_25)))"
" fold-var_23))))"
"(for-loop_17"
" fold-var_22"
"(hash-iterate-next"
" ht_15"
" i_19))))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(hash-iterate-first"
" ht_15)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_35)"
"(lambda(fold-var_36)"
"(let-values()"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38)"
" fold-var_36))"
"(if(null?"
" l_14)"
" fold-var_38"
"(let-values(((fold-var_39)"
" fold-var_38))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_11"
"(let-values(((.../provide-for-api.rkt:35:20_41)"
" sort9.1)"
"((l4_42)"
" l_14)"
"((symbol<?5_43)"
" symbol<?)"
"((car6_44)"
" car))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" car6_44"
" #t"
" l4_42"
" symbol<?5_43)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:35:20_41"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list"
" car6_44)"
" l4_42"
" symbol<?5_43)))))"
" fold-var_39))))"
"(values"
" fold-var_40)))))))"
" fold-var_37)))))"
" for-loop_35)"
" fold-var_9)))))"
"(for-loop_8"
" fold-var_13"
"(hash-iterate-next ht_6 i_10))))"
" fold-var_9))))"
" for-loop_8)"
" null"
"(hash-iterate-first ht_6)))))))"
"(let-values(((.../provide-for-api.rkt:36:4_45) sort9.1)"
"((result-l1_46) result-l_5)"
"((phase<?2_47) phase<?)"
"((car3_48) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car3_48 #t result-l1_46 phase<?2_47)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:36:4_45"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car3_48)"
" result-l1_46"
" phase<?2_47)))))))"
"(values"
"(extract_3(lambda(b/p_49)(not(provided-as-transformer? b/p_49))))"
"(extract_3 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_50 all-vars_51)"
"(let-values(((result-l_52)"
"(alt-reverse"
"(let-values(((ht_53) all-vars_51))"
"(begin"
"(if((lambda(ht_54)(hash? ht_54)) ht_53)(void)(let-values()(default-in-hash ht_53)))"
"((letrec-values(((for-loop_55)"
"(lambda(fold-var_56 i_57)"
"(if i_57"
"(let-values(((phase_58 vars_59)(hash-iterate-key+value ht_53 i_57)))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_56))"
"(let-values(((l_62)"
"(let-values(((syms_63)"
"(hash-ref"
" provides_50"
" phase_58"
" '#hasheq())))"
"(alt-reverse"
"(let-values(((lst_64) vars_59))"
"(begin"
"(if(list? lst_64)"
"(void)"
"(let-values()(in-list lst_64)))"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66"
" lst_67)"
"(if(pair?"
" lst_67)"
"(let-values(((var-sym_68)"
"(unsafe-car"
" lst_67)))"
"(let-values(((fold-var_69)"
"(let-values(((fold-var_70)"
" fold-var_66))"
"(if(hash-ref"
" syms_63"
" var-sym_68"
" #f)"
" fold-var_70"
"(let-values(((fold-var_71)"
" fold-var_70))"
"(let-values(((fold-var_72)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_68)"
" fold-var_71))))"
"(values"
" fold-var_72)))))))"
"(for-loop_65"
" fold-var_69"
"(unsafe-cdr"
" lst_67))))"
" fold-var_66))))"
" for-loop_65)"
" null"
" lst_64)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_74)"
"(let-values()"
"(let-values(((fold-var_75)"
"(let-values(((fold-var_76)"
" fold-var_74))"
"(if(null?"
" l_62)"
" fold-var_76"
"(let-values(((fold-var_77)"
" fold-var_76))"
"(let-values(((fold-var_78)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_58"
"(let-values(((l10_79)"
" l_62)"
"((symbol<?11_80)"
" symbol<?))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_79"
" symbol<?11_80)"
"(sort9.1"
" l10_79"
" symbol<?11_80)))))"
" fold-var_77))))"
"(values"
" fold-var_78)))))))"
" fold-var_75)))))"
" for-loop_73)"
" fold-var_61))))))"
"(for-loop_55 fold-var_60(hash-iterate-next ht_53 i_57))))"
" fold-var_56))))"
" for-loop_55)"
" null"
"(hash-iterate-first ht_53)))))))"
"(let-values(((.../provide-for-api.rkt:53:2_81) sort9.1)"
"((result-l7_82) result-l_52)"
"((phase<?8_83) phase<?)"
"((car9_84) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car9_84 #t result-l7_82 phase<?8_83)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:53:2_81"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car9_84)"
" result-l7_82"
" phase<?8_83))))))"
"(void)"
"(void)"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(1/linklet-directory? c_1)))(if or-part_3 or-part_3(1/linklet-bundle? c_1)))))))"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_4)(if(compiled-in-memory? c_4)(compiled-in-memory-linklet-directory c_4) c_4)))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_5)"
"(let-values(((ld_6)(compiled->linklet-directory-or-bundle c_5)))"
"(let-values(((or-part_7)"
"(if(1/linklet-directory? ld_6)"
"(if(let-values(((b_8)(hash-ref(1/linklet-directory->hash ld_6) #f #f)))"
"(if b_8(hash-ref(1/linklet-bundle->hash b_8) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_7"
" or-part_7"
"(if(1/linklet-bundle? ld_6)(if(hash-ref(1/linklet-bundle->hash ld_6) 'decl #f) #t #f) #f))))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_9)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_9)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_9)))"
"(values))))"
"(let-values(((ld_10)(compiled->linklet-directory-or-bundle c_9)))"
"(let-values(((b_11)(if(1/linklet-bundle? ld_10) ld_10(hash-ref(1/linklet-directory->hash ld_10) #f))))"
"(hash-ref(1/linklet-bundle->hash b_11) 'name)))))"
"((c_12 name_13)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_12)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(symbol? name_13)))"
"(if or-part_15"
" or-part_15"
"(if(pair? name_13)(if(list? name_13)(andmap2 symbol? name_13) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_13)))"
"(values))))"
"(let-values(((prefix_14)(if(symbol? name_13) null(alt-reverse(cdr(alt-reverse name_13))))))"
"(change-module-name c_12 name_13 prefix_14)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_16 non-star?_17)"
"(begin"
"(if(1/compiled-module-expression? c_16)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_16)))"
"(if(compiled-in-memory? c_16)"
"(let-values()"
"(if non-star?_17"
"(compiled-in-memory-pre-compiled-in-memorys c_16)"
"(compiled-in-memory-post-compiled-in-memorys c_16)))"
"(let-values()"
"(if(1/linklet-directory? c_16)"
"(let-values()"
"(let-values(((ht_18)(1/linklet-directory->hash c_16)))"
"(let-values(((bh_19)(1/linklet-bundle->hash(hash-ref ht_18 #f))))"
"(let-values(((names_20)(hash-ref bh_19(if non-star?_17 'pre 'post) null)))"
"(alt-reverse"
"(let-values(((lst_21) names_20))"
"(begin"
"(if(list? lst_21)(void)(let-values()(in-list lst_21)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 lst_24)"
"(if(pair? lst_24)"
"(let-values(((name_25)(unsafe-car lst_24)))"
"(let-values(((fold-var_26)"
"(let-values(((fold-var_27) fold-var_23))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref ht_18 name_25))"
" fold-var_27))))"
"(values fold-var_28)))))"
"(for-loop_22 fold-var_26(unsafe-cdr lst_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
" lst_21))))))))"
"(let-values() null))))))"
"((c_29 non-star?_30 submods_31)"
"(begin"
"(if(1/compiled-module-expression? c_29)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_29)))"
"(if(if(list? submods_31)(andmap2 1/compiled-module-expression? submods_31) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_31)))"
"(if(if(null? submods_31)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_29)) #f)"
"(let-values() c_29)"
"(if(if(compiled-in-memory? c_29)(andmap2 compiled-in-memory? submods_31) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_32)"
"(if non-star?_30 submods_31(compiled-in-memory-pre-compiled-in-memorys c_29))))"
"(let-values(((post-compiled-in-memorys_33)"
"(if non-star?_30(compiled-in-memory-post-compiled-in-memorys c_29) submods_31)))"
"(let-values(((n-c_34)(normalize-to-linklet-directory c_29)))"
"(fixup-submodule-names"
"(let-values(((the-struct_35) n-c_34))"
"(if(compiled-in-memory? the-struct_35)"
"(let-values(((pre-compiled-in-memorys1_36) pre-compiled-in-memorys_32)"
"((post-compiled-in-memorys2_37) post-compiled-in-memorys_33)"
"((linklet-directory3_38)"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_34))"
" #f)"
" non-star?_30"
" submods_31)"
"(append pre-compiled-in-memorys_32 post-compiled-in-memorys_33))))"
"(compiled-in-memory1.1"
" linklet-directory3_38"
"(compiled-in-memory-phase-to-link-module-uses the-struct_35)"
"(compiled-in-memory-compile-time-inspector the-struct_35)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_35)"
"(compiled-in-memory-mpis the-struct_35)"
"(compiled-in-memory-syntax-literals the-struct_35)"
" pre-compiled-in-memorys1_36"
" post-compiled-in-memorys2_37"
"(compiled-in-memory-namespace-scopes the-struct_35)"
"(compiled-in-memory-purely-functional? the-struct_35)))"
"                       (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_35))))))))"
"(let-values()"
"(let-values(((n-c_39)(normalize-to-linklet-directory c_29)))"
"(fixup-submodule-names"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_39)) #f)"
" non-star?_30"
" submods_31)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_30 submods_31(1/module-compiled-submodules c_29 #t))"
"(if non-star?_30(1/module-compiled-submodules c_29 #f) submods_31)))))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_40)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_40)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_40)))"
"(values))))"
"(let-values(((h_41)(compiled-module->h c_40)))(hash-ref h_41 'language-info #f)))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_42)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_42)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_42)))"
"(values))))"
"(let-values(((inst_43)(compiled-module->declaration-instance c_42)))"
"(1/instance-variable-value inst_43 'requires)))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_44)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_44)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_44)))"
"(values))))"
"(let-values(((inst_45)(compiled-module->declaration-instance c_44)))"
"(provides->api-provides"
"(1/instance-variable-value inst_45 'provides)"
"(1/instance-variable-value inst_45 'self-mpi))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_46)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_46)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_46)))"
"(values))))"
"(let-values(((h_47 inst_48)(compiled-module->h+declaration-instance c_46)))"
"(let-values(((min-phase_49)(hash-ref h_47 'min-phase 0)))"
"(let-values(((max-phase_50)(hash-ref h_47 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_48 'provides)"
"(let-values(((start_51) min-phase_49)((end_52)(add1 max-phase_50))((inc_53) 1))"
"(begin"
"(if(if(real? start_51)(if(real? end_52)(real? inc_53) #f) #f)"
"(void)"
"(let-values()(in-range start_51 end_52 inc_53)))"
"((letrec-values(((for-loop_54)"
"(lambda(table_55 pos_56)"
"(if(< pos_56 end_52)"
"(let-values(((phase-level_57) pos_56))"
"(let-values(((table_58)"
"(let-values(((table_59) table_55))"
"(let-values(((table_60)"
"(let-values()"
"(let-values(((key_61 val_62)"
"(let-values()"
"(let-values(((linklet_63)"
"(hash-ref"
" h_47"
" phase-level_57"
" #f)))"
"(values"
" phase-level_57"
"(if linklet_63"
"(1/linklet-export-variables"
" linklet_63)"
" null))))))"
"(hash-set table_59 key_61 val_62)))))"
"(values table_60)))))"
"(for-loop_54 table_58(+ pos_56 inc_53))))"
" table_55))))"
" for-loop_54)"
" '#hash()"
" start_51))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_64)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_64)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                         \"compiled-module-expression?\""
" c_64)))"
"(values))))"
"(let-values(((h_65)(compiled-module->h c_64)))(hash-ref h_65 'cross-phase-persistent? #f)))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_66)"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_66))"
"(let-values() c_66)"
"(if(1/linklet-bundle? c_66)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_66)))"
"(let-values()"
"(let-values(((the-struct_67) c_66))"
"(if(compiled-in-memory? the-struct_67)"
"(let-values(((linklet-directory4_68)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_66))))"
"(compiled-in-memory1.1"
" linklet-directory4_68"
"(compiled-in-memory-phase-to-link-module-uses the-struct_67)"
"(compiled-in-memory-compile-time-inspector the-struct_67)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_67)"
"(compiled-in-memory-mpis the-struct_67)"
"(compiled-in-memory-syntax-literals the-struct_67)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_67)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_67)"
"(compiled-in-memory-namespace-scopes the-struct_67)"
"(compiled-in-memory-purely-functional? the-struct_67)))"
"              (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_67))))))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_69)(let-values(((n_70)(1/module-compiled-name c_69)))(if(pair? n_70)(car(alt-reverse n_70)) n_70))))"
"(define-values"
"(change-module-name)"
"(lambda(c_71 name_72 prefix_73)"
"(let-values(((full-name_74)(if(null? prefix_73) name_72(append prefix_73(list name_72)))))"
"(let-values(((next-prefix_75)(if(null? prefix_73)(list name_72) full-name_74)))"
"(let-values(((recur_76)"
"(lambda(sub-c_77 name_78)"
"(if(equal?(1/module-compiled-name sub-c_77)(append next-prefix_75(list name_78)))"
" sub-c_77"
"(change-module-name sub-c_77 name_78 next-prefix_75)))))"
"(if(compiled-in-memory? c_71)"
"(let-values()"
"(let-values(((change-submodule-name_79)"
"(lambda(sub-c_82)(recur_76 sub-c_82(module-compiled-immediate-name sub-c_82)))))"
"(let-values(((pre-compiled-in-memorys_80)"
"(map2 change-submodule-name_79(compiled-in-memory-pre-compiled-in-memorys c_71))))"
"(let-values(((post-compiled-in-memorys_81)"
"(map2 change-submodule-name_79(compiled-in-memory-post-compiled-in-memorys c_71))))"
"(let-values(((the-struct_83) c_71))"
"(if(compiled-in-memory? the-struct_83)"
"(let-values(((pre-compiled-in-memorys5_84) pre-compiled-in-memorys_80)"
"((post-compiled-in-memorys6_85) post-compiled-in-memorys_81)"
"((linklet-directory7_86)"
"(rebuild-linklet-directory"
"(update-one-name"
"(hash-ref"
"(1/linklet-directory->hash(compiled->linklet-directory-or-bundle c_71))"
" #f)"
" full-name_74)"
"(append pre-compiled-in-memorys_80 post-compiled-in-memorys_81))))"
"(compiled-in-memory1.1"
" linklet-directory7_86"
"(compiled-in-memory-phase-to-link-module-uses the-struct_83)"
"(compiled-in-memory-compile-time-inspector the-struct_83)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_83)"
"(compiled-in-memory-mpis the-struct_83)"
"(compiled-in-memory-syntax-literals the-struct_83)"
" pre-compiled-in-memorys5_84"
" post-compiled-in-memorys6_85"
"(compiled-in-memory-namespace-scopes the-struct_83)"
"(compiled-in-memory-purely-functional? the-struct_83)))"
"                        (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_83)))))))"
"(if(1/linklet-directory? c_71)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_87)(1/linklet-directory->hash c_71)))"
"(begin"
"(if((lambda(ht_88)(hash? ht_88)) ht_87)(void)(let-values()(default-in-hash ht_87)))"
"((letrec-values(((for-loop_89)"
"(lambda(table_90 i_91)"
"(if i_91"
"(let-values(((key_92 val_93)(hash-iterate-key+value ht_87 i_91)))"
"(let-values(((table_94)"
"(let-values(((table_95) table_90))"
"(let-values(((table_96)"
"(let-values()"
"(let-values(((key_97 val_98)"
"(let-values()"
"(values"
" key_92"
"(if(not key_92)"
"(update-one-name"
" val_93"
" full-name_74)"
"(recur_76"
" val_93"
" key_92))))))"
"(hash-set table_95 key_97 val_98)))))"
"(values table_96)))))"
"(for-loop_89 table_94(hash-iterate-next ht_87 i_91))))"
" table_90))))"
" for-loop_89)"
" '#hasheq()"
"(hash-iterate-first ht_87))))))"
"(let-values()(update-one-name c_71 full-name_74)))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_99 name_100)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_99) 'name name_100))))"
"(define-values(fixup-submodule-names)(lambda(c_101)(1/module-compiled-name c_101(1/module-compiled-name c_101))))"
"(define-values"
"(rebuild-linklet-directory)"
"(lambda(main_102 submods_103)"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_104) submods_103))"
"(begin"
"(if(list? lst_104)(void)(let-values()(in-list lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(ht_106 lst_107)"
"(if(pair? lst_107)"
"(let-values(((submod_108)(unsafe-car lst_107)))"
"(let-values(((ht_109)"
"(let-values(((ht_110) ht_106))"
"(let-values(((ht_111)"
"(let-values()"
"(let-values(((name_112)"
"(module-compiled-immediate-name"
" submod_108)))"
"(if(hash-ref ht_110 name_112 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                         \"change would result in duplicate submodule name\""
"                                                                         \"name\""
" name_112))"
"(let-values()"
"(hash-set ht_110 name_112 submod_108)))))))"
"(values ht_111)))))"
"(for-loop_105 ht_109(unsafe-cdr lst_107))))"
" ht_106))))"
" for-loop_105)"
" '#hasheq()"
" lst_104)))"
" #f"
" main_102))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_113 pre?_114 submods_115)"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_113)"
"(if pre?_114 'pre 'post)"
"(map2 module-compiled-immediate-name submods_115)))))"
"(void)"
"(void)"
"(define-values"
"(1/eval)"
"(let-values(((eval6_2)"
"(lambda(s5_3 ns1_4 compile2_5 ns3_6 compile4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((ns_9)(if ns3_6 ns1_4(1/current-namespace))))"
"(let-values(((compile_10)"
"(if compile4_7 compile2_5(lambda(s_11 ns_12)(1/compile s_11 ns_12 #f)))))"
"(let-values()"
"(if(let-values(((or-part_13)(compiled-in-memory? s_8)))"
"(if or-part_13"
" or-part_13"
"(let-values(((or-part_14)(1/linklet-directory? s_8)))"
"(if or-part_14 or-part_14(1/linklet-bundle? s_8)))))"
"(let-values()"
"(let-values(((s61_15) s_8)((ns62_16) ns_9))"
"(if(variable-reference-constant?(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 #f #f s61_15 ns62_16)"
"(eval-compiled14.1 s61_15 ns62_16))))"
"(if(if(syntax?$1 s_8)"
"(let-values(((or-part_17)(compiled-in-memory?(1/syntax-e s_8))))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(1/linklet-directory?(1/syntax-e s_8))))"
"(if or-part_18 or-part_18(1/linklet-bundle?(1/syntax-e s_8))))))"
" #f)"
"(let-values()"
"(let-values(((temp63_19)(1/syntax->datum s_8))((ns64_20) ns_9))"
"(if(variable-reference-constant?(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 #f #f temp63_19 ns64_20)"
"(eval-compiled14.1 temp63_19 ns64_20))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:55:4_21) per-top-level60.1)"
"((s65_22) s_8)"
"((ns66_23) ns_9)"
"((temp67_24)"
"(lambda(s_25 ns_26 tail?_27)"
"(let-values(((...pander/eval/main.rkt:57:30_28) eval-compiled14.1)"
"((temp68_29)(compile_10 s_25 ns_26))"
"((ns69_30) ns_26)"
"((tail?70_31) tail?_27))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 tail?70_31 #t temp68_29 ns69_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:57:30_28"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list tail?70_31)"
" temp68_29"
" ns69_30))))))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1 #f #f #f #f temp67_24 #f #f s65_22 ns66_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:55:4_21"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp67_24)"
" s65_22"
" ns66_23)))))))))))))"
"(case-lambda"
"((s_32)(eval6_2 s_32 #f #f #f #f))"
"((s_33 ns_34 compile2_35)(eval6_2 s_33 ns_34 compile2_35 #t #t))"
"((s_36 ns1_37)(eval6_2 s_36 ns1_37 #f #t #f)))))"
"(define-values"
"(eval-compiled12.1)"
"(lambda(as-tail?8_38 as-tail?9_39 c10_40 ns11_41)"
"(let-values(((c_42) c10_40))"
"(let-values(((ns_43) ns11_41))"
"(let-values(((as-tail?_44)(if as-tail?9_39 as-tail?8_38 #t)))"
"(let-values()"
"(if(1/compiled-module-expression? c_42)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:62:4_45) eval-module10.1)((c71_46) c_42)((ns72_47) ns_43))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 ns72_47 #t #f #f #f #f c71_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:62:4_45"
" keyword-procedure-extract"
" '(#:namespace)"
" 3)"
" '(#:namespace)"
"(list ns72_47)"
" c71_46))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:64:4_48) eval-top9.1)"
"((c73_49) c_42)"
"((ns74_50) ns_43)"
"((eval-compiled75_51) eval-compiled14.1)"
"((as-tail?76_52) as-tail?_44))"
"(if(variable-reference-constant?(#%variable-reference eval-top9.1))"
"(eval-top7.1 as-tail?76_52 #t c73_49 ns74_50 eval-compiled75_51 #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:64:4_48"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 5)"
" '(#:as-tail?)"
"(list as-tail?76_52)"
" c73_49"
" ns74_50"
" eval-compiled75_51)))))))))))"
"(define-values"
"(unpack13.1)"
"(lambda(given-kws_53 given-args_54 c10_55 ns11_56)"
"(let-values(((as-tail?9_57)(pair? given-kws_53)))"
"(let-values(((as-tail?8_58)(if as-tail?9_57(car given-args_54)(void))))"
"(eval-compiled12.1 as-tail?8_58 as-tail?9_57 c10_55 ns11_56)))))"
"(define-values"
"(eval-compiled14.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_59 given-argc_60)"
"(if(= given-argc_60 4)"
"(let-values(((l1_61) given-kws_59))"
"(let-values(((l1_62)(if(null? l1_61) l1_61(if(eq?(car l1_61) '#:as-tail?)(cdr l1_61) l1_61))))"
"(null? l1_62)))"
" #f))"
"(case-lambda((given-kws_63 given-args_64 c_65 ns_66)(unpack13.1 given-kws_63 given-args_64 c_65 ns_66)))"
" null"
" '(#:as-tail?)"
"(let-values(((eval-compiled_67)(case-lambda((c_68 ns_69)(unpack13.1 null null c_68 ns_69))))) eval-compiled_67)))"
"(define-values"
"(1/compile)"
"(let-values(((compile24_70)"
"(lambda(s23_71"
" ns15_72"
" serializable?16_73"
" expand17_74"
" to-source?18_75"
" ns19_76"
" serializable?20_77"
" expand21_78"
" to-source?22_79)"
"(let-values(((s_80) s23_71))"
"(let-values(((ns_81)(if ns19_76 ns15_72(1/current-namespace))))"
"(let-values(((serializable?_82)(if serializable?20_77 serializable?16_73 #t)))"
"(let-values(((expand_83)(if expand21_78 expand17_74 expand$1)))"
"(let-values(((to-source?_84)(if to-source?22_79 to-source?18_75 #f)))"
"(let-values()"
"(let-values(((cs_85)"
"(if(1/compiled-expression? s_80)"
"(let-values()(list s_80))"
"(if(if(syntax?$1 s_80)(1/compiled-expression?(1/syntax-e s_80)) #f)"
"(let-values()(list(1/syntax-e s_80)))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:82:6_86) per-top-level60.1)"
"((s77_87) s_80)"
"((ns78_88) ns_81)"
"((temp79_89)"
"(lambda(s_91 ns_92 as-tail?_93)"
"(list"
"(compile-single$1"
" s_91"
" ns_92"
" expand_83"
" serializable?_82"
" to-source?_84))))"
"((append80_90) append))"
"(if(variable-reference-constant?"
"(#%variable-reference per-top-level60.1))"
"(per-top-level58.1"
" append80_90"
" #t"
" #f"
" #f"
" temp79_89"
" #f"
" #f"
" s77_87"
" ns78_88)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:82:6_86"
" keyword-procedure-extract"
" '(#:combine #:single)"
" 4)"
" '(#:combine #:single)"
"(list append80_90 temp79_89)"
" s77_87"
" ns78_88))))))))"
"(if(if(= 1(length cs_85))(not(compiled-multiple-top?(car cs_85))) #f)"
"(car cs_85)"
"(let-values(((...pander/eval/main.rkt:91:6_94) compiled-tops->compiled-top10.1)"
"((cs81_95) cs_85)"
"((to-source?82_96) to-source?_84)"
"((serializable?83_97) serializable?_82)"
"((ns84_98) ns_81))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top10.1))"
"(compiled-tops->compiled-top8.1"
" serializable?83_97"
" #t"
" ns84_98"
" #t"
" to-source?82_96"
" #t"
" cs81_95)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:91:6_94"
" keyword-procedure-extract"
" '(#:merge-serialization? #:namespace #:to-source?)"
" 3)"
" '(#:merge-serialization? #:namespace #:to-source?)"
"(list serializable?83_97 ns84_98 to-source?82_96)"
" cs81_95))))))))))))))"
"(case-lambda"
"((s_99)(compile24_70 s_99 #f #f #f #f #f #f #f #f))"
"((s_100 ns_101 serializable?_102 expand_103 to-source?18_104)"
"(compile24_70 s_100 ns_101 serializable?_102 expand_103 to-source?18_104 #t #t #t #t))"
"((s_105 ns_106 serializable?_107 expand17_108)"
"(compile24_70 s_105 ns_106 serializable?_107 expand17_108 #f #t #t #t #f))"
"((s_109 ns_110 serializable?16_111)(compile24_70 s_109 ns_110 serializable?16_111 #f #f #t #t #f #f))"
"((s_112 ns15_113)(compile24_70 s_112 ns15_113 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets29_114)"
"(lambda(s28_115 ns26_116 ns27_117)"
"(let-values(((s_118) s28_115))"
"(let-values(((ns_119)(if ns27_117 ns26_116(1/current-namespace))))"
"(let-values()(1/compile s_118 ns_119 #t expand$1 #t)))))))"
"(case-lambda"
"((s_120)(compile-to-linklets29_114 s_120 #f #f))"
"((s_121 ns26_122)(compile-to-linklets29_114 s_121 ns26_122 #t)))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_123 ns_124 expand_125 serializable?_126 to-source?_127)"
"(let-values(((exp-s_128)(expand_125 s_123 ns_124)))"
"((letrec-values(((loop_129)"
"(lambda(exp-s_130)"
"(let-values(((disarmed-exp-s_131)(syntax-disarm$1 exp-s_130)))"
"(let-values(((tmp_132)(core-form-sym disarmed-exp-s_131(namespace-phase ns_124))))"
"(if(equal? tmp_132 'module)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:109:7_133) compile-module17.1)"
"((exp-s85_134) exp-s_130)"
"((temp86_135)"
"(let-values(((...pander/eval/main.rkt:109:29_138)"
" make-compile-context18.1)"
"((ns89_139) ns_124)"
"((temp90_140)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx ns_124))))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context18.1))"
"(make-compile-context16.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns89_139"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp90_140"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:109:29_138"
" keyword-procedure-extract"
" '(#:namespace #:top-level-bind-scope)"
" 2)"
" '(#:namespace #:top-level-bind-scope)"
"(list ns89_139 temp90_140)))))"
"((serializable?87_136) serializable?_126)"
"((to-source?88_137) to-source?_127))"
"(if(variable-reference-constant?(#%variable-reference compile-module17.1))"
"(compile-module15.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" serializable?87_136"
" #t"
" to-source?88_137"
" #t"
" #f"
" #f"
" exp-s85_134"
" temp86_135)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:109:7_133"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?87_136 to-source?88_137)"
" exp-s85_134"
" temp86_135))))"
"(if(equal? tmp_132 'begin)"
"(let-values()"
"(let-values(((ok?_141 begin91_142 e92_143)"
"(let-values(((s_154) disarmed-exp-s_131))"
"(let-values(((orig-s_155) s_154))"
"(let-values(((begin91_156 e92_157)"
"(let-values(((s_158)"
"(if(syntax?$1 s_154)"
"(syntax-e$1 s_154)"
" s_154)))"
"(if(pair? s_158)"
"(let-values(((begin93_159)"
"(let-values(((s_161)"
"(car s_158)))"
" s_161))"
"((e94_160)"
"(let-values(((s_162)"
"(cdr s_158)))"
"(let-values(((s_163)"
"(if(syntax?$1"
" s_162)"
"(syntax-e$1"
" s_162)"
" s_162)))"
"(let-values(((flat-s_164)"
"(to-syntax-list.1"
" s_163)))"
"(if(not flat-s_164)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_155))"
"(let-values()"
" flat-s_164)))))))"
"(values begin93_159 e94_160))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_155)))))"
"(values #t begin91_156 e92_157))))))"
"(let-values(((...pander/eval/main.rkt:117:7_165) compiled-tops->compiled-top10.1)"
"((temp95_166)"
"(alt-reverse"
"(let-values(((lst_168) e92_143))"
"(begin"
"(if(list? lst_168)(void)(let-values()(in-list lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(fold-var_170 lst_171)"
"(if(pair? lst_171)"
"(let-values(((e_172)"
"(unsafe-car lst_171)))"
"(let-values(((fold-var_173)"
"(let-values(((fold-var_174)"
" fold-var_170))"
"(let-values(((fold-var_175)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_129"
" e_172))"
" fold-var_174))))"
"(values"
" fold-var_175)))))"
"(for-loop_169"
" fold-var_173"
"(unsafe-cdr lst_171))))"
" fold-var_170))))"
" for-loop_169)"
" null"
" lst_168)))))"
"((to-source?96_167) to-source?_127))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top10.1))"
"(compiled-tops->compiled-top8.1 #f #f #f #f to-source?96_167 #t temp95_166)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:117:7_165"
" keyword-procedure-extract"
" '(#:to-source?)"
" 3)"
" '(#:to-source?)"
"(list to-source?96_167)"
" temp95_166)))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:122:7_176) compile-top11.1)"
"((exp-s97_177) exp-s_130)"
"((temp98_178)"
"(let-values(((...pander/eval/main.rkt:122:26_181)"
" make-compile-context18.1)"
"((ns101_182) ns_124)"
"((temp102_183)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx ns_124))))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context18.1))"
"(make-compile-context16.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns101_182"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp102_183"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:122:26_181"
" keyword-procedure-extract"
" '(#:namespace #:top-level-bind-scope)"
" 2)"
" '(#:namespace #:top-level-bind-scope)"
"(list ns101_182 temp102_183)))))"
"((serializable?99_179) serializable?_126)"
"((to-source?100_180) to-source?_127))"
"(if(variable-reference-constant?(#%variable-reference compile-top11.1))"
"(compile-top9.1"
" serializable?99_179"
" #t"
" #f"
" #f"
" to-source?100_180"
" #t"
" exp-s97_177"
" temp98_178)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:122:7_176"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?99_179 to-source?100_180)"
" exp-s97_177"
" temp98_178)))))))))))"
" loop_129)"
" exp-s_128))))"
"(define-values"
"(expand$1)"
"(let-values(((expand36_184)"
"(lambda(s35_185 ns31_186 log-expand?32_187 ns33_188 log-expand?34_189)"
"(let-values(((s_190) s35_185))"
"(let-values(((ns_191)(if ns33_188 ns31_186(1/current-namespace))))"
"(let-values(((log-expand?_192)(if log-expand?34_189 log-expand?32_187 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_192(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:134:2_193) per-top-level60.1)"
"((s103_194) s_190)"
"((ns104_195) ns_191)"
"((temp105_196)"
"(lambda(s_199 ns_200 as-tail?_201)(expand-single s_199 ns_200)))"
"((cons106_197) cons)"
"((re-pair107_198) re-pair))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1"
" cons106_197"
" #t"
" #f"
" #f"
" temp105_196"
" re-pair107_198"
" #t"
" s103_194"
" ns104_195)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:134:2_193"
" keyword-procedure-extract"
" '(#:combine #:single #:wrap)"
" 4)"
" '(#:combine #:single #:wrap)"
"(list cons106_197 temp105_196 re-pair107_198)"
" s103_194"
" ns104_195)))))))))))"
"(case-lambda"
"((s_202)(expand36_184 s_202 #f #f #f #f))"
"((s_203 ns_204 log-expand?32_205)(expand36_184 s_203 ns_204 log-expand?32_205 #t #t))"
"((s_206 ns31_207)(expand36_184 s_206 ns31_207 #f #t #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_208 ns_209)"
"(let-values(((require-lifts_210 lifts_211 exp-s_212)(expand-capturing-lifts s_208(make-expand-context ns_209))))"
"(if(if(null? require-lifts_210)(null? lifts_211) #f)"
"(let-values() exp-s_212)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:145:4_213) wrap-lifts-as-begin17.1)"
"((temp108_214)(append require-lifts_210 lifts_211))"
"((temp109_215)(lambda(form_219)(expand-single form_219 ns_209)))"
"((exp-s110_216) exp-s_212)"
"((s111_217) s_208)"
"((temp112_218)(namespace-phase ns_209)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 temp109_215 #t temp108_214 exp-s110_216 s111_217 temp112_218)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:145:4_213"
" keyword-procedure-extract"
" '(#:adjust-form)"
" 6)"
" '(#:adjust-form)"
"(list temp109_215)"
" temp108_214"
" exp-s110_216"
" s111_217"
" temp112_218))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once41_220)"
"(lambda(s40_221 ns38_222 ns39_223)"
"(let-values(((s_224) s40_221))"
"(let-values(((ns_225)(if ns39_223 ns38_222(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:151:2_226) per-top-level60.1)"
"((s113_227) s_224)"
"((ns114_228) ns_225)"
"((temp115_229)"
"(lambda(s_233 ns_234 as-tail?_235)(expand-single-once s_233 ns_234)))"
"((cons116_230) cons)"
"((re-pair117_231) re-pair)"
"((temp118_232) #t))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1"
" cons116_230"
" #t"
" temp118_232"
" #t"
" temp115_229"
" re-pair117_231"
" #t"
" s113_227"
" ns114_228)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:151:2_226"
" keyword-procedure-extract"
" '(#:combine #:just-once? #:single #:wrap)"
" 4)"
" '(#:combine #:just-once? #:single #:wrap)"
"(list cons116_230 temp118_232 temp115_229 re-pair117_231)"
" s113_227"
" ns114_228)))))))))"
"(case-lambda((s_236)(expand-once41_220 s_236 #f #f))((s_237 ns38_238)(expand-once41_220 s_237 ns38_238 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_239 ns_240)"
"(let-values(((require-lifts_241 lifts_242 exp-s_243)"
"(expand-capturing-lifts"
" s_239"
"(let-values(((the-struct_244)(make-expand-context ns_240)))"
"(if(expand-context? the-struct_244)"
"(let-values(((just-once?119_245) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_244)"
"(root-expand-context-post-expansion-scope the-struct_244)"
"(root-expand-context-top-level-bind-scope the-struct_244)"
"(root-expand-context-all-scopes-stx the-struct_244)"
"(root-expand-context-use-site-scopes the-struct_244)"
"(root-expand-context-defined-syms the-struct_244)"
"(root-expand-context-frame-id the-struct_244)"
"(root-expand-context-counter the-struct_244)"
"(root-expand-context-lift-key the-struct_244)"
"(expand-context-context the-struct_244)"
"(expand-context-phase the-struct_244)"
"(expand-context-namespace the-struct_244)"
"(expand-context-env the-struct_244)"
"(expand-context-user-env the-struct_244)"
"(expand-context-post-expansion-scope-action the-struct_244)"
"(expand-context-scopes the-struct_244)"
"(expand-context-def-ctx-scopes the-struct_244)"
"(expand-context-binding-layer the-struct_244)"
"(expand-context-reference-records the-struct_244)"
"(expand-context-only-immediate? the-struct_244)"
" just-once?119_245"
"(expand-context-module-begin-k the-struct_244)"
"(expand-context-need-eventually-defined the-struct_244)"
"(expand-context-allow-unbound? the-struct_244)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_244)"
"(expand-context-stops the-struct_244)"
"(expand-context-current-introduction-scopes the-struct_244)"
"(expand-context-declared-submodule-names the-struct_244)"
"(expand-context-lifts the-struct_244)"
"(expand-context-lift-envs the-struct_244)"
"(expand-context-module-lifts the-struct_244)"
"(expand-context-require-lifts the-struct_244)"
"(expand-context-to-module-lifts the-struct_244)"
"(expand-context-requires+provides the-struct_244)"
"(expand-context-name the-struct_244)"
"(expand-context-observer the-struct_244)))"
"                       (raise-argument-error 'struct-copy \"expand-context?\" the-struct_244))))))"
"(if(if(null? require-lifts_241)(null? lifts_242) #f)"
"(let-values() exp-s_243)"
"(let-values()"
"(let-values(((temp120_246)(append require-lifts_241 lifts_242))"
"((exp-s121_247) exp-s_243)"
"((s122_248) s_239)"
"((temp123_249)(namespace-phase ns_240)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 #f #f temp120_246 exp-s121_247 s122_248 temp123_249)"
"(wrap-lifts-as-begin17.1 temp120_246 exp-s121_247 s122_248 temp123_249))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form46_250)"
"(lambda(s45_251 ns43_252 ns44_253)"
"(let-values(((s_254) s45_251))"
"(let-values(((ns_255)(if ns44_253 ns43_252(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:171:2_256) per-top-level60.1)"
"((s124_257) s_254)"
"((ns125_258) ns_255)"
"((temp126_259) #f))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1 #f #f #f #f temp126_259 #f #f s124_257 ns125_258)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:171:2_256"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp126_259)"
" s124_257"
" ns125_258)))))))))"
"(case-lambda"
"((s_260)(expand-to-top-form46_250 s_260 #f #f))"
"((s_261 ns43_262)(expand-to-top-form46_250 s_261 ns43_262 #t)))))"
"(define-values"
"(lifted/1.1$6)"
"(make-required"
" 'per-top-level"
"(case-lambda((self_263 given-s_264 ns_265)(apply missing-kw self_263 given-s_264 ns_265 null)))"
" #f"
" #f))"
"(define-values"
"(per-top-level58.1)"
"(lambda(combine49_266"
" combine53_267"
" just-once?51_268"
" just-once?55_269"
" single48_270"
" wrap50_271"
" wrap54_272"
" given-s56_273"
" ns57_274)"
"(let-values(((given-s_275) given-s56_273))"
"(let-values(((ns_276) ns57_274))"
"(let-values(((single_277) single48_270))"
"(let-values(((combine_278)(if combine53_267 combine49_266 #f)))"
"(let-values(((wrap_279)(if wrap54_272 wrap50_271 #f)))"
"(let-values(((just-once?_280)(if just-once?55_269 just-once?51_268 #f)))"
"(let-values()"
"(let-values(((s_281)(maybe-intro given-s_275 ns_276)))"
"(let-values(((ctx_282)(make-expand-context ns_276)))"
"(let-values(((phase_283)(namespace-phase ns_276)))"
"((letrec-values(((loop_284)"
"(lambda(s_285 phase_286 ns_287 as-tail?_288)"
"(let-values(((tl-ctx_289)"
"(let-values(((the-struct_294) ctx_282))"
"(if(expand-context? the-struct_294)"
"(let-values(((phase127_295) phase_286)"
"((namespace128_296) ns_287)"
"((just-once?129_297) just-once?_280))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_294)"
"(root-expand-context-post-expansion-scope"
" the-struct_294)"
"(root-expand-context-top-level-bind-scope"
" the-struct_294)"
"(root-expand-context-all-scopes-stx the-struct_294)"
"(root-expand-context-use-site-scopes the-struct_294)"
"(root-expand-context-defined-syms the-struct_294)"
"(root-expand-context-frame-id the-struct_294)"
"(root-expand-context-counter the-struct_294)"
"(root-expand-context-lift-key the-struct_294)"
"(expand-context-context the-struct_294)"
" phase127_295"
" namespace128_296"
"(expand-context-env the-struct_294)"
"(expand-context-user-env the-struct_294)"
"(expand-context-post-expansion-scope-action"
" the-struct_294)"
"(expand-context-scopes the-struct_294)"
"(expand-context-def-ctx-scopes the-struct_294)"
"(expand-context-binding-layer the-struct_294)"
"(expand-context-reference-records the-struct_294)"
"(expand-context-only-immediate? the-struct_294)"
" just-once?129_297"
"(expand-context-module-begin-k the-struct_294)"
"(expand-context-need-eventually-defined the-struct_294)"
"(expand-context-allow-unbound? the-struct_294)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_294)"
"(expand-context-stops the-struct_294)"
"(expand-context-current-introduction-scopes"
" the-struct_294)"
"(expand-context-declared-submodule-names"
" the-struct_294)"
"(expand-context-lifts the-struct_294)"
"(expand-context-lift-envs the-struct_294)"
"(expand-context-module-lifts the-struct_294)"
"(expand-context-require-lifts the-struct_294)"
"(expand-context-to-module-lifts the-struct_294)"
"(expand-context-requires+provides the-struct_294)"
"(expand-context-name the-struct_294)"
"(expand-context-observer the-struct_294)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"expand-context?\""
" the-struct_294)))))"
"(let-values(((require-lifts_290 lifts_291 exp-s_292)"
"(expand-capturing-lifts"
" s_285"
"(let-values(((the-struct_298) tl-ctx_289))"
"(if(expand-context? the-struct_298)"
"(let-values(((only-immediate?130_299) #t)"
"((def-ctx-scopes131_300)(box null))"
"((phase132_301) phase_286)"
"((namespace133_302) ns_287))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_298)"
"(root-expand-context-post-expansion-scope"
" the-struct_298)"
"(root-expand-context-top-level-bind-scope"
" the-struct_298)"
"(root-expand-context-all-scopes-stx the-struct_298)"
"(root-expand-context-use-site-scopes the-struct_298)"
"(root-expand-context-defined-syms the-struct_298)"
"(root-expand-context-frame-id the-struct_298)"
"(root-expand-context-counter the-struct_298)"
"(root-expand-context-lift-key the-struct_298)"
"(expand-context-context the-struct_298)"
" phase132_301"
" namespace133_302"
"(expand-context-env the-struct_298)"
"(expand-context-user-env the-struct_298)"
"(expand-context-post-expansion-scope-action"
" the-struct_298)"
"(expand-context-scopes the-struct_298)"
" def-ctx-scopes131_300"
"(expand-context-binding-layer the-struct_298)"
"(expand-context-reference-records the-struct_298)"
" only-immediate?130_299"
"(expand-context-just-once? the-struct_298)"
"(expand-context-module-begin-k the-struct_298)"
"(expand-context-need-eventually-defined"
" the-struct_298)"
"(expand-context-allow-unbound? the-struct_298)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_298)"
"(expand-context-stops the-struct_298)"
"(expand-context-current-introduction-scopes"
" the-struct_298)"
"(expand-context-declared-submodule-names"
" the-struct_298)"
"(expand-context-lifts the-struct_298)"
"(expand-context-lift-envs the-struct_298)"
"(expand-context-module-lifts the-struct_298)"
"(expand-context-require-lifts the-struct_298)"
"(expand-context-to-module-lifts the-struct_298)"
"(expand-context-requires+provides the-struct_298)"
"(expand-context-name the-struct_298)"
"(expand-context-observer the-struct_298)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_298))))))"
"(let-values(((disarmed-exp-s_293)(syntax-disarm$1 exp-s_292)))"
"(if(let-values(((or-part_303)(pair? require-lifts_290)))"
"(if or-part_303 or-part_303(pair? lifts_291)))"
"(let-values()"
"(let-values(((new-s_304)"
"(let-values(((temp134_305)"
"(append require-lifts_290 lifts_291))"
"((exp-s135_306) exp-s_292)"
"((s136_307) s_285)"
"((phase137_308) phase_286))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" temp134_305"
" exp-s135_306"
" s136_307"
" phase137_308)"
"(wrap-lifts-as-begin17.1"
" temp134_305"
" exp-s135_306"
" s136_307"
" phase137_308)))))"
"(if just-once?_280"
" new-s_304"
"(loop_284 new-s_304 phase_286 ns_287 as-tail?_288))))"
"(if(not single_277)"
"(let-values() exp-s_292)"
"(if(if just-once?_280(not(eq? exp-s_292 s_285)) #f)"
"(let-values() exp-s_292)"
"(let-values()"
"(let-values(((tmp_309)"
"(core-form-sym disarmed-exp-s_293 phase_286)))"
"(if(equal? tmp_309 'begin)"
"(let-values()"
"(let-values(((ok?_310 begin138_311 e139_312)"
"(let-values(((s_324) disarmed-exp-s_293))"
"(let-values(((orig-s_325) s_324))"
"(let-values(((begin138_326 e139_327)"
"(let-values(((s_328)"
"(if(syntax?$1"
" s_324)"
"(syntax-e$1"
" s_324)"
" s_324)))"
"(if(pair? s_328)"
"(let-values(((begin140_329)"
"(let-values(((s_331)"
"(car"
" s_328)))"
" s_331))"
"((e141_330)"
"(let-values(((s_332)"
"(cdr"
" s_328)))"
"(let-values(((s_333)"
"(if(syntax?$1"
" s_332)"
"(syntax-e$1"
" s_332)"
" s_332)))"
"(let-values(((flat-s_334)"
"(to-syntax-list.1"
" s_333)))"
"(if(not"
" flat-s_334)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_325))"
"(let-values()"
" flat-s_334)))))))"
"(values"
" begin140_329"
" e141_330))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_325)))))"
"(values"
" #t"
" begin138_326"
" e139_327))))))"
"(letrec-values(((begin-loop_323)"
"(lambda(es_335)"
"(if(null? es_335)"
"(let-values()"
"(if combine_278 null(void)))"
"(if(if(not combine_278)"
"(null?(cdr es_335))"
" #f)"
"(let-values()"
"(loop_284"
"(car es_335)"
" phase_286"
" ns_287"
" as-tail?_288))"
"(let-values()"
"(let-values(((a_336)"
"(loop_284"
"(car es_335)"
" phase_286"
" ns_287"
" #f)))"
"(if combine_278"
"(combine_278"
" a_336"
"(begin-loop_323"
"(cdr es_335)))"
"(begin-loop_323"
"(cdr es_335))))))))))"
"(if wrap_279"
"(wrap_279"
" begin138_311"
" exp-s_292"
"(begin-loop_323 e139_312))"
"(begin-loop_323 e139_312)))))"
"(if(equal? tmp_309 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_337"
" begin-for-syntax142_338"
" e143_339)"
"(let-values(((s_353)"
" disarmed-exp-s_293))"
"(let-values(((orig-s_354) s_353))"
"(let-values(((begin-for-syntax142_355"
" e143_356)"
"(let-values(((s_357)"
"(if(syntax?$1"
" s_353)"
"(syntax-e$1"
" s_353)"
" s_353)))"
"(if(pair? s_357)"
"(let-values(((begin-for-syntax144_358)"
"(let-values(((s_360)"
"(car"
" s_357)))"
" s_360))"
"((e145_359)"
"(let-values(((s_361)"
"(cdr"
" s_357)))"
"(let-values(((s_362)"
"(if(syntax?$1"
" s_361)"
"(syntax-e$1"
" s_361)"
" s_361)))"
"(let-values(((flat-s_363)"
"(to-syntax-list.1"
" s_362)))"
"(if(not"
" flat-s_363)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_354))"
"(let-values()"
" flat-s_363)))))))"
"(values"
" begin-for-syntax144_358"
" e145_359))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_354)))))"
"(values"
" #t"
" begin-for-syntax142_355"
" e143_356))))))"
"(let-values(((next-phase_350)(add1 phase_286)))"
"(let-values(((next-ns_351)"
"(namespace->namespace-at-phase"
" ns_287"
" next-phase_350)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_351)"
"(values))))"
"(let-values(((l_352)"
"(alt-reverse"
"(let-values(((lst_364)"
" e143_339))"
"(begin"
"(if(list? lst_364)"
"(void)"
"(let-values()"
"(in-list lst_364)))"
"((letrec-values(((for-loop_365)"
"(lambda(fold-var_366"
" lst_367)"
"(if(pair?"
" lst_367)"
"(let-values(((s_368)"
"(unsafe-car"
" lst_367)))"
"(let-values(((fold-var_369)"
"(let-values(((fold-var_370)"
" fold-var_366))"
"(let-values(((fold-var_371)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_284"
" s_368"
" next-phase_350"
" next-ns_351"
" #f))"
" fold-var_370))))"
"(values"
" fold-var_371)))))"
"(for-loop_365"
" fold-var_369"
"(unsafe-cdr"
" lst_367))))"
" fold-var_366))))"
" for-loop_365)"
" null"
" lst_364))))))"
"(if wrap_279"
"(let-values()"
"(wrap_279"
" begin-for-syntax142_338"
" exp-s_292"
" l_352))"
"(if combine_278"
"(let-values() l_352)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_277"
" exp-s_292"
" ns_287"
" as-tail?_288)))))))))))))))"
" loop_284)"
" s_281"
" phase_283"
" ns_276"
" #t)))))))))))))"
"(define-values"
"(unpack59.1)"
"(lambda(given-kws_372 given-args_373 given-s56_374 ns57_375)"
"(let-values(((combine53_376)(if(pair? given-kws_372)(eq? '#:combine(car given-kws_372)) #f)))"
"(let-values(((combine49_377)(if combine53_376(car given-args_373)(void)))"
"((given-kws_378)(if combine53_376(cdr given-kws_372) given-kws_372))"
"((given-args_379)(if combine53_376(cdr given-args_373) given-args_373)))"
"(let-values(((just-once?55_380)(if(pair? given-kws_378)(eq? '#:just-once?(car given-kws_378)) #f)))"
"(let-values(((just-once?51_381)(if just-once?55_380(car given-args_379)(void)))"
"((given-kws_382)(if just-once?55_380(cdr given-kws_378) given-kws_378))"
"((given-args_383)(if just-once?55_380(cdr given-args_379) given-args_379)))"
"(let-values(((single48_384)(car given-args_383))"
"((given-kws_385)(cdr given-kws_382))"
"((given-args_386)(cdr given-args_383)))"
"(let-values(((wrap54_387)(pair? given-kws_385)))"
"(let-values(((wrap50_388)(if wrap54_387(car given-args_386)(void))))"
"(per-top-level58.1"
" combine49_377"
" combine53_376"
" just-once?51_381"
" just-once?55_380"
" single48_384"
" wrap50_388"
" wrap54_387"
" given-s56_374"
" ns57_375))))))))))"
"(define-values"
"(per-top-level60.1)"
"(lifted/1.1$6"
"(lambda(given-kws_389 given-argc_390)"
"(if(= given-argc_390 4)(subsets? '(#:single) given-kws_389 '(#:combine #:just-once? #:single #:wrap)) #f))"
"(case-lambda"
"((given-kws_391 given-args_392 given-s_393 ns_394)(unpack59.1 given-kws_391 given-args_392 given-s_393 ns_394)))"
" '(#:single)"
" '(#:combine #:just-once? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_395 ns_396)(if(syntax?$1 s_395) s_395(1/namespace-syntax-introduce(1/datum->syntax #f s_395) ns_396))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_397 s_398 r_399)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_398)(cons form-id_397 r_399) s_398 s_398) s_398)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_400 ctx_401)"
"(let-values()"
"(let-values(((ns_402)(expand-context-namespace ctx_401)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_402)(values))))"
"(let-values(((lift-ctx_403)"
"(let-values(((temp146_406)(make-top-level-lift ctx_401)))"
"(if(variable-reference-constant?(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 #f #f temp146_406)"
"(make-lift-context8.1 temp146_406)))))"
"(let-values(((require-lift-ctx_404)"
"(make-require-lift-context(namespace-phase ns_402)(make-parse-top-lifted-require ns_402))))"
"(let-values(((exp-s_405)"
"(let-values(((s147_407) s_400)"
"((temp148_408)"
"(let-values(((the-struct_409) ctx_401))"
"(if(expand-context? the-struct_409)"
"(let-values(((lifts149_410) lift-ctx_403)"
"((module-lifts150_411) lift-ctx_403)"
"((require-lifts151_412) require-lift-ctx_404))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_409)"
"(root-expand-context-post-expansion-scope the-struct_409)"
"(root-expand-context-top-level-bind-scope the-struct_409)"
"(root-expand-context-all-scopes-stx the-struct_409)"
"(root-expand-context-use-site-scopes the-struct_409)"
"(root-expand-context-defined-syms the-struct_409)"
"(root-expand-context-frame-id the-struct_409)"
"(root-expand-context-counter the-struct_409)"
"(root-expand-context-lift-key the-struct_409)"
"(expand-context-context the-struct_409)"
"(expand-context-phase the-struct_409)"
"(expand-context-namespace the-struct_409)"
"(expand-context-env the-struct_409)"
"(expand-context-user-env the-struct_409)"
"(expand-context-post-expansion-scope-action the-struct_409)"
"(expand-context-scopes the-struct_409)"
"(expand-context-def-ctx-scopes the-struct_409)"
"(expand-context-binding-layer the-struct_409)"
"(expand-context-reference-records the-struct_409)"
"(expand-context-only-immediate? the-struct_409)"
"(expand-context-just-once? the-struct_409)"
"(expand-context-module-begin-k the-struct_409)"
"(expand-context-need-eventually-defined the-struct_409)"
"(expand-context-allow-unbound? the-struct_409)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_409)"
"(expand-context-stops the-struct_409)"
"(expand-context-current-introduction-scopes the-struct_409)"
"(expand-context-declared-submodule-names the-struct_409)"
" lifts149_410"
"(expand-context-lift-envs the-struct_409)"
" module-lifts150_411"
" require-lifts151_412"
"(expand-context-to-module-lifts the-struct_409)"
"(expand-context-requires+provides the-struct_409)"
"(expand-context-name the-struct_409)"
"(expand-context-observer the-struct_409)))"
"                                              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_409)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f s147_407 temp148_408)"
"(expand7.1 s147_407 temp148_408)))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_404)"
"(get-and-clear-lifts! lift-ctx_403)"
" exp-s_405)))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_413)"
"(lambda(s_414 phase_415)"
"(let-values(((ok?_416 #%require152_417 req153_418)"
"(let-values(((s_429)(syntax-disarm$1 s_414)))"
"(let-values(((orig-s_430) s_429))"
"(let-values(((#%require152_431 req153_432)"
"(let-values(((s_433)(if(syntax?$1 s_429)(syntax-e$1 s_429) s_429)))"
"(if(pair? s_433)"
"(let-values(((#%require154_434)(let-values(((s_436)(car s_433))) s_436))"
"((req155_435)"
"(let-values(((s_437)(cdr s_433)))"
"(let-values(((s_438)"
"(if(syntax?$1 s_437)"
"(syntax-e$1 s_437)"
" s_437)))"
"(if(pair? s_438)"
"(let-values(((req156_439)"
"(let-values(((s_440)(car s_438))) s_440))"
"(()"
"(let-values(((s_441)(cdr s_438)))"
"(let-values(((s_442)"
"(if(syntax?$1 s_441)"
"(syntax-e$1 s_441)"
" s_441)))"
"(if(null? s_442)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_430))))))"
"(values req156_439))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_430))))))"
"(values #%require154_434 req155_435))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_430)))))"
"(values #t #%require152_431 req153_432))))))"
"(let-values(((...pander/eval/main.rkt:285:4_443) parse-and-perform-requires!30.1)"
"((temp157_444)(list req153_418))"
"((s158_445) s_414)"
"((ns159_446) ns_413)"
"((phase160_447) phase_415)"
"((phase161_448) phase_415)"
"((temp162_449)(make-requires+provides #f))"
"((temp163_450) 'require))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" phase161_448"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp163_450"
" temp157_444"
" s158_445"
" ns159_446"
" phase160_447"
" temp162_449)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:285:4_443"
" keyword-procedure-extract"
" '(#:run-phase #:who)"
" 7)"
" '(#:run-phase #:who)"
"(list phase161_448 temp163_450)"
" temp157_444"
" s158_445"
" ns159_446"
" phase160_447"
" temp162_449)))))))"
"(void)"
"(void)"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_1)"
"(lambda(who3_2 mod-path4_3 sym5_4 fail-k1_5 fail-k2_6)"
"(let-values(((who_7) who3_2))"
"(let-values(((mod-path_8) mod-path4_3))"
"(let-values(((sym_9) sym5_4))"
"(let-values(((fail-k_10)(if fail-k2_6 fail-k1_5 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(1/module-path? mod-path_8)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(1/module-path-index? mod-path_8)))"
"(if or-part_16 or-part_16(1/resolved-module-path? mod-path_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_7"
"                                                 \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_17)(symbol? sym_9)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(not sym_9)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(equal? sym_9 0)))"
"(if or-part_19 or-part_19(void? sym_9)))))))"
"(void)"
"(let-values()"
"                                                  (raise-argument-error who_7 \"(or/c symbol? #f 0 void?)\" sym_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_10)"
"(procedure-arity-includes? fail-k_10 0)"
" #f)"
"(void)"
"                                                  (let-values () (raise-argument-error who_7 \"(-> any)\" fail-k_10)))"
"(values))))"
"(let-values(((ns_11)(1/current-namespace)))"
"(let-values(((mpi_12)"
"(if(1/module-path? mod-path_8)"
"(let-values()(1/module-path-index-join mod-path_8 #f))"
"(if(1/module-path-index? mod-path_8)"
"(let-values() mod-path_8)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_8)"
" #f))))))"
"(let-values(((mod-name_13)(1/module-path-index-resolve mpi_12 #t)))"
"(let-values(((phase_14)(namespace-phase ns_11)))"
"(if(not sym_9)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:43:4_20)"
" namespace-module-instantiate!96.1)"
"((ns20_21) ns_11)"
"((mpi21_22) mpi_12)"
"((phase22_23) phase_14)"
"((phase23_24) phase_14)"
"((temp24_25) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" temp24_25"
" #t"
" phase23_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns20_21"
" mpi21_22"
" phase22_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:43:4_20"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase)"
" 5)"
" '(#:otherwise-available? #:run-phase)"
"(list temp24_25 phase23_24)"
" ns20_21"
" mpi21_22"
" phase22_23))))"
"(if(equal? sym_9 0)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:47:4_26)"
" namespace-module-instantiate!96.1)"
"((ns25_27) ns_11)"
"((mpi26_28) mpi_12)"
"((phase27_29) phase_14)"
"((phase28_30) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase28_30"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns25_27"
" mpi26_28"
" phase27_29)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:47:4_26"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase28_30)"
" ns25_27"
" mpi26_28"
" phase27_29))))"
"(if(void? sym_9)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:50:4_31)"
" namespace-module-visit!104.1)"
"((ns29_32) ns_11)"
"((mpi30_33) mpi_12)"
"((phase31_34) phase_14)"
"((phase32_35) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!104.1))"
"(namespace-module-visit!102.1"
" phase32_35"
" #t"
" ns29_32"
" mpi30_33"
" phase31_34)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:50:4_31"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list phase32_35)"
" ns29_32"
" mpi30_33"
" phase31_34))))"
"(let-values()"
"(let-values(((m_36)(namespace->module ns_11 mod-name_13)))"
"(let-values((()"
"(begin"
"(if m_36"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_13)))"
"(values))))"
"(let-values(((binding/p_37)"
"(hash-ref"
"(hash-ref(module-provides m_36) 0 '#hasheq())"
" sym_9"
" #f)))"
"(if(not binding/p_37)"
"(let-values()"
"(if(eq? fail-k_10 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                               \"name is not provided\""
"                                                               \"name\""
" sym_9"
"                                                               \"module\""
" mod-name_13)"
"(fail-k_10)))"
"(let-values()"
"(let-values(((binding_38)"
"(provided-as-binding binding/p_37)))"
"(let-values(((ex-sym_39)"
"(module-binding-sym binding_38)))"
"(let-values(((ex-phase_40)"
"(module-binding-phase binding_38)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:72:6_46)"
" namespace-module-instantiate!96.1)"
"((ns33_47) ns_11)"
"((mpi34_48) mpi_12)"
"((phase35_49) phase_14)"
"((phase36_50) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase36_50"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns33_47"
" mpi34_48"
" phase35_49)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:72:6_46"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase36_50)"
" ns33_47"
" mpi34_48"
" phase35_49)))"
"(values))))"
"(let-values(((ex-mod-name_41)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_38)"
"(module-self m_36)"
" mpi_12))))"
"(let-values(((m-ns_42)"
"(let-values(((.../dynamic-require.rkt:78:19_51)"
" namespace->module-namespace82.1)"
"((ns37_52) ns_11)"
"((ex-mod-name38_53)"
" ex-mod-name_41)"
"((temp39_54)"
"(phase-"
" phase_14"
" ex-phase_40))"
"((temp40_55) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp40_55"
" #t"
" #f"
" #f"
" ns37_52"
" ex-mod-name38_53"
" temp39_54)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:78:19_51"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp40_55)"
" ns37_52"
" ex-mod-name38_53"
" temp39_54)))))"
"(let-values(((mi_43)"
"(namespace->module"
" ns_11"
" ex-mod-name_41)))"
"(let-values(((access_44)"
"(let-values(((or-part_56)"
"(module-access"
" m_36)))"
"(if or-part_56"
" or-part_56"
"(module-compute-access!"
" m_36)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
" access_44"
" ex-sym_39"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_42)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_38)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_38)"
"(namespace-inspector"
" m-ns_42))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
"                                                                                                 \"name is protected\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13))"
"(void))"
"(values))))"
"(let-values(((fail_45)"
"(lambda()"
"(if(eq?"
" fail-k_10"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                 \"name's binding is missing\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13)"
"(fail-k_10)))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_37))"
"(let-values()"
"(namespace-get-variable"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" fail_45))"
"(let-values()"
"(let-values(((missing_57)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:104:8_59)"
" namespace-module-visit!104.1)"
"((ns41_60)"
" ns_11)"
"((mpi42_61)"
" mpi_12)"
"((phase43_62)"
" phase_14)"
"((phase44_63)"
" phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!104.1))"
"(namespace-module-visit!102.1"
" phase44_63"
" #t"
" ns41_60"
" mpi42_61"
" phase43_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:104:8_59"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list"
" phase44_63)"
" ns41_60"
" mpi42_61"
" phase43_62)))"
"(values))))"
"(let-values(((t_58)"
"(namespace-get-transformer"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" missing_57)))"
"(if(eq? t_58 missing_57)"
"(let-values()(fail_45))"
"(let-values()"
"(let-values(((tmp-ns_64)"
"(let-values(((ns45_66)"
" ns_11))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" new-namespace11.1))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_66"
" #t)"
"(new-namespace11.1"
" ns45_66)))))"
"(let-values(((mod-path_65)"
"(resolved-module-path->module-path"
" mod-name_13)))"
"(begin"
"(1/namespace-require"
" mod-path_65"
" tmp-ns_64)"
"(1/eval"
" sym_9"
" tmp-ns_64)))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_67 mod-path_68 sym_69)(do-dynamic-require6_1 who_67 mod-path_68 sym_69 #f #f))"
"((who_70 mod-path_71 sym_72 fail-k1_73)(do-dynamic-require6_1 who_70 mod-path_71 sym_72 fail-k1_73 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_74)"
"(lambda(mod-path10_75 sym11_76 fail-k8_77 fail-k9_78)"
"(let-values(((mod-path_79) mod-path10_75))"
"(let-values(((sym_80) sym11_76))"
"(let-values(((fail-k_81)(if fail-k9_78 fail-k8_77 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_79 sym_80 fail-k_81))))))))"
"(case-lambda"
"((mod-path_82 sym_83)(dynamic-require12_74 mod-path_82 sym_83 #f #f))"
"((mod-path_84 sym_85 fail-k8_86)(dynamic-require12_74 mod-path_84 sym_85 fail-k8_86 #t)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax18_87)"
"(lambda(mod-path16_88 sym17_89 fail-k14_90 fail-k15_91)"
"(let-values(((mod-path_92) mod-path16_88))"
"(let-values(((sym_93) sym17_89))"
"(let-values(((fail-k_94)(if fail-k15_91 fail-k14_90 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_95)(1/current-namespace)))"
"(namespace->namespace-at-phase ns_95(add1(namespace-phase ns_95)))))"
"(let-values()"
"(do-dynamic-require 'dynamic-require-for-syntax mod-path_92 sym_93 fail-k_94))))))))))"
"(case-lambda"
"((mod-path_96 sym_97)(dynamic-require-for-syntax18_87 mod-path_96 sym_97 #f #f))"
"((mod-path_98 sym_99 fail-k14_100)(dynamic-require-for-syntax18_87 mod-path_98 sym_99 fail-k14_100 #t)))))"
"(void)"
"(void)"
"(define-values"
"(eval$1)"
"(case-lambda"
"((s_1)((current-eval)(intro s_1)))"
"((s_2 ns_3)"
"(begin"
"      (if (1/namespace? ns_3) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_3)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_3)"
"(let-values()((current-eval)(intro s_2 ns_3))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_4)"
"(begin"
"      (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_4)))"
"((current-eval) s_4)))"
"((s_5 ns_6)"
"(begin"
"      (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_5)))"
"      (if (1/namespace? ns_6) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_6)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_6)"
"(let-values()((current-eval) s_5)))))))"
"(define-values(compile$1)(lambda(s_7)((current-compile)(intro s_7) #f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_8)"
"(begin"
"      (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_8)))"
"((current-compile) s_8 #f))))"
"(define-values(1/expand)(lambda(s_9)(expand$1(intro s_9)(1/current-namespace) #t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_10)"
"(begin"
"      (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_10)))"
"(expand$1 s_10(1/current-namespace) #t))))"
"(define-values(1/expand-once)(lambda(s_11)(expand-once$1(intro s_11))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_12)"
"(begin"
"      (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_12)))"
"(expand-once$1 s_12))))"
"(define-values(1/expand-to-top-form)(lambda(s_13)(expand-to-top-form$1(intro s_13))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_14)"
"(begin"
"      (if (syntax?$1 s_14) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_14)))"
"(expand-to-top-form$1 s_14))))"
"(define-values"
"(intro)"
"(let-values(((intro4_15)"
"(lambda(given-s3_16 ns1_17 ns2_18)"
"(let-values(((given-s_19) given-s3_16))"
"(let-values(((ns_20)(if ns2_18 ns1_17(1/current-namespace))))"
"(let-values()"
"(let-values(((s_21)(if(syntax?$1 given-s_19) given-s_19(1/datum->syntax #f given-s_19))))"
"(1/namespace-syntax-introduce s_21 ns_20))))))))"
"(case-lambda((given-s_22)(intro4_15 given-s_22 #f #f))((given-s_23 ns1_24)(intro4_15 given-s_23 ns1_24 #t)))))"
"(void)"
"(void)"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_2)"
"(lambda(mod3_3 load?1_4 load?2_5)"
"(let-values(((mod_6) mod3_3))"
"(let-values(((load?_7)(if load?2_5 load?1_4 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_6)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_6)))"
"(values))))"
"(let-values(((ns_8)(1/current-namespace)))"
"(let-values(((name_9)"
"(let-values(((...space/api-module.rkt:28:15_10)"
" reference->resolved-module-path34.1)"
"((mod35_11) mod_6)"
"((load?36_12) load?_7))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?36_12 mod35_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:28:15_10"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?36_12)"
" mod35_11)))))"
"(if(namespace->module ns_8 name_9) #t #f))))))))))"
"(case-lambda"
"((mod_13)(module-declared?4_2 mod_13 #f #f))"
"((mod_14 load?1_15)(module-declared?4_2 mod_14 load?1_15 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_16)"
"(let-values((()"
"(begin"
"(if(module-reference? mod_16)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_16)))"
"(values))))"
"(let-values(((ns_17)(1/current-namespace)))"
"(let-values(((name_18)"
"(let-values(((...space/api-module.rkt:35:15_20) reference->resolved-module-path34.1)"
"((mod37_21) mod_16)"
"((temp38_22) #f))"
"(if(variable-reference-constant?(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp38_22 mod37_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:35:15_20"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp38_22)"
" mod37_21)))))"
"(let-values(((m_19)(namespace->module ns_17 name_18)))(if m_19(module-primitive? m_19) #f)))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_23)"
"(lambda(extract8_24 who9_25 mod10_26 load?6_27 load?7_28)"
"(let-values(((extract_29) extract8_24))"
"(let-values(((who_30) who9_25))"
"(let-values(((mod_31) mod10_26))"
"(let-values(((load?_32)(if load?7_28 load?6_27 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_31)"
"(void)"
"(let-values()(raise-argument-error who_30 module-reference-str mod_31)))"
"(values))))"
"(let-values(((m_33)"
"(namespace->module/complain"
" who_30"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:44:40_34)"
" reference->resolved-module-path34.1)"
"((mod39_35) mod_31)"
"((load?40_36) load?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?40_36 mod39_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:44:40_34"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?40_36)"
" mod39_35))))))"
"(extract_29 m_33)))))))))))"
"(case-lambda"
"((extract_37 who_38 mod_39)(module->11_23 extract_37 who_38 mod_39 #f #f))"
"((extract_40 who_41 mod_42 load?6_43)(module->11_23 extract_40 who_41 mod_42 load?6_43 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_44)"
"(lambda(mod15_45 load?13_46 load?14_47)"
"(let-values(((mod_48) mod15_45))"
"(let-values(((load?_49)(if load?14_47 load?13_46 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_48 load?_49)))))))"
"(case-lambda"
"((mod_50)(module->language-info16_44 mod_50 #f #f))"
"((mod_51 load?13_52)(module->language-info16_44 mod_51 load?13_52 #t)))))"
"(define-values(1/module->imports)(lambda(mod_53)(module-> module-requires 'module->imports mod_53)))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_54)"
"(let-values(((provides_55 self_56)"
"(module->"
"(lambda(m_57)(values(module-provides m_57)(module-self m_57)))"
" 'module->exports"
" mod_54)))"
"(provides->api-provides provides_55 self_56))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_58)"
"(module->"
"(lambda(m_59)(variables->api-nonprovides(module-provides m_59)((module-get-all-variables m_59))))"
" 'module->indirect-exports"
" mod_58)))"
"(define-values"
"(1/module-provide-protected?)"
"(lambda(mod_60 sym_61)"
"(module->"
"(lambda(m_62)"
"(let-values(((b/p_63)(hash-ref(module-provides m_62) sym_61 #f)))"
"(let-values(((or-part_64)(not b/p_63)))(if or-part_64 or-part_64(provided-as-protected? b/p_63)))))"
" 'module-provide-protected?"
" mod_60)))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_65)"
"(lambda(mod20_66 ns18_67 ns19_68)"
"(let-values(((mod_69) mod20_66))"
"(let-values(((ns_70)(if ns19_68 ns18_67(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_69)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_69)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_70)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'module->namespace \"namespace?\" ns_70)))"
"(values))))"
"(let-values(((name_71)"
"(let-values(((...space/api-module.rkt:74:15_74)"
" reference->resolved-module-path34.1)"
"((mod44_75) mod_69)"
"((temp45_76) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp45_76 mod44_75)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:74:15_74"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp45_76)"
" mod44_75)))))"
"(let-values(((phase_72)(namespace-phase ns_70)))"
"(let-values(((m-ns_73)"
"(let-values(((ns46_77) ns_70)"
"((name47_78) name_71)"
"((phase48_79) phase_72))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_77"
" name47_78"
" phase48_79)"
"(namespace->module-namespace82.1 ns46_77 name47_78 phase48_79)))))"
"(begin"
"(if m-ns_73"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_70 name_71)"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"module not instantiated in the current namespace\""
"                                           \"name\""
" name_71))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_73))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                         \"current code inspector cannot access namespace of module\""
"                                         \"module name\""
" name_71)))"
"(if(namespace-get-root-expand-ctx m-ns_73)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_73"
"(let-values()"
"(if(variable-reference-constant?"
"(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((ns41_80) ns_70)"
"((temp42_81)(namespace-mpi m-ns_73))"
"((phase43_82) phase_72))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-make-available!112.1))"
"(namespace-module-make-available!110.1 #f #f ns41_80 temp42_81 phase43_82)"
"(namespace-module-make-available!112.1 ns41_80 temp42_81 phase43_82)))"
" m-ns_73))))))))))))"
"(case-lambda"
"((mod_83)(module->namespace21_65 mod_83 #f #f))"
"((mod_84 ns18_85)(module->namespace21_65 mod_84 ns18_85 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_86)"
"(lambda(insp25_87 mod26_88 ns23_89 ns24_90)"
"(let-values(((insp_91) insp25_87))"
"(let-values(((mod_92) mod26_88))"
"(let-values(((ns_93)(if ns24_90 ns23_89(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_91)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-unprotect-module \"inspector?\" insp_91)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_92)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"module-path?\""
" mod_92)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_93)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"namespace?\""
" ns_93)))"
"(values))))"
"(let-values(((name_94)"
"(let-values(((...space/api-module.rkt:99:15_97)"
" reference->resolved-module-path34.1)"
"((mod49_98) mod_92)"
"((temp50_99) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp50_99 mod49_98)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:99:15_97"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp50_99)"
" mod49_98)))))"
"(let-values(((phase_95)(namespace-phase ns_93)))"
"(let-values(((m-ns_96)"
"(let-values(((ns51_100) ns_93)"
"((name52_101) name_94)"
"((phase53_102) phase_95))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_100"
" name52_101"
" phase53_102)"
"(namespace->module-namespace82.1"
" ns51_100"
" name52_101"
" phase53_102)))))"
"(begin"
"(if m-ns_96"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                             \"module not instantiated\""
"                                             \"module name\""
" name_94)))"
"(if(inspector-superior? insp_91(namespace-inspector m-ns_96))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_96"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_103 mod_104)(namespace-unprotect-module27_86 insp_103 mod_104 #f #f))"
"((insp_105 mod_106 ns23_107)(namespace-unprotect-module27_86 insp_105 mod_106 ns23_107 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_108 ns_109 name_110)"
"(let-values(((or-part_111)(namespace->module ns_109 name_110)))"
"(if or-part_111"
" or-part_111"
"        (raise-arguments-error who_108 \"unknown module in the current namespace\" \"name\" name_110)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_112)"
"(let-values(((or-part_113)(1/module-path? mod_112)))"
"(if or-part_113"
" or-part_113"
"(let-values(((or-part_114)(1/module-path-index? mod_112)))"
"(if or-part_114 or-part_114(1/resolved-module-path? mod_112)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$5)"
"(make-required"
" 'reference->resolved-module-path"
"(case-lambda((self_115 mod_116)(apply missing-kw self_115 mod_116 null)))"
" #f"
" #f))"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_117 mod31_118)"
"(let-values(((mod_119) mod31_118))"
"(let-values(((load?_120) load?29_117))"
"(let-values()"
"(if(1/resolved-module-path? mod_119)"
"(let-values() mod_119)"
"(let-values()"
"(let-values(((mpi_121)"
"(if(1/module-path-index? mod_119) mod_119(1/module-path-index-join mod_119 #f))))"
"(1/module-path-index-resolve mpi_121 load?_120)))))))))"
"(define-values"
"(unpack33.1)"
"(lambda(given-kws_122 given-args_123 mod31_124)"
"(let-values(((load?29_125)(car given-args_123)))(reference->resolved-module-path32.1 load?29_125 mod31_124))))"
"(define-values"
"(reference->resolved-module-path34.1)"
"(lifted/1.1$5"
"(lambda(given-kws_126 given-argc_127)"
"(if(= given-argc_127 3)"
"(let-values(((l2_128) given-kws_126))"
"(if(pair? l2_128)(if(eq?(car l2_128) '#:load?)(null?(cdr l2_128)) #f) #f))"
" #f))"
"(case-lambda((given-kws_129 given-args_130 mod_131)(unpack33.1 given-kws_129 given-args_130 mod_131)))"
" '(#:load?)"
" '(#:load?)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:missing-module(lambda(e_25)(1/exn:fail:filesystem:missing-module-path e_25))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons 1/prop:missing-module(lambda(e_46)(1/exn:fail:syntax:missing-module-path e_46))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_26 make-_27 ?_28(make-struct-field-accessor -ref_29 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_47)"
"(begin"
"(if(let-values(((or-part_48)(not v_47)))"
"(if or-part_48"
" or-part_48"
"(let-values(((or-part_49)(1/module-path? v_47)))"
"(if or-part_49 or-part_49(if(syntax?$1 v_47)(1/module-path?(syntax->datum$1 v_47)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_47)))"
" v_47))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_50 filename_51 pre_52 rel_53 post_54 errstr_55)"
"(let-values(((path_56)(1/current-module-path-for-load)))"
"(if path_56"
"(let-values()"
"(begin"
"(if(syntax?$1 path_56)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a~a~a~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_56)(srcloc->string(syntax-srcloc path_56)) name_50)"
"(syntax->datum$1 path_56)"
" filename_51"
" pre_52"
" rel_53"
" post_54"
" errstr_55)"
"(current-continuation-marks)"
"(list path_56)"
"(syntax->datum$1 path_56))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_50"
" path_56"
" filename_51"
" pre_52"
" rel_53"
" post_54"
" errstr_55)"
"(current-continuation-marks)"
" path_56))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values(((s_7) s3_2))"
"(let-values(((context_8) context4_3))"
"(let-values(((stop-ids_9) stop-ids5_4))"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 #f)))"
"(let-values()"
"(let-values(((temp63_11) 'local-expand)"
"((s64_12) s_7)"
"((context65_13) context_8)"
"((stop-ids66_14) stop-ids_9)"
"((intdefs67_15) intdefs_10))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp63_11"
" s64_12"
" context65_13"
" stop-ids66_14"
" intdefs67_15"
" #t)"
"(do-local-expand62.1 temp63_11 s64_12 context65_13 stop-ids66_14 intdefs67_15)))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 #f #f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values(((s_31) s12_24))"
"(let-values(((context_32) context13_25))"
"(let-values(((stop-ids_33) stop-ids14_26))"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 #f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:27:2_36) do-local-expand62.1)"
"((temp68_37) 'local-expand)"
"((s69_38) s_31)"
"((context70_39) context_32)"
"((stop-ids71_40) stop-ids_33)"
"((intdefs72_41) intdefs_34)"
"((temp73_42) #t)"
"((lift-key74_43) lift-key_35))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" temp73_42"
" #t"
" lift-key74_43"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:27:2_36"
" keyword-procedure-extract"
" '(#:capture-lifts? #:lift-key)"
" 7)"
" '(#:capture-lifts? #:lift-key)"
"(list temp73_42 lift-key74_43)"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41))))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 #f #f #f #f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 #t #t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values(((s_62) s19_57))"
"(let-values(((context_63) context20_58))"
"(let-values(((stop-ids_64) stop-ids21_59))"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 #f)))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:32:2_66) do-local-expand62.1)"
"((temp75_67) 'local-expand)"
"((s76_68) s_62)"
"((context77_69) context_63)"
"((stop-ids78_70) stop-ids_64)"
"((intdefs79_71) intdefs_65)"
"((temp80_72) #t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" temp80_72"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:32:2_66"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 7)"
" '(#:as-transformer?)"
"(list temp80_72)"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71)))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 #f #f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values(((s_88) s28_81))"
"(let-values(((context_89) context29_82))"
"(let-values(((stop-ids_90) stop-ids30_83))"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 #f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:36:2_93) do-local-expand62.1)"
"((temp81_94) 'local-expand)"
"((s82_95) s_88)"
"((context83_96) context_89)"
"((stop-ids84_97) stop-ids_90)"
"((intdefs85_98) intdefs_91)"
"((temp86_99) #t)"
"((temp87_100) #t)"
"((lift-key88_101) lift-key_92))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" temp86_99"
" #t"
" temp87_100"
" #t"
" lift-key88_101"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:36:2_93"
" keyword-procedure-extract"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
" 7)"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
"(list temp86_99 temp87_100 lift-key88_101)"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98))))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 #f #f #f #f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 #t #t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 #f #t #f)))))"
"(define-values"
"(do-syntax-local-expand-expression39.1)"
"(lambda(local-keys33_114 local-keys35_115 local-values34_116 local-values36_117 who37_118 s38_119)"
"(let-values(((who_120) who37_118))"
"(let-values(((s_121) s38_119))"
"(let-values(((local-keys_122)(if local-keys35_115 local-keys33_114 null)))"
"(let-values(((local-values_123)(if local-values36_117 local-values34_116 null)))"
"(let-values()"
"(let-values(((exp-s_124)"
"(let-values(((...and/local-expand.rkt:44:16_127) do-local-expand62.1)"
"((who89_128) who_120)"
"((s90_129) s_121)"
"((temp91_130) 'expression)"
"((null92_131) null)"
"((temp93_132) #f)"
"((temp94_133) #t)"
"((local-keys95_134) local-keys_122)"
"((local-values96_135) local-values_123))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" local-keys95_134"
" #t"
" local-values96_135"
" #t"
" temp94_133"
" #t"
" who89_128"
" s90_129"
" temp91_130"
" null92_131"
" temp93_132"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:44:16_127"
" keyword-procedure-extract"
" '(#:local-keys #:local-values #:skip-log-exit?)"
" 7)"
" '(#:local-keys #:local-values #:skip-log-exit?)"
"(list local-keys95_134 local-values96_135 temp94_133)"
" who89_128"
" s90_129"
" temp91_130"
" null92_131"
" temp93_132)))))"
"(let-values(((ctx_125)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f #f #f)"
"(get-current-expand-context8.1)))))"
"(let-values(((ae_126)"
"(already-expanded1.1"
"(flip-introduction-scopes exp-s_124 ctx_125)"
"(expand-context-binding-layer"
"(let-values(((temp97_136) 'syntax-local-expand-expression))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp97_136 #t)"
"(get-current-expand-context8.1 temp97_136)))))))"
"(begin"
"(let-values(((obs_137)(expand-context-observer ctx_125)))"
"(if obs_137"
"(let-values()(let-values()(call-expand-observe obs_137 'opaque-expr ae_126)))"
"(void)))"
"(let-values(((obs_138)(expand-context-observer ctx_125)))"
"(if obs_138"
"(let-values()(let-values()(call-expand-observe obs_138 'exit-local exp-s_124)))"
"(void)))"
"(values exp-s_124(flip-introduction-scopes(datum->syntax$1 #f ae_126) ctx_125)))))))))))))"
"(define-values"
"(unpack40.1$1)"
"(lambda(given-kws_139 given-args_140 who37_141 s38_142)"
"(let-values(((local-keys35_143)(if(pair? given-kws_139)(eq? '#:local-keys(car given-kws_139)) #f)))"
"(let-values(((local-keys33_144)(if local-keys35_143(car given-args_140)(void)))"
"((given-kws_145)(if local-keys35_143(cdr given-kws_139) given-kws_139))"
"((given-args_146)(if local-keys35_143(cdr given-args_140) given-args_140)))"
"(let-values(((local-values36_147)(pair? given-kws_145)))"
"(let-values(((local-values34_148)(if local-values36_147(car given-args_146)(void))))"
"(do-syntax-local-expand-expression39.1"
" local-keys33_144"
" local-keys35_143"
" local-values34_148"
" local-values36_147"
" who37_141"
" s38_142)))))))"
"(define-values"
"(do-syntax-local-expand-expression41.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_149 given-argc_150)"
"(if(= given-argc_150 4)"
"(let-values(((l1_151) given-kws_149))"
"(let-values(((l1_152)(if(null? l1_151) l1_151(if(eq?(car l1_151) '#:local-keys)(cdr l1_151) l1_151))))"
"(let-values(((l1_153) l1_152))"
"(let-values(((l1_154)"
"(if(null? l1_153) l1_153(if(eq?(car l1_153) '#:local-values)(cdr l1_153) l1_153))))"
"(null? l1_154)))))"
" #f))"
"(case-lambda"
"((given-kws_155 given-args_156 who_157 s_158)(unpack40.1$1 given-kws_155 given-args_156 who_157 s_158)))"
" null"
" '(#:local-keys #:local-values)"
"(let-values(((do-syntax-local-expand-expression_159)"
"(case-lambda((who_160 s_161)(unpack40.1$1 null null who_160 s_161)))))"
" do-syntax-local-expand-expression_159)))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_162)"
"(let-values(((temp98_163) 'syntax-local-expand-expression)((s99_164) s_162))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-expand-expression41.1))"
"(do-syntax-local-expand-expression39.1 #f #f #f #f temp98_163 s99_164)"
"(do-syntax-local-expand-expression41.1 temp98_163 s99_164)))))"
"(define-values"
"(1/syntax-local-expand-expression/extend-environment)"
"(lambda(s_165 keys_166 values_167)"
"(let-values(((...and/local-expand.rkt:65:2_168) do-syntax-local-expand-expression41.1)"
"((temp100_169) 'syntax-local-expand-expression/extend-environment)"
"((s101_170) s_165)"
"((keys102_171) keys_166)"
"((values103_172) values_167))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-expand-expression41.1))"
"(do-syntax-local-expand-expression39.1 keys102_171 #t values103_172 #t temp100_169 s101_170)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:65:2_168"
" keyword-procedure-extract"
" '(#:local-keys #:local-values)"
" 4)"
" '(#:local-keys #:local-values)"
"(list keys102_171 values103_172)"
" temp100_169"
" s101_170)))))"
"(define-values"
"(do-local-expand60.1)"
"(lambda(as-transformer?43_173"
" as-transformer?49_174"
" capture-lifts?42_175"
" capture-lifts?48_176"
" lift-key44_177"
" lift-key50_178"
" local-keys46_179"
" local-keys52_180"
" local-values47_181"
" local-values53_182"
" skip-log-exit?45_183"
" skip-log-exit?51_184"
" who56_185"
" s57_186"
" context58_187"
" stop-ids59_188"
" intdefs54_189"
" intdefs55_190)"
"(let-values(((who_191) who56_185))"
"(let-values(((s_192) s57_186))"
"(let-values(((context_193) context58_187))"
"(let-values(((stop-ids_194) stop-ids59_188))"
"(let-values(((intdefs_195)(if intdefs55_190 intdefs54_189 #f)))"
"(let-values(((capture-lifts?_196)(if capture-lifts?48_176 capture-lifts?42_175 #f)))"
"(let-values(((as-transformer?_197)(if as-transformer?49_174 as-transformer?43_173 #f)))"
"(let-values(((lift-key_198)"
"(if lift-key50_178"
" lift-key44_177"
"(if(let-values(((or-part_199) capture-lifts?_196))"
"(if or-part_199 or-part_199 as-transformer?_197))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_200)(if skip-log-exit?51_184 skip-log-exit?45_183 #f)))"
"(let-values(((local-keys_201)(if local-keys52_180 local-keys46_179 null)))"
"(let-values(((local-values_202)(if local-values53_182 local-values47_181 null)))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_192)"
"(void)"
"                                                (let-values () (raise-argument-error who_191 \"syntax?\" s_192)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_210)(list? context_193)))"
"(if or-part_210"
" or-part_210"
"(memq"
" context_193"
"(if as-transformer?_197"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"(if as-transformer?_197"
"                                                       \"(or/c 'expression 'top-level list?)\""
"                                                       \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_193)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_211)(not stop-ids_194)))"
"(if or-part_211"
" or-part_211"
"(if(list? stop-ids_194)"
"(andmap2 identifier? stop-ids_194)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"                                                       \"(or/c (listof identifier?) #f)\""
" stop-ids_194)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_212)(not intdefs_195)))"
"(if or-part_212"
" or-part_212"
"(let-values(((or-part_213)"
"(1/internal-definition-context? intdefs_195)))"
"(if or-part_213"
" or-part_213"
"(if(list? intdefs_195)"
"(andmap2 1/internal-definition-context? intdefs_195)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"                                                         \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_195)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-keys_201)"
"(void)"
"(let-values()"
"                                                          (raise-argument-error who_191 \"list?\" local-keys_201)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-values_202)"
"(void)"
"(let-values()"
"                                                            (raise-argument-error who_191 \"list?\" local-values_202)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(=(length local-keys_201)(length local-values_202))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_191"
"                                                               \"different lengths for list of keys and values for extending the environment\""
"                                                               \"keys\""
" local-keys_201"
"                                                               \"values\""
" local-values_202)))"
"(values))))"
"(let-values(((ctx_203)"
"(let-values(((who104_214) who_191))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who104_214 #t)"
"(get-current-expand-context8.1 who104_214)))))"
"(let-values(((phase_204)"
"(if as-transformer?_197"
"(add1(expand-context-phase ctx_203))"
"(expand-context-phase ctx_203))))"
"(let-values(((base-local-ctx_205)"
"(let-values(((...and/local-expand.rkt:119:26_215)"
" make-local-expand-context35.1)"
"((ctx105_216) ctx_203)"
"((context106_217) context_193)"
"((phase107_218) phase_204)"
"((intdefs108_219) intdefs_195)"
"((stop-ids109_220) stop-ids_194))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" context106_217"
" intdefs108_219"
" phase107_218"
" #t"
" stop-ids109_220"
" #t"
" ctx105_216)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:119:26_215"
" keyword-procedure-extract"
" '(#:context #:intdefs #:phase #:stop-ids)"
" 3)"
" '(#:context #:intdefs #:phase #:stop-ids)"
"(list"
" context106_217"
" intdefs108_219"
" phase107_218"
" stop-ids109_220)"
" ctx105_216)))))"
"(let-values(((local-ctx_206)"
"(let-values(((the-struct_221) base-local-ctx_205))"
"(if(expand-context? the-struct_221)"
"(let-values(((user-env110_222)"
"(let-values(((lst_223)"
" local-keys_201)"
"((lst_224)"
" local-values_202))"
"(begin"
"(if(list? lst_223)"
"(void)"
"(let-values()"
"(in-list lst_223)))"
"(if(list? lst_224)"
"(void)"
"(let-values()"
"(in-list lst_224)))"
"((letrec-values(((for-loop_225)"
"(lambda(user-env_226"
" lst_227"
" lst_228)"
"(if(if(pair?"
" lst_227)"
"(pair?"
" lst_228)"
" #f)"
"(let-values(((key_229)"
"(unsafe-car"
" lst_227))"
"((value_230)"
"(unsafe-car"
" lst_228)))"
"(let-values(((user-env_231)"
"(let-values(((user-env_232)"
" user-env_226))"
"(let-values(((user-env_233)"
"(let-values()"
"(hash-set"
" user-env_232"
" key_229"
" value_230))))"
"(values"
" user-env_233)))))"
"(for-loop_225"
" user-env_231"
"(unsafe-cdr"
" lst_227)"
"(unsafe-cdr"
" lst_228))))"
" user-env_226))))"
" for-loop_225)"
"(expand-context-user-env"
" base-local-ctx_205)"
" lst_223"
" lst_224)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_221)"
"(root-expand-context-post-expansion-scope"
" the-struct_221)"
"(root-expand-context-top-level-bind-scope"
" the-struct_221)"
"(root-expand-context-all-scopes-stx"
" the-struct_221)"
"(root-expand-context-use-site-scopes"
" the-struct_221)"
"(root-expand-context-defined-syms the-struct_221)"
"(root-expand-context-frame-id the-struct_221)"
"(root-expand-context-counter the-struct_221)"
"(root-expand-context-lift-key the-struct_221)"
"(expand-context-context the-struct_221)"
"(expand-context-phase the-struct_221)"
"(expand-context-namespace the-struct_221)"
"(expand-context-env the-struct_221)"
" user-env110_222"
"(expand-context-post-expansion-scope-action"
" the-struct_221)"
"(expand-context-scopes the-struct_221)"
"(expand-context-def-ctx-scopes the-struct_221)"
"(expand-context-binding-layer the-struct_221)"
"(expand-context-reference-records the-struct_221)"
"(expand-context-only-immediate? the-struct_221)"
"(expand-context-just-once? the-struct_221)"
"(expand-context-module-begin-k the-struct_221)"
"(expand-context-need-eventually-defined"
" the-struct_221)"
"(expand-context-allow-unbound? the-struct_221)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_221)"
"(expand-context-stops the-struct_221)"
"(expand-context-current-introduction-scopes"
" the-struct_221)"
"(expand-context-declared-submodule-names"
" the-struct_221)"
"(expand-context-lifts the-struct_221)"
"(expand-context-lift-envs the-struct_221)"
"(expand-context-module-lifts the-struct_221)"
"(expand-context-require-lifts the-struct_221)"
"(expand-context-to-module-lifts the-struct_221)"
"(expand-context-requires+provides the-struct_221)"
"(expand-context-name the-struct_221)"
"(expand-context-observer the-struct_221)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context?\""
" the-struct_221)))))"
"(let-values(((input-s_207)"
"(let-values(((temp111_234)"
"(flip-introduction-scopes"
" s_192"
" ctx_203))"
"((intdefs112_235) intdefs_195))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" #f"
" #f"
" temp111_234"
" intdefs112_235)"
"(add-intdef-scopes23.1"
" temp111_234"
" intdefs112_235)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_236)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_236"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_236"
" 'enter-local)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_197"
"(let-values()"
"(let-values(((obs_237)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_237"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_237"
" 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_238)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_238"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_238"
" 'local-pre"
" input-s_207)"
"(call-expand-observe"
" obs_238"
" 'start-expand))))"
"(void)))"
"(values))))"
"(let-values(((output-s_208)"
"(if(if as-transformer?_197"
" capture-lifts?_196"
" #f)"
"(let-values()"
"(let-values(((...and/local-expand.rkt:137:22_239)"
" expand-transformer45.1)"
"((input-s113_240)"
" input-s_207)"
"((local-ctx114_241)"
" local-ctx_206)"
"((context115_242)"
" context_193)"
"((temp116_243) #f)"
"((temp117_244) #t)"
"((lift-key118_245)"
" lift-key_198)"
"((temp119_246) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-transformer45.1))"
"(expand-transformer43.1"
" temp119_246"
" #t"
" temp117_244"
" #t"
" context115_242"
" #t"
" temp116_243"
" #t"
" lift-key118_245"
" #t"
" input-s113_240"
" local-ctx114_241)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:137:22_239"
" keyword-procedure-extract"
" '(#:always-wrap?"
" #:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
" 4)"
" '(#:always-wrap?"
" #:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
"(list"
" temp119_246"
" temp117_244"
" context115_242"
" temp116_243"
" lift-key118_245)"
" input-s113_240"
" local-ctx114_241))))"
"(if as-transformer?_197"
"(let-values()"
"(let-values(((...and/local-expand.rkt:144:22_247)"
" expand-transformer45.1)"
"((input-s120_248)"
" input-s_207)"
"((local-ctx121_249)"
" local-ctx_206)"
"((context122_250)"
" context_193)"
"((temp123_251) #f)"
"((temp124_252)"
"(eq?"
" 'top-level"
" context_193))"
"((lift-key125_253)"
" lift-key_198))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-transformer45.1))"
"(expand-transformer43.1"
" #f"
" #f"
" temp124_252"
" #t"
" context122_250"
" #t"
" temp123_251"
" #t"
" lift-key125_253"
" #t"
" input-s120_248"
" local-ctx121_249)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:144:22_247"
" keyword-procedure-extract"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
" 4)"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
"(list"
" temp124_252"
" context122_250"
" temp123_251"
" lift-key125_253)"
" input-s120_248"
" local-ctx121_249))))"
"(if capture-lifts?_196"
"(let-values()"
"(let-values(((...and/local-expand.rkt:150:22_254)"
" expand/capture-lifts30.1)"
"((input-s126_255)"
" input-s_207)"
"((local-ctx127_256)"
" local-ctx_206)"
"((temp128_257) #t)"
"((lift-key129_258)"
" lift-key_198)"
"((temp130_259) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand/capture-lifts30.1))"
"(expand/capture-lifts28.1"
" temp130_259"
" #t"
" temp128_257"
" #t"
" #f"
" #f"
" lift-key129_258"
" #t"
" input-s126_255"
" local-ctx127_256)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:150:22_254"
" keyword-procedure-extract"
" '(#:always-wrap?"
" #:begin-form?"
" #:lift-key)"
" 4)"
" '(#:always-wrap?"
" #:begin-form?"
" #:lift-key)"
"(list"
" temp130_259"
" temp128_257"
" lift-key129_258)"
" input-s126_255"
" local-ctx127_256))))"
"(let-values()"
"(let-values(((input-s131_260)"
" input-s_207)"
"((local-ctx132_261)"
" local-ctx_206))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" input-s131_260"
" local-ctx132_261)"
"(expand7.1"
" input-s131_260"
" local-ctx132_261)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_262)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_262"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_262"
" 'local-post"
" output-s_208)))"
"(void)))"
"(values))))"
"(let-values(((result-s_209)"
"(flip-introduction-scopes"
" output-s_208"
" ctx_203)))"
"(begin"
"(if skip-log-exit?_200"
"(void)"
"(let-values()"
"(let-values(((obs_263)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_263"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_263"
" 'exit-local"
" result-s_209)))"
"(void)))))"
" result-s_209))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack61.1)"
"(lambda(given-kws_264 given-args_265 who56_266 s57_267 context58_268 stop-ids59_269 intdefs54_270 intdefs55_271)"
"(let-values(((as-transformer?49_272)(if(pair? given-kws_264)(eq? '#:as-transformer?(car given-kws_264)) #f)))"
"(let-values(((as-transformer?43_273)(if as-transformer?49_272(car given-args_265)(void)))"
"((given-kws_274)(if as-transformer?49_272(cdr given-kws_264) given-kws_264))"
"((given-args_275)(if as-transformer?49_272(cdr given-args_265) given-args_265)))"
"(let-values(((capture-lifts?48_276)(if(pair? given-kws_274)(eq? '#:capture-lifts?(car given-kws_274)) #f)))"
"(let-values(((capture-lifts?42_277)(if capture-lifts?48_276(car given-args_275)(void)))"
"((given-kws_278)(if capture-lifts?48_276(cdr given-kws_274) given-kws_274))"
"((given-args_279)(if capture-lifts?48_276(cdr given-args_275) given-args_275)))"
"(let-values(((lift-key50_280)(if(pair? given-kws_278)(eq? '#:lift-key(car given-kws_278)) #f)))"
"(let-values(((lift-key44_281)(if lift-key50_280(car given-args_279)(void)))"
"((given-kws_282)(if lift-key50_280(cdr given-kws_278) given-kws_278))"
"((given-args_283)(if lift-key50_280(cdr given-args_279) given-args_279)))"
"(let-values(((local-keys52_284)(if(pair? given-kws_282)(eq? '#:local-keys(car given-kws_282)) #f)))"
"(let-values(((local-keys46_285)(if local-keys52_284(car given-args_283)(void)))"
"((given-kws_286)(if local-keys52_284(cdr given-kws_282) given-kws_282))"
"((given-args_287)(if local-keys52_284(cdr given-args_283) given-args_283)))"
"(let-values(((local-values53_288)"
"(if(pair? given-kws_286)(eq? '#:local-values(car given-kws_286)) #f)))"
"(let-values(((local-values47_289)(if local-values53_288(car given-args_287)(void)))"
"((given-kws_290)(if local-values53_288(cdr given-kws_286) given-kws_286))"
"((given-args_291)(if local-values53_288(cdr given-args_287) given-args_287)))"
"(let-values(((skip-log-exit?51_292)(pair? given-kws_290)))"
"(let-values(((skip-log-exit?45_293)(if skip-log-exit?51_292(car given-args_291)(void))))"
"(do-local-expand60.1"
" as-transformer?43_273"
" as-transformer?49_272"
" capture-lifts?42_277"
" capture-lifts?48_276"
" lift-key44_281"
" lift-key50_280"
" local-keys46_285"
" local-keys52_284"
" local-values47_289"
" local-values53_288"
" skip-log-exit?45_293"
" skip-log-exit?51_292"
" who56_266"
" s57_267"
" context58_268"
" stop-ids59_269"
" intdefs54_270"
" intdefs55_271)))))))))))))))"
"(define-values"
"(do-local-expand62.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_294 given-argc_295)"
"(if(if(>= given-argc_295 6)(<= given-argc_295 7) #f)"
"(let-values(((l1_296) given-kws_294))"
"(let-values(((l1_297)"
"(if(null? l1_296) l1_296(if(eq?(car l1_296) '#:as-transformer?)(cdr l1_296) l1_296))))"
"(let-values(((l1_298) l1_297))"
"(let-values(((l1_299)"
"(if(null? l1_298) l1_298(if(eq?(car l1_298) '#:capture-lifts?)(cdr l1_298) l1_298))))"
"(let-values(((l1_300) l1_299))"
"(let-values(((l1_301)"
"(if(null? l1_300) l1_300(if(eq?(car l1_300) '#:lift-key)(cdr l1_300) l1_300))))"
"(let-values(((l1_302) l1_301))"
"(let-values(((l1_303)"
"(if(null? l1_302)"
" l1_302"
"(if(eq?(car l1_302) '#:local-keys)(cdr l1_302) l1_302))))"
"(let-values(((l1_304) l1_303))"
"(let-values(((l1_305)"
"(if(null? l1_304)"
" l1_304"
"(if(eq?(car l1_304) '#:local-values)(cdr l1_304) l1_304))))"
"(let-values(((l1_306) l1_305))"
"(let-values(((l1_307)"
"(if(null? l1_306)"
" l1_306"
"(if(eq?(car l1_306) '#:skip-log-exit?)(cdr l1_306) l1_306))))"
"(null? l1_307)))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_308 given-args_309 who_310 s_311 context_312 stop-ids_313)"
"(unpack61.1 given-kws_308 given-args_309 who_310 s_311 context_312 stop-ids_313 #f #f))"
"((given-kws_314 given-args_315 who_316 s_317 context_318 stop-ids_319 intdefs54_320)"
"(unpack61.1 given-kws_314 given-args_315 who_316 s_317 context_318 stop-ids_319 intdefs54_320 #t)))"
" null"
" '(#:as-transformer? #:capture-lifts? #:lift-key #:local-keys #:local-values #:skip-log-exit?)"
"(let-values(((do-local-expand_321)"
"(case-lambda"
"((who_322 s_323 context_324 stop-ids_325)"
"(unpack61.1 null null who_322 s_323 context_324 stop-ids_325 #f #f))"
"((who_326 s_327 context_328 stop-ids_329 intdefs54_330)"
"(unpack61.1 null null who_326 s_327 context_328 stop-ids_329 intdefs54_330 #t)))))"
" do-local-expand_321)))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 #f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 #f #f #f #f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 #t #t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values(((s_29) s10_25))"
"(let-values(((from-s_30) from-s11_26))"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 #f #f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
"      (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values(((or-part_40) maybe-insp_39))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(void)"
"(void)"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f temp1_2 #t)"
"(new-namespace11.1 temp1_2))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) #f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((ns_9)(1/variable-reference->namespace vr_8)))(namespace-source-name ns_9)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(void)"
"(void)"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'syntax-local-expand-expression/extend-environment"
" 'syntax-local-environment-ref"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e 1/syntax-e)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source 1/syntax-source)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column 1/syntax-column)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position 1/syntax-position)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module 1/prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'syntax-local-expand-expression/extend-environment"
" 1/syntax-local-expand-expression/extend-environment))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-environment-ref 1/syntax-local-environment-ref))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry 1/namespace-module-registry))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$3)"
"(make-required 'declare-kernel-module!(case-lambda((self_5 ns_6)(apply missing-kw self_5 ns_6 null))) #f #f))"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_7 main-ids2_8 ns5_9)"
"(let-values(((ns_10) ns5_9))"
"(let-values(((eval_11) eval1_7))"
"(let-values(((main-ids_12) main-ids2_8))"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_13) copy-runtime-module!26.1)"
"((temp51_14) '#%kernel)"
"((temp52_15) '#%runtime)"
"((temp53_16)(set-union primitive-ids main-ids_12))"
"((temp54_17)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"((ns55_18) ns_10))"
"(if(variable-reference-constant?(#%variable-reference copy-runtime-module!26.1))"
"(copy-runtime-module!24.1 #f #f temp54_17 #t ns55_18 #f #f #f #f temp53_16 #t temp52_15 #t temp51_14)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:23:2_13"
" keyword-procedure-extract"
" '(#:extras #:namespace #:skip #:to)"
" 3)"
" '(#:extras #:namespace #:skip #:to)"
"(list temp54_17 ns55_18 temp53_16 temp52_15)"
" temp51_14)))"
"(let-values(((...nder/boot/kernel.rkt:30:2_19) declare-reexporting-module!50.1)"
"((temp56_20) '#%kernel)"
"((temp57_21) '(#%core #%runtime #%main))"
"((ns58_22) ns_10))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns58_22 #f #f temp56_20 temp57_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:30:2_19"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns58_22)"
" temp56_20"
" temp57_21))))))))))"
"(define-values"
"(unpack7.1)"
"(lambda(given-kws_23 given-args_24 ns5_25)"
"(let-values(((eval1_26)(car given-args_24))"
"((given-kws_27)(cdr given-kws_23))"
"((given-args_28)(cdr given-args_24)))"
"(let-values(((main-ids2_29)(car given-args_28)))(declare-kernel-module!6.1 eval1_26 main-ids2_29 ns5_25)))))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lifted/1.1$3"
"(lambda(given-kws_30 given-argc_31)"
"(if(= given-argc_31 3)"
"(let-values(((l2_32) given-kws_30))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:eval)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)(if(eq?(car l2_33) '#:main-ids)(null?(cdr l2_33)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_34 given-args_35 ns_36)(unpack7.1 given-kws_34 given-args_35 ns_36)))"
" '(#:eval #:main-ids)"
" '(#:eval #:main-ids)))"
"(define-values"
"(lifted/2.1$3)"
"(make-required 'copy-runtime-module!(case-lambda((self_37 name_38)(apply missing-kw self_37 name_38 null))) #f #f))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lambda(alts12_39"
" alts19_40"
" extras13_41"
" extras20_42"
" namespace10_43"
" primitive?14_44"
" primitive?21_45"
" protected?15_46"
" protected?22_47"
" skip11_48"
" skip18_49"
" to9_50"
" to16_51"
" name23_52)"
"(let-values(((name_53) name23_52))"
"(let-values(((to-name_54)(if to16_51 to9_50 name_53)))"
"(let-values(((ns_55) namespace10_43))"
"(let-values(((skip-syms_56)(if skip18_49 skip11_48(seteq))))"
"(let-values(((alts_57)(if alts19_40 alts12_39 '#hasheq())))"
"(let-values(((extras_58)(if extras20_42 extras13_41 '#hasheq())))"
"(let-values(((primitive?_59)(if primitive?21_45 primitive?14_44 #t)))"
"(let-values(((protected?_60)(if protected?22_47 protected?15_46 #f)))"
"(let-values()"
"(let-values(((mod-name_61)(list 'quote name_53)))"
"(let-values(((prims_62)(1/primitive-table name_53)))"
"(let-values((()"
"(begin"
"(let-values(((ht_65) prims_62))"
"(begin"
"(if((lambda(ht_66)(hash? ht_66)) ht_65)"
"(void)"
"(let-values()(default-in-hash-keys ht_65)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68 i_69)"
"(if i_69"
"(let-values(((sym_70)"
"(hash-iterate-key ht_65 i_69)))"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_68))"
"(let-values(((fold-var_73)"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_70))"
"(void)))))"
"(values fold-var_73)))))"
"(for-loop_67"
" fold-var_71"
"(hash-iterate-next ht_65 i_69))))"
" fold-var_68))))"
" for-loop_67)"
"(void)"
"(hash-iterate-first ht_65))))"
"(values))))"
"(let-values(((ht_63)"
"(let-values(((ht_74) prims_62))"
"(begin"
"(if((lambda(ht_75)(hash? ht_75)) ht_74)"
"(void)"
"(let-values()(default-in-hash ht_74)))"
"((letrec-values(((for-loop_76)"
"(lambda(table_77 i_78)"
"(if i_78"
"(let-values(((sym_79 val_80)"
"(hash-iterate-key+value ht_74 i_78)))"
"(let-values(((table_81)"
"(let-values(((table_82) table_77))"
"(if(set-member?"
" skip-syms_56"
" sym_79)"
" table_82"
"(let-values(((table_83)"
" table_82))"
"(let-values(((table_84)"
"(let-values()"
"(let-values(((key_85"
" val_86)"
"(let-values()"
"(values"
" sym_79"
"(let-values(((or-part_87)"
"(hash-ref"
" alts_57"
" sym_79"
" #f)))"
"(if or-part_87"
" or-part_87"
" val_80))))))"
"(hash-set"
" table_83"
" key_85"
" val_86)))))"
"(values table_84)))))))"
"(for-loop_76"
" table_81"
"(hash-iterate-next ht_74 i_78))))"
" table_77))))"
" for-loop_76)"
" '#hasheq()"
"(hash-iterate-first ht_74))))))"
"(let-values(((ht+extras_64)"
"(let-values(((ht_88) extras_58))"
"(begin"
"(if((lambda(ht_89)(hash? ht_89)) ht_88)"
"(void)"
"(let-values()(default-in-hash ht_88)))"
"((letrec-values(((for-loop_90)"
"(lambda(ht_91 i_92)"
"(if i_92"
"(let-values(((k_93 v_94)"
"(hash-iterate-key+value"
" ht_88"
" i_92)))"
"(let-values(((ht_95)"
"(let-values(((ht_96) ht_91))"
"(let-values(((ht_97)"
"(let-values()"
"(hash-set"
" ht_96"
" k_93"
" v_94))))"
"(values ht_97)))))"
"(for-loop_90"
" ht_95"
"(hash-iterate-next ht_88 i_92))))"
" ht_91))))"
" for-loop_90)"
" ht_63"
"(hash-iterate-first ht_88))))))"
"(let-values(((...nder/boot/kernel.rkt:51:2_98) declare-hash-based-module!41.1)"
"((to-name59_99) to-name_54)"
"((ht+extras60_100) ht+extras_64)"
"((ns61_101) ns_55)"
"((primitive?62_102) primitive?_59)"
"((protected?63_103) protected?_60))"
"(if(variable-reference-constant?"
"(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns61_101"
" primitive?62_102"
" #t"
" #f"
" #f"
" protected?63_103"
" #t"
" #f"
" #f"
" to-name59_99"
" ht+extras60_100)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:51:2_98"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:protected?)"
" 4)"
" '(#:namespace #:primitive? #:protected?)"
"(list ns61_101 primitive?62_102 protected?63_103)"
" to-name59_99"
" ht+extras60_100)))))))))))))))))))"
"(define-values"
"(unpack25.1)"
"(lambda(given-kws_104 given-args_105 name23_106)"
"(let-values(((alts19_107)(if(pair? given-kws_104)(eq? '#:alts(car given-kws_104)) #f)))"
"(let-values(((alts12_108)(if alts19_107(car given-args_105)(void)))"
"((given-kws_109)(if alts19_107(cdr given-kws_104) given-kws_104))"
"((given-args_110)(if alts19_107(cdr given-args_105) given-args_105)))"
"(let-values(((extras20_111)(if(pair? given-kws_109)(eq? '#:extras(car given-kws_109)) #f)))"
"(let-values(((extras13_112)(if extras20_111(car given-args_110)(void)))"
"((given-kws_113)(if extras20_111(cdr given-kws_109) given-kws_109))"
"((given-args_114)(if extras20_111(cdr given-args_110) given-args_110)))"
"(let-values(((namespace10_115)(car given-args_114))"
"((given-kws_116)(cdr given-kws_113))"
"((given-args_117)(cdr given-args_114)))"
"(let-values(((primitive?21_118)(if(pair? given-kws_116)(eq? '#:primitive?(car given-kws_116)) #f)))"
"(let-values(((primitive?14_119)(if primitive?21_118(car given-args_117)(void)))"
"((given-kws_120)(if primitive?21_118(cdr given-kws_116) given-kws_116))"
"((given-args_121)(if primitive?21_118(cdr given-args_117) given-args_117)))"
"(let-values(((protected?22_122)"
"(if(pair? given-kws_120)(eq? '#:protected?(car given-kws_120)) #f)))"
"(let-values(((protected?15_123)(if protected?22_122(car given-args_121)(void)))"
"((given-kws_124)(if protected?22_122(cdr given-kws_120) given-kws_120))"
"((given-args_125)(if protected?22_122(cdr given-args_121) given-args_121)))"
"(let-values(((skip18_126)(if(pair? given-kws_124)(eq? '#:skip(car given-kws_124)) #f)))"
"(let-values(((skip11_127)(if skip18_126(car given-args_125)(void)))"
"((given-kws_128)(if skip18_126(cdr given-kws_124) given-kws_124))"
"((given-args_129)(if skip18_126(cdr given-args_125) given-args_125)))"
"(let-values(((to16_130)(pair? given-kws_128)))"
"(let-values(((to9_131)(if to16_130(car given-args_129)(void))))"
"(copy-runtime-module!24.1"
" alts12_108"
" alts19_107"
" extras13_112"
" extras20_111"
" namespace10_115"
" primitive?14_119"
" primitive?21_118"
" protected?15_123"
" protected?22_122"
" skip11_127"
" skip18_126"
" to9_131"
" to16_130"
" name23_106))))))))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lifted/2.1$3"
"(lambda(given-kws_132 given-argc_133)"
"(if(= given-argc_133 3)"
"(subsets? '(#:namespace) given-kws_132 '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to))"
" #f))"
"(case-lambda((given-kws_134 given-args_135 name_136)(unpack25.1 given-kws_134 given-args_135 name_136)))"
" '(#:namespace)"
" '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/3.1$2)"
"(make-required"
" 'declare-hash-based-module!"
"(case-lambda((self_137 name_138 ht_139)(apply missing-kw self_137 name_138 ht_139 null)))"
" #f"
" #f))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lambda(namespace27_140"
" primitive?28_141"
" primitive?33_142"
" protected30_143"
" protected35_144"
" protected?29_145"
" protected?34_146"
" register-builtin?31_147"
" register-builtin?36_148"
" name37_149"
" ht38_150)"
"(let-values(((name_151) name37_149))"
"(let-values(((ht_152) ht38_150))"
"(let-values(((ns_153) namespace27_140))"
"(let-values(((primitive?_154)(if primitive?33_142 primitive?28_141 #f)))"
"(let-values(((protected?_155)(if protected?34_146 protected?29_145 #f)))"
"(let-values(((protected-syms_156)(if protected35_144 protected30_143 null)))"
"(let-values(((register-builtin?_157)(if register-builtin?36_148 register-builtin?31_147 #f)))"
"(let-values()"
"(let-values(((mpi_158)(1/module-path-index-join(list 'quote name_151) #f)))"
"(let-values(((ns64_159) ns_153)"
"((temp65_160)"
"(let-values(((...nder/boot/kernel.rkt:65:3_162) make-module39.1)"
"((temp67_163) #t)"
"((primitive?68_164) primitive?_154)"
"((temp69_165) #t)"
"((temp70_166)(not protected?_155))"
"((mpi71_167) mpi_158)"
"((temp72_168)"
"(hasheqv"
" 0"
"(let-values(((ht_170) ht_152))"
"(begin"
"(if((lambda(ht_171)(hash? ht_171)) ht_170)"
"(void)"
"(let-values()(default-in-hash-keys ht_170)))"
"((letrec-values(((for-loop_172)"
"(lambda(table_173 i_174)"
"(if i_174"
"(let-values(((sym_175)"
"(hash-iterate-key"
" ht_170"
" i_174)))"
"(let-values(((table_176)"
"(let-values(((table_177)"
" table_173))"
"(let-values(((table_178)"
"(let-values()"
"(let-values(((key_179"
" val_180)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_157"
"(let-values()"
"(register-built-in-symbol!"
" sym_175))"
"(void))"
"(values))))"
"(let-values(((binding_181)"
"(let-values(((mpi74_182)"
" mpi_158)"
"((temp75_183)"
" 0)"
"((sym76_184)"
" sym_175))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi74_182"
" temp75_183"
" sym76_184)"
"(make-module-binding24.1"
" mpi74_182"
" temp75_183"
" sym76_184)))))"
"(values"
" sym_175"
"(if(let-values(((or-part_185)"
" protected?_155))"
"(if or-part_185"
" or-part_185"
"(member"
" sym_175"
" protected-syms_156)))"
"(provided1.1"
" binding_181"
" #t"
" #f)"
" binding_181)))))))"
"(hash-set"
" table_177"
" key_179"
" val_180)))))"
"(values table_178)))))"
"(for-loop_172"
" table_176"
"(hash-iterate-next ht_170 i_174))))"
" table_173))))"
" for-loop_172)"
" '#hash()"
"(hash-iterate-first ht_170))))))"
"((temp73_169)"
"(lambda(data-box_186"
" ns_187"
" phase-shift_188"
" phase-level_189"
" self_190"
" bulk-binding-registry_191"
" insp_192)"
"(if(= 0 phase-level_189)"
"(let-values()"
"(let-values(((ht_193) ht_152))"
"(begin"
"(if((lambda(ht_194)(hash? ht_194)) ht_193)"
"(void)"
"(let-values()(default-in-hash ht_193)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_196 i_197)"
"(if i_197"
"(let-values(((sym_198 val_199)"
"(hash-iterate-key+value"
" ht_193"
" i_197)))"
"(let-values(((fold-var_200)"
"(let-values(((fold-var_201)"
" fold-var_196))"
"(let-values(((fold-var_202)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_187"
" 0"
" sym_198"
" val_199))"
"(void)))))"
"(values"
" fold-var_202)))))"
"(for-loop_195"
" fold-var_200"
"(hash-iterate-next"
" ht_193"
" i_197))))"
" fold-var_196))))"
" for-loop_195)"
"(void)"
"(hash-iterate-first ht_193)))))"
"(void)))))"
"(if(variable-reference-constant?(#%variable-reference make-module39.1))"
"(make-module37.1"
" temp67_163"
" #t"
" #f"
" #f"
" temp73_169"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp70_166"
" #t"
" #f"
" #f"
" temp69_165"
" #t"
" #f"
" #f"
" primitive?68_164"
" #t"
" temp72_168"
" #f"
" #f"
" mpi71_167"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:65:3_162"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
"(list"
" temp67_163"
" temp73_169"
" temp70_166"
" temp69_165"
" primitive?68_164"
" temp72_168"
" mpi71_167)))))"
"((temp66_161)(1/module-path-index-resolve mpi_158)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!58.1))"
"(declare-module!56.1 #f #f ns64_159 temp65_160 temp66_161)"
"(declare-module!58.1 ns64_159 temp65_160 temp66_161))))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_203 given-args_204 name37_205 ht38_206)"
"(let-values(((namespace27_207)(car given-args_204))"
"((given-kws_208)(cdr given-kws_203))"
"((given-args_209)(cdr given-args_204)))"
"(let-values(((primitive?33_210)(if(pair? given-kws_208)(eq? '#:primitive?(car given-kws_208)) #f)))"
"(let-values(((primitive?28_211)(if primitive?33_210(car given-args_209)(void)))"
"((given-kws_212)(if primitive?33_210(cdr given-kws_208) given-kws_208))"
"((given-args_213)(if primitive?33_210(cdr given-args_209) given-args_209)))"
"(let-values(((protected35_214)(if(pair? given-kws_212)(eq? '#:protected(car given-kws_212)) #f)))"
"(let-values(((protected30_215)(if protected35_214(car given-args_213)(void)))"
"((given-kws_216)(if protected35_214(cdr given-kws_212) given-kws_212))"
"((given-args_217)(if protected35_214(cdr given-args_213) given-args_213)))"
"(let-values(((protected?34_218)(if(pair? given-kws_216)(eq? '#:protected?(car given-kws_216)) #f)))"
"(let-values(((protected?29_219)(if protected?34_218(car given-args_217)(void)))"
"((given-kws_220)(if protected?34_218(cdr given-kws_216) given-kws_216))"
"((given-args_221)(if protected?34_218(cdr given-args_217) given-args_217)))"
"(let-values(((register-builtin?36_222)(pair? given-kws_220)))"
"(let-values(((register-builtin?31_223)(if register-builtin?36_222(car given-args_221)(void))))"
"(declare-hash-based-module!39.1"
" namespace27_207"
" primitive?28_211"
" primitive?33_210"
" protected30_215"
" protected35_214"
" protected?29_219"
" protected?34_218"
" register-builtin?31_223"
" register-builtin?36_222"
" name37_205"
" ht38_206))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lifted/3.1$2"
"(lambda(given-kws_224 given-argc_225)"
"(if(= given-argc_225 4)"
"(subsets? '(#:namespace) given-kws_224 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" #f))"
"(case-lambda"
"((given-kws_226 given-args_227 name_228 ht_229)(unpack40.1 given-kws_226 given-args_227 name_228 ht_229)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/4.1$1)"
"(make-required"
" 'declare-reexporting-module!"
"(case-lambda((self_230 name_231 require-names_232)(apply missing-kw self_230 name_231 require-names_232 null)))"
" #f"
" #f))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lambda(namespace43_233 reexport?42_234 reexport?44_235 name46_236 require-names47_237)"
"(let-values(((name_238) name46_236))"
"(let-values(((require-names_239) require-names47_237))"
"(let-values(((reexport?_240)(if reexport?44_235 reexport?42_234 #t)))"
"(let-values(((ns_241) namespace43_233))"
"(let-values()"
"(let-values(((mpi_242)(1/module-path-index-join(list 'quote name_238) #f)))"
"(let-values(((require-mpis_243)"
"(alt-reverse"
"(let-values(((lst_244) require-names_239))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((require-name_248)(unsafe-car lst_247)))"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250) fold-var_246))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_248)"
" #f))"
" fold-var_250))))"
"(values fold-var_251)))))"
"(for-loop_245 fold-var_249(unsafe-cdr lst_247))))"
" fold-var_246))))"
" for-loop_245)"
" null"
" lst_244))))))"
"(let-values(((ns77_252) ns_241)"
"((temp78_253)"
"(let-values(((...nder/boot/kernel.rkt:95:3_255) make-module39.1)"
"((temp80_256) #t)"
"((temp81_257) #t)"
"((mpi82_258) mpi_242)"
"((temp83_259)(list(cons 0 require-mpis_243)))"
"((temp84_260)"
"(if reexport?_240"
"(hasheqv"
" 0"
"(let-values(((lst_262) require-mpis_243))"
"(begin"
"(if(list? lst_262)(void)(let-values()(in-list lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(table_264 lst_265)"
"(if(pair? lst_265)"
"(let-values(((require-mpi_266)"
"(unsafe-car lst_265)))"
"(let-values(((table_267)"
"(let-values(((m_268)"
"(namespace->module"
" ns_241"
"(1/module-path-index-resolve"
" require-mpi_266))))"
"(begin"
" #t"
"((letrec-values(((for-loop_269)"
"(lambda(table_270)"
"(let-values()"
"(let-values(((table_271)"
"(let-values(((ht_272)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_268)"
"(module-self"
" m_268)"
" require-mpi_266)"
" 0)))"
"(begin"
"(if((lambda(ht_273)"
"(hash?"
" ht_273))"
" ht_272)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_272)))"
"((letrec-values(((for-loop_274)"
"(lambda(table_275"
" i_276)"
"(if i_276"
"(let-values(((sym_277"
" binding_278)"
"(hash-iterate-key+value"
" ht_272"
" i_276)))"
"(let-values(((table_279)"
"(let-values(((table_280)"
" table_275))"
"(let-values(((table_281)"
"(let-values()"
"(let-values(((key_282"
" val_283)"
"(let-values()"
"(values"
" sym_277"
" binding_278))))"
"(hash-set"
" table_280"
" key_282"
" val_283)))))"
"(values"
" table_281)))))"
"(for-loop_274"
" table_279"
"(hash-iterate-next"
" ht_272"
" i_276))))"
" table_275))))"
" for-loop_274)"
" table_270"
"(hash-iterate-first"
" ht_272))))))"
" table_271)))))"
" for-loop_269)"
" table_264)))))"
"(for-loop_263"
" table_267"
"(unsafe-cdr lst_265))))"
" table_264))))"
" for-loop_263)"
" '#hash()"
" lst_262))))"
" '#hasheqv()))"
"((void85_261) void))"
"(if(variable-reference-constant?(#%variable-reference make-module39.1))"
"(make-module37.1"
" temp80_256"
" #t"
" #f"
" #f"
" void85_261"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_257"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp84_260"
" temp83_259"
" #t"
" mpi82_258"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:95:3_255"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
"(list temp80_256 void85_261 temp81_257 temp84_260 temp83_259 mpi82_258)))))"
"((temp79_254)(1/module-path-index-resolve mpi_242)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!58.1))"
"(declare-module!56.1 #f #f ns77_252 temp78_253 temp79_254)"
"(declare-module!58.1 ns77_252 temp78_253 temp79_254))))))))))))"
"(define-values"
"(unpack49.1)"
"(lambda(given-kws_284 given-args_285 name46_286 require-names47_287)"
"(let-values(((namespace43_288)(car given-args_285))"
"((given-kws_289)(cdr given-kws_284))"
"((given-args_290)(cdr given-args_285)))"
"(let-values(((reexport?44_291)(pair? given-kws_289)))"
"(let-values(((reexport?42_292)(if reexport?44_291(car given-args_290)(void))))"
"(declare-reexporting-module!48.1"
" namespace43_288"
" reexport?42_292"
" reexport?44_291"
" name46_286"
" require-names47_287))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lifted/4.1$1"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 4)(subsets? '(#:namespace) given-kws_293 '(#:namespace #:reexport?)) #f))"
"(case-lambda"
"((given-kws_295 given-args_296 name_297 require-names_298)"
"(unpack49.1 given-kws_295 given-args_296 name_297 require-names_298)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(void)"
"(void)"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module-provide-protected?"
" 1/module-provide-protected?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(void)"
"(void)"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" new:collection-path"
" 'collection-file-path"
" new:collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(void)"
"(void)"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(void)"
"(void)"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_1)(TH-place-channel-ref x_1 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_2)(TH-place-channel-ref x_2 0))(lambda(x_3)(TH-place-channel-ref x_3 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(void)"
"(void)"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-accept-compiled"
" #t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(1/syntax-e exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_6)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(1/syntax-e exp_5))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_5))))"
"(let-values(((r_8)(cdr(1/syntax-e exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(1/syntax-e r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'default-load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_6)"
" #f)))))))"
"(void)"
"(void)"
"(define-values"
"(default-load-handler)"
"(lambda(path_1 expected-mod_2)"
"(begin"
"(if(path-string? path_1)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_1)))"
"(if(let-values(((or-part_3)(not expected-mod_2)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(symbol? expected-mod_2)))"
"(if or-part_4"
" or-part_4"
"(if(pair? expected-mod_2)"
"(if(list? expected-mod_2)"
"(if(let-values(((or-part_5)(not(car expected-mod_2))))"
"(if or-part_5 or-part_5(symbol?(car expected-mod_2))))"
"(andmap2 symbol?(cdr expected-mod_2))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_2)))"
"(if expected-mod_2"
"(let-values()"
"((call-with-input-module-file"
" path_1"
"(lambda(i_6)"
"(begin"
"                (if (regexp-match? '#rx\"[.]zo$\" path_1) (void) (let-values () (port-count-lines! i_6)))"
"(with-module-reading-parameterization+delay-source"
" path_1"
"(lambda()"
"(let-values(((c71226_7)(linklet-directory-start i_6)))"
"(if c71226_7"
"((lambda(pos_8)"
"(let-values(((b-pos_9)(search-directory i_6 pos_8(encode-symbols expected-mod_2))))"
"(if b-pos_9"
"(let-values()"
"(begin"
"(file-position i_6 b-pos_9)"
"(let-values(((or-part_10)(cached-bundle i_6)))"
"(if or-part_10"
" or-part_10"
"(let-values(((v_11)(read i_6)))"
"(if(1/compiled-module-expression? v_11)"
"(lambda()((current-eval) v_11))"
"(error"
" 'default-load-handler"
"                                           (string-append \"expected a compiled module\\n\" \"  in: ~e\\n\" \"  found: ~e\")"
"(object-name i_6)"
" v_11)))))))"
"(if(pair? expected-mod_2)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                   (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_6)))))))"
" c71226_7)"
"(let-values(((c71227_12)(cached-bundle i_6)))"
"(if c71227_12"
"((lambda(thunk_13) thunk_13) c71227_12)"
"(if(if(pair? expected-mod_2)(not(car expected-mod_2)) #f)"
"(let-values() void)"
"(let-values()"
"(let-values(((s_14)(1/read-syntax(object-name i_6) i_6)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_14)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                       \"expected a `module' declaration;\\n\""
"                                                       \" found end-of-file\\n\""
"                                                       \"  in: ~e\")"
"(object-name i_6)))"
"(void))"
"(values))))"
"(let-values(((m-s_15)(check-module-form s_14 path_1)))"
"(let-values(((s2_16)(1/read-syntax(object-name i_6) i_6)))"
"(begin"
"(if(eof-object? s2_16)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                               \"expected a `module' declaration;\\n\""
"                                               \" found an extra form\\n\""
"                                               \"  in: ~e\\n\""
"                                               \"  found: ~.s\")"
"(object-name i_6)"
" s2_16)))"
"(lambda()((current-eval) m-s_15))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_17)"
"(lambda(s_18)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_18))))))"
"(let-values(((path1_19) path_1)"
"((temp2_20)"
"(lambda(i_21)"
"(begin"
"(port-count-lines! i_21)"
"((letrec-values(((loop_22)"
"(lambda(vals_23)"
"(let-values(((s_24)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_1))"
"(let-values()"
"(1/read-syntax(object-name i_21) i_21)))"
"(1/read-syntax(object-name i_21) i_21))))))"
"(if(eof-object? s_24)"
"(apply values vals_23)"
"(loop_22"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_17 s_24)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_25"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_25)))))))))"
" loop_22)"
"(list(void)))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 #f #f path1_19 temp2_20)"
"(call-with-input-file*63.1 path1_19 temp2_20)))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_26 tag_27)"
"(let-values(((version-length_28)(string-length(version))))"
"(if(equal?(peek-byte i_26)(char->integer '#\\#))"
"(if(equal?(peek-byte i_26 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_26 2) version-length_28)"
"(if(equal?(peek-bytes version-length_28 3 i_26)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_26(+ 3 version-length_28))(char->integer tag_27))(+ version-length_28 4) #f)"
" #f)"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_29)(let-values(((pos_30)(linklet-bundle-or-directory-start i_29 '#\\D)))(if pos_30(+ pos_30 4) #f))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_31)"
"(let-values(((pos_32)(linklet-bundle-or-directory-start i_31 '#\\B)))"
"(let-values(((hash-code_33)(if pos_32(peek-bytes 20 pos_32 i_31) #f)))"
"(if(bytes? hash-code_33)"
"(if(= 20(bytes-length hash-code_33))"
"(if(let-values(((vec_34 len_35)"
"(let-values(((vec_36) hash-code_33))"
"(begin"
"(if(bytes? vec_36)(void)(let-values()(in-bytes vec_36)))"
"(values vec_36(bytes-length vec_36))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_37)"
"(lambda(result_38 pos_39)"
"(if(unsafe-fx< pos_39 len_35)"
"(let-values(((c_40)(bytes-ref vec_34 pos_39)))"
"(let-values(((result_41)"
"(let-values(((result_42) result_38))"
"(let-values(((result_43)"
"(let-values()"
"(let-values()(not(eq? c_40 0))))))"
"(values result_43)))))"
"(if(not((lambda x_44 result_41) c_40))"
"(for-loop_37 result_41(unsafe-fx+ 1 pos_39))"
" result_41)))"
" result_38))))"
" for-loop_37)"
" #f"
" 0)))"
" hash-code_33"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_45)"
"(let-values(((c71260_46)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_45)))))"
"(if c71260_46"
"((lambda(declare-module_47)"
"(lambda()"
"(let-values(((...oot/load-handler.rkt:151:11_48) declare-module_47)((temp3_49)(1/current-namespace)))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...oot/load-handler.rkt:151:11_48"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list temp3_49)))))"
" c71260_46)"
"(let-values() #f)))))"
"(define-values"
"(read-number)"
"(lambda(i_50)"
"(let-values(((read-byte/not-eof_51)"
"(lambda(i_52)(let-values(((v_53)(read-byte i_52)))(if(eof-object? v_53) 0 v_53)))))"
"(bitwise-ior"
"(read-byte/not-eof_51 i_50)"
"(arithmetic-shift(read-byte/not-eof_51 i_50) 8)"
"(arithmetic-shift(read-byte/not-eof_51 i_50) 16)"
"(arithmetic-shift(read-byte/not-eof_51 i_50) 24)))))"
"(define-values"
"(search-directory)"
"(lambda(i_54 pos_55 bstr_56)"
"(if(zero? pos_55)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_54 pos_55)(values))))"
"(let-values(((name-len_57)(read-number i_54)))"
"(let-values(((v_58)(read-bytes name-len_57 i_54)))"
"(begin"
"(if(if(bytes? v_58)(=(bytes-length v_58) name-len_57) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                      \"failure getting submodule path\\n\""
"                      \"  in: ~e\\n\""
"                      \"  at position: ~a\\n\""
"                      \"  expected bytes: ~a\\n\""
"                      \"  read bytes: ~e\")"
"(object-name i_54)"
" pos_55"
" name-len_57"
" v_58)))"
"(if(bytes=? bstr_56 v_58)"
"(let-values()(read-number i_54))"
"(if(bytes<? bstr_56 v_58)"
"(let-values()"
"(begin(read-number i_54)(read-number i_54)(search-directory i_54(read-number i_54) bstr_56)))"
"(let-values()"
"(begin"
"(read-number i_54)"
"(read-number i_54)"
"(read-number i_54)"
"(search-directory i_54(read-number i_54) bstr_56)))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_59)"
"(if(symbol? expected-mod_59)"
"      (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(alt-reverse"
"(let-values(((lst_60)(cdr expected-mod_59)))"
"(begin"
"(if(list? lst_60)(void)(let-values()(in-list lst_60)))"
"((letrec-values(((for-loop_61)"
"(lambda(fold-var_62 lst_63)"
"(if(pair? lst_63)"
"(let-values(((s_64)(unsafe-car lst_63)))"
"(let-values(((fold-var_65)"
"(let-values(((fold-var_66) fold-var_62))"
"(let-values(((fold-var_67)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_68)"
"(string->bytes/utf-8"
"(symbol->string s_64))))"
"(let-values(((len_69)"
"(bytes-length bstr_68)))"
"(if(< len_69 255)"
"(let-values()"
"(bytes-append(bytes len_69) bstr_68))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_69"
" 4"
" #f"
" #f)"
" bstr_68))))))"
" fold-var_66))))"
"(values fold-var_67)))))"
"(for-loop_61 fold-var_65(unsafe-cdr lst_63))))"
" fold-var_62))))"
" for-loop_61)"
" null"
" lst_60)))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_70 thunk_71)"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_70))"
"(let-values()(with-module-reading-parameterization thunk_71)))"
"(with-module-reading-parameterization thunk_71))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_72 proc_73)"
"(let-values(((i_74) #f))"
"(dynamic-wind"
"(lambda()"
"(set! i_74"
"(let-values(((...oot/load-handler.rkt:215:22_75) open-input-file8.1)((path4_76) path_72)((temp5_77) #t))"
"(if(variable-reference-constant?(#%variable-reference open-input-file8.1))"
"(open-input-file6.1 temp5_77 #t #f #f path4_76)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...oot/load-handler.rkt:215:22_75"
" keyword-procedure-extract"
" '(#:for-module?)"
" 3)"
" '(#:for-module?)"
"(list temp5_77)"
" path4_76)))))"
"(lambda()(proc_73 i_74))"
"(lambda()(close-input-port i_74))))))"
"(void)"
"(void)"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 #f(lambda() #f))))"
"(if v_6(cons a_5 v_6) #f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                        (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                        (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
"                                                                     (path-add-extension file_36 #\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
"                                                                       (path-add-extension alt-file_37 #\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68) alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c71392_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c71392_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c71392_71)"
"(let-values(((c71393_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c71393_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c71393_73)"
"(let-values(((c71394_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c71394_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c71394_75)"
"(let-values(((c71395_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c71395_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c71395_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) #f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) #f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box"
"(cons(cons p_92 v_93)(let-values(((or-part_97) l_96))(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" 0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_110)"
"(1/syntax-line stx_110)"
"(1/syntax-column stx_110)"
"(1/syntax-position stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) #f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry from-namespace_115)"
" #f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 #f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 #t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
"                                                                       (if (equal? (car l_137) \"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_133 \".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"                                               (if (let-values (((or-part_138) (equal? (cadr s_126) \".\")))"
"                                                     (if or-part_138 or-part_138 (equal? (cadr s_126) \"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
"                                                             (if (equal? (cadr s_126) \"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 #f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" #f))))"
" #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(1/namespace-module-registry(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" #f)"
" #f)))"
"(if or-part_159"
" or-part_159"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_157"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(1/make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_160 0(- len_161 3))"
"                                                                    \".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
"                                                                   (path-replace-extension p_162 #\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((v_166)(cadr s_126)))"
"                                                                 (if (let-values (((or-part_167) (equal? v_166 \".\")))"
"                                                                       (if or-part_167 or-part_167 (equal? v_166 \"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
"                                                                                                    \".\")))"
"(if or-part_170"
" or-part_170"
"                                                                                         (equal? (cadr s_126) \"..\")))"
" relto_127"
" #f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
"                                                                                                  \"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_126) \"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) #f))"
" #f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" #f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_176"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" #t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" #f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
"                                                                                    (if (string=? s_182 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_182 \"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" #f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_185)"
" #f)"
" #t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" #t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" #t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_173 (car s-parsed_173) \"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 0)"
"(simplify-path(cleanse-path s-parsed_173) #f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 3)"
"                                                                           (path-replace-extension name_194 #\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" #f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" #f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" #f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" #f)"
"(cons #f subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(1/eval"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))"
"(lambda(e_218 ns_219)"
"(if(eq? ns_219(1/current-namespace))"
"(c_217 e_218 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_219)"
"(let-values()(c_217 e_218 #t)))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(1/compile s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_222 in_223)"
"(begin"
"(if(input-port? in_223)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_223)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_222 in_223))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(void)"
"(void)"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader5_1)"
"(lambda(mod-path3_2 sym4_3 fail-thunk1_4 fail-thunk2_5)"
"(let-values(((mod-path_6) mod-path3_2))"
"(let-values(((sym_7) sym4_3))"
"(let-values(((fail-thunk_8)(if fail-thunk2_5 fail-thunk1_4 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_9)(namespace-root-namespace(1/current-namespace))))"
"(let-values(((proc_10)"
"(if root-ns_9"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_9)"
"(let-values()(1/dynamic-require mod-path_6 sym_7 fail-thunk_8)))"
"(1/dynamic-require mod-path_6 sym_7 fail-thunk_8))))"
"(if(if(eq? sym_7 'read-syntax)"
"(if(procedure? proc_10)(procedure-arity-includes? proc_10 6) #f)"
" #f)"
"(let-values()"
"(lambda(name_11 input_12 mod-s_13 line_14 column_15 position_16)"
"(proc_10"
" name_11"
" input_12"
"(reader-syntax->syntax mod-s_13)"
" line_14"
" column_15"
" position_16)))"
"(let-values() proc_10)))))))))))"
"(case-lambda"
"((mod-path_17 sym_18)(dynamic-require-reader5_1 mod-path_17 sym_18 #f #f))"
"((mod-path_19 sym_20 fail-thunk1_21)(dynamic-require-reader5_1 mod-path_19 sym_20 fail-thunk1_21 #t)))))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$2)"
"(make-required"
" 'expand-body"
"(case-lambda((self_4 bodys_5 ctx_6)(apply missing-kw self_4 bodys_5 ctx_6 null)))"
" #f"
" #f))"
"(define-values"
"(expand-body9.1)"
"(lambda(disarmed-source2_7 source1_8 stratified?3_9 stratified?6_10 bodys7_11 ctx8_12)"
"(let-values(((bodys_13) bodys7_11))"
"(let-values(((ctx_14) ctx8_12))"
"(let-values(((s_15) source1_8))"
"(let-values(((disarmed-s_16) disarmed-source2_7))"
"(let-values(((stratified?_17)(if stratified?6_10 stratified?3_9 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_14)))"
"(if obs_27"
"(let-values()(let-values()(call-expand-observe obs_27 'enter-block)))"
"(void)))"
"(values))))"
"(let-values(((outside-sc_18)(new-scope 'local)))"
"(let-values(((inside-sc_19)(new-scope 'intdef)))"
"(let-values(((init-bodys_20)"
"(alt-reverse"
"(let-values(((lst_28) bodys_13))"
"(begin"
"(if(list? lst_28)(void)(let-values()(in-list lst_28)))"
"((letrec-values(((for-loop_29)"
"(lambda(fold-var_30 lst_31)"
"(if(pair? lst_31)"
"(let-values(((body_32)(unsafe-car lst_31)))"
"(let-values(((fold-var_33)"
"(let-values(((fold-var_34) fold-var_30))"
"(let-values(((fold-var_35)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(add-scope"
" body_32"
" outside-sc_18)"
" inside-sc_19))"
" fold-var_34))))"
"(values fold-var_35)))))"
"(for-loop_29 fold-var_33(unsafe-cdr lst_31))))"
" fold-var_30))))"
" for-loop_29)"
" null"
" lst_28))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_36)(expand-context-observer ctx_14)))"
"(if obs_36"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_36"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_20)"
"(datum->syntax$1 #f bodys_13))))"
"(void)))"
"(values))))"
"(let-values(((phase_21)(expand-context-phase ctx_14)))"
"(let-values(((frame-id_22)(make-reference-record)))"
"(let-values(((def-ctx-scopes_23)(box null)))"
"(let-values(((body-ctx_24)"
"(let-values(((the-struct_37) ctx_14))"
"(if(expand-context? the-struct_37)"
"(let-values(((context54_38)(list(make-liberal-define-context)))"
"((name55_39) #f)"
"((only-immediate?56_40) #t)"
"((def-ctx-scopes57_41) def-ctx-scopes_23)"
"((post-expansion-scope58_42) inside-sc_19)"
"((post-expansion-scope-action59_43) add-scope)"
"((scopes60_44)"
"(list*"
" outside-sc_18"
" inside-sc_19"
"(expand-context-scopes ctx_14)))"
"((use-site-scopes61_45)(box null))"
"((frame-id62_46) frame-id_22)"
"((reference-records63_47)"
"(cons"
" frame-id_22"
"(expand-context-reference-records ctx_14))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_37)"
" post-expansion-scope58_42"
"(root-expand-context-top-level-bind-scope the-struct_37)"
"(root-expand-context-all-scopes-stx the-struct_37)"
" use-site-scopes61_45"
"(root-expand-context-defined-syms the-struct_37)"
" frame-id62_46"
"(root-expand-context-counter the-struct_37)"
"(root-expand-context-lift-key the-struct_37)"
" context54_38"
"(expand-context-phase the-struct_37)"
"(expand-context-namespace the-struct_37)"
"(expand-context-env the-struct_37)"
"(expand-context-user-env the-struct_37)"
" post-expansion-scope-action59_43"
" scopes60_44"
" def-ctx-scopes57_41"
"(expand-context-binding-layer the-struct_37)"
" reference-records63_47"
" only-immediate?56_40"
"(expand-context-just-once? the-struct_37)"
"(expand-context-module-begin-k the-struct_37)"
"(expand-context-need-eventually-defined the-struct_37)"
"(expand-context-allow-unbound? the-struct_37)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_37)"
"(expand-context-stops the-struct_37)"
"(expand-context-current-introduction-scopes the-struct_37)"
"(expand-context-declared-submodule-names the-struct_37)"
"(expand-context-lifts the-struct_37)"
"(expand-context-lift-envs the-struct_37)"
"(expand-context-module-lifts the-struct_37)"
"(expand-context-require-lifts the-struct_37)"
"(expand-context-to-module-lifts the-struct_37)"
"(expand-context-requires+provides the-struct_37)"
" name55_39"
"(expand-context-observer the-struct_37)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context?\""
" the-struct_37)))))"
"(let-values(((maybe-increment-binding-layer_25)"
"(lambda(ids_48 body-ctx_49)"
"(if(eq?"
"(expand-context-binding-layer body-ctx_49)"
"(expand-context-binding-layer ctx_14))"
"(increment-binding-layer ids_48 body-ctx_49)"
"(expand-context-binding-layer body-ctx_49)))))"
"(let-values(((name_26)(expand-context-name ctx_14)))"
"((letrec-values(((loop_50)"
"(lambda(body-ctx_51"
" bodys_52"
" done-bodys_53"
" val-idss_54"
" val-keyss_55"
" val-rhss_56"
" track-stxs_57"
" trans-idss_58"
" dups_59)"
"(if(null? bodys_52)"
"(let-values()"
"(begin"
"(let-values(((obs_60)"
"(expand-context-observer body-ctx_51)))"
"(if obs_60"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_60"
"(if(null? val-idss_54)"
" 'block->list"
" 'block->letrec))))"
"(void)))"
"(let-values(((...nder/expand/body.rkt:83:6_61)"
" finish-expanding-body32.1)"
"((body-ctx64_62) body-ctx_51)"
"((frame-id65_63) frame-id_22)"
"((def-ctx-scopes66_64) def-ctx-scopes_23)"
"((temp67_65)(alt-reverse val-idss_54))"
"((temp68_66)(alt-reverse val-keyss_55))"
"((temp69_67)(alt-reverse val-rhss_56))"
"((temp70_68)(alt-reverse track-stxs_57))"
"((temp71_69)(alt-reverse done-bodys_53))"
"((s72_70) s_15)"
"((disarmed-s73_71) disarmed-s_16)"
"((stratified?74_72) stratified?_17)"
"((name75_73) name_26)"
"((temp76_74)(alt-reverse trans-idss_58)))"
"(if(variable-reference-constant?"
"(#%variable-reference finish-expanding-body32.1))"
"(finish-expanding-body30.1"
" temp76_74"
" disarmed-s73_71"
" name75_73"
" s72_70"
" stratified?74_72"
" body-ctx64_62"
" frame-id65_63"
" def-ctx-scopes66_64"
" temp67_65"
" temp68_66"
" temp69_67"
" temp70_68"
" temp71_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:83:6_61"
" keyword-procedure-extract"
" '(#:disappeared-transformer-bindings"
" #:disarmed-source"
" #:name"
" #:source"
" #:stratified?)"
" 10)"
" '(#:disappeared-transformer-bindings"
" #:disarmed-source"
" #:name"
" #:source"
" #:stratified?)"
"(list"
" temp76_74"
" disarmed-s73_71"
" name75_73"
" s72_70"
" stratified?74_72)"
" body-ctx64_62"
" frame-id65_63"
" def-ctx-scopes66_64"
" temp67_65"
" temp68_66"
" temp69_67"
" temp70_68"
" temp71_69)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_77)"
"(expand-context-observer"
" body-ctx_51)))"
"(if obs_77"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_77"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_75)"
"(let-values(((temp77_78)"
"(syntax-disarm$1"
"(car bodys_52)))"
"((temp78_79)"
"(if(if name_26"
"(null?(cdr bodys_52))"
" #f)"
"(let-values(((the-struct_80)"
" body-ctx_51))"
"(if(expand-context?"
" the-struct_80)"
"(let-values(((name79_81)"
" name_26))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_80)"
"(root-expand-context-post-expansion-scope"
" the-struct_80)"
"(root-expand-context-top-level-bind-scope"
" the-struct_80)"
"(root-expand-context-all-scopes-stx"
" the-struct_80)"
"(root-expand-context-use-site-scopes"
" the-struct_80)"
"(root-expand-context-defined-syms"
" the-struct_80)"
"(root-expand-context-frame-id"
" the-struct_80)"
"(root-expand-context-counter"
" the-struct_80)"
"(root-expand-context-lift-key"
" the-struct_80)"
"(expand-context-context"
" the-struct_80)"
"(expand-context-phase"
" the-struct_80)"
"(expand-context-namespace"
" the-struct_80)"
"(expand-context-env"
" the-struct_80)"
"(expand-context-user-env"
" the-struct_80)"
"(expand-context-post-expansion-scope-action"
" the-struct_80)"
"(expand-context-scopes"
" the-struct_80)"
"(expand-context-def-ctx-scopes"
" the-struct_80)"
"(expand-context-binding-layer"
" the-struct_80)"
"(expand-context-reference-records"
" the-struct_80)"
"(expand-context-only-immediate?"
" the-struct_80)"
"(expand-context-just-once?"
" the-struct_80)"
"(expand-context-module-begin-k"
" the-struct_80)"
"(expand-context-need-eventually-defined"
" the-struct_80)"
"(expand-context-allow-unbound?"
" the-struct_80)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_80)"
"(expand-context-stops"
" the-struct_80)"
"(expand-context-current-introduction-scopes"
" the-struct_80)"
"(expand-context-declared-submodule-names"
" the-struct_80)"
"(expand-context-lifts"
" the-struct_80)"
"(expand-context-lift-envs"
" the-struct_80)"
"(expand-context-module-lifts"
" the-struct_80)"
"(expand-context-require-lifts"
" the-struct_80)"
"(expand-context-to-module-lifts"
" the-struct_80)"
"(expand-context-requires+provides"
" the-struct_80)"
" name79_81"
"(expand-context-observer"
" the-struct_80)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"expand-context?\""
" the-struct_80)))"
" body-ctx_51)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp77_78 temp78_79)"
"(expand7.1 temp77_78 temp78_79)))))"
"(let-values(((disarmed-exp-body_76)"
"(syntax-disarm$1 exp-body_75)))"
"(let-values(((tmp_82)"
"(core-form-sym"
" disarmed-exp-body_76"
" phase_21)))"
"(if(equal? tmp_82 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_98)"
"(expand-context-observer"
" body-ctx_51)))"
"(if obs_98"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_98"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_83 begin80_84 e81_85)"
"(let-values(((s_99)"
" disarmed-exp-body_76))"
"(let-values(((orig-s_100)"
" s_99))"
"(let-values(((begin80_101"
" e81_102)"
"(let-values(((s_103)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1"
" s_99)"
" s_99)))"
"(if(pair?"
" s_103)"
"(let-values(((begin82_104)"
"(let-values(((s_106)"
"(car"
" s_103)))"
" s_106))"
"((e83_105)"
"(let-values(((s_107)"
"(cdr"
" s_103)))"
"(let-values(((s_108)"
"(if(syntax?$1"
" s_107)"
"(syntax-e$1"
" s_107)"
" s_107)))"
"(let-values(((flat-s_109)"
"(to-syntax-list.1"
" s_108)))"
"(if(not"
" flat-s_109)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_100))"
"(let-values()"
" flat-s_109)))))))"
"(values"
" begin82_104"
" e83_105))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_100)))))"
"(values"
" #t"
" begin80_101"
" e81_102))))))"
"(let-values(((track_96)"
"(lambda(e_110)"
"(syntax-track-origin$1"
" e_110"
" exp-body_75))))"
"(let-values(((splice-bodys_97)"
"(append"
"(map2 track_96 e81_85)"
"(cdr bodys_52))))"
"(begin"
"(let-values(((obs_111)"
"(expand-context-observer"
" body-ctx_51)))"
"(if obs_111"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_111"
" 'splice"
" splice-bodys_97)))"
"(void)))"
"(loop_50"
" body-ctx_51"
" splice-bodys_97"
" done-bodys_53"
" val-idss_54"
" val-keyss_55"
" val-rhss_56"
" track-stxs_57"
" trans-idss_58"
" dups_59)))))))"
"(if(equal? tmp_82 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_133)"
"(expand-context-observer"
" body-ctx_51)))"
"(if obs_133"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_133"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_112"
" define-values84_113"
" id85_114"
" rhs86_115)"
"(let-values(((s_134)"
" disarmed-exp-body_76))"
"(let-values(((orig-s_135)"
" s_134))"
"(let-values(((define-values84_136"
" id85_137"
" rhs86_138)"
"(let-values(((s_139)"
"(if(syntax?$1"
" s_134)"
"(syntax-e$1"
" s_134)"
" s_134)))"
"(if(pair?"
" s_139)"
"(let-values(((define-values87_140)"
"(let-values(((s_143)"
"(car"
" s_139)))"
" s_143))"
"((id88_141"
" rhs89_142)"
"(let-values(((s_144)"
"(cdr"
" s_139)))"
"(let-values(((s_145)"
"(if(syntax?$1"
" s_144)"
"(syntax-e$1"
" s_144)"
" s_144)))"
"(if(pair?"
" s_145)"
"(let-values(((id90_146)"
"(let-values(((s_148)"
"(car"
" s_145)))"
"(let-values(((s_149)"
"(if(syntax?$1"
" s_148)"
"(syntax-e$1"
" s_148)"
" s_148)))"
"(let-values(((flat-s_150)"
"(to-syntax-list.1"
" s_149)))"
"(if(not"
" flat-s_150)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_135))"
"(let-values()"
"(let-values(((id_151)"
"(let-values(((lst_152)"
" flat-s_150))"
"(begin"
"(if(list?"
" lst_152)"
"(void)"
"(let-values()"
"(in-list"
" lst_152)))"
"((letrec-values(((for-loop_153)"
"(lambda(id_154"
" lst_155)"
"(if(pair?"
" lst_155)"
"(let-values(((s_156)"
"(unsafe-car"
" lst_155)))"
"(let-values(((id_157)"
"(let-values(((id_158)"
" id_154))"
"(let-values(((id_159)"
"(let-values()"
"(let-values(((id93_160)"
"(let-values()"
"(if(let-values(((or-part_161)"
"(if(syntax?$1"
" s_156)"
"(symbol?"
"(syntax-e$1"
" s_156))"
" #f)))"
"(if or-part_161"
" or-part_161"
"(symbol?"
" s_156)))"
" s_156"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_135"
" s_156)))))"
"(cons"
" id93_160"
" id_158)))))"
"(values"
" id_159)))))"
"(for-loop_153"
" id_157"
"(unsafe-cdr"
" lst_155))))"
" id_154))))"
" for-loop_153)"
" null"
" lst_152)))))"
"(alt-reverse"
" id_151))))))))"
"((rhs91_147)"
"(let-values(((s_162)"
"(cdr"
" s_145)))"
"(let-values(((s_163)"
"(if(syntax?$1"
" s_162)"
"(syntax-e$1"
" s_162)"
" s_162)))"
"(if(pair?"
" s_163)"
"(let-values(((rhs92_164)"
"(let-values(((s_165)"
"(car"
" s_163)))"
" s_165))"
"(()"
"(let-values(((s_166)"
"(cdr"
" s_163)))"
"(let-values(((s_167)"
"(if(syntax?$1"
" s_166)"
"(syntax-e$1"
" s_166)"
" s_166)))"
"(if(null?"
" s_167)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_135))))))"
"(values"
" rhs92_164))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_135))))))"
"(values"
" id90_146"
" rhs91_147))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_135))))))"
"(values"
" define-values87_140"
" id88_141"
" rhs89_142))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_135)))))"
"(values"
" #t"
" define-values84_136"
" id85_137"
" rhs86_138))))))"
"(let-values(((ids_128)"
"(remove-use-site-scopes"
" id85_114"
" body-ctx_51)))"
"(let-values((()"
"(begin"
"(let-values(((obs_168)"
"(expand-context-observer"
" body-ctx_51)))"
"(if obs_168"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_168"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_128"
" rhs86_115)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_129)"
"(let-values(((ids94_169)"
" ids_128)"
"((phase95_170)"
" phase_21)"
"((exp-body96_171)"
" exp-body_75)"
"((dups97_172)"
" dups_59))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids94_169"
" phase95_170"
" exp-body96_171"
" dups97_172"
" #t)"
"(check-no-duplicate-ids10.1"
" ids94_169"
" phase95_170"
" exp-body96_171"
" dups97_172)))))"
"(let-values(((counter_130)"
"(root-expand-context-counter"
" ctx_14)))"
"(let-values(((keys_131)"
"(alt-reverse"
"(let-values(((lst_173)"
" ids_128))"
"(begin"
"(if(list?"
" lst_173)"
"(void)"
"(let-values()"
"(in-list"
" lst_173)))"
"((letrec-values(((for-loop_174)"
"(lambda(fold-var_175"
" lst_176)"
"(if(pair?"
" lst_176)"
"(let-values(((id_177)"
"(unsafe-car"
" lst_176)))"
"(let-values(((fold-var_178)"
"(let-values(((fold-var_179)"
" fold-var_175))"
"(let-values(((fold-var_180)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/body.rkt:124:24_181)"
" add-local-binding!37.1)"
"((id98_182)"
" id_177)"
"((phase99_183)"
" phase_21)"
"((counter100_184)"
" counter_130)"
"((frame-id101_185)"
" frame-id_22)"
"((exp-body102_186)"
" exp-body_75))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" frame-id101_185"
" #t"
" exp-body102_186"
" #t"
" id98_182"
" phase99_183"
" counter100_184)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:124:24_181"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id101_185"
" exp-body102_186)"
" id98_182"
" phase99_183"
" counter100_184))))"
" fold-var_179))))"
"(values"
" fold-var_180)))))"
"(for-loop_174"
" fold-var_178"
"(unsafe-cdr"
" lst_176))))"
" fold-var_175))))"
" for-loop_174)"
" null"
" lst_173))))))"
"(let-values(((extended-env_132)"
"(let-values(((lst_187)"
" keys_131)"
"((lst_188)"
" ids_128))"
"(begin"
"(if(list?"
" lst_187)"
"(void)"
"(let-values()"
"(in-list"
" lst_187)))"
"(if(list?"
" lst_188)"
"(void)"
"(let-values()"
"(in-list"
" lst_188)))"
"((letrec-values(((for-loop_189)"
"(lambda(env_190"
" lst_191"
" lst_192)"
"(if(if(pair?"
" lst_191)"
"(pair?"
" lst_192)"
" #f)"
"(let-values(((key_193)"
"(unsafe-car"
" lst_191))"
"((id_194)"
"(unsafe-car"
" lst_192)))"
"(let-values(((env_195)"
"(let-values(((env_196)"
" env_190))"
"(let-values(((env_197)"
"(let-values()"
"(env-extend"
" env_196"
" key_193"
"(local-variable1.1"
" id_194)))))"
"(values"
" env_197)))))"
"(for-loop_189"
" env_195"
"(unsafe-cdr"
" lst_191)"
"(unsafe-cdr"
" lst_192))))"
" env_190))))"
" for-loop_189)"
"(expand-context-env"
" body-ctx_51)"
" lst_187"
" lst_188)))))"
"(loop_50"
"(let-values(((the-struct_198)"
" body-ctx_51))"
"(if(expand-context?"
" the-struct_198)"
"(let-values(((env103_199)"
" extended-env_132)"
"((binding-layer104_200)"
"(maybe-increment-binding-layer_25"
" ids_128"
" body-ctx_51)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_198)"
"(root-expand-context-post-expansion-scope"
" the-struct_198)"
"(root-expand-context-top-level-bind-scope"
" the-struct_198)"
"(root-expand-context-all-scopes-stx"
" the-struct_198)"
"(root-expand-context-use-site-scopes"
" the-struct_198)"
"(root-expand-context-defined-syms"
" the-struct_198)"
"(root-expand-context-frame-id"
" the-struct_198)"
"(root-expand-context-counter"
" the-struct_198)"
"(root-expand-context-lift-key"
" the-struct_198)"
"(expand-context-context"
" the-struct_198)"
"(expand-context-phase"
" the-struct_198)"
"(expand-context-namespace"
" the-struct_198)"
" env103_199"
"(expand-context-user-env"
" the-struct_198)"
"(expand-context-post-expansion-scope-action"
" the-struct_198)"
"(expand-context-scopes"
" the-struct_198)"
"(expand-context-def-ctx-scopes"
" the-struct_198)"
" binding-layer104_200"
"(expand-context-reference-records"
" the-struct_198)"
"(expand-context-only-immediate?"
" the-struct_198)"
"(expand-context-just-once?"
" the-struct_198)"
"(expand-context-module-begin-k"
" the-struct_198)"
"(expand-context-need-eventually-defined"
" the-struct_198)"
"(expand-context-allow-unbound?"
" the-struct_198)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_198)"
"(expand-context-stops"
" the-struct_198)"
"(expand-context-current-introduction-scopes"
" the-struct_198)"
"(expand-context-declared-submodule-names"
" the-struct_198)"
"(expand-context-lifts"
" the-struct_198)"
"(expand-context-lift-envs"
" the-struct_198)"
"(expand-context-module-lifts"
" the-struct_198)"
"(expand-context-require-lifts"
" the-struct_198)"
"(expand-context-to-module-lifts"
" the-struct_198)"
"(expand-context-requires+provides"
" the-struct_198)"
"(expand-context-name"
" the-struct_198)"
"(expand-context-observer"
" the-struct_198)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                  \"expand-context?\""
" the-struct_198)))"
"(cdr bodys_52)"
" null"
"(cons"
" ids_128"
"(append"
"(alt-reverse"
"(let-values(((lst_201)"
" done-bodys_53))"
"(begin"
"(if(list? lst_201)"
"(void)"
"(let-values()"
"(in-list"
" lst_201)))"
"((letrec-values(((for-loop_202)"
"(lambda(fold-var_203"
" lst_204)"
"(if(pair?"
" lst_204)"
"(let-values(((done-body_205)"
"(unsafe-car"
" lst_204)))"
"(let-values(((fold-var_206)"
"(let-values(((fold-var_207)"
" fold-var_203))"
"(let-values(((fold-var_208)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_207))))"
"(values"
" fold-var_208)))))"
"(for-loop_202"
" fold-var_206"
"(unsafe-cdr"
" lst_204))))"
" fold-var_203))))"
" for-loop_202)"
" null"
" lst_201))))"
" val-idss_54))"
"(cons"
" keys_131"
"(append"
"(alt-reverse"
"(let-values(((lst_209)"
" done-bodys_53))"
"(begin"
"(if(list? lst_209)"
"(void)"
"(let-values()"
"(in-list"
" lst_209)))"
"((letrec-values(((for-loop_210)"
"(lambda(fold-var_211"
" lst_212)"
"(if(pair?"
" lst_212)"
"(let-values(((done-body_213)"
"(unsafe-car"
" lst_212)))"
"(let-values(((fold-var_214)"
"(let-values(((fold-var_215)"
" fold-var_211))"
"(let-values(((fold-var_216)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_215))))"
"(values"
" fold-var_216)))))"
"(for-loop_210"
" fold-var_214"
"(unsafe-cdr"
" lst_212))))"
" fold-var_211))))"
" for-loop_210)"
" null"
" lst_209))))"
" val-keyss_55))"
"(cons"
" rhs86_115"
"(append"
"(alt-reverse"
"(let-values(((lst_217)"
" done-bodys_53))"
"(begin"
"(if(list? lst_217)"
"(void)"
"(let-values()"
"(in-list"
" lst_217)))"
"((letrec-values(((for-loop_218)"
"(lambda(fold-var_219"
" lst_220)"
"(if(pair?"
" lst_220)"
"(let-values(((done-body_221)"
"(unsafe-car"
" lst_220)))"
"(let-values(((fold-var_222)"
"(let-values(((fold-var_223)"
" fold-var_219))"
"(let-values(((fold-var_224)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_221"
" s_15"
" phase_21))"
" fold-var_223))))"
"(values"
" fold-var_224)))))"
"(for-loop_218"
" fold-var_222"
"(unsafe-cdr"
" lst_220))))"
" fold-var_219))))"
" for-loop_218)"
" null"
" lst_217))))"
" val-rhss_56))"
"(cons"
" exp-body_75"
"(append"
"(alt-reverse"
"(let-values(((lst_225)"
" done-bodys_53))"
"(begin"
"(if(list? lst_225)"
"(void)"
"(let-values()"
"(in-list"
" lst_225)))"
"((letrec-values(((for-loop_226)"
"(lambda(fold-var_227"
" lst_228)"
"(if(pair?"
" lst_228)"
"(let-values(((done-body_229)"
"(unsafe-car"
" lst_228)))"
"(let-values(((fold-var_230)"
"(let-values(((fold-var_231)"
" fold-var_227))"
"(let-values(((fold-var_232)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_231))))"
"(values"
" fold-var_232)))))"
"(for-loop_226"
" fold-var_230"
"(unsafe-cdr"
" lst_228))))"
" fold-var_227))))"
" for-loop_226)"
" null"
" lst_225))))"
" track-stxs_57))"
" trans-idss_58"
" new-dups_129))))))))))"
"(if(equal? tmp_82 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_255)"
"(expand-context-observer"
" body-ctx_51)))"
"(if obs_255"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_255"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_233"
" define-syntaxes105_234"
" id106_235"
" rhs107_236)"
"(let-values(((s_256)"
" disarmed-exp-body_76))"
"(let-values(((orig-s_257)"
" s_256))"
"(let-values(((define-syntaxes105_258"
" id106_259"
" rhs107_260)"
"(let-values(((s_261)"
"(if(syntax?$1"
" s_256)"
"(syntax-e$1"
" s_256)"
" s_256)))"
"(if(pair?"
" s_261)"
"(let-values(((define-syntaxes108_262)"
"(let-values(((s_265)"
"(car"
" s_261)))"
" s_265))"
"((id109_263"
" rhs110_264)"
"(let-values(((s_266)"
"(cdr"
" s_261)))"
"(let-values(((s_267)"
"(if(syntax?$1"
" s_266)"
"(syntax-e$1"
" s_266)"
" s_266)))"
"(if(pair?"
" s_267)"
"(let-values(((id111_268)"
"(let-values(((s_270)"
"(car"
" s_267)))"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_270)"
"(syntax-e$1"
" s_270)"
" s_270)))"
"(let-values(((flat-s_272)"
"(to-syntax-list.1"
" s_271)))"
"(if(not"
" flat-s_272)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_257))"
"(let-values()"
"(let-values(((id_273)"
"(let-values(((lst_274)"
" flat-s_272))"
"(begin"
"(if(list?"
" lst_274)"
"(void)"
"(let-values()"
"(in-list"
" lst_274)))"
"((letrec-values(((for-loop_275)"
"(lambda(id_276"
" lst_277)"
"(if(pair?"
" lst_277)"
"(let-values(((s_278)"
"(unsafe-car"
" lst_277)))"
"(let-values(((id_279)"
"(let-values(((id_280)"
" id_276))"
"(let-values(((id_281)"
"(let-values()"
"(let-values(((id114_282)"
"(let-values()"
"(if(let-values(((or-part_283)"
"(if(syntax?$1"
" s_278)"
"(symbol?"
"(syntax-e$1"
" s_278))"
" #f)))"
"(if or-part_283"
" or-part_283"
"(symbol?"
" s_278)))"
" s_278"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_257"
" s_278)))))"
"(cons"
" id114_282"
" id_280)))))"
"(values"
" id_281)))))"
"(for-loop_275"
" id_279"
"(unsafe-cdr"
" lst_277))))"
" id_276))))"
" for-loop_275)"
" null"
" lst_274)))))"
"(alt-reverse"
" id_273))))))))"
"((rhs112_269)"
"(let-values(((s_284)"
"(cdr"
" s_267)))"
"(let-values(((s_285)"
"(if(syntax?$1"
" s_284)"
"(syntax-e$1"
" s_284)"
" s_284)))"
"(if(pair?"
" s_285)"
"(let-values(((rhs113_286)"
"(let-values(((s_287)"
"(car"
" s_285)))"
" s_287))"
"(()"
"(let-values(((s_288)"
"(cdr"
" s_285)))"
"(let-values(((s_289)"
"(if(syntax?$1"
" s_288)"
"(syntax-e$1"
" s_288)"
" s_288)))"
"(if(null?"
" s_289)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_257))))))"
"(values"
" rhs113_286))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_257))))))"
"(values"
" id111_268"
" rhs112_269))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_257))))))"
"(values"
" define-syntaxes108_262"
" id109_263"
" rhs110_264))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_257)))))"
"(values"
" #t"
" define-syntaxes105_258"
" id106_259"
" rhs107_260))))))"
"(let-values(((ids_249)"
"(remove-use-site-scopes"
" id106_235"
" body-ctx_51)))"
"(let-values((()"
"(begin"
"(let-values(((obs_290)"
"(expand-context-observer"
" body-ctx_51)))"
"(if obs_290"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_290"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_249"
" rhs107_236)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_250)"
"(let-values(((ids115_291)"
" ids_249)"
"((phase116_292)"
" phase_21)"
"((exp-body117_293)"
" exp-body_75)"
"((dups118_294)"
" dups_59))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids115_291"
" phase116_292"
" exp-body117_293"
" dups118_294"
" #t)"
"(check-no-duplicate-ids10.1"
" ids115_291"
" phase116_292"
" exp-body117_293"
" dups118_294)))))"
"(let-values(((counter_251)"
"(root-expand-context-counter"
" ctx_14)))"
"(let-values(((keys_252)"
"(alt-reverse"
"(let-values(((lst_295)"
" ids_249))"
"(begin"
"(if(list?"
" lst_295)"
"(void)"
"(let-values()"
"(in-list"
" lst_295)))"
"((letrec-values(((for-loop_296)"
"(lambda(fold-var_297"
" lst_298)"
"(if(pair?"
" lst_298)"
"(let-values(((id_299)"
"(unsafe-car"
" lst_298)))"
"(let-values(((fold-var_300)"
"(let-values(((fold-var_301)"
" fold-var_297))"
"(let-values(((fold-var_302)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/body.rkt:167:24_303)"
" add-local-binding!37.1)"
"((id119_304)"
" id_299)"
"((phase120_305)"
" phase_21)"
"((counter121_306)"
" counter_251)"
"((frame-id122_307)"
" frame-id_22)"
"((exp-body123_308)"
" exp-body_75))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" frame-id122_307"
" #t"
" exp-body123_308"
" #t"
" id119_304"
" phase120_305"
" counter121_306)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:167:24_303"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id122_307"
" exp-body123_308)"
" id119_304"
" phase120_305"
" counter121_306))))"
" fold-var_301))))"
"(values"
" fold-var_302)))))"
"(for-loop_296"
" fold-var_300"
"(unsafe-cdr"
" lst_298))))"
" fold-var_297))))"
" for-loop_296)"
" null"
" lst_295))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_309)"
"(expand-context-observer"
" body-ctx_51)))"
"(if obs_309"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_309"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values(((vals_253)"
"(eval-for-syntaxes-binding"
" rhs107_236"
" ids_249"
" body-ctx_51)))"
"(let-values(((extended-env_254)"
"(let-values(((lst_310)"
" keys_252)"
"((lst_311)"
" vals_253)"
"((lst_312)"
" ids_249))"
"(begin"
"(if(list?"
" lst_310)"
"(void)"
"(let-values()"
"(in-list"
" lst_310)))"
"(if(list?"
" lst_311)"
"(void)"
"(let-values()"
"(in-list"
" lst_311)))"
"(if(list?"
" lst_312)"
"(void)"
"(let-values()"
"(in-list"
" lst_312)))"
"((letrec-values(((for-loop_313)"
"(lambda(env_314"
" lst_315"
" lst_316"
" lst_317)"
"(if(if(pair?"
" lst_315)"
"(if(pair?"
" lst_316)"
"(pair?"
" lst_317)"
" #f)"
" #f)"
"(let-values(((key_318)"
"(unsafe-car"
" lst_315))"
"((val_319)"
"(unsafe-car"
" lst_316))"
"((id_320)"
"(unsafe-car"
" lst_317)))"
"(let-values(((env_321)"
"(let-values(((env_322)"
" env_314))"
"(let-values(((env_323)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_319"
" id_320"
" phase_21)"
"(env-extend"
" env_322"
" key_318"
" val_319)))))"
"(values"
" env_323)))))"
"(for-loop_313"
" env_321"
"(unsafe-cdr"
" lst_315)"
"(unsafe-cdr"
" lst_316)"
"(unsafe-cdr"
" lst_317))))"
" env_314))))"
" for-loop_313)"
"(expand-context-env"
" body-ctx_51)"
" lst_310"
" lst_311"
" lst_312)))))"
"(loop_50"
"(let-values(((the-struct_324)"
" body-ctx_51))"
"(if(expand-context?"
" the-struct_324)"
"(let-values(((env124_325)"
" extended-env_254)"
"((binding-layer125_326)"
"(maybe-increment-binding-layer_25"
" ids_249"
" body-ctx_51)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_324)"
"(root-expand-context-post-expansion-scope"
" the-struct_324)"
"(root-expand-context-top-level-bind-scope"
" the-struct_324)"
"(root-expand-context-all-scopes-stx"
" the-struct_324)"
"(root-expand-context-use-site-scopes"
" the-struct_324)"
"(root-expand-context-defined-syms"
" the-struct_324)"
"(root-expand-context-frame-id"
" the-struct_324)"
"(root-expand-context-counter"
" the-struct_324)"
"(root-expand-context-lift-key"
" the-struct_324)"
"(expand-context-context"
" the-struct_324)"
"(expand-context-phase"
" the-struct_324)"
"(expand-context-namespace"
" the-struct_324)"
" env124_325"
"(expand-context-user-env"
" the-struct_324)"
"(expand-context-post-expansion-scope-action"
" the-struct_324)"
"(expand-context-scopes"
" the-struct_324)"
"(expand-context-def-ctx-scopes"
" the-struct_324)"
" binding-layer125_326"
"(expand-context-reference-records"
" the-struct_324)"
"(expand-context-only-immediate?"
" the-struct_324)"
"(expand-context-just-once?"
" the-struct_324)"
"(expand-context-module-begin-k"
" the-struct_324)"
"(expand-context-need-eventually-defined"
" the-struct_324)"
"(expand-context-allow-unbound?"
" the-struct_324)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_324)"
"(expand-context-stops"
" the-struct_324)"
"(expand-context-current-introduction-scopes"
" the-struct_324)"
"(expand-context-declared-submodule-names"
" the-struct_324)"
"(expand-context-lifts"
" the-struct_324)"
"(expand-context-lift-envs"
" the-struct_324)"
"(expand-context-module-lifts"
" the-struct_324)"
"(expand-context-require-lifts"
" the-struct_324)"
"(expand-context-to-module-lifts"
" the-struct_324)"
"(expand-context-requires+provides"
" the-struct_324)"
"(expand-context-name"
" the-struct_324)"
"(expand-context-observer"
" the-struct_324)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                        \"expand-context?\""
" the-struct_324)))"
"(cdr bodys_52)"
" done-bodys_53"
" val-idss_54"
" val-keyss_55"
" val-rhss_56"
" track-stxs_57"
"(cons"
" ids_249"
" trans-idss_58)"
" new-dups_250))))))))))))"
"(let-values()"
"(if stratified?_17"
"(let-values()"
"(loop_50"
" body-ctx_51"
" null"
"(append"
"(alt-reverse bodys_52)"
"(cons exp-body_75 done-bodys_53))"
" val-idss_54"
" val-keyss_55"
" val-rhss_56"
" track-stxs_57"
" trans-idss_58"
" dups_59))"
"(let-values()"
"(loop_50"
" body-ctx_51"
"(cdr bodys_52)"
"(cons exp-body_75 done-bodys_53)"
" val-idss_54"
" val-keyss_55"
" val-rhss_56"
" track-stxs_57"
" trans-idss_58"
" dups_59))))))))))))))))"
" loop_50)"
" body-ctx_24"
" init-bodys_20"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))))"
"(define-values"
"(unpack10.1)"
"(lambda(given-kws_327 given-args_328 bodys7_329 ctx8_330)"
"(let-values(((disarmed-source2_331)(car given-args_328))"
"((given-kws_332)(cdr given-kws_327))"
"((given-args_333)(cdr given-args_328)))"
"(let-values(((source1_334)(car given-args_333))"
"((given-kws_335)(cdr given-kws_332))"
"((given-args_336)(cdr given-args_333)))"
"(let-values(((stratified?6_337)(pair? given-kws_335)))"
"(let-values(((stratified?3_338)(if stratified?6_337(car given-args_336)(void))))"
"(expand-body9.1"
" disarmed-source2_331"
" source1_334"
" stratified?3_338"
" stratified?6_337"
" bodys7_329"
" ctx8_330)))))))"
"(define-values"
"(expand-body11.1)"
"(lifted/1.1$2"
"(lambda(given-kws_339 given-argc_340)"
"(if(= given-argc_340 4)"
"(subsets? '(#:disarmed-source #:source) given-kws_339 '(#:disarmed-source #:source #:stratified?))"
" #f))"
"(case-lambda"
"((given-kws_341 given-args_342 bodys_343 ctx_344)(unpack10.1 given-kws_341 given-args_342 bodys_343 ctx_344)))"
" '(#:disarmed-source #:source)"
" '(#:disarmed-source #:source #:stratified?)))"
"(define-values"
"(lifted/2.1$2)"
"(make-required"
" 'finish-expanding-body"
"(case-lambda"
"((self_345"
" body-ctx_346"
" frame-id_347"
" def-ctx-scopes_348"
" val-idss_349"
" val-keyss_350"
" val-rhss_351"
" track-stxs_352"
" done-bodys_353)"
"(apply"
" missing-kw"
" self_345"
" body-ctx_346"
" frame-id_347"
" def-ctx-scopes_348"
" val-idss_349"
" val-keyss_350"
" val-rhss_351"
" track-stxs_352"
" done-bodys_353"
" null)))"
" #f"
" #f))"
"(define-values"
"(finish-expanding-body30.1)"
"(lambda(disappeared-transformer-bindings16_354"
" disarmed-source13_355"
" name15_356"
" source12_357"
" stratified?14_358"
" body-ctx22_359"
" frame-id23_360"
" def-ctx-scopes24_361"
" val-idss25_362"
" val-keyss26_363"
" val-rhss27_364"
" track-stxs28_365"
" done-bodys29_366)"
"(let-values(((body-ctx_367) body-ctx22_359))"
"(let-values(((frame-id_368) frame-id23_360))"
"(let-values(((def-ctx-scopes_369) def-ctx-scopes24_361))"
"(let-values(((val-idss_370) val-idss25_362))"
"(let-values(((val-keyss_371) val-keyss26_363))"
"(let-values(((val-rhss_372) val-rhss27_364))"
"(let-values(((track-stxs_373) track-stxs28_365))"
"(let-values(((done-bodys_374) done-bodys29_366))"
"(let-values(((s_375) source12_357))"
"(let-values(((disarmed-s_376) disarmed-source13_355))"
"(let-values(((stratified?_377) stratified?14_358))"
"(let-values(((name_378) name15_356))"
"(let-values(((disappeared-transformer-bindings_379)"
" disappeared-transformer-bindings16_354))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_374)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                     \"no expression after a sequence of internal definitions\""
" s_375))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_380)"
"(let-values(((the-struct_382)"
"(accumulate-def-ctx-scopes"
" body-ctx_367"
" def-ctx-scopes_369)))"
"(if(expand-context? the-struct_382)"
"(let-values(((context126_383) 'expression)"
"((use-site-scopes127_384)(box null))"
"((scopes128_385)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_367))"
"(expand-context-scopes body-ctx_367)))"
"((only-immediate?129_386) #f)"
"((def-ctx-scopes130_387) #f)"
"((post-expansion-scope131_388) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_382)"
" post-expansion-scope131_388"
"(root-expand-context-top-level-bind-scope the-struct_382)"
"(root-expand-context-all-scopes-stx the-struct_382)"
" use-site-scopes127_384"
"(root-expand-context-defined-syms the-struct_382)"
"(root-expand-context-frame-id the-struct_382)"
"(root-expand-context-counter the-struct_382)"
"(root-expand-context-lift-key the-struct_382)"
" context126_383"
"(expand-context-phase the-struct_382)"
"(expand-context-namespace the-struct_382)"
"(expand-context-env the-struct_382)"
"(expand-context-user-env the-struct_382)"
"(expand-context-post-expansion-scope-action the-struct_382)"
" scopes128_385"
" def-ctx-scopes130_387"
"(expand-context-binding-layer the-struct_382)"
"(expand-context-reference-records the-struct_382)"
" only-immediate?129_386"
"(expand-context-just-once? the-struct_382)"
"(expand-context-module-begin-k the-struct_382)"
"(expand-context-need-eventually-defined the-struct_382)"
"(expand-context-allow-unbound? the-struct_382)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_382)"
"(expand-context-stops the-struct_382)"
"(expand-context-current-introduction-scopes the-struct_382)"
"(expand-context-declared-submodule-names the-struct_382)"
"(expand-context-lifts the-struct_382)"
"(expand-context-lift-envs the-struct_382)"
"(expand-context-module-lifts the-struct_382)"
"(expand-context-require-lifts the-struct_382)"
"(expand-context-to-module-lifts the-struct_382)"
"(expand-context-requires+provides the-struct_382)"
"(expand-context-name the-struct_382)"
"(expand-context-observer the-struct_382)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"expand-context?\""
" the-struct_382)))))"
"(let-values(((finish-bodys_381)"
"(lambda()"
"(let-values(((block->list?_389)(null? val-idss_370)))"
"(let-values((()"
"(begin"
"(if block->list?_389"
"(void)"
"(let-values()"
"(let-values(((obs_392)"
"(expand-context-observer"
" body-ctx_367)))"
"(if obs_392"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_392"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values((()"
"(begin"
"(if block->list?_389"
"(void)"
"(let-values()"
"(let-values(((obs_393)"
"(expand-context-observer"
" body-ctx_367)))"
"(if obs_393"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_393"
" 'prim-begin)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_390)(sub1(length done-bodys_374))))"
"(letrec-values((()"
"(begin"
"(let-values(((obs_394)"
"(expand-context-observer"
" body-ctx_367)))"
"(if obs_394"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_394"
" 'enter-list"
" exp-bodys_391)))"
"(void)))"
"(values)))"
"((exp-bodys_391)"
"(alt-reverse"
"(let-values(((lst_395) done-bodys_374)"
"((start_396) 0))"
"(begin"
"(if(list? lst_395)"
"(void)"
"(let-values()(in-list lst_395)))"
"(if(exact-nonnegative-integer?"
" start_396)"
"(void)"
"(let-values()"
"(in-naturals start_396)))"
"((letrec-values(((for-loop_397)"
"(lambda(fold-var_398"
" lst_399"
" pos_400)"
"(if(if(pair?"
" lst_399)"
" #t"
" #f)"
"(let-values(((body_401)"
"(unsafe-car"
" lst_399))"
"((i_402)"
" pos_400))"
"(let-values(((fold-var_403)"
"(let-values(((fold-var_404)"
" fold-var_398))"
"(let-values(((fold-var_405)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_406)"
"(expand-context-observer"
" body-ctx_367)))"
"(if obs_406"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_406"
" 'next)))"
"(void)))"
"(let-values(((body132_407)"
" body_401)"
"((temp133_408)"
"(if(if name_378"
"(="
" i_402"
" last-i_390)"
" #f)"
"(let-values(((the-struct_409)"
" finish-ctx_380))"
"(if(expand-context?"
" the-struct_409)"
"(let-values(((name134_410)"
" name_378))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_409)"
"(root-expand-context-post-expansion-scope"
" the-struct_409)"
"(root-expand-context-top-level-bind-scope"
" the-struct_409)"
"(root-expand-context-all-scopes-stx"
" the-struct_409)"
"(root-expand-context-use-site-scopes"
" the-struct_409)"
"(root-expand-context-defined-syms"
" the-struct_409)"
"(root-expand-context-frame-id"
" the-struct_409)"
"(root-expand-context-counter"
" the-struct_409)"
"(root-expand-context-lift-key"
" the-struct_409)"
"(expand-context-context"
" the-struct_409)"
"(expand-context-phase"
" the-struct_409)"
"(expand-context-namespace"
" the-struct_409)"
"(expand-context-env"
" the-struct_409)"
"(expand-context-user-env"
" the-struct_409)"
"(expand-context-post-expansion-scope-action"
" the-struct_409)"
"(expand-context-scopes"
" the-struct_409)"
"(expand-context-def-ctx-scopes"
" the-struct_409)"
"(expand-context-binding-layer"
" the-struct_409)"
"(expand-context-reference-records"
" the-struct_409)"
"(expand-context-only-immediate?"
" the-struct_409)"
"(expand-context-just-once?"
" the-struct_409)"
"(expand-context-module-begin-k"
" the-struct_409)"
"(expand-context-need-eventually-defined"
" the-struct_409)"
"(expand-context-allow-unbound?"
" the-struct_409)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_409)"
"(expand-context-stops"
" the-struct_409)"
"(expand-context-current-introduction-scopes"
" the-struct_409)"
"(expand-context-declared-submodule-names"
" the-struct_409)"
"(expand-context-lifts"
" the-struct_409)"
"(expand-context-lift-envs"
" the-struct_409)"
"(expand-context-module-lifts"
" the-struct_409)"
"(expand-context-require-lifts"
" the-struct_409)"
"(expand-context-to-module-lifts"
" the-struct_409)"
"(expand-context-requires+provides"
" the-struct_409)"
" name134_410"
"(expand-context-observer"
" the-struct_409)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                    \"expand-context?\""
" the-struct_409)))"
" finish-ctx_380)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" body132_407"
" temp133_408)"
"(expand7.1"
" body132_407"
" temp133_408)))))"
" fold-var_404))))"
"(values"
" fold-var_405)))))"
"(for-loop_397"
" fold-var_403"
"(unsafe-cdr"
" lst_399)"
"(+"
" pos_400"
" 1))))"
" fold-var_398))))"
" for-loop_397)"
" null"
" lst_395"
" start_396))))))"
"(begin"
"(let-values(((obs_411)"
"(expand-context-observer body-ctx_367)))"
"(if obs_411"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_411"
" 'exit-list"
" exp-bodys_391)))"
"(void)))"
" exp-bodys_391)))))))))"
"(if(if(null? val-idss_370)(null? disappeared-transformer-bindings_379) #f)"
"(let-values()(finish-bodys_381))"
"(let-values()"
"(let-values(((exp-s_412)"
"(let-values(((...nder/expand/body.rkt:256:18_413)"
" expand-and-split-bindings-by-reference53.1)"
"((val-idss135_414) val-idss_370)"
"((val-keyss136_415) val-keyss_371)"
"((val-rhss137_416) val-rhss_372)"
"((track-stxs138_417) track-stxs_373)"
"((temp139_418)(not stratified?_377))"
"((frame-id140_419) frame-id_368)"
"((finish-ctx141_420) finish-ctx_380)"
"((s142_421) s_375)"
"((disarmed-s143_422) disarmed-s_376)"
"((finish-bodys144_423) finish-bodys_381)"
"((temp145_424) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-and-split-bindings-by-reference53.1))"
"(expand-and-split-bindings-by-reference51.1"
" finish-ctx141_420"
" disarmed-s143_422"
" frame-id140_419"
" finish-bodys144_423"
" s142_421"
" temp139_418"
" temp145_424"
" val-idss135_414"
" val-keyss136_415"
" val-rhss137_416"
" track-stxs138_417)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:256:18_413"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" finish-ctx141_420"
" disarmed-s143_422"
" frame-id140_419"
" finish-bodys144_423"
" s142_421"
" temp139_418"
" temp145_424)"
" val-idss135_414"
" val-keyss136_415"
" val-rhss137_416"
" track-stxs138_417)))))"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_412"
" disappeared-transformer-bindings_379))))))))))))))))))))))))"
"(define-values"
"(unpack31.1$1)"
"(lambda(given-kws_425"
" given-args_426"
" body-ctx22_427"
" frame-id23_428"
" def-ctx-scopes24_429"
" val-idss25_430"
" val-keyss26_431"
" val-rhss27_432"
" track-stxs28_433"
" done-bodys29_434)"
"(let-values(((disappeared-transformer-bindings16_435)(car given-args_426))"
"((given-kws_436)(cdr given-kws_425))"
"((given-args_437)(cdr given-args_426)))"
"(let-values(((disarmed-source13_438)(car given-args_437))"
"((given-kws_439)(cdr given-kws_436))"
"((given-args_440)(cdr given-args_437)))"
"(let-values(((name15_441)(car given-args_440))"
"((given-kws_442)(cdr given-kws_439))"
"((given-args_443)(cdr given-args_440)))"
"(let-values(((source12_444)(car given-args_443))"
"((given-kws_445)(cdr given-kws_442))"
"((given-args_446)(cdr given-args_443)))"
"(let-values(((stratified?14_447)(car given-args_446)))"
"(finish-expanding-body30.1"
" disappeared-transformer-bindings16_435"
" disarmed-source13_438"
" name15_441"
" source12_444"
" stratified?14_447"
" body-ctx22_427"
" frame-id23_428"
" def-ctx-scopes24_429"
" val-idss25_430"
" val-keyss26_431"
" val-rhss27_432"
" track-stxs28_433"
" done-bodys29_434))))))))"
"(define-values"
"(finish-expanding-body32.1)"
"(lifted/2.1$2"
"(lambda(given-kws_448 given-argc_449)"
"(if(= given-argc_449 10)"
"(let-values(((l2_450) given-kws_448))"
"(if(pair? l2_450)"
"(if(eq?(car l2_450) '#:disappeared-transformer-bindings)"
"(let-values(((l2_451)(cdr l2_450)))"
"(if(pair? l2_451)"
"(if(eq?(car l2_451) '#:disarmed-source)"
"(let-values(((l2_452)(cdr l2_451)))"
"(if(pair? l2_452)"
"(if(eq?(car l2_452) '#:name)"
"(let-values(((l2_453)(cdr l2_452)))"
"(if(pair? l2_453)"
"(if(eq?(car l2_453) '#:source)"
"(let-values(((l2_454)(cdr l2_453)))"
"(if(pair? l2_454)(if(eq?(car l2_454) '#:stratified?)(null?(cdr l2_454)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_455"
" given-args_456"
" body-ctx_457"
" frame-id_458"
" def-ctx-scopes_459"
" val-idss_460"
" val-keyss_461"
" val-rhss_462"
" track-stxs_463"
" done-bodys_464)"
"(unpack31.1$1"
" given-kws_455"
" given-args_456"
" body-ctx_457"
" frame-id_458"
" def-ctx-scopes_459"
" val-idss_460"
" val-keyss_461"
" val-rhss_462"
" track-stxs_463"
" done-bodys_464)))"
" '(#:disappeared-transformer-bindings #:disarmed-source #:name #:source #:stratified?)"
" '(#:disappeared-transformer-bindings #:disarmed-source #:name #:source #:stratified?)))"
"(define-values"
"(lifted/3.1$1)"
"(make-required"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_465 idss_466 keyss_467 rhss_468 track-stxs_469)"
"(apply missing-kw self_465 idss_466 keyss_467 rhss_468 track-stxs_469 null)))"
" #f"
" #f))"
"(define-values"
"(expand-and-split-bindings-by-reference51.1)"
"(lambda(ctx35_470"
" disarmed-source37_471"
" frame-id34_472"
" get-body38_473"
" source36_474"
" split?33_475"
" track?39_476"
" idss47_477"
" keyss48_478"
" rhss49_479"
" track-stxs50_480)"
"(let-values(((idss_481) idss47_477))"
"(let-values(((keyss_482) keyss48_478))"
"(let-values(((rhss_483) rhss49_479))"
"(let-values(((track-stxs_484) track-stxs50_480))"
"(let-values(((split?_485) split?33_475))"
"(let-values(((frame-id_486) frame-id34_472))"
"(let-values(((ctx_487) ctx35_470))"
"(let-values(((s_488) source36_474))"
"(let-values(((disarmed-s_489) disarmed-source37_471))"
"(let-values(((get-body_490) get-body38_473))"
"(let-values(((track?_491) track?39_476))"
"(let-values()"
"(let-values(((s-core-stx_492)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_487))))"
"((letrec-values(((loop_493)"
"(lambda(idss_494"
" keyss_495"
" rhss_496"
" track-stxs_497"
" accum-idss_498"
" accum-rhss_499"
" accum-track-stxs_500"
" track?_501"
" get-list?_502)"
"(if(null? idss_494)"
"(let-values()"
"(if(if(null? accum-idss_498) get-list?_502 #f)"
"(let-values()(get-body_490))"
"(let-values()"
"(let-values(((result-s_503)"
"(let-values(((...nder/expand/body.rkt:290:10_504)"
" rebuild53.1)"
"((track?146_505) track?_501)"
"((s147_506) s_488)"
"((disarmed-s148_507)"
" disarmed-s_489)"
"((temp149_508)"
"(list*"
"(if(null? accum-idss_498)"
"(datum->syntax$1"
" s-core-stx_492"
" 'let-values)"
"(datum->syntax$1"
" s-core-stx_492"
" 'letrec-values))"
"(build-clauses"
" accum-idss_498"
" accum-rhss_499"
" accum-track-stxs_500)"
"(get-body_490))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" track?146_505"
" #t"
" s147_506"
" disarmed-s148_507"
" temp149_508)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:290:10_504"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?146_505)"
" s147_506"
" disarmed-s148_507"
" temp149_508)))))"
"(begin"
"(if track?_501"
"(let-values()"
"(let-values(((obs_509)"
"(expand-context-observer ctx_487)))"
"(if obs_509"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_509"
" 'tag"
" result-s_503)))"
"(void))))"
"(void))"
"(if get-list?_502(list result-s_503) result-s_503))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_515)"
"(expand-context-observer ctx_487)))"
"(if obs_515"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_515 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_510)(car idss_494)))"
"(let-values(((expanded-rhs_511)"
"(let-values(((temp150_516)(car rhss_496))"
"((temp151_517)"
"(as-named-context"
" ctx_487"
" ids_510)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp150_516 temp151_517)"
"(expand7.1 temp150_516 temp151_517)))))"
"(let-values(((track-stx_512)(car track-stxs_497)))"
"(let-values(((local-or-forward-references?_513)"
"(reference-record-forward-references?"
" frame-id_486)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_486"
"(car keyss_495))"
"(values))))"
"(let-values(((forward-references?_514)"
"(reference-record-forward-references?"
" frame-id_486)))"
"(if(if(not local-or-forward-references?_513)"
" split?_485"
" #f)"
"(let-values()"
"(begin"
"(if(null? accum-idss_498)"
"(void)"
"(let-values()"
"(error"
"                                                                               \"internal error: accumulated ids not empty\")))"
"((if get-list?_502 list values)"
"(let-values(((...nder/expand/body.rkt:316:9_518)"
" rebuild53.1)"
"((track?152_519) track?_501)"
"((s153_520) s_488)"
"((disarmed-s154_521)"
" disarmed-s_489)"
"((temp155_522)"
"(list*"
"(datum->syntax$1"
" s-core-stx_492"
" 'let-values)"
"(list"
"(build-clause"
" ids_510"
" expanded-rhs_511"
" track-stx_512))"
"(loop_493"
"(cdr idss_494)"
"(cdr keyss_495)"
"(cdr rhss_496)"
"(cdr track-stxs_497)"
" null"
" null"
" null"
" #f"
" #t))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" track?152_519"
" #t"
" s153_520"
" disarmed-s154_521"
" temp155_522)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:316:9_518"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?152_519)"
" s153_520"
" disarmed-s154_521"
" temp155_522))))))"
"(if(if(not forward-references?_514)"
"(let-values(((or-part_523) split?_485))"
"(if or-part_523"
" or-part_523"
"(null?(cdr idss_494))))"
" #f)"
"(let-values()"
"((if get-list?_502 list values)"
"(let-values(((...nder/expand/body.rkt:327:9_524)"
" rebuild53.1)"
"((track?156_525) track?_501)"
"((s157_526) s_488)"
"((disarmed-s158_527)"
" disarmed-s_489)"
"((temp159_528)"
"(list*"
"(datum->syntax$1"
" s-core-stx_492"
" 'letrec-values)"
"(build-clauses"
"(cons ids_510 accum-idss_498)"
"(cons"
" expanded-rhs_511"
" accum-rhss_499)"
"(cons"
" track-stx_512"
" accum-track-stxs_500))"
"(loop_493"
"(cdr idss_494)"
"(cdr keyss_495)"
"(cdr rhss_496)"
"(cdr track-stxs_497)"
" null"
" null"
" null"
" #f"
" #t))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" track?156_525"
" #t"
" s157_526"
" disarmed-s158_527"
" temp159_528)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:327:9_524"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?156_525)"
" s157_526"
" disarmed-s158_527"
" temp159_528)))))"
"(let-values()"
"(loop_493"
"(cdr idss_494)"
"(cdr keyss_495)"
"(cdr rhss_496)"
"(cdr track-stxs_497)"
"(cons ids_510 accum-idss_498)"
"(cons expanded-rhs_511 accum-rhss_499)"
"(cons track-stx_512 accum-track-stxs_500)"
" track?_501"
" get-list?_502))))))))))))))))"
" loop_493)"
" idss_481"
" keyss_482"
" rhss_483"
" track-stxs_484"
" null"
" null"
" null"
" track?_491"
" #f))))))))))))))))"
"(define-values"
"(unpack52.1)"
"(lambda(given-kws_529 given-args_530 idss47_531 keyss48_532 rhss49_533 track-stxs50_534)"
"(let-values(((ctx35_535)(car given-args_530))"
"((given-kws_536)(cdr given-kws_529))"
"((given-args_537)(cdr given-args_530)))"
"(let-values(((disarmed-source37_538)(car given-args_537))"
"((given-kws_539)(cdr given-kws_536))"
"((given-args_540)(cdr given-args_537)))"
"(let-values(((frame-id34_541)(car given-args_540))"
"((given-kws_542)(cdr given-kws_539))"
"((given-args_543)(cdr given-args_540)))"
"(let-values(((get-body38_544)(car given-args_543))"
"((given-kws_545)(cdr given-kws_542))"
"((given-args_546)(cdr given-args_543)))"
"(let-values(((source36_547)(car given-args_546))"
"((given-kws_548)(cdr given-kws_545))"
"((given-args_549)(cdr given-args_546)))"
"(let-values(((split?33_550)(car given-args_549))"
"((given-kws_551)(cdr given-kws_548))"
"((given-args_552)(cdr given-args_549)))"
"(let-values(((track?39_553)(car given-args_552)))"
"(expand-and-split-bindings-by-reference51.1"
" ctx35_535"
" disarmed-source37_538"
" frame-id34_541"
" get-body38_544"
" source36_547"
" split?33_550"
" track?39_553"
" idss47_531"
" keyss48_532"
" rhss49_533"
" track-stxs50_534))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference53.1)"
"(lifted/3.1$1"
"(lambda(given-kws_554 given-argc_555)"
"(if(= given-argc_555 6)"
"(let-values(((l2_556) given-kws_554))"
"(if(pair? l2_556)"
"(if(eq?(car l2_556) '#:ctx)"
"(let-values(((l2_557)(cdr l2_556)))"
"(if(pair? l2_557)"
"(if(eq?(car l2_557) '#:disarmed-source)"
"(let-values(((l2_558)(cdr l2_557)))"
"(if(pair? l2_558)"
"(if(eq?(car l2_558) '#:frame-id)"
"(let-values(((l2_559)(cdr l2_558)))"
"(if(pair? l2_559)"
"(if(eq?(car l2_559) '#:get-body)"
"(let-values(((l2_560)(cdr l2_559)))"
"(if(pair? l2_560)"
"(if(eq?(car l2_560) '#:source)"
"(let-values(((l2_561)(cdr l2_560)))"
"(if(pair? l2_561)"
"(if(eq?(car l2_561) '#:split?)"
"(let-values(((l2_562)(cdr l2_561)))"
"(if(pair? l2_562)"
"(if(eq?(car l2_562) '#:track?)(null?(cdr l2_562)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_563 given-args_564 idss_565 keyss_566 rhss_567 track-stxs_568)"
"(unpack52.1 given-kws_563 given-args_564 idss_565 keyss_566 rhss_567 track-stxs_568)))"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_569 accum-rhss_570 accum-track-stxs_571)"
"(map2 build-clause(alt-reverse accum-idss_569)(alt-reverse accum-rhss_570)(alt-reverse accum-track-stxs_571))))"
"(define-values"
"(build-clause)"
"(lambda(ids_572 rhs_573 track-stx_574)"
"(let-values(((clause_575)(datum->syntax$1 #f(list ids_572 rhs_573))))"
"(if track-stx_574(syntax-track-origin$1 clause_575 track-stx_574) clause_575))))"
"(define-values"
"(no-binds)"
"(lambda(expr_576 s_577 phase_578)"
"(let-values(((s-core-stx_579)(syntax-shift-phase-level$1 core-stx phase_578)))"
"(let-values(((s-runtime-stx_580)(syntax-shift-phase-level$1 runtime-stx phase_578)))"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1 s-core-stx_579 'begin)"
" expr_576"
"(list(datum->syntax$1 s-core-stx_579 '#%app)(datum->syntax$1 s-runtime-stx_580 'values)))"
" s_577)))))"
"(void)"
"(void)"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_3 disarmed-s_4 formals_5 bodys_6 ctx_7 log-renames-tag_8)"
"(let-values(((sc_9)(new-scope 'local)))"
"(let-values(((phase_10)(expand-context-phase ctx_7)))"
"(let-values(((ids_11)(parse-and-flatten-formals formals_5 sc_9 disarmed-s_4)))"
"(let-values((()"
"(begin"
"(let-values(((...nder/expand/expr.rkt:36:2_19) check-no-duplicate-ids10.1)"
"((ids30_20) ids_11)"
"((phase31_21) phase_10)"
"((s32_22) s_3)"
"                                       ((temp33_23) \"argument name\"))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 temp33_23 #t ids30_20 phase31_21 s32_22 #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:36:2_19"
" keyword-procedure-extract"
" '(#:what)"
" 5)"
" '(#:what)"
"(list temp33_23)"
" ids30_20"
" phase31_21"
" s32_22)))"
"(values))))"
"(let-values(((counter_12)(root-expand-context-counter ctx_7)))"
"(let-values(((keys_13)"
"(alt-reverse"
"(let-values(((lst_24) ids_11))"
"(begin"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27)"
"(if(pair? lst_27)"
"(let-values(((id_28)(unsafe-car lst_27)))"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30) fold-var_26))"
"(let-values(((fold-var_31)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:41:17_32)"
" add-local-binding!37.1)"
"((id34_33)"
" id_28)"
"((phase35_34)"
" phase_10)"
"((counter36_35)"
" counter_12)"
"((s37_36) s_3))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" #f"
" #f"
" s37_36"
" #t"
" id34_33"
" phase35_34"
" counter36_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:41:17_32"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list s37_36)"
" id34_33"
" phase35_34"
" counter36_35))))"
" fold-var_30))))"
"(values fold-var_31)))))"
"(for-loop_25 fold-var_29(unsafe-cdr lst_27))))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_24))))))"
"(let-values(((body-env_14)"
"(let-values(((lst_37) keys_13)((lst_38) ids_11))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"(if(list? lst_38)(void)(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(env_40 lst_41 lst_42)"
"(if(if(pair? lst_41)(pair? lst_42) #f)"
"(let-values(((key_43)(unsafe-car lst_41))"
"((id_44)(unsafe-car lst_42)))"
"(let-values(((env_45)"
"(let-values(((env_46) env_40))"
"(let-values(((env_47)"
"(let-values()"
"(env-extend"
" env_46"
" key_43"
"(local-variable1.1 id_44)))))"
"(values env_47)))))"
"(for-loop_39"
" env_45"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42))))"
" env_40))))"
" for-loop_39)"
"(expand-context-env ctx_7)"
" lst_37"
" lst_38)))))"
"(let-values(((sc-formals_15)(add-scope formals_5 sc_9)))"
"(let-values(((sc-bodys_16)"
"(alt-reverse"
"(let-values(((lst_48) bodys_6))"
"(begin"
"(if(list? lst_48)(void)(let-values()(in-list lst_48)))"
"((letrec-values(((for-loop_49)"
"(lambda(fold-var_50 lst_51)"
"(if(pair? lst_51)"
"(let-values(((body_52)(unsafe-car lst_51)))"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54) fold-var_50))"
"(let-values(((fold-var_55)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_52"
" sc_9))"
" fold-var_54))))"
"(values fold-var_55)))))"
"(for-loop_49 fold-var_53(unsafe-cdr lst_51))))"
" fold-var_50))))"
" for-loop_49)"
" null"
" lst_48))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_56)(expand-context-observer ctx_7)))"
"(if obs_56"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_56"
" log-renames-tag_8"
" sc-formals_15"
"(datum->syntax$1 #f sc-bodys_16))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_17)"
"(let-values(((the-struct_57) ctx_7))"
"(if(expand-context? the-struct_57)"
"(let-values(((env38_58) body-env_14)"
"((scopes39_59)(cons sc_9(expand-context-scopes ctx_7)))"
"((binding-layer40_60)(increment-binding-layer ids_11 ctx_7))"
"((frame-id41_61) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_57)"
"(root-expand-context-post-expansion-scope the-struct_57)"
"(root-expand-context-top-level-bind-scope the-struct_57)"
"(root-expand-context-all-scopes-stx the-struct_57)"
"(root-expand-context-use-site-scopes the-struct_57)"
"(root-expand-context-defined-syms the-struct_57)"
" frame-id41_61"
"(root-expand-context-counter the-struct_57)"
"(root-expand-context-lift-key the-struct_57)"
"(expand-context-context the-struct_57)"
"(expand-context-phase the-struct_57)"
"(expand-context-namespace the-struct_57)"
" env38_58"
"(expand-context-user-env the-struct_57)"
"(expand-context-post-expansion-scope-action the-struct_57)"
" scopes39_59"
"(expand-context-def-ctx-scopes the-struct_57)"
" binding-layer40_60"
"(expand-context-reference-records the-struct_57)"
"(expand-context-only-immediate? the-struct_57)"
"(expand-context-just-once? the-struct_57)"
"(expand-context-module-begin-k the-struct_57)"
"(expand-context-need-eventually-defined the-struct_57)"
"(expand-context-allow-unbound? the-struct_57)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_57)"
"(expand-context-stops the-struct_57)"
"(expand-context-current-introduction-scopes the-struct_57)"
"(expand-context-declared-submodule-names the-struct_57)"
"(expand-context-lifts the-struct_57)"
"(expand-context-lift-envs the-struct_57)"
"(expand-context-module-lifts the-struct_57)"
"(expand-context-require-lifts the-struct_57)"
"(expand-context-to-module-lifts the-struct_57)"
"(expand-context-requires+provides the-struct_57)"
"(expand-context-name the-struct_57)"
"(expand-context-observer the-struct_57)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_57)))))"
"(let-values(((exp-body_18)"
"(let-values(((...nder/expand/expr.rkt:54:19_62) expand-body11.1)"
"((sc-bodys42_63) sc-bodys_16)"
"((body-ctx43_64) body-ctx_17)"
"((s44_65) s_3)"
"((disarmed-s45_66) disarmed-s_4))"
"(if(variable-reference-constant?(#%variable-reference expand-body11.1))"
"(expand-body9.1 disarmed-s45_66 s44_65 #f #f sc-bodys42_63 body-ctx43_64)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:54:19_62"
" keyword-procedure-extract"
" '(#:disarmed-source #:source)"
" 4)"
" '(#:disarmed-source #:source)"
"(list disarmed-s45_66 s44_65)"
" sc-bodys42_63"
" body-ctx43_64)))))"
"(values sc-formals_15 exp-body_18)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_67)"
"(lambda(s_68 ctx_69)"
"(let-values((()"
"(begin"
"(let-values(((obs_89)(expand-context-observer ctx_69)))"
"(if obs_89(let-values()(let-values()(call-expand-observe obs_89 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_70)(syntax-disarm$1 s_68)))"
"(let-values(((ok?_71 lambda46_72 formals47_73 body48_74)"
"(let-values(((s_90) disarmed-s_70))"
"(let-values(((orig-s_91) s_90))"
"(let-values(((lambda46_92 formals47_93 body48_94)"
"(let-values(((s_95)(if(syntax?$1 s_90)(syntax-e$1 s_90) s_90)))"
"(if(pair? s_95)"
"(let-values(((lambda49_96)(let-values(((s_99)(car s_95))) s_99))"
"((formals50_97 body51_98)"
"(let-values(((s_100)(cdr s_95)))"
"(let-values(((s_101)"
"(if(syntax?$1 s_100)"
"(syntax-e$1 s_100)"
" s_100)))"
"(if(pair? s_101)"
"(let-values(((formals52_102)"
"(let-values(((s_104)(car s_101)))"
" s_104))"
"((body53_103)"
"(let-values(((s_105)(cdr s_101)))"
"(let-values(((s_106)"
"(if(syntax?$1 s_105)"
"(syntax-e$1 s_105)"
" s_105)))"
"(let-values(((flat-s_107)"
"(to-syntax-list.1"
" s_106)))"
"(if(not flat-s_107)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_91))"
"(if(null? flat-s_107)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_91))"
"(let-values()"
" flat-s_107))))))))"
"(values formals52_102 body53_103))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_91))))))"
"(values lambda49_96 formals50_97 body51_98))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_91)))))"
"(values #t lambda46_92 formals47_93 body48_94))))))"
"(let-values(((formals_87 body_88)"
"(lambda-clause-expander s_68 disarmed-s_70 formals47_73 body48_74 ctx_69 'lambda-renames)))"
"(let-values(((s54_108) s_68)"
"((disarmed-s55_109) disarmed-s_70)"
"((temp56_110)(list*(get-lambda_67 ctx_69 lambda46_72) formals_87 body_88)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s54_108 disarmed-s55_109 temp56_110)"
"(rebuild53.1 s54_108 disarmed-s55_109 temp56_110))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_111 lam-id_112) lam-id_112))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_113 lam-id_114)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_113))"
" 'lambda"
" lam-id_114"
" lam-id_114)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_115 ctx_116)"
"(let-values((()"
"(begin"
"(let-values(((obs_147)(expand-context-observer ctx_116)))"
"(if obs_147"
"(let-values()(let-values()(call-expand-observe obs_147 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_117)(syntax-disarm$1 s_115)))"
"(let-values(((ok?_118 case-lambda57_119 formals58_120 body59_121)"
"(let-values(((s_148) disarmed-s_117))"
"(let-values(((orig-s_149) s_148))"
"(let-values(((case-lambda57_150 formals58_151 body59_152)"
"(let-values(((s_153)(if(syntax?$1 s_148)(syntax-e$1 s_148) s_148)))"
"(if(pair? s_153)"
"(let-values(((case-lambda60_154)"
"(let-values(((s_157)(car s_153))) s_157))"
"((formals61_155 body62_156)"
"(let-values(((s_158)(cdr s_153)))"
"(let-values(((s_159)"
"(if(syntax?$1 s_158)"
"(syntax-e$1 s_158)"
" s_158)))"
"(let-values(((flat-s_160)(to-syntax-list.1 s_159)))"
"(if(not flat-s_160)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_149))"
"(let-values()"
"(let-values(((formals_161 body_162)"
"(let-values(((lst_163)"
" flat-s_160))"
"(begin"
"(if(list? lst_163)"
"(void)"
"(let-values()"
"(in-list lst_163)))"
"((letrec-values(((for-loop_164)"
"(lambda(formals_165"
" body_166"
" lst_167)"
"(if(pair?"
" lst_167)"
"(let-values(((s_168)"
"(unsafe-car"
" lst_167)))"
"(let-values(((formals_169"
" body_170)"
"(let-values(((formals_171)"
" formals_165)"
"((body_172)"
" body_166))"
"(let-values(((formals_173"
" body_174)"
"(let-values()"
"(let-values(((formals72_175"
" body73_176)"
"(let-values()"
"(let-values(((s_177)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(pair?"
" s_177)"
"(let-values(((formals63_178)"
"(let-values(((s_180)"
"(car"
" s_177)))"
" s_180))"
"((body64_179)"
"(let-values(((s_181)"
"(cdr"
" s_177)))"
"(let-values(((s_182)"
"(if(syntax?$1"
" s_181)"
"(syntax-e$1"
" s_181)"
" s_181)))"
"(let-values(((flat-s_183)"
"(to-syntax-list.1"
" s_182)))"
"(if(not"
" flat-s_183)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_149))"
"(if(null?"
" flat-s_183)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_149))"
"(let-values()"
" flat-s_183))))))))"
"(values"
" formals63_178"
" body64_179))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_149))))))"
"(values"
"(cons"
" formals72_175"
" formals_171)"
"(cons"
" body73_176"
" body_172))))))"
"(values"
" formals_173"
" body_174)))))"
"(for-loop_164"
" formals_169"
" body_170"
"(unsafe-cdr"
" lst_167))))"
"(values"
" formals_165"
" body_166)))))"
" for-loop_164)"
" null"
" null"
" lst_163)))))"
"(values"
"(alt-reverse formals_161)"
"(alt-reverse body_162))))))))))"
"(values case-lambda60_154 formals61_155 body62_156))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_149)))))"
"(values #t case-lambda57_150 formals58_151 body59_152))))))"
"(let-values(((ok?_134 case-lambda65_135 clause66_136)"
"(let-values(((s_184) disarmed-s_117))"
"(let-values(((orig-s_185) s_184))"
"(let-values(((case-lambda65_186 clause66_187)"
"(let-values(((s_188)(if(syntax?$1 s_184)(syntax-e$1 s_184) s_184)))"
"(if(pair? s_188)"
"(let-values(((case-lambda67_189)"
"(let-values(((s_191)(car s_188))) s_191))"
"((clause68_190)"
"(let-values(((s_192)(cdr s_188)))"
"(let-values(((s_193)"
"(if(syntax?$1 s_192)"
"(syntax-e$1 s_192)"
" s_192)))"
"(let-values(((flat-s_194)(to-syntax-list.1 s_193)))"
"(if(not flat-s_194)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_185))"
"(let-values() flat-s_194)))))))"
"(values case-lambda67_189 clause68_190))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_185)))))"
"(values #t case-lambda65_186 clause66_187))))))"
"(let-values(((s69_195) s_115)"
"((disarmed-s70_196) disarmed-s_117)"
"((temp71_197)"
"(list*"
" case-lambda57_119"
"(alt-reverse"
"(let-values(((lst_198) formals58_120)((lst_199) body59_121)((lst_200) clause66_136))"
"(begin"
"(if(list? lst_198)(void)(let-values()(in-list lst_198)))"
"(if(list? lst_199)(void)(let-values()(in-list lst_199)))"
"(if(list? lst_200)(void)(let-values()(in-list lst_200)))"
"((letrec-values(((for-loop_201)"
"(lambda(fold-var_202 lst_203 lst_204 lst_205)"
"(if(if(pair? lst_203)"
"(if(pair? lst_204)(pair? lst_205) #f)"
" #f)"
"(let-values(((formals_206)(unsafe-car lst_203))"
"((body_207)(unsafe-car lst_204))"
"((clause_208)(unsafe-car lst_205)))"
"(let-values(((fold-var_209)"
"(let-values(((fold-var_210) fold-var_202))"
"(let-values(((fold-var_211)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_214)"
"(expand-context-observer"
" ctx_116)))"
"(if obs_214"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_214"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-formals_212"
" exp-body_213)"
"(lambda-clause-expander"
" s_115"
" disarmed-s_117"
" formals_206"
" body_207"
" ctx_116"
" 'case-lambda-renames)))"
"(let-values(((clause74_215)"
" clause_208)"
"((clause75_216)"
" clause_208)"
"((temp76_217)"
"(list*"
" exp-formals_212"
" exp-body_213)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" clause74_215"
" clause75_216"
" temp76_217)"
"(rebuild53.1"
" clause74_215"
" clause75_216"
" temp76_217))))))"
" fold-var_210))))"
"(values fold-var_211)))))"
"(for-loop_201"
" fold-var_209"
"(unsafe-cdr lst_203)"
"(unsafe-cdr lst_204)"
"(unsafe-cdr lst_205))))"
" fold-var_202))))"
" for-loop_201)"
" null"
" lst_198"
" lst_199"
" lst_200)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s69_195 disarmed-s70_196 temp71_197)"
"(rebuild53.1 s69_195 disarmed-s70_196 temp71_197))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_218 sc_219 s_220)"
"((letrec-values(((loop_221)"
"(lambda(formals_222)"
"(if(identifier? formals_222)"
"(let-values()(list(add-scope formals_222 sc_219)))"
"(if(syntax?$1 formals_222)"
"(let-values()"
"(let-values(((p_223)(syntax-e$1 formals_222)))"
"(if(pair? p_223)"
"(let-values()(loop_221 p_223))"
"(if(null? p_223)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_220 p_223))))))"
"(if(pair? formals_222)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_222))"
"(void)"
"(let-values()"
"                                      (raise-syntax-error$1 #f \"not an identifier\" s_220 (car formals_222))))"
"(cons(add-scope(car formals_222) sc_219)(loop_221(cdr formals_222)))))"
"(if(null? formals_222)"
"(let-values() null)"
"(let-values()"
"                                  (raise-syntax-error$1 \"bad argument sequence\" s_220 all-formals_218)))))))))"
" loop_221)"
" all-formals_218)))"
"(define-values"
"(lifted/1.1$1)"
"(make-required 'make-let-values-form(case-lambda((self_224)(apply missing-kw self_224 null))) #f #f))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_225"
" rec?3_226"
" rec?8_227"
" renames-log-tag5_228"
" renames-log-tag10_229"
" split-by-reference?4_230"
" split-by-reference?9_231"
" syntaxes?2_232"
" syntaxes?7_233)"
"(let-values(((log-tag_234) log-tag1_225))"
"(let-values(((syntaxes?_235)(if syntaxes?7_233 syntaxes?2_232 #f)))"
"(let-values(((rec?_236)(if rec?8_227 rec?3_226 #f)))"
"(let-values(((split-by-reference?_237)(if split-by-reference?9_231 split-by-reference?4_230 #f)))"
"(let-values(((renames-log-tag_238)(if renames-log-tag10_229 renames-log-tag5_228 'let-renames)))"
"(let-values()"
"(lambda(s_239 ctx_240)"
"(let-values((()"
"(begin"
"(let-values(((obs_304)(expand-context-observer ctx_240)))"
"(if obs_304"
"(let-values()(let-values()(call-expand-observe obs_304 log-tag_234)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_241)(syntax-disarm$1 s_239)))"
"(let-values(((ok?_242"
" letrec-syntaxes+values77_243"
" id:trans78_244"
" trans-rhs79_245"
" id:val80_246"
" val-rhs81_247"
" body82_248)"
"(let-values(((s_305) disarmed-s_241))"
"(if(if syntaxes?_235 #t #f)"
"(let-values(((orig-s_306) s_305))"
"(let-values(((letrec-syntaxes+values77_307"
" id:trans78_308"
" trans-rhs79_309"
" id:val80_310"
" val-rhs81_311"
" body82_312)"
"(let-values(((s_313)"
"(if(syntax?$1 s_305)(syntax-e$1 s_305) s_305)))"
"(if(pair? s_313)"
"(let-values(((letrec-syntaxes+values83_314)"
"(let-values(((s_320)(car s_313))) s_320))"
"((id:trans84_315"
" trans-rhs85_316"
" id:val86_317"
" val-rhs87_318"
" body88_319)"
"(let-values(((s_321)(cdr s_313)))"
"(let-values(((s_322)"
"(if(syntax?$1 s_321)"
"(syntax-e$1 s_321)"
" s_321)))"
"(if(pair? s_322)"
"(let-values(((id:trans89_323"
" trans-rhs90_324)"
"(let-values(((s_328)"
"(car"
" s_322)))"
"(let-values(((s_329)"
"(if(syntax?$1"
" s_328)"
"(syntax-e$1"
" s_328)"
" s_328)))"
"(let-values(((flat-s_330)"
"(to-syntax-list.1"
" s_329)))"
"(if(not flat-s_330)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_306))"
"(let-values()"
"(let-values(((id:trans_331"
" trans-rhs_332)"
"(let-values(((lst_333)"
" flat-s_330))"
"(begin"
"(if(list?"
" lst_333)"
"(void)"
"(let-values()"
"(in-list"
" lst_333)))"
"((letrec-values(((for-loop_334)"
"(lambda(id:trans_335"
" trans-rhs_336"
" lst_337)"
"(if(pair?"
" lst_337)"
"(let-values(((s_338)"
"(unsafe-car"
" lst_337)))"
"(let-values(((id:trans_339"
" trans-rhs_340)"
"(let-values(((id:trans_341)"
" id:trans_335)"
"((trans-rhs_342)"
" trans-rhs_336))"
"(let-values(((id:trans_343"
" trans-rhs_344)"
"(let-values()"
"(let-values(((id:trans120_345"
" trans-rhs121_346)"
"(let-values()"
"(let-values(((s_347)"
"(if(syntax?$1"
" s_338)"
"(syntax-e$1"
" s_338)"
" s_338)))"
"(if(pair?"
" s_347)"
"(let-values(((id:trans94_348)"
"(let-values(((s_350)"
"(car"
" s_347)))"
"(let-values(((s_351)"
"(if(syntax?$1"
" s_350)"
"(syntax-e$1"
" s_350)"
" s_350)))"
"(let-values(((flat-s_352)"
"(to-syntax-list.1"
" s_351)))"
"(if(not"
" flat-s_352)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_306))"
"(let-values()"
"(let-values(((id:trans_353)"
"(let-values(((lst_354)"
" flat-s_352))"
"(begin"
"(if(list?"
" lst_354)"
"(void)"
"(let-values()"
"(in-list"
" lst_354)))"
"((letrec-values(((for-loop_355)"
"(lambda(id:trans_356"
" lst_357)"
"(if(pair?"
" lst_357)"
"(let-values(((s_358)"
"(unsafe-car"
" lst_357)))"
"(let-values(((id:trans_359)"
"(let-values(((id:trans_360)"
" id:trans_356))"
"(let-values(((id:trans_361)"
"(let-values()"
"(let-values(((id:trans122_362)"
"(let-values()"
"(if(let-values(((or-part_363)"
"(if(syntax?$1"
" s_358)"
"(symbol?"
"(syntax-e$1"
" s_358))"
" #f)))"
"(if or-part_363"
" or-part_363"
"(symbol?"
" s_358)))"
" s_358"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_306"
" s_358)))))"
"(cons"
" id:trans122_362"
" id:trans_360)))))"
"(values"
" id:trans_361)))))"
"(for-loop_355"
" id:trans_359"
"(unsafe-cdr"
" lst_357))))"
" id:trans_356))))"
" for-loop_355)"
" null"
" lst_354)))))"
"(alt-reverse"
" id:trans_353))))))))"
"((trans-rhs95_349)"
"(let-values(((s_364)"
"(cdr"
" s_347)))"
"(let-values(((s_365)"
"(if(syntax?$1"
" s_364)"
"(syntax-e$1"
" s_364)"
" s_364)))"
"(if(pair?"
" s_365)"
"(let-values(((trans-rhs96_366)"
"(let-values(((s_367)"
"(car"
" s_365)))"
" s_367))"
"(()"
"(let-values(((s_368)"
"(cdr"
" s_365)))"
"(let-values(((s_369)"
"(if(syntax?$1"
" s_368)"
"(syntax-e$1"
" s_368)"
" s_368)))"
"(if(null?"
" s_369)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_306))))))"
"(values"
" trans-rhs96_366))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_306))))))"
"(values"
" id:trans94_348"
" trans-rhs95_349))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_306))))))"
"(values"
"(cons"
" id:trans120_345"
" id:trans_341)"
"(cons"
" trans-rhs121_346"
" trans-rhs_342))))))"
"(values"
" id:trans_343"
" trans-rhs_344)))))"
"(for-loop_334"
" id:trans_339"
" trans-rhs_340"
"(unsafe-cdr"
" lst_337))))"
"(values"
" id:trans_335"
" trans-rhs_336)))))"
" for-loop_334)"
" null"
" null"
" lst_333)))))"
"(values"
"(alt-reverse"
" id:trans_331)"
"(alt-reverse"
" trans-rhs_332)))))))))"
"((id:val91_325"
" val-rhs92_326"
" body93_327)"
"(let-values(((s_370)"
"(cdr"
" s_322)))"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_370)"
"(syntax-e$1"
" s_370)"
" s_370)))"
"(if(pair? s_371)"
"(let-values(((id:val97_372"
" val-rhs98_373)"
"(let-values(((s_375)"
"(car"
" s_371)))"
"(let-values(((s_376)"
"(if(syntax?$1"
" s_375)"
"(syntax-e$1"
" s_375)"
" s_375)))"
"(let-values(((flat-s_377)"
"(to-syntax-list.1"
" s_376)))"
"(if(not"
" flat-s_377)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_306))"
"(let-values()"
"(let-values(((id:val_378"
" val-rhs_379)"
"(let-values(((lst_380)"
" flat-s_377))"
"(begin"
"(if(list?"
" lst_380)"
"(void)"
"(let-values()"
"(in-list"
" lst_380)))"
"((letrec-values(((for-loop_381)"
"(lambda(id:val_382"
" val-rhs_383"
" lst_384)"
"(if(pair?"
" lst_384)"
"(let-values(((s_385)"
"(unsafe-car"
" lst_384)))"
"(let-values(((id:val_386"
" val-rhs_387)"
"(let-values(((id:val_388)"
" id:val_382)"
"((val-rhs_389)"
" val-rhs_383))"
"(let-values(((id:val_390"
" val-rhs_391)"
"(let-values()"
"(let-values(((id:val123_392"
" val-rhs124_393)"
"(let-values()"
"(let-values(((s_394)"
"(if(syntax?$1"
" s_385)"
"(syntax-e$1"
" s_385)"
" s_385)))"
"(if(pair?"
" s_394)"
"(let-values(((id:val100_395)"
"(let-values(((s_397)"
"(car"
" s_394)))"
"(let-values(((s_398)"
"(if(syntax?$1"
" s_397)"
"(syntax-e$1"
" s_397)"
" s_397)))"
"(let-values(((flat-s_399)"
"(to-syntax-list.1"
" s_398)))"
"(if(not"
" flat-s_399)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_306))"
"(let-values()"
"(let-values(((id:val_400)"
"(let-values(((lst_401)"
" flat-s_399))"
"(begin"
"(if(list?"
" lst_401)"
"(void)"
"(let-values()"
"(in-list"
" lst_401)))"
"((letrec-values(((for-loop_402)"
"(lambda(id:val_403"
" lst_404)"
"(if(pair?"
" lst_404)"
"(let-values(((s_405)"
"(unsafe-car"
" lst_404)))"
"(let-values(((id:val_406)"
"(let-values(((id:val_407)"
" id:val_403))"
"(let-values(((id:val_408)"
"(let-values()"
"(let-values(((id:val125_409)"
"(let-values()"
"(if(let-values(((or-part_410)"
"(if(syntax?$1"
" s_405)"
"(symbol?"
"(syntax-e$1"
" s_405))"
" #f)))"
"(if or-part_410"
" or-part_410"
"(symbol?"
" s_405)))"
" s_405"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_306"
" s_405)))))"
"(cons"
" id:val125_409"
" id:val_407)))))"
"(values"
" id:val_408)))))"
"(for-loop_402"
" id:val_406"
"(unsafe-cdr"
" lst_404))))"
" id:val_403))))"
" for-loop_402)"
" null"
" lst_401)))))"
"(alt-reverse"
" id:val_400))))))))"
"((val-rhs101_396)"
"(let-values(((s_411)"
"(cdr"
" s_394)))"
"(let-values(((s_412)"
"(if(syntax?$1"
" s_411)"
"(syntax-e$1"
" s_411)"
" s_411)))"
"(if(pair?"
" s_412)"
"(let-values(((val-rhs102_413)"
"(let-values(((s_414)"
"(car"
" s_412)))"
" s_414))"
"(()"
"(let-values(((s_415)"
"(cdr"
" s_412)))"
"(let-values(((s_416)"
"(if(syntax?$1"
" s_415)"
"(syntax-e$1"
" s_415)"
" s_415)))"
"(if(null?"
" s_416)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_306))))))"
"(values"
" val-rhs102_413))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_306))))))"
"(values"
" id:val100_395"
" val-rhs101_396))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_306))))))"
"(values"
"(cons"
" id:val123_392"
" id:val_388)"
"(cons"
" val-rhs124_393"
" val-rhs_389))))))"
"(values"
" id:val_390"
" val-rhs_391)))))"
"(for-loop_381"
" id:val_386"
" val-rhs_387"
"(unsafe-cdr"
" lst_384))))"
"(values"
" id:val_382"
" val-rhs_383)))))"
" for-loop_381)"
" null"
" null"
" lst_380)))))"
"(values"
"(alt-reverse"
" id:val_378)"
"(alt-reverse"
" val-rhs_379)))))))))"
"((body99_374)"
"(let-values(((s_417)"
"(cdr"
" s_371)))"
"(let-values(((s_418)"
"(if(syntax?$1"
" s_417)"
"(syntax-e$1"
" s_417)"
" s_417)))"
"(let-values(((flat-s_419)"
"(to-syntax-list.1"
" s_418)))"
"(if(not"
" flat-s_419)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_306))"
"(if(null?"
" flat-s_419)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_306))"
"(let-values()"
" flat-s_419))))))))"
"(values"
" id:val97_372"
" val-rhs98_373"
" body99_374))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_306))))))"
"(values"
" id:trans89_323"
" trans-rhs90_324"
" id:val91_325"
" val-rhs92_326"
" body93_327))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_306))))))"
"(values"
" letrec-syntaxes+values83_314"
" id:trans84_315"
" trans-rhs85_316"
" id:val86_317"
" val-rhs87_318"
" body88_319))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_306)))))"
"(values"
" #t"
" letrec-syntaxes+values77_307"
" id:trans78_308"
" trans-rhs79_309"
" id:val80_310"
" val-rhs81_311"
" body82_312)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_267 let-values103_268 id:val104_269 val-rhs105_270 body106_271)"
"(let-values(((s_420) disarmed-s_241))"
"(if(if(not syntaxes?_235) #t #f)"
"(let-values(((orig-s_421) s_420))"
"(let-values(((let-values103_422 id:val104_423 val-rhs105_424 body106_425)"
"(let-values(((s_426)"
"(if(syntax?$1 s_420)"
"(syntax-e$1 s_420)"
" s_420)))"
"(if(pair? s_426)"
"(let-values(((let-values107_427)"
"(let-values(((s_431)(car s_426))) s_431))"
"((id:val108_428 val-rhs109_429 body110_430)"
"(let-values(((s_432)(cdr s_426)))"
"(let-values(((s_433)"
"(if(syntax?$1 s_432)"
"(syntax-e$1 s_432)"
" s_432)))"
"(if(pair? s_433)"
"(let-values(((id:val111_434"
" val-rhs112_435)"
"(let-values(((s_437)"
"(car"
" s_433)))"
"(let-values(((s_438)"
"(if(syntax?$1"
" s_437)"
"(syntax-e$1"
" s_437)"
" s_437)))"
"(let-values(((flat-s_439)"
"(to-syntax-list.1"
" s_438)))"
"(if(not"
" flat-s_439)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_421))"
"(let-values()"
"(let-values(((id:val_440"
" val-rhs_441)"
"(let-values(((lst_442)"
" flat-s_439))"
"(begin"
"(if(list?"
" lst_442)"
"(void)"
"(let-values()"
"(in-list"
" lst_442)))"
"((letrec-values(((for-loop_443)"
"(lambda(id:val_444"
" val-rhs_445"
" lst_446)"
"(if(pair?"
" lst_446)"
"(let-values(((s_447)"
"(unsafe-car"
" lst_446)))"
"(let-values(((id:val_448"
" val-rhs_449)"
"(let-values(((id:val_450)"
" id:val_444)"
"((val-rhs_451)"
" val-rhs_445))"
"(let-values(((id:val_452"
" val-rhs_453)"
"(let-values()"
"(let-values(((id:val126_454"
" val-rhs127_455)"
"(let-values()"
"(let-values(((s_456)"
"(if(syntax?$1"
" s_447)"
"(syntax-e$1"
" s_447)"
" s_447)))"
"(if(pair?"
" s_456)"
"(let-values(((id:val114_457)"
"(let-values(((s_459)"
"(car"
" s_456)))"
"(let-values(((s_460)"
"(if(syntax?$1"
" s_459)"
"(syntax-e$1"
" s_459)"
" s_459)))"
"(let-values(((flat-s_461)"
"(to-syntax-list.1"
" s_460)))"
"(if(not"
" flat-s_461)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_421))"
"(let-values()"
"(let-values(((id:val_462)"
"(let-values(((lst_463)"
" flat-s_461))"
"(begin"
"(if(list?"
" lst_463)"
"(void)"
"(let-values()"
"(in-list"
" lst_463)))"
"((letrec-values(((for-loop_464)"
"(lambda(id:val_465"
" lst_466)"
"(if(pair?"
" lst_466)"
"(let-values(((s_467)"
"(unsafe-car"
" lst_466)))"
"(let-values(((id:val_468)"
"(let-values(((id:val_469)"
" id:val_465))"
"(let-values(((id:val_470)"
"(let-values()"
"(let-values(((id:val128_471)"
"(let-values()"
"(if(let-values(((or-part_472)"
"(if(syntax?$1"
" s_467)"
"(symbol?"
"(syntax-e$1"
" s_467))"
" #f)))"
"(if or-part_472"
" or-part_472"
"(symbol?"
" s_467)))"
" s_467"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_421"
" s_467)))))"
"(cons"
" id:val128_471"
" id:val_469)))))"
"(values"
" id:val_470)))))"
"(for-loop_464"
" id:val_468"
"(unsafe-cdr"
" lst_466))))"
" id:val_465))))"
" for-loop_464)"
" null"
" lst_463)))))"
"(alt-reverse"
" id:val_462))))))))"
"((val-rhs115_458)"
"(let-values(((s_473)"
"(cdr"
" s_456)))"
"(let-values(((s_474)"
"(if(syntax?$1"
" s_473)"
"(syntax-e$1"
" s_473)"
" s_473)))"
"(if(pair?"
" s_474)"
"(let-values(((val-rhs116_475)"
"(let-values(((s_476)"
"(car"
" s_474)))"
" s_476))"
"(()"
"(let-values(((s_477)"
"(cdr"
" s_474)))"
"(let-values(((s_478)"
"(if(syntax?$1"
" s_477)"
"(syntax-e$1"
" s_477)"
" s_477)))"
"(if(null?"
" s_478)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_421))))))"
"(values"
" val-rhs116_475))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_421))))))"
"(values"
" id:val114_457"
" val-rhs115_458))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_421))))))"
"(values"
"(cons"
" id:val126_454"
" id:val_450)"
"(cons"
" val-rhs127_455"
" val-rhs_451))))))"
"(values"
" id:val_452"
" val-rhs_453)))))"
"(for-loop_443"
" id:val_448"
" val-rhs_449"
"(unsafe-cdr"
" lst_446))))"
"(values"
" id:val_444"
" val-rhs_445)))))"
" for-loop_443)"
" null"
" null"
" lst_442)))))"
"(values"
"(alt-reverse"
" id:val_440)"
"(alt-reverse"
" val-rhs_441)))))))))"
"((body113_436)"
"(let-values(((s_479)"
"(cdr"
" s_433)))"
"(let-values(((s_480)"
"(if(syntax?$1"
" s_479)"
"(syntax-e$1"
" s_479)"
" s_479)))"
"(let-values(((flat-s_481)"
"(to-syntax-list.1"
" s_480)))"
"(if(not"
" flat-s_481)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_421))"
"(if(null?"
" flat-s_481)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_421))"
"(let-values()"
" flat-s_481))))))))"
"(values"
" id:val111_434"
" val-rhs112_435"
" body113_436))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_421))))))"
"(values"
" let-values107_427"
" id:val108_428"
" val-rhs109_429"
" body110_430))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_421)))))"
"(values #t let-values103_422 id:val104_423 val-rhs105_424 body106_425)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_286)(new-scope 'local)))"
"(let-values(((phase_287)(expand-context-phase ctx_240)))"
"(let-values(((frame-id_288)(if syntaxes?_235(make-reference-record) #f)))"
"(let-values(((trans-idss_289)"
"(alt-reverse"
"(let-values(((lst_482)(if syntaxes?_235 id:trans78_244 null)))"
"(begin"
"(if(list? lst_482)(void)(let-values()(in-list lst_482)))"
"((letrec-values(((for-loop_483)"
"(lambda(fold-var_484 lst_485)"
"(if(pair? lst_485)"
"(let-values(((ids_486)(unsafe-car lst_485)))"
"(let-values(((fold-var_487)"
"(let-values(((fold-var_488)"
" fold-var_484))"
"(let-values(((fold-var_489)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_490)"
" ids_486))"
"(begin"
"(if(list?"
" lst_490)"
"(void)"
"(let-values()"
"(in-list"
" lst_490)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" lst_493)"
"(if(pair?"
" lst_493)"
"(let-values(((id_494)"
"(unsafe-car"
" lst_493)))"
"(let-values(((fold-var_495)"
"(let-values(((fold-var_496)"
" fold-var_492))"
"(let-values(((fold-var_497)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_494"
" sc_286))"
" fold-var_496))))"
"(values"
" fold-var_497)))))"
"(for-loop_491"
" fold-var_495"
"(unsafe-cdr"
" lst_493))))"
" fold-var_492))))"
" for-loop_491)"
" null"
" lst_490)))))"
" fold-var_488))))"
"(values fold-var_489)))))"
"(for-loop_483"
" fold-var_487"
"(unsafe-cdr lst_485))))"
" fold-var_484))))"
" for-loop_483)"
" null"
" lst_482))))))"
"(let-values(((val-idss_290)"
"(alt-reverse"
"(let-values(((lst_498)(if syntaxes?_235 id:val80_246 id:val104_269)))"
"(begin"
"(if(list? lst_498)(void)(let-values()(in-list lst_498)))"
"((letrec-values(((for-loop_499)"
"(lambda(fold-var_500 lst_501)"
"(if(pair? lst_501)"
"(let-values(((ids_502)"
"(unsafe-car lst_501)))"
"(let-values(((fold-var_503)"
"(let-values(((fold-var_504)"
" fold-var_500))"
"(let-values(((fold-var_505)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_506)"
" ids_502))"
"(begin"
"(if(list?"
" lst_506)"
"(void)"
"(let-values()"
"(in-list"
" lst_506)))"
"((letrec-values(((for-loop_507)"
"(lambda(fold-var_508"
" lst_509)"
"(if(pair?"
" lst_509)"
"(let-values(((id_510)"
"(unsafe-car"
" lst_509)))"
"(let-values(((fold-var_511)"
"(let-values(((fold-var_512)"
" fold-var_508))"
"(let-values(((fold-var_513)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_510"
" sc_286))"
" fold-var_512))))"
"(values"
" fold-var_513)))))"
"(for-loop_507"
" fold-var_511"
"(unsafe-cdr"
" lst_509))))"
" fold-var_508))))"
" for-loop_507)"
" null"
" lst_506)))))"
" fold-var_504))))"
"(values fold-var_505)))))"
"(for-loop_499"
" fold-var_503"
"(unsafe-cdr lst_501))))"
" fold-var_500))))"
" for-loop_499)"
" null"
" lst_498))))))"
"(let-values((()"
"(begin"
"(let-values(((temp117_514)(list trans-idss_289 val-idss_290))"
"((phase118_515) phase_287)"
"((s119_516) s_239))"
"(if(variable-reference-constant?"
"(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp117_514"
" phase118_515"
" s119_516"
" #f"
" #f)"
"(check-no-duplicate-ids10.1 temp117_514 phase118_515 s119_516)))"
"(values))))"
"(let-values(((counter_291)(root-expand-context-counter ctx_240)))"
"(let-values(((trans-keyss_292)"
"(alt-reverse"
"(let-values(((lst_517) trans-idss_289))"
"(begin"
"(if(list? lst_517)(void)(let-values()(in-list lst_517)))"
"((letrec-values(((for-loop_518)"
"(lambda(fold-var_519 lst_520)"
"(if(pair? lst_520)"
"(let-values(((ids_521)"
"(unsafe-car lst_520)))"
"(let-values(((fold-var_522)"
"(let-values(((fold-var_523)"
" fold-var_519))"
"(let-values(((fold-var_524)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_525)"
" ids_521))"
"(begin"
"(if(list?"
" lst_525)"
"(void)"
"(let-values()"
"(in-list"
" lst_525)))"
"((letrec-values(((for-loop_526)"
"(lambda(fold-var_527"
" lst_528)"
"(if(pair?"
" lst_528)"
"(let-values(((id_529)"
"(unsafe-car"
" lst_528)))"
"(let-values(((fold-var_530)"
"(let-values(((fold-var_531)"
" fold-var_527))"
"(let-values(((fold-var_532)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:157:27_533)"
" add-local-binding!37.1)"
"((id129_534)"
" id_529)"
"((phase130_535)"
" phase_287)"
"((counter131_536)"
" counter_291)"
"((frame-id132_537)"
" frame-id_288)"
"((s133_538)"
" s_239))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" frame-id132_537"
" #t"
" s133_538"
" #t"
" id129_534"
" phase130_535"
" counter131_536)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:157:27_533"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id132_537"
" s133_538)"
" id129_534"
" phase130_535"
" counter131_536))))"
" fold-var_531))))"
"(values"
" fold-var_532)))))"
"(for-loop_526"
" fold-var_530"
"(unsafe-cdr"
" lst_528))))"
" fold-var_527))))"
" for-loop_526)"
" null"
" lst_525)))))"
" fold-var_523))))"
"(values"
" fold-var_524)))))"
"(for-loop_518"
" fold-var_522"
"(unsafe-cdr lst_520))))"
" fold-var_519))))"
" for-loop_518)"
" null"
" lst_517))))))"
"(let-values(((val-keyss_293)"
"(alt-reverse"
"(let-values(((lst_539) val-idss_290))"
"(begin"
"(if(list? lst_539)"
"(void)"
"(let-values()(in-list lst_539)))"
"((letrec-values(((for-loop_540)"
"(lambda(fold-var_541 lst_542)"
"(if(pair? lst_542)"
"(let-values(((ids_543)"
"(unsafe-car lst_542)))"
"(let-values(((fold-var_544)"
"(let-values(((fold-var_545)"
" fold-var_541))"
"(let-values(((fold-var_546)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_547)"
" ids_543))"
"(begin"
"(if(list?"
" lst_547)"
"(void)"
"(let-values()"
"(in-list"
" lst_547)))"
"((letrec-values(((for-loop_548)"
"(lambda(fold-var_549"
" lst_550)"
"(if(pair?"
" lst_550)"
"(let-values(((id_551)"
"(unsafe-car"
" lst_550)))"
"(let-values(((fold-var_552)"
"(let-values(((fold-var_553)"
" fold-var_549))"
"(let-values(((fold-var_554)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:160:25_555)"
" add-local-binding!37.1)"
"((id134_556)"
" id_551)"
"((phase135_557)"
" phase_287)"
"((counter136_558)"
" counter_291)"
"((frame-id137_559)"
" frame-id_288)"
"((s138_560)"
" s_239))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" frame-id137_559"
" #t"
" s138_560"
" #t"
" id134_556"
" phase135_557"
" counter136_558)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:160:25_555"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id137_559"
" s138_560)"
" id134_556"
" phase135_557"
" counter136_558))))"
" fold-var_553))))"
"(values"
" fold-var_554)))))"
"(for-loop_548"
" fold-var_552"
"(unsafe-cdr"
" lst_550))))"
" fold-var_549))))"
" for-loop_548)"
" null"
" lst_547)))))"
" fold-var_545))))"
"(values"
" fold-var_546)))))"
"(for-loop_540"
" fold-var_544"
"(unsafe-cdr lst_542))))"
" fold-var_541))))"
" for-loop_540)"
" null"
" lst_539))))))"
"(let-values(((bodys_294)"
"(alt-reverse"
"(let-values(((lst_561)"
"(if syntaxes?_235 body82_248 body106_271)))"
"(begin"
"(if(list? lst_561)"
"(void)"
"(let-values()(in-list lst_561)))"
"((letrec-values(((for-loop_562)"
"(lambda(fold-var_563 lst_564)"
"(if(pair? lst_564)"
"(let-values(((body_565)"
"(unsafe-car"
" lst_564)))"
"(let-values(((fold-var_566)"
"(let-values(((fold-var_567)"
" fold-var_563))"
"(let-values(((fold-var_568)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_565"
" sc_286))"
" fold-var_567))))"
"(values"
" fold-var_568)))))"
"(for-loop_562"
" fold-var_566"
"(unsafe-cdr lst_564))))"
" fold-var_563))))"
" for-loop_562)"
" null"
" lst_561))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_569)"
"(expand-context-observer ctx_240)))"
"(if obs_569"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_569"
" renames-log-tag_238"
" val-idss_290"
"(datum->syntax$1 #f bodys_294))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_235"
"(let-values()"
"(begin"
"(let-values(((obs_570)"
"(expand-context-observer ctx_240)))"
"(if obs_570"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_570"
" 'prepare-env)))"
"(void)))"
"(let-values(((obs_571)"
"(expand-context-observer ctx_240)))"
"(if obs_571"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_571"
" 'enter-bind)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_295)"
"(alt-reverse"
"(let-values(((lst_572)"
"(if syntaxes?_235 trans-rhs79_245 '()))"
"((lst_573) trans-idss_289))"
"(begin"
"(if(list? lst_572)"
"(void)"
"(let-values()(in-list lst_572)))"
"(if(list? lst_573)"
"(void)"
"(let-values()(in-list lst_573)))"
"((letrec-values(((for-loop_574)"
"(lambda(fold-var_575"
" lst_576"
" lst_577)"
"(if(if(pair? lst_576)"
"(pair? lst_577)"
" #f)"
"(let-values(((rhs_578)"
"(unsafe-car"
" lst_576))"
"((ids_579)"
"(unsafe-car"
" lst_577)))"
"(let-values(((fold-var_580)"
"(let-values(((fold-var_581)"
" fold-var_575))"
"(let-values(((fold-var_582)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_583)"
"(expand-context-observer"
" ctx_240)))"
"(if obs_583"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_583"
" 'next)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_578"
" sc_286)"
" ids_579"
" ctx_240)))"
" fold-var_581))))"
"(values"
" fold-var_582)))))"
"(for-loop_574"
" fold-var_580"
"(unsafe-cdr lst_576)"
"(unsafe-cdr lst_577))))"
" fold-var_575))))"
" for-loop_574)"
" null"
" lst_572"
" lst_573))))))"
"(let-values(((rec-val-env_296)"
"(let-values(((lst_584) val-keyss_293)"
"((lst_585) val-idss_290))"
"(begin"
"(if(list? lst_584)"
"(void)"
"(let-values()(in-list lst_584)))"
"(if(list? lst_585)"
"(void)"
"(let-values()(in-list lst_585)))"
"((letrec-values(((for-loop_586)"
"(lambda(env_587"
" lst_588"
" lst_589)"
"(if(if(pair? lst_588)"
"(pair? lst_589)"
" #f)"
"(let-values(((keys_590)"
"(unsafe-car"
" lst_588))"
"((ids_591)"
"(unsafe-car"
" lst_589)))"
"(let-values(((env_592)"
"(let-values(((env_593)"
" env_587))"
"(let-values(((lst_594)"
" keys_590)"
"((lst_595)"
" ids_591))"
"(begin"
"(if(list?"
" lst_594)"
"(void)"
"(let-values()"
"(in-list"
" lst_594)))"
"(if(list?"
" lst_595)"
"(void)"
"(let-values()"
"(in-list"
" lst_595)))"
"((letrec-values(((for-loop_596)"
"(lambda(env_597"
" lst_598"
" lst_599)"
"(if(if(pair?"
" lst_598)"
"(pair?"
" lst_599)"
" #f)"
"(let-values(((key_600)"
"(unsafe-car"
" lst_598))"
"((id_601)"
"(unsafe-car"
" lst_599)))"
"(let-values(((env_602)"
"(let-values(((env_603)"
" env_597))"
"(let-values(((env_604)"
"(let-values()"
"(env-extend"
" env_603"
" key_600"
"(local-variable1.1"
" id_601)))))"
"(values"
" env_604)))))"
"(for-loop_596"
" env_602"
"(unsafe-cdr"
" lst_598)"
"(unsafe-cdr"
" lst_599))))"
" env_597))))"
" for-loop_596)"
" env_593"
" lst_594"
" lst_595))))))"
"(for-loop_586"
" env_592"
"(unsafe-cdr lst_588)"
"(unsafe-cdr lst_589))))"
" env_587))))"
" for-loop_586)"
"(expand-context-env ctx_240)"
" lst_584"
" lst_585)))))"
"(let-values(((rec-env_297)"
"(let-values(((lst_605) trans-keyss_292)"
"((lst_606) trans-valss_295)"
"((lst_607) trans-idss_289))"
"(begin"
"(if(list? lst_605)"
"(void)"
"(let-values()(in-list lst_605)))"
"(if(list? lst_606)"
"(void)"
"(let-values()(in-list lst_606)))"
"(if(list? lst_607)"
"(void)"
"(let-values()(in-list lst_607)))"
"((letrec-values(((for-loop_608)"
"(lambda(env_609"
" lst_610"
" lst_611"
" lst_612)"
"(if(if(pair? lst_610)"
"(if(pair? lst_611)"
"(pair? lst_612)"
" #f)"
" #f)"
"(let-values(((keys_613)"
"(unsafe-car"
" lst_610))"
"((vals_614)"
"(unsafe-car"
" lst_611))"
"((ids_615)"
"(unsafe-car"
" lst_612)))"
"(let-values(((env_616)"
"(let-values(((env_617)"
" env_609))"
"(let-values(((env_618)"
"(let-values()"
"(let-values(((lst_619)"
" keys_613)"
"((lst_620)"
" vals_614)"
"((lst_621)"
" ids_615))"
"(begin"
"(if(list?"
" lst_619)"
"(void)"
"(let-values()"
"(in-list"
" lst_619)))"
"(if(list?"
" lst_620)"
"(void)"
"(let-values()"
"(in-list"
" lst_620)))"
"(if(list?"
" lst_621)"
"(void)"
"(let-values()"
"(in-list"
" lst_621)))"
"((letrec-values(((for-loop_622)"
"(lambda(env_623"
" lst_624"
" lst_625"
" lst_626)"
"(if(if(pair?"
" lst_624)"
"(if(pair?"
" lst_625)"
"(pair?"
" lst_626)"
" #f)"
" #f)"
"(let-values(((key_627)"
"(unsafe-car"
" lst_624))"
"((val_628)"
"(unsafe-car"
" lst_625))"
"((id_629)"
"(unsafe-car"
" lst_626)))"
"(let-values(((env_630)"
"(let-values(((env_631)"
" env_623))"
"(let-values(((env_632)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_628"
" id_629"
" phase_287)"
"(env-extend"
" env_631"
" key_627"
" val_628)))))"
"(values"
" env_632)))))"
"(for-loop_622"
" env_630"
"(unsafe-cdr"
" lst_624)"
"(unsafe-cdr"
" lst_625)"
"(unsafe-cdr"
" lst_626))))"
" env_623))))"
" for-loop_622)"
" env_617"
" lst_619"
" lst_620"
" lst_621))))))"
"(values"
" env_618)))))"
"(for-loop_608"
" env_616"
"(unsafe-cdr lst_610)"
"(unsafe-cdr lst_611)"
"(unsafe-cdr"
" lst_612))))"
" env_609))))"
" for-loop_608)"
" rec-val-env_296"
" lst_605"
" lst_606"
" lst_607)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_235"
"(let-values()"
"(let-values(((obs_633)"
"(expand-context-observer"
" ctx_240)))"
"(if obs_633"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_633"
" 'exit-bind)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_298)(as-expression-context ctx_240)))"
"(let-values(((orig-rrs_299)"
"(expand-context-reference-records"
" expr-ctx_298)))"
"(let-values(((rec-ctx_300)"
"(let-values(((the-struct_634)"
" expr-ctx_298))"
"(if(expand-context? the-struct_634)"
"(let-values(((env139_635) rec-env_297)"
"((scopes140_636)"
"(cons"
" sc_286"
"(expand-context-scopes"
" ctx_240)))"
"((reference-records141_637)"
"(if split-by-reference?_237"
"(cons"
" frame-id_288"
" orig-rrs_299)"
" orig-rrs_299))"
"((binding-layer142_638)"
"(increment-binding-layer"
"(cons"
" trans-idss_289"
" val-idss_290)"
" ctx_240)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_634)"
"(root-expand-context-post-expansion-scope"
" the-struct_634)"
"(root-expand-context-top-level-bind-scope"
" the-struct_634)"
"(root-expand-context-all-scopes-stx"
" the-struct_634)"
"(root-expand-context-use-site-scopes"
" the-struct_634)"
"(root-expand-context-defined-syms"
" the-struct_634)"
"(root-expand-context-frame-id"
" the-struct_634)"
"(root-expand-context-counter"
" the-struct_634)"
"(root-expand-context-lift-key"
" the-struct_634)"
"(expand-context-context"
" the-struct_634)"
"(expand-context-phase the-struct_634)"
"(expand-context-namespace"
" the-struct_634)"
" env139_635"
"(expand-context-user-env"
" the-struct_634)"
"(expand-context-post-expansion-scope-action"
" the-struct_634)"
" scopes140_636"
"(expand-context-def-ctx-scopes"
" the-struct_634)"
" binding-layer142_638"
" reference-records141_637"
"(expand-context-only-immediate?"
" the-struct_634)"
"(expand-context-just-once?"
" the-struct_634)"
"(expand-context-module-begin-k"
" the-struct_634)"
"(expand-context-need-eventually-defined"
" the-struct_634)"
"(expand-context-allow-unbound?"
" the-struct_634)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_634)"
"(expand-context-stops the-struct_634)"
"(expand-context-current-introduction-scopes"
" the-struct_634)"
"(expand-context-declared-submodule-names"
" the-struct_634)"
"(expand-context-lifts the-struct_634)"
"(expand-context-lift-envs"
" the-struct_634)"
"(expand-context-module-lifts"
" the-struct_634)"
"(expand-context-require-lifts"
" the-struct_634)"
"(expand-context-to-module-lifts"
" the-struct_634)"
"(expand-context-requires+provides"
" the-struct_634)"
"(expand-context-name the-struct_634)"
"(expand-context-observer"
" the-struct_634)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"expand-context?\""
" the-struct_634)))))"
"(let-values(((letrec-values-id_301)"
"(if syntaxes?_235"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_287)"
" 'letrec-values)"
" let-values103_268)))"
"(let-values(((get-body_302)"
"(lambda()"
"(let-values((()"
"(begin"
"(let-values(((obs_640)"
"(expand-context-observer"
" ctx_240)))"
"(if obs_640"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_640"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_639)"
"(let-values(((the-struct_641)"
" rec-ctx_300))"
"(if(expand-context?"
" the-struct_641)"
"(let-values(((reference-records147_642)"
" orig-rrs_299))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_641)"
"(root-expand-context-post-expansion-scope"
" the-struct_641)"
"(root-expand-context-top-level-bind-scope"
" the-struct_641)"
"(root-expand-context-all-scopes-stx"
" the-struct_641)"
"(root-expand-context-use-site-scopes"
" the-struct_641)"
"(root-expand-context-defined-syms"
" the-struct_641)"
"(root-expand-context-frame-id"
" the-struct_641)"
"(root-expand-context-counter"
" the-struct_641)"
"(root-expand-context-lift-key"
" the-struct_641)"
"(expand-context-context"
" the-struct_641)"
"(expand-context-phase"
" the-struct_641)"
"(expand-context-namespace"
" the-struct_641)"
"(expand-context-env"
" the-struct_641)"
"(expand-context-user-env"
" the-struct_641)"
"(expand-context-post-expansion-scope-action"
" the-struct_641)"
"(expand-context-scopes"
" the-struct_641)"
"(expand-context-def-ctx-scopes"
" the-struct_641)"
"(expand-context-binding-layer"
" the-struct_641)"
" reference-records147_642"
"(expand-context-only-immediate?"
" the-struct_641)"
"(expand-context-just-once?"
" the-struct_641)"
"(expand-context-module-begin-k"
" the-struct_641)"
"(expand-context-need-eventually-defined"
" the-struct_641)"
"(expand-context-allow-unbound?"
" the-struct_641)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_641)"
"(expand-context-stops"
" the-struct_641)"
"(expand-context-current-introduction-scopes"
" the-struct_641)"
"(expand-context-declared-submodule-names"
" the-struct_641)"
"(expand-context-lifts"
" the-struct_641)"
"(expand-context-lift-envs"
" the-struct_641)"
"(expand-context-module-lifts"
" the-struct_641)"
"(expand-context-require-lifts"
" the-struct_641)"
"(expand-context-to-module-lifts"
" the-struct_641)"
"(expand-context-requires+provides"
" the-struct_641)"
"(expand-context-name"
" the-struct_641)"
"(expand-context-observer"
" the-struct_641)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"expand-context?\""
" the-struct_641)))))"
"(let-values(((...nder/expand/expr.rkt:212:5_643)"
" expand-body11.1)"
"((bodys143_644)"
" bodys_294)"
"((temp144_645)"
"(let-values(((...nder/expand/expr.rkt:212:24_648)"
" as-tail-context14.1)"
"((body-ctx148_649)"
" body-ctx_639)"
"((ctx149_650)"
" ctx_240))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx149_650"
" body-ctx148_649)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:212:24_648"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx149_650)"
" body-ctx148_649))))"
"((s145_646) s_239)"
"((disarmed-s146_647)"
" disarmed-s_241))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-body11.1))"
"(expand-body9.1"
" disarmed-s146_647"
" s145_646"
" #f"
" #f"
" bodys143_644"
" temp144_645)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:212:5_643"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source)"
" 4)"
" '(#:disarmed-source #:source)"
"(list"
" disarmed-s146_647"
" s145_646)"
" bodys143_644"
" temp144_645))))))))"
"(let-values(((result-s_303)"
"(if(not split-by-reference?_237)"
"(let-values()"
"(let-values(((s150_651) s_239)"
"((disarmed-s151_652)"
" disarmed-s_241)"
"((temp152_653)"
"(list*"
" letrec-values-id_301"
"(alt-reverse"
"(let-values(((lst_654)"
" val-idss_290)"
"((lst_655)"
"(if syntaxes?_235"
" val-rhs81_247"
" val-rhs105_270)))"
"(begin"
"(if(list?"
" lst_654)"
"(void)"
"(let-values()"
"(in-list"
" lst_654)))"
"(if(list?"
" lst_655)"
"(void)"
"(let-values()"
"(in-list"
" lst_655)))"
"((letrec-values(((for-loop_656)"
"(lambda(fold-var_657"
" lst_658"
" lst_659)"
"(if(if(pair?"
" lst_658)"
"(pair?"
" lst_659)"
" #f)"
"(let-values(((ids_660)"
"(unsafe-car"
" lst_658))"
"((rhs_661)"
"(unsafe-car"
" lst_659)))"
"(let-values(((fold-var_662)"
"(let-values(((fold-var_663)"
" fold-var_657))"
"(let-values(((fold-var_664)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_665)"
"(expand-context-observer"
" ctx_240)))"
"(if obs_665"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_665"
" 'next)))"
"(void)))"
"(list"
" ids_660"
"(if rec?_236"
"(let-values(((temp153_666)"
"(add-scope"
" rhs_661"
" sc_286))"
"((temp154_667)"
"(as-named-context"
" rec-ctx_300"
" ids_660)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp153_666"
" temp154_667)"
"(expand7.1"
" temp153_666"
" temp154_667)))"
"(let-values(((rhs155_668)"
" rhs_661)"
"((temp156_669)"
"(as-named-context"
" expr-ctx_298"
" ids_660)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" rhs155_668"
" temp156_669)"
"(expand7.1"
" rhs155_668"
" temp156_669)))))))"
" fold-var_663))))"
"(values"
" fold-var_664)))))"
"(for-loop_656"
" fold-var_662"
"(unsafe-cdr"
" lst_658)"
"(unsafe-cdr"
" lst_659))))"
" fold-var_657))))"
" for-loop_656)"
" null"
" lst_654"
" lst_655))))"
"(get-body_302))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" s150_651"
" disarmed-s151_652"
" temp152_653)"
"(rebuild53.1"
" s150_651"
" disarmed-s151_652"
" temp152_653))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_671)"
"(expand-context-observer"
" ctx_240)))"
"(if obs_671"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_671"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_672)"
"(expand-context-observer"
" ctx_240)))"
"(if obs_672"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_672"
" 'letrec-values)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_670)"
"(alt-reverse"
"(let-values(((lst_673)"
"(if syntaxes?_235"
" val-rhs81_247"
" val-rhs105_270)))"
"(begin"
"(if(list?"
" lst_673)"
"(void)"
"(let-values()"
"(in-list"
" lst_673)))"
"((letrec-values(((for-loop_674)"
"(lambda(fold-var_675"
" lst_676)"
"(if(pair?"
" lst_676)"
"(let-values(((rhs_677)"
"(unsafe-car"
" lst_676)))"
"(let-values(((fold-var_678)"
"(let-values(((fold-var_679)"
" fold-var_675))"
"(let-values(((fold-var_680)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_677"
" sc_286))"
" fold-var_679))))"
"(values"
" fold-var_680)))))"
"(for-loop_674"
" fold-var_678"
"(unsafe-cdr"
" lst_676))))"
" fold-var_675))))"
" for-loop_674)"
" null"
" lst_673))))))"
"(let-values(((...nder/expand/expr.rkt:234:7_681)"
" expand-and-split-bindings-by-reference53.1)"
"((val-idss157_682)"
" val-idss_290)"
"((val-keyss158_683)"
" val-keyss_293)"
"((val-rhss159_684)"
" val-rhss_670)"
"((temp160_685)"
"(alt-reverse"
"(let-values(((lst_693)"
" val-idss_290))"
"(begin"
"(if(list?"
" lst_693)"
"(void)"
"(let-values()"
"(in-list"
" lst_693)))"
"((letrec-values(((for-loop_694)"
"(lambda(fold-var_695"
" lst_696)"
"(if(pair?"
" lst_696)"
"(let-values(((rhs_697)"
"(unsafe-car"
" lst_696)))"
"(let-values(((fold-var_698)"
"(let-values(((fold-var_699)"
" fold-var_695))"
"(let-values(((fold-var_700)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_699))))"
"(values"
" fold-var_700)))))"
"(for-loop_694"
" fold-var_698"
"(unsafe-cdr"
" lst_696))))"
" fold-var_695))))"
" for-loop_694)"
" null"
" lst_693)))))"
"((temp161_686)"
" #t)"
"((frame-id162_687)"
" frame-id_288)"
"((rec-ctx163_688)"
" rec-ctx_300)"
"((s164_689)"
" s_239)"
"((disarmed-s165_690)"
" disarmed-s_241)"
"((get-body166_691)"
" get-body_302)"
"((temp167_692)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-and-split-bindings-by-reference53.1))"
"(expand-and-split-bindings-by-reference51.1"
" rec-ctx163_688"
" disarmed-s165_690"
" frame-id162_687"
" get-body166_691"
" s164_689"
" temp161_686"
" temp167_692"
" val-idss157_682"
" val-keyss158_683"
" val-rhss159_684"
" temp160_685)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:234:7_681"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" rec-ctx163_688"
" disarmed-s165_690"
" frame-id162_687"
" get-body166_691"
" s164_689"
" temp161_686"
" temp167_692)"
" val-idss157_682"
" val-keyss158_683"
" val-rhss159_684"
" temp160_685))))))))))"
"(attach-disappeared-transformer-bindings"
" result-s_303"
" trans-idss_289))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack12.1)"
"(lambda(given-kws_701 given-args_702)"
"(let-values(((log-tag1_703)(car given-args_702))"
"((given-kws_704)(cdr given-kws_701))"
"((given-args_705)(cdr given-args_702)))"
"(let-values(((rec?8_706)(if(pair? given-kws_704)(eq? '#:rec?(car given-kws_704)) #f)))"
"(let-values(((rec?3_707)(if rec?8_706(car given-args_705)(void)))"
"((given-kws_708)(if rec?8_706(cdr given-kws_704) given-kws_704))"
"((given-args_709)(if rec?8_706(cdr given-args_705) given-args_705)))"
"(let-values(((renames-log-tag10_710)"
"(if(pair? given-kws_708)(eq? '#:renames-log-tag(car given-kws_708)) #f)))"
"(let-values(((renames-log-tag5_711)(if renames-log-tag10_710(car given-args_709)(void)))"
"((given-kws_712)(if renames-log-tag10_710(cdr given-kws_708) given-kws_708))"
"((given-args_713)(if renames-log-tag10_710(cdr given-args_709) given-args_709)))"
"(let-values(((split-by-reference?9_714)"
"(if(pair? given-kws_712)(eq? '#:split-by-reference?(car given-kws_712)) #f)))"
"(let-values(((split-by-reference?4_715)(if split-by-reference?9_714(car given-args_713)(void)))"
"((given-kws_716)(if split-by-reference?9_714(cdr given-kws_712) given-kws_712))"
"((given-args_717)(if split-by-reference?9_714(cdr given-args_713) given-args_713)))"
"(let-values(((syntaxes?7_718)(pair? given-kws_716)))"
"(let-values(((syntaxes?2_719)(if syntaxes?7_718(car given-args_717)(void))))"
"(make-let-values-form11.1"
" log-tag1_703"
" rec?3_707"
" rec?8_706"
" renames-log-tag5_711"
" renames-log-tag10_710"
" split-by-reference?4_715"
" split-by-reference?9_714"
" syntaxes?2_719"
" syntaxes?7_718))))))))))))"
"(define-values"
"(make-let-values-form13.1)"
"(lifted/1.1$1"
"(lambda(given-kws_720 given-argc_721)"
"(if(= given-argc_721 2)"
"(subsets? '(#:log-tag) given-kws_720 '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?))"
" #f))"
"(case-lambda((given-kws_722 given-args_723)(unpack12.1 given-kws_722 given-args_723)))"
" '(#:log-tag)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((...nder/expand/expr.rkt:246:1_724) make-let-values-form13.1)((temp168_725) 'prim-let-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp168_725 #f #f #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:246:1_724"
" keyword-procedure-extract"
" '(#:log-tag)"
" 2)"
" '(#:log-tag)"
"(list temp168_725))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((...nder/expand/expr.rkt:250:1_726) make-let-values-form13.1)"
"((temp169_727) #t)"
"((temp170_728) 'prim-letrec-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp170_728 temp169_727 #t #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:250:1_726"
" keyword-procedure-extract"
" '(#:log-tag #:rec?)"
" 2)"
" '(#:log-tag #:rec?)"
"(list temp170_728 temp169_727))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((...nder/expand/expr.rkt:254:1_729) make-let-values-form13.1)"
"((temp171_730) #t)"
"((temp172_731) #t)"
"((temp173_732) #t)"
"((temp174_733) 'prim-letrec-syntaxes+values)"
"((temp175_734) 'letrec-syntaxes-renames))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp174_733 temp172_731 #t temp175_734 #t temp173_732 #t temp171_730 #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:254:1_729"
" keyword-procedure-extract"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
" 2)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
"(list temp174_733 temp172_731 temp175_734 temp173_732 temp171_730))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_735 ctx_736)"
"(let-values((()"
"(begin"
"(let-values(((obs_751)(expand-context-observer ctx_736)))"
"(if obs_751"
"(let-values()(let-values()(call-expand-observe obs_751 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_737)(syntax-disarm$1 s_735)))"
"(let-values(((ok?_738 #%stratified-body176_739 body177_740)"
"(let-values(((s_752) disarmed-s_737))"
"(let-values(((orig-s_753) s_752))"
"(let-values(((#%stratified-body176_754 body177_755)"
"(let-values(((s_756)(if(syntax?$1 s_752)(syntax-e$1 s_752) s_752)))"
"(if(pair? s_756)"
"(let-values(((#%stratified-body178_757)"
"(let-values(((s_759)(car s_756))) s_759))"
"((body179_758)"
"(let-values(((s_760)(cdr s_756)))"
"(let-values(((s_761)"
"(if(syntax?$1 s_760)"
"(syntax-e$1 s_760)"
" s_760)))"
"(let-values(((flat-s_762)(to-syntax-list.1 s_761)))"
"(if(not flat-s_762)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_753))"
"(if(null? flat-s_762)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_753))"
"(let-values() flat-s_762))))))))"
"(values #%stratified-body178_757 body179_758))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_753)))))"
"(values #t #%stratified-body176_754 body177_755))))))"
"(let-values(((s180_763) s_735)"
"((disarmed-s181_764) disarmed-s_737)"
"((temp182_765)"
"(list*"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_736))"
" 'begin)"
"(let-values(((...nder/expand/expr.rkt:269:8_766) expand-body11.1)"
"((temp183_767) body177_740)"
"((ctx184_768) ctx_736)"
"((temp185_769) #t)"
"((s186_770) s_735)"
"((disarmed-s187_771) disarmed-s_737))"
"(if(variable-reference-constant?(#%variable-reference expand-body11.1))"
"(expand-body9.1 disarmed-s187_771 s186_770 temp185_769 #t temp183_767 ctx184_768)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:269:8_766"
" keyword-procedure-extract"
" '(#:disarmed-source #:source #:stratified?)"
" 4)"
" '(#:disarmed-source #:source #:stratified?)"
"(list disarmed-s187_771 s186_770 temp185_769)"
" temp183_767"
" ctx184_768))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s180_763 disarmed-s181_764 temp182_765)"
"(rebuild53.1 s180_763 disarmed-s181_764 temp182_765)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_772 ctx_773)"
"(let-values((()"
"(begin"
"(let-values(((obs_790)(expand-context-observer ctx_773)))"
"(if obs_790"
"(let-values()(let-values()(call-expand-observe obs_790 'prim-#%datum)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_774)(syntax-disarm$1 s_772)))"
"(let-values(((ok?_775 #%datum188_776 datum189_777)"
"(let-values(((s_791) disarmed-s_774))"
"(let-values(((orig-s_792) s_791))"
"(let-values(((#%datum188_793 datum189_794)"
"(let-values(((s_795)(if(syntax?$1 s_791)(syntax-e$1 s_791) s_791)))"
"(if(pair? s_795)"
"(let-values(((#%datum190_796)"
"(let-values(((s_798)(car s_795))) s_798))"
"((datum191_797)(let-values(((s_799)(cdr s_795))) s_799)))"
"(values #%datum190_796 datum191_797))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_792)))))"
"(values #t #%datum188_793 datum189_794))))))"
"(let-values(((datum_788) datum189_777))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_788)(keyword?(syntax-e$1 datum_788)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_788))"
"(void))"
"(values))))"
"(let-values(((phase_789)(expand-context-phase ctx_773)))"
"(let-values(((s192_800) s_772)"
"((disarmed-s193_801) disarmed-s_774)"
"((temp194_802)"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_789) 'quote)"
" datum_788)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s192_800 disarmed-s193_801 temp194_802)"
"(rebuild53.1 s192_800 disarmed-s193_801 temp194_802))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_803 ctx_804)"
"(let-values((()"
"(begin"
"(let-values(((obs_820)(expand-context-observer ctx_804)))"
"(if obs_820(let-values()(let-values()(call-expand-observe obs_820 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_805)(syntax-disarm$1 s_803)))"
"(let-values(((ok?_806 #%app195_807 e196_808)"
"(let-values(((s_821) disarmed-s_805))"
"(let-values(((orig-s_822) s_821))"
"(let-values(((#%app195_823 e196_824)"
"(let-values(((s_825)(if(syntax?$1 s_821)(syntax-e$1 s_821) s_821)))"
"(if(pair? s_825)"
"(let-values(((#%app197_826)(let-values(((s_828)(car s_825))) s_828))"
"((e198_827)"
"(let-values(((s_829)(cdr s_825)))"
"(let-values(((s_830)"
"(if(syntax?$1 s_829)"
"(syntax-e$1 s_829)"
" s_829)))"
"(let-values(((flat-s_831)(to-syntax-list.1 s_830)))"
"(if(not flat-s_831)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_822))"
"(let-values() flat-s_831)))))))"
"(values #%app197_826 e198_827))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_822)))))"
"(values #t #%app195_823 e196_824))))))"
"(let-values(((es_819) e196_808))"
"(if(null? es_819)"
"(let-values()"
"(let-values(((phase_832)(expand-context-phase ctx_804)))"
"(let-values(((s199_833) s_803)"
"((disarmed-s200_834) disarmed-s_805)"
"((temp201_835)"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_832) 'quote)"
" null)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s199_833 disarmed-s200_834 temp201_835)"
"(rebuild53.1 s199_833 disarmed-s200_834 temp201_835)))))"
"(let-values()"
"(let-values(((expr-ctx_836)(as-expression-context ctx_804)))"
"(let-values(((exp-es_837)"
"(alt-reverse"
"(let-values(((lst_839) es_819))"
"(begin"
"(if(list? lst_839)(void)(let-values()(in-list lst_839)))"
"((letrec-values(((for-loop_840)"
"(lambda(fold-var_841 lst_842)"
"(if(pair? lst_842)"
"(let-values(((e_843)(unsafe-car lst_842)))"
"(let-values(((fold-var_844)"
"(let-values(((fold-var_845)"
" fold-var_841))"
"(let-values(((fold-var_846)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((e205_847)"
" e_843)"
"((expr-ctx206_848)"
" expr-ctx_836))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e205_847"
" expr-ctx206_848)"
"(expand7.1"
" e205_847"
" expr-ctx206_848))))"
" fold-var_845))))"
"(values fold-var_846)))))"
"(for-loop_840 fold-var_844(unsafe-cdr lst_842))))"
" fold-var_841))))"
" for-loop_840)"
" null"
" lst_839))))))"
"(let-values(((prefixless_838)(cdr(syntax-e$1 disarmed-s_805))))"
"(let-values(((s202_849) s_803)"
"((disarmed-s203_850) disarmed-s_805)"
"((temp204_851)"
"(cons"
" #%app195_807"
"(if(syntax?$1 prefixless_838)"
"(let-values(((prefixless207_852) prefixless_838)"
"((prefixless208_853) prefixless_838)"
"((exp-es209_854) exp-es_837))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f prefixless207_852 prefixless208_853 exp-es209_854)"
"(rebuild53.1 prefixless207_852 prefixless208_853 exp-es209_854)))"
" exp-es_837))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s202_849 disarmed-s203_850 temp204_851)"
"(rebuild53.1 s202_849 disarmed-s203_850 temp204_851)))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_855 ctx_856)"
"(let-values((()"
"(begin"
"(let-values(((obs_870)(expand-context-observer ctx_856)))"
"(if obs_870(let-values()(let-values()(call-expand-observe obs_870 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_857 quote210_858 datum211_859)"
"(let-values(((s_871)(syntax-disarm$1 s_855)))"
"(let-values(((orig-s_872) s_871))"
"(let-values(((quote210_873 datum211_874)"
"(let-values(((s_875)(if(syntax?$1 s_871)(syntax-e$1 s_871) s_871)))"
"(if(pair? s_875)"
"(let-values(((quote212_876)(let-values(((s_878)(car s_875))) s_878))"
"((datum213_877)"
"(let-values(((s_879)(cdr s_875)))"
"(let-values(((s_880)"
"(if(syntax?$1 s_879)"
"(syntax-e$1 s_879)"
" s_879)))"
"(if(pair? s_880)"
"(let-values(((datum214_881)"
"(let-values(((s_882)(car s_880)))"
" s_882))"
"(()"
"(let-values(((s_883)(cdr s_880)))"
"(let-values(((s_884)"
"(if(syntax?$1 s_883)"
"(syntax-e$1 s_883)"
" s_883)))"
"(if(null? s_884)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_872))))))"
"(values datum214_881))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_872))))))"
"(values quote212_876 datum213_877))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_872)))))"
"(values #t quote210_873 datum211_874))))))"
" s_855)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_885 ctx_886)"
"(let-values((()"
"(begin"
"(let-values(((obs_914)(expand-context-observer ctx_886)))"
"(if obs_914"
"(let-values()(let-values()(call-expand-observe obs_914 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_887)(syntax-disarm$1 s_885)))"
"(let-values(((ok?_888 quote-syntax215_889 datum216_890)"
"(let-values(((s_915) disarmed-s_887))"
"(if(let-values(((s_916)(if(syntax?$1 s_915)(syntax-e$1 s_915) s_915)))"
"(if(pair? s_916)"
"(if(let-values(((s_917)(car s_916))) #t)"
"(let-values(((s_918)(cdr s_916)))"
"(let-values(((s_919)(if(syntax?$1 s_918)(syntax-e$1 s_918) s_918)))"
"(if(pair? s_919)"
"(if(let-values(((s_920)(car s_919))) #t)"
"(let-values(((s_921)(cdr s_919)))"
"(let-values(((s_922)(if(syntax?$1 s_921)(syntax-e$1 s_921) s_921)))"
"(if(pair? s_922)"
"(if(let-values(((s_923)(car s_922)))"
"(let-values(((s_924)"
"(if(syntax?$1 s_923)(syntax-e$1 s_923) s_923)))"
"(eq? '#:local s_924)))"
"(let-values(((s_925)(cdr s_922)))"
"(let-values(((s_926)"
"(if(syntax?$1 s_925)(syntax-e$1 s_925) s_925)))"
"(null? s_926)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_927) s_915))"
"(let-values(((quote-syntax215_928 datum216_929)"
"(let-values(((s_930)(if(syntax?$1 s_915)(syntax-e$1 s_915) s_915)))"
"(let-values(((quote-syntax217_931)"
"(let-values(((s_933)(car s_930))) s_933))"
"((datum218_932)"
"(let-values(((s_934)(cdr s_930)))"
"(let-values(((s_935)"
"(if(syntax?$1 s_934)"
"(syntax-e$1 s_934)"
" s_934)))"
"(let-values(((datum219_936)"
"(let-values(((s_937)(car s_935)))"
" s_937))"
"(()"
"(let-values(((s_938)(cdr s_935)))"
"(let-values(((s_939)"
"(if(syntax?$1 s_938)"
"(syntax-e$1 s_938)"
" s_938)))"
"(let-values((()"
"(let-values(((s_940)"
"(car"
" s_939)))"
"(let-values(((s_941)"
"(if(syntax?$1"
" s_940)"
"(syntax-e$1"
" s_940)"
" s_940)))"
"(values))))"
"(()"
"(let-values(((s_942)"
"(cdr"
" s_939)))"
"(let-values(((s_943)"
"(if(syntax?$1"
" s_942)"
"(syntax-e$1"
" s_942)"
" s_942)))"
"(values)))))"
"(values))))))"
"(values datum219_936))))))"
"(values quote-syntax217_931 datum218_932)))))"
"(values #t quote-syntax215_928 datum216_929)))"
"(values #f #f #f)))))"
"(let-values(((ok?_901 quote-syntax220_902 datum221_903)"
"(let-values(((s_944) disarmed-s_887))"
"(if(if(not ok?_888) #t #f)"
"(let-values(((orig-s_945) s_944))"
"(let-values(((quote-syntax220_946 datum221_947)"
"(let-values(((s_948)(if(syntax?$1 s_944)(syntax-e$1 s_944) s_944)))"
"(if(pair? s_948)"
"(let-values(((quote-syntax222_949)"
"(let-values(((s_951)(car s_948))) s_951))"
"((datum223_950)"
"(let-values(((s_952)(cdr s_948)))"
"(let-values(((s_953)"
"(if(syntax?$1 s_952)"
"(syntax-e$1 s_952)"
" s_952)))"
"(if(pair? s_953)"
"(let-values(((datum224_954)"
"(let-values(((s_955)(car s_953)))"
" s_955))"
"(()"
"(let-values(((s_956)(cdr s_953)))"
"(let-values(((s_957)"
"(if(syntax?$1"
" s_956)"
"(syntax-e$1"
" s_956)"
" s_956)))"
"(if(null? s_957)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_945))))))"
"(values datum224_954))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_945))))))"
"(values quote-syntax222_949 datum223_950))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_945)))))"
"(values #t quote-syntax220_946 datum221_947)))"
"(values #f #f #f)))))"
"(if ok?_888"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_886))"
"(values))))"
"(let-values(((ok?_958 _225_959 _226_960 kw227_961)"
"(let-values(((s_974) disarmed-s_887))"
"(let-values(((orig-s_975) s_974))"
"(let-values(((_225_976 _226_977 kw227_978)"
"(let-values(((s_979)"
"(if(syntax?$1 s_974)(syntax-e$1 s_974) s_974)))"
"(if(pair? s_979)"
"(let-values(((_228_980)"
"(let-values(((s_983)(car s_979))) s_983))"
"((_229_981 kw230_982)"
"(let-values(((s_984)(cdr s_979)))"
"(let-values(((s_985)"
"(if(syntax?$1 s_984)"
"(syntax-e$1 s_984)"
" s_984)))"
"(if(pair? s_985)"
"(let-values(((_231_986)"
"(let-values(((s_988)"
"(car s_985)))"
" s_988))"
"((kw232_987)"
"(let-values(((s_989)"
"(cdr s_985)))"
"(let-values(((s_990)"
"(if(syntax?$1"
" s_989)"
"(syntax-e$1"
" s_989)"
" s_989)))"
"(if(pair? s_990)"
"(let-values(((kw233_991)"
"(let-values(((s_992)"
"(car"
" s_990)))"
" s_992))"
"(()"
"(let-values(((s_993)"
"(cdr"
" s_990)))"
"(let-values(((s_994)"
"(if(syntax?$1"
" s_993)"
"(syntax-e$1"
" s_993)"
" s_993)))"
"(if(null?"
" s_994)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_975))))))"
"(values kw233_991))"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_975))))))"
"(values _231_986 kw232_987))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_975))))))"
"(values _228_980 _229_981 kw230_982))"
"                                                         (raise-syntax-error$1 #f \"bad syntax\" orig-s_975)))))"
"(values #t _225_976 _226_977 kw227_978))))))"
"(let-values(((s234_995) s_885)"
"((disarmed-s235_996) disarmed-s_887)"
"((temp236_997)(list quote-syntax215_889 datum216_890 kw227_961)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s234_995 disarmed-s235_996 temp236_997)"
"(rebuild53.1 s234_995 disarmed-s235_996 temp236_997))))))"
"(let-values()"
"(let-values(((s237_998) s_885)"
"((disarmed-s238_999) disarmed-s_887)"
"((temp239_1000)"
"(list"
" quote-syntax220_902"
"(remove-scopes datum221_903(expand-context-scopes ctx_886)))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s237_998 disarmed-s238_999 temp239_1000)"
"(rebuild53.1 s237_998 disarmed-s238_999 temp239_1000))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_1001 ctx_1002)"
"(let-values((()"
"(begin"
"(let-values(((obs_1025)(expand-context-observer ctx_1002)))"
"(if obs_1025(let-values()(let-values()(call-expand-observe obs_1025 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1003)(syntax-disarm$1 s_1001)))"
"(let-values(((ok?_1004 if240_1005 tst241_1006 thn242_1007 els243_1008)"
"(let-values(((s_1026) disarmed-s_1003))"
"(let-values(((orig-s_1027) s_1026))"
"(let-values(((if240_1028 tst241_1029 thn242_1030 els243_1031)"
"(let-values(((s_1032)(if(syntax?$1 s_1026)(syntax-e$1 s_1026) s_1026)))"
"(if(pair? s_1032)"
"(let-values(((if244_1033)(let-values(((s_1037)(car s_1032))) s_1037))"
"((tst245_1034 thn246_1035 els247_1036)"
"(let-values(((s_1038)(cdr s_1032)))"
"(let-values(((s_1039)"
"(if(syntax?$1 s_1038)"
"(syntax-e$1 s_1038)"
" s_1038)))"
"(if(pair? s_1039)"
"(let-values(((tst248_1040)"
"(let-values(((s_1043)(car s_1039)))"
" s_1043))"
"((thn249_1041 els250_1042)"
"(let-values(((s_1044)(cdr s_1039)))"
"(let-values(((s_1045)"
"(if(syntax?$1 s_1044)"
"(syntax-e$1 s_1044)"
" s_1044)))"
"(if(pair? s_1045)"
"(let-values(((thn251_1046)"
"(let-values(((s_1048)"
"(car"
" s_1045)))"
" s_1048))"
"((els252_1047)"
"(let-values(((s_1049)"
"(cdr"
" s_1045)))"
"(let-values(((s_1050)"
"(if(syntax?$1"
" s_1049)"
"(syntax-e$1"
" s_1049)"
" s_1049)))"
"(if(pair?"
" s_1050)"
"(let-values(((els253_1051)"
"(let-values(((s_1052)"
"(car"
" s_1050)))"
" s_1052))"
"(()"
"(let-values(((s_1053)"
"(cdr"
" s_1050)))"
"(let-values(((s_1054)"
"(if(syntax?$1"
" s_1053)"
"(syntax-e$1"
" s_1053)"
" s_1053)))"
"(if(null?"
" s_1054)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1027))))))"
"(values"
" els253_1051))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1027))))))"
"(values"
" thn251_1046"
" els252_1047))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1027))))))"
"(values tst248_1040 thn249_1041 els250_1042))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1027))))))"
"(values if244_1033 tst245_1034 thn246_1035 els247_1036))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1027)))))"
"(values #t if240_1028 tst241_1029 thn242_1030 els243_1031))))))"
"(let-values(((expr-ctx_1023)(as-expression-context ctx_1002)))"
"(let-values(((tail-ctx_1024)"
"(let-values(((...nder/expand/expr.rkt:354:20_1055) as-tail-context14.1)"
"((expr-ctx257_1056) expr-ctx_1023)"
"((ctx258_1057) ctx_1002))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx258_1057 expr-ctx257_1056)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:354:20_1055"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx258_1057)"
" expr-ctx257_1056)))))"
"(begin"
"(let-values(((obs_1058)(expand-context-observer ctx_1002)))"
"(if obs_1058(let-values()(let-values()(call-expand-observe obs_1058 'next-group)))(void)))"
"(let-values(((s254_1059) s_1001)"
"((disarmed-s255_1060) disarmed-s_1003)"
"((temp256_1061)"
"(list"
" if240_1005"
"(let-values(((temp259_1062) tst241_1006)((expr-ctx260_1063) expr-ctx_1023))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp259_1062 expr-ctx260_1063)"
"(expand7.1 temp259_1062 expr-ctx260_1063)))"
"(begin"
"(let-values(((obs_1064)(expand-context-observer ctx_1002)))"
"(if obs_1064"
"(let-values()(let-values()(call-expand-observe obs_1064 'next)))"
"(void)))"
"(let-values(((temp261_1065) thn242_1007)((tail-ctx262_1066) tail-ctx_1024))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp261_1065 tail-ctx262_1066)"
"(expand7.1 temp261_1065 tail-ctx262_1066))))"
"(begin"
"(let-values(((obs_1067)(expand-context-observer ctx_1002)))"
"(if obs_1067"
"(let-values()(let-values()(call-expand-observe obs_1067 'next)))"
"(void)))"
"(let-values(((temp263_1068) els243_1008)((tail-ctx264_1069) tail-ctx_1024))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp263_1068 tail-ctx264_1069)"
"(expand7.1 temp263_1068 tail-ctx264_1069)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s254_1059 disarmed-s255_1060 temp256_1061)"
"(rebuild53.1 s254_1059 disarmed-s255_1060 temp256_1061))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_1070 ctx_1071)"
"(let-values((()"
"(begin"
"(let-values(((obs_1093)(expand-context-observer ctx_1071)))"
"(if obs_1093"
"(let-values()(let-values()(call-expand-observe obs_1093 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1072)(syntax-disarm$1 s_1070)))"
"(let-values(((ok?_1073 with-continuation-mark265_1074 key266_1075 val267_1076 body268_1077)"
"(let-values(((s_1094) disarmed-s_1072))"
"(let-values(((orig-s_1095) s_1094))"
"(let-values(((with-continuation-mark265_1096 key266_1097 val267_1098 body268_1099)"
"(let-values(((s_1100)(if(syntax?$1 s_1094)(syntax-e$1 s_1094) s_1094)))"
"(if(pair? s_1100)"
"(let-values(((with-continuation-mark269_1101)"
"(let-values(((s_1105)(car s_1100))) s_1105))"
"((key270_1102 val271_1103 body272_1104)"
"(let-values(((s_1106)(cdr s_1100)))"
"(let-values(((s_1107)"
"(if(syntax?$1 s_1106)"
"(syntax-e$1 s_1106)"
" s_1106)))"
"(if(pair? s_1107)"
"(let-values(((key273_1108)"
"(let-values(((s_1111)(car s_1107)))"
" s_1111))"
"((val274_1109 body275_1110)"
"(let-values(((s_1112)(cdr s_1107)))"
"(let-values(((s_1113)"
"(if(syntax?$1 s_1112)"
"(syntax-e$1 s_1112)"
" s_1112)))"
"(if(pair? s_1113)"
"(let-values(((val276_1114)"
"(let-values(((s_1116)"
"(car"
" s_1113)))"
" s_1116))"
"((body277_1115)"
"(let-values(((s_1117)"
"(cdr"
" s_1113)))"
"(let-values(((s_1118)"
"(if(syntax?$1"
" s_1117)"
"(syntax-e$1"
" s_1117)"
" s_1117)))"
"(if(pair?"
" s_1118)"
"(let-values(((body278_1119)"
"(let-values(((s_1120)"
"(car"
" s_1118)))"
" s_1120))"
"(()"
"(let-values(((s_1121)"
"(cdr"
" s_1118)))"
"(let-values(((s_1122)"
"(if(syntax?$1"
" s_1121)"
"(syntax-e$1"
" s_1121)"
" s_1121)))"
"(if(null?"
" s_1122)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1095))))))"
"(values"
" body278_1119))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1095))))))"
"(values"
" val276_1114"
" body277_1115))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1095))))))"
"(values key273_1108 val274_1109 body275_1110))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1095))))))"
"(values"
" with-continuation-mark269_1101"
" key270_1102"
" val271_1103"
" body272_1104))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1095)))))"
"(values #t with-continuation-mark265_1096 key266_1097 val267_1098 body268_1099))))))"
"(let-values(((expr-ctx_1092)(as-expression-context ctx_1071)))"
"(let-values(((s279_1123) s_1070)"
"((disarmed-s280_1124) disarmed-s_1072)"
"((temp281_1125)"
"(list"
" with-continuation-mark265_1074"
"(let-values(((temp282_1126) key266_1075)((expr-ctx283_1127) expr-ctx_1092))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp282_1126 expr-ctx283_1127)"
"(expand7.1 temp282_1126 expr-ctx283_1127)))"
"(begin"
"(let-values(((obs_1128)(expand-context-observer ctx_1071)))"
"(if obs_1128"
"(let-values()(let-values()(call-expand-observe obs_1128 'next)))"
"(void)))"
"(let-values(((temp284_1129) val267_1076)((expr-ctx285_1130) expr-ctx_1092))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp284_1129 expr-ctx285_1130)"
"(expand7.1 temp284_1129 expr-ctx285_1130))))"
"(begin"
"(let-values(((obs_1131)(expand-context-observer ctx_1071)))"
"(if obs_1131"
"(let-values()(let-values()(call-expand-observe obs_1131 'next)))"
"(void)))"
"(let-values(((temp286_1132) body268_1077)"
"((temp287_1133)"
"(let-values(((...nder/expand/expr.rkt:383:30_1134) as-tail-context14.1)"
"((expr-ctx288_1135) expr-ctx_1092)"
"((ctx289_1136) ctx_1071))"
"(if(variable-reference-constant?"
"(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx289_1136 expr-ctx288_1135)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:383:30_1134"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx289_1136)"
" expr-ctx288_1135)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp286_1132 temp287_1133)"
"(expand7.1 temp286_1132 temp287_1133)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s279_1123 disarmed-s280_1124 temp281_1125)"
"(rebuild53.1 s279_1123 disarmed-s280_1124 temp281_1125))))))))))"
" print-values)"
"(define-values"
"(lifted/2.1$1)"
"(make-required"
" 'make-begin"
"(case-lambda((self_1137 log-tag_1138)(apply missing-kw self_1137 log-tag_1138 null)))"
" #f"
" #f))"
"(define-values"
"(make-begin17.1)"
"(lambda(list-start-index14_1139 log-tag16_1140)"
"(let-values(((log-tag_1141) log-tag16_1140))"
"(let-values(((list-start-index_1142) list-start-index14_1139))"
"(let-values()"
"(lambda(s_1143 ctx_1144)"
"(let-values((()"
"(begin"
"(let-values(((obs_1163)(expand-context-observer ctx_1144)))"
"(if obs_1163"
"(let-values()(let-values()(call-expand-observe obs_1163 log-tag_1141)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1145)(syntax-disarm$1 s_1143)))"
"(let-values(((ok?_1146 begin290_1147 e291_1148)"
"(let-values(((s_1164) disarmed-s_1145))"
"(let-values(((orig-s_1165) s_1164))"
"(let-values(((begin290_1166 e291_1167)"
"(let-values(((s_1168)"
"(if(syntax?$1 s_1164)(syntax-e$1 s_1164) s_1164)))"
"(if(pair? s_1168)"
"(let-values(((begin292_1169)"
"(let-values(((s_1171)(car s_1168))) s_1171))"
"((e293_1170)"
"(let-values(((s_1172)(cdr s_1168)))"
"(let-values(((s_1173)"
"(if(syntax?$1 s_1172)"
"(syntax-e$1 s_1172)"
" s_1172)))"
"(let-values(((flat-s_1174)"
"(to-syntax-list.1 s_1173)))"
"(if(not flat-s_1174)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                             \"bad syntax\""
" orig-s_1165))"
"(if(null? flat-s_1174)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                               \"bad syntax\""
" orig-s_1165))"
"(let-values() flat-s_1174))))))))"
"(values begin292_1169 e293_1170))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_1165)))))"
"(values #t begin290_1166 e291_1167))))))"
"(let-values(((expr-ctx_1159)(as-expression-context ctx_1144)))"
"(let-values(((es_1160) e291_1148))"
"(let-values(((last-i_1161)(sub1(length es_1160))))"
"(let-values(((exp-es_1162)"
"(alt-reverse"
"(let-values(((lst_1175) es_1160)((start_1176) 0))"
"(begin"
"(if(list? lst_1175)(void)(let-values()(in-list lst_1175)))"
"(if(exact-nonnegative-integer? start_1176)"
"(void)"
"(let-values()(in-naturals start_1176)))"
"((letrec-values(((for-loop_1177)"
"(lambda(fold-var_1178 lst_1179 pos_1180)"
"(if(if(pair? lst_1179) #t #f)"
"(let-values(((e_1181)(unsafe-car lst_1179))"
"((i_1182) pos_1180))"
"(let-values(((fold-var_1183)"
"(let-values(((fold-var_1184)"
" fold-var_1178))"
"(let-values(((fold-var_1185)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(if(="
" i_1182"
" list-start-index_1142)"
"(let-values()"
"(let-values(((obs_1186)"
"(expand-context-observer"
" ctx_1144)))"
"(if obs_1186"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1186"
" 'enter-list"
"(list-tail"
" es_1160"
" i_1182))))"
"(void))))"
"(void))"
"(let-values(((obs_1187)"
"(expand-context-observer"
" ctx_1144)))"
"(if obs_1187"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1187"
" 'next)))"
"(void)))"
"(let-values(((e297_1188)"
" e_1181)"
"((temp298_1189)"
"(if(="
" i_1182"
" last-i_1161)"
"(let-values(((...nder/expand/expr.rkt:400:21_1190)"
" as-tail-context14.1)"
"((expr-ctx299_1191)"
" expr-ctx_1159)"
"((ctx300_1192)"
" ctx_1144))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx300_1192"
" expr-ctx299_1191)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:400:21_1190"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx300_1192)"
" expr-ctx299_1191)))"
" expr-ctx_1159)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e297_1188"
" temp298_1189)"
"(expand7.1"
" e297_1188"
" temp298_1189)))))"
" fold-var_1184))))"
"(values fold-var_1185)))))"
"(for-loop_1177"
" fold-var_1183"
"(unsafe-cdr lst_1179)"
"(+ pos_1180 1))))"
" fold-var_1178))))"
" for-loop_1177)"
" null"
" lst_1175"
" start_1176))))))"
"(begin"
"(if(if(= 1 list-start-index_1142)(null?(cdr es_1160)) #f)"
"(let-values()"
"(let-values(((obs_1193)(expand-context-observer ctx_1144)))"
"(if obs_1193"
"(let-values()"
"(let-values()(call-expand-observe obs_1193 'enter-list(cdr es_1160))))"
"(void))))"
"(void))"
"(let-values(((obs_1194)(expand-context-observer ctx_1144)))"
"(if obs_1194"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1194"
" 'exit-list"
"(list-tail exp-es_1162 list-start-index_1142))))"
"(void)))"
"(let-values(((s294_1195) s_1143)"
"((disarmed-s295_1196) disarmed-s_1145)"
"((temp296_1197)(cons begin290_1147 exp-es_1162)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s294_1195 disarmed-s295_1196 temp296_1197)"
"(rebuild53.1 s294_1195 disarmed-s295_1196 temp296_1197)))))))))))))))))"
"(define-values"
"(unpack18.1)"
"(lambda(given-kws_1198 given-args_1199 log-tag16_1200)"
"(let-values(((list-start-index14_1201)(car given-args_1199)))"
"(make-begin17.1 list-start-index14_1201 log-tag16_1200))))"
"(define-values"
"(make-begin19.1)"
"(lifted/2.1$1"
"(lambda(given-kws_1202 given-argc_1203)"
"(if(= given-argc_1203 3)"
"(let-values(((l2_1204) given-kws_1202))"
"(if(pair? l2_1204)(if(eq?(car l2_1204) '#:list-start-index)(null?(cdr l2_1204)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1205 given-args_1206 log-tag_1207)(unpack18.1 given-kws_1205 given-args_1206 log-tag_1207)))"
" '(#:list-start-index)"
" '(#:list-start-index)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((nonempty-begin_1208)"
"(let-values(((...nder/expand/expr.rkt:412:23_1209) make-begin19.1)"
"((temp301_1210) 'prim-begin0)"
"((temp302_1211) 0))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp302_1211 temp301_1210)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:412:23_1209"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp302_1211)"
" temp301_1210)))))"
"(lambda(s_1212 ctx_1213)"
"(let-values(((context_1214)(expand-context-context ctx_1213)))"
"(if(let-values(((or-part_1215)(eq? context_1214 'top-level)))"
"(if or-part_1215 or-part_1215(eq? context_1214 'module)))"
"(let-values()"
"(let-values(((disarmed-s_1216)(syntax-disarm$1 s_1212)))"
"(let-values(((ok?_1217 begin303_1218)"
"(let-values(((s_1227) disarmed-s_1216))"
"(if(let-values(((s_1228)(if(syntax?$1 s_1227)(syntax-e$1 s_1227) s_1227)))"
"(if(pair? s_1228)"
"(if(let-values(((s_1229)(car s_1228))) #t)"
"(let-values(((s_1230)(cdr s_1228)))"
"(let-values(((s_1231)(if(syntax?$1 s_1230)(syntax-e$1 s_1230) s_1230)))"
"(null? s_1231)))"
" #f)"
" #f))"
"(let-values(((orig-s_1232) s_1227))"
"(let-values(((begin303_1233)"
"(let-values(((s_1234)"
"(if(syntax?$1 s_1227)(syntax-e$1 s_1227) s_1227)))"
"(let-values(((begin304_1235)"
"(let-values(((s_1236)(car s_1234))) s_1236))"
"(()"
"(let-values(((s_1237)(cdr s_1234)))"
"(let-values(((s_1238)"
"(if(syntax?$1 s_1237)"
"(syntax-e$1 s_1237)"
" s_1237)))"
"(values)))))"
"(values begin304_1235)))))"
"(values #t begin303_1233)))"
"(values #f #f)))))"
"(if ok?_1217 s_1212(nonempty-begin_1208 s_1212 ctx_1213)))))"
"(let-values()(nonempty-begin_1208 s_1212 ctx_1213))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((...nder/expand/expr.rkt:429:1_1239) make-begin19.1)"
"((temp305_1240) 'prim-begin0)"
"((temp306_1241) 1))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp306_1241 temp305_1240)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:429:1_1239"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp306_1241)"
" temp305_1240)))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_1242 ctx_1243)"
"(if(if(expand-context-need-eventually-defined ctx_1243)(>=(expand-context-phase ctx_1243) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_1243)"
"(expand-context-phase ctx_1243)"
"(lambda(l_1244)(cons id_1242 l_1244))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core311_1245)"
"(lambda(s309_1246 ctx310_1247 implicit-omitted?307_1248 implicit-omitted?308_1249)"
"(let-values(((s_1250) s309_1246))"
"(let-values(((ctx_1251) ctx310_1247))"
"(let-values(((implicit-omitted?_1252)"
"(if implicit-omitted?308_1249 implicit-omitted?307_1248 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1256)(expand-context-observer ctx_1251)))"
"(if obs_1256"
"(let-values()"
"(let-values()(call-expand-observe obs_1256 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1253)(syntax-disarm$1 s_1250)))"
"(let-values(((id_1254)"
"(if implicit-omitted?_1252"
"(let-values() s_1250)"
"(let-values()"
"(let-values(((ok?_1257 #%top313_1258 id314_1259)"
"(let-values(((s_1270) disarmed-s_1253))"
"(let-values(((orig-s_1271) s_1270))"
"(let-values(((#%top313_1272 id314_1273)"
"(let-values(((s_1274)"
"(if(syntax?$1 s_1270)"
"(syntax-e$1 s_1270)"
" s_1270)))"
"(if(pair? s_1274)"
"(let-values(((#%top315_1275)"
"(let-values(((s_1277)"
"(car"
" s_1274)))"
" s_1277))"
"((id316_1276)"
"(let-values(((s_1278)"
"(cdr"
" s_1274)))"
"(if(let-values(((or-part_1279)"
"(if(syntax?$1"
" s_1278)"
"(symbol?"
"(syntax-e$1"
" s_1278))"
" #f)))"
"(if or-part_1279"
" or-part_1279"
"(symbol?"
" s_1278)))"
" s_1278"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_1271"
" s_1278)))))"
"(values"
" #%top315_1275"
" id316_1276))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1271)))))"
"(values #t #%top313_1272 id314_1273))))))"
" id314_1259)))))"
"(let-values(((b_1255)"
"(let-values(((...nder/expand/expr.rkt:457:13_1280) resolve+shift22.1)"
"((id317_1281) id_1254)"
"((temp318_1282)(expand-context-phase ctx_1251))"
"((temp319_1283) 'ambiguous))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" temp319_1283"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id317_1281"
" temp318_1282)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:457:13_1280"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp319_1283)"
" id317_1281"
" temp318_1282)))))"
"(if(eq? b_1255 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1254 ctx_1251))"
"(if(if b_1255"
"(if(module-binding? b_1255)"
"(eq?"
"(module-binding-module b_1255)"
"(namespace-mpi(expand-context-namespace ctx_1251)))"
" #f)"
" #f)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_1255))"
"(let-values() s_1250)"
"(let-values() id_1254)))"
"(if(register-eventual-variable!? id_1254 ctx_1251)"
"(let-values() id_1254)"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1251))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1254"
" #f"
" null"
"(syntax-debug-info-string id_1254 ctx_1251)))"
"(let-values()"
"(let-values(((tl-id_1284)"
"(add-scope"
" id_1254"
"(root-expand-context-top-level-bind-scope ctx_1251))))"
"(if(let-values(((tl-id320_1285) tl-id_1284)"
"((temp321_1286)(expand-context-phase ctx_1251)))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve31.1))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" tl-id320_1285"
" temp321_1286)"
"(resolve31.1 tl-id320_1285 temp321_1286)))"
"(let-values()"
"(if implicit-omitted?_1252"
"(let-values() id_1254)"
"(let-values()"
"(let-values(((ok?_1287 #%top322_1288 id323_1289)"
"(let-values(((s_1300) disarmed-s_1253))"
"(let-values(((orig-s_1301) s_1300))"
"(let-values(((#%top322_1302 id323_1303)"
"(let-values(((s_1304)"
"(if(syntax?$1"
" s_1300)"
"(syntax-e$1"
" s_1300)"
" s_1300)))"
"(if(pair? s_1304)"
"(let-values(((#%top324_1305)"
"(let-values(((s_1307)"
"(car"
" s_1304)))"
" s_1307))"
"((id325_1306)"
"(let-values(((s_1308)"
"(cdr"
" s_1304)))"
"(if(let-values(((or-part_1309)"
"(if(syntax?$1"
" s_1308)"
"(symbol?"
"(syntax-e$1"
" s_1308))"
" #f)))"
"(if or-part_1309"
" or-part_1309"
"(symbol?"
" s_1308)))"
" s_1308"
"(raise-syntax-error$1"
" #f"
"                                                                                                                  \"not an identifier\""
" orig-s_1301"
" s_1308)))))"
"(values"
" #%top324_1305"
" id325_1306))"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_1301)))))"
"(values #t #%top322_1302 id323_1303))))))"
"(let-values(((s326_1310) s_1250)"
"((disarmed-s327_1311) disarmed-s_1253)"
"((temp328_1312)(cons #%top322_1288 id_1254)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" s326_1310"
" disarmed-s327_1311"
" temp328_1312)"
"(rebuild53.1"
" s326_1310"
" disarmed-s327_1311"
" temp328_1312)))))))"
"(let-values() s_1250))))))))))))))))))))"
"(case-lambda"
"((s_1313 ctx_1314)(core311_1245 s_1313 ctx_1314 #f #f))"
"((s_1315 ctx_1316 implicit-omitted?307_1317)(core311_1245 s_1315 ctx_1316 implicit-omitted?307_1317 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_1318 ctx_1319)"
"(let-values((()"
"(begin"
"(let-values(((obs_1338)(expand-context-observer ctx_1319)))"
"(if obs_1338(let-values()(let-values()(call-expand-observe obs_1338 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1320)(syntax-disarm$1 s_1318)))"
"(let-values(((ok?_1321 set!329_1322 id330_1323 rhs331_1324)"
"(let-values(((s_1339) disarmed-s_1320))"
"(let-values(((orig-s_1340) s_1339))"
"(let-values(((set!329_1341 id330_1342 rhs331_1343)"
"(let-values(((s_1344)(if(syntax?$1 s_1339)(syntax-e$1 s_1339) s_1339)))"
"(if(pair? s_1344)"
"(let-values(((set!332_1345)"
"(let-values(((s_1348)(car s_1344))) s_1348))"
"((id333_1346 rhs334_1347)"
"(let-values(((s_1349)(cdr s_1344)))"
"(let-values(((s_1350)"
"(if(syntax?$1 s_1349)"
"(syntax-e$1 s_1349)"
" s_1349)))"
"(if(pair? s_1350)"
"(let-values(((id335_1351)"
"(let-values(((s_1353)(car s_1350)))"
"(if(let-values(((or-part_1354)"
"(if(syntax?$1"
" s_1353)"
"(symbol?"
"(syntax-e$1"
" s_1353))"
" #f)))"
"(if or-part_1354"
" or-part_1354"
"(symbol? s_1353)))"
" s_1353"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"not an identifier\""
" orig-s_1340"
" s_1353))))"
"((rhs336_1352)"
"(let-values(((s_1355)(cdr s_1350)))"
"(let-values(((s_1356)"
"(if(syntax?$1 s_1355)"
"(syntax-e$1 s_1355)"
" s_1355)))"
"(if(pair? s_1356)"
"(let-values(((rhs337_1357)"
"(let-values(((s_1358)"
"(car"
" s_1356)))"
" s_1358))"
"(()"
"(let-values(((s_1359)"
"(cdr"
" s_1356)))"
"(let-values(((s_1360)"
"(if(syntax?$1"
" s_1359)"
"(syntax-e$1"
" s_1359)"
" s_1359)))"
"(if(null?"
" s_1360)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1340))))))"
"(values rhs337_1357))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1340))))))"
"(values id335_1351 rhs336_1352))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1340))))))"
"(values set!332_1345 id333_1346 rhs334_1347))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1340)))))"
"(values #t set!329_1341 id330_1342 rhs331_1343))))))"
"(let-values(((id_1337) id330_1323))"
"((letrec-values(((rename-loop_1361)"
"(lambda(id_1362 from-rename?_1363)"
"(let-values(((binding_1364)"
"(let-values(((...nder/expand/expr.rkt:504:21_1367) resolve+shift22.1)"
"((id338_1368) id_1362)"
"((temp339_1369)(expand-context-phase ctx_1319))"
"((temp340_1370) 'ambiguous)"
"((temp341_1371) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" temp340_1370"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp341_1371"
" #t"
" #f"
" #f"
" id338_1368"
" temp339_1369)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:504:21_1367"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp340_1370 temp341_1371)"
" id338_1368"
" temp339_1369)))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1364 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1362 ctx_1319))"
"(void))"
"(values))))"
"(let-values(((t_1365 insp_1366)"
"(if binding_1364"
"(let-values(((binding342_1372) binding_1364)"
"((ctx343_1373) ctx_1319)"
"((s344_1374) s_1318))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" #f"
" #f"
" binding342_1372"
" ctx343_1373"
" s344_1374)"
"(lookup17.1 binding342_1372 ctx343_1373 s344_1374)))"
"(values #f #f))))"
"(begin"
"(let-values(((obs_1375)(expand-context-observer ctx_1319)))"
"(if obs_1375"
"(let-values()"
"(let-values()(call-expand-observe obs_1375 'resolve id_1362)))"
"(void)))"
"(if(let-values(((or-part_1376)(variable? t_1365)))"
"(if or-part_1376"
" or-part_1376"
"(if(not binding_1364)"
"(let-values(((or-part_1377)"
"(register-eventual-variable!? id_1362 ctx_1319)))"
"(if or-part_1377"
" or-part_1377"
"(expand-context-allow-unbound? ctx_1319)))"
" #f)))"
"(let-values()"
"(begin"
"(if(if(module-binding? binding_1364)"
"(not"
"(eq?"
"(module-binding-module binding_1364)"
"(namespace-mpi(expand-context-namespace ctx_1319))))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate module-required identifier\""
" s_1318"
" id_1362))"
"(void))"
"(let-values(((obs_1378)(expand-context-observer ctx_1319)))"
"(if obs_1378"
"(let-values()"
"(let-values()(call-expand-observe obs_1378 'next)))"
"(void)))"
"(register-variable-referenced-if-local! binding_1364)"
"(let-values(((s345_1379) s_1318)"
"((disarmed-s346_1380) disarmed-s_1320)"
"((temp347_1381)"
"(list"
" set!329_1322"
"(let-values(((...nder/expand/expr.rkt:527:14_1382)"
" substitute-variable8.1)"
"((id348_1383) id_1362)"
"((t349_1384) t_1365)"
"((temp350_1385)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops ctx_1319))))"
"(if(variable-reference-constant?"
"(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1"
" temp350_1385"
" id348_1383"
" t349_1384)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:527:14_1382"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp350_1385)"
" id348_1383"
" t349_1384)))"
"(let-values(((temp351_1386) rhs331_1324)"
"((temp352_1387)"
"(as-expression-context ctx_1319)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp351_1386 temp352_1387)"
"(expand7.1 temp351_1386 temp352_1387))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s345_1379 disarmed-s346_1380 temp347_1381)"
"(rebuild53.1 s345_1379 disarmed-s346_1380 temp347_1381)))))"
"(if(not binding_1364)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_1318"
" id_1362"
" null"
"(syntax-debug-info-string id_1362 ctx_1319)))"
"(if(1/set!-transformer? t_1365)"
"(let-values()"
"(if(not-in-this-expand-context? t_1365 ctx_1319)"
"(let-values()"
"(let-values(((temp353_1388)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1318"
" disarmed-s_1320"
" set!329_1322"
" rhs331_1324"
" id_1362"
" from-rename?_1363)"
" t_1365"
" ctx_1319))"
"((ctx354_1389) ctx_1319))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp353_1388 ctx354_1389)"
"(expand7.1 temp353_1388 ctx354_1389))))"
"(let-values()"
"(let-values(((exp-s_1390 re-ctx_1391)"
"(apply-transformer"
" t_1365"
" insp_1366"
" s_1318"
" id_1362"
" ctx_1319"
" binding_1364)))"
"(if(expand-context-just-once? ctx_1319)"
"(let-values() exp-s_1390)"
"(let-values()"
"(let-values(((exp-s355_1392) exp-s_1390)"
"((re-ctx356_1393) re-ctx_1391))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f exp-s355_1392 re-ctx356_1393)"
"(expand7.1 exp-s355_1392 re-ctx356_1393)))))))))"
"(if(1/rename-transformer? t_1365)"
"(let-values()"
"(if(not-in-this-expand-context? t_1365 ctx_1319)"
"(let-values()"
"(let-values(((temp357_1394)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1318"
" disarmed-s_1320"
" set!329_1322"
" rhs331_1324"
" id_1362"
" from-rename?_1363"
" t_1365)"
" t_1365"
" ctx_1319))"
"((ctx358_1395) ctx_1319))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp357_1394 ctx358_1395)"
"(expand7.1 temp357_1394 ctx358_1395))))"
"(let-values()"
"(rename-loop_1361(1/rename-transformer-target t_1365) #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_1318"
" id_1362)))))))))))))"
" rename-loop_1361)"
" id_1337"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename28_1396)"
"(lambda(s22_1397"
" disarmed-s23_1398"
" set!-id24_1399"
" id25_1400"
" rhs-s26_1401"
" from-rename?27_1402"
" t20_1403"
" t21_1404)"
"(let-values(((s_1405) s22_1397))"
"(let-values(((disarmed-s_1406) disarmed-s23_1398))"
"(let-values(((set!-id_1407) set!-id24_1399))"
"(let-values(((id_1408) id25_1400))"
"(let-values(((rhs-s_1409) rhs-s26_1401))"
"(let-values(((from-rename?_1410) from-rename?27_1402))"
"(let-values(((t_1411)(if t21_1404 t20_1403 #f)))"
"(let-values()"
"(if(let-values(((or-part_1412) t_1411))"
"(if or-part_1412 or-part_1412 from-rename?_1410))"
"(let-values()"
"(let-values(((new-id_1413)"
"(if t_1411(1/rename-transformer-target t_1411) id_1408)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_1406"
"(list set!-id_1407 new-id_1413 rhs-s_1409)"
" disarmed-s_1406"
" disarmed-s_1406)"
" s_1405)))"
"(let-values() s_1405)))))))))))))"
"(case-lambda"
"((s_1414 disarmed-s_1415 set!-id_1416 id_1417 rhs-s_1418 from-rename?_1419)"
"(substitute-set!-rename28_1396 s_1414 disarmed-s_1415 set!-id_1416 id_1417 rhs-s_1418 from-rename?_1419 #f #f))"
"((s_1420 disarmed-s_1421 set!-id_1422 id_1423 rhs-s_1424 from-rename?_1425 t20_1426)"
"(substitute-set!-rename28_1396"
" s_1420"
" disarmed-s_1421"
" set!-id_1422"
" id_1423"
" rhs-s_1424"
" from-rename?_1425"
" t20_1426"
" #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_1427 ctx_1428)"
"(let-values((()"
"(begin"
"(let-values(((obs_1469)(expand-context-observer ctx_1428)))"
"(if obs_1469"
"(let-values()(let-values()(call-expand-observe obs_1469 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1429)(syntax-disarm$1 s_1427)))"
"(let-values(((ok?_1430 #%variable-reference359_1431 id360_1432)"
"(let-values(((s_1470) disarmed-s_1429))"
"(if(let-values(((s_1471)(if(syntax?$1 s_1470)(syntax-e$1 s_1470) s_1470)))"
"(if(pair? s_1471)"
"(if(let-values(((s_1472)(car s_1471))) #t)"
"(let-values(((s_1473)(cdr s_1471)))"
"(let-values(((s_1474)(if(syntax?$1 s_1473)(syntax-e$1 s_1473) s_1473)))"
"(if(pair? s_1474)"
"(if(let-values(((s_1475)(car s_1474)))"
"(if(syntax?$1 s_1475)(symbol?(syntax-e$1 s_1475)) #f))"
"(let-values(((s_1476)(cdr s_1474)))"
"(let-values(((s_1477)"
"(if(syntax?$1 s_1476)(syntax-e$1 s_1476) s_1476)))"
"(null? s_1477)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_1478) s_1470))"
"(let-values(((#%variable-reference359_1479 id360_1480)"
"(let-values(((s_1481)(if(syntax?$1 s_1470)(syntax-e$1 s_1470) s_1470)))"
"(let-values(((#%variable-reference361_1482)"
"(let-values(((s_1484)(car s_1481))) s_1484))"
"((id362_1483)"
"(let-values(((s_1485)(cdr s_1481)))"
"(let-values(((s_1486)"
"(if(syntax?$1 s_1485)"
"(syntax-e$1 s_1485)"
" s_1485)))"
"(let-values(((id363_1487)"
"(let-values(((s_1488)(car s_1486)))"
" s_1488))"
"(()"
"(let-values(((s_1489)(cdr s_1486)))"
"(let-values(((s_1490)"
"(if(syntax?$1 s_1489)"
"(syntax-e$1 s_1489)"
" s_1489)))"
"(values)))))"
"(values id363_1487))))))"
"(values #%variable-reference361_1482 id362_1483)))))"
"(values #t #%variable-reference359_1479 id360_1480)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1443 #%variable-reference364_1444 #%top365_1445 id366_1446)"
"(let-values(((s_1491) disarmed-s_1429))"
"(if(if(not ok?_1430)"
"(let-values(((s_1492)(if(syntax?$1 s_1491)(syntax-e$1 s_1491) s_1491)))"
"(if(pair? s_1492)"
"(if(let-values(((s_1493)(car s_1492))) #t)"
"(let-values(((s_1494)(cdr s_1492)))"
"(let-values(((s_1495)(if(syntax?$1 s_1494)(syntax-e$1 s_1494) s_1494)))"
"(if(pair? s_1495)"
"(if(let-values(((s_1496)(car s_1495)))"
"(let-values(((s_1497)"
"(if(syntax?$1 s_1496)(syntax-e$1 s_1496) s_1496)))"
"(if(pair? s_1497)"
"(if(let-values(((s_1498)(car s_1497))) #t)"
"(let-values(((s_1499)(cdr s_1497)))"
"(if(syntax?$1 s_1499)(symbol?(syntax-e$1 s_1499)) #f))"
" #f)"
" #f)))"
"(let-values(((s_1500)(cdr s_1495)))"
"(let-values(((s_1501)"
"(if(syntax?$1 s_1500)(syntax-e$1 s_1500) s_1500)))"
"(null? s_1501)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1502) s_1491))"
"(let-values(((#%variable-reference364_1503 #%top365_1504 id366_1505)"
"(let-values(((s_1506)"
"(if(syntax?$1 s_1491)(syntax-e$1 s_1491) s_1491)))"
"(let-values(((#%variable-reference367_1507)"
"(let-values(((s_1510)(car s_1506))) s_1510))"
"((#%top368_1508 id369_1509)"
"(let-values(((s_1511)(cdr s_1506)))"
"(let-values(((s_1512)"
"(if(syntax?$1 s_1511)"
"(syntax-e$1 s_1511)"
" s_1511)))"
"(let-values(((#%top370_1513 id371_1514)"
"(let-values(((s_1515)(car s_1512)))"
"(let-values(((s_1516)"
"(if(syntax?$1 s_1515)"
"(syntax-e$1 s_1515)"
" s_1515)))"
"(let-values(((#%top372_1517)"
"(let-values(((s_1519)"
"(car"
" s_1516)))"
" s_1519))"
"((id373_1518)"
"(let-values(((s_1520)"
"(cdr"
" s_1516)))"
" s_1520)))"
"(values"
" #%top372_1517"
" id373_1518)))))"
"(()"
"(let-values(((s_1521)(cdr s_1512)))"
"(let-values(((s_1522)"
"(if(syntax?$1 s_1521)"
"(syntax-e$1 s_1521)"
" s_1521)))"
"(values)))))"
"(values #%top370_1513 id371_1514))))))"
"(values #%variable-reference367_1507 #%top368_1508 id369_1509)))))"
"(values #t #%variable-reference364_1503 #%top365_1504 id366_1505)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1459 #%variable-reference374_1460)"
"(let-values(((s_1523) disarmed-s_1429))"
"(if(if(not"
"(let-values(((or-part_1524) ok?_1430))"
"(if or-part_1524 or-part_1524 ok?_1443)))"
" #t"
" #f)"
"(let-values(((orig-s_1525) s_1523))"
"(let-values(((#%variable-reference374_1526)"
"(let-values(((s_1527)"
"(if(syntax?$1 s_1523)(syntax-e$1 s_1523) s_1523)))"
"(if(pair? s_1527)"
"(let-values(((#%variable-reference375_1528)"
"(let-values(((s_1529)(car s_1527))) s_1529))"
"(()"
"(let-values(((s_1530)(cdr s_1527)))"
"(let-values(((s_1531)"
"(if(syntax?$1 s_1530)"
"(syntax-e$1 s_1530)"
" s_1530)))"
"(if(null? s_1531)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1525))))))"
"(values #%variable-reference375_1528))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1525)))))"
"(values #t #%variable-reference374_1526)))"
"(values #f #f)))))"
"(begin"
"(if(let-values(((or-part_1532) ok?_1430))(if or-part_1532 or-part_1532 ok?_1443))"
"(let-values()"
"(let-values(((var-id_1533)(if ok?_1430 id360_1432 id366_1446)))"
"(let-values(((binding_1534)"
"(let-values(((...nder/expand/expr.rkt:572:21_1535) resolve+shift22.1)"
"((var-id376_1536) var-id_1533)"
"((temp377_1537)(expand-context-phase ctx_1428))"
"((temp378_1538) 'ambiguous))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" temp378_1538"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" var-id376_1536"
" temp377_1537)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:572:21_1535"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp378_1538)"
" var-id376_1536"
" temp377_1537)))))"
"(begin"
"(if(eq? binding_1534 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1533 ctx_1428))"
"(void))"
"(if binding_1534"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                  \"unbound identifier\""
" s_1427"
" var-id_1533"
" null"
"(syntax-debug-info-string var-id_1533 ctx_1428))))))))"
"(void))"
" s_1427)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_1539 ctx_1540)"
"(let-values((()"
"(begin"
"(let-values(((obs_1556)(expand-context-observer ctx_1540)))"
"(if obs_1556"
"(let-values()(let-values()(call-expand-observe obs_1556 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1541)(syntax-disarm$1 s_1539)))"
"(let-values(((ok?_1542 #%expression379_1543 e380_1544)"
"(let-values(((s_1557) disarmed-s_1541))"
"(let-values(((orig-s_1558) s_1557))"
"(let-values(((#%expression379_1559 e380_1560)"
"(let-values(((s_1561)(if(syntax?$1 s_1557)(syntax-e$1 s_1557) s_1557)))"
"(if(pair? s_1561)"
"(let-values(((#%expression381_1562)"
"(let-values(((s_1564)(car s_1561))) s_1564))"
"((e382_1563)"
"(let-values(((s_1565)(cdr s_1561)))"
"(let-values(((s_1566)"
"(if(syntax?$1 s_1565)"
"(syntax-e$1 s_1565)"
" s_1565)))"
"(if(pair? s_1566)"
"(let-values(((e383_1567)"
"(let-values(((s_1568)(car s_1566)))"
" s_1568))"
"(()"
"(let-values(((s_1569)(cdr s_1566)))"
"(let-values(((s_1570)"
"(if(syntax?$1 s_1569)"
"(syntax-e$1 s_1569)"
" s_1569)))"
"(if(null? s_1570)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1558))))))"
"(values e383_1567))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1558))))))"
"(values #%expression381_1562 e382_1563))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1558)))))"
"(values #t #%expression379_1559 e380_1560))))))"
"(let-values(((exp-e_1555)"
"(let-values(((temp384_1571) e380_1544)"
"((temp385_1572)"
"(let-values(((...nder/expand/expr.rkt:587:32_1573) as-tail-context14.1)"
"((temp386_1574)(as-expression-context ctx_1540))"
"((ctx387_1575) ctx_1540))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx387_1575 temp386_1574)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:587:32_1573"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx387_1575)"
" temp386_1574)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp384_1571 temp385_1572)"
"(expand7.1 temp384_1571 temp385_1572)))))"
"(let-values(((tmp_1576)"
"(if(not(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_1540))"
"(expand-context-context ctx_1540)"
" #f)))"
"(if(equal? tmp_1576 'expression)"
"(let-values()"
"(let-values(((result-s_1577)(syntax-track-origin$1 exp-e_1555 s_1539)))"
"(begin"
"(let-values(((obs_1578)(expand-context-observer ctx_1540)))"
"(if obs_1578"
"(let-values()(let-values()(call-expand-observe obs_1578 'tag result-s_1577)))"
"(void)))"
" result-s_1577)))"
"(let-values()"
"(let-values(((s388_1579) s_1539)"
"((disarmed-s389_1580) disarmed-s_1541)"
"((temp390_1581)(list #%expression379_1543 exp-e_1555)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s388_1579 disarmed-s389_1580 temp390_1581)"
"(rebuild53.1 s388_1579 disarmed-s389_1580 temp390_1581)))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_1582 ctx_1583) (raise-syntax-error$1 #f \"not in quasiquote\" s_1582))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_1584 ctx_1585) (raise-syntax-error$1 #f \"not in quasiquote\" s_1584))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_1 id_2 at-phase_3 ns_4)"
"(if(not at-phase_3)"
"(let-values()"
"(let-values(((m_5)(namespace->module ns_4(1/module-path-index-resolve(module-binding-nominal-module b_1)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_1) '#hasheq())"
"(module-binding-nominal-sym b_1)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 insp_8)"
"(let-values(((b1_9) b_1)"
"((empty-env2_10) empty-env)"
"((null3_11) null)"
"((ns4_12) ns_4)"
"((at-phase5_13) at-phase_3)"
"((id6_14) id_2))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup50.1))"
"(binding-lookup48.1 #f #f #f #f b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)"
"(binding-lookup50.1 b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)))))"
"(not(variable? val_7)))))))"
"(void)"
"(void)"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6)"
"(let-values(((ns_7)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_8)"
"(lambda(specs_9 at-phase_10 protected?_11 layer_12)"
"(let-values(((track-stxess_13 exp-specss_14)"
"(let-values(((track-stxes_15 exp-specs_16)"
"(let-values(((lst_17) specs_9))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(track-stxes_19 exp-specs_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((spec_22)"
"(unsafe-car lst_21)))"
"(let-values(((track-stxes_23"
" exp-specs_24)"
"(let-values(((track-stxes_25)"
" track-stxes_19)"
"((exp-specs_26)"
" exp-specs_20))"
"(let-values(((track-stxes_27"
" exp-specs_28)"
"(let-values()"
"(let-values(((track-stxes1_29"
" exp-specs2_30)"
"(let-values()"
"(let-values(((disarmed-spec_31)"
"(syntax-disarm$1"
" spec_22)))"
"(let-values(((fm_32)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_31))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_31)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_31)))"
" #f)"
" #f)))"
"(let-values(((check-nested_33)"
"(lambda(want-layer_34)"
"(if(member"
" want-layer_34"
"(member"
" layer_12"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                            \"nested `~a' not allowed\""
" fm_32)"
" orig-s_2"
" spec_22))))))"
"(let-values(((tmp_35)"
" fm_32))"
"(let-values(((index_36)"
"(if(symbol?"
" tmp_35)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_35"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_36"
" 6)"
"(if(unsafe-fx<"
" index_36"
" 2)"
"(if(unsafe-fx<"
" index_36"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_22)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_22"
" orig-s_2"
"(syntax-e$1"
" spec_22)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                         \"bad syntax\""
" orig-s_2"
" spec_22))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_37"
" for-meta3_38"
" phase-level4_39"
" spec5_40)"
"(let-values(((s_56)"
" disarmed-spec_31))"
"(let-values(((orig-s_57)"
" s_56))"
"(let-values(((for-meta3_58"
" phase-level4_59"
" spec5_60)"
"(let-values(((s_61)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(pair?"
" s_61)"
"(let-values(((for-meta6_62)"
"(let-values(((s_65)"
"(car"
" s_61)))"
" s_65))"
"((phase-level7_63"
" spec8_64)"
"(let-values(((s_66)"
"(cdr"
" s_61)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(if(pair?"
" s_67)"
"(let-values(((phase-level9_68)"
"(let-values(((s_70)"
"(car"
" s_67)))"
" s_70))"
"((spec10_69)"
"(let-values(((s_71)"
"(cdr"
" s_67)))"
"(let-values(((s_72)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(let-values(((flat-s_73)"
"(to-syntax-list.1"
" s_72)))"
"(if(not"
" flat-s_73)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_57))"
"(let-values()"
" flat-s_73)))))))"
"(values"
" phase-level9_68"
" spec10_69))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_57))))))"
"(values"
" for-meta6_62"
" phase-level7_63"
" spec8_64))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_57)))))"
"(values"
" #t"
" for-meta3_58"
" phase-level4_59"
" spec5_60))))))"
"(let-values(((p_53)"
"(syntax-e$1"
" phase-level4_39)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_53)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"bad `for-meta' phase\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((track-stxes_54"
" exp-specs_55)"
"(loop_8"
" spec5_40"
"(phase+"
" p_53"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_54"
"(let-values(((spec11_74)"
" spec_22)"
"((spec12_75)"
" spec_22)"
"((temp13_76)"
"(list*"
" for-meta3_38"
" phase-level4_39"
" exp-specs_55)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" spec11_74"
" spec12_75"
" temp13_76)"
"(rebuild53.1"
" spec11_74"
" spec12_75"
" temp13_76)))))))))))))"
"(if(unsafe-fx<"
" index_36"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_77"
" for-syntax14_78"
" spec15_79)"
"(let-values(((s_92)"
" disarmed-spec_31))"
"(let-values(((orig-s_93)"
" s_92))"
"(let-values(((for-syntax14_94"
" spec15_95)"
"(let-values(((s_96)"
"(if(syntax?$1"
" s_92)"
"(syntax-e$1"
" s_92)"
" s_92)))"
"(if(pair?"
" s_96)"
"(let-values(((for-syntax16_97)"
"(let-values(((s_99)"
"(car"
" s_96)))"
" s_99))"
"((spec17_98)"
"(let-values(((s_100)"
"(cdr"
" s_96)))"
"(let-values(((s_101)"
"(if(syntax?$1"
" s_100)"
"(syntax-e$1"
" s_100)"
" s_100)))"
"(let-values(((flat-s_102)"
"(to-syntax-list.1"
" s_101)))"
"(if(not"
" flat-s_102)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_93))"
"(let-values()"
" flat-s_102)))))))"
"(values"
" for-syntax16_97"
" spec17_98))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_93)))))"
"(values"
" #t"
" for-syntax14_94"
" spec15_95))))))"
"(let-values(((track-stxes_90"
" exp-specs_91)"
"(loop_8"
" spec15_79"
"(phase+"
" 1"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_90"
"(let-values(((spec18_103)"
" spec_22)"
"((spec19_104)"
" spec_22)"
"((temp20_105)"
"(list*"
" for-syntax14_78"
" exp-specs_91)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" spec18_103"
" spec19_104"
" temp20_105)"
"(rebuild53.1"
" spec18_103"
" spec19_104"
" temp20_105))))))))))"
"(if(unsafe-fx<"
" index_36"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_106"
" for-label21_107"
" spec22_108)"
"(let-values(((s_121)"
" disarmed-spec_31))"
"(let-values(((orig-s_122)"
" s_121))"
"(let-values(((for-label21_123"
" spec22_124)"
"(let-values(((s_125)"
"(if(syntax?$1"
" s_121)"
"(syntax-e$1"
" s_121)"
" s_121)))"
"(if(pair?"
" s_125)"
"(let-values(((for-label23_126)"
"(let-values(((s_128)"
"(car"
" s_125)))"
" s_128))"
"((spec24_127)"
"(let-values(((s_129)"
"(cdr"
" s_125)))"
"(let-values(((s_130)"
"(if(syntax?$1"
" s_129)"
"(syntax-e$1"
" s_129)"
" s_129)))"
"(let-values(((flat-s_131)"
"(to-syntax-list.1"
" s_130)))"
"(if(not"
" flat-s_131)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_122))"
"(let-values()"
" flat-s_131)))))))"
"(values"
" for-label23_126"
" spec24_127))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_122)))))"
"(values"
" #t"
" for-label21_123"
" spec22_124))))))"
"(let-values(((track-stxes_119"
" exp-specs_120)"
"(loop_8"
" spec22_108"
" #f"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_119"
"(let-values(((spec25_132)"
" spec_22)"
"((spec26_133)"
" spec_22)"
"((temp27_134)"
"(list*"
" for-label21_107"
" exp-specs_120)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" spec25_132"
" spec26_133"
" temp27_134)"
"(rebuild53.1"
" spec25_132"
" spec26_133"
" temp27_134))))))))))"
"(if(unsafe-fx<"
" index_36"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_11"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"nested `protect' not allowed\""
" orig-s_2"
" spec_22))"
"(void))"
"(values))))"
"(let-values(((ok?_135"
" protect28_136"
" p-spec29_137)"
"(let-values(((s_150)"
" disarmed-spec_31))"
"(let-values(((orig-s_151)"
" s_150))"
"(let-values(((protect28_152"
" p-spec29_153)"
"(let-values(((s_154)"
"(if(syntax?$1"
" s_150)"
"(syntax-e$1"
" s_150)"
" s_150)))"
"(if(pair?"
" s_154)"
"(let-values(((protect30_155)"
"(let-values(((s_157)"
"(car"
" s_154)))"
" s_157))"
"((p-spec31_156)"
"(let-values(((s_158)"
"(cdr"
" s_154)))"
"(let-values(((s_159)"
"(if(syntax?$1"
" s_158)"
"(syntax-e$1"
" s_158)"
" s_158)))"
"(let-values(((flat-s_160)"
"(to-syntax-list.1"
" s_159)))"
"(if(not"
" flat-s_160)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_151))"
"(let-values()"
" flat-s_160)))))))"
"(values"
" protect30_155"
" p-spec31_156))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_151)))))"
"(values"
" #t"
" protect28_152"
" p-spec29_153))))))"
"(let-values(((track-stxes_148"
" exp-specs_149)"
"(loop_8"
" p-spec29_137"
" at-phase_10"
" #t"
" layer_12)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_148"
"(let-values(((spec32_161)"
" spec_22)"
"((spec33_162)"
" spec_22)"
"((temp34_163)"
"(list*"
" protect28_136"
" exp-specs_149)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" spec32_161"
" spec33_162"
" temp34_163)"
"(rebuild53.1"
" spec32_161"
" spec33_162"
" temp34_163)))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_164"
" rename35_165"
" id:from36_166"
" id:to37_167)"
"(let-values(((s_180)"
" disarmed-spec_31))"
"(let-values(((orig-s_181)"
" s_180))"
"(let-values(((rename35_182"
" id:from36_183"
" id:to37_184)"
"(let-values(((s_185)"
"(if(syntax?$1"
" s_180)"
"(syntax-e$1"
" s_180)"
" s_180)))"
"(if(pair?"
" s_185)"
"(let-values(((rename38_186)"
"(let-values(((s_189)"
"(car"
" s_185)))"
" s_189))"
"((id:from39_187"
" id:to40_188)"
"(let-values(((s_190)"
"(cdr"
" s_185)))"
"(let-values(((s_191)"
"(if(syntax?$1"
" s_190)"
"(syntax-e$1"
" s_190)"
" s_190)))"
"(if(pair?"
" s_191)"
"(let-values(((id:from41_192)"
"(let-values(((s_194)"
"(car"
" s_191)))"
"(if(let-values(((or-part_195)"
"(if(syntax?$1"
" s_194)"
"(symbol?"
"(syntax-e$1"
" s_194))"
" #f)))"
"(if or-part_195"
" or-part_195"
"(symbol?"
" s_194)))"
" s_194"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_181"
" s_194))))"
"((id:to42_193)"
"(let-values(((s_196)"
"(cdr"
" s_191)))"
"(let-values(((s_197)"
"(if(syntax?$1"
" s_196)"
"(syntax-e$1"
" s_196)"
" s_196)))"
"(if(pair?"
" s_197)"
"(let-values(((id:to43_198)"
"(let-values(((s_199)"
"(car"
" s_197)))"
"(if(let-values(((or-part_200)"
"(if(syntax?$1"
" s_199)"
"(symbol?"
"(syntax-e$1"
" s_199))"
" #f)))"
"(if or-part_200"
" or-part_200"
"(symbol?"
" s_199)))"
" s_199"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_181"
" s_199))))"
"(()"
"(let-values(((s_201)"
"(cdr"
" s_197)))"
"(let-values(((s_202)"
"(if(syntax?$1"
" s_201)"
"(syntax-e$1"
" s_201)"
" s_201)))"
"(if(null?"
" s_202)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_181))))))"
"(values"
" id:to43_198))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_181))))))"
"(values"
" id:from41_192"
" id:to42_193))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_181))))))"
"(values"
" rename38_186"
" id:from39_187"
" id:to40_188))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_181)))))"
"(values"
" #t"
" rename35_182"
" id:from36_183"
" id:to37_184))))))"
"(begin"
"(parse-identifier!"
" id:from36_166"
" orig-s_2"
"(syntax-e$1"
" id:to37_167)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))))))"
"(if(unsafe-fx<"
" index_36"
" 9)"
"(if(unsafe-fx<"
" index_36"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_203"
" struct44_204"
" id:struct45_205"
" id:field46_206)"
"(let-values(((s_219)"
" disarmed-spec_31))"
"(let-values(((orig-s_220)"
" s_219))"
"(let-values(((struct44_221"
" id:struct45_222"
" id:field46_223)"
"(let-values(((s_224)"
"(if(syntax?$1"
" s_219)"
"(syntax-e$1"
" s_219)"
" s_219)))"
"(if(pair?"
" s_224)"
"(let-values(((struct47_225)"
"(let-values(((s_228)"
"(car"
" s_224)))"
" s_228))"
"((id:struct48_226"
" id:field49_227)"
"(let-values(((s_229)"
"(cdr"
" s_224)))"
"(let-values(((s_230)"
"(if(syntax?$1"
" s_229)"
"(syntax-e$1"
" s_229)"
" s_229)))"
"(if(pair?"
" s_230)"
"(let-values(((id:struct50_231)"
"(let-values(((s_233)"
"(car"
" s_230)))"
"(if(let-values(((or-part_234)"
"(if(syntax?$1"
" s_233)"
"(symbol?"
"(syntax-e$1"
" s_233))"
" #f)))"
"(if or-part_234"
" or-part_234"
"(symbol?"
" s_233)))"
" s_233"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_220"
" s_233))))"
"((id:field51_232)"
"(let-values(((s_235)"
"(cdr"
" s_230)))"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_235)"
"(syntax-e$1"
" s_235)"
" s_235)))"
"(if(pair?"
" s_236)"
"(let-values(((id:field52_237)"
"(let-values(((s_238)"
"(car"
" s_236)))"
"(let-values(((s_239)"
"(if(syntax?$1"
" s_238)"
"(syntax-e$1"
" s_238)"
" s_238)))"
"(let-values(((flat-s_240)"
"(to-syntax-list.1"
" s_239)))"
"(if(not"
" flat-s_240)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_220))"
"(let-values()"
"(let-values(((id:field_241)"
"(let-values(((lst_242)"
" flat-s_240))"
"(begin"
"(if(list?"
" lst_242)"
"(void)"
"(let-values()"
"(in-list"
" lst_242)))"
"((letrec-values(((for-loop_243)"
"(lambda(id:field_244"
" lst_245)"
"(if(pair?"
" lst_245)"
"(let-values(((s_246)"
"(unsafe-car"
" lst_245)))"
"(let-values(((id:field_247)"
"(let-values(((id:field_248)"
" id:field_244))"
"(let-values(((id:field_249)"
"(let-values()"
"(let-values(((id:field53_250)"
"(let-values()"
"(if(let-values(((or-part_251)"
"(if(syntax?$1"
" s_246)"
"(symbol?"
"(syntax-e$1"
" s_246))"
" #f)))"
"(if or-part_251"
" or-part_251"
"(symbol?"
" s_246)))"
" s_246"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_220"
" s_246)))))"
"(cons"
" id:field53_250"
" id:field_248)))))"
"(values"
" id:field_249)))))"
"(for-loop_243"
" id:field_247"
"(unsafe-cdr"
" lst_245))))"
" id:field_244))))"
" for-loop_243)"
" null"
" lst_242)))))"
"(alt-reverse"
" id:field_241))))))))"
"(()"
"(let-values(((s_252)"
"(cdr"
" s_236)))"
"(let-values(((s_253)"
"(if(syntax?$1"
" s_252)"
"(syntax-e$1"
" s_252)"
" s_252)))"
"(if(null?"
" s_253)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_220))))))"
"(values"
" id:field52_237))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_220))))))"
"(values"
" id:struct50_231"
" id:field51_232))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_220))))))"
"(values"
" struct47_225"
" id:struct48_226"
" id:field49_227))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_220)))))"
"(values"
" #t"
" struct44_221"
" id:struct45_222"
" id:field46_223))))))"
"(begin"
"(parse-struct!"
" id:struct45_205"
" orig-s_2"
" id:field46_206"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_36"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_254"
" all-from54_255"
" mod-path55_256)"
"(let-values(((s_267)"
" disarmed-spec_31))"
"(let-values(((orig-s_268)"
" s_267))"
"(let-values(((all-from54_269"
" mod-path55_270)"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_267)"
"(syntax-e$1"
" s_267)"
" s_267)))"
"(if(pair?"
" s_271)"
"(let-values(((all-from56_272)"
"(let-values(((s_274)"
"(car"
" s_271)))"
" s_274))"
"((mod-path57_273)"
"(let-values(((s_275)"
"(cdr"
" s_271)))"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_275)"
"(syntax-e$1"
" s_275)"
" s_275)))"
"(if(pair?"
" s_276)"
"(let-values(((mod-path58_277)"
"(let-values(((s_278)"
"(car"
" s_276)))"
" s_278))"
"(()"
"(let-values(((s_279)"
"(cdr"
" s_276)))"
"(let-values(((s_280)"
"(if(syntax?$1"
" s_279)"
"(syntax-e$1"
" s_279)"
" s_279)))"
"(if(null?"
" s_280)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_268))))))"
"(values"
" mod-path58_277))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_268))))))"
"(values"
" all-from56_272"
" mod-path57_273))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_268)))))"
"(values"
" #t"
" all-from54_269"
" mod-path55_270))))))"
"(begin"
"(parse-all-from"
" mod-path55_256"
" orig-s_2"
" self_4"
" null"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_281"
" all-from-except59_282"
" mod-path60_283"
" id61_284)"
"(let-values(((s_297)"
" disarmed-spec_31))"
"(let-values(((orig-s_298)"
" s_297))"
"(let-values(((all-from-except59_299"
" mod-path60_300"
" id61_301)"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_297)"
"(syntax-e$1"
" s_297)"
" s_297)))"
"(if(pair?"
" s_302)"
"(let-values(((all-from-except62_303)"
"(let-values(((s_306)"
"(car"
" s_302)))"
" s_306))"
"((mod-path63_304"
" id64_305)"
"(let-values(((s_307)"
"(cdr"
" s_302)))"
"(let-values(((s_308)"
"(if(syntax?$1"
" s_307)"
"(syntax-e$1"
" s_307)"
" s_307)))"
"(if(pair?"
" s_308)"
"(let-values(((mod-path65_309)"
"(let-values(((s_311)"
"(car"
" s_308)))"
" s_311))"
"((id66_310)"
"(let-values(((s_312)"
"(cdr"
" s_308)))"
"(let-values(((s_313)"
"(if(syntax?$1"
" s_312)"
"(syntax-e$1"
" s_312)"
" s_312)))"
"(let-values(((flat-s_314)"
"(to-syntax-list.1"
" s_313)))"
"(if(not"
" flat-s_314)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_298))"
"(let-values()"
"(let-values(((id_315)"
"(let-values(((lst_316)"
" flat-s_314))"
"(begin"
"(if(list?"
" lst_316)"
"(void)"
"(let-values()"
"(in-list"
" lst_316)))"
"((letrec-values(((for-loop_317)"
"(lambda(id_318"
" lst_319)"
"(if(pair?"
" lst_319)"
"(let-values(((s_320)"
"(unsafe-car"
" lst_319)))"
"(let-values(((id_321)"
"(let-values(((id_322)"
" id_318))"
"(let-values(((id_323)"
"(let-values()"
"(let-values(((id67_324)"
"(let-values()"
"(if(let-values(((or-part_325)"
"(if(syntax?$1"
" s_320)"
"(symbol?"
"(syntax-e$1"
" s_320))"
" #f)))"
"(if or-part_325"
" or-part_325"
"(symbol?"
" s_320)))"
" s_320"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_298"
" s_320)))))"
"(cons"
" id67_324"
" id_322)))))"
"(values"
" id_323)))))"
"(for-loop_317"
" id_321"
"(unsafe-cdr"
" lst_319))))"
" id_318))))"
" for-loop_317)"
" null"
" lst_316)))))"
"(alt-reverse"
" id_315)))))))))"
"(values"
" mod-path65_309"
" id66_310))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_298))))))"
"(values"
" all-from-except62_303"
" mod-path63_304"
" id64_305))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_298)))))"
"(values"
" #t"
" all-from-except59_299"
" mod-path60_300"
" id61_301))))))"
"(begin"
"(parse-all-from"
" mod-path60_283"
" orig-s_2"
" self_4"
" id61_284"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))))"
"(if(unsafe-fx<"
" index_36"
" 11)"
"(if(unsafe-fx<"
" index_36"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_326"
" all-defined68_327)"
"(let-values(((s_336)"
" disarmed-spec_31))"
"(let-values(((orig-s_337)"
" s_336))"
"(let-values(((all-defined68_338)"
"(let-values(((s_339)"
"(if(syntax?$1"
" s_336)"
"(syntax-e$1"
" s_336)"
" s_336)))"
"(if(pair?"
" s_339)"
"(let-values(((all-defined69_340)"
"(let-values(((s_341)"
"(car"
" s_339)))"
" s_341))"
"(()"
"(let-values(((s_342)"
"(cdr"
" s_339)))"
"(let-values(((s_343)"
"(if(syntax?$1"
" s_342)"
"(syntax-e$1"
" s_342)"
" s_342)))"
"(if(null?"
" s_343)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_337))))))"
"(values"
" all-defined69_340))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_337)))))"
"(values"
" #t"
" all-defined68_338))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_344"
" all-defined-except70_345"
" id71_346)"
"(let-values(((s_357)"
" disarmed-spec_31))"
"(let-values(((orig-s_358)"
" s_357))"
"(let-values(((all-defined-except70_359"
" id71_360)"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_357)"
"(syntax-e$1"
" s_357)"
" s_357)))"
"(if(pair?"
" s_361)"
"(let-values(((all-defined-except72_362)"
"(let-values(((s_364)"
"(car"
" s_361)))"
" s_364))"
"((id73_363)"
"(let-values(((s_365)"
"(cdr"
" s_361)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(let-values(((flat-s_367)"
"(to-syntax-list.1"
" s_366)))"
"(if(not"
" flat-s_367)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_358))"
"(let-values()"
"(let-values(((id_368)"
"(let-values(((lst_369)"
" flat-s_367))"
"(begin"
"(if(list?"
" lst_369)"
"(void)"
"(let-values()"
"(in-list"
" lst_369)))"
"((letrec-values(((for-loop_370)"
"(lambda(id_371"
" lst_372)"
"(if(pair?"
" lst_372)"
"(let-values(((s_373)"
"(unsafe-car"
" lst_372)))"
"(let-values(((id_374)"
"(let-values(((id_375)"
" id_371))"
"(let-values(((id_376)"
"(let-values()"
"(let-values(((id74_377)"
"(let-values()"
"(if(let-values(((or-part_378)"
"(if(syntax?$1"
" s_373)"
"(symbol?"
"(syntax-e$1"
" s_373))"
" #f)))"
"(if or-part_378"
" or-part_378"
"(symbol?"
" s_373)))"
" s_373"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_358"
" s_373)))))"
"(cons"
" id74_377"
" id_375)))))"
"(values"
" id_376)))))"
"(for-loop_370"
" id_374"
"(unsafe-cdr"
" lst_372))))"
" id_371))))"
" for-loop_370)"
" null"
" lst_369)))))"
"(alt-reverse"
" id_368)))))))))"
"(values"
" all-defined-except72_362"
" id73_363))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_358)))))"
"(values"
" #t"
" all-defined-except70_359"
" id71_360))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id71_346"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22)))))))"
"(if(unsafe-fx<"
" index_36"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_379"
" prefix-all-defined75_380"
" id:prefix76_381)"
"(let-values(((s_392)"
" disarmed-spec_31))"
"(let-values(((orig-s_393)"
" s_392))"
"(let-values(((prefix-all-defined75_394"
" id:prefix76_395)"
"(let-values(((s_396)"
"(if(syntax?$1"
" s_392)"
"(syntax-e$1"
" s_392)"
" s_392)))"
"(if(pair?"
" s_396)"
"(let-values(((prefix-all-defined77_397)"
"(let-values(((s_399)"
"(car"
" s_396)))"
" s_399))"
"((id:prefix78_398)"
"(let-values(((s_400)"
"(cdr"
" s_396)))"
"(let-values(((s_401)"
"(if(syntax?$1"
" s_400)"
"(syntax-e$1"
" s_400)"
" s_400)))"
"(if(pair?"
" s_401)"
"(let-values(((id:prefix79_402)"
"(let-values(((s_403)"
"(car"
" s_401)))"
"(if(let-values(((or-part_404)"
"(if(syntax?$1"
" s_403)"
"(symbol?"
"(syntax-e$1"
" s_403))"
" #f)))"
"(if or-part_404"
" or-part_404"
"(symbol?"
" s_403)))"
" s_403"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_393"
" s_403))))"
"(()"
"(let-values(((s_405)"
"(cdr"
" s_401)))"
"(let-values(((s_406)"
"(if(syntax?$1"
" s_405)"
"(syntax-e$1"
" s_405)"
" s_405)))"
"(if(null?"
" s_406)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_393))))))"
"(values"
" id:prefix79_402))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_393))))))"
"(values"
" prefix-all-defined77_397"
" id:prefix78_398))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_393)))))"
"(values"
" #t"
" prefix-all-defined75_394"
" id:prefix76_395))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
"(syntax-e$1"
" id:prefix76_381)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_36"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_407"
" prefix-all-defined-except80_408"
" id:prefix81_409"
" id82_410)"
"(let-values(((s_423)"
" disarmed-spec_31))"
"(let-values(((orig-s_424)"
" s_423))"
"(let-values(((prefix-all-defined-except80_425"
" id:prefix81_426"
" id82_427)"
"(let-values(((s_428)"
"(if(syntax?$1"
" s_423)"
"(syntax-e$1"
" s_423)"
" s_423)))"
"(if(pair?"
" s_428)"
"(let-values(((prefix-all-defined-except83_429)"
"(let-values(((s_432)"
"(car"
" s_428)))"
" s_432))"
"((id:prefix84_430"
" id85_431)"
"(let-values(((s_433)"
"(cdr"
" s_428)))"
"(let-values(((s_434)"
"(if(syntax?$1"
" s_433)"
"(syntax-e$1"
" s_433)"
" s_433)))"
"(if(pair?"
" s_434)"
"(let-values(((id:prefix86_435)"
"(let-values(((s_437)"
"(car"
" s_434)))"
"(if(let-values(((or-part_438)"
"(if(syntax?$1"
" s_437)"
"(symbol?"
"(syntax-e$1"
" s_437))"
" #f)))"
"(if or-part_438"
" or-part_438"
"(symbol?"
" s_437)))"
" s_437"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_424"
" s_437))))"
"((id87_436)"
"(let-values(((s_439)"
"(cdr"
" s_434)))"
"(let-values(((s_440)"
"(if(syntax?$1"
" s_439)"
"(syntax-e$1"
" s_439)"
" s_439)))"
"(let-values(((flat-s_441)"
"(to-syntax-list.1"
" s_440)))"
"(if(not"
" flat-s_441)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_424))"
"(let-values()"
"(let-values(((id_442)"
"(let-values(((lst_443)"
" flat-s_441))"
"(begin"
"(if(list?"
" lst_443)"
"(void)"
"(let-values()"
"(in-list"
" lst_443)))"
"((letrec-values(((for-loop_444)"
"(lambda(id_445"
" lst_446)"
"(if(pair?"
" lst_446)"
"(let-values(((s_447)"
"(unsafe-car"
" lst_446)))"
"(let-values(((id_448)"
"(let-values(((id_449)"
" id_445))"
"(let-values(((id_450)"
"(let-values()"
"(let-values(((id88_451)"
"(let-values()"
"(if(let-values(((or-part_452)"
"(if(syntax?$1"
" s_447)"
"(symbol?"
"(syntax-e$1"
" s_447))"
" #f)))"
"(if or-part_452"
" or-part_452"
"(symbol?"
" s_447)))"
" s_447"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_424"
" s_447)))))"
"(cons"
" id88_451"
" id_449)))))"
"(values"
" id_450)))))"
"(for-loop_444"
" id_448"
"(unsafe-cdr"
" lst_446))))"
" id_445))))"
" for-loop_444)"
" null"
" lst_443)))))"
"(alt-reverse"
" id_442)))))))))"
"(values"
" id:prefix86_435"
" id87_436))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_424))))))"
"(values"
" prefix-all-defined-except83_429"
" id:prefix84_430"
" id85_431))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_424)))))"
"(values"
" #t"
" prefix-all-defined-except80_425"
" id:prefix81_426"
" id82_427))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id82_410"
"(syntax-e$1"
" id:prefix81_409)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values(((ok?_453"
" expand89_454"
" id90_455"
" datum91_456)"
"(let-values(((s_498)"
" disarmed-spec_31))"
"(let-values(((orig-s_499)"
" s_498))"
"(let-values(((expand89_500"
" id90_501"
" datum91_502)"
"(let-values(((s_503)"
"(if(syntax?$1"
" s_498)"
"(syntax-e$1"
" s_498)"
" s_498)))"
"(if(pair?"
" s_503)"
"(let-values(((expand92_504)"
"(let-values(((s_507)"
"(car"
" s_503)))"
" s_507))"
"((id93_505"
" datum94_506)"
"(let-values(((s_508)"
"(cdr"
" s_503)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(if(pair?"
" s_509)"
"(let-values(((id95_510"
" datum96_511)"
"(let-values(((s_512)"
"(car"
" s_509)))"
"(let-values(((s_513)"
"(if(syntax?$1"
" s_512)"
"(syntax-e$1"
" s_512)"
" s_512)))"
"(if(pair?"
" s_513)"
"(let-values(((id97_514)"
"(let-values(((s_516)"
"(car"
" s_513)))"
"(if(let-values(((or-part_517)"
"(if(syntax?$1"
" s_516)"
"(symbol?"
"(syntax-e$1"
" s_516))"
" #f)))"
"(if or-part_517"
" or-part_517"
"(symbol?"
" s_516)))"
" s_516"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_499"
" s_516))))"
"((datum98_515)"
"(let-values(((s_518)"
"(cdr"
" s_513)))"
" s_518)))"
"(values"
" id97_514"
" datum98_515))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_499)))))"
"(()"
"(let-values(((s_519)"
"(cdr"
" s_509)))"
"(let-values(((s_520)"
"(if(syntax?$1"
" s_519)"
"(syntax-e$1"
" s_519)"
" s_519)))"
"(if(null?"
" s_520)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_499))))))"
"(values"
" id95_510"
" datum96_511))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_499))))))"
"(values"
" expand92_504"
" id93_505"
" datum94_506))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_499)))))"
"(values"
" #t"
" expand89_500"
" id90_501"
" datum91_502))))))"
"(let-values(((ok?_469"
" expand99_470"
" form100_471)"
"(let-values(((s_521)"
" disarmed-spec_31))"
"(let-values(((orig-s_522)"
" s_521))"
"(let-values(((expand99_523"
" form100_524)"
"(let-values(((s_525)"
"(if(syntax?$1"
" s_521)"
"(syntax-e$1"
" s_521)"
" s_521)))"
"(if(pair?"
" s_525)"
"(let-values(((expand101_526)"
"(let-values(((s_528)"
"(car"
" s_525)))"
" s_528))"
"((form102_527)"
"(let-values(((s_529)"
"(cdr"
" s_525)))"
"(let-values(((s_530)"
"(if(syntax?$1"
" s_529)"
"(syntax-e$1"
" s_529)"
" s_529)))"
"(if(pair?"
" s_530)"
"(let-values(((form103_531)"
"(let-values(((s_532)"
"(car"
" s_530)))"
" s_532))"
"(()"
"(let-values(((s_533)"
"(cdr"
" s_530)))"
"(let-values(((s_534)"
"(if(syntax?$1"
" s_533)"
"(syntax-e$1"
" s_533)"
" s_533)))"
"(if(null?"
" s_534)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_522))))))"
"(values"
" form103_531))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_522))))))"
"(values"
" expand101_526"
" form102_527))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_522)))))"
"(values"
" #t"
" expand99_523"
" form100_524))))))"
"(let-values(((exp-spec_482)"
"(let-values(((temp108_535)"
" form100_471)"
"((temp109_536)"
"(let-values(((the-struct_537)"
" ctx_6))"
"(if(expand-context?"
" the-struct_537)"
"(let-values(((only-immediate?110_538)"
" #t)"
"((def-ctx-scopes111_539)"
"(box"
" null)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_537)"
"(root-expand-context-post-expansion-scope"
" the-struct_537)"
"(root-expand-context-top-level-bind-scope"
" the-struct_537)"
"(root-expand-context-all-scopes-stx"
" the-struct_537)"
"(root-expand-context-use-site-scopes"
" the-struct_537)"
"(root-expand-context-defined-syms"
" the-struct_537)"
"(root-expand-context-frame-id"
" the-struct_537)"
"(root-expand-context-counter"
" the-struct_537)"
"(root-expand-context-lift-key"
" the-struct_537)"
"(expand-context-context"
" the-struct_537)"
"(expand-context-phase"
" the-struct_537)"
"(expand-context-namespace"
" the-struct_537)"
"(expand-context-env"
" the-struct_537)"
"(expand-context-user-env"
" the-struct_537)"
"(expand-context-post-expansion-scope-action"
" the-struct_537)"
"(expand-context-scopes"
" the-struct_537)"
" def-ctx-scopes111_539"
"(expand-context-binding-layer"
" the-struct_537)"
"(expand-context-reference-records"
" the-struct_537)"
" only-immediate?110_538"
"(expand-context-just-once?"
" the-struct_537)"
"(expand-context-module-begin-k"
" the-struct_537)"
"(expand-context-need-eventually-defined"
" the-struct_537)"
"(expand-context-allow-unbound?"
" the-struct_537)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_537)"
"(expand-context-stops"
" the-struct_537)"
"(expand-context-current-introduction-scopes"
" the-struct_537)"
"(expand-context-declared-submodule-names"
" the-struct_537)"
"(expand-context-lifts"
" the-struct_537)"
"(expand-context-lift-envs"
" the-struct_537)"
"(expand-context-module-lifts"
" the-struct_537)"
"(expand-context-require-lifts"
" the-struct_537)"
"(expand-context-to-module-lifts"
" the-struct_537)"
"(expand-context-requires+provides"
" the-struct_537)"
"(expand-context-name"
" the-struct_537)"
"(expand-context-observer"
" the-struct_537)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"expand-context?\""
" the-struct_537)))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp108_535"
" temp109_536)"
"(expand7.1"
" temp108_535"
" temp109_536)))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_482))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_482)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_482"
" at-phase_10))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                   \"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((ok?_483"
" begin104_484"
" spec105_485)"
"(let-values(((s_540)"
" exp-spec_482))"
"(let-values(((orig-s_541)"
" s_540))"
"(let-values(((begin104_542"
" spec105_543)"
"(let-values(((s_544)"
"(if(syntax?$1"
" s_540)"
"(syntax-e$1"
" s_540)"
" s_540)))"
"(if(pair?"
" s_544)"
"(let-values(((begin106_545)"
"(let-values(((s_547)"
"(car"
" s_544)))"
" s_547))"
"((spec107_546)"
"(let-values(((s_548)"
"(cdr"
" s_544)))"
"(let-values(((s_549)"
"(if(syntax?$1"
" s_548)"
"(syntax-e$1"
" s_548)"
" s_548)))"
"(let-values(((flat-s_550)"
"(to-syntax-list.1"
" s_549)))"
"(if(not"
" flat-s_550)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_541))"
"(let-values()"
" flat-s_550)))))))"
"(values"
" begin106_545"
" spec107_546))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_541)))))"
"(values"
" #t"
" begin104_542"
" spec105_543))))))"
"(let-values(((track-stxes_496"
" exp-specs_497)"
"(loop_8"
" spec105_485"
" at-phase_10"
" protected?_11"
" layer_12)))"
"(values"
"(list*"
" spec_22"
" exp-spec_482"
" track-stxes_496)"
" exp-specs_497)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_29"
" track-stxes_25)"
"(cons"
" exp-specs2_30"
" exp-specs_26))))))"
"(values"
" track-stxes_27"
" exp-specs_28)))))"
"(for-loop_18"
" track-stxes_23"
" exp-specs_24"
"(unsafe-cdr lst_21))))"
"(values track-stxes_19 exp-specs_20)))))"
" for-loop_18)"
" null"
" null"
" lst_17)))))"
"(values(alt-reverse track-stxes_15)(alt-reverse exp-specs_16)))))"
"(values(apply append track-stxess_13)(apply append exp-specss_14))))))"
" loop_8)"
" specs_1"
" phase_5"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_551 orig-s_552 sym_553 at-phase_554 ns_555 rp_556 protected?_557)"
"(let-values(((b_558)(resolve+shift/extra-inspector spec_551 at-phase_554 ns_555)))"
"(let-values((()"
"(begin"
"(if b_558"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_552"
" spec_551)))"
"(values))))"
"(let-values(((as-transformer?_559)(binding-for-transformer? b_558 spec_551 at-phase_554 ns_555)))"
"(let-values(((immed-b_560)"
"(let-values(((...r/expand/provide.rkt:187:18_561) resolve+shift22.1)"
"((spec121_562) spec_551)"
"((at-phase122_563) at-phase_554)"
"((temp123_564) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f temp123_564 #t #f #f spec121_562 at-phase122_563)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:187:18_561"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp123_564)"
" spec121_562"
" at-phase122_563)))))"
"(let-values(((...r/expand/provide.rkt:188:2_565) add-provide!103.1)"
"((rp112_566) rp_556)"
"((sym113_567) sym_553)"
"((at-phase114_568) at-phase_554)"
"((b115_569) b_558)"
"((immed-b116_570) immed-b_560)"
"((spec117_571) spec_551)"
"((orig-s118_572) orig-s_552)"
"((protected?119_573) protected?_557)"
"((as-transformer?120_574) as-transformer?_559))"
"(if(variable-reference-constant?(#%variable-reference add-provide!103.1))"
"(add-provide!101.1"
" protected?119_573"
" as-transformer?120_574"
" rp112_566"
" sym113_567"
" at-phase114_568"
" b115_569"
" immed-b116_570"
" spec117_571"
" orig-s118_572)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:188:2_565"
" keyword-procedure-extract"
" '(#:as-protected? #:as-transformer?)"
" 9)"
" '(#:as-protected? #:as-transformer?)"
"(list protected?119_573 as-transformer?120_574)"
" rp112_566"
" sym113_567"
" at-phase114_568"
" b115_569"
" immed-b116_570"
" spec117_571"
" orig-s118_572)))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_575 orig-s_576 fields_577 at-phase_578 ns_579 rp_580 protected?_581)"
"(let-values(((mk_582)"
"(lambda(fmt_584)"
"(let-values(((sym_585)(string->symbol(format fmt_584(syntax-e$1 id:struct_575)))))"
"(datum->syntax$1 id:struct_575 sym_585 id:struct_575)))))"
"(let-values(((mk2_583)"
"(lambda(fmt_586 field-id_587)"
"(let-values(((sym_588)"
"(string->symbol"
"(format fmt_586(syntax-e$1 id:struct_575)(syntax-e$1 field-id_587)))))"
"(datum->syntax$1 id:struct_575 sym_588 id:struct_575)))))"
"(begin"
"(let-values(((pos->vals_589 pos-next_590 init_591 pos-cont?_592 val-cont?_593 all-cont?_594)"
"                        (make-sequence '(fmt) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_595)"
"(lambda(fold-var_596 pos_597)"
"(if(if pos-cont?_592(pos-cont?_592 pos_597) #t)"
"(let-values(((fmt_598)(pos->vals_589 pos_597)))"
"(if(if val-cont?_593(val-cont?_593 fmt_598) #t)"
"(let-values(((fold-var_599)"
"(let-values(((fold-var_600) fold-var_596))"
"(let-values(((fold-var_601)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_602)(mk_582 fmt_598)))"
"(parse-identifier!"
" id_602"
" orig-s_576"
"(syntax-e$1 id_602)"
" at-phase_578"
" ns_579"
" rp_580"
" protected?_581)))"
"(void)))))"
"(values fold-var_601)))))"
"(if(if all-cont?_594(all-cont?_594 pos_597 fmt_598) #t)"
"(for-loop_595 fold-var_599(pos-next_590 pos_597))"
" fold-var_599))"
" fold-var_596))"
" fold-var_596))))"
" for-loop_595)"
"(void)"
" init_591)))"
"(let-values(((lst_603) fields_577))"
"(begin"
"(if(list? lst_603)(void)(let-values()(in-list lst_603)))"
"((letrec-values(((for-loop_604)"
"(lambda(fold-var_605 lst_606)"
"(if(pair? lst_606)"
"(let-values(((field_607)(unsafe-car lst_606)))"
"(let-values(((fold-var_608)"
"(let-values(((fold-var_609) fold-var_605))"
"(let-values(((fold-var_610)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_611)"
"                                                                                        (mk2_583 \"~a-~a\" field_607)))"
"(let-values(((set-id_612)"
"(mk2_583"
"                                                                                           \"set-~a-~a!\""
" field_607)))"
"(begin"
"(parse-identifier!"
" get-id_611"
" orig-s_576"
"(syntax-e$1 get-id_611)"
" at-phase_578"
" ns_579"
" rp_580"
" protected?_581)"
"(parse-identifier!"
" set-id_612"
" orig-s_576"
"(syntax-e$1 set-id_612)"
" at-phase_578"
" ns_579"
" rp_580"
" protected?_581)))))"
"(void)))))"
"(values fold-var_610)))))"
"(for-loop_604 fold-var_608(unsafe-cdr lst_606))))"
" fold-var_605))))"
" for-loop_604)"
"(void)"
" lst_603))))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_613 orig-s_614 self_615 except-ids_616 at-phase_617 ns_618 rp_619 protected?_620 ctx_621)"
"(let-values(((mod-path_622)(syntax->datum$1 mod-path-stx_613)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_622)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_614 mod-path-stx_613)))"
"(values))))"
"(let-values(((mpi_623)(module-path->mpi/context mod-path_622 ctx_621)))"
"(parse-all-from-module mpi_623 #f orig-s_614 except-ids_616 #f at-phase_617 ns_618 rp_619 protected?_620))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_624 matching-stx_625 orig-s_626 except-ids_627 prefix-sym_628 at-phase_629 ns_630 rp_631 protected?_632)"
"(let-values(((requireds_633)(extract-module-requires rp_631 mpi_624 at-phase_629)))"
"(let-values(((phase-desc_634)"
"(lambda()"
"(if(zero-phase? at-phase_629)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_629)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_629)))))))"
"(let-values((()"
"(begin"
"(if requireds_633"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_634))"
" orig-s_626"
" matching-stx_625)))"
"(values))))"
"(let-values(((add-prefix_635)"
"(lambda(sym_637)"
"                          (if prefix-sym_628 (string->symbol (format \"~a~a\" prefix-sym_628 sym_637)) sym_637))))"
"(let-values(((found_636)(make-hasheq)))"
"(begin"
"(let-values(((lst_638) requireds_633))"
"(begin"
"(if(list? lst_638)(void)(let-values()(in-list lst_638)))"
"((letrec-values(((for-loop_639)"
"(lambda(fold-var_640 lst_641)"
"(if(pair? lst_641)"
"(let-values(((i_642)(unsafe-car lst_641)))"
"(let-values(((fold-var_643)"
"(let-values(((fold-var_644) fold-var_640))"
"(let-values(((fold-var_645)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_646)"
"(required-id i_642)))"
"(let-values(((phase_647)"
"(required-phase i_642)))"
"(if(let-values(((or-part_648)"
"(if matching-stx_625"
"(not"
"(if(eqv?"
" phase_647"
" at-phase_629)"
"(free-identifier=?$1"
" id_646"
"(datum->syntax$1"
" matching-stx_625"
"(syntax-e$1"
" id_646))"
" phase_647"
" phase_647)"
" #f))"
" #f)))"
"(if or-part_648"
" or-part_648"
"(let-values(((lst_649)"
" except-ids_627))"
"(begin"
"(if(list? lst_649)"
"(void)"
"(let-values()"
"(in-list lst_649)))"
"((letrec-values(((for-loop_650)"
"(lambda(result_651"
" lst_652)"
"(if(pair?"
" lst_652)"
"(let-values(((except-id_653)"
"(unsafe-car"
" lst_652)))"
"(let-values(((result_654)"
"(let-values(((result_655)"
" result_651))"
"(let-values(((result_656)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_646"
" except-id_653"
" phase_647"
" phase_647)"
"(hash-set!"
" found_636"
" except-id_653"
" #t)"
" #f)))))"
"(values"
" result_656)))))"
"(if(not"
"((lambda x_657"
" result_654)"
" except-id_653))"
"(for-loop_650"
" result_654"
"(unsafe-cdr"
" lst_652))"
" result_654)))"
" result_651))))"
" for-loop_650)"
" #f"
" lst_649)))))"
"(void)"
"(let-values()"
"(let-values(((b_658)"
"(resolve+shift/extra-inspector"
" id_646"
" phase_647"
" ns_630)))"
"(let-values(((immed-b_659)"
"(let-values(((...r/expand/provide.rkt:255:22_660)"
" resolve+shift22.1)"
"((id133_661)"
" id_646)"
"((phase134_662)"
" phase_647)"
"((temp135_663)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp135_663"
" #t"
" #f"
" #f"
" id133_661"
" phase134_662)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:255:22_660"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list"
" temp135_663)"
" id133_661"
" phase134_662)))))"
"(let-values(((...r/expand/provide.rkt:256:6_664)"
" add-provide!103.1)"
"((rp124_665)"
" rp_631)"
"((temp125_666)"
"(add-prefix_635"
"(syntax-e$1"
" id_646)))"
"((phase126_667)"
" phase_647)"
"((b127_668)"
" b_658)"
"((immed-b128_669)"
" immed-b_659)"
"((id129_670)"
" id_646)"
"((orig-s130_671)"
" orig-s_626)"
"((protected?131_672)"
" protected?_632)"
"((temp132_673)"
"(required-as-transformer?"
" i_642)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-provide!103.1))"
"(add-provide!101.1"
" protected?131_672"
" temp132_673"
" rp124_665"
" temp125_666"
" phase126_667"
" b127_668"
" immed-b128_669"
" id129_670"
" orig-s130_671)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:256:6_664"
" keyword-procedure-extract"
" '(#:as-protected?"
" #:as-transformer?)"
" 9)"
" '(#:as-protected?"
" #:as-transformer?)"
"(list"
" protected?131_672"
" temp132_673)"
" rp124_665"
" temp125_666"
" phase126_667"
" b127_668"
" immed-b128_669"
" id129_670"
" orig-s130_671))))))))))"
"(void)))))"
"(values fold-var_645)))))"
"(for-loop_639 fold-var_643(unsafe-cdr lst_641))))"
" fold-var_640))))"
" for-loop_639)"
"(void)"
" lst_638)))"
"(if(=(hash-count found_636)(length except-ids_627))"
"(void)"
"(let-values()"
"(let-values(((lst_674) except-ids_627))"
"(begin"
"(if(list? lst_674)(void)(let-values()(in-list lst_674)))"
"((letrec-values(((for-loop_675)"
"(lambda(fold-var_676 lst_677)"
"(if(pair? lst_677)"
"(let-values(((except-id_678)(unsafe-car lst_677)))"
"(let-values(((fold-var_679)"
"(let-values(((fold-var_680) fold-var_676))"
"(let-values(((fold-var_681)"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_682)"
"(hash-ref"
" found_636"
" except-id_678"
" #f)))"
"(if or-part_682"
" or-part_682"
"(let-values(((lst_683)"
" requireds_633))"
"(begin"
"(if(list? lst_683)"
"(void)"
"(let-values()"
"(in-list lst_683)))"
"((letrec-values(((for-loop_684)"
"(lambda(result_685"
" lst_686)"
"(if(pair?"
" lst_686)"
"(let-values(((i_687)"
"(unsafe-car"
" lst_686)))"
"(let-values(((result_688)"
"(let-values(((result_689)"
" result_685))"
"(let-values(((result_690)"
"(let-values()"
"(let-values()"
"(let-values(((id_691)"
"(required-id"
" i_687)))"
"(let-values(((phase_692)"
"(required-phase"
" i_687)))"
"(free-identifier=?$1"
" id_691"
" except-id_678"
" phase_692"
" phase_692)))))))"
"(values"
" result_690)))))"
"(if(not"
"((lambda x_693"
" result_688)"
" i_687))"
"(for-loop_684"
" result_688"
"(unsafe-cdr"
" lst_686))"
" result_688)))"
" result_685))))"
" for-loop_684)"
" #f"
" lst_683)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_625"
"                                                                                            \"excluded identifier was not defined or required in the module~a\""
"                                                                                            \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_634))"
" orig-s_626"
" except-id_678))))"
"(void)))))"
"(values fold-var_681)))))"
"(for-loop_675 fold-var_679(unsafe-cdr lst_677))))"
" fold-var_676))))"
" for-loop_675)"
"(void)"
" lst_674)))))))))))))"
"(void)"
"(void)"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(let-values(((lst_3) bodys_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(fold-var_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((body_7)(unsafe-car lst_6)))"
"(let-values(((fold-var_8)"
"(let-values(((fold-var_9) fold-var_5))"
"(let-values(((fold-var_10)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_11)(core-form-sym body_7 0)))"
"(if(equal? tmp_11 'begin)"
"(let-values()"
"(let-values(((ok?_12 begin1_13 e2_14)"
"(let-values(((s_25) body_7))"
"(let-values(((orig-s_26)"
" s_25))"
"(let-values(((begin1_27"
" e2_28)"
"(let-values(((s_29)"
"(if(syntax?$1"
" s_25)"
"(syntax-e$1"
" s_25)"
" s_25)))"
"(if(pair?"
" s_29)"
"(let-values(((begin3_30)"
"(let-values(((s_32)"
"(car"
" s_29)))"
" s_32))"
"((e4_31)"
"(let-values(((s_33)"
"(cdr"
" s_29)))"
"(let-values(((s_34)"
"(if(syntax?$1"
" s_33)"
"(syntax-e$1"
" s_33)"
" s_33)))"
"(let-values(((flat-s_35)"
"(to-syntax-list.1"
" s_34)))"
"(if(not"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_26))"
"(let-values()"
" flat-s_35)))))))"
"(values"
" begin3_30"
" e4_31))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_26)))))"
"(values"
" #t"
" begin1_27"
" e2_28))))))"
"(check-body e2_14)))"
"(if(if(equal? tmp_11 '#%declare)"
" #t"
"(if(equal? tmp_11 '#%provide)"
" #t"
"(if(equal? tmp_11 '#%require)"
" #t"
"(if(equal? tmp_11 'module)"
" #t"
"(equal? tmp_11 'module*)))))"
"(let-values()(void))"
"(if(equal? tmp_11 'define-values)"
"(let-values()"
"(let-values(((ok?_36"
" define-values5_37"
" id6_38"
" rhs7_39)"
"(let-values(((s_52)"
" body_7))"
"(let-values(((orig-s_53)"
" s_52))"
"(let-values(((define-values5_54"
" id6_55"
" rhs7_56)"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_52)"
"(syntax-e$1"
" s_52)"
" s_52)))"
"(if(pair?"
" s_57)"
"(let-values(((define-values8_58)"
"(let-values(((s_61)"
"(car"
" s_57)))"
" s_61))"
"((id9_59"
" rhs10_60)"
"(let-values(((s_62)"
"(cdr"
" s_57)))"
"(let-values(((s_63)"
"(if(syntax?$1"
" s_62)"
"(syntax-e$1"
" s_62)"
" s_62)))"
"(if(pair?"
" s_63)"
"(let-values(((id11_64)"
"(let-values(((s_66)"
"(car"
" s_63)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(let-values(((flat-s_68)"
"(to-syntax-list.1"
" s_67)))"
"(if(not"
" flat-s_68)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_53))"
"(let-values()"
"(let-values(((id_69)"
"(let-values(((lst_70)"
" flat-s_68))"
"(begin"
"(if(list?"
" lst_70)"
"(void)"
"(let-values()"
"(in-list"
" lst_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(id_72"
" lst_73)"
"(if(pair?"
" lst_73)"
"(let-values(((s_74)"
"(unsafe-car"
" lst_73)))"
"(let-values(((id_75)"
"(let-values(((id_76)"
" id_72))"
"(let-values(((id_77)"
"(let-values()"
"(let-values(((id14_78)"
"(let-values()"
"(if(let-values(((or-part_79)"
"(if(syntax?$1"
" s_74)"
"(symbol?"
"(syntax-e$1"
" s_74))"
" #f)))"
"(if or-part_79"
" or-part_79"
"(symbol?"
" s_74)))"
" s_74"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_53"
" s_74)))))"
"(cons"
" id14_78"
" id_76)))))"
"(values"
" id_77)))))"
"(for-loop_71"
" id_75"
"(unsafe-cdr"
" lst_73))))"
" id_72))))"
" for-loop_71)"
" null"
" lst_70)))))"
"(alt-reverse"
" id_69))))))))"
"((rhs12_65)"
"(let-values(((s_80)"
"(cdr"
" s_63)))"
"(let-values(((s_81)"
"(if(syntax?$1"
" s_80)"
"(syntax-e$1"
" s_80)"
" s_80)))"
"(if(pair?"
" s_81)"
"(let-values(((rhs13_82)"
"(let-values(((s_83)"
"(car"
" s_81)))"
" s_83))"
"(()"
"(let-values(((s_84)"
"(cdr"
" s_81)))"
"(let-values(((s_85)"
"(if(syntax?$1"
" s_84)"
"(syntax-e$1"
" s_84)"
" s_84)))"
"(if(null?"
" s_85)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_53))))))"
"(values"
" rhs13_82))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_53))))))"
"(values"
" id11_64"
" rhs12_65))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_53))))))"
"(values"
" define-values8_58"
" id9_59"
" rhs10_60))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_53)))))"
"(values"
" #t"
" define-values5_54"
" id6_55"
" rhs7_56))))))"
"(check-expr"
" rhs7_39"
"(length id6_38)"
" body_7)))"
"(let-values()(disallow body_7)))))))"
"(void)))))"
"(values fold-var_10)))))"
"(for-loop_4 fold-var_8(unsafe-cdr lst_6))))"
" fold-var_5))))"
" for-loop_4)"
"(void)"
" lst_3)))))"
"(define-values"
"(check-expr)"
"(lambda(e_86 num-results_87 enclosing_88)"
"(let-values(((tmp_89)(core-form-sym e_86 0)))"
"(if(if(equal? tmp_89 'lambda) #t(equal? tmp_89 'case-lambda))"
"(let-values()(check-count 1 num-results_87 enclosing_88))"
"(if(equal? tmp_89 'quote)"
"(let-values()"
"(let-values(((ok?_90 quote15_91 datum16_92)"
"(let-values(((s_103) e_86))"
"(let-values(((orig-s_104) s_103))"
"(let-values(((quote15_105 datum16_106)"
"(let-values(((s_107)(if(syntax?$1 s_103)(syntax-e$1 s_103) s_103)))"
"(if(pair? s_107)"
"(let-values(((quote17_108)(let-values(((s_110)(car s_107))) s_110))"
"((datum18_109)"
"(let-values(((s_111)(cdr s_107)))"
"(let-values(((s_112)"
"(if(syntax?$1 s_111)"
"(syntax-e$1 s_111)"
" s_111)))"
"(if(pair? s_112)"
"(let-values(((datum19_113)"
"(let-values(((s_114)(car s_112)))"
" s_114))"
"(()"
"(let-values(((s_115)(cdr s_112)))"
"(let-values(((s_116)"
"(if(syntax?$1 s_115)"
"(syntax-e$1 s_115)"
" s_115)))"
"(if(null? s_116)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_104))))))"
"(values datum19_113))"
"(raise-syntax-error$1"
" #f"
"                                                                     \"bad syntax\""
" orig-s_104))))))"
"(values quote17_108 datum18_109))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_104)))))"
"(values #t quote15_105 datum16_106))))))"
"(begin(check-datum datum16_92)(check-count 1 num-results_87 enclosing_88))))"
"(if(equal? tmp_89 '#%app)"
"(let-values()"
"(let-values(((ok?_117 #%app20_118 rator21_119 rand22_120)"
"(let-values(((s_134) e_86))"
"(let-values(((orig-s_135) s_134))"
"(let-values(((#%app20_136 rator21_137 rand22_138)"
"(let-values(((s_139)(if(syntax?$1 s_134)(syntax-e$1 s_134) s_134)))"
"(if(pair? s_139)"
"(let-values(((#%app23_140)"
"(let-values(((s_143)(car s_139))) s_143))"
"((rator24_141 rand25_142)"
"(let-values(((s_144)(cdr s_139)))"
"(let-values(((s_145)"
"(if(syntax?$1 s_144)"
"(syntax-e$1 s_144)"
" s_144)))"
"(if(pair? s_145)"
"(let-values(((rator26_146)"
"(let-values(((s_148)(car s_145)))"
" s_148))"
"((rand27_147)"
"(let-values(((s_149)(cdr s_145)))"
"(let-values(((s_150)"
"(if(syntax?$1"
" s_149)"
"(syntax-e$1 s_149)"
" s_149)))"
"(let-values(((flat-s_151)"
"(to-syntax-list.1"
" s_150)))"
"(if(not flat-s_151)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_135))"
"(let-values()"
" flat-s_151)))))))"
"(values rator26_146 rand27_147))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_135))))))"
"(values #%app23_140 rator24_141 rand25_142))"
"                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_135)))))"
"(values #t #%app20_136 rator21_137 rand22_138))))))"
"(let-values(((rands_133) rand22_120))"
"(begin"
"(let-values(((lst_152) rands_133))"
"(begin"
"(if(list? lst_152)(void)(let-values()(in-list lst_152)))"
"((letrec-values(((for-loop_153)"
"(lambda(fold-var_154 lst_155)"
"(if(pair? lst_155)"
"(let-values(((rand_156)(unsafe-car lst_155)))"
"(let-values(((fold-var_157)"
"(let-values(((fold-var_158) fold-var_154))"
"(let-values(((fold-var_159)"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_156 1 e_86))"
"(void)))))"
"(values fold-var_159)))))"
"(for-loop_153 fold-var_157(unsafe-cdr lst_155))))"
" fold-var_154))))"
" for-loop_153)"
"(void)"
" lst_152)))"
"(let-values(((tmp_160)(cross-phase-primitive-name rator21_119)))"
"(if(if(equal? tmp_160 'cons) #t(equal? tmp_160 'list))"
"(let-values()(check-count 1 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'make-struct-type)"
"(let-values()(check-count 5 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'gensym)"
"(let-values()"
"(if(let-values(((or-part_161)(= 0(length rands_133))))"
"(if or-part_161"
" or-part_161"
"(if(= 1(length rands_133))(quoted-string?(car rands_133)) #f)))"
"(void)"
"(let-values()(disallow e_86))))"
"(if(equal? tmp_160 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_133))(quoted-string?(car rands_133)) #f)"
"(void)"
"(let-values()(disallow e_86))))"
"(let-values()(disallow e_86))))))))))))"
"(let-values()(void))))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_162 expected-num_163 enclosing_164)"
"(if(= is-num_162 expected-num_163)(void)(let-values()(disallow enclosing_164)))))"
"(define-values"
"(check-datum)"
"(lambda(datum_165)"
"(let-values(((d_166)(syntax-e$1 datum_165)))"
"(if(let-values(((or-part_167)(number? d_166)))"
"(if or-part_167"
" or-part_167"
"(let-values(((or-part_168)(boolean? d_166)))"
"(if or-part_168"
" or-part_168"
"(let-values(((or-part_169)(symbol? d_166)))"
"(if or-part_169"
" or-part_169"
"(let-values(((or-part_170)(string? d_166)))(if or-part_170 or-part_170(bytes? d_166)))))))))"
"(let-values()(void))"
"(let-values()(disallow datum_165))))))"
"(define-values"
"(quoted-string?)"
"(lambda(e_171)"
"(if(eq? 'quote(core-form-sym e_171 0))"
"(let-values()"
"(let-values(((ok?_172 quote28_173 datum29_174)"
"(let-values(((s_185) e_171))"
"(let-values(((orig-s_186) s_185))"
"(let-values(((quote28_187 datum29_188)"
"(let-values(((s_189)(if(syntax?$1 s_185)(syntax-e$1 s_185) s_185)))"
"(if(pair? s_189)"
"(let-values(((quote30_190)(let-values(((s_192)(car s_189))) s_192))"
"((datum31_191)"
"(let-values(((s_193)(cdr s_189)))"
"(let-values(((s_194)"
"(if(syntax?$1 s_193)"
"(syntax-e$1 s_193)"
" s_193)))"
"(if(pair? s_194)"
"(let-values(((datum32_195)"
"(let-values(((s_196)(car s_194)))"
" s_196))"
"(()"
"(let-values(((s_197)(cdr s_194)))"
"(let-values(((s_198)"
"(if(syntax?$1 s_197)"
"(syntax-e$1 s_197)"
" s_197)))"
"(if(null? s_198)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_186))))))"
"(values datum32_195))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_186))))))"
"(values quote30_190 datum31_191))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_186)))))"
"(values #t quote28_187 datum29_188))))))"
"(string?(syntax-e$1 datum29_174))))"
" #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_199)"
"(let-values(((b_200)"
"(let-values(((id33_201) id_199)((temp34_202) 0))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f id33_201 temp34_202)"
"(resolve+shift22.1 id33_201 temp34_202)))))"
"(if(module-binding? b_200)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_200)))"
"(module-binding-sym b_200)"
" #f)"
" #f))))"
" (define-values (disallow) (lambda (body_203) (error \"not allowed in a cross-phase persistent module:\" body_203)))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_11 ctx_12)"
"(begin"
"(if(eq?(expand-context-context ctx_12) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_13)(expand-context-observer ctx_12)))"
"(if obs_13(let-values()(let-values()(call-expand-observe obs_13 'prim-module)))(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_11))))"
"(let-values()"
"(let-values(((s203_14) s_11)((ctx204_15) ctx_12)((temp205_16) #f))"
"(if(variable-reference-constant?(#%variable-reference expand-module16.1))"
"(expand-module14.1 #f #f #f #f #f #f #f #f #f #f s203_14 ctx204_15 temp205_16)"
"(expand-module16.1 s203_14 ctx204_15 temp205_16))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_17 ctx_18)"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_18)))"
"(if obs_19(let-values()(let-values()(call-expand-observe obs_19 'prim-module)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_17)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_20 ctx_21)"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_21)))"
"(if obs_22(let-values()(let-values()(call-expand-observe obs_22 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_21) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_20)))"
"(if(expand-context-module-begin-k ctx_21)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_20)))"
"((expand-context-module-begin-k ctx_21)"
" s_20"
"(let-values(((the-struct_23) ctx_21))"
"(if(expand-context? the-struct_23)"
"(let-values(((module-begin-k206_24) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_23)"
"(root-expand-context-post-expansion-scope the-struct_23)"
"(root-expand-context-top-level-bind-scope the-struct_23)"
"(root-expand-context-all-scopes-stx the-struct_23)"
"(root-expand-context-use-site-scopes the-struct_23)"
"(root-expand-context-defined-syms the-struct_23)"
"(root-expand-context-frame-id the-struct_23)"
"(root-expand-context-counter the-struct_23)"
"(root-expand-context-lift-key the-struct_23)"
"(expand-context-context the-struct_23)"
"(expand-context-phase the-struct_23)"
"(expand-context-namespace the-struct_23)"
"(expand-context-env the-struct_23)"
"(expand-context-user-env the-struct_23)"
"(expand-context-post-expansion-scope-action the-struct_23)"
"(expand-context-scopes the-struct_23)"
"(expand-context-def-ctx-scopes the-struct_23)"
"(expand-context-binding-layer the-struct_23)"
"(expand-context-reference-records the-struct_23)"
"(expand-context-only-immediate? the-struct_23)"
"(expand-context-just-once? the-struct_23)"
" module-begin-k206_24"
"(expand-context-need-eventually-defined the-struct_23)"
"(expand-context-allow-unbound? the-struct_23)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_23)"
"(expand-context-stops the-struct_23)"
"(expand-context-current-introduction-scopes the-struct_23)"
"(expand-context-declared-submodule-names the-struct_23)"
"(expand-context-lifts the-struct_23)"
"(expand-context-lift-envs the-struct_23)"
"(expand-context-module-lifts the-struct_23)"
"(expand-context-require-lifts the-struct_23)"
"(expand-context-to-module-lifts the-struct_23)"
"(expand-context-requires+provides the-struct_23)"
"(expand-context-name the-struct_23)"
"(expand-context-observer the-struct_23)))"
"              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_23))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_25 ctx_26)"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_26)))"
"(if obs_27(let-values()(let-values()(call-expand-observe obs_27 'prim-declare)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_25)))))"
" print-values)"
"(define-values"
"(expand-module14.1)"
"(lambda(enclosing-all-scopes-stx2_28"
" enclosing-all-scopes-stx7_29"
" enclosing-is-cross-phase-persistent?3_30"
" enclosing-is-cross-phase-persistent?8_31"
" enclosing-requires+provides4_32"
" enclosing-requires+provides9_33"
" keep-enclosing-scope-at-phase1_34"
" keep-enclosing-scope-at-phase6_35"
" mpis-for-enclosing-reset5_36"
" mpis-for-enclosing-reset10_37"
" s11_38"
" init-ctx12_39"
" enclosing-self13_40)"
"(let-values(((s_41) s11_38))"
"(let-values(((init-ctx_42) init-ctx12_39))"
"(let-values(((enclosing-self_43) enclosing-self13_40))"
"(let-values(((keep-enclosing-scope-at-phase_44)"
"(if keep-enclosing-scope-at-phase6_35 keep-enclosing-scope-at-phase1_34 #f)))"
"(let-values(((enclosing-all-scopes-stx_45)"
"(if enclosing-all-scopes-stx7_29 enclosing-all-scopes-stx2_28 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_46)"
"(if enclosing-is-cross-phase-persistent?8_31 enclosing-is-cross-phase-persistent?3_30 #f)))"
"(let-values(((enclosing-r+p_47)"
"(if enclosing-requires+provides9_33 enclosing-requires+provides4_32 #f)))"
"(let-values(((mpis-for-enclosing-reset_48)"
"(if mpis-for-enclosing-reset10_37 mpis-for-enclosing-reset5_36 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_96)(expand-context-observer init-ctx_42)))"
"(if obs_96"
"(let-values()(let-values()(call-expand-observe obs_96 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_49)(syntax-disarm$1 s_41)))"
"(let-values(((ok?_50 module207_51 id:module-name208_52 initial-require209_53 body210_54)"
"(let-values(((s_97) disarmed-s_49))"
"(let-values(((orig-s_98) s_97))"
"(let-values(((module207_99"
" id:module-name208_100"
" initial-require209_101"
" body210_102)"
"(let-values(((s_103)"
"(if(syntax?$1 s_97)(syntax-e$1 s_97) s_97)))"
"(if(pair? s_103)"
"(let-values(((module211_104)"
"(let-values(((s_108)(car s_103))) s_108))"
"((id:module-name212_105"
" initial-require213_106"
" body214_107)"
"(let-values(((s_109)(cdr s_103)))"
"(let-values(((s_110)"
"(if(syntax?$1 s_109)"
"(syntax-e$1 s_109)"
" s_109)))"
"(if(pair? s_110)"
"(let-values(((id:module-name215_111)"
"(let-values(((s_114)"
"(car"
" s_110)))"
"(if(let-values(((or-part_115)"
"(if(syntax?$1"
" s_114)"
"(symbol?"
"(syntax-e$1"
" s_114))"
" #f)))"
"(if or-part_115"
" or-part_115"
"(symbol?"
" s_114)))"
" s_114"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"not an identifier\""
" orig-s_98"
" s_114))))"
"((initial-require216_112"
" body217_113)"
"(let-values(((s_116)"
"(cdr"
" s_110)))"
"(let-values(((s_117)"
"(if(syntax?$1"
" s_116)"
"(syntax-e$1"
" s_116)"
" s_116)))"
"(if(pair? s_117)"
"(let-values(((initial-require218_118)"
"(let-values(((s_120)"
"(car"
" s_117)))"
" s_120))"
"((body219_119)"
"(let-values(((s_121)"
"(cdr"
" s_117)))"
"(let-values(((s_122)"
"(if(syntax?$1"
" s_121)"
"(syntax-e$1"
" s_121)"
" s_121)))"
"(let-values(((flat-s_123)"
"(to-syntax-list.1"
" s_122)))"
"(if(not"
" flat-s_123)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_98))"
"(let-values()"
" flat-s_123)))))))"
"(values"
" initial-require218_118"
" body219_119))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_98))))))"
"(values"
" id:module-name215_111"
" initial-require216_112"
" body217_113))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_98))))))"
"(values"
" module211_104"
" id:module-name212_105"
" initial-require213_106"
" body214_107))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_98)))))"
"(values"
" #t"
" module207_99"
" id:module-name208_100"
" initial-require209_101"
" body210_102))))))"
"(let-values(((initial-require_69)(syntax->datum$1 initial-require209_53)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_124) keep-enclosing-scope-at-phase_44))"
"(if or-part_124 or-part_124(1/module-path? initial-require_69)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                   \"not a module path\""
" s_41"
" initial-require209_53)))"
"(values))))"
"(let-values(((phase_70) 0))"
"(let-values(((module-name-sym_71)(syntax-e$1 id:module-name208_52)))"
"(let-values(((outside-scope_72)(new-scope 'module)))"
"(let-values(((inside-scope_73)(new-multi-scope module-name-sym_71)))"
"(let-values(((self_74)"
"(make-self-module-path-index"
"(if enclosing-self_43"
" module-name-sym_71"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_71)))"
" enclosing-self_43)))"
"(let-values(((enclosing-mod_75)"
"(if enclosing-self_43"
"                                                          (1/module-path-index-join '(submod \"..\") self_74)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_75 mpis-for-enclosing-reset_48 #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_48"
"(cons"
" enclosing-mod_75"
"(unbox mpis-for-enclosing-reset_48))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_76)"
"(make-apply-module-scopes"
" outside-scope_72"
" inside-scope_73"
" init-ctx_42"
" keep-enclosing-scope-at-phase_44"
" self_74"
" enclosing-self_43"
" enclosing-mod_75)))"
"(let-values(((all-scopes-s_77)"
"(apply-module-scopes_76"
"(if enclosing-all-scopes-stx_45"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_45"
" keep-enclosing-scope-at-phase_44)"
" initial-require209_53))))"
"(let-values(((initial-require-s_78)"
"(apply-module-scopes_76 initial-require209_53)))"
"(let-values(((root-ctx_79)"
"(let-values(((...er/expand/module.rkt:124:20_125)"
" make-root-expand-context12.1)"
"((temp220_126)"
"(if keep-enclosing-scope-at-phase_44"
"(root-expand-context-module-scopes"
" init-ctx_42)"
" null))"
"((outside-scope221_127) outside-scope_72)"
"((inside-scope222_128) inside-scope_73)"
"((all-scopes-s223_129) all-scopes-s_77))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-root-expand-context12.1))"
"(make-root-expand-context10.1"
" all-scopes-s223_129"
" #t"
" temp220_126"
" #t"
" outside-scope221_127"
" #t"
" inside-scope222_128"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:124:20_125"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
" 2)"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
"(list"
" all-scopes-s223_129"
" temp220_126"
" outside-scope221_127"
" inside-scope222_128))))))"
"(let-values(((new-module-scopes_80)"
"(root-expand-context-module-scopes root-ctx_79)))"
"(let-values(((frame-id_81)"
"(root-expand-context-frame-id root-ctx_79)))"
"(let-values(((m-ns_82)"
"(let-values(((...er/expand/module.rkt:139:16_130)"
" make-module-namespace50.1)"
"((temp224_131)"
"(expand-context-namespace"
" init-ctx_42))"
"((self225_132) self_74)"
"((root-ctx226_133) root-ctx_79)"
"((temp227_134)"
"(if enclosing-self_43 #t #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-namespace50.1))"
"(make-module-namespace48.1"
" temp227_134"
" self225_132"
" root-ctx226_133"
" temp224_131)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:139:16_130"
" keyword-procedure-extract"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
" 3)"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
"(list"
" temp227_134"
" self225_132"
" root-ctx226_133)"
" temp224_131)))))"
"(let-values(((ctx_83)"
"(let-values(((the-struct_135)"
"(copy-root-expand-context"
" init-ctx_42"
" root-ctx_79)))"
"(if(expand-context? the-struct_135)"
"(let-values(((allow-unbound?228_136) #f)"
"((namespace229_137) m-ns_82)"
"((post-expansion-scope-action230_138)"
" add-scope)"
"((phase231_139) phase_70)"
"((just-once?232_140) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_135)"
"(root-expand-context-post-expansion-scope"
" the-struct_135)"
"(root-expand-context-top-level-bind-scope"
" the-struct_135)"
"(root-expand-context-all-scopes-stx"
" the-struct_135)"
"(root-expand-context-use-site-scopes"
" the-struct_135)"
"(root-expand-context-defined-syms"
" the-struct_135)"
"(root-expand-context-frame-id"
" the-struct_135)"
"(root-expand-context-counter"
" the-struct_135)"
"(root-expand-context-lift-key"
" the-struct_135)"
"(expand-context-context the-struct_135)"
" phase231_139"
" namespace229_137"
"(expand-context-env the-struct_135)"
"(expand-context-user-env"
" the-struct_135)"
" post-expansion-scope-action230_138"
"(expand-context-scopes the-struct_135)"
"(expand-context-def-ctx-scopes"
" the-struct_135)"
"(expand-context-binding-layer"
" the-struct_135)"
"(expand-context-reference-records"
" the-struct_135)"
"(expand-context-only-immediate?"
" the-struct_135)"
" just-once?232_140"
"(expand-context-module-begin-k"
" the-struct_135)"
"(expand-context-need-eventually-defined"
" the-struct_135)"
" allow-unbound?228_136"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_135)"
"(expand-context-stops the-struct_135)"
"(expand-context-current-introduction-scopes"
" the-struct_135)"
"(expand-context-declared-submodule-names"
" the-struct_135)"
"(expand-context-lifts the-struct_135)"
"(expand-context-lift-envs"
" the-struct_135)"
"(expand-context-module-lifts"
" the-struct_135)"
"(expand-context-require-lifts"
" the-struct_135)"
"(expand-context-to-module-lifts"
" the-struct_135)"
"(expand-context-requires+provides"
" the-struct_135)"
"(expand-context-name the-struct_135)"
"(expand-context-observer"
" the-struct_135)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                               \"expand-context?\""
" the-struct_135)))))"
"(let-values(((bodys_84)"
"(let-values(((scoped-s_141)"
"(apply-module-scopes_76"
" disarmed-s_49)))"
"(let-values(((ok?_142"
" _233_143"
" _234_144"
" _235_145"
" body236_146)"
"(let-values(((s_161)"
" scoped-s_141))"
"(let-values(((orig-s_162)"
" s_161))"
"(let-values(((_233_163"
" _234_164"
" _235_165"
" body236_166)"
"(let-values(((s_167)"
"(if(syntax?$1"
" s_161)"
"(syntax-e$1"
" s_161)"
" s_161)))"
"(if(pair?"
" s_167)"
"(let-values(((_237_168)"
"(let-values(((s_172)"
"(car"
" s_167)))"
" s_172))"
"((_238_169"
" _239_170"
" body240_171)"
"(let-values(((s_173)"
"(cdr"
" s_167)))"
"(let-values(((s_174)"
"(if(syntax?$1"
" s_173)"
"(syntax-e$1"
" s_173)"
" s_173)))"
"(if(pair?"
" s_174)"
"(let-values(((_241_175)"
"(let-values(((s_178)"
"(car"
" s_174)))"
" s_178))"
"((_242_176"
" body243_177)"
"(let-values(((s_179)"
"(cdr"
" s_174)))"
"(let-values(((s_180)"
"(if(syntax?$1"
" s_179)"
"(syntax-e$1"
" s_179)"
" s_179)))"
"(if(pair?"
" s_180)"
"(let-values(((_244_181)"
"(let-values(((s_183)"
"(car"
" s_180)))"
" s_183))"
"((body245_182)"
"(let-values(((s_184)"
"(cdr"
" s_180)))"
"(let-values(((s_185)"
"(if(syntax?$1"
" s_184)"
"(syntax-e$1"
" s_184)"
" s_184)))"
"(let-values(((flat-s_186)"
"(to-syntax-list.1"
" s_185)))"
"(if(not"
" flat-s_186)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_162))"
"(let-values()"
" flat-s_186)))))))"
"(values"
" _244_181"
" body245_182))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_162))))))"
"(values"
" _241_175"
" _242_176"
" body243_177))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_162))))))"
"(values"
" _237_168"
" _238_169"
" _239_170"
" body240_171))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_162)))))"
"(values"
" #t"
" _233_163"
" _234_164"
" _235_165"
" body236_166))))))"
" body236_146))))"
"(let-values(((requires+provides_85)"
"(make-requires+provides self_74)))"
"(let-values(((defined-syms_86)"
"(root-expand-context-defined-syms"
" root-ctx_79)))"
"(let-values(((mpis-to-reset_87)(box null)))"
"(let-values(((initial-require!_88)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_44)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:172:7_187)"
" perform-initial-require!40.1)"
"((initial-require246_188)"
" initial-require_69)"
"((self247_189)"
" self_74)"
"((all-scopes-s248_190)"
" all-scopes-s_77)"
"((m-ns249_191)"
" m-ns_82)"
"((requires+provides250_192)"
" requires+provides_85)"
"((temp251_193)"
" 'module))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-initial-require!40.1))"
"(perform-initial-require!38.1"
" temp251_193"
" initial-require246_188"
" self247_189"
" all-scopes-s248_190"
" m-ns249_191"
" requires+provides250_192)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:172:7_187"
" keyword-procedure-extract"
" '(#:who)"
" 7)"
" '(#:who)"
"(list temp251_193)"
" initial-require246_188"
" self247_189"
" all-scopes-s248_190"
" m-ns249_191"
" requires+provides250_192))))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_85"
" enclosing-mod_75"
" keep-enclosing-scope-at-phase_44"
" enclosing-is-cross-phase-persistent?_46)"
"(let-values(((...er/expand/module.rkt:184:7_194)"
" add-enclosing-module-defined-and-required!63.1)"
"((requires+provides252_195)"
" requires+provides_85)"
"((enclosing-r+p253_196)"
" enclosing-r+p_47)"
"((enclosing-mod254_197)"
" enclosing-mod_75)"
"((keep-enclosing-scope-at-phase255_198)"
" keep-enclosing-scope-at-phase_44))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-enclosing-module-defined-and-required!63.1))"
"(add-enclosing-module-defined-and-required!61.1"
" enclosing-r+p253_196"
" requires+provides252_195"
" enclosing-mod254_197"
" keep-enclosing-scope-at-phase255_198)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:184:7_194"
" keyword-procedure-extract"
" '(#:enclosing-requires+provides)"
" 5)"
" '(#:enclosing-requires+provides)"
"(list"
" enclosing-r+p253_196)"
" requires+provides252_195"
" enclosing-mod254_197"
" keep-enclosing-scope-at-phase255_198)))"
"(let-values(((m-ns256_199)"
" m-ns_82)"
"((enclosing-mod257_200)"
" enclosing-mod_75)"
"((keep-enclosing-scope-at-phase258_201)"
" keep-enclosing-scope-at-phase_44))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!104.1))"
"(namespace-module-visit!102.1"
" #f"
" #f"
" m-ns256_199"
" enclosing-mod257_200"
" keep-enclosing-scope-at-phase258_201)"
"(namespace-module-visit!104.1"
" m-ns256_199"
" enclosing-mod257_200"
" keep-enclosing-scope-at-phase258_201)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_202)"
"(expand-context-observer"
" init-ctx_42)))"
"(if obs_202"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_202"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_88)"
"(values))))"
"(let-values(((again?_89) #f))"
"(let-values(((module-begin-k_90)"
"(lambda(mb-s_203 ctx_204)"
"(let-values((()"
"(begin"
"(if again?_89"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_85)"
"(initial-require!_88)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_89"
" #t)"
"(values))))"
"(let-values(((added-s_205)"
"(add-scope"
" mb-s_203"
" inside-scope_73)))"
"(let-values((()"
"(begin"
"(let-values(((obs_231)"
"(expand-context-observer"
" ctx_204)))"
"(if obs_231"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_231"
" 'rename-one"
" added-s_205)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_206)"
"(syntax-disarm$1"
" added-s_205)))"
"(let-values(((ok?_207"
" #%module-begin259_208"
" body260_209)"
"(let-values(((s_232)"
" disarmed-mb-s_206))"
"(let-values(((orig-s_233)"
" s_232))"
"(let-values(((#%module-begin259_234"
" body260_235)"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_232)"
"(syntax-e$1"
" s_232)"
" s_232)))"
"(if(pair?"
" s_236)"
"(let-values(((#%module-begin261_237)"
"(let-values(((s_239)"
"(car"
" s_236)))"
" s_239))"
"((body262_238)"
"(let-values(((s_240)"
"(cdr"
" s_236)))"
"(let-values(((s_241)"
"(if(syntax?$1"
" s_240)"
"(syntax-e$1"
" s_240)"
" s_240)))"
"(let-values(((flat-s_242)"
"(to-syntax-list.1"
" s_241)))"
"(if(not"
" flat-s_242)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_233))"
"(let-values()"
" flat-s_242)))))))"
"(values"
" #%module-begin261_237"
" body262_238))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_233)))))"
"(values"
" #t"
" #%module-begin259_234"
" body260_235))))))"
"(let-values(((bodys_220)"
" body260_209))"
"(let-values(((need-eventually-defined_221)"
"(make-hasheqv)))"
"(let-values(((module-ends_222)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_223)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_224)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_225)"
"((letrec-values(((pass-1-and-2-loop_243)"
"(lambda(bodys_244"
" phase_245)"
"(let-values(((def-ctx-scopes_246)"
"(box"
" null)))"
"(let-values(((partial-body-ctx_247)"
"(let-values(((the-struct_250)"
" ctx_204))"
"(if(expand-context?"
" the-struct_250)"
"(let-values(((context273_251)"
" 'module)"
"((phase274_252)"
" phase_245)"
"((namespace275_253)"
"(namespace->namespace-at-phase"
" m-ns_82"
" phase_245))"
"((only-immediate?276_254)"
" #t)"
"((def-ctx-scopes277_255)"
" def-ctx-scopes_246)"
"((need-eventually-defined278_256)"
" need-eventually-defined_221)"
"((declared-submodule-names279_257)"
" declared-submodule-names_224)"
"((lifts280_258)"
"(let-values(((temp284_262)"
"(make-wrap-as-definition"
" self_74"
" frame-id_81"
" inside-scope_73"
" all-scopes-s_77"
" defined-syms_86"
" requires+provides_85)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-lift-context8.1))"
"(make-lift-context6.1"
" #f"
" #f"
" temp284_262)"
"(make-lift-context8.1"
" temp284_262))))"
"((module-lifts281_259)"
"(make-module-lift-context"
" phase_245"
" #t))"
"((require-lifts282_260)"
"(make-require-lift-context"
" phase_245"
"(let-values(((...er/expand/module.rkt:262:63_263)"
" make-parse-lifted-require202.1)"
"((m-ns285_264)"
" m-ns_82)"
"((self286_265)"
" self_74)"
"((requires+provides287_266)"
" requires+provides_85)"
"((declared-submodule-names288_267)"
" declared-submodule-names_224))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-parse-lifted-require202.1))"
"(make-parse-lifted-require200.1"
" declared-submodule-names288_267"
" m-ns285_264"
" self286_265"
" requires+provides287_266)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:262:63_263"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 5)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names288_267)"
" m-ns285_264"
" self286_265"
" requires+provides287_266)))))"
"((to-module-lifts283_261)"
"(let-values(((...er/expand/module.rkt:264:64_268)"
" make-to-module-lift-context28.1)"
"((phase289_269)"
" phase_245)"
"((module-ends290_270)"
" module-ends_222)"
"((temp291_271)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp291_271"
" module-ends290_270"
" phase289_269)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:264:64_268"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp291_271"
" module-ends290_270)"
" phase289_269)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_250)"
"(root-expand-context-post-expansion-scope"
" the-struct_250)"
"(root-expand-context-top-level-bind-scope"
" the-struct_250)"
"(root-expand-context-all-scopes-stx"
" the-struct_250)"
"(root-expand-context-use-site-scopes"
" the-struct_250)"
"(root-expand-context-defined-syms"
" the-struct_250)"
"(root-expand-context-frame-id"
" the-struct_250)"
"(root-expand-context-counter"
" the-struct_250)"
"(root-expand-context-lift-key"
" the-struct_250)"
" context273_251"
" phase274_252"
" namespace275_253"
"(expand-context-env"
" the-struct_250)"
"(expand-context-user-env"
" the-struct_250)"
"(expand-context-post-expansion-scope-action"
" the-struct_250)"
"(expand-context-scopes"
" the-struct_250)"
" def-ctx-scopes277_255"
"(expand-context-binding-layer"
" the-struct_250)"
"(expand-context-reference-records"
" the-struct_250)"
" only-immediate?276_254"
"(expand-context-just-once?"
" the-struct_250)"
"(expand-context-module-begin-k"
" the-struct_250)"
" need-eventually-defined278_256"
"(expand-context-allow-unbound?"
" the-struct_250)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_250)"
"(expand-context-stops"
" the-struct_250)"
"(expand-context-current-introduction-scopes"
" the-struct_250)"
" declared-submodule-names279_257"
" lifts280_258"
"(expand-context-lift-envs"
" the-struct_250)"
" module-lifts281_259"
" require-lifts282_260"
" to-module-lifts283_261"
"(expand-context-requires+provides"
" the-struct_250)"
"(expand-context-name"
" the-struct_250)"
"(expand-context-observer"
" the-struct_250)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                           \"expand-context?\""
" the-struct_250)))))"
"(let-values(((partially-expanded-bodys_248)"
"(let-values(((...er/expand/module.rkt:270:11_272)"
" partially-expand-bodys77.1)"
"((bodys292_273)"
" bodys_244)"
"((s293_274)"
" s_41)"
"((temp294_275)"
"(zero?"
" phase_245))"
"((phase295_276)"
" phase_245)"
"((partial-body-ctx296_277)"
" partial-body-ctx_247)"
"((m-ns297_278)"
" m-ns_82)"
"((self298_279)"
" self_74)"
"((frame-id299_280)"
" frame-id_81)"
"((requires+provides300_281)"
" requires+provides_85)"
"((need-eventually-defined301_282)"
" need-eventually-defined_221)"
"((all-scopes-s302_283)"
" all-scopes-s_77)"
"((defined-syms303_284)"
" defined-syms_86)"
"((declared-keywords304_285)"
" declared-keywords_223)"
"((declared-submodule-names305_286)"
" declared-submodule-names_224)"
"((mpis-to-reset306_287)"
" mpis-to-reset_87)"
"((pass-1-and-2-loop307_288)"
" pass-1-and-2-loop_243))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" partially-expand-bodys77.1))"
"(partially-expand-bodys75.1"
" all-scopes-s302_283"
" partial-body-ctx296_277"
" declared-keywords304_285"
" declared-submodule-names305_286"
" defined-syms303_284"
" frame-id299_280"
" pass-1-and-2-loop307_288"
" mpis-to-reset306_287"
" m-ns297_278"
" need-eventually-defined301_282"
" s293_274"
" phase295_276"
" requires+provides300_281"
" self298_279"
" temp294_275"
" bodys292_273)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:270:11_272"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" 3)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
"(list"
" all-scopes-s302_283"
" partial-body-ctx296_277"
" declared-keywords304_285"
" declared-submodule-names305_286"
" defined-syms303_284"
" frame-id299_280"
" pass-1-and-2-loop307_288"
" mpis-to-reset306_287"
" m-ns297_278"
" need-eventually-defined301_282"
" s293_274"
" phase295_276"
" requires+provides300_281"
" self298_279"
" temp294_275)"
" bodys292_273)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_289)"
"(expand-context-observer"
" partial-body-ctx_247)))"
"(if obs_289"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_289"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_249)"
"(let-values(((the-struct_290)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_247"
" def-ctx-scopes_246)))"
"(if(expand-context?"
" the-struct_290)"
"(let-values(((only-immediate?308_291)"
" #f)"
"((def-ctx-scopes309_292)"
" #f)"
"((post-expansion-scope310_293)"
" #f)"
"((to-module-lifts311_294)"
"(let-values(((...er/expand/module.rkt:296:56_295)"
" make-to-module-lift-context28.1)"
"((phase312_296)"
" phase_245)"
"((module-ends313_297)"
" module-ends_222)"
"((temp314_298)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp314_298"
" module-ends313_297"
" phase312_296)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:296:56_295"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp314_298"
" module-ends313_297)"
" phase312_296)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_290)"
" post-expansion-scope310_293"
"(root-expand-context-top-level-bind-scope"
" the-struct_290)"
"(root-expand-context-all-scopes-stx"
" the-struct_290)"
"(root-expand-context-use-site-scopes"
" the-struct_290)"
"(root-expand-context-defined-syms"
" the-struct_290)"
"(root-expand-context-frame-id"
" the-struct_290)"
"(root-expand-context-counter"
" the-struct_290)"
"(root-expand-context-lift-key"
" the-struct_290)"
"(expand-context-context"
" the-struct_290)"
"(expand-context-phase"
" the-struct_290)"
"(expand-context-namespace"
" the-struct_290)"
"(expand-context-env"
" the-struct_290)"
"(expand-context-user-env"
" the-struct_290)"
"(expand-context-post-expansion-scope-action"
" the-struct_290)"
"(expand-context-scopes"
" the-struct_290)"
" def-ctx-scopes309_292"
"(expand-context-binding-layer"
" the-struct_290)"
"(expand-context-reference-records"
" the-struct_290)"
" only-immediate?308_291"
"(expand-context-just-once?"
" the-struct_290)"
"(expand-context-module-begin-k"
" the-struct_290)"
"(expand-context-need-eventually-defined"
" the-struct_290)"
"(expand-context-allow-unbound?"
" the-struct_290)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_290)"
"(expand-context-stops"
" the-struct_290)"
"(expand-context-current-introduction-scopes"
" the-struct_290)"
"(expand-context-declared-submodule-names"
" the-struct_290)"
"(expand-context-lifts"
" the-struct_290)"
"(expand-context-lift-envs"
" the-struct_290)"
"(expand-context-module-lifts"
" the-struct_290)"
"(expand-context-require-lifts"
" the-struct_290)"
" to-module-lifts311_294"
"(expand-context-requires+provides"
" the-struct_290)"
"(expand-context-name"
" the-struct_290)"
"(expand-context-observer"
" the-struct_290)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                 \"expand-context?\""
" the-struct_290)))))"
"(let-values(((...er/expand/module.rkt:300:9_299)"
" finish-expanding-body-expressons93.1)"
"((partially-expanded-bodys266_300)"
" partially-expanded-bodys_248)"
"((temp267_301)"
"(zero?"
" phase_245))"
"((phase268_302)"
" phase_245)"
"((body-ctx269_303)"
" body-ctx_249)"
"((self270_304)"
" self_74)"
"((declared-submodule-names271_305)"
" declared-submodule-names_224)"
"((mpis-to-reset272_306)"
" mpis-to-reset_87))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body-expressons93.1))"
"(finish-expanding-body-expressons91.1"
" body-ctx269_303"
" declared-submodule-names271_305"
" mpis-to-reset272_306"
" phase268_302"
" self270_304"
" temp267_301"
" partially-expanded-bodys266_300)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:300:9_299"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
"(list"
" body-ctx269_303"
" declared-submodule-names271_305"
" mpis-to-reset272_306"
" phase268_302"
" self270_304"
" temp267_301)"
" partially-expanded-bodys266_300)))))))))))"
" pass-1-and-2-loop_243)"
" bodys_220"
" phase_70)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_221"
" self_74)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_307)"
"(expand-context-observer"
" ctx_204)))"
"(if obs_307"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_307"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_226)"
"(let-values(((...er/expand/module.rkt:317:7_308)"
" resolve-provides111.1)"
"((expression-expanded-bodys315_309)"
" expression-expanded-bodys_225)"
"((s316_310)"
" s_41)"
"((requires+provides317_311)"
" requires+provides_85)"
"((declared-submodule-names318_312)"
" declared-submodule-names_224)"
"((m-ns319_313)"
" m-ns_82)"
"((phase320_314)"
" phase_70)"
"((self321_315)"
" self_74)"
"((ctx322_316)"
" ctx_204))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve-provides111.1))"
"(resolve-provides109.1"
" ctx322_316"
" declared-submodule-names318_312"
" m-ns319_313"
" s316_310"
" phase320_314"
" requires+provides317_311"
" self321_315"
" expression-expanded-bodys315_309)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:317:7_308"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx322_316"
" declared-submodule-names318_312"
" m-ns319_313"
" s316_310"
" phase320_314"
" requires+provides317_311"
" self321_315)"
" expression-expanded-bodys315_309)))))"
"(let-values(((is-cross-phase-persistent?_227)"
"(hash-ref"
" declared-keywords_223"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_227"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_85)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"cannot be cross-phase persistent due to required modules\""
" s_41"
"(hash-ref"
" declared-keywords_223"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_226)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_317)"
"(expand-context-observer"
" ctx_204)))"
"(if obs_317"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_317"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-ctx_228)"
"(let-values(((the-struct_318)"
" ctx_204))"
"(if(expand-context?"
" the-struct_318)"
"(let-values(((frame-id323_319)"
" #f)"
"((post-expansion-scope324_320)"
" #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_318)"
" post-expansion-scope324_320"
"(root-expand-context-top-level-bind-scope"
" the-struct_318)"
"(root-expand-context-all-scopes-stx"
" the-struct_318)"
"(root-expand-context-use-site-scopes"
" the-struct_318)"
"(root-expand-context-defined-syms"
" the-struct_318)"
" frame-id323_319"
"(root-expand-context-counter"
" the-struct_318)"
"(root-expand-context-lift-key"
" the-struct_318)"
"(expand-context-context"
" the-struct_318)"
"(expand-context-phase"
" the-struct_318)"
"(expand-context-namespace"
" the-struct_318)"
"(expand-context-env"
" the-struct_318)"
"(expand-context-user-env"
" the-struct_318)"
"(expand-context-post-expansion-scope-action"
" the-struct_318)"
"(expand-context-scopes"
" the-struct_318)"
"(expand-context-def-ctx-scopes"
" the-struct_318)"
"(expand-context-binding-layer"
" the-struct_318)"
"(expand-context-reference-records"
" the-struct_318)"
"(expand-context-only-immediate?"
" the-struct_318)"
"(expand-context-just-once?"
" the-struct_318)"
"(expand-context-module-begin-k"
" the-struct_318)"
"(expand-context-need-eventually-defined"
" the-struct_318)"
"(expand-context-allow-unbound?"
" the-struct_318)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_318)"
"(expand-context-stops"
" the-struct_318)"
"(expand-context-current-introduction-scopes"
" the-struct_318)"
"(expand-context-declared-submodule-names"
" the-struct_318)"
"(expand-context-lifts"
" the-struct_318)"
"(expand-context-lift-envs"
" the-struct_318)"
"(expand-context-module-lifts"
" the-struct_318)"
"(expand-context-require-lifts"
" the-struct_318)"
"(expand-context-to-module-lifts"
" the-struct_318)"
"(expand-context-requires+provides"
" the-struct_318)"
"(expand-context-name"
" the-struct_318)"
"(expand-context-observer"
" the-struct_318)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                     \"expand-context?\""
" the-struct_318)))))"
"(let-values(((declare-enclosing-module_229)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:345:14_321)"
" declare-module-for-expansion131.1)"
"((fully-expanded-bodys-except-post-submodules325_322)"
" fully-expanded-bodys-except-post-submodules_226)"
"((temp326_323)"
" id:module-name208_52)"
"((temp327_324)"
" initial-require209_53)"
"((temp328_325)"
" #%module-begin259_208)"
"((requires+provides329_326)"
" requires+provides_85)"
"((m-ns330_327)"
" m-ns_82)"
"((self331_328)"
" self_74)"
"((enclosing-self332_329)"
" enclosing-self_43)"
"((root-ctx333_330)"
" root-ctx_79))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module-for-expansion131.1))"
"(declare-module-for-expansion129.1"
" enclosing-self332_329"
" temp328_325"
" temp327_324"
" temp326_323"
" m-ns330_327"
" requires+provides329_326"
" root-ctx333_330"
" self331_328"
" fully-expanded-bodys-except-post-submodules325_322)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:345:14_321"
" keyword-procedure-extract"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" 3)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
"(list"
" enclosing-self332_329"
" temp328_325"
" temp327_324"
" temp326_323"
" m-ns330_327"
" requires+provides329_326"
" root-ctx333_330"
" self331_328)"
" fully-expanded-bodys-except-post-submodules325_322)))))))"
"(let-values(((fully-expanded-bodys_230)"
"(if(stop-at-module*?"
" ctx_204)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_226)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:360:9_331)"
" expand-post-submodules155.1)"
"((fully-expanded-bodys-except-post-submodules334_332)"
" fully-expanded-bodys-except-post-submodules_226)"
"((declare-enclosing-module335_333)"
" declare-enclosing-module_229)"
"((s336_334)"
" s_41)"
"((phase337_335)"
" phase_70)"
"((self338_336)"
" self_74)"
"((requires+provides339_337)"
" requires+provides_85)"
"((is-cross-phase-persistent?340_338)"
" is-cross-phase-persistent?_227)"
"((all-scopes-s341_339)"
" all-scopes-s_77)"
"((mpis-to-reset342_340)"
" mpis-to-reset_87)"
"((declared-submodule-names343_341)"
" declared-submodule-names_224)"
"((ctx344_342)"
" ctx_204))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-post-submodules155.1))"
"(expand-post-submodules153.1"
" all-scopes-s341_339"
" ctx344_342"
" declare-enclosing-module335_333"
" declared-submodule-names343_341"
" is-cross-phase-persistent?340_338"
" mpis-to-reset342_340"
" s336_334"
" phase337_335"
" requires+provides339_337"
" self338_336"
" fully-expanded-bodys-except-post-submodules334_332)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:360:9_331"
" keyword-procedure-extract"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" all-scopes-s341_339"
" ctx344_342"
" declare-enclosing-module335_333"
" declared-submodule-names343_341"
" is-cross-phase-persistent?340_338"
" mpis-to-reset342_340"
" s336_334"
" phase337_335"
" requires+provides339_337"
" self338_336)"
" fully-expanded-bodys-except-post-submodules334_332)))))))"
"(let-values(((mb-s263_343)"
" mb-s_203)"
"((disarmed-mb-s264_344)"
" disarmed-mb-s_206)"
"((temp265_345)"
"(list*"
" #%module-begin259_208"
" fully-expanded-bodys_230)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" mb-s263_343"
" disarmed-mb-s264_344"
" temp265_345)"
"(rebuild53.1"
" mb-s263_343"
" disarmed-mb-s264_344"
" temp265_345)))))))))))))))))))))))))))"
"(let-values(((mb-ctx_91)"
"(let-values(((the-struct_346)"
" ctx_83))"
"(if(expand-context?"
" the-struct_346)"
"(let-values(((context345_347)"
" 'module-begin)"
"((module-begin-k346_348)"
" module-begin-k_90))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_346)"
"(root-expand-context-post-expansion-scope"
" the-struct_346)"
"(root-expand-context-top-level-bind-scope"
" the-struct_346)"
"(root-expand-context-all-scopes-stx"
" the-struct_346)"
"(root-expand-context-use-site-scopes"
" the-struct_346)"
"(root-expand-context-defined-syms"
" the-struct_346)"
"(root-expand-context-frame-id"
" the-struct_346)"
"(root-expand-context-counter"
" the-struct_346)"
"(root-expand-context-lift-key"
" the-struct_346)"
" context345_347"
"(expand-context-phase"
" the-struct_346)"
"(expand-context-namespace"
" the-struct_346)"
"(expand-context-env"
" the-struct_346)"
"(expand-context-user-env"
" the-struct_346)"
"(expand-context-post-expansion-scope-action"
" the-struct_346)"
"(expand-context-scopes"
" the-struct_346)"
"(expand-context-def-ctx-scopes"
" the-struct_346)"
"(expand-context-binding-layer"
" the-struct_346)"
"(expand-context-reference-records"
" the-struct_346)"
"(expand-context-only-immediate?"
" the-struct_346)"
"(expand-context-just-once?"
" the-struct_346)"
" module-begin-k346_348"
"(expand-context-need-eventually-defined"
" the-struct_346)"
"(expand-context-allow-unbound?"
" the-struct_346)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_346)"
"(expand-context-stops"
" the-struct_346)"
"(expand-context-current-introduction-scopes"
" the-struct_346)"
"(expand-context-declared-submodule-names"
" the-struct_346)"
"(expand-context-lifts"
" the-struct_346)"
"(expand-context-lift-envs"
" the-struct_346)"
"(expand-context-module-lifts"
" the-struct_346)"
"(expand-context-require-lifts"
" the-struct_346)"
"(expand-context-to-module-lifts"
" the-struct_346)"
"(expand-context-requires+provides"
" the-struct_346)"
"(expand-context-name"
" the-struct_346)"
"(expand-context-observer"
" the-struct_346)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"expand-context?\""
" the-struct_346)))))"
"(let-values(((mb-scopes-s_92)"
"(if keep-enclosing-scope-at-phase_44"
" disarmed-s_49"
" all-scopes-s_77)))"
"(let-values(((mb_93)"
"(let-values(((...er/expand/module.rkt:401:5_349)"
" ensure-module-begin32.1)"
"((bodys347_350)"
" bodys_84)"
"((module-name-sym348_351)"
" module-name-sym_71)"
"((mb-scopes-s349_352)"
" mb-scopes-s_92)"
"((m-ns350_353)"
" m-ns_82)"
"((mb-ctx351_354)"
" mb-ctx_91)"
"((phase352_355)"
" phase_70)"
"((s353_356)"
" s_41))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" ensure-module-begin32.1))"
"(ensure-module-begin30.1"
" mb-ctx351_354"
" m-ns350_353"
" module-name-sym348_351"
" phase352_355"
" s353_356"
" mb-scopes-s349_352"
" bodys347_350)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:401:5_349"
" keyword-procedure-extract"
" '(#:ctx"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s"
" #:scopes-s)"
" 3)"
" '(#:ctx"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s"
" #:scopes-s)"
"(list"
" mb-ctx351_354"
" m-ns350_353"
" module-name-sym348_351"
" phase352_355"
" s353_356"
" mb-scopes-s349_352)"
" bodys347_350)))))"
"(let-values(((expanded-mb_94)"
"(let-values()"
"(let-values(((mb354_357)"
" mb_93)"
"((mb-ctx355_358)"
" mb-ctx_91))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" mb354_357"
" mb-ctx355_358)"
"(expand7.1"
" mb354_357"
" mb-ctx355_358))))))"
"(let-values(((generic-self_95)"
"(make-generic-self-module-path-index"
" self_74)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_74)"
"(let-values(((lst_359)"
"(unbox"
" mpis-to-reset_87)))"
"(begin"
"(if(list? lst_359)"
"(void)"
"(let-values()"
"(in-list lst_359)))"
"((letrec-values(((for-loop_360)"
"(lambda(fold-var_361"
" lst_362)"
"(if(pair?"
" lst_362)"
"(let-values(((mpi_363)"
"(unsafe-car"
" lst_362)))"
"(let-values(((fold-var_364)"
"(let-values(((fold-var_365)"
" fold-var_361))"
"(let-values(((fold-var_366)"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_363))"
"(void)))))"
"(values"
" fold-var_366)))))"
"(for-loop_360"
" fold-var_364"
"(unsafe-cdr"
" lst_362))))"
" fold-var_361))))"
" for-loop_360)"
"(void)"
" lst_359)))"
"(let-values(((result-s_367)"
"(let-values(((s356_368)"
" s_41)"
"((disarmed-s357_369)"
" disarmed-s_49)"
"((temp358_370)"
"(list"
" module207_51"
" id:module-name208_52"
" initial-require-s_78"
" expanded-mb_94)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" s356_368"
" disarmed-s357_369"
" temp358_370)"
"(rebuild53.1"
" s356_368"
" disarmed-s357_369"
" temp358_370)))))"
"(let-values(((result-s_371)"
"(syntax-module-path-index-shift"
" result-s_367"
" self_74"
" generic-self_95)))"
"(let-values(((result-s_372)"
"(attach-require-provide-properties"
" requires+provides_85"
" result-s_371"
" self_74"
" generic-self_95)))"
"(let-values(((result-s_373)"
"(attach-root-expand-context-properties"
" result-s_372"
" root-ctx_79"
" self_74"
" generic-self_95)))"
"(let-values(((result-s_374)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_85)"
"(syntax-property$1"
" result-s_373"
" 'module-body-context-simple?"
" #t)"
" result-s_373)))"
"(begin"
"(let-values(((obs_375)"
"(expand-context-observer"
" ctx_83)))"
"(if obs_375"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_375"
" 'rename-one"
" result-s_374)))"
"(void)))"
" result-s_374))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack15.1)"
"(lambda(given-kws_376 given-args_377 s11_378 init-ctx12_379 enclosing-self13_380)"
"(let-values(((enclosing-all-scopes-stx7_381)"
"(if(pair? given-kws_376)(eq? '#:enclosing-all-scopes-stx(car given-kws_376)) #f)))"
"(let-values(((enclosing-all-scopes-stx2_382)(if enclosing-all-scopes-stx7_381(car given-args_377)(void)))"
"((given-kws_383)(if enclosing-all-scopes-stx7_381(cdr given-kws_376) given-kws_376))"
"((given-args_384)(if enclosing-all-scopes-stx7_381(cdr given-args_377) given-args_377)))"
"(let-values(((enclosing-is-cross-phase-persistent?8_385)"
"(if(pair? given-kws_383)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_383)) #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?3_386)"
"(if enclosing-is-cross-phase-persistent?8_385(car given-args_384)(void)))"
"((given-kws_387)"
"(if enclosing-is-cross-phase-persistent?8_385(cdr given-kws_383) given-kws_383))"
"((given-args_388)"
"(if enclosing-is-cross-phase-persistent?8_385(cdr given-args_384) given-args_384)))"
"(let-values(((enclosing-requires+provides9_389)"
"(if(pair? given-kws_387)(eq? '#:enclosing-requires+provides(car given-kws_387)) #f)))"
"(let-values(((enclosing-requires+provides4_390)"
"(if enclosing-requires+provides9_389(car given-args_388)(void)))"
"((given-kws_391)(if enclosing-requires+provides9_389(cdr given-kws_387) given-kws_387))"
"((given-args_392)(if enclosing-requires+provides9_389(cdr given-args_388) given-args_388)))"
"(let-values(((keep-enclosing-scope-at-phase6_393)"
"(if(pair? given-kws_391)(eq? '#:keep-enclosing-scope-at-phase(car given-kws_391)) #f)))"
"(let-values(((keep-enclosing-scope-at-phase1_394)"
"(if keep-enclosing-scope-at-phase6_393(car given-args_392)(void)))"
"((given-kws_395)"
"(if keep-enclosing-scope-at-phase6_393(cdr given-kws_391) given-kws_391))"
"((given-args_396)"
"(if keep-enclosing-scope-at-phase6_393(cdr given-args_392) given-args_392)))"
"(let-values(((mpis-for-enclosing-reset10_397)(pair? given-kws_395)))"
"(let-values(((mpis-for-enclosing-reset5_398)"
"(if mpis-for-enclosing-reset10_397(car given-args_396)(void))))"
"(expand-module14.1"
" enclosing-all-scopes-stx2_382"
" enclosing-all-scopes-stx7_381"
" enclosing-is-cross-phase-persistent?3_386"
" enclosing-is-cross-phase-persistent?8_385"
" enclosing-requires+provides4_390"
" enclosing-requires+provides9_389"
" keep-enclosing-scope-at-phase1_394"
" keep-enclosing-scope-at-phase6_393"
" mpis-for-enclosing-reset5_398"
" mpis-for-enclosing-reset10_397"
" s11_378"
" init-ctx12_379"
" enclosing-self13_380)))))))))))))"
"(define-values"
"(expand-module16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_399 given-argc_400)"
"(if(= given-argc_400 5)"
"(let-values(((l1_401) given-kws_399))"
"(let-values(((l1_402)"
"(if(null? l1_401)"
" l1_401"
"(if(eq?(car l1_401) '#:enclosing-all-scopes-stx)(cdr l1_401) l1_401))))"
"(let-values(((l1_403) l1_402))"
"(let-values(((l1_404)"
"(if(null? l1_403)"
" l1_403"
"(if(eq?(car l1_403) '#:enclosing-is-cross-phase-persistent?)(cdr l1_403) l1_403))))"
"(let-values(((l1_405) l1_404))"
"(let-values(((l1_406)"
"(if(null? l1_405)"
" l1_405"
"(if(eq?(car l1_405) '#:enclosing-requires+provides)(cdr l1_405) l1_405))))"
"(let-values(((l1_407) l1_406))"
"(let-values(((l1_408)"
"(if(null? l1_407)"
" l1_407"
"(if(eq?(car l1_407) '#:keep-enclosing-scope-at-phase)(cdr l1_407) l1_407))))"
"(let-values(((l1_409) l1_408))"
"(let-values(((l1_410)"
"(if(null? l1_409)"
" l1_409"
"(if(eq?(car l1_409) '#:mpis-for-enclosing-reset)(cdr l1_409) l1_409))))"
"(null? l1_410)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_411 given-args_412 s_413 init-ctx_414 enclosing-self_415)"
"(unpack15.1 given-kws_411 given-args_412 s_413 init-ctx_414 enclosing-self_415)))"
" null"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(let-values(((expand-module_416)"
"(case-lambda"
"((s_417 init-ctx_418 enclosing-self_419)"
"(unpack15.1 null null s_417 init-ctx_418 enclosing-self_419)))))"
" expand-module_416)))"
"(define-values"
"(lifted/1.1)"
"(make-required"
" 'ensure-module-begin"
"(case-lambda((self_420 bodys_421)(apply missing-kw self_420 bodys_421 null)))"
" #f"
" #f))"
"(define-values"
"(ensure-module-begin30.1)"
"(lambda(ctx20_422 m-ns19_423 module-name-sym17_424 phase21_425 s22_426 scopes-s18_427 bodys29_428)"
"(let-values(((bodys_429) bodys29_428))"
"(let-values(((module-name-sym_430) module-name-sym17_424))"
"(let-values(((scopes-s_431) scopes-s18_427))"
"(let-values(((m-ns_432) m-ns19_423))"
"(let-values(((ctx_433) ctx20_422))"
"(let-values(((phase_434) phase21_425))"
"(let-values(((s_435) s22_426))"
"(let-values()"
"(let-values(((make-mb-ctx_436)"
"(lambda()"
"(let-values(((the-struct_438) ctx_433))"
"(if(expand-context? the-struct_438)"
"(let-values(((context359_439) 'module-begin)((only-immediate?360_440) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_438)"
"(root-expand-context-post-expansion-scope the-struct_438)"
"(root-expand-context-top-level-bind-scope the-struct_438)"
"(root-expand-context-all-scopes-stx the-struct_438)"
"(root-expand-context-use-site-scopes the-struct_438)"
"(root-expand-context-defined-syms the-struct_438)"
"(root-expand-context-frame-id the-struct_438)"
"(root-expand-context-counter the-struct_438)"
"(root-expand-context-lift-key the-struct_438)"
" context359_439"
"(expand-context-phase the-struct_438)"
"(expand-context-namespace the-struct_438)"
"(expand-context-env the-struct_438)"
"(expand-context-user-env the-struct_438)"
"(expand-context-post-expansion-scope-action the-struct_438)"
"(expand-context-scopes the-struct_438)"
"(expand-context-def-ctx-scopes the-struct_438)"
"(expand-context-binding-layer the-struct_438)"
"(expand-context-reference-records the-struct_438)"
" only-immediate?360_440"
"(expand-context-just-once? the-struct_438)"
"(expand-context-module-begin-k the-struct_438)"
"(expand-context-need-eventually-defined the-struct_438)"
"(expand-context-allow-unbound? the-struct_438)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_438)"
"(expand-context-stops the-struct_438)"
"(expand-context-current-introduction-scopes the-struct_438)"
"(expand-context-declared-submodule-names the-struct_438)"
"(expand-context-lifts the-struct_438)"
"(expand-context-lift-envs the-struct_438)"
"(expand-context-module-lifts the-struct_438)"
"(expand-context-require-lifts the-struct_438)"
"(expand-context-to-module-lifts the-struct_438)"
"(expand-context-requires+provides the-struct_438)"
"(expand-context-name the-struct_438)"
"(expand-context-observer the-struct_438)))"
"                                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_438))))))"
"(let-values(((mb_437)"
"(if(= 1(length bodys_429))"
"(let-values()"
"(begin"
"(let-values(((obs_441)(expand-context-observer ctx_433)))"
"(if obs_441"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_441 'rename-one(car bodys_429))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_429)) phase_434))"
"(let-values()(car bodys_429))"
"(let-values()"
"(let-values(((partly-expanded-body_442)"
"(let-values()"
"(let-values(((temp361_443)"
"(add-enclosing-name-property"
"(car bodys_429)"
" module-name-sym_430))"
"((temp362_444)(make-mb-ctx_436)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp361_443 temp362_444)"
"(expand7.1 temp361_443 temp362_444))))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_442)"
" phase_434))"
"(let-values() partly-expanded-body_442)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:483:10_445)"
" add-module-begin43.1)"
"((temp363_446)(list partly-expanded-body_442))"
"((s364_447) s_435)"
"((scopes-s365_448) scopes-s_431)"
"((phase366_449) phase_434)"
"((module-name-sym367_450) module-name-sym_430)"
"((temp368_451)(make-mb-ctx_436))"
"((temp369_452) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference add-module-begin43.1))"
"(add-module-begin41.1"
" temp369_452"
" #t"
" temp363_446"
" s364_447"
" scopes-s365_448"
" phase366_449"
" module-name-sym367_450"
" temp368_451)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:483:10_445"
" keyword-procedure-extract"
" '(#:log-rename-one?)"
" 8)"
" '(#:log-rename-one?)"
"(list temp369_452)"
" temp363_446"
" s364_447"
" scopes-s365_448"
" phase366_449"
" module-name-sym367_450"
" temp368_451))))))))))"
"(let-values()"
"(let-values(((bodys370_453) bodys_429)"
"((s371_454) s_435)"
"((scopes-s372_455) scopes-s_431)"
"((phase373_456) phase_434)"
"((module-name-sym374_457) module-name-sym_430)"
"((temp375_458)(make-mb-ctx_436)))"
"(if(variable-reference-constant?(#%variable-reference add-module-begin43.1))"
"(add-module-begin41.1"
" #f"
" #f"
" bodys370_453"
" s371_454"
" scopes-s372_455"
" phase373_456"
" module-name-sym374_457"
" temp375_458)"
"(add-module-begin43.1"
" bodys370_453"
" s371_454"
" scopes-s372_455"
" phase373_456"
" module-name-sym374_457"
" temp375_458)))))))"
"(add-enclosing-name-property mb_437 module-name-sym_430)))))))))))))"
"(define-values"
"(unpack31.1)"
"(lambda(given-kws_459 given-args_460 bodys29_461)"
"(let-values(((ctx20_462)(car given-args_460))"
"((given-kws_463)(cdr given-kws_459))"
"((given-args_464)(cdr given-args_460)))"
"(let-values(((m-ns19_465)(car given-args_464))"
"((given-kws_466)(cdr given-kws_463))"
"((given-args_467)(cdr given-args_464)))"
"(let-values(((module-name-sym17_468)(car given-args_467))"
"((given-kws_469)(cdr given-kws_466))"
"((given-args_470)(cdr given-args_467)))"
"(let-values(((phase21_471)(car given-args_470))"
"((given-kws_472)(cdr given-kws_469))"
"((given-args_473)(cdr given-args_470)))"
"(let-values(((s22_474)(car given-args_473))"
"((given-kws_475)(cdr given-kws_472))"
"((given-args_476)(cdr given-args_473)))"
"(let-values(((scopes-s18_477)(car given-args_476)))"
"(ensure-module-begin30.1"
" ctx20_462"
" m-ns19_465"
" module-name-sym17_468"
" phase21_471"
" s22_474"
" scopes-s18_477"
" bodys29_461)))))))))"
"(define-values"
"(ensure-module-begin32.1)"
"(lifted/1.1"
"(lambda(given-kws_478 given-argc_479)"
"(if(= given-argc_479 3)"
"(let-values(((l2_480) given-kws_478))"
"(if(pair? l2_480)"
"(if(eq?(car l2_480) '#:ctx)"
"(let-values(((l2_481)(cdr l2_480)))"
"(if(pair? l2_481)"
"(if(eq?(car l2_481) '#:m-ns)"
"(let-values(((l2_482)(cdr l2_481)))"
"(if(pair? l2_482)"
"(if(eq?(car l2_482) '#:module-name-sym)"
"(let-values(((l2_483)(cdr l2_482)))"
"(if(pair? l2_483)"
"(if(eq?(car l2_483) '#:phase)"
"(let-values(((l2_484)(cdr l2_483)))"
"(if(pair? l2_484)"
"(if(eq?(car l2_484) '#:s)"
"(let-values(((l2_485)(cdr l2_484)))"
"(if(pair? l2_485)"
"(if(eq?(car l2_485) '#:scopes-s)(null?(cdr l2_485)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_486 given-args_487 bodys_488)(unpack31.1 given-kws_486 given-args_487 bodys_488)))"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)))"
"(define-values"
"(add-module-begin41.1)"
"(lambda(log-rename-one?33_489"
" log-rename-one?34_490"
" bodys35_491"
" s36_492"
" scopes-s37_493"
" phase38_494"
" module-name-sym39_495"
" mb-ctx40_496)"
"(let-values(((bodys_497) bodys35_491))"
"(let-values(((s_498) s36_492))"
"(let-values(((scopes-s_499) scopes-s37_493))"
"(let-values(((phase_500) phase38_494))"
"(let-values(((module-name-sym_501) module-name-sym39_495))"
"(let-values(((mb-ctx_502) mb-ctx40_496))"
"(let-values(((log-rename-one?_503)(if log-rename-one?34_490 log-rename-one?33_489 #t)))"
"(let-values()"
"(let-values(((disarmed-scopes-s_504)(syntax-disarm$1 scopes-s_499)))"
"(let-values(((mb-id_505)(datum->syntax$1 disarmed-scopes-s_504 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id376_508) mb-id_505)((phase377_509) phase_500))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1 #f #f #f #f #f #f #f #f mb-id376_508 phase377_509)"
"(resolve31.1 mb-id376_508 phase377_509)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_498)))"
"(values))))"
"(let-values(((mb_506)"
"(datum->syntax$1 disarmed-scopes-s_504(list* mb-id_505 bodys_497) s_498)))"
"(let-values((()"
"(begin"
"(let-values(((obs_510)(expand-context-observer mb-ctx_502)))"
"(if obs_510"
"(let-values()"
"(let-values()(call-expand-observe obs_510 'tag mb_506)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_503"
"(let-values()"
"(let-values(((obs_511)(expand-context-observer mb-ctx_502)))"
"(if obs_511"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_511 'rename-one mb_506)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_507)"
"(let-values()"
"(let-values(((temp378_512)"
"(add-enclosing-name-property mb_506 module-name-sym_501))"
"((mb-ctx379_513) mb-ctx_502))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp378_512 mb-ctx379_513)"
"(expand7.1 temp378_512 mb-ctx379_513))))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_507) phase_500))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_498"
" partly-expanded-mb_507)))"
" partly-expanded-mb_507))))))))))))))))))"
"(define-values"
"(unpack42.1)"
"(lambda(given-kws_514"
" given-args_515"
" bodys35_516"
" s36_517"
" scopes-s37_518"
" phase38_519"
" module-name-sym39_520"
" mb-ctx40_521)"
"(let-values(((log-rename-one?34_522)(pair? given-kws_514)))"
"(let-values(((log-rename-one?33_523)(if log-rename-one?34_522(car given-args_515)(void))))"
"(add-module-begin41.1"
" log-rename-one?33_523"
" log-rename-one?34_522"
" bodys35_516"
" s36_517"
" scopes-s37_518"
" phase38_519"
" module-name-sym39_520"
" mb-ctx40_521)))))"
"(define-values"
"(add-module-begin43.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_524 given-argc_525)"
"(if(= given-argc_525 8)"
"(let-values(((l1_526) given-kws_524))"
"(let-values(((l1_527)"
"(if(null? l1_526) l1_526(if(eq?(car l1_526) '#:log-rename-one?)(cdr l1_526) l1_526))))"
"(null? l1_527)))"
" #f))"
"(case-lambda"
"((given-kws_528 given-args_529 bodys_530 s_531 scopes-s_532 phase_533 module-name-sym_534 mb-ctx_535)"
"(unpack42.1 given-kws_528 given-args_529 bodys_530 s_531 scopes-s_532 phase_533 module-name-sym_534 mb-ctx_535)))"
" null"
" '(#:log-rename-one?)"
"(let-values(((add-module-begin_536)"
"(case-lambda"
"((bodys_537 s_538 scopes-s_539 phase_540 module-name-sym_541 mb-ctx_542)"
"(unpack42.1 null null bodys_537 s_538 scopes-s_539 phase_540 module-name-sym_541 mb-ctx_542)))))"
" add-module-begin_536)))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_543 module-name-sym_544)(syntax-property$1 stx_543 'enclosing-module-name module-name-sym_544)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_545"
" outside-scope_546"
" init-ctx_547"
" keep-enclosing-scope-at-phase_548"
" self_549"
" enclosing-self_550"
" enclosing-mod_551)"
"(lambda(s_552)"
"(let-values()"
"(let-values(((s-without-enclosing_553)"
"(if keep-enclosing-scope-at-phase_548"
" s_552"
"(remove-use-site-scopes"
"(let-values(((lst_556)(root-expand-context-module-scopes init-ctx_547)))"
"(begin"
"(if(list? lst_556)(void)(let-values()(in-list lst_556)))"
"((letrec-values(((for-loop_557)"
"(lambda(s_558 lst_559)"
"(if(pair? lst_559)"
"(let-values(((sc_560)(unsafe-car lst_559)))"
"(let-values(((s_561)"
"(let-values(((s_562) s_558))"
"(let-values(((s_563)"
"(let-values()"
"(remove-scope s_562 sc_560))))"
"(values s_563)))))"
"(for-loop_557 s_561(unsafe-cdr lst_559))))"
" s_558))))"
" for-loop_557)"
" s_552"
" lst_556)))"
" init-ctx_547))))"
"(let-values(((s-with-edges_554)"
"(add-scope(add-scope s-without-enclosing_553 outside-scope_546) inside-scope_545)))"
"(let-values(((s-with-suitable-enclosing_555)"
"(if keep-enclosing-scope-at-phase_548"
"(let-values()"
"(syntax-module-path-index-shift s-with-edges_554 enclosing-self_550 enclosing-mod_551))"
"(let-values() s-with-edges_554))))"
"(syntax-module-path-index-shift"
" s-with-suitable-enclosing_555"
"(make-generic-self-module-path-index self_549)"
" self_549"
"(current-code-inspector)))))))))"
"(define-values"
"(lifted/2.1)"
"(make-required"
" 'partially-expand-bodys"
"(case-lambda((self_564 bodys_565)(apply missing-kw self_564 bodys_565 null)))"
" #f"
" #f))"
"(define-values"
"(partially-expand-bodys75.1)"
"(lambda(all-scopes-stx53_566"
" ctx47_567"
" declared-keywords55_568"
" declared-submodule-names56_569"
" defined-syms54_570"
" frame-id50_571"
" loop58_572"
" mpis-to-reset57_573"
" namespace48_574"
" need-eventually-defined52_575"
" original44_576"
" phase46_577"
" requires-and-provides51_578"
" self49_579"
" tail?45_580"
" bodys74_581)"
"(let-values(((bodys_582) bodys74_581))"
"(let-values(((s_583) original44_576))"
"(let-values(((tail?_584) tail?45_580))"
"(let-values(((phase_585) phase46_577))"
"(let-values(((partial-body-ctx_586) ctx47_567))"
"(let-values(((m-ns_587) namespace48_574))"
"(let-values(((self_588) self49_579))"
"(let-values(((frame-id_589) frame-id50_571))"
"(let-values(((requires+provides_590) requires-and-provides51_578))"
"(let-values(((need-eventually-defined_591) need-eventually-defined52_575))"
"(let-values(((all-scopes-stx_592) all-scopes-stx53_566))"
"(let-values(((defined-syms_593) defined-syms54_570))"
"(let-values(((declared-keywords_594) declared-keywords55_568))"
"(let-values(((declared-submodule-names_595) declared-submodule-names56_569))"
"(let-values(((mpis-to-reset_596) mpis-to-reset57_573))"
"(let-values(((pass-1-and-2-loop_597) loop58_572))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_587 phase_585)"
"((letrec-values(((loop_598)"
"(lambda(tail?_599 bodys_600)"
"(if(null? bodys_600)"
"(let-values()"
"(if tail?_599"
"(let-values()"
"(let-values(((bodys_601)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_586))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_586)))))"
"(if(null? bodys_601)"
" null"
"(loop_598"
" #t"
"(add-post-expansion-scope"
" bodys_601"
" partial-body-ctx_586)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_605)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_605"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_605"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_602)"
"(let-values()"
"(let-values(((temp380_606)"
"(car bodys_600))"
"((partial-body-ctx381_607)"
" partial-body-ctx_586))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp380_606"
" partial-body-ctx381_607)"
"(expand7.1"
" temp380_606"
" partial-body-ctx381_607))))))"
"(let-values(((disarmed-exp-body_603)"
"(syntax-disarm$1 exp-body_602)))"
"(let-values(((lifted-defns_604)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_586))))"
"(begin"
"(if(null? lifted-defns_604)"
"(let-values()"
"(begin"
"(let-values(((obs_608)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_608"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_608"
" 'rename-list"
" lifted-defns_604)))"
"(void)))"
"(let-values(((obs_609)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_609"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_609"
" 'module-lift-loop"
"(append"
" lifted-defns_604"
"(cons"
" exp-body_602"
"(cdr bodys_600))))))"
"(void)))))"
"(let-values()"
"(let-values(((obs_610)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_610"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_610"
" 'module-lift-end-loop"
"(cons"
" exp-body_602"
"(cdr bodys_600)))))"
"(void)))))"
"(let-values(((obs_611)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_611"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_611"
" 'rename-one"
" exp-body_602)))"
"(void)))"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_586))"
" lifted-defns_604"
"(loop_598"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_586)))"
"(let-values(((tmp_612)"
"(core-form-sym"
" disarmed-exp-body_603"
" phase_585)))"
"(if(equal? tmp_612 'begin)"
"(let-values()"
"(let-values(((ok?_613"
" begin382_614"
" e383_615)"
"(let-values(((s_628)"
" disarmed-exp-body_603))"
"(let-values(((orig-s_629)"
" s_628))"
"(let-values(((begin382_630"
" e383_631)"
"(let-values(((s_632)"
"(if(syntax?$1"
" s_628)"
"(syntax-e$1"
" s_628)"
" s_628)))"
"(if(pair?"
" s_632)"
"(let-values(((begin384_633)"
"(let-values(((s_635)"
"(car"
" s_632)))"
" s_635))"
"((e385_634)"
"(let-values(((s_636)"
"(cdr"
" s_632)))"
"(let-values(((s_637)"
"(if(syntax?$1"
" s_636)"
"(syntax-e$1"
" s_636)"
" s_636)))"
"(let-values(((flat-s_638)"
"(to-syntax-list.1"
" s_637)))"
"(if(not"
" flat-s_638)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                              \"bad syntax\""
" orig-s_629))"
"(let-values()"
" flat-s_638)))))))"
"(values"
" begin384_633"
" e385_634))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_629)))))"
"(values"
" #t"
" begin382_630"
" e383_631))))))"
"(let-values(((track_626)"
"(lambda(e_639)"
"(syntax-track-origin$1"
" e_639"
" exp-body_602))))"
"(let-values(((spliced-bodys_627)"
"(append"
"(map2"
" track_626"
" e383_615)"
"(cdr bodys_600))))"
"(begin"
"(let-values(((obs_640)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_640"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_640"
" 'splice"
" spliced-bodys_627)))"
"(void)))"
"(loop_598"
" tail?_599"
" spliced-bodys_627))))))"
"(if(equal? tmp_612 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_656)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_656"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_656"
" 'enter-prim"
" exp-body_602)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_657)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_657"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_657"
" 'enter-prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values(((ok?_641"
" begin-for-syntax386_642"
" e387_643)"
"(let-values(((s_658)"
" disarmed-exp-body_603))"
"(let-values(((orig-s_659)"
" s_658))"
"(let-values(((begin-for-syntax386_660"
" e387_661)"
"(let-values(((s_662)"
"(if(syntax?$1"
" s_658)"
"(syntax-e$1"
" s_658)"
" s_658)))"
"(if(pair?"
" s_662)"
"(let-values(((begin-for-syntax388_663)"
"(let-values(((s_665)"
"(car"
" s_662)))"
" s_665))"
"((e389_664)"
"(let-values(((s_666)"
"(cdr"
" s_662)))"
"(let-values(((s_667)"
"(if(syntax?$1"
" s_666)"
"(syntax-e$1"
" s_666)"
" s_666)))"
"(let-values(((flat-s_668)"
"(to-syntax-list.1"
" s_667)))"
"(if(not"
" flat-s_668)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                    \"bad syntax\""
" orig-s_659))"
"(let-values()"
" flat-s_668)))))))"
"(values"
" begin-for-syntax388_663"
" e389_664))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                            \"bad syntax\""
" orig-s_659)))))"
"(values"
" #t"
" begin-for-syntax386_660"
" e387_661))))))"
"(let-values(((nested-bodys_654)"
"(pass-1-and-2-loop_597"
" e387_643"
"(add1"
" phase_585))))"
"(let-values(((ct-m-ns_655)"
"(namespace->namespace-at-phase"
" m-ns_587"
"(add1"
" phase_585))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_587"
"(add1 phase_585))"
"(eval-nested-bodys"
" nested-bodys_654"
"(add1 phase_585)"
" ct-m-ns_655"
" self_588"
" partial-body-ctx_586)"
"(namespace-visit-available-modules!"
" m-ns_587"
" phase_585)"
"(let-values(((obs_669)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_669"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_669"
" 'exit-prim)))"
"(void)))"
"(cons"
"(let-values(((exp-body390_670)"
" exp-body_602)"
"((disarmed-exp-body391_671)"
" disarmed-exp-body_603)"
"((temp392_672)"
"(list*"
" begin-for-syntax386_642"
" nested-bodys_654)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" exp-body390_670"
" disarmed-exp-body391_671"
" temp392_672)"
"(rebuild53.1"
" exp-body390_670"
" disarmed-exp-body391_671"
" temp392_672)))"
"(loop_598"
" tail?_599"
"(cdr"
" bodys_600))))))))))"
"(if(equal? tmp_612 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_691)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_691"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_691"
" 'enter-prim"
" exp-body_602)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_692)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_692"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_692"
" 'enter-prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_673"
" define-values393_674"
" id394_675"
" rhs395_676)"
"(let-values(((s_693)"
" disarmed-exp-body_603))"
"(let-values(((orig-s_694)"
" s_693))"
"(let-values(((define-values393_695"
" id394_696"
" rhs395_697)"
"(let-values(((s_698)"
"(if(syntax?$1"
" s_693)"
"(syntax-e$1"
" s_693)"
" s_693)))"
"(if(pair?"
" s_698)"
"(let-values(((define-values396_699)"
"(let-values(((s_702)"
"(car"
" s_698)))"
" s_702))"
"((id397_700"
" rhs398_701)"
"(let-values(((s_703)"
"(cdr"
" s_698)))"
"(let-values(((s_704)"
"(if(syntax?$1"
" s_703)"
"(syntax-e$1"
" s_703)"
" s_703)))"
"(if(pair?"
" s_704)"
"(let-values(((id399_705)"
"(let-values(((s_707)"
"(car"
" s_704)))"
"(let-values(((s_708)"
"(if(syntax?$1"
" s_707)"
"(syntax-e$1"
" s_707)"
" s_707)))"
"(let-values(((flat-s_709)"
"(to-syntax-list.1"
" s_708)))"
"(if(not"
" flat-s_709)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                          \"bad syntax\""
" orig-s_694))"
"(let-values()"
"(let-values(((id_710)"
"(let-values(((lst_711)"
" flat-s_709))"
"(begin"
"(if(list?"
" lst_711)"
"(void)"
"(let-values()"
"(in-list"
" lst_711)))"
"((letrec-values(((for-loop_712)"
"(lambda(id_713"
" lst_714)"
"(if(pair?"
" lst_714)"
"(let-values(((s_715)"
"(unsafe-car"
" lst_714)))"
"(let-values(((id_716)"
"(let-values(((id_717)"
" id_713))"
"(let-values(((id_718)"
"(let-values()"
"(let-values(((id409_719)"
"(let-values()"
"(if(let-values(((or-part_720)"
"(if(syntax?$1"
" s_715)"
"(symbol?"
"(syntax-e$1"
" s_715))"
" #f)))"
"(if or-part_720"
" or-part_720"
"(symbol?"
" s_715)))"
" s_715"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                      \"not an identifier\""
" orig-s_694"
" s_715)))))"
"(cons"
" id409_719"
" id_717)))))"
"(values"
" id_718)))))"
"(for-loop_712"
" id_716"
"(unsafe-cdr"
" lst_714))))"
" id_713))))"
" for-loop_712)"
" null"
" lst_711)))))"
"(alt-reverse"
" id_710))))))))"
"((rhs400_706)"
"(let-values(((s_721)"
"(cdr"
" s_704)))"
"(let-values(((s_722)"
"(if(syntax?$1"
" s_721)"
"(syntax-e$1"
" s_721)"
" s_721)))"
"(if(pair?"
" s_722)"
"(let-values(((rhs401_723)"
"(let-values(((s_724)"
"(car"
" s_722)))"
" s_724))"
"(()"
"(let-values(((s_725)"
"(cdr"
" s_722)))"
"(let-values(((s_726)"
"(if(syntax?$1"
" s_725)"
"(syntax-e$1"
" s_725)"
" s_725)))"
"(if(null?"
" s_726)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"bad syntax\""
" orig-s_694))))))"
"(values"
" rhs401_723))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_694))))))"
"(values"
" id399_705"
" rhs400_706))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                  \"bad syntax\""
" orig-s_694))))))"
"(values"
" define-values396_699"
" id397_700"
" rhs398_701))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_694)))))"
"(values"
" #t"
" define-values393_695"
" id394_696"
" rhs395_697))))))"
"(let-values(((ids_689)"
"(remove-use-site-scopes"
" id394_675"
" partial-body-ctx_586)))"
"(let-values((()"
"(begin"
"(let-values(((ids402_727)"
" ids_689)"
"((phase403_728)"
" phase_585)"
"((exp-body404_729)"
" exp-body_602))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids402_727"
" phase403_728"
" exp-body404_729"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids402_727"
" phase403_728"
" exp-body404_729)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:645:10_730)"
" check-ids-unbound163.1)"
"((ids405_731)"
" ids_689)"
"((phase406_732)"
" phase_585)"
"((requires+provides407_733)"
" requires+provides_590)"
"((exp-body408_734)"
" exp-body_602))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound163.1))"
"(check-ids-unbound161.1"
" exp-body408_734"
" ids405_731"
" phase406_732"
" requires+provides407_733)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:645:10_730"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body408_734)"
" ids405_731"
" phase406_732"
" requires+provides407_733)))"
"(values))))"
"(let-values(((syms_690)"
"(let-values(((...er/expand/module.rkt:646:23_735)"
" select-defined-syms-and-bind!18.1)"
"((ids410_736)"
" ids_689)"
"((defined-syms411_737)"
" defined-syms_593)"
"((self412_738)"
" self_588)"
"((phase413_739)"
" phase_585)"
"((all-scopes-stx414_740)"
" all-scopes-stx_592)"
"((frame-id415_741)"
" frame-id_589)"
"((requires+provides416_742)"
" requires+provides_590)"
"((exp-body417_743)"
" exp-body_602))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id415_741"
" exp-body417_743"
" #t"
" requires+provides416_742"
" #t"
" #f"
" #f"
" ids410_736"
" defined-syms411_737"
" self412_738"
" phase413_739"
" all-scopes-stx414_740)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:646:23_735"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" frame-id415_741"
" exp-body417_743"
" requires+provides416_742)"
" ids410_736"
" defined-syms411_737"
" self412_738"
" phase413_739"
" all-scopes-stx414_740)))))"
"(begin"
"(add-defined-syms!"
" requires+provides_590"
" syms_690"
" phase_585)"
"(let-values(((obs_744)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_744"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_744"
" 'exit-prim)))"
"(void)))"
"(cons"
"(let-values(((exp-body418_745)"
" exp-body_602)"
"((disarmed-exp-body419_746)"
" disarmed-exp-body_603)"
"((temp420_747)"
"(list"
" define-values393_674"
" ids_689"
" rhs395_676)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" exp-body418_745"
" disarmed-exp-body419_746"
" temp420_747)"
"(rebuild53.1"
" exp-body418_745"
" disarmed-exp-body419_746"
" temp420_747)))"
"(loop_598"
" tail?_599"
"(cdr"
" bodys_600))))))))))))"
"(if(equal? tmp_612 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_768)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_768"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_768"
" 'enter-prim"
" exp-body_602)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_769)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_769"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_769"
" 'enter-prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_748"
" define-syntaxes421_749"
" id422_750"
" rhs423_751)"
"(let-values(((s_770)"
" disarmed-exp-body_603))"
"(let-values(((orig-s_771)"
" s_770))"
"(let-values(((define-syntaxes421_772"
" id422_773"
" rhs423_774)"
"(let-values(((s_775)"
"(if(syntax?$1"
" s_770)"
"(syntax-e$1"
" s_770)"
" s_770)))"
"(if(pair?"
" s_775)"
"(let-values(((define-syntaxes424_776)"
"(let-values(((s_779)"
"(car"
" s_775)))"
" s_779))"
"((id425_777"
" rhs426_778)"
"(let-values(((s_780)"
"(cdr"
" s_775)))"
"(let-values(((s_781)"
"(if(syntax?$1"
" s_780)"
"(syntax-e$1"
" s_780)"
" s_780)))"
"(if(pair?"
" s_781)"
"(let-values(((id427_782)"
"(let-values(((s_784)"
"(car"
" s_781)))"
"(let-values(((s_785)"
"(if(syntax?$1"
" s_784)"
"(syntax-e$1"
" s_784)"
" s_784)))"
"(let-values(((flat-s_786)"
"(to-syntax-list.1"
" s_785)))"
"(if(not"
" flat-s_786)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_771))"
"(let-values()"
"(let-values(((id_787)"
"(let-values(((lst_788)"
" flat-s_786))"
"(begin"
"(if(list?"
" lst_788)"
"(void)"
"(let-values()"
"(in-list"
" lst_788)))"
"((letrec-values(((for-loop_789)"
"(lambda(id_790"
" lst_791)"
"(if(pair?"
" lst_791)"
"(let-values(((s_792)"
"(unsafe-car"
" lst_791)))"
"(let-values(((id_793)"
"(let-values(((id_794)"
" id_790))"
"(let-values(((id_795)"
"(let-values()"
"(let-values(((id437_796)"
"(let-values()"
"(if(let-values(((or-part_797)"
"(if(syntax?$1"
" s_792)"
"(symbol?"
"(syntax-e$1"
" s_792))"
" #f)))"
"(if or-part_797"
" or-part_797"
"(symbol?"
" s_792)))"
" s_792"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                        \"not an identifier\""
" orig-s_771"
" s_792)))))"
"(cons"
" id437_796"
" id_794)))))"
"(values"
" id_795)))))"
"(for-loop_789"
" id_793"
"(unsafe-cdr"
" lst_791))))"
" id_790))))"
" for-loop_789)"
" null"
" lst_788)))))"
"(alt-reverse"
" id_787))))))))"
"((rhs428_783)"
"(let-values(((s_798)"
"(cdr"
" s_781)))"
"(let-values(((s_799)"
"(if(syntax?$1"
" s_798)"
"(syntax-e$1"
" s_798)"
" s_798)))"
"(if(pair?"
" s_799)"
"(let-values(((rhs429_800)"
"(let-values(((s_801)"
"(car"
" s_799)))"
" s_801))"
"(()"
"(let-values(((s_802)"
"(cdr"
" s_799)))"
"(let-values(((s_803)"
"(if(syntax?$1"
" s_802)"
"(syntax-e$1"
" s_802)"
" s_802)))"
"(if(null?"
" s_803)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"bad syntax\""
" orig-s_771))))))"
"(values"
" rhs429_800))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                        \"bad syntax\""
" orig-s_771))))))"
"(values"
" id427_782"
" rhs428_783))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                    \"bad syntax\""
" orig-s_771))))))"
"(values"
" define-syntaxes424_776"
" id425_777"
" rhs426_778))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_771)))))"
"(values"
" #t"
" define-syntaxes421_772"
" id422_773"
" rhs423_774))))))"
"(let-values(((ids_764)"
"(remove-use-site-scopes"
" id422_750"
" partial-body-ctx_586)))"
"(let-values((()"
"(begin"
"(let-values(((ids430_804)"
" ids_764)"
"((phase431_805)"
" phase_585)"
"((exp-body432_806)"
" exp-body_602))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids430_804"
" phase431_805"
" exp-body432_806"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids430_804"
" phase431_805"
" exp-body432_806)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:663:10_807)"
" check-ids-unbound163.1)"
"((ids433_808)"
" ids_764)"
"((phase434_809)"
" phase_585)"
"((requires+provides435_810)"
" requires+provides_590)"
"((exp-body436_811)"
" exp-body_602))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound163.1))"
"(check-ids-unbound161.1"
" exp-body436_811"
" ids433_808"
" phase434_809"
" requires+provides435_810)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:663:10_807"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body436_811)"
" ids433_808"
" phase434_809"
" requires+provides435_810)))"
"(values))))"
"(let-values(((syms_765)"
"(let-values(((...er/expand/module.rkt:664:23_812)"
" select-defined-syms-and-bind!18.1)"
"((ids438_813)"
" ids_764)"
"((defined-syms439_814)"
" defined-syms_593)"
"((self440_815)"
" self_588)"
"((phase441_816)"
" phase_585)"
"((all-scopes-stx442_817)"
" all-scopes-stx_592)"
"((frame-id443_818)"
" frame-id_589)"
"((requires+provides444_819)"
" requires+provides_590)"
"((exp-body445_820)"
" exp-body_602)"
"((temp446_821)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" temp446_821"
" #t"
" frame-id443_818"
" exp-body445_820"
" #t"
" requires+provides444_819"
" #t"
" #f"
" #f"
" ids438_813"
" defined-syms439_814"
" self440_815"
" phase441_816"
" all-scopes-stx442_817)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:664:23_812"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" temp446_821"
" frame-id443_818"
" exp-body445_820"
" requires+provides444_819)"
" ids438_813"
" defined-syms439_814"
" self440_815"
" phase441_816"
" all-scopes-stx442_817)))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_590"
" syms_765"
" phase_585)"
"(values))))"
"(let-values(((exp-rhs_766"
" vals_767)"
"(expand+eval-for-syntaxes-binding"
" rhs423_751"
" ids_764"
"(let-values(((the-struct_822)"
" partial-body-ctx_586))"
"(if(expand-context?"
" the-struct_822)"
"(let-values(((need-eventually-defined447_823)"
" need-eventually-defined_591))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_822)"
"(root-expand-context-post-expansion-scope"
" the-struct_822)"
"(root-expand-context-top-level-bind-scope"
" the-struct_822)"
"(root-expand-context-all-scopes-stx"
" the-struct_822)"
"(root-expand-context-use-site-scopes"
" the-struct_822)"
"(root-expand-context-defined-syms"
" the-struct_822)"
"(root-expand-context-frame-id"
" the-struct_822)"
"(root-expand-context-counter"
" the-struct_822)"
"(root-expand-context-lift-key"
" the-struct_822)"
"(expand-context-context"
" the-struct_822)"
"(expand-context-phase"
" the-struct_822)"
"(expand-context-namespace"
" the-struct_822)"
"(expand-context-env"
" the-struct_822)"
"(expand-context-user-env"
" the-struct_822)"
"(expand-context-post-expansion-scope-action"
" the-struct_822)"
"(expand-context-scopes"
" the-struct_822)"
"(expand-context-def-ctx-scopes"
" the-struct_822)"
"(expand-context-binding-layer"
" the-struct_822)"
"(expand-context-reference-records"
" the-struct_822)"
"(expand-context-only-immediate?"
" the-struct_822)"
"(expand-context-just-once?"
" the-struct_822)"
"(expand-context-module-begin-k"
" the-struct_822)"
" need-eventually-defined447_823"
"(expand-context-allow-unbound?"
" the-struct_822)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_822)"
"(expand-context-stops"
" the-struct_822)"
"(expand-context-current-introduction-scopes"
" the-struct_822)"
"(expand-context-declared-submodule-names"
" the-struct_822)"
"(expand-context-lifts"
" the-struct_822)"
"(expand-context-lift-envs"
" the-struct_822)"
"(expand-context-module-lifts"
" the-struct_822)"
"(expand-context-require-lifts"
" the-struct_822)"
"(expand-context-to-module-lifts"
" the-struct_822)"
"(expand-context-requires+provides"
" the-struct_822)"
"(expand-context-name"
" the-struct_822)"
"(expand-context-observer"
" the-struct_822)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                           \"expand-context?\""
" the-struct_822))))))"
"(begin"
"(let-values(((lst_824)"
" syms_765)"
"((lst_825)"
" vals_767)"
"((lst_826)"
" ids_764))"
"(begin"
"(if(list?"
" lst_824)"
"(void)"
"(let-values()"
"(in-list"
" lst_824)))"
"(if(list?"
" lst_825)"
"(void)"
"(let-values()"
"(in-list"
" lst_825)))"
"(if(list?"
" lst_826)"
"(void)"
"(let-values()"
"(in-list"
" lst_826)))"
"((letrec-values(((for-loop_827)"
"(lambda(fold-var_828"
" lst_829"
" lst_830"
" lst_831)"
"(if(if(pair?"
" lst_829)"
"(if(pair?"
" lst_830)"
"(pair?"
" lst_831)"
" #f)"
" #f)"
"(let-values(((sym_832)"
"(unsafe-car"
" lst_829))"
"((val_833)"
"(unsafe-car"
" lst_830))"
"((id_834)"
"(unsafe-car"
" lst_831)))"
"(let-values(((fold-var_835)"
"(let-values(((fold-var_836)"
" fold-var_828))"
"(let-values(((fold-var_837)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_833"
" id_834"
" phase_585)"
"(namespace-set-transformer!"
" m-ns_587"
" phase_585"
" sym_832"
" val_833)))"
"(void)))))"
"(values"
" fold-var_837)))))"
"(for-loop_827"
" fold-var_835"
"(unsafe-cdr"
" lst_829)"
"(unsafe-cdr"
" lst_830)"
"(unsafe-cdr"
" lst_831))))"
" fold-var_828))))"
" for-loop_827)"
"(void)"
" lst_824"
" lst_825"
" lst_826)))"
"(let-values(((obs_838)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_838"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_838"
" 'exit-prim)))"
"(void)))"
"(cons"
"(let-values(((exp-body448_839)"
" exp-body_602)"
"((disarmed-exp-body449_840)"
" disarmed-exp-body_603)"
"((temp450_841)"
"(list"
" define-syntaxes421_749"
" ids_764"
" exp-rhs_766)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" exp-body448_839"
" disarmed-exp-body449_840"
" temp450_841)"
"(rebuild53.1"
" exp-body448_839"
" disarmed-exp-body449_840"
" temp450_841)))"
"(loop_598"
" tail?_599"
"(cdr"
" bodys_600))))))))))))))"
"(if(equal? tmp_612 '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_856)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_856"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_856"
" 'enter-prim"
" exp-body_602)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_857)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_857"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_857"
" 'enter-prim-require)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_842)"
"(remove-use-site-scopes"
" disarmed-exp-body_603"
" partial-body-ctx_586)))"
"(let-values(((ok?_843"
" #%require451_844"
" req452_845)"
"(let-values(((s_858)"
" ready-body_842))"
"(let-values(((orig-s_859)"
" s_858))"
"(let-values(((#%require451_860"
" req452_861)"
"(let-values(((s_862)"
"(if(syntax?$1"
" s_858)"
"(syntax-e$1"
" s_858)"
" s_858)))"
"(if(pair?"
" s_862)"
"(let-values(((#%require453_863)"
"(let-values(((s_865)"
"(car"
" s_862)))"
" s_865))"
"((req454_864)"
"(let-values(((s_866)"
"(cdr"
" s_862)))"
"(let-values(((s_867)"
"(if(syntax?$1"
" s_866)"
"(syntax-e$1"
" s_866)"
" s_866)))"
"(let-values(((flat-s_868)"
"(to-syntax-list.1"
" s_867)))"
"(if(not"
" flat-s_868)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                            \"bad syntax\""
" orig-s_859))"
"(let-values()"
" flat-s_868)))))))"
"(values"
" #%require453_863"
" req454_864))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                    \"bad syntax\""
" orig-s_859)))))"
"(values"
" #t"
" #%require451_860"
" req452_861))))))"
"(begin"
"(let-values(((...er/expand/module.rkt:692:10_869)"
" parse-and-perform-requires!30.1)"
"((temp455_870)"
" req452_845)"
"((exp-body456_871)"
" exp-body_602)"
"((self457_872)"
" self_588)"
"((m-ns458_873)"
" m-ns_587)"
"((phase459_874)"
" phase_585)"
"((phase460_875)"
" phase_585)"
"((requires+provides461_876)"
" requires+provides_590)"
"((declared-submodule-names462_877)"
" declared-submodule-names_595)"
"((temp463_878)"
" 'module))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names462_877"
" #t"
" phase460_875"
" #t"
" #f"
" #f"
" self457_872"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp463_878"
" temp455_870"
" exp-body456_871"
" m-ns458_873"
" phase459_874"
" requires+provides461_876)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:692:10_869"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self"
" #:who)"
" 7)"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self"
" #:who)"
"(list"
" declared-submodule-names462_877"
" phase460_875"
" self457_872"
" temp463_878)"
" temp455_870"
" exp-body456_871"
" m-ns458_873"
" phase459_874"
" requires+provides461_876)))"
"(let-values(((obs_879)"
"(expand-context-observer"
" partial-body-ctx_586)))"
"(if obs_879"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_879"
" 'exit-prim)))"
"(void)))"
"(cons"
" exp-body_602"
"(loop_598"
" tail?_599"
"(cdr"
" bodys_600)))))))))"
"(if(equal? tmp_612 '#%provide)"
"(let-values()"
"(cons"
" exp-body_602"
"(loop_598"
" tail?_599"
"(cdr bodys_600))))"
"(if(equal? tmp_612 'module)"
"(let-values()"
"(let-values(((ready-body_880)"
"(remove-use-site-scopes"
" exp-body_602"
" partial-body-ctx_586)))"
"(let-values(((submod_881)"
"(let-values(((...er/expand/module.rkt:708:12_882)"
" expand-submodule183.1)"
"((ready-body464_883)"
" ready-body_880)"
"((self465_884)"
" self_588)"
"((partial-body-ctx466_885)"
" partial-body-ctx_586)"
"((temp467_886)"
" #f)"
"((declared-submodule-names468_887)"
" declared-submodule-names_595)"
"((mpis-to-reset469_888)"
" mpis-to-reset_596))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names468_887"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp467_886"
" #f"
" #f"
" mpis-to-reset469_888"
" ready-body464_883"
" self465_884"
" partial-body-ctx466_885)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:708:12_882"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names468_887"
" temp467_886"
" mpis-to-reset469_888)"
" ready-body464_883"
" self465_884"
" partial-body-ctx466_885)))))"
"(cons"
" submod_881"
"(loop_598"
" tail?_599"
"(cdr bodys_600))))))"
"(if(equal? tmp_612 'module*)"
"(let-values()"
"(cons"
" exp-body_602"
"(loop_598"
" tail?_599"
"(cdr bodys_600))))"
"(if(equal?"
" tmp_612"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_889"
" #%declare470_890"
" kw471_891)"
"(let-values(((s_902)"
" disarmed-exp-body_603))"
"(let-values(((orig-s_903)"
" s_902))"
"(let-values(((#%declare470_904"
" kw471_905)"
"(let-values(((s_906)"
"(if(syntax?$1"
" s_902)"
"(syntax-e$1"
" s_902)"
" s_902)))"
"(if(pair?"
" s_906)"
"(let-values(((#%declare472_907)"
"(let-values(((s_909)"
"(car"
" s_906)))"
" s_909))"
"((kw473_908)"
"(let-values(((s_910)"
"(cdr"
" s_906)))"
"(let-values(((s_911)"
"(if(syntax?$1"
" s_910)"
"(syntax-e$1"
" s_910)"
" s_910)))"
"(let-values(((flat-s_912)"
"(to-syntax-list.1"
" s_911)))"
"(if(not"
" flat-s_912)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                              \"bad syntax\""
" orig-s_903))"
"(let-values()"
" flat-s_912)))))))"
"(values"
" #%declare472_907"
" kw473_908))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                      \"bad syntax\""
" orig-s_903)))))"
"(values"
" #t"
" #%declare470_904"
" kw471_905))))))"
"(begin"
"(let-values(((lst_913)"
" kw471_891))"
"(begin"
"(if(list?"
" lst_913)"
"(void)"
"(let-values()"
"(in-list"
" lst_913)))"
"((letrec-values(((for-loop_914)"
"(lambda(fold-var_915"
" lst_916)"
"(if(pair?"
" lst_916)"
"(let-values(((kw_917)"
"(unsafe-car"
" lst_916)))"
"(let-values(((fold-var_918)"
"(let-values(((fold-var_919)"
" fold-var_915))"
"(let-values(((fold-var_920)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_917))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"expected a keyword\""
" exp-body_602"
" kw_917)))"
"(if(memq"
"(syntax-e$1"
" kw_917)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"not an allowed declaration keyword\""
" exp-body_602"
" kw_917)))"
"(if(hash-ref"
" declared-keywords_594"
"(syntax-e$1"
" kw_917)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"keyword declared multiple times\""
" exp-body_602"
" kw_917))"
"(void))"
"(hash-set!"
" declared-keywords_594"
"(syntax-e$1"
" kw_917)"
" kw_917)))"
"(void)))))"
"(values"
" fold-var_920)))))"
"(for-loop_914"
" fold-var_918"
"(unsafe-cdr"
" lst_916))))"
" fold-var_915))))"
" for-loop_914)"
"(void)"
" lst_913)))"
"(cons"
" exp-body_602"
"(loop_598"
" tail?_599"
"(cdr"
" bodys_600))))))"
"(let-values()"
"(cons"
" exp-body_602"
"(loop_598"
" tail?_599"
"(cdr"
" bodys_600)))))))))))))))))))))))))"
" loop_598)"
" tail?_584"
" bodys_582)))))))))))))))))))))"
"(define-values"
"(unpack76.1)"
"(lambda(given-kws_921 given-args_922 bodys74_923)"
"(let-values(((all-scopes-stx53_924)(car given-args_922))"
"((given-kws_925)(cdr given-kws_921))"
"((given-args_926)(cdr given-args_922)))"
"(let-values(((ctx47_927)(car given-args_926))"
"((given-kws_928)(cdr given-kws_925))"
"((given-args_929)(cdr given-args_926)))"
"(let-values(((declared-keywords55_930)(car given-args_929))"
"((given-kws_931)(cdr given-kws_928))"
"((given-args_932)(cdr given-args_929)))"
"(let-values(((declared-submodule-names56_933)(car given-args_932))"
"((given-kws_934)(cdr given-kws_931))"
"((given-args_935)(cdr given-args_932)))"
"(let-values(((defined-syms54_936)(car given-args_935))"
"((given-kws_937)(cdr given-kws_934))"
"((given-args_938)(cdr given-args_935)))"
"(let-values(((frame-id50_939)(car given-args_938))"
"((given-kws_940)(cdr given-kws_937))"
"((given-args_941)(cdr given-args_938)))"
"(let-values(((loop58_942)(car given-args_941))"
"((given-kws_943)(cdr given-kws_940))"
"((given-args_944)(cdr given-args_941)))"
"(let-values(((mpis-to-reset57_945)(car given-args_944))"
"((given-kws_946)(cdr given-kws_943))"
"((given-args_947)(cdr given-args_944)))"
"(let-values(((namespace48_948)(car given-args_947))"
"((given-kws_949)(cdr given-kws_946))"
"((given-args_950)(cdr given-args_947)))"
"(let-values(((need-eventually-defined52_951)(car given-args_950))"
"((given-kws_952)(cdr given-kws_949))"
"((given-args_953)(cdr given-args_950)))"
"(let-values(((original44_954)(car given-args_953))"
"((given-kws_955)(cdr given-kws_952))"
"((given-args_956)(cdr given-args_953)))"
"(let-values(((phase46_957)(car given-args_956))"
"((given-kws_958)(cdr given-kws_955))"
"((given-args_959)(cdr given-args_956)))"
"(let-values(((requires-and-provides51_960)(car given-args_959))"
"((given-kws_961)(cdr given-kws_958))"
"((given-args_962)(cdr given-args_959)))"
"(let-values(((self49_963)(car given-args_962))"
"((given-kws_964)(cdr given-kws_961))"
"((given-args_965)(cdr given-args_962)))"
"(let-values(((tail?45_966)(car given-args_965)))"
"(partially-expand-bodys75.1"
" all-scopes-stx53_924"
" ctx47_927"
" declared-keywords55_930"
" declared-submodule-names56_933"
" defined-syms54_936"
" frame-id50_939"
" loop58_942"
" mpis-to-reset57_945"
" namespace48_948"
" need-eventually-defined52_951"
" original44_954"
" phase46_957"
" requires-and-provides51_960"
" self49_963"
" tail?45_966"
" bodys74_923))))))))))))))))))"
"(define-values"
"(partially-expand-bodys77.1)"
"(lifted/2.1"
"(lambda(given-kws_967 given-argc_968)"
"(if(= given-argc_968 3)"
"(let-values(((l2_969) given-kws_967))"
"(if(pair? l2_969)"
"(if(eq?(car l2_969) '#:all-scopes-stx)"
"(let-values(((l2_970)(cdr l2_969)))"
"(if(pair? l2_970)"
"(if(eq?(car l2_970) '#:ctx)"
"(let-values(((l2_971)(cdr l2_970)))"
"(if(pair? l2_971)"
"(if(eq?(car l2_971) '#:declared-keywords)"
"(let-values(((l2_972)(cdr l2_971)))"
"(if(pair? l2_972)"
"(if(eq?(car l2_972) '#:declared-submodule-names)"
"(let-values(((l2_973)(cdr l2_972)))"
"(if(pair? l2_973)"
"(if(eq?(car l2_973) '#:defined-syms)"
"(let-values(((l2_974)(cdr l2_973)))"
"(if(pair? l2_974)"
"(if(eq?(car l2_974) '#:frame-id)"
"(let-values(((l2_975)(cdr l2_974)))"
"(if(pair? l2_975)"
"(if(eq?(car l2_975) '#:loop)"
"(let-values(((l2_976)(cdr l2_975)))"
"(if(pair? l2_976)"
"(if(eq?(car l2_976) '#:mpis-to-reset)"
"(let-values(((l2_977)(cdr l2_976)))"
"(if(pair? l2_977)"
"(if(eq?(car l2_977) '#:namespace)"
"(let-values(((l2_978)(cdr l2_977)))"
"(if(pair? l2_978)"
"(if(eq?(car l2_978) '#:need-eventually-defined)"
"(let-values(((l2_979)(cdr l2_978)))"
"(if(pair? l2_979)"
"(if(eq?(car l2_979) '#:original)"
"(let-values(((l2_980)(cdr l2_979)))"
"(if(pair? l2_980)"
"(if(eq?(car l2_980) '#:phase)"
"(let-values(((l2_981)(cdr l2_980)))"
"(if(pair? l2_981)"
"(if(eq?"
"(car l2_981)"
" '#:requires-and-provides)"
"(let-values(((l2_982)"
"(cdr l2_981)))"
"(if(pair? l2_982)"
"(if(eq?(car l2_982) '#:self)"
"(let-values(((l2_983)"
"(cdr l2_982)))"
"(if(pair? l2_983)"
"(if(eq?"
"(car l2_983)"
" '#:tail?)"
"(null?(cdr l2_983))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_984 given-args_985 bodys_986)(unpack76.1 given-kws_984 given-args_985 bodys_986)))"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_987 frame-id_988 inside-scope_989 all-scopes-stx_990 defined-syms_991 requires+provides_992)"
"(lambda(ids_993 rhs_994 phase_995)"
"(let-values(((scoped-ids_996)"
"(alt-reverse"
"(let-values(((lst_997) ids_993))"
"(begin"
"(if(list? lst_997)(void)(let-values()(in-list lst_997)))"
"((letrec-values(((for-loop_998)"
"(lambda(fold-var_999 lst_1000)"
"(if(pair? lst_1000)"
"(let-values(((id_1001)(unsafe-car lst_1000)))"
"(let-values(((fold-var_1002)"
"(let-values(((fold-var_1003) fold-var_999))"
"(let-values(((fold-var_1004)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_1001"
" inside-scope_989))"
" fold-var_1003))))"
"(values fold-var_1004)))))"
"(for-loop_998 fold-var_1002(unsafe-cdr lst_1000))))"
" fold-var_999))))"
" for-loop_998)"
" null"
" lst_997))))))"
"(begin"
"(let-values(((...er/expand/module.rkt:742:4_1005) select-defined-syms-and-bind!18.1)"
"((scoped-ids474_1006) scoped-ids_996)"
"((defined-syms475_1007) defined-syms_991)"
"((self476_1008) self_987)"
"((phase477_1009) phase_995)"
"((all-scopes-stx478_1010) all-scopes-stx_990)"
"((frame-id479_1011) frame-id_988)"
"((requires+provides480_1012) requires+provides_992))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id479_1011"
" #f"
" #f"
" requires+provides480_1012"
" #t"
" #f"
" #f"
" scoped-ids474_1006"
" defined-syms475_1007"
" self476_1008"
" phase477_1009"
" all-scopes-stx478_1010)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:742:4_1005"
" keyword-procedure-extract"
" '(#:frame-id #:requires+provides)"
" 7)"
" '(#:frame-id #:requires+provides)"
"(list frame-id479_1011 requires+provides480_1012)"
" scoped-ids474_1006"
" defined-syms475_1007"
" self476_1008"
" phase477_1009"
" all-scopes-stx478_1010)))"
"(values"
" scoped-ids_996"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_995) 'define-values)"
" scoped-ids_996"
" rhs_994))"
" inside-scope_989)))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_1013 ctx_1014)"
"(let-values(((sc_1015)(root-expand-context-post-expansion-scope ctx_1014)))"
"(alt-reverse"
"(let-values(((lst_1016) bodys_1013))"
"(begin"
"(if(list? lst_1016)(void)(let-values()(in-list lst_1016)))"
"((letrec-values(((for-loop_1017)"
"(lambda(fold-var_1018 lst_1019)"
"(if(pair? lst_1019)"
"(let-values(((body_1020)(unsafe-car lst_1019)))"
"(let-values(((fold-var_1021)"
"(let-values(((fold-var_1022) fold-var_1018))"
"(let-values(((fold-var_1023)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_1020 sc_1015))"
" fold-var_1022))))"
"(values fold-var_1023)))))"
"(for-loop_1017 fold-var_1021(unsafe-cdr lst_1019))))"
" fold-var_1018))))"
" for-loop_1017)"
" null"
" lst_1016)))))))"
"(define-values"
"(lifted/3.1)"
"(make-required"
" 'finish-expanding-body-expressons"
"(case-lambda"
"((self_1024 partially-expanded-bodys_1025)(apply missing-kw self_1024 partially-expanded-bodys_1025 null)))"
" #f"
" #f))"
"(define-values"
"(finish-expanding-body-expressons91.1)"
"(lambda(ctx80_1026"
" declared-submodule-names82_1027"
" mpis-to-reset83_1028"
" phase79_1029"
" self81_1030"
" tail?78_1031"
" partially-expanded-bodys90_1032)"
"(let-values(((partially-expanded-bodys_1033) partially-expanded-bodys90_1032))"
"(let-values(((tail?_1034) tail?78_1031))"
"(let-values(((phase_1035) phase79_1029))"
"(let-values(((body-ctx_1036) ctx80_1026))"
"(let-values(((self_1037) self81_1030))"
"(let-values(((declared-submodule-names_1038) declared-submodule-names82_1027))"
"(let-values(((mpis-to-reset_1039) mpis-to-reset83_1028))"
"(let-values()"
"((letrec-values(((loop_1040)"
"(lambda(tail?_1041 bodys_1042)"
"(if(null? bodys_1042)"
"(let-values()"
"(if tail?_1041"
"(let-values()"
"(let-values(((bodys_1043)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_1036))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_1036)))))"
"(if(null? bodys_1043) null(loop_1040 #t bodys_1043))))"
"(let-values() bodys_1042)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1049)"
"(expand-context-observer body-ctx_1036)))"
"(if obs_1049"
"(let-values()"
"(let-values()(call-expand-observe obs_1049 'next)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-body_1044)(syntax-disarm$1(car bodys_1042))))"
"(let-values(((exp-body_1045)"
"(let-values(((tmp_1050)"
"(core-form-sym"
" disarmed-body_1044"
" phase_1035)))"
"(if(equal? tmp_1050 'define-values)"
"(let-values()"
"(let-values(((ok?_1051"
" define-values481_1052"
" id482_1053"
" rhs483_1054)"
"(let-values(((s_1068)"
" disarmed-body_1044))"
"(let-values(((orig-s_1069) s_1068))"
"(let-values(((define-values481_1070"
" id482_1071"
" rhs483_1072)"
"(let-values(((s_1073)"
"(if(syntax?$1"
" s_1068)"
"(syntax-e$1"
" s_1068)"
" s_1068)))"
"(if(pair? s_1073)"
"(let-values(((define-values484_1074)"
"(let-values(((s_1077)"
"(car"
" s_1073)))"
" s_1077))"
"((id485_1075"
" rhs486_1076)"
"(let-values(((s_1078)"
"(cdr"
" s_1073)))"
"(let-values(((s_1079)"
"(if(syntax?$1"
" s_1078)"
"(syntax-e$1"
" s_1078)"
" s_1078)))"
"(if(pair?"
" s_1079)"
"(let-values(((id487_1080)"
"(let-values(((s_1082)"
"(car"
" s_1079)))"
"(let-values(((s_1083)"
"(if(syntax?$1"
" s_1082)"
"(syntax-e$1"
" s_1082)"
" s_1082)))"
"(let-values(((flat-s_1084)"
"(to-syntax-list.1"
" s_1083)))"
"(if(not"
" flat-s_1084)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_1069))"
"(let-values()"
"(let-values(((id_1085)"
"(let-values(((lst_1086)"
" flat-s_1084))"
"(begin"
"(if(list?"
" lst_1086)"
"(void)"
"(let-values()"
"(in-list"
" lst_1086)))"
"((letrec-values(((for-loop_1087)"
"(lambda(id_1088"
" lst_1089)"
"(if(pair?"
" lst_1089)"
"(let-values(((s_1090)"
"(unsafe-car"
" lst_1089)))"
"(let-values(((id_1091)"
"(let-values(((id_1092)"
" id_1088))"
"(let-values(((id_1093)"
"(let-values()"
"(let-values(((id493_1094)"
"(let-values()"
"(if(let-values(((or-part_1095)"
"(if(syntax?$1"
" s_1090)"
"(symbol?"
"(syntax-e$1"
" s_1090))"
" #f)))"
"(if or-part_1095"
" or-part_1095"
"(symbol?"
" s_1090)))"
" s_1090"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_1069"
" s_1090)))))"
"(cons"
" id493_1094"
" id_1092)))))"
"(values"
" id_1093)))))"
"(for-loop_1087"
" id_1091"
"(unsafe-cdr"
" lst_1089))))"
" id_1088))))"
" for-loop_1087)"
" null"
" lst_1086)))))"
"(alt-reverse"
" id_1085))))))))"
"((rhs488_1081)"
"(let-values(((s_1096)"
"(cdr"
" s_1079)))"
"(let-values(((s_1097)"
"(if(syntax?$1"
" s_1096)"
"(syntax-e$1"
" s_1096)"
" s_1096)))"
"(if(pair?"
" s_1097)"
"(let-values(((rhs489_1098)"
"(let-values(((s_1099)"
"(car"
" s_1097)))"
" s_1099))"
"(()"
"(let-values(((s_1100)"
"(cdr"
" s_1097)))"
"(let-values(((s_1101)"
"(if(syntax?$1"
" s_1100)"
"(syntax-e$1"
" s_1100)"
" s_1100)))"
"(if(null?"
" s_1101)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_1069))))))"
"(values"
" rhs489_1098))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_1069))))))"
"(values"
" id487_1080"
" rhs488_1081))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_1069))))))"
"(values"
" define-values484_1074"
" id485_1075"
" rhs486_1076))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_1069)))))"
"(values"
" #t"
" define-values481_1070"
" id482_1071"
" rhs483_1072))))))"
"(let-values(((exp-rhs_1067)"
"(let-values()"
"(let-values(((temp494_1102)"
" rhs483_1054)"
"((temp495_1103)"
"(as-named-context"
"(as-expression-context"
" body-ctx_1036)"
" id482_1053)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp494_1102"
" temp495_1103)"
"(expand7.1"
" temp494_1102"
" temp495_1103))))))"
"(let-values(((temp490_1104)(car bodys_1042))"
"((disarmed-body491_1105)"
" disarmed-body_1044)"
"((temp492_1106)"
"(list"
" define-values481_1052"
" id482_1053"
" exp-rhs_1067)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" temp490_1104"
" disarmed-body491_1105"
" temp492_1106)"
"(rebuild53.1"
" temp490_1104"
" disarmed-body491_1105"
" temp492_1106))))))"
"(if(if(equal? tmp_1050 'define-syntaxes)"
" #t"
"(if(equal? tmp_1050 '#%require)"
" #t"
"(if(equal? tmp_1050 '#%provide)"
" #t"
"(if(equal? tmp_1050 'begin-for-syntax)"
" #t"
"(if(equal? tmp_1050 'module)"
" #t"
"(if(equal? tmp_1050 'module*)"
" #t"
"(equal? tmp_1050 '#%declare)))))))"
"(let-values()(car bodys_1042))"
"(let-values()"
"(let-values()"
"(let-values(((temp496_1107)(car bodys_1042))"
"((temp497_1108)"
"(as-expression-context"
" body-ctx_1036)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp496_1107 temp497_1108)"
"(expand7.1"
" temp496_1107"
" temp497_1108))))))))))"
"(let-values(((lifted-defns_1046)"
"(loop_1040"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_1036)))))"
"(let-values(((lifted-requires_1047)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_1036))))"
"(let-values(((lifted-modules_1048)"
"(let-values(((...er/expand/module.rkt:814:8_1109)"
" expand-non-module*-submodules194.1)"
"((temp498_1110)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_1036)))"
"((phase499_1111) phase_1035)"
"((self500_1112) self_1037)"
"((body-ctx501_1113) body-ctx_1036)"
"((mpis-to-reset502_1114)"
" mpis-to-reset_1039)"
"((declared-submodule-names503_1115)"
" declared-submodule-names_1038))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-non-module*-submodules194.1))"
"(expand-non-module*-submodules192.1"
" declared-submodule-names503_1115"
" mpis-to-reset502_1114"
" temp498_1110"
" phase499_1111"
" self500_1112"
" body-ctx501_1113)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:814:8_1109"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:mpis-to-reset)"
" 6)"
" '(#:declared-submodule-names #:mpis-to-reset)"
"(list"
" declared-submodule-names503_1115"
" mpis-to-reset502_1114)"
" temp498_1110"
" phase499_1111"
" self500_1112"
" body-ctx501_1113)))))"
"(begin"
"(if(null? lifted-defns_1046)"
"(let-values()"
"(let-values(((obs_1116)"
"(expand-context-observer body-ctx_1036)))"
"(if obs_1116"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1116"
" 'module-lift-loop"
" lifted-defns_1046)))"
"(void))))"
"(let-values()"
"(let-values(((obs_1117)"
"(expand-context-observer body-ctx_1036)))"
"(if obs_1117"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1117"
" 'module-lift-end-loop"
"(cons exp-body_1045(cdr bodys_1042)))))"
"(void)))))"
"(append"
" lifted-requires_1047"
" lifted-defns_1046"
" lifted-modules_1048"
"(cons"
" exp-body_1045"
"(loop_1040 tail?_1041(cdr bodys_1042))))))))))))))))"
" loop_1040)"
" tail?_1034"
" partially-expanded-bodys_1033)))))))))))"
"(define-values"
"(unpack92.1)"
"(lambda(given-kws_1118 given-args_1119 partially-expanded-bodys90_1120)"
"(let-values(((ctx80_1121)(car given-args_1119))"
"((given-kws_1122)(cdr given-kws_1118))"
"((given-args_1123)(cdr given-args_1119)))"
"(let-values(((declared-submodule-names82_1124)(car given-args_1123))"
"((given-kws_1125)(cdr given-kws_1122))"
"((given-args_1126)(cdr given-args_1123)))"
"(let-values(((mpis-to-reset83_1127)(car given-args_1126))"
"((given-kws_1128)(cdr given-kws_1125))"
"((given-args_1129)(cdr given-args_1126)))"
"(let-values(((phase79_1130)(car given-args_1129))"
"((given-kws_1131)(cdr given-kws_1128))"
"((given-args_1132)(cdr given-args_1129)))"
"(let-values(((self81_1133)(car given-args_1132))"
"((given-kws_1134)(cdr given-kws_1131))"
"((given-args_1135)(cdr given-args_1132)))"
"(let-values(((tail?78_1136)(car given-args_1135)))"
"(finish-expanding-body-expressons91.1"
" ctx80_1121"
" declared-submodule-names82_1124"
" mpis-to-reset83_1127"
" phase79_1130"
" self81_1133"
" tail?78_1136"
" partially-expanded-bodys90_1120)))))))))"
"(define-values"
"(finish-expanding-body-expressons93.1)"
"(lifted/3.1"
"(lambda(given-kws_1137 given-argc_1138)"
"(if(= given-argc_1138 3)"
"(let-values(((l2_1139) given-kws_1137))"
"(if(pair? l2_1139)"
"(if(eq?(car l2_1139) '#:ctx)"
"(let-values(((l2_1140)(cdr l2_1139)))"
"(if(pair? l2_1140)"
"(if(eq?(car l2_1140) '#:declared-submodule-names)"
"(let-values(((l2_1141)(cdr l2_1140)))"
"(if(pair? l2_1141)"
"(if(eq?(car l2_1141) '#:mpis-to-reset)"
"(let-values(((l2_1142)(cdr l2_1141)))"
"(if(pair? l2_1142)"
"(if(eq?(car l2_1142) '#:phase)"
"(let-values(((l2_1143)(cdr l2_1142)))"
"(if(pair? l2_1143)"
"(if(eq?(car l2_1143) '#:self)"
"(let-values(((l2_1144)(cdr l2_1143)))"
"(if(pair? l2_1144)"
"(if(eq?(car l2_1144) '#:tail?)(null?(cdr l2_1144)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1145 given-args_1146 partially-expanded-bodys_1147)"
"(unpack92.1 given-kws_1145 given-args_1146 partially-expanded-bodys_1147)))"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_1148 self_1149)"
"(let-values(((ht_1150) need-eventually-defined_1148))"
"(begin"
"(if((lambda(ht_1151)(hash? ht_1151)) ht_1150)(void)(let-values()(default-in-hash ht_1150)))"
"((letrec-values(((for-loop_1152)"
"(lambda(fold-var_1153 i_1154)"
"(if i_1154"
"(let-values(((phase_1155 l_1156)(hash-iterate-key+value ht_1150 i_1154)))"
"(let-values(((fold-var_1157)"
"(let-values(((fold-var_1158) fold-var_1153))"
"(let-values(((fold-var_1159)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_1160) l_1156))"
"(begin"
"(if(list? lst_1160)"
"(void)"
"(let-values()(in-list lst_1160)))"
"((letrec-values(((for-loop_1161)"
"(lambda(fold-var_1162"
" lst_1163)"
"(if(pair? lst_1163)"
"(let-values(((id_1164)"
"(unsafe-car"
" lst_1163)))"
"(let-values(((fold-var_1165)"
"(let-values(((fold-var_1166)"
" fold-var_1162))"
"(let-values(((fold-var_1167)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1168)"
"(let-values(((id504_1169)"
" id_1164)"
"((phase505_1170)"
" phase_1155))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id504_1169"
" phase505_1170)"
"(resolve+shift22.1"
" id504_1169"
" phase505_1170)))))"
"(if(if b_1168"
"(if(module-binding?"
" b_1168)"
"(if(eq?"
"(module-binding-sym"
" b_1168)"
"(syntax-e$1"
" id_1164))"
"(eq?"
"(module-binding-module"
" b_1168)"
" self_1149)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"reference to an unbound identifier\""
" id_1164)))))"
"(void)))))"
"(values"
" fold-var_1167)))))"
"(for-loop_1161"
" fold-var_1165"
"(unsafe-cdr"
" lst_1163))))"
" fold-var_1162))))"
" for-loop_1161)"
"(void)"
" lst_1160))))"
"(void)))))"
"(values fold-var_1159)))))"
"(for-loop_1152 fold-var_1157(hash-iterate-next ht_1150 i_1154))))"
" fold-var_1153))))"
" for-loop_1152)"
"(void)"
"(hash-iterate-first ht_1150))))))"
"(define-values"
"(lifted/4.1)"
"(make-required"
" 'resolve-provides"
"(case-lambda"
"((self_1171 expression-expanded-bodys_1172)(apply missing-kw self_1171 expression-expanded-bodys_1172 null)))"
" #f"
" #f))"
"(define-values"
"(resolve-provides109.1)"
"(lambda(ctx100_1173"
" declared-submodule-names96_1174"
" namespace97_1175"
" original94_1176"
" phase98_1177"
" requires-and-provides95_1178"
" self99_1179"
" expression-expanded-bodys108_1180)"
"(let-values(((expression-expanded-bodys_1181) expression-expanded-bodys108_1180))"
"(let-values(((s_1182) original94_1176))"
"(let-values(((requires+provides_1183) requires-and-provides95_1178))"
"(let-values(((declared-submodule-names_1184) declared-submodule-names96_1174))"
"(let-values(((m-ns_1185) namespace97_1175))"
"(let-values(((phase_1186) phase98_1177))"
"(let-values(((self_1187) self99_1179))"
"(let-values(((ctx_1188) ctx100_1173))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_1189)"
"(lambda(bodys_1190 phase_1191)"
"(if(null? bodys_1190)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1192)(syntax-disarm$1(car bodys_1190))))"
"(let-values(((tmp_1193)"
"(core-form-sym disarmed-body_1192 phase_1191)))"
"(if(equal? tmp_1193 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1209)"
"(expand-context-observer"
" ctx_1188)))"
"(if obs_1209"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1209"
" 'enter-prim"
"(car bodys_1190))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1210)"
"(expand-context-observer"
" ctx_1188)))"
"(if obs_1210"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1210"
" 'enter-prim-provide)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1194 #%provide506_1195 spec507_1196)"
"(let-values(((s_1211) disarmed-body_1192))"
"(let-values(((orig-s_1212) s_1211))"
"(let-values(((#%provide506_1213"
" spec507_1214)"
"(let-values(((s_1215)"
"(if(syntax?$1"
" s_1211)"
"(syntax-e$1"
" s_1211)"
" s_1211)))"
"(if(pair? s_1215)"
"(let-values(((#%provide508_1216)"
"(let-values(((s_1218)"
"(car"
" s_1215)))"
" s_1218))"
"((spec509_1217)"
"(let-values(((s_1219)"
"(cdr"
" s_1215)))"
"(let-values(((s_1220)"
"(if(syntax?$1"
" s_1219)"
"(syntax-e$1"
" s_1219)"
" s_1219)))"
"(let-values(((flat-s_1221)"
"(to-syntax-list.1"
" s_1220)))"
"(if(not"
" flat-s_1221)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1212))"
"(let-values()"
" flat-s_1221)))))))"
"(values"
" #%provide508_1216"
" spec509_1217))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_1212)))))"
"(values"
" #t"
" #%provide506_1213"
" spec507_1214))))))"
"(let-values(((track-stxes_1207 specs_1208)"
"(parse-and-expand-provides!"
" spec507_1196"
"(car bodys_1190)"
" requires+provides_1183"
" self_1187"
" phase_1191"
"(let-values(((the-struct_1222) ctx_1188))"
"(if(expand-context? the-struct_1222)"
"(let-values(((context510_1223)"
" 'top-level)"
"((phase511_1224)"
" phase_1191)"
"((namespace512_1225)"
"(namespace->namespace-at-phase"
" m-ns_1185"
" phase_1191))"
"((requires+provides513_1226)"
" requires+provides_1183)"
"((declared-submodule-names514_1227)"
" declared-submodule-names_1184))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1222)"
"(root-expand-context-post-expansion-scope"
" the-struct_1222)"
"(root-expand-context-top-level-bind-scope"
" the-struct_1222)"
"(root-expand-context-all-scopes-stx"
" the-struct_1222)"
"(root-expand-context-use-site-scopes"
" the-struct_1222)"
"(root-expand-context-defined-syms"
" the-struct_1222)"
"(root-expand-context-frame-id"
" the-struct_1222)"
"(root-expand-context-counter"
" the-struct_1222)"
"(root-expand-context-lift-key"
" the-struct_1222)"
" context510_1223"
" phase511_1224"
" namespace512_1225"
"(expand-context-env the-struct_1222)"
"(expand-context-user-env"
" the-struct_1222)"
"(expand-context-post-expansion-scope-action"
" the-struct_1222)"
"(expand-context-scopes"
" the-struct_1222)"
"(expand-context-def-ctx-scopes"
" the-struct_1222)"
"(expand-context-binding-layer"
" the-struct_1222)"
"(expand-context-reference-records"
" the-struct_1222)"
"(expand-context-only-immediate?"
" the-struct_1222)"
"(expand-context-just-once?"
" the-struct_1222)"
"(expand-context-module-begin-k"
" the-struct_1222)"
"(expand-context-need-eventually-defined"
" the-struct_1222)"
"(expand-context-allow-unbound?"
" the-struct_1222)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1222)"
"(expand-context-stops"
" the-struct_1222)"
"(expand-context-current-introduction-scopes"
" the-struct_1222)"
" declared-submodule-names514_1227"
"(expand-context-lifts"
" the-struct_1222)"
"(expand-context-lift-envs"
" the-struct_1222)"
"(expand-context-module-lifts"
" the-struct_1222)"
"(expand-context-require-lifts"
" the-struct_1222)"
"(expand-context-to-module-lifts"
" the-struct_1222)"
" requires+provides513_1226"
"(expand-context-name"
" the-struct_1222)"
"(expand-context-observer"
" the-struct_1222)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                  \"expand-context?\""
" the-struct_1222))))))"
"(begin"
"(let-values(((obs_1228)"
"(expand-context-observer ctx_1188)))"
"(if obs_1228"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1228 'exit-prim)))"
"(void)))"
"(cons"
"(syntax-track-origin*"
" track-stxes_1207"
"(let-values(((temp515_1229)(car bodys_1190))"
"((disarmed-body516_1230)"
" disarmed-body_1192)"
"((temp517_1231)"
"(list* #%provide506_1195 specs_1208)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" temp515_1229"
" disarmed-body516_1230"
" temp517_1231)"
"(rebuild53.1"
" temp515_1229"
" disarmed-body516_1230"
" temp517_1231))))"
"(loop_1189(cdr bodys_1190) phase_1191))))))))"
"(if(equal? tmp_1193 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1232 begin-for-syntax518_1233 e519_1234)"
"(let-values(((s_1246) disarmed-body_1192))"
"(let-values(((orig-s_1247) s_1246))"
"(let-values(((begin-for-syntax518_1248"
" e519_1249)"
"(let-values(((s_1250)"
"(if(syntax?$1"
" s_1246)"
"(syntax-e$1"
" s_1246)"
" s_1246)))"
"(if(pair? s_1250)"
"(let-values(((begin-for-syntax520_1251)"
"(let-values(((s_1253)"
"(car"
" s_1250)))"
" s_1253))"
"((e521_1252)"
"(let-values(((s_1254)"
"(cdr"
" s_1250)))"
"(let-values(((s_1255)"
"(if(syntax?$1"
" s_1254)"
"(syntax-e$1"
" s_1254)"
" s_1254)))"
"(let-values(((flat-s_1256)"
"(to-syntax-list.1"
" s_1255)))"
"(if(not"
" flat-s_1256)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_1247))"
"(let-values()"
" flat-s_1256)))))))"
"(values"
" begin-for-syntax520_1251"
" e521_1252))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_1247)))))"
"(values"
" #t"
" begin-for-syntax518_1248"
" e519_1249))))))"
"(let-values(((nested-bodys_1245)"
"(loop_1189 e519_1234(add1 phase_1191))))"
"(cons"
"(let-values(((temp522_1257)(car bodys_1190))"
"((disarmed-body523_1258) disarmed-body_1192)"
"((temp524_1259)"
"(list*"
" begin-for-syntax518_1233"
" nested-bodys_1245)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" temp522_1257"
" disarmed-body523_1258"
" temp524_1259)"
"(rebuild53.1"
" temp522_1257"
" disarmed-body523_1258"
" temp524_1259)))"
"(loop_1189(cdr bodys_1190) phase_1191)))))"
"(let-values()"
"(cons"
"(car bodys_1190)"
"(loop_1189(cdr bodys_1190) phase_1191))))))))))))"
" loop_1189)"
" expression-expanded-bodys_1181"
" phase_1186)))))))))))))"
"(define-values"
"(unpack110.1)"
"(lambda(given-kws_1260 given-args_1261 expression-expanded-bodys108_1262)"
"(let-values(((ctx100_1263)(car given-args_1261))"
"((given-kws_1264)(cdr given-kws_1260))"
"((given-args_1265)(cdr given-args_1261)))"
"(let-values(((declared-submodule-names96_1266)(car given-args_1265))"
"((given-kws_1267)(cdr given-kws_1264))"
"((given-args_1268)(cdr given-args_1265)))"
"(let-values(((namespace97_1269)(car given-args_1268))"
"((given-kws_1270)(cdr given-kws_1267))"
"((given-args_1271)(cdr given-args_1268)))"
"(let-values(((original94_1272)(car given-args_1271))"
"((given-kws_1273)(cdr given-kws_1270))"
"((given-args_1274)(cdr given-args_1271)))"
"(let-values(((phase98_1275)(car given-args_1274))"
"((given-kws_1276)(cdr given-kws_1273))"
"((given-args_1277)(cdr given-args_1274)))"
"(let-values(((requires-and-provides95_1278)(car given-args_1277))"
"((given-kws_1279)(cdr given-kws_1276))"
"((given-args_1280)(cdr given-args_1277)))"
"(let-values(((self99_1281)(car given-args_1280)))"
"(resolve-provides109.1"
" ctx100_1263"
" declared-submodule-names96_1266"
" namespace97_1269"
" original94_1272"
" phase98_1275"
" requires-and-provides95_1278"
" self99_1281"
" expression-expanded-bodys108_1262))))))))))"
"(define-values"
"(resolve-provides111.1)"
"(lifted/4.1"
"(lambda(given-kws_1282 given-argc_1283)"
"(if(= given-argc_1283 3)"
"(let-values(((l2_1284) given-kws_1282))"
"(if(pair? l2_1284)"
"(if(eq?(car l2_1284) '#:ctx)"
"(let-values(((l2_1285)(cdr l2_1284)))"
"(if(pair? l2_1285)"
"(if(eq?(car l2_1285) '#:declared-submodule-names)"
"(let-values(((l2_1286)(cdr l2_1285)))"
"(if(pair? l2_1286)"
"(if(eq?(car l2_1286) '#:namespace)"
"(let-values(((l2_1287)(cdr l2_1286)))"
"(if(pair? l2_1287)"
"(if(eq?(car l2_1287) '#:original)"
"(let-values(((l2_1288)(cdr l2_1287)))"
"(if(pair? l2_1288)"
"(if(eq?(car l2_1288) '#:phase)"
"(let-values(((l2_1289)(cdr l2_1288)))"
"(if(pair? l2_1289)"
"(if(eq?(car l2_1289) '#:requires-and-provides)"
"(let-values(((l2_1290)(cdr l2_1289)))"
"(if(pair? l2_1290)"
"(if(eq?(car l2_1290) '#:self)(null?(cdr l2_1290)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1291 given-args_1292 expression-expanded-bodys_1293)"
"(unpack110.1 given-kws_1291 given-args_1292 expression-expanded-bodys_1293)))"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/5.1)"
"(make-required"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_1294 fully-expanded-bodys-except-post-submodules_1295)"
"(apply missing-kw self_1294 fully-expanded-bodys-except-post-submodules_1295 null)))"
" #f"
" #f))"
"(define-values"
"(declare-module-for-expansion129.1)"
"(lambda(enclosing118_1296"
" module-begin-id114_1297"
" module-intial-require113_1298"
" module-name-id112_1299"
" namespace116_1300"
" requires-and-provides115_1301"
" root-ctx119_1302"
" self117_1303"
" fully-expanded-bodys-except-post-submodules128_1304)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1305)"
" fully-expanded-bodys-except-post-submodules128_1304))"
"(let-values(((module-name-id_1306) module-name-id112_1299))"
"(let-values(((module-initial-require_1307) module-intial-require113_1298))"
"(let-values(((module-begin-id_1308) module-begin-id114_1297))"
"(let-values(((requires+provides_1309) requires-and-provides115_1301))"
"(let-values(((m-ns_1310) namespace116_1300))"
"(let-values(((self_1311) self117_1303))"
"(let-values(((enclosing-self_1312) enclosing118_1296))"
"(let-values(((root-ctx_1313) root-ctx119_1302))"
"(let-values()"
"(let-values(((tmp-mod_1314)"
"(attach-root-expand-context-properties"
"(attach-require-provide-properties"
" requires+provides_1309"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1 core-stx 'module)"
" module-name-id_1306"
" module-initial-require_1307"
"(list*"
" module-begin-id_1308"
" fully-expanded-bodys-except-post-submodules_1305)))"
" self_1311"
" self_1311)"
" root-ctx_1313"
" self_1311"
" self_1311)))"
"(let-values(((module-name_1315)"
"(1/module-path-index-resolve"
"(let-values(((or-part_1317) enclosing-self_1312))"
"(if or-part_1317 or-part_1317 self_1311)))))"
"(let-values(((root-module-name_1316)(resolved-module-path-root-name module-name_1315)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1310"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1316))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:924:4_1318) eval-module10.1)"
"((temp525_1319)"
"(let-values(((...er/expand/module.rkt:925:5_1321) compile-module17.1)"
"((tmp-mod527_1322) tmp-mod_1314)"
"((temp528_1323)"
"(let-values(((...er/expand/module.rkt:926:21_1326)"
" make-compile-context18.1)"
"((m-ns531_1327) m-ns_1310)"
"((enclosing-self532_1328) enclosing-self_1312)"
"((temp533_1329)"
"(if enclosing-self_1312"
"(1/resolved-module-path-name"
" module-name_1315)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context18.1))"
"(make-compile-context16.1"
" temp533_1329"
" #t"
" #f"
" #f"
" enclosing-self532_1328"
" #t"
" m-ns531_1327"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:926:21_1326"
" keyword-procedure-extract"
" '(#:full-module-name #:module-self #:namespace)"
" 2)"
" '(#:full-module-name #:module-self #:namespace)"
"(list"
" temp533_1329"
" enclosing-self532_1328"
" m-ns531_1327)))))"
"((self529_1324) self_1311)"
"((temp530_1325) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module17.1))"
"(compile-module15.1"
" #f"
" #f"
" #f"
" #f"
" self529_1324"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp530_1325"
" #t"
" tmp-mod527_1322"
" temp528_1323)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:925:5_1321"
" keyword-procedure-extract"
" '(#:self #:with-submodules?)"
" 4)"
" '(#:self #:with-submodules?)"
"(list self529_1324 temp530_1325)"
" tmp-mod527_1322"
" temp528_1323))))"
"((temp526_1320) #f))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 #f #f #f #f temp526_1320 #t temp525_1319)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:924:4_1318"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 3)"
" '(#:with-submodules?)"
"(list temp526_1320)"
" temp525_1319))))))))))))))))))))"
"(define-values"
"(unpack130.1)"
"(lambda(given-kws_1330 given-args_1331 fully-expanded-bodys-except-post-submodules128_1332)"
"(let-values(((enclosing118_1333)(car given-args_1331))"
"((given-kws_1334)(cdr given-kws_1330))"
"((given-args_1335)(cdr given-args_1331)))"
"(let-values(((module-begin-id114_1336)(car given-args_1335))"
"((given-kws_1337)(cdr given-kws_1334))"
"((given-args_1338)(cdr given-args_1335)))"
"(let-values(((module-intial-require113_1339)(car given-args_1338))"
"((given-kws_1340)(cdr given-kws_1337))"
"((given-args_1341)(cdr given-args_1338)))"
"(let-values(((module-name-id112_1342)(car given-args_1341))"
"((given-kws_1343)(cdr given-kws_1340))"
"((given-args_1344)(cdr given-args_1341)))"
"(let-values(((namespace116_1345)(car given-args_1344))"
"((given-kws_1346)(cdr given-kws_1343))"
"((given-args_1347)(cdr given-args_1344)))"
"(let-values(((requires-and-provides115_1348)(car given-args_1347))"
"((given-kws_1349)(cdr given-kws_1346))"
"((given-args_1350)(cdr given-args_1347)))"
"(let-values(((root-ctx119_1351)(car given-args_1350))"
"((given-kws_1352)(cdr given-kws_1349))"
"((given-args_1353)(cdr given-args_1350)))"
"(let-values(((self117_1354)(car given-args_1353)))"
"(declare-module-for-expansion129.1"
" enclosing118_1333"
" module-begin-id114_1336"
" module-intial-require113_1339"
" module-name-id112_1342"
" namespace116_1345"
" requires-and-provides115_1348"
" root-ctx119_1351"
" self117_1354"
" fully-expanded-bodys-except-post-submodules128_1332)))))))))))"
"(define-values"
"(declare-module-for-expansion131.1)"
"(lifted/5.1"
"(lambda(given-kws_1355 given-argc_1356)"
"(if(= given-argc_1356 3)"
"(let-values(((l2_1357) given-kws_1355))"
"(if(pair? l2_1357)"
"(if(eq?(car l2_1357) '#:enclosing)"
"(let-values(((l2_1358)(cdr l2_1357)))"
"(if(pair? l2_1358)"
"(if(eq?(car l2_1358) '#:module-begin-id)"
"(let-values(((l2_1359)(cdr l2_1358)))"
"(if(pair? l2_1359)"
"(if(eq?(car l2_1359) '#:module-intial-require)"
"(let-values(((l2_1360)(cdr l2_1359)))"
"(if(pair? l2_1360)"
"(if(eq?(car l2_1360) '#:module-name-id)"
"(let-values(((l2_1361)(cdr l2_1360)))"
"(if(pair? l2_1361)"
"(if(eq?(car l2_1361) '#:namespace)"
"(let-values(((l2_1362)(cdr l2_1361)))"
"(if(pair? l2_1362)"
"(if(eq?(car l2_1362) '#:requires-and-provides)"
"(let-values(((l2_1363)(cdr l2_1362)))"
"(if(pair? l2_1363)"
"(if(eq?(car l2_1363) '#:root-ctx)"
"(let-values(((l2_1364)(cdr l2_1363)))"
"(if(pair? l2_1364)"
"(if(eq?(car l2_1364) '#:self)(null?(cdr l2_1364)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1365 given-args_1366 fully-expanded-bodys-except-post-submodules_1367)"
"(unpack130.1 given-kws_1365 given-args_1366 fully-expanded-bodys-except-post-submodules_1367)))"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_1368 root-ctx_1369 orig-self_1370 new-self_1371)"
"(let-values(((s_1372)"
"(syntax-property$1"
" s_1368"
" 'module-root-expand-context"
"(root-expand-context-encode-for-module root-ctx_1369 orig-self_1370 new-self_1371))))"
"(let-values(((s_1373)"
"(syntax-property$1 s_1372 'module-body-context(root-expand-context-all-scopes-stx root-ctx_1369))))"
"(let-values(((s_1374)"
"(syntax-property$1"
" s_1373"
" 'module-body-inside-context"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope root-ctx_1369)))))"
" s_1374)))))"
"(define-values"
"(lifted/6.1)"
"(make-required"
" 'expand-post-submodules"
"(case-lambda"
"((self_1375 fully-expanded-bodys-except-post-submodules_1376)"
"(apply missing-kw self_1375 fully-expanded-bodys-except-post-submodules_1376 null)))"
" #f"
" #f))"
"(define-values"
"(expand-post-submodules153.1)"
"(lambda(all-scopes-s138_1377"
" ctx141_1378"
" declare-enclosing132_1379"
" declared-submodule-names140_1380"
" enclosing-is-cross-phase-persistent?137_1381"
" mpis-to-reset139_1382"
" original133_1383"
" phase134_1384"
" requires-and-provides136_1385"
" self135_1386"
" fully-expanded-bodys-except-post-submodules152_1387)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1388)"
" fully-expanded-bodys-except-post-submodules152_1387))"
"(let-values(((declare-enclosing-module_1389) declare-enclosing132_1379))"
"(let-values(((s_1390) original133_1383))"
"(let-values(((phase_1391) phase134_1384))"
"(let-values(((self_1392) self135_1386))"
"(let-values(((requires+provides_1393) requires-and-provides136_1385))"
"(let-values(((enclosing-is-cross-phase-persistent?_1394) enclosing-is-cross-phase-persistent?137_1381))"
"(let-values(((all-scopes-s_1395) all-scopes-s138_1377))"
"(let-values(((mpis-to-reset_1396) mpis-to-reset139_1382))"
"(let-values(((declared-submodule-names_1397) declared-submodule-names140_1380))"
"(let-values(((submod-ctx_1398) ctx141_1378))"
"(let-values()"
"((letrec-values(((loop_1399)"
"(lambda(bodys_1400 phase_1401)"
"(if(null? bodys_1400)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1402)"
"(syntax-disarm$1(car bodys_1400))))"
"(let-values(((tmp_1403)"
"(core-form-sym disarmed-body_1402 phase_1401)))"
"(if(equal? tmp_1403 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force declare-enclosing-module_1389)"
"(values))))"
"(let-values(((ready-body_1404)"
"(remove-use-site-scopes"
"(car bodys_1400)"
" submod-ctx_1398)))"
"(let-values(((ok?_1405"
" module*534_1406"
" name535_1407"
" _536_1408)"
"(let-values(((s_1422)"
" disarmed-body_1402))"
"(if(let-values(((s_1423)"
"(if(syntax?$1 s_1422)"
"(syntax-e$1 s_1422)"
" s_1422)))"
"(if(pair? s_1423)"
"(if(let-values(((s_1424)"
"(car s_1423)))"
" #t)"
"(let-values(((s_1425)"
"(cdr s_1423)))"
"(let-values(((s_1426)"
"(if(syntax?$1"
" s_1425)"
"(syntax-e$1"
" s_1425)"
" s_1425)))"
"(if(pair? s_1426)"
"(if(let-values(((s_1427)"
"(car"
" s_1426)))"
" #t)"
"(let-values(((s_1428)"
"(cdr"
" s_1426)))"
"(let-values(((s_1429)"
"(if(syntax?$1"
" s_1428)"
"(syntax-e$1"
" s_1428)"
" s_1428)))"
"(if(pair? s_1429)"
"(if(let-values(((s_1430)"
"(car"
" s_1429)))"
"(let-values(((s_1431)"
"(if(syntax?$1"
" s_1430)"
"(syntax-e$1"
" s_1430)"
" s_1430)))"
"(eq?"
" #f"
" s_1431)))"
"(let-values(((s_1432)"
"(cdr"
" s_1429)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_1433) s_1422))"
"(let-values(((module*534_1434"
" name535_1435"
" _536_1436)"
"(let-values(((s_1437)"
"(if(syntax?$1"
" s_1422)"
"(syntax-e$1"
" s_1422)"
" s_1422)))"
"(let-values(((module*537_1438)"
"(let-values(((s_1441)"
"(car"
" s_1437)))"
" s_1441))"
"((name538_1439"
" _539_1440)"
"(let-values(((s_1442)"
"(cdr"
" s_1437)))"
"(let-values(((s_1443)"
"(if(syntax?$1"
" s_1442)"
"(syntax-e$1"
" s_1442)"
" s_1442)))"
"(let-values(((name540_1444)"
"(let-values(((s_1446)"
"(car"
" s_1443)))"
" s_1446))"
"((_541_1445)"
"(let-values(((s_1447)"
"(cdr"
" s_1443)))"
"(let-values(((s_1448)"
"(if(syntax?$1"
" s_1447)"
"(syntax-e$1"
" s_1447)"
" s_1447)))"
"(let-values((()"
"(let-values(((s_1450)"
"(car"
" s_1448)))"
"(let-values(((s_1451)"
"(if(syntax?$1"
" s_1450)"
"(syntax-e$1"
" s_1450)"
" s_1450)))"
"(values))))"
"((_542_1449)"
"(let-values(((s_1452)"
"(cdr"
" s_1448)))"
" s_1452)))"
"(values"
" _542_1449))))))"
"(values"
" name540_1444"
" _541_1445))))))"
"(values"
" module*537_1438"
" name538_1439"
" _539_1440)))))"
"(values"
" #t"
" module*534_1434"
" name535_1435"
" _536_1436)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_1421)"
"(if ok?_1405"
"(let-values()"
"(let-values(((neg-phase_1453)"
"(phase-"
" 0"
" phase_1401)))"
"(let-values(((shifted-s_1454)"
"(syntax-shift-phase-level$1"
" ready-body_1404"
" neg-phase_1453)))"
"(let-values(((submod_1455)"
"(let-values(((...er/expand/module.rkt:981:15_1456)"
" expand-submodule183.1)"
"((shifted-s543_1457)"
" shifted-s_1454)"
"((self544_1458)"
" self_1392)"
"((submod-ctx545_1459)"
" submod-ctx_1398)"
"((temp546_1460)"
" #t)"
"((neg-phase547_1461)"
" neg-phase_1453)"
"((all-scopes-s548_1462)"
" all-scopes-s_1395)"
"((requires+provides549_1463)"
" requires+provides_1393)"
"((enclosing-is-cross-phase-persistent?550_1464)"
" enclosing-is-cross-phase-persistent?_1394)"
"((mpis-to-reset551_1465)"
" mpis-to-reset_1396)"
"((declared-submodule-names552_1466)"
" declared-submodule-names_1397))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names552_1466"
" all-scopes-s548_1462"
" #t"
" enclosing-is-cross-phase-persistent?550_1464"
" #t"
" requires+provides549_1463"
" #t"
" temp546_1460"
" neg-phase547_1461"
" #t"
" mpis-to-reset551_1465"
" shifted-s543_1457"
" self544_1458"
" submod-ctx545_1459)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:981:15_1456"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names552_1466"
" all-scopes-s548_1462"
" enclosing-is-cross-phase-persistent?550_1464"
" requires+provides549_1463"
" temp546_1460"
" neg-phase547_1461"
" mpis-to-reset551_1465)"
" shifted-s543_1457"
" self544_1458"
" submod-ctx545_1459)))))"
"(syntax-shift-phase-level$1"
" submod_1455"
" phase_1401)))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:991:13_1467)"
" expand-submodule183.1)"
"((ready-body553_1468)"
" ready-body_1404)"
"((self554_1469)"
" self_1392)"
"((submod-ctx555_1470)"
" submod-ctx_1398)"
"((temp556_1471) #t)"
"((mpis-to-reset557_1472)"
" mpis-to-reset_1396)"
"((declared-submodule-names558_1473)"
" declared-submodule-names_1397))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names558_1473"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp556_1471"
" #f"
" #f"
" mpis-to-reset557_1472"
" ready-body553_1468"
" self554_1469"
" submod-ctx555_1470)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:991:13_1467"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names558_1473"
" temp556_1471"
" mpis-to-reset557_1472)"
" ready-body553_1468"
" self554_1469"
" submod-ctx555_1470)))))))"
"(cons"
" submod_1421"
"(loop_1399(cdr bodys_1400) phase_1401)))))))"
"(if(equal? tmp_1403 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1474"
" begin-for-syntax559_1475"
" e560_1476)"
"(let-values(((s_1488) disarmed-body_1402))"
"(let-values(((orig-s_1489) s_1488))"
"(let-values(((begin-for-syntax559_1490"
" e560_1491)"
"(let-values(((s_1492)"
"(if(syntax?$1"
" s_1488)"
"(syntax-e$1"
" s_1488)"
" s_1488)))"
"(if(pair? s_1492)"
"(let-values(((begin-for-syntax561_1493)"
"(let-values(((s_1495)"
"(car"
" s_1492)))"
" s_1495))"
"((e562_1494)"
"(let-values(((s_1496)"
"(cdr"
" s_1492)))"
"(let-values(((s_1497)"
"(if(syntax?$1"
" s_1496)"
"(syntax-e$1"
" s_1496)"
" s_1496)))"
"(let-values(((flat-s_1498)"
"(to-syntax-list.1"
" s_1497)))"
"(if(not"
" flat-s_1498)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1489))"
"(let-values()"
" flat-s_1498)))))))"
"(values"
" begin-for-syntax561_1493"
" e562_1494))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_1489)))))"
"(values"
" #t"
" begin-for-syntax559_1490"
" e560_1491))))))"
"(let-values(((nested-bodys_1487)"
"(loop_1399 e560_1476(add1 phase_1401))))"
"(cons"
"(let-values(((temp563_1499)(car bodys_1400))"
"((disarmed-body564_1500)"
" disarmed-body_1402)"
"((temp565_1501)"
"(list*"
" begin-for-syntax559_1475"
" nested-bodys_1487)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" temp563_1499"
" disarmed-body564_1500"
" temp565_1501)"
"(rebuild53.1"
" temp563_1499"
" disarmed-body564_1500"
" temp565_1501)))"
"(loop_1399(cdr bodys_1400) phase_1401)))))"
"(let-values()"
"(cons"
"(car bodys_1400)"
"(loop_1399(cdr bodys_1400) phase_1401))))))))))))"
" loop_1399)"
" fully-expanded-bodys-except-post-submodules_1388"
" phase_1391)))))))))))))))"
"(define-values"
"(unpack154.1)"
"(lambda(given-kws_1502 given-args_1503 fully-expanded-bodys-except-post-submodules152_1504)"
"(let-values(((all-scopes-s138_1505)(car given-args_1503))"
"((given-kws_1506)(cdr given-kws_1502))"
"((given-args_1507)(cdr given-args_1503)))"
"(let-values(((ctx141_1508)(car given-args_1507))"
"((given-kws_1509)(cdr given-kws_1506))"
"((given-args_1510)(cdr given-args_1507)))"
"(let-values(((declare-enclosing132_1511)(car given-args_1510))"
"((given-kws_1512)(cdr given-kws_1509))"
"((given-args_1513)(cdr given-args_1510)))"
"(let-values(((declared-submodule-names140_1514)(car given-args_1513))"
"((given-kws_1515)(cdr given-kws_1512))"
"((given-args_1516)(cdr given-args_1513)))"
"(let-values(((enclosing-is-cross-phase-persistent?137_1517)(car given-args_1516))"
"((given-kws_1518)(cdr given-kws_1515))"
"((given-args_1519)(cdr given-args_1516)))"
"(let-values(((mpis-to-reset139_1520)(car given-args_1519))"
"((given-kws_1521)(cdr given-kws_1518))"
"((given-args_1522)(cdr given-args_1519)))"
"(let-values(((original133_1523)(car given-args_1522))"
"((given-kws_1524)(cdr given-kws_1521))"
"((given-args_1525)(cdr given-args_1522)))"
"(let-values(((phase134_1526)(car given-args_1525))"
"((given-kws_1527)(cdr given-kws_1524))"
"((given-args_1528)(cdr given-args_1525)))"
"(let-values(((requires-and-provides136_1529)(car given-args_1528))"
"((given-kws_1530)(cdr given-kws_1527))"
"((given-args_1531)(cdr given-args_1528)))"
"(let-values(((self135_1532)(car given-args_1531)))"
"(expand-post-submodules153.1"
" all-scopes-s138_1505"
" ctx141_1508"
" declare-enclosing132_1511"
" declared-submodule-names140_1514"
" enclosing-is-cross-phase-persistent?137_1517"
" mpis-to-reset139_1520"
" original133_1523"
" phase134_1526"
" requires-and-provides136_1529"
" self135_1532"
" fully-expanded-bodys-except-post-submodules152_1504)))))))))))))"
"(define-values"
"(expand-post-submodules155.1)"
"(lifted/6.1"
"(lambda(given-kws_1533 given-argc_1534)"
"(if(= given-argc_1534 3)"
"(let-values(((l2_1535) given-kws_1533))"
"(if(pair? l2_1535)"
"(if(eq?(car l2_1535) '#:all-scopes-s)"
"(let-values(((l2_1536)(cdr l2_1535)))"
"(if(pair? l2_1536)"
"(if(eq?(car l2_1536) '#:ctx)"
"(let-values(((l2_1537)(cdr l2_1536)))"
"(if(pair? l2_1537)"
"(if(eq?(car l2_1537) '#:declare-enclosing)"
"(let-values(((l2_1538)(cdr l2_1537)))"
"(if(pair? l2_1538)"
"(if(eq?(car l2_1538) '#:declared-submodule-names)"
"(let-values(((l2_1539)(cdr l2_1538)))"
"(if(pair? l2_1539)"
"(if(eq?(car l2_1539) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1540)(cdr l2_1539)))"
"(if(pair? l2_1540)"
"(if(eq?(car l2_1540) '#:mpis-to-reset)"
"(let-values(((l2_1541)(cdr l2_1540)))"
"(if(pair? l2_1541)"
"(if(eq?(car l2_1541) '#:original)"
"(let-values(((l2_1542)(cdr l2_1541)))"
"(if(pair? l2_1542)"
"(if(eq?(car l2_1542) '#:phase)"
"(let-values(((l2_1543)(cdr l2_1542)))"
"(if(pair? l2_1543)"
"(if(eq?(car l2_1543) '#:requires-and-provides)"
"(let-values(((l2_1544)(cdr l2_1543)))"
"(if(pair? l2_1544)"
"(if(eq?(car l2_1544) '#:self)"
"(null?(cdr l2_1544))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1545 given-args_1546 fully-expanded-bodys-except-post-submodules_1547)"
"(unpack154.1 given-kws_1545 given-args_1546 fully-expanded-bodys-except-post-submodules_1547)))"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1548)"
"(free-id-set-member?"
"(expand-context-stops ctx_1548)"
"(expand-context-phase ctx_1548)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_1548)))))"
"(define-values"
"(lifted/7.1)"
"(make-required"
" 'check-ids-unbound"
"(case-lambda"
"((self_1549 ids_1550 phase_1551 requires+provides_1552)"
"(apply missing-kw self_1549 ids_1550 phase_1551 requires+provides_1552 null)))"
" #f"
" #f))"
"(define-values"
"(check-ids-unbound161.1)"
"(lambda(in156_1553 ids158_1554 phase159_1555 requires+provides160_1556)"
"(let-values(((ids_1557) ids158_1554))"
"(let-values(((phase_1558) phase159_1555))"
"(let-values(((requires+provides_1559) requires+provides160_1556))"
"(let-values(((s_1560) in156_1553))"
"(let-values()"
"(let-values(((lst_1561) ids_1557))"
"(begin"
"(if(list? lst_1561)(void)(let-values()(in-list lst_1561)))"
"((letrec-values(((for-loop_1562)"
"(lambda(fold-var_1563 lst_1564)"
"(if(pair? lst_1564)"
"(let-values(((id_1565)(unsafe-car lst_1564)))"
"(let-values(((fold-var_1566)"
"(let-values(((fold-var_1567) fold-var_1563))"
"(let-values(((fold-var_1568)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1016:4_1569)"
" check-not-defined89.1)"
"((requires+provides566_1570)"
" requires+provides_1559)"
"((id567_1571) id_1565)"
"((phase568_1572) phase_1558)"
"((s569_1573) s_1560)"
"((temp570_1574) 'module))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined89.1))"
"(check-not-defined87.1"
" #f"
" #f"
" #f"
" #f"
" s569_1573"
" #f"
" #f"
" #f"
" #f"
" temp570_1574"
" requires+provides566_1570"
" id567_1571"
" phase568_1572)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1016:4_1569"
" keyword-procedure-extract"
" '(#:in #:who)"
" 5)"
" '(#:in #:who)"
"(list s569_1573 temp570_1574)"
" requires+provides566_1570"
" id567_1571"
" phase568_1572))))"
"(void)))))"
"(values fold-var_1568)))))"
"(for-loop_1562 fold-var_1566(unsafe-cdr lst_1564))))"
" fold-var_1563))))"
" for-loop_1562)"
"(void)"
" lst_1561))))))))))"
"(define-values"
"(unpack162.1)"
"(lambda(given-kws_1575 given-args_1576 ids158_1577 phase159_1578 requires+provides160_1579)"
"(let-values(((in156_1580)(car given-args_1576)))"
"(check-ids-unbound161.1 in156_1580 ids158_1577 phase159_1578 requires+provides160_1579))))"
"(define-values"
"(check-ids-unbound163.1)"
"(lifted/7.1"
"(lambda(given-kws_1581 given-argc_1582)"
"(if(= given-argc_1582 5)"
"(let-values(((l2_1583) given-kws_1581))"
"(if(pair? l2_1583)(if(eq?(car l2_1583) '#:in)(null?(cdr l2_1583)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1584 given-args_1585 ids_1586 phase_1587 requires+provides_1588)"
"(unpack162.1 given-kws_1584 given-args_1585 ids_1586 phase_1587 requires+provides_1588)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1589 phase_1590 m-ns_1591 self_1592 ctx_1593)"
"(let-values(((lst_1594) bodys_1589))"
"(begin"
"(if(list? lst_1594)(void)(let-values()(in-list lst_1594)))"
"((letrec-values(((for-loop_1595)"
"(lambda(fold-var_1596 lst_1597)"
"(if(pair? lst_1597)"
"(let-values(((body_1598)(unsafe-car lst_1597)))"
"(let-values(((fold-var_1599)"
"(let-values(((fold-var_1600) fold-var_1596))"
"(let-values(((fold-var_1601)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((disarmed-body_1602)"
"(syntax-disarm$1 body_1598)))"
"(let-values(((tmp_1603)"
"(core-form-sym"
" disarmed-body_1602"
" phase_1590)))"
"(if(equal? tmp_1603 'define-values)"
"(let-values()"
"(let-values(((ok?_1604"
" define-values571_1605"
" id572_1606"
" rhs573_1607)"
"(let-values(((s_1622)"
" disarmed-body_1602))"
"(let-values(((orig-s_1623)"
" s_1622))"
"(let-values(((define-values571_1624"
" id572_1625"
" rhs573_1626)"
"(let-values(((s_1627)"
"(if(syntax?$1"
" s_1622)"
"(syntax-e$1"
" s_1622)"
" s_1622)))"
"(if(pair?"
" s_1627)"
"(let-values(((define-values574_1628)"
"(let-values(((s_1631)"
"(car"
" s_1627)))"
" s_1631))"
"((id575_1629"
" rhs576_1630)"
"(let-values(((s_1632)"
"(cdr"
" s_1627)))"
"(let-values(((s_1633)"
"(if(syntax?$1"
" s_1632)"
"(syntax-e$1"
" s_1632)"
" s_1632)))"
"(if(pair?"
" s_1633)"
"(let-values(((id577_1634)"
"(let-values(((s_1636)"
"(car"
" s_1633)))"
"(let-values(((s_1637)"
"(if(syntax?$1"
" s_1636)"
"(syntax-e$1"
" s_1636)"
" s_1636)))"
"(let-values(((flat-s_1638)"
"(to-syntax-list.1"
" s_1637)))"
"(if(not"
" flat-s_1638)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_1623))"
"(let-values()"
"(let-values(((id_1639)"
"(let-values(((lst_1640)"
" flat-s_1638))"
"(begin"
"(if(list?"
" lst_1640)"
"(void)"
"(let-values()"
"(in-list"
" lst_1640)))"
"((letrec-values(((for-loop_1641)"
"(lambda(id_1642"
" lst_1643)"
"(if(pair?"
" lst_1643)"
"(let-values(((s_1644)"
"(unsafe-car"
" lst_1643)))"
"(let-values(((id_1645)"
"(let-values(((id_1646)"
" id_1642))"
"(let-values(((id_1647)"
"(let-values()"
"(let-values(((id580_1648)"
"(let-values()"
"(if(let-values(((or-part_1649)"
"(if(syntax?$1"
" s_1644)"
"(symbol?"
"(syntax-e$1"
" s_1644))"
" #f)))"
"(if or-part_1649"
" or-part_1649"
"(symbol?"
" s_1644)))"
" s_1644"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_1623"
" s_1644)))))"
"(cons"
" id580_1648"
" id_1646)))))"
"(values"
" id_1647)))))"
"(for-loop_1641"
" id_1645"
"(unsafe-cdr"
" lst_1643))))"
" id_1642))))"
" for-loop_1641)"
" null"
" lst_1640)))))"
"(alt-reverse"
" id_1639))))))))"
"((rhs578_1635)"
"(let-values(((s_1650)"
"(cdr"
" s_1633)))"
"(let-values(((s_1651)"
"(if(syntax?$1"
" s_1650)"
"(syntax-e$1"
" s_1650)"
" s_1650)))"
"(if(pair?"
" s_1651)"
"(let-values(((rhs579_1652)"
"(let-values(((s_1653)"
"(car"
" s_1651)))"
" s_1653))"
"(()"
"(let-values(((s_1654)"
"(cdr"
" s_1651)))"
"(let-values(((s_1655)"
"(if(syntax?$1"
" s_1654)"
"(syntax-e$1"
" s_1654)"
" s_1654)))"
"(if(null?"
" s_1655)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_1623))))))"
"(values"
" rhs579_1652))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_1623))))))"
"(values"
" id577_1634"
" rhs578_1635))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_1623))))))"
"(values"
" define-values574_1628"
" id575_1629"
" rhs576_1630))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_1623)))))"
"(values"
" #t"
" define-values571_1624"
" id572_1625"
" rhs573_1626))))))"
"(let-values(((ids_1620) id572_1606))"
"(let-values(((vals_1621)"
"(eval-for-bindings"
" ids_1620"
" rhs573_1607"
" phase_1590"
" m-ns_1591"
" ctx_1593)))"
"(let-values(((lst_1656) ids_1620)"
"((lst_1657) vals_1621))"
"(begin"
"(if(list? lst_1656)"
"(void)"
"(let-values()"
"(in-list lst_1656)))"
"(if(list? lst_1657)"
"(void)"
"(let-values()"
"(in-list lst_1657)))"
"((letrec-values(((for-loop_1658)"
"(lambda(fold-var_1659"
" lst_1660"
" lst_1661)"
"(if(if(pair?"
" lst_1660)"
"(pair?"
" lst_1661)"
" #f)"
"(let-values(((id_1662)"
"(unsafe-car"
" lst_1660))"
"((val_1663)"
"(unsafe-car"
" lst_1661)))"
"(let-values(((fold-var_1664)"
"(let-values(((fold-var_1665)"
" fold-var_1659))"
"(let-values(((fold-var_1666)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1667)"
"(let-values(((id581_1668)"
" id_1662)"
"((phase582_1669)"
" phase_1590))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve31.1))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id581_1668"
" phase582_1669)"
"(resolve31.1"
" id581_1668"
" phase582_1669)))))"
"(begin"
"(if(if(module-binding?"
" b_1667)"
"(equal?"
" self_1592"
"(module-binding-module"
" b_1667))"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                           \"internal error: nested binding is not to self\")))"
"(namespace-set-variable!"
" m-ns_1591"
" phase_1590"
"(module-binding-sym"
" b_1667)"
" val_1663))))"
"(void)))))"
"(values"
" fold-var_1666)))))"
"(for-loop_1658"
" fold-var_1664"
"(unsafe-cdr"
" lst_1660)"
"(unsafe-cdr"
" lst_1661))))"
" fold-var_1659))))"
" for-loop_1658)"
"(void)"
" lst_1656"
" lst_1657)))))))"
"(if(equal? tmp_1603 'define-syntaxes)"
"(let-values()(void))"
"(if(if(equal? tmp_1603 '#%provide)"
" #t"
"(if(equal? tmp_1603 '#%require)"
" #t"
"(if(equal? tmp_1603 'module)"
" #t"
"(if(equal? tmp_1603 'module*)"
" #t"
"(if(equal?"
" tmp_1603"
" 'begin-for-syntax)"
" #t"
"(equal?"
" tmp_1603"
" '#%declare))))))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_1593"
" 1/current-namespace"
" m-ns_1591)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" body_1598"
"(let-values(((...er/expand/module.rkt:1048:31_1670)"
" make-compile-context18.1)"
"((m-ns583_1671)"
" m-ns_1591)"
"((phase584_1672)"
" phase_1590))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context18.1))"
"(make-compile-context16.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns583_1671"
" #t"
" phase584_1672"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1048:31_1670"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list"
" m-ns583_1671"
" phase584_1672)))))"
" m-ns_1591))))))))))"
"(void)))))"
"(values fold-var_1601)))))"
"(for-loop_1595 fold-var_1599(unsafe-cdr lst_1597))))"
" fold-var_1596))))"
" for-loop_1595)"
"(void)"
" lst_1594)))))"
"(define-values"
"(lifted/8.1)"
"(make-required"
" 'expand-submodule"
"(case-lambda((self_1673 s_1674 self_1675 ctx_1676)(apply missing-kw self_1673 s_1674 self_1675 ctx_1676 null)))"
" #f"
" #f))"
"(define-values"
"(expand-submodule181.1)"
"(lambda(declared-submodule-names170_1677"
" enclosing-all-scopes-stx168_1678"
" enclosing-all-scopes-stx175_1679"
" enclosing-is-cross-phase-persistent?167_1680"
" enclosing-is-cross-phase-persistent?174_1681"
" enclosing-requires+provides166_1682"
" enclosing-requires+provides173_1683"
" is-star?164_1684"
" keep-enclosing-scope-at-phase165_1685"
" keep-enclosing-scope-at-phase172_1686"
" mpis-to-reset169_1687"
" s178_1688"
" self179_1689"
" ctx180_1690)"
"(let-values(((s_1691) s178_1688))"
"(let-values(((self_1692) self179_1689))"
"(let-values(((ctx_1693) ctx180_1690))"
"(let-values(((is-star?_1694) is-star?164_1684))"
"(let-values(((keep-enclosing-scope-at-phase_1695)"
"(if keep-enclosing-scope-at-phase172_1686 keep-enclosing-scope-at-phase165_1685 #f)))"
"(let-values(((enclosing-r+p_1696)"
"(if enclosing-requires+provides173_1683 enclosing-requires+provides166_1682 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1697)"
"(if enclosing-is-cross-phase-persistent?174_1681"
" enclosing-is-cross-phase-persistent?167_1680"
" #f)))"
"(let-values(((enclosing-all-scopes-stx_1698)"
"(if enclosing-all-scopes-stx175_1679 enclosing-all-scopes-stx168_1678 #f)))"
"(let-values(((mpis-to-reset_1699) mpis-to-reset169_1687))"
"(let-values(((declared-submodule-names_1700) declared-submodule-names170_1677))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1722)(expand-context-observer ctx_1693)))"
"(if obs_1722"
"(let-values()"
"(let-values()(call-expand-observe obs_1722 'enter-prim s_1691)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1723)(expand-context-observer ctx_1693)))"
"(if obs_1723"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1723"
"(if is-star?_1694 'enter-prim-submodule* 'enter-prim-submodule))))"
"(void)))"
"(values))))"
"(let-values(((ok?_1701 module585_1702 name586_1703 _587_1704)"
"(let-values(((s_1724) s_1691))"
"(let-values(((orig-s_1725) s_1724))"
"(let-values(((module585_1726 name586_1727 _587_1728)"
"(let-values(((s_1729)"
"(if(syntax?$1 s_1724)"
"(syntax-e$1 s_1724)"
" s_1724)))"
"(if(pair? s_1729)"
"(let-values(((module588_1730)"
"(let-values(((s_1733)(car s_1729)))"
" s_1733))"
"((name589_1731 _590_1732)"
"(let-values(((s_1734)(cdr s_1729)))"
"(let-values(((s_1735)"
"(if(syntax?$1 s_1734)"
"(syntax-e$1 s_1734)"
" s_1734)))"
"(if(pair? s_1735)"
"(let-values(((name591_1736)"
"(let-values(((s_1738)"
"(car"
" s_1735)))"
" s_1738))"
"((_592_1737)"
"(let-values(((s_1739)"
"(cdr"
" s_1735)))"
" s_1739)))"
"(values name591_1736 _592_1737))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_1725))))))"
"(values module588_1730 name589_1731 _590_1732))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_1725)))))"
"(values #t module585_1726 name586_1727 _587_1728))))))"
"(let-values(((name_1717)(syntax-e$1 name586_1703)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1700 name_1717 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                       \"submodule already declared with the same name\""
" s_1691"
" name_1717))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1700"
" name_1717"
"(syntax-e$1 module585_1702))"
"(values))))"
"(let-values(((submod_1718)"
"(let-values(((...er/expand/module.rkt:1074:4_1740)"
" expand-module16.1)"
"((s593_1741) s_1691)"
"((temp594_1742)"
"(let-values(((the-struct_1749) ctx_1693))"
"(if(expand-context? the-struct_1749)"
"(let-values(((context601_1750) 'module)"
"((only-immediate?602_1751) #f)"
"((post-expansion-scope603_1752) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1749)"
" post-expansion-scope603_1752"
"(root-expand-context-top-level-bind-scope"
" the-struct_1749)"
"(root-expand-context-all-scopes-stx"
" the-struct_1749)"
"(root-expand-context-use-site-scopes"
" the-struct_1749)"
"(root-expand-context-defined-syms"
" the-struct_1749)"
"(root-expand-context-frame-id the-struct_1749)"
"(root-expand-context-counter the-struct_1749)"
"(root-expand-context-lift-key the-struct_1749)"
" context601_1750"
"(expand-context-phase the-struct_1749)"
"(expand-context-namespace the-struct_1749)"
"(expand-context-env the-struct_1749)"
"(expand-context-user-env the-struct_1749)"
"(expand-context-post-expansion-scope-action"
" the-struct_1749)"
"(expand-context-scopes the-struct_1749)"
"(expand-context-def-ctx-scopes the-struct_1749)"
"(expand-context-binding-layer the-struct_1749)"
"(expand-context-reference-records"
" the-struct_1749)"
" only-immediate?602_1751"
"(expand-context-just-once? the-struct_1749)"
"(expand-context-module-begin-k the-struct_1749)"
"(expand-context-need-eventually-defined"
" the-struct_1749)"
"(expand-context-allow-unbound? the-struct_1749)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1749)"
"(expand-context-stops the-struct_1749)"
"(expand-context-current-introduction-scopes"
" the-struct_1749)"
"(expand-context-declared-submodule-names"
" the-struct_1749)"
"(expand-context-lifts the-struct_1749)"
"(expand-context-lift-envs the-struct_1749)"
"(expand-context-module-lifts the-struct_1749)"
"(expand-context-require-lifts the-struct_1749)"
"(expand-context-to-module-lifts"
" the-struct_1749)"
"(expand-context-requires+provides"
" the-struct_1749)"
"(expand-context-name the-struct_1749)"
"(expand-context-observer the-struct_1749)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                       \"expand-context?\""
" the-struct_1749))))"
"((self595_1743) self_1692)"
"((keep-enclosing-scope-at-phase596_1744)"
" keep-enclosing-scope-at-phase_1695)"
"((enclosing-all-scopes-stx597_1745)"
" enclosing-all-scopes-stx_1698)"
"((enclosing-r+p598_1746) enclosing-r+p_1696)"
"((enclosing-is-cross-phase-persistent?599_1747)"
" enclosing-is-cross-phase-persistent?_1697)"
"((mpis-to-reset600_1748) mpis-to-reset_1699))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-module16.1))"
"(expand-module14.1"
" enclosing-all-scopes-stx597_1745"
" #t"
" enclosing-is-cross-phase-persistent?599_1747"
" #t"
" enclosing-r+p598_1746"
" #t"
" keep-enclosing-scope-at-phase596_1744"
" #t"
" mpis-to-reset600_1748"
" #t"
" s593_1741"
" temp594_1742"
" self595_1743)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1074:4_1740"
" keyword-procedure-extract"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
" 5)"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(list"
" enclosing-all-scopes-stx597_1745"
" enclosing-is-cross-phase-persistent?599_1747"
" enclosing-r+p598_1746"
" keep-enclosing-scope-at-phase596_1744"
" mpis-to-reset600_1748)"
" s593_1741"
" temp594_1742"
" self595_1743)))))"
"(let-values(((ns_1719)(expand-context-namespace ctx_1693)))"
"(let-values(((module-name_1720)(1/module-path-index-resolve self_1692)))"
"(let-values(((root-module-name_1721)"
"(resolved-module-path-root-name module-name_1720)))"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1719"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1721))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1093:4_1753) eval-module10.1)"
"((temp604_1754)"
"(let-values(((...er/expand/module.rkt:1094:5_1756)"
" compile-module17.1)"
"((submod606_1757) submod_1718)"
"((temp607_1758)"
"(let-values(((...er/expand/module.rkt:1095:21_1760)"
" make-compile-context18.1)"
"((ns609_1761) ns_1719)"
"((self610_1762) self_1692)"
"((temp611_1763)"
"(1/resolved-module-path-name"
" module-name_1720)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context18.1))"
"(make-compile-context16.1"
" temp611_1763"
" #t"
" #f"
" #f"
" self610_1762"
" #t"
" ns609_1761"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1095:21_1760"
" keyword-procedure-extract"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
" 2)"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
"(list"
" temp611_1763"
" self610_1762"
" ns609_1761)))))"
"((temp608_1759) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module17.1))"
"(compile-module15.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp608_1759"
" #t"
" submod606_1757"
" temp607_1758)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1094:5_1756"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 4)"
" '(#:with-submodules?)"
"(list temp608_1759)"
" submod606_1757"
" temp607_1758))))"
"((temp605_1755) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-module10.1))"
"(eval-module8.1 #f #f #f #f temp605_1755 #t temp604_1754)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1093:4_1753"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 3)"
" '(#:with-submodules?)"
"(list temp605_1755)"
" temp604_1754)))))"
"(let-values(((obs_1764)(expand-context-observer ctx_1693)))"
"(if obs_1764"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1764 'exit-prim submod_1718)))"
"(void)))"
" submod_1718))))))))))))))))))))))))"
"(define-values"
"(unpack182.1)"
"(lambda(given-kws_1765 given-args_1766 s178_1767 self179_1768 ctx180_1769)"
"(let-values(((declared-submodule-names170_1770)(car given-args_1766))"
"((given-kws_1771)(cdr given-kws_1765))"
"((given-args_1772)(cdr given-args_1766)))"
"(let-values(((enclosing-all-scopes-stx175_1773)"
"(if(pair? given-kws_1771)(eq? '#:enclosing-all-scopes-stx(car given-kws_1771)) #f)))"
"(let-values(((enclosing-all-scopes-stx168_1774)"
"(if enclosing-all-scopes-stx175_1773(car given-args_1772)(void)))"
"((given-kws_1775)(if enclosing-all-scopes-stx175_1773(cdr given-kws_1771) given-kws_1771))"
"((given-args_1776)(if enclosing-all-scopes-stx175_1773(cdr given-args_1772) given-args_1772)))"
"(let-values(((enclosing-is-cross-phase-persistent?174_1777)"
"(if(pair? given-kws_1775)"
"(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1775))"
" #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?167_1778)"
"(if enclosing-is-cross-phase-persistent?174_1777(car given-args_1776)(void)))"
"((given-kws_1779)"
"(if enclosing-is-cross-phase-persistent?174_1777(cdr given-kws_1775) given-kws_1775))"
"((given-args_1780)"
"(if enclosing-is-cross-phase-persistent?174_1777(cdr given-args_1776) given-args_1776)))"
"(let-values(((enclosing-requires+provides173_1781)"
"(if(pair? given-kws_1779)(eq? '#:enclosing-requires+provides(car given-kws_1779)) #f)))"
"(let-values(((enclosing-requires+provides166_1782)"
"(if enclosing-requires+provides173_1781(car given-args_1780)(void)))"
"((given-kws_1783)"
"(if enclosing-requires+provides173_1781(cdr given-kws_1779) given-kws_1779))"
"((given-args_1784)"
"(if enclosing-requires+provides173_1781(cdr given-args_1780) given-args_1780)))"
"(let-values(((is-star?164_1785)(car given-args_1784))"
"((given-kws_1786)(cdr given-kws_1783))"
"((given-args_1787)(cdr given-args_1784)))"
"(let-values(((keep-enclosing-scope-at-phase172_1788)"
"(if(pair? given-kws_1786)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1786))"
" #f)))"
"(let-values(((keep-enclosing-scope-at-phase165_1789)"
"(if keep-enclosing-scope-at-phase172_1788(car given-args_1787)(void)))"
"((given-kws_1790)"
"(if keep-enclosing-scope-at-phase172_1788(cdr given-kws_1786) given-kws_1786))"
"((given-args_1791)"
"(if keep-enclosing-scope-at-phase172_1788(cdr given-args_1787) given-args_1787)))"
"(let-values(((mpis-to-reset169_1792)(car given-args_1791)))"
"(expand-submodule181.1"
" declared-submodule-names170_1770"
" enclosing-all-scopes-stx168_1774"
" enclosing-all-scopes-stx175_1773"
" enclosing-is-cross-phase-persistent?167_1778"
" enclosing-is-cross-phase-persistent?174_1777"
" enclosing-requires+provides166_1782"
" enclosing-requires+provides173_1781"
" is-star?164_1785"
" keep-enclosing-scope-at-phase165_1789"
" keep-enclosing-scope-at-phase172_1788"
" mpis-to-reset169_1792"
" s178_1767"
" self179_1768"
" ctx180_1769))))))))))))))"
"(define-values"
"(expand-submodule183.1)"
"(lifted/8.1"
"(lambda(given-kws_1793 given-argc_1794)"
"(if(= given-argc_1794 5)"
"(subsets?"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" given-kws_1793"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset))"
" #f))"
"(case-lambda"
"((given-kws_1795 given-args_1796 s_1797 self_1798 ctx_1799)"
"(unpack182.1 given-kws_1795 given-args_1796 s_1797 self_1798 ctx_1799)))"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/9.1)"
"(make-required"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1800 bodys_1801 phase_1802 self_1803 ctx_1804)"
"(apply missing-kw self_1800 bodys_1801 phase_1802 self_1803 ctx_1804 null)))"
" #f"
" #f))"
"(define-values"
"(expand-non-module*-submodules192.1)"
"(lambda(declared-submodule-names185_1805 mpis-to-reset184_1806 bodys188_1807 phase189_1808 self190_1809 ctx191_1810)"
"(let-values(((bodys_1811) bodys188_1807))"
"(let-values(((phase_1812) phase189_1808))"
"(let-values(((self_1813) self190_1809))"
"(let-values(((ctx_1814) ctx191_1810))"
"(let-values(((mpis-to-reset_1815) mpis-to-reset184_1806))"
"(let-values(((declared-submodule-names_1816) declared-submodule-names185_1805))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_1817) bodys_1811))"
"(begin"
"(if(list? lst_1817)(void)(let-values()(in-list lst_1817)))"
"((letrec-values(((for-loop_1818)"
"(lambda(fold-var_1819 lst_1820)"
"(if(pair? lst_1820)"
"(let-values(((body_1821)(unsafe-car lst_1820)))"
"(let-values(((fold-var_1822)"
"(let-values(((fold-var_1823) fold-var_1819))"
"(let-values(((fold-var_1824)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_1825)"
"(core-form-sym"
"(syntax-disarm$1"
" body_1821)"
" phase_1812)))"
"(if(equal? tmp_1825 'module)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1113:7_1826)"
" expand-submodule183.1)"
"((body612_1827)"
" body_1821)"
"((self613_1828)"
" self_1813)"
"((ctx614_1829)"
" ctx_1814)"
"((temp615_1830) #f)"
"((mpis-to-reset616_1831)"
" mpis-to-reset_1815)"
"((declared-submodule-names617_1832)"
" declared-submodule-names_1816))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names617_1832"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp615_1830"
" #f"
" #f"
" mpis-to-reset616_1831"
" body612_1827"
" self613_1828"
" ctx614_1829)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1113:7_1826"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names617_1832"
" temp615_1830"
" mpis-to-reset616_1831)"
" body612_1827"
" self613_1828"
" ctx614_1829))))"
"(let-values() body_1821))))"
" fold-var_1823))))"
"(values fold-var_1824)))))"
"(for-loop_1818 fold-var_1822(unsafe-cdr lst_1820))))"
" fold-var_1819))))"
" for-loop_1818)"
" null"
" lst_1817)))))))))))))"
"(define-values"
"(unpack193.1)"
"(lambda(given-kws_1833 given-args_1834 bodys188_1835 phase189_1836 self190_1837 ctx191_1838)"
"(let-values(((declared-submodule-names185_1839)(car given-args_1834))"
"((given-kws_1840)(cdr given-kws_1833))"
"((given-args_1841)(cdr given-args_1834)))"
"(let-values(((mpis-to-reset184_1842)(car given-args_1841)))"
"(expand-non-module*-submodules192.1"
" declared-submodule-names185_1839"
" mpis-to-reset184_1842"
" bodys188_1835"
" phase189_1836"
" self190_1837"
" ctx191_1838)))))"
"(define-values"
"(expand-non-module*-submodules194.1)"
"(lifted/9.1"
"(lambda(given-kws_1843 given-argc_1844)"
"(if(= given-argc_1844 6)"
"(let-values(((l2_1845) given-kws_1843))"
"(if(pair? l2_1845)"
"(if(eq?(car l2_1845) '#:declared-submodule-names)"
"(let-values(((l2_1846)(cdr l2_1845)))"
"(if(pair? l2_1846)(if(eq?(car l2_1846) '#:mpis-to-reset)(null?(cdr l2_1846)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1847 given-args_1848 bodys_1849 phase_1850 self_1851 ctx_1852)"
"(unpack193.1 given-kws_1847 given-args_1848 bodys_1849 phase_1850 self_1851 ctx_1852)))"
" '(#:declared-submodule-names #:mpis-to-reset)"
" '(#:declared-submodule-names #:mpis-to-reset)))"
"(define-values"
"(lifted/10.1)"
"(make-required"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_1853 m-ns_1854 self_1855 requires+provides_1856)"
"(apply missing-kw self_1853 m-ns_1854 self_1855 requires+provides_1856 null)))"
" #f"
" #f))"
"(define-values"
"(make-parse-lifted-require200.1)"
"(lambda(declared-submodule-names195_1857 m-ns197_1858 self198_1859 requires+provides199_1860)"
"(let-values(((m-ns_1861) m-ns197_1858))"
"(let-values(((self_1862) self198_1859))"
"(let-values(((requires+provides_1863) requires+provides199_1860))"
"(let-values(((declared-submodule-names_1864) declared-submodule-names195_1857))"
"(let-values()"
"(lambda(s_1865 phase_1866)"
"(let-values(((ok?_1867 #%require618_1868 req619_1869)"
"(let-values(((s_1880)(syntax-disarm$1 s_1865)))"
"(let-values(((orig-s_1881) s_1880))"
"(let-values(((#%require618_1882 req619_1883)"
"(let-values(((s_1884)"
"(if(syntax?$1 s_1880)(syntax-e$1 s_1880) s_1880)))"
"(if(pair? s_1884)"
"(let-values(((#%require620_1885)"
"(let-values(((s_1887)(car s_1884))) s_1887))"
"((req621_1886)"
"(let-values(((s_1888)(cdr s_1884)))"
"(let-values(((s_1889)"
"(if(syntax?$1 s_1888)"
"(syntax-e$1 s_1888)"
" s_1888)))"
"(if(pair? s_1889)"
"(let-values(((req622_1890)"
"(let-values(((s_1891)"
"(car s_1889)))"
" s_1891))"
"(()"
"(let-values(((s_1892)"
"(cdr s_1889)))"
"(let-values(((s_1893)"
"(if(syntax?$1"
" s_1892)"
"(syntax-e$1"
" s_1892)"
" s_1892)))"
"(if(null? s_1893)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_1881))))))"
"(values req622_1890))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_1881))))))"
"(values #%require620_1885 req621_1886))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_1881)))))"
"(values #t #%require618_1882 req619_1883))))))"
"(let-values(((...er/expand/module.rkt:1125:4_1894) parse-and-perform-requires!30.1)"
"((temp623_1895)(list req619_1869))"
"((s624_1896) s_1865)"
"((self625_1897) self_1862)"
"((m-ns626_1898) m-ns_1861)"
"((phase627_1899) phase_1866)"
"((phase628_1900) phase_1866)"
"((requires+provides629_1901) requires+provides_1863)"
"((declared-submodule-names630_1902) declared-submodule-names_1864)"
"((temp631_1903) 'require))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names630_1902"
" #t"
" phase628_1900"
" #t"
" #f"
" #f"
" self625_1897"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp631_1903"
" temp623_1895"
" s624_1896"
" m-ns626_1898"
" phase627_1899"
" requires+provides629_1901)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1125:4_1894"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:run-phase #:self #:who)"
" 7)"
" '(#:declared-submodule-names #:run-phase #:self #:who)"
"(list declared-submodule-names630_1902 phase628_1900 self625_1897 temp631_1903)"
" temp623_1895"
" s624_1896"
" m-ns626_1898"
" phase627_1899"
" requires+provides629_1901))))))))))))"
"(define-values"
"(unpack201.1)"
"(lambda(given-kws_1904 given-args_1905 m-ns197_1906 self198_1907 requires+provides199_1908)"
"(let-values(((declared-submodule-names195_1909)(car given-args_1905)))"
"(make-parse-lifted-require200.1"
" declared-submodule-names195_1909"
" m-ns197_1906"
" self198_1907"
" requires+provides199_1908))))"
"(define-values"
"(make-parse-lifted-require202.1)"
"(lifted/10.1"
"(lambda(given-kws_1910 given-argc_1911)"
"(if(= given-argc_1911 5)"
"(let-values(((l2_1912) given-kws_1910))"
"(if(pair? l2_1912)(if(eq?(car l2_1912) '#:declared-submodule-names)(null?(cdr l2_1912)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1913 given-args_1914 m-ns_1915 self_1916 requires+provides_1917)"
"(unpack201.1 given-kws_1913 given-args_1914 m-ns_1915 self_1916 requires+provides_1917)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(void)"
"(void)"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(alt-reverse"
"(let-values(((lst_7) ids_1))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((id_11)(unsafe-car lst_10)))"
"(let-values(((fold-var_12)"
"(let-values(((fold-var_13) fold-var_9))"
"(let-values(((fold-var_14)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-use-site-scopes"
" id_11"
" ctx_3))"
" fold-var_13))))"
"(values fold-var_14)))))"
"(for-loop_8 fold-var_12(unsafe-cdr lst_10))))"
" fold-var_9))))"
" for-loop_8)"
" null"
" lst_7))))))"
"(let-values((()"
"(begin"
"(let-values(((tl-ids1_15) tl-ids_5)((temp2_16)(expand-context-phase ctx_3))((s3_17) s_2))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_15 temp2_16 s3_17 #f #f)"
"(check-no-duplicate-ids10.1 tl-ids1_15 temp2_16 s3_17)))"
"(values))))"
"(let-values(((tmp-bind-ids_6)"
"(alt-reverse"
"(let-values(((lst_18) tl-ids_5))"
"(begin"
"(if(list? lst_18)(void)(let-values()(in-list lst_18)))"
"((letrec-values(((for-loop_19)"
"(lambda(fold-var_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((id_22)(unsafe-car lst_21)))"
"(let-values(((fold-var_23)"
"(let-values(((fold-var_24) fold-var_20))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_22"
" top-level-bind-scope_4))"
" fold-var_24))))"
"(values fold-var_25)))))"
"(for-loop_19 fold-var_23(unsafe-cdr lst_21))))"
" fold-var_20))))"
" for-loop_19)"
" null"
" lst_18))))))"
"(begin(select-defined-syms-and-bind!/ctx tmp-bind-ids_6 ctx_3) tl-ids_5)))))))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_2)))"
"(if obs_22"
"(let-values()(let-values()(call-expand-observe obs_22 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values(((s_23) s_1))"
"(let-values(((orig-s_24) s_23))"
"(let-values(((define-values1_25 id2_26 rhs3_27)"
"(let-values(((s_28)(if(syntax?$1 s_23)(syntax-e$1 s_23) s_23)))"
"(if(pair? s_28)"
"(let-values(((define-values4_29)"
"(let-values(((s_32)(car s_28))) s_32))"
"((id5_30 rhs6_31)"
"(let-values(((s_33)(cdr s_28)))"
"(let-values(((s_34)"
"(if(syntax?$1 s_33)"
"(syntax-e$1 s_33)"
" s_33)))"
"(if(pair? s_34)"
"(let-values(((id7_35)"
"(let-values(((s_37)(car s_34)))"
"(let-values(((s_38)"
"(if(syntax?$1 s_37)"
"(syntax-e$1 s_37)"
" s_37)))"
"(let-values(((flat-s_39)"
"(to-syntax-list.1"
" s_38)))"
"(if(not flat-s_39)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_24))"
"(let-values()"
"(let-values(((id_40)"
"(let-values(((lst_41)"
" flat-s_39))"
"(begin"
"(if(list?"
" lst_41)"
"(void)"
"(let-values()"
"(in-list"
" lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(id_43"
" lst_44)"
"(if(pair?"
" lst_44)"
"(let-values(((s_45)"
"(unsafe-car"
" lst_44)))"
"(let-values(((id_46)"
"(let-values(((id_47)"
" id_43))"
"(let-values(((id_48)"
"(let-values()"
"(let-values(((id13_49)"
"(let-values()"
"(if(let-values(((or-part_50)"
"(if(syntax?$1"
" s_45)"
"(symbol?"
"(syntax-e$1"
" s_45))"
" #f)))"
"(if or-part_50"
" or-part_50"
"(symbol?"
" s_45)))"
" s_45"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_24"
" s_45)))))"
"(cons"
" id13_49"
" id_47)))))"
"(values"
" id_48)))))"
"(for-loop_42"
" id_46"
"(unsafe-cdr"
" lst_44))))"
" id_43))))"
" for-loop_42)"
" null"
" lst_41)))))"
"(alt-reverse"
" id_40))))))))"
"((rhs8_36)"
"(let-values(((s_51)(cdr s_34)))"
"(let-values(((s_52)"
"(if(syntax?$1 s_51)"
"(syntax-e$1 s_51)"
" s_51)))"
"(if(pair? s_52)"
"(let-values(((rhs9_53)"
"(let-values(((s_54)"
"(car"
" s_52)))"
" s_54))"
"(()"
"(let-values(((s_55)"
"(cdr"
" s_52)))"
"(let-values(((s_56)"
"(if(syntax?$1"
" s_55)"
"(syntax-e$1"
" s_55)"
" s_55)))"
"(if(null?"
" s_56)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_24))))))"
"(values rhs9_53))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_24))))))"
"(values id7_35 rhs8_36))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_24))))))"
"(values define-values4_29 id5_30 rhs6_31))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_24)))))"
"(values #t define-values1_25 id2_26 rhs3_27))))))"
"(let-values(((ids_20)(as-expand-time-top-level-bindings id2_6 s_1 ctx_2)))"
"(let-values(((exp-rhs_21)"
"(let-values(((temp14_57) rhs3_7)((temp15_58)(as-named-context ctx_2 ids_20)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp14_57 temp15_58)"
"(expand7.1 temp14_57 temp15_58)))))"
"(let-values(((s10_59) s_1)"
"((disarmed-s11_60) disarmed-s_3)"
"((temp12_61)(list define-values1_5 ids_20 exp-rhs_21)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s10_59 disarmed-s11_60 temp12_61)"
"(rebuild53.1 s10_59 disarmed-s11_60 temp12_61))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_62 ctx_63)"
"(let-values((()"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_63)))"
"(if obs_83"
"(let-values()(let-values()(call-expand-observe obs_83 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_84)(expand-context-observer ctx_63)))"
"(if obs_84(let-values()(let-values()(call-expand-observe obs_84 'prepare-env)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_63) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_62)))"
"(values))))"
"(let-values(((disarmed-s_64)(syntax-disarm$1 s_62)))"
"(let-values(((ok?_65 define-syntaxes16_66 id17_67 rhs18_68)"
"(let-values(((s_85) disarmed-s_64))"
"(let-values(((orig-s_86) s_85))"
"(let-values(((define-syntaxes16_87 id17_88 rhs18_89)"
"(let-values(((s_90)(if(syntax?$1 s_85)(syntax-e$1 s_85) s_85)))"
"(if(pair? s_90)"
"(let-values(((define-syntaxes19_91)"
"(let-values(((s_94)(car s_90))) s_94))"
"((id20_92 rhs21_93)"
"(let-values(((s_95)(cdr s_90)))"
"(let-values(((s_96)"
"(if(syntax?$1 s_95)"
"(syntax-e$1 s_95)"
" s_95)))"
"(if(pair? s_96)"
"(let-values(((id22_97)"
"(let-values(((s_99)(car s_96)))"
"(let-values(((s_100)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1 s_99)"
" s_99)))"
"(let-values(((flat-s_101)"
"(to-syntax-list.1"
" s_100)))"
"(if(not flat-s_101)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_86))"
"(let-values()"
"(let-values(((id_102)"
"(let-values(((lst_103)"
" flat-s_101))"
"(begin"
"(if(list?"
" lst_103)"
"(void)"
"(let-values()"
"(in-list"
" lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(id_105"
" lst_106)"
"(if(pair?"
" lst_106)"
"(let-values(((s_107)"
"(unsafe-car"
" lst_106)))"
"(let-values(((id_108)"
"(let-values(((id_109)"
" id_105))"
"(let-values(((id_110)"
"(let-values()"
"(let-values(((id28_111)"
"(let-values()"
"(if(let-values(((or-part_112)"
"(if(syntax?$1"
" s_107)"
"(symbol?"
"(syntax-e$1"
" s_107))"
" #f)))"
"(if or-part_112"
" or-part_112"
"(symbol?"
" s_107)))"
" s_107"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_86"
" s_107)))))"
"(cons"
" id28_111"
" id_109)))))"
"(values"
" id_110)))))"
"(for-loop_104"
" id_108"
"(unsafe-cdr"
" lst_106))))"
" id_105))))"
" for-loop_104)"
" null"
" lst_103)))))"
"(alt-reverse"
" id_102))))))))"
"((rhs23_98)"
"(let-values(((s_113)(cdr s_96)))"
"(let-values(((s_114)"
"(if(syntax?$1"
" s_113)"
"(syntax-e$1"
" s_113)"
" s_113)))"
"(if(pair? s_114)"
"(let-values(((rhs24_115)"
"(let-values(((s_116)"
"(car"
" s_114)))"
" s_116))"
"(()"
"(let-values(((s_117)"
"(cdr"
" s_114)))"
"(let-values(((s_118)"
"(if(syntax?$1"
" s_117)"
"(syntax-e$1"
" s_117)"
" s_117)))"
"(if(null?"
" s_118)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_86))))))"
"(values rhs24_115))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_86))))))"
"(values id22_97 rhs23_98))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_86))))))"
"(values define-syntaxes19_91 id20_92 rhs21_93))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_86)))))"
"(values #t define-syntaxes16_87 id17_88 rhs18_89))))))"
"(let-values(((ids_81)(as-expand-time-top-level-bindings id17_67 s_62 ctx_63)))"
"(let-values(((exp-rhs_82)"
"(let-values(((temp29_119) rhs18_68)((temp30_120)(as-named-context ctx_63 ids_81)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer45.1))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f temp29_119 temp30_120)"
"(expand-transformer45.1 temp29_119 temp30_120)))))"
"(let-values(((s25_121) s_62)"
"((disarmed-s26_122) disarmed-s_64)"
"((temp27_123)(list define-syntaxes16_66 ids_81 exp-rhs_82)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s25_121 disarmed-s26_122 temp27_123)"
"(rebuild53.1 s25_121 disarmed-s26_122 temp27_123)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_124 ctx_125) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_124))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_126 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_143)(expand-context-observer ctx_127)))"
"(if obs_143"
"(let-values()(let-values()(call-expand-observe obs_143 'prim-require)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_127) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_126)))"
"(values))))"
"(let-values(((disarmed-s_128)(syntax-disarm$1 s_126)))"
"(let-values(((ok?_129 #%require31_130 req32_131)"
"(let-values(((s_144) disarmed-s_128))"
"(let-values(((orig-s_145) s_144))"
"(let-values(((#%require31_146 req32_147)"
"(let-values(((s_148)(if(syntax?$1 s_144)(syntax-e$1 s_144) s_144)))"
"(if(pair? s_148)"
"(let-values(((#%require33_149)"
"(let-values(((s_151)(car s_148))) s_151))"
"((req34_150)"
"(let-values(((s_152)(cdr s_148)))"
"(let-values(((s_153)"
"(if(syntax?$1 s_152)"
"(syntax-e$1 s_152)"
" s_152)))"
"(let-values(((flat-s_154)(to-syntax-list.1 s_153)))"
"(if(not flat-s_154)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_145))"
"(let-values() flat-s_154)))))))"
"(values #%require33_149 req34_150))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_145)))))"
"(values #t #%require31_146 req32_147))))))"
"(let-values(((sc_142)(new-scope 'macro)))"
"(begin"
"(let-values(((...ander/expand/top.rkt:62:3_155) parse-and-perform-requires!30.1)"
"((temp35_156)"
"(alt-reverse"
"(let-values(((lst_163) req32_131))"
"(begin"
"(if(list? lst_163)(void)(let-values()(in-list lst_163)))"
"((letrec-values(((for-loop_164)"
"(lambda(fold-var_165 lst_166)"
"(if(pair? lst_166)"
"(let-values(((req_167)(unsafe-car lst_166)))"
"(let-values(((fold-var_168)"
"(let-values(((fold-var_169) fold-var_165))"
"(let-values(((fold-var_170)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_167"
" sc_142))"
" fold-var_169))))"
"(values fold-var_170)))))"
"(for-loop_164 fold-var_168(unsafe-cdr lst_166))))"
" fold-var_165))))"
" for-loop_164)"
" null"
" lst_163)))))"
"((s36_157) s_126)"
"((temp37_158) #f)"
"((temp38_159)(expand-context-namespace ctx_127))"
"((temp39_160)(expand-context-phase ctx_127))"
"((temp40_161)(make-requires+provides #f))"
"((temp41_162) 'require))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp37_158"
" #t"
" temp41_162"
" temp35_156"
" s36_157"
" temp38_159"
" temp39_160"
" temp40_161)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/top.rkt:62:3_155"
" keyword-procedure-extract"
" '(#:visit? #:who)"
" 7)"
" '(#:visit? #:who)"
"(list temp37_158 temp41_162)"
" temp35_156"
" s36_157"
" temp38_159"
" temp39_160"
" temp40_161)))"
" s_126)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_171 ctx_172)"
"(begin"
"(let-values(((obs_173)(expand-context-observer ctx_172)))"
"(if obs_173(let-values()(let-values()(call-expand-observe obs_173 'prim-provide)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_171)))))"
" print-values)"
"(void)"
"(void)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:101:0_1) declare-hash-based-module!41.1)"
"((temp1_2) '#%main)"
"((main-primitives2_3) main-primitives)"
"((ns3_4) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns3_4 #f #f #f #f #f #f #f #f temp1_2 main-primitives2_3)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:101:0_1"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns3_4)"
" temp1_2"
" main-primitives2_3))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:102:0_5) declare-hash-based-module!41.1)"
"((temp4_6) '#%utils)"
"((utils-primitives5_7) utils-primitives)"
"((ns6_8) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns6_8 #f #f #f #f #f #f #f #f temp4_6 utils-primitives5_7)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:102:0_5"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns6_8)"
" temp4_6"
" utils-primitives5_7))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:103:0_9) declare-hash-based-module!41.1)"
"((temp7_10) '#%place-struct)"
"((place-struct-primitives8_11) place-struct-primitives)"
"((ns9_12) ns)"
"((temp10_13) '(dynamic-place)))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns9_12 #f #f temp10_13 #t #f #f #f #f temp7_10 place-struct-primitives8_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:103:0_9"
" keyword-procedure-extract"
" '(#:namespace #:protected)"
" 4)"
" '(#:namespace #:protected)"
"(list ns9_12 temp10_13)"
" temp7_10"
" place-struct-primitives8_11))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:108:0_14) declare-hash-based-module!41.1)"
"((temp11_15) '#%boot)"
"((boot-primitives12_16) boot-primitives)"
"((ns13_17) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns13_17 #f #f #f #f #f #f #f #f temp11_15 boot-primitives12_16)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:108:0_14"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns13_17)"
" temp11_15"
" boot-primitives12_16))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_18)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((...gs/expander/main.rkt:115:2_19) declare-hash-based-module!41.1)"
"((temp25_20) '#%linklet)"
"((linklet-primitives26_21) linklet-primitives_18)"
"((ns27_22) ns)"
"((temp28_23) #t)"
"((temp29_24) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns27_22"
" temp28_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp29_24"
" #t"
" temp25_20"
" linklet-primitives26_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:115:2_19"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:register-builtin?)"
" 4)"
" '(#:namespace #:primitive? #:register-builtin?)"
"(list ns27_22 temp28_23 temp29_24)"
" temp25_20"
" linklet-primitives26_21)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:118:0_25) declare-hash-based-module!41.1)"
"((temp14_26) '#%expobs)"
"((expobs-primitives15_27) expobs-primitives)"
"((ns16_28) ns)"
"((temp17_29) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns16_28 #f #f #f #f temp17_29 #t #f #f temp14_26 expobs-primitives15_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:118:0_25"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 4)"
" '(#:namespace #:protected?)"
"(list ns16_28 temp17_29)"
" temp14_26"
" expobs-primitives15_27))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:120:0_30) declare-kernel-module!8.1)"
"((ns18_31) ns)"
"((eval19_32) 1/eval)"
"((temp20_33)"
"(let-values(((ht_34) main-primitives))"
"(begin"
"(if((lambda(ht_35)(hash? ht_35)) ht_34)(void)(let-values()(default-in-hash-keys ht_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_37 i_38)"
"(if i_38"
"(let-values(((name_39)(hash-iterate-key ht_34 i_38)))"
"(let-values(((table_40)"
"(let-values(((table_41) table_37))"
"(let-values(((table_42)"
"(let-values()"
"(let-values(((key_43 val_44)"
"(let-values()"
"(values"
"(let-values() name_39)"
" #t))))"
"(hash-set table_41 key_43 val_44)))))"
"(values table_42)))))"
"(for-loop_36 table_40(hash-iterate-next ht_34 i_38))))"
" table_37))))"
" for-loop_36)"
" '#hash()"
"(hash-iterate-first ht_34))))))"
"(if(variable-reference-constant?(#%variable-reference declare-kernel-module!8.1))"
"(declare-kernel-module!6.1 eval19_32 temp20_33 ns18_31)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:120:0_30"
" keyword-procedure-extract"
" '(#:eval #:main-ids)"
" 3)"
" '(#:eval #:main-ids)"
"(list eval19_32 temp20_33)"
" ns18_31))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_45) runtime-instances))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((name_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(if(eq? name_49 '#%kernel)"
" fold-var_51"
"(let-values(((fold-var_52) fold-var_51))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...gs/expander/main.rkt:126:2_54)"
" copy-runtime-module!26.1)"
"((name30_55) name_49)"
"((ns31_56) ns)"
"((temp32_57)"
"(let-values(((or-part_58)"
"(eq?"
" name_49"
" '#%foreign)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)"
"(eq?"
" name_49"
" '#%futures)))"
"(if or-part_59"
" or-part_59"
"(eq?"
" name_49"
" '#%unsafe)))))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" copy-runtime-module!26.1))"
"(copy-runtime-module!24.1"
" #f"
" #f"
" #f"
" #f"
" ns31_56"
" #f"
" #f"
" temp32_57"
" #t"
" #f"
" #f"
" #f"
" #f"
" name30_55)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:126:2_54"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 3)"
" '(#:namespace #:protected?)"
"(list ns31_56 temp32_57)"
" name30_55))))"
"(void)))))"
"(values fold-var_53)))))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
"(void)"
" lst_45))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:131:0_60) declare-reexporting-module!50.1)"
"((temp21_61) '#%builtin)"
"((temp22_62)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns23_63) ns)"
"((temp24_64) #f))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns23_63 temp24_64 #t temp21_61 temp22_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:131:0_60"
" keyword-procedure-extract"
" '(#:namespace #:reexport?)"
" 4)"
" '(#:namespace #:reexport?)"
"(list ns23_63 temp24_64)"
" temp21_61"
" temp22_62))))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_65)(1/datum->syntax core-stx s_65)))"
"(void))"
);
