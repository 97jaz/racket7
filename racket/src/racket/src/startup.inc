  EVAL_ONE_STR(
"(linklet"
"()"
"((embedded-load embedded-load)"
"(eval$1 eval)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(1/current-namespace current-namespace)"
"(boot boot)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(1/module-path-index-join module-path-index-join)"
"(1/datum->syntax datum->syntax)"
"(namespace->instance namespace->instance)"
"(compile$1 compile)"
"(1/syntax-debug-info syntax-debug-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/syntax->datum syntax->datum)"
"(1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/namespace-require namespace-require)"
"(syntax?$1 syntax?)"
"(expand$1 expand)"
"(identifier? identifier?)"
"(1/namespace-attach-module namespace-attach-module)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(syntax-e$2 syntax-e)"
"(1/namespace-syntax-introduce namespace-syntax-introduce))"
"(define-values"
"(qq-append)"
"(lambda(a_106 b_107)"
" (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing '\"list?\" a_106))))"
"(define-values(call/ec) call-with-escape-continuation)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 '\"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() '#f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() '#f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() '#f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 '2) '#f)"
"(void)"
" (raise-argument-error 'member '\"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() '#f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28)))))"
"(define-values"
"(current-parameterization)"
"(lambda()(extend-parameterization(continuation-mark-set-first '#f parameterization-key))))"
"(define-values"
"(call-with-parameterization)"
"(lambda(paramz_430 thunk_431)"
"(begin"
"(if(parameterization? paramz_430)"
"(void)"
" (let-values () (raise-argument-error 'call-with-parameterization '\"parameterization?\" '0 paramz_430 thunk_431)))"
"(if(if(procedure? thunk_431)(procedure-arity-includes? thunk_431 '0) '#f)"
"(void)"
" (let-values () (raise-argument-error 'call-with-parameterization '\"(-> any)\" '1 paramz_430 thunk_431)))"
"(with-continuation-mark parameterization-key paramz_430(thunk_431)))))"
"(define-values"
"(struct:break-paramz make-break-paramz break-paramz? break-paramz-ref break-paramz-set!)"
"(make-struct-type 'break-parameterization '#f '1 '0 '#f))"
"(define-values"
"(struct:break-parameterization"
" make-break-parameterization"
" break-parameterization?"
" break-parameterization-cell"
" set-break-parameterization-cell!)"
"(let-values(((inspector_432)(current-inspector)))"
"(begin"
"(if(if inspector_432(not(inspector? inspector_432)) '#f)"
" (raise-argument-error 'define-struct '\"(or/c inspector? #f)\" inspector_432)"
"(void))"
"(let-values(((type_433 maker_434 pred_435 access_436 mutate_437)"
"(make-struct-type 'break-parameterization '#f '1 '0 '#f null inspector_432)))"
"(values"
" type_433"
" maker_434"
" pred_435"
"(make-struct-field-accessor access_436 '0 'cell)"
"(make-struct-field-mutator mutate_437 '0 'cell))))))"
"(define-values"
"(current-break-parameterization)"
"(lambda()(make-break-paramz(continuation-mark-set-first '#f break-enabled-key))))"
"(define-values"
"(call-with-break-parameterization)"
"(lambda(paramz_438 thunk_439)"
"(begin"
"(if(break-paramz? paramz_438)"
"(void)"
"(let-values()"
" (raise-argument-error 'call-with-break-parameterization '\"break-parameterization?\" '0 paramz_438 thunk_439)))"
"(if(if(procedure? thunk_439)(procedure-arity-includes? thunk_439 '0) '#f)"
"(void)"
" (let-values () (raise-argument-error 'call-with-parameterization '\"(-> any)\" '1 paramz_438 thunk_439)))"
"(begin0"
"(with-continuation-mark"
" break-enabled-key"
"(break-paramz-ref paramz_438 '0)"
"(begin(check-for-break)(thunk_439)))"
"(check-for-break)))))"
"(define-values"
"(select-handler/no-breaks)"
"(lambda(e_440 bpz_441 l_442)"
"(with-continuation-mark"
" break-enabled-key"
"(make-thread-cell '#f)"
"((letrec-values(((loop_443)"
"(lambda(l_444)"
"(if(null? l_444)"
"(let-values()(raise e_440))"
"(if((caar l_444) e_440)"
"(let-values()"
"(begin0"
"((cdar l_444) e_440)"
"(with-continuation-mark break-enabled-key bpz_441(check-for-break))))"
"(let-values()(loop_443(cdr l_444))))))))"
" loop_443)"
" l_442))))"
"(define-values"
"(select-handler/breaks-as-is)"
"(lambda(e_445 bpz_446 l_447)"
"(if(null? l_447)"
"(let-values()(raise e_445))"
"(if((caar l_447) e_445)"
"(let-values()"
"(with-continuation-mark break-enabled-key bpz_446(begin(check-for-break)((cdar l_447) e_445))))"
"(let-values()(select-handler/breaks-as-is e_445 bpz_446(cdr l_447)))))))"
"(define-values(false-thread-cell)(make-thread-cell '#f))"
"(define-values"
"(check-with-handlers-in-context)"
"(lambda(handler-prompt-key_448)"
"(if(continuation-prompt-available? handler-prompt-key_448)"
"(void)"
" (let-values () (error 'with-handlers '\"exception handler used out of context\")))))"
"(define-values(handler-prompt-key)(make-continuation-prompt-tag))"
"(define-values"
"(call-handled-body)"
"(lambda(bpz_449 handle-proc_450 body-thunk_451)"
"(with-continuation-mark"
" break-enabled-key"
" false-thread-cell"
"(call-with-continuation-prompt"
"(lambda(bpz_452 body-thunk_453)"
"(with-continuation-mark"
" break-enabled-key"
" bpz_452"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(e_454)(abort-current-continuation handler-prompt-key e_454))"
"(body-thunk_453))))"
" handler-prompt-key"
" handle-proc_450"
" bpz_449"
" body-thunk_451))))"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_455 thunk_456)(begin0(with-continuation-mark exception-handler-key exnh_455(thunk_456))(void))))"
"(define-values(call/cc) call-with-current-continuation)"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_457)(gensym)))"
"(let-values(((up_458)"
"(lambda(who_459 mut?_460 set_461 ht_462 key_463 xform_464 default_465)"
"(begin"
"(if(if(hash? ht_462)(if mut?_460(not(immutable? ht_462))(immutable? ht_462)) '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_459"
" (if mut?_460 '\"(and/c hash? (not/c immutable?))\" '\"(and/c hash? immutable?)\")"
" ht_462)))"
"(if(if(procedure? xform_464)(procedure-arity-includes? xform_464 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error who_459 '\"(any/c . -> . any/c)\" xform_464)))"
"(let-values(((v_466)(hash-ref ht_462 key_463 default_465)))"
"(if(eq? v_466 not-there_457)"
" (raise-mismatch-error who_459 '\"no value found for key: \" key_463)"
"(set_461 ht_462 key_463(xform_464 v_466))))))))"
"(let-values(((hash-update_467)"
"(case-lambda"
"((ht_471 key_472 xform_473 default_474)"
"(up_458 'hash-update '#f hash-set ht_471 key_472 xform_473 default_474))"
"((ht_475 key_476 xform_477)(hash-update ht_475 key_476 xform_477 not-there_457))))"
"((hash-update!_468)"
"(case-lambda"
"((ht_478 key_479 xform_480 default_481)"
"(up_458 'hash-update! '#t hash-set! ht_478 key_479 xform_480 default_481))"
"((ht_482 key_483 xform_484)(hash-update! ht_482 key_483 xform_484 not-there_457))))"
"((hash-has-key?_469)"
"(lambda(ht_485 key_486)"
"(begin"
"(if(hash? ht_485)"
"(void)"
" (let-values () (raise-argument-error 'hash-has-key? '\"hash?\" '0 ht_485 key_486)))"
"(not(eq? not-there_457(hash-ref ht_485 key_486 not-there_457))))))"
"((hash-ref!_470)"
"(lambda(ht_487 key_488 new_489)"
"(begin"
"(if(if(hash? ht_487)(not(immutable? ht_487)) '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
" '\"(and/c hash? (not/c immutable?))\""
" '0"
" ht_487"
" key_488"
" new_489)))"
"(let-values(((v_490)(hash-ref ht_487 key_488 not-there_457)))"
"(if(eq? not-there_457 v_490)"
"(let-values(((n_491)(if(procedure? new_489)(new_489) new_489)))"
"(begin(hash-set! ht_487 key_488 n_491) n_491))"
" v_490))))))"
"(values hash-update_467 hash-update!_468 hash-has-key?_469 hash-ref!_470)))))"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" '#f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
" (let-values () (raise-argument-error 'normal-path-case '\"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
" (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
" '#rx\"/\""
" (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7)"
" s_7"
" (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 '\"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
" (let-values () (raise-argument-error who_10 '\"(or/c path-for-some-system? path-string?)\" '0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
" (let-values () (raise-argument-error who_10 '\"(or/c string? bytes?)\" '1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
" (let-values () (raise-mismatch-error who_10 '\"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 '0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
" (finish_24 (bytes-length bs_23) '#\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" '#f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
" (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension '#\"\" (lambda (bs_34 i_35) '#\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
" (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension '#\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
" '\"(or/c path-string? path-for-some-system?)\""
" '0"
" p_38"
" root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
" '\"(or/c path-string? path-for-some-system?)\""
" '1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
" '\"path is not complete and not the platform's convention\""
" '\"path\""
" p_38"
" '\"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
" '\"given paths use different conventions\""
" '\"path\""
" p_38"
" '\"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
" (if (bytes=? bstr_42 '#\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) '1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
" (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
" (bytes-append '#\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 '4 '5) '#\"\\\\\" (subbytes bstr_42 '6)))"
" (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
" (let-values () (bytes-append '#\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 '4)))"
" (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
" (let-values () (bytes-append '#\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 '4)))"
" (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
" (let-values () (bytes-append '#\"UNC\\\\\" (subbytes bstr_42 '2)))"
" (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 '0 '1)(subbytes bstr_42 '2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
" (let-values (((sep_3) (if (eq? (system-type) 'windows) '\";\" '\":\")))\n"
" (format '\"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
" (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 '#\"\") s_5)))"
" (if (bytes=? s_7 '#\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
" (let-values () (raise-argument-error 'path-list-string->path-list '\"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) '#f)"
"(void)"
" (let-values () (raise-argument-error 'path-list-string->path-list '\"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
" (let-values () (raise-argument-error 'find-executable-path '\"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) '#f)))"
"(void)"
"(let-values()"
" (raise-argument-error 'find-executable-path '\"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() '#f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) '#f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" '#f))"
" '#f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) '#f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" '#f)"
" (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) '#\"PATH\"))"
"((win-add_20)"
" (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path '#\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" '#f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) '#f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 '#f))"
"((program_29)(find-executable-path program_29 '#f '#f))))"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 '0) '#f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" read-case-sensitive"
" '#t"
" read-square-bracket-as-paren"
" '#t"
" read-curly-brace-as-paren"
" '#t"
" read-square-bracket-with-tag"
" '#f"
" read-curly-brace-with-tag"
" '#f"
" read-accept-box"
" '#t"
" read-accept-compiled"
" '#f"
" read-accept-bar-quote"
" '#t"
" read-accept-graph"
" '#t"
" read-decimal-as-inexact"
" '#t"
" read-cdot"
" '#f"
" read-accept-dot"
" '#t"
" read-accept-infix-dot"
" '#t"
" read-accept-quasiquote"
" '#t"
" read-accept-reader"
" '#f"
" read-accept-lang"
" '#t"
" current-readtable"
" '#f)"
"(let-values()(thunk_1)))"
" (raise-argument-error 'call-with-default-reading-parameterization '\"(procedure-arity-includes/c 0)\" thunk_1))))"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration '0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration '1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_1)"
"(if(complete-path? collects-path_1)"
"(let-values()(simplify-path collects-path_1))"
"(if(absolute-path? collects-path_1)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_1 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_1 '#t)))"
"(if p_6(simplify-path p_6) '#f)))))))"
"(define-values"
"(-check-relpath)"
"(lambda(who_1 s_2)"
"(begin"
" (if (path-string? s_2) (void) (let-values () (raise-argument-error who_1 '\"path-string?\" s_2)))"
"(if(relative-path? s_2)"
"(void)"
" (let-values () (raise-arguments-error who_1 '\"invalid relative path\" '\"path\" s_2))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_4 collection-path_5)"
"(begin(-check-relpath who_3 collection_4)(for-each(lambda(p_6)(-check-relpath who_3 p_6)) collection-path_5))))"
"(define-values"
"(-check-fail)"
"(lambda(who_7 fail_8)"
"(if(if(procedure? fail_8)(procedure-arity-includes? fail_8 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error who_7 '\"(any/c . -> . any)\" fail_8)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_9 collection_10 collection-path_11)"
"(begin"
"(-check-collection 'collection-path collection_10 collection-path_11)"
"(-check-fail 'collection-path fail_9)"
"(find-col-file fail_9 collection_10 collection-path_11 '#f '#f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_12 check-compiled?_13 file-name_14 collection_15 collection-path_16)"
"(begin"
"(-check-relpath 'collection-file-path file-name_14)"
"(-check-collection 'collection-file-path collection_15 collection-path_16)"
"(-check-fail 'collection-file-path fail_12)"
"(find-col-file fail_12 collection_15 collection-path_16 file-name_14 check-compiled?_13))))"
"(define-values"
"(get-config-table)"
"(lambda(d_17)"
" (let-values (((p_18) (if d_17 (build-path d_17 '\"config.rktd\") '#f)))"
"(let-values(((or-part_19)"
"(if p_18"
"(if(file-exists? p_18)"
"(with-input-from-file"
" p_18"
"(lambda()"
"(let-values(((v_20)(call-with-default-reading-parameterization read)))"
"(if(hash? v_20) v_20 '#f))))"
" '#f)"
" '#f)))"
"(if or-part_19 or-part_19 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_21)(hash-ref config-table_21 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_22)"
"(if(string? p_22)"
"(let-values()(collects-relative-path->complete-path(string->path p_22)))"
"(if(bytes? p_22)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_22)))"
"(if(path? p_22)(let-values()(collects-relative-path->complete-path p_22))(let-values() p_22))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_23)"
"(if(complete-path? p_23)"
"(let-values() p_23)"
"(let-values()"
"(path->complete-path"
" p_23"
"(let-values(((or-part_24)(find-main-collects)))(if or-part_24 or-part_24(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_25 key_26 orig-l_27)"
"(let-values(((l_28)(hash-ref ht_25 key_26 '#f)))"
"(if l_28"
"((letrec-values(((loop_29)"
"(lambda(l_30)"
"(if(null? l_30)"
"(let-values() null)"
"(if(not(car l_30))"
"(let-values()(append orig-l_27(loop_29(cdr l_30))))"
"(let-values()(cons(coerce-to-path(car l_30))(loop_29(cdr l_30)))))))))"
" loop_29)"
" l_28)"
" orig-l_27))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_31)(get-config-table(find-main-config))))"
"(let-values(((lf_32)"
"(coerce-to-path"
"(let-values(((or-part_33)(hash-ref ht_31 'links-file '#f)))"
"(if or-part_33"
" or-part_33"
"(build-path"
"(let-values(((or-part_34)(hash-ref ht_31 'share-dir '#f)))"
" (if or-part_34 or-part_34 (build-path 'up '\"share\")))"
" '\"links.rktd\"))))))"
"(append"
"(list '#f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) '#f)"
" (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_31) '\"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_31 'links-search-files(list lf_32)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout '0(cdr old-stamp_36))) '#f) '#f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() '#f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) '2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() '#f))"
"(loop_39 base_41))"
" '#f)))))"
" loop_39)"
" path_35)"
" '#f)))"
"(if(not(file-exists? path_35))"
"(cons '#f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) '2)"
"(filesystem-change-evt path_35(lambda() '#f))"
" '#f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes '8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) '8192) '#f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes '8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
" '\"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 '#f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
" (let-values () (error '\"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= '2(length p_62))))"
"(if or-part_63 or-part_63(= '3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" '#f)"
" '#f)"
" '#f)"
" '#f))"
" v_60)"
" '#f)"
"(void)"
" (let-values () (error '\"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 '#f '#f)"
"(void)"
"(let-values()(hash-set! ht_67 '#f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
" (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 '0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 '0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) '#f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 '#f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) '#t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
" '\"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
" '\"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
" '\"collection not found\\n collection: ~s\\n in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
" (string-append (to-string_103 collection_93) '\"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
" (lambda (p_119) (format '\"\\n ~a ~a\" '\" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) '5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
" '\"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
" '\"\\n sub-collection: ~s\\n in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
" (lambda (p_122) (format '\"\\n ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
" '\"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) '#t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 '4)"
"(if(string=?"
" '\".rkt\""
"(substring"
" file-name_127"
"(- len_128 '4)))"
"(string-append"
"(substring"
" file-name_127"
" '0"
"(- len_128 '4))"
" '\".ss\")"
" '#f)"
" '#f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" '#f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values(((or-part_129) found-col_112))"
"(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" '#f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
" (let-values (((try-path_134) (path-add-extension path_131 '#\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" '#f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_140)(find-library-collection-paths extra-collects-dirs_140 null))"
"((extra-collects-dirs_141 post-collects-dirs_142)"
"(let-values(((user-too?_143)(use-user-specific-search-paths))"
"((cons-if_144)(lambda(f_146 r_147)(if f_146(cons f_146 r_147) r_147)))"
"((config-table_145)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_143"
" (let-values (((c_148) (environment-variables-ref (current-environment-variables) '#\"PLTCOLLECTS\")))"
" (if c_148 (bytes->string/locale c_148 '#\\?) '\"\"))"
" '\"\")"
"(add-config-search"
" config-table_145"
" 'collects-search-dirs"
"(cons-if_144"
"(if user-too?_143"
" (build-path (find-system-path 'addon-dir) (get-installation-name config-table_145) '\"collects\")"
" '#f)"
"((letrec-values(((loop_149)"
"(lambda(l_150)"
"(if(null? l_150)"
" null"
"(let-values(((collects-path_151)(car l_150)))"
"(let-values(((v_152)(exe-relative-path->complete-path collects-path_151)))"
"(if v_152"
"(cons"
"(simplify-path(path->complete-path v_152(current-directory)))"
"(loop_149(cdr l_150)))"
"(loop_149(cdr l_150)))))))))"
" loop_149)"
"(append extra-collects-dirs_141(list(find-system-path 'collects-dir)) post-collects-dirs_142)))))))))"
"(define-values(load/use-compiled)(lambda(f_1)((current-load/use-compiled) f_1 '#f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 '#f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))"
"(if or-part_9 or-part_9 '0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 '0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max '0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" read-accept-compiled"
" '#t"
" read-accept-reader"
" '#t"
" read-accept-lang"
" '#t"
" read-on-demand-source"
" '#t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1534)"
"(if(keyword-impersonator? v_1534)(let-values()((keyword-impersonator-ref v_1534) v_1534))(let-values() '#f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" '#f"
" '4"
" '0"
" '#f"
"(list(cons prop:checked-procedure '#t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" '#f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref '0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref '1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref '2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref '3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure '0 '0 '#f(list(cons prop:method-arity-error '#t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1535)"
"(let-values(((req_1536 allowed_1537)(procedure-keywords proc_1535))"
"((a_1538)(procedure-arity proc_1535))"
"((keywords-desc_1539)"
"(lambda(opt_1541 req_1542)"
"(format"
" '\"~a with keyword~a~a\""
" (if (null? (cdr req_1542)) (format '\"an ~aargument\" opt_1541) (format '\"~aarguments\" opt_1541))"
" (if (null? (cdr req_1542)) '\"\" '\"s\")"
"(let-values(((tmp_1543)(length req_1542)))"
"(if(equal? tmp_1543 '1)"
" (let-values () (format '\" ~a\" (car req_1542)))"
"(if(equal? tmp_1543 '2)"
" (let-values () (format '\" ~a and ~a\" (car req_1542) (cadr req_1542)))"
"(let-values()"
"((letrec-values(((loop_1544)"
"(lambda(req_1545)"
"(if(null?(cdr req_1545))"
" (format '\" and ~a\" (car req_1545))"
" (format '\" ~a,~a\" (car req_1545) (loop_1544 (cdr req_1545)))))))"
" loop_1544)"
" req_1542))))))))"
"((method-adjust_1540)"
"(lambda(a_1546)"
"(if(let-values(((or-part_1547)(okm? proc_1535)))"
"(if or-part_1547 or-part_1547(keyword-method? proc_1535)))"
"(if(zero? a_1546) '0(sub1 a_1546))"
" a_1546))))"
"(string-append"
"(if(number? a_1538)"
" (let-values () (let-values (((a_1548) (method-adjust_1540 a_1538))) (format '\"~a\" a_1548)))"
"(if(arity-at-least? a_1538)"
"(let-values()"
"(let-values(((a_1549)(method-adjust_1540(arity-at-least-value a_1538))))"
" (format '\"at least ~a\" a_1549)))"
" (let-values () '\"a different number\")))"
" (if (null? req_1536) '\"\" (format '\" plus ~a\" (keywords-desc_1539 '\"\" req_1536)))"
"(if allowed_1537"
"(let-values(((others_1550)"
"((letrec-values(((loop_1551)"
"(lambda(req_1552 allowed_1553)"
"(if(null? req_1552)"
"(let-values() allowed_1553)"
"(if(eq?(car req_1552)(car allowed_1553))"
"(let-values()(loop_1551(cdr req_1552)(cdr allowed_1553)))"
"(let-values()"
"(cons(car allowed_1553)(loop_1551 req_1552(cdr allowed_1553)))))))))"
" loop_1551)"
" req_1536"
" allowed_1537)))"
" (if (null? others_1550) '\"\" (format '\" plus ~a\" (keywords-desc_1539 '\"optional \" others_1550))))"
" '\" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" '1"
" '0"
" '#f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" '0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp '0 '0 '#f(list(cons prop:method-arity-error '#t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(make-required)"
"(lambda(name_1554 fail-proc_1555 method?_1556 impersonator?_1557)"
"(let-values(((s:_1558 mk_1559 ?_1560 -ref_1561 -set!_1562)"
"(make-struct-type"
"(let-values(((or-part_1563) name_1554))(if or-part_1563 or-part_1563 'unknown))"
"(if impersonator?_1557"
"(if method?_1556 struct:keyword-method-impersonator struct:keyword-procedure-impersonator)"
"(if method?_1556 struct:keyword-method struct:keyword-procedure))"
" '0"
" '0"
" '#f"
"(list"
"(cons prop:arity-string generate-arity-string)"
"(cons prop:named-keyword-procedure(cons name_1554 fail-proc_1555))"
"(cons prop:incomplete-arity '#t))"
"(current-inspector)"
" fail-proc_1555)))"
" mk_1559)))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1564 info-l_1565)"
"(if(exact-integer? v_1564)(make-struct-field-accessor(list-ref info-l_1565 '3) v_1564) '#f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure '#f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure-impersonator make-kpp keyword-procedure-impersonator? kpp-ref kpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" '1"
" '0"
" '#f"
"(list(cons prop:keyword-impersonator(lambda(v_1566)(kpp-ref v_1566 '0))))))"
"(define-values"
"(struct:keyword-method-impersonator make-kmp keyword-method-impersonator? kmp-ref kmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-method"
" '1"
" '0"
" '#f"
"(list(cons prop:keyword-impersonator(lambda(v_1567)(kmp-ref v_1567 '0))))))"
"(define-values"
"(struct:okpp make-optional-keyword-procedure-impersonator okpp? okpp-ref okpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" '1"
" '0"
" '#f"
"(list(cons prop:keyword-impersonator(lambda(v_1568)(okpp-ref v_1568 '0))))))"
"(define-values"
"(struct:okmp make-optional-keyword-method-impersonator okmp? okmp-ref okmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" '1"
" '0"
" '#f"
"(list(cons prop:keyword-impersonator(lambda(v_1569)(okmp-ref v_1569 '0))))))"
"(define-values"
"(make-keyword-procedure)"
"(case-lambda"
"((proc_1570)(make-keyword-procedure proc_1570(lambda args_1571(apply proc_1570 null null args_1571))))"
"((proc_1572 plain-proc_1573)"
"(make-optional-keyword-procedure"
"(make-keyword-checker null '#f(procedure-arity proc_1572))"
" proc_1572"
" null"
" '#f"
" plain-proc_1573))))"
"(define-values"
"(keyword-apply)"
"(lambda(proc_1574 kws_1575 kw-vals_1576 normal-args_1577 . normal-argss_1578)"
"(let-values(((type-error_1579)"
"(lambda(what_1580 which_1581)"
"(apply"
" raise-argument-error"
" 'keyword-apply"
" what_1580"
" which_1581"
" proc_1574"
" kws_1575"
" kw-vals_1576"
" normal-args_1577"
" normal-argss_1578))))"
"(begin"
" (if (procedure? proc_1574) (void) (let-values () (type-error_1579 '\"procedure?\" '0)))"
"((letrec-values(((loop_1582)"
"(lambda(ks_1583)"
"(if(null? ks_1583)"
"(let-values()(void))"
"(if(let-values(((or-part_1584)(not(pair? ks_1583))))"
"(if or-part_1584 or-part_1584(not(keyword?(car ks_1583)))))"
" (let-values () (type-error_1579 '\"(listof keyword?)\" '1))"
"(if(null?(cdr ks_1583))"
"(let-values()(void))"
"(if(let-values(((or-part_1585)(not(pair?(cdr ks_1583)))))"
"(if or-part_1585 or-part_1585(not(keyword?(cadr ks_1583)))))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(if(keyword<?(car ks_1583)(cadr ks_1583))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(let-values()"
" (type-error_1579 '\"(and/c (listof? keyword?) sorted? distinct?)\" '1))))))))))"
" loop_1582)"
" kws_1575)"
" (if (list? kw-vals_1576) (void) (let-values () (type-error_1579 '\"list?\" '2)))"
"(if(=(length kws_1575)(length kw-vals_1576))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'keyword-apply"
" '\"keyword list length does not match value list length\""
" '\"keyword list length\""
"(length kws_1575)"
" '\"value list length\""
"(length kw-vals_1576)"
" '\"keyword list\""
" kws_1575"
" '\"value list\""
" kw-vals_1576)))"
"(let-values(((normal-args_1586)"
"((letrec-values(((loop_1587)"
"(lambda(normal-argss_1588 pos_1589)"
"(if(null?(cdr normal-argss_1588))"
"(let-values(((l_1590)(car normal-argss_1588)))"
" (if (list? l_1590) l_1590 (type-error_1579 '\"list?\" pos_1589)))"
"(cons"
"(car normal-argss_1588)"
"(loop_1587(cdr normal-argss_1588)(add1 pos_1589)))))))"
" loop_1587)"
"(cons normal-args_1577 normal-argss_1578)"
" '3)))"
"(if(null? kws_1575)"
"(apply proc_1574 normal-args_1586)"
"(apply"
"(keyword-procedure-extract/method kws_1575(+ '2(length normal-args_1586)) proc_1574 '0)"
" kws_1575"
" kw-vals_1576"
" normal-args_1586)))))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1591)"
"(if(keyword-procedure? p_1591)"
"(let-values()(values(keyword-procedure-required p_1591)(keyword-procedure-allowed p_1591)))"
"(if(procedure? p_1591)"
"(let-values()"
"(if(new-procedure? p_1591)"
"(let-values(((v_1592)(new-procedure-ref p_1591)))"
"(if(procedure? v_1592)"
"(procedure-keywords v_1592)"
"(let-values(((a_1593)(procedure-accessor-ref p_1591)))"
"(if a_1593(procedure-keywords(a_1593 p_1591))(values null null)))))"
"(values null null)))"
" (let-values () (raise-argument-error 'procedure-keywords '\"procedure?\" p_1591))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1594 . args_1595)(apply(keyword-procedure-extract/method null '0 proc_1594 '0) null null args_1595)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1596 kws_1597)"
"((letrec-values(((loop_1598)"
"(lambda(kws_1599 required_1600 allowed_1601)"
"(if(null? kws_1599)"
"(let-values()(if(null? required_1600)(values '#f '#f)(values(car required_1600) '#f)))"
"(if(if(pair? required_1600)(eq?(car required_1600)(car kws_1599)) '#f)"
"(let-values()"
"(loop_1598(cdr kws_1599)(cdr required_1600)(if allowed_1601(cdr allowed_1601) '#f)))"
"(if(not allowed_1601)"
"(let-values()(loop_1598(cdr kws_1599) required_1600 '#f))"
"(if(pair? allowed_1601)"
"(let-values()"
"(if(eq?(car allowed_1601)(car kws_1599))"
"(loop_1598(cdr kws_1599) required_1600(cdr allowed_1601))"
"(loop_1598 kws_1599 required_1600(cdr allowed_1601))))"
"(let-values()(values '#f(car kws_1599))))))))))"
" loop_1598)"
" kws_1597"
"(keyword-procedure-required p_1596)"
"(keyword-procedure-allowed p_1596))))"
"(define-values"
"(make-keyword-checker)"
"(lambda(req-kws_1602 allowed-kws_1603 arity_1604)"
"(if(not allowed-kws_1603)"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1615 a_1616)(if '#t(= a_1616 arity_1604) '#f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1617)(arity-at-least-value arity_1604)))"
"(lambda(kws_1618 a_1619)(if '#t(>= a_1619 arity_1617) '#f))))"
"(let-values()(lambda(kws_1620 a_1621)(if '#t(arity-includes? arity_1604 a_1621) '#f))))))"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1622 a_1623)(if(subset? req-kws_1602 kws_1622)(= a_1623 arity_1604) '#f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1624)(arity-at-least-value arity_1604)))"
"(lambda(kws_1625 a_1626)(if(subset? req-kws_1602 kws_1625)(>= a_1626 arity_1624) '#f))))"
"(let-values()"
"(lambda(kws_1627 a_1628)"
"(if(subset? req-kws_1602 kws_1627)(arity-includes? arity_1604 a_1628) '#f))))))))"
"(if(null? allowed-kws_1603)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1629 a_1630)(if(null? kws_1629)(= a_1630 arity_1604) '#f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1631)(arity-at-least-value arity_1604)))"
"(lambda(kws_1632 a_1633)(if(null? kws_1632)(>= a_1633 arity_1631) '#f))))"
"(let-values()"
"(lambda(kws_1634 a_1635)(if(null? kws_1634)(arity-includes? arity_1604 a_1635) '#f))))))"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1636 a_1637)(if(subset? kws_1636 allowed-kws_1603)(= a_1637 arity_1604) '#f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1638)(arity-at-least-value arity_1604)))"
"(lambda(kws_1639 a_1640)(if(subset? kws_1639 allowed-kws_1603)(>= a_1640 arity_1638) '#f))))"
"(let-values()"
"(lambda(kws_1641 a_1642)"
"(if(subset? kws_1641 allowed-kws_1603)(arity-includes? arity_1604 a_1642) '#f))))))"
"(let-values()"
"(if(equal? req-kws_1602 allowed-kws_1603)"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1643 a_1644)"
"(if((letrec-values(((loop_1645)"
"(lambda(kws_1646 req-kws_1647)"
"(if(null? req-kws_1647)"
"(null? kws_1646)"
"(if(null? kws_1646)"
" '#f"
"(if(eq?(car kws_1646)(car req-kws_1647))"
"(loop_1645(cdr kws_1646)(cdr req-kws_1647))"
" '#f))))))"
" loop_1645)"
" kws_1643"
" req-kws_1602)"
"(= a_1644 arity_1604)"
" '#f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1648)(arity-at-least-value arity_1604)))"
"(lambda(kws_1649 a_1650)"
"(if((letrec-values(((loop_1651)"
"(lambda(kws_1652 req-kws_1653)"
"(if(null? req-kws_1653)"
"(null? kws_1652)"
"(if(null? kws_1652)"
" '#f"
"(if(eq?(car kws_1652)(car req-kws_1653))"
"(loop_1651(cdr kws_1652)(cdr req-kws_1653))"
" '#f))))))"
" loop_1651)"
" kws_1649"
" req-kws_1602)"
"(>= a_1650 arity_1648)"
" '#f))))"
"(let-values()"
"(lambda(kws_1654 a_1655)"
"(if((letrec-values(((loop_1656)"
"(lambda(kws_1657 req-kws_1658)"
"(if(null? req-kws_1658)"
"(null? kws_1657)"
"(if(null? kws_1657)"
" '#f"
"(if(eq?(car kws_1657)(car req-kws_1658))"
"(loop_1656(cdr kws_1657)(cdr req-kws_1658))"
" '#f))))))"
" loop_1656)"
" kws_1654"
" req-kws_1602)"
"(arity-includes? arity_1604 a_1655)"
" '#f)))))"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1659 a_1660)"
"(if(subsets? req-kws_1602 kws_1659 allowed-kws_1603)(= a_1660 arity_1604) '#f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1661)(arity-at-least-value arity_1604)))"
"(lambda(kws_1662 a_1663)"
"(if(subsets? req-kws_1602 kws_1662 allowed-kws_1603)(>= a_1663 arity_1661) '#f))))"
"(let-values()"
"(lambda(kws_1664 a_1665)"
"(if(subsets? req-kws_1602 kws_1664 allowed-kws_1603)"
"(arity-includes? arity_1604 a_1665)"
" '#f)))))))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(arity_1666 a_1667)"
"(if(integer? arity_1666)"
"(let-values()(= arity_1666 a_1667))"
"(if(arity-at-least? arity_1666)"
"(let-values()(>= a_1667(arity-at-least-value a_1667)))"
"(let-values()(ormap(lambda(ar_1668)(arity-includes? ar_1668 a_1667)) arity_1666))))))"
"(define-values"
"(subset?)"
"(lambda(l1_1669 l2_1670)"
"(if(null? l1_1669)"
"(let-values() '#t)"
"(if(null? l2_1670)"
"(let-values() '#f)"
"(if(eq?(car l1_1669)(car l2_1670))"
"(let-values()(subset?(cdr l1_1669)(cdr l2_1670)))"
"(let-values()(subset? l1_1669(cdr l2_1670))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1671 l2_1672 l3_1673)"
"(if(null? l1_1671)"
"(let-values()(subset? l2_1672 l3_1673))"
"(if(null? l2_1672)"
"(let-values() '#f)"
"(if(null? l3_1673)"
"(let-values() '#f)"
"(let-values()"
"(let-values(((v2_1674)(car l2_1672)))"
"(if(eq?(car l1_1671) v2_1674)"
"(let-values()(subsets?(cdr l1_1671)(cdr l2_1672)(cdr l3_1673)))"
"(if(eq? v2_1674(car l3_1673))"
"(let-values()(subsets? l1_1671(cdr l2_1672)(cdr l3_1673)))"
"(let-values()(subsets? l1_1671 l2_1672(cdr l3_1673))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1675 n_1676 p_1677 method-n_1678)"
"(if(if(keyword-procedure? p_1677)((keyword-procedure-checker p_1677) kws_1675 n_1676) '#f)"
"(keyword-procedure-proc p_1677)"
"(let-values(((p2_1679)"
"(if(not(keyword-procedure? p_1677))"
"(if(procedure? p_1677)"
"(let-values(((or-part_1680)"
"(if(new-procedure? p_1677)"
"(let-values(((a_1681)(procedure-accessor-ref p_1677)))"
"(if a_1681(a_1681 p_1677) '#f))"
" '#f)))"
"(if or-part_1680"
" or-part_1680"
"(let-values(((or-part_1682)(procedure-extract-target p_1677)))"
"(if or-part_1682 or-part_1682(if(new-procedure? p_1677) 'method '#f)))))"
" '#f)"
" '#f)))"
"(if p2_1679"
"(if(eq? p2_1679 'method)"
"(let-values(((p3_1683)"
"(keyword-procedure-extract/method"
" kws_1675"
"(add1 n_1676)"
"(new-procedure-ref p_1677)"
"(add1 method-n_1678))))"
"(lambda(kws_1684 kw-args_1685 . args_1686)"
"(apply p3_1683 kws_1684 kw-args_1685(cons p_1677 args_1686))))"
"(keyword-procedure-extract/method kws_1675 n_1676 p2_1679 method-n_1678))"
"(lambda(kws_1687 kw-args_1688 . args_1689)"
"(let-values(((missing-kw_1690 extra-kw_1691)"
"(if(keyword-procedure? p_1677)(check-kw-args p_1677 kws_1687)(values '#f(car kws_1687)))))"
"(let-values(((n_1692)"
"(let-values(((method-n_1695)"
"(+"
" method-n_1678"
"(if(let-values(((or-part_1696)(keyword-method? p_1677)))"
"(if or-part_1696 or-part_1696(okm? p_1677)))"
" '1"
" '0))))"
"(if(>= n_1676 method-n_1695)(- n_1676 method-n_1695) n_1676)))"
"((args-str_1693)"
"(if(if(null? args_1689)(null? kws_1687) '#f)"
" '\"\""
"(apply"
" string-append"
" '\"\\n arguments...:\""
"(append"
" (map (lambda (v_1697) (format '\"\\n ~e\" v_1697)) args_1689)"
"(map"
" (lambda (kw_1698 kw-arg_1699) (format '\"\\n ~a ~e\" kw_1698 kw-arg_1699))"
" kws_1687"
" kw-args_1688)))))"
"((proc-name_1694)"
"(lambda(p_1700)"
"(let-values(((or-part_1701)"
"(if(named-keyword-procedure? p_1700)"
"(car(keyword-procedure-name+fail p_1700))"
" '#f)))"
"(if or-part_1701"
" or-part_1701"
"(let-values(((or-part_1702)(object-name p_1700)))"
"(if or-part_1702 or-part_1702 p_1700)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1691"
"(if(keyword-procedure? p_1677)"
"(format"
"(string-append"
" '\"application: procedure does not expect an argument with given keyword\\n\""
" '\" procedure: ~a\\n\""
" '\" given keyword: ~a\""
" '\"~a\")"
"(proc-name_1694 p_1677)"
" extra-kw_1691"
" args-str_1693)"
"(if(procedure? p_1677)"
"(format"
"(string-append"
" '\"application: procedure does not accept keyword arguments\\n\""
" '\" procedure: ~a\""
" '\"~a\")"
"(proc-name_1694 p_1677)"
" args-str_1693)"
"(format"
"(string-append"
" '\"application: not a procedure;\\n\"\n"
" '\" expected a procedure that can be applied to arguments\\n\""
" '\" given: ~e\""
" '\"~a\")"
" p_1677"
" args-str_1693)))"
"(if missing-kw_1690"
"(format"
"(string-append"
" '\"application: required keyword argument not supplied\\n\""
" '\" procedure: ~a\\n\""
" '\" required keyword: ~a\""
" '\"~a\")"
"(proc-name_1694 p_1677)"
" missing-kw_1690"
" args-str_1693)"
"(format"
"(string-append"
" '\"application: no case matching ~a non-keyword argument~a\\n\""
" '\" procedure: ~a\""
" '\"~a\")"
"(- n_1692 '2)"
" (if (= '1 (- n_1692 '2)) '\"\" '\"s\")"
"(proc-name_1694 p_1677)"
" args-str_1693)))"
"(current-continuation-marks)))))))))))"
"(define-values"
"(keyword-procedure-extract)"
"(lambda(p_1703 kws_1704 n_1705)(keyword-procedure-extract/method kws_1704 n_1705 p_1703 '0)))"
"(define-values"
"(procedure-reduce-keyword-arity)"
"(lambda(proc_1706 arity_1707 req-kw_1708 allowed-kw_1709)"
"(let-values(((plain-proc_1710)"
"(procedure-reduce-arity(if(okp? proc_1706)(okp-ref proc_1706 '0) proc_1706) arity_1707)))"
"(let-values(((sorted?_1711)"
"(lambda(kws_1712)"
"((letrec-values(((loop_1713)"
"(lambda(kws_1714)"
"(if(null? kws_1714)"
"(let-values() '#t)"
"(if(null?(cdr kws_1714))"
"(let-values() '#t)"
"(if(keyword<?(car kws_1714)(cadr kws_1714))"
"(let-values()(loop_1713(cdr kws_1714)))"
"(let-values() '#f)))))))"
" loop_1713)"
" kws_1712))))"
"(begin"
"(if(if(list? req-kw_1708)(if(andmap keyword? req-kw_1708)(sorted?_1711 req-kw_1708) '#f) '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'procedure-reduce-keyword-arity"
" '\"(and/c (listof? keyword?) sorted? distinct?)\""
" '2"
" proc_1706"
" arity_1707"
" req-kw_1708"
" allowed-kw_1709)))"
"(if allowed-kw_1709"
"(let-values()"
"(begin"
"(if(if(list? allowed-kw_1709)"
"(if(andmap keyword? allowed-kw_1709)(sorted?_1711 allowed-kw_1709) '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'procedure-reduce-keyword-arity"
" '\"(or/c (and/c (listof? keyword?) sorted? distinct?) #f)\""
" '3"
" proc_1706"
" arity_1707"
" req-kw_1708"
" allowed-kw_1709)))"
"(if(subset? req-kw_1708 allowed-kw_1709)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'procedure-reduce-keyword-arity"
" '\"allowed-keyword list does not include all required keywords\""
" '\"allowed-keyword list\""
" allowed-kw_1709"
" '\"required keywords\""
" req-kw_1708)))))"
"(void))"
"(let-values(((old-req_1715 old-allowed_1716)(procedure-keywords proc_1706)))"
"(begin"
"(if(subset? old-req_1715 req-kw_1708)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'procedure-reduce-keyword-arity"
" '\"cannot reduce required keyword set\""
" '\"required keywords\""
" old-req_1715"
" '\"requested required keywords\""
" req-kw_1708)))"
"(if old-allowed_1716"
"(let-values()"
"(begin"
"(if(subset? req-kw_1708 old-allowed_1716)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'procedure-reduce-keyword-arity"
" '\"cannot require keywords not in original allowed set\""
" '\"original allowed keywords\""
" old-allowed_1716"
" '\"requested required keywords\""
" req-kw_1708)))"
"(if(let-values(((or-part_1717)(not allowed-kw_1709)))"
"(if or-part_1717 or-part_1717(subset? allowed-kw_1709 old-allowed_1716)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'procedure-reduce-keyword-arity"
" '\"cannot allow keywords not in original allowed set\""
" '\"original allowed keywords\""
" old-allowed_1716"
" '\"requested allowed keywords\""
" allowed-kw_1709)))))"
"(void))))"
"(if(null? allowed-kw_1709)"
" plain-proc_1710"
"(let-values(((inc-arity_1718)"
"(lambda(arity_1719 delta_1720)"
"((letrec-values(((loop_1721)"
"(lambda(a_1722)"
"(if(integer? a_1722)"
"(let-values()(+ a_1722 delta_1720))"
"(if(arity-at-least? a_1722)"
"(let-values()"
"(arity-at-least(+(arity-at-least-value a_1722) delta_1720)))"
"(let-values()(map loop_1721 a_1722)))))))"
" loop_1721)"
" arity_1719))))"
"(let-values(((new-arity_1723)(inc-arity_1718 arity_1707 '2)))"
"(let-values(((kw-checker_1724)(make-keyword-checker req-kw_1708 allowed-kw_1709 new-arity_1723)))"
"(let-values(((proc_1725)(normalize-proc proc_1706)))"
"(let-values(((new-kw-proc_1726)"
"(procedure-reduce-arity(keyword-procedure-proc proc_1725) new-arity_1723)))"
"(if(null? req-kw_1708)"
"((if(okm? proc_1725) make-optional-keyword-method make-optional-keyword-procedure)"
" kw-checker_1724"
" new-kw-proc_1726"
" req-kw_1708"
" allowed-kw_1709"
" plain-proc_1710)"
"((make-required"
"(let-values(((or-part_1727)"
"(if(named-keyword-procedure? proc_1725)"
"(car(keyword-procedure-name+fail proc_1725))"
" '#f)))"
"(if or-part_1727 or-part_1727(object-name proc_1725)))"
"(procedure-reduce-arity missing-kw(inc-arity_1718 arity_1707 '1))"
"(let-values(((or-part_1728)(okm? proc_1725)))"
"(if or-part_1728 or-part_1728(keyword-method? proc_1725)))"
" '#f)"
" kw-checker_1724"
" new-kw-proc_1726"
" req-kw_1708"
" allowed-kw_1709)))))))))))))"
"(define-values"
"(new:procedure-reduce-arity)"
"(let-values(((procedure-reduce-arity_1729)"
"(lambda(proc_1730 arity_1731)"
"(if(if(procedure? proc_1730)"
"(if(let-values(((req_1732 allows_1733)(procedure-keywords proc_1730)))(pair? req_1732))"
"(not(null? arity_1731))"
" '#f)"
" '#f)"
"(raise-arguments-error"
" 'procedure-reduce-arity"
" '\"procedure has required keyword arguments\""
" '\"procedure\""
" proc_1730)"
"(procedure-reduce-arity"
"(if(okm? proc_1730)(procedure->method proc_1730) proc_1730)"
" arity_1731)))))"
" procedure-reduce-arity_1729))"
"(define-values"
"(new:procedure->method)"
"(let-values(((procedure->method_1734)"
"(lambda(proc_1735)"
"(let-values(((proc_1736)(normalize-proc proc_1735)))"
"(if(keyword-procedure? proc_1736)"
"(if(okm? proc_1736)"
"(let-values() proc_1736)"
"(if(keyword-method? proc_1736)"
"(let-values() proc_1736)"
"(if(okp? proc_1736)"
"(let-values()"
"(make-optional-keyword-method"
"(keyword-procedure-checker proc_1736)"
"(keyword-procedure-proc proc_1736)"
"(keyword-procedure-required proc_1736)"
"(keyword-procedure-allowed proc_1736)"
"(okp-ref proc_1736 '0)))"
"(let-values()"
"(let-values(((name+fail_1737)(keyword-procedure-name+fail proc_1736)))"
"(let-values(((mk_1738)"
"(make-required(car name+fail_1737)(cdr name+fail_1737) '#t '#f)))"
"(mk_1738"
"(keyword-procedure-checker proc_1736)"
"(keyword-procedure-proc proc_1736)"
"(keyword-procedure-required proc_1736)"
"(keyword-procedure-allowed proc_1736))))))))"
"(procedure->method proc_1736))))))"
" procedure->method_1734))"
"(define-values"
"(new:procedure-rename)"
"(let-values(((procedure-rename_1739)"
"(lambda(proc_1740 name_1741)"
"(if(not(if(keyword-procedure? proc_1740)(symbol? name_1741) '#f))"
"(procedure-rename proc_1740 name_1741)"
"(if(okp? proc_1740)"
"(let-values()"
"((if(okm? proc_1740) make-optional-keyword-procedure make-optional-keyword-method)"
"(keyword-procedure-checker proc_1740)"
"(keyword-procedure-proc proc_1740)"
"(keyword-procedure-required proc_1740)"
"(keyword-procedure-allowed proc_1740)"
"(procedure-rename(okp-ref proc_1740 '0) name_1741)))"
"(let-values()"
"(let-values(((name+fail_1742)(keyword-procedure-name+fail proc_1740)))"
"(let-values(((mk_1743)"
"(make-required name_1741(cdr name+fail_1742)(keyword-method? proc_1740) '#f)))"
"(mk_1743"
"(keyword-procedure-checker proc_1740)"
"(keyword-procedure-proc proc_1740)"
"(keyword-procedure-required proc_1740)"
"(keyword-procedure-allowed proc_1740))))))))))"
" procedure-rename_1739))"
"(define-values"
"(new:chaperone-procedure)"
"(let-values(((chaperone-procedure_1744)"
"(lambda(proc_1745 wrap-proc_1746 . props_1747)"
"(do-chaperone-procedure"
" '#f"
" '#f"
" chaperone-procedure"
" 'chaperone-procedure"
" proc_1745"
" wrap-proc_1746"
" props_1747))))"
" chaperone-procedure_1744))"
"(define-values"
"(new:unsafe-chaperone-procedure)"
"(let-values(((unsafe-chaperone-procedure_1748)"
"(lambda(proc_1749 wrap-proc_1750 . props_1751)"
"(do-unsafe-chaperone-procedure"
" unsafe-chaperone-procedure"
" 'unsafe-chaperone-procedure"
" proc_1749"
" wrap-proc_1750"
" props_1751))))"
" unsafe-chaperone-procedure_1748))"
"(define-values"
"(new:impersonate-procedure)"
"(let-values(((impersonate-procedure_1752)"
"(lambda(proc_1753 wrap-proc_1754 . props_1755)"
"(do-chaperone-procedure"
" '#t"
" '#f"
" impersonate-procedure"
" 'impersonate-procedure"
" proc_1753"
" wrap-proc_1754"
" props_1755))))"
" impersonate-procedure_1752))"
"(define-values"
"(new:unsafe-impersonate-procedure)"
"(let-values(((unsafe-impersonate-procedure_1756)"
"(lambda(proc_1757 wrap-proc_1758 . props_1759)"
"(do-unsafe-chaperone-procedure"
" unsafe-impersonate-procedure"
" 'unsafe-impersonate-procedure"
" proc_1757"
" wrap-proc_1758"
" props_1759))))"
" unsafe-impersonate-procedure_1756))"
"(define-values"
"(new:chaperone-procedure*)"
"(let-values(((chaperone-procedure*_1760)"
"(lambda(proc_1761 wrap-proc_1762 . props_1763)"
"(do-chaperone-procedure"
" '#f"
" '#t"
" chaperone-procedure*"
" 'chaperone-procedure"
" proc_1761"
" wrap-proc_1762"
" props_1763))))"
" chaperone-procedure*_1760))"
"(define-values"
"(new:impersonate-procedure*)"
"(let-values(((impersonate-procedure*_1764)"
"(lambda(proc_1765 wrap-proc_1766 . props_1767)"
"(do-chaperone-procedure"
" '#t"
" '#t"
" impersonate-procedure*"
" 'impersonate-procedure"
" proc_1765"
" wrap-proc_1766"
" props_1767))))"
" impersonate-procedure*_1764))"
"(define-values"
"(do-chaperone-procedure)"
"(lambda(is-impersonator?_1768 self-arg?_1769 chaperone-procedure_1770 name_1771 proc_1772 wrap-proc_1773 props_1774)"
"(let-values(((n-proc_1775)(normalize-proc proc_1772))((n-wrap-proc_1776)(normalize-proc wrap-proc_1773)))"
"(if(let-values(((or-part_1777)(not(keyword-procedure? n-proc_1775))))"
"(if or-part_1777"
" or-part_1777"
"(let-values(((or-part_1778)(not(procedure? wrap-proc_1773))))"
"(if or-part_1778 or-part_1778(bad-props? props_1774)))))"
"(apply chaperone-procedure_1770 proc_1772 wrap-proc_1773 props_1774)"
"(begin"
"(chaperone-arity-match-checking self-arg?_1769 name_1771 proc_1772 wrap-proc_1773 props_1774)"
"(let-values(((kw-chaperone_1779)"
"(let-values(((p_1780)(keyword-procedure-proc n-wrap-proc_1776)))"
"(if self-arg?_1769"
"(case-lambda"
"((self-proc_1791 kws_1792 args_1793 . rest_1794)"
"(call-with-values"
"(lambda()(apply p_1780 kws_1792 args_1793 self-proc_1791 rest_1794))"
"(lambda results_1795"
"(let-values(((len_1796)(length results_1795)))"
"(let-values(((alen_1797)(length rest_1794)))"
"(begin"
"(if(< len_1796(+ alen_1797 '1))"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
" '\"wrong number of results from wrapper procedure\""
" '\"expected minimum number of results\""
"(+ alen_1797 '1)"
" '\"received number of results\""
" len_1796"
" '\"wrapper procedure\""
" wrap-proc_1773))"
"(void))"
"(let-values(((num-extra_1798)(- len_1796(+ alen_1797 '1))))"
"(begin"
"(let-values(((new-args_1799)(list-ref results_1795 num-extra_1798)))"
"(begin"
"(if(if(list? new-args_1799)"
"(=(length new-args_1799)(length args_1793))"
" '#f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"(format"
" '\"expected a list of keyword-argument values as first result~a from wrapper procedure\""
"(if(= len_1796 alen_1797)"
" '\"\""
" '\" (after the result-wrapper procedure or mark specifications)\"))"
" '\"first result\""
" new-args_1799"
" '\"wrapper procedure\""
" wrap-proc_1773)))"
"(for-each"
"(lambda(kw_1800 new-arg_1801 arg_1802)"
"(if is-impersonator?_1768"
"(void)"
"(let-values()"
"(if(chaperone-of? new-arg_1801 arg_1802)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"(format"
" '\"~a keyword result is not a chaperone of original argument from chaperoning procedure\""
" kw_1800)"
" '\"result\""
" new-arg_1801"
" '\"wrapper procedure\""
" wrap-proc_1773))))))"
" kws_1792"
" new-args_1799"
" args_1793)))"
"(let-values(((tmp_1803) num-extra_1798))"
"(if(equal? tmp_1803 '0)"
"(let-values()(apply values kws_1792 results_1795))"
"(if(equal? tmp_1803 '1)"
"(let-values()"
"(apply values(car results_1795) kws_1792(cdr results_1795)))"
"(let-values()"
"(apply"
" values"
"((letrec-values(((loop_1804)"
"(lambda(results_1805 c_1806)"
"(if(zero? c_1806)"
"(cons kws_1792 results_1805)"
"(cons"
"(car results_1805)"
"(loop_1804"
"(cdr results_1805)"
"(sub1 c_1806)))))))"
" loop_1804)"
" results_1795"
" num-extra_1798))))))))))))))"
" (other_1807 (error '\"shouldn't get here\")))"
"(case-lambda"
"((kws_1808 args_1809 . rest_1810)"
"(call-with-values"
"(lambda()(apply p_1780 kws_1808 args_1809 rest_1810))"
"(lambda results_1811"
"(let-values(((len_1812)(length results_1811)))"
"(let-values(((alen_1813)(length rest_1810)))"
"(begin"
"(if(< len_1812(+ alen_1813 '1))"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
" '\"wrong number of results from wrapper procedure\""
" '\"expected minimum number of results\""
"(+ alen_1813 '1)"
" '\"received number of results\""
" len_1812"
" '\"wrapper procedure\""
" wrap-proc_1773))"
"(void))"
"(let-values(((num-extra_1814)(- len_1812(+ alen_1813 '1))))"
"(begin"
"(let-values(((new-args_1815)(list-ref results_1811 num-extra_1814)))"
"(begin"
"(if(if(list? new-args_1815)"
"(=(length new-args_1815)(length args_1809))"
" '#f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"(format"
" '\"expected a list of keyword-argument values as first result~a from wrapper procedure\""
"(if(= len_1812 alen_1813)"
" '\"\""
" '\" (after the result-wrapper procedure or mark specifications)\"))"
" '\"first result\""
" new-args_1815"
" '\"wrapper procedure\""
" wrap-proc_1773)))"
"(for-each"
"(lambda(kw_1816 new-arg_1817 arg_1818)"
"(if is-impersonator?_1768"
"(void)"
"(let-values()"
"(if(chaperone-of? new-arg_1817 arg_1818)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"(format"
" '\"~a keyword result is not a chaperone of original argument from chaperoning procedure\""
" kw_1816)"
" '\"result\""
" new-arg_1817"
" '\"wrapper procedure\""
" wrap-proc_1773))))))"
" kws_1808"
" new-args_1815"
" args_1809)))"
"(let-values(((tmp_1819) num-extra_1814))"
"(if(equal? tmp_1819 '0)"
"(let-values()(apply values kws_1808 results_1811))"
"(if(equal? tmp_1819 '1)"
"(let-values()"
"(apply values(car results_1811) kws_1808(cdr results_1811)))"
"(let-values()"
"(apply"
" values"
"((letrec-values(((loop_1820)"
"(lambda(results_1821 c_1822)"
"(if(zero? c_1822)"
"(cons kws_1808 results_1821)"
"(cons"
"(car results_1821)"
"(loop_1820"
"(cdr results_1821)"
"(sub1 c_1822)))))))"
" loop_1820)"
" results_1811"
" num-extra_1814))))))))))))))"
" (other_1823 (error '\"shouldn't get here\")))))))"
"(let-values(((new-proc_1824 chap-accessor_1825)"
"((letrec-values(((wrap_1826)"
"(lambda(proc_1827 n-proc_1828)"
"(if(if(not(eq? n-proc_1828 proc_1827))(new-procedure? proc_1827) '#f)"
"(let-values()"
"(let-values(((v_1829)(new-procedure-ref proc_1827)))"
"(if(exact-integer? v_1829)"
"(let-values()"
"(let-values(((acc_1830)(procedure-accessor-ref proc_1827)))"
"(values"
"(chaperone-struct"
" proc_1827"
" acc_1830"
"(lambda(self_1831 sub-proc_1832)"
"(let-values(((f_1833 acc_1834)"
"(wrap_1826"
" sub-proc_1832"
"(normalize-proc sub-proc_1832))))"
" f_1833)))"
" acc_1830)))"
"(let-values()"
"(values"
"(chaperone-struct"
" proc_1827"
" new-procedure-ref"
"(lambda(self_1835 proc_1836)"
"(chaperone-procedure_1770"
" proc_1836"
"(make-keyword-procedure"
"(let-values()"
"(if self-arg?_1769"
"(lambda(proc-self_1847"
" kws_1848"
" kw-args_1849"
" self_1850"
" ."
" args_1851)"
"(let-values(((len_1852)(length args_1851)))"
"(call-with-values"
"(lambda()"
"(apply"
" kw-chaperone_1779"
" proc-self_1847"
" kws_1848"
" kw-args_1849"
" args_1851))"
"(lambda results_1853"
"(if(=(length results_1853)(add1 len_1852))"
"(apply"
" values"
"(car results_1853)"
" self_1850"
"(cdr results_1853))"
"(apply"
" values"
"(car results_1853)"
"(cadr results_1853)"
" self_1850"
"(cddr results_1853)))))))"
"(lambda(kws_1854 kw-args_1855 self_1856 . args_1857)"
"(let-values(((len_1858)(length args_1857)))"
"(call-with-values"
"(lambda()"
"(apply"
" kw-chaperone_1779"
" kws_1854"
" kw-args_1855"
" args_1857))"
"(lambda results_1859"
"(if(=(length results_1859)(add1 len_1858))"
"(apply"
" values"
"(car results_1859)"
" self_1856"
"(cdr results_1859))"
"(apply"
" values"
"(car results_1859)"
"(cadr results_1859)"
" self_1856"
"(cddr results_1859)))))))))))))"
" new-procedure-ref)))))"
"(if(okp? n-proc_1828)"
"(let-values()"
"(values"
"(if is-impersonator?_1768"
"((if(okm? n-proc_1828)"
" make-optional-keyword-method-impersonator"
" make-optional-keyword-procedure-impersonator)"
"(keyword-procedure-checker n-proc_1828)"
"(chaperone-procedure_1770"
"(keyword-procedure-proc n-proc_1828)"
" kw-chaperone_1779)"
"(keyword-procedure-required n-proc_1828)"
"(keyword-procedure-allowed n-proc_1828)"
"(chaperone-procedure_1770"
"(okp-ref n-proc_1828 '0)"
"(okp-ref n-wrap-proc_1776 '0))"
" n-proc_1828)"
"(chaperone-struct"
" proc_1827"
" keyword-procedure-proc"
"(lambda(self_1860 proc_1861)"
"(chaperone-procedure_1770 proc_1861 kw-chaperone_1779))"
"(make-struct-field-accessor okp-ref '0)"
"(lambda(self_1862 proc_1863)"
"(chaperone-procedure_1770"
" proc_1863"
"(okp-ref n-wrap-proc_1776 '0)))))"
" keyword-procedure-proc))"
"(let-values()"
"(values"
"(if is-impersonator?_1768"
"(let-values(((name+fail_1864)"
"(keyword-procedure-name+fail n-proc_1828)))"
"(let-values(((mk_1865)"
"(make-required"
"(car name+fail_1864)"
"(cdr name+fail_1864)"
"(keyword-method? n-proc_1828)"
" '#t)))"
"(mk_1865"
"(keyword-procedure-checker n-proc_1828)"
"(chaperone-procedure_1770"
"(keyword-procedure-proc n-proc_1828)"
" kw-chaperone_1779)"
"(keyword-procedure-required n-proc_1828)"
"(keyword-procedure-allowed n-proc_1828)"
" n-proc_1828)))"
"(chaperone-struct"
" n-proc_1828"
" keyword-procedure-proc"
"(lambda(self_1866 proc_1867)"
"(chaperone-procedure_1770 proc_1867 kw-chaperone_1779))))"
" keyword-procedure-proc)))))))"
" wrap_1826)"
" proc_1772"
" n-proc_1775)))"
"(if(null? props_1774)"
" new-proc_1824"
"(apply chaperone-struct new-proc_1824 chap-accessor_1825 '#f props_1774)))))))))"
"(define-values"
"(do-unsafe-chaperone-procedure)"
"(lambda(unsafe-chaperone-procedure_1868 name_1869 proc_1870 wrap-proc_1871 props_1872)"
"(let-values(((n-proc_1873)(normalize-proc proc_1870))((n-wrap-proc_1874)(normalize-proc wrap-proc_1871)))"
"(if(let-values(((or-part_1875)(not(keyword-procedure? n-proc_1873))))"
"(if or-part_1875"
" or-part_1875"
"(let-values(((or-part_1876)(not(procedure? wrap-proc_1871))))"
"(if or-part_1876 or-part_1876(bad-props? props_1872)))))"
"(apply unsafe-chaperone-procedure_1868 proc_1870 wrap-proc_1871 props_1872)"
"(begin"
"(chaperone-arity-match-checking '#f name_1869 proc_1870 wrap-proc_1871 props_1872)"
"(apply unsafe-chaperone-procedure_1868 proc_1870 wrap-proc_1871 props_1872))))))"
"(define-values"
"(bad-props?)"
"(lambda(props_1877)"
"((letrec-values(((loop_1878)"
"(lambda(props_1879)"
"(if(null? props_1879)"
"(let-values() '#f)"
"(if(impersonator-property?(car props_1879))"
"(let-values()"
"(let-values(((props_1880)(cdr props_1879)))"
"(let-values(((or-part_1881)(null? props_1880)))"
"(if or-part_1881 or-part_1881(loop_1878(cdr props_1880))))))"
"(let-values() '#t))))))"
" loop_1878)"
" props_1877)))"
"(define-values"
"(chaperone-arity-match-checking)"
"(lambda(self-arg?_1882 name_1883 proc_1884 wrap-proc_1885 props_1886)"
"(let-values(((a_1887)(procedure-arity proc_1884))"
"((b_1888)(procedure-arity wrap-proc_1885))"
"((d_1889)(if self-arg?_1882 '1 '0))"
"((a-req_1890 a-allow_1891)(procedure-keywords proc_1884))"
"((b-req_1892 b-allow_1893)(procedure-keywords wrap-proc_1885)))"
"(letrec-values(((includes?_1894)"
"(lambda(a_1895 b_1896)"
"(if(number? b_1896)"
"(let-values()"
"(if(number? a_1895)"
"(let-values()(= b_1896(+ a_1895 d_1889)))"
"(if(arity-at-least? a_1895)"
"(let-values()(>= b_1896(+(arity-at-least-value a_1895) d_1889)))"
"(let-values()(ormap(lambda(a_1897)(includes?_1894 a_1897 b_1896)) a_1895)))))"
"(if(arity-at-least? b_1896)"
"(let-values()"
"(if(number? a_1895)"
"(let-values() '#f)"
"(if(arity-at-least? a_1895)"
"(let-values()"
"(>=(arity-at-least-value b_1896)(+(arity-at-least-value a_1895) d_1889)))"
"(let-values()(ormap(lambda(a_1898)(includes?_1894 b_1896 a_1898)) a_1895)))))"
"(let-values()(andmap(lambda(b_1899)(includes?_1894 a_1895 b_1899)) b_1896)))))))"
"(begin"
"(if(includes?_1894 b_1888 a_1887)"
"(void)"
"(let-values()(apply chaperone-procedure proc_1884 wrap-proc_1885 props_1886)))"
"(if(subset? b-req_1892 a-req_1890)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" name_1883"
" '\"wrapper procedure requires more keywords than original procedure\""
" '\"wrapper procedure\""
" wrap-proc_1885"
" '\"original procedure\""
" proc_1884)))"
"(if(let-values(((or-part_1900)(not b-allow_1893)))"
"(if or-part_1900 or-part_1900(if a-allow_1891(subset? a-allow_1891 b-allow_1893) '#f)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" name_1883"
" '\"wrapper procedure does not accept all keywords of original procedure\""
" '\"wrapper procedure\""
" wrap-proc_1885"
" '\"original procedure\""
" proc_1884)))"
"(void))))))"
"(define-values"
"(normalize-proc)"
"(lambda(proc_1901)"
"(if(keyword-procedure? proc_1901)"
"(let-values() proc_1901)"
"(if(new-procedure? proc_1901)"
"(let-values()"
"(let-values(((req-kws_1902 allowed-kws_1903)(procedure-keywords proc_1901)))"
"(if(null? allowed-kws_1903)"
" proc_1901"
"(make-optional-keyword-procedure"
"(lambda(given-kws_1904 given-argc_1905)"
"(if(procedure-arity-includes? proc_1901(- given-argc_1905 '2) '#t)"
"(if(let-values(((or-part_1906)(not allowed-kws_1903)))"
"(if or-part_1906 or-part_1906(subset? given-kws_1904 allowed-kws_1903)))"
"(subset? req-kws_1902 given-kws_1904)"
" '#f)"
" '#f))"
"(lambda(kws_1907 kw-args_1908 . vals_1909)(keyword-apply proc_1901 kws_1907 kw-args_1908 vals_1909))"
" req-kws_1902"
" allowed-kws_1903"
" proc_1901))))"
"(let-values() proc_1901)))))"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
" (if (list? l_2) (void) (raise-argument-error 'reverse '\"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence '#f '1 '0 '#f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2558 si_2559)"
"(begin"
"(if(if(vector? v_2558)"
"(if(= '3(vector-length v_2558))"
"(if(procedure?(vector-ref v_2558 '0))"
"(if(procedure-arity-includes?(vector-ref v_2558 '0) '1)"
"(if(procedure?(vector-ref v_2558 '1))"
"(if(procedure-arity-includes?(vector-ref v_2558 '1) '1)"
"(if(procedure?(vector-ref v_2558 '2))"
"(procedure-arity-includes?(vector-ref v_2558 '2) '1)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
" '\"(vector/c (procedure-arity-includes/c 1)\\n\""
" '\" (procedure-arity-includes/c 1)\\n\""
" '\" (procedure-arity-includes/c 1))\")"
" v_2558)))"
"(vector->immutable-vector v_2558)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2560 si_2561)"
"(begin"
"(if(if(procedure? v_2560)(procedure-arity-includes? v_2560 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'guard-for-prop:sequence '\"(procedure-arity-includes/c 1)\" v_2560)))"
" v_2560))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2562 sinfo_2563)"
"(begin"
"(if(if(procedure? v_2562)(procedure-arity-includes? v_2562 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'sequence-property-guard '\"(procedure-arity-includes/c 1)\" v_2562)))"
"(lambda(self_2564)"
"(let-values(((s_2565)(v_2562 self_2564)))"
"(begin"
"(if(sequence? s_2565)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
" '\"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2565)))"
" s_2565)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2566)"
"(let-values(((or-part_2567)(list? v_2566)))(if or-part_2567 or-part_2567(stream-via-prop? v_2566)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2568)"
"(if(null? v_2568)"
" '#f"
"(let-values(((or-part_2569)(pair? v_2568)))"
"(if or-part_2569 or-part_2569(not((unsafe-vector-ref(stream-ref v_2568) '0) v_2568)))))))"
"(define-values"
"(stream-empty?)"
"(lambda(v_2570)"
"(let-values(((or-part_2571)(null? v_2570)))"
"(if or-part_2571"
" or-part_2571"
"(if(stream? v_2570)"
"(if(pair? v_2570) '#f((unsafe-vector-ref(stream-ref v_2570) '0) v_2570))"
" (raise-argument-error 'stream-empty? '\"stream?\" v_2570))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2572)"
"(if(pair? v_2572)"
"(let-values()(car v_2572))"
"(let-values()((unsafe-vector-ref(stream-ref v_2572) '1) v_2572)))))"
"(define-values"
"(stream-first)"
"(lambda(v_2573)"
"(if(if(stream? v_2573)(not(stream-empty? v_2573)) '#f)"
"(unsafe-stream-first v_2573)"
" (raise-argument-error 'stream-first '\"(and/c stream? (not/c stream-empty?))\" v_2573))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2574)"
"(if(pair? v_2574)"
"(let-values()(cdr v_2574))"
"(let-values()"
"(let-values(((r_2575)((unsafe-vector-ref(stream-ref v_2574) '2) v_2574)))"
"(begin"
"(if(stream? r_2575)"
"(void)"
" (let-values () (raise-mismatch-error 'stream-rest-guard '\"result is not a stream: \" r_2575)))"
" r_2575))))))"
"(define-values"
"(stream-rest)"
"(lambda(v_2576)"
"(if(if(stream? v_2576)(not(stream-empty? v_2576)) '#f)"
"(unsafe-stream-rest v_2576)"
" (raise-argument-error 'stream-rest '\"(and/c stream? (not/c stream-empty?))\" v_2576))))"
"(define-values"
"(sequence?)"
"(lambda(v_2577)"
"(let-values(((or-part_2578)(exact-nonnegative-integer? v_2577)))"
"(if or-part_2578"
" or-part_2578"
"(let-values(((or-part_2579)(do-sequence? v_2577)))"
"(if or-part_2579"
" or-part_2579"
"(let-values(((or-part_2580)(sequence-via-prop? v_2577)))"
"(if or-part_2580"
" or-part_2580"
"(let-values(((or-part_2581)(stream? v_2577)))"
"(if or-part_2581"
" or-part_2581"
"(let-values(((or-part_2582)(mpair? v_2577)))"
"(if or-part_2582"
" or-part_2582"
"(let-values(((or-part_2583)(vector? v_2577)))"
"(if or-part_2583"
" or-part_2583"
"(let-values(((or-part_2584)(flvector? v_2577)))"
"(if or-part_2584"
" or-part_2584"
"(let-values(((or-part_2585)(fxvector? v_2577)))"
"(if or-part_2585"
" or-part_2585"
"(let-values(((or-part_2586)(string? v_2577)))"
"(if or-part_2586"
" or-part_2586"
"(let-values(((or-part_2587)(bytes? v_2577)))"
"(if or-part_2587"
" or-part_2587"
"(let-values(((or-part_2588)(input-port? v_2577)))"
"(if or-part_2588"
" or-part_2588"
"(let-values(((or-part_2589)(hash? v_2577)))"
"(if or-part_2589"
" or-part_2589"
"(if(:sequence? v_2577)"
"(not(struct-type? v_2577))"
" '#f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2590 v_2591)"
"(if(exact-nonnegative-integer? v_2591)"
"(let-values()(:integer-gen v_2591))"
"(if(do-sequence? v_2591)"
"(let-values()((do-sequence-ref v_2591 '0)))"
"(if(mpair? v_2591)"
"(let-values()(:mlist-gen v_2591))"
"(if(list? v_2591)"
"(let-values()(:list-gen v_2591))"
"(if(vector? v_2591)"
"(let-values()(:vector-gen v_2591 '0(vector-length v_2591) '1))"
"(if(flvector? v_2591)"
"(let-values()(:flvector-gen v_2591 '0(flvector-length v_2591) '1))"
"(if(fxvector? v_2591)"
"(let-values()(:fxvector-gen v_2591 '0(fxvector-length v_2591) '1))"
"(if(string? v_2591)"
"(let-values()(:string-gen v_2591 '0(string-length v_2591) '1))"
"(if(bytes? v_2591)"
"(let-values()(:bytes-gen v_2591 '0(bytes-length v_2591) '1))"
"(if(input-port? v_2591)"
"(let-values()(:input-port-gen v_2591))"
"(if(hash? v_2591)"
"(let-values()(:hash-gen v_2591 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2591)"
"(let-values()((sequence-ref v_2591) v_2591))"
"(if(:sequence? v_2591)"
"(let-values()(make-sequence who_2590((:sequence-ref v_2591) v_2591)))"
"(if(stream? v_2591)"
"(let-values()(:stream-gen v_2591))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
" '\"for: expected a sequence for ~a, got something else: ~v\""
"(if(= '1(length who_2590))(car who_2590) who_2590)"
" v_2591)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" '#f"
" '3"
" '0"
" '#f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2592)"
"(let-values(((cont?_2593)(range-ref v_2592 '2)))"
"(if cont?_2593(not(cont?_2593(range-ref v_2592 '0))) '#f)))"
"(lambda(v_2594)(range-ref v_2594 '0))"
"(lambda(v_2595)"
"(make-range((range-ref v_2595 '1)(range-ref v_2595 '0))(range-ref v_2595 '1)(range-ref v_2595 '2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2596)(values values(range-ref v_2596 '1)(range-ref v_2596 '0)(range-ref v_2596 '2) '#f '#f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2597)(in-range '0 b_2597 '1))"
"((a_2598 b_2599)(in-range a_2598 b_2599 '1))"
"((a_2600 b_2601 step_2602)"
"(begin"
" (if (real? a_2600) (void) (let-values () (raise-argument-error 'in-range '\"real?\" a_2600)))"
" (if (real? b_2601) (void) (let-values () (raise-argument-error 'in-range '\"real?\" b_2601)))"
" (if (real? step_2602) (void) (let-values () (raise-argument-error 'in-range '\"real?\" step_2602)))"
"(let-values(((cont?_2603)"
"(if(>= step_2602 '0)(lambda(x_2604)(< x_2604 b_2601))(lambda(x_2605)(> x_2605 b_2601)))))"
"(let-values(((inc_2606)(lambda(x_2607)(+ x_2607 step_2602))))(make-range a_2600 inc_2606 cont?_2603)))))))"
"(define-values(:integer-gen)(lambda(v_2608)(values values add1 '0(lambda(i_2609)(< i_2609 v_2608)) '#f '#f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals '0))"
"((n_2610)"
"(begin"
"(if(if(integer? n_2610)(if(exact? n_2610)(>= n_2610 '0) '#f) '#f)"
"(void)"
" (let-values () (raise-argument-error 'in-naturals '\"exact-nonnegative-integer?\" n_2610)))"
"(make-range n_2610 add1 '#f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" '#f"
" '1"
" '0"
" '#f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2611)(not(pair?(list-stream-ref v_2611 '0))))"
"(lambda(v_2612)(car(list-stream-ref v_2612 '0)))"
"(lambda(v_2613)(make-list-stream(cdr(list-stream-ref v_2613 '0))))))"
"(cons prop:gen-sequence(lambda(v_2614)(values car cdr(list-stream-ref v_2614 '0) pair? '#f '#f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2615)"
"(begin"
" (if (list? l_2615) (void) (let-values () (raise-argument-error 'in-list '\"list?\" l_2615)))"
"(make-list-stream l_2615))))"
"(define-values(:list-gen)(lambda(l_2616)(values car cdr l_2616 pair? '#f '#f)))"
"(define-values"
"(in-mlist)"
"(lambda(l_2617)"
"(begin"
" (if (mpair? l_2617) (void) (let-values () (raise-argument-error 'in-mlist '\"mpair?\" l_2617)))"
"(make-do-sequence(lambda()(:mlist-gen l_2617))))))"
"(define-values(:mlist-gen)(lambda(l_2618)(values mcar mcdr l_2618 mpair? '#f '#f)))"
"(define-values"
"(in-input-port-bytes)"
"(lambda(p_2619)"
"(begin"
" (if (input-port? p_2619) (void) (let-values () (raise-argument-error 'in-input-port-bytes '\"input-port?\" p_2619)))"
"(make-do-sequence(lambda()(:input-port-gen p_2619))))))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2620)(values read-byte values p_2620 '#f(lambda(x_2621)(not(eof-object? x_2621))) '#f)))"
"(define-values"
"(in-input-port-chars)"
"(lambda(p_2622)"
"(begin"
" (if (input-port? p_2622) (void) (let-values () (raise-argument-error 'in-input-port-chars '\"input-port?\" p_2622)))"
"(in-producer(lambda()(read-char p_2622)) eof))))"
"(define-values"
"(check-in-port)"
"(lambda(r_2623 p_2624)"
"(begin"
"(if(if(procedure? r_2623)(procedure-arity-includes? r_2623 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'in-port '\"(procedure-arity-includes/c 1)\" r_2623)))"
" (if (input-port? p_2624) (void) (let-values () (raise-argument-error 'in-port '\"input-port?\" p_2624))))))"
"(define-values"
"(in-port)"
"(case-lambda"
"(()(in-port read(current-input-port)))"
"((r_2625)(in-port r_2625(current-input-port)))"
"((r_2626 p_2627)(begin(check-in-port r_2626 p_2627)(in-producer(lambda()(r_2626 p_2627)) eof)))))"
"(define-values"
"(check-in-lines)"
"(lambda(p_2628 mode_2629)"
"(begin"
" (if (input-port? p_2628) (void) (let-values () (raise-argument-error 'in-lines '\"input-port?\" p_2628)))"
"(if(memq mode_2629 '(linefeed return return-linefeed any any-one))"
"(void)"
"(let-values()"
" (raise-argument-error 'in-lines '\"(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)\" mode_2629))))))"
"(define-values"
"(in-lines)"
"(case-lambda"
"(()(in-lines(current-input-port) 'any))"
"((p_2630)(in-lines p_2630 'any))"
"((p_2631 mode_2632)"
"(begin(check-in-lines p_2631 mode_2632)(in-producer(lambda()(read-line p_2631 mode_2632)) eof)))))"
"(define-values"
"(check-in-bytes-lines)"
"(lambda(p_2633 mode_2634)"
"(begin"
" (if (input-port? p_2633) (void) (let-values () (raise-argument-error 'in-bytes-lines '\"input-port\" p_2633)))"
"(if(memq mode_2634 '(linefeed return return-linefeed any any-one))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'in-bytes-lines"
" '\"(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)\""
" mode_2634))))))"
"(define-values"
"(in-bytes-lines)"
"(case-lambda"
"(()(in-bytes-lines(current-input-port) 'any))"
"((p_2635)(in-bytes-lines p_2635 'any))"
"((p_2636 mode_2637)"
"(begin(check-in-bytes-lines p_2636 mode_2637)(in-producer(lambda()(read-bytes-line p_2636 mode_2637)) eof)))))"
"(define-values"
"(in-stream)"
"(lambda(l_2638)"
"(begin"
" (if (stream? l_2638) (void) (let-values () (raise-argument-error 'in-stream '\"stream?\" l_2638)))"
"(make-do-sequence(lambda()(:stream-gen l_2638))))))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2639)(values unsafe-stream-first unsafe-stream-rest l_2639 unsafe-stream-not-empty? '#f '#f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2640 -get_2641 -first_2642 -next_2643)"
"(values"
"(lambda(pos_2644)(-get_2641 ht_2640 pos_2644))"
"(lambda(pos_2645)(-next_2643 ht_2640 pos_2645))"
"(-first_2642 ht_2640)"
"(lambda(pos_2646) pos_2646)"
" '#f"
" '#f)))"
"(define-values(mutable?)(lambda(ht_2647)(not(immutable? ht_2647))))"
"(define-values(not-weak?)(lambda(ht_2648)(not(hash-weak? ht_2648))))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2649)"
"(begin"
"(if((lambda(ht_2650)(hash? ht_2650)) ht_2649)"
"(void)"
" (let-values () (raise-argument-error 'in-hash '\"hash?\" ht_2649)))"
"(make-do-sequence(lambda()(:hash-gen ht_2649 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-mutable-hash)"
"(lambda(ht_2651)"
"(begin"
"(if((lambda(ht_2652)(if(hash? ht_2652)(if(mutable? ht_2652)(not-weak? ht_2652) '#f) '#f)) ht_2651)"
"(void)"
" (let-values () (raise-argument-error 'in-mutable-hash '\"(and/c hash? mutable? not-weak?)\" ht_2651)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2651"
" unsafe-mutable-hash-iterate-key+value"
" unsafe-mutable-hash-iterate-first"
" unsafe-mutable-hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2653)"
"(begin"
"(if((lambda(ht_2654)(if(hash? ht_2654)(immutable? ht_2654) '#f)) ht_2653)"
"(void)"
" (let-values () (raise-argument-error 'in-immutable-hash '\"(and/c hash? immutable?)\" ht_2653)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2653"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-weak-hash)"
"(lambda(ht_2655)"
"(begin"
"(if((lambda(ht_2656)(if(hash? ht_2656)(hash-weak? ht_2656) '#f)) ht_2655)"
"(void)"
" (let-values () (raise-argument-error 'in-weak-hash '\"(and/c hash? hash-weak?)\" ht_2655)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2655"
" unsafe-weak-hash-iterate-key+value"
" unsafe-weak-hash-iterate-first"
" unsafe-weak-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2657)"
"(begin"
"(if((lambda(ht_2658)(hash? ht_2658)) ht_2657)"
"(void)"
" (let-values () (raise-argument-error 'in-hash-keys '\"hash?\" ht_2657)))"
"(make-do-sequence(lambda()(:hash-gen ht_2657 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-mutable-hash-keys)"
"(lambda(ht_2659)"
"(begin"
"(if((lambda(ht_2660)(if(hash? ht_2660)(if(mutable? ht_2660)(not-weak? ht_2660) '#f) '#f)) ht_2659)"
"(void)"
" (let-values () (raise-argument-error 'in-mutable-hash-keys '\"(and/c hash? mutable? not-weak?)\" ht_2659)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2659"
" unsafe-mutable-hash-iterate-key"
" unsafe-mutable-hash-iterate-first"
" unsafe-mutable-hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2661)"
"(begin"
"(if((lambda(ht_2662)(if(hash? ht_2662)(immutable? ht_2662) '#f)) ht_2661)"
"(void)"
" (let-values () (raise-argument-error 'in-immutable-hash-keys '\"(and/c hash? immutable?)\" ht_2661)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2661"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-weak-hash-keys)"
"(lambda(ht_2663)"
"(begin"
"(if((lambda(ht_2664)(if(hash? ht_2664)(hash-weak? ht_2664) '#f)) ht_2663)"
"(void)"
" (let-values () (raise-argument-error 'in-weak-hash-keys '\"(and/c hash? hash-weak?)\" ht_2663)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2663"
" unsafe-weak-hash-iterate-key"
" unsafe-weak-hash-iterate-first"
" unsafe-weak-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2665)"
"(begin"
"(if((lambda(ht_2666)(hash? ht_2666)) ht_2665)"
"(void)"
" (let-values () (raise-argument-error 'in-hash-values '\"hash?\" ht_2665)))"
"(make-do-sequence(lambda()(:hash-gen ht_2665 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-mutable-hash-values)"
"(lambda(ht_2667)"
"(begin"
"(if((lambda(ht_2668)(if(hash? ht_2668)(if(mutable? ht_2668)(not-weak? ht_2668) '#f) '#f)) ht_2667)"
"(void)"
" (let-values () (raise-argument-error 'in-mutable-hash-values '\"(and/c hash? mutable? not-weak?)\" ht_2667)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2667"
" unsafe-mutable-hash-iterate-value"
" unsafe-mutable-hash-iterate-first"
" unsafe-mutable-hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-values)"
"(lambda(ht_2669)"
"(begin"
"(if((lambda(ht_2670)(if(hash? ht_2670)(immutable? ht_2670) '#f)) ht_2669)"
"(void)"
" (let-values () (raise-argument-error 'in-immutable-hash-values '\"(and/c hash? immutable?)\" ht_2669)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2669"
" unsafe-immutable-hash-iterate-value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-weak-hash-values)"
"(lambda(ht_2671)"
"(begin"
"(if((lambda(ht_2672)(if(hash? ht_2672)(hash-weak? ht_2672) '#f)) ht_2671)"
"(void)"
" (let-values () (raise-argument-error 'in-weak-hash-values '\"(and/c hash? hash-weak?)\" ht_2671)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2671"
" unsafe-weak-hash-iterate-value"
" unsafe-weak-hash-iterate-first"
" unsafe-weak-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-pairs)"
"(lambda(ht_2673)"
"(begin"
"(if((lambda(ht_2674)(hash? ht_2674)) ht_2673)"
"(void)"
" (let-values () (raise-argument-error 'in-hash-pairs '\"hash?\" ht_2673)))"
"(make-do-sequence(lambda()(:hash-gen ht_2673 hash-iterate-pair hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-mutable-hash-pairs)"
"(lambda(ht_2675)"
"(begin"
"(if((lambda(ht_2676)(if(hash? ht_2676)(if(mutable? ht_2676)(not-weak? ht_2676) '#f) '#f)) ht_2675)"
"(void)"
" (let-values () (raise-argument-error 'in-mutable-hash-pairs '\"(and/c hash? mutable? not-weak?)\" ht_2675)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2675"
" unsafe-mutable-hash-iterate-pair"
" unsafe-mutable-hash-iterate-first"
" unsafe-mutable-hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-pairs)"
"(lambda(ht_2677)"
"(begin"
"(if((lambda(ht_2678)(if(hash? ht_2678)(immutable? ht_2678) '#f)) ht_2677)"
"(void)"
" (let-values () (raise-argument-error 'in-immutable-hash-pairs '\"(and/c hash? immutable?)\" ht_2677)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2677"
" unsafe-immutable-hash-iterate-pair"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-weak-hash-pairs)"
"(lambda(ht_2679)"
"(begin"
"(if((lambda(ht_2680)(if(hash? ht_2680)(hash-weak? ht_2680) '#f)) ht_2679)"
"(void)"
" (let-values () (raise-argument-error 'in-weak-hash-pairs '\"(and/c hash? hash-weak?)\" ht_2679)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2679"
" unsafe-weak-hash-iterate-pair"
" unsafe-weak-hash-iterate-first"
" unsafe-weak-hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2681 vec_2682 start_2683 stop_2684 step_2685 len_2686)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2683)"
"(let-values(((or-part_2687)(< start_2683 len_2686)))"
"(if or-part_2687 or-part_2687(= len_2686 start_2683 stop_2684)))"
" '#f)"
"(void)"
" (let-values () (raise-range-error who_2681 '\"vector\" '\"starting \" start_2683 vec_2682 '0 (sub1 len_2686))))"
"(if(if(exact-integer? stop_2684)(if(<= '-1 stop_2684)(<= stop_2684 len_2686) '#f) '#f)"
"(void)"
" (let-values () (raise-range-error who_2681 '\"vector\" '\"stopping \" stop_2684 vec_2682 '-1 len_2686)))"
"(if(if(exact-integer? step_2685)(not(zero? step_2685)) '#f)"
"(void)"
" (let-values () (raise-argument-error who_2681 '\"(and/c exact-integer? (not/c zero?))\" step_2685)))"
"(if(if(< start_2683 stop_2684)(< step_2685 '0) '#f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
" '\"starting index less than stopping index, but given a negative step\""
" '\"starting index\""
" start_2683"
" '\"stopping index\""
" stop_2684"
" '\"step\""
" step_2685))"
"(void))"
"(if(if(< stop_2684 start_2683)(> step_2685 '0) '#f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
" '\"starting index more than stopping index, but given a positive step\""
" '\"starting index\""
" start_2683"
" '\"stopping index\""
" stop_2684"
" '\"step\""
" step_2685))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2688 type-name_2689 vector?_2690 unsafe-vector-length_2691 vec_2692 start_2693 stop_2694 step_2695)"
"(begin"
"(if(vector?_2690 vec_2692)(void)(let-values()(raise-argument-error who_2688 type-name_2689 vec_2692)))"
"(let-values(((len_2696)(unsafe-vector-length_2691 vec_2692)))"
"(let-values(((stop*_2697)(if stop_2694 stop_2694 len_2696)))"
"(begin"
"(check-ranges who_2688 vec_2692 start_2693 stop*_2697 step_2695 len_2696)"
"(values vec_2692 start_2693 stop*_2697 step_2695)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2698 start_2699 stop_2700 step_2701)"
"(values"
"(lambda(i_2702)(unsafe-vector-ref v_2698 i_2702))"
"(if(= step_2701 '1) add1(lambda(i_2703)(+ i_2703 step_2701)))"
" start_2699"
"(if(> step_2701 '0)(lambda(i_2704)(< i_2704 stop_2700))(lambda(i_2705)(> i_2705 stop_2700)))"
" '#f"
" '#f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2706)(in-vector v_2706 '0 '#f '1))"
"((v_2707 start_2708)(in-vector v_2707 start_2708 '#f '1))"
"((v_2709 start_2710 stop_2711)(in-vector v_2709 start_2710 stop_2711 '1))"
"((v_2712 start_2713 stop_2714 step_2715)"
"(let-values(((v_2716 start_2717 stop_2718 step_2719)"
" (normalise-inputs 'in-vector '\"vector\" vector? vector-length v_2712 start_2713 stop_2714 step_2715)))"
"(make-do-sequence(lambda()(:vector-gen v_2716 start_2717 stop_2718 step_2719)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2720 start_2721 stop_2722 step_2723)"
"(values"
"(lambda(i_2724)(string-ref v_2720 i_2724))"
"(if(= step_2723 '1) add1(lambda(i_2725)(+ i_2725 step_2723)))"
" start_2721"
"(if(> step_2723 '0)(lambda(i_2726)(< i_2726 stop_2722))(lambda(i_2727)(> i_2727 stop_2722)))"
" '#f"
" '#f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2728)(in-string v_2728 '0 '#f '1))"
"((v_2729 start_2730)(in-string v_2729 start_2730 '#f '1))"
"((v_2731 start_2732 stop_2733)(in-string v_2731 start_2732 stop_2733 '1))"
"((v_2734 start_2735 stop_2736 step_2737)"
"(let-values(((v_2738 start_2739 stop_2740 step_2741)"
" (normalise-inputs 'in-string '\"string\" string? string-length v_2734 start_2735 stop_2736 step_2737)))"
"(make-do-sequence(lambda()(:string-gen v_2738 start_2739 stop_2740 step_2741)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2742 start_2743 stop_2744 step_2745)"
"(values"
"(lambda(i_2746)(unsafe-bytes-ref v_2742 i_2746))"
"(if(= step_2745 '1) add1(lambda(i_2747)(+ i_2747 step_2745)))"
" start_2743"
"(if(> step_2745 '0)(lambda(i_2748)(< i_2748 stop_2744))(lambda(i_2749)(> i_2749 stop_2744)))"
" '#f"
" '#f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2750)(in-bytes v_2750 '0 '#f '1))"
"((v_2751 start_2752)(in-bytes v_2751 start_2752 '#f '1))"
"((v_2753 start_2754 stop_2755)(in-bytes v_2753 start_2754 stop_2755 '1))"
"((v_2756 start_2757 stop_2758 step_2759)"
"(let-values(((v_2760 start_2761 stop_2762 step_2763)"
" (normalise-inputs 'in-bytes '\"bytes\" bytes? bytes-length v_2756 start_2757 stop_2758 step_2759)))"
"(make-do-sequence(lambda()(:bytes-gen v_2760 start_2761 stop_2762 step_2763)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2764 start_2765 stop_2766 step_2767)"
"(values"
"(lambda(i_2768)(unsafe-flvector-ref v_2764 i_2768))"
"(if(= step_2767 '1) add1(lambda(i_2769)(+ i_2769 step_2767)))"
" start_2765"
"(if(> step_2767 '0)(lambda(i_2770)(< i_2770 stop_2766))(lambda(i_2771)(> i_2771 stop_2766)))"
" '#f"
" '#f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2772 start_2773 stop_2774 step_2775)"
"(values"
"(lambda(i_2776)(unsafe-fxvector-ref v_2772 i_2776))"
"(if(= step_2775 '1) add1(lambda(i_2777)(+ i_2777 step_2775)))"
" start_2773"
"(if(> step_2775 '0)(lambda(i_2778)(< i_2778 stop_2774))(lambda(i_2779)(> i_2779 stop_2774)))"
" '#f"
" '#f)))"
"(define-values"
"(stop-before)"
"(lambda(g_2780 pred_2781)"
"(begin"
" (if (sequence? g_2780) (void) (let-values () (raise-argument-error 'stop-before '\"sequence?\" g_2780)))"
"(if(if(procedure? pred_2781)(procedure-arity-includes? pred_2781 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'stop-before '\"(procedure-arity-includes/c 1)\" pred_2781)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2782 pos-next_2783 init_2784 pos-cont?_2785 pre-cont?_2786 post-cont?_2787)"
"(make-sequence '#f g_2780)))"
"(values"
" pos->val_2782"
" pos-next_2783"
" init_2784"
" pos-cont?_2785"
"(case-lambda"
"((val_2788)(if(if pre-cont?_2786(pre-cont?_2786 val_2788) '#t)(not(pred_2781 val_2788)) '#f))"
"(vals_2789"
"(if(if pre-cont?_2786(apply pre-cont?_2786 vals_2789) '#t)(not(apply pred_2781 vals_2789)) '#f)))"
" post-cont?_2787)))))))"
"(define-values"
"(stop-after)"
"(lambda(g_2790 pred_2791)"
"(begin"
" (if (sequence? g_2790) (void) (let-values () (raise-argument-error 'stop-after '\"sequence?\" g_2790)))"
"(if(if(procedure? pred_2791)(procedure-arity-includes? pred_2791 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'stop-after '\"(procedure-arity-includes/c 1)\" pred_2791)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2792 pos-next_2793 init_2794 pos-cont?_2795 pre-cont?_2796 post-cont?_2797)"
"(make-sequence '#f g_2790)))"
"(values"
" pos->val_2792"
" pos-next_2793"
" init_2794"
" pos-cont?_2795"
" pre-cont?_2796"
"(case-lambda"
"((pos_2798 val_2799)"
"(if(if post-cont?_2797(post-cont?_2797 pos_2798 val_2799) '#t)(not(pred_2791 val_2799)) '#f))"
"((pos_2800 . vals_2801)"
"(if(if post-cont?_2797(apply post-cont?_2797 pos_2800 vals_2801) '#t)"
"(not(apply pred_2791 vals_2801))"
" '#f))))))))))"
"(define-values"
"(in-indexed)"
"(lambda(g_2802)"
"(begin"
" (if (sequence? g_2802) (void) (let-values () (raise-argument-error 'in-indexed '\"sequence?\" g_2802)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2803 pos-next_2804 init_2805 pos-cont?_2806 pre-cont?_2807 post-cont?_2808)"
"(make-sequence '#f g_2802)))"
"(values"
"(lambda(pos_2809)(values(pos->val_2803(car pos_2809))(cdr pos_2809)))"
"(lambda(pos_2810)(cons(pos-next_2804(car pos_2810))(add1(cdr pos_2810))))"
"(cons init_2805 '0)"
"(if pos-cont?_2806(lambda(pos_2811)(pos-cont?_2806(car pos_2811))) '#f)"
"(if pre-cont?_2807(lambda(val_2812 idx_2813)(pre-cont?_2807 val_2812)) '#f)"
"(if post-cont?_2808(lambda(pos_2814 val_2815 idx_2816)(post-cont?_2808 pos_2814 val_2815)) '#f))))))))"
"(define-values"
"(in-value)"
"(lambda(v_2817)"
"(make-do-sequence"
"(lambda()"
"(values(lambda(pos_2818) v_2817)(lambda(pos_2819) '#f) '#t(lambda(pos_2820) pos_2820) void void)))))"
"(define-values"
"(in-values-sequence)"
"(lambda(g_2821)"
"(begin"
" (if (sequence? g_2821) (void) (let-values () (raise-argument-error 'in-values-sequence '\"sequence?\" g_2821)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2822 pos-next_2823 init_2824 pos-cont?_2825 pre-cont?_2826 post-cont?_2827)"
"(make-sequence '#f g_2821)))"
"(values"
"(lambda(pos_2828)(call-with-values(lambda()(pos->val_2822 pos_2828)) list))"
" pos-next_2823"
" init_2824"
" pos-cont?_2825"
"(if pre-cont?_2826(lambda(vals_2829)(apply pre-cont?_2826 vals_2829)) '#f)"
"(if post-cont?_2827(lambda(pos_2830 vals_2831)(apply post-cont?_2827 pos_2830 vals_2831)) '#f))))))))"
"(define-values"
"(in-values*-sequence)"
"(lambda(g_2832)"
"(begin"
" (if (sequence? g_2832) (void) (let-values () (raise-argument-error 'in-values-sequence '\"sequence?\" g_2832)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2833 pos-next_2834 init_2835 pos-cont?_2836 pre-cont?_2837 post-cont?_2838)"
"(make-sequence '#f g_2832)))"
"(values"
"(lambda(pos_2839)"
"(call-with-values"
"(lambda()(pos->val_2833 pos_2839))"
"(case-lambda((v_2840)(if(list? v_2840)(list v_2840) v_2840))(vs_2841 vs_2841))))"
" pos-next_2834"
" init_2835"
" pos-cont?_2836"
"(if pre-cont?_2837"
"(lambda(vals_2842)(if(list? vals_2842)(apply pre-cont?_2837 vals_2842)(pre-cont?_2837 vals_2842)))"
" '#f)"
"(if post-cont?_2838"
"(lambda(pos_2843 vals_2844)"
"(if(list? vals_2844)(apply post-cont?_2838 pos_2843 vals_2844)(post-cont?_2838 pos_2843 vals_2844)))"
" '#f))))))))"
"(define-values"
"(append-sequences)"
"(lambda(sequences_2845 cyclic?_2846)"
"(letrec-values(((seqs->m+g+r_2847)"
"(lambda(seqs_2848)"
"(if(pair? seqs_2848)"
"(let-values(((more?_2849 get_2850)(sequence-generate(car seqs_2848)))"
"((seqs_2851)(cdr seqs_2848)))"
"(if(more?_2849)(list* more?_2849 get_2850 seqs_2851)(seqs->m+g+r_2847 seqs_2851)))"
"(if cyclic?_2846(seqs->m+g+r_2847 sequences_2845) '#f)))))"
"(make-do-sequence"
"(lambda()"
"(values"
"(lambda(m+g+r_2852)((cadr m+g+r_2852)))"
"(lambda(m+g+r_2853)"
"(if(if(pair? m+g+r_2853)(not((car m+g+r_2853))) '#f)(seqs->m+g+r_2847(cddr m+g+r_2853)) m+g+r_2853))"
"(seqs->m+g+r_2847 sequences_2845)"
" values"
" void"
" void))))))"
"(define-values"
"(check-sequences)"
"(lambda(who_2854 sequences_2855)"
"(for-each"
"(lambda(g_2856)"
" (if (sequence? g_2856) (void) (let-values () (raise-argument-error who_2854 '\"sequence?\" g_2856))))"
" sequences_2855)))"
"(define-values"
"(in-sequences)"
"(lambda sequences_2857"
"(begin"
"(check-sequences 'in-sequences sequences_2857)"
"(if(if(pair? sequences_2857)(null?(cdr sequences_2857)) '#f)"
"(car sequences_2857)"
"(append-sequences sequences_2857 '#f)))))"
"(define-values"
"(in-cycle)"
"(lambda sequences_2858(begin(check-sequences 'in-cycle sequences_2858)(append-sequences sequences_2858 '#t))))"
"(define-values"
"(in-parallel)"
"(lambda sequences_2859"
"(begin"
"(check-sequences 'in-parallel sequences_2859)"
"(if(= '1(length sequences_2859))"
"(car sequences_2859)"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->vals_2860 pos-nexts_2861 inits_2862 pos-cont?s_2863 pre-cont?s_2864 post-cont?s_2865)"
"(let-values(((p->v_2866 p-s_2867 i_2868 ps?_2869 pr?_2870 po?_2871)"
"(let-values(((pos->vals_2872"
" pos-next_2873"
" init_2874"
" pos-cont?_2875"
" val-cont?_2876"
" all-cont?_2877)"
"(make-sequence '(g) sequences_2859)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_2878)"
"(lambda(p->v_2879"
" p-s_2880"
" i_2881"
" ps?_2882"
" pr?_2883"
" po?_2884"
" pos_2885)"
"(if(if pos-cont?_2875(pos-cont?_2875 pos_2885) '#t)"
"(let-values(((g_2886)(pos->vals_2872 pos_2885)))"
"(if(if val-cont?_2876(val-cont?_2876 g_2886) '#t)"
"(let-values(((p->v_2887"
" p-s_2888"
" i_2889"
" ps?_2890"
" pr?_2891"
" po?_2892)"
"(let-values(((p->v_2893) p->v_2879)"
"((p-s_2894) p-s_2880)"
"((i_2895) i_2881)"
"((ps?_2896) ps?_2882)"
"((pr?_2897) pr?_2883)"
"((po?_2898) po?_2884))"
"(let-values(((p->v_2899"
" p-s_2900"
" i_2901"
" ps?_2902"
" pr?_2903"
" po?_2904)"
"(let-values()"
"(let-values(((p->v1_2905"
" p-s2_2906"
" i3_2907"
" ps?4_2908"
" pr?5_2909"
" po?6_2910)"
"(let-values()"
"(make-sequence"
" '#f"
" g_2886))))"
"(values"
"(cons"
" p->v1_2905"
" p->v_2893)"
"(cons"
" p-s2_2906"
" p-s_2894)"
"(cons"
" i3_2907"
" i_2895)"
"(cons"
" ps?4_2908"
" ps?_2896)"
"(cons"
" pr?5_2909"
" pr?_2897)"
"(cons"
" po?6_2910"
" po?_2898))))))"
"(values"
" p->v_2899"
" p-s_2900"
" i_2901"
" ps?_2902"
" pr?_2903"
" po?_2904)))))"
"(if(if all-cont?_2877"
"(all-cont?_2877 pos_2885 g_2886)"
" '#t)"
"(for-loop_2878"
" p->v_2887"
" p-s_2888"
" i_2889"
" ps?_2890"
" pr?_2891"
" po?_2892"
"(pos-next_2873 pos_2885))"
"(values"
" p->v_2887"
" p-s_2888"
" i_2889"
" ps?_2890"
" pr?_2891"
" po?_2892)))"
"(values"
" p->v_2879"
" p-s_2880"
" i_2881"
" ps?_2882"
" pr?_2883"
" po?_2884)))"
"(values"
" p->v_2879"
" p-s_2880"
" i_2881"
" ps?_2882"
" pr?_2883"
" po?_2884)))))"
" for-loop_2878)"
" null"
" null"
" null"
" null"
" null"
" null"
" init_2874)))))"
"(values"
"(alt-reverse p->v_2866)"
"(alt-reverse p-s_2867)"
"(alt-reverse i_2868)"
"(alt-reverse ps?_2869)"
"(alt-reverse pr?_2870)"
"(alt-reverse po?_2871)))))"
"(values"
"(lambda(poses_2911)"
"(apply"
" values"
"(map(lambda(pos->val_2912 pos_2913)(pos->val_2912 pos_2913)) pos->vals_2860 poses_2911)))"
"(lambda(poses_2914)"
"(map(lambda(pos-next_2915 pos_2916)(pos-next_2915 pos_2916)) pos-nexts_2861 poses_2914))"
" inits_2862"
"(if(ormap values pos-cont?s_2863)"
"(lambda(poses_2917)"
"(andmap"
"(lambda(pos-cont?_2918 pos_2919)(if pos-cont?_2918(pos-cont?_2918 pos_2919) '#t))"
" pos-cont?s_2863"
" poses_2917))"
" '#f)"
"(if(ormap values pre-cont?s_2864)"
"(lambda vals_2920"
"(andmap"
"(lambda(pre-cont?_2921 val_2922)(if pre-cont?_2921(pre-cont?_2921 val_2922) '#t))"
" pre-cont?s_2864"
" vals_2920))"
" '#f)"
"(if(ormap values post-cont?s_2865)"
"(lambda(poses_2923 . vals_2924)"
"(andmap"
"(lambda(post-cont?_2925 pos_2926 val_2927)"
"(if post-cont?_2925(post-cont?_2925 pos_2926 val_2927) '#t))"
" post-cont?s_2865"
" poses_2923"
" vals_2924))"
" '#f)))))))))"
"(define-values"
"(in-producer)"
"(case-lambda"
"((producer_2928)(make-do-sequence(lambda()(values(lambda __2929(producer_2928)) void(void) '#f '#f '#f))))"
"((producer_2930 stop_2931 . more_2932)"
"(let-values(((produce!_2933)"
"(if(null? more_2932)"
"(lambda(__2935)(producer_2930))"
"(lambda(__2936)(apply producer_2930 more_2932)))))"
"(let-values(((stop?_2934)"
"(if(not(procedure? stop_2931))"
"(let-values()(lambda(x_2937)(not(eq? x_2937 stop_2931))))"
"(if(equal? '1(procedure-arity stop_2931))"
"(let-values()(lambda(x_2938)(not(stop_2931 x_2938))))"
"(let-values()(lambda xs_2939(not(apply stop_2931 xs_2939))))))))"
"(make-do-sequence(lambda()(values produce!_2933 void(void) '#f stop?_2934 '#f))))))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" '#f"
" '3"
" '0"
" '#f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2940)((do-stream-ref v_2940 '0)))"
"(lambda(v_2941)((do-stream-ref v_2941 '1)))"
"(lambda(v_2942)((do-stream-ref v_2942 '2))))))))"
"(define-values(empty-stream)(make-do-stream(lambda() '#t) void void))"
"(define-values"
"(sequence->stream)"
"(lambda(s_2943)"
"(begin"
" (if (sequence? s_2943) (void) (let-values () (raise-argument-error 'sequence-generate '\"sequence?\" s_2943)))"
"(if(stream? s_2943)"
"(let-values() s_2943)"
"(let-values()"
"(let-values(((pos->val_2944 pos-next_2945 init_2946 pos-cont?_2947 pre-cont?_2948 post-cont?_2949)"
"(make-sequence '#f s_2943)))"
"(letrec-values(((gen-stream_2950)"
"(lambda(pos_2951)"
"(let-values(((done?_2952) '#f)((vals_2953) '#f)((empty?_2954) '#f)((next_2955) '#f))"
"(let-values(((force!_2956)"
"(lambda()"
"(if done?_2952"
"(void)"
"(let-values()"
"(begin"
"(if(if pos-cont?_2947(pos-cont?_2947 pos_2951) '#t)"
"(begin"
"(set! vals_2953"
"(call-with-values"
"(lambda()(pos->val_2944 pos_2951))"
" list))"
"(if(if pre-cont?_2948(apply pre-cont?_2948 vals_2953) '#t)"
"(void)"
"(let-values()"
"(begin(set! vals_2953 '#f)(set! empty?_2954 '#t)))))"
"(set! empty?_2954 '#t))"
"(set! done?_2952 '#t)))))))"
"(make-do-stream"
"(lambda()(begin(force!_2956) empty?_2954))"
"(lambda()(begin(force!_2956)(apply values vals_2953)))"
"(lambda()"
"(begin"
"(force!_2956)"
"(if next_2955"
" next_2955"
"(begin"
"(if(if post-cont?_2949(apply post-cont?_2949 pos_2951 vals_2953) '#t)"
"(set! next_2955(gen-stream_2950(pos-next_2945 pos_2951)))"
"(set! next_2955 empty-stream))"
" next_2955))))))))))"
"(gen-stream_2950 init_2946))))))))"
"(define-values"
"(no-more)"
" (lambda () (raise (exn:fail:contract '\"sequence has no more values\" (current-continuation-marks)))))"
"(define-values"
"(sequence-generate)"
"(lambda(g_2957)"
"(begin"
" (if (sequence? g_2957) (void) (let-values () (raise-argument-error 'sequence-generate '\"sequence?\" g_2957)))"
"(let-values(((pos->val_2958 pos-next_2959 init_2960 pos-cont?_2961 pre-cont?_2962 post-cont?_2963)"
"(make-sequence '#f g_2957)))"
"(let-values(((pos_2964) init_2960))"
"(letrec-values(((more?_2965) '#f)((prep-val!_2966) '#f)((next_2967) '#f))"
"(letrec-values(((init-more?_2968)(lambda()(begin(prep-val!_2966)(more?_2965))))"
"((init-next_2969)(lambda()(begin(prep-val!_2966)(next_2967))))"
"((init-prep-val!_2970)"
"(lambda()"
"(if(if pos-cont?_2961(pos-cont?_2961 pos_2964) '#t)"
"(call-with-values"
"(lambda()(pos->val_2958 pos_2964))"
"(lambda vals_2971"
"(if(if pre-cont?_2962(apply pre-cont?_2962 vals_2971) '#t)"
"(begin"
"(set! more?_2965(lambda() '#t))"
"(set! next_2967"
"(lambda()"
"(let-values(((v_2972) vals_2971))"
"(begin"
"(set! prep-val!_2966"
"(lambda()"
"(if(if post-cont?_2963"
"(apply post-cont?_2963 pos_2964 vals_2971)"
" '#t)"
"(begin"
"(set! pos_2964(pos-next_2959 pos_2964))"
"(set! prep-val!_2966 init-prep-val!_2970)"
"(prep-val!_2966))"
"(begin"
"(set! more?_2965(lambda() '#f))"
"(set! next_2967 no-more)))))"
"(set! more?_2965 init-more?_2968)"
"(set! next_2967 init-next_2969)"
"(apply values v_2972)))))"
"(set! prep-val!_2966 void)"
"(apply values vals_2971))"
"(begin(set! more?_2965(lambda() '#f))(set! next_2967 no-more)))))"
"(begin(set! more?_2965(lambda() '#f))(set! next_2967 no-more))))))"
"(begin"
"(set! more?_2965 init-more?_2968)"
"(set! prep-val!_2966 init-prep-val!_2970)"
"(set! next_2967 init-next_2969)"
"(let-values(((sequence-more?_2973)(lambda()(more?_2965)))"
"((sequence-next_2974)(lambda()(next_2967))))"
"(values sequence-more?_2973 sequence-next_2974))))))))))"
"(define-values"
"(sequence-generate*)"
"(lambda(g_2975)"
"(begin"
" (if (sequence? g_2975) (void) (let-values () (raise-argument-error 'sequence-generate* '\"sequence?\" g_2975)))"
"(let-values(((pos->val_2976 pos-next_2977 init_2978 pos-cont?_2979 pre-cont?_2980 post-cont?_2981)"
"(make-sequence '#f g_2975)))"
"(letrec-values(((next!_2982)"
"(lambda(pos_2983)"
"(if(if pos-cont?_2979(pos-cont?_2979 pos_2983) '#t)"
"(call-with-values"
"(lambda()(pos->val_2976 pos_2983))"
"(lambda vals_2984"
"(if(if pre-cont?_2980(apply pre-cont?_2980 vals_2984) '#t)"
"(values"
" vals_2984"
"(lambda()"
"(if(if post-cont?_2981(apply post-cont?_2981 pos_2983 vals_2984) '#t)"
"(next!_2982(pos-next_2977 pos_2983))"
"(values '#f no-more))))"
"(values '#f no-more))))"
"(values '#f no-more)))))"
"(next!_2982 init_2978))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_2985)"
"(let-values(((n_2986)(vector-length vec_2985)))"
"(let-values(((new-vec_2987)(make-vector(* '2 n_2986))))"
"(begin(vector-copy! new-vec_2987 '0 vec_2985 '0 n_2986) new-vec_2987)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_2988 i_2989)"
"(let-values(((new-vec_2990)(make-vector i_2989)))"
"(begin(vector-copy! new-vec_2990 '0 vec_2988 '0 i_2989) new-vec_2990))))"
"(define-values"
"(dir-list)"
"(lambda(full-d_2991 d_2992 acc_2993)"
"(let-values(((pos->vals_2994 pos-next_2995 init_2996 pos-cont?_2997 val-cont?_2998 all-cont?_2999)"
"(make-sequence '(f)(in-list(reverse(directory-list full-d_2991))))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_3000)"
"(lambda(acc_3001 pos_3002)"
"(if(if pos-cont?_2997(pos-cont?_2997 pos_3002) '#t)"
"(let-values(((f_3003)(pos->vals_2994 pos_3002)))"
"(if(if val-cont?_2998(val-cont?_2998 f_3003) '#t)"
"(let-values(((acc_3004)"
"(let-values(((acc_3005) acc_3001))"
"(let-values(((acc_3006)"
"(let-values()"
"(cons(build-path d_2992 f_3003) acc_3005))))"
"(values acc_3006)))))"
"(if(if all-cont?_2999(all-cont?_2999 pos_3002 f_3003) '#t)"
"(for-loop_3000 acc_3004(pos-next_2995 pos_3002))"
" acc_3004))"
" acc_3001))"
" acc_3001))))"
" for-loop_3000)"
" acc_2993"
" init_2996)))))"
"(define-values"
"(next-body)"
"(lambda(l_3007 d_3008 init-dir_3009 use-dir?_3010)"
"(let-values(((full-d_3011)(path->complete-path d_3008 init-dir_3009)))"
"(if(if(directory-exists? full-d_3011)(use-dir?_3010 full-d_3011) '#f)"
"(dir-list full-d_3011 d_3008(cdr l_3007))"
"(cdr l_3007)))))"
"(define-values"
"(initial-state)"
"(lambda(orig-dir_3012 init-dir_3013)"
"(if orig-dir_3012"
"(dir-list(path->complete-path orig-dir_3012 init-dir_3013) orig-dir_3012 null)"
"(directory-list init-dir_3013))))"
"(define-values"
"(*in-directory)"
"(case-lambda"
"(()(*in-directory '#f(lambda(d_3014) '#t)))"
"((orig-dir_3015)(*in-directory orig-dir_3015(lambda(d_3016) '#t)))"
"((orig-dir_3017 use-dir?_3018)"
"(let-values(((init-dir_3019)(current-directory)))"
"(let-values(((next_3020)"
"(lambda(l_3021)"
"(let-values(((d_3022)(car l_3021)))(next-body l_3021 d_3022 init-dir_3019 use-dir?_3018)))))"
"(make-do-sequence"
"(lambda()(values car next_3020(initial-state orig-dir_3017 init-dir_3019) pair? '#f '#f))))))))"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 '1)(list? l_3) '#f) '#f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()(cons(f_2(car l_5))(loop_4(cdr l_5))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_6 l1_7 l2_8)"
"(if(if(procedure? f_6)"
"(if(procedure-arity-includes? f_6 '2)"
"(if(list? l1_7)(if(list? l2_8)(=(length l1_7)(length l2_8)) '#f) '#f)"
" '#f)"
" '#f)"
"((letrec-values(((loop_9)"
"(lambda(l1_10 l2_11)"
"(if(null? l1_10)"
"(let-values() null)"
"(let-values()"
"(cons(f_6(car l1_10)(car l2_11))(loop_9(cdr l1_10)(cdr l2_11))))))))"
" loop_9)"
" l1_7"
" l2_8)"
"(map f_6 l1_7 l2_8)))"
"((f_12 l_13 . args_14)(apply map f_12 l_13 args_14)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_15)"
"(case-lambda"
"((f_16 l_17)"
"(if(if(procedure? f_16)(if(procedure-arity-includes? f_16 '1)(list? l_17) '#f) '#f)"
"((letrec-values(((loop_18)"
"(lambda(l_19)"
"(if(null? l_19)"
"(let-values()(void))"
"(let-values()(begin(f_16(car l_19))(loop_18(cdr l_19))))))))"
" loop_18)"
" l_17)"
"(for-each f_16 l_17)))"
"((f_20 l1_21 l2_22)"
"(if(if(procedure? f_20)"
"(if(procedure-arity-includes? f_20 '2)"
"(if(list? l1_21)(if(list? l2_22)(=(length l1_21)(length l2_22)) '#f) '#f)"
" '#f)"
" '#f)"
"((letrec-values(((loop_23)"
"(lambda(l1_24 l2_25)"
"(if(null? l1_24)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(f_20(car l1_24)(car l2_25))"
"(loop_23(cdr l1_24)(cdr l2_25))))))))"
" loop_23)"
" l1_21"
" l2_22)"
"(for-each f_20 l1_21 l2_22)))"
"((f_26 l_27 . args_28)(apply for-each f_26 l_27 args_28)))))"
" for-each_15))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_29)"
"(case-lambda"
"((f_30 l_31)"
"(if(if(procedure? f_30)(if(procedure-arity-includes? f_30 '1)(list? l_31) '#f) '#f)"
"(if(null? l_31)"
" '#t"
"((letrec-values(((loop_32)"
"(lambda(l_33)"
"(if(null?(cdr l_33))"
"(let-values()(f_30(car l_33)))"
"(let-values()(if(f_30(car l_33))(loop_32(cdr l_33)) '#f))))))"
" loop_32)"
" l_31))"
"(andmap f_30 l_31)))"
"((f_34 l1_35 l2_36)"
"(if(if(procedure? f_34)"
"(if(procedure-arity-includes? f_34 '2)"
"(if(list? l1_35)(if(list? l2_36)(=(length l1_35)(length l2_36)) '#f) '#f)"
" '#f)"
" '#f)"
"(if(null? l1_35)"
" '#t"
"((letrec-values(((loop_37)"
"(lambda(l1_38 l2_39)"
"(if(null?(cdr l1_38))"
"(let-values()(f_34(car l1_38)(car l2_39)))"
"(let-values()"
"(if(f_34(car l1_38)(car l2_39))"
"(loop_37(cdr l1_38)(cdr l2_39))"
" '#f))))))"
" loop_37)"
" l1_35"
" l2_36))"
"(andmap f_34 l1_35 l2_36)))"
"((f_40 l_41 . args_42)(apply andmap f_40 l_41 args_42)))))"
" andmap_29))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_43)"
"(case-lambda"
"((f_44 l_45)"
"(if(if(procedure? f_44)(if(procedure-arity-includes? f_44 '1)(list? l_45) '#f) '#f)"
"(if(null? l_45)"
" '#f"
"((letrec-values(((loop_46)"
"(lambda(l_47)"
"(if(null?(cdr l_47))"
"(let-values()(f_44(car l_47)))"
"(let-values()"
"(let-values(((or-part_48)(f_44(car l_47))))"
"(if or-part_48 or-part_48(loop_46(cdr l_47)))))))))"
" loop_46)"
" l_45))"
"(ormap f_44 l_45)))"
"((f_49 l1_50 l2_51)"
"(if(if(procedure? f_49)"
"(if(procedure-arity-includes? f_49 '2)"
"(if(list? l1_50)(if(list? l2_51)(=(length l1_50)(length l2_51)) '#f) '#f)"
" '#f)"
" '#f)"
"(if(null? l1_50)"
" '#f"
"((letrec-values(((loop_52)"
"(lambda(l1_53 l2_54)"
"(if(null?(cdr l1_53))"
"(let-values()(f_49(car l1_53)(car l2_54)))"
"(let-values()"
"(let-values(((or-part_55)(f_49(car l1_53)(car l2_54))))"
"(if or-part_55 or-part_55(loop_52(cdr l1_53)(cdr l2_54)))))))))"
" loop_52)"
" l1_50"
" l2_51))"
"(ormap f_49 l1_50 l2_51)))"
"((f_56 l_57 . args_58)(apply ormap f_56 l_57 args_58)))))"
" ormap_43))"
"(define-values"
"(sort)"
"(let-values()"
"(let-values(((sort-internals_29)(make-hasheq)))"
"(let-values(((__30)"
"(let-values()"
"(begin"
"(let-values(((proc_90)"
"(lambda(vec_91 n_92)"
"(let-values(((n/2-_93)(unsafe-fxrshift n_92 '1)))"
"(let-values(((n/2+_94)(unsafe-fx- n_92 n/2-_93)))"
"(letrec-values(((copying-mergesort_169)"
"(lambda(Alo_170 Blo_171 n_172)"
"(if(unsafe-fx= n_172 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170)))"
"(if(unsafe-fx= n_172 '2)"
"(let-values()"
"(let-values(((x_173)"
"(unsafe-vector-ref vec_91 Alo_170))"
"((y_174)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+ Alo_170 '1))))"
"(if(if '#f"
"(<('#f y_174)('#f x_173))"
"(< y_174 x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 y_174)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 '1)"
" x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 x_173)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 '1)"
" y_174)))))"
"(if(unsafe-fx< n_172 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170))"
"((letrec-values(((iloop_175)"
"(lambda(i_176)"
"(if(unsafe-fx<"
" i_176"
" n_172)"
"(let-values()"
"(let-values(((ref-i_177)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+"
" Alo_170"
" i_176))))"
"((letrec-values(((jloop_178)"
"(lambda(j_179)"
"(let-values(((ref-j-1_180)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx-"
" j_179"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_171"
" j_179)"
"(if '#f"
"(<"
"('#f"
" ref-i_177)"
"('#f"
" ref-j-1_180))"
"(<"
" ref-i_177"
" ref-j-1_180))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-j-1_180)"
"(jloop_178"
"(unsafe-fx-"
" j_179"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-i_177)"
"(iloop_175"
"(unsafe-fx+"
" i_176"
" '1))))))))"
" jloop_178)"
"(unsafe-fx+"
" Blo_171"
" i_176))))"
"(void)))))"
" iloop_175)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_181)"
"(unsafe-fxrshift n_172 '1)))"
"(let-values(((n/2+_182)"
"(unsafe-fx- n_172 n/2-_181)))"
"(let-values(((Amid1_183)"
"(unsafe-fx+ Alo_170 n/2-_181))"
"((Amid2_184)"
"(unsafe-fx+ Alo_170 n/2+_182))"
"((Bmid1_185)"
"(unsafe-fx+ Blo_171 n/2-_181)))"
"(begin"
"(copying-mergesort_169"
" Amid1_183"
" Bmid1_185"
" n/2+_182)"
"(copying-mergesort_169"
" Alo_170"
" Amid2_184"
" n/2-_181)"
"(let-values(((b2_186)"
"(unsafe-fx+"
" Blo_171"
" n_172)))"
"((letrec-values(((loop_187)"
"(lambda(a1_188"
" b1_189"
" c1_190)"
"(let-values(((x_191)"
"(unsafe-vector-ref"
" vec_91"
" a1_188))"
"((y_192)"
"(unsafe-vector-ref"
" vec_91"
" b1_189)))"
"(if(if '#t"
"(not"
"(if '#f"
"(<"
"('#f"
" y_192)"
"('#f"
" x_191))"
"(<"
" y_192"
" x_191)))"
"(if '#f"
"(<"
"('#f"
" x_191)"
"('#f"
" y_192))"
"(<"
" x_191"
" y_192)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" x_191)"
"(let-values(((a1_193)"
"(unsafe-fx+"
" a1_188"
" '1))"
"((c1_194)"
"(unsafe-fx+"
" c1_190"
" '1)))"
"(if(unsafe-fx<"
" c1_194"
" b1_189)"
"(let-values()"
"(loop_187"
" a1_193"
" b1_189"
" c1_194))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" y_192)"
"(let-values(((b1_195)"
"(unsafe-fx+"
" b1_189"
" '1))"
"((c1_196)"
"(unsafe-fx+"
" c1_190"
" '1)))"
"(if(unsafe-fx<="
" b2_186"
" b1_195)"
"((letrec-values(((loop_197)"
"(lambda(a1_198"
" c1_199)"
"(if(unsafe-fx<"
" c1_199"
" b1_195)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_199"
"(unsafe-vector-ref"
" vec_91"
" a1_198))"
"(loop_197"
"(unsafe-fx+"
" a1_198"
" '1)"
"(unsafe-fx+"
" c1_199"
" '1))))"
"(void)))))"
" loop_197)"
" a1_188"
" c1_196)"
"(loop_187"
" a1_188"
" b1_195"
" c1_196)))))))))"
" loop_187)"
" Amid2_184"
" Bmid1_185"
" Blo_171)))))))))))))"
"(let-values(((Alo_200) '0)"
"((Amid1_201) n/2-_93)"
"((Amid2_202) n/2+_94)"
"((Ahi_203) n_92)"
"((B1lo_204) n_92))"
"(begin"
"(copying-mergesort_169 Amid1_201 B1lo_204 n/2+_94)"
"(if(zero? n/2-_93)"
"(void)"
"(let-values()(copying-mergesort_169 Alo_200 Amid2_202 n/2-_93)))"
"(let-values(((b2_205) Ahi_203))"
"((letrec-values(((loop_206)"
"(lambda(a1_207 b1_208 c1_209)"
"(let-values(((x_210)"
"(unsafe-vector-ref vec_91 a1_207))"
"((y_211)"
"(unsafe-vector-ref"
" vec_91"
" b1_208)))"
"(if(if '#f"
"(not"
"(if '#f"
"(<('#f y_211)('#f x_210))"
"(< y_211 x_210)))"
"(if '#f"
"(<('#f x_210)('#f y_211))"
"(< x_210 y_211)))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 x_210)"
"(let-values(((a1_212)"
"(unsafe-fx+ a1_207 '1))"
"((c1_213)"
"(unsafe-fx+ c1_209 '1)))"
"(if(unsafe-fx< c1_213 b1_208)"
"(let-values()"
"(loop_206 a1_212 b1_208 c1_213))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 y_211)"
"(let-values(((b1_214)"
"(unsafe-fx+ b1_208 '1))"
"((c1_215)"
"(unsafe-fx+ c1_209 '1)))"
"(if(unsafe-fx<= b2_205 b1_214)"
"((letrec-values(((loop_216)"
"(lambda(a1_217"
" c1_218)"
"(if(unsafe-fx<"
" c1_218"
" b1_214)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_218"
"(unsafe-vector-ref"
" vec_91"
" a1_217))"
"(loop_216"
"(unsafe-fx+"
" a1_217"
" '1)"
"(unsafe-fx+"
" c1_218"
" '1))))"
"(void)))))"
" loop_216)"
" a1_207"
" c1_215)"
"(loop_206"
" a1_207"
" b1_214"
" c1_215)))))))))"
" loop_206)"
" B1lo_204"
" Amid2_202"
" Alo_200))))))))))"
"(begin(hash-set! sort-internals_29 < proc_90)(hash-set! sort-internals_29 <= proc_90)))"
"(let-values(((proc_219)"
"(lambda(vec_220 n_221)"
"(let-values(((n/2-_222)(unsafe-fxrshift n_221 '1)))"
"(let-values(((n/2+_223)(unsafe-fx- n_221 n/2-_222)))"
"(letrec-values(((copying-mergesort_298)"
"(lambda(Alo_299 Blo_300 n_301)"
"(if(unsafe-fx= n_301 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299)))"
"(if(unsafe-fx= n_301 '2)"
"(let-values()"
"(let-values(((x_302)"
"(unsafe-vector-ref vec_220 Alo_299))"
"((y_303)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+ Alo_299 '1))))"
"(if(if '#f"
"(>('#f y_303)('#f x_302))"
"(> y_303 x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 y_303)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 '1)"
" x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 x_302)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 '1)"
" y_303)))))"
"(if(unsafe-fx< n_301 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299))"
"((letrec-values(((iloop_304)"
"(lambda(i_305)"
"(if(unsafe-fx<"
" i_305"
" n_301)"
"(let-values()"
"(let-values(((ref-i_306)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+"
" Alo_299"
" i_305))))"
"((letrec-values(((jloop_307)"
"(lambda(j_308)"
"(let-values(((ref-j-1_309)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx-"
" j_308"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_300"
" j_308)"
"(if '#f"
"(>"
"('#f"
" ref-i_306)"
"('#f"
" ref-j-1_309))"
"(>"
" ref-i_306"
" ref-j-1_309))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-j-1_309)"
"(jloop_307"
"(unsafe-fx-"
" j_308"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-i_306)"
"(iloop_304"
"(unsafe-fx+"
" i_305"
" '1))))))))"
" jloop_307)"
"(unsafe-fx+"
" Blo_300"
" i_305))))"
"(void)))))"
" iloop_304)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_310)"
"(unsafe-fxrshift n_301 '1)))"
"(let-values(((n/2+_311)"
"(unsafe-fx- n_301 n/2-_310)))"
"(let-values(((Amid1_312)"
"(unsafe-fx+ Alo_299 n/2-_310))"
"((Amid2_313)"
"(unsafe-fx+ Alo_299 n/2+_311))"
"((Bmid1_314)"
"(unsafe-fx+ Blo_300 n/2-_310)))"
"(begin"
"(copying-mergesort_298"
" Amid1_312"
" Bmid1_314"
" n/2+_311)"
"(copying-mergesort_298"
" Alo_299"
" Amid2_313"
" n/2-_310)"
"(let-values(((b2_315)"
"(unsafe-fx+"
" Blo_300"
" n_301)))"
"((letrec-values(((loop_316)"
"(lambda(a1_317"
" b1_318"
" c1_319)"
"(let-values(((x_320)"
"(unsafe-vector-ref"
" vec_220"
" a1_317))"
"((y_321)"
"(unsafe-vector-ref"
" vec_220"
" b1_318)))"
"(if(if '#t"
"(not"
"(if '#f"
"(>"
"('#f"
" y_321)"
"('#f"
" x_320))"
"(>"
" y_321"
" x_320)))"
"(if '#f"
"(>"
"('#f"
" x_320)"
"('#f"
" y_321))"
"(>"
" x_320"
" y_321)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" x_320)"
"(let-values(((a1_322)"
"(unsafe-fx+"
" a1_317"
" '1))"
"((c1_323)"
"(unsafe-fx+"
" c1_319"
" '1)))"
"(if(unsafe-fx<"
" c1_323"
" b1_318)"
"(let-values()"
"(loop_316"
" a1_322"
" b1_318"
" c1_323))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" y_321)"
"(let-values(((b1_324)"
"(unsafe-fx+"
" b1_318"
" '1))"
"((c1_325)"
"(unsafe-fx+"
" c1_319"
" '1)))"
"(if(unsafe-fx<="
" b2_315"
" b1_324)"
"((letrec-values(((loop_326)"
"(lambda(a1_327"
" c1_328)"
"(if(unsafe-fx<"
" c1_328"
" b1_324)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_328"
"(unsafe-vector-ref"
" vec_220"
" a1_327))"
"(loop_326"
"(unsafe-fx+"
" a1_327"
" '1)"
"(unsafe-fx+"
" c1_328"
" '1))))"
"(void)))))"
" loop_326)"
" a1_317"
" c1_325)"
"(loop_316"
" a1_317"
" b1_324"
" c1_325)))))))))"
" loop_316)"
" Amid2_313"
" Bmid1_314"
" Blo_300)))))))))))))"
"(let-values(((Alo_329) '0)"
"((Amid1_330) n/2-_222)"
"((Amid2_331) n/2+_223)"
"((Ahi_332) n_221)"
"((B1lo_333) n_221))"
"(begin"
"(copying-mergesort_298 Amid1_330 B1lo_333 n/2+_223)"
"(if(zero? n/2-_222)"
"(void)"
"(let-values()(copying-mergesort_298 Alo_329 Amid2_331 n/2-_222)))"
"(let-values(((b2_334) Ahi_332))"
"((letrec-values(((loop_335)"
"(lambda(a1_336 b1_337 c1_338)"
"(let-values(((x_339)"
"(unsafe-vector-ref"
" vec_220"
" a1_336))"
"((y_340)"
"(unsafe-vector-ref"
" vec_220"
" b1_337)))"
"(if(if '#f"
"(not"
"(if '#f"
"(>('#f y_340)('#f x_339))"
"(> y_340 x_339)))"
"(if '#f"
"(>('#f x_339)('#f y_340))"
"(> x_339 y_340)))"
"(begin"
"(unsafe-vector-set! vec_220 c1_338 x_339)"
"(let-values(((a1_341)"
"(unsafe-fx+ a1_336 '1))"
"((c1_342)"
"(unsafe-fx+ c1_338 '1)))"
"(if(unsafe-fx< c1_342 b1_337)"
"(let-values()"
"(loop_335 a1_341 b1_337 c1_342))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_220 c1_338 y_340)"
"(let-values(((b1_343)"
"(unsafe-fx+ b1_337 '1))"
"((c1_344)"
"(unsafe-fx+ c1_338 '1)))"
"(if(unsafe-fx<= b2_334 b1_343)"
"((letrec-values(((loop_345)"
"(lambda(a1_346"
" c1_347)"
"(if(unsafe-fx<"
" c1_347"
" b1_343)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_347"
"(unsafe-vector-ref"
" vec_220"
" a1_346))"
"(loop_345"
"(unsafe-fx+"
" a1_346"
" '1)"
"(unsafe-fx+"
" c1_347"
" '1))))"
"(void)))))"
" loop_345)"
" a1_336"
" c1_344)"
"(loop_335"
" a1_336"
" b1_343"
" c1_344)))))))))"
" loop_335)"
" B1lo_333"
" Amid2_331"
" Alo_329))))))))))"
"(begin(hash-set! sort-internals_29 > proc_219)(hash-set! sort-internals_29 >= proc_219)))"
"(let-values(((proc_348)"
"(lambda(vec_349 n_350)"
"(let-values(((n/2-_351)(unsafe-fxrshift n_350 '1)))"
"(let-values(((n/2+_352)(unsafe-fx- n_350 n/2-_351)))"
"(letrec-values(((copying-mergesort_427)"
"(lambda(Alo_428 Blo_429 n_430)"
"(if(unsafe-fx= n_430 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428)))"
"(if(unsafe-fx= n_430 '2)"
"(let-values()"
"(let-values(((x_431)"
"(unsafe-vector-ref vec_349 Alo_428))"
"((y_432)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+ Alo_428 '1))))"
"(if(if '#f"
"(string<?('#f y_432)('#f x_431))"
"(string<? y_432 x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 y_432)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 '1)"
" x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 x_431)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 '1)"
" y_432)))))"
"(if(unsafe-fx< n_430 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428))"
"((letrec-values(((iloop_433)"
"(lambda(i_434)"
"(if(unsafe-fx<"
" i_434"
" n_430)"
"(let-values()"
"(let-values(((ref-i_435)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+"
" Alo_428"
" i_434))))"
"((letrec-values(((jloop_436)"
"(lambda(j_437)"
"(let-values(((ref-j-1_438)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx-"
" j_437"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_429"
" j_437)"
"(if '#f"
"(string<?"
"('#f"
" ref-i_435)"
"('#f"
" ref-j-1_438))"
"(string<?"
" ref-i_435"
" ref-j-1_438))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-j-1_438)"
"(jloop_436"
"(unsafe-fx-"
" j_437"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-i_435)"
"(iloop_433"
"(unsafe-fx+"
" i_434"
" '1))))))))"
" jloop_436)"
"(unsafe-fx+"
" Blo_429"
" i_434))))"
"(void)))))"
" iloop_433)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_439)"
"(unsafe-fxrshift n_430 '1)))"
"(let-values(((n/2+_440)"
"(unsafe-fx- n_430 n/2-_439)))"
"(let-values(((Amid1_441)"
"(unsafe-fx+ Alo_428 n/2-_439))"
"((Amid2_442)"
"(unsafe-fx+ Alo_428 n/2+_440))"
"((Bmid1_443)"
"(unsafe-fx+ Blo_429 n/2-_439)))"
"(begin"
"(copying-mergesort_427"
" Amid1_441"
" Bmid1_443"
" n/2+_440)"
"(copying-mergesort_427"
" Alo_428"
" Amid2_442"
" n/2-_439)"
"(let-values(((b2_444)"
"(unsafe-fx+"
" Blo_429"
" n_430)))"
"((letrec-values(((loop_445)"
"(lambda(a1_446"
" b1_447"
" c1_448)"
"(let-values(((x_449)"
"(unsafe-vector-ref"
" vec_349"
" a1_446))"
"((y_450)"
"(unsafe-vector-ref"
" vec_349"
" b1_447)))"
"(if(if '#t"
"(not"
"(if '#f"
"(string<?"
"('#f"
" y_450)"
"('#f"
" x_449))"
"(string<?"
" y_450"
" x_449)))"
"(if '#f"
"(string<?"
"('#f"
" x_449)"
"('#f"
" y_450))"
"(string<?"
" x_449"
" y_450)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" x_449)"
"(let-values(((a1_451)"
"(unsafe-fx+"
" a1_446"
" '1))"
"((c1_452)"
"(unsafe-fx+"
" c1_448"
" '1)))"
"(if(unsafe-fx<"
" c1_452"
" b1_447)"
"(let-values()"
"(loop_445"
" a1_451"
" b1_447"
" c1_452))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" y_450)"
"(let-values(((b1_453)"
"(unsafe-fx+"
" b1_447"
" '1))"
"((c1_454)"
"(unsafe-fx+"
" c1_448"
" '1)))"
"(if(unsafe-fx<="
" b2_444"
" b1_453)"
"((letrec-values(((loop_455)"
"(lambda(a1_456"
" c1_457)"
"(if(unsafe-fx<"
" c1_457"
" b1_453)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_457"
"(unsafe-vector-ref"
" vec_349"
" a1_456))"
"(loop_455"
"(unsafe-fx+"
" a1_456"
" '1)"
"(unsafe-fx+"
" c1_457"
" '1))))"
"(void)))))"
" loop_455)"
" a1_446"
" c1_454)"
"(loop_445"
" a1_446"
" b1_453"
" c1_454)))))))))"
" loop_445)"
" Amid2_442"
" Bmid1_443"
" Blo_429)))))))))))))"
"(let-values(((Alo_458) '0)"
"((Amid1_459) n/2-_351)"
"((Amid2_460) n/2+_352)"
"((Ahi_461) n_350)"
"((B1lo_462) n_350))"
"(begin"
"(copying-mergesort_427 Amid1_459 B1lo_462 n/2+_352)"
"(if(zero? n/2-_351)"
"(void)"
"(let-values()(copying-mergesort_427 Alo_458 Amid2_460 n/2-_351)))"
"(let-values(((b2_463) Ahi_461))"
"((letrec-values(((loop_464)"
"(lambda(a1_465 b1_466 c1_467)"
"(let-values(((x_468)"
"(unsafe-vector-ref"
" vec_349"
" a1_465))"
"((y_469)"
"(unsafe-vector-ref"
" vec_349"
" b1_466)))"
"(if(if '#f"
"(not"
"(if '#f"
"(string<?('#f y_469)('#f x_468))"
"(string<? y_469 x_468)))"
"(if '#f"
"(string<?('#f x_468)('#f y_469))"
"(string<? x_468 y_469)))"
"(begin"
"(unsafe-vector-set! vec_349 c1_467 x_468)"
"(let-values(((a1_470)"
"(unsafe-fx+ a1_465 '1))"
"((c1_471)"
"(unsafe-fx+ c1_467 '1)))"
"(if(unsafe-fx< c1_471 b1_466)"
"(let-values()"
"(loop_464 a1_470 b1_466 c1_471))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_349 c1_467 y_469)"
"(let-values(((b1_472)"
"(unsafe-fx+ b1_466 '1))"
"((c1_473)"
"(unsafe-fx+ c1_467 '1)))"
"(if(unsafe-fx<= b2_463 b1_472)"
"((letrec-values(((loop_474)"
"(lambda(a1_475"
" c1_476)"
"(if(unsafe-fx<"
" c1_476"
" b1_472)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_476"
"(unsafe-vector-ref"
" vec_349"
" a1_475))"
"(loop_474"
"(unsafe-fx+"
" a1_475"
" '1)"
"(unsafe-fx+"
" c1_476"
" '1))))"
"(void)))))"
" loop_474)"
" a1_465"
" c1_473)"
"(loop_464"
" a1_465"
" b1_472"
" c1_473)))))))))"
" loop_464)"
" B1lo_462"
" Amid2_460"
" Alo_458))))))))))"
"(begin"
"(hash-set! sort-internals_29 string<? proc_348)"
"(hash-set! sort-internals_29 string<=? proc_348)))"
"(let-values(((proc_477)"
"(lambda(vec_478 n_479)"
"(let-values(((n/2-_480)(unsafe-fxrshift n_479 '1)))"
"(let-values(((n/2+_481)(unsafe-fx- n_479 n/2-_480)))"
"(letrec-values(((copying-mergesort_556)"
"(lambda(Alo_557 Blo_558 n_559)"
"(if(unsafe-fx= n_559 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557)))"
"(if(unsafe-fx= n_559 '2)"
"(let-values()"
"(let-values(((x_560)"
"(unsafe-vector-ref vec_478 Alo_557))"
"((y_561)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+ Alo_557 '1))))"
"(if(if '#f"
"(string-ci<?('#f y_561)('#f x_560))"
"(string-ci<? y_561 x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 y_561)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 '1)"
" x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 x_560)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 '1)"
" y_561)))))"
"(if(unsafe-fx< n_559 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557))"
"((letrec-values(((iloop_562)"
"(lambda(i_563)"
"(if(unsafe-fx<"
" i_563"
" n_559)"
"(let-values()"
"(let-values(((ref-i_564)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+"
" Alo_557"
" i_563))))"
"((letrec-values(((jloop_565)"
"(lambda(j_566)"
"(let-values(((ref-j-1_567)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx-"
" j_566"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_558"
" j_566)"
"(if '#f"
"(string-ci<?"
"('#f"
" ref-i_564)"
"('#f"
" ref-j-1_567))"
"(string-ci<?"
" ref-i_564"
" ref-j-1_567))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-j-1_567)"
"(jloop_565"
"(unsafe-fx-"
" j_566"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-i_564)"
"(iloop_562"
"(unsafe-fx+"
" i_563"
" '1))))))))"
" jloop_565)"
"(unsafe-fx+"
" Blo_558"
" i_563))))"
"(void)))))"
" iloop_562)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_568)"
"(unsafe-fxrshift n_559 '1)))"
"(let-values(((n/2+_569)"
"(unsafe-fx- n_559 n/2-_568)))"
"(let-values(((Amid1_570)"
"(unsafe-fx+ Alo_557 n/2-_568))"
"((Amid2_571)"
"(unsafe-fx+ Alo_557 n/2+_569))"
"((Bmid1_572)"
"(unsafe-fx+ Blo_558 n/2-_568)))"
"(begin"
"(copying-mergesort_556"
" Amid1_570"
" Bmid1_572"
" n/2+_569)"
"(copying-mergesort_556"
" Alo_557"
" Amid2_571"
" n/2-_568)"
"(let-values(((b2_573)"
"(unsafe-fx+"
" Blo_558"
" n_559)))"
"((letrec-values(((loop_574)"
"(lambda(a1_575"
" b1_576"
" c1_577)"
"(let-values(((x_578)"
"(unsafe-vector-ref"
" vec_478"
" a1_575))"
"((y_579)"
"(unsafe-vector-ref"
" vec_478"
" b1_576)))"
"(if(if '#t"
"(not"
"(if '#f"
"(string-ci<?"
"('#f"
" y_579)"
"('#f"
" x_578))"
"(string-ci<?"
" y_579"
" x_578)))"
"(if '#f"
"(string-ci<?"
"('#f"
" x_578)"
"('#f"
" y_579))"
"(string-ci<?"
" x_578"
" y_579)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" x_578)"
"(let-values(((a1_580)"
"(unsafe-fx+"
" a1_575"
" '1))"
"((c1_581)"
"(unsafe-fx+"
" c1_577"
" '1)))"
"(if(unsafe-fx<"
" c1_581"
" b1_576)"
"(let-values()"
"(loop_574"
" a1_580"
" b1_576"
" c1_581))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" y_579)"
"(let-values(((b1_582)"
"(unsafe-fx+"
" b1_576"
" '1))"
"((c1_583)"
"(unsafe-fx+"
" c1_577"
" '1)))"
"(if(unsafe-fx<="
" b2_573"
" b1_582)"
"((letrec-values(((loop_584)"
"(lambda(a1_585"
" c1_586)"
"(if(unsafe-fx<"
" c1_586"
" b1_582)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_586"
"(unsafe-vector-ref"
" vec_478"
" a1_585))"
"(loop_584"
"(unsafe-fx+"
" a1_585"
" '1)"
"(unsafe-fx+"
" c1_586"
" '1))))"
"(void)))))"
" loop_584)"
" a1_575"
" c1_583)"
"(loop_574"
" a1_575"
" b1_582"
" c1_583)))))))))"
" loop_574)"
" Amid2_571"
" Bmid1_572"
" Blo_558)))))))))))))"
"(let-values(((Alo_587) '0)"
"((Amid1_588) n/2-_480)"
"((Amid2_589) n/2+_481)"
"((Ahi_590) n_479)"
"((B1lo_591) n_479))"
"(begin"
"(copying-mergesort_556 Amid1_588 B1lo_591 n/2+_481)"
"(if(zero? n/2-_480)"
"(void)"
"(let-values()(copying-mergesort_556 Alo_587 Amid2_589 n/2-_480)))"
"(let-values(((b2_592) Ahi_590))"
"((letrec-values(((loop_593)"
"(lambda(a1_594 b1_595 c1_596)"
"(let-values(((x_597)"
"(unsafe-vector-ref"
" vec_478"
" a1_594))"
"((y_598)"
"(unsafe-vector-ref"
" vec_478"
" b1_595)))"
"(if(if '#f"
"(not"
"(if '#f"
"(string-ci<?('#f y_598)('#f x_597))"
"(string-ci<? y_598 x_597)))"
"(if '#f"
"(string-ci<?('#f x_597)('#f y_598))"
"(string-ci<? x_597 y_598)))"
"(begin"
"(unsafe-vector-set! vec_478 c1_596 x_597)"
"(let-values(((a1_599)"
"(unsafe-fx+ a1_594 '1))"
"((c1_600)"
"(unsafe-fx+ c1_596 '1)))"
"(if(unsafe-fx< c1_600 b1_595)"
"(let-values()"
"(loop_593 a1_599 b1_595 c1_600))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_478 c1_596 y_598)"
"(let-values(((b1_601)"
"(unsafe-fx+ b1_595 '1))"
"((c1_602)"
"(unsafe-fx+ c1_596 '1)))"
"(if(unsafe-fx<= b2_592 b1_601)"
"((letrec-values(((loop_603)"
"(lambda(a1_604"
" c1_605)"
"(if(unsafe-fx<"
" c1_605"
" b1_601)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_605"
"(unsafe-vector-ref"
" vec_478"
" a1_604))"
"(loop_603"
"(unsafe-fx+"
" a1_604"
" '1)"
"(unsafe-fx+"
" c1_605"
" '1))))"
"(void)))))"
" loop_603)"
" a1_594"
" c1_602)"
"(loop_593"
" a1_594"
" b1_601"
" c1_602)))))))))"
" loop_593)"
" B1lo_591"
" Amid2_589"
" Alo_587))))))))))"
"(begin"
"(hash-set! sort-internals_29 string-ci<? proc_477)"
"(hash-set! sort-internals_29 string-ci<=? proc_477)))"
"(let-values(((proc_606)"
"(lambda(vec_607 n_608)"
"(let-values(((n/2-_609)(unsafe-fxrshift n_608 '1)))"
"(let-values(((n/2+_610)(unsafe-fx- n_608 n/2-_609)))"
"(letrec-values(((copying-mergesort_685)"
"(lambda(Alo_686 Blo_687 n_688)"
"(if(unsafe-fx= n_688 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686)))"
"(if(unsafe-fx= n_688 '2)"
"(let-values()"
"(let-values(((x_689)"
"(unsafe-vector-ref vec_607 Alo_686))"
"((y_690)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+ Alo_686 '1))))"
"(if(if '#f"
"(keyword<?('#f y_690)('#f x_689))"
"(keyword<? y_690 x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 y_690)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 '1)"
" x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 x_689)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 '1)"
" y_690)))))"
"(if(unsafe-fx< n_688 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686))"
"((letrec-values(((iloop_691)"
"(lambda(i_692)"
"(if(unsafe-fx<"
" i_692"
" n_688)"
"(let-values()"
"(let-values(((ref-i_693)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+"
" Alo_686"
" i_692))))"
"((letrec-values(((jloop_694)"
"(lambda(j_695)"
"(let-values(((ref-j-1_696)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx-"
" j_695"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_687"
" j_695)"
"(if '#f"
"(keyword<?"
"('#f"
" ref-i_693)"
"('#f"
" ref-j-1_696))"
"(keyword<?"
" ref-i_693"
" ref-j-1_696))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-j-1_696)"
"(jloop_694"
"(unsafe-fx-"
" j_695"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-i_693)"
"(iloop_691"
"(unsafe-fx+"
" i_692"
" '1))))))))"
" jloop_694)"
"(unsafe-fx+"
" Blo_687"
" i_692))))"
"(void)))))"
" iloop_691)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_697)"
"(unsafe-fxrshift n_688 '1)))"
"(let-values(((n/2+_698)"
"(unsafe-fx- n_688 n/2-_697)))"
"(let-values(((Amid1_699)"
"(unsafe-fx+ Alo_686 n/2-_697))"
"((Amid2_700)"
"(unsafe-fx+ Alo_686 n/2+_698))"
"((Bmid1_701)"
"(unsafe-fx+ Blo_687 n/2-_697)))"
"(begin"
"(copying-mergesort_685"
" Amid1_699"
" Bmid1_701"
" n/2+_698)"
"(copying-mergesort_685"
" Alo_686"
" Amid2_700"
" n/2-_697)"
"(let-values(((b2_702)"
"(unsafe-fx+"
" Blo_687"
" n_688)))"
"((letrec-values(((loop_703)"
"(lambda(a1_704"
" b1_705"
" c1_706)"
"(let-values(((x_707)"
"(unsafe-vector-ref"
" vec_607"
" a1_704))"
"((y_708)"
"(unsafe-vector-ref"
" vec_607"
" b1_705)))"
"(if(if '#t"
"(not"
"(if '#f"
"(keyword<?"
"('#f"
" y_708)"
"('#f"
" x_707))"
"(keyword<?"
" y_708"
" x_707)))"
"(if '#f"
"(keyword<?"
"('#f"
" x_707)"
"('#f"
" y_708))"
"(keyword<?"
" x_707"
" y_708)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" x_707)"
"(let-values(((a1_709)"
"(unsafe-fx+"
" a1_704"
" '1))"
"((c1_710)"
"(unsafe-fx+"
" c1_706"
" '1)))"
"(if(unsafe-fx<"
" c1_710"
" b1_705)"
"(let-values()"
"(loop_703"
" a1_709"
" b1_705"
" c1_710))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" y_708)"
"(let-values(((b1_711)"
"(unsafe-fx+"
" b1_705"
" '1))"
"((c1_712)"
"(unsafe-fx+"
" c1_706"
" '1)))"
"(if(unsafe-fx<="
" b2_702"
" b1_711)"
"((letrec-values(((loop_713)"
"(lambda(a1_714"
" c1_715)"
"(if(unsafe-fx<"
" c1_715"
" b1_711)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_715"
"(unsafe-vector-ref"
" vec_607"
" a1_714))"
"(loop_713"
"(unsafe-fx+"
" a1_714"
" '1)"
"(unsafe-fx+"
" c1_715"
" '1))))"
"(void)))))"
" loop_713)"
" a1_704"
" c1_712)"
"(loop_703"
" a1_704"
" b1_711"
" c1_712)))))))))"
" loop_703)"
" Amid2_700"
" Bmid1_701"
" Blo_687)))))))))))))"
"(let-values(((Alo_716) '0)"
"((Amid1_717) n/2-_609)"
"((Amid2_718) n/2+_610)"
"((Ahi_719) n_608)"
"((B1lo_720) n_608))"
"(begin"
"(copying-mergesort_685 Amid1_717 B1lo_720 n/2+_610)"
"(if(zero? n/2-_609)"
"(void)"
"(let-values()(copying-mergesort_685 Alo_716 Amid2_718 n/2-_609)))"
"(let-values(((b2_721) Ahi_719))"
"((letrec-values(((loop_722)"
"(lambda(a1_723 b1_724 c1_725)"
"(let-values(((x_726)"
"(unsafe-vector-ref"
" vec_607"
" a1_723))"
"((y_727)"
"(unsafe-vector-ref"
" vec_607"
" b1_724)))"
"(if(if '#f"
"(not"
"(if '#f"
"(keyword<?('#f y_727)('#f x_726))"
"(keyword<? y_727 x_726)))"
"(if '#f"
"(keyword<?('#f x_726)('#f y_727))"
"(keyword<? x_726 y_727)))"
"(begin"
"(unsafe-vector-set! vec_607 c1_725 x_726)"
"(let-values(((a1_728)"
"(unsafe-fx+ a1_723 '1))"
"((c1_729)"
"(unsafe-fx+ c1_725 '1)))"
"(if(unsafe-fx< c1_729 b1_724)"
"(let-values()"
"(loop_722 a1_728 b1_724 c1_729))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_607 c1_725 y_727)"
"(let-values(((b1_730)"
"(unsafe-fx+ b1_724 '1))"
"((c1_731)"
"(unsafe-fx+ c1_725 '1)))"
"(if(unsafe-fx<= b2_721 b1_730)"
"((letrec-values(((loop_732)"
"(lambda(a1_733"
" c1_734)"
"(if(unsafe-fx<"
" c1_734"
" b1_730)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_734"
"(unsafe-vector-ref"
" vec_607"
" a1_733))"
"(loop_732"
"(unsafe-fx+"
" a1_733"
" '1)"
"(unsafe-fx+"
" c1_734"
" '1))))"
"(void)))))"
" loop_732)"
" a1_723"
" c1_731)"
"(loop_722"
" a1_723"
" b1_730"
" c1_731)))))))))"
" loop_722)"
" B1lo_720"
" Amid2_718"
" Alo_716))))))))))"
"(hash-set! sort-internals_29 keyword<? proc_606))))))"
"(case-lambda"
"((lst_735 <?_736)"
"(let-values(((n_737)(length lst_735)))"
"(if(= n_737 '0)"
"(let-values() lst_735)"
"(if '#f"
"(let-values()"
"(let-values(((vec_752)(make-vector(+ n_737(ceiling(/ n_737 '2))))))"
"(begin"
"((letrec-values(((loop_753)"
"(lambda(i_754 lst_755)"
"(if(pair? lst_755)"
"(let-values()"
"(let-values(((x_756)(car lst_755)))"
"(begin"
"(vector-set! vec_752 i_754(cons('#f x_756) x_756))"
"(loop_753(add1 i_754)(cdr lst_755)))))"
"(void)))))"
" loop_753)"
" '0"
" lst_735)"
"(let-values()"
"(let-values(((n/2-_757)(unsafe-fxrshift n_737 '1)))"
"(let-values(((n/2+_758)(unsafe-fx- n_737 n/2-_757)))"
"(letrec-values(((copying-mergesort_833)"
"(lambda(Alo_834 Blo_835 n_836)"
"(if(unsafe-fx= n_836 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_752"
" Blo_835"
"(unsafe-vector-ref vec_752 Alo_834)))"
"(if(unsafe-fx= n_836 '2)"
"(let-values()"
"(let-values(((x_837)(unsafe-vector-ref vec_752 Alo_834))"
"((y_838)"
"(unsafe-vector-ref vec_752(unsafe-fx+ Alo_834 '1))))"
"(if(if '#t"
"(<?_736(car y_838)(car x_837))"
"(<?_736 y_838 x_837))"
"(begin"
"(unsafe-vector-set! vec_752 Blo_835 y_838)"
"(unsafe-vector-set! vec_752(unsafe-fx+ Blo_835 '1) x_837))"
"(begin"
"(unsafe-vector-set! vec_752 Blo_835 x_837)"
"(unsafe-vector-set!"
" vec_752"
"(unsafe-fx+ Blo_835 '1)"
" y_838)))))"
"(if(unsafe-fx< n_836 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" Blo_835"
"(unsafe-vector-ref vec_752 Alo_834))"
"((letrec-values(((iloop_839)"
"(lambda(i_840)"
"(if(unsafe-fx< i_840 n_836)"
"(let-values()"
"(let-values(((ref-i_841)"
"(unsafe-vector-ref"
" vec_752"
"(unsafe-fx+"
" Alo_834"
" i_840))))"
"((letrec-values(((jloop_842)"
"(lambda(j_843)"
"(let-values(((ref-j-1_844)"
"(unsafe-vector-ref"
" vec_752"
"(unsafe-fx-"
" j_843"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_835"
" j_843)"
"(if '#t"
"(<?_736"
"(car"
" ref-i_841)"
"(car"
" ref-j-1_844))"
"(<?_736"
" ref-i_841"
" ref-j-1_844))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" j_843"
" ref-j-1_844)"
"(jloop_842"
"(unsafe-fx-"
" j_843"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" j_843"
" ref-i_841)"
"(iloop_839"
"(unsafe-fx+"
" i_840"
" '1))))))))"
" jloop_842)"
"(unsafe-fx+ Blo_835 i_840))))"
"(void)))))"
" iloop_839)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_845)(unsafe-fxrshift n_836 '1)))"
"(let-values(((n/2+_846)(unsafe-fx- n_836 n/2-_845)))"
"(let-values(((Amid1_847)(unsafe-fx+ Alo_834 n/2-_845))"
"((Amid2_848)(unsafe-fx+ Alo_834 n/2+_846))"
"((Bmid1_849)(unsafe-fx+ Blo_835 n/2-_845)))"
"(begin"
"(copying-mergesort_833 Amid1_847 Bmid1_849 n/2+_846)"
"(copying-mergesort_833 Alo_834 Amid2_848 n/2-_845)"
"(let-values(((b2_850)(unsafe-fx+ Blo_835 n_836)))"
"((letrec-values(((loop_851)"
"(lambda(a1_852 b1_853 c1_854)"
"(let-values(((x_855)"
"(unsafe-vector-ref"
" vec_752"
" a1_852))"
"((y_856)"
"(unsafe-vector-ref"
" vec_752"
" b1_853)))"
"(if(if '#t"
"(not"
"(if '#t"
"(<?_736"
"(car y_856)"
"(car x_855))"
"(<?_736 y_856 x_855)))"
"(if '#t"
"(<?_736"
"(car x_855)"
"(car y_856))"
"(<?_736 x_855 y_856)))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_854"
" x_855)"
"(let-values(((a1_857)"
"(unsafe-fx+"
" a1_852"
" '1))"
"((c1_858)"
"(unsafe-fx+"
" c1_854"
" '1)))"
"(if(unsafe-fx<"
" c1_858"
" b1_853)"
"(let-values()"
"(loop_851"
" a1_857"
" b1_853"
" c1_858))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_854"
" y_856)"
"(let-values(((b1_859)"
"(unsafe-fx+"
" b1_853"
" '1))"
"((c1_860)"
"(unsafe-fx+"
" c1_854"
" '1)))"
"(if(unsafe-fx<="
" b2_850"
" b1_859)"
"((letrec-values(((loop_861)"
"(lambda(a1_862"
" c1_863)"
"(if(unsafe-fx<"
" c1_863"
" b1_859)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_863"
"(unsafe-vector-ref"
" vec_752"
" a1_862))"
"(loop_861"
"(unsafe-fx+"
" a1_862"
" '1)"
"(unsafe-fx+"
" c1_863"
" '1))))"
"(void)))))"
" loop_861)"
" a1_852"
" c1_860)"
"(loop_851"
" a1_852"
" b1_859"
" c1_860)))))))))"
" loop_851)"
" Amid2_848"
" Bmid1_849"
" Blo_835)))))))))))))"
"(let-values(((Alo_864) '0)"
"((Amid1_865) n/2-_757)"
"((Amid2_866) n/2+_758)"
"((Ahi_867) n_737)"
"((B1lo_868) n_737))"
"(begin"
"(copying-mergesort_833 Amid1_865 B1lo_868 n/2+_758)"
"(if(zero? n/2-_757)"
"(void)"
"(let-values()(copying-mergesort_833 Alo_864 Amid2_866 n/2-_757)))"
"(let-values(((b2_869) Ahi_867))"
"((letrec-values(((loop_870)"
"(lambda(a1_871 b1_872 c1_873)"
"(let-values(((x_874)(unsafe-vector-ref vec_752 a1_871))"
"((y_875)(unsafe-vector-ref vec_752 b1_872)))"
"(if(if '#f"
"(not"
"(if '#t"
"(<?_736(car y_875)(car x_874))"
"(<?_736 y_875 x_874)))"
"(if '#t"
"(<?_736(car x_874)(car y_875))"
"(<?_736 x_874 y_875)))"
"(begin"
"(unsafe-vector-set! vec_752 c1_873 x_874)"
"(let-values(((a1_876)(unsafe-fx+ a1_871 '1))"
"((c1_877)(unsafe-fx+ c1_873 '1)))"
"(if(unsafe-fx< c1_877 b1_872)"
"(let-values()(loop_870 a1_876 b1_872 c1_877))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_752 c1_873 y_875)"
"(let-values(((b1_878)(unsafe-fx+ b1_872 '1))"
"((c1_879)(unsafe-fx+ c1_873 '1)))"
"(if(unsafe-fx<= b2_869 b1_878)"
"((letrec-values(((loop_880)"
"(lambda(a1_881 c1_882)"
"(if(unsafe-fx< c1_882 b1_878)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_882"
"(unsafe-vector-ref"
" vec_752"
" a1_881))"
"(loop_880"
"(unsafe-fx+ a1_881 '1)"
"(unsafe-fx+ c1_882 '1))))"
"(void)))))"
" loop_880)"
" a1_871"
" c1_879)"
"(loop_870 a1_871 b1_878 c1_879)))))))))"
" loop_870)"
" B1lo_868"
" Amid2_866"
" Alo_864))))))))"
"((letrec-values(((loop_883)"
"(lambda(i_884 r_885)"
"(let-values(((i_886)(sub1 i_884)))"
"(if(< i_886 '0)"
" r_885"
"(loop_883 i_886(cons(cdr(vector-ref vec_752 i_886)) r_885)))))))"
" loop_883)"
" n_737"
" '()))))"
"(if(< n_737 '2)"
"(let-values() lst_735)"
"(if((letrec-values(((loop_887)"
"(lambda(last_888 next_889)"
"(let-values(((or-part_890)(null? next_889)))"
"(if or-part_890"
" or-part_890"
"(if(not"
"(if '#f"
"(<?_736('#f(car next_889))('#f last_888))"
"(<?_736(car next_889) last_888)))"
"(loop_887(car next_889)(cdr next_889))"
" '#f))))))"
" loop_887)"
"(car lst_735)"
"(cdr lst_735))"
"(let-values() lst_735)"
"(if(<= n_737 '3)"
"(let-values()"
"(if(= n_737 '2)"
"(list(cadr lst_735)(car lst_735))"
"(let-values(((a_891)(car lst_735))((b_892)(cadr lst_735))((c_893)(caddr lst_735)))"
"(let-values(((a_894)(car lst_735))((b_895)(cadr lst_735))((c_896)(caddr lst_735)))"
"(if(if '#f(<?_736('#f b_895)('#f a_894))(<?_736 b_895 a_894))"
"(if(if '#f(<?_736('#f c_896)('#f b_895))(<?_736 c_896 b_895))"
"(list c_896 b_895 a_894)"
"(if(if '#f(<?_736('#f c_896)('#f a_894))(<?_736 c_896 a_894))"
"(list b_895 c_896 a_894)"
"(list b_895 a_894 c_896)))"
"(if(if '#f(<?_736('#f c_896)('#f a_894))(<?_736 c_896 a_894))"
"(list c_896 a_894 b_895)"
"(list a_894 c_896 b_895)))))))"
"(let-values()"
"(let-values(((vec_897)(make-vector(+ n_737(ceiling(/ n_737 '2))))))"
"(begin"
"((letrec-values(((loop_898)"
"(lambda(i_899 lst_900)"
"(if(pair? lst_900)"
"(let-values()"
"(begin"
"(vector-set! vec_897 i_899(car lst_900))"
"(loop_898(add1 i_899)(cdr lst_900))))"
"(void)))))"
" loop_898)"
" '0"
" lst_735)"
"(if '#f"
"(let-values()"
"(let-values(((n/2-_901)(unsafe-fxrshift n_737 '1)))"
"(let-values(((n/2+_902)(unsafe-fx- n_737 n/2-_901)))"
"(letrec-values(((copying-mergesort_977)"
"(lambda(Alo_978 Blo_979 n_980)"
"(if(unsafe-fx= n_980 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_979"
"(unsafe-vector-ref vec_897 Alo_978)))"
"(if(unsafe-fx= n_980 '2)"
"(let-values()"
"(let-values(((x_981)(unsafe-vector-ref vec_897 Alo_978))"
"((y_982)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_978 '1))))"
"(if(if '#t"
"(<?_736('#f y_982)('#f x_981))"
"(<?_736 y_982 x_981))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_979 y_982)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_979 '1)"
" x_981))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_979 x_981)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_979 '1)"
" y_982)))))"
"(if(unsafe-fx< n_980 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_979"
"(unsafe-vector-ref vec_897 Alo_978))"
"((letrec-values(((iloop_983)"
"(lambda(i_984)"
"(if(unsafe-fx< i_984 n_980)"
"(let-values()"
"(let-values(((ref-i_985)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_978"
" i_984))))"
"((letrec-values(((jloop_986)"
"(lambda(j_987)"
"(let-values(((ref-j-1_988)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_987"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_979"
" j_987)"
"(if '#t"
"(<?_736"
"('#f"
" ref-i_985)"
"('#f"
" ref-j-1_988))"
"(<?_736"
" ref-i_985"
" ref-j-1_988))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_987"
" ref-j-1_988)"
"(jloop_986"
"(unsafe-fx-"
" j_987"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_987"
" ref-i_985)"
"(iloop_983"
"(unsafe-fx+"
" i_984"
" '1))))))))"
" jloop_986)"
"(unsafe-fx+"
" Blo_979"
" i_984))))"
"(void)))))"
" iloop_983)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_989)(unsafe-fxrshift n_980 '1)))"
"(let-values(((n/2+_990)(unsafe-fx- n_980 n/2-_989)))"
"(let-values(((Amid1_991)"
"(unsafe-fx+ Alo_978 n/2-_989))"
"((Amid2_992)"
"(unsafe-fx+ Alo_978 n/2+_990))"
"((Bmid1_993)"
"(unsafe-fx+ Blo_979 n/2-_989)))"
"(begin"
"(copying-mergesort_977"
" Amid1_991"
" Bmid1_993"
" n/2+_990)"
"(copying-mergesort_977"
" Alo_978"
" Amid2_992"
" n/2-_989)"
"(let-values(((b2_994)"
"(unsafe-fx+ Blo_979 n_980)))"
"((letrec-values(((loop_995)"
"(lambda(a1_996"
" b1_997"
" c1_998)"
"(let-values(((x_999)"
"(unsafe-vector-ref"
" vec_897"
" a1_996))"
"((y_1000)"
"(unsafe-vector-ref"
" vec_897"
" b1_997)))"
"(if(if '#t"
"(not"
"(if '#t"
"(<?_736"
"('#f y_1000)"
"('#f x_999))"
"(<?_736"
" y_1000"
" x_999)))"
"(if '#t"
"(<?_736"
"('#f x_999)"
"('#f y_1000))"
"(<?_736"
" x_999"
" y_1000)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_998"
" x_999)"
"(let-values(((a1_1001)"
"(unsafe-fx+"
" a1_996"
" '1))"
"((c1_1002)"
"(unsafe-fx+"
" c1_998"
" '1)))"
"(if(unsafe-fx<"
" c1_1002"
" b1_997)"
"(let-values()"
"(loop_995"
" a1_1001"
" b1_997"
" c1_1002))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_998"
" y_1000)"
"(let-values(((b1_1003)"
"(unsafe-fx+"
" b1_997"
" '1))"
"((c1_1004)"
"(unsafe-fx+"
" c1_998"
" '1)))"
"(if(unsafe-fx<="
" b2_994"
" b1_1003)"
"((letrec-values(((loop_1005)"
"(lambda(a1_1006"
" c1_1007)"
"(if(unsafe-fx<"
" c1_1007"
" b1_1003)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1007"
"(unsafe-vector-ref"
" vec_897"
" a1_1006))"
"(loop_1005"
"(unsafe-fx+"
" a1_1006"
" '1)"
"(unsafe-fx+"
" c1_1007"
" '1))))"
"(void)))))"
" loop_1005)"
" a1_996"
" c1_1004)"
"(loop_995"
" a1_996"
" b1_1003"
" c1_1004)))))))))"
" loop_995)"
" Amid2_992"
" Bmid1_993"
" Blo_979)))))))))))))"
"(let-values(((Alo_1008) '0)"
"((Amid1_1009) n/2-_901)"
"((Amid2_1010) n/2+_902)"
"((Ahi_1011) n_737)"
"((B1lo_1012) n_737))"
"(begin"
"(copying-mergesort_977 Amid1_1009 B1lo_1012 n/2+_902)"
"(if(zero? n/2-_901)"
"(void)"
"(let-values()(copying-mergesort_977 Alo_1008 Amid2_1010 n/2-_901)))"
"(let-values(((b2_1013) Ahi_1011))"
"((letrec-values(((loop_1014)"
"(lambda(a1_1015 b1_1016 c1_1017)"
"(let-values(((x_1018)"
"(unsafe-vector-ref vec_897 a1_1015))"
"((y_1019)"
"(unsafe-vector-ref vec_897 b1_1016)))"
"(if(if '#f"
"(not"
"(if '#t"
"(<?_736('#f y_1019)('#f x_1018))"
"(<?_736 y_1019 x_1018)))"
"(if '#t"
"(<?_736('#f x_1018)('#f y_1019))"
"(<?_736 x_1018 y_1019)))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1017 x_1018)"
"(let-values(((a1_1020)(unsafe-fx+ a1_1015 '1))"
"((c1_1021)(unsafe-fx+ c1_1017 '1)))"
"(if(unsafe-fx< c1_1021 b1_1016)"
"(let-values()"
"(loop_1014 a1_1020 b1_1016 c1_1021))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1017 y_1019)"
"(let-values(((b1_1022)(unsafe-fx+ b1_1016 '1))"
"((c1_1023)(unsafe-fx+ c1_1017 '1)))"
"(if(unsafe-fx<= b2_1013 b1_1022)"
"((letrec-values(((loop_1024)"
"(lambda(a1_1025 c1_1026)"
"(if(unsafe-fx<"
" c1_1026"
" b1_1022)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1026"
"(unsafe-vector-ref"
" vec_897"
" a1_1025))"
"(loop_1024"
"(unsafe-fx+"
" a1_1025"
" '1)"
"(unsafe-fx+"
" c1_1026"
" '1))))"
"(void)))))"
" loop_1024)"
" a1_1015"
" c1_1023)"
"(loop_1014 a1_1015 b1_1022 c1_1023)))))))))"
" loop_1014)"
" B1lo_1012"
" Amid2_1010"
" Alo_1008))))))))"
"(let-values(((si_1027)(hash-ref sort-internals_29 <?_736 '#f)))"
"(if si_1027"
"(si_1027 vec_897 n_737)"
"(let-values()"
"(let-values(((n/2-_1028)(unsafe-fxrshift n_737 '1)))"
"(let-values(((n/2+_1029)(unsafe-fx- n_737 n/2-_1028)))"
"(letrec-values(((copying-mergesort_1104)"
"(lambda(Alo_1105 Blo_1106 n_1107)"
"(if(unsafe-fx= n_1107 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105)))"
"(if(unsafe-fx= n_1107 '2)"
"(let-values()"
"(let-values(((x_1108)"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((y_1109)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_1105 '1))))"
"(if(if '#f"
"(<?_736('#f y_1109)('#f x_1108))"
"(<?_736 y_1109 x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 y_1109)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 '1)"
" x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 x_1108)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 '1)"
" y_1109)))))"
"(if(unsafe-fx< n_1107 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((letrec-values(((iloop_1110)"
"(lambda(i_1111)"
"(if(unsafe-fx< i_1111 n_1107)"
"(let-values()"
"(let-values(((ref-i_1112)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_1105"
" i_1111))))"
"((letrec-values(((jloop_1113)"
"(lambda(j_1114)"
"(let-values(((ref-j-1_1115)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_1114"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_1106"
" j_1114)"
"(if '#f"
"(<?_736"
"('#f"
" ref-i_1112)"
"('#f"
" ref-j-1_1115))"
"(<?_736"
" ref-i_1112"
" ref-j-1_1115))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-j-1_1115)"
"(jloop_1113"
"(unsafe-fx-"
" j_1114"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-i_1112)"
"(iloop_1110"
"(unsafe-fx+"
" i_1111"
" '1))))))))"
" jloop_1113)"
"(unsafe-fx+"
" Blo_1106"
" i_1111))))"
"(void)))))"
" iloop_1110)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_1116)"
"(unsafe-fxrshift n_1107 '1)))"
"(let-values(((n/2+_1117)"
"(unsafe-fx- n_1107 n/2-_1116)))"
"(let-values(((Amid1_1118)"
"(unsafe-fx+ Alo_1105 n/2-_1116))"
"((Amid2_1119)"
"(unsafe-fx+ Alo_1105 n/2+_1117))"
"((Bmid1_1120)"
"(unsafe-fx+ Blo_1106 n/2-_1116)))"
"(begin"
"(copying-mergesort_1104"
" Amid1_1118"
" Bmid1_1120"
" n/2+_1117)"
"(copying-mergesort_1104"
" Alo_1105"
" Amid2_1119"
" n/2-_1116)"
"(let-values(((b2_1121)"
"(unsafe-fx+ Blo_1106 n_1107)))"
"((letrec-values(((loop_1122)"
"(lambda(a1_1123"
" b1_1124"
" c1_1125)"
"(let-values(((x_1126)"
"(unsafe-vector-ref"
" vec_897"
" a1_1123))"
"((y_1127)"
"(unsafe-vector-ref"
" vec_897"
" b1_1124)))"
"(if(if '#t"
"(not"
"(if '#f"
"(<?_736"
"('#f"
" y_1127)"
"('#f"
" x_1126))"
"(<?_736"
" y_1127"
" x_1126)))"
"(if '#f"
"(<?_736"
"('#f x_1126)"
"('#f"
" y_1127))"
"(<?_736"
" x_1126"
" y_1127)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" x_1126)"
"(let-values(((a1_1128)"
"(unsafe-fx+"
" a1_1123"
" '1))"
"((c1_1129)"
"(unsafe-fx+"
" c1_1125"
" '1)))"
"(if(unsafe-fx<"
" c1_1129"
" b1_1124)"
"(let-values()"
"(loop_1122"
" a1_1128"
" b1_1124"
" c1_1129))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" y_1127)"
"(let-values(((b1_1130)"
"(unsafe-fx+"
" b1_1124"
" '1))"
"((c1_1131)"
"(unsafe-fx+"
" c1_1125"
" '1)))"
"(if(unsafe-fx<="
" b2_1121"
" b1_1130)"
"((letrec-values(((loop_1132)"
"(lambda(a1_1133"
" c1_1134)"
"(if(unsafe-fx<"
" c1_1134"
" b1_1130)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1134"
"(unsafe-vector-ref"
" vec_897"
" a1_1133))"
"(loop_1132"
"(unsafe-fx+"
" a1_1133"
" '1)"
"(unsafe-fx+"
" c1_1134"
" '1))))"
"(void)))))"
" loop_1132)"
" a1_1123"
" c1_1131)"
"(loop_1122"
" a1_1123"
" b1_1130"
" c1_1131)))))))))"
" loop_1122)"
" Amid2_1119"
" Bmid1_1120"
" Blo_1106)))))))))))))"
"(let-values(((Alo_1135) '0)"
"((Amid1_1136) n/2-_1028)"
"((Amid2_1137) n/2+_1029)"
"((Ahi_1138) n_737)"
"((B1lo_1139) n_737))"
"(begin"
"(copying-mergesort_1104 Amid1_1136 B1lo_1139 n/2+_1029)"
"(if(zero? n/2-_1028)"
"(void)"
"(let-values()(copying-mergesort_1104 Alo_1135 Amid2_1137 n/2-_1028)))"
"(let-values(((b2_1140) Ahi_1138))"
"((letrec-values(((loop_1141)"
"(lambda(a1_1142 b1_1143 c1_1144)"
"(let-values(((x_1145)"
"(unsafe-vector-ref vec_897 a1_1142))"
"((y_1146)"
"(unsafe-vector-ref vec_897 b1_1143)))"
"(if(if '#f"
"(not"
"(if '#f"
"(<?_736('#f y_1146)('#f x_1145))"
"(<?_736 y_1146 x_1145)))"
"(if '#f"
"(<?_736('#f x_1145)('#f y_1146))"
"(<?_736 x_1145 y_1146)))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 x_1145)"
"(let-values(((a1_1147)"
"(unsafe-fx+ a1_1142 '1))"
"((c1_1148)"
"(unsafe-fx+ c1_1144 '1)))"
"(if(unsafe-fx< c1_1148 b1_1143)"
"(let-values()"
"(loop_1141 a1_1147 b1_1143 c1_1148))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 y_1146)"
"(let-values(((b1_1149)"
"(unsafe-fx+ b1_1143 '1))"
"((c1_1150)"
"(unsafe-fx+ c1_1144 '1)))"
"(if(unsafe-fx<= b2_1140 b1_1149)"
"((letrec-values(((loop_1151)"
"(lambda(a1_1152"
" c1_1153)"
"(if(unsafe-fx<"
" c1_1153"
" b1_1149)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1153"
"(unsafe-vector-ref"
" vec_897"
" a1_1152))"
"(loop_1151"
"(unsafe-fx+"
" a1_1152"
" '1)"
"(unsafe-fx+"
" c1_1153"
" '1))))"
"(void)))))"
" loop_1151)"
" a1_1142"
" c1_1150)"
"(loop_1141"
" a1_1142"
" b1_1149"
" c1_1150)))))))))"
" loop_1141)"
" B1lo_1139"
" Amid2_1137"
" Alo_1135)))))))))))"
"((letrec-values(((loop_1154)"
"(lambda(i_1155 r_1156)"
"(let-values(((i_1157)(sub1 i_1155)))"
"(if(< i_1157 '0)"
" r_1156"
"(loop_1154 i_1157(cons(vector-ref vec_897 i_1157) r_1156)))))))"
" loop_1154)"
" n_737"
" '())))))))))))"
"((lst_1158 <?_1159 getkey_1160)"
"(if(if getkey_1160(not(eq? values getkey_1160)) '#f)"
"(sort lst_1158 <?_1159 getkey_1160 '#f)"
"(sort lst_1158 <?_1159)))"
"((lst_1161 <?_1162 getkey_1163 cache-keys?_1164)"
"(if(if getkey_1163(not(eq? values getkey_1163)) '#f)"
"(let-values(((n_1165)(length lst_1161)))"
"(if(= n_1165 '0)"
"(let-values() lst_1161)"
"(if cache-keys?_1164"
"(let-values()"
"(let-values(((vec_1180)(make-vector(+ n_1165(ceiling(/ n_1165 '2))))))"
"(begin"
"((letrec-values(((loop_1181)"
"(lambda(i_1182 lst_1183)"
"(if(pair? lst_1183)"
"(let-values()"
"(let-values(((x_1184)(car lst_1183)))"
"(begin"
"(vector-set! vec_1180 i_1182(cons(getkey_1163 x_1184) x_1184))"
"(loop_1181(add1 i_1182)(cdr lst_1183)))))"
"(void)))))"
" loop_1181)"
" '0"
" lst_1161)"
"(let-values()"
"(let-values(((n/2-_1185)(unsafe-fxrshift n_1165 '1)))"
"(let-values(((n/2+_1186)(unsafe-fx- n_1165 n/2-_1185)))"
"(letrec-values(((copying-mergesort_1261)"
"(lambda(Alo_1262 Blo_1263 n_1264)"
"(if(unsafe-fx= n_1264 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262)))"
"(if(unsafe-fx= n_1264 '2)"
"(let-values()"
"(let-values(((x_1265)(unsafe-vector-ref vec_1180 Alo_1262))"
"((y_1266)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+ Alo_1262 '1))))"
"(if(if '#t"
"(<?_1162(car y_1266)(car x_1265))"
"(<?_1162 y_1266 x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 y_1266)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 '1)"
" x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 x_1265)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 '1)"
" y_1266)))))"
"(if(unsafe-fx< n_1264 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262))"
"((letrec-values(((iloop_1267)"
"(lambda(i_1268)"
"(if(unsafe-fx< i_1268 n_1264)"
"(let-values()"
"(let-values(((ref-i_1269)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+"
" Alo_1262"
" i_1268))))"
"((letrec-values(((jloop_1270)"
"(lambda(j_1271)"
"(let-values(((ref-j-1_1272)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx-"
" j_1271"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_1263"
" j_1271)"
"(if '#t"
"(<?_1162"
"(car"
" ref-i_1269)"
"(car"
" ref-j-1_1272))"
"(<?_1162"
" ref-i_1269"
" ref-j-1_1272))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-j-1_1272)"
"(jloop_1270"
"(unsafe-fx-"
" j_1271"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-i_1269)"
"(iloop_1267"
"(unsafe-fx+"
" i_1268"
" '1))))))))"
" jloop_1270)"
"(unsafe-fx+ Blo_1263 i_1268))))"
"(void)))))"
" iloop_1267)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_1273)(unsafe-fxrshift n_1264 '1)))"
"(let-values(((n/2+_1274)(unsafe-fx- n_1264 n/2-_1273)))"
"(let-values(((Amid1_1275)(unsafe-fx+ Alo_1262 n/2-_1273))"
"((Amid2_1276)(unsafe-fx+ Alo_1262 n/2+_1274))"
"((Bmid1_1277)"
"(unsafe-fx+ Blo_1263 n/2-_1273)))"
"(begin"
"(copying-mergesort_1261"
" Amid1_1275"
" Bmid1_1277"
" n/2+_1274)"
"(copying-mergesort_1261 Alo_1262 Amid2_1276 n/2-_1273)"
"(let-values(((b2_1278)(unsafe-fx+ Blo_1263 n_1264)))"
"((letrec-values(((loop_1279)"
"(lambda(a1_1280 b1_1281 c1_1282)"
"(let-values(((x_1283)"
"(unsafe-vector-ref"
" vec_1180"
" a1_1280))"
"((y_1284)"
"(unsafe-vector-ref"
" vec_1180"
" b1_1281)))"
"(if(if '#t"
"(not"
"(if '#t"
"(<?_1162"
"(car y_1284)"
"(car x_1283))"
"(<?_1162"
" y_1284"
" x_1283)))"
"(if '#t"
"(<?_1162"
"(car x_1283)"
"(car y_1284))"
"(<?_1162"
" x_1283"
" y_1284)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" x_1283)"
"(let-values(((a1_1285)"
"(unsafe-fx+"
" a1_1280"
" '1))"
"((c1_1286)"
"(unsafe-fx+"
" c1_1282"
" '1)))"
"(if(unsafe-fx<"
" c1_1286"
" b1_1281)"
"(let-values()"
"(loop_1279"
" a1_1285"
" b1_1281"
" c1_1286))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" y_1284)"
"(let-values(((b1_1287)"
"(unsafe-fx+"
" b1_1281"
" '1))"
"((c1_1288)"
"(unsafe-fx+"
" c1_1282"
" '1)))"
"(if(unsafe-fx<="
" b2_1278"
" b1_1287)"
"((letrec-values(((loop_1289)"
"(lambda(a1_1290"
" c1_1291)"
"(if(unsafe-fx<"
" c1_1291"
" b1_1287)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1291"
"(unsafe-vector-ref"
" vec_1180"
" a1_1290))"
"(loop_1289"
"(unsafe-fx+"
" a1_1290"
" '1)"
"(unsafe-fx+"
" c1_1291"
" '1))))"
"(void)))))"
" loop_1289)"
" a1_1280"
" c1_1288)"
"(loop_1279"
" a1_1280"
" b1_1287"
" c1_1288)))))))))"
" loop_1279)"
" Amid2_1276"
" Bmid1_1277"
" Blo_1263)))))))))))))"
"(let-values(((Alo_1292) '0)"
"((Amid1_1293) n/2-_1185)"
"((Amid2_1294) n/2+_1186)"
"((Ahi_1295) n_1165)"
"((B1lo_1296) n_1165))"
"(begin"
"(copying-mergesort_1261 Amid1_1293 B1lo_1296 n/2+_1186)"
"(if(zero? n/2-_1185)"
"(void)"
"(let-values()(copying-mergesort_1261 Alo_1292 Amid2_1294 n/2-_1185)))"
"(let-values(((b2_1297) Ahi_1295))"
"((letrec-values(((loop_1298)"
"(lambda(a1_1299 b1_1300 c1_1301)"
"(let-values(((x_1302)(unsafe-vector-ref vec_1180 a1_1299))"
"((y_1303)(unsafe-vector-ref vec_1180 b1_1300)))"
"(if(if '#f"
"(not"
"(if '#t"
"(<?_1162(car y_1303)(car x_1302))"
"(<?_1162 y_1303 x_1302)))"
"(if '#t"
"(<?_1162(car x_1302)(car y_1303))"
"(<?_1162 x_1302 y_1303)))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 x_1302)"
"(let-values(((a1_1304)(unsafe-fx+ a1_1299 '1))"
"((c1_1305)(unsafe-fx+ c1_1301 '1)))"
"(if(unsafe-fx< c1_1305 b1_1300)"
"(let-values()(loop_1298 a1_1304 b1_1300 c1_1305))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 y_1303)"
"(let-values(((b1_1306)(unsafe-fx+ b1_1300 '1))"
"((c1_1307)(unsafe-fx+ c1_1301 '1)))"
"(if(unsafe-fx<= b2_1297 b1_1306)"
"((letrec-values(((loop_1308)"
"(lambda(a1_1309 c1_1310)"
"(if(unsafe-fx< c1_1310 b1_1306)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1310"
"(unsafe-vector-ref"
" vec_1180"
" a1_1309))"
"(loop_1308"
"(unsafe-fx+ a1_1309 '1)"
"(unsafe-fx+"
" c1_1310"
" '1))))"
"(void)))))"
" loop_1308)"
" a1_1299"
" c1_1307)"
"(loop_1298 a1_1299 b1_1306 c1_1307)))))))))"
" loop_1298)"
" B1lo_1296"
" Amid2_1294"
" Alo_1292))))))))"
"((letrec-values(((loop_1311)"
"(lambda(i_1312 r_1313)"
"(let-values(((i_1314)(sub1 i_1312)))"
"(if(< i_1314 '0)"
" r_1313"
"(loop_1311 i_1314(cons(cdr(vector-ref vec_1180 i_1314)) r_1313)))))))"
" loop_1311)"
" n_1165"
" '()))))"
"(if(< n_1165 '2)"
"(let-values() lst_1161)"
"(if((letrec-values(((loop_1315)"
"(lambda(last_1316 next_1317)"
"(let-values(((or-part_1318)(null? next_1317)))"
"(if or-part_1318"
" or-part_1318"
"(if(not"
"(if '#t"
"(<?_1162(getkey_1163(car next_1317))(getkey_1163 last_1316))"
"(<?_1162(car next_1317) last_1316)))"
"(loop_1315(car next_1317)(cdr next_1317))"
" '#f))))))"
" loop_1315)"
"(car lst_1161)"
"(cdr lst_1161))"
"(let-values() lst_1161)"
"(if(<= n_1165 '3)"
"(let-values()"
"(if(= n_1165 '2)"
"(list(cadr lst_1161)(car lst_1161))"
"(let-values(((a_1319)(car lst_1161))"
"((b_1320)(cadr lst_1161))"
"((c_1321)(caddr lst_1161)))"
"(let-values(((a_1322)(car lst_1161))"
"((b_1323)(cadr lst_1161))"
"((c_1324)(caddr lst_1161)))"
"(if(if '#t(<?_1162(getkey_1163 b_1323)(getkey_1163 a_1322))(<?_1162 b_1323 a_1322))"
"(if(if '#t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 b_1323))"
"(<?_1162 c_1324 b_1323))"
"(list c_1324 b_1323 a_1322)"
"(if(if '#t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(<?_1162 c_1324 a_1322))"
"(list b_1323 c_1324 a_1322)"
"(list b_1323 a_1322 c_1324)))"
"(if(if '#t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(<?_1162 c_1324 a_1322))"
"(list c_1324 a_1322 b_1323)"
"(list a_1322 c_1324 b_1323)))))))"
"(let-values()"
"(let-values(((vec_1325)(make-vector(+ n_1165(ceiling(/ n_1165 '2))))))"
"(begin"
"((letrec-values(((loop_1326)"
"(lambda(i_1327 lst_1328)"
"(if(pair? lst_1328)"
"(let-values()"
"(begin"
"(vector-set! vec_1325 i_1327(car lst_1328))"
"(loop_1326(add1 i_1327)(cdr lst_1328))))"
"(void)))))"
" loop_1326)"
" '0"
" lst_1161)"
"(if getkey_1163"
"(let-values()"
"(let-values(((n/2-_1329)(unsafe-fxrshift n_1165 '1)))"
"(let-values(((n/2+_1330)(unsafe-fx- n_1165 n/2-_1329)))"
"(letrec-values(((copying-mergesort_1405)"
"(lambda(Alo_1406 Blo_1407 n_1408)"
"(if(unsafe-fx= n_1408 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406)))"
"(if(unsafe-fx= n_1408 '2)"
"(let-values()"
"(let-values(((x_1409)"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((y_1410)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1406 '1))))"
"(if(if '#t"
"(<?_1162"
"(getkey_1163 y_1410)"
"(getkey_1163 x_1409))"
"(<?_1162 y_1410 x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 y_1410)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 '1)"
" x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 x_1409)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 '1)"
" y_1410)))))"
"(if(unsafe-fx< n_1408 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((letrec-values(((iloop_1411)"
"(lambda(i_1412)"
"(if(unsafe-fx< i_1412 n_1408)"
"(let-values()"
"(let-values(((ref-i_1413)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1406"
" i_1412))))"
"((letrec-values(((jloop_1414)"
"(lambda(j_1415)"
"(let-values(((ref-j-1_1416)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1415"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_1407"
" j_1415)"
"(if '#t"
"(<?_1162"
"(getkey_1163"
" ref-i_1413)"
"(getkey_1163"
" ref-j-1_1416))"
"(<?_1162"
" ref-i_1413"
" ref-j-1_1416))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-j-1_1416)"
"(jloop_1414"
"(unsafe-fx-"
" j_1415"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-i_1413)"
"(iloop_1411"
"(unsafe-fx+"
" i_1412"
" '1))))))))"
" jloop_1414)"
"(unsafe-fx+"
" Blo_1407"
" i_1412))))"
"(void)))))"
" iloop_1411)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_1417)(unsafe-fxrshift n_1408 '1)))"
"(let-values(((n/2+_1418)"
"(unsafe-fx- n_1408 n/2-_1417)))"
"(let-values(((Amid1_1419)"
"(unsafe-fx+ Alo_1406 n/2-_1417))"
"((Amid2_1420)"
"(unsafe-fx+ Alo_1406 n/2+_1418))"
"((Bmid1_1421)"
"(unsafe-fx+ Blo_1407 n/2-_1417)))"
"(begin"
"(copying-mergesort_1405"
" Amid1_1419"
" Bmid1_1421"
" n/2+_1418)"
"(copying-mergesort_1405"
" Alo_1406"
" Amid2_1420"
" n/2-_1417)"
"(let-values(((b2_1422)"
"(unsafe-fx+ Blo_1407 n_1408)))"
"((letrec-values(((loop_1423)"
"(lambda(a1_1424"
" b1_1425"
" c1_1426)"
"(let-values(((x_1427)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1424))"
"((y_1428)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1425)))"
"(if(if '#t"
"(not"
"(if '#t"
"(<?_1162"
"(getkey_1163"
" y_1428)"
"(getkey_1163"
" x_1427))"
"(<?_1162"
" y_1428"
" x_1427)))"
"(if '#t"
"(<?_1162"
"(getkey_1163"
" x_1427)"
"(getkey_1163"
" y_1428))"
"(<?_1162"
" x_1427"
" y_1428)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" x_1427)"
"(let-values(((a1_1429)"
"(unsafe-fx+"
" a1_1424"
" '1))"
"((c1_1430)"
"(unsafe-fx+"
" c1_1426"
" '1)))"
"(if(unsafe-fx<"
" c1_1430"
" b1_1425)"
"(let-values()"
"(loop_1423"
" a1_1429"
" b1_1425"
" c1_1430))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" y_1428)"
"(let-values(((b1_1431)"
"(unsafe-fx+"
" b1_1425"
" '1))"
"((c1_1432)"
"(unsafe-fx+"
" c1_1426"
" '1)))"
"(if(unsafe-fx<="
" b2_1422"
" b1_1431)"
"((letrec-values(((loop_1433)"
"(lambda(a1_1434"
" c1_1435)"
"(if(unsafe-fx<"
" c1_1435"
" b1_1431)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1435"
"(unsafe-vector-ref"
" vec_1325"
" a1_1434))"
"(loop_1433"
"(unsafe-fx+"
" a1_1434"
" '1)"
"(unsafe-fx+"
" c1_1435"
" '1))))"
"(void)))))"
" loop_1433)"
" a1_1424"
" c1_1432)"
"(loop_1423"
" a1_1424"
" b1_1431"
" c1_1432)))))))))"
" loop_1423)"
" Amid2_1420"
" Bmid1_1421"
" Blo_1407)))))))))))))"
"(let-values(((Alo_1436) '0)"
"((Amid1_1437) n/2-_1329)"
"((Amid2_1438) n/2+_1330)"
"((Ahi_1439) n_1165)"
"((B1lo_1440) n_1165))"
"(begin"
"(copying-mergesort_1405 Amid1_1437 B1lo_1440 n/2+_1330)"
"(if(zero? n/2-_1329)"
"(void)"
"(let-values()(copying-mergesort_1405 Alo_1436 Amid2_1438 n/2-_1329)))"
"(let-values(((b2_1441) Ahi_1439))"
"((letrec-values(((loop_1442)"
"(lambda(a1_1443 b1_1444 c1_1445)"
"(let-values(((x_1446)"
"(unsafe-vector-ref vec_1325 a1_1443))"
"((y_1447)"
"(unsafe-vector-ref vec_1325 b1_1444)))"
"(if(if '#f"
"(not"
"(if '#t"
"(<?_1162"
"(getkey_1163 y_1447)"
"(getkey_1163 x_1446))"
"(<?_1162 y_1447 x_1446)))"
"(if '#t"
"(<?_1162"
"(getkey_1163 x_1446)"
"(getkey_1163 y_1447))"
"(<?_1162 x_1446 y_1447)))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 x_1446)"
"(let-values(((a1_1448)(unsafe-fx+ a1_1443 '1))"
"((c1_1449)"
"(unsafe-fx+ c1_1445 '1)))"
"(if(unsafe-fx< c1_1449 b1_1444)"
"(let-values()"
"(loop_1442 a1_1448 b1_1444 c1_1449))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 y_1447)"
"(let-values(((b1_1450)(unsafe-fx+ b1_1444 '1))"
"((c1_1451)"
"(unsafe-fx+ c1_1445 '1)))"
"(if(unsafe-fx<= b2_1441 b1_1450)"
"((letrec-values(((loop_1452)"
"(lambda(a1_1453 c1_1454)"
"(if(unsafe-fx<"
" c1_1454"
" b1_1450)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1454"
"(unsafe-vector-ref"
" vec_1325"
" a1_1453))"
"(loop_1452"
"(unsafe-fx+"
" a1_1453"
" '1)"
"(unsafe-fx+"
" c1_1454"
" '1))))"
"(void)))))"
" loop_1452)"
" a1_1443"
" c1_1451)"
"(loop_1442 a1_1443 b1_1450 c1_1451)))))))))"
" loop_1442)"
" B1lo_1440"
" Amid2_1438"
" Alo_1436))))))))"
"(let-values(((si_1455)(hash-ref sort-internals_29 <?_1162 '#f)))"
"(if si_1455"
"(si_1455 vec_1325 n_1165)"
"(let-values()"
"(let-values(((n/2-_1456)(unsafe-fxrshift n_1165 '1)))"
"(let-values(((n/2+_1457)(unsafe-fx- n_1165 n/2-_1456)))"
"(letrec-values(((copying-mergesort_1532)"
"(lambda(Alo_1533 Blo_1534 n_1535)"
"(if(unsafe-fx= n_1535 '1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533)))"
"(if(unsafe-fx= n_1535 '2)"
"(let-values()"
"(let-values(((x_1536)"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((y_1537)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1533 '1))))"
"(if(if '#f"
"(<?_1162('#f y_1537)('#f x_1536))"
"(<?_1162 y_1537 x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 y_1537)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 '1)"
" x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 x_1536)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 '1)"
" y_1537)))))"
"(if(unsafe-fx< n_1535 '16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((letrec-values(((iloop_1538)"
"(lambda(i_1539)"
"(if(unsafe-fx<"
" i_1539"
" n_1535)"
"(let-values()"
"(let-values(((ref-i_1540)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1533"
" i_1539))))"
"((letrec-values(((jloop_1541)"
"(lambda(j_1542)"
"(let-values(((ref-j-1_1543)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1542"
" '1))))"
"(if(if(unsafe-fx<"
" Blo_1534"
" j_1542)"
"(if '#f"
"(<?_1162"
"('#f"
" ref-i_1540)"
"('#f"
" ref-j-1_1543))"
"(<?_1162"
" ref-i_1540"
" ref-j-1_1543))"
" '#f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-j-1_1543)"
"(jloop_1541"
"(unsafe-fx-"
" j_1542"
" '1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-i_1540)"
"(iloop_1538"
"(unsafe-fx+"
" i_1539"
" '1))))))))"
" jloop_1541)"
"(unsafe-fx+"
" Blo_1534"
" i_1539))))"
"(void)))))"
" iloop_1538)"
" '1)))"
"(let-values()"
"(let-values(((n/2-_1544)"
"(unsafe-fxrshift n_1535 '1)))"
"(let-values(((n/2+_1545)"
"(unsafe-fx- n_1535 n/2-_1544)))"
"(let-values(((Amid1_1546)"
"(unsafe-fx+ Alo_1533 n/2-_1544))"
"((Amid2_1547)"
"(unsafe-fx+ Alo_1533 n/2+_1545))"
"((Bmid1_1548)"
"(unsafe-fx+ Blo_1534 n/2-_1544)))"
"(begin"
"(copying-mergesort_1532"
" Amid1_1546"
" Bmid1_1548"
" n/2+_1545)"
"(copying-mergesort_1532"
" Alo_1533"
" Amid2_1547"
" n/2-_1544)"
"(let-values(((b2_1549)"
"(unsafe-fx+"
" Blo_1534"
" n_1535)))"
"((letrec-values(((loop_1550)"
"(lambda(a1_1551"
" b1_1552"
" c1_1553)"
"(let-values(((x_1554)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1551))"
"((y_1555)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1552)))"
"(if(if '#t"
"(not"
"(if '#f"
"(<?_1162"
"('#f"
" y_1555)"
"('#f"
" x_1554))"
"(<?_1162"
" y_1555"
" x_1554)))"
"(if '#f"
"(<?_1162"
"('#f"
" x_1554)"
"('#f"
" y_1555))"
"(<?_1162"
" x_1554"
" y_1555)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" x_1554)"
"(let-values(((a1_1556)"
"(unsafe-fx+"
" a1_1551"
" '1))"
"((c1_1557)"
"(unsafe-fx+"
" c1_1553"
" '1)))"
"(if(unsafe-fx<"
" c1_1557"
" b1_1552)"
"(let-values()"
"(loop_1550"
" a1_1556"
" b1_1552"
" c1_1557))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" y_1555)"
"(let-values(((b1_1558)"
"(unsafe-fx+"
" b1_1552"
" '1))"
"((c1_1559)"
"(unsafe-fx+"
" c1_1553"
" '1)))"
"(if(unsafe-fx<="
" b2_1549"
" b1_1558)"
"((letrec-values(((loop_1560)"
"(lambda(a1_1561"
" c1_1562)"
"(if(unsafe-fx<"
" c1_1562"
" b1_1558)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1562"
"(unsafe-vector-ref"
" vec_1325"
" a1_1561))"
"(loop_1560"
"(unsafe-fx+"
" a1_1561"
" '1)"
"(unsafe-fx+"
" c1_1562"
" '1))))"
"(void)))))"
" loop_1560)"
" a1_1551"
" c1_1559)"
"(loop_1550"
" a1_1551"
" b1_1558"
" c1_1559)))))))))"
" loop_1550)"
" Amid2_1547"
" Bmid1_1548"
" Blo_1534)))))))))))))"
"(let-values(((Alo_1563) '0)"
"((Amid1_1564) n/2-_1456)"
"((Amid2_1565) n/2+_1457)"
"((Ahi_1566) n_1165)"
"((B1lo_1567) n_1165))"
"(begin"
"(copying-mergesort_1532 Amid1_1564 B1lo_1567 n/2+_1457)"
"(if(zero? n/2-_1456)"
"(void)"
"(let-values()"
"(copying-mergesort_1532 Alo_1563 Amid2_1565 n/2-_1456)))"
"(let-values(((b2_1568) Ahi_1566))"
"((letrec-values(((loop_1569)"
"(lambda(a1_1570 b1_1571 c1_1572)"
"(let-values(((x_1573)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1570))"
"((y_1574)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1571)))"
"(if(if '#f"
"(not"
"(if '#f"
"(<?_1162('#f y_1574)('#f x_1573))"
"(<?_1162 y_1574 x_1573)))"
"(if '#f"
"(<?_1162('#f x_1573)('#f y_1574))"
"(<?_1162 x_1573 y_1574)))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1572 x_1573)"
"(let-values(((a1_1575)"
"(unsafe-fx+ a1_1570 '1))"
"((c1_1576)"
"(unsafe-fx+ c1_1572 '1)))"
"(if(unsafe-fx< c1_1576 b1_1571)"
"(let-values()"
"(loop_1569 a1_1575 b1_1571 c1_1576))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1572 y_1574)"
"(let-values(((b1_1577)"
"(unsafe-fx+ b1_1571 '1))"
"((c1_1578)"
"(unsafe-fx+ c1_1572 '1)))"
"(if(unsafe-fx<= b2_1568 b1_1577)"
"((letrec-values(((loop_1579)"
"(lambda(a1_1580"
" c1_1581)"
"(if(unsafe-fx<"
" c1_1581"
" b1_1577)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1581"
"(unsafe-vector-ref"
" vec_1325"
" a1_1580))"
"(loop_1579"
"(unsafe-fx+"
" a1_1580"
" '1)"
"(unsafe-fx+"
" c1_1581"
" '1))))"
"(void)))))"
" loop_1579)"
" a1_1570"
" c1_1578)"
"(loop_1569"
" a1_1570"
" b1_1577"
" c1_1578)))))))))"
" loop_1569)"
" B1lo_1567"
" Amid2_1565"
" Alo_1563)))))))))))"
"((letrec-values(((loop_1582)"
"(lambda(i_1583 r_1584)"
"(let-values(((i_1585)(sub1 i_1583)))"
"(if(< i_1585 '0)"
" r_1584"
"(loop_1582 i_1585(cons(vector-ref vec_1325 i_1585) r_1584)))))))"
" loop_1582)"
" n_1165"
" '()))))))))))"
"(sort lst_1161 <?_1162))))))))"
"(define-values"
"(norm:procedure-arity)"
"(let-values(((procedure-arity_1)(lambda(p_2)(normalize-arity(procedure-arity p_2))))) procedure-arity_1))"
"(define-values"
"(norm:raise-arity-error)"
"(let-values(((raise-arity-error_3)"
"(lambda(name_4 arity-v_5 . arg-vs_6)"
"(if(let-values(((or-part_7)(exact-nonnegative-integer? arity-v_5)))"
"(if or-part_7"
" or-part_7"
"(let-values(((or-part_8)(arity-at-least? arity-v_5)))"
"(if or-part_8"
" or-part_8"
"(if(list? arity-v_5)"
"(andmap"
"(lambda(x_9)"
"(let-values(((or-part_10)(exact-nonnegative-integer? x_9)))"
"(if or-part_10 or-part_10(arity-at-least? x_9))))"
" arity-v_5)"
" '#f)))))"
"(apply raise-arity-error name_4(normalize-arity arity-v_5) arg-vs_6)"
"(apply raise-arity-error name_4 arity-v_5 arg-vs_6)))))"
" raise-arity-error_3))"
"(define-values"
"(normalize-arity)"
"(lambda(arity_11)"
"(begin"
"(if(procedure-arity? arity_11)"
"(void)"
" (let-values () (raise-argument-error 'normalize-arity '\"procedure-arity?\" arity_11)))"
"(if(pair? arity_11)"
"(let-values(((reversed_12)(reverse-sort-arity arity_11)))"
"(let-values(((normalized_13)(normalize-reversed-arity reversed_12 '())))"
"(let-values(((simplified_14)(normalize-singleton-arity normalized_13))) simplified_14)))"
" arity_11))))"
"(define-values"
"(normalize-singleton-arity)"
"(lambda(arity_15)(if(if(pair? arity_15)(null?(cdr arity_15)) '#f)(car arity_15) arity_15)))"
"(define-values"
"(normalize-reversed-arity)"
"(lambda(arity_16 tail_17)"
"(if(pair? arity_16)(normalize-reversed-arity(cdr arity_16)(arity-insert(car arity_16) tail_17)) tail_17)))"
"(define-values"
"(arity-insert)"
"(lambda(elem_18 arity_19)"
"(if(pair? arity_19)"
"(let-values(((next_20)(car arity_19)))"
"(if(arity-at-least? next_20)"
"(let-values(((next-value_21)(arity-at-least-value next_20)))"
"(if(arity-at-least? elem_18)"
"(let-values(((elem-value_22)(arity-at-least-value elem_18)))"
"(if(< elem-value_22 next-value_21)(cons elem_18(cdr arity_19)) arity_19))"
"(if(< elem_18(- next-value_21 '1))"
"(cons elem_18 arity_19)"
"(if(= elem_18(- next-value_21 '1))(cons(arity-at-least elem_18)(cdr arity_19)) arity_19))))"
"(if(< elem_18 next_20)(cons elem_18 arity_19) arity_19)))"
"(cons elem_18 arity_19))))"
"(define-values(reverse-sort-arity)(lambda(arity_23)(sort arity_23 arity>?)))"
"(define-values"
"(arity>?)"
"(lambda(a_24 b_25)"
"(if(arity-at-least? a_24)"
"(if(arity-at-least? b_25)(>(arity-at-least-value a_24)(arity-at-least-value b_25)) '#t)"
"(if(arity-at-least? b_25) '#f(> a_24 b_25)))))"
"(define-values"
"(new-apply-proc)"
"(make-keyword-procedure"
"(lambda(kws_21 kw-args_22 proc_23 args_24 . rest_25)"
"(keyword-apply proc_23 kws_21 kw-args_22(apply list* args_24 rest_25)))"
" apply))"
"(define-values"
"(new-keyword-apply)"
"(make-keyword-procedure"
"(lambda(kws_26 kw-args_27 proc_28 orig-kws_29 orig-kw-args_30 args_31 . rest_32)"
"(let-values(((kws_33 kw-args_34)"
"((letrec-values(((loop_35)"
"(lambda(kws_36 kw-args_37 kws2_38 kw-args2_39 swapped?_40)"
"(if(null? kws_36)"
"(let-values()(values kws2_38 kw-args2_39))"
"(if(null? kws2_38)"
"(let-values()(values kws_36 kw-args_37))"
"(if(keyword<?(car kws_36)(car kws2_38))"
"(let-values()"
"(let-values(((res-kws_41 res-kw-args_42)"
"(loop_35"
"(cdr kws_36)"
"(cdr kw-args_37)"
" kws2_38"
" kw-args2_39"
" '#f)))"
"(values"
"(cons(car kws_36) res-kws_41)"
"(cons(car kw-args_37) res-kw-args_42))))"
"(if swapped?_40"
"(let-values()"
"(raise-mismatch-error"
" 'keyword-apply"
" '\"keyword duplicated in list and direct keyword arguments: \""
"(car kws_36)))"
"(let-values()"
"(loop_35 kws2_38 kw-args2_39 kws_36 kw-args_37 '#t)))))))))"
" loop_35)"
" kws_26"
" kw-args_27"
" orig-kws_29"
" orig-kw-args_30"
" '#f)))"
"(keyword-apply proc_28 kws_33 kw-args_34(apply list* args_31 rest_32))))"
" keyword-apply))"
"(define-values(double-flonum?)(lambda(x_43)(flonum? x_43)))"
"(define-values"
"(enforce-random-int-range)"
"(lambda(x_44)"
"(if(if(exact-positive-integer? x_44)(<= x_44 '4294967087) '#f)"
"(void)"
" (let-values () (raise-argument-error 'random '\"(integer-in 1 4294967087)\" x_44)))))"
"(define-values"
"(enforce-greater)"
"(lambda(x_45 y_46)"
"(if(> y_46 x_45)"
"(void)"
"(let-values()"
" (raise-argument-error 'random (string-append '\"integer greater than \" (number->string x_45)) y_46)))))"
"(define-values"
"(-random)"
"(let-values(((random_47)"
"(case-lambda"
"(()(random))"
"((x_48)(random x_48))"
"((x_49 y_50)"
"(if(exact-positive-integer? y_50)"
"(let-values()"
"(begin"
"(enforce-random-int-range x_49)"
"(enforce-random-int-range y_50)"
"(enforce-greater x_49 y_50)"
"(+ x_49(random(- y_50 x_49)))))"
"(if(pseudo-random-generator? y_50)"
"(let-values()(begin(enforce-random-int-range x_49)(random x_49 y_50)))"
"(let-values()"
"(raise-argument-error"
" 'random"
" '\"(or/c (integer-in 1 4294967087) pseudo-random-generator?)\""
" y_50)))))"
"((min_51 max_52 prng_53)"
"(begin"
"(enforce-random-int-range min_51)"
"(enforce-random-int-range max_52)"
"(enforce-greater min_51 max_52)"
"(if(pseudo-random-generator? prng_53)"
"(void)"
" (let-values () (raise-argument-error 'random '\"pseudo-random-generator?\" prng_53)))"
"(+ min_51(random(- max_52 min_51) prng_53)))))))"
" random_47))"
"(define-values"
"(new:collection-path)"
"(let-values(((collection-path_54)"
"(let-values(((core4_55)"
"(lambda(fail1_56 fail2_57 collection3_58 new-rest_59)"
"(let-values(((collection_60) collection3_58))"
"(let-values(((fail_61)"
"(if fail2_57"
" fail1_56"
"(lambda(s_62)"
"(raise"
"(exn:fail:filesystem"
" (string-append '\"collection-path: \" s_62)"
"(current-continuation-marks)))))))"
"(let-values(((collections_63) new-rest_59))"
"(collection-path fail_61 collection_60 collections_63)))))))"
"(let-values(((unpack5_64)"
"(lambda(given-kws_65 given-args_66 collection3_67 new-rest_68)"
"(let-values(((fail2_69)(pair? given-kws_65)))"
"(let-values(((fail1_70)(if fail2_69(car given-args_66)(void))))"
"(core4_55 fail1_70 fail2_69 collection3_67 new-rest_68))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_71 given-argc_72)"
"(if(>= given-argc_72 '3)"
"(let-values(((l1_73) given-kws_71))"
"(let-values(((l1_74)"
"(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:fail)(cdr l1_73) l1_73))))"
"(null? l1_74)))"
" '#f))"
"(case-lambda"
"((given-kws_75 given-args_76 collection_77 . collections_78)"
"(unpack5_64 given-kws_75 given-args_76 collection_77 collections_78)))"
" null"
" '(#:fail)"
"(let-values(((collection-path_79)"
"(case-lambda"
"((collection_80 . collections_81)"
"(unpack5_64 null null collection_80 collections_81)))))"
" collection-path_79))))))"
" collection-path_54))"
"(define-values"
"(new:collection-file-path)"
"(let-values(((collection-file-path_82)"
"(let-values(((core12_83)"
"(lambda(check-compiled?6_84"
" check-compiled?8_85"
" fail7_86"
" fail9_87"
" file-name10_88"
" collection11_89"
" new-rest_90)"
"(let-values(((file-name_91) file-name10_88))"
"(let-values(((collection_92) collection11_89))"
"(let-values(((check-compiled?_93)"
"(if check-compiled?8_85"
" check-compiled?6_84"
"(if(path-string? file-name_91)"
" (regexp-match? '#rx\".[.]rkt$\" file-name_91)"
" '#f))))"
"(let-values(((fail_94)"
"(if fail9_87"
" fail7_86"
"(lambda(s_95)"
"(raise"
"(exn:fail:filesystem"
" (string-append '\"collection-file-path: \" s_95)"
"(current-continuation-marks)))))))"
"(let-values(((collections_96) new-rest_90))"
"(collection-file-path"
" fail_94"
" check-compiled?_93"
" file-name_91"
" collection_92"
" collections_96)))))))))"
"(let-values(((unpack13_97)"
"(lambda(given-kws_98 given-args_99 file-name10_100 collection11_101 new-rest_102)"
"(let-values(((check-compiled?8_103)"
"(if(pair? given-kws_98)"
"(eq? '#:check-compiled?(car given-kws_98))"
" '#f)))"
"(let-values(((check-compiled?6_104)"
"(if check-compiled?8_103(car given-args_99)(void)))"
"((given-kws_105)"
"(if check-compiled?8_103(cdr given-kws_98) given-kws_98))"
"((given-args_106)"
"(if check-compiled?8_103(cdr given-args_99) given-args_99)))"
"(let-values(((fail9_107)(pair? given-kws_105)))"
"(let-values(((fail7_108)(if fail9_107(car given-args_106)(void))))"
"(core12_83"
" check-compiled?6_104"
" check-compiled?8_103"
" fail7_108"
" fail9_107"
" file-name10_100"
" collection11_101"
" new-rest_102))))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_109 given-argc_110)"
"(if(>= given-argc_110 '4)"
"(let-values(((l1_111) given-kws_109))"
"(let-values(((l1_112)"
"(if(null? l1_111)"
" l1_111"
"(if(eq?(car l1_111) '#:check-compiled?)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)"
"(if(null? l1_113)"
" l1_113"
"(if(eq?(car l1_113) '#:fail)(cdr l1_113) l1_113))))"
"(null? l1_114)))))"
" '#f))"
"(case-lambda"
"((given-kws_115 given-args_116 file-name_117 collection_118 . collections_119)"
"(unpack13_97 given-kws_115 given-args_116 file-name_117 collection_118 collections_119)))"
" null"
" '(#:check-compiled? #:fail)"
"(let-values(((collection-file-path_120)"
"(case-lambda"
"((file-name_121 collection_122 . collections_123)"
"(unpack13_97 null null file-name_121 collection_122 collections_123)))))"
" collection-file-path_120))))))"
" collection-file-path_82))"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(define-values"
"(hash-values)"
"(lambda(table_4)"
"(begin"
" (if (hash? table_4) (void) (let-values () (raise-argument-error 'hash-values '\"hash?\" table_4)))"
"(hash-map table_4(lambda(k_5 v_6) v_6)))))"
"(define-values"
"(hash->list)"
"(lambda(table_7)"
"(begin"
" (if (hash? table_7) (void) (let-values () (raise-argument-error 'hash->list '\"hash?\" table_7)))"
"(hash-map table_7 cons))))"
"(define-values"
"(paired-fold)"
"(lambda(who_8 pairs0_9 init_10 proc_11)"
"((letrec-values(((loop_12)"
"(lambda(value_13 pairs_14)"
"(if(null? pairs_14)"
"(let-values() value_13)"
"(if(null?(cdr pairs_14))"
"(let-values()"
"(raise-arguments-error"
" who_8"
"(format"
" '\"expected ~a, but received ~a\""
" '\"an even number of association elements\""
" '\"an odd number of association elements\")"
" '\"association elements\""
" pairs0_9))"
"(let-values()"
"(loop_12(proc_11 value_13(car pairs_14)(cadr pairs_14))(cddr pairs_14))))))))"
" loop_12)"
" init_10"
" pairs0_9)))"
"(define-values"
"(hash-set*)"
"(lambda(table_15 . pairs_16)"
"(begin"
"(if(if(hash? table_15)(immutable? table_15) '#f)"
"(void)"
" (let-values () (raise-argument-error 'hash-set* '\"(and/c hash? immutable?)\" table_15)))"
"(paired-fold 'hash-set* pairs_16 table_15 hash-set))))"
"(define-values"
"(hash-set*!)"
"(lambda(table_17 . pairs_18)"
"(begin"
"(if(if(hash? table_17)(not(immutable? table_17)) '#f)"
"(void)"
" (let-values () (raise-argument-error 'hash-set*! '\"(and/c hash? (not/c immutable?))\" table_17)))"
"(paired-fold 'hash-set*! pairs_18(void)(lambda(x_19 k_20 v_21)(hash-set! table_17 k_20 v_21))))))"
"(define-values"
"(hash-copy-clear)"
"(lambda(table_22)"
"(begin"
" (if (hash? table_22) (void) (let-values () (raise-argument-error 'hash-copy-clear '\"hash?\" table_22)))"
"(if(immutable? table_22)"
"(let-values()"
"(if(hash-equal? table_22)"
"(let-values()(hash))"
"(if(hash-eqv? table_22)"
"(let-values()(hasheqv))"
"(if(hash-eq? table_22)(let-values()(hasheq))(void)))))"
"(if(hash-weak? table_22)"
"(let-values()"
"(if(hash-equal? table_22)"
"(let-values()(make-weak-hash))"
"(if(hash-eqv? table_22)"
"(let-values()(make-weak-hasheqv))"
"(if(hash-eq? table_22)(let-values()(make-weak-hasheq))(void)))))"
"(let-values()"
"(if(hash-equal? table_22)"
"(let-values()(make-hash))"
"(if(hash-eqv? table_22)"
"(let-values()(make-hasheqv))"
"(if(hash-eq? table_22)(let-values()(make-hasheq))(void))))))))))"
"(define-values"
"(hash-empty?)"
"(lambda(table_23)"
"(begin"
" (if (hash? table_23) (void) (let-values () (raise-argument-error 'hash-empty? '\"hash?\" table_23)))"
"(zero?(hash-count table_23)))))"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values(((lst_7) lst5_5))"
"(let-values(((less?_8) less?6_6))"
"(let-values(((getkey_9)(if key3_4 key1_3 '#f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 '#f)))"
"(let-values()"
"(begin"
" (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort '\"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 '2) '#f)"
"(void)"
" (let-values () (raise-argument-error 'sort '\"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 '1) '#f)) '#f)"
" (let-values () (raise-argument-error 'sort '\"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
"(define-values"
"(unpack8.1)"
"(lambda(given-kws_11 given-args_12 lst5_13 less?6_14)"
"(let-values(((cache-keys?4_15)(if(pair? given-kws_11)(eq? '#:cache-keys?(car given-kws_11)) '#f)))"
"(let-values(((cache-keys?2_16)(if cache-keys?4_15(car given-args_12)(void)))"
"((given-kws_17)(if cache-keys?4_15(cdr given-kws_11) given-kws_11))"
"((given-args_18)(if cache-keys?4_15(cdr given-args_12) given-args_12)))"
"(let-values(((key3_19)(pair? given-kws_17)))"
"(let-values(((key1_20)(if key3_19(car given-args_18)(void))))"
"(sort7.1 cache-keys?2_16 cache-keys?4_15 key1_20 key3_19 lst5_13 less?6_14)))))))"
"(define-values"
"(sort9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_21 given-argc_22)"
"(if(= given-argc_22 '4)"
"(let-values(((l1_23) given-kws_21))"
"(let-values(((l1_24)(if(null? l1_23) l1_23(if(eq?(car l1_23) '#:cache-keys?)(cdr l1_23) l1_23))))"
"(let-values(((l1_25) l1_24))"
"(let-values(((l1_26)(if(null? l1_25) l1_25(if(eq?(car l1_25) '#:key)(cdr l1_25) l1_25))))"
"(null? l1_26)))))"
" '#f))"
"(case-lambda((given-kws_27 given-args_28 lst_29 less?_30)(unpack8.1 given-kws_27 given-args_28 lst_29 less?_30)))"
" null"
" '(#:cache-keys? #:key)"
"(let-values(((sort_31)(case-lambda((lst_32 less?_33)(unpack8.1 null null lst_32 less?_33))))) sort_31)))"
"(define-values"
"(do-remove)"
"(lambda(who_34 item_35 list_36 equal?_37)"
"(begin"
" (if (list? list_36) (void) (let-values () (raise-argument-error who_34 '\"list?\" list_36)))"
"((letrec-values(((loop_38)"
"(lambda(list_39)"
"(if(null? list_39)"
"(let-values() null)"
"(if(equal?_37 item_35(car list_39))"
"(let-values()(cdr list_39))"
"(let-values()(cons(car list_39)(loop_38(cdr list_39)))))))))"
" loop_38)"
" list_36))))"
"(define-values"
"(remove)"
"(case-lambda"
"((item_40 list_41)(do-remove 'remove item_40 list_41 equal?))"
"((item_42 list_43 equal?_44)"
"(begin"
"(if(if(procedure? equal?_44)(procedure-arity-includes? equal?_44 '2) '#f)"
"(void)"
" (let-values () (raise-argument-error 'remove '\"(any/c any/c . -> . any/c)\" equal?_44)))"
"(do-remove 'remove item_42 list_43 equal?_44)))))"
"(define-values(remq)(lambda(item_45 list_46)(do-remove 'remq item_45 list_46 eq?)))"
"(define-values(remv)(lambda(item_47 list_48)(do-remove 'remv item_47 list_48 eqv?)))"
"(define-values"
"(do-remove*)"
"(lambda(who_49 l_50 r_51 equal?_52)"
"(begin"
" (if (list? l_50) (void) (let-values () (raise-argument-error who_49 '\"list?\" l_50)))"
" (if (list? r_51) (void) (let-values () (raise-argument-error who_49 '\"list?\" r_51)))"
"((letrec-values(((rloop_53)"
"(lambda(r_54)"
"(if(null? r_54)"
"(let-values() null)"
"(let-values()"
"(let-values(((first-r_55)(car r_54)))"
"((letrec-values(((loop_56)"
"(lambda(l-rest_57)"
"(if(null? l-rest_57)"
"(let-values()(cons first-r_55(rloop_53(cdr r_54))))"
"(if(equal?_52(car l-rest_57) first-r_55)"
"(let-values()(rloop_53(cdr r_54)))"
"(let-values()(loop_56(cdr l-rest_57))))))))"
" loop_56)"
" l_50)))))))"
" rloop_53)"
" r_51))))"
"(define-values"
"(remove*)"
"(case-lambda"
"((l_58 r_59)(do-remove* 'remove* l_58 r_59 equal?))"
"((l_60 r_61 equal?_62)"
"(begin"
"(if(if(procedure? equal?_62)(procedure-arity-includes? equal?_62 '2) '#f)"
"(void)"
" (let-values () (raise-argument-error 'remove* '\"(any/c any/c . -> . any/c)\" equal?_62)))"
"(do-remove* 'remove* l_60 r_61 equal?_62)))))"
"(define-values(remq*)(lambda(l_63 r_64)(do-remove* 'remq* l_63 r_64 eq?)))"
"(define-values(remv*)(lambda(l_65 r_66)(do-remove* 'remv* l_65 r_66 eqv?)))"
"(define-values"
"(memf)"
"(lambda(f_67 list_68)"
"(begin"
"(if(if(procedure? f_67)(procedure-arity-includes? f_67 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'memf '\"(any/c . -> any/c)\" f_67)))"
"((letrec-values(((loop_69)"
"(lambda(l_70)"
"(if(null? l_70)"
"(let-values() '#f)"
"(if(not(pair? l_70))"
" (let-values () (raise-mismatch-error 'memf '\"not a proper list: \" list_68))"
"(let-values()(if(f_67(car l_70)) l_70(loop_69(cdr l_70)))))))))"
" loop_69)"
" list_68))))"
"(define-values"
"(findf)"
"(lambda(f_71 list_72)"
"(begin"
"(if(if(procedure? f_71)(procedure-arity-includes? f_71 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'findf '\"(any/c . -> . any/c)\" f_71)))"
"((letrec-values(((loop_73)"
"(lambda(l_74)"
"(if(null? l_74)"
"(let-values() '#f)"
"(if(not(pair? l_74))"
" (let-values () (raise-mismatch-error 'findf '\"not a proper list: \" list_72))"
"(let-values()"
"(let-values(((a_75)(car l_74)))(if(f_71 a_75) a_75(loop_73(cdr l_74))))))))))"
" loop_73)"
" list_72))))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 '\"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
" (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 '\"non-pair found in list: \" a_79 '\" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() '#f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() '#f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() '#f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() '#f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() '#f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() '#f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 '2) '#f)"
"(void)"
" (let-values () (raise-argument-error 'assoc '\"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() '#f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() '#f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'assf '\"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) '#f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" '#f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() '#f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() '#f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100))))"
"(define-values"
"(mapadd)"
"(lambda(f_156 l_157 last_158)"
"((letrec-values(((loop_159)"
"(lambda(l_160)"
"(if(null? l_160)(list last_158)(cons(f_156(car l_160))(loop_159(cdr l_160)))))))"
" loop_159)"
" l_157)))"
"(define-values"
"(check-fold)"
"(lambda(name_161 proc_162 init_163 l_164 more_165)"
"(begin"
"(if(procedure? proc_162)"
"(void)"
" (let-values () (apply raise-argument-error name_161 '\"procedure?\" '0 proc_162 init_163 l_164 more_165)))"
"(if(list? l_164)"
"(void)"
" (let-values () (apply raise-argument-error name_161 '\"list?\" '2 proc_162 init_163 l_164 more_165)))"
"(if(null? more_165)"
"(if(procedure-arity-includes? proc_162 '2)"
"(void)"
" (let-values () (raise-mismatch-error name_161 '\"given procedure does not accept 2 arguments: \" proc_162)))"
"(let-values(((len_166)(length l_164)))"
"(begin"
"((letrec-values(((loop_167)"
"(lambda(more_168 n_169)"
"(if(null? more_168)"
"(void)"
"(let-values()"
"(begin"
"(if(list?(car more_168))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" name_161"
" '\"list?\""
" n_169"
" proc_162"
" init_163"
" l_164"
" more_168)))"
"(if(= len_166(length(car more_168)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" name_161"
" '\"given list does not have the same size as the first list: \""
"(car more_168))))"
"(loop_167(cdr more_168)(add1 n_169))))))))"
" loop_167)"
" more_165"
" '3)"
"(if(procedure-arity-includes? proc_162(+ '2(length more_165)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" name_161"
" (format '\"given procedure does not accept ~a arguments: \" (+ '2 (length more_165)))"
" proc_162)))))))))"
"(define-values"
"(foldl)"
"(case-lambda"
"((f_170 init_171 l_172)"
"(begin"
"(check-fold 'foldl f_170 init_171 l_172 null)"
"((letrec-values(((loop_173)"
"(lambda(init_174 l_175)"
"(if(null? l_175) init_174(loop_173(f_170(car l_175) init_174)(cdr l_175))))))"
" loop_173)"
" init_171"
" l_172)))"
"((f_176 init_177 l_178 . ls_179)"
"(begin"
"(check-fold 'foldl f_176 init_177 l_178 ls_179)"
"((letrec-values(((loop_180)"
"(lambda(init_181 ls_182)"
"(if(pair?(car ls_182))"
"(loop_180(apply f_176(mapadd car ls_182 init_181))(map2 cdr ls_182))"
" init_181))))"
" loop_180)"
" init_177"
"(cons l_178 ls_179))))))"
"(define-values"
"(foldr)"
"(case-lambda"
"((f_183 init_184 l_185)"
"(begin"
"(check-fold 'foldr f_183 init_184 l_185 null)"
"((letrec-values(((loop_186)"
"(lambda(init_187 l_188)"
"(if(null? l_188) init_187(f_183(car l_188)(loop_186 init_187(cdr l_188)))))))"
" loop_186)"
" init_184"
" l_185)))"
"((f_189 init_190 l_191 . ls_192)"
"(begin"
"(check-fold 'foldr f_189 init_190 l_191 ls_192)"
"((letrec-values(((loop_193)"
"(lambda(ls_194)"
"(if(pair?(car ls_194))"
"(apply f_189(mapadd car ls_194(loop_193(map2 cdr ls_194))))"
" init_190))))"
" loop_193)"
"(cons l_191 ls_192))))))"
"(define-values"
"(filter)"
"(lambda(f_195 list_196)"
"(begin"
"(if(if(procedure? f_195)(procedure-arity-includes? f_195 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'filter '\"(any/c . -> . any/c)\" f_195)))"
" (if (list? list_196) (void) (let-values () (raise-argument-error 'filter '\"list?\" list_196)))"
"((letrec-values(((loop_197)"
"(lambda(l_198 result_199)"
"(if(null? l_198)"
"(alt-reverse result_199)"
"(loop_197(cdr l_198)(if(f_195(car l_198))(cons(car l_198) result_199) result_199))))))"
" loop_197)"
" list_196"
" null))))"
"(define-values"
"(build-vector)"
"(lambda(n_200 fcn_201)"
"(begin"
"(if(exact-nonnegative-integer? n_200)"
"(void)"
" (let-values () (raise-argument-error 'build-vector '\"exact-nonnegative-integer?\" n_200)))"
"(if(if(procedure? fcn_201)(procedure-arity-includes? fcn_201 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'build-vector '\"(exact-nonnegative-integer? . -> . any/c)\" fcn_201)))"
"(let-values(((vec_202)(make-vector n_200)))"
"((letrec-values(((loop_203)"
"(lambda(i_204)"
"(if(= i_204 n_200)"
" vec_202"
"(begin(vector-set! vec_202 i_204(fcn_201 i_204))(loop_203(add1 i_204)))))))"
" loop_203)"
" '0)))))"
"(define-values"
"(build-string)"
"(lambda(n_205 fcn_206)"
"(begin"
"(if(exact-nonnegative-integer? n_205)"
"(void)"
" (let-values () (raise-argument-error 'build-string '\"exact-nonnegative-integer?\" n_205)))"
"(if(if(procedure? fcn_206)(procedure-arity-includes? fcn_206 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'build-string '\"(exact-nonnegative-integer? . -> . char?)\" fcn_206)))"
"(let-values(((str_207)(make-string n_205)))"
"((letrec-values(((loop_208)"
"(lambda(i_209)"
"(if(= i_209 n_205)"
" str_207"
"(begin(string-set! str_207 i_209(fcn_206 i_209))(loop_208(add1 i_209)))))))"
" loop_208)"
" '0)))))"
"(define-values"
"(build-list)"
"(lambda(n_210 fcn_211)"
"(begin"
"(if(exact-nonnegative-integer? n_210)"
"(void)"
" (let-values () (raise-argument-error 'build-list '\"exact-nonnegative-integer?\" n_210)))"
"(if(if(procedure? fcn_211)(procedure-arity-includes? fcn_211 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'build-list '\"(exact-nonnegative-integer? . -> . any/c)\" fcn_211)))"
"((letrec-values(((recr_212)"
"(lambda(j_213 i_214)"
"(if(zero? i_214)"
"(let-values() null)"
"(let-values()(cons(fcn_211 j_213)(recr_212(add1 j_213)(sub1 i_214))))))))"
" recr_212)"
" '0"
" n_210))))"
"(define-values"
"(compose1 compose)"
"(let-values()"
"(let-values(((pipeline1_302)"
"(lambda(f_324 rfuns_325)"
"(lambda(x_326)"
"((letrec-values(((loop_327)"
"(lambda(x_328 f_329 rfuns_330)"
"(if(null? rfuns_330)"
"(f_329 x_328)"
"(loop_327(f_329 x_328)(car rfuns_330)(cdr rfuns_330))))))"
" loop_327)"
" x_326"
" f_324"
" rfuns_325)))))"
"(let-values(((pipeline*_303)"
"(lambda(f_331 rfuns_332)"
"(if(eqv? '1(norm:procedure-arity f_331))"
"((letrec-values(((loop_333)"
"(lambda(f_334 rfuns_335)"
"(if(null? rfuns_335)"
" f_334"
"(loop_333"
"(let-values(((fst_336)(car rfuns_335)))"
"(if(eqv? '1(norm:procedure-arity fst_336))"
"(lambda(x_337)(fst_336(f_334 x_337)))"
"(lambda(x_338)"
"(call-with-values(lambda()(f_334 x_338)) fst_336))))"
"(cdr rfuns_335))))))"
" loop_333)"
" f_331"
" rfuns_332)"
"(let-values(((funs_339)(alt-reverse(cons f_331 rfuns_332))))"
"((letrec-values(((loop_340)"
"(lambda(f_341 funs_342)"
"(if(null? funs_342)"
" f_341"
"(loop_340"
"(let-values(((fst_343)(car funs_342)))"
"(if(eqv? '1(norm:procedure-arity f_341))"
"(if(eqv? '1(norm:procedure-arity fst_343))"
"(lambda(x_344)(f_341(fst_343 x_344)))"
"(lambda xs_345(f_341(apply fst_343 xs_345))))"
"(if(eqv? '1(norm:procedure-arity fst_343))"
"(lambda(x_346)"
"(call-with-values(lambda()(fst_343 x_346)) f_341))"
"(lambda xs_347"
"(call-with-values(lambda()(apply fst_343 xs_347)) f_341)))))"
"(cdr funs_342))))))"
" loop_340)"
"(car funs_339)"
"(cdr funs_339)))))))"
"(let-values(((compose1_322)"
"(let-values(((simple-compose_348)"
"(lambda(f_349 g_350)"
"(let-values(((arity_351)(norm:procedure-arity g_350)))"
"(let-values(((required-kwds_352 allowed-kwds_353)(procedure-keywords g_350)))"
"(let-values(((composed_354)"
"(if(eq? '1 arity_351)"
"(lambda(x_355)(f_349(g_350 x_355)))"
"(case-lambda"
"((x_356)(f_349(g_350 x_356)))"
"((x_357 y_358)(f_349(g_350 x_357 y_358)))"
"(args_359(f_349(apply g_350 args_359)))))))"
"(if(null? allowed-kwds_353)"
" composed_354"
"(make-keyword-procedure"
"(lambda(kws_360 kw-args_361 . xs_362)"
"(f_349(new-keyword-apply g_350 kws_360 kw-args_361 xs_362)))"
" composed_354))))))))"
"(case-lambda"
" ((f_363) (if (procedure? f_363) f_363 (raise-argument-error 'compose1 '\"procedure?\" '0 f_363)))"
"((f_364 g_365)"
"(begin"
"(if(procedure? f_364)"
"(void)"
" (let-values () (raise-argument-error 'compose1 '\"procedure?\" '0 f_364 g_365)))"
"(if(procedure? g_365)"
"(void)"
" (let-values () (raise-argument-error 'compose1 '\"procedure?\" '1 f_364 g_365)))"
"(if(procedure-arity-includes? f_364 '1)"
"(void)"
"(let-values()"
" (apply raise-argument-error 'compose1 '\"(any/c . -> . any/c)\" '0 f_364 '())))"
"(if(null?(let-values(((req_366 __367)(procedure-keywords f_364))) req_366))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose1"
" '\"procedure-with-no-required-keywords?\""
" '0"
" f_364"
" '())))"
"(simple-compose_348 f_364 g_365)))"
"(() values)"
"((f0_368 . fs0_369)"
"((letrec-values(((loop_370)"
"(lambda(f_371 fs_372 i_373 rfuns_374)"
"(begin"
"(if(procedure? f_371)"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose1"
" '\"procedure?\""
" i_373"
" f0_368"
" fs0_369)))"
"(if(pair? fs_372)"
"(begin"
"(begin"
"(if(procedure-arity-includes? f_371 '1)"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose1"
" '\"(any/c . -> . any/c)\""
" i_373"
" f0_368"
" fs0_369)))"
"(if(null?"
"(let-values(((req_375 __376)(procedure-keywords f_371)))"
" req_375))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose1"
" '\"procedure-with-no-required-keywords?\""
" i_373"
" f0_368"
" fs0_369))))"
"(loop_370"
"(car fs_372)"
"(cdr fs_372)"
"(add1 i_373)"
"(cons f_371 rfuns_374)))"
"(simple-compose_348"
"(pipeline1_302(car rfuns_374)(cdr rfuns_374))"
" f_371))))))"
" loop_370)"
" f0_368"
" fs0_369"
" '0"
" '()))))))"
"(let-values(((compose_323)"
"(let-values(((simple-compose_377)"
"(lambda(f_378 g_379)"
"(if(eqv? '1(norm:procedure-arity f_378))"
"(let-values(((arity_380)(norm:procedure-arity g_379)))"
"(let-values(((required-kwds_381 allowed-kwds_382)"
"(procedure-keywords g_379)))"
"(let-values(((composed_383)"
"(if(eq? '1 arity_380)"
"(lambda(x_384)(f_378(g_379 x_384)))"
"(case-lambda"
"((x_385)(f_378(g_379 x_385)))"
"((x_386 y_387)(f_378(g_379 x_386 y_387)))"
"(args_388(f_378(apply g_379 args_388)))))))"
"(if(null? allowed-kwds_382)"
" composed_383"
"(make-keyword-procedure"
"(lambda(kws_389 kw-args_390 . xs_391)"
"(f_378(new-keyword-apply g_379 kws_389 kw-args_390 xs_391)))"
" composed_383)))))"
"(let-values(((arity_392)(norm:procedure-arity g_379)))"
"(let-values(((required-kwds_393 allowed-kwds_394)"
"(procedure-keywords g_379)))"
"(let-values(((composed_395)"
"(if(eq? '1 arity_392)"
"(lambda(x_396)"
"(call-with-values(lambda()(g_379 x_396)) f_378))"
"(case-lambda"
"((x_397)"
"(call-with-values(lambda()(g_379 x_397)) f_378))"
"((x_398 y_399)"
"(call-with-values"
"(lambda()(g_379 x_398 y_399))"
" f_378))"
"(args_400"
"(call-with-values"
"(lambda()(apply g_379 args_400))"
" f_378))))))"
"(if(null? allowed-kwds_394)"
" composed_395"
"(make-keyword-procedure"
"(lambda(kws_401 kw-args_402 . xs_403)"
"(call-with-values"
"(lambda()(new-keyword-apply g_379 kws_401 kw-args_402 xs_403))"
" f_378))"
" composed_395)))))))))"
"(case-lambda"
"((f_404)"
" (if (procedure? f_404) f_404 (raise-argument-error 'compose '\"procedure?\" '0 f_404)))"
"((f_405 g_406)"
"(begin"
"(if(procedure? f_405)"
"(void)"
" (let-values () (raise-argument-error 'compose '\"procedure?\" '0 f_405 g_406)))"
"(if(procedure? g_406)"
"(void)"
" (let-values () (raise-argument-error 'compose '\"procedure?\" '1 f_405 g_406)))"
"(if(null?(let-values(((req_407 __408)(procedure-keywords f_405))) req_407))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose"
" '\"procedure-with-no-required-keywords?\""
" '0"
" f_405"
" '())))"
"(simple-compose_377 f_405 g_406)))"
"(() values)"
"((f0_409 . fs0_410)"
"((letrec-values(((loop_411)"
"(lambda(f_412 fs_413 i_414 rfuns_415)"
"(begin"
"(if(procedure? f_412)"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose"
" '\"procedure?\""
" i_414"
" f0_409"
" fs0_410)))"
"(if(pair? fs_413)"
"(begin"
"(if(null?"
"(let-values(((req_416 __417)(procedure-keywords f_412)))"
" req_416))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose"
" '\"procedure-with-no-required-keywords?\""
" i_414"
" f0_409"
" fs0_410)))"
"(loop_411"
"(car fs_413)"
"(cdr fs_413)"
"(add1 i_414)"
"(cons f_412 rfuns_415)))"
"(simple-compose_377"
"(pipeline*_303(car rfuns_415)(cdr rfuns_415))"
" f_412))))))"
" loop_411)"
" f0_409"
" fs0_410"
" '0"
" '()))))))"
"(values compose1_322 compose_323)))))))"
"(define-values"
"(real->decimal-string)"
"(let-values(((real->decimal-string4_36)"
"(lambda(n3_37 digits1_38 digits2_39)"
"(let-values(((n_40) n3_37))"
"(let-values(((digits_41)(if digits2_39 digits1_38 '2)))"
"(let-values()"
"(begin"
"(if(exact-nonnegative-integer? digits_41)"
"(void)"
"(let-values()"
" (raise-argument-error 'real->decimal-string '\"exact-nonnegative-integer?\" digits_41)))"
"(let-values(((e_42)(expt '10 digits_41)))"
"(let-values(((num_43)(round(abs(* e_42(inexact->exact n_40))))))"
"(format"
" '\"~a~a.~a\""
"(if(let-values(((or-part_44)(negative? n_40)))"
"(if or-part_44 or-part_44(equal? n_40 '-0.0)))"
" '\"-\""
" '\"\")"
"(quotient num_43 e_42)"
"(if(zero? digits_41)"
" '\"\""
"(let-values(((s_45)(number->string(remainder num_43 e_42))))"
"(if(=(string-length s_45) digits_41)"
" s_45"
"(string-append"
"(make-string(- digits_41(string-length s_45)) '#\\0)"
" s_45))))))))))))))"
"(case-lambda"
"((n_46)(real->decimal-string4_36 n_46 '#f '#f))"
"((n_47 digits1_48)(real->decimal-string4_36 n_47 digits1_48 '#t)))))"
" (define-values (regexp-quote-chars:s) '#rx\"[][.*?+|(){}\\\\$^]\")"
" (define-values (regexp-quote-chars:b) '#rx#\"[][.*?+|(){}\\\\$^]\")"
"(define-values"
"(regexp-quote)"
"(let-values(((regexp-quote9_49)"
"(lambda(s8_50 case-sens?6_51 case-sens?7_52)"
"(let-values(((s_53) s8_50))"
"(let-values(((case-sens?_54)(if case-sens?7_52 case-sens?6_51 '#t)))"
"(let-values()"
"(let-values(((b?_55)"
"(if(bytes? s_53)"
"(let-values() '#t)"
"(if(string? s_53)"
"(let-values() '#f)"
"(let-values()"
" (raise-argument-error 'regexp-quote '\"(or/c string? bytes?)\" s_53))))))"
"(let-values(((s_56)"
"(if b?_55"
" (regexp-replace* regexp-quote-chars:b s_53 '#\"\\\\\\\\&\")"
" (regexp-replace* regexp-quote-chars:s s_53 '\"\\\\\\\\&\"))))"
"(if case-sens?_54"
"(let-values() s_56)"
"(if b?_55"
" (let-values () (bytes-append '#\"(?i:\" s_56 '#\")\"))"
" (let-values () (string-append '\"(?i:\" s_56 '\")\"))))))))))))"
"(case-lambda"
"((s_57)(regexp-quote9_49 s_57 '#f '#f))"
"((s_58 case-sens?6_59)(regexp-quote9_49 s_58 case-sens?6_59 '#t)))))"
"(define-values"
"(regexp-replace-quote)"
"(lambda(s_60)"
"(if(bytes? s_60)"
" (let-values () (regexp-replace* '#rx#\"[&\\\\]\" s_60 '#\"\\\\\\\\&\"))"
"(if(string? s_60)"
" (let-values () (regexp-replace* '#rx\"[&\\\\]\" s_60 '\"\\\\\\\\&\"))"
" (let-values () (raise-argument-error 'regexp-replace-quote '\"(or/c string? bytes?)\" s_60))))))"
"(define-values"
"(make-regexp-tweaker)"
"(lambda(tweaker_61)"
"(let-values(((t_62)(make-hash)))"
"(lambda(rx_63 n_64)"
"(let-values(((run-tweak_110)"
"(lambda()"
"(if(pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_111)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_112)(regexp? tweaked_111)))"
"(if or-part_112 or-part_112(byte-regexp? tweaked_111)))"
" tweaked_111"
"(pregexp(if(bytes? tweaked_111)(bytes->string/utf-8 tweaked_111) tweaked_111)))))"
"(if(regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_113)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_114)(regexp? tweaked_113)))"
"(if or-part_114 or-part_114(byte-regexp? tweaked_113)))"
" tweaked_113"
"(regexp(if(bytes? tweaked_113)(bytes->string/utf-8 tweaked_113) tweaked_113)))))"
"(if(byte-pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_115)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_116)(regexp? tweaked_115)))"
"(if or-part_116 or-part_116(byte-regexp? tweaked_115)))"
" tweaked_115"
"(byte-pregexp"
"(if(bytes? tweaked_115) tweaked_115(string->bytes/utf-8 tweaked_115))))))"
"(if(byte-regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_117)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_118)(regexp? tweaked_117)))"
"(if or-part_118 or-part_118(byte-regexp? tweaked_117)))"
" tweaked_117"
"(byte-regexp"
"(if(bytes? tweaked_117) tweaked_117(string->bytes/utf-8 tweaked_117))))))"
"(if(string? rx_63)"
"(let-values()"
"(let-values(((tweaked_119)(tweaker_61((lambda(x_120) x_120) rx_63) n_64)))"
"(if(let-values(((or-part_121)(regexp? tweaked_119)))"
"(if or-part_121 or-part_121(byte-regexp? tweaked_119)))"
" tweaked_119"
"(regexp"
"(if(bytes? tweaked_119)(bytes->string/utf-8 tweaked_119) tweaked_119)))))"
"(if(bytes? rx_63)"
"(let-values()"
"(let-values(((tweaked_122)(tweaker_61((lambda(x_123) x_123) rx_63) n_64)))"
"(if(let-values(((or-part_124)(regexp? tweaked_122)))"
"(if or-part_124 or-part_124(byte-regexp? tweaked_122)))"
" tweaked_122"
"(byte-regexp"
"(if(bytes? tweaked_122) tweaked_122(string->bytes/utf-8 tweaked_122))))))"
"(let-values()"
"(raise-argument-error"
" 'regexp-tweaker"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" rx_63)))))))))))"
"(let-values(((key_125)(cons n_64 rx_63)))"
"(let-values(((or-part_126)(hash-ref t_62 key_125 '#f)))"
"(if or-part_126"
" or-part_126"
"(let-values(((rx*_127)(run-tweak_110)))(begin(hash-set! t_62 key_125 rx*_127) rx*_127))))))))))"
"(define-values"
"(regexp-try-match)"
"(let-values(((regexp-try-match21_128)"
"(lambda(pattern19_129"
" input-port20_130"
" start-k11_131"
" end-k12_132"
" out13_133"
" prefix14_134"
" start-k15_135"
" end-k16_136"
" out17_137"
" prefix18_138)"
"(let-values(((pattern_139) pattern19_129))"
"(let-values(((input-port_140) input-port20_130))"
"(let-values(((start-k_141)(if start-k15_135 start-k11_131 '0)))"
"(let-values(((end-k_142)(if end-k16_136 end-k12_132 '#f)))"
"(let-values(((out_143)(if out17_137 out13_133 '#f)))"
" (let-values (((prefix_144) (if prefix18_138 prefix14_134 '#\"\")))"
"(let-values()"
"(begin"
"(if(input-port? input-port_140)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-try-match '\"input-port?\" input-port_140)))"
"(if(let-values(((or-part_145)(not out_143)))"
"(if or-part_145 or-part_145(output-port? out_143)))"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-try-match '\"(or/c output-port? #f)\" out_143)))"
"(let-values(((m_146)"
"(regexp-match-peek-positions"
" pattern_139"
" input-port_140"
" start-k_141"
" end-k_142"
" '#f"
" prefix_144)))"
"(if m_146"
"(let-values(((drop_147)(caar m_146)))"
"(begin"
"(let-values(((s_148)(read-bytes drop_147 input-port_140)))"
"(if out_143(let-values()(write-bytes s_148 out_143))(void)))"
"(let-values(((s_149)(read-bytes(-(cdar m_146) drop_147) input-port_140)))"
"(cons"
" s_149"
"(map2"
"(lambda(p_150)"
"(if p_150"
"(subbytes s_149(-(car p_150) drop_147)(-(cdr p_150) drop_147))"
" '#f))"
"(cdr m_146))))))"
" '#f)))))))))))))"
"(case-lambda"
"((pattern_151 input-port_152)(regexp-try-match21_128 pattern_151 input-port_152 '#f '#f '#f '#f '#f '#f '#f '#f))"
"((pattern_153 input-port_154 start-k_155 end-k_156 out_157 prefix14_158)"
"(regexp-try-match21_128 pattern_153 input-port_154 start-k_155 end-k_156 out_157 prefix14_158 '#t '#t '#t '#t))"
"((pattern_159 input-port_160 start-k_161 end-k_162 out13_163)"
"(regexp-try-match21_128 pattern_159 input-port_160 start-k_161 end-k_162 out13_163 '#f '#t '#t '#t '#f))"
"((pattern_164 input-port_165 start-k_166 end-k12_167)"
"(regexp-try-match21_128 pattern_164 input-port_165 start-k_166 end-k12_167 '#f '#f '#t '#t '#f '#f))"
"((pattern_168 input-port_169 start-k11_170)"
"(regexp-try-match21_128 pattern_168 input-port_169 start-k11_170 '#f '#f '#f '#t '#f '#f '#f)))))"
"(define-values(bstring-length)(lambda(s_171)(if(bytes? s_171)(bytes-length s_171)(string-length s_171))))"
"(define-values"
"(no-empty-edge-matches)"
"(make-regexp-tweaker"
"(lambda(rx_172 n_173)"
"(if(bytes? rx_172)"
" (bytes-append '#\"(?:\" rx_172 '#\")(?<=\" (make-bytes n_173 (char->integer '#\\.)) '#\")\")"
" (format '\"(?:~a)(?<=~a)\" rx_172 (make-bytes n_173 (char->integer '#\\.)))))))"
"(define-values"
"(regexp-match-positions*33.1)"
"(lambda(match-select23_174"
" match-select24_175"
" pattern31_176"
" string32_177"
" start25_178"
" end26_179"
" ipre27_180"
" start28_181"
" end29_182"
" ipre30_183)"
"(let-values(((pattern_184) pattern31_176))"
"(let-values(((string_185) string32_177))"
"(let-values(((start_186)(if start28_181 start25_178 '0)))"
"(let-values(((end_187)(if end29_182 end26_179 '#f)))"
" (let-values (((ipre_188) (if ipre30_183 ipre27_180 '#\"\")))"
"(let-values(((match-select_189)(if match-select24_175 match-select23_174 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_189)"
"(void)"
" (let-values () (raise-argument-error 'regexp-match-positions* '\"procedure?\" match-select_189)))"
"(if(eq? match-select_189 car)"
"(let-values(((string_190)"
"(if(path? string_185)"
"(if(let-values(((or-part_191)(string? pattern_184)))"
"(if or-part_191 or-part_191(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_192)"
"(if(string? string_190)"
"(let-values()(string-length string_190))"
"(if(bytes? string_190)"
"(let-values()(bytes-length string_190))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_193)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_194)(regexp-max-lookbehind orig-rx_193)))"
"(begin"
"(if '#f"
"(if(input-port? string_190)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-match-positions* '\"input-port?\" string_190)))"
"(if(let-values(((or-part_195) len_192))"
"(if or-part_195 or-part_195(input-port? string_190)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
" '\"(or/c string? bytes? path? input-port?)\""
" string_190))))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 '0) '#f) '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
" '\"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_196)(not end_187)))"
"(if or-part_196"
" or-part_196"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 '0) '#f) '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
" (let-values () (raise-argument-error 'regexp-match-positions* '\"bytes?\" ipre_188)))"
"(if(let-values(((or-part_197)(input-port? string_190)))"
"(if or-part_197 or-part_197(if len_192(<= start_186 len_192) '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
" (format '\"starting offset index out of range [0,~a]: \" len_192)"
" start_186)))"
"(if(let-values(((or-part_198)(not end_187)))"
"(if or-part_198"
" or-part_198"
"(if(<= start_186 end_187)"
"(let-values(((or-part_199)(input-port? string_190)))"
"(if or-part_199 or-part_199(if len_192(<= end_187 len_192) '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
" (format '\"ending offset index out of range [~a,~a]: \" start_186 len_192)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_200)"
"(lambda(acc_201 start_202 end_203 ipre_204 0-ok?_205)"
"(let-values(((rx_206)"
"(if 0-ok?_205"
" orig-rx_193"
"(no-empty-edge-matches"
" orig-rx_193"
"(add1(bytes-length ipre_204))))))"
"(if(if '#f(input-port? string_190) '#f)"
"(let-values(((__207)"
"(if(positive? start_202)"
"(let-values()"
"(let-values(((s_208)(make-bytes '4096)))"
"((letrec-values(((loop_209)"
"(lambda(n_210)"
"(if(= n_210 start_202)"
"(void)"
"(let-values()"
"(let-values(((m_211)"
"(read-bytes-avail!"
" s_208"
" string_190"
" '0"
"(min"
"(-"
" start_202"
" n_210)"
" '4096))))"
"(if(eof-object?"
" m_211)"
"(void)"
"(let-values()"
"(loop_209"
"(+"
" n_210"
" m_211))))))))))"
" loop_209)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_212)(if '#f '#f '0)))"
"(let-values(((spitout_213)"
"(if '#f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_214"
" start_215"
" end_216"
" flush?_217"
" breakable?_218)"
"(let-values(((c_219)"
"(- end_216 start_215)))"
"(begin"
"(set! discarded/leftovers_212"
"(+ c_219 discarded/leftovers_212))"
" c_219)))"
" void))))"
"(let-values(((end_220)"
"(if end_203(- end_203 start_202) '#f)))"
"(let-values(((ms_221 ipre_222)"
"(regexp-match/end"
" rx_206"
" string_190"
" '0"
" end_220"
" spitout_213"
" ipre_204"
" max-lookbehind_194)))"
"(let-values(((m_223)(if ms_221(car ms_221) '#f)))"
"(let-values(((discarded/leftovers_224)"
"(if '#f"
"(get-output-bytes spitout_213)"
" discarded/leftovers_212)))"
"(let-values(((skipped_225)"
"(if '#f"
"(bstring-length"
" discarded/leftovers_224)"
" discarded/leftovers_224)))"
"(let-values(((got_226)"
"(if m_223"
"(bstring-length m_223)"
" '#f)))"
"(let-values(((end_227)"
"(if end_220"
"(if m_223"
"(-"
" end_220"
" skipped_225"
" got_226)"
" '#f)"
" '#f)))"
"(if m_223"
"(let-values(((0-ok?_228)"
"(not(zero? got_226))))"
"(loop_200"
"('#f"
" discarded/leftovers_224"
" ms_221"
" acc_201)"
" '0"
" end_227"
" ipre_222"
" 0-ok?_228))"
"('#f"
" acc_201"
" discarded/leftovers_224))))))))))))"
"(let-values(((m_229 ipre_230)"
"(if '#f"
"(regexp-match-peek-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" '#f"
" ipre_204"
" max-lookbehind_194)"
"(regexp-match-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" '#f"
" ipre_204"
" max-lookbehind_194))))"
"(if(not m_229)"
"((lambda(acc_231 start_232 end_233) acc_231)"
" acc_201"
" start_202"
" end_203)"
"(let-values(((mstart_234)(caar m_229)))"
"(let-values(((mend_235)(cdar m_229)))"
"(let-values(((0-ok?_236)"
"(not(= mstart_234 mend_235))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mstart)(#%app caar ms))"
"((mend)(#%app cdar ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app + mend(#%app cdr p))))"
"(#%app"
" loop"
" '()"
" '0"
"(if end(#%app - end mend) '#f)))"
"(#%app cons(#%app car ms) acc))))"
"(input-port? string_190)"
" '#f)"
"((lambda(loop_245"
" acc_246"
" start_247"
" end_248"
" ms_249)"
"(let-values(((mstart_250)(caar ms_249))"
"((mend_251)(cdar ms_249)))"
"(append"
"(map2"
"(lambda(p_252)"
"(cons"
"(+ mend_251(car p_252))"
"(+ mend_251(cdr p_252))))"
"(loop_245"
" '()"
" '0"
"(if end_248(- end_248 mend_251) '#f)))"
"(cons(car ms_249) acc_246))))"
"(lambda(acc_253 new-start_254 new-end_255)"
"(loop_200"
" acc_253"
" new-start_254"
" new-end_255"
" ipre_230"
" 0-ok?_236))"
" acc_201"
" start_202"
" end_203"
" m_229)"
"(loop_200"
"((lambda(start_256 ms_257 acc_258)"
"(cons(car ms_257) acc_258))"
" start_202"
" m_229"
" acc_201)"
" mend_235"
" end_203"
" ipre_230"
" 0-ok?_236))))))))))))"
" loop_200)"
" '()"
" start_186"
" end_187"
" ipre_188"
" '#t)))))))"
"(let-values(((string_259)"
"(if(path? string_185)"
"(if(let-values(((or-part_260)(string? pattern_184)))"
"(if or-part_260 or-part_260(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_261)"
"(if(string? string_259)"
"(let-values()(string-length string_259))"
"(if(bytes? string_259)"
"(let-values()(bytes-length string_259))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_262)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_263)(regexp-max-lookbehind orig-rx_262)))"
"(begin"
"(if '#f"
"(if(input-port? string_259)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-match-positions* '\"input-port?\" string_259)))"
"(if(let-values(((or-part_264) len_261))"
"(if or-part_264 or-part_264(input-port? string_259)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
" '\"(or/c string? bytes? path? input-port?)\""
" string_259))))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 '0) '#f) '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
" '\"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_265)(not end_187)))"
"(if or-part_265"
" or-part_265"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 '0) '#f) '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
" (let-values () (raise-argument-error 'regexp-match-positions* '\"bytes?\" ipre_188)))"
"(if(let-values(((or-part_266)(input-port? string_259)))"
"(if or-part_266 or-part_266(if len_261(<= start_186 len_261) '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
" (format '\"starting offset index out of range [0,~a]: \" len_261)"
" start_186)))"
"(if(let-values(((or-part_267)(not end_187)))"
"(if or-part_267"
" or-part_267"
"(if(<= start_186 end_187)"
"(let-values(((or-part_268)(input-port? string_259)))"
"(if or-part_268 or-part_268(if len_261(<= end_187 len_261) '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
" (format '\"ending offset index out of range [~a,~a]: \" start_186 len_261)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_269)"
"(lambda(acc_270 start_271 end_272 ipre_273 0-ok?_274)"
"(let-values(((rx_275)"
"(if 0-ok?_274"
" orig-rx_262"
"(no-empty-edge-matches"
" orig-rx_262"
"(add1(bytes-length ipre_273))))))"
"(if(if '#f(input-port? string_259) '#f)"
"(let-values(((__276)"
"(if(positive? start_271)"
"(let-values()"
"(let-values(((s_277)(make-bytes '4096)))"
"((letrec-values(((loop_278)"
"(lambda(n_279)"
"(if(= n_279 start_271)"
"(void)"
"(let-values()"
"(let-values(((m_280)"
"(read-bytes-avail!"
" s_277"
" string_259"
" '0"
"(min"
"(-"
" start_271"
" n_279)"
" '4096))))"
"(if(eof-object?"
" m_280)"
"(void)"
"(let-values()"
"(loop_278"
"(+"
" n_279"
" m_280))))))))))"
" loop_278)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_281)(if '#f '#f '0)))"
"(let-values(((spitout_282)"
"(if '#f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_283"
" start_284"
" end_285"
" flush?_286"
" breakable?_287)"
"(let-values(((c_288)"
"(- end_285 start_284)))"
"(begin"
"(set! discarded/leftovers_281"
"(+ c_288 discarded/leftovers_281))"
" c_288)))"
" void))))"
"(let-values(((end_289)"
"(if end_272(- end_272 start_271) '#f)))"
"(let-values(((ms_290 ipre_291)"
"(regexp-match/end"
" rx_275"
" string_259"
" '0"
" end_289"
" spitout_282"
" ipre_273"
" max-lookbehind_263)))"
"(let-values(((m_292)(if ms_290(car ms_290) '#f)))"
"(let-values(((discarded/leftovers_293)"
"(if '#f"
"(get-output-bytes spitout_282)"
" discarded/leftovers_281)))"
"(let-values(((skipped_294)"
"(if '#f"
"(bstring-length"
" discarded/leftovers_293)"
" discarded/leftovers_293)))"
"(let-values(((got_295)"
"(if m_292"
"(bstring-length m_292)"
" '#f)))"
"(let-values(((end_296)"
"(if end_289"
"(if m_292"
"(-"
" end_289"
" skipped_294"
" got_295)"
" '#f)"
" '#f)))"
"(if m_292"
"(let-values(((0-ok?_297)"
"(not(zero? got_295))))"
"(loop_269"
"('#f"
" discarded/leftovers_293"
" ms_290"
" acc_270)"
" '0"
" end_296"
" ipre_291"
" 0-ok?_297))"
"('#f"
" acc_270"
" discarded/leftovers_293))))))))))))"
"(let-values(((m_298 ipre_299)"
"(if '#f"
"(regexp-match-peek-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" '#f"
" ipre_273"
" max-lookbehind_263)"
"(regexp-match-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" '#f"
" ipre_273"
" max-lookbehind_263))))"
"(if(not m_298)"
"((lambda(acc_300 start_301 end_302) acc_300)"
" acc_270"
" start_271"
" end_272)"
"(let-values(((mstart_303)(caar m_298)))"
"(let-values(((mend_304)(cdar m_298)))"
"(let-values(((0-ok?_305)"
"(not(= mstart_303 mend_304))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mend)(#%app cdar ms)))"
"(let-values(((rest)"
"(#%app"
" loop"
" '()"
" '0"
"(if end"
"(#%app - end mend)"
" '#f))))"
"(let-values(((s)"
"(#%app"
" match-select"
" ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(if(let-values(((or-part)"
"(if(#%app"
" pair?"
" s)"
"(#%app"
" exact-integer?"
"(#%app"
" car"
" s))"
" '#f)))"
"(if or-part"
" or-part"
"(#%app not s)))"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p))))"
"(lambda(ps)"
"(#%app"
" map"
"(lambda(p)"
"(if p"
"(#%app"
" cons"
"(#%app"
" +"
" mend"
"(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p)))"
" '#f))"
" ps)))"
" rest)"
"(#%app cons s acc))))))"
"(input-port? string_259)"
" '#f)"
"((lambda(loop_318"
" acc_319"
" start_320"
" end_321"
" ms_322)"
"(let-values(((mend_323)(cdar ms_322)))"
"(let-values(((rest_324)"
"(loop_318"
" '()"
" '0"
"(if end_321"
"(- end_321 mend_323)"
" '#f))))"
"(let-values(((s_325)"
"(match-select_189 ms_322)))"
"(append"
"(map2"
"(if(let-values(((or-part_326)"
"(if(pair? s_325)"
"(exact-integer?"
"(car s_325))"
" '#f)))"
"(if or-part_326"
" or-part_326"
"(not s_325)))"
"(lambda(p_327)"
"(cons"
"(+ mend_323(car p_327))"
"(+ mend_323(cdr p_327))))"
"(lambda(ps_328)"
"(map2"
"(lambda(p_329)"
"(if p_329"
"(cons"
"(+ mend_323(car p_329))"
"(+ mend_323(cdr p_329)))"
" '#f))"
" ps_328)))"
" rest_324)"
"(cons s_325 acc_319))))))"
"(lambda(acc_330 new-start_331 new-end_332)"
"(loop_269"
" acc_330"
" new-start_331"
" new-end_332"
" ipre_299"
" 0-ok?_305))"
" acc_270"
" start_271"
" end_272"
" m_298)"
"(loop_269"
"((lambda(start_333 ms_334 acc_335)"
"(cons(match-select_189 ms_334) acc_335))"
" start_271"
" m_298"
" acc_270)"
" mend_304"
" end_272"
" ipre_299"
" 0-ok?_305))))))))))))"
" loop_269)"
" '()"
" start_186"
" end_187"
" ipre_188"
" '#t))))))))))))))))))"
"(define-values"
"(unpack34.1$1)"
"(lambda(given-kws_336"
" given-args_337"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)"
"(let-values(((match-select24_346)(pair? given-kws_336)))"
"(let-values(((match-select23_347)(if match-select24_346(car given-args_337)(void))))"
"(regexp-match-positions*33.1"
" match-select23_347"
" match-select24_346"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)))))"
"(define-values"
"(regexp-match-positions*35.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_348 given-argc_349)"
"(if(if(>= given-argc_349 '4)(<= given-argc_349 '7) '#f)"
"(let-values(((l1_350) given-kws_348))"
"(let-values(((l1_351)(if(null? l1_350) l1_350(if(eq?(car l1_350) '#:match-select)(cdr l1_350) l1_350))))"
"(null? l1_351)))"
" '#f))"
"(case-lambda"
"((given-kws_352 given-args_353 pattern_354 string_355)"
"(unpack34.1$1 given-kws_352 given-args_353 pattern_354 string_355 '#f '#f '#f '#f '#f '#f))"
"((given-kws_356 given-args_357 pattern_358 string_359 start_360 end_361 ipre27_362)"
"(unpack34.1$1 given-kws_356 given-args_357 pattern_358 string_359 start_360 end_361 ipre27_362 '#t '#t '#t))"
"((given-kws_363 given-args_364 pattern_365 string_366 start_367 end26_368)"
"(unpack34.1$1 given-kws_363 given-args_364 pattern_365 string_366 start_367 end26_368 '#f '#t '#t '#f))"
"((given-kws_369 given-args_370 pattern_371 string_372 start25_373)"
"(unpack34.1$1 given-kws_369 given-args_370 pattern_371 string_372 start25_373 '#f '#f '#t '#f '#f)))"
" null"
" '(#:match-select)"
"(let-values(((regexp-match-positions*_374)"
"(case-lambda"
"((pattern_375 string_376)(unpack34.1$1 null null pattern_375 string_376 '#f '#f '#f '#f '#f '#f))"
"((pattern_377 string_378 start_379 end_380 ipre27_381)"
"(unpack34.1$1 null null pattern_377 string_378 start_379 end_380 ipre27_381 '#t '#t '#t))"
"((pattern_382 string_383 start_384 end26_385)"
"(unpack34.1$1 null null pattern_382 string_383 start_384 end26_385 '#f '#t '#t '#f))"
"((pattern_386 string_387 start25_388)"
"(unpack34.1$1 null null pattern_386 string_387 start25_388 '#f '#f '#t '#f '#f)))))"
" regexp-match-positions*_374)))"
"(define-values"
"(regexp-match-peek-positions*46.1)"
"(lambda(match-select36_389"
" match-select37_390"
" pattern44_391"
" string45_392"
" start38_393"
" end39_394"
" ipre40_395"
" start41_396"
" end42_397"
" ipre43_398)"
"(let-values(((pattern_399) pattern44_391))"
"(let-values(((string_400) string45_392))"
"(let-values(((start_401)(if start41_396 start38_393 '0)))"
"(let-values(((end_402)(if end42_397 end39_394 '#f)))"
" (let-values (((ipre_403) (if ipre43_398 ipre40_395 '#\"\")))"
"(let-values(((match-select_404)(if match-select37_390 match-select36_389 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_404)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-match-peek-positions* '\"procedure?\" match-select_404)))"
"(if(eq? match-select_404 car)"
"(let-values(((string_405)"
"(if(path? string_400)"
"(if(let-values(((or-part_406)(string? pattern_399)))"
"(if or-part_406 or-part_406(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_407)"
"(if(string? string_405)"
"(let-values()(string-length string_405))"
"(if(bytes? string_405)"
"(let-values()(bytes-length string_405))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_408)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_409)(regexp-max-lookbehind orig-rx_408)))"
"(begin"
"(if '#t"
"(if(input-port? string_405)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-match-peek-positions* '\"input-port?\" string_405)))"
"(if(let-values(((or-part_410) len_407))"
"(if or-part_410 or-part_410(input-port? string_405)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
" '\"(or/c string? bytes? path? input-port?)\""
" string_405))))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 '0) '#f) '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
" '\"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_411)(not end_402)))"
"(if or-part_411"
" or-part_411"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 '0) '#f) '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-match-peek-positions* '\"bytes?\" ipre_403)))"
"(if(let-values(((or-part_412)(input-port? string_405)))"
"(if or-part_412 or-part_412(if len_407(<= start_401 len_407) '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
" (format '\"starting offset index out of range [0,~a]: \" len_407)"
" start_401)))"
"(if(let-values(((or-part_413)(not end_402)))"
"(if or-part_413"
" or-part_413"
"(if(<= start_401 end_402)"
"(let-values(((or-part_414)(input-port? string_405)))"
"(if or-part_414 or-part_414(if len_407(<= end_402 len_407) '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
" (format '\"ending offset index out of range [~a,~a]: \" start_401 len_407)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_415)"
"(lambda(acc_416 start_417 end_418 ipre_419 0-ok?_420)"
"(let-values(((rx_421)"
"(if 0-ok?_420"
" orig-rx_408"
"(no-empty-edge-matches"
" orig-rx_408"
"(add1(bytes-length ipre_419))))))"
"(if(if '#f(input-port? string_405) '#f)"
"(let-values(((__422)"
"(if(positive? start_417)"
"(let-values()"
"(let-values(((s_423)(make-bytes '4096)))"
"((letrec-values(((loop_424)"
"(lambda(n_425)"
"(if(= n_425 start_417)"
"(void)"
"(let-values()"
"(let-values(((m_426)"
"(read-bytes-avail!"
" s_423"
" string_405"
" '0"
"(min"
"(-"
" start_417"
" n_425)"
" '4096))))"
"(if(eof-object?"
" m_426)"
"(void)"
"(let-values()"
"(loop_424"
"(+"
" n_425"
" m_426))))))))))"
" loop_424)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_427)(if '#f '#f '0)))"
"(let-values(((spitout_428)"
"(if '#f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_429"
" start_430"
" end_431"
" flush?_432"
" breakable?_433)"
"(let-values(((c_434)"
"(- end_431 start_430)))"
"(begin"
"(set! discarded/leftovers_427"
"(+ c_434 discarded/leftovers_427))"
" c_434)))"
" void))))"
"(let-values(((end_435)"
"(if end_418(- end_418 start_417) '#f)))"
"(let-values(((ms_436 ipre_437)"
"(regexp-match/end"
" rx_421"
" string_405"
" '0"
" end_435"
" spitout_428"
" ipre_419"
" max-lookbehind_409)))"
"(let-values(((m_438)(if ms_436(car ms_436) '#f)))"
"(let-values(((discarded/leftovers_439)"
"(if '#f"
"(get-output-bytes spitout_428)"
" discarded/leftovers_427)))"
"(let-values(((skipped_440)"
"(if '#f"
"(bstring-length"
" discarded/leftovers_439)"
" discarded/leftovers_439)))"
"(let-values(((got_441)"
"(if m_438"
"(bstring-length m_438)"
" '#f)))"
"(let-values(((end_442)"
"(if end_435"
"(if m_438"
"(-"
" end_435"
" skipped_440"
" got_441)"
" '#f)"
" '#f)))"
"(if m_438"
"(let-values(((0-ok?_443)"
"(not(zero? got_441))))"
"(loop_415"
"('#f"
" discarded/leftovers_439"
" ms_436"
" acc_416)"
" '0"
" end_442"
" ipre_437"
" 0-ok?_443))"
"('#f"
" acc_416"
" discarded/leftovers_439))))))))))))"
"(let-values(((m_444 ipre_445)"
"(if '#t"
"(regexp-match-peek-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" '#f"
" ipre_419"
" max-lookbehind_409)"
"(regexp-match-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" '#f"
" ipre_419"
" max-lookbehind_409))))"
"(if(not m_444)"
"((lambda(acc_446 start_447 end_448) acc_446)"
" acc_416"
" start_417"
" end_418)"
"(let-values(((mstart_449)(caar m_444)))"
"(let-values(((mend_450)(cdar m_444)))"
"(let-values(((0-ok?_451)"
"(not(= mstart_449 mend_450))))"
"(if(if '#f(input-port? string_405) '#f)"
"('#f"
"(lambda(acc_452 new-start_453 new-end_454)"
"(loop_415"
" acc_452"
" new-start_453"
" new-end_454"
" ipre_445"
" 0-ok?_451))"
" acc_416"
" start_417"
" end_418"
" m_444)"
"(loop_415"
"((lambda(start_455 ms_456 acc_457)"
"(cons(car ms_456) acc_457))"
" start_417"
" m_444"
" acc_416)"
" mend_450"
" end_418"
" ipre_445"
" 0-ok?_451))))))))))))"
" loop_415)"
" '()"
" start_401"
" end_402"
" ipre_403"
" '#t)))))))"
"(let-values(((string_458)"
"(if(path? string_400)"
"(if(let-values(((or-part_459)(string? pattern_399)))"
"(if or-part_459 or-part_459(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_460)"
"(if(string? string_458)"
"(let-values()(string-length string_458))"
"(if(bytes? string_458)"
"(let-values()(bytes-length string_458))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_461)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_462)(regexp-max-lookbehind orig-rx_461)))"
"(begin"
"(if '#t"
"(if(input-port? string_458)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-match-peek-positions* '\"input-port?\" string_458)))"
"(if(let-values(((or-part_463) len_460))"
"(if or-part_463 or-part_463(input-port? string_458)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
" '\"(or/c string? bytes? path? input-port?)\""
" string_458))))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 '0) '#f) '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
" '\"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_464)(not end_402)))"
"(if or-part_464"
" or-part_464"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 '0) '#f) '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-match-peek-positions* '\"bytes?\" ipre_403)))"
"(if(let-values(((or-part_465)(input-port? string_458)))"
"(if or-part_465 or-part_465(if len_460(<= start_401 len_460) '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
" (format '\"starting offset index out of range [0,~a]: \" len_460)"
" start_401)))"
"(if(let-values(((or-part_466)(not end_402)))"
"(if or-part_466"
" or-part_466"
"(if(<= start_401 end_402)"
"(let-values(((or-part_467)(input-port? string_458)))"
"(if or-part_467 or-part_467(if len_460(<= end_402 len_460) '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
" (format '\"ending offset index out of range [~a,~a]: \" start_401 len_460)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_468)"
"(lambda(acc_469 start_470 end_471 ipre_472 0-ok?_473)"
"(let-values(((rx_474)"
"(if 0-ok?_473"
" orig-rx_461"
"(no-empty-edge-matches"
" orig-rx_461"
"(add1(bytes-length ipre_472))))))"
"(if(if '#f(input-port? string_458) '#f)"
"(let-values(((__475)"
"(if(positive? start_470)"
"(let-values()"
"(let-values(((s_476)(make-bytes '4096)))"
"((letrec-values(((loop_477)"
"(lambda(n_478)"
"(if(= n_478 start_470)"
"(void)"
"(let-values()"
"(let-values(((m_479)"
"(read-bytes-avail!"
" s_476"
" string_458"
" '0"
"(min"
"(-"
" start_470"
" n_478)"
" '4096))))"
"(if(eof-object?"
" m_479)"
"(void)"
"(let-values()"
"(loop_477"
"(+"
" n_478"
" m_479))))))))))"
" loop_477)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_480)(if '#f '#f '0)))"
"(let-values(((spitout_481)"
"(if '#f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_482"
" start_483"
" end_484"
" flush?_485"
" breakable?_486)"
"(let-values(((c_487)"
"(- end_484 start_483)))"
"(begin"
"(set! discarded/leftovers_480"
"(+ c_487 discarded/leftovers_480))"
" c_487)))"
" void))))"
"(let-values(((end_488)"
"(if end_471(- end_471 start_470) '#f)))"
"(let-values(((ms_489 ipre_490)"
"(regexp-match/end"
" rx_474"
" string_458"
" '0"
" end_488"
" spitout_481"
" ipre_472"
" max-lookbehind_462)))"
"(let-values(((m_491)(if ms_489(car ms_489) '#f)))"
"(let-values(((discarded/leftovers_492)"
"(if '#f"
"(get-output-bytes spitout_481)"
" discarded/leftovers_480)))"
"(let-values(((skipped_493)"
"(if '#f"
"(bstring-length"
" discarded/leftovers_492)"
" discarded/leftovers_492)))"
"(let-values(((got_494)"
"(if m_491"
"(bstring-length m_491)"
" '#f)))"
"(let-values(((end_495)"
"(if end_488"
"(if m_491"
"(-"
" end_488"
" skipped_493"
" got_494)"
" '#f)"
" '#f)))"
"(if m_491"
"(let-values(((0-ok?_496)"
"(not(zero? got_494))))"
"(loop_468"
"('#f"
" discarded/leftovers_492"
" ms_489"
" acc_469)"
" '0"
" end_495"
" ipre_490"
" 0-ok?_496))"
"('#f"
" acc_469"
" discarded/leftovers_492))))))))))))"
"(let-values(((m_497 ipre_498)"
"(if '#t"
"(regexp-match-peek-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" '#f"
" ipre_472"
" max-lookbehind_462)"
"(regexp-match-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" '#f"
" ipre_472"
" max-lookbehind_462))))"
"(if(not m_497)"
"((lambda(acc_499 start_500 end_501) acc_499)"
" acc_469"
" start_470"
" end_471)"
"(let-values(((mstart_502)(caar m_497)))"
"(let-values(((mend_503)(cdar m_497)))"
"(let-values(((0-ok?_504)"
"(not(= mstart_502 mend_503))))"
"(if(if '#f(input-port? string_458) '#f)"
"('#f"
"(lambda(acc_505 new-start_506 new-end_507)"
"(loop_468"
" acc_505"
" new-start_506"
" new-end_507"
" ipre_498"
" 0-ok?_504))"
" acc_469"
" start_470"
" end_471"
" m_497)"
"(loop_468"
"((lambda(start_508 ms_509 acc_510)"
"(cons(match-select_404 ms_509) acc_510))"
" start_470"
" m_497"
" acc_469)"
" mend_503"
" end_471"
" ipre_498"
" 0-ok?_504))))))))))))"
" loop_468)"
" '()"
" start_401"
" end_402"
" ipre_403"
" '#t))))))))))))))))))"
"(define-values"
"(unpack47.1)"
"(lambda(given-kws_511"
" given-args_512"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)"
"(let-values(((match-select37_521)(pair? given-kws_511)))"
"(let-values(((match-select36_522)(if match-select37_521(car given-args_512)(void))))"
"(regexp-match-peek-positions*46.1"
" match-select36_522"
" match-select37_521"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)))))"
"(define-values"
"(regexp-match-peek-positions*48.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_523 given-argc_524)"
"(if(if(>= given-argc_524 '4)(<= given-argc_524 '7) '#f)"
"(let-values(((l1_525) given-kws_523))"
"(let-values(((l1_526)(if(null? l1_525) l1_525(if(eq?(car l1_525) '#:match-select)(cdr l1_525) l1_525))))"
"(null? l1_526)))"
" '#f))"
"(case-lambda"
"((given-kws_527 given-args_528 pattern_529 string_530)"
"(unpack47.1 given-kws_527 given-args_528 pattern_529 string_530 '#f '#f '#f '#f '#f '#f))"
"((given-kws_531 given-args_532 pattern_533 string_534 start_535 end_536 ipre40_537)"
"(unpack47.1 given-kws_531 given-args_532 pattern_533 string_534 start_535 end_536 ipre40_537 '#t '#t '#t))"
"((given-kws_538 given-args_539 pattern_540 string_541 start_542 end39_543)"
"(unpack47.1 given-kws_538 given-args_539 pattern_540 string_541 start_542 end39_543 '#f '#t '#t '#f))"
"((given-kws_544 given-args_545 pattern_546 string_547 start38_548)"
"(unpack47.1 given-kws_544 given-args_545 pattern_546 string_547 start38_548 '#f '#f '#t '#f '#f)))"
" null"
" '(#:match-select)"
"(let-values(((regexp-match-peek-positions*_549)"
"(case-lambda"
"((pattern_550 string_551)(unpack47.1 null null pattern_550 string_551 '#f '#f '#f '#f '#f '#f))"
"((pattern_552 string_553 start_554 end_555 ipre40_556)"
"(unpack47.1 null null pattern_552 string_553 start_554 end_555 ipre40_556 '#t '#t '#t))"
"((pattern_557 string_558 start_559 end39_560)"
"(unpack47.1 null null pattern_557 string_558 start_559 end39_560 '#f '#t '#t '#f))"
"((pattern_561 string_562 start38_563)"
"(unpack47.1 null null pattern_561 string_562 start38_563 '#f '#f '#t '#f '#f)))))"
" regexp-match-peek-positions*_549)))"
"(define-values"
"(get-buf+sub)"
"(lambda(string_564 pattern_565)"
"(let-values(((buf_566)"
"(if(if(string? string_564)"
"(let-values(((or-part_567)(byte-regexp? pattern_565)))"
"(if or-part_567 or-part_567(bytes? pattern_565)))"
" '#f)"
"(string->bytes/utf-8 string_564(char->integer '#\\?))"
" string_564)))"
"(values"
" buf_566"
"(if(let-values(((or-part_568)(bytes? buf_566)))"
"(if or-part_568"
" or-part_568"
"(if(path? string_564)"
"(let-values(((or-part_569)(bytes? pattern_565)))"
"(if or-part_569 or-part_569(byte-regexp? pattern_565)))"
" '#f)))"
" subbytes"
" substring)))))"
"(define-values"
"(regexp-split)"
"(let-values(((regexp-split57_570)"
"(lambda(pattern55_571 string56_572 start49_573 end50_574 ipre51_575 start52_576 end53_577 ipre54_578)"
"(let-values(((pattern_579) pattern55_571))"
"(let-values(((string_580) string56_572))"
"(let-values(((start_581)(if start52_576 start49_573 '0)))"
"(let-values(((end_582)(if end53_577 end50_574 '#f)))"
" (let-values (((ipre_583) (if ipre54_578 ipre51_575 '#\"\")))"
"(let-values()"
"(let-values(((buf_584 sub_585)(get-buf+sub string_580 pattern_579)))"
"(let-values(((buf_586)"
"(if(path? buf_584)"
"(if(let-values(((or-part_587)(string? pattern_579)))"
"(if or-part_587 or-part_587(regexp? pattern_579)))"
"(path->string buf_584)"
"(path->bytes buf_584))"
" buf_584)))"
"(let-values(((len_588)"
"(if(string? buf_586)"
"(let-values()(string-length buf_586))"
"(if(bytes? buf_586)"
"(let-values()(bytes-length buf_586))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_589)"
"(if(bytes? pattern_579)"
"(let-values()(byte-regexp pattern_579))"
"(if(string? pattern_579)"
"(let-values()(regexp pattern_579))"
"(if(regexp? pattern_579)"
"(let-values() pattern_579)"
"(if(byte-regexp? pattern_579)"
"(let-values() pattern_579)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_579))))))))"
"(let-values(((max-lookbehind_590)(regexp-max-lookbehind orig-rx_589)))"
"(begin"
"(if '#f"
"(if(input-port? buf_586)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-split '\"input-port?\" buf_586)))"
"(if(let-values(((or-part_591) len_588))"
"(if or-part_591 or-part_591(input-port? buf_586)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
" '\"(or/c string? bytes? path? input-port?)\""
" buf_586))))"
"(if(if(number? start_581)"
"(if(exact? start_581)"
"(if(integer? start_581)(>= start_581 '0) '#f)"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
" '\"exact-nonnegative-integer?\""
" start_581)))"
"(if(let-values(((or-part_592)(not end_582)))"
"(if or-part_592"
" or-part_592"
"(if(number? end_582)"
"(if(exact? end_582)"
"(if(integer? end_582)(>= end_582 '0) '#f)"
" '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_582)))"
"(if(bytes? ipre_583)"
"(void)"
" (let-values () (raise-argument-error 'regexp-split '\"bytes?\" ipre_583)))"
"(if(let-values(((or-part_593)(input-port? buf_586)))"
"(if or-part_593 or-part_593(if len_588(<= start_581 len_588) '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
" (format '\"starting offset index out of range [0,~a]: \" len_588)"
" start_581)))"
"(if(let-values(((or-part_594)(not end_582)))"
"(if or-part_594"
" or-part_594"
"(if(<= start_581 end_582)"
"(let-values(((or-part_595)(input-port? buf_586)))"
"(if or-part_595"
" or-part_595"
"(if len_588(<= end_582 len_588) '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
" (format '\"ending offset index out of range [~a,~a]: \" start_581 len_588)"
" end_582)))"
"(reverse"
"((letrec-values(((loop_596)"
"(lambda(acc_597 start_598 end_599 ipre_600 0-ok?_601)"
"(let-values(((rx_602)"
"(if 0-ok?_601"
" orig-rx_589"
"(no-empty-edge-matches"
" orig-rx_589"
"(add1(bytes-length ipre_600))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons leftovers acc))"
"(input-port? buf_586)"
" '#f)"
"(let-values(((__606)"
"(if(positive? start_598)"
"(let-values()"
"(let-values(((s_607)"
"(make-bytes '4096)))"
"((letrec-values(((loop_608)"
"(lambda(n_609)"
"(if(="
" n_609"
" start_598)"
"(void)"
"(let-values()"
"(let-values(((m_610)"
"(read-bytes-avail!"
" s_607"
" buf_586"
" '0"
"(min"
"(-"
" start_598"
" n_609)"
" '4096))))"
"(if(eof-object?"
" m_610)"
"(void)"
"(let-values()"
"(loop_608"
"(+"
" n_609"
" m_610))))))))))"
" loop_608)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_611)"
"(if '#t '#f '0)))"
"(let-values(((spitout_612)"
"(if '#t"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_613"
" start_614"
" end_615"
" flush?_616"
" breakable?_617)"
"(let-values(((c_618)"
"(-"
" end_615"
" start_614)))"
"(begin"
"(set! discarded/leftovers_611"
"(+"
" c_618"
" discarded/leftovers_611))"
" c_618)))"
" void))))"
"(let-values(((end_619)"
"(if end_599"
"(- end_599 start_598)"
" '#f)))"
"(let-values(((ms_620 ipre_621)"
"(regexp-match/end"
" rx_602"
" buf_586"
" '0"
" end_619"
" spitout_612"
" ipre_600"
" max-lookbehind_590)))"
"(let-values(((m_622)"
"(if ms_620"
"(car ms_620)"
" '#f)))"
"(let-values(((discarded/leftovers_623)"
"(if '#t"
"(get-output-bytes"
" spitout_612)"
" discarded/leftovers_611)))"
"(let-values(((skipped_624)"
"(if '#t"
"(bstring-length"
" discarded/leftovers_623)"
" discarded/leftovers_623)))"
"(let-values(((got_625)"
"(if m_622"
"(bstring-length"
" m_622)"
" '#f)))"
"(let-values(((end_626)"
"(if end_619"
"(if m_622"
"(-"
" end_619"
" skipped_624"
" got_625)"
" '#f)"
" '#f)))"
"(if m_622"
"(let-values(((0-ok?_627)"
"(not"
"(zero?"
" got_625))))"
"(loop_596"
"((lambda(leftovers_628"
" ms_629"
" acc_630)"
"(cons"
" leftovers_628"
" acc_630))"
" discarded/leftovers_623"
" ms_620"
" acc_597)"
" '0"
" end_626"
" ipre_621"
" 0-ok?_627))"
"((lambda(acc_631 leftover_632)"
"(if leftover_632"
"(cons"
" leftover_632"
" acc_631)"
" acc_631))"
" acc_597"
" discarded/leftovers_623))))))))))))"
"(let-values(((m_633 ipre_634)"
"(if '#f"
"(regexp-match-peek-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" '#f"
" ipre_600"
" max-lookbehind_590)"
"(regexp-match-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" '#f"
" ipre_600"
" max-lookbehind_590))))"
"(if(not m_633)"
"((lambda(acc_635 start_636 end_637)"
"(cons"
"(if end_637"
"(sub_585 buf_586 start_636 end_637)"
"(sub_585 buf_586 start_636))"
" acc_635))"
" acc_597"
" start_598"
" end_599)"
"(let-values(((mstart_638)(caar m_633)))"
"(let-values(((mend_639)(cdar m_633)))"
"(let-values(((0-ok?_640)"
"(not(= mstart_638 mend_639))))"
"(if(if '#f(input-port? buf_586) '#f)"
"('#f"
"(lambda(acc_641"
" new-start_642"
" new-end_643)"
"(loop_596"
" acc_641"
" new-start_642"
" new-end_643"
" ipre_634"
" 0-ok?_640))"
" acc_597"
" start_598"
" end_599"
" m_633)"
"(loop_596"
"((lambda(start_644 ms_645 acc_646)"
"(cons"
"(sub_585"
" buf_586"
" start_644"
"(caar ms_645))"
" acc_646))"
" start_598"
" m_633"
" acc_597)"
" mend_639"
" end_599"
" ipre_634"
" 0-ok?_640))))))))))))"
" loop_596)"
" '()"
" start_581"
" end_582"
" ipre_583"
" '#t)))))))))))))))))"
"(case-lambda"
"((pattern_647 string_648)(regexp-split57_570 pattern_647 string_648 '#f '#f '#f '#f '#f '#f))"
"((pattern_649 string_650 start_651 end_652 ipre51_653)"
"(regexp-split57_570 pattern_649 string_650 start_651 end_652 ipre51_653 '#t '#t '#t))"
"((pattern_654 string_655 start_656 end50_657)"
"(regexp-split57_570 pattern_654 string_655 start_656 end50_657 '#f '#t '#t '#f))"
"((pattern_658 string_659 start49_660)"
"(regexp-split57_570 pattern_658 string_659 start49_660 '#f '#f '#t '#f '#f)))))"
"(define-values"
"(-regexp-replace*)"
"(let-values(((regexp-replace*_661)"
"(let-values(((core83_662)"
"(lambda(pattern80_663"
" string81_664"
" orig-replacement82_665"
" start74_666"
" end75_667"
" ipre76_668"
" start77_669"
" end78_670"
" ipre79_671)"
"(let-values(((pattern_672) pattern80_663))"
"(let-values(((string_673) string81_664))"
"(let-values(((orig-replacement_674) orig-replacement82_665))"
"(let-values(((start_675)(if start77_669 start74_666 '0)))"
"(let-values(((end_676)(if end78_670 end75_667 '#f)))"
" (let-values (((ipre_677) (if ipre79_671 ipre76_668 '#\"\")))"
"(let-values()"
"(let-values(((buf_678 sub_679)(get-buf+sub string_673 pattern_672)))"
"(let-values(((needs-string?_680)"
"(if(let-values(((or-part_686)(string? pattern_672)))"
"(if or-part_686 or-part_686(regexp? pattern_672)))"
"(string? string_673)"
" '#f)))"
"(let-values(((replacement_681)"
"(if(if(not needs-string?_680)"
"(string? orig-replacement_674)"
" '#f)"
"(string->bytes/utf-8 orig-replacement_674)"
" orig-replacement_674)))"
"(let-values(((check_682)"
"(lambda(proc_687 args_688)"
"(let-values(((v_689)(apply proc_687 args_688)))"
"(begin"
"(if(if needs-string?_680"
"(string? v_689)"
"(bytes? v_689))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" '|regexp-replace*(calling given filter procedure)|"
"(if needs-string?_680"
" '\"expected a string result: \""
" '\"expected a byte string result: \")"
" v_689)))"
" v_689)))))"
"(let-values(((need-replac?_683)"
"(if(not(procedure? replacement_681))"
" (regexp-match? '#rx#\"[\\\\&]\" replacement_681)"
" '#f)))"
"(let-values(((replac_684)"
"(lambda(ms_690 str_691)"
"(if need-replac?_683"
"((if(string? str_691)"
" bytes->string/utf-8"
" values)"
"(apply"
" bytes-append"
"(let-values(((str_692)"
"(if(string? str_691)"
"(string->bytes/utf-8"
" str_691)"
" str_691))"
"((get-match_693)"
"(lambda(n_694)"
"(if(<"
" n_694"
"(length ms_690))"
"(let-values(((p_695)"
"(list-ref"
" ms_690"
" n_694)))"
"(let-values(((s_696)"
"(if(pair?"
" p_695)"
"(sub_679"
" buf_678"
"(car"
" p_695)"
"(cdr"
" p_695))"
" p_695)))"
"(if(string? s_696)"
"(string->bytes/utf-8"
" s_696)"
" s_696)))"
" '#\"\"))))"
"((letrec-values(((loop_697)"
"(lambda(pos_698)"
"(let-values(((m_699)"
"(regexp-match-positions"
" '#rx#\"[\\\\&]\""
" str_692"
" pos_698)))"
"(if m_699"
"(cons"
"(subbytes"
" str_692"
" pos_698"
"(caar m_699))"
"(if(equal?"
"(char->integer"
" '#\\&)"
"(bytes-ref"
" str_692"
"(caar"
" m_699)))"
"(let-values()"
"(cons"
"(get-match_693"
" '0)"
"(loop_697"
"(cdar"
" m_699))))"
"(if(="
"(cdar"
" m_699)"
"(bytes-length"
" str_692))"
"(let-values()"
"(list"
"(get-match_693"
" '0)))"
"(let-values(((c75002_700)"
"(let-values(((next_701)"
"(bytes-ref"
" str_692"
"(cdar"
" m_699))))"
"(let-values(((or-part_702)"
"(if(equal?"
"(char->integer"
" '#\\&)"
" next_701)"
" '#\"&\""
" '#f)))"
"(if or-part_702"
" or-part_702"
"(let-values(((or-part_703)"
"(if(equal?"
"(char->integer"
" '#\\\\)"
" next_701)"
" '#\"\\\\\""
" '#f)))"
"(if or-part_703"
" or-part_703"
"(if(equal?"
"(char->integer"
" '#\\$)"
" next_701)"
" '#\"\""
" '#f))))))))"
"(if c75002_700"
"((lambda(s_704)"
"(cons"
" s_704"
"(loop_697"
"(add1"
"(cdar"
" m_699)))))"
" c75002_700)"
"(let-values()"
"(let-values(((n_705)"
"(regexp-match"
" '#rx#\"^[0-9]+\""
" str_692"
"(cdar"
" m_699))))"
"(if n_705"
"(cons"
"(get-match_693"
"(string->number"
"(bytes->string/utf-8"
"(car"
" n_705))))"
"(loop_697"
"(+"
"(cdar"
" m_699)"
"(bytes-length"
"(car"
" n_705)))))"
"(cons"
"(get-match_693"
" '0)"
"(loop_697"
"(cdar"
" m_699)))))))))))"
"(list"
"(subbytes"
" str_692"
" pos_698)))))))"
" loop_697)"
" '0))))"
" str_691))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_706)"
"(string? pattern_672)))"
"(if or-part_706"
" or-part_706"
"(let-values(((or-part_707)"
"(bytes? pattern_672)))"
"(if or-part_707"
" or-part_707"
"(let-values(((or-part_708)"
"(regexp?"
" pattern_672)))"
"(if or-part_708"
" or-part_708"
"(byte-regexp?"
" pattern_672)))))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_709)"
"(string? string_673)))"
"(if or-part_709"
" or-part_709"
"(bytes? string_673)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
" '\"(or/c string? bytes?)\""
" string_673)))"
"(if(let-values(((or-part_710)"
"(string?"
" replacement_681)))"
"(if or-part_710"
" or-part_710"
"(let-values(((or-part_711)"
"(bytes?"
" replacement_681)))"
"(if or-part_711"
" or-part_711"
"(procedure?"
" replacement_681)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
" '\"(or/c string? bytes? procedure?)\""
" replacement_681)))"
"(if(if needs-string?_680"
"(bytes? replacement_681)"
" '#f)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-replace*"
" '\"cannot replace a string with a byte string: \""
" replacement_681))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((r_685)"
"(let-values(((buf_712)"
"(if(path? buf_678)"
"(if(let-values(((or-part_713)"
"(string?"
" pattern_672)))"
"(if or-part_713"
" or-part_713"
"(regexp?"
" pattern_672)))"
"(path->string buf_678)"
"(path->bytes buf_678))"
" buf_678)))"
"(let-values(((len_714)"
"(if(string? buf_712)"
"(let-values()"
"(string-length buf_712))"
"(if(bytes? buf_712)"
"(let-values()"
"(bytes-length buf_712))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_715)"
"(if(bytes? pattern_672)"
"(let-values()"
"(byte-regexp"
" pattern_672))"
"(if(string? pattern_672)"
"(let-values()"
"(regexp pattern_672))"
"(if(regexp?"
" pattern_672)"
"(let-values()"
" pattern_672)"
"(if(byte-regexp?"
" pattern_672)"
"(let-values()"
" pattern_672)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_672))))))))"
"(let-values(((max-lookbehind_716)"
"(regexp-max-lookbehind"
" orig-rx_715)))"
"(begin"
"(if '#f"
"(if(input-port? buf_712)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
" '\"input-port?\""
" buf_712)))"
"(if(let-values(((or-part_717)"
" len_714))"
"(if or-part_717"
" or-part_717"
"(input-port? buf_712)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
" '\"(or/c string? bytes? path? input-port?)\""
" buf_712))))"
"(if(if(number? start_675)"
"(if(exact? start_675)"
"(if(integer? start_675)"
"(>= start_675 '0)"
" '#f)"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
" '\"exact-nonnegative-integer?\""
" start_675)))"
"(if(let-values(((or-part_718)"
"(not end_676)))"
"(if or-part_718"
" or-part_718"
"(if(number? end_676)"
"(if(exact? end_676)"
"(if(integer? end_676)"
"(>= end_676 '0)"
" '#f)"
" '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_676)))"
"(if(bytes? ipre_677)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
" '\"bytes?\""
" ipre_677)))"
"(if(let-values(((or-part_719)"
"(input-port?"
" buf_712)))"
"(if or-part_719"
" or-part_719"
"(if len_714"
"(<= start_675 len_714)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-replace*"
"(format"
" '\"starting offset index out of range [0,~a]: \""
" len_714)"
" start_675)))"
"(if(let-values(((or-part_720)"
"(not end_676)))"
"(if or-part_720"
" or-part_720"
"(if(<= start_675 end_676)"
"(let-values(((or-part_721)"
"(input-port?"
" buf_712)))"
"(if or-part_721"
" or-part_721"
"(if len_714"
"(<= end_676 len_714)"
" '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-replace*"
"(format"
" '\"ending offset index out of range [~a,~a]: \""
" start_675"
" len_714)"
" end_676)))"
"(reverse"
"((letrec-values(((loop_722)"
"(lambda(acc_723"
" start_724"
" end_725"
" ipre_726"
" 0-ok?_727)"
"(let-values(((rx_728)"
"(if 0-ok?_727"
" orig-rx_715"
"(no-empty-edge-matches"
" orig-rx_715"
"(add1"
"(bytes-length"
" ipre_726))))))"
"(if(if '#f"
"(input-port?"
" buf_712)"
" '#f)"
"(let-values(((__729)"
"(if(positive?"
" start_724)"
"(let-values()"
"(let-values(((s_730)"
"(make-bytes"
" '4096)))"
"((letrec-values(((loop_731)"
"(lambda(n_732)"
"(if(="
" n_732"
" start_724)"
"(void)"
"(let-values()"
"(let-values(((m_733)"
"(read-bytes-avail!"
" s_730"
" buf_712"
" '0"
"(min"
"(-"
" start_724"
" n_732)"
" '4096))))"
"(if(eof-object?"
" m_733)"
"(void)"
"(let-values()"
"(loop_731"
"(+"
" n_732"
" m_733))))))))))"
" loop_731)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_734)"
"(if '#t"
" '#f"
" '0)))"
"(let-values(((spitout_735)"
"(if '#t"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_736"
" start_737"
" end_738"
" flush?_739"
" breakable?_740)"
"(let-values(((c_741)"
"(-"
" end_738"
" start_737)))"
"(begin"
"(set! discarded/leftovers_734"
"(+"
" c_741"
" discarded/leftovers_734))"
" c_741)))"
" void))))"
"(let-values(((end_742)"
"(if end_725"
"(-"
" end_725"
" start_724)"
" '#f)))"
"(let-values(((ms_743"
" ipre_744)"
"(regexp-match/end"
" rx_728"
" buf_712"
" '0"
" end_742"
" spitout_735"
" ipre_726"
" max-lookbehind_716)))"
"(let-values(((m_745)"
"(if ms_743"
"(car"
" ms_743)"
" '#f)))"
"(let-values(((discarded/leftovers_746)"
"(if '#t"
"(get-output-bytes"
" spitout_735)"
" discarded/leftovers_734)))"
"(let-values(((skipped_747)"
"(if '#t"
"(bstring-length"
" discarded/leftovers_746)"
" discarded/leftovers_746)))"
"(let-values(((got_748)"
"(if m_745"
"(bstring-length"
" m_745)"
" '#f)))"
"(let-values(((end_749)"
"(if end_742"
"(if m_745"
"(-"
" end_742"
" skipped_747"
" got_748)"
" '#f)"
" '#f)))"
"(if m_745"
"(let-values(((0-ok?_750)"
"(not"
"(zero?"
" got_748))))"
"(loop_722"
"('#f"
" discarded/leftovers_746"
" ms_743"
" acc_723)"
" '0"
" end_749"
" ipre_744"
" 0-ok?_750))"
"('#f"
" acc_723"
" discarded/leftovers_746))))))))))))"
"(let-values(((m_751"
" ipre_752)"
"(if '#f"
"(regexp-match-peek-positions/end"
" rx_728"
" buf_712"
" start_724"
" end_725"
" '#f"
" ipre_726"
" max-lookbehind_716)"
"(regexp-match-positions/end"
" rx_728"
" buf_712"
" start_724"
" end_725"
" '#f"
" ipre_726"
" max-lookbehind_716))))"
"(if(not"
" m_751)"
"((lambda(acc_753"
" start_754"
" end_755)"
"(cons"
"(if end_755"
"(sub_679"
" buf_712"
" start_754"
" end_755)"
"(sub_679"
" buf_712"
" start_754))"
" acc_753))"
" acc_723"
" start_724"
" end_725)"
"(let-values(((mstart_756)"
"(caar"
" m_751)))"
"(let-values(((mend_757)"
"(cdar"
" m_751)))"
"(let-values(((0-ok?_758)"
"(not"
"(="
" mstart_756"
" mend_757))))"
"(if(if '#f"
"(input-port?"
" buf_712)"
" '#f)"
"('#f"
"(lambda(acc_759"
" new-start_760"
" new-end_761)"
"(loop_722"
" acc_759"
" new-start_760"
" new-end_761"
" ipre_752"
" 0-ok?_758))"
" acc_723"
" start_724"
" end_725"
" m_751)"
"(loop_722"
"((lambda(start_762"
" ms_763"
" acc_764)"
"(list*"
"(if(procedure?"
" replacement_681)"
"(check_682"
" replacement_681"
"(alt-reverse"
"(let-values(((pos->vals_765"
" pos-next_766"
" init_767"
" pos-cont?_768"
" val-cont?_769"
" all-cont?_770)"
"(make-sequence"
" '(m)"
" ms_763)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_771)"
"(lambda(fold-var_772"
" pos_773)"
"(if(if pos-cont?_768"
"(pos-cont?_768"
" pos_773)"
" '#t)"
"(let-values(((m_774)"
"(pos->vals_765"
" pos_773)))"
"(if(if val-cont?_769"
"(val-cont?_769"
" m_774)"
" '#t)"
"(let-values(((fold-var_775)"
"(let-values(((fold-var_776)"
" fold-var_772))"
"(let-values(((fold-var_777)"
"(let-values()"
"(cons"
"(let-values()"
"(if m_774"
"(sub_679"
" buf_712"
"(car"
" m_774)"
"(cdr"
" m_774))"
" '#f))"
" fold-var_776))))"
"(values"
" fold-var_777)))))"
"(if(if all-cont?_770"
"(all-cont?_770"
" pos_773"
" m_774)"
" '#t)"
"(for-loop_771"
" fold-var_775"
"(pos-next_766"
" pos_773))"
" fold-var_775))"
" fold-var_772))"
" fold-var_772))))"
" for-loop_771)"
" null"
" init_767)))))"
"(replac_684"
" ms_763"
" replacement_681))"
"(sub_679"
" buf_712"
" start_762"
"(caar"
" ms_763))"
" acc_764))"
" start_724"
" m_751"
" acc_723)"
" mend_757"
" end_725"
" ipre_752"
" 0-ok?_758))))))))))))"
" loop_722)"
" '()"
" start_675"
" end_676"
" ipre_677"
" '#t)))))))))"
"(apply"
"(if(bytes? buf_678) bytes-append string-append)"
"(if(if(= start_675 '0)(not end_676) '#f)"
"(let-values() r_685)"
"(if(not end_676)"
"(let-values()"
"(cons(sub_679 string_673 '0 start_675) r_685))"
"(let-values()"
"(list*"
"(sub_679 string_673 '0 start_675)"
"(qq-append"
" r_685"
"(list"
"(sub_679"
" string_673"
" end_676))))))))))))))))))))))))))"
"(case-lambda"
"((pattern_778 string_779 orig-replacement_780)"
"(core83_662 pattern_778 string_779 orig-replacement_780 '#f '#f '#f '#f '#f '#f))"
"((pattern_781 string_782 orig-replacement_783 start_784 end_785 ipre76_786)"
"(core83_662 pattern_781 string_782 orig-replacement_783 start_784 end_785 ipre76_786 '#t '#t '#t))"
"((pattern_787 string_788 orig-replacement_789 start_790 end75_791)"
"(core83_662 pattern_787 string_788 orig-replacement_789 start_790 end75_791 '#f '#t '#t '#f))"
"((pattern_792 string_793 orig-replacement_794 start74_795)"
"(core83_662 pattern_792 string_793 orig-replacement_794 start74_795 '#f '#f '#t '#f '#f))))))"
" regexp-replace*_661))"
"(define-values"
"(regexp-match*71.1)"
"(lambda(gap-select?60_796"
" gap-select?62_797"
" match-select59_798"
" match-select61_799"
" pattern69_800"
" string70_801"
" start63_802"
" end64_803"
" ipre65_804"
" start66_805"
" end67_806"
" ipre68_807)"
"(let-values(((pattern_808) pattern69_800))"
"(let-values(((string_809) string70_801))"
"(let-values(((start_810)(if start66_805 start63_802 '0)))"
"(let-values(((end_811)(if end67_806 end64_803 '#f)))"
" (let-values (((ipre_812) (if ipre68_807 ipre65_804 '#\"\")))"
"(let-values(((match-select_813)(if match-select61_799 match-select59_798 car)))"
"(let-values(((gap-select_814)(if gap-select?62_797 gap-select?60_796 '#f)))"
"(let-values()"
"(if(if(not match-select_813)(not gap-select_814) '#f)"
"(let-values()"
"(raise"
"(exn:fail:contract"
" '\"regexp-match*: one of `match-select' or `gap-select' must be non-#f\""
"(current-continuation-marks))))"
"(if(not match-select_813)"
"(let-values()(regexp-split pattern_808 string_809 start_810 end_811 ipre_812))"
"(if(not(procedure? match-select_813))"
" (let-values () (raise-argument-error 'regexp-match* '\"(or/c procedure? #f)\" match-select_813))"
"(if(not(eq? match-select_813 car))"
"(let-values()"
"(let-values(((buf_815 sub_816)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_817)"
"(if(path? buf_815)"
"(if(let-values(((or-part_818)(string? pattern_808)))"
"(if or-part_818 or-part_818(regexp? pattern_808)))"
"(path->string buf_815)"
"(path->bytes buf_815))"
" buf_815)))"
"(let-values(((len_819)"
"(if(string? buf_817)"
"(let-values()(string-length buf_817))"
"(if(bytes? buf_817)"
"(let-values()(bytes-length buf_817))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_820)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_821)(regexp-max-lookbehind orig-rx_820)))"
"(begin"
"(if '#f"
"(if(input-port? buf_817)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-explode '\"input-port?\" buf_817)))"
"(if(let-values(((or-part_822) len_819))"
"(if or-part_822 or-part_822(input-port? buf_817)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
" '\"(or/c string? bytes? path? input-port?)\""
" buf_817))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 '0) '#f)"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
" '\"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_823)(not end_811)))"
"(if or-part_823"
" or-part_823"
"(if(number? end_811)"
"(if(exact? end_811)"
"(if(integer? end_811)(>= end_811 '0) '#f)"
" '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
" (let-values () (raise-argument-error 'regexp-explode '\"bytes?\" ipre_812)))"
"(if(let-values(((or-part_824)(input-port? buf_817)))"
"(if or-part_824 or-part_824(if len_819(<= start_810 len_819) '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
" (format '\"starting offset index out of range [0,~a]: \" len_819)"
" start_810)))"
"(if(let-values(((or-part_825)(not end_811)))"
"(if or-part_825"
" or-part_825"
"(if(<= start_810 end_811)"
"(let-values(((or-part_826)(input-port? buf_817)))"
"(if or-part_826"
" or-part_826"
"(if len_819(<= end_811 len_819) '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
" (format '\"ending offset index out of range [~a,~a]: \" start_810 len_819)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_827)"
"(lambda(acc_828 start_829 end_830 ipre_831 0-ok?_832)"
"(let-values(((rx_833)"
"(if 0-ok?_832"
" orig-rx_820"
"(no-empty-edge-matches"
" orig-rx_820"
"(add1(bytes-length ipre_831))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app match-select ms)"
"(if gap-select"
"(#%app cons leftovers acc)"
" acc)))"
"(input-port? buf_817)"
" '#f)"
"(let-values(((__837)"
"(if(positive? start_829)"
"(let-values()"
"(let-values(((s_838)"
"(make-bytes '4096)))"
"((letrec-values(((loop_839)"
"(lambda(n_840)"
"(if(="
" n_840"
" start_829)"
"(void)"
"(let-values()"
"(let-values(((m_841)"
"(read-bytes-avail!"
" s_838"
" buf_817"
" '0"
"(min"
"(-"
" start_829"
" n_840)"
" '4096))))"
"(if(eof-object?"
" m_841)"
"(void)"
"(let-values()"
"(loop_839"
"(+"
" n_840"
" m_841))))))))))"
" loop_839)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_842)"
"(if gap-select_814 '#f '0)))"
"(let-values(((spitout_843)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_844"
" start_845"
" end_846"
" flush?_847"
" breakable?_848)"
"(let-values(((c_849)"
"(-"
" end_846"
" start_845)))"
"(begin"
"(set! discarded/leftovers_842"
"(+"
" c_849"
" discarded/leftovers_842))"
" c_849)))"
" void))))"
"(let-values(((end_850)"
"(if end_830"
"(- end_830 start_829)"
" '#f)))"
"(let-values(((ms_851 ipre_852)"
"(regexp-match/end"
" rx_833"
" buf_817"
" '0"
" end_850"
" spitout_843"
" ipre_831"
" max-lookbehind_821)))"
"(let-values(((m_853)"
"(if ms_851"
"(car ms_851)"
" '#f)))"
"(let-values(((discarded/leftovers_854)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_843)"
" discarded/leftovers_842)))"
"(let-values(((skipped_855)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_854)"
" discarded/leftovers_854)))"
"(let-values(((got_856)"
"(if m_853"
"(bstring-length"
" m_853)"
" '#f)))"
"(let-values(((end_857)"
"(if end_850"
"(if m_853"
"(-"
" end_850"
" skipped_855"
" got_856)"
" '#f)"
" '#f)))"
"(if m_853"
"(let-values(((0-ok?_858)"
"(not"
"(zero?"
" got_856))))"
"(loop_827"
"((lambda(leftovers_859"
" ms_860"
" acc_861)"
"(cons"
"(match-select_813"
" ms_860)"
"(if gap-select_814"
"(cons"
" leftovers_859"
" acc_861)"
" acc_861)))"
" discarded/leftovers_854"
" ms_851"
" acc_828)"
" '0"
" end_857"
" ipre_852"
" 0-ok?_858))"
"((lambda(acc_862 leftover_863)"
"(if(if gap-select_814"
" leftover_863"
" '#f)"
"(cons"
" leftover_863"
" acc_862)"
" acc_862))"
" acc_828"
" discarded/leftovers_854))))))))))))"
"(let-values(((m_864 ipre_865)"
"(if '#f"
"(regexp-match-peek-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" '#f"
" ipre_831"
" max-lookbehind_821)"
"(regexp-match-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" '#f"
" ipre_831"
" max-lookbehind_821))))"
"(if(not m_864)"
"((lambda(acc_866 start_867 end_868)"
"(if gap-select_814"
"(cons"
"(if end_868"
"(sub_816 buf_817 start_867 end_868)"
"(sub_816 buf_817 start_867))"
" acc_866)"
" acc_866))"
" acc_828"
" start_829"
" end_830)"
"(let-values(((mstart_869)(caar m_864)))"
"(let-values(((mend_870)(cdar m_864)))"
"(let-values(((0-ok?_871)"
"(not(= mstart_869 mend_870))))"
"(if(if '#f(input-port? buf_817) '#f)"
"('#f"
"(lambda(acc_872"
" new-start_873"
" new-end_874)"
"(loop_827"
" acc_872"
" new-start_873"
" new-end_874"
" ipre_865"
" 0-ok?_871))"
" acc_828"
" start_829"
" end_830"
" m_864)"
"(loop_827"
"((lambda(start_875 ms_876 acc_877)"
"(cons"
"(let-values(((s_878)"
"(match-select_813"
" ms_876)))"
"(if(not(pair? s_878))"
"(let-values() s_878)"
"(if(integer?(car s_878))"
"(let-values()"
"(sub_816"
" buf_817"
"(car s_878)"
"(cdr s_878)))"
"(let-values()"
"(map2"
"(lambda(m_879)"
"(if m_879"
"(sub_816"
" buf_817"
"(car m_879)"
"(cdr m_879))"
" '#f))"
" s_878)))))"
"(if gap-select_814"
"(cons"
"(sub_816"
" buf_817"
" start_875"
"(caar ms_876))"
" acc_877)"
" acc_877)))"
" start_829"
" m_864"
" acc_828)"
" mend_870"
" end_830"
" ipre_865"
" 0-ok?_871))))))))))))"
" loop_827)"
" '()"
" start_810"
" end_811"
" ipre_812"
" '#t)))))))))"
"(if gap-select_814"
"(let-values()"
"(let-values(((buf_880 sub_881)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_882)"
"(if(path? buf_880)"
"(if(let-values(((or-part_883)(string? pattern_808)))"
"(if or-part_883 or-part_883(regexp? pattern_808)))"
"(path->string buf_880)"
"(path->bytes buf_880))"
" buf_880)))"
"(let-values(((len_884)"
"(if(string? buf_882)"
"(let-values()(string-length buf_882))"
"(if(bytes? buf_882)"
"(let-values()(bytes-length buf_882))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_885)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_886)(regexp-max-lookbehind orig-rx_885)))"
"(begin"
"(if '#f"
"(if(input-port? buf_882)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-explode '\"input-port?\" buf_882)))"
"(if(let-values(((or-part_887) len_884))"
"(if or-part_887 or-part_887(input-port? buf_882)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
" '\"(or/c string? bytes? path? input-port?)\""
" buf_882))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 '0) '#f)"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
" '\"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_888)(not end_811)))"
"(if or-part_888"
" or-part_888"
"(if(number? end_811)"
"(if(exact? end_811)"
"(if(integer? end_811)(>= end_811 '0) '#f)"
" '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
" (let-values () (raise-argument-error 'regexp-explode '\"bytes?\" ipre_812)))"
"(if(let-values(((or-part_889)(input-port? buf_882)))"
"(if or-part_889 or-part_889(if len_884(<= start_810 len_884) '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
" (format '\"starting offset index out of range [0,~a]: \" len_884)"
" start_810)))"
"(if(let-values(((or-part_890)(not end_811)))"
"(if or-part_890"
" or-part_890"
"(if(<= start_810 end_811)"
"(let-values(((or-part_891)(input-port? buf_882)))"
"(if or-part_891"
" or-part_891"
"(if len_884(<= end_811 len_884) '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"(format"
" '\"ending offset index out of range [~a,~a]: \""
" start_810"
" len_884)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_892)"
"(lambda(acc_893 start_894 end_895 ipre_896 0-ok?_897)"
"(let-values(((rx_898)"
"(if 0-ok?_897"
" orig-rx_885"
"(no-empty-edge-matches"
" orig-rx_885"
"(add1(bytes-length ipre_896))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app car ms)"
"(#%app cons leftovers acc)))"
"(input-port? buf_882)"
" '#f)"
"(let-values(((__902)"
"(if(positive? start_894)"
"(let-values()"
"(let-values(((s_903)"
"(make-bytes"
" '4096)))"
"((letrec-values(((loop_904)"
"(lambda(n_905)"
"(if(="
" n_905"
" start_894)"
"(void)"
"(let-values()"
"(let-values(((m_906)"
"(read-bytes-avail!"
" s_903"
" buf_882"
" '0"
"(min"
"(-"
" start_894"
" n_905)"
" '4096))))"
"(if(eof-object?"
" m_906)"
"(void)"
"(let-values()"
"(loop_904"
"(+"
" n_905"
" m_906))))))))))"
" loop_904)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_907)"
"(if gap-select_814 '#f '0)))"
"(let-values(((spitout_908)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_909"
" start_910"
" end_911"
" flush?_912"
" breakable?_913)"
"(let-values(((c_914)"
"(-"
" end_911"
" start_910)))"
"(begin"
"(set! discarded/leftovers_907"
"(+"
" c_914"
" discarded/leftovers_907))"
" c_914)))"
" void))))"
"(let-values(((end_915)"
"(if end_895"
"(- end_895 start_894)"
" '#f)))"
"(let-values(((ms_916 ipre_917)"
"(regexp-match/end"
" rx_898"
" buf_882"
" '0"
" end_915"
" spitout_908"
" ipre_896"
" max-lookbehind_886)))"
"(let-values(((m_918)"
"(if ms_916"
"(car ms_916)"
" '#f)))"
"(let-values(((discarded/leftovers_919)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_908)"
" discarded/leftovers_907)))"
"(let-values(((skipped_920)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_919)"
" discarded/leftovers_919)))"
"(let-values(((got_921)"
"(if m_918"
"(bstring-length"
" m_918)"
" '#f)))"
"(let-values(((end_922)"
"(if end_915"
"(if m_918"
"(-"
" end_915"
" skipped_920"
" got_921)"
" '#f)"
" '#f)))"
"(if m_918"
"(let-values(((0-ok?_923)"
"(not"
"(zero?"
" got_921))))"
"(loop_892"
"((lambda(leftovers_924"
" ms_925"
" acc_926)"
"(cons"
"(car ms_925)"
"(cons"
" leftovers_924"
" acc_926)))"
" discarded/leftovers_919"
" ms_916"
" acc_893)"
" '0"
" end_922"
" ipre_917"
" 0-ok?_923))"
"((lambda(acc_927"
" leftover_928)"
"(if leftover_928"
"(cons"
" leftover_928"
" acc_927)"
" acc_927))"
" acc_893"
" discarded/leftovers_919))))))))))))"
"(let-values(((m_929 ipre_930)"
"(if '#f"
"(regexp-match-peek-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" '#f"
" ipre_896"
" max-lookbehind_886)"
"(regexp-match-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" '#f"
" ipre_896"
" max-lookbehind_886))))"
"(if(not m_929)"
"((lambda(acc_931 start_932 end_933)"
"(cons"
"(if end_933"
"(sub_881 buf_882 start_932 end_933)"
"(sub_881 buf_882 start_932))"
" acc_931))"
" acc_893"
" start_894"
" end_895)"
"(let-values(((mstart_934)(caar m_929)))"
"(let-values(((mend_935)(cdar m_929)))"
"(let-values(((0-ok?_936)"
"(not"
"(= mstart_934 mend_935))))"
"(if(if '#f(input-port? buf_882) '#f)"
"('#f"
"(lambda(acc_937"
" new-start_938"
" new-end_939)"
"(loop_892"
" acc_937"
" new-start_938"
" new-end_939"
" ipre_930"
" 0-ok?_936))"
" acc_893"
" start_894"
" end_895"
" m_929)"
"(loop_892"
"((lambda(start_940 ms_941 acc_942)"
"(cons"
"(sub_881"
" buf_882"
"(caar ms_941)"
"(cdar ms_941))"
"(cons"
"(sub_881"
" buf_882"
" start_940"
"(caar ms_941))"
" acc_942)))"
" start_894"
" m_929"
" acc_893)"
" mend_935"
" end_895"
" ipre_930"
" 0-ok?_936))))))))))))"
" loop_892)"
" '()"
" start_810"
" end_811"
" ipre_812"
" '#t)))))))))"
"(let-values()"
"(let-values(((buf_943 sub_944)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_945)"
"(if(path? buf_943)"
"(if(let-values(((or-part_946)(string? pattern_808)))"
"(if or-part_946 or-part_946(regexp? pattern_808)))"
"(path->string buf_943)"
"(path->bytes buf_943))"
" buf_943)))"
"(let-values(((len_947)"
"(if(string? buf_945)"
"(let-values()(string-length buf_945))"
"(if(bytes? buf_945)"
"(let-values()(bytes-length buf_945))"
"(let-values() '#f)))))"
"(let-values(((orig-rx_948)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
" '\"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_949)(regexp-max-lookbehind orig-rx_948)))"
"(begin"
"(if '#f"
"(if(input-port? buf_945)"
"(void)"
"(let-values()"
" (raise-argument-error 'regexp-match* '\"input-port?\" buf_945)))"
"(if(let-values(((or-part_950) len_947))"
"(if or-part_950 or-part_950(input-port? buf_945)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
" '\"(or/c string? bytes? path? input-port?)\""
" buf_945))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 '0) '#f)"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
" '\"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_951)(not end_811)))"
"(if or-part_951"
" or-part_951"
"(if(number? end_811)"
"(if(exact? end_811)"
"(if(integer? end_811)(>= end_811 '0) '#f)"
" '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
" '\"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
" (let-values () (raise-argument-error 'regexp-match* '\"bytes?\" ipre_812)))"
"(if(let-values(((or-part_952)(input-port? buf_945)))"
"(if or-part_952 or-part_952(if len_947(<= start_810 len_947) '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
" (format '\"starting offset index out of range [0,~a]: \" len_947)"
" start_810)))"
"(if(let-values(((or-part_953)(not end_811)))"
"(if or-part_953"
" or-part_953"
"(if(<= start_810 end_811)"
"(let-values(((or-part_954)(input-port? buf_945)))"
"(if or-part_954"
" or-part_954"
"(if len_947(<= end_811 len_947) '#f)))"
" '#f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"(format"
" '\"ending offset index out of range [~a,~a]: \""
" start_810"
" len_947)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_955)"
"(lambda(acc_956 start_957 end_958 ipre_959 0-ok?_960)"
"(let-values(((rx_961)"
"(if 0-ok?_960"
" orig-rx_948"
"(no-empty-edge-matches"
" orig-rx_948"
"(add1(bytes-length ipre_959))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons(#%app car ms) acc))"
"(input-port? buf_945)"
" '#f)"
"(let-values(((__965)"
"(if(positive? start_957)"
"(let-values()"
"(let-values(((s_966)"
"(make-bytes"
" '4096)))"
"((letrec-values(((loop_967)"
"(lambda(n_968)"
"(if(="
" n_968"
" start_957)"
"(void)"
"(let-values()"
"(let-values(((m_969)"
"(read-bytes-avail!"
" s_966"
" buf_945"
" '0"
"(min"
"(-"
" start_957"
" n_968)"
" '4096))))"
"(if(eof-object?"
" m_969)"
"(void)"
"(let-values()"
"(loop_967"
"(+"
" n_968"
" m_969))))))))))"
" loop_967)"
" '0)))"
"(void))))"
"(let-values(((discarded/leftovers_970)"
"(if '#f '#f '0)))"
"(let-values(((spitout_971)"
"(if '#f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_972"
" start_973"
" end_974"
" flush?_975"
" breakable?_976)"
"(let-values(((c_977)"
"(-"
" end_974"
" start_973)))"
"(begin"
"(set! discarded/leftovers_970"
"(+"
" c_977"
" discarded/leftovers_970))"
" c_977)))"
" void))))"
"(let-values(((end_978)"
"(if end_958"
"(- end_958 start_957)"
" '#f)))"
"(let-values(((ms_979 ipre_980)"
"(regexp-match/end"
" rx_961"
" buf_945"
" '0"
" end_978"
" spitout_971"
" ipre_959"
" max-lookbehind_949)))"
"(let-values(((m_981)"
"(if ms_979"
"(car ms_979)"
" '#f)))"
"(let-values(((discarded/leftovers_982)"
"(if '#f"
"(get-output-bytes"
" spitout_971)"
" discarded/leftovers_970)))"
"(let-values(((skipped_983)"
"(if '#f"
"(bstring-length"
" discarded/leftovers_982)"
" discarded/leftovers_982)))"
"(let-values(((got_984)"
"(if m_981"
"(bstring-length"
" m_981)"
" '#f)))"
"(let-values(((end_985)"
"(if end_978"
"(if m_981"
"(-"
" end_978"
" skipped_983"
" got_984)"
" '#f)"
" '#f)))"
"(if m_981"
"(let-values(((0-ok?_986)"
"(not"
"(zero?"
" got_984))))"
"(loop_955"
"((lambda(leftovers_987"
" ms_988"
" acc_989)"
"(cons"
"(car ms_988)"
" acc_989))"
" discarded/leftovers_982"
" ms_979"
" acc_956)"
" '0"
" end_985"
" ipre_980"
" 0-ok?_986))"
"((lambda(acc_990"
" leftover_991)"
" acc_990)"
" acc_956"
" discarded/leftovers_982))))))))))))"
"(let-values(((m_992 ipre_993)"
"(if '#f"
"(regexp-match-peek-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" '#f"
" ipre_959"
" max-lookbehind_949)"
"(regexp-match-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" '#f"
" ipre_959"
" max-lookbehind_949))))"
"(if(not m_992)"
"((lambda(acc_994 start_995 end_996) acc_994)"
" acc_956"
" start_957"
" end_958)"
"(let-values(((mstart_997)(caar m_992)))"
"(let-values(((mend_998)(cdar m_992)))"
"(let-values(((0-ok?_999)"
"(not"
"(= mstart_997 mend_998))))"
"(if(if '#f(input-port? buf_945) '#f)"
"('#f"
"(lambda(acc_1000"
" new-start_1001"
" new-end_1002)"
"(loop_955"
" acc_1000"
" new-start_1001"
" new-end_1002"
" ipre_993"
" 0-ok?_999))"
" acc_956"
" start_957"
" end_958"
" m_992)"
"(loop_955"
"((lambda(start_1003 ms_1004 acc_1005)"
"(cons"
"(sub_944"
" buf_945"
"(caar ms_1004)"
"(cdar ms_1004))"
" acc_1005))"
" start_957"
" m_992"
" acc_956)"
" mend_998"
" end_958"
" ipre_993"
" 0-ok?_999))))))))))))"
" loop_955)"
" '()"
" start_810"
" end_811"
" ipre_812"
" '#t))))))))))))))))))))))))"
"(define-values"
"(unpack72.1)"
"(lambda(given-kws_1006"
" given-args_1007"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)"
"(let-values(((gap-select?62_1016)(if(pair? given-kws_1006)(eq? '#:gap-select?(car given-kws_1006)) '#f)))"
"(let-values(((gap-select?60_1017)(if gap-select?62_1016(car given-args_1007)(void)))"
"((given-kws_1018)(if gap-select?62_1016(cdr given-kws_1006) given-kws_1006))"
"((given-args_1019)(if gap-select?62_1016(cdr given-args_1007) given-args_1007)))"
"(let-values(((match-select61_1020)(pair? given-kws_1018)))"
"(let-values(((match-select59_1021)(if match-select61_1020(car given-args_1019)(void))))"
"(regexp-match*71.1"
" gap-select?60_1017"
" gap-select?62_1016"
" match-select59_1021"
" match-select61_1020"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)))))))"
"(define-values"
"(regexp-match*73.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_1022 given-argc_1023)"
"(if(if(>= given-argc_1023 '4)(<= given-argc_1023 '7) '#f)"
"(let-values(((l1_1024) given-kws_1022))"
"(let-values(((l1_1025)"
"(if(null? l1_1024) l1_1024(if(eq?(car l1_1024) '#:gap-select?)(cdr l1_1024) l1_1024))))"
"(let-values(((l1_1026) l1_1025))"
"(let-values(((l1_1027)"
"(if(null? l1_1026) l1_1026(if(eq?(car l1_1026) '#:match-select)(cdr l1_1026) l1_1026))))"
"(null? l1_1027)))))"
" '#f))"
"(case-lambda"
"((given-kws_1028 given-args_1029 pattern_1030 string_1031)"
"(unpack72.1 given-kws_1028 given-args_1029 pattern_1030 string_1031 '#f '#f '#f '#f '#f '#f))"
"((given-kws_1032 given-args_1033 pattern_1034 string_1035 start_1036 end_1037 ipre65_1038)"
"(unpack72.1 given-kws_1032 given-args_1033 pattern_1034 string_1035 start_1036 end_1037 ipre65_1038 '#t '#t '#t))"
"((given-kws_1039 given-args_1040 pattern_1041 string_1042 start_1043 end64_1044)"
"(unpack72.1 given-kws_1039 given-args_1040 pattern_1041 string_1042 start_1043 end64_1044 '#f '#t '#t '#f))"
"((given-kws_1045 given-args_1046 pattern_1047 string_1048 start63_1049)"
"(unpack72.1 given-kws_1045 given-args_1046 pattern_1047 string_1048 start63_1049 '#f '#f '#t '#f '#f)))"
" null"
" '(#:gap-select? #:match-select)"
"(let-values(((regexp-match*_1050)"
"(case-lambda"
"((pattern_1051 string_1052)(unpack72.1 null null pattern_1051 string_1052 '#f '#f '#f '#f '#f '#f))"
"((pattern_1053 string_1054 start_1055 end_1056 ipre65_1057)"
"(unpack72.1 null null pattern_1053 string_1054 start_1055 end_1056 ipre65_1057 '#t '#t '#t))"
"((pattern_1058 string_1059 start_1060 end64_1061)"
"(unpack72.1 null null pattern_1058 string_1059 start_1060 end64_1061 '#f '#t '#t '#f))"
"((pattern_1062 string_1063 start63_1064)"
"(unpack72.1 null null pattern_1062 string_1063 start63_1064 '#f '#f '#t '#f '#f)))))"
" regexp-match*_1050)))"
"(define-values"
"(regexp-match-exact?)"
"(lambda(p_1065 s_1066)"
"(let-values(((m_1067)(regexp-match-positions p_1065 s_1066)))"
"(if m_1067"
"(if(zero?(caar m_1067))"
"(="
"(cdar m_1067)"
"(if(bytes? s_1066)"
"(let-values()(bytes-length s_1066))"
"(if(let-values(((or-part_1068)(byte-regexp? p_1065)))(if or-part_1068 or-part_1068(bytes? p_1065)))"
"(let-values()(if(path? s_1066)(bytes-length(path->bytes s_1066))(string-utf-8-length s_1066)))"
"(let-values()(if(path? s_1066)(string-length(path->string s_1066))(string-length s_1066))))))"
" '#f)"
" '#f))))"
"(define-values"
"(regexp-replaces)"
"(lambda(string_1069 replacements_1070)"
"((letrec-values(((loop_1071)"
"(lambda(str_1072 rs_1073)"
"(if(null? rs_1073)"
" str_1072"
"(loop_1071(regexp-replace*(caar rs_1073) str_1072(cadar rs_1073))(cdr rs_1073))))))"
" loop_1071)"
" string_1069"
" replacements_1070)))"
"(define-values(exists-syms) '(error append update can-update replace truncate must-truncate truncate/replace))"
"(define-values"
"(exists-desc)"
" '\"(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)\")"
" (define-values (binary-or-text-desc) '\"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values(((path_6) path5_5))"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 '#f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
" (let-values () (raise-argument-error 'open-input-file '\"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(unpack7.1$5)"
"(lambda(given-kws_9 given-args_10 path5_11)"
"(let-values(((for-module?4_12)(if(pair? given-kws_9)(eq? '#:for-module?(car given-kws_9)) '#f)))"
"(let-values(((for-module?2_13)(if for-module?4_12(car given-args_10)(void)))"
"((given-kws_14)(if for-module?4_12(cdr given-kws_9) given-kws_9))"
"((given-args_15)(if for-module?4_12(cdr given-args_10) given-args_10)))"
"(let-values(((mode3_16)(pair? given-kws_14)))"
"(let-values(((mode1_17)(if mode3_16(car given-args_15)(void))))"
"(open-input-file6.1 for-module?2_13 for-module?4_12 mode1_17 mode3_16 path5_11)))))))"
"(define-values"
"(open-input-file8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_18 given-argc_19)"
"(if(= given-argc_19 '3)"
"(let-values(((l1_20) given-kws_18))"
"(let-values(((l1_21)(if(null? l1_20) l1_20(if(eq?(car l1_20) '#:for-module?)(cdr l1_20) l1_20))))"
"(let-values(((l1_22) l1_21))"
"(let-values(((l1_23)(if(null? l1_22) l1_22(if(eq?(car l1_22) '#:mode)(cdr l1_22) l1_22))))"
"(null? l1_23)))))"
" '#f))"
"(case-lambda((given-kws_24 given-args_25 path_26)(unpack7.1$5 given-kws_24 given-args_25 path_26)))"
" null"
" '(#:for-module? #:mode)"
"(let-values(((open-input-file_27)(case-lambda((path_28)(unpack7.1$5 null null path_28))))) open-input-file_27)))"
"(define-values"
"(open-output-file14.1)"
"(lambda(exists10_29 exists12_30 mode9_31 mode11_32 path13_33)"
"(let-values(((path_34) path13_33))"
"(let-values(((mode_35)(if mode11_32 mode9_31 'binary)))"
"(let-values(((exists_36)(if exists12_30 exists10_29 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_34)"
"(void)"
" (let-values () (raise-argument-error 'open-output-file '\"path-string?\" path_34)))"
"(if(memq mode_35 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-output-file binary-or-text-desc mode_35)))"
"(if(memq exists_36 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-output-file exists-desc exists_36)))"
"(open-output-file path_34 mode_35 exists_36))))))))"
"(define-values"
"(unpack15.1$1)"
"(lambda(given-kws_37 given-args_38 path13_39)"
"(let-values(((exists12_40)(if(pair? given-kws_37)(eq? '#:exists(car given-kws_37)) '#f)))"
"(let-values(((exists10_41)(if exists12_40(car given-args_38)(void)))"
"((given-kws_42)(if exists12_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if exists12_40(cdr given-args_38) given-args_38)))"
"(let-values(((mode11_44)(pair? given-kws_42)))"
"(let-values(((mode9_45)(if mode11_44(car given-args_43)(void))))"
"(open-output-file14.1 exists10_41 exists12_40 mode9_45 mode11_44 path13_39)))))))"
"(define-values"
"(open-output-file16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_46 given-argc_47)"
"(if(= given-argc_47 '3)"
"(let-values(((l1_48) given-kws_46))"
"(let-values(((l1_49)(if(null? l1_48) l1_48(if(eq?(car l1_48) '#:exists)(cdr l1_48) l1_48))))"
"(let-values(((l1_50) l1_49))"
"(let-values(((l1_51)(if(null? l1_50) l1_50(if(eq?(car l1_50) '#:mode)(cdr l1_50) l1_50))))"
"(null? l1_51)))))"
" '#f))"
"(case-lambda((given-kws_52 given-args_53 path_54)(unpack15.1$1 given-kws_52 given-args_53 path_54)))"
" null"
" '(#:exists #:mode)"
"(let-values(((open-output-file_55)(case-lambda((path_56)(unpack15.1$1 null null path_56)))))"
" open-output-file_55)))"
"(define-values"
"(open-input-output-file22.1)"
"(lambda(exists18_57 exists20_58 mode17_59 mode19_60 path21_61)"
"(let-values(((path_62) path21_61))"
"(let-values(((mode_63)(if mode19_60 mode17_59 'binary)))"
"(let-values(((exists_64)(if exists20_58 exists18_57 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_62)"
"(void)"
" (let-values () (raise-argument-error 'open-input-output-file '\"path-string?\" path_62)))"
"(if(memq mode_63 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file binary-or-text-desc mode_63)))"
"(if(memq exists_64 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file exists-desc exists_64)))"
"(open-input-output-file path_62 mode_63 exists_64))))))))"
"(define-values"
"(unpack23.1)"
"(lambda(given-kws_65 given-args_66 path21_67)"
"(let-values(((exists20_68)(if(pair? given-kws_65)(eq? '#:exists(car given-kws_65)) '#f)))"
"(let-values(((exists18_69)(if exists20_68(car given-args_66)(void)))"
"((given-kws_70)(if exists20_68(cdr given-kws_65) given-kws_65))"
"((given-args_71)(if exists20_68(cdr given-args_66) given-args_66)))"
"(let-values(((mode19_72)(pair? given-kws_70)))"
"(let-values(((mode17_73)(if mode19_72(car given-args_71)(void))))"
"(open-input-output-file22.1 exists18_69 exists20_68 mode17_73 mode19_72 path21_67)))))))"
"(define-values"
"(open-input-output-file24.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_74 given-argc_75)"
"(if(= given-argc_75 '3)"
"(let-values(((l1_76) given-kws_74))"
"(let-values(((l1_77)(if(null? l1_76) l1_76(if(eq?(car l1_76) '#:exists)(cdr l1_76) l1_76))))"
"(let-values(((l1_78) l1_77))"
"(let-values(((l1_79)(if(null? l1_78) l1_78(if(eq?(car l1_78) '#:mode)(cdr l1_78) l1_78))))"
"(null? l1_79)))))"
" '#f))"
"(case-lambda((given-kws_80 given-args_81 path_82)(unpack23.1 given-kws_80 given-args_81 path_82)))"
" null"
" '(#:exists #:mode)"
"(let-values(((open-input-output-file_83)(case-lambda((path_84)(unpack23.1 null null path_84)))))"
" open-input-output-file_83)))"
"(define-values"
"(call-with-input-file29.1)"
"(lambda(mode25_85 mode26_86 path27_87 proc28_88)"
"(let-values(((path_89) path27_87))"
"(let-values(((proc_90) proc28_88))"
"(let-values(((mode_91)(if mode26_86 mode25_85 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_89)"
"(void)"
" (let-values () (raise-argument-error 'call-with-input-file '\"path-string?\" path_89)))"
"(if(if(procedure? proc_90)(procedure-arity-includes? proc_90 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'call-with-input-file '\"(input-port? . -> . any)\" proc_90)))"
"(if(memq mode_91 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file binary-or-text-desc mode_91)))"
"(call-with-input-file path_89 proc_90 mode_91))))))))"
"(define-values"
"(unpack30.1)"
"(lambda(given-kws_92 given-args_93 path27_94 proc28_95)"
"(let-values(((mode26_96)(pair? given-kws_92)))"
"(let-values(((mode25_97)(if mode26_96(car given-args_93)(void))))"
"(call-with-input-file29.1 mode25_97 mode26_96 path27_94 proc28_95)))))"
"(define-values"
"(call-with-input-file31.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_98 given-argc_99)"
"(if(= given-argc_99 '4)"
"(let-values(((l1_100) given-kws_98))"
"(let-values(((l1_101)(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:mode)(cdr l1_100) l1_100))))"
"(null? l1_101)))"
" '#f))"
"(case-lambda"
"((given-kws_102 given-args_103 path_104 proc_105)(unpack30.1 given-kws_102 given-args_103 path_104 proc_105)))"
" null"
" '(#:mode)"
"(let-values(((call-with-input-file_106)"
"(case-lambda((path_107 proc_108)(unpack30.1 null null path_107 proc_108)))))"
" call-with-input-file_106)))"
"(define-values"
"(call-with-output-file38.1)"
"(lambda(exists33_109 exists35_110 mode32_111 mode34_112 path36_113 proc37_114)"
"(let-values(((path_115) path36_113))"
"(let-values(((proc_116) proc37_114))"
"(let-values(((mode_117)(if mode34_112 mode32_111 'binary)))"
"(let-values(((exists_118)(if exists35_110 exists33_109 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_115)"
"(void)"
" (let-values () (raise-argument-error 'call-with-output-file '\"path-string?\" path_115)))"
"(if(if(procedure? proc_116)(procedure-arity-includes? proc_116 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'call-with-output-file '\"(output-port? . -> . any)\" proc_116)))"
"(if(memq mode_117 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file binary-or-text-desc mode_117)))"
"(if(memq exists_118 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file exists-desc exists_118)))"
"(call-with-output-file path_115 proc_116 mode_117 exists_118)))))))))"
"(define-values"
"(unpack39.1)"
"(lambda(given-kws_119 given-args_120 path36_121 proc37_122)"
"(let-values(((exists35_123)(if(pair? given-kws_119)(eq? '#:exists(car given-kws_119)) '#f)))"
"(let-values(((exists33_124)(if exists35_123(car given-args_120)(void)))"
"((given-kws_125)(if exists35_123(cdr given-kws_119) given-kws_119))"
"((given-args_126)(if exists35_123(cdr given-args_120) given-args_120)))"
"(let-values(((mode34_127)(pair? given-kws_125)))"
"(let-values(((mode32_128)(if mode34_127(car given-args_126)(void))))"
"(call-with-output-file38.1 exists33_124 exists35_123 mode32_128 mode34_127 path36_121 proc37_122)))))))"
"(define-values"
"(call-with-output-file40.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_129 given-argc_130)"
"(if(= given-argc_130 '4)"
"(let-values(((l1_131) given-kws_129))"
"(let-values(((l1_132)(if(null? l1_131) l1_131(if(eq?(car l1_131) '#:exists)(cdr l1_131) l1_131))))"
"(let-values(((l1_133) l1_132))"
"(let-values(((l1_134)(if(null? l1_133) l1_133(if(eq?(car l1_133) '#:mode)(cdr l1_133) l1_133))))"
"(null? l1_134)))))"
" '#f))"
"(case-lambda"
"((given-kws_135 given-args_136 path_137 proc_138)(unpack39.1 given-kws_135 given-args_136 path_137 proc_138)))"
" null"
" '(#:exists #:mode)"
"(let-values(((call-with-output-file_139)"
"(case-lambda((path_140 proc_141)(unpack39.1 null null path_140 proc_141)))))"
" call-with-output-file_139)))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_142 mode42_143 path43_144 proc44_145)"
"(let-values(((path_146) path43_144))"
"(let-values(((proc_147) proc44_145))"
"(let-values(((mode_148)(if mode42_143 mode41_142 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_146)"
"(void)"
" (let-values () (raise-argument-error 'with-input-from-file '\"path-string?\" path_146)))"
"(if(if(procedure? proc_147)(procedure-arity-includes? proc_147 '0) '#f)"
"(void)"
" (let-values () (raise-argument-error 'with-input-from-file '\"(-> any)\" proc_147)))"
"(if(memq mode_148 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_148)))"
"(with-input-from-file path_146 proc_147 mode_148))))))))"
"(define-values"
"(unpack46.1)"
"(lambda(given-kws_149 given-args_150 path43_151 proc44_152)"
"(let-values(((mode42_153)(pair? given-kws_149)))"
"(let-values(((mode41_154)(if mode42_153(car given-args_150)(void))))"
"(with-input-from-file45.1 mode41_154 mode42_153 path43_151 proc44_152)))))"
"(define-values"
"(with-input-from-file47.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_155 given-argc_156)"
"(if(= given-argc_156 '4)"
"(let-values(((l1_157) given-kws_155))"
"(let-values(((l1_158)(if(null? l1_157) l1_157(if(eq?(car l1_157) '#:mode)(cdr l1_157) l1_157))))"
"(null? l1_158)))"
" '#f))"
"(case-lambda"
"((given-kws_159 given-args_160 path_161 proc_162)(unpack46.1 given-kws_159 given-args_160 path_161 proc_162)))"
" null"
" '(#:mode)"
"(let-values(((with-input-from-file_163)"
"(case-lambda((path_164 proc_165)(unpack46.1 null null path_164 proc_165)))))"
" with-input-from-file_163)))"
"(define-values"
"(with-output-to-file54.1)"
"(lambda(exists49_166 exists51_167 mode48_168 mode50_169 path52_170 proc53_171)"
"(let-values(((path_172) path52_170))"
"(let-values(((proc_173) proc53_171))"
"(let-values(((mode_174)(if mode50_169 mode48_168 'binary)))"
"(let-values(((exists_175)(if exists51_167 exists49_166 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_172)"
"(void)"
" (let-values () (raise-argument-error 'with-output-to-file '\"path-string?\" path_172)))"
"(if(if(procedure? proc_173)(procedure-arity-includes? proc_173 '0) '#f)"
"(void)"
" (let-values () (raise-argument-error 'with-output-to-file '\"(-> any)\" proc_173)))"
"(if(memq mode_174 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file binary-or-text-desc mode_174)))"
"(if(memq exists_175 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file exists-desc exists_175)))"
"(with-output-to-file path_172 proc_173 mode_174 exists_175)))))))))"
"(define-values"
"(unpack55.1)"
"(lambda(given-kws_176 given-args_177 path52_178 proc53_179)"
"(let-values(((exists51_180)(if(pair? given-kws_176)(eq? '#:exists(car given-kws_176)) '#f)))"
"(let-values(((exists49_181)(if exists51_180(car given-args_177)(void)))"
"((given-kws_182)(if exists51_180(cdr given-kws_176) given-kws_176))"
"((given-args_183)(if exists51_180(cdr given-args_177) given-args_177)))"
"(let-values(((mode50_184)(pair? given-kws_182)))"
"(let-values(((mode48_185)(if mode50_184(car given-args_183)(void))))"
"(with-output-to-file54.1 exists49_181 exists51_180 mode48_185 mode50_184 path52_178 proc53_179)))))))"
"(define-values"
"(with-output-to-file56.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_186 given-argc_187)"
"(if(= given-argc_187 '4)"
"(let-values(((l1_188) given-kws_186))"
"(let-values(((l1_189)(if(null? l1_188) l1_188(if(eq?(car l1_188) '#:exists)(cdr l1_188) l1_188))))"
"(let-values(((l1_190) l1_189))"
"(let-values(((l1_191)(if(null? l1_190) l1_190(if(eq?(car l1_190) '#:mode)(cdr l1_190) l1_190))))"
"(null? l1_191)))))"
" '#f))"
"(case-lambda"
"((given-kws_192 given-args_193 path_194 proc_195)(unpack55.1 given-kws_192 given-args_193 path_194 proc_195)))"
" null"
" '(#:exists #:mode)"
"(let-values(((with-output-to-file_196)"
"(case-lambda((path_197 proc_198)(unpack55.1 null null path_197 proc_198)))))"
" with-output-to-file_196)))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values(((path_203) path59_201))"
"(let-values(((proc_204) proc60_202))"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
" (let-values () (raise-argument-error 'call-with-input-file* '\"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'call-with-input-file* '\"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(define-values"
"(unpack62.1)"
"(lambda(given-kws_207 given-args_208 path59_209 proc60_210)"
"(let-values(((mode58_211)(pair? given-kws_207)))"
"(let-values(((mode57_212)(if mode58_211(car given-args_208)(void))))"
"(call-with-input-file*61.1 mode57_212 mode58_211 path59_209 proc60_210)))))"
"(define-values"
"(call-with-input-file*63.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_213 given-argc_214)"
"(if(= given-argc_214 '4)"
"(let-values(((l1_215) given-kws_213))"
"(let-values(((l1_216)(if(null? l1_215) l1_215(if(eq?(car l1_215) '#:mode)(cdr l1_215) l1_215))))"
"(null? l1_216)))"
" '#f))"
"(case-lambda"
"((given-kws_217 given-args_218 path_219 proc_220)(unpack62.1 given-kws_217 given-args_218 path_219 proc_220)))"
" null"
" '(#:mode)"
"(let-values(((call-with-input-file*_221)"
"(case-lambda((path_222 proc_223)(unpack62.1 null null path_222 proc_223)))))"
" call-with-input-file*_221)))"
"(define-values"
"(call-with-output-file*70.1)"
"(lambda(exists65_224 exists67_225 mode64_226 mode66_227 path68_228 proc69_229)"
"(let-values(((path_230) path68_228))"
"(let-values(((proc_231) proc69_229))"
"(let-values(((mode_232)(if mode66_227 mode64_226 'binary)))"
"(let-values(((exists_233)(if exists67_225 exists65_224 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_230)"
"(void)"
" (let-values () (raise-argument-error 'call-with-output-file* '\"path-string?\" path_230)))"
"(if(if(procedure? proc_231)(procedure-arity-includes? proc_231 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'call-with-output-file* '\"(output-port? . -> . any)\" proc_231)))"
"(if(memq mode_232 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* binary-or-text-desc mode_232)))"
"(if(memq exists_233 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* exists-desc exists_233)))"
"(let-values(((p_234)(open-output-file path_230 mode_232 exists_233)))"
"(dynamic-wind void(lambda()(proc_231 p_234))(lambda()(close-output-port p_234))))))))))))"
"(define-values"
"(unpack71.1)"
"(lambda(given-kws_235 given-args_236 path68_237 proc69_238)"
"(let-values(((exists67_239)(if(pair? given-kws_235)(eq? '#:exists(car given-kws_235)) '#f)))"
"(let-values(((exists65_240)(if exists67_239(car given-args_236)(void)))"
"((given-kws_241)(if exists67_239(cdr given-kws_235) given-kws_235))"
"((given-args_242)(if exists67_239(cdr given-args_236) given-args_236)))"
"(let-values(((mode66_243)(pair? given-kws_241)))"
"(let-values(((mode64_244)(if mode66_243(car given-args_242)(void))))"
"(call-with-output-file*70.1 exists65_240 exists67_239 mode64_244 mode66_243 path68_237 proc69_238)))))))"
"(define-values"
"(call-with-output-file*72.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_245 given-argc_246)"
"(if(= given-argc_246 '4)"
"(let-values(((l1_247) given-kws_245))"
"(let-values(((l1_248)(if(null? l1_247) l1_247(if(eq?(car l1_247) '#:exists)(cdr l1_247) l1_247))))"
"(let-values(((l1_249) l1_248))"
"(let-values(((l1_250)(if(null? l1_249) l1_249(if(eq?(car l1_249) '#:mode)(cdr l1_249) l1_249))))"
"(null? l1_250)))))"
" '#f))"
"(case-lambda"
"((given-kws_251 given-args_252 path_253 proc_254)(unpack71.1 given-kws_251 given-args_252 path_253 proc_254)))"
" null"
" '(#:exists #:mode)"
"(let-values(((call-with-output-file*_255)"
"(case-lambda((path_256 proc_257)(unpack71.1 null null path_256 proc_257)))))"
" call-with-output-file*_255)))"
"(define-values"
"(1/directory-list)"
"(let-values(((core77_258)"
"(lambda(build?73_259 build?74_260 dir75_261 dir76_262)"
"(let-values(((dir_263)(if dir76_262 dir75_261(current-directory))))"
"(let-values(((build?_264)(if build?74_260 build?73_259 '#f)))"
"(let-values()"
"(begin"
"(if(path-string? dir_263)"
"(void)"
" (let-values () (raise-argument-error 'directory-list '\"path-string?\" dir_263)))"
"(let-values(((content_265)(sort(directory-list dir_263) path<?)))"
"(if build?_264"
"(map2(lambda(i_266)(build-path dir_263 i_266)) content_265)"
" content_265)))))))))"
"(let-values(((unpack78_267)"
"(lambda(given-kws_268 given-args_269 dir75_270 dir76_271)"
"(let-values(((build?74_272)(pair? given-kws_268)))"
"(let-values(((build?73_273)(if build?74_272(car given-args_269)(void))))"
"(core77_258 build?73_273 build?74_272 dir75_270 dir76_271))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_274 given-argc_275)"
"(if(if(>= given-argc_275 '2)(<= given-argc_275 '3) '#f)"
"(let-values(((l1_276) given-kws_274))"
"(let-values(((l1_277)(if(null? l1_276) l1_276(if(eq?(car l1_276) '#:build?)(cdr l1_276) l1_276))))"
"(null? l1_277)))"
" '#f))"
"(case-lambda"
"((given-kws_278 given-args_279)(unpack78_267 given-kws_278 given-args_279 '#f '#f))"
"((given-kws_280 given-args_281 dir75_282)(unpack78_267 given-kws_280 given-args_281 dir75_282 '#t)))"
" null"
" '(#:build?)"
"(let-values(((directory-list_283)"
"(case-lambda"
"(()(unpack78_267 null null '#f '#f))"
"((dir75_284)(unpack78_267 null null dir75_284 '#t)))))"
" directory-list_283)))))"
"(define-values"
"(prop:gen:equal+hash equal+hash? gen:equal+hash-acc)"
"(make-struct-type-property"
" 'prop:gen:equal+hash"
"(lambda(v_1 si_2)"
"(if(if(vector? v_1)"
"(if(= '3(vector-length v_1))"
"(if(procedure?(vector-ref v_1 '0))"
"(if(procedure-arity-includes?(vector-ref v_1 '0) '3)"
"(if(procedure?(vector-ref v_1 '1))"
"(if(procedure-arity-includes?(vector-ref v_1 '1) '2)"
"(if(procedure?(vector-ref v_1 '2))(procedure-arity-includes?(vector-ref v_1 '2) '2) '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" v_1"
"(raise-argument-error"
" 'guard-for-prop:gen:equal+hash"
"(string-append"
" '\"(vector/c (procedure-arity-includes/c 3)\\n\""
" '\" (procedure-arity-includes/c 2)\\n\""
" '\" (procedure-arity-includes/c 2))\")"
" v_1)))"
"(list(cons prop:equal+hash vector->list))))"
"(define-values(equal-proc-impl)(lambda(a_3 b_4 e_5)(equal? a_3 b_4)))"
"(define-values(hash-proc-impl)(lambda(x_6 h_7)(equal-hash-code x_6)))"
"(define-values(hash2-proc-impl)(lambda(x_8 h_9)(equal-secondary-hash-code x_8)))"
"(define-values"
"(prop:gen:custom-write gen:custom-write? gen:custom-write-acc)"
"(make-struct-type-property"
" 'prop:gen:custom-write"
"(lambda(v_10 si_11)"
"(if(if(vector? v_10)"
"(if(= '1(vector-length v_10))"
"(if(procedure?(vector-ref v_10 '0))(procedure-arity-includes?(vector-ref v_10 '0) '3) '#f)"
" '#f)"
" '#f)"
" v_10"
" (raise-argument-error 'guard-for-prop:gen:custom-write '\"(vector/c (procedure-arity-includes/c 3))\" v_10)))"
"(list(cons prop:custom-write(lambda(v_12)(vector-ref v_12 '0))))))"
"(define-values"
"(write-proc-impl)"
"(lambda(v_13 p_14 w_15)"
"(let-values(((tmp_16) w_15))"
"(if(equal? tmp_16 '#t)"
"(let-values()(write v_13 p_14))"
"(if(equal? tmp_16 '#f)"
"(let-values()(display v_13 p_14))"
"(if(if(equal? tmp_16 '0) '#t(equal? tmp_16 '1))"
"(let-values()(print v_13 p_14 w_15))"
" (let-values () (error 'write-proc '\"internal error; should not happen\"))))))))\n"
"(define-values"
"(set)"
"(case-lambda"
"(() '#hash())"
"(l_43"
"(let-values(((lst_44) l_43))"
"(begin"
"(if(list? lst_44)(void)(let-values()(in-list lst_44)))"
"((letrec-values(((for-loop_45)"
"(lambda(s_46 lst_47)"
"(if(pair? lst_47)"
"(let-values(((e_48)(unsafe-car lst_47)))"
"(if '#t"
"(let-values(((s_49)"
"(let-values(((s_50) s_46))"
"(let-values(((s_51)(let-values()(hash-set s_50 e_48 '#t))))"
"(values s_51)))))"
"(if '#t(for-loop_45 s_49(unsafe-cdr lst_47)) s_49))"
" s_46))"
" s_46))))"
" for-loop_45)"
" '#hash()"
" lst_44))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() '#hasheq())"
"(l_52"
"(let-values(((lst_53) l_52))"
"(begin"
"(if(list? lst_53)(void)(let-values()(in-list lst_53)))"
"((letrec-values(((for-loop_54)"
"(lambda(s_55 lst_56)"
"(if(pair? lst_56)"
"(let-values(((e_57)(unsafe-car lst_56)))"
"(if '#t"
"(let-values(((s_58)"
"(let-values(((s_59) s_55))"
"(let-values(((s_60)(let-values()(hash-set s_59 e_57 '#t))))"
"(values s_60)))))"
"(if '#t(for-loop_54 s_58(unsafe-cdr lst_56)) s_58))"
" s_55))"
" s_55))))"
" for-loop_54)"
" '#hasheq()"
" lst_53))))))"
"(define-values(seteqv)(lambda() '#hasheqv()))"
"(define-values(set?)(lambda(s_61)(hash? s_61)))"
"(define-values(set-empty?)(lambda(s_62)(zero?(hash-count s_62))))"
"(define-values(set-member?)(lambda(s_63 e_64)(hash-ref s_63 e_64 '#f)))"
"(define-values(set-count)(lambda(s_65)(hash-count s_65)))"
"(define-values(set-add)(lambda(s_66 e_67)(hash-set s_66 e_67 '#t)))"
"(define-values(set-remove)(lambda(s_68 e_69)(hash-remove s_68 e_69)))"
"(define-values(set-first)(lambda(s_70)(hash-iterate-key s_70(hash-iterate-first s_70))))"
"(define-values"
"(subset?$1)"
"(lambda(s1_71 s2_72)"
"(if(<=(hash-count s1_71)(hash-count s2_72))"
"(let-values()"
"(let-values(((ht_73) s1_71))"
"(begin"
"(if((lambda(ht_74)(hash? ht_74)) ht_73)(void)(let-values()(default-in-hash-keys ht_73)))"
"((letrec-values(((for-loop_75)"
"(lambda(result_76 i_77)"
"(if i_77"
"(let-values(((k_78)(hash-iterate-key ht_73 i_77)))"
"(if '#t"
"(let-values(((result_79)"
"(let-values(((result_80) result_76))"
"(let-values(((result_81)"
"(let-values()"
"(let-values()(hash-ref s2_72 k_78 '#f)))))"
"(values result_81)))))"
"(if(if '#t(not((lambda x_82(not result_79)) k_78)) '#f)"
"(for-loop_75 result_79(hash-iterate-next ht_73 i_77))"
" result_79))"
" result_76))"
" result_76))))"
" for-loop_75)"
" '#t"
"(hash-iterate-first ht_73)))))"
"(let-values() '#f))))"
"(define-values"
"(set-subtract)"
"(lambda(s1_83 s2_84)"
"(let-values(((ht_85) s2_84))"
"(begin"
"(if((lambda(ht_86)(hash? ht_86)) ht_85)(void)(let-values()(default-in-hash-keys ht_85)))"
"((letrec-values(((for-loop_87)"
"(lambda(s1_88 i_89)"
"(if i_89"
"(let-values(((k_90)(hash-iterate-key ht_85 i_89)))"
"(if '#t"
"(let-values(((s1_91)"
"(let-values(((s1_92) s1_88))"
"(let-values(((s1_93)(let-values()(hash-remove s1_92 k_90))))"
"(values s1_93)))))"
"(if '#t(for-loop_87 s1_91(hash-iterate-next ht_85 i_89)) s1_91))"
" s1_88))"
" s1_88))))"
" for-loop_87)"
" s1_83"
"(hash-iterate-first ht_85))))))"
"(define-values"
"(set-union)"
"(lambda(s1_94 s2_95)"
"(if(<(set-count s1_94)(set-count s2_95))"
"(set-union s2_95 s1_94)"
"(let-values(((ht_96) s2_95))"
"(begin"
"(if((lambda(ht_97)(hash? ht_97)) ht_96)(void)(let-values()(default-in-hash-keys ht_96)))"
"((letrec-values(((for-loop_98)"
"(lambda(s1_99 i_100)"
"(if i_100"
"(let-values(((k_101)(hash-iterate-key ht_96 i_100)))"
"(if '#t"
"(let-values(((s1_102)"
"(let-values(((s1_103) s1_99))"
"(let-values(((s1_104)(let-values()(hash-set s1_103 k_101 '#t))))"
"(values s1_104)))))"
"(if '#t(for-loop_98 s1_102(hash-iterate-next ht_96 i_100)) s1_102))"
" s1_99))"
" s1_99))))"
" for-loop_98)"
" s1_94"
"(hash-iterate-first ht_96)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_105 pred_106)"
"(let-values(((ht_107) s_105))"
"(begin"
"(if((lambda(ht_108)(hash? ht_108)) ht_107)(void)(let-values()(default-in-hash-keys ht_107)))"
"((letrec-values(((for-loop_109)"
"(lambda(y_110 n_111 i_112)"
"(if i_112"
"(let-values(((v_113)(hash-iterate-key ht_107 i_112)))"
"(if '#t"
"(let-values(((y_114 n_115)"
"(let-values(((y_116) y_110)((n_117) n_111))"
"(let-values(((y_118 n_119)"
"(let-values()"
"(if(pred_106 v_113)"
"(values(set-add y_116 v_113) n_117)"
"(values y_116(set-add n_117 v_113))))))"
"(values y_118 n_119)))))"
"(if '#t"
"(for-loop_109 y_114 n_115(hash-iterate-next ht_107 i_112))"
"(values y_114 n_115)))"
"(values y_110 n_111)))"
"(values y_110 n_111)))))"
" for-loop_109)"
"(set)"
"(set)"
"(hash-iterate-first ht_107))))))"
"(define-values"
"(set->list)"
"(lambda(s_120)"
"(alt-reverse"
"(let-values(((ht_121) s_120))"
"(begin"
"(if((lambda(ht_122)(hash? ht_122)) ht_121)(void)(let-values()(default-in-hash-keys ht_121)))"
"((letrec-values(((for-loop_123)"
"(lambda(fold-var_124 i_125)"
"(if i_125"
"(let-values(((k_126)(hash-iterate-key ht_121 i_125)))"
"(if '#t"
"(let-values(((fold-var_127)"
"(let-values(((fold-var_128) fold-var_124))"
"(let-values(((fold-var_129)"
"(let-values()"
"(cons(let-values() k_126) fold-var_128))))"
"(values fold-var_129)))))"
"(if '#t(for-loop_123 fold-var_127(hash-iterate-next ht_121 i_125)) fold-var_127))"
" fold-var_124))"
" fold-var_124))))"
" for-loop_123)"
" null"
"(hash-iterate-first ht_121)))))))"
"(define-values"
"(list->set)"
"(lambda(l_130)"
"(let-values(((lst_131) l_130))"
"(begin"
"(if(list? lst_131)(void)(let-values()(in-list lst_131)))"
"((letrec-values(((for-loop_132)"
"(lambda(table_133 lst_134)"
"(if(pair? lst_134)"
"(let-values(((k_135)(unsafe-car lst_134)))"
"(if '#t"
"(let-values(((table_136)"
"(let-values(((table_137) table_133))"
"(let-values(((table_138)"
"(let-values()"
"(let-values(((key_139 val_140)"
"(let-values()"
"(values(let-values() k_135) '#t))))"
"(hash-set table_137 key_139 val_140)))))"
"(values table_138)))))"
"(if '#t(for-loop_132 table_136(unsafe-cdr lst_134)) table_136))"
" table_133))"
" table_133))))"
" for-loop_132)"
" '#hash()"
" lst_131)))))"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) '#f) '#f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) '#f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) '#f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) '#f) '#f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) '#f) '#f)"
" '#f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() '#f))))))"
" '#f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
" (if (let-values (((or-part_9) (equal? (cadr v_8) '\"..\")))"
"(if or-part_9"
" or-part_9"
" (let-values (((or-part_10) (equal? (cadr v_8) '\".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14)))"
"(if '#t"
"(let-values(((result_16)"
"(let-values(((result_17) result_13))"
"(let-values(((result_18)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_19)"
" (equal? e_15 '\"..\")))"
"(if or-part_19"
" or-part_19"
"(symbol? e_15)))))))"
"(values result_18)))))"
"(if(if '#t(not((lambda x_20(not result_16)) e_15)) '#f)"
"(for-loop_12 result_16(unsafe-cdr lst_14))"
" result_16))"
" result_13))"
" result_13))))"
" for-loop_12)"
" '#t"
" lst_11)))"
" '#f)"
" '#f)"
" '#f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_21)"
"(let-values(((...arse-module-path.rkt:44:2_22) module-path-string?12.1)"
"((v13_23) v_21)"
"((temp14_24) '#t)"
"((temp15_25) '#t)"
"((temp16_26) '#t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 temp14_24 '#t temp16_26 '#t '#f '#f temp15_25 '#t v13_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:44:2_22"
" keyword-procedure-extract"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
" '3)"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
"(list temp14_24 temp16_26 temp15_25)"
" v13_23)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_27)"
"(let-values(((temp17_28)(symbol->string v_27)))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 '#f '#f '#f '#f '#f '#f '#f '#f temp17_28)"
"(module-path-string?12.1 temp17_28)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_29)"
"(if(list? v_29)"
"(if(pair?(cdr v_29))"
"((letrec-values(((loop_30)"
"(lambda(v_31 first?_32)"
"(let-values(((or-part_33)(null? v_31)))"
"(if or-part_33"
" or-part_33"
"(if(string?(car v_31))"
"(if(let-values(((...arse-module-path.rkt:55:18_34) module-path-string?12.1)"
"((temp18_35)(car v_31))"
"((first?19_36) first?_32)"
"((first?20_37) first?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1"
" '#f"
" '#f"
" first?20_37"
" '#t"
" '#f"
" '#f"
" first?19_36"
" '#t"
" temp18_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:55:18_34"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" '3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list first?20_37 first?19_36)"
" temp18_35)))"
"(loop_30(cdr v_31) '#f)"
" '#f)"
" '#f))))))"
" loop_30)"
"(cdr v_29)"
" '#t)"
" '#f)"
" '#f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_39)(length v_38)))"
"(if(equal? tmp_39 '1)"
"(let-values() '#f)"
"(if(equal? tmp_39 '2)"
"(let-values()"
"(let-values(((e_40)(cadr v_38)))"
"(if(string? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:68:12_41) module-path-string?12.1)"
"((e21_42) e_40)"
"((temp22_43) '#t)"
"((temp23_44) '#t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 '#f '#f temp23_44 '#t temp22_43 '#t '#f '#f e21_42)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:68:12_41"
" keyword-procedure-extract"
" '(#:file-end-ok? #:for-planet?)"
" '3)"
" '(#:file-end-ok? #:for-planet?)"
"(list temp23_44 temp22_43)"
" e21_42))))"
"(if(symbol? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:72:12_45) module-path-string?12.1)"
"((temp24_46)(symbol->string e_40))"
"((temp25_47) '#t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 '#f '#f '#f '#f temp25_47 '#t '#f '#f temp24_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:72:12_45"
" keyword-procedure-extract"
" '(#:for-planet?)"
" '3)"
" '(#:for-planet?)"
"(list temp25_47)"
" temp24_46))))"
"(let-values() '#f)))))"
"(let-values()"
"(let-values(((file_48)(cadr v_38)))"
"(let-values(((pkg_49)(caddr v_38)))"
"(let-values(((subs_50)(cdddr v_38)))"
"(if file_48"
"(if(let-values(((...arse-module-path.rkt:80:15_51) module-path-string?12.1)"
"((file26_52) file_48)"
"((temp27_53) '#t)"
"((temp28_54) '#t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 '#f '#f temp28_54 '#t '#f '#f temp27_53 '#t file26_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:80:15_51"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" '3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list temp28_54 temp27_53)"
" file26_52)))"
"(if(if(list? pkg_49)"
"(if(<= '2(length pkg_49) '4)"
"(if(planet-user/pkg-string?(car pkg_49))"
"(if(planet-user/pkg-string?(cadr pkg_49))"
"(let-values(((or-part_55)(null?(cddr pkg_49))))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(planet-version-number?(caddr pkg_49))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(null?(cddr pkg_49))))"
"(if or-part_57"
" or-part_57"
"(planet-version-minor-spec?(cadddr pkg_49))))))))"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
"(let-values(((lst_58) subs_50))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((sub_62)(unsafe-car lst_61)))"
"(if '#t"
"(let-values(((result_63)"
"(let-values(((result_64) result_60))"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_66)"
" sub_62))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path-string?12.1))"
"(module-path-string?10.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" sub29_66)"
"(module-path-string?12.1"
" sub29_66)))))))"
"(values result_65)))))"
"(if(if '#t(not((lambda x_67(not result_63)) sub_62)) '#f)"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63))"
" result_60))"
" result_60))))"
" for-loop_59)"
" '#t"
" lst_58)))"
" '#f)"
" '#f)"
" '#f))))))))"
" '#f)))"
"(define-values(planet-version-number?)(lambda(v_68)(exact-nonnegative-integer? v_68)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_69)"
"(let-values(((or-part_70)(planet-version-number? v_69)))"
"(if or-part_70"
" or-part_70"
"(if(pair? v_69)"
"(if(list? v_69)"
"(if(= '2(length v_69))"
"(let-values(((tmp_71)(car v_69)))"
"(if(if(equal? tmp_71 '=) '#t(if(equal? tmp_71 '+) '#t(equal? tmp_71 '-)))"
"(let-values()(planet-version-number?(cadr v_69)))"
"(let-values()(if(planet-version-number?(car v_69))(planet-version-number?(cadr v_69)) '#f))))"
" '#f)"
" '#f)"
" '#f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_72"
" dots-dir-ok?6_73"
" file-end-ok?4_74"
" file-end-ok?8_75"
" for-planet?1_76"
" for-planet?5_77"
" just-file-ok?3_78"
" just-file-ok?7_79"
" v9_80)"
"(let-values(((v_81) v9_80))"
"(let-values(((for-planet?_82)(if for-planet?5_77 for-planet?1_76 '#f)))"
"(let-values(((dots-dir-ok?_83)(if dots-dir-ok?6_73 dots-dir-ok?2_72 '#f)))"
"(let-values(((just-file-ok?_84)(if just-file-ok?7_79 just-file-ok?3_78 '#f)))"
"(let-values(((file-end-ok?_85)(if file-end-ok?8_75 file-end-ok?4_74 '#f)))"
"(let-values()"
"(let-values(((len_86)(string-length v_81)))"
"(if(positive? len_86)"
"(if(not(char=? '#\\/(string-ref v_81 '0)))"
"(if(not(char=? '#\\/(string-ref v_81(sub1 len_86))))"
"(let-values(((start-package-version-pos_87 end-package-version-pos_88)"
"(if for-planet?_82(check-planet-part v_81 len_86)(values '0 '0))))"
"(if start-package-version-pos_87"
"((letrec-values(((loop_89)"
"(lambda(i_90 prev-was-slash?_91 saw-slash?_92 saw-dot?_93)"
"(if(not(zero? i_90))"
"(let-values()"
"(let-values(((c_94)(string-ref v_81 i_90)))"
"(if(char=? c_94 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_91)"
"(loop_89(sub1 i_90) '#t '#t saw-dot?_93)"
" '#f))"
"(if(char=? c_94 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_90) len_86)"
"(if(not(char=?(string-ref v_81(add1 i_90)) '#\\/))"
"(not(char=?(string-ref v_81(add1 i_90)) '#\\.))"
" '#f)"
" '#f)"
"(if(not saw-slash?_92)"
"(loop_89(sub1 i_90) '#f saw-slash?_92 '#t)"
" '#f)"
"(loop_89(sub1 i_90) '#f saw-slash?_92 saw-dot?_93)))"
"(if(let-values(((or-part_95)(plain-char? c_94)))"
"(if or-part_95"
" or-part_95"
"(if(char=? c_94 '#\\%)"
"(if(<(+ i_90 '2) len_86)"
"(hex-sequence? v_81(add1 i_90))"
" '#f)"
" '#f)))"
"(let-values()"
"(loop_89(sub1 i_90) '#f saw-slash?_92 saw-dot?_93))"
"(if(if(>= i_90 start-package-version-pos_87)"
"(< i_90 end-package-version-pos_88)"
" '#f)"
"(let-values()"
"(loop_89(sub1 i_90) '#f saw-slash?_92 saw-dot?_93))"
"(let-values() '#f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_84)"
"(if saw-dot?_93(not saw-slash?_92) '#f)"
" '#f))"
"(let-values(((or-part_96) dots-dir-ok?_83))"
"(if or-part_96"
" or-part_96"
"((letrec-values(((loop_97)"
"(lambda(i_98)"
"(if(= i_98 len_86)"
"(let-values() '#t)"
"(if(char=?(string-ref v_81 i_98) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_99)"
"(="
" len_86"
"(add1 i_98))))"
"(if or-part_99"
" or-part_99"
"(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\.)"
"(let-values(((or-part_100)"
"(="
" len_86"
"(+"
" i_98"
" '2))))"
"(if or-part_100"
" or-part_100"
"(char=?"
"(string-ref"
" v_81"
"(+ i_98 '2))"
" '#\\/)))"
" '#f))"
"(loop_97"
"((letrec-values(((loop_101)"
"(lambda(i_102)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_81"
" i_102))"
"(loop_101"
"(add1"
" i_102))"
" i_102))))"
" loop_101)"
" i_98))"
" '#f)"
" '#f))"
"(let-values()"
"(loop_97(add1 i_98))))))))"
" loop_97)"
" '0)))"
" '#f))))))"
" loop_89)"
"(sub1 len_86)"
" '#f"
"(not file-end-ok?_85)"
" '#f)"
" '#f))"
" '#f)"
" '#f)"
" '#f))))))))))"
"(define-values"
"(unpack11.1)"
"(lambda(given-kws_103 given-args_104 v9_105)"
"(let-values(((dots-dir-ok?6_106)(if(pair? given-kws_103)(eq? '#:dots-dir-ok?(car given-kws_103)) '#f)))"
"(let-values(((dots-dir-ok?2_107)(if dots-dir-ok?6_106(car given-args_104)(void)))"
"((given-kws_108)(if dots-dir-ok?6_106(cdr given-kws_103) given-kws_103))"
"((given-args_109)(if dots-dir-ok?6_106(cdr given-args_104) given-args_104)))"
"(let-values(((file-end-ok?8_110)(if(pair? given-kws_108)(eq? '#:file-end-ok?(car given-kws_108)) '#f)))"
"(let-values(((file-end-ok?4_111)(if file-end-ok?8_110(car given-args_109)(void)))"
"((given-kws_112)(if file-end-ok?8_110(cdr given-kws_108) given-kws_108))"
"((given-args_113)(if file-end-ok?8_110(cdr given-args_109) given-args_109)))"
"(let-values(((for-planet?5_114)(if(pair? given-kws_112)(eq? '#:for-planet?(car given-kws_112)) '#f)))"
"(let-values(((for-planet?1_115)(if for-planet?5_114(car given-args_113)(void)))"
"((given-kws_116)(if for-planet?5_114(cdr given-kws_112) given-kws_112))"
"((given-args_117)(if for-planet?5_114(cdr given-args_113) given-args_113)))"
"(let-values(((just-file-ok?7_118)(pair? given-kws_116)))"
"(let-values(((just-file-ok?3_119)(if just-file-ok?7_118(car given-args_117)(void))))"
"(module-path-string?10.1"
" dots-dir-ok?2_107"
" dots-dir-ok?6_106"
" file-end-ok?4_111"
" file-end-ok?8_110"
" for-planet?1_115"
" for-planet?5_114"
" just-file-ok?3_119"
" just-file-ok?7_118"
" v9_105)))))))))))"
"(define-values"
"(module-path-string?12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_120 given-argc_121)"
"(if(= given-argc_121 '3)"
"(let-values(((l1_122) given-kws_120))"
"(let-values(((l1_123)(if(null? l1_122) l1_122(if(eq?(car l1_122) '#:dots-dir-ok?)(cdr l1_122) l1_122))))"
"(let-values(((l1_124) l1_123))"
"(let-values(((l1_125)"
"(if(null? l1_124) l1_124(if(eq?(car l1_124) '#:file-end-ok?)(cdr l1_124) l1_124))))"
"(let-values(((l1_126) l1_125))"
"(let-values(((l1_127)"
"(if(null? l1_126) l1_126(if(eq?(car l1_126) '#:for-planet?)(cdr l1_126) l1_126))))"
"(let-values(((l1_128) l1_127))"
"(let-values(((l1_129)"
"(if(null? l1_128)"
" l1_128"
"(if(eq?(car l1_128) '#:just-file-ok?)(cdr l1_128) l1_128))))"
"(null? l1_129)))))))))"
" '#f))"
"(case-lambda((given-kws_130 given-args_131 v_132)(unpack11.1 given-kws_130 given-args_131 v_132)))"
" null"
" '(#:dots-dir-ok? #:file-end-ok? #:for-planet? #:just-file-ok?)"
"(let-values(((module-path-string?_133)(case-lambda((v_134)(unpack11.1 null null v_134)))))"
" module-path-string?_133)))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_135)"
"(if(string? v_135)"
"(let-values(((len_136)(string-length v_135)))"
"(if(positive? len_136)"
"(let-values(((vec_137 len_138)"
"(let-values(((vec_140) v_135))"
"(begin"
"(if(string? vec_140)(void)(let-values()(in-string vec_140)))"
"(values vec_140(string-length vec_140)))))"
"((start_139) '0))"
"(begin"
" '#f"
"(if(exact-nonnegative-integer? start_139)(void)(let-values()(in-naturals start_139)))"
"((letrec-values(((for-loop_141)"
"(lambda(result_142 pos_143 pos_144)"
"(if(if(unsafe-fx< pos_143 len_138) '#t '#f)"
"(let-values(((c_145)(string-ref vec_137 pos_143))((i_146) pos_144))"
"(if(if '#t '#t '#f)"
"(let-values(((result_147)"
"(let-values(((result_148) result_142))"
"(let-values(((result_149)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_150)"
"(plain-char? c_145)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)"
"(char=? '#\\. c_145)))"
"(if or-part_151"
" or-part_151"
"(if(char=? '#\\% c_145)"
"(if(< i_146(- len_136 '2))"
"(hex-sequence? v_135(add1 i_146))"
" '#f)"
" '#f)))))))))"
"(values result_149)))))"
"(if(if(if '#t(not((lambda x_152(not result_147)) c_145)) '#f)"
"(if '#t(not((lambda x_153(not result_147)) i_146)) '#f)"
" '#f)"
"(for-loop_141 result_147(unsafe-fx+ '1 pos_143)(+ pos_144 '1))"
" result_147))"
" result_142))"
" result_142))))"
" for-loop_141)"
" '#t"
" '0"
" start_139)))"
" '#f))"
" '#f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_154)"
"(let-values(((or-part_155)(char<=? '#\\a c_154 '#\\z)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char<=? '#\\A c_154 '#\\Z)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char<=? '#\\0 c_154 '#\\9)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char=? '#\\- c_154)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char=? '#\\_ c_154)))"
"(if or-part_159 or-part_159(char=? '#\\+ c_154)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_160 i_161)"
"(let-values(((c1_162)(string-ref s_160 i_161)))"
"(let-values(((c2_163)(string-ref s_160(add1 i_161))))"
"(if(hex-char? c1_162)"
"(if(hex-char? c2_163)"
"(let-values(((c_164)(integer->char(+(*(hex-char->integer c1_162) '16)(hex-char->integer c2_163)))))"
"(not(plain-char? c_164)))"
" '#f)"
" '#f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_165)"
"(let-values(((or-part_166)(char<=? '#\\a c_165 '#\\f)))(if or-part_166 or-part_166(char<=? '#\\0 c_165 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_167)"
"(if(char<=? '#\\a c_167 '#\\f)"
"(let-values()(-(char->integer c_167)(+ '10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_167 '#\\F)"
"(let-values()(-(char->integer c_167)(+ '10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_167)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_168 len_169)"
"(let-values(((start-package-version-pos_170 end-package-version-pos_171 colon1-pos_172 colon2-pos_173)"
"((letrec-values(((loop_174)"
"(lambda(j_175"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179)"
"(if(= j_175 len_169)"
"(let-values()"
"(values"
" start-package-version-pos_176"
"(let-values(((or-part_180) end-package-version-pos_177))"
"(if or-part_180 or-part_180 j_175))"
" colon1-pos_178"
" colon2-pos_179))"
"(let-values()"
"(let-values(((tmp_181)(string-ref v_168 j_175)))"
"(if(equal? tmp_181 '#\\/)"
"(let-values()"
"(loop_174"
"(add1 j_175)"
"(let-values(((or-part_182) start-package-version-pos_176))"
"(if or-part_182 or-part_182(add1 j_175)))"
"(if start-package-version-pos_176"
"(let-values(((or-part_183) end-package-version-pos_177))"
"(if or-part_183 or-part_183 j_175))"
" '#f)"
" colon1-pos_178"
" colon2-pos_179))"
"(if(equal? tmp_181 '#\\:)"
"(let-values()"
"(if colon2-pos_179"
"(let-values()(values '#f '#f '#f '#f))"
"(if colon1-pos_178"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" j_175))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" j_175"
" '#f)))))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179))))))))))"
" loop_174)"
" '0"
" '#f"
" '#f"
" '#f"
" '#f)))"
"(if(if start-package-version-pos_170"
"(if(> end-package-version-pos_171 start-package-version-pos_170)"
"(let-values(((or-part_184)(not colon2-pos_173)))"
"(if or-part_184 or-part_184(<(add1 colon2-pos_173) end-package-version-pos_171)))"
" '#f)"
" '#f)"
"(let-values()"
"(if colon1-pos_172"
"(let-values()"
"(let-values(((colon1-end_185)"
"(let-values(((or-part_186) colon2-pos_173))"
"(if or-part_186 or-part_186 end-package-version-pos_171))))"
"(if(if(integer-sequence? v_168(add1 colon1-pos_172) colon1-end_185)"
"(let-values(((or-part_187)(not colon2-pos_173)))"
"(if or-part_187"
" or-part_187"
"(let-values(((tmp_188)(string-ref v_168(add1 colon2-pos_173))))"
"(if(equal? tmp_188 '#\\=)"
"(let-values()"
"(integer-sequence? v_168(+ '2 colon2-pos_173) end-package-version-pos_171))"
"(if(if(equal? tmp_188 '#\\>) '#t(equal? tmp_188 '#\\<))"
"(let-values()"
"(if(if(<(+ '2 colon2-pos_173) end-package-version-pos_171)"
"(char=? '#\\=(string-ref v_168(+ colon2-pos_173 '2)))"
" '#f)"
"(let-values()"
"(integer-sequence? v_168(+ '3 colon2-pos_173) end-package-version-pos_171))"
"(let-values()"
"(integer-sequence? v_168(+ '2 colon2-pos_173) end-package-version-pos_171))))"
"(let-values()"
"(integer-range-sequence?"
" v_168"
"(add1 colon2-pos_173)"
" end-package-version-pos_171)))))))"
" '#f)"
"(let-values()(values colon1-pos_172 end-package-version-pos_171))"
"(let-values()(values '#f '#f)))))"
"(let-values()(values '0 '0))))"
"(let-values()(values '#f '#f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_189 start_190 end_191)"
"(if(< start_190 end_191)"
"(let-values(((start_192) start_190)((end_193) end_191)((inc_194) '1))"
"(begin"
"(if(if(real? start_192)(if(real? end_193)(real? inc_194) '#f) '#f)"
"(void)"
"(let-values()(in-range start_192 end_193 inc_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(result_196 pos_197)"
"(if(< pos_197 end_193)"
"(let-values(((i_198) pos_197))"
"(if '#t"
"(let-values(((result_199)"
"(let-values(((result_200) result_196))"
"(let-values(((result_201)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_189 i_198) '#\\9)))))"
"(values result_201)))))"
"(if(if '#t(not((lambda x_202(not result_199)) i_198)) '#f)"
"(for-loop_195 result_199(+ pos_197 inc_194))"
" result_199))"
" result_196))"
" result_196))))"
" for-loop_195)"
" '#t"
" start_192)))"
" '#f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_203 start_204 end_205)"
"(if(< start_204 end_205)"
"(if(let-values(((start_206) start_204)((end_207) end_205)((inc_208) '1))"
"(begin"
"(if(if(real? start_206)(if(real? end_207)(real? inc_208) '#f) '#f)"
"(void)"
"(let-values()(in-range start_206 end_207 inc_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(result_210 pos_211)"
"(if(< pos_211 end_207)"
"(let-values(((i_212) pos_211))"
"(if '#t"
"(let-values(((result_213)"
"(let-values(((result_214) result_210))"
"(let-values(((result_215)"
"(let-values()"
"(let-values()"
"(let-values(((c_216)"
"(string-ref s_203 i_212)))"
"(let-values(((or-part_217)"
"(char=? c_216 '#\\-)))"
"(if or-part_217"
" or-part_217"
"(char<=? '#\\0 c_216 '#\\9))))))))"
"(values result_215)))))"
"(if(if '#t(not((lambda x_218(not result_213)) i_212)) '#f)"
"(for-loop_209 result_213(+ pos_211 inc_208))"
" result_213))"
" result_210))"
" result_210))))"
" for-loop_209)"
" '#t"
" start_206)))"
"(>="
" '1"
"(let-values(((start_219) start_204)((end_220) end_205)((inc_221) '1))"
"(begin"
"(if(if(real? start_219)(if(real? end_220)(real? inc_221) '#f) '#f)"
"(void)"
"(let-values()(in-range start_219 end_220 inc_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_223 pos_224)"
"(if(< pos_224 end_220)"
"(let-values(((i_225) pos_224))"
"(if '#t"
"(let-values(((result_226)"
"(let-values(((result_227) result_223))"
"(let-values(((result_228)"
"(let-values()"
"(+"
" result_227"
"(let-values()"
"(if(char=?(string-ref s_203 i_225) '#\\-)"
" '1"
" '0))))))"
"(values result_228)))))"
"(if '#t(for-loop_222 result_226(+ pos_224 inc_221)) result_226))"
" result_223))"
" result_223))))"
" for-loop_222)"
" '0"
" start_219))))"
" '#f)"
" '#f)))"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'resolved-module-path"
" '#f"
" '1"
" '0"
" '#f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_22 ser_23 state_24)"
"(list 'deserialize-resolved-module-path(ser_23(1/resolved-module-path-name r_22)))))"
"(cons"
" prop:custom-write"
"(lambda(r_25 port_26 mode_27)"
"(begin"
" (if mode_27 (let-values () (write-string '\"#<resolved-module-path:\" port_26)) (void))"
" (fprintf port_26 '\"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_25)))"
" (if mode_27 (let-values () (write-string '\">\" port_26)) (void))))))"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'resolved-module-path)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 '0 'name))))"
"(define-values(deserialize-resolved-module-path)(lambda(n_28)(1/make-resolved-module-path n_28)))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_29)"
"(if(path? p_29)"
" (let-values () (string-append '\"\\\"\" (path->string p_29) '\"\\\"\"))"
"(if(symbol? p_29)"
" (let-values () (format '\"'~s\" p_29))"
"(let-values()"
"(format"
" '\"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_29))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_30 pos-next_31 init_32 pos-cont?_33 val-cont?_34 all-cont?_35)"
"(make-sequence '(i)(cdr p_29))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_36)"
"(lambda(fold-var_37 pos_38)"
"(if(if pos-cont?_33(pos-cont?_33 pos_38) '#t)"
"(let-values(((i_39)(pos->vals_30 pos_38)))"
"(if(if val-cont?_34(val-cont?_34 i_39) '#t)"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_37))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
" (let-values () (format '\" ~s\" i_39))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(if(if all-cont?_35(all-cont?_35 pos_38 i_39) '#t)"
"(for-loop_36 fold-var_40(pos-next_31 pos_38))"
" fold-var_40))"
" fold-var_37))"
" fold-var_37))))"
" for-loop_36)"
" null"
" init_32)))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_43)"
"(let-values(((name_44)(1/resolved-module-path-name r_43)))(if(pair? name_44)(car name_44) name_44))))"
"(define-values(resolved-module-paths)(make-weak-hash))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_45)"
"(begin"
"(if(let-values(((or-part_46)(symbol? p_45)))"
"(if or-part_46"
" or-part_46"
"(let-values(((or-part_47)(if(path? p_45)(complete-path? p_45) '#f)))"
"(if or-part_47"
" or-part_47"
"(if(pair? p_45)"
"(if(pair?(cdr p_45))"
"(if(list? p_45)"
"(if(let-values(((or-part_48)(symbol?(car p_45))))"
"(if or-part_48 or-part_48(if(path?(car p_45))(complete-path?(car p_45)) '#f)))"
"(let-values(((lst_49)(cdr p_45)))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(result_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((s_53)(unsafe-car lst_52)))"
"(if '#t"
"(let-values(((result_54)"
"(let-values(((result_55) result_51))"
"(let-values(((result_56)"
"(let-values()"
"(let-values()"
"(symbol? s_53)))))"
"(values result_56)))))"
"(if(if '#t(not((lambda x_57(not result_54)) s_53)) '#f)"
"(for-loop_50 result_54(unsafe-cdr lst_52))"
" result_54))"
" result_51))"
" result_51))))"
" for-loop_50)"
" '#t"
" lst_49)))"
" '#f)"
" '#f)"
" '#f)"
" '#f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
" '\"(or/c symbol?\\n\""
" '\" (and/c path? complete-path?)\\n\""
" '\" (cons/c (or/c symbol?\\n\""
" '\" (and/c path? complete-path?))\\n\""
" '\" (non-empty-listof symbol?)))\")"
" p_45)))"
"(let-values(((or-part_58)"
"(let-values(((e_59)(hash-ref resolved-module-paths p_45 '#f)))"
"(if e_59(ephemeron-value e_59) '#f))))"
"(if or-part_58"
" or-part_58"
"(let-values(((r_60)(resolved-module-path1.1 p_45)))"
"(begin(hash-set! resolved-module-paths p_45(make-ephemeron p_45 r_60)) r_60)))))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_61)"
"(let-values(((name_62)(1/resolved-module-path-name r_61)))"
"(let-values(((root-name_63)(if(pair? name_62)(car name_62) name_62)))"
"(let-values(((root-mod-path_64)(if(path? root-name_63) root-name_63(list 'quote root-name_63))))"
"(if(pair? name_62)(list* 'submod root-mod-path_64(cdr name_62)) root-mod-path_64))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!)"
"(let-values(((struct:_65 make-_66 ?_67 -ref_68 -set!_69)"
"(make-struct-type"
" 'module-path-index"
" '#f"
" '4"
" '0"
" '#f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_101 port_102 mode_103)"
"(begin"
" (write-string '\"#<module-path-index\" port_102)"
"(if(top-level-module-path-index? r_101)"
" (let-values () (fprintf port_102 '\":top-level\"))"
"(if(module-path-index-path r_101)"
"(let-values()"
"(let-values(((l_104)"
"((letrec-values(((loop_105)"
"(lambda(r_106)"
"(if(not r_106)"
"(let-values() null)"
"(if(module-path-index-path r_106)"
"(let-values()"
"(cons"
" (format '\"~.s\" (module-path-index-path r_106))"
"(loop_105(module-path-index-base r_106))))"
"(if(module-path-index-resolved r_106)"
"(let-values()"
"(list"
" '\"+\""
"(format"
" '\"~a\""
"(module-path-index-resolved r_106))))"
"(let-values() null)))))))"
" loop_105)"
" r_101)))"
"(fprintf"
" port_102"
" '\":~.a\""
"(apply"
" string-append"
"(car l_104)"
"(alt-reverse"
"(let-values(((lst_107)(cdr l_104)))"
"(begin"
"(if(list? lst_107)(void)(let-values()(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_109 lst_110)"
"(if(pair? lst_110)"
"(let-values(((i_111)(unsafe-car lst_110)))"
"(if '#t"
"(let-values(((fold-var_112)"
"(let-values(((fold-var_113)"
" fold-var_109))"
"(let-values(((fold-var_114)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
" '\" ~a\""
" i_111))"
" fold-var_113))))"
"(values fold-var_114)))))"
"(if '#t"
"(for-loop_108 fold-var_112(unsafe-cdr lst_110))"
" fold-var_112))"
" fold-var_109))"
" fold-var_109))))"
" for-loop_108)"
" null"
" lst_107))))))))"
"(if(module-path-index-resolved r_101)"
" (let-values () (fprintf port_102 '\"=~a\" (module-path-index-resolved r_101)))"
"(void))))"
" (write-string '\">\" port_102))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_115 b_116 eql?_117)"
"(if(eql?_117(module-path-index-path a_115)(module-path-index-path b_116))"
"(eql?_117(module-path-index-base a_115)(module-path-index-base b_116))"
" '#f))"
"(lambda(a_118 hash-code_119)"
"(+(hash-code_119(module-path-index-path a_118))(hash-code_119(module-path-index-base a_118))))"
"(lambda(a_120 hash-code_121)"
"(+"
"(hash-code_121(module-path-index-path a_120))"
"(hash-code_121(module-path-index-base a_120)))))))"
"(current-inspector)"
" '#f"
" '(0 1 3)"
" '#f"
" 'module-path-index)))"
"(values"
" struct:_65"
" make-_66"
" ?_67"
"(make-struct-field-accessor -ref_68 '0 'path)"
"(make-struct-field-accessor -ref_68 '1 'base)"
"(make-struct-field-accessor -ref_68 '2 'resolved)"
"(make-struct-field-accessor -ref_68 '3 'shift-cache)"
"(make-struct-field-mutator -set!_69 '2 'resolved))))"
"(define-values"
"(1/deserialize-module-path-index)"
"(case-lambda"
"((path_122 base_123)(1/module-path-index-join path_122 base_123))"
"((name_124)(make-self-module-path-index(1/make-resolved-module-path name_124)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_125)"
"(lambda(mpi5_126 load?3_127 load?4_128)"
"(let-values(((mpi_129) mpi5_126))"
"(let-values(((load?_130)(if load?4_128 load?3_127 '#f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_129)"
"(void)"
"(let-values()"
" (raise-argument-error 'module-path-index-resolve '\"module-path-index?\" mpi_129)))"
"(let-values(((or-part_131)(module-path-index-resolved mpi_129)))"
"(if or-part_131"
" or-part_131"
"(let-values(((mod-name_132)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_129)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_129)"
" load?_130)"
" '#f"
" load?_130)))"
"(begin"
"(if(1/resolved-module-path? mod-name_132)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
" '\"current module name resolver's result is not a resolved module path\""
" '\"result\""
" mod-name_132)))"
"(set-module-path-index-resolved! mpi_129 mod-name_132)"
" mod-name_132)))))))))))"
"(case-lambda"
"((mpi_133)(module-path-index-resolve6_125 mpi_133 '#f '#f))"
"((mpi_134 load?3_135)(module-path-index-resolve6_125 mpi_134 load?3_135 '#t)))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_136)"
"(lambda(mod-path10_137 base11_138 submod8_139 submod9_140)"
"(let-values(((mod-path_141) mod-path10_137))"
"(let-values(((base_142) base11_138))"
"(let-values(((submod_143)(if submod9_140 submod8_139 '#f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_144)(not mod-path_141)))"
"(if or-part_144 or-part_144(1/module-path? mod-path_141)))"
"(void)"
"(let-values()"
" (raise-argument-error 'module-path-index-join '\"(or/c #f module-path?)\" mod-path_141)))"
"(if(let-values(((or-part_145)(not base_142)))"
"(if or-part_145"
" or-part_145"
"(let-values(((or-part_146)(1/resolved-module-path? base_142)))"
"(if or-part_146 or-part_146(1/module-path-index? base_142)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
" '\"(or/c #f resolved-module-path? module-path-index?)\""
" base_142)))"
"(if(let-values(((or-part_147)(not submod_143)))"
"(if or-part_147"
" or-part_147"
"(if(pair? submod_143)"
"(if(list? submod_143)(andmap2 symbol? submod_143) '#f)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
" '\"(or/c #f (non-empty-listof symbol?))\""
" submod_143)))"
"(if(if(not mod-path_141) base_142 '#f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
" '\"cannot combine #f path with non-#f base\""
" '\"given base\""
" base_142))"
"(void))"
"(if(if submod_143 mod-path_141 '#f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
" '\"cannot combine #f submodule list with non-#f module path\""
" '\"given module path\""
" mod-path_141"
" '\"given submodule list\""
" submod_143))"
"(void))"
"(if submod_143"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_143))))"
"(let-values()"
"(let-values(((keep-base_148)"
"(if(path? mod-path_141)"
"(let-values() '#f)"
"(if(if(pair? mod-path_141)(eq? 'quote(car mod-path_141)) '#f)"
"(let-values() '#f)"
"(if(symbol? mod-path_141)"
"(let-values() '#f)"
"(let-values() base_142))))))"
"(module-path-index2.1 mod-path_141 keep-base_148 '#f(make-shift-cache)))))))))))))"
"(case-lambda"
"((mod-path_149 base_150)(module-path-index-join12_136 mod-path_149 base_150 '#f '#f))"
"((mod-path_151 base_152 submod8_153)(module-path-index-join12_136 mod-path_151 base_152 submod8_153 '#t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_154 load?_155)"
"(if(1/module-path-index? base_154)(1/module-path-index-resolve base_154 load?_155) base_154)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_156)"
"(begin"
"(if(1/module-path-index? mpi_156)"
"(void)"
" (let-values () (raise-argument-error 'module-path-index-split '\"module-path-index?\" mpi_156)))"
"(values(module-path-index-path mpi_156)(module-path-index-base mpi_156)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_157)"
"(begin"
"(if(1/module-path-index? mpi_157)"
"(void)"
" (let-values () (raise-argument-error 'module-path-index-submodule '\"module-path-index?\" mpi_157)))"
"(if(not(module-path-index-path mpi_157))"
"(let-values(((r_158)(module-path-index-resolved mpi_157)))"
"(if r_158"
"(let-values(((p_159)(1/resolved-module-path-name r_158)))(if(pair? p_159)(cdr p_159) '#f))"
" '#f))"
" '#f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_160)(module-path-index2.1 '#f '#f name_160(make-shift-cache)))"
"((name_161 enclosing_162)"
"(make-self-module-path-index"
"(let-values(((name23_163) name_161)"
"((temp24_164)(if enclosing_162(1/module-path-index-resolve enclosing_162) '#f)))"
"(if(variable-reference-constant?(#%variable-reference build-module-name20.1))"
"(build-module-name18.1 '#f '#f name23_163 temp24_164)"
"(build-module-name20.1 name23_163 temp24_164)))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_165)"
"(let-values(((r_166)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_165))))"
"(let-values(((or-part_167)"
"(let-values(((e_168)(hash-ref generic-self-mpis r_166 '#f)))"
"(if e_168(ephemeron-value e_168) '#f))))"
"(if or-part_167"
" or-part_167"
"(let-values(((mpi_169)(module-path-index2.1 '#f '#f r_166(make-shift-cache))))"
"(begin(hash-set! generic-self-mpis r_166(make-ephemeron r_166 mpi_169)) mpi_169)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_170)"
"(let-values(((name_171)(1/resolved-module-path-name r_170)))"
"(1/make-resolved-module-path"
"(if(symbol? name_171) generic-module-name(cons generic-module-name(cdr name_171)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_172)"
"(let-values(((r_173)(module-path-index-resolved mpi_172)))"
"(if r_173"
"(let-values()"
"(set-module-path-index-resolved! mpi_172(resolved-module-path-to-generic-resolved-module-path r_173)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_174 from-mpi_175 to-mpi_176)"
"(if(eq? mpi_174 from-mpi_175)"
"(let-values() to-mpi_176)"
"(let-values()"
"(let-values(((base_177)(module-path-index-base mpi_174)))"
"(if(not base_177)"
"(let-values() mpi_174)"
"(let-values()"
"(let-values(((shifted-base_178)(module-path-index-shift base_177 from-mpi_175 to-mpi_176)))"
"(if(eq? shifted-base_178 base_177)"
"(let-values() mpi_174)"
"(let-values(((c88575_179)"
"(shift-cache-ref(module-path-index-shift-cache shifted-base_178) mpi_174)))"
"(if c88575_179"
" c88575_179"
"(let-values()"
"(let-values(((shifted-mpi_180)"
"(module-path-index2.1"
"(module-path-index-path mpi_174)"
" shifted-base_178"
" '#f"
"(make-shift-cache))))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache shifted-base_178) mpi_174 shifted-mpi_180)"
" shifted-mpi_180))))))))))))))"
"(define-values(make-shift-cache)(lambda()(make-weak-hasheq)))"
"(define-values(shift-cache-ref)(lambda(cache_181 v_182)(hash-ref cache_181 v_182 '#f)))"
"(define-values(shift-cache-set!)(lambda(cache_183 v_184 r_185)(hash-set! cache_183 v_184 r_185)))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_186)(eq? top-level-module-path-index mpi_186)))"
"(define-values"
"(resolve-module-path)"
"(lambda(mod-path_187 base_188)((1/current-module-name-resolver) mod-path_187 base_188 '#f '#t)))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
"(case-lambda"
"((name_189 from-namespace_190)(void))"
"((p_191 enclosing_192 source-stx-stx_193 load?_194)"
"(begin"
"(if(1/module-path? p_191)"
"(void)"
" (let-values () (raise-argument-error 'core-module-name-resolver '\"module-path?\" p_191)))"
"(if(let-values(((or-part_195)(not enclosing_192)))"
"(if or-part_195 or-part_195(1/resolved-module-path? enclosing_192)))"
"(void)"
" (let-values () (raise-argument-error 'core-module-name-resolver '\"resolved-module-path?\" enclosing_192)))"
"(if(if(list? p_191)"
"(if(=(length p_191) '2)(if(eq? 'quote(car p_191))(symbol?(cadr p_191)) '#f) '#f)"
" '#f)"
"(let-values()(1/make-resolved-module-path(cadr p_191)))"
" (if (if (list? p_191) (if (eq? 'submod (car p_191)) (equal? '\"..\" (cadr p_191)) '#f) '#f)"
"(let-values()"
"(let-values(((lst_196)(cdr p_191)))"
"(begin"
"(if(list? lst_196)(void)(let-values()(in-list lst_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(enclosing_198 lst_199)"
"(if(pair? lst_199)"
"(let-values(((s_200)(unsafe-car lst_199)))"
"(if '#t"
"(let-values(((enclosing_201)"
"(let-values(((enclosing_202) enclosing_198))"
"(let-values(((enclosing_203)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:337:10_204)"
" build-module-name20.1)"
"((s25_205) s_200)"
"((enclosing26_206)"
" enclosing_202)"
"((p27_207) p_191))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p27_207"
" '#t"
" s25_205"
" enclosing26_206)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:337:10_204"
" keyword-procedure-extract"
" '(#:original)"
" '4)"
" '(#:original)"
"(list p27_207)"
" s25_205"
" enclosing26_206))))))"
"(values enclosing_203)))))"
"(if '#t(for-loop_197 enclosing_201(unsafe-cdr lst_199)) enclosing_201))"
" enclosing_198))"
" enclosing_198))))"
" for-loop_197)"
" enclosing_192"
" lst_196))))"
" (if (if (list? p_191) (if (eq? 'submod (car p_191)) (equal? '\".\" (cadr p_191)) '#f) '#f)"
"(let-values()"
"(let-values(((lst_208)(cddr p_191)))"
"(begin"
"(if(list? lst_208)(void)(let-values()(in-list lst_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(enclosing_210 lst_211)"
"(if(pair? lst_211)"
"(let-values(((s_212)(unsafe-car lst_211)))"
"(if '#t"
"(let-values(((enclosing_213)"
"(let-values(((enclosing_214) enclosing_210))"
"(let-values(((enclosing_215)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:342:10_216)"
" build-module-name20.1)"
"((s28_217) s_212)"
"((enclosing29_218)"
" enclosing_214)"
"((p30_219) p_191))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p30_219"
" '#t"
" s28_217"
" enclosing29_218)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:342:10_216"
" keyword-procedure-extract"
" '(#:original)"
" '4)"
" '(#:original)"
"(list p30_219)"
" s28_217"
" enclosing29_218))))))"
"(values enclosing_215)))))"
"(if '#t(for-loop_209 enclosing_213(unsafe-cdr lst_211)) enclosing_213))"
" enclosing_210))"
" enclosing_210))))"
" for-loop_209)"
" enclosing_192"
" lst_208))))"
"(if(if(list? p_191)(eq? 'submod(car p_191)) '#f)"
"(let-values()"
"(let-values(((base_220)((1/current-module-name-resolver)(cadr p_191) enclosing_192 '#f '#f)))"
"(let-values(((lst_221)(cddr p_191)))"
"(begin"
"(if(list? lst_221)(void)(let-values()(in-list lst_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(enclosing_223 lst_224)"
"(if(pair? lst_224)"
"(let-values(((s_225)(unsafe-car lst_224)))"
"(if '#t"
"(let-values(((enclosing_226)"
"(let-values(((enclosing_227) enclosing_223))"
"(let-values(((enclosing_228)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:347:12_229)"
" build-module-name20.1)"
"((s31_230) s_225)"
"((enclosing32_231)"
" enclosing_227)"
"((p33_232) p_191))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p33_232"
" '#t"
" s31_230"
" enclosing32_231)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:347:12_229"
" keyword-procedure-extract"
" '(#:original)"
" '4)"
" '(#:original)"
"(list p33_232)"
" s31_230"
" enclosing32_231))))))"
"(values enclosing_228)))))"
"(if '#t"
"(for-loop_222 enclosing_226(unsafe-cdr lst_224))"
" enclosing_226))"
" enclosing_223))"
" enclosing_223))))"
" for-loop_222)"
" base_220"
" lst_221)))))"
" (let-values () (error 'core-module-name-resolver '\"not a supported module path: ~v\" p_191)))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_233 original15_234 name16_235 enclosing17_236)"
"(let-values(((name_237) name16_235))"
"(let-values(((enclosing_238) enclosing17_236))"
"(let-values(((orig-name_239)(if original15_234 original14_233 name_237)))"
"(let-values()"
"(let-values(((enclosing-module-name_240)"
"(if enclosing_238(1/resolved-module-path-name enclosing_238) '#f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_240)"
"(let-values() name_237)"
"(if(symbol? enclosing-module-name_240)"
"(let-values()(list enclosing-module-name_240 name_237))"
" (if (equal? name_237 '\"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_240)"
" (let-values () (error '\"too many \\\"..\\\"s:\" orig-name_239))"
"(if(= '2(length enclosing-module-name_240))"
"(let-values()(car enclosing-module-name_240))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_240)))))))"
"(let-values()(append enclosing-module-name_240(list name_237))))))))))))))"
"(define-values"
"(unpack19.1)"
"(lambda(given-kws_241 given-args_242 name16_243 enclosing17_244)"
"(let-values(((original15_245)(pair? given-kws_241)))"
"(let-values(((original14_246)(if original15_245(car given-args_242)(void))))"
"(build-module-name18.1 original14_246 original15_245 name16_243 enclosing17_244)))))"
"(define-values"
"(build-module-name20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_247 given-argc_248)"
"(if(= given-argc_248 '4)"
"(let-values(((l1_249) given-kws_247))"
"(let-values(((l1_250)(if(null? l1_249) l1_249(if(eq?(car l1_249) '#:original)(cdr l1_249) l1_249))))"
"(null? l1_250)))"
" '#f))"
"(case-lambda"
"((given-kws_251 given-args_252 name_253 enclosing_254)"
"(unpack19.1 given-kws_251 given-args_252 name_253 enclosing_254)))"
" null"
" '(#:original)"
"(let-values(((build-module-name_255)"
"(case-lambda((name_256 enclosing_257)(unpack19.1 null null name_256 enclosing_257)))))"
" build-module-name_255)))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" '#f"
"(lambda(r_258)"
"(begin"
"(if(let-values(((or-part_259)(not r_258)))(if or-part_259 or-part_259(1/resolved-module-path? r_258)))"
"(void)"
" (let-values () (raise-argument-error 'current-module-declare-name '\"(or/c #f resolved-module-path?)\" r_258)))"
" r_258))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" '#f"
"(lambda(s_260)"
"(begin"
"(if(let-values(((or-part_261)(not s_260)))"
"(if or-part_261"
" or-part_261"
"(let-values(((or-part_262)(symbol? s_260)))"
"(if or-part_262 or-part_262(if(path? s_260)(complete-path? s_260) '#f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
" '\"(or/c #f symbol? (and/c path? complete-path?))\""
" s_260)))"
" s_260))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_263)"
"(let-values(((current-name_264)(1/current-module-declare-name)))"
"(let-values(((root-name_265)"
"(if current-name_264"
"(resolved-module-path-root-name current-name_264)"
"(if(pair? default-name_263)(car default-name_263) default-name_263))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_263)(cons root-name_265(cdr default-name_263)) root-name_265))))))"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 '0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 '0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 '0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 '0)))"
"(begin"
"(unsafe-struct-set! v_102 '0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 '0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 '0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 '0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
" (let-values () (error 'force '\"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
" (let-values () (error 'force '\"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 '0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 '0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 '0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 '0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
" (if write?_112 '\"#<promise!exn!~s>\" '\"#<promise!exn!~a>\")"
"(exn-message r_115))"
"(fprintf"
" port_111"
" (if write?_112 '\"#<promise!raise!~s>\" '\"#<promise!raise!~a>\")"
" r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
" (fprintf port_111 '\"#<promise:!running!~a>\" r_116)"
" (fprintf port_111 '\"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c89499_117)(object-name v_114)))"
"(if c89499_117"
" ((lambda (n_118) (fprintf port_111 '\"#<promise:~a>\" n_118)) c89499_117)"
" (let-values () (display '\"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 '0)))"
"(if(null? v_114)"
" (let-values () (fprintf port_111 '\"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
" (fprintf port_111 (if write?_112 '\"#<promise!~s>\" '\"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
" (display '\"#<promise!(values\" port_111)"
" (let-values (((fmt_119) (if write?_112 '\" ~s\" '\" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
" (display '\")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 '0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'prop:force '\"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" '#t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(make-struct-type"
" 'promise"
" '#f"
" '1"
" '0"
" '#f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" '#f"
" '()"
" '#f"
" 'promise)))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 '0 'val)"
"(make-struct-field-mutator -set!_130 '0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_147 make-_148 ?_149 -ref_150 -set!_151)"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" '0"
" '0"
" '#f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" '#f"
" '()"
" '#f"
" 'composable-promise)))"
"(values struct:_147 make-_148 ?_149)))"
"(define-values(lazy) make-composable-promise)"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_163 make-_164 ?_165 -ref_166 -set!_167)"
"(make-struct-type"
" 'reraise"
" '#f"
" '1"
" '0"
" '#f"
"(list(cons prop:procedure(lambda(this_184)(raise(reraise-val this_184)))))"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'reraise)))"
"(values struct:_163 make-_164 ?_165(make-struct-field-accessor -ref_166 '0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_185 make-_186 ?_187 -ref_188 -set!_189)"
"(make-struct-type"
" 'running"
" '#f"
" '1"
" '0"
" '#f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_206 port_207 write?_208)"
" (fprintf port_207 (if write?_208 '\"#<running:~s>\" '\"#<running:~a>\") (running-name this_206))))"
"(cons"
" prop:procedure"
"(lambda(this_209)"
"(let-values(((name_210)(running-name this_209)))"
"(if name_210"
" (error 'force '\"reentrant promise `~.s'\" name_210)"
" (error 'force '\"reentrant promise\"))))))"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'running)))"
"(values struct:_185 make-_186 ?_187(make-struct-field-accessor -ref_188 '0 'name))))"
"(define-values"
"(promise-forced?)"
"(lambda(promise_211)"
"(if(promise? promise_211)"
"(let-values(((v_212)(unsafe-struct-ref promise_211 '0)))"
"(let-values(((or-part_213)(not(procedure? v_212))))(if or-part_213 or-part_213(reraise? v_212))))"
" (raise-argument-error 'promise-forced? '\"promise?\" promise_211))))"
"(define-values"
"(promise-running?)"
"(lambda(promise_214)"
"(if(promise? promise_214)"
"(running?(unsafe-struct-ref promise_214 '0))"
" (raise-argument-error 'promise-running? '\"promise?\" promise_214))))"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" '0"
" '0"
" '#f"
"(list(cons prop:force(lambda(p_24)((unsafe-struct-ref p_24 '0)))))"
"(current-inspector)"
" '#f"
" '()"
" '#f"
" 'promise/name)))"
"(values struct:_8 make-_9 ?_10)))"
"(define-values(delay/name) make-promise/name)"
"(define-values"
"(struct:promise/strict make-promise/strict promise/strict?)"
"(let-values(((struct:_25 make-_26 ?_27 -ref_28 -set!_29)"
"(make-struct-type"
" 'promise/strict"
" struct:promise"
" '0"
" '0"
" '#f"
"(list(cons prop:force(lambda(p_41)(reify-result(unsafe-struct-ref p_41 '0)))))"
"(current-inspector)"
" '#f"
" '()"
" '#f"
" 'promise/strict)))"
"(values struct:_25 make-_26 ?_27)))"
"(define-values(delay/strict)(lambda(thunk_42)(make-promise/strict(call-with-values thunk_42 list))))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_43 make-_44 ?_45 -ref_46 -set!_47)"
"(make-struct-type"
" 'running-thread"
" struct:running"
" '1"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'running-thread)))"
"(values struct:_43 make-_44 ?_45(make-struct-field-accessor -ref_46 '0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(make-struct-type 'syncinfo '#f '4 '0 '#f null(current-inspector) '#f '(1 2 3) '#f 'syncinfo)))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 '0 'thunk)"
"(make-struct-field-accessor -ref_67 '1 'done-evt)"
"(make-struct-field-accessor -ref_67 '2 'done-sema)"
"(make-struct-field-accessor -ref_67 '3 'access-sema)"
"(make-struct-field-mutator -set!_68 '0 'thunk))))"
"(define-values"
"(struct:promise/sync make-promise/sync promise/sync?)"
"(let-values(((struct:_100 make-_101 ?_102 -ref_103 -set!_104)"
"(make-struct-type"
" 'promise/sync"
" struct:promise"
" '0"
" '0"
" '#f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_116)"
"(let-values(((v_117)(unsafe-struct-ref p_116 '0)))"
"(wrap-evt(if(syncinfo? v_117)(syncinfo-done-evt v_117) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_118)"
"(let-values(((v_119)(unsafe-struct-ref p_118 '0)))"
"(reify-result"
"(if(not(syncinfo? v_119))"
"(let-values() v_119)"
"(if(running-thread?(syncinfo-thunk v_119))"
"(let-values()"
"(let-values(((r_120)(syncinfo-thunk v_119)))"
"(if(eq?(running-thread-thread r_120)(current-thread))"
"(r_120)"
"(begin(sync(syncinfo-done-evt v_119))(unsafe-struct-ref p_118 '0)))))"
"(let-values()"
"(begin"
"(call-with-semaphore"
"(syncinfo-access-sema v_119)"
"(lambda(p_121 v_122)"
"(let-values(((thunk_123)(syncinfo-thunk v_122)))"
"(let-values(((done_124)(syncinfo-done-sema v_122)))"
"(if(running-thread? thunk_123)"
"(void)"
"(let-values()"
"(begin"
"(set-syncinfo-thunk!"
" v_122"
"(make-running-thread(object-name thunk_123)(current-thread)))"
"(call-with-exception-handler"
"(lambda(e_125)"
"(begin"
"(unsafe-struct-set! p_121 '0(make-reraise e_125))"
"(semaphore-post done_124)"
" e_125))"
"(lambda()"
"(begin"
"(unsafe-struct-set! p_121 '0(call-with-values thunk_123 list))"
"(semaphore-post done_124))))))))))"
" '#f"
" p_118"
" v_119)"
"(unsafe-struct-ref p_118 '0)))))))))"
"(cons"
" prop:custom-write"
"(lambda(p_126 port_127 write?_128)"
"(let-values(((v_129)(unsafe-struct-ref p_126 '0)))"
"(promise-printer"
"(if(syncinfo? v_129)(make-promise(syncinfo-thunk v_129)) p_126)"
" port_127"
" write?_128)))))"
"(current-inspector)"
" '#f"
" '()"
" '#f"
" 'promise/sync)))"
"(values struct:_100 make-_101 ?_102)))"
"(define-values"
"(delay/sync)"
"(lambda(thunk_130)"
"(let-values(((done-sema_131)(make-semaphore '0)))"
"(make-promise/sync"
"(make-syncinfo thunk_130(semaphore-peek-evt done-sema_131) done-sema_131(make-semaphore '1))))))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_132 make-_133 ?_134 -ref_135 -set!_136)"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" '0"
" '0"
" '#f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_148)"
"(let-values(((v_149)(unsafe-struct-ref p_148 '0)))"
"(wrap-evt(if(running? v_149)(running-thread-thread v_149) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_150)"
"(let-values(((v_151)(unsafe-struct-ref p_150 '0)))"
"(reify-result"
"(if(running-thread? v_151)"
"(let-values(((t_152)(running-thread-thread v_151)))"
"(let-values((()(begin(thread-wait t_152)(values))))"
"(let-values(((v_153)(unsafe-struct-ref p_150 '0)))"
"(if(running-thread? v_153)"
"(error"
" 'force"
" '\"promise's thread terminated ~a\\n promise: ~e\""
" '\"without result or exception\""
" p_150)"
" v_153))))"
" v_151))))))"
"(current-inspector)"
" '#f"
" '()"
" '#f"
" 'promise/thread)))"
"(values struct:_132 make-_133 ?_134)))"
"(define-values"
"(delay/thread)"
"(lambda(thunk_154 group_155)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_159)(not group_155)))"
"(if or-part_159 or-part_159(thread-group? group_155)))"
"(void)"
" (let-values () (raise-argument-error 'delay/thread '\"(or/c thread-group? #f)\" group_155)))"
"(values))))"
"(let-values(((initialized-sema_156)(make-semaphore)))"
"(letrec-values(((run_157)"
"(lambda()"
"(begin"
"(semaphore-wait initialized-sema_156)"
"(call-with-exception-handler"
"(lambda(e_160)"
"(begin"
"(unsafe-struct-set! p_158 '0(make-reraise e_160))"
"(kill-thread(current-thread))))"
"(lambda()(unsafe-struct-set! p_158 '0(call-with-values thunk_154 list)))))))"
"((p_158)"
"(make-promise/thread"
"(make-running-thread"
"(object-name thunk_154)"
"(if group_155"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" current-thread-group"
" group_155)"
"(let-values()(thread run_157)))"
"(thread run_157))))))"
"(begin(semaphore-post initialized-sema_156) p_158))))))"
"(define-values"
"(struct:promise/idle make-promise/idle promise/idle?)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(make-struct-type"
" 'promise/idle"
" struct:promise/thread"
" '0"
" '0"
" '#f"
"(list"
"(cons"
" prop:force"
"(lambda(p_177)"
"(let-values(((v_178)(unsafe-struct-ref p_177 '0)))"
"(reify-result"
"(if(procedure? v_178)"
"(let-values(((controller_179)"
"(if(running-thread? v_178)(running-thread-thread v_178)(v_178))))"
"(begin"
"(thread-send controller_179 'force!)"
"(thread-wait controller_179)"
"(unsafe-struct-ref p_177 '0)))"
" v_178))))))"
"(current-inspector)"
" '#f"
" '()"
" '#f"
" 'promise/idle)))"
"(values struct:_161 make-_162 ?_163)))"
"(define-values"
"(delay/idle)"
"(lambda(thunk_180 wait-for_181 work-while_182 tick_183 use*_184)"
"(let-values((()"
"(begin"
"(if(evt? wait-for_181)"
"(void)"
" (let-values () (raise-argument-error 'delay/idle '\"evt?\" wait-for_181)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(evt? work-while_182)"
"(void)"
" (let-values () (raise-argument-error 'delay/idle '\"evt?\" work-while_182)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(real? tick_183)(not(negative? tick_183)) '#f)"
"(void)"
" (let-values () (raise-argument-error 'delay/idle '\"(>=/c 0.0)\" tick_183)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(real? use*_184)"
"(void)"
" (let-values () (raise-argument-error 'delay/idle '\"real?\" use*_184)))"
"(values))))"
"(let-values(((use_185)"
"(if(<= use*_184 '0)"
"(let-values() '0)"
"(if(>= use*_184 '1)(let-values() '1)(let-values() use*_184)))))"
"(let-values(((work-time_186)(* tick_183 use_185)))"
"(let-values(((rest-time_187)(- tick_183 work-time_186)))"
"(letrec-values(((work_188)"
"(lambda()"
"(call-with-exception-handler"
"(lambda(e_192)"
"(begin"
"(unsafe-struct-set! p_191 '0(make-reraise e_192))"
"(kill-thread(current-thread))))"
"(lambda()(unsafe-struct-set! p_191 '0(call-with-values thunk_180 list))))))"
"((run_189)"
"(lambda()"
"(let-values(((force-evt_193)(thread-receive-evt)))"
"(let-values((()(begin(sync wait-for_181 force-evt_193)(values))))"
"(let-values((()"
"(begin"
"(unsafe-struct-set!"
" p_191"
" '0"
"(make-running-thread"
"(object-name thunk_180)"
" controller-thread_190))"
"(values))))"
"(let-values(((worker_194)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" current-thread-group"
"(make-thread-group))"
"(let-values()(thread work_188)))))"
"(if(if(>= use_185 '1)(equal? work-while_182 always-evt) '#f)"
"(let-values()(thread-wait worker_194))"
"(if(<= use_185 '0)"
"(let-values()"
"(begin"
"(thread-suspend worker_194)"
"(sync force-evt_193)"
"(thread-wait worker_194)))"
"(let-values()"
"(begin"
"(thread-suspend worker_194)"
"((letrec-values(((loop_195)"
"(lambda()"
"(if(eq?"
"(begin0"
"(let-values(((or-part_196)"
"(sync/timeout"
" rest-time_187"
" force-evt_193)))"
"(if or-part_196"
" or-part_196"
"(sync"
" work-while_182"
" force-evt_193)))"
"(thread-resume worker_194))"
" force-evt_193)"
"(thread-wait worker_194)"
"(if(sync/timeout work-time_186 worker_194)"
"(void)"
"(let-values()"
"(begin"
"(thread-suspend worker_194)"
"(loop_195))))))))"
" loop_195))))))))))))"
"((controller-thread_190)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" current-thread-group"
"(make-thread-group))"
"(let-values()(thread run_189))))"
"((p_191)"
"(make-promise/idle"
"(new:procedure-rename"
"(lambda() controller-thread_190)"
"(let-values(((or-part_197)(object-name thunk_180)))"
"(if or-part_197 or-part_197 'idle-thread))))))"
" p_191))))))))))"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) '#f) '#f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) '#f) '#f)))"
"(define-values"
"(phase<?)"
"(lambda(a_7 b_8)(if(not b_8)(let-values() '#f)(if(not a_7)(let-values() '#t)(let-values()(< a_7 b_8))))))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 '0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) '\"(or/c exact-integer? #f)\")"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-inspector-id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'serialize-state"
" '#f"
" '9"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 3 4 5 6 7 8)"
" '#f"
" 'serialize-state)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 '1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 '2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 '3 'scopes)"
"(make-struct-field-accessor -ref_4 '4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 '5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 '6 'props)"
"(make-struct-field-accessor -ref_4 '7 'interned-props)"
"(make-struct-field-accessor -ref_4 '8 'inspector-id))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_62 inspector-id_63)"
"(serialize-state1.1"
" reachable-scopes_62"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
" inspector-id_63)))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_64 state_65)"
"(let-values(((or-part_66)(hash-ref(serialize-state-scopes state_65) scs_64 '#f)))"
"(if or-part_66 or-part_66(begin(hash-set!(serialize-state-scopes state_65) scs_64 scs_64) scs_64)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_67 state_68)"
"(let-values(((or-part_69)(hash-ref(serialize-state-shifted-multi-scopes state_68) sms_67 '#f)))"
"(if or-part_69"
" or-part_69"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_68) sms_67 sms_67) sms_67)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_70 state_71)"
"(if(null? mpi-shifts_70)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_72)(intern-mpi-shifts(cdr mpi-shifts_70) state_71)))"
"(let-values(((tail-table_73)"
"(let-values(((or-part_74)(hash-ref(serialize-state-mpi-shifts state_71) tail_72 '#f)))"
"(if or-part_74"
" or-part_74"
"(let-values(((ht_75)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_71) tail_72 ht_75) ht_75))))))"
"(let-values(((or-part_76)(hash-ref tail-table_73(car mpi-shifts_70) '#f)))"
"(if or-part_76"
" or-part_76"
"(let-values(((v_77)(cons(car mpi-shifts_70) tail_72)))"
"(begin(hash-set! tail-table_73(car mpi-shifts_70) v_77) v_77))))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_78 get-preserved-props_79 state_80)"
"(let-values(((v_81)(hash-ref(serialize-state-props state_80) all-props_78 'no)))"
"(if(eq? v_81 'no)"
"(let-values()"
"(let-values(((preserved-props_82)(get-preserved-props_79)))"
"(let-values(((p_83)"
"(if(zero?(hash-count preserved-props_82))"
"(let-values() '#f)"
"(let-values(((c91861_84)"
"(hash-ref(serialize-state-interned-props state_80) preserved-props_82 '#f)))"
"(if c91861_84"
"((lambda(p_85) p_85) c91861_84)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_80)"
" preserved-props_82"
" preserved-props_82)"
" preserved-props_82)))))))"
"(begin(hash-set!(serialize-state-props state_80) all-props_78 p_83) p_83))))"
"(let-values() v_81)))))"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 '#f) '#f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) '#f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) '#f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) '#f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) '#f)"
"(all-fields-immutable? rk_8)))))))))))"
"(define-values"
"(datum-map)"
"(let-values(((datum-map5_1)"
"(lambda(s3_2 f4_3 seen1_4 seen2_5)"
"(let-values(((s_6) s3_2))"
"(let-values(((f_7) f4_3))"
"(let-values(((seen_8)(if seen2_5 seen1_4 '#f)))"
"(let-values()"
"((letrec-values(((loop_9)"
"(lambda(tail?_10 s_11 prev-depth_12 prev-seen_13)"
"(let-values(((depth_14)(add1 prev-depth_12)))"
"(let-values(((seen_15)"
"(if(if prev-seen_13"
"(if(> depth_14 '32)(datum-has-elements? s_11) '#f)"
" '#f)"
"(let-values()"
"(if(hash-ref prev-seen_13 s_11 '#f)"
"(let-values()"
"((hash-ref prev-seen_13 'cycle-fail) s_11))"
"(let-values()(hash-set prev-seen_13 s_11 '#t))))"
"(let-values() prev-seen_13))))"
"(if(pair? s_11)"
"(let-values()"
"(f_7"
" tail?_10"
"(cons"
"(loop_9 '#f(car s_11) depth_14 seen_15)"
"(loop_9 '#t(cdr s_11) depth_14 seen_15))))"
"(if(vector? s_11)"
"(let-values()"
"(f_7"
" '#f"
"(vector->immutable-vector"
"(let-values(((len_16)(vector-length s_11)))"
"(begin"
"(if(exact-nonnegative-integer? len_16)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
" '\"exact-nonnegative-integer?\""
" len_16)))"
"(let-values(((v_17)(make-vector len_16 '0)))"
"(begin"
"(if(zero? len_16)"
"(void)"
"(let-values()"
"(let-values(((vec_18 len_19)"
"(let-values(((vec_20) s_11))"
"(begin"
"(if(vector? vec_20)"
"(void)"
"(let-values()"
"(in-vector vec_20)))"
"(values"
" vec_20"
"(unsafe-vector-length"
" vec_20))))))"
"(begin"
" '#f"
"((letrec-values(((for-loop_21)"
"(lambda(i_22 pos_23)"
"(if(unsafe-fx<"
" pos_23"
" len_19)"
"(let-values(((e_24)"
"(unsafe-vector-ref"
" vec_18"
" pos_23)))"
"(if '#t"
"(let-values(((i_25)"
"(let-values(((i_26)"
" i_22))"
"(let-values(((i_27)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_17"
" i_26"
"(let-values()"
"(loop_9"
" '#f"
" e_24"
" depth_14"
" seen_15)))"
"(unsafe-fx+"
" '1"
" i_26)))))"
"(values"
" i_27)))))"
"(if(if '#t"
"(not"
"((lambda x_28"
"(unsafe-fx="
" i_25"
" len_16))"
" e_24))"
" '#f)"
"(for-loop_21"
" i_25"
"(unsafe-fx+"
" '1"
" pos_23))"
" i_25))"
" i_22))"
" i_22))))"
" for-loop_21)"
" '0"
" '0)))))"
" v_17)))))))"
"(if(box? s_11)"
"(let-values()"
"(f_7"
" '#f"
"(box-immutable(loop_9 '#f(unbox s_11) depth_14 seen_15))))"
"(let-values(((c93212_29)(immutable-prefab-struct-key s_11)))"
"(if c93212_29"
"((lambda(key_30)"
"(f_7"
" '#f"
"(apply"
" make-prefab-struct"
" key_30"
"(alt-reverse"
"(let-values(((v*_31 start*_32 stop*_33 step*_34)"
"(normalise-inputs"
" 'in-vector"
" '\"vector\""
"(lambda(x_35)(vector? x_35))"
"(lambda(x_36)"
"(unsafe-vector-length x_36))"
"(struct->vector s_11)"
" '1"
" '#f"
" '1)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_37)"
"(lambda(fold-var_38 idx_39)"
"(if(unsafe-fx<"
" idx_39"
" stop*_33)"
"(let-values(((e_40)"
"(unsafe-vector-ref"
" v*_31"
" idx_39)))"
"(if '#t"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_38))"
"(let-values(((fold-var_43)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_9"
" '#f"
" e_40"
" depth_14"
" seen_15))"
" fold-var_42))))"
"(values"
" fold-var_43)))))"
"(if '#t"
"(for-loop_37"
" fold-var_41"
"(unsafe-fx+"
" idx_39"
" '1))"
" fold-var_41))"
" fold-var_38))"
" fold-var_38))))"
" for-loop_37)"
" null"
" start*_32)))))))"
" c93212_29)"
"(if(if(hash? s_11)(immutable? s_11) '#f)"
"(let-values()"
"(if(hash-eq? s_11)"
"(let-values()"
"(f_7"
" '#f"
"(let-values(((ht_44) s_11))"
"(begin"
"(if((lambda(ht_45)(hash? ht_45)) ht_44)"
"(void)"
"(let-values()(default-in-hash ht_44)))"
"((letrec-values(((for-loop_46)"
"(lambda(table_47 i_48)"
"(if i_48"
"(let-values(((k_49 v_50)"
"(hash-iterate-key+value"
" ht_44"
" i_48)))"
"(if '#t"
"(let-values(((table_51)"
"(let-values(((table_52)"
" table_47))"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_54"
" val_55)"
"(let-values()"
"(values"
" k_49"
"(loop_9"
" '#f"
" v_50"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_52"
" key_54"
" val_55)))))"
"(values"
" table_53)))))"
"(if '#t"
"(for-loop_46"
" table_51"
"(hash-iterate-next"
" ht_44"
" i_48))"
" table_51))"
" table_47))"
" table_47))))"
" for-loop_46)"
" '#hasheq()"
"(hash-iterate-first ht_44))))))"
"(if(hash-eqv? s_11)"
"(let-values()"
"(f_7"
" '#f"
"(let-values(((ht_56) s_11))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(table_59 i_60)"
"(if i_60"
"(let-values(((k_61"
" v_62)"
"(hash-iterate-key+value"
" ht_56"
" i_60)))"
"(if '#t"
"(let-values(((table_63)"
"(let-values(((table_64)"
" table_59))"
"(let-values(((table_65)"
"(let-values()"
"(let-values(((key_66"
" val_67)"
"(let-values()"
"(values"
" k_61"
"(loop_9"
" '#f"
" v_62"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_64"
" key_66"
" val_67)))))"
"(values"
" table_65)))))"
"(if '#t"
"(for-loop_58"
" table_63"
"(hash-iterate-next"
" ht_56"
" i_60))"
" table_63))"
" table_59))"
" table_59))))"
" for-loop_58)"
" '#hasheqv()"
"(hash-iterate-first ht_56))))))"
"(let-values()"
"(f_7"
" '#f"
"(let-values(((ht_68) s_11))"
"(begin"
"(if((lambda(ht_69)(hash? ht_69)) ht_68)"
"(void)"
"(let-values()(default-in-hash ht_68)))"
"((letrec-values(((for-loop_70)"
"(lambda(table_71 i_72)"
"(if i_72"
"(let-values(((k_73"
" v_74)"
"(hash-iterate-key+value"
" ht_68"
" i_72)))"
"(if '#t"
"(let-values(((table_75)"
"(let-values(((table_76)"
" table_71))"
"(let-values(((table_77)"
"(let-values()"
"(let-values(((key_78"
" val_79)"
"(let-values()"
"(values"
" k_73"
"(loop_9"
" '#f"
" v_74"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_76"
" key_78"
" val_79)))))"
"(values"
" table_77)))))"
"(if '#t"
"(for-loop_70"
" table_75"
"(hash-iterate-next"
" ht_68"
" i_72))"
" table_75))"
" table_71))"
" table_71))))"
" for-loop_70)"
" '#hash()"
"(hash-iterate-first ht_68)))))))))"
"(if(null? s_11)"
"(let-values()(f_7 tail?_10 s_11))"
"(let-values()(f_7 '#f s_11))))))))))))))"
" loop_9)"
" '#f"
" s_6"
" '0"
" seen_8))))))))"
"(case-lambda"
"((s_80 f_81)(datum-map5_1 s_80 f_81 '#f '#f))"
"((s_82 f_83 seen1_84)(datum-map5_1 s_82 f_83 seen1_84 '#t)))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_85)"
"(let-values(((or-part_86)(pair? d_85)))"
"(if or-part_86"
" or-part_86"
"(let-values(((or-part_87)(vector? d_85)))"
"(if or-part_87"
" or-part_87"
"(let-values(((or-part_88)(box? d_85)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_89)(immutable-prefab-struct-key d_85)))"
"(if or-part_89"
" or-part_89"
"(if(hash? d_85)(if(immutable? d_85)(positive?(hash-count d_85)) '#f) '#f)))))))))))"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'preserved-property-value"
" '#f"
" '1"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'preserved-property-value)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 '0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_22)(if(preserved-property-value? v_22)(preserved-property-value-content v_22) v_22)))"
"(define-values(deserialize-preserved-property-value)(lambda(v_23)(preserved-property-value1.1 v_23)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_24 syntax?_25)"
"(datum-map"
" v_24"
"(lambda(tail?_26 v_27)"
"(begin"
"(if(let-values(((or-part_28)(null? v_27)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_29)(symbol? v_27)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(number? v_27)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(char? v_27)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(string? v_27)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(bytes? v_27)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(regexp? v_27)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(syntax?_25 v_27)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(pair? v_27)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(vector? v_27)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(box? v_27)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(hash? v_27)))"
"(if or-part_39"
" or-part_39"
"(immutable-prefab-struct-key v_27)))))))))))))))))))))))))"
"(void)"
"(let-values()"
" (raise-arguments-error 'write '\"disallowed value in preserved syntax property\" '\"value\" v_27)))"
" v_27))"
" disallow-cycles$1)))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
" (lambda (v_40) (raise-arguments-error 'write '\"disallowed cycle in preserved syntax property\" '\"at\" v_40))))"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-scope-propagations"
" syntax-shifted-multi-scopes"
" syntax-mpi-shifts"
" syntax-bulk-binding-registry"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'syntax"
" '#f"
" '10"
" '0"
" '#f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_67 reach_68)"
"(let-values(((prop_69)(syntax-scope-propagations s_67)))"
"(begin"
"(reach_68(if prop_69((propagation-ref prop_69) s_67)(syntax-content s_67)))"
"(reach_68(syntax-scopes s_67))"
"(reach_68(syntax-shifted-multi-scopes s_67))"
"(let-values(((ht_70)(syntax-props s_67)))"
"(begin"
"(if((lambda(ht_71)(hash? ht_71)) ht_70)(void)(let-values()(default-in-hash ht_70)))"
"((letrec-values(((for-loop_72)"
"(lambda(fold-var_73 i_74)"
"(if i_74"
"(let-values(((k_75 v_76)(hash-iterate-key+value ht_70 i_74)))"
"(if '#t"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78) fold-var_73))"
"(if(preserved-property-value?"
"(plain-property-value v_76))"
"(let-values(((fold-var_79) fold-var_78))"
"(let-values(((fold-var_80)"
"(let-values()"
"(begin"
"(let-values()"
"(reach_68 v_76))"
"(void)))))"
"(values fold-var_80)))"
" fold-var_78))))"
"(if '#t"
"(for-loop_72 fold-var_77(hash-iterate-next ht_70 i_74))"
" fold-var_77))"
" fold-var_73))"
" fold-var_73))))"
" for-loop_72)"
"(void)"
"(hash-iterate-first ht_70))))))))"
"(cons"
" prop:serialize"
"(lambda(s_81 ser_82 state_83)"
"(let-values(((prop_84)(syntax-scope-propagations s_81)))"
"(list"
" 'deserialize-syntax"
"(ser_82(if prop_84((propagation-ref prop_84) s_81)(syntax-content s_81)))"
"(ser_82(intern-scopes(syntax-scopes s_81) state_83))"
"(ser_82(intern-shifted-multi-scopes(syntax-shifted-multi-scopes s_81) state_83))"
"(ser_82(intern-mpi-shifts(syntax-mpi-shifts s_81) state_83))"
"(ser_82(syntax-srcloc s_81))"
"(ser_82"
"(intern-properties"
"(syntax-props s_81)"
"(lambda()"
"(let-values(((ht_85)(syntax-props s_81)))"
"(begin"
"(if((lambda(ht_86)(hash? ht_86)) ht_85)"
"(void)"
"(let-values()(default-in-hash ht_85)))"
"((letrec-values(((for-loop_87)"
"(lambda(table_88 i_89)"
"(if i_89"
"(let-values(((k_90 v_91)(hash-iterate-key+value ht_85 i_89)))"
"(if '#t"
"(let-values(((table_92)"
"(let-values(((table_93) table_88))"
"(if(preserved-property-value? v_91)"
"(let-values(((table_94) table_93))"
"(let-values(((table_95)"
"(let-values()"
"(let-values(((key_96"
" val_97)"
"(let-values()"
"(values"
" k_90"
"(check-value-to-preserve"
"(plain-property-value"
" v_91)"
" syntax?$1)))))"
"(hash-set"
" table_94"
" key_96"
" val_97)))))"
"(values table_95)))"
" table_93))))"
"(if '#t"
"(for-loop_87 table_92(hash-iterate-next ht_85 i_89))"
" table_92))"
" table_88))"
" table_88))))"
" for-loop_87)"
" '#hash()"
"(hash-iterate-first ht_85)))))"
" state_83))"
"(serialize-state-inspector-id state_83)"
"(ser_82(serialize-tamper(syntax-tamper s_81)))))))"
"(cons"
" prop:custom-write"
"(lambda(s_98 port_99 mode_100)"
" (let-values ((() (begin (write-string '\"#<syntax\" port_99) (values))))"
"(let-values(((srcloc_101)(syntax-srcloc s_98)))"
"(begin"
"(if srcloc_101"
"(let-values()"
"(let-values(((srcloc-str_102)(srcloc->string srcloc_101)))"
" (if srcloc-str_102 (let-values () (fprintf port_99 '\":~a\" srcloc-str_102)) (void))))"
"(void))"
" (fprintf port_99 '\" ~.s\" (syntax->datum$1 s_98))"
" (write-string '\">\" port_99)))))))"
"(current-inspector)"
" '#f"
" '(1 3 4 5 6 7 8)"
" '#f"
" 'syntax)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'content)"
"(make-struct-field-accessor -ref_4 '1 'scopes)"
"(make-struct-field-accessor -ref_4 '2 'scope-propagations)"
"(make-struct-field-accessor -ref_4 '3 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 '4 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 '5 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 '6 'srcloc)"
"(make-struct-field-accessor -ref_4 '7 'props)"
"(make-struct-field-accessor -ref_4 '8 'inspector)"
"(make-struct-field-accessor -ref_4 '9 'tamper)"
"(make-struct-field-mutator -set!_5 '0 'content)"
"(make-struct-field-mutator -set!_5 '2 'scope-propagations)"
"(make-struct-field-mutator -set!_5 '9 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(set))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hash())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 '#f empty-scopes '#f empty-shifted-multi-scopes empty-mpi-shifts '#f '#f empty-props '#f '#f))"
"(define-values(identifier?)(lambda(s_103)(if(syntax?$1 s_103)(symbol?(syntax-content s_103)) '#f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_104)(syntax-map s_104(lambda(tail?_105 x_106) x_106)(lambda(s_107 d_108) d_108) syntax-content)))"
"(define-values"
"(datum->syntax$2)"
"(let-values(((datum->syntax8_109)"
"(lambda(stx-c6_110 s7_111 stx-l2_112 stx-p3_113 stx-l4_114 stx-p5_115)"
"(let-values(((stx-c_116) stx-c6_110))"
"(let-values(((s_117) s7_111))"
"(let-values(((stx-l_118)(if stx-l4_114 stx-l2_112 '#f)))"
"(let-values(((stx-p_119)(if stx-p5_115 stx-p3_113 '#f)))"
"(let-values()"
"(let-values(((wrap_120)"
"(lambda(content_121)"
"(syntax1.1"
" content_121"
"(if stx-c_116(syntax-scopes stx-c_116) empty-scopes)"
" '#f"
"(if stx-c_116"
"(syntax-shifted-multi-scopes stx-c_116)"
" empty-shifted-multi-scopes)"
"(if stx-c_116(syntax-mpi-shifts stx-c_116) empty-mpi-shifts)"
"(if stx-c_116(syntax-bulk-binding-registry stx-c_116) '#f)"
"(if stx-l_118(syntax-srcloc stx-l_118) '#f)"
"(if stx-p_119(syntax-props stx-p_119) empty-props)"
"(if stx-c_116(syntax-inspector stx-c_116) '#f)"
"(if stx-c_116"
"(if(syntax-tamper stx-c_116)"
"(tamper-tainted-for-content content_121)"
" '#f)"
" '#f)))))"
"(syntax-map"
" s_117"
"(lambda(tail?_122 x_123)(if tail?_122 x_123(wrap_120 x_123)))"
" '#f"
" '#f"
" disallow-cycles))))))))))"
"(case-lambda"
"((stx-c_124 s_125)(datum->syntax8_109 stx-c_124 s_125 '#f '#f '#f '#f))"
"((stx-c_126 s_127 stx-l_128 stx-p3_129)(datum->syntax8_109 stx-c_126 s_127 stx-l_128 stx-p3_129 '#t '#t))"
"((stx-c_130 s_131 stx-l2_132)(datum->syntax8_109 stx-c_130 s_131 stx-l2_132 '#f '#t '#f)))))"
"(define-values"
"(syntax-map)"
"(let-values(((syntax-map16_133)"
"(lambda(s12_134 f13_135 d->s14_136 s-e15_137 seen10_138 seen11_139)"
"(let-values(((s_140) s12_134))"
"(let-values(((f_141) f13_135))"
"(let-values(((d->s_142) d->s14_136))"
"(let-values(((s-e_143) s-e15_137))"
"(let-values(((seen_144)(if seen11_139 seen10_138 '#f)))"
"(let-values()"
"((letrec-values(((loop_145)"
"(lambda(s_146)"
"(datum-map"
" s_146"
"(lambda(tail?_147 v_148)"
"(if(syntax?$1 v_148)"
"(let-values()"
"(if d->s_142"
"(d->s_142"
" v_148"
"(if s-e_143"
"(loop_145(s-e_143 v_148))"
"(syntax-content v_148)))"
" v_148))"
"(let-values()(f_141 tail?_147 v_148))))"
" seen_144))))"
" loop_145)"
" s_140))))))))))"
"(case-lambda"
"((s_149 f_150 d->s_151 s-e_152)(syntax-map16_133 s_149 f_150 d->s_151 s-e_152 '#f '#f))"
"((s_153 f_154 d->s_155 s-e_156 seen10_157)(syntax-map16_133 s_153 f_154 d->s_155 s-e_156 seen10_157 '#t)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
" (lambda (s_158) (raise-arguments-error 'datum->syntax '\"cannot create syntax from cyclic datum\" s_158))))"
"(define-values"
"(1/deserialize-syntax)"
"(lambda(content_159 scopes_160 shifted-multi-scopes_161 mpi-shifts_162 srcloc_163 props_164 inspector_165 tamper_166)"
"(syntax1.1"
" content_159"
" scopes_160"
" '#f"
" shifted-multi-scopes_161"
" mpi-shifts_162"
" '#f"
" srcloc_163"
"(if props_164"
"(let-values(((ht_167) props_164))"
"(begin"
"(if((lambda(ht_168)(hash? ht_168)) ht_167)(void)(let-values()(default-in-hash ht_167)))"
"((letrec-values(((for-loop_169)"
"(lambda(table_170 i_171)"
"(if i_171"
"(let-values(((k_172 v_173)(hash-iterate-key+value ht_167 i_171)))"
"(if '#t"
"(let-values(((table_174)"
"(let-values(((table_175) table_170))"
"(let-values(((table_176)"
"(let-values()"
"(let-values(((key_177 val_178)"
"(let-values()"
"(values"
" k_172"
"(preserved-property-value1.1"
" v_173)))))"
"(hash-set table_175 key_177 val_178)))))"
"(values table_176)))))"
"(if '#t(for-loop_169 table_174(hash-iterate-next ht_167 i_171)) table_174))"
" table_170))"
" table_170))))"
" for-loop_169)"
" '#hash()"
"(hash-iterate-first ht_167))))"
" empty-props)"
" inspector_165"
"(deserialize-tamper tamper_166))))"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(syntax-map"
" d_2"
"(lambda(tail?_3 x_4) x_4)"
"(lambda(sub-s_5 d_6)"
"(if(tamper-tainted?(syntax-tamper sub-s_5))"
"(let-values() sub-s_5)"
"(let-values()"
"(let-values(((the-struct_7) sub-s_5))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((tamper6_8)(tamper-tainted-for-content(syntax-content sub-s_5))))"
"(syntax1.1"
"(syntax-content the-struct_7)"
"(syntax-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
"(syntax-inspector the-struct_7)"
" tamper6_8))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_7))))))"
" '#f)))"
"(define-values(syntax-tainted?$1)(lambda(s_9)(tamper-tainted?(syntax-tamper s_9))))"
"(define-values(syntax-clean?)(lambda(s_10)(tamper-clean?(syntax-tamper s_10))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_11 insp_12)"
"(let-values(((t_13)(syntax-tamper s_11)))"
"(if(tamper-tainted? t_13)"
"(let-values() s_11)"
"(if(if t_13"
"(let-values(((or-part_14)(set-member? t_13 insp_12)))"
"(if or-part_14"
" or-part_14"
"(let-values(((ht_15) t_13))"
"(begin"
"(if((lambda(ht_16)(hash? ht_16)) ht_15)(void)(let-values()(default-in-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(result_18 i_19)"
"(if i_19"
"(let-values(((already-insp_20)(hash-iterate-key ht_15 i_19)))"
"(if '#t"
"(let-values(((result_21)"
"(let-values(((result_22) result_18))"
"(let-values(((result_23)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_20"
" insp_12)))))"
"(values result_23)))))"
"(if(if '#t(not((lambda x_24 result_21) already-insp_20)) '#f)"
"(for-loop_17 result_21(hash-iterate-next ht_15 i_19))"
" result_21))"
" result_18))"
" result_18))))"
" for-loop_17)"
" '#f"
"(hash-iterate-first ht_15))))))"
" '#f)"
"(let-values() s_11)"
"(let-values()"
"(let-values(((the-struct_25) s_11))"
"(if(syntax?$1 the-struct_25)"
"(let-values(((tamper7_26)(set-add(if t_13(remove-inferior t_13 insp_12)(seteq)) insp_12)))"
"(syntax1.1"
"(syntax-content the-struct_25)"
"(syntax-scopes the-struct_25)"
"(syntax-scope-propagations the-struct_25)"
"(syntax-shifted-multi-scopes the-struct_25)"
"(syntax-mpi-shifts the-struct_25)"
"(syntax-bulk-binding-registry the-struct_25)"
"(syntax-srcloc the-struct_25)"
"(syntax-props the-struct_25)"
"(syntax-inspector the-struct_25)"
" tamper7_26))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_25)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_27 insp_28)"
"(let-values(((ht_29) t_27))"
"(begin"
"(if((lambda(ht_30)(hash? ht_30)) ht_29)(void)(let-values()(default-in-hash-keys ht_29)))"
"((letrec-values(((for-loop_31)"
"(lambda(table_32 i_33)"
"(if i_33"
"(let-values(((already-insp_34)(hash-iterate-key ht_29 i_33)))"
"(if '#t"
"(let-values(((table_35)"
"(let-values(((table_36) table_32))"
"(if(inspector-superior-or-same? insp_28 already-insp_34)"
" table_36"
"(let-values(((table_37) table_36))"
"(let-values(((table_38)"
"(let-values()"
"(let-values(((key_39 val_40)"
"(let-values()"
"(values"
"(let-values() already-insp_34)"
" '#t))))"
"(hash-set table_37 key_39 val_40)))))"
"(values table_38)))))))"
"(if '#t(for-loop_31 table_35(hash-iterate-next ht_29 i_33)) table_35))"
" table_32))"
" table_32))))"
" for-loop_31)"
" '#hasheq()"
"(hash-iterate-first ht_29))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_41)"
"(lambda(s3_42 insp1_43 insp2_44)"
"(let-values(((s_45) s3_42))"
"(let-values(((insp_46)(if insp2_44 insp1_43 '#f)))"
"(let-values()"
"(let-values(((t_47)(syntax-tamper s_45)))"
"(if(not(tamper-armed? t_47))"
"(let-values() s_45)"
"(if(not insp_46)"
"(let-values()"
"(let-values(((the-struct_48) s_45))"
"(if(syntax?$1 the-struct_48)"
"(let-values(((tamper8_49) '#f))"
"(syntax1.1"
"(syntax-content the-struct_48)"
"(syntax-scopes the-struct_48)"
"(syntax-scope-propagations the-struct_48)"
"(syntax-shifted-multi-scopes the-struct_48)"
"(syntax-mpi-shifts the-struct_48)"
"(syntax-bulk-binding-registry the-struct_48)"
"(syntax-srcloc the-struct_48)"
"(syntax-props the-struct_48)"
"(syntax-inspector the-struct_48)"
" tamper8_49))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_48))))"
"(let-values()"
"(let-values(((new-t_50)(remove-inferior t_47 insp_46)))"
"(let-values(((the-struct_51) s_45))"
"(if(syntax?$1 the-struct_51)"
"(let-values(((tamper9_52)(if(not(set-empty? new-t_50)) new-t_50 '#f)))"
"(syntax1.1"
"(syntax-content the-struct_51)"
"(syntax-scopes the-struct_51)"
"(syntax-scope-propagations the-struct_51)"
"(syntax-shifted-multi-scopes the-struct_51)"
"(syntax-mpi-shifts the-struct_51)"
"(syntax-bulk-binding-registry the-struct_51)"
"(syntax-srcloc the-struct_51)"
"(syntax-props the-struct_51)"
"(syntax-inspector the-struct_51)"
" tamper9_52))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_51))))))))))))))"
"(case-lambda((s_53)(syntax-disarm4_41 s_53 '#f '#f))((s_54 insp1_55)(syntax-disarm4_41 s_54 insp1_55 '#t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_56 from-s_57)"
"(let-values(((t_58)(syntax-tamper s_56)))"
"(if(tamper-tainted? t_58)"
"(let-values() s_56)"
"(let-values()"
"(let-values(((from-t_59)(syntax-tamper from-s_57)))"
"(if(tamper-clean? from-t_59)"
"(let-values() s_56)"
"(if(tamper-tainted? from-t_59)"
"(let-values()"
"(let-values(((the-struct_60) s_56))"
"(if(syntax?$1 the-struct_60)"
"(let-values(((tamper10_61)(tamper-tainted-for-content(syntax-content s_56))))"
"(syntax1.1"
"(syntax-content the-struct_60)"
"(syntax-scopes the-struct_60)"
"(syntax-scope-propagations the-struct_60)"
"(syntax-shifted-multi-scopes the-struct_60)"
"(syntax-mpi-shifts the-struct_60)"
"(syntax-bulk-binding-registry the-struct_60)"
"(syntax-srcloc the-struct_60)"
"(syntax-props the-struct_60)"
"(syntax-inspector the-struct_60)"
" tamper10_61))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_60))))"
"(if(tamper-clean? t_58)"
"(let-values()"
"(let-values(((the-struct_62) s_56))"
"(if(syntax?$1 the-struct_62)"
"(let-values(((tamper11_63) from-t_59))"
"(syntax1.1"
"(syntax-content the-struct_62)"
"(syntax-scopes the-struct_62)"
"(syntax-scope-propagations the-struct_62)"
"(syntax-shifted-multi-scopes the-struct_62)"
"(syntax-mpi-shifts the-struct_62)"
"(syntax-bulk-binding-registry the-struct_62)"
"(syntax-srcloc the-struct_62)"
"(syntax-props the-struct_62)"
"(syntax-inspector the-struct_62)"
" tamper11_63))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_62))))"
"(let-values()"
"(let-values(((the-struct_64) s_56))"
"(if(syntax?$1 the-struct_64)"
"(let-values(((tamper12_65)"
"(let-values(((ht_66) from-t_59))"
"(begin"
"(if((lambda(ht_67)(hash? ht_67)) ht_66)"
"(void)"
"(let-values()(default-in-hash-keys ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(t_69 i_70)"
"(if i_70"
"(let-values(((from-i_71)"
"(hash-iterate-key ht_66 i_70)))"
"(if '#t"
"(let-values(((t_72)"
"(let-values(((t_73) t_69))"
"(let-values(((t_74)"
"(let-values()"
"(if(set-member?"
" t_73"
" from-i_71)"
"(let-values()"
" t_73)"
"(if(any-superior?"
" t_73"
" from-i_71)"
"(let-values()"
" t_73)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_73"
" from-i_71)"
" from-i_71))))))))"
"(values t_74)))))"
"(if '#t"
"(for-loop_68"
" t_72"
"(hash-iterate-next ht_66 i_70))"
" t_72))"
" t_69))"
" t_69))))"
" for-loop_68)"
" t_58"
"(hash-iterate-first ht_66))))))"
"(syntax1.1"
"(syntax-content the-struct_64)"
"(syntax-scopes the-struct_64)"
"(syntax-scope-propagations the-struct_64)"
"(syntax-shifted-multi-scopes the-struct_64)"
"(syntax-mpi-shifts the-struct_64)"
"(syntax-bulk-binding-registry the-struct_64)"
"(syntax-srcloc the-struct_64)"
"(syntax-props the-struct_64)"
"(syntax-inspector the-struct_64)"
" tamper12_65))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_64)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_75)"
"(if(tamper-tainted?(syntax-tamper s_75))"
" s_75"
"(let-values(((the-struct_76) s_75))"
"(if(syntax?$1 the-struct_76)"
"(let-values(((tamper13_77)(tamper-tainted-for-content(syntax-content s_75))))"
"(syntax1.1"
"(syntax-content the-struct_76)"
"(syntax-scopes the-struct_76)"
"(syntax-scope-propagations the-struct_76)"
"(syntax-shifted-multi-scopes the-struct_76)"
"(syntax-mpi-shifts the-struct_76)"
"(syntax-bulk-binding-registry the-struct_76)"
"(syntax-srcloc the-struct_76)"
"(syntax-props the-struct_76)"
"(syntax-inspector the-struct_76)"
" tamper13_77))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_76))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_78 from-i_79)"
"(let-values(((ht_80) t_78))"
"(begin"
"(if((lambda(ht_81)(hash? ht_81)) ht_80)(void)(let-values()(default-in-hash-keys ht_80)))"
"((letrec-values(((for-loop_82)"
"(lambda(result_83 i_84)"
"(if i_84"
"(let-values(((i_85)(hash-iterate-key ht_80 i_84)))"
"(if '#t"
"(let-values(((result_86)"
"(let-values(((result_87) result_83))"
"(let-values(((result_88)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_85 from-i_79)))))"
"(values result_88)))))"
"(if(if '#t(not((lambda x_89 result_86) i_85)) '#f)"
"(for-loop_82 result_86(hash-iterate-next ht_80 i_84))"
" result_86))"
" result_83))"
" result_83))))"
" for-loop_82)"
" '#f"
"(hash-iterate-first ht_80))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_90 i_91)"
"(let-values(((or-part_92)(eq? sup-i_90 i_91)))(if or-part_92 or-part_92(inspector-superior? sup-i_90 i_91)))))"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'fallback '#f '1 '0 '#f null 'prefab '#f '(0) '#f 'fallback)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 '0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_22)(if(fallback? smss_22)(car(fallback-search-list smss_22)) smss_22)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_23)"
"(let-values(((l_24)(cdr(fallback-search-list smss_23))))(if(null?(cdr l_24))(car l_24)(fallback1.1 l_24)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_25 smss/maybe-fallback_26)"
"(fallback1.1"
"(cons"
" smss_25"
"(if(fallback? smss/maybe-fallback_26)"
"(fallback-search-list smss/maybe-fallback_26)"
"(list smss/maybe-fallback_26))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_27 f_28)"
"(if(fallback? smss_27)"
"(let-values(((l_29)(fallback-search-list smss_27)))(fallback1.1(cons(f_28(car l_29))(cdr l_29))))"
"(f_28 smss_27))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_30 f_31)"
"(if(fallback? smss_30)"
"(fallback1.1"
"(alt-reverse"
"(let-values(((lst_32)(fallback-search-list smss_30)))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((smss_36)(unsafe-car lst_35)))"
"(if '#t"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38) fold-var_34))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()(f_31 smss_36))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(if '#t(for-loop_33 fold-var_37(unsafe-cdr lst_35)) fold-var_37))"
" fold-var_34))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32)))))"
"(f_31 smss_30))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_40)(if(fallback? smss_40)(fallback-search-list smss_40)(list smss_40))))"
"(define-values"
"(struct:scope"
" scope1.1"
" scope?"
" scope-id"
" scope-kind"
" scope-bindings"
" scope-bulk-bindings"
" set-scope-bindings!"
" set-scope-bulk-bindings!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'scope"
" '#f"
" '4"
" '0"
" '#f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_37 reachable-scopes_38 reach_39 register-trigger_40)"
"(if(scope-bindings s_37)"
"(let-values()"
"(register-bindings-reachable"
"(scope-bindings s_37)"
" reachable-scopes_38"
" reach_39"
" register-trigger_40))"
"(void))))"
"(cons prop:reach-scopes(lambda(s_41 reach_42)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(id_43 s_44 ser_45 state_46)"
"(if(if(empty-bindings?(scope-bindings s_44))"
"(empty-bulk-bindings?(scope-bulk-bindings s_44))"
" '#f)"
" '(void)"
"(list"
" 'deserialize-scope-fill!"
" id_43"
"(ser_45(prune-bindings-to-reachable(scope-bindings s_44) state_46))"
"(ser_45(prune-bulk-bindings-to-reachable(scope-bulk-bindings s_44) state_46))))))"
"(cons"
" prop:serialize"
"(lambda(s_47 ser_48 state_49)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_49) s_47)"
"(void)"
" (let-values () (error '\"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_47 top-level-common-scope)"
" '(deserialize-scope)"
"(list 'deserialize-scope(ser_48(scope-kind s_47)))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_50 port_51 mode_52)"
"(begin"
" (write-string '\"#<scope:\" port_51)"
"(display(scope-id sc_50) port_51)"
" (write-string '\":\" port_51)"
"(display(scope-kind sc_50) port_51)"
" (write-string '\">\" port_51)))))"
"(current-inspector)"
" '#f"
" '(0 1)"
" '#f"
" 'scope)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'id)"
"(make-struct-field-accessor -ref_4 '1 'kind)"
"(make-struct-field-accessor -ref_4 '2 'bindings)"
"(make-struct-field-accessor -ref_4 '3 'bulk-bindings)"
"(make-struct-field-mutator -set!_5 '2 'bindings)"
"(make-struct-field-mutator -set!_5 '3 'bulk-bindings))))"
"(define-values"
"(1/deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_53)(scope1.1(new-deserialize-scope-id!) kind_53(make-bindings)(make-bulk-bindings)))))"
"(define-values"
"(1/deserialize-scope-fill!)"
"(lambda(s_54 bindings_55 bulk-bindings_56)"
"(begin(set-scope-bindings! s_54 bindings_55)(set-scope-bulk-bindings! s_54 bulk-bindings_56))))"
"(define-values"
"(struct:multi-scope multi-scope2.1 multi-scope? multi-scope-id multi-scope-name multi-scope-scopes)"
"(let-values(((struct:_57 make-_58 ?_59 -ref_60 -set!_61)"
"(make-struct-type"
" 'multi-scope"
" '#f"
" '3"
" '0"
" '#f"
"(list"
"(cons prop:reach-scopes(lambda(ms_88 reach_89)(reach_89(multi-scope-scopes ms_88))))"
"(cons"
" prop:serialize"
"(lambda(ms_90 ser_91 state_92)"
"(list"
" 'deserialize-multi-scope"
"(ser_91(multi-scope-name ms_90))"
"(ser_91(multi-scope-scopes ms_90))))))"
"(current-inspector)"
" '#f"
" '(0 1 2)"
" '#f"
" 'multi-scope)))"
"(values"
" struct:_57"
" make-_58"
" ?_59"
"(make-struct-field-accessor -ref_60 '0 'id)"
"(make-struct-field-accessor -ref_60 '1 'name)"
"(make-struct-field-accessor -ref_60 '2 'scopes))))"
"(define-values"
"(1/deserialize-multi-scope)"
"(lambda(name_93 scopes_94)(multi-scope2.1(new-deserialize-scope-id!) name_93 scopes_94)))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_95 make-_96 ?_97 -ref_98 -set!_99)"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" '2"
" '0"
" '#f"
"(list"
"(cons prop:reach-scopes(lambda(s_121 reach_122)(reach_122(representative-scope-owner s_121))))"
"(cons"
" prop:serialize-fill!"
"(lambda(id_123 s_124 ser_125 state_126)"
"(list"
" 'deserialize-representative-scope-fill!"
" id_123"
"(ser_125(prune-bindings-to-reachable(scope-bindings s_124) state_126))"
"(ser_125(prune-bulk-bindings-to-reachable(scope-bulk-bindings s_124) state_126))"
"(ser_125(representative-scope-owner s_124)))))"
"(cons"
" prop:serialize"
"(lambda(s_127 ser_128 state_129)"
"(list"
" 'deserialize-representative-scope"
"(ser_128(scope-kind s_127))"
"(ser_128(representative-scope-phase s_127)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_130 port_131 mode_132)"
"(begin"
" (write-string '\"#<scope:\" port_131)"
"(display(scope-id sc_130) port_131)"
"(if(representative-scope-owner sc_130)"
"(let-values()"
"(begin"
" (write-string '\"=\" port_131)"
"(display(multi-scope-id(representative-scope-owner sc_130)) port_131)))"
"(void))"
" (write-string '\"@\" port_131)"
"(display(representative-scope-phase sc_130) port_131)"
" (write-string '\">\" port_131)))))"
"(current-inspector)"
" '#f"
" '()"
" '#f"
" 'representative-scope)))"
"(values"
" struct:_95"
" make-_96"
" ?_97"
"(make-struct-field-accessor -ref_98 '0 'owner)"
"(make-struct-field-accessor -ref_98 '1 'phase)"
"(make-struct-field-mutator -set!_99 '0 'owner)"
"(make-struct-field-mutator -set!_99 '1 'phase))))"
"(define-values"
"(1/deserialize-representative-scope)"
"(lambda(kind_133 phase_134)(representative-scope3.1(new-deserialize-scope-id!) kind_133 '#f '#f '#f phase_134)))"
"(define-values"
"(1/deserialize-representative-scope-fill!)"
"(lambda(s_135 bindings_136 bulk-bindings_137 owner_138)"
"(begin"
"(1/deserialize-scope-fill! s_135 bindings_136 bulk-bindings_137)"
"(set-representative-scope-owner! s_135 owner_138))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_139 make-_140 ?_141 -ref_142 -set!_143)"
"(make-struct-type"
" 'shifted-multi-scope"
" '#f"
" '2"
" '0"
" '#f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_165 reach_166)(reach_166(shifted-multi-scope-multi-scope sms_165))))"
"(cons"
" prop:serialize"
"(lambda(sms_167 ser_168 state_169)"
"(list"
" 'deserialize-shifted-multi-scope"
"(ser_168(shifted-multi-scope-phase sms_167))"
"(ser_168(shifted-multi-scope-multi-scope sms_167)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_170 port_171 mode_172)"
"(begin"
" (write-string '\"#<scope:\" port_171)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_170)) port_171)"
" (write-string '\"@\" port_171)"
"(display(shifted-multi-scope-phase sms_170) port_171)"
" (write-string '\">\" port_171)))))"
" '#f"
" '#f"
" '(0 1)"
" '#f"
" 'shifted-multi-scope)))"
"(values"
" struct:_139"
" make-_140"
" ?_141"
"(make-struct-field-accessor -ref_142 '0 'phase)"
"(make-struct-field-accessor -ref_142 '1 'multi-scope))))"
"(define-values"
"(1/deserialize-shifted-multi-scope)"
"(lambda(phase_173 multi-scope_174)(shifted-multi-scope4.1 phase_173 multi-scope_174)))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_175 make-_176 ?_177 -ref_178 -set!_179)"
"(make-struct-type"
" 'shifted-to-label-phase"
" '#f"
" '1"
" '0"
" '#f"
" null"
" 'prefab"
" '#f"
" '(0)"
" '#f"
" 'shifted-to-label-phase)))"
"(values struct:_175 make-_176 ?_177(make-struct-field-accessor -ref_178 '0 'from))))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at6.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_196 make-_197 ?_198 -ref_199 -set!_200)"
"(make-struct-type"
" 'bulk-binding-at"
" '#f"
" '2"
" '0"
" '#f"
"(list"
" (cons prop:reach-scopes (lambda (sms_222 reach_223) (error '\"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_224 ser_225 state_226)"
"(list"
" 'deserialize-bulk-binding-at"
"(ser_225(bulk-binding-at-scopes bba_224))"
"(ser_225(bulk-binding-at-bulk bba_224))))))"
"(current-inspector)"
" '#f"
" '(0 1)"
" '#f"
" 'bulk-binding-at)))"
"(values"
" struct:_196"
" make-_197"
" ?_198"
"(make-struct-field-accessor -ref_199 '0 'scopes)"
"(make-struct-field-accessor -ref_199 '1 'bulk))))"
"(define-values(1/deserialize-bulk-binding-at)(lambda(scopes_227 bulk_228)(bulk-binding-at6.1 scopes_227 bulk_228)))"
"(define-values(prop:bulk-binding bulk-binding? bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class7.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_229 make-_230 ?_231 -ref_232 -set!_233)"
"(make-struct-type"
" 'bulk-binding-class"
" '#f"
" '2"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1)"
" '#f"
" 'bulk-binding-class)))"
"(values"
" struct:_229"
" make-_230"
" ?_231"
"(make-struct-field-accessor -ref_232 '0 'get-symbols)"
"(make-struct-field-accessor -ref_232 '1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_255 s_256 extra-shifts_257)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_255))"
" b_255"
"(append extra-shifts_257(if s_256(syntax-mpi-shifts s_256) null)))))"
"(define-values(bulk-binding-create)(lambda(b_258)(bulk-binding-class-create(bulk-binding-ref b_258))))"
"(define-values(id-counter) '0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(make-bindings)(lambda() '#hasheq()))"
"(define-values(empty-bindings?)(lambda(bs_259)(zero?(hash-count bs_259))))"
"(define-values(make-bulk-bindings)(lambda() null))"
"(define-values(empty-bulk-bindings?)(lambda(bbs_260)(null? bbs_260)))"
"(define-values(top-level-common-scope)(scope1.1 '0 'module(make-bindings)(make-bulk-bindings)))"
"(define-values"
"(new-scope)"
"(lambda(kind_261)(scope1.1(new-scope-id!) kind_261(make-bindings)(make-bulk-bindings))))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope10_262)"
"(lambda(name8_263 name9_264)"
"(let-values(((name_265)(if name9_264 name8_263 '#f)))"
"(let-values()"
"(shifted-multi-scope4.1 '0(multi-scope2.1(new-scope-id!) name_265(make-hasheqv))))))))"
"(case-lambda(()(new-multi-scope10_262 '#f '#f))((name8_266)(new-multi-scope10_262 name8_266 '#t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_267 phase_268)"
"(let-values(((or-part_269)(hash-ref(multi-scope-scopes ms_267) phase_268 '#f)))"
"(if or-part_269"
" or-part_269"
"(let-values(((s_270)"
"(representative-scope3.1"
"(new-scope-id!)"
" 'module"
"(make-bindings)"
"(make-bulk-bindings)"
" ms_267"
" phase_268)))"
"(begin(hash-set!(multi-scope-scopes ms_267) phase_268 s_270) s_270))))))"
"(define-values(scope>?)(lambda(sc1_271 sc2_272)(>(scope-id sc1_271)(scope-id sc2_272))))"
"(define-values"
"(apply-scope)"
"(lambda(s_273 sc_274 op_275 prop-op_276)"
"(if(shifted-multi-scope? sc_274)"
"(apply-shifted-multi-scope s_273 sc_274 op_275)"
"(let-values(((the-struct_277) s_273))"
"(if(syntax?$1 the-struct_277)"
"(let-values(((scopes31_278)(op_275(syntax-scopes s_273) sc_274))"
"((scope-propagations32_279)"
"(if(datum-has-elements?(syntax-content s_273))"
"(prop-op_276(syntax-scope-propagations s_273) sc_274(syntax-scopes s_273))"
" '#f)))"
"(syntax1.1"
"(syntax-content the-struct_277)"
" scopes31_278"
" scope-propagations32_279"
"(syntax-shifted-multi-scopes the-struct_277)"
"(syntax-mpi-shifts the-struct_277)"
"(syntax-bulk-binding-registry the-struct_277)"
"(syntax-srcloc the-struct_277)"
"(syntax-props the-struct_277)"
"(syntax-inspector the-struct_277)"
"(syntax-tamper the-struct_277)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_277))))))"
"(define-values"
"(apply-shifted-multi-scope)"
"(lambda(s_280 sms_281 op_282)"
"(let-values(((smss33_283) '#f))"
"(let-values(((prev-result_284) '#f))"
"(let-values(((do-op_285)"
"(lambda(smss_286)"
"(if(eq? smss33_283 smss_286)"
"(let-values() prev-result_284)"
"(let-values()"
"(let-values(((r_287)"
"(let-values()"
"(fallback-update-first"
" smss_286"
"(lambda(smss_288)(op_282 smss_288 sms_281))))))"
"(begin(set! smss33_283 smss_286)(set! prev-result_284 r_287) r_287)))))))"
"(syntax-map"
" s_280"
"(lambda(tail?_289 x_290) x_290)"
"(lambda(s_291 d_292)"
"(let-values(((the-struct_293) s_291))"
"(if(syntax?$1 the-struct_293)"
"(let-values(((content34_294) d_292)"
"((shifted-multi-scopes35_295)(do-op_285(syntax-shifted-multi-scopes s_291))))"
"(syntax1.1"
" content34_294"
"(syntax-scopes the-struct_293)"
"(syntax-scope-propagations the-struct_293)"
" shifted-multi-scopes35_295"
"(syntax-mpi-shifts the-struct_293)"
"(syntax-bulk-binding-registry the-struct_293)"
"(syntax-srcloc the-struct_293)"
"(syntax-props the-struct_293)"
"(syntax-inspector the-struct_293)"
"(syntax-tamper the-struct_293)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_293))))"
" syntax-e/no-taint))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_296)"
"(let-values((()(begin(propagate-taint! s_296)(values))))"
"(let-values(((prop_297)(syntax-scope-propagations s_296)))"
"(if prop_297"
"(let-values(((new-content_298)"
"(syntax-map"
"(syntax-content s_296)"
"(lambda(tail?_299 x_300) x_300)"
"(lambda(sub-s_301 d_302)"
"(let-values(((the-struct_303) sub-s_301))"
"(if(syntax?$1 the-struct_303)"
"(let-values(((scopes36_304)"
"(propagation-apply prop_297(syntax-scopes sub-s_301) s_296))"
"((scope-propagations37_305)"
"(propagation-merge"
" prop_297"
"(syntax-scope-propagations sub-s_301)"
"(syntax-scopes sub-s_301))))"
"(syntax1.1"
"(syntax-content the-struct_303)"
" scopes36_304"
" scope-propagations37_305"
"(syntax-shifted-multi-scopes the-struct_303)"
"(syntax-mpi-shifts the-struct_303)"
"(syntax-bulk-binding-registry the-struct_303)"
"(syntax-srcloc the-struct_303)"
"(syntax-props the-struct_303)"
"(syntax-inspector the-struct_303)"
"(syntax-tamper the-struct_303)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_303))))"
" '#f)))"
"(begin"
"(set-syntax-content! s_296 new-content_298)"
"(set-syntax-scope-propagations! s_296 '#f)"
" new-content_298))"
"(syntax-content s_296))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_306)"
"(let-values(((content_307)(syntax-e/no-taint s_306)))"
"(if(not(tamper-armed?(syntax-tamper s_306)))"
"(let-values() content_307)"
"(if(datum-has-elements? content_307)"
"(let-values()(taint-content content_307))"
"(let-values() content_307))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_308)"
"(if(representative-scope? sc_308)"
"(shifted-multi-scope4.1(representative-scope-phase sc_308)(representative-scope-owner sc_308))"
" sc_308)))"
"(define-values"
"(add-scope)"
"(lambda(s_309 sc_310)(apply-scope s_309(generalize-scope sc_310) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_311 scs_312)"
"(let-values(((lst_313) scs_312))"
"(begin"
"(if(list? lst_313)(void)(let-values()(in-list lst_313)))"
"((letrec-values(((for-loop_314)"
"(lambda(s_315 lst_316)"
"(if(pair? lst_316)"
"(let-values(((sc_317)(unsafe-car lst_316)))"
"(if '#t"
"(let-values(((s_318)"
"(let-values(((s_319) s_315))"
"(let-values(((s_320)(let-values()(add-scope s_319 sc_317))))"
"(values s_320)))))"
"(if '#t(for-loop_314 s_318(unsafe-cdr lst_316)) s_318))"
" s_315))"
" s_315))))"
" for-loop_314)"
" s_311"
" lst_313)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_321 sc_322)(apply-scope s_321(generalize-scope sc_322) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_323 scs_324)"
"(let-values(((lst_325) scs_324))"
"(begin"
"(if(list? lst_325)(void)(let-values()(in-list lst_325)))"
"((letrec-values(((for-loop_326)"
"(lambda(s_327 lst_328)"
"(if(pair? lst_328)"
"(let-values(((sc_329)(unsafe-car lst_328)))"
"(if '#t"
"(let-values(((s_330)"
"(let-values(((s_331) s_327))"
"(let-values(((s_332)(let-values()(remove-scope s_331 sc_329))))"
"(values s_332)))))"
"(if '#t(for-loop_326 s_330(unsafe-cdr lst_328)) s_330))"
" s_327))"
" s_327))))"
" for-loop_326)"
" s_323"
" lst_325)))))"
"(define-values"
"(set-flip)"
"(lambda(s_333 e_334)(if(set-member? s_333 e_334)(set-remove s_333 e_334)(set-add s_333 e_334))))"
"(define-values"
"(flip-scope)"
"(lambda(s_335 sc_336)(apply-scope s_335(generalize-scope sc_336) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_337 scs_338)"
"(let-values(((lst_339) scs_338))"
"(begin"
"(if(list? lst_339)(void)(let-values()(in-list lst_339)))"
"((letrec-values(((for-loop_340)"
"(lambda(s_341 lst_342)"
"(if(pair? lst_342)"
"(let-values(((sc_343)(unsafe-car lst_342)))"
"(if '#t"
"(let-values(((s_344)"
"(let-values(((s_345) s_341))"
"(let-values(((s_346)(let-values()(flip-scope s_345 sc_343))))"
"(values s_346)))))"
"(if '#t(for-loop_340 s_344(unsafe-cdr lst_342)) s_344))"
" s_341))"
" s_341))))"
" for-loop_340)"
" s_337"
" lst_339)))))"
"(define-values"
"(push-scope)"
"(lambda(s_347 sms_348)"
"(let-values(((smss/maybe-fallbacks38_349) '#f))"
"(let-values(((prev-result_350) '#f))"
"(let-values(((push_351)"
"(lambda(smss/maybe-fallbacks_352)"
"(if(eq? smss/maybe-fallbacks38_349 smss/maybe-fallbacks_352)"
"(let-values() prev-result_350)"
"(let-values()"
"(let-values(((r_353)"
"(let-values()"
"(let-values(((smss_354)(fallback-first smss/maybe-fallbacks_352)))"
"(if(set-empty? smss_354)"
"(let-values()(set-add smss_354 sms_348))"
"(if(set-member? smss_354 sms_348)"
"(let-values() smss/maybe-fallbacks_352)"
"(let-values()"
"(fallback-push"
"(set-add smss_354 sms_348)"
" smss/maybe-fallbacks_352))))))))"
"(begin"
"(set! smss/maybe-fallbacks38_349 smss/maybe-fallbacks_352)"
"(set! prev-result_350 r_353)"
" r_353)))))))"
"(syntax-map"
" s_347"
"(lambda(tail?_355 x_356) x_356)"
"(lambda(s_357 d_358)"
"(let-values(((the-struct_359) s_357))"
"(if(syntax?$1 the-struct_359)"
"(let-values(((content39_360) d_358)"
"((shifted-multi-scopes40_361)(push_351(syntax-shifted-multi-scopes s_357))))"
"(syntax1.1"
" content39_360"
"(syntax-scopes the-struct_359)"
"(syntax-scope-propagations the-struct_359)"
" shifted-multi-scopes40_361"
"(syntax-mpi-shifts the-struct_359)"
"(syntax-bulk-binding-registry the-struct_359)"
"(syntax-srcloc the-struct_359)"
"(syntax-props the-struct_359)"
"(syntax-inspector the-struct_359)"
"(syntax-tamper the-struct_359)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_359))))"
" syntax-e/no-taint))))))"
"(define-values"
"(struct:propagation propagation12.1 propagation? propagation-prev-scs propagation-scope-ops)"
"(let-values(((struct:_362 make-_363 ?_364 -ref_365 -set!_366)"
"(make-struct-type"
" 'propagation"
" '#f"
" '2"
" '0"
" '#f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" '#f"
" '(0 1)"
" '#f"
" 'propagation)))"
"(values"
" struct:_362"
" make-_363"
" ?_364"
"(make-struct-field-accessor -ref_365 '0 'prev-scs)"
"(make-struct-field-accessor -ref_365 '1 'scope-ops))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_388 sc_389 prev-scs_390)"
"(if prop_388"
"(let-values(((the-struct_391) prop_388))"
"(if(propagation? the-struct_391)"
"(let-values(((scope-ops42_392)(hash-set(propagation-scope-ops prop_388) sc_389 'add)))"
"(propagation12.1(propagation-prev-scs the-struct_391) scope-ops42_392))"
" (raise-argument-error 'struct-copy '\"propagation?\" the-struct_391)))"
"(propagation12.1 prev-scs_390(hasheq sc_389 'add)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_393 sc_394 prev-scs_395)"
"(if prop_393"
"(let-values(((the-struct_396) prop_393))"
"(if(propagation? the-struct_396)"
"(let-values(((scope-ops43_397)(hash-set(propagation-scope-ops prop_393) sc_394 'remove)))"
"(propagation12.1(propagation-prev-scs the-struct_396) scope-ops43_397))"
" (raise-argument-error 'struct-copy '\"propagation?\" the-struct_396)))"
"(propagation12.1 prev-scs_395(hasheq sc_394 'remove)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_398 sc_399 prev-scs_400)"
"(if prop_398"
"(let-values(((ops_401)(propagation-scope-ops prop_398)))"
"(let-values(((current-op_402)(hash-ref ops_401 sc_399 '#f)))"
"(if(if(eq? current-op_402 'flip)(= '1(hash-count ops_401)) '#f)"
"(let-values() '#f)"
"(let-values()"
"(let-values(((the-struct_403) prop_398))"
"(if(propagation? the-struct_403)"
"(let-values(((scope-ops44_404)"
"(if(eq? current-op_402 'flip)"
"(hash-remove ops_401 sc_399)"
"(hash-set"
" ops_401"
" sc_399"
"(let-values(((tmp_405) current-op_402))"
"(if(equal? tmp_405 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_405 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation12.1(propagation-prev-scs the-struct_403) scope-ops44_404))"
" (raise-argument-error 'struct-copy '\"propagation?\" the-struct_403)))))))"
"(propagation12.1 prev-scs_400(hasheq sc_399 'flip)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_406 scs_407 parent-s_408)"
"(if(not prop_406)"
"(let-values() scs_407)"
"(if(eq?(propagation-prev-scs prop_406) scs_407)"
"(let-values()(syntax-scopes parent-s_408))"
"(let-values()"
"(let-values(((ht_409)(propagation-scope-ops prop_406)))"
"(begin"
"(if((lambda(ht_410)(hash? ht_410)) ht_409)(void)(let-values()(default-in-hash ht_409)))"
"((letrec-values(((for-loop_411)"
"(lambda(scs_412 i_413)"
"(if i_413"
"(let-values(((sc_414 op_415)(hash-iterate-key+value ht_409 i_413)))"
"(if '#t"
"(let-values(((scs_416)"
"(let-values(((scs_417) scs_412))"
"(let-values(((scs_418)"
"(let-values()"
"(let-values(((tmp_419) op_415))"
"(if(equal? tmp_419 'add)"
"(let-values()(set-add scs_417 sc_414))"
"(if(equal? tmp_419 'remove)"
"(let-values()"
"(set-remove scs_417 sc_414))"
"(let-values()"
"(set-flip scs_417 sc_414))))))))"
"(values scs_418)))))"
"(if '#t(for-loop_411 scs_416(hash-iterate-next ht_409 i_413)) scs_416))"
" scs_412))"
" scs_412))))"
" for-loop_411)"
" scs_407"
"(hash-iterate-first ht_409)))))))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_420 base-prop_421 prev-scs_422)"
"(if(not prop_420)"
"(let-values() base-prop_421)"
"(if(not base-prop_421)"
"(let-values()(propagation12.1 prev-scs_422(propagation-scope-ops prop_420)))"
"(let-values()"
"(let-values(((new-ops_423)"
"(let-values(((ht_424)(propagation-scope-ops prop_420)))"
"(begin"
"(if((lambda(ht_425)(hash? ht_425)) ht_424)"
"(void)"
"(let-values()(default-in-hash ht_424)))"
"((letrec-values(((for-loop_426)"
"(lambda(ops_427 i_428)"
"(if i_428"
"(let-values(((sc_429 op_430)(hash-iterate-key+value ht_424 i_428)))"
"(if '#t"
"(let-values(((ops_431)"
"(let-values(((ops_432) ops_427))"
"(let-values(((ops_433)"
"(let-values()"
"(let-values(((tmp_434) op_430))"
"(if(equal? tmp_434 'add)"
"(let-values()"
"(hash-set"
" ops_432"
" sc_429"
" 'add))"
"(if(equal? tmp_434 'remove)"
"(let-values()"
"(hash-set"
" ops_432"
" sc_429"
" 'remove))"
"(let-values()"
"(let-values(((current-op_435)"
"(hash-ref"
" ops_432"
" sc_429"
" '#f)))"
"(let-values(((tmp_436)"
" current-op_435))"
"(if(equal?"
" tmp_436"
" 'add)"
"(let-values()"
"(hash-set"
" ops_432"
" sc_429"
" 'remove))"
"(if(equal?"
" tmp_436"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_432"
" sc_429"
" 'add))"
"(if(equal?"
" tmp_436"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_432"
" sc_429))"
"(let-values()"
"(hash-set"
" ops_432"
" sc_429"
" 'flip))))))))))))))"
"(values ops_433)))))"
"(if '#t"
"(for-loop_426 ops_431(hash-iterate-next ht_424 i_428))"
" ops_431))"
" ops_427))"
" ops_427))))"
" for-loop_426)"
"(propagation-scope-ops base-prop_421)"
"(hash-iterate-first ht_424))))))"
"(if(zero?(hash-count new-ops_423))"
" '#f"
"(propagation12.1(propagation-prev-scs base-prop_421) new-ops_423))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_437 delta_438)"
"(if(zero-phase? delta_438)"
"(let-values() sms_437)"
"(if(label-phase? delta_438)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_437))"
"(let-values() '#f)"
"(let-values()"
"(shifted-multi-scope4.1"
"(shifted-to-label-phase5.1(phase- '0(shifted-multi-scope-phase sms_437)))"
"(shifted-multi-scope-multi-scope sms_437)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_437))"
"(let-values() sms_437)"
"(let-values()"
"(shifted-multi-scope4.1"
"(phase+ delta_438(shifted-multi-scope-phase sms_437))"
"(shifted-multi-scope-multi-scope sms_437))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_439 phase_440)"
"(if(eqv? phase_440 '0)"
" s_439"
"(let-values()"
"(let-values(((smss45_441) '#f))"
"(let-values(((prev-result_442) '#f))"
"(let-values(((shift-all_443)"
"(lambda(smss_444)"
"(if(eq? smss45_441 smss_444)"
"(let-values() prev-result_442)"
"(let-values()"
"(let-values(((r_445)"
"(let-values()"
"(fallback-map"
" smss_444"
"(lambda(smss_446)"
"(let-values(((ht_447) smss_446))"
"(begin"
"(if((lambda(ht_448)(hash? ht_448)) ht_447)"
"(void)"
"(let-values()(default-in-hash-keys ht_447)))"
"((letrec-values(((for-loop_449)"
"(lambda(table_450 i_451)"
"(if i_451"
"(let-values(((sms_452)"
"(hash-iterate-key"
" ht_447"
" i_451)))"
"(if '#t"
"(let-values(((table_453)"
"(let-values(((new-sms_454)"
"(shift-multi-scope"
" sms_452"
" phase_440)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_455)"
"(lambda(table_456)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((table_457)"
"(let-values(((table_458)"
" table_456))"
"(if new-sms_454"
"(let-values(((table_459)"
" table_458))"
"(let-values(((table_460)"
"(let-values()"
"(let-values(((key_461"
" val_462)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_454)"
" '#t))))"
"(hash-set"
" table_459"
" key_461"
" val_462)))))"
"(values"
" table_460)))"
" table_458))))"
"(if '#f"
"(for-loop_455"
" table_457)"
" table_457))"
" table_456))"
" table_456))))"
" for-loop_455)"
" table_450)))))"
"(if '#t"
"(for-loop_449"
" table_453"
"(hash-iterate-next ht_447 i_451))"
" table_453))"
" table_450))"
" table_450))))"
" for-loop_449)"
" '#hash()"
"(hash-iterate-first ht_447)))))))))"
"(begin(set! smss45_441 smss_444)(set! prev-result_442 r_445) r_445)))))))"
"(syntax-map"
" s_439"
"(lambda(tail?_463 d_464) d_464)"
"(lambda(s_465 d_466)"
"(let-values(((the-struct_467) s_465))"
"(if(syntax?$1 the-struct_467)"
"(let-values(((content46_468) d_466)"
"((shifted-multi-scopes47_469)(shift-all_443(syntax-shifted-multi-scopes s_465))))"
"(syntax1.1"
" content46_468"
"(syntax-scopes the-struct_467)"
"(syntax-scope-propagations the-struct_467)"
" shifted-multi-scopes47_469"
"(syntax-mpi-shifts the-struct_467)"
"(syntax-bulk-binding-registry the-struct_467)"
"(syntax-srcloc the-struct_467)"
"(syntax-props the-struct_467)"
"(syntax-inspector the-struct_467)"
"(syntax-tamper the-struct_467)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_467))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_470 src-scopes_471 dest-scopes_472)"
"(if(equal? src-scopes_471 dest-scopes_472)"
" s_470"
"(let-values(((src-smss_473 src-scs_474)"
"(set-partition"
"(let-values(((ht_477) src-scopes_471))"
"(begin"
"(if((lambda(ht_478)(hash? ht_478)) ht_477)"
"(void)"
"(let-values()(default-in-hash-keys ht_477)))"
"((letrec-values(((for-loop_479)"
"(lambda(table_480 i_481)"
"(if i_481"
"(let-values(((sc_482)(hash-iterate-key ht_477 i_481)))"
"(if '#t"
"(let-values(((table_483)"
"(let-values(((table_484) table_480))"
"(let-values(((table_485)"
"(let-values()"
"(let-values(((key_486 val_487)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_482))"
" '#t))))"
"(hash-set"
" table_484"
" key_486"
" val_487)))))"
"(values table_485)))))"
"(if '#t"
"(for-loop_479 table_483(hash-iterate-next ht_477 i_481))"
" table_483))"
" table_480))"
" table_480))))"
" for-loop_479)"
" '#hash()"
"(hash-iterate-first ht_477))))"
" shifted-multi-scope?))"
"((dest-smss_475 dest-scs_476)"
"(set-partition"
"(let-values(((ht_488) dest-scopes_472))"
"(begin"
"(if((lambda(ht_489)(hash? ht_489)) ht_488)"
"(void)"
"(let-values()(default-in-hash-keys ht_488)))"
"((letrec-values(((for-loop_490)"
"(lambda(table_491 i_492)"
"(if i_492"
"(let-values(((sc_493)(hash-iterate-key ht_488 i_492)))"
"(if '#t"
"(let-values(((table_494)"
"(let-values(((table_495) table_491))"
"(let-values(((table_496)"
"(let-values()"
"(let-values(((key_497 val_498)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_493))"
" '#t))))"
"(hash-set"
" table_495"
" key_497"
" val_498)))))"
"(values table_496)))))"
"(if '#t"
"(for-loop_490 table_494(hash-iterate-next ht_488 i_492))"
" table_494))"
" table_491))"
" table_491))))"
" for-loop_490)"
" '#hash()"
"(hash-iterate-first ht_488))))"
" shifted-multi-scope?)))"
"(let-values(((scs48_499) '#f))"
"(let-values(((prev-result_500) '#f))"
"(let-values(((swap-scs_501)"
"(lambda(scs_505)"
"(if(eq? scs48_499 scs_505)"
"(let-values() prev-result_500)"
"(let-values()"
"(let-values(((r_506)"
"(let-values()"
"(if(subset?$1 src-scs_474 scs_505)"
"(set-union(set-subtract scs_505 src-scs_474) dest-scs_476)"
" scs_505))))"
"(begin(set! scs48_499 scs_505)(set! prev-result_500 r_506) r_506)))))))"
"(let-values(((smss49_502) '#f))"
"(let-values(((prev-result_503) '#f))"
"(let-values(((swap-smss_504)"
"(lambda(smss_507)"
"(if(eq? smss49_502 smss_507)"
"(let-values() prev-result_503)"
"(let-values()"
"(let-values(((r_508)"
"(let-values()"
"(fallback-update-first"
" smss_507"
"(lambda(smss_509)"
"(if(subset?$1 src-smss_473 smss_509)"
"(set-union"
"(set-subtract smss_509 src-smss_473)"
" dest-smss_475)"
" smss_509))))))"
"(begin(set! smss49_502 smss_507)(set! prev-result_503 r_508) r_508)))))))"
"(syntax-map"
" s_470"
"(lambda(tail?_510 d_511) d_511)"
"(lambda(s_512 d_513)"
"(let-values(((the-struct_514) s_512))"
"(if(syntax?$1 the-struct_514)"
"(let-values(((content50_515) d_513)"
"((scopes51_516)(swap-scs_501(syntax-scopes s_512)))"
"((shifted-multi-scopes52_517)"
"(swap-smss_504(syntax-shifted-multi-scopes s_512))))"
"(syntax1.1"
" content50_515"
" scopes51_516"
"(syntax-scope-propagations the-struct_514)"
" shifted-multi-scopes52_517"
"(syntax-mpi-shifts the-struct_514)"
"(syntax-bulk-binding-registry the-struct_514)"
"(syntax-srcloc the-struct_514)"
"(syntax-props the-struct_514)"
"(syntax-inspector the-struct_514)"
"(syntax-tamper the-struct_514)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_514))))"
" syntax-e/no-taint)))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_518 phase_519)"
"(scope-set-at-fallback s_518(fallback-first(syntax-shifted-multi-scopes s_518)) phase_519)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_520 smss_521 phase_522)"
"(let-values(((ht_523) smss_521))"
"(begin"
"(if((lambda(ht_524)(hash? ht_524)) ht_523)(void)(let-values()(default-in-hash-keys ht_523)))"
"((letrec-values(((for-loop_525)"
"(lambda(scopes_526 i_527)"
"(if i_527"
"(let-values(((sms_528)(hash-iterate-key ht_523 i_527)))"
"(if '#t"
"(let-values(((scopes_529)"
"(let-values(((scopes_530) scopes_526))"
"(if(let-values(((or-part_531)(label-phase? phase_522)))"
"(if or-part_531"
" or-part_531"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_528)))))"
"(let-values(((scopes_532) scopes_530))"
"(let-values(((scopes_533)"
"(let-values()"
"(set-add"
" scopes_532"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_528)"
"(let-values(((ph_534)"
"(shifted-multi-scope-phase"
" sms_528)))"
"(if(shifted-to-label-phase? ph_534)"
"(shifted-to-label-phase-from ph_534)"
"(phase- ph_534 phase_522))))))))"
"(values scopes_533)))"
" scopes_530))))"
"(if '#t(for-loop_525 scopes_529(hash-iterate-next ht_523 i_527)) scopes_529))"
" scopes_526))"
" scopes_526))))"
" for-loop_525)"
"(syntax-scopes s_520)"
"(hash-iterate-first ht_523))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_535)"
"(begin"
" (if (set-empty? scopes_535) (let-values () (error '\"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_536) scopes_535))"
"(begin"
"(if((lambda(ht_537)(hash? ht_537)) ht_536)(void)(let-values()(default-in-hash-keys ht_536)))"
"((letrec-values(((for-loop_538)"
"(lambda(max-sc_539 i_540)"
"(if i_540"
"(let-values(((sc_541)(hash-iterate-key ht_536 i_540)))"
"(if '#t"
"(let-values(((max-sc_542)"
"(let-values(((max-sc_543) max-sc_539))"
"(let-values(((max-sc_544)"
"(let-values()"
"(if(scope>? sc_541 max-sc_543)"
" sc_541"
" max-sc_543))))"
"(values max-sc_544)))))"
"(if '#t(for-loop_538 max-sc_542(hash-iterate-next ht_536 i_540)) max-sc_542))"
" max-sc_539))"
" max-sc_539))))"
" for-loop_538)"
"(set-first scopes_535)"
"(hash-iterate-first ht_536)))))))"
"(define-values"
"(add-binding-in-scopes!)"
"(lambda(scopes_545 sym_546 binding_547)"
"(let-values(((max-sc_548)(find-max-scope scopes_545)))"
"(let-values(((bindings_549)(scope-bindings max-sc_548)))"
"(let-values(((sym-bindings_550)(hash-ref bindings_549 sym_546 '#hash())))"
"(set-scope-bindings!"
" max-sc_548"
"(hash-set bindings_549 sym_546(hash-set sym-bindings_550 scopes_545 binding_547))))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_551 binding_552)"
"(let-values(((max-sc_553)(find-max-scope scopes_551)))"
"(begin"
"(set-scope-bulk-bindings!"
" max-sc_553"
"(cons(bulk-binding-at6.1 scopes_551 binding_552)(scope-bulk-bindings max-sc_553)))"
"(remove-matching-bindings! max-sc_553 scopes_551 binding_552)))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_554)"
"(let-values(((ht_555)(syntax-scopes s_554)))"
"(begin"
"(if((lambda(ht_556)(hash? ht_556)) ht_555)(void)(let-values()(default-in-hash-keys ht_555)))"
"((letrec-values(((for-loop_557)"
"(lambda(result_558 i_559)"
"(if i_559"
"(let-values(((sc_560)(hash-iterate-key ht_555 i_559)))"
"(if '#t"
"(let-values(((result_561)"
"(let-values(((result_562) result_558))"
"(let-values(((result_563)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_560) 'macro)))))"
"(values result_563)))))"
"(if(if '#t(not((lambda x_564 result_561) sc_560)) '#f)"
"(for-loop_557 result_561(hash-iterate-next ht_555 i_559))"
" result_561))"
" result_558))"
" result_558))))"
" for-loop_557)"
" '#f"
"(hash-iterate-first ht_555))))))"
"(define-values"
"(resolve21.1)"
"(lambda(ambiguous-value13_565"
" ambiguous-value16_566"
" exactly?14_567"
" exactly?17_568"
" extra-shifts15_569"
" extra-shifts18_570"
" s19_571"
" phase20_572)"
"(let-values(((s_573) s19_571))"
"(let-values(((phase_574) phase20_572))"
"(let-values(((ambiguous-value_575)(if ambiguous-value16_566 ambiguous-value13_565 '#f)))"
"(let-values(((exactly?_576)(if exactly?17_568 exactly?14_567 '#f)))"
"(let-values(((extra-shifts_577)(if extra-shifts18_570 extra-shifts15_569 null)))"
"(let-values()"
"(begin"
" (if (identifier? s_573) (void) (let-values () (raise-argument-error 'resolve '\"identifier?\" s_573)))"
" (if (phase? phase_574) (void) (let-values () (raise-argument-error 'resolve '\"phase?\" phase_574)))"
"((letrec-values(((fallback-loop_578)"
"(lambda(smss_579)"
"(let-values(((scopes_580)"
"(scope-set-at-fallback s_573(fallback-first smss_579) phase_574)))"
"(let-values(((sym_581)(syntax-content s_573)))"
"(let-values(((candidates_582)"
"(alt-reverse"
"(let-values(((ht_584) scopes_580))"
"(begin"
"(if((lambda(ht_585)(hash? ht_585)) ht_584)"
"(void)"
"(let-values()(default-in-hash-keys ht_584)))"
"((letrec-values(((for-loop_586)"
"(lambda(fold-var_587 i_588)"
"(if i_588"
"(let-values(((sc_589)"
"(hash-iterate-key"
" ht_584"
" i_588)))"
"(if '#t"
"(let-values(((fold-var_590)"
"(let-values(((bindings_591)"
"(let-values(((bindings_592)"
"(let-values(((or-part_593)"
"(hash-ref"
"(scope-bindings"
" sc_589)"
" sym_581"
" '#f)))"
"(if or-part_593"
" or-part_593"
" '#hash()))))"
"(let-values(((lst_594)"
"(scope-bulk-bindings"
" sc_589)))"
"(begin"
"(if(list?"
" lst_594)"
"(void)"
"(let-values()"
"(in-list"
" lst_594)))"
"((letrec-values(((for-loop_595)"
"(lambda(bindings_596"
" lst_597)"
"(if(pair?"
" lst_597)"
"(let-values(((bulk-at_598)"
"(unsafe-car"
" lst_597)))"
"(if '#t"
"(let-values(((bindings_599)"
"(let-values(((bulk_600)"
"(bulk-binding-at-bulk"
" bulk-at_598)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_601)"
"(lambda(bindings_602)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((bindings_603)"
"(let-values(((syms_604)"
"(bulk-binding-symbols"
" bulk_600"
" s_573"
" extra-shifts_577)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_605)"
"(lambda(bindings_606)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((bindings_607)"
"(let-values(((b-info_608)"
"(hash-ref"
" syms_604"
" sym_581"
" '#f)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_609)"
"(lambda(bindings_610)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((bindings_611)"
"(let-values(((bindings_612)"
" bindings_610))"
"(if(if b-info_608"
"(not"
"(hash-ref"
" bindings_612"
"(bulk-binding-at-scopes"
" bulk-at_598)"
" '#f))"
" '#f)"
"(let-values(((bindings_613)"
" bindings_612))"
"(let-values(((bindings_614)"
"(let-values()"
"(hash-set"
" bindings_613"
"(bulk-binding-at-scopes"
" bulk-at_598)"
"((bulk-binding-create"
" bulk_600)"
" bulk_600"
" b-info_608"
" sym_581)))))"
"(values"
" bindings_614)))"
" bindings_612))))"
"(if '#f"
"(for-loop_609"
" bindings_611)"
" bindings_611))"
" bindings_610))"
" bindings_610))))"
" for-loop_609)"
" bindings_606)))))"
"(if '#f"
"(for-loop_605"
" bindings_607)"
" bindings_607))"
" bindings_606))"
" bindings_606))))"
" for-loop_605)"
" bindings_602)))))"
"(if '#f"
"(for-loop_601"
" bindings_603)"
" bindings_603))"
" bindings_602))"
" bindings_602))))"
" for-loop_601)"
" bindings_596)))))"
"(if '#t"
"(for-loop_595"
" bindings_599"
"(unsafe-cdr"
" lst_597))"
" bindings_599))"
" bindings_596))"
" bindings_596))))"
" for-loop_595)"
" bindings_592"
" lst_594))))))"
"(begin"
" '#t"
"((letrec-values(((for-loop_615)"
"(lambda(fold-var_616)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((fold-var_617)"
"(let-values(((ht_618)"
" bindings_591))"
"(begin"
"(if((lambda(ht_619)"
"(hash?"
" ht_619))"
" ht_618)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_618)))"
"((letrec-values(((for-loop_620)"
"(lambda(fold-var_621"
" i_622)"
"(if i_622"
"(let-values(((b-scopes_623"
" binding_624)"
"(hash-iterate-key+value"
" ht_618"
" i_622)))"
"(if '#t"
"(let-values(((fold-var_625)"
"(let-values(((fold-var_626)"
" fold-var_621))"
"(if(subset?$1"
" b-scopes_623"
" scopes_580)"
"(let-values(((fold-var_627)"
" fold-var_626))"
"(let-values(((fold-var_628)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" b-scopes_623"
" binding_624))"
" fold-var_627))))"
"(values"
" fold-var_628)))"
" fold-var_626))))"
"(if '#t"
"(for-loop_620"
" fold-var_625"
"(hash-iterate-next"
" ht_618"
" i_622))"
" fold-var_625))"
" fold-var_621))"
" fold-var_621))))"
" for-loop_620)"
" fold-var_616"
"(hash-iterate-first"
" ht_618))))))"
"(if '#f"
"(for-loop_615"
" fold-var_617)"
" fold-var_617))"
" fold-var_616))"
" fold-var_616))))"
" for-loop_615)"
" fold-var_587)))))"
"(if '#t"
"(for-loop_586"
" fold-var_590"
"(hash-iterate-next"
" ht_584"
" i_588))"
" fold-var_590))"
" fold-var_587))"
" fold-var_587))))"
" for-loop_586)"
" null"
"(hash-iterate-first ht_584)))))))"
"(let-values(((max-candidate_583)"
"(if(pair? candidates_582)"
"(let-values(((lst_629)(cdr candidates_582)))"
"(begin"
"(if(list? lst_629)"
"(void)"
"(let-values()(in-list lst_629)))"
"((letrec-values(((for-loop_630)"
"(lambda(max-c_631 lst_632)"
"(if(pair? lst_632)"
"(let-values(((c_633)"
"(unsafe-car"
" lst_632)))"
"(if '#t"
"(let-values(((max-c_634)"
"(let-values(((max-c_635)"
" max-c_631))"
"(let-values(((max-c_636)"
"(let-values()"
"(if(>"
"(set-count"
"(car"
" c_633))"
"(set-count"
"(car"
" max-c_635)))"
" c_633"
" max-c_635))))"
"(values"
" max-c_636)))))"
"(if '#t"
"(for-loop_630"
" max-c_634"
"(unsafe-cdr lst_632))"
" max-c_634))"
" max-c_631))"
" max-c_631))))"
" for-loop_630)"
"(car candidates_582)"
" lst_629)))"
" '#f)))"
"(if max-candidate_583"
"(let-values()"
"(if(not"
"(let-values(((lst_637) candidates_582))"
"(begin"
"(if(list? lst_637)(void)(let-values()(in-list lst_637)))"
"((letrec-values(((for-loop_638)"
"(lambda(result_639 lst_640)"
"(if(pair? lst_640)"
"(let-values(((c_641)"
"(unsafe-car lst_640)))"
"(if '#t"
"(let-values(((result_642)"
"(let-values(((result_643)"
" result_639))"
"(let-values(((result_644)"
"(let-values()"
"(let-values()"
"(subset?$1"
"(car"
" c_641)"
"(car"
" max-candidate_583))))))"
"(values"
" result_644)))))"
"(if(if '#t"
"(not"
"((lambda x_645"
"(not result_642))"
" c_641))"
" '#f)"
"(for-loop_638"
" result_642"
"(unsafe-cdr lst_640))"
" result_642))"
" result_639))"
" result_639))))"
" for-loop_638)"
" '#t"
" lst_637))))"
"(let-values()"
"(if(fallback? smss_579)"
"(fallback-loop_578(fallback-rest smss_579))"
" ambiguous-value_575))"
"(let-values()"
"(if(let-values(((or-part_646)(not exactly?_576)))"
"(if or-part_646"
" or-part_646"
"(equal?"
"(set-count scopes_580)"
"(set-count(car max-candidate_583)))))"
"(cdr max-candidate_583)"
" '#f))))"
"(let-values()"
"(if(fallback? smss_579)"
"(fallback-loop_578(fallback-rest smss_579))"
" '#f))))))))))"
" fallback-loop_578)"
"(syntax-shifted-multi-scopes s_573)))))))))))"
"(define-values"
"(unpack22.1$2)"
"(lambda(given-kws_647 given-args_648 s19_649 phase20_650)"
"(let-values(((ambiguous-value16_651)(if(pair? given-kws_647)(eq? '#:ambiguous-value(car given-kws_647)) '#f)))"
"(let-values(((ambiguous-value13_652)(if ambiguous-value16_651(car given-args_648)(void)))"
"((given-kws_653)(if ambiguous-value16_651(cdr given-kws_647) given-kws_647))"
"((given-args_654)(if ambiguous-value16_651(cdr given-args_648) given-args_648)))"
"(let-values(((exactly?17_655)(if(pair? given-kws_653)(eq? '#:exactly?(car given-kws_653)) '#f)))"
"(let-values(((exactly?14_656)(if exactly?17_655(car given-args_654)(void)))"
"((given-kws_657)(if exactly?17_655(cdr given-kws_653) given-kws_653))"
"((given-args_658)(if exactly?17_655(cdr given-args_654) given-args_654)))"
"(let-values(((extra-shifts18_659)(pair? given-kws_657)))"
"(let-values(((extra-shifts15_660)(if extra-shifts18_659(car given-args_658)(void))))"
"(resolve21.1"
" ambiguous-value13_652"
" ambiguous-value16_651"
" exactly?14_656"
" exactly?17_655"
" extra-shifts15_660"
" extra-shifts18_659"
" s19_649"
" phase20_650)))))))))"
"(define-values"
"(resolve23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_661 given-argc_662)"
"(if(= given-argc_662 '4)"
"(let-values(((l1_663) given-kws_661))"
"(let-values(((l1_664)"
"(if(null? l1_663) l1_663(if(eq?(car l1_663) '#:ambiguous-value)(cdr l1_663) l1_663))))"
"(let-values(((l1_665) l1_664))"
"(let-values(((l1_666)(if(null? l1_665) l1_665(if(eq?(car l1_665) '#:exactly?)(cdr l1_665) l1_665))))"
"(let-values(((l1_667) l1_666))"
"(let-values(((l1_668)"
"(if(null? l1_667) l1_667(if(eq?(car l1_667) '#:extra-shifts)(cdr l1_667) l1_667))))"
"(null? l1_668)))))))"
" '#f))"
"(case-lambda"
"((given-kws_669 given-args_670 s_671 phase_672)(unpack22.1$2 given-kws_669 given-args_670 s_671 phase_672)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(let-values(((resolve_673)(case-lambda((s_674 phase_675)(unpack22.1$2 null null s_674 phase_675)))))"
" resolve_673)))"
"(define-values"
"(remove-matching-bindings!)"
"(lambda(sc_676 scopes_677 bulk_678)"
"(let-values(((bulk-symbols_679)(bulk-binding-symbols bulk_678 '#f null)))"
"(let-values(((bindings_680)(scope-bindings sc_676)))"
"(let-values(((new-bindings_681)"
"(if(<(hash-count bindings_680)(hash-count bulk-symbols_679))"
"(let-values()"
"(let-values(((ht_682) bindings_680))"
"(begin"
"(if((lambda(ht_683)(hash? ht_683)) ht_682)"
"(void)"
"(let-values()(default-in-hash ht_682)))"
"((letrec-values(((for-loop_684)"
"(lambda(bindings_685 i_686)"
"(if i_686"
"(let-values(((sym_687 sym-bindings_688)"
"(hash-iterate-key+value ht_682 i_686)))"
"(if '#t"
"(let-values(((bindings_689)"
"(let-values(((bindings_690) bindings_685))"
"(let-values(((bindings_691)"
"(let-values()"
"(if(hash-ref"
" bulk-symbols_679"
" sym_687"
" '#f)"
"(hash-set"
" bindings_690"
" sym_687"
"(hash-remove"
" sym-bindings_688"
" scopes_677))"
" bindings_690))))"
"(values bindings_691)))))"
"(if '#t"
"(for-loop_684 bindings_689(hash-iterate-next ht_682 i_686))"
" bindings_689))"
" bindings_685))"
" bindings_685))))"
" for-loop_684)"
" bindings_680"
"(hash-iterate-first ht_682)))))"
"(let-values()"
"(let-values(((ht_692) bulk-symbols_679))"
"(begin"
"(if((lambda(ht_693)(hash? ht_693)) ht_692)"
"(void)"
"(let-values()(default-in-hash-keys ht_692)))"
"((letrec-values(((for-loop_694)"
"(lambda(bindings_695 i_696)"
"(if i_696"
"(let-values(((sym_697)(hash-iterate-key ht_692 i_696)))"
"(if '#t"
"(let-values(((bindings_698)"
"(let-values(((bindings_699) bindings_695))"
"(let-values(((bindings_700)"
"(let-values()"
"(let-values(((sym-bindings_701)"
"(hash-ref"
" bindings_699"
" sym_697"
" '#f)))"
"(if sym-bindings_701"
"(hash-set"
" bindings_699"
" sym_697"
"(hash-remove"
" sym-bindings_701"
" scopes_677))"
" bindings_699)))))"
"(values bindings_700)))))"
"(if '#t"
"(for-loop_694 bindings_698(hash-iterate-next ht_692 i_696))"
" bindings_698))"
" bindings_695))"
" bindings_695))))"
" for-loop_694)"
" bindings_680"
"(hash-iterate-first ht_692))))))))"
"(set-scope-bindings! sc_676 new-bindings_681))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_702 b_703 phase_704)"
"(if(eq?(syntax-e$1 a_702)(syntax-e$1 b_703))"
"(equal?(syntax-scope-set a_702 phase_704)(syntax-scope-set b_703 phase_704))"
" '#f)))"
"(define-values"
"(prune-bindings-to-reachable)"
"(lambda(bindings_705 state_706)"
"(let-values(((or-part_707)(hash-ref(serialize-state-bindings-intern state_706) bindings_705 '#f)))"
"(if or-part_707"
" or-part_707"
"(let-values(((reachable-scopes_708)(serialize-state-reachable-scopes state_706)))"
"(let-values(((new-bindings_709)"
"(let-values(((ht_710) bindings_705))"
"(begin"
"(if((lambda(ht_711)(hash? ht_711)) ht_710)"
"(void)"
"(let-values()(default-in-hash ht_710)))"
"((letrec-values(((for-loop_712)"
"(lambda(table_713 i_714)"
"(if i_714"
"(let-values(((sym_715 bindings-for-sym_716)"
"(hash-iterate-key+value ht_710 i_714)))"
"(if '#t"
"(let-values(((table_717)"
"(let-values(((new-bindings-for-sym_718)"
"(let-values(((ht_719)"
" bindings-for-sym_716))"
"(begin"
"(if((lambda(ht_720)"
"(hash? ht_720))"
" ht_719)"
"(void)"
"(let-values()"
"(default-in-hash ht_719)))"
"((letrec-values(((for-loop_721)"
"(lambda(table_722"
" i_723)"
"(if i_723"
"(let-values(((scopes_724"
" binding_725)"
"(hash-iterate-key+value"
" ht_719"
" i_723)))"
"(if '#t"
"(let-values(((table_726)"
"(let-values(((table_727)"
" table_722))"
"(if(subset?$1"
" scopes_724"
" reachable-scopes_708)"
"(let-values(((table_728)"
" table_727))"
"(let-values(((table_729)"
"(let-values()"
"(let-values(((key_730"
" val_731)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_724"
" state_706)"
" binding_725))))"
"(hash-set"
" table_728"
" key_730"
" val_731)))))"
"(values"
" table_729)))"
" table_727))))"
"(if '#t"
"(for-loop_721"
" table_726"
"(hash-iterate-next"
" ht_719"
" i_723))"
" table_726))"
" table_722))"
" table_722))))"
" for-loop_721)"
" '#hash()"
"(hash-iterate-first ht_719))))))"
"(begin"
" '#t"
"((letrec-values(((for-loop_732)"
"(lambda(table_733)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((table_734)"
"(let-values(((table_735)"
" table_733))"
"(if(zero?"
"(hash-count"
" new-bindings-for-sym_718))"
" table_735"
"(let-values(((table_736)"
" table_735))"
"(let-values(((table_737)"
"(let-values()"
"(let-values(((key_738"
" val_739)"
"(let-values()"
"(values"
" sym_715"
" new-bindings-for-sym_718))))"
"(hash-set"
" table_736"
" key_738"
" val_739)))))"
"(values"
" table_737)))))))"
"(if '#f"
"(for-loop_732"
" table_734)"
" table_734))"
" table_733))"
" table_733))))"
" for-loop_732)"
" table_713)))))"
"(if '#t"
"(for-loop_712 table_717(hash-iterate-next ht_710 i_714))"
" table_717))"
" table_713))"
" table_713))))"
" for-loop_712)"
" '#hash()"
"(hash-iterate-first ht_710))))))"
"(begin"
"(hash-set!(serialize-state-bindings-intern state_706) bindings_705 new-bindings_709)"
" new-bindings_709)))))))"
"(define-values"
"(prune-bulk-bindings-to-reachable)"
"(lambda(bulk-bindings_740 state_741)"
"(if bulk-bindings_740"
"(let-values(((or-part_742)(hash-ref(serialize-state-bulk-bindings-intern state_741) bulk-bindings_740 '#f)))"
"(if or-part_742"
" or-part_742"
"(let-values(((reachable-scopes_743)(serialize-state-reachable-scopes state_741)))"
"(let-values(((new-bulk-bindings_744)"
"(alt-reverse"
"(let-values(((lst_745) bulk-bindings_740))"
"(begin"
"(if(list? lst_745)(void)(let-values()(in-list lst_745)))"
"((letrec-values(((for-loop_746)"
"(lambda(fold-var_747 lst_748)"
"(if(pair? lst_748)"
"(let-values(((bba_749)(unsafe-car lst_748)))"
"(if '#t"
"(let-values(((fold-var_750)"
"(let-values(((fold-var_751) fold-var_747))"
"(if(subset?$1"
"(bulk-binding-at-scopes bba_749)"
" reachable-scopes_743)"
"(let-values(((fold-var_752) fold-var_751))"
"(let-values(((fold-var_753)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_754)"
" bba_749))"
"(if(bulk-binding-at?"
" the-struct_754)"
"(let-values(((scopes53_755)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_749)"
" state_741)))"
"(bulk-binding-at6.1"
" scopes53_755"
"(bulk-binding-at-bulk"
" the-struct_754)))"
"(raise-argument-error"
" 'struct-copy"
" '\"bulk-binding-at?\""
" the-struct_754))))"
" fold-var_752))))"
"(values fold-var_753)))"
" fold-var_751))))"
"(if '#t"
"(for-loop_746 fold-var_750(unsafe-cdr lst_748))"
" fold-var_750))"
" fold-var_747))"
" fold-var_747))))"
" for-loop_746)"
" null"
" lst_745))))))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_741) bulk-bindings_740 new-bulk-bindings_744)"
"(if(pair? new-bulk-bindings_744) new-bulk-bindings_744 '#f))))))"
" '#f)))"
"(define-values"
"(register-bindings-reachable)"
"(lambda(bindings_756 reachable-scopes_757 reach_758 register-trigger_759)"
"(let-values(((ht_760) bindings_756))"
"(begin"
"(if((lambda(ht_761)(hash? ht_761)) ht_760)(void)(let-values()(default-in-hash ht_760)))"
"((letrec-values(((for-loop_762)"
"(lambda(fold-var_763 i_764)"
"(if i_764"
"(let-values(((sym_765 bindings-for-sym_766)(hash-iterate-key+value ht_760 i_764)))"
"(if '#t"
"(let-values(((fold-var_767)"
"(let-values(((ht_768) bindings-for-sym_766))"
"(begin"
"(if((lambda(ht_769)(hash? ht_769)) ht_768)"
"(void)"
"(let-values()(default-in-hash ht_768)))"
"((letrec-values(((for-loop_770)"
"(lambda(fold-var_771 i_772)"
"(if i_772"
"(let-values(((scopes_773 binding_774)"
"(hash-iterate-key+value"
" ht_768"
" i_772)))"
"(if '#t"
"(let-values(((fold-var_775)"
"(let-values(((fold-var_776)"
" fold-var_771))"
"(let-values(((fold-var_777)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((v_778)"
"(if(binding-reach-scopes?"
" binding_774)"
"((binding-reach-scopes-ref"
" binding_774)"
" binding_774)"
" '#f)))"
"(if v_778"
"(let-values()"
"(if(subset?$1"
" scopes_773"
" reachable-scopes_757)"
"(let-values()"
"(reach_758"
" v_778))"
"(let-values()"
"(let-values(((ht_779)"
" scopes_773))"
"(begin"
"(if((lambda(ht_780)"
"(hash?"
" ht_780))"
" ht_779)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_779)))"
"((letrec-values(((for-loop_781)"
"(lambda(fold-var_782"
" i_783)"
"(if i_783"
"(let-values(((sc_784)"
"(hash-iterate-key"
" ht_779"
" i_783)))"
"(if '#t"
"(let-values(((fold-var_785)"
"(let-values(((fold-var_786)"
" fold-var_782))"
"(if(set-member?"
" reachable-scopes_757"
" sc_784)"
" fold-var_786"
"(let-values(((fold-var_787)"
" fold-var_786))"
"(let-values(((fold-var_788)"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_759"
" sc_784"
" v_778))"
"(void)))))"
"(values"
" fold-var_788)))))))"
"(if '#t"
"(for-loop_781"
" fold-var_785"
"(hash-iterate-next"
" ht_779"
" i_783))"
" fold-var_785))"
" fold-var_782))"
" fold-var_782))))"
" for-loop_781)"
"(void)"
"(hash-iterate-first"
" ht_779)))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_777)))))"
"(if '#t"
"(for-loop_770"
" fold-var_775"
"(hash-iterate-next ht_768 i_772))"
" fold-var_775))"
" fold-var_771))"
" fold-var_771))))"
" for-loop_770)"
" fold-var_763"
"(hash-iterate-first ht_768))))))"
"(if '#t(for-loop_762 fold-var_767(hash-iterate-next ht_760 i_764)) fold-var_767))"
" fold-var_763))"
" fold-var_763))))"
" for-loop_762)"
"(void)"
"(hash-iterate-first ht_760))))))"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
" (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property '\"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 '#f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
" (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property '\"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-bulk-binding-registry the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
" (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property '\"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) '#f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
" '\"key for a perserved property must be an interned symbol\""
" '\"given key\""
" key_11"
" '\"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-bulk-binding-registry the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
" (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved '\"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) '#f)"
"(void)"
" (let-values () (raise-argument-error 'syntax-property '\"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 '#f)))))"
"(define-values"
"(syntax-property-symbol-keys$1)"
"(lambda(s_19)"
"(begin"
" (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys '\"syntax\" s_19)))"
"(alt-reverse"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(hash? ht_21)) ht_20)(void)(let-values()(default-in-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)(hash-iterate-key+value ht_20 i_24)))"
"(if '#t"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_23))"
"(if(if(symbol? k_25)(symbol-interned? k_25) '#f)"
"(let-values(((fold-var_29) fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons(let-values() k_25) fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(if '#t(for-loop_22 fold-var_27(hash-iterate-next ht_20 i_24)) fold-var_27))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(hash-iterate-first ht_20))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_31 key_32)"
"(if(hash-ref(syntax-props s_31) key_32 '#f)"
"(let-values(((the-struct_33) s_31))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props3_34)(hash-remove(syntax-props s_31) key_32)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-scope-propagations the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-bulk-binding-registry the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props3_34"
"(syntax-inspector the-struct_33)"
"(syntax-tamper the-struct_33)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_33)))"
" s_31)))"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'full-binding"
" '#f"
" '2"
" '0"
" '#f"
"(list(cons prop:binding-reach-scopes(lambda(b_27)(binding-free=id b_27))))"
"(current-inspector)"
" '#f"
" '(0 1)"
" '#f"
" 'full-binding)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'frame-id)"
"(make-struct-field-accessor -ref_4 '1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_28)(if(full-binding? b_28)(full-binding-frame-id b_28) '#f)))"
"(define-values(binding-free=id)(lambda(b_29)(if(full-binding? b_29)(full-binding-free=id b_29) '#f)))"
"(define-values"
"(make-module-binding20.1)"
"(lambda(extra-inspector8_1"
" extra-inspector16_2"
" frame-id6_3"
" frame-id14_4"
" free=id7_5"
" free=id15_6"
" nominal-module2_7"
" nominal-module10_8"
" nominal-phase3_9"
" nominal-phase11_10"
" nominal-require-phase5_11"
" nominal-require-phase13_12"
" nominal-sym4_13"
" nominal-sym12_14"
" wrt1_15"
" wrt9_16"
" module17_17"
" phase18_18"
" sym19_19)"
"(let-values(((module_20) module17_17))"
"(let-values(((phase_21) phase18_18))"
"(let-values(((sym_22) sym19_19))"
"(let-values(((wrt-sym_23)(if wrt9_16 wrt1_15 sym_22)))"
"(let-values(((nominal-module_24)(if nominal-module10_8 nominal-module2_7 module_20)))"
"(let-values(((nominal-phase_25)(if nominal-phase11_10 nominal-phase3_9 phase_21)))"
"(let-values(((nominal-sym_26)(if nominal-sym12_14 nominal-sym4_13 sym_22)))"
"(let-values(((nominal-require-phase_27)"
"(if nominal-require-phase13_12 nominal-require-phase5_11 '0)))"
"(let-values(((frame-id_28)(if frame-id14_4 frame-id6_3 '#f)))"
"(let-values(((free=id_29)(if free=id15_6 free=id7_5 '#f)))"
"(let-values(((extra-inspector_30)(if extra-inspector16_2 extra-inspector8_1 '#f)))"
"(let-values()"
"(if(let-values(((or-part_31) frame-id_28))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32) free=id_29))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33) extra-inspector_30))"
"(if or-part_33"
" or-part_33"
"(not"
"(if(eq? nominal-module_24 module_20)"
"(if(eqv? nominal-phase_25 phase_21)"
"(if(eq? nominal-sym_26 sym_22)(eqv? nominal-require-phase_27 '0) '#f)"
" '#f)"
" '#f))))))))"
"(let-values()"
"(full-module-binding47.1"
" frame-id_28"
" free=id_29"
" module_20"
" phase_21"
" sym_22"
" nominal-module_24"
" nominal-phase_25"
" nominal-sym_26"
" nominal-require-phase_27"
" extra-inspector_30))"
"(let-values()(simple-module-binding48.1 module_20 phase_21 sym_22)))))))))))))))))"
"(define-values"
"(unpack21.1$1)"
"(lambda(given-kws_34 given-args_35 module17_36 phase18_37 sym19_38)"
"(let-values(((extra-inspector16_39)(if(pair? given-kws_34)(eq? '#:extra-inspector(car given-kws_34)) '#f)))"
"(let-values(((extra-inspector8_40)(if extra-inspector16_39(car given-args_35)(void)))"
"((given-kws_41)(if extra-inspector16_39(cdr given-kws_34) given-kws_34))"
"((given-args_42)(if extra-inspector16_39(cdr given-args_35) given-args_35)))"
"(let-values(((frame-id14_43)(if(pair? given-kws_41)(eq? '#:frame-id(car given-kws_41)) '#f)))"
"(let-values(((frame-id6_44)(if frame-id14_43(car given-args_42)(void)))"
"((given-kws_45)(if frame-id14_43(cdr given-kws_41) given-kws_41))"
"((given-args_46)(if frame-id14_43(cdr given-args_42) given-args_42)))"
"(let-values(((free=id15_47)(if(pair? given-kws_45)(eq? '#:free=id(car given-kws_45)) '#f)))"
"(let-values(((free=id7_48)(if free=id15_47(car given-args_46)(void)))"
"((given-kws_49)(if free=id15_47(cdr given-kws_45) given-kws_45))"
"((given-args_50)(if free=id15_47(cdr given-args_46) given-args_46)))"
"(let-values(((nominal-module10_51)"
"(if(pair? given-kws_49)(eq? '#:nominal-module(car given-kws_49)) '#f)))"
"(let-values(((nominal-module2_52)(if nominal-module10_51(car given-args_50)(void)))"
"((given-kws_53)(if nominal-module10_51(cdr given-kws_49) given-kws_49))"
"((given-args_54)(if nominal-module10_51(cdr given-args_50) given-args_50)))"
"(let-values(((nominal-phase11_55)"
"(if(pair? given-kws_53)(eq? '#:nominal-phase(car given-kws_53)) '#f)))"
"(let-values(((nominal-phase3_56)(if nominal-phase11_55(car given-args_54)(void)))"
"((given-kws_57)(if nominal-phase11_55(cdr given-kws_53) given-kws_53))"
"((given-args_58)(if nominal-phase11_55(cdr given-args_54) given-args_54)))"
"(let-values(((nominal-require-phase13_59)"
"(if(pair? given-kws_57)(eq? '#:nominal-require-phase(car given-kws_57)) '#f)))"
"(let-values(((nominal-require-phase5_60)"
"(if nominal-require-phase13_59(car given-args_58)(void)))"
"((given-kws_61)(if nominal-require-phase13_59(cdr given-kws_57) given-kws_57))"
"((given-args_62)"
"(if nominal-require-phase13_59(cdr given-args_58) given-args_58)))"
"(let-values(((nominal-sym12_63)"
"(if(pair? given-kws_61)(eq? '#:nominal-sym(car given-kws_61)) '#f)))"
"(let-values(((nominal-sym4_64)(if nominal-sym12_63(car given-args_62)(void)))"
"((given-kws_65)(if nominal-sym12_63(cdr given-kws_61) given-kws_61))"
"((given-args_66)(if nominal-sym12_63(cdr given-args_62) given-args_62)))"
"(let-values(((wrt9_67)(pair? given-kws_65)))"
"(let-values(((wrt1_68)(if wrt9_67(car given-args_66)(void))))"
"(make-module-binding20.1"
" extra-inspector8_40"
" extra-inspector16_39"
" frame-id6_44"
" frame-id14_43"
" free=id7_48"
" free=id15_47"
" nominal-module2_52"
" nominal-module10_51"
" nominal-phase3_56"
" nominal-phase11_55"
" nominal-require-phase5_60"
" nominal-require-phase13_59"
" nominal-sym4_64"
" nominal-sym12_63"
" wrt1_68"
" wrt9_67"
" module17_36"
" phase18_37"
" sym19_38)))))))))))))))))))"
"(define-values"
"(make-module-binding22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_69 given-argc_70)"
"(if(= given-argc_70 '5)"
"(let-values(((l1_71) given-kws_69))"
"(let-values(((l1_72)(if(null? l1_71) l1_71(if(eq?(car l1_71) '#:extra-inspector)(cdr l1_71) l1_71))))"
"(let-values(((l1_73) l1_72))"
"(let-values(((l1_74)(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:frame-id)(cdr l1_73) l1_73))))"
"(let-values(((l1_75) l1_74))"
"(let-values(((l1_76)(if(null? l1_75) l1_75(if(eq?(car l1_75) '#:free=id)(cdr l1_75) l1_75))))"
"(let-values(((l1_77) l1_76))"
"(let-values(((l1_78)"
"(if(null? l1_77) l1_77(if(eq?(car l1_77) '#:nominal-module)(cdr l1_77) l1_77))))"
"(let-values(((l1_79) l1_78))"
"(let-values(((l1_80)"
"(if(null? l1_79)"
" l1_79"
"(if(eq?(car l1_79) '#:nominal-phase)(cdr l1_79) l1_79))))"
"(let-values(((l1_81) l1_80))"
"(let-values(((l1_82)"
"(if(null? l1_81)"
" l1_81"
"(if(eq?(car l1_81) '#:nominal-require-phase)(cdr l1_81) l1_81))))"
"(let-values(((l1_83) l1_82))"
"(let-values(((l1_84)"
"(if(null? l1_83)"
" l1_83"
"(if(eq?(car l1_83) '#:nominal-sym)(cdr l1_83) l1_83))))"
"(let-values(((l1_85) l1_84))"
"(let-values(((l1_86)"
"(if(null? l1_85)"
" l1_85"
"(if(eq?(car l1_85) '#:wrt)(cdr l1_85) l1_85))))"
"(null? l1_86)))))))))))))))))"
" '#f))"
"(case-lambda"
"((given-kws_87 given-args_88 module_89 phase_90 sym_91)"
"(unpack21.1$1 given-kws_87 given-args_88 module_89 phase_90 sym_91)))"
" null"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:wrt)"
"(let-values(((make-module-binding_92)"
"(case-lambda((module_93 phase_94 sym_95)(unpack21.1$1 null null module_93 phase_94 sym_95)))))"
" make-module-binding_92)))"
"(define-values"
"(module-binding-update44.1)"
"(lambda(extra-inspector32_96"
" extra-inspector42_97"
" frame-id30_98"
" frame-id40_99"
" free=id31_100"
" free=id41_101"
" module23_102"
" module33_103"
" nominal-module26_104"
" nominal-module36_105"
" nominal-phase27_106"
" nominal-phase37_107"
" nominal-require-phase29_108"
" nominal-require-phase39_109"
" nominal-sym28_110"
" nominal-sym38_111"
" phase24_112"
" phase34_113"
" sym25_114"
" sym35_115"
" b43_116)"
"(let-values(((b_117) b43_116))"
"(let-values(((module_118)(if module33_103 module23_102(module-binding-module b_117))))"
"(let-values(((phase_119)(if phase34_113 phase24_112(module-binding-phase b_117))))"
"(let-values(((sym_120)(if sym35_115 sym25_114(module-binding-sym b_117))))"
"(let-values(((nominal-module_121)"
"(if nominal-module36_105 nominal-module26_104(module-binding-nominal-module b_117))))"
"(let-values(((nominal-phase_122)"
"(if nominal-phase37_107 nominal-phase27_106(module-binding-nominal-phase b_117))))"
"(let-values(((nominal-sym_123)"
"(if nominal-sym38_111 nominal-sym28_110(module-binding-nominal-sym b_117))))"
"(let-values(((nominal-require-phase_124)"
"(if nominal-require-phase39_109"
" nominal-require-phase29_108"
"(module-binding-nominal-require-phase b_117))))"
"(let-values(((frame-id_125)(if frame-id40_99 frame-id30_98(binding-frame-id b_117))))"
"(let-values(((free=id_126)(if free=id41_101 free=id31_100(binding-free=id b_117))))"
"(let-values(((extra-inspector_127)"
"(if extra-inspector42_97"
" extra-inspector32_96"
"(module-binding-extra-inspector b_117))))"
"(let-values()"
"(let-values(((...x/module-binding.rkt:62:2_128) make-module-binding22.1)"
"((module49_129) module_118)"
"((phase50_130) phase_119)"
"((sym51_131) sym_120)"
"((nominal-module52_132) nominal-module_121)"
"((nominal-phase53_133) nominal-phase_122)"
"((nominal-sym54_134) nominal-sym_123)"
"((nominal-require-phase55_135) nominal-require-phase_124)"
"((frame-id56_136) frame-id_125)"
"((free=id57_137) free=id_126)"
"((extra-inspector58_138) extra-inspector_127))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" extra-inspector58_138"
" '#t"
" frame-id56_136"
" '#t"
" free=id57_137"
" '#t"
" nominal-module52_132"
" '#t"
" nominal-phase53_133"
" '#t"
" nominal-require-phase55_135"
" '#t"
" nominal-sym54_134"
" '#t"
" '#f"
" '#f"
" module49_129"
" phase50_130"
" sym51_131)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:62:2_128"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" '5)"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" extra-inspector58_138"
" frame-id56_136"
" free=id57_137"
" nominal-module52_132"
" nominal-phase53_133"
" nominal-require-phase55_135"
" nominal-sym54_134)"
" module49_129"
" phase50_130"
" sym51_131)))))))))))))))))"
"(define-values"
"(unpack45.1)"
"(lambda(given-kws_139 given-args_140 b43_141)"
"(let-values(((extra-inspector42_142)(if(pair? given-kws_139)(eq? '#:extra-inspector(car given-kws_139)) '#f)))"
"(let-values(((extra-inspector32_143)(if extra-inspector42_142(car given-args_140)(void)))"
"((given-kws_144)(if extra-inspector42_142(cdr given-kws_139) given-kws_139))"
"((given-args_145)(if extra-inspector42_142(cdr given-args_140) given-args_140)))"
"(let-values(((frame-id40_146)(if(pair? given-kws_144)(eq? '#:frame-id(car given-kws_144)) '#f)))"
"(let-values(((frame-id30_147)(if frame-id40_146(car given-args_145)(void)))"
"((given-kws_148)(if frame-id40_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if frame-id40_146(cdr given-args_145) given-args_145)))"
"(let-values(((free=id41_150)(if(pair? given-kws_148)(eq? '#:free=id(car given-kws_148)) '#f)))"
"(let-values(((free=id31_151)(if free=id41_150(car given-args_149)(void)))"
"((given-kws_152)(if free=id41_150(cdr given-kws_148) given-kws_148))"
"((given-args_153)(if free=id41_150(cdr given-args_149) given-args_149)))"
"(let-values(((module33_154)(if(pair? given-kws_152)(eq? '#:module(car given-kws_152)) '#f)))"
"(let-values(((module23_155)(if module33_154(car given-args_153)(void)))"
"((given-kws_156)(if module33_154(cdr given-kws_152) given-kws_152))"
"((given-args_157)(if module33_154(cdr given-args_153) given-args_153)))"
"(let-values(((nominal-module36_158)"
"(if(pair? given-kws_156)(eq? '#:nominal-module(car given-kws_156)) '#f)))"
"(let-values(((nominal-module26_159)(if nominal-module36_158(car given-args_157)(void)))"
"((given-kws_160)(if nominal-module36_158(cdr given-kws_156) given-kws_156))"
"((given-args_161)(if nominal-module36_158(cdr given-args_157) given-args_157)))"
"(let-values(((nominal-phase37_162)"
"(if(pair? given-kws_160)(eq? '#:nominal-phase(car given-kws_160)) '#f)))"
"(let-values(((nominal-phase27_163)(if nominal-phase37_162(car given-args_161)(void)))"
"((given-kws_164)(if nominal-phase37_162(cdr given-kws_160) given-kws_160))"
"((given-args_165)(if nominal-phase37_162(cdr given-args_161) given-args_161)))"
"(let-values(((nominal-require-phase39_166)"
"(if(pair? given-kws_164)"
"(eq? '#:nominal-require-phase(car given-kws_164))"
" '#f)))"
"(let-values(((nominal-require-phase29_167)"
"(if nominal-require-phase39_166(car given-args_165)(void)))"
"((given-kws_168)"
"(if nominal-require-phase39_166(cdr given-kws_164) given-kws_164))"
"((given-args_169)"
"(if nominal-require-phase39_166(cdr given-args_165) given-args_165)))"
"(let-values(((nominal-sym38_170)"
"(if(pair? given-kws_168)(eq? '#:nominal-sym(car given-kws_168)) '#f)))"
"(let-values(((nominal-sym28_171)(if nominal-sym38_170(car given-args_169)(void)))"
"((given-kws_172)"
"(if nominal-sym38_170(cdr given-kws_168) given-kws_168))"
"((given-args_173)"
"(if nominal-sym38_170(cdr given-args_169) given-args_169)))"
"(let-values(((phase34_174)"
"(if(pair? given-kws_172)(eq? '#:phase(car given-kws_172)) '#f)))"
"(let-values(((phase24_175)(if phase34_174(car given-args_173)(void)))"
"((given-kws_176)(if phase34_174(cdr given-kws_172) given-kws_172))"
"((given-args_177)"
"(if phase34_174(cdr given-args_173) given-args_173)))"
"(let-values(((sym35_178)(pair? given-kws_176)))"
"(let-values(((sym25_179)(if sym35_178(car given-args_177)(void))))"
"(module-binding-update44.1"
" extra-inspector32_143"
" extra-inspector42_142"
" frame-id30_147"
" frame-id40_146"
" free=id31_151"
" free=id41_150"
" module23_155"
" module33_154"
" nominal-module26_159"
" nominal-module36_158"
" nominal-phase27_163"
" nominal-phase37_162"
" nominal-require-phase29_167"
" nominal-require-phase39_166"
" nominal-sym28_171"
" nominal-sym38_170"
" phase24_175"
" phase34_174"
" sym25_179"
" sym35_178"
" b43_141)))))))))))))))))))))))"
"(define-values"
"(module-binding-update46.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_180 given-argc_181)"
"(if(= given-argc_181 '3)"
"(let-values(((l1_182) given-kws_180))"
"(let-values(((l1_183)"
"(if(null? l1_182) l1_182(if(eq?(car l1_182) '#:extra-inspector)(cdr l1_182) l1_182))))"
"(let-values(((l1_184) l1_183))"
"(let-values(((l1_185)(if(null? l1_184) l1_184(if(eq?(car l1_184) '#:frame-id)(cdr l1_184) l1_184))))"
"(let-values(((l1_186) l1_185))"
"(let-values(((l1_187)"
"(if(null? l1_186) l1_186(if(eq?(car l1_186) '#:free=id)(cdr l1_186) l1_186))))"
"(let-values(((l1_188) l1_187))"
"(let-values(((l1_189)"
"(if(null? l1_188) l1_188(if(eq?(car l1_188) '#:module)(cdr l1_188) l1_188))))"
"(let-values(((l1_190) l1_189))"
"(let-values(((l1_191)"
"(if(null? l1_190)"
" l1_190"
"(if(eq?(car l1_190) '#:nominal-module)(cdr l1_190) l1_190))))"
"(let-values(((l1_192) l1_191))"
"(let-values(((l1_193)"
"(if(null? l1_192)"
" l1_192"
"(if(eq?(car l1_192) '#:nominal-phase)(cdr l1_192) l1_192))))"
"(let-values(((l1_194) l1_193))"
"(let-values(((l1_195)"
"(if(null? l1_194)"
" l1_194"
"(if(eq?(car l1_194) '#:nominal-require-phase)(cdr l1_194) l1_194))))"
"(let-values(((l1_196) l1_195))"
"(let-values(((l1_197)"
"(if(null? l1_196)"
" l1_196"
"(if(eq?(car l1_196) '#:nominal-sym)(cdr l1_196) l1_196))))"
"(let-values(((l1_198) l1_197))"
"(let-values(((l1_199)"
"(if(null? l1_198)"
" l1_198"
"(if(eq?(car l1_198) '#:phase)(cdr l1_198) l1_198))))"
"(let-values(((l1_200) l1_199))"
"(let-values(((l1_201)"
"(if(null? l1_200)"
" l1_200"
"(if(eq?(car l1_200) '#:sym)(cdr l1_200) l1_200))))"
"(null? l1_201)))))))))))))))))))))"
" '#f))"
"(case-lambda((given-kws_202 given-args_203 b_204)(unpack45.1 given-kws_202 given-args_203 b_204)))"
" null"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:phase"
" #:sym)"
"(let-values(((module-binding-update_205)(case-lambda((b_206)(unpack45.1 null null b_206)))))"
" module-binding-update_205)))"
"(define-values"
"(module-binding?)"
"(lambda(b_207)"
"(let-values(((or-part_208)(simple-module-binding? b_207)))"
"(if or-part_208 or-part_208(full-module-binding? b_207)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding47.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector)"
"(let-values(((struct:_209 make-_210 ?_211 -ref_212 -set!_213)"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" '8"
" '0"
" '#f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_265 ser_266 state_267)"
"(let-values(((simplified-b_268)"
"(if(full-binding-frame-id b_265)"
"(let-values(((...x/module-binding.rkt:87:16_269) module-binding-update46.1)"
"((b60_270) b_265)"
"((temp61_271) '#f))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" '#f"
" '#f"
" temp61_271"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" b60_270)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:87:16_269"
" keyword-procedure-extract"
" '(#:frame-id)"
" '3)"
" '(#:frame-id)"
"(list temp61_271)"
" b60_270)))"
" b_265)))"
"(if(full-module-binding? simplified-b_268)"
"(let-values()"
"(list"
" 'deserialize-full-module-binding"
"(ser_266(full-module-binding-module b_265))"
"(ser_266(full-module-binding-sym b_265))"
"(ser_266(full-module-binding-phase b_265))"
"(ser_266(full-module-binding-nominal-module b_265))"
"(ser_266(full-module-binding-nominal-phase b_265))"
"(ser_266(full-module-binding-nominal-sym b_265))"
"(ser_266(full-module-binding-nominal-require-phase b_265))"
"(ser_266(full-binding-free=id b_265))"
"(if(full-module-binding-extra-inspector b_265)"
"(serialize-state-inspector-id state_267)"
" '#f)))"
"(let-values()(ser_266 simplified-b_268)))))))"
" '#f"
" '#f"
" '(0 1 2 3 4 5 6 7)"
" '#f"
" 'full-module-binding)))"
"(values"
" struct:_209"
" make-_210"
" ?_211"
"(make-struct-field-accessor -ref_212 '0 'module)"
"(make-struct-field-accessor -ref_212 '1 'phase)"
"(make-struct-field-accessor -ref_212 '2 'sym)"
"(make-struct-field-accessor -ref_212 '3 'nominal-module)"
"(make-struct-field-accessor -ref_212 '4 'nominal-phase)"
"(make-struct-field-accessor -ref_212 '5 'nominal-sym)"
"(make-struct-field-accessor -ref_212 '6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_212 '7 'extra-inspector))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding48.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym)"
"(let-values(((struct:_272 make-_273 ?_274 -ref_275 -set!_276)"
"(make-struct-type"
" 'simple-module-binding"
" '#f"
" '3"
" '0"
" '#f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_303 ser_304 state_305)"
"(list"
" 'deserialize-simple-module-binding"
"(ser_304(simple-module-binding-module b_303))"
"(ser_304(simple-module-binding-sym b_303))"
"(ser_304(simple-module-binding-phase b_303))))))"
" '#f"
" '#f"
" '(0 1 2)"
" '#f"
" 'simple-module-binding)))"
"(values"
" struct:_272"
" make-_273"
" ?_274"
"(make-struct-field-accessor -ref_275 '0 'module)"
"(make-struct-field-accessor -ref_275 '1 'phase)"
"(make-struct-field-accessor -ref_275 '2 'sym))))"
"(define-values"
"(1/deserialize-full-module-binding)"
"(lambda(module_306"
" sym_307"
" phase_308"
" nominal-module_309"
" nominal-phase_310"
" nominal-sym_311"
" nominal-require-phase_312"
" free=id_313"
" extra-inspector_314)"
"(let-values(((...x/module-binding.rkt:121:2_315) make-module-binding22.1)"
"((module63_316) module_306)"
"((phase64_317) phase_308)"
"((sym65_318) sym_307)"
"((nominal-module66_319) nominal-module_309)"
"((nominal-phase67_320) nominal-phase_310)"
"((nominal-sym68_321) nominal-sym_311)"
"((nominal-require-phase69_322) nominal-require-phase_312)"
"((free=id70_323) free=id_313)"
"((extra-inspector71_324) extra-inspector_314))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" extra-inspector71_324"
" '#t"
" '#f"
" '#f"
" free=id70_323"
" '#t"
" nominal-module66_319"
" '#t"
" nominal-phase67_320"
" '#t"
" nominal-require-phase69_322"
" '#t"
" nominal-sym68_321"
" '#t"
" '#f"
" '#f"
" module63_316"
" phase64_317"
" sym65_318)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:121:2_315"
" keyword-procedure-extract"
" '(#:extra-inspector #:free=id #:nominal-module #:nominal-phase #:nominal-require-phase #:nominal-sym)"
" '5)"
" '(#:extra-inspector #:free=id #:nominal-module #:nominal-phase #:nominal-require-phase #:nominal-sym)"
"(list"
" extra-inspector71_324"
" free=id70_323"
" nominal-module66_319"
" nominal-phase67_320"
" nominal-require-phase69_322"
" nominal-sym68_321)"
" module63_316"
" phase64_317"
" sym65_318)))))"
"(define-values"
"(1/deserialize-simple-module-binding)"
"(lambda(module_325 sym_326 phase_327)(simple-module-binding48.1 module_325 phase_327 sym_326)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_328)"
"(if(simple-module-binding? b_328)(simple-module-binding-module b_328)(full-module-binding-module b_328))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_329)"
"(if(simple-module-binding? b_329)(simple-module-binding-phase b_329)(full-module-binding-phase b_329))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_330)"
"(if(simple-module-binding? b_330)(simple-module-binding-sym b_330)(full-module-binding-sym b_330))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_331)"
"(if(simple-module-binding? b_331)"
"(simple-module-binding-module b_331)"
"(full-module-binding-nominal-module b_331))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_332)"
"(if(simple-module-binding? b_332)(simple-module-binding-phase b_332)(full-module-binding-nominal-phase b_332))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_333)"
"(if(simple-module-binding? b_333)(simple-module-binding-sym b_333)(full-module-binding-nominal-sym b_333))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_334)(if(simple-module-binding? b_334) '0(full-module-binding-nominal-require-phase b_334))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_335)(if(simple-module-binding? b_335) '#f(full-module-binding-extra-inspector b_335))))"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" '1"
" '0"
" '#f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_24 ser_25 state_26)"
"(list"
" 'deserialize-full-local-binding"
"(ser_25(full-local-binding-key b_24))"
"(ser_25(full-binding-free=id b_24))))))"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'full-local-binding)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 '0 'key))))"
"(define-values"
"(1/deserialize-full-local-binding)"
"(lambda(key_27 free=id_28)(full-local-binding1.1 '#f free=id_28 key_27)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_29 frame-id4_30 free=id3_31 free=id5_32 key6_33)"
"(let-values(((key_34) key6_33))"
"(let-values(((frame-id_35)(if frame-id4_30 frame-id2_29 '#f)))"
"(let-values(((free=id_36)(if free=id5_32 free=id3_31 '#f)))"
"(let-values()"
"(if(if(not frame-id_35)(not free=id_36) '#f)"
"(let-values() key_34)"
"(let-values()(full-local-binding1.1 frame-id_35 free=id_36 key_34)))))))))"
"(define-values"
"(unpack8.1$1)"
"(lambda(given-kws_37 given-args_38 key6_39)"
"(let-values(((frame-id4_40)(if(pair? given-kws_37)(eq? '#:frame-id(car given-kws_37)) '#f)))"
"(let-values(((frame-id2_41)(if frame-id4_40(car given-args_38)(void)))"
"((given-kws_42)(if frame-id4_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if frame-id4_40(cdr given-args_38) given-args_38)))"
"(let-values(((free=id5_44)(pair? given-kws_42)))"
"(let-values(((free=id3_45)(if free=id5_44(car given-args_43)(void))))"
"(make-local-binding7.1 frame-id2_41 frame-id4_40 free=id3_45 free=id5_44 key6_39)))))))"
"(define-values"
"(make-local-binding9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_46 given-argc_47)"
"(if(= given-argc_47 '3)"
"(let-values(((l1_48) given-kws_46))"
"(let-values(((l1_49)(if(null? l1_48) l1_48(if(eq?(car l1_48) '#:frame-id)(cdr l1_48) l1_48))))"
"(let-values(((l1_50) l1_49))"
"(let-values(((l1_51)(if(null? l1_50) l1_50(if(eq?(car l1_50) '#:free=id)(cdr l1_50) l1_50))))"
"(null? l1_51)))))"
" '#f))"
"(case-lambda((given-kws_52 given-args_53 key_54)(unpack8.1$1 given-kws_52 given-args_53 key_54)))"
" null"
" '(#:frame-id #:free=id)"
"(let-values(((make-local-binding_55)(case-lambda((key_56)(unpack8.1$1 null null key_56)))))"
" make-local-binding_55)))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_57 frame-id14_58 free=id12_59 free=id15_60 key10_61 key13_62 b16_63)"
"(let-values(((b_64) b16_63))"
"(let-values(((key_65)(if key13_62 key10_61(local-binding-key b_64))))"
"(let-values(((frame-id_66)(if frame-id14_58 frame-id11_57(binding-frame-id b_64))))"
"(let-values(((free=id_67)(if free=id15_60 free=id12_59(binding-free=id b_64))))"
"(let-values()"
"(let-values(((...ax/local-binding.rkt:48:2_68) make-local-binding9.1)"
"((key21_69) key_65)"
"((frame-id22_70) frame-id_66)"
"((free=id23_71) free=id_67))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id22_70 '#t free=id23_71 '#t key21_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ax/local-binding.rkt:48:2_68"
" keyword-procedure-extract"
" '(#:frame-id #:free=id)"
" '3)"
" '(#:frame-id #:free=id)"
"(list frame-id22_70 free=id23_71)"
" key21_69))))))))))"
"(define-values"
"(unpack18.1$2)"
"(lambda(given-kws_72 given-args_73 b16_74)"
"(let-values(((frame-id14_75)(if(pair? given-kws_72)(eq? '#:frame-id(car given-kws_72)) '#f)))"
"(let-values(((frame-id11_76)(if frame-id14_75(car given-args_73)(void)))"
"((given-kws_77)(if frame-id14_75(cdr given-kws_72) given-kws_72))"
"((given-args_78)(if frame-id14_75(cdr given-args_73) given-args_73)))"
"(let-values(((free=id15_79)(if(pair? given-kws_77)(eq? '#:free=id(car given-kws_77)) '#f)))"
"(let-values(((free=id12_80)(if free=id15_79(car given-args_78)(void)))"
"((given-kws_81)(if free=id15_79(cdr given-kws_77) given-kws_77))"
"((given-args_82)(if free=id15_79(cdr given-args_78) given-args_78)))"
"(let-values(((key13_83)(pair? given-kws_81)))"
"(let-values(((key10_84)(if key13_83(car given-args_82)(void))))"
"(local-binding-update17.1"
" frame-id11_76"
" frame-id14_75"
" free=id12_80"
" free=id15_79"
" key10_84"
" key13_83"
" b16_74)))))))))"
"(define-values"
"(local-binding-update19.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_85 given-argc_86)"
"(if(= given-argc_86 '3)"
"(let-values(((l1_87) given-kws_85))"
"(let-values(((l1_88)(if(null? l1_87) l1_87(if(eq?(car l1_87) '#:frame-id)(cdr l1_87) l1_87))))"
"(let-values(((l1_89) l1_88))"
"(let-values(((l1_90)(if(null? l1_89) l1_89(if(eq?(car l1_89) '#:free=id)(cdr l1_89) l1_89))))"
"(let-values(((l1_91) l1_90))"
"(let-values(((l1_92)(if(null? l1_91) l1_91(if(eq?(car l1_91) '#:key)(cdr l1_91) l1_91))))"
"(null? l1_92)))))))"
" '#f))"
"(case-lambda((given-kws_93 given-args_94 b_95)(unpack18.1$2 given-kws_93 given-args_94 b_95)))"
" null"
" '(#:frame-id #:free=id #:key)"
"(let-values(((local-binding-update_96)(case-lambda((b_97)(unpack18.1$2 null null b_97)))))"
" local-binding-update_96)))"
"(define-values(local-binding-key)(lambda(b_98)(if(full-local-binding? b_98)(full-local-binding-key b_98) b_98)))"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 '1) '#f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
" '\"(or/c exact-nonnegative-integer?\\n\""
" '\" identifier?\\n\""
" '\" (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 '1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
" '\"field index >= initialized-field count for structure type\""
" '\"field index\""
" v_1"
" '\"initialized-field count\""
"(list-ref info_2 '1))))"
"(if(member v_1(list-ref info_2 '5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
" '\"field index not declared immutable\""
" '\"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 '3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$2 '#f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
" '\"contract violation for given value; expected an identifier\"\n"
" '\"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(make-struct-type"
" 'rename-transformer"
" '#f"
" '1"
" '0"
" '#f"
"(list(cons 1/prop:rename-transformer '0))"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'rename-transformer)))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 '0 'id)))))"
"(lambda(id_37)"
"(begin"
"(if(identifier? id_37)"
"(void)"
" (let-values () (raise-argument-error 'make-rename-transformer '\"identifier?\" id_37)))"
"(rename-transformer1_12 id_37))))))"
"(define-values(1/rename-transformer-target)(lambda(t_38)((rename-transformer-value t_38) t_38)))"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((...r/syntax/binding.rkt:44:13_7) resolve+shift15.1)"
"((a21_8) a_1)"
"((a-phase22_9) a-phase_3)"
"((temp23_10) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f '#f '#f '#f '#f '#f '#f temp23_10 '#t a21_8 a-phase22_9)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:44:13_7"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" '4)"
" '(#:unbound-sym?)"
"(list temp23_10)"
" a21_8"
" a-phase22_9)))))"
"(let-values(((bb_6)"
"(let-values(((...r/syntax/binding.rkt:45:13_11) resolve+shift15.1)"
"((b24_12) b_2)"
"((b-phase25_13) b-phase_4)"
"((temp26_14) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f '#f '#f '#f '#f '#f '#f temp26_14 '#t b24_12 b-phase25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:45:13_11"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" '4)"
" '(#:unbound-sym?)"
"(list temp26_14)"
" b24_12"
" b-phase25_13)))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" '#f)"
" '#f)"
" '#f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) '#f))"
" (let-values () (error '\"bad binding\"))))))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_18 phase_19)"
"(let-values(((b_20)"
"(let-values(((...r/syntax/binding.rkt:69:12_21) resolve+shift15.1)"
"((id27_22) id_18)"
"((phase28_23) phase_19)"
"((temp29_24) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f '#f '#f '#f '#f '#f '#f temp29_24 '#t id27_22 phase28_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:69:12_21"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" '4)"
" '(#:unbound-sym?)"
"(list temp29_24)"
" id27_22"
" phase28_23)))))"
"(if(symbol? b_20)"
"(let-values() b_20)"
"(if(module-binding? b_20)"
"(let-values()(module-binding-sym b_20))"
"(if(local-binding? b_20)(let-values()(local-binding-key b_20))(let-values()(syntax-e$1 id_18))))))))"
"(define-values"
"(identifier-binding$1)"
"(lambda(id_25 phase_26)"
"(let-values(((b_27)"
"(let-values(((id30_28) id_25)((phase31_29) phase_26))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f id30_28 phase31_29)"
"(resolve+shift15.1 id30_28 phase31_29)))))"
"(if(module-binding? b_27)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_27))"
" '#f"
"(list"
"(module-binding-module b_27)"
"(module-binding-sym b_27)"
"(module-binding-nominal-module b_27)"
"(module-binding-nominal-sym b_27)"
"(module-binding-phase b_27)"
"(module-binding-nominal-require-phase b_27)"
"(module-binding-nominal-phase b_27))))"
"(if(local-binding? b_27)(let-values() 'lexical)(let-values() '#f))))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_30 id_31 phase_32)"
"(if(1/rename-transformer? val_30)"
"(let-values()"
"(let-values(((free=id_33)(1/rename-transformer-target val_30)))"
"(if(syntax-property$1 free=id_33 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_34)"
"(let-values(((...r/syntax/binding.rkt:101:16_35) resolve+shift15.1)"
"((id32_36) id_31)"
"((phase33_37) phase_32)"
"((temp34_38) '#t)"
"((temp35_39) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" '#f"
" '#f"
" temp34_38"
" '#t"
" '#f"
" '#f"
" temp35_39"
" '#t"
" '#f"
" '#f"
" id32_36"
" phase33_37)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:101:16_35"
" keyword-procedure-extract"
" '(#:exactly? #:immediate?)"
" '4)"
" '(#:exactly? #:immediate?)"
"(list temp34_38 temp35_39)"
" id32_36"
" phase33_37)))))"
"(add-binding-in-scopes!"
"(syntax-scope-set id_31 phase_32)"
"(syntax-e$1 id_31)"
"(binding-set-free=id b_34 free=id_33)))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_40 free=id_41)"
"(if(module-binding? b_40)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:107:24_42) module-binding-update46.1)"
"((b36_43) b_40)"
"((free=id37_44) free=id_41))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" '#f"
" '#f"
" '#f"
" '#f"
" free=id37_44"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" b36_43)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:107:24_42"
" keyword-procedure-extract"
" '(#:free=id)"
" '3)"
" '(#:free=id)"
"(list free=id37_44)"
" b36_43))))"
"(if(local-binding? b_40)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:108:23_45) local-binding-update19.1)"
"((b38_46) b_40)"
"((free=id39_47) free=id_41))"
"(if(variable-reference-constant?(#%variable-reference local-binding-update19.1))"
"(local-binding-update17.1 '#f '#f free=id39_47 '#t '#f '#f b38_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:108:23_45"
" keyword-procedure-extract"
" '(#:free=id)"
" '3)"
" '(#:free=id)"
"(list free=id39_47)"
" b38_46))))"
" (let-values () (error '\"bad binding for free=id:\" b_40))))))"
"(define-values"
"(1/syntax-module-path-index-shift)"
"(lambda(s_48 from-mpi_49 to-mpi_50)"
"(if(eq? from-mpi_49 to-mpi_50)"
" s_48"
"(let-values(((shift_51)(cons from-mpi_49 to-mpi_50)))"
"(let-values(((shifts40_52) '#f))"
"(let-values(((prev-result_53) '#f))"
"(let-values(((add-shift_54)"
"(lambda(shifts_55)"
"(if(eq? shifts40_52 shifts_55)"
"(let-values() prev-result_53)"
"(let-values()"
"(let-values(((r_56)(let-values()(cons shift_51 shifts_55))))"
"(begin(set! shifts40_52 shifts_55)(set! prev-result_53 r_56) r_56)))))))"
"(syntax-map"
" s_48"
"(lambda(tail?_57 d_58) d_58)"
"(lambda(s_59 d_60)"
"(let-values(((the-struct_61) s_59))"
"(if(syntax?$1 the-struct_61)"
"(let-values(((content41_62) d_60)((mpi-shifts42_63)(add-shift_54(syntax-mpi-shifts s_59))))"
"(syntax1.1"
" content41_62"
"(syntax-scopes the-struct_61)"
"(syntax-scope-propagations the-struct_61)"
"(syntax-shifted-multi-scopes the-struct_61)"
" mpi-shifts42_63"
"(syntax-bulk-binding-registry the-struct_61)"
"(syntax-srcloc the-struct_61)"
"(syntax-props the-struct_61)"
"(syntax-inspector the-struct_61)"
"(syntax-tamper the-struct_61)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_61))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(resolve+shift13.1)"
"(lambda(ambiguous-value1_64"
" ambiguous-value6_65"
" exactly?2_66"
" exactly?7_67"
" extra-shifts5_68"
" extra-shifts10_69"
" immediate?3_70"
" immediate?8_71"
" unbound-sym?4_72"
" unbound-sym?9_73"
" s11_74"
" phase12_75)"
"(let-values(((s_76) s11_74))"
"(let-values(((phase_77) phase12_75))"
"(let-values(((ambiguous-value_78)(if ambiguous-value6_65 ambiguous-value1_64 '#f)))"
"(let-values(((exactly?_79)(if exactly?7_67 exactly?2_66 '#f)))"
"(let-values(((immediate?_80)(if immediate?8_71 immediate?3_70 exactly?_79)))"
"(let-values(((unbound-sym?_81)(if unbound-sym?9_73 unbound-sym?4_72 '#f)))"
"(let-values(((extra-shifts_82)(if extra-shifts10_69 extra-shifts5_68 null)))"
"(let-values()"
"(let-values(((immediate-b_83)"
"(let-values(((...r/syntax/binding.rkt:142:22_85) resolve23.1)"
"((s43_86) s_76)"
"((phase44_87) phase_77)"
"((ambiguous-value45_88) ambiguous-value_78)"
"((exactly?46_89) exactly?_79)"
"((extra-shifts47_90) extra-shifts_82))"
"(if(variable-reference-constant?(#%variable-reference resolve23.1))"
"(resolve21.1"
" ambiguous-value45_88"
" '#t"
" exactly?46_89"
" '#t"
" extra-shifts47_90"
" '#t"
" s43_86"
" phase44_87)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:142:22_85"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
" '4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(list ambiguous-value45_88 exactly?46_89 extra-shifts47_90)"
" s43_86"
" phase44_87)))))"
"(let-values(((b_84)"
"(if(if immediate-b_83"
"(if(not immediate?_80)(binding-free=id immediate-b_83) '#f)"
" '#f)"
"(let-values(((...r/syntax/binding.rkt:149:16_91) resolve+shift15.1)"
"((temp48_92)(binding-free=id immediate-b_83))"
"((phase49_93) phase_77)"
"((temp50_94)(append extra-shifts_82(syntax-mpi-shifts s_76)))"
"((ambiguous-value51_95) ambiguous-value_78)"
"((exactly?52_96) exactly?_79)"
"((unbound-sym?53_97) unbound-sym?_81))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" ambiguous-value51_95"
" '#t"
" exactly?52_96"
" '#t"
" temp50_94"
" '#t"
" '#f"
" '#f"
" unbound-sym?53_97"
" '#t"
" temp48_92"
" phase49_93)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:149:16_91"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
" '4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
"(list ambiguous-value51_95 exactly?52_96 temp50_94 unbound-sym?53_97)"
" temp48_92"
" phase49_93)))"
" immediate-b_83)))"
"(if(module-binding? b_84)"
"(let-values()"
"(let-values(((mpi-shifts_98)(syntax-mpi-shifts s_76)))"
"(if(null? mpi-shifts_98)"
"(let-values() b_84)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:162:6_99) module-binding-update46.1)"
"((b54_100) b_84)"
"((temp55_101)"
"(apply-syntax-shifts(module-binding-module b_84) mpi-shifts_98))"
"((temp56_102)"
"(apply-syntax-shifts"
"(module-binding-nominal-module b_84)"
" mpi-shifts_98))"
"((temp57_103)"
"(if(binding-free=id b_84)"
"(syntax-transfer-shifts(binding-free=id b_84) s_76)"
" '#f)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" '#f"
" '#f"
" '#f"
" '#f"
" temp57_103"
" '#t"
" temp55_101"
" '#t"
" temp56_102"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" b54_100)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:162:6_99"
" keyword-procedure-extract"
" '(#:free=id #:module #:nominal-module)"
" '3)"
" '(#:free=id #:module #:nominal-module)"
"(list temp57_103 temp55_101 temp56_102)"
" b54_100)))))))"
"(if(if(not b_84) unbound-sym?_81 '#f)"
"(let-values()(syntax-e$1 s_76))"
"(let-values() b_84)))))))))))))))"
"(define-values"
"(unpack14.1)"
"(lambda(given-kws_104 given-args_105 s11_106 phase12_107)"
"(let-values(((ambiguous-value6_108)(if(pair? given-kws_104)(eq? '#:ambiguous-value(car given-kws_104)) '#f)))"
"(let-values(((ambiguous-value1_109)(if ambiguous-value6_108(car given-args_105)(void)))"
"((given-kws_110)(if ambiguous-value6_108(cdr given-kws_104) given-kws_104))"
"((given-args_111)(if ambiguous-value6_108(cdr given-args_105) given-args_105)))"
"(let-values(((exactly?7_112)(if(pair? given-kws_110)(eq? '#:exactly?(car given-kws_110)) '#f)))"
"(let-values(((exactly?2_113)(if exactly?7_112(car given-args_111)(void)))"
"((given-kws_114)(if exactly?7_112(cdr given-kws_110) given-kws_110))"
"((given-args_115)(if exactly?7_112(cdr given-args_111) given-args_111)))"
"(let-values(((extra-shifts10_116)"
"(if(pair? given-kws_114)(eq? '#:extra-shifts(car given-kws_114)) '#f)))"
"(let-values(((extra-shifts5_117)(if extra-shifts10_116(car given-args_115)(void)))"
"((given-kws_118)(if extra-shifts10_116(cdr given-kws_114) given-kws_114))"
"((given-args_119)(if extra-shifts10_116(cdr given-args_115) given-args_115)))"
"(let-values(((immediate?8_120)(if(pair? given-kws_118)(eq? '#:immediate?(car given-kws_118)) '#f)))"
"(let-values(((immediate?3_121)(if immediate?8_120(car given-args_119)(void)))"
"((given-kws_122)(if immediate?8_120(cdr given-kws_118) given-kws_118))"
"((given-args_123)(if immediate?8_120(cdr given-args_119) given-args_119)))"
"(let-values(((unbound-sym?9_124)(pair? given-kws_122)))"
"(let-values(((unbound-sym?4_125)(if unbound-sym?9_124(car given-args_123)(void))))"
"(resolve+shift13.1"
" ambiguous-value1_109"
" ambiguous-value6_108"
" exactly?2_113"
" exactly?7_112"
" extra-shifts5_117"
" extra-shifts10_116"
" immediate?3_121"
" immediate?8_120"
" unbound-sym?4_125"
" unbound-sym?9_124"
" s11_106"
" phase12_107)))))))))))))"
"(define-values"
"(resolve+shift15.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_126 given-argc_127)"
"(if(= given-argc_127 '4)"
"(let-values(((l1_128) given-kws_126))"
"(let-values(((l1_129)"
"(if(null? l1_128) l1_128(if(eq?(car l1_128) '#:ambiguous-value)(cdr l1_128) l1_128))))"
"(let-values(((l1_130) l1_129))"
"(let-values(((l1_131)(if(null? l1_130) l1_130(if(eq?(car l1_130) '#:exactly?)(cdr l1_130) l1_130))))"
"(let-values(((l1_132) l1_131))"
"(let-values(((l1_133)"
"(if(null? l1_132) l1_132(if(eq?(car l1_132) '#:extra-shifts)(cdr l1_132) l1_132))))"
"(let-values(((l1_134) l1_133))"
"(let-values(((l1_135)"
"(if(null? l1_134)"
" l1_134"
"(if(eq?(car l1_134) '#:immediate?)(cdr l1_134) l1_134))))"
"(let-values(((l1_136) l1_135))"
"(let-values(((l1_137)"
"(if(null? l1_136)"
" l1_136"
"(if(eq?(car l1_136) '#:unbound-sym?)(cdr l1_136) l1_136))))"
"(null? l1_137)))))))))))"
" '#f))"
"(case-lambda"
"((given-kws_138 given-args_139 s_140 phase_141)(unpack14.1 given-kws_138 given-args_139 s_140 phase_141)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:immediate? #:unbound-sym?)"
"(let-values(((resolve+shift_142)(case-lambda((s_143 phase_144)(unpack14.1 null null s_143 phase_144)))))"
" resolve+shift_142)))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_145 shifts_146)"
"(if(null? shifts_146)"
"(let-values() mpi_145)"
"(let-values()"
"(let-values(((shifted-mpi_147)(apply-syntax-shifts mpi_145(cdr shifts_146))))"
"(module-path-index-shift shifted-mpi_147(caar shifts_146)(cdar shifts_146)))))))"
"(define-values(syntax-apply-shifts)(lambda(s_148 mpi_149)(apply-syntax-shifts mpi_149(syntax-mpi-shifts s_148))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_150 from-mpi_151 to-mpi_152)"
"(if(module-binding? b_150)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:187:4_153) module-binding-update46.1)"
"((b58_154) b_150)"
"((temp59_155)(module-path-index-shift(module-binding-module b_150) from-mpi_151 to-mpi_152))"
"((temp60_156)"
"(module-path-index-shift(module-binding-nominal-module b_150) from-mpi_151 to-mpi_152)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp59_155"
" '#t"
" temp60_156"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" b58_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:187:4_153"
" keyword-procedure-extract"
" '(#:module #:nominal-module)"
" '3)"
" '(#:module #:nominal-module)"
"(list temp59_155 temp60_156)"
" b58_154))))"
"(let-values() b_150))))"
"(define-values"
"(syntax-transfer-shifts)"
"(lambda(to-s_157 from-s_158)"
"(let-values(((lst_159)(alt-reverse(syntax-mpi-shifts from-s_158))))"
"(begin"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"((letrec-values(((for-loop_160)"
"(lambda(s_161 lst_162)"
"(if(pair? lst_162)"
"(let-values(((shift_163)(unsafe-car lst_162)))"
"(if '#t"
"(let-values(((s_164)"
"(let-values(((s_165) s_161))"
"(let-values(((s_166)"
"(let-values()"
"(1/syntax-module-path-index-shift"
" s_165"
"(car shift_163)"
"(cdr shift_163)))))"
"(values s_166)))))"
"(if '#t(for-loop_160 s_164(unsafe-cdr lst_162)) s_164))"
" s_161))"
" s_161))))"
" for-loop_160)"
" to-s_157"
" lst_159)))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module19_167)"
"(lambda(s18_168 source?16_169 source?17_170)"
"(let-values(((s_171) s18_168))"
"(let-values(((source?_172)(if source?17_170 source?16_169 '#f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_171)"
"(void)"
" (let-values () (raise-argument-error 'syntax-track-origin '\"syntax?\" s_171)))"
"(let-values(((lst_173)(alt-reverse(syntax-mpi-shifts s_171))))"
"(begin"
"(if(list? lst_173)(void)(let-values()(in-list lst_173)))"
"((letrec-values(((for-loop_174)"
"(lambda(result_175 lst_176)"
"(if(pair? lst_176)"
"(let-values(((shift_177)(unsafe-car lst_176)))"
"(if '#t"
"(let-values(((result_178)"
"(let-values(((result_179) result_175))"
"(let-values(((result_180)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_181)"
"(car"
" shift_177)))"
"(let-values(((path_182"
" base_183)"
"(1/module-path-index-split"
" from-mpi_181)))"
"(if(not path_182)"
"(if(module-path-index-resolved"
" from-mpi_181)"
"(apply-syntax-shifts"
" from-mpi_181"
"(syntax-mpi-shifts"
" s_171))"
" '#f)"
" '#f)))))))"
"(values result_180)))))"
"(if(if '#t(not((lambda x_184 result_178) shift_177)) '#f)"
"(for-loop_174 result_178(unsafe-cdr lst_176))"
" result_178))"
" result_175))"
" result_175))))"
" for-loop_174)"
" '#f"
" lst_173))))))))))"
"(case-lambda"
"((s_185)(syntax-source-module19_167 s_185 '#f '#f))"
"((s_186 source?16_187)(syntax-source-module19_167 s_186 source?16_187 '#t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_188)"
"(begin"
"(if(identifier? id_188)"
"(void)"
" (let-values () (raise-argument-error 'identifier-prune-to-source-module '\"identifier?\" id_188)))"
"(let-values(((the-struct_189)(datum->syntax$2 '#f(syntax-e$1 id_188) id_188 id_188)))"
"(if(syntax?$1 the-struct_189)"
"(let-values(((mpi-shifts61_190)(syntax-mpi-shifts id_188)))"
"(syntax1.1"
"(syntax-content the-struct_189)"
"(syntax-scopes the-struct_189)"
"(syntax-scope-propagations the-struct_189)"
"(syntax-shifted-multi-scopes the-struct_189)"
" mpi-shifts61_190"
"(syntax-bulk-binding-registry the-struct_189)"
"(syntax-srcloc the-struct_189)"
"(syntax-props the-struct_189)"
"(syntax-inspector the-struct_189)"
"(syntax-tamper the-struct_189)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_189))))))"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 '#t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 '#f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
" (let-values (((built-in-s_4) (string->symbol (format '\".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literalss-id)(make-built-in-symbol! 'syntax-literalss))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialized-syntax-id)(make-built-in-symbol! 'deserialized-syntax))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(define-values"
"(struct:protected protected1.1 protected? protected-binding)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'protected '#f '1 '0 '#f null 'prefab '#f '(0) '#f 'protected)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 '0 'binding))))"
"(define-values"
"(lifted/1.1$17)"
"(make-required"
" 'provide-binding-to-require-binding"
"(case-lambda((self_2 out-binding_3 sym_4)(apply missing-kw self_2 out-binding_3 sym_4 null)))"
" '#f"
" '#f))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_5 phase-shift4_6 provide-phase-level3_7 self1_8 out-binding9_9 sym10_10)"
"(let-values(((out-binding_11) out-binding9_9))"
"(let-values(((sym_12) sym10_10))"
"(let-values(((self_13) self1_8))"
"(let-values(((mpi_14) mpi2_5))"
"(let-values(((provide-phase-level_15) provide-phase-level3_7))"
"(let-values(((phase-shift_16) phase-shift4_6))"
"(let-values()"
"(let-values(((binding_17)"
"(if(protected? out-binding_11)(protected-binding out-binding_11) out-binding_11)))"
"(let-values(((from-mod_18)(module-binding-module binding_17)))"
"(let-values(((...tax/bulk-binding.rkt:53:2_19) module-binding-update46.1)"
"((binding17_20) binding_17)"
"((temp18_21)(module-path-index-shift from-mod_18 self_13 mpi_14))"
"((mpi19_22) mpi_14)"
"((provide-phase-level20_23) provide-phase-level_15)"
"((sym21_24) sym_12)"
"((phase-shift22_25) phase-shift_16)"
"((temp23_26) '#f)"
"((temp24_27)"
"(if(not(protected? out-binding_11))"
"(module-binding-extra-inspector binding_17)"
" '#f)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" temp24_27"
" '#t"
" temp23_26"
" '#t"
" '#f"
" '#f"
" temp18_21"
" '#t"
" mpi19_22"
" '#t"
" provide-phase-level20_23"
" '#t"
" phase-shift22_25"
" '#t"
" sym21_24"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" binding17_20)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:53:2_19"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" '3)"
" '(#:extra-inspector"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" temp24_27"
" temp23_26"
" temp18_21"
" mpi19_22"
" provide-phase-level20_23"
" phase-shift22_25"
" sym21_24)"
" binding17_20))))))))))))))"
"(define-values"
"(unpack12.1$2)"
"(lambda(given-kws_28 given-args_29 out-binding9_30 sym10_31)"
"(let-values(((mpi2_32)(car given-args_29))"
"((given-kws_33)(cdr given-kws_28))"
"((given-args_34)(cdr given-args_29)))"
"(let-values(((phase-shift4_35)(car given-args_34))"
"((given-kws_36)(cdr given-kws_33))"
"((given-args_37)(cdr given-args_34)))"
"(let-values(((provide-phase-level3_38)(car given-args_37))"
"((given-kws_39)(cdr given-kws_36))"
"((given-args_40)(cdr given-args_37)))"
"(let-values(((self1_41)(car given-args_40)))"
"(provide-binding-to-require-binding11.1"
" mpi2_32"
" phase-shift4_35"
" provide-phase-level3_38"
" self1_41"
" out-binding9_30"
" sym10_31)))))))"
"(define-values"
"(provide-binding-to-require-binding13.1)"
"(lifted/1.1$17"
"(lambda(given-kws_42 given-argc_43)"
"(if(= given-argc_43 '4)"
"(let-values(((l2_44) given-kws_42))"
"(if(pair? l2_44)"
"(if(eq?(car l2_44) '#:mpi)"
"(let-values(((l2_45)(cdr l2_44)))"
"(if(pair? l2_45)"
"(if(eq?(car l2_45) '#:phase-shift)"
"(let-values(((l2_46)(cdr l2_45)))"
"(if(pair? l2_46)"
"(if(eq?(car l2_46) '#:provide-phase-level)"
"(let-values(((l2_47)(cdr l2_46)))"
"(if(pair? l2_47)(if(eq?(car l2_47) '#:self)(null?(cdr l2_47)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_48 given-args_49 out-binding_50 sym_51)"
"(unpack12.1$2 given-kws_48 given-args_49 out-binding_50 sym_51)))"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?$1"
" bulk-binding-provides"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_52 make-_53 ?_54 -ref_55 -set!_56)"
"(make-struct-type"
" 'bulk-binding"
" '#f"
" '6"
" '0"
" '#f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_98 ser_99 reachable-scopes_100)"
"(list"
" 'deserialize-bulk-binding"
"(ser_99(bulk-binding-mpi b_98))"
"(ser_99(bulk-binding-provide-phase-level b_98))"
"(ser_99(bulk-binding-phase-shift b_98))"
" bulk-binding-registry-id)))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class7.1"
"(lambda(b_101 mpi-shifts_102)"
"(let-values(((or-part_103)(bulk-binding-provides b_101)))"
"(if or-part_103"
" or-part_103"
"(let-values(((mod-name_104)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_101) mpi-shifts_102))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-registry16.1 b_101)"
"(void)"
"(let-values()"
"(error"
" '\"namespace mismatch: no bulk-binding registry available:\""
" mod-name_104)))"
"(values))))"
"(let-values(((table_105)"
"(bulk-binding-registry-table(bulk-binding-bulk-binding-registry b_101))))"
"(let-values(((bulk-provide_106)(hash-ref table_105 mod-name_104 '#f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_106"
"(void)"
"(let-values()"
"(error"
" '\"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_104)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self! b_101(bulk-provide-self bulk-provide_106))"
"(values))))"
"(let-values(((provides_107)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_106)"
"(bulk-binding-provide-phase-level b_101))))"
"(begin(set-bulk-binding-provides! b_101 provides_107) provides_107)))))))))))"
"(lambda(b_108 binding_109 sym_110)"
"(let-values(((...tax/bulk-binding.rkt:107:11_111) provide-binding-to-require-binding13.1)"
"((binding26_112) binding_109)"
"((sym27_113) sym_110)"
"((temp28_114)(bulk-binding-self b_108))"
"((temp29_115)(bulk-binding-mpi b_108))"
"((temp30_116)(bulk-binding-provide-phase-level b_108))"
"((temp31_117)(bulk-binding-phase-shift b_108)))"
"(if(variable-reference-constant?(#%variable-reference provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" temp29_115"
" temp31_117"
" temp30_116"
" temp28_114"
" binding26_112"
" sym27_113)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:107:11_111"
" keyword-procedure-extract"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" '4)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
"(list temp29_115 temp31_117 temp30_116 temp28_114)"
" binding26_112"
" sym27_113)))))))"
"(current-inspector)"
" '#f"
" '(2 3 4 5)"
" '#f"
" 'bulk-binding)))"
"(values"
" struct:_52"
" make-_53"
" ?_54"
"(make-struct-field-accessor -ref_55 '0 'provides)"
"(make-struct-field-accessor -ref_55 '1 'self)"
"(make-struct-field-accessor -ref_55 '2 'mpi)"
"(make-struct-field-accessor -ref_55 '3 'provide-phase-level)"
"(make-struct-field-accessor -ref_55 '4 'phase-shift)"
"(make-struct-field-accessor -ref_55 '5 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_56 '0 'provides)"
"(make-struct-field-mutator -set!_56 '1 'self))))"
"(define-values"
"(1/deserialize-bulk-binding)"
"(lambda(mpi_118 provide-phase-level_119 phase-shift_120 bulk-binding-registry_121)"
"(bulk-binding14.1 '#f '#f mpi_118 provide-phase-level_119 phase-shift_120 bulk-binding-registry_121)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_122 make-_123 ?_124 -ref_125 -set!_126)"
"(make-struct-type 'bulk-provide '#f '2 '0 '#f null(current-inspector) '#f '(0 1) '#f 'bulk-provide)))"
"(values"
" struct:_122"
" make-_123"
" ?_124"
"(make-struct-field-accessor -ref_125 '0 'self)"
"(make-struct-field-accessor -ref_125 '1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_148 make-_149 ?_150 -ref_151 -set!_152)"
"(make-struct-type"
" 'bulk-binding-registry"
" '#f"
" '1"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'bulk-binding-registry)))"
"(values struct:_148 make-_149 ?_150(make-struct-field-accessor -ref_151 '0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_169 mod-name_170 self_171 provides_172)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_169)"
" mod-name_170"
"(bulk-provide15.1 self_171 provides_172))))"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(define-values"
"(struct:root-expand-context"
" root-expand-context1.1"
" root-expand-context?"
" root-expand-context-module-scopes"
" root-expand-context-post-expansion-scope"
" root-expand-context-top-level-bind-scope"
" root-expand-context-all-scopes-stx"
" root-expand-context-use-site-scopes"
" root-expand-context-defined-syms"
" root-expand-context-frame-id"
" root-expand-context-counter"
" root-expand-context-lift-key)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'root-expand-context"
" '#f"
" '9"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 3 4 5 6 7 8)"
" '#f"
" 'root-expand-context)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'module-scopes)"
"(make-struct-field-accessor -ref_4 '1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 '2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 '3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_4 '4 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 '5 'defined-syms)"
"(make-struct-field-accessor -ref_4 '6 'frame-id)"
"(make-struct-field-accessor -ref_4 '7 'counter)"
"(make-struct-field-accessor -ref_4 '8 'lift-key))))"
"(define-values"
"(make-root-expand-context10.1)"
"(lambda(all-scopes-stx5_62"
" all-scopes-stx9_63"
" initial-scopes2_64"
" initial-scopes6_65"
" outside-scope3_66"
" outside-scope7_67"
" post-expansion-scope4_68"
" post-expansion-scope8_69)"
"(let-values(((initial-scopes_70)(if initial-scopes6_65 initial-scopes2_64 null)))"
"(let-values(((outside-scope_71)(if outside-scope7_67 outside-scope3_66 top-level-common-scope)))"
"(let-values(((post-expansion-scope_72)"
"(if post-expansion-scope8_69 post-expansion-scope4_68(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_73)(if all-scopes-stx9_63 all-scopes-stx5_62 '#f)))"
"(let-values()"
"(let-values(((module-scopes_74)(list* post-expansion-scope_72 outside-scope_71 initial-scopes_70)))"
"(root-expand-context1.1"
" module-scopes_74"
" post-expansion-scope_72"
"(new-scope 'module)"
"(let-values(((or-part_75) all-scopes-stx_73))"
"(if or-part_75 or-part_75(add-scopes empty-syntax module-scopes_74)))"
"(box null)"
"(make-hasheqv)"
"(gensym)"
"(box '0)"
"(generate-lift-key))))))))))"
"(define-values"
"(unpack11.1$1)"
"(lambda(given-kws_76 given-args_77)"
"(let-values(((all-scopes-stx9_78)(if(pair? given-kws_76)(eq? '#:all-scopes-stx(car given-kws_76)) '#f)))"
"(let-values(((all-scopes-stx5_79)(if all-scopes-stx9_78(car given-args_77)(void)))"
"((given-kws_80)(if all-scopes-stx9_78(cdr given-kws_76) given-kws_76))"
"((given-args_81)(if all-scopes-stx9_78(cdr given-args_77) given-args_77)))"
"(let-values(((initial-scopes6_82)(if(pair? given-kws_80)(eq? '#:initial-scopes(car given-kws_80)) '#f)))"
"(let-values(((initial-scopes2_83)(if initial-scopes6_82(car given-args_81)(void)))"
"((given-kws_84)(if initial-scopes6_82(cdr given-kws_80) given-kws_80))"
"((given-args_85)(if initial-scopes6_82(cdr given-args_81) given-args_81)))"
"(let-values(((outside-scope7_86)(if(pair? given-kws_84)(eq? '#:outside-scope(car given-kws_84)) '#f)))"
"(let-values(((outside-scope3_87)(if outside-scope7_86(car given-args_85)(void)))"
"((given-kws_88)(if outside-scope7_86(cdr given-kws_84) given-kws_84))"
"((given-args_89)(if outside-scope7_86(cdr given-args_85) given-args_85)))"
"(let-values(((post-expansion-scope8_90)(pair? given-kws_88)))"
"(let-values(((post-expansion-scope4_91)(if post-expansion-scope8_90(car given-args_89)(void))))"
"(make-root-expand-context10.1"
" all-scopes-stx5_79"
" all-scopes-stx9_78"
" initial-scopes2_83"
" initial-scopes6_82"
" outside-scope3_87"
" outside-scope7_86"
" post-expansion-scope4_91"
" post-expansion-scope8_90)))))))))))"
"(define-values"
"(make-root-expand-context12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_92 given-argc_93)"
"(if(= given-argc_93 '2)"
"(let-values(((l1_94) given-kws_92))"
"(let-values(((l1_95)(if(null? l1_94) l1_94(if(eq?(car l1_94) '#:all-scopes-stx)(cdr l1_94) l1_94))))"
"(let-values(((l1_96) l1_95))"
"(let-values(((l1_97)(if(null? l1_96) l1_96(if(eq?(car l1_96) '#:initial-scopes)(cdr l1_96) l1_96))))"
"(let-values(((l1_98) l1_97))"
"(let-values(((l1_99)"
"(if(null? l1_98) l1_98(if(eq?(car l1_98) '#:outside-scope)(cdr l1_98) l1_98))))"
"(let-values(((l1_100) l1_99))"
"(let-values(((l1_101)"
"(if(null? l1_100)"
" l1_100"
"(if(eq?(car l1_100) '#:post-expansion-scope)(cdr l1_100) l1_100))))"
"(null? l1_101)))))))))"
" '#f))"
"(case-lambda((given-kws_102 given-args_103)(unpack11.1$1 given-kws_102 given-args_103)))"
" null"
" '(#:all-scopes-stx #:initial-scopes #:outside-scope #:post-expansion-scope)"
"(let-values(((make-root-expand-context_104)(case-lambda(()(unpack11.1$1 null null)))))"
" make-root-expand-context_104)))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_105 orig-self_106 new-self_107)"
"(datum->syntax$2"
" '#f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_105))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_105))"
"(1/syntax-module-path-index-shift(root-expand-context-all-scopes-stx ctx_105) orig-self_106 new-self_107)"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_105)))"
"(let-values(((ht_108)(root-expand-context-defined-syms ctx_105)))"
"(begin"
"(if((lambda(ht_109)(hash? ht_109)) ht_108)(void)(let-values()(default-in-hash ht_108)))"
"((letrec-values(((for-loop_110)"
"(lambda(table_111 i_112)"
"(if i_112"
"(let-values(((phase_113 ht_114)(hash-iterate-key+value ht_108 i_112)))"
"(if '#t"
"(let-values(((table_115)"
"(let-values(((table_116) table_111))"
"(let-values(((table_117)"
"(let-values()"
"(let-values(((key_118 val_119)"
"(let-values()"
"(values phase_113 ht_114))))"
"(hash-set table_116 key_118 val_119)))))"
"(values table_117)))))"
"(if '#t(for-loop_110 table_115(hash-iterate-next ht_108 i_112)) table_115))"
" table_111))"
" table_111))))"
" for-loop_110)"
" '#hasheqv()"
"(hash-iterate-first ht_108))))"
"(root-expand-context-frame-id ctx_105)"
"(unbox(root-expand-context-counter ctx_105))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_120)"
"(let-values(((vec_121)(if(syntax?$1 vec-s_120)(syntax-e$1 vec-s_120) '#f)))"
"(begin"
"(if(if(vector? vec_121)"
"(if(=(vector-length vec_121) '7)"
"(if(syntax?$1(vector-ref vec_121 '0))"
"(if(syntax-with-one-scope?(vector-ref vec_121 '1))"
"(if(syntax?$1(vector-ref vec_121 '2))"
"(if(syntax?$1(vector-ref vec_121 '3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_121 '4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_121 '5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_121 '6)))"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
"(void)"
" (let-values () (error 'root-expand-context-decode-for-module '\"bad encoding: ~s\" vec-s_120)))"
"(root-expand-context1.1"
"(extract-scope-list(vector-ref vec_121 '0))"
"(extract-scope(vector-ref vec_121 '1))"
"(new-scope 'module)"
"(vector-ref vec_121 '2)"
"(box(extract-scope-list(vector-ref vec_121 '3)))"
"(unpack-defined-syms(vector-ref vec_121 '4))"
"(syntax-e$1(vector-ref vec_121 '5))"
"(box(syntax-e$1(vector-ref vec_121 '6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_122)"
"(let-values(((ht_123) v_122))"
"(begin"
"(if((lambda(ht_124)(hash? ht_124)) ht_123)(void)(let-values()(default-in-hash ht_123)))"
"((letrec-values(((for-loop_125)"
"(lambda(result_126 i_127)"
"(if i_127"
"(let-values(((phase_128 ht-s_129)(hash-iterate-key+value ht_123 i_127)))"
"(if '#t"
"(let-values(((result_130)"
"(let-values(((result_131) result_126))"
"(let-values(((result_132)"
"(let-values()"
"(let-values()"
"(if(phase? phase_128)"
"(if(hash?(syntax-e$1 ht-s_129))"
"(let-values(((ht_133)(syntax-e$1 ht-s_129)))"
"(begin"
"(if((lambda(ht_134)(hash? ht_134))"
" ht_133)"
"(void)"
"(let-values()(default-in-hash ht_133)))"
"((letrec-values(((for-loop_135)"
"(lambda(result_136 i_137)"
"(if i_137"
"(let-values(((sym_138"
" id_139)"
"(hash-iterate-key+value"
" ht_133"
" i_137)))"
"(if '#t"
"(let-values(((result_140)"
"(let-values(((result_141)"
" result_136))"
"(let-values(((result_142)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_138)"
"(identifier?"
" id_139)"
" '#f)))))"
"(values"
" result_142)))))"
"(if(if '#t"
"(not"
"((lambda x_143"
"(not"
" result_140))"
" sym_138"
" id_139))"
" '#f)"
"(for-loop_135"
" result_140"
"(hash-iterate-next"
" ht_133"
" i_137))"
" result_140))"
" result_136))"
" result_136))))"
" for-loop_135)"
" '#t"
"(hash-iterate-first ht_133))))"
" '#f)"
" '#f)))))"
"(values result_132)))))"
"(if(if '#t(not((lambda x_144(not result_130)) phase_128 ht-s_129)) '#f)"
"(for-loop_125 result_130(hash-iterate-next ht_123 i_127))"
" result_130))"
" result_126))"
" result_126))))"
" for-loop_125)"
" '#t"
"(hash-iterate-first ht_123))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_145)(map2 generalize-scope(set->list(syntax-scope-set stx_145 '0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_146)(if(syntax?$1 stx_146)(= '1(set-count(syntax-scope-set stx_146 '0))) '#f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_147)(let-values(((s_148)(syntax-scope-set stx_147 '0)))(generalize-scope(set-first s_148)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_149)"
"(hash-copy"
"(let-values(((ht_150)(syntax-e$1 v_149)))"
"(begin"
"(if((lambda(ht_151)(hash? ht_151)) ht_150)(void)(let-values()(default-in-hash ht_150)))"
"((letrec-values(((for-loop_152)"
"(lambda(table_153 i_154)"
"(if i_154"
"(let-values(((phase_155 ht-s_156)(hash-iterate-key+value ht_150 i_154)))"
"(if '#t"
"(let-values(((table_157)"
"(let-values(((table_158) table_153))"
"(let-values(((table_159)"
"(let-values()"
"(let-values(((key_160 val_161)"
"(let-values()"
"(values"
" phase_155"
"(hash-copy"
"(let-values(((ht_162)"
"(syntax-e$1"
" ht-s_156)))"
"(begin"
"(if((lambda(ht_163)"
"(hash? ht_163))"
" ht_162)"
"(void)"
"(let-values()"
"(default-in-hash ht_162)))"
"((letrec-values(((for-loop_164)"
"(lambda(table_165"
" i_166)"
"(if i_166"
"(let-values(((sym_167"
" id_168)"
"(hash-iterate-key+value"
" ht_162"
" i_166)))"
"(if '#t"
"(let-values(((table_169)"
"(let-values(((table_170)"
" table_165))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((key_172"
" val_173)"
"(let-values()"
"(values"
" sym_167"
" id_168))))"
"(hash-set"
" table_170"
" key_172"
" val_173)))))"
"(values"
" table_171)))))"
"(if '#t"
"(for-loop_164"
" table_169"
"(hash-iterate-next"
" ht_162"
" i_166))"
" table_169))"
" table_165))"
" table_165))))"
" for-loop_164)"
" '#hash()"
"(hash-iterate-first"
" ht_162)))))))))"
"(hash-set table_158 key_160 val_161)))))"
"(values table_159)))))"
"(if '#t(for-loop_152 table_157(hash-iterate-next ht_150 i_154)) table_157))"
" table_153))"
" table_153))))"
" for-loop_152)"
" '#hasheqv()"
"(hash-iterate-first ht_150)))))))"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table '#f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? '#f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet '#f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet '#f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables '#f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables '#f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? '#f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance '#f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name '#f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data '#f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names '#f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value '#f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! '#f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! '#f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? '#f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory '#f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash '#f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? '#f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle '#f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash '#f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? '#f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance '#f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? '#f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
" (let-values () (error '\"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))\n"
" print-values)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'module-registry"
" '#f"
" '2"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1)"
" '#f"
" 'module-registry)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'declarations)"
"(make-struct-field-accessor -ref_4 '1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box '#f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_27 proc_28)"
"(let-values(((lock-box_29)(module-registry-lock-box r_27)))"
"((letrec-values(((loop_30)"
"(lambda()"
"(let-values(((v_31)(unbox lock-box_29)))"
"(if(not v_31)"
"(let-values()"
"(let-values(((lock_32)(cons(make-semaphore)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_29 v_31 lock_32)"
"(let-values()(begin(proc_28) void))"
"(let-values() loop_30)))"
"(lambda()(semaphore-post(car lock_32)))))))"
"(if(eq?(current-thread)(cdr v_31))"
"(let-values()(proc_28))"
"(let-values()(begin(sync(car v_31)(cdr v_31))(loop_30)))))))))"
" loop_30)))))"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" namespace-module-registry$1"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-cross-phase-persistent-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'namespace"
" '#f"
" '14"
" '0"
" '#f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_87 port_88 mode_89)"
" (let-values ((() (begin (write-string '\"#<namespace\" port_88) (values))))"
"(let-values(((n_90)(namespace-mpi ns_87)))"
"(let-values((()"
"(begin"
"(if(top-level-module-path-index? n_90)"
"(void)"
" (let-values () (fprintf port_88 '\":~a\" (1/module-path-index-resolve n_90))))"
"(values))))"
"(let-values(((phase_91)(namespace-phase ns_87)))"
"(begin"
" (if (zero-phase? phase_91) (void) (let-values () (fprintf port_88 '\":~s\" phase_91)))"
" (write-string '\">\" port_88)))))))))"
"(current-inspector)"
" '#f"
" '(0 1 2 3 4 5 6 7 8 9 10 12 13)"
" '#f"
" 'namespace)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'mpi)"
"(make-struct-field-accessor -ref_4 '1 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 '2 'phase)"
"(make-struct-field-accessor -ref_4 '3 '0-phase)"
"(make-struct-field-accessor -ref_4 '4 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 '5 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 '6 'module-registry)"
"(make-struct-field-accessor -ref_4 '7 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 '8 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 '9 'cross-phase-persistent-namespace)"
"(make-struct-field-accessor -ref_4 '10 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 '11 'inspector)"
"(make-struct-field-accessor -ref_4 '12 'available-module-instances)"
"(make-struct-field-accessor -ref_4 '13 'module-instances)"
"(make-struct-field-mutator -set!_5 '11 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_92 make-_93 ?_94 -ref_95 -set!_96)"
"(make-struct-type 'definitions '#f '2 '0 '#f null(current-inspector) '#f '(0 1) '#f 'definitions)))"
"(values"
" struct:_92"
" make-_93"
" ?_94"
"(make-struct-field-accessor -ref_95 '0 'variables)"
"(make-struct-field-accessor -ref_95 '1 'transformers))))"
"(define-values"
"(make-namespace)"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 '#f '#f '#f '#f '#f '#f)"
"(new-namespace11.1)))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_118"
" register?6_119"
" root-expand-ctx3_120"
" root-expand-ctx5_121"
" share-from-ns7_122"
" share-from-ns8_123)"
"(let-values(((share-from-ns_124)(if share-from-ns8_123 share-from-ns7_122 '#f)))"
"(let-values(((root-expand-ctx_125)"
"(if root-expand-ctx5_121"
" root-expand-ctx3_120"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 '#f '#f '#f '#f '#f '#f '#f '#f)"
"(make-root-expand-context12.1))))))"
"(let-values(((register?_126)(if register?6_119 register?4_118 '#t)))"
"(let-values()"
"(let-values(((phase_127)(if share-from-ns_124(namespace-phase share-from-ns_124) '0)))"
"(let-values(((ns_128)"
"(namespace1.1"
" top-level-module-path-index"
"(box root-expand-ctx_125)"
" phase_127"
" phase_127"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_124"
"(namespace-module-registry$1 share-from-ns_124)"
"(make-module-registry))"
"(if share-from-ns_124"
"(namespace-bulk-binding-registry share-from-ns_124)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_124"
"(let-values(((or-part_129)"
"(namespace-cross-phase-persistent-namespace share-from-ns_124)))"
"(if or-part_129 or-part_129 share-from-ns_124))"
" '#f)"
" '#f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_124"
"(namespace-available-module-instances share-from-ns_124)"
"(make-hasheqv))"
"(if share-from-ns_124(namespace-module-instances share-from-ns_124)(make-hash)))))"
"(begin"
"(if register?_126"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_128) phase_127 ns_128))"
"(void))"
" ns_128)))))))))"
"(define-values"
"(unpack10.1$1)"
"(lambda(given-kws_130 given-args_131 share-from-ns7_132 share-from-ns8_133)"
"(let-values(((register?6_134)(if(pair? given-kws_130)(eq? '#:register?(car given-kws_130)) '#f)))"
"(let-values(((register?4_135)(if register?6_134(car given-args_131)(void)))"
"((given-kws_136)(if register?6_134(cdr given-kws_130) given-kws_130))"
"((given-args_137)(if register?6_134(cdr given-args_131) given-args_131)))"
"(let-values(((root-expand-ctx5_138)(pair? given-kws_136)))"
"(let-values(((root-expand-ctx3_139)(if root-expand-ctx5_138(car given-args_137)(void))))"
"(new-namespace9.1"
" register?4_135"
" register?6_134"
" root-expand-ctx3_139"
" root-expand-ctx5_138"
" share-from-ns7_132"
" share-from-ns8_133)))))))"
"(define-values"
"(new-namespace11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_140 given-argc_141)"
"(if(if(>= given-argc_141 '2)(<= given-argc_141 '3) '#f)"
"(let-values(((l1_142) given-kws_140))"
"(let-values(((l1_143)(if(null? l1_142) l1_142(if(eq?(car l1_142) '#:register?)(cdr l1_142) l1_142))))"
"(let-values(((l1_144) l1_143))"
"(let-values(((l1_145)"
"(if(null? l1_144) l1_144(if(eq?(car l1_144) '#:root-expand-ctx)(cdr l1_144) l1_144))))"
"(null? l1_145)))))"
" '#f))"
"(case-lambda"
"((given-kws_146 given-args_147)(unpack10.1$1 given-kws_146 given-args_147 '#f '#f))"
"((given-kws_148 given-args_149 share-from-ns7_150)"
"(unpack10.1$1 given-kws_148 given-args_149 share-from-ns7_150 '#t)))"
" null"
" '(#:register? #:root-expand-ctx)"
"(let-values(((new-namespace_151)"
"(case-lambda"
"(()(unpack10.1$1 null null '#f '#f))"
"((share-from-ns7_152)(unpack10.1$1 null null share-from-ns7_152 '#t)))))"
" new-namespace_151)))"
"(define-values(1/current-namespace)(make-parameter(make-namespace)))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_153)(force(unbox(namespace-root-expand-ctx ns_153)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_154 root-ctx_155)(set-box!(namespace-root-expand-ctx ns_154) root-ctx_155)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_156 name_157)"
"(let-values(((or-part_158)(hash-ref(namespace-submodule-declarations ns_156) name_157 '#f)))"
"(if or-part_158"
" or-part_158"
"(hash-ref(module-registry-declarations(namespace-module-registry$1 ns_156)) name_157 '#f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_159 phase_160)"
"(let-values(((or-part_161)(hash-ref(namespace-phase-to-namespace ns_159) phase_160 '#f)))"
"(if or-part_161"
" or-part_161"
"(let-values(((p-ns_162)"
"(let-values(((the-struct_163) ns_159))"
"(if(1/namespace? the-struct_163)"
"(let-values(((phase14_164) phase_160))"
"(namespace1.1"
"(namespace-mpi the-struct_163)"
"(namespace-root-expand-ctx the-struct_163)"
" phase14_164"
"(namespace-0-phase the-struct_163)"
"(namespace-phase-to-namespace the-struct_163)"
"(namespace-phase-level-to-definitions the-struct_163)"
"(namespace-module-registry$1 the-struct_163)"
"(namespace-bulk-binding-registry the-struct_163)"
"(namespace-submodule-declarations the-struct_163)"
"(namespace-cross-phase-persistent-namespace the-struct_163)"
"(namespace-declaration-inspector the-struct_163)"
"(namespace-inspector the-struct_163)"
"(namespace-available-module-instances the-struct_163)"
"(namespace-module-instances the-struct_163)))"
" (raise-argument-error 'struct-copy '\"namespace?\" the-struct_163)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_159) phase_160 p-ns_162) p-ns_162))))))"
"(define-values"
"(namespace->name)"
" (lambda (p-ns_165) (format '\"~a\" (1/module-path-index-resolve (namespace-mpi p-ns_165)))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_166 phase-level_167)"
"(let-values(((d_168)(hash-ref(namespace-phase-level-to-definitions ns_166) phase-level_167 '#f)))"
"(let-values(((or-part_169) d_168))"
"(if or-part_169"
" or-part_169"
"(let-values()"
"(let-values(((p-ns_170)"
"(namespace->namespace-at-phase ns_166(phase+(namespace-0-phase ns_166) phase-level_167))))"
"(let-values(((d_171)"
"(definitions2.1(1/make-instance(namespace->name p-ns_170) p-ns_170)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_166) phase-level_167 d_171) d_171)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(lambda(ns_172 phase-level_173 name_174 val_175)"
"(let-values(((d_176)(namespace->definitions ns_172 phase-level_173)))"
"(1/instance-set-variable-value!(definitions-variables d_176) name_174 val_175))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_177 phase-level_178 name_179)"
"(let-values(((d_180)(namespace->definitions ns_177 phase-level_178)))"
"(1/instance-unset-variable!(definitions-variables d_180) name_179))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_181 phase-level_182 name_183 val_184)"
"(let-values(((d_185)(namespace->definitions ns_181(add1 phase-level_182))))"
"(hash-set!(definitions-transformers d_185) name_183 val_184))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_186 phase-level_187 name_188 fail-k_189)"
"(let-values(((d_190)(namespace->definitions ns_186 phase-level_187)))"
"(1/instance-variable-value(definitions-variables d_190) name_188 fail-k_189))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_191 phase-level_192 name_193 fail-k_194)"
"(let-values(((d_195)(namespace->definitions ns_191(add1 phase-level_192))))"
"(hash-ref(definitions-transformers d_195) name_193 fail-k_194))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_196 phase-shift_197)(definitions-variables(namespace->definitions ns_196 phase-shift_197))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_198 b-ns_199)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_198)(namespace-0-phase a-ns_198) 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_199)(namespace-0-phase b-ns_199) 'no-b))))"
"(define-values(original-property-sym)(gensym 'original))"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 '#f))))"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values(((new-stx_6) new-stx3_2))"
"(let-values(((old-stx_7) old-stx4_3))"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) '#f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()(if id_8(syntax-property$1 new-stx_6 'origin(list id_8)) new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values(((the-struct_14) new-stx_6))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-bulk-binding-registry the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values(((the-struct_16) new-stx_6))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props8_17) old-props_10))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-bulk-binding-registry the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values(((ht_20) old-props-with-origin_18))"
"(begin"
"(if((lambda(ht_21)(hash? ht_21)) ht_20)"
"(void)"
"(let-values()(default-in-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(hash-iterate-key+value"
" ht_20"
" i_24)))"
"(if '#t"
"(let-values(((new-props_27)"
"(let-values(((new-props_28)"
" new-props_23))"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(if '#t"
"(for-loop_22"
" new-props_27"
"(hash-iterate-next"
" ht_20"
" i_24))"
" new-props_27))"
" new-props_23))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values(((ht_31) new-props_11))"
"(begin"
"(if((lambda(ht_32)(hash? ht_32)) ht_31)"
"(void)"
"(let-values()(default-in-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(hash-iterate-key+value"
" ht_31"
" i_35)))"
"(if '#t"
"(let-values(((old-props_38)"
"(let-values(((old-props_39)"
" old-props_34))"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(if '#t"
"(for-loop_33"
" old-props_38"
"(hash-iterate-next"
" ht_31"
" i_35))"
" old-props_38))"
" old-props_34))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(hash-iterate-first ht_31))))))))"
"(let-values(((the-struct_42) new-stx_6))"
"(if(syntax?$1 the-struct_42)"
"(let-values(((props9_43) updated-props_19))"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-bulk-binding-registry the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
" '\"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 '#f '#f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 '#t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values(lifted/1.1$24)(void))"
"(define-values(lifted/2.1$10)(void))"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" '1"
" '0"
" '#f"
"(list(cons prop:exn:srclocs(lambda(e_24)(1/exn:fail:syntax-exprs e_24))))"
" '#f"
" '#f"
" '(0)"
"(lambda(str_25 cm_26 exprs_27 info_28)"
"(begin"
"(if(if(list? exprs_27)(andmap2 syntax?$1 exprs_27) '#f)"
"(void)"
" (let-values () (raise-argument-error 'exn:fail:syntax '\"(listof syntax?)\" exprs_27)))"
"(values str_25 cm_26 exprs_27)))"
" 'exn:fail:syntax)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 '0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_29 make-_30 ?_31 -ref_32 -set!_33)"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" '0"
" '0"
" '#f"
" null"
" '#f"
" '#f"
" '()"
" '#f"
" 'exn:fail:syntax:unbound)))"
"(values struct:_29 make-_30 ?_31)))"
"(define-values"
"(1/raise-syntax-error)"
"(let-values(((raise-syntax-error11_45)"
"(lambda(given-name9_46"
" message10_47"
" expr1_48"
" sub-expr2_49"
" extra-sources3_50"
" message-suffix4_51"
" expr5_52"
" sub-expr6_53"
" extra-sources7_54"
" message-suffix8_55)"
"(let-values(((given-name_56) given-name9_46))"
"(let-values(((message_57) message10_47))"
"(let-values(((expr_58)(if expr5_52 expr1_48 '#f)))"
"(let-values(((sub-expr_59)(if sub-expr6_53 sub-expr2_49 '#f)))"
"(let-values(((extra-sources_60)(if extra-sources7_54 extra-sources3_50 null)))"
" (let-values (((message-suffix_61) (if message-suffix8_55 message-suffix4_51 '\"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax"
" given-name_56"
" message_57"
" expr_58"
" sub-expr_59"
" extra-sources_60"
" message-suffix_61)))))))))))"
"(case-lambda"
"((given-name_62 message_63)(raise-syntax-error11_45 given-name_62 message_63 '#f '#f '#f '#f '#f '#f '#f '#f))"
"((given-name_64 message_65 expr_66 sub-expr_67 extra-sources_68 message-suffix4_69)"
"(raise-syntax-error11_45"
" given-name_64"
" message_65"
" expr_66"
" sub-expr_67"
" extra-sources_68"
" message-suffix4_69"
" '#t"
" '#t"
" '#t"
" '#t))"
"((given-name_70 message_71 expr_72 sub-expr_73 extra-sources3_74)"
"(raise-syntax-error11_45 given-name_70 message_71 expr_72 sub-expr_73 extra-sources3_74 '#f '#t '#t '#t '#f))"
"((given-name_75 message_76 expr_77 sub-expr2_78)"
"(raise-syntax-error11_45 given-name_75 message_76 expr_77 sub-expr2_78 '#f '#f '#t '#t '#f '#f))"
"((given-name_79 message_80 expr1_81)"
"(raise-syntax-error11_45 given-name_79 message_80 expr1_81 '#f '#f '#f '#t '#f '#f '#f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_82)"
"(lambda(given-name21_83"
" message22_84"
" expr13_85"
" sub-expr14_86"
" extra-sources15_87"
" message-suffix16_88"
" expr17_89"
" sub-expr18_90"
" extra-sources19_91"
" message-suffix20_92)"
"(let-values(((given-name_93) given-name21_83))"
"(let-values(((message_94) message22_84))"
"(let-values(((expr_95)(if expr17_89 expr13_85 '#f)))"
"(let-values(((sub-expr_96)(if sub-expr18_90 sub-expr14_86 '#f)))"
"(let-values(((extra-sources_97)(if extra-sources19_91 extra-sources15_87 null)))"
" (let-values (((message-suffix_98) (if message-suffix20_92 message-suffix16_88 '\"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound"
" given-name_93"
" message_94"
" expr_95"
" sub-expr_96"
" extra-sources_97"
" message-suffix_98)))))))))))"
"(case-lambda"
"((given-name_99 message_100)"
"(raise-unbound-syntax-error23_82 given-name_99 message_100 '#f '#f '#f '#f '#f '#f '#f '#f))"
"((given-name_101 message_102 expr_103 sub-expr_104 extra-sources_105 message-suffix16_106)"
"(raise-unbound-syntax-error23_82"
" given-name_101"
" message_102"
" expr_103"
" sub-expr_104"
" extra-sources_105"
" message-suffix16_106"
" '#t"
" '#t"
" '#t"
" '#t))"
"((given-name_107 message_108 expr_109 sub-expr_110 extra-sources15_111)"
"(raise-unbound-syntax-error23_82"
" given-name_107"
" message_108"
" expr_109"
" sub-expr_110"
" extra-sources15_111"
" '#f"
" '#t"
" '#t"
" '#t"
" '#f))"
"((given-name_112 message_113 expr_114 sub-expr14_115)"
"(raise-unbound-syntax-error23_82 given-name_112 message_113 expr_114 sub-expr14_115 '#f '#f '#t '#t '#f '#f))"
"((given-name_116 message_117 expr13_118)"
"(raise-unbound-syntax-error23_82 given-name_116 message_117 expr13_118 '#f '#f '#f '#t '#f '#f '#f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_119 given-name_120 message_121 expr_122 sub-expr_123 extra-sources_124 message-suffix_125)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_130)(not given-name_120)))"
"(if or-part_130 or-part_130(symbol? given-name_120)))"
"(void)"
" (let-values () (raise-argument-error 'raise-syntax-error '\"(or/c symbol? #f)\" given-name_120)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_121)"
"(void)"
" (let-values () (raise-argument-error 'raise-syntax-error '\"string?\" message_121)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_124)(andmap2 syntax?$1 extra-sources_124) '#f)"
"(void)"
"(let-values()"
" (raise-argument-error 'raise-syntax-error '\"(listof syntax?)\" extra-sources_124)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_125)"
"(void)"
" (let-values () (raise-argument-error 'raise-syntax-error '\"string?\" message-suffix_125)))"
"(values))))"
"(let-values(((name_126)"
"(format"
" '\"~a\""
"(let-values(((or-part_131) given-name_120))"
"(if or-part_131"
" or-part_131"
"(let-values(((or-part_132)(extract-form-name expr_122)))"
"(if or-part_132 or-part_132 '?)))))))"
"(let-values(((at-message_127)"
"(let-values(((or-part_133)"
"(if sub-expr_123"
"(if(error-print-source-location)"
"(format"
" '\"\\n at: ~.s\""
"(syntax->datum$1(datum->syntax$2 '#f sub-expr_123)))"
" '#f)"
" '#f)))"
" (if or-part_133 or-part_133 '\"\"))))"
"(let-values(((in-message_128)"
"(let-values(((or-part_134)"
"(if expr_122"
"(if(error-print-source-location)"
" (format '\"\\n in: ~.s\" (syntax->datum$1 (datum->syntax$2 '#f expr_122)))"
" '#f)"
" '#f)))"
" (if or-part_134 or-part_134 '\"\"))))"
"(let-values(((src-loc-str_129)"
"(let-values(((or-part_135)(extract-source-location sub-expr_123)))"
"(if or-part_135"
" or-part_135"
"(let-values(((or-part_136)(extract-source-location expr_122)))"
" (if or-part_136 or-part_136 '\"\"))))))"
"(raise"
"(exn:fail:syntax_119"
"(string-append"
" src-loc-str_129"
" name_126"
" '\": \""
" message_121"
" at-message_127"
" in-message_128"
" message-suffix_125)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_137) sub-expr_123))(if or-part_137 or-part_137 expr_122))"
"(cons"
"(datum->syntax$2"
" '#f"
"(let-values(((or-part_138) sub-expr_123))(if or-part_138 or-part_138 expr_122)))"
" extra-sources_124)"
" extra-sources_124))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_139)"
"(if(syntax?$1 s_139)"
"(let-values()"
"(let-values(((e_140)(syntax-e$1 s_139)))"
"(if(symbol? e_140)"
"(let-values() e_140)"
"(if(if(pair? e_140)(identifier?(car e_140)) '#f)"
"(let-values()(syntax-e$1(car e_140)))"
"(let-values() '#f)))))"
"(let-values() '#f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_141)"
"(if(syntax?$1 s_141)"
"(if(syntax-srcloc s_141)"
" (let-values (((str_142) (srcloc->string (syntax-srcloc s_141)))) (if str_142 (string-append str_142 '\": \") '#f))"
" '#f)"
" '#f)))"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'module-use '#f '2 '0 '#f null '#f '#f '(0 1) '#f 'module-use)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'module)"
"(make-struct-field-accessor -ref_4 '1 'phase))))"
"(define-values(lifted/1.1$22)(void))"
"(define-values(lifted/2.1$2)(void))"
"(define-values(lifted/3.1$1)(void))"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" set-module-access!)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type"
" 'module"
" '#f"
" '15"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 4 5 6 7 8 9 10 11 12 13 14)"
" '#f"
" 'module)))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 '0 'self)"
"(make-struct-field-accessor -ref_8 '1 'requires)"
"(make-struct-field-accessor -ref_8 '2 'provides)"
"(make-struct-field-accessor -ref_8 '3 'access)"
"(make-struct-field-accessor -ref_8 '4 'language-info)"
"(make-struct-field-accessor -ref_8 '5 'min-phase-level)"
"(make-struct-field-accessor -ref_8 '6 'max-phase-level)"
"(make-struct-field-accessor -ref_8 '7 'prepare-instance)"
"(make-struct-field-accessor -ref_8 '8 'instantiate-phase)"
"(make-struct-field-accessor -ref_8 '9 'primitive?)"
"(make-struct-field-accessor -ref_8 '10 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_8 '11 'no-protected?)"
"(make-struct-field-accessor -ref_8 '12 'inspector)"
"(make-struct-field-accessor -ref_8 '13 'submodule-names)"
"(make-struct-field-accessor -ref_8 '14 'supermodule-name)"
"(make-struct-field-mutator -set!_9 '3 'access))))"
"(define-values"
"(lifted/1.1$4)"
"(make-required 'make-module(case-lambda((self_96)(apply missing-kw self_96 null))) '#f '#f))"
"(define-values"
"(make-module28.1)"
"(lambda(cross-phase-persistent?11_97"
" cross-phase-persistent?24_98"
" instantiate-phase-callback7_99"
" language-info9_100"
" language-info22_101"
" max-phase-level6_102"
" max-phase-level19_103"
" min-phase-level5_104"
" min-phase-level18_105"
" no-protected?12_106"
" no-protected?25_107"
" prepare-instance-callback8_108"
" prepare-instance-callback21_109"
" primitive?10_110"
" primitive?23_111"
" provides4_112"
" requires3_113"
" requires16_114"
" self2_115"
" submodule-names13_116"
" submodule-names26_117"
" supermodule-name14_118"
" supermodule-name27_119)"
"(let-values(((self_120) self2_115))"
"(let-values(((requires_121)(if requires16_114 requires3_113 null)))"
"(let-values(((provides_122) provides4_112))"
"(let-values(((min-phase-level_123)(if min-phase-level18_105 min-phase-level5_104 '0)))"
"(let-values(((max-phase-level_124)(if max-phase-level19_103 max-phase-level6_102 '0)))"
"(let-values(((instantiate-phase_125) instantiate-phase-callback7_99))"
"(let-values(((prepare-instance_126)"
"(if prepare-instance-callback21_109 prepare-instance-callback8_108 void)))"
"(let-values(((language-info_127)(if language-info22_101 language-info9_100 '#f)))"
"(let-values(((primitive?_128)(if primitive?23_111 primitive?10_110 '#f)))"
"(let-values(((cross-phase-persistent?_129)"
"(if cross-phase-persistent?24_98 cross-phase-persistent?11_97 primitive?_128)))"
"(let-values(((no-protected?_130)(if no-protected?25_107 no-protected?12_106 '#f)))"
"(let-values(((submodule-names_131)(if submodule-names26_117 submodule-names13_116 null)))"
"(let-values(((supermodule-name_132)"
"(if supermodule-name27_119 supermodule-name14_118 '#f)))"
"(let-values()"
"(module1.1"
" self_120"
" requires_121"
" provides_122"
" '#f"
" language-info_127"
" min-phase-level_123"
" max-phase-level_124"
" prepare-instance_126"
" instantiate-phase_125"
" primitive?_128"
" cross-phase-persistent?_129"
" no-protected?_130"
"(current-code-inspector)"
" submodule-names_131"
" supermodule-name_132)))))))))))))))))"
"(define-values"
"(unpack29.1$1)"
"(lambda(given-kws_133 given-args_134)"
"(let-values(((cross-phase-persistent?24_135)"
"(if(pair? given-kws_133)(eq? '#:cross-phase-persistent?(car given-kws_133)) '#f)))"
"(let-values(((cross-phase-persistent?11_136)(if cross-phase-persistent?24_135(car given-args_134)(void)))"
"((given-kws_137)(if cross-phase-persistent?24_135(cdr given-kws_133) given-kws_133))"
"((given-args_138)(if cross-phase-persistent?24_135(cdr given-args_134) given-args_134)))"
"(let-values(((instantiate-phase-callback7_139)(car given-args_138))"
"((given-kws_140)(cdr given-kws_137))"
"((given-args_141)(cdr given-args_138)))"
"(let-values(((language-info22_142)"
"(if(pair? given-kws_140)(eq? '#:language-info(car given-kws_140)) '#f)))"
"(let-values(((language-info9_143)(if language-info22_142(car given-args_141)(void)))"
"((given-kws_144)(if language-info22_142(cdr given-kws_140) given-kws_140))"
"((given-args_145)(if language-info22_142(cdr given-args_141) given-args_141)))"
"(let-values(((max-phase-level19_146)"
"(if(pair? given-kws_144)(eq? '#:max-phase-level(car given-kws_144)) '#f)))"
"(let-values(((max-phase-level6_147)(if max-phase-level19_146(car given-args_145)(void)))"
"((given-kws_148)(if max-phase-level19_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if max-phase-level19_146(cdr given-args_145) given-args_145)))"
"(let-values(((min-phase-level18_150)"
"(if(pair? given-kws_148)(eq? '#:min-phase-level(car given-kws_148)) '#f)))"
"(let-values(((min-phase-level5_151)(if min-phase-level18_150(car given-args_149)(void)))"
"((given-kws_152)(if min-phase-level18_150(cdr given-kws_148) given-kws_148))"
"((given-args_153)(if min-phase-level18_150(cdr given-args_149) given-args_149)))"
"(let-values(((no-protected?25_154)"
"(if(pair? given-kws_152)(eq? '#:no-protected?(car given-kws_152)) '#f)))"
"(let-values(((no-protected?12_155)(if no-protected?25_154(car given-args_153)(void)))"
"((given-kws_156)(if no-protected?25_154(cdr given-kws_152) given-kws_152))"
"((given-args_157)(if no-protected?25_154(cdr given-args_153) given-args_153)))"
"(let-values(((prepare-instance-callback21_158)"
"(if(pair? given-kws_156)"
"(eq? '#:prepare-instance-callback(car given-kws_156))"
" '#f)))"
"(let-values(((prepare-instance-callback8_159)"
"(if prepare-instance-callback21_158(car given-args_157)(void)))"
"((given-kws_160)"
"(if prepare-instance-callback21_158(cdr given-kws_156) given-kws_156))"
"((given-args_161)"
"(if prepare-instance-callback21_158(cdr given-args_157) given-args_157)))"
"(let-values(((primitive?23_162)"
"(if(pair? given-kws_160)(eq? '#:primitive?(car given-kws_160)) '#f)))"
"(let-values(((primitive?10_163)(if primitive?23_162(car given-args_161)(void)))"
"((given-kws_164)(if primitive?23_162(cdr given-kws_160) given-kws_160))"
"((given-args_165)"
"(if primitive?23_162(cdr given-args_161) given-args_161)))"
"(let-values(((provides4_166)(car given-args_165))"
"((given-kws_167)(cdr given-kws_164))"
"((given-args_168)(cdr given-args_165)))"
"(let-values(((requires16_169)"
"(if(pair? given-kws_167)(eq? '#:requires(car given-kws_167)) '#f)))"
"(let-values(((requires3_170)(if requires16_169(car given-args_168)(void)))"
"((given-kws_171)"
"(if requires16_169(cdr given-kws_167) given-kws_167))"
"((given-args_172)"
"(if requires16_169(cdr given-args_168) given-args_168)))"
"(let-values(((self2_173)(car given-args_172))"
"((given-kws_174)(cdr given-kws_171))"
"((given-args_175)(cdr given-args_172)))"
"(let-values(((submodule-names26_176)"
"(if(pair? given-kws_174)"
"(eq? '#:submodule-names(car given-kws_174))"
" '#f)))"
"(let-values(((submodule-names13_177)"
"(if submodule-names26_176(car given-args_175)(void)))"
"((given-kws_178)"
"(if submodule-names26_176(cdr given-kws_174) given-kws_174))"
"((given-args_179)"
"(if submodule-names26_176"
"(cdr given-args_175)"
" given-args_175)))"
"(let-values(((supermodule-name27_180)(pair? given-kws_178)))"
"(let-values(((supermodule-name14_181)"
"(if supermodule-name27_180(car given-args_179)(void))))"
"(make-module28.1"
" cross-phase-persistent?11_136"
" cross-phase-persistent?24_135"
" instantiate-phase-callback7_139"
" language-info9_143"
" language-info22_142"
" max-phase-level6_147"
" max-phase-level19_146"
" min-phase-level5_151"
" min-phase-level18_150"
" no-protected?12_155"
" no-protected?25_154"
" prepare-instance-callback8_159"
" prepare-instance-callback21_158"
" primitive?10_163"
" primitive?23_162"
" provides4_166"
" requires3_170"
" requires16_169"
" self2_173"
" submodule-names13_177"
" submodule-names26_176"
" supermodule-name14_181"
" supermodule-name27_180))))))))))))))))))))))))))"
"(define-values"
"(make-module30.1)"
"(lifted/1.1$4"
"(lambda(given-kws_182 given-argc_183)"
"(if(= given-argc_183 '2)"
"(subsets?"
" '(#:instantiate-phase-callback #:provides #:self)"
" given-kws_182"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:submodule-names"
" #:supermodule-name))"
" '#f))"
"(case-lambda((given-kws_184 given-args_185)(unpack29.1$1 given-kws_184 given-args_185)))"
" '(#:instantiate-phase-callback #:provides #:self)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:submodule-names"
" #:supermodule-name)))"
"(define-values"
"(struct:module-instance"
" module-instance31.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!)"
"(let-values(((struct:_186 make-_187 ?_188 -ref_189 -set!_190)"
"(make-struct-type"
" 'module-instance"
" '#f"
" '6"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 3 5)"
" '#f"
" 'module-instance)))"
"(values"
" struct:_186"
" make-_187"
" ?_188"
"(make-struct-field-accessor -ref_189 '0 'namespace)"
"(make-struct-field-accessor -ref_189 '1 'module)"
"(make-struct-field-accessor -ref_189 '2 'shifted-requires)"
"(make-struct-field-accessor -ref_189 '3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_189 '4 'made-available?)"
"(make-struct-field-accessor -ref_189 '5 'data-box)"
"(make-struct-field-mutator -set!_190 '2 'shifted-requires)"
"(make-struct-field-mutator -set!_190 '4 'made-available?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_232 m_233)(module-instance31.1 m-ns_232 m_233 '#f(make-hasheqv) '#f(box '#f))))"
"(define-values"
"(lifted/2.1$3)"
"(make-required"
" 'make-module-namespace"
"(case-lambda((self_234 ns_235)(apply missing-kw self_234 ns_235 null)))"
" '#f"
" '#f))"
"(define-values"
"(make-module-namespace39.1)"
"(lambda(for-submodule?34_236 mpi32_237 root-expand-context33_238 ns38_239)"
"(let-values(((ns_240) ns38_239))"
"(let-values(((name-mpi_241) mpi32_237))"
"(let-values(((root-expand-ctx_242) root-expand-context33_238))"
"(let-values(((for-submodule?_243) for-submodule?34_236))"
"(let-values()"
"(let-values(((phase_244) '0))"
"(let-values(((name_245)(1/module-path-index-resolve name-mpi_241)))"
"(let-values(((m-ns_246)"
"(let-values(((the-struct_247)"
"(let-values(((...namespace/module.rkt:120:27_248) new-namespace11.1)"
"((ns149_249) ns_240)"
"((root-expand-ctx150_250) root-expand-ctx_242)"
"((temp151_251) '#f))"
"(if(variable-reference-constant?"
"(#%variable-reference new-namespace11.1))"
"(new-namespace9.1"
" temp151_251"
" '#t"
" root-expand-ctx150_250"
" '#t"
" ns149_249"
" '#t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:120:27_248"
" keyword-procedure-extract"
" '(#:register? #:root-expand-ctx)"
" '3)"
" '(#:register? #:root-expand-ctx)"
"(list temp151_251 root-expand-ctx150_250)"
" ns149_249)))))"
"(if(1/namespace? the-struct_247)"
"(let-values(((mpi142_252) name-mpi_241)"
"((phase143_253) phase_244)"
"((0-phase144_254) phase_244)"
"((submodule-declarations145_255)"
"(if for-submodule?_243"
"(namespace-submodule-declarations ns_240)"
"(make-hash)))"
"((available-module-instances146_256)(make-hash))"
"((module-instances147_257)(make-hash))"
"((declaration-inspector148_258)(current-code-inspector)))"
"(namespace1.1"
" mpi142_252"
"(namespace-root-expand-ctx the-struct_247)"
" phase143_253"
" 0-phase144_254"
"(namespace-phase-to-namespace the-struct_247)"
"(namespace-phase-level-to-definitions the-struct_247)"
"(namespace-module-registry$1 the-struct_247)"
"(namespace-bulk-binding-registry the-struct_247)"
" submodule-declarations145_255"
"(namespace-cross-phase-persistent-namespace the-struct_247)"
" declaration-inspector148_258"
"(namespace-inspector the-struct_247)"
" available-module-instances146_256"
" module-instances147_257))"
" (raise-argument-error 'struct-copy '\"namespace?\" the-struct_247)))))"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_246) phase_244 m-ns_246)"
"(hash-set!"
"(namespace-module-instances m-ns_246)"
"(cons name_245 phase_244)"
"(make-module-instance m-ns_246 '#f))"
" m-ns_246)))))))))))"
"(define-values"
"(unpack40.1$1)"
"(lambda(given-kws_259 given-args_260 ns38_261)"
"(let-values(((for-submodule?34_262)(car given-args_260))"
"((given-kws_263)(cdr given-kws_259))"
"((given-args_264)(cdr given-args_260)))"
"(let-values(((mpi32_265)(car given-args_264))"
"((given-kws_266)(cdr given-kws_263))"
"((given-args_267)(cdr given-args_264)))"
"(let-values(((root-expand-context33_268)(car given-args_267)))"
"(make-module-namespace39.1 for-submodule?34_262 mpi32_265 root-expand-context33_268 ns38_261))))))"
"(define-values"
"(make-module-namespace41.1)"
"(lifted/2.1$3"
"(lambda(given-kws_269 given-argc_270)"
"(if(= given-argc_270 '3)"
"(let-values(((l2_271) given-kws_269))"
"(if(pair? l2_271)"
"(if(eq?(car l2_271) '#:for-submodule?)"
"(let-values(((l2_272)(cdr l2_271)))"
"(if(pair? l2_272)"
"(if(eq?(car l2_272) '#:mpi)"
"(let-values(((l2_273)(cdr l2_272)))"
"(if(pair? l2_273)(if(eq?(car l2_273) '#:root-expand-context)(null?(cdr l2_273)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda((given-kws_274 given-args_275 ns_276)(unpack40.1$1 given-kws_274 given-args_275 ns_276)))"
" '(#:for-submodule? #:mpi #:root-expand-context)"
" '(#:for-submodule? #:mpi #:root-expand-context)))"
"(define-values"
"(declare-module!47.1)"
"(lambda(as-submodule?42_277 as-submodule?43_278 ns44_279 m45_280 mod-name46_281)"
"(let-values(((ns_282) ns44_279))"
"(let-values(((m_283) m45_280))"
"(let-values(((mod-name_284) mod-name46_281))"
"(let-values(((as-submodule?_285)(if as-submodule?43_278 as-submodule?42_277 '#f)))"
"(let-values()"
"(begin"
"(hash-set!"
"(if as-submodule?_285"
"(namespace-submodule-declarations ns_282)"
"(module-registry-declarations(namespace-module-registry$1 ns_282)))"
" mod-name_284"
" m_283)"
"(if as-submodule?_285"
"(void)"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_282)"
" mod-name_284"
"(module-self m_283)"
"(module-provides m_283))))"
"((1/current-module-name-resolver) mod-name_284 '#f)))))))))"
"(define-values"
"(unpack48.1$1)"
"(lambda(given-kws_286 given-args_287 ns44_288 m45_289 mod-name46_290)"
"(let-values(((as-submodule?43_291)(pair? given-kws_286)))"
"(let-values(((as-submodule?42_292)(if as-submodule?43_291(car given-args_287)(void))))"
"(declare-module!47.1 as-submodule?42_292 as-submodule?43_291 ns44_288 m45_289 mod-name46_290)))))"
"(define-values"
"(declare-module!49.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 '5)"
"(let-values(((l1_295) given-kws_293))"
"(let-values(((l1_296)"
"(if(null? l1_295) l1_295(if(eq?(car l1_295) '#:as-submodule?)(cdr l1_295) l1_295))))"
"(null? l1_296)))"
" '#f))"
"(case-lambda"
"((given-kws_297 given-args_298 ns_299 m_300 mod-name_301)"
"(unpack48.1$1 given-kws_297 given-args_298 ns_299 m_300 mod-name_301)))"
" null"
" '(#:as-submodule?)"
"(let-values(((declare-module!_302)"
"(case-lambda((ns_303 m_304 mod-name_305)(unpack48.1$1 null null ns_303 m_304 mod-name_305)))))"
" declare-module!_302)))"
"(define-values"
"(raise-unknown-module-error)"
" (lambda (who_306 mod-name_307) (raise-arguments-error who_306 '\"unknown module\" '\"module name\" mod-name_307)))"
"(define-values"
"(namespace->module-instance61.1)"
"(lambda(check-available-at-phase-level52_308"
" check-available-at-phase-level56_309"
" complain-on-failure?51_310"
" complain-on-failure?55_311"
" install!-namespace50_312"
" install!-namespace54_313"
" unavailable-callback53_314"
" unavailable-callback57_315"
" ns58_316"
" name59_317"
" 0-phase60_318)"
"(let-values(((ns_319) ns58_316))"
"(let-values(((name_320) name59_317))"
"(let-values(((0-phase_321) 0-phase60_318))"
"(let-values(((install!-ns_322)(if install!-namespace54_313 install!-namespace50_312 '#f)))"
"(let-values(((complain-on-failure?_323)(if complain-on-failure?55_311 complain-on-failure?51_310 '#f)))"
"(let-values(((check-available-at-phase-level_324)"
"(if check-available-at-phase-level56_309 check-available-at-phase-level52_308 '#f)))"
"(let-values(((unavailable-callback_325)"
"(if unavailable-callback57_315 unavailable-callback53_314 void)))"
"(let-values()"
"(let-values(((mi_326)"
"(let-values(((or-part_327)"
"(hash-ref"
"(namespace-module-instances ns_319)"
"(cons name_320 0-phase_321)"
" '#f)))"
"(if or-part_327"
" or-part_327"
"(let-values(((or-part_328)"
"(let-values(((c-ns_329)"
"(let-values(((or-part_330)"
"(namespace-cross-phase-persistent-namespace"
" ns_319)))"
"(if or-part_330 or-part_330 ns_319))))"
"(hash-ref(namespace-module-instances c-ns_329) name_320 '#f))))"
"(if or-part_328"
" or-part_328"
"(if complain-on-failure?_323"
" (error '\"no module instance found:\" name_320 0-phase_321)"
" '#f)))))))"
"(begin"
"(if(if mi_326 check-available-at-phase-level_324 '#f)"
"(let-values()"
"(check-availablilty mi_326 check-available-at-phase-level_324 unavailable-callback_325))"
"(void))"
" mi_326))))))))))))"
"(define-values"
"(unpack62.1$1)"
"(lambda(given-kws_331 given-args_332 ns58_333 name59_334 0-phase60_335)"
"(let-values(((check-available-at-phase-level56_336)"
"(if(pair? given-kws_331)(eq? '#:check-available-at-phase-level(car given-kws_331)) '#f)))"
"(let-values(((check-available-at-phase-level52_337)"
"(if check-available-at-phase-level56_336(car given-args_332)(void)))"
"((given-kws_338)(if check-available-at-phase-level56_336(cdr given-kws_331) given-kws_331))"
"((given-args_339)(if check-available-at-phase-level56_336(cdr given-args_332) given-args_332)))"
"(let-values(((complain-on-failure?55_340)"
"(if(pair? given-kws_338)(eq? '#:complain-on-failure?(car given-kws_338)) '#f)))"
"(let-values(((complain-on-failure?51_341)(if complain-on-failure?55_340(car given-args_339)(void)))"
"((given-kws_342)(if complain-on-failure?55_340(cdr given-kws_338) given-kws_338))"
"((given-args_343)(if complain-on-failure?55_340(cdr given-args_339) given-args_339)))"
"(let-values(((install!-namespace54_344)"
"(if(pair? given-kws_342)(eq? '#:install!-namespace(car given-kws_342)) '#f)))"
"(let-values(((install!-namespace50_345)(if install!-namespace54_344(car given-args_343)(void)))"
"((given-kws_346)(if install!-namespace54_344(cdr given-kws_342) given-kws_342))"
"((given-args_347)(if install!-namespace54_344(cdr given-args_343) given-args_343)))"
"(let-values(((unavailable-callback57_348)(pair? given-kws_346)))"
"(let-values(((unavailable-callback53_349)"
"(if unavailable-callback57_348(car given-args_347)(void))))"
"(namespace->module-instance61.1"
" check-available-at-phase-level52_337"
" check-available-at-phase-level56_336"
" complain-on-failure?51_341"
" complain-on-failure?55_340"
" install!-namespace50_345"
" install!-namespace54_344"
" unavailable-callback53_349"
" unavailable-callback57_348"
" ns58_333"
" name59_334"
" 0-phase60_335)))))))))))"
"(define-values"
"(namespace->module-instance63.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_350 given-argc_351)"
"(if(= given-argc_351 '5)"
"(let-values(((l1_352) given-kws_350))"
"(let-values(((l1_353)"
"(if(null? l1_352)"
" l1_352"
"(if(eq?(car l1_352) '#:check-available-at-phase-level)(cdr l1_352) l1_352))))"
"(let-values(((l1_354) l1_353))"
"(let-values(((l1_355)"
"(if(null? l1_354)"
" l1_354"
"(if(eq?(car l1_354) '#:complain-on-failure?)(cdr l1_354) l1_354))))"
"(let-values(((l1_356) l1_355))"
"(let-values(((l1_357)"
"(if(null? l1_356)"
" l1_356"
"(if(eq?(car l1_356) '#:install!-namespace)(cdr l1_356) l1_356))))"
"(let-values(((l1_358) l1_357))"
"(let-values(((l1_359)"
"(if(null? l1_358)"
" l1_358"
"(if(eq?(car l1_358) '#:unavailable-callback)(cdr l1_358) l1_358))))"
"(null? l1_359)))))))))"
" '#f))"
"(case-lambda"
"((given-kws_360 given-args_361 ns_362 name_363 0-phase_364)"
"(unpack62.1$1 given-kws_360 given-args_361 ns_362 name_363 0-phase_364)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:install!-namespace #:unavailable-callback)"
"(let-values(((namespace->module-instance_365)"
"(case-lambda((ns_366 name_367 0-phase_368)(unpack62.1$1 null null ns_366 name_367 0-phase_368)))))"
" namespace->module-instance_365)))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_369 name_370 0-phase_371 m_372 existing-m-ns_373)"
"(let-values(((m-ns_374)"
"(let-values(((the-struct_376) ns_369))"
"(if(1/namespace? the-struct_376)"
"(let-values(((mpi152_377)(namespace-mpi existing-m-ns_373))"
"((root-expand-ctx153_378)(namespace-root-expand-ctx existing-m-ns_373))"
"((phase154_379)(namespace-phase existing-m-ns_373))"
"((0-phase155_380)(namespace-0-phase existing-m-ns_373))"
"((phase-to-namespace156_381)(make-hasheqv))"
"((phase-level-to-definitions157_382)"
"(if(module-cross-phase-persistent? m_372)"
"(namespace-phase-level-to-definitions existing-m-ns_373)"
"(make-hasheqv)))"
"((declaration-inspector158_383)(module-inspector m_372))"
"((inspector159_384)(namespace-inspector existing-m-ns_373)))"
"(namespace1.1"
" mpi152_377"
" root-expand-ctx153_378"
" phase154_379"
" 0-phase155_380"
" phase-to-namespace156_381"
" phase-level-to-definitions157_382"
"(namespace-module-registry$1 the-struct_376)"
"(namespace-bulk-binding-registry the-struct_376)"
"(namespace-submodule-declarations the-struct_376)"
"(namespace-cross-phase-persistent-namespace the-struct_376)"
" declaration-inspector158_383"
" inspector159_384"
"(namespace-available-module-instances the-struct_376)"
"(namespace-module-instances the-struct_376)))"
" (raise-argument-error 'struct-copy '\"namespace?\" the-struct_376)))))"
"(let-values(((mi_375)(make-module-instance m-ns_374 m_372)))"
"(if(module-cross-phase-persistent? m_372)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_374) '0 m-ns_374)"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_385)(namespace-cross-phase-persistent-namespace ns_369)))"
"(if or-part_385 or-part_385 ns_369)))"
" name_370"
" mi_375)"
"(hash-set!(module-instance-phase-level-to-state mi_375) '0 'started)))"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_374) 0-phase_371 m-ns_374)"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_374)"
" 0-phase_371"
"(namespace->definitions existing-m-ns_373 0-phase_371))"
"(hash-set!(module-instance-phase-level-to-state mi_375) '0 'started)"
"(hash-set!(namespace-module-instances ns_369)(cons name_370 0-phase_371) mi_375))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_386 name_387 0-phase_388 m_389 mpi_390)"
"(let-values(((m-ns_391)"
"(let-values(((the-struct_393) ns_386))"
"(if(1/namespace? the-struct_393)"
"(let-values(((mpi160_394) mpi_390)"
"((root-expand-ctx161_395)(box '#f))"
"((phase162_396) 0-phase_388)"
"((0-phase163_397) 0-phase_388)"
"((phase-to-namespace164_398)(make-hasheqv))"
"((phase-level-to-definitions165_399)(make-hasheqv))"
"((declaration-inspector166_400)(module-inspector m_389))"
"((inspector167_401)(make-inspector(module-inspector m_389))))"
"(namespace1.1"
" mpi160_394"
" root-expand-ctx161_395"
" phase162_396"
" 0-phase163_397"
" phase-to-namespace164_398"
" phase-level-to-definitions165_399"
"(namespace-module-registry$1 the-struct_393)"
"(namespace-bulk-binding-registry the-struct_393)"
"(namespace-submodule-declarations the-struct_393)"
"(namespace-cross-phase-persistent-namespace the-struct_393)"
" declaration-inspector166_400"
" inspector167_401"
"(namespace-available-module-instances the-struct_393)"
"(namespace-module-instances the-struct_393)))"
" (raise-argument-error 'struct-copy '\"namespace?\" the-struct_393)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_391) 0-phase_388 m-ns_391)(values))))"
"(let-values(((mi_392)(make-module-instance m-ns_391 m_389)))"
"(begin"
"(hash-set!"
"(namespace-module-instances ns_386)"
"(if(module-cross-phase-persistent? m_389) name_387(cons name_387 0-phase_388))"
" mi_392)"
" mi_392))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_402 check-available-at-phase-level_403 unavailable-callback_404)"
"(let-values(((m_405)(module-instance-module mi_402)))"
"(if(if m_405"
"(if(<="
"(module-min-phase-level m_405)"
"(add1 check-available-at-phase-level_403)"
"(module-max-phase-level m_405))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_402)(add1 check-available-at-phase-level_403) '#f))"
" '#f)"
" '#f)"
"(let-values()(unavailable-callback_404))"
"(void)))))"
"(define-values"
"(namespace->module-namespace73.1)"
"(lambda(check-available-at-phase-level65_406"
" check-available-at-phase-level68_407"
" complain-on-failure?64_408"
" complain-on-failure?67_409"
" unavailable-callback66_410"
" unavailable-callback69_411"
" ns70_412"
" name71_413"
" 0-phase72_414)"
"(let-values(((ns_415) ns70_412))"
"(let-values(((name_416) name71_413))"
"(let-values(((0-phase_417) 0-phase72_414))"
"(let-values(((complain-on-failure?_418)(if complain-on-failure?67_409 complain-on-failure?64_408 '#f)))"
"(let-values(((check-available-at-phase-level_419)"
"(if check-available-at-phase-level68_407 check-available-at-phase-level65_406 '#f)))"
"(let-values(((unavailable-callback_420)(if unavailable-callback69_411 unavailable-callback66_410 void)))"
"(let-values()"
"(let-values(((mi_421)"
"(let-values(((...namespace/module.rkt:237:13_422) namespace->module-instance63.1)"
"((ns168_423) ns_415)"
"((name169_424) name_416)"
"((0-phase170_425) 0-phase_417)"
"((complain-on-failure?171_426) complain-on-failure?_418)"
"((check-available-at-phase-level172_427)"
" check-available-at-phase-level_419)"
"((unavailable-callback173_428) unavailable-callback_420))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance63.1))"
"(namespace->module-instance61.1"
" check-available-at-phase-level172_427"
" '#t"
" complain-on-failure?171_426"
" '#t"
" '#f"
" '#f"
" unavailable-callback173_428"
" '#t"
" ns168_423"
" name169_424"
" 0-phase170_425)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:237:13_422"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
" '5)"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(list"
" check-available-at-phase-level172_427"
" complain-on-failure?171_426"
" unavailable-callback173_428)"
" ns168_423"
" name169_424"
" 0-phase170_425)))))"
"(if mi_421(module-instance-namespace mi_421) '#f)))))))))))"
"(define-values"
"(unpack74.1)"
"(lambda(given-kws_429 given-args_430 ns70_431 name71_432 0-phase72_433)"
"(let-values(((check-available-at-phase-level68_434)"
"(if(pair? given-kws_429)(eq? '#:check-available-at-phase-level(car given-kws_429)) '#f)))"
"(let-values(((check-available-at-phase-level65_435)"
"(if check-available-at-phase-level68_434(car given-args_430)(void)))"
"((given-kws_436)(if check-available-at-phase-level68_434(cdr given-kws_429) given-kws_429))"
"((given-args_437)(if check-available-at-phase-level68_434(cdr given-args_430) given-args_430)))"
"(let-values(((complain-on-failure?67_438)"
"(if(pair? given-kws_436)(eq? '#:complain-on-failure?(car given-kws_436)) '#f)))"
"(let-values(((complain-on-failure?64_439)(if complain-on-failure?67_438(car given-args_437)(void)))"
"((given-kws_440)(if complain-on-failure?67_438(cdr given-kws_436) given-kws_436))"
"((given-args_441)(if complain-on-failure?67_438(cdr given-args_437) given-args_437)))"
"(let-values(((unavailable-callback69_442)(pair? given-kws_440)))"
"(let-values(((unavailable-callback66_443)(if unavailable-callback69_442(car given-args_441)(void))))"
"(namespace->module-namespace73.1"
" check-available-at-phase-level65_435"
" check-available-at-phase-level68_434"
" complain-on-failure?64_439"
" complain-on-failure?67_438"
" unavailable-callback66_443"
" unavailable-callback69_442"
" ns70_431"
" name71_432"
" 0-phase72_433)))))))))"
"(define-values"
"(namespace->module-namespace75.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_444 given-argc_445)"
"(if(= given-argc_445 '5)"
"(let-values(((l1_446) given-kws_444))"
"(let-values(((l1_447)"
"(if(null? l1_446)"
" l1_446"
"(if(eq?(car l1_446) '#:check-available-at-phase-level)(cdr l1_446) l1_446))))"
"(let-values(((l1_448) l1_447))"
"(let-values(((l1_449)"
"(if(null? l1_448)"
" l1_448"
"(if(eq?(car l1_448) '#:complain-on-failure?)(cdr l1_448) l1_448))))"
"(let-values(((l1_450) l1_449))"
"(let-values(((l1_451)"
"(if(null? l1_450)"
" l1_450"
"(if(eq?(car l1_450) '#:unavailable-callback)(cdr l1_450) l1_450))))"
"(null? l1_451)))))))"
" '#f))"
"(case-lambda"
"((given-kws_452 given-args_453 ns_454 name_455 0-phase_456)"
"(unpack74.1 given-kws_452 given-args_453 ns_454 name_455 0-phase_456)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(let-values(((namespace->module-namespace_457)"
"(case-lambda((ns_458 name_459 0-phase_460)(unpack74.1 null null ns_458 name_459 0-phase_460)))))"
" namespace->module-namespace_457)))"
"(define-values"
"(namespace-module-instantiate!87.1)"
"(lambda(otherwise-available?78_461"
" otherwise-available?82_462"
" run-phase76_463"
" run-phase80_464"
" seen79_465"
" seen83_466"
" skip-run?77_467"
" skip-run?81_468"
" ns84_469"
" mpi85_470"
" instance-phase86_471)"
"(let-values(((ns_472) ns84_469))"
"(let-values(((mpi_473) mpi85_470))"
"(let-values(((instance-phase_474) instance-phase86_471))"
"(let-values(((run-phase_475)(if run-phase80_464 run-phase76_463(namespace-phase ns_472))))"
"(let-values(((skip-run?_476)(if skip-run?81_468 skip-run?77_467 '#f)))"
"(let-values(((otherwise-available?_477)(if otherwise-available?82_462 otherwise-available?78_461 '#t)))"
"(let-values(((seen_478)(if seen83_466 seen79_465 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_473)"
"(void)"
" (let-values () (error '\"not a module path index:\" mpi_473)))"
"(values))))"
"(let-values(((name_479)(1/module-path-index-resolve mpi_473 '#t)))"
"(let-values(((m_480)(namespace->module ns_472 name_479)))"
"(let-values((()"
"(begin"
"(if m_480"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_479)))"
"(values))))"
"(let-values(((instantiate!_481)"
"(lambda(instance-phase_482 run-phase_483 ns_484)"
"(let-values(((mi_485)"
"(let-values(((or-part_486)"
"(let-values(((ns180_487) ns_484)"
"((name181_488) name_479)"
"((instance-phase182_489)"
" instance-phase_482))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-instance63.1))"
"(namespace->module-instance61.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" ns180_487"
" name181_488"
" instance-phase182_489)"
"(namespace->module-instance63.1"
" ns180_487"
" name181_488"
" instance-phase182_489)))))"
"(if or-part_486"
" or-part_486"
"(namespace-create-module-instance!"
" ns_484"
" name_479"
" instance-phase_482"
" m_480"
" mpi_473)))))"
"(let-values(((...namespace/module.rkt:260:4_490)"
" run-module-instance!118.1)"
"((mi174_491) mi_485)"
"((ns175_492) ns_484)"
"((run-phase176_493) run-phase_483)"
"((skip-run?177_494) skip-run?_476)"
"((otherwise-available?178_495) otherwise-available?_477)"
"((seen179_496) seen_478))"
"(if(variable-reference-constant?"
"(#%variable-reference run-module-instance!118.1))"
"(run-module-instance!116.1"
" otherwise-available?178_495"
" run-phase176_493"
" seen179_496"
" '#t"
" skip-run?177_494"
" mi174_491"
" ns175_492)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:260:4_490"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
" '4)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(list"
" otherwise-available?178_495"
" run-phase176_493"
" seen179_496"
" skip-run?177_494)"
" mi174_491"
" ns175_492)))))))"
"(if(module-cross-phase-persistent? m_480)"
"(let-values()"
"(instantiate!_481"
" '0"
" '0"
"(let-values(((or-part_497)(namespace-cross-phase-persistent-namespace ns_472)))"
"(if or-part_497 or-part_497 ns_472))))"
"(let-values()"
"(instantiate!_481 instance-phase_474 run-phase_475 ns_472))))))))))))))))))"
"(define-values"
"(unpack88.1)"
"(lambda(given-kws_498 given-args_499 ns84_500 mpi85_501 instance-phase86_502)"
"(let-values(((otherwise-available?82_503)"
"(if(pair? given-kws_498)(eq? '#:otherwise-available?(car given-kws_498)) '#f)))"
"(let-values(((otherwise-available?78_504)(if otherwise-available?82_503(car given-args_499)(void)))"
"((given-kws_505)(if otherwise-available?82_503(cdr given-kws_498) given-kws_498))"
"((given-args_506)(if otherwise-available?82_503(cdr given-args_499) given-args_499)))"
"(let-values(((run-phase80_507)(if(pair? given-kws_505)(eq? '#:run-phase(car given-kws_505)) '#f)))"
"(let-values(((run-phase76_508)(if run-phase80_507(car given-args_506)(void)))"
"((given-kws_509)(if run-phase80_507(cdr given-kws_505) given-kws_505))"
"((given-args_510)(if run-phase80_507(cdr given-args_506) given-args_506)))"
"(let-values(((seen83_511)(if(pair? given-kws_509)(eq? '#:seen(car given-kws_509)) '#f)))"
"(let-values(((seen79_512)(if seen83_511(car given-args_510)(void)))"
"((given-kws_513)(if seen83_511(cdr given-kws_509) given-kws_509))"
"((given-args_514)(if seen83_511(cdr given-args_510) given-args_510)))"
"(let-values(((skip-run?81_515)(pair? given-kws_513)))"
"(let-values(((skip-run?77_516)(if skip-run?81_515(car given-args_514)(void))))"
"(namespace-module-instantiate!87.1"
" otherwise-available?78_504"
" otherwise-available?82_503"
" run-phase76_508"
" run-phase80_507"
" seen79_512"
" seen83_511"
" skip-run?77_516"
" skip-run?81_515"
" ns84_500"
" mpi85_501"
" instance-phase86_502)))))))))))"
"(define-values"
"(namespace-module-instantiate!89.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_517 given-argc_518)"
"(if(= given-argc_518 '5)"
"(let-values(((l1_519) given-kws_517))"
"(let-values(((l1_520)"
"(if(null? l1_519) l1_519(if(eq?(car l1_519) '#:otherwise-available?)(cdr l1_519) l1_519))))"
"(let-values(((l1_521) l1_520))"
"(let-values(((l1_522)"
"(if(null? l1_521) l1_521(if(eq?(car l1_521) '#:run-phase)(cdr l1_521) l1_521))))"
"(let-values(((l1_523) l1_522))"
"(let-values(((l1_524)(if(null? l1_523) l1_523(if(eq?(car l1_523) '#:seen)(cdr l1_523) l1_523))))"
"(let-values(((l1_525) l1_524))"
"(let-values(((l1_526)"
"(if(null? l1_525) l1_525(if(eq?(car l1_525) '#:skip-run?)(cdr l1_525) l1_525))))"
"(null? l1_526)))))))))"
" '#f))"
"(case-lambda"
"((given-kws_527 given-args_528 ns_529 mpi_530 instance-phase_531)"
"(unpack88.1 given-kws_527 given-args_528 ns_529 mpi_530 instance-phase_531)))"
" null"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(let-values(((namespace-module-instantiate!_532)"
"(case-lambda"
"((ns_533 mpi_534 instance-phase_535)(unpack88.1 null null ns_533 mpi_534 instance-phase_535)))))"
" namespace-module-instantiate!_532)))"
"(define-values"
"(namespace-module-visit!95.1)"
"(lambda(visit-phase90_536 visit-phase91_537 ns92_538 mpi93_539 instance-phase94_540)"
"(let-values(((ns_541) ns92_538))"
"(let-values(((mpi_542) mpi93_539))"
"(let-values(((instance-phase_543) instance-phase94_540))"
"(let-values(((visit-phase_544)(if visit-phase91_537 visit-phase90_536(namespace-phase ns_541))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:273:2_545) namespace-module-instantiate!89.1)"
"((ns183_546) ns_541)"
"((mpi184_547) mpi_542)"
"((instance-phase185_548) instance-phase_543)"
"((temp186_549)(add1 visit-phase_544)))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" '#f"
" '#f"
" temp186_549"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" ns183_546"
" mpi184_547"
" instance-phase185_548)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:273:2_545"
" keyword-procedure-extract"
" '(#:run-phase)"
" '5)"
" '(#:run-phase)"
"(list temp186_549)"
" ns183_546"
" mpi184_547"
" instance-phase185_548))))))))))"
"(define-values"
"(unpack96.1)"
"(lambda(given-kws_550 given-args_551 ns92_552 mpi93_553 instance-phase94_554)"
"(let-values(((visit-phase91_555)(pair? given-kws_550)))"
"(let-values(((visit-phase90_556)(if visit-phase91_555(car given-args_551)(void))))"
"(namespace-module-visit!95.1 visit-phase90_556 visit-phase91_555 ns92_552 mpi93_553 instance-phase94_554)))))"
"(define-values"
"(namespace-module-visit!97.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_557 given-argc_558)"
"(if(= given-argc_558 '5)"
"(let-values(((l1_559) given-kws_557))"
"(let-values(((l1_560)(if(null? l1_559) l1_559(if(eq?(car l1_559) '#:visit-phase)(cdr l1_559) l1_559))))"
"(null? l1_560)))"
" '#f))"
"(case-lambda"
"((given-kws_561 given-args_562 ns_563 mpi_564 instance-phase_565)"
"(unpack96.1 given-kws_561 given-args_562 ns_563 mpi_564 instance-phase_565)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-visit!_566)"
"(case-lambda"
"((ns_567 mpi_568 instance-phase_569)(unpack96.1 null null ns_567 mpi_568 instance-phase_569)))))"
" namespace-module-visit!_566)))"
"(define-values"
"(namespace-module-make-available!103.1)"
"(lambda(visit-phase98_570 visit-phase99_571 ns100_572 mpi101_573 instance-phase102_574)"
"(let-values(((ns_575) ns100_572))"
"(let-values(((mpi_576) mpi101_573))"
"(let-values(((instance-phase_577) instance-phase102_574))"
"(let-values(((visit-phase_578)(if visit-phase99_571 visit-phase98_570(namespace-phase ns_575))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:276:2_579) namespace-module-instantiate!89.1)"
"((ns187_580) ns_575)"
"((mpi188_581) mpi_576)"
"((instance-phase189_582) instance-phase_577)"
"((temp190_583)(add1 visit-phase_578))"
"((temp191_584) '#t))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" '#f"
" '#f"
" temp190_583"
" '#t"
" '#f"
" '#f"
" temp191_584"
" '#t"
" ns187_580"
" mpi188_581"
" instance-phase189_582)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:276:2_579"
" keyword-procedure-extract"
" '(#:run-phase #:skip-run?)"
" '5)"
" '(#:run-phase #:skip-run?)"
"(list temp190_583 temp191_584)"
" ns187_580"
" mpi188_581"
" instance-phase189_582))))))))))"
"(define-values"
"(unpack104.1)"
"(lambda(given-kws_585 given-args_586 ns100_587 mpi101_588 instance-phase102_589)"
"(let-values(((visit-phase99_590)(pair? given-kws_585)))"
"(let-values(((visit-phase98_591)(if visit-phase99_590(car given-args_586)(void))))"
"(namespace-module-make-available!103.1"
" visit-phase98_591"
" visit-phase99_590"
" ns100_587"
" mpi101_588"
" instance-phase102_589)))))"
"(define-values"
"(namespace-module-make-available!105.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_592 given-argc_593)"
"(if(= given-argc_593 '5)"
"(let-values(((l1_594) given-kws_592))"
"(let-values(((l1_595)(if(null? l1_594) l1_594(if(eq?(car l1_594) '#:visit-phase)(cdr l1_594) l1_594))))"
"(null? l1_595)))"
" '#f))"
"(case-lambda"
"((given-kws_596 given-args_597 ns_598 mpi_599 instance-phase_600)"
"(unpack104.1 given-kws_596 given-args_597 ns_598 mpi_599 instance-phase_600)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-make-available!_601)"
"(case-lambda"
"((ns_602 mpi_603 instance-phase_604)(unpack104.1 null null ns_602 mpi_603 instance-phase_604)))))"
" namespace-module-make-available!_601)))"
"(define-values"
"(lifted/3.1$5)"
"(make-required"
" 'run-module-instance!"
"(case-lambda((self_605 mi_606 ns_607)(apply missing-kw self_605 mi_606 ns_607 null)))"
" '#f"
" '#f))"
"(define-values"
"(run-module-instance!116.1)"
"(lambda(otherwise-available?108_608 run-phase106_609 seen109_610 seen113_611 skip-run?107_612 mi114_613 ns115_614)"
"(let-values(((mi_615) mi114_613))"
"(let-values(((ns_616) ns115_614))"
"(let-values(((run-phase_617) run-phase106_609))"
"(let-values(((skip-run?_618) skip-run?107_612))"
"(let-values(((otherwise-available?_619) otherwise-available?108_608))"
"(let-values(((seen_620)(if seen113_611 seen109_610 '#hasheq())))"
"(let-values()"
"(let-values(((m-ns_621)(module-instance-namespace mi_615)))"
"(let-values(((instance-phase_622)(namespace-0-phase m-ns_621)))"
"(let-values(((run-phase-level_623)(phase- run-phase_617 instance-phase_622)))"
"(if(if(let-values(((or-part_624) skip-run?_618))"
"(if or-part_624"
" or-part_624"
"(eq?"
" 'started"
"(hash-ref(module-instance-phase-level-to-state mi_615) run-phase-level_623 '#f))))"
"(let-values(((or-part_625)(not otherwise-available?_619)))"
"(if or-part_625 or-part_625(module-instance-made-available? mi_615)))"
" '#f)"
"(void)"
"(let-values()"
"(let-values(((m_626)(module-instance-module mi_615)))"
"(let-values(((mpi_627)(namespace-mpi m-ns_621)))"
"(let-values(((phase-shift_628) instance-phase_622))"
"(let-values(((bulk-binding-registry_629)(namespace-bulk-binding-registry m-ns_621)))"
"(begin"
"(if(hash-ref seen_620 mi_615 '#f)"
"(let-values()"
" (error 'require '\"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_615)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_615"
"(alt-reverse"
"(let-values(((lst_630)(module-requires m_626)))"
"(begin"
"(if(list? lst_630)(void)(let-values()(in-list lst_630)))"
"((letrec-values(((for-loop_631)"
"(lambda(fold-var_632 lst_633)"
"(if(pair? lst_633)"
"(let-values(((phase+mpis_634)"
"(unsafe-car lst_633)))"
"(if '#t"
"(let-values(((fold-var_635)"
"(let-values(((fold-var_636)"
" fold-var_632))"
"(let-values(((fold-var_637)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_634)"
"(alt-reverse"
"(let-values(((lst_638)"
"(cdr"
" phase+mpis_634)))"
"(begin"
"(if(list?"
" lst_638)"
"(void)"
"(let-values()"
"(in-list"
" lst_638)))"
"((letrec-values(((for-loop_639)"
"(lambda(fold-var_640"
" lst_641)"
"(if(pair?"
" lst_641)"
"(let-values(((req-mpi_642)"
"(unsafe-car"
" lst_641)))"
"(if '#t"
"(let-values(((fold-var_643)"
"(let-values(((fold-var_644)"
" fold-var_640))"
"(let-values(((fold-var_645)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" req-mpi_642"
"(module-self"
" m_626)"
" mpi_627))"
" fold-var_644))))"
"(values"
" fold-var_645)))))"
"(if '#t"
"(for-loop_639"
" fold-var_643"
"(unsafe-cdr"
" lst_641))"
" fold-var_643))"
" fold-var_640))"
" fold-var_640))))"
" for-loop_639)"
" null"
" lst_638))))))"
" fold-var_636))))"
"(values fold-var_637)))))"
"(if '#t"
"(for-loop_631"
" fold-var_635"
"(unsafe-cdr lst_633))"
" fold-var_635))"
" fold-var_632))"
" fold-var_632))))"
" for-loop_631)"
" null"
" lst_630)))))))"
"(let-values(((lst_646)(module-instance-shifted-requires mi_615)))"
"(begin"
"(if(list? lst_646)(void)(let-values()(in-list lst_646)))"
"((letrec-values(((for-loop_647)"
"(lambda(fold-var_648 lst_649)"
"(if(pair? lst_649)"
"(let-values(((phase+mpis_650)(unsafe-car lst_649)))"
"(if '#t"
"(let-values(((fold-var_651)"
"(let-values(((fold-var_652)"
" fold-var_648))"
"(let-values(((fold-var_653)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_654)"
"(car"
" phase+mpis_650)))"
"(let-values(((lst_655)"
"(cdr"
" phase+mpis_650)))"
"(begin"
"(if(list?"
" lst_655)"
"(void)"
"(let-values()"
"(in-list"
" lst_655)))"
"((letrec-values(((for-loop_656)"
"(lambda(fold-var_657"
" lst_658)"
"(if(pair?"
" lst_658)"
"(let-values(((req-mpi_659)"
"(unsafe-car"
" lst_658)))"
"(if '#t"
"(let-values(((fold-var_660)"
"(let-values(((fold-var_661)"
" fold-var_657))"
"(let-values(((fold-var_662)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:323:8_663)"
" namespace-module-instantiate!89.1)"
"((ns192_664)"
" ns_616)"
"((req-mpi193_665)"
" req-mpi_659)"
"((temp194_666)"
"(phase+"
" instance-phase_622"
" req-phase_654))"
"((run-phase195_667)"
" run-phase_617)"
"((skip-run?196_668)"
" skip-run?_618)"
"((otherwise-available?197_669)"
" otherwise-available?_619)"
"((temp198_670)"
"(hash-set"
" seen_620"
" mpi_627"
" '#t)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" otherwise-available?197_669"
" '#t"
" run-phase195_667"
" '#t"
" temp198_670"
" '#t"
" skip-run?196_668"
" '#t"
" ns192_664"
" req-mpi193_665"
" temp194_666)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:323:8_663"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
" '5)"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
"(list"
" otherwise-available?197_669"
" run-phase195_667"
" temp198_670"
" skip-run?196_668)"
" ns192_664"
" req-mpi193_665"
" temp194_666))))"
"(void)))))"
"(values"
" fold-var_662)))))"
"(if '#t"
"(for-loop_656"
" fold-var_660"
"(unsafe-cdr"
" lst_658))"
" fold-var_660))"
" fold-var_657))"
" fold-var_657))))"
" for-loop_656)"
"(void)"
" lst_655)))))"
"(void)))))"
"(values fold-var_653)))))"
"(if '#t"
"(for-loop_647 fold-var_651(unsafe-cdr lst_649))"
" fold-var_651))"
" fold-var_648))"
" fold-var_648))))"
" for-loop_647)"
"(void)"
" lst_646)))"
"(if(label-phase? instance-phase_622)"
"(void)"
"(let-values()"
"(let-values(((start_671)(module-max-phase-level m_626))"
"((end_672)(sub1(module-min-phase-level m_626)))"
"((inc_673) '-1))"
"(begin"
"(if(if(real? start_671)(if(real? end_672)(real? inc_673) '#f) '#f)"
"(void)"
"(let-values()(in-range start_671 end_672 inc_673)))"
"((letrec-values(((for-loop_674)"
"(lambda(fold-var_675 pos_676)"
"(if(> pos_676 end_672)"
"(let-values(((phase-level_677) pos_676))"
"(if '#t"
"(let-values(((fold-var_678)"
"(let-values(((fold-var_679)"
" fold-var_675))"
"(let-values(((fold-var_680)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_681)"
"(phase+"
" phase-level_677"
" phase-shift_628)))"
"(if(if(not"
" skip-run?_618)"
"(eqv?"
" phase_681"
" run-phase_617)"
" '#f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_615)"
" phase-level_677"
" '#f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_615)"
" phase-level_677"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_621"
" phase-level_677))"
"(values))))"
"(let-values(((p-ns_682)"
"(namespace->namespace-at-phase"
" m-ns_621"
" phase_681)))"
"(let-values(((insp_683)"
"(module-inspector"
" m_626)))"
"(let-values(((data-box_684)"
"(module-instance-data-box"
" mi_615)))"
"(let-values(((prep_685)"
"(module-prepare-instance"
" m_626)))"
"(let-values(((go_686)"
"(module-instantiate-phase"
" m_626)))"
"(begin"
"(prep_685"
" data-box_684"
" p-ns_682"
" phase-shift_628"
" mpi_627"
" bulk-binding-registry_629"
" insp_683)"
"(go_686"
" data-box_684"
" p-ns_682"
" phase-shift_628"
" phase-level_677"
" mpi_627"
" bulk-binding-registry_629"
" insp_683))))))))))))"
"(if(if otherwise-available?_619"
"(if(not"
"(negative?"
" run-phase_617))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_615)"
" phase-level_677"
" '#f))"
" '#f)"
" '#f)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_616)"
" phase_681"
"(lambda(l_689)"
"(cons"
" mi_615"
" l_689))"
" null)"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_615)"
" phase-level_677"
" 'available)"
"(values))))"
"(let-values(((insp_687)"
"(module-inspector"
" m_626)))"
"(let-values(((prep_688)"
"(module-prepare-instance"
" m_626)))"
"(prep_688"
"(module-instance-data-box"
" mi_615)"
" m-ns_621"
" phase-shift_628"
" mpi_627"
" bulk-binding-registry_629"
" insp_687))))))"
"(void)))))"
"(void)))))"
"(values fold-var_680)))))"
"(if '#t"
"(for-loop_674"
" fold-var_678"
"(+ pos_676 inc_673))"
" fold-var_678))"
" fold-var_675))"
" fold-var_675))))"
" for-loop_674)"
"(void)"
" start_671)))))"
"(if otherwise-available?_619"
"(let-values()(set-module-instance-made-available?! mi_615 '#t))"
"(void))"
"(if skip-run?_618"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_615)"
" run-phase-level_623"
" 'started))))))))))))))))))))))"
"(define-values"
"(unpack117.1)"
"(lambda(given-kws_690 given-args_691 mi114_692 ns115_693)"
"(let-values(((otherwise-available?108_694)(car given-args_691))"
"((given-kws_695)(cdr given-kws_690))"
"((given-args_696)(cdr given-args_691)))"
"(let-values(((run-phase106_697)(car given-args_696))"
"((given-kws_698)(cdr given-kws_695))"
"((given-args_699)(cdr given-args_696)))"
"(let-values(((seen113_700)(if(pair? given-kws_698)(eq? '#:seen(car given-kws_698)) '#f)))"
"(let-values(((seen109_701)(if seen113_700(car given-args_699)(void)))"
"((given-kws_702)(if seen113_700(cdr given-kws_698) given-kws_698))"
"((given-args_703)(if seen113_700(cdr given-args_699) given-args_699)))"
"(let-values(((skip-run?107_704)(car given-args_703)))"
"(run-module-instance!116.1"
" otherwise-available?108_694"
" run-phase106_697"
" seen109_701"
" seen113_700"
" skip-run?107_704"
" mi114_692"
" ns115_693))))))))"
"(define-values"
"(run-module-instance!118.1)"
"(lifted/3.1$5"
"(lambda(given-kws_705 given-argc_706)"
"(if(= given-argc_706 '4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_705"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" '#f))"
"(case-lambda((given-kws_707 given-args_708 mi_709 ns_710)(unpack117.1 given-kws_707 given-args_708 mi_709 ns_710)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!122_711)"
"(lambda(ns121_712 run-phase119_713 run-phase120_714)"
"(let-values(((ns_715) ns121_712))"
"(let-values(((run-phase_716)(if run-phase120_714 run-phase119_713(namespace-phase ns_715))))"
"(let-values()(namespace-run-available-modules! ns_715(add1 run-phase_716))))))))"
"(case-lambda"
"((ns_717)(namespace-visit-available-modules!122_711 ns_717 '#f '#f))"
"((ns_718 run-phase119_719)(namespace-visit-available-modules!122_711 ns_718 run-phase119_719 '#t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!127_720)"
"(lambda(ns126_721 run-phase124_722 run-phase125_723)"
"(let-values(((ns_724) ns126_721))"
"(let-values(((run-phase_725)(if run-phase125_723 run-phase124_722(namespace-phase ns_724))))"
"(let-values()"
"(registry-call-with-lock"
"(namespace-module-registry$1 ns_724)"
"(lambda()"
"((letrec-values(((loop_726)"
"(lambda()"
"(let-values(((mis_727)"
"(hash-ref"
"(namespace-available-module-instances ns_724)"
" run-phase_725"
" null)))"
"(if(null? mis_727)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_724)"
" run-phase_725"
" null)"
"(let-values(((lst_728)(alt-reverse mis_727)))"
"(begin"
"(if(list? lst_728)(void)(let-values()(in-list lst_728)))"
"((letrec-values(((for-loop_729)"
"(lambda(fold-var_730 lst_731)"
"(if(pair? lst_731)"
"(let-values(((mi_732)"
"(unsafe-car lst_731)))"
"(if '#t"
"(let-values(((fold-var_733)"
"(let-values(((fold-var_734)"
" fold-var_730))"
"(let-values(((fold-var_735)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:380:11_736)"
" run-module-instance!118.1)"
"((mi199_737)"
" mi_732)"
"((ns200_738)"
" ns_724)"
"((run-phase201_739)"
" run-phase_725)"
"((temp202_740)"
" '#f)"
"((temp203_741)"
" '#f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" run-module-instance!118.1))"
"(run-module-instance!116.1"
" temp203_741"
" run-phase201_739"
" '#f"
" '#f"
" temp202_740"
" mi199_737"
" ns200_738)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:380:11_736"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
" '4)"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
"(list"
" temp203_741"
" run-phase201_739"
" temp202_740)"
" mi199_737"
" ns200_738))))"
"(void)))))"
"(values"
" fold-var_735)))))"
"(if '#t"
"(for-loop_729"
" fold-var_733"
"(unsafe-cdr lst_731))"
" fold-var_733))"
" fold-var_730))"
" fold-var_730))))"
" for-loop_729)"
"(void)"
" lst_728)))"
"(loop_726))))))))"
" loop_726))))))))))"
"(case-lambda"
"((ns_742)(namespace-run-available-modules!127_720 ns_742 '#f '#f))"
"((ns_743 run-phase124_744)(namespace-run-available-modules!127_720 ns_743 run-phase124_744 '#t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_745 name_746)"
"(let-values(((mi_747)(hash-ref(namespace-module-instances ns_745)(1/make-resolved-module-path name_746))))"
"(let-values(((...namespace/module.rkt:386:2_748) run-module-instance!118.1)"
"((mi204_749) mi_747)"
"((ns205_750) ns_745)"
"((temp206_751) '1)"
"((temp207_752) '#f)"
"((temp208_753) '#t))"
"(if(variable-reference-constant?(#%variable-reference run-module-instance!118.1))"
"(run-module-instance!116.1 temp208_753 temp206_751 '#f '#f temp207_752 mi204_749 ns205_750)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:386:2_748"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '4)"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
"(list temp208_753 temp206_751 temp207_752)"
" mi204_749"
" ns205_750))))))"
"(define-values"
"(lifted/4.1$4)"
"(make-required"
" 'namespace-module-use->module+linklet-instances"
"(case-lambda((self_754 ns_755 mu_756)(apply missing-kw self_754 ns_755 mu_756 null)))"
" '#f"
" '#f))"
"(define-values"
"(namespace-module-use->module+linklet-instances137.1)"
"(lambda(phase-shift131_757 shift-from129_758 shift-from132_759 shift-to130_760 shift-to133_761 ns135_762 mu136_763)"
"(let-values(((ns_764) ns135_762))"
"(let-values(((mu_765) mu136_763))"
"(let-values(((shift-from_766)(if shift-from132_759 shift-from129_758 '#f)))"
"(let-values(((shift-to_767)(if shift-to133_761 shift-to130_760 '#f)))"
"(let-values(((phase-shift_768) phase-shift131_757))"
"(let-values()"
"(let-values(((mod_769)(module-use-module mu_765)))"
"(let-values(((mi_770)"
"(let-values(((...namespace/module.rkt:396:4_773) namespace->module-instance63.1)"
"((ns209_774) ns_764)"
"((temp210_775)"
"(1/module-path-index-resolve"
"(if shift-from_766"
"(module-path-index-shift mod_769 shift-from_766 shift-to_767)"
" mod_769)))"
"((phase-shift211_776) phase-shift_768)"
"((temp212_777) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance63.1))"
"(namespace->module-instance61.1"
" '#f"
" '#f"
" temp212_777"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" ns209_774"
" temp210_775"
" phase-shift211_776)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:396:4_773"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" '5)"
" '(#:complain-on-failure?)"
"(list temp212_777)"
" ns209_774"
" temp210_775"
" phase-shift211_776)))))"
"(let-values(((m-ns_771)(module-instance-namespace mi_770)))"
"(let-values(((d_772)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_771)"
"(module-use-phase mu_765)"
" '#f)))"
"(if d_772"
"(values mi_770(definitions-variables d_772))"
" (error '\"namespace mismatch: phase level not found\"))))))))))))))"
"(define-values"
"(unpack138.1)"
"(lambda(given-kws_778 given-args_779 ns135_780 mu136_781)"
"(let-values(((phase-shift131_782)(car given-args_779))"
"((given-kws_783)(cdr given-kws_778))"
"((given-args_784)(cdr given-args_779)))"
"(let-values(((shift-from132_785)(if(pair? given-kws_783)(eq? '#:shift-from(car given-kws_783)) '#f)))"
"(let-values(((shift-from129_786)(if shift-from132_785(car given-args_784)(void)))"
"((given-kws_787)(if shift-from132_785(cdr given-kws_783) given-kws_783))"
"((given-args_788)(if shift-from132_785(cdr given-args_784) given-args_784)))"
"(let-values(((shift-to133_789)(pair? given-kws_787)))"
"(let-values(((shift-to130_790)(if shift-to133_789(car given-args_788)(void))))"
"(namespace-module-use->module+linklet-instances137.1"
" phase-shift131_782"
" shift-from129_786"
" shift-from132_785"
" shift-to130_790"
" shift-to133_789"
" ns135_780"
" mu136_781))))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances139.1)"
"(lifted/4.1$4"
"(lambda(given-kws_791 given-argc_792)"
"(if(= given-argc_792 '4)(subsets? '(#:phase-shift) given-kws_791 '(#:phase-shift #:shift-from #:shift-to)) '#f))"
"(case-lambda((given-kws_793 given-args_794 ns_795 mu_796)(unpack138.1 given-kws_793 given-args_794 ns_795 mu_796)))"
" '(#:phase-shift)"
" '(#:phase-shift #:shift-from #:shift-to)))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_797)"
"(let-values(((access_798)"
"(let-values(((ht_799)(module-provides m_797)))"
"(begin"
"(if((lambda(ht_800)(hash? ht_800)) ht_799)(void)(let-values()(default-in-hash ht_799)))"
"((letrec-values(((for-loop_801)"
"(lambda(table_802 i_803)"
"(if i_803"
"(let-values(((phase_804 at-phase_805)"
"(hash-iterate-key+value ht_799 i_803)))"
"(if '#t"
"(let-values(((table_806)"
"(let-values(((table_807) table_802))"
"(let-values(((table_808)"
"(let-values()"
"(let-values(((key_809 val_810)"
"(let-values()"
"(values"
" phase_804"
"(let-values(((ht_811)"
" at-phase_805))"
"(begin"
"(if((lambda(ht_812)"
"(hash?"
" ht_812))"
" ht_811)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_811)))"
"((letrec-values(((for-loop_813)"
"(lambda(table_814"
" i_815)"
"(if i_815"
"(let-values(((sym_816"
" binding_817)"
"(hash-iterate-key+value"
" ht_811"
" i_815)))"
"(if '#t"
"(let-values(((table_818)"
"(let-values(((table_819)"
" table_814))"
"(let-values(((table_820)"
"(let-values()"
"(let-values(((key_821"
" val_822)"
"(let-values()"
"(values"
"(module-binding-sym"
"(if(protected?"
" binding_817)"
"(protected-binding"
" binding_817)"
" binding_817))"
"(if(protected?"
" binding_817)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_819"
" key_821"
" val_822)))))"
"(values"
" table_820)))))"
"(if '#t"
"(for-loop_813"
" table_818"
"(hash-iterate-next"
" ht_811"
" i_815))"
" table_818))"
" table_814))"
" table_814))))"
" for-loop_813)"
" '#hash()"
"(hash-iterate-first"
" ht_811))))))))"
"(hash-set"
" table_807"
" key_809"
" val_810)))))"
"(values table_808)))))"
"(if '#t"
"(for-loop_801 table_806(hash-iterate-next ht_799 i_803))"
" table_806))"
" table_802))"
" table_802))))"
" for-loop_801)"
" '#hasheqv()"
"(hash-iterate-first ht_799))))))"
"(begin(set-module-access! m_797 access_798) access_798))))"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((...inding-to-module.rkt:14:4_7) namespace->module-instance63.1)"
"((ns1_8) ns_2)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)"
"(lambda()"
"(1/raise-syntax-error"
" '#f"
"(format"
"(string-append"
" '\"module mismatch;\\n\"\n"
" '\" attempted to use a module that is not available\\n\""
" '\" possible cause:\\n\""
" '\" using (dynamic-require .... #f)\\n\""
" '\" but need (dynamic-require .... 0)\\n\""
" '\" module: ~s\\n\""
" '\" phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance63.1))"
"(namespace->module-instance61.1"
" temp4_11"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" temp5_12"
" '#t"
" ns1_8"
" temp2_9"
" at-phase3_10)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...inding-to-module.rkt:14:4_7"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:unavailable-callback)"
" '5)"
" '(#:check-available-at-phase-level #:unavailable-callback)"
"(list temp4_11 temp5_12)"
" ns1_8"
" temp2_9"
" at-phase3_10)))))"
"(begin"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
" '\"namespace mismatch; cannot locate module instance\\n\"\n"
" '\" X: ~s\\n\""
" '\" module: ~s\\n\""
" '\" use phase: ~a\\n\""
" '\" definition phase: ~a\\n\""
" '\" for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) '#f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" '#f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_4))"
"(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" '#f))))"
"(1/raise-syntax-error"
" '#f"
"(format"
" '\"access disallowed by code inspector to ~a ~a\\n from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((...r/expand/protect.rkt:54:14_23) resolve+shift15.1)"
"((id1_24) id_20)"
"((phase2_25) phase_17)"
"((temp3_26) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp3_26"
" '#t"
" '#f"
" '#f"
" id1_24"
" phase2_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:54:14_23"
" keyword-procedure-extract"
" '(#:immediate?)"
" '4)"
" '(#:immediate?)"
"(list temp3_26)"
" id1_24"
" phase2_25)))))"
"(let-values(((c109424_27)(binding-free=id b_22)))"
"(if c109424_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" '#f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
" (check-access b_22 mi_30 id_20 in-s_21 '\"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_28"
"(let-values(((or-part_31) in-s_21))"
"(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" '#f)"
" '#f)"
"(let-values()"
"(let-values(((...r/expand/protect.rkt:67:13_32) module-binding-update46.1)"
"((next-b4_33) next-b_29)"
"((temp5_34)(syntax-inspector id_20)))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" temp5_34"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" next-b4_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:67:13_32"
" keyword-procedure-extract"
" '(#:extra-inspector)"
" '3)"
" '(#:extra-inspector)"
"(list temp5_34)"
" next-b4_33))))"
"(let-values() next-b_29)))))"
" c109424_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" '#f)))"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 '1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 '2)))"
" '#f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
" '\"(or/c (procedure-arity-includes? proc 1)\\n\""
" '\" (procedure-arity-includes? proc 2)\\n\""
" '\" exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 '1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
" '\"field index >= initialized-field count for structure type\""
" '\"field index\""
" v_1"
" '\"initialized-field count\""
"(list-ref info_2 '1))))"
"(if(member v_1(list-ref info_2 '5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
" '\"field index not declared immutable\""
" '\"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 '3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 '1) '#f)"
" p_7"
" (lambda (s_8) (error '\"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(make-struct-type"
" 'set!-transformer"
" '#f"
" '1"
" '0"
" '#f"
"(list(cons 1/prop:set!-transformer '0))"
"(current-inspector)"
" '#f"
" '(0)"
" '#f"
" 'set!-transformer)))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 '0 'proc)))))"
"(lambda(proc_36)"
"(begin"
"(if(if(procedure? proc_36)(procedure-arity-includes? proc_36 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'make-set!-transformer '\"(procedure-arity-includes/c 1)\" proc_36)))"
"(set!-transformer1_11 proc_36))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_37)"
"(let-values(((v_38)((set!-transformer-value t_37) t_37)))"
"(if(procedure-arity-includes? v_38 '1) v_38(lambda(s_39)(v_38 t_37 s_39))))))"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_2 key_3 val_4)(hash-set env_2 key_3 val_4)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_5)(let-values(((or-part_6)(eq? t_5 variable)))(if or-part_6 or-part_6(local-variable? t_5)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_7 make-_8 ?_9 -ref_10 -set!_11)"
"(make-struct-type 'local-variable '#f '1 '0 '#f null(current-inspector) '#f '(0) '#f 'local-variable)))"
"(values struct:_7 make-_8 ?_9(make-struct-field-accessor -ref_10 '0 'id))))"
"(define-values"
"(lifted/1.1$10)"
"(make-required"
" 'substitute-variable"
"(case-lambda((self_28 id_29 t_30)(apply missing-kw self_28 id_29 t_30 null)))"
" '#f"
" '#f))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_31 id4_32 t5_33)"
"(let-values(((id_34) id4_32))"
"(let-values(((t_35) t5_33))"
"(let-values(((no-stops?_36) no-stops?2_31))"
"(let-values()"
"(if(if no-stops?_36(local-variable? t_35) '#f)"
"(let-values(((bind-id_37)(local-variable-id t_35)))"
"(syntax-rearm$1"
"(datum->syntax$2(syntax-disarm$1 bind-id_37)(syntax-e$1 bind-id_37) id_34 id_34)"
" id_34))"
" id_34)))))))"
"(define-values"
"(unpack7.1$2)"
"(lambda(given-kws_38 given-args_39 id4_40 t5_41)"
"(let-values(((no-stops?2_42)(car given-args_39)))(substitute-variable6.1 no-stops?2_42 id4_40 t5_41))))"
"(define-values"
"(substitute-variable8.1)"
"(lifted/1.1$10"
"(lambda(given-kws_43 given-argc_44)"
"(if(= given-argc_44 '4)"
"(let-values(((l2_45) given-kws_43))"
"(if(pair? l2_45)(if(eq?(car l2_45) '#:no-stops?)(null?(cdr l2_45)) '#f) '#f))"
" '#f))"
"(case-lambda((given-kws_46 given-args_47 id_48 t_49)(unpack7.1$2 given-kws_46 given-args_47 id_48 t_49)))"
" '(#:no-stops?)"
" '(#:no-stops?)))"
"(define-values(missing)(gensym 'missing))"
"(define-values(missing?)(lambda(t_50)(eq? t_50 missing)))"
"(define-values"
"(transformer?)"
"(lambda(t_51)"
"(let-values(((or-part_52)(procedure? t_51)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(1/set!-transformer? t_51)))"
"(if or-part_53 or-part_53(1/rename-transformer? t_51)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_54)"
"(if(1/set!-transformer? t_54)"
"(let-values()(1/set!-transformer-procedure t_54))"
"(if(1/rename-transformer? t_54)(let-values()(lambda(s_55) s_55))(let-values() t_54)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_56 make-_57 ?_58 -ref_59 -set!_60)"
"(make-struct-type 'core-form '#f '2 '0 '#f null '#f '#f '(0 1) '#f 'core-form)))"
"(values"
" struct:_56"
" make-_57"
" ?_58"
"(make-struct-field-accessor -ref_59 '0 'expander)"
"(make-struct-field-accessor -ref_59 '1 'name))))"
"(define-values"
"(add-binding!15.1)"
"(lambda(in10_82 in11_83 id12_84 binding13_85 phase14_86)"
"(let-values(((id_87) id12_84))"
"(let-values(((binding_88) binding13_85))"
"(let-values(((phase_89) phase14_86))"
"(let-values(((in-s_90)(if in11_83 in10_82 '#f)))"
"(let-values()"
"(begin"
"(check-id-taint id_87 in-s_90)"
"(add-binding-in-scopes!(syntax-scope-set id_87 phase_89)(syntax-e$1 id_87) binding_88)))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_91 given-args_92 id12_93 binding13_94 phase14_95)"
"(let-values(((in11_96)(pair? given-kws_91)))"
"(let-values(((in10_97)(if in11_96(car given-args_92)(void))))"
"(add-binding!15.1 in10_97 in11_96 id12_93 binding13_94 phase14_95)))))"
"(define-values"
"(add-binding!17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_98 given-argc_99)"
"(if(= given-argc_99 '5)"
"(let-values(((l1_100) given-kws_98))"
"(let-values(((l1_101)(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:in)(cdr l1_100) l1_100))))"
"(null? l1_101)))"
" '#f))"
"(case-lambda"
"((given-kws_102 given-args_103 id_104 binding_105 phase_106)"
"(unpack16.1$3 given-kws_102 given-args_103 id_104 binding_105 phase_106)))"
" null"
" '(#:in)"
"(let-values(((add-binding!_107)"
"(case-lambda((id_108 binding_109 phase_110)(unpack16.1$3 null null id_108 binding_109 phase_110)))))"
" add-binding!_107)))"
"(define-values"
"(add-bulk-binding!23.1)"
"(lambda(in18_111 in19_112 s20_113 binding21_114 phase22_115)"
"(let-values(((s_116) s20_113))"
"(let-values(((binding_117) binding21_114))"
"(let-values(((phase_118) phase22_115))"
"(let-values(((in-s_119)(if in19_112 in18_111 '#f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_116)"
" (let-values () (1/raise-syntax-error '#f '\"cannot bind from tainted syntax\" in-s_119 s_116))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_116 phase_118) binding_117)))))))))"
"(define-values"
"(unpack24.1)"
"(lambda(given-kws_120 given-args_121 s20_122 binding21_123 phase22_124)"
"(let-values(((in19_125)(pair? given-kws_120)))"
"(let-values(((in18_126)(if in19_125(car given-args_121)(void))))"
"(add-bulk-binding!23.1 in18_126 in19_125 s20_122 binding21_123 phase22_124)))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_127 given-argc_128)"
"(if(= given-argc_128 '5)"
"(let-values(((l1_129) given-kws_127))"
"(let-values(((l1_130)(if(null? l1_129) l1_129(if(eq?(car l1_129) '#:in)(cdr l1_129) l1_129))))"
"(null? l1_130)))"
" '#f))"
"(case-lambda"
"((given-kws_131 given-args_132 s_133 binding_134 phase_135)"
"(unpack24.1 given-kws_131 given-args_132 s_133 binding_134 phase_135)))"
" null"
" '(#:in)"
"(let-values(((add-bulk-binding!_136)"
"(case-lambda((s_137 binding_138 phase_139)(unpack24.1 null null s_137 binding_138 phase_139)))))"
" add-bulk-binding!_136)))"
"(define-values"
"(add-local-binding!33.1)"
"(lambda(frame-id26_140 frame-id28_141 in27_142 in29_143 id30_144 phase31_145 counter32_146)"
"(let-values(((id_147) id30_144))"
"(let-values(((phase_148) phase31_145))"
"(let-values(((counter_149) counter32_146))"
"(let-values(((frame-id_150)(if frame-id28_141 frame-id26_140 '#f)))"
"(let-values(((in-s_151)(if in29_143 in27_142 '#f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_147 in-s_151)(values))))"
"(let-values((()(begin(set-box! counter_149(add1(unbox counter_149)))(values))))"
"(let-values(((key_152)"
"(string->uninterned-symbol"
" (format '\"~a_~a\" (syntax-e$1 id_147) (unbox counter_149)))))"
"(begin"
"(add-binding-in-scopes!"
"(syntax-scope-set id_147 phase_148)"
"(syntax-e$1 id_147)"
"(let-values(((...ander/expand/env.rkt:97:68_153) make-local-binding9.1)"
"((key51_154) key_152)"
"((frame-id52_155) frame-id_150))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id52_155 '#t '#f '#f key51_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/env.rkt:97:68_153"
" keyword-procedure-extract"
" '(#:frame-id)"
" '3)"
" '(#:frame-id)"
"(list frame-id52_155)"
" key51_154))))"
" key_152))))))))))))"
"(define-values"
"(unpack34.1$2)"
"(lambda(given-kws_156 given-args_157 id30_158 phase31_159 counter32_160)"
"(let-values(((frame-id28_161)(if(pair? given-kws_156)(eq? '#:frame-id(car given-kws_156)) '#f)))"
"(let-values(((frame-id26_162)(if frame-id28_161(car given-args_157)(void)))"
"((given-kws_163)(if frame-id28_161(cdr given-kws_156) given-kws_156))"
"((given-args_164)(if frame-id28_161(cdr given-args_157) given-args_157)))"
"(let-values(((in29_165)(pair? given-kws_163)))"
"(let-values(((in27_166)(if in29_165(car given-args_164)(void))))"
"(add-local-binding!33.1"
" frame-id26_162"
" frame-id28_161"
" in27_166"
" in29_165"
" id30_158"
" phase31_159"
" counter32_160)))))))"
"(define-values"
"(add-local-binding!35.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_167 given-argc_168)"
"(if(= given-argc_168 '5)"
"(let-values(((l1_169) given-kws_167))"
"(let-values(((l1_170)(if(null? l1_169) l1_169(if(eq?(car l1_169) '#:frame-id)(cdr l1_169) l1_169))))"
"(let-values(((l1_171) l1_170))"
"(let-values(((l1_172)(if(null? l1_171) l1_171(if(eq?(car l1_171) '#:in)(cdr l1_171) l1_171))))"
"(null? l1_172)))))"
" '#f))"
"(case-lambda"
"((given-kws_173 given-args_174 id_175 phase_176 counter_177)"
"(unpack34.1$2 given-kws_173 given-args_174 id_175 phase_176 counter_177)))"
" null"
" '(#:frame-id #:in)"
"(let-values(((add-local-binding!_178)"
"(case-lambda((id_179 phase_180 counter_181)(unpack34.1$2 null null id_179 phase_180 counter_181)))))"
" add-local-binding!_178)))"
"(define-values"
"(check-id-taint)"
"(lambda(id_182 in-s_183)"
"(if(syntax-tainted?$1 id_182)"
" (let-values () (1/raise-syntax-error '#f '\"cannot bind tainted identifier\" in-s_183 id_182))"
"(void))))"
"(define-values"
"(binding-lookup46.1)"
"(lambda(in36_184"
" in38_185"
" out-of-context-as-variable?37_186"
" out-of-context-as-variable?39_187"
" b40_188"
" env41_189"
" lift-envs42_190"
" ns43_191"
" phase44_192"
" id45_193)"
"(let-values(((b_194) b40_188))"
"(let-values(((env_195) env41_189))"
"(let-values(((lift-envs_196) lift-envs42_190))"
"(let-values(((ns_197) ns43_191))"
"(let-values(((phase_198) phase44_192))"
"(let-values(((id_199) id45_193))"
"(let-values(((in-s_200)(if in38_185 in36_184 '#f)))"
"(let-values(((out-of-context-as-variable?_201)"
"(if out-of-context-as-variable?39_187 out-of-context-as-variable?37_186 '#f)))"
"(let-values()"
"(if(module-binding? b_194)"
"(let-values()"
"(let-values(((top-level?_202)(top-level-module-path-index?(module-binding-module b_194))))"
"(let-values(((mi_203)"
"(if(not top-level?_202)"
"(binding->module-instance b_194 ns_197 phase_198 id_199)"
" '#f)))"
"(let-values(((m-ns_204)"
"(if top-level?_202"
" ns_197"
"(if mi_203(module-instance-namespace mi_203) '#f))))"
"(let-values((()(begin(check-taint id_199)(values))))"
"(let-values(((t_205)"
"(namespace-get-transformer"
" m-ns_204"
"(module-binding-phase b_194)"
"(module-binding-sym b_194)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_203"
"(let-values()"
"(check-access"
" b_194"
" mi_203"
" id_199"
" in-s_200"
" (if t_205 '\"transformer\" '\"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_206)"
"(if mi_203"
"(if(module-instance-module mi_203)"
"(module-inspector(module-instance-module mi_203))"
" '#f)"
" '#f)))"
"(values t_205 insp_206)))))))))"
"(if(local-binding? b_194)"
"(let-values()"
"(let-values(((t_207)(hash-ref env_195(local-binding-key b_194) missing)))"
"(if(eq? t_207 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_208)"
"(let-values(((lst_209) lift-envs_196))"
"(begin"
"(if(list? lst_209)(void)(let-values()(in-list lst_209)))"
"((letrec-values(((for-loop_210)"
"(lambda(result_211 lst_212)"
"(if(pair? lst_212)"
"(let-values(((lift-env_213)"
"(unsafe-car lst_212)))"
"(if '#t"
"(let-values(((result_214)"
"(let-values(((result_215)"
" result_211))"
"(let-values(((result_216)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_213)"
"(local-binding-key"
" b_194)"
" '#f)))))"
"(values result_216)))))"
"(if(if '#t"
"(not"
"((lambda x_217 result_214)"
" lift-env_213))"
" '#f)"
"(for-loop_210"
" result_214"
"(unsafe-cdr lst_212))"
" result_214))"
" result_211))"
" result_211))))"
" for-loop_210)"
" '#f"
" lst_209)))))"
"(if or-part_208"
" or-part_208"
"(if out-of-context-as-variable?_201"
" variable"
" (error '\"identifier used out of context:\" id_199))))"
" '#f))"
"(let-values()(begin(check-taint id_199)(values t_207 '#f))))))"
" (let-values () (error '\"internal error: unknown binding for lookup:\" b_194)))))))))))))))"
"(define-values"
"(unpack47.1$2)"
"(lambda(given-kws_218 given-args_219 b40_220 env41_221 lift-envs42_222 ns43_223 phase44_224 id45_225)"
"(let-values(((in38_226)(if(pair? given-kws_218)(eq? '#:in(car given-kws_218)) '#f)))"
"(let-values(((in36_227)(if in38_226(car given-args_219)(void)))"
"((given-kws_228)(if in38_226(cdr given-kws_218) given-kws_218))"
"((given-args_229)(if in38_226(cdr given-args_219) given-args_219)))"
"(let-values(((out-of-context-as-variable?39_230)(pair? given-kws_228)))"
"(let-values(((out-of-context-as-variable?37_231)"
"(if out-of-context-as-variable?39_230(car given-args_229)(void))))"
"(binding-lookup46.1"
" in36_227"
" in38_226"
" out-of-context-as-variable?37_231"
" out-of-context-as-variable?39_230"
" b40_220"
" env41_221"
" lift-envs42_222"
" ns43_223"
" phase44_224"
" id45_225)))))))"
"(define-values"
"(binding-lookup48.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_232 given-argc_233)"
"(if(= given-argc_233 '8)"
"(let-values(((l1_234) given-kws_232))"
"(let-values(((l1_235)(if(null? l1_234) l1_234(if(eq?(car l1_234) '#:in)(cdr l1_234) l1_234))))"
"(let-values(((l1_236) l1_235))"
"(let-values(((l1_237)"
"(if(null? l1_236)"
" l1_236"
"(if(eq?(car l1_236) '#:out-of-context-as-variable?)(cdr l1_236) l1_236))))"
"(null? l1_237)))))"
" '#f))"
"(case-lambda"
"((given-kws_238 given-args_239 b_240 env_241 lift-envs_242 ns_243 phase_244 id_245)"
"(unpack47.1$2 given-kws_238 given-args_239 b_240 env_241 lift-envs_242 ns_243 phase_244 id_245)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((binding-lookup_246)"
"(case-lambda"
"((b_247 env_248 lift-envs_249 ns_250 phase_251 id_252)"
"(unpack47.1$2 null null b_247 env_248 lift-envs_249 ns_250 phase_251 id_252)))))"
" binding-lookup_246)))"
"(define-values"
"(check-taint)"
"(lambda(id_253)"
"(if(syntax-tainted?$1 id_253)"
" (let-values () (1/raise-syntax-error '#f '\"cannot use identifier tainted by macro transformation\" id_253))"
"(void))))"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values(((lst_3) ids_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6)))"
"(if '#t"
"(let-values(((ht_8)"
"(let-values(((ht_9) ht_5))"
"(let-values(((ht_10)"
"(let-values()"
"(hash-update"
" ht_9"
"(identifier-binding-symbol$1 id_7 phase_1)"
"(lambda(l_11)(cons id_7 l_11))"
" null))))"
"(values ht_10)))))"
"(if '#t(for-loop_4 ht_8(unsafe-cdr lst_6)) ht_8))"
" ht_5))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set '0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_12 phase_13 given-id_14)"
"(let-values(((lst_15)(hash-ref fs_12(identifier-binding-symbol$1 given-id_14 phase_13) null)))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((id_19)(unsafe-car lst_18)))"
"(if '#t"
"(let-values(((result_20)"
"(let-values(((result_21) result_17))"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_19"
" given-id_14"
" phase_13"
" phase_13)))))"
"(values result_22)))))"
"(if(if '#t(not((lambda x_23 result_20) id_19)) '#f)"
"(for-loop_16 result_20(unsafe-cdr lst_18))"
" result_20))"
" result_17))"
" result_17))))"
" for-loop_16)"
" '#f"
" lst_15)))))"
"(define-values(free-id-set-empty?)(lambda(fs_24)(zero?(hash-count fs_24))))"
"(define-values"
"(struct:expand-context"
" expand-context1.1"
" expand-context?"
" expand-context-context"
" expand-context-phase"
" expand-context-namespace"
" expand-context-env"
" expand-context-post-expansion-scope-action"
" expand-context-scopes"
" expand-context-def-ctx-scopes"
" expand-context-reference-records"
" expand-context-only-immediate?"
" expand-context-just-once?"
" expand-context-module-begin-k"
" expand-context-need-eventually-defined"
" expand-context-allow-unbound?"
" expand-context-preserve-#%expression-and-do-not-add-#%top?"
" expand-context-stops"
" expand-context-current-introduction-scopes"
" expand-context-declared-submodule-names"
" expand-context-lifts"
" expand-context-lift-envs"
" expand-context-module-lifts"
" expand-context-require-lifts"
" expand-context-to-module-lifts"
" expand-context-requires+provides"
" expand-context-name"
" expand-context-observer)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context"
" '25"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24)"
" '#f"
" 'expand-context)))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 '0 'context)"
"(make-struct-field-accessor -ref_5 '1 'phase)"
"(make-struct-field-accessor -ref_5 '2 'namespace)"
"(make-struct-field-accessor -ref_5 '3 'env)"
"(make-struct-field-accessor -ref_5 '4 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_5 '5 'scopes)"
"(make-struct-field-accessor -ref_5 '6 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_5 '7 'reference-records)"
"(make-struct-field-accessor -ref_5 '8 'only-immediate?)"
"(make-struct-field-accessor -ref_5 '9 'just-once?)"
"(make-struct-field-accessor -ref_5 '10 'module-begin-k)"
"(make-struct-field-accessor -ref_5 '11 'need-eventually-defined)"
"(make-struct-field-accessor -ref_5 '12 'allow-unbound?)"
"(make-struct-field-accessor -ref_5 '13 'preserve-#%expression-and-do-not-add-#%top?)"
"(make-struct-field-accessor -ref_5 '14 'stops)"
"(make-struct-field-accessor -ref_5 '15 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_5 '16 'declared-submodule-names)"
"(make-struct-field-accessor -ref_5 '17 'lifts)"
"(make-struct-field-accessor -ref_5 '18 'lift-envs)"
"(make-struct-field-accessor -ref_5 '19 'module-lifts)"
"(make-struct-field-accessor -ref_5 '20 'require-lifts)"
"(make-struct-field-accessor -ref_5 '21 'to-module-lifts)"
"(make-struct-field-accessor -ref_5 '22 'requires+provides)"
"(make-struct-field-accessor -ref_5 '23 'name)"
"(make-struct-field-accessor -ref_5 '24 'observer))))"
"(define-values"
"(make-expand-context)"
"(lambda(ns_143)"
"(let-values(((root-ctx_144)(namespace-get-root-expand-ctx ns_143)))"
"(expand-context1.1"
"(root-expand-context-module-scopes root-ctx_144)"
"(root-expand-context-post-expansion-scope root-ctx_144)"
"(root-expand-context-top-level-bind-scope root-ctx_144)"
"(root-expand-context-all-scopes-stx root-ctx_144)"
"(root-expand-context-use-site-scopes root-ctx_144)"
"(root-expand-context-defined-syms root-ctx_144)"
"(root-expand-context-frame-id root-ctx_144)"
"(root-expand-context-counter root-ctx_144)"
"(root-expand-context-lift-key root-ctx_144)"
" 'top-level"
"(namespace-phase ns_143)"
" ns_143"
" empty-env"
" push-scope"
" null"
" '#f"
" null"
" '#f"
" '#f"
" '#f"
" '#f"
" '#t"
" '#f"
" empty-free-id-set"
" null"
" '#hasheq()"
" '#f"
" '()"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
"(current-expand-observe)))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_145 root-ctx_146)"
"(let-values(((the-struct_147) ctx_145))"
"(if(expand-context? the-struct_147)"
"(let-values(((module-scopes16_148)(root-expand-context-module-scopes root-ctx_146))"
"((post-expansion-scope17_149)(root-expand-context-post-expansion-scope root-ctx_146))"
"((top-level-bind-scope18_150)(root-expand-context-top-level-bind-scope root-ctx_146))"
"((all-scopes-stx19_151)(root-expand-context-all-scopes-stx root-ctx_146))"
"((use-site-scopes20_152)(root-expand-context-use-site-scopes root-ctx_146))"
"((defined-syms21_153)(root-expand-context-defined-syms root-ctx_146))"
"((frame-id22_154)(root-expand-context-frame-id root-ctx_146))"
"((counter23_155)(root-expand-context-counter root-ctx_146))"
"((lift-key24_156)(root-expand-context-lift-key root-ctx_146)))"
"(expand-context1.1"
" module-scopes16_148"
" post-expansion-scope17_149"
" top-level-bind-scope18_150"
" all-scopes-stx19_151"
" use-site-scopes20_152"
" defined-syms21_153"
" frame-id22_154"
" counter23_155"
" lift-key24_156"
"(expand-context-context the-struct_147)"
"(expand-context-phase the-struct_147)"
"(expand-context-namespace the-struct_147)"
"(expand-context-env the-struct_147)"
"(expand-context-post-expansion-scope-action the-struct_147)"
"(expand-context-scopes the-struct_147)"
"(expand-context-def-ctx-scopes the-struct_147)"
"(expand-context-reference-records the-struct_147)"
"(expand-context-only-immediate? the-struct_147)"
"(expand-context-just-once? the-struct_147)"
"(expand-context-module-begin-k the-struct_147)"
"(expand-context-need-eventually-defined the-struct_147)"
"(expand-context-allow-unbound? the-struct_147)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_147)"
"(expand-context-stops the-struct_147)"
"(expand-context-current-introduction-scopes the-struct_147)"
"(expand-context-declared-submodule-names the-struct_147)"
"(expand-context-lifts the-struct_147)"
"(expand-context-lift-envs the-struct_147)"
"(expand-context-module-lifts the-struct_147)"
"(expand-context-require-lifts the-struct_147)"
"(expand-context-to-module-lifts the-struct_147)"
"(expand-context-requires+provides the-struct_147)"
"(expand-context-name the-struct_147)"
"(expand-context-observer the-struct_147)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_147)))))"
"(define-values(current-expand-context)(make-parameter '#f))"
"(define-values"
"(get-current-expand-context6.1)"
"(lambda(fail-ok?2_157 fail-ok?3_158 who4_159 who5_160)"
"(let-values(((who_161)(if who5_160 who4_159 'unexpected)))"
"(let-values(((fail-ok?_162)(if fail-ok?3_158 fail-ok?2_157 '#f)))"
"(let-values()"
"(let-values(((or-part_163)(force(current-expand-context))))"
"(if or-part_163"
" or-part_163"
" (if fail-ok?_162 '#f (raise-arguments-error who_161 '\"not currently expanding\")))))))))"
"(define-values"
"(unpack7.1)"
"(lambda(given-kws_164 given-args_165 who4_166 who5_167)"
"(let-values(((fail-ok?3_168)(pair? given-kws_164)))"
"(let-values(((fail-ok?2_169)(if fail-ok?3_168(car given-args_165)(void))))"
"(get-current-expand-context6.1 fail-ok?2_169 fail-ok?3_168 who4_166 who5_167)))))"
"(define-values"
"(get-current-expand-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_170 given-argc_171)"
"(if(if(>= given-argc_171 '2)(<= given-argc_171 '3) '#f)"
"(let-values(((l1_172) given-kws_170))"
"(let-values(((l1_173)(if(null? l1_172) l1_172(if(eq?(car l1_172) '#:fail-ok?)(cdr l1_172) l1_172))))"
"(null? l1_173)))"
" '#f))"
"(case-lambda"
"((given-kws_174 given-args_175)(unpack7.1 given-kws_174 given-args_175 '#f '#f))"
"((given-kws_176 given-args_177 who4_178)(unpack7.1 given-kws_176 given-args_177 who4_178 '#t)))"
" null"
" '(#:fail-ok?)"
"(let-values(((get-current-expand-context_179)"
"(case-lambda(()(unpack7.1 null null '#f '#f))((who4_180)(unpack7.1 null null who4_180 '#t)))))"
" get-current-expand-context_179)))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" '#f"
"(lambda(v_181)"
"(begin"
"(if(let-values(((or-part_182)(not v_181)))"
"(if or-part_182 or-part_182(if(procedure? v_181)(procedure-arity-includes? v_181 '2) '#f)))"
"(void)"
"(let-values()"
" (raise-argument-error 'current-expand-observe '\"(or/c (procedure-arity-includes/c 2) #f)\" v_181)))"
" v_181))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_183)"
"(if(if(eq? 'expression(expand-context-context ctx_183))(not(expand-context-name ctx_183)) '#f)"
"(let-values() ctx_183)"
"(let-values()"
"(let-values(((the-struct_184) ctx_183))"
"(if(expand-context? the-struct_184)"
"(let-values(((context25_185) 'expression)"
"((name26_186) '#f)"
"((use-site-scopes27_187) '#f)"
"((post-expansion-scope28_188) '#f)"
"((frame-id29_189) '#f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_184)"
" post-expansion-scope28_188"
"(root-expand-context-top-level-bind-scope the-struct_184)"
"(root-expand-context-all-scopes-stx the-struct_184)"
" use-site-scopes27_187"
"(root-expand-context-defined-syms the-struct_184)"
" frame-id29_189"
"(root-expand-context-counter the-struct_184)"
"(root-expand-context-lift-key the-struct_184)"
" context25_185"
"(expand-context-phase the-struct_184)"
"(expand-context-namespace the-struct_184)"
"(expand-context-env the-struct_184)"
"(expand-context-post-expansion-scope-action the-struct_184)"
"(expand-context-scopes the-struct_184)"
"(expand-context-def-ctx-scopes the-struct_184)"
"(expand-context-reference-records the-struct_184)"
"(expand-context-only-immediate? the-struct_184)"
"(expand-context-just-once? the-struct_184)"
"(expand-context-module-begin-k the-struct_184)"
"(expand-context-need-eventually-defined the-struct_184)"
"(expand-context-allow-unbound? the-struct_184)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_184)"
"(expand-context-stops the-struct_184)"
"(expand-context-current-introduction-scopes the-struct_184)"
"(expand-context-declared-submodule-names the-struct_184)"
"(expand-context-lifts the-struct_184)"
"(expand-context-lift-envs the-struct_184)"
"(expand-context-module-lifts the-struct_184)"
"(expand-context-require-lifts the-struct_184)"
"(expand-context-to-module-lifts the-struct_184)"
"(expand-context-requires+provides the-struct_184)"
" name26_186"
"(expand-context-observer the-struct_184)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_184)))))))"
"(define-values"
"(lifted/1.1$7)"
"(make-required 'as-tail-context(case-lambda((self_190 ctx_191)(apply missing-kw self_190 ctx_191 null))) '#f '#f))"
"(define-values"
"(as-tail-context12.1)"
"(lambda(wrt9_192 ctx11_193)"
"(let-values(((ctx_194) ctx11_193))"
"(let-values(((wrt-ctx_195) wrt9_192))"
"(let-values()"
"(if(expand-context-name wrt-ctx_195)"
"(let-values()"
"(let-values(((the-struct_196) ctx_194))"
"(if(expand-context? the-struct_196)"
"(let-values(((name30_197)(expand-context-name wrt-ctx_195)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_196)"
"(root-expand-context-post-expansion-scope the-struct_196)"
"(root-expand-context-top-level-bind-scope the-struct_196)"
"(root-expand-context-all-scopes-stx the-struct_196)"
"(root-expand-context-use-site-scopes the-struct_196)"
"(root-expand-context-defined-syms the-struct_196)"
"(root-expand-context-frame-id the-struct_196)"
"(root-expand-context-counter the-struct_196)"
"(root-expand-context-lift-key the-struct_196)"
"(expand-context-context the-struct_196)"
"(expand-context-phase the-struct_196)"
"(expand-context-namespace the-struct_196)"
"(expand-context-env the-struct_196)"
"(expand-context-post-expansion-scope-action the-struct_196)"
"(expand-context-scopes the-struct_196)"
"(expand-context-def-ctx-scopes the-struct_196)"
"(expand-context-reference-records the-struct_196)"
"(expand-context-only-immediate? the-struct_196)"
"(expand-context-just-once? the-struct_196)"
"(expand-context-module-begin-k the-struct_196)"
"(expand-context-need-eventually-defined the-struct_196)"
"(expand-context-allow-unbound? the-struct_196)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_196)"
"(expand-context-stops the-struct_196)"
"(expand-context-current-introduction-scopes the-struct_196)"
"(expand-context-declared-submodule-names the-struct_196)"
"(expand-context-lifts the-struct_196)"
"(expand-context-lift-envs the-struct_196)"
"(expand-context-module-lifts the-struct_196)"
"(expand-context-require-lifts the-struct_196)"
"(expand-context-to-module-lifts the-struct_196)"
"(expand-context-requires+provides the-struct_196)"
" name30_197"
"(expand-context-observer the-struct_196)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_196))))"
"(let-values() ctx_194)))))))"
"(define-values"
"(unpack13.1)"
"(lambda(given-kws_198 given-args_199 ctx11_200)"
"(let-values(((wrt9_201)(car given-args_199)))(as-tail-context12.1 wrt9_201 ctx11_200))))"
"(define-values"
"(as-tail-context14.1)"
"(lifted/1.1$7"
"(lambda(given-kws_202 given-argc_203)"
"(if(= given-argc_203 '3)"
"(let-values(((l2_204) given-kws_202))"
"(if(pair? l2_204)(if(eq?(car l2_204) '#:wrt)(null?(cdr l2_204)) '#f) '#f))"
" '#f))"
"(case-lambda((given-kws_205 given-args_206 ctx_207)(unpack13.1 given-kws_205 given-args_206 ctx_207)))"
" '(#:wrt)"
" '(#:wrt)))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_208 ids_209)"
"(if(if(pair? ids_209)(null?(cdr ids_209)) '#f)"
"(let-values()"
"(let-values(((the-struct_210) ctx_208))"
"(if(expand-context? the-struct_210)"
"(let-values(((name31_211)(car ids_209)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_210)"
"(root-expand-context-post-expansion-scope the-struct_210)"
"(root-expand-context-top-level-bind-scope the-struct_210)"
"(root-expand-context-all-scopes-stx the-struct_210)"
"(root-expand-context-use-site-scopes the-struct_210)"
"(root-expand-context-defined-syms the-struct_210)"
"(root-expand-context-frame-id the-struct_210)"
"(root-expand-context-counter the-struct_210)"
"(root-expand-context-lift-key the-struct_210)"
"(expand-context-context the-struct_210)"
"(expand-context-phase the-struct_210)"
"(expand-context-namespace the-struct_210)"
"(expand-context-env the-struct_210)"
"(expand-context-post-expansion-scope-action the-struct_210)"
"(expand-context-scopes the-struct_210)"
"(expand-context-def-ctx-scopes the-struct_210)"
"(expand-context-reference-records the-struct_210)"
"(expand-context-only-immediate? the-struct_210)"
"(expand-context-just-once? the-struct_210)"
"(expand-context-module-begin-k the-struct_210)"
"(expand-context-need-eventually-defined the-struct_210)"
"(expand-context-allow-unbound? the-struct_210)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_210)"
"(expand-context-stops the-struct_210)"
"(expand-context-current-introduction-scopes the-struct_210)"
"(expand-context-declared-submodule-names the-struct_210)"
"(expand-context-lifts the-struct_210)"
"(expand-context-lift-envs the-struct_210)"
"(expand-context-module-lifts the-struct_210)"
"(expand-context-require-lifts the-struct_210)"
"(expand-context-to-module-lifts the-struct_210)"
"(expand-context-requires+provides the-struct_210)"
" name31_211"
"(expand-context-observer the-struct_210)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_210))))"
"(let-values() ctx_208))))"
"(define-values"
"(make-syntax-matchers)"
"(lambda(syntax?_1 syntax-e_2 raise-syntax-error_3)"
"(letrec-values(((match-syntax5_5)"
"(lambda(error1_11 error2_12 orig-s3_13 pattern4_14)"
"(let-values(((orig-s_15) orig-s3_13))"
"(let-values(((pattern_16) pattern4_14))"
"(let-values(((raise-syntax-error_17)(if error2_12 error1_11 raise-syntax-error_3)))"
"(let-values()"
"(letrec-values(((match_18)"
"(lambda(s_20 pattern_21)"
"(if(symbol? pattern_21)"
"(let-values()"
"(begin"
" (if (regexp-match? '#rx\"^id(:|$)\" (symbol->string pattern_21))"
"(let-values()"
"(if(let-values(((or-part_22)"
"(if(syntax?_1 s_20)"
"(symbol?(syntax-e_2 s_20))"
" '#f)))"
"(if or-part_22 or-part_22(symbol? s_20)))"
"(void)"
"(let-values()"
"(raise-syntax-error_17"
" '#f"
" '\"not an identifier\""
" orig-s_15"
" s_20))))"
"(void))"
"(list(list pattern_21 s_20))))"
"(if(syntax?_1 s_20)"
"(let-values()(match_18(syntax-e_2 s_20) pattern_21))"
"(if(if(list? pattern_21)"
"(if(=(length pattern_21) '2)"
"(let-values(((or-part_23)(eq? '...(cadr pattern_21))))"
"(if or-part_23"
" or-part_23"
"(eq? '...+(cadr pattern_21))))"
" '#f)"
" '#f)"
"(let-values()"
"(let-values(((flat-s_24)(to-syntax-list_10 s_20)))"
"(if(null? flat-s_24)"
"(let-values()"
"(begin"
"(if(eq? '...+(cadr pattern_21))"
"(let-values()"
"(raise-syntax-error_17"
" '#f"
" '\"bad syntax\""
" orig-s_15))"
"(void))"
"(make-empty-vars_8 pattern_21)))"
"(if(list? flat-s_24)"
"(let-values()"
"(let-values(((a-lists_25)"
"(alt-reverse"
"(let-values(((lst_26) flat-s_24))"
"(begin"
"(if(list? lst_26)"
"(void)"
"(let-values()(in-list lst_26)))"
"((letrec-values(((for-loop_27)"
"(lambda(fold-var_28"
" lst_29)"
"(if(pair?"
" lst_29)"
"(let-values(((s_30)"
"(unsafe-car"
" lst_29)))"
"(if '#t"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32)"
" fold-var_28))"
"(let-values(((fold-var_33)"
"(let-values()"
"(cons"
"(let-values()"
"(match_18"
" s_30"
"(car"
" pattern_21)))"
" fold-var_32))))"
"(values"
" fold-var_33)))))"
"(if '#t"
"(for-loop_27"
" fold-var_31"
"(unsafe-cdr"
" lst_29))"
" fold-var_31))"
" fold-var_28))"
" fold-var_28))))"
" for-loop_27)"
" null"
" lst_26))))))"
"(apply"
" map2"
"(lambda slice_34"
"(list(caar slice_34)(map2 cadr slice_34)))"
" a-lists_25)))"
"(let-values()"
"(raise-syntax-error_17"
" '#f"
" '\"bad syntax\""
" orig-s_15))))))"
"(if(pair? pattern_21)"
"(let-values()"
"(if(pair? s_20)"
"(let-values()"
"(append"
"(match_18(car s_20)(car pattern_21))"
"(match_18(cdr s_20)(cdr pattern_21))))"
"(let-values()"
" (raise-syntax-error_17 '#f '\"bad syntax\" orig-s_15))))"
"(if(null? pattern_21)"
"(let-values()"
"(if(null? s_20)"
"(let-values() null)"
"(let-values()"
" (raise-syntax-error_17 '#f '\"bad syntax\" orig-s_15))))"
"(if(let-values(((or-part_35)(keyword? pattern_21)))"
"(if or-part_35 or-part_35(boolean? pattern_21)))"
"(let-values()"
"(if(eq? pattern_21 s_20)"
" null"
" (raise-syntax-error_17 '#f '\"bad syntax\" orig-s_15)))"
"(let-values()"
" (error '\"bad pattern:\" pattern_21)))))))))))"
"(let-values(((a-list_19)(match_18 orig-s_15 pattern_16)))"
"(lambda(sym_36)"
"(let-values(((a_37)(1/assq sym_36 a-list_19)))"
" (if a_37 (cadr a_37) (error '\"no such pattern variable:\" sym_36))))))))))))"
"((unpack6_6)"
"(lambda(given-kws_38 given-args_39 orig-s3_40 pattern4_41)"
"(let-values(((error2_42)(pair? given-kws_38)))"
"(let-values(((error1_43)(if error2_42(car given-args_39)(void))))"
"(match-syntax5_5 error1_43 error2_42 orig-s3_40 pattern4_41)))))"
"((match-syntax7_7)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_44 given-argc_45)"
"(if(= given-argc_45 '4)"
"(let-values(((l1_46) given-kws_44))"
"(let-values(((l1_47)"
"(if(null? l1_46) l1_46(if(eq?(car l1_46) '#:error)(cdr l1_46) l1_46))))"
"(null? l1_47)))"
" '#f))"
"(case-lambda"
"((given-kws_48 given-args_49 orig-s_50 pattern_51)"
"(unpack6_6 given-kws_48 given-args_49 orig-s_50 pattern_51)))"
" null"
" '(#:error)"
"(let-values(((match-syntax_52)"
"(case-lambda((orig-s_53 pattern_54)(unpack6_6 null null orig-s_53 pattern_54)))))"
" match-syntax_52)))"
"((make-empty-vars_8)"
"(lambda(pattern_55)"
"(if(symbol? pattern_55)"
"(let-values()(list(list pattern_55 null)))"
"(if(if(list? pattern_55)"
"(if(=(length pattern_55) '2)"
"(let-values(((or-part_56)(eq? '...(cadr pattern_55))))"
"(if or-part_56 or-part_56(eq? '...+(cadr pattern_55))))"
" '#f)"
" '#f)"
"(let-values()"
"(map2"
"(lambda(m_57)(cons(car m_57)(list(cadr m_57))))"
"(make-empty-vars_8(car pattern_55))))"
"(if(pair? pattern_55)"
"(let-values()"
"(append(make-empty-vars_8(car pattern_55))(make-empty-vars_8(cdr pattern_55))))"
"(let-values() null))))))"
"((try-match-syntax_9)"
"(lambda(orig-s_58 pattern_59)"
"(call/ec"
"(lambda(esc_60)"
"(let-values(((...ommon/make-match.rkt:85:6_61) match-syntax7_7)"
"((orig-s8_62) orig-s_58)"
"((pattern9_63) pattern_59)"
"((temp10_64)(lambda args_65(esc_60 '#f))))"
"(if(variable-reference-constant?(#%variable-reference match-syntax7_7))"
"(match-syntax5_5 temp10_64 '#t orig-s8_62 pattern9_63)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ommon/make-match.rkt:85:6_61"
" keyword-procedure-extract"
" '(#:error)"
" '4)"
" '(#:error)"
"(list temp10_64)"
" orig-s8_62"
" pattern9_63)))))))"
"((to-syntax-list_10)"
"(lambda(s_66)"
"(if(pair? s_66)"
"(let-values()(cons(car s_66)(to-syntax-list_10(cdr s_66))))"
"(if(syntax?_1 s_66)"
"(let-values()(to-syntax-list_10(syntax-e_2 s_66)))"
"(let-values() s_66))))))"
"(values match-syntax7_7 try-match-syntax_9))))"
"(define-values(match-syntax try-match-syntax)(make-syntax-matchers syntax?$1 syntax-e$1 1/raise-syntax-error))"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core '#f))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_1 proc_2)(begin(add-core-binding! sym_1)(set! core-forms(hash-set core-forms sym_1 proc_2)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_3 val_4)"
"(begin(add-core-binding! sym_3)(set! core-primitives(hash-set core-primitives sym_3 val_4)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_5)"
"(let-values(((temp1_6)(datum->syntax$2 core-stx sym_5))"
"((temp2_7)"
"(let-values(((core-mpi4_9) core-mpi)((temp5_10) '0)((sym6_11) sym_5))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" core-mpi4_9"
" temp5_10"
" sym6_11)"
"(make-module-binding22.1 core-mpi4_9 temp5_10 sym6_11))))"
"((temp3_8) '0))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 '#f '#f temp1_6 temp2_7 temp3_8)"
"(add-binding!17.1 temp1_6 temp2_7 temp3_8)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_12)"
"(let-values(((ns7_13) ns_12)"
"((temp8_14)"
"(let-values(((...r/namespace/core.rkt:58:3_16) make-module30.1)"
"((temp10_17) '#t)"
"((temp11_18) '#t)"
"((core-mpi12_19) core-mpi)"
"((temp13_20)"
"(hasheqv"
" '0"
"(let-values(((pos->vals_22 pos-next_23 init_24 pos-cont?_25 val-cont?_26 all-cont?_27)"
"(make-sequence"
" '(sym)"
"(in-sequences"
"(default-in-hash-keys core-primitives)"
"(default-in-hash-keys core-forms)))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_28)"
"(lambda(table_29 pos_30)"
"(if(if pos-cont?_25(pos-cont?_25 pos_30) '#t)"
"(let-values(((sym_31)(pos->vals_22 pos_30)))"
"(if(if val-cont?_26(val-cont?_26 sym_31) '#t)"
"(let-values(((table_32)"
"(let-values(((table_33) table_29))"
"(let-values(((table_34)"
"(let-values()"
"(let-values(((key_35"
" val_36)"
"(let-values()"
"(values"
" sym_31"
"(let-values(((core-mpi15_37)"
" core-mpi)"
"((temp16_38)"
" '0)"
"((sym17_39)"
" sym_31))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" core-mpi15_37"
" temp16_38"
" sym17_39)"
"(make-module-binding22.1"
" core-mpi15_37"
" temp16_38"
" sym17_39)))))))"
"(hash-set"
" table_33"
" key_35"
" val_36)))))"
"(values table_34)))))"
"(if(if all-cont?_27(all-cont?_27 pos_30 sym_31) '#t)"
"(for-loop_28 table_32(pos-next_23 pos_30))"
" table_32))"
" table_29))"
" table_29))))"
" for-loop_28)"
" '#hasheq()"
" init_24)))))"
"((temp14_21)"
"(lambda(data-box_40"
" ns_41"
" phase_42"
" phase-level_43"
" self_44"
" bulk-binding-registry_45"
" insp_46)"
"(let-values(((tmp_47) phase-level_43))"
"(if(equal? tmp_47 '0)"
"(let-values()"
"(begin"
"(let-values(((ht_48) core-primitives))"
"(begin"
"(if((lambda(ht_49)(hash? ht_49)) ht_48)"
"(void)"
"(let-values()(default-in-hash ht_48)))"
"((letrec-values(((for-loop_50)"
"(lambda(fold-var_51 i_52)"
"(if i_52"
"(let-values(((sym_53 val_54)"
"(hash-iterate-key+value ht_48 i_52)))"
"(if '#t"
"(let-values(((fold-var_55)"
"(let-values(((fold-var_56)"
" fold-var_51))"
"(let-values(((fold-var_57)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_41"
" '0"
" sym_53"
" val_54))"
"(void)))))"
"(values fold-var_57)))))"
"(if '#t"
"(for-loop_50"
" fold-var_55"
"(hash-iterate-next ht_48 i_52))"
" fold-var_55))"
" fold-var_51))"
" fold-var_51))))"
" for-loop_50)"
"(void)"
"(hash-iterate-first ht_48))))"
"(let-values(((ht_58) core-forms))"
"(begin"
"(if((lambda(ht_59)(hash? ht_59)) ht_58)"
"(void)"
"(let-values()(default-in-hash ht_58)))"
"((letrec-values(((for-loop_60)"
"(lambda(fold-var_61 i_62)"
"(if i_62"
"(let-values(((sym_63 proc_64)"
"(hash-iterate-key+value ht_58 i_62)))"
"(if '#t"
"(let-values(((fold-var_65)"
"(let-values(((fold-var_66)"
" fold-var_61))"
"(let-values(((fold-var_67)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_41"
" '0"
" sym_63"
"(core-form9.1"
" proc_64"
" sym_63)))"
"(void)))))"
"(values fold-var_67)))))"
"(if '#t"
"(for-loop_60"
" fold-var_65"
"(hash-iterate-next ht_58 i_62))"
" fold-var_65))"
" fold-var_61))"
" fold-var_61))))"
" for-loop_60)"
"(void)"
"(hash-iterate-first ht_58))))))"
"(let-values()(void)))))))"
"(if(variable-reference-constant?(#%variable-reference make-module30.1))"
"(make-module28.1"
" temp10_17"
" '#t"
" temp14_21"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp11_18"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" temp13_20"
" '#f"
" '#f"
" core-mpi12_19"
" '#f"
" '#f"
" '#f"
" '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/namespace/core.rkt:58:3_16"
" keyword-procedure-extract"
" '(#:cross-phase-persistent? #:instantiate-phase-callback #:no-protected? #:provides #:self)"
" '2)"
" '(#:cross-phase-persistent? #:instantiate-phase-callback #:no-protected? #:provides #:self)"
"(list temp10_17 temp14_21 temp11_18 temp13_20 core-mpi12_19)))))"
"((core-module-name9_15) core-module-name))"
"(if(variable-reference-constant?(#%variable-reference declare-module!49.1))"
"(declare-module!47.1 '#f '#f ns7_13 temp8_14 core-module-name9_15)"
"(declare-module!49.1 ns7_13 temp8_14 core-module-name9_15)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_68 phase_69)"
"(let-values(((m_70)(try-match-syntax s_68 '(id . _))))"
"(if m_70"
"(let-values(((b_71)"
"(let-values(((temp18_72)(m_70 'id))((phase19_73) phase_69))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f temp18_72 phase19_73)"
"(resolve+shift15.1 temp18_72 phase19_73)))))"
"(if(module-binding? b_71)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_71)))"
"(module-binding-sym b_71)"
" '#f)"
" '#f))"
" '#f))))"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values(((tmp_7) mode_6))"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(syntax-map"
"(let-values(((or-part_9)(syntax->list$1 s_5)))"
"(if or-part_9 or-part_9(syntax-e$1 s_5)))"
"(lambda(tail?_10 d_11) d_11)"
"(lambda(s_12 d_13)(loop_4 s_12(syntax-taint-mode-property s_12)))"
" '#f)))"
"(datum->syntax$2"
" '#f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_14)(syntax-e$1 s_5)))"
"(if(pair? c_14)"
"(let-values()"
"(let-values(((cd_15)"
"(if(syntax?$1(cdr c_14))(syntax-e$1(cdr c_14))(cdr c_14))))"
"(if(let-values(((or-part_16)(pair? cd_15)))"
"(if or-part_16"
" or-part_16"
"(if(syntax?$1 cd_15)(pair?(syntax-e$1 cd_15)) '#f)))"
"(let-values()"
"(let-values(((d_17)(if(syntax?$1 cd_15)(syntax-e$1 cd_15) cd_15)))"
"(datum->syntax$2"
" s_5"
"(cons"
"(loop_4(car c_14)(syntax-taint-mode-property s_5))"
"(cons"
"(loop_4(car d_17) 'transparent)"
"(syntax-map"
"(syntax->list$1(cdr d_17))"
"(lambda(tail?_18 d_19) d_19)"
"(lambda(s_20 d_21)(loop_4 s_20(syntax-taint-mode-property s_20)))"
" '#f)))"
" s_5"
" s_5)))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_22)(syntax-e$1 s_5)))"
"(let-values(((tmp_23)(core-form-sym c_22 phase_3)))"
"(if(if(equal? tmp_23 'begin)"
" '#t"
"(if(equal? tmp_23 'begin-for-syntax)"
" '#t"
"(if(equal? tmp_23 'module) '#t(equal? tmp_23 '#%module-begin))))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_23 'define-values) '#t(equal? tmp_23 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_24)"
"(let-values(((or-part_25)(syntax-property$1 s_24 'taint-mode)))"
"(if or-part_25 or-part_25(syntax-property$1 s_24 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_26)(syntax-property-remove(syntax-property-remove s_26 'taint-mode) 'certify-mode)))"
"(define-values(current-module-code-inspector)(make-parameter '#f))"
"(define-values(lifted/1.1)(void))"
"(define-values(lifted/2.1$7)(void))"
"(define-values(lifted/3.1)(void))"
"(define-values(lifted/4.1$1)(void))"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(alt-reverse"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((smss_10)(unsafe-car lst_9)))"
"(if '#t"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_14)"
"(if(identifier? s_1)"
"(hasheq"
" 'name"
"(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_15)"
"(scope-set-at-fallback"
" s_1"
" smss_10"
" phase_2)))"
"(let-values(((context_16)"
"(scope-set->context"
" s-scs_15)))"
"(let-values(((context-ht_17)"
"(hash-set"
" init-ht_14"
" 'context"
" context_16)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_1)))"
"(let-values(((bindings_19)"
"(if(identifier?"
" s_1)"
"(let-values()"
"(alt-reverse"
"(let-values(((ht_20)"
" s-scs_15))"
"(begin"
"(if((lambda(ht_21)"
"(hash?"
" ht_21))"
" ht_20)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23"
" i_24)"
"(if i_24"
"(let-values(((sc_25)"
"(hash-iterate-key"
" ht_20"
" i_24)))"
"(if '#t"
"(let-values(((fold-var_26)"
"(let-values(((bindings_27)"
"(let-values(((bindings_28)"
"(let-values(((or-part_29)"
"(hash-ref"
"(scope-bindings"
" sc_25)"
" sym_18"
" '#f)))"
"(if or-part_29"
" or-part_29"
" '#hash()))))"
"(let-values(((lst_30)"
"(scope-bulk-bindings"
" sc_25)))"
"(begin"
"(if(list?"
" lst_30)"
"(void)"
"(let-values()"
"(in-list"
" lst_30)))"
"((letrec-values(((for-loop_31)"
"(lambda(bindings_32"
" lst_33)"
"(if(pair?"
" lst_33)"
"(let-values(((bulk-at_34)"
"(unsafe-car"
" lst_33)))"
"(if '#t"
"(let-values(((bindings_35)"
"(let-values(((bulk_36)"
"(bulk-binding-at-bulk"
" bulk-at_34)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_37)"
"(lambda(bindings_38)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((bindings_39)"
"(let-values(((syms_40)"
"(bulk-binding-symbols"
" bulk_36"
" s_1"
" null)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_41)"
"(lambda(bindings_42)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((bindings_43)"
"(let-values(((b-info_44)"
"(hash-ref"
" syms_40"
" sym_18"
" '#f)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_45)"
"(lambda(bindings_46)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((bindings_47)"
"(let-values(((bindings_48)"
" bindings_46))"
"(if(if b-info_44"
"(not"
"(hash-ref"
" bindings_48"
"(bulk-binding-at-scopes"
" bulk-at_34)"
" '#f))"
" '#f)"
"(let-values(((bindings_49)"
" bindings_48))"
"(let-values(((bindings_50)"
"(let-values()"
"(hash-set"
" bindings_49"
"(bulk-binding-at-scopes"
" bulk-at_34)"
"((bulk-binding-create"
" bulk_36)"
" bulk_36"
" b-info_44"
" sym_18)))))"
"(values"
" bindings_50)))"
" bindings_48))))"
"(if '#f"
"(for-loop_45"
" bindings_47)"
" bindings_47))"
" bindings_46))"
" bindings_46))))"
" for-loop_45)"
" bindings_42)))))"
"(if '#f"
"(for-loop_41"
" bindings_43)"
" bindings_43))"
" bindings_42))"
" bindings_42))))"
" for-loop_41)"
" bindings_38)))))"
"(if '#f"
"(for-loop_37"
" bindings_39)"
" bindings_39))"
" bindings_38))"
" bindings_38))))"
" for-loop_37)"
" bindings_32)))))"
"(if '#t"
"(for-loop_31"
" bindings_35"
"(unsafe-cdr"
" lst_33))"
" bindings_35))"
" bindings_32))"
" bindings_32))))"
" for-loop_31)"
" bindings_28"
" lst_30))))))"
"(begin"
" '#t"
"((letrec-values(((for-loop_51)"
"(lambda(fold-var_52)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((fold-var_53)"
"(let-values(((ht_54)"
" bindings_27))"
"(begin"
"(if((lambda(ht_55)"
"(hash?"
" ht_55))"
" ht_54)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_54)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57"
" i_58)"
"(if i_58"
"(let-values(((scs_59"
" b_60)"
"(hash-iterate-key+value"
" ht_54"
" i_58)))"
"(if '#t"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62)"
" fold-var_57))"
"(if(let-values(((or-part_63)"
" all-bindings?_3))"
"(if or-part_63"
" or-part_63"
"(subset?$1"
" scs_59"
" s-scs_15)))"
"(let-values(((fold-var_64)"
" fold-var_62))"
"(let-values(((fold-var_65)"
"(let-values()"
"(cons"
"(let-values()"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_59)"
" 'match?"
"(subset?$1"
" scs_59"
" s-scs_15)"
"(if(local-binding?"
" b_60)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_60)"
"(local-binding-key"
" b_60)"
"(vector"
"(module-binding-sym"
" b_60)"
"(module-binding-module"
" b_60)"
"(module-binding-phase"
" b_60)))))"
" fold-var_64))))"
"(values"
" fold-var_65)))"
" fold-var_62))))"
"(if '#t"
"(for-loop_56"
" fold-var_61"
"(hash-iterate-next"
" ht_54"
" i_58))"
" fold-var_61))"
" fold-var_57))"
" fold-var_57))))"
" for-loop_56)"
" fold-var_52"
"(hash-iterate-first"
" ht_54))))))"
"(if '#f"
"(for-loop_51"
" fold-var_53)"
" fold-var_53))"
" fold-var_52))"
" fold-var_52))))"
" for-loop_51)"
" fold-var_23)))))"
"(if '#t"
"(for-loop_22"
" fold-var_26"
"(hash-iterate-next"
" ht_20"
" i_24))"
" fold-var_26))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(hash-iterate-first"
" ht_20))))))"
"(let-values()"
" null))))"
"(if(null? bindings_19)"
" context-ht_17"
"(hash-set"
" context-ht_17"
" 'bindings"
" bindings_19)))))))))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(if '#t(for-loop_7 fold-var_11(unsafe-cdr lst_9)) fold-var_11))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_66)"
"(let-values(((...der/syntax/debug.rkt:66:2_67) sort9.1)"
"((temp1_68)"
"(alt-reverse"
"(let-values(((ht_71) scs_66))"
"(begin"
"(if((lambda(ht_72)(hash? ht_72)) ht_71)(void)(let-values()(default-in-hash-keys ht_71)))"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_74 i_75)"
"(if i_75"
"(let-values(((sc_76)(hash-iterate-key ht_71 i_75)))"
"(if '#t"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78) fold-var_74))"
"(let-values(((fold-var_79)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_76)"
"(vector"
"(scope-id sc_76)"
"(scope-kind sc_76)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_76)))"
"(vector"
"(scope-id sc_76)"
"(scope-kind sc_76))))"
" fold-var_78))))"
"(values fold-var_79)))))"
"(if '#t"
"(for-loop_73 fold-var_77(hash-iterate-next ht_71 i_75))"
" fold-var_77))"
" fold-var_74))"
" fold-var_74))))"
" for-loop_73)"
" null"
"(hash-iterate-first ht_71))))))"
"((<2_69) <)"
"((temp3_70)(lambda(v_80)(vector-ref v_80 '0))))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 '#f '#f temp3_70 '#t temp1_68 <2_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/syntax/debug.rkt:66:2_67"
" keyword-procedure-extract"
" '(#:key)"
" '4)"
" '(#:key)"
"(list temp3_70)"
" temp1_68"
" <2_69)))))"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"(1/raise-syntax-error"
" '#f"
" '\"identifier's binding is ambiguous\""
" id_1"
" '#f"
" null"
"(syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) '#t)))"
"((letrec-values(((loop_6)"
"(lambda(info_7 layer_8)"
"(string-append"
" '\"\\n context \""
"(layer->string layer_8)"
" '\"...:\""
"(describe-context(hash-ref info_7 'context))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_9 pos-next_10 init_11 pos-cont?_12 val-cont?_13 all-cont?_14)"
"(make-sequence '(b)(hash-ref info_7 'bindings null))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_15)"
"(lambda(fold-var_16 pos_17)"
"(if(if pos-cont?_12(pos-cont?_12 pos_17) '#t)"
"(let-values(((b_18)(pos->vals_9 pos_17)))"
"(if(if val-cont?_13(val-cont?_13 b_18) '#t)"
"(let-values(((fold-var_19)"
"(let-values(((fold-var_20) fold-var_16))"
"(let-values(((fold-var_21)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
" '\"\\n \""
"(if(hash-ref"
" b_18"
" 'match?"
" '#f)"
" '\"matching\""
" '\"other\")"
" '\" binding\""
"(layer->string layer_8)"
" '\"...:\""
" '\"\\n \""
"(if(hash-ref"
" b_18"
" 'local"
" '#f)"
" '\"local\""
"(format"
" '\"~a\""
"(hash-ref"
" b_18"
" 'module"
" '#f)))"
"(describe-context"
"(hash-ref"
" b_18"
" 'context))))"
" fold-var_20))))"
"(values fold-var_21)))))"
"(if(if all-cont?_14(all-cont?_14 pos_17 b_18) '#t)"
"(for-loop_15 fold-var_19(pos-next_10 pos_17))"
" fold-var_19))"
" fold-var_16))"
" fold-var_16))))"
" for-loop_15)"
" null"
" init_11)))))"
"(let-values(((fallbacks_22)(hash-ref info_7 'fallbacks null)))"
"(apply"
" string-append"
"(let-values(((lst_23) fallbacks_22)((start_24) layer_8))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(exact-nonnegative-integer? start_24)"
"(void)"
"(let-values()(in-naturals start_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(str_26 lst_27 pos_28)"
"(if(if(pair? lst_27) '#t '#f)"
"(let-values(((fallback_29)(unsafe-car lst_27))"
"((layer_30) pos_28))"
"(if(if '#t '#t '#f)"
"(let-values(((str_31)"
"(let-values(((str_32) str_26))"
"(let-values(((str_33)"
"(let-values()"
"(loop_6"
" fallback_29"
" layer_30))))"
"(values str_33)))))"
"(if(if '#t '#t '#f)"
"(for-loop_25 str_31(unsafe-cdr lst_27)(+ pos_28 '1))"
" str_31))"
" str_26))"
" str_26))))"
" for-loop_25)"
" null"
" lst_23"
" start_24)))))))))"
" loop_6)"
" info_5"
" '0))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_34)"
"(let-values(((strs_35)"
"((letrec-values(((loop_36)"
"(lambda(strs_37 scopes_38)"
"(if(null? scopes_38)"
"(let-values()(alt-reverse strs_37))"
"(let-values()"
" (let-values (((str_39) (format '\" ~a\" (car scopes_38))))"
"(if(if(pair? strs_37)"
"(<(+(string-length str_39)(string-length(car strs_37))) '72)"
" '#f)"
"(loop_36"
"(cons(string-append(car strs_37) str_39)(cdr strs_37))"
"(cdr scopes_38))"
"(loop_36(cons str_39 strs_37)(cdr scopes_38)))))))))"
" loop_36)"
" null"
" scopes_34)))"
"(if(null? strs_35)"
" (let-values () '\"\\n [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_40) strs_35))"
"(begin"
"(if(list? lst_40)(void)(let-values()(in-list lst_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_42 lst_43)"
"(if(pair? lst_43)"
"(let-values(((str_44)(unsafe-car lst_43)))"
"(if '#t"
"(let-values(((fold-var_45)"
"(let-values(((fold-var_46) fold-var_42))"
"(let-values(((fold-var_47)"
"(let-values()"
"(cons"
"(let-values()"
" (string-append '\"\\n \" str_44))"
" fold-var_46))))"
"(values fold-var_47)))))"
"(if '#t(for-loop_41 fold-var_45(unsafe-cdr lst_43)) fold-var_45))"
" fold-var_42))"
" fold-var_42))))"
" for-loop_41)"
" null"
" lst_40))))))))))"
" (define-values (layer->string) (lambda (layer_48) (if (zero? layer_48) '\"\" (format '\" at layer ~a\" layer_48))))"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values(((tmp_8) sym_2))"
"(if(equal? tmp_8 '#%app)"
" (let-values () '\"function application\")"
"(if(equal? tmp_8 '#%datum)"
" (let-values () '\"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
" '\"reference to a top-level identifier\""
" '\"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not"
"(let-values(((trigger-id1_9) trigger-id_3)((phase2_10) phase_5))"
"(if(variable-reference-constant?(#%variable-reference resolve23.1))"
"(resolve21.1 '#f '#f '#f '#f '#f '#f trigger-id1_9 phase2_10)"
"(resolve23.1 trigger-id1_9 phase2_10))))"
" '#f)))"
"(1/raise-syntax-error"
" '#f"
"(format"
"(if unbound?_7"
" '\"unbound identifier;\\n also, no ~a transformer is bound~a\"\n"
" (string-append what_6 '\" is not allowed;\\n no ~a syntax transformer is bound~a\"))\n"
" sym_2"
"(let-values(((tmp_11) phase_5))"
"(if(equal? tmp_11 '0)"
" (let-values () '\"\")"
"(if(equal? tmp_11 '1)"
" (let-values () '\" in the transformer phase\")"
" (let-values () (format '\" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 '#f)"
"(if(not unbound?_7) s_1 '#f)"
" null"
" (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) '\"\")))))))"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values(((ids_8) ids5_3))"
"(let-values(((phase_9) phase6_4))"
"(let-values(((s_10) s7_5))"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
" (let-values (((what_12) (if what2_2 what1_1 '\"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values(((lst_17) l_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20)))"
"(if '#t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_19))"
"(let-values(((fold-var_24)"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_14"
" phase_9)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
"(string-append"
" '\"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(void)))))"
"(values fold-var_24)))))"
"(if '#t"
"(for-loop_18"
" fold-var_22"
"(unsafe-cdr lst_20))"
" fold-var_22))"
" fold-var_19))"
" fold-var_19))))"
" for-loop_18)"
"(void)"
" lst_17)))"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(define-values"
"(unpack9.1$2)"
"(lambda(given-kws_25 given-args_26 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)"
"(let-values(((what2_32)(pair? given-kws_25)))"
"(let-values(((what1_33)(if what2_32(car given-args_26)(void))))"
"(check-no-duplicate-ids8.1 what1_33 what2_32 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)))))"
"(define-values"
"(check-no-duplicate-ids10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_34 given-argc_35)"
"(if(if(>= given-argc_35 '5)(<= given-argc_35 '6) '#f)"
"(let-values(((l1_36) given-kws_34))"
"(let-values(((l1_37)(if(null? l1_36) l1_36(if(eq?(car l1_36) '#:what)(cdr l1_36) l1_36))))"
"(null? l1_37)))"
" '#f))"
"(case-lambda"
"((given-kws_38 given-args_39 ids_40 phase_41 s_42)"
"(unpack9.1$2 given-kws_38 given-args_39 ids_40 phase_41 s_42 '#f '#f))"
"((given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48)"
"(unpack9.1$2 given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48 '#t)))"
" null"
" '(#:what)"
"(let-values(((check-no-duplicate-ids_49)"
"(case-lambda"
"((ids_50 phase_51 s_52)(unpack9.1$2 null null ids_50 phase_51 s_52 '#f '#f))"
"((ids_53 phase_54 s_55 ht3_56)(unpack9.1$2 null null ids_53 phase_54 s_55 ht3_56 '#t)))))"
" check-no-duplicate-ids_49)))"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) '#f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(alt-reverse"
"(let-values(((lst_4) s_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(if '#t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if '#t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_1))))"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'compile-context"
" '#f"
" '7"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 3 4 5 6)"
" '#f"
" 'compile-context)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'namespace)"
"(make-struct-field-accessor -ref_4 '1 'phase)"
"(make-struct-field-accessor -ref_4 '2 'self)"
"(make-struct-field-accessor -ref_4 '3 'module-self)"
"(make-struct-field-accessor -ref_4 '4 'full-module-name)"
"(make-struct-field-accessor -ref_4 '5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 '6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_52"
" full-module-name12_53"
" lazy-syntax-literals?7_54"
" lazy-syntax-literals?13_55"
" module-self5_56"
" module-self11_57"
" namespace2_58"
" namespace8_59"
" phase3_60"
" phase9_61"
" self4_62"
" self10_63)"
"(let-values(((namespace_64)(if namespace8_59 namespace2_58(1/current-namespace))))"
"(let-values(((phase_65)(if phase9_61 phase3_60(namespace-phase namespace_64))))"
"(let-values(((self_66)(if self10_63 self4_62(namespace-mpi namespace_64))))"
"(let-values(((module-self_67)(if module-self11_57 module-self5_56 '#f)))"
"(let-values(((full-module-name_68)(if full-module-name12_53 full-module-name6_52 '#f)))"
"(let-values(((lazy-syntax-literals?_69)"
"(if lazy-syntax-literals?13_55 lazy-syntax-literals?7_54(if module-self_67 '#t '#f))))"
"(let-values()"
"(begin"
"(if(if module-self_67(not full-module-name_68) '#f)"
" (let-values () (error '\"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_64"
" phase_65"
" self_66"
" module-self_67"
" full-module-name_68"
" lazy-syntax-literals?_69"
" '#f)))))))))))"
"(define-values"
"(unpack15.1$2)"
"(lambda(given-kws_70 given-args_71)"
"(let-values(((full-module-name12_72)(if(pair? given-kws_70)(eq? '#:full-module-name(car given-kws_70)) '#f)))"
"(let-values(((full-module-name6_73)(if full-module-name12_72(car given-args_71)(void)))"
"((given-kws_74)(if full-module-name12_72(cdr given-kws_70) given-kws_70))"
"((given-args_75)(if full-module-name12_72(cdr given-args_71) given-args_71)))"
"(let-values(((lazy-syntax-literals?13_76)"
"(if(pair? given-kws_74)(eq? '#:lazy-syntax-literals?(car given-kws_74)) '#f)))"
"(let-values(((lazy-syntax-literals?7_77)(if lazy-syntax-literals?13_76(car given-args_75)(void)))"
"((given-kws_78)(if lazy-syntax-literals?13_76(cdr given-kws_74) given-kws_74))"
"((given-args_79)(if lazy-syntax-literals?13_76(cdr given-args_75) given-args_75)))"
"(let-values(((module-self11_80)(if(pair? given-kws_78)(eq? '#:module-self(car given-kws_78)) '#f)))"
"(let-values(((module-self5_81)(if module-self11_80(car given-args_79)(void)))"
"((given-kws_82)(if module-self11_80(cdr given-kws_78) given-kws_78))"
"((given-args_83)(if module-self11_80(cdr given-args_79) given-args_79)))"
"(let-values(((namespace8_84)(if(pair? given-kws_82)(eq? '#:namespace(car given-kws_82)) '#f)))"
"(let-values(((namespace2_85)(if namespace8_84(car given-args_83)(void)))"
"((given-kws_86)(if namespace8_84(cdr given-kws_82) given-kws_82))"
"((given-args_87)(if namespace8_84(cdr given-args_83) given-args_83)))"
"(let-values(((phase9_88)(if(pair? given-kws_86)(eq? '#:phase(car given-kws_86)) '#f)))"
"(let-values(((phase3_89)(if phase9_88(car given-args_87)(void)))"
"((given-kws_90)(if phase9_88(cdr given-kws_86) given-kws_86))"
"((given-args_91)(if phase9_88(cdr given-args_87) given-args_87)))"
"(let-values(((self10_92)(pair? given-kws_90)))"
"(let-values(((self4_93)(if self10_92(car given-args_91)(void))))"
"(make-compile-context14.1"
" full-module-name6_73"
" full-module-name12_72"
" lazy-syntax-literals?7_77"
" lazy-syntax-literals?13_76"
" module-self5_81"
" module-self11_80"
" namespace2_85"
" namespace8_84"
" phase3_89"
" phase9_88"
" self4_93"
" self10_92)))))))))))))))"
"(define-values"
"(make-compile-context16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_94 given-argc_95)"
"(if(= given-argc_95 '2)"
"(let-values(((l1_96) given-kws_94))"
"(let-values(((l1_97)(if(null? l1_96) l1_96(if(eq?(car l1_96) '#:full-module-name)(cdr l1_96) l1_96))))"
"(let-values(((l1_98) l1_97))"
"(let-values(((l1_99)"
"(if(null? l1_98) l1_98(if(eq?(car l1_98) '#:lazy-syntax-literals?)(cdr l1_98) l1_98))))"
"(let-values(((l1_100) l1_99))"
"(let-values(((l1_101)"
"(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:module-self)(cdr l1_100) l1_100))))"
"(let-values(((l1_102) l1_101))"
"(let-values(((l1_103)"
"(if(null? l1_102) l1_102(if(eq?(car l1_102) '#:namespace)(cdr l1_102) l1_102))))"
"(let-values(((l1_104) l1_103))"
"(let-values(((l1_105)"
"(if(null? l1_104) l1_104(if(eq?(car l1_104) '#:phase)(cdr l1_104) l1_104))))"
"(let-values(((l1_106) l1_105))"
"(let-values(((l1_107)"
"(if(null? l1_106)"
" l1_106"
"(if(eq?(car l1_106) '#:self)(cdr l1_106) l1_106))))"
"(null? l1_107)))))))))))))"
" '#f))"
"(case-lambda((given-kws_108 given-args_109)(unpack15.1$2 given-kws_108 given-args_109)))"
" null"
" '(#:full-module-name #:lazy-syntax-literals? #:module-self #:namespace #:phase #:self)"
"(let-values(((make-compile-context_110)(case-lambda(()(unpack15.1$2 null null))))) make-compile-context_110)))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values(make-module-path-index-table)(lambda()(make-hasheq)))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_1 mpi_2)"
"(if(not mpi_2)"
"(let-values() '#f)"
"(if mpi_2"
"(let-values()"
"(let-values(((pos_3)"
"(let-values(((or-part_4)(hash-ref mpis_1 mpi_2 '#f)))"
"(if or-part_4"
" or-part_4"
"(let-values(((pos_5)(hash-count mpis_1)))"
"(begin(hash-set! mpis_1 mpi_2 pos_5) pos_5))))))"
"(list 'vector-ref mpi-vector-id pos_3)))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_6)"
"(let-values(((gen-order_7)(make-hasheqv)))"
"(let-values(((rev-mpis_8)"
"(let-values(((ht_12) mpis_6))"
"(begin"
"(if((lambda(ht_13)(hash? ht_13)) ht_12)(void)(let-values()(default-in-hash ht_12)))"
"((letrec-values(((for-loop_14)"
"(lambda(table_15 i_16)"
"(if i_16"
"(let-values(((k_17 v_18)(hash-iterate-key+value ht_12 i_16)))"
"(if '#t"
"(let-values(((table_19)"
"(let-values(((table_20) table_15))"
"(let-values(((table_21)"
"(let-values()"
"(let-values(((key_22 val_23)"
"(let-values()"
"(values v_18 k_17))))"
"(hash-set"
" table_20"
" key_22"
" val_23)))))"
"(values table_21)))))"
"(if '#t"
"(for-loop_14 table_19(hash-iterate-next ht_12 i_16))"
" table_19))"
" table_15))"
" table_15))))"
" for-loop_14)"
" '#hasheqv()"
"(hash-iterate-first ht_12))))))"
"(let-values((()"
"(begin"
"(let-values(((start_24) '0)((end_25)(hash-count rev-mpis_8))((inc_26) '1))"
"(begin"
"(if(if(real? start_24)(if(real? end_25)(real? inc_26) '#f) '#f)"
"(void)"
"(let-values()(in-range start_24 end_25 inc_26)))"
"((letrec-values(((for-loop_27)"
"(lambda(fold-var_28 pos_29)"
"(if(< pos_29 end_25)"
"(let-values(((i_30) pos_29))"
"(if '#t"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32) fold-var_28))"
"(let-values(((fold-var_33)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_34)"
"(hash-ref"
" rev-mpis_8"
" i_30)))"
"((letrec-values(((loop_35)"
"(lambda(mpi_36)"
"(if(hash-ref"
" gen-order_7"
" mpi_36"
" '#f)"
"(void)"
"(let-values()"
"(let-values(((name_37"
" base_38)"
"(1/module-path-index-split"
" mpi_36)))"
"(begin"
"(if base_38"
"(let-values()"
"(loop_35"
" base_38))"
"(void))"
"(hash-set!"
" gen-order_7"
" mpi_36"
"(hash-count"
" gen-order_7)))))))))"
" loop_35)"
" mpi_34)))"
"(void)))))"
"(values fold-var_33)))))"
"(if '#t"
"(for-loop_27 fold-var_31(+ pos_29 inc_26))"
" fold-var_31))"
" fold-var_28))"
" fold-var_28))))"
" for-loop_27)"
"(void)"
" start_24)))"
"(values))))"
" (let-values (((mpi-id_9) (lambda (i_39) (string->symbol (format '\"mpi~a\" i_39)))))"
"(let-values(((rev-gen-order_10)"
"(let-values(((ht_40) gen-order_7))"
"(begin"
"(if((lambda(ht_41)(hash? ht_41)) ht_40)(void)(let-values()(default-in-hash ht_40)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43 i_44)"
"(if i_44"
"(let-values(((k_45 v_46)(hash-iterate-key+value ht_40 i_44)))"
"(if '#t"
"(let-values(((table_47)"
"(let-values(((table_48) table_43))"
"(let-values(((table_49)"
"(let-values()"
"(let-values(((key_50 val_51)"
"(let-values()"
"(values"
" v_46"
" k_45))))"
"(hash-set"
" table_48"
" key_50"
" val_51)))))"
"(values table_49)))))"
"(if '#t"
"(for-loop_42 table_47(hash-iterate-next ht_40 i_44))"
" table_47))"
" table_43))"
" table_43))))"
" for-loop_42)"
" '#hasheqv()"
"(hash-iterate-first ht_40))))))"
"(let-values(((gens_11)"
"(alt-reverse"
"(let-values(((start_52) '0)((end_53)(hash-count gen-order_7))((inc_54) '1))"
"(begin"
"(if(if(real? start_52)(if(real? end_53)(real? inc_54) '#f) '#f)"
"(void)"
"(let-values()(in-range start_52 end_53 inc_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(fold-var_56 pos_57)"
"(if(< pos_57 end_53)"
"(let-values(((i_58) pos_57))"
"(if '#t"
"(let-values(((fold-var_59)"
"(let-values(((fold-var_60) fold-var_56))"
"(let-values(((fold-var_61)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((mpi_62)"
"(hash-ref"
" rev-gen-order_10"
" i_58)))"
"(let-values(((path_63"
" base_64)"
"(1/module-path-index-split"
" mpi_62)))"
"(list"
"(list"
"(mpi-id_9 i_58))"
"(if(top-level-module-path-index?"
" mpi_62)"
"(let-values()"
" '(deserialize-module-path-index))"
"(if(not path_63)"
"(let-values()"
"(list"
" 'deserialize-module-path-index"
"(list"
" 'quote"
"(let-values(((or-part_65)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_62))))"
"(if or-part_65"
" or-part_65"
" 'self)))))"
"(let-values()"
"(list"
" 'deserialize-module-path-index"
"(list"
" 'quote"
" path_63)"
"(if base_64"
"(mpi-id_9"
"(hash-ref"
" gen-order_7"
" base_64))"
" '#f)))))))))"
" fold-var_60))))"
"(values fold-var_61)))))"
"(if '#t"
"(for-loop_55 fold-var_59(+ pos_57 inc_54))"
" fold-var_59))"
" fold-var_56))"
" fold-var_56))))"
" for-loop_55)"
" null"
" start_52))))))"
"(make-let*"
" gens_11"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((start_66) '0)((end_67)(hash-count rev-mpis_8))((inc_68) '1))"
"(begin"
"(if(if(real? start_66)(if(real? end_67)(real? inc_68) '#f) '#f)"
"(void)"
"(let-values()(in-range start_66 end_67 inc_68)))"
"((letrec-values(((for-loop_69)"
"(lambda(fold-var_70 pos_71)"
"(if(< pos_71 end_67)"
"(let-values(((i_72) pos_71))"
"(if '#t"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74) fold-var_70))"
"(let-values(((fold-var_75)"
"(let-values()"
"(cons"
"(let-values()"
"(mpi-id_9"
"(hash-ref"
" gen-order_7"
"(hash-ref rev-mpis_8 i_72))))"
" fold-var_74))))"
"(values fold-var_75)))))"
"(if '#t(for-loop_69 fold-var_73(+ pos_71 inc_68)) fold-var_73))"
" fold-var_70))"
" fold-var_70))))"
" for-loop_69)"
" null"
" start_66))))))))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_76)"
"(let-values(((vec_77)(make-vector(hash-count mpis_76) '#f)))"
"(begin"
"(let-values(((ht_78) mpis_76))"
"(begin"
"(if((lambda(ht_79)(hash? ht_79)) ht_78)(void)(let-values()(default-in-hash ht_78)))"
"((letrec-values(((for-loop_80)"
"(lambda(fold-var_81 i_82)"
"(if i_82"
"(let-values(((mpi_83 pos_84)(hash-iterate-key+value ht_78 i_82)))"
"(if '#t"
"(let-values(((fold-var_85)"
"(let-values(((fold-var_86) fold-var_81))"
"(let-values(((fold-var_87)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_77 pos_84 mpi_83))"
"(void)))))"
"(values fold-var_87)))))"
"(if '#t(for-loop_80 fold-var_85(hash-iterate-next ht_78 i_82)) fold-var_85))"
" fold-var_81))"
" fold-var_81))))"
" for-loop_80)"
"(void)"
"(hash-iterate-first ht_78))))"
" vec_77))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_88)"
"(let-values(((seen_89)(make-hasheq)))"
"(let-values(((reachable-scopes_90)(seteq)))"
"(let-values(((scope-triggers_91)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_92)"
"(lambda(v_93)"
"(if(interned-literal? v_93)"
"(let-values()(void))"
"(if(hash-ref seen_89 v_93 '#f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_89 v_93 '#t)"
"(if(scope-with-bindings? v_93)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_90"
"(set-add reachable-scopes_90 v_93))"
"(values))))"
"(let-values((()(begin((reach-scopes-ref v_93) v_93 loop_92)(values))))"
"(let-values(((l_94)(hash-ref scope-triggers_91 v_93 null)))"
"(begin"
"(let-values(((lst_95) l_94))"
"(begin"
"(if(list? lst_95)(void)(let-values()(in-list lst_95)))"
"((letrec-values(((for-loop_96)"
"(lambda(fold-var_97 lst_98)"
"(if(pair? lst_98)"
"(let-values(((v_99)(unsafe-car lst_98)))"
"(if '#t"
"(let-values(((fold-var_100)"
"(let-values(((fold-var_101)"
" fold-var_97))"
"(let-values(((fold-var_102)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_92"
" v_99))"
"(void)))))"
"(values"
" fold-var_102)))))"
"(if '#t"
"(for-loop_96"
" fold-var_100"
"(unsafe-cdr lst_98))"
" fold-var_100))"
" fold-var_97))"
" fold-var_97))))"
" for-loop_96)"
"(void)"
" lst_95)))"
"((scope-with-bindings-ref v_93)"
" v_93"
" reachable-scopes_90"
" loop_92"
"(lambda(sc-unreachable_103 b_104)"
"(hash-update!"
" scope-triggers_91"
" sc-unreachable_103"
"(lambda(l_105)(cons b_104 l_105))"
" null))))))))"
"(if(reach-scopes? v_93)"
"(let-values()((reach-scopes-ref v_93) v_93 loop_92))"
"(if(pair? v_93)"
"(let-values()(begin(loop_92(car v_93))(loop_92(cdr v_93))))"
"(if(vector? v_93)"
"(let-values()"
"(let-values(((vec_106 len_107)"
"(let-values(((vec_108) v_93))"
"(begin"
"(if(vector? vec_108)"
"(void)"
"(let-values()(in-vector vec_108)))"
"(values vec_108(unsafe-vector-length vec_108))))))"
"(begin"
" '#f"
"((letrec-values(((for-loop_109)"
"(lambda(fold-var_110 pos_111)"
"(if(unsafe-fx< pos_111 len_107)"
"(let-values(((e_112)"
"(unsafe-vector-ref"
" vec_106"
" pos_111)))"
"(if '#t"
"(let-values(((fold-var_113)"
"(let-values(((fold-var_114)"
" fold-var_110))"
"(let-values(((fold-var_115)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_92"
" e_112))"
"(void)))))"
"(values"
" fold-var_115)))))"
"(if '#t"
"(for-loop_109"
" fold-var_113"
"(unsafe-fx+ '1 pos_111))"
" fold-var_113))"
" fold-var_110))"
" fold-var_110))))"
" for-loop_109)"
"(void)"
" '0))))"
"(if(box? v_93)"
"(let-values()(loop_92(unbox v_93)))"
"(if(hash? v_93)"
"(let-values()"
"(let-values(((ht_116) v_93))"
"(begin"
"(if((lambda(ht_117)(hash? ht_117)) ht_116)"
"(void)"
"(let-values()(default-in-hash ht_116)))"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 i_120)"
"(if i_120"
"(let-values(((k_121 v_122)"
"(hash-iterate-key+value"
" ht_116"
" i_120)))"
"(if '#t"
"(let-values(((fold-var_123)"
"(let-values(((fold-var_124)"
" fold-var_119))"
"(let-values(((fold-var_125)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_92"
" k_121)"
"(loop_92"
" v_122)))"
"(void)))))"
"(values"
" fold-var_125)))))"
"(if '#t"
"(for-loop_118"
" fold-var_123"
"(hash-iterate-next"
" ht_116"
" i_120))"
" fold-var_123))"
" fold-var_119))"
" fold-var_119))))"
" for-loop_118)"
"(void)"
"(hash-iterate-first ht_116)))))"
"(if(prefab-struct-key v_93)"
"(let-values()"
"(let-values(((v*_126 start*_127 stop*_128 step*_129)"
"(normalise-inputs"
" 'in-vector"
" '\"vector\""
"(lambda(x_130)(vector? x_130))"
"(lambda(x_131)(unsafe-vector-length x_131))"
"(struct->vector v_93)"
" '1"
" '#f"
" '1)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_132)"
"(lambda(fold-var_133 idx_134)"
"(if(unsafe-fx< idx_134 stop*_128)"
"(let-values(((e_135)"
"(unsafe-vector-ref"
" v*_126"
" idx_134)))"
"(if '#t"
"(let-values(((fold-var_136)"
"(let-values(((fold-var_137)"
" fold-var_133))"
"(let-values(((fold-var_138)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_92"
" e_135))"
"(void)))))"
"(values"
" fold-var_138)))))"
"(if '#t"
"(for-loop_132"
" fold-var_136"
"(unsafe-fx+ idx_134 '1))"
" fold-var_136))"
" fold-var_133))"
" fold-var_133))))"
" for-loop_132)"
"(void)"
" start*_127))))"
"(let-values()(void))))))))))))))))"
" loop_92)"
" v_88)"
" reachable-scopes_90))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_139)"
"(let-values(((or-part_140)(null? v_139)))"
"(if or-part_140"
" or-part_140"
"(let-values(((or-part_141)(boolean? v_139)))"
"(if or-part_141"
" or-part_141"
"(let-values(((or-part_142)"
"(if(fixnum? v_139)(if(< v_139(sub1(expt '2 '30)))(> v_139(-(expt '2 '30))) '#f) '#f)))"
"(if or-part_142"
" or-part_142"
"(let-values(((or-part_143)(if(symbol? v_139)(symbol-interned? v_139) '#f)))"
"(if or-part_143"
" or-part_143"
"(let-values(((or-part_144)(char? v_139)))(if or-part_144 or-part_144(keyword? v_139)))))))))))))"
"(define-values"
"(generate-deserialize)"
"(lambda(v_145 mpis_146)"
"(let-values(((reachable-scopes_147)(find-reachable-scopes v_145)))"
"(let-values(((state_148)(make-serialize-state reachable-scopes_147 inspector-id)))"
"(let-values(((mutables_149)(make-hasheq)))"
"(let-values(((objs_150)(make-hasheq)))"
"(let-values(((obj-count_151) '0))"
"(let-values(((shares_152)(make-hasheq)))"
" (let-values (((shared-id_153) (lambda (n_167) (string->symbol (format '\"shared~a\" n_167)))))"
" (let-values (((mutable-id_154) (lambda (n_168) (string->symbol (format '\"mutable~a\" n_168)))))"
"(let-values(((quoted?_155)(lambda(v_169)(if(pair? v_169)(eq? 'quote(car v_169)) '#f))))"
"(let-values(((frontier_156) null))"
"(let-values(((add-frontier!_157)"
"(lambda(v_170)(set! frontier_156(cons v_170 frontier_156)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_171)"
"(lambda(v_172)"
"(begin"
"((letrec-values(((loop_173)"
"(lambda(v_174)"
"(if(let-values(((or-part_175)"
"(interned-literal?"
" v_174)))"
"(if or-part_175"
" or-part_175"
"(1/module-path-index?"
" v_174)))"
"(let-values()(void))"
"(if(hash-ref objs_150 v_174 '#f)"
"(let-values()"
"(if(hash-ref"
" mutables_149"
" v_174"
" '#f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_152"
" v_174"
" '#t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!? v_174)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_149"
" v_174"
"(hash-count"
" mutables_149))"
"((serialize-fill!-ref"
" v_174)"
" '#f"
" v_174"
" add-frontier!_157"
" state_148)))"
"(if(serialize? v_174)"
"(let-values()"
"((serialize-ref v_174)"
" v_174"
" loop_173"
" state_148))"
"(if(pair? v_174)"
"(let-values()"
"(begin"
"(loop_173"
"(car v_174))"
"(loop_173"
"(cdr v_174))))"
"(if(vector? v_174)"
"(let-values()"
"(if(let-values(((or-part_176)"
"(immutable?"
" v_174)))"
"(if or-part_176"
" or-part_176"
"(zero?"
"(vector-length"
" v_174))))"
"(let-values(((vec_177"
" len_178)"
"(let-values(((vec_179)"
" v_174))"
"(begin"
"(if(vector?"
" vec_179)"
"(void)"
"(let-values()"
"(in-vector"
" vec_179)))"
"(values"
" vec_179"
"(unsafe-vector-length"
" vec_179))))))"
"(begin"
" '#f"
"((letrec-values(((for-loop_180)"
"(lambda(fold-var_181"
" pos_182)"
"(if(unsafe-fx<"
" pos_182"
" len_178)"
"(let-values(((e_183)"
"(unsafe-vector-ref"
" vec_177"
" pos_182)))"
"(if '#t"
"(let-values(((fold-var_184)"
"(let-values(((fold-var_185)"
" fold-var_181))"
"(let-values(((fold-var_186)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_173"
" e_183))"
"(void)))))"
"(values"
" fold-var_186)))))"
"(if '#t"
"(for-loop_180"
" fold-var_184"
"(unsafe-fx+"
" '1"
" pos_182))"
" fold-var_184))"
" fold-var_181))"
" fold-var_181))))"
" for-loop_180)"
"(void)"
" '0)))"
"(begin"
"(hash-set!"
" mutables_149"
" v_174"
"(hash-count"
" mutables_149))"
"(let-values(((vec_187"
" len_188)"
"(let-values(((vec_189)"
" v_174))"
"(begin"
"(if(vector?"
" vec_189)"
"(void)"
"(let-values()"
"(in-vector"
" vec_189)))"
"(values"
" vec_189"
"(unsafe-vector-length"
" vec_189))))))"
"(begin"
" '#f"
"((letrec-values(((for-loop_190)"
"(lambda(fold-var_191"
" pos_192)"
"(if(unsafe-fx<"
" pos_192"
" len_188)"
"(let-values(((e_193)"
"(unsafe-vector-ref"
" vec_187"
" pos_192)))"
"(if '#t"
"(let-values(((fold-var_194)"
"(let-values(((fold-var_195)"
" fold-var_191))"
"(let-values(((fold-var_196)"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_157"
" e_193))"
"(void)))))"
"(values"
" fold-var_196)))))"
"(if '#t"
"(for-loop_190"
" fold-var_194"
"(unsafe-fx+"
" '1"
" pos_192))"
" fold-var_194))"
" fold-var_191))"
" fold-var_191))))"
" for-loop_190)"
"(void)"
" '0))))))"
"(if(box? v_174)"
"(let-values()"
"(if(immutable?"
" v_174)"
"(loop_173"
"(unbox"
" v_174))"
"(begin"
"(hash-set!"
" mutables_149"
" v_174"
"(hash-count"
" mutables_149))"
"(add-frontier!_157"
"(unbox"
" v_174)))))"
"(if(hash? v_174)"
"(let-values()"
"(if(immutable?"
" v_174)"
"(let-values(((ht_197)"
" v_174))"
"(begin"
"(if((lambda(ht_198)"
"(hash?"
" ht_198))"
" ht_197)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_197)))"
"((letrec-values(((for-loop_199)"
"(lambda(fold-var_200"
" i_201)"
"(if i_201"
"(let-values(((k_202"
" v_203)"
"(hash-iterate-key+value"
" ht_197"
" i_201)))"
"(if '#t"
"(let-values(((fold-var_204)"
"(let-values(((fold-var_205)"
" fold-var_200))"
"(let-values(((fold-var_206)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_173"
" k_202)"
"(loop_173"
" v_203)))"
"(void)))))"
"(values"
" fold-var_206)))))"
"(if '#t"
"(for-loop_199"
" fold-var_204"
"(hash-iterate-next"
" ht_197"
" i_201))"
" fold-var_204))"
" fold-var_200))"
" fold-var_200))))"
" for-loop_199)"
"(void)"
"(hash-iterate-first"
" ht_197))))"
"(begin"
"(hash-set!"
" mutables_149"
" v_174"
"(hash-count"
" mutables_149))"
"(let-values(((ht_207)"
" v_174))"
"(begin"
"(if((lambda(ht_208)"
"(hash?"
" ht_208))"
" ht_207)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_207)))"
"((letrec-values(((for-loop_209)"
"(lambda(fold-var_210"
" i_211)"
"(if i_211"
"(let-values(((k_212"
" v_213)"
"(hash-iterate-key+value"
" ht_207"
" i_211)))"
"(if '#t"
"(let-values(((fold-var_214)"
"(let-values(((fold-var_215)"
" fold-var_210))"
"(let-values(((fold-var_216)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_157"
" k_212)"
"(add-frontier!_157"
" v_213)))"
"(void)))))"
"(values"
" fold-var_216)))))"
"(if '#t"
"(for-loop_209"
" fold-var_214"
"(hash-iterate-next"
" ht_207"
" i_211))"
" fold-var_214))"
" fold-var_210))"
" fold-var_210))))"
" for-loop_209)"
"(void)"
"(hash-iterate-first"
" ht_207)))))))"
"(if(prefab-struct-key"
" v_174)"
"(let-values()"
"(let-values(((v*_217"
" start*_218"
" stop*_219"
" step*_220)"
"(normalise-inputs"
" 'in-vector"
" '\"vector\""
"(lambda(x_221)"
"(vector?"
" x_221))"
"(lambda(x_222)"
"(unsafe-vector-length"
" x_222))"
"(struct->vector"
" v_174)"
" '1"
" '#f"
" '1)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_223)"
"(lambda(fold-var_224"
" idx_225)"
"(if(unsafe-fx<"
" idx_225"
" stop*_219)"
"(let-values(((e_226)"
"(unsafe-vector-ref"
" v*_217"
" idx_225)))"
"(if '#t"
"(let-values(((fold-var_227)"
"(let-values(((fold-var_228)"
" fold-var_224))"
"(let-values(((fold-var_229)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_173"
" e_226))"
"(void)))))"
"(values"
" fold-var_229)))))"
"(if '#t"
"(for-loop_223"
" fold-var_227"
"(unsafe-fx+"
" idx_225"
" '1))"
" fold-var_227))"
" fold-var_224))"
" fold-var_224))))"
" for-loop_223)"
"(void)"
" start*_218))))"
"(if(srcloc?"
" v_174)"
"(let-values()"
"(let-values(((v*_230"
" start*_231"
" stop*_232"
" step*_233)"
"(normalise-inputs"
" 'in-vector"
" '\"vector\""
"(lambda(x_234)"
"(vector?"
" x_234))"
"(lambda(x_235)"
"(unsafe-vector-length"
" x_235))"
"(struct->vector"
" v_174)"
" '1"
" '#f"
" '1)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_236)"
"(lambda(fold-var_237"
" idx_238)"
"(if(unsafe-fx<"
" idx_238"
" stop*_232)"
"(let-values(((e_239)"
"(unsafe-vector-ref"
" v*_230"
" idx_238)))"
"(if '#t"
"(let-values(((fold-var_240)"
"(let-values(((fold-var_241)"
" fold-var_237))"
"(let-values(((fold-var_242)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_173"
" e_239))"
"(void)))))"
"(values"
" fold-var_242)))))"
"(if '#t"
"(for-loop_236"
" fold-var_240"
"(unsafe-fx+"
" idx_238"
" '1))"
" fold-var_240))"
" fold-var_237))"
" fold-var_237))))"
" for-loop_236)"
"(void)"
" start*_231))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_150"
" v_174"
" obj-count_151)"
"(set! obj-count_151"
"(add1"
" obj-count_151)))))))))"
" loop_173)"
" v_172)"
"(if(null? frontier_156)"
"(void)"
"(let-values()"
"(let-values(((l_243) frontier_156))"
"(begin"
"(set! frontier_156 null)"
"(let-values(((lst_244) l_243))"
"(begin"
"(if(list? lst_244)"
"(void)"
"(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246"
" lst_247)"
"(if(pair? lst_247)"
"(let-values(((v_248)"
"(unsafe-car"
" lst_247)))"
"(if '#t"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250)"
" fold-var_246))"
"(let-values(((fold-var_251)"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_171"
" v_248))"
"(void)))))"
"(values"
" fold-var_251)))))"
"(if '#t"
"(for-loop_245"
" fold-var_249"
"(unsafe-cdr"
" lst_247))"
" fold-var_249))"
" fold-var_246))"
" fold-var_246))))"
" for-loop_245)"
"(void)"
" lst_244)))))))))))"
" frontier-loop_171)"
" v_145)"
"(values))))"
"(letrec-values(((ser_158)"
"(lambda(v_252)"
"(if(hash-ref shares_152 v_252 '#f)"
"(let-values()(shared-id_153(hash-ref objs_150 v_252)))"
"(let-values(((c115897_253)(hash-ref mutables_149 v_252 '#f)))"
"(if c115897_253"
"((lambda(n_254)(mutable-id_154 n_254)) c115897_253)"
"(let-values()(do-ser_159 v_252)))))))"
"((do-ser_159)"
"(lambda(v_255)"
"(if(1/module-path-index? v_255)"
"(let-values()(add-module-path-index! mpis_146 v_255))"
"(if(serialize? v_255)"
"(let-values()((serialize-ref v_255) v_255 ser_158 state_148))"
"(if(pair? v_255)"
"(let-values()"
"(let-values(((a_256)(ser_158(car v_255))))"
"(let-values(((d_257)(ser_158(cdr v_255))))"
"(if(if(quoted?_155 a_256)(quoted?_155 d_257) '#f)"
"(let-values()(list 'quote v_255))"
"(if(if(pair? d_257)(eq? 'list(car d_257)) '#f)"
"(let-values()(list* 'list a_256(cdr d_257)))"
"(if(if(pair? d_257)"
"(if(eq? 'quote(car d_257))"
"(eq? '()(cadr d_257))"
" '#f)"
" '#f)"
"(let-values()(list 'list a_256))"
"(let-values()(list 'cons a_256 d_257))))))))"
"(if(null? v_255)"
"(let-values() ''())"
"(if(box? v_255)"
"(let-values()"
"(let-values(((content_258)(ser_158(unbox v_255))))"
"(if(quoted?_155 content_258)"
"(list 'quote v_255)"
"(list 'box-immutable content_258))))"
"(if(vector? v_255)"
"(let-values()"
"(let-values(((content_259)"
"(alt-reverse"
"(let-values(((vec_260 len_261)"
"(let-values(((vec_262)"
" v_255))"
"(begin"
"(if(vector? vec_262)"
"(void)"
"(let-values()"
"(in-vector vec_262)))"
"(values"
" vec_262"
"(unsafe-vector-length"
" vec_262))))))"
"(begin"
" '#f"
"((letrec-values(((for-loop_263)"
"(lambda(fold-var_264"
" pos_265)"
"(if(unsafe-fx<"
" pos_265"
" len_261)"
"(let-values(((e_266)"
"(unsafe-vector-ref"
" vec_260"
" pos_265)))"
"(if '#t"
"(let-values(((fold-var_267)"
"(let-values(((fold-var_268)"
" fold-var_264))"
"(let-values(((fold-var_269)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" e_266))"
" fold-var_268))))"
"(values"
" fold-var_269)))))"
"(if '#t"
"(for-loop_263"
" fold-var_267"
"(unsafe-fx+"
" '1"
" pos_265))"
" fold-var_267))"
" fold-var_264))"
" fold-var_264))))"
" for-loop_263)"
" null"
" '0))))))"
"(if(andmap2 quoted?_155 content_259)"
"(list 'quote v_255)"
"(cons 'vector-immutable content_259))))"
"(if(hash? v_255)"
"(let-values()"
"(let-values(((k-content_270)"
"(alt-reverse"
"(let-values(((ht_272) v_255))"
"(begin"
"(if((lambda(ht_273)(hash? ht_273))"
" ht_272)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_272)))"
"((letrec-values(((for-loop_274)"
"(lambda(fold-var_275"
" i_276)"
"(if i_276"
"(let-values(((k_277)"
"(hash-iterate-key"
" ht_272"
" i_276)))"
"(if '#t"
"(let-values(((fold-var_278)"
"(let-values(((fold-var_279)"
" fold-var_275))"
"(let-values(((fold-var_280)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" k_277))"
" fold-var_279))))"
"(values"
" fold-var_280)))))"
"(if '#t"
"(for-loop_274"
" fold-var_278"
"(hash-iterate-next"
" ht_272"
" i_276))"
" fold-var_278))"
" fold-var_275))"
" fold-var_275))))"
" for-loop_274)"
" null"
"(hash-iterate-first ht_272)))))))"
"(let-values(((v-content_271)"
"(alt-reverse"
"(let-values(((ht_281) v_255))"
"(begin"
"(if((lambda(ht_282)"
"(hash? ht_282))"
" ht_281)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_281)))"
"((letrec-values(((for-loop_283)"
"(lambda(fold-var_284"
" i_285)"
"(if i_285"
"(let-values(((v_286)"
"(hash-iterate-value"
" ht_281"
" i_285)))"
"(if '#t"
"(let-values(((fold-var_287)"
"(let-values(((fold-var_288)"
" fold-var_284))"
"(let-values(((fold-var_289)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" v_286))"
" fold-var_288))))"
"(values"
" fold-var_289)))))"
"(if '#t"
"(for-loop_283"
" fold-var_287"
"(hash-iterate-next"
" ht_281"
" i_285))"
" fold-var_287))"
" fold-var_284))"
" fold-var_284))))"
" for-loop_283)"
" null"
"(hash-iterate-first ht_281)))))))"
"(if(if(andmap2 quoted?_155 k-content_270)"
"(andmap2 quoted?_155 v-content_271)"
" '#f)"
"(list 'quote v_255)"
"(list*"
"(if(hash-eq? v_255)"
"(let-values() 'hasheq)"
"(if(hash-eqv? v_255)"
"(let-values() 'hasheqv)"
"(let-values() 'hash)))"
"((letrec-values(((loop_290)"
"(lambda(k-content_291"
" v-content_292)"
"(if(null? k-content_291)"
"(let-values() null)"
"(let-values()"
"(list*"
"(car k-content_291)"
"(car v-content_292)"
"(loop_290"
"(cdr k-content_291)"
"(cdr"
" v-content_292))))))))"
" loop_290)"
" k-content_270"
" v-content_271))))))"
"(let-values(((c115898_293)(prefab-struct-key v_255)))"
"(if c115898_293"
"((lambda(k_294)"
"(let-values(((content_295)"
"(alt-reverse"
"(let-values(((v*_296"
" start*_297"
" stop*_298"
" step*_299)"
"(normalise-inputs"
" 'in-vector"
" '\"vector\""
"(lambda(x_300)"
"(vector? x_300))"
"(lambda(x_301)"
"(unsafe-vector-length"
" x_301))"
"(struct->vector v_255)"
" '1"
" '#f"
" '1)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_302)"
"(lambda(fold-var_303"
" idx_304)"
"(if(unsafe-fx<"
" idx_304"
" stop*_298)"
"(let-values(((e_305)"
"(unsafe-vector-ref"
" v*_296"
" idx_304)))"
"(if '#t"
"(let-values(((fold-var_306)"
"(let-values(((fold-var_307)"
" fold-var_303))"
"(let-values(((fold-var_308)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" e_305))"
" fold-var_307))))"
"(values"
" fold-var_308)))))"
"(if '#t"
"(for-loop_302"
" fold-var_306"
"(unsafe-fx+"
" idx_304"
" '1))"
" fold-var_306))"
" fold-var_303))"
" fold-var_303))))"
" for-loop_302)"
" null"
" start*_297))))))"
"(if(andmap2 quoted?_155 content_295)"
"(list 'quote v_255)"
"(list*"
" 'make-prefab-struct"
"(list 'quote k_294)"
" content_295))))"
" c115898_293)"
"(if(srcloc? v_255)"
"(let-values()"
"(list*"
" 'srcloc"
"(alt-reverse"
"(let-values(((v*_309"
" start*_310"
" stop*_311"
" step*_312)"
"(normalise-inputs"
" 'in-vector"
" '\"vector\""
"(lambda(x_313)(vector? x_313))"
"(lambda(x_314)"
"(unsafe-vector-length x_314))"
"(struct->vector v_255)"
" '1"
" '#f"
" '1)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_315)"
"(lambda(fold-var_316"
" idx_317)"
"(if(unsafe-fx<"
" idx_317"
" stop*_311)"
"(let-values(((e_318)"
"(unsafe-vector-ref"
" v*_309"
" idx_317)))"
"(if '#t"
"(let-values(((fold-var_319)"
"(let-values(((fold-var_320)"
" fold-var_316))"
"(let-values(((fold-var_321)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" e_318))"
" fold-var_320))))"
"(values"
" fold-var_321)))))"
"(if '#t"
"(for-loop_315"
" fold-var_319"
"(unsafe-fx+"
" idx_317"
" '1))"
" fold-var_319))"
" fold-var_316))"
" fold-var_316))))"
" for-loop_315)"
" null"
" start*_310))))))"
"(let-values()(list 'quote v_255)))))))))))))))"
"(let-values(((ser-shell_160)"
"(lambda(v_322)"
"(if(serialize-fill!? v_322)"
"(let-values()((serialize-ref v_322) v_322 ser_158 state_148))"
"(if(box? v_322)"
"(let-values() '(box #f))"
"(if(vector? v_322)"
"(let-values()(list* 'make-vector(vector-length v_322) '(#f)))"
"(if(hash? v_322)"
"(let-values()"
"(if(hash-eq? v_322)"
"(let-values() '(make-hasheq))"
"(if(hash-eqv? v_322)"
"(let-values() '(make-hasheqv))"
"(let-values() '(make-hash)))))"
"(let-values()"
" (error 'ser-shell '\"unknown mutable: ~e\" v_322)))))))))"
"(let-values(((ser-shell-fill_161)"
"(lambda(id_323 v_324)"
"(if(serialize-fill!? v_324)"
"(let-values()"
"((serialize-fill!-ref v_324) id_323 v_324 ser_158 state_148))"
"(if(box? v_324)"
"(let-values()(list 'set-box! id_323(ser_158(unbox v_324))))"
"(if(vector? v_324)"
"(let-values()"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((vec_325 len_326)"
"(let-values(((vec_330) v_324))"
"(begin"
"(if(vector? vec_330)"
"(void)"
"(let-values()(in-vector vec_330)))"
"(values"
" vec_330"
"(unsafe-vector-length vec_330)))))"
"((start_327) '0)"
"((end_328)(vector-length v_324))"
"((inc_329) '1))"
"(begin"
" '#f"
"(if(if(real? start_327)"
"(if(real? end_328)(real? inc_329) '#f)"
" '#f)"
"(void)"
"(let-values()(in-range start_327 end_328 inc_329)))"
"((letrec-values(((for-loop_331)"
"(lambda(fold-var_332 pos_333 pos_334)"
"(if(if(unsafe-fx< pos_333 len_326)"
"(< pos_334 end_328)"
" '#f)"
"(let-values(((v_335)"
"(unsafe-vector-ref"
" vec_325"
" pos_333))"
"((i_336) pos_334))"
"(if(if '#t '#t '#f)"
"(let-values(((fold-var_337)"
"(let-values(((fold-var_338)"
" fold-var_332))"
"(let-values(((fold-var_339)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'vector-set!"
" id_323"
" i_336"
"(ser_158"
" v_335)))"
" fold-var_338))))"
"(values"
" fold-var_339)))))"
"(if(if '#t '#t '#f)"
"(for-loop_331"
" fold-var_337"
"(unsafe-fx+ '1 pos_333)"
"(+ pos_334 inc_329))"
" fold-var_337))"
" fold-var_332))"
" fold-var_332))))"
" for-loop_331)"
" null"
" '0"
" start_327))))))"
"(if(hash? v_324)"
"(let-values()"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((ht_340) v_324))"
"(begin"
"(if((lambda(ht_341)(hash? ht_341)) ht_340)"
"(void)"
"(let-values()(default-in-hash ht_340)))"
"((letrec-values(((for-loop_342)"
"(lambda(fold-var_343 i_344)"
"(if i_344"
"(let-values(((k_345 v_346)"
"(hash-iterate-key+value"
" ht_340"
" i_344)))"
"(if '#t"
"(let-values(((fold-var_347)"
"(let-values(((fold-var_348)"
" fold-var_343))"
"(let-values(((fold-var_349)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'hash-set!"
" id_323"
"(ser_158"
" k_345)"
"(ser_158"
" v_346)))"
" fold-var_348))))"
"(values"
" fold-var_349)))))"
"(if '#t"
"(for-loop_342"
" fold-var_347"
"(hash-iterate-next"
" ht_340"
" i_344))"
" fold-var_347))"
" fold-var_343))"
" fold-var_343))))"
" for-loop_342)"
" null"
"(hash-iterate-first ht_340)))))))"
"(let-values()"
" (error 'ser-shell-fill '\"unknown mutable: ~e\" v_324)))))))))"
"(let-values(((rev-mutables_162)"
"(let-values(((ht_350) mutables_149))"
"(begin"
"(if((lambda(ht_351)(hash? ht_351)) ht_350)"
"(void)"
"(let-values()(default-in-hash ht_350)))"
"((letrec-values(((for-loop_352)"
"(lambda(table_353 i_354)"
"(if i_354"
"(let-values(((k_355 v_356)"
"(hash-iterate-key+value"
" ht_350"
" i_354)))"
"(if '#t"
"(let-values(((table_357)"
"(let-values(((table_358)"
" table_353))"
"(let-values(((table_359)"
"(let-values()"
"(let-values(((key_360"
" val_361)"
"(let-values()"
"(values"
" v_356"
" k_355))))"
"(hash-set"
" table_358"
" key_360"
" val_361)))))"
"(values table_359)))))"
"(if '#t"
"(for-loop_352"
" table_357"
"(hash-iterate-next ht_350 i_354))"
" table_357))"
" table_353))"
" table_353))))"
" for-loop_352)"
" '#hasheqv()"
"(hash-iterate-first ht_350))))))"
"(let-values(((mutable-shell-bindings_163)"
"(alt-reverse"
"(let-values(((start_362) '0)"
"((end_363)(hash-count mutables_149))"
"((inc_364) '1))"
"(begin"
"(if(if(real? start_362)"
"(if(real? end_363)(real? inc_364) '#f)"
" '#f)"
"(void)"
"(let-values()(in-range start_362 end_363 inc_364)))"
"((letrec-values(((for-loop_365)"
"(lambda(fold-var_366 pos_367)"
"(if(< pos_367 end_363)"
"(let-values(((i_368) pos_367))"
"(if '#t"
"(let-values(((fold-var_369)"
"(let-values(((fold-var_370)"
" fold-var_366))"
"(let-values(((fold-var_371)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(list"
"(mutable-id_154"
" i_368))"
"(ser-shell_160"
"(hash-ref"
" rev-mutables_162"
" i_368))))"
" fold-var_370))))"
"(values"
" fold-var_371)))))"
"(if '#t"
"(for-loop_365"
" fold-var_369"
"(+ pos_367 inc_364))"
" fold-var_369))"
" fold-var_366))"
" fold-var_366))))"
" for-loop_365)"
" null"
" start_362))))))"
"(let-values(((rev-shares_164)"
"(let-values(((ht_372) shares_152))"
"(begin"
"(if((lambda(ht_373)(hash? ht_373)) ht_372)"
"(void)"
"(let-values()(default-in-hash-keys ht_372)))"
"((letrec-values(((for-loop_374)"
"(lambda(table_375 i_376)"
"(if i_376"
"(let-values(((v_377)"
"(hash-iterate-key"
" ht_372"
" i_376)))"
"(if '#t"
"(let-values(((table_378)"
"(let-values(((table_379)"
" table_375))"
"(let-values(((table_380)"
"(let-values()"
"(let-values(((key_381"
" val_382)"
"(let-values()"
"(values"
"(hash-ref"
" objs_150"
" v_377)"
" v_377))))"
"(hash-set"
" table_379"
" key_381"
" val_382)))))"
"(values"
" table_380)))))"
"(if '#t"
"(for-loop_374"
" table_378"
"(hash-iterate-next ht_372 i_376))"
" table_378))"
" table_375))"
" table_375))))"
" for-loop_374)"
" '#hasheqv()"
"(hash-iterate-first ht_372))))))"
"(let-values(((shared-bindings_165)"
"(alt-reverse"
"(let-values(((start_383) '0)"
"((end_384) obj-count_151)"
"((inc_385) '1))"
"(begin"
"(if(if(real? start_383)"
"(if(real? end_384)(real? inc_385) '#f)"
" '#f)"
"(void)"
"(let-values()(in-range start_383 end_384 inc_385)))"
"((letrec-values(((for-loop_386)"
"(lambda(fold-var_387 pos_388)"
"(if(< pos_388 end_384)"
"(let-values(((i_389) pos_388))"
"(if '#t"
"(let-values(((fold-var_390)"
"(let-values(((fold-var_391)"
" fold-var_387))"
"(if(hash-ref"
" rev-shares_164"
" i_389"
" '#f)"
"(let-values(((fold-var_392)"
" fold-var_391))"
"(let-values(((fold-var_393)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(list"
"(shared-id_153"
" i_389))"
"(do-ser_159"
"(hash-ref"
" rev-shares_164"
" i_389))))"
" fold-var_392))))"
"(values"
" fold-var_393)))"
" fold-var_391))))"
"(if '#t"
"(for-loop_386"
" fold-var_390"
"(+ pos_388 inc_385))"
" fold-var_390))"
" fold-var_387))"
" fold-var_387))))"
" for-loop_386)"
" null"
" start_383))))))"
"(let-values(((mutable-fills_166)"
"(alt-reverse"
"(let-values(((start_394) '0)"
"((end_395)(hash-count mutables_149))"
"((inc_396) '1))"
"(begin"
"(if(if(real? start_394)"
"(if(real? end_395)(real? inc_396) '#f)"
" '#f)"
"(void)"
"(let-values()(in-range start_394 end_395 inc_396)))"
"((letrec-values(((for-loop_397)"
"(lambda(fold-var_398 pos_399)"
"(if(< pos_399 end_395)"
"(let-values(((i_400) pos_399))"
"(if '#t"
"(let-values(((fold-var_401)"
"(let-values(((fold-var_402)"
" fold-var_398))"
"(let-values(((fold-var_403)"
"(let-values()"
"(cons"
"(let-values()"
"(ser-shell-fill_161"
"(mutable-id_154"
" i_400)"
"(hash-ref"
" rev-mutables_162"
" i_400)))"
" fold-var_402))))"
"(values"
" fold-var_403)))))"
"(if '#t"
"(for-loop_397"
" fold-var_401"
"(+ pos_399 inc_396))"
" fold-var_401))"
" fold-var_398))"
" fold-var_398))))"
" for-loop_397)"
" null"
" start_394))))))"
"(list"
" 'let-values"
" mutable-shell-bindings_163"
"(make-let*"
" shared-bindings_165"
"(list*"
" 'begin"
"(qq-append"
" mutable-fills_166"
"(list(ser_158 v_145))))))))))))))))))))))))))))"
"(define-values"
"(make-let*)"
"(lambda(bindings_404 body_405)"
"((letrec-values(((loop_406)"
"(lambda(vars_407 group_408 bindings_409)"
"(if(null? bindings_409)"
"(let-values()(list 'let-values(alt-reverse group_408) body_405))"
"(if(has-symbol?(cadar bindings_409) vars_407)"
"(let-values()"
"(list 'let-values(alt-reverse group_408)(loop_406 '#hasheq() null bindings_409)))"
"(let-values()"
"(loop_406"
"(hash-set vars_407(caaar bindings_409) '#t)"
"(cons(car bindings_409) group_408)"
"(cdr bindings_409))))))))"
" loop_406)"
" '#hasheq()"
" null"
" bindings_404)))"
"(define-values"
"(has-symbol?)"
"(lambda(d_410 vars_411)"
"(let-values(((or-part_412)(if(symbol? d_410)(hash-ref vars_411 d_410 '#f) '#f)))"
"(if or-part_412"
" or-part_412"
"(if(pair? d_410)"
"(let-values(((or-part_413)(has-symbol?(car d_410) vars_411)))"
"(if or-part_413 or-part_413(has-symbol?(cdr d_410) vars_411)))"
" '#f)))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_414 mpis_415)"
"(alt-reverse"
"(let-values(((lst_416) mus_414))"
"(begin"
"(if(list? lst_416)(void)(let-values()(in-list lst_416)))"
"((letrec-values(((for-loop_417)"
"(lambda(fold-var_418 lst_419)"
"(if(pair? lst_419)"
"(let-values(((mu_420)(unsafe-car lst_419)))"
"(if '#t"
"(let-values(((fold-var_421)"
"(let-values(((fold-var_422) fold-var_418))"
"(let-values(((fold-var_423)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_415"
"(module-use-module mu_420))"
"(module-use-phase mu_420)))"
" fold-var_422))))"
"(values fold-var_423)))))"
"(if '#t(for-loop_417 fold-var_421(unsafe-cdr lst_419)) fold-var_421))"
" fold-var_418))"
" fold-var_418))))"
" for-loop_417)"
" null"
" lst_416))))))"
"(define-values(deserialize-instance)(1/make-instance 'deserialize))"
"(define-values(deserialize-imports) null)"
"(define-values"
"(add!)"
"(lambda(sym_424 val_425)"
"(begin"
"(1/instance-set-variable-value! deserialize-instance sym_424 val_425)"
"(set! deserialize-imports(cons sym_424 deserialize-imports))"
"(register-built-in-symbol! sym_424))))"
"(call-with-values(lambda()(add! 'deserialize-module-path-index 1/deserialize-module-path-index)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-syntax 1/deserialize-syntax)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-scope 1/deserialize-scope)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-scope-fill! 1/deserialize-scope-fill!)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-multi-scope 1/deserialize-multi-scope)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-shifted-multi-scope 1/deserialize-shifted-multi-scope)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-representative-scope 1/deserialize-representative-scope)) print-values)"
"(call-with-values"
"(lambda()(add! 'deserialize-representative-scope-fill! 1/deserialize-representative-scope-fill!))"
" print-values)"
"(call-with-values(lambda()(add! 'deserialize-bulk-binding-at 1/deserialize-bulk-binding-at)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-full-module-binding 1/deserialize-full-module-binding)) print-values)"
"(call-with-values"
"(lambda()(add! 'deserialize-simple-module-binding 1/deserialize-simple-module-binding))"
" print-values)"
"(call-with-values(lambda()(add! 'deserialize-full-local-binding 1/deserialize-full-local-binding)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-bulk-binding 1/deserialize-bulk-binding)) print-values)"
"(call-with-values(lambda()(add! 'syntax-module-path-index-shift 1/syntax-module-path-index-shift)) print-values)"
"(call-with-values(lambda()(add! 'syntax-shift-phase-level syntax-shift-phase-level$1)) print-values)"
"(call-with-values(lambda()(add! 'module-use module-use1.1)) print-values)"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-phase"
" compiled-in-memory-max-phase"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literalss"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'compiled-in-memory"
" '#f"
" '10"
" '0"
" '#f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_67 port_68 mode_69)(write(compiled-in-memory-linklet-directory cim_67) port_68))))"
"(current-inspector)"
" '#f"
" '(0 1 2 3 4 5 6 7 8 9)"
" '#f"
" 'compiled-in-memory)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 '1 'phase)"
"(make-struct-field-accessor -ref_4 '2 'max-phase)"
"(make-struct-field-accessor -ref_4 '3 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 '4 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 '5 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 '6 'mpis)"
"(make-struct-field-accessor -ref_4 '7 'syntax-literalss)"
"(make-struct-field-accessor -ref_4 '8 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 '9 'post-compiled-in-memorys))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_1 original-scopes-s_2 new-ns_3)"
"(let-values(((old-scs-post_4 old-scs-other_5)(decode-namespace-scopes original-scopes-s_2)))"
"(let-values(((new-scs-post_6 new-scs-other_7)(extract-namespace-scopes new-ns_3)))"
"(syntax-swap-scopes(syntax-swap-scopes s_1 old-scs-post_4 new-scs-post_6) old-scs-other_5 new-scs-other_7)))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_8)"
"(let-values(((root-ctx_9)(namespace-get-root-expand-ctx ns_8)))"
"(let-values(((post-expansion-sc_10)(root-expand-context-post-expansion-scope root-ctx_9)))"
"(values"
"(set post-expansion-sc_10)"
"(set-remove(list->set(root-expand-context-module-scopes root-ctx_9)) post-expansion-sc_10))))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_11)"
"(let-values(((post-expansion-scs_12 other-scs_13)(extract-namespace-scopes ns_11)))"
"(let-values(((post-expansion-s_14)(add-scopes(datum->syntax$2 '#f 'post)(set->list post-expansion-scs_12))))"
"(let-values(((other-s_15)(add-scopes(datum->syntax$2 '#f 'other)(set->list other-scs_13))))"
"(datum->syntax$2 '#f(vector post-expansion-s_14 other-s_15)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_16)"
"(let-values(((vec_17)(syntax-e$1 stx_16)))"
"(values(syntax-scope-set(vector-ref vec_17 '0) '0)(syntax-scope-set(vector-ref vec_17 '1) '0)))))"
"(define-values"
"(struct:header"
" header1.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" header-num-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!"
" set-header-num-syntax-literals!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'header '#f '9 '0 '#f null(current-inspector) '#f '(0 1 3 4 6 7) '#f 'header)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'module-path-indexes)"
"(make-struct-field-accessor -ref_4 '1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_4 '2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_4 '3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_4 '4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_4 '5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_4 '6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_4 '7 'syntax-literals)"
"(make-struct-field-accessor -ref_4 '8 'num-syntax-literals)"
"(make-struct-field-mutator -set!_5 '2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_5 '5 'require-vars-in-order)"
"(make-struct-field-mutator -set!_5 '8 'num-syntax-literals))))"
"(define-values"
"(struct:variable-use variable-use2.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(make-struct-type 'variable-use '#f '2 '0 '#f null '#f '#f '(0 1) '#f 'variable-use)))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 '0 'module-use)"
"(make-struct-field-accessor -ref_65 '1 'sym))))"
"(define-values"
"(make-header)"
"(lambda(mpis_88)"
"(header1.1 mpis_88(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq)(box null) '0)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header_89 q_90)"
"(let-values(((pos_91)(header-num-syntax-literals header_89)))"
"(let-values((()(begin(set-header-num-syntax-literals! header_89(add1 pos_91))(values))))"
"(let-values(((b_92)(header-syntax-literals header_89)))"
"(begin(set-box! b_92(cons q_90(unbox b_92))) pos_91))))))"
"(define-values(empty-syntax-literals) '#&())"
"(define-values(header-empty-syntax-literals?)(lambda(header_93)(null?(unbox(header-syntax-literals header_93)))))"
"(define-values"
"(generate-lazy-syntax-literals!8.1)"
"(lambda(skip-deserialize?3_94 skip-deserialize?4_95 syntax-literals-boxes5_96 mpis6_97 self7_98)"
"(let-values(((syntax-literals-boxes_99) syntax-literals-boxes5_96))"
"(let-values(((mpis_100) mpis6_97))"
"(let-values(((self_101) self7_98))"
"(let-values(((skip-deserialize?_102)(if skip-deserialize?4_95 skip-deserialize?3_94 '#f)))"
"(let-values()"
"(let-values(((syntax-literalss_103)(map2 unbox syntax-literals-boxes_99)))"
"(if(andmap2 null? syntax-literalss_103)"
"(let-values() null)"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list syntax-literalss-id)"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((lst_104) syntax-literalss_103))"
"(begin"
"(if(list? lst_104)(void)(let-values()(in-list lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(fold-var_106 lst_107)"
"(if(pair? lst_107)"
"(let-values(((syntax-literals_108)(unsafe-car lst_107)))"
"(if '#t"
"(let-values(((fold-var_109)"
"(let-values(((fold-var_110) fold-var_106))"
"(let-values(((fold-var_111)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'make-vector"
"(length syntax-literals_108)"
" '(#f)))"
" fold-var_110))))"
"(values fold-var_111)))))"
"(if '#t"
"(for-loop_105 fold-var_109(unsafe-cdr lst_107))"
" fold-var_109))"
" fold-var_106))"
" fold-var_106))))"
" for-loop_105)"
" null"
" lst_104))))))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(phase pos)"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_102"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-id '(phase))"
" '(void)"
"(list"
" 'vector-copy!"
" deserialized-syntax-id"
" ''0"
"(generate-deserialize"
"(vector->immutable-vector"
"(list->vector"
"(map2"
" vector->immutable-vector"
"(map2 list->vector(map2 alt-reverse syntax-literalss_103)))))"
" mpis_100)))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref(list* 'vector-ref deserialized-syntax-id '(phase)) '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_100 self_101)"
" self-id)))"
"(list*"
" 'begin"
"(list* 'vector-set!(list* 'vector-ref syntax-literalss-id '(phase)) '(pos stx))"
" '(stx)))))))))))))))))))"
"(define-values"
"(unpack9.1$1)"
"(lambda(given-kws_112 given-args_113 syntax-literals-boxes5_114 mpis6_115 self7_116)"
"(let-values(((skip-deserialize?4_117)(pair? given-kws_112)))"
"(let-values(((skip-deserialize?3_118)(if skip-deserialize?4_117(car given-args_113)(void))))"
"(generate-lazy-syntax-literals!8.1"
" skip-deserialize?3_118"
" skip-deserialize?4_117"
" syntax-literals-boxes5_114"
" mpis6_115"
" self7_116)))))"
"(define-values"
"(generate-lazy-syntax-literals!10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_119 given-argc_120)"
"(if(= given-argc_120 '5)"
"(let-values(((l1_121) given-kws_119))"
"(let-values(((l1_122)"
"(if(null? l1_121) l1_121(if(eq?(car l1_121) '#:skip-deserialize?)(cdr l1_121) l1_121))))"
"(null? l1_122)))"
" '#f))"
"(case-lambda"
"((given-kws_123 given-args_124 syntax-literals-boxes_125 mpis_126 self_127)"
"(unpack9.1$1 given-kws_123 given-args_124 syntax-literals-boxes_125 mpis_126 self_127)))"
" null"
" '(#:skip-deserialize?)"
"(let-values(((generate-lazy-syntax-literals!_128)"
"(case-lambda"
"((syntax-literals-boxes_129 mpis_130 self_131)"
"(unpack9.1$1 null null syntax-literals-boxes_129 mpis_130 self_131)))))"
" generate-lazy-syntax-literals!_128)))"
"(define-values"
"(generate-lazy-syntax-literal-lookup)"
"(lambda(phase_132 pos_133)"
"(list"
" 'let-values"
"(list(list '(stx)(generate-eager-syntax-literal-lookup phase_132 pos_133)))"
"(list 'if 'stx 'stx(list get-syntax-literal!-id(list 'quote phase_132)(list 'quote pos_133))))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(syntax-literals-boxes_134 mpis_135 base-phase_136 self_137 ns_138)"
"(let-values(((syntax-literalss_139)(map2 unbox syntax-literals-boxes_134)))"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(generate-deserialize"
"(cons"
"(encode-namespace-scopes ns_138)"
"(append"
"(alt-reverse"
"(let-values(((start_140) '0)((end_141) base-phase_136)((inc_142) '1))"
"(begin"
"(if(if(real? start_140)(if(real? end_141)(real? inc_142) '#f) '#f)"
"(void)"
"(let-values()(in-range start_140 end_141 inc_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(fold-var_144 pos_145)"
"(if(< pos_145 end_141)"
"(let-values(((i_146) pos_145))"
"(if '#t"
"(let-values(((fold-var_147)"
"(let-values(((fold-var_148) fold-var_144))"
"(let-values(((fold-var_149)"
"(let-values()"
"(cons(let-values() null) fold-var_148))))"
"(values fold-var_149)))))"
"(if '#t(for-loop_143 fold-var_147(+ pos_145 inc_142)) fold-var_147))"
" fold-var_144))"
" fold-var_144))))"
" for-loop_143)"
" null"
" start_140))))"
"(map2 alt-reverse syntax-literalss_139)))"
" mpis_135)))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stxs)"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_136 dest-phase-id))"
"(add-module-path-index! mpis_135 self_137)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '(stxs))))"
" '((cdr ns+stxss)))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(phase_150 pos_151)"
"(list 'vector-ref(list 'vector-ref syntax-literalss-id(list 'quote phase_150))(list 'quote pos_151))))"
"(define-values"
"(syntax-literals-as-vectors)"
"(lambda(syntax-literals-boxes_152 base-phase_153)"
"(list->vector"
"(append"
"(alt-reverse"
"(let-values(((start_154) '0)((end_155) base-phase_153)((inc_156) '1))"
"(begin"
"(if(if(real? start_154)(if(real? end_155)(real? inc_156) '#f) '#f)"
"(void)"
"(let-values()(in-range start_154 end_155 inc_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_158 pos_159)"
"(if(< pos_159 end_155)"
"(let-values(((i_160) pos_159))"
"(if '#t"
"(let-values(((fold-var_161)"
"(let-values(((fold-var_162) fold-var_158))"
"(let-values(((fold-var_163)"
"(let-values()"
"(cons(let-values() '#f) fold-var_162))))"
"(values fold-var_163)))))"
"(if '#t(for-loop_157 fold-var_161(+ pos_159 inc_156)) fold-var_161))"
" fold-var_158))"
" fold-var_158))))"
" for-loop_157)"
" null"
" start_154))))"
"(map2 list->vector(map2 alt-reverse(map2 unbox syntax-literals-boxes_152)))))))"
"(define-values(local-key->symbol)(lambda(key_164) key_164))"
"(define-values"
"(select-fresh)"
"(lambda(sym_165 header_166)"
"(if(symbol-conflicts? sym_165 header_166)"
"((letrec-values(((loop_167)"
"(lambda(pos_168)"
" (let-values (((new-sym_169) (string->symbol (format '\"~a/~a\" pos_168 sym_165))))"
"(if(symbol-conflicts? new-sym_169 header_166)(loop_167(add1 pos_168)) new-sym_169)))))"
" loop_167)"
" '1)"
" sym_165)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_170 header_171)"
"(let-values(((or-part_172)(built-in-symbol? sym_170)))"
"(if or-part_172 or-part_172(hash-ref(header-define-and-import-syms header_171) sym_170 '#f)))))"
"(define-values"
"(register-required-variable-use!18.1)"
"(lambda(defined?11_173 defined?12_174 header13_175 mpi14_176 phase15_177 sym16_178 extra-inspector17_179)"
"(let-values(((header_180) header13_175))"
"(let-values(((mpi_181) mpi14_176))"
"(let-values(((phase_182) phase15_177))"
"(let-values(((sym_183) sym16_178))"
"(let-values(((extra-inspector_184) extra-inspector17_179))"
"(let-values(((defined?_185)(if defined?12_174 defined?11_173 '#f)))"
"(let-values()"
"(let-values(((key_186)(variable-use2.1(module-use1.1 mpi_181 phase_182) sym_183)))"
"(let-values(((variable-uses_187)(header-require-var-to-import-sym header_180)))"
"(let-values(((var-sym_188)"
"(let-values(((or-part_189)(hash-ref variable-uses_187 key_186 '#f)))"
"(if or-part_189"
" or-part_189"
"(let-values(((sym_190)(select-fresh(variable-use-sym key_186) header_180)))"
"(begin"
"(hash-set! variable-uses_187 key_186 sym_190)"
"(set-header-require-vars-in-order!"
" header_180"
"(cons key_186(header-require-vars-in-order header_180)))"
"(hash-set!"
"(header-define-and-import-syms header_180)"
" sym_190"
"(if defined?_185 'defined 'required))"
" sym_190))))))"
"(begin"
"(if extra-inspector_184"
"(let-values()"
"(let-values(((extra-inspectors_191)(header-import-sym-to-extra-inspectors header_180)))"
"(hash-update!"
" extra-inspectors_191"
" var-sym_188"
"(lambda(s_192)(set-add s_192 extra-inspector_184))"
" '#hasheq())))"
"(void))"
" var-sym_188)))))))))))))"
"(define-values"
"(unpack19.1$1)"
"(lambda(given-kws_193 given-args_194 header13_195 mpi14_196 phase15_197 sym16_198 extra-inspector17_199)"
"(let-values(((defined?12_200)(pair? given-kws_193)))"
"(let-values(((defined?11_201)(if defined?12_200(car given-args_194)(void))))"
"(register-required-variable-use!18.1"
" defined?11_201"
" defined?12_200"
" header13_195"
" mpi14_196"
" phase15_197"
" sym16_198"
" extra-inspector17_199)))))"
"(define-values"
"(register-required-variable-use!20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_202 given-argc_203)"
"(if(= given-argc_203 '7)"
"(let-values(((l1_204) given-kws_202))"
"(let-values(((l1_205)(if(null? l1_204) l1_204(if(eq?(car l1_204) '#:defined?)(cdr l1_204) l1_204))))"
"(null? l1_205)))"
" '#f))"
"(case-lambda"
"((given-kws_206 given-args_207 header_208 mpi_209 phase_210 sym_211 extra-inspector_212)"
"(unpack19.1$1 given-kws_206 given-args_207 header_208 mpi_209 phase_210 sym_211 extra-inspector_212)))"
" null"
" '(#:defined?)"
"(let-values(((register-required-variable-use!_213)"
"(case-lambda"
"((header_214 mpi_215 phase_216 sym_217 extra-inspector_218)"
"(unpack19.1$1 null null header_214 mpi_215 phase_216 sym_217 extra-inspector_218)))))"
" register-required-variable-use!_213)))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_219 def-sym_220)(hash-set!(header-define-and-import-syms header_219) def-sym_220 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_221 var-sym_222)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_221) var-sym_222 '#f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_223 phase_224 cctx_225)"
"(let-values(((mod-use-to-link-sym_226)"
"(let-values(((lst_228)(header-require-vars-in-order header_223)))"
"(begin"
"(if(list? lst_228)(void)(let-values()(in-list lst_228)))"
"((letrec-values(((for-loop_229)"
"(lambda(ht_230 lst_231)"
"(if(pair? lst_231)"
"(let-values(((vu_232)(unsafe-car lst_231)))"
"(if '#t"
"(let-values(((ht_233)"
"(let-values(((ht_234) ht_230))"
"(let-values(((ht_235)"
"(let-values()"
"(let-values(((mu_236)"
"(variable-use-module-use"
" vu_232)))"
"(if(let-values(((or-part_237)"
"(hash-ref"
" ht_234"
" mu_236"
" '#f)))"
"(if or-part_237"
" or-part_237"
"(eq?"
"(module-use-module mu_236)"
"(compile-context-self"
" cctx_225))))"
" ht_234"
"(hash-set"
" ht_234"
" mu_236"
"(string->symbol"
"(format"
" '\"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_236))"
"(module-use-phase mu_236)"
"(hash-count ht_234)))))))))"
"(values ht_235)))))"
"(if '#t(for-loop_229 ht_233(unsafe-cdr lst_231)) ht_233))"
" ht_230))"
" ht_230))))"
" for-loop_229)"
" '#hash()"
" lst_228)))))"
"(let-values(((link-mod-uses_227)(hash-keys mod-use-to-link-sym_226)))"
"(values"
" link-mod-uses_227"
"(alt-reverse"
"(let-values(((lst_238) link-mod-uses_227))"
"(begin"
"(if(list? lst_238)(void)(let-values()(in-list lst_238)))"
"((letrec-values(((for-loop_239)"
"(lambda(fold-var_240 lst_241)"
"(if(pair? lst_241)"
"(let-values(((mu_242)(unsafe-car lst_241)))"
"(if '#t"
"(let-values(((fold-var_243)"
"(let-values(((fold-var_244) fold-var_240))"
"(let-values(((fold-var_245)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_246)"
"(header-require-vars-in-order"
" header_223)))"
"(begin"
"(if(list? lst_246)"
"(void)"
"(let-values()(in-list lst_246)))"
"((letrec-values(((for-loop_247)"
"(lambda(fold-var_248"
" lst_249)"
"(if(pair? lst_249)"
"(let-values(((vu_250)"
"(unsafe-car"
" lst_249)))"
"(if '#t"
"(let-values(((fold-var_251)"
"(let-values(((fold-var_252)"
" fold-var_248))"
"(if(equal?"
" mu_242"
"(variable-use-module-use"
" vu_250))"
"(let-values(((fold-var_253)"
" fold-var_252))"
"(let-values(((fold-var_254)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_255)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_223)"
" vu_250)))"
"(list"
"(variable-use-sym"
" vu_250)"
" var-sym_255)))"
" fold-var_253))))"
"(values"
" fold-var_254)))"
" fold-var_252))))"
"(if '#t"
"(for-loop_247"
" fold-var_251"
"(unsafe-cdr"
" lst_249))"
" fold-var_251))"
" fold-var_248))"
" fold-var_248))))"
" for-loop_247)"
" null"
" lst_246)))))"
" fold-var_244))))"
"(values fold-var_245)))))"
"(if '#t(for-loop_239 fold-var_243(unsafe-cdr lst_241)) fold-var_243))"
" fold-var_240))"
" fold-var_240))))"
" for-loop_239)"
" null"
" lst_238))))"
"(alt-reverse"
"(let-values(((lst_256) link-mod-uses_227))"
"(begin"
"(if(list? lst_256)(void)(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(fold-var_258 lst_259)"
"(if(pair? lst_259)"
"(let-values(((mu_260)(unsafe-car lst_259)))"
"(if '#t"
"(let-values(((fold-var_261)"
"(let-values(((fold-var_262) fold-var_258))"
"(let-values(((fold-var_263)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_264)"
"(alt-reverse"
"(let-values(((lst_265)"
"(header-require-vars-in-order"
" header_223)))"
"(begin"
"(if(list? lst_265)"
"(void)"
"(let-values()"
"(in-list lst_265)))"
"((letrec-values(((for-loop_266)"
"(lambda(fold-var_267"
" lst_268)"
"(if(pair?"
" lst_268)"
"(let-values(((vu_269)"
"(unsafe-car"
" lst_268)))"
"(if '#t"
"(let-values(((fold-var_270)"
"(let-values(((fold-var_271)"
" fold-var_267))"
"(if(equal?"
" mu_260"
"(variable-use-module-use"
" vu_269))"
"(let-values(((fold-var_272)"
" fold-var_271))"
"(let-values(((fold-var_273)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_274)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_223)"
" vu_269)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_223)"
" var-sym_274"
" '#f)))"
" fold-var_272))))"
"(values"
" fold-var_273)))"
" fold-var_271))))"
"(if '#t"
"(for-loop_266"
" fold-var_270"
"(unsafe-cdr"
" lst_268))"
" fold-var_270))"
" fold-var_267))"
" fold-var_267))))"
" for-loop_266)"
" null"
" lst_265))))))"
"(if(ormap2 values extra-inspectorss_264)"
" extra-inspectorss_264"
" '#f)))"
" fold-var_262))))"
"(values fold-var_263)))))"
"(if '#t(for-loop_257 fold-var_261(unsafe-cdr lst_259)) fold-var_261))"
" fold-var_258))"
" fold-var_258))))"
" for-loop_257)"
" null"
" lst_256))))"
"(alt-reverse"
"(let-values(((lst_275)(header-require-vars-in-order header_223)))"
"(begin"
"(if(list? lst_275)(void)(let-values()(in-list lst_275)))"
"((letrec-values(((for-loop_276)"
"(lambda(fold-var_277 lst_278)"
"(if(pair? lst_278)"
"(let-values(((vu_279)(unsafe-car lst_278)))"
"(if '#t"
"(let-values(((fold-var_280)"
"(let-values(((fold-var_281) fold-var_277))"
"(if(eq?"
"(module-use-module(variable-use-module-use vu_279))"
"(compile-context-self cctx_225))"
"(let-values(((fold-var_282) fold-var_281))"
"(let-values(((fold-var_283)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_284)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_223)"
" vu_279)))"
"(list"
" var-sym_284"
"(variable-use-sym vu_279))))"
" fold-var_282))))"
"(values fold-var_283)))"
" fold-var_281))))"
"(if '#t(for-loop_276 fold-var_280(unsafe-cdr lst_278)) fold-var_280))"
" fold-var_277))"
" fold-var_277))))"
" for-loop_276)"
" null"
" lst_275)))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_285)"
"(let-values(((p_286 base_287)(1/module-path-index-split mpi_285)))"
"(if(symbol? p_286)"
"(let-values() p_286)"
"(if(path? p_286)"
"(let-values()"
" (let-values (((base_288 name_289 dir?_290) (split-path p_286))) (path-replace-extension name_289 '#\"\")))"
"(if(string? p_286)"
" (let-values () (path-replace-extension p_286 '#\"\"))"
"(if(if(pair? p_286)(eq?(car p_286) 'quote) '#f)"
"(let-values()(cadr p_286))"
"(if(if(pair? p_286)(eq?(car p_286) 'file) '#f)"
"(let-values()"
"(let-values(((base_291 name_292 dir?_293)(split-path(cadr p_286))))"
" (path-replace-extension name_292 '#\"\")))"
"(if(if(pair? p_286)(eq?(car p_286) 'lib) '#f)"
" (let-values () (path-replace-extension (cadr p_286) '#\"\"))"
"(let-values() 'module))))))))))"
"(define-values"
"(instance-imports)"
"(list"
"(list 'namespace ns-id)"
"(list 'phase-shift phase-shift-id)"
"(list 'self self-id)"
"(list 'bulk-binding-registry bulk-binding-registry-id)"
"(list 'inspector inspector-id)"
"(list 'set-transformer! set-transformer!-id)))"
"(define-values"
"(lifted/1.1$14)"
"(make-required 'make-instance-instance(case-lambda((self_2)(apply missing-kw self_2 null))) '#f '#f))"
"(define-values"
"(make-instance-instance15.1)"
"(lambda(bulk-binding-registry4_3"
" inspector5_4"
" namespace1_5"
" phase-shift2_6"
" record-root-context!7_7"
" record-root-context!14_8"
" self3_9"
" set-transformer!6_10)"
"(let-values(((ns_11) namespace1_5))"
"(let-values(((phase-shift_12) phase-shift2_6))"
"(let-values(((self_13) self3_9))"
"(let-values(((bulk-binding-registry_14) bulk-binding-registry4_3))"
"(let-values(((inspector_15) inspector5_4))"
"(let-values(((set-transformer!_16) set-transformer!6_10))"
"(let-values(((record-root-context!_17)(if record-root-context!14_8 record-root-context!7_7 '#f)))"
"(let-values()"
"(let-values(((i_18)(1/make-instance 'instance)))"
"(begin"
"(1/instance-set-variable-value! i_18 'namespace ns_11)"
"(1/instance-set-variable-value! i_18 'phase-shift phase-shift_12)"
"(1/instance-set-variable-value! i_18 'self self_13)"
"(1/instance-set-variable-value! i_18 'bulk-binding-registry bulk-binding-registry_14)"
"(1/instance-set-variable-value! i_18 'inspector inspector_15)"
"(1/instance-set-variable-value! i_18 'set-transformer! set-transformer!_16)"
"(if record-root-context!_17"
"(let-values()"
"(1/instance-set-variable-value! i_18 'record-root-context! record-root-context!_17))"
"(void))"
" i_18))))))))))))"
"(define-values"
"(unpack16.1$1)"
"(lambda(given-kws_19 given-args_20)"
"(let-values(((bulk-binding-registry4_21)(car given-args_20))"
"((given-kws_22)(cdr given-kws_19))"
"((given-args_23)(cdr given-args_20)))"
"(let-values(((inspector5_24)(car given-args_23))"
"((given-kws_25)(cdr given-kws_22))"
"((given-args_26)(cdr given-args_23)))"
"(let-values(((namespace1_27)(car given-args_26))"
"((given-kws_28)(cdr given-kws_25))"
"((given-args_29)(cdr given-args_26)))"
"(let-values(((phase-shift2_30)(car given-args_29))"
"((given-kws_31)(cdr given-kws_28))"
"((given-args_32)(cdr given-args_29)))"
"(let-values(((record-root-context!14_33)"
"(if(pair? given-kws_31)(eq? '#:record-root-context!(car given-kws_31)) '#f)))"
"(let-values(((record-root-context!7_34)(if record-root-context!14_33(car given-args_32)(void)))"
"((given-kws_35)(if record-root-context!14_33(cdr given-kws_31) given-kws_31))"
"((given-args_36)(if record-root-context!14_33(cdr given-args_32) given-args_32)))"
"(let-values(((self3_37)(car given-args_36))"
"((given-kws_38)(cdr given-kws_35))"
"((given-args_39)(cdr given-args_36)))"
"(let-values(((set-transformer!6_40)(car given-args_39)))"
"(make-instance-instance15.1"
" bulk-binding-registry4_21"
" inspector5_24"
" namespace1_27"
" phase-shift2_30"
" record-root-context!7_34"
" record-root-context!14_33"
" self3_37"
" set-transformer!6_40)))))))))))"
"(define-values"
"(make-instance-instance17.1)"
"(lifted/1.1$14"
"(lambda(given-kws_41 given-argc_42)"
"(if(= given-argc_42 '2)"
"(subsets?"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" given-kws_41"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:record-root-context!"
" #:self"
" #:set-transformer!))"
" '#f))"
"(case-lambda((given-kws_43 given-args_44)(unpack16.1$1 given-kws_43 given-args_44)))"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:record-root-context! #:self #:set-transformer!)))"
"(define-values"
"(eager-instance-imports)"
"(list*"
"(list 'namespace ns-id)"
"(list 'dest-phase dest-phase-id)"
"(list 'self self-id)"
"(list 'bulk-binding-registry bulk-binding-registry-id)"
"(list 'inspector inspector-id)"
" '(swap-top-level-scopes)))"
"(define-values"
"(lifted/1.1$11)"
"(make-required 'make-eager-instance-instance(case-lambda((self_2)(apply missing-kw self_2 null))) '#f '#f))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_3 dest-phase2_4 inspector5_5 namespace1_6 self3_7)"
"(let-values(((ns_8) namespace1_6))"
"(let-values(((dest-phase_9) dest-phase2_4))"
"(let-values(((self_10) self3_7))"
"(let-values(((bulk-binding-registry_11) bulk-binding-registry4_3))"
"(let-values(((inspector_12) inspector5_5))"
"(let-values()"
"(let-values(((i_13)(1/make-instance 'instance)))"
"(begin"
"(1/instance-set-variable-value! i_13 'namespace ns_8)"
"(1/instance-set-variable-value! i_13 'dest-phase dest-phase_9)"
"(1/instance-set-variable-value! i_13 'self self_10)"
"(1/instance-set-variable-value! i_13 'bulk-binding-registry bulk-binding-registry_11)"
"(1/instance-set-variable-value! i_13 'inspector inspector_12)"
"(1/instance-set-variable-value! i_13 'swap-top-level-scopes swap-top-level-scopes)"
" i_13))))))))))"
"(define-values"
"(unpack12.1)"
"(lambda(given-kws_14 given-args_15)"
"(let-values(((bulk-binding-registry4_16)(car given-args_15))"
"((given-kws_17)(cdr given-kws_14))"
"((given-args_18)(cdr given-args_15)))"
"(let-values(((dest-phase2_19)(car given-args_18))"
"((given-kws_20)(cdr given-kws_17))"
"((given-args_21)(cdr given-args_18)))"
"(let-values(((inspector5_22)(car given-args_21))"
"((given-kws_23)(cdr given-kws_20))"
"((given-args_24)(cdr given-args_21)))"
"(let-values(((namespace1_25)(car given-args_24))"
"((given-kws_26)(cdr given-kws_23))"
"((given-args_27)(cdr given-args_24)))"
"(let-values(((self3_28)(car given-args_27)))"
"(make-eager-instance-instance11.1"
" bulk-binding-registry4_16"
" dest-phase2_19"
" inspector5_22"
" namespace1_25"
" self3_28))))))))"
"(define-values"
"(make-eager-instance-instance13.1)"
"(lifted/1.1$11"
"(lambda(given-kws_29 given-argc_30)"
"(if(= given-argc_30 '2)"
"(let-values(((l2_31) given-kws_29))"
"(if(pair? l2_31)"
"(if(eq?(car l2_31) '#:bulk-binding-registry)"
"(let-values(((l2_32)(cdr l2_31)))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:dest-phase)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)"
"(if(eq?(car l2_33) '#:inspector)"
"(let-values(((l2_34)(cdr l2_33)))"
"(if(pair? l2_34)"
"(if(eq?(car l2_34) '#:namespace)"
"(let-values(((l2_35)(cdr l2_34)))"
"(if(pair? l2_35)(if(eq?(car l2_35) '#:self)(null?(cdr l2_35)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda((given-kws_36 given-args_37)(unpack12.1 given-kws_36 given-args_37)))"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)))"
"(define-values(kernel-primitive-table)(primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(datum->syntax$1)(hash-ref kernel-primitive-table 'datum->syntax))"
"(define-values(syntax->datum$2)(hash-ref kernel-primitive-table 'syntax->datum))"
"(define-values(1/syntax-property-symbol-keys)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(1/syntax-position)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(1/syntax-column)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(1/syntax-source)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(1/syntax-e)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(define-values"
"(correlate)"
"(lambda(src-e_1 s-exp_2)"
"(let-values(((e_3)"
"(if(datum-has-elements? s-exp_2)"
"(let-values()(datum->correlated(correlated-e(datum->correlated s-exp_2)) src-e_1))"
"(let-values()(datum->correlated s-exp_2 src-e_1)))))"
"(let-values(((maybe-n_4)(1/syntax-property src-e_1 'inferred-name)))"
"(if maybe-n_4(1/syntax-property e_3 'inferred-name maybe-n_4) e_3)))))"
"(define-values(correlated?)(lambda(e_5)(1/syntax? e_5)))"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_6)"
"(lambda(d3_7 srcloc1_8 srcloc2_9)"
"(let-values(((d_10) d3_7))"
"(let-values(((srcloc_11)(if srcloc2_9 srcloc1_8 '#f)))"
"(let-values()(datum->syntax$1 '#f d_10 srcloc_11)))))))"
"(case-lambda"
"((d_12)(datum->correlated4_6 d_12 '#f '#f))"
"((d_13 srcloc1_14)(datum->correlated4_6 d_13 srcloc1_14 '#t)))))"
"(define-values(correlated-e)(lambda(e_15)(if(1/syntax? e_15)(1/syntax-e e_15) e_15)))"
"(define-values(correlated-cadr)(lambda(e_16)(car(correlated-e(cdr(correlated-e e_16))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_17)(let-values(((l_18)(correlated-e e_17)))(if(list? l_18)(length l_18) '#f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_19)"
"((letrec-values(((loop_20)"
"(lambda(e_21)"
"(if(pair? e_21)"
"(let-values()(cons(car e_21)(loop_20(cdr e_21))))"
"(if(null? e_21)"
"(let-values() null)"
"(if(1/syntax? e_21)"
"(let-values()(loop_20(1/syntax-e e_21)))"
" (let-values () (error 'correlate->list '\"not a list\"))))))))"
" loop_20)"
" e_19)))"
"(define-values"
"(correlated->datum)"
"(lambda(e_22)(datum-map e_22(lambda(tail?_23 d_24)(if(1/syntax? d_24)(syntax->datum$2 d_24) d_24)))))"
"(define-values"
"(correlated-property)"
"(case-lambda((e_25 k_26)(1/syntax-property e_25 k_26))((e_27 k_28 v_29)(1/syntax-property e_27 k_28 v_29))))"
"(define-values"
"(match-correlated try-match-correlated)"
"(make-syntax-matchers 1/syntax? 1/syntax-e(lambda(false_30 str_31 e_32)(error str_31))))"
"(define-values"
"(syntax->host-syntax)"
"(lambda(v_1)"
"(syntax-map"
" v_1"
"(lambda(tail?_2 v_3) v_3)"
"(lambda(orig-s_4 d_5)"
"(let-values(((s_6)(datum->syntax$1 '#f d_5(srcloc->vector(syntax-srcloc orig-s_4)))))"
"(let-values(((keys_7)(syntax-property-symbol-keys$1 orig-s_4)))"
"(let-values(((lst_8) keys_7))"
"(begin"
"(if(list? lst_8)(void)(let-values()(in-list lst_8)))"
"((letrec-values(((for-loop_9)"
"(lambda(s_10 lst_11)"
"(if(pair? lst_11)"
"(let-values(((key_12)(unsafe-car lst_11)))"
"(if '#t"
"(let-values(((s_13)"
"(let-values(((s_14) s_10))"
"(let-values(((s_15)"
"(let-values()"
"(1/syntax-property"
" s_14"
" key_12"
"(syntax-property$1 orig-s_4 key_12)))))"
"(values s_15)))))"
"(if '#t(for-loop_9 s_13(unsafe-cdr lst_11)) s_13))"
" s_10))"
" s_10))))"
" for-loop_9)"
" s_6"
" lst_8))))))"
" syntax-e$1)))"
"(define-values"
"(srcloc->vector)"
"(lambda(s_16)"
"(if s_16"
"(vector(srcloc-source s_16)(srcloc-line s_16)(srcloc-column s_16)(srcloc-position s_16)(srcloc-span s_16))"
" '#f)))"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(let-values(((e_3)"
"(if(if(datum-has-elements? s-exp_2)(syntax-srcloc stx_1) '#f)"
"(let-values()"
"(datum->correlated"
"(correlated-e(datum->correlated s-exp_2))"
"(srcloc->vector(syntax-srcloc stx_1))))"
"(let-values()(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1)))))))"
"(let-values(((maybe-n_4)(syntax-property$1 stx_1 'inferred-name)))"
"(if maybe-n_4"
"(correlated-property e_3 'inferred-name(if(syntax?$1 maybe-n_4)(syntax->datum$1 maybe-n_4) maybe-n_4))"
" e_3)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile5_1)"
"(lambda(in-s3_2 cctx4_3 result-used?1_4 result-used?2_5)"
"(let-values(((in-s_6) in-s3_2))"
"(let-values(((cctx_7) cctx4_3))"
"(let-values(((result-used?_8)(if result-used?2_5 result-used?1_4 '#t)))"
"(let-values()"
"(let-values(((compile_9)"
"(lambda(s_10 result-used?_11)(1/compile s_10 cctx_7 result-used?_11))))"
"(let-values(((s_12)(syntax-disarm$1 in-s_6)))"
"(if(pair?(syntax-e$1 s_12))"
"(let-values()"
"(let-values(((phase_13)(compile-context-phase cctx_7)))"
"(let-values(((core-sym_14)(core-form-sym s_12 phase_13)))"
"(let-values(((tmp_15) core-sym_14))"
"(let-values(((index_16)"
"(if(symbol? tmp_15)"
"(hash-ref"
" '#hasheq((#%app . 5)"
"(with-continuation-mark . 7)"
"(begin . 8)"
"(module . 2)"
"(#%expression . 11)"
"(set! . 9)"
"(let-values . 10)"
"(if . 6)"
"(quote-syntax . 13)"
"(quote . 12)"
"(letrec-values . 10)"
"(begin0 . 8)"
"(#%variable-reference . 14)"
"(lambda . 3)"
"(case-lambda . 4)"
"(#%top . 15)"
"(module* . 2))"
" tmp_15"
"(lambda() '0))"
"(if(equal? tmp_15 '#f)"
"(let-values() '1)"
"(let-values() '0)))))"
"(if(unsafe-fx< index_16 '7)"
"(if(unsafe-fx< index_16 '3)"
"(if(unsafe-fx< index_16 '1)"
" (let-values () (error '\"unrecognized core form:\" core-sym_14))"
"(if(unsafe-fx< index_16 '2)"
"(let-values()"
"(error"
" '\"internal error; not a core form:\"\n"
" s_12"
" '\"at phase:\""
" phase_13))"
" (let-values () (error '\"not a core expression form:\" s_12))))"
"(if(unsafe-fx< index_16 '4)"
"(let-values()"
"(if result-used?_8"
"(let-values()"
"(let-values(((m_17)(match-syntax s_12 '(lambda formals body))))"
"(correlate*"
" s_12"
"(list*"
" 'lambda"
"(compile-lambda(m_17 'formals)(m_17 'body) cctx_7)))))"
"(let-values()"
"(correlate* s_12(list 'quote(syntax->datum$1 s_12))))))"
"(if(unsafe-fx< index_16 '5)"
"(let-values()"
"(if result-used?_8"
"(let-values()"
"(let-values(((m_18)"
"(match-syntax"
" s_12"
" '(case-lambda(formals body) ...))))"
"(correlate*"
" s_12"
"(list*"
" 'case-lambda"
"(alt-reverse"
"(let-values(((lst_19)(m_18 'formals))"
"((lst_20)(m_18 'body)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()(in-list lst_19)))"
"(if(list? lst_20)"
"(void)"
"(let-values()(in-list lst_20)))"
"((letrec-values(((for-loop_21)"
"(lambda(fold-var_22 lst_23 lst_24)"
"(if(if(pair? lst_23)"
"(pair? lst_24)"
" '#f)"
"(let-values(((formals_25)"
"(unsafe-car"
" lst_23))"
"((body_26)"
"(unsafe-car"
" lst_24)))"
"(if(if '#t '#t '#f)"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28)"
" fold-var_22))"
"(let-values(((fold-var_29)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
" formals_25"
" body_26"
" cctx_7))"
" fold-var_28))))"
"(values"
" fold-var_29)))))"
"(if(if '#t '#t '#f)"
"(for-loop_21"
" fold-var_27"
"(unsafe-cdr lst_23)"
"(unsafe-cdr lst_24))"
" fold-var_27))"
" fold-var_22))"
" fold-var_22))))"
" for-loop_21)"
" null"
" lst_19"
" lst_20))))))))"
"(let-values()"
"(correlate* s_12(list 'quote(syntax->datum$1 s_12))))))"
"(if(unsafe-fx< index_16 '6)"
"(let-values()"
"(let-values(((m_30)(match-syntax s_12 '(#%app . rest))))"
"(let-values(((es_31)"
"(let-values(((es_32)(m_30 'rest)))"
"(if(syntax?$1 es_32)"
"(syntax->list$1(syntax-disarm$1 es_32))"
" es_32))))"
"(alt-reverse"
"(let-values(((lst_33) es_31))"
"(begin"
"(if(list? lst_33)"
"(void)"
"(let-values()(in-list lst_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_35 lst_36)"
"(if(pair? lst_36)"
"(let-values(((s_37)"
"(unsafe-car lst_36)))"
"(if '#t"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39)"
" fold-var_35))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_9"
" s_37"
" '#t))"
" fold-var_39))))"
"(values"
" fold-var_40)))))"
"(if '#t"
"(for-loop_34"
" fold-var_38"
"(unsafe-cdr lst_36))"
" fold-var_38))"
" fold-var_35))"
" fold-var_35))))"
" for-loop_34)"
" null"
" lst_33)))))))"
"(let-values()"
"(let-values(((m_41)(match-syntax s_12 '(if tst thn els))))"
"(correlate*"
" s_12"
"(list"
" 'if"
"(compile_9(m_41 'tst) '#f)"
"(compile_9(m_41 'thn) result-used?_8)"
"(compile_9(m_41 'els) result-used?_8)))))))))"
"(if(unsafe-fx< index_16 '11)"
"(if(unsafe-fx< index_16 '8)"
"(let-values()"
"(let-values(((m_42)(match-syntax s_12 '(if key val body))))"
"(correlate*"
" s_12"
"(list"
" 'with-continuation-mark"
"(compile_9(m_42 'key) '#t)"
"(compile_9(m_42 'val) '#t)"
"(compile_9(m_42 'body) result-used?_8)))))"
"(if(unsafe-fx< index_16 '9)"
"(let-values()"
"(let-values(((m_43)(match-syntax s_12 '(begin e ...+))))"
"(let-values(((used-pos_44)"
"(let-values(((tmp_45) core-sym_14))"
"(if(equal? tmp_45 'begin0)"
"(let-values() '0)"
"(let-values()(sub1(length(m_43 'e))))))))"
"(correlate*"
" s_12"
"(list*"
" core-sym_14"
"(alt-reverse"
"(let-values(((lst_46)(m_43 'e))((start_47) '0))"
"(begin"
"(if(list? lst_46)"
"(void)"
"(let-values()(in-list lst_46)))"
"(if(exact-nonnegative-integer? start_47)"
"(void)"
"(let-values()(in-naturals start_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(fold-var_49 lst_50 pos_51)"
"(if(if(pair? lst_50) '#t '#f)"
"(let-values(((e_52)"
"(unsafe-car lst_50))"
"((i_53) pos_51))"
"(if(if '#t '#t '#f)"
"(let-values(((fold-var_54)"
"(let-values(((fold-var_55)"
" fold-var_49))"
"(let-values(((fold-var_56)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_9"
" e_52"
"(="
" i_53"
" used-pos_44)))"
" fold-var_55))))"
"(values"
" fold-var_56)))))"
"(if(if '#t '#t '#f)"
"(for-loop_48"
" fold-var_54"
"(unsafe-cdr lst_50)"
"(+ pos_51 '1))"
" fold-var_54))"
" fold-var_49))"
" fold-var_49))))"
" for-loop_48)"
" null"
" lst_46"
" start_47)))))))))"
"(if(unsafe-fx< index_16 '10)"
"(let-values()"
"(let-values(((m_57)(match-syntax s_12 '(set! id rhs))))"
"(correlate*"
" s_12"
"(let-values(((...der/compile/expr.rkt:91:27_58)"
" compile-identifier15.1)"
"((temp16_59)(m_57 'id))"
"((cctx17_60) cctx_7)"
"((temp18_61)(compile_9(m_57 'rhs) '#t)))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier15.1))"
"(compile-identifier13.1"
" temp18_61"
" '#t"
" '#f"
" '#f"
" temp16_59"
" cctx17_60)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:91:27_58"
" keyword-procedure-extract"
" '(#:set-to)"
" '4)"
" '(#:set-to)"
"(list temp18_61)"
" temp16_59"
" cctx17_60))))))"
"(let-values()"
"(compile-let core-sym_14 s_12 cctx_7 result-used?_8)))))"
"(if(unsafe-fx< index_16 '13)"
"(if(unsafe-fx< index_16 '12)"
"(let-values()"
"(let-values(((m_62)(match-syntax s_12 '(#%expression e))))"
"(compile_9(m_62 'e) result-used?_8)))"
"(let-values()"
"(let-values(((m_63)(match-syntax s_12 ''datum)))"
"(correlate* s_12(list 'quote(syntax->datum$1(m_63 'datum)))))))"
"(if(unsafe-fx< index_16 '14)"
"(let-values()"
"(let-values(((m_64)(match-syntax s_12 '(quote-syntax datum . _))))"
"(if result-used?_8"
"(compile-quote-syntax(m_64 'datum) phase_13 cctx_7)"
"(correlate*"
" s_12"
"(list 'quote(syntax->datum$1(m_64 'datum)))))))"
"(if(unsafe-fx< index_16 '15)"
"(let-values()"
"(let-values(((id-m_65)"
"(try-match-syntax s_12 '(#%variable-reference id))))"
"(let-values(((top-m_66)"
"(if(not id-m_65)"
"(try-match-syntax"
" s_12"
" '(#%variable-reference(#%top . id)))"
" '#f)))"
"(let-values(((id_67)"
"(let-values(((or-part_68)"
"(if id-m_65(id-m_65 'id) '#f)))"
"(if or-part_68"
" or-part_68"
"(if top-m_66(top-m_66 'id) '#f)))))"
"(correlate*"
" s_12"
"(if id_67"
"(list"
" '#%variable-reference"
"(let-values(((id19_69) id_67)((cctx20_70) cctx_7))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier15.1))"
"(compile-identifier13.1"
" '#f"
" '#f"
" '#f"
" '#f"
" id19_69"
" cctx20_70)"
"(compile-identifier15.1 id19_69 cctx20_70))))"
" '(#%variable-reference)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_7)"
"(let-values()"
"(error"
" '\"found `#%top` in a module body:\""
" s_12))"
"(void))"
"(values))))"
"(let-values(((m_71)(match-syntax s_12 '(#%top . id))))"
"(let-values(((...der/compile/expr.rkt:120:9_72)"
" compile-identifier15.1)"
"((temp21_73)(m_71 'id))"
"((cctx22_74) cctx_7)"
"((temp23_75) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier15.1))"
"(compile-identifier13.1"
" '#f"
" '#f"
" temp23_75"
" '#t"
" temp21_73"
" cctx22_74)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:120:9_72"
" keyword-procedure-extract"
" '(#:top?)"
" '4)"
" '(#:top?)"
"(list temp23_75)"
" temp21_73"
" cctx22_74))))))))))))))))"
"(if(identifier? s_12)"
"(let-values()"
"(let-values(((s24_76) s_12)((cctx25_77) cctx_7))"
"(if(variable-reference-constant?(#%variable-reference compile-identifier15.1))"
"(compile-identifier13.1 '#f '#f '#f '#f s24_76 cctx25_77)"
"(compile-identifier15.1 s24_76 cctx25_77))))"
" (let-values () (error '\"bad syntax after expansion:\" s_12)))))))))))))"
"(case-lambda"
"((in-s_78 cctx_79)(compile5_1 in-s_78 cctx_79 '#f '#f))"
"((in-s_80 cctx_81 result-used?1_82)(compile5_1 in-s_80 cctx_81 result-used?1_82 '#t)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_83 body_84 cctx_85)"
"(let-values(((phase_86)(compile-context-phase cctx_85)))"
"(let-values(((gen-formals_87)"
"((letrec-values(((loop_88)"
"(lambda(formals_89)"
"(if(identifier? formals_89)"
"(let-values()(local-id->symbol formals_89 phase_86))"
"(if(syntax?$1 formals_89)"
"(let-values()(loop_88(syntax-e$1 formals_89)))"
"(if(pair? formals_89)"
"(let-values()"
"(cons(loop_88(car formals_89))(loop_88(cdr formals_89))))"
"(let-values() null)))))))"
" loop_88)"
" formals_83)))"
"(list gen-formals_87(1/compile body_84 cctx_85))))))"
"(define-values"
"(compile-let)"
"(lambda(core-sym_90 s_91 cctx_92 result-used?_93)"
"(let-values(((rec?_94)(eq? core-sym_90 'letrec-values)))"
"(let-values(((m_95)(match-syntax s_91 '(let-values(((id ...) rhs) ...) body))))"
"(let-values(((phase_96)(compile-context-phase cctx_92)))"
"(let-values(((idss_97)(m_95 'id)))"
"(let-values(((symss_98)"
"(alt-reverse"
"(let-values(((lst_99) idss_97))"
"(begin"
"(if(list? lst_99)(void)(let-values()(in-list lst_99)))"
"((letrec-values(((for-loop_100)"
"(lambda(fold-var_101 lst_102)"
"(if(pair? lst_102)"
"(let-values(((ids_103)(unsafe-car lst_102)))"
"(if '#t"
"(let-values(((fold-var_104)"
"(let-values(((fold-var_105) fold-var_101))"
"(let-values(((fold-var_106)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_107)"
" ids_103))"
"(begin"
"(if(list? lst_107)"
"(void)"
"(let-values()"
"(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_109"
" lst_110)"
"(if(pair?"
" lst_110)"
"(let-values(((id_111)"
"(unsafe-car"
" lst_110)))"
"(if '#t"
"(let-values(((fold-var_112)"
"(let-values(((fold-var_113)"
" fold-var_109))"
"(let-values(((fold-var_114)"
"(let-values()"
"(cons"
"(let-values()"
"(local-id->symbol"
" id_111"
" phase_96))"
" fold-var_113))))"
"(values"
" fold-var_114)))))"
"(if '#t"
"(for-loop_108"
" fold-var_112"
"(unsafe-cdr"
" lst_110))"
" fold-var_112))"
" fold-var_109))"
" fold-var_109))))"
" for-loop_108)"
" null"
" lst_107)))))"
" fold-var_105))))"
"(values fold-var_106)))))"
"(if '#t"
"(for-loop_100 fold-var_104(unsafe-cdr lst_102))"
" fold-var_104))"
" fold-var_101))"
" fold-var_101))))"
" for-loop_100)"
" null"
" lst_99))))))"
"(correlate*"
" s_91"
"(list"
" core-sym_90"
"(alt-reverse"
"(let-values(((lst_115) symss_98)((lst_116)(m_95 'rhs)))"
"(begin"
"(if(list? lst_115)(void)(let-values()(in-list lst_115)))"
"(if(list? lst_116)(void)(let-values()(in-list lst_116)))"
"((letrec-values(((for-loop_117)"
"(lambda(fold-var_118 lst_119 lst_120)"
"(if(if(pair? lst_119)(pair? lst_120) '#f)"
"(let-values(((syms_121)(unsafe-car lst_119))"
"((rhs_122)(unsafe-car lst_120)))"
"(if(if '#t '#t '#f)"
"(let-values(((fold-var_123)"
"(let-values(((fold-var_124) fold-var_118))"
"(let-values(((fold-var_125)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" syms_121"
"(1/compile rhs_122 cctx_92)))"
" fold-var_124))))"
"(values fold-var_125)))))"
"(if(if '#t '#t '#f)"
"(for-loop_117 fold-var_123(unsafe-cdr lst_119)(unsafe-cdr lst_120))"
" fold-var_123))"
" fold-var_118))"
" fold-var_118))))"
" for-loop_117)"
" null"
" lst_115"
" lst_116))))"
"(1/compile(m_95 'body) cctx_92 result-used?_93))))))))))"
"(define-values"
"(compile-identifier13.1)"
"(lambda(set-to7_126 set-to9_127 top?8_128 top?10_129 s11_130 cctx12_131)"
"(let-values(((s_132) s11_130))"
"(let-values(((cctx_133) cctx12_131))"
"(let-values(((rhs_134)(if set-to9_127 set-to7_126 '#f)))"
"(let-values(((top?_135)(if top?10_129 top?8_128 '#f)))"
"(let-values()"
"(let-values(((phase_136)(compile-context-phase cctx_133)))"
"(let-values(((normal-b_137)"
"(let-values(((s26_140) s_132)((phase27_141) phase_136))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f s26_140 phase27_141)"
"(resolve+shift15.1 s26_140 phase27_141)))))"
"(let-values(((b_138)"
"(let-values(((or-part_142) normal-b_137))"
"(if or-part_142"
" or-part_142"
"(let-values(((temp28_143)(compile-context-self cctx_133))"
"((phase29_144) phase_136)"
"((temp30_145)(syntax-e$1 s_132)))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp28_143"
" phase29_144"
" temp30_145)"
"(make-module-binding22.1 temp28_143 phase29_144 temp30_145)))))))"
"(let-values(((sym_139)"
"(if(local-binding? b_138)"
"(let-values()"
"(let-values(((sym_146)(local-key->symbol(local-binding-key b_138))))"
"(begin"
"(if sym_146"
"(void)"
" (let-values () (error '\"missing a binding after expansion:\" s_132)))"
" sym_146)))"
"(if(module-binding? b_138)"
"(let-values()"
"(let-values(((mpi_147)"
"(if top?_135"
"(compile-context-self cctx_133)"
"(module-binding-module b_138))))"
"(let-values(((mod-name_148)(1/module-path-index-resolve mpi_147)))"
"(let-values(((ns_149)(compile-context-namespace cctx_133)))"
"(let-values(((mod_150)(namespace->module ns_149 mod-name_148)))"
"(if(if mod_150(module-primitive? mod_150) '#f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(zero?(module-binding-phase b_138))"
"(void)"
"(let-values()"
"(error"
" '\"internal error: non-zero phase for a primitive\")))"
"(values))))"
"(let-values((()"
"(begin"
"(if rhs_134"
"(let-values()"
"(error"
" '\"internal error: cannot assign to a primitive:\""
" s_132))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ns31_152) ns_149)"
"((mpi32_153) mpi_147)"
"((temp33_154) '0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" ns31_152"
" mpi32_153"
" temp33_154)"
"(namespace-module-instantiate!89.1"
" ns31_152"
" mpi32_153"
" temp33_154)))"
"(values))))"
"(let-values(((m-ns_151)"
"(let-values(((ns34_155) ns_149)"
"((mod-name35_156) mod-name_148)"
"((temp36_157) '0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" ns34_155"
" mod-name35_156"
" temp36_157)"
"(namespace->module-namespace75.1"
" ns34_155"
" mod-name35_156"
" temp36_157)))))"
"(module-binding-sym b_138))))))"
"(if(eq? mpi_147(compile-context-module-self cctx_133))"
"(let-values()"
"(let-values(((header_158)(compile-context-header cctx_133)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_158)"
"(module-binding-sym b_138))))"
"(let-values()"
"(let-values(((temp37_159)(compile-context-header cctx_133))"
"((mpi38_160) mpi_147)"
"((temp39_161)(module-binding-phase b_138))"
"((temp40_162)(module-binding-sym b_138))"
"((temp41_163)"
"(let-values(((or-part_164)"
"(module-binding-extra-inspector"
" b_138)))"
"(if or-part_164"
" or-part_164"
"(syntax-inspector s_132)))))"
"(if(variable-reference-constant?"
"(#%variable-reference register-required-variable-use!20.1))"
"(register-required-variable-use!18.1"
" '#f"
" '#f"
" temp37_159"
" mpi38_160"
" temp39_161"
" temp40_162"
" temp41_163)"
"(register-required-variable-use!20.1"
" temp37_159"
" mpi38_160"
" temp39_161"
" temp40_162"
" temp41_163)))))))))))"
" (let-values () (error '\"not a reference to a module or local binding:\" s_132))))))"
"(correlate* s_132(if rhs_134(list 'set! sym_139 rhs_134) sym_139)))))))))))))"
"(define-values"
"(unpack14.1$1)"
"(lambda(given-kws_165 given-args_166 s11_167 cctx12_168)"
"(let-values(((set-to9_169)(if(pair? given-kws_165)(eq? '#:set-to(car given-kws_165)) '#f)))"
"(let-values(((set-to7_170)(if set-to9_169(car given-args_166)(void)))"
"((given-kws_171)(if set-to9_169(cdr given-kws_165) given-kws_165))"
"((given-args_172)(if set-to9_169(cdr given-args_166) given-args_166)))"
"(let-values(((top?10_173)(pair? given-kws_171)))"
"(let-values(((top?8_174)(if top?10_173(car given-args_172)(void))))"
"(compile-identifier13.1 set-to7_170 set-to9_169 top?8_174 top?10_173 s11_167 cctx12_168)))))))"
"(define-values"
"(compile-identifier15.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_175 given-argc_176)"
"(if(= given-argc_176 '4)"
"(let-values(((l1_177) given-kws_175))"
"(let-values(((l1_178)(if(null? l1_177) l1_177(if(eq?(car l1_177) '#:set-to)(cdr l1_177) l1_177))))"
"(let-values(((l1_179) l1_178))"
"(let-values(((l1_180)(if(null? l1_179) l1_179(if(eq?(car l1_179) '#:top?)(cdr l1_179) l1_179))))"
"(null? l1_180)))))"
" '#f))"
"(case-lambda"
"((given-kws_181 given-args_182 s_183 cctx_184)(unpack14.1$1 given-kws_181 given-args_182 s_183 cctx_184)))"
" null"
" '(#:set-to #:top?)"
"(let-values(((compile-identifier_185)(case-lambda((s_186 cctx_187)(unpack14.1$1 null null s_186 cctx_187)))))"
" compile-identifier_185)))"
"(define-values"
"(local-id->symbol)"
"(lambda(id_188 phase_189)"
"(let-values(((b_190)"
"(let-values(((id42_191) id_188)((phase43_192) phase_189))"
"(if(variable-reference-constant?(#%variable-reference resolve23.1))"
"(resolve21.1 '#f '#f '#f '#f '#f '#f id42_191 phase43_192)"
"(resolve23.1 id42_191 phase43_192)))))"
"(begin"
" (if (local-binding? b_190) (void) (let-values () (error '\"bad binding:\" id_188 phase_189)))"
"(local-key->symbol(local-binding-key b_190))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_193 phase_194 cctx_195)"
"(let-values(((pos_196)(add-syntax-literal!(compile-context-header cctx_195) q_193)))"
"(if(compile-context-lazy-syntax-literals? cctx_195)"
"(let-values()(generate-lazy-syntax-literal-lookup phase_194 pos_196))"
"(let-values()(generate-eager-syntax-literal-lookup phase_194 pos_196))))))"
"(define-values"
"(def-ids-to-binding-syms)"
"(lambda(ids_1 phase_2 self_3)"
"(alt-reverse"
"(let-values(((lst_4) ids_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(if '#t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_12)"
"(let-values(((...ile/id-to-symbol.rkt:12:14_13)"
" resolve+shift15.1)"
"((id1_14) id_8)"
"((phase2_15) phase_2)"
"((temp3_16) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp3_16"
" '#t"
" '#f"
" '#f"
" id1_14"
" phase2_15)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ile/id-to-symbol.rkt:12:14_13"
" keyword-procedure-extract"
" '(#:immediate?)"
" '4)"
" '(#:immediate?)"
"(list temp3_16)"
" id1_14"
" phase2_15)))))"
"(begin"
"(if(if(module-binding? b_12)"
"(if(eq?"
" self_3"
"(module-binding-module b_12))"
"(eqv?"
" phase_2"
"(module-binding-phase b_12))"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(error"
" '\"bad binding for definition:\""
" id_8"
" self_3"
" '\"vs.\""
"(if b_12"
"(module-binding-module b_12)"
" '#f)"
" phase_2)))"
"(module-binding-sym b_12))))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if '#t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))"
"(define-values"
"(compile-forms12.1)"
"(lambda(compiled-expression-callback3_1"
" compiled-expression-callback7_2"
" encoded-root-expand-ctx-box1_3"
" encoded-root-expand-ctx-box5_4"
" other-form-callback4_5"
" other-form-callback8_6"
" root-ctx-only-if-syntax?2_7"
" root-ctx-only-if-syntax?6_8"
" bodys9_9"
" cctx10_10"
" mpis11_11)"
"(let-values(((bodys_12) bodys9_9))"
"(let-values(((cctx_13) cctx10_10))"
"(let-values(((mpis_14) mpis11_11))"
"(let-values(((encoded-root-expand-ctx-box_15)"
"(if encoded-root-expand-ctx-box5_4 encoded-root-expand-ctx-box1_3 '#f)))"
"(let-values(((root-ctx-only-if-syntax?_16)"
"(if root-ctx-only-if-syntax?6_8 root-ctx-only-if-syntax?2_7 '#f)))"
"(let-values(((compiled-expression-callback_17)"
"(if compiled-expression-callback7_2 compiled-expression-callback3_1 void)))"
"(let-values(((other-form-callback_18)(if other-form-callback8_6 other-form-callback4_5 void)))"
"(let-values()"
"(let-values(((phase_19)(compile-context-phase cctx_13)))"
"(let-values(((self_20)(compile-context-self cctx_13)))"
"(let-values(((phase-to-body_21)(make-hasheqv)))"
"(let-values(((add-body!_22)"
"(lambda(phase_46 body_47)"
"(hash-update!"
" phase-to-body_21"
" phase_46"
"(lambda(l_48)(cons body_47 l_48))"
" null))))"
"(let-values(((phase-to-header_23)(make-hasheqv)))"
"(let-values(((find-or-create-header!_24)"
"(lambda(phase_49)"
"(let-values(((or-part_50)(hash-ref phase-to-header_23 phase_49 '#f)))"
"(if or-part_50"
" or-part_50"
"(let-values(((header_51)(make-header mpis_14)))"
"(begin"
"(hash-set! phase-to-header_23 phase_49 header_51)"
" header_51)))))))"
"(let-values(((saw-define-syntaxes?_25) '#f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_13)"
"(let-values()"
"((letrec-values(((loop!_52)"
"(lambda(bodys_53 phase_54 header_55)"
"(let-values(((lst_56) bodys_53))"
"(begin"
"(if(list? lst_56)"
"(void)"
"(let-values()(in-list lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58"
" lst_59)"
"(if(pair? lst_59)"
"(let-values(((body_60)"
"(unsafe-car"
" lst_59)))"
"(if '#t"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62)"
" fold-var_58))"
"(let-values(((fold-var_63)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_64)"
"(core-form-sym"
" body_60"
" phase_54)))"
"(if(equal?"
" tmp_64"
" 'define-values)"
"(let-values()"
"(let-values(((m_65)"
"(match-syntax"
" body_60"
" '(define-values"
"(id"
" ...)"
" rhs))))"
"(let-values(((lst_66)"
"(def-ids-to-binding-syms"
"(m_65"
" 'id)"
" phase_54"
" self_20)))"
"(begin"
"(if(list?"
" lst_66)"
"(void)"
"(let-values()"
"(in-list"
" lst_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68"
" lst_69)"
"(if(pair?"
" lst_69)"
"(let-values(((sym_70)"
"(unsafe-car"
" lst_69)))"
"(if '#t"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_68))"
"(let-values(((fold-var_73)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_74)"
"(select-fresh"
" sym_70"
" header_55)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_55)"
" sym_70"
" def-sym_74)"
"(set-header-binding-syms-in-order!"
" header_55"
"(cons"
" sym_70"
"(header-binding-syms-in-order"
" header_55)))"
"(register-as-defined!"
" header_55"
" def-sym_74))))"
"(void)))))"
"(values"
" fold-var_73)))))"
"(if '#t"
"(for-loop_67"
" fold-var_71"
"(unsafe-cdr"
" lst_69))"
" fold-var_71))"
" fold-var_68))"
" fold-var_68))))"
" for-loop_67)"
"(void)"
" lst_66)))))"
"(if(equal?"
" tmp_64"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((m_75)"
"(match-syntax"
" body_60"
" '(begin-for-syntax"
" e"
" ...))))"
"(loop!_52"
"(m_75"
" 'e)"
"(add1"
" phase_54)"
"(find-or-create-header!_24"
"(add1"
" phase_54)))))"
"(let-values()"
"(void))))))"
"(void)))))"
"(values"
" fold-var_63)))))"
"(if '#t"
"(for-loop_57"
" fold-var_61"
"(unsafe-cdr"
" lst_59))"
" fold-var_61))"
" fold-var_58))"
" fold-var_58))))"
" for-loop_57)"
"(void)"
" lst_56))))))"
" loop!_52)"
" bodys_12"
" phase_19"
"(find-or-create-header!_24 phase_19)))"
"(void))"
"(values))))"
"(let-values(((as-required?_26)"
"(lambda(header_76)"
"(lambda(sym_77)(registered-as-required? header_76 sym_77)))))"
"(let-values(((last-i_27)(sub1(length bodys_12))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_78)"
"(lambda(bodys_79 phase_80 header_81)"
"(let-values(((lst_82) bodys_79)"
"((start_83) '0))"
"(begin"
"(if(list? lst_82)"
"(void)"
"(let-values()(in-list lst_82)))"
"(if(exact-nonnegative-integer?"
" start_83)"
"(void)"
"(let-values()"
"(in-naturals start_83)))"
"((letrec-values(((for-loop_84)"
"(lambda(fold-var_85"
" lst_86"
" pos_87)"
"(if(if(pair?"
" lst_86)"
" '#t"
" '#f)"
"(let-values(((in-body_88)"
"(unsafe-car"
" lst_86))"
"((i_89)"
" pos_87))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((fold-var_90)"
"(let-values(((fold-var_91)"
" fold-var_85))"
"(let-values(((fold-var_92)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((body_93)"
"(syntax-disarm$1"
" in-body_88)))"
"(let-values(((tmp_94)"
"(core-form-sym"
" body_93"
" phase_80)))"
"(if(equal?"
" tmp_94"
" 'define-values)"
"(let-values()"
"(let-values(((m_95)"
"(match-syntax"
" body_93"
" '(define-values"
"(id"
" ...)"
" rhs))))"
"(let-values(((ids_96)"
"(m_95"
" 'id)))"
"(let-values(((binding-syms_97)"
"(def-ids-to-binding-syms"
" ids_96"
" phase_80"
" self_20)))"
"(let-values(((def-syms_98)"
"(if(compile-context-module-self"
" cctx_13)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_100)"
" binding-syms_97))"
"(begin"
"(if(list?"
" lst_100)"
"(void)"
"(let-values()"
"(in-list"
" lst_100)))"
"((letrec-values(((for-loop_101)"
"(lambda(fold-var_102"
" lst_103)"
"(if(pair?"
" lst_103)"
"(let-values(((binding-sym_104)"
"(unsafe-car"
" lst_103)))"
"(if '#t"
"(let-values(((fold-var_105)"
"(let-values(((fold-var_106)"
" fold-var_102))"
"(let-values(((fold-var_107)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_81)"
" binding-sym_104))"
" fold-var_106))))"
"(values"
" fold-var_107)))))"
"(if '#t"
"(for-loop_101"
" fold-var_105"
"(unsafe-cdr"
" lst_103))"
" fold-var_105))"
" fold-var_102))"
" fold-var_102))))"
" for-loop_101)"
" null"
" lst_100)))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_108)"
" binding-syms_97))"
"(begin"
"(if(list?"
" lst_108)"
"(void)"
"(let-values()"
"(in-list"
" lst_108)))"
"((letrec-values(((for-loop_109)"
"(lambda(fold-var_110"
" lst_111)"
"(if(pair?"
" lst_111)"
"(let-values(((binding-sym_112)"
"(unsafe-car"
" lst_111)))"
"(if '#t"
"(let-values(((fold-var_113)"
"(let-values(((fold-var_114)"
" fold-var_110))"
"(let-values(((fold-var_115)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...der/compile/form.rkt:102:15_116)"
" register-required-variable-use!20.1)"
"((header16_117)"
" header_81)"
"((temp17_118)"
"(compile-context-self"
" cctx_13))"
"((phase18_119)"
" phase_80)"
"((binding-sym19_120)"
" binding-sym_112)"
"((temp20_121)"
" '#f)"
"((temp21_122)"
" '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" register-required-variable-use!20.1))"
"(register-required-variable-use!18.1"
" temp21_122"
" '#t"
" header16_117"
" temp17_118"
" phase18_119"
" binding-sym19_120"
" temp20_121)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/form.rkt:102:15_116"
" keyword-procedure-extract"
" '(#:defined?)"
" '7)"
" '(#:defined?)"
"(list"
" temp21_122)"
" header16_117"
" temp17_118"
" phase18_119"
" binding-sym19_120"
" temp20_121))))"
" fold-var_114))))"
"(values"
" fold-var_115)))))"
"(if '#t"
"(for-loop_109"
" fold-var_113"
"(unsafe-cdr"
" lst_111))"
" fold-var_113))"
" fold-var_110))"
" fold-var_110))))"
" for-loop_109)"
" null"
" lst_108))))))))"
"(let-values(((rhs_99)"
"(1/compile"
"(m_95"
" 'rhs)"
"(let-values(((the-struct_123)"
" cctx_13))"
"(if(compile-context?"
" the-struct_123)"
"(let-values(((phase22_124)"
" phase_80)"
"((header23_125)"
" header_81))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_123)"
" phase22_124"
"(compile-context-self"
" the-struct_123)"
"(compile-context-module-self"
" the-struct_123)"
"(compile-context-full-module-name"
" the-struct_123)"
"(compile-context-lazy-syntax-literals?"
" the-struct_123)"
" header23_125))"
"(raise-argument-error"
" 'struct-copy"
" '\"compile-context?\""
" the-struct_123))))))"
"(begin"
"(compiled-expression-callback_17"
" rhs_99"
"(length"
" def-syms_98)"
" phase_80"
"(as-required?_26"
" header_81))"
"(if(compile-context-module-self"
" cctx_13)"
"(let-values()"
"(add-body!_22"
" phase_80"
"(list"
" 'define-values"
" def-syms_98"
" rhs_99)))"
"(let-values()"
"(let-values(((gen-syms_126)"
"(alt-reverse"
"(let-values(((lst_127)"
" binding-syms_97))"
"(begin"
"(if(list?"
" lst_127)"
"(void)"
"(let-values()"
"(in-list"
" lst_127)))"
"((letrec-values(((for-loop_128)"
"(lambda(fold-var_129"
" lst_130)"
"(if(pair?"
" lst_130)"
"(let-values(((binding-sym_131)"
"(unsafe-car"
" lst_130)))"
"(if '#t"
"(let-values(((fold-var_132)"
"(let-values(((fold-var_133)"
" fold-var_129))"
"(let-values(((fold-var_134)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_131"
" header_81))"
" fold-var_133))))"
"(values"
" fold-var_134)))))"
"(if '#t"
"(for-loop_128"
" fold-var_132"
"(unsafe-cdr"
" lst_130))"
" fold-var_132))"
" fold-var_129))"
" fold-var_129))))"
" for-loop_128)"
" null"
" lst_127))))))"
"(begin"
"(add-body!_22"
" phase_80"
"(list*"
" 'let-values"
"(list"
"(list"
" gen-syms_126"
" rhs_99))"
"(qq-append"
"(alt-reverse"
"(let-values(((lst_135)"
" def-syms_98)"
"((lst_136)"
" gen-syms_126))"
"(begin"
"(if(list?"
" lst_135)"
"(void)"
"(let-values()"
"(in-list"
" lst_135)))"
"(if(list?"
" lst_136)"
"(void)"
"(let-values()"
"(in-list"
" lst_136)))"
"((letrec-values(((for-loop_137)"
"(lambda(fold-var_138"
" lst_139"
" lst_140)"
"(if(if(pair?"
" lst_139)"
"(pair?"
" lst_140)"
" '#f)"
"(let-values(((def-sym_141)"
"(unsafe-car"
" lst_139))"
"((gen-sym_142)"
"(unsafe-car"
" lst_140)))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((fold-var_143)"
"(let-values(((fold-var_144)"
" fold-var_138))"
"(let-values(((fold-var_145)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'set!"
" def-sym_141"
" gen-sym_142))"
" fold-var_144))))"
"(values"
" fold-var_145)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_137"
" fold-var_143"
"(unsafe-cdr"
" lst_139)"
"(unsafe-cdr"
" lst_140))"
" fold-var_143))"
" fold-var_138))"
" fold-var_138))))"
" for-loop_137)"
" null"
" lst_135"
" lst_136))))"
" '((void)))))"
"(if(null?"
" ids_96)"
"(void)"
"(let-values()"
"(add-body!_22"
" phase_80"
"(compile-top-level-bind"
" ids_96"
" binding-syms_97"
"(let-values(((the-struct_146)"
" cctx_13))"
"(if(compile-context?"
" the-struct_146)"
"(let-values(((phase24_147)"
" phase_80)"
"((header25_148)"
" header_81))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_146)"
" phase24_147"
"(compile-context-self"
" the-struct_146)"
"(compile-context-module-self"
" the-struct_146)"
"(compile-context-full-module-name"
" the-struct_146)"
"(compile-context-lazy-syntax-literals?"
" the-struct_146)"
" header25_148))"
"(raise-argument-error"
" 'struct-copy"
" '\"compile-context?\""
" the-struct_146)))"
" '#f)))))))))))))))"
"(if(equal?"
" tmp_94"
" 'define-syntaxes)"
"(let-values()"
"(let-values(((m_149)"
"(match-syntax"
" body_93"
" '(define-syntaxes"
"(id"
" ...)"
" rhs))))"
"(let-values(((ids_150)"
"(m_149"
" 'id)))"
"(let-values(((binding-syms_151)"
"(def-ids-to-binding-syms"
" ids_150"
" phase_80"
" self_20)))"
"(let-values(((next-header_152)"
"(find-or-create-header!_24"
"(add1"
" phase_80))))"
"(let-values(((gen-syms_153)"
"(alt-reverse"
"(let-values(((lst_156)"
" binding-syms_151))"
"(begin"
"(if(list?"
" lst_156)"
"(void)"
"(let-values()"
"(in-list"
" lst_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_158"
" lst_159)"
"(if(pair?"
" lst_159)"
"(let-values(((binding-sym_160)"
"(unsafe-car"
" lst_159)))"
"(if '#t"
"(let-values(((fold-var_161)"
"(let-values(((fold-var_162)"
" fold-var_158))"
"(let-values(((fold-var_163)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_160"
" next-header_152))"
" fold-var_162))))"
"(values"
" fold-var_163)))))"
"(if '#t"
"(for-loop_157"
" fold-var_161"
"(unsafe-cdr"
" lst_159))"
" fold-var_161))"
" fold-var_158))"
" fold-var_158))))"
" for-loop_157)"
" null"
" lst_156))))))"
"(let-values(((rhs_154)"
"(1/compile"
"(m_149"
" 'rhs)"
"(let-values(((the-struct_164)"
" cctx_13))"
"(if(compile-context?"
" the-struct_164)"
"(let-values(((phase26_165)"
"(add1"
" phase_80))"
"((header27_166)"
" next-header_152))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_164)"
" phase26_165"
"(compile-context-self"
" the-struct_164)"
"(compile-context-module-self"
" the-struct_164)"
"(compile-context-full-module-name"
" the-struct_164)"
"(compile-context-lazy-syntax-literals?"
" the-struct_164)"
" header27_166))"
"(raise-argument-error"
" 'struct-copy"
" '\"compile-context?\""
" the-struct_164))))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_17"
" rhs_154"
"(length"
" gen-syms_153)"
"(add1"
" phase_80)"
"(as-required?_26"
" header_81))"
"(values))))"
"(let-values(((transformer-set!s_155)"
"(alt-reverse"
"(let-values(((lst_167)"
" binding-syms_151)"
"((lst_168)"
" gen-syms_153))"
"(begin"
"(if(list?"
" lst_167)"
"(void)"
"(let-values()"
"(in-list"
" lst_167)))"
"(if(list?"
" lst_168)"
"(void)"
"(let-values()"
"(in-list"
" lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(fold-var_170"
" lst_171"
" lst_172)"
"(if(if(pair?"
" lst_171)"
"(pair?"
" lst_172)"
" '#f)"
"(let-values(((binding-sym_173)"
"(unsafe-car"
" lst_171))"
"((gen-sym_174)"
"(unsafe-car"
" lst_172)))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((fold-var_175)"
"(let-values(((fold-var_176)"
" fold-var_170))"
"(let-values(((fold-var_177)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_173)"
" gen-sym_174))"
" fold-var_176))))"
"(values"
" fold-var_177)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_169"
" fold-var_175"
"(unsafe-cdr"
" lst_171)"
"(unsafe-cdr"
" lst_172))"
" fold-var_175))"
" fold-var_170))"
" fold-var_170))))"
" for-loop_169)"
" null"
" lst_167"
" lst_168))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_13)"
"(let-values()"
"(add-body!_22"
"(add1"
" phase_80)"
"(list*"
" 'let-values"
"(list"
"(list"
" gen-syms_153"
" rhs_154))"
"(qq-append"
" transformer-set!s_155"
" '((void))))))"
"(let-values()"
"(add-body!_22"
"(add1"
" phase_80)"
"(generate-top-level-define-syntaxes"
" gen-syms_153"
" rhs_154"
" transformer-set!s_155"
"(compile-top-level-bind"
" ids_150"
" binding-syms_151"
"(let-values(((the-struct_178)"
" cctx_13))"
"(if(compile-context?"
" the-struct_178)"
"(let-values(((phase28_179)"
" phase_80)"
"((header29_180)"
" header_81))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_178)"
" phase28_179"
"(compile-context-self"
" the-struct_178)"
"(compile-context-module-self"
" the-struct_178)"
"(compile-context-full-module-name"
" the-struct_178)"
"(compile-context-lazy-syntax-literals?"
" the-struct_178)"
" header29_180))"
"(raise-argument-error"
" 'struct-copy"
" '\"compile-context?\""
" the-struct_178)))"
" gen-syms_153)))))"
"(set! saw-define-syntaxes?_25"
" '#t)))))))))))"
"(if(equal?"
" tmp_94"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((m_181)"
"(match-syntax"
" body_93"
" '(begin-for-syntax"
" e"
" ...))))"
"(loop!_78"
"(m_181"
" 'e)"
"(add1"
" phase_80)"
"(find-or-create-header!_24"
"(add1"
" phase_80)))))"
"(if(if(equal?"
" tmp_94"
" '#%require)"
" '#t"
"(if(equal?"
" tmp_94"
" '#%provide)"
" '#t"
"(if(equal?"
" tmp_94"
" '#%declare)"
" '#t"
"(if(equal?"
" tmp_94"
" 'module)"
" '#t"
"(equal?"
" tmp_94"
" 'module*)))))"
"(let-values()"
"(let-values(((e_182)"
"(other-form-callback_18"
" body_93"
"(let-values(((the-struct_183)"
" cctx_13))"
"(if(compile-context?"
" the-struct_183)"
"(let-values(((phase30_184)"
" phase_80)"
"((header31_185)"
" header_81))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_183)"
" phase30_184"
"(compile-context-self"
" the-struct_183)"
"(compile-context-module-self"
" the-struct_183)"
"(compile-context-full-module-name"
" the-struct_183)"
"(compile-context-lazy-syntax-literals?"
" the-struct_183)"
" header31_185))"
"(raise-argument-error"
" 'struct-copy"
" '\"compile-context?\""
" the-struct_183))))))"
"(if e_182"
"(let-values()"
"(begin"
"(compiled-expression-callback_17"
" e_182"
" '#f"
" phase_80"
"(as-required?_26"
" header_81))"
"(add-body!_22"
" phase_80"
" e_182)))"
"(void))))"
"(let-values()"
"(let-values(((e_186)"
"(1/compile"
" body_93"
"(let-values(((the-struct_187)"
" cctx_13))"
"(if(compile-context?"
" the-struct_187)"
"(let-values(((phase32_188)"
" phase_80)"
"((header33_189)"
" header_81))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_187)"
" phase32_188"
"(compile-context-self"
" the-struct_187)"
"(compile-context-module-self"
" the-struct_187)"
"(compile-context-full-module-name"
" the-struct_187)"
"(compile-context-lazy-syntax-literals?"
" the-struct_187)"
" header33_189))"
"(raise-argument-error"
" 'struct-copy"
" '\"compile-context?\""
" the-struct_187)))"
"(="
" i_89"
" last-i_27))))"
"(begin"
"(compiled-expression-callback_17"
" e_186"
" '#f"
" phase_80"
"(as-required?_26"
" header_81))"
"(add-body!_22"
" phase_80"
" e_186)))))))))))"
"(void)))))"
"(values"
" fold-var_92)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_84"
" fold-var_90"
"(unsafe-cdr"
" lst_86)"
"(+"
" pos_87"
" '1))"
" fold-var_90))"
" fold-var_85))"
" fold-var_85))))"
" for-loop_84)"
"(void)"
" lst_82"
" start_83))))))"
" loop!_78)"
" bodys_12"
" phase_19"
"(find-or-create-header!_24 phase_19))"
"(values))))"
"(let-values(((encoded-root-expand-header_28)"
"(if encoded-root-expand-ctx-box_15"
"(if(unbox encoded-root-expand-ctx-box_15)"
"(if(not"
"(if root-ctx-only-if-syntax?_16"
"(if(not saw-define-syntaxes?_25)"
"(let-values(((ht_190) phase-to-header_23))"
"(begin"
"(if((lambda(ht_191)(hash? ht_191)) ht_190)"
"(void)"
"(let-values()"
"(default-in-hash-values ht_190)))"
"((letrec-values(((for-loop_192)"
"(lambda(result_193 i_194)"
"(if i_194"
"(let-values(((h_195)"
"(hash-iterate-value"
" ht_190"
" i_194)))"
"(if '#t"
"(let-values(((result_196)"
"(let-values(((result_197)"
" result_193))"
"(let-values(((result_198)"
"(let-values()"
"(let-values()"
"(header-empty-syntax-literals?"
" h_195)))))"
"(values"
" result_198)))))"
"(if(if '#t"
"(not"
"((lambda x_199"
"(not"
" result_196))"
" h_195))"
" '#f)"
"(for-loop_192"
" result_196"
"(hash-iterate-next"
" ht_190"
" i_194))"
" result_196))"
" result_193))"
" result_193))))"
" for-loop_192)"
" '#t"
"(hash-iterate-first ht_190))))"
" '#f)"
" '#f))"
"(let-values(((h_200)"
"(find-or-create-header!_24 'root-ctx)))"
"(begin"
"(add-syntax-literal!"
" h_200"
"(unbox encoded-root-expand-ctx-box_15))"
" h_200))"
" '#f)"
" '#f)"
" '#f)))"
"(let-values(((phases-in-order_29)"
"(let-values(((temp34_201)(hash-keys phase-to-body_21))"
"((<35_202) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 '#f '#f '#f '#f temp34_201 <35_202)"
"(sort9.1 temp34_201 <35_202)))))"
"(let-values(((min-phase_30)"
"(if(pair? phases-in-order_29)"
"(car phases-in-order_29)"
" phase_19)))"
"(let-values(((max-phase_31)"
"(if(pair? phases-in-order_29)"
"(car(alt-reverse phases-in-order_29))"
" phase_19)))"
"(let-values(((struct:link-info_32"
" link-info15_33"
" link-info?_34"
" link-info-link-module-uses_35"
" link-info-imports_36"
" link-info-extra-inspectorsss_37"
" link-info-def-decls_38)"
"(let-values(((struct:_203"
" make-_204"
" ?_205"
" -ref_206"
" -set!_207)"
"(make-struct-type"
" 'link-info"
" '#f"
" '4"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 3)"
" '#f"
" 'link-info)))"
"(values"
" struct:_203"
" make-_204"
" ?_205"
"(make-struct-field-accessor"
" -ref_206"
" '0"
" 'link-module-uses)"
"(make-struct-field-accessor -ref_206 '1 'imports)"
"(make-struct-field-accessor"
" -ref_206"
" '2"
" 'extra-inspectorsss)"
"(make-struct-field-accessor"
" -ref_206"
" '3"
" 'def-decls)))))"
"(let-values(((phase-to-link-info_40)"
"(let-values(((lst_239) phases-in-order_29))"
"(begin"
"(if(list? lst_239)"
"(void)"
"(let-values()(in-list lst_239)))"
"((letrec-values(((for-loop_240)"
"(lambda(table_241 lst_242)"
"(if(pair? lst_242)"
"(let-values(((phase_243)"
"(unsafe-car"
" lst_242)))"
"(if '#t"
"(let-values(((table_244)"
"(let-values(((table_245)"
" table_241))"
"(let-values(((table_246)"
"(let-values()"
"(let-values(((key_247"
" val_248)"
"(let-values()"
"(let-values(((header_249)"
"(hash-ref"
" phase-to-header_23"
" phase_243"
" '#f)))"
"(let-values(((link-module-uses_250"
" imports_251"
" extra-inspectorsss_252"
" def-decls_253)"
"(generate-links+imports"
" header_249"
" phase_243"
" cctx_13)))"
"(values"
" phase_243"
"(link-info15_33"
" link-module-uses_250"
" imports_251"
" extra-inspectorsss_252"
" def-decls_253)))))))"
"(hash-set"
" table_245"
" key_247"
" val_248)))))"
"(values"
" table_246)))))"
"(if '#t"
"(for-loop_240"
" table_244"
"(unsafe-cdr"
" lst_242))"
" table_244))"
" table_241))"
" table_241))))"
" for-loop_240)"
" '#hash()"
" lst_239)))))"
"(let-values(((body-linklets_41)"
"(let-values(((lst_254) phases-in-order_29))"
"(begin"
"(if(list? lst_254)"
"(void)"
"(let-values()(in-list lst_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(table_256 lst_257)"
"(if(pair? lst_257)"
"(let-values(((phase_258)"
"(unsafe-car"
" lst_257)))"
"(if '#t"
"(let-values(((table_259)"
"(let-values(((table_260)"
" table_256))"
"(let-values(((table_261)"
"(let-values()"
"(let-values(((key_262"
" val_263)"
"(let-values()"
"(let-values(((bodys_264)"
"(hash-ref"
" phase-to-body_21"
" phase_258)))"
"(let-values(((li_265)"
"(hash-ref"
" phase-to-link-info_40"
" phase_258)))"
"(let-values(((binding-sym-to-define-sym_266)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_23"
" phase_258))))"
"(values"
" phase_258"
"(1/compile-linklet"
"(list*"
" 'linklet"
"(qq-append"
"(if(compile-context-module-self"
" cctx_13)"
"(list"
"(list"
"(list"
" 'mpi-vector"
" mpi-vector-id))"
"(list"
"(list"
" 'syntax-literalss"
" syntax-literalss-id)"
"(list"
" 'get-syntax-literal!"
" get-syntax-literal!-id)))"
"(list"
"(list"
"(list"
" 'top-level-bind!"
" top-level-bind!-id)"
"(list"
" 'top-level-require!"
" top-level-require!-id))"
"(list"
"(list"
" 'mpi-vector"
" mpi-vector-id)"
"(list"
" 'syntax-literalss"
" syntax-literalss-id))))"
"(list*"
" instance-imports"
"(link-info-imports_36"
" li_265)))"
"(qq-append"
"(link-info-def-decls_38"
" li_265)"
"(alt-reverse"
"(let-values(((lst_267)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_23"
" phase_258))))"
"(begin"
"(if(list?"
" lst_267)"
"(void)"
"(let-values()"
"(in-list"
" lst_267)))"
"((letrec-values(((for-loop_268)"
"(lambda(fold-var_269"
" lst_270)"
"(if(pair?"
" lst_270)"
"(let-values(((binding-sym_271)"
"(unsafe-car"
" lst_270)))"
"(if '#t"
"(let-values(((fold-var_272)"
"(let-values(((fold-var_273)"
" fold-var_269))"
"(let-values(((fold-var_274)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_275)"
"(hash-ref"
" binding-sym-to-define-sym_266"
" binding-sym_271)))"
"(list"
" def-sym_275"
" binding-sym_271)))"
" fold-var_273))))"
"(values"
" fold-var_274)))))"
"(if '#t"
"(for-loop_268"
" fold-var_272"
"(unsafe-cdr"
" lst_270))"
" fold-var_272))"
" fold-var_269))"
" fold-var_269))))"
" for-loop_268)"
" null"
" lst_267)))))"
"(alt-reverse"
" bodys_264))))))))))"
"(hash-set"
" table_260"
" key_262"
" val_263)))))"
"(values"
" table_261)))))"
"(if '#t"
"(for-loop_255"
" table_259"
"(unsafe-cdr"
" lst_257))"
" table_259))"
" table_256))"
" table_256))))"
" for-loop_255)"
" '#hasheq()"
" lst_254)))))"
"(let-values(((phase-to-link-module-uses_42)"
"(let-values(((ht_276) phase-to-link-info_40))"
"(begin"
"(if((lambda(ht_277)(hash? ht_277)) ht_276)"
"(void)"
"(let-values()(default-in-hash ht_276)))"
"((letrec-values(((for-loop_278)"
"(lambda(table_279 i_280)"
"(if i_280"
"(let-values(((phase_281"
" li_282)"
"(hash-iterate-key+value"
" ht_276"
" i_280)))"
"(if '#t"
"(let-values(((table_283)"
"(let-values(((table_284)"
" table_279))"
"(let-values(((table_285)"
"(let-values()"
"(let-values(((key_286"
" val_287)"
"(let-values()"
"(values"
" phase_281"
"(link-info-link-module-uses_35"
" li_282)))))"
"(hash-set"
" table_284"
" key_286"
" val_287)))))"
"(values"
" table_285)))))"
"(if '#t"
"(for-loop_278"
" table_283"
"(hash-iterate-next"
" ht_276"
" i_280))"
" table_283))"
" table_279))"
" table_279))))"
" for-loop_278)"
" '#hash()"
"(hash-iterate-first ht_276))))))"
"(let-values(((phase-to-link-module-uses-expr_43)"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_288) phases-in-order_29))"
"(begin"
"(if(list? lst_288)"
"(void)"
"(let-values()(in-list lst_288)))"
"((letrec-values(((for-loop_289)"
"(lambda(fold-var_290"
" lst_291)"
"(if(pair? lst_291)"
"(let-values(((phase_292)"
"(unsafe-car"
" lst_291)))"
"(if '#t"
"(let-values(((fold-var_293)"
"(let-values(((fold-var_294)"
" fold-var_290))"
"(let-values(((fold-var_295)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_292"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_42"
" phase_292)"
" mpis_14))))"
" fold-var_294))))"
"(values"
" fold-var_295)))))"
"(if '#t"
"(for-loop_289"
" fold-var_293"
"(unsafe-cdr"
" lst_291))"
" fold-var_293))"
" fold-var_290))"
" fold-var_290))))"
" for-loop_289)"
" null"
" lst_288))))))))"
"(let-values(((phase-to-link-extra-inspectorsss_44)"
"(let-values(((ht_296) phase-to-link-info_40))"
"(begin"
"(if((lambda(ht_297)(hash? ht_297))"
" ht_296)"
"(void)"
"(let-values()"
"(default-in-hash ht_296)))"
"((letrec-values(((for-loop_298)"
"(lambda(table_299"
" i_300)"
"(if i_300"
"(let-values(((phase_301"
" li_302)"
"(hash-iterate-key+value"
" ht_296"
" i_300)))"
"(if '#t"
"(let-values(((table_303)"
"(let-values(((table_304)"
" table_299))"
"(let-values(((table_305)"
"(let-values()"
"(let-values(((key_306"
" val_307)"
"(let-values()"
"(values"
" phase_301"
"(link-info-extra-inspectorsss_37"
" li_302)))))"
"(hash-set"
" table_304"
" key_306"
" val_307)))))"
"(values"
" table_305)))))"
"(if '#t"
"(for-loop_298"
" table_303"
"(hash-iterate-next"
" ht_296"
" i_300))"
" table_303))"
" table_299))"
" table_299))))"
" for-loop_298)"
" '#hash()"
"(hash-iterate-first ht_296))))))"
"(let-values(((syntax-literalss_45)"
"(alt-reverse"
"(let-values(((start_308) phase_19)"
"((end_309)"
"(add1 max-phase_31))"
"((inc_310) '1))"
"(begin"
"(if(if(real? start_308)"
"(if(real? end_309)"
"(real? inc_310)"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(in-range"
" start_308"
" end_309"
" inc_310)))"
"((letrec-values(((for-loop_311)"
"(lambda(fold-var_312"
" pos_313)"
"(if(<"
" pos_313"
" end_309)"
"(let-values(((phase_314)"
" pos_313))"
"(if '#t"
"(let-values(((fold-var_315)"
"(let-values(((fold-var_316)"
" fold-var_312))"
"(let-values(((fold-var_317)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((h_318)"
"(hash-ref"
" phase-to-header_23"
" phase_314"
" '#f)))"
"(if h_318"
"(header-syntax-literals"
" h_318)"
" empty-syntax-literals)))"
" fold-var_316))))"
"(values"
" fold-var_317)))))"
"(if '#t"
"(for-loop_311"
" fold-var_315"
"(+"
" pos_313"
" inc_310))"
" fold-var_315))"
" fold-var_312))"
" fold-var_312))))"
" for-loop_311)"
" null"
" start_308))))))"
"(values"
" body-linklets_41"
" min-phase_30"
" max-phase_31"
" phase-to-link-module-uses_42"
" phase-to-link-module-uses-expr_43"
" phase-to-link-extra-inspectorsss_44"
" syntax-literalss_45"
"(if encoded-root-expand-header_28"
"(header-syntax-literals"
" encoded-root-expand-header_28)"
" '#f))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack13.1$1)"
"(lambda(given-kws_319 given-args_320 bodys9_321 cctx10_322 mpis11_323)"
"(let-values(((compiled-expression-callback7_324)"
"(if(pair? given-kws_319)(eq? '#:compiled-expression-callback(car given-kws_319)) '#f)))"
"(let-values(((compiled-expression-callback3_325)"
"(if compiled-expression-callback7_324(car given-args_320)(void)))"
"((given-kws_326)(if compiled-expression-callback7_324(cdr given-kws_319) given-kws_319))"
"((given-args_327)(if compiled-expression-callback7_324(cdr given-args_320) given-args_320)))"
"(let-values(((encoded-root-expand-ctx-box5_328)"
"(if(pair? given-kws_326)(eq? '#:encoded-root-expand-ctx-box(car given-kws_326)) '#f)))"
"(let-values(((encoded-root-expand-ctx-box1_329)"
"(if encoded-root-expand-ctx-box5_328(car given-args_327)(void)))"
"((given-kws_330)(if encoded-root-expand-ctx-box5_328(cdr given-kws_326) given-kws_326))"
"((given-args_331)(if encoded-root-expand-ctx-box5_328(cdr given-args_327) given-args_327)))"
"(let-values(((other-form-callback8_332)"
"(if(pair? given-kws_330)(eq? '#:other-form-callback(car given-kws_330)) '#f)))"
"(let-values(((other-form-callback4_333)(if other-form-callback8_332(car given-args_331)(void)))"
"((given-kws_334)(if other-form-callback8_332(cdr given-kws_330) given-kws_330))"
"((given-args_335)(if other-form-callback8_332(cdr given-args_331) given-args_331)))"
"(let-values(((root-ctx-only-if-syntax?6_336)(pair? given-kws_334)))"
"(let-values(((root-ctx-only-if-syntax?2_337)"
"(if root-ctx-only-if-syntax?6_336(car given-args_335)(void))))"
"(compile-forms12.1"
" compiled-expression-callback3_325"
" compiled-expression-callback7_324"
" encoded-root-expand-ctx-box1_329"
" encoded-root-expand-ctx-box5_328"
" other-form-callback4_333"
" other-form-callback8_332"
" root-ctx-only-if-syntax?2_337"
" root-ctx-only-if-syntax?6_336"
" bodys9_321"
" cctx10_322"
" mpis11_323)))))))))))"
"(define-values"
"(compile-forms14.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_338 given-argc_339)"
"(if(= given-argc_339 '5)"
"(let-values(((l1_340) given-kws_338))"
"(let-values(((l1_341)"
"(if(null? l1_340)"
" l1_340"
"(if(eq?(car l1_340) '#:compiled-expression-callback)(cdr l1_340) l1_340))))"
"(let-values(((l1_342) l1_341))"
"(let-values(((l1_343)"
"(if(null? l1_342)"
" l1_342"
"(if(eq?(car l1_342) '#:encoded-root-expand-ctx-box)(cdr l1_342) l1_342))))"
"(let-values(((l1_344) l1_343))"
"(let-values(((l1_345)"
"(if(null? l1_344)"
" l1_344"
"(if(eq?(car l1_344) '#:other-form-callback)(cdr l1_344) l1_344))))"
"(let-values(((l1_346) l1_345))"
"(let-values(((l1_347)"
"(if(null? l1_346)"
" l1_346"
"(if(eq?(car l1_346) '#:root-ctx-only-if-syntax?)(cdr l1_346) l1_346))))"
"(null? l1_347)))))))))"
" '#f))"
"(case-lambda"
"((given-kws_348 given-args_349 bodys_350 cctx_351 mpis_352)"
"(unpack13.1$1 given-kws_348 given-args_349 bodys_350 cctx_351 mpis_352)))"
" null"
" '(#:compiled-expression-callback #:encoded-root-expand-ctx-box #:other-form-callback #:root-ctx-only-if-syntax?)"
"(let-values(((compile-forms_353)"
"(case-lambda((bodys_354 cctx_355 mpis_356)(unpack13.1$1 null null bodys_354 cctx_355 mpis_356)))))"
" compile-forms_353)))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_357 binding-syms_358 cctx_359 trans-exprs_360)"
"(let-values(((phase_361)(compile-context-phase cctx_359)))"
"(let-values(((self_362)(compile-context-self cctx_359)))"
"(let-values(((header_363)(compile-context-header cctx_359)))"
"(let-values(((mpis_364)(header-module-path-indexes header_363)))"
"(let-values(((top-level-bind-scope_365)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_359)))))"
"(let-values(((self-expr_366)(add-module-path-index! mpis_364 self_362)))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_367) ids_357)"
"((lst_368) binding-syms_358)"
"((lst_369)"
"(let-values(((or-part_370) trans-exprs_360))"
"(if or-part_370"
" or-part_370"
"(alt-reverse"
"(let-values(((lst_371) ids_357))"
"(begin"
"(if(list? lst_371)(void)(let-values()(in-list lst_371)))"
"((letrec-values(((for-loop_372)"
"(lambda(fold-var_373 lst_374)"
"(if(pair? lst_374)"
"(let-values(((id_375)(unsafe-car lst_374)))"
"(if '#t"
"(let-values(((fold-var_376)"
"(let-values(((fold-var_377)"
" fold-var_373))"
"(let-values(((fold-var_378)"
"(let-values()"
"(cons"
"(let-values() ''#f)"
" fold-var_377))))"
"(values fold-var_378)))))"
"(if '#t"
"(for-loop_372 fold-var_376(unsafe-cdr lst_374))"
" fold-var_376))"
" fold-var_373))"
" fold-var_373))))"
" for-loop_372)"
" null"
" lst_371))))))))"
"(begin"
"(if(list? lst_367)(void)(let-values()(in-list lst_367)))"
"(if(list? lst_368)(void)(let-values()(in-list lst_368)))"
"(if(list? lst_369)(void)(let-values()(in-list lst_369)))"
"((letrec-values(((for-loop_379)"
"(lambda(fold-var_380 lst_381 lst_382 lst_383)"
"(if(if(pair? lst_381)(if(pair? lst_382)(pair? lst_383) '#f) '#f)"
"(let-values(((id_384)(unsafe-car lst_381))"
"((binding-sym_385)(unsafe-car lst_382))"
"((trans-expr_386)(unsafe-car lst_383)))"
"(if(if '#t(if '#t '#t '#f) '#f)"
"(let-values(((fold-var_387)"
"(let-values(((fold-var_388) fold-var_380))"
"(let-values(((fold-var_389)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_390)"
"(compile-quote-syntax"
"(remove-scope"
" id_384"
" top-level-bind-scope_365)"
" phase_361"
" cctx_359)))"
"(list"
" top-level-bind!-id"
" id-stx_390"
" self-expr_366"
" phase_361"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_385)"
" trans-expr_386)))"
" fold-var_388))))"
"(values fold-var_389)))))"
"(if(if '#t(if '#t '#t '#f) '#f)"
"(for-loop_379"
" fold-var_387"
"(unsafe-cdr lst_381)"
"(unsafe-cdr lst_382)"
"(unsafe-cdr lst_383))"
" fold-var_387))"
" fold-var_380))"
" fold-var_380))))"
" for-loop_379)"
" null"
" lst_367"
" lst_368"
" lst_369)))))))))))))"
"(define-values"
"(compile-namespace-scopes)"
"(lambda(phase_391 cctx_392)"
"(let-values(((v_393)(encode-namespace-scopes(compile-context-namespace cctx_392))))"
"(compile-quote-syntax v_393 phase_391 cctx_392))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_394 rhs_395 transformer-set!s_396 finish_397)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_395)"
"(list"
" 'case-lambda"
"(list gen-syms_394(list* 'begin(qq-append transformer-set!s_396(list* finish_397 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_394"
"(list*"
" 'values"
"(alt-reverse"
"(let-values(((lst_398) gen-syms_394))"
"(begin"
"(if(list? lst_398)(void)(let-values()(in-list lst_398)))"
"((letrec-values(((for-loop_399)"
"(lambda(fold-var_400 lst_401)"
"(if(pair? lst_401)"
"(let-values(((s_402)(unsafe-car lst_401)))"
"(if '#t"
"(let-values(((fold-var_403)"
"(let-values(((fold-var_404) fold-var_400))"
"(let-values(((fold-var_405)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_404))))"
"(values fold-var_405)))))"
"(if '#t(for-loop_399 fold-var_403(unsafe-cdr lst_401)) fold-var_403))"
" fold-var_400))"
" fold-var_400))))"
" for-loop_399)"
" null"
" lst_398)))))))"
"(list* 'begin finish_397 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_394 '((apply values args)))) '((void))))))))"
"(define-values"
"(compiled-tops->compiled-top)"
"(lambda(cims_1)"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory"
"(let-values(((lst_2) cims_1)((start_3) '0))"
"(begin"
"(if(list? lst_2)(void)(let-values()(in-list lst_2)))"
"(if(exact-nonnegative-integer? start_3)(void)(let-values()(in-naturals start_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(table_5 lst_6 pos_7)"
"(if(if(pair? lst_6) '#t '#f)"
"(let-values(((cim_8)(unsafe-car lst_6))((i_9) pos_7))"
"(if(if '#t '#t '#f)"
"(let-values(((table_10)"
"(let-values(((table_11) table_5))"
"(let-values(((table_12)"
"(let-values()"
"(let-values(((key_13 val_14)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string i_9))"
"(compiled-in-memory-linklet-directory"
" cim_8)))))"
"(hash-set table_11 key_13 val_14)))))"
"(values table_12)))))"
"(if(if '#t '#t '#f)"
"(for-loop_4 table_10(unsafe-cdr lst_6)(+ pos_7 '1))"
" table_10))"
" table_5))"
" table_5))))"
" for-loop_4)"
" '#hash()"
" lst_2"
" start_3))))"
" '0"
" '0"
" '#hasheqv()"
" '#f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_1"
" null)))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_15)"
"(let-values(((ht_16)(1/linklet-directory->hash ld_15)))"
"(alt-reverse"
"(let-values(((start_17) '0)((end_18)(hash-count ht_16))((inc_19) '1))"
"(begin"
"(if(if(real? start_17)(if(real? end_18)(real? inc_19) '#f) '#f)"
"(void)"
"(let-values()(in-range start_17 end_18 inc_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21 pos_22)"
"(if(< pos_22 end_18)"
"(let-values(((i_23) pos_22))"
"(if '#t"
"(let-values(((fold-var_24)"
"(let-values(((fold-var_25) fold-var_21))"
"(let-values(((fold-var_26)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" ht_16"
"(string->number(number->string i_23))))"
" fold-var_25))))"
"(values fold-var_26)))))"
"(if '#t(for-loop_20 fold-var_24(+ pos_22 inc_19)) fold-var_24))"
" fold-var_21))"
" fold-var_21))))"
" for-loop_20)"
" null"
" start_17)))))))"
"(define-values"
"(compile-single)"
"(lambda(s_1 cctx_2)"
"(let-values(((...nder/compile/top.rkt:24:2_3) compile-top7.1)((s8_4) s_1)((cctx9_5) cctx_2)((temp10_6) '#f))"
"(if(variable-reference-constant?(#%variable-reference compile-top7.1))"
"(compile-top5.1 temp10_6 '#t s8_4 cctx9_5)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:24:2_3"
" keyword-procedure-extract"
" '(#:serializable?)"
" '4)"
" '(#:serializable?)"
"(list temp10_6)"
" s8_4"
" cctx9_5)))))"
"(define-values"
"(compile-top5.1)"
"(lambda(serializable?1_7 serializable?2_8 s3_9 cctx4_10)"
"(let-values(((s_11) s3_9))"
"(let-values(((cctx_12) cctx4_10))"
"(let-values(((serializable?_13)(if serializable?2_8 serializable?1_7 '#t)))"
"(let-values()"
"(let-values(((phase_14)(compile-context-phase cctx_12)))"
"(let-values(((mpis_15)(make-module-path-index-table)))"
"(let-values(((body-linklets_16"
" min-phase_17"
" max-phase_18"
" phase-to-link-module-uses_19"
" phase-to-link-module-uses-expr_20"
" phase-to-link-extra-inspectorsss_21"
" syntax-literalss_22"
" no-root-context-syntax-literals_23)"
"(let-values(((...nder/compile/top.rkt:46:4_25) compile-forms14.1)"
"((temp11_26)(list s_11))"
"((cctx12_27) cctx_12)"
"((mpis13_28) mpis_15)"
"((compile-top-level-require14_29) compile-top-level-require))"
"(if(variable-reference-constant?(#%variable-reference compile-forms14.1))"
"(compile-forms12.1"
" '#f"
" '#f"
" '#f"
" '#f"
" compile-top-level-require14_29"
" '#t"
" '#f"
" '#f"
" temp11_26"
" cctx12_27"
" mpis13_28)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:46:4_25"
" keyword-procedure-extract"
" '(#:other-form-callback)"
" '5)"
" '(#:other-form-callback)"
"(list compile-top-level-require14_29)"
" temp11_26"
" cctx12_27"
" mpis13_28)))))"
"(let-values(((bundle_24)"
"(1/hash->linklet-bundle"
"(if serializable?_13"
"(let-values()"
"(let-values(((syntax-literalss-expr_30)"
"(generate-eager-syntax-literals!"
" syntax-literalss_22"
" mpis_15"
" phase_14"
"(compile-context-self cctx_12)"
"(compile-context-namespace cctx_12))))"
"(let-values(((link-linklet_31)"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
"(list* mpi-vector-id '(mpi-vector))"
" '(deserialized-syntax"
" original-phase"
" max-phase"
" phase-to-link-modules"
" syntax-literalss))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_15))"
"(list"
" 'define-values"
" '(deserialized-syntax)"
"(list* 'make-vector(add1 phase_14) '(#f)))"
"(list 'define-values '(original-phase) phase_14)"
"(list 'define-values '(max-phase) max-phase_18)"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_20)"
"(list"
" 'define-values"
" '(syntax-literalss)"
" syntax-literalss-expr_30)))))"
"(hash-set body-linklets_16 'link link-linklet_31))))"
"(let-values() body-linklets_16)))))"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hash '#f bundle_24))"
" phase_14"
" max-phase_18"
" phase-to-link-module-uses_19"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_21"
"(mpis-as-vector mpis_15)"
"(syntax-literals-as-vectors syntax-literalss_22 phase_14)"
" null"
" null)))))))))))"
"(define-values"
"(unpack6.1)"
"(lambda(given-kws_32 given-args_33 s3_34 cctx4_35)"
"(let-values(((serializable?2_36)(pair? given-kws_32)))"
"(let-values(((serializable?1_37)(if serializable?2_36(car given-args_33)(void))))"
"(compile-top5.1 serializable?1_37 serializable?2_36 s3_34 cctx4_35)))))"
"(define-values"
"(compile-top7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_38 given-argc_39)"
"(if(= given-argc_39 '4)"
"(let-values(((l1_40) given-kws_38))"
"(let-values(((l1_41)(if(null? l1_40) l1_40(if(eq?(car l1_40) '#:serializable?)(cdr l1_40) l1_40))))"
"(null? l1_41)))"
" '#f))"
"(case-lambda((given-kws_42 given-args_43 s_44 cctx_45)(unpack6.1 given-kws_42 given-args_43 s_44 cctx_45)))"
" null"
" '(#:serializable?)"
"(let-values(((compile-top_46)(case-lambda((s_47 cctx_48)(unpack6.1 null null s_47 cctx_48))))) compile-top_46)))"
"(define-values"
"(compile-top-level-require)"
"(lambda(s_49 cctx_50)"
"(let-values(((phase_51)(compile-context-phase cctx_50)))"
"(let-values(((tmp_52)(core-form-sym s_49 phase_51)))"
"(if(equal? tmp_52 '#%require)"
"(let-values()"
"(let-values(((form-stx_53)(compile-quote-syntax s_49 phase_51 cctx_50)))"
"(list top-level-require!-id form-stx_53 ns-id)))"
"(let-values() '#f))))))"
"(define-values"
"(any-side-effects?6.1)"
"(lambda(locals1_1 locals2_2 e3_3 expected-results4_4 required-reference?5_5)"
"(let-values(((e_6) e3_3))"
"(let-values(((expected-results_7) expected-results4_4))"
"(let-values(((required-reference?_8) required-reference?5_5))"
"(let-values(((locals_9)(if locals2_2 locals1_1 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_10)"
"((letrec-values(((loop_11)"
"(lambda(e_12 locals_13)"
"(let-values(((tmp_14)"
"(if(pair?(correlated-e e_12))"
"(correlated-e(car(correlated-e e_12)))"
" '#f)))"
"(if(if(equal? tmp_14 'quote)"
" '#t"
"(if(equal? tmp_14 'lambda)"
" '#t"
"(if(equal? tmp_14 'case-lambda)"
" '#t"
"(equal? tmp_14 '#%variable-reference))))"
"(let-values() '1)"
"(if(if(equal? tmp_14 'letrec-values)"
" '#t"
"(equal? tmp_14 'let-values))"
"(let-values()"
"(let-values(((m_15)"
"(match-correlated"
" e_12"
" '(_((ids rhs) ...) body))))"
"(if(not"
"(let-values(((lst_16)(m_15 'ids))"
"((lst_17)(m_15 'rhs)))"
"(begin"
"(if(list? lst_16)"
"(void)"
"(let-values()(in-list lst_16)))"
"(if(list? lst_17)"
"(void)"
"(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(result_19 lst_20 lst_21)"
"(if(if(pair? lst_20)"
"(pair? lst_21)"
" '#f)"
"(let-values(((ids_22)"
"(unsafe-car"
" lst_20))"
"((rhs_23)"
"(unsafe-car"
" lst_21)))"
"(if(if '#t '#t '#f)"
"(let-values(((result_24)"
"(let-values(((result_25)"
" result_19))"
"(let-values(((result_26)"
"(let-values()"
"(let-values()"
"(let-values(((...pile/side-effect.rkt:26:21_27)"
" any-side-effects?8.1)"
"((rhs9_28)"
" rhs_23)"
"((temp10_29)"
"(correlated-length"
" ids_22))"
"((required-reference?11_30)"
" required-reference?_8)"
"((locals12_31)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals12_31"
" '#t"
" rhs9_28"
" temp10_29"
" required-reference?11_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:26:21_27"
" keyword-procedure-extract"
" '(#:locals)"
" '5)"
" '(#:locals)"
"(list"
" locals12_31)"
" rhs9_28"
" temp10_29"
" required-reference?11_30)))))))"
"(values"
" result_26)))))"
"(if(if(if '#t"
"(not"
"((lambda x_32"
" result_24)"
" ids_22))"
" '#f)"
"(if '#t"
"(not"
"((lambda x_33"
" result_24)"
" rhs_23))"
" '#f)"
" '#f)"
"(for-loop_18"
" result_24"
"(unsafe-cdr lst_20)"
"(unsafe-cdr lst_21))"
" result_24))"
" result_19))"
" result_19))))"
" for-loop_18)"
" '#f"
" lst_16"
" lst_17))))"
"(loop_11"
"(m_15 'body)"
"(add-binding-info locals_13(m_15 'ids)(m_15 'rhs)))"
" '#f)))"
"(if(equal? tmp_14 'values)"
"(let-values()"
"(let-values(((m_34)(match-correlated e_12 '(_ e ...))))"
"(if(let-values(((lst_35)(m_34 'e)))"
"(begin"
"(if(list? lst_35)"
"(void)"
"(let-values()(in-list lst_35)))"
"((letrec-values(((for-loop_36)"
"(lambda(result_37 lst_38)"
"(if(pair? lst_38)"
"(let-values(((e_39)"
"(unsafe-car"
" lst_38)))"
"(if '#t"
"(let-values(((result_40)"
"(let-values(((result_41)"
" result_37))"
"(let-values(((result_42)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:32:21_43)"
" any-side-effects?8.1)"
"((e13_44)"
" e_39)"
"((temp14_45)"
" '1)"
"((required-reference?15_46)"
" required-reference?_8)"
"((locals16_47)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals16_47"
" '#t"
" e13_44"
" temp14_45"
" required-reference?15_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:32:21_43"
" keyword-procedure-extract"
" '(#:locals)"
" '5)"
" '(#:locals)"
"(list"
" locals16_47)"
" e13_44"
" temp14_45"
" required-reference?15_46))))))))"
"(values"
" result_42)))))"
"(if(if '#t"
"(not"
"((lambda x_48"
"(not"
" result_40))"
" e_39))"
" '#f)"
"(for-loop_36"
" result_40"
"(unsafe-cdr lst_38))"
" result_40))"
" result_37))"
" result_37))))"
" for-loop_36)"
" '#t"
" lst_35)))"
"(length(m_34 'e))"
" '#f)))"
"(if(equal? tmp_14 'make-struct-type)"
"(let-values()"
"(if(ok-make-struct-type? e_12 required-reference?_8)"
" '5"
" '#f))"
"(if(equal? tmp_14 'make-struct-field-accessor)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'accessor)"
" '1"
" '#f))"
"(if(equal? tmp_14 'make-struct-field-mutator)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'mutator)"
" '1"
" '#f))"
"(let-values()"
"(let-values(((v_49)(correlated-e e_12)))"
"(if(symbol? v_49)"
"(if(let-values(((or-part_50)"
"(hash-ref locals_13 v_49 '#f)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)"
"(built-in-symbol? v_49)))"
"(if or-part_51"
" or-part_51"
"(required-reference?_8 v_49)))))"
" '1"
" '#f)"
" '#f)))))))))))))"
" loop_11)"
" e_6"
" locals_9)))"
"(not"
"(if actual-results_10"
"(let-values(((or-part_52)(not expected-results_7)))"
"(if or-part_52 or-part_52(= actual-results_10 expected-results_7)))"
" '#f))))))))))"
"(define-values"
"(unpack7.1$3)"
"(lambda(given-kws_53 given-args_54 e3_55 expected-results4_56 required-reference?5_57)"
"(let-values(((locals2_58)(pair? given-kws_53)))"
"(let-values(((locals1_59)(if locals2_58(car given-args_54)(void))))"
"(any-side-effects?6.1 locals1_59 locals2_58 e3_55 expected-results4_56 required-reference?5_57)))))"
"(define-values"
"(any-side-effects?8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_60 given-argc_61)"
"(if(= given-argc_61 '5)"
"(let-values(((l1_62) given-kws_60))"
"(let-values(((l1_63)(if(null? l1_62) l1_62(if(eq?(car l1_62) '#:locals)(cdr l1_62) l1_62))))"
"(null? l1_63)))"
" '#f))"
"(case-lambda"
"((given-kws_64 given-args_65 e_66 expected-results_67 required-reference?_68)"
"(unpack7.1$3 given-kws_64 given-args_65 e_66 expected-results_67 required-reference?_68)))"
" null"
" '(#:locals)"
"(let-values(((any-side-effects?_69)"
"(case-lambda"
"((e_70 expected-results_71 required-reference?_72)"
"(unpack7.1$3 null null e_70 expected-results_71 required-reference?_72)))))"
" any-side-effects?_69)))"
"(define-values"
"(struct:struct-op make-struct-op struct-op? struct-op-type struct-op-field-count)"
"(let-values(((struct:_73 make-_74 ?_75 -ref_76 -set!_77)"
"(make-struct-type 'struct-op '#f '2 '0 '#f null 'prefab '#f '(0 1) '#f 'struct-op)))"
"(values"
" struct:_73"
" make-_74"
" ?_75"
"(make-struct-field-accessor -ref_76 '0 'type)"
"(make-struct-field-accessor -ref_76 '1 'field-count))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_99 idss_100 rhss_101)"
"(let-values(((lst_102) idss_100)((lst_103) rhss_101))"
"(begin"
"(if(list? lst_102)(void)(let-values()(in-list lst_102)))"
"(if(list? lst_103)(void)(let-values()(in-list lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(locals_105 lst_106 lst_107)"
"(if(if(pair? lst_106)(pair? lst_107) '#f)"
"(let-values(((ids_108)(unsafe-car lst_106))((rhs_109)(unsafe-car lst_107)))"
"(if(if '#t '#t '#f)"
"(let-values(((locals_110)"
"(let-values(((locals_111) locals_105))"
"(let-values(((locals_112)"
"(let-values()"
"(let-values(((tmp_113)"
"(if(pair?(correlated-e rhs_109))"
"(correlated-e"
"(car(correlated-e rhs_109)))"
" '#f)))"
"(if(equal? tmp_113 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_114)"
"(extract-struct-field-count-lower-bound"
" rhs_109)))"
"(let-values(((lst_115)"
"(correlated->list ids_108))"
"((lst_116)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_115)"
"(void)"
"(let-values()(in-list lst_115)))"
"(if(list? lst_116)"
"(void)"
"(let-values()(in-list lst_116)))"
"((letrec-values(((for-loop_117)"
"(lambda(locals_118"
" lst_119"
" lst_120)"
"(if(if(pair?"
" lst_119)"
"(pair? lst_120)"
" '#f)"
"(let-values(((id_121)"
"(unsafe-car"
" lst_119))"
"((type_122)"
"(unsafe-car"
" lst_120)))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((locals_123)"
"(let-values(((locals_124)"
" locals_118))"
"(let-values(((locals_125)"
"(let-values()"
"(hash-set"
" locals_124"
"(correlated-e"
" id_121)"
"(make-struct-op"
" type_122"
" field-count_114)))))"
"(values"
" locals_125)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_117"
" locals_123"
"(unsafe-cdr"
" lst_119)"
"(unsafe-cdr"
" lst_120))"
" locals_123))"
" locals_118))"
" locals_118))))"
" for-loop_117)"
" locals_111"
" lst_115"
" lst_116)))))"
"(let-values()"
"(let-values(((lst_126)"
"(correlated->list ids_108)))"
"(begin"
"(if(list? lst_126)"
"(void)"
"(let-values()(in-list lst_126)))"
"((letrec-values(((for-loop_127)"
"(lambda(locals_128"
" lst_129)"
"(if(pair? lst_129)"
"(let-values(((id_130)"
"(unsafe-car"
" lst_129)))"
"(if '#t"
"(let-values(((locals_131)"
"(let-values(((locals_132)"
" locals_128))"
"(let-values(((locals_133)"
"(let-values()"
"(hash-set"
" locals_132"
" id_130"
" '#t))))"
"(values"
" locals_133)))))"
"(if '#t"
"(for-loop_127"
" locals_131"
"(unsafe-cdr"
" lst_129))"
" locals_131))"
" locals_128))"
" locals_128))))"
" for-loop_127)"
" locals_111"
" lst_126)))))))))"
"(values locals_112)))))"
"(if(if '#t '#t '#f)"
"(for-loop_104 locals_110(unsafe-cdr lst_106)(unsafe-cdr lst_107))"
" locals_110))"
" locals_105))"
" locals_105))))"
" for-loop_104)"
" locals_99"
" lst_102"
" lst_103)))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_134 required-reference?_135)"
"(let-values(((l_136)(correlated->list e_134)))"
"(let-values(((init-field-count-expr_137)(if(>(length l_136) '3)(list-ref l_136 '3) '#f)))"
"(let-values(((immutables-expr_138)"
"(let-values(((or-part_139)(if(>(length l_136) '9)(list-ref l_136 '9) '#f)))"
"(if or-part_139 or-part_139 'null))))"
"(if(>=(length l_136) '5)"
"(if(<=(length l_136) '12)"
"(let-values(((pos->vals_140 pos-next_141 init_142 pos-cont?_143 val-cont?_144 all-cont?_145)"
"(make-sequence '(arg)(cdr l_136)))"
"((pos->vals_146 pos-next_147 init_148 pos-cont?_149 val-cont?_150 all-cont?_151)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_152)(quoted? symbol? v_152))"
"(lambda(v_153)(quoted? false? v_153))"
"(lambda(v_154)(field-count-expr-to-field-count v_154))"
"(lambda(v_155)(field-count-expr-to-field-count v_155))"
"(lambda(v_156)"
"(not"
"(let-values(((v18_157) v_156)"
"((temp19_158) '1)"
"((required-reference?20_159) required-reference?_135))"
"(if(variable-reference-constant?(#%variable-reference any-side-effects?8.1))"
"(any-side-effects?6.1 '#f '#f v18_157 temp19_158 required-reference?20_159)"
"(any-side-effects?8.1 v18_157 temp19_158 required-reference?20_159)))))"
"(lambda(v_160)(known-good-struct-properties? v_160 immutables-expr_138))"
"(lambda(v_161)(inspector-or-false? v_161))"
"(lambda(v_162)(procedure-spec? v_162 immutables-expr_138))"
"(lambda(v_163)(immutables-ok? v_163 init-field-count-expr_137))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_164)"
"(lambda(result_165 pos_166 pos_167)"
"(if(if(if pos-cont?_143(pos-cont?_143 pos_166) '#t)"
"(if pos-cont?_149(pos-cont?_149 pos_167) '#t)"
" '#f)"
"(let-values(((arg_168)(pos->vals_140 pos_166))"
"((pred_169)(pos->vals_146 pos_167)))"
"(if(if(if val-cont?_144(val-cont?_144 arg_168) '#t)"
"(if val-cont?_150(val-cont?_150 pred_169) '#t)"
" '#f)"
"(let-values(((result_170)"
"(let-values(((result_171) result_165))"
"(let-values(((result_172)"
"(let-values()"
"(let-values()(pred_169 arg_168)))))"
"(values result_172)))))"
"(if(if(if(if all-cont?_145(all-cont?_145 pos_166 arg_168) '#t)"
"(not((lambda x_173(not result_170)) arg_168))"
" '#f)"
"(if(if all-cont?_151(all-cont?_151 pos_167 pred_169) '#t)"
"(not((lambda x_174(not result_170)) pred_169))"
" '#f)"
" '#f)"
"(for-loop_164 result_170(pos-next_141 pos_166)(pos-next_147 pos_167))"
" result_170))"
" result_165))"
" result_165))))"
" for-loop_164)"
" '#t"
" init_142"
" init_148)))"
" '#f)"
" '#f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_175)"
"(let-values(((l_176)(correlated->list e_175)))"
"(+(field-count-expr-to-field-count(list-ref l_176 '3))(field-count-expr-to-field-count(list-ref l_176 '4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_177 v_178)"
"(if(pair?(correlated-e v_178))"
"(if(eq?(correlated-e(car(correlated-e v_178))) 'quote)(val?_177(correlated-e(correlated-cadr v_178))) '#f)"
" '#f)))"
"(define-values(false?)(lambda(v_179)(eq?(correlated-e v_179) '#f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_180)(if(quoted? exact-nonnegative-integer? v_180)(correlated-e(correlated-cadr v_180)) '#f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_181)"
"(let-values(((or-part_182)(quoted? false? v_181)))"
"(if or-part_182"
" or-part_182"
"(if(= '1(correlated-length v_181))(eq? 'current-inspector(correlated-e(car(correlated-e v_181)))) '#f)))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_183 immutables-expr_184)"
"(let-values(((or-part_185)(quoted? null? v_183)))"
"(if or-part_185"
" or-part_185"
"(let-values(((or-part_186)(eq? 'null(correlated-e v_183))))"
"(if or-part_186"
" or-part_186"
"(if(pair?(correlated-e v_183))"
"(if(eq?(correlated-e(car(correlated-e v_183))) 'list)"
"(if(let-values(((lst_187)(cdr(correlated->list v_183))))"
"(begin"
"(if(list? lst_187)(void)(let-values()(in-list lst_187)))"
"((letrec-values(((for-loop_188)"
"(lambda(result_189 lst_190)"
"(if(pair? lst_190)"
"(let-values(((prop+val_191)(unsafe-car lst_190)))"
"(if '#t"
"(let-values(((result_192)"
"(let-values(((result_193) result_189))"
"(let-values(((result_194)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_191)"
" '3)"
"(let-values(((prop+val_195)"
"(correlated->list"
" prop+val_191)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_195)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_195 '1)"
"(list-ref prop+val_195 '2)"
" immutables-expr_184)"
" '#f))"
" '#f)))))"
"(values result_194)))))"
"(if(if '#t"
"(not((lambda x_196(not result_192)) prop+val_191))"
" '#f)"
"(for-loop_188 result_192(unsafe-cdr lst_190))"
" result_192))"
" result_189))"
" result_189))))"
" for-loop_188)"
" '#t"
" lst_187)))"
"(="
"(sub1(correlated-length v_183))"
"(set-count"
"(let-values(((lst_197)(cdr(correlated->list v_183))))"
"(begin"
"(if(list? lst_197)(void)(let-values()(in-list lst_197)))"
"((letrec-values(((for-loop_198)"
"(lambda(table_199 lst_200)"
"(if(pair? lst_200)"
"(let-values(((prop+val_201)(unsafe-car lst_200)))"
"(if '#t"
"(let-values(((table_202)"
"(let-values(((table_203) table_199))"
"(let-values(((table_204)"
"(let-values()"
"(let-values(((key_205 val_206)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_201)"
" '1)))"
" '#t))))"
"(hash-set"
" table_203"
" key_205"
" val_206)))))"
"(values table_204)))))"
"(if '#t(for-loop_198 table_202(unsafe-cdr lst_200)) table_202))"
" table_199))"
" table_199))))"
" for-loop_198)"
" '#hash()"
" lst_197)))))"
" '#f)"
" '#f)"
" '#f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_207 val-expr_208 immutables-expr_209)"
"(let-values(((tmp_210)(correlated-e prop-expr_207)))"
"(if(equal? tmp_210 'prop:evt)"
"(let-values()(immutable-field? val-expr_208 immutables-expr_209))"
"(if(equal? tmp_210 'prop:procedure)"
"(let-values()(immutable-field? val-expr_208 immutables-expr_209))"
"(let-values() '#f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_211 immutables-expr_212)"
"(if(quoted? exact-nonnegative-integer? val-expr_211)"
"(memv(correlated-e(correlated-cadr val-expr_211))(immutables-expr-to-immutables immutables-expr_212 null))"
" '#f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_213 fail-v_214)"
"(let-values(((tmp_215)(if(pair?(correlated-e e_213))(correlated-e(car(correlated-e e_213))) '#f)))"
"(if(equal? tmp_215 'quote)"
"(let-values()"
"(let-values(((v_216)(correlated-cadr e_213)))"
"(let-values(((or-part_217)"
"(if(correlated-length v_216)"
"(let-values(((l_218)(map2 correlated-e(correlated->list v_216))))"
"(if(andmap2 exact-nonnegative-integer? l_218)"
"(if(=(length l_218)(set-count(list->set l_218))) l_218 '#f)"
" '#f))"
" '#f)))"
"(if or-part_217 or-part_217 fail-v_214))))"
"(let-values() fail-v_214)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_219 immutables-expr_220)"
"(let-values(((or-part_221)(quoted? false? e_219)))"
"(if or-part_221"
" or-part_221"
"(if(quoted? exact-nonnegative-integer? e_219)"
"(memv(correlated-e(correlated-cadr e_219))(immutables-expr-to-immutables immutables-expr_220 null))"
" '#f)))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_222 init-field-count-expr_223)"
"(let-values(((l_224)(immutables-expr-to-immutables e_222 '#f)))"
"(let-values(((c_225)(field-count-expr-to-field-count init-field-count-expr_223)))"
"(if l_224"
"(let-values(((lst_226) l_224))"
"(begin"
"(if(list? lst_226)(void)(let-values()(in-list lst_226)))"
"((letrec-values(((for-loop_227)"
"(lambda(result_228 lst_229)"
"(if(pair? lst_229)"
"(let-values(((n_230)(unsafe-car lst_229)))"
"(if '#t"
"(let-values(((result_231)"
"(let-values(((result_232) result_228))"
"(let-values(((result_233)"
"(let-values()(let-values()(< n_230 c_225)))))"
"(values result_233)))))"
"(if(if '#t(not((lambda x_234(not result_231)) n_230)) '#f)"
"(for-loop_227 result_231(unsafe-cdr lst_229))"
" result_231))"
" result_228))"
" result_228))))"
" for-loop_227)"
" '#t"
" lst_226)))"
" '#f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_235 locals_236 type_237)"
"(let-values(((l_238)(correlated->list e_235)))"
"(let-values(((a_239)"
"(if(=(length l_238) '4)(hash-ref locals_236(correlated-e(list-ref l_238 '1)) '#f) '#f)))"
"(if(struct-op? a_239)"
"(if(eq?(struct-op-type a_239) type_237)"
"(if(<(field-count-expr-to-field-count(list-ref l_238 '2))(struct-op-field-count a_239))"
"(quoted? symbol?(list-ref l_238 '3))"
" '#f)"
" '#f)"
" '#f)))))"
"(define-values"
"(compile-module9.1)"
"(lambda(as-submodule?2_2 as-submodule?5_3 self1_4 self4_5 serializable?3_6 serializable?6_7 s7_8 cctx8_9)"
"(let-values(((s_10) s7_8))"
"(let-values(((cctx_11) cctx8_9))"
"(let-values(((given-self_12)(if self4_5 self1_4 '#f)))"
"(let-values(((as-submodule?_13)(if as-submodule?5_3 as-submodule?2_2 '#f)))"
"(let-values(((serializable?_14)(if serializable?6_7 serializable?3_6(not as-submodule?_13))))"
"(let-values()"
"(let-values(((m-m_15)(match-syntax(syntax-disarm$1 s_10) '(module name initial-require mb))))"
"(let-values(((m_16)(match-syntax(syntax-disarm$1(m-m_15 'mb)) '(#%module-begin body ...))))"
"(let-values(((enclosing-self_17)(compile-context-module-self cctx_11)))"
"(let-values(((self_18)"
"(let-values(((or-part_50) given-self_12))"
"(if or-part_50"
" or-part_50"
"(make-generic-self-module-path-index"
"(make-self-module-path-index"
"(syntax-e$1(m-m_15 'name))"
" enclosing-self_17))))))"
"(let-values(((full-module-name_19)"
"(let-values(((parent-full-name_51)(compile-context-full-module-name cctx_11))"
"((name_52)(syntax-e$1(m-m_15 'name))))"
"(if parent-full-name_51"
"(append"
"(if(list? parent-full-name_51)"
" parent-full-name_51"
"(list parent-full-name_51))"
"(list name_52))"
" name_52))))"
"(let-values(((requires_20)(syntax-property$1 s_10 'module-requires)))"
"(let-values(((provides_21)(syntax-property$1 s_10 'module-provides)))"
"(let-values(((encoded-root-expand-ctx-box_22)"
"(box(syntax-property$1 s_10 'module-root-expand-context))))"
"(let-values(((body-context-simple?_23)"
"(syntax-property$1 s_10 'module-body-context-simple?)))"
"(let-values(((language-info_24)"
"(filter-language-info(syntax-property$1 s_10 'module-language))))"
"(let-values(((bodys_25)(m_16 'body)))"
"(let-values(((empty-result-for-module->namespace?_26) '#f))"
"(let-values(((mpis_27)(make-module-path-index-table)))"
"(let-values(((body-cctx_28)"
"(let-values(((the-struct_53) cctx_11))"
"(if(compile-context? the-struct_53)"
"(let-values(((phase24_54) '0)"
"((self25_55) self_18)"
"((module-self26_56) self_18)"
"((full-module-name27_57) full-module-name_19)"
"((lazy-syntax-literals?28_58) '#t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_53)"
" phase24_54"
" self25_55"
" module-self26_56"
" full-module-name27_57"
" lazy-syntax-literals?28_58"
"(compile-context-header the-struct_53)))"
"(raise-argument-error"
" 'struct-copy"
" '\"compile-context?\""
" the-struct_53)))))"
"(let-values(((cross-phase-persistent?_29) '#f))"
"(let-values(((side-effects_30)(make-hasheqv)))"
"(let-values(((check-side-effects!_31)"
"(lambda(e_59"
" expected-results_60"
" phase_61"
" required-reference?_62)"
"(if(hash-ref side-effects_30 phase_61 '#f)"
"(void)"
"(let-values()"
"(if(let-values(((e29_63) e_59)"
"((expected-results30_64)"
" expected-results_60)"
"((required-reference?31_65)"
" required-reference?_62))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" '#f"
" '#f"
" e29_63"
" expected-results30_64"
" required-reference?31_65)"
"(any-side-effects?8.1"
" e29_63"
" expected-results30_64"
" required-reference?31_65)))"
"(let-values()"
"(hash-set! side-effects_30 phase_61 '#t))"
"(void)))))))"
"(let-values(((body-linklets_32"
" min-phase_33"
" max-phase_34"
" phase-to-link-module-uses_35"
" phase-to-link-module-uses-expr_36"
" phase-to-link-extra-inspectorsss_37"
" syntax-literalss_38"
" root-ctx-syntax-literals_39)"
"(let-values(((...r/compile/module.rkt:88:4_66)"
" compile-forms14.1)"
"((bodys32_67) bodys_25)"
"((body-cctx33_68) body-cctx_28)"
"((mpis34_69) mpis_27)"
"((encoded-root-expand-ctx-box35_70)"
" encoded-root-expand-ctx-box_22)"
"((body-context-simple?36_71)"
" body-context-simple?_23)"
"((check-side-effects!37_72)"
" check-side-effects!_31)"
"((temp38_73)"
"(lambda(body_74 cctx_75)"
"(let-values(((tmp_76)"
"(core-form-sym"
" body_74"
"(compile-context-phase"
" cctx_75))))"
"(if(equal? tmp_76 '#%declare)"
"(let-values()"
"(let-values(((m_77)"
"(match-syntax"
" body_74"
" '(#%declare"
" kw"
" ...))))"
"(begin"
"(let-values(((lst_78)"
"(m_77 'kw)))"
"(begin"
"(if(list? lst_78)"
"(void)"
"(let-values()"
"(in-list lst_78)))"
"((letrec-values(((for-loop_79)"
"(lambda(fold-var_80"
" lst_81)"
"(if(pair?"
" lst_81)"
"(let-values(((kw_82)"
"(unsafe-car"
" lst_81)))"
"(if '#t"
"(let-values(((fold-var_83)"
"(let-values(((fold-var_84)"
" fold-var_80))"
"(let-values(((fold-var_85)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_82)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_29"
" '#t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_82)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_26"
" '#t)"
"(set-box!"
" encoded-root-expand-ctx-box_22"
" '#t)))"
"(void))))"
"(void)))))"
"(values"
" fold-var_85)))))"
"(if '#t"
"(for-loop_79"
" fold-var_83"
"(unsafe-cdr"
" lst_81))"
" fold-var_83))"
" fold-var_80))"
" fold-var_80))))"
" for-loop_79)"
"(void)"
" lst_78)))"
" '#f)))"
"(let-values() '#f))))))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-forms14.1))"
"(compile-forms12.1"
" check-side-effects!37_72"
" '#t"
" encoded-root-expand-ctx-box35_70"
" '#t"
" temp38_73"
" '#t"
" body-context-simple?36_71"
" '#t"
" bodys32_67"
" body-cctx33_68"
" mpis34_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:88:4_66"
" keyword-procedure-extract"
" '(#:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?)"
" '5)"
" '(#:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?)"
"(list"
" check-side-effects!37_72"
" encoded-root-expand-ctx-box35_70"
" temp38_73"
" body-context-simple?36_71)"
" bodys32_67"
" body-cctx33_68"
" mpis34_69)))))"
"(let-values(((all-syntax-literalss_40)"
"(if root-ctx-syntax-literals_39"
"(append"
" syntax-literalss_38"
"(list root-ctx-syntax-literals_39))"
" syntax-literalss_38)))"
"(let-values(((pre-submodules_41)"
"(let-values(((...r/compile/module.rkt:111:25_86)"
" compile-submodules23.1)"
"((temp39_87) 'module)"
"((bodys40_88) bodys_25)"
"((as-submodule?41_89) as-submodule?_13)"
"((serializable?42_90) serializable?_14)"
"((body-cctx43_91) body-cctx_28))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules23.1))"
"(compile-submodules21.1"
" as-submodule?41_89"
" bodys40_88"
" body-cctx43_91"
" serializable?42_90"
" temp39_87)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:111:25_86"
" keyword-procedure-extract"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?)"
" '3)"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?)"
"(list"
" as-submodule?41_89"
" bodys40_88"
" body-cctx43_91"
" serializable?42_90)"
" temp39_87)))))"
"(let-values(((post-submodules_42)"
"(let-values(((...r/compile/module.rkt:116:26_92)"
" compile-submodules23.1)"
"((temp44_93) 'module*)"
"((bodys45_94) bodys_25)"
"((as-submodule?46_95)"
" as-submodule?_13)"
"((serializable?47_96)"
" serializable?_14)"
"((body-cctx48_97) body-cctx_28))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules23.1))"
"(compile-submodules21.1"
" as-submodule?46_95"
" bodys45_94"
" body-cctx48_97"
" serializable?47_96"
" temp44_93)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:116:26_92"
" keyword-procedure-extract"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?)"
" '3)"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?)"
"(list"
" as-submodule?46_95"
" bodys45_94"
" body-cctx48_97"
" serializable?47_96)"
" temp44_93)))))"
"(let-values(((get-submodule-linklet-directory_43)"
"(lambda(p_98)"
"(compiled-in-memory-linklet-directory"
"(cdr p_98)))))"
"(let-values(((declaration-body_44)"
"(list"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index! mpis_27 self_18))"
"(list"
" 'define-values"
" '(cross-phase-persistent?)"
" cross-phase-persistent?_29)"
"(list"
" 'define-values"
" '(requires)"
"(generate-deserialize requires_20 mpis_27))"
"(list"
" 'define-values"
" '(provides)"
"(generate-deserialize provides_21 mpis_27))"
"(list"
" 'define-values"
" '(side-effects)"
"(list"
" 'quote"
"(let-values(((temp49_99)"
"(hash-keys side-effects_30))"
"((<50_100) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1"
" '#f"
" '#f"
" '#f"
" '#f"
" temp49_99"
" <50_100)"
"(sort9.1 temp49_99 <50_100)))))"
"(list"
" 'define-values"
" '(min-phase)"
" min-phase_33)"
"(list"
" 'define-values"
" '(max-phase)"
" max-phase_34)"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_36)"
"(list"
" 'define-values"
" '(language-info)"
"(list 'quote language-info_24)))))"
"(let-values(((declaration-linklet_45)"
"(1/compile-linklet"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list(list 'mpi-vector mpi-vector-id)))"
" '(self-mpi"
" requires"
" provides"
" variables"
" side-effects"
" cross-phase-persistent?"
" min-phase"
" max-phase"
" phase-to-link-modules"
" language-info)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
" declaration-body_44))))"
"(let-values(((syntax-literals-linklet_46)"
"(1/compile-linklet"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list"
"(list 'mpi-vector mpi-vector-id)"
"(list"
" 'deserialized-syntax"
" deserialized-syntax-id))"
" instance-imports)"
"(list*"
"(list*"
" syntax-literalss-id"
" '(syntax-literalss))"
"(list*"
" get-syntax-literal!-id"
" '(get-syntax-literal!))"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((...r/compile/module.rkt:178:9_101)"
" generate-lazy-syntax-literals!10.1)"
"((all-syntax-literalss51_102)"
" all-syntax-literalss_40)"
"((mpis52_103) mpis_27)"
"((self53_104) self_18)"
"((temp54_105)"
"(not serializable?_14)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-lazy-syntax-literals!10.1))"
"(generate-lazy-syntax-literals!8.1"
" temp54_105"
" '#t"
" all-syntax-literalss51_102"
" mpis52_103"
" self53_104)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:178:9_101"
" keyword-procedure-extract"
" '(#:skip-deserialize?)"
" '5)"
" '(#:skip-deserialize?)"
"(list temp54_105)"
" all-syntax-literalss51_102"
" mpis52_103"
" self53_104)))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-syntax-literals_39"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
"(add1 max-phase_34)"
" '0)))"
"(if empty-result-for-module->namespace?_26"
"(let-values() ''empty)"
"(let-values() ''#f))))))))))"
"(let-values(((data-linklet_47)"
"(if serializable?_14"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list*"
"(list* mpi-vector-id '(mpi-vector))"
" '(deserialized-syntax))"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_27))"
"(list"
" 'define-values"
" '(deserialized-syntax)"
"(list*"
" 'make-vector"
"(+ '2 max-phase_34)"
" '(#f)))))"
" '#f)))"
"(let-values(((bundle_48)"
"(let-values(((linklets_106)"
"(hash-set"
" body-linklets_32"
" 'decl"
" declaration-linklet_45)))"
"(let-values(((linklets_107)"
"(if data-linklet_47"
"(hash-set"
" linklets_106"
" 'data"
" data-linklet_47)"
" linklets_106)))"
"(let-values(((linklets_108)"
"(hash-set"
" linklets_107"
" 'stx"
" syntax-literals-linklet_46)))"
"(let-values(((linklets_109)"
"(hash-set"
" linklets_108"
" 'pre"
"(map2"
" car"
" pre-submodules_41))))"
"(let-values(((linklets_110)"
"(hash-set"
" linklets_109"
" 'post"
"(map2"
" car"
" post-submodules_42))))"
"(let-values(((linklets_111)"
"(hash-set"
" linklets_110"
" 'name"
" full-module-name_19)))"
"(1/hash->linklet-bundle"
" linklets_111)))))))))"
"(let-values(((ld_49)"
"(1/hash->linklet-directory"
"(let-values(((lst_112)"
"(append"
" pre-submodules_41"
" post-submodules_42)))"
"(begin"
"(if(list? lst_112)"
"(void)"
"(let-values()"
"(in-list lst_112)))"
"((letrec-values(((for-loop_113)"
"(lambda(ht_114"
" lst_115)"
"(if(pair?"
" lst_115)"
"(let-values(((sm_116)"
"(unsafe-car"
" lst_115)))"
"(if '#t"
"(let-values(((ht_117)"
"(let-values(((ht_118)"
" ht_114))"
"(let-values(((ht_119)"
"(let-values()"
"(hash-set"
" ht_118"
"(car"
" sm_116)"
"(compiled-in-memory-linklet-directory"
"(cdr"
" sm_116))))))"
"(values"
" ht_119)))))"
"(if '#t"
"(for-loop_113"
" ht_117"
"(unsafe-cdr"
" lst_115))"
" ht_117))"
" ht_114))"
" ht_114))))"
" for-loop_113)"
"(hash '#f bundle_48)"
" lst_112))))))"
"(compiled-in-memory1.1"
" ld_49"
" '0"
" max-phase_34"
" phase-to-link-module-uses_35"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_37"
"(mpis-as-vector mpis_27)"
"(syntax-literals-as-vectors"
" all-syntax-literalss_40"
" '0)"
"(map2 cdr pre-submodules_41)"
"(map2"
" cdr"
" post-submodules_42))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack10.1$3)"
"(lambda(given-kws_120 given-args_121 s7_122 cctx8_123)"
"(let-values(((as-submodule?5_124)(if(pair? given-kws_120)(eq? '#:as-submodule?(car given-kws_120)) '#f)))"
"(let-values(((as-submodule?2_125)(if as-submodule?5_124(car given-args_121)(void)))"
"((given-kws_126)(if as-submodule?5_124(cdr given-kws_120) given-kws_120))"
"((given-args_127)(if as-submodule?5_124(cdr given-args_121) given-args_121)))"
"(let-values(((self4_128)(if(pair? given-kws_126)(eq? '#:self(car given-kws_126)) '#f)))"
"(let-values(((self1_129)(if self4_128(car given-args_127)(void)))"
"((given-kws_130)(if self4_128(cdr given-kws_126) given-kws_126))"
"((given-args_131)(if self4_128(cdr given-args_127) given-args_127)))"
"(let-values(((serializable?6_132)(pair? given-kws_130)))"
"(let-values(((serializable?3_133)(if serializable?6_132(car given-args_131)(void))))"
"(compile-module9.1"
" as-submodule?2_125"
" as-submodule?5_124"
" self1_129"
" self4_128"
" serializable?3_133"
" serializable?6_132"
" s7_122"
" cctx8_123)))))))))"
"(define-values"
"(compile-module11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_134 given-argc_135)"
"(if(= given-argc_135 '4)"
"(let-values(((l1_136) given-kws_134))"
"(let-values(((l1_137)"
"(if(null? l1_136) l1_136(if(eq?(car l1_136) '#:as-submodule?)(cdr l1_136) l1_136))))"
"(let-values(((l1_138) l1_137))"
"(let-values(((l1_139)(if(null? l1_138) l1_138(if(eq?(car l1_138) '#:self)(cdr l1_138) l1_138))))"
"(let-values(((l1_140) l1_139))"
"(let-values(((l1_141)"
"(if(null? l1_140) l1_140(if(eq?(car l1_140) '#:serializable?)(cdr l1_140) l1_140))))"
"(null? l1_141)))))))"
" '#f))"
"(case-lambda"
"((given-kws_142 given-args_143 s_144 cctx_145)(unpack10.1$3 given-kws_142 given-args_143 s_144 cctx_145)))"
" null"
" '(#:as-submodule? #:self #:serializable?)"
"(let-values(((compile-module_146)(case-lambda((s_147 cctx_148)(unpack10.1$3 null null s_147 cctx_148)))))"
" compile-module_146)))"
"(define-values"
"(lifted/1.1$8)"
"(make-required"
" 'compile-submodules"
"(case-lambda((self_149 form-name_150)(apply missing-kw self_149 form-name_150 null)))"
" '#f"
" '#f))"
"(define-values"
"(compile-submodules21.1)"
"(lambda(as-submodule?13_151 bodys12_152 cctx15_153 serializable?14_154 form-name20_155)"
"(let-values(((form-name_156) form-name20_155))"
"(let-values(((bodys_157) bodys12_152))"
"(let-values(((as-submodule?_158) as-submodule?13_151))"
"(let-values(((serializable?_159) serializable?14_154))"
"(let-values(((body-cctx_160) cctx15_153))"
"(let-values()"
"(if as-submodule?_158"
"(let-values() null)"
"(let-values()"
"((letrec-values(((loop_161)"
"(lambda(bodys_162 phase_163)"
"(if(null? bodys_162)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_164)(syntax-disarm$1(car bodys_162))))"
"(let-values(((f_165)(core-form-sym body_164 phase_163)))"
"(if(eq? f_165 form-name_156)"
"(let-values()"
"(let-values(((sm-m_166)(match-syntax body_164 '(_ name . _))))"
"(let-values(((s-shifted_167)"
"(if(try-match-syntax"
" body_164"
" '(module* name #f . _))"
"(let-values()"
"(syntax-shift-phase-level$1"
" body_164"
"(phase- '0 phase_163)))"
"(let-values() body_164))))"
"(cons"
"(cons"
"(syntax-e$1(sm-m_166 'name))"
"(let-values(((...r/compile/module.rkt:270:22_168)"
" compile-module11.1)"
"((s-shifted55_169) s-shifted_167)"
"((body-cctx56_170) body-cctx_160)"
"((serializable?57_171) serializable?_159))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module11.1))"
"(compile-module9.1"
" '#f"
" '#f"
" '#f"
" '#f"
" serializable?57_171"
" '#t"
" s-shifted55_169"
" body-cctx56_170)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:270:22_168"
" keyword-procedure-extract"
" '(#:serializable?)"
" '4)"
" '(#:serializable?)"
"(list serializable?57_171)"
" s-shifted55_169"
" body-cctx56_170))))"
"(loop_161(cdr bodys_162) phase_163)))))"
"(if(eq? f_165 'begin-for-syntax)"
"(let-values()"
"(let-values(((m_172)"
"(match-syntax body_164 '(begin-for-syntax e ...))))"
"(append"
"(loop_161(m_172 'e)(add1 phase_163))"
"(loop_161(cdr bodys_162) phase_163))))"
"(let-values()(loop_161(cdr bodys_162) phase_163)))))))))))"
" loop_161)"
" bodys_157"
" '0)))))))))))"
"(define-values"
"(unpack22.1)"
"(lambda(given-kws_173 given-args_174 form-name20_175)"
"(let-values(((as-submodule?13_176)(car given-args_174))"
"((given-kws_177)(cdr given-kws_173))"
"((given-args_178)(cdr given-args_174)))"
"(let-values(((bodys12_179)(car given-args_178))"
"((given-kws_180)(cdr given-kws_177))"
"((given-args_181)(cdr given-args_178)))"
"(let-values(((cctx15_182)(car given-args_181))"
"((given-kws_183)(cdr given-kws_180))"
"((given-args_184)(cdr given-args_181)))"
"(let-values(((serializable?14_185)(car given-args_184)))"
"(compile-submodules21.1"
" as-submodule?13_176"
" bodys12_179"
" cctx15_182"
" serializable?14_185"
" form-name20_175)))))))"
"(define-values"
"(compile-submodules23.1)"
"(lifted/1.1$8"
"(lambda(given-kws_186 given-argc_187)"
"(if(= given-argc_187 '3)"
"(let-values(((l2_188) given-kws_186))"
"(if(pair? l2_188)"
"(if(eq?(car l2_188) '#:as-submodule?)"
"(let-values(((l2_189)(cdr l2_188)))"
"(if(pair? l2_189)"
"(if(eq?(car l2_189) '#:bodys)"
"(let-values(((l2_190)(cdr l2_189)))"
"(if(pair? l2_190)"
"(if(eq?(car l2_190) '#:cctx)"
"(let-values(((l2_191)(cdr l2_190)))"
"(if(pair? l2_191)(if(eq?(car l2_191) '#:serializable?)(null?(cdr l2_191)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda((given-kws_192 given-args_193 form-name_194)(unpack22.1 given-kws_192 given-args_193 form-name_194)))"
" '(#:as-submodule? #:bodys #:cctx #:serializable?)"
" '(#:as-submodule? #:bodys #:cctx #:serializable?)))"
"(define-values"
"(filter-language-info)"
"(lambda(li_195)"
"(if(vector? li_195)"
"(if(= '3(vector-length li_195))"
"(if(1/module-path?(vector-ref li_195 '0))(if(symbol?(vector-ref li_195 '1)) li_195 '#f) '#f)"
" '#f)"
" '#f)))"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis/fast"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type"
" 'requires+provides"
" '#f"
" '9"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 3 4 5 6)"
" '#f"
" 'requires+provides)))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 '0 'self)"
"(make-struct-field-accessor -ref_8 '1 'require-mpis)"
"(make-struct-field-accessor -ref_8 '2 'require-mpis/fast)"
"(make-struct-field-accessor -ref_8 '3 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_8 '4 'requires)"
"(make-struct-field-accessor -ref_8 '5 'provides)"
"(make-struct-field-accessor -ref_8 '6 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_8 '7 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_8 '8 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_9 '7 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_9 '8 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed?)"
"(let-values(((struct:_66 make-_67 ?_68 -ref_69 -set!_70)"
"(make-struct-type 'required '#f '3 '0 '#f null(current-inspector) '#f '(0 1 2) '#f 'required)))"
"(values"
" struct:_66"
" make-_67"
" ?_68"
"(make-struct-field-accessor -ref_69 '0 'id)"
"(make-struct-field-accessor -ref_69 '1 'phase)"
"(make-struct-field-accessor -ref_69 '2 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_97)"
"(requires+provides1.1"
" self_97"
"(make-hash)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" '#t"
" '#t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_98)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_98))"
"(hash-clear!(requires+provides-requires r+p_98))"
"(hash-clear!(requires+provides-provides r+p_98))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_98)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_99 mpi_100)"
"(let-values(((or-part_101)(hash-ref(requires+provides-require-mpis/fast r+p_99) mpi_100 '#f)))"
"(if or-part_101"
" or-part_101"
"(let-values(((or-part_102)(hash-ref(requires+provides-require-mpis r+p_99) mpi_100 '#f)))"
"(if or-part_102"
" or-part_102"
"(begin"
"(hash-set!(requires+provides-require-mpis r+p_99) mpi_100 mpi_100)"
"(hash-set!(requires+provides-require-mpis/fast r+p_99) mpi_100 mpi_100)"
" mpi_100)))))))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_103 mod-name_104 phase-shift_105 is-cross-phase-persistent?_106)"
"(let-values(((mpi_107)(intern-mpi r+p_103 mod-name_104)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_103) mpi_107 '#hasheqv()) phase-shift_105 '#f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_103)"
" phase-shift_105"
"(lambda(l_108)(cons mpi_107 l_108))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_103) mpi_107 make-hasheqv)"
" phase-shift_105"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_106"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_103 '#f)))"
" mpi_107))))"
"(define-values"
"(add-defined-or-required-id!9.1)"
"(lambda(can-be-shadowed?3_109 can-be-shadowed?4_110 r+p5_111 id6_112 phase7_113 binding8_114)"
"(let-values(((r+p_115) r+p5_111))"
"(let-values(((id_116) id6_112))"
"(let-values(((phase_117) phase7_113))"
"(let-values(((binding_118) binding8_114))"
"(let-values(((can-be-shadowed?_119)(if can-be-shadowed?4_110 can-be-shadowed?3_109 '#f)))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_117"
"(phase+"
"(module-binding-nominal-phase binding_118)"
"(module-binding-nominal-require-phase binding_118)))"
"(void)"
" (let-values () (error '\"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:111:2_120) add-defined-or-required-id-at-nominal!23.1)"
"((r+p54_121) r+p_115)"
"((id55_122) id_116)"
"((phase56_123) phase_117)"
"((temp57_124)(module-binding-nominal-module binding_118))"
"((temp58_125)(module-binding-nominal-require-phase binding_118))"
"((can-be-shadowed?59_126) can-be-shadowed?_119))"
"(if(variable-reference-constant?(#%variable-reference add-defined-or-required-id-at-nominal!23.1))"
"(add-defined-or-required-id-at-nominal!21.1"
" can-be-shadowed?59_126"
" temp57_124"
" temp58_125"
" r+p54_121"
" id55_122"
" phase56_123)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:111:2_120"
" keyword-procedure-extract"
" '(#:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '5)"
" '(#:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
"(list can-be-shadowed?59_126 temp57_124 temp58_125)"
" r+p54_121"
" id55_122"
" phase56_123))))))))))))"
"(define-values"
"(unpack10.1)"
"(lambda(given-kws_127 given-args_128 r+p5_129 id6_130 phase7_131 binding8_132)"
"(let-values(((can-be-shadowed?4_133)(pair? given-kws_127)))"
"(let-values(((can-be-shadowed?3_134)(if can-be-shadowed?4_133(car given-args_128)(void))))"
"(add-defined-or-required-id!9.1"
" can-be-shadowed?3_134"
" can-be-shadowed?4_133"
" r+p5_129"
" id6_130"
" phase7_131"
" binding8_132)))))"
"(define-values"
"(add-defined-or-required-id!11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_135 given-argc_136)"
"(if(= given-argc_136 '6)"
"(let-values(((l1_137) given-kws_135))"
"(let-values(((l1_138)"
"(if(null? l1_137) l1_137(if(eq?(car l1_137) '#:can-be-shadowed?)(cdr l1_137) l1_137))))"
"(null? l1_138)))"
" '#f))"
"(case-lambda"
"((given-kws_139 given-args_140 r+p_141 id_142 phase_143 binding_144)"
"(unpack10.1 given-kws_139 given-args_140 r+p_141 id_142 phase_143 binding_144)))"
" null"
" '(#:can-be-shadowed?)"
"(let-values(((add-defined-or-required-id!_145)"
"(case-lambda"
"((r+p_146 id_147 phase_148 binding_149)"
"(unpack10.1 null null r+p_146 id_147 phase_148 binding_149)))))"
" add-defined-or-required-id!_145)))"
"(define-values"
"(lifted/1.1$3)"
"(make-required"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_150 r+p_151 id_152 phase_153)(apply missing-kw self_150 r+p_151 id_152 phase_153 null)))"
" '#f"
" '#f))"
"(define-values"
"(add-defined-or-required-id-at-nominal!21.1)"
"(lambda(can-be-shadowed?14_154 nominal-module12_155 nominal-require-phase13_156 r+p18_157 id19_158 phase20_159)"
"(let-values(((r+p_160) r+p18_157))"
"(let-values(((id_161) id19_158))"
"(let-values(((phase_162) phase20_159))"
"(let-values(((nominal-module_163) nominal-module12_155))"
"(let-values(((nominal-require-phase_164) nominal-require-phase13_156))"
"(let-values(((can-be-shadowed?_165) can-be-shadowed?14_154))"
"(let-values()"
"(let-values(((at-mod_166)"
"(hash-ref!"
"(requires+provides-requires r+p_160)"
"(intern-mpi r+p_160 nominal-module_163)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_167)(hash-ref! at-mod_166 nominal-require-phase_164 make-hasheq)))"
"(let-values(((sym_168)(syntax-e$1 id_161)))"
"(hash-set!"
" sym-to-reqds_167"
" sym_168"
"(cons"
"(required2.1 id_161 phase_162 can-be-shadowed?_165)"
"(hash-ref sym-to-reqds_167 sym_168 null)))))))))))))))"
"(define-values"
"(unpack22.1$3)"
"(lambda(given-kws_169 given-args_170 r+p18_171 id19_172 phase20_173)"
"(let-values(((can-be-shadowed?14_174)(car given-args_170))"
"((given-kws_175)(cdr given-kws_169))"
"((given-args_176)(cdr given-args_170)))"
"(let-values(((nominal-module12_177)(car given-args_176))"
"((given-kws_178)(cdr given-kws_175))"
"((given-args_179)(cdr given-args_176)))"
"(let-values(((nominal-require-phase13_180)(car given-args_179)))"
"(add-defined-or-required-id-at-nominal!21.1"
" can-be-shadowed?14_174"
" nominal-module12_177"
" nominal-require-phase13_180"
" r+p18_171"
" id19_172"
" phase20_173))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!23.1)"
"(lifted/1.1$3"
"(lambda(given-kws_181 given-argc_182)"
"(if(= given-argc_182 '5)"
"(let-values(((l2_183) given-kws_181))"
"(if(pair? l2_183)"
"(if(eq?(car l2_183) '#:can-be-shadowed?)"
"(let-values(((l2_184)(cdr l2_183)))"
"(if(pair? l2_184)"
"(if(eq?(car l2_184) '#:nominal-module)"
"(let-values(((l2_185)(cdr l2_184)))"
"(if(pair? l2_185)(if(eq?(car l2_185) '#:nominal-require-phase)(null?(cdr l2_185)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_186 given-args_187 r+p_188 id_189 phase_190)"
"(unpack22.1$3 given-kws_186 given-args_187 r+p_188 id_189 phase_190)))"
" '(#:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(lifted/2.1$5)"
"(make-required"
" 'add-enclosing-module-defined-and-required!"
"(case-lambda"
"((self_191 r+p_192 enclosing-mod_193 phase-shift_194)"
"(apply missing-kw self_191 r+p_192 enclosing-mod_193 phase-shift_194 null)))"
" '#f"
" '#f))"
"(define-values"
"(add-enclosing-module-defined-and-required!29.1)"
"(lambda(enclosing-requires+provides24_195 r+p26_196 enclosing-mod27_197 phase-shift28_198)"
"(let-values(((r+p_199) r+p26_196))"
"(let-values(((enclosing-r+p_200) enclosing-requires+provides24_195))"
"(let-values(((enclosing-mod_201) enclosing-mod27_197))"
"(let-values(((phase-shift_202) phase-shift28_198))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_199 '#f)"
"(let-values(((ht_203)(requires+provides-requires enclosing-r+p_200)))"
"(begin"
"(if((lambda(ht_204)(hash? ht_204)) ht_203)(void)(let-values()(default-in-hash ht_203)))"
"((letrec-values(((for-loop_205)"
"(lambda(fold-var_206 i_207)"
"(if i_207"
"(let-values(((mod-name_208 at-mod_209)"
"(hash-iterate-key+value ht_203 i_207)))"
"(if '#t"
"(let-values(((fold-var_210)"
"(let-values(((fold-var_211) fold-var_206))"
"(let-values(((fold-var_212)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ht_213) at-mod_209))"
"(begin"
"(if((lambda(ht_214)"
"(hash? ht_214))"
" ht_213)"
"(void)"
"(let-values()"
"(default-in-hash ht_213)))"
"((letrec-values(((for-loop_215)"
"(lambda(fold-var_216"
" i_217)"
"(if i_217"
"(let-values(((phase_218"
" at-phase_219)"
"(hash-iterate-key+value"
" ht_213"
" i_217)))"
"(if '#t"
"(let-values(((fold-var_220)"
"(let-values(((ht_221)"
" at-phase_219))"
"(begin"
"(if((lambda(ht_222)"
"(hash?"
" ht_222))"
" ht_221)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_221)))"
"((letrec-values(((for-loop_223)"
"(lambda(fold-var_224"
" i_225)"
"(if i_225"
"(let-values(((reqds_226)"
"(hash-iterate-value"
" ht_221"
" i_225)))"
"(if '#t"
"(let-values(((fold-var_227)"
"(let-values(((lst_228)"
" reqds_226))"
"(begin"
"(if(list?"
" lst_228)"
"(void)"
"(let-values()"
"(in-list"
" lst_228)))"
"((letrec-values(((for-loop_229)"
"(lambda(fold-var_230"
" lst_231)"
"(if(pair?"
" lst_231)"
"(let-values(((reqd_232)"
"(unsafe-car"
" lst_231)))"
"(if '#t"
"(let-values(((fold-var_233)"
"(let-values(((fold-var_234)"
" fold-var_230))"
"(let-values(((fold-var_235)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((.../require+provide.rkt:140:6_236)"
" add-defined-or-required-id-at-nominal!23.1)"
"((r+p60_237)"
" r+p_199)"
"((temp61_238)"
"(1/syntax-module-path-index-shift"
"(required-id"
" reqd_232)"
"(requires+provides-self"
" enclosing-r+p_200)"
" enclosing-mod_201))"
"((temp62_239)"
"(phase+"
"(required-phase"
" reqd_232)"
" phase-shift_202))"
"((enclosing-mod63_240)"
" enclosing-mod_201)"
"((phase-shift64_241)"
" phase-shift_202)"
"((temp65_242)"
" '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id-at-nominal!23.1))"
"(add-defined-or-required-id-at-nominal!21.1"
" temp65_242"
" enclosing-mod63_240"
" phase-shift64_241"
" r+p60_237"
" temp61_238"
" temp62_239)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:140:6_236"
" keyword-procedure-extract"
" '(#:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
" '5)"
" '(#:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
"(list"
" temp65_242"
" enclosing-mod63_240"
" phase-shift64_241)"
" r+p60_237"
" temp61_238"
" temp62_239))))"
"(void)))))"
"(values"
" fold-var_235)))))"
"(if '#t"
"(for-loop_229"
" fold-var_233"
"(unsafe-cdr"
" lst_231))"
" fold-var_233))"
" fold-var_230))"
" fold-var_230))))"
" for-loop_229)"
" fold-var_224"
" lst_228)))))"
"(if '#t"
"(for-loop_223"
" fold-var_227"
"(hash-iterate-next"
" ht_221"
" i_225))"
" fold-var_227))"
" fold-var_224))"
" fold-var_224))))"
" for-loop_223)"
" fold-var_216"
"(hash-iterate-first"
" ht_221))))))"
"(if '#t"
"(for-loop_215"
" fold-var_220"
"(hash-iterate-next"
" ht_213"
" i_217))"
" fold-var_220))"
" fold-var_216))"
" fold-var_216))))"
" for-loop_215)"
"(void)"
"(hash-iterate-first ht_213)))))"
"(void)))))"
"(values fold-var_212)))))"
"(if '#t"
"(for-loop_205 fold-var_210(hash-iterate-next ht_203 i_207))"
" fold-var_210))"
" fold-var_206))"
" fold-var_206))))"
" for-loop_205)"
"(void)"
"(hash-iterate-first ht_203))))))))))))"
"(define-values"
"(unpack30.1$1)"
"(lambda(given-kws_243 given-args_244 r+p26_245 enclosing-mod27_246 phase-shift28_247)"
"(let-values(((enclosing-requires+provides24_248)(car given-args_244)))"
"(add-enclosing-module-defined-and-required!29.1"
" enclosing-requires+provides24_248"
" r+p26_245"
" enclosing-mod27_246"
" phase-shift28_247))))"
"(define-values"
"(add-enclosing-module-defined-and-required!31.1)"
"(lifted/2.1$5"
"(lambda(given-kws_249 given-argc_250)"
"(if(= given-argc_250 '5)"
"(let-values(((l2_251) given-kws_249))"
"(if(pair? l2_251)(if(eq?(car l2_251) '#:enclosing-requires+provides)(null?(cdr l2_251)) '#f) '#f))"
" '#f))"
"(case-lambda"
"((given-kws_252 given-args_253 r+p_254 enclosing-mod_255 phase-shift_256)"
"(unpack30.1$1 given-kws_252 given-args_253 r+p_254 enclosing-mod_255 phase-shift_256)))"
" '(#:enclosing-requires+provides)"
" '(#:enclosing-requires+provides)))"
"(define-values"
"(lifted/3.1$2)"
"(make-required"
" 'remove-required-id!"
"(case-lambda((self_257 r+p_258 id_259 phase_260)(apply missing-kw self_257 r+p_258 id_259 phase_260 null)))"
" '#f"
" '#f))"
"(define-values"
"(remove-required-id!37.1)"
"(lambda(unless-matches32_261 r+p34_262 id35_263 phase36_264)"
"(let-values(((r+p_265) r+p34_262))"
"(let-values(((id_266) id35_263))"
"(let-values(((phase_267) phase36_264))"
"(let-values(((binding_268) unless-matches32_261))"
"(let-values()"
"(let-values(((b_269)"
"(let-values(((.../require+provide.rkt:152:12_270) resolve+shift15.1)"
"((id66_271) id_266)"
"((phase67_272) phase_267)"
"((temp68_273) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f temp68_273 '#t '#f '#f '#f '#f '#f '#f id66_271 phase67_272)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:152:12_270"
" keyword-procedure-extract"
" '(#:exactly?)"
" '4)"
" '(#:exactly?)"
"(list temp68_273)"
" id66_271"
" phase67_272)))))"
"(if b_269"
"(let-values()"
"(let-values(((at-mod_274)"
"(hash-ref"
"(requires+provides-requires r+p_265)"
"(intern-mpi r+p_265(module-binding-nominal-module b_269))"
" '#f)))"
"(if at-mod_274"
"(let-values()"
"(let-values(((sym-to-reqds_275)"
"(hash-ref at-mod_274(module-binding-nominal-require-phase b_269) '#f)))"
"(if sym-to-reqds_275"
"(let-values()"
"(let-values(((sym_276)(syntax-e$1 id_266)))"
"(let-values(((l_277)(hash-ref sym-to-reqds_275 sym_276 null)))"
"(if(null? l_277)"
"(void)"
"(let-values()"
"(if(same-binding? b_269 binding_268)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_275"
" sym_276"
"(alt-reverse"
"(let-values(((lst_278) l_277))"
"(begin"
"(if(list? lst_278)(void)(let-values()(in-list lst_278)))"
"((letrec-values(((for-loop_279)"
"(lambda(fold-var_280 lst_281)"
"(if(pair? lst_281)"
"(let-values(((r_282)(unsafe-car lst_281)))"
"(if '#t"
"(let-values(((fold-var_283)"
"(let-values(((fold-var_284)"
" fold-var_280))"
"(if(free-identifier=?$1"
"(required-id r_282)"
" id_266"
" phase_267"
" phase_267)"
" fold-var_284"
"(let-values(((fold-var_285)"
" fold-var_284))"
"(let-values(((fold-var_286)"
"(let-values()"
"(cons"
"(let-values()"
" r_282)"
" fold-var_285))))"
"(values"
" fold-var_286)))))))"
"(if '#t"
"(for-loop_279"
" fold-var_283"
"(unsafe-cdr lst_281))"
" fold-var_283))"
" fold-var_280))"
" fold-var_280))))"
" for-loop_279)"
" null"
" lst_278))))))))))))"
"(void))))"
"(void))))"
"(void))))))))))"
"(define-values"
"(unpack38.1$1)"
"(lambda(given-kws_287 given-args_288 r+p34_289 id35_290 phase36_291)"
"(let-values(((unless-matches32_292)(car given-args_288)))"
"(remove-required-id!37.1 unless-matches32_292 r+p34_289 id35_290 phase36_291))))"
"(define-values"
"(remove-required-id!39.1)"
"(lifted/3.1$2"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 '5)"
"(let-values(((l2_295) given-kws_293))"
"(if(pair? l2_295)(if(eq?(car l2_295) '#:unless-matches)(null?(cdr l2_295)) '#f) '#f))"
" '#f))"
"(case-lambda"
"((given-kws_296 given-args_297 r+p_298 id_299 phase_300)"
"(unpack38.1$1 given-kws_296 given-args_297 r+p_298 id_299 phase_300)))"
" '(#:unless-matches)"
" '(#:unless-matches)))"
"(define-values"
"(lifted/4.1$2)"
"(make-required"
" 'check-not-defined"
"(case-lambda((self_301 r+p_302 id_303 phase_304)(apply missing-kw self_301 r+p_302 id_303 phase_304 null)))"
" '#f"
" '#f))"
"(define-values"
"(check-not-defined49.1)"
"(lambda(check-not-required?40_305"
" check-not-required?43_306"
" in41_307"
" unless-matches42_308"
" unless-matches45_309"
" r+p46_310"
" id47_311"
" phase48_312)"
"(let-values(((check-not-required?_313)(if check-not-required?43_306 check-not-required?40_305 '#f)))"
"(let-values(((r+p_314) r+p46_310))"
"(let-values(((id_315) id47_311))"
"(let-values(((phase_316) phase48_312))"
"(let-values(((orig-s_317) in41_307))"
"(let-values(((ok-binding_318)(if unless-matches45_309 unless-matches42_308 '#f)))"
"(let-values()"
"(let-values(((b_319)"
"(let-values(((.../require+provide.rkt:177:12_320) resolve+shift15.1)"
"((id69_321) id_315)"
"((phase70_322) phase_316)"
"((temp71_323) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" '#f"
" '#f"
" temp71_323"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" id69_321"
" phase70_322)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:177:12_320"
" keyword-procedure-extract"
" '(#:exactly?)"
" '4)"
" '(#:exactly?)"
"(list temp71_323)"
" id69_321"
" phase70_322)))))"
"(if(not b_319)"
"(let-values()(void))"
"(if(not(module-binding? b_319))"
" (let-values () (1/raise-syntax-error '#f '\"identifier out of context\" id_315))"
"(let-values()"
"(let-values(((defined?_324)"
"(if b_319"
"(eq?(requires+provides-self r+p_314)(module-binding-module b_319))"
" '#f)))"
"(if(if(not defined?_324)(not check-not-required?_313) '#f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_314 '#f))"
"(if(if defined?_324"
"(not"
"(hash-ref"
"(hash-ref(requires+provides-phase-to-defined-syms r+p_314) phase_316 '#hasheq())"
"(module-binding-sym b_319)"
" '#f))"
" '#f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((at-mod_325)"
"(hash-ref"
"(requires+provides-requires r+p_314)"
"(intern-mpi r+p_314(module-binding-nominal-module b_319))"
" '#f)))"
"(if(not at-mod_325)"
"(let-values()(void))"
"(let-values()"
"(let-values(((lst_326)"
"(hash-ref"
"(hash-ref"
" at-mod_325"
"(module-binding-nominal-require-phase b_319)"
" '#hasheq())"
"(syntax-e$1 id_315)"
" null)))"
"(begin"
"(if(list? lst_326)(void)(let-values()(in-list lst_326)))"
"((letrec-values(((for-loop_327)"
"(lambda(fold-var_328 lst_329)"
"(if(pair? lst_329)"
"(let-values(((r_330)(unsafe-car lst_329)))"
"(if '#t"
"(let-values(((fold-var_331)"
"(let-values(((fold-var_332)"
" fold-var_328))"
"(let-values(((fold-var_333)"
"(let-values()"
"(begin"
"(let-values()"
"(if(if ok-binding_318"
"(same-binding?"
" b_319"
" ok-binding_318)"
" '#f)"
"(let-values()"
"(void))"
"(if(required-can-be-shadowed?"
" r_330)"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_314"
" '#f))"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
"(string-append"
" '\"identifier already \""
"(if defined?_324"
" '\"defined\""
" '\"required\")"
"(if(zero-phase?"
" phase_316)"
"(let-values()"
" '\"\")"
"(if(label-phase?"
" phase_316)"
"(let-values()"
" '\" for label\")"
"(if(="
" '1"
" phase_316)"
"(let-values()"
" '\" for syntax\")"
"(let-values()"
"(format"
" '\" for phase ~a\""
" phase_316))))))"
" orig-s_317"
" id_315)))))"
"(void)))))"
"(values fold-var_333)))))"
"(if '#t"
"(for-loop_327"
" fold-var_331"
"(unsafe-cdr lst_329))"
" fold-var_331))"
" fold-var_328))"
" fold-var_328))))"
" for-loop_327)"
"(void)"
" lst_326)))))))))))))))))))))))"
"(define-values"
"(unpack50.1)"
"(lambda(given-kws_334 given-args_335 r+p46_336 id47_337 phase48_338)"
"(let-values(((check-not-required?43_339)"
"(if(pair? given-kws_334)(eq? '#:check-not-required?(car given-kws_334)) '#f)))"
"(let-values(((check-not-required?40_340)(if check-not-required?43_339(car given-args_335)(void)))"
"((given-kws_341)(if check-not-required?43_339(cdr given-kws_334) given-kws_334))"
"((given-args_342)(if check-not-required?43_339(cdr given-args_335) given-args_335)))"
"(let-values(((in41_343)(car given-args_342))"
"((given-kws_344)(cdr given-kws_341))"
"((given-args_345)(cdr given-args_342)))"
"(let-values(((unless-matches45_346)(pair? given-kws_344)))"
"(let-values(((unless-matches42_347)(if unless-matches45_346(car given-args_345)(void))))"
"(check-not-defined49.1"
" check-not-required?40_340"
" check-not-required?43_339"
" in41_343"
" unless-matches42_347"
" unless-matches45_346"
" r+p46_336"
" id47_337"
" phase48_338))))))))"
"(define-values"
"(check-not-defined51.1)"
"(lifted/4.1$2"
"(lambda(given-kws_348 given-argc_349)"
"(if(= given-argc_349 '5)(subsets? '(#:in) given-kws_348 '(#:check-not-required? #:in #:unless-matches)) '#f))"
"(case-lambda"
"((given-kws_350 given-args_351 r+p_352 id_353 phase_354)"
"(unpack50.1 given-kws_350 given-args_351 r+p_352 id_353 phase_354)))"
" '(#:in)"
" '(#:check-not-required? #:in #:unless-matches)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_355 syms_356 phase_357)"
"(let-values(((phase-to-defined-syms_358)(requires+provides-phase-to-defined-syms r+p_355)))"
"(let-values(((defined-syms_359)(hash-ref phase-to-defined-syms_358 phase_357 '#hasheq())))"
"(let-values(((new-defined-syms_360)"
"(let-values(((lst_361) syms_356))"
"(begin"
"(if(list? lst_361)(void)(let-values()(in-list lst_361)))"
"((letrec-values(((for-loop_362)"
"(lambda(defined-syms_363 lst_364)"
"(if(pair? lst_364)"
"(let-values(((sym_365)(unsafe-car lst_364)))"
"(if '#t"
"(let-values(((defined-syms_366)"
"(let-values(((defined-syms_367) defined-syms_363))"
"(let-values(((defined-syms_368)"
"(let-values()"
"(hash-set"
" defined-syms_367"
" sym_365"
" '#t))))"
"(values defined-syms_368)))))"
"(if '#t"
"(for-loop_362 defined-syms_366(unsafe-cdr lst_364))"
" defined-syms_366))"
" defined-syms_363))"
" defined-syms_363))))"
" for-loop_362)"
" defined-syms_359"
" lst_361)))))"
"(hash-set! phase-to-defined-syms_358 phase_357 new-defined-syms_360))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_369 mod-name_370 phase_371)"
"(let-values(((at-mod_372)(hash-ref(requires+provides-requires r+p_369)(intern-mpi r+p_369 mod-name_370) '#f)))"
"(if at-mod_372(apply append(hash-values(hash-ref at-mod_372 phase_371 '#hasheq()))) '#f))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_373)(extract-module-requires r+p_373(requires+provides-self r+p_373) '0)))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_374 mod-name_375 phase_376)"
"(let-values(((self_377)(requires+provides-self r+p_374)))"
"(let-values(((requires_378)(requires+provides-requires r+p_374)))"
"(call/ec"
"(lambda(esc_379)"
"(alt-reverse"
"(let-values(((lst_380)"
"(if mod-name_375(list(intern-mpi r+p_374 mod-name_375))(hash-keys requires_378))))"
"(begin"
"(if(list? lst_380)(void)(let-values()(in-list lst_380)))"
"((letrec-values(((for-loop_381)"
"(lambda(fold-var_382 lst_383)"
"(if(pair? lst_383)"
"(let-values(((mod-name_384)(unsafe-car lst_383)))"
"(if '#t"
"(let-values(((fold-var_385)"
"(let-values(((fold-var_386) fold-var_382))"
"(if(eq? mod-name_384 self_377)"
" fold-var_386"
"(let-values(((phase-to-requireds_387)"
"(hash-ref"
" requires_378"
" mod-name_384"
" '#hasheqv())))"
"(begin"
" '#t"
"((letrec-values(((for-loop_388)"
"(lambda(fold-var_389)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((fold-var_390)"
"(let-values(((lst_391)"
"(if(eq?"
" phase_376"
" 'all)"
"(hash-keys"
" phase-to-requireds_387)"
"(list"
" phase_376))))"
"(begin"
"(if(list?"
" lst_391)"
"(void)"
"(let-values()"
"(in-list"
" lst_391)))"
"((letrec-values(((for-loop_392)"
"(lambda(fold-var_393"
" lst_394)"
"(if(pair?"
" lst_394)"
"(let-values(((phase_395)"
"(unsafe-car"
" lst_394)))"
"(if '#t"
"(let-values(((fold-var_396)"
"(let-values(((ht_397)"
"(hash-ref"
" phase-to-requireds_387"
" phase_395"
"(lambda()"
"(esc_379"
" '#f)))))"
"(begin"
"(if((lambda(ht_398)"
"(hash?"
" ht_398))"
" ht_397)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_397)))"
"((letrec-values(((for-loop_399)"
"(lambda(fold-var_400"
" i_401)"
"(if i_401"
"(let-values(((reqds_402)"
"(hash-iterate-value"
" ht_397"
" i_401)))"
"(if '#t"
"(let-values(((fold-var_403)"
"(let-values(((lst_404)"
" reqds_402))"
"(begin"
"(if(list?"
" lst_404)"
"(void)"
"(let-values()"
"(in-list"
" lst_404)))"
"((letrec-values(((for-loop_405)"
"(lambda(fold-var_406"
" lst_407)"
"(if(pair?"
" lst_407)"
"(let-values(((reqd_408)"
"(unsafe-car"
" lst_407)))"
"(if '#t"
"(let-values(((fold-var_409)"
"(let-values(((fold-var_410)"
" fold-var_406))"
"(let-values(((fold-var_411)"
"(let-values()"
"(cons"
"(let-values()"
" reqd_408)"
" fold-var_410))))"
"(values"
" fold-var_411)))))"
"(if '#t"
"(for-loop_405"
" fold-var_409"
"(unsafe-cdr"
" lst_407))"
" fold-var_409))"
" fold-var_406))"
" fold-var_406))))"
" for-loop_405)"
" fold-var_400"
" lst_404)))))"
"(if '#t"
"(for-loop_399"
" fold-var_403"
"(hash-iterate-next"
" ht_397"
" i_401))"
" fold-var_403))"
" fold-var_400))"
" fold-var_400))))"
" for-loop_399)"
" fold-var_393"
"(hash-iterate-first"
" ht_397))))))"
"(if '#t"
"(for-loop_392"
" fold-var_396"
"(unsafe-cdr"
" lst_394))"
" fold-var_396))"
" fold-var_393))"
" fold-var_393))))"
" for-loop_392)"
" fold-var_389"
" lst_391)))))"
"(if '#f"
"(for-loop_388"
" fold-var_390)"
" fold-var_390))"
" fold-var_389))"
" fold-var_389))))"
" for-loop_388)"
" fold-var_386)))))))"
"(if '#t(for-loop_381 fold-var_385(unsafe-cdr lst_383)) fold-var_385))"
" fold-var_382))"
" fold-var_382))))"
" for-loop_381)"
" null"
" lst_380))))))))))"
"(define-values"
"(add-provide!)"
"(lambda(r+p_412 sym_413 phase_414 binding_415 immed-binding_416 id_417 orig-s_418 as-protected?_419)"
"(begin"
"(if(if as-protected?_419"
"(not(eq?(module-binding-module immed-binding_416)(requires+provides-self r+p_412)))"
" '#f)"
" (let-values () (1/raise-syntax-error '#f '\"cannot protect imported identifier with re-provide\" sym_413))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_412)"
" phase_414"
"(lambda(at-phase_420)"
"(let-values(((b/p_421)(hash-ref at-phase_420 sym_413 '#f)))"
"(let-values(((b_422)(if(protected? b/p_421)(protected-binding b/p_421) b/p_421)))"
"(if(not b_422)"
"(let-values()"
"(hash-set at-phase_420 sym_413(if as-protected?_419(protected1.1 binding_415) binding_415)))"
"(if(same-binding? b_422 binding_415)"
"(let-values() at-phase_420)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"identifier already provided (as a different binding)\""
" orig-s_418"
" id_417)))))))"
" '#hasheq()))))"
"(define-values"
"(attach-require-provide-properties)"
"(lambda(r+p_423 s_424 old-self_425 new-self_426)"
"(let-values(((extract-requires_427)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_429)(requires+provides-require-mpis-in-order r+p_423)))"
"(let-values(((phases-in-order_430)"
"(let-values(((temp72_431)(hash-keys phase-to-mpis-in-order_429))"
"((phase<?73_432) phase<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 '#f '#f '#f '#f temp72_431 phase<?73_432)"
"(sort9.1 temp72_431 phase<?73_432)))))"
"(alt-reverse"
"(let-values(((lst_433) phases-in-order_430))"
"(begin"
"(if(list? lst_433)(void)(let-values()(in-list lst_433)))"
"((letrec-values(((for-loop_434)"
"(lambda(fold-var_435 lst_436)"
"(if(pair? lst_436)"
"(let-values(((phase_437)(unsafe-car lst_436)))"
"(if '#t"
"(let-values(((fold-var_438)"
"(let-values(((fold-var_439) fold-var_435))"
"(let-values(((fold-var_440)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_437"
"(alt-reverse"
"(let-values(((lst_441)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_429"
" phase_437))))"
"(begin"
"(if(list? lst_441)"
"(void)"
"(let-values()"
"(in-list lst_441)))"
"((letrec-values(((for-loop_442)"
"(lambda(fold-var_443"
" lst_444)"
"(if(pair?"
" lst_444)"
"(let-values(((mpi_445)"
"(unsafe-car"
" lst_444)))"
"(if '#t"
"(let-values(((fold-var_446)"
"(let-values(((fold-var_447)"
" fold-var_443))"
"(if(eq?"
" mpi_445"
" old-self_425)"
" fold-var_447"
"(let-values(((fold-var_448)"
" fold-var_447))"
"(let-values(((fold-var_449)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_445"
" old-self_425"
" new-self_426))"
" fold-var_448))))"
"(values"
" fold-var_449)))))))"
"(if '#t"
"(for-loop_442"
" fold-var_446"
"(unsafe-cdr"
" lst_444))"
" fold-var_446))"
" fold-var_443))"
" fold-var_443))))"
" for-loop_442)"
" null"
" lst_441))))))"
" fold-var_439))))"
"(values fold-var_440)))))"
"(if '#t"
"(for-loop_434 fold-var_438(unsafe-cdr lst_436))"
" fold-var_438))"
" fold-var_435))"
" fold-var_435))))"
" for-loop_434)"
" null"
" lst_433)))))))))"
"(let-values(((extract-provides_428)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_423)"
" old-self_425"
" new-self_426))))"
"(let-values(((s_450)(syntax-property$1 s_424 'module-requires(extract-requires_427))))"
"(let-values(((s_451)(syntax-property$1 s_450 'module-provides(extract-provides_428)))) s_451))))))"
"(define-values"
"(shift-requires-module-path-index)"
"(lambda(requires_452 from-mpi_453 to-mpi_454)"
"(if(eq? from-mpi_453 to-mpi_454)"
"(let-values() requires_452)"
"(let-values()"
"(let-values(((ht_455) requires_452))"
"(begin"
"(if((lambda(ht_456)(hash? ht_456)) ht_455)(void)(let-values()(default-in-hash ht_455)))"
"((letrec-values(((for-loop_457)"
"(lambda(table_458 i_459)"
"(if i_459"
"(let-values(((phase_460 mpis_461)(hash-iterate-key+value ht_455 i_459)))"
"(if '#t"
"(let-values(((table_462)"
"(let-values(((table_463) table_458))"
"(let-values(((table_464)"
"(let-values()"
"(let-values(((key_465 val_466)"
"(let-values()"
"(values"
" phase_460"
"(alt-reverse"
"(let-values(((lst_467)"
" mpis_461))"
"(begin"
"(if(list? lst_467)"
"(void)"
"(let-values()"
"(in-list lst_467)))"
"((letrec-values(((for-loop_468)"
"(lambda(fold-var_469"
" lst_470)"
"(if(pair?"
" lst_470)"
"(let-values(((mpi_471)"
"(unsafe-car"
" lst_470)))"
"(if '#t"
"(let-values(((fold-var_472)"
"(let-values(((fold-var_473)"
" fold-var_469))"
"(let-values(((fold-var_474)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_471"
" from-mpi_453"
" to-mpi_454))"
" fold-var_473))))"
"(values"
" fold-var_474)))))"
"(if '#t"
"(for-loop_468"
" fold-var_472"
"(unsafe-cdr"
" lst_470))"
" fold-var_472))"
" fold-var_469))"
" fold-var_469))))"
" for-loop_468)"
" null"
" lst_467))))))))"
"(hash-set table_463 key_465 val_466)))))"
"(values table_464)))))"
"(if '#t(for-loop_457 table_462(hash-iterate-next ht_455 i_459)) table_462))"
" table_458))"
" table_458))))"
" for-loop_457)"
" '#hash()"
"(hash-iterate-first ht_455))))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_475 from-mpi_476 to-mpi_477)"
"(if(eq? from-mpi_476 to-mpi_477)"
"(let-values() provides_475)"
"(let-values()"
"(let-values(((ht_478) provides_475))"
"(begin"
"(if((lambda(ht_479)(hash? ht_479)) ht_478)(void)(let-values()(default-in-hash ht_478)))"
"((letrec-values(((for-loop_480)"
"(lambda(table_481 i_482)"
"(if i_482"
"(let-values(((phase_483 at-phase_484)(hash-iterate-key+value ht_478 i_482)))"
"(if '#t"
"(let-values(((table_485)"
"(let-values(((table_486) table_481))"
"(let-values(((table_487)"
"(let-values()"
"(let-values(((key_488 val_489)"
"(let-values()"
"(values"
" phase_483"
"(let-values(((ht_490)"
" at-phase_484))"
"(begin"
"(if((lambda(ht_491)"
"(hash? ht_491))"
" ht_490)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_490)))"
"((letrec-values(((for-loop_492)"
"(lambda(table_493"
" i_494)"
"(if i_494"
"(let-values(((sym_495"
" binding_496)"
"(hash-iterate-key+value"
" ht_490"
" i_494)))"
"(if '#t"
"(let-values(((table_497)"
"(let-values(((table_498)"
" table_493))"
"(let-values(((table_499)"
"(let-values()"
"(let-values(((key_500"
" val_501)"
"(let-values()"
"(values"
" sym_495"
"((letrec-values(((loop_502)"
"(lambda(binding_503)"
"(if(protected?"
" binding_503)"
"(let-values()"
"(protected1.1"
"(loop_502"
"(protected-binding"
" binding_503))))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_503"
" from-mpi_476"
" to-mpi_477))))))"
" loop_502)"
" binding_496)))))"
"(hash-set"
" table_498"
" key_500"
" val_501)))))"
"(values"
" table_499)))))"
"(if '#t"
"(for-loop_492"
" table_497"
"(hash-iterate-next"
" ht_490"
" i_494))"
" table_497))"
" table_493))"
" table_493))))"
" for-loop_492)"
" '#hasheq()"
"(hash-iterate-first"
" ht_490))))))))"
"(hash-set table_486 key_488 val_489)))))"
"(values table_487)))))"
"(if '#t(for-loop_480 table_485(hash-iterate-next ht_478 i_482)) table_485))"
" table_481))"
" table_481))))"
" for-loop_480)"
" '#hasheqv()"
"(hash-iterate-first ht_478))))))))"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type 'adjust-only '#f '1 '0 '#f null(current-inspector) '#f '(0) '#f 'adjust-only)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 '0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_24 make-_25 ?_26 -ref_27 -set!_28)"
"(make-struct-type 'adjust-prefix '#f '1 '0 '#f null(current-inspector) '#f '(0) '#f 'adjust-prefix)))"
"(values struct:_24 make-_25 ?_26(make-struct-field-accessor -ref_27 '0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_45 make-_46 ?_47 -ref_48 -set!_49)"
"(make-struct-type"
" 'adjust-all-except"
" '#f"
" '2"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1)"
" '#f"
" 'adjust-all-except)))"
"(values"
" struct:_45"
" make-_46"
" ?_47"
"(make-struct-field-accessor -ref_48 '0 'prefix-sym)"
"(make-struct-field-accessor -ref_48 '1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_71 make-_72 ?_73 -ref_74 -set!_75)"
"(make-struct-type 'adjust-rename '#f '2 '0 '#f null(current-inspector) '#f '(0 1) '#f 'adjust-rename)))"
"(values"
" struct:_71"
" make-_72"
" ?_73"
"(make-struct-field-accessor -ref_74 '0 'to-id)"
"(make-struct-field-accessor -ref_74 '1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!20.1)"
"(lambda(declared-submodule-names9_97"
" declared-submodule-names14_98"
" run-phase6_99"
" run-phase11_100"
" run?7_101"
" run?12_102"
" self5_103"
" self10_104"
" visit?8_105"
" visit?13_106"
" reqs15_107"
" orig-s16_108"
" m-ns17_109"
" phase-shift18_110"
" requires+provides19_111)"
"(let-values(((reqs_112) reqs15_107))"
"(let-values(((orig-s_113) orig-s16_108))"
"(let-values(((m-ns_114) m-ns17_109))"
"(let-values(((phase-shift_115) phase-shift18_110))"
"(let-values(((requires+provides_116) requires+provides19_111))"
"(let-values(((self_117)(if self10_104 self5_103 '#f)))"
"(let-values(((run-phase_118)(if run-phase11_100 run-phase6_99(namespace-phase m-ns_114))))"
"(let-values(((run?_119)(if run?12_102 run?7_101 '#f)))"
"(let-values(((visit?_120)(if visit?13_106 visit?8_105 '#t)))"
"(let-values(((declared-submodule-names_121)"
"(if declared-submodule-names14_98 declared-submodule-names9_97 '#hasheq())))"
"(let-values()"
"((letrec-values(((loop_122)"
"(lambda(reqs_123"
" top-req_124"
" phase-shift_125"
" just-meta_126"
" adjust_127"
" for-meta-ok?_128"
" just-meta-ok?_129"
" layer_130)"
"(let-values(((lst_131) reqs_123))"
"(begin"
"(if(list? lst_131)(void)(let-values()(in-list lst_131)))"
"((letrec-values(((for-loop_132)"
"(lambda(result_133 lst_134)"
"(if(pair? lst_134)"
"(let-values(((req_135)(unsafe-car lst_134)))"
"(if '#t"
"(let-values(((result_136)"
"(let-values(((result_137)"
" result_133))"
"(let-values(((result_138)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_139)"
"(let-values(((check-nested79_141)"
"(lambda(want-layer78_142"
" ok?76_143"
" ok?77_144)"
"(let-values(((want-layer_145)"
" want-layer78_142))"
"(let-values(((ok?_146)"
"(if ok?77_144"
" ok?76_143"
" '#t)))"
"(let-values()"
"(if(if ok?_146"
"(member"
" want-layer_145"
"(member"
" layer_130"
" layers$1))"
" '#f)"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"invalid nesting\""
" orig-s_113"
" req_135)))))))))"
"(case-lambda"
"((want-layer_147)"
"(check-nested79_141"
" want-layer_147"
" '#f"
" '#f))"
"((want-layer_148"
" ok?76_149)"
"(check-nested79_141"
" want-layer_148"
" ok?76_149"
" '#t))))))"
"(let-values(((fm_140)"
"(if(pair?"
"(syntax-e$1"
" req_135))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_135)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_135)))"
" '#f)"
" '#f)))"
"(let-values(((tmp_150)"
" fm_140))"
"(if(equal?"
" tmp_150"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((m_151)"
"(match-syntax"
" req_135"
" '(for-meta"
" phase-level"
" spec"
" ...))))"
"(let-values(((p_152)"
"(syntax-e$1"
"(m_151"
" 'phase-level))))"
"(begin"
"(if(phase?"
" p_152)"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"bad phase\""
" orig-s_113"
" req_135)))"
"(loop_122"
"(m_151"
" 'spec)"
"(let-values(((or-part_153)"
" top-req_124))"
"(if or-part_153"
" or-part_153"
" req_135))"
"(phase+"
" phase-shift_125"
" p_152)"
" just-meta_126"
" adjust_127"
" '#f"
" just-meta-ok?_129"
" 'raw))))))"
"(if(equal?"
" tmp_150"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((m_154)"
"(match-syntax"
" req_135"
" '(for-syntax"
" spec"
" ...))))"
"(loop_122"
"(m_154"
" 'spec)"
"(let-values(((or-part_155)"
" top-req_124))"
"(if or-part_155"
" or-part_155"
" req_135))"
"(phase+"
" phase-shift_125"
" '1)"
" just-meta_126"
" adjust_127"
" '#f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((m_156)"
"(match-syntax"
" req_135"
" '(for-template"
" spec"
" ...))))"
"(loop_122"
"(m_156"
" 'spec)"
"(let-values(((or-part_157)"
" top-req_124))"
"(if or-part_157"
" or-part_157"
" req_135))"
"(phase+"
" phase-shift_125"
" '-1)"
" just-meta_126"
" adjust_127"
" '#f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((m_158)"
"(match-syntax"
" req_135"
" '(for-label"
" spec"
" ...))))"
"(loop_122"
"(m_158"
" 'spec)"
"(let-values(((or-part_159)"
" top-req_124))"
"(if or-part_159"
" or-part_159"
" req_135))"
"(phase+"
" phase-shift_125"
" '#f)"
" just-meta_126"
" adjust_127"
" '#f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" just-meta-ok?_129)"
"(values))))"
"(let-values(((m_160)"
"(match-syntax"
" req_135"
" '(just-meta"
" phase-level"
" spec"
" ...))))"
"(let-values(((p_161)"
"(syntax-e$1"
"(m_160"
" 'phase-level))))"
"(begin"
"(if(phase?"
" p_161)"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"bad phase\""
" orig-s_113"
" req_135)))"
"(loop_122"
"(m_160"
" 'spec)"
"(let-values(((or-part_162)"
" top-req_124))"
"(if or-part_162"
" or-part_162"
" req_135))"
" phase-shift_125"
" just-meta_126"
" adjust_127"
" for-meta-ok?_128"
" '#f"
" 'raw))))))"
"(if(equal?"
" tmp_150"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((m_163)"
"(match-syntax"
" req_135"
" '(only"
" spec"
" id"
" ...))))"
"(loop_122"
"(list"
"(m_163"
" 'spec))"
"(let-values(((or-part_164)"
" top-req_124))"
"(if or-part_164"
" or-part_164"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-only1.1"
"(ids->sym-set"
"(m_163"
" 'id)))"
" '#f"
" '#f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((m_165)"
"(match-syntax"
" req_135"
" '(prefix"
" id:prefix"
" spec))))"
"(loop_122"
"(list"
"(m_165"
" 'spec))"
"(let-values(((or-part_166)"
" top-req_124))"
"(if or-part_166"
" or-part_166"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-prefix2.1"
"(syntax-e$1"
"(m_165"
" 'id:prefix)))"
" '#f"
" '#f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((m_167)"
"(match-syntax"
" req_135"
" '(all-except"
" spec"
" id"
" ...))))"
"(loop_122"
"(list"
"(m_167"
" 'spec))"
"(let-values(((or-part_168)"
" top-req_124))"
"(if or-part_168"
" or-part_168"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
"(m_167"
" 'id)))"
" '#f"
" '#f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((m_169)"
"(match-syntax"
" req_135"
" '(prefix-all-except"
" id:prefix"
" spec"
" id"
" ...))))"
"(loop_122"
"(list"
"(m_169"
" 'spec))"
"(let-values(((or-part_170)"
" top-req_124))"
"(if or-part_170"
" or-part_170"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-all-except3.1"
"(syntax-e$1"
"(m_169"
" 'id:prefix))"
"(ids->sym-set"
"(m_169"
" 'id)))"
" '#f"
" '#f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((m_171)"
"(match-syntax"
" req_135"
" '(rename spec"
" id:to"
" id:from))))"
"(loop_122"
"(list"
"(m_171"
" 'spec))"
"(let-values(((or-part_172)"
" top-req_124))"
"(if or-part_172"
" or-part_172"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-rename4.1"
"(m_171"
" 'id:to)"
"(syntax-e$1"
"(m_171"
" 'id:from)))"
" '#f"
" '#f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_173)"
"(syntax->datum$1"
" req_135)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_176)"
"(1/module-path?"
" maybe-mp_173)))"
"(if or-part_176"
" or-part_176"
"(1/resolved-module-path?"
" maybe-mp_173)))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"bad require spec\""
" orig-s_113"
" req_135)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_177)"
" adjust_127))"
"(if or-part_177"
" or-part_177"
"(not"
"(eq?"
" just-meta_126"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_116"
" '#f))"
"(void))"
"(values))))"
"(let-values(((mp_174)"
"(if(1/resolved-module-path?"
" maybe-mp_173)"
"(resolved-module-path->module-path"
" maybe-mp_173)"
" maybe-mp_173)))"
"(let-values(((mpi_175)"
"(let-values(((...r/expand/require.rkt:158:21_178)"
" module-path->mpi29.1)"
"((mp93_179)"
" mp_174)"
"((self94_180)"
" self_117)"
"((declared-submodule-names95_181)"
" declared-submodule-names_121))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path->mpi29.1))"
"(module-path->mpi27.1"
" declared-submodule-names95_181"
" '#t"
" mp93_179"
" self94_180)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:158:21_178"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" '4)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names95_181)"
" mp93_179"
" self94_180)))))"
"(let-values(((...r/expand/require.rkt:160:9_182)"
" perform-require!55.1)"
"((mpi81_183)"
" mpi_175)"
"((temp82_184)"
" '#f)"
"((self83_185)"
" self_117)"
"((temp84_186)"
"(let-values(((or-part_195)"
" req_135))"
"(if or-part_195"
" or-part_195"
" top-req_124)))"
"((m-ns85_187)"
" m-ns_114)"
"((phase-shift86_188)"
" phase-shift_125)"
"((run-phase87_189)"
" run-phase_118)"
"((just-meta88_190)"
" just-meta_126)"
"((adjust89_191)"
" adjust_127)"
"((requires+provides90_192)"
" requires+provides_116)"
"((run?91_193)"
" run?_119)"
"((visit?92_194)"
" visit?_120))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!55.1))"
"(perform-require!53.1"
" adjust89_191"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" just-meta88_190"
" '#t"
" phase-shift86_188"
" requires+provides90_192"
" '#t"
" run-phase87_189"
" run?91_193"
" '#t"
" visit?92_194"
" '#t"
" mpi81_183"
" temp82_184"
" self83_185"
" temp84_186"
" m-ns85_187)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:160:9_182"
" keyword-procedure-extract"
" '(#:adjust"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)"
" '7)"
" '(#:adjust"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)"
"(list"
" adjust89_191"
" just-meta88_190"
" phase-shift86_188"
" requires+provides90_192"
" run-phase87_189"
" run?91_193"
" visit?92_194)"
" mpi81_183"
" temp82_184"
" self83_185"
" temp84_186"
" m-ns85_187))))))))))))))))))))))))))"
"(values result_138)))))"
"(if(if '#t"
"(not"
"((lambda x_196(not result_136))"
" req_135))"
" '#f)"
"(for-loop_132"
" result_136"
"(unsafe-cdr lst_134))"
" result_136))"
" result_133))"
" result_133))))"
" for-loop_132)"
" '#t"
" lst_131))))))"
" loop_122)"
" reqs_112"
" '#f"
" phase-shift_115"
" 'all"
" '#f"
" '#t"
" '#t"
" 'raw))))))))))))))"
"(define-values"
"(unpack21.1)"
"(lambda(given-kws_197 given-args_198 reqs15_199 orig-s16_200 m-ns17_201 phase-shift18_202 requires+provides19_203)"
"(let-values(((declared-submodule-names14_204)"
"(if(pair? given-kws_197)(eq? '#:declared-submodule-names(car given-kws_197)) '#f)))"
"(let-values(((declared-submodule-names9_205)(if declared-submodule-names14_204(car given-args_198)(void)))"
"((given-kws_206)(if declared-submodule-names14_204(cdr given-kws_197) given-kws_197))"
"((given-args_207)(if declared-submodule-names14_204(cdr given-args_198) given-args_198)))"
"(let-values(((run-phase11_208)(if(pair? given-kws_206)(eq? '#:run-phase(car given-kws_206)) '#f)))"
"(let-values(((run-phase6_209)(if run-phase11_208(car given-args_207)(void)))"
"((given-kws_210)(if run-phase11_208(cdr given-kws_206) given-kws_206))"
"((given-args_211)(if run-phase11_208(cdr given-args_207) given-args_207)))"
"(let-values(((run?12_212)(if(pair? given-kws_210)(eq? '#:run?(car given-kws_210)) '#f)))"
"(let-values(((run?7_213)(if run?12_212(car given-args_211)(void)))"
"((given-kws_214)(if run?12_212(cdr given-kws_210) given-kws_210))"
"((given-args_215)(if run?12_212(cdr given-args_211) given-args_211)))"
"(let-values(((self10_216)(if(pair? given-kws_214)(eq? '#:self(car given-kws_214)) '#f)))"
"(let-values(((self5_217)(if self10_216(car given-args_215)(void)))"
"((given-kws_218)(if self10_216(cdr given-kws_214) given-kws_214))"
"((given-args_219)(if self10_216(cdr given-args_215) given-args_215)))"
"(let-values(((visit?13_220)(pair? given-kws_218)))"
"(let-values(((visit?8_221)(if visit?13_220(car given-args_219)(void))))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names9_205"
" declared-submodule-names14_204"
" run-phase6_209"
" run-phase11_208"
" run?7_213"
" run?12_212"
" self5_217"
" self10_216"
" visit?8_221"
" visit?13_220"
" reqs15_199"
" orig-s16_200"
" m-ns17_201"
" phase-shift18_202"
" requires+provides19_203)))))))))))))"
"(define-values"
"(parse-and-perform-requires!22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_222 given-argc_223)"
"(if(= given-argc_223 '7)"
"(let-values(((l1_224) given-kws_222))"
"(let-values(((l1_225)"
"(if(null? l1_224)"
" l1_224"
"(if(eq?(car l1_224) '#:declared-submodule-names)(cdr l1_224) l1_224))))"
"(let-values(((l1_226) l1_225))"
"(let-values(((l1_227)"
"(if(null? l1_226) l1_226(if(eq?(car l1_226) '#:run-phase)(cdr l1_226) l1_226))))"
"(let-values(((l1_228) l1_227))"
"(let-values(((l1_229)(if(null? l1_228) l1_228(if(eq?(car l1_228) '#:run?)(cdr l1_228) l1_228))))"
"(let-values(((l1_230) l1_229))"
"(let-values(((l1_231)"
"(if(null? l1_230) l1_230(if(eq?(car l1_230) '#:self)(cdr l1_230) l1_230))))"
"(let-values(((l1_232) l1_231))"
"(let-values(((l1_233)"
"(if(null? l1_232)"
" l1_232"
"(if(eq?(car l1_232) '#:visit?)(cdr l1_232) l1_232))))"
"(null? l1_233)))))))))))"
" '#f))"
"(case-lambda"
"((given-kws_234 given-args_235 reqs_236 orig-s_237 m-ns_238 phase-shift_239 requires+provides_240)"
"(unpack21.1 given-kws_234 given-args_235 reqs_236 orig-s_237 m-ns_238 phase-shift_239 requires+provides_240)))"
" null"
" '(#:declared-submodule-names #:run-phase #:run? #:self #:visit?)"
"(let-values(((parse-and-perform-requires!_241)"
"(case-lambda"
"((reqs_242 orig-s_243 m-ns_244 phase-shift_245 requires+provides_246)"
"(unpack21.1 null null reqs_242 orig-s_243 m-ns_244 phase-shift_245 requires+provides_246)))))"
" parse-and-perform-requires!_241)))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_247)"
"(let-values(((lst_248) ids_247))"
"(begin"
"(if(list? lst_248)(void)(let-values()(in-list lst_248)))"
"((letrec-values(((for-loop_249)"
"(lambda(table_250 lst_251)"
"(if(pair? lst_251)"
"(let-values(((id_252)(unsafe-car lst_251)))"
"(if '#t"
"(let-values(((table_253)"
"(let-values(((table_254) table_250))"
"(let-values(((table_255)"
"(let-values()"
"(let-values(((key_256 val_257)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_252))"
" '#t))))"
"(hash-set table_254 key_256 val_257)))))"
"(values table_255)))))"
"(if '#t(for-loop_249 table_253(unsafe-cdr lst_251)) table_253))"
" table_250))"
" table_250))))"
" for-loop_249)"
" '#hash()"
" lst_248)))))"
"(define-values"
"(module-path->mpi27.1)"
"(lambda(declared-submodule-names23_258 declared-submodule-names24_259 mod-path25_260 self26_261)"
"(let-values(((mod-path_262) mod-path25_260))"
"(let-values(((self_263) self26_261))"
"(let-values(((declared-submodule-names_264)"
"(if declared-submodule-names24_259 declared-submodule-names23_258 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_262)"
"(if(= '2(length mod-path_262))"
"(if(eq? 'quote(car mod-path_262))"
"(if(symbol?(cadr mod-path_262))"
"(hash-ref declared-submodule-names_264(cadr mod-path_262) '#f)"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
" (1/module-path-index-join (list 'submod '\".\" (cadr mod-path_262)) self_263)"
"(1/module-path-index-join mod-path_262 self_263))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_265 given-args_266 mod-path25_267 self26_268)"
"(let-values(((declared-submodule-names24_269)(pair? given-kws_265)))"
"(let-values(((declared-submodule-names23_270)(if declared-submodule-names24_269(car given-args_266)(void))))"
"(module-path->mpi27.1"
" declared-submodule-names23_270"
" declared-submodule-names24_269"
" mod-path25_267"
" self26_268)))))"
"(define-values"
"(module-path->mpi29.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_271 given-argc_272)"
"(if(= given-argc_272 '4)"
"(let-values(((l1_273) given-kws_271))"
"(let-values(((l1_274)"
"(if(null? l1_273)"
" l1_273"
"(if(eq?(car l1_273) '#:declared-submodule-names)(cdr l1_273) l1_273))))"
"(null? l1_274)))"
" '#f))"
"(case-lambda"
"((given-kws_275 given-args_276 mod-path_277 self_278)"
"(unpack28.1 given-kws_275 given-args_276 mod-path_277 self_278)))"
" null"
" '(#:declared-submodule-names)"
"(let-values(((module-path->mpi_279)"
"(case-lambda((mod-path_280 self_281)(unpack28.1 null null mod-path_280 self_281)))))"
" module-path->mpi_279)))"
"(define-values"
"(perform-initial-require!)"
"(lambda(mod-path_282 self_283 in-stx_284 m-ns_285 requires+provides_286)"
"(let-values(((...r/expand/require.rkt:189:2_287) perform-require!55.1)"
"((temp96_288)"
"(let-values(((mod-path106_298) mod-path_282)((self107_299) self_283))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi29.1))"
"(module-path->mpi27.1 '#f '#f mod-path106_298 self107_299)"
"(module-path->mpi29.1 mod-path106_298 self107_299))))"
"((temp97_289) '#f)"
"((self98_290) self_283)"
"((in-stx99_291) in-stx_284)"
"((m-ns100_292) m-ns_285)"
"((temp101_293) '0)"
"((temp102_294) '0)"
"((requires+provides103_295) requires+provides_286)"
"((temp104_296) '#t)"
"((temp105_297) '#t))"
"(if(variable-reference-constant?(#%variable-reference perform-require!55.1))"
"(perform-require!53.1"
" '#f"
" '#f"
" temp104_296"
" '#t"
" temp105_297"
" '#t"
" '#f"
" '#f"
" temp101_293"
" requires+provides103_295"
" '#t"
" temp102_294"
" '#f"
" '#f"
" '#f"
" '#f"
" temp96_288"
" temp97_289"
" self98_290"
" in-stx99_291"
" m-ns100_292)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:189:2_287"
" keyword-procedure-extract"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase)"
" '7)"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase)"
"(list temp104_296 temp105_297 temp101_293 requires+provides103_295 temp102_294)"
" temp96_288"
" temp97_289"
" self98_290"
" in-stx99_291"
" m-ns100_292)))))"
"(define-values"
"(lifted/1.1$6)"
"(make-required"
" 'perform-require!"
"(case-lambda"
"((self_300 mpi_301 orig-s_302 self_303 in-stx_304 m-ns_305)"
"(apply missing-kw self_300 mpi_301 orig-s_302 self_303 in-stx_304 m-ns_305 null)))"
" '#f"
" '#f))"
"(define-values"
"(perform-require!53.1)"
"(lambda(adjust33_306"
" adjust42_307"
" can-be-shadowed?37_308"
" can-be-shadowed?46_309"
" initial-require?38_310"
" initial-require?47_311"
" just-meta32_312"
" just-meta41_313"
" phase-shift30_314"
" requires+provides34_315"
" requires+provides43_316"
" run-phase31_317"
" run?36_318"
" run?45_319"
" visit?35_320"
" visit?44_321"
" mpi48_322"
" orig-s49_323"
" self50_324"
" in-stx51_325"
" m-ns52_326)"
"(let-values(((mpi_327) mpi48_322))"
"(let-values(((orig-s_328) orig-s49_323))"
"(let-values(((self_329) self50_324))"
"(let-values(((in-stx_330) in-stx51_325))"
"(let-values(((m-ns_331) m-ns52_326))"
"(let-values(((phase-shift_332) phase-shift30_314))"
"(let-values(((run-phase_333) run-phase31_317))"
"(let-values(((just-meta_334)(if just-meta41_313 just-meta32_312 'all)))"
"(let-values(((adjust_335)(if adjust42_307 adjust33_306 '#f)))"
"(let-values(((requires+provides_336)(if requires+provides43_316 requires+provides34_315 '#f)))"
"(let-values(((visit?_337)(if visit?44_321 visit?35_320 '#t)))"
"(let-values(((run?_338)(if run?45_319 run?36_318 '#f)))"
"(let-values(((can-be-shadowed?_339)"
"(if can-be-shadowed?46_309 can-be-shadowed?37_308 '#f)))"
"(let-values(((initial-require?_340)"
"(if initial-require?47_311 initial-require?38_310 '#f)))"
"(let-values()"
"(let-values(((module-name_341)(1/module-path-index-resolve mpi_327 '#t)))"
"(let-values(((bind-in-stx_342)"
"(if(adjust-rename? adjust_335)"
"(adjust-rename-to-id adjust_335)"
" in-stx_330)))"
"(let-values(((done-syms_343)(make-hash)))"
"(let-values(((m_344)(namespace->module m-ns_331 module-name_341)))"
"(let-values((()"
"(begin"
"(if m_344"
"(void)"
"(let-values()"
"(raise-unknown-module-error 'require module-name_341)))"
"(values))))"
"(let-values(((interned-mpi_345)"
"(if requires+provides_336"
"(add-required-module!"
" requires+provides_336"
" mpi_327"
" phase-shift_332"
"(module-cross-phase-persistent? m_344))"
" mpi_327)))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:222:2_347)"
" bind-all-provides!71.1)"
"((m108_348) m_344)"
"((bind-in-stx109_349) bind-in-stx_342)"
"((phase-shift110_350) phase-shift_332)"
"((m-ns111_351) m-ns_331)"
"((interned-mpi112_352) interned-mpi_345)"
"((orig-s113_353) orig-s_328)"
"((temp114_354)"
"(if(adjust-only? adjust_335)"
"(let-values()"
"(set->list"
"(adjust-only-syms adjust_335)))"
"(if(adjust-rename? adjust_335)"
"(let-values()"
"(list"
"(adjust-rename-from-sym adjust_335)))"
"(let-values() '#f))))"
"((temp115_355)(not adjust_335))"
"((temp116_356)"
"(lambda(binding_357)"
"(let-values(((sym_358)"
"(module-binding-nominal-sym"
" binding_357)))"
"(let-values(((provide-phase_359)"
"(module-binding-nominal-phase"
" binding_357)))"
"(let-values(((adjusted-sym_360)"
"(if(if(not"
"(eq?"
" just-meta_334"
" 'all))"
"(not"
"(equal?"
" provide-phase_359"
" just-meta_334))"
" '#f)"
"(let-values() '#f)"
"(if(not adjust_335)"
"(let-values()"
" sym_358)"
"(if(adjust-only?"
" adjust_335)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_335)"
" sym_358)"
"(if(hash-set!"
" done-syms_343"
" sym_358"
" '#t)"
" sym_358"
" '#f)"
" '#f))"
"(if(adjust-prefix?"
" adjust_335)"
"(let-values()"
"(string->symbol"
"(format"
" '\"~a~a\""
"(adjust-prefix-sym"
" adjust_335)"
" sym_358)))"
"(if(adjust-all-except?"
" adjust_335)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_335)"
" sym_358)"
"(hash-set!"
" done-syms_343"
" sym_358"
" '#t)"
" '#f))"
"(string->symbol"
"(format"
" '\"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_335)"
" sym_358))"
" '#f))"
"(if(adjust-rename?"
" adjust_335)"
"(let-values()"
"(if(eq?"
" sym_358"
"(adjust-rename-from-sym"
" adjust_335))"
"(if(hash-set!"
" done-syms_343"
" sym_358"
" '#t)"
"(adjust-rename-to-id"
" adjust_335)"
" '#f)"
" '#f))"
"(void)))))))))"
"(begin"
"(if adjusted-sym_360"
"(let-values()"
"(let-values(((s_361)"
"(datum->syntax$2"
" bind-in-stx_342"
" adjusted-sym_360)))"
"(let-values(((bind-phase_362)"
"(phase+"
" phase-shift_332"
" provide-phase_359)))"
"(if requires+provides_336"
"(let-values()"
"(begin"
"(if initial-require?_340"
"(void)"
"(let-values()"
"(begin"
"(let-values(((...r/expand/require.rkt:261:20_363)"
" check-not-defined51.1)"
"((temp122_364)"
" '#t)"
"((requires+provides123_365)"
" requires+provides_336)"
"((s124_366)"
" s_361)"
"((bind-phase125_367)"
" bind-phase_362)"
"((binding126_368)"
" binding_357)"
"((in-stx127_369)"
" in-stx_330))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined51.1))"
"(check-not-defined49.1"
" temp122_364"
" '#t"
" in-stx127_369"
" binding126_368"
" '#t"
" requires+provides123_365"
" s124_366"
" bind-phase125_367)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:261:20_363"
" keyword-procedure-extract"
" '(#:check-not-required?"
" #:in"
" #:unless-matches)"
" '5)"
" '(#:check-not-required?"
" #:in"
" #:unless-matches)"
"(list"
" temp122_364"
" in-stx127_369"
" binding126_368)"
" requires+provides123_365"
" s124_366"
" bind-phase125_367)))"
"(let-values(((...r/expand/require.rkt:266:20_370)"
" remove-required-id!39.1)"
"((requires+provides128_371)"
" requires+provides_336)"
"((s129_372)"
" s_361)"
"((bind-phase130_373)"
" bind-phase_362)"
"((binding131_374)"
" binding_357))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!39.1))"
"(remove-required-id!37.1"
" binding131_374"
" requires+provides128_371"
" s129_372"
" bind-phase130_373)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:266:20_370"
" keyword-procedure-extract"
" '(#:unless-matches)"
" '5)"
" '(#:unless-matches)"
"(list"
" binding131_374)"
" requires+provides128_371"
" s129_372"
" bind-phase130_373))))))"
"(let-values(((...r/expand/require.rkt:267:18_375)"
" add-defined-or-required-id!11.1)"
"((requires+provides117_376)"
" requires+provides_336)"
"((s118_377)"
" s_361)"
"((bind-phase119_378)"
" bind-phase_362)"
"((binding120_379)"
" binding_357)"
"((can-be-shadowed?121_380)"
" can-be-shadowed?_339))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!11.1))"
"(add-defined-or-required-id!9.1"
" can-be-shadowed?121_380"
" '#t"
" requires+provides117_376"
" s118_377"
" bind-phase119_378"
" binding120_379)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:267:18_375"
" keyword-procedure-extract"
" '(#:can-be-shadowed?)"
" '6)"
" '(#:can-be-shadowed?)"
"(list"
" can-be-shadowed?121_380)"
" requires+provides117_376"
" s118_377"
" bind-phase119_378"
" binding120_379)))))"
"(void)))))"
"(void))"
" adjusted-sym_360)))))))"
"(if(variable-reference-constant?"
"(#%variable-reference bind-all-provides!71.1))"
"(bind-all-provides!69.1"
" temp115_355"
" temp116_356"
" orig-s113_353"
" temp114_354"
" m108_348"
" bind-in-stx109_349"
" phase-shift110_350"
" m-ns111_351"
" interned-mpi112_352)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:222:2_347"
" keyword-procedure-extract"
" '(#:can-bulk? #:filter #:in #:only)"
" '7)"
" '(#:can-bulk? #:filter #:in #:only)"
"(list"
" temp115_355"
" temp116_356"
" orig-s113_353"
" temp114_354)"
" m108_348"
" bind-in-stx109_349"
" phase-shift110_350"
" m-ns111_351"
" interned-mpi112_352)))"
"(values))))"
"(let-values((()"
"(begin"
"(if visit?_337"
"(let-values()"
"(let-values(((...r/expand/require.rkt:272:4_381)"
" namespace-module-visit!97.1)"
"((m-ns132_382) m-ns_331)"
"((interned-mpi133_383)"
" interned-mpi_345)"
"((phase-shift134_384) phase-shift_332)"
"((run-phase135_385) run-phase_333))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!97.1))"
"(namespace-module-visit!95.1"
" run-phase135_385"
" '#t"
" m-ns132_382"
" interned-mpi133_383"
" phase-shift134_384)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:272:4_381"
" keyword-procedure-extract"
" '(#:visit-phase)"
" '5)"
" '(#:visit-phase)"
"(list run-phase135_385)"
" m-ns132_382"
" interned-mpi133_383"
" phase-shift134_384))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_338"
"(let-values()"
"(let-values(((...r/expand/require.rkt:274:4_386)"
" namespace-module-instantiate!89.1)"
"((m-ns136_387) m-ns_331)"
"((interned-mpi137_388)"
" interned-mpi_345)"
"((phase-shift138_389)"
" phase-shift_332)"
"((run-phase139_390) run-phase_333))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" '#f"
" '#f"
" run-phase139_390"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" m-ns136_387"
" interned-mpi137_388"
" phase-shift138_389)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:274:4_386"
" keyword-procedure-extract"
" '(#:run-phase)"
" '5)"
" '(#:run-phase)"
"(list run-phase139_390)"
" m-ns136_387"
" interned-mpi137_388"
" phase-shift138_389))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_391) visit?_337))"
"(if or-part_391 or-part_391 run?_338)))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:277:4_392)"
" namespace-module-make-available!105.1)"
"((m-ns140_393) m-ns_331)"
"((interned-mpi141_394)"
" interned-mpi_345)"
"((phase-shift142_395)"
" phase-shift_332)"
"((run-phase143_396) run-phase_333))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-make-available!105.1))"
"(namespace-module-make-available!103.1"
" run-phase143_396"
" '#t"
" m-ns140_393"
" interned-mpi141_394"
" phase-shift142_395)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:277:4_392"
" keyword-procedure-extract"
" '(#:visit-phase)"
" '5)"
" '(#:visit-phase)"
"(list run-phase143_396)"
" m-ns140_393"
" interned-mpi141_394"
" phase-shift142_395))))"
"(void))"
"(values))))"
"(let-values(((need-syms_346)"
"(if(adjust-only? adjust_335)"
"(let-values()(adjust-only-syms adjust_335))"
"(if(adjust-all-except? adjust_335)"
"(let-values()"
"(adjust-all-except-syms adjust_335))"
"(if(adjust-rename? adjust_335)"
"(let-values()"
"(set(adjust-rename-from-sym adjust_335)))"
"(let-values() '#f))))))"
"(if(if need-syms_346"
"(not"
"(=(set-count need-syms_346)(hash-count done-syms_343)))"
" '#f)"
"(let-values()"
"(let-values(((ht_397) need-syms_346))"
"(begin"
"(if((lambda(ht_398)(hash? ht_398)) ht_397)"
"(void)"
"(let-values()(default-in-hash-keys ht_397)))"
"((letrec-values(((for-loop_399)"
"(lambda(fold-var_400 i_401)"
"(if i_401"
"(let-values(((sym_402)"
"(hash-iterate-key"
" ht_397"
" i_401)))"
"(if '#t"
"(let-values(((fold-var_403)"
"(let-values(((fold-var_404)"
" fold-var_400))"
"(let-values(((fold-var_405)"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_343"
" sym_402"
" '#f)"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"not in nested spec\""
" orig-s_328"
" sym_402))))"
"(void)))))"
"(values"
" fold-var_405)))))"
"(if '#t"
"(for-loop_399"
" fold-var_403"
"(hash-iterate-next"
" ht_397"
" i_401))"
" fold-var_403))"
" fold-var_400))"
" fold-var_400))))"
" for-loop_399)"
"(void)"
"(hash-iterate-first ht_397)))))"
"(void))))))))))))))))))))))))))))))"
"(define-values"
"(unpack54.1)"
"(lambda(given-kws_406 given-args_407 mpi48_408 orig-s49_409 self50_410 in-stx51_411 m-ns52_412)"
"(let-values(((adjust42_413)(if(pair? given-kws_406)(eq? '#:adjust(car given-kws_406)) '#f)))"
"(let-values(((adjust33_414)(if adjust42_413(car given-args_407)(void)))"
"((given-kws_415)(if adjust42_413(cdr given-kws_406) given-kws_406))"
"((given-args_416)(if adjust42_413(cdr given-args_407) given-args_407)))"
"(let-values(((can-be-shadowed?46_417)"
"(if(pair? given-kws_415)(eq? '#:can-be-shadowed?(car given-kws_415)) '#f)))"
"(let-values(((can-be-shadowed?37_418)(if can-be-shadowed?46_417(car given-args_416)(void)))"
"((given-kws_419)(if can-be-shadowed?46_417(cdr given-kws_415) given-kws_415))"
"((given-args_420)(if can-be-shadowed?46_417(cdr given-args_416) given-args_416)))"
"(let-values(((initial-require?47_421)"
"(if(pair? given-kws_419)(eq? '#:initial-require?(car given-kws_419)) '#f)))"
"(let-values(((initial-require?38_422)(if initial-require?47_421(car given-args_420)(void)))"
"((given-kws_423)(if initial-require?47_421(cdr given-kws_419) given-kws_419))"
"((given-args_424)(if initial-require?47_421(cdr given-args_420) given-args_420)))"
"(let-values(((just-meta41_425)(if(pair? given-kws_423)(eq? '#:just-meta(car given-kws_423)) '#f)))"
"(let-values(((just-meta32_426)(if just-meta41_425(car given-args_424)(void)))"
"((given-kws_427)(if just-meta41_425(cdr given-kws_423) given-kws_423))"
"((given-args_428)(if just-meta41_425(cdr given-args_424) given-args_424)))"
"(let-values(((phase-shift30_429)(car given-args_428))"
"((given-kws_430)(cdr given-kws_427))"
"((given-args_431)(cdr given-args_428)))"
"(let-values(((requires+provides43_432)"
"(if(pair? given-kws_430)(eq? '#:requires+provides(car given-kws_430)) '#f)))"
"(let-values(((requires+provides34_433)"
"(if requires+provides43_432(car given-args_431)(void)))"
"((given-kws_434)(if requires+provides43_432(cdr given-kws_430) given-kws_430))"
"((given-args_435)"
"(if requires+provides43_432(cdr given-args_431) given-args_431)))"
"(let-values(((run-phase31_436)(car given-args_435))"
"((given-kws_437)(cdr given-kws_434))"
"((given-args_438)(cdr given-args_435)))"
"(let-values(((run?45_439)"
"(if(pair? given-kws_437)(eq? '#:run?(car given-kws_437)) '#f)))"
"(let-values(((run?36_440)(if run?45_439(car given-args_438)(void)))"
"((given-kws_441)(if run?45_439(cdr given-kws_437) given-kws_437))"
"((given-args_442)(if run?45_439(cdr given-args_438) given-args_438)))"
"(let-values(((visit?44_443)(pair? given-kws_441)))"
"(let-values(((visit?35_444)(if visit?44_443(car given-args_442)(void))))"
"(perform-require!53.1"
" adjust33_414"
" adjust42_413"
" can-be-shadowed?37_418"
" can-be-shadowed?46_417"
" initial-require?38_422"
" initial-require?47_421"
" just-meta32_426"
" just-meta41_425"
" phase-shift30_429"
" requires+provides34_433"
" requires+provides43_432"
" run-phase31_436"
" run?36_440"
" run?45_439"
" visit?35_444"
" visit?44_443"
" mpi48_408"
" orig-s49_409"
" self50_410"
" in-stx51_411"
" m-ns52_412)))))))))))))))))))"
"(define-values"
"(perform-require!55.1)"
"(lifted/1.1$6"
"(lambda(given-kws_445 given-argc_446)"
"(if(= given-argc_446 '7)"
"(subsets?"
" '(#:phase-shift #:run-phase)"
" given-kws_445"
" '(#:adjust"
" #:can-be-shadowed?"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?))"
" '#f))"
"(case-lambda"
"((given-kws_447 given-args_448 mpi_449 orig-s_450 self_451 in-stx_452 m-ns_453)"
"(unpack54.1 given-kws_447 given-args_448 mpi_449 orig-s_450 self_451 in-stx_452 m-ns_453)))"
" '(#:phase-shift #:run-phase)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)))"
"(define-values"
"(lifted/2.1$4)"
"(make-required"
" 'bind-all-provides!"
"(case-lambda"
"((self_454 m_455 in-stx_456 phase-shift_457 ns_458 mpi_459)"
"(apply missing-kw self_454 m_455 in-stx_456 phase-shift_457 ns_458 mpi_459 null)))"
" '#f"
" '#f))"
"(define-values"
"(bind-all-provides!69.1)"
"(lambda(can-bulk?58_460 filter59_461 in56_462 only57_463 m64_464 in-stx65_465 phase-shift66_466 ns67_467 mpi68_468)"
"(let-values(((m_469) m64_464))"
"(let-values(((in-stx_470) in-stx65_465))"
"(let-values(((phase-shift_471) phase-shift66_466))"
"(let-values(((ns_472) ns67_467))"
"(let-values(((mpi_473) mpi68_468))"
"(let-values(((orig-s_474) in56_462))"
"(let-values(((only-syms_475) only57_463))"
"(let-values(((can-bulk?_476) can-bulk?58_460))"
"(let-values(((filter_477) filter59_461))"
"(let-values()"
"(let-values(((self_478)(module-self m_469)))"
"(let-values(((ht_479)(module-provides m_469)))"
"(begin"
"(if((lambda(ht_480)(hash? ht_480)) ht_479)"
"(void)"
"(let-values()(default-in-hash ht_479)))"
"((letrec-values(((for-loop_481)"
"(lambda(fold-var_482 i_483)"
"(if i_483"
"(let-values(((provide-phase-level_484 provides_485)"
"(hash-iterate-key+value ht_479 i_483)))"
"(if '#t"
"(let-values(((fold-var_486)"
"(let-values(((fold-var_487) fold-var_482))"
"(let-values(((fold-var_488)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_489)"
"(phase+"
" phase-shift_471"
" provide-phase-level_484)))"
"(begin"
"(let-values(((lst_490)"
"(let-values(((or-part_491)"
" only-syms_475))"
"(if or-part_491"
" or-part_491"
"(hash-keys"
" provides_485)))))"
"(begin"
"(if(list? lst_490)"
"(void)"
"(let-values()"
"(in-list"
" lst_490)))"
"((letrec-values(((for-loop_492)"
"(lambda(fold-var_493"
" lst_494)"
"(if(pair?"
" lst_494)"
"(let-values(((sym_495)"
"(unsafe-car"
" lst_494)))"
"(if '#t"
"(let-values(((fold-var_496)"
"(let-values(((fold-var_497)"
" fold-var_493))"
"(let-values(((fold-var_498)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((out-binding_499)"
"(hash-ref"
" provides_485"
" sym_495"
" '#f)))"
"(if out-binding_499"
"(let-values()"
"(let-values(((b_500)"
"(let-values(((...r/expand/require.rkt:306:18_501)"
" provide-binding-to-require-binding13.1)"
"((out-binding144_502)"
" out-binding_499)"
"((sym145_503)"
" sym_495)"
"((self146_504)"
" self_478)"
"((mpi147_505)"
" mpi_473)"
"((provide-phase-level148_506)"
" provide-phase-level_484)"
"((phase-shift149_507)"
" phase-shift_471))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" mpi147_505"
" phase-shift149_507"
" provide-phase-level148_506"
" self146_504"
" out-binding144_502"
" sym145_503)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:306:18_501"
" keyword-procedure-extract"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
" '4)"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
"(list"
" mpi147_505"
" phase-shift149_507"
" provide-phase-level148_506"
" self146_504)"
" out-binding144_502"
" sym145_503)))))"
"(let-values(((sym_508)"
"(filter_477"
" b_500)))"
"(if(if sym_508"
"(not"
" can-bulk?_476)"
" '#f)"
"(let-values()"
"(let-values(((temp150_509)"
"(datum->syntax$2"
" in-stx_470"
" sym_508))"
"((b151_510)"
" b_500)"
"((phase152_511)"
" phase_489))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" '#f"
" '#f"
" temp150_509"
" b151_510"
" phase152_511)"
"(add-binding!17.1"
" temp150_509"
" b151_510"
" phase152_511))))"
"(void)))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_498)))))"
"(if '#t"
"(for-loop_492"
" fold-var_496"
"(unsafe-cdr"
" lst_494))"
" fold-var_496))"
" fold-var_493))"
" fold-var_493))))"
" for-loop_492)"
"(void)"
" lst_490)))"
"(if can-bulk?_476"
"(let-values()"
"(let-values(((...r/expand/require.rkt:318:6_512)"
" add-bulk-binding!25.1)"
"((in-stx153_513)"
" in-stx_470)"
"((temp154_514)"
"(bulk-binding14.1"
" provides_485"
" self_478"
" mpi_473"
" provide-phase-level_484"
" phase-shift_471"
"(namespace-bulk-binding-registry"
" ns_472)))"
"((phase155_515)"
" phase_489)"
"((orig-s156_516)"
" orig-s_474))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-bulk-binding!25.1))"
"(add-bulk-binding!23.1"
" orig-s156_516"
" '#t"
" in-stx153_513"
" temp154_514"
" phase155_515)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:318:6_512"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list"
" orig-s156_516)"
" in-stx153_513"
" temp154_514"
" phase155_515))))"
"(void)))))"
"(void)))))"
"(values fold-var_488)))))"
"(if '#t"
"(for-loop_481 fold-var_486(hash-iterate-next ht_479 i_483))"
" fold-var_486))"
" fold-var_482))"
" fold-var_482))))"
" for-loop_481)"
"(void)"
"(hash-iterate-first ht_479)))))))))))))))))"
"(define-values"
"(unpack70.1)"
"(lambda(given-kws_517 given-args_518 m64_519 in-stx65_520 phase-shift66_521 ns67_522 mpi68_523)"
"(let-values(((can-bulk?58_524)(car given-args_518))"
"((given-kws_525)(cdr given-kws_517))"
"((given-args_526)(cdr given-args_518)))"
"(let-values(((filter59_527)(car given-args_526))"
"((given-kws_528)(cdr given-kws_525))"
"((given-args_529)(cdr given-args_526)))"
"(let-values(((in56_530)(car given-args_529))"
"((given-kws_531)(cdr given-kws_528))"
"((given-args_532)(cdr given-args_529)))"
"(let-values(((only57_533)(car given-args_532)))"
"(bind-all-provides!69.1"
" can-bulk?58_524"
" filter59_527"
" in56_530"
" only57_533"
" m64_519"
" in-stx65_520"
" phase-shift66_521"
" ns67_522"
" mpi68_523)))))))"
"(define-values"
"(bind-all-provides!71.1)"
"(lifted/2.1$4"
"(lambda(given-kws_534 given-argc_535)"
"(if(= given-argc_535 '7)"
"(let-values(((l2_536) given-kws_534))"
"(if(pair? l2_536)"
"(if(eq?(car l2_536) '#:can-bulk?)"
"(let-values(((l2_537)(cdr l2_536)))"
"(if(pair? l2_537)"
"(if(eq?(car l2_537) '#:filter)"
"(let-values(((l2_538)(cdr l2_537)))"
"(if(pair? l2_538)"
"(if(eq?(car l2_538) '#:in)"
"(let-values(((l2_539)(cdr l2_538)))"
"(if(pair? l2_539)(if(eq?(car l2_539) '#:only)(null?(cdr l2_539)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_540 given-args_541 m_542 in-stx_543 phase-shift_544 ns_545 mpi_546)"
"(unpack70.1 given-kws_540 given-args_541 m_542 in-stx_543 phase-shift_544 ns_545 mpi_546)))"
" '(#:can-bulk? #:filter #:in #:only)"
" '(#:can-bulk? #:filter #:in #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_547)"
"(let-values(((rebuild-req_548)"
"(lambda(req_550 new-req_551)(datum->syntax$2 req_550 new-req_551 req_550 req_550))))"
"(letrec-values(((loop_549)"
"(lambda(shifted?_552)"
"(lambda(req_553)"
"(let-values(((fm_554)"
"(if(pair?(syntax-e$1 req_553))"
"(if(identifier?(car(syntax-e$1 req_553)))"
"(syntax-e$1(car(syntax-e$1 req_553)))"
" '#f)"
" '#f)))"
"(let-values(((tmp_555) fm_554))"
"(if(equal? tmp_555 'for-meta)"
"(let-values()"
"(let-values(((m_556)(match-syntax req_553 '(for-meta phase-level spec ...))))"
"(let-values(((p_557)(syntax-e$1(m_556 'phase-level))))"
"(begin"
"(if(phase? p_557)"
"(void)"
" (let-values () (1/raise-syntax-error '#f '\"bad phase\" req_553)))"
"(rebuild-req_548"
" req_553"
"(list*"
"(m_556 'for-meta)"
"(phase+ p_557 '1)"
"(map2(loop_549 '#t)(m_556 'spec))))))))"
"(if(equal? tmp_555 'for-syntax)"
"(let-values()"
"(let-values(((m_558)(match-syntax req_553 '(for-syntax spec ...))))"
"(rebuild-req_548"
" req_553"
"(list* 'for-meta '2(map2(loop_549 '#t)(m_558 'spec))))))"
"(if(equal? tmp_555 'for-template)"
"(let-values()"
"(let-values(((m_559)(match-syntax req_553 '(for-template spec ...))))"
"(rebuild-req_548"
" req_553"
"(list* 'for-meta '0(map2(loop_549 '#t)(m_559 'spec))))))"
"(if(equal? tmp_555 'for-label)"
"(let-values()"
"(let-values(((m_560)(match-syntax req_553 '(for-label spec ...))))"
"(rebuild-req_548"
" req_553"
"(list*(m_560 'for-label)(map2(loop_549 '#t)(m_560 'spec))))))"
"(if(equal? tmp_555 'just-meta)"
"(let-values()"
"(let-values(((m_561)"
"(match-syntax req_553 '(just-meta phase-level spec ...))))"
"(rebuild-req_548"
" req_553"
"(list*"
"(m_561 'just-meta)"
"(m_561 'phase-level)"
"(map2(loop_549 '#f)(m_561 'spec))))))"
"(let-values()"
"(if shifted?_552"
" req_553"
"(datum->syntax$2 '#f(list 'for-syntax req_553)))))))))))))))"
"((loop_549 '#f) req_547)))))"
"(define-values(top-level-instance)(1/make-instance 'top-level))"
"(call-with-values"
"(lambda()"
"(1/instance-set-variable-value!"
" top-level-instance"
" 'top-level-bind!"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans-val_7)"
"(let-values(((phase_8)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_9)"
"(let-values(((...p-level-instance.rkt:24:13_10) make-module-binding22.1)"
"((mpi4_11) mpi_2)"
"((phase5_12) phase_8)"
"((sym6_13) sym_6)"
"((temp7_14)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" temp7_14"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" mpi4_11"
" phase5_12"
" sym6_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:24:13_10"
" keyword-procedure-extract"
" '(#:frame-id)"
" '5)"
" '(#:frame-id)"
"(list temp7_14)"
" mpi4_11"
" phase5_12"
" sym6_13)))))"
"(begin"
"(let-values(((id1_15) id_1)((b2_16) b_9)((phase3_17) phase_8))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 '#f '#f id1_15 b2_16 phase3_17)"
"(add-binding!17.1 id1_15 b2_16 phase3_17)))"
"(if trans-val_7(let-values()(maybe-install-free=id! trans-val_7 id_1 phase_8))(void))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(1/instance-set-variable-value!"
" top-level-instance"
" 'top-level-require!"
"(lambda(stx_18 ns_19)"
"(let-values(((reqs_20)(cdr(syntax->list$1 stx_18))))"
"(let-values(((...p-level-instance.rkt:36:3_21) parse-and-perform-requires!22.1)"
"((temp8_22) '#t)"
"((temp9_23) '#f)"
"((reqs10_24) reqs_20)"
"((temp11_25) '#f)"
"((ns12_26) ns_19)"
"((temp13_27)(namespace-phase ns_19))"
"((temp14_28)(make-requires+provides '#f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" temp8_22"
" '#t"
" '#f"
" '#f"
" temp9_23"
" '#t"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:36:3_21"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" '7)"
" '(#:run? #:visit?)"
"(list temp8_22 temp9_23)"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)))))))"
" print-values)"
"(define-values"
"(lifted/1.1$5)"
"(make-required"
" 'check-require-access"
"(case-lambda"
"((self_2 linklet_3 import-module-uses_4 import-module-instances_5 insp_6 extra-inspector_7 extra-inspectorsss_8)"
"(apply"
" missing-kw"
" self_2"
" linklet_3"
" import-module-uses_4"
" import-module-instances_5"
" insp_6"
" extra-inspector_7"
" extra-inspectorsss_8"
" null)))"
" '#f"
" '#f))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_9"
" linklet3_10"
" import-module-uses4_11"
" import-module-instances5_12"
" insp6_13"
" extra-inspector7_14"
" extra-inspectorsss8_15)"
"(let-values(((linklet_16) linklet3_10))"
"(let-values(((skip-num-imports_17) skip-imports1_9))"
"(let-values(((import-module-uses_18) import-module-uses4_11))"
"(let-values(((import-module-instances_19) import-module-instances5_12))"
"(let-values(((insp_20) insp6_13))"
"(let-values(((extra-inspector_21) extra-inspector7_14))"
"(let-values(((extra-inspectorsss_22) extra-inspectorsss8_15))"
"(let-values()"
"(let-values(((lst_23)(list-tail(1/linklet-import-variables linklet_16) skip-num-imports_17))"
"((lst_24) import-module-uses_18)"
"((lst_25) import-module-instances_19)"
"((lst_26)"
"(let-values(((or-part_27) extra-inspectorsss_22))"
"(if or-part_27 or-part_27 import-module-uses_18))))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"(if(list? lst_25)(void)(let-values()(in-list lst_25)))"
"(if(list? lst_26)(void)(let-values()(in-list lst_26)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29 lst_30 lst_31 lst_32 lst_33)"
"(if(if(pair? lst_30)"
"(if(pair? lst_31)(if(pair? lst_32)(pair? lst_33) '#f) '#f)"
" '#f)"
"(let-values(((import-syms_34)(unsafe-car lst_30))"
"((mu_35)(unsafe-car lst_31))"
"((mi_36)(unsafe-car lst_32))"
"((extra-inspectorss_37)(unsafe-car lst_33)))"
"(if(if '#t(if '#t(if '#t '#t '#f) '#f) '#f)"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_29))"
"(let-values(((fold-var_40)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_41)"
"(module-instance-module"
" mi_36)))"
"(if(module-no-protected? m_41)"
"(void)"
"(let-values()"
"(let-values(((access_42)"
"(let-values(((or-part_43)"
"(module-access"
" m_41)))"
"(if or-part_43"
" or-part_43"
"(module-compute-access!"
" m_41)))))"
"(let-values(((lst_44)"
" import-syms_34)"
"((lst_45)"
"(let-values(((or-part_46)"
"(if extra-inspectorsss_22"
" extra-inspectorss_37"
" '#f)))"
"(if or-part_46"
" or-part_46"
" import-syms_34))))"
"(begin"
"(if(list? lst_44)"
"(void)"
"(let-values()"
"(in-list lst_44)))"
"(if(list? lst_45)"
"(void)"
"(let-values()"
"(in-list lst_45)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49"
" lst_50)"
"(if(if(pair?"
" lst_49)"
"(pair?"
" lst_50)"
" '#f)"
"(let-values(((import-sym_51)"
"(unsafe-car"
" lst_49))"
"((extra-inspectors_52)"
"(unsafe-car"
" lst_50)))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54)"
" fold-var_48))"
"(let-values(((fold-var_55)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_56)"
"(hash-ref"
"(hash-ref"
" access_42"
"(module-use-phase"
" mu_35)"
" '#hasheq())"
" import-sym_51"
" 'unexported)))"
"(if(let-values(((or-part_57)"
"(eq?"
" a_56"
" 'unexported)))"
"(if or-part_57"
" or-part_57"
"(eq?"
" a_56"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_58)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_36))))"
"(if(let-values(((or-part_59)"
"(inspector-superior?"
" insp_20"
" guard-insp_58)))"
"(if or-part_59"
" or-part_59"
"(let-values(((or-part_60)"
"(if extra-inspector_21"
"(inspector-superior?"
" extra-inspector_21"
" guard-insp_58)"
" '#f)))"
"(if or-part_60"
" or-part_60"
"(if extra-inspectorsss_22"
"(if extra-inspectorss_37"
"(let-values(((ht_61)"
" extra-inspectors_52))"
"(begin"
"(if((lambda(ht_62)"
"(hash?"
" ht_62))"
" ht_61)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_61)))"
"((letrec-values(((for-loop_63)"
"(lambda(result_64"
" i_65)"
"(if i_65"
"(let-values(((extra-insp_66)"
"(hash-iterate-key"
" ht_61"
" i_65)))"
"(if '#t"
"(let-values(((result_67)"
"(let-values(((result_68)"
" result_64))"
"(let-values(((result_69)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_66"
" guard-insp_58)))))"
"(values"
" result_69)))))"
"(if(if '#t"
"(not"
"((lambda x_70"
"(not"
" result_67))"
" extra-insp_66))"
" '#f)"
"(for-loop_63"
" result_67"
"(hash-iterate-next"
" ht_61"
" i_65))"
" result_67))"
" result_64))"
" result_64))))"
" for-loop_63)"
" '#t"
"(hash-iterate-first"
" ht_61))))"
" '#f)"
" '#f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
" '\"access disallowed by code inspector to ~a variable\\n\""
" '\" variable: ~s\\n\""
" '\" from module: ~a\")"
" a_56"
" import-sym_51"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_36))))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_55)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_47"
" fold-var_53"
"(unsafe-cdr"
" lst_49)"
"(unsafe-cdr"
" lst_50))"
" fold-var_53))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_44"
" lst_45))))))))"
"(void)))))"
"(values fold-var_40)))))"
"(if(if '#t(if '#t(if '#t '#t '#f) '#f) '#f)"
"(for-loop_28"
" fold-var_38"
"(unsafe-cdr lst_30)"
"(unsafe-cdr lst_31)"
"(unsafe-cdr lst_32)"
"(unsafe-cdr lst_33))"
" fold-var_38))"
" fold-var_29))"
" fold-var_29))))"
" for-loop_28)"
"(void)"
" lst_23"
" lst_24"
" lst_25"
" lst_26)))))))))))))"
"(define-values"
"(unpack10.1$2)"
"(lambda(given-kws_71"
" given-args_72"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78)"
"(let-values(((skip-imports1_79)(car given-args_72)))"
"(check-require-access9.1"
" skip-imports1_79"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78))))"
"(define-values"
"(check-require-access11.1)"
"(lifted/1.1$5"
"(lambda(given-kws_80 given-argc_81)"
"(if(= given-argc_81 '8)"
"(let-values(((l2_82) given-kws_80))"
"(if(pair? l2_82)(if(eq?(car l2_82) '#:skip-imports)(null?(cdr l2_82)) '#f) '#f))"
" '#f))"
"(case-lambda"
"((given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)"
"(unpack10.1$2"
" given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)))"
" '(#:skip-imports)"
" '(#:skip-imports)))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top5_1)"
"(lambda(c3_2 ns4_3 eval-compiled1_4 eval-compiled2_5)"
"(let-values(((c_6) c3_2))"
"(let-values(((ns_7) ns4_3))"
"(let-values(((eval-compiled_8)(if eval-compiled2_5 eval-compiled1_4 eval-top)))"
"(let-values()"
"(let-values(((ld_9)"
"(if(compiled-in-memory? c_6)(compiled-in-memory-linklet-directory c_6) c_6)))"
"(if(hash-ref(1/linklet-directory->hash ld_9) '#f '#f)"
"(eval-single-top c_6 ns_7)"
"(eval-multiple-tops c_6 ns_7 eval-compiled_8))))))))))"
"(case-lambda"
"((c_10 ns_11)(eval-top5_1 c_10 ns_11 '#f '#f))"
"((c_12 ns_13 eval-compiled1_14)(eval-top5_1 c_12 ns_13 eval-compiled1_14 '#t)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_15 ns_16 eval-compiled_17)"
"(if(compiled-in-memory? c_15)"
"(let-values()"
"((letrec-values(((loop_18)"
"(lambda(cims_19)"
"(if(null? cims_19)"
"(let-values() void)"
"(if(null?(cdr cims_19))"
"(let-values()(eval-compiled_17(car cims_19) ns_16))"
"(let-values()"
"(begin(eval-compiled_17(car cims_19) ns_16)(loop_18(cdr cims_19)))))))))"
" loop_18)"
"(compiled-in-memory-pre-compiled-in-memorys c_15)))"
"(let-values()"
"((letrec-values(((loop_20)"
"(lambda(lds_21)"
"(if(null? lds_21)"
"(let-values()(void))"
"(if(null?(cdr lds_21))"
"(let-values()(eval-compiled_17(car lds_21) ns_16))"
"(let-values()"
"(begin(eval-compiled_17(car lds_21) ns_16)(loop_20(cdr lds_21)))))))))"
" loop_20)"
"(compiled-top->compiled-tops c_15))))))"
"(define-values"
"(eval-single-top)"
"(lambda(c_22 ns_23)"
"(let-values(((ld_24)(if(compiled-in-memory? c_22)(compiled-in-memory-linklet-directory c_22) c_22)))"
"(let-values(((h_25)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_24) '#f))))"
"(let-values(((link-instance_26)"
"(if(compiled-in-memory? c_22)"
"(link-instance-from-compiled-in-memory c_22)"
"(1/instantiate-linklet"
"(hash-ref h_25 'link)"
"(list"
" deserialize-instance"
"(let-values(((...xpander/eval/top.rkt:61:35_32) make-eager-instance-instance13.1)"
"((ns7_33) ns_23)"
"((temp8_34)(namespace-phase ns_23))"
"((temp9_35)(namespace-mpi ns_23))"
"((temp10_36)(namespace-bulk-binding-registry ns_23))"
"((temp11_37)(current-code-inspector)))"
"(if(variable-reference-constant?(#%variable-reference make-eager-instance-instance13.1))"
"(make-eager-instance-instance11.1 temp10_36 temp8_34 temp11_37 ns7_33 temp9_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:61:35_32"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" '2)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
"(list temp10_36 temp8_34 temp11_37 ns7_33 temp9_35)))))))))"
"(let-values(((orig-phase_27)(1/instance-variable-value link-instance_26 'original-phase)))"
"(let-values(((max-phase_28)(1/instance-variable-value link-instance_26 'max-phase)))"
"(let-values(((phase-shift_29)(phase-(namespace-phase ns_23) orig-phase_27)))"
"(let-values(((extra-inspector_30)"
"(if(compiled-in-memory? c_22)(compiled-in-memory-compile-time-inspector c_22) '#f)))"
"(let-values(((phase-to-link-extra-inspectorsss_31)"
"(if(compiled-in-memory? c_22)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_22)"
" '#hasheqv())))"
"((let-values(((start_38) max-phase_28)((end_39)(sub1 orig-phase_27))((inc_40) '-1))"
"(begin"
"(if(if(real? start_38)(if(real? end_39)(real? inc_40) '#f) '#f)"
"(void)"
"(let-values()(in-range start_38 end_39 inc_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(prev-thunk_42 pos_43)"
"(if(> pos_43 end_39)"
"(let-values(((phase_44) pos_43))"
"(if '#t"
"(let-values(((prev-thunk_45)"
"(let-values(((prev-thunk_46) prev-thunk_42))"
"(let-values(((prev-thunk_47)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_46)"
"(values))))"
"(let-values(((module-uses_48)"
"(hash-ref"
"(1/instance-variable-value"
" link-instance_26"
" 'phase-to-link-modules)"
" phase_44"
" null)))"
"(let-values(((import-module-instances_49"
" import-instances_50)"
"(let-values(((mis_54"
" is_55)"
"(let-values(((lst_56)"
" module-uses_48))"
"(begin"
"(if(list?"
" lst_56)"
"(void)"
"(let-values()"
"(in-list"
" lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(mis_58"
" is_59"
" lst_60)"
"(if(pair?"
" lst_60)"
"(let-values(((mu_61)"
"(unsafe-car"
" lst_60)))"
"(if '#t"
"(let-values(((mis_62"
" is_63)"
"(let-values(((mis_64)"
" mis_58)"
"((is_65)"
" is_59))"
"(let-values(((mis_66"
" is_67)"
"(let-values()"
"(let-values(((mis12_68"
" is13_69)"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:88:9_70)"
" namespace-module-use->module+linklet-instances139.1)"
"((ns14_71)"
" ns_23)"
"((mu15_72)"
" mu_61)"
"((temp16_73)"
"(phase-"
"(phase+"
" phase_44"
" phase-shift_29)"
"(module-use-phase"
" mu_61))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances139.1))"
"(namespace-module-use->module+linklet-instances137.1"
" temp16_73"
" '#f"
" '#f"
" '#f"
" '#f"
" ns14_71"
" mu15_72)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:88:9_70"
" keyword-procedure-extract"
" '(#:phase-shift)"
" '4)"
" '(#:phase-shift)"
"(list"
" temp16_73)"
" ns14_71"
" mu15_72))))))"
"(values"
"(cons"
" mis12_68"
" mis_64)"
"(cons"
" is13_69"
" is_65))))))"
"(values"
" mis_66"
" is_67)))))"
"(if '#t"
"(for-loop_57"
" mis_62"
" is_63"
"(unsafe-cdr"
" lst_60))"
"(values"
" mis_62"
" is_63)))"
"(values"
" mis_58"
" is_59)))"
"(values"
" mis_58"
" is_59)))))"
" for-loop_57)"
" null"
" null"
" lst_56)))))"
"(values"
"(alt-reverse"
" mis_54)"
"(alt-reverse"
" is_55)))))"
"(let-values(((phase-ns_51)"
"(namespace->namespace-at-phase"
" ns_23"
"(phase+"
" phase_44"
" phase-shift_29))))"
"(let-values(((inst_52)"
"(let-values(((...xpander/eval/top.rkt:94:18_74)"
" make-instance-instance17.1)"
"((phase-ns17_75)"
" phase-ns_51)"
"((phase-shift18_76)"
" phase-shift_29)"
"((temp19_77)"
"(namespace-mpi"
" ns_23))"
"((temp20_78)"
"(namespace-bulk-binding-registry"
" ns_23))"
"((temp21_79)"
"(namespace-inspector"
" ns_23))"
"((temp22_80)"
"(lambda(name_81"
" val_82)"
"(namespace-set-transformer!"
" ns_23"
"(phase+"
"(sub1"
" phase_44)"
" phase-shift_29)"
" name_81"
" val_82))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-instance-instance17.1))"
"(make-instance-instance15.1"
" temp20_78"
" temp21_79"
" phase-ns17_75"
" phase-shift18_76"
" '#f"
" '#f"
" temp19_77"
" temp22_80)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:94:18_74"
" keyword-procedure-extract"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
" '2)"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
"(list"
" temp20_78"
" temp21_79"
" phase-ns17_75"
" phase-shift18_76"
" temp19_77"
" temp22_80))))))"
"(let-values(((linklet_53)"
"(hash-ref"
" h_25"
" phase_44"
" '#f)))"
"(if linklet_53"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:110:7_84)"
" check-require-access11.1)"
"((linklet23_85)"
" linklet_53)"
"((temp24_86)"
" '3)"
"((module-uses25_87)"
" module-uses_48)"
"((import-module-instances26_88)"
" import-module-instances_49)"
"((temp27_89)"
"(current-code-inspector))"
"((extra-inspector28_90)"
" extra-inspector_30)"
"((temp29_91)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_31"
" phase_44"
" '#f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp24_86"
" linklet23_85"
" module-uses25_87"
" import-module-instances26_88"
" temp27_89"
" extra-inspector28_90"
" temp29_91)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:110:7_84"
" keyword-procedure-extract"
" '(#:skip-imports)"
" '8)"
" '(#:skip-imports)"
"(list"
" temp24_86)"
" linklet23_85"
" module-uses25_87"
" import-module-instances26_88"
" temp27_89"
" extra-inspector28_90"
" temp29_91)))"
"(values))))"
"(let-values(((instantiate_83)"
"(lambda()"
"(1/instantiate-linklet"
" linklet_53"
"(list*"
" top-level-instance"
" link-instance_26"
" inst_52"
" import-instances_50)"
"(namespace->instance"
" ns_23"
"(phase+"
" phase_44"
" phase-shift_29))))))"
"(if(eqv?"
" phase_44"
" orig-phase_27)"
"(let-values()"
"(if(zero-phase?"
" phase_44)"
" instantiate_83"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_51)"
"(let-values()"
"(instantiate_83))))))"
"(let-values()"
" instantiate_83)))))"
"(let-values()"
" void)))))))))))"
"(values prev-thunk_47)))))"
"(if '#t"
"(for-loop_41 prev-thunk_45(+ pos_43 inc_40))"
" prev-thunk_45))"
" prev-thunk_42))"
" prev-thunk_42))))"
" for-loop_41)"
" void"
" start_38))))))))))))))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_92)"
"(let-values(((link-instance_93)(1/make-instance 'link)))"
"(begin"
"(1/instance-set-variable-value! link-instance_93 'original-phase(compiled-in-memory-phase cim_92))"
"(1/instance-set-variable-value! link-instance_93 'max-phase(compiled-in-memory-max-phase cim_92))"
"(1/instance-set-variable-value!"
" link-instance_93"
" 'phase-to-link-modules"
"(compiled-in-memory-phase-to-link-module-uses cim_92))"
"(1/instance-set-variable-value! link-instance_93 'mpi-vector(compiled-in-memory-mpis cim_92))"
"(1/instance-set-variable-value! link-instance_93 'syntax-literalss(compiled-in-memory-syntax-literalss cim_92))"
" link-instance_93))))"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime '#f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(add-binding-in-scopes!"
"(syntax-scope-set runtime-stx '0)"
" sym_1"
"(let-values(((runtime-mpi1_2) runtime-mpi)((temp2_3) '0)((sym3_4) sym_1))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" runtime-mpi1_2"
" temp2_3"
" sym3_4)"
"(make-module-binding22.1 runtime-mpi1_2 temp2_3 sym3_4))))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(define-values"
"(lifted/1.1$23)"
"(make-required"
" 'select-defined-syms-and-bind!"
"(case-lambda"
"((self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7)"
"(apply missing-kw self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7 null)))"
" '#f"
" '#f))"
"(define-values"
"(select-defined-syms-and-bind!14.1)"
"(lambda(frame-id1_8"
" in4_9"
" in8_10"
" requires+provides3_11"
" requires+provides7_12"
" top-level-bind-scope2_13"
" top-level-bind-scope6_14"
" ids9_15"
" defined-syms10_16"
" self11_17"
" phase12_18"
" all-scopes-stx13_19)"
"(let-values(((ids_20) ids9_15))"
"(let-values(((defined-syms_21) defined-syms10_16))"
"(let-values(((self_22) self11_17))"
"(let-values(((phase_23) phase12_18))"
"(let-values(((all-scopes-stx_24) all-scopes-stx13_19))"
"(let-values(((frame-id_25) frame-id1_8))"
"(let-values(((top-level-bind-scope_26)(if top-level-bind-scope6_14 top-level-bind-scope2_13 '#f)))"
"(let-values(((requires+provides_27)(if requires+provides7_12 requires+provides3_11 '#f)))"
"(let-values(((orig-s_28)(if in8_10 in4_9 '#f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_29)"
"(let-values(((or-part_30)(hash-ref defined-syms_21 phase_23 '#f)))"
"(if or-part_30"
" or-part_30"
"(let-values(((ht_31)(make-hasheq)))"
"(begin(hash-set! defined-syms_21 phase_23 ht_31) ht_31))))))"
"(alt-reverse"
"(let-values(((lst_32) ids_20))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((id_36)(unsafe-car lst_35)))"
"(if '#t"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38) fold-var_34))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_40)"
"(syntax-e$1"
" id_36)))"
"(let-values(((defined-sym_41)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_29"
" sym_40"
" '#f)"
" id_36"
" phase_23"
" top-level-bind-scope_26))"
"(no-extra-scopes?"
" id_36"
" all-scopes-stx_24"
" top-level-bind-scope_26"
" phase_23)"
" '#f)"
" sym_40"
"((letrec-values(((loop_43)"
"(lambda(pos_44)"
"(let-values(((s_45)"
"(string->unreadable-symbol"
"(format"
" '\"~a.~a\""
" sym_40"
" pos_44))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_29"
" s_45"
" '#f)"
" id_36"
" phase_23"
" top-level-bind-scope_26)"
"(loop_43"
"(add1"
" pos_44))"
" s_45)))))"
" loop_43)"
" '1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_29"
" defined-sym_41"
" id_36)"
"(values))))"
"(let-values(((b_42)"
"(let-values(((...er/expand/def-id.rkt:60:14_46)"
" make-module-binding22.1)"
"((self21_47)"
" self_22)"
"((phase22_48)"
" phase_23)"
"((defined-sym23_49)"
" defined-sym_41)"
"((frame-id24_50)"
" frame-id_25))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" frame-id24_50"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" self21_47"
" phase22_48"
" defined-sym23_49)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:60:14_46"
" keyword-procedure-extract"
" '(#:frame-id)"
" '5)"
" '(#:frame-id)"
"(list"
" frame-id24_50)"
" self21_47"
" phase22_48"
" defined-sym23_49)))))"
"(begin"
"(if requires+provides_27"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:62:6_51)"
" remove-required-id!39.1)"
"((requires+provides25_52)"
" requires+provides_27)"
"((id26_53)"
" id_36)"
"((phase27_54)"
" phase_23)"
"((b28_55)"
" b_42))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!39.1))"
"(remove-required-id!37.1"
" b28_55"
" requires+provides25_52"
" id26_53"
" phase27_54)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:62:6_51"
" keyword-procedure-extract"
" '(#:unless-matches)"
" '5)"
" '(#:unless-matches)"
"(list"
" b28_55)"
" requires+provides25_52"
" id26_53"
" phase27_54))))"
"(void))"
"(let-values(((...er/expand/def-id.rkt:63:4_56)"
" add-binding!17.1)"
"((id17_57)"
" id_36)"
"((b18_58)"
" b_42)"
"((phase19_59)"
" phase_23)"
"((orig-s20_60)"
" orig-s_28))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" orig-s20_60"
" '#t"
" id17_57"
" b18_58"
" phase19_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:63:4_56"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list"
" orig-s20_60)"
" id17_57"
" b18_58"
" phase19_59)))"
"(if requires+provides_27"
"(let-values()"
"(let-values(((requires+provides29_61)"
" requires+provides_27)"
"((id30_62)"
" id_36)"
"((phase31_63)"
" phase_23)"
"((b32_64)"
" b_42))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!11.1))"
"(add-defined-or-required-id!9.1"
" '#f"
" '#f"
" requires+provides29_61"
" id30_62"
" phase31_63"
" b32_64)"
"(add-defined-or-required-id!11.1"
" requires+provides29_61"
" id30_62"
" phase31_63"
" b32_64))))"
"(void))"
" defined-sym_41))))))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(if '#t"
"(for-loop_33 fold-var_37(unsafe-cdr lst_35))"
" fold-var_37))"
" fold-var_34))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32)))))))))))))))))"
"(define-values"
"(unpack15.1)"
"(lambda(given-kws_65 given-args_66 ids9_67 defined-syms10_68 self11_69 phase12_70 all-scopes-stx13_71)"
"(let-values(((frame-id1_72)(car given-args_66))"
"((given-kws_73)(cdr given-kws_65))"
"((given-args_74)(cdr given-args_66)))"
"(let-values(((in8_75)(if(pair? given-kws_73)(eq? '#:in(car given-kws_73)) '#f)))"
"(let-values(((in4_76)(if in8_75(car given-args_74)(void)))"
"((given-kws_77)(if in8_75(cdr given-kws_73) given-kws_73))"
"((given-args_78)(if in8_75(cdr given-args_74) given-args_74)))"
"(let-values(((requires+provides7_79)"
"(if(pair? given-kws_77)(eq? '#:requires+provides(car given-kws_77)) '#f)))"
"(let-values(((requires+provides3_80)(if requires+provides7_79(car given-args_78)(void)))"
"((given-kws_81)(if requires+provides7_79(cdr given-kws_77) given-kws_77))"
"((given-args_82)(if requires+provides7_79(cdr given-args_78) given-args_78)))"
"(let-values(((top-level-bind-scope6_83)(pair? given-kws_81)))"
"(let-values(((top-level-bind-scope2_84)(if top-level-bind-scope6_83(car given-args_82)(void))))"
"(select-defined-syms-and-bind!14.1"
" frame-id1_72"
" in4_76"
" in8_75"
" requires+provides3_80"
" requires+provides7_79"
" top-level-bind-scope2_84"
" top-level-bind-scope6_83"
" ids9_67"
" defined-syms10_68"
" self11_69"
" phase12_70"
" all-scopes-stx13_71))))))))))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lifted/1.1$23"
"(lambda(given-kws_85 given-argc_86)"
"(if(= given-argc_86 '7)"
"(subsets? '(#:frame-id) given-kws_85 '(#:frame-id #:in #:requires+provides #:top-level-bind-scope))"
" '#f))"
"(case-lambda"
"((given-kws_87 given-args_88 ids_89 defined-syms_90 self_91 phase_92 all-scopes-stx_93)"
"(unpack15.1 given-kws_87 given-args_88 ids_89 defined-syms_90 self_91 phase_92 all-scopes-stx_93)))"
" '(#:frame-id)"
" '(#:frame-id #:in #:requires+provides #:top-level-bind-scope)))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_94 all-scopes-stx_95 top-level-bind-scope_96 phase_97)"
"(let-values(((m-id_98)(datum->syntax$2 all-scopes-stx_95(syntax-e$1 id_94))))"
"(let-values(((or-part_99)(bound-identifier=?$1 id_94 m-id_98 phase_97)))"
"(if or-part_99"
" or-part_99"
"(if top-level-bind-scope_96"
"(bound-identifier=?$1 id_94(add-scope m-id_98 top-level-bind-scope_96) phase_97)"
" '#f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_100 id_101 phase_102 top-level-bind-scope_103)"
"(if prev-id_100"
"(if(not(bound-identifier=?$1 prev-id_100 id_101 phase_102))"
"(let-values(((or-part_104)(not top-level-bind-scope_103)))"
"(if or-part_104"
" or-part_104"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_100 top-level-bind-scope_103)"
"(remove-scope id_101 top-level-bind-scope_103)"
" phase_102))))"
" '#f)"
" '#f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_105 ctx_106)"
"(let-values(((...er/expand/def-id.rkt:85:2_107) select-defined-syms-and-bind!16.1)"
"((tl-ids33_108) tl-ids_105)"
"((temp34_109)(root-expand-context-defined-syms ctx_106))"
"((temp35_110)(namespace-mpi(expand-context-namespace ctx_106)))"
"((temp36_111)(expand-context-phase ctx_106))"
"((temp37_112)(root-expand-context-all-scopes-stx ctx_106))"
"((temp38_113)(root-expand-context-frame-id ctx_106))"
"((temp39_114)(root-expand-context-top-level-bind-scope ctx_106)))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!16.1))"
"(select-defined-syms-and-bind!14.1"
" temp38_113"
" '#f"
" '#f"
" '#f"
" '#f"
" temp39_114"
" '#t"
" tl-ids33_108"
" temp34_109"
" temp35_110"
" temp36_111"
" temp37_112)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:85:2_107"
" keyword-procedure-extract"
" '(#:frame-id #:top-level-bind-scope)"
" '7)"
" '(#:frame-id #:top-level-bind-scope)"
"(list temp38_113 temp39_114)"
" tl-ids33_108"
" temp34_109"
" temp35_110"
" temp36_111"
" temp37_112)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_115 phase_116 sym_117 id_118)"
"(let-values(((defined-syms-at-phase_119)"
"(let-values(((or-part_120)(hash-ref defined-syms_115 phase_116 '#f)))"
"(if or-part_120"
" or-part_120"
"(let-values(((ht_121)(make-hasheq)))"
"(begin(hash-set! defined-syms_115 phase_116 ht_121) ht_121))))))"
"(hash-set! defined-syms-at-phase_119 sym_117 id_118))))"
"(define-values(box-cons!)(lambda(b_2 v_3)(set-box! b_2(cons v_3(unbox b_2)))))"
"(define-values(box-clear!)(lambda(b_4)(begin0(alt-reverse(unbox b_4))(set-box! b_4 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type 'lift-context '#f '3 '0 '#f null(current-inspector) '#f '(0 1 2) '#f 'lift-context)))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 '0 'convert)"
"(make-struct-field-accessor -ref_8 '1 'lifts)"
"(make-struct-field-accessor -ref_8 '2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-rhs)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(make-struct-type 'lifted-bind '#f '2 '0 '#f null(current-inspector) '#f '(0 1) '#f 'lifted-bind)))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 '0 'ids)"
"(make-struct-field-accessor -ref_39 '1 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_62 module*-ok?4_63 convert5_64)"
"(let-values(((convert_65) convert5_64))"
"(let-values(((module*-ok?_66)(if module*-ok?4_63 module*-ok?3_62 '#f)))"
"(let-values()(lift-context1.1 convert_65(box null) module*-ok?_66))))))"
"(define-values"
"(unpack7.1$4)"
"(lambda(given-kws_67 given-args_68 convert5_69)"
"(let-values(((module*-ok?4_70)(pair? given-kws_67)))"
"(let-values(((module*-ok?3_71)(if module*-ok?4_70(car given-args_68)(void))))"
"(make-lift-context6.1 module*-ok?3_71 module*-ok?4_70 convert5_69)))))"
"(define-values"
"(make-lift-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_72 given-argc_73)"
"(if(= given-argc_73 '3)"
"(let-values(((l1_74) given-kws_72))"
"(let-values(((l1_75)(if(null? l1_74) l1_74(if(eq?(car l1_74) '#:module*-ok?)(cdr l1_74) l1_74))))"
"(null? l1_75)))"
" '#f))"
"(case-lambda((given-kws_76 given-args_77 convert_78)(unpack7.1$4 given-kws_76 given-args_77 convert_78)))"
" null"
" '(#:module*-ok?)"
"(let-values(((make-lift-context_79)(case-lambda((convert_80)(unpack7.1$4 null null convert_80)))))"
" make-lift-context_79)))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_81 ids_82 rhs_83 phase_84)"
"(let-values(((lifted-ids_85 lifted_86)((lift-context-convert lifts_81) ids_82 rhs_83 phase_84)))"
"(begin(box-cons!(lift-context-lifts lifts_81) lifted_86) lifted-ids_85))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_87)(box-clear!(lift-context-lifts lifts_87))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_88 counter_89)"
"(lambda(ids_90 rhs_91 phase_92)"
"(begin"
"(let-values(((lst_93) ids_90))"
"(begin"
"(if(list? lst_93)(void)(let-values()(in-list lst_93)))"
"((letrec-values(((for-loop_94)"
"(lambda(fold-var_95 lst_96)"
"(if(pair? lst_96)"
"(let-values(((id_97)(unsafe-car lst_96)))"
"(if '#t"
"(let-values(((fold-var_98)"
"(let-values(((fold-var_99) fold-var_95))"
"(let-values(((fold-var_100)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((key_101)"
"(let-values(((id31_102) id_97)"
"((phase32_103)"
" phase_92)"
"((counter33_104)"
" counter_89))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" '#f"
" '#f"
" '#f"
" '#f"
" id31_102"
" phase32_103"
" counter33_104)"
"(add-local-binding!35.1"
" id31_102"
" phase32_103"
" counter33_104)))))"
"(set-box!"
" lift-env_88"
"(hash-set"
"(unbox lift-env_88)"
" key_101"
" variable))))"
"(void)))))"
"(values fold-var_100)))))"
"(if '#t(for-loop_94 fold-var_98(unsafe-cdr lst_96)) fold-var_98))"
" fold-var_95))"
" fold-var_95))))"
" for-loop_94)"
"(void)"
" lst_93)))"
"(values ids_90(lifted-bind2.1 ids_90 rhs_91))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_105)"
"(lambda(ids_106 rhs_107 phase_108)"
"(let-values(((post-scope_109)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_105)))))"
"(let-values(((tl-ids_110)"
"(alt-reverse"
"(let-values(((lst_111) ids_106))"
"(begin"
"(if(list? lst_111)(void)(let-values()(in-list lst_111)))"
"((letrec-values(((for-loop_112)"
"(lambda(fold-var_113 lst_114)"
"(if(pair? lst_114)"
"(let-values(((id_115)(unsafe-car lst_114)))"
"(if '#t"
"(let-values(((fold-var_116)"
"(let-values(((fold-var_117) fold-var_113))"
"(let-values(((fold-var_118)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_115"
" post-scope_109))"
" fold-var_117))))"
"(values fold-var_118)))))"
"(if '#t"
"(for-loop_112 fold-var_116(unsafe-cdr lst_114))"
" fold-var_116))"
" fold-var_113))"
" fold-var_113))))"
" for-loop_112)"
" null"
" lst_111))))))"
"(begin"
"(select-defined-syms-and-bind!/ctx tl-ids_110 ctx_105)"
"(values tl-ids_110(lifted-bind2.1 tl-ids_110 rhs_107))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_119 body_120 s_121 phase_122)"
"(datum->syntax$2"
" '#f"
"(let-values(((lst_123)(alt-reverse lifts_119)))"
"(begin"
"(if(list? lst_123)(void)(let-values()(in-list lst_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(body_125 lst_126)"
"(if(pair? lst_126)"
"(let-values(((lift_127)(unsafe-car lst_126)))"
"(if '#t"
"(let-values(((body_128)"
"(let-values(((body_129) body_125))"
"(let-values(((body_130)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_127)"
"(void)"
"(let-values()"
" (error '\"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$2"
"(syntax-shift-phase-level$1 core-stx phase_122)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_127)"
"(lifted-bind-rhs lift_127)))"
" body_129)))))"
"(values body_130)))))"
"(if '#t(for-loop_124 body_128(unsafe-cdr lst_126)) body_128))"
" body_125))"
" body_125))))"
" for-loop_124)"
" body_120"
" lst_123))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_131 adjust-form10_132 lifts11_133 body12_134 s13_135 phase14_136)"
"(let-values(((lifts_137) lifts11_133))"
"(let-values(((body_138) body12_134))"
"(let-values(((s_139) s13_135))"
"(let-values(((phase_140) phase14_136))"
"(let-values(((adjust-form_141)(if adjust-form10_132 adjust-form9_131 values)))"
"(let-values()"
"(datum->syntax$2"
" '#f"
"(cons"
"(datum->syntax$2(syntax-shift-phase-level$1 core-stx phase_140) 'begin)"
"(append"
"(alt-reverse"
"(let-values(((lst_142) lifts_137))"
"(begin"
"(if(list? lst_142)(void)(let-values()(in-list lst_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(fold-var_144 lst_145)"
"(if(pair? lst_145)"
"(let-values(((lift_146)(unsafe-car lst_145)))"
"(if '#t"
"(let-values(((fold-var_147)"
"(let-values(((fold-var_148) fold-var_144))"
"(let-values(((fold-var_149)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_141"
"(if(lifted-bind? lift_146)"
"(let-values()"
"(datum->syntax$2"
" '#f"
"(list"
"(datum->syntax$2"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_140)"
" 'define-values)"
"(lifted-bind-ids lift_146)"
"(lifted-bind-rhs"
" lift_146))))"
"(let-values() lift_146))))"
" fold-var_148))))"
"(values fold-var_149)))))"
"(if '#t"
"(for-loop_143 fold-var_147(unsafe-cdr lst_145))"
" fold-var_147))"
" fold-var_144))"
" fold-var_144))))"
" for-loop_143)"
" null"
" lst_142))))"
"(list body_138))))))))))))"
"(define-values"
"(unpack16.1$2)"
"(lambda(given-kws_150 given-args_151 lifts11_152 body12_153 s13_154 phase14_155)"
"(let-values(((adjust-form10_156)(pair? given-kws_150)))"
"(let-values(((adjust-form9_157)(if adjust-form10_156(car given-args_151)(void))))"
"(wrap-lifts-as-begin15.1 adjust-form9_157 adjust-form10_156 lifts11_152 body12_153 s13_154 phase14_155)))))"
"(define-values"
"(wrap-lifts-as-begin17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_158 given-argc_159)"
"(if(= given-argc_159 '6)"
"(let-values(((l1_160) given-kws_158))"
"(let-values(((l1_161)(if(null? l1_160) l1_160(if(eq?(car l1_160) '#:adjust-form)(cdr l1_160) l1_160))))"
"(null? l1_161)))"
" '#f))"
"(case-lambda"
"((given-kws_162 given-args_163 lifts_164 body_165 s_166 phase_167)"
"(unpack16.1$2 given-kws_162 given-args_163 lifts_164 body_165 s_166 phase_167)))"
" null"
" '(#:adjust-form)"
"(let-values(((wrap-lifts-as-begin_168)"
"(case-lambda"
"((lifts_169 body_170 s_171 phase_172)(unpack16.1$2 null null lifts_169 body_170 s_171 phase_172)))))"
" wrap-lifts-as-begin_168)))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_173 make-_174 ?_175 -ref_176 -set!_177)"
"(make-struct-type"
" 'module-lift-context"
" '#f"
" '3"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2)"
" '#f"
" 'module-lift-context)))"
"(values"
" struct:_173"
" make-_174"
" ?_175"
"(make-struct-field-accessor -ref_176 '0 'wrt-phase)"
"(make-struct-field-accessor -ref_176 '1 'lifts)"
"(make-struct-field-accessor -ref_176 '2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_204 module*-ok?_205)(module-lift-context18.1 phase_204(box null) module*-ok?_205)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_206)(box-clear!(module-lift-context-lifts module-lifts_206))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_207 s_208 phase_209)"
"(begin"
"(if(let-values(((or-part_210)"
"(if(module-lift-context? module-lifts_207)"
"(module-lift-context-module*-ok? module-lifts_207)"
" '#f)))"
"(if or-part_210"
" or-part_210"
"(if(lift-context? module-lifts_207)(lift-context-module*-ok? module-lifts_207) '#f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_211)(core-form-sym s_208 phase_209)))"
"(if(equal? tmp_211 'module)"
"(let-values()(void))"
"(if(equal? tmp_211 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
" '\"cannot lift `module*' to a top-level context\""
" '\"syntax\""
" s_208))"
"(let-values()"
" (raise-arguments-error 'syntax-local-lift-module '\"not a `module' declaration\" '\"syntax\" s_208)))))))"
"(if(module-lift-context? module-lifts_207)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_207) s_208))"
"(if(lift-context? module-lifts_207)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_207) s_208))"
" (let-values () (error '\"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_212 make-_213 ?_214 -ref_215 -set!_216)"
"(make-struct-type"
" 'require-lift-context"
" '#f"
" '3"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2)"
" '#f"
" 'require-lift-context)))"
"(values"
" struct:_212"
" make-_213"
" ?_214"
"(make-struct-field-accessor -ref_215 '0 'do-require)"
"(make-struct-field-accessor -ref_215 '1 'wrt-phase)"
"(make-struct-field-accessor -ref_215 '2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_243 do-require_244)(require-lift-context19.1 do-require_244 wrt-phase_243(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_245)(box-clear!(require-lift-context-requires require-lifts_245))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_246 s_247 phase_248)"
"(begin"
"((require-lift-context-do-require require-lifts_246) s_247 phase_248)"
"(box-cons!(require-lift-context-requires require-lifts_246) s_247))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_249 make-_250 ?_251 -ref_252 -set!_253)"
"(make-struct-type"
" 'to-module-lift-context"
" '#f"
" '4"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 3)"
" '#f"
" 'to-module-lift-context)))"
"(values"
" struct:_249"
" make-_250"
" ?_251"
"(make-struct-field-accessor -ref_252 '0 'wrt-phase)"
"(make-struct-field-accessor -ref_252 '1 'provides)"
"(make-struct-field-accessor -ref_252 '2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_252 '3 'ends))))"
"(define-values"
"(lifted/1.1$18)"
"(make-required"
" 'make-to-module-lift-context"
"(case-lambda((self_285 phase_286)(apply missing-kw self_285 phase_286 null)))"
" '#f"
" '#f))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_287 shared-module-ends21_288 phase25_289)"
"(let-values(((phase_290) phase25_289))"
"(let-values(((ends_291) shared-module-ends21_288))"
"(let-values(((end-as-expressions?_292) end-as-expressions?22_287))"
"(let-values()(to-module-lift-context20.1 phase_290(box null) end-as-expressions?_292 ends_291)))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_293 given-args_294 phase25_295)"
"(let-values(((end-as-expressions?22_296)(car given-args_294))"
"((given-kws_297)(cdr given-kws_293))"
"((given-args_298)(cdr given-args_294)))"
"(let-values(((shared-module-ends21_299)(car given-args_298)))"
"(make-to-module-lift-context26.1 end-as-expressions?22_296 shared-module-ends21_299 phase25_295)))))"
"(define-values"
"(make-to-module-lift-context28.1)"
"(lifted/1.1$18"
"(lambda(given-kws_300 given-argc_301)"
"(if(= given-argc_301 '3)"
"(let-values(((l2_302) given-kws_300))"
"(if(pair? l2_302)"
"(if(eq?(car l2_302) '#:end-as-expressions?)"
"(let-values(((l2_303)(cdr l2_302)))"
"(if(pair? l2_303)(if(eq?(car l2_303) '#:shared-module-ends)(null?(cdr l2_303)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda((given-kws_304 given-args_305 phase_306)(unpack27.1 given-kws_304 given-args_305 phase_306)))"
" '(#:end-as-expressions? #:shared-module-ends)"
" '(#:end-as-expressions? #:shared-module-ends)))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_307)(box-clear!(to-module-lift-context-ends to-module-lifts_307))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_308)(box-clear!(to-module-lift-context-provides to-module-lifts_308))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_309 s_310 phase_311)"
"(box-cons!(to-module-lift-context-provides to-module-lifts_309) s_310)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_312 s_313 phase_314)(box-cons!(to-module-lift-context-ends to-module-lifts_312) s_313)))"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-all-scopes-stx)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'already-expanded"
" '#f"
" '2"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1)"
" '#f"
" 'already-expanded)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 's)"
"(make-struct-field-accessor -ref_4 '1 'all-scopes-stx))))"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'liberal-define-context"
" '#f"
" '0"
" '0"
" '#f"
"(list(cons 1/prop:liberal-define-context '#t))"
" '#f"
" '#f"
" '()"
" '#f"
" 'make-liberal-define-context)))"
"(values struct:_1 make-_2 ?_3)))"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values(((lst_3) v_1))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6)))"
"(if '#t"
"(let-values(((result_8)"
"(let-values(((result_9) result_5))"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_10)))))"
"(if(if '#t(not((lambda x_11(not result_8)) s_7)) '#f)"
"(for-loop_4 result_8(unsafe-cdr lst_6))"
" result_8))"
" result_5))"
" result_5))))"
" for-loop_4)"
" '#t"
" lst_3)))"
" '#f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
" '\"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_12 ctx_13)"
"(if(expansion-contexts? t_12)"
"(not(memq(context->symbol(expand-context-context ctx_13))(expansion-contexts-ref t_12)))"
" '#f)))"
"(define-values(context->symbol)(lambda(context_14)(if(symbol? context_14) context_14 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_15 t_16 ctx_17)"
"(let-values(((wrap_18)"
"(lambda(sym_20)"
"(datum->syntax$2"
" '#f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$2 core-stx sym_20)(expand-context-phase ctx_17))"
" s_15)))))"
"(let-values(((fail_19)"
"(lambda()"
"(1/raise-syntax-error"
" '#f"
"(format"
" '\"not allowed in context\\n expansion context: ~a\""
"(context->symbol(expand-context-context ctx_17)))"
" s_15))))"
"(let-values(((tmp_21)(context->symbol(expand-context-context ctx_17))))"
"(if(equal? tmp_21 'module-begin)"
"(let-values()(wrap_18 'begin))"
"(if(if(equal? tmp_21 'module) '#t(if(equal? tmp_21 'top-level) '#t(equal? tmp_21 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_16))(wrap_18 '#%expression)(fail_19)))"
"(let-values()(fail_19)))))))))"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'reference-record '#f '3 '0 '#f null '#f '#f '() '#f 'reference-record)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 '0 'already-bound)"
"(make-struct-field-accessor -ref_4 '1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 '2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 '0 'already-bound)"
"(make-struct-field-mutator -set!_5 '1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 '2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) '#f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_32 key_33)"
"(if(set-member?(reference-record-already-bound rr_32) key_33)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_32"
"(set-add(reference-record-reference-before-bound rr_32) key_33))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_34)"
"(let-values(((stop?_35 fold-var_36)"
"(let-values(((lst_37) rrs_34))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(stop-after?_39 fold-var_40 lst_41)"
"(if(pair? lst_41)"
"(let-values(((rr_42)(unsafe-car lst_41)))"
"(if '#t"
"(let-values(((stop-after?_43 fold-var_44)"
"(let-values(((stop-after?_45) stop-after?_39)"
"((fold-var_46) fold-var_40))"
"(if '#t"
"(let-values(((stop?_47)"
"(reference-record-all-referenced?"
" rr_42)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_48)"
"(lambda(stop-after?_49"
" fold-var_50)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((stop-after?_51"
" fold-var_52)"
"(let-values(((stop-after?_53)"
" stop-after?_49)"
"((fold-var_54)"
" fold-var_50))"
"(if '#t"
"(let-values(((stop-after?_55)"
"(let-values(((or-part_56)"
" stop-after?_53))"
"(if or-part_56"
" or-part_56"
" stop?_47))))"
"(begin"
" '#t"
"((letrec-values(((for-loop_57)"
"(lambda(stop-after?_58"
" fold-var_59)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((stop-after?_60"
" fold-var_61)"
"(let-values(((stop-after?_62)"
" stop-after?_58)"
"((fold-var_63)"
" fold-var_59))"
"(if stop?_47"
"(values"
" stop-after?_62"
" fold-var_63)"
"(let-values(((stop-after?_64)"
" stop-after?_62)"
"((fold-var_65)"
" fold-var_63))"
"(let-values(((stop-after?_66"
" fold-var_67)"
"(let-values()"
"(let-values(((fold-var_68)"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?!"
" rr_42"
" '#t))"
"(void)))))"
"(values"
" stop-after?_64"
" fold-var_68)))))"
"(values"
" stop-after?_66"
" fold-var_67)))))))"
"(if '#f"
"(for-loop_57"
" stop-after?_60"
" fold-var_61)"
"(values"
" stop-after?_60"
" fold-var_61)))"
"(values"
" stop-after?_58"
" fold-var_59)))"
"(values"
" stop-after?_58"
" fold-var_59)))))"
" for-loop_57)"
" stop-after?_55"
" fold-var_54)))"
"(values"
" stop-after?_53"
" fold-var_54)))))"
"(if '#f"
"(for-loop_48"
" stop-after?_51"
" fold-var_52)"
"(values"
" stop-after?_51"
" fold-var_52)))"
"(values"
" stop-after?_49"
" fold-var_50)))"
"(values"
" stop-after?_49"
" fold-var_50)))))"
" for-loop_48)"
" stop-after?_45"
" fold-var_46)))"
"(values stop-after?_45 fold-var_46)))))"
"(if(if '#t(not((lambda x_69 stop-after?_43) rr_42)) '#f)"
"(for-loop_38 stop-after?_43 fold-var_44(unsafe-cdr lst_41))"
"(values stop-after?_43 fold-var_44)))"
"(values stop-after?_39 fold-var_40)))"
"(values stop-after?_39 fold-var_40)))))"
" for-loop_38)"
" '#f"
"(void)"
" lst_37)))))"
"(values fold-var_36))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_70 keys_71)"
"(begin"
"(set-reference-record-already-bound!"
" rr_70"
"(let-values(((lst_72) keys_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(ab_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((key_76)(unsafe-car lst_75)))"
"(if '#t"
"(let-values(((ab_77)"
"(let-values(((ab_78) ab_74))"
"(let-values(((ab_79)(let-values()(set-add ab_78 key_76))))"
"(values ab_79)))))"
"(if '#t(for-loop_73 ab_77(unsafe-cdr lst_75)) ab_77))"
" ab_74))"
" ab_74))))"
" for-loop_73)"
"(reference-record-already-bound rr_70)"
" lst_72))))"
"(set-reference-record-reference-before-bound!"
" rr_70"
"(let-values(((lst_80) keys_71))"
"(begin"
"(if(list? lst_80)(void)(let-values()(in-list lst_80)))"
"((letrec-values(((for-loop_81)"
"(lambda(rbb_82 lst_83)"
"(if(pair? lst_83)"
"(let-values(((key_84)(unsafe-car lst_83)))"
"(if '#t"
"(let-values(((rbb_85)"
"(let-values(((rbb_86) rbb_82))"
"(let-values(((rbb_87)(let-values()(set-remove rbb_86 key_84))))"
"(values rbb_87)))))"
"(if '#t(for-loop_81 rbb_85(unsafe-cdr lst_83)) rbb_85))"
" rbb_82))"
" rbb_82))))"
" for-loop_81)"
"(reference-record-reference-before-bound rr_70)"
" lst_80)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_88)"
"(let-values(((or-part_89)(reference-record-all-referenced? rr_88)))"
"(if or-part_89 or-part_89(positive?(set-count(reference-record-reference-before-bound rr_88)))))))"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() '#f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((enter-macro . 8)"
"(opaque-expr . 146)"
"(exit-check . 127)"
"(prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(exit-local-expr . 140)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-list . 5)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(lift-provide . 151)"
"(prim-begin . 107)"
"(tag . 142)"
"(enter-local . 130)"
"(prim-if . 105)"
"(prim-define-values . 104)"
"(prim-submodule* . 159)"
"(block->letrec . 14)"
"(prim-module-begin . 102)"
"(next . 3)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(prim-provide . 122)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(prim-let-values . 112)"
"(exit-bind . 145)"
"(module-body . 23)"
"(resolve . 1)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(letrec-syntaxes-renames . 19)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(prim-quote-syntax . 118)"
"(prim-letrec-values . 113)"
"(prim-begin-for-syntax . 156)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(block-renames . 24)"
"(block->list . 12)"
"(enter-check . 126)"
"(macro-pre-x . 21)"
"(prim-quote . 117)"
"(lift-statement . 134)"
"(prim-set! . 123)"
"(local-bind . 143)"
"(prim-#%top . 116)"
"(local-pre . 132)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(enter-block . 10)"
"(start-expand . 141)"
"(prim-with-continaution-mark . 106)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(enter-prim . 6)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(track-origin . 152)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(lift-loop . 128)"
"(visit . 0)"
"(prim-#%datum . 115)"
"(case-lambda-renames . 18)"
"(enter-list . 4)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(next-group . 13)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(exit-prim . 7)"
"(module-lift-loop . 137)))"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_24 alternate-id2_25 s3_26 ctx4_27)"
"(let-values(((s_28) s3_26))"
"(let-values(((ctx_29) ctx4_27))"
"(let-values(((alternate-id_30)(if alternate-id2_25 alternate-id1_24 '#f)))"
"(let-values()"
"(begin"
"(let-values(((obs_31)(expand-context-observer ctx_29)))"
"(if obs_31"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_31"
"(if(expand-context-only-immediate? ctx_29) 'enter-check 'visit)"
" s_28))"
"(void)))"
"(void)))"
"(if(identifier? s_28)"
"(let-values()(expand-identifier s_28 ctx_29 alternate-id_30))"
"(if(if(pair?(syntax-e/no-taint s_28))(identifier?(car(syntax-e/no-taint s_28))) '#f)"
"(let-values()(expand-id-application-form s_28 ctx_29 alternate-id_30))"
"(if(let-values(((or-part_32)(pair?(syntax-e$1(syntax-disarm$1 s_28)))))"
"(if or-part_32 or-part_32(null?(syntax-e$1(syntax-disarm$1 s_28)))))"
"(let-values()(expand-implicit '#%app s_28 ctx_29 '#f))"
"(if(already-expanded?(syntax-e/no-taint s_28))"
"(let-values()(expand-already-expanded s_28 ctx_29))"
"(let-values()(expand-implicit '#%datum s_28 ctx_29 '#f)))))))))))))"
"(define-values"
"(unpack6.1$1)"
"(lambda(given-kws_33 given-args_34 s3_35 ctx4_36)"
"(let-values(((alternate-id2_37)(pair? given-kws_33)))"
"(let-values(((alternate-id1_38)(if alternate-id2_37(car given-args_34)(void))))"
"(expand5.1 alternate-id1_38 alternate-id2_37 s3_35 ctx4_36)))))"
"(define-values"
"(expand7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_39 given-argc_40)"
"(if(= given-argc_40 '4)"
"(let-values(((l1_41) given-kws_39))"
"(let-values(((l1_42)(if(null? l1_41) l1_41(if(eq?(car l1_41) '#:alternate-id)(cdr l1_41) l1_41))))"
"(null? l1_42)))"
" '#f))"
"(case-lambda((given-kws_43 given-args_44 s_45 ctx_46)(unpack6.1$1 given-kws_43 given-args_44 s_45 ctx_46)))"
" null"
" '(#:alternate-id)"
"(let-values(((expand_47)(case-lambda((s_48 ctx_49)(unpack6.1$1 null null s_48 ctx_49))))) expand_47)))"
"(define-values"
"(expand-identifier)"
"(lambda(s_50 ctx_51 alternate-id_52)"
"(let-values(((id_53)(let-values(((or-part_54) alternate-id_52))(if or-part_54 or-part_54 s_50))))"
"(if(free-id-set-member?(expand-context-stops ctx_51)(expand-context-phase ctx_51) id_53)"
"(let-values()"
"(begin"
"(let-values(((obs_55)(expand-context-observer ctx_51)))"
"(if obs_55"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_51))"
"(let-values()"
"(begin"
"(call-expand-observe obs_55 'enter-prim s_50)"
"(call-expand-observe obs_55 'prim-stop)"
"(call-expand-observe obs_55 'exit-prim s_50)"
"(call-expand-observe obs_55 'return s_50)))"
"(void)))"
"(void)))"
" s_50))"
"(let-values()"
"(let-values(((binding_56)"
"(let-values(((...nder/expand/main.rkt:82:19_57) resolve+shift15.1)"
"((id102_58) id_53)"
"((temp103_59)(expand-context-phase ctx_51))"
"((temp104_60) 'ambiguous)"
"((temp105_61) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp104_60"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" temp105_61"
" '#t"
" '#f"
" '#f"
" id102_58"
" temp103_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:82:19_57"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" '4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp104_60 temp105_61)"
" id102_58"
" temp103_59)))))"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_51)))"
"(if obs_62"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_51))"
"(let-values()(call-expand-observe obs_62 'resolve id_53))"
"(void)))"
"(void)))"
"(if(eq? binding_56 'ambiguous)"
"(let-values()(raise-ambiguous-error id_53 ctx_51))"
"(if(not binding_56)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_50 alternate-id_52) ctx_51 s_50))"
"(let-values()"
"(let-values(((t_63 insp-of-t_64)"
"(let-values(((...nder/expand/main.rkt:94:34_65) lookup17.1)"
"((binding106_66) binding_56)"
"((ctx107_67) ctx_51)"
"((id108_68) id_53)"
"((temp109_69)(if alternate-id_52 s_50 '#f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp109_69 '#t '#f '#f binding106_66 ctx107_67 id108_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:94:34_65"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list temp109_69)"
" binding106_66"
" ctx107_67"
" id108_68)))))"
"(dispatch t_63 insp-of-t_64 s_50 id_53 ctx_51 binding_56))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_70 ctx_71 alternate-id_72)"
"(let-values(((disarmed-s_73)(syntax-disarm$1 s_70 '#f)))"
"(let-values(((id_74)"
"(let-values(((or-part_75) alternate-id_72))"
"(if or-part_75 or-part_75(car(syntax-e$1 disarmed-s_73))))))"
"(if(free-id-set-member?(expand-context-stops ctx_71)(expand-context-phase ctx_71) id_74)"
"(let-values()"
"(begin"
"(let-values(((obs_76)(expand-context-observer ctx_71)))"
"(if obs_76"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_71))"
"(let-values()"
"(begin"
"(call-expand-observe obs_76 'enter-prim s_70)"
"(call-expand-observe obs_76 'prim-stop)"
"(call-expand-observe obs_76 'exit-prim s_70)"
"(call-expand-observe obs_76 'return s_70)))"
"(void)))"
"(void)))"
" s_70))"
"(let-values()"
"(let-values(((binding_77)"
"(let-values(((...nder/expand/main.rkt:103:19_78) resolve+shift15.1)"
"((id110_79) id_74)"
"((temp111_80)(expand-context-phase ctx_71))"
"((temp112_81) 'ambiguous)"
"((temp113_82) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp112_81"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" temp113_82"
" '#t"
" '#f"
" '#f"
" id110_79"
" temp111_80)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:103:19_78"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" '4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp112_81 temp113_82)"
" id110_79"
" temp111_80)))))"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_71)))"
"(if obs_83"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_71))"
"(let-values()(call-expand-observe obs_83 'resolve id_74))"
"(void)))"
"(void)))"
"(if(eq? binding_77 'ambiguous)"
"(let-values()(raise-ambiguous-error id_74 ctx_71))"
"(if(not binding_77)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_70 alternate-id_72) ctx_71 id_74))"
"(let-values()"
"(let-values(((t_84 insp-of-t_85)"
"(let-values(((...nder/expand/main.rkt:115:34_86) lookup17.1)"
"((binding114_87) binding_77)"
"((ctx115_88) ctx_71)"
"((id116_89) id_74)"
"((temp117_90)"
"(if alternate-id_72(car(syntax-e$1 disarmed-s_73)) '#f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp117_90 '#t '#f '#f binding114_87 ctx115_88 id116_89)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:115:34_86"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list temp117_90)"
" binding114_87"
" ctx115_88"
" id116_89)))))"
"(if(variable? t_84)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_70 alternate-id_72) ctx_71 id_74))"
"(let-values()(dispatch t_84 insp-of-t_85 s_70 id_74 ctx_71 binding_77)))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_91 s_92 ctx_93 trigger-id_94)"
"(let-values(((disarmed-s_95)(syntax-disarm$1 s_92)))"
"(let-values(((id_96)(datum->syntax$2 disarmed-s_95 sym_91)))"
"(if(free-id-set-member?(expand-context-stops ctx_93)(expand-context-phase ctx_93) id_96)"
"(let-values()"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_93)))"
"(if obs_97"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_93))"
"(let-values()"
"(begin"
"(call-expand-observe obs_97 'enter-prim s_92)"
"(call-expand-observe obs_97 'prim-stop)"
"(call-expand-observe obs_97 'exit-prim s_92)"
"(call-expand-observe obs_97 'return s_92)))"
"(void)))"
"(void)))"
" s_92))"
"(let-values()"
"(let-values(((b_98)"
"(let-values(((...nder/expand/main.rkt:133:13_99) resolve+shift15.1)"
"((id118_100) id_96)"
"((temp119_101)(expand-context-phase ctx_93))"
"((temp120_102) 'ambiguous)"
"((temp121_103) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp120_102"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" temp121_103"
" '#t"
" '#f"
" '#f"
" id118_100"
" temp119_101)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:133:13_99"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" '4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp120_102 temp121_103)"
" id118_100"
" temp119_101)))))"
"(if(eq? b_98 'ambiguous)"
"(let-values()(raise-ambiguous-error id_96 ctx_93))"
"(let-values()"
"(let-values(((t_104 insp-of-t_105)"
"(if b_98"
"(let-values(((b122_106) b_98)((ctx123_107) ctx_93)((id124_108) id_96))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 '#f '#f '#f '#f b122_106 ctx123_107 id124_108)"
"(lookup17.1 b122_106 ctx123_107 id124_108)))"
"(values '#f '#f))))"
"(if(transformer? t_104)"
"(let-values()"
"(dispatch-transformer"
" t_104"
" insp-of-t_105"
"(make-explicit sym_91 s_92 disarmed-s_95)"
" id_96"
" ctx_93"
" b_98))"
"(if(expand-context-only-immediate? ctx_93)"
"(let-values()"
"(begin"
"(let-values(((obs_109)(expand-context-observer ctx_93)))"
"(if obs_109"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_109 'exit-check s_92))(void)))"
"(void)))"
" s_92))"
"(if(core-form? t_104)"
"(let-values()"
"(if(if(eq? sym_91 '#%top)"
"(if(eq?(core-form-name t_104) '#%top)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_93)"
" '#f)"
" '#f)"
"(let-values()(dispatch-implicit-#%top-core-form t_104 s_92 ctx_93))"
"(let-values()"
"(dispatch-core-form t_104(make-explicit sym_91 s_92 disarmed-s_95) ctx_93))))"
"(let-values()(raise-syntax-implicit-error s_92 sym_91 trigger-id_94 ctx_93)))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_110 ctx_111)"
"(let-values(((ae_112)(syntax-e$1 s_110)))"
"(let-values((()"
"(begin"
"(if(bound-identifier=?$1"
"(root-expand-context-all-scopes-stx ctx_111)"
"(already-expanded-all-scopes-stx ae_112)"
"(expand-context-phase ctx_111))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
"(string-append"
" '\"expanded syntax not in its original lexical context;\\n\"\n"
" '\" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_112))))"
"(values))))"
"(let-values(((result-s_113)(syntax-track-origin$1(already-expanded-s ae_112) s_110)))"
"(begin"
"(let-values(((obs_114)(expand-context-observer ctx_111)))"
"(if obs_114"
"(let-values()"
"(if '#t"
"(let-values()"
"(begin"
"(call-expand-observe obs_114 'tag result-s_113)"
"(call-expand-observe obs_114 'opaque-expr result-s_113)))"
"(void)))"
"(void)))"
" result-s_113))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_115 s_116 disarmed-s_117)"
"(syntax-rearm$1(datum->syntax$2 disarmed-s_117(cons sym_115 disarmed-s_117) s_116 s_116) s_116)))"
"(define-values"
"(dispatch)"
"(lambda(t_118 insp-of-t_119 s_120 id_121 ctx_122 binding_123)"
"(if(core-form? t_118)"
"(let-values()(dispatch-core-form t_118 s_120 ctx_122))"
"(if(transformer? t_118)"
"(let-values()(dispatch-transformer t_118 insp-of-t_119 s_120 id_121 ctx_122 binding_123))"
"(if(variable? t_118)"
"(let-values()(dispatch-variable t_118 s_120 id_121 ctx_122 binding_123))"
" (let-values () (1/raise-syntax-error '#f '\"illegal use of syntax\" t_118)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_124 s_125 ctx_126)"
"(if(expand-context-only-immediate? ctx_126)"
"(let-values()"
"(begin"
"(let-values(((obs_127)(expand-context-observer ctx_126)))"
"(if obs_127"
"(let-values()(if '#t(let-values()(call-expand-observe obs_127 'exit-check s_125))(void)))"
"(void)))"
" s_125))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_129)(expand-context-observer ctx_126)))"
"(if obs_129"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_129 'enter-prim s_125))(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_128)((core-form-expander t_124) s_125 ctx_126)))"
"(begin"
"(let-values(((obs_130)(expand-context-observer ctx_126)))"
"(if obs_130"
"(let-values()"
"(if '#t"
"(let-values()"
"(begin"
"(call-expand-observe obs_130 'exit-prim result-s_128)"
"(call-expand-observe obs_130 'return result-s_128)))"
"(void)))"
"(void)))"
" result-s_128)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_131 s_132 ctx_133)"
"(let-values((()"
"(begin"
"(let-values(((obs_135)(expand-context-observer ctx_133)))"
"(if obs_135"
"(let-values()(if '#t(let-values()(call-expand-observe obs_135 'enter-prim s_132))(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_134)((core-form-expander t_131) s_132 ctx_133 '#t)))"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_133)))"
"(if obs_136"
"(let-values()"
"(if '#t"
"(let-values()"
"(begin"
"(call-expand-observe obs_136 'exit-prim result-s_134)"
"(call-expand-observe obs_136 'return result-s_134)))"
"(void)))"
"(void)))"
" result-s_134)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_137 insp-of-t_138 s_139 id_140 ctx_141 binding_142)"
"(if(not-in-this-expand-context? t_137 ctx_141)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_144)(expand-context-observer ctx_141)))"
"(if obs_144"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_144 'enter-macro s_139))(void)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_143)"
"(avoid-current-expand-context(substitute-alternate-id s_139 id_140) t_137 ctx_141)))"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_141)))"
"(if obs_145"
"(let-values()(if '#t(let-values()(call-expand-observe obs_145 'exit-macro s_139))(void)))"
"(void)))"
"(let-values(((adj-s125_146) adj-s_143)((ctx126_147) ctx_141))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f adj-s125_146 ctx126_147)"
"(expand7.1 adj-s125_146 ctx126_147)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_150)(expand-context-observer ctx_141)))"
"(if obs_150"
"(let-values()"
"(if(expand-context-only-immediate? ctx_141)"
"(let-values()"
"(begin"
"(call-expand-observe obs_150 'visit s_139)"
"(call-expand-observe obs_150 'resolves id_140)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_148 re-ctx_149)"
"(apply-transformer t_137 insp-of-t_138 s_139 id_140 ctx_141 binding_142)))"
"(begin"
"(let-values(((obs_151)(expand-context-observer ctx_141)))"
"(if obs_151"
"(let-values()"
"(if(expand-context-only-immediate? ctx_141)"
"(let-values()(call-expand-observe obs_151 'return exp-s_148))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_141)"
"(let-values() exp-s_148)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:231:11_152) expand7.1)"
"((exp-s127_153) exp-s_148)"
"((re-ctx128_154) re-ctx_149)"
"((temp129_155)"
"(if(1/rename-transformer? t_137)(1/rename-transformer-target t_137) '#f)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 temp129_155 '#t exp-s127_153 re-ctx128_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:231:11_152"
" keyword-procedure-extract"
" '(#:alternate-id)"
" '4)"
" '(#:alternate-id)"
"(list temp129_155)"
" exp-s127_153"
" re-ctx128_154))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_156 s_157 id_158 ctx_159 binding_160)"
"(if(expand-context-only-immediate? ctx_159)"
"(let-values()"
"(begin"
"(let-values(((obs_161)(expand-context-observer ctx_159)))"
"(if obs_161"
"(let-values()(if '#t(let-values()(call-expand-observe obs_161 'exit-check s_157))(void)))"
"(void)))"
" id_158))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_163)(expand-context-observer ctx_159)))"
"(if obs_163"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_163 'variable s_157))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(local-binding? binding_160)(reference-record?(binding-frame-id binding_160)) '#f)"
"(let-values()"
"(reference-record-used!(binding-frame-id binding_160)(local-binding-key binding_160)))"
"(void))"
"(values))))"
"(let-values(((result-s_162)"
"(let-values(((...nder/expand/main.rkt:250:21_164) substitute-variable8.1)"
"((id130_165) id_158)"
"((t131_166) t_156)"
"((temp132_167)(free-id-set-empty?(expand-context-stops ctx_159))))"
"(if(variable-reference-constant?(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1 temp132_167 id130_165 t131_166)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:250:21_164"
" keyword-procedure-extract"
" '(#:no-stops?)"
" '4)"
" '(#:no-stops?)"
"(list temp132_167)"
" id130_165"
" t131_166)))))"
"(begin"
"(let-values(((obs_168)(expand-context-observer ctx_159)))"
"(if obs_168"
"(let-values()(if '#t(let-values()(call-expand-observe obs_168 'return result-s_162))(void)))"
"(void)))"
" result-s_162))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_169 insp-of-t_170 s_171 id_172 ctx_173 binding_174)"
"(let-values((()"
"(begin"
"(let-values(((obs_187)(expand-context-observer ctx_173)))"
"(if obs_187"
"(let-values()(if '#t(let-values()(call-expand-observe obs_187 'enter-macro s_171))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_175)(syntax-disarm$1 s_171)))"
"(let-values(((intro-scope_176)(new-scope 'macro)))"
"(let-values(((intro-s_177)(add-scope disarmed-s_175 intro-scope_176)))"
"(let-values(((use-s_178 use-scopes_179)(maybe-add-use-site-scope intro-s_177 ctx_173 binding_174)))"
"(let-values(((cleaned-s_180)(syntax-remove-taint-dispatch-properties use-s_178)))"
"(let-values(((def-ctx-scopes_181)(box null)))"
"(let-values(((transformed-s_182)"
"(apply-transformer-in-context"
" t_169"
" cleaned-s_180"
" ctx_173"
" insp-of-t_170"
" intro-scope_176"
" use-scopes_179"
" def-ctx-scopes_181"
" id_172)))"
"(let-values(((result-s_183)(flip-scope transformed-s_182 intro-scope_176)))"
"(let-values(((post-s_184)(maybe-add-post-expansion-scope result-s_183 ctx_173)))"
"(let-values(((tracked-s_185)(syntax-track-origin$1 post-s_184 cleaned-s_180 id_172)))"
"(let-values(((rearmed-s_186)"
"(taint-dispatch"
" tracked-s_185"
"(lambda(t-s_188)(syntax-rearm$1 t-s_188 s_171))"
"(expand-context-phase ctx_173))))"
"(begin"
"(let-values(((obs_189)(expand-context-observer ctx_173)))"
"(if obs_189"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_189 'exit-macro rearmed-s_186))"
"(void)))"
"(void)))"
"(values"
" rearmed-s_186"
"(accumulate-def-ctx-scopes ctx_173 def-ctx-scopes_181)))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_190 cleaned-s_191 ctx_192 insp-of-t_193 intro-scope_194 use-scopes_195 def-ctx-scopes_196 id_197)"
"(let-values((()"
"(begin"
"(let-values(((obs_200)(expand-context-observer ctx_192)))"
"(if obs_200"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_200 'macro-pre-x cleaned-s_191))(void)))"
"(void)))"
"(values))))"
"(let-values(((m-ctx_198)"
"(let-values(((the-struct_201) ctx_192))"
"(if(expand-context? the-struct_201)"
"(let-values(((current-introduction-scopes133_202)(cons intro-scope_194 use-scopes_195))"
"((def-ctx-scopes134_203) def-ctx-scopes_196))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_201)"
"(root-expand-context-post-expansion-scope the-struct_201)"
"(root-expand-context-top-level-bind-scope the-struct_201)"
"(root-expand-context-all-scopes-stx the-struct_201)"
"(root-expand-context-use-site-scopes the-struct_201)"
"(root-expand-context-defined-syms the-struct_201)"
"(root-expand-context-frame-id the-struct_201)"
"(root-expand-context-counter the-struct_201)"
"(root-expand-context-lift-key the-struct_201)"
"(expand-context-context the-struct_201)"
"(expand-context-phase the-struct_201)"
"(expand-context-namespace the-struct_201)"
"(expand-context-env the-struct_201)"
"(expand-context-post-expansion-scope-action the-struct_201)"
"(expand-context-scopes the-struct_201)"
" def-ctx-scopes134_203"
"(expand-context-reference-records the-struct_201)"
"(expand-context-only-immediate? the-struct_201)"
"(expand-context-just-once? the-struct_201)"
"(expand-context-module-begin-k the-struct_201)"
"(expand-context-need-eventually-defined the-struct_201)"
"(expand-context-allow-unbound? the-struct_201)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_201)"
"(expand-context-stops the-struct_201)"
" current-introduction-scopes133_202"
"(expand-context-declared-submodule-names the-struct_201)"
"(expand-context-lifts the-struct_201)"
"(expand-context-lift-envs the-struct_201)"
"(expand-context-module-lifts the-struct_201)"
"(expand-context-require-lifts the-struct_201)"
"(expand-context-to-module-lifts the-struct_201)"
"(expand-context-requires+provides the-struct_201)"
"(expand-context-name the-struct_201)"
"(expand-context-observer the-struct_201)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_201)))))"
"(let-values(((transformed-s_199)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" current-expand-context"
" m-ctx_198"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_192)"
"(add1(expand-context-phase ctx_192)))"
" current-module-code-inspector"
"(let-values(((or-part_204) insp-of-t_193))"
"(if or-part_204 or-part_204(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier(lambda()((transformer->procedure t_190) cleaned-s_191)))))))"
"(begin"
"(let-values(((obs_205)(expand-context-observer ctx_192)))"
"(if obs_205"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_205 'macro-post-x transformed-s_199))(void)))"
"(void)))"
"(if(syntax?$1 transformed-s_199)"
"(void)"
"(let-values()"
"(raise-argument-error"
"(syntax-e$1 id_197)"
" '\"received value from syntax expander was not syntax\""
" '\"received\""
" transformed-s_199)))"
" transformed-s_199))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_206 ctx_207 binding_208)"
"(if(if(root-expand-context-use-site-scopes ctx_207)"
"(if(root-expand-context-frame-id ctx_207)"
"(eq?(root-expand-context-frame-id ctx_207)(binding-frame-id binding_208))"
" '#f)"
" '#f)"
"(let-values()"
"(let-values(((sc_209)(new-scope 'use-site)))"
"(let-values(((b_210)(root-expand-context-use-site-scopes ctx_207)))"
"(begin(set-box! b_210(cons sc_209(unbox b_210)))(values(add-scope s_206 sc_209)(list sc_209))))))"
"(let-values()(values s_206 null)))))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_211 ctx_212)"
"(if(root-expand-context-post-expansion-scope ctx_212)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_212) s_211(root-expand-context-post-expansion-scope ctx_212)))"
"(let-values() s_211))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_213 def-ctx-scopes_214)"
"(if(null?(unbox def-ctx-scopes_214))"
" ctx_213"
"(let-values(((the-struct_215) ctx_213))"
"(if(expand-context? the-struct_215)"
"(let-values(((scopes135_216)(append(unbox def-ctx-scopes_214)(expand-context-scopes ctx_213))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_215)"
"(root-expand-context-post-expansion-scope the-struct_215)"
"(root-expand-context-top-level-bind-scope the-struct_215)"
"(root-expand-context-all-scopes-stx the-struct_215)"
"(root-expand-context-use-site-scopes the-struct_215)"
"(root-expand-context-defined-syms the-struct_215)"
"(root-expand-context-frame-id the-struct_215)"
"(root-expand-context-counter the-struct_215)"
"(root-expand-context-lift-key the-struct_215)"
"(expand-context-context the-struct_215)"
"(expand-context-phase the-struct_215)"
"(expand-context-namespace the-struct_215)"
"(expand-context-env the-struct_215)"
"(expand-context-post-expansion-scope-action the-struct_215)"
" scopes135_216"
"(expand-context-def-ctx-scopes the-struct_215)"
"(expand-context-reference-records the-struct_215)"
"(expand-context-only-immediate? the-struct_215)"
"(expand-context-just-once? the-struct_215)"
"(expand-context-module-begin-k the-struct_215)"
"(expand-context-need-eventually-defined the-struct_215)"
"(expand-context-allow-unbound? the-struct_215)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_215)"
"(expand-context-stops the-struct_215)"
"(expand-context-current-introduction-scopes the-struct_215)"
"(expand-context-declared-submodule-names the-struct_215)"
"(expand-context-lifts the-struct_215)"
"(expand-context-lift-envs the-struct_215)"
"(expand-context-module-lifts the-struct_215)"
"(expand-context-require-lifts the-struct_215)"
"(expand-context-to-module-lifts the-struct_215)"
"(expand-context-requires+provides the-struct_215)"
"(expand-context-name the-struct_215)"
"(expand-context-observer the-struct_215)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_215))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_217"
" in10_218"
" out-of-context-as-variable?9_219"
" out-of-context-as-variable?11_220"
" b12_221"
" ctx13_222"
" id14_223)"
"(let-values(((b_224) b12_221))"
"(let-values(((ctx_225) ctx13_222))"
"(let-values(((id_226) id14_223))"
"(let-values(((in-s_227)(if in10_218 in8_217 '#f)))"
"(let-values(((out-of-context-as-variable?_228)"
"(if out-of-context-as-variable?11_220 out-of-context-as-variable?9_219 '#f)))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:363:2_229) binding-lookup48.1)"
"((b136_230) b_224)"
"((temp137_231)(expand-context-env ctx_225))"
"((temp138_232)(expand-context-lift-envs ctx_225))"
"((temp139_233)(expand-context-namespace ctx_225))"
"((temp140_234)(expand-context-phase ctx_225))"
"((id141_235) id_226)"
"((in-s142_236) in-s_227)"
"((out-of-context-as-variable?143_237) out-of-context-as-variable?_228))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup48.1))"
"(binding-lookup46.1"
" in-s142_236"
" '#t"
" out-of-context-as-variable?143_237"
" '#t"
" b136_230"
" temp137_231"
" temp138_232"
" temp139_233"
" temp140_234"
" id141_235)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:363:2_229"
" keyword-procedure-extract"
" '(#:in #:out-of-context-as-variable?)"
" '8)"
" '(#:in #:out-of-context-as-variable?)"
"(list in-s142_236 out-of-context-as-variable?143_237)"
" b136_230"
" temp137_231"
" temp138_232"
" temp139_233"
" temp140_234"
" id141_235)))))))))))"
"(define-values"
"(unpack16.1)"
"(lambda(given-kws_238 given-args_239 b12_240 ctx13_241 id14_242)"
"(let-values(((in10_243)(if(pair? given-kws_238)(eq? '#:in(car given-kws_238)) '#f)))"
"(let-values(((in8_244)(if in10_243(car given-args_239)(void)))"
"((given-kws_245)(if in10_243(cdr given-kws_238) given-kws_238))"
"((given-args_246)(if in10_243(cdr given-args_239) given-args_239)))"
"(let-values(((out-of-context-as-variable?11_247)(pair? given-kws_245)))"
"(let-values(((out-of-context-as-variable?9_248)"
"(if out-of-context-as-variable?11_247(car given-args_246)(void))))"
"(lookup15.1"
" in8_244"
" in10_243"
" out-of-context-as-variable?9_248"
" out-of-context-as-variable?11_247"
" b12_240"
" ctx13_241"
" id14_242)))))))"
"(define-values"
"(lookup17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_249 given-argc_250)"
"(if(= given-argc_250 '5)"
"(let-values(((l1_251) given-kws_249))"
"(let-values(((l1_252)(if(null? l1_251) l1_251(if(eq?(car l1_251) '#:in)(cdr l1_251) l1_251))))"
"(let-values(((l1_253) l1_252))"
"(let-values(((l1_254)"
"(if(null? l1_253)"
" l1_253"
"(if(eq?(car l1_253) '#:out-of-context-as-variable?)(cdr l1_253) l1_253))))"
"(null? l1_254)))))"
" '#f))"
"(case-lambda"
"((given-kws_255 given-args_256 b_257 ctx_258 id_259)"
"(unpack16.1 given-kws_255 given-args_256 b_257 ctx_258 id_259)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((lookup_260)(case-lambda((b_261 ctx_262 id_263)(unpack16.1 null null b_261 ctx_262 id_263)))))"
" lookup_260)))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_264 alternate-id_265)"
"(if(not alternate-id_265)"
"(let-values() s_264)"
"(if(identifier? s_264)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_265 s_264) s_264))"
"(let-values()"
"(let-values(((disarmed-s_266)(syntax-disarm$1 s_264)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$2 disarmed-s_266(cons alternate-id_265(cdr(syntax-e$1 disarmed-s_266))) s_264)"
" s_264)"
" s_264)))))))"
"(define-values"
"(lifted/21.1)"
"(make-required"
" 'expand-body"
"(case-lambda((self_267 bodys_268 ctx_269)(apply missing-kw self_267 bodys_268 ctx_269 null)))"
" '#f"
" '#f))"
"(define-values"
"(expand-body28.1)"
"(lambda(disarmed-source19_270"
" source18_271"
" stratified?20_272"
" stratified?24_273"
" track?21_274"
" track?25_275"
" bodys26_276"
" ctx27_277)"
"(let-values(((bodys_278) bodys26_276))"
"(let-values(((ctx_279) ctx27_277))"
"(let-values(((s_280) source18_271))"
"(let-values(((disarmed-s_281) disarmed-source19_270))"
"(let-values(((stratified?_282)(if stratified?24_273 stratified?20_272 '#f)))"
"(let-values(((track?_283)(if track?25_275 track?21_274 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_290)(expand-context-observer ctx_279)))"
"(if obs_290"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_290 'enter-block))(void)))"
"(void)))"
"(values))))"
"(let-values(((outside-sc_284)(new-scope 'local)))"
"(let-values(((inside-sc_285)(new-scope 'intdef)))"
"(let-values(((init-bodys_286)"
"(alt-reverse"
"(let-values(((lst_291) bodys_278))"
"(begin"
"(if(list? lst_291)(void)(let-values()(in-list lst_291)))"
"((letrec-values(((for-loop_292)"
"(lambda(fold-var_293 lst_294)"
"(if(pair? lst_294)"
"(let-values(((body_295)(unsafe-car lst_294)))"
"(if '#t"
"(let-values(((fold-var_296)"
"(let-values(((fold-var_297)"
" fold-var_293))"
"(let-values(((fold-var_298)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(add-scope"
" body_295"
" outside-sc_284)"
" inside-sc_285))"
" fold-var_297))))"
"(values fold-var_298)))))"
"(if '#t"
"(for-loop_292"
" fold-var_296"
"(unsafe-cdr lst_294))"
" fold-var_296))"
" fold-var_293))"
" fold-var_293))))"
" for-loop_292)"
" null"
" lst_291))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_299)(expand-context-observer ctx_279)))"
"(if obs_299"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_299"
" 'block-renames"
"(datum->syntax$2 '#f init-bodys_286)"
"(datum->syntax$2 '#f bodys_278)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_287)(expand-context-phase ctx_279)))"
"(let-values(((frame-id_288)(make-reference-record)))"
"(let-values(((body-ctx_289)"
"(let-values(((the-struct_300) ctx_279))"
"(if(expand-context? the-struct_300)"
"(let-values(((context144_301)(list(make-liberal-define-context)))"
"((only-immediate?145_302) '#t)"
"((post-expansion-scope146_303) inside-sc_285)"
"((post-expansion-scope-action147_304) add-scope)"
"((scopes148_305)"
"(list*"
" outside-sc_284"
" inside-sc_285"
"(expand-context-scopes ctx_279)))"
"((use-site-scopes149_306)(box null))"
"((frame-id150_307) frame-id_288)"
"((reference-records151_308)"
"(cons"
" frame-id_288"
"(expand-context-reference-records ctx_279)))"
"((all-scopes-stx152_309)"
"(add-scope"
"(add-scope"
"(root-expand-context-all-scopes-stx ctx_279)"
" outside-sc_284)"
" inside-sc_285)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_300)"
" post-expansion-scope146_303"
"(root-expand-context-top-level-bind-scope the-struct_300)"
" all-scopes-stx152_309"
" use-site-scopes149_306"
"(root-expand-context-defined-syms the-struct_300)"
" frame-id150_307"
"(root-expand-context-counter the-struct_300)"
"(root-expand-context-lift-key the-struct_300)"
" context144_301"
"(expand-context-phase the-struct_300)"
"(expand-context-namespace the-struct_300)"
"(expand-context-env the-struct_300)"
" post-expansion-scope-action147_304"
" scopes148_305"
"(expand-context-def-ctx-scopes the-struct_300)"
" reference-records151_308"
" only-immediate?145_302"
"(expand-context-just-once? the-struct_300)"
"(expand-context-module-begin-k the-struct_300)"
"(expand-context-need-eventually-defined the-struct_300)"
"(expand-context-allow-unbound? the-struct_300)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_300)"
"(expand-context-stops the-struct_300)"
"(expand-context-current-introduction-scopes the-struct_300)"
"(expand-context-declared-submodule-names the-struct_300)"
"(expand-context-lifts the-struct_300)"
"(expand-context-lift-envs the-struct_300)"
"(expand-context-module-lifts the-struct_300)"
"(expand-context-require-lifts the-struct_300)"
"(expand-context-to-module-lifts the-struct_300)"
"(expand-context-requires+provides the-struct_300)"
"(expand-context-name the-struct_300)"
"(expand-context-observer the-struct_300)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_300)))))"
"((letrec-values(((loop_310)"
"(lambda(body-ctx_311"
" bodys_312"
" done-bodys_313"
" val-idss_314"
" val-keyss_315"
" val-rhss_316"
" track-stxs_317"
" trans-idss_318"
" dups_319)"
"(if(null? bodys_312)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_321)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_321"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_321"
"(if(null? val-idss_314)"
" 'block->list"
" 'block->letrec)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_320)"
"(let-values(((...nder/expand/main.rkt:453:8_322)"
" finish-expanding-body48.1)"
"((body-ctx153_323) body-ctx_311)"
"((frame-id154_324) frame-id_288)"
"((temp155_325)"
"(alt-reverse val-idss_314))"
"((temp156_326)"
"(alt-reverse val-keyss_315))"
"((temp157_327)"
"(alt-reverse val-rhss_316))"
"((temp158_328)"
"(alt-reverse track-stxs_317))"
"((temp159_329)"
"(alt-reverse done-bodys_313))"
"((s160_330) s_280)"
"((disarmed-s161_331)"
" disarmed-s_281)"
"((stratified?162_332)"
" stratified?_282)"
"((track?163_333) track?_283))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body48.1))"
"(finish-expanding-body46.1"
" disarmed-s161_331"
" s160_330"
" stratified?162_332"
" track?163_333"
" body-ctx153_323"
" frame-id154_324"
" temp155_325"
" temp156_326"
" temp157_327"
" temp158_328"
" temp159_329)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:453:8_322"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source"
" #:stratified?"
" #:track?)"
" '9)"
" '(#:disarmed-source"
" #:source"
" #:stratified?"
" #:track?)"
"(list"
" disarmed-s161_331"
" s160_330"
" stratified?162_332"
" track?163_333)"
" body-ctx153_323"
" frame-id154_324"
" temp155_325"
" temp156_326"
" temp157_327"
" temp158_328"
" temp159_329)))))"
"(attach-disappeared-transformer-bindings"
" result-s_320"
"(alt-reverse trans-idss_318)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_336)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_336"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_336 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_334)"
"(let-values(((temp164_337)"
"(syntax-disarm$1"
"(car bodys_312)))"
"((body-ctx165_338) body-ctx_311))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" temp164_337"
" body-ctx165_338)"
"(expand7.1"
" temp164_337"
" body-ctx165_338)))))"
"(let-values(((disarmed-exp-body_335)"
"(syntax-disarm$1 exp-body_334)))"
"(let-values(((tmp_339)"
"(core-form-sym"
" disarmed-exp-body_335"
" phase_287)))"
"(if(equal? tmp_339 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_343)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_343"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_343"
" 'prim-begin))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((m_340)"
"(match-syntax"
" disarmed-exp-body_335"
" '(begin e ...))))"
"(let-values(((track_341)"
"(lambda(e_344)"
"(syntax-track-origin$1"
" e_344"
" exp-body_334))))"
"(let-values(((splice-bodys_342)"
"(append"
"(map2 track_341(m_340 'e))"
"(cdr bodys_312))))"
"(begin"
"(let-values(((obs_345)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_345"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_345"
" 'splice"
" splice-bodys_342))"
"(void)))"
"(void)))"
"(loop_310"
" body-ctx_311"
" splice-bodys_342"
" done-bodys_313"
" val-idss_314"
" val-keyss_315"
" val-rhss_316"
" track-stxs_317"
" trans-idss_318"
" dups_319)))))))"
"(if(equal? tmp_339 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_352)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_352"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_352"
" 'prim-define-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((m_346)"
"(match-syntax"
" disarmed-exp-body_335"
" '(define-values"
"(id ...)"
" rhs))))"
"(let-values(((ids_347)"
"(remove-use-site-scopes"
"(m_346 'id)"
" body-ctx_311)))"
"(let-values((()"
"(begin"
"(let-values(((obs_353)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_353"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_353"
" 'rename-one"
"(datum->syntax$2"
" '#f"
"(list"
" ids_347"
"(m_346"
" 'rhs)))))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((new-dups_348)"
"(let-values(((ids166_354)"
" ids_347)"
"((phase167_355)"
" phase_287)"
"((exp-body168_356)"
" exp-body_334)"
"((dups169_357)"
" dups_319))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" '#f"
" '#f"
" ids166_354"
" phase167_355"
" exp-body168_356"
" dups169_357"
" '#t)"
"(check-no-duplicate-ids10.1"
" ids166_354"
" phase167_355"
" exp-body168_356"
" dups169_357)))))"
"(let-values(((counter_349)"
"(root-expand-context-counter"
" ctx_279)))"
"(let-values(((keys_350)"
"(alt-reverse"
"(let-values(((lst_358)"
" ids_347))"
"(begin"
"(if(list?"
" lst_358)"
"(void)"
"(let-values()"
"(in-list"
" lst_358)))"
"((letrec-values(((for-loop_359)"
"(lambda(fold-var_360"
" lst_361)"
"(if(pair?"
" lst_361)"
"(let-values(((id_362)"
"(unsafe-car"
" lst_361)))"
"(if '#t"
"(let-values(((fold-var_363)"
"(let-values(((fold-var_364)"
" fold-var_360))"
"(let-values(((fold-var_365)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:491:24_366)"
" add-local-binding!35.1)"
"((id170_367)"
" id_362)"
"((phase171_368)"
" phase_287)"
"((counter172_369)"
" counter_349)"
"((frame-id173_370)"
" frame-id_288)"
"((exp-body174_371)"
" exp-body_334))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id173_370"
" '#t"
" exp-body174_371"
" '#t"
" id170_367"
" phase171_368"
" counter172_369)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:491:24_366"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" '5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id173_370"
" exp-body174_371)"
" id170_367"
" phase171_368"
" counter172_369))))"
" fold-var_364))))"
"(values"
" fold-var_365)))))"
"(if '#t"
"(for-loop_359"
" fold-var_363"
"(unsafe-cdr"
" lst_361))"
" fold-var_363))"
" fold-var_360))"
" fold-var_360))))"
" for-loop_359)"
" null"
" lst_358))))))"
"(let-values(((extended-env_351)"
"(let-values(((lst_372)"
" keys_350)"
"((lst_373)"
" ids_347))"
"(begin"
"(if(list?"
" lst_372)"
"(void)"
"(let-values()"
"(in-list"
" lst_372)))"
"(if(list?"
" lst_373)"
"(void)"
"(let-values()"
"(in-list"
" lst_373)))"
"((letrec-values(((for-loop_374)"
"(lambda(env_375"
" lst_376"
" lst_377)"
"(if(if(pair?"
" lst_376)"
"(pair?"
" lst_377)"
" '#f)"
"(let-values(((key_378)"
"(unsafe-car"
" lst_376))"
"((id_379)"
"(unsafe-car"
" lst_377)))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((env_380)"
"(let-values(((env_381)"
" env_375))"
"(let-values(((env_382)"
"(let-values()"
"(env-extend"
" env_381"
" key_378"
"(local-variable1.1"
" id_379)))))"
"(values"
" env_382)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_374"
" env_380"
"(unsafe-cdr"
" lst_376)"
"(unsafe-cdr"
" lst_377))"
" env_380))"
" env_375))"
" env_375))))"
" for-loop_374)"
"(expand-context-env"
" body-ctx_311)"
" lst_372"
" lst_373)))))"
"(loop_310"
"(let-values(((the-struct_383)"
" body-ctx_311))"
"(if(expand-context?"
" the-struct_383)"
"(let-values(((env175_384)"
" extended-env_351))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_383)"
"(root-expand-context-post-expansion-scope"
" the-struct_383)"
"(root-expand-context-top-level-bind-scope"
" the-struct_383)"
"(root-expand-context-all-scopes-stx"
" the-struct_383)"
"(root-expand-context-use-site-scopes"
" the-struct_383)"
"(root-expand-context-defined-syms"
" the-struct_383)"
"(root-expand-context-frame-id"
" the-struct_383)"
"(root-expand-context-counter"
" the-struct_383)"
"(root-expand-context-lift-key"
" the-struct_383)"
"(expand-context-context"
" the-struct_383)"
"(expand-context-phase"
" the-struct_383)"
"(expand-context-namespace"
" the-struct_383)"
" env175_384"
"(expand-context-post-expansion-scope-action"
" the-struct_383)"
"(expand-context-scopes"
" the-struct_383)"
"(expand-context-def-ctx-scopes"
" the-struct_383)"
"(expand-context-reference-records"
" the-struct_383)"
"(expand-context-only-immediate?"
" the-struct_383)"
"(expand-context-just-once?"
" the-struct_383)"
"(expand-context-module-begin-k"
" the-struct_383)"
"(expand-context-need-eventually-defined"
" the-struct_383)"
"(expand-context-allow-unbound?"
" the-struct_383)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_383)"
"(expand-context-stops"
" the-struct_383)"
"(expand-context-current-introduction-scopes"
" the-struct_383)"
"(expand-context-declared-submodule-names"
" the-struct_383)"
"(expand-context-lifts"
" the-struct_383)"
"(expand-context-lift-envs"
" the-struct_383)"
"(expand-context-module-lifts"
" the-struct_383)"
"(expand-context-require-lifts"
" the-struct_383)"
"(expand-context-to-module-lifts"
" the-struct_383)"
"(expand-context-requires+provides"
" the-struct_383)"
"(expand-context-name"
" the-struct_383)"
"(expand-context-observer"
" the-struct_383)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_383)))"
"(cdr bodys_312)"
" null"
"(cons"
" ids_347"
"(append"
"(alt-reverse"
"(let-values(((lst_385)"
" done-bodys_313))"
"(begin"
"(if(list? lst_385)"
"(void)"
"(let-values()"
"(in-list lst_385)))"
"((letrec-values(((for-loop_386)"
"(lambda(fold-var_387"
" lst_388)"
"(if(pair?"
" lst_388)"
"(let-values(((done-body_389)"
"(unsafe-car"
" lst_388)))"
"(if '#t"
"(let-values(((fold-var_390)"
"(let-values(((fold-var_391)"
" fold-var_387))"
"(let-values(((fold-var_392)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_391))))"
"(values"
" fold-var_392)))))"
"(if '#t"
"(for-loop_386"
" fold-var_390"
"(unsafe-cdr"
" lst_388))"
" fold-var_390))"
" fold-var_387))"
" fold-var_387))))"
" for-loop_386)"
" null"
" lst_385))))"
" val-idss_314))"
"(cons"
" keys_350"
"(append"
"(alt-reverse"
"(let-values(((lst_393)"
" done-bodys_313))"
"(begin"
"(if(list? lst_393)"
"(void)"
"(let-values()"
"(in-list lst_393)))"
"((letrec-values(((for-loop_394)"
"(lambda(fold-var_395"
" lst_396)"
"(if(pair?"
" lst_396)"
"(let-values(((done-body_397)"
"(unsafe-car"
" lst_396)))"
"(if '#t"
"(let-values(((fold-var_398)"
"(let-values(((fold-var_399)"
" fold-var_395))"
"(let-values(((fold-var_400)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_399))))"
"(values"
" fold-var_400)))))"
"(if '#t"
"(for-loop_394"
" fold-var_398"
"(unsafe-cdr"
" lst_396))"
" fold-var_398))"
" fold-var_395))"
" fold-var_395))))"
" for-loop_394)"
" null"
" lst_393))))"
" val-keyss_315))"
"(cons"
"(m_346 'rhs)"
"(append"
"(alt-reverse"
"(let-values(((lst_401)"
" done-bodys_313))"
"(begin"
"(if(list? lst_401)"
"(void)"
"(let-values()"
"(in-list lst_401)))"
"((letrec-values(((for-loop_402)"
"(lambda(fold-var_403"
" lst_404)"
"(if(pair?"
" lst_404)"
"(let-values(((done-body_405)"
"(unsafe-car"
" lst_404)))"
"(if '#t"
"(let-values(((fold-var_406)"
"(let-values(((fold-var_407)"
" fold-var_403))"
"(let-values(((fold-var_408)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_405"
" s_280"
" phase_287))"
" fold-var_407))))"
"(values"
" fold-var_408)))))"
"(if '#t"
"(for-loop_402"
" fold-var_406"
"(unsafe-cdr"
" lst_404))"
" fold-var_406))"
" fold-var_403))"
" fold-var_403))))"
" for-loop_402)"
" null"
" lst_401))))"
" val-rhss_316))"
"(cons"
" exp-body_334"
"(append"
"(alt-reverse"
"(let-values(((lst_409)"
" done-bodys_313))"
"(begin"
"(if(list? lst_409)"
"(void)"
"(let-values()"
"(in-list lst_409)))"
"((letrec-values(((for-loop_410)"
"(lambda(fold-var_411"
" lst_412)"
"(if(pair?"
" lst_412)"
"(let-values(((done-body_413)"
"(unsafe-car"
" lst_412)))"
"(if '#t"
"(let-values(((fold-var_414)"
"(let-values(((fold-var_415)"
" fold-var_411))"
"(let-values(((fold-var_416)"
"(let-values()"
"(cons"
"(let-values()"
" '#f)"
" fold-var_415))))"
"(values"
" fold-var_416)))))"
"(if '#t"
"(for-loop_410"
" fold-var_414"
"(unsafe-cdr"
" lst_412))"
" fold-var_414))"
" fold-var_411))"
" fold-var_411))))"
" for-loop_410)"
" null"
" lst_409))))"
" track-stxs_317))"
" trans-idss_318"
" new-dups_348))))))))))"
"(if(equal? tmp_339 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_424)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_424"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_424"
" 'prim-define-syntaxes))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((m_417)"
"(match-syntax"
" disarmed-exp-body_335"
" '(define-syntaxes"
"(id ...)"
" rhs))))"
"(let-values(((ids_418)"
"(remove-use-site-scopes"
"(m_417 'id)"
" body-ctx_311)))"
"(let-values((()"
"(begin"
"(let-values(((obs_425)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_425"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_425"
" 'rename-one"
"(datum->syntax$2"
" '#f"
"(list"
" ids_418"
"(m_417"
" 'rhs)))))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((new-dups_419)"
"(let-values(((ids176_426)"
" ids_418)"
"((phase177_427)"
" phase_287)"
"((exp-body178_428)"
" exp-body_334)"
"((dups179_429)"
" dups_319))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" '#f"
" '#f"
" ids176_426"
" phase177_427"
" exp-body178_428"
" dups179_429"
" '#t)"
"(check-no-duplicate-ids10.1"
" ids176_426"
" phase177_427"
" exp-body178_428"
" dups179_429)))))"
"(let-values(((counter_420)"
"(root-expand-context-counter"
" ctx_279)))"
"(let-values(((keys_421)"
"(alt-reverse"
"(let-values(((lst_430)"
" ids_418))"
"(begin"
"(if(list?"
" lst_430)"
"(void)"
"(let-values()"
"(in-list"
" lst_430)))"
"((letrec-values(((for-loop_431)"
"(lambda(fold-var_432"
" lst_433)"
"(if(pair?"
" lst_433)"
"(let-values(((id_434)"
"(unsafe-car"
" lst_433)))"
"(if '#t"
"(let-values(((fold-var_435)"
"(let-values(((fold-var_436)"
" fold-var_432))"
"(let-values(((fold-var_437)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:533:24_438)"
" add-local-binding!35.1)"
"((id180_439)"
" id_434)"
"((phase181_440)"
" phase_287)"
"((counter182_441)"
" counter_420)"
"((frame-id183_442)"
" frame-id_288)"
"((exp-body184_443)"
" exp-body_334))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id183_442"
" '#t"
" exp-body184_443"
" '#t"
" id180_439"
" phase181_440"
" counter182_441)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:533:24_438"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" '5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id183_442"
" exp-body184_443)"
" id180_439"
" phase181_440"
" counter182_441))))"
" fold-var_436))))"
"(values"
" fold-var_437)))))"
"(if '#t"
"(for-loop_431"
" fold-var_435"
"(unsafe-cdr"
" lst_433))"
" fold-var_435))"
" fold-var_432))"
" fold-var_432))))"
" for-loop_431)"
" null"
" lst_430))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_444)"
"(expand-context-observer"
" body-ctx_311)))"
"(if obs_444"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_444"
" 'prepare-env))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((vals_422)"
"(eval-for-syntaxes-binding"
"(m_417 'rhs)"
" ids_418"
" ctx_279)))"
"(let-values(((extended-env_423)"
"(let-values(((lst_445)"
" keys_421)"
"((lst_446)"
" vals_422)"
"((lst_447)"
" ids_418))"
"(begin"
"(if(list?"
" lst_445)"
"(void)"
"(let-values()"
"(in-list"
" lst_445)))"
"(if(list?"
" lst_446)"
"(void)"
"(let-values()"
"(in-list"
" lst_446)))"
"(if(list?"
" lst_447)"
"(void)"
"(let-values()"
"(in-list"
" lst_447)))"
"((letrec-values(((for-loop_448)"
"(lambda(env_449"
" lst_450"
" lst_451"
" lst_452)"
"(if(if(pair?"
" lst_450)"
"(if(pair?"
" lst_451)"
"(pair?"
" lst_452)"
" '#f)"
" '#f)"
"(let-values(((key_453)"
"(unsafe-car"
" lst_450))"
"((val_454)"
"(unsafe-car"
" lst_451))"
"((id_455)"
"(unsafe-car"
" lst_452)))"
"(if(if '#t"
"(if '#t"
" '#t"
" '#f)"
" '#f)"
"(let-values(((env_456)"
"(let-values(((env_457)"
" env_449))"
"(let-values(((env_458)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_454"
" id_455"
" phase_287)"
"(env-extend"
" env_457"
" key_453"
" val_454)))))"
"(values"
" env_458)))))"
"(if(if '#t"
"(if '#t"
" '#t"
" '#f)"
" '#f)"
"(for-loop_448"
" env_456"
"(unsafe-cdr"
" lst_450)"
"(unsafe-cdr"
" lst_451)"
"(unsafe-cdr"
" lst_452))"
" env_456))"
" env_449))"
" env_449))))"
" for-loop_448)"
"(expand-context-env"
" body-ctx_311)"
" lst_445"
" lst_446"
" lst_447)))))"
"(loop_310"
"(let-values(((the-struct_459)"
" body-ctx_311))"
"(if(expand-context?"
" the-struct_459)"
"(let-values(((env185_460)"
" extended-env_423))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_459)"
"(root-expand-context-post-expansion-scope"
" the-struct_459)"
"(root-expand-context-top-level-bind-scope"
" the-struct_459)"
"(root-expand-context-all-scopes-stx"
" the-struct_459)"
"(root-expand-context-use-site-scopes"
" the-struct_459)"
"(root-expand-context-defined-syms"
" the-struct_459)"
"(root-expand-context-frame-id"
" the-struct_459)"
"(root-expand-context-counter"
" the-struct_459)"
"(root-expand-context-lift-key"
" the-struct_459)"
"(expand-context-context"
" the-struct_459)"
"(expand-context-phase"
" the-struct_459)"
"(expand-context-namespace"
" the-struct_459)"
" env185_460"
"(expand-context-post-expansion-scope-action"
" the-struct_459)"
"(expand-context-scopes"
" the-struct_459)"
"(expand-context-def-ctx-scopes"
" the-struct_459)"
"(expand-context-reference-records"
" the-struct_459)"
"(expand-context-only-immediate?"
" the-struct_459)"
"(expand-context-just-once?"
" the-struct_459)"
"(expand-context-module-begin-k"
" the-struct_459)"
"(expand-context-need-eventually-defined"
" the-struct_459)"
"(expand-context-allow-unbound?"
" the-struct_459)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_459)"
"(expand-context-stops"
" the-struct_459)"
"(expand-context-current-introduction-scopes"
" the-struct_459)"
"(expand-context-declared-submodule-names"
" the-struct_459)"
"(expand-context-lifts"
" the-struct_459)"
"(expand-context-lift-envs"
" the-struct_459)"
"(expand-context-module-lifts"
" the-struct_459)"
"(expand-context-require-lifts"
" the-struct_459)"
"(expand-context-to-module-lifts"
" the-struct_459)"
"(expand-context-requires+provides"
" the-struct_459)"
"(expand-context-name"
" the-struct_459)"
"(expand-context-observer"
" the-struct_459)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_459)))"
"(cdr bodys_312)"
" done-bodys_313"
" val-idss_314"
" val-keyss_315"
" val-rhss_316"
" track-stxs_317"
"(cons"
" ids_418"
" trans-idss_318)"
" new-dups_419))))))))))))"
"(let-values()"
"(if stratified?_282"
"(let-values()"
"(loop_310"
" body-ctx_311"
" null"
"(append"
"(alt-reverse bodys_312)"
"(cons exp-body_334 done-bodys_313))"
" val-idss_314"
" val-keyss_315"
" val-rhss_316"
" track-stxs_317"
" trans-idss_318"
" dups_319))"
"(let-values()"
"(loop_310"
" body-ctx_311"
"(cdr bodys_312)"
"(cons exp-body_334 done-bodys_313)"
" val-idss_314"
" val-keyss_315"
" val-rhss_316"
" track-stxs_317"
" trans-idss_318"
" dups_319))))))))))))))))"
" loop_310)"
" body-ctx_289"
" init-bodys_286"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))"
"(define-values"
"(unpack29.1)"
"(lambda(given-kws_461 given-args_462 bodys26_463 ctx27_464)"
"(let-values(((disarmed-source19_465)(car given-args_462))"
"((given-kws_466)(cdr given-kws_461))"
"((given-args_467)(cdr given-args_462)))"
"(let-values(((source18_468)(car given-args_467))"
"((given-kws_469)(cdr given-kws_466))"
"((given-args_470)(cdr given-args_467)))"
"(let-values(((stratified?24_471)(if(pair? given-kws_469)(eq? '#:stratified?(car given-kws_469)) '#f)))"
"(let-values(((stratified?20_472)(if stratified?24_471(car given-args_470)(void)))"
"((given-kws_473)(if stratified?24_471(cdr given-kws_469) given-kws_469))"
"((given-args_474)(if stratified?24_471(cdr given-args_470) given-args_470)))"
"(let-values(((track?25_475)(pair? given-kws_473)))"
"(let-values(((track?21_476)(if track?25_475(car given-args_474)(void))))"
"(expand-body28.1"
" disarmed-source19_465"
" source18_468"
" stratified?20_472"
" stratified?24_471"
" track?21_476"
" track?25_475"
" bodys26_463"
" ctx27_464)))))))))"
"(define-values"
"(expand-body30.1)"
"(lifted/21.1"
"(lambda(given-kws_477 given-argc_478)"
"(if(= given-argc_478 '4)"
"(subsets? '(#:disarmed-source #:source) given-kws_477 '(#:disarmed-source #:source #:stratified? #:track?))"
" '#f))"
"(case-lambda"
"((given-kws_479 given-args_480 bodys_481 ctx_482)(unpack29.1 given-kws_479 given-args_480 bodys_481 ctx_482)))"
" '(#:disarmed-source #:source)"
" '(#:disarmed-source #:source #:stratified? #:track?)))"
"(define-values"
"(lifted/22.1)"
"(make-required"
" 'finish-expanding-body"
"(case-lambda"
"((self_483 body-ctx_484 frame-id_485 val-idss_486 val-keyss_487 val-rhss_488 track-stxs_489 done-bodys_490)"
"(apply"
" missing-kw"
" self_483"
" body-ctx_484"
" frame-id_485"
" val-idss_486"
" val-keyss_487"
" val-rhss_488"
" track-stxs_489"
" done-bodys_490"
" null)))"
" '#f"
" '#f))"
"(define-values"
"(finish-expanding-body46.1)"
"(lambda(disarmed-source32_491"
" source31_492"
" stratified?33_493"
" track?34_494"
" body-ctx39_495"
" frame-id40_496"
" val-idss41_497"
" val-keyss42_498"
" val-rhss43_499"
" track-stxs44_500"
" done-bodys45_501)"
"(let-values(((body-ctx_502) body-ctx39_495))"
"(let-values(((frame-id_503) frame-id40_496))"
"(let-values(((val-idss_504) val-idss41_497))"
"(let-values(((val-keyss_505) val-keyss42_498))"
"(let-values(((val-rhss_506) val-rhss43_499))"
"(let-values(((track-stxs_507) track-stxs44_500))"
"(let-values(((done-bodys_508) done-bodys45_501))"
"(let-values(((s_509) source31_492))"
"(let-values(((disarmed-s_510) disarmed-source32_491))"
"(let-values(((stratified?_511) stratified?33_493))"
"(let-values(((track?_512) track?34_494))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_508)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"no expression after a sequence of internal definitions\""
" s_509))"
"(void))"
"(values))))"
"(let-values(((s-core-stx_513)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase body-ctx_502))))"
"(let-values(((finish-ctx_514)"
"(let-values(((the-struct_516) body-ctx_502))"
"(if(expand-context? the-struct_516)"
"(let-values(((context186_517) 'expression)"
"((use-site-scopes187_518) '#f)"
"((scopes188_519)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_502))"
"(expand-context-scopes body-ctx_502)))"
"((only-immediate?189_520) '#f)"
"((post-expansion-scope190_521) '#f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_516)"
" post-expansion-scope190_521"
"(root-expand-context-top-level-bind-scope the-struct_516)"
"(root-expand-context-all-scopes-stx the-struct_516)"
" use-site-scopes187_518"
"(root-expand-context-defined-syms the-struct_516)"
"(root-expand-context-frame-id the-struct_516)"
"(root-expand-context-counter the-struct_516)"
"(root-expand-context-lift-key the-struct_516)"
" context186_517"
"(expand-context-phase the-struct_516)"
"(expand-context-namespace the-struct_516)"
"(expand-context-env the-struct_516)"
"(expand-context-post-expansion-scope-action the-struct_516)"
" scopes188_519"
"(expand-context-def-ctx-scopes the-struct_516)"
"(expand-context-reference-records the-struct_516)"
" only-immediate?189_520"
"(expand-context-just-once? the-struct_516)"
"(expand-context-module-begin-k the-struct_516)"
"(expand-context-need-eventually-defined the-struct_516)"
"(expand-context-allow-unbound? the-struct_516)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_516)"
"(expand-context-stops the-struct_516)"
"(expand-context-current-introduction-scopes the-struct_516)"
"(expand-context-declared-submodule-names the-struct_516)"
"(expand-context-lifts the-struct_516)"
"(expand-context-lift-envs the-struct_516)"
"(expand-context-module-lifts the-struct_516)"
"(expand-context-require-lifts the-struct_516)"
"(expand-context-to-module-lifts the-struct_516)"
"(expand-context-requires+provides the-struct_516)"
"(expand-context-name the-struct_516)"
"(expand-context-observer the-struct_516)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_516)))))"
"(let-values(((finish-bodys_515)"
"(lambda(track?_522)"
"(let-values(((block->list?_523)(null? val-idss_504)))"
"(begin"
"(if block->list?_523"
"(void)"
"(let-values()"
"(let-values(((obs_524)"
"(expand-context-observer body-ctx_502)))"
"(if obs_524"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_524 'next-group))"
"(void)))"
"(void)))))"
"(if(null?(cdr done-bodys_508))"
"(let-values()"
"(let-values(((last-ctx_525)"
"(let-values(((the-struct_527) finish-ctx_514))"
"(if(expand-context? the-struct_527)"
"(let-values(((reference-records191_528)"
"(cdr"
"(expand-context-reference-records"
" finish-ctx_514))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_527)"
"(root-expand-context-post-expansion-scope"
" the-struct_527)"
"(root-expand-context-top-level-bind-scope"
" the-struct_527)"
"(root-expand-context-all-scopes-stx"
" the-struct_527)"
"(root-expand-context-use-site-scopes"
" the-struct_527)"
"(root-expand-context-defined-syms"
" the-struct_527)"
"(root-expand-context-frame-id"
" the-struct_527)"
"(root-expand-context-counter"
" the-struct_527)"
"(root-expand-context-lift-key"
" the-struct_527)"
"(expand-context-context the-struct_527)"
"(expand-context-phase the-struct_527)"
"(expand-context-namespace the-struct_527)"
"(expand-context-env the-struct_527)"
"(expand-context-post-expansion-scope-action"
" the-struct_527)"
"(expand-context-scopes the-struct_527)"
"(expand-context-def-ctx-scopes"
" the-struct_527)"
" reference-records191_528"
"(expand-context-only-immediate?"
" the-struct_527)"
"(expand-context-just-once?"
" the-struct_527)"
"(expand-context-module-begin-k"
" the-struct_527)"
"(expand-context-need-eventually-defined"
" the-struct_527)"
"(expand-context-allow-unbound?"
" the-struct_527)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_527)"
"(expand-context-stops the-struct_527)"
"(expand-context-current-introduction-scopes"
" the-struct_527)"
"(expand-context-declared-submodule-names"
" the-struct_527)"
"(expand-context-lifts the-struct_527)"
"(expand-context-lift-envs the-struct_527)"
"(expand-context-module-lifts"
" the-struct_527)"
"(expand-context-require-lifts"
" the-struct_527)"
"(expand-context-to-module-lifts"
" the-struct_527)"
"(expand-context-requires+provides"
" the-struct_527)"
"(expand-context-name the-struct_527)"
"(expand-context-observer"
" the-struct_527)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_527)))))"
"(let-values(((exp-body_526)"
"(let-values(((temp192_529)"
"(car done-bodys_508))"
"((last-ctx193_530) last-ctx_525))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" temp192_529"
" last-ctx193_530)"
"(expand7.1"
" temp192_529"
" last-ctx193_530)))))"
"(if track?_522"
"(let-values(((result-s_531)"
"(syntax-track-origin$1"
" exp-body_526"
" s_509)))"
"(begin"
"(let-values(((obs_532)"
"(expand-context-observer"
" body-ctx_502)))"
"(if obs_532"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_532"
" 'tag"
" result-s_531))"
"(void)))"
"(void)))"
" result-s_531))"
" exp-body_526))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if block->list?_523"
"(void)"
"(let-values()"
"(let-values(((obs_534)"
"(expand-context-observer"
" body-ctx_502)))"
"(if obs_534"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_534"
" 'prim-begin))"
"(void)))"
"(void)))))"
"(values))))"
"(letrec-values((()"
"(begin"
"(let-values(((obs_535)"
"(expand-context-observer"
" body-ctx_502)))"
"(if obs_535"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_535"
" 'enter-list"
" exp-bodys_533))"
"(void)))"
"(void)))"
"(values)))"
"((exp-bodys_533)"
"(alt-reverse"
"(let-values(((lst_536) done-bodys_508))"
"(begin"
"(if(list? lst_536)"
"(void)"
"(let-values()(in-list lst_536)))"
"((letrec-values(((for-loop_537)"
"(lambda(fold-var_538"
" lst_539)"
"(if(pair?"
" lst_539)"
"(let-values(((body_540)"
"(unsafe-car"
" lst_539)))"
"(if '#t"
"(let-values(((fold-var_541)"
"(let-values(((fold-var_542)"
" fold-var_538))"
"(let-values(((fold-var_543)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_544)"
"(expand-context-observer"
" body-ctx_502)))"
"(if obs_544"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_544"
" 'next))"
"(void)))"
"(void)))"
"(let-values(((body198_545)"
" body_540)"
"((finish-ctx199_546)"
" finish-ctx_514))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" body198_545"
" finish-ctx199_546)"
"(expand7.1"
" body198_545"
" finish-ctx199_546)))))"
" fold-var_542))))"
"(values"
" fold-var_543)))))"
"(if '#t"
"(for-loop_537"
" fold-var_541"
"(unsafe-cdr"
" lst_539))"
" fold-var_541))"
" fold-var_538))"
" fold-var_538))))"
" for-loop_537)"
" null"
" lst_536))))))"
"(begin"
"(let-values(((obs_547)"
"(expand-context-observer body-ctx_502)))"
"(if obs_547"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_547"
" 'exit-list"
" exp-bodys_533))"
"(void)))"
"(void)))"
"(let-values(((...nder/expand/main.rkt:619:6_548)"
" rebuild101.1)"
"((track?194_549) track?_522)"
"((s195_550) s_509)"
"((disarmed-s196_551) disarmed-s_510)"
"((temp197_552)"
"(list*"
"(datum->syntax$2 s-core-stx_513 'begin)"
" exp-bodys_533)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?194_549"
" '#t"
" s195_550"
" disarmed-s196_551"
" temp197_552)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:619:6_548"
" keyword-procedure-extract"
" '(#:track?)"
" '5)"
" '(#:track?)"
"(list track?194_549)"
" s195_550"
" disarmed-s196_551"
" temp197_552)))))))))))))"
"(if(null? val-idss_504)"
"(let-values()(finish-bodys_515 track?_512))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:631:4_553)"
" expand-and-split-bindings-by-reference69.1)"
"((val-idss200_554) val-idss_504)"
"((val-keyss201_555) val-keyss_505)"
"((val-rhss202_556) val-rhss_506)"
"((track-stxs203_557) track-stxs_507)"
"((temp204_558)(not stratified?_511))"
"((frame-id205_559) frame-id_503)"
"((finish-ctx206_560) finish-ctx_514)"
"((s207_561) s_509)"
"((disarmed-s208_562) disarmed-s_510)"
"((finish-bodys209_563) finish-bodys_515)"
"((track?210_564) track?_512))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-and-split-bindings-by-reference69.1))"
"(expand-and-split-bindings-by-reference67.1"
" finish-ctx206_560"
" disarmed-s208_562"
" frame-id205_559"
" finish-bodys209_563"
" s207_561"
" temp204_558"
" track?210_564"
" val-idss200_554"
" val-keyss201_555"
" val-rhss202_556"
" track-stxs203_557)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:631:4_553"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" '6)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
"(list"
" finish-ctx206_560"
" disarmed-s208_562"
" frame-id205_559"
" finish-bodys209_563"
" s207_561"
" temp204_558"
" track?210_564)"
" val-idss200_554"
" val-keyss201_555"
" val-rhss202_556"
" track-stxs203_557)))))))))))))))))))))))"
"(define-values"
"(unpack47.1$3)"
"(lambda(given-kws_565"
" given-args_566"
" body-ctx39_567"
" frame-id40_568"
" val-idss41_569"
" val-keyss42_570"
" val-rhss43_571"
" track-stxs44_572"
" done-bodys45_573)"
"(let-values(((disarmed-source32_574)(car given-args_566))"
"((given-kws_575)(cdr given-kws_565))"
"((given-args_576)(cdr given-args_566)))"
"(let-values(((source31_577)(car given-args_576))"
"((given-kws_578)(cdr given-kws_575))"
"((given-args_579)(cdr given-args_576)))"
"(let-values(((stratified?33_580)(car given-args_579))"
"((given-kws_581)(cdr given-kws_578))"
"((given-args_582)(cdr given-args_579)))"
"(let-values(((track?34_583)(car given-args_582)))"
"(finish-expanding-body46.1"
" disarmed-source32_574"
" source31_577"
" stratified?33_580"
" track?34_583"
" body-ctx39_567"
" frame-id40_568"
" val-idss41_569"
" val-keyss42_570"
" val-rhss43_571"
" track-stxs44_572"
" done-bodys45_573)))))))"
"(define-values"
"(finish-expanding-body48.1)"
"(lifted/22.1"
"(lambda(given-kws_584 given-argc_585)"
"(if(= given-argc_585 '9)"
"(let-values(((l2_586) given-kws_584))"
"(if(pair? l2_586)"
"(if(eq?(car l2_586) '#:disarmed-source)"
"(let-values(((l2_587)(cdr l2_586)))"
"(if(pair? l2_587)"
"(if(eq?(car l2_587) '#:source)"
"(let-values(((l2_588)(cdr l2_587)))"
"(if(pair? l2_588)"
"(if(eq?(car l2_588) '#:stratified?)"
"(let-values(((l2_589)(cdr l2_588)))"
"(if(pair? l2_589)(if(eq?(car l2_589) '#:track?)(null?(cdr l2_589)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_590"
" given-args_591"
" body-ctx_592"
" frame-id_593"
" val-idss_594"
" val-keyss_595"
" val-rhss_596"
" track-stxs_597"
" done-bodys_598)"
"(unpack47.1$3"
" given-kws_590"
" given-args_591"
" body-ctx_592"
" frame-id_593"
" val-idss_594"
" val-keyss_595"
" val-rhss_596"
" track-stxs_597"
" done-bodys_598)))"
" '(#:disarmed-source #:source #:stratified? #:track?)"
" '(#:disarmed-source #:source #:stratified? #:track?)))"
"(define-values"
"(lifted/23.1)"
"(make-required"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_599 idss_600 keyss_601 rhss_602 track-stxs_603)"
"(apply missing-kw self_599 idss_600 keyss_601 rhss_602 track-stxs_603 null)))"
" '#f"
" '#f))"
"(define-values"
"(expand-and-split-bindings-by-reference67.1)"
"(lambda(ctx51_604"
" disarmed-source53_605"
" frame-id50_606"
" get-body54_607"
" source52_608"
" split?49_609"
" track?55_610"
" idss63_611"
" keyss64_612"
" rhss65_613"
" track-stxs66_614)"
"(let-values(((idss_615) idss63_611))"
"(let-values(((keyss_616) keyss64_612))"
"(let-values(((rhss_617) rhss65_613))"
"(let-values(((track-stxs_618) track-stxs66_614))"
"(let-values(((split?_619) split?49_609))"
"(let-values(((frame-id_620) frame-id50_606))"
"(let-values(((ctx_621) ctx51_604))"
"(let-values(((s_622) source52_608))"
"(let-values(((disarmed-s_623) disarmed-source53_605))"
"(let-values(((get-body_624) get-body54_607))"
"(let-values(((track?_625) track?55_610))"
"(let-values()"
"(let-values(((s-core-stx_626)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_621))))"
"((letrec-values(((loop_627)"
"(lambda(idss_628"
" keyss_629"
" rhss_630"
" track-stxs_631"
" accum-idss_632"
" accum-rhss_633"
" accum-track-stxs_634"
" track?_635)"
"(if(null? idss_628)"
"(let-values()"
"(if(null? accum-idss_632)"
"(let-values()(get-body_624 track?_635))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:658:8_636)"
" rebuild101.1)"
"((track?211_637) track?_635)"
"((s212_638) s_622)"
"((disarmed-s213_639) disarmed-s_623)"
"((temp214_640)"
"(list"
"(datum->syntax$2 s-core-stx_626 'letrec-values)"
"(build-clauses"
" accum-idss_632"
" accum-rhss_633"
" accum-track-stxs_634)"
"(get-body_624 '#f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?211_637"
" '#t"
" s212_638"
" disarmed-s213_639"
" temp214_640)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:658:8_636"
" keyword-procedure-extract"
" '(#:track?)"
" '5)"
" '(#:track?)"
"(list track?211_637)"
" s212_638"
" disarmed-s213_639"
" temp214_640))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_646)"
"(expand-context-observer ctx_621)))"
"(if obs_646"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_646 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ids_641)(car idss_628)))"
"(let-values(((expanded-rhs_642)"
"(let-values(((temp215_647)(car rhss_630))"
"((temp216_648)"
"(as-named-context"
" ctx_621"
" ids_641)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp215_647 temp216_648)"
"(expand7.1 temp215_647 temp216_648)))))"
"(let-values(((track-stx_643)(car track-stxs_631)))"
"(let-values(((local-or-forward-references?_644)"
"(reference-record-forward-references?"
" frame-id_620)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_620"
"(car keyss_629))"
"(values))))"
"(let-values(((forward-references?_645)"
"(reference-record-forward-references?"
" frame-id_620)))"
"(if(if(not local-or-forward-references?_644)"
" split?_619"
" '#f)"
"(let-values()"
"(begin"
"(if(null? accum-idss_632)"
"(void)"
"(let-values()"
"(error"
" '\"internal error: accumulated ids not empty\")))"
"(let-values(((...nder/expand/main.rkt:678:8_649)"
" rebuild101.1)"
"((track?217_650) track?_635)"
"((s218_651) s_622)"
"((disarmed-s219_652)"
" disarmed-s_623)"
"((temp220_653)"
"(list"
"(datum->syntax$2"
" s-core-stx_626"
" 'let-values)"
"(list"
"(build-clause"
" ids_641"
" expanded-rhs_642"
" track-stx_643))"
"(loop_627"
"(cdr idss_628)"
"(cdr keyss_629)"
"(cdr rhss_630)"
"(cdr track-stxs_631)"
" null"
" null"
" null"
" '#f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?217_650"
" '#t"
" s218_651"
" disarmed-s219_652"
" temp220_653)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:678:8_649"
" keyword-procedure-extract"
" '(#:track?)"
" '5)"
" '(#:track?)"
"(list track?217_650)"
" s218_651"
" disarmed-s219_652"
" temp220_653)))))"
"(if(if(not forward-references?_645)"
"(let-values(((or-part_654) split?_619))"
"(if or-part_654"
" or-part_654"
"(null?(cdr idss_628))))"
" '#f)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:688:8_655)"
" rebuild101.1)"
"((track?221_656) track?_635)"
"((s222_657) s_622)"
"((disarmed-s223_658)"
" disarmed-s_623)"
"((temp224_659)"
"(list"
"(datum->syntax$2"
" s-core-stx_626"
" 'letrec-values)"
"(build-clauses"
"(cons ids_641 accum-idss_632)"
"(cons"
" expanded-rhs_642"
" accum-rhss_633)"
"(cons"
" track-stx_643"
" accum-track-stxs_634))"
"(loop_627"
"(cdr idss_628)"
"(cdr keyss_629)"
"(cdr rhss_630)"
"(cdr track-stxs_631)"
" null"
" null"
" null"
" '#f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?221_656"
" '#t"
" s222_657"
" disarmed-s223_658"
" temp224_659)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:688:8_655"
" keyword-procedure-extract"
" '(#:track?)"
" '5)"
" '(#:track?)"
"(list track?221_656)"
" s222_657"
" disarmed-s223_658"
" temp224_659))))"
"(let-values()"
"(loop_627"
"(cdr idss_628)"
"(cdr keyss_629)"
"(cdr rhss_630)"
"(cdr track-stxs_631)"
"(cons ids_641 accum-idss_632)"
"(cons expanded-rhs_642 accum-rhss_633)"
"(cons track-stx_643 accum-track-stxs_634)"
" track?_635))))))))))))))))"
" loop_627)"
" idss_615"
" keyss_616"
" rhss_617"
" track-stxs_618"
" null"
" null"
" null"
" track?_625))))))))))))))))"
"(define-values"
"(unpack68.1)"
"(lambda(given-kws_660 given-args_661 idss63_662 keyss64_663 rhss65_664 track-stxs66_665)"
"(let-values(((ctx51_666)(car given-args_661))"
"((given-kws_667)(cdr given-kws_660))"
"((given-args_668)(cdr given-args_661)))"
"(let-values(((disarmed-source53_669)(car given-args_668))"
"((given-kws_670)(cdr given-kws_667))"
"((given-args_671)(cdr given-args_668)))"
"(let-values(((frame-id50_672)(car given-args_671))"
"((given-kws_673)(cdr given-kws_670))"
"((given-args_674)(cdr given-args_671)))"
"(let-values(((get-body54_675)(car given-args_674))"
"((given-kws_676)(cdr given-kws_673))"
"((given-args_677)(cdr given-args_674)))"
"(let-values(((source52_678)(car given-args_677))"
"((given-kws_679)(cdr given-kws_676))"
"((given-args_680)(cdr given-args_677)))"
"(let-values(((split?49_681)(car given-args_680))"
"((given-kws_682)(cdr given-kws_679))"
"((given-args_683)(cdr given-args_680)))"
"(let-values(((track?55_684)(car given-args_683)))"
"(expand-and-split-bindings-by-reference67.1"
" ctx51_666"
" disarmed-source53_669"
" frame-id50_672"
" get-body54_675"
" source52_678"
" split?49_681"
" track?55_684"
" idss63_662"
" keyss64_663"
" rhss65_664"
" track-stxs66_665))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference69.1)"
"(lifted/23.1"
"(lambda(given-kws_685 given-argc_686)"
"(if(= given-argc_686 '6)"
"(let-values(((l2_687) given-kws_685))"
"(if(pair? l2_687)"
"(if(eq?(car l2_687) '#:ctx)"
"(let-values(((l2_688)(cdr l2_687)))"
"(if(pair? l2_688)"
"(if(eq?(car l2_688) '#:disarmed-source)"
"(let-values(((l2_689)(cdr l2_688)))"
"(if(pair? l2_689)"
"(if(eq?(car l2_689) '#:frame-id)"
"(let-values(((l2_690)(cdr l2_689)))"
"(if(pair? l2_690)"
"(if(eq?(car l2_690) '#:get-body)"
"(let-values(((l2_691)(cdr l2_690)))"
"(if(pair? l2_691)"
"(if(eq?(car l2_691) '#:source)"
"(let-values(((l2_692)(cdr l2_691)))"
"(if(pair? l2_692)"
"(if(eq?(car l2_692) '#:split?)"
"(let-values(((l2_693)(cdr l2_692)))"
"(if(pair? l2_693)"
"(if(eq?(car l2_693) '#:track?)(null?(cdr l2_693)) '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_694 given-args_695 idss_696 keyss_697 rhss_698 track-stxs_699)"
"(unpack68.1 given-kws_694 given-args_695 idss_696 keyss_697 rhss_698 track-stxs_699)))"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_700 accum-rhss_701 accum-track-stxs_702)"
"(map2 build-clause(alt-reverse accum-idss_700)(alt-reverse accum-rhss_701)(alt-reverse accum-track-stxs_702))))"
"(define-values"
"(build-clause)"
"(lambda(ids_703 rhs_704 track-stx_705)"
"(let-values(((clause_706)(datum->syntax$2 '#f(list ids_703 rhs_704))))"
"(if track-stx_705(syntax-track-origin$1 clause_706 track-stx_705) clause_706))))"
"(define-values"
"(no-binds)"
"(lambda(expr_707 s_708 phase_709)"
"(let-values(((s-core-stx_710)(syntax-shift-phase-level$1 core-stx phase_709)))"
"(let-values(((s-runtime-stx_711)(syntax-shift-phase-level$1 runtime-stx phase_709)))"
"(datum->syntax$2"
" '#f"
"(list"
"(datum->syntax$2 s-core-stx_710 'begin)"
" expr_707"
"(list(datum->syntax$2 s-core-stx_710 '#%app)(datum->syntax$2 s-runtime-stx_711 'values)))"
" s_708)))))"
"(define-values"
"(expand/capture-lifts78.1)"
"(lambda(begin-form?71_712"
" begin-form?74_713"
" expand-lifts?70_714"
" expand-lifts?73_715"
" lift-key72_716"
" lift-key75_717"
" s76_718"
" ctx77_719)"
"(let-values(((s_720) s76_718))"
"(let-values(((ctx_721) ctx77_719))"
"(let-values(((expand-lifts?_722)(if expand-lifts?73_715 expand-lifts?70_714 '#f)))"
"(let-values(((begin-form?_723)(if begin-form?74_713 begin-form?71_712 '#f)))"
"(let-values(((lift-key_724)(if lift-key75_717 lift-key72_716(generate-lift-key))))"
"(let-values()"
"(let-values(((context_725)(expand-context-context ctx_721)))"
"(let-values(((phase_726)(expand-context-phase ctx_721)))"
"(let-values(((local?_727)(not begin-form?_723)))"
"((letrec-values(((loop_728)"
"(lambda(s_729)"
"(let-values(((lift-env_730)(if local?_727(box empty-env) '#f)))"
"(let-values(((lift-ctx_731)"
"(let-values(((...nder/expand/main.rkt:741:21_735)"
" make-lift-context8.1)"
"((temp225_736)"
"(if local?_727"
"(make-local-lift"
" lift-env_730"
"(root-expand-context-counter ctx_721))"
"(make-top-level-lift ctx_721)))"
"((temp226_737)"
"(if(not local?_727)"
"(eq? context_725 'module)"
" '#f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 temp226_737 '#t temp225_736)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:741:21_735"
" keyword-procedure-extract"
" '(#:module*-ok?)"
" '3)"
" '(#:module*-ok?)"
"(list temp226_737)"
" temp225_736)))))"
"(let-values(((capture-ctx_732)"
"(let-values(((the-struct_738) ctx_721))"
"(if(expand-context? the-struct_738)"
"(let-values(((lift-key227_739) lift-key_724)"
"((lifts228_740) lift-ctx_731)"
"((lift-envs229_741)"
"(if local?_727"
"(cons"
" lift-env_730"
"(expand-context-lift-envs ctx_721))"
"(expand-context-lift-envs ctx_721)))"
"((module-lifts230_742)"
"(if(let-values(((or-part_743)"
" local?_727))"
"(if or-part_743"
" or-part_743"
"(not"
"(memq"
" context_725"
" '(top-level module)))))"
"(expand-context-module-lifts ctx_721)"
" lift-ctx_731)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_738)"
"(root-expand-context-post-expansion-scope"
" the-struct_738)"
"(root-expand-context-top-level-bind-scope"
" the-struct_738)"
"(root-expand-context-all-scopes-stx the-struct_738)"
"(root-expand-context-use-site-scopes the-struct_738)"
"(root-expand-context-defined-syms the-struct_738)"
"(root-expand-context-frame-id the-struct_738)"
"(root-expand-context-counter the-struct_738)"
" lift-key227_739"
"(expand-context-context the-struct_738)"
"(expand-context-phase the-struct_738)"
"(expand-context-namespace the-struct_738)"
"(expand-context-env the-struct_738)"
"(expand-context-post-expansion-scope-action"
" the-struct_738)"
"(expand-context-scopes the-struct_738)"
"(expand-context-def-ctx-scopes the-struct_738)"
"(expand-context-reference-records the-struct_738)"
"(expand-context-only-immediate? the-struct_738)"
"(expand-context-just-once? the-struct_738)"
"(expand-context-module-begin-k the-struct_738)"
"(expand-context-need-eventually-defined"
" the-struct_738)"
"(expand-context-allow-unbound? the-struct_738)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_738)"
"(expand-context-stops the-struct_738)"
"(expand-context-current-introduction-scopes"
" the-struct_738)"
"(expand-context-declared-submodule-names"
" the-struct_738)"
" lifts228_740"
" lift-envs229_741"
" module-lifts230_742"
"(expand-context-require-lifts the-struct_738)"
"(expand-context-to-module-lifts the-struct_738)"
"(expand-context-requires+provides the-struct_738)"
"(expand-context-name the-struct_738)"
"(expand-context-observer the-struct_738)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_738)))))"
"(let-values(((exp-s_733)"
"(let-values(((s231_744) s_729)"
"((capture-ctx232_745) capture-ctx_732))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f s231_744 capture-ctx232_745)"
"(expand7.1 s231_744 capture-ctx232_745)))))"
"(let-values(((lifts_734)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_732))))"
"(if(null? lifts_734)"
"(let-values() exp-s_733)"
"(let-values()"
"(let-values(((with-lifts-s_746)"
"(if begin-form?_723"
"(let-values(((lifts233_747) lifts_734)"
"((exp-s234_748) exp-s_733)"
"((s235_749) s_729)"
"((phase236_750) phase_726))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" '#f"
" '#f"
" lifts233_747"
" exp-s234_748"
" s235_749"
" phase236_750)"
"(wrap-lifts-as-begin17.1"
" lifts233_747"
" exp-s234_748"
" s235_749"
" phase236_750)))"
"(wrap-lifts-as-let"
" lifts_734"
" exp-s_733"
" s_729"
" phase_726))))"
"(begin"
"(let-values(((obs_751)(expand-context-observer ctx_721)))"
"(if obs_751"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_751"
" 'lift-loop"
" with-lifts-s_746))"
"(void)))"
"(void)))"
"(if expand-lifts?_722"
"(loop_728 with-lifts-s_746)"
" with-lifts-s_746)))))))))))))"
" loop_728)"
" s_720))))))))))))"
"(define-values"
"(unpack79.1)"
"(lambda(given-kws_752 given-args_753 s76_754 ctx77_755)"
"(let-values(((begin-form?74_756)(if(pair? given-kws_752)(eq? '#:begin-form?(car given-kws_752)) '#f)))"
"(let-values(((begin-form?71_757)(if begin-form?74_756(car given-args_753)(void)))"
"((given-kws_758)(if begin-form?74_756(cdr given-kws_752) given-kws_752))"
"((given-args_759)(if begin-form?74_756(cdr given-args_753) given-args_753)))"
"(let-values(((expand-lifts?73_760)(if(pair? given-kws_758)(eq? '#:expand-lifts?(car given-kws_758)) '#f)))"
"(let-values(((expand-lifts?70_761)(if expand-lifts?73_760(car given-args_759)(void)))"
"((given-kws_762)(if expand-lifts?73_760(cdr given-kws_758) given-kws_758))"
"((given-args_763)(if expand-lifts?73_760(cdr given-args_759) given-args_759)))"
"(let-values(((lift-key75_764)(pair? given-kws_762)))"
"(let-values(((lift-key72_765)(if lift-key75_764(car given-args_763)(void))))"
"(expand/capture-lifts78.1"
" begin-form?71_757"
" begin-form?74_756"
" expand-lifts?70_761"
" expand-lifts?73_760"
" lift-key72_765"
" lift-key75_764"
" s76_754"
" ctx77_755)))))))))"
"(define-values"
"(expand/capture-lifts80.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_766 given-argc_767)"
"(if(= given-argc_767 '4)"
"(let-values(((l1_768) given-kws_766))"
"(let-values(((l1_769)(if(null? l1_768) l1_768(if(eq?(car l1_768) '#:begin-form?)(cdr l1_768) l1_768))))"
"(let-values(((l1_770) l1_769))"
"(let-values(((l1_771)"
"(if(null? l1_770) l1_770(if(eq?(car l1_770) '#:expand-lifts?)(cdr l1_770) l1_770))))"
"(let-values(((l1_772) l1_771))"
"(let-values(((l1_773)"
"(if(null? l1_772) l1_772(if(eq?(car l1_772) '#:lift-key)(cdr l1_772) l1_772))))"
"(null? l1_773)))))))"
" '#f))"
"(case-lambda((given-kws_774 given-args_775 s_776 ctx_777)(unpack79.1 given-kws_774 given-args_775 s_776 ctx_777)))"
" null"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
"(let-values(((expand/capture-lifts_778)(case-lambda((s_779 ctx_780)(unpack79.1 null null s_779 ctx_780)))))"
" expand/capture-lifts_778)))"
"(define-values"
"(expand-transformer91.1)"
"(lambda(begin-form?82_781"
" begin-form?86_782"
" context81_783"
" context85_784"
" expand-lifts?83_785"
" expand-lifts?87_786"
" lift-key84_787"
" lift-key88_788"
" s89_789"
" ctx90_790)"
"(let-values(((s_791) s89_789))"
"(let-values(((ctx_792) ctx90_790))"
"(let-values(((context_793)(if context85_784 context81_783 'expression)))"
"(let-values(((begin-form?_794)(if begin-form?86_782 begin-form?82_781 '#f)))"
"(let-values(((expand-lifts?_795)(if expand-lifts?87_786 expand-lifts?83_785 '#t)))"
"(let-values(((lift-key_796)(if lift-key88_788 lift-key84_787(generate-lift-key))))"
"(let-values()"
"(let-values(((phase_797)(add1(expand-context-phase ctx_792))))"
"(let-values(((ns_798)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_792) phase_797)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_798 phase_797)(values))))"
"(let-values(((trans-ctx_799)"
"(let-values(((the-struct_800) ctx_792))"
"(if(expand-context? the-struct_800)"
"(let-values(((context242_801) context_793)"
"((scopes243_802) null)"
"((phase244_803) phase_797)"
"((namespace245_804) ns_798)"
"((env246_805) empty-env)"
"((only-immediate?247_806) '#f)"
"((post-expansion-scope248_807) '#f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_800)"
" post-expansion-scope248_807"
"(root-expand-context-top-level-bind-scope the-struct_800)"
"(root-expand-context-all-scopes-stx the-struct_800)"
"(root-expand-context-use-site-scopes the-struct_800)"
"(root-expand-context-defined-syms the-struct_800)"
"(root-expand-context-frame-id the-struct_800)"
"(root-expand-context-counter the-struct_800)"
"(root-expand-context-lift-key the-struct_800)"
" context242_801"
" phase244_803"
" namespace245_804"
" env246_805"
"(expand-context-post-expansion-scope-action the-struct_800)"
" scopes243_802"
"(expand-context-def-ctx-scopes the-struct_800)"
"(expand-context-reference-records the-struct_800)"
" only-immediate?247_806"
"(expand-context-just-once? the-struct_800)"
"(expand-context-module-begin-k the-struct_800)"
"(expand-context-need-eventually-defined the-struct_800)"
"(expand-context-allow-unbound? the-struct_800)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_800)"
"(expand-context-stops the-struct_800)"
"(expand-context-current-introduction-scopes the-struct_800)"
"(expand-context-declared-submodule-names the-struct_800)"
"(expand-context-lifts the-struct_800)"
"(expand-context-lift-envs the-struct_800)"
"(expand-context-module-lifts the-struct_800)"
"(expand-context-require-lifts the-struct_800)"
"(expand-context-to-module-lifts the-struct_800)"
"(expand-context-requires+provides the-struct_800)"
"(expand-context-name the-struct_800)"
"(expand-context-observer the-struct_800)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_800)))))"
"(let-values(((...nder/expand/main.rkt:801:2_808) expand/capture-lifts80.1)"
"((s237_809) s_791)"
"((trans-ctx238_810) trans-ctx_799)"
"((expand-lifts?239_811) expand-lifts?_795)"
"((begin-form?240_812) begin-form?_794)"
"((lift-key241_813) lift-key_796))"
"(if(variable-reference-constant?(#%variable-reference expand/capture-lifts80.1))"
"(expand/capture-lifts78.1"
" begin-form?240_812"
" '#t"
" expand-lifts?239_811"
" '#t"
" lift-key241_813"
" '#t"
" s237_809"
" trans-ctx238_810)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:801:2_808"
" keyword-procedure-extract"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
" '4)"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
"(list begin-form?240_812 expand-lifts?239_811 lift-key241_813)"
" s237_809"
" trans-ctx238_810))))))))))))))))"
"(define-values"
"(unpack92.1)"
"(lambda(given-kws_814 given-args_815 s89_816 ctx90_817)"
"(let-values(((begin-form?86_818)(if(pair? given-kws_814)(eq? '#:begin-form?(car given-kws_814)) '#f)))"
"(let-values(((begin-form?82_819)(if begin-form?86_818(car given-args_815)(void)))"
"((given-kws_820)(if begin-form?86_818(cdr given-kws_814) given-kws_814))"
"((given-args_821)(if begin-form?86_818(cdr given-args_815) given-args_815)))"
"(let-values(((context85_822)(if(pair? given-kws_820)(eq? '#:context(car given-kws_820)) '#f)))"
"(let-values(((context81_823)(if context85_822(car given-args_821)(void)))"
"((given-kws_824)(if context85_822(cdr given-kws_820) given-kws_820))"
"((given-args_825)(if context85_822(cdr given-args_821) given-args_821)))"
"(let-values(((expand-lifts?87_826)"
"(if(pair? given-kws_824)(eq? '#:expand-lifts?(car given-kws_824)) '#f)))"
"(let-values(((expand-lifts?83_827)(if expand-lifts?87_826(car given-args_825)(void)))"
"((given-kws_828)(if expand-lifts?87_826(cdr given-kws_824) given-kws_824))"
"((given-args_829)(if expand-lifts?87_826(cdr given-args_825) given-args_825)))"
"(let-values(((lift-key88_830)(pair? given-kws_828)))"
"(let-values(((lift-key84_831)(if lift-key88_830(car given-args_829)(void))))"
"(expand-transformer91.1"
" begin-form?82_819"
" begin-form?86_818"
" context81_823"
" context85_822"
" expand-lifts?83_827"
" expand-lifts?87_826"
" lift-key84_831"
" lift-key88_830"
" s89_816"
" ctx90_817)))))))))))"
"(define-values"
"(expand-transformer93.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_832 given-argc_833)"
"(if(= given-argc_833 '4)"
"(let-values(((l1_834) given-kws_832))"
"(let-values(((l1_835)(if(null? l1_834) l1_834(if(eq?(car l1_834) '#:begin-form?)(cdr l1_834) l1_834))))"
"(let-values(((l1_836) l1_835))"
"(let-values(((l1_837)(if(null? l1_836) l1_836(if(eq?(car l1_836) '#:context)(cdr l1_836) l1_836))))"
"(let-values(((l1_838) l1_837))"
"(let-values(((l1_839)"
"(if(null? l1_838) l1_838(if(eq?(car l1_838) '#:expand-lifts?)(cdr l1_838) l1_838))))"
"(let-values(((l1_840) l1_839))"
"(let-values(((l1_841)"
"(if(null? l1_840) l1_840(if(eq?(car l1_840) '#:lift-key)(cdr l1_840) l1_840))))"
"(null? l1_841)))))))))"
" '#f))"
"(case-lambda((given-kws_842 given-args_843 s_844 ctx_845)(unpack92.1 given-kws_842 given-args_843 s_844 ctx_845)))"
" null"
" '(#:begin-form? #:context #:expand-lifts? #:lift-key)"
"(let-values(((expand-transformer_846)(case-lambda((s_847 ctx_848)(unpack92.1 null null s_847 ctx_848)))))"
" expand-transformer_846)))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_849 ids_850 ctx_851)"
"(let-values(((exp-rhs_852)"
"(let-values(((rhs249_854) rhs_849)((temp250_855)(as-named-context ctx_851 ids_850)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1 '#f '#f '#f '#f '#f '#f '#f '#f rhs249_854 temp250_855)"
"(expand-transformer93.1 rhs249_854 temp250_855)))))"
"(let-values(((phase_853)(add1(expand-context-phase ctx_851))))"
"(values"
" exp-rhs_852"
"(eval-for-bindings"
" ids_850"
" exp-rhs_852"
" phase_853"
"(namespace->namespace-at-phase(expand-context-namespace ctx_851) phase_853)"
" ctx_851))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_856 ids_857 ctx_858)"
"(let-values(((exp-rhs_859 vals_860)(expand+eval-for-syntaxes-binding rhs_856 ids_857 ctx_858))) vals_860)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_861 s_862 phase_863 ns_864 ctx_865)"
"(let-values(((compiled_866)"
"(compile-single"
" s_862"
"(let-values(((...nder/expand/main.rkt:832:37_868) make-compile-context16.1)"
"((ns251_869) ns_864)"
"((phase252_870) phase_863))"
"(if(variable-reference-constant?(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1 '#f '#f '#f '#f '#f '#f ns251_869 '#t phase252_870 '#t '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:832:37_868"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" '2)"
" '(#:namespace #:phase)"
"(list ns251_869 phase252_870)))))))"
"(let-values(((vals_867)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" current-expand-context"
" ctx_865"
" 1/current-namespace"
" ns_864)"
"(let-values()(eval-top compiled_866 ns_864))))"
" list)))"
"(begin"
"(if(=(length vals_867)(length ids_861))"
"(void)"
"(let-values()"
" (error '\"wrong number of results (\" (length vals_867) '\"vs.\" (length ids_861) '\")\" '\"from\" s_862)))"
" vals_867)))))"
"(define-values"
"(rebuild99.1)"
"(lambda(track?94_871 track?95_872 orig-s96_873 disarmed-orig-s97_874 new98_875)"
"(let-values(((orig-s_876) orig-s96_873))"
"(let-values(((disarmed-orig-s_877) disarmed-orig-s97_874))"
"(let-values(((new_878) new98_875))"
"(let-values(((track?_879)(if track?95_872 track?94_871 '#t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$2 disarmed-orig-s_877 new_878 orig-s_876(if track?_879 orig-s_876 '#f))"
" orig-s_876))))))))"
"(define-values"
"(unpack100.1)"
"(lambda(given-kws_880 given-args_881 orig-s96_882 disarmed-orig-s97_883 new98_884)"
"(let-values(((track?95_885)(pair? given-kws_880)))"
"(let-values(((track?94_886)(if track?95_885(car given-args_881)(void))))"
"(rebuild99.1 track?94_886 track?95_885 orig-s96_882 disarmed-orig-s97_883 new98_884)))))"
"(define-values"
"(rebuild101.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_887 given-argc_888)"
"(if(= given-argc_888 '5)"
"(let-values(((l1_889) given-kws_887))"
"(let-values(((l1_890)(if(null? l1_889) l1_889(if(eq?(car l1_889) '#:track?)(cdr l1_889) l1_889))))"
"(null? l1_890)))"
" '#f))"
"(case-lambda"
"((given-kws_891 given-args_892 orig-s_893 disarmed-orig-s_894 new_895)"
"(unpack100.1 given-kws_891 given-args_892 orig-s_893 disarmed-orig-s_894 new_895)))"
" null"
" '(#:track?)"
"(let-values(((rebuild_896)"
"(case-lambda"
"((orig-s_897 disarmed-orig-s_898 new_899)"
"(unpack100.1 null null orig-s_897 disarmed-orig-s_898 new_899)))))"
" rebuild_896)))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_900 trans-idss_901)"
"(if(null? trans-idss_901)"
"(let-values() s_900)"
"(let-values()"
"(syntax-property$1"
" s_900"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_901)"
"(let-values(((or-part_902)(syntax-property$1 s_900 'disappeared-binding)))"
"(if or-part_902 or-part_902 null))))))))"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= '1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$2 p-core-stx_3 'module*) phase_2 phase_2)"
" '#f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(alt-reverse"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((sym_8)(unsafe-car lst_7)))"
"(if '#t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$2 p-core-stx_3 sym_8))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if '#t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(make-struct-type"
" 'internal-definition-context"
" '#f"
" '4"
" '0"
" '#f"
" null"
"(current-inspector)"
" '#f"
" '(0 1 2 3)"
" '#f"
" 'internal-definition-context)))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 '0 'frame-id)"
"(make-struct-field-accessor -ref_5 '1 'scope)"
"(make-struct-field-accessor -ref_5 '2 'add-scope?)"
"(make-struct-field-accessor -ref_5 '3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_38 make-_39 ?_40 -ref_41 -set!_42)"
"(make-struct-type 'env-mixin '#f '4 '0 '#f null(current-inspector) '#f '(0 1 2 3) '#f 'env-mixin)))"
"(values"
" struct:_38"
" make-_39"
" ?_40"
"(make-struct-field-accessor -ref_41 '0 'id)"
"(make-struct-field-accessor -ref_41 '1 'sym)"
"(make-struct-field-accessor -ref_41 '2 'value)"
"(make-struct-field-accessor -ref_41 '3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_74)"
"(lambda(parent-ctx3_75 add-scope?4_76 parent-ctx5_77 add-scope?6_78)"
"(let-values(((parent-ctx_79)(if parent-ctx5_77 parent-ctx3_75 '#f)))"
"(let-values(((add-scope?_80)(if add-scope?6_78 add-scope?4_76 '#t)))"
"(let-values()"
"(let-values(((ctx_81)"
"(let-values(((temp38_85) 'syntax-local-make-definition-context))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp38_85 '#t)"
"(get-current-expand-context8.1 temp38_85)))))"
"(let-values(((frame-id_82)"
"(let-values(((or-part_86)(root-expand-context-frame-id ctx_81)))"
"(if or-part_86 or-part_86(gensym)))))"
"(let-values(((sc_83)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_84)(expand-context-def-ctx-scopes ctx_81)))"
"(begin"
"(if def-ctx-scopes_84"
"(let-values()(set-box! def-ctx-scopes_84(cons sc_83(unbox def-ctx-scopes_84))))"
"(void))"
"(internal-definition-context1.1 frame-id_82 sc_83 add-scope?_80(box null)))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_74 '#f '#f '#f '#f))"
"((parent-ctx_87 add-scope?4_88)(syntax-local-make-definition-context7_74 parent-ctx_87 add-scope?4_88 '#t '#t))"
"((parent-ctx3_89)(syntax-local-make-definition-context7_74 parent-ctx3_89 '#f '#t '#f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_90 s_91 intdef_92)"
"(let-values((()"
"(begin"
"(if(if(list? ids_90)(andmap2 identifier? ids_90) '#f)"
"(void)"
" (let-values () (raise-argument-error 'syntax-local-bind-syntaxes '\"(listof identifier?)\" ids_90)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_100)(not s_91)))(if or-part_100 or-part_100(syntax?$1 s_91)))"
"(void)"
" (let-values () (raise-argument-error 'syntax-local-bind-syntaxes '\"(or/c syntax? #f)\" s_91)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_92)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
" '\"internal-definition-context?\""
" intdef_92)))"
"(values))))"
"(let-values(((ctx_93)"
"(let-values(((temp39_101) 'local-expand))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp39_101 '#t)"
"(get-current-expand-context8.1 temp39_101)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_102)(expand-context-observer ctx_93)))"
"(if obs_102"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_102 'local-bind ids_90))(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_94)(expand-context-phase ctx_93)))"
"(let-values(((intdef-env_95)(add-intdef-bindings(expand-context-env ctx_93) intdef_92)))"
"(let-values(((intdef-ids_96)"
"(alt-reverse"
"(let-values(((lst_103) ids_90))"
"(begin"
"(if(list? lst_103)(void)(let-values()(in-list lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(fold-var_105 lst_106)"
"(if(pair? lst_106)"
"(let-values(((id_107)(unsafe-car lst_106)))"
"(if '#t"
"(let-values(((fold-var_108)"
"(let-values(((fold-var_109) fold-var_105))"
"(let-values(((fold-var_110)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_111)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_107"
" ctx_93)"
" ctx_93)))"
"(let-values(((...finition-context.rkt:65:23_112)"
" add-intdef-scopes23.1)"
"((pre-id40_113)"
" pre-id_111)"
"((intdef41_114)"
" intdef_92)"
"((temp42_115)"
" '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" '#f"
" '#f"
" temp42_115"
" '#t"
" pre-id40_113"
" intdef41_114)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:65:23_112"
" keyword-procedure-extract"
" '(#:always?)"
" '4)"
" '(#:always?)"
"(list"
" temp42_115)"
" pre-id40_113"
" intdef41_114)))))"
" fold-var_109))))"
"(values fold-var_110)))))"
"(if '#t"
"(for-loop_104 fold-var_108(unsafe-cdr lst_106))"
" fold-var_108))"
" fold-var_105))"
" fold-var_105))))"
" for-loop_104)"
" null"
" lst_103))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_116)(expand-context-observer ctx_93)))"
"(if obs_116"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_116 'rename-list intdef-ids_96))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((syms_97)"
"(alt-reverse"
"(let-values(((lst_117) intdef-ids_96))"
"(begin"
"(if(list? lst_117)(void)(let-values()(in-list lst_117)))"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 lst_120)"
"(if(pair? lst_120)"
"(let-values(((intdef-id_121)(unsafe-car lst_120)))"
"(if '#t"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123)"
" fold-var_119))"
"(let-values(((fold-var_124)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...finition-context.rkt:68:17_125)"
" add-local-binding!35.1)"
"((intdef-id43_126)"
" intdef-id_121)"
"((phase44_127)"
" phase_94)"
"((temp45_128)"
"(root-expand-context-counter"
" ctx_93))"
"((temp46_129)"
"(internal-definition-context-frame-id"
" intdef_92)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" temp46_129"
" '#t"
" '#f"
" '#f"
" intdef-id43_126"
" phase44_127"
" temp45_128)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:68:17_125"
" keyword-procedure-extract"
" '(#:frame-id)"
" '5)"
" '(#:frame-id)"
"(list"
" temp46_129)"
" intdef-id43_126"
" phase44_127"
" temp45_128))))"
" fold-var_123))))"
"(values fold-var_124)))))"
"(if '#t"
"(for-loop_118 fold-var_122(unsafe-cdr lst_120))"
" fold-var_122))"
" fold-var_119))"
" fold-var_119))))"
" for-loop_118)"
" null"
" lst_117))))))"
"(let-values(((vals_98)"
"(if s_91"
"(let-values()"
"(let-values(((input-s_130)"
"(flip-introduction-scopes"
"(let-values(((...finition-context.rkt:73:48_132)"
" add-intdef-scopes23.1)"
"((s47_133) s_91)"
"((intdef48_134) intdef_92)"
"((temp49_135) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" '#f"
" '#f"
" temp49_135"
" '#t"
" s47_133"
" intdef48_134)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:73:48_132"
" keyword-procedure-extract"
" '(#:always?)"
" '4)"
" '(#:always?)"
"(list temp49_135)"
" s47_133"
" intdef48_134)))"
" ctx_93)))"
"(let-values(((tmp-env_131)"
"(let-values(((lst_136) syms_97))"
"(begin"
"(if(list? lst_136)"
"(void)"
"(let-values()(in-list lst_136)))"
"((letrec-values(((for-loop_137)"
"(lambda(env_138 lst_139)"
"(if(pair? lst_139)"
"(let-values(((sym_140)"
"(unsafe-car lst_139)))"
"(if '#t"
"(let-values(((env_141)"
"(let-values(((env_142)"
" env_138))"
"(let-values(((env_143)"
"(let-values()"
"(hash-set"
" env_142"
" sym_140"
" variable))))"
"(values"
" env_143)))))"
"(if '#t"
"(for-loop_137"
" env_141"
"(unsafe-cdr lst_139))"
" env_141))"
" env_138))"
" env_138))))"
" for-loop_137)"
" intdef-env_95"
" lst_136)))))"
"(eval-for-syntaxes-binding"
" input-s_130"
" ids_90"
"(let-values(((...finition-context.rkt:78:33_144)"
" make-local-expand-context35.1)"
"((temp50_145)"
"(let-values(((the-struct_148) ctx_93))"
"(if(expand-context? the-struct_148)"
"(let-values(((env53_149) tmp-env_131))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_148)"
"(root-expand-context-post-expansion-scope"
" the-struct_148)"
"(root-expand-context-top-level-bind-scope"
" the-struct_148)"
"(root-expand-context-all-scopes-stx the-struct_148)"
"(root-expand-context-use-site-scopes the-struct_148)"
"(root-expand-context-defined-syms the-struct_148)"
"(root-expand-context-frame-id the-struct_148)"
"(root-expand-context-counter the-struct_148)"
"(root-expand-context-lift-key the-struct_148)"
"(expand-context-context the-struct_148)"
"(expand-context-phase the-struct_148)"
"(expand-context-namespace the-struct_148)"
" env53_149"
"(expand-context-post-expansion-scope-action"
" the-struct_148)"
"(expand-context-scopes the-struct_148)"
"(expand-context-def-ctx-scopes the-struct_148)"
"(expand-context-reference-records the-struct_148)"
"(expand-context-only-immediate? the-struct_148)"
"(expand-context-just-once? the-struct_148)"
"(expand-context-module-begin-k the-struct_148)"
"(expand-context-need-eventually-defined"
" the-struct_148)"
"(expand-context-allow-unbound? the-struct_148)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_148)"
"(expand-context-stops the-struct_148)"
"(expand-context-current-introduction-scopes"
" the-struct_148)"
"(expand-context-declared-submodule-names"
" the-struct_148)"
"(expand-context-lifts the-struct_148)"
"(expand-context-lift-envs the-struct_148)"
"(expand-context-module-lifts the-struct_148)"
"(expand-context-require-lifts the-struct_148)"
"(expand-context-to-module-lifts the-struct_148)"
"(expand-context-requires+provides the-struct_148)"
"(expand-context-name the-struct_148)"
"(expand-context-observer the-struct_148)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_148))))"
"((temp51_146) 'expression)"
"((intdef52_147) intdef_92))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" temp51_146"
" intdef52_147"
" '#f"
" '#f"
" '#f"
" '#f"
" temp50_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:78:33_144"
" keyword-procedure-extract"
" '(#:context #:intdefs)"
" '3)"
" '(#:context #:intdefs)"
"(list temp51_146 intdef52_147)"
" temp50_145)))))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_150) ids_90))"
"(begin"
"(if(list? lst_150)(void)(let-values()(in-list lst_150)))"
"((letrec-values(((for-loop_151)"
"(lambda(fold-var_152 lst_153)"
"(if(pair? lst_153)"
"(let-values(((id_154)(unsafe-car lst_153)))"
"(if '#t"
"(let-values(((fold-var_155)"
"(let-values(((fold-var_156)"
" fold-var_152))"
"(let-values(((fold-var_157)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_156))))"
"(values fold-var_157)))))"
"(if '#t"
"(for-loop_151"
" fold-var_155"
"(unsafe-cdr lst_153))"
" fold-var_155))"
" fold-var_152))"
" fold-var_152))))"
" for-loop_151)"
" null"
" lst_150))))))))"
"(let-values(((env-mixins_99)(internal-definition-context-env-mixins intdef_92)))"
"(begin"
"(set-box!"
" env-mixins_99"
"(append"
"(alt-reverse"
"(let-values(((lst_158) intdef-ids_96)((lst_159) syms_97)((lst_160) vals_98))"
"(begin"
"(if(list? lst_158)(void)(let-values()(in-list lst_158)))"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"(if(list? lst_160)(void)(let-values()(in-list lst_160)))"
"((letrec-values(((for-loop_161)"
"(lambda(fold-var_162 lst_163 lst_164 lst_165)"
"(if(if(pair? lst_163)"
"(if(pair? lst_164)(pair? lst_165) '#f)"
" '#f)"
"(let-values(((intdef-id_166)(unsafe-car lst_163))"
"((sym_167)(unsafe-car lst_164))"
"((val_168)(unsafe-car lst_165)))"
"(if(if '#t(if '#t '#t '#f) '#f)"
"(let-values(((fold-var_169)"
"(let-values(((fold-var_170) fold-var_162))"
"(let-values(((fold-var_171)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_168"
" intdef-id_166"
" phase_94)"
"(env-mixin2.1"
" intdef-id_166"
" sym_167"
" val_168"
"(make-weak-hasheq))))"
" fold-var_170))))"
"(values fold-var_171)))))"
"(if(if '#t(if '#t '#t '#f) '#f)"
"(for-loop_161"
" fold-var_169"
"(unsafe-cdr lst_163)"
"(unsafe-cdr lst_164)"
"(unsafe-cdr lst_165))"
" fold-var_169))"
" fold-var_162))"
" fold-var_162))))"
" for-loop_161)"
" null"
" lst_158"
" lst_159"
" lst_160))))"
"(unbox env-mixins_99)))"
"(let-values(((obs_172)(expand-context-observer ctx_93)))"
"(if obs_172"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_172 'exit-local-bind))(void)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_173)"
"(begin"
"(if(1/internal-definition-context? intdef_173)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
" '\"internal-definition-context?\""
" intdef_173)))"
"(alt-reverse"
"(let-values(((lst_174)(unbox(internal-definition-context-env-mixins intdef_173))))"
"(begin"
"(if(list? lst_174)(void)(let-values()(in-list lst_174)))"
"((letrec-values(((for-loop_175)"
"(lambda(fold-var_176 lst_177)"
"(if(pair? lst_177)"
"(let-values(((env-mixin_178)(unsafe-car lst_177)))"
"(if '#t"
"(let-values(((fold-var_179)"
"(let-values(((fold-var_180) fold-var_176))"
"(let-values(((fold-var_181)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_178))"
" fold-var_180))))"
"(values fold-var_181)))))"
"(if '#t(for-loop_175 fold-var_179(unsafe-cdr lst_177)) fold-var_179))"
" fold-var_176))"
" fold-var_176))))"
" for-loop_175)"
" null"
" lst_174)))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_182)"
"(lambda(intdef11_183 s12_184 mode9_185 mode10_186)"
"(let-values(((intdef_187) intdef11_183))"
"(let-values(((s_188) s12_184))"
"(let-values(((mode_189)(if mode10_186 mode9_185 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_187)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
" '\"internal-definition-context?\""
" intdef_187)))"
"(if(syntax?$1 s_188)"
"(void)"
"(let-values()"
" (raise-argument-error 'internal-definition-context-introduce '\"syntax?\" s_188)))"
"(let-values(((...finition-context.rkt:106:2_190) add-intdef-scopes23.1)"
"((s54_191) s_188)"
"((intdef55_192) intdef_187)"
"((temp56_193)"
"(let-values(((tmp_194) mode_189))"
"(if(equal? tmp_194 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_194 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_194 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
" '\"(or/c 'add 'remove 'flip)\""
" mode_189))))))))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 temp56_193 '#t '#f '#f s54_191 intdef55_192)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:106:2_190"
" keyword-procedure-extract"
" '(#:action)"
" '4)"
" '(#:action)"
"(list temp56_193)"
" s54_191"
" intdef55_192)))))))))))"
"(case-lambda"
"((intdef_195 s_196)(internal-definition-context-introduce13_182 intdef_195 s_196 '#f '#f))"
"((intdef_197 s_198 mode9_199)(internal-definition-context-introduce13_182 intdef_197 s_198 mode9_199 '#t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_200)"
"(begin"
"(if(1/internal-definition-context? intdef_200)"
"(void)"
"(let-values()"
" (raise-argument-error 'internal-definition-context-seal '\"internal-definition-context?\" intdef_200)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_201 intdef_202)"
"(begin"
"(if(identifier? id_201)"
"(void)"
" (let-values () (raise-argument-error 'identifier-remove-from-definition-context '\"identifier?\" id_201)))"
"(if(let-values(((or-part_203)(1/internal-definition-context? intdef_202)))"
"(if or-part_203"
" or-part_203"
"(if(list? intdef_202)(andmap2 1/internal-definition-context? intdef_202) '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
" '\"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_202)))"
"(let-values(((pos->vals_204 pos-next_205 init_206 pos-cont?_207 val-cont?_208 all-cont?_209)"
"(make-sequence '(intdef)(in-intdefs intdef_202))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_210)"
"(lambda(id_211 pos_212)"
"(if(if pos-cont?_207(pos-cont?_207 pos_212) '#t)"
"(let-values(((intdef_213)(pos->vals_204 pos_212)))"
"(if(if val-cont?_208(val-cont?_208 intdef_213) '#t)"
"(let-values(((id_214)"
"(let-values(((id_215) id_211))"
"(let-values(((id_216)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_213"
" id_215"
" 'remove))))"
"(values id_216)))))"
"(if(if all-cont?_209(all-cont?_209 pos_212 intdef_213) '#t)"
"(for-loop_210 id_214(pos-next_205 pos_212))"
" id_214))"
" id_211))"
" id_211))))"
" for-loop_210)"
" id_201"
" init_206))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_217)"
"(if(not intdefs_217)"
"(let-values()(in-list null))"
"(if(list? intdefs_217)"
"(let-values()(in-list(alt-reverse intdefs_217)))"
"(let-values()(in-value intdefs_217))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_218 intdefs_219)"
"(let-values(((pos->vals_220 pos-next_221 init_222 pos-cont?_223 val-cont?_224 all-cont?_225)"
"(make-sequence '(intdef)(in-intdefs intdefs_219))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_226)"
"(lambda(env_227 pos_228)"
"(if(if pos-cont?_223(pos-cont?_223 pos_228) '#t)"
"(let-values(((intdef_229)(pos->vals_220 pos_228)))"
"(if(if val-cont?_224(val-cont?_224 intdef_229) '#t)"
"(let-values(((env_230)"
"(let-values(((env_231) env_227))"
"(let-values(((env_232)"
"(let-values()"
"(let-values(((env-mixins_233)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_229))))"
"((letrec-values(((loop_234)"
"(lambda(env_235 env-mixins_236)"
"(if(null? env-mixins_236)"
"(let-values() env_235)"
"(let-values()"
"(let-values(((env-mixin_237)"
"(car"
" env-mixins_236)))"
"(let-values(((or-part_238)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" '#f)))"
"(if or-part_238"
" or-part_238"
"(let-values(((new-env_239)"
"(env-extend"
"(loop_234"
" env_235"
"(cdr"
" env-mixins_236))"
"(env-mixin-sym"
" env-mixin_237)"
"(env-mixin-value"
" env-mixin_237))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" new-env_239)"
" new-env_239))))))))))"
" loop_234)"
" env_231"
" env-mixins_233)))))"
"(values env_232)))))"
"(if(if all-cont?_225(all-cont?_225 pos_228 intdef_229) '#t)"
"(for-loop_226 env_230(pos-next_221 pos_228))"
" env_230))"
" env_227))"
" env_227))))"
" for-loop_226)"
" env_218"
" init_222)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_240 action18_241 always?15_242 always?17_243 s19_244 intdefs20_245)"
"(let-values(((s_246) s19_244))"
"(let-values(((intdefs_247) intdefs20_245))"
"(let-values(((always?_248)(if always?17_243 always?15_242 '#f)))"
"(let-values(((action_249)(if action18_241 action16_240 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_250 pos-next_251 init_252 pos-cont?_253 val-cont?_254 all-cont?_255)"
"(make-sequence '(intdef)(in-intdefs intdefs_247))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_256)"
"(lambda(s_257 pos_258)"
"(if(if pos-cont?_253(pos-cont?_253 pos_258) '#t)"
"(let-values(((intdef_259)(pos->vals_250 pos_258)))"
"(if(if val-cont?_254(val-cont?_254 intdef_259) '#t)"
"(let-values(((s_260)"
"(let-values(((s_261) s_257))"
"(if(let-values(((or-part_262) always?_248))"
"(if or-part_262"
" or-part_262"
"(internal-definition-context-add-scope?"
" intdef_259)))"
"(let-values(((s_263) s_261))"
"(let-values(((s_264)"
"(let-values()"
"(action_249"
" s_263"
"(internal-definition-context-scope"
" intdef_259)))))"
"(values s_264)))"
" s_261))))"
"(if(if all-cont?_255(all-cont?_255 pos_258 intdef_259) '#t)"
"(for-loop_256 s_260(pos-next_251 pos_258))"
" s_260))"
" s_257))"
" s_257))))"
" for-loop_256)"
" s_246"
" init_252))))))))))"
"(define-values"
"(unpack22.1$1)"
"(lambda(given-kws_265 given-args_266 s19_267 intdefs20_268)"
"(let-values(((action18_269)(if(pair? given-kws_265)(eq? '#:action(car given-kws_265)) '#f)))"
"(let-values(((action16_270)(if action18_269(car given-args_266)(void)))"
"((given-kws_271)(if action18_269(cdr given-kws_265) given-kws_265))"
"((given-args_272)(if action18_269(cdr given-args_266) given-args_266)))"
"(let-values(((always?17_273)(pair? given-kws_271)))"
"(let-values(((always?15_274)(if always?17_273(car given-args_272)(void))))"
"(add-intdef-scopes21.1 action16_270 action18_269 always?15_274 always?17_273 s19_267 intdefs20_268)))))))"
"(define-values"
"(add-intdef-scopes23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_275 given-argc_276)"
"(if(= given-argc_276 '4)"
"(let-values(((l1_277) given-kws_275))"
"(let-values(((l1_278)(if(null? l1_277) l1_277(if(eq?(car l1_277) '#:action)(cdr l1_277) l1_277))))"
"(let-values(((l1_279) l1_278))"
"(let-values(((l1_280)(if(null? l1_279) l1_279(if(eq?(car l1_279) '#:always?)(cdr l1_279) l1_279))))"
"(null? l1_280)))))"
" '#f))"
"(case-lambda"
"((given-kws_281 given-args_282 s_283 intdefs_284)(unpack22.1$1 given-kws_281 given-args_282 s_283 intdefs_284)))"
" null"
" '(#:action #:always?)"
"(let-values(((add-intdef-scopes_285)"
"(case-lambda((s_286 intdefs_287)(unpack22.1$1 null null s_286 intdefs_287)))))"
" add-intdef-scopes_285)))"
"(define-values"
"(lifted/1.1$19)"
"(make-required"
" 'make-local-expand-context"
"(case-lambda((self_288 ctx_289)(apply missing-kw self_288 ctx_289 null)))"
" '#f"
" '#f))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_290 intdefs26_291 phase25_292 phase29_293 stop-ids27_294 stop-ids31_295 ctx32_296)"
"(let-values(((ctx_297) ctx32_296))"
"(let-values(((context_298) context24_290))"
"(let-values(((phase_299)(if phase29_293 phase25_292(expand-context-phase ctx_297))))"
"(let-values(((intdefs_300) intdefs26_291))"
"(let-values(((stop-ids_301)(if stop-ids31_295 stop-ids27_294 '#f)))"
"(let-values()"
"(let-values(((same-kind?_302)"
"(let-values(((or-part_304)(eq? context_298(expand-context-context ctx_297))))"
"(if or-part_304"
" or-part_304"
"(if(list? context_298)(list?(expand-context-context ctx_297)) '#f)))))"
"(let-values(((all-stop-ids_303)"
"(if stop-ids_301(stop-ids->all-stop-ids stop-ids_301 phase_299) '#f)))"
"(let-values(((the-struct_305) ctx_297))"
"(if(expand-context? the-struct_305)"
"(let-values(((context57_306) context_298)"
"((env58_307)(add-intdef-bindings(expand-context-env ctx_297) intdefs_300))"
"((use-site-scopes59_308)"
"(if(let-values(((or-part_319)(eq? context_298 'module)))"
"(if or-part_319 or-part_319(list? context_298)))"
"(let-values(((or-part_320)(root-expand-context-use-site-scopes ctx_297)))"
"(if or-part_320 or-part_320(box null)))"
" '#f))"
"((frame-id60_309)"
"(if same-kind?_302"
"(let-values()(root-expand-context-frame-id ctx_297))"
"(if(pair? intdefs_300)"
"(let-values()(internal-definition-context-frame-id(car intdefs_300)))"
"(let-values() '#f))))"
"((post-expansion-scope61_310)"
"(if intdefs_300"
"(new-scope 'macro)"
"(if same-kind?_302"
"(if(memq context_298 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_297)"
" '#f)"
" '#f)))"
"((post-expansion-scope-action62_311)"
"(if intdefs_300"
"(lambda(s_321 placeholder-sc_322)"
"(let-values(((s70_323) s_321)((intdefs71_324) intdefs_300))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 '#f '#f '#f '#f s70_323 intdefs71_324)"
"(add-intdef-scopes23.1 s70_323 intdefs71_324))))"
"(expand-context-post-expansion-scope-action ctx_297)))"
"((scopes63_312)"
"(append"
"(if(expand-context-def-ctx-scopes ctx_297)"
"(unbox(expand-context-def-ctx-scopes ctx_297))"
" null)"
"(expand-context-scopes ctx_297)))"
"((only-immediate?64_313)(not stop-ids_301))"
"((just-once?65_314) '#f)"
"((preserve-#%expression-and-do-not-add-#%top?66_315) '#t)"
"((stops67_316)"
"(free-id-set"
" phase_299"
"(let-values(((or-part_325) all-stop-ids_303))"
"(if or-part_325 or-part_325 null))))"
"((current-introduction-scopes68_317) null)"
"((all-scopes-stx69_318)"
"(let-values(((temp72_326)(root-expand-context-all-scopes-stx ctx_297))"
"((intdefs73_327) intdefs_300))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 '#f '#f '#f '#f temp72_326 intdefs73_327)"
"(add-intdef-scopes23.1 temp72_326 intdefs73_327)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_305)"
" post-expansion-scope61_310"
"(root-expand-context-top-level-bind-scope the-struct_305)"
" all-scopes-stx69_318"
" use-site-scopes59_308"
"(root-expand-context-defined-syms the-struct_305)"
" frame-id60_309"
"(root-expand-context-counter the-struct_305)"
"(root-expand-context-lift-key the-struct_305)"
" context57_306"
"(expand-context-phase the-struct_305)"
"(expand-context-namespace the-struct_305)"
" env58_307"
" post-expansion-scope-action62_311"
" scopes63_312"
"(expand-context-def-ctx-scopes the-struct_305)"
"(expand-context-reference-records the-struct_305)"
" only-immediate?64_313"
" just-once?65_314"
"(expand-context-module-begin-k the-struct_305)"
"(expand-context-need-eventually-defined the-struct_305)"
"(expand-context-allow-unbound? the-struct_305)"
" preserve-#%expression-and-do-not-add-#%top?66_315"
" stops67_316"
" current-introduction-scopes68_317"
"(expand-context-declared-submodule-names the-struct_305)"
"(expand-context-lifts the-struct_305)"
"(expand-context-lift-envs the-struct_305)"
"(expand-context-module-lifts the-struct_305)"
"(expand-context-require-lifts the-struct_305)"
"(expand-context-to-module-lifts the-struct_305)"
"(expand-context-requires+provides the-struct_305)"
"(expand-context-name the-struct_305)"
"(expand-context-observer the-struct_305)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_305)))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_328 given-args_329 ctx32_330)"
"(let-values(((context24_331)(car given-args_329))"
"((given-kws_332)(cdr given-kws_328))"
"((given-args_333)(cdr given-args_329)))"
"(let-values(((intdefs26_334)(car given-args_333))"
"((given-kws_335)(cdr given-kws_332))"
"((given-args_336)(cdr given-args_333)))"
"(let-values(((phase29_337)(if(pair? given-kws_335)(eq? '#:phase(car given-kws_335)) '#f)))"
"(let-values(((phase25_338)(if phase29_337(car given-args_336)(void)))"
"((given-kws_339)(if phase29_337(cdr given-kws_335) given-kws_335))"
"((given-args_340)(if phase29_337(cdr given-args_336) given-args_336)))"
"(let-values(((stop-ids31_341)(pair? given-kws_339)))"
"(let-values(((stop-ids27_342)(if stop-ids31_341(car given-args_340)(void))))"
"(make-local-expand-context33.1"
" context24_331"
" intdefs26_334"
" phase25_338"
" phase29_337"
" stop-ids27_342"
" stop-ids31_341"
" ctx32_330)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/1.1$19"
"(lambda(given-kws_343 given-argc_344)"
"(if(= given-argc_344 '3)"
"(subsets? '(#:context #:intdefs) given-kws_343 '(#:context #:intdefs #:phase #:stop-ids))"
" '#f))"
"(case-lambda((given-kws_345 given-args_346 ctx_347)(unpack34.1 given-kws_345 given-args_346 ctx_347)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_348 ctx_349)(flip-scopes s_348(expand-context-current-introduction-scopes ctx_349))))"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(if(let-values(((...and/syntax-local.rkt:63:7_3) get-current-expand-context8.1)((temp60_4) '#t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp60_4 '#t '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:63:7_3"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" '2)"
" '(#:fail-ok?)"
"(list temp60_4))))"
" '#t"
" '#f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_5)"
"(let-values(((...and/syntax-local.rkt:66:14_6) get-current-expand-context8.1)((temp61_7) '#t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp61_7 '#t '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:66:14_6"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" '2)"
" '(#:fail-ok?)"
"(list temp61_7))))))"
"(if ctx_5(if(expand-context-lifts ctx_5) '#t '#f) '#f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_8)"
"(let-values(((...and/syntax-local.rkt:72:14_9) get-current-expand-context8.1)((temp62_10) '#t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp62_10 '#t '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:72:14_9"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" '2)"
" '(#:fail-ok?)"
"(list temp62_10))))))"
"(if ctx_8(if(expand-context-to-module-lifts ctx_8) '#t '#f) '#f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_11)"
"(let-values(((...and/syntax-local.rkt:78:14_12) get-current-expand-context8.1)((temp63_13) '#t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp63_13 '#t '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:78:14_12"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" '2)"
" '(#:fail-ok?)"
"(list temp63_13))))))"
"(if ctx_11(if(expand-context-requires+provides ctx_11) '#t '#f) '#f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_14)"
"(let-values(((temp64_15) 'syntax-local-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp64_15 '#t)"
"(get-current-expand-context8.1 temp64_15)))))"
"(expand-context-context ctx_14))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_16)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_16)"
"(void)"
" (let-values () (raise-argument-error 'syntax-local-introduce '\"syntax?\" s_16)))"
"(values))))"
"(let-values(((ctx_17)"
"(let-values(((temp65_18) 'syntax-local-introduce))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp65_18 '#t)"
"(get-current-expand-context8.1 temp65_18)))))"
"(flip-introduction-scopes s_16 ctx_17)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_19)"
"(let-values((()"
"(begin"
"(if(identifier? id_19)"
"(void)"
" (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding '\"identifier?\" id_19)))"
"(values))))"
"(let-values(((ctx_20)"
"(let-values(((temp66_21) 'syntax-local-identifier-as-binding))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp66_21 '#t)"
"(get-current-expand-context8.1 temp66_21)))))"
"(remove-use-site-scopes id_19 ctx_20)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((...and/syntax-local.rkt:100:14_23) get-current-expand-context8.1)((temp67_24) '#t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp67_24 '#t '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:100:14_23"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" '2)"
" '(#:fail-ok?)"
"(list temp67_24))))))"
"(if ctx_22(expand-context-phase ctx_22) '0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_25)"
"(let-values(((temp68_27) 'syntax-local-name))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp68_27 '#t)"
"(get-current-expand-context8.1 temp68_27)))))"
"(let-values(((id_26)(expand-context-name ctx_25)))"
"(if id_26(datum->syntax$2 '#f(syntax-e$1 id_26) id_26) '#f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_28)"
"(lambda(as-use-site?1_29 as-use-site?2_30)"
"(let-values(((as-use-site?_31)(if as-use-site?2_30 as-use-site?1_29 '#f)))"
"(let-values()"
"(let-values(((sc_32)(new-scope(if as-use-site?_31 'use-site 'macro))))"
"(let-values(((core72_33)"
"(lambda(s71_34 mode69_35 mode70_36)"
"(let-values(((s_37) s71_34))"
"(let-values(((mode_38)(if mode70_36 mode69_35 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_37)"
"(void)"
"(let-values()"
" (raise-argument-error 'syntax-introducer '\"syntax?\" s_37)))"
"(let-values(((tmp_39) mode_38))"
"(if(equal? tmp_39 'add)"
"(let-values()(add-scope s_37 sc_32))"
"(if(equal? tmp_39 'remove)"
"(let-values()(remove-scope s_37 sc_32))"
"(if(equal? tmp_39 'flip)"
"(let-values()(flip-scope s_37 sc_32))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
" '\"(or/c 'add 'remove 'flip)\""
" mode_38)))))))))))))"
"(case-lambda"
"((s_40)(core72_33 s_40 '#f '#f))"
"((s_41 mode69_42)(core72_33 s_41 mode69_42 '#t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_28 '#f '#f))"
"((as-use-site?1_43)(make-syntax-introducer3_28 as-use-site?1_43 '#t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_44)"
"(lambda(ext-s7_45 base-s8_46 phase5_47 phase6_48)"
"(let-values(((ext-s_49) ext-s7_45))"
"(let-values(((base-s_50) base-s8_46))"
"(let-values(((phase_51)(if phase6_48 phase5_47(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_49)"
"(void)"
"(let-values()"
" (raise-argument-error 'make-syntax-delta-introducer '\"syntax?\" ext-s_49)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_56)(syntax?$1 base-s_50)))"
"(if or-part_56 or-part_56(not base-s_50)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" '\"(or/c syntax? #f)\""
" base-s_50)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_51)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_51)))"
"(values))))"
"(let-values(((ext-scs_52)(syntax-scope-set ext-s_49 phase_51)))"
"(let-values(((base-scs_53)"
"(syntax-scope-set"
"(let-values(((or-part_57) base-s_50))"
"(if or-part_57 or-part_57 empty-syntax))"
" phase_51)))"
"(let-values(((delta-scs_54)(set->list(set-subtract ext-scs_52 base-scs_53))))"
"(let-values(((maybe-taint_55)"
"(if(syntax-clean? ext-s_49) values syntax-taint$1)))"
"(let-values(((core77_58)"
"(lambda(s76_59 mode74_60 mode75_61)"
"(let-values(((s_62) s76_59))"
"(let-values(((mode_63)(if mode75_61 mode74_60 'add)))"
"(let-values()"
"(maybe-taint_55"
"(let-values(((tmp_64) mode_63))"
"(if(equal? tmp_64 'add)"
"(let-values()(add-scopes s_62 delta-scs_54))"
"(if(equal? tmp_64 'remove)"
"(let-values()(remove-scopes s_62 delta-scs_54))"
"(if(equal? tmp_64 'flip)"
"(let-values()(flip-scopes s_62 delta-scs_54))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
" '\"(or/c 'add 'remove 'flip)\""
" mode_63)))))))))))))"
"(case-lambda"
"((s_65)(core77_58 s_65 '#f '#f))"
"((s_66 mode74_67)(core77_58 s_66 mode74_67 '#t))))))))))))))))))"
"(case-lambda"
"((ext-s_68 base-s_69)(make-syntax-delta-introducer9_44 ext-s_68 base-s_69 '#f '#f))"
"((ext-s_70 base-s_71 phase5_72)(make-syntax-delta-introducer9_44 ext-s_70 base-s_71 phase5_72 '#t)))))"
"(define-values"
"(lifted/1.1$2)"
"(make-required"
" 'do-syntax-local-value"
"(case-lambda"
"((self_73 who_74 id_75 intdef_76 failure-thunk_77)"
"(apply missing-kw self_73 who_74 id_75 intdef_76 failure-thunk_77 null)))"
" '#f"
" '#f))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_78 who13_79 id14_80 intdef15_81 failure-thunk16_82)"
"(let-values(((who_83) who13_79))"
"(let-values(((id_84) id14_80))"
"(let-values(((intdef_85) intdef15_81))"
"(let-values(((failure-thunk_86) failure-thunk16_82))"
"(let-values(((immediate?_87) immediate?11_78))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_84)"
"(void)"
" (let-values () (raise-argument-error who_83 '\"identifier?\" id_84)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_91)(not failure-thunk_86)))"
"(if or-part_91"
" or-part_91"
"(if(procedure? failure-thunk_86)"
"(procedure-arity-includes? failure-thunk_86 '0)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_83"
" '\"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_86)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_92)(not intdef_85)))"
"(if or-part_92 or-part_92(1/internal-definition-context? intdef_85)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_83"
" '\"(or #f internal-definition-context?)\""
" failure-thunk_86)))"
"(values))))"
"(let-values(((current-ctx_88)"
"(let-values(((who79_93) who_83))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f who79_93 '#t)"
"(get-current-expand-context8.1 who79_93)))))"
"(let-values(((ctx_89)"
"(if intdef_85"
"(let-values(((the-struct_94) current-ctx_88))"
"(if(expand-context? the-struct_94)"
"(let-values(((env80_95)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_88)"
" intdef_85)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_94)"
"(root-expand-context-post-expansion-scope the-struct_94)"
"(root-expand-context-top-level-bind-scope the-struct_94)"
"(root-expand-context-all-scopes-stx the-struct_94)"
"(root-expand-context-use-site-scopes the-struct_94)"
"(root-expand-context-defined-syms the-struct_94)"
"(root-expand-context-frame-id the-struct_94)"
"(root-expand-context-counter the-struct_94)"
"(root-expand-context-lift-key the-struct_94)"
"(expand-context-context the-struct_94)"
"(expand-context-phase the-struct_94)"
"(expand-context-namespace the-struct_94)"
" env80_95"
"(expand-context-post-expansion-scope-action the-struct_94)"
"(expand-context-scopes the-struct_94)"
"(expand-context-def-ctx-scopes the-struct_94)"
"(expand-context-reference-records the-struct_94)"
"(expand-context-only-immediate? the-struct_94)"
"(expand-context-just-once? the-struct_94)"
"(expand-context-module-begin-k the-struct_94)"
"(expand-context-need-eventually-defined the-struct_94)"
"(expand-context-allow-unbound? the-struct_94)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_94)"
"(expand-context-stops the-struct_94)"
"(expand-context-current-introduction-scopes the-struct_94)"
"(expand-context-declared-submodule-names the-struct_94)"
"(expand-context-lifts the-struct_94)"
"(expand-context-lift-envs the-struct_94)"
"(expand-context-module-lifts the-struct_94)"
"(expand-context-require-lifts the-struct_94)"
"(expand-context-to-module-lifts the-struct_94)"
"(expand-context-requires+provides the-struct_94)"
"(expand-context-name the-struct_94)"
"(expand-context-observer the-struct_94)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_94)))"
" current-ctx_88)))"
"(let-values((()"
"(begin"
"(let-values(((obs_96)(expand-context-observer ctx_89)))"
"(if obs_96"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_96 'local-value id_84))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_90)(expand-context-phase ctx_89)))"
"((letrec-values(((loop_97)"
"(lambda(id_98)"
"(let-values(((b_99)"
"(if immediate?_87"
"(let-values(((...and/syntax-local.rkt:168:18_100)"
" resolve+shift15.1)"
"((id81_101) id_98)"
"((phase82_102) phase_90)"
"((temp83_103) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp83_103"
" '#t"
" '#f"
" '#f"
" id81_101"
" phase82_102)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:168:18_100"
" keyword-procedure-extract"
" '(#:immediate?)"
" '4)"
" '(#:immediate?)"
"(list temp83_103)"
" id81_101"
" phase82_102)))"
"(resolve+shift/extra-inspector"
" id_98"
" phase_90"
"(expand-context-namespace ctx_89)))))"
"(begin"
"(let-values(((obs_104)(expand-context-observer ctx_89)))"
"(if obs_104"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_104 'resolve id_98))"
"(void)))"
"(void)))"
"(if(not b_99)"
"(let-values()"
"(begin"
"(let-values(((obs_105)(expand-context-observer ctx_89)))"
"(if obs_105"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_105"
" 'local-value-result"
" '#f))"
"(void)))"
"(void)))"
"(if failure-thunk_86"
"(failure-thunk_86)"
"(error"
" 'syntax-local-value"
" '\"unbound identifier: ~v\""
" id_98))))"
"(let-values()"
"(let-values(((v_106 insp_107)"
"(let-values(((...and/syntax-local.rkt:178:30_108)"
" lookup17.1)"
"((b84_109) b_99)"
"((ctx85_110) ctx_89)"
"((id86_111) id_98)"
"((temp87_112) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" '#f"
" '#f"
" temp87_112"
" '#t"
" b84_109"
" ctx85_110"
" id86_111)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:178:30_108"
" keyword-procedure-extract"
" '(#:out-of-context-as-variable?)"
" '5)"
" '(#:out-of-context-as-variable?)"
"(list temp87_112)"
" b84_109"
" ctx85_110"
" id86_111)))))"
"(if(let-values(((or-part_113)(variable? v_106)))"
"(if or-part_113 or-part_113(core-form? v_106)))"
"(let-values()"
"(begin"
"(let-values(((obs_114)"
"(expand-context-observer ctx_89)))"
"(if obs_114"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_114"
" 'local-value-result"
" '#f))"
"(void)))"
"(void)))"
"(if failure-thunk_86"
"(failure-thunk_86)"
"(error"
" 'syntax-local-value"
" '\"identifier is not bound to syntax: ~v\""
" id_98))))"
"(let-values()"
"(begin"
"(let-values(((obs_115)"
"(expand-context-observer ctx_89)))"
"(if obs_115"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_115"
" 'local-value-result"
" '#t))"
"(void)))"
"(void)))"
"(if(1/rename-transformer? v_106)"
"(let-values()"
"(if immediate?_87"
"(values"
" v_106"
"(1/rename-transformer-target v_106))"
"(loop_97(1/rename-transformer-target v_106))))"
"(if immediate?_87"
"(let-values()(values v_106 '#f))"
"(let-values() v_106))))))))))))))"
" loop_97)"
"(flip-introduction-scopes id_84 ctx_89)))))))))))))))))"
"(define-values"
"(unpack18.1$1)"
"(lambda(given-kws_116 given-args_117 who13_118 id14_119 intdef15_120 failure-thunk16_121)"
"(let-values(((immediate?11_122)(car given-args_117)))"
"(do-syntax-local-value17.1 immediate?11_122 who13_118 id14_119 intdef15_120 failure-thunk16_121))))"
"(define-values"
"(do-syntax-local-value19.1)"
"(lifted/1.1$2"
"(lambda(given-kws_123 given-argc_124)"
"(if(= given-argc_124 '6)"
"(let-values(((l2_125) given-kws_123))"
"(if(pair? l2_125)(if(eq?(car l2_125) '#:immediate?)(null?(cdr l2_125)) '#f) '#f))"
" '#f))"
"(case-lambda"
"((given-kws_126 given-args_127 who_128 id_129 intdef_130 failure-thunk_131)"
"(unpack18.1$1 given-kws_126 given-args_127 who_128 id_129 intdef_130 failure-thunk_131)))"
" '(#:immediate?)"
" '(#:immediate?)))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_132)"
"(lambda(id24_133 failure-thunk20_134 intdef21_135 failure-thunk22_136 intdef23_137)"
"(let-values(((id_138) id24_133))"
"(let-values(((failure-thunk_139)(if failure-thunk22_136 failure-thunk20_134 '#f)))"
"(let-values(((intdef_140)(if intdef23_137 intdef21_135 '#f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:196:2_141) do-syntax-local-value19.1)"
"((temp88_142) 'syntax-local-value)"
"((temp89_143) '#f)"
"((id90_144) id_138)"
"((intdef91_145) intdef_140)"
"((failure-thunk92_146) failure-thunk_139))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp89_143"
" temp88_142"
" id90_144"
" intdef91_145"
" failure-thunk92_146)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:196:2_141"
" keyword-procedure-extract"
" '(#:immediate?)"
" '6)"
" '(#:immediate?)"
"(list temp89_143)"
" temp88_142"
" id90_144"
" intdef91_145"
" failure-thunk92_146))))))))))"
"(case-lambda"
"((id_147)(syntax-local-value25_132 id_147 '#f '#f '#f '#f))"
"((id_148 failure-thunk_149 intdef21_150)(syntax-local-value25_132 id_148 failure-thunk_149 intdef21_150 '#t '#t))"
"((id_151 failure-thunk20_152)(syntax-local-value25_132 id_151 failure-thunk20_152 '#f '#t '#f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_153)"
"(lambda(id31_154 failure-thunk27_155 intdef28_156 failure-thunk29_157 intdef30_158)"
"(let-values(((id_159) id31_154))"
"(let-values(((failure-thunk_160)(if failure-thunk29_157 failure-thunk27_155 '#f)))"
"(let-values(((intdef_161)(if intdef30_158 intdef28_156 '#f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:199:2_162) do-syntax-local-value19.1)"
"((temp93_163) 'syntax-local-value/immediate)"
"((temp94_164) '#t)"
"((id95_165) id_159)"
"((intdef96_166) intdef_161)"
"((failure-thunk97_167) failure-thunk_160))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp94_164"
" temp93_163"
" id95_165"
" intdef96_166"
" failure-thunk97_167)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:199:2_162"
" keyword-procedure-extract"
" '(#:immediate?)"
" '6)"
" '(#:immediate?)"
"(list temp94_164)"
" temp93_163"
" id95_165"
" intdef96_166"
" failure-thunk97_167))))))))))"
"(case-lambda"
"((id_168)(syntax-local-value/immediate32_153 id_168 '#f '#f '#f '#f))"
"((id_169 failure-thunk_170 intdef28_171)"
"(syntax-local-value/immediate32_153 id_169 failure-thunk_170 intdef28_171 '#t '#t))"
"((id_172 failure-thunk27_173)(syntax-local-value/immediate32_153 id_172 failure-thunk27_173 '#f '#t '#f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_174 n_175 s_176)"
"(let-values((()"
"(begin"
" (if (syntax?$1 s_176) (void) (let-values () (raise-argument-error who_174 '\"syntax?\" s_176)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_175)"
"(void)"
" (let-values () (raise-argument-error who_174 '\"exact-nonnegative-integer?\" n_175)))"
"(values))))"
"(let-values(((ctx_177)"
"(let-values(((who98_181) who_174))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f who98_181 '#t)"
"(get-current-expand-context8.1 who98_181)))))"
"(let-values(((lifts_178)(expand-context-lifts ctx_177)))"
"(let-values(((counter_179)(root-expand-context-counter ctx_177)))"
"(let-values(((ids_180)"
"(alt-reverse"
"(let-values(((start_182) '0)((end_183) n_175)((inc_184) '1))"
"(begin"
"(if(if(real? start_182)(if(real? end_183)(real? inc_184) '#f) '#f)"
"(void)"
"(let-values()(in-range start_182 end_183 inc_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(fold-var_186 pos_187)"
"(if(< pos_187 end_183)"
"(let-values(((i_188) pos_187))"
"(if '#t"
"(let-values(((fold-var_189)"
"(let-values(((fold-var_190) fold-var_186))"
"(let-values(((fold-var_191)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_179"
"(add1"
"(unbox"
" counter_179)))"
"(values))))"
"(let-values(((name_192)"
"(string->unreadable-symbol"
"(format"
" '\"lifted/~a\""
"(unbox"
" counter_179)))))"
"(add-scope"
"(datum->syntax$2"
" '#f"
" name_192)"
"(new-scope"
" 'macro)))))"
" fold-var_190))))"
"(values fold-var_191)))))"
"(if '#t"
"(for-loop_185 fold-var_189(+ pos_187 inc_184))"
" fold-var_189))"
" fold-var_186))"
" fold-var_186))))"
" for-loop_185)"
" null"
" start_182))))))"
"(begin"
"(let-values(((obs_193)(expand-context-observer ctx_177)))"
"(if obs_193"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_193 'local-lift ids_180 s_176))(void)))"
"(void)))"
"(map2"
"(lambda(id_194)(flip-introduction-scopes id_194 ctx_177))"
"(add-lifted!"
" lifts_178"
" ids_180"
"(flip-introduction-scopes s_176 ctx_177)"
"(expand-context-phase ctx_177))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_195)(car(do-lift-values-expression 'syntax-local-lift-expression '1 s_195))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_196 s_197)(do-lift-values-expression 'syntax-local-lift-values-expression n_196 s_197)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_198)"
"(let-values(((temp99_199) 'syntax-local-lift-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp99_199 '#t)"
"(get-current-expand-context8.1 temp99_199)))))"
"(root-expand-context-lift-key ctx_198))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_200)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_200)"
"(void)"
" (let-values () (raise-argument-error 'syntax-local-lift-module '\"syntax?\" s_200)))"
"(values))))"
"(let-values(((ctx_201)"
"(let-values(((temp100_203) 'syntax-local-lift-module))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp100_203 '#t)"
"(get-current-expand-context8.1 temp100_203)))))"
"(let-values(((phase_202)(expand-context-phase ctx_201)))"
"(begin"
"(let-values(((tmp_204)(core-form-sym s_200 phase_202)))"
"(if(if(equal? tmp_204 'module) '#t(equal? tmp_204 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_201) s_200 phase_202))"
"(let-values()"
" (raise-arguments-error 'syntax-local-lift-module '\"not a module form\" '\"given form\" s_200))))"
"(let-values(((obs_205)(expand-context-observer ctx_201)))"
"(if obs_205"
"(let-values()(if '#t(let-values()(call-expand-observe obs_205 'lift-statement s_200))(void)))"
"(void)))))))))"
"(define-values"
"(lifted/2.1$8)"
"(make-required"
" 'do-local-lift-to-module"
"(case-lambda((self_206 who_207 s_208)(apply missing-kw self_206 who_207 s_208 null)))"
" '#f"
" '#f))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_209"
" get-lift-ctx36_210"
" get-wrt-phase38_211"
" intro?34_212"
" intro?42_213"
" more-checks35_214"
" more-checks43_215"
" post-wrap41_216"
" post-wrap49_217"
" pre-wrap39_218"
" pre-wrap47_219"
" shift-wrap40_220"
" shift-wrap48_221"
" who50_222"
" s51_223)"
"(let-values(((who_224) who50_222))"
"(let-values(((s_225) s51_223))"
"(let-values(((intro?_226)(if intro?42_213 intro?34_212 '#t)))"
"(let-values(((more-checks_227)(if more-checks43_215 more-checks35_214 void)))"
"(let-values(((get-lift-ctx_228) get-lift-ctx36_210))"
"(let-values(((add-lifted!_229) add-lifted!37_209))"
"(let-values(((get-wrt-phase_230) get-wrt-phase38_211))"
"(let-values(((pre-wrap_231)"
"(if pre-wrap47_219 pre-wrap39_218(lambda(s_232 phase_233 lift-ctx_234) s_232))))"
"(let-values(((shift-wrap_235)"
"(if shift-wrap48_221 shift-wrap40_220(lambda(s_236 phase_237 lift-ctx_238) s_236))))"
"(let-values(((post-wrap_239)"
"(if post-wrap49_217 post-wrap41_216(lambda(s_240 phase_241 lift-ctx_242) s_240))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_225)"
"(void)"
" (let-values () (raise-argument-error who_224 '\"syntax?\" s_225)))"
"(values))))"
"(let-values((()(begin(more-checks_227)(values))))"
"(let-values(((ctx_243)"
"(let-values(((who101_251) who_224))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f who101_251 '#t)"
"(get-current-expand-context8.1 who101_251)))))"
"(let-values(((lift-ctx_244)(get-lift-ctx_228 ctx_243)))"
"(let-values(((phase_245)(expand-context-phase ctx_243)))"
"(let-values(((wrt-phase_246)(get-wrt-phase_230 lift-ctx_244)))"
"(let-values(((added-s_247)"
"(if intro?_226(flip-introduction-scopes s_225 ctx_243) s_225)))"
"(let-values(((pre-s_248)(pre-wrap_231 added-s_247 phase_245 lift-ctx_244)))"
"(let-values(((shift-s_249)"
"(let-values(((start_252) phase_245)"
"((end_253) wrt-phase_246)"
"((inc_254) '-1))"
"(begin"
"(if(if(real? start_252)"
"(if(real? end_253)(real? inc_254) '#f)"
" '#f)"
"(void)"
"(let-values()(in-range start_252 end_253 inc_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(s_256 pos_257)"
"(if(> pos_257 end_253)"
"(let-values(((phase_258) pos_257))"
"(if '#t"
"(let-values(((s_259)"
"(let-values(((s_260)"
" s_256))"
"(let-values(((s_261)"
"(let-values()"
"(shift-wrap_235"
" s_260"
"(sub1"
" phase_258)"
" lift-ctx_244))))"
"(values"
" s_261)))))"
"(if '#t"
"(for-loop_255"
" s_259"
"(+ pos_257 inc_254))"
" s_259))"
" s_256))"
" s_256))))"
" for-loop_255)"
" pre-s_248"
" start_252)))))"
"(let-values(((post-s_250)"
"(post-wrap_239 shift-s_249 wrt-phase_246 lift-ctx_244)))"
"(begin"
"(add-lifted!_229 lift-ctx_244 post-s_250 wrt-phase_246)"
"(values ctx_243 added-s_247)))))))))))))))))))))))))"
"(define-values"
"(unpack53.1)"
"(lambda(given-kws_262 given-args_263 who50_264 s51_265)"
"(let-values(((add-lifted!37_266)(car given-args_263))"
"((given-kws_267)(cdr given-kws_262))"
"((given-args_268)(cdr given-args_263)))"
"(let-values(((get-lift-ctx36_269)(car given-args_268))"
"((given-kws_270)(cdr given-kws_267))"
"((given-args_271)(cdr given-args_268)))"
"(let-values(((get-wrt-phase38_272)(car given-args_271))"
"((given-kws_273)(cdr given-kws_270))"
"((given-args_274)(cdr given-args_271)))"
"(let-values(((intro?42_275)(if(pair? given-kws_273)(eq? '#:intro?(car given-kws_273)) '#f)))"
"(let-values(((intro?34_276)(if intro?42_275(car given-args_274)(void)))"
"((given-kws_277)(if intro?42_275(cdr given-kws_273) given-kws_273))"
"((given-args_278)(if intro?42_275(cdr given-args_274) given-args_274)))"
"(let-values(((more-checks43_279)"
"(if(pair? given-kws_277)(eq? '#:more-checks(car given-kws_277)) '#f)))"
"(let-values(((more-checks35_280)(if more-checks43_279(car given-args_278)(void)))"
"((given-kws_281)(if more-checks43_279(cdr given-kws_277) given-kws_277))"
"((given-args_282)(if more-checks43_279(cdr given-args_278) given-args_278)))"
"(let-values(((post-wrap49_283)"
"(if(pair? given-kws_281)(eq? '#:post-wrap(car given-kws_281)) '#f)))"
"(let-values(((post-wrap41_284)(if post-wrap49_283(car given-args_282)(void)))"
"((given-kws_285)(if post-wrap49_283(cdr given-kws_281) given-kws_281))"
"((given-args_286)(if post-wrap49_283(cdr given-args_282) given-args_282)))"
"(let-values(((pre-wrap47_287)"
"(if(pair? given-kws_285)(eq? '#:pre-wrap(car given-kws_285)) '#f)))"
"(let-values(((pre-wrap39_288)(if pre-wrap47_287(car given-args_286)(void)))"
"((given-kws_289)(if pre-wrap47_287(cdr given-kws_285) given-kws_285))"
"((given-args_290)(if pre-wrap47_287(cdr given-args_286) given-args_286)))"
"(let-values(((shift-wrap48_291)(pair? given-kws_289)))"
"(let-values(((shift-wrap40_292)(if shift-wrap48_291(car given-args_290)(void))))"
"(do-local-lift-to-module52.1"
" add-lifted!37_266"
" get-lift-ctx36_269"
" get-wrt-phase38_272"
" intro?34_276"
" intro?42_275"
" more-checks35_280"
" more-checks43_279"
" post-wrap41_284"
" post-wrap49_283"
" pre-wrap39_288"
" pre-wrap47_287"
" shift-wrap40_292"
" shift-wrap48_291"
" who50_264"
" s51_265))))))))))))))))"
"(define-values"
"(do-local-lift-to-module54.1)"
"(lifted/2.1$8"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 '4)"
"(subsets?"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" given-kws_293"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap))"
" '#f))"
"(case-lambda((given-kws_295 given-args_296 who_297 s_298)(unpack53.1 given-kws_295 given-args_296 who_297 s_298)))"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap)))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_299 use-s_300)"
"(let-values(((sc_301)(new-scope 'macro)))"
"(let-values(((ctx_302 added-s_303)"
"(let-values(((...and/syntax-local.rkt:273:4_305) do-local-lift-to-module54.1)"
"((temp102_306) 'syntax-local-lift-require)"
"((temp103_307)(datum->syntax$2 '#f s_299))"
"((temp104_308) '#f)"
"((temp105_309)"
"(lambda()"
"(if(syntax?$1 use-s_300)"
"(void)"
"(let-values()"
" (raise-argument-error 'syntax-local-lift-require '\"syntax?\" use-s_300)))))"
"((expand-context-require-lifts106_310) expand-context-require-lifts)"
"((require-lift-context-wrt-phase107_311) require-lift-context-wrt-phase)"
"((add-lifted-require!108_312) add-lifted-require!)"
"((temp109_313)"
"(lambda(s_315 phase_316 require-lift-ctx_317)(require-spec-shift-for-syntax s_315)))"
"((temp110_314)"
"(lambda(s_318 phase_319 require-lift-ctx_320)"
"(wrap-form '#%require(add-scope s_318 sc_301) phase_319))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-require!108_312"
" expand-context-require-lifts106_310"
" require-lift-context-wrt-phase107_311"
" temp104_308"
" '#t"
" temp105_309"
" '#t"
" temp110_314"
" '#t"
" '#f"
" '#f"
" temp109_313"
" '#t"
" temp102_306"
" temp103_307)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:273:4_305"
" keyword-procedure-extract"
" '(#:add-lifted!"
" #:get-lift-ctx"
" #:get-wrt-phase"
" #:intro?"
" #:more-checks"
" #:post-wrap"
" #:shift-wrap)"
" '4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-require!108_312"
" expand-context-require-lifts106_310"
" require-lift-context-wrt-phase107_311"
" temp104_308"
" temp105_309"
" temp110_314"
" temp109_313)"
" temp102_306"
" temp103_307)))))"
"(let-values(((result-s_304)(add-scope use-s_300 sc_301)))"
"(begin"
"(let-values(((obs_321)(expand-context-observer ctx_302)))"
"(if obs_321"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_321 'lift-require added-s_303 use-s_300 result-s_304))"
"(void)))"
"(void)))"
" result-s_304))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_322)"
"(let-values(((ctx_323 result-s_324)"
"(let-values(((...and/syntax-local.rkt:296:4_325) do-local-lift-to-module54.1)"
"((temp111_326) 'syntax-local-lift-module-end-declaration)"
"((s112_327) s_322)"
"((expand-context-to-module-lifts113_328) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase114_329) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!115_330) add-lifted-to-module-provide!)"
"((temp116_331)"
"(lambda(s_333 phase_334 to-module-lift-ctx_335)(wrap-form 'for-syntax s_333 '#f)))"
"((temp117_332)"
"(lambda(s_336 phase_337 to-module-lift-ctx_338)"
"(wrap-form '#%provide s_336 phase_337))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!115_330"
" expand-context-to-module-lifts113_328"
" to-module-lift-context-wrt-phase114_329"
" '#f"
" '#f"
" '#f"
" '#f"
" temp117_332"
" '#t"
" '#f"
" '#f"
" temp116_331"
" '#t"
" temp111_326"
" s112_327)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:296:4_325"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
" '4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-provide!115_330"
" expand-context-to-module-lifts113_328"
" to-module-lift-context-wrt-phase114_329"
" temp117_332"
" temp116_331)"
" temp111_326"
" s112_327)))))"
"(let-values(((obs_339)(expand-context-observer ctx_323)))"
"(if obs_339"
"(let-values()(if '#t(let-values()(call-expand-observe obs_339 'lift-provide result-s_324))(void)))"
"(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_340)"
"(let-values(((ctx_341 also-s_342)"
"(let-values(((...and/syntax-local.rkt:311:4_343) do-local-lift-to-module54.1)"
"((temp118_344) 'syntax-local-lift-module-end-declaration)"
"((s119_345) s_340)"
"((expand-context-to-module-lifts120_346) expand-context-to-module-lifts)"
"((temp121_347)(lambda(lift-ctx_351) '0))"
"((add-lifted-to-module-end!122_348) add-lifted-to-module-end!)"
"((temp123_349)"
"(lambda(orig-s_352 phase_353 to-module-lift-ctx_354)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_354)"
"(wrap-form '#%expression orig-s_352 phase_353)"
" orig-s_352)))"
"((temp124_350)"
"(lambda(s_355 phase_356 to-module-lift-ctx_357)"
"(wrap-form 'begin-for-syntax s_355 phase_356))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!122_348"
" expand-context-to-module-lifts120_346"
" temp121_347"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp123_349"
" '#t"
" temp124_350"
" '#t"
" temp118_344"
" s119_345)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:311:4_343"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
" '4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-end!122_348"
" expand-context-to-module-lifts120_346"
" temp121_347"
" temp123_349"
" temp124_350)"
" temp118_344"
" s119_345)))))"
"(let-values(((obs_358)(expand-context-observer ctx_341)))"
"(if obs_358"
"(let-values()(if '#t(let-values()(call-expand-observe obs_358 'lift-statement s_340))(void)))"
"(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_359 s_360 phase_361)"
"(datum->syntax$2"
" '#f"
"(list(datum->syntax$2(if phase_361(syntax-shift-phase-level$1 core-stx phase_361) '#f) sym_359) s_360))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
" '\"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_362)"
"(let-values(((temp125_363) 'syntax-local-module-defined-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp125_363 '#t)"
"(get-current-expand-context8.1 temp125_363)))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_362)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_364 phase-level_365)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_370)(not mod-path_364)))"
"(if or-part_370 or-part_370(1/module-path? mod-path_364)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
" '\"(or/c module-path? #f)\""
" mod-path_364)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_371)(eq? phase-level_365 '#t)))"
"(if or-part_371 or-part_371(phase? phase-level_365)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
" (format '\"(or/c ~a #t)\" phase?-string)"
" phase-level_365)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
" '\"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_366)"
"(let-values(((temp126_372) 'syntax-local-module-required-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp126_372 '#t)"
"(get-current-expand-context8.1 temp126_372)))))"
"(let-values(((requires+provides_367)(expand-context-requires+provides ctx_366)))"
"(let-values(((mpi_368)"
"(if mod-path_364"
"(1/module-path-index-join mod-path_364(requires+provides-self requires+provides_367))"
" '#f)))"
"(let-values(((requireds_369)"
"(extract-all-module-requires"
" requires+provides_367"
" mpi_368"
"(if(eq? phase-level_365 '#t) 'all phase-level_365))))"
"(if requireds_369"
"(alt-reverse"
"(let-values(((ht_373)(requireds->phase-ht requireds_369)))"
"(begin"
"(if((lambda(ht_374)(hash? ht_374)) ht_373)(void)(let-values()(default-in-hash ht_373)))"
"((letrec-values(((for-loop_375)"
"(lambda(fold-var_376 i_377)"
"(if i_377"
"(let-values(((phase_378 ids_379)(hash-iterate-key+value ht_373 i_377)))"
"(if '#t"
"(let-values(((fold-var_380)"
"(let-values(((fold-var_381) fold-var_376))"
"(let-values(((fold-var_382)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_378 ids_379))"
" fold-var_381))))"
"(values fold-var_382)))))"
"(if '#t"
"(for-loop_375 fold-var_380(hash-iterate-next ht_373 i_377))"
" fold-var_380))"
" fold-var_376))"
" fold-var_376))))"
" for-loop_375)"
" null"
"(hash-iterate-first ht_373)))))"
" '#f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_383)"
"(let-values(((lst_384) requireds_383))"
"(begin"
"(if(list? lst_384)(void)(let-values()(in-list lst_384)))"
"((letrec-values(((for-loop_385)"
"(lambda(ht_386 lst_387)"
"(if(pair? lst_387)"
"(let-values(((r_388)(unsafe-car lst_387)))"
"(if '#t"
"(let-values(((ht_389)"
"(let-values(((ht_390) ht_386))"
"(let-values(((ht_391)"
"(let-values()"
"(hash-update"
" ht_390"
"(required-phase r_388)"
"(lambda(l_392)(cons(required-id r_388) l_392))"
" null))))"
"(values ht_391)))))"
"(if '#t(for-loop_385 ht_389(unsafe-cdr lst_387)) ht_389))"
" ht_386))"
" ht_386))))"
" for-loop_385)"
"(hasheqv)"
" lst_384)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_393)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_398)(1/module-path? mod-path_393)))"
"(if or-part_398"
" or-part_398"
"(if(syntax?$1 mod-path_393)(1/module-path?(syntax->datum$1 mod-path_393)) '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
" '\"(or/c module-path?\\n\""
" '\" (and/c syntax?\\n\""
" '\" (lambda (stx)\\n\""
" '\" (module-path? (syntax->datum stx)))))\")"
" mod-path_393)))"
"(values))))"
"(let-values(((ctx_394)"
"(let-values(((temp127_399) 'syntax-local-module-exports))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp127_399 '#t)"
"(get-current-expand-context8.1 temp127_399)))))"
"(let-values(((ns_395)(expand-context-namespace ctx_394)))"
"(let-values(((mod-name_396)"
"(resolve-module-path"
"(if(syntax?$1 mod-path_393)(syntax->datum$1 mod-path_393) mod-path_393)"
"(1/module-path-index-resolve(namespace-mpi ns_395)))))"
"(let-values(((m_397)(namespace->module ns_395 mod-name_396)))"
"(begin"
"(if m_397(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports)))"
"(alt-reverse"
"(let-values(((ht_400)(module-provides m_397)))"
"(begin"
"(if((lambda(ht_401)(hash? ht_401)) ht_400)(void)(let-values()(default-in-hash ht_400)))"
"((letrec-values(((for-loop_402)"
"(lambda(fold-var_403 i_404)"
"(if i_404"
"(let-values(((phase_405 syms_406)(hash-iterate-key+value ht_400 i_404)))"
"(if '#t"
"(let-values(((fold-var_407)"
"(let-values(((fold-var_408) fold-var_403))"
"(let-values(((fold-var_409)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_405"
"(alt-reverse"
"(let-values(((ht_410) syms_406))"
"(begin"
"(if((lambda(ht_411)"
"(hash? ht_411))"
" ht_410)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_410)))"
"((letrec-values(((for-loop_412)"
"(lambda(fold-var_413"
" i_414)"
"(if i_414"
"(let-values(((sym_415)"
"(hash-iterate-key"
" ht_410"
" i_414)))"
"(if '#t"
"(let-values(((fold-var_416)"
"(let-values(((fold-var_417)"
" fold-var_413))"
"(let-values(((fold-var_418)"
"(let-values()"
"(cons"
"(let-values()"
" sym_415)"
" fold-var_417))))"
"(values"
" fold-var_418)))))"
"(if '#t"
"(for-loop_412"
" fold-var_416"
"(hash-iterate-next"
" ht_410"
" i_414))"
" fold-var_416))"
" fold-var_413))"
" fold-var_413))))"
" for-loop_412)"
" null"
"(hash-iterate-first"
" ht_410)))))))"
" fold-var_408))))"
"(values fold-var_409)))))"
"(if '#t"
"(for-loop_402 fold-var_407(hash-iterate-next ht_400 i_404))"
" fold-var_407))"
" fold-var_403))"
" fold-var_403))))"
" for-loop_402)"
" null"
"(hash-iterate-first ht_400)))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_419)"
"(let-values(((temp128_421) 'syntax-local-submodules))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp128_421 '#t)"
"(get-current-expand-context8.1 temp128_421)))))"
"(let-values(((submods_420)(expand-context-declared-submodule-names ctx_419)))"
"(alt-reverse"
"(let-values(((ht_422)(unbox submods_420)))"
"(begin"
"(if((lambda(ht_423)(hash? ht_423)) ht_422)(void)(let-values()(default-in-hash ht_422)))"
"((letrec-values(((for-loop_424)"
"(lambda(fold-var_425 i_426)"
"(if i_426"
"(let-values(((name_427 kind_428)(hash-iterate-key+value ht_422 i_426)))"
"(if '#t"
"(let-values(((fold-var_429)"
"(let-values(((fold-var_430) fold-var_425))"
"(if(eq? kind_428 'module)"
"(let-values(((fold-var_431) fold-var_430))"
"(let-values(((fold-var_432)"
"(let-values()"
"(cons"
"(let-values() name_427)"
" fold-var_431))))"
"(values fold-var_432)))"
" fold-var_430))))"
"(if '#t"
"(for-loop_424 fold-var_429(hash-iterate-next ht_422 i_426))"
" fold-var_429))"
" fold-var_425))"
" fold-var_425))))"
" for-loop_424)"
" null"
"(hash-iterate-first ht_422)))))))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower58_433)"
"(lambda(id57_434 only-generated?55_435 only-generated?56_436)"
"(let-values(((id_437) id57_434))"
"(let-values(((only-generated?_438)(if only-generated?56_436 only-generated?55_435 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_437)"
"(void)"
"(let-values()"
" (raise-argument-error 'syntax-local-get-shadower '\"identifier?\" id_437)))"
"(values))))"
"(let-values(((ctx_439)"
"(let-values(((temp129_441) 'syntax-local-get-shadower))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp129_441 '#t)"
"(get-current-expand-context8.1 temp129_441)))))"
"(let-values(((new-id_440)"
"(add-scopes"
" id_437"
"(set->list"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx ctx_439)"
"(expand-context-phase ctx_439))))))"
"(if(syntax-clean? id_437) new-id_440(syntax-taint$1 new-id_440)))))))))))"
"(case-lambda"
"((id_442)(syntax-local-get-shadower58_433 id_442 '#f '#f))"
"((id_443 only-generated?55_444)(syntax-local-get-shadower58_433 id_443 only-generated?55_444 '#t)))))"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
" (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 '\"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) '#f))))))"
"(define-values(syntax-source$1)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(syntax-column$1)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(syntax-position$1)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) '5)(srcloc-vector?(list->vector v_5)) '#f) '#f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) '5)(srcloc-vector? v_5) '#f) '#f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 '1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 '1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 '2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 '2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 '3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 '3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 '4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 '4))))"
" '#f)"
" '#f)"
" '#f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 '0)"
"(vector-ref v_12 '1)"
"(vector-ref v_12 '2)"
"(vector-ref v_12 '3)"
"(vector-ref v_12 '4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
"(syntax-bulk-binding-registry the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(define-values"
"(host-syntax->syntax)"
"(lambda(v_1)"
"(datum-map"
" v_1"
"(lambda(tail?_2 v_3)"
"(if(1/syntax? v_3)"
"(let-values()"
"(let-values(((s_4)"
"(let-values(((the-struct_6) empty-syntax))"
"(if(syntax?$1 the-struct_6)"
"(let-values(((content1_7)(host-syntax->syntax(1/syntax-e v_3)))"
"((srcloc2_8)"
"(srcloc"
"(1/syntax-source v_3)"
"(syntax-line$1 v_3)"
"(1/syntax-column v_3)"
"(1/syntax-position v_3)"
"(syntax-span$1 v_3)))"
"((props3_9)"
"(let-values(((tmp_10)(1/syntax-property v_3 'paren-shape)))"
"(if(equal? tmp_10 '#\\()"
"(let-values() original-square-props)"
"(if(equal? tmp_10 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_7"
"(syntax-scopes the-struct_6)"
"(syntax-scope-propagations the-struct_6)"
"(syntax-shifted-multi-scopes the-struct_6)"
"(syntax-mpi-shifts the-struct_6)"
"(syntax-bulk-binding-registry the-struct_6)"
" srcloc2_8"
" props3_9"
"(syntax-inspector the-struct_6)"
"(syntax-tamper the-struct_6)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_6)))))"
"(let-values(((keys_5)(1/syntax-property-symbol-keys v_3)))"
"(if(null? keys_5)"
"(let-values() s_4)"
"(if(if(null?(cdr keys_5))(eq?(car keys_5) 'paren-shape) '#f)"
"(let-values() s_4)"
"(let-values()"
"(let-values(((lst_11) keys_5))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(s_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((key_15)(unsafe-car lst_14)))"
"(if '#t"
"(let-values(((s_16)"
"(let-values(((s_17) s_13))"
"(let-values(((s_18)"
"(let-values()"
"(syntax-property$1"
" s_17"
" key_15"
"(1/syntax-property v_3 key_15)"
" '#t))))"
"(values s_18)))))"
"(if '#t(for-loop_12 s_16(unsafe-cdr lst_14)) s_16))"
" s_13))"
" s_13))))"
" for-loop_12)"
" s_4"
" lst_11)))))))))"
"(let-values() v_3))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym '#t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym '#t) 'paren-shape '#\\()))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym '#t) 'paren-shape '#\\{)))"
"(define-values(read-syntax$1)(lambda(src_1 in_2)(host-syntax->syntax(read-syntax$2 src_1 in_2))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(host-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7))))"
"(define-values"
"(syntax-e$2)"
"(lambda(s_1)"
"(begin"
" (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e '\"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
" (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum '\"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_3)"
"(lambda(stx-c7_4 s8_5 stx-l1_6 stx-p2_7 ignored3_8 stx-l4_9 stx-p5_10 ignored6_11)"
"(let-values(((stx-c_12) stx-c7_4))"
"(let-values(((s_13) s8_5))"
"(let-values(((stx-l_14)(if stx-l4_9 stx-l1_6 '#f)))"
"(let-values(((stx-p_15)(if stx-p5_10 stx-p2_7 '#f)))"
"(let-values(((ignored_16)(if ignored6_11 ignored3_8 '#f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_17)(not stx-c_12)))"
"(if or-part_17 or-part_17(syntax?$1 stx-c_12)))"
"(void)"
" (let-values () (raise-argument-error 'datum->syntax '\"(or #f syntax?)\" stx-c_12)))"
"(if(let-values(((or-part_18)(not stx-l_14)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(syntax?$1 stx-l_14)))"
"(if or-part_19 or-part_19(encoded-srcloc? stx-l_14)))))"
"(void)"
" (let-values () (raise-argument-error 'datum->syntax '\"(or #f syntax? ...)\" stx-l_14)))"
"(if(let-values(((or-part_20)(not stx-p_15)))"
"(if or-part_20 or-part_20(syntax?$1 stx-p_15)))"
"(void)"
" (let-values () (raise-argument-error 'datum->syntax '\"(or #f syntax?)\" stx-p_15)))"
"(datum->syntax$2 stx-c_12 s_13(to-srcloc-stx stx-l_14) stx-p_15)))))))))))"
"(case-lambda"
"((stx-c_21 s_22)(datum->syntax9_3 stx-c_21 s_22 '#f '#f '#f '#f '#f '#f))"
"((stx-c_23 s_24 stx-l_25 stx-p_26 ignored3_27)"
"(datum->syntax9_3 stx-c_23 s_24 stx-l_25 stx-p_26 ignored3_27 '#t '#t '#t))"
"((stx-c_28 s_29 stx-l_30 stx-p2_31)(datum->syntax9_3 stx-c_28 s_29 stx-l_30 stx-p2_31 '#f '#t '#t '#f))"
"((stx-c_32 s_33 stx-l1_34)(datum->syntax9_3 stx-c_32 s_33 stx-l1_34 '#f '#f '#t '#f '#f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_35)"
"(begin"
" (if (syntax?$1 s_35) (void) (let-values () (raise-argument-error 'syntax->list '\"syntax?\" s_35)))"
"(syntax->list$1 s_35))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_36)"
"(begin"
" (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax-original? '\"syntax?\" s_36)))"
"(if(syntax-property$1 s_36 original-property-sym)(not(syntax-any-macro-scopes? s_36)) '#f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_37)"
"(lambda(a13_38 b14_39 phase11_40 phase12_41)"
"(let-values(((a_42) a13_38))"
"(let-values(((b_43) b14_39))"
"(let-values(((phase_44)(if phase12_41 phase11_40(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_42)"
"(void)"
" (let-values () (raise-argument-error 'bound-identifier=? '\"identifier?\" a_42)))"
"(if(identifier? b_43)"
"(void)"
" (let-values () (raise-argument-error 'bound-identifier=? '\"identifier?\" b_43)))"
"(if(phase? phase_44)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_44)))"
"(bound-identifier=?$1 a_42 b_43 phase_44)))))))))"
"(case-lambda"
"((a_45 b_46)(bound-identifier=?15_37 a_45 b_46 '#f '#f))"
"((a_47 b_48 phase11_49)(bound-identifier=?15_37 a_47 b_48 phase11_49 '#t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_50)"
"(lambda(a21_51 b22_52 a-phase17_53 b-phase18_54 a-phase19_55 b-phase20_56)"
"(let-values(((a_57) a21_51))"
"(let-values(((b_58) b22_52))"
"(let-values(((a-phase_59)(if a-phase19_55 a-phase17_53(1/syntax-local-phase-level))))"
"(let-values(((b-phase_60)(if b-phase20_56 b-phase18_54 a-phase_59)))"
"(let-values()"
"(begin"
"(if(identifier? a_57)"
"(void)"
" (let-values () (raise-argument-error 'free-identifier=? '\"identifier?\" a_57)))"
"(if(identifier? b_58)"
"(void)"
" (let-values () (raise-argument-error 'free-identifier=? '\"identifier?\" b_58)))"
"(if(phase? a-phase_59)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_59)))"
"(if(phase? b-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_60)))"
"(free-identifier=?$1 a_57 b_58 a-phase_59 b-phase_60))))))))))"
"(case-lambda"
"((a_61 b_62)(free-identifier=?23_50 a_61 b_62 '#f '#f '#f '#f))"
"((a_63 b_64 a-phase_65 b-phase18_66)(free-identifier=?23_50 a_63 b_64 a-phase_65 b-phase18_66 '#t '#t))"
"((a_67 b_68 a-phase17_69)(free-identifier=?23_50 a_67 b_68 a-phase17_69 '#f '#t '#f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_70 b_71)"
"(let-values((()"
"(begin"
"(if(identifier? a_70)"
"(void)"
" (let-values () (raise-argument-error 'free-transformer-identifier=? '\"identifier?\" a_70)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_71)"
"(void)"
" (let-values () (raise-argument-error 'free-transformer-identifier=? '\"identifier?\" b_71)))"
"(values))))"
"(let-values(((phase_72)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_70 b_71 phase_72 phase_72))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_73 b_74)"
"(let-values((()"
"(begin"
"(if(identifier? a_73)"
"(void)"
" (let-values () (raise-argument-error 'free-template-identifier=? '\"identifier?\" a_73)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_74)"
"(void)"
" (let-values () (raise-argument-error 'free-template-identifier=? '\"identifier?\" b_74)))"
"(values))))"
"(let-values(((phase_75)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_73 b_74 phase_75 phase_75))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_76 b_77)"
"(begin"
" (if (identifier? a_76) (void) (let-values () (raise-argument-error 'free-label-identifier=? '\"identifier?\" a_76)))"
" (if (identifier? b_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? '\"identifier?\" b_77)))"
"(free-identifier=?$1 a_76 b_77 '#f '#f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding28_78)"
"(lambda(id27_79 phase25_80 phase26_81)"
"(let-values(((id_82) id27_79))"
"(let-values(((phase_83)(if phase26_81 phase25_80(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_82)"
"(void)"
" (let-values () (raise-argument-error 'identifier-binding '\"identifier?\" id_82)))"
"(if(phase? phase_83)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_83)))"
"(identifier-binding$1 id_82 phase_83))))))))"
"(case-lambda"
"((id_84)(identifier-binding28_78 id_84 '#f '#f))"
"((id_85 phase25_86)(identifier-binding28_78 id_85 phase25_86 '#t)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(lambda(id_87)"
"(begin"
"(if(identifier? id_87)"
"(void)"
" (let-values () (raise-argument-error 'identifier-transformer-binding '\"identifier?\" id_87)))"
"(identifier-binding$1 id_87(add1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_88)"
"(begin"
"(if(identifier? id_88)"
"(void)"
" (let-values () (raise-argument-error 'identifier-template-binding '\"identifier?\" id_88)))"
"(identifier-binding$1 id_88(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_89)"
"(begin"
"(if(identifier? id_89)"
"(void)"
" (let-values () (raise-argument-error 'identifier-label-binding '\"identifier?\" id_89)))"
"(identifier-binding$1 id_89 '#f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol33_90)"
"(lambda(id32_91 phase30_92 phase31_93)"
"(let-values(((id_94) id32_91))"
"(let-values(((phase_95)(if phase31_93 phase30_92(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_94)"
"(void)"
" (let-values () (raise-argument-error 'identifier-binding-symbol '\"identifier?\" id_94)))"
"(if(phase? phase_95)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_95)))"
"(identifier-binding-symbol$1 id_94 phase_95))))))))"
"(case-lambda"
"((id_96)(identifier-binding-symbol33_90 id_96 '#f '#f))"
"((id_97 phase30_98)(identifier-binding-symbol33_90 id_97 phase30_98 '#t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context38_99)"
"(lambda(id37_100 syms35_101 syms36_102)"
"(let-values(((id_103) id37_100))"
"(let-values(((syms_104)(if syms36_102 syms35_101 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_103)"
"(void)"
"(let-values()"
" (raise-argument-error 'identifier-prune-lexical-context '\"identifier?\" id_103)))"
"(if(if(list? syms_104)(andmap2 symbol? syms_104) '#f)"
"(void)"
"(let-values()"
" (raise-argument-error 'identifier-prune-lexical-context '\"(listof symbol?)\" syms_104)))"
" id_103)))))))"
"(case-lambda"
"((id_105)(identifier-prune-lexical-context38_99 id_105 '#f '#f))"
"((id_106 syms35_107)(identifier-prune-lexical-context38_99 id_106 syms35_107 '#t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info45_108)"
"(lambda(s44_109 phase40_110 all-bindings?41_111 phase42_112 all-bindings?43_113)"
"(let-values(((s_114) s44_109))"
"(let-values(((phase_115)(if phase42_112 phase40_110(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_116)(if all-bindings?43_113 all-bindings?41_111 '#f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_114)"
"(void)"
" (let-values () (raise-argument-error 'syntax-debug-info '\"syntax?\" s_114)))"
"(if(phase? phase_115)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_115)))"
"(syntax-debug-info$1 s_114 phase_115 all-bindings?_116)))))))))"
"(case-lambda"
"((s_117)(syntax-debug-info45_108 s_117 '#f '#f '#f '#f))"
"((s_118 phase_119 all-bindings?41_120)(syntax-debug-info45_108 s_118 phase_119 all-bindings?41_120 '#t '#t))"
"((s_121 phase40_122)(syntax-debug-info45_108 s_121 phase40_122 '#f '#t '#f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_123 phase_124)"
"(begin"
" (if (syntax?$1 s_123) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level '\"syntax?\" s_123)))"
"(if(phase? phase_124)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_124)))"
"(syntax-shift-phase-level$1 s_123 phase_124))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_125 old-stx_126 id_127)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_125)"
"(void)"
" (let-values () (raise-argument-error 'syntax-track-origin '\"syntax?\" new-stx_125)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_126)"
"(void)"
" (let-values () (raise-argument-error 'syntax-track-origin '\"syntax?\" old-stx_126)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_127)"
"(void)"
" (let-values () (raise-argument-error 'syntax-track-origin '\"identifier?\" id_127)))"
"(values))))"
"(let-values(((s_128)(syntax-track-origin$1 new-stx_125 old-stx_126 id_127)))"
"(let-values(((ctx_129)"
"(let-values(((...ander/syntax/api.rkt:173:14_130) get-current-expand-context8.1)"
"((temp65_131) '#t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_131 '#t '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/syntax/api.rkt:173:14_130"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" '2)"
" '(#:fail-ok?)"
"(list temp65_131))))))"
"(begin"
"(if ctx_129"
"(let-values()"
"(let-values(((obs_132)(expand-context-observer ctx_129)))"
"(if obs_132"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_132 'track-origin s_128))(void)))"
"(void))))"
"(void))"
" s_128))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax51_133)"
"(lambda(src47_134 in48_135 src49_136 in50_137)"
"(let-values(((src_138)(if src49_136 src47_134(object-name(current-input-port)))))"
"(let-values(((in_139)(if in50_137 in48_135(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_139)"
"(void)"
" (let-values () (raise-argument-error 'read-syntax '\"input-port?\" in_139)))"
"(read-syntax$1 src_138 in_139))))))))"
"(case-lambda"
"(()(read-syntax51_133 '#f '#f '#f '#f))"
"((src_140 in48_141)(read-syntax51_133 src_140 in48_141 '#t '#t))"
"((src47_142)(read-syntax51_133 src47_142 '#f '#t '#f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive63_143)"
"(lambda(src53_144"
" in54_145"
" start55_146"
" readtable56_147"
" graph?57_148"
" src58_149"
" in59_150"
" start60_151"
" readtable61_152"
" graph?62_153)"
"(let-values(((src_154)(if src58_149 src53_144(object-name(current-input-port)))))"
"(let-values(((in_155)(if in59_150 in54_145(current-input-port))))"
"(let-values(((start_156)(if start60_151 start55_146 '#f)))"
"(let-values(((readtable_157)(if readtable61_152 readtable56_147(current-readtable))))"
"(let-values(((graph?_158)(if graph?62_153 graph?57_148 '#t)))"
"(let-values()"
"(begin"
"(if(input-port? in_155)"
"(void)"
" (let-values () (raise-argument-error 'read-syntax/recursive '\"input-port?\" in_155)))"
"(if(let-values(((or-part_159)(char? start_156)))"
"(if or-part_159 or-part_159(not start_156)))"
"(void)"
"(let-values()"
" (raise-argument-error 'read-syntax/recursive '\"(or/c char? #f)\" start_156)))"
"(if(let-values(((or-part_160)(readtable? readtable_157)))"
"(if or-part_160 or-part_160(not readtable_157)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'read-syntax/recursive"
" '\"(or/c readtable? #f)\""
" readtable_157)))"
"(read-syntax/recursive$1 src_154 in_155 start_156 readtable_157 graph?_158)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive63_143 '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))"
"((src_161 in_162 start_163 readtable_164 graph?57_165)"
"(read-syntax/recursive63_143 src_161 in_162 start_163 readtable_164 graph?57_165 '#t '#t '#t '#t '#t))"
"((src_166 in_167 start_168 readtable56_169)"
"(read-syntax/recursive63_143 src_166 in_167 start_168 readtable56_169 '#f '#t '#t '#t '#t '#f))"
"((src_170 in_171 start55_172)(read-syntax/recursive63_143 src_170 in_171 start55_172 '#f '#f '#t '#t '#t '#f '#f))"
"((src_173 in54_174)(read-syntax/recursive63_143 src_173 in54_174 '#f '#f '#f '#t '#t '#f '#f '#f))"
"((src53_175)(read-syntax/recursive63_143 src53_175 '#f '#f '#f '#f '#t '#f '#f '#f '#f)))))"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 '#f '#f '#f '#f '#f '#f '#f '#f)"
"(make-root-expand-context12.1)))))"
"(let-values(((s_8)(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))))"
"(let-values((()"
"(begin"
"(let-values(((lst_10) requires_1))"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(fold-var_12 lst_13)"
"(if(pair? lst_13)"
"(let-values(((phase+reqs_14)(unsafe-car lst_13)))"
"(if '#t"
"(let-values(((fold-var_15)"
"(let-values(((fold-var_16) fold-var_12))"
"(let-values(((fold-var_17)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_18)"
"(car"
" phase+reqs_14)))"
"(let-values(((lst_19)"
"(cdr"
" phase+reqs_14)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()"
"(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((req_23)"
"(unsafe-car"
" lst_22)))"
"(if '#t"
"(let-values(((fold-var_24)"
"(let-values(((fold-var_25)"
" fold-var_21))"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_27)"
"(module-path-index-shift"
" req_23"
" original-self_5"
" self_6)))"
"(let-values(((...val/root-context.rkt:32:8_28)"
" perform-require!55.1)"
"((mpi1_29)"
" mpi_27)"
"((s2_30)"
" s_8)"
"((self3_31)"
" self_6)"
"((s4_32)"
" s_8)"
"((ns5_33)"
" ns_3)"
"((phase-shift6_34)"
" phase-shift_4)"
"((phase-shift7_35)"
" phase-shift_4))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!55.1))"
"(perform-require!53.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" phase-shift6_34"
" '#f"
" '#f"
" phase-shift7_35"
" '#f"
" '#f"
" '#f"
" '#f"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...val/root-context.rkt:32:8_28"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:run-phase)"
" '7)"
" '(#:phase-shift"
" #:run-phase)"
"(list"
" phase-shift6_34"
" phase-shift7_35)"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)))))"
"(void)))))"
"(values"
" fold-var_26)))))"
"(if '#t"
"(for-loop_20"
" fold-var_24"
"(unsafe-cdr"
" lst_22))"
" fold-var_24))"
" fold-var_21))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))))"
"(void)))))"
"(values fold-var_17)))))"
"(if '#t"
"(for-loop_11 fold-var_15(unsafe-cdr lst_13))"
" fold-var_15))"
" fold-var_12))"
" fold-var_12))))"
" for-loop_11)"
"(void)"
" lst_10)))"
"(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_36) evaled-ld-h_2))"
"(begin"
"(if((lambda(ht_37)(hash? ht_37)) ht_36)(void)(let-values()(default-in-hash ht_36)))"
"((letrec-values(((for-loop_38)"
"(lambda(fold-var_39 i_40)"
"(if i_40"
"(let-values(((phase_41 linklet_42)(hash-iterate-key+value ht_36 i_40)))"
"(if '#t"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44) fold-var_39))"
"(let-values(((fold-var_45)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_46)"
"(1/linklet-export-variables"
" linklet_42)))"
"(begin"
"(if(list? lst_46)"
"(void)"
"(let-values()"
"(in-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49)"
"(if(pair?"
" lst_49)"
"(let-values(((sym_50)"
"(unsafe-car"
" lst_49)))"
"(if '#t"
"(let-values(((fold-var_51)"
"(let-values(((fold-var_52)"
" fold-var_48))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_54)"
"(datum->syntax$2"
" s_8"
" sym_50)))"
"(begin"
"(let-values(((id8_55)"
" id_54)"
"((temp9_56)"
"(let-values(((self11_58)"
" self_6)"
"((phase12_59)"
" phase_41)"
"((sym13_60)"
" sym_50))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" self11_58"
" phase12_59"
" sym13_60)"
"(make-module-binding22.1"
" self11_58"
" phase12_59"
" sym13_60))))"
"((phase10_57)"
" phase_41))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" '#f"
" '#f"
" id8_55"
" temp9_56"
" phase10_57)"
"(add-binding!17.1"
" id8_55"
" temp9_56"
" phase10_57)))"
"(add-defined-sym!"
" defined-syms_9"
" phase_41"
" sym_50"
" id_54))))"
"(void)))))"
"(values"
" fold-var_53)))))"
"(if '#t"
"(for-loop_47"
" fold-var_51"
"(unsafe-cdr"
" lst_49))"
" fold-var_51))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_46))))"
"(void)))))"
"(values fold-var_45)))))"
"(if '#t"
"(for-loop_38 fold-var_43(hash-iterate-next ht_36 i_40))"
" fold-var_43))"
" fold-var_39))"
" fold-var_39))))"
" for-loop_38)"
"(void)"
"(hash-iterate-first ht_36))))"
" root-ctx_7))))))))"
"(define-values"
"(eval-module8.1)"
"(lambda(as-submodule?2_1 as-submodule?5_2 namespace1_3 namespace4_4 supermodule-name3_5 supermodule-name6_6 c7_7)"
"(let-values(((c_8) c7_7))"
"(let-values(((ns_9)(if namespace4_4 namespace1_3(1/current-namespace))))"
"(let-values(((as-submodule?_10)(if as-submodule?5_2 as-submodule?2_1 '#f)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_6 supermodule-name3_5 '#f)))"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((decl_16)(lambda(key_34)(1/instance-variable-value declaration-instance_15 key_34))))"
"(letrec-values(((declare-submodules_17)"
"(lambda(names_35 pre?_36)"
"(if dh_12"
"(let-values()"
"(if(compiled-in-memory? c_8)"
"(let-values(((lst_37)"
"(if pre?_36"
"(compiled-in-memory-pre-compiled-in-memorys c_8)"
"(compiled-in-memory-post-compiled-in-memorys c_8))))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(fold-var_39 lst_40)"
"(if(pair? lst_40)"
"(let-values(((c_41)(unsafe-car lst_40)))"
"(if '#t"
"(let-values(((fold-var_42)"
"(let-values(((fold-var_43)"
" fold-var_39))"
"(let-values(((fold-var_44)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:40:12_45)"
" eval-module10.1)"
"((c15_46)"
" c_41)"
"((ns16_47)"
" ns_9)"
"((declare-name17_48)"
" declare-name_33))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" '#f"
" '#f"
" ns16_47"
" '#t"
" declare-name17_48"
" '#t"
" c15_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:40:12_45"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" '3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns16_47"
" declare-name17_48)"
" c15_46))))"
"(void)))))"
"(values fold-var_44)))))"
"(if '#t"
"(for-loop_38"
" fold-var_42"
"(unsafe-cdr lst_40))"
" fold-var_42))"
" fold-var_39))"
" fold-var_39))))"
" for-loop_38)"
"(void)"
" lst_37)))"
"(let-values(((lst_49) names_35))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(fold-var_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((name_53)(unsafe-car lst_52)))"
"(if '#t"
"(let-values(((fold-var_54)"
"(let-values(((fold-var_55)"
" fold-var_51))"
"(let-values(((fold-var_56)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_57)"
"(hash-ref"
" dh_12"
" name_53"
" '#f)))"
"(begin"
"(if sm-cd_57"
"(void)"
"(let-values()"
"(error"
" '\"missing submodule declaration:\""
" name_53)))"
"(let-values(((...nder/eval/module.rkt:44:12_58)"
" eval-module10.1)"
"((sm-cd18_59)"
" sm-cd_57)"
"((ns19_60)"
" ns_9)"
"((declare-name20_61)"
" declare-name_33))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" '#f"
" '#f"
" ns19_60"
" '#t"
" declare-name20_61"
" '#t"
" sm-cd18_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:44:12_58"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" '3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns19_60"
" declare-name20_61)"
" sm-cd18_59))))))"
"(void)))))"
"(values fold-var_56)))))"
"(if '#t"
"(for-loop_50"
" fold-var_54"
"(unsafe-cdr lst_52))"
" fold-var_54))"
" fold-var_51))"
" fold-var_51))))"
" for-loop_50)"
"(void)"
" lst_49)))))"
"(void))))"
"((pre-submodule-names_18)(hash-ref h_13 'pre null))"
"((post-submodule-names_19)(hash-ref h_13 'post null))"
"((default-name_20)(hash-ref h_13 'name 'module))"
"((original-self_21)(decl_16 'self-mpi))"
"((phase-to-link-modules_22)(decl_16 'phase-to-link-modules))"
"((min-phase_23)(decl_16 'min-phase))"
"((max-phase_24)(decl_16 'max-phase))"
"((evaled-h_25)"
"(let-values(((start_62) min-phase_23)((end_63)(add1 max-phase_24))((inc_64) '1))"
"(begin"
"(if(if(real? start_62)(if(real? end_63)(real? inc_64) '#f) '#f)"
"(void)"
"(let-values()(in-range start_62 end_63 inc_64)))"
"((letrec-values(((for-loop_65)"
"(lambda(table_66 pos_67)"
"(if(< pos_67 end_63)"
"(let-values(((phase-level_68) pos_67))"
"(if '#t"
"(let-values(((table_69)"
"(let-values(((v_70)"
"(hash-ref"
" h_13"
" phase-level_68"
" '#f)))"
"(begin"
" '#t"
"((letrec-values(((for-loop_71)"
"(lambda(table_72)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((table_73)"
"(let-values(((table_74)"
" table_72))"
"(if v_70"
"(let-values(((table_75)"
" table_74))"
"(let-values(((table_76)"
"(let-values()"
"(let-values(((key_77"
" val_78)"
"(let-values()"
"(values"
" phase-level_68"
" v_70))))"
"(hash-set"
" table_75"
" key_77"
" val_78)))))"
"(values"
" table_76)))"
" table_74))))"
"(if '#f"
"(for-loop_71"
" table_73)"
" table_73))"
" table_72))"
" table_72))))"
" for-loop_71)"
" table_66)))))"
"(if '#t"
"(for-loop_65 table_69(+ pos_67 inc_64))"
" table_69))"
" table_66))"
" table_66))))"
" for-loop_65)"
" '#hash()"
" start_62))))"
"((syntax-literals-linklet_26)(hash-ref h_13 'stx))"
"((requires_27)(decl_16 'requires))"
"((provides_28)(decl_16 'provides))"
"((extra-inspector_29)"
"(if(compiled-in-memory? c_8)(compiled-in-memory-compile-time-inspector c_8) '#f))"
"((phase-to-link-extra-inspectorsss_30)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv()))"
"((create-root-expand-context-from-module_31)"
"(make-create-root-expand-context-from-module requires_27 evaled-h_25))"
"((m_32)"
"(let-values(((...nder/eval/module.rkt:75:12_79) make-module30.1)"
"((original-self21_80) original-self_21)"
"((requires22_81) requires_27)"
"((provides23_82) provides_28)"
"((temp24_83)(decl_16 'language-info))"
"((min-phase25_84) min-phase_23)"
"((max-phase26_85) max-phase_24)"
"((temp27_86)(decl_16 'cross-phase-persistent?))"
"((temp28_87)(append pre-submodule-names_18 post-submodule-names_19))"
"((supermodule-name29_88) supermodule-name_11)"
"((temp30_89)"
"(lambda(data-box_91"
" ns_92"
" phase-shift_93"
" self_94"
" bulk-binding-registry_95"
" insp_96)"
"(if(unbox data-box_91)"
"(void)"
"(let-values()"
"(init-syntax-literals!"
" data-box_91"
" ns_92"
" syntax-literals-linklet_26"
" data-instance_14"
" phase-shift_93"
" original-self_21"
" self_94"
" bulk-binding-registry_95"
" insp_96"
" create-root-expand-context-from-module_31)))))"
"((temp31_90)"
"(lambda(data-box_97"
" ns_98"
" phase-shift_99"
" phase-level_100"
" self_101"
" bulk-binding-registry_102"
" insp_103)"
"(let-values(((syntax-literals-instance_104)(unbox data-box_97)))"
"(let-values(((phase-linklet_105)"
"(hash-ref evaled-h_25 phase-level_100 '#f)))"
"(if phase-linklet_105"
"(let-values()"
"(let-values(((module-uses_106)"
"(hash-ref"
" phase-to-link-modules_22"
" phase-level_100)))"
"(let-values(((import-module-instances_107"
" import-instances_108)"
"(let-values(((mis_111 is_112)"
"(let-values(((lst_113)"
" module-uses_106))"
"(begin"
"(if(list? lst_113)"
"(void)"
"(let-values()"
"(in-list lst_113)))"
"((letrec-values(((for-loop_114)"
"(lambda(mis_115"
" is_116"
" lst_117)"
"(if(pair?"
" lst_117)"
"(let-values(((mu_118)"
"(unsafe-car"
" lst_117)))"
"(if '#t"
"(let-values(((mis_119"
" is_120)"
"(let-values(((mis_121)"
" mis_115)"
"((is_122)"
" is_116))"
"(let-values(((mis_123"
" is_124)"
"(let-values()"
"(let-values(((mis39_125"
" is40_126)"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:100:33_127)"
" namespace-module-use->module+linklet-instances139.1)"
"((ns41_128)"
" ns_98)"
"((mu42_129)"
" mu_118)"
"((original-self43_130)"
" original-self_21)"
"((self44_131)"
" self_101)"
"((temp45_132)"
"(phase+"
"(phase-"
" phase-level_100"
"(module-use-phase"
" mu_118))"
" phase-shift_99)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances139.1))"
"(namespace-module-use->module+linklet-instances137.1"
" temp45_132"
" original-self43_130"
" '#t"
" self44_131"
" '#t"
" ns41_128"
" mu42_129)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:100:33_127"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
" '4)"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
"(list"
" temp45_132"
" original-self43_130"
" self44_131)"
" ns41_128"
" mu42_129))))))"
"(values"
"(cons"
" mis39_125"
" mis_121)"
"(cons"
" is40_126"
" is_122))))))"
"(values"
" mis_123"
" is_124)))))"
"(if '#t"
"(for-loop_114"
" mis_119"
" is_120"
"(unsafe-cdr"
" lst_117))"
"(values"
" mis_119"
" is_120)))"
"(values"
" mis_115"
" is_116)))"
"(values"
" mis_115"
" is_116)))))"
" for-loop_114)"
" null"
" null"
" lst_113)))))"
"(values"
"(alt-reverse mis_111)"
"(alt-reverse is_112)))))"
"(let-values((()"
"(begin"
"(let-values(((...nder/eval/module.rkt:108:29_133)"
" check-require-access11.1)"
"((phase-linklet32_134)"
" phase-linklet_105)"
"((temp33_135) '3)"
"((module-uses34_136)"
" module-uses_106)"
"((import-module-instances35_137)"
" import-module-instances_107)"
"((insp36_138) insp_103)"
"((extra-inspector37_139)"
" extra-inspector_29)"
"((temp38_140)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_30"
" phase-level_100"
" '#f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp33_135"
" phase-linklet32_134"
" module-uses34_136"
" import-module-instances35_137"
" insp36_138"
" extra-inspector37_139"
" temp38_140)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:108:29_133"
" keyword-procedure-extract"
" '(#:skip-imports)"
" '8)"
" '(#:skip-imports)"
"(list temp33_135)"
" phase-linklet32_134"
" module-uses34_136"
" import-module-instances35_137"
" insp36_138"
" extra-inspector37_139"
" temp38_140)))"
"(values))))"
"(let-values(((instance-instance_109)"
"(let-values(((...nder/eval/module.rkt:114:31_141)"
" make-instance-instance17.1)"
"((ns46_142) ns_98)"
"((phase-shift47_143)"
" phase-shift_99)"
"((self48_144) self_101)"
"((bulk-binding-registry49_145)"
" bulk-binding-registry_102)"
"((insp50_146) insp_103)"
"((temp51_147)"
"(lambda(name_148 val_149)"
"(namespace-set-transformer!"
" ns_98"
"(sub1 phase-level_100)"
" name_148"
" val_149))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-instance-instance17.1))"
"(make-instance-instance15.1"
" bulk-binding-registry49_145"
" insp50_146"
" ns46_142"
" phase-shift47_143"
" '#f"
" '#f"
" self48_144"
" temp51_147)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:114:31_141"
" keyword-procedure-extract"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
" '2)"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
"(list"
" bulk-binding-registry49_145"
" insp50_146"
" ns46_142"
" phase-shift47_143"
" self48_144"
" temp51_147))))))"
"(let-values(((instantiate-body_110)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_105"
"(list*"
" data-instance_14"
" syntax-literals-instance_104"
" instance-instance_109"
" import-instances_108)"
"(namespace->instance"
" ns_98"
" phase-level_100)))))"
"(if(zero-phase? phase-level_100)"
"(let-values()(instantiate-body_110))"
"(let-values()"
"(let-values(((ns-1_150)"
"(namespace->namespace-at-phase"
" ns_98"
"(phase+"
" phase-shift_99"
"(sub1 phase-level_100)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(make-expand-context ns-1_150)))"
" 1/current-namespace"
" ns_98"
" current-module-code-inspector"
" insp_103)"
"(let-values()"
"(instantiate-body_110))))))))))))"
"(void)))))))"
"(if(variable-reference-constant?(#%variable-reference make-module30.1))"
"(make-module28.1"
" temp27_86"
" '#t"
" temp31_90"
" temp24_83"
" '#t"
" max-phase26_85"
" '#t"
" min-phase25_84"
" '#t"
" '#f"
" '#f"
" temp30_89"
" '#t"
" '#f"
" '#f"
" provides23_82"
" requires22_81"
" '#t"
" original-self21_80"
" temp28_87"
" '#t"
" supermodule-name29_88"
" '#t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:75:12_79"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:submodule-names"
" #:supermodule-name)"
" '2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:submodule-names"
" #:supermodule-name)"
"(list"
" temp27_86"
" temp31_90"
" temp24_83"
" max-phase26_85"
" min-phase25_84"
" temp30_89"
" provides23_82"
" requires22_81"
" original-self21_80"
" temp28_87"
" supermodule-name29_88)))))"
"((declare-name_33)(substitute-module-declare-name default-name_20)))"
"(begin"
"(if as-submodule?_10(void)(let-values()(declare-submodules_17 pre-submodule-names_18 '#t)))"
"(let-values(((...nder/eval/module.rkt:148:2_151) declare-module!49.1)"
"((ns11_152) ns_9)"
"((m12_153) m_32)"
"((declare-name13_154) declare-name_33)"
"((as-submodule?14_155) as-submodule?_10))"
"(if(variable-reference-constant?(#%variable-reference declare-module!49.1))"
"(declare-module!47.1 as-submodule?14_155 '#t ns11_152 m12_153 declare-name13_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:148:2_151"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" '5)"
" '(#:as-submodule?)"
"(list as-submodule?14_155)"
" ns11_152"
" m12_153"
" declare-name13_154)))"
"(if as-submodule?_10"
"(void)"
"(let-values()(declare-submodules_17 post-submodule-names_19 '#f))))))))))))))"
"(define-values"
"(unpack9.1)"
"(lambda(given-kws_156 given-args_157 c7_158)"
"(let-values(((as-submodule?5_159)(if(pair? given-kws_156)(eq? '#:as-submodule?(car given-kws_156)) '#f)))"
"(let-values(((as-submodule?2_160)(if as-submodule?5_159(car given-args_157)(void)))"
"((given-kws_161)(if as-submodule?5_159(cdr given-kws_156) given-kws_156))"
"((given-args_162)(if as-submodule?5_159(cdr given-args_157) given-args_157)))"
"(let-values(((namespace4_163)(if(pair? given-kws_161)(eq? '#:namespace(car given-kws_161)) '#f)))"
"(let-values(((namespace1_164)(if namespace4_163(car given-args_162)(void)))"
"((given-kws_165)(if namespace4_163(cdr given-kws_161) given-kws_161))"
"((given-args_166)(if namespace4_163(cdr given-args_162) given-args_162)))"
"(let-values(((supermodule-name6_167)(pair? given-kws_165)))"
"(let-values(((supermodule-name3_168)(if supermodule-name6_167(car given-args_166)(void))))"
"(eval-module8.1"
" as-submodule?2_160"
" as-submodule?5_159"
" namespace1_164"
" namespace4_163"
" supermodule-name3_168"
" supermodule-name6_167"
" c7_158)))))))))"
"(define-values"
"(eval-module10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_169 given-argc_170)"
"(if(= given-argc_170 '3)"
"(let-values(((l1_171) given-kws_169))"
"(let-values(((l1_172)"
"(if(null? l1_171) l1_171(if(eq?(car l1_171) '#:as-submodule?)(cdr l1_171) l1_171))))"
"(let-values(((l1_173) l1_172))"
"(let-values(((l1_174)"
"(if(null? l1_173) l1_173(if(eq?(car l1_173) '#:namespace)(cdr l1_173) l1_173))))"
"(let-values(((l1_175) l1_174))"
"(let-values(((l1_176)"
"(if(null? l1_175)"
" l1_175"
"(if(eq?(car l1_175) '#:supermodule-name)(cdr l1_175) l1_175))))"
"(null? l1_176)))))))"
" '#f))"
"(case-lambda((given-kws_177 given-args_178 c_179)(unpack9.1 given-kws_177 given-args_178 c_179)))"
" null"
" '(#:as-submodule? #:namespace #:supermodule-name)"
"(let-values(((eval-module_180)(case-lambda((c_181)(unpack9.1 null null c_181))))) eval-module_180)))"
"(define-values"
"(init-syntax-literals!)"
"(lambda(data-box_182"
" ns_183"
" syntax-literals-linklet_184"
" data-instance_185"
" phase-shift_186"
" original-self_187"
" self_188"
" bulk-binding-registry_189"
" insp_190"
" create-root-expand-context-from-module_191)"
"(let-values(((inst_192)"
"(let-values(((...nder/eval/module.rkt:163:4_195) make-instance-instance17.1)"
"((ns52_196) ns_183)"
"((phase-shift53_197) phase-shift_186)"
"((self54_198) self_188)"
"((bulk-binding-registry55_199) bulk-binding-registry_189)"
"((insp56_200) insp_190)"
"((temp57_201)"
" (lambda (name_202 val_203) (error '\"shouldn't get here for the root-ctx linklet\"))))"
"(if(variable-reference-constant?(#%variable-reference make-instance-instance17.1))"
"(make-instance-instance15.1"
" bulk-binding-registry55_199"
" insp56_200"
" ns52_196"
" phase-shift53_197"
" '#f"
" '#f"
" self54_198"
" temp57_201)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:163:4_195"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" '2)"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
"(list"
" bulk-binding-registry55_199"
" insp56_200"
" ns52_196"
" phase-shift53_197"
" self54_198"
" temp57_201))))))"
"(let-values(((root-ctx-instance_193)"
"(1/instantiate-linklet"
" syntax-literals-linklet_184"
"(list deserialize-instance data-instance_185 inst_192))))"
"(let-values((()(begin(set-box! data-box_182 root-ctx-instance_193)(values))))"
"(let-values(((get-encoded-root-expand-ctx_194)"
"(1/instance-variable-value root-ctx-instance_193 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_194 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_183"
"(delay"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 '#f '#f '#f '#f '#f '#f '#f '#f)"
"(make-root-expand-context12.1)))))))"
"(if(procedure? get-encoded-root-expand-ctx_194)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_183"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_194))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_183"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_191"
" ns_183"
" phase-shift_186"
" original-self_187"
" self_188)))))))))))))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_204)"
"(let-values(((ld/h_205)(if(compiled-in-memory? c_204)(compiled-in-memory-linklet-directory c_204) c_204)))"
"(let-values(((dh_206)"
"(if(1/linklet-directory? ld/h_205)"
"(let-values()(1/linklet-directory->hash ld/h_205))"
"(let-values() '#f))))"
"(let-values(((h_207)(1/linklet-bundle->hash(if dh_206(hash-ref dh_206 '#f) ld/h_205))))"
"(let-values(((data-instance_208)"
"(if(compiled-in-memory? c_204)"
"(make-data-instance-from-compiled-in-memory c_204)"
"(1/instantiate-linklet(hash-ref h_207 'data)(list deserialize-instance)))))"
"(let-values(((declaration-instance_209)"
"(1/instantiate-linklet(hash-ref h_207 'decl)(list deserialize-instance data-instance_208))))"
"(values dh_206 h_207 data-instance_208 declaration-instance_209))))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_210)"
"(let-values(((dh_211 h_212 data-instance_213 declaration-instance_214)"
"(compiled-module->dh+h+data-instance+declaration-instance c_210)))"
" declaration-instance_214)))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_215)"
"(let-values(((data-instance_216)(1/make-instance 'data)))"
"(begin"
"(1/instance-set-variable-value! data-instance_216 'mpi-vector(compiled-in-memory-mpis cim_215))"
"(1/instance-set-variable-value!"
" data-instance_216"
" 'deserialized-syntax"
"(compiled-in-memory-syntax-literalss cim_215))"
" data-instance_216))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_1 insp_2)"
"(syntax-map"
" s_1"
"(lambda(tail?_3 d_4) d_4)"
"(lambda(s_5 d_6)"
"(let-values(((the-struct_7) s_5))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8) d_6)"
"((inspector2_9)"
"(let-values(((or-part_10)(syntax-inspector s_5)))(if or-part_10 or-part_10 insp_2))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
" inspector2_9"
"(syntax-tamper the-struct_7)))"
" (raise-argument-error 'struct-copy '\"syntax?\" the-struct_7))))"
" syntax-content)))"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values(((src-namespace_6) src-namespace3_2))"
"(let-values(((mod-path_7) mod-path4_3))"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:14:2_9) do-attach-module21.1)"
"((temp22_10) 'namespace-attach-module)"
"((src-namespace23_11) src-namespace_6)"
"((mod-path24_12) mod-path_7)"
"((dest-namespace25_13) dest-namespace_8)"
"((temp26_14) '#t))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp26_14"
" '#t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:14:2_9"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" '6)"
" '(#:attach-instances?)"
"(list temp26_14)"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13))))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 '#f '#f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 '#t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values(((src-namespace_25) src-namespace9_21))"
"(let-values(((mod-path_26) mod-path10_22))"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:21:2_28) do-attach-module21.1)"
"((temp27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_25)"
"((mod-path29_31) mod-path_26)"
"((dest-namespace30_32) dest-namespace_27)"
"((temp31_33) '#f))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp31_33"
" '#t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:21:2_28"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" '6)"
" '(#:attach-instances?)"
"(list temp31_33)"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32))))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 '#f '#f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 '#t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values(((who_45) who15_41))"
"(let-values(((src-namespace_46) src-namespace16_42))"
"(let-values(((mod-path_47) mod-path17_43))"
"(let-values(((dest-namespace_48) dest-namespace18_44))"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
" (let-values () (raise-argument-error who_45 '\"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_47)"
"(void)"
" (let-values () (raise-argument-error who_45 '\"module-path?\" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
" (let-values () (raise-argument-error who_45 '\"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
" '\"source and destination namespace phases do not match\""
" '\"source phase\""
" phase_50"
" '\"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_54)"
"(lambda(mpi_55"
" phase_56"
" attach-instances?_57"
" attach-phase_58)"
"(let-values(((mod-name_59)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_55)))))"
"(let-values(((attach-this-instance?_60)"
"(if attach-instances?_57"
"(eqv? phase_56 attach-phase_58)"
" '#f)))"
"(let-values(((m-ns_61)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_59"
" '#hasheqv())"
" phase_56"
" missing_52)))"
"(if(let-values(((or-part_62)"
"(eq? missing_52 m-ns_61)))"
"(if or-part_62"
" or-part_62"
"(if attach-this-instance?_60"
"(not m-ns_61)"
" '#f)))"
"(let-values()"
"(let-values(((m_63)"
"(namespace->module"
" src-namespace_46"
" mod-name_59)))"
"(begin"
"(if m_63"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
" '\"module not declared (in the source namespace)\""
" '\"module name\""
" mod-name_59)))"
"(if(if(module-cross-phase-persistent?"
" m_63)"
"(if(not(label-phase? phase_56))"
"(not(zero-phase? phase_56))"
" '#f)"
" '#f)"
"(let-values()"
"(loop_54"
" mpi_55"
" '0"
" attach-instances?_57"
" '0))"
"(let-values()"
"(let-values(((already-m_64)"
"(namespace->module"
" dest-namespace_48"
" mod-name_59)))"
"(let-values((()"
"(begin"
"(if(if already-m_64"
"(not"
"(eq?"
" already-m_64"
" m_63))"
" '#f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
" '\"a different declaration is already in the destination namespace\""
" '\"module name\""
" mod-name_59))"
"(void))"
"(values))))"
"(let-values(((m-ns_65"
" already?_66)"
"(if attach-this-instance?_60"
"(let-values()"
"(let-values(((m-ns_67)"
"(let-values(((src-namespace32_69)"
" src-namespace_46)"
"((mod-name33_70)"
" mod-name_59)"
"((phase34_71)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" src-namespace32_69"
" mod-name33_70"
" phase34_71)"
"(namespace->module-namespace75.1"
" src-namespace32_69"
" mod-name33_70"
" phase34_71)))))"
"(let-values((()"
"(begin"
"(if m-ns_67"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
" '\"module not instantiated (in the source namespace)\""
" '\"module name\""
" mod-name_59)))"
"(values))))"
"(let-values(((already-m-ns_68)"
"(if already-m_64"
"(let-values(((dest-namespace35_72)"
" dest-namespace_48)"
"((mod-name36_73)"
" mod-name_59)"
"((phase37_74)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" dest-namespace35_72"
" mod-name36_73"
" phase37_74)"
"(namespace->module-namespace75.1"
" dest-namespace35_72"
" mod-name36_73"
" phase37_74)))"
" '#f)))"
"(begin"
"(if(if already-m-ns_68"
"(not"
"(namespace-same-instance?"
" m-ns_67"
" already-m-ns_68))"
" '#f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
" '\"a different instance is already in the destination namespace\""
" '\"module name\""
" mod-name_59))"
"(void))"
"(values"
" m-ns_67"
"(if already-m-ns_68"
" '#t"
" '#f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_56)"
"(not"
"(let-values(((src-namespace38_75)"
" src-namespace_46)"
"((mod-name39_76)"
" mod-name_59)"
"((phase40_77)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" src-namespace38_75"
" mod-name39_76"
" phase40_77)"
"(namespace->module-namespace75.1"
" src-namespace38_75"
" mod-name39_76"
" phase40_77))))"
" '#f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values(((src-namespace41_78)"
" src-namespace_46)"
"((mpi42_79)"
" mpi_55)"
"((phase43_80)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" src-namespace41_78"
" mpi42_79"
" phase43_80)"
"(namespace-module-instantiate!89.1"
" src-namespace41_78"
" mpi42_79"
" phase43_80))))))"
"(void))"
"(values"
" '#f"
"(if already-m_64"
" '#t"
" '#f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_59"
"(lambda(ht_81)"
"(hash-set"
" ht_81"
" phase_56"
" m-ns_65))"
" '#hasheqv())"
"(if already?_66"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_82)"
"(module-requires"
" m_63)))"
"(begin"
"(if(list? lst_82)"
"(void)"
"(let-values()"
"(in-list"
" lst_82)))"
"((letrec-values(((for-loop_83)"
"(lambda(fold-var_84"
" lst_85)"
"(if(pair?"
" lst_85)"
"(let-values(((phase+reqs_86)"
"(unsafe-car"
" lst_85)))"
"(if '#t"
"(let-values(((fold-var_87)"
"(let-values(((lst_88)"
"(cdr"
" phase+reqs_86)))"
"(begin"
"(if(list?"
" lst_88)"
"(void)"
"(let-values()"
"(in-list"
" lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(fold-var_90"
" lst_91)"
"(if(pair?"
" lst_91)"
"(let-values(((req_92)"
"(unsafe-car"
" lst_91)))"
"(if '#t"
"(let-values(((fold-var_93)"
"(let-values(((fold-var_94)"
" fold-var_90))"
"(let-values(((fold-var_95)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(module-path-index-shift"
" req_92"
"(module-self"
" m_63)"
" mpi_55)"
"(phase+"
" phase_56"
"(car"
" phase+reqs_86))"
" attach-instances?_57"
" attach-phase_58))"
"(void)))))"
"(values"
" fold-var_95)))))"
"(if '#t"
"(for-loop_89"
" fold-var_93"
"(unsafe-cdr"
" lst_91))"
" fold-var_93))"
" fold-var_90))"
" fold-var_90))))"
" for-loop_89)"
" fold-var_84"
" lst_88)))))"
"(if '#t"
"(for-loop_83"
" fold-var_87"
"(unsafe-cdr"
" lst_85))"
" fold-var_87))"
" fold-var_84))"
" fold-var_84))))"
" for-loop_83)"
"(void)"
" lst_82)))"
"(let-values(((lst_96)"
"(module-submodule-names"
" m_63)))"
"(begin"
"(if(list? lst_96)"
"(void)"
"(let-values()"
"(in-list"
" lst_96)))"
"((letrec-values(((for-loop_97)"
"(lambda(fold-var_98"
" lst_99)"
"(if(pair?"
" lst_99)"
"(let-values(((submod-name_100)"
"(unsafe-car"
" lst_99)))"
"(if '#t"
"(let-values(((fold-var_101)"
"(let-values(((fold-var_102)"
" fold-var_98))"
"(let-values(((fold-var_103)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
"(list"
" 'submod"
" '\".\""
" submod-name_100)"
" mpi_55)"
" '#f"
" '#f"
" attach-phase_58))"
"(void)))))"
"(values"
" fold-var_103)))))"
"(if '#t"
"(for-loop_97"
" fold-var_101"
"(unsafe-cdr"
" lst_99))"
" fold-var_101))"
" fold-var_98))"
" fold-var_98))))"
" for-loop_97)"
"(void)"
" lst_96)))"
"(if(module-supermodule-name"
" m_63)"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
" '(submod \"..\")"
" mpi_55)"
" '#f"
" '#f"
" attach-phase_58))"
"(void))))))))))))))"
"(void))))))))"
" loop_54)"
"(1/module-path-index-join mod-path_47 '#f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_104) todo_51))"
"(begin"
"(if((lambda(ht_105)(hash? ht_105)) ht_104)"
"(void)"
"(let-values()(default-in-hash ht_104)))"
"((letrec-values(((for-loop_106)"
"(lambda(fold-var_107 i_108)"
"(if i_108"
"(let-values(((mod-name_109 phases_110)"
"(hash-iterate-key+value"
" ht_104"
" i_108)))"
"(if '#t"
"(let-values(((fold-var_111)"
"(let-values(((ht_112)"
" phases_110))"
"(begin"
"(if((lambda(ht_113)"
"(hash? ht_113))"
" ht_112)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_112)))"
"((letrec-values(((for-loop_114)"
"(lambda(fold-var_115"
" i_116)"
"(if i_116"
"(let-values(((phase_117"
" m-ns_118)"
"(hash-iterate-key+value"
" ht_112"
" i_116)))"
"(if '#t"
"(let-values(((fold-var_119)"
"(let-values(((fold-var_120)"
" fold-var_115))"
"(let-values(((fold-var_121)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_122)"
"(namespace->module"
" src-namespace_46"
" mod-name_109)))"
"(begin"
"(let-values(((dest-namespace44_123)"
" dest-namespace_48)"
"((m45_124)"
" m_122)"
"((mod-name46_125)"
" mod-name_109))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!49.1))"
"(declare-module!47.1"
" '#f"
" '#f"
" dest-namespace44_123"
" m45_124"
" mod-name46_125)"
"(declare-module!49.1"
" dest-namespace44_123"
" m45_124"
" mod-name46_125)))"
"(if m-ns_118"
"(let-values()"
"(let-values(((or-part_126)"
"(let-values(((dest-namespace47_127)"
" dest-namespace_48)"
"((mod-name48_128)"
" mod-name_109)"
"((phase49_129)"
" phase_117))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" dest-namespace47_127"
" mod-name48_128"
" phase49_129)"
"(namespace->module-namespace75.1"
" dest-namespace47_127"
" mod-name48_128"
" phase49_129)))))"
"(if or-part_126"
" or-part_126"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_109"
" phase_117"
" m_122"
" m-ns_118))))"
"(void)))))"
"(void)))))"
"(values"
" fold-var_121)))))"
"(if '#t"
"(for-loop_114"
" fold-var_119"
"(hash-iterate-next"
" ht_112"
" i_116))"
" fold-var_119))"
" fold-var_115))"
" fold-var_115))))"
" for-loop_114)"
" fold-var_107"
"(hash-iterate-first"
" ht_112))))))"
"(if '#t"
"(for-loop_106"
" fold-var_111"
"(hash-iterate-next ht_104 i_108))"
" fold-var_111))"
" fold-var_107))"
" fold-var_107))))"
" for-loop_106)"
"(void)"
"(hash-iterate-first ht_104))))"
"(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(let-values(((ht_130) todo_51))"
"(begin"
"(if((lambda(ht_131)(hash? ht_131)) ht_130)"
"(void)"
"(let-values()(default-in-hash-keys ht_130)))"
"((letrec-values(((for-loop_132)"
"(lambda(fold-var_133 i_134)"
"(if i_134"
"(let-values(((mod-name_135)"
"(hash-iterate-key ht_130 i_134)))"
"(if '#t"
"(let-values(((fold-var_136)"
"(let-values(((fold-var_137)"
" fold-var_133))"
"(let-values(((fold-var_138)"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_135"
" src-namespace_46))"
"(void)))))"
"(values fold-var_138)))))"
"(if '#t"
"(for-loop_132"
" fold-var_136"
"(hash-iterate-next ht_130 i_134))"
" fold-var_136))"
" fold-var_133))"
" fold-var_133))))"
" for-loop_132)"
"(void)"
"(hash-iterate-first ht_130))))))))))))))))))))))))"
"(define-values"
"(unpack20.1)"
"(lambda(given-kws_139 given-args_140 who15_141 src-namespace16_142 mod-path17_143 dest-namespace18_144)"
"(let-values(((attach-instances?14_145)(pair? given-kws_139)))"
"(let-values(((attach-instances?13_146)(if attach-instances?14_145(car given-args_140)(void))))"
"(do-attach-module19.1"
" attach-instances?13_146"
" attach-instances?14_145"
" who15_141"
" src-namespace16_142"
" mod-path17_143"
" dest-namespace18_144)))))"
"(define-values"
"(do-attach-module21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_147 given-argc_148)"
"(if(= given-argc_148 '6)"
"(let-values(((l1_149) given-kws_147))"
"(let-values(((l1_150)"
"(if(null? l1_149) l1_149(if(eq?(car l1_149) '#:attach-instances?)(cdr l1_149) l1_149))))"
"(null? l1_150)))"
" '#f))"
"(case-lambda"
"((given-kws_151 given-args_152 who_153 src-namespace_154 mod-path_155 dest-namespace_156)"
"(unpack20.1 given-kws_151 given-args_152 who_153 src-namespace_154 mod-path_155 dest-namespace_156)))"
" null"
" '(#:attach-instances?)"
"(let-values(((do-attach-module_157)"
"(case-lambda"
"((who_158 src-namespace_159 mod-path_160 dest-namespace_161)"
"(unpack20.1 null null who_158 src-namespace_159 mod-path_160 dest-namespace_161)))))"
" do-attach-module_157)))"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_2)(1/current-namespace)))"
"(let-values(((phase_3)(namespace-phase current-ns_2)))"
"(let-values(((ns_4)(namespace->namespace-at-phase(make-namespace) phase_3)))"
"(begin"
"(1/namespace-attach-module current-ns_2 ''#%kernel ns_4)"
"(namespace-primitive-module-visit! ns_4 '#%kernel)"
" ns_4))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_5)"
"(lambda(s3_6 ns1_7 ns2_8)"
"(let-values(((s_9) s3_6))"
"(let-values(((ns_10)(if ns2_8 ns1_7(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_9)"
"(void)"
"(let-values()"
" (raise-argument-error 'namespace-syntax-introduce '\"syntax?\" s_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_10)"
"(void)"
"(let-values()"
" (raise-argument-error 'namespace-syntax-introduce '\"namespace?\" ns_10)))"
"(values))))"
"(let-values(((root-ctx_11)(namespace-get-root-expand-ctx ns_10)))"
"(let-values(((post-scope_12)(root-expand-context-post-expansion-scope root-ctx_11)))"
"(let-values(((other-namespace-scopes_13)"
"(alt-reverse"
"(let-values(((lst_16)(root-expand-context-module-scopes root-ctx_11)))"
"(begin"
"(if(list? lst_16)(void)(let-values()(in-list lst_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18 lst_19)"
"(if(pair? lst_19)"
"(let-values(((sc_20)(unsafe-car lst_19)))"
"(if '#t"
"(let-values(((fold-var_21)"
"(let-values(((fold-var_22)"
" fold-var_18))"
"(if(equal?"
" sc_20"
" post-scope_12)"
" fold-var_22"
"(let-values(((fold-var_23)"
" fold-var_22))"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()"
" sc_20)"
" fold-var_23))))"
"(values"
" fold-var_24)))))))"
"(if '#t"
"(for-loop_17"
" fold-var_21"
"(unsafe-cdr lst_19))"
" fold-var_21))"
" fold-var_18))"
" fold-var_18))))"
" for-loop_17)"
" null"
" lst_16))))))"
"(let-values(((add-ns-scopes_14)"
"(lambda(s_25)"
"(syntax-set-inspector"
"(syntax-transfer-shifts"
"(push-scope"
"(add-scopes s_25 other-namespace-scopes_13)"
" post-scope_12)"
"(root-expand-context-all-scopes-stx root-ctx_11))"
"(let-values(((or-part_26)(namespace-declaration-inspector ns_10)))"
"(if or-part_26 or-part_26(current-code-inspector)))))))"
"(let-values(((maybe-module-id_15)"
"(if(pair?(syntax-e$2 s_9))"
"(if(identifier?(car(syntax-e$2 s_9)))"
"(add-ns-scopes_14(car(syntax-e$2 s_9)))"
" '#f)"
" '#f)))"
"(if(if maybe-module-id_15"
"(1/free-identifier=?"
" maybe-module-id_15"
"(1/namespace-module-identifier ns_10))"
" '#f)"
"(let-values()"
"(1/datum->syntax"
" s_9"
"(cons maybe-module-id_15(cdr(syntax-e$2 s_9)))"
" s_9"
" s_9))"
"(let-values()(add-ns-scopes_14 s_9))))))))))))))))"
"(case-lambda"
"((s_27)(namespace-syntax-introduce4_5 s_27 '#f '#f))"
"((s_28 ns1_29)(namespace-syntax-introduce4_5 s_28 ns1_29 '#t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_30)"
"(lambda(where6_31 where7_32)"
"(let-values(((where_33)(if where7_32 where6_31(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_34)(1/namespace? where_33)))"
"(if or-part_34 or-part_34(phase? where_33)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
" (string-append '\"(or/c namespace? \" phase?-string '\")\")"
" where_33)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_33)(namespace-phase where_33) where_33))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_30 '#f '#f))"
"((where6_35)(namespace-module-identifier8_30 where6_35 '#t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_36)"
"(begin"
"(if(symbol? sym_36)"
"(void)"
" (let-values () (raise-argument-error 'namespace-symbol->identifier '\"symbol?\" sym_36)))"
"(1/namespace-syntax-introduce(1/datum->syntax '#f sym_36)))))"
"(define-values"
"(lifted/1.1$16)"
"(make-required"
" 'do-namespace-require"
"(case-lambda((self_37 who_38 req_39 ns_40)(apply missing-kw self_37 who_38 req_39 ns_40 null)))"
" '#f"
" '#f))"
"(define-values"
"(do-namespace-require17.1)"
"(lambda(run?10_41 visit?11_42 who14_43 req15_44 ns16_45)"
"(let-values(((run?_46) run?10_41))"
"(let-values(((visit?_47) visit?11_42))"
"(let-values(((who_48) who14_43))"
"(let-values(((req_49) req15_44))"
"(let-values(((ns_50) ns16_45))"
"(let-values()"
"(begin"
" (if (1/namespace? ns_50) (void) (let-values () (raise-argument-error who_48 '\"namespace?\" ns_50)))"
"(let-values(((...er/namespace/api.rkt:101:2_51) parse-and-perform-requires!22.1)"
"((run?70_52) run?_46)"
"((visit?71_53) visit?_47)"
"((temp72_54)"
"(list"
"(add-scopes"
"(1/datum->syntax '#f req_49)"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_50)))))"
"((temp73_55) '#f)"
"((ns74_56) ns_50)"
"((temp75_57)(namespace-phase ns_50))"
"((temp76_58)(make-requires+provides '#f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" run?70_52"
" '#t"
" '#f"
" '#f"
" visit?71_53"
" '#t"
" temp72_54"
" temp73_55"
" ns74_56"
" temp75_57"
" temp76_58)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:101:2_51"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" '7)"
" '(#:run? #:visit?)"
"(list run?70_52 visit?71_53)"
" temp72_54"
" temp73_55"
" ns74_56"
" temp75_57"
" temp76_58))))))))))))"
"(define-values"
"(unpack18.1)"
"(lambda(given-kws_59 given-args_60 who14_61 req15_62 ns16_63)"
"(let-values(((run?10_64)(car given-args_60))"
"((given-kws_65)(cdr given-kws_59))"
"((given-args_66)(cdr given-args_60)))"
"(let-values(((visit?11_67)(car given-args_66)))"
"(do-namespace-require17.1 run?10_64 visit?11_67 who14_61 req15_62 ns16_63)))))"
"(define-values"
"(do-namespace-require19.1)"
"(lifted/1.1$16"
"(lambda(given-kws_68 given-argc_69)"
"(if(= given-argc_69 '5)"
"(let-values(((l2_70) given-kws_68))"
"(if(pair? l2_70)"
"(if(eq?(car l2_70) '#:run?)"
"(let-values(((l2_71)(cdr l2_70)))"
"(if(pair? l2_71)(if(eq?(car l2_71) '#:visit?)(null?(cdr l2_71)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_72 given-args_73 who_74 req_75 ns_76)(unpack18.1 given-kws_72 given-args_73 who_74 req_75 ns_76)))"
" '(#:run? #:visit?)"
" '(#:run? #:visit?)))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require23_77)"
"(lambda(req22_78 ns20_79 ns21_80)"
"(let-values(((req_81) req22_78))"
"(let-values(((ns_82)(if ns21_80 ns20_79(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:112:2_83) do-namespace-require19.1)"
"((temp77_84) '#t)"
"((temp78_85) '#f)"
"((temp79_86) 'namespace-require)"
"((req80_87) req_81)"
"((ns81_88) ns_82))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require19.1))"
"(do-namespace-require17.1 temp77_84 temp78_85 temp79_86 req80_87 ns81_88)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:112:2_83"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" '5)"
" '(#:run? #:visit?)"
"(list temp77_84 temp78_85)"
" temp79_86"
" req80_87"
" ns81_88)))))))))"
"(case-lambda"
"((req_89)(namespace-require23_77 req_89 '#f '#f))"
"((req_90 ns20_91)(namespace-require23_77 req_90 ns20_91 '#t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time28_92)"
"(lambda(req27_93 ns25_94 ns26_95)"
"(let-values(((req_96) req27_93))"
"(let-values(((ns_97)(if ns26_95 ns25_94(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:115:2_98) do-namespace-require19.1)"
"((temp82_99) '#f)"
"((temp83_100) '#t)"
"((temp84_101) 'namespace-require/expansion-time)"
"((req85_102) req_96)"
"((ns86_103) ns_97))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require19.1))"
"(do-namespace-require17.1 temp82_99 temp83_100 temp84_101 req85_102 ns86_103)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:115:2_98"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" '5)"
" '(#:run? #:visit?)"
"(list temp82_99 temp83_100)"
" temp84_101"
" req85_102"
" ns86_103)))))))))"
"(case-lambda"
"((req_104)(namespace-require/expansion-time28_92 req_104 '#f '#f))"
"((req_105 ns25_106)(namespace-require/expansion-time28_92 req_105 ns25_106 '#t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant33_107)"
"(lambda(req32_108 ns30_109 ns31_110)"
"(let-values(((req_111) req32_108))"
"(let-values(((ns_112)(if ns31_110 ns30_109(1/current-namespace))))"
"(let-values()(1/namespace-require req_111 ns_112)))))))"
"(case-lambda"
"((req_113)(namespace-require/constant33_107 req_113 '#f '#f))"
"((req_114 ns30_115)(namespace-require/constant33_107 req_114 ns30_115 '#t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy38_116)"
"(lambda(req37_117 ns35_118 ns36_119)"
"(let-values(((req_120) req37_117))"
"(let-values(((ns_121)(if ns36_119 ns35_118(1/current-namespace))))"
"(let-values()(1/namespace-require req_120 ns_121)))))))"
"(case-lambda"
"((req_122)(namespace-require/copy38_116 req_122 '#f '#f))"
"((req_123 ns35_124)(namespace-require/copy38_116 req_123 ns35_124 '#t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value47_125)"
"(lambda(sym46_126"
" use-mapping?40_127"
" failure-thunk41_128"
" ns42_129"
" use-mapping?43_130"
" failure-thunk44_131"
" ns45_132)"
"(let-values(((sym_133) sym46_126))"
"(let-values(((use-mapping?_134)(if use-mapping?43_130 use-mapping?40_127 '#f)))"
"(let-values(((failure-thunk_135)(if failure-thunk44_131 failure-thunk41_128 '#f)))"
"(let-values(((ns_136)(if ns45_132 ns42_129(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_133)"
"(void)"
" (let-values () (raise-argument-error 'namespace-variable-value '\"symbol?\" sym_133)))"
"(if(let-values(((or-part_137)(not failure-thunk_135)))"
"(if or-part_137"
" or-part_137"
"(if(procedure? failure-thunk_135)"
"(procedure-arity-includes? failure-thunk_135 '0)"
" '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
" '\"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_135)))"
"(if(1/namespace? ns_136)"
"(void)"
" (let-values () (raise-argument-error 'namespace-variable-value '\"namespace?\" ns_136)))"
"((call/ec"
"(lambda(escape_138)"
"(let-values(((var-ns_139 var-phase-level_140 var-sym_141)"
"(if use-mapping?_134"
"(let-values()"
"(let-values(((id_143)(1/datum->syntax '#f sym_133)))"
"(let-values(((b_144)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_143 ns_136)"
"(namespace-phase ns_136)"
" ns_136)))"
"(let-values(((v_145)"
"(if b_144"
"(let-values(((b87_146) b_144)"
"((empty-env88_147) empty-env)"
"((null89_148) null)"
"((ns90_149) ns_136)"
"((temp91_150)"
"(namespace-phase ns_136))"
"((id92_151) id_143))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" binding-lookup48.1))"
"(binding-lookup46.1"
" '#f"
" '#f"
" '#f"
" '#f"
" b87_146"
" empty-env88_147"
" null89_148"
" ns90_149"
" temp91_150"
" id92_151)"
"(binding-lookup48.1"
" b87_146"
" empty-env88_147"
" null89_148"
" ns90_149"
" temp91_150"
" id92_151)))"
" variable)))"
"(begin"
"(if(variable? v_145)"
"(void)"
"(let-values()"
"(escape_138"
"(let-values(((or-part_152) failure-thunk_135))"
"(if or-part_152"
" or-part_152"
"(lambda()"
"(raise"
"(make-exn:fail:syntax"
"(format"
"(string-append"
" '\"namespace-variable-value: bound to syntax\\n\""
" '\" in: ~s\")"
" sym_133)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_144)"
"(values"
"(let-values(((ns93_153) ns_136)"
"((temp94_154)(module-binding-module b_144))"
"((temp95_155)"
"(phase-"
"(namespace-phase ns_136)"
"(module-binding-phase b_144))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" ns93_153"
" temp94_154"
" temp95_155)"
"(namespace->module-namespace75.1"
" ns93_153"
" temp94_154"
" temp95_155)))"
"(module-binding-phase b_144)"
"(module-binding-sym b_144))"
"(values ns_136(namespace-phase ns_136) sym_133)))))))"
"(let-values()(values ns_136(namespace-phase ns_136) sym_133)))))"
"(let-values(((val_142)"
"(namespace-get-variable"
" var-ns_139"
" var-phase-level_140"
" var-sym_141"
"(lambda()"
"(escape_138"
"(let-values(((or-part_156) failure-thunk_135))"
"(if or-part_156"
" or-part_156"
"(raise"
" exn:fail:contract:variable"
"(format"
"(string-append"
" '\"namespace-variable-value: given name is not defined\\n\""
" '\" name: ~s\"))"
" sym_133))))))))"
"(lambda() val_142)))))))))))))))"
"(case-lambda"
"((sym_157)(namespace-variable-value47_125 sym_157 '#f '#f '#f '#f '#f '#f))"
"((sym_158 use-mapping?_159 failure-thunk_160 ns42_161)"
"(namespace-variable-value47_125 sym_158 use-mapping?_159 failure-thunk_160 ns42_161 '#t '#t '#t))"
"((sym_162 use-mapping?_163 failure-thunk41_164)"
"(namespace-variable-value47_125 sym_162 use-mapping?_163 failure-thunk41_164 '#f '#t '#t '#f))"
"((sym_165 use-mapping?40_166)(namespace-variable-value47_125 sym_165 use-mapping?40_166 '#f '#f '#t '#f '#f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!55_167)"
"(lambda(sym53_168 val54_169 map?49_170 ns50_171 map?51_172 ns52_173)"
"(let-values(((sym_174) sym53_168))"
"(let-values(((val_175) val54_169))"
"(let-values(((map?_176)(if map?51_172 map?49_170 '#f)))"
"(let-values(((ns_177)(if ns52_173 ns50_171(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_174)"
"(void)"
" (let-values () (raise-argument-error 'namespace-variable-value '\"symbol?\" sym_174)))"
"(if(1/namespace? ns_177)"
"(void)"
" (let-values () (raise-argument-error 'namespace-variable-value '\"namespace?\" ns_177)))"
"(namespace-set-variable! ns_177(namespace-phase ns_177) sym_174 val_175)"
"(if map?_176"
"(let-values()"
"(let-values(((id_178)(1/datum->syntax '#f sym_174)))"
"(let-values(((temp96_179)(1/namespace-syntax-introduce id_178 ns_177))"
"((temp97_180)"
"(let-values(((temp99_182)(namespace-mpi ns_177))"
"((temp100_183)(namespace-phase ns_177))"
"((sym101_184) sym_174))"
"(if(variable-reference-constant?"
"(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp99_182"
" temp100_183"
" sym101_184)"
"(make-module-binding22.1 temp99_182 temp100_183 sym101_184))))"
"((temp98_181)(namespace-phase ns_177)))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 '#f '#f temp96_179 temp97_180 temp98_181)"
"(add-binding!17.1 temp96_179 temp97_180 temp98_181)))))"
"(void)))))))))))"
"(case-lambda"
"((sym_185 val_186)(namespace-set-variable-value!55_167 sym_185 val_186 '#f '#f '#f '#f))"
"((sym_187 val_188 map?_189 ns50_190)"
"(namespace-set-variable-value!55_167 sym_187 val_188 map?_189 ns50_190 '#t '#t))"
"((sym_191 val_192 map?49_193)(namespace-set-variable-value!55_167 sym_191 val_192 map?49_193 '#f '#t '#f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!60_194)"
"(lambda(sym59_195 ns57_196 ns58_197)"
"(let-values(((sym_198) sym59_195))"
"(let-values(((ns_199)(if ns58_197 ns57_196(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_198)"
"(void)"
" (let-values () (raise-argument-error 'namespace-variable-value '\"symbol?\" sym_198)))"
"(if(1/namespace? ns_199)"
"(void)"
" (let-values () (raise-argument-error 'namespace-variable-value '\"namespace?\" ns_199)))"
"(namespace-unset-variable! ns_199(namespace-phase ns_199) sym_198))))))))"
"(case-lambda"
"((sym_200)(namespace-undefine-variable!60_194 sym_200 '#f '#f))"
"((sym_201 ns57_202)(namespace-undefine-variable!60_194 sym_201 ns57_202 '#t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols64_203)"
"(lambda(ns62_204 ns63_205)"
"(let-values(((ns_206)(if ns63_205 ns62_204(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_206)"
"(void)"
" (let-values () (raise-argument-error 'namespace-mapped-symbols '\"namespace?\" ns_206)))"
" null))))))"
"(case-lambda"
"(()(namespace-mapped-symbols64_203 '#f '#f))"
"((ns62_207)(namespace-mapped-symbols64_203 ns62_207 '#t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase68_208)"
"(lambda(ns66_209 ns67_210)"
"(let-values(((ns_211)(if ns67_210 ns66_209(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_211)"
"(void)"
" (let-values () (raise-argument-error 'namespace-base-phase '\"namespace?\" ns_211)))"
"(namespace-phase ns_211)))))))"
"(case-lambda(()(namespace-base-phase68_208 '#f '#f))((ns66_212)(namespace-base-phase68_208 ns66_212 '#t)))))"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))(if or-part_2 or-part_2(1/linklet-directory? c_1)))))"
"(define-values"
"(compiled->linklet-directory)"
"(lambda(c_3)(if(compiled-in-memory? c_3)(compiled-in-memory-linklet-directory c_3) c_3)))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_4)"
"(let-values(((ld_5)(compiled->linklet-directory c_4)))"
"(if(1/linklet-directory? ld_5)"
"(if(let-values(((b_6)(hash-ref(1/linklet-directory->hash ld_5) '#f '#f)))"
"(if b_6(hash-ref(1/linklet-bundle->hash b_6) 'decl '#f) '#f))"
" '#t"
" '#f)"
" '#f))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_7)"
"(begin"
"(if(1/compiled-module-expression? c_7)"
"(void)"
" (let-values () (raise-argument-error 'module-compiled-name '\"compiled-module-expression?\" c_7)))"
"(hash-ref"
"(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_7)) '#f))"
" 'name)))"
"((c_8 name_9)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_8)"
"(void)"
" (let-values () (raise-argument-error 'module-compiled-name '\"compiled-module-expression?\" c_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)(symbol? name_9)))"
"(if or-part_11"
" or-part_11"
"(if(pair? name_9)(if(list? name_9)(andmap2 symbol? name_9) '#f) '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
" '\"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_9)))"
"(values))))"
"(let-values(((prefix_10)(if(symbol? name_9) null(alt-reverse(cdr(alt-reverse name_9))))))"
"(change-module-name c_8 name_9 prefix_10)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_12 non-star?_13)"
"(begin"
"(if(1/compiled-module-expression? c_12)"
"(void)"
" (let-values () (raise-argument-error 'module-compiled-submodules '\"compiled-module-expression?\" c_12)))"
"(if(compiled-in-memory? c_12)"
"(let-values()"
"(if non-star?_13"
"(compiled-in-memory-pre-compiled-in-memorys c_12)"
"(compiled-in-memory-post-compiled-in-memorys c_12)))"
"(let-values()"
"(let-values(((ht_14)(1/linklet-directory->hash c_12)))"
"(let-values(((bh_15)(1/linklet-bundle->hash(hash-ref ht_14 '#f))))"
"(let-values(((names_16)(hash-ref bh_15(if non-star?_13 'pre-submodules 'post-submodules) null)))"
"(alt-reverse"
"(let-values(((lst_17) names_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((name_21)(unsafe-car lst_20)))"
"(if '#t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23) fold-var_19))"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()(hash-ref ht_14 name_21))"
" fold-var_23))))"
"(values fold-var_24)))))"
"(if '#t(for-loop_18 fold-var_22(unsafe-cdr lst_20)) fold-var_22))"
" fold-var_19))"
" fold-var_19))))"
" for-loop_18)"
" null"
" lst_17)))))))))))"
"((c_25 non-star?_26 submods_27)"
"(begin"
"(if(1/compiled-module-expression? c_25)"
"(void)"
" (let-values () (raise-argument-error 'module-compiled-submodules '\"compiled-module-expression?\" c_25)))"
"(if(if(list? submods_27)(andmap2 1/compiled-module-expression? submods_27) '#f)"
"(void)"
"(let-values()"
" (raise-argument-error 'module-compiled-submodules '\"(listof compiled-module-expression?)\" submods_27)))"
"(if(if(compiled-in-memory? c_25)(andmap2 compiled-in-memory? submods_27) '#f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_28)"
"(if non-star?_26 submods_27(compiled-in-memory-pre-compiled-in-memorys c_25))))"
"(let-values(((post-compiled-in-memorys_29)"
"(if non-star?_26(compiled-in-memory-post-compiled-in-memorys c_25) submods_27)))"
"(fixup-submodule-names"
"(let-values(((the-struct_30) c_25))"
"(if(compiled-in-memory? the-struct_30)"
"(let-values(((pre-compiled-in-memorys1_31) pre-compiled-in-memorys_28)"
"((post-compiled-in-memorys2_32) post-compiled-in-memorys_29)"
"((linklet-directory3_33)"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_25)) '#f)"
" non-star?_26"
" submods_27)"
"(append pre-compiled-in-memorys_28 post-compiled-in-memorys_29))))"
"(compiled-in-memory1.1"
" linklet-directory3_33"
"(compiled-in-memory-phase the-struct_30)"
"(compiled-in-memory-max-phase the-struct_30)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_30)"
"(compiled-in-memory-compile-time-inspector the-struct_30)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_30)"
"(compiled-in-memory-mpis the-struct_30)"
"(compiled-in-memory-syntax-literalss the-struct_30)"
" pre-compiled-in-memorys1_31"
" post-compiled-in-memorys2_32))"
" (raise-argument-error 'struct-copy '\"compiled-in-memory?\" the-struct_30)))))))"
"(let-values()"
"(fixup-submodule-names"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_25)) '#f)"
" non-star?_26"
" submods_27)"
"(map2"
" compiled->linklet-directory"
"(append"
"(if non-star?_26 submods_27(1/module-compiled-submodules c_25 '#t))"
"(if non-star?_26(1/module-compiled-submodules c_25 '#f) submods_27)))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_34)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_34)"
"(void)"
"(let-values()"
" (raise-argument-error 'module-compiled-language-info '\"compiled-module-expression?\" c_34)))"
"(values))))"
"(let-values(((inst_35)(compiled-module->declaration-instance c_34)))"
"(1/instance-variable-value inst_35 'language-info)))))"
"(define-values(module-compiled-immediate-name)(lambda(c_36)(car(alt-reverse(1/module-compiled-name c_36)))))"
"(define-values"
"(change-module-name)"
"(lambda(c_37 name_38 prefix_39)"
"(let-values(((full-name_40)(if(null? prefix_39) name_38(append prefix_39(list name_38)))))"
"(let-values(((next-prefix_41)(if(null? prefix_39)(list name_38) full-name_40)))"
"(let-values(((recur_42)"
"(lambda(sub-c_43 name_44)"
"(if(equal?(1/module-compiled-name sub-c_43)(append next-prefix_41(list name_44)))"
" sub-c_43"
"(change-module-name sub-c_43 name_44 next-prefix_41)))))"
"(if(compiled-in-memory? c_37)"
"(let-values()"
"(let-values(((change-submodule-name_45)"
"(lambda(sub-c_48)(recur_42 sub-c_48(module-compiled-immediate-name sub-c_48)))))"
"(let-values(((pre-compiled-in-memorys_46)"
"(map2 change-submodule-name_45(compiled-in-memory-pre-compiled-in-memorys c_37))))"
"(let-values(((post-compiled-in-memorys_47)"
"(map2 change-submodule-name_45(compiled-in-memory-post-compiled-in-memorys c_37))))"
"(let-values(((the-struct_49) c_37))"
"(if(compiled-in-memory? the-struct_49)"
"(let-values(((pre-compiled-in-memorys4_50) pre-compiled-in-memorys_46)"
"((post-compiled-in-memorys5_51) post-compiled-in-memorys_47)"
"((linklet-directory6_52)"
"(rebuild-linklet-directory"
"(update-one-name"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_37)) '#f)"
" full-name_40)"
"(append pre-compiled-in-memorys_46 post-compiled-in-memorys_47))))"
"(compiled-in-memory1.1"
" linklet-directory6_52"
"(compiled-in-memory-phase the-struct_49)"
"(compiled-in-memory-max-phase the-struct_49)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_49)"
"(compiled-in-memory-compile-time-inspector the-struct_49)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_49)"
"(compiled-in-memory-mpis the-struct_49)"
"(compiled-in-memory-syntax-literalss the-struct_49)"
" pre-compiled-in-memorys4_50"
" post-compiled-in-memorys5_51))"
" (raise-argument-error 'struct-copy '\"compiled-in-memory?\" the-struct_49)))))))"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_53)(1/linklet-directory->hash c_37)))"
"(begin"
"(if((lambda(ht_54)(hash? ht_54)) ht_53)(void)(let-values()(default-in-hash ht_53)))"
"((letrec-values(((for-loop_55)"
"(lambda(table_56 i_57)"
"(if i_57"
"(let-values(((key_58 val_59)(hash-iterate-key+value ht_53 i_57)))"
"(if '#t"
"(let-values(((table_60)"
"(let-values(((table_61) table_56))"
"(let-values(((table_62)"
"(let-values()"
"(let-values(((key_63 val_64)"
"(let-values()"
"(values"
" key_58"
"(if(not key_58)"
"(update-one-name"
" val_59"
" full-name_40)"
"(recur_42"
" val_59"
" key_58))))))"
"(hash-set table_61 key_63 val_64)))))"
"(values table_62)))))"
"(if '#t(for-loop_55 table_60(hash-iterate-next ht_53 i_57)) table_60))"
" table_56))"
" table_56))))"
" for-loop_55)"
" '#hasheq()"
"(hash-iterate-first ht_53))))))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_65 name_66)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_65) 'name name_66))))"
"(define-values(fixup-submodule-names)(lambda(c_67)(1/module-compiled-name c_67(1/module-compiled-name c_67))))"
"(define-values"
"(rebuild-linklet-directory)"
"(lambda(main_68 submods_69)"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_70) submods_69))"
"(begin"
"(if(list? lst_70)(void)(let-values()(in-list lst_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(ht_72 lst_73)"
"(if(pair? lst_73)"
"(let-values(((submod_74)(unsafe-car lst_73)))"
"(if '#t"
"(let-values(((ht_75)"
"(let-values(((ht_76) ht_72))"
"(let-values(((ht_77)"
"(let-values()"
"(let-values(((name_78)"
"(module-compiled-immediate-name"
" submod_74)))"
"(if(hash-ref ht_76 name_78 '#f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
" '\"change would result in duplicate submodule name\""
" '\"name\""
" name_78))"
"(let-values()"
"(hash-set ht_76 name_78 submod_74)))))))"
"(values ht_77)))))"
"(if '#t(for-loop_71 ht_75(unsafe-cdr lst_73)) ht_75))"
" ht_72))"
" ht_72))))"
" for-loop_71)"
" '#hasheq()"
" lst_70)))"
" '#f"
" main_68))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_79 pre?_80 submods_81)"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_79)"
"(if pre?_80 'pre 'post)"
"(map2 module-compiled-immediate-name submods_81)))))"
"(define-values"
"(eval$1)"
"(let-values(((eval6_2)"
"(lambda(s5_3 ns1_4 compile2_5 ns3_6 compile4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((ns_9)(if ns3_6 ns1_4(1/current-namespace))))"
"(let-values(((compile_10)"
"(if compile4_7 compile2_5(lambda(s_11 ns_12)(compile$1 s_11 ns_12 '#f)))))"
"(let-values()"
"(if(let-values(((or-part_13)(compiled-in-memory? s_8)))"
"(if or-part_13 or-part_13(1/linklet-directory? s_8)))"
"(let-values()(eval-compiled s_8 ns_9))"
"(if(if(syntax?$1 s_8)"
"(let-values(((or-part_14)(compiled-in-memory?(syntax-e$2 s_8))))"
"(if or-part_14 or-part_14(1/linklet-directory?(syntax-e$2 s_8))))"
" '#f)"
"(let-values()(eval-compiled(1/syntax->datum s_8) ns_9))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:48:4_15) per-top-level46.1)"
"((s47_16) s_8)"
"((ns48_17) ns_9)"
"((temp49_18)"
"(lambda(s_19 ns_20)(eval-compiled(compile_10 s_19 ns_20) ns_20))))"
"(if(variable-reference-constant?(#%variable-reference per-top-level46.1))"
"(per-top-level44.1 '#f '#f '#f '#f temp49_18 '#f '#f s47_16 ns48_17)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:48:4_15"
" keyword-procedure-extract"
" '(#:single)"
" '4)"
" '(#:single)"
"(list temp49_18)"
" s47_16"
" ns48_17)))))))))))))"
"(case-lambda"
"((s_21)(eval6_2 s_21 '#f '#f '#f '#f))"
"((s_22 ns_23 compile2_24)(eval6_2 s_22 ns_23 compile2_24 '#t '#t))"
"((s_25 ns1_26)(eval6_2 s_25 ns1_26 '#f '#t '#f)))))"
"(define-values"
"(eval-compiled)"
"(lambda(c_27 ns_28)"
"(if(1/compiled-module-expression? c_27)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:55:4_29) eval-module10.1)((c50_30) c_27)((ns51_31) ns_28))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 '#f '#f ns51_31 '#t '#f '#f c50_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:55:4_29"
" keyword-procedure-extract"
" '(#:namespace)"
" '3)"
" '(#:namespace)"
"(list ns51_31)"
" c50_30))))"
"(let-values()(eval-top c_27 ns_28 eval-compiled)))))"
"(define-values"
"(compile$1)"
"(let-values(((compile15_32)"
"(lambda(s14_33 ns8_34 serializable?9_35 expand10_36 ns11_37 serializable?12_38 expand13_39)"
"(let-values(((s_40) s14_33))"
"(let-values(((ns_41)(if ns11_37 ns8_34(1/current-namespace))))"
"(let-values(((serializable?_42)(if serializable?12_38 serializable?9_35 '#t)))"
"(let-values(((expand_43)(if expand13_39 expand10_36 expand$1)))"
"(let-values()"
"(let-values(((cs_44)"
"(let-values(((...pander/eval/main.rkt:63:4_45) per-top-level46.1)"
"((s52_46) s_40)"
"((ns53_47) ns_41)"
"((temp54_48)"
"(lambda(s_50 ns_51)"
"(list"
"(compile-single$1 s_50 ns_51 expand_43 serializable?_42))))"
"((append55_49) append))"
"(if(variable-reference-constant?(#%variable-reference per-top-level46.1))"
"(per-top-level44.1"
" append55_49"
" '#t"
" '#f"
" '#f"
" temp54_48"
" '#f"
" '#f"
" s52_46"
" ns53_47)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:63:4_45"
" keyword-procedure-extract"
" '(#:combine #:single)"
" '4)"
" '(#:combine #:single)"
"(list append55_49 temp54_48)"
" s52_46"
" ns53_47)))))"
"(if(= '1(length cs_44))(car cs_44)(compiled-tops->compiled-top cs_44)))))))))))"
"(case-lambda"
"((s_52)(compile15_32 s_52 '#f '#f '#f '#f '#f '#f))"
"((s_53 ns_54 serializable?_55 expand10_56)(compile15_32 s_53 ns_54 serializable?_55 expand10_56 '#t '#t '#t))"
"((s_57 ns_58 serializable?9_59)(compile15_32 s_57 ns_58 serializable?9_59 '#f '#t '#t '#f))"
"((s_60 ns8_61)(compile15_32 s_60 ns8_61 '#f '#f '#t '#f '#f)))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_62 ns_63 expand_64 serializable?_65)"
"(let-values(((exp-s_66)(expand_64 s_62 ns_63)))"
"((letrec-values(((loop_67)"
"(lambda(exp-s_68)"
"(let-values(((disarmed-exp-s_69)(syntax-disarm$1 exp-s_68)))"
"(let-values(((tmp_70)(core-form-sym disarmed-exp-s_69(namespace-phase ns_63))))"
"(if(equal? tmp_70 'module)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:77:7_71) compile-module11.1)"
"((exp-s56_72) exp-s_68)"
"((temp57_73)"
"(let-values(((...pander/eval/main.rkt:77:29_75)"
" make-compile-context16.1)"
"((ns59_76) ns_63))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" ns59_76"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:77:29_75"
" keyword-procedure-extract"
" '(#:namespace)"
" '2)"
" '(#:namespace)"
"(list ns59_76)))))"
"((serializable?58_74) serializable?_65))"
"(if(variable-reference-constant?(#%variable-reference compile-module11.1))"
"(compile-module9.1 '#f '#f '#f '#f serializable?58_74 '#t exp-s56_72 temp57_73)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:77:7_71"
" keyword-procedure-extract"
" '(#:serializable?)"
" '4)"
" '(#:serializable?)"
"(list serializable?58_74)"
" exp-s56_72"
" temp57_73))))"
"(if(equal? tmp_70 'begin)"
"(let-values()"
"(let-values(((m_77)(match-syntax disarmed-exp-s_69 '(begin e ...))))"
"(compiled-tops->compiled-top"
"(alt-reverse"
"(let-values(((lst_78)(m_77 'e)))"
"(begin"
"(if(list? lst_78)(void)(let-values()(in-list lst_78)))"
"((letrec-values(((for-loop_79)"
"(lambda(fold-var_80 lst_81)"
"(if(pair? lst_81)"
"(let-values(((e_82)(unsafe-car lst_81)))"
"(if '#t"
"(let-values(((fold-var_83)"
"(let-values(((fold-var_84)"
" fold-var_80))"
"(let-values(((fold-var_85)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_67 e_82))"
" fold-var_84))))"
"(values fold-var_85)))))"
"(if '#t"
"(for-loop_79 fold-var_83(unsafe-cdr lst_81))"
" fold-var_83))"
" fold-var_80))"
" fold-var_80))))"
" for-loop_79)"
" null"
" lst_78)))))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:86:7_86) compile-top7.1)"
"((exp-s60_87) exp-s_68)"
"((temp61_88)"
"(let-values(((...pander/eval/main.rkt:86:26_90)"
" make-compile-context16.1)"
"((ns63_91) ns_63))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" ns63_91"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:86:26_90"
" keyword-procedure-extract"
" '(#:namespace)"
" '2)"
" '(#:namespace)"
"(list ns63_91)))))"
"((serializable?62_89) serializable?_65))"
"(if(variable-reference-constant?(#%variable-reference compile-top7.1))"
"(compile-top5.1 serializable?62_89 '#t exp-s60_87 temp61_88)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:86:7_86"
" keyword-procedure-extract"
" '(#:serializable?)"
" '4)"
" '(#:serializable?)"
"(list serializable?62_89)"
" exp-s60_87"
" temp61_88)))))))))))"
" loop_67)"
" exp-s_66))))"
"(define-values"
"(expand$1)"
"(let-values(((expand22_92)"
"(lambda(s21_93 ns17_94 log-expand?18_95 ns19_96 log-expand?20_97)"
"(let-values(((s_98) s21_93))"
"(let-values(((ns_99)(if ns19_96 ns17_94(1/current-namespace))))"
"(let-values(((log-expand?_100)(if log-expand?20_97 log-expand?18_95 '#f)))"
"(let-values()"
"(begin"
"(if log-expand?_100(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:93:2_101) per-top-level46.1)"
"((s64_102) s_98)"
"((ns65_103) ns_99)"
"((expand-single66_104) expand-single)"
"((cons67_105) cons)"
"((re-pair68_106) re-pair))"
"(if(variable-reference-constant?(#%variable-reference per-top-level46.1))"
"(per-top-level44.1"
" cons67_105"
" '#t"
" '#f"
" '#f"
" expand-single66_104"
" re-pair68_106"
" '#t"
" s64_102"
" ns65_103)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:93:2_101"
" keyword-procedure-extract"
" '(#:combine #:single #:wrap)"
" '4)"
" '(#:combine #:single #:wrap)"
"(list cons67_105 expand-single66_104 re-pair68_106)"
" s64_102"
" ns65_103)))))))))))"
"(case-lambda"
"((s_107)(expand22_92 s_107 '#f '#f '#f '#f))"
"((s_108 ns_109 log-expand?18_110)(expand22_92 s_108 ns_109 log-expand?18_110 '#t '#t))"
"((s_111 ns17_112)(expand22_92 s_111 ns17_112 '#f '#t '#f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_113 ns_114)"
"(let-values(((require-lifts_115 lifts_116 exp-s_117)(expand-capturing-lifts s_113(make-expand-context ns_114))))"
"(if(if(null? require-lifts_115)(null? lifts_116) '#f)"
"(let-values() exp-s_117)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:104:4_118) wrap-lifts-as-begin17.1)"
"((temp69_119)(append require-lifts_115 lifts_116))"
"((temp70_120)(lambda(form_124)(expand-single form_124 ns_114)))"
"((exp-s71_121) exp-s_117)"
"((s72_122) s_113)"
"((temp73_123)(namespace-phase ns_114)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 temp70_120 '#t temp69_119 exp-s71_121 s72_122 temp73_123)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:104:4_118"
" keyword-procedure-extract"
" '(#:adjust-form)"
" '6)"
" '(#:adjust-form)"
"(list temp70_120)"
" temp69_119"
" exp-s71_121"
" s72_122"
" temp73_123))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once27_125)"
"(lambda(s26_126 ns24_127 ns25_128)"
"(let-values(((s_129) s26_126))"
"(let-values(((ns_130)(if ns25_128 ns24_127(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:110:2_131) per-top-level46.1)"
"((s74_132) s_129)"
"((ns75_133) ns_130)"
"((expand-single-once76_134) expand-single-once)"
"((cons77_135) cons)"
"((re-pair78_136) re-pair)"
"((temp79_137) '#t))"
"(if(variable-reference-constant?(#%variable-reference per-top-level46.1))"
"(per-top-level44.1"
" cons77_135"
" '#t"
" temp79_137"
" '#t"
" expand-single-once76_134"
" re-pair78_136"
" '#t"
" s74_132"
" ns75_133)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:110:2_131"
" keyword-procedure-extract"
" '(#:combine #:just-once? #:single #:wrap)"
" '4)"
" '(#:combine #:just-once? #:single #:wrap)"
"(list cons77_135 temp79_137 expand-single-once76_134 re-pair78_136)"
" s74_132"
" ns75_133)))))))))"
"(case-lambda"
"((s_138)(expand-once27_125 s_138 '#f '#f))"
"((s_139 ns24_140)(expand-once27_125 s_139 ns24_140 '#t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_141 ns_142)"
"(let-values(((require-lifts_143 lifts_144 exp-s_145)"
"(expand-capturing-lifts"
" s_141"
"(let-values(((the-struct_146)(make-expand-context ns_142)))"
"(if(expand-context? the-struct_146)"
"(let-values(((just-once?80_147) '#t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_146)"
"(root-expand-context-post-expansion-scope the-struct_146)"
"(root-expand-context-top-level-bind-scope the-struct_146)"
"(root-expand-context-all-scopes-stx the-struct_146)"
"(root-expand-context-use-site-scopes the-struct_146)"
"(root-expand-context-defined-syms the-struct_146)"
"(root-expand-context-frame-id the-struct_146)"
"(root-expand-context-counter the-struct_146)"
"(root-expand-context-lift-key the-struct_146)"
"(expand-context-context the-struct_146)"
"(expand-context-phase the-struct_146)"
"(expand-context-namespace the-struct_146)"
"(expand-context-env the-struct_146)"
"(expand-context-post-expansion-scope-action the-struct_146)"
"(expand-context-scopes the-struct_146)"
"(expand-context-def-ctx-scopes the-struct_146)"
"(expand-context-reference-records the-struct_146)"
"(expand-context-only-immediate? the-struct_146)"
" just-once?80_147"
"(expand-context-module-begin-k the-struct_146)"
"(expand-context-need-eventually-defined the-struct_146)"
"(expand-context-allow-unbound? the-struct_146)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_146)"
"(expand-context-stops the-struct_146)"
"(expand-context-current-introduction-scopes the-struct_146)"
"(expand-context-declared-submodule-names the-struct_146)"
"(expand-context-lifts the-struct_146)"
"(expand-context-lift-envs the-struct_146)"
"(expand-context-module-lifts the-struct_146)"
"(expand-context-require-lifts the-struct_146)"
"(expand-context-to-module-lifts the-struct_146)"
"(expand-context-requires+provides the-struct_146)"
"(expand-context-name the-struct_146)"
"(expand-context-observer the-struct_146)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_146))))))"
"(if(if(null? require-lifts_143)(null? lifts_144) '#f)"
"(let-values() exp-s_145)"
"(let-values()"
"(let-values(((temp81_148)(append require-lifts_143 lifts_144))"
"((exp-s82_149) exp-s_145)"
"((s83_150) s_141)"
"((temp84_151)(namespace-phase ns_142)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 '#f '#f temp81_148 exp-s82_149 s83_150 temp84_151)"
"(wrap-lifts-as-begin17.1 temp81_148 exp-s82_149 s83_150 temp84_151))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form32_152)"
"(lambda(s31_153 ns29_154 ns30_155)"
"(let-values(((s_156) s31_153))"
"(let-values(((ns_157)(if ns30_155 ns29_154(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:130:2_158) per-top-level46.1)"
"((s85_159) s_156)"
"((ns86_160) ns_157)"
"((temp87_161) '#f))"
"(if(variable-reference-constant?(#%variable-reference per-top-level46.1))"
"(per-top-level44.1 '#f '#f '#f '#f temp87_161 '#f '#f s85_159 ns86_160)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:130:2_158"
" keyword-procedure-extract"
" '(#:single)"
" '4)"
" '(#:single)"
"(list temp87_161)"
" s85_159"
" ns86_160)))))))))"
"(case-lambda"
"((s_162)(expand-to-top-form32_152 s_162 '#f '#f))"
"((s_163 ns29_164)(expand-to-top-form32_152 s_163 ns29_164 '#t)))))"
"(define-values"
"(lifted/1.1$12)"
"(make-required"
" 'per-top-level"
"(case-lambda((self_165 given-s_166 ns_167)(apply missing-kw self_165 given-s_166 ns_167 null)))"
" '#f"
" '#f))"
"(define-values"
"(per-top-level44.1)"
"(lambda(combine35_168"
" combine39_169"
" just-once?37_170"
" just-once?41_171"
" single34_172"
" wrap36_173"
" wrap40_174"
" given-s42_175"
" ns43_176)"
"(let-values(((given-s_177) given-s42_175))"
"(let-values(((ns_178) ns43_176))"
"(let-values(((single_179) single34_172))"
"(let-values(((combine_180)(if combine39_169 combine35_168 '#f)))"
"(let-values(((wrap_181)(if wrap40_174 wrap36_173 '#f)))"
"(let-values(((just-once?_182)(if just-once?41_171 just-once?37_170 '#f)))"
"(let-values()"
"(let-values(((s_183)(maybe-intro given-s_177 ns_178)))"
"(let-values(((ctx_184)(make-expand-context ns_178)))"
"(let-values(((phase_185)(namespace-phase ns_178)))"
"((letrec-values(((loop_186)"
"(lambda(s_187 phase_188 ns_189)"
"(let-values(((tl-ctx_190)"
"(let-values(((the-struct_195) ctx_184))"
"(if(expand-context? the-struct_195)"
"(let-values(((phase88_196) phase_188)"
"((namespace89_197) ns_189)"
"((just-once?90_198) just-once?_182))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_195)"
"(root-expand-context-post-expansion-scope"
" the-struct_195)"
"(root-expand-context-top-level-bind-scope"
" the-struct_195)"
"(root-expand-context-all-scopes-stx the-struct_195)"
"(root-expand-context-use-site-scopes the-struct_195)"
"(root-expand-context-defined-syms the-struct_195)"
"(root-expand-context-frame-id the-struct_195)"
"(root-expand-context-counter the-struct_195)"
"(root-expand-context-lift-key the-struct_195)"
"(expand-context-context the-struct_195)"
" phase88_196"
" namespace89_197"
"(expand-context-env the-struct_195)"
"(expand-context-post-expansion-scope-action"
" the-struct_195)"
"(expand-context-scopes the-struct_195)"
"(expand-context-def-ctx-scopes the-struct_195)"
"(expand-context-reference-records the-struct_195)"
"(expand-context-only-immediate? the-struct_195)"
" just-once?90_198"
"(expand-context-module-begin-k the-struct_195)"
"(expand-context-need-eventually-defined the-struct_195)"
"(expand-context-allow-unbound? the-struct_195)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_195)"
"(expand-context-stops the-struct_195)"
"(expand-context-current-introduction-scopes"
" the-struct_195)"
"(expand-context-declared-submodule-names"
" the-struct_195)"
"(expand-context-lifts the-struct_195)"
"(expand-context-lift-envs the-struct_195)"
"(expand-context-module-lifts the-struct_195)"
"(expand-context-require-lifts the-struct_195)"
"(expand-context-to-module-lifts the-struct_195)"
"(expand-context-requires+provides the-struct_195)"
"(expand-context-name the-struct_195)"
"(expand-context-observer the-struct_195)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_195)))))"
"(let-values(((require-lifts_191 lifts_192 exp-s_193)"
"(expand-capturing-lifts"
" s_187"
"(let-values(((the-struct_199) tl-ctx_190))"
"(if(expand-context? the-struct_199)"
"(let-values(((only-immediate?91_200) '#t)"
"((phase92_201) phase_188)"
"((namespace93_202) ns_189))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_199)"
"(root-expand-context-post-expansion-scope"
" the-struct_199)"
"(root-expand-context-top-level-bind-scope"
" the-struct_199)"
"(root-expand-context-all-scopes-stx the-struct_199)"
"(root-expand-context-use-site-scopes the-struct_199)"
"(root-expand-context-defined-syms the-struct_199)"
"(root-expand-context-frame-id the-struct_199)"
"(root-expand-context-counter the-struct_199)"
"(root-expand-context-lift-key the-struct_199)"
"(expand-context-context the-struct_199)"
" phase92_201"
" namespace93_202"
"(expand-context-env the-struct_199)"
"(expand-context-post-expansion-scope-action"
" the-struct_199)"
"(expand-context-scopes the-struct_199)"
"(expand-context-def-ctx-scopes the-struct_199)"
"(expand-context-reference-records the-struct_199)"
" only-immediate?91_200"
"(expand-context-just-once? the-struct_199)"
"(expand-context-module-begin-k the-struct_199)"
"(expand-context-need-eventually-defined"
" the-struct_199)"
"(expand-context-allow-unbound? the-struct_199)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_199)"
"(expand-context-stops the-struct_199)"
"(expand-context-current-introduction-scopes"
" the-struct_199)"
"(expand-context-declared-submodule-names"
" the-struct_199)"
"(expand-context-lifts the-struct_199)"
"(expand-context-lift-envs the-struct_199)"
"(expand-context-module-lifts the-struct_199)"
"(expand-context-require-lifts the-struct_199)"
"(expand-context-to-module-lifts the-struct_199)"
"(expand-context-requires+provides the-struct_199)"
"(expand-context-name the-struct_199)"
"(expand-context-observer the-struct_199)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_199))))))"
"(let-values(((disarmed-exp-s_194)(syntax-disarm$1 exp-s_193)))"
"(if(let-values(((or-part_203)(pair? require-lifts_191)))"
"(if or-part_203 or-part_203(pair? lifts_192)))"
"(let-values()"
"(let-values(((new-s_204)"
"(let-values(((temp94_205)"
"(append require-lifts_191 lifts_192))"
"((exp-s95_206) exp-s_193)"
"((s96_207) s_187)"
"((phase97_208) phase_188))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" '#f"
" '#f"
" temp94_205"
" exp-s95_206"
" s96_207"
" phase97_208)"
"(wrap-lifts-as-begin17.1"
" temp94_205"
" exp-s95_206"
" s96_207"
" phase97_208)))))"
"(if just-once?_182"
" new-s_204"
"(loop_186 new-s_204 phase_188 ns_189))))"
"(if(not single_179)"
"(let-values() exp-s_193)"
"(if(if just-once?_182(not(eq? exp-s_193 s_187)) '#f)"
"(let-values() exp-s_193)"
"(let-values()"
"(let-values(((tmp_209)"
"(core-form-sym disarmed-exp-s_194 phase_188)))"
"(if(equal? tmp_209 'begin)"
"(let-values()"
"(let-values(((m_210)"
"(match-syntax"
" disarmed-exp-s_194"
" '(begin e ...))))"
"(letrec-values(((begin-loop_211)"
"(lambda(es_212)"
"(if(null? es_212)"
"(let-values()"
"(if combine_180 null(void)))"
"(if(if(not combine_180)"
"(null?(cdr es_212))"
" '#f)"
"(let-values()"
"(loop_186"
"(car es_212)"
" phase_188"
" ns_189))"
"(let-values()"
"(let-values(((a_213)"
"(loop_186"
"(car es_212)"
" phase_188"
" ns_189)))"
"(if combine_180"
"(combine_180"
" a_213"
"(begin-loop_211"
"(cdr es_212)))"
"(begin-loop_211"
"(cdr es_212))))))))))"
"(if wrap_181"
"(wrap_181"
"(m_210 'begin)"
" exp-s_193"
"(begin-loop_211(m_210 'e)))"
"(begin-loop_211(m_210 'e))))))"
"(if(equal? tmp_209 'begin-for-syntax)"
"(let-values()"
"(let-values(((m_214)"
"(match-syntax"
" disarmed-exp-s_194"
" '(begin-for-syntax e ...))))"
"(let-values(((next-phase_215)(add1 phase_188)))"
"(let-values(((next-ns_216)"
"(namespace->namespace-at-phase"
" ns_189"
" next-phase_215)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_216)"
"(values))))"
"(let-values(((l_217)"
"(alt-reverse"
"(let-values(((lst_218)"
"(m_214 'e)))"
"(begin"
"(if(list? lst_218)"
"(void)"
"(let-values()"
"(in-list lst_218)))"
"((letrec-values(((for-loop_219)"
"(lambda(fold-var_220"
" lst_221)"
"(if(pair?"
" lst_221)"
"(let-values(((s_222)"
"(unsafe-car"
" lst_221)))"
"(if '#t"
"(let-values(((fold-var_223)"
"(let-values(((fold-var_224)"
" fold-var_220))"
"(let-values(((fold-var_225)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_186"
" s_222"
" next-phase_215"
" next-ns_216))"
" fold-var_224))))"
"(values"
" fold-var_225)))))"
"(if '#t"
"(for-loop_219"
" fold-var_223"
"(unsafe-cdr"
" lst_221))"
" fold-var_223))"
" fold-var_220))"
" fold-var_220))))"
" for-loop_219)"
" null"
" lst_218))))))"
"(if wrap_181"
"(let-values()"
"(wrap_181"
"(m_214 'begin-for-syntax)"
" exp-s_193"
" l_217))"
"(if combine_180"
"(let-values() l_217)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_179 exp-s_193 ns_189)))))))))))))))"
" loop_186)"
" s_183"
" phase_185"
" ns_178)))))))))))))"
"(define-values"
"(unpack45.1$1)"
"(lambda(given-kws_226 given-args_227 given-s42_228 ns43_229)"
"(let-values(((combine39_230)(if(pair? given-kws_226)(eq? '#:combine(car given-kws_226)) '#f)))"
"(let-values(((combine35_231)(if combine39_230(car given-args_227)(void)))"
"((given-kws_232)(if combine39_230(cdr given-kws_226) given-kws_226))"
"((given-args_233)(if combine39_230(cdr given-args_227) given-args_227)))"
"(let-values(((just-once?41_234)(if(pair? given-kws_232)(eq? '#:just-once?(car given-kws_232)) '#f)))"
"(let-values(((just-once?37_235)(if just-once?41_234(car given-args_233)(void)))"
"((given-kws_236)(if just-once?41_234(cdr given-kws_232) given-kws_232))"
"((given-args_237)(if just-once?41_234(cdr given-args_233) given-args_233)))"
"(let-values(((single34_238)(car given-args_237))"
"((given-kws_239)(cdr given-kws_236))"
"((given-args_240)(cdr given-args_237)))"
"(let-values(((wrap40_241)(pair? given-kws_239)))"
"(let-values(((wrap36_242)(if wrap40_241(car given-args_240)(void))))"
"(per-top-level44.1"
" combine35_231"
" combine39_230"
" just-once?37_235"
" just-once?41_234"
" single34_238"
" wrap36_242"
" wrap40_241"
" given-s42_228"
" ns43_229))))))))))"
"(define-values"
"(per-top-level46.1)"
"(lifted/1.1$12"
"(lambda(given-kws_243 given-argc_244)"
"(if(= given-argc_244 '4)(subsets? '(#:single) given-kws_243 '(#:combine #:just-once? #:single #:wrap)) '#f))"
"(case-lambda"
"((given-kws_245 given-args_246 given-s_247 ns_248)(unpack45.1$1 given-kws_245 given-args_246 given-s_247 ns_248)))"
" '(#:single)"
" '(#:combine #:just-once? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_249 ns_250)"
"(if(syntax?$1 s_249) s_249(1/namespace-syntax-introduce(1/datum->syntax '#f s_249) ns_250))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_251 s_252 r_253)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_252)(cons form-id_251 r_253) s_252 s_252) s_252)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_254 ctx_255)"
"(let-values(((ns_256)(expand-context-namespace ctx_255)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_256)(values))))"
"(let-values(((lift-ctx_257)"
"(let-values(((temp98_260)(make-top-level-lift ctx_255)))"
"(if(variable-reference-constant?(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 '#f '#f temp98_260)"
"(make-lift-context8.1 temp98_260)))))"
"(let-values(((require-lift-ctx_258)"
"(make-require-lift-context(namespace-phase ns_256)(make-parse-top-lifted-require ns_256))))"
"(let-values(((exp-s_259)"
"(let-values(((s99_261) s_254)"
"((temp100_262)"
"(let-values(((the-struct_263) ctx_255))"
"(if(expand-context? the-struct_263)"
"(let-values(((lifts101_264) lift-ctx_257)"
"((module-lifts102_265) lift-ctx_257)"
"((require-lifts103_266) require-lift-ctx_258))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_263)"
"(root-expand-context-post-expansion-scope the-struct_263)"
"(root-expand-context-top-level-bind-scope the-struct_263)"
"(root-expand-context-all-scopes-stx the-struct_263)"
"(root-expand-context-use-site-scopes the-struct_263)"
"(root-expand-context-defined-syms the-struct_263)"
"(root-expand-context-frame-id the-struct_263)"
"(root-expand-context-counter the-struct_263)"
"(root-expand-context-lift-key the-struct_263)"
"(expand-context-context the-struct_263)"
"(expand-context-phase the-struct_263)"
"(expand-context-namespace the-struct_263)"
"(expand-context-env the-struct_263)"
"(expand-context-post-expansion-scope-action the-struct_263)"
"(expand-context-scopes the-struct_263)"
"(expand-context-def-ctx-scopes the-struct_263)"
"(expand-context-reference-records the-struct_263)"
"(expand-context-only-immediate? the-struct_263)"
"(expand-context-just-once? the-struct_263)"
"(expand-context-module-begin-k the-struct_263)"
"(expand-context-need-eventually-defined the-struct_263)"
"(expand-context-allow-unbound? the-struct_263)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_263)"
"(expand-context-stops the-struct_263)"
"(expand-context-current-introduction-scopes the-struct_263)"
"(expand-context-declared-submodule-names the-struct_263)"
" lifts101_264"
"(expand-context-lift-envs the-struct_263)"
" module-lifts102_265"
" require-lifts103_266"
"(expand-context-to-module-lifts the-struct_263)"
"(expand-context-requires+provides the-struct_263)"
"(expand-context-name the-struct_263)"
"(expand-context-observer the-struct_263)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_263)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f s99_261 temp100_262)"
"(expand7.1 s99_261 temp100_262)))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_258)"
"(get-and-clear-lifts! lift-ctx_257)"
" exp-s_259))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_267)"
"(lambda(s_268 phase_269)"
"(let-values(((m_270)(match-syntax(syntax-disarm$1 s_268) '(#%require req))))"
"(let-values(((...pander/eval/main.rkt:240:4_271) parse-and-perform-requires!22.1)"
"((temp104_272)(list(m_270 'req)))"
"((s105_273) s_268)"
"((ns106_274) ns_267)"
"((phase107_275) phase_269)"
"((phase108_276) phase_269)"
"((temp109_277)(make-requires+provides '#f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" '#f"
" '#f"
" phase108_276"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp104_272"
" s105_273"
" ns106_274"
" phase107_275"
" temp109_277)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:240:4_271"
" keyword-procedure-extract"
" '(#:run-phase)"
" '7)"
" '(#:run-phase)"
"(list phase108_276)"
" temp104_272"
" s105_273"
" ns106_274"
" phase107_275"
" temp109_277)))))))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require5_1)"
"(lambda(mod-path3_2 sym4_3 fail-k1_4 fail-k2_5)"
"(let-values(((mod-path_6) mod-path3_2))"
"(let-values(((sym_7) sym4_3))"
"(let-values(((fail-k_8)(if fail-k2_5 fail-k1_4 default-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_13)(1/module-path? mod-path_6)))"
"(if or-part_13"
" or-part_13"
"(let-values(((or-part_14)(1/module-path-index? mod-path_6)))"
"(if or-part_14 or-part_14(1/resolved-module-path? mod-path_6)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'dynamic-require"
" '\"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_6)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(symbol? sym_7)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(not sym_7)))"
"(if or-part_16"
" or-part_16"
"(let-values(((or-part_17)(equal? sym_7 '0)))"
"(if or-part_17 or-part_17(void? sym_7)))))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'dynamic-require"
" '\"(or/c symbol? #f 0 void?)\""
" sym_7)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_8)(procedure-arity-includes? fail-k_8 '0) '#f)"
"(void)"
"(let-values()"
" (raise-argument-error 'dynamic-require '\"(-> any)\" fail-k_8)))"
"(values))))"
"(let-values(((ns_9)(1/current-namespace)))"
"(let-values(((mpi_10)"
"(if(1/module-path? mod-path_6)"
"(let-values()(1/module-path-index-join mod-path_6 '#f))"
"(if(1/module-path-index? mod-path_6)"
"(let-values() mod-path_6)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_6)"
" '#f))))))"
"(let-values(((mod-name_11)(1/module-path-index-resolve mpi_10 '#t)))"
"(let-values(((phase_12)(namespace-phase ns_9)))"
"(if(not sym_7)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:42:4_18)"
" namespace-module-instantiate!89.1)"
"((ns7_19) ns_9)"
"((mpi8_20) mpi_10)"
"((phase9_21) phase_12)"
"((phase10_22) phase_12)"
"((temp11_23) '#f))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" temp11_23"
" '#t"
" phase10_22"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" ns7_19"
" mpi8_20"
" phase9_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:42:4_18"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase)"
" '5)"
" '(#:otherwise-available? #:run-phase)"
"(list temp11_23 phase10_22)"
" ns7_19"
" mpi8_20"
" phase9_21))))"
"(if(equal? sym_7 '0)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:46:4_24)"
" namespace-module-instantiate!89.1)"
"((ns12_25) ns_9)"
"((mpi13_26) mpi_10)"
"((phase14_27) phase_12)"
"((phase15_28) phase_12))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" '#f"
" '#f"
" phase15_28"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" ns12_25"
" mpi13_26"
" phase14_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:46:4_24"
" keyword-procedure-extract"
" '(#:run-phase)"
" '5)"
" '(#:run-phase)"
"(list phase15_28)"
" ns12_25"
" mpi13_26"
" phase14_27))))"
"(if(void? sym_7)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:49:4_29)"
" namespace-module-visit!97.1)"
"((ns16_30) ns_9)"
"((mpi17_31) mpi_10)"
"((phase18_32) phase_12)"
"((phase19_33) phase_12))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!97.1))"
"(namespace-module-visit!95.1"
" phase19_33"
" '#t"
" ns16_30"
" mpi17_31"
" phase18_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:49:4_29"
" keyword-procedure-extract"
" '(#:visit-phase)"
" '5)"
" '(#:visit-phase)"
"(list phase19_33)"
" ns16_30"
" mpi17_31"
" phase18_32))))"
"(let-values()"
"(let-values(((m_34)(namespace->module ns_9 mod-name_11)))"
"(let-values(((binding/maybe-protected_35)"
"(hash-ref"
"(hash-ref(module-provides m_34) '0 '#hasheq())"
" sym_7"
" '#f)))"
"(if(not binding/maybe-protected_35)"
"(let-values()"
"(if(eq? fail-k_8 default-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
" '\"name is not provided\""
" '\"name\""
" sym_7"
" '\"module\""
" mod-name_11)"
"(fail-k_8)))"
"(let-values()"
"(let-values(((binding_36)"
"(if(protected? binding/maybe-protected_35)"
"(protected-binding binding/maybe-protected_35)"
" binding/maybe-protected_35)))"
"(let-values(((ex-sym_37)(module-binding-sym binding_36)))"
"(let-values(((ex-phase_38)"
"(module-binding-phase binding_36)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:72:6_40)"
" namespace-module-instantiate!89.1)"
"((ns20_41) ns_9)"
"((mpi21_42) mpi_10)"
"((phase22_43) phase_12)"
"((phase23_44) phase_12))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!89.1))"
"(namespace-module-instantiate!87.1"
" '#f"
" '#f"
" phase23_44"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" ns20_41"
" mpi21_42"
" phase22_43)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:72:6_40"
" keyword-procedure-extract"
" '(#:run-phase)"
" '5)"
" '(#:run-phase)"
"(list phase23_44)"
" ns20_41"
" mpi21_42"
" phase22_43)))"
"(values))))"
"(let-values(((m-ns_39)"
"(let-values(((.../dynamic-require.rkt:73:19_45)"
" namespace->module-namespace75.1)"
"((ns24_46) ns_9)"
"((temp25_47)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module"
" binding_36)"
"(module-self m_34)"
" mpi_10)))"
"((temp26_48)"
"(phase-"
" phase_12"
" ex-phase_38))"
"((temp27_49) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" temp27_49"
" '#t"
" '#f"
" '#f"
" ns24_46"
" temp25_47"
" temp26_48)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:73:19_45"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" '5)"
" '(#:complain-on-failure?)"
"(list temp27_49)"
" ns24_46"
" temp25_47"
" temp26_48)))))"
"(begin"
"(if(if(protected? binding/maybe-protected_35)"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector m-ns_39)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_36)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_36)"
"(namespace-inspector m-ns_39))"
" '#f))"
" '#f)"
" '#f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
" '\"name is protected\""
" '\"name\""
" sym_7"
" '\"module\""
" mod-name_11))"
"(void))"
"(namespace-get-variable"
" m-ns_39"
" ex-phase_38"
" ex-sym_37"
"(lambda()"
"(let-values(((missing_50)(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:96:32_52)"
" namespace-module-visit!97.1)"
"((ns28_53) ns_9)"
"((mpi29_54)"
" mpi_10)"
"((phase30_55)"
" phase_12)"
"((phase31_56)"
" phase_12))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!97.1))"
"(namespace-module-visit!95.1"
" phase31_56"
" '#t"
" ns28_53"
" mpi29_54"
" phase30_55)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:96:32_52"
" keyword-procedure-extract"
" '(#:visit-phase)"
" '5)"
" '(#:visit-phase)"
"(list phase31_56)"
" ns28_53"
" mpi29_54"
" phase30_55)))"
"(values))))"
"(let-values(((t_51)"
"(namespace-get-transformer"
" m-ns_39"
" ex-phase_38"
" ex-sym_37"
" missing_50)))"
"(if(eq? t_51 missing_50)"
"(let-values()"
"(if(eq? fail-k_8 default-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
" '\"name is not provided\""
" '\"name\""
" sym_7"
" '\"module\""
" mod-name_11)"
"(fail-k_8)))"
"(let-values()"
"(let-values(((tmp-ns_57)"
"(let-values(((ns32_59)"
" ns_9))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" new-namespace11.1))"
"(new-namespace9.1"
" '#f"
" '#f"
" '#f"
" '#f"
" ns32_59"
" '#t)"
"(new-namespace11.1"
" ns32_59)))))"
"(let-values(((mod-path_58)"
"(resolved-module-path->module-path"
" mod-name_11)))"
"(begin"
"(1/namespace-require"
" mod-path_58"
" tmp-ns_57)"
"(eval$1"
" sym_7"
" tmp-ns_57)))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((mod-path_60 sym_61)(dynamic-require5_1 mod-path_60 sym_61 '#f '#f))"
"((mod-path_62 sym_63 fail-k1_64)(dynamic-require5_1 mod-path_62 sym_63 fail-k1_64 '#t)))))"
"(define-values(dynamic-require-reader)(lambda(mod-path_65 sym_66)(1/dynamic-require mod-path_65 sym_66)))"
" (define-values (default-fail-thunk) (lambda () (error '\"failed\")))"
"(define-values"
"(1/eval)"
"(case-lambda"
"((s_1)((current-eval)(intro s_1)))"
"((s_2 ns_3)"
"(begin"
" (if (1/namespace? ns_3) (void) (let-values () (raise-argument-error 'eval '\"namespace?\" ns_3)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first '#f parameterization-key) 1/current-namespace ns_3)"
"(let-values()((current-eval)(intro s_2 ns_3))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_4)"
"(begin"
" (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'eval-syntax '\"syntax?\" s_4)))"
"((current-eval) s_4)))"
"((s_5 ns_6)"
"(begin"
" (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'eval-syntax '\"syntax?\" s_5)))"
" (if (1/namespace? ns_6) (void) (let-values () (raise-argument-error 'eval-syntax '\"namespace?\" ns_6)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first '#f parameterization-key) 1/current-namespace ns_6)"
"(let-values()((current-eval) s_5)))))))"
"(define-values(compile$2)(lambda(s_7)((current-compile)(intro s_7) '#f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_8)"
"(begin"
" (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'compile-syntax '\"syntax?\" s_8)))"
"((current-compile) s_8 '#f))))"
"(define-values(1/expand)(lambda(s_9)(expand$1(intro s_9)(1/current-namespace) '#t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_10)"
"(begin"
" (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'expand-syntax '\"syntax?\" s_10)))"
"(expand$1 s_10(1/current-namespace) '#t))))"
"(define-values(1/expand-once)(lambda(s_11)(expand-once$1(intro s_11))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_12)"
"(begin"
" (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'expand-syntax-once '\"syntax?\" s_12)))"
"(expand-once$1 s_12))))"
"(define-values(1/expand-to-top-form)(lambda(s_13)(expand-to-top-form$1(intro s_13))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_14)"
"(begin"
" (if (syntax?$1 s_14) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form '\"syntax?\" s_14)))"
"(expand-to-top-form$1 s_14))))"
"(define-values"
"(intro)"
"(let-values(((intro4_15)"
"(lambda(given-s3_16 ns1_17 ns2_18)"
"(let-values(((given-s_19) given-s3_16))"
"(let-values(((ns_20)(if ns2_18 ns1_17(1/current-namespace))))"
"(let-values()"
"(let-values(((s_21)(if(syntax?$1 given-s_19) given-s_19(1/datum->syntax '#f given-s_19))))"
"(1/namespace-syntax-introduce s_21 ns_20))))))))"
"(case-lambda"
"((given-s_22)(intro4_15 given-s_22 '#f '#f))"
"((given-s_23 ns1_24)(intro4_15 given-s_23 ns1_24 '#t)))))"
"(define-values(lifted/1.1$13)(void))"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_2)"
"(lambda(mod3_3 load?1_4 load?2_5)"
"(let-values(((mod_6) mod3_3))"
"(let-values(((load?_7)(if load?2_5 load?1_4 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_6)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_6)))"
"(values))))"
"(let-values(((ns_8)(1/current-namespace)))"
"(let-values(((name_9)"
"(let-values(((...space/api-module.rkt:21:15_10)"
" reference->resolved-module-path27.1)"
"((mod28_11) mod_6)"
"((load?29_12) load?_7))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path27.1))"
"(reference->resolved-module-path25.1 load?29_12 mod28_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:21:15_10"
" keyword-procedure-extract"
" '(#:load?)"
" '3)"
" '(#:load?)"
"(list load?29_12)"
" mod28_11)))))"
"(if(namespace->module ns_8 name_9) '#t '#f))))))))))"
"(case-lambda"
"((mod_13)(module-declared?4_2 mod_13 '#f '#f))"
"((mod_14 load?1_15)(module-declared?4_2 mod_14 load?1_15 '#t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info9_16)"
"(lambda(mod8_17 load?6_18 load?7_19)"
"(let-values(((mod_20) mod8_17))"
"(let-values(((load?_21)(if load?7_19 load?6_18 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_20)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->language-info module-reference-str mod_20)))"
"(values))))"
"(let-values(((m_22)"
"(namespace->module/complain"
" 'module->lanuage-info"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:29:40_23)"
" reference->resolved-module-path27.1)"
"((mod30_24) mod_20)"
"((load?31_25) load?_21))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path27.1))"
"(reference->resolved-module-path25.1 load?31_25 mod30_24)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:29:40_23"
" keyword-procedure-extract"
" '(#:load?)"
" '3)"
" '(#:load?)"
"(list load?31_25)"
" mod30_24))))))"
"(module-language-info m_22)))))))))"
"(case-lambda"
"((mod_26)(module->language-info9_16 mod_26 '#f '#f))"
"((mod_27 load?6_28)(module->language-info9_16 mod_27 load?6_28 '#t)))))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace14_29)"
"(lambda(mod13_30 ns11_31 ns12_32)"
"(let-values(((mod_33) mod13_30))"
"(let-values(((ns_34)(if ns12_32 ns11_31(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_33)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_33)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_34)"
"(void)"
"(let-values()"
" (raise-argument-error 'module->namespace '\"namespace?\" ns_34)))"
"(values))))"
"(let-values(((name_35)"
"(let-values(((...space/api-module.rkt:36:15_38)"
" reference->resolved-module-path27.1)"
"((mod35_39) mod_33)"
"((temp36_40) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path27.1))"
"(reference->resolved-module-path25.1 temp36_40 mod35_39)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:36:15_38"
" keyword-procedure-extract"
" '(#:load?)"
" '3)"
" '(#:load?)"
"(list temp36_40)"
" mod35_39)))))"
"(let-values(((phase_36)(namespace-phase ns_34)))"
"(let-values(((m-ns_37)"
"(let-values(((ns37_41) ns_34)"
"((name38_42) name_35)"
"((phase39_43) phase_36))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" ns37_41"
" name38_42"
" phase39_43)"
"(namespace->module-namespace75.1 ns37_41 name38_42 phase39_43)))))"
"(begin"
"(if m-ns_37"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_34 name_35)"
"(raise-arguments-error"
" 'module->namespace"
" '\"module not instantiated in the current namespace\""
" '\"name\""
" name_35))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_37))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
" '\"current code inspector cannot access namespace of module\""
" '\"module name\""
" name_35)))"
"(if(namespace-get-root-expand-ctx m-ns_37)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_37"
"(let-values()"
"(if(variable-reference-constant?"
"(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 '#f '#f '#f '#f '#f '#f '#f '#f)"
"(make-root-expand-context12.1))))))"
"(let-values(((ns32_44) ns_34)"
"((temp33_45)(namespace-mpi m-ns_37))"
"((phase34_46) phase_36))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-make-available!105.1))"
"(namespace-module-make-available!103.1 '#f '#f ns32_44 temp33_45 phase34_46)"
"(namespace-module-make-available!105.1 ns32_44 temp33_45 phase34_46)))"
" m-ns_37))))))))))))"
"(case-lambda"
"((mod_47)(module->namespace14_29 mod_47 '#f '#f))"
"((mod_48 ns11_49)(module->namespace14_29 mod_48 ns11_49 '#t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module20_50)"
"(lambda(insp18_51 mod19_52 ns16_53 ns17_54)"
"(let-values(((insp_55) insp18_51))"
"(let-values(((mod_56) mod19_52))"
"(let-values(((ns_57)(if ns17_54 ns16_53(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_55)"
"(void)"
"(let-values()"
" (raise-argument-error 'namespace-unprotect-module '\"inspector?\" insp_55)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_56)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
" '\"module-path?\""
" mod_56)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_57)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
" '\"namespace?\""
" ns_57)))"
"(values))))"
"(let-values(((name_58)"
"(let-values(((...space/api-module.rkt:61:15_61)"
" reference->resolved-module-path27.1)"
"((mod40_62) mod_56)"
"((temp41_63) '#f))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path27.1))"
"(reference->resolved-module-path25.1 temp41_63 mod40_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:61:15_61"
" keyword-procedure-extract"
" '(#:load?)"
" '3)"
" '(#:load?)"
"(list temp41_63)"
" mod40_62)))))"
"(let-values(((phase_59)(namespace-phase ns_57)))"
"(let-values(((m-ns_60)"
"(let-values(((ns42_64) ns_57)"
"((name43_65) name_58)"
"((phase44_66) phase_59))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace75.1))"
"(namespace->module-namespace73.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" ns42_64"
" name43_65"
" phase44_66)"
"(namespace->module-namespace75.1 ns42_64 name43_65 phase44_66)))))"
"(begin"
"(if m-ns_60"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
" '\"module not instantiated\""
" '\"module name\""
" name_58)))"
"(if(inspector-superior? insp_55(namespace-inspector m-ns_60))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_60"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_67 mod_68)(namespace-unprotect-module20_50 insp_67 mod_68 '#f '#f))"
"((insp_69 mod_70 ns16_71)(namespace-unprotect-module20_50 insp_69 mod_70 ns16_71 '#t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_72 ns_73 name_74)"
"(let-values(((or-part_75)(namespace->module ns_73 name_74)))"
"(if or-part_75"
" or-part_75"
" (raise-arguments-error who_72 '\"unknown module in the current namespace\" '\"name\" name_74)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_76)"
"(let-values(((or-part_77)(1/module-path? mod_76)))"
"(if or-part_77"
" or-part_77"
"(let-values(((or-part_78)(1/module-path-index? mod_76)))"
"(if or-part_78 or-part_78(1/resolved-module-path? mod_76)))))))"
" (define-values (module-reference-str) '\"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$15)"
"(make-required"
" 'reference->resolved-module-path"
"(case-lambda((self_79 mod_80)(apply missing-kw self_79 mod_80 null)))"
" '#f"
" '#f))"
"(define-values"
"(reference->resolved-module-path25.1)"
"(lambda(load?22_81 mod24_82)"
"(let-values(((mod_83) mod24_82))"
"(let-values(((load?_84) load?22_81))"
"(let-values()"
"(if(1/resolved-module-path? mod_83)"
"(let-values() mod_83)"
"(let-values()"
"(let-values(((mpi_85)(if(1/module-path-index? mod_83) mod_83(1/module-path-index-join mod_83 '#f))))"
"(1/module-path-index-resolve mpi_85 load?_84)))))))))"
"(define-values"
"(unpack26.1)"
"(lambda(given-kws_86 given-args_87 mod24_88)"
"(let-values(((load?22_89)(car given-args_87)))(reference->resolved-module-path25.1 load?22_89 mod24_88))))"
"(define-values"
"(reference->resolved-module-path27.1)"
"(lifted/1.1$15"
"(lambda(given-kws_90 given-argc_91)"
"(if(= given-argc_91 '3)"
"(let-values(((l2_92) given-kws_90))"
"(if(pair? l2_92)(if(eq?(car l2_92) '#:load?)(null?(cdr l2_92)) '#f) '#f))"
" '#f))"
"(case-lambda((given-kws_93 given-args_94 mod_95)(unpack26.1 given-kws_93 given-args_94 mod_95)))"
" '(#:load?)"
" '(#:load?)))"
"(define-values(lifted/1.1$1)(void))"
"(define-values(lifted/2.1$6)(void))"
"(define-values"
"(prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 '1) '#f)"
"(void)"
" (let-values () (raise-argument-error 'guard-for-prop:missing-module '\"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" '1"
" '0"
" '#f"
"(list(cons prop:missing-module(lambda(e_26)(1/exn:fail:filesystem:missing-module-path e_26))))"
" '#f"
" '#f"
" '(0)"
" '#f"
" 'exn:fail:filesystem:missing-module)))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 '0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_27 make-_28 ?_29 -ref_30 -set!_31)"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" '1"
" '0"
" '#f"
"(list(cons prop:missing-module(lambda(e_48)(1/exn:fail:syntax:missing-module-path e_48))))"
" '#f"
" '#f"
" '(0)"
" '#f"
" 'exn:fail:syntax:missing-module)))"
"(values struct:_27 make-_28 ?_29(make-struct-field-accessor -ref_30 '0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" '#f"
"(lambda(v_49)"
"(begin"
"(if(let-values(((or-part_50)(not v_49)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(1/module-path? v_49)))"
"(if or-part_51 or-part_51(if(syntax?$1 v_49)(1/module-path?(syntax->datum$1 v_49)) '#f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
" '\"(or/c module-path?\""
" '\" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
" '\" #f)\")"
" v_49)))"
" v_49))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_52 filename_53 pre_54 rel_55 post_56 errstr_57)"
"(let-values(((path_58)(1/current-module-path-for-load)))"
"(if path_58"
"(let-values()"
"(begin"
"(if(syntax?$1 path_58)"
"(let-values()"
"(raise"
"(make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
" '\"~a: cannot open module file\\n\""
" '\" module path: ~a\\n\""
" '\" path: ~a\\n\""
" '\" system error: ~a\")"
"(if(syntax-srcloc path_58)(srcloc->string(syntax-srcloc path_58)) name_52)"
"(syntax->datum$1 path_58)"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
"(list path_58)"
"(syntax->datum$1 path_58))))"
"(void))"
"(raise"
"(make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
" '\"~a: cannot open module file\\n\""
" '\" module path: ~a\\n\""
" '\" path: ~a~a~a~a\\n\""
" '\" system error: ~a\")"
" name_52"
" path_58"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)))))"
"(void)))))"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values(((s_7) s3_2))"
"(let-values(((context_8) context4_3))"
"(let-values(((stop-ids_9) stop-ids5_4))"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 '#f)))"
"(let-values()"
"(let-values(((temp50_11) 'local-expand)"
"((s51_12) s_7)"
"((context52_13) context_8)"
"((stop-ids53_14) stop-ids_9)"
"((intdefs54_15) intdefs_10))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp50_11"
" s51_12"
" context52_13"
" stop-ids53_14"
" intdefs54_15"
" '#t)"
"(do-local-expand49.1 temp50_11 s51_12 context52_13 stop-ids53_14 intdefs54_15)))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 '#f '#f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 '#t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values(((s_31) s12_24))"
"(let-values(((context_32) context13_25))"
"(let-values(((stop-ids_33) stop-ids14_26))"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 '#f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:25:2_36) do-local-expand49.1)"
"((temp55_37) 'local-expand)"
"((s56_38) s_31)"
"((context57_39) context_32)"
"((stop-ids58_40) stop-ids_33)"
"((intdefs59_41) intdefs_34)"
"((temp60_42) '#t)"
"((lift-key61_43) lift-key_35))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" '#f"
" '#f"
" temp60_42"
" '#t"
" lift-key61_43"
" '#t"
" '#f"
" '#f"
" temp55_37"
" s56_38"
" context57_39"
" stop-ids58_40"
" intdefs59_41"
" '#t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:25:2_36"
" keyword-procedure-extract"
" '(#:capture-lifts? #:lift-key)"
" '7)"
" '(#:capture-lifts? #:lift-key)"
"(list temp60_42 lift-key61_43)"
" temp55_37"
" s56_38"
" context57_39"
" stop-ids58_40"
" intdefs59_41))))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 '#f '#f '#f '#f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 '#t '#t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 '#f '#t '#f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values(((s_62) s19_57))"
"(let-values(((context_63) context20_58))"
"(let-values(((stop-ids_64) stop-ids21_59))"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 '#f)))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:30:2_66) do-local-expand49.1)"
"((temp62_67) 'local-expand)"
"((s63_68) s_62)"
"((context64_69) context_63)"
"((stop-ids65_70) stop-ids_64)"
"((intdefs66_71) intdefs_65)"
"((temp67_72) '#t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" temp67_72"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp62_67"
" s63_68"
" context64_69"
" stop-ids65_70"
" intdefs66_71"
" '#t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:30:2_66"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" '7)"
" '(#:as-transformer?)"
"(list temp67_72)"
" temp62_67"
" s63_68"
" context64_69"
" stop-ids65_70"
" intdefs66_71)))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 '#f '#f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 '#t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values(((s_88) s28_81))"
"(let-values(((context_89) context29_82))"
"(let-values(((stop-ids_90) stop-ids30_83))"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 '#f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:34:2_93) do-local-expand49.1)"
"((temp68_94) 'local-expand)"
"((s69_95) s_88)"
"((context70_96) context_89)"
"((stop-ids71_97) stop-ids_90)"
"((intdefs72_98) intdefs_91)"
"((temp73_99) '#t)"
"((temp74_100) '#t)"
"((lift-key75_101) lift-key_92))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" temp73_99"
" '#t"
" temp74_100"
" '#t"
" lift-key75_101"
" '#t"
" '#f"
" '#f"
" temp68_94"
" s69_95"
" context70_96"
" stop-ids71_97"
" intdefs72_98"
" '#t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:34:2_93"
" keyword-procedure-extract"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
" '7)"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
"(list temp73_99 temp74_100 lift-key75_101)"
" temp68_94"
" s69_95"
" context70_96"
" stop-ids71_97"
" intdefs72_98))))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 '#f '#f '#f '#f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 '#t '#t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 '#f '#t '#f)))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_114)"
"(let-values(((exp-s_115)"
"(let-values(((...and/local-expand.rkt:40:16_117) do-local-expand49.1)"
"((temp76_118) 'local-expand)"
"((s77_119) s_114)"
"((temp78_120) 'expression)"
"((null79_121) null)"
"((temp80_122) '#f)"
"((temp81_123) '#t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp81_123"
" '#t"
" temp76_118"
" s77_119"
" temp78_120"
" null79_121"
" temp80_122"
" '#t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:40:16_117"
" keyword-procedure-extract"
" '(#:skip-log-exit?)"
" '7)"
" '(#:skip-log-exit?)"
"(list temp81_123)"
" temp76_118"
" s77_119"
" temp78_120"
" null79_121"
" temp80_122)))))"
"(let-values(((ae_116)"
"(already-expanded1.1"
" exp-s_115"
"(root-expand-context-all-scopes-stx"
"(let-values(((temp82_124) 'syntax-local-expand-expression))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f temp82_124 '#t)"
"(get-current-expand-context8.1 temp82_124)))))))"
"(begin"
"(let-values(((ctx_125)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f '#f '#f)"
"(get-current-expand-context8.1)))))"
"(begin"
"(let-values(((obs_126)(expand-context-observer ctx_125)))"
"(if obs_126"
"(let-values()(if '#t(let-values()(call-expand-observe obs_126 'opaque-expr ae_116))(void)))"
"(void)))"
"(let-values(((obs_127)(expand-context-observer ctx_125)))"
"(if obs_127"
"(let-values()(if '#t(let-values()(call-expand-observe obs_127 'exit-local exp-s_115))(void)))"
"(void)))))"
"(values exp-s_115 ae_116))))))"
"(define-values"
"(do-local-expand47.1)"
"(lambda(as-transformer?34_128"
" as-transformer?38_129"
" capture-lifts?33_130"
" capture-lifts?37_131"
" lift-key35_132"
" lift-key39_133"
" skip-log-exit?36_134"
" skip-log-exit?40_135"
" who43_136"
" s44_137"
" context45_138"
" stop-ids46_139"
" intdefs41_140"
" intdefs42_141)"
"(let-values(((who_142) who43_136))"
"(let-values(((s_143) s44_137))"
"(let-values(((context_144) context45_138))"
"(let-values(((stop-ids_145) stop-ids46_139))"
"(let-values(((intdefs_146)(if intdefs42_141 intdefs41_140 '#f)))"
"(let-values(((capture-lifts?_147)(if capture-lifts?37_131 capture-lifts?33_130 '#f)))"
"(let-values(((as-transformer?_148)(if as-transformer?38_129 as-transformer?34_128 '#f)))"
"(let-values(((lift-key_149)"
"(if lift-key39_133"
" lift-key35_132"
"(if(let-values(((or-part_150) capture-lifts?_147))"
"(if or-part_150 or-part_150 as-transformer?_148))"
"(generate-lift-key)"
" '#f))))"
"(let-values(((skip-log-exit?_151)(if skip-log-exit?40_135 skip-log-exit?36_134 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_143)"
"(void)"
" (let-values () (raise-argument-error who_142 '\"syntax?\" s_143)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_158)(list? context_144)))"
"(if or-part_158"
" or-part_158"
"(memq"
" context_144"
"(if as-transformer?_148"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
"(if as-transformer?_148"
" '\"(or/c 'expression 'top-level list?)\""
" '\"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_144)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_159)(not stop-ids_145)))"
"(if or-part_159"
" or-part_159"
"(if(list? stop-ids_145)(andmap2 identifier? stop-ids_145) '#f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
" '\"(or/c (listof identifier?) #f)\""
" stop-ids_145)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_160)(not intdefs_146)))"
"(if or-part_160"
" or-part_160"
"(let-values(((or-part_161)"
"(1/internal-definition-context? intdefs_146)))"
"(if or-part_161"
" or-part_161"
"(if(list? intdefs_146)"
"(andmap2 1/internal-definition-context? intdefs_146)"
" '#f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
" '\"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_146)))"
"(values))))"
"(let-values(((ctx_152)"
"(let-values(((who83_162) who_142))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 '#f '#f who83_162 '#t)"
"(get-current-expand-context8.1 who83_162)))))"
"(let-values(((phase_153)"
"(if as-transformer?_148"
"(add1(expand-context-phase ctx_152))"
"(expand-context-phase ctx_152))))"
"(let-values(((local-ctx_154)"
"(let-values(((...and/local-expand.rkt:86:20_163)"
" make-local-expand-context35.1)"
"((ctx84_164) ctx_152)"
"((context85_165) context_144)"
"((phase86_166) phase_153)"
"((intdefs87_167) intdefs_146)"
"((stop-ids88_168) stop-ids_145))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" context85_165"
" intdefs87_167"
" phase86_166"
" '#t"
" stop-ids88_168"
" '#t"
" ctx84_164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:86:20_163"
" keyword-procedure-extract"
" '(#:context #:intdefs #:phase #:stop-ids)"
" '3)"
" '(#:context #:intdefs #:phase #:stop-ids)"
"(list context85_165 intdefs87_167 phase86_166 stop-ids88_168)"
" ctx84_164)))))"
"(let-values(((input-s_155)"
"(let-values(((temp89_169)(flip-introduction-scopes s_143 ctx_152))"
"((intdefs90_170) intdefs_146))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 '#f '#f '#f '#f temp89_169 intdefs90_170)"
"(add-intdef-scopes23.1 temp89_169 intdefs90_170)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_171)"
"(expand-context-observer local-ctx_154)))"
"(if obs_171"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_171 'enter-local))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_148"
"(let-values()"
"(let-values(((obs_172)"
"(expand-context-observer local-ctx_154)))"
"(if obs_172"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_172 'phase-up))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_173)"
"(expand-context-observer local-ctx_154)))"
"(if obs_173"
"(let-values()"
"(if '#t"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_173"
" 'local-pre"
" input-s_155)"
"(call-expand-observe obs_173 'start-expand)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((output-s_156)"
"(if(if as-transformer?_148 capture-lifts?_147 '#f)"
"(let-values()"
"(let-values(((...and/local-expand.rkt:100:21_174)"
" expand-transformer93.1)"
"((input-s91_175) input-s_155)"
"((local-ctx92_176) local-ctx_154)"
"((context93_177) context_144)"
"((temp94_178) '#t)"
"((lift-key95_179) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1"
" temp94_178"
" '#t"
" context93_177"
" '#t"
" '#f"
" '#f"
" lift-key95_179"
" '#t"
" input-s91_175"
" local-ctx92_176)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:100:21_174"
" keyword-procedure-extract"
" '(#:begin-form? #:context #:lift-key)"
" '4)"
" '(#:begin-form? #:context #:lift-key)"
"(list temp94_178 context93_177 lift-key95_179)"
" input-s91_175"
" local-ctx92_176))))"
"(if as-transformer?_148"
"(let-values()"
"(let-values(((...and/local-expand.rkt:105:21_180)"
" expand-transformer93.1)"
"((input-s96_181) input-s_155)"
"((local-ctx97_182) local-ctx_154)"
"((context98_183) context_144)"
"((temp99_184) '#f)"
"((temp100_185)"
"(eq? 'top-level context_144))"
"((lift-key101_186) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1"
" temp100_185"
" '#t"
" context98_183"
" '#t"
" temp99_184"
" '#t"
" lift-key101_186"
" '#t"
" input-s96_181"
" local-ctx97_182)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:105:21_180"
" keyword-procedure-extract"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
" '4)"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
"(list"
" temp100_185"
" context98_183"
" temp99_184"
" lift-key101_186)"
" input-s96_181"
" local-ctx97_182))))"
"(if capture-lifts?_147"
"(let-values()"
"(let-values(((...and/local-expand.rkt:111:21_187)"
" expand/capture-lifts80.1)"
"((input-s102_188) input-s_155)"
"((local-ctx103_189) local-ctx_154)"
"((temp104_190) '#t)"
"((lift-key105_191) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand/capture-lifts80.1))"
"(expand/capture-lifts78.1"
" temp104_190"
" '#t"
" '#f"
" '#f"
" lift-key105_191"
" '#t"
" input-s102_188"
" local-ctx103_189)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:111:21_187"
" keyword-procedure-extract"
" '(#:begin-form? #:lift-key)"
" '4)"
" '(#:begin-form? #:lift-key)"
"(list temp104_190 lift-key105_191)"
" input-s102_188"
" local-ctx103_189))))"
"(let-values()"
"(let-values(((input-s106_192) input-s_155)"
"((local-ctx107_193) local-ctx_154))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" input-s106_192"
" local-ctx107_193)"
"(expand7.1"
" input-s106_192"
" local-ctx107_193)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_194)"
"(expand-context-observer local-ctx_154)))"
"(if obs_194"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_194"
" 'local-post"
" output-s_156))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_157)"
"(flip-introduction-scopes output-s_156 ctx_152)))"
"(begin"
"(if skip-log-exit?_151"
"(void)"
"(let-values()"
"(let-values(((obs_195)"
"(expand-context-observer local-ctx_154)))"
"(if obs_195"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_195"
" 'exit-local"
" result-s_157))"
"(void)))"
"(void)))))"
" result-s_157)))))))))))))))))))))))))))"
"(define-values"
"(unpack48.1)"
"(lambda(given-kws_196 given-args_197 who43_198 s44_199 context45_200 stop-ids46_201 intdefs41_202 intdefs42_203)"
"(let-values(((as-transformer?38_204)(if(pair? given-kws_196)(eq? '#:as-transformer?(car given-kws_196)) '#f)))"
"(let-values(((as-transformer?34_205)(if as-transformer?38_204(car given-args_197)(void)))"
"((given-kws_206)(if as-transformer?38_204(cdr given-kws_196) given-kws_196))"
"((given-args_207)(if as-transformer?38_204(cdr given-args_197) given-args_197)))"
"(let-values(((capture-lifts?37_208)"
"(if(pair? given-kws_206)(eq? '#:capture-lifts?(car given-kws_206)) '#f)))"
"(let-values(((capture-lifts?33_209)(if capture-lifts?37_208(car given-args_207)(void)))"
"((given-kws_210)(if capture-lifts?37_208(cdr given-kws_206) given-kws_206))"
"((given-args_211)(if capture-lifts?37_208(cdr given-args_207) given-args_207)))"
"(let-values(((lift-key39_212)(if(pair? given-kws_210)(eq? '#:lift-key(car given-kws_210)) '#f)))"
"(let-values(((lift-key35_213)(if lift-key39_212(car given-args_211)(void)))"
"((given-kws_214)(if lift-key39_212(cdr given-kws_210) given-kws_210))"
"((given-args_215)(if lift-key39_212(cdr given-args_211) given-args_211)))"
"(let-values(((skip-log-exit?40_216)(pair? given-kws_214)))"
"(let-values(((skip-log-exit?36_217)(if skip-log-exit?40_216(car given-args_215)(void))))"
"(do-local-expand47.1"
" as-transformer?34_205"
" as-transformer?38_204"
" capture-lifts?33_209"
" capture-lifts?37_208"
" lift-key35_213"
" lift-key39_212"
" skip-log-exit?36_217"
" skip-log-exit?40_216"
" who43_198"
" s44_199"
" context45_200"
" stop-ids46_201"
" intdefs41_202"
" intdefs42_203)))))))))))"
"(define-values"
"(do-local-expand49.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_218 given-argc_219)"
"(if(if(>= given-argc_219 '6)(<= given-argc_219 '7) '#f)"
"(let-values(((l1_220) given-kws_218))"
"(let-values(((l1_221)"
"(if(null? l1_220) l1_220(if(eq?(car l1_220) '#:as-transformer?)(cdr l1_220) l1_220))))"
"(let-values(((l1_222) l1_221))"
"(let-values(((l1_223)"
"(if(null? l1_222) l1_222(if(eq?(car l1_222) '#:capture-lifts?)(cdr l1_222) l1_222))))"
"(let-values(((l1_224) l1_223))"
"(let-values(((l1_225)"
"(if(null? l1_224) l1_224(if(eq?(car l1_224) '#:lift-key)(cdr l1_224) l1_224))))"
"(let-values(((l1_226) l1_225))"
"(let-values(((l1_227)"
"(if(null? l1_226)"
" l1_226"
"(if(eq?(car l1_226) '#:skip-log-exit?)(cdr l1_226) l1_226))))"
"(null? l1_227)))))))))"
" '#f))"
"(case-lambda"
"((given-kws_228 given-args_229 who_230 s_231 context_232 stop-ids_233)"
"(unpack48.1 given-kws_228 given-args_229 who_230 s_231 context_232 stop-ids_233 '#f '#f))"
"((given-kws_234 given-args_235 who_236 s_237 context_238 stop-ids_239 intdefs41_240)"
"(unpack48.1 given-kws_234 given-args_235 who_236 s_237 context_238 stop-ids_239 intdefs41_240 '#t)))"
" null"
" '(#:as-transformer? #:capture-lifts? #:lift-key #:skip-log-exit?)"
"(let-values(((do-local-expand_241)"
"(case-lambda"
"((who_242 s_243 context_244 stop-ids_245)"
"(unpack48.1 null null who_242 s_243 context_244 stop-ids_245 '#f '#f))"
"((who_246 s_247 context_248 stop-ids_249 intdefs41_250)"
"(unpack48.1 null null who_246 s_247 context_248 stop-ids_249 intdefs41_250 '#t)))))"
" do-local-expand_241)))"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
" (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? '\"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 '#f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
" (let-values () (raise-argument-error 'syntax-arm '\"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-arm"
" '\"(or/c inspector? #f)\""
" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 '#f '#f '#f '#f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 '#t '#t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 '#f '#t '#f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
" (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm '\"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
" (let-values () (raise-argument-error 'syntax-disarm '\"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values(((s_29) s10_25))"
"(let-values(((from-s_30) from-s11_26))"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 '#f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
" (let-values () (raise-argument-error 'syntax-disarm '\"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
" (let-values () (raise-argument-error 'syntax-disarm '\"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 '#f '#f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 '#t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
" (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint '\"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values(((or-part_40) maybe-insp_39))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
" (let-values () (raise-argument-error 'variable-reference->empty-namespace '\"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 '#f '#f '#f '#f temp1_2 '#t)"
"(new-namespace11.1 temp1_2))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
" (let-values () (raise-argument-error 'variable-reference->namespace '\"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
" (raise-argument-error 'variable-reference->module-path-index '\"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) '#f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
" (raise-argument-error 'variable-reference->resolved-module-path '\"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) '#f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
" (raise-argument-error 'variable-reference->module-source '\"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((r_9)(1/variable-reference->resolved-module-path vr_8)))"
"(if r_9(resolved-module-path-root-name r_9) '#f)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
" (let-values () (raise-argument-error 'variable-reference->phase '\"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
" (let-values () (raise-argument-error 'variable-reference->module-base-phase '\"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
" (let-values () (raise-argument-error 'variable-reference->base-phase '\"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
" '\"given variable reference is not from a module\"))))))"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e syntax-e$2)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source syntax-source$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column syntax-column$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position syntax-position$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys syntax-property-symbol-keys$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error 1/raise-syntax-error)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry namespace-module-registry$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(define-values"
"(lifted/1.1$21)"
"(make-required 'declare-kernel-module!(case-lambda((self_5 ns_6)(apply missing-kw self_5 ns_6 null))) '#f '#f))"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_7 main-ids2_8 ns5_9)"
"(let-values(((ns_10) ns5_9))"
"(let-values(((eval_11) eval1_7))"
"(let-values(((main-ids_12) main-ids2_8))"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_13) copy-runtime-module!24.1)"
"((temp49_14) '#%kernel)"
"((temp50_15) '#%runtime)"
"((temp51_16)(set-union primitive-ids main-ids_12))"
"((ns52_17) ns_10))"
"(if(variable-reference-constant?(#%variable-reference copy-runtime-module!24.1))"
"(copy-runtime-module!22.1 '#f '#f ns52_17 '#f '#f '#f '#f temp51_16 '#t temp50_15 '#t temp49_14)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:23:2_13"
" keyword-procedure-extract"
" '(#:namespace #:skip #:to)"
" '3)"
" '(#:namespace #:skip #:to)"
"(list ns52_17 temp51_16 temp50_15)"
" temp49_14)))"
"(let-values(((...nder/boot/kernel.rkt:28:2_18) declare-reexporting-module!48.1)"
"((temp53_19) '#%kernel)"
"((temp54_20) '(#%core #%runtime #%main))"
"((ns55_21) ns_10))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!48.1))"
"(declare-reexporting-module!46.1 ns55_21 '#f '#f temp53_19 temp54_20)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:28:2_18"
" keyword-procedure-extract"
" '(#:namespace)"
" '4)"
" '(#:namespace)"
"(list ns55_21)"
" temp53_19"
" temp54_20))))))))))"
"(define-values"
"(unpack7.1$1)"
"(lambda(given-kws_22 given-args_23 ns5_24)"
"(let-values(((eval1_25)(car given-args_23))"
"((given-kws_26)(cdr given-kws_22))"
"((given-args_27)(cdr given-args_23)))"
"(let-values(((main-ids2_28)(car given-args_27)))(declare-kernel-module!6.1 eval1_25 main-ids2_28 ns5_24)))))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lifted/1.1$21"
"(lambda(given-kws_29 given-argc_30)"
"(if(= given-argc_30 '3)"
"(let-values(((l2_31) given-kws_29))"
"(if(pair? l2_31)"
"(if(eq?(car l2_31) '#:eval)"
"(let-values(((l2_32)(cdr l2_31)))"
"(if(pair? l2_32)(if(eq?(car l2_32) '#:main-ids)(null?(cdr l2_32)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda((given-kws_33 given-args_34 ns_35)(unpack7.1$1 given-kws_33 given-args_34 ns_35)))"
" '(#:eval #:main-ids)"
" '(#:eval #:main-ids)))"
"(define-values"
"(lifted/2.1$9)"
"(make-required"
" 'copy-runtime-module!"
"(case-lambda((self_36 name_37)(apply missing-kw self_36 name_37 null)))"
" '#f"
" '#f))"
"(define-values"
"(copy-runtime-module!22.1)"
"(lambda(alts12_38"
" alts18_39"
" namespace10_40"
" primitive?13_41"
" primitive?19_42"
" protected?14_43"
" protected?20_44"
" skip11_45"
" skip17_46"
" to9_47"
" to15_48"
" name21_49)"
"(let-values(((name_50) name21_49))"
"(let-values(((to-name_51)(if to15_48 to9_47 name_50)))"
"(let-values(((ns_52) namespace10_40))"
"(let-values(((skip-syms_53)(if skip17_46 skip11_45(seteq))))"
"(let-values(((alts_54)(if alts18_39 alts12_38 '#hasheq())))"
"(let-values(((primitive?_55)(if primitive?19_42 primitive?13_41 '#t)))"
"(let-values(((protected?_56)(if protected?20_44 protected?14_43 '#f)))"
"(let-values()"
"(let-values(((mod-name_57)(list 'quote name_50)))"
"(let-values(((prims_58)(1/primitive-table name_50)))"
"(let-values((()"
"(begin"
"(let-values(((ht_60) prims_58))"
"(begin"
"(if((lambda(ht_61)(hash? ht_61)) ht_60)"
"(void)"
"(let-values()(default-in-hash-keys ht_60)))"
"((letrec-values(((for-loop_62)"
"(lambda(fold-var_63 i_64)"
"(if i_64"
"(let-values(((sym_65)(hash-iterate-key ht_60 i_64)))"
"(if '#t"
"(let-values(((fold-var_66)"
"(let-values(((fold-var_67)"
" fold-var_63))"
"(let-values(((fold-var_68)"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_65))"
"(void)))))"
"(values fold-var_68)))))"
"(if '#t"
"(for-loop_62"
" fold-var_66"
"(hash-iterate-next ht_60 i_64))"
" fold-var_66))"
" fold-var_63))"
" fold-var_63))))"
" for-loop_62)"
"(void)"
"(hash-iterate-first ht_60))))"
"(values))))"
"(let-values(((ht_59)"
"(let-values(((ht_69) prims_58))"
"(begin"
"(if((lambda(ht_70)(hash? ht_70)) ht_69)"
"(void)"
"(let-values()(default-in-hash ht_69)))"
"((letrec-values(((for-loop_71)"
"(lambda(table_72 i_73)"
"(if i_73"
"(let-values(((sym_74 val_75)"
"(hash-iterate-key+value ht_69 i_73)))"
"(if '#t"
"(let-values(((table_76)"
"(let-values(((table_77) table_72))"
"(if(set-member?"
" skip-syms_53"
" sym_74)"
" table_77"
"(let-values(((table_78)"
" table_77))"
"(let-values(((table_79)"
"(let-values()"
"(let-values(((key_80"
" val_81)"
"(let-values()"
"(values"
" sym_74"
"(let-values(((or-part_82)"
"(hash-ref"
" alts_54"
" sym_74"
" '#f)))"
"(if or-part_82"
" or-part_82"
" val_75))))))"
"(hash-set"
" table_78"
" key_80"
" val_81)))))"
"(values table_79)))))))"
"(if '#t"
"(for-loop_71"
" table_76"
"(hash-iterate-next ht_69 i_73))"
" table_76))"
" table_72))"
" table_72))))"
" for-loop_71)"
" '#hash()"
"(hash-iterate-first ht_69))))))"
"(let-values(((...nder/boot/kernel.rkt:46:2_83) declare-hash-based-module!39.1)"
"((to-name56_84) to-name_51)"
"((ht57_85) ht_59)"
"((ns58_86) ns_52)"
"((primitive?59_87) primitive?_55)"
"((protected?60_88) protected?_56))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!39.1))"
"(declare-hash-based-module!37.1"
" ns58_86"
" primitive?59_87"
" '#t"
" '#f"
" '#f"
" protected?60_88"
" '#t"
" '#f"
" '#f"
" to-name56_84"
" ht57_85)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:46:2_83"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:protected?)"
" '4)"
" '(#:namespace #:primitive? #:protected?)"
"(list ns58_86 primitive?59_87 protected?60_88)"
" to-name56_84"
" ht57_85)))))))))))))))))"
"(define-values"
"(unpack23.1$1)"
"(lambda(given-kws_89 given-args_90 name21_91)"
"(let-values(((alts18_92)(if(pair? given-kws_89)(eq? '#:alts(car given-kws_89)) '#f)))"
"(let-values(((alts12_93)(if alts18_92(car given-args_90)(void)))"
"((given-kws_94)(if alts18_92(cdr given-kws_89) given-kws_89))"
"((given-args_95)(if alts18_92(cdr given-args_90) given-args_90)))"
"(let-values(((namespace10_96)(car given-args_95))"
"((given-kws_97)(cdr given-kws_94))"
"((given-args_98)(cdr given-args_95)))"
"(let-values(((primitive?19_99)(if(pair? given-kws_97)(eq? '#:primitive?(car given-kws_97)) '#f)))"
"(let-values(((primitive?13_100)(if primitive?19_99(car given-args_98)(void)))"
"((given-kws_101)(if primitive?19_99(cdr given-kws_97) given-kws_97))"
"((given-args_102)(if primitive?19_99(cdr given-args_98) given-args_98)))"
"(let-values(((protected?20_103)(if(pair? given-kws_101)(eq? '#:protected?(car given-kws_101)) '#f)))"
"(let-values(((protected?14_104)(if protected?20_103(car given-args_102)(void)))"
"((given-kws_105)(if protected?20_103(cdr given-kws_101) given-kws_101))"
"((given-args_106)(if protected?20_103(cdr given-args_102) given-args_102)))"
"(let-values(((skip17_107)(if(pair? given-kws_105)(eq? '#:skip(car given-kws_105)) '#f)))"
"(let-values(((skip11_108)(if skip17_107(car given-args_106)(void)))"
"((given-kws_109)(if skip17_107(cdr given-kws_105) given-kws_105))"
"((given-args_110)(if skip17_107(cdr given-args_106) given-args_106)))"
"(let-values(((to15_111)(pair? given-kws_109)))"
"(let-values(((to9_112)(if to15_111(car given-args_110)(void))))"
"(copy-runtime-module!22.1"
" alts12_93"
" alts18_92"
" namespace10_96"
" primitive?13_100"
" primitive?19_99"
" protected?14_104"
" protected?20_103"
" skip11_108"
" skip17_107"
" to9_112"
" to15_111"
" name21_91))))))))))))))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lifted/2.1$9"
"(lambda(given-kws_113 given-argc_114)"
"(if(= given-argc_114 '3)"
"(subsets? '(#:namespace) given-kws_113 '(#:alts #:namespace #:primitive? #:protected? #:skip #:to))"
" '#f))"
"(case-lambda((given-kws_115 given-args_116 name_117)(unpack23.1$1 given-kws_115 given-args_116 name_117)))"
" '(#:namespace)"
" '(#:alts #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/3.1$3)"
"(make-required"
" 'declare-hash-based-module!"
"(case-lambda((self_118 name_119 ht_120)(apply missing-kw self_118 name_119 ht_120 null)))"
" '#f"
" '#f))"
"(define-values"
"(declare-hash-based-module!37.1)"
"(lambda(namespace25_121"
" primitive?26_122"
" primitive?31_123"
" protected28_124"
" protected33_125"
" protected?27_126"
" protected?32_127"
" register-builtin?29_128"
" register-builtin?34_129"
" name35_130"
" ht36_131)"
"(let-values(((name_132) name35_130))"
"(let-values(((ht_133) ht36_131))"
"(let-values(((ns_134) namespace25_121))"
"(let-values(((primitive?_135)(if primitive?31_123 primitive?26_122 '#f)))"
"(let-values(((protected?_136)(if protected?32_127 protected?27_126 '#f)))"
"(let-values(((protected-syms_137)(if protected33_125 protected28_124 null)))"
"(let-values(((register-builtin?_138)(if register-builtin?34_129 register-builtin?29_128 '#f)))"
"(let-values()"
"(let-values(((mpi_139)(1/module-path-index-join(list 'quote name_132) '#f)))"
"(let-values(((ns61_140) ns_134)"
"((temp62_141)"
"(let-values(((...nder/boot/kernel.rkt:61:3_143) make-module30.1)"
"((temp64_144) '#t)"
"((primitive?65_145) primitive?_135)"
"((temp66_146)(not protected?_136))"
"((mpi67_147) mpi_139)"
"((temp68_148)"
"(hasheqv"
" '0"
"(let-values(((ht_150) ht_133))"
"(begin"
"(if((lambda(ht_151)(hash? ht_151)) ht_150)"
"(void)"
"(let-values()(default-in-hash-keys ht_150)))"
"((letrec-values(((for-loop_152)"
"(lambda(table_153 i_154)"
"(if i_154"
"(let-values(((sym_155)"
"(hash-iterate-key"
" ht_150"
" i_154)))"
"(if '#t"
"(let-values(((table_156)"
"(let-values(((table_157)"
" table_153))"
"(let-values(((table_158)"
"(let-values()"
"(let-values(((key_159"
" val_160)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_138"
"(let-values()"
"(register-built-in-symbol!"
" sym_155))"
"(void))"
"(values))))"
"(let-values(((binding_161)"
"(let-values(((mpi70_162)"
" mpi_139)"
"((temp71_163)"
" '0)"
"((sym72_164)"
" sym_155))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" mpi70_162"
" temp71_163"
" sym72_164)"
"(make-module-binding22.1"
" mpi70_162"
" temp71_163"
" sym72_164)))))"
"(values"
" sym_155"
"(if(let-values(((or-part_165)"
" protected?_136))"
"(if or-part_165"
" or-part_165"
"(member"
" sym_155"
" protected-syms_137)))"
"(protected1.1"
" binding_161)"
" binding_161)))))))"
"(hash-set"
" table_157"
" key_159"
" val_160)))))"
"(values"
" table_158)))))"
"(if '#t"
"(for-loop_152"
" table_156"
"(hash-iterate-next ht_150 i_154))"
" table_156))"
" table_153))"
" table_153))))"
" for-loop_152)"
" '#hash()"
"(hash-iterate-first ht_150))))))"
"((temp69_149)"
"(lambda(data-box_166"
" ns_167"
" phase-shift_168"
" phase-level_169"
" self_170"
" bulk-binding-registry_171"
" insp_172)"
"(if(= '0 phase-level_169)"
"(let-values()"
"(let-values(((ht_173) ht_133))"
"(begin"
"(if((lambda(ht_174)(hash? ht_174)) ht_173)"
"(void)"
"(let-values()(default-in-hash ht_173)))"
"((letrec-values(((for-loop_175)"
"(lambda(fold-var_176 i_177)"
"(if i_177"
"(let-values(((sym_178 val_179)"
"(hash-iterate-key+value"
" ht_173"
" i_177)))"
"(if '#t"
"(let-values(((fold-var_180)"
"(let-values(((fold-var_181)"
" fold-var_176))"
"(let-values(((fold-var_182)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_167"
" '0"
" sym_178"
" val_179))"
"(void)))))"
"(values"
" fold-var_182)))))"
"(if '#t"
"(for-loop_175"
" fold-var_180"
"(hash-iterate-next"
" ht_173"
" i_177))"
" fold-var_180))"
" fold-var_176))"
" fold-var_176))))"
" for-loop_175)"
"(void)"
"(hash-iterate-first ht_173)))))"
"(void)))))"
"(if(variable-reference-constant?(#%variable-reference make-module30.1))"
"(make-module28.1"
" temp64_144"
" '#t"
" temp69_149"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp66_146"
" '#t"
" '#f"
" '#f"
" primitive?65_145"
" '#t"
" temp68_148"
" '#f"
" '#f"
" mpi67_147"
" '#f"
" '#f"
" '#f"
" '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:61:3_143"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:primitive?"
" #:provides"
" #:self)"
" '2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:primitive?"
" #:provides"
" #:self)"
"(list"
" temp64_144"
" temp69_149"
" temp66_146"
" primitive?65_145"
" temp68_148"
" mpi67_147)))))"
"((temp63_142)(1/module-path-index-resolve mpi_139)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!49.1))"
"(declare-module!47.1 '#f '#f ns61_140 temp62_141 temp63_142)"
"(declare-module!49.1 ns61_140 temp62_141 temp63_142))))))))))))))"
"(define-values"
"(unpack38.1)"
"(lambda(given-kws_183 given-args_184 name35_185 ht36_186)"
"(let-values(((namespace25_187)(car given-args_184))"
"((given-kws_188)(cdr given-kws_183))"
"((given-args_189)(cdr given-args_184)))"
"(let-values(((primitive?31_190)(if(pair? given-kws_188)(eq? '#:primitive?(car given-kws_188)) '#f)))"
"(let-values(((primitive?26_191)(if primitive?31_190(car given-args_189)(void)))"
"((given-kws_192)(if primitive?31_190(cdr given-kws_188) given-kws_188))"
"((given-args_193)(if primitive?31_190(cdr given-args_189) given-args_189)))"
"(let-values(((protected33_194)(if(pair? given-kws_192)(eq? '#:protected(car given-kws_192)) '#f)))"
"(let-values(((protected28_195)(if protected33_194(car given-args_193)(void)))"
"((given-kws_196)(if protected33_194(cdr given-kws_192) given-kws_192))"
"((given-args_197)(if protected33_194(cdr given-args_193) given-args_193)))"
"(let-values(((protected?32_198)(if(pair? given-kws_196)(eq? '#:protected?(car given-kws_196)) '#f)))"
"(let-values(((protected?27_199)(if protected?32_198(car given-args_197)(void)))"
"((given-kws_200)(if protected?32_198(cdr given-kws_196) given-kws_196))"
"((given-args_201)(if protected?32_198(cdr given-args_197) given-args_197)))"
"(let-values(((register-builtin?34_202)(pair? given-kws_200)))"
"(let-values(((register-builtin?29_203)(if register-builtin?34_202(car given-args_201)(void))))"
"(declare-hash-based-module!37.1"
" namespace25_187"
" primitive?26_191"
" primitive?31_190"
" protected28_195"
" protected33_194"
" protected?27_199"
" protected?32_198"
" register-builtin?29_203"
" register-builtin?34_202"
" name35_185"
" ht36_186))))))))))))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lifted/3.1$3"
"(lambda(given-kws_204 given-argc_205)"
"(if(= given-argc_205 '4)"
"(subsets? '(#:namespace) given-kws_204 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" '#f))"
"(case-lambda"
"((given-kws_206 given-args_207 name_208 ht_209)(unpack38.1 given-kws_206 given-args_207 name_208 ht_209)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/4.1)"
"(make-required"
" 'declare-reexporting-module!"
"(case-lambda((self_210 name_211 require-names_212)(apply missing-kw self_210 name_211 require-names_212 null)))"
" '#f"
" '#f))"
"(define-values"
"(declare-reexporting-module!46.1)"
"(lambda(namespace41_213 reexport?40_214 reexport?42_215 name44_216 require-names45_217)"
"(let-values(((name_218) name44_216))"
"(let-values(((require-names_219) require-names45_217))"
"(let-values(((reexport?_220)(if reexport?42_215 reexport?40_214 '#t)))"
"(let-values(((ns_221) namespace41_213))"
"(let-values()"
"(let-values(((mpi_222)(1/module-path-index-join(list 'quote name_218) '#f)))"
"(let-values(((require-mpis_223)"
"(alt-reverse"
"(let-values(((lst_224) require-names_219))"
"(begin"
"(if(list? lst_224)(void)(let-values()(in-list lst_224)))"
"((letrec-values(((for-loop_225)"
"(lambda(fold-var_226 lst_227)"
"(if(pair? lst_227)"
"(let-values(((require-name_228)(unsafe-car lst_227)))"
"(if '#t"
"(let-values(((fold-var_229)"
"(let-values(((fold-var_230) fold-var_226))"
"(let-values(((fold-var_231)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_228)"
" '#f))"
" fold-var_230))))"
"(values fold-var_231)))))"
"(if '#t"
"(for-loop_225 fold-var_229(unsafe-cdr lst_227))"
" fold-var_229))"
" fold-var_226))"
" fold-var_226))))"
" for-loop_225)"
" null"
" lst_224))))))"
"(let-values(((ns73_232) ns_221)"
"((temp74_233)"
"(let-values(((...nder/boot/kernel.rkt:90:3_235) make-module30.1)"
"((temp76_236) '#t)"
"((mpi77_237) mpi_222)"
"((temp78_238)(list(cons '0 require-mpis_223)))"
"((temp79_239)"
"(if reexport?_220"
"(hasheqv"
" '0"
"(let-values(((lst_241) require-mpis_223))"
"(begin"
"(if(list? lst_241)(void)(let-values()(in-list lst_241)))"
"((letrec-values(((for-loop_242)"
"(lambda(table_243 lst_244)"
"(if(pair? lst_244)"
"(let-values(((require-mpi_245)"
"(unsafe-car lst_244)))"
"(if '#t"
"(let-values(((table_246)"
"(let-values(((m_247)"
"(namespace->module"
" ns_221"
"(1/module-path-index-resolve"
" require-mpi_245))))"
"(begin"
" '#t"
"((letrec-values(((for-loop_248)"
"(lambda(table_249)"
"(if '#t"
"(let-values()"
"(if '#t"
"(let-values(((table_250)"
"(let-values(((ht_251)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_247)"
"(module-self"
" m_247)"
" require-mpi_245)"
" '0)))"
"(begin"
"(if((lambda(ht_252)"
"(hash?"
" ht_252))"
" ht_251)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_251)))"
"((letrec-values(((for-loop_253)"
"(lambda(table_254"
" i_255)"
"(if i_255"
"(let-values(((sym_256"
" binding_257)"
"(hash-iterate-key+value"
" ht_251"
" i_255)))"
"(if '#t"
"(let-values(((table_258)"
"(let-values(((table_259)"
" table_254))"
"(let-values(((table_260)"
"(let-values()"
"(let-values(((key_261"
" val_262)"
"(let-values()"
"(values"
" sym_256"
" binding_257))))"
"(hash-set"
" table_259"
" key_261"
" val_262)))))"
"(values"
" table_260)))))"
"(if '#t"
"(for-loop_253"
" table_258"
"(hash-iterate-next"
" ht_251"
" i_255))"
" table_258))"
" table_254))"
" table_254))))"
" for-loop_253)"
" table_249"
"(hash-iterate-first"
" ht_251))))))"
"(if '#f"
"(for-loop_248"
" table_250)"
" table_250))"
" table_249))"
" table_249))))"
" for-loop_248)"
" table_243)))))"
"(if '#t"
"(for-loop_242"
" table_246"
"(unsafe-cdr lst_244))"
" table_246))"
" table_243))"
" table_243))))"
" for-loop_242)"
" '#hash()"
" lst_241))))"
" '#hasheqv()))"
"((void80_240) void))"
"(if(variable-reference-constant?(#%variable-reference make-module30.1))"
"(make-module28.1"
" temp76_236"
" '#t"
" void80_240"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp79_239"
" temp78_238"
" '#t"
" mpi77_237"
" '#f"
" '#f"
" '#f"
" '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:90:3_235"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:provides"
" #:requires"
" #:self)"
" '2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:provides"
" #:requires"
" #:self)"
"(list temp76_236 void80_240 temp79_239 temp78_238 mpi77_237)))))"
"((temp75_234)(1/module-path-index-resolve mpi_222)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!49.1))"
"(declare-module!47.1 '#f '#f ns73_232 temp74_233 temp75_234)"
"(declare-module!49.1 ns73_232 temp74_233 temp75_234))))))))))))"
"(define-values"
"(unpack47.1$1)"
"(lambda(given-kws_263 given-args_264 name44_265 require-names45_266)"
"(let-values(((namespace41_267)(car given-args_264))"
"((given-kws_268)(cdr given-kws_263))"
"((given-args_269)(cdr given-args_264)))"
"(let-values(((reexport?42_270)(pair? given-kws_268)))"
"(let-values(((reexport?40_271)(if reexport?42_270(car given-args_269)(void))))"
"(declare-reexporting-module!46.1"
" namespace41_267"
" reexport?40_271"
" reexport?42_270"
" name44_265"
" require-names45_266))))))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lifted/4.1"
"(lambda(given-kws_272 given-argc_273)"
"(if(= given-argc_273 '4)(subsets? '(#:namespace) given-kws_272 '(#:namespace #:reexport?)) '#f))"
"(case-lambda"
"((given-kws_274 given-args_275 name_276 require-names_277)"
"(unpack47.1$1 given-kws_274 given-args_275 name_276 require-names_277)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" 1/eval"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$2"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module->language-info"
" 1/module->language-info"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" new:collection-path"
" 'collection-file-path"
" new:collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type"
" 'TH-place-channel"
" '#f"
" '2"
" '0"
" '#f"
"(list(cons prop:evt(lambda(x_1)(TH-place-channel-ref x_1 '0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_2)(TH-place-channel-ref x_2 '0))(lambda(x_3)(TH-place-channel-ref x_3 '1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" read-accept-reader"
" '#t"
" read-accept-lang"
" '#t"
" read-accept-compiled"
" '#t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(raise-wrong-module-name)"
"(lambda(filename_2 expected-name_3 name_4)"
"(error"
" 'load-handler"
" '\"expected a `module' declaration for `~a' in ~s, found: ~a\""
" expected-name_3"
" filename_2"
" name_4)))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(syntax-e$2 exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
" (string-append '\"expected a `module' declaration, but found end-of-file\\n\" '\" file: ~a\")"
" filename_6)"
" '#f))"
"(if(1/compiled-module-expression?(syntax-e$2 exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(syntax-e$2 exp_5))"
"(if(eq? 'module(syntax-e$2(car(syntax-e$2 exp_5))))"
"(let-values(((r_8)(cdr(syntax-e$2 exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(syntax-e$2 r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) '#f)))"
" '#f)"
" '#f)"
" '#f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(syntax-e$2 exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
" (string-append '\"expected a `module' declaration, but found something else\\n\" '\" file: ~a\")"
" filename_6)"
" '#f)))))))"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 '#f(lambda() '#f))))"
"(if v_6(cons a_5 v_6) '#f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 '#f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 '#f) '#f) '#f))))"
" '#f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
" (let-values () (raise-argument-error 'load/use-compiled '\"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) '1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" '#f)"
" '#f)"
" '#f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
" '\"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) '#f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" '#f)"
" '#f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 '#f) '#f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 '4)"
" (bytes=? '#\".rkt\" (subbytes b_38 (- len_39 '4)))"
" '#f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
" (bytes-append (subbytes b_38 '0 (- len_39 '4)) '#\".ss\"))))"
"(let-values()(values orig-file_34 '#f)))))"
"(values orig-file_34 '#f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" '#f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) '#f)"
" '#f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
" '\"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
" (path-add-extension file_36 '#\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
" (path-add-extension alt-file_37 '#\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 '#t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 '#t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68) alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" '#f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c142556_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" '#f)))"
"(if c142556_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-module-declare-source"
" '#f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c142556_71)"
"(let-values(((c142557_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" '#f)))"
"(if c142557_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c142557_73)"
"(let-values(((c142558_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" '#f)))"
"(if c142558_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" '#f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-module-declare-source"
" '#f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c142558_75)"
"(let-values(((c142559_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" '#f)))"
"(if c142559_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c142559_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" '#f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" '#f)"
" '#f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) '512)"
"(define-values(-path-cache)(make-vector CACHE-N '#f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) '#f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) '#f)) '#f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) '#f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box"
"(cons(cons p_92 v_93)(let-values(((or-part_97) l_96))(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) '#f)"
"(define-values(-prev-relto-dir) '#f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 '0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" '0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(syntax-source$1 stx_110)"
"(1/syntax-line stx_110)"
"(syntax-column$1 stx_110)"
"(syntax-position$1 stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) '#f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) '#f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
" (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
" (raise-argument-error 'standard-module-name-resolver '\"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
" '\"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" '#f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1 from-namespace_115)"
" '#f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 '#f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
" '\"default module name resolver called with three arguments (deprecated)\""
" '#f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 '#t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
" (1/raise-syntax-error '#f '\"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
" '\"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
" '\"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
" '\"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
" (if (equal? (car l_137) '\"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
" '\"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
" (if (equal? base_133 '\".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) '#f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) '#f)"
" '#f)"
" '#f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
" (if (let-values (((or-part_138) (equal? (cadr s_126) '\".\")))"
" (if or-part_138 or-part_138 (equal? (cadr s_126) '\"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) '#f))))"
" '#f)"
" '#f)"
" '#f)"
" '#f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
" (if (equal? (cadr s_126) '\"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) '#f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 '#f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) '#f)"
" '#f)"
" '#f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" '#f))))"
" '#f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(namespace-module-registry$1(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" '#f)"
" '#f)))"
"(if or-part_159"
" or-part_159"
" '\"standard-module-name-resolver\"))"
" '\": \""
"(regexp-replace"
" '#rx\"\\n\""
" msg_157"
"(format"
" '\"\\n for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 '3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 '3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 '2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 '1)))"
" '#f)"
" '#f)"
" '#f)"
"(string-append"
"(substring s_160 '0(- len_161 '3))"
" '\".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
" (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
" (path-replace-extension p_162 '#\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) '#f)"
"(let-values(((v_166)(cadr s_126)))"
" (if (let-values (((or-part_167) (equal? v_166 '\".\")))"
"(if or-part_167"
" or-part_167"
" (equal? v_166 '\"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
" '\"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) '#f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
" '\".\")))"
"(if or-part_170"
" or-part_170"
" (equal? (cadr s_126) '\"..\")))"
" relto_127"
" '#f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
" '\"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
" '\".\""
" (if (equal? (cadr s_126) '\"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) '#f))"
" '#f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" '#f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
" '\"main.rkt\""
"(string-append"
" file_176"
" '\".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" '#t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" '#f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
" (if (string=? s_182 '\".\")"
"(let-values() 'same)"
" (if (string=? s_182 '\"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" '#f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
" '#rx\"[.]\""
" file_185)"
" '#f)"
" '#t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
" '\"main.rkt\""
"(if(regexp-match?"
" '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
" '\".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
" '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" '#t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" '#t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(1/raise-syntax-error"
" 'require"
"(format"
" '\"bad module path~a\""
" (if s-parsed_173 (car s-parsed_173) '\"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
" '\"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 '0)"
"(simplify-path(cleanse-path s-parsed_173) '#f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 '1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 '2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 '3)"
" (path-replace-extension name_194 '#\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 '4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" '#f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" '#f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" '#f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" '#f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
" '\"cycle in loading\\n at path: ~a\\n paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
" '\"\\n \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" '#f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" '#f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" '#f)"
"(cons"
" '#f"
" subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" '#f)))))"
" '#f)"
" '#f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(eval$1"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))(lambda(e_218 ns_219)(c_217 e_218 '#t))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(compile$1 s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-load-handler)"
"(lambda(path_222 expected-mod_223)"
"(begin"
"(if(path-string? path_222)"
"(void)"
" (let-values () (raise-argument-error 'default-load-handler '\"path-string?\" path_222)))"
"(if(let-values(((or-part_224)(not expected-mod_223)))"
"(if or-part_224"
" or-part_224"
"(let-values(((or-part_225)(symbol? expected-mod_223)))"
"(if or-part_225"
" or-part_225"
"(if(pair? expected-mod_223)"
"(if(list? expected-mod_223)"
"(if(let-values(((or-part_226)(not(car expected-mod_223))))"
"(if or-part_226 or-part_226(symbol?(car expected-mod_223))))"
"(andmap2 symbol?(cdr expected-mod_223))"
" '#f)"
" '#f)"
" '#f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
" '\"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_223)))"
"(if expected-mod_223"
"(let-values()"
"(let-values(((m-s_227)"
"(let-values(((path1_228) path_222)"
"((temp2_229)"
"(lambda(i_230)"
"(begin"
" (if (regexp-match? '#rx\"[.]zo$\" path_222)"
"(void)"
"(let-values()(port-count-lines! i_230)))"
"(with-module-reading-parameterization"
"(lambda()"
"(let-values(((s_231)(1/read-syntax(object-name i_230) i_230)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_231)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
" '\"expected a `module' declaration;\\n\"\n"
" '\" found end-of-file\\n\""
" '\" in: ~e\")"
"(object-name i_230)))"
"(void))"
"(values))))"
"(let-values(((m-s_232)(check-module-form s_231 path_222)))"
"(let-values(((s2_233)(1/read-syntax(object-name i_230) i_230)))"
"(begin"
"(if(eof-object? s2_233)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
" '\"expected a `module' declaration;\\n\"\n"
" '\" found an extra form\\n\""
" '\" in: ~e\\n\""
" '\" found: ~.s\")"
"(object-name i_230)"
" s2_233)))"
" m-s_232)))))))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 '#f '#f path1_228 temp2_229)"
"(call-with-input-file*63.1 path1_228 temp2_229)))))"
"((current-eval) m-s_227)))"
"(let-values()"
"(let-values(((add-top-interaction_234)"
"(lambda(s_235)"
"(1/namespace-syntax-introduce(1/datum->syntax '#f(cons '#%top-interaction s_235))))))"
"(let-values(((path3_236) path_222)"
"((temp4_237)"
"(lambda(i_238)"
"(begin"
"(port-count-lines! i_238)"
"((letrec-values(((loop_239)"
"(lambda(vals_240)"
"(let-values(((s_241)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" read-accept-compiled"
" '#t"
" read-accept-reader"
" '#t"
" read-accept-lang"
" '#t)"
"(let-values()"
"(1/read-syntax(object-name i_238) i_238)))))"
"(if(eof-object? s_241)"
"(apply values vals_240)"
"(loop_239"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_234 s_241)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_242"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_242)))))))))"
" loop_239)"
"(list(void)))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 '#f '#f path3_236 temp4_237)"
"(call-with-input-file*63.1 path3_236 temp4_237)))))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first '#f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_3 disarmed-s_4 formals_5 bodys_6 ctx_7 log-renames-tag_8)"
"(let-values(((sc_9)(new-scope 'local)))"
"(let-values(((phase_10)(expand-context-phase ctx_7)))"
"(let-values(((ids_11)(parse-and-flatten-formals formals_5 sc_9 disarmed-s_4)))"
"(let-values((()"
"(begin"
"(let-values(((...nder/expand/expr.rkt:34:2_19) check-no-duplicate-ids10.1)"
"((ids29_20) ids_11)"
"((phase30_21) phase_10)"
"((s31_22) s_3)"
" ((temp32_23) '\"argument name\"))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 temp32_23 '#t ids29_20 phase30_21 s31_22 '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:34:2_19"
" keyword-procedure-extract"
" '(#:what)"
" '5)"
" '(#:what)"
"(list temp32_23)"
" ids29_20"
" phase30_21"
" s31_22)))"
"(values))))"
"(let-values(((counter_12)(root-expand-context-counter ctx_7)))"
"(let-values(((keys_13)"
"(alt-reverse"
"(let-values(((lst_24) ids_11))"
"(begin"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27)"
"(if(pair? lst_27)"
"(let-values(((id_28)(unsafe-car lst_27)))"
"(if '#t"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30) fold-var_26))"
"(let-values(((fold-var_31)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:39:17_32)"
" add-local-binding!35.1)"
"((id33_33)"
" id_28)"
"((phase34_34)"
" phase_10)"
"((counter35_35)"
" counter_12)"
"((s36_36)"
" s_3))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" '#f"
" '#f"
" s36_36"
" '#t"
" id33_33"
" phase34_34"
" counter35_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:39:17_32"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list s36_36)"
" id33_33"
" phase34_34"
" counter35_35))))"
" fold-var_30))))"
"(values fold-var_31)))))"
"(if '#t"
"(for-loop_25 fold-var_29(unsafe-cdr lst_27))"
" fold-var_29))"
" fold-var_26))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_24))))))"
"(let-values(((body-env_14)"
"(let-values(((lst_37) keys_13)((lst_38) ids_11))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"(if(list? lst_38)(void)(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(env_40 lst_41 lst_42)"
"(if(if(pair? lst_41)(pair? lst_42) '#f)"
"(let-values(((key_43)(unsafe-car lst_41))"
"((id_44)(unsafe-car lst_42)))"
"(if(if '#t '#t '#f)"
"(let-values(((env_45)"
"(let-values(((env_46) env_40))"
"(let-values(((env_47)"
"(let-values()"
"(env-extend"
" env_46"
" key_43"
"(local-variable1.1"
" id_44)))))"
"(values env_47)))))"
"(if(if '#t '#t '#f)"
"(for-loop_39"
" env_45"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42))"
" env_45))"
" env_40))"
" env_40))))"
" for-loop_39)"
"(expand-context-env ctx_7)"
" lst_37"
" lst_38)))))"
"(let-values(((sc-formals_15)(add-scope formals_5 sc_9)))"
"(let-values(((sc-bodys_16)"
"(alt-reverse"
"(let-values(((lst_48) bodys_6))"
"(begin"
"(if(list? lst_48)(void)(let-values()(in-list lst_48)))"
"((letrec-values(((for-loop_49)"
"(lambda(fold-var_50 lst_51)"
"(if(pair? lst_51)"
"(let-values(((body_52)(unsafe-car lst_51)))"
"(if '#t"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54) fold-var_50))"
"(let-values(((fold-var_55)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_52"
" sc_9))"
" fold-var_54))))"
"(values fold-var_55)))))"
"(if '#t"
"(for-loop_49 fold-var_53(unsafe-cdr lst_51))"
" fold-var_53))"
" fold-var_50))"
" fold-var_50))))"
" for-loop_49)"
" null"
" lst_48))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_56)(expand-context-observer ctx_7)))"
"(if obs_56"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_56"
" log-renames-tag_8"
" sc-formals_15"
"(datum->syntax$2 '#f sc-bodys_16)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_17)"
"(let-values(((the-struct_57) ctx_7))"
"(if(expand-context? the-struct_57)"
"(let-values(((env37_58) body-env_14)"
"((scopes38_59)(cons sc_9(expand-context-scopes ctx_7)))"
"((all-scopes-stx39_60)"
"(add-scope(root-expand-context-all-scopes-stx ctx_7) sc_9)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_57)"
"(root-expand-context-post-expansion-scope the-struct_57)"
"(root-expand-context-top-level-bind-scope the-struct_57)"
" all-scopes-stx39_60"
"(root-expand-context-use-site-scopes the-struct_57)"
"(root-expand-context-defined-syms the-struct_57)"
"(root-expand-context-frame-id the-struct_57)"
"(root-expand-context-counter the-struct_57)"
"(root-expand-context-lift-key the-struct_57)"
"(expand-context-context the-struct_57)"
"(expand-context-phase the-struct_57)"
"(expand-context-namespace the-struct_57)"
" env37_58"
"(expand-context-post-expansion-scope-action the-struct_57)"
" scopes38_59"
"(expand-context-def-ctx-scopes the-struct_57)"
"(expand-context-reference-records the-struct_57)"
"(expand-context-only-immediate? the-struct_57)"
"(expand-context-just-once? the-struct_57)"
"(expand-context-module-begin-k the-struct_57)"
"(expand-context-need-eventually-defined the-struct_57)"
"(expand-context-allow-unbound? the-struct_57)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_57)"
"(expand-context-stops the-struct_57)"
"(expand-context-current-introduction-scopes the-struct_57)"
"(expand-context-declared-submodule-names the-struct_57)"
"(expand-context-lifts the-struct_57)"
"(expand-context-lift-envs the-struct_57)"
"(expand-context-module-lifts the-struct_57)"
"(expand-context-require-lifts the-struct_57)"
"(expand-context-to-module-lifts the-struct_57)"
"(expand-context-requires+provides the-struct_57)"
"(expand-context-name the-struct_57)"
"(expand-context-observer the-struct_57)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_57)))))"
"(let-values(((exp-body_18)"
"(let-values(((...nder/expand/expr.rkt:53:19_61) expand-body30.1)"
"((sc-bodys40_62) sc-bodys_16)"
"((body-ctx41_63) body-ctx_17)"
"((s42_64) s_3)"
"((disarmed-s43_65) disarmed-s_4))"
"(if(variable-reference-constant?(#%variable-reference expand-body30.1))"
"(expand-body28.1"
" disarmed-s43_65"
" s42_64"
" '#f"
" '#f"
" '#f"
" '#f"
" sc-bodys40_62"
" body-ctx41_63)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:53:19_61"
" keyword-procedure-extract"
" '(#:disarmed-source #:source)"
" '4)"
" '(#:disarmed-source #:source)"
"(list disarmed-s43_65 s42_64)"
" sc-bodys40_62"
" body-ctx41_63)))))"
"(values sc-formals_15 exp-body_18)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_66)"
"(lambda(s_67 ctx_68)"
"(let-values((()"
"(begin"
"(let-values(((obs_73)(expand-context-observer ctx_68)))"
"(if obs_73"
"(let-values()(if '#t(let-values()(call-expand-observe obs_73 'prim-lambda))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_69)(syntax-disarm$1 s_67)))"
"(let-values(((m_70)(match-syntax disarmed-s_69 '(lambda formals body ...+))))"
"(let-values(((formals_71 body_72)"
"(lambda-clause-expander"
" s_67"
" disarmed-s_69"
"(m_70 'formals)"
"(m_70 'body)"
" ctx_68"
" 'lambda-renames)))"
"(let-values(((s44_74) s_67)"
"((disarmed-s45_75) disarmed-s_69)"
"((temp46_76)(list(get-lambda_66 ctx_68(m_70 'lambda)) formals_71 body_72)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s44_74 disarmed-s45_75 temp46_76)"
"(rebuild101.1 s44_74 disarmed-s45_75 temp46_76))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_77 lam-id_78) lam-id_78))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_79 lam-id_80)"
"(datum->syntax$2"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_79))"
" 'lambda"
" lam-id_80"
" lam-id_80)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_81 ctx_82)"
"(let-values((()"
"(begin"
"(let-values(((obs_86)(expand-context-observer ctx_82)))"
"(if obs_86"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_86 'prim-case-lambda))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_83)(syntax-disarm$1 s_81)))"
"(let-values(((m_84)(match-syntax disarmed-s_83 '(case-lambda(formals body ...+) ...))))"
"(let-values(((cm_85)(match-syntax disarmed-s_83 '(case-lambda clause ...))))"
"(let-values(((s47_87) s_81)"
"((disarmed-s48_88) disarmed-s_83)"
"((temp49_89)"
"(list*"
"(m_84 'case-lambda)"
"(alt-reverse"
"(let-values(((lst_90)(m_84 'formals))"
"((lst_91)(m_84 'body))"
"((lst_92)(cm_85 'clause)))"
"(begin"
"(if(list? lst_90)(void)(let-values()(in-list lst_90)))"
"(if(list? lst_91)(void)(let-values()(in-list lst_91)))"
"(if(list? lst_92)(void)(let-values()(in-list lst_92)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_94 lst_95 lst_96 lst_97)"
"(if(if(pair? lst_95)"
"(if(pair? lst_96)(pair? lst_97) '#f)"
" '#f)"
"(let-values(((formals_98)(unsafe-car lst_95))"
"((bodys_99)(unsafe-car lst_96))"
"((clause_100)(unsafe-car lst_97)))"
"(if(if '#t(if '#t '#t '#f) '#f)"
"(let-values(((fold-var_101)"
"(let-values(((fold-var_102) fold-var_94))"
"(let-values(((fold-var_103)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_106)"
"(expand-context-observer"
" ctx_82)))"
"(if obs_106"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_106"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-formals_104"
" exp-body_105)"
"(lambda-clause-expander"
" s_81"
" disarmed-s_83"
" formals_98"
" bodys_99"
" ctx_82"
" 'case-lambda-renames)))"
"(let-values(((clause50_107)"
" clause_100)"
"((clause51_108)"
" clause_100)"
"((temp52_109)"
"(list"
" exp-formals_104"
" exp-body_105)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" clause50_107"
" clause51_108"
" temp52_109)"
"(rebuild101.1"
" clause50_107"
" clause51_108"
" temp52_109))))))"
" fold-var_102))))"
"(values fold-var_103)))))"
"(if(if '#t(if '#t '#t '#f) '#f)"
"(for-loop_93"
" fold-var_101"
"(unsafe-cdr lst_95)"
"(unsafe-cdr lst_96)"
"(unsafe-cdr lst_97))"
" fold-var_101))"
" fold-var_94))"
" fold-var_94))))"
" for-loop_93)"
" null"
" lst_90"
" lst_91"
" lst_92)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s47_87 disarmed-s48_88 temp49_89)"
"(rebuild101.1 s47_87 disarmed-s48_88 temp49_89))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_110 sc_111 s_112)"
"((letrec-values(((loop_113)"
"(lambda(formals_114)"
"(if(identifier? formals_114)"
"(let-values()(list(add-scope formals_114 sc_111)))"
"(if(syntax?$1 formals_114)"
"(let-values()"
"(let-values(((p_115)(syntax-e$1 formals_114)))"
"(if(pair? p_115)"
"(let-values()(loop_113 p_115))"
"(if(null? p_115)"
"(let-values() null)"
" (let-values () (1/raise-syntax-error '#f '\"not an identifier\" s_112 p_115))))))"
"(if(pair? formals_114)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_114))"
"(void)"
"(let-values()"
" (1/raise-syntax-error '#f '\"not an identifier\" s_112 (car formals_114))))"
"(cons(add-scope(car formals_114) sc_111)(loop_113(cdr formals_114)))))"
"(if(null? formals_114)"
"(let-values() null)"
"(let-values()"
" (1/raise-syntax-error '\"bad argument sequence\" s_112 all-formals_110)))))))))"
" loop_113)"
" all-formals_110)))"
"(define-values"
"(lifted/1.1$20)"
"(make-required 'make-let-values-form(case-lambda((self_116)(apply missing-kw self_116 null))) '#f '#f))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_117"
" rec?3_118"
" rec?8_119"
" renames-log-tag5_120"
" renames-log-tag10_121"
" split-by-reference?4_122"
" split-by-reference?9_123"
" syntaxes?2_124"
" syntaxes?7_125)"
"(let-values(((log-tag_126) log-tag1_117))"
"(let-values(((syntaxes?_127)(if syntaxes?7_125 syntaxes?2_124 '#f)))"
"(let-values(((rec?_128)(if rec?8_119 rec?3_118 '#f)))"
"(let-values(((split-by-reference?_129)(if split-by-reference?9_123 split-by-reference?4_122 '#f)))"
"(let-values(((renames-log-tag_130)(if renames-log-tag10_121 renames-log-tag5_120 'let-renames)))"
"(let-values()"
"(lambda(s_131 ctx_132)"
"(let-values((()"
"(begin"
"(let-values(((obs_153)(expand-context-observer ctx_132)))"
"(if obs_153"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_153 log-tag_126))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_133)(syntax-disarm$1 s_131)))"
"(let-values(((m_134)"
"(if syntaxes?_127"
"(match-syntax"
" disarmed-s_133"
" '(letrec-syntaxes+values(((trans-id ...) trans-rhs) ...)"
"(((val-id ...) val-rhs) ...)"
" body"
" ...+))"
"(match-syntax"
" disarmed-s_133"
" '(let-values(((val-id ...) val-rhs) ...) body ...+)))))"
"(let-values(((sc_135)(new-scope 'local)))"
"(let-values(((phase_136)(expand-context-phase ctx_132)))"
"(let-values(((frame-id_137)(if split-by-reference?_129(make-reference-record) '#f)))"
"(let-values(((trans-idss_138)"
"(alt-reverse"
"(let-values(((lst_154)(if syntaxes?_127(m_134 'trans-id) null)))"
"(begin"
"(if(list? lst_154)(void)(let-values()(in-list lst_154)))"
"((letrec-values(((for-loop_155)"
"(lambda(fold-var_156 lst_157)"
"(if(pair? lst_157)"
"(let-values(((ids_158)(unsafe-car lst_157)))"
"(if '#t"
"(let-values(((fold-var_159)"
"(let-values(((fold-var_160)"
" fold-var_156))"
"(let-values(((fold-var_161)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_162)"
" ids_158))"
"(begin"
"(if(list?"
" lst_162)"
"(void)"
"(let-values()"
"(in-list"
" lst_162)))"
"((letrec-values(((for-loop_163)"
"(lambda(fold-var_164"
" lst_165)"
"(if(pair?"
" lst_165)"
"(let-values(((id_166)"
"(unsafe-car"
" lst_165)))"
"(if '#t"
"(let-values(((fold-var_167)"
"(let-values(((fold-var_168)"
" fold-var_164))"
"(let-values(((fold-var_169)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_166"
" sc_135))"
" fold-var_168))))"
"(values"
" fold-var_169)))))"
"(if '#t"
"(for-loop_163"
" fold-var_167"
"(unsafe-cdr"
" lst_165))"
" fold-var_167))"
" fold-var_164))"
" fold-var_164))))"
" for-loop_163)"
" null"
" lst_162)))))"
" fold-var_160))))"
"(values fold-var_161)))))"
"(if '#t"
"(for-loop_155"
" fold-var_159"
"(unsafe-cdr lst_157))"
" fold-var_159))"
" fold-var_156))"
" fold-var_156))))"
" for-loop_155)"
" null"
" lst_154))))))"
"(let-values(((val-idss_139)"
"(alt-reverse"
"(let-values(((lst_170)(m_134 'val-id)))"
"(begin"
"(if(list? lst_170)(void)(let-values()(in-list lst_170)))"
"((letrec-values(((for-loop_171)"
"(lambda(fold-var_172 lst_173)"
"(if(pair? lst_173)"
"(let-values(((ids_174)(unsafe-car lst_173)))"
"(if '#t"
"(let-values(((fold-var_175)"
"(let-values(((fold-var_176)"
" fold-var_172))"
"(let-values(((fold-var_177)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_178)"
" ids_174))"
"(begin"
"(if(list?"
" lst_178)"
"(void)"
"(let-values()"
"(in-list"
" lst_178)))"
"((letrec-values(((for-loop_179)"
"(lambda(fold-var_180"
" lst_181)"
"(if(pair?"
" lst_181)"
"(let-values(((id_182)"
"(unsafe-car"
" lst_181)))"
"(if '#t"
"(let-values(((fold-var_183)"
"(let-values(((fold-var_184)"
" fold-var_180))"
"(let-values(((fold-var_185)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_182"
" sc_135))"
" fold-var_184))))"
"(values"
" fold-var_185)))))"
"(if '#t"
"(for-loop_179"
" fold-var_183"
"(unsafe-cdr"
" lst_181))"
" fold-var_183))"
" fold-var_180))"
" fold-var_180))))"
" for-loop_179)"
" null"
" lst_178)))))"
" fold-var_176))))"
"(values fold-var_177)))))"
"(if '#t"
"(for-loop_171"
" fold-var_175"
"(unsafe-cdr lst_173))"
" fold-var_175))"
" fold-var_172))"
" fold-var_172))))"
" for-loop_171)"
" null"
" lst_170))))))"
"(let-values((()"
"(begin"
"(let-values(((temp53_186)(list trans-idss_138 val-idss_139))"
"((phase54_187) phase_136)"
"((s55_188) s_131))"
"(if(variable-reference-constant?"
"(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" '#f"
" '#f"
" temp53_186"
" phase54_187"
" s55_188"
" '#f"
" '#f)"
"(check-no-duplicate-ids10.1 temp53_186 phase54_187 s55_188)))"
"(values))))"
"(let-values(((counter_140)(root-expand-context-counter ctx_132)))"
"(let-values(((trans-keyss_141)"
"(alt-reverse"
"(let-values(((lst_189) trans-idss_138))"
"(begin"
"(if(list? lst_189)(void)(let-values()(in-list lst_189)))"
"((letrec-values(((for-loop_190)"
"(lambda(fold-var_191 lst_192)"
"(if(pair? lst_192)"
"(let-values(((ids_193)"
"(unsafe-car lst_192)))"
"(if '#t"
"(let-values(((fold-var_194)"
"(let-values(((fold-var_195)"
" fold-var_191))"
"(let-values(((fold-var_196)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_197)"
" ids_193))"
"(begin"
"(if(list?"
" lst_197)"
"(void)"
"(let-values()"
"(in-list"
" lst_197)))"
"((letrec-values(((for-loop_198)"
"(lambda(fold-var_199"
" lst_200)"
"(if(pair?"
" lst_200)"
"(let-values(((id_201)"
"(unsafe-car"
" lst_200)))"
"(if '#t"
"(let-values(((fold-var_202)"
"(let-values(((fold-var_203)"
" fold-var_199))"
"(let-values(((fold-var_204)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:155:27_205)"
" add-local-binding!35.1)"
"((id56_206)"
" id_201)"
"((phase57_207)"
" phase_136)"
"((counter58_208)"
" counter_140)"
"((s59_209)"
" s_131))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" '#f"
" '#f"
" s59_209"
" '#t"
" id56_206"
" phase57_207"
" counter58_208)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:155:27_205"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list"
" s59_209)"
" id56_206"
" phase57_207"
" counter58_208))))"
" fold-var_203))))"
"(values"
" fold-var_204)))))"
"(if '#t"
"(for-loop_198"
" fold-var_202"
"(unsafe-cdr"
" lst_200))"
" fold-var_202))"
" fold-var_199))"
" fold-var_199))))"
" for-loop_198)"
" null"
" lst_197)))))"
" fold-var_195))))"
"(values"
" fold-var_196)))))"
"(if '#t"
"(for-loop_190"
" fold-var_194"
"(unsafe-cdr lst_192))"
" fold-var_194))"
" fold-var_191))"
" fold-var_191))))"
" for-loop_190)"
" null"
" lst_189))))))"
"(let-values(((val-keyss_142)"
"(alt-reverse"
"(let-values(((lst_210) val-idss_139))"
"(begin"
"(if(list? lst_210)(void)(let-values()(in-list lst_210)))"
"((letrec-values(((for-loop_211)"
"(lambda(fold-var_212 lst_213)"
"(if(pair? lst_213)"
"(let-values(((ids_214)"
"(unsafe-car lst_213)))"
"(if '#t"
"(let-values(((fold-var_215)"
"(let-values(((fold-var_216)"
" fold-var_212))"
"(let-values(((fold-var_217)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_218)"
" ids_214))"
"(begin"
"(if(list?"
" lst_218)"
"(void)"
"(let-values()"
"(in-list"
" lst_218)))"
"((letrec-values(((for-loop_219)"
"(lambda(fold-var_220"
" lst_221)"
"(if(pair?"
" lst_221)"
"(let-values(((id_222)"
"(unsafe-car"
" lst_221)))"
"(if '#t"
"(let-values(((fold-var_223)"
"(let-values(((fold-var_224)"
" fold-var_220))"
"(let-values(((fold-var_225)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:158:25_226)"
" add-local-binding!35.1)"
"((id60_227)"
" id_222)"
"((phase61_228)"
" phase_136)"
"((counter62_229)"
" counter_140)"
"((frame-id63_230)"
" frame-id_137)"
"((s64_231)"
" s_131))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id63_230"
" '#t"
" s64_231"
" '#t"
" id60_227"
" phase61_228"
" counter62_229)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:158:25_226"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" '5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id63_230"
" s64_231)"
" id60_227"
" phase61_228"
" counter62_229))))"
" fold-var_224))))"
"(values"
" fold-var_225)))))"
"(if '#t"
"(for-loop_219"
" fold-var_223"
"(unsafe-cdr"
" lst_221))"
" fold-var_223))"
" fold-var_220))"
" fold-var_220))))"
" for-loop_219)"
" null"
" lst_218)))))"
" fold-var_216))))"
"(values"
" fold-var_217)))))"
"(if '#t"
"(for-loop_211"
" fold-var_215"
"(unsafe-cdr lst_213))"
" fold-var_215))"
" fold-var_212))"
" fold-var_212))))"
" for-loop_211)"
" null"
" lst_210))))))"
"(let-values(((bodys_143)"
"(alt-reverse"
"(let-values(((lst_232)(m_134 'body)))"
"(begin"
"(if(list? lst_232)"
"(void)"
"(let-values()(in-list lst_232)))"
"((letrec-values(((for-loop_233)"
"(lambda(fold-var_234 lst_235)"
"(if(pair? lst_235)"
"(let-values(((body_236)"
"(unsafe-car lst_235)))"
"(if '#t"
"(let-values(((fold-var_237)"
"(let-values(((fold-var_238)"
" fold-var_234))"
"(let-values(((fold-var_239)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_236"
" sc_135))"
" fold-var_238))))"
"(values"
" fold-var_239)))))"
"(if '#t"
"(for-loop_233"
" fold-var_237"
"(unsafe-cdr lst_235))"
" fold-var_237))"
" fold-var_234))"
" fold-var_234))))"
" for-loop_233)"
" null"
" lst_232))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_240)(expand-context-observer ctx_132)))"
"(if obs_240"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_240"
" renames-log-tag_130"
" val-idss_139"
"(datum->syntax$2 '#f bodys_143)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_127"
"(let-values()"
"(begin"
"(let-values(((obs_241)"
"(expand-context-observer ctx_132)))"
"(if obs_241"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_241"
" 'prepare-env))"
"(void)))"
"(void)))"
"(let-values(((obs_242)"
"(expand-context-observer ctx_132)))"
"(if obs_242"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_242 'enter-bind))"
"(void)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_144)"
"(alt-reverse"
"(let-values(((lst_243)"
"(if syntaxes?_127(m_134 'trans-rhs) '()))"
"((lst_244) trans-idss_138))"
"(begin"
"(if(list? lst_243)"
"(void)"
"(let-values()(in-list lst_243)))"
"(if(list? lst_244)"
"(void)"
"(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246"
" lst_247"
" lst_248)"
"(if(if(pair? lst_247)"
"(pair? lst_248)"
" '#f)"
"(let-values(((rhs_249)"
"(unsafe-car"
" lst_247))"
"((ids_250)"
"(unsafe-car"
" lst_248)))"
"(if(if '#t '#t '#f)"
"(let-values(((fold-var_251)"
"(let-values(((fold-var_252)"
" fold-var_246))"
"(let-values(((fold-var_253)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_254)"
"(expand-context-observer"
" ctx_132)))"
"(if obs_254"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_254"
" 'next))"
"(void)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_249"
" sc_135)"
" ids_250"
" ctx_132)))"
" fold-var_252))))"
"(values"
" fold-var_253)))))"
"(if(if '#t '#t '#f)"
"(for-loop_245"
" fold-var_251"
"(unsafe-cdr lst_247)"
"(unsafe-cdr lst_248))"
" fold-var_251))"
" fold-var_246))"
" fold-var_246))))"
" for-loop_245)"
" null"
" lst_243"
" lst_244))))))"
"(let-values(((rec-val-env_145)"
"(let-values(((lst_255) val-keyss_142)"
"((lst_256) val-idss_139))"
"(begin"
"(if(list? lst_255)"
"(void)"
"(let-values()(in-list lst_255)))"
"(if(list? lst_256)"
"(void)"
"(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(env_258 lst_259 lst_260)"
"(if(if(pair? lst_259)"
"(pair? lst_260)"
" '#f)"
"(let-values(((keys_261)"
"(unsafe-car"
" lst_259))"
"((ids_262)"
"(unsafe-car"
" lst_260)))"
"(if(if '#t '#t '#f)"
"(let-values(((env_263)"
"(let-values(((env_264)"
" env_258))"
"(if '#t"
"(let-values(((lst_265)"
" keys_261)"
"((lst_266)"
" ids_262))"
"(begin"
"(if(list?"
" lst_265)"
"(void)"
"(let-values()"
"(in-list"
" lst_265)))"
"(if(list?"
" lst_266)"
"(void)"
"(let-values()"
"(in-list"
" lst_266)))"
"((letrec-values(((for-loop_267)"
"(lambda(env_268"
" lst_269"
" lst_270)"
"(if(if(pair?"
" lst_269)"
"(pair?"
" lst_270)"
" '#f)"
"(let-values(((key_271)"
"(unsafe-car"
" lst_269))"
"((id_272)"
"(unsafe-car"
" lst_270)))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((env_273)"
"(let-values(((env_274)"
" env_268))"
"(let-values(((env_275)"
"(let-values()"
"(env-extend"
" env_274"
" key_271"
"(local-variable1.1"
" id_272)))))"
"(values"
" env_275)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_267"
" env_273"
"(unsafe-cdr"
" lst_269)"
"(unsafe-cdr"
" lst_270))"
" env_273))"
" env_268))"
" env_268))))"
" for-loop_267)"
" env_264"
" lst_265"
" lst_266)))"
" env_264))))"
"(if(if '#t '#t '#f)"
"(for-loop_257"
" env_263"
"(unsafe-cdr lst_259)"
"(unsafe-cdr lst_260))"
" env_263))"
" env_258))"
" env_258))))"
" for-loop_257)"
"(expand-context-env ctx_132)"
" lst_255"
" lst_256)))))"
"(let-values(((rec-env_146)"
"(let-values(((lst_276) trans-keyss_141)"
"((lst_277) trans-valss_144)"
"((lst_278) trans-idss_138))"
"(begin"
"(if(list? lst_276)"
"(void)"
"(let-values()(in-list lst_276)))"
"(if(list? lst_277)"
"(void)"
"(let-values()(in-list lst_277)))"
"(if(list? lst_278)"
"(void)"
"(let-values()(in-list lst_278)))"
"((letrec-values(((for-loop_279)"
"(lambda(env_280"
" lst_281"
" lst_282"
" lst_283)"
"(if(if(pair? lst_281)"
"(if(pair? lst_282)"
"(pair? lst_283)"
" '#f)"
" '#f)"
"(let-values(((keys_284)"
"(unsafe-car"
" lst_281))"
"((vals_285)"
"(unsafe-car"
" lst_282))"
"((ids_286)"
"(unsafe-car"
" lst_283)))"
"(if(if '#t"
"(if '#t '#t '#f)"
" '#f)"
"(let-values(((env_287)"
"(let-values(((env_288)"
" env_280))"
"(let-values(((env_289)"
"(let-values()"
"(let-values(((lst_290)"
" keys_284)"
"((lst_291)"
" vals_285)"
"((lst_292)"
" ids_286))"
"(begin"
"(if(list?"
" lst_290)"
"(void)"
"(let-values()"
"(in-list"
" lst_290)))"
"(if(list?"
" lst_291)"
"(void)"
"(let-values()"
"(in-list"
" lst_291)))"
"(if(list?"
" lst_292)"
"(void)"
"(let-values()"
"(in-list"
" lst_292)))"
"((letrec-values(((for-loop_293)"
"(lambda(env_294"
" lst_295"
" lst_296"
" lst_297)"
"(if(if(pair?"
" lst_295)"
"(if(pair?"
" lst_296)"
"(pair?"
" lst_297)"
" '#f)"
" '#f)"
"(let-values(((key_298)"
"(unsafe-car"
" lst_295))"
"((val_299)"
"(unsafe-car"
" lst_296))"
"((id_300)"
"(unsafe-car"
" lst_297)))"
"(if(if '#t"
"(if '#t"
" '#t"
" '#f)"
" '#f)"
"(let-values(((env_301)"
"(let-values(((env_302)"
" env_294))"
"(let-values(((env_303)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_299"
" id_300"
" phase_136)"
"(env-extend"
" env_302"
" key_298"
" val_299)))))"
"(values"
" env_303)))))"
"(if(if '#t"
"(if '#t"
" '#t"
" '#f)"
" '#f)"
"(for-loop_293"
" env_301"
"(unsafe-cdr"
" lst_295)"
"(unsafe-cdr"
" lst_296)"
"(unsafe-cdr"
" lst_297))"
" env_301))"
" env_294))"
" env_294))))"
" for-loop_293)"
" env_288"
" lst_290"
" lst_291"
" lst_292))))))"
"(values"
" env_289)))))"
"(if(if '#t"
"(if '#t '#t '#f)"
" '#f)"
"(for-loop_279"
" env_287"
"(unsafe-cdr"
" lst_281)"
"(unsafe-cdr"
" lst_282)"
"(unsafe-cdr"
" lst_283))"
" env_287))"
" env_280))"
" env_280))))"
" for-loop_279)"
" rec-val-env_145"
" lst_276"
" lst_277"
" lst_278)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_127"
"(let-values()"
"(let-values(((obs_304)"
"(expand-context-observer"
" ctx_132)))"
"(if obs_304"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_304"
" 'exit-bind))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_147)(as-expression-context ctx_132)))"
"(let-values(((orig-rrs_148)"
"(expand-context-reference-records"
" expr-ctx_147)))"
"(let-values(((rec-ctx_149)"
"(let-values(((the-struct_305) expr-ctx_147))"
"(if(expand-context? the-struct_305)"
"(let-values(((env65_306) rec-env_146)"
"((scopes66_307)"
"(cons"
" sc_135"
"(expand-context-scopes"
" ctx_132)))"
"((reference-records67_308)"
"(if split-by-reference?_129"
"(cons"
" frame-id_137"
" orig-rrs_148)"
" orig-rrs_148))"
"((all-scopes-stx68_309)"
"(add-scope"
"(root-expand-context-all-scopes-stx"
" ctx_132)"
" sc_135)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_305)"
"(root-expand-context-post-expansion-scope"
" the-struct_305)"
"(root-expand-context-top-level-bind-scope"
" the-struct_305)"
" all-scopes-stx68_309"
"(root-expand-context-use-site-scopes"
" the-struct_305)"
"(root-expand-context-defined-syms"
" the-struct_305)"
"(root-expand-context-frame-id"
" the-struct_305)"
"(root-expand-context-counter"
" the-struct_305)"
"(root-expand-context-lift-key"
" the-struct_305)"
"(expand-context-context the-struct_305)"
"(expand-context-phase the-struct_305)"
"(expand-context-namespace"
" the-struct_305)"
" env65_306"
"(expand-context-post-expansion-scope-action"
" the-struct_305)"
" scopes66_307"
"(expand-context-def-ctx-scopes"
" the-struct_305)"
" reference-records67_308"
"(expand-context-only-immediate?"
" the-struct_305)"
"(expand-context-just-once?"
" the-struct_305)"
"(expand-context-module-begin-k"
" the-struct_305)"
"(expand-context-need-eventually-defined"
" the-struct_305)"
"(expand-context-allow-unbound?"
" the-struct_305)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_305)"
"(expand-context-stops the-struct_305)"
"(expand-context-current-introduction-scopes"
" the-struct_305)"
"(expand-context-declared-submodule-names"
" the-struct_305)"
"(expand-context-lifts the-struct_305)"
"(expand-context-lift-envs"
" the-struct_305)"
"(expand-context-module-lifts"
" the-struct_305)"
"(expand-context-require-lifts"
" the-struct_305)"
"(expand-context-to-module-lifts"
" the-struct_305)"
"(expand-context-requires+provides"
" the-struct_305)"
"(expand-context-name the-struct_305)"
"(expand-context-observer"
" the-struct_305)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_305)))))"
"(let-values(((letrec-values-id_150)"
"(if syntaxes?_127"
"(datum->syntax$2"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_136)"
" 'letrec-values)"
"(m_134 'let-values))))"
"(let-values(((get-body_151)"
"(lambda(track?_310)"
"(let-values((()"
"(begin"
"(let-values(((obs_313)"
"(expand-context-observer"
" ctx_132)))"
"(if obs_313"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_313"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_311)"
"(let-values(((the-struct_314)"
" rec-ctx_149))"
"(if(expand-context?"
" the-struct_314)"
"(let-values(((reference-records69_315)"
" orig-rrs_148))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_314)"
"(root-expand-context-post-expansion-scope"
" the-struct_314)"
"(root-expand-context-top-level-bind-scope"
" the-struct_314)"
"(root-expand-context-all-scopes-stx"
" the-struct_314)"
"(root-expand-context-use-site-scopes"
" the-struct_314)"
"(root-expand-context-defined-syms"
" the-struct_314)"
"(root-expand-context-frame-id"
" the-struct_314)"
"(root-expand-context-counter"
" the-struct_314)"
"(root-expand-context-lift-key"
" the-struct_314)"
"(expand-context-context"
" the-struct_314)"
"(expand-context-phase"
" the-struct_314)"
"(expand-context-namespace"
" the-struct_314)"
"(expand-context-env"
" the-struct_314)"
"(expand-context-post-expansion-scope-action"
" the-struct_314)"
"(expand-context-scopes"
" the-struct_314)"
"(expand-context-def-ctx-scopes"
" the-struct_314)"
" reference-records69_315"
"(expand-context-only-immediate?"
" the-struct_314)"
"(expand-context-just-once?"
" the-struct_314)"
"(expand-context-module-begin-k"
" the-struct_314)"
"(expand-context-need-eventually-defined"
" the-struct_314)"
"(expand-context-allow-unbound?"
" the-struct_314)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_314)"
"(expand-context-stops"
" the-struct_314)"
"(expand-context-current-introduction-scopes"
" the-struct_314)"
"(expand-context-declared-submodule-names"
" the-struct_314)"
"(expand-context-lifts"
" the-struct_314)"
"(expand-context-lift-envs"
" the-struct_314)"
"(expand-context-module-lifts"
" the-struct_314)"
"(expand-context-require-lifts"
" the-struct_314)"
"(expand-context-to-module-lifts"
" the-struct_314)"
"(expand-context-requires+provides"
" the-struct_314)"
"(expand-context-name"
" the-struct_314)"
"(expand-context-observer"
" the-struct_314)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_314)))))"
"(let-values(((exp-body_312)"
"(let-values(((...nder/expand/expr.rkt:209:22_316)"
" expand-body30.1)"
"((bodys70_317)"
" bodys_143)"
"((temp71_318)"
"(let-values(((...nder/expand/expr.rkt:209:41_321)"
" as-tail-context14.1)"
"((body-ctx74_322)"
" body-ctx_311)"
"((ctx75_323)"
" ctx_132))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx75_323"
" body-ctx74_322)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:209:41_321"
" keyword-procedure-extract"
" '(#:wrt)"
" '3)"
" '(#:wrt)"
"(list"
" ctx75_323)"
" body-ctx74_322))))"
"((s72_319)"
" s_131)"
"((disarmed-s73_320)"
" disarmed-s_133))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-body30.1))"
"(expand-body28.1"
" disarmed-s73_320"
" s72_319"
" '#f"
" '#f"
" '#f"
" '#f"
" bodys70_317"
" temp71_318)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:209:22_316"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source)"
" '4)"
" '(#:disarmed-source"
" #:source)"
"(list"
" disarmed-s73_320"
" s72_319)"
" bodys70_317"
" temp71_318)))))"
"(if track?_310"
"(let-values(((result-s_324)"
"(syntax-track-origin$1"
" exp-body_312"
" s_131)))"
"(begin"
"(let-values(((obs_325)"
"(expand-context-observer"
" ctx_132)))"
"(if obs_325"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_325"
" 'tag"
" result-s_324))"
"(void)))"
"(void)))"
" result-s_324))"
" exp-body_312)))))))"
"(let-values(((result-s_152)"
"(if(not split-by-reference?_129)"
"(let-values()"
"(let-values(((s76_326) s_131)"
"((disarmed-s77_327)"
" disarmed-s_133)"
"((temp78_328)"
"(list"
" letrec-values-id_150"
"(alt-reverse"
"(let-values(((lst_329)"
" val-idss_139)"
"((lst_330)"
"(m_134"
" 'val-rhs)))"
"(begin"
"(if(list?"
" lst_329)"
"(void)"
"(let-values()"
"(in-list"
" lst_329)))"
"(if(list?"
" lst_330)"
"(void)"
"(let-values()"
"(in-list"
" lst_330)))"
"((letrec-values(((for-loop_331)"
"(lambda(fold-var_332"
" lst_333"
" lst_334)"
"(if(if(pair?"
" lst_333)"
"(pair?"
" lst_334)"
" '#f)"
"(let-values(((ids_335)"
"(unsafe-car"
" lst_333))"
"((rhs_336)"
"(unsafe-car"
" lst_334)))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((fold-var_337)"
"(let-values(((fold-var_338)"
" fold-var_332))"
"(let-values(((fold-var_339)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_340)"
"(expand-context-observer"
" ctx_132)))"
"(if obs_340"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_340"
" 'next))"
"(void)))"
"(void)))"
"(list"
" ids_335"
"(if rec?_128"
"(let-values(((temp79_341)"
"(add-scope"
" rhs_336"
" sc_135))"
"((temp80_342)"
"(as-named-context"
" rec-ctx_149"
" ids_335)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" temp79_341"
" temp80_342)"
"(expand7.1"
" temp79_341"
" temp80_342)))"
"(let-values(((rhs81_343)"
" rhs_336)"
"((temp82_344)"
"(as-named-context"
" expr-ctx_147"
" ids_335)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" rhs81_343"
" temp82_344)"
"(expand7.1"
" rhs81_343"
" temp82_344)))))))"
" fold-var_338))))"
"(values"
" fold-var_339)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_331"
" fold-var_337"
"(unsafe-cdr"
" lst_333)"
"(unsafe-cdr"
" lst_334))"
" fold-var_337))"
" fold-var_332))"
" fold-var_332))))"
" for-loop_331)"
" null"
" lst_329"
" lst_330))))"
"(get-body_151 '#f))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" s76_326"
" disarmed-s77_327"
" temp78_328)"
"(rebuild101.1"
" s76_326"
" disarmed-s77_327"
" temp78_328))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_346)"
"(expand-context-observer"
" ctx_132)))"
"(if obs_346"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_346"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_347)"
"(expand-context-observer"
" ctx_132)))"
"(if obs_347"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_347"
" 'letrec-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_345)"
"(alt-reverse"
"(let-values(((lst_348)"
"(m_134"
" 'val-rhs)))"
"(begin"
"(if(list?"
" lst_348)"
"(void)"
"(let-values()"
"(in-list"
" lst_348)))"
"((letrec-values(((for-loop_349)"
"(lambda(fold-var_350"
" lst_351)"
"(if(pair?"
" lst_351)"
"(let-values(((rhs_352)"
"(unsafe-car"
" lst_351)))"
"(if '#t"
"(let-values(((fold-var_353)"
"(let-values(((fold-var_354)"
" fold-var_350))"
"(let-values(((fold-var_355)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_352"
" sc_135))"
" fold-var_354))))"
"(values"
" fold-var_355)))))"
"(if '#t"
"(for-loop_349"
" fold-var_353"
"(unsafe-cdr"
" lst_351))"
" fold-var_353))"
" fold-var_350))"
" fold-var_350))))"
" for-loop_349)"
" null"
" lst_348))))))"
"(let-values(((...nder/expand/expr.rkt:236:7_356)"
" expand-and-split-bindings-by-reference69.1)"
"((val-idss83_357)"
" val-idss_139)"
"((val-keyss84_358)"
" val-keyss_142)"
"((val-rhss85_359)"
" val-rhss_345)"
"((temp86_360)"
"(alt-reverse"
"(let-values(((lst_368)"
" val-idss_139))"
"(begin"
"(if(list?"
" lst_368)"
"(void)"
"(let-values()"
"(in-list"
" lst_368)))"
"((letrec-values(((for-loop_369)"
"(lambda(fold-var_370"
" lst_371)"
"(if(pair?"
" lst_371)"
"(let-values(((rhs_372)"
"(unsafe-car"
" lst_371)))"
"(if '#t"
"(let-values(((fold-var_373)"
"(let-values(((fold-var_374)"
" fold-var_370))"
"(let-values(((fold-var_375)"
"(let-values()"
"(cons"
"(let-values()"
" '#f)"
" fold-var_374))))"
"(values"
" fold-var_375)))))"
"(if '#t"
"(for-loop_369"
" fold-var_373"
"(unsafe-cdr"
" lst_371))"
" fold-var_373))"
" fold-var_370))"
" fold-var_370))))"
" for-loop_369)"
" null"
" lst_368)))))"
"((temp87_361)"
" '#t)"
"((frame-id88_362)"
" frame-id_137)"
"((rec-ctx89_363)"
" rec-ctx_149)"
"((s90_364) s_131)"
"((disarmed-s91_365)"
" disarmed-s_133)"
"((get-body92_366)"
" get-body_151)"
"((temp93_367)"
" '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-and-split-bindings-by-reference69.1))"
"(expand-and-split-bindings-by-reference67.1"
" rec-ctx89_363"
" disarmed-s91_365"
" frame-id88_362"
" get-body92_366"
" s90_364"
" temp87_361"
" temp93_367"
" val-idss83_357"
" val-keyss84_358"
" val-rhss85_359"
" temp86_360)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:236:7_356"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" '6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" rec-ctx89_363"
" disarmed-s91_365"
" frame-id88_362"
" get-body92_366"
" s90_364"
" temp87_361"
" temp93_367)"
" val-idss83_357"
" val-keyss84_358"
" val-rhss85_359"
" temp86_360))))))))))"
"(attach-disappeared-transformer-bindings"
" result-s_152"
" trans-idss_138)))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack12.1$1)"
"(lambda(given-kws_376 given-args_377)"
"(let-values(((log-tag1_378)(car given-args_377))"
"((given-kws_379)(cdr given-kws_376))"
"((given-args_380)(cdr given-args_377)))"
"(let-values(((rec?8_381)(if(pair? given-kws_379)(eq? '#:rec?(car given-kws_379)) '#f)))"
"(let-values(((rec?3_382)(if rec?8_381(car given-args_380)(void)))"
"((given-kws_383)(if rec?8_381(cdr given-kws_379) given-kws_379))"
"((given-args_384)(if rec?8_381(cdr given-args_380) given-args_380)))"
"(let-values(((renames-log-tag10_385)"
"(if(pair? given-kws_383)(eq? '#:renames-log-tag(car given-kws_383)) '#f)))"
"(let-values(((renames-log-tag5_386)(if renames-log-tag10_385(car given-args_384)(void)))"
"((given-kws_387)(if renames-log-tag10_385(cdr given-kws_383) given-kws_383))"
"((given-args_388)(if renames-log-tag10_385(cdr given-args_384) given-args_384)))"
"(let-values(((split-by-reference?9_389)"
"(if(pair? given-kws_387)(eq? '#:split-by-reference?(car given-kws_387)) '#f)))"
"(let-values(((split-by-reference?4_390)(if split-by-reference?9_389(car given-args_388)(void)))"
"((given-kws_391)(if split-by-reference?9_389(cdr given-kws_387) given-kws_387))"
"((given-args_392)(if split-by-reference?9_389(cdr given-args_388) given-args_388)))"
"(let-values(((syntaxes?7_393)(pair? given-kws_391)))"
"(let-values(((syntaxes?2_394)(if syntaxes?7_393(car given-args_392)(void))))"
"(make-let-values-form11.1"
" log-tag1_378"
" rec?3_382"
" rec?8_381"
" renames-log-tag5_386"
" renames-log-tag10_385"
" split-by-reference?4_390"
" split-by-reference?9_389"
" syntaxes?2_394"
" syntaxes?7_393))))))))))))"
"(define-values"
"(make-let-values-form13.1)"
"(lifted/1.1$20"
"(lambda(given-kws_395 given-argc_396)"
"(if(= given-argc_396 '2)"
"(subsets? '(#:log-tag) given-kws_395 '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?))"
" '#f))"
"(case-lambda((given-kws_397 given-args_398)(unpack12.1$1 given-kws_397 given-args_398)))"
" '(#:log-tag)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((...nder/expand/expr.rkt:248:1_399) make-let-values-form13.1)((temp94_400) 'prim-let-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp94_400 '#f '#f '#f '#f '#f '#f '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:248:1_399"
" keyword-procedure-extract"
" '(#:log-tag)"
" '2)"
" '(#:log-tag)"
"(list temp94_400))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((...nder/expand/expr.rkt:252:1_401) make-let-values-form13.1)"
"((temp95_402) '#t)"
"((temp96_403) 'prim-letrec-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp96_403 temp95_402 '#t '#f '#f '#f '#f '#f '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:252:1_401"
" keyword-procedure-extract"
" '(#:log-tag #:rec?)"
" '2)"
" '(#:log-tag #:rec?)"
"(list temp96_403 temp95_402))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((...nder/expand/expr.rkt:256:1_404) make-let-values-form13.1)"
"((temp97_405) '#t)"
"((temp98_406) '#t)"
"((temp99_407) '#t)"
"((temp100_408) 'prim-letrec-syntaxes+values)"
"((temp101_409) 'letrec-syntaxes-renames))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp100_408 temp98_406 '#t temp101_409 '#t temp99_407 '#t temp97_405 '#t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:256:1_404"
" keyword-procedure-extract"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
" '2)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
"(list temp100_408 temp98_406 temp101_409 temp99_407 temp97_405))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_410 ctx_411)"
"(let-values((()"
"(begin"
"(let-values(((obs_414)(expand-context-observer ctx_411)))"
"(if obs_414"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_414 'prim-#%stratified))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_412)(syntax-disarm$1 s_410)))"
"(let-values(((m_413)(match-syntax disarmed-s_412 '(#%stratified-body body ...+))))"
"(let-values(((...nder/expand/expr.rkt:268:3_415) expand-body30.1)"
"((temp102_416)(m_413 'body))"
"((ctx103_417) ctx_411)"
"((temp104_418) '#t)"
"((temp105_419) '#t)"
"((s106_420) s_410)"
"((disarmed-s107_421) disarmed-s_412))"
"(if(variable-reference-constant?(#%variable-reference expand-body30.1))"
"(expand-body28.1 disarmed-s107_421 s106_420 temp104_418 '#t temp105_419 '#t temp102_416 ctx103_417)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:268:3_415"
" keyword-procedure-extract"
" '(#:disarmed-source #:source #:stratified? #:track?)"
" '4)"
" '(#:disarmed-source #:source #:stratified? #:track?)"
"(list disarmed-s107_421 s106_420 temp104_418 temp105_419)"
" temp102_416"
" ctx103_417)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_422 ctx_423)"
"(let-values((()"
"(begin"
"(let-values(((obs_428)(expand-context-observer ctx_423)))"
"(if obs_428"
"(let-values()(if '#t(let-values()(call-expand-observe obs_428 'prim-#%datum))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_424)(syntax-disarm$1 s_422)))"
"(let-values(((m_425)(match-syntax disarmed-s_424 '(#%datum . datum))))"
"(let-values(((datum_426)(m_425 'datum)))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_426)(keyword?(syntax-e$1 datum_426)) '#f)"
"(let-values()"
" (1/raise-syntax-error '#%datum '\"keyword misused as an expression\" '#f datum_426))"
"(void))"
"(values))))"
"(let-values(((phase_427)(expand-context-phase ctx_423)))"
"(let-values(((s108_429) s_422)"
"((disarmed-s109_430) disarmed-s_424)"
"((temp110_431)"
"(list"
"(datum->syntax$2(syntax-shift-phase-level$1 core-stx phase_427) 'quote)"
" datum_426)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s108_429 disarmed-s109_430 temp110_431)"
"(rebuild101.1 s108_429 disarmed-s109_430 temp110_431))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_432 ctx_433)"
"(let-values((()"
"(begin"
"(let-values(((obs_437)(expand-context-observer ctx_433)))"
"(if obs_437"
"(let-values()(if '#t(let-values()(call-expand-observe obs_437 'prim-#%app))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_434)(syntax-disarm$1 s_432)))"
"(let-values(((m_435)(match-syntax disarmed-s_434 '(#%app e ...))))"
"(let-values(((es_436)(m_435 'e)))"
"(if(null? es_436)"
"(let-values()"
"(let-values(((phase_438)(expand-context-phase ctx_433)))"
"(let-values(((s111_439) s_432)"
"((disarmed-s112_440) disarmed-s_434)"
"((temp113_441)"
"(list"
"(datum->syntax$2(syntax-shift-phase-level$1 core-stx phase_438) 'quote)"
" null)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s111_439 disarmed-s112_440 temp113_441)"
"(rebuild101.1 s111_439 disarmed-s112_440 temp113_441)))))"
"(let-values()"
"(let-values(((expr-ctx_442)(as-expression-context ctx_433)))"
"(let-values(((exp-es_443)"
"(alt-reverse"
"(let-values(((lst_445) es_436))"
"(begin"
"(if(list? lst_445)(void)(let-values()(in-list lst_445)))"
"((letrec-values(((for-loop_446)"
"(lambda(fold-var_447 lst_448)"
"(if(pair? lst_448)"
"(let-values(((e_449)(unsafe-car lst_448)))"
"(if '#t"
"(let-values(((fold-var_450)"
"(let-values(((fold-var_451)"
" fold-var_447))"
"(let-values(((fold-var_452)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((e117_453)"
" e_449)"
"((expr-ctx118_454)"
" expr-ctx_442))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" e117_453"
" expr-ctx118_454)"
"(expand7.1"
" e117_453"
" expr-ctx118_454))))"
" fold-var_451))))"
"(values fold-var_452)))))"
"(if '#t"
"(for-loop_446 fold-var_450(unsafe-cdr lst_448))"
" fold-var_450))"
" fold-var_447))"
" fold-var_447))))"
" for-loop_446)"
" null"
" lst_445))))))"
"(let-values(((prefixless_444)(cdr(syntax-e$1 disarmed-s_434))))"
"(let-values(((s114_455) s_432)"
"((disarmed-s115_456) disarmed-s_434)"
"((temp116_457)"
"(cons"
"(m_435 '#%app)"
"(if(syntax?$1 prefixless_444)"
"(let-values(((prefixless119_458) prefixless_444)"
"((prefixless120_459) prefixless_444)"
"((exp-es121_460) exp-es_443))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f prefixless119_458 prefixless120_459 exp-es121_460)"
"(rebuild101.1 prefixless119_458 prefixless120_459 exp-es121_460)))"
" exp-es_443))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s114_455 disarmed-s115_456 temp116_457)"
"(rebuild101.1 s114_455 disarmed-s115_456 temp116_457)))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_461 ctx_462)"
"(begin"
"(let-values(((obs_463)(expand-context-observer ctx_462)))"
"(if obs_463"
"(let-values()(if '#t(let-values()(call-expand-observe obs_463 'prim-quote))(void)))"
"(void)))"
"(match-syntax(syntax-disarm$1 s_461) ''datum)"
" s_461))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_464 ctx_465)"
"(let-values((()"
"(begin"
"(let-values(((obs_469)(expand-context-observer ctx_465)))"
"(if obs_469"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_469 'prim-quote-syntax))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_466)(syntax-disarm$1 s_464)))"
"(let-values(((m-local_467)(try-match-syntax disarmed-s_466 '(quote-syntax datum #:local))))"
"(let-values(((m_468)"
"(let-values(((or-part_470) m-local_467))"
"(if or-part_470 or-part_470(match-syntax disarmed-s_466 '(quote-syntax datum))))))"
"(if m-local_467"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_465))"
"(values))))"
"(let-values(((m-kw_471)(try-match-syntax disarmed-s_466 '(_ _ kw))))"
"(let-values(((s122_472) s_464)"
"((disarmed-s123_473) disarmed-s_466)"
"((temp124_474)(list(m_468 'quote-syntax)(m_468 'datum)(m-kw_471 'kw))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s122_472 disarmed-s123_473 temp124_474)"
"(rebuild101.1 s122_472 disarmed-s123_473 temp124_474))))))"
"(let-values()"
"(let-values(((s125_475) s_464)"
"((disarmed-s126_476) disarmed-s_466)"
"((temp127_477)"
"(list"
"(m_468 'quote-syntax)"
"(remove-scopes(m_468 'datum)(expand-context-scopes ctx_465)))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s125_475 disarmed-s126_476 temp127_477)"
"(rebuild101.1 s125_475 disarmed-s126_476 temp127_477))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_478 ctx_479)"
"(let-values((()"
"(begin"
"(let-values(((obs_484)(expand-context-observer ctx_479)))"
"(if obs_484"
"(let-values()(if '#t(let-values()(call-expand-observe obs_484 'prim-if))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_480)(syntax-disarm$1 s_478)))"
"(let-values(((m_481)(match-syntax disarmed-s_480 '(if tst thn els))))"
"(let-values(((expr-ctx_482)(as-expression-context ctx_479)))"
"(let-values(((tail-ctx_483)"
"(let-values(((...nder/expand/expr.rkt:354:20_485) as-tail-context14.1)"
"((expr-ctx131_486) expr-ctx_482)"
"((ctx132_487) ctx_479))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx132_487 expr-ctx131_486)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:354:20_485"
" keyword-procedure-extract"
" '(#:wrt)"
" '3)"
" '(#:wrt)"
"(list ctx132_487)"
" expr-ctx131_486)))))"
"(begin"
"(let-values(((obs_488)(expand-context-observer ctx_479)))"
"(if obs_488"
"(let-values()(if '#t(let-values()(call-expand-observe obs_488 'next-group))(void)))"
"(void)))"
"(let-values(((s128_489) s_478)"
"((disarmed-s129_490) disarmed-s_480)"
"((temp130_491)"
"(list"
"(m_481 'if)"
"(let-values(((temp133_492)(m_481 'tst))((expr-ctx134_493) expr-ctx_482))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp133_492 expr-ctx134_493)"
"(expand7.1 temp133_492 expr-ctx134_493)))"
"(begin"
"(let-values(((obs_494)(expand-context-observer ctx_479)))"
"(if obs_494"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_494 'next))(void)))"
"(void)))"
"(let-values(((temp135_495)(m_481 'thn))((tail-ctx136_496) tail-ctx_483))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp135_495 tail-ctx136_496)"
"(expand7.1 temp135_495 tail-ctx136_496))))"
"(begin"
"(let-values(((obs_497)(expand-context-observer ctx_479)))"
"(if obs_497"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_497 'next))(void)))"
"(void)))"
"(let-values(((temp137_498)(m_481 'els))((tail-ctx138_499) tail-ctx_483))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp137_498 tail-ctx138_499)"
"(expand7.1 temp137_498 tail-ctx138_499)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s128_489 disarmed-s129_490 temp130_491)"
"(rebuild101.1 s128_489 disarmed-s129_490 temp130_491))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_500 ctx_501)"
"(let-values((()"
"(begin"
"(let-values(((obs_505)(expand-context-observer ctx_501)))"
"(if obs_505"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_505 'prim-with-continuation-mark))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_502)(syntax-disarm$1 s_500)))"
"(let-values(((m_503)(match-syntax disarmed-s_502 '(with-continuation-mark key val body))))"
"(let-values(((expr-ctx_504)(as-expression-context ctx_501)))"
"(let-values(((s139_506) s_500)"
"((disarmed-s140_507) disarmed-s_502)"
"((temp141_508)"
"(list"
"(m_503 'with-continuation-mark)"
"(let-values(((temp142_509)(m_503 'key))((expr-ctx143_510) expr-ctx_504))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp142_509 expr-ctx143_510)"
"(expand7.1 temp142_509 expr-ctx143_510)))"
"(begin"
"(let-values(((obs_511)(expand-context-observer ctx_501)))"
"(if obs_511"
"(let-values()(if '#t(let-values()(call-expand-observe obs_511 'next))(void)))"
"(void)))"
"(let-values(((temp144_512)(m_503 'val))((expr-ctx145_513) expr-ctx_504))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp144_512 expr-ctx145_513)"
"(expand7.1 temp144_512 expr-ctx145_513))))"
"(begin"
"(let-values(((obs_514)(expand-context-observer ctx_501)))"
"(if obs_514"
"(let-values()(if '#t(let-values()(call-expand-observe obs_514 'next))(void)))"
"(void)))"
"(let-values(((temp146_515)(m_503 'body))"
"((temp147_516)"
"(let-values(((...nder/expand/expr.rkt:383:30_517) as-tail-context14.1)"
"((expr-ctx148_518) expr-ctx_504)"
"((ctx149_519) ctx_501))"
"(if(variable-reference-constant?"
"(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx149_519 expr-ctx148_518)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:383:30_517"
" keyword-procedure-extract"
" '(#:wrt)"
" '3)"
" '(#:wrt)"
"(list ctx149_519)"
" expr-ctx148_518)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp146_515 temp147_516)"
"(expand7.1 temp146_515 temp147_516)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s139_506 disarmed-s140_507 temp141_508)"
"(rebuild101.1 s139_506 disarmed-s140_507 temp141_508))))))))))"
" print-values)"
"(define-values"
"(lifted/2.1)"
"(make-required"
" 'make-begin"
"(case-lambda((self_520 log-tag_521)(apply missing-kw self_520 log-tag_521 null)))"
" '#f"
" '#f))"
"(define-values"
"(make-begin17.1)"
"(lambda(list-start-index14_522 log-tag16_523)"
"(let-values(((log-tag_524) log-tag16_523))"
"(let-values(((list-start-index_525) list-start-index14_522))"
"(let-values()"
"(lambda(s_526 ctx_527)"
"(let-values((()"
"(begin"
"(let-values(((obs_534)(expand-context-observer ctx_527)))"
"(if obs_534"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_534 log-tag_524))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_528)(syntax-disarm$1 s_526)))"
"(let-values(((m_529)(match-syntax disarmed-s_528 '(begin e ...+))))"
"(let-values(((expr-ctx_530)(as-expression-context ctx_527)))"
"(let-values(((es_531)(m_529 'e)))"
"(let-values(((last-i_532)(sub1(length es_531))))"
"(let-values(((exp-es_533)"
"(alt-reverse"
"(let-values(((lst_535) es_531)((start_536) '0))"
"(begin"
"(if(list? lst_535)(void)(let-values()(in-list lst_535)))"
"(if(exact-nonnegative-integer? start_536)"
"(void)"
"(let-values()(in-naturals start_536)))"
"((letrec-values(((for-loop_537)"
"(lambda(fold-var_538 lst_539 pos_540)"
"(if(if(pair? lst_539) '#t '#f)"
"(let-values(((e_541)(unsafe-car lst_539))"
"((i_542) pos_540))"
"(if(if '#t '#t '#f)"
"(let-values(((fold-var_543)"
"(let-values(((fold-var_544)"
" fold-var_538))"
"(let-values(((fold-var_545)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(if(="
" i_542"
" list-start-index_525)"
"(let-values()"
"(let-values(((obs_546)"
"(expand-context-observer"
" ctx_527)))"
"(if obs_546"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_546"
" 'enter-list"
"(list-tail"
" es_531"
" i_542)))"
"(void)))"
"(void))))"
"(void))"
"(let-values(((obs_547)"
"(expand-context-observer"
" ctx_527)))"
"(if obs_547"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_547"
" 'next))"
"(void)))"
"(void)))"
"(let-values(((e153_548)"
" e_541)"
"((temp154_549)"
"(if(="
" i_542"
" last-i_532)"
"(let-values(((...nder/expand/expr.rkt:400:21_550)"
" as-tail-context14.1)"
"((expr-ctx155_551)"
" expr-ctx_530)"
"((ctx156_552)"
" ctx_527))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx156_552"
" expr-ctx155_551)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:400:21_550"
" keyword-procedure-extract"
" '(#:wrt)"
" '3)"
" '(#:wrt)"
"(list"
" ctx156_552)"
" expr-ctx155_551)))"
" expr-ctx_530)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" e153_548"
" temp154_549)"
"(expand7.1"
" e153_548"
" temp154_549)))))"
" fold-var_544))))"
"(values fold-var_545)))))"
"(if(if '#t '#t '#f)"
"(for-loop_537"
" fold-var_543"
"(unsafe-cdr lst_539)"
"(+ pos_540 '1))"
" fold-var_543))"
" fold-var_538))"
" fold-var_538))))"
" for-loop_537)"
" null"
" lst_535"
" start_536))))))"
"(begin"
"(if(if(= '1 list-start-index_525)(null?(cdr es_531)) '#f)"
"(let-values()"
"(let-values(((obs_553)(expand-context-observer ctx_527)))"
"(if obs_553"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_553 'enter-list(cdr es_531)))"
"(void)))"
"(void))))"
"(void))"
"(let-values(((obs_554)(expand-context-observer ctx_527)))"
"(if obs_554"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_554"
" 'exit-list"
"(list-tail exp-es_533 list-start-index_525)))"
"(void)))"
"(void)))"
"(let-values(((s150_555) s_526)"
"((disarmed-s151_556) disarmed-s_528)"
"((temp152_557)(cons(m_529 'begin) exp-es_533)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s150_555 disarmed-s151_556 temp152_557)"
"(rebuild101.1 s150_555 disarmed-s151_556 temp152_557)))))))))))))))))"
"(define-values"
"(unpack18.1$3)"
"(lambda(given-kws_558 given-args_559 log-tag16_560)"
"(let-values(((list-start-index14_561)(car given-args_559)))"
"(make-begin17.1 list-start-index14_561 log-tag16_560))))"
"(define-values"
"(make-begin19.1)"
"(lifted/2.1"
"(lambda(given-kws_562 given-argc_563)"
"(if(= given-argc_563 '3)"
"(let-values(((l2_564) given-kws_562))"
"(if(pair? l2_564)(if(eq?(car l2_564) '#:list-start-index)(null?(cdr l2_564)) '#f) '#f))"
" '#f))"
"(case-lambda((given-kws_565 given-args_566 log-tag_567)(unpack18.1$3 given-kws_565 given-args_566 log-tag_567)))"
" '(#:list-start-index)"
" '(#:list-start-index)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((...nder/expand/expr.rkt:412:1_568) make-begin19.1)((temp157_569) 'prim-begin0)((temp158_570) '0))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp158_570 temp157_569)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:412:1_568"
" keyword-procedure-extract"
" '(#:list-start-index)"
" '3)"
" '(#:list-start-index)"
"(list temp158_570)"
" temp157_569)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((...nder/expand/expr.rkt:416:1_571) make-begin19.1)((temp159_572) 'prim-begin0)((temp160_573) '1))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp160_573 temp159_572)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:416:1_571"
" keyword-procedure-extract"
" '(#:list-start-index)"
" '3)"
" '(#:list-start-index)"
"(list temp160_573)"
" temp159_572)))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_574 ctx_575)"
"(if(if(expand-context-need-eventually-defined ctx_575)(>=(expand-context-phase ctx_575) '1) '#f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_575)"
"(expand-context-phase ctx_575)"
"(lambda(l_576)(cons id_574 l_576))"
" null)"
" '#t))"
"(let-values() '#f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core165_577)"
"(lambda(s163_578 ctx164_579 implicit-omitted?161_580 implicit-omitted?162_581)"
"(let-values(((s_582) s163_578))"
"(let-values(((ctx_583) ctx164_579))"
"(let-values(((implicit-omitted?_584)"
"(if implicit-omitted?162_581 implicit-omitted?161_580 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_588)(expand-context-observer ctx_583)))"
"(if obs_588"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_588 'prim-#%top))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_585)(syntax-disarm$1 s_582)))"
"(let-values(((id_586)"
"(if implicit-omitted?_584"
"(let-values() s_582)"
"(let-values()"
"(let-values(((m_589)(match-syntax disarmed-s_585 '(#%top . id))))"
"(m_589 'id))))))"
"(let-values(((b_587)"
"(let-values(((...nder/expand/expr.rkt:444:13_590) resolve+shift15.1)"
"((id167_591) id_586)"
"((temp168_592)(expand-context-phase ctx_583))"
"((temp169_593) 'ambiguous))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp169_593"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" id167_591"
" temp168_592)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:444:13_590"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" '4)"
" '(#:ambiguous-value)"
"(list temp169_593)"
" id167_591"
" temp168_592)))))"
"(if(eq? b_587 'ambiguous)"
"(let-values()(raise-ambiguous-error id_586 ctx_583))"
"(if(if b_587"
"(if(module-binding? b_587)"
"(eq?"
"(module-binding-module b_587)"
"(namespace-mpi(expand-context-namespace ctx_583)))"
" '#f)"
" '#f)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_587))"
"(let-values() s_582)"
"(let-values() id_586)))"
"(if(register-eventual-variable!? id_586 ctx_583)"
"(let-values() id_586)"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_583))"
"(let-values()"
"(raise-unbound-syntax-error"
" '#f"
" '\"unbound identifier\""
" id_586"
" '#f"
" null"
"(syntax-debug-info-string id_586 ctx_583)))"
"(let-values()"
"(let-values(((tl-id_594)"
"(add-scope"
" id_586"
"(root-expand-context-top-level-bind-scope ctx_583))))"
"(if(let-values(((tl-id170_595) tl-id_594)"
"((temp171_596)(expand-context-phase ctx_583)))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve23.1))"
"(resolve21.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" tl-id170_595"
" temp171_596)"
"(resolve23.1 tl-id170_595 temp171_596)))"
"(let-values()"
"(let-values(((m_597)"
"(match-syntax disarmed-s_585 '(#%top . id))))"
"(let-values(((s172_598) s_582)"
"((disarmed-s173_599) disarmed-s_585)"
"((temp174_600)(cons(m_597 '#%top) tl-id_594)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" s172_598"
" disarmed-s173_599"
" temp174_600)"
"(rebuild101.1 s172_598 disarmed-s173_599 temp174_600)))))"
"(let-values() s_582))))))))))))))))))))"
"(case-lambda"
"((s_601 ctx_602)(core165_577 s_601 ctx_602 '#f '#f))"
"((s_603 ctx_604 implicit-omitted?161_605)(core165_577 s_603 ctx_604 implicit-omitted?161_605 '#t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_606 ctx_607)"
"(let-values((()"
"(begin"
"(let-values(((obs_611)(expand-context-observer ctx_607)))"
"(if obs_611"
"(let-values()(if '#t(let-values()(call-expand-observe obs_611 'prim-set!))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_608)(syntax-disarm$1 s_606)))"
"(let-values(((m_609)(match-syntax disarmed-s_608 '(set! id rhs))))"
"(let-values(((id_610)(m_609 'id)))"
"((letrec-values(((rename-loop_612)"
"(lambda(id_613 from-rename?_614)"
"(let-values(((binding_615)"
"(let-values(((...nder/expand/expr.rkt:486:21_618) resolve+shift15.1)"
"((id175_619) id_613)"
"((temp176_620)(expand-context-phase ctx_607))"
"((temp177_621) 'ambiguous)"
"((temp178_622) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp177_621"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" temp178_622"
" '#t"
" '#f"
" '#f"
" id175_619"
" temp176_620)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:486:21_618"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" '4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp177_621 temp178_622)"
" id175_619"
" temp176_620)))))"
"(let-values((()"
"(begin"
"(if(eq? binding_615 'ambiguous)"
"(let-values()(raise-ambiguous-error id_613 ctx_607))"
"(void))"
"(values))))"
"(let-values(((t_616 insp_617)"
"(if binding_615"
"(let-values(((binding179_623) binding_615)"
"((ctx180_624) ctx_607)"
"((s181_625) s_606))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" '#f"
" '#f"
" '#f"
" '#f"
" binding179_623"
" ctx180_624"
" s181_625)"
"(lookup17.1 binding179_623 ctx180_624 s181_625)))"
"(values '#f '#f))))"
"(begin"
"(let-values(((obs_626)(expand-context-observer ctx_607)))"
"(if obs_626"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_626 'resolve id_613))"
"(void)))"
"(void)))"
"(if(let-values(((or-part_627)(variable? t_616)))"
"(if or-part_627"
" or-part_627"
"(if(not binding_615)"
"(let-values(((or-part_628)"
"(register-eventual-variable!? id_613 ctx_607)))"
"(if or-part_628"
" or-part_628"
"(expand-context-allow-unbound? ctx_607)))"
" '#f)))"
"(let-values()"
"(begin"
"(let-values(((obs_629)(expand-context-observer ctx_607)))"
"(if obs_629"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_629 'next))"
"(void)))"
"(void)))"
"(let-values(((s182_630) s_606)"
"((disarmed-s183_631) disarmed-s_608)"
"((temp184_632)"
"(list"
"(m_609 'set!)"
"(let-values(((...nder/expand/expr.rkt:504:14_633)"
" substitute-variable8.1)"
"((id185_634) id_613)"
"((t186_635) t_616)"
"((temp187_636)"
"(free-id-set-empty?"
"(expand-context-stops ctx_607))))"
"(if(variable-reference-constant?"
"(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1"
" temp187_636"
" id185_634"
" t186_635)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:504:14_633"
" keyword-procedure-extract"
" '(#:no-stops?)"
" '4)"
" '(#:no-stops?)"
"(list temp187_636)"
" id185_634"
" t186_635)))"
"(let-values(((temp188_637)(m_609 'rhs))"
"((temp189_638)"
"(as-expression-context ctx_607)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp188_637 temp189_638)"
"(expand7.1 temp188_637 temp189_638))))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s182_630 disarmed-s183_631 temp184_632)"
"(rebuild101.1 s182_630 disarmed-s183_631 temp184_632)))))"
"(if(not binding_615)"
"(let-values()"
"(raise-unbound-syntax-error"
" '#f"
" '\"unbound identifier\""
" s_606"
" id_613"
" null"
"(syntax-debug-info-string id_613 ctx_607)))"
"(if(1/set!-transformer? t_616)"
"(let-values()"
"(if(not-in-this-expand-context? t_616 ctx_607)"
"(let-values()"
"(let-values(((temp190_639)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_606"
" disarmed-s_608"
" m_609"
" id_613"
" from-rename?_614)"
" t_616"
" ctx_607))"
"((ctx191_640) ctx_607))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp190_639 ctx191_640)"
"(expand7.1 temp190_639 ctx191_640))))"
"(let-values()"
"(let-values(((exp-s_641 re-ctx_642)"
"(apply-transformer"
" t_616"
" insp_617"
" s_606"
" id_613"
" ctx_607"
" binding_615)))"
"(if(expand-context-just-once? ctx_607)"
"(let-values() exp-s_641)"
"(let-values()"
"(let-values(((exp-s192_643) exp-s_641)"
"((re-ctx193_644) re-ctx_642))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f exp-s192_643 re-ctx193_644)"
"(expand7.1 exp-s192_643 re-ctx193_644)))))))))"
"(if(1/rename-transformer? t_616)"
"(let-values()"
"(if(not-in-this-expand-context? t_616 ctx_607)"
"(let-values()"
"(let-values(((temp194_645)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_606"
" disarmed-s_608"
" m_609"
" id_613"
" from-rename?_614"
" t_616)"
" t_616"
" ctx_607))"
"((ctx195_646) ctx_607))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp194_645 ctx195_646)"
"(expand7.1 temp194_645 ctx195_646))))"
"(let-values()"
"(rename-loop_612(1/rename-transformer-target t_616) '#t))))"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"cannot mutate syntax identifier\""
" s_606"
" id_613)))))))))))))"
" rename-loop_612)"
" id_610"
" '#f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename27_647)"
"(lambda(s22_648 disarmed-s23_649 m24_650 id25_651 from-rename?26_652 t20_653 t21_654)"
"(let-values(((s_655) s22_648))"
"(let-values(((disarmed-s_656) disarmed-s23_649))"
"(let-values(((m_657) m24_650))"
"(let-values(((id_658) id25_651))"
"(let-values(((from-rename?_659) from-rename?26_652))"
"(let-values(((t_660)(if t21_654 t20_653 '#f)))"
"(let-values()"
"(if(let-values(((or-part_661) t_660))(if or-part_661 or-part_661 from-rename?_659))"
"(let-values()"
"(let-values(((new-id_662)(if t_660(1/rename-transformer-target t_660) id_658)))"
"(syntax-rearm$1"
"(datum->syntax$2"
" disarmed-s_656"
"(list(m_657 'set!) new-id_662(m_657 'rhs))"
" disarmed-s_656"
" disarmed-s_656)"
" s_655)))"
"(let-values() s_655))))))))))))"
"(case-lambda"
"((s_663 disarmed-s_664 m_665 id_666 from-rename?_667)"
"(substitute-set!-rename27_647 s_663 disarmed-s_664 m_665 id_666 from-rename?_667 '#f '#f))"
"((s_668 disarmed-s_669 m_670 id_671 from-rename?_672 t20_673)"
"(substitute-set!-rename27_647 s_668 disarmed-s_669 m_670 id_671 from-rename?_672 t20_673 '#t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_674 ctx_675)"
"(let-values((()"
"(begin"
"(let-values(((obs_680)(expand-context-observer ctx_675)))"
"(if obs_680"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_680 'prim-#%variable-reference))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_676)(syntax-disarm$1 s_674)))"
"(let-values(((id-m_677)(try-match-syntax disarmed-s_676 '(#%variable-reference id))))"
"(let-values(((top-m_678)"
"(if(not id-m_677)"
"(try-match-syntax disarmed-s_676 '(#%variable-reference(#%top . id)))"
" '#f)))"
"(let-values(((empty-m_679)"
"(if(not id-m_677)"
"(if(not top-m_678)(match-syntax disarmed-s_676 '(#%variable-reference)) '#f)"
" '#f)))"
"(begin"
"(if(let-values(((or-part_681) id-m_677))(if or-part_681 or-part_681 top-m_678))"
"(let-values()"
"(let-values(((id_682)"
"((let-values(((or-part_684) id-m_677))(if or-part_684 or-part_684 top-m_678))"
" 'id)))"
"(let-values(((binding_683)"
"(let-values(((...nder/expand/expr.rkt:552:21_685) resolve+shift15.1)"
"((id196_686) id_682)"
"((temp197_687)(expand-context-phase ctx_675))"
"((temp198_688) 'ambiguous))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp198_688"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" id196_686"
" temp197_687)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:552:21_685"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" '4)"
" '(#:ambiguous-value)"
"(list temp198_688)"
" id196_686"
" temp197_687)))))"
"(begin"
"(if(eq? binding_683 'ambiguous)"
"(let-values()(raise-ambiguous-error id_682 ctx_675))"
"(void))"
"(if binding_683"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" '#f"
" '\"unbound identifier\""
" s_674"
" id_682"
" null"
"(syntax-debug-info-string id_682 ctx_675))))))))"
"(void))"
" s_674)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_689 ctx_690)"
"(let-values((()"
"(begin"
"(let-values(((obs_694)(expand-context-observer ctx_690)))"
"(if obs_694"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_694 'prim-#%expression))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_691)(syntax-disarm$1 s_689)))"
"(let-values(((m_692)(match-syntax disarmed-s_691 '(#%expression e))))"
"(let-values(((exp-e_693)"
"(let-values(((temp199_695)(m_692 'e))"
"((temp200_696)"
"(let-values(((...nder/expand/expr.rkt:567:32_697) as-tail-context14.1)"
"((temp201_698)(as-expression-context ctx_690))"
"((ctx202_699) ctx_690))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx202_699 temp201_698)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:567:32_697"
" keyword-procedure-extract"
" '(#:wrt)"
" '3)"
" '(#:wrt)"
"(list ctx202_699)"
" temp201_698)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp199_695 temp200_696)"
"(expand7.1 temp199_695 temp200_696)))))"
"(let-values(((tmp_700)"
"(if(not(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_690))"
"(expand-context-context ctx_690)"
" '#f)))"
"(if(equal? tmp_700 'expression)"
"(let-values()"
"(let-values(((result-s_701)(syntax-track-origin$1 exp-e_693 s_689)))"
"(begin"
"(let-values(((obs_702)(expand-context-observer ctx_690)))"
"(if obs_702"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_702 'tag result-s_701))(void)))"
"(void)))"
" result-s_701)))"
"(let-values()"
"(let-values(((s203_703) s_689)"
"((disarmed-s204_704) disarmed-s_691)"
"((temp205_705)(list(m_692 '#%expression) exp-e_693)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s203_703 disarmed-s204_704 temp205_705)"
"(rebuild101.1 s203_703 disarmed-s204_704 temp205_705)))))))))))))"
" print-values)"
"(call-with-values"
" (lambda () (add-core-form! 'unquote (lambda (s_706 ctx_707) (1/raise-syntax-error '#f '\"not in quasiquote\" s_706))))"
" print-values)"
"(call-with-values"
"(lambda()"
" (add-core-form! 'unquote-splicing (lambda (s_708 ctx_709) (1/raise-syntax-error '#f '\"not in quasiquote\" s_708))))"
" print-values)"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6 expand_7 rebuild_8)"
"(let-values(((ns_9)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_10)"
"(lambda(specs_11 at-phase_12 protected?_13 layer_14)"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_15) specs_11))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(fold-var_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((spec_19)(unsafe-car lst_18)))"
"(if '#t"
"(let-values(((fold-var_20)"
"(let-values(((fold-var_21) fold-var_17))"
"(let-values(((fold-var_22)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((fm_23)"
"(if(pair?"
"(syntax-e$1"
" spec_19))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" spec_19)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" spec_19)))"
" '#f)"
" '#f)))"
"(let-values(((check-nested_24)"
"(lambda(want-layer_25)"
"(if(member"
" want-layer_25"
"(member"
" layer_14"
" layers))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" provide-form-name"
"(format"
" '\"nested `~a' not allowed\""
" fm_23)"
" orig-s_2"
" spec_19))))))"
"(let-values(((tmp_26)"
" fm_23))"
"(let-values(((index_27)"
"(if(symbol?"
" tmp_26)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_26"
"(lambda()"
" '0))"
" '0)))"
"(if(unsafe-fx<"
" index_27"
" '6)"
"(if(unsafe-fx<"
" index_27"
" '2)"
"(if(unsafe-fx<"
" index_27"
" '1)"
"(let-values()"
"(if(identifier?"
" spec_19)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_19"
" orig-s_2"
"(syntax-e$1"
" spec_19)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))"
"(let-values()"
"(1/raise-syntax-error"
" provide-form-name"
" '\"bad syntax\""
" orig-s_2"
" spec_19))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'raw)"
"(values))))"
"(let-values(((m_28)"
"(match-syntax"
" spec_19"
" '(for-meta"
" phase-level"
" spec"
" ...))))"
"(let-values(((p_29)"
"(syntax-e$1"
"(m_28"
" 'phase-level))))"
"(begin"
"(if(phase?"
" p_29)"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" provide-form-name"
" '\"bad `for-meta' phase\""
" orig-s_2"
" spec_19)))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
"(m_28"
" 'for-meta)"
"(m_28"
" 'phase-level)"
"(loop_10"
"(m_28"
" 'spec)"
"(phase+"
" p_29"
" at-phase_12)"
" protected?_13"
" 'phaseless))))))))))"
"(if(unsafe-fx<"
" index_27"
" '3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'raw)"
"(values))))"
"(let-values(((m_30)"
"(match-syntax"
" spec_19"
" '(for-syntax"
" spec"
" ...))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
"(m_30"
" 'for-syntax)"
"(loop_10"
"(m_30"
" 'spec)"
"(phase+"
" '1"
" at-phase_12)"
" protected?_13"
" 'phaseless)))))))"
"(if(unsafe-fx<"
" index_27"
" '4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'raw)"
"(values))))"
"(let-values(((m_31)"
"(match-syntax"
" spec_19"
" '(for-label"
" spec"
" ...))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
"(m_31"
" 'for-label)"
"(loop_10"
"(m_31"
" 'spec)"
" '#f"
" protected?_13"
" 'phaseless)))))))"
"(if(unsafe-fx<"
" index_27"
" '5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_13"
"(let-values()"
"(1/raise-syntax-error"
" provide-form-name"
" '\"nested `protect' not allowed\""
" orig-s_2"
" spec_19))"
"(void))"
"(values))))"
"(let-values(((m_32)"
"(match-syntax"
" spec_19"
" '(protect"
" spec"
" ...))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
"(m_32"
" 'protect)"
"(loop_10"
"(m_32"
" 'spec)"
" at-phase_12"
" '#t"
" layer_14))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values(((m_33)"
"(match-syntax"
" spec_19"
" '(rename id:from"
" id:to))))"
"(begin"
"(parse-identifier!"
"(m_33"
" 'id:from)"
" orig-s_2"
"(syntax-e$1"
"(m_33"
" 'id:to))"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))))))"
"(if(unsafe-fx<"
" index_27"
" '9)"
"(if(unsafe-fx<"
" index_27"
" '7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values(((m_34)"
"(match-syntax"
" spec_19"
" '(struct"
" id:struct"
"(id:field"
" ...)))))"
"(begin"
"(parse-struct!"
"(m_34"
" 'id:struct)"
" orig-s_2"
"(m_34"
" 'id:field)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(if(unsafe-fx<"
" index_27"
" '8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values(((m_35)"
"(match-syntax"
" spec_19"
" '(all-from"
" mod-path))))"
"(begin"
"(parse-all-from"
"(m_35"
" 'mod-path)"
" orig-s_2"
" self_4"
" null"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values(((m_36)"
"(match-syntax"
" spec_19"
" '(all-from-except"
" mod-path"
" id"
" ...))))"
"(begin"
"(parse-all-from"
"(m_36"
" 'mod-path)"
" orig-s_2"
" self_4"
"(m_36"
" 'id)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))))"
"(if(unsafe-fx<"
" index_27"
" '11)"
"(if(unsafe-fx<"
" index_27"
" '10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values(((m_37)"
"(match-syntax"
" spec_19"
" '(all-defined))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" null"
" '#f"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values(((m_38)"
"(match-syntax"
" spec_19"
" '(all-defined-except"
" id"
" ...))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
"(m_38"
" 'id)"
" '#f"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19))))))"
"(if(unsafe-fx<"
" index_27"
" '12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values(((m_39)"
"(match-syntax"
" spec_19"
" '(prefix-all-defined"
" id:prefix))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" null"
"(syntax-e$1"
"(m_39"
" 'id:prefix))"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(if(unsafe-fx<"
" index_27"
" '13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_24"
" 'phaseless)"
"(values))))"
"(let-values(((m_40)"
"(match-syntax"
" spec_19"
" '(prefix-all-defined-except"
" id:prefix"
" id"
" ...))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
"(m_40"
" 'id)"
"(syntax-e$1"
"(m_40"
" 'id:prefix))"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(void"
"(match-syntax"
" spec_19"
" '(expand"
"(id"
" ."
" datum))))"
"(values))))"
"(let-values(((m_41)"
"(match-syntax"
" spec_19"
" '(expand"
" form))))"
"(let-values(((exp-spec_42)"
"(expand_7"
"(m_41"
" 'form)"
"(let-values(((the-struct_44)"
" ctx_6))"
"(if(expand-context?"
" the-struct_44)"
"(let-values(((only-immediate?1_45)"
" '#t))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_44)"
"(root-expand-context-post-expansion-scope"
" the-struct_44)"
"(root-expand-context-top-level-bind-scope"
" the-struct_44)"
"(root-expand-context-all-scopes-stx"
" the-struct_44)"
"(root-expand-context-use-site-scopes"
" the-struct_44)"
"(root-expand-context-defined-syms"
" the-struct_44)"
"(root-expand-context-frame-id"
" the-struct_44)"
"(root-expand-context-counter"
" the-struct_44)"
"(root-expand-context-lift-key"
" the-struct_44)"
"(expand-context-context"
" the-struct_44)"
"(expand-context-phase"
" the-struct_44)"
"(expand-context-namespace"
" the-struct_44)"
"(expand-context-env"
" the-struct_44)"
"(expand-context-post-expansion-scope-action"
" the-struct_44)"
"(expand-context-scopes"
" the-struct_44)"
"(expand-context-def-ctx-scopes"
" the-struct_44)"
"(expand-context-reference-records"
" the-struct_44)"
" only-immediate?1_45"
"(expand-context-just-once?"
" the-struct_44)"
"(expand-context-module-begin-k"
" the-struct_44)"
"(expand-context-need-eventually-defined"
" the-struct_44)"
"(expand-context-allow-unbound?"
" the-struct_44)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_44)"
"(expand-context-stops"
" the-struct_44)"
"(expand-context-current-introduction-scopes"
" the-struct_44)"
"(expand-context-declared-submodule-names"
" the-struct_44)"
"(expand-context-lifts"
" the-struct_44)"
"(expand-context-lift-envs"
" the-struct_44)"
"(expand-context-module-lifts"
" the-struct_44)"
"(expand-context-require-lifts"
" the-struct_44)"
"(expand-context-to-module-lifts"
" the-struct_44)"
"(expand-context-requires+provides"
" the-struct_44)"
"(expand-context-name"
" the-struct_44)"
"(expand-context-observer"
" the-struct_44)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_44))))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_42))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_42)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_42"
" at-phase_12))"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" provide-form-name"
" '\"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_19)))"
"(values))))"
"(let-values(((e-m_43)"
"(match-syntax"
" exp-spec_42"
" '(begin"
" spec"
" ...))))"
"(loop_10"
"(e-m_43"
" 'spec)"
" at-phase_12"
" protected?_13"
" layer_14)))))))))))))))))"
" fold-var_21))))"
"(values fold-var_22)))))"
"(if '#t"
"(for-loop_16 fold-var_20(unsafe-cdr lst_18))"
" fold-var_20))"
" fold-var_17))"
" fold-var_17))))"
" for-loop_16)"
" null"
" lst_15))))))))"
" loop_10)"
" specs_1"
" phase_5"
" '#f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_46 orig-s_47 sym_48 at-phase_49 ns_50 rp_51 protected?_52)"
"(let-values(((b_53)(resolve+shift/extra-inspector spec_46 at-phase_49 ns_50)))"
"(let-values((()"
"(begin"
"(if b_53"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" provide-form-name"
" '\"provided identifier is not defined or required\""
" orig-s_47"
" spec_46)))"
"(values))))"
"(let-values(((immed-b_54)"
"(let-values(((...r/expand/provide.rkt:153:18_55) resolve+shift15.1)"
"((spec2_56) spec_46)"
"((at-phase3_57) at-phase_49)"
"((temp4_58) '#t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f '#f '#f '#f '#f temp4_58 '#t '#f '#f spec2_56 at-phase3_57)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:153:18_55"
" keyword-procedure-extract"
" '(#:immediate?)"
" '4)"
" '(#:immediate?)"
"(list temp4_58)"
" spec2_56"
" at-phase3_57)))))"
"(add-provide! rp_51 sym_48 at-phase_49 b_53 immed-b_54 spec_46 orig-s_47 protected?_52))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_59 orig-s_60 fields_61 at-phase_62 ns_63 rp_64 protected?_65)"
"(let-values(((mk_66)"
"(lambda(fmt_68)"
"(let-values(((sym_69)(string->symbol(format fmt_68(syntax-e$1 id:struct_59)))))"
"(datum->syntax$2 id:struct_59 sym_69 id:struct_59)))))"
"(let-values(((mk2_67)"
"(lambda(fmt_70 field-id_71)"
"(let-values(((sym_72)"
"(string->symbol"
"(format fmt_70(syntax-e$1 id:struct_59)(syntax-e$1 field-id_71)))))"
"(datum->syntax$2 id:struct_59 sym_72 id:struct_59)))))"
"(begin"
"(let-values(((pos->vals_73 pos-next_74 init_75 pos-cont?_76 val-cont?_77 all-cont?_78)"
" (make-sequence '(fmt) (list '\"~a\" '\"make-~a\" '\"struct:~a\" '\"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_79)"
"(lambda(fold-var_80 pos_81)"
"(if(if pos-cont?_76(pos-cont?_76 pos_81) '#t)"
"(let-values(((fmt_82)(pos->vals_73 pos_81)))"
"(if(if val-cont?_77(val-cont?_77 fmt_82) '#t)"
"(let-values(((fold-var_83)"
"(let-values(((fold-var_84) fold-var_80))"
"(let-values(((fold-var_85)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_86)(mk_66 fmt_82)))"
"(parse-identifier!"
" id_86"
" orig-s_60"
"(syntax-e$1 id_86)"
" at-phase_62"
" ns_63"
" rp_64"
" protected?_65)))"
"(void)))))"
"(values fold-var_85)))))"
"(if(if all-cont?_78(all-cont?_78 pos_81 fmt_82) '#t)"
"(for-loop_79 fold-var_83(pos-next_74 pos_81))"
" fold-var_83))"
" fold-var_80))"
" fold-var_80))))"
" for-loop_79)"
"(void)"
" init_75)))"
"(let-values(((lst_87) fields_61))"
"(begin"
"(if(list? lst_87)(void)(let-values()(in-list lst_87)))"
"((letrec-values(((for-loop_88)"
"(lambda(fold-var_89 lst_90)"
"(if(pair? lst_90)"
"(let-values(((field_91)(unsafe-car lst_90)))"
"(if '#t"
"(let-values(((fold-var_92)"
"(let-values(((fold-var_93) fold-var_89))"
"(let-values(((fold-var_94)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_95)"
" (mk2_67 '\"~a-~a\" field_91)))"
"(let-values(((set-id_96)"
"(mk2_67"
" '\"set-~a-~a!\""
" field_91)))"
"(begin"
"(parse-identifier!"
" get-id_95"
" orig-s_60"
"(syntax-e$1 get-id_95)"
" at-phase_62"
" ns_63"
" rp_64"
" protected?_65)"
"(parse-identifier!"
" set-id_96"
" orig-s_60"
"(syntax-e$1 set-id_96)"
" at-phase_62"
" ns_63"
" rp_64"
" protected?_65)))))"
"(void)))))"
"(values fold-var_94)))))"
"(if '#t(for-loop_88 fold-var_92(unsafe-cdr lst_90)) fold-var_92))"
" fold-var_89))"
" fold-var_89))))"
" for-loop_88)"
"(void)"
" lst_87))))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_97 orig-s_98 self_99 except-ids_100 at-phase_101 ns_102 rp_103 protected?_104)"
"(let-values(((mod-path_105)(syntax->datum$1 mod-path-stx_97)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_105)"
"(void)"
"(let-values()"
" (1/raise-syntax-error provide-form-name '\"not a module path\" orig-s_98 mod-path-stx_97)))"
"(values))))"
"(let-values(((mpi_106)(1/module-path-index-join mod-path_105 self_99)))"
"(parse-all-from-module"
" mpi_106"
" '#f"
" orig-s_98"
" except-ids_100"
" '#f"
" at-phase_101"
" ns_102"
" rp_103"
" protected?_104))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_107 matching-stx_108 orig-s_109 except-ids_110 prefix-sym_111 at-phase_112 ns_113 rp_114 protected?_115)"
"(let-values(((requireds_116)(extract-module-requires rp_114 mpi_107 at-phase_112)))"
"(let-values(((phase-desc_117)"
"(lambda()"
"(if(zero-phase? at-phase_112)"
" (let-values () '\"\")"
"(if(label-phase? at-phase_112)"
" (let-values () '\" for-label\")"
" (let-values () (format '\" for phase ~a\" at-phase_112)))))))"
"(let-values((()"
"(begin"
"(if requireds_116"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" provide-form-name"
" (format '\"cannot provide from a module without a matching require~a\" (phase-desc_117))"
" orig-s_109"
" matching-stx_108)))"
"(values))))"
"(let-values(((add-prefix_118)"
"(lambda(sym_120)"
" (if prefix-sym_111 (string->symbol (format '\"~a~a\" prefix-sym_111 sym_120)) sym_120))))"
"(let-values(((found_119)(make-hasheq)))"
"(begin"
"(let-values(((lst_121) requireds_116))"
"(begin"
"(if(list? lst_121)(void)(let-values()(in-list lst_121)))"
"((letrec-values(((for-loop_122)"
"(lambda(fold-var_123 lst_124)"
"(if(pair? lst_124)"
"(let-values(((i_125)(unsafe-car lst_124)))"
"(if '#t"
"(let-values(((fold-var_126)"
"(let-values(((fold-var_127) fold-var_123))"
"(let-values(((fold-var_128)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_129)"
"(required-id i_125)))"
"(let-values(((phase_130)"
"(required-phase"
" i_125)))"
"(if(let-values(((or-part_131)"
"(if matching-stx_108"
"(not"
"(free-identifier=?$1"
" id_129"
"(datum->syntax$2"
" matching-stx_108"
"(syntax-e$1"
" id_129))"
" phase_130"
" phase_130))"
" '#f)))"
"(if or-part_131"
" or-part_131"
"(let-values(((lst_132)"
" except-ids_110))"
"(begin"
"(if(list? lst_132)"
"(void)"
"(let-values()"
"(in-list"
" lst_132)))"
"((letrec-values(((for-loop_133)"
"(lambda(result_134"
" lst_135)"
"(if(pair?"
" lst_135)"
"(let-values(((except-id_136)"
"(unsafe-car"
" lst_135)))"
"(if '#t"
"(let-values(((result_137)"
"(let-values(((result_138)"
" result_134))"
"(let-values(((result_139)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_129"
" except-id_136"
" phase_130"
" phase_130)"
"(hash-set!"
" found_119"
" except-id_136"
" '#t)"
" '#f)))))"
"(values"
" result_139)))))"
"(if(if '#t"
"(not"
"((lambda x_140"
" result_137)"
" except-id_136))"
" '#f)"
"(for-loop_133"
" result_137"
"(unsafe-cdr"
" lst_135))"
" result_137))"
" result_134))"
" result_134))))"
" for-loop_133)"
" '#f"
" lst_132)))))"
"(void)"
"(let-values()"
"(let-values(((b_141)"
"(resolve+shift/extra-inspector"
" id_129"
" phase_130"
" ns_113)))"
"(let-values(((immed-b_142)"
"(let-values(((...r/expand/provide.rkt:218:22_143)"
" resolve+shift15.1)"
"((id5_144)"
" id_129)"
"((phase6_145)"
" phase_130)"
"((temp7_146)"
" '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp7_146"
" '#t"
" '#f"
" '#f"
" id5_144"
" phase6_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:218:22_143"
" keyword-procedure-extract"
" '(#:immediate?)"
" '4)"
" '(#:immediate?)"
"(list"
" temp7_146)"
" id5_144"
" phase6_145)))))"
"(add-provide!"
" rp_114"
"(add-prefix_118"
"(syntax-e$1 id_129))"
" phase_130"
" b_141"
" immed-b_142"
" id_129"
" orig-s_109"
" protected?_115))))))))"
"(void)))))"
"(values fold-var_128)))))"
"(if '#t(for-loop_122 fold-var_126(unsafe-cdr lst_124)) fold-var_126))"
" fold-var_123))"
" fold-var_123))))"
" for-loop_122)"
"(void)"
" lst_121)))"
"(if(=(hash-count found_119)(length except-ids_110))"
"(void)"
"(let-values()"
"(let-values(((lst_147) except-ids_110))"
"(begin"
"(if(list? lst_147)(void)(let-values()(in-list lst_147)))"
"((letrec-values(((for-loop_148)"
"(lambda(fold-var_149 lst_150)"
"(if(pair? lst_150)"
"(let-values(((except-id_151)(unsafe-car lst_150)))"
"(if '#t"
"(let-values(((fold-var_152)"
"(let-values(((fold-var_153) fold-var_149))"
"(let-values(((fold-var_154)"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_155)"
"(hash-ref"
" found_119"
" except-id_151"
" '#f)))"
"(if or-part_155"
" or-part_155"
"(let-values(((lst_156)"
" requireds_116))"
"(begin"
"(if(list? lst_156)"
"(void)"
"(let-values()"
"(in-list"
" lst_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(result_158"
" lst_159)"
"(if(pair?"
" lst_159)"
"(let-values(((i_160)"
"(unsafe-car"
" lst_159)))"
"(if '#t"
"(let-values(((result_161)"
"(let-values(((result_162)"
" result_158))"
"(let-values(((result_163)"
"(let-values()"
"(let-values()"
"(let-values(((id_164)"
"(required-id"
" i_160)))"
"(let-values(((phase_165)"
"(required-phase"
" i_160)))"
"(free-identifier=?$1"
" id_164"
" except-id_151"
" phase_165"
" phase_165)))))))"
"(values"
" result_163)))))"
"(if(if '#t"
"(not"
"((lambda x_166"
" result_161)"
" i_160))"
" '#f)"
"(for-loop_157"
" result_161"
"(unsafe-cdr"
" lst_159))"
" result_161))"
" result_158))"
" result_158))))"
" for-loop_157)"
" '#f"
" lst_156)))))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" provide-form-name"
"(format"
"(if matching-stx_108"
" '\"excluded identifier was not defined or required in the module~a\""
" '\"excluded identifier was not required from the specified module~a\")"
"(phase-desc_117))"
" orig-s_109"
" except-id_151))))"
"(void)))))"
"(values fold-var_154)))))"
"(if '#t"
"(for-loop_148 fold-var_152(unsafe-cdr lst_150))"
" fold-var_152))"
" fold-var_149))"
" fold-var_149))))"
" for-loop_148)"
"(void)"
" lst_147)))))))))))))"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(let-values(((lst_3) bodys_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(fold-var_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((body_7)(unsafe-car lst_6)))"
"(if '#t"
"(let-values(((fold-var_8)"
"(let-values(((fold-var_9) fold-var_5))"
"(let-values(((fold-var_10)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_11)(core-form-sym body_7 '0)))"
"(if(equal? tmp_11 'begin)"
"(let-values()"
"(let-values(((m_12)"
"(match-syntax"
" body_7"
" '(begin e ...))))"
"(check-body(m_12 'e))))"
"(if(if(equal? tmp_11 '#%declare)"
" '#t"
"(if(equal? tmp_11 '#%provide)"
" '#t"
"(if(equal? tmp_11 '#%require)"
" '#t"
"(if(equal? tmp_11 'module)"
" '#t"
"(equal? tmp_11 'module*)))))"
"(let-values()(void))"
"(if(equal? tmp_11 'define-values)"
"(let-values()"
"(let-values(((m_13)"
"(match-syntax"
" body_7"
" '(define-values"
"(id ...)"
" rhs))))"
"(check-expr"
"(m_13 'rhs)"
"(length(m_13 'id))"
" body_7)))"
"(let-values()(disallow body_7)))))))"
"(void)))))"
"(values fold-var_10)))))"
"(if '#t(for-loop_4 fold-var_8(unsafe-cdr lst_6)) fold-var_8))"
" fold-var_5))"
" fold-var_5))))"
" for-loop_4)"
"(void)"
" lst_3)))))"
"(define-values"
"(check-expr)"
"(lambda(e_14 num-results_15 enclosing_16)"
"(let-values(((tmp_17)(core-form-sym e_14 '0)))"
"(if(if(equal? tmp_17 'lambda) '#t(equal? tmp_17 'case-lambda))"
"(let-values()(check-count '1 num-results_15 enclosing_16))"
"(if(equal? tmp_17 'quote)"
"(let-values()"
"(let-values(((m_18)(match-syntax e_14 ''datum)))"
"(begin(check-datum(m_18 'datum))(check-count '1 num-results_15 enclosing_16))))"
"(if(equal? tmp_17 '#%app)"
"(let-values()"
"(let-values(((m_19)(match-syntax e_14 '(#%app rator rand ...))))"
"(let-values(((rands_20)(m_19 'rand)))"
"(begin"
"(let-values(((lst_21) rands_20))"
"(begin"
"(if(list? lst_21)(void)(let-values()(in-list lst_21)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 lst_24)"
"(if(pair? lst_24)"
"(let-values(((rand_25)(unsafe-car lst_24)))"
"(if '#t"
"(let-values(((fold-var_26)"
"(let-values(((fold-var_27) fold-var_23))"
"(let-values(((fold-var_28)"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_25 '1 e_14))"
"(void)))))"
"(values fold-var_28)))))"
"(if '#t(for-loop_22 fold-var_26(unsafe-cdr lst_24)) fold-var_26))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
"(void)"
" lst_21)))"
"(let-values(((tmp_29)(cross-phase-primitive-name(m_19 'rator))))"
"(if(if(equal? tmp_29 'cons) '#t(equal? tmp_29 'list))"
"(let-values()(check-count '1 num-results_15 enclosing_16))"
"(if(equal? tmp_29 'make-struct-type)"
"(let-values()(check-count '5 num-results_15 enclosing_16))"
"(if(equal? tmp_29 'make-struct-type-property)"
"(let-values()(check-count '3 num-results_15 enclosing_16))"
"(if(equal? tmp_29 'gensym)"
"(let-values()"
"(if(let-values(((or-part_30)(= '0(length rands_20))))"
"(if or-part_30"
" or-part_30"
"(if(= '1(length rands_20))(quoted-string?(car rands_20)) '#f)))"
"(void)"
"(let-values()(disallow e_14))))"
"(if(equal? tmp_29 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= '1(length rands_20))(quoted-string?(car rands_20)) '#f)"
"(void)"
"(let-values()(disallow e_14))))"
"(let-values()(disallow e_14))))))))))))"
"(let-values()(void))))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_31 expected-num_32 enclosing_33)"
"(if(= is-num_31 expected-num_32)(void)(let-values()(disallow enclosing_33)))))"
"(define-values"
"(check-datum)"
"(lambda(datum_34)"
"(let-values(((d_35)(syntax-e$1 datum_34)))"
"(if(let-values(((or-part_36)(number? d_35)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(boolean? d_35)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(symbol? d_35)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(string? d_35)))(if or-part_39 or-part_39(bytes? d_35)))))))))"
"(let-values()(void))"
"(let-values()(disallow datum_34))))))"
"(define-values"
"(quoted-string?)"
"(lambda(e_40)"
"(if(eq? 'quote(core-form-sym e_40 '0))(string?(syntax-e$1((match-syntax e_40 ''datum) 'datum))) '#f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_41)"
"(let-values(((b_42)"
"(let-values(((id1_43) id_41)((temp2_44) '0))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f id1_43 temp2_44)"
"(resolve+shift15.1 id1_43 temp2_44)))))"
"(if(module-binding? b_42)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_42)))"
"(module-binding-sym b_42)"
" '#f)"
" '#f))))"
" (define-values (disallow) (lambda (body_45) (error '\"not allowed in a cross-phase persistent module:\" body_45)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_11 ctx_12)"
"(begin"
"(if(eq?(expand-context-context ctx_12) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_13)(expand-context-observer ctx_12)))"
"(if obs_13"
"(let-values()(if '#t(let-values()(call-expand-observe obs_13 'prim-module))(void)))"
"(void)))"
" (1/raise-syntax-error '#f '\"allowed only at the top level\" s_11))))"
"(let-values(((s195_14) s_11)((ctx196_15) ctx_12)((temp197_16) '#f))"
"(if(variable-reference-constant?(#%variable-reference expand-module14.1))"
"(expand-module12.1 '#f '#f '#f '#f '#f '#f '#f '#f s195_14 ctx196_15 temp197_16)"
"(expand-module14.1 s195_14 ctx196_15 temp197_16)))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_17 ctx_18)"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_18)))"
"(if obs_19(let-values()(if '#t(let-values()(call-expand-observe obs_19 'prim-module))(void)))(void)))"
" (1/raise-syntax-error '#f '\"illegal use (not in a module top-level)\" s_17)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_20 ctx_21)"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_21)))"
"(if obs_22"
"(let-values()(if '#t(let-values()(call-expand-observe obs_22 'prim-module-begin))(void)))"
"(void)))"
"(if(eq?(expand-context-context ctx_21) 'module-begin)"
"(void)"
" (let-values () (1/raise-syntax-error '#f '\"not in a module-definition context\" s_20)))"
"(if(expand-context-module-begin-k ctx_21)"
"(void)"
" (let-values () (1/raise-syntax-error '#f '\"not currently transforming a module\" s_20)))"
"((expand-context-module-begin-k ctx_21)"
" s_20"
"(let-values(((the-struct_23) ctx_21))"
"(if(expand-context? the-struct_23)"
"(let-values(((module-begin-k198_24) '#f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_23)"
"(root-expand-context-post-expansion-scope the-struct_23)"
"(root-expand-context-top-level-bind-scope the-struct_23)"
"(root-expand-context-all-scopes-stx the-struct_23)"
"(root-expand-context-use-site-scopes the-struct_23)"
"(root-expand-context-defined-syms the-struct_23)"
"(root-expand-context-frame-id the-struct_23)"
"(root-expand-context-counter the-struct_23)"
"(root-expand-context-lift-key the-struct_23)"
"(expand-context-context the-struct_23)"
"(expand-context-phase the-struct_23)"
"(expand-context-namespace the-struct_23)"
"(expand-context-env the-struct_23)"
"(expand-context-post-expansion-scope-action the-struct_23)"
"(expand-context-scopes the-struct_23)"
"(expand-context-def-ctx-scopes the-struct_23)"
"(expand-context-reference-records the-struct_23)"
"(expand-context-only-immediate? the-struct_23)"
"(expand-context-just-once? the-struct_23)"
" module-begin-k198_24"
"(expand-context-need-eventually-defined the-struct_23)"
"(expand-context-allow-unbound? the-struct_23)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_23)"
"(expand-context-stops the-struct_23)"
"(expand-context-current-introduction-scopes the-struct_23)"
"(expand-context-declared-submodule-names the-struct_23)"
"(expand-context-lifts the-struct_23)"
"(expand-context-lift-envs the-struct_23)"
"(expand-context-module-lifts the-struct_23)"
"(expand-context-require-lifts the-struct_23)"
"(expand-context-to-module-lifts the-struct_23)"
"(expand-context-requires+provides the-struct_23)"
"(expand-context-name the-struct_23)"
"(expand-context-observer the-struct_23)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_23))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_25 ctx_26)"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_26)))"
"(if obs_27"
"(let-values()(if '#t(let-values()(call-expand-observe obs_27 'prim-declare))(void)))"
"(void)))"
" (1/raise-syntax-error '#f '\"not allowed outside of a module body\" s_25)))))"
" print-values)"
"(define-values"
"(expand-module12.1)"
"(lambda(enclosing-is-cross-phase-persistent?2_28"
" enclosing-is-cross-phase-persistent?6_29"
" enclosing-requires+provides3_30"
" enclosing-requires+provides7_31"
" keep-enclosing-scope-at-phase1_32"
" keep-enclosing-scope-at-phase5_33"
" mpis-for-enclosing-reset4_34"
" mpis-for-enclosing-reset8_35"
" s9_36"
" init-ctx10_37"
" enclosing-self11_38)"
"(let-values(((s_39) s9_36))"
"(let-values(((init-ctx_40) init-ctx10_37))"
"(let-values(((enclosing-self_41) enclosing-self11_38))"
"(let-values(((keep-enclosing-scope-at-phase_42)"
"(if keep-enclosing-scope-at-phase5_33 keep-enclosing-scope-at-phase1_32 '#f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_43)"
"(if enclosing-is-cross-phase-persistent?6_29 enclosing-is-cross-phase-persistent?2_28 '#f)))"
"(let-values(((enclosing-r+p_44)"
"(if enclosing-requires+provides7_31 enclosing-requires+provides3_30 '#f)))"
"(let-values(((mpis-for-enclosing-reset_45)"
"(if mpis-for-enclosing-reset8_35 mpis-for-enclosing-reset4_34 '#f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_73)(expand-context-observer init-ctx_40)))"
"(if obs_73"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_73 'prim-module))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_46)(syntax-disarm$1 s_39)))"
"(let-values(((m_47)"
"(match-syntax disarmed-s_46 '(module id:module-name initial-require body ...))))"
"(let-values(((initial-require_48)(syntax->datum$1(m_47 'initial-require))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_74) keep-enclosing-scope-at-phase_42))"
"(if or-part_74 or-part_74(1/module-path? initial-require_48)))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"not a module path\""
" s_39"
"(m_47 'initial-require))))"
"(values))))"
"(let-values(((phase_49) '0))"
"(let-values(((module-name-sym_50)(syntax-e$1(m_47 'id:module-name))))"
"(let-values(((outside-scope_51)(new-scope 'module)))"
"(let-values(((inside-scope_52)(new-multi-scope module-name-sym_50)))"
"(let-values(((self_53)"
"(make-self-module-path-index module-name-sym_50 enclosing-self_41)))"
"(let-values(((enclosing-mod_54)"
"(if enclosing-self_41"
" (1/module-path-index-join '(submod \"..\") self_53)"
" '#f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_54 mpis-for-enclosing-reset_45 '#f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_45"
"(cons"
" enclosing-mod_54"
"(unbox mpis-for-enclosing-reset_45))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_55)"
"(make-apply-module-scopes"
" outside-scope_51"
" inside-scope_52"
" init-ctx_40"
" keep-enclosing-scope-at-phase_42"
" self_53"
" enclosing-self_41"
" enclosing-mod_54)))"
"(let-values(((initial-require-s_56)"
"(apply-module-scopes_55(m_47 'initial-require))))"
"(let-values(((root-ctx_57)"
"(let-values(((...er/expand/module.rkt:112:20_75)"
" make-root-expand-context12.1)"
"((temp199_76)"
"(if keep-enclosing-scope-at-phase_42"
"(root-expand-context-module-scopes"
" init-ctx_40)"
" null))"
"((outside-scope200_77) outside-scope_51)"
"((inside-scope201_78) inside-scope_52)"
"((initial-require-s202_79)"
" initial-require-s_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-root-expand-context12.1))"
"(make-root-expand-context10.1"
" initial-require-s202_79"
" '#t"
" temp199_76"
" '#t"
" outside-scope200_77"
" '#t"
" inside-scope201_78"
" '#t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:112:20_75"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
" '2)"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
"(list"
" initial-require-s202_79"
" temp199_76"
" outside-scope200_77"
" inside-scope201_78))))))"
"(let-values(((new-module-scopes_58)"
"(root-expand-context-module-scopes root-ctx_57)))"
"(let-values(((frame-id_59)"
"(root-expand-context-frame-id root-ctx_57)))"
"(let-values(((m-ns_60)"
"(let-values(((...er/expand/module.rkt:127:16_80)"
" make-module-namespace41.1)"
"((temp203_81)"
"(expand-context-namespace"
" init-ctx_40))"
"((self204_82) self_53)"
"((root-ctx205_83) root-ctx_57)"
"((temp206_84)"
"(if enclosing-self_41 '#t '#f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-namespace41.1))"
"(make-module-namespace39.1"
" temp206_84"
" self204_82"
" root-ctx205_83"
" temp203_81)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:127:16_80"
" keyword-procedure-extract"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
" '3)"
" '(#:for-submodule? #:mpi #:root-expand-context)"
"(list temp206_84 self204_82 root-ctx205_83)"
" temp203_81)))))"
"(let-values(((ctx_61)"
"(let-values(((the-struct_85)"
"(copy-root-expand-context"
" init-ctx_40"
" root-ctx_57)))"
"(if(expand-context? the-struct_85)"
"(let-values(((allow-unbound?207_86) '#f)"
"((namespace208_87) m-ns_60)"
"((post-expansion-scope-action209_88)"
" add-scope)"
"((phase210_89) phase_49)"
"((just-once?211_90) '#f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_85)"
"(root-expand-context-post-expansion-scope"
" the-struct_85)"
"(root-expand-context-top-level-bind-scope"
" the-struct_85)"
"(root-expand-context-all-scopes-stx"
" the-struct_85)"
"(root-expand-context-use-site-scopes"
" the-struct_85)"
"(root-expand-context-defined-syms"
" the-struct_85)"
"(root-expand-context-frame-id"
" the-struct_85)"
"(root-expand-context-counter the-struct_85)"
"(root-expand-context-lift-key"
" the-struct_85)"
"(expand-context-context the-struct_85)"
" phase210_89"
" namespace208_87"
"(expand-context-env the-struct_85)"
" post-expansion-scope-action209_88"
"(expand-context-scopes the-struct_85)"
"(expand-context-def-ctx-scopes"
" the-struct_85)"
"(expand-context-reference-records"
" the-struct_85)"
"(expand-context-only-immediate?"
" the-struct_85)"
" just-once?211_90"
"(expand-context-module-begin-k"
" the-struct_85)"
"(expand-context-need-eventually-defined"
" the-struct_85)"
" allow-unbound?207_86"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_85)"
"(expand-context-stops the-struct_85)"
"(expand-context-current-introduction-scopes"
" the-struct_85)"
"(expand-context-declared-submodule-names"
" the-struct_85)"
"(expand-context-lifts the-struct_85)"
"(expand-context-lift-envs the-struct_85)"
"(expand-context-module-lifts the-struct_85)"
"(expand-context-require-lifts"
" the-struct_85)"
"(expand-context-to-module-lifts"
" the-struct_85)"
"(expand-context-requires+provides"
" the-struct_85)"
"(expand-context-name the-struct_85)"
"(expand-context-observer the-struct_85)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_85)))))"
"(let-values(((bodys_62)"
"(map2 apply-module-scopes_55(m_47 'body))))"
"(let-values(((requires+provides_63)"
"(make-requires+provides self_53)))"
"(let-values(((defined-syms_64)"
"(root-expand-context-defined-syms"
" root-ctx_57)))"
"(let-values(((mpis-to-reset_65)(box null)))"
"(let-values(((initial-require!_66)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_42)"
"(let-values()"
"(perform-initial-require!"
" initial-require_48"
" self_53"
" initial-require-s_56"
" m-ns_60"
" requires+provides_63))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_63"
" enclosing-mod_54"
" keep-enclosing-scope-at-phase_42"
" enclosing-is-cross-phase-persistent?_43)"
"(let-values(((...er/expand/module.rkt:168:7_91)"
" add-enclosing-module-defined-and-required!31.1)"
"((requires+provides212_92)"
" requires+provides_63)"
"((enclosing-r+p213_93)"
" enclosing-r+p_44)"
"((enclosing-mod214_94)"
" enclosing-mod_54)"
"((keep-enclosing-scope-at-phase215_95)"
" keep-enclosing-scope-at-phase_42))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-enclosing-module-defined-and-required!31.1))"
"(add-enclosing-module-defined-and-required!29.1"
" enclosing-r+p213_93"
" requires+provides212_92"
" enclosing-mod214_94"
" keep-enclosing-scope-at-phase215_95)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:168:7_91"
" keyword-procedure-extract"
" '(#:enclosing-requires+provides)"
" '5)"
" '(#:enclosing-requires+provides)"
"(list enclosing-r+p213_93)"
" requires+provides212_92"
" enclosing-mod214_94"
" keep-enclosing-scope-at-phase215_95)))"
"(let-values(((m-ns216_96)"
" m-ns_60)"
"((enclosing-mod217_97)"
" enclosing-mod_54)"
"((keep-enclosing-scope-at-phase218_98)"
" keep-enclosing-scope-at-phase_42))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!97.1))"
"(namespace-module-visit!95.1"
" '#f"
" '#f"
" m-ns216_96"
" enclosing-mod217_97"
" keep-enclosing-scope-at-phase218_98)"
"(namespace-module-visit!97.1"
" m-ns216_96"
" enclosing-mod217_97"
" keep-enclosing-scope-at-phase218_98)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_99)"
"(expand-context-observer"
" init-ctx_40)))"
"(if obs_99"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_99"
" 'prepare-env))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_66)"
"(values))))"
"(let-values(((again?_67) '#f))"
"(let-values(((module-begin-k_68)"
"(lambda(mb-s_100 ctx_101)"
"(let-values((()"
"(begin"
"(if again?_67"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_63)"
"(initial-require!_66)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_67"
" '#t)"
"(values))))"
"(let-values(((added-s_102)"
"(add-scope"
" mb-s_100"
" inside-scope_52)))"
"(let-values((()"
"(begin"
"(let-values(((obs_116)"
"(expand-context-observer"
" ctx_101)))"
"(if obs_116"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_116"
" 'rename-one"
" added-s_102))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_103)"
"(syntax-disarm$1"
" added-s_102)))"
"(let-values(((mb-m_104)"
"(match-syntax"
" disarmed-mb-s_103"
" '(#%module-begin"
" body"
" ...))))"
"(let-values(((bodys_105)"
"(mb-m_104"
" 'body)))"
"(let-values(((need-eventually-defined_106)"
"(make-hasheqv)))"
"(let-values(((module-ends_107)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_108)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_109)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_110)"
"((letrec-values(((pass-1-and-2-loop_117)"
"(lambda(bodys_118"
" phase_119)"
"(let-values(((partial-body-ctx_120)"
"(let-values(((the-struct_123)"
" ctx_101))"
"(if(expand-context?"
" the-struct_123)"
"(let-values(((context229_124)"
" 'module)"
"((phase230_125)"
" phase_119)"
"((namespace231_126)"
"(namespace->namespace-at-phase"
" m-ns_60"
" phase_119))"
"((only-immediate?232_127)"
" '#t)"
"((need-eventually-defined233_128)"
" need-eventually-defined_106)"
"((declared-submodule-names234_129)"
" declared-submodule-names_109)"
"((lifts235_130)"
"(let-values(((temp239_134)"
"(make-wrap-as-definition"
" self_53"
" frame-id_59"
" inside-scope_52"
" initial-require-s_56"
" defined-syms_64"
" requires+provides_63)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-lift-context8.1))"
"(make-lift-context6.1"
" '#f"
" '#f"
" temp239_134)"
"(make-lift-context8.1"
" temp239_134))))"
"((module-lifts236_131)"
"(make-module-lift-context"
" phase_119"
" '#t))"
"((require-lifts237_132)"
"(make-require-lift-context"
" phase_119"
"(let-values(((...er/expand/module.rkt:241:63_135)"
" make-parse-lifted-require194.1)"
"((m-ns240_136)"
" m-ns_60)"
"((self241_137)"
" self_53)"
"((requires+provides242_138)"
" requires+provides_63)"
"((declared-submodule-names243_139)"
" declared-submodule-names_109))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-parse-lifted-require194.1))"
"(make-parse-lifted-require192.1"
" declared-submodule-names243_139"
" m-ns240_136"
" self241_137"
" requires+provides242_138)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:241:63_135"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" '5)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names243_139)"
" m-ns240_136"
" self241_137"
" requires+provides242_138)))))"
"((to-module-lifts238_133)"
"(let-values(((...er/expand/module.rkt:243:64_140)"
" make-to-module-lift-context28.1)"
"((phase244_141)"
" phase_119)"
"((module-ends245_142)"
" module-ends_107)"
"((temp246_143)"
" '#f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp246_143"
" module-ends245_142"
" phase244_141)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:243:64_140"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" '3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp246_143"
" module-ends245_142)"
" phase244_141)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_123)"
"(root-expand-context-post-expansion-scope"
" the-struct_123)"
"(root-expand-context-top-level-bind-scope"
" the-struct_123)"
"(root-expand-context-all-scopes-stx"
" the-struct_123)"
"(root-expand-context-use-site-scopes"
" the-struct_123)"
"(root-expand-context-defined-syms"
" the-struct_123)"
"(root-expand-context-frame-id"
" the-struct_123)"
"(root-expand-context-counter"
" the-struct_123)"
"(root-expand-context-lift-key"
" the-struct_123)"
" context229_124"
" phase230_125"
" namespace231_126"
"(expand-context-env"
" the-struct_123)"
"(expand-context-post-expansion-scope-action"
" the-struct_123)"
"(expand-context-scopes"
" the-struct_123)"
"(expand-context-def-ctx-scopes"
" the-struct_123)"
"(expand-context-reference-records"
" the-struct_123)"
" only-immediate?232_127"
"(expand-context-just-once?"
" the-struct_123)"
"(expand-context-module-begin-k"
" the-struct_123)"
" need-eventually-defined233_128"
"(expand-context-allow-unbound?"
" the-struct_123)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_123)"
"(expand-context-stops"
" the-struct_123)"
"(expand-context-current-introduction-scopes"
" the-struct_123)"
" declared-submodule-names234_129"
" lifts235_130"
"(expand-context-lift-envs"
" the-struct_123)"
" module-lifts236_131"
" require-lifts237_132"
" to-module-lifts238_133"
"(expand-context-requires+provides"
" the-struct_123)"
"(expand-context-name"
" the-struct_123)"
"(expand-context-observer"
" the-struct_123)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_123)))))"
"(let-values(((partially-expanded-bodys_121)"
"(let-values(((...er/expand/module.rkt:249:11_144)"
" partially-expand-bodys75.1)"
"((bodys247_145)"
" bodys_118)"
"((s248_146)"
" s_39)"
"((temp249_147)"
"(zero?"
" phase_119))"
"((phase250_148)"
" phase_119)"
"((partial-body-ctx251_149)"
" partial-body-ctx_120)"
"((m-ns252_150)"
" m-ns_60)"
"((self253_151)"
" self_53)"
"((frame-id254_152)"
" frame-id_59)"
"((requires+provides255_153)"
" requires+provides_63)"
"((need-eventually-defined256_154)"
" need-eventually-defined_106)"
"((initial-require-s257_155)"
" initial-require-s_56)"
"((defined-syms258_156)"
" defined-syms_64)"
"((declared-keywords259_157)"
" declared-keywords_108)"
"((declared-submodule-names260_158)"
" declared-submodule-names_109)"
"((mpis-to-reset261_159)"
" mpis-to-reset_65)"
"((pass-1-and-2-loop262_160)"
" pass-1-and-2-loop_117))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" partially-expand-bodys75.1))"
"(partially-expand-bodys73.1"
" initial-require-s257_155"
" partial-body-ctx251_149"
" declared-keywords259_157"
" declared-submodule-names260_158"
" defined-syms258_156"
" frame-id254_152"
" pass-1-and-2-loop262_160"
" mpis-to-reset261_159"
" m-ns252_150"
" need-eventually-defined256_154"
" s248_146"
" phase250_148"
" requires+provides255_153"
" self253_151"
" temp249_147"
" bodys247_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:249:11_144"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '3)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
"(list"
" initial-require-s257_155"
" partial-body-ctx251_149"
" declared-keywords259_157"
" declared-submodule-names260_158"
" defined-syms258_156"
" frame-id254_152"
" pass-1-and-2-loop262_160"
" mpis-to-reset261_159"
" m-ns252_150"
" need-eventually-defined256_154"
" s248_146"
" phase250_148"
" requires+provides255_153"
" self253_151"
" temp249_147)"
" bodys247_145)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_161)"
"(expand-context-observer"
" partial-body-ctx_120)))"
"(if obs_161"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_161"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_122)"
"(let-values(((the-struct_162)"
" partial-body-ctx_120))"
"(if(expand-context?"
" the-struct_162)"
"(let-values(((only-immediate?263_163)"
" '#f)"
"((frame-id264_164)"
" '#f)"
"((post-expansion-scope265_165)"
" '#f)"
"((to-module-lifts266_166)"
"(let-values(((...er/expand/module.rkt:275:56_167)"
" make-to-module-lift-context28.1)"
"((phase267_168)"
" phase_119)"
"((module-ends268_169)"
" module-ends_107)"
"((temp269_170)"
" '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp269_170"
" module-ends268_169"
" phase267_168)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:275:56_167"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" '3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp269_170"
" module-ends268_169)"
" phase267_168)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_162)"
" post-expansion-scope265_165"
"(root-expand-context-top-level-bind-scope"
" the-struct_162)"
"(root-expand-context-all-scopes-stx"
" the-struct_162)"
"(root-expand-context-use-site-scopes"
" the-struct_162)"
"(root-expand-context-defined-syms"
" the-struct_162)"
" frame-id264_164"
"(root-expand-context-counter"
" the-struct_162)"
"(root-expand-context-lift-key"
" the-struct_162)"
"(expand-context-context"
" the-struct_162)"
"(expand-context-phase"
" the-struct_162)"
"(expand-context-namespace"
" the-struct_162)"
"(expand-context-env"
" the-struct_162)"
"(expand-context-post-expansion-scope-action"
" the-struct_162)"
"(expand-context-scopes"
" the-struct_162)"
"(expand-context-def-ctx-scopes"
" the-struct_162)"
"(expand-context-reference-records"
" the-struct_162)"
" only-immediate?263_163"
"(expand-context-just-once?"
" the-struct_162)"
"(expand-context-module-begin-k"
" the-struct_162)"
"(expand-context-need-eventually-defined"
" the-struct_162)"
"(expand-context-allow-unbound?"
" the-struct_162)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_162)"
"(expand-context-stops"
" the-struct_162)"
"(expand-context-current-introduction-scopes"
" the-struct_162)"
"(expand-context-declared-submodule-names"
" the-struct_162)"
"(expand-context-lifts"
" the-struct_162)"
"(expand-context-lift-envs"
" the-struct_162)"
"(expand-context-module-lifts"
" the-struct_162)"
"(expand-context-require-lifts"
" the-struct_162)"
" to-module-lifts266_166"
"(expand-context-requires+provides"
" the-struct_162)"
"(expand-context-name"
" the-struct_162)"
"(expand-context-observer"
" the-struct_162)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_162)))))"
"(let-values(((...er/expand/module.rkt:279:9_171)"
" finish-expanding-body-expressons91.1)"
"((partially-expanded-bodys222_172)"
" partially-expanded-bodys_121)"
"((temp223_173)"
"(zero?"
" phase_119))"
"((phase224_174)"
" phase_119)"
"((body-ctx225_175)"
" body-ctx_122)"
"((self226_176)"
" self_53)"
"((declared-submodule-names227_177)"
" declared-submodule-names_109)"
"((mpis-to-reset228_178)"
" mpis-to-reset_65))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body-expressons91.1))"
"(finish-expanding-body-expressons89.1"
" body-ctx225_175"
" declared-submodule-names227_177"
" mpis-to-reset228_178"
" phase224_174"
" self226_176"
" temp223_173"
" partially-expanded-bodys222_172)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:279:9_171"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
" '3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
"(list"
" body-ctx225_175"
" declared-submodule-names227_177"
" mpis-to-reset228_178"
" phase224_174"
" self226_176"
" temp223_173)"
" partially-expanded-bodys222_172))))))))))"
" pass-1-and-2-loop_117)"
" bodys_105"
" phase_49)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_106"
" self_53)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_179)"
"(expand-context-observer"
" ctx_101)))"
"(if obs_179"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_179"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_111)"
"(let-values(((...er/expand/module.rkt:296:7_180)"
" resolve-provides109.1)"
"((expression-expanded-bodys270_181)"
" expression-expanded-bodys_110)"
"((s271_182)"
" s_39)"
"((requires+provides272_183)"
" requires+provides_63)"
"((declared-submodule-names273_184)"
" declared-submodule-names_109)"
"((m-ns274_185)"
" m-ns_60)"
"((phase275_186)"
" phase_49)"
"((self276_187)"
" self_53)"
"((ctx277_188)"
" ctx_101))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve-provides109.1))"
"(resolve-provides107.1"
" ctx277_188"
" declared-submodule-names273_184"
" m-ns274_185"
" s271_182"
" phase275_186"
" requires+provides272_183"
" self276_187"
" expression-expanded-bodys270_181)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:296:7_180"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx277_188"
" declared-submodule-names273_184"
" m-ns274_185"
" s271_182"
" phase275_186"
" requires+provides272_183"
" self276_187)"
" expression-expanded-bodys270_181)))))"
"(let-values(((is-cross-phase-persistent?_112)"
"(hash-ref"
" declared-keywords_108"
" '#:cross-phase-persistent"
" '#f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_112"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_63)"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"cannot be cross-phase persistent due to required modules\""
" s_39"
"(hash-ref"
" declared-keywords_108"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_111)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_189)"
"(expand-context-observer"
" ctx_101)))"
"(if obs_189"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_189"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((submod-ctx_113)"
"(let-values(((the-struct_190)"
" ctx_101))"
"(if(expand-context?"
" the-struct_190)"
"(let-values(((frame-id278_191)"
" '#f)"
"((post-expansion-scope279_192)"
" '#f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_190)"
" post-expansion-scope279_192"
"(root-expand-context-top-level-bind-scope"
" the-struct_190)"
"(root-expand-context-all-scopes-stx"
" the-struct_190)"
"(root-expand-context-use-site-scopes"
" the-struct_190)"
"(root-expand-context-defined-syms"
" the-struct_190)"
" frame-id278_191"
"(root-expand-context-counter"
" the-struct_190)"
"(root-expand-context-lift-key"
" the-struct_190)"
"(expand-context-context"
" the-struct_190)"
"(expand-context-phase"
" the-struct_190)"
"(expand-context-namespace"
" the-struct_190)"
"(expand-context-env"
" the-struct_190)"
"(expand-context-post-expansion-scope-action"
" the-struct_190)"
"(expand-context-scopes"
" the-struct_190)"
"(expand-context-def-ctx-scopes"
" the-struct_190)"
"(expand-context-reference-records"
" the-struct_190)"
"(expand-context-only-immediate?"
" the-struct_190)"
"(expand-context-just-once?"
" the-struct_190)"
"(expand-context-module-begin-k"
" the-struct_190)"
"(expand-context-need-eventually-defined"
" the-struct_190)"
"(expand-context-allow-unbound?"
" the-struct_190)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_190)"
"(expand-context-stops"
" the-struct_190)"
"(expand-context-current-introduction-scopes"
" the-struct_190)"
"(expand-context-declared-submodule-names"
" the-struct_190)"
"(expand-context-lifts"
" the-struct_190)"
"(expand-context-lift-envs"
" the-struct_190)"
"(expand-context-module-lifts"
" the-struct_190)"
"(expand-context-require-lifts"
" the-struct_190)"
"(expand-context-to-module-lifts"
" the-struct_190)"
"(expand-context-requires+provides"
" the-struct_190)"
"(expand-context-name"
" the-struct_190)"
"(expand-context-observer"
" the-struct_190)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_190)))))"
"(let-values(((declare-enclosing-module_114)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:324:14_193)"
" declare-module-for-expansion127.1)"
"((fully-expanded-bodys-except-post-submodules280_194)"
" fully-expanded-bodys-except-post-submodules_111)"
"((m281_195)"
" m_47)"
"((mb-m282_196)"
" mb-m_104)"
"((requires+provides283_197)"
" requires+provides_63)"
"((m-ns284_198)"
" m-ns_60)"
"((self285_199)"
" self_53)"
"((enclosing-self286_200)"
" enclosing-self_41)"
"((root-ctx287_201)"
" root-ctx_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module-for-expansion127.1))"
"(declare-module-for-expansion125.1"
" enclosing-self286_200"
" mb-m282_196"
" m281_195"
" m-ns284_198"
" requires+provides283_197"
" root-ctx287_201"
" self285_199"
" fully-expanded-bodys-except-post-submodules280_194)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:324:14_193"
" keyword-procedure-extract"
" '(#:enclosing"
" #:module-begin-match"
" #:module-match"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" '3)"
" '(#:enclosing"
" #:module-begin-match"
" #:module-match"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
"(list"
" enclosing-self286_200"
" mb-m282_196"
" m281_195"
" m-ns284_198"
" requires+provides283_197"
" root-ctx287_201"
" self285_199)"
" fully-expanded-bodys-except-post-submodules280_194)))))))"
"(let-values(((fully-expanded-bodys_115)"
"(if(stop-at-module*?"
" ctx_101)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_111)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:338:9_202)"
" expand-post-submodules149.1)"
"((fully-expanded-bodys-except-post-submodules288_203)"
" fully-expanded-bodys-except-post-submodules_111)"
"((declare-enclosing-module289_204)"
" declare-enclosing-module_114)"
"((s290_205)"
" s_39)"
"((phase291_206)"
" phase_49)"
"((self292_207)"
" self_53)"
"((requires+provides293_208)"
" requires+provides_63)"
"((is-cross-phase-persistent?294_209)"
" is-cross-phase-persistent?_112)"
"((mpis-to-reset295_210)"
" mpis-to-reset_65)"
"((declared-submodule-names296_211)"
" declared-submodule-names_109)"
"((ctx297_212)"
" ctx_101))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-post-submodules149.1))"
"(expand-post-submodules147.1"
" ctx297_212"
" declare-enclosing-module289_204"
" declared-submodule-names296_211"
" is-cross-phase-persistent?294_209"
" mpis-to-reset295_210"
" s290_205"
" phase291_206"
" requires+provides293_208"
" self292_207"
" fully-expanded-bodys-except-post-submodules288_203)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:338:9_202"
" keyword-procedure-extract"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '3)"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx297_212"
" declare-enclosing-module289_204"
" declared-submodule-names296_211"
" is-cross-phase-persistent?294_209"
" mpis-to-reset295_210"
" s290_205"
" phase291_206"
" requires+provides293_208"
" self292_207)"
" fully-expanded-bodys-except-post-submodules288_203)))))))"
"(let-values(((mb-s219_213)"
" mb-s_100)"
"((disarmed-mb-s220_214)"
" disarmed-mb-s_103)"
"((temp221_215)"
"(list*"
"(mb-m_104"
" '#%module-begin)"
" fully-expanded-bodys_115)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" mb-s219_213"
" disarmed-mb-s220_214"
" temp221_215)"
"(rebuild101.1"
" mb-s219_213"
" disarmed-mb-s220_214"
" temp221_215)))))))))))))))))))))))))))"
"(let-values(((mb-ctx_69)"
"(let-values(((the-struct_216)"
" ctx_61))"
"(if(expand-context?"
" the-struct_216)"
"(let-values(((context298_217)"
" 'module-begin)"
"((module-begin-k299_218)"
" module-begin-k_68))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_216)"
"(root-expand-context-post-expansion-scope"
" the-struct_216)"
"(root-expand-context-top-level-bind-scope"
" the-struct_216)"
"(root-expand-context-all-scopes-stx"
" the-struct_216)"
"(root-expand-context-use-site-scopes"
" the-struct_216)"
"(root-expand-context-defined-syms"
" the-struct_216)"
"(root-expand-context-frame-id"
" the-struct_216)"
"(root-expand-context-counter"
" the-struct_216)"
"(root-expand-context-lift-key"
" the-struct_216)"
" context298_217"
"(expand-context-phase"
" the-struct_216)"
"(expand-context-namespace"
" the-struct_216)"
"(expand-context-env"
" the-struct_216)"
"(expand-context-post-expansion-scope-action"
" the-struct_216)"
"(expand-context-scopes"
" the-struct_216)"
"(expand-context-def-ctx-scopes"
" the-struct_216)"
"(expand-context-reference-records"
" the-struct_216)"
"(expand-context-only-immediate?"
" the-struct_216)"
"(expand-context-just-once?"
" the-struct_216)"
" module-begin-k299_218"
"(expand-context-need-eventually-defined"
" the-struct_216)"
"(expand-context-allow-unbound?"
" the-struct_216)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_216)"
"(expand-context-stops"
" the-struct_216)"
"(expand-context-current-introduction-scopes"
" the-struct_216)"
"(expand-context-declared-submodule-names"
" the-struct_216)"
"(expand-context-lifts"
" the-struct_216)"
"(expand-context-lift-envs"
" the-struct_216)"
"(expand-context-module-lifts"
" the-struct_216)"
"(expand-context-require-lifts"
" the-struct_216)"
"(expand-context-to-module-lifts"
" the-struct_216)"
"(expand-context-requires+provides"
" the-struct_216)"
"(expand-context-name"
" the-struct_216)"
"(expand-context-observer"
" the-struct_216)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_216)))))"
"(let-values(((mb_70)"
"(let-values(((...er/expand/module.rkt:371:5_219)"
" ensure-module-begin30.1)"
"((bodys300_220)"
" bodys_62)"
"((module-name-sym301_221)"
" module-name-sym_50)"
"((initial-require-s302_222)"
" initial-require-s_56)"
"((m-ns303_223)"
" m-ns_60)"
"((mb-ctx304_224)"
" mb-ctx_69)"
"((phase305_225)"
" phase_49)"
"((s306_226)"
" s_39))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" ensure-module-begin30.1))"
"(ensure-module-begin28.1"
" mb-ctx304_224"
" initial-require-s302_222"
" m-ns303_223"
" module-name-sym301_221"
" phase305_225"
" s306_226"
" bodys300_220)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:371:5_219"
" keyword-procedure-extract"
" '(#:ctx"
" #:initial-require-s"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s)"
" '3)"
" '(#:ctx"
" #:initial-require-s"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s)"
"(list"
" mb-ctx304_224"
" initial-require-s302_222"
" m-ns303_223"
" module-name-sym301_221"
" phase305_225"
" s306_226)"
" bodys300_220)))))"
"(let-values(((expanded-mb_71)"
"(let-values(((mb307_227)"
" mb_70)"
"((mb-ctx308_228)"
" mb-ctx_69))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" mb307_227"
" mb-ctx308_228)"
"(expand7.1"
" mb307_227"
" mb-ctx308_228)))))"
"(let-values(((generic-self_72)"
"(make-generic-self-module-path-index"
" self_53)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_53)"
"(let-values(((lst_229)"
"(unbox"
" mpis-to-reset_65)))"
"(begin"
"(if(list? lst_229)"
"(void)"
"(let-values()"
"(in-list lst_229)))"
"((letrec-values(((for-loop_230)"
"(lambda(fold-var_231"
" lst_232)"
"(if(pair?"
" lst_232)"
"(let-values(((mpi_233)"
"(unsafe-car"
" lst_232)))"
"(if '#t"
"(let-values(((fold-var_234)"
"(let-values(((fold-var_235)"
" fold-var_231))"
"(let-values(((fold-var_236)"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_233))"
"(void)))))"
"(values"
" fold-var_236)))))"
"(if '#t"
"(for-loop_230"
" fold-var_234"
"(unsafe-cdr"
" lst_232))"
" fold-var_234))"
" fold-var_231))"
" fold-var_231))))"
" for-loop_230)"
"(void)"
" lst_229)))"
"(let-values(((result-s_237)"
"(let-values(((s309_238)"
" s_39)"
"((disarmed-s310_239)"
" disarmed-s_46)"
"((temp311_240)"
"(list"
"(m_47"
" 'module)"
"(m_47"
" 'id:module-name)"
" initial-require-s_56"
" expanded-mb_71)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" s309_238"
" disarmed-s310_239"
" temp311_240)"
"(rebuild101.1"
" s309_238"
" disarmed-s310_239"
" temp311_240)))))"
"(let-values(((result-s_241)"
"(1/syntax-module-path-index-shift"
" result-s_237"
" self_53"
" generic-self_72)))"
"(let-values(((result-s_242)"
"(attach-require-provide-properties"
" requires+provides_63"
" result-s_241"
" self_53"
" generic-self_72)))"
"(let-values(((result-s_243)"
"(attach-root-expand-context-properties"
" result-s_242"
" root-ctx_57"
" self_53"
" generic-self_72)))"
"(let-values(((result-s_244)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_63)"
"(syntax-property$1"
" result-s_243"
" 'module-body-context-simple?"
" '#t)"
" result-s_243)))"
"(begin"
"(let-values(((obs_245)"
"(expand-context-observer"
" ctx_61)))"
"(if obs_245"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_245"
" 'rename-one"
" result-s_244))"
"(void)))"
"(void)))"
" result-s_244)))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack13.1$2)"
"(lambda(given-kws_246 given-args_247 s9_248 init-ctx10_249 enclosing-self11_250)"
"(let-values(((enclosing-is-cross-phase-persistent?6_251)"
"(if(pair? given-kws_246)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_246)) '#f)))"
"(let-values(((enclosing-is-cross-phase-persistent?2_252)"
"(if enclosing-is-cross-phase-persistent?6_251(car given-args_247)(void)))"
"((given-kws_253)(if enclosing-is-cross-phase-persistent?6_251(cdr given-kws_246) given-kws_246))"
"((given-args_254)"
"(if enclosing-is-cross-phase-persistent?6_251(cdr given-args_247) given-args_247)))"
"(let-values(((enclosing-requires+provides7_255)"
"(if(pair? given-kws_253)(eq? '#:enclosing-requires+provides(car given-kws_253)) '#f)))"
"(let-values(((enclosing-requires+provides3_256)"
"(if enclosing-requires+provides7_255(car given-args_254)(void)))"
"((given-kws_257)(if enclosing-requires+provides7_255(cdr given-kws_253) given-kws_253))"
"((given-args_258)(if enclosing-requires+provides7_255(cdr given-args_254) given-args_254)))"
"(let-values(((keep-enclosing-scope-at-phase5_259)"
"(if(pair? given-kws_257)(eq? '#:keep-enclosing-scope-at-phase(car given-kws_257)) '#f)))"
"(let-values(((keep-enclosing-scope-at-phase1_260)"
"(if keep-enclosing-scope-at-phase5_259(car given-args_258)(void)))"
"((given-kws_261)(if keep-enclosing-scope-at-phase5_259(cdr given-kws_257) given-kws_257))"
"((given-args_262)"
"(if keep-enclosing-scope-at-phase5_259(cdr given-args_258) given-args_258)))"
"(let-values(((mpis-for-enclosing-reset8_263)(pair? given-kws_261)))"
"(let-values(((mpis-for-enclosing-reset4_264)"
"(if mpis-for-enclosing-reset8_263(car given-args_262)(void))))"
"(expand-module12.1"
" enclosing-is-cross-phase-persistent?2_252"
" enclosing-is-cross-phase-persistent?6_251"
" enclosing-requires+provides3_256"
" enclosing-requires+provides7_255"
" keep-enclosing-scope-at-phase1_260"
" keep-enclosing-scope-at-phase5_259"
" mpis-for-enclosing-reset4_264"
" mpis-for-enclosing-reset8_263"
" s9_248"
" init-ctx10_249"
" enclosing-self11_250)))))))))))"
"(define-values"
"(expand-module14.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_265 given-argc_266)"
"(if(= given-argc_266 '5)"
"(let-values(((l1_267) given-kws_265))"
"(let-values(((l1_268)"
"(if(null? l1_267)"
" l1_267"
"(if(eq?(car l1_267) '#:enclosing-is-cross-phase-persistent?)(cdr l1_267) l1_267))))"
"(let-values(((l1_269) l1_268))"
"(let-values(((l1_270)"
"(if(null? l1_269)"
" l1_269"
"(if(eq?(car l1_269) '#:enclosing-requires+provides)(cdr l1_269) l1_269))))"
"(let-values(((l1_271) l1_270))"
"(let-values(((l1_272)"
"(if(null? l1_271)"
" l1_271"
"(if(eq?(car l1_271) '#:keep-enclosing-scope-at-phase)(cdr l1_271) l1_271))))"
"(let-values(((l1_273) l1_272))"
"(let-values(((l1_274)"
"(if(null? l1_273)"
" l1_273"
"(if(eq?(car l1_273) '#:mpis-for-enclosing-reset)(cdr l1_273) l1_273))))"
"(null? l1_274)))))))))"
" '#f))"
"(case-lambda"
"((given-kws_275 given-args_276 s_277 init-ctx_278 enclosing-self_279)"
"(unpack13.1$2 given-kws_275 given-args_276 s_277 init-ctx_278 enclosing-self_279)))"
" null"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(let-values(((expand-module_280)"
"(case-lambda"
"((s_281 init-ctx_282 enclosing-self_283)"
"(unpack13.1$2 null null s_281 init-ctx_282 enclosing-self_283)))))"
" expand-module_280)))"
"(define-values"
"(lifted/1.1$9)"
"(make-required"
" 'ensure-module-begin"
"(case-lambda((self_284 bodys_285)(apply missing-kw self_284 bodys_285 null)))"
" '#f"
" '#f))"
"(define-values"
"(ensure-module-begin28.1)"
"(lambda(ctx18_286 initial-require-s16_287 m-ns17_288 module-name-sym15_289 phase19_290 s20_291 bodys27_292)"
"(let-values(((bodys_293) bodys27_292))"
"(let-values(((module-name-sym_294) module-name-sym15_289))"
"(let-values(((initial-require-s_295) initial-require-s16_287))"
"(let-values(((m-ns_296) m-ns17_288))"
"(let-values(((ctx_297) ctx18_286))"
"(let-values(((phase_298) phase19_290))"
"(let-values(((s_299) s20_291))"
"(let-values()"
"(let-values(((make-mb-ctx_300)"
"(lambda()"
"(let-values(((the-struct_302) ctx_297))"
"(if(expand-context? the-struct_302)"
"(let-values(((context312_303) 'module-begin)((only-immediate?313_304) '#t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_302)"
"(root-expand-context-post-expansion-scope the-struct_302)"
"(root-expand-context-top-level-bind-scope the-struct_302)"
"(root-expand-context-all-scopes-stx the-struct_302)"
"(root-expand-context-use-site-scopes the-struct_302)"
"(root-expand-context-defined-syms the-struct_302)"
"(root-expand-context-frame-id the-struct_302)"
"(root-expand-context-counter the-struct_302)"
"(root-expand-context-lift-key the-struct_302)"
" context312_303"
"(expand-context-phase the-struct_302)"
"(expand-context-namespace the-struct_302)"
"(expand-context-env the-struct_302)"
"(expand-context-post-expansion-scope-action the-struct_302)"
"(expand-context-scopes the-struct_302)"
"(expand-context-def-ctx-scopes the-struct_302)"
"(expand-context-reference-records the-struct_302)"
" only-immediate?313_304"
"(expand-context-just-once? the-struct_302)"
"(expand-context-module-begin-k the-struct_302)"
"(expand-context-need-eventually-defined the-struct_302)"
"(expand-context-allow-unbound? the-struct_302)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_302)"
"(expand-context-stops the-struct_302)"
"(expand-context-current-introduction-scopes the-struct_302)"
"(expand-context-declared-submodule-names the-struct_302)"
"(expand-context-lifts the-struct_302)"
"(expand-context-lift-envs the-struct_302)"
"(expand-context-module-lifts the-struct_302)"
"(expand-context-require-lifts the-struct_302)"
"(expand-context-to-module-lifts the-struct_302)"
"(expand-context-requires+provides the-struct_302)"
"(expand-context-name the-struct_302)"
"(expand-context-observer the-struct_302)))"
" (raise-argument-error 'struct-copy '\"expand-context?\" the-struct_302))))))"
"(let-values(((mb_301)"
"(if(= '1(length bodys_293))"
"(let-values()"
"(begin"
"(let-values(((obs_305)(expand-context-observer ctx_297)))"
"(if obs_305"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_305 'rename-one(car bodys_293)))"
"(void)))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_293)) phase_298))"
"(let-values()(car bodys_293))"
"(let-values()"
"(let-values(((partly-expanded-body_306)"
"(let-values(((temp314_307)"
"(add-enclosing-name-property"
"(car bodys_293)"
" module-name-sym_294))"
"((temp315_308)(make-mb-ctx_300)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp314_307 temp315_308)"
"(expand7.1 temp314_307 temp315_308)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_306)"
" phase_298))"
"(let-values() partly-expanded-body_306)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:449:10_309)"
" add-module-begin41.1)"
"((temp316_310)(list partly-expanded-body_306))"
"((s317_311) s_299)"
"((initial-require-s318_312) initial-require-s_295)"
"((phase319_313) phase_298)"
"((module-name-sym320_314) module-name-sym_294)"
"((temp321_315)(make-mb-ctx_300))"
"((temp322_316) '#f))"
"(if(variable-reference-constant?"
"(#%variable-reference add-module-begin41.1))"
"(add-module-begin39.1"
" temp322_316"
" '#t"
" temp316_310"
" s317_311"
" initial-require-s318_312"
" phase319_313"
" module-name-sym320_314"
" temp321_315)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:449:10_309"
" keyword-procedure-extract"
" '(#:log-rename-one?)"
" '8)"
" '(#:log-rename-one?)"
"(list temp322_316)"
" temp316_310"
" s317_311"
" initial-require-s318_312"
" phase319_313"
" module-name-sym320_314"
" temp321_315))))))))))"
"(let-values()"
"(let-values(((bodys323_317) bodys_293)"
"((s324_318) s_299)"
"((initial-require-s325_319) initial-require-s_295)"
"((phase326_320) phase_298)"
"((module-name-sym327_321) module-name-sym_294)"
"((temp328_322)(make-mb-ctx_300)))"
"(if(variable-reference-constant?(#%variable-reference add-module-begin41.1))"
"(add-module-begin39.1"
" '#f"
" '#f"
" bodys323_317"
" s324_318"
" initial-require-s325_319"
" phase326_320"
" module-name-sym327_321"
" temp328_322)"
"(add-module-begin41.1"
" bodys323_317"
" s324_318"
" initial-require-s325_319"
" phase326_320"
" module-name-sym327_321"
" temp328_322)))))))"
"(add-enclosing-name-property mb_301 module-name-sym_294)))))))))))))"
"(define-values"
"(unpack29.1$2)"
"(lambda(given-kws_323 given-args_324 bodys27_325)"
"(let-values(((ctx18_326)(car given-args_324))"
"((given-kws_327)(cdr given-kws_323))"
"((given-args_328)(cdr given-args_324)))"
"(let-values(((initial-require-s16_329)(car given-args_328))"
"((given-kws_330)(cdr given-kws_327))"
"((given-args_331)(cdr given-args_328)))"
"(let-values(((m-ns17_332)(car given-args_331))"
"((given-kws_333)(cdr given-kws_330))"
"((given-args_334)(cdr given-args_331)))"
"(let-values(((module-name-sym15_335)(car given-args_334))"
"((given-kws_336)(cdr given-kws_333))"
"((given-args_337)(cdr given-args_334)))"
"(let-values(((phase19_338)(car given-args_337))"
"((given-kws_339)(cdr given-kws_336))"
"((given-args_340)(cdr given-args_337)))"
"(let-values(((s20_341)(car given-args_340)))"
"(ensure-module-begin28.1"
" ctx18_326"
" initial-require-s16_329"
" m-ns17_332"
" module-name-sym15_335"
" phase19_338"
" s20_341"
" bodys27_325)))))))))"
"(define-values"
"(ensure-module-begin30.1)"
"(lifted/1.1$9"
"(lambda(given-kws_342 given-argc_343)"
"(if(= given-argc_343 '3)"
"(let-values(((l2_344) given-kws_342))"
"(if(pair? l2_344)"
"(if(eq?(car l2_344) '#:ctx)"
"(let-values(((l2_345)(cdr l2_344)))"
"(if(pair? l2_345)"
"(if(eq?(car l2_345) '#:initial-require-s)"
"(let-values(((l2_346)(cdr l2_345)))"
"(if(pair? l2_346)"
"(if(eq?(car l2_346) '#:m-ns)"
"(let-values(((l2_347)(cdr l2_346)))"
"(if(pair? l2_347)"
"(if(eq?(car l2_347) '#:module-name-sym)"
"(let-values(((l2_348)(cdr l2_347)))"
"(if(pair? l2_348)"
"(if(eq?(car l2_348) '#:phase)"
"(let-values(((l2_349)(cdr l2_348)))"
"(if(pair? l2_349)(if(eq?(car l2_349) '#:s)(null?(cdr l2_349)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda((given-kws_350 given-args_351 bodys_352)(unpack29.1$2 given-kws_350 given-args_351 bodys_352)))"
" '(#:ctx #:initial-require-s #:m-ns #:module-name-sym #:phase #:s)"
" '(#:ctx #:initial-require-s #:m-ns #:module-name-sym #:phase #:s)))"
"(define-values"
"(add-module-begin39.1)"
"(lambda(log-rename-one?31_353"
" log-rename-one?32_354"
" bodys33_355"
" s34_356"
" initial-require-s35_357"
" phase36_358"
" module-name-sym37_359"
" mb-ctx38_360)"
"(let-values(((bodys_361) bodys33_355))"
"(let-values(((s_362) s34_356))"
"(let-values(((initial-require-s_363) initial-require-s35_357))"
"(let-values(((phase_364) phase36_358))"
"(let-values(((module-name-sym_365) module-name-sym37_359))"
"(let-values(((mb-ctx_366) mb-ctx38_360))"
"(let-values(((log-rename-one?_367)(if log-rename-one?32_354 log-rename-one?31_353 '#t)))"
"(let-values()"
"(let-values(((disarmed-initial-require-s_368)(syntax-disarm$1 initial-require-s_363)))"
"(let-values(((mb-id_369)(datum->syntax$2 disarmed-initial-require-s_368 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id329_372) mb-id_369)((phase330_373) phase_364))"
"(if(variable-reference-constant?(#%variable-reference resolve23.1))"
"(resolve21.1 '#f '#f '#f '#f '#f '#f mb-id329_372 phase330_373)"
"(resolve23.1 mb-id329_372 phase330_373)))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"no #%module-begin binding in the module's language\""
" s_362)))"
"(values))))"
"(let-values(((mb_370)"
"(datum->syntax$2"
" disarmed-initial-require-s_368"
"(list* mb-id_369 bodys_361)"
" s_362)))"
"(let-values((()"
"(begin"
"(let-values(((obs_374)(expand-context-observer mb-ctx_366)))"
"(if obs_374"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_374 'tag mb_370))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_367"
"(let-values()"
"(let-values(((obs_375)(expand-context-observer mb-ctx_366)))"
"(if obs_375"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_375 'rename-one mb_370))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_371)"
"(let-values(((temp331_376)"
"(add-enclosing-name-property mb_370 module-name-sym_365))"
"((mb-ctx332_377) mb-ctx_366))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp331_376 mb-ctx332_377)"
"(expand7.1 temp331_376 mb-ctx332_377)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_371) phase_364))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_362"
" partly-expanded-mb_371)))"
" partly-expanded-mb_371))))))))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_378"
" given-args_379"
" bodys33_380"
" s34_381"
" initial-require-s35_382"
" phase36_383"
" module-name-sym37_384"
" mb-ctx38_385)"
"(let-values(((log-rename-one?32_386)(pair? given-kws_378)))"
"(let-values(((log-rename-one?31_387)(if log-rename-one?32_386(car given-args_379)(void))))"
"(add-module-begin39.1"
" log-rename-one?31_387"
" log-rename-one?32_386"
" bodys33_380"
" s34_381"
" initial-require-s35_382"
" phase36_383"
" module-name-sym37_384"
" mb-ctx38_385)))))"
"(define-values"
"(add-module-begin41.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_388 given-argc_389)"
"(if(= given-argc_389 '8)"
"(let-values(((l1_390) given-kws_388))"
"(let-values(((l1_391)"
"(if(null? l1_390) l1_390(if(eq?(car l1_390) '#:log-rename-one?)(cdr l1_390) l1_390))))"
"(null? l1_391)))"
" '#f))"
"(case-lambda"
"((given-kws_392 given-args_393 bodys_394 s_395 initial-require-s_396 phase_397 module-name-sym_398 mb-ctx_399)"
"(unpack40.1"
" given-kws_392"
" given-args_393"
" bodys_394"
" s_395"
" initial-require-s_396"
" phase_397"
" module-name-sym_398"
" mb-ctx_399)))"
" null"
" '(#:log-rename-one?)"
"(let-values(((add-module-begin_400)"
"(case-lambda"
"((bodys_401 s_402 initial-require-s_403 phase_404 module-name-sym_405 mb-ctx_406)"
"(unpack40.1"
" null"
" null"
" bodys_401"
" s_402"
" initial-require-s_403"
" phase_404"
" module-name-sym_405"
" mb-ctx_406)))))"
" add-module-begin_400)))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_407 module-name-sym_408)(syntax-property$1 stx_407 'enclosing-module-name module-name-sym_408)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_409"
" outside-scope_410"
" init-ctx_411"
" keep-enclosing-scope-at-phase_412"
" self_413"
" enclosing-self_414"
" enclosing-mod_415)"
"(lambda(s_416)"
"(let-values(((s-without-enclosing_417)"
"(if keep-enclosing-scope-at-phase_412"
" s_416"
"(remove-use-site-scopes"
"(let-values(((lst_421)(root-expand-context-module-scopes init-ctx_411)))"
"(begin"
"(if(list? lst_421)(void)(let-values()(in-list lst_421)))"
"((letrec-values(((for-loop_422)"
"(lambda(s_423 lst_424)"
"(if(pair? lst_424)"
"(let-values(((sc_425)(unsafe-car lst_424)))"
"(if '#t"
"(let-values(((s_426)"
"(let-values(((s_427) s_423))"
"(let-values(((s_428)"
"(let-values()"
"(remove-scope s_427 sc_425))))"
"(values s_428)))))"
"(if '#t(for-loop_422 s_426(unsafe-cdr lst_424)) s_426))"
" s_423))"
" s_423))))"
" for-loop_422)"
" s_416"
" lst_421)))"
" init-ctx_411))))"
"(let-values(((s-with-edges_418)"
"(add-scope(add-scope s-without-enclosing_417 outside-scope_410) inside-scope_409)))"
"(let-values(((s-with-suitable-enclosing_419)"
"(if keep-enclosing-scope-at-phase_412"
"(let-values()"
"(1/syntax-module-path-index-shift s-with-edges_418 enclosing-self_414 enclosing-mod_415))"
"(let-values() s-with-edges_418))))"
"(let-values(((s-shifted_420)"
"(1/syntax-module-path-index-shift"
" s-with-suitable-enclosing_419"
"(make-generic-self-module-path-index self_413)"
" self_413)))"
"(syntax-set-inspector s-shifted_420(current-code-inspector)))))))))"
"(define-values"
"(lifted/2.1$1)"
"(make-required"
" 'partially-expand-bodys"
"(case-lambda((self_429 bodys_430)(apply missing-kw self_429 bodys_430 null)))"
" '#f"
" '#f))"
"(define-values"
"(partially-expand-bodys73.1)"
"(lambda(all-scopes-stx51_431"
" ctx45_432"
" declared-keywords53_433"
" declared-submodule-names54_434"
" defined-syms52_435"
" frame-id48_436"
" loop56_437"
" mpis-to-reset55_438"
" namespace46_439"
" need-eventually-defined50_440"
" original42_441"
" phase44_442"
" requires-and-provides49_443"
" self47_444"
" tail?43_445"
" bodys72_446)"
"(let-values(((bodys_447) bodys72_446))"
"(let-values(((s_448) original42_441))"
"(let-values(((tail?_449) tail?43_445))"
"(let-values(((phase_450) phase44_442))"
"(let-values(((partial-body-ctx_451) ctx45_432))"
"(let-values(((m-ns_452) namespace46_439))"
"(let-values(((self_453) self47_444))"
"(let-values(((frame-id_454) frame-id48_436))"
"(let-values(((requires+provides_455) requires-and-provides49_443))"
"(let-values(((need-eventually-defined_456) need-eventually-defined50_440))"
"(let-values(((all-scopes-stx_457) all-scopes-stx51_431))"
"(let-values(((defined-syms_458) defined-syms52_435))"
"(let-values(((declared-keywords_459) declared-keywords53_433))"
"(let-values(((declared-submodule-names_460) declared-submodule-names54_434))"
"(let-values(((mpis-to-reset_461) mpis-to-reset55_438))"
"(let-values(((pass-1-and-2-loop_462) loop56_437))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_452 phase_450)"
"((letrec-values(((loop_463)"
"(lambda(tail?_464 bodys_465)"
"(if(null? bodys_465)"
"(let-values()"
"(if tail?_464"
"(let-values()"
"(let-values(((bodys_466)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_451))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_451)))))"
"(if(null? bodys_466)"
" null"
"(loop_463"
" '#t"
"(add-post-expansion-scope"
" bodys_466"
" partial-body-ctx_451)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_470)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_470"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_470"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_467)"
"(let-values(((temp333_471)"
"(car bodys_465))"
"((partial-body-ctx334_472)"
" partial-body-ctx_451))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" temp333_471"
" partial-body-ctx334_472)"
"(expand7.1"
" temp333_471"
" partial-body-ctx334_472)))))"
"(let-values(((disarmed-exp-body_468)"
"(syntax-disarm$1 exp-body_467)))"
"(let-values(((lifted-defns_469)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_451))))"
"(begin"
"(if(null? lifted-defns_469)"
"(let-values()"
"(begin"
"(let-values(((obs_473)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_473"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_473"
" 'rename-list"
" lifted-defns_469))"
"(void)))"
"(void)))"
"(let-values(((obs_474)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_474"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_474"
" 'module-lift-loop"
"(append"
" lifted-defns_469"
"(cons"
" exp-body_467"
"(cdr bodys_465)))))"
"(void)))"
"(void)))))"
"(let-values()"
"(let-values(((obs_475)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_475"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_475"
" 'module-lift-end-loop"
"(cons"
" exp-body_467"
"(cdr bodys_465))))"
"(void)))"
"(void)))))"
"(let-values(((obs_476)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_476"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_476"
" 'rename-one"
" exp-body_467))"
"(void)))"
"(void)))"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_451))"
" lifted-defns_469"
"(loop_463"
" '#f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_451)))"
"(let-values(((tmp_477)"
"(core-form-sym"
" disarmed-exp-body_468"
" phase_450)))"
"(if(equal? tmp_477 'begin)"
"(let-values()"
"(let-values(((m_478)"
"(match-syntax"
" disarmed-exp-body_468"
" '(begin e ...))))"
"(let-values(((track_479)"
"(lambda(e_481)"
"(syntax-track-origin$1"
" e_481"
" exp-body_467))))"
"(let-values(((spliced-bodys_480)"
"(append"
"(map2"
" track_479"
"(m_478 'e))"
"(cdr bodys_465))))"
"(begin"
"(let-values(((obs_482)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_482"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_482"
" 'splice"
" spliced-bodys_480))"
"(void)))"
"(void)))"
"(loop_463"
" tail?_464"
" spliced-bodys_480))))))"
"(if(equal? tmp_477 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_486)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_486"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_486"
" 'enter-prim"
" exp-body_467))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_487)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_487"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_487"
" 'enter-prim-begin-for-syntax))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((m_483)"
"(match-syntax"
" disarmed-exp-body_468"
" '(begin-for-syntax"
" e"
" ...))))"
"(let-values(((nested-bodys_484)"
"(pass-1-and-2-loop_462"
"(m_483 'e)"
"(add1"
" phase_450))))"
"(let-values(((ct-m-ns_485)"
"(namespace->namespace-at-phase"
" m-ns_452"
"(add1"
" phase_450))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_452"
"(add1 phase_450))"
"(eval-nested-bodys"
" nested-bodys_484"
"(add1 phase_450)"
" ct-m-ns_485"
" self_453"
" partial-body-ctx_451)"
"(namespace-visit-available-modules!"
" m-ns_452"
" phase_450)"
"(let-values(((obs_488)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_488"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_488"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body335_489)"
" exp-body_467)"
"((disarmed-exp-body336_490)"
" disarmed-exp-body_468)"
"((temp337_491)"
"(list*"
"(m_483"
" 'begin-for-syntax)"
" nested-bodys_484)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" exp-body335_489"
" disarmed-exp-body336_490"
" temp337_491)"
"(rebuild101.1"
" exp-body335_489"
" disarmed-exp-body336_490"
" temp337_491)))"
"(loop_463"
" tail?_464"
"(cdr"
" bodys_465))))))))))"
"(if(equal? tmp_477 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_495)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_495"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_495"
" 'enter-prim"
" exp-body_467))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_496)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_496"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_496"
" 'enter-prim-define-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((m_492)"
"(match-syntax"
" disarmed-exp-body_468"
" '(define-values"
"(id ...)"
" rhs))))"
"(let-values(((ids_493)"
"(remove-use-site-scopes"
"(m_492 'id)"
" partial-body-ctx_451)))"
"(let-values((()"
"(begin"
"(let-values(((ids338_497)"
" ids_493)"
"((phase339_498)"
" phase_450)"
"((exp-body340_499)"
" exp-body_467))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" '#f"
" '#f"
" ids338_497"
" phase339_498"
" exp-body340_499"
" '#f"
" '#f)"
"(check-no-duplicate-ids10.1"
" ids338_497"
" phase339_498"
" exp-body340_499)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:606:10_500)"
" check-ids-unbound157.1)"
"((ids341_501)"
" ids_493)"
"((phase342_502)"
" phase_450)"
"((requires+provides343_503)"
" requires+provides_455)"
"((exp-body344_504)"
" exp-body_467))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound157.1))"
"(check-ids-unbound155.1"
" exp-body344_504"
" ids341_501"
" phase342_502"
" requires+provides343_503)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:606:10_500"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list"
" exp-body344_504)"
" ids341_501"
" phase342_502"
" requires+provides343_503)))"
"(values))))"
"(let-values(((syms_494)"
"(let-values(((...er/expand/module.rkt:607:23_505)"
" select-defined-syms-and-bind!16.1)"
"((ids345_506)"
" ids_493)"
"((defined-syms346_507)"
" defined-syms_458)"
"((self347_508)"
" self_453)"
"((phase348_509)"
" phase_450)"
"((all-scopes-stx349_510)"
" all-scopes-stx_457)"
"((frame-id350_511)"
" frame-id_454)"
"((requires+provides351_512)"
" requires+provides_455)"
"((exp-body352_513)"
" exp-body_467))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!16.1))"
"(select-defined-syms-and-bind!14.1"
" frame-id350_511"
" exp-body352_513"
" '#t"
" requires+provides351_512"
" '#t"
" '#f"
" '#f"
" ids345_506"
" defined-syms346_507"
" self347_508"
" phase348_509"
" all-scopes-stx349_510)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:607:23_505"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
" '7)"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" frame-id350_511"
" exp-body352_513"
" requires+provides351_512)"
" ids345_506"
" defined-syms346_507"
" self347_508"
" phase348_509"
" all-scopes-stx349_510)))))"
"(begin"
"(add-defined-syms!"
" requires+provides_455"
" syms_494"
" phase_450)"
"(let-values(((obs_514)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_514"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_514"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body353_515)"
" exp-body_467)"
"((disarmed-exp-body354_516)"
" disarmed-exp-body_468)"
"((temp355_517)"
"(list"
"(m_492"
" 'define-values)"
" ids_493"
"(m_492"
" 'rhs))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" exp-body353_515"
" disarmed-exp-body354_516"
" temp355_517)"
"(rebuild101.1"
" exp-body353_515"
" disarmed-exp-body354_516"
" temp355_517)))"
"(loop_463"
" tail?_464"
"(cdr"
" bodys_465))))))))))))"
"(if(equal? tmp_477 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_523)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_523"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_523"
" 'enter-prim"
" exp-body_467))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_524)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_524"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_524"
" 'enter-prim-define-syntaxes))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((m_518)"
"(match-syntax"
" disarmed-exp-body_468"
" '(define-syntaxes"
"(id ...)"
" rhs))))"
"(let-values(((ids_519)"
"(remove-use-site-scopes"
"(m_518 'id)"
" partial-body-ctx_451)))"
"(let-values((()"
"(begin"
"(let-values(((ids356_525)"
" ids_519)"
"((phase357_526)"
" phase_450)"
"((exp-body358_527)"
" exp-body_467))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" '#f"
" '#f"
" ids356_525"
" phase357_526"
" exp-body358_527"
" '#f"
" '#f)"
"(check-no-duplicate-ids10.1"
" ids356_525"
" phase357_526"
" exp-body358_527)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:624:10_528)"
" check-ids-unbound157.1)"
"((ids359_529)"
" ids_519)"
"((phase360_530)"
" phase_450)"
"((requires+provides361_531)"
" requires+provides_455)"
"((exp-body362_532)"
" exp-body_467))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound157.1))"
"(check-ids-unbound155.1"
" exp-body362_532"
" ids359_529"
" phase360_530"
" requires+provides361_531)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:624:10_528"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list"
" exp-body362_532)"
" ids359_529"
" phase360_530"
" requires+provides361_531)))"
"(values))))"
"(let-values(((syms_520)"
"(let-values(((...er/expand/module.rkt:625:23_533)"
" select-defined-syms-and-bind!16.1)"
"((ids363_534)"
" ids_519)"
"((defined-syms364_535)"
" defined-syms_458)"
"((self365_536)"
" self_453)"
"((phase366_537)"
" phase_450)"
"((all-scopes-stx367_538)"
" all-scopes-stx_457)"
"((frame-id368_539)"
" frame-id_454)"
"((requires+provides369_540)"
" requires+provides_455)"
"((exp-body370_541)"
" exp-body_467))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!16.1))"
"(select-defined-syms-and-bind!14.1"
" frame-id368_539"
" exp-body370_541"
" '#t"
" requires+provides369_540"
" '#t"
" '#f"
" '#f"
" ids363_534"
" defined-syms364_535"
" self365_536"
" phase366_537"
" all-scopes-stx367_538)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:625:23_533"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
" '7)"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" frame-id368_539"
" exp-body370_541"
" requires+provides369_540)"
" ids363_534"
" defined-syms364_535"
" self365_536"
" phase366_537"
" all-scopes-stx367_538)))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_455"
" syms_520"
" phase_450)"
"(values))))"
"(let-values(((exp-rhs_521"
" vals_522)"
"(expand+eval-for-syntaxes-binding"
"(m_518"
" 'rhs)"
" ids_519"
"(let-values(((the-struct_542)"
" partial-body-ctx_451))"
"(if(expand-context?"
" the-struct_542)"
"(let-values(((need-eventually-defined371_543)"
" need-eventually-defined_456))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_542)"
"(root-expand-context-post-expansion-scope"
" the-struct_542)"
"(root-expand-context-top-level-bind-scope"
" the-struct_542)"
"(root-expand-context-all-scopes-stx"
" the-struct_542)"
"(root-expand-context-use-site-scopes"
" the-struct_542)"
"(root-expand-context-defined-syms"
" the-struct_542)"
"(root-expand-context-frame-id"
" the-struct_542)"
"(root-expand-context-counter"
" the-struct_542)"
"(root-expand-context-lift-key"
" the-struct_542)"
"(expand-context-context"
" the-struct_542)"
"(expand-context-phase"
" the-struct_542)"
"(expand-context-namespace"
" the-struct_542)"
"(expand-context-env"
" the-struct_542)"
"(expand-context-post-expansion-scope-action"
" the-struct_542)"
"(expand-context-scopes"
" the-struct_542)"
"(expand-context-def-ctx-scopes"
" the-struct_542)"
"(expand-context-reference-records"
" the-struct_542)"
"(expand-context-only-immediate?"
" the-struct_542)"
"(expand-context-just-once?"
" the-struct_542)"
"(expand-context-module-begin-k"
" the-struct_542)"
" need-eventually-defined371_543"
"(expand-context-allow-unbound?"
" the-struct_542)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_542)"
"(expand-context-stops"
" the-struct_542)"
"(expand-context-current-introduction-scopes"
" the-struct_542)"
"(expand-context-declared-submodule-names"
" the-struct_542)"
"(expand-context-lifts"
" the-struct_542)"
"(expand-context-lift-envs"
" the-struct_542)"
"(expand-context-module-lifts"
" the-struct_542)"
"(expand-context-require-lifts"
" the-struct_542)"
"(expand-context-to-module-lifts"
" the-struct_542)"
"(expand-context-requires+provides"
" the-struct_542)"
"(expand-context-name"
" the-struct_542)"
"(expand-context-observer"
" the-struct_542)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_542))))))"
"(begin"
"(let-values(((lst_544)"
" syms_520)"
"((lst_545)"
" vals_522)"
"((lst_546)"
" ids_519))"
"(begin"
"(if(list?"
" lst_544)"
"(void)"
"(let-values()"
"(in-list"
" lst_544)))"
"(if(list?"
" lst_545)"
"(void)"
"(let-values()"
"(in-list"
" lst_545)))"
"(if(list?"
" lst_546)"
"(void)"
"(let-values()"
"(in-list"
" lst_546)))"
"((letrec-values(((for-loop_547)"
"(lambda(fold-var_548"
" lst_549"
" lst_550"
" lst_551)"
"(if(if(pair?"
" lst_549)"
"(if(pair?"
" lst_550)"
"(pair?"
" lst_551)"
" '#f)"
" '#f)"
"(let-values(((sym_552)"
"(unsafe-car"
" lst_549))"
"((val_553)"
"(unsafe-car"
" lst_550))"
"((id_554)"
"(unsafe-car"
" lst_551)))"
"(if(if '#t"
"(if '#t"
" '#t"
" '#f)"
" '#f)"
"(let-values(((fold-var_555)"
"(let-values(((fold-var_556)"
" fold-var_548))"
"(let-values(((fold-var_557)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_553"
" id_554"
" phase_450)"
"(namespace-set-transformer!"
" m-ns_452"
" phase_450"
" sym_552"
" val_553)))"
"(void)))))"
"(values"
" fold-var_557)))))"
"(if(if '#t"
"(if '#t"
" '#t"
" '#f)"
" '#f)"
"(for-loop_547"
" fold-var_555"
"(unsafe-cdr"
" lst_549)"
"(unsafe-cdr"
" lst_550)"
"(unsafe-cdr"
" lst_551))"
" fold-var_555))"
" fold-var_548))"
" fold-var_548))))"
" for-loop_547)"
"(void)"
" lst_544"
" lst_545"
" lst_546)))"
"(let-values(((obs_558)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_558"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_558"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body372_559)"
" exp-body_467)"
"((disarmed-exp-body373_560)"
" disarmed-exp-body_468)"
"((temp374_561)"
"(list"
"(m_518"
" 'define-syntaxes)"
" ids_519"
" exp-rhs_521)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" exp-body372_559"
" disarmed-exp-body373_560"
" temp374_561)"
"(rebuild101.1"
" exp-body372_559"
" disarmed-exp-body373_560"
" temp374_561)))"
"(loop_463"
" tail?_464"
"(cdr"
" bodys_465))))))))))))))"
"(if(equal? tmp_477 '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_564)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_564"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_564"
" 'enter-prim"
" exp-body_467))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_565)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_565"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_565"
" 'enter-prim-require))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_562)"
"(remove-use-site-scopes"
" disarmed-exp-body_468"
" partial-body-ctx_451)))"
"(let-values(((m_563)"
"(match-syntax"
" ready-body_562"
" '(#%require"
" req"
" ...))))"
"(begin"
"(let-values(((...er/expand/module.rkt:652:10_566)"
" parse-and-perform-requires!22.1)"
"((temp375_567)"
"(m_563"
" 'req))"
"((exp-body376_568)"
" exp-body_467)"
"((self377_569)"
" self_453)"
"((m-ns378_570)"
" m-ns_452)"
"((phase379_571)"
" phase_450)"
"((phase380_572)"
" phase_450)"
"((requires+provides381_573)"
" requires+provides_455)"
"((declared-submodule-names382_574)"
" declared-submodule-names_460))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names382_574"
" '#t"
" phase380_572"
" '#t"
" '#f"
" '#f"
" self377_569"
" '#t"
" '#f"
" '#f"
" temp375_567"
" exp-body376_568"
" m-ns378_570"
" phase379_571"
" requires+provides381_573)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:652:10_566"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self)"
" '7)"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self)"
"(list"
" declared-submodule-names382_574"
" phase380_572"
" self377_569)"
" temp375_567"
" exp-body376_568"
" m-ns378_570"
" phase379_571"
" requires+provides381_573)))"
"(let-values(((obs_575)"
"(expand-context-observer"
" partial-body-ctx_451)))"
"(if obs_575"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_575"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
" exp-body_467"
"(loop_463"
" tail?_464"
"(cdr"
" bodys_465)))))))))"
"(if(equal? tmp_477 '#%provide)"
"(let-values()"
"(cons"
" exp-body_467"
"(loop_463"
" tail?_464"
"(cdr bodys_465))))"
"(if(equal? tmp_477 'module)"
"(let-values()"
"(let-values(((ready-body_576)"
"(remove-use-site-scopes"
" exp-body_467"
" partial-body-ctx_451)))"
"(let-values(((submod_577)"
"(let-values(((...er/expand/module.rkt:667:12_578)"
" expand-submodule175.1)"
"((ready-body383_579)"
" ready-body_576)"
"((self384_580)"
" self_453)"
"((partial-body-ctx385_581)"
" partial-body-ctx_451)"
"((temp386_582)"
" '#f)"
"((declared-submodule-names387_583)"
" declared-submodule-names_460)"
"((mpis-to-reset388_584)"
" mpis-to-reset_461))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule175.1))"
"(expand-submodule173.1"
" declared-submodule-names387_583"
" '#f"
" '#f"
" '#f"
" '#f"
" temp386_582"
" '#f"
" '#f"
" mpis-to-reset388_584"
" ready-body383_579"
" self384_580"
" partial-body-ctx385_581)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:667:12_578"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" '5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names387_583"
" temp386_582"
" mpis-to-reset388_584)"
" ready-body383_579"
" self384_580"
" partial-body-ctx385_581)))))"
"(cons"
" submod_577"
"(loop_463"
" tail?_464"
"(cdr bodys_465))))))"
"(if(equal? tmp_477 'module*)"
"(let-values()"
"(cons"
" exp-body_467"
"(loop_463"
" tail?_464"
"(cdr bodys_465))))"
"(if(equal?"
" tmp_477"
" '#%declare)"
"(let-values()"
"(let-values(((m_585)"
"(match-syntax"
" disarmed-exp-body_468"
" '(#%declare"
" kw"
" ...))))"
"(begin"
"(let-values(((lst_586)"
"(m_585"
" 'kw)))"
"(begin"
"(if(list?"
" lst_586)"
"(void)"
"(let-values()"
"(in-list"
" lst_586)))"
"((letrec-values(((for-loop_587)"
"(lambda(fold-var_588"
" lst_589)"
"(if(pair?"
" lst_589)"
"(let-values(((kw_590)"
"(unsafe-car"
" lst_589)))"
"(if '#t"
"(let-values(((fold-var_591)"
"(let-values(((fold-var_592)"
" fold-var_588))"
"(let-values(((fold-var_593)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_590))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"expected a keyword\""
" exp-body_467"
" kw_590)))"
"(if(memq"
"(syntax-e$1"
" kw_590)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"not an allowed declaration keyword\""
" exp-body_467"
" kw_590)))"
"(if(hash-ref"
" declared-keywords_459"
"(syntax-e$1"
" kw_590)"
" '#f)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"keyword declared multiple times\""
" exp-body_467"
" kw_590))"
"(void))"
"(hash-set!"
" declared-keywords_459"
"(syntax-e$1"
" kw_590)"
" kw_590)))"
"(void)))))"
"(values"
" fold-var_593)))))"
"(if '#t"
"(for-loop_587"
" fold-var_591"
"(unsafe-cdr"
" lst_589))"
" fold-var_591))"
" fold-var_588))"
" fold-var_588))))"
" for-loop_587)"
"(void)"
" lst_586)))"
"(cons"
" exp-body_467"
"(loop_463"
" tail?_464"
"(cdr"
" bodys_465))))))"
"(let-values()"
"(cons"
" exp-body_467"
"(loop_463"
" tail?_464"
"(cdr"
" bodys_465)))))))))))))))))))))))))"
" loop_463)"
" tail?_449"
" bodys_447)))))))))))))))))))))"
"(define-values"
"(unpack74.1$1)"
"(lambda(given-kws_594 given-args_595 bodys72_596)"
"(let-values(((all-scopes-stx51_597)(car given-args_595))"
"((given-kws_598)(cdr given-kws_594))"
"((given-args_599)(cdr given-args_595)))"
"(let-values(((ctx45_600)(car given-args_599))"
"((given-kws_601)(cdr given-kws_598))"
"((given-args_602)(cdr given-args_599)))"
"(let-values(((declared-keywords53_603)(car given-args_602))"
"((given-kws_604)(cdr given-kws_601))"
"((given-args_605)(cdr given-args_602)))"
"(let-values(((declared-submodule-names54_606)(car given-args_605))"
"((given-kws_607)(cdr given-kws_604))"
"((given-args_608)(cdr given-args_605)))"
"(let-values(((defined-syms52_609)(car given-args_608))"
"((given-kws_610)(cdr given-kws_607))"
"((given-args_611)(cdr given-args_608)))"
"(let-values(((frame-id48_612)(car given-args_611))"
"((given-kws_613)(cdr given-kws_610))"
"((given-args_614)(cdr given-args_611)))"
"(let-values(((loop56_615)(car given-args_614))"
"((given-kws_616)(cdr given-kws_613))"
"((given-args_617)(cdr given-args_614)))"
"(let-values(((mpis-to-reset55_618)(car given-args_617))"
"((given-kws_619)(cdr given-kws_616))"
"((given-args_620)(cdr given-args_617)))"
"(let-values(((namespace46_621)(car given-args_620))"
"((given-kws_622)(cdr given-kws_619))"
"((given-args_623)(cdr given-args_620)))"
"(let-values(((need-eventually-defined50_624)(car given-args_623))"
"((given-kws_625)(cdr given-kws_622))"
"((given-args_626)(cdr given-args_623)))"
"(let-values(((original42_627)(car given-args_626))"
"((given-kws_628)(cdr given-kws_625))"
"((given-args_629)(cdr given-args_626)))"
"(let-values(((phase44_630)(car given-args_629))"
"((given-kws_631)(cdr given-kws_628))"
"((given-args_632)(cdr given-args_629)))"
"(let-values(((requires-and-provides49_633)(car given-args_632))"
"((given-kws_634)(cdr given-kws_631))"
"((given-args_635)(cdr given-args_632)))"
"(let-values(((self47_636)(car given-args_635))"
"((given-kws_637)(cdr given-kws_634))"
"((given-args_638)(cdr given-args_635)))"
"(let-values(((tail?43_639)(car given-args_638)))"
"(partially-expand-bodys73.1"
" all-scopes-stx51_597"
" ctx45_600"
" declared-keywords53_603"
" declared-submodule-names54_606"
" defined-syms52_609"
" frame-id48_612"
" loop56_615"
" mpis-to-reset55_618"
" namespace46_621"
" need-eventually-defined50_624"
" original42_627"
" phase44_630"
" requires-and-provides49_633"
" self47_636"
" tail?43_639"
" bodys72_596))))))))))))))))))"
"(define-values"
"(partially-expand-bodys75.1)"
"(lifted/2.1$1"
"(lambda(given-kws_640 given-argc_641)"
"(if(= given-argc_641 '3)"
"(let-values(((l2_642) given-kws_640))"
"(if(pair? l2_642)"
"(if(eq?(car l2_642) '#:all-scopes-stx)"
"(let-values(((l2_643)(cdr l2_642)))"
"(if(pair? l2_643)"
"(if(eq?(car l2_643) '#:ctx)"
"(let-values(((l2_644)(cdr l2_643)))"
"(if(pair? l2_644)"
"(if(eq?(car l2_644) '#:declared-keywords)"
"(let-values(((l2_645)(cdr l2_644)))"
"(if(pair? l2_645)"
"(if(eq?(car l2_645) '#:declared-submodule-names)"
"(let-values(((l2_646)(cdr l2_645)))"
"(if(pair? l2_646)"
"(if(eq?(car l2_646) '#:defined-syms)"
"(let-values(((l2_647)(cdr l2_646)))"
"(if(pair? l2_647)"
"(if(eq?(car l2_647) '#:frame-id)"
"(let-values(((l2_648)(cdr l2_647)))"
"(if(pair? l2_648)"
"(if(eq?(car l2_648) '#:loop)"
"(let-values(((l2_649)(cdr l2_648)))"
"(if(pair? l2_649)"
"(if(eq?(car l2_649) '#:mpis-to-reset)"
"(let-values(((l2_650)(cdr l2_649)))"
"(if(pair? l2_650)"
"(if(eq?(car l2_650) '#:namespace)"
"(let-values(((l2_651)(cdr l2_650)))"
"(if(pair? l2_651)"
"(if(eq?(car l2_651) '#:need-eventually-defined)"
"(let-values(((l2_652)(cdr l2_651)))"
"(if(pair? l2_652)"
"(if(eq?(car l2_652) '#:original)"
"(let-values(((l2_653)(cdr l2_652)))"
"(if(pair? l2_653)"
"(if(eq?(car l2_653) '#:phase)"
"(let-values(((l2_654)(cdr l2_653)))"
"(if(pair? l2_654)"
"(if(eq?"
"(car l2_654)"
" '#:requires-and-provides)"
"(let-values(((l2_655)"
"(cdr l2_654)))"
"(if(pair? l2_655)"
"(if(eq?(car l2_655) '#:self)"
"(let-values(((l2_656)"
"(cdr l2_655)))"
"(if(pair? l2_656)"
"(if(eq?"
"(car l2_656)"
" '#:tail?)"
"(null?(cdr l2_656))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda((given-kws_657 given-args_658 bodys_659)(unpack74.1$1 given-kws_657 given-args_658 bodys_659)))"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_660 frame-id_661 inside-scope_662 all-scopes-stx_663 defined-syms_664 requires+provides_665)"
"(lambda(ids_666 rhs_667 phase_668)"
"(let-values(((scoped-ids_669)"
"(alt-reverse"
"(let-values(((lst_670) ids_666))"
"(begin"
"(if(list? lst_670)(void)(let-values()(in-list lst_670)))"
"((letrec-values(((for-loop_671)"
"(lambda(fold-var_672 lst_673)"
"(if(pair? lst_673)"
"(let-values(((id_674)(unsafe-car lst_673)))"
"(if '#t"
"(let-values(((fold-var_675)"
"(let-values(((fold-var_676) fold-var_672))"
"(let-values(((fold-var_677)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_674"
" inside-scope_662))"
" fold-var_676))))"
"(values fold-var_677)))))"
"(if '#t"
"(for-loop_671 fold-var_675(unsafe-cdr lst_673))"
" fold-var_675))"
" fold-var_672))"
" fold-var_672))))"
" for-loop_671)"
" null"
" lst_670))))))"
"(begin"
"(let-values(((...er/expand/module.rkt:701:4_678) select-defined-syms-and-bind!16.1)"
"((scoped-ids389_679) scoped-ids_669)"
"((defined-syms390_680) defined-syms_664)"
"((self391_681) self_660)"
"((phase392_682) phase_668)"
"((all-scopes-stx393_683) all-scopes-stx_663)"
"((frame-id394_684) frame-id_661)"
"((requires+provides395_685) requires+provides_665))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!16.1))"
"(select-defined-syms-and-bind!14.1"
" frame-id394_684"
" '#f"
" '#f"
" requires+provides395_685"
" '#t"
" '#f"
" '#f"
" scoped-ids389_679"
" defined-syms390_680"
" self391_681"
" phase392_682"
" all-scopes-stx393_683)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:701:4_678"
" keyword-procedure-extract"
" '(#:frame-id #:requires+provides)"
" '7)"
" '(#:frame-id #:requires+provides)"
"(list frame-id394_684 requires+provides395_685)"
" scoped-ids389_679"
" defined-syms390_680"
" self391_681"
" phase392_682"
" all-scopes-stx393_683)))"
"(values"
" scoped-ids_669"
"(add-scope"
"(datum->syntax$2"
" '#f"
"(list"
"(datum->syntax$2(syntax-shift-phase-level$1 core-stx phase_668) 'define-values)"
" scoped-ids_669"
" rhs_667))"
" inside-scope_662)))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_686 ctx_687)"
"(let-values(((sc_688)(root-expand-context-post-expansion-scope ctx_687)))"
"(alt-reverse"
"(let-values(((lst_689) bodys_686))"
"(begin"
"(if(list? lst_689)(void)(let-values()(in-list lst_689)))"
"((letrec-values(((for-loop_690)"
"(lambda(fold-var_691 lst_692)"
"(if(pair? lst_692)"
"(let-values(((body_693)(unsafe-car lst_692)))"
"(if '#t"
"(let-values(((fold-var_694)"
"(let-values(((fold-var_695) fold-var_691))"
"(let-values(((fold-var_696)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_693 sc_688))"
" fold-var_695))))"
"(values fold-var_696)))))"
"(if '#t(for-loop_690 fold-var_694(unsafe-cdr lst_692)) fold-var_694))"
" fold-var_691))"
" fold-var_691))))"
" for-loop_690)"
" null"
" lst_689)))))))"
"(define-values"
"(lifted/3.1$4)"
"(make-required"
" 'finish-expanding-body-expressons"
"(case-lambda((self_697 partially-expanded-bodys_698)(apply missing-kw self_697 partially-expanded-bodys_698 null)))"
" '#f"
" '#f))"
"(define-values"
"(finish-expanding-body-expressons89.1)"
"(lambda(ctx78_699"
" declared-submodule-names80_700"
" mpis-to-reset81_701"
" phase77_702"
" self79_703"
" tail?76_704"
" partially-expanded-bodys88_705)"
"(let-values(((partially-expanded-bodys_706) partially-expanded-bodys88_705))"
"(let-values(((tail?_707) tail?76_704))"
"(let-values(((phase_708) phase77_702))"
"(let-values(((body-ctx_709) ctx78_699))"
"(let-values(((self_710) self79_703))"
"(let-values(((declared-submodule-names_711) declared-submodule-names80_700))"
"(let-values(((mpis-to-reset_712) mpis-to-reset81_701))"
"(let-values()"
"((letrec-values(((loop_713)"
"(lambda(tail?_714 bodys_715)"
"(if(null? bodys_715)"
"(let-values()"
"(if tail?_714"
"(let-values()"
"(let-values(((bodys_716)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_709))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_709)))))"
"(if(null? bodys_716) null(loop_713 '#t bodys_716))))"
"(let-values() bodys_715)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_722)"
"(expand-context-observer body-ctx_709)))"
"(if obs_722"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_722 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-body_717)(syntax-disarm$1(car bodys_715))))"
"(let-values(((exp-body_718)"
"(let-values(((tmp_723)"
"(core-form-sym"
" disarmed-body_717"
" phase_708)))"
"(if(equal? tmp_723 'define-values)"
"(let-values()"
"(let-values(((m_724)"
"(match-syntax"
" disarmed-body_717"
" '(define-values(id ...) rhs))))"
"(let-values(((exp-rhs_725)"
"(let-values(((temp399_726)"
"(m_724 'rhs))"
"((temp400_727)"
"(as-named-context"
"(as-expression-context"
" body-ctx_709)"
"(m_724 'id))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" '#f"
" '#f"
" temp399_726"
" temp400_727)"
"(expand7.1"
" temp399_726"
" temp400_727)))))"
"(let-values(((temp396_728)(car bodys_715))"
"((disarmed-body397_729)"
" disarmed-body_717)"
"((temp398_730)"
"(list"
"(m_724 'define-values)"
"(m_724 'id)"
" exp-rhs_725)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" temp396_728"
" disarmed-body397_729"
" temp398_730)"
"(rebuild101.1"
" temp396_728"
" disarmed-body397_729"
" temp398_730))))))"
"(if(if(equal? tmp_723 'define-syntaxes)"
" '#t"
"(if(equal? tmp_723 '#%require)"
" '#t"
"(if(equal? tmp_723 '#%provide)"
" '#t"
"(if(equal? tmp_723 'begin-for-syntax)"
" '#t"
"(if(equal? tmp_723 'module)"
" '#t"
"(if(equal? tmp_723 'module*)"
" '#t"
"(equal? tmp_723 '#%declare)))))))"
"(let-values()(car bodys_715))"
"(let-values()"
"(let-values(((temp401_731)(car bodys_715))"
"((temp402_732)"
"(as-expression-context"
" body-ctx_709)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp401_731 temp402_732)"
"(expand7.1 temp401_731 temp402_732)))))))))"
"(let-values(((lifted-defns_719)"
"(loop_713"
" '#f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_709)))))"
"(let-values(((lifted-requires_720)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_709))))"
"(let-values(((lifted-modules_721)"
"(let-values(((...er/expand/module.rkt:769:8_733)"
" expand-non-module*-submodules186.1)"
"((temp403_734)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_709)))"
"((phase404_735) phase_708)"
"((self405_736) self_710)"
"((body-ctx406_737) body-ctx_709)"
"((mpis-to-reset407_738)"
" mpis-to-reset_712)"
"((declared-submodule-names408_739)"
" declared-submodule-names_711))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-non-module*-submodules186.1))"
"(expand-non-module*-submodules184.1"
" declared-submodule-names408_739"
" mpis-to-reset407_738"
" temp403_734"
" phase404_735"
" self405_736"
" body-ctx406_737)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:769:8_733"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:mpis-to-reset)"
" '6)"
" '(#:declared-submodule-names #:mpis-to-reset)"
"(list"
" declared-submodule-names408_739"
" mpis-to-reset407_738)"
" temp403_734"
" phase404_735"
" self405_736"
" body-ctx406_737)))))"
"(begin"
"(if(null? lifted-defns_719)"
"(let-values()"
"(let-values(((obs_740)"
"(expand-context-observer body-ctx_709)))"
"(if obs_740"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_740"
" 'module-lift-loop"
" lifted-defns_719))"
"(void)))"
"(void))))"
"(let-values()"
"(let-values(((obs_741)"
"(expand-context-observer body-ctx_709)))"
"(if obs_741"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_741"
" 'module-lift-end-loop"
"(cons exp-body_718(cdr bodys_715))))"
"(void)))"
"(void)))))"
"(append"
" lifted-requires_720"
" lifted-defns_719"
" lifted-modules_721"
"(cons"
" exp-body_718"
"(loop_713 tail?_714(cdr bodys_715))))))))))))))))"
" loop_713)"
" tail?_707"
" partially-expanded-bodys_706)))))))))))"
"(define-values"
"(unpack90.1)"
"(lambda(given-kws_742 given-args_743 partially-expanded-bodys88_744)"
"(let-values(((ctx78_745)(car given-args_743))"
"((given-kws_746)(cdr given-kws_742))"
"((given-args_747)(cdr given-args_743)))"
"(let-values(((declared-submodule-names80_748)(car given-args_747))"
"((given-kws_749)(cdr given-kws_746))"
"((given-args_750)(cdr given-args_747)))"
"(let-values(((mpis-to-reset81_751)(car given-args_750))"
"((given-kws_752)(cdr given-kws_749))"
"((given-args_753)(cdr given-args_750)))"
"(let-values(((phase77_754)(car given-args_753))"
"((given-kws_755)(cdr given-kws_752))"
"((given-args_756)(cdr given-args_753)))"
"(let-values(((self79_757)(car given-args_756))"
"((given-kws_758)(cdr given-kws_755))"
"((given-args_759)(cdr given-args_756)))"
"(let-values(((tail?76_760)(car given-args_759)))"
"(finish-expanding-body-expressons89.1"
" ctx78_745"
" declared-submodule-names80_748"
" mpis-to-reset81_751"
" phase77_754"
" self79_757"
" tail?76_760"
" partially-expanded-bodys88_744)))))))))"
"(define-values"
"(finish-expanding-body-expressons91.1)"
"(lifted/3.1$4"
"(lambda(given-kws_761 given-argc_762)"
"(if(= given-argc_762 '3)"
"(let-values(((l2_763) given-kws_761))"
"(if(pair? l2_763)"
"(if(eq?(car l2_763) '#:ctx)"
"(let-values(((l2_764)(cdr l2_763)))"
"(if(pair? l2_764)"
"(if(eq?(car l2_764) '#:declared-submodule-names)"
"(let-values(((l2_765)(cdr l2_764)))"
"(if(pair? l2_765)"
"(if(eq?(car l2_765) '#:mpis-to-reset)"
"(let-values(((l2_766)(cdr l2_765)))"
"(if(pair? l2_766)"
"(if(eq?(car l2_766) '#:phase)"
"(let-values(((l2_767)(cdr l2_766)))"
"(if(pair? l2_767)"
"(if(eq?(car l2_767) '#:self)"
"(let-values(((l2_768)(cdr l2_767)))"
"(if(pair? l2_768)"
"(if(eq?(car l2_768) '#:tail?)(null?(cdr l2_768)) '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_769 given-args_770 partially-expanded-bodys_771)"
"(unpack90.1 given-kws_769 given-args_770 partially-expanded-bodys_771)))"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_772 self_773)"
"(let-values(((ht_774) need-eventually-defined_772))"
"(begin"
"(if((lambda(ht_775)(hash? ht_775)) ht_774)(void)(let-values()(default-in-hash ht_774)))"
"((letrec-values(((for-loop_776)"
"(lambda(fold-var_777 i_778)"
"(if i_778"
"(let-values(((phase_779 l_780)(hash-iterate-key+value ht_774 i_778)))"
"(if '#t"
"(let-values(((fold-var_781)"
"(let-values(((fold-var_782) fold-var_777))"
"(let-values(((fold-var_783)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_784) l_780))"
"(begin"
"(if(list? lst_784)"
"(void)"
"(let-values()(in-list lst_784)))"
"((letrec-values(((for-loop_785)"
"(lambda(fold-var_786"
" lst_787)"
"(if(pair? lst_787)"
"(let-values(((id_788)"
"(unsafe-car"
" lst_787)))"
"(if '#t"
"(let-values(((fold-var_789)"
"(let-values(((fold-var_790)"
" fold-var_786))"
"(let-values(((fold-var_791)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_792)"
"(let-values(((id409_793)"
" id_788)"
"((phase410_794)"
" phase_779))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" id409_793"
" phase410_794)"
"(resolve+shift15.1"
" id409_793"
" phase410_794)))))"
"(if(if b_792"
"(if(module-binding?"
" b_792)"
"(if(eq?"
"(module-binding-sym"
" b_792)"
"(syntax-e$1"
" id_788))"
"(eq?"
"(module-binding-module"
" b_792)"
" self_773)"
" '#f)"
" '#f)"
" '#f)"
"(void)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"reference to an unbound identifier\""
" id_788)))))"
"(void)))))"
"(values"
" fold-var_791)))))"
"(if '#t"
"(for-loop_785"
" fold-var_789"
"(unsafe-cdr"
" lst_787))"
" fold-var_789))"
" fold-var_786))"
" fold-var_786))))"
" for-loop_785)"
"(void)"
" lst_784))))"
"(void)))))"
"(values fold-var_783)))))"
"(if '#t(for-loop_776 fold-var_781(hash-iterate-next ht_774 i_778)) fold-var_781))"
" fold-var_777))"
" fold-var_777))))"
" for-loop_776)"
"(void)"
"(hash-iterate-first ht_774))))))"
"(define-values"
"(lifted/4.1$3)"
"(make-required"
" 'resolve-provides"
"(case-lambda"
"((self_795 expression-expanded-bodys_796)(apply missing-kw self_795 expression-expanded-bodys_796 null)))"
" '#f"
" '#f))"
"(define-values"
"(resolve-provides107.1)"
"(lambda(ctx98_797"
" declared-submodule-names94_798"
" namespace95_799"
" original92_800"
" phase96_801"
" requires-and-provides93_802"
" self97_803"
" expression-expanded-bodys106_804)"
"(let-values(((expression-expanded-bodys_805) expression-expanded-bodys106_804))"
"(let-values(((s_806) original92_800))"
"(let-values(((requires+provides_807) requires-and-provides93_802))"
"(let-values(((declared-submodule-names_808) declared-submodule-names94_798))"
"(let-values(((m-ns_809) namespace95_799))"
"(let-values(((phase_810) phase96_801))"
"(let-values(((self_811) self97_803))"
"(let-values(((ctx_812) ctx98_797))"
"(let-values()"
"((letrec-values(((loop_813)"
"(lambda(bodys_814 phase_815)"
"(if(null? bodys_814)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_816)(syntax-disarm$1(car bodys_814))))"
"(let-values(((tmp_817)(core-form-sym disarmed-body_816 phase_815)))"
"(if(equal? tmp_817 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_820)"
"(expand-context-observer ctx_812)))"
"(if obs_820"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_820"
" 'enter-prim"
"(car bodys_814)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_821)"
"(expand-context-observer"
" ctx_812)))"
"(if obs_821"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_821"
" 'enter-prim-provide))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((m_818)"
"(match-syntax"
" disarmed-body_816"
" '(#%provide spec ...))))"
"(let-values(((specs_819)"
"(parse-and-expand-provides!"
"(m_818 'spec)"
"(car bodys_814)"
" requires+provides_807"
" self_811"
" phase_815"
"(let-values(((the-struct_822) ctx_812))"
"(if(expand-context? the-struct_822)"
"(let-values(((context411_823)"
" 'top-level)"
"((phase412_824) phase_815)"
"((namespace413_825)"
"(namespace->namespace-at-phase"
" m-ns_809"
" phase_815))"
"((requires+provides414_826)"
" requires+provides_807)"
"((declared-submodule-names415_827)"
" declared-submodule-names_808))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_822)"
"(root-expand-context-post-expansion-scope"
" the-struct_822)"
"(root-expand-context-top-level-bind-scope"
" the-struct_822)"
"(root-expand-context-all-scopes-stx"
" the-struct_822)"
"(root-expand-context-use-site-scopes"
" the-struct_822)"
"(root-expand-context-defined-syms"
" the-struct_822)"
"(root-expand-context-frame-id"
" the-struct_822)"
"(root-expand-context-counter"
" the-struct_822)"
"(root-expand-context-lift-key"
" the-struct_822)"
" context411_823"
" phase412_824"
" namespace413_825"
"(expand-context-env the-struct_822)"
"(expand-context-post-expansion-scope-action"
" the-struct_822)"
"(expand-context-scopes the-struct_822)"
"(expand-context-def-ctx-scopes"
" the-struct_822)"
"(expand-context-reference-records"
" the-struct_822)"
"(expand-context-only-immediate?"
" the-struct_822)"
"(expand-context-just-once?"
" the-struct_822)"
"(expand-context-module-begin-k"
" the-struct_822)"
"(expand-context-need-eventually-defined"
" the-struct_822)"
"(expand-context-allow-unbound?"
" the-struct_822)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_822)"
"(expand-context-stops the-struct_822)"
"(expand-context-current-introduction-scopes"
" the-struct_822)"
" declared-submodule-names415_827"
"(expand-context-lifts the-struct_822)"
"(expand-context-lift-envs"
" the-struct_822)"
"(expand-context-module-lifts"
" the-struct_822)"
"(expand-context-require-lifts"
" the-struct_822)"
"(expand-context-to-module-lifts"
" the-struct_822)"
" requires+provides414_826"
"(expand-context-name the-struct_822)"
"(expand-context-observer"
" the-struct_822)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_822)))"
" expand7.1"
" rebuild101.1)))"
"(begin"
"(let-values(((obs_828)"
"(expand-context-observer ctx_812)))"
"(if obs_828"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_828 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((temp416_829)(car bodys_814))"
"((disarmed-body417_830) disarmed-body_816)"
"((temp418_831)"
"(list*(m_818 '#%provide) specs_819)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" temp416_829"
" disarmed-body417_830"
" temp418_831)"
"(rebuild101.1"
" temp416_829"
" disarmed-body417_830"
" temp418_831)))"
"(loop_813(cdr bodys_814) phase_815))))))))"
"(if(equal? tmp_817 'begin-for-syntax)"
"(let-values()"
"(let-values(((m_832)"
"(match-syntax"
" disarmed-body_816"
" '(begin-for-syntax e ...))))"
"(let-values(((nested-bodys_833)"
"(loop_813(m_832 'e)(add1 phase_815))))"
"(cons"
"(let-values(((temp419_834)(car bodys_814))"
"((disarmed-body420_835) disarmed-body_816)"
"((temp421_836)"
"(list*"
"(m_832 'begin-for-syntax)"
" nested-bodys_833)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" temp419_834"
" disarmed-body420_835"
" temp421_836)"
"(rebuild101.1"
" temp419_834"
" disarmed-body420_835"
" temp421_836)))"
"(loop_813(cdr bodys_814) phase_815)))))"
"(let-values()"
"(cons"
"(car bodys_814)"
"(loop_813(cdr bodys_814) phase_815))))))))))))"
" loop_813)"
" expression-expanded-bodys_805"
" phase_810))))))))))))"
"(define-values"
"(unpack108.1)"
"(lambda(given-kws_837 given-args_838 expression-expanded-bodys106_839)"
"(let-values(((ctx98_840)(car given-args_838))"
"((given-kws_841)(cdr given-kws_837))"
"((given-args_842)(cdr given-args_838)))"
"(let-values(((declared-submodule-names94_843)(car given-args_842))"
"((given-kws_844)(cdr given-kws_841))"
"((given-args_845)(cdr given-args_842)))"
"(let-values(((namespace95_846)(car given-args_845))"
"((given-kws_847)(cdr given-kws_844))"
"((given-args_848)(cdr given-args_845)))"
"(let-values(((original92_849)(car given-args_848))"
"((given-kws_850)(cdr given-kws_847))"
"((given-args_851)(cdr given-args_848)))"
"(let-values(((phase96_852)(car given-args_851))"
"((given-kws_853)(cdr given-kws_850))"
"((given-args_854)(cdr given-args_851)))"
"(let-values(((requires-and-provides93_855)(car given-args_854))"
"((given-kws_856)(cdr given-kws_853))"
"((given-args_857)(cdr given-args_854)))"
"(let-values(((self97_858)(car given-args_857)))"
"(resolve-provides107.1"
" ctx98_840"
" declared-submodule-names94_843"
" namespace95_846"
" original92_849"
" phase96_852"
" requires-and-provides93_855"
" self97_858"
" expression-expanded-bodys106_839))))))))))"
"(define-values"
"(resolve-provides109.1)"
"(lifted/4.1$3"
"(lambda(given-kws_859 given-argc_860)"
"(if(= given-argc_860 '3)"
"(let-values(((l2_861) given-kws_859))"
"(if(pair? l2_861)"
"(if(eq?(car l2_861) '#:ctx)"
"(let-values(((l2_862)(cdr l2_861)))"
"(if(pair? l2_862)"
"(if(eq?(car l2_862) '#:declared-submodule-names)"
"(let-values(((l2_863)(cdr l2_862)))"
"(if(pair? l2_863)"
"(if(eq?(car l2_863) '#:namespace)"
"(let-values(((l2_864)(cdr l2_863)))"
"(if(pair? l2_864)"
"(if(eq?(car l2_864) '#:original)"
"(let-values(((l2_865)(cdr l2_864)))"
"(if(pair? l2_865)"
"(if(eq?(car l2_865) '#:phase)"
"(let-values(((l2_866)(cdr l2_865)))"
"(if(pair? l2_866)"
"(if(eq?(car l2_866) '#:requires-and-provides)"
"(let-values(((l2_867)(cdr l2_866)))"
"(if(pair? l2_867)"
"(if(eq?(car l2_867) '#:self)(null?(cdr l2_867)) '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_868 given-args_869 expression-expanded-bodys_870)"
"(unpack108.1 given-kws_868 given-args_869 expression-expanded-bodys_870)))"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/5.1)"
"(make-required"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_871 fully-expanded-bodys-except-post-submodules_872)"
"(apply missing-kw self_871 fully-expanded-bodys-except-post-submodules_872 null)))"
" '#f"
" '#f))"
"(define-values"
"(declare-module-for-expansion125.1)"
"(lambda(enclosing115_873"
" module-begin-match111_874"
" module-match110_875"
" namespace113_876"
" requires-and-provides112_877"
" root-ctx116_878"
" self114_879"
" fully-expanded-bodys-except-post-submodules124_880)"
"(let-values(((fully-expanded-bodys-except-post-submodules_881) fully-expanded-bodys-except-post-submodules124_880))"
"(let-values(((m_882) module-match110_875))"
"(let-values(((mb-m_883) module-begin-match111_874))"
"(let-values(((requires+provides_884) requires-and-provides112_877))"
"(let-values(((m-ns_885) namespace113_876))"
"(let-values(((self_886) self114_879))"
"(let-values(((enclosing-self_887) enclosing115_873))"
"(let-values(((root-ctx_888) root-ctx116_878))"
"(let-values()"
"(let-values(((tmp-mod_889)"
"(attach-root-expand-context-properties"
"(attach-require-provide-properties"
" requires+provides_884"
"(datum->syntax$2"
" '#f"
"(list"
"(datum->syntax$2 core-stx 'module)"
"(m_882 'id:module-name)"
"(m_882 'initial-require)"
"(list*"
"(mb-m_883 '#%module-begin)"
" fully-expanded-bodys-except-post-submodules_881)))"
" self_886"
" self_886)"
" root-ctx_888"
" self_886"
" self_886)))"
"(let-values(((module-name_890)"
"(1/module-path-index-resolve"
"(let-values(((or-part_892) enclosing-self_887))"
"(if or-part_892 or-part_892 self_886)))))"
"(let-values(((root-module-name_891)(resolved-module-path-root-name module-name_890)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" 1/current-namespace"
" m-ns_885"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_891))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:875:4_893) eval-module10.1)"
"((temp422_894)"
"(let-values(((...er/expand/module.rkt:876:5_896) compile-module11.1)"
"((tmp-mod424_897) tmp-mod_889)"
"((temp425_898)"
"(let-values(((...er/expand/module.rkt:877:21_901)"
" make-compile-context16.1)"
"((m-ns428_902) m-ns_885)"
"((enclosing-self429_903) enclosing-self_887)"
"((temp430_904)"
"(if enclosing-self_887"
"(1/resolved-module-path-name module-name_890)"
" '#f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" temp430_904"
" '#t"
" '#f"
" '#f"
" enclosing-self429_903"
" '#t"
" m-ns428_902"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:877:21_901"
" keyword-procedure-extract"
" '(#:full-module-name #:module-self #:namespace)"
" '2)"
" '(#:full-module-name #:module-self #:namespace)"
"(list temp430_904 enclosing-self429_903 m-ns428_902)))))"
"((self426_899) self_886)"
"((temp427_900) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module11.1))"
"(compile-module9.1"
" temp427_900"
" '#t"
" self426_899"
" '#t"
" '#f"
" '#f"
" tmp-mod424_897"
" temp425_898)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:876:5_896"
" keyword-procedure-extract"
" '(#:as-submodule? #:self)"
" '4)"
" '(#:as-submodule? #:self)"
"(list temp427_900 self426_899)"
" tmp-mod424_897"
" temp425_898))))"
"((temp423_895) '#t))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 temp423_895 '#t '#f '#f '#f '#f temp422_894)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:875:4_893"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" '3)"
" '(#:as-submodule?)"
"(list temp423_895)"
" temp422_894)))))))))))))))))))"
"(define-values"
"(unpack126.1)"
"(lambda(given-kws_905 given-args_906 fully-expanded-bodys-except-post-submodules124_907)"
"(let-values(((enclosing115_908)(car given-args_906))"
"((given-kws_909)(cdr given-kws_905))"
"((given-args_910)(cdr given-args_906)))"
"(let-values(((module-begin-match111_911)(car given-args_910))"
"((given-kws_912)(cdr given-kws_909))"
"((given-args_913)(cdr given-args_910)))"
"(let-values(((module-match110_914)(car given-args_913))"
"((given-kws_915)(cdr given-kws_912))"
"((given-args_916)(cdr given-args_913)))"
"(let-values(((namespace113_917)(car given-args_916))"
"((given-kws_918)(cdr given-kws_915))"
"((given-args_919)(cdr given-args_916)))"
"(let-values(((requires-and-provides112_920)(car given-args_919))"
"((given-kws_921)(cdr given-kws_918))"
"((given-args_922)(cdr given-args_919)))"
"(let-values(((root-ctx116_923)(car given-args_922))"
"((given-kws_924)(cdr given-kws_921))"
"((given-args_925)(cdr given-args_922)))"
"(let-values(((self114_926)(car given-args_925)))"
"(declare-module-for-expansion125.1"
" enclosing115_908"
" module-begin-match111_911"
" module-match110_914"
" namespace113_917"
" requires-and-provides112_920"
" root-ctx116_923"
" self114_926"
" fully-expanded-bodys-except-post-submodules124_907))))))))))"
"(define-values"
"(declare-module-for-expansion127.1)"
"(lifted/5.1"
"(lambda(given-kws_927 given-argc_928)"
"(if(= given-argc_928 '3)"
"(let-values(((l2_929) given-kws_927))"
"(if(pair? l2_929)"
"(if(eq?(car l2_929) '#:enclosing)"
"(let-values(((l2_930)(cdr l2_929)))"
"(if(pair? l2_930)"
"(if(eq?(car l2_930) '#:module-begin-match)"
"(let-values(((l2_931)(cdr l2_930)))"
"(if(pair? l2_931)"
"(if(eq?(car l2_931) '#:module-match)"
"(let-values(((l2_932)(cdr l2_931)))"
"(if(pair? l2_932)"
"(if(eq?(car l2_932) '#:namespace)"
"(let-values(((l2_933)(cdr l2_932)))"
"(if(pair? l2_933)"
"(if(eq?(car l2_933) '#:requires-and-provides)"
"(let-values(((l2_934)(cdr l2_933)))"
"(if(pair? l2_934)"
"(if(eq?(car l2_934) '#:root-ctx)"
"(let-values(((l2_935)(cdr l2_934)))"
"(if(pair? l2_935)"
"(if(eq?(car l2_935) '#:self)(null?(cdr l2_935)) '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_936 given-args_937 fully-expanded-bodys-except-post-submodules_938)"
"(unpack126.1 given-kws_936 given-args_937 fully-expanded-bodys-except-post-submodules_938)))"
" '(#:enclosing #:module-begin-match #:module-match #:namespace #:requires-and-provides #:root-ctx #:self)"
" '(#:enclosing #:module-begin-match #:module-match #:namespace #:requires-and-provides #:root-ctx #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_939 root-ctx_940 orig-self_941 new-self_942)"
"(syntax-property$1"
" s_939"
" 'module-root-expand-context"
"(root-expand-context-encode-for-module root-ctx_940 orig-self_941 new-self_942))))"
"(define-values"
"(lifted/6.1)"
"(make-required"
" 'expand-post-submodules"
"(case-lambda"
"((self_943 fully-expanded-bodys-except-post-submodules_944)"
"(apply missing-kw self_943 fully-expanded-bodys-except-post-submodules_944 null)))"
" '#f"
" '#f))"
"(define-values"
"(expand-post-submodules147.1)"
"(lambda(ctx136_945"
" declare-enclosing128_946"
" declared-submodule-names135_947"
" enclosing-is-cross-phase-persistent?133_948"
" mpis-to-reset134_949"
" original129_950"
" phase130_951"
" requires-and-provides132_952"
" self131_953"
" fully-expanded-bodys-except-post-submodules146_954)"
"(let-values(((fully-expanded-bodys-except-post-submodules_955) fully-expanded-bodys-except-post-submodules146_954))"
"(let-values(((declare-enclosing-module_956) declare-enclosing128_946))"
"(let-values(((s_957) original129_950))"
"(let-values(((phase_958) phase130_951))"
"(let-values(((self_959) self131_953))"
"(let-values(((requires+provides_960) requires-and-provides132_952))"
"(let-values(((enclosing-is-cross-phase-persistent?_961) enclosing-is-cross-phase-persistent?133_948))"
"(let-values(((mpis-to-reset_962) mpis-to-reset134_949))"
"(let-values(((declared-submodule-names_963) declared-submodule-names135_947))"
"(let-values(((submod-ctx_964) ctx136_945))"
"(let-values()"
"((letrec-values(((loop_965)"
"(lambda(bodys_966 phase_967)"
"(if(null? bodys_966)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_968)(syntax-disarm$1(car bodys_966))))"
"(let-values(((tmp_969)"
"(core-form-sym disarmed-body_968 phase_967)))"
"(if(equal? tmp_969 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force declare-enclosing-module_956)"
"(values))))"
"(let-values(((ready-body_970)"
"(remove-use-site-scopes"
"(car bodys_966)"
" submod-ctx_964)))"
"(let-values(((submod_971)"
"(if(try-match-syntax"
" disarmed-body_968"
" '(module* name #f . _))"
"(let-values()"
"(let-values(((neg-phase_972)"
"(phase- '0 phase_967)))"
"(let-values(((shifted-s_973)"
"(syntax-shift-phase-level$1"
" ready-body_970"
" neg-phase_972)))"
"(let-values(((submod_974)"
"(let-values(((...er/expand/module.rkt:922:15_975)"
" expand-submodule175.1)"
"((shifted-s431_976)"
" shifted-s_973)"
"((self432_977)"
" self_959)"
"((submod-ctx433_978)"
" submod-ctx_964)"
"((temp434_979)"
" '#t)"
"((neg-phase435_980)"
" neg-phase_972)"
"((requires+provides436_981)"
" requires+provides_960)"
"((enclosing-is-cross-phase-persistent?437_982)"
" enclosing-is-cross-phase-persistent?_961)"
"((mpis-to-reset438_983)"
" mpis-to-reset_962)"
"((declared-submodule-names439_984)"
" declared-submodule-names_963))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule175.1))"
"(expand-submodule173.1"
" declared-submodule-names439_984"
" enclosing-is-cross-phase-persistent?437_982"
" '#t"
" requires+provides436_981"
" '#t"
" temp434_979"
" neg-phase435_980"
" '#t"
" mpis-to-reset438_983"
" shifted-s431_976"
" self432_977"
" submod-ctx433_978)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:922:15_975"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
" '5)"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names439_984"
" enclosing-is-cross-phase-persistent?437_982"
" requires+provides436_981"
" temp434_979"
" neg-phase435_980"
" mpis-to-reset438_983)"
" shifted-s431_976"
" self432_977"
" submod-ctx433_978)))))"
"(syntax-shift-phase-level$1"
" submod_974"
" phase_967)))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:931:13_985)"
" expand-submodule175.1)"
"((ready-body440_986)"
" ready-body_970)"
"((self441_987) self_959)"
"((submod-ctx442_988)"
" submod-ctx_964)"
"((temp443_989) '#t)"
"((mpis-to-reset444_990)"
" mpis-to-reset_962)"
"((declared-submodule-names445_991)"
" declared-submodule-names_963))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule175.1))"
"(expand-submodule173.1"
" declared-submodule-names445_991"
" '#f"
" '#f"
" '#f"
" '#f"
" temp443_989"
" '#f"
" '#f"
" mpis-to-reset444_990"
" ready-body440_986"
" self441_987"
" submod-ctx442_988)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:931:13_985"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" '5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names445_991"
" temp443_989"
" mpis-to-reset444_990)"
" ready-body440_986"
" self441_987"
" submod-ctx442_988)))))))"
"(cons"
" submod_971"
"(loop_965(cdr bodys_966) phase_967))))))"
"(if(equal? tmp_969 'begin-for-syntax)"
"(let-values()"
"(let-values(((m_992)"
"(match-syntax"
" disarmed-body_968"
" '(begin-for-syntax e ...))))"
"(let-values(((nested-bodys_993)"
"(loop_965(m_992 'e)(add1 phase_967))))"
"(cons"
"(let-values(((temp446_994)(car bodys_966))"
"((disarmed-body447_995) disarmed-body_968)"
"((temp448_996)"
"(list*"
"(m_992 'begin-for-syntax)"
" nested-bodys_993)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" '#f"
" '#f"
" temp446_994"
" disarmed-body447_995"
" temp448_996)"
"(rebuild101.1"
" temp446_994"
" disarmed-body447_995"
" temp448_996)))"
"(loop_965(cdr bodys_966) phase_967)))))"
"(let-values()"
"(cons"
"(car bodys_966)"
"(loop_965(cdr bodys_966) phase_967))))))))))))"
" loop_965)"
" fully-expanded-bodys-except-post-submodules_955"
" phase_958))))))))))))))"
"(define-values"
"(unpack148.1)"
"(lambda(given-kws_997 given-args_998 fully-expanded-bodys-except-post-submodules146_999)"
"(let-values(((ctx136_1000)(car given-args_998))"
"((given-kws_1001)(cdr given-kws_997))"
"((given-args_1002)(cdr given-args_998)))"
"(let-values(((declare-enclosing128_1003)(car given-args_1002))"
"((given-kws_1004)(cdr given-kws_1001))"
"((given-args_1005)(cdr given-args_1002)))"
"(let-values(((declared-submodule-names135_1006)(car given-args_1005))"
"((given-kws_1007)(cdr given-kws_1004))"
"((given-args_1008)(cdr given-args_1005)))"
"(let-values(((enclosing-is-cross-phase-persistent?133_1009)(car given-args_1008))"
"((given-kws_1010)(cdr given-kws_1007))"
"((given-args_1011)(cdr given-args_1008)))"
"(let-values(((mpis-to-reset134_1012)(car given-args_1011))"
"((given-kws_1013)(cdr given-kws_1010))"
"((given-args_1014)(cdr given-args_1011)))"
"(let-values(((original129_1015)(car given-args_1014))"
"((given-kws_1016)(cdr given-kws_1013))"
"((given-args_1017)(cdr given-args_1014)))"
"(let-values(((phase130_1018)(car given-args_1017))"
"((given-kws_1019)(cdr given-kws_1016))"
"((given-args_1020)(cdr given-args_1017)))"
"(let-values(((requires-and-provides132_1021)(car given-args_1020))"
"((given-kws_1022)(cdr given-kws_1019))"
"((given-args_1023)(cdr given-args_1020)))"
"(let-values(((self131_1024)(car given-args_1023)))"
"(expand-post-submodules147.1"
" ctx136_1000"
" declare-enclosing128_1003"
" declared-submodule-names135_1006"
" enclosing-is-cross-phase-persistent?133_1009"
" mpis-to-reset134_1012"
" original129_1015"
" phase130_1018"
" requires-and-provides132_1021"
" self131_1024"
" fully-expanded-bodys-except-post-submodules146_999))))))))))))"
"(define-values"
"(expand-post-submodules149.1)"
"(lifted/6.1"
"(lambda(given-kws_1025 given-argc_1026)"
"(if(= given-argc_1026 '3)"
"(let-values(((l2_1027) given-kws_1025))"
"(if(pair? l2_1027)"
"(if(eq?(car l2_1027) '#:ctx)"
"(let-values(((l2_1028)(cdr l2_1027)))"
"(if(pair? l2_1028)"
"(if(eq?(car l2_1028) '#:declare-enclosing)"
"(let-values(((l2_1029)(cdr l2_1028)))"
"(if(pair? l2_1029)"
"(if(eq?(car l2_1029) '#:declared-submodule-names)"
"(let-values(((l2_1030)(cdr l2_1029)))"
"(if(pair? l2_1030)"
"(if(eq?(car l2_1030) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1031)(cdr l2_1030)))"
"(if(pair? l2_1031)"
"(if(eq?(car l2_1031) '#:mpis-to-reset)"
"(let-values(((l2_1032)(cdr l2_1031)))"
"(if(pair? l2_1032)"
"(if(eq?(car l2_1032) '#:original)"
"(let-values(((l2_1033)(cdr l2_1032)))"
"(if(pair? l2_1033)"
"(if(eq?(car l2_1033) '#:phase)"
"(let-values(((l2_1034)(cdr l2_1033)))"
"(if(pair? l2_1034)"
"(if(eq?(car l2_1034) '#:requires-and-provides)"
"(let-values(((l2_1035)(cdr l2_1034)))"
"(if(pair? l2_1035)"
"(if(eq?(car l2_1035) '#:self)(null?(cdr l2_1035)) '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_1036 given-args_1037 fully-expanded-bodys-except-post-submodules_1038)"
"(unpack148.1 given-kws_1036 given-args_1037 fully-expanded-bodys-except-post-submodules_1038)))"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1039)"
"(free-id-set-member?"
"(expand-context-stops ctx_1039)"
"(expand-context-phase ctx_1039)"
"(syntax-shift-phase-level$1(datum->syntax$2 core-stx 'module*)(expand-context-phase ctx_1039)))))"
"(define-values"
"(lifted/7.1)"
"(make-required"
" 'check-ids-unbound"
"(case-lambda"
"((self_1040 ids_1041 phase_1042 requires+provides_1043)"
"(apply missing-kw self_1040 ids_1041 phase_1042 requires+provides_1043 null)))"
" '#f"
" '#f))"
"(define-values"
"(check-ids-unbound155.1)"
"(lambda(in150_1044 ids152_1045 phase153_1046 requires+provides154_1047)"
"(let-values(((ids_1048) ids152_1045))"
"(let-values(((phase_1049) phase153_1046))"
"(let-values(((requires+provides_1050) requires+provides154_1047))"
"(let-values(((s_1051) in150_1044))"
"(let-values()"
"(let-values(((lst_1052) ids_1048))"
"(begin"
"(if(list? lst_1052)(void)(let-values()(in-list lst_1052)))"
"((letrec-values(((for-loop_1053)"
"(lambda(fold-var_1054 lst_1055)"
"(if(pair? lst_1055)"
"(let-values(((id_1056)(unsafe-car lst_1055)))"
"(if '#t"
"(let-values(((fold-var_1057)"
"(let-values(((fold-var_1058) fold-var_1054))"
"(let-values(((fold-var_1059)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...er/expand/module.rkt:956:4_1060)"
" check-not-defined51.1)"
"((requires+provides449_1061)"
" requires+provides_1050)"
"((id450_1062) id_1056)"
"((phase451_1063)"
" phase_1049)"
"((s452_1064) s_1051))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined51.1))"
"(check-not-defined49.1"
" '#f"
" '#f"
" s452_1064"
" '#f"
" '#f"
" requires+provides449_1061"
" id450_1062"
" phase451_1063)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:956:4_1060"
" keyword-procedure-extract"
" '(#:in)"
" '5)"
" '(#:in)"
"(list s452_1064)"
" requires+provides449_1061"
" id450_1062"
" phase451_1063))))"
"(void)))))"
"(values fold-var_1059)))))"
"(if '#t"
"(for-loop_1053 fold-var_1057(unsafe-cdr lst_1055))"
" fold-var_1057))"
" fold-var_1054))"
" fold-var_1054))))"
" for-loop_1053)"
"(void)"
" lst_1052))))))))))"
"(define-values"
"(unpack156.1)"
"(lambda(given-kws_1065 given-args_1066 ids152_1067 phase153_1068 requires+provides154_1069)"
"(let-values(((in150_1070)(car given-args_1066)))"
"(check-ids-unbound155.1 in150_1070 ids152_1067 phase153_1068 requires+provides154_1069))))"
"(define-values"
"(check-ids-unbound157.1)"
"(lifted/7.1"
"(lambda(given-kws_1071 given-argc_1072)"
"(if(= given-argc_1072 '5)"
"(let-values(((l2_1073) given-kws_1071))"
"(if(pair? l2_1073)(if(eq?(car l2_1073) '#:in)(null?(cdr l2_1073)) '#f) '#f))"
" '#f))"
"(case-lambda"
"((given-kws_1074 given-args_1075 ids_1076 phase_1077 requires+provides_1078)"
"(unpack156.1 given-kws_1074 given-args_1075 ids_1076 phase_1077 requires+provides_1078)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1079 phase_1080 m-ns_1081 self_1082 ctx_1083)"
"(let-values(((lst_1084) bodys_1079))"
"(begin"
"(if(list? lst_1084)(void)(let-values()(in-list lst_1084)))"
"((letrec-values(((for-loop_1085)"
"(lambda(fold-var_1086 lst_1087)"
"(if(pair? lst_1087)"
"(let-values(((body_1088)(unsafe-car lst_1087)))"
"(if '#t"
"(let-values(((fold-var_1089)"
"(let-values(((fold-var_1090) fold-var_1086))"
"(let-values(((fold-var_1091)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((disarmed-body_1092)"
"(syntax-disarm$1 body_1088)))"
"(let-values(((tmp_1093)"
"(core-form-sym"
" disarmed-body_1092"
" phase_1080)))"
"(if(equal? tmp_1093 'define-values)"
"(let-values()"
"(let-values(((m_1094)"
"(match-syntax"
" disarmed-body_1092"
" '(define-values"
"(id ...)"
" rhs))))"
"(let-values(((ids_1095)(m_1094 'id)))"
"(let-values(((vals_1096)"
"(eval-for-bindings"
" ids_1095"
"(m_1094 'rhs)"
" phase_1080"
" m-ns_1081"
" ctx_1083)))"
"(let-values(((lst_1097) ids_1095)"
"((lst_1098) vals_1096))"
"(begin"
"(if(list? lst_1097)"
"(void)"
"(let-values()"
"(in-list lst_1097)))"
"(if(list? lst_1098)"
"(void)"
"(let-values()"
"(in-list lst_1098)))"
"((letrec-values(((for-loop_1099)"
"(lambda(fold-var_1100"
" lst_1101"
" lst_1102)"
"(if(if(pair?"
" lst_1101)"
"(pair?"
" lst_1102)"
" '#f)"
"(let-values(((id_1103)"
"(unsafe-car"
" lst_1101))"
"((val_1104)"
"(unsafe-car"
" lst_1102)))"
"(if(if '#t"
" '#t"
" '#f)"
"(let-values(((fold-var_1105)"
"(let-values(((fold-var_1106)"
" fold-var_1100))"
"(let-values(((fold-var_1107)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1108)"
"(let-values(((id453_1109)"
" id_1103)"
"((phase454_1110)"
" phase_1080))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve23.1))"
"(resolve21.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" id453_1109"
" phase454_1110)"
"(resolve23.1"
" id453_1109"
" phase454_1110)))))"
"(begin"
"(if(if(module-binding?"
" b_1108)"
"(equal?"
" self_1082"
"(module-binding-module"
" b_1108))"
" '#f)"
"(void)"
"(let-values()"
"(error"
" '\"internal error: nested binding is not to self\")))"
"(namespace-set-variable!"
" m-ns_1081"
" phase_1080"
"(module-binding-sym"
" b_1108)"
" val_1104))))"
"(void)))))"
"(values"
" fold-var_1107)))))"
"(if(if '#t"
" '#t"
" '#f)"
"(for-loop_1099"
" fold-var_1105"
"(unsafe-cdr"
" lst_1101)"
"(unsafe-cdr"
" lst_1102))"
" fold-var_1105))"
" fold-var_1100))"
" fold-var_1100))))"
" for-loop_1099)"
"(void)"
" lst_1097"
" lst_1098)))))))"
"(if(equal? tmp_1093 'define-syntaxes)"
"(let-values()(void))"
"(if(if(equal? tmp_1093 '#%provide)"
" '#t"
"(if(equal? tmp_1093 '#%require)"
" '#t"
"(if(equal? tmp_1093 'module)"
" '#t"
"(if(equal? tmp_1093 'module*)"
" '#t"
"(if(equal?"
" tmp_1093"
" 'begin-for-syntax)"
" '#t"
"(equal?"
" tmp_1093"
" '#%declare))))))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" '#f"
" parameterization-key)"
" current-expand-context"
" ctx_1083"
" 1/current-namespace"
" m-ns_1081)"
"(let-values()"
"(eval-top"
"(compile-single"
" body_1088"
"(let-values(((...er/expand/module.rkt:988:31_1111)"
" make-compile-context16.1)"
"((m-ns455_1112)"
" m-ns_1081)"
"((phase456_1113)"
" phase_1080))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context16.1))"
"(make-compile-context14.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" m-ns455_1112"
" '#t"
" phase456_1113"
" '#t"
" '#f"
" '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:988:31_1111"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" '2)"
" '(#:namespace #:phase)"
"(list"
" m-ns455_1112"
" phase456_1113)))))"
" m-ns_1081))))))))))"
"(void)))))"
"(values fold-var_1091)))))"
"(if '#t(for-loop_1085 fold-var_1089(unsafe-cdr lst_1087)) fold-var_1089))"
" fold-var_1086))"
" fold-var_1086))))"
" for-loop_1085)"
"(void)"
" lst_1084)))))"
"(define-values"
"(lifted/8.1)"
"(make-required"
" 'expand-submodule"
"(case-lambda((self_1114 s_1115 self_1116 ctx_1117)(apply missing-kw self_1114 s_1115 self_1116 ctx_1117 null)))"
" '#f"
" '#f))"
"(define-values"
"(expand-submodule173.1)"
"(lambda(declared-submodule-names163_1118"
" enclosing-is-cross-phase-persistent?161_1119"
" enclosing-is-cross-phase-persistent?167_1120"
" enclosing-requires+provides160_1121"
" enclosing-requires+provides166_1122"
" is-star?158_1123"
" keep-enclosing-scope-at-phase159_1124"
" keep-enclosing-scope-at-phase165_1125"
" mpis-to-reset162_1126"
" s170_1127"
" self171_1128"
" ctx172_1129)"
"(let-values(((s_1130) s170_1127))"
"(let-values(((self_1131) self171_1128))"
"(let-values(((ctx_1132) ctx172_1129))"
"(let-values(((is-star?_1133) is-star?158_1123))"
"(let-values(((keep-enclosing-scope-at-phase_1134)"
"(if keep-enclosing-scope-at-phase165_1125 keep-enclosing-scope-at-phase159_1124 '#f)))"
"(let-values(((enclosing-r+p_1135)"
"(if enclosing-requires+provides166_1122 enclosing-requires+provides160_1121 '#f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1136)"
"(if enclosing-is-cross-phase-persistent?167_1120"
" enclosing-is-cross-phase-persistent?161_1119"
" '#f)))"
"(let-values(((mpis-to-reset_1137) mpis-to-reset162_1126))"
"(let-values(((declared-submodule-names_1138) declared-submodule-names163_1118))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1145)(expand-context-observer ctx_1132)))"
"(if obs_1145"
"(let-values()"
"(if '#t"
"(let-values()(call-expand-observe obs_1145 'enter-prim s_1130))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1146)(expand-context-observer ctx_1132)))"
"(if obs_1146"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe"
" obs_1146"
"(if is-star?_1133 'enter-prim-submodule* 'enter-prim-submodule)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((m_1139)(match-syntax s_1130 '(module name . _))))"
"(let-values(((name_1140)(syntax-e$1(m_1139 'name))))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1138 name_1140 '#f)"
"(let-values()"
"(1/raise-syntax-error"
" '#f"
" '\"submodule already declared with the same name\""
" s_1130"
" name_1140))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1138"
" name_1140"
"(syntax-e$1(m_1139 'module)))"
"(values))))"
"(let-values(((submod_1141)"
"(let-values(((...er/expand/module.rkt:1013:4_1147) expand-module14.1)"
"((s457_1148) s_1130)"
"((temp458_1149)"
"(let-values(((the-struct_1155) ctx_1132))"
"(if(expand-context? the-struct_1155)"
"(let-values(((context464_1156) 'module)"
"((only-immediate?465_1157) '#f)"
"((post-expansion-scope466_1158) '#f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1155)"
" post-expansion-scope466_1158"
"(root-expand-context-top-level-bind-scope"
" the-struct_1155)"
"(root-expand-context-all-scopes-stx"
" the-struct_1155)"
"(root-expand-context-use-site-scopes"
" the-struct_1155)"
"(root-expand-context-defined-syms"
" the-struct_1155)"
"(root-expand-context-frame-id the-struct_1155)"
"(root-expand-context-counter the-struct_1155)"
"(root-expand-context-lift-key the-struct_1155)"
" context464_1156"
"(expand-context-phase the-struct_1155)"
"(expand-context-namespace the-struct_1155)"
"(expand-context-env the-struct_1155)"
"(expand-context-post-expansion-scope-action"
" the-struct_1155)"
"(expand-context-scopes the-struct_1155)"
"(expand-context-def-ctx-scopes the-struct_1155)"
"(expand-context-reference-records"
" the-struct_1155)"
" only-immediate?465_1157"
"(expand-context-just-once? the-struct_1155)"
"(expand-context-module-begin-k the-struct_1155)"
"(expand-context-need-eventually-defined"
" the-struct_1155)"
"(expand-context-allow-unbound? the-struct_1155)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1155)"
"(expand-context-stops the-struct_1155)"
"(expand-context-current-introduction-scopes"
" the-struct_1155)"
"(expand-context-declared-submodule-names"
" the-struct_1155)"
"(expand-context-lifts the-struct_1155)"
"(expand-context-lift-envs the-struct_1155)"
"(expand-context-module-lifts the-struct_1155)"
"(expand-context-require-lifts the-struct_1155)"
"(expand-context-to-module-lifts the-struct_1155)"
"(expand-context-requires+provides"
" the-struct_1155)"
"(expand-context-name the-struct_1155)"
"(expand-context-observer the-struct_1155)))"
"(raise-argument-error"
" 'struct-copy"
" '\"expand-context?\""
" the-struct_1155))))"
"((self459_1150) self_1131)"
"((keep-enclosing-scope-at-phase460_1151)"
" keep-enclosing-scope-at-phase_1134)"
"((enclosing-r+p461_1152) enclosing-r+p_1135)"
"((enclosing-is-cross-phase-persistent?462_1153)"
" enclosing-is-cross-phase-persistent?_1136)"
"((mpis-to-reset463_1154) mpis-to-reset_1137))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-module14.1))"
"(expand-module12.1"
" enclosing-is-cross-phase-persistent?462_1153"
" '#t"
" enclosing-r+p461_1152"
" '#t"
" keep-enclosing-scope-at-phase460_1151"
" '#t"
" mpis-to-reset463_1154"
" '#t"
" s457_1148"
" temp458_1149"
" self459_1150)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1013:4_1147"
" keyword-procedure-extract"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
" '5)"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(list"
" enclosing-is-cross-phase-persistent?462_1153"
" enclosing-r+p461_1152"
" keep-enclosing-scope-at-phase460_1151"
" mpis-to-reset463_1154)"
" s457_1148"
" temp458_1149"
" self459_1150)))))"
"(let-values(((ns_1142)(expand-context-namespace ctx_1132)))"
"(let-values(((module-name_1143)(1/module-path-index-resolve self_1131)))"
"(let-values(((root-module-name_1144)"
"(resolved-module-path-root-name module-name_1143)))"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first '#f parameterization-key)"
" 1/current-namespace"
" ns_1142"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1144))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1031:4_1159) eval-module10.1)"
"((temp467_1160)"
"(let-values(((...er/expand/module.rkt:1032:5_1162)"
" compile-module11.1)"
"((submod469_1163) submod_1141)"
"((temp470_1164)"
"(let-values(((...er/expand/module.rkt:1033:21_1166)"
" make-compile-context16.1)"
"((ns472_1167) ns_1142)"
"((self473_1168) self_1131)"
"((temp474_1169)"
"(1/resolved-module-path-name"
" module-name_1143)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context16.1))"
"(make-compile-context14.1"
" temp474_1169"
" '#t"
" '#f"
" '#f"
" self473_1168"
" '#t"
" ns472_1167"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1033:21_1166"
" keyword-procedure-extract"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
" '2)"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
"(list"
" temp474_1169"
" self473_1168"
" ns472_1167)))))"
"((temp471_1165) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module11.1))"
"(compile-module9.1"
" temp471_1165"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" submod469_1163"
" temp470_1164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1032:5_1162"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" '4)"
" '(#:as-submodule?)"
"(list temp471_1165)"
" submod469_1163"
" temp470_1164))))"
"((temp468_1161) '#t))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-module10.1))"
"(eval-module8.1 temp468_1161 '#t '#f '#f '#f '#f temp467_1160)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1031:4_1159"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" '3)"
" '(#:as-submodule?)"
"(list temp468_1161)"
" temp467_1160)))))"
"(let-values(((obs_1170)(expand-context-observer ctx_1132)))"
"(if obs_1170"
"(let-values()"
"(if '#t"
"(let-values()"
"(call-expand-observe obs_1170 'exit-prim submod_1141))"
"(void)))"
"(void)))"
" submod_1141)))))))))))))))))))))))"
"(define-values"
"(unpack174.1)"
"(lambda(given-kws_1171 given-args_1172 s170_1173 self171_1174 ctx172_1175)"
"(let-values(((declared-submodule-names163_1176)(car given-args_1172))"
"((given-kws_1177)(cdr given-kws_1171))"
"((given-args_1178)(cdr given-args_1172)))"
"(let-values(((enclosing-is-cross-phase-persistent?167_1179)"
"(if(pair? given-kws_1177)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1177)) '#f)))"
"(let-values(((enclosing-is-cross-phase-persistent?161_1180)"
"(if enclosing-is-cross-phase-persistent?167_1179(car given-args_1178)(void)))"
"((given-kws_1181)"
"(if enclosing-is-cross-phase-persistent?167_1179(cdr given-kws_1177) given-kws_1177))"
"((given-args_1182)"
"(if enclosing-is-cross-phase-persistent?167_1179(cdr given-args_1178) given-args_1178)))"
"(let-values(((enclosing-requires+provides166_1183)"
"(if(pair? given-kws_1181)(eq? '#:enclosing-requires+provides(car given-kws_1181)) '#f)))"
"(let-values(((enclosing-requires+provides160_1184)"
"(if enclosing-requires+provides166_1183(car given-args_1182)(void)))"
"((given-kws_1185)(if enclosing-requires+provides166_1183(cdr given-kws_1181) given-kws_1181))"
"((given-args_1186)"
"(if enclosing-requires+provides166_1183(cdr given-args_1182) given-args_1182)))"
"(let-values(((is-star?158_1187)(car given-args_1186))"
"((given-kws_1188)(cdr given-kws_1185))"
"((given-args_1189)(cdr given-args_1186)))"
"(let-values(((keep-enclosing-scope-at-phase165_1190)"
"(if(pair? given-kws_1188)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1188))"
" '#f)))"
"(let-values(((keep-enclosing-scope-at-phase159_1191)"
"(if keep-enclosing-scope-at-phase165_1190(car given-args_1189)(void)))"
"((given-kws_1192)"
"(if keep-enclosing-scope-at-phase165_1190(cdr given-kws_1188) given-kws_1188))"
"((given-args_1193)"
"(if keep-enclosing-scope-at-phase165_1190(cdr given-args_1189) given-args_1189)))"
"(let-values(((mpis-to-reset162_1194)(car given-args_1193)))"
"(expand-submodule173.1"
" declared-submodule-names163_1176"
" enclosing-is-cross-phase-persistent?161_1180"
" enclosing-is-cross-phase-persistent?167_1179"
" enclosing-requires+provides160_1184"
" enclosing-requires+provides166_1183"
" is-star?158_1187"
" keep-enclosing-scope-at-phase159_1191"
" keep-enclosing-scope-at-phase165_1190"
" mpis-to-reset162_1194"
" s170_1173"
" self171_1174"
" ctx172_1175))))))))))))"
"(define-values"
"(expand-submodule175.1)"
"(lifted/8.1"
"(lambda(given-kws_1195 given-argc_1196)"
"(if(= given-argc_1196 '5)"
"(subsets?"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" given-kws_1195"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset))"
" '#f))"
"(case-lambda"
"((given-kws_1197 given-args_1198 s_1199 self_1200 ctx_1201)"
"(unpack174.1 given-kws_1197 given-args_1198 s_1199 self_1200 ctx_1201)))"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/9.1)"
"(make-required"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1202 bodys_1203 phase_1204 self_1205 ctx_1206)"
"(apply missing-kw self_1202 bodys_1203 phase_1204 self_1205 ctx_1206 null)))"
" '#f"
" '#f))"
"(define-values"
"(expand-non-module*-submodules184.1)"
"(lambda(declared-submodule-names177_1207 mpis-to-reset176_1208 bodys180_1209 phase181_1210 self182_1211 ctx183_1212)"
"(let-values(((bodys_1213) bodys180_1209))"
"(let-values(((phase_1214) phase181_1210))"
"(let-values(((self_1215) self182_1211))"
"(let-values(((ctx_1216) ctx183_1212))"
"(let-values(((mpis-to-reset_1217) mpis-to-reset176_1208))"
"(let-values(((declared-submodule-names_1218) declared-submodule-names177_1207))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_1219) bodys_1213))"
"(begin"
"(if(list? lst_1219)(void)(let-values()(in-list lst_1219)))"
"((letrec-values(((for-loop_1220)"
"(lambda(fold-var_1221 lst_1222)"
"(if(pair? lst_1222)"
"(let-values(((body_1223)(unsafe-car lst_1222)))"
"(if '#t"
"(let-values(((fold-var_1224)"
"(let-values(((fold-var_1225) fold-var_1221))"
"(let-values(((fold-var_1226)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_1227)"
"(core-form-sym"
"(syntax-disarm$1"
" body_1223)"
" phase_1214)))"
"(if(equal? tmp_1227 'module)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1051:7_1228)"
" expand-submodule175.1)"
"((body475_1229)"
" body_1223)"
"((self476_1230)"
" self_1215)"
"((ctx477_1231)"
" ctx_1216)"
"((temp478_1232)"
" '#f)"
"((mpis-to-reset479_1233)"
" mpis-to-reset_1217)"
"((declared-submodule-names480_1234)"
" declared-submodule-names_1218))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule175.1))"
"(expand-submodule173.1"
" declared-submodule-names480_1234"
" '#f"
" '#f"
" '#f"
" '#f"
" temp478_1232"
" '#f"
" '#f"
" mpis-to-reset479_1233"
" body475_1229"
" self476_1230"
" ctx477_1231)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1051:7_1228"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" '5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names480_1234"
" temp478_1232"
" mpis-to-reset479_1233)"
" body475_1229"
" self476_1230"
" ctx477_1231))))"
"(let-values() body_1223))))"
" fold-var_1225))))"
"(values fold-var_1226)))))"
"(if '#t"
"(for-loop_1220 fold-var_1224(unsafe-cdr lst_1222))"
" fold-var_1224))"
" fold-var_1221))"
" fold-var_1221))))"
" for-loop_1220)"
" null"
" lst_1219)))))))))))))"
"(define-values"
"(unpack185.1)"
"(lambda(given-kws_1235 given-args_1236 bodys180_1237 phase181_1238 self182_1239 ctx183_1240)"
"(let-values(((declared-submodule-names177_1241)(car given-args_1236))"
"((given-kws_1242)(cdr given-kws_1235))"
"((given-args_1243)(cdr given-args_1236)))"
"(let-values(((mpis-to-reset176_1244)(car given-args_1243)))"
"(expand-non-module*-submodules184.1"
" declared-submodule-names177_1241"
" mpis-to-reset176_1244"
" bodys180_1237"
" phase181_1238"
" self182_1239"
" ctx183_1240)))))"
"(define-values"
"(expand-non-module*-submodules186.1)"
"(lifted/9.1"
"(lambda(given-kws_1245 given-argc_1246)"
"(if(= given-argc_1246 '6)"
"(let-values(((l2_1247) given-kws_1245))"
"(if(pair? l2_1247)"
"(if(eq?(car l2_1247) '#:declared-submodule-names)"
"(let-values(((l2_1248)(cdr l2_1247)))"
"(if(pair? l2_1248)(if(eq?(car l2_1248) '#:mpis-to-reset)(null?(cdr l2_1248)) '#f) '#f))"
" '#f)"
" '#f))"
" '#f))"
"(case-lambda"
"((given-kws_1249 given-args_1250 bodys_1251 phase_1252 self_1253 ctx_1254)"
"(unpack185.1 given-kws_1249 given-args_1250 bodys_1251 phase_1252 self_1253 ctx_1254)))"
" '(#:declared-submodule-names #:mpis-to-reset)"
" '(#:declared-submodule-names #:mpis-to-reset)))"
"(define-values"
"(lifted/10.1)"
"(make-required"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_1255 m-ns_1256 self_1257 requires+provides_1258)"
"(apply missing-kw self_1255 m-ns_1256 self_1257 requires+provides_1258 null)))"
" '#f"
" '#f))"
"(define-values"
"(make-parse-lifted-require192.1)"
"(lambda(declared-submodule-names187_1259 m-ns189_1260 self190_1261 requires+provides191_1262)"
"(let-values(((m-ns_1263) m-ns189_1260))"
"(let-values(((self_1264) self190_1261))"
"(let-values(((requires+provides_1265) requires+provides191_1262))"
"(let-values(((declared-submodule-names_1266) declared-submodule-names187_1259))"
"(let-values()"
"(lambda(s_1267 phase_1268)"
"(let-values(((m_1269)(match-syntax(syntax-disarm$1 s_1267) '(#%require req))))"
"(let-values(((...er/expand/module.rkt:1063:4_1270) parse-and-perform-requires!22.1)"
"((temp481_1271)(list(m_1269 'req)))"
"((s482_1272) s_1267)"
"((self483_1273) self_1264)"
"((m-ns484_1274) m-ns_1263)"
"((phase485_1275) phase_1268)"
"((phase486_1276) phase_1268)"
"((requires+provides487_1277) requires+provides_1265)"
"((declared-submodule-names488_1278) declared-submodule-names_1266))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names488_1278"
" '#t"
" phase486_1276"
" '#t"
" '#f"
" '#f"
" self483_1273"
" '#t"
" '#f"
" '#f"
" temp481_1271"
" s482_1272"
" m-ns484_1274"
" phase485_1275"
" requires+provides487_1277)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1063:4_1270"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:run-phase #:self)"
" '7)"
" '(#:declared-submodule-names #:run-phase #:self)"
"(list declared-submodule-names488_1278 phase486_1276 self483_1273)"
" temp481_1271"
" s482_1272"
" m-ns484_1274"
" phase485_1275"
" requires+provides487_1277))))))))))))"
"(define-values"
"(unpack193.1)"
"(lambda(given-kws_1279 given-args_1280 m-ns189_1281 self190_1282 requires+provides191_1283)"
"(let-values(((declared-submodule-names187_1284)(car given-args_1280)))"
"(make-parse-lifted-require192.1"
" declared-submodule-names187_1284"
" m-ns189_1281"
" self190_1282"
" requires+provides191_1283))))"
"(define-values"
"(make-parse-lifted-require194.1)"
"(lifted/10.1"
"(lambda(given-kws_1285 given-argc_1286)"
"(if(= given-argc_1286 '5)"
"(let-values(((l2_1287) given-kws_1285))"
"(if(pair? l2_1287)(if(eq?(car l2_1287) '#:declared-submodule-names)(null?(cdr l2_1287)) '#f) '#f))"
" '#f))"
"(case-lambda"
"((given-kws_1288 given-args_1289 m-ns_1290 self_1291 requires+provides_1292)"
"(unpack193.1 given-kws_1288 given-args_1289 m-ns_1290 self_1291 requires+provides_1292)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(alt-reverse"
"(let-values(((lst_6) ids_1))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((id_10)(unsafe-car lst_9)))"
"(if '#t"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(remove-use-site-scopes"
" id_10"
" ctx_3)"
" top-level-bind-scope_4))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(if '#t(for-loop_7 fold-var_11(unsafe-cdr lst_9)) fold-var_11))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(begin"
"(let-values(((tl-ids1_14) tl-ids_5)((temp2_15)(expand-context-phase ctx_3))((s3_16) s_2))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 '#f '#f tl-ids1_14 temp2_15 s3_16 '#f '#f)"
"(check-no-duplicate-ids10.1 tl-ids1_14 temp2_15 s3_16)))"
"(select-defined-syms-and-bind!/ctx tl-ids_5 ctx_3)"
" tl-ids_5)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_7)(expand-context-observer ctx_2)))"
"(if obs_7"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_7 'prim-define-values))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
" (let-values () (1/raise-syntax-error '#f '\"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((m_4)(match-syntax s_1 '(define-values(id ...) rhs))))"
"(let-values(((ids_5)(as-expand-time-top-level-bindings(m_4 'id) s_1 ctx_2)))"
"(let-values(((exp-rhs_6)"
"(let-values(((temp4_8)(m_4 'rhs))((temp5_9)(as-named-context ctx_2 ids_5)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 '#f '#f temp4_8 temp5_9)"
"(expand7.1 temp4_8 temp5_9)))))"
"(let-values(((s1_10) s_1)"
"((disarmed-s2_11) disarmed-s_3)"
"((temp3_12)(list(m_4 'define-values) ids_5 exp-rhs_6)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s1_10 disarmed-s2_11 temp3_12)"
"(rebuild101.1 s1_10 disarmed-s2_11 temp3_12))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_13 ctx_14)"
"(let-values((()"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_14)))"
"(if obs_19"
"(let-values()"
"(if '#t(let-values()(call-expand-observe obs_19 'prim-define-syntaxes))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_20)(expand-context-observer ctx_14)))"
"(if obs_20"
"(let-values()(if '#t(let-values()(call-expand-observe obs_20 'prepare-env))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_14) 'top-level)"
"(void)"
" (let-values () (1/raise-syntax-error '#f '\"not allowed in an expression position\" s_13)))"
"(values))))"
"(let-values(((disarmed-s_15)(syntax-disarm$1 s_13)))"
"(let-values(((m_16)(match-syntax disarmed-s_15 '(define-syntaxes(id ...) rhs))))"
"(let-values(((ids_17)(as-expand-time-top-level-bindings(m_16 'id) s_13 ctx_14)))"
"(let-values(((exp-rhs_18)"
"(let-values(((temp9_21)(m_16 'rhs))((temp10_22)(as-named-context ctx_14 ids_17)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1 '#f '#f '#f '#f '#f '#f '#f '#f temp9_21 temp10_22)"
"(expand-transformer93.1 temp9_21 temp10_22)))))"
"(let-values(((s6_23) s_13)"
"((disarmed-s7_24) disarmed-s_15)"
"((temp8_25)(list(m_16 'define-syntaxes) ids_17 exp-rhs_18)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 '#f '#f s6_23 disarmed-s7_24 temp8_25)"
"(rebuild101.1 s6_23 disarmed-s7_24 temp8_25)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
" (lambda (s_26 ctx_27) (1/raise-syntax-error '#f '\"not allowed in an expression position\" s_26))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_28 ctx_29)"
"(let-values((()"
"(begin"
"(let-values(((obs_33)(expand-context-observer ctx_29)))"
"(if obs_33"
"(let-values()(if '#t(let-values()(call-expand-observe obs_33 'prim-require))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_29) 'top-level)"
"(void)"
" (let-values () (1/raise-syntax-error '#f '\"allowed only in a module or the top level\" s_28)))"
"(values))))"
"(let-values(((disarmed-s_30)(syntax-disarm$1 s_28)))"
"(let-values(((m_31)(match-syntax disarmed-s_30 '(#%require req ...))))"
"(let-values(((sc_32)(new-scope 'macro)))"
"(begin"
"(let-values(((...expand/top-level.rkt:62:3_34) parse-and-perform-requires!22.1)"
"((temp11_35)"
"(alt-reverse"
"(let-values(((lst_41)(m_31 'req)))"
"(begin"
"(if(list? lst_41)(void)(let-values()(in-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(fold-var_43 lst_44)"
"(if(pair? lst_44)"
"(let-values(((req_45)(unsafe-car lst_44)))"
"(if '#t"
"(let-values(((fold-var_46)"
"(let-values(((fold-var_47) fold-var_43))"
"(let-values(((fold-var_48)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_45"
" sc_32))"
" fold-var_47))))"
"(values fold-var_48)))))"
"(if '#t"
"(for-loop_42 fold-var_46(unsafe-cdr lst_44))"
" fold-var_46))"
" fold-var_43))"
" fold-var_43))))"
" for-loop_42)"
" null"
" lst_41)))))"
"((s12_36) s_28)"
"((temp13_37) '#f)"
"((temp14_38)(expand-context-namespace ctx_29))"
"((temp15_39)(expand-context-phase ctx_29))"
"((temp16_40)(make-requires+provides '#f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" '#f"
" temp13_37"
" '#t"
" temp11_35"
" s12_36"
" temp14_38"
" temp15_39"
" temp16_40)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...expand/top-level.rkt:62:3_34"
" keyword-procedure-extract"
" '(#:visit?)"
" '7)"
" '(#:visit?)"
"(list temp13_37)"
" temp11_35"
" s12_36"
" temp14_38"
" temp15_39"
" temp16_40)))"
" s_28)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_49 ctx_50)"
"(begin"
"(let-values(((obs_51)(expand-context-observer ctx_50)))"
"(if obs_51"
"(let-values()(if '#t(let-values()(call-expand-observe obs_51 'prim-provide))(void)))"
"(void)))"
" (1/raise-syntax-error '#f '\"not allowed outside of a module body\" s_49)))))"
" print-values)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:90:0_1) declare-hash-based-module!39.1)"
"((temp1_2) '#%main)"
"((main-primitives2_3) main-primitives)"
"((ns3_4) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!39.1))"
"(declare-hash-based-module!37.1 ns3_4 '#f '#f '#f '#f '#f '#f '#f '#f temp1_2 main-primitives2_3)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:90:0_1"
" keyword-procedure-extract"
" '(#:namespace)"
" '4)"
" '(#:namespace)"
"(list ns3_4)"
" temp1_2"
" main-primitives2_3))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:91:0_5) declare-hash-based-module!39.1)"
"((temp4_6) '#%utils)"
"((utils-primitives5_7) utils-primitives)"
"((ns6_8) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!39.1))"
"(declare-hash-based-module!37.1 ns6_8 '#f '#f '#f '#f '#f '#f '#f '#f temp4_6 utils-primitives5_7)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:91:0_5"
" keyword-procedure-extract"
" '(#:namespace)"
" '4)"
" '(#:namespace)"
"(list ns6_8)"
" temp4_6"
" utils-primitives5_7))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:92:0_9) declare-hash-based-module!39.1)"
"((temp7_10) '#%place-struct)"
"((place-struct-primitives8_11) place-struct-primitives)"
"((ns9_12) ns)"
"((temp10_13) '(dynamic-place)))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!39.1))"
"(declare-hash-based-module!37.1"
" ns9_12"
" '#f"
" '#f"
" temp10_13"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" temp7_10"
" place-struct-primitives8_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:92:0_9"
" keyword-procedure-extract"
" '(#:namespace #:protected)"
" '4)"
" '(#:namespace #:protected)"
"(list ns9_12 temp10_13)"
" temp7_10"
" place-struct-primitives8_11))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:97:0_14) declare-hash-based-module!39.1)"
"((temp11_15) '#%boot)"
"((boot-primitives12_16) boot-primitives)"
"((ns13_17) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!39.1))"
"(declare-hash-based-module!37.1 ns13_17 '#f '#f '#f '#f '#f '#f '#f '#f temp11_15 boot-primitives12_16)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:97:0_14"
" keyword-procedure-extract"
" '(#:namespace)"
" '4)"
" '(#:namespace)"
"(list ns13_17)"
" temp11_15"
" boot-primitives12_16))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:98:0_18) declare-hash-based-module!39.1)"
"((temp14_19) '#%linklet)"
"((linklet-primitives15_20) linklet-primitives)"
"((ns16_21) ns)"
"((temp17_22) '#t)"
"((temp18_23) '#t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!39.1))"
"(declare-hash-based-module!37.1"
" ns16_21"
" temp17_22"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" temp18_23"
" '#t"
" temp14_19"
" linklet-primitives15_20)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:98:0_18"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:register-builtin?)"
" '4)"
" '(#:namespace #:primitive? #:register-builtin?)"
"(list ns16_21 temp17_22 temp18_23)"
" temp14_19"
" linklet-primitives15_20))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:101:0_24) declare-hash-based-module!39.1)"
"((temp19_25) '#%expobs)"
"((expobs-primitives20_26) expobs-primitives)"
"((ns21_27) ns)"
"((temp22_28) '#t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!39.1))"
"(declare-hash-based-module!37.1 ns21_27 '#f '#f '#f '#f temp22_28 '#t '#f '#f temp19_25 expobs-primitives20_26)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:101:0_24"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" '4)"
" '(#:namespace #:protected?)"
"(list ns21_27 temp22_28)"
" temp19_25"
" expobs-primitives20_26))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:103:0_29) declare-kernel-module!8.1)"
"((ns23_30) ns)"
"((eval24_31) eval$1)"
"((temp25_32)"
"(let-values(((ht_33) main-primitives))"
"(begin"
"(if((lambda(ht_34)(hash? ht_34)) ht_33)(void)(let-values()(default-in-hash-keys ht_33)))"
"((letrec-values(((for-loop_35)"
"(lambda(table_36 i_37)"
"(if i_37"
"(let-values(((name_38)(hash-iterate-key ht_33 i_37)))"
"(if '#t"
"(let-values(((table_39)"
"(let-values(((table_40) table_36))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_42 val_43)"
"(let-values()"
"(values"
"(let-values() name_38)"
" '#t))))"
"(hash-set table_40 key_42 val_43)))))"
"(values table_41)))))"
"(if '#t"
"(for-loop_35 table_39(hash-iterate-next ht_33 i_37))"
" table_39))"
" table_36))"
" table_36))))"
" for-loop_35)"
" '#hash()"
"(hash-iterate-first ht_33))))))"
"(if(variable-reference-constant?(#%variable-reference declare-kernel-module!8.1))"
"(declare-kernel-module!6.1 eval24_31 temp25_32 ns23_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:103:0_29"
" keyword-procedure-extract"
" '(#:eval #:main-ids)"
" '3)"
" '(#:eval #:main-ids)"
"(list eval24_31 temp25_32)"
" ns23_30))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_44) runtime-instances))"
"(begin"
"(if(list? lst_44)(void)(let-values()(in-list lst_44)))"
"((letrec-values(((for-loop_45)"
"(lambda(fold-var_46 lst_47)"
"(if(pair? lst_47)"
"(let-values(((name_48)(unsafe-car lst_47)))"
"(if '#t"
"(let-values(((fold-var_49)"
"(let-values(((fold-var_50) fold-var_46))"
"(if(eq? name_48 '#%kernel)"
" fold-var_50"
"(let-values(((fold-var_51) fold-var_50))"
"(let-values(((fold-var_52)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...tt/expander/main.rkt:109:2_53)"
" copy-runtime-module!24.1)"
"((name30_54) name_48)"
"((ns31_55) ns)"
"((temp32_56)"
"(let-values(((or-part_57)"
"(eq?"
" name_48"
" '#%foreign)))"
"(if or-part_57"
" or-part_57"
"(eq? name_48 '#%futures)))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" copy-runtime-module!24.1))"
"(copy-runtime-module!22.1"
" '#f"
" '#f"
" ns31_55"
" '#f"
" '#f"
" temp32_56"
" '#t"
" '#f"
" '#f"
" '#f"
" '#f"
" name30_54)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:109:2_53"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" '3)"
" '(#:namespace #:protected?)"
"(list ns31_55 temp32_56)"
" name30_54))))"
"(void)))))"
"(values fold-var_52)))))))"
"(if '#t(for-loop_45 fold-var_49(unsafe-cdr lst_47)) fold-var_49))"
" fold-var_46))"
" fold-var_46))))"
" for-loop_45)"
"(void)"
" lst_44))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:113:0_58) declare-reexporting-module!48.1)"
"((temp26_59) '#%builtin)"
"((temp27_60)(list* '#%place-struct '#%utils '#%boot '#%expobs runtime-instances))"
"((ns28_61) ns)"
"((temp29_62) '#f))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!48.1))"
"(declare-reexporting-module!46.1 ns28_61 temp29_62 '#t temp26_59 temp27_60)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:113:0_58"
" keyword-procedure-extract"
" '(#:namespace #:reexport?)"
" '4)"
" '(#:namespace #:reexport?)"
"(list ns28_61 temp29_62)"
" temp26_59"
" temp27_60))))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel '0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_63)(1/datum->syntax core-stx s_63))))"
);
