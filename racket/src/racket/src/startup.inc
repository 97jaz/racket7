  EVAL_ONE_STR(
"(linklet"
"()"
"((1/namespace-module-identifier namespace-module-identifier)"
"(1/eval eval)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(embedded-load embedded-load)"
"(1/syntax->datum syntax->datum)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(boot boot)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(1/current-namespace current-namespace)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-path-index-join module-path-index-join)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(identifier? identifier?)"
"(1/syntax-debug-info syntax-debug-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/compile compile)"
"(namespace->instance namespace->instance)"
"(1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/namespace-require namespace-require)"
"(1/resolved-module-path? resolved-module-path?)"
"(expand$1 expand)"
"(syntax?$1 syntax?)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/namespace-attach-module namespace-attach-module)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(1/syntax-e syntax-e)"
"(1/module->language-info module->language-info)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/datum->syntax datum->syntax))"
"(define-values"
"(qq-append)"
"  (lambda (a_106 b_107) (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing \"list?\" a_106))))"
"(define-values(call/ec) call-with-escape-continuation)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 \"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() #f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() #f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() #f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 2) #f)"
"(void)"
"                           (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() #f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28)))))"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_455 thunk_456)(begin0(with-continuation-mark exception-handler-key exnh_455(thunk_456))(void))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_457)(gensym)))"
"(let-values(((up_458)"
"(lambda(who_459 mut?_460 set_461 ht_462 key_463 xform_464 default_465)"
"(begin"
"(if(if(hash? ht_462)(if mut?_460(not(immutable? ht_462))(immutable? ht_462)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_459"
"                           (if mut?_460 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_462)))"
"(if(if(procedure? xform_464)(procedure-arity-includes? xform_464 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_459 \"(any/c . -> . any/c)\" xform_464)))"
"(let-values(((v_466)(hash-ref ht_462 key_463 default_465)))"
"(if(eq? v_466 not-there_457)"
"                          (raise-mismatch-error who_459 \"no value found for key: \" key_463)"
"(set_461 ht_462 key_463(xform_464 v_466))))))))"
"(let-values(((hash-update_467)"
"(case-lambda"
"((ht_471 key_472 xform_473 default_474)"
"(up_458 'hash-update #f hash-set ht_471 key_472 xform_473 default_474))"
"((ht_475 key_476 xform_477)(hash-update ht_475 key_476 xform_477 not-there_457))))"
"((hash-update!_468)"
"(case-lambda"
"((ht_478 key_479 xform_480 default_481)"
"(up_458 'hash-update! #t hash-set! ht_478 key_479 xform_480 default_481))"
"((ht_482 key_483 xform_484)(hash-update! ht_482 key_483 xform_484 not-there_457))))"
"((hash-has-key?_469)"
"(lambda(ht_485 key_486)"
"(begin"
"(if(hash? ht_485)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_485 key_486)))"
"(not(eq? not-there_457(hash-ref ht_485 key_486 not-there_457))))))"
"((hash-ref!_470)"
"(lambda(ht_487 key_488 new_489)"
"(begin"
"(if(if(hash? ht_487)(not(immutable? ht_487)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
"                             \"(and/c hash? (not/c immutable?))\""
" 0"
" ht_487"
" key_488"
" new_489)))"
"(let-values(((v_490)(hash-ref ht_487 key_488 not-there_457)))"
"(if(eq? not-there_457 v_490)"
"(let-values(((n_491)(if(procedure? new_489)(new_489) new_489)))"
"(begin(hash-set! ht_487 key_488 n_491) n_491))"
" v_490))))))"
"(values hash-update_467 hash-update!_468 hash-has-key?_469 hash-ref!_470)))))"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7) s_7 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c path-for-some-system? path-string?)\" 0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c string? bytes?)\" 1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
"            (let-values () (raise-mismatch-error who_10 \"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
"                                             (finish_24 (bytes-length bs_23) #\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" #f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_34 i_35) #\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_38 root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                           \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_38"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_38"
"                                 \"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_42 #\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) 1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4 5) #\"\\\\\" (subbytes bstr_42 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_42 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 0 1)(subbytes bstr_42 2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_3) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 #\"\") s_5)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) #f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" #f)"
"          (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"                        (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) #f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 #f))"
"((program_29)(find-executable-path program_29 #f #f))))"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" read-square-bracket-as-paren"
" #t"
" read-curly-brace-as-paren"
" #t"
" read-square-bracket-with-tag"
" #f"
" read-curly-brace-with-tag"
" #f"
" read-accept-box"
" #t"
" read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" read-cdot"
" #f"
" read-accept-dot"
" #t"
" read-accept-infix-dot"
" #t"
" read-accept-quasiquote"
" #t"
" read-accept-reader"
" #f"
" read-accept-lang"
" #t"
" current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_1)"
"(if(complete-path? collects-path_1)"
"(let-values()(simplify-path collects-path_1))"
"(if(absolute-path? collects-path_1)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_1 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_1 #t)))"
"(if p_6(simplify-path p_6) #f)))))))"
"(define-values"
"(-check-relpath)"
"(lambda(who_1 s_2)"
"(begin"
"      (if (path-string? s_2) (void) (let-values () (raise-argument-error who_1 \"path-string?\" s_2)))"
"(if(relative-path? s_2)"
"(void)"
"        (let-values () (raise-arguments-error who_1 \"invalid relative path\" \"path\" s_2))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_4 collection-path_5)"
"(begin(-check-relpath who_3 collection_4)(for-each(lambda(p_6)(-check-relpath who_3 p_6)) collection-path_5))))"
"(define-values"
"(-check-fail)"
"(lambda(who_7 fail_8)"
"(if(if(procedure? fail_8)(procedure-arity-includes? fail_8 1) #f)"
"(void)"
"      (let-values () (raise-argument-error who_7 \"(any/c . -> . any)\" fail_8)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_9 collection_10 collection-path_11)"
"(begin"
"(-check-collection 'collection-path collection_10 collection-path_11)"
"(-check-fail 'collection-path fail_9)"
"(find-col-file fail_9 collection_10 collection-path_11 #f #f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_12 check-compiled?_13 file-name_14 collection_15 collection-path_16)"
"(begin"
"(-check-relpath 'collection-file-path file-name_14)"
"(-check-collection 'collection-file-path collection_15 collection-path_16)"
"(-check-fail 'collection-file-path fail_12)"
"(find-col-file fail_12 collection_15 collection-path_16 file-name_14 check-compiled?_13))))"
"(define-values"
"(get-config-table)"
"(lambda(d_17)"
"    (let-values (((p_18) (if d_17 (build-path d_17 \"config.rktd\") #f)))"
"(let-values(((or-part_19)"
"(if p_18"
"(if(file-exists? p_18)"
"(with-input-from-file"
" p_18"
"(lambda()"
"(let-values(((v_20)(call-with-default-reading-parameterization read)))"
"(if(hash? v_20) v_20 #f))))"
" #f)"
" #f)))"
"(if or-part_19 or-part_19 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_21)(hash-ref config-table_21 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_22)"
"(if(string? p_22)"
"(let-values()(collects-relative-path->complete-path(string->path p_22)))"
"(if(bytes? p_22)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_22)))"
"(if(path? p_22)(let-values()(collects-relative-path->complete-path p_22))(let-values() p_22))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_23)"
"(if(complete-path? p_23)"
"(let-values() p_23)"
"(let-values()"
"(path->complete-path"
" p_23"
"(let-values(((or-part_24)(find-main-collects)))(if or-part_24 or-part_24(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_25 key_26 orig-l_27)"
"(let-values(((l_28)(hash-ref ht_25 key_26 #f)))"
"(if l_28"
"((letrec-values(((loop_29)"
"(lambda(l_30)"
"(if(null? l_30)"
"(let-values() null)"
"(if(not(car l_30))"
"(let-values()(append orig-l_27(loop_29(cdr l_30))))"
"(let-values()(cons(coerce-to-path(car l_30))(loop_29(cdr l_30)))))))))"
" loop_29)"
" l_28)"
" orig-l_27))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_31)(get-config-table(find-main-config))))"
"(let-values(((lf_32)"
"(coerce-to-path"
"(let-values(((or-part_33)(hash-ref ht_31 'links-file #f)))"
"(if or-part_33"
" or-part_33"
"(build-path"
"(let-values(((or-part_34)(hash-ref ht_31 'share-dir #f)))"
"                            (if or-part_34 or-part_34 (build-path 'up \"share\")))"
"                          \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) #f)"
"           (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_31) \"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_31 'links-search-files(list lf_32)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout 0(cdr old-stamp_36))) #f) #f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() #f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() #f))"
"(loop_39 base_41))"
" #f)))))"
" loop_39)"
" path_35)"
" #f)))"
"(if(not(file-exists? path_35))"
"(cons #f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_35(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes 8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes 8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 #f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= 2(length p_62))))"
"(if or-part_63 or-part_63(= 3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_60)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 #f #f)"
"(void)"
"(let-values()(hash-set! ht_67 #f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
"        (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) #f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 #f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) #t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
"                                                                                \"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
"                                                (string-append (to-string_103 collection_93) \"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_119) (format \"\\n ~a ~a\" \" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) 5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_122) (format \"\\n   ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
"                                                \"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) #t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring"
" file-name_127"
"(- len_128 4)))"
"(string-append"
"(substring file-name_127 0(- len_128 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" #f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values(((or-part_129) found-col_112))"
"(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
"          (let-values (((try-path_134) (path-add-extension path_131 #\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" #f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_140)(find-library-collection-paths extra-collects-dirs_140 null))"
"((extra-collects-dirs_141 post-collects-dirs_142)"
"(let-values(((user-too?_143)(use-user-specific-search-paths))"
"((cons-if_144)(lambda(f_146 r_147)(if f_146(cons f_146 r_147) r_147)))"
"((config-table_145)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_143"
"         (let-values (((c_148) (environment-variables-ref (current-environment-variables) #\"PLTCOLLECTS\")))"
"           (if c_148 (bytes->string/locale c_148 '#\\?) \"\"))"
"         \"\")"
"(add-config-search"
" config-table_145"
" 'collects-search-dirs"
"(cons-if_144"
"(if user-too?_143"
"           (build-path (find-system-path 'addon-dir) (get-installation-name config-table_145) \"collects\")"
" #f)"
"((letrec-values(((loop_149)"
"(lambda(l_150)"
"(if(null? l_150)"
" null"
"(let-values(((collects-path_151)(car l_150)))"
"(let-values(((v_152)(exe-relative-path->complete-path collects-path_151)))"
"(if v_152"
"(cons"
"(simplify-path(path->complete-path v_152(current-directory)))"
"(loop_149(cdr l_150)))"
"(loop_149(cdr l_150)))))))))"
" loop_149)"
"(append extra-collects-dirs_141(list(find-system-path 'collects-dir)) post-collects-dirs_142)))))))))"
"(define-values(load/use-compiled)(lambda(f_1)((current-load/use-compiled) f_1 #f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 #f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))(if or-part_9 or-part_9 0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max 0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1534)"
"(if(keyword-impersonator? v_1534)(let-values()((keyword-impersonator-ref v_1534) v_1534))(let-values() #f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref 0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref 1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1535)"
"(let-values(((req_1536 allowed_1537)(procedure-keywords proc_1535))"
"((a_1538)(procedure-arity proc_1535))"
"((keywords-desc_1539)"
"(lambda(opt_1541 req_1542)"
"(format"
"                     \"~a with keyword~a~a\""
"                     (if (null? (cdr req_1542)) (format \"an ~aargument\" opt_1541) (format \"~aarguments\" opt_1541))"
"                     (if (null? (cdr req_1542)) \"\" \"s\")"
"(let-values(((tmp_1543)(length req_1542)))"
"(if(equal? tmp_1543 1)"
"                         (let-values () (format \" ~a\" (car req_1542)))"
"(if(equal? tmp_1543 2)"
"                           (let-values () (format \" ~a and ~a\" (car req_1542) (cadr req_1542)))"
"(let-values()"
"((letrec-values(((loop_1544)"
"(lambda(req_1545)"
"(if(null?(cdr req_1545))"
"                                                   (format \" and ~a\" (car req_1545))"
"                                                   (format \" ~a,~a\" (car req_1545) (loop_1544 (cdr req_1545)))))))"
" loop_1544)"
" req_1542))))))))"
"((method-adjust_1540)"
"(lambda(a_1546)"
"(if(let-values(((or-part_1547)(okm? proc_1535)))"
"(if or-part_1547 or-part_1547(keyword-method? proc_1535)))"
"(if(zero? a_1546) 0(sub1 a_1546))"
" a_1546))))"
"(string-append"
"(if(number? a_1538)"
"         (let-values () (let-values (((a_1548) (method-adjust_1540 a_1538))) (format \"~a\" a_1548)))"
"(if(arity-at-least? a_1538)"
"(let-values()"
"             (let-values (((a_1549) (method-adjust_1540 (arity-at-least-value a_1538)))) (format \"at least ~a\" a_1549)))"
"           (let-values () \"a different number\")))"
"       (if (null? req_1536) \"\" (format \" plus ~a\" (keywords-desc_1539 \"\" req_1536)))"
"(if allowed_1537"
"(let-values(((others_1550)"
"((letrec-values(((loop_1551)"
"(lambda(req_1552 allowed_1553)"
"(if(null? req_1552)"
"(let-values() allowed_1553)"
"(if(eq?(car req_1552)(car allowed_1553))"
"(let-values()(loop_1551(cdr req_1552)(cdr allowed_1553)))"
"(let-values()"
"(cons(car allowed_1553)(loop_1551 req_1552(cdr allowed_1553)))))))))"
" loop_1551)"
" req_1536"
" allowed_1537)))"
"           (if (null? others_1550) \"\" (format \" plus ~a\" (keywords-desc_1539 \"optional \" others_1550))))"
"         \" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" 0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(make-required)"
"(lambda(name_1554 fail-proc_1555 method?_1556 impersonator?_1557)"
"(let-values(((s:_1558 mk_1559 ?_1560 -ref_1561 -set!_1562)"
"(make-struct-type"
"(let-values(((or-part_1563) name_1554))(if or-part_1563 or-part_1563 'unknown))"
"(if impersonator?_1557"
"(if method?_1556 struct:keyword-method-impersonator struct:keyword-procedure-impersonator)"
"(if method?_1556 struct:keyword-method struct:keyword-procedure))"
" 0"
" 0"
" #f"
"(list"
"(cons prop:arity-string generate-arity-string)"
"(cons prop:named-keyword-procedure(cons name_1554 fail-proc_1555))"
"(cons prop:incomplete-arity #t))"
"(current-inspector)"
" fail-proc_1555)))"
" mk_1559)))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1564 info-l_1565)"
"(if(exact-integer? v_1564)(make-struct-field-accessor(list-ref info-l_1565 3) v_1564) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure-impersonator make-kpp keyword-procedure-impersonator? kpp-ref kpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1566)(kpp-ref v_1566 0))))))"
"(define-values"
"(struct:keyword-method-impersonator make-kmp keyword-method-impersonator? kmp-ref kmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-method"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1567)(kmp-ref v_1567 0))))))"
"(define-values"
"(struct:okpp make-optional-keyword-procedure-impersonator okpp? okpp-ref okpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1568)(okpp-ref v_1568 0))))))"
"(define-values"
"(struct:okmp make-optional-keyword-method-impersonator okmp? okmp-ref okmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1569)(okmp-ref v_1569 0))))))"
"(define-values"
"(make-keyword-procedure)"
"(case-lambda"
"((proc_1570)(make-keyword-procedure proc_1570(lambda args_1571(apply proc_1570 null null args_1571))))"
"((proc_1572 plain-proc_1573)"
"(make-optional-keyword-procedure"
"(make-keyword-checker null #f(procedure-arity proc_1572))"
" proc_1572"
" null"
" #f"
" plain-proc_1573))))"
"(define-values"
"(keyword-apply)"
"(lambda(proc_1574 kws_1575 kw-vals_1576 normal-args_1577 . normal-argss_1578)"
"(let-values(((type-error_1579)"
"(lambda(what_1580 which_1581)"
"(apply"
" raise-argument-error"
" 'keyword-apply"
" what_1580"
" which_1581"
" proc_1574"
" kws_1575"
" kw-vals_1576"
" normal-args_1577"
" normal-argss_1578))))"
"(begin"
"        (if (procedure? proc_1574) (void) (let-values () (type-error_1579 \"procedure?\" 0)))"
"((letrec-values(((loop_1582)"
"(lambda(ks_1583)"
"(if(null? ks_1583)"
"(let-values()(void))"
"(if(let-values(((or-part_1584)(not(pair? ks_1583))))"
"(if or-part_1584 or-part_1584(not(keyword?(car ks_1583)))))"
"                                (let-values () (type-error_1579 \"(listof keyword?)\" 1))"
"(if(null?(cdr ks_1583))"
"(let-values()(void))"
"(if(let-values(((or-part_1585)(not(pair?(cdr ks_1583)))))"
"(if or-part_1585 or-part_1585(not(keyword?(cadr ks_1583)))))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(if(keyword<?(car ks_1583)(cadr ks_1583))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(let-values()"
"                                        (type-error_1579 \"(and/c (listof? keyword?) sorted? distinct?)\" 1))))))))))"
" loop_1582)"
" kws_1575)"
"        (if (list? kw-vals_1576) (void) (let-values () (type-error_1579 \"list?\" 2)))"
"(if(=(length kws_1575)(length kw-vals_1576))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'keyword-apply"
"             \"keyword list length does not match value list length\""
"             \"keyword list length\""
"(length kws_1575)"
"             \"value list length\""
"(length kw-vals_1576)"
"             \"keyword list\""
" kws_1575"
"             \"value list\""
" kw-vals_1576)))"
"(let-values(((normal-args_1586)"
"((letrec-values(((loop_1587)"
"(lambda(normal-argss_1588 pos_1589)"
"(if(null?(cdr normal-argss_1588))"
"(let-values(((l_1590)(car normal-argss_1588)))"
"                                              (if (list? l_1590) l_1590 (type-error_1579 \"list?\" pos_1589)))"
"(cons"
"(car normal-argss_1588)"
"(loop_1587(cdr normal-argss_1588)(add1 pos_1589)))))))"
" loop_1587)"
"(cons normal-args_1577 normal-argss_1578)"
" 3)))"
"(if(null? kws_1575)"
"(apply proc_1574 normal-args_1586)"
"(apply"
"(keyword-procedure-extract/method kws_1575(+ 2(length normal-args_1586)) proc_1574 0)"
" kws_1575"
" kw-vals_1576"
" normal-args_1586)))))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1591)"
"(if(keyword-procedure? p_1591)"
"(let-values()(values(keyword-procedure-required p_1591)(keyword-procedure-allowed p_1591)))"
"(if(procedure? p_1591)"
"(let-values()"
"(if(new-procedure? p_1591)"
"(let-values(((v_1592)(new-procedure-ref p_1591)))"
"(if(procedure? v_1592)"
"(procedure-keywords v_1592)"
"(let-values(((a_1593)(procedure-accessor-ref p_1591)))"
"(if a_1593(procedure-keywords(a_1593 p_1591))(values null null)))))"
"(values null null)))"
"        (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_1591))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1594 . args_1595)(apply(keyword-procedure-extract/method null 0 proc_1594 0) null null args_1595)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1596 kws_1597)"
"((letrec-values(((loop_1598)"
"(lambda(kws_1599 required_1600 allowed_1601)"
"(if(null? kws_1599)"
"(let-values()(if(null? required_1600)(values #f #f)(values(car required_1600) #f)))"
"(if(if(pair? required_1600)(eq?(car required_1600)(car kws_1599)) #f)"
"(let-values()"
"(loop_1598(cdr kws_1599)(cdr required_1600)(if allowed_1601(cdr allowed_1601) #f)))"
"(if(not allowed_1601)"
"(let-values()(loop_1598(cdr kws_1599) required_1600 #f))"
"(if(pair? allowed_1601)"
"(let-values()"
"(if(eq?(car allowed_1601)(car kws_1599))"
"(loop_1598(cdr kws_1599) required_1600(cdr allowed_1601))"
"(loop_1598 kws_1599 required_1600(cdr allowed_1601))))"
"(let-values()(values #f(car kws_1599))))))))))"
" loop_1598)"
" kws_1597"
"(keyword-procedure-required p_1596)"
"(keyword-procedure-allowed p_1596))))"
"(define-values"
"(make-keyword-checker)"
"(lambda(req-kws_1602 allowed-kws_1603 arity_1604)"
"(if(not allowed-kws_1603)"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1615 a_1616)(if #t(= a_1616 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1617)(arity-at-least-value arity_1604)))"
"(lambda(kws_1618 a_1619)(if #t(>= a_1619 arity_1617) #f))))"
"(let-values()(lambda(kws_1620 a_1621)(if #t(arity-includes? arity_1604 a_1621) #f))))))"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1622 a_1623)(if(subset?$1 req-kws_1602 kws_1622)(= a_1623 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1624)(arity-at-least-value arity_1604)))"
"(lambda(kws_1625 a_1626)(if(subset?$1 req-kws_1602 kws_1625)(>= a_1626 arity_1624) #f))))"
"(let-values()"
"(lambda(kws_1627 a_1628)"
"(if(subset?$1 req-kws_1602 kws_1627)(arity-includes? arity_1604 a_1628) #f))))))))"
"(if(null? allowed-kws_1603)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1629 a_1630)(if(null? kws_1629)(= a_1630 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1631)(arity-at-least-value arity_1604)))"
"(lambda(kws_1632 a_1633)(if(null? kws_1632)(>= a_1633 arity_1631) #f))))"
"(let-values()(lambda(kws_1634 a_1635)(if(null? kws_1634)(arity-includes? arity_1604 a_1635) #f))))))"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1636 a_1637)(if(subset?$1 kws_1636 allowed-kws_1603)(= a_1637 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1638)(arity-at-least-value arity_1604)))"
"(lambda(kws_1639 a_1640)(if(subset?$1 kws_1639 allowed-kws_1603)(>= a_1640 arity_1638) #f))))"
"(let-values()"
"(lambda(kws_1641 a_1642)"
"(if(subset?$1 kws_1641 allowed-kws_1603)(arity-includes? arity_1604 a_1642) #f))))))"
"(let-values()"
"(if(equal? req-kws_1602 allowed-kws_1603)"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1643 a_1644)"
"(if((letrec-values(((loop_1645)"
"(lambda(kws_1646 req-kws_1647)"
"(if(null? req-kws_1647)"
"(null? kws_1646)"
"(if(null? kws_1646)"
" #f"
"(if(eq?(car kws_1646)(car req-kws_1647))"
"(loop_1645(cdr kws_1646)(cdr req-kws_1647))"
" #f))))))"
" loop_1645)"
" kws_1643"
" req-kws_1602)"
"(= a_1644 arity_1604)"
" #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1648)(arity-at-least-value arity_1604)))"
"(lambda(kws_1649 a_1650)"
"(if((letrec-values(((loop_1651)"
"(lambda(kws_1652 req-kws_1653)"
"(if(null? req-kws_1653)"
"(null? kws_1652)"
"(if(null? kws_1652)"
" #f"
"(if(eq?(car kws_1652)(car req-kws_1653))"
"(loop_1651(cdr kws_1652)(cdr req-kws_1653))"
" #f))))))"
" loop_1651)"
" kws_1649"
" req-kws_1602)"
"(>= a_1650 arity_1648)"
" #f))))"
"(let-values()"
"(lambda(kws_1654 a_1655)"
"(if((letrec-values(((loop_1656)"
"(lambda(kws_1657 req-kws_1658)"
"(if(null? req-kws_1658)"
"(null? kws_1657)"
"(if(null? kws_1657)"
" #f"
"(if(eq?(car kws_1657)(car req-kws_1658))"
"(loop_1656(cdr kws_1657)(cdr req-kws_1658))"
" #f))))))"
" loop_1656)"
" kws_1654"
" req-kws_1602)"
"(arity-includes? arity_1604 a_1655)"
" #f)))))"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1659 a_1660)"
"(if(subsets? req-kws_1602 kws_1659 allowed-kws_1603)(= a_1660 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1661)(arity-at-least-value arity_1604)))"
"(lambda(kws_1662 a_1663)"
"(if(subsets? req-kws_1602 kws_1662 allowed-kws_1603)(>= a_1663 arity_1661) #f))))"
"(let-values()"
"(lambda(kws_1664 a_1665)"
"(if(subsets? req-kws_1602 kws_1664 allowed-kws_1603)"
"(arity-includes? arity_1604 a_1665)"
" #f)))))))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(arity_1666 a_1667)"
"(if(integer? arity_1666)"
"(let-values()(= arity_1666 a_1667))"
"(if(arity-at-least? arity_1666)"
"(let-values()(>= a_1667(arity-at-least-value a_1667)))"
"(let-values()(ormap(lambda(ar_1668)(arity-includes? ar_1668 a_1667)) arity_1666))))))"
"(define-values"
"(subset?$1)"
"(lambda(l1_1669 l2_1670)"
"(if(null? l1_1669)"
"(let-values() #t)"
"(if(null? l2_1670)"
"(let-values() #f)"
"(if(eq?(car l1_1669)(car l2_1670))"
"(let-values()(subset?$1(cdr l1_1669)(cdr l2_1670)))"
"(let-values()(subset?$1 l1_1669(cdr l2_1670))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1671 l2_1672 l3_1673)"
"(if(null? l1_1671)"
"(let-values()(subset?$1 l2_1672 l3_1673))"
"(if(null? l2_1672)"
"(let-values() #f)"
"(if(null? l3_1673)"
"(let-values() #f)"
"(let-values()"
"(let-values(((v2_1674)(car l2_1672)))"
"(if(eq?(car l1_1671) v2_1674)"
"(let-values()(subsets?(cdr l1_1671)(cdr l2_1672)(cdr l3_1673)))"
"(if(eq? v2_1674(car l3_1673))"
"(let-values()(subsets? l1_1671(cdr l2_1672)(cdr l3_1673)))"
"(let-values()(subsets? l1_1671 l2_1672(cdr l3_1673))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1675 n_1676 p_1677 method-n_1678)"
"(if(if(keyword-procedure? p_1677)((keyword-procedure-checker p_1677) kws_1675 n_1676) #f)"
"(keyword-procedure-proc p_1677)"
"(let-values(((p2_1679)"
"(if(not(keyword-procedure? p_1677))"
"(if(procedure? p_1677)"
"(let-values(((or-part_1680)"
"(if(new-procedure? p_1677)"
"(let-values(((a_1681)(procedure-accessor-ref p_1677)))"
"(if a_1681(a_1681 p_1677) #f))"
" #f)))"
"(if or-part_1680"
" or-part_1680"
"(let-values(((or-part_1682)(procedure-extract-target p_1677)))"
"(if or-part_1682 or-part_1682(if(new-procedure? p_1677) 'method #f)))))"
" #f)"
" #f)))"
"(if p2_1679"
"(if(eq? p2_1679 'method)"
"(let-values(((p3_1683)"
"(keyword-procedure-extract/method"
" kws_1675"
"(add1 n_1676)"
"(new-procedure-ref p_1677)"
"(add1 method-n_1678))))"
"(lambda(kws_1684 kw-args_1685 . args_1686)"
"(apply p3_1683 kws_1684 kw-args_1685(cons p_1677 args_1686))))"
"(keyword-procedure-extract/method kws_1675 n_1676 p2_1679 method-n_1678))"
"(lambda(kws_1687 kw-args_1688 . args_1689)"
"(let-values(((missing-kw_1690 extra-kw_1691)"
"(if(keyword-procedure? p_1677)(check-kw-args p_1677 kws_1687)(values #f(car kws_1687)))))"
"(let-values(((n_1692)"
"(let-values(((method-n_1695)"
"(+"
" method-n_1678"
"(if(let-values(((or-part_1696)(keyword-method? p_1677)))"
"(if or-part_1696 or-part_1696(okm? p_1677)))"
" 1"
" 0))))"
"(if(>= n_1676 method-n_1695)(- n_1676 method-n_1695) n_1676)))"
"((args-str_1693)"
"(if(if(null? args_1689)(null? kws_1687) #f)"
"                              \"\""
"(apply"
" string-append"
"                               \"\\n  arguments...:\""
"(append"
"                                (map (lambda (v_1697) (format \"\\n   ~e\" v_1697)) args_1689)"
"(map"
"                                 (lambda (kw_1698 kw-arg_1699) (format \"\\n   ~a ~e\" kw_1698 kw-arg_1699))"
" kws_1687"
" kw-args_1688)))))"
"((proc-name_1694)"
"(lambda(p_1700)"
"(let-values(((or-part_1701)"
"(if(named-keyword-procedure? p_1700)"
"(car(keyword-procedure-name+fail p_1700))"
" #f)))"
"(if or-part_1701"
" or-part_1701"
"(let-values(((or-part_1702)(object-name p_1700)))"
"(if or-part_1702 or-part_1702 p_1700)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1691"
"(if(keyword-procedure? p_1677)"
"(format"
"(string-append"
"                        \"application: procedure does not expect an argument with given keyword\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  given keyword: ~a\""
"                        \"~a\")"
"(proc-name_1694 p_1677)"
" extra-kw_1691"
" args-str_1693)"
"(if(procedure? p_1677)"
"(format"
"(string-append"
"                          \"application: procedure does not accept keyword arguments\\n\""
"                          \"  procedure: ~a\""
"                          \"~a\")"
"(proc-name_1694 p_1677)"
" args-str_1693)"
"(format"
"(string-append"
"                          \"application: not a procedure;\\n\""
"                          \" expected a procedure that can be applied to arguments\\n\""
"                          \"  given: ~e\""
"                          \"~a\")"
" p_1677"
" args-str_1693)))"
"(if missing-kw_1690"
"(format"
"(string-append"
"                        \"application: required keyword argument not supplied\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  required keyword: ~a\""
"                        \"~a\")"
"(proc-name_1694 p_1677)"
" missing-kw_1690"
" args-str_1693)"
"(format"
"(string-append"
"                        \"application: no case matching ~a non-keyword argument~a\\n\""
"                        \"  procedure: ~a\""
"                        \"~a\")"
"(- n_1692 2)"
"                       (if (= 1 (- n_1692 2)) \"\" \"s\")"
"(proc-name_1694 p_1677)"
" args-str_1693)))"
"(current-continuation-marks)))))))))))"
"(define-values"
"(keyword-procedure-extract)"
"(lambda(p_1703 kws_1704 n_1705)(keyword-procedure-extract/method kws_1704 n_1705 p_1703 0)))"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
"                      (if (list? l_2) (void) (raise-argument-error 'reverse \"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence #f 1 0 #f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2558 si_2559)"
"(begin"
"(if(if(vector? v_2558)"
"(if(= 3(vector-length v_2558))"
"(if(procedure?(vector-ref v_2558 0))"
"(if(procedure-arity-includes?(vector-ref v_2558 0) 1)"
"(if(procedure?(vector-ref v_2558 1))"
"(if(procedure-arity-includes?(vector-ref v_2558 1) 1)"
"(if(procedure?(vector-ref v_2558 2))(procedure-arity-includes?(vector-ref v_2558 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_2558)))"
"(vector->immutable-vector v_2558)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2560 si_2561)"
"(begin"
"(if(if(procedure? v_2560)(procedure-arity-includes? v_2560 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_2560)))"
" v_2560))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2562 sinfo_2563)"
"(begin"
"(if(if(procedure? v_2562)(procedure-arity-includes? v_2562 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'sequence-property-guard \"(procedure-arity-includes/c 1)\" v_2562)))"
"(lambda(self_2564)"
"(let-values(((s_2565)(v_2562 self_2564)))"
"(begin"
"(if(sequence? s_2565)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
"                  \"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2565)))"
" s_2565)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2566)"
"(let-values(((or-part_2567)(list? v_2566)))(if or-part_2567 or-part_2567(stream-via-prop? v_2566)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2568)"
"(if(null? v_2568)"
" #f"
"(let-values(((or-part_2569)(pair? v_2568)))"
"(if or-part_2569 or-part_2569(not((unsafe-vector-ref(stream-ref v_2568) 0) v_2568)))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2572)"
"(if(pair? v_2572)"
"(let-values()(car v_2572))"
"(let-values()((unsafe-vector-ref(stream-ref v_2572) 1) v_2572)))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2574)"
"(if(pair? v_2574)"
"(let-values()(cdr v_2574))"
"(let-values()"
"(let-values(((r_2575)((unsafe-vector-ref(stream-ref v_2574) 2) v_2574)))"
"(begin"
"(if(stream? r_2575)"
"(void)"
"              (let-values () (raise-mismatch-error 'stream-rest-guard \"result is not a stream: \" r_2575)))"
" r_2575))))))"
"(define-values"
"(sequence?)"
"(lambda(v_2577)"
"(let-values(((or-part_2578)(exact-nonnegative-integer? v_2577)))"
"(if or-part_2578"
" or-part_2578"
"(let-values(((or-part_2579)(do-sequence? v_2577)))"
"(if or-part_2579"
" or-part_2579"
"(let-values(((or-part_2580)(sequence-via-prop? v_2577)))"
"(if or-part_2580"
" or-part_2580"
"(let-values(((or-part_2581)(stream? v_2577)))"
"(if or-part_2581"
" or-part_2581"
"(let-values(((or-part_2582)(mpair? v_2577)))"
"(if or-part_2582"
" or-part_2582"
"(let-values(((or-part_2583)(vector? v_2577)))"
"(if or-part_2583"
" or-part_2583"
"(let-values(((or-part_2584)(flvector? v_2577)))"
"(if or-part_2584"
" or-part_2584"
"(let-values(((or-part_2585)(fxvector? v_2577)))"
"(if or-part_2585"
" or-part_2585"
"(let-values(((or-part_2586)(string? v_2577)))"
"(if or-part_2586"
" or-part_2586"
"(let-values(((or-part_2587)(bytes? v_2577)))"
"(if or-part_2587"
" or-part_2587"
"(let-values(((or-part_2588)(input-port? v_2577)))"
"(if or-part_2588"
" or-part_2588"
"(let-values(((or-part_2589)(hash? v_2577)))"
"(if or-part_2589"
" or-part_2589"
"(if(:sequence? v_2577)"
"(not(struct-type? v_2577))"
" #f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2590 v_2591)"
"(if(exact-nonnegative-integer? v_2591)"
"(let-values()(:integer-gen v_2591))"
"(if(do-sequence? v_2591)"
"(let-values()((do-sequence-ref v_2591 0)))"
"(if(mpair? v_2591)"
"(let-values()(:mlist-gen v_2591))"
"(if(list? v_2591)"
"(let-values()(:list-gen v_2591))"
"(if(vector? v_2591)"
"(let-values()(:vector-gen v_2591 0(vector-length v_2591) 1))"
"(if(flvector? v_2591)"
"(let-values()(:flvector-gen v_2591 0(flvector-length v_2591) 1))"
"(if(fxvector? v_2591)"
"(let-values()(:fxvector-gen v_2591 0(fxvector-length v_2591) 1))"
"(if(string? v_2591)"
"(let-values()(:string-gen v_2591 0(string-length v_2591) 1))"
"(if(bytes? v_2591)"
"(let-values()(:bytes-gen v_2591 0(bytes-length v_2591) 1))"
"(if(input-port? v_2591)"
"(let-values()(:input-port-gen v_2591))"
"(if(hash? v_2591)"
"(let-values()(:hash-gen v_2591 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2591)"
"(let-values()((sequence-ref v_2591) v_2591))"
"(if(:sequence? v_2591)"
"(let-values()(make-sequence who_2590((:sequence-ref v_2591) v_2591)))"
"(if(stream? v_2591)"
"(let-values()(:stream-gen v_2591))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
"                                     \"for: expected a sequence for ~a, got something else: ~v\""
"(if(= 1(length who_2590))(car who_2590) who_2590)"
" v_2591)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2592)"
"(let-values(((cont?_2593)(range-ref v_2592 2)))(if cont?_2593(not(cont?_2593(range-ref v_2592 0))) #f)))"
"(lambda(v_2594)(range-ref v_2594 0))"
"(lambda(v_2595)"
"(make-range((range-ref v_2595 1)(range-ref v_2595 0))(range-ref v_2595 1)(range-ref v_2595 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2596)(values values(range-ref v_2596 1)(range-ref v_2596 0)(range-ref v_2596 2) #f #f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2597)(in-range 0 b_2597 1))"
"((a_2598 b_2599)(in-range a_2598 b_2599 1))"
"((a_2600 b_2601 step_2602)"
"(begin"
"      (if (real? a_2600) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_2600)))"
"      (if (real? b_2601) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_2601)))"
"      (if (real? step_2602) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_2602)))"
"(let-values(((cont?_2603)"
"(if(>= step_2602 0)(lambda(x_2604)(< x_2604 b_2601))(lambda(x_2605)(> x_2605 b_2601)))))"
"(let-values(((inc_2606)(lambda(x_2607)(+ x_2607 step_2602))))(make-range a_2600 inc_2606 cont?_2603)))))))"
"(define-values(:integer-gen)(lambda(v_2608)(values values add1 0(lambda(i_2609)(< i_2609 v_2608)) #f #f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals 0))"
"((n_2610)"
"(begin"
"(if(if(integer? n_2610)(if(exact? n_2610)(>= n_2610 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_2610)))"
"(make-range n_2610 add1 #f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2611)(not(pair?(list-stream-ref v_2611 0))))"
"(lambda(v_2612)(car(list-stream-ref v_2612 0)))"
"(lambda(v_2613)(make-list-stream(cdr(list-stream-ref v_2613 0))))))"
"(cons prop:gen-sequence(lambda(v_2614)(values car cdr(list-stream-ref v_2614 0) pair? #f #f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2615)"
"(begin"
"      (if (list? l_2615) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_2615)))"
"(make-list-stream l_2615))))"
"(define-values(:list-gen)(lambda(l_2616)(values car cdr l_2616 pair? #f #f)))"
"(define-values(:mlist-gen)(lambda(l_2618)(values mcar mcdr l_2618 mpair? #f #f)))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2620)(values read-byte values p_2620 #f(lambda(x_2621)(not(eof-object? x_2621))) #f)))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2639)(values unsafe-stream-first unsafe-stream-rest l_2639 unsafe-stream-not-empty? #f #f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2640 -get_2641 -first_2642 -next_2643)"
"(values"
"(lambda(pos_2644)(-get_2641 ht_2640 pos_2644))"
"(lambda(pos_2645)(-next_2643 ht_2640 pos_2645))"
"(-first_2642 ht_2640)"
"(lambda(pos_2646) pos_2646)"
" #f"
" #f)))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2649)"
"(begin"
"(if((lambda(ht_2650)(hash? ht_2650)) ht_2649)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash \"hash?\" ht_2649)))"
"(make-do-sequence(lambda()(:hash-gen ht_2649 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2653)"
"(begin"
"(if((lambda(ht_2654)(if(hash? ht_2654)(immutable? ht_2654) #f)) ht_2653)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_2653)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2653"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2657)"
"(begin"
"(if((lambda(ht_2658)(hash? ht_2658)) ht_2657)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_2657)))"
"(make-do-sequence(lambda()(:hash-gen ht_2657 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2661)"
"(begin"
"(if((lambda(ht_2662)(if(hash? ht_2662)(immutable? ht_2662) #f)) ht_2661)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_2661)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2661"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2665)"
"(begin"
"(if((lambda(ht_2666)(hash? ht_2666)) ht_2665)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_2665)))"
"(make-do-sequence(lambda()(:hash-gen ht_2665 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2681 vec_2682 start_2683 stop_2684 step_2685 len_2686)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2683)"
"(let-values(((or-part_2687)(< start_2683 len_2686)))"
"(if or-part_2687 or-part_2687(= len_2686 start_2683 stop_2684)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"starting \" start_2683 vec_2682 0 (sub1 len_2686))))"
"(if(if(exact-integer? stop_2684)(if(<= -1 stop_2684)(<= stop_2684 len_2686) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"stopping \" stop_2684 vec_2682 -1 len_2686)))"
"(if(if(exact-integer? step_2685)(not(zero? step_2685)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_2681 \"(and/c exact-integer? (not/c zero?))\" step_2685)))"
"(if(if(< start_2683 stop_2684)(< step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void))"
"(if(if(< stop_2684 start_2683)(> step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2688 type-name_2689 vector?_2690 unsafe-vector-length_2691 vec_2692 start_2693 stop_2694 step_2695)"
"(begin"
"(if(vector?_2690 vec_2692)(void)(let-values()(raise-argument-error who_2688 type-name_2689 vec_2692)))"
"(let-values(((len_2696)(unsafe-vector-length_2691 vec_2692)))"
"(let-values(((stop*_2697)(if stop_2694 stop_2694 len_2696)))"
"(begin"
"(check-ranges who_2688 vec_2692 start_2693 stop*_2697 step_2695 len_2696)"
"(values vec_2692 start_2693 stop*_2697 step_2695)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2698 start_2699 stop_2700 step_2701)"
"(values"
"(lambda(i_2702)(unsafe-vector-ref v_2698 i_2702))"
"(if(= step_2701 1) add1(lambda(i_2703)(+ i_2703 step_2701)))"
" start_2699"
"(if(> step_2701 0)(lambda(i_2704)(< i_2704 stop_2700))(lambda(i_2705)(> i_2705 stop_2700)))"
" #f"
" #f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2706)(in-vector v_2706 0 #f 1))"
"((v_2707 start_2708)(in-vector v_2707 start_2708 #f 1))"
"((v_2709 start_2710 stop_2711)(in-vector v_2709 start_2710 stop_2711 1))"
"((v_2712 start_2713 stop_2714 step_2715)"
"(let-values(((v_2716 start_2717 stop_2718 step_2719)"
"                  (normalise-inputs 'in-vector \"vector\" vector? vector-length v_2712 start_2713 stop_2714 step_2715)))"
"(make-do-sequence(lambda()(:vector-gen v_2716 start_2717 stop_2718 step_2719)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2720 start_2721 stop_2722 step_2723)"
"(values"
"(lambda(i_2724)(string-ref v_2720 i_2724))"
"(if(= step_2723 1) add1(lambda(i_2725)(+ i_2725 step_2723)))"
" start_2721"
"(if(> step_2723 0)(lambda(i_2726)(< i_2726 stop_2722))(lambda(i_2727)(> i_2727 stop_2722)))"
" #f"
" #f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2728)(in-string v_2728 0 #f 1))"
"((v_2729 start_2730)(in-string v_2729 start_2730 #f 1))"
"((v_2731 start_2732 stop_2733)(in-string v_2731 start_2732 stop_2733 1))"
"((v_2734 start_2735 stop_2736 step_2737)"
"(let-values(((v_2738 start_2739 stop_2740 step_2741)"
"                  (normalise-inputs 'in-string \"string\" string? string-length v_2734 start_2735 stop_2736 step_2737)))"
"(make-do-sequence(lambda()(:string-gen v_2738 start_2739 stop_2740 step_2741)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2742 start_2743 stop_2744 step_2745)"
"(values"
"(lambda(i_2746)(unsafe-bytes-ref v_2742 i_2746))"
"(if(= step_2745 1) add1(lambda(i_2747)(+ i_2747 step_2745)))"
" start_2743"
"(if(> step_2745 0)(lambda(i_2748)(< i_2748 stop_2744))(lambda(i_2749)(> i_2749 stop_2744)))"
" #f"
" #f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2750)(in-bytes v_2750 0 #f 1))"
"((v_2751 start_2752)(in-bytes v_2751 start_2752 #f 1))"
"((v_2753 start_2754 stop_2755)(in-bytes v_2753 start_2754 stop_2755 1))"
"((v_2756 start_2757 stop_2758 step_2759)"
"(let-values(((v_2760 start_2761 stop_2762 step_2763)"
"                  (normalise-inputs 'in-bytes \"bytes\" bytes? bytes-length v_2756 start_2757 stop_2758 step_2759)))"
"(make-do-sequence(lambda()(:bytes-gen v_2760 start_2761 stop_2762 step_2763)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2764 start_2765 stop_2766 step_2767)"
"(values"
"(lambda(i_2768)(unsafe-flvector-ref v_2764 i_2768))"
"(if(= step_2767 1) add1(lambda(i_2769)(+ i_2769 step_2767)))"
" start_2765"
"(if(> step_2767 0)(lambda(i_2770)(< i_2770 stop_2766))(lambda(i_2771)(> i_2771 stop_2766)))"
" #f"
" #f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2772 start_2773 stop_2774 step_2775)"
"(values"
"(lambda(i_2776)(unsafe-fxvector-ref v_2772 i_2776))"
"(if(= step_2775 1) add1(lambda(i_2777)(+ i_2777 step_2775)))"
" start_2773"
"(if(> step_2775 0)(lambda(i_2778)(< i_2778 stop_2774))(lambda(i_2779)(> i_2779 stop_2774)))"
" #f"
" #f)))"
"(define-values"
"(in-value)"
"(lambda(v_2817)"
"(make-do-sequence"
"(lambda()(values(lambda(pos_2818) v_2817)(lambda(pos_2819) #f) #t(lambda(pos_2820) pos_2820) void void)))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2940)((do-stream-ref v_2940 0)))"
"(lambda(v_2941)((do-stream-ref v_2941 1)))"
"(lambda(v_2942)((do-stream-ref v_2942 2))))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_2985)"
"(let-values(((n_2986)(vector-length vec_2985)))"
"(let-values(((new-vec_2987)(make-vector(* 2 n_2986))))"
"(begin(vector-copy! new-vec_2987 0 vec_2985 0 n_2986) new-vec_2987)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_2988 i_2989)"
"(let-values(((new-vec_2990)(make-vector i_2989)))"
"(begin(vector-copy! new-vec_2990 0 vec_2988 0 i_2989) new-vec_2990))))"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 1)(list? l_3) #f) #f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()(cons(f_2(car l_5))(loop_4(cdr l_5))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_6 l1_7 l2_8)"
"(if(if(procedure? f_6)"
"(if(procedure-arity-includes? f_6 2)"
"(if(list? l1_7)(if(list? l2_8)(=(length l1_7)(length l2_8)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_9)"
"(lambda(l1_10 l2_11)"
"(if(null? l1_10)"
"(let-values() null)"
"(let-values()"
"(cons(f_6(car l1_10)(car l2_11))(loop_9(cdr l1_10)(cdr l2_11))))))))"
" loop_9)"
" l1_7"
" l2_8)"
"(map f_6 l1_7 l2_8)))"
"((f_12 l_13 . args_14)(apply map f_12 l_13 args_14)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_15)"
"(case-lambda"
"((f_16 l_17)"
"(if(if(procedure? f_16)(if(procedure-arity-includes? f_16 1)(list? l_17) #f) #f)"
"((letrec-values(((loop_18)"
"(lambda(l_19)"
"(if(null? l_19)"
"(let-values()(void))"
"(let-values()(begin(f_16(car l_19))(loop_18(cdr l_19))))))))"
" loop_18)"
" l_17)"
"(for-each f_16 l_17)))"
"((f_20 l1_21 l2_22)"
"(if(if(procedure? f_20)"
"(if(procedure-arity-includes? f_20 2)"
"(if(list? l1_21)(if(list? l2_22)(=(length l1_21)(length l2_22)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_23)"
"(lambda(l1_24 l2_25)"
"(if(null? l1_24)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(f_20(car l1_24)(car l2_25))"
"(loop_23(cdr l1_24)(cdr l2_25))))))))"
" loop_23)"
" l1_21"
" l2_22)"
"(for-each f_20 l1_21 l2_22)))"
"((f_26 l_27 . args_28)(apply for-each f_26 l_27 args_28)))))"
" for-each_15))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_29)"
"(case-lambda"
"((f_30 l_31)"
"(if(if(procedure? f_30)(if(procedure-arity-includes? f_30 1)(list? l_31) #f) #f)"
"(if(null? l_31)"
" #t"
"((letrec-values(((loop_32)"
"(lambda(l_33)"
"(if(null?(cdr l_33))"
"(let-values()(f_30(car l_33)))"
"(let-values()(if(f_30(car l_33))(loop_32(cdr l_33)) #f))))))"
" loop_32)"
" l_31))"
"(andmap f_30 l_31)))"
"((f_34 l1_35 l2_36)"
"(if(if(procedure? f_34)"
"(if(procedure-arity-includes? f_34 2)"
"(if(list? l1_35)(if(list? l2_36)(=(length l1_35)(length l2_36)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_35)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l1_38 l2_39)"
"(if(null?(cdr l1_38))"
"(let-values()(f_34(car l1_38)(car l2_39)))"
"(let-values()"
"(if(f_34(car l1_38)(car l2_39))"
"(loop_37(cdr l1_38)(cdr l2_39))"
" #f))))))"
" loop_37)"
" l1_35"
" l2_36))"
"(andmap f_34 l1_35 l2_36)))"
"((f_40 l_41 . args_42)(apply andmap f_40 l_41 args_42)))))"
" andmap_29))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_43)"
"(case-lambda"
"((f_44 l_45)"
"(if(if(procedure? f_44)(if(procedure-arity-includes? f_44 1)(list? l_45) #f) #f)"
"(if(null? l_45)"
" #f"
"((letrec-values(((loop_46)"
"(lambda(l_47)"
"(if(null?(cdr l_47))"
"(let-values()(f_44(car l_47)))"
"(let-values()"
"(let-values(((or-part_48)(f_44(car l_47))))"
"(if or-part_48 or-part_48(loop_46(cdr l_47)))))))))"
" loop_46)"
" l_45))"
"(ormap f_44 l_45)))"
"((f_49 l1_50 l2_51)"
"(if(if(procedure? f_49)"
"(if(procedure-arity-includes? f_49 2)"
"(if(list? l1_50)(if(list? l2_51)(=(length l1_50)(length l2_51)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_50)"
" #f"
"((letrec-values(((loop_52)"
"(lambda(l1_53 l2_54)"
"(if(null?(cdr l1_53))"
"(let-values()(f_49(car l1_53)(car l2_54)))"
"(let-values()"
"(let-values(((or-part_55)(f_49(car l1_53)(car l2_54))))"
"(if or-part_55 or-part_55(loop_52(cdr l1_53)(cdr l2_54)))))))))"
" loop_52)"
" l1_50"
" l2_51))"
"(ormap f_49 l1_50 l2_51)))"
"((f_56 l_57 . args_58)(apply ormap f_56 l_57 args_58)))))"
" ormap_43))"
"(define-values"
"(sort)"
"(let-values()"
"(let-values(((sort-internals_29)(make-hasheq)))"
"(let-values(((__30)"
"(let-values()"
"(begin"
"(let-values(((proc_90)"
"(lambda(vec_91 n_92)"
"(let-values(((n/2-_93)(unsafe-fxrshift n_92 1)))"
"(let-values(((n/2+_94)(unsafe-fx- n_92 n/2-_93)))"
"(letrec-values(((copying-mergesort_169)"
"(lambda(Alo_170 Blo_171 n_172)"
"(if(unsafe-fx= n_172 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170)))"
"(if(unsafe-fx= n_172 2)"
"(let-values()"
"(let-values(((x_173)"
"(unsafe-vector-ref vec_91 Alo_170))"
"((y_174)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+ Alo_170 1))))"
"(if(if #f"
"(<(#f y_174)(#f x_173))"
"(< y_174 x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 y_174)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 x_173)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" y_174)))))"
"(if(unsafe-fx< n_172 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170))"
"((letrec-values(((iloop_175)"
"(lambda(i_176)"
"(if(unsafe-fx<"
" i_176"
" n_172)"
"(let-values()"
"(let-values(((ref-i_177)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+"
" Alo_170"
" i_176))))"
"((letrec-values(((jloop_178)"
"(lambda(j_179)"
"(let-values(((ref-j-1_180)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx-"
" j_179"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_171"
" j_179)"
"(if #f"
"(<"
"(#f"
" ref-i_177)"
"(#f"
" ref-j-1_180))"
"(<"
" ref-i_177"
" ref-j-1_180))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-j-1_180)"
"(jloop_178"
"(unsafe-fx-"
" j_179"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-i_177)"
"(iloop_175"
"(unsafe-fx+"
" i_176"
" 1))))))))"
" jloop_178)"
"(unsafe-fx+"
" Blo_171"
" i_176))))"
"(void)))))"
" iloop_175)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_181)"
"(unsafe-fxrshift n_172 1)))"
"(let-values(((n/2+_182)"
"(unsafe-fx- n_172 n/2-_181)))"
"(let-values(((Amid1_183)"
"(unsafe-fx+ Alo_170 n/2-_181))"
"((Amid2_184)"
"(unsafe-fx+ Alo_170 n/2+_182))"
"((Bmid1_185)"
"(unsafe-fx+ Blo_171 n/2-_181)))"
"(begin"
"(copying-mergesort_169"
" Amid1_183"
" Bmid1_185"
" n/2+_182)"
"(copying-mergesort_169"
" Alo_170"
" Amid2_184"
" n/2-_181)"
"(let-values(((b2_186)"
"(unsafe-fx+"
" Blo_171"
" n_172)))"
"((letrec-values(((loop_187)"
"(lambda(a1_188"
" b1_189"
" c1_190)"
"(let-values(((x_191)"
"(unsafe-vector-ref"
" vec_91"
" a1_188))"
"((y_192)"
"(unsafe-vector-ref"
" vec_91"
" b1_189)))"
"(if(if #t"
"(not"
"(if #f"
"(<"
"(#f"
" y_192)"
"(#f"
" x_191))"
"(<"
" y_192"
" x_191)))"
"(if #f"
"(<"
"(#f"
" x_191)"
"(#f"
" y_192))"
"(<"
" x_191"
" y_192)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" x_191)"
"(let-values(((a1_193)"
"(unsafe-fx+"
" a1_188"
" 1))"
"((c1_194)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<"
" c1_194"
" b1_189)"
"(let-values()"
"(loop_187"
" a1_193"
" b1_189"
" c1_194))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" y_192)"
"(let-values(((b1_195)"
"(unsafe-fx+"
" b1_189"
" 1))"
"((c1_196)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<="
" b2_186"
" b1_195)"
"((letrec-values(((loop_197)"
"(lambda(a1_198"
" c1_199)"
"(if(unsafe-fx<"
" c1_199"
" b1_195)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_199"
"(unsafe-vector-ref"
" vec_91"
" a1_198))"
"(loop_197"
"(unsafe-fx+"
" a1_198"
" 1)"
"(unsafe-fx+"
" c1_199"
" 1))))"
"(void)))))"
" loop_197)"
" a1_188"
" c1_196)"
"(loop_187"
" a1_188"
" b1_195"
" c1_196)))))))))"
" loop_187)"
" Amid2_184"
" Bmid1_185"
" Blo_171)))))))))))))"
"(let-values(((Alo_200) 0)"
"((Amid1_201) n/2-_93)"
"((Amid2_202) n/2+_94)"
"((Ahi_203) n_92)"
"((B1lo_204) n_92))"
"(begin"
"(copying-mergesort_169 Amid1_201 B1lo_204 n/2+_94)"
"(if(zero? n/2-_93)"
"(void)"
"(let-values()(copying-mergesort_169 Alo_200 Amid2_202 n/2-_93)))"
"(let-values(((b2_205) Ahi_203))"
"((letrec-values(((loop_206)"
"(lambda(a1_207 b1_208 c1_209)"
"(let-values(((x_210)"
"(unsafe-vector-ref vec_91 a1_207))"
"((y_211)"
"(unsafe-vector-ref"
" vec_91"
" b1_208)))"
"(if(if #f"
"(not"
"(if #f"
"(<(#f y_211)(#f x_210))"
"(< y_211 x_210)))"
"(if #f"
"(<(#f x_210)(#f y_211))"
"(< x_210 y_211)))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 x_210)"
"(let-values(((a1_212)"
"(unsafe-fx+ a1_207 1))"
"((c1_213)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx< c1_213 b1_208)"
"(let-values()"
"(loop_206 a1_212 b1_208 c1_213))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 y_211)"
"(let-values(((b1_214)"
"(unsafe-fx+ b1_208 1))"
"((c1_215)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx<= b2_205 b1_214)"
"((letrec-values(((loop_216)"
"(lambda(a1_217"
" c1_218)"
"(if(unsafe-fx<"
" c1_218"
" b1_214)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_218"
"(unsafe-vector-ref"
" vec_91"
" a1_217))"
"(loop_216"
"(unsafe-fx+"
" a1_217"
" 1)"
"(unsafe-fx+"
" c1_218"
" 1))))"
"(void)))))"
" loop_216)"
" a1_207"
" c1_215)"
"(loop_206"
" a1_207"
" b1_214"
" c1_215)))))))))"
" loop_206)"
" B1lo_204"
" Amid2_202"
" Alo_200))))))))))"
"(begin(hash-set! sort-internals_29 < proc_90)(hash-set! sort-internals_29 <= proc_90)))"
"(let-values(((proc_219)"
"(lambda(vec_220 n_221)"
"(let-values(((n/2-_222)(unsafe-fxrshift n_221 1)))"
"(let-values(((n/2+_223)(unsafe-fx- n_221 n/2-_222)))"
"(letrec-values(((copying-mergesort_298)"
"(lambda(Alo_299 Blo_300 n_301)"
"(if(unsafe-fx= n_301 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299)))"
"(if(unsafe-fx= n_301 2)"
"(let-values()"
"(let-values(((x_302)"
"(unsafe-vector-ref vec_220 Alo_299))"
"((y_303)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+ Alo_299 1))))"
"(if(if #f"
"(>(#f y_303)(#f x_302))"
"(> y_303 x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 y_303)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 x_302)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" y_303)))))"
"(if(unsafe-fx< n_301 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299))"
"((letrec-values(((iloop_304)"
"(lambda(i_305)"
"(if(unsafe-fx<"
" i_305"
" n_301)"
"(let-values()"
"(let-values(((ref-i_306)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+"
" Alo_299"
" i_305))))"
"((letrec-values(((jloop_307)"
"(lambda(j_308)"
"(let-values(((ref-j-1_309)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx-"
" j_308"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_300"
" j_308)"
"(if #f"
"(>"
"(#f"
" ref-i_306)"
"(#f"
" ref-j-1_309))"
"(>"
" ref-i_306"
" ref-j-1_309))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-j-1_309)"
"(jloop_307"
"(unsafe-fx-"
" j_308"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-i_306)"
"(iloop_304"
"(unsafe-fx+"
" i_305"
" 1))))))))"
" jloop_307)"
"(unsafe-fx+"
" Blo_300"
" i_305))))"
"(void)))))"
" iloop_304)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_310)"
"(unsafe-fxrshift n_301 1)))"
"(let-values(((n/2+_311)"
"(unsafe-fx- n_301 n/2-_310)))"
"(let-values(((Amid1_312)"
"(unsafe-fx+ Alo_299 n/2-_310))"
"((Amid2_313)"
"(unsafe-fx+ Alo_299 n/2+_311))"
"((Bmid1_314)"
"(unsafe-fx+ Blo_300 n/2-_310)))"
"(begin"
"(copying-mergesort_298"
" Amid1_312"
" Bmid1_314"
" n/2+_311)"
"(copying-mergesort_298"
" Alo_299"
" Amid2_313"
" n/2-_310)"
"(let-values(((b2_315)"
"(unsafe-fx+"
" Blo_300"
" n_301)))"
"((letrec-values(((loop_316)"
"(lambda(a1_317"
" b1_318"
" c1_319)"
"(let-values(((x_320)"
"(unsafe-vector-ref"
" vec_220"
" a1_317))"
"((y_321)"
"(unsafe-vector-ref"
" vec_220"
" b1_318)))"
"(if(if #t"
"(not"
"(if #f"
"(>"
"(#f"
" y_321)"
"(#f"
" x_320))"
"(>"
" y_321"
" x_320)))"
"(if #f"
"(>"
"(#f"
" x_320)"
"(#f"
" y_321))"
"(>"
" x_320"
" y_321)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" x_320)"
"(let-values(((a1_322)"
"(unsafe-fx+"
" a1_317"
" 1))"
"((c1_323)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<"
" c1_323"
" b1_318)"
"(let-values()"
"(loop_316"
" a1_322"
" b1_318"
" c1_323))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" y_321)"
"(let-values(((b1_324)"
"(unsafe-fx+"
" b1_318"
" 1))"
"((c1_325)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<="
" b2_315"
" b1_324)"
"((letrec-values(((loop_326)"
"(lambda(a1_327"
" c1_328)"
"(if(unsafe-fx<"
" c1_328"
" b1_324)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_328"
"(unsafe-vector-ref"
" vec_220"
" a1_327))"
"(loop_326"
"(unsafe-fx+"
" a1_327"
" 1)"
"(unsafe-fx+"
" c1_328"
" 1))))"
"(void)))))"
" loop_326)"
" a1_317"
" c1_325)"
"(loop_316"
" a1_317"
" b1_324"
" c1_325)))))))))"
" loop_316)"
" Amid2_313"
" Bmid1_314"
" Blo_300)))))))))))))"
"(let-values(((Alo_329) 0)"
"((Amid1_330) n/2-_222)"
"((Amid2_331) n/2+_223)"
"((Ahi_332) n_221)"
"((B1lo_333) n_221))"
"(begin"
"(copying-mergesort_298 Amid1_330 B1lo_333 n/2+_223)"
"(if(zero? n/2-_222)"
"(void)"
"(let-values()(copying-mergesort_298 Alo_329 Amid2_331 n/2-_222)))"
"(let-values(((b2_334) Ahi_332))"
"((letrec-values(((loop_335)"
"(lambda(a1_336 b1_337 c1_338)"
"(let-values(((x_339)"
"(unsafe-vector-ref"
" vec_220"
" a1_336))"
"((y_340)"
"(unsafe-vector-ref"
" vec_220"
" b1_337)))"
"(if(if #f"
"(not"
"(if #f"
"(>(#f y_340)(#f x_339))"
"(> y_340 x_339)))"
"(if #f"
"(>(#f x_339)(#f y_340))"
"(> x_339 y_340)))"
"(begin"
"(unsafe-vector-set! vec_220 c1_338 x_339)"
"(let-values(((a1_341)"
"(unsafe-fx+ a1_336 1))"
"((c1_342)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx< c1_342 b1_337)"
"(let-values()"
"(loop_335 a1_341 b1_337 c1_342))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_220 c1_338 y_340)"
"(let-values(((b1_343)"
"(unsafe-fx+ b1_337 1))"
"((c1_344)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx<= b2_334 b1_343)"
"((letrec-values(((loop_345)"
"(lambda(a1_346"
" c1_347)"
"(if(unsafe-fx<"
" c1_347"
" b1_343)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_347"
"(unsafe-vector-ref"
" vec_220"
" a1_346))"
"(loop_345"
"(unsafe-fx+"
" a1_346"
" 1)"
"(unsafe-fx+"
" c1_347"
" 1))))"
"(void)))))"
" loop_345)"
" a1_336"
" c1_344)"
"(loop_335"
" a1_336"
" b1_343"
" c1_344)))))))))"
" loop_335)"
" B1lo_333"
" Amid2_331"
" Alo_329))))))))))"
"(begin(hash-set! sort-internals_29 > proc_219)(hash-set! sort-internals_29 >= proc_219)))"
"(let-values(((proc_348)"
"(lambda(vec_349 n_350)"
"(let-values(((n/2-_351)(unsafe-fxrshift n_350 1)))"
"(let-values(((n/2+_352)(unsafe-fx- n_350 n/2-_351)))"
"(letrec-values(((copying-mergesort_427)"
"(lambda(Alo_428 Blo_429 n_430)"
"(if(unsafe-fx= n_430 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428)))"
"(if(unsafe-fx= n_430 2)"
"(let-values()"
"(let-values(((x_431)"
"(unsafe-vector-ref vec_349 Alo_428))"
"((y_432)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+ Alo_428 1))))"
"(if(if #f"
"(string<?(#f y_432)(#f x_431))"
"(string<? y_432 x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 y_432)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 x_431)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" y_432)))))"
"(if(unsafe-fx< n_430 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428))"
"((letrec-values(((iloop_433)"
"(lambda(i_434)"
"(if(unsafe-fx<"
" i_434"
" n_430)"
"(let-values()"
"(let-values(((ref-i_435)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+"
" Alo_428"
" i_434))))"
"((letrec-values(((jloop_436)"
"(lambda(j_437)"
"(let-values(((ref-j-1_438)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx-"
" j_437"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_429"
" j_437)"
"(if #f"
"(string<?"
"(#f"
" ref-i_435)"
"(#f"
" ref-j-1_438))"
"(string<?"
" ref-i_435"
" ref-j-1_438))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-j-1_438)"
"(jloop_436"
"(unsafe-fx-"
" j_437"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-i_435)"
"(iloop_433"
"(unsafe-fx+"
" i_434"
" 1))))))))"
" jloop_436)"
"(unsafe-fx+"
" Blo_429"
" i_434))))"
"(void)))))"
" iloop_433)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_439)"
"(unsafe-fxrshift n_430 1)))"
"(let-values(((n/2+_440)"
"(unsafe-fx- n_430 n/2-_439)))"
"(let-values(((Amid1_441)"
"(unsafe-fx+ Alo_428 n/2-_439))"
"((Amid2_442)"
"(unsafe-fx+ Alo_428 n/2+_440))"
"((Bmid1_443)"
"(unsafe-fx+ Blo_429 n/2-_439)))"
"(begin"
"(copying-mergesort_427"
" Amid1_441"
" Bmid1_443"
" n/2+_440)"
"(copying-mergesort_427"
" Alo_428"
" Amid2_442"
" n/2-_439)"
"(let-values(((b2_444)"
"(unsafe-fx+"
" Blo_429"
" n_430)))"
"((letrec-values(((loop_445)"
"(lambda(a1_446"
" b1_447"
" c1_448)"
"(let-values(((x_449)"
"(unsafe-vector-ref"
" vec_349"
" a1_446))"
"((y_450)"
"(unsafe-vector-ref"
" vec_349"
" b1_447)))"
"(if(if #t"
"(not"
"(if #f"
"(string<?"
"(#f"
" y_450)"
"(#f"
" x_449))"
"(string<?"
" y_450"
" x_449)))"
"(if #f"
"(string<?"
"(#f"
" x_449)"
"(#f"
" y_450))"
"(string<?"
" x_449"
" y_450)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" x_449)"
"(let-values(((a1_451)"
"(unsafe-fx+"
" a1_446"
" 1))"
"((c1_452)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<"
" c1_452"
" b1_447)"
"(let-values()"
"(loop_445"
" a1_451"
" b1_447"
" c1_452))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" y_450)"
"(let-values(((b1_453)"
"(unsafe-fx+"
" b1_447"
" 1))"
"((c1_454)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<="
" b2_444"
" b1_453)"
"((letrec-values(((loop_455)"
"(lambda(a1_456"
" c1_457)"
"(if(unsafe-fx<"
" c1_457"
" b1_453)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_457"
"(unsafe-vector-ref"
" vec_349"
" a1_456))"
"(loop_455"
"(unsafe-fx+"
" a1_456"
" 1)"
"(unsafe-fx+"
" c1_457"
" 1))))"
"(void)))))"
" loop_455)"
" a1_446"
" c1_454)"
"(loop_445"
" a1_446"
" b1_453"
" c1_454)))))))))"
" loop_445)"
" Amid2_442"
" Bmid1_443"
" Blo_429)))))))))))))"
"(let-values(((Alo_458) 0)"
"((Amid1_459) n/2-_351)"
"((Amid2_460) n/2+_352)"
"((Ahi_461) n_350)"
"((B1lo_462) n_350))"
"(begin"
"(copying-mergesort_427 Amid1_459 B1lo_462 n/2+_352)"
"(if(zero? n/2-_351)"
"(void)"
"(let-values()(copying-mergesort_427 Alo_458 Amid2_460 n/2-_351)))"
"(let-values(((b2_463) Ahi_461))"
"((letrec-values(((loop_464)"
"(lambda(a1_465 b1_466 c1_467)"
"(let-values(((x_468)"
"(unsafe-vector-ref"
" vec_349"
" a1_465))"
"((y_469)"
"(unsafe-vector-ref"
" vec_349"
" b1_466)))"
"(if(if #f"
"(not"
"(if #f"
"(string<?(#f y_469)(#f x_468))"
"(string<? y_469 x_468)))"
"(if #f"
"(string<?(#f x_468)(#f y_469))"
"(string<? x_468 y_469)))"
"(begin"
"(unsafe-vector-set! vec_349 c1_467 x_468)"
"(let-values(((a1_470)"
"(unsafe-fx+ a1_465 1))"
"((c1_471)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx< c1_471 b1_466)"
"(let-values()"
"(loop_464 a1_470 b1_466 c1_471))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_349 c1_467 y_469)"
"(let-values(((b1_472)"
"(unsafe-fx+ b1_466 1))"
"((c1_473)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx<= b2_463 b1_472)"
"((letrec-values(((loop_474)"
"(lambda(a1_475"
" c1_476)"
"(if(unsafe-fx<"
" c1_476"
" b1_472)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_476"
"(unsafe-vector-ref"
" vec_349"
" a1_475))"
"(loop_474"
"(unsafe-fx+"
" a1_475"
" 1)"
"(unsafe-fx+"
" c1_476"
" 1))))"
"(void)))))"
" loop_474)"
" a1_465"
" c1_473)"
"(loop_464"
" a1_465"
" b1_472"
" c1_473)))))))))"
" loop_464)"
" B1lo_462"
" Amid2_460"
" Alo_458))))))))))"
"(begin"
"(hash-set! sort-internals_29 string<? proc_348)"
"(hash-set! sort-internals_29 string<=? proc_348)))"
"(let-values(((proc_477)"
"(lambda(vec_478 n_479)"
"(let-values(((n/2-_480)(unsafe-fxrshift n_479 1)))"
"(let-values(((n/2+_481)(unsafe-fx- n_479 n/2-_480)))"
"(letrec-values(((copying-mergesort_556)"
"(lambda(Alo_557 Blo_558 n_559)"
"(if(unsafe-fx= n_559 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557)))"
"(if(unsafe-fx= n_559 2)"
"(let-values()"
"(let-values(((x_560)"
"(unsafe-vector-ref vec_478 Alo_557))"
"((y_561)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+ Alo_557 1))))"
"(if(if #f"
"(string-ci<?(#f y_561)(#f x_560))"
"(string-ci<? y_561 x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 y_561)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 x_560)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" y_561)))))"
"(if(unsafe-fx< n_559 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557))"
"((letrec-values(((iloop_562)"
"(lambda(i_563)"
"(if(unsafe-fx<"
" i_563"
" n_559)"
"(let-values()"
"(let-values(((ref-i_564)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+"
" Alo_557"
" i_563))))"
"((letrec-values(((jloop_565)"
"(lambda(j_566)"
"(let-values(((ref-j-1_567)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx-"
" j_566"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_558"
" j_566)"
"(if #f"
"(string-ci<?"
"(#f"
" ref-i_564)"
"(#f"
" ref-j-1_567))"
"(string-ci<?"
" ref-i_564"
" ref-j-1_567))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-j-1_567)"
"(jloop_565"
"(unsafe-fx-"
" j_566"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-i_564)"
"(iloop_562"
"(unsafe-fx+"
" i_563"
" 1))))))))"
" jloop_565)"
"(unsafe-fx+"
" Blo_558"
" i_563))))"
"(void)))))"
" iloop_562)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_568)"
"(unsafe-fxrshift n_559 1)))"
"(let-values(((n/2+_569)"
"(unsafe-fx- n_559 n/2-_568)))"
"(let-values(((Amid1_570)"
"(unsafe-fx+ Alo_557 n/2-_568))"
"((Amid2_571)"
"(unsafe-fx+ Alo_557 n/2+_569))"
"((Bmid1_572)"
"(unsafe-fx+ Blo_558 n/2-_568)))"
"(begin"
"(copying-mergesort_556"
" Amid1_570"
" Bmid1_572"
" n/2+_569)"
"(copying-mergesort_556"
" Alo_557"
" Amid2_571"
" n/2-_568)"
"(let-values(((b2_573)"
"(unsafe-fx+"
" Blo_558"
" n_559)))"
"((letrec-values(((loop_574)"
"(lambda(a1_575"
" b1_576"
" c1_577)"
"(let-values(((x_578)"
"(unsafe-vector-ref"
" vec_478"
" a1_575))"
"((y_579)"
"(unsafe-vector-ref"
" vec_478"
" b1_576)))"
"(if(if #t"
"(not"
"(if #f"
"(string-ci<?"
"(#f"
" y_579)"
"(#f"
" x_578))"
"(string-ci<?"
" y_579"
" x_578)))"
"(if #f"
"(string-ci<?"
"(#f"
" x_578)"
"(#f"
" y_579))"
"(string-ci<?"
" x_578"
" y_579)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" x_578)"
"(let-values(((a1_580)"
"(unsafe-fx+"
" a1_575"
" 1))"
"((c1_581)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<"
" c1_581"
" b1_576)"
"(let-values()"
"(loop_574"
" a1_580"
" b1_576"
" c1_581))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" y_579)"
"(let-values(((b1_582)"
"(unsafe-fx+"
" b1_576"
" 1))"
"((c1_583)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<="
" b2_573"
" b1_582)"
"((letrec-values(((loop_584)"
"(lambda(a1_585"
" c1_586)"
"(if(unsafe-fx<"
" c1_586"
" b1_582)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_586"
"(unsafe-vector-ref"
" vec_478"
" a1_585))"
"(loop_584"
"(unsafe-fx+"
" a1_585"
" 1)"
"(unsafe-fx+"
" c1_586"
" 1))))"
"(void)))))"
" loop_584)"
" a1_575"
" c1_583)"
"(loop_574"
" a1_575"
" b1_582"
" c1_583)))))))))"
" loop_574)"
" Amid2_571"
" Bmid1_572"
" Blo_558)))))))))))))"
"(let-values(((Alo_587) 0)"
"((Amid1_588) n/2-_480)"
"((Amid2_589) n/2+_481)"
"((Ahi_590) n_479)"
"((B1lo_591) n_479))"
"(begin"
"(copying-mergesort_556 Amid1_588 B1lo_591 n/2+_481)"
"(if(zero? n/2-_480)"
"(void)"
"(let-values()(copying-mergesort_556 Alo_587 Amid2_589 n/2-_480)))"
"(let-values(((b2_592) Ahi_590))"
"((letrec-values(((loop_593)"
"(lambda(a1_594 b1_595 c1_596)"
"(let-values(((x_597)"
"(unsafe-vector-ref"
" vec_478"
" a1_594))"
"((y_598)"
"(unsafe-vector-ref"
" vec_478"
" b1_595)))"
"(if(if #f"
"(not"
"(if #f"
"(string-ci<?(#f y_598)(#f x_597))"
"(string-ci<? y_598 x_597)))"
"(if #f"
"(string-ci<?(#f x_597)(#f y_598))"
"(string-ci<? x_597 y_598)))"
"(begin"
"(unsafe-vector-set! vec_478 c1_596 x_597)"
"(let-values(((a1_599)"
"(unsafe-fx+ a1_594 1))"
"((c1_600)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx< c1_600 b1_595)"
"(let-values()"
"(loop_593 a1_599 b1_595 c1_600))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_478 c1_596 y_598)"
"(let-values(((b1_601)"
"(unsafe-fx+ b1_595 1))"
"((c1_602)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx<= b2_592 b1_601)"
"((letrec-values(((loop_603)"
"(lambda(a1_604"
" c1_605)"
"(if(unsafe-fx<"
" c1_605"
" b1_601)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_605"
"(unsafe-vector-ref"
" vec_478"
" a1_604))"
"(loop_603"
"(unsafe-fx+"
" a1_604"
" 1)"
"(unsafe-fx+"
" c1_605"
" 1))))"
"(void)))))"
" loop_603)"
" a1_594"
" c1_602)"
"(loop_593"
" a1_594"
" b1_601"
" c1_602)))))))))"
" loop_593)"
" B1lo_591"
" Amid2_589"
" Alo_587))))))))))"
"(begin"
"(hash-set! sort-internals_29 string-ci<? proc_477)"
"(hash-set! sort-internals_29 string-ci<=? proc_477)))"
"(let-values(((proc_606)"
"(lambda(vec_607 n_608)"
"(let-values(((n/2-_609)(unsafe-fxrshift n_608 1)))"
"(let-values(((n/2+_610)(unsafe-fx- n_608 n/2-_609)))"
"(letrec-values(((copying-mergesort_685)"
"(lambda(Alo_686 Blo_687 n_688)"
"(if(unsafe-fx= n_688 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686)))"
"(if(unsafe-fx= n_688 2)"
"(let-values()"
"(let-values(((x_689)"
"(unsafe-vector-ref vec_607 Alo_686))"
"((y_690)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+ Alo_686 1))))"
"(if(if #f"
"(keyword<?(#f y_690)(#f x_689))"
"(keyword<? y_690 x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 y_690)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 x_689)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" y_690)))))"
"(if(unsafe-fx< n_688 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686))"
"((letrec-values(((iloop_691)"
"(lambda(i_692)"
"(if(unsafe-fx<"
" i_692"
" n_688)"
"(let-values()"
"(let-values(((ref-i_693)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+"
" Alo_686"
" i_692))))"
"((letrec-values(((jloop_694)"
"(lambda(j_695)"
"(let-values(((ref-j-1_696)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx-"
" j_695"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_687"
" j_695)"
"(if #f"
"(keyword<?"
"(#f"
" ref-i_693)"
"(#f"
" ref-j-1_696))"
"(keyword<?"
" ref-i_693"
" ref-j-1_696))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-j-1_696)"
"(jloop_694"
"(unsafe-fx-"
" j_695"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-i_693)"
"(iloop_691"
"(unsafe-fx+"
" i_692"
" 1))))))))"
" jloop_694)"
"(unsafe-fx+"
" Blo_687"
" i_692))))"
"(void)))))"
" iloop_691)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_697)"
"(unsafe-fxrshift n_688 1)))"
"(let-values(((n/2+_698)"
"(unsafe-fx- n_688 n/2-_697)))"
"(let-values(((Amid1_699)"
"(unsafe-fx+ Alo_686 n/2-_697))"
"((Amid2_700)"
"(unsafe-fx+ Alo_686 n/2+_698))"
"((Bmid1_701)"
"(unsafe-fx+ Blo_687 n/2-_697)))"
"(begin"
"(copying-mergesort_685"
" Amid1_699"
" Bmid1_701"
" n/2+_698)"
"(copying-mergesort_685"
" Alo_686"
" Amid2_700"
" n/2-_697)"
"(let-values(((b2_702)"
"(unsafe-fx+"
" Blo_687"
" n_688)))"
"((letrec-values(((loop_703)"
"(lambda(a1_704"
" b1_705"
" c1_706)"
"(let-values(((x_707)"
"(unsafe-vector-ref"
" vec_607"
" a1_704))"
"((y_708)"
"(unsafe-vector-ref"
" vec_607"
" b1_705)))"
"(if(if #t"
"(not"
"(if #f"
"(keyword<?"
"(#f"
" y_708)"
"(#f"
" x_707))"
"(keyword<?"
" y_708"
" x_707)))"
"(if #f"
"(keyword<?"
"(#f"
" x_707)"
"(#f"
" y_708))"
"(keyword<?"
" x_707"
" y_708)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" x_707)"
"(let-values(((a1_709)"
"(unsafe-fx+"
" a1_704"
" 1))"
"((c1_710)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<"
" c1_710"
" b1_705)"
"(let-values()"
"(loop_703"
" a1_709"
" b1_705"
" c1_710))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" y_708)"
"(let-values(((b1_711)"
"(unsafe-fx+"
" b1_705"
" 1))"
"((c1_712)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<="
" b2_702"
" b1_711)"
"((letrec-values(((loop_713)"
"(lambda(a1_714"
" c1_715)"
"(if(unsafe-fx<"
" c1_715"
" b1_711)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_715"
"(unsafe-vector-ref"
" vec_607"
" a1_714))"
"(loop_713"
"(unsafe-fx+"
" a1_714"
" 1)"
"(unsafe-fx+"
" c1_715"
" 1))))"
"(void)))))"
" loop_713)"
" a1_704"
" c1_712)"
"(loop_703"
" a1_704"
" b1_711"
" c1_712)))))))))"
" loop_703)"
" Amid2_700"
" Bmid1_701"
" Blo_687)))))))))))))"
"(let-values(((Alo_716) 0)"
"((Amid1_717) n/2-_609)"
"((Amid2_718) n/2+_610)"
"((Ahi_719) n_608)"
"((B1lo_720) n_608))"
"(begin"
"(copying-mergesort_685 Amid1_717 B1lo_720 n/2+_610)"
"(if(zero? n/2-_609)"
"(void)"
"(let-values()(copying-mergesort_685 Alo_716 Amid2_718 n/2-_609)))"
"(let-values(((b2_721) Ahi_719))"
"((letrec-values(((loop_722)"
"(lambda(a1_723 b1_724 c1_725)"
"(let-values(((x_726)"
"(unsafe-vector-ref"
" vec_607"
" a1_723))"
"((y_727)"
"(unsafe-vector-ref"
" vec_607"
" b1_724)))"
"(if(if #f"
"(not"
"(if #f"
"(keyword<?(#f y_727)(#f x_726))"
"(keyword<? y_727 x_726)))"
"(if #f"
"(keyword<?(#f x_726)(#f y_727))"
"(keyword<? x_726 y_727)))"
"(begin"
"(unsafe-vector-set! vec_607 c1_725 x_726)"
"(let-values(((a1_728)"
"(unsafe-fx+ a1_723 1))"
"((c1_729)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx< c1_729 b1_724)"
"(let-values()"
"(loop_722 a1_728 b1_724 c1_729))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_607 c1_725 y_727)"
"(let-values(((b1_730)"
"(unsafe-fx+ b1_724 1))"
"((c1_731)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx<= b2_721 b1_730)"
"((letrec-values(((loop_732)"
"(lambda(a1_733"
" c1_734)"
"(if(unsafe-fx<"
" c1_734"
" b1_730)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_734"
"(unsafe-vector-ref"
" vec_607"
" a1_733))"
"(loop_732"
"(unsafe-fx+"
" a1_733"
" 1)"
"(unsafe-fx+"
" c1_734"
" 1))))"
"(void)))))"
" loop_732)"
" a1_723"
" c1_731)"
"(loop_722"
" a1_723"
" b1_730"
" c1_731)))))))))"
" loop_722)"
" B1lo_720"
" Amid2_718"
" Alo_716))))))))))"
"(hash-set! sort-internals_29 keyword<? proc_606))))))"
"(case-lambda"
"((lst_735 <?_736)"
"(let-values(((n_737)(length lst_735)))"
"(if(= n_737 0)"
"(let-values() lst_735)"
"(if #f"
"(let-values()"
"(let-values(((vec_752)(make-vector(+ n_737(ceiling(/ n_737 2))))))"
"(begin"
"((letrec-values(((loop_753)"
"(lambda(i_754 lst_755)"
"(if(pair? lst_755)"
"(let-values()"
"(let-values(((x_756)(car lst_755)))"
"(begin"
"(vector-set! vec_752 i_754(cons(#f x_756) x_756))"
"(loop_753(add1 i_754)(cdr lst_755)))))"
"(void)))))"
" loop_753)"
" 0"
" lst_735)"
"(let-values()"
"(let-values(((n/2-_757)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_758)(unsafe-fx- n_737 n/2-_757)))"
"(letrec-values(((copying-mergesort_833)"
"(lambda(Alo_834 Blo_835 n_836)"
"(if(unsafe-fx= n_836 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_752"
" Blo_835"
"(unsafe-vector-ref vec_752 Alo_834)))"
"(if(unsafe-fx= n_836 2)"
"(let-values()"
"(let-values(((x_837)(unsafe-vector-ref vec_752 Alo_834))"
"((y_838)"
"(unsafe-vector-ref vec_752(unsafe-fx+ Alo_834 1))))"
"(if(if #t(<?_736(car y_838)(car x_837))(<?_736 y_838 x_837))"
"(begin"
"(unsafe-vector-set! vec_752 Blo_835 y_838)"
"(unsafe-vector-set! vec_752(unsafe-fx+ Blo_835 1) x_837))"
"(begin"
"(unsafe-vector-set! vec_752 Blo_835 x_837)"
"(unsafe-vector-set! vec_752(unsafe-fx+ Blo_835 1) y_838)))))"
"(if(unsafe-fx< n_836 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" Blo_835"
"(unsafe-vector-ref vec_752 Alo_834))"
"((letrec-values(((iloop_839)"
"(lambda(i_840)"
"(if(unsafe-fx< i_840 n_836)"
"(let-values()"
"(let-values(((ref-i_841)"
"(unsafe-vector-ref"
" vec_752"
"(unsafe-fx+"
" Alo_834"
" i_840))))"
"((letrec-values(((jloop_842)"
"(lambda(j_843)"
"(let-values(((ref-j-1_844)"
"(unsafe-vector-ref"
" vec_752"
"(unsafe-fx-"
" j_843"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_835"
" j_843)"
"(if #t"
"(<?_736"
"(car"
" ref-i_841)"
"(car"
" ref-j-1_844))"
"(<?_736"
" ref-i_841"
" ref-j-1_844))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" j_843"
" ref-j-1_844)"
"(jloop_842"
"(unsafe-fx-"
" j_843"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" j_843"
" ref-i_841)"
"(iloop_839"
"(unsafe-fx+"
" i_840"
" 1))))))))"
" jloop_842)"
"(unsafe-fx+ Blo_835 i_840))))"
"(void)))))"
" iloop_839)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_845)(unsafe-fxrshift n_836 1)))"
"(let-values(((n/2+_846)(unsafe-fx- n_836 n/2-_845)))"
"(let-values(((Amid1_847)(unsafe-fx+ Alo_834 n/2-_845))"
"((Amid2_848)(unsafe-fx+ Alo_834 n/2+_846))"
"((Bmid1_849)(unsafe-fx+ Blo_835 n/2-_845)))"
"(begin"
"(copying-mergesort_833 Amid1_847 Bmid1_849 n/2+_846)"
"(copying-mergesort_833 Alo_834 Amid2_848 n/2-_845)"
"(let-values(((b2_850)(unsafe-fx+ Blo_835 n_836)))"
"((letrec-values(((loop_851)"
"(lambda(a1_852 b1_853 c1_854)"
"(let-values(((x_855)"
"(unsafe-vector-ref"
" vec_752"
" a1_852))"
"((y_856)"
"(unsafe-vector-ref"
" vec_752"
" b1_853)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_736"
"(car y_856)"
"(car x_855))"
"(<?_736 y_856 x_855)))"
"(if #t"
"(<?_736"
"(car x_855)"
"(car y_856))"
"(<?_736 x_855 y_856)))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_854"
" x_855)"
"(let-values(((a1_857)"
"(unsafe-fx+"
" a1_852"
" 1))"
"((c1_858)"
"(unsafe-fx+"
" c1_854"
" 1)))"
"(if(unsafe-fx<"
" c1_858"
" b1_853)"
"(let-values()"
"(loop_851"
" a1_857"
" b1_853"
" c1_858))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_854"
" y_856)"
"(let-values(((b1_859)"
"(unsafe-fx+"
" b1_853"
" 1))"
"((c1_860)"
"(unsafe-fx+"
" c1_854"
" 1)))"
"(if(unsafe-fx<="
" b2_850"
" b1_859)"
"((letrec-values(((loop_861)"
"(lambda(a1_862"
" c1_863)"
"(if(unsafe-fx<"
" c1_863"
" b1_859)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_863"
"(unsafe-vector-ref"
" vec_752"
" a1_862))"
"(loop_861"
"(unsafe-fx+"
" a1_862"
" 1)"
"(unsafe-fx+"
" c1_863"
" 1))))"
"(void)))))"
" loop_861)"
" a1_852"
" c1_860)"
"(loop_851"
" a1_852"
" b1_859"
" c1_860)))))))))"
" loop_851)"
" Amid2_848"
" Bmid1_849"
" Blo_835)))))))))))))"
"(let-values(((Alo_864) 0)"
"((Amid1_865) n/2-_757)"
"((Amid2_866) n/2+_758)"
"((Ahi_867) n_737)"
"((B1lo_868) n_737))"
"(begin"
"(copying-mergesort_833 Amid1_865 B1lo_868 n/2+_758)"
"(if(zero? n/2-_757)"
"(void)"
"(let-values()(copying-mergesort_833 Alo_864 Amid2_866 n/2-_757)))"
"(let-values(((b2_869) Ahi_867))"
"((letrec-values(((loop_870)"
"(lambda(a1_871 b1_872 c1_873)"
"(let-values(((x_874)(unsafe-vector-ref vec_752 a1_871))"
"((y_875)(unsafe-vector-ref vec_752 b1_872)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_736(car y_875)(car x_874))"
"(<?_736 y_875 x_874)))"
"(if #t"
"(<?_736(car x_874)(car y_875))"
"(<?_736 x_874 y_875)))"
"(begin"
"(unsafe-vector-set! vec_752 c1_873 x_874)"
"(let-values(((a1_876)(unsafe-fx+ a1_871 1))"
"((c1_877)(unsafe-fx+ c1_873 1)))"
"(if(unsafe-fx< c1_877 b1_872)"
"(let-values()(loop_870 a1_876 b1_872 c1_877))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_752 c1_873 y_875)"
"(let-values(((b1_878)(unsafe-fx+ b1_872 1))"
"((c1_879)(unsafe-fx+ c1_873 1)))"
"(if(unsafe-fx<= b2_869 b1_878)"
"((letrec-values(((loop_880)"
"(lambda(a1_881 c1_882)"
"(if(unsafe-fx< c1_882 b1_878)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_882"
"(unsafe-vector-ref"
" vec_752"
" a1_881))"
"(loop_880"
"(unsafe-fx+ a1_881 1)"
"(unsafe-fx+ c1_882 1))))"
"(void)))))"
" loop_880)"
" a1_871"
" c1_879)"
"(loop_870 a1_871 b1_878 c1_879)))))))))"
" loop_870)"
" B1lo_868"
" Amid2_866"
" Alo_864))))))))"
"((letrec-values(((loop_883)"
"(lambda(i_884 r_885)"
"(let-values(((i_886)(sub1 i_884)))"
"(if(< i_886 0)"
" r_885"
"(loop_883 i_886(cons(cdr(vector-ref vec_752 i_886)) r_885)))))))"
" loop_883)"
" n_737"
" '()))))"
"(if(< n_737 2)"
"(let-values() lst_735)"
"(if((letrec-values(((loop_887)"
"(lambda(last_888 next_889)"
"(let-values(((or-part_890)(null? next_889)))"
"(if or-part_890"
" or-part_890"
"(if(not"
"(if #f"
"(<?_736(#f(car next_889))(#f last_888))"
"(<?_736(car next_889) last_888)))"
"(loop_887(car next_889)(cdr next_889))"
" #f))))))"
" loop_887)"
"(car lst_735)"
"(cdr lst_735))"
"(let-values() lst_735)"
"(if(<= n_737 3)"
"(let-values()"
"(if(= n_737 2)"
"(list(cadr lst_735)(car lst_735))"
"(let-values(((a_891)(car lst_735))((b_892)(cadr lst_735))((c_893)(caddr lst_735)))"
"(let-values(((a_894)(car lst_735))((b_895)(cadr lst_735))((c_896)(caddr lst_735)))"
"(if(if #f(<?_736(#f b_895)(#f a_894))(<?_736 b_895 a_894))"
"(if(if #f(<?_736(#f c_896)(#f b_895))(<?_736 c_896 b_895))"
"(list c_896 b_895 a_894)"
"(if(if #f(<?_736(#f c_896)(#f a_894))(<?_736 c_896 a_894))"
"(list b_895 c_896 a_894)"
"(list b_895 a_894 c_896)))"
"(if(if #f(<?_736(#f c_896)(#f a_894))(<?_736 c_896 a_894))"
"(list c_896 a_894 b_895)"
"(list a_894 c_896 b_895)))))))"
"(let-values()"
"(let-values(((vec_897)(make-vector(+ n_737(ceiling(/ n_737 2))))))"
"(begin"
"((letrec-values(((loop_898)"
"(lambda(i_899 lst_900)"
"(if(pair? lst_900)"
"(let-values()"
"(begin"
"(vector-set! vec_897 i_899(car lst_900))"
"(loop_898(add1 i_899)(cdr lst_900))))"
"(void)))))"
" loop_898)"
" 0"
" lst_735)"
"(if #f"
"(let-values()"
"(let-values(((n/2-_901)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_902)(unsafe-fx- n_737 n/2-_901)))"
"(letrec-values(((copying-mergesort_977)"
"(lambda(Alo_978 Blo_979 n_980)"
"(if(unsafe-fx= n_980 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_979"
"(unsafe-vector-ref vec_897 Alo_978)))"
"(if(unsafe-fx= n_980 2)"
"(let-values()"
"(let-values(((x_981)(unsafe-vector-ref vec_897 Alo_978))"
"((y_982)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_978 1))))"
"(if(if #t"
"(<?_736(#f y_982)(#f x_981))"
"(<?_736 y_982 x_981))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_979 y_982)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_979 1)"
" x_981))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_979 x_981)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_979 1)"
" y_982)))))"
"(if(unsafe-fx< n_980 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_979"
"(unsafe-vector-ref vec_897 Alo_978))"
"((letrec-values(((iloop_983)"
"(lambda(i_984)"
"(if(unsafe-fx< i_984 n_980)"
"(let-values()"
"(let-values(((ref-i_985)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_978"
" i_984))))"
"((letrec-values(((jloop_986)"
"(lambda(j_987)"
"(let-values(((ref-j-1_988)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_987"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_979"
" j_987)"
"(if #t"
"(<?_736"
"(#f"
" ref-i_985)"
"(#f"
" ref-j-1_988))"
"(<?_736"
" ref-i_985"
" ref-j-1_988))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_987"
" ref-j-1_988)"
"(jloop_986"
"(unsafe-fx-"
" j_987"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_987"
" ref-i_985)"
"(iloop_983"
"(unsafe-fx+"
" i_984"
" 1))))))))"
" jloop_986)"
"(unsafe-fx+"
" Blo_979"
" i_984))))"
"(void)))))"
" iloop_983)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_989)(unsafe-fxrshift n_980 1)))"
"(let-values(((n/2+_990)(unsafe-fx- n_980 n/2-_989)))"
"(let-values(((Amid1_991)"
"(unsafe-fx+ Alo_978 n/2-_989))"
"((Amid2_992)"
"(unsafe-fx+ Alo_978 n/2+_990))"
"((Bmid1_993)"
"(unsafe-fx+ Blo_979 n/2-_989)))"
"(begin"
"(copying-mergesort_977"
" Amid1_991"
" Bmid1_993"
" n/2+_990)"
"(copying-mergesort_977"
" Alo_978"
" Amid2_992"
" n/2-_989)"
"(let-values(((b2_994)"
"(unsafe-fx+ Blo_979 n_980)))"
"((letrec-values(((loop_995)"
"(lambda(a1_996"
" b1_997"
" c1_998)"
"(let-values(((x_999)"
"(unsafe-vector-ref"
" vec_897"
" a1_996))"
"((y_1000)"
"(unsafe-vector-ref"
" vec_897"
" b1_997)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_736"
"(#f y_1000)"
"(#f x_999))"
"(<?_736"
" y_1000"
" x_999)))"
"(if #t"
"(<?_736"
"(#f x_999)"
"(#f y_1000))"
"(<?_736"
" x_999"
" y_1000)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_998"
" x_999)"
"(let-values(((a1_1001)"
"(unsafe-fx+"
" a1_996"
" 1))"
"((c1_1002)"
"(unsafe-fx+"
" c1_998"
" 1)))"
"(if(unsafe-fx<"
" c1_1002"
" b1_997)"
"(let-values()"
"(loop_995"
" a1_1001"
" b1_997"
" c1_1002))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_998"
" y_1000)"
"(let-values(((b1_1003)"
"(unsafe-fx+"
" b1_997"
" 1))"
"((c1_1004)"
"(unsafe-fx+"
" c1_998"
" 1)))"
"(if(unsafe-fx<="
" b2_994"
" b1_1003)"
"((letrec-values(((loop_1005)"
"(lambda(a1_1006"
" c1_1007)"
"(if(unsafe-fx<"
" c1_1007"
" b1_1003)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1007"
"(unsafe-vector-ref"
" vec_897"
" a1_1006))"
"(loop_1005"
"(unsafe-fx+"
" a1_1006"
" 1)"
"(unsafe-fx+"
" c1_1007"
" 1))))"
"(void)))))"
" loop_1005)"
" a1_996"
" c1_1004)"
"(loop_995"
" a1_996"
" b1_1003"
" c1_1004)))))))))"
" loop_995)"
" Amid2_992"
" Bmid1_993"
" Blo_979)))))))))))))"
"(let-values(((Alo_1008) 0)"
"((Amid1_1009) n/2-_901)"
"((Amid2_1010) n/2+_902)"
"((Ahi_1011) n_737)"
"((B1lo_1012) n_737))"
"(begin"
"(copying-mergesort_977 Amid1_1009 B1lo_1012 n/2+_902)"
"(if(zero? n/2-_901)"
"(void)"
"(let-values()(copying-mergesort_977 Alo_1008 Amid2_1010 n/2-_901)))"
"(let-values(((b2_1013) Ahi_1011))"
"((letrec-values(((loop_1014)"
"(lambda(a1_1015 b1_1016 c1_1017)"
"(let-values(((x_1018)"
"(unsafe-vector-ref vec_897 a1_1015))"
"((y_1019)"
"(unsafe-vector-ref vec_897 b1_1016)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_736(#f y_1019)(#f x_1018))"
"(<?_736 y_1019 x_1018)))"
"(if #t"
"(<?_736(#f x_1018)(#f y_1019))"
"(<?_736 x_1018 y_1019)))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1017 x_1018)"
"(let-values(((a1_1020)(unsafe-fx+ a1_1015 1))"
"((c1_1021)(unsafe-fx+ c1_1017 1)))"
"(if(unsafe-fx< c1_1021 b1_1016)"
"(let-values()"
"(loop_1014 a1_1020 b1_1016 c1_1021))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1017 y_1019)"
"(let-values(((b1_1022)(unsafe-fx+ b1_1016 1))"
"((c1_1023)(unsafe-fx+ c1_1017 1)))"
"(if(unsafe-fx<= b2_1013 b1_1022)"
"((letrec-values(((loop_1024)"
"(lambda(a1_1025 c1_1026)"
"(if(unsafe-fx<"
" c1_1026"
" b1_1022)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1026"
"(unsafe-vector-ref"
" vec_897"
" a1_1025))"
"(loop_1024"
"(unsafe-fx+"
" a1_1025"
" 1)"
"(unsafe-fx+"
" c1_1026"
" 1))))"
"(void)))))"
" loop_1024)"
" a1_1015"
" c1_1023)"
"(loop_1014 a1_1015 b1_1022 c1_1023)))))))))"
" loop_1014)"
" B1lo_1012"
" Amid2_1010"
" Alo_1008))))))))"
"(let-values(((si_1027)(hash-ref sort-internals_29 <?_736 #f)))"
"(if si_1027"
"(si_1027 vec_897 n_737)"
"(let-values()"
"(let-values(((n/2-_1028)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_1029)(unsafe-fx- n_737 n/2-_1028)))"
"(letrec-values(((copying-mergesort_1104)"
"(lambda(Alo_1105 Blo_1106 n_1107)"
"(if(unsafe-fx= n_1107 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105)))"
"(if(unsafe-fx= n_1107 2)"
"(let-values()"
"(let-values(((x_1108)"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((y_1109)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_1105 1))))"
"(if(if #f"
"(<?_736(#f y_1109)(#f x_1108))"
"(<?_736 y_1109 x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 y_1109)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 x_1108)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" y_1109)))))"
"(if(unsafe-fx< n_1107 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((letrec-values(((iloop_1110)"
"(lambda(i_1111)"
"(if(unsafe-fx< i_1111 n_1107)"
"(let-values()"
"(let-values(((ref-i_1112)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_1105"
" i_1111))))"
"((letrec-values(((jloop_1113)"
"(lambda(j_1114)"
"(let-values(((ref-j-1_1115)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_1114"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1106"
" j_1114)"
"(if #f"
"(<?_736"
"(#f"
" ref-i_1112)"
"(#f"
" ref-j-1_1115))"
"(<?_736"
" ref-i_1112"
" ref-j-1_1115))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-j-1_1115)"
"(jloop_1113"
"(unsafe-fx-"
" j_1114"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-i_1112)"
"(iloop_1110"
"(unsafe-fx+"
" i_1111"
" 1))))))))"
" jloop_1113)"
"(unsafe-fx+"
" Blo_1106"
" i_1111))))"
"(void)))))"
" iloop_1110)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1116)"
"(unsafe-fxrshift n_1107 1)))"
"(let-values(((n/2+_1117)"
"(unsafe-fx- n_1107 n/2-_1116)))"
"(let-values(((Amid1_1118)"
"(unsafe-fx+ Alo_1105 n/2-_1116))"
"((Amid2_1119)"
"(unsafe-fx+ Alo_1105 n/2+_1117))"
"((Bmid1_1120)"
"(unsafe-fx+ Blo_1106 n/2-_1116)))"
"(begin"
"(copying-mergesort_1104"
" Amid1_1118"
" Bmid1_1120"
" n/2+_1117)"
"(copying-mergesort_1104"
" Alo_1105"
" Amid2_1119"
" n/2-_1116)"
"(let-values(((b2_1121)"
"(unsafe-fx+ Blo_1106 n_1107)))"
"((letrec-values(((loop_1122)"
"(lambda(a1_1123"
" b1_1124"
" c1_1125)"
"(let-values(((x_1126)"
"(unsafe-vector-ref"
" vec_897"
" a1_1123))"
"((y_1127)"
"(unsafe-vector-ref"
" vec_897"
" b1_1124)))"
"(if(if #t"
"(not"
"(if #f"
"(<?_736"
"(#f y_1127)"
"(#f"
" x_1126))"
"(<?_736"
" y_1127"
" x_1126)))"
"(if #f"
"(<?_736"
"(#f x_1126)"
"(#f y_1127))"
"(<?_736"
" x_1126"
" y_1127)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" x_1126)"
"(let-values(((a1_1128)"
"(unsafe-fx+"
" a1_1123"
" 1))"
"((c1_1129)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<"
" c1_1129"
" b1_1124)"
"(let-values()"
"(loop_1122"
" a1_1128"
" b1_1124"
" c1_1129))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" y_1127)"
"(let-values(((b1_1130)"
"(unsafe-fx+"
" b1_1124"
" 1))"
"((c1_1131)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<="
" b2_1121"
" b1_1130)"
"((letrec-values(((loop_1132)"
"(lambda(a1_1133"
" c1_1134)"
"(if(unsafe-fx<"
" c1_1134"
" b1_1130)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1134"
"(unsafe-vector-ref"
" vec_897"
" a1_1133))"
"(loop_1132"
"(unsafe-fx+"
" a1_1133"
" 1)"
"(unsafe-fx+"
" c1_1134"
" 1))))"
"(void)))))"
" loop_1132)"
" a1_1123"
" c1_1131)"
"(loop_1122"
" a1_1123"
" b1_1130"
" c1_1131)))))))))"
" loop_1122)"
" Amid2_1119"
" Bmid1_1120"
" Blo_1106)))))))))))))"
"(let-values(((Alo_1135) 0)"
"((Amid1_1136) n/2-_1028)"
"((Amid2_1137) n/2+_1029)"
"((Ahi_1138) n_737)"
"((B1lo_1139) n_737))"
"(begin"
"(copying-mergesort_1104 Amid1_1136 B1lo_1139 n/2+_1029)"
"(if(zero? n/2-_1028)"
"(void)"
"(let-values()(copying-mergesort_1104 Alo_1135 Amid2_1137 n/2-_1028)))"
"(let-values(((b2_1140) Ahi_1138))"
"((letrec-values(((loop_1141)"
"(lambda(a1_1142 b1_1143 c1_1144)"
"(let-values(((x_1145)"
"(unsafe-vector-ref vec_897 a1_1142))"
"((y_1146)"
"(unsafe-vector-ref vec_897 b1_1143)))"
"(if(if #f"
"(not"
"(if #f"
"(<?_736(#f y_1146)(#f x_1145))"
"(<?_736 y_1146 x_1145)))"
"(if #f"
"(<?_736(#f x_1145)(#f y_1146))"
"(<?_736 x_1145 y_1146)))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 x_1145)"
"(let-values(((a1_1147)"
"(unsafe-fx+ a1_1142 1))"
"((c1_1148)"
"(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx< c1_1148 b1_1143)"
"(let-values()"
"(loop_1141 a1_1147 b1_1143 c1_1148))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 y_1146)"
"(let-values(((b1_1149)"
"(unsafe-fx+ b1_1143 1))"
"((c1_1150)"
"(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx<= b2_1140 b1_1149)"
"((letrec-values(((loop_1151)"
"(lambda(a1_1152"
" c1_1153)"
"(if(unsafe-fx<"
" c1_1153"
" b1_1149)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1153"
"(unsafe-vector-ref"
" vec_897"
" a1_1152))"
"(loop_1151"
"(unsafe-fx+"
" a1_1152"
" 1)"
"(unsafe-fx+"
" c1_1153"
" 1))))"
"(void)))))"
" loop_1151)"
" a1_1142"
" c1_1150)"
"(loop_1141"
" a1_1142"
" b1_1149"
" c1_1150)))))))))"
" loop_1141)"
" B1lo_1139"
" Amid2_1137"
" Alo_1135)))))))))))"
"((letrec-values(((loop_1154)"
"(lambda(i_1155 r_1156)"
"(let-values(((i_1157)(sub1 i_1155)))"
"(if(< i_1157 0)"
" r_1156"
"(loop_1154 i_1157(cons(vector-ref vec_897 i_1157) r_1156)))))))"
" loop_1154)"
" n_737"
" '())))))))))))"
"((lst_1158 <?_1159 getkey_1160)"
"(if(if getkey_1160(not(eq? values getkey_1160)) #f)"
"(sort lst_1158 <?_1159 getkey_1160 #f)"
"(sort lst_1158 <?_1159)))"
"((lst_1161 <?_1162 getkey_1163 cache-keys?_1164)"
"(if(if getkey_1163(not(eq? values getkey_1163)) #f)"
"(let-values(((n_1165)(length lst_1161)))"
"(if(= n_1165 0)"
"(let-values() lst_1161)"
"(if cache-keys?_1164"
"(let-values()"
"(let-values(((vec_1180)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1181)"
"(lambda(i_1182 lst_1183)"
"(if(pair? lst_1183)"
"(let-values()"
"(let-values(((x_1184)(car lst_1183)))"
"(begin"
"(vector-set! vec_1180 i_1182(cons(getkey_1163 x_1184) x_1184))"
"(loop_1181(add1 i_1182)(cdr lst_1183)))))"
"(void)))))"
" loop_1181)"
" 0"
" lst_1161)"
"(let-values()"
"(let-values(((n/2-_1185)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1186)(unsafe-fx- n_1165 n/2-_1185)))"
"(letrec-values(((copying-mergesort_1261)"
"(lambda(Alo_1262 Blo_1263 n_1264)"
"(if(unsafe-fx= n_1264 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262)))"
"(if(unsafe-fx= n_1264 2)"
"(let-values()"
"(let-values(((x_1265)(unsafe-vector-ref vec_1180 Alo_1262))"
"((y_1266)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+ Alo_1262 1))))"
"(if(if #t"
"(<?_1162(car y_1266)(car x_1265))"
"(<?_1162 y_1266 x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 y_1266)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 x_1265)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" y_1266)))))"
"(if(unsafe-fx< n_1264 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262))"
"((letrec-values(((iloop_1267)"
"(lambda(i_1268)"
"(if(unsafe-fx< i_1268 n_1264)"
"(let-values()"
"(let-values(((ref-i_1269)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+"
" Alo_1262"
" i_1268))))"
"((letrec-values(((jloop_1270)"
"(lambda(j_1271)"
"(let-values(((ref-j-1_1272)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx-"
" j_1271"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1263"
" j_1271)"
"(if #t"
"(<?_1162"
"(car"
" ref-i_1269)"
"(car"
" ref-j-1_1272))"
"(<?_1162"
" ref-i_1269"
" ref-j-1_1272))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-j-1_1272)"
"(jloop_1270"
"(unsafe-fx-"
" j_1271"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-i_1269)"
"(iloop_1267"
"(unsafe-fx+"
" i_1268"
" 1))))))))"
" jloop_1270)"
"(unsafe-fx+ Blo_1263 i_1268))))"
"(void)))))"
" iloop_1267)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1273)(unsafe-fxrshift n_1264 1)))"
"(let-values(((n/2+_1274)(unsafe-fx- n_1264 n/2-_1273)))"
"(let-values(((Amid1_1275)(unsafe-fx+ Alo_1262 n/2-_1273))"
"((Amid2_1276)(unsafe-fx+ Alo_1262 n/2+_1274))"
"((Bmid1_1277)"
"(unsafe-fx+ Blo_1263 n/2-_1273)))"
"(begin"
"(copying-mergesort_1261"
" Amid1_1275"
" Bmid1_1277"
" n/2+_1274)"
"(copying-mergesort_1261 Alo_1262 Amid2_1276 n/2-_1273)"
"(let-values(((b2_1278)(unsafe-fx+ Blo_1263 n_1264)))"
"((letrec-values(((loop_1279)"
"(lambda(a1_1280 b1_1281 c1_1282)"
"(let-values(((x_1283)"
"(unsafe-vector-ref"
" vec_1180"
" a1_1280))"
"((y_1284)"
"(unsafe-vector-ref"
" vec_1180"
" b1_1281)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_1162"
"(car y_1284)"
"(car x_1283))"
"(<?_1162"
" y_1284"
" x_1283)))"
"(if #t"
"(<?_1162"
"(car x_1283)"
"(car y_1284))"
"(<?_1162"
" x_1283"
" y_1284)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" x_1283)"
"(let-values(((a1_1285)"
"(unsafe-fx+"
" a1_1280"
" 1))"
"((c1_1286)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<"
" c1_1286"
" b1_1281)"
"(let-values()"
"(loop_1279"
" a1_1285"
" b1_1281"
" c1_1286))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" y_1284)"
"(let-values(((b1_1287)"
"(unsafe-fx+"
" b1_1281"
" 1))"
"((c1_1288)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<="
" b2_1278"
" b1_1287)"
"((letrec-values(((loop_1289)"
"(lambda(a1_1290"
" c1_1291)"
"(if(unsafe-fx<"
" c1_1291"
" b1_1287)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1291"
"(unsafe-vector-ref"
" vec_1180"
" a1_1290))"
"(loop_1289"
"(unsafe-fx+"
" a1_1290"
" 1)"
"(unsafe-fx+"
" c1_1291"
" 1))))"
"(void)))))"
" loop_1289)"
" a1_1280"
" c1_1288)"
"(loop_1279"
" a1_1280"
" b1_1287"
" c1_1288)))))))))"
" loop_1279)"
" Amid2_1276"
" Bmid1_1277"
" Blo_1263)))))))))))))"
"(let-values(((Alo_1292) 0)"
"((Amid1_1293) n/2-_1185)"
"((Amid2_1294) n/2+_1186)"
"((Ahi_1295) n_1165)"
"((B1lo_1296) n_1165))"
"(begin"
"(copying-mergesort_1261 Amid1_1293 B1lo_1296 n/2+_1186)"
"(if(zero? n/2-_1185)"
"(void)"
"(let-values()(copying-mergesort_1261 Alo_1292 Amid2_1294 n/2-_1185)))"
"(let-values(((b2_1297) Ahi_1295))"
"((letrec-values(((loop_1298)"
"(lambda(a1_1299 b1_1300 c1_1301)"
"(let-values(((x_1302)(unsafe-vector-ref vec_1180 a1_1299))"
"((y_1303)(unsafe-vector-ref vec_1180 b1_1300)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_1162(car y_1303)(car x_1302))"
"(<?_1162 y_1303 x_1302)))"
"(if #t"
"(<?_1162(car x_1302)(car y_1303))"
"(<?_1162 x_1302 y_1303)))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 x_1302)"
"(let-values(((a1_1304)(unsafe-fx+ a1_1299 1))"
"((c1_1305)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx< c1_1305 b1_1300)"
"(let-values()(loop_1298 a1_1304 b1_1300 c1_1305))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 y_1303)"
"(let-values(((b1_1306)(unsafe-fx+ b1_1300 1))"
"((c1_1307)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx<= b2_1297 b1_1306)"
"((letrec-values(((loop_1308)"
"(lambda(a1_1309 c1_1310)"
"(if(unsafe-fx< c1_1310 b1_1306)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1310"
"(unsafe-vector-ref"
" vec_1180"
" a1_1309))"
"(loop_1308"
"(unsafe-fx+ a1_1309 1)"
"(unsafe-fx+ c1_1310 1))))"
"(void)))))"
" loop_1308)"
" a1_1299"
" c1_1307)"
"(loop_1298 a1_1299 b1_1306 c1_1307)))))))))"
" loop_1298)"
" B1lo_1296"
" Amid2_1294"
" Alo_1292))))))))"
"((letrec-values(((loop_1311)"
"(lambda(i_1312 r_1313)"
"(let-values(((i_1314)(sub1 i_1312)))"
"(if(< i_1314 0)"
" r_1313"
"(loop_1311 i_1314(cons(cdr(vector-ref vec_1180 i_1314)) r_1313)))))))"
" loop_1311)"
" n_1165"
" '()))))"
"(if(< n_1165 2)"
"(let-values() lst_1161)"
"(if((letrec-values(((loop_1315)"
"(lambda(last_1316 next_1317)"
"(let-values(((or-part_1318)(null? next_1317)))"
"(if or-part_1318"
" or-part_1318"
"(if(not"
"(if #t"
"(<?_1162(getkey_1163(car next_1317))(getkey_1163 last_1316))"
"(<?_1162(car next_1317) last_1316)))"
"(loop_1315(car next_1317)(cdr next_1317))"
" #f))))))"
" loop_1315)"
"(car lst_1161)"
"(cdr lst_1161))"
"(let-values() lst_1161)"
"(if(<= n_1165 3)"
"(let-values()"
"(if(= n_1165 2)"
"(list(cadr lst_1161)(car lst_1161))"
"(let-values(((a_1319)(car lst_1161))"
"((b_1320)(cadr lst_1161))"
"((c_1321)(caddr lst_1161)))"
"(let-values(((a_1322)(car lst_1161))"
"((b_1323)(cadr lst_1161))"
"((c_1324)(caddr lst_1161)))"
"(if(if #t(<?_1162(getkey_1163 b_1323)(getkey_1163 a_1322))(<?_1162 b_1323 a_1322))"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 b_1323))"
"(<?_1162 c_1324 b_1323))"
"(list c_1324 b_1323 a_1322)"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(<?_1162 c_1324 a_1322))"
"(list b_1323 c_1324 a_1322)"
"(list b_1323 a_1322 c_1324)))"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(<?_1162 c_1324 a_1322))"
"(list c_1324 a_1322 b_1323)"
"(list a_1322 c_1324 b_1323)))))))"
"(let-values()"
"(let-values(((vec_1325)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1326)"
"(lambda(i_1327 lst_1328)"
"(if(pair? lst_1328)"
"(let-values()"
"(begin"
"(vector-set! vec_1325 i_1327(car lst_1328))"
"(loop_1326(add1 i_1327)(cdr lst_1328))))"
"(void)))))"
" loop_1326)"
" 0"
" lst_1161)"
"(if getkey_1163"
"(let-values()"
"(let-values(((n/2-_1329)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1330)(unsafe-fx- n_1165 n/2-_1329)))"
"(letrec-values(((copying-mergesort_1405)"
"(lambda(Alo_1406 Blo_1407 n_1408)"
"(if(unsafe-fx= n_1408 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406)))"
"(if(unsafe-fx= n_1408 2)"
"(let-values()"
"(let-values(((x_1409)"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((y_1410)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1406 1))))"
"(if(if #t"
"(<?_1162"
"(getkey_1163 y_1410)"
"(getkey_1163 x_1409))"
"(<?_1162 y_1410 x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 y_1410)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 x_1409)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" y_1410)))))"
"(if(unsafe-fx< n_1408 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((letrec-values(((iloop_1411)"
"(lambda(i_1412)"
"(if(unsafe-fx< i_1412 n_1408)"
"(let-values()"
"(let-values(((ref-i_1413)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1406"
" i_1412))))"
"((letrec-values(((jloop_1414)"
"(lambda(j_1415)"
"(let-values(((ref-j-1_1416)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1415"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1407"
" j_1415)"
"(if #t"
"(<?_1162"
"(getkey_1163"
" ref-i_1413)"
"(getkey_1163"
" ref-j-1_1416))"
"(<?_1162"
" ref-i_1413"
" ref-j-1_1416))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-j-1_1416)"
"(jloop_1414"
"(unsafe-fx-"
" j_1415"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-i_1413)"
"(iloop_1411"
"(unsafe-fx+"
" i_1412"
" 1))))))))"
" jloop_1414)"
"(unsafe-fx+"
" Blo_1407"
" i_1412))))"
"(void)))))"
" iloop_1411)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1417)(unsafe-fxrshift n_1408 1)))"
"(let-values(((n/2+_1418)"
"(unsafe-fx- n_1408 n/2-_1417)))"
"(let-values(((Amid1_1419)"
"(unsafe-fx+ Alo_1406 n/2-_1417))"
"((Amid2_1420)"
"(unsafe-fx+ Alo_1406 n/2+_1418))"
"((Bmid1_1421)"
"(unsafe-fx+ Blo_1407 n/2-_1417)))"
"(begin"
"(copying-mergesort_1405"
" Amid1_1419"
" Bmid1_1421"
" n/2+_1418)"
"(copying-mergesort_1405"
" Alo_1406"
" Amid2_1420"
" n/2-_1417)"
"(let-values(((b2_1422)"
"(unsafe-fx+ Blo_1407 n_1408)))"
"((letrec-values(((loop_1423)"
"(lambda(a1_1424"
" b1_1425"
" c1_1426)"
"(let-values(((x_1427)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1424))"
"((y_1428)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1425)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_1162"
"(getkey_1163"
" y_1428)"
"(getkey_1163"
" x_1427))"
"(<?_1162"
" y_1428"
" x_1427)))"
"(if #t"
"(<?_1162"
"(getkey_1163"
" x_1427)"
"(getkey_1163"
" y_1428))"
"(<?_1162"
" x_1427"
" y_1428)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" x_1427)"
"(let-values(((a1_1429)"
"(unsafe-fx+"
" a1_1424"
" 1))"
"((c1_1430)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<"
" c1_1430"
" b1_1425)"
"(let-values()"
"(loop_1423"
" a1_1429"
" b1_1425"
" c1_1430))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" y_1428)"
"(let-values(((b1_1431)"
"(unsafe-fx+"
" b1_1425"
" 1))"
"((c1_1432)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<="
" b2_1422"
" b1_1431)"
"((letrec-values(((loop_1433)"
"(lambda(a1_1434"
" c1_1435)"
"(if(unsafe-fx<"
" c1_1435"
" b1_1431)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1435"
"(unsafe-vector-ref"
" vec_1325"
" a1_1434))"
"(loop_1433"
"(unsafe-fx+"
" a1_1434"
" 1)"
"(unsafe-fx+"
" c1_1435"
" 1))))"
"(void)))))"
" loop_1433)"
" a1_1424"
" c1_1432)"
"(loop_1423"
" a1_1424"
" b1_1431"
" c1_1432)))))))))"
" loop_1423)"
" Amid2_1420"
" Bmid1_1421"
" Blo_1407)))))))))))))"
"(let-values(((Alo_1436) 0)"
"((Amid1_1437) n/2-_1329)"
"((Amid2_1438) n/2+_1330)"
"((Ahi_1439) n_1165)"
"((B1lo_1440) n_1165))"
"(begin"
"(copying-mergesort_1405 Amid1_1437 B1lo_1440 n/2+_1330)"
"(if(zero? n/2-_1329)"
"(void)"
"(let-values()(copying-mergesort_1405 Alo_1436 Amid2_1438 n/2-_1329)))"
"(let-values(((b2_1441) Ahi_1439))"
"((letrec-values(((loop_1442)"
"(lambda(a1_1443 b1_1444 c1_1445)"
"(let-values(((x_1446)"
"(unsafe-vector-ref vec_1325 a1_1443))"
"((y_1447)"
"(unsafe-vector-ref vec_1325 b1_1444)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_1162"
"(getkey_1163 y_1447)"
"(getkey_1163 x_1446))"
"(<?_1162 y_1447 x_1446)))"
"(if #t"
"(<?_1162"
"(getkey_1163 x_1446)"
"(getkey_1163 y_1447))"
"(<?_1162 x_1446 y_1447)))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 x_1446)"
"(let-values(((a1_1448)(unsafe-fx+ a1_1443 1))"
"((c1_1449)(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx< c1_1449 b1_1444)"
"(let-values()"
"(loop_1442 a1_1448 b1_1444 c1_1449))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 y_1447)"
"(let-values(((b1_1450)(unsafe-fx+ b1_1444 1))"
"((c1_1451)(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx<= b2_1441 b1_1450)"
"((letrec-values(((loop_1452)"
"(lambda(a1_1453 c1_1454)"
"(if(unsafe-fx<"
" c1_1454"
" b1_1450)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1454"
"(unsafe-vector-ref"
" vec_1325"
" a1_1453))"
"(loop_1452"
"(unsafe-fx+"
" a1_1453"
" 1)"
"(unsafe-fx+"
" c1_1454"
" 1))))"
"(void)))))"
" loop_1452)"
" a1_1443"
" c1_1451)"
"(loop_1442 a1_1443 b1_1450 c1_1451)))))))))"
" loop_1442)"
" B1lo_1440"
" Amid2_1438"
" Alo_1436))))))))"
"(let-values(((si_1455)(hash-ref sort-internals_29 <?_1162 #f)))"
"(if si_1455"
"(si_1455 vec_1325 n_1165)"
"(let-values()"
"(let-values(((n/2-_1456)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1457)(unsafe-fx- n_1165 n/2-_1456)))"
"(letrec-values(((copying-mergesort_1532)"
"(lambda(Alo_1533 Blo_1534 n_1535)"
"(if(unsafe-fx= n_1535 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533)))"
"(if(unsafe-fx= n_1535 2)"
"(let-values()"
"(let-values(((x_1536)"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((y_1537)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1533 1))))"
"(if(if #f"
"(<?_1162(#f y_1537)(#f x_1536))"
"(<?_1162 y_1537 x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 y_1537)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 x_1536)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" y_1537)))))"
"(if(unsafe-fx< n_1535 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((letrec-values(((iloop_1538)"
"(lambda(i_1539)"
"(if(unsafe-fx<"
" i_1539"
" n_1535)"
"(let-values()"
"(let-values(((ref-i_1540)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1533"
" i_1539))))"
"((letrec-values(((jloop_1541)"
"(lambda(j_1542)"
"(let-values(((ref-j-1_1543)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1542"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1534"
" j_1542)"
"(if #f"
"(<?_1162"
"(#f"
" ref-i_1540)"
"(#f"
" ref-j-1_1543))"
"(<?_1162"
" ref-i_1540"
" ref-j-1_1543))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-j-1_1543)"
"(jloop_1541"
"(unsafe-fx-"
" j_1542"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-i_1540)"
"(iloop_1538"
"(unsafe-fx+"
" i_1539"
" 1))))))))"
" jloop_1541)"
"(unsafe-fx+"
" Blo_1534"
" i_1539))))"
"(void)))))"
" iloop_1538)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1544)"
"(unsafe-fxrshift n_1535 1)))"
"(let-values(((n/2+_1545)"
"(unsafe-fx- n_1535 n/2-_1544)))"
"(let-values(((Amid1_1546)"
"(unsafe-fx+ Alo_1533 n/2-_1544))"
"((Amid2_1547)"
"(unsafe-fx+ Alo_1533 n/2+_1545))"
"((Bmid1_1548)"
"(unsafe-fx+ Blo_1534 n/2-_1544)))"
"(begin"
"(copying-mergesort_1532"
" Amid1_1546"
" Bmid1_1548"
" n/2+_1545)"
"(copying-mergesort_1532"
" Alo_1533"
" Amid2_1547"
" n/2-_1544)"
"(let-values(((b2_1549)"
"(unsafe-fx+"
" Blo_1534"
" n_1535)))"
"((letrec-values(((loop_1550)"
"(lambda(a1_1551"
" b1_1552"
" c1_1553)"
"(let-values(((x_1554)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1551))"
"((y_1555)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1552)))"
"(if(if #t"
"(not"
"(if #f"
"(<?_1162"
"(#f"
" y_1555)"
"(#f"
" x_1554))"
"(<?_1162"
" y_1555"
" x_1554)))"
"(if #f"
"(<?_1162"
"(#f"
" x_1554)"
"(#f"
" y_1555))"
"(<?_1162"
" x_1554"
" y_1555)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" x_1554)"
"(let-values(((a1_1556)"
"(unsafe-fx+"
" a1_1551"
" 1))"
"((c1_1557)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<"
" c1_1557"
" b1_1552)"
"(let-values()"
"(loop_1550"
" a1_1556"
" b1_1552"
" c1_1557))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" y_1555)"
"(let-values(((b1_1558)"
"(unsafe-fx+"
" b1_1552"
" 1))"
"((c1_1559)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<="
" b2_1549"
" b1_1558)"
"((letrec-values(((loop_1560)"
"(lambda(a1_1561"
" c1_1562)"
"(if(unsafe-fx<"
" c1_1562"
" b1_1558)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1562"
"(unsafe-vector-ref"
" vec_1325"
" a1_1561))"
"(loop_1560"
"(unsafe-fx+"
" a1_1561"
" 1)"
"(unsafe-fx+"
" c1_1562"
" 1))))"
"(void)))))"
" loop_1560)"
" a1_1551"
" c1_1559)"
"(loop_1550"
" a1_1551"
" b1_1558"
" c1_1559)))))))))"
" loop_1550)"
" Amid2_1547"
" Bmid1_1548"
" Blo_1534)))))))))))))"
"(let-values(((Alo_1563) 0)"
"((Amid1_1564) n/2-_1456)"
"((Amid2_1565) n/2+_1457)"
"((Ahi_1566) n_1165)"
"((B1lo_1567) n_1165))"
"(begin"
"(copying-mergesort_1532 Amid1_1564 B1lo_1567 n/2+_1457)"
"(if(zero? n/2-_1456)"
"(void)"
"(let-values()"
"(copying-mergesort_1532 Alo_1563 Amid2_1565 n/2-_1456)))"
"(let-values(((b2_1568) Ahi_1566))"
"((letrec-values(((loop_1569)"
"(lambda(a1_1570 b1_1571 c1_1572)"
"(let-values(((x_1573)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1570))"
"((y_1574)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1571)))"
"(if(if #f"
"(not"
"(if #f"
"(<?_1162(#f y_1574)(#f x_1573))"
"(<?_1162 y_1574 x_1573)))"
"(if #f"
"(<?_1162(#f x_1573)(#f y_1574))"
"(<?_1162 x_1573 y_1574)))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1572 x_1573)"
"(let-values(((a1_1575)"
"(unsafe-fx+ a1_1570 1))"
"((c1_1576)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx< c1_1576 b1_1571)"
"(let-values()"
"(loop_1569 a1_1575 b1_1571 c1_1576))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1572 y_1574)"
"(let-values(((b1_1577)"
"(unsafe-fx+ b1_1571 1))"
"((c1_1578)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx<= b2_1568 b1_1577)"
"((letrec-values(((loop_1579)"
"(lambda(a1_1580"
" c1_1581)"
"(if(unsafe-fx<"
" c1_1581"
" b1_1577)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1581"
"(unsafe-vector-ref"
" vec_1325"
" a1_1580))"
"(loop_1579"
"(unsafe-fx+"
" a1_1580"
" 1)"
"(unsafe-fx+"
" c1_1581"
" 1))))"
"(void)))))"
" loop_1579)"
" a1_1570"
" c1_1578)"
"(loop_1569"
" a1_1570"
" b1_1577"
" c1_1578)))))))))"
" loop_1569)"
" B1lo_1567"
" Amid2_1565"
" Alo_1563)))))))))))"
"((letrec-values(((loop_1582)"
"(lambda(i_1583 r_1584)"
"(let-values(((i_1585)(sub1 i_1583)))"
"(if(< i_1585 0)"
" r_1584"
"(loop_1582 i_1585(cons(vector-ref vec_1325 i_1585) r_1584)))))))"
" loop_1582)"
" n_1165"
" '()))))))))))"
"(sort lst_1161 <?_1162))))))))"
"(define-values"
"(new:collection-path)"
"(let-values(((collection-path_54)"
"(let-values(((core4_55)"
"(lambda(fail1_56 fail2_57 collection3_58 new-rest_59)"
"(let-values(((collection_60) collection3_58))"
"(let-values(((fail_61)"
"(if fail2_57"
" fail1_56"
"(lambda(s_62)"
"(raise"
"(exn:fail:filesystem"
"                                                      (string-append \"collection-path: \" s_62)"
"(current-continuation-marks)))))))"
"(let-values(((collections_63) new-rest_59))"
"(collection-path fail_61 collection_60 collections_63)))))))"
"(let-values(((unpack5_64)"
"(lambda(given-kws_65 given-args_66 collection3_67 new-rest_68)"
"(let-values(((fail2_69)(pair? given-kws_65)))"
"(let-values(((fail1_70)(if fail2_69(car given-args_66)(void))))"
"(core4_55 fail1_70 fail2_69 collection3_67 new-rest_68))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_71 given-argc_72)"
"(if(>= given-argc_72 3)"
"(let-values(((l1_73) given-kws_71))"
"(let-values(((l1_74)"
"(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:fail)(cdr l1_73) l1_73))))"
"(null? l1_74)))"
" #f))"
"(case-lambda"
"((given-kws_75 given-args_76 collection_77 . collections_78)"
"(unpack5_64 given-kws_75 given-args_76 collection_77 collections_78)))"
" null"
" '(#:fail)"
"(let-values(((collection-path_79)"
"(case-lambda"
"((collection_80 . collections_81)"
"(unpack5_64 null null collection_80 collections_81)))))"
" collection-path_79))))))"
" collection-path_54))"
"(define-values"
"(new:collection-file-path)"
"(let-values(((collection-file-path_82)"
"(let-values(((core12_83)"
"(lambda(check-compiled?6_84"
" check-compiled?8_85"
" fail7_86"
" fail9_87"
" file-name10_88"
" collection11_89"
" new-rest_90)"
"(let-values(((file-name_91) file-name10_88))"
"(let-values(((collection_92) collection11_89))"
"(let-values(((check-compiled?_93)"
"(if check-compiled?8_85"
" check-compiled?6_84"
"(if(path-string? file-name_91)"
"                                                      (regexp-match? '#rx\".[.]rkt$\" file-name_91)"
" #f))))"
"(let-values(((fail_94)"
"(if fail9_87"
" fail7_86"
"(lambda(s_95)"
"(raise"
"(exn:fail:filesystem"
"                                                          (string-append \"collection-file-path: \" s_95)"
"(current-continuation-marks)))))))"
"(let-values(((collections_96) new-rest_90))"
"(collection-file-path"
" fail_94"
" check-compiled?_93"
" file-name_91"
" collection_92"
" collections_96)))))))))"
"(let-values(((unpack13_97)"
"(lambda(given-kws_98 given-args_99 file-name10_100 collection11_101 new-rest_102)"
"(let-values(((check-compiled?8_103)"
"(if(pair? given-kws_98)"
"(eq? '#:check-compiled?(car given-kws_98))"
" #f)))"
"(let-values(((check-compiled?6_104)"
"(if check-compiled?8_103(car given-args_99)(void)))"
"((given-kws_105)"
"(if check-compiled?8_103(cdr given-kws_98) given-kws_98))"
"((given-args_106)"
"(if check-compiled?8_103(cdr given-args_99) given-args_99)))"
"(let-values(((fail9_107)(pair? given-kws_105)))"
"(let-values(((fail7_108)(if fail9_107(car given-args_106)(void))))"
"(core12_83"
" check-compiled?6_104"
" check-compiled?8_103"
" fail7_108"
" fail9_107"
" file-name10_100"
" collection11_101"
" new-rest_102))))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_109 given-argc_110)"
"(if(>= given-argc_110 4)"
"(let-values(((l1_111) given-kws_109))"
"(let-values(((l1_112)"
"(if(null? l1_111)"
" l1_111"
"(if(eq?(car l1_111) '#:check-compiled?)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)"
"(if(null? l1_113)"
" l1_113"
"(if(eq?(car l1_113) '#:fail)(cdr l1_113) l1_113))))"
"(null? l1_114)))))"
" #f))"
"(case-lambda"
"((given-kws_115 given-args_116 file-name_117 collection_118 . collections_119)"
"(unpack13_97 given-kws_115 given-args_116 file-name_117 collection_118 collections_119)))"
" null"
" '(#:check-compiled? #:fail)"
"(let-values(((collection-file-path_120)"
"(case-lambda"
"((file-name_121 collection_122 . collections_123)"
"(unpack13_97 null null file-name_121 collection_122 collections_123)))))"
" collection-file-path_120))))))"
" collection-file-path_82))"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(define-values"
"(hash-values)"
"(lambda(table_4)"
"(begin"
"      (if (hash? table_4) (void) (let-values () (raise-argument-error 'hash-values \"hash?\" table_4)))"
"(hash-map table_4(lambda(k_5 v_6) v_6)))))"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values(((lst_7) lst5_5))"
"(let-values(((less?_8) less?6_6))"
"(let-values(((getkey_9)(if key3_4 key1_3 #f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
"(define-values"
"(unpack8.1$1)"
"(lambda(given-kws_11 given-args_12 lst5_13 less?6_14)"
"(let-values(((cache-keys?4_15)(if(pair? given-kws_11)(eq? '#:cache-keys?(car given-kws_11)) #f)))"
"(let-values(((cache-keys?2_16)(if cache-keys?4_15(car given-args_12)(void)))"
"((given-kws_17)(if cache-keys?4_15(cdr given-kws_11) given-kws_11))"
"((given-args_18)(if cache-keys?4_15(cdr given-args_12) given-args_12)))"
"(let-values(((key3_19)(pair? given-kws_17)))"
"(let-values(((key1_20)(if key3_19(car given-args_18)(void))))"
"(sort7.1 cache-keys?2_16 cache-keys?4_15 key1_20 key3_19 lst5_13 less?6_14)))))))"
"(define-values"
"(sort9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_21 given-argc_22)"
"(if(= given-argc_22 4)"
"(let-values(((l1_23) given-kws_21))"
"(let-values(((l1_24)(if(null? l1_23) l1_23(if(eq?(car l1_23) '#:cache-keys?)(cdr l1_23) l1_23))))"
"(let-values(((l1_25) l1_24))"
"(let-values(((l1_26)(if(null? l1_25) l1_25(if(eq?(car l1_25) '#:key)(cdr l1_25) l1_25))))"
"(null? l1_26)))))"
" #f))"
"(case-lambda((given-kws_27 given-args_28 lst_29 less?_30)(unpack8.1$1 given-kws_27 given-args_28 lst_29 less?_30)))"
" null"
" '(#:cache-keys? #:key)"
"(let-values(((sort_31)(case-lambda((lst_32 less?_33)(unpack8.1$1 null null lst_32 less?_33))))) sort_31)))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 \"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
"  (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 \"non-pair found in list: \" a_79 \" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 2) #f)"
"(void)"
"                        (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) #f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" #f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100))))"
"(define-values"
"(make-regexp-tweaker)"
"(lambda(tweaker_61)"
"(let-values(((t_62)(make-hash)))"
"(lambda(rx_63 n_64)"
"(let-values(((run-tweak_110)"
"(lambda()"
"(if(pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_111)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_112)(regexp? tweaked_111)))"
"(if or-part_112 or-part_112(byte-regexp? tweaked_111)))"
" tweaked_111"
"(pregexp(if(bytes? tweaked_111)(bytes->string/utf-8 tweaked_111) tweaked_111)))))"
"(if(regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_113)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_114)(regexp? tweaked_113)))"
"(if or-part_114 or-part_114(byte-regexp? tweaked_113)))"
" tweaked_113"
"(regexp(if(bytes? tweaked_113)(bytes->string/utf-8 tweaked_113) tweaked_113)))))"
"(if(byte-pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_115)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_116)(regexp? tweaked_115)))"
"(if or-part_116 or-part_116(byte-regexp? tweaked_115)))"
" tweaked_115"
"(byte-pregexp"
"(if(bytes? tweaked_115) tweaked_115(string->bytes/utf-8 tweaked_115))))))"
"(if(byte-regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_117)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_118)(regexp? tweaked_117)))"
"(if or-part_118 or-part_118(byte-regexp? tweaked_117)))"
" tweaked_117"
"(byte-regexp"
"(if(bytes? tweaked_117) tweaked_117(string->bytes/utf-8 tweaked_117))))))"
"(if(string? rx_63)"
"(let-values()"
"(let-values(((tweaked_119)(tweaker_61((lambda(x_120) x_120) rx_63) n_64)))"
"(if(let-values(((or-part_121)(regexp? tweaked_119)))"
"(if or-part_121 or-part_121(byte-regexp? tweaked_119)))"
" tweaked_119"
"(regexp"
"(if(bytes? tweaked_119)(bytes->string/utf-8 tweaked_119) tweaked_119)))))"
"(if(bytes? rx_63)"
"(let-values()"
"(let-values(((tweaked_122)(tweaker_61((lambda(x_123) x_123) rx_63) n_64)))"
"(if(let-values(((or-part_124)(regexp? tweaked_122)))"
"(if or-part_124 or-part_124(byte-regexp? tweaked_122)))"
" tweaked_122"
"(byte-regexp"
"(if(bytes? tweaked_122) tweaked_122(string->bytes/utf-8 tweaked_122))))))"
"(let-values()"
"(raise-argument-error"
" 'regexp-tweaker"
"                                       \"(or/c regexp? byte-regexp? string? bytes?)\""
" rx_63)))))))))))"
"(let-values(((key_125)(cons n_64 rx_63)))"
"(let-values(((or-part_126)(hash-ref t_62 key_125 #f)))"
"(if or-part_126"
" or-part_126"
"(let-values(((rx*_127)(run-tweak_110)))(begin(hash-set! t_62 key_125 rx*_127) rx*_127))))))))))"
"(define-values(bstring-length)(lambda(s_171)(if(bytes? s_171)(bytes-length s_171)(string-length s_171))))"
"(define-values"
"(no-empty-edge-matches)"
"(make-regexp-tweaker"
"(lambda(rx_172 n_173)"
"(if(bytes? rx_172)"
"       (bytes-append #\"(?:\" rx_172 #\")(?<=\" (make-bytes n_173 (char->integer '#\\.)) #\")\")"
"       (format \"(?:~a)(?<=~a)\" rx_172 (make-bytes n_173 (char->integer '#\\.)))))))"
"(define-values"
"(regexp-match-positions*33.1)"
"(lambda(match-select23_174"
" match-select24_175"
" pattern31_176"
" string32_177"
" start25_178"
" end26_179"
" ipre27_180"
" start28_181"
" end29_182"
" ipre30_183)"
"(let-values(((pattern_184) pattern31_176))"
"(let-values(((string_185) string32_177))"
"(let-values(((start_186)(if start28_181 start25_178 0)))"
"(let-values(((end_187)(if end29_182 end26_179 #f)))"
"            (let-values (((ipre_188) (if ipre30_183 ipre27_180 #\"\")))"
"(let-values(((match-select_189)(if match-select24_175 match-select23_174 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_189)"
"(void)"
"                      (let-values () (raise-argument-error 'regexp-match-positions* \"procedure?\" match-select_189)))"
"(if(eq? match-select_189 car)"
"(let-values(((string_190)"
"(if(path? string_185)"
"(if(let-values(((or-part_191)(string? pattern_184)))"
"(if or-part_191 or-part_191(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_192)"
"(if(string? string_190)"
"(let-values()(string-length string_190))"
"(if(bytes? string_190)"
"(let-values()(bytes-length string_190))"
"(let-values() #f)))))"
"(let-values(((orig-rx_193)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_194)(regexp-max-lookbehind orig-rx_193)))"
"(begin"
"(if #f"
"(if(input-port? string_190)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-positions* \"input-port?\" string_190)))"
"(if(let-values(((or-part_195) len_192))"
"(if or-part_195 or-part_195(input-port? string_190)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_190))))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_196)(not end_187)))"
"(if or-part_196"
" or-part_196"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_197)(input-port? string_190)))"
"(if or-part_197 or-part_197(if len_192(<= start_186 len_192) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_192)"
" start_186)))"
"(if(let-values(((or-part_198)(not end_187)))"
"(if or-part_198"
" or-part_198"
"(if(<= start_186 end_187)"
"(let-values(((or-part_199)(input-port? string_190)))"
"(if or-part_199 or-part_199(if len_192(<= end_187 len_192) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_192)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_200)"
"(lambda(acc_201 start_202 end_203 ipre_204 0-ok?_205)"
"(let-values(((rx_206)"
"(if 0-ok?_205"
" orig-rx_193"
"(no-empty-edge-matches"
" orig-rx_193"
"(add1(bytes-length ipre_204))))))"
"(if(if #f(input-port? string_190) #f)"
"(let-values(((__207)"
"(if(positive? start_202)"
"(let-values()"
"(let-values(((s_208)(make-bytes 4096)))"
"((letrec-values(((loop_209)"
"(lambda(n_210)"
"(if(= n_210 start_202)"
"(void)"
"(let-values()"
"(let-values(((m_211)"
"(read-bytes-avail!"
" s_208"
" string_190"
" 0"
"(min"
"(-"
" start_202"
" n_210)"
" 4096))))"
"(if(eof-object?"
" m_211)"
"(void)"
"(let-values()"
"(loop_209"
"(+"
" n_210"
" m_211))))))))))"
" loop_209)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_212)(if #f #f 0)))"
"(let-values(((spitout_213)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_214"
" start_215"
" end_216"
" flush?_217"
" breakable?_218)"
"(let-values(((c_219)"
"(- end_216 start_215)))"
"(begin"
"(set! discarded/leftovers_212"
"(+ c_219 discarded/leftovers_212))"
" c_219)))"
" void))))"
"(let-values(((end_220)"
"(if end_203(- end_203 start_202) #f)))"
"(let-values(((ms_221 ipre_222)"
"(regexp-match/end"
" rx_206"
" string_190"
" 0"
" end_220"
" spitout_213"
" ipre_204"
" max-lookbehind_194)))"
"(let-values(((m_223)(if ms_221(car ms_221) #f)))"
"(let-values(((discarded/leftovers_224)"
"(if #f"
"(get-output-bytes spitout_213)"
" discarded/leftovers_212)))"
"(let-values(((skipped_225)"
"(if #f"
"(bstring-length"
" discarded/leftovers_224)"
" discarded/leftovers_224)))"
"(let-values(((got_226)"
"(if m_223"
"(bstring-length m_223)"
" #f)))"
"(let-values(((end_227)"
"(if end_220"
"(if m_223"
"(-"
" end_220"
" skipped_225"
" got_226)"
" #f)"
" #f)))"
"(if m_223"
"(let-values(((0-ok?_228)"
"(not(zero? got_226))))"
"(loop_200"
"(#f"
" discarded/leftovers_224"
" ms_221"
" acc_201)"
" 0"
" end_227"
" ipre_222"
" 0-ok?_228))"
"(#f"
" acc_201"
" discarded/leftovers_224))))))))))))"
"(let-values(((m_229 ipre_230)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" #f"
" ipre_204"
" max-lookbehind_194)"
"(regexp-match-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" #f"
" ipre_204"
" max-lookbehind_194))))"
"(if(not m_229)"
"((lambda(acc_231 start_232 end_233) acc_231)"
" acc_201"
" start_202"
" end_203)"
"(let-values(((mstart_234)(caar m_229)))"
"(let-values(((mend_235)(cdar m_229)))"
"(let-values(((0-ok?_236)"
"(not(= mstart_234 mend_235))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mstart)(#%app caar ms))"
"((mend)(#%app cdar ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app + mend(#%app cdr p))))"
"(#%app"
" loop"
" '()"
" '0"
"(if end(#%app - end mend) '#f)))"
"(#%app cons(#%app car ms) acc))))"
"(input-port? string_190)"
" #f)"
"((lambda(loop_245"
" acc_246"
" start_247"
" end_248"
" ms_249)"
"(let-values(((mstart_250)(caar ms_249))"
"((mend_251)(cdar ms_249)))"
"(append"
"(map2"
"(lambda(p_252)"
"(cons"
"(+ mend_251(car p_252))"
"(+ mend_251(cdr p_252))))"
"(loop_245"
" '()"
" 0"
"(if end_248(- end_248 mend_251) #f)))"
"(cons(car ms_249) acc_246))))"
"(lambda(acc_253 new-start_254 new-end_255)"
"(loop_200"
" acc_253"
" new-start_254"
" new-end_255"
" ipre_230"
" 0-ok?_236))"
" acc_201"
" start_202"
" end_203"
" m_229)"
"(loop_200"
"((lambda(start_256 ms_257 acc_258)"
"(cons(car ms_257) acc_258))"
" start_202"
" m_229"
" acc_201)"
" mend_235"
" end_203"
" ipre_230"
" 0-ok?_236))))))))))))"
" loop_200)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t)))))))"
"(let-values(((string_259)"
"(if(path? string_185)"
"(if(let-values(((or-part_260)(string? pattern_184)))"
"(if or-part_260 or-part_260(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_261)"
"(if(string? string_259)"
"(let-values()(string-length string_259))"
"(if(bytes? string_259)"
"(let-values()(bytes-length string_259))"
"(let-values() #f)))))"
"(let-values(((orig-rx_262)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_263)(regexp-max-lookbehind orig-rx_262)))"
"(begin"
"(if #f"
"(if(input-port? string_259)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-positions* \"input-port?\" string_259)))"
"(if(let-values(((or-part_264) len_261))"
"(if or-part_264 or-part_264(input-port? string_259)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_259))))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_265)(not end_187)))"
"(if or-part_265"
" or-part_265"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_266)(input-port? string_259)))"
"(if or-part_266 or-part_266(if len_261(<= start_186 len_261) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_261)"
" start_186)))"
"(if(let-values(((or-part_267)(not end_187)))"
"(if or-part_267"
" or-part_267"
"(if(<= start_186 end_187)"
"(let-values(((or-part_268)(input-port? string_259)))"
"(if or-part_268 or-part_268(if len_261(<= end_187 len_261) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_261)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_269)"
"(lambda(acc_270 start_271 end_272 ipre_273 0-ok?_274)"
"(let-values(((rx_275)"
"(if 0-ok?_274"
" orig-rx_262"
"(no-empty-edge-matches"
" orig-rx_262"
"(add1(bytes-length ipre_273))))))"
"(if(if #f(input-port? string_259) #f)"
"(let-values(((__276)"
"(if(positive? start_271)"
"(let-values()"
"(let-values(((s_277)(make-bytes 4096)))"
"((letrec-values(((loop_278)"
"(lambda(n_279)"
"(if(= n_279 start_271)"
"(void)"
"(let-values()"
"(let-values(((m_280)"
"(read-bytes-avail!"
" s_277"
" string_259"
" 0"
"(min"
"(-"
" start_271"
" n_279)"
" 4096))))"
"(if(eof-object?"
" m_280)"
"(void)"
"(let-values()"
"(loop_278"
"(+"
" n_279"
" m_280))))))))))"
" loop_278)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_281)(if #f #f 0)))"
"(let-values(((spitout_282)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_283"
" start_284"
" end_285"
" flush?_286"
" breakable?_287)"
"(let-values(((c_288)"
"(- end_285 start_284)))"
"(begin"
"(set! discarded/leftovers_281"
"(+ c_288 discarded/leftovers_281))"
" c_288)))"
" void))))"
"(let-values(((end_289)"
"(if end_272(- end_272 start_271) #f)))"
"(let-values(((ms_290 ipre_291)"
"(regexp-match/end"
" rx_275"
" string_259"
" 0"
" end_289"
" spitout_282"
" ipre_273"
" max-lookbehind_263)))"
"(let-values(((m_292)(if ms_290(car ms_290) #f)))"
"(let-values(((discarded/leftovers_293)"
"(if #f"
"(get-output-bytes spitout_282)"
" discarded/leftovers_281)))"
"(let-values(((skipped_294)"
"(if #f"
"(bstring-length"
" discarded/leftovers_293)"
" discarded/leftovers_293)))"
"(let-values(((got_295)"
"(if m_292"
"(bstring-length m_292)"
" #f)))"
"(let-values(((end_296)"
"(if end_289"
"(if m_292"
"(-"
" end_289"
" skipped_294"
" got_295)"
" #f)"
" #f)))"
"(if m_292"
"(let-values(((0-ok?_297)"
"(not(zero? got_295))))"
"(loop_269"
"(#f"
" discarded/leftovers_293"
" ms_290"
" acc_270)"
" 0"
" end_296"
" ipre_291"
" 0-ok?_297))"
"(#f"
" acc_270"
" discarded/leftovers_293))))))))))))"
"(let-values(((m_298 ipre_299)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" #f"
" ipre_273"
" max-lookbehind_263)"
"(regexp-match-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" #f"
" ipre_273"
" max-lookbehind_263))))"
"(if(not m_298)"
"((lambda(acc_300 start_301 end_302) acc_300)"
" acc_270"
" start_271"
" end_272)"
"(let-values(((mstart_303)(caar m_298)))"
"(let-values(((mend_304)(cdar m_298)))"
"(let-values(((0-ok?_305)"
"(not(= mstart_303 mend_304))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mend)(#%app cdar ms)))"
"(let-values(((rest)"
"(#%app"
" loop"
" '()"
" '0"
"(if end"
"(#%app - end mend)"
" '#f))))"
"(let-values(((s)"
"(#%app"
" match-select"
" ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(if(let-values(((or-part)"
"(if(#%app"
" pair?"
" s)"
"(#%app"
" exact-integer?"
"(#%app"
" car"
" s))"
" '#f)))"
"(if or-part"
" or-part"
"(#%app not s)))"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p))))"
"(lambda(ps)"
"(#%app"
" map"
"(lambda(p)"
"(if p"
"(#%app"
" cons"
"(#%app"
" +"
" mend"
"(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p)))"
" '#f))"
" ps)))"
" rest)"
"(#%app cons s acc))))))"
"(input-port? string_259)"
" #f)"
"((lambda(loop_318"
" acc_319"
" start_320"
" end_321"
" ms_322)"
"(let-values(((mend_323)(cdar ms_322)))"
"(let-values(((rest_324)"
"(loop_318"
" '()"
" 0"
"(if end_321"
"(- end_321 mend_323)"
" #f))))"
"(let-values(((s_325)"
"(match-select_189 ms_322)))"
"(append"
"(map2"
"(if(let-values(((or-part_326)"
"(if(pair? s_325)"
"(exact-integer?"
"(car s_325))"
" #f)))"
"(if or-part_326"
" or-part_326"
"(not s_325)))"
"(lambda(p_327)"
"(cons"
"(+ mend_323(car p_327))"
"(+ mend_323(cdr p_327))))"
"(lambda(ps_328)"
"(map2"
"(lambda(p_329)"
"(if p_329"
"(cons"
"(+ mend_323(car p_329))"
"(+ mend_323(cdr p_329)))"
" #f))"
" ps_328)))"
" rest_324)"
"(cons s_325 acc_319))))))"
"(lambda(acc_330 new-start_331 new-end_332)"
"(loop_269"
" acc_330"
" new-start_331"
" new-end_332"
" ipre_299"
" 0-ok?_305))"
" acc_270"
" start_271"
" end_272"
" m_298)"
"(loop_269"
"((lambda(start_333 ms_334 acc_335)"
"(cons(match-select_189 ms_334) acc_335))"
" start_271"
" m_298"
" acc_270)"
" mend_304"
" end_272"
" ipre_299"
" 0-ok?_305))))))))))))"
" loop_269)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t))))))))))))))))))"
"(define-values"
"(unpack34.1$3)"
"(lambda(given-kws_336"
" given-args_337"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)"
"(let-values(((match-select24_346)(pair? given-kws_336)))"
"(let-values(((match-select23_347)(if match-select24_346(car given-args_337)(void))))"
"(regexp-match-positions*33.1"
" match-select23_347"
" match-select24_346"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)))))"
"(define-values"
"(regexp-match-peek-positions*46.1)"
"(lambda(match-select36_389"
" match-select37_390"
" pattern44_391"
" string45_392"
" start38_393"
" end39_394"
" ipre40_395"
" start41_396"
" end42_397"
" ipre43_398)"
"(let-values(((pattern_399) pattern44_391))"
"(let-values(((string_400) string45_392))"
"(let-values(((start_401)(if start41_396 start38_393 0)))"
"(let-values(((end_402)(if end42_397 end39_394 #f)))"
"            (let-values (((ipre_403) (if ipre43_398 ipre40_395 #\"\")))"
"(let-values(((match-select_404)(if match-select37_390 match-select36_389 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_404)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'regexp-match-peek-positions* \"procedure?\" match-select_404)))"
"(if(eq? match-select_404 car)"
"(let-values(((string_405)"
"(if(path? string_400)"
"(if(let-values(((or-part_406)(string? pattern_399)))"
"(if or-part_406 or-part_406(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_407)"
"(if(string? string_405)"
"(let-values()(string-length string_405))"
"(if(bytes? string_405)"
"(let-values()(bytes-length string_405))"
"(let-values() #f)))))"
"(let-values(((orig-rx_408)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_409)(regexp-max-lookbehind orig-rx_408)))"
"(begin"
"(if #t"
"(if(input-port? string_405)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_405)))"
"(if(let-values(((or-part_410) len_407))"
"(if or-part_410 or-part_410(input-port? string_405)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_405))))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_411)(not end_402)))"
"(if or-part_411"
" or-part_411"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_412)(input-port? string_405)))"
"(if or-part_412 or-part_412(if len_407(<= start_401 len_407) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_407)"
" start_401)))"
"(if(let-values(((or-part_413)(not end_402)))"
"(if or-part_413"
" or-part_413"
"(if(<= start_401 end_402)"
"(let-values(((or-part_414)(input-port? string_405)))"
"(if or-part_414 or-part_414(if len_407(<= end_402 len_407) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_407)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_415)"
"(lambda(acc_416 start_417 end_418 ipre_419 0-ok?_420)"
"(let-values(((rx_421)"
"(if 0-ok?_420"
" orig-rx_408"
"(no-empty-edge-matches"
" orig-rx_408"
"(add1(bytes-length ipre_419))))))"
"(if(if #f(input-port? string_405) #f)"
"(let-values(((__422)"
"(if(positive? start_417)"
"(let-values()"
"(let-values(((s_423)(make-bytes 4096)))"
"((letrec-values(((loop_424)"
"(lambda(n_425)"
"(if(= n_425 start_417)"
"(void)"
"(let-values()"
"(let-values(((m_426)"
"(read-bytes-avail!"
" s_423"
" string_405"
" 0"
"(min"
"(-"
" start_417"
" n_425)"
" 4096))))"
"(if(eof-object?"
" m_426)"
"(void)"
"(let-values()"
"(loop_424"
"(+"
" n_425"
" m_426))))))))))"
" loop_424)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_427)(if #f #f 0)))"
"(let-values(((spitout_428)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_429"
" start_430"
" end_431"
" flush?_432"
" breakable?_433)"
"(let-values(((c_434)"
"(- end_431 start_430)))"
"(begin"
"(set! discarded/leftovers_427"
"(+ c_434 discarded/leftovers_427))"
" c_434)))"
" void))))"
"(let-values(((end_435)"
"(if end_418(- end_418 start_417) #f)))"
"(let-values(((ms_436 ipre_437)"
"(regexp-match/end"
" rx_421"
" string_405"
" 0"
" end_435"
" spitout_428"
" ipre_419"
" max-lookbehind_409)))"
"(let-values(((m_438)(if ms_436(car ms_436) #f)))"
"(let-values(((discarded/leftovers_439)"
"(if #f"
"(get-output-bytes spitout_428)"
" discarded/leftovers_427)))"
"(let-values(((skipped_440)"
"(if #f"
"(bstring-length"
" discarded/leftovers_439)"
" discarded/leftovers_439)))"
"(let-values(((got_441)"
"(if m_438"
"(bstring-length m_438)"
" #f)))"
"(let-values(((end_442)"
"(if end_435"
"(if m_438"
"(-"
" end_435"
" skipped_440"
" got_441)"
" #f)"
" #f)))"
"(if m_438"
"(let-values(((0-ok?_443)"
"(not(zero? got_441))))"
"(loop_415"
"(#f"
" discarded/leftovers_439"
" ms_436"
" acc_416)"
" 0"
" end_442"
" ipre_437"
" 0-ok?_443))"
"(#f"
" acc_416"
" discarded/leftovers_439))))))))))))"
"(let-values(((m_444 ipre_445)"
"(if #t"
"(regexp-match-peek-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" #f"
" ipre_419"
" max-lookbehind_409)"
"(regexp-match-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" #f"
" ipre_419"
" max-lookbehind_409))))"
"(if(not m_444)"
"((lambda(acc_446 start_447 end_448) acc_446)"
" acc_416"
" start_417"
" end_418)"
"(let-values(((mstart_449)(caar m_444)))"
"(let-values(((mend_450)(cdar m_444)))"
"(let-values(((0-ok?_451)"
"(not(= mstart_449 mend_450))))"
"(if(if #f(input-port? string_405) #f)"
"(#f"
"(lambda(acc_452 new-start_453 new-end_454)"
"(loop_415"
" acc_452"
" new-start_453"
" new-end_454"
" ipre_445"
" 0-ok?_451))"
" acc_416"
" start_417"
" end_418"
" m_444)"
"(loop_415"
"((lambda(start_455 ms_456 acc_457)"
"(cons(car ms_456) acc_457))"
" start_417"
" m_444"
" acc_416)"
" mend_450"
" end_418"
" ipre_445"
" 0-ok?_451))))))))))))"
" loop_415)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t)))))))"
"(let-values(((string_458)"
"(if(path? string_400)"
"(if(let-values(((or-part_459)(string? pattern_399)))"
"(if or-part_459 or-part_459(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_460)"
"(if(string? string_458)"
"(let-values()(string-length string_458))"
"(if(bytes? string_458)"
"(let-values()(bytes-length string_458))"
"(let-values() #f)))))"
"(let-values(((orig-rx_461)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_462)(regexp-max-lookbehind orig-rx_461)))"
"(begin"
"(if #t"
"(if(input-port? string_458)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_458)))"
"(if(let-values(((or-part_463) len_460))"
"(if or-part_463 or-part_463(input-port? string_458)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_458))))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_464)(not end_402)))"
"(if or-part_464"
" or-part_464"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_465)(input-port? string_458)))"
"(if or-part_465 or-part_465(if len_460(<= start_401 len_460) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_460)"
" start_401)))"
"(if(let-values(((or-part_466)(not end_402)))"
"(if or-part_466"
" or-part_466"
"(if(<= start_401 end_402)"
"(let-values(((or-part_467)(input-port? string_458)))"
"(if or-part_467 or-part_467(if len_460(<= end_402 len_460) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_460)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_468)"
"(lambda(acc_469 start_470 end_471 ipre_472 0-ok?_473)"
"(let-values(((rx_474)"
"(if 0-ok?_473"
" orig-rx_461"
"(no-empty-edge-matches"
" orig-rx_461"
"(add1(bytes-length ipre_472))))))"
"(if(if #f(input-port? string_458) #f)"
"(let-values(((__475)"
"(if(positive? start_470)"
"(let-values()"
"(let-values(((s_476)(make-bytes 4096)))"
"((letrec-values(((loop_477)"
"(lambda(n_478)"
"(if(= n_478 start_470)"
"(void)"
"(let-values()"
"(let-values(((m_479)"
"(read-bytes-avail!"
" s_476"
" string_458"
" 0"
"(min"
"(-"
" start_470"
" n_478)"
" 4096))))"
"(if(eof-object?"
" m_479)"
"(void)"
"(let-values()"
"(loop_477"
"(+"
" n_478"
" m_479))))))))))"
" loop_477)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_480)(if #f #f 0)))"
"(let-values(((spitout_481)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_482"
" start_483"
" end_484"
" flush?_485"
" breakable?_486)"
"(let-values(((c_487)"
"(- end_484 start_483)))"
"(begin"
"(set! discarded/leftovers_480"
"(+ c_487 discarded/leftovers_480))"
" c_487)))"
" void))))"
"(let-values(((end_488)"
"(if end_471(- end_471 start_470) #f)))"
"(let-values(((ms_489 ipre_490)"
"(regexp-match/end"
" rx_474"
" string_458"
" 0"
" end_488"
" spitout_481"
" ipre_472"
" max-lookbehind_462)))"
"(let-values(((m_491)(if ms_489(car ms_489) #f)))"
"(let-values(((discarded/leftovers_492)"
"(if #f"
"(get-output-bytes spitout_481)"
" discarded/leftovers_480)))"
"(let-values(((skipped_493)"
"(if #f"
"(bstring-length"
" discarded/leftovers_492)"
" discarded/leftovers_492)))"
"(let-values(((got_494)"
"(if m_491"
"(bstring-length m_491)"
" #f)))"
"(let-values(((end_495)"
"(if end_488"
"(if m_491"
"(-"
" end_488"
" skipped_493"
" got_494)"
" #f)"
" #f)))"
"(if m_491"
"(let-values(((0-ok?_496)"
"(not(zero? got_494))))"
"(loop_468"
"(#f"
" discarded/leftovers_492"
" ms_489"
" acc_469)"
" 0"
" end_495"
" ipre_490"
" 0-ok?_496))"
"(#f"
" acc_469"
" discarded/leftovers_492))))))))))))"
"(let-values(((m_497 ipre_498)"
"(if #t"
"(regexp-match-peek-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" #f"
" ipre_472"
" max-lookbehind_462)"
"(regexp-match-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" #f"
" ipre_472"
" max-lookbehind_462))))"
"(if(not m_497)"
"((lambda(acc_499 start_500 end_501) acc_499)"
" acc_469"
" start_470"
" end_471)"
"(let-values(((mstart_502)(caar m_497)))"
"(let-values(((mend_503)(cdar m_497)))"
"(let-values(((0-ok?_504)"
"(not(= mstart_502 mend_503))))"
"(if(if #f(input-port? string_458) #f)"
"(#f"
"(lambda(acc_505 new-start_506 new-end_507)"
"(loop_468"
" acc_505"
" new-start_506"
" new-end_507"
" ipre_498"
" 0-ok?_504))"
" acc_469"
" start_470"
" end_471"
" m_497)"
"(loop_468"
"((lambda(start_508 ms_509 acc_510)"
"(cons(match-select_404 ms_509) acc_510))"
" start_470"
" m_497"
" acc_469)"
" mend_503"
" end_471"
" ipre_498"
" 0-ok?_504))))))))))))"
" loop_468)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t))))))))))))))))))"
"(define-values"
"(unpack47.1$2)"
"(lambda(given-kws_511"
" given-args_512"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)"
"(let-values(((match-select37_521)(pair? given-kws_511)))"
"(let-values(((match-select36_522)(if match-select37_521(car given-args_512)(void))))"
"(regexp-match-peek-positions*46.1"
" match-select36_522"
" match-select37_521"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)))))"
"(define-values"
"(get-buf+sub)"
"(lambda(string_564 pattern_565)"
"(let-values(((buf_566)"
"(if(if(string? string_564)"
"(let-values(((or-part_567)(byte-regexp? pattern_565)))"
"(if or-part_567 or-part_567(bytes? pattern_565)))"
" #f)"
"(string->bytes/utf-8 string_564(char->integer '#\\?))"
" string_564)))"
"(values"
" buf_566"
"(if(let-values(((or-part_568)(bytes? buf_566)))"
"(if or-part_568"
" or-part_568"
"(if(path? string_564)"
"(let-values(((or-part_569)(bytes? pattern_565)))"
"(if or-part_569 or-part_569(byte-regexp? pattern_565)))"
" #f)))"
" subbytes"
" substring)))))"
"(define-values"
"(regexp-split)"
"(let-values(((regexp-split57_570)"
"(lambda(pattern55_571 string56_572 start49_573 end50_574 ipre51_575 start52_576 end53_577 ipre54_578)"
"(let-values(((pattern_579) pattern55_571))"
"(let-values(((string_580) string56_572))"
"(let-values(((start_581)(if start52_576 start49_573 0)))"
"(let-values(((end_582)(if end53_577 end50_574 #f)))"
"                          (let-values (((ipre_583) (if ipre54_578 ipre51_575 #\"\")))"
"(let-values()"
"(let-values(((buf_584 sub_585)(get-buf+sub string_580 pattern_579)))"
"(let-values(((buf_586)"
"(if(path? buf_584)"
"(if(let-values(((or-part_587)(string? pattern_579)))"
"(if or-part_587 or-part_587(regexp? pattern_579)))"
"(path->string buf_584)"
"(path->bytes buf_584))"
" buf_584)))"
"(let-values(((len_588)"
"(if(string? buf_586)"
"(let-values()(string-length buf_586))"
"(if(bytes? buf_586)"
"(let-values()(bytes-length buf_586))"
"(let-values() #f)))))"
"(let-values(((orig-rx_589)"
"(if(bytes? pattern_579)"
"(let-values()(byte-regexp pattern_579))"
"(if(string? pattern_579)"
"(let-values()(regexp pattern_579))"
"(if(regexp? pattern_579)"
"(let-values() pattern_579)"
"(if(byte-regexp? pattern_579)"
"(let-values() pattern_579)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_579))))))))"
"(let-values(((max-lookbehind_590)(regexp-max-lookbehind orig-rx_589)))"
"(begin"
"(if #f"
"(if(input-port? buf_586)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'regexp-split \"input-port?\" buf_586)))"
"(if(let-values(((or-part_591) len_588))"
"(if or-part_591 or-part_591(input-port? buf_586)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_586))))"
"(if(if(number? start_581)"
"(if(exact? start_581)(if(integer? start_581)(>= start_581 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"exact-nonnegative-integer?\""
" start_581)))"
"(if(let-values(((or-part_592)(not end_582)))"
"(if or-part_592"
" or-part_592"
"(if(number? end_582)"
"(if(exact? end_582)(if(integer? end_582)(>= end_582 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_582)))"
"(if(bytes? ipre_583)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-split \"bytes?\" ipre_583)))"
"(if(let-values(((or-part_593)(input-port? buf_586)))"
"(if or-part_593 or-part_593(if len_588(<= start_581 len_588) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"starting offset index out of range [0,~a]: \" len_588)"
" start_581)))"
"(if(let-values(((or-part_594)(not end_582)))"
"(if or-part_594"
" or-part_594"
"(if(<= start_581 end_582)"
"(let-values(((or-part_595)(input-port? buf_586)))"
"(if or-part_595 or-part_595(if len_588(<= end_582 len_588) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_581 len_588)"
" end_582)))"
"(reverse"
"((letrec-values(((loop_596)"
"(lambda(acc_597 start_598 end_599 ipre_600 0-ok?_601)"
"(let-values(((rx_602)"
"(if 0-ok?_601"
" orig-rx_589"
"(no-empty-edge-matches"
" orig-rx_589"
"(add1(bytes-length ipre_600))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons leftovers acc))"
"(input-port? buf_586)"
" #f)"
"(let-values(((__606)"
"(if(positive? start_598)"
"(let-values()"
"(let-values(((s_607)"
"(make-bytes 4096)))"
"((letrec-values(((loop_608)"
"(lambda(n_609)"
"(if(="
" n_609"
" start_598)"
"(void)"
"(let-values()"
"(let-values(((m_610)"
"(read-bytes-avail!"
" s_607"
" buf_586"
" 0"
"(min"
"(-"
" start_598"
" n_609)"
" 4096))))"
"(if(eof-object?"
" m_610)"
"(void)"
"(let-values()"
"(loop_608"
"(+"
" n_609"
" m_610))))))))))"
" loop_608)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_611)"
"(if #t #f 0)))"
"(let-values(((spitout_612)"
"(if #t"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_613"
" start_614"
" end_615"
" flush?_616"
" breakable?_617)"
"(let-values(((c_618)"
"(-"
" end_615"
" start_614)))"
"(begin"
"(set! discarded/leftovers_611"
"(+"
" c_618"
" discarded/leftovers_611))"
" c_618)))"
" void))))"
"(let-values(((end_619)"
"(if end_599"
"(- end_599 start_598)"
" #f)))"
"(let-values(((ms_620 ipre_621)"
"(regexp-match/end"
" rx_602"
" buf_586"
" 0"
" end_619"
" spitout_612"
" ipre_600"
" max-lookbehind_590)))"
"(let-values(((m_622)"
"(if ms_620(car ms_620) #f)))"
"(let-values(((discarded/leftovers_623)"
"(if #t"
"(get-output-bytes"
" spitout_612)"
" discarded/leftovers_611)))"
"(let-values(((skipped_624)"
"(if #t"
"(bstring-length"
" discarded/leftovers_623)"
" discarded/leftovers_623)))"
"(let-values(((got_625)"
"(if m_622"
"(bstring-length"
" m_622)"
" #f)))"
"(let-values(((end_626)"
"(if end_619"
"(if m_622"
"(-"
" end_619"
" skipped_624"
" got_625)"
" #f)"
" #f)))"
"(if m_622"
"(let-values(((0-ok?_627)"
"(not"
"(zero?"
" got_625))))"
"(loop_596"
"((lambda(leftovers_628"
" ms_629"
" acc_630)"
"(cons"
" leftovers_628"
" acc_630))"
" discarded/leftovers_623"
" ms_620"
" acc_597)"
" 0"
" end_626"
" ipre_621"
" 0-ok?_627))"
"((lambda(acc_631 leftover_632)"
"(if leftover_632"
"(cons"
" leftover_632"
" acc_631)"
" acc_631))"
" acc_597"
" discarded/leftovers_623))))))))))))"
"(let-values(((m_633 ipre_634)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" #f"
" ipre_600"
" max-lookbehind_590)"
"(regexp-match-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" #f"
" ipre_600"
" max-lookbehind_590))))"
"(if(not m_633)"
"((lambda(acc_635 start_636 end_637)"
"(cons"
"(if end_637"
"(sub_585 buf_586 start_636 end_637)"
"(sub_585 buf_586 start_636))"
" acc_635))"
" acc_597"
" start_598"
" end_599)"
"(let-values(((mstart_638)(caar m_633)))"
"(let-values(((mend_639)(cdar m_633)))"
"(let-values(((0-ok?_640)"
"(not(= mstart_638 mend_639))))"
"(if(if #f(input-port? buf_586) #f)"
"(#f"
"(lambda(acc_641"
" new-start_642"
" new-end_643)"
"(loop_596"
" acc_641"
" new-start_642"
" new-end_643"
" ipre_634"
" 0-ok?_640))"
" acc_597"
" start_598"
" end_599"
" m_633)"
"(loop_596"
"((lambda(start_644 ms_645 acc_646)"
"(cons"
"(sub_585"
" buf_586"
" start_644"
"(caar ms_645))"
" acc_646))"
" start_598"
" m_633"
" acc_597)"
" mend_639"
" end_599"
" ipre_634"
" 0-ok?_640))))))))))))"
" loop_596)"
" '()"
" start_581"
" end_582"
" ipre_583"
" #t)))))))))))))))))"
"(case-lambda"
"((pattern_647 string_648)(regexp-split57_570 pattern_647 string_648 #f #f #f #f #f #f))"
"((pattern_649 string_650 start_651 end_652 ipre51_653)"
"(regexp-split57_570 pattern_649 string_650 start_651 end_652 ipre51_653 #t #t #t))"
"((pattern_654 string_655 start_656 end50_657)"
"(regexp-split57_570 pattern_654 string_655 start_656 end50_657 #f #t #t #f))"
"((pattern_658 string_659 start49_660)(regexp-split57_570 pattern_658 string_659 start49_660 #f #f #t #f #f)))))"
"(define-values"
"(regexp-match*71.1)"
"(lambda(gap-select?60_796"
" gap-select?62_797"
" match-select59_798"
" match-select61_799"
" pattern69_800"
" string70_801"
" start63_802"
" end64_803"
" ipre65_804"
" start66_805"
" end67_806"
" ipre68_807)"
"(let-values(((pattern_808) pattern69_800))"
"(let-values(((string_809) string70_801))"
"(let-values(((start_810)(if start66_805 start63_802 0)))"
"(let-values(((end_811)(if end67_806 end64_803 #f)))"
"            (let-values (((ipre_812) (if ipre68_807 ipre65_804 #\"\")))"
"(let-values(((match-select_813)(if match-select61_799 match-select59_798 car)))"
"(let-values(((gap-select_814)(if gap-select?62_797 gap-select?60_796 #f)))"
"(let-values()"
"(if(if(not match-select_813)(not gap-select_814) #f)"
"(let-values()"
"(raise"
"(exn:fail:contract"
"                          \"regexp-match*: one of `match-select' or `gap-select' must be non-#f\""
"(current-continuation-marks))))"
"(if(not match-select_813)"
"(let-values()(regexp-split pattern_808 string_809 start_810 end_811 ipre_812))"
"(if(not(procedure? match-select_813))"
"                          (let-values () (raise-argument-error 'regexp-match* \"(or/c procedure? #f)\" match-select_813))"
"(if(not(eq? match-select_813 car))"
"(let-values()"
"(let-values(((buf_815 sub_816)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_817)"
"(if(path? buf_815)"
"(if(let-values(((or-part_818)(string? pattern_808)))"
"(if or-part_818 or-part_818(regexp? pattern_808)))"
"(path->string buf_815)"
"(path->bytes buf_815))"
" buf_815)))"
"(let-values(((len_819)"
"(if(string? buf_817)"
"(let-values()(string-length buf_817))"
"(if(bytes? buf_817)"
"(let-values()(bytes-length buf_817))"
"(let-values() #f)))))"
"(let-values(((orig-rx_820)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_821)(regexp-max-lookbehind orig-rx_820)))"
"(begin"
"(if #f"
"(if(input-port? buf_817)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'regexp-explode \"input-port?\" buf_817)))"
"(if(let-values(((or-part_822) len_819))"
"(if or-part_822 or-part_822(input-port? buf_817)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_817))))"
"(if(if(number? start_810)"
"(if(exact? start_810)(if(integer? start_810)(>= start_810 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_823)(not end_811)))"
"(if or-part_823"
" or-part_823"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_824)(input-port? buf_817)))"
"(if or-part_824 or-part_824(if len_819(<= start_810 len_819) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"starting offset index out of range [0,~a]: \" len_819)"
" start_810)))"
"(if(let-values(((or-part_825)(not end_811)))"
"(if or-part_825"
" or-part_825"
"(if(<= start_810 end_811)"
"(let-values(((or-part_826)(input-port? buf_817)))"
"(if or-part_826 or-part_826(if len_819(<= end_811 len_819) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_810 len_819)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_827)"
"(lambda(acc_828 start_829 end_830 ipre_831 0-ok?_832)"
"(let-values(((rx_833)"
"(if 0-ok?_832"
" orig-rx_820"
"(no-empty-edge-matches"
" orig-rx_820"
"(add1(bytes-length ipre_831))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app match-select ms)"
"(if gap-select"
"(#%app cons leftovers acc)"
" acc)))"
"(input-port? buf_817)"
" #f)"
"(let-values(((__837)"
"(if(positive? start_829)"
"(let-values()"
"(let-values(((s_838)"
"(make-bytes 4096)))"
"((letrec-values(((loop_839)"
"(lambda(n_840)"
"(if(="
" n_840"
" start_829)"
"(void)"
"(let-values()"
"(let-values(((m_841)"
"(read-bytes-avail!"
" s_838"
" buf_817"
" 0"
"(min"
"(-"
" start_829"
" n_840)"
" 4096))))"
"(if(eof-object?"
" m_841)"
"(void)"
"(let-values()"
"(loop_839"
"(+"
" n_840"
" m_841))))))))))"
" loop_839)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_842)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_843)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_844"
" start_845"
" end_846"
" flush?_847"
" breakable?_848)"
"(let-values(((c_849)"
"(-"
" end_846"
" start_845)))"
"(begin"
"(set! discarded/leftovers_842"
"(+"
" c_849"
" discarded/leftovers_842))"
" c_849)))"
" void))))"
"(let-values(((end_850)"
"(if end_830"
"(- end_830 start_829)"
" #f)))"
"(let-values(((ms_851 ipre_852)"
"(regexp-match/end"
" rx_833"
" buf_817"
" 0"
" end_850"
" spitout_843"
" ipre_831"
" max-lookbehind_821)))"
"(let-values(((m_853)"
"(if ms_851(car ms_851) #f)))"
"(let-values(((discarded/leftovers_854)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_843)"
" discarded/leftovers_842)))"
"(let-values(((skipped_855)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_854)"
" discarded/leftovers_854)))"
"(let-values(((got_856)"
"(if m_853"
"(bstring-length"
" m_853)"
" #f)))"
"(let-values(((end_857)"
"(if end_850"
"(if m_853"
"(-"
" end_850"
" skipped_855"
" got_856)"
" #f)"
" #f)))"
"(if m_853"
"(let-values(((0-ok?_858)"
"(not"
"(zero?"
" got_856))))"
"(loop_827"
"((lambda(leftovers_859"
" ms_860"
" acc_861)"
"(cons"
"(match-select_813"
" ms_860)"
"(if gap-select_814"
"(cons"
" leftovers_859"
" acc_861)"
" acc_861)))"
" discarded/leftovers_854"
" ms_851"
" acc_828)"
" 0"
" end_857"
" ipre_852"
" 0-ok?_858))"
"((lambda(acc_862 leftover_863)"
"(if(if gap-select_814"
" leftover_863"
" #f)"
"(cons"
" leftover_863"
" acc_862)"
" acc_862))"
" acc_828"
" discarded/leftovers_854))))))))))))"
"(let-values(((m_864 ipre_865)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" #f"
" ipre_831"
" max-lookbehind_821)"
"(regexp-match-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" #f"
" ipre_831"
" max-lookbehind_821))))"
"(if(not m_864)"
"((lambda(acc_866 start_867 end_868)"
"(if gap-select_814"
"(cons"
"(if end_868"
"(sub_816 buf_817 start_867 end_868)"
"(sub_816 buf_817 start_867))"
" acc_866)"
" acc_866))"
" acc_828"
" start_829"
" end_830)"
"(let-values(((mstart_869)(caar m_864)))"
"(let-values(((mend_870)(cdar m_864)))"
"(let-values(((0-ok?_871)"
"(not(= mstart_869 mend_870))))"
"(if(if #f(input-port? buf_817) #f)"
"(#f"
"(lambda(acc_872"
" new-start_873"
" new-end_874)"
"(loop_827"
" acc_872"
" new-start_873"
" new-end_874"
" ipre_865"
" 0-ok?_871))"
" acc_828"
" start_829"
" end_830"
" m_864)"
"(loop_827"
"((lambda(start_875 ms_876 acc_877)"
"(cons"
"(let-values(((s_878)"
"(match-select_813"
" ms_876)))"
"(if(not(pair? s_878))"
"(let-values() s_878)"
"(if(integer?(car s_878))"
"(let-values()"
"(sub_816"
" buf_817"
"(car s_878)"
"(cdr s_878)))"
"(let-values()"
"(map2"
"(lambda(m_879)"
"(if m_879"
"(sub_816"
" buf_817"
"(car m_879)"
"(cdr m_879))"
" #f))"
" s_878)))))"
"(if gap-select_814"
"(cons"
"(sub_816"
" buf_817"
" start_875"
"(caar ms_876))"
" acc_877)"
" acc_877)))"
" start_829"
" m_864"
" acc_828)"
" mend_870"
" end_830"
" ipre_865"
" 0-ok?_871))))))))))))"
" loop_827)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(if gap-select_814"
"(let-values()"
"(let-values(((buf_880 sub_881)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_882)"
"(if(path? buf_880)"
"(if(let-values(((or-part_883)(string? pattern_808)))"
"(if or-part_883 or-part_883(regexp? pattern_808)))"
"(path->string buf_880)"
"(path->bytes buf_880))"
" buf_880)))"
"(let-values(((len_884)"
"(if(string? buf_882)"
"(let-values()(string-length buf_882))"
"(if(bytes? buf_882)"
"(let-values()(bytes-length buf_882))"
"(let-values() #f)))))"
"(let-values(((orig-rx_885)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_886)(regexp-max-lookbehind orig-rx_885)))"
"(begin"
"(if #f"
"(if(input-port? buf_882)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'regexp-explode \"input-port?\" buf_882)))"
"(if(let-values(((or-part_887) len_884))"
"(if or-part_887 or-part_887(input-port? buf_882)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                   \"(or/c string? bytes? path? input-port?)\""
" buf_882))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_888)(not end_811)))"
"(if or-part_888"
" or-part_888"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_889)(input-port? buf_882)))"
"(if or-part_889 or-part_889(if len_884(<= start_810 len_884) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_884)"
" start_810)))"
"(if(let-values(((or-part_890)(not end_811)))"
"(if or-part_890"
" or-part_890"
"(if(<= start_810 end_811)"
"(let-values(((or-part_891)(input-port? buf_882)))"
"(if or-part_891"
" or-part_891"
"(if len_884(<= end_811 len_884) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_884)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_892)"
"(lambda(acc_893 start_894 end_895 ipre_896 0-ok?_897)"
"(let-values(((rx_898)"
"(if 0-ok?_897"
" orig-rx_885"
"(no-empty-edge-matches"
" orig-rx_885"
"(add1(bytes-length ipre_896))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app car ms)"
"(#%app cons leftovers acc)))"
"(input-port? buf_882)"
" #f)"
"(let-values(((__902)"
"(if(positive? start_894)"
"(let-values()"
"(let-values(((s_903)"
"(make-bytes 4096)))"
"((letrec-values(((loop_904)"
"(lambda(n_905)"
"(if(="
" n_905"
" start_894)"
"(void)"
"(let-values()"
"(let-values(((m_906)"
"(read-bytes-avail!"
" s_903"
" buf_882"
" 0"
"(min"
"(-"
" start_894"
" n_905)"
" 4096))))"
"(if(eof-object?"
" m_906)"
"(void)"
"(let-values()"
"(loop_904"
"(+"
" n_905"
" m_906))))))))))"
" loop_904)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_907)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_908)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_909"
" start_910"
" end_911"
" flush?_912"
" breakable?_913)"
"(let-values(((c_914)"
"(-"
" end_911"
" start_910)))"
"(begin"
"(set! discarded/leftovers_907"
"(+"
" c_914"
" discarded/leftovers_907))"
" c_914)))"
" void))))"
"(let-values(((end_915)"
"(if end_895"
"(- end_895 start_894)"
" #f)))"
"(let-values(((ms_916 ipre_917)"
"(regexp-match/end"
" rx_898"
" buf_882"
" 0"
" end_915"
" spitout_908"
" ipre_896"
" max-lookbehind_886)))"
"(let-values(((m_918)"
"(if ms_916"
"(car ms_916)"
" #f)))"
"(let-values(((discarded/leftovers_919)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_908)"
" discarded/leftovers_907)))"
"(let-values(((skipped_920)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_919)"
" discarded/leftovers_919)))"
"(let-values(((got_921)"
"(if m_918"
"(bstring-length"
" m_918)"
" #f)))"
"(let-values(((end_922)"
"(if end_915"
"(if m_918"
"(-"
" end_915"
" skipped_920"
" got_921)"
" #f)"
" #f)))"
"(if m_918"
"(let-values(((0-ok?_923)"
"(not"
"(zero?"
" got_921))))"
"(loop_892"
"((lambda(leftovers_924"
" ms_925"
" acc_926)"
"(cons"
"(car ms_925)"
"(cons"
" leftovers_924"
" acc_926)))"
" discarded/leftovers_919"
" ms_916"
" acc_893)"
" 0"
" end_922"
" ipre_917"
" 0-ok?_923))"
"((lambda(acc_927"
" leftover_928)"
"(if leftover_928"
"(cons"
" leftover_928"
" acc_927)"
" acc_927))"
" acc_893"
" discarded/leftovers_919))))))))))))"
"(let-values(((m_929 ipre_930)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" #f"
" ipre_896"
" max-lookbehind_886)"
"(regexp-match-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" #f"
" ipre_896"
" max-lookbehind_886))))"
"(if(not m_929)"
"((lambda(acc_931 start_932 end_933)"
"(cons"
"(if end_933"
"(sub_881 buf_882 start_932 end_933)"
"(sub_881 buf_882 start_932))"
" acc_931))"
" acc_893"
" start_894"
" end_895)"
"(let-values(((mstart_934)(caar m_929)))"
"(let-values(((mend_935)(cdar m_929)))"
"(let-values(((0-ok?_936)"
"(not"
"(= mstart_934 mend_935))))"
"(if(if #f(input-port? buf_882) #f)"
"(#f"
"(lambda(acc_937"
" new-start_938"
" new-end_939)"
"(loop_892"
" acc_937"
" new-start_938"
" new-end_939"
" ipre_930"
" 0-ok?_936))"
" acc_893"
" start_894"
" end_895"
" m_929)"
"(loop_892"
"((lambda(start_940 ms_941 acc_942)"
"(cons"
"(sub_881"
" buf_882"
"(caar ms_941)"
"(cdar ms_941))"
"(cons"
"(sub_881"
" buf_882"
" start_940"
"(caar ms_941))"
" acc_942)))"
" start_894"
" m_929"
" acc_893)"
" mend_935"
" end_895"
" ipre_930"
" 0-ok?_936))))))))))))"
" loop_892)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(let-values()"
"(let-values(((buf_943 sub_944)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_945)"
"(if(path? buf_943)"
"(if(let-values(((or-part_946)(string? pattern_808)))"
"(if or-part_946 or-part_946(regexp? pattern_808)))"
"(path->string buf_943)"
"(path->bytes buf_943))"
" buf_943)))"
"(let-values(((len_947)"
"(if(string? buf_945)"
"(let-values()(string-length buf_945))"
"(if(bytes? buf_945)"
"(let-values()(bytes-length buf_945))"
"(let-values() #f)))))"
"(let-values(((orig-rx_948)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_949)(regexp-max-lookbehind orig-rx_948)))"
"(begin"
"(if #f"
"(if(input-port? buf_945)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'regexp-match* \"input-port?\" buf_945)))"
"(if(let-values(((or-part_950) len_947))"
"(if or-part_950 or-part_950(input-port? buf_945)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                   \"(or/c string? bytes? path? input-port?)\""
" buf_945))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_951)(not end_811)))"
"(if or-part_951"
" or-part_951"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-match* \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_952)(input-port? buf_945)))"
"(if or-part_952 or-part_952(if len_947(<= start_810 len_947) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_947)"
" start_810)))"
"(if(let-values(((or-part_953)(not end_811)))"
"(if or-part_953"
" or-part_953"
"(if(<= start_810 end_811)"
"(let-values(((or-part_954)(input-port? buf_945)))"
"(if or-part_954"
" or-part_954"
"(if len_947(<= end_811 len_947) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_947)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_955)"
"(lambda(acc_956 start_957 end_958 ipre_959 0-ok?_960)"
"(let-values(((rx_961)"
"(if 0-ok?_960"
" orig-rx_948"
"(no-empty-edge-matches"
" orig-rx_948"
"(add1(bytes-length ipre_959))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons(#%app car ms) acc))"
"(input-port? buf_945)"
" #f)"
"(let-values(((__965)"
"(if(positive? start_957)"
"(let-values()"
"(let-values(((s_966)"
"(make-bytes 4096)))"
"((letrec-values(((loop_967)"
"(lambda(n_968)"
"(if(="
" n_968"
" start_957)"
"(void)"
"(let-values()"
"(let-values(((m_969)"
"(read-bytes-avail!"
" s_966"
" buf_945"
" 0"
"(min"
"(-"
" start_957"
" n_968)"
" 4096))))"
"(if(eof-object?"
" m_969)"
"(void)"
"(let-values()"
"(loop_967"
"(+"
" n_968"
" m_969))))))))))"
" loop_967)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_970)"
"(if #f #f 0)))"
"(let-values(((spitout_971)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_972"
" start_973"
" end_974"
" flush?_975"
" breakable?_976)"
"(let-values(((c_977)"
"(-"
" end_974"
" start_973)))"
"(begin"
"(set! discarded/leftovers_970"
"(+"
" c_977"
" discarded/leftovers_970))"
" c_977)))"
" void))))"
"(let-values(((end_978)"
"(if end_958"
"(- end_958 start_957)"
" #f)))"
"(let-values(((ms_979 ipre_980)"
"(regexp-match/end"
" rx_961"
" buf_945"
" 0"
" end_978"
" spitout_971"
" ipre_959"
" max-lookbehind_949)))"
"(let-values(((m_981)"
"(if ms_979"
"(car ms_979)"
" #f)))"
"(let-values(((discarded/leftovers_982)"
"(if #f"
"(get-output-bytes"
" spitout_971)"
" discarded/leftovers_970)))"
"(let-values(((skipped_983)"
"(if #f"
"(bstring-length"
" discarded/leftovers_982)"
" discarded/leftovers_982)))"
"(let-values(((got_984)"
"(if m_981"
"(bstring-length"
" m_981)"
" #f)))"
"(let-values(((end_985)"
"(if end_978"
"(if m_981"
"(-"
" end_978"
" skipped_983"
" got_984)"
" #f)"
" #f)))"
"(if m_981"
"(let-values(((0-ok?_986)"
"(not"
"(zero?"
" got_984))))"
"(loop_955"
"((lambda(leftovers_987"
" ms_988"
" acc_989)"
"(cons"
"(car ms_988)"
" acc_989))"
" discarded/leftovers_982"
" ms_979"
" acc_956)"
" 0"
" end_985"
" ipre_980"
" 0-ok?_986))"
"((lambda(acc_990"
" leftover_991)"
" acc_990)"
" acc_956"
" discarded/leftovers_982))))))))))))"
"(let-values(((m_992 ipre_993)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" #f"
" ipre_959"
" max-lookbehind_949)"
"(regexp-match-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" #f"
" ipre_959"
" max-lookbehind_949))))"
"(if(not m_992)"
"((lambda(acc_994 start_995 end_996) acc_994)"
" acc_956"
" start_957"
" end_958)"
"(let-values(((mstart_997)(caar m_992)))"
"(let-values(((mend_998)(cdar m_992)))"
"(let-values(((0-ok?_999)"
"(not"
"(= mstart_997 mend_998))))"
"(if(if #f(input-port? buf_945) #f)"
"(#f"
"(lambda(acc_1000"
" new-start_1001"
" new-end_1002)"
"(loop_955"
" acc_1000"
" new-start_1001"
" new-end_1002"
" ipre_993"
" 0-ok?_999))"
" acc_956"
" start_957"
" end_958"
" m_992)"
"(loop_955"
"((lambda(start_1003 ms_1004 acc_1005)"
"(cons"
"(sub_944"
" buf_945"
"(caar ms_1004)"
"(cdar ms_1004))"
" acc_1005))"
" start_957"
" m_992"
" acc_956)"
" mend_998"
" end_958"
" ipre_993"
" 0-ok?_999))))))))))))"
" loop_955)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t))))))))))))))))))))))))"
"(define-values"
"(unpack72.1)"
"(lambda(given-kws_1006"
" given-args_1007"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)"
"(let-values(((gap-select?62_1016)(if(pair? given-kws_1006)(eq? '#:gap-select?(car given-kws_1006)) #f)))"
"(let-values(((gap-select?60_1017)(if gap-select?62_1016(car given-args_1007)(void)))"
"((given-kws_1018)(if gap-select?62_1016(cdr given-kws_1006) given-kws_1006))"
"((given-args_1019)(if gap-select?62_1016(cdr given-args_1007) given-args_1007)))"
"(let-values(((match-select61_1020)(pair? given-kws_1018)))"
"(let-values(((match-select59_1021)(if match-select61_1020(car given-args_1019)(void))))"
"(regexp-match*71.1"
" gap-select?60_1017"
" gap-select?62_1016"
" match-select59_1021"
" match-select61_1020"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)))))))"
"(define-values(exists-syms) '(error append update can-update replace truncate must-truncate truncate/replace))"
"(define-values"
"(exists-desc)"
"  \"(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)\")"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values(((path_6) path5_5))"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(unpack7.1$5)"
"(lambda(given-kws_9 given-args_10 path5_11)"
"(let-values(((for-module?4_12)(if(pair? given-kws_9)(eq? '#:for-module?(car given-kws_9)) #f)))"
"(let-values(((for-module?2_13)(if for-module?4_12(car given-args_10)(void)))"
"((given-kws_14)(if for-module?4_12(cdr given-kws_9) given-kws_9))"
"((given-args_15)(if for-module?4_12(cdr given-args_10) given-args_10)))"
"(let-values(((mode3_16)(pair? given-kws_14)))"
"(let-values(((mode1_17)(if mode3_16(car given-args_15)(void))))"
"(open-input-file6.1 for-module?2_13 for-module?4_12 mode1_17 mode3_16 path5_11)))))))"
"(define-values"
"(open-output-file14.1)"
"(lambda(exists10_29 exists12_30 mode9_31 mode11_32 path13_33)"
"(let-values(((path_34) path13_33))"
"(let-values(((mode_35)(if mode11_32 mode9_31 'binary)))"
"(let-values(((exists_36)(if exists12_30 exists10_29 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_34)"
"(void)"
"                (let-values () (raise-argument-error 'open-output-file \"path-string?\" path_34)))"
"(if(memq mode_35 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-output-file binary-or-text-desc mode_35)))"
"(if(memq exists_36 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-output-file exists-desc exists_36)))"
"(open-output-file path_34 mode_35 exists_36))))))))"
"(define-values"
"(unpack15.1$1)"
"(lambda(given-kws_37 given-args_38 path13_39)"
"(let-values(((exists12_40)(if(pair? given-kws_37)(eq? '#:exists(car given-kws_37)) #f)))"
"(let-values(((exists10_41)(if exists12_40(car given-args_38)(void)))"
"((given-kws_42)(if exists12_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if exists12_40(cdr given-args_38) given-args_38)))"
"(let-values(((mode11_44)(pair? given-kws_42)))"
"(let-values(((mode9_45)(if mode11_44(car given-args_43)(void))))"
"(open-output-file14.1 exists10_41 exists12_40 mode9_45 mode11_44 path13_39)))))))"
"(define-values"
"(open-input-output-file22.1)"
"(lambda(exists18_57 exists20_58 mode17_59 mode19_60 path21_61)"
"(let-values(((path_62) path21_61))"
"(let-values(((mode_63)(if mode19_60 mode17_59 'binary)))"
"(let-values(((exists_64)(if exists20_58 exists18_57 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_62)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-output-file \"path-string?\" path_62)))"
"(if(memq mode_63 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file binary-or-text-desc mode_63)))"
"(if(memq exists_64 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file exists-desc exists_64)))"
"(open-input-output-file path_62 mode_63 exists_64))))))))"
"(define-values"
"(unpack23.1)"
"(lambda(given-kws_65 given-args_66 path21_67)"
"(let-values(((exists20_68)(if(pair? given-kws_65)(eq? '#:exists(car given-kws_65)) #f)))"
"(let-values(((exists18_69)(if exists20_68(car given-args_66)(void)))"
"((given-kws_70)(if exists20_68(cdr given-kws_65) given-kws_65))"
"((given-args_71)(if exists20_68(cdr given-args_66) given-args_66)))"
"(let-values(((mode19_72)(pair? given-kws_70)))"
"(let-values(((mode17_73)(if mode19_72(car given-args_71)(void))))"
"(open-input-output-file22.1 exists18_69 exists20_68 mode17_73 mode19_72 path21_67)))))))"
"(define-values"
"(call-with-input-file29.1)"
"(lambda(mode25_85 mode26_86 path27_87 proc28_88)"
"(let-values(((path_89) path27_87))"
"(let-values(((proc_90) proc28_88))"
"(let-values(((mode_91)(if mode26_86 mode25_85 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_89)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"path-string?\" path_89)))"
"(if(if(procedure? proc_90)(procedure-arity-includes? proc_90 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"(input-port? . -> . any)\" proc_90)))"
"(if(memq mode_91 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file binary-or-text-desc mode_91)))"
"(call-with-input-file path_89 proc_90 mode_91))))))))"
"(define-values"
"(unpack30.1)"
"(lambda(given-kws_92 given-args_93 path27_94 proc28_95)"
"(let-values(((mode26_96)(pair? given-kws_92)))"
"(let-values(((mode25_97)(if mode26_96(car given-args_93)(void))))"
"(call-with-input-file29.1 mode25_97 mode26_96 path27_94 proc28_95)))))"
"(define-values"
"(call-with-output-file38.1)"
"(lambda(exists33_109 exists35_110 mode32_111 mode34_112 path36_113 proc37_114)"
"(let-values(((path_115) path36_113))"
"(let-values(((proc_116) proc37_114))"
"(let-values(((mode_117)(if mode34_112 mode32_111 'binary)))"
"(let-values(((exists_118)(if exists35_110 exists33_109 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_115)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"path-string?\" path_115)))"
"(if(if(procedure? proc_116)(procedure-arity-includes? proc_116 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"(output-port? . -> . any)\" proc_116)))"
"(if(memq mode_117 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file binary-or-text-desc mode_117)))"
"(if(memq exists_118 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file exists-desc exists_118)))"
"(call-with-output-file path_115 proc_116 mode_117 exists_118)))))))))"
"(define-values"
"(unpack39.1)"
"(lambda(given-kws_119 given-args_120 path36_121 proc37_122)"
"(let-values(((exists35_123)(if(pair? given-kws_119)(eq? '#:exists(car given-kws_119)) #f)))"
"(let-values(((exists33_124)(if exists35_123(car given-args_120)(void)))"
"((given-kws_125)(if exists35_123(cdr given-kws_119) given-kws_119))"
"((given-args_126)(if exists35_123(cdr given-args_120) given-args_120)))"
"(let-values(((mode34_127)(pair? given-kws_125)))"
"(let-values(((mode32_128)(if mode34_127(car given-args_126)(void))))"
"(call-with-output-file38.1 exists33_124 exists35_123 mode32_128 mode34_127 path36_121 proc37_122)))))))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_142 mode42_143 path43_144 proc44_145)"
"(let-values(((path_146) path43_144))"
"(let-values(((proc_147) proc44_145))"
"(let-values(((mode_148)(if mode42_143 mode41_142 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_146)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"path-string?\" path_146)))"
"(if(if(procedure? proc_147)(procedure-arity-includes? proc_147 0) #f)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"(-> any)\" proc_147)))"
"(if(memq mode_148 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_148)))"
"(with-input-from-file path_146 proc_147 mode_148))))))))"
"(define-values"
"(unpack46.1$1)"
"(lambda(given-kws_149 given-args_150 path43_151 proc44_152)"
"(let-values(((mode42_153)(pair? given-kws_149)))"
"(let-values(((mode41_154)(if mode42_153(car given-args_150)(void))))"
"(with-input-from-file45.1 mode41_154 mode42_153 path43_151 proc44_152)))))"
"(define-values"
"(with-output-to-file54.1)"
"(lambda(exists49_166 exists51_167 mode48_168 mode50_169 path52_170 proc53_171)"
"(let-values(((path_172) path52_170))"
"(let-values(((proc_173) proc53_171))"
"(let-values(((mode_174)(if mode50_169 mode48_168 'binary)))"
"(let-values(((exists_175)(if exists51_167 exists49_166 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_172)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"path-string?\" path_172)))"
"(if(if(procedure? proc_173)(procedure-arity-includes? proc_173 0) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"(-> any)\" proc_173)))"
"(if(memq mode_174 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file binary-or-text-desc mode_174)))"
"(if(memq exists_175 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file exists-desc exists_175)))"
"(with-output-to-file path_172 proc_173 mode_174 exists_175)))))))))"
"(define-values"
"(unpack55.1)"
"(lambda(given-kws_176 given-args_177 path52_178 proc53_179)"
"(let-values(((exists51_180)(if(pair? given-kws_176)(eq? '#:exists(car given-kws_176)) #f)))"
"(let-values(((exists49_181)(if exists51_180(car given-args_177)(void)))"
"((given-kws_182)(if exists51_180(cdr given-kws_176) given-kws_176))"
"((given-args_183)(if exists51_180(cdr given-args_177) given-args_177)))"
"(let-values(((mode50_184)(pair? given-kws_182)))"
"(let-values(((mode48_185)(if mode50_184(car given-args_183)(void))))"
"(with-output-to-file54.1 exists49_181 exists51_180 mode48_185 mode50_184 path52_178 proc53_179)))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values(((path_203) path59_201))"
"(let-values(((proc_204) proc60_202))"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(define-values"
"(unpack62.1)"
"(lambda(given-kws_207 given-args_208 path59_209 proc60_210)"
"(let-values(((mode58_211)(pair? given-kws_207)))"
"(let-values(((mode57_212)(if mode58_211(car given-args_208)(void))))"
"(call-with-input-file*61.1 mode57_212 mode58_211 path59_209 proc60_210)))))"
"(define-values"
"(call-with-input-file*63.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_213 given-argc_214)"
"(if(= given-argc_214 4)"
"(let-values(((l1_215) given-kws_213))"
"(let-values(((l1_216)(if(null? l1_215) l1_215(if(eq?(car l1_215) '#:mode)(cdr l1_215) l1_215))))"
"(null? l1_216)))"
" #f))"
"(case-lambda"
"((given-kws_217 given-args_218 path_219 proc_220)(unpack62.1 given-kws_217 given-args_218 path_219 proc_220)))"
" null"
" '(#:mode)"
"(let-values(((call-with-input-file*_221)"
"(case-lambda((path_222 proc_223)(unpack62.1 null null path_222 proc_223)))))"
" call-with-input-file*_221)))"
"(define-values"
"(call-with-output-file*70.1)"
"(lambda(exists65_224 exists67_225 mode64_226 mode66_227 path68_228 proc69_229)"
"(let-values(((path_230) path68_228))"
"(let-values(((proc_231) proc69_229))"
"(let-values(((mode_232)(if mode66_227 mode64_226 'binary)))"
"(let-values(((exists_233)(if exists67_225 exists65_224 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_230)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"path-string?\" path_230)))"
"(if(if(procedure? proc_231)(procedure-arity-includes? proc_231 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"(output-port? . -> . any)\" proc_231)))"
"(if(memq mode_232 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* binary-or-text-desc mode_232)))"
"(if(memq exists_233 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* exists-desc exists_233)))"
"(let-values(((p_234)(open-output-file path_230 mode_232 exists_233)))"
"(dynamic-wind void(lambda()(proc_231 p_234))(lambda()(close-output-port p_234))))))))))))"
"(define-values"
"(unpack71.1)"
"(lambda(given-kws_235 given-args_236 path68_237 proc69_238)"
"(let-values(((exists67_239)(if(pair? given-kws_235)(eq? '#:exists(car given-kws_235)) #f)))"
"(let-values(((exists65_240)(if exists67_239(car given-args_236)(void)))"
"((given-kws_241)(if exists67_239(cdr given-kws_235) given-kws_235))"
"((given-args_242)(if exists67_239(cdr given-args_236) given-args_236)))"
"(let-values(((mode66_243)(pair? given-kws_241)))"
"(let-values(((mode64_244)(if mode66_243(car given-args_242)(void))))"
"(call-with-output-file*70.1 exists65_240 exists67_239 mode64_244 mode66_243 path68_237 proc69_238)))))))"
"(define-values"
"(set)"
"(case-lambda"
"(() '#hash())"
"(l_71"
"(let-values(((lst_72) l_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(s_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((e_76)(unsafe-car lst_75)))"
"(if #t"
"(let-values(((s_77)"
"(let-values(((s_78) s_74))"
"(let-values(((s_79)(let-values()(hash-set s_78 e_76 #t))))"
"(values s_79)))))"
"(if #t(for-loop_73 s_77(unsafe-cdr lst_75)) s_77))"
" s_74))"
" s_74))))"
" for-loop_73)"
" '#hash()"
" lst_72))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() '#hasheq())"
"(l_80"
"(let-values(((lst_81) l_80))"
"(begin"
"(if(list? lst_81)(void)(let-values()(in-list lst_81)))"
"((letrec-values(((for-loop_82)"
"(lambda(s_83 lst_84)"
"(if(pair? lst_84)"
"(let-values(((e_85)(unsafe-car lst_84)))"
"(if #t"
"(let-values(((s_86)"
"(let-values(((s_87) s_83))"
"(let-values(((s_88)(let-values()(hash-set s_87 e_85 #t))))"
"(values s_88)))))"
"(if #t(for-loop_82 s_86(unsafe-cdr lst_84)) s_86))"
" s_83))"
" s_83))))"
" for-loop_82)"
" '#hasheq()"
" lst_81))))))"
"(define-values(set?)(lambda(s_89)(hash? s_89)))"
"(define-values(set-empty?)(lambda(s_90)(zero?(hash-count s_90))))"
"(define-values(set-member?)(lambda(s_91 e_92)(hash-ref s_91 e_92 #f)))"
"(define-values(set-count)(lambda(s_93)(hash-count s_93)))"
"(define-values(set-add)(lambda(s_94 e_95)(hash-set s_94 e_95 #t)))"
"(define-values(set-remove)(lambda(s_96 e_97)(hash-remove s_96 e_97)))"
"(define-values(set-first)(lambda(s_98)(hash-iterate-key s_98(hash-iterate-first s_98))))"
"(define-values(subset?)(lambda(s1_99 s2_100)(hash-keys-subset? s1_99 s2_100)))"
"(define-values"
"(set=?)"
"(lambda(s1_101 s2_102)(if(=(hash-count s1_101)(hash-count s2_102))(hash-keys-subset? s1_101 s2_102) #f)))"
"(define-values"
"(set-subtract)"
"(lambda(s1_103 s2_104)"
"(let-values(((ht_105) s2_104))"
"(begin"
"(if((lambda(ht_106)(if(hash? ht_106)(immutable? ht_106) #f)) ht_105)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_105)))"
"((letrec-values(((for-loop_107)"
"(lambda(s1_108 i_109)"
"(if i_109"
"(let-values(((k_110)(unsafe-immutable-hash-iterate-key ht_105 i_109)))"
"(if #t"
"(let-values(((s1_111)"
"(let-values(((s1_112) s1_108))"
"(let-values(((s1_113)(let-values()(hash-remove s1_112 k_110))))"
"(values s1_113)))))"
"(if #t"
"(for-loop_107 s1_111(unsafe-immutable-hash-iterate-next ht_105 i_109))"
" s1_111))"
" s1_108))"
" s1_108))))"
" for-loop_107)"
" s1_103"
"(unsafe-immutable-hash-iterate-first ht_105))))))"
"(define-values"
"(set-union)"
"(lambda(s1_114 s2_115)"
"(if(<(set-count s1_114)(set-count s2_115))"
"(set-union s2_115 s1_114)"
"(let-values(((ht_116) s2_115))"
"(begin"
"(if((lambda(ht_117)(if(hash? ht_117)(immutable? ht_117) #f)) ht_116)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_116)))"
"((letrec-values(((for-loop_118)"
"(lambda(s1_119 i_120)"
"(if i_120"
"(let-values(((k_121)(unsafe-immutable-hash-iterate-key ht_116 i_120)))"
"(if #t"
"(let-values(((s1_122)"
"(let-values(((s1_123) s1_119))"
"(let-values(((s1_124)(let-values()(hash-set s1_123 k_121 #t))))"
"(values s1_124)))))"
"(if #t"
"(for-loop_118 s1_122(unsafe-immutable-hash-iterate-next ht_116 i_120))"
" s1_122))"
" s1_119))"
" s1_119))))"
" for-loop_118)"
" s1_114"
"(unsafe-immutable-hash-iterate-first ht_116)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_125 pred_126 empty-y-set_127 empty-n-set_128)"
"(let-values(((ht_129) s_125))"
"(begin"
"(if((lambda(ht_130)(if(hash? ht_130)(immutable? ht_130) #f)) ht_129)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_129)))"
"((letrec-values(((for-loop_131)"
"(lambda(y_132 n_133 i_134)"
"(if i_134"
"(let-values(((v_135)(unsafe-immutable-hash-iterate-key ht_129 i_134)))"
"(if #t"
"(let-values(((y_136 n_137)"
"(let-values(((y_138) y_132)((n_139) n_133))"
"(let-values(((y_140 n_141)"
"(let-values()"
"(if(pred_126 v_135)"
"(values(set-add y_138 v_135) n_139)"
"(values y_138(set-add n_139 v_135))))))"
"(values y_140 n_141)))))"
"(if #t"
"(for-loop_131 y_136 n_137(unsafe-immutable-hash-iterate-next ht_129 i_134))"
"(values y_136 n_137)))"
"(values y_132 n_133)))"
"(values y_132 n_133)))))"
" for-loop_131)"
" empty-y-set_127"
" empty-n-set_128"
"(unsafe-immutable-hash-iterate-first ht_129))))))"
"(define-values"
"(set->list)"
"(lambda(s_142)"
"(alt-reverse"
"(let-values(((ht_143) s_142))"
"(begin"
"(if((lambda(ht_144)(if(hash? ht_144)(immutable? ht_144) #f)) ht_143)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_143)))"
"((letrec-values(((for-loop_145)"
"(lambda(fold-var_146 i_147)"
"(if i_147"
"(let-values(((k_148)(unsafe-immutable-hash-iterate-key ht_143 i_147)))"
"(if #t"
"(let-values(((fold-var_149)"
"(let-values(((fold-var_150) fold-var_146))"
"(let-values(((fold-var_151)"
"(let-values()"
"(cons(let-values() k_148) fold-var_150))))"
"(values fold-var_151)))))"
"(if #t"
"(for-loop_145 fold-var_149(unsafe-immutable-hash-iterate-next ht_143 i_147))"
" fold-var_149))"
" fold-var_146))"
" fold-var_146))))"
" for-loop_145)"
" null"
"(unsafe-immutable-hash-iterate-first ht_143)))))))"
"(define-values"
"(list->set)"
"(lambda(l_152)"
"(let-values(((lst_153) l_152))"
"(begin"
"(if(list? lst_153)(void)(let-values()(in-list lst_153)))"
"((letrec-values(((for-loop_154)"
"(lambda(table_155 lst_156)"
"(if(pair? lst_156)"
"(let-values(((k_157)(unsafe-car lst_156)))"
"(if #t"
"(let-values(((table_158)"
"(let-values(((table_159) table_155))"
"(let-values(((table_160)"
"(let-values()"
"(let-values(((key_161 val_162)"
"(let-values()"
"(values(let-values() k_157) #t))))"
"(hash-set table_159 key_161 val_162)))))"
"(values table_160)))))"
"(if #t(for-loop_154 table_158(unsafe-cdr lst_156)) table_158))"
" table_155))"
" table_155))))"
" for-loop_154)"
" '#hash()"
" lst_153)))))"
"(define-values"
"(list->seteq)"
"(lambda(l_163)"
"(let-values(((lst_164) l_163))"
"(begin"
"(if(list? lst_164)(void)(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(table_166 lst_167)"
"(if(pair? lst_167)"
"(let-values(((k_168)(unsafe-car lst_167)))"
"(if #t"
"(let-values(((table_169)"
"(let-values(((table_170) table_166))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((key_172 val_173)"
"(let-values()"
"(values(let-values() k_168) #t))))"
"(hash-set table_170 key_172 val_173)))))"
"(values table_171)))))"
"(if #t(for-loop_165 table_169(unsafe-cdr lst_167)) table_169))"
" table_166))"
" table_166))))"
" for-loop_165)"
" '#hasheq()"
" lst_164)))))"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
"        (if (let-values (((or-part_9) (equal? (cadr v_8) \"..\")))"
"(if or-part_9"
" or-part_9"
"                (let-values (((or-part_10) (equal? (cadr v_8) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14)))"
"(if #t"
"(let-values(((result_16)"
"(let-values(((result_17) result_13))"
"(let-values(((result_18)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_19)"
"                                                                                        (equal? e_15 \"..\")))"
"(if or-part_19"
" or-part_19"
"(symbol? e_15)))))))"
"(values result_18)))))"
"(if(if #t(not((lambda x_20(not result_16)) e_15)) #f)"
"(for-loop_12 result_16(unsafe-cdr lst_14))"
" result_16))"
" result_13))"
" result_13))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_21)"
"(let-values(((...arse-module-path.rkt:44:2_22) module-path-string?12.1)"
"((v13_23) v_21)"
"((temp14_24) #t)"
"((temp15_25) #t)"
"((temp16_26) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 temp14_24 #t temp16_26 #t #f #f temp15_25 #t v13_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:44:2_22"
" keyword-procedure-extract"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
"(list temp14_24 temp16_26 temp15_25)"
" v13_23)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_27)"
"(let-values(((temp17_28)(symbol->string v_27)))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_28)"
"(module-path-string?12.1 temp17_28)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_29)"
"(if(list? v_29)"
"(if(pair?(cdr v_29))"
"((letrec-values(((loop_30)"
"(lambda(v_31 first?_32)"
"(let-values(((or-part_33)(null? v_31)))"
"(if or-part_33"
" or-part_33"
"(if(string?(car v_31))"
"(if(let-values(((...arse-module-path.rkt:55:18_34) module-path-string?12.1)"
"((temp18_35)(car v_31))"
"((first?19_36) first?_32)"
"((first?20_37) first?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f first?20_37 #t #f #f first?19_36 #t temp18_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:55:18_34"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list first?20_37 first?19_36)"
" temp18_35)))"
"(loop_30(cdr v_31) #f)"
" #f)"
" #f))))))"
" loop_30)"
"(cdr v_29)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_39)(length v_38)))"
"(if(equal? tmp_39 1)"
"(let-values() #f)"
"(if(equal? tmp_39 2)"
"(let-values()"
"(let-values(((e_40)(cadr v_38)))"
"(if(string? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:68:12_41) module-path-string?12.1)"
"((e21_42) e_40)"
"((temp22_43) #t)"
"((temp23_44) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp23_44 #t temp22_43 #t #f #f e21_42)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:68:12_41"
" keyword-procedure-extract"
" '(#:file-end-ok? #:for-planet?)"
" 3)"
" '(#:file-end-ok? #:for-planet?)"
"(list temp23_44 temp22_43)"
" e21_42))))"
"(if(symbol? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:72:12_45) module-path-string?12.1)"
"((temp24_46)(symbol->string e_40))"
"((temp25_47) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f temp25_47 #t #f #f temp24_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:72:12_45"
" keyword-procedure-extract"
" '(#:for-planet?)"
" 3)"
" '(#:for-planet?)"
"(list temp25_47)"
" temp24_46))))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_48)(cadr v_38)))"
"(let-values(((pkg_49)(caddr v_38)))"
"(let-values(((subs_50)(cdddr v_38)))"
"(if file_48"
"(if(let-values(((...arse-module-path.rkt:80:15_51) module-path-string?12.1)"
"((file26_52) file_48)"
"((temp27_53) #t)"
"((temp28_54) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp28_54 #t #f #f temp27_53 #t file26_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:80:15_51"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list temp28_54 temp27_53)"
" file26_52)))"
"(if(if(list? pkg_49)"
"(if(<= 2(length pkg_49) 4)"
"(if(planet-user/pkg-string?(car pkg_49))"
"(if(planet-user/pkg-string?(cadr pkg_49))"
"(let-values(((or-part_55)(null?(cddr pkg_49))))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(planet-version-number?(caddr pkg_49))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(null?(cddr pkg_49))))"
"(if or-part_57"
" or-part_57"
"(planet-version-minor-spec?(cadddr pkg_49))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_58) subs_50))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((sub_62)(unsafe-car lst_61)))"
"(if #t"
"(let-values(((result_63)"
"(let-values(((result_64) result_60))"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_66)"
" sub_62))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path-string?12.1))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_66)"
"(module-path-string?12.1"
" sub29_66)))))))"
"(values result_65)))))"
"(if(if #t(not((lambda x_67(not result_63)) sub_62)) #f)"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63))"
" result_60))"
" result_60))))"
" for-loop_59)"
" #t"
" lst_58)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_68)(exact-nonnegative-integer? v_68)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_69)"
"(let-values(((or-part_70)(planet-version-number? v_69)))"
"(if or-part_70"
" or-part_70"
"(if(pair? v_69)"
"(if(list? v_69)"
"(if(= 2(length v_69))"
"(let-values(((tmp_71)(car v_69)))"
"(if(if(equal? tmp_71 '=) #t(if(equal? tmp_71 '+) #t(equal? tmp_71 '-)))"
"(let-values()(planet-version-number?(cadr v_69)))"
"(let-values()(if(planet-version-number?(car v_69))(planet-version-number?(cadr v_69)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_72"
" dots-dir-ok?6_73"
" file-end-ok?4_74"
" file-end-ok?8_75"
" for-planet?1_76"
" for-planet?5_77"
" just-file-ok?3_78"
" just-file-ok?7_79"
" v9_80)"
"(let-values(((v_81) v9_80))"
"(let-values(((for-planet?_82)(if for-planet?5_77 for-planet?1_76 #f)))"
"(let-values(((dots-dir-ok?_83)(if dots-dir-ok?6_73 dots-dir-ok?2_72 #f)))"
"(let-values(((just-file-ok?_84)(if just-file-ok?7_79 just-file-ok?3_78 #f)))"
"(let-values(((file-end-ok?_85)(if file-end-ok?8_75 file-end-ok?4_74 #f)))"
"(let-values()"
"(let-values(((len_86)(string-length v_81)))"
"(if(positive? len_86)"
"(if(not(char=? '#\\/(string-ref v_81 0)))"
"(if(not(char=? '#\\/(string-ref v_81(sub1 len_86))))"
"(let-values(((start-package-version-pos_87 end-package-version-pos_88)"
"(if for-planet?_82(check-planet-part v_81 len_86)(values 0 0))))"
"(if start-package-version-pos_87"
"((letrec-values(((loop_89)"
"(lambda(i_90 prev-was-slash?_91 saw-slash?_92 saw-dot?_93)"
"(if(not(zero? i_90))"
"(let-values()"
"(let-values(((c_94)(string-ref v_81 i_90)))"
"(if(char=? c_94 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_91)"
"(loop_89(sub1 i_90) #t #t saw-dot?_93)"
" #f))"
"(if(char=? c_94 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_90) len_86)"
"(if(not(char=?(string-ref v_81(add1 i_90)) '#\\/))"
"(not(char=?(string-ref v_81(add1 i_90)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_92)"
"(loop_89(sub1 i_90) #f saw-slash?_92 #t)"
" #f)"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93)))"
"(if(let-values(((or-part_95)(plain-char? c_94)))"
"(if or-part_95"
" or-part_95"
"(if(char=? c_94 '#\\%)"
"(if(<(+ i_90 2) len_86)"
"(hex-sequence? v_81(add1 i_90))"
" #f)"
" #f)))"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(if(if(>= i_90 start-package-version-pos_87)"
"(< i_90 end-package-version-pos_88)"
" #f)"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_84)"
"(if saw-dot?_93(not saw-slash?_92) #f)"
" #f))"
"(let-values(((or-part_96) dots-dir-ok?_83))"
"(if or-part_96"
" or-part_96"
"((letrec-values(((loop_97)"
"(lambda(i_98)"
"(if(= i_98 len_86)"
"(let-values() #t)"
"(if(char=?(string-ref v_81 i_98) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_99)"
"(="
" len_86"
"(add1 i_98))))"
"(if or-part_99"
" or-part_99"
"(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\.)"
"(let-values(((or-part_100)"
"(="
" len_86"
"(+"
" i_98"
" 2))))"
"(if or-part_100"
" or-part_100"
"(char=?"
"(string-ref"
" v_81"
"(+ i_98 2))"
" '#\\/)))"
" #f))"
"(loop_97"
"((letrec-values(((loop_101)"
"(lambda(i_102)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_81"
" i_102))"
"(loop_101"
"(add1"
" i_102))"
" i_102))))"
" loop_101)"
" i_98))"
" #f)"
" #f))"
"(let-values()"
"(loop_97(add1 i_98))))))))"
" loop_97)"
" 0)))"
" #f))))))"
" loop_89)"
"(sub1 len_86)"
" #f"
"(not file-end-ok?_85)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(unpack11.1$1)"
"(lambda(given-kws_103 given-args_104 v9_105)"
"(let-values(((dots-dir-ok?6_106)(if(pair? given-kws_103)(eq? '#:dots-dir-ok?(car given-kws_103)) #f)))"
"(let-values(((dots-dir-ok?2_107)(if dots-dir-ok?6_106(car given-args_104)(void)))"
"((given-kws_108)(if dots-dir-ok?6_106(cdr given-kws_103) given-kws_103))"
"((given-args_109)(if dots-dir-ok?6_106(cdr given-args_104) given-args_104)))"
"(let-values(((file-end-ok?8_110)(if(pair? given-kws_108)(eq? '#:file-end-ok?(car given-kws_108)) #f)))"
"(let-values(((file-end-ok?4_111)(if file-end-ok?8_110(car given-args_109)(void)))"
"((given-kws_112)(if file-end-ok?8_110(cdr given-kws_108) given-kws_108))"
"((given-args_113)(if file-end-ok?8_110(cdr given-args_109) given-args_109)))"
"(let-values(((for-planet?5_114)(if(pair? given-kws_112)(eq? '#:for-planet?(car given-kws_112)) #f)))"
"(let-values(((for-planet?1_115)(if for-planet?5_114(car given-args_113)(void)))"
"((given-kws_116)(if for-planet?5_114(cdr given-kws_112) given-kws_112))"
"((given-args_117)(if for-planet?5_114(cdr given-args_113) given-args_113)))"
"(let-values(((just-file-ok?7_118)(pair? given-kws_116)))"
"(let-values(((just-file-ok?3_119)(if just-file-ok?7_118(car given-args_117)(void))))"
"(module-path-string?10.1"
" dots-dir-ok?2_107"
" dots-dir-ok?6_106"
" file-end-ok?4_111"
" file-end-ok?8_110"
" for-planet?1_115"
" for-planet?5_114"
" just-file-ok?3_119"
" just-file-ok?7_118"
" v9_105)))))))))))"
"(define-values"
"(module-path-string?12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_120 given-argc_121)"
"(if(= given-argc_121 3)"
"(let-values(((l1_122) given-kws_120))"
"(let-values(((l1_123)(if(null? l1_122) l1_122(if(eq?(car l1_122) '#:dots-dir-ok?)(cdr l1_122) l1_122))))"
"(let-values(((l1_124) l1_123))"
"(let-values(((l1_125)"
"(if(null? l1_124) l1_124(if(eq?(car l1_124) '#:file-end-ok?)(cdr l1_124) l1_124))))"
"(let-values(((l1_126) l1_125))"
"(let-values(((l1_127)"
"(if(null? l1_126) l1_126(if(eq?(car l1_126) '#:for-planet?)(cdr l1_126) l1_126))))"
"(let-values(((l1_128) l1_127))"
"(let-values(((l1_129)"
"(if(null? l1_128)"
" l1_128"
"(if(eq?(car l1_128) '#:just-file-ok?)(cdr l1_128) l1_128))))"
"(null? l1_129)))))))))"
" #f))"
"(case-lambda((given-kws_130 given-args_131 v_132)(unpack11.1$1 given-kws_130 given-args_131 v_132)))"
" null"
" '(#:dots-dir-ok? #:file-end-ok? #:for-planet? #:just-file-ok?)"
"(let-values(((module-path-string?_133)(case-lambda((v_134)(unpack11.1$1 null null v_134)))))"
" module-path-string?_133)))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_135)"
"(if(string? v_135)"
"(let-values(((len_136)(string-length v_135)))"
"(if(positive? len_136)"
"(let-values(((vec_137 len_138)"
"(let-values(((vec_140) v_135))"
"(begin"
"(if(string? vec_140)(void)(let-values()(in-string vec_140)))"
"(values vec_140(string-length vec_140)))))"
"((start_139) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_139)(void)(let-values()(in-naturals start_139)))"
"((letrec-values(((for-loop_141)"
"(lambda(result_142 pos_143 pos_144)"
"(if(if(unsafe-fx< pos_143 len_138) #t #f)"
"(let-values(((c_145)(string-ref vec_137 pos_143))((i_146) pos_144))"
"(if(if #t #t #f)"
"(let-values(((result_147)"
"(let-values(((result_148) result_142))"
"(let-values(((result_149)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_150)"
"(plain-char? c_145)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)"
"(char=? '#\\. c_145)))"
"(if or-part_151"
" or-part_151"
"(if(char=? '#\\% c_145)"
"(if(< i_146(- len_136 2))"
"(hex-sequence? v_135(add1 i_146))"
" #f)"
" #f)))))))))"
"(values result_149)))))"
"(if(if(if #t(not((lambda x_152(not result_147)) c_145)) #f)"
"(if #t(not((lambda x_153(not result_147)) i_146)) #f)"
" #f)"
"(for-loop_141 result_147(unsafe-fx+ 1 pos_143)(+ pos_144 1))"
" result_147))"
" result_142))"
" result_142))))"
" for-loop_141)"
" #t"
" 0"
" start_139)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_154)"
"(let-values(((or-part_155)(char<=? '#\\a c_154 '#\\z)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char<=? '#\\A c_154 '#\\Z)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char<=? '#\\0 c_154 '#\\9)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char=? '#\\- c_154)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char=? '#\\_ c_154)))"
"(if or-part_159 or-part_159(char=? '#\\+ c_154)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_160 i_161)"
"(let-values(((c1_162)(string-ref s_160 i_161)))"
"(let-values(((c2_163)(string-ref s_160(add1 i_161))))"
"(if(hex-char? c1_162)"
"(if(hex-char? c2_163)"
"(let-values(((c_164)(integer->char(+(*(hex-char->integer c1_162) 16)(hex-char->integer c2_163)))))"
"(not(plain-char? c_164)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_165)"
"(let-values(((or-part_166)(char<=? '#\\a c_165 '#\\f)))(if or-part_166 or-part_166(char<=? '#\\0 c_165 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_167)"
"(if(char<=? '#\\a c_167 '#\\f)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_167 '#\\F)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_167)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_168 len_169)"
"(let-values(((start-package-version-pos_170 end-package-version-pos_171 colon1-pos_172 colon2-pos_173)"
"((letrec-values(((loop_174)"
"(lambda(j_175"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179)"
"(if(= j_175 len_169)"
"(let-values()"
"(values"
" start-package-version-pos_176"
"(let-values(((or-part_180) end-package-version-pos_177))"
"(if or-part_180 or-part_180 j_175))"
" colon1-pos_178"
" colon2-pos_179))"
"(let-values()"
"(let-values(((tmp_181)(string-ref v_168 j_175)))"
"(if(equal? tmp_181 '#\\/)"
"(let-values()"
"(loop_174"
"(add1 j_175)"
"(let-values(((or-part_182) start-package-version-pos_176))"
"(if or-part_182 or-part_182(add1 j_175)))"
"(if start-package-version-pos_176"
"(let-values(((or-part_183) end-package-version-pos_177))"
"(if or-part_183 or-part_183 j_175))"
" #f)"
" colon1-pos_178"
" colon2-pos_179))"
"(if(equal? tmp_181 '#\\:)"
"(let-values()"
"(if colon2-pos_179"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_178"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" j_175))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" j_175"
" #f)))))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179))))))))))"
" loop_174)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_170"
"(if(> end-package-version-pos_171 start-package-version-pos_170)"
"(let-values(((or-part_184)(not colon2-pos_173)))"
"(if or-part_184 or-part_184(<(add1 colon2-pos_173) end-package-version-pos_171)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_172"
"(let-values()"
"(let-values(((colon1-end_185)"
"(let-values(((or-part_186) colon2-pos_173))"
"(if or-part_186 or-part_186 end-package-version-pos_171))))"
"(if(if(integer-sequence? v_168(add1 colon1-pos_172) colon1-end_185)"
"(let-values(((or-part_187)(not colon2-pos_173)))"
"(if or-part_187"
" or-part_187"
"(let-values(((tmp_188)(string-ref v_168(add1 colon2-pos_173))))"
"(if(equal? tmp_188 '#\\=)"
"(let-values()(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))"
"(if(if(equal? tmp_188 '#\\>) #t(equal? tmp_188 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_173) end-package-version-pos_171)"
"(char=? '#\\=(string-ref v_168(+ colon2-pos_173 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_168(+ 3 colon2-pos_173) end-package-version-pos_171))"
"(let-values()"
"(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))))"
"(let-values()"
"(integer-range-sequence?"
" v_168"
"(add1 colon2-pos_173)"
" end-package-version-pos_171)))))))"
" #f)"
"(let-values()(values colon1-pos_172 end-package-version-pos_171))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_189 start_190 end_191)"
"(if(< start_190 end_191)"
"(let-values(((start_192) start_190)((end_193) end_191)((inc_194) 1))"
"(begin"
"(if(if(real? start_192)(if(real? end_193)(real? inc_194) #f) #f)"
"(void)"
"(let-values()(in-range start_192 end_193 inc_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(result_196 pos_197)"
"(if(< pos_197 end_193)"
"(let-values(((i_198) pos_197))"
"(if #t"
"(let-values(((result_199)"
"(let-values(((result_200) result_196))"
"(let-values(((result_201)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_189 i_198) '#\\9)))))"
"(values result_201)))))"
"(if(if #t(not((lambda x_202(not result_199)) i_198)) #f)"
"(for-loop_195 result_199(+ pos_197 inc_194))"
" result_199))"
" result_196))"
" result_196))))"
" for-loop_195)"
" #t"
" start_192)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_203 start_204 end_205)"
"(if(< start_204 end_205)"
"(if(let-values(((start_206) start_204)((end_207) end_205)((inc_208) 1))"
"(begin"
"(if(if(real? start_206)(if(real? end_207)(real? inc_208) #f) #f)"
"(void)"
"(let-values()(in-range start_206 end_207 inc_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(result_210 pos_211)"
"(if(< pos_211 end_207)"
"(let-values(((i_212) pos_211))"
"(if #t"
"(let-values(((result_213)"
"(let-values(((result_214) result_210))"
"(let-values(((result_215)"
"(let-values()"
"(let-values()"
"(let-values(((c_216)"
"(string-ref s_203 i_212)))"
"(let-values(((or-part_217)"
"(char=? c_216 '#\\-)))"
"(if or-part_217"
" or-part_217"
"(char<=? '#\\0 c_216 '#\\9))))))))"
"(values result_215)))))"
"(if(if #t(not((lambda x_218(not result_213)) i_212)) #f)"
"(for-loop_209 result_213(+ pos_211 inc_208))"
" result_213))"
" result_210))"
" result_210))))"
" for-loop_209)"
" #t"
" start_206)))"
"(>="
" 1"
"(let-values(((start_219) start_204)((end_220) end_205)((inc_221) 1))"
"(begin"
"(if(if(real? start_219)(if(real? end_220)(real? inc_221) #f) #f)"
"(void)"
"(let-values()(in-range start_219 end_220 inc_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_223 pos_224)"
"(if(< pos_224 end_220)"
"(let-values(((i_225) pos_224))"
"(if #t"
"(let-values(((result_226)"
"(let-values(((result_227) result_223))"
"(let-values(((result_228)"
"(let-values()"
"(+"
" result_227"
"(let-values()"
"(if(char=?(string-ref s_203 i_225) '#\\-)"
" 1"
" 0))))))"
"(values result_228)))))"
"(if #t(for-loop_222 result_226(+ pos_224 inc_221)) result_226))"
" result_223))"
" result_223))))"
" for-loop_222)"
" 0"
" start_219))))"
" #f)"
" #f)))"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_22 ser_23 state_24)"
"(list 'deserialize-resolved-module-path(ser_23(1/resolved-module-path-name r_22)))))"
"(cons"
" prop:custom-write"
"(lambda(r_25 port_26 mode_27)"
"(begin"
"                       (if mode_27 (let-values () (write-string \"#<resolved-module-path:\" port_26)) (void))"
"                       (fprintf port_26 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_25)))"
"                       (if mode_27 (let-values () (write-string \">\" port_26)) (void))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_29)"
"(if(path? p_29)"
"      (let-values () (string-append \"\\\"\" (path->string p_29) \"\\\"\"))"
"(if(symbol? p_29)"
"        (let-values () (format \"'~s\" p_29))"
"(let-values()"
"(format"
"           \"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_29))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_30 pos-next_31 init_32 pos-cont?_33 val-cont?_34 all-cont?_35)"
"(make-sequence '(i)(cdr p_29))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_36)"
"(lambda(fold-var_37 pos_38)"
"(if(if pos-cont?_33(pos-cont?_33 pos_38) #t)"
"(let-values(((i_39)(pos->vals_30 pos_38)))"
"(if(if val-cont?_34(val-cont?_34 i_39) #t)"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_37))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
"                                                                            (let-values () (format \" ~s\" i_39))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(if(if all-cont?_35(all-cont?_35 pos_38 i_39) #t)"
"(for-loop_36 fold-var_40(pos-next_31 pos_38))"
" fold-var_40))"
" fold-var_37))"
" fold-var_37))))"
" for-loop_36)"
" null"
" init_32)))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_43)"
"(let-values(((name_44)(1/resolved-module-path-name r_43)))(if(pair? name_44)(car name_44) name_44))))"
"(define-values(resolved-module-paths)(make-weak-hash))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_45)"
"(begin"
"(if(let-values(((or-part_46)(symbol? p_45)))"
"(if or-part_46"
" or-part_46"
"(let-values(((or-part_47)(if(path? p_45)(complete-path? p_45) #f)))"
"(if or-part_47"
" or-part_47"
"(if(pair? p_45)"
"(if(pair?(cdr p_45))"
"(if(list? p_45)"
"(if(let-values(((or-part_48)(symbol?(car p_45))))"
"(if or-part_48 or-part_48(if(path?(car p_45))(complete-path?(car p_45)) #f)))"
"(let-values(((lst_49)(cdr p_45)))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(result_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((s_53)(unsafe-car lst_52)))"
"(if #t"
"(let-values(((result_54)"
"(let-values(((result_55) result_51))"
"(let-values(((result_56)"
"(let-values()"
"(let-values()"
"(symbol? s_53)))))"
"(values result_56)))))"
"(if(if #t(not((lambda x_57(not result_54)) s_53)) #f)"
"(for-loop_50 result_54(unsafe-cdr lst_52))"
" result_54))"
" result_51))"
" result_51))))"
" for-loop_50)"
" #t"
" lst_49)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_45)))"
"(let-values(((or-part_58)"
"(let-values(((e_59)(hash-ref resolved-module-paths p_45 #f)))"
"(if e_59(ephemeron-value e_59) #f))))"
"(if or-part_58"
" or-part_58"
"(let-values(((r_60)(resolved-module-path1.1 p_45)))"
"(begin(hash-set! resolved-module-paths p_45(make-ephemeron p_45 r_60)) r_60)))))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_61)"
"(let-values(((name_62)(1/resolved-module-path-name r_61)))"
"(let-values(((root-name_63)(if(pair? name_62)(car name_62) name_62)))"
"(let-values(((root-mod-path_64)(if(path? root-name_63) root-name_63(list 'quote root-name_63))))"
"(if(pair? name_62)(list* 'submod root-mod-path_64(cdr name_62)) root-mod-path_64))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_65 make-_66 ?_67 -ref_68 -set!_69)"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_101 port_102 mode_103)"
"(begin"
"                       (write-string \"#<module-path-index\" port_102)"
"(if(top-level-module-path-index? r_101)"
"                         (let-values () (fprintf port_102 \":top-level\"))"
"(if(module-path-index-path r_101)"
"(let-values()"
"(let-values(((l_104)"
"((letrec-values(((loop_105)"
"(lambda(r_106)"
"(if(not r_106)"
"(let-values() null)"
"(if(module-path-index-path r_106)"
"(let-values()"
"(cons"
"                                                                      (format \"~.s\" (module-path-index-path r_106))"
"(loop_105(module-path-index-base r_106))))"
"(if(module-path-index-resolved r_106)"
"(let-values()"
"(list"
"                                                                        \"+\""
"(format"
"                                                                         \"~a\""
"(module-path-index-resolved r_106))))"
"(let-values() null)))))))"
" loop_105)"
" r_101)))"
"(fprintf"
" port_102"
"                                \":~.a\""
"(apply"
" string-append"
"(car l_104)"
"(alt-reverse"
"(let-values(((lst_107)(cdr l_104)))"
"(begin"
"(if(list? lst_107)(void)(let-values()(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_109 lst_110)"
"(if(pair? lst_110)"
"(let-values(((i_111)(unsafe-car lst_110)))"
"(if #t"
"(let-values(((fold-var_112)"
"(let-values(((fold-var_113)"
" fold-var_109))"
"(let-values(((fold-var_114)"
"(let-values()"
"(cons"
"(let-values()"
"                                                                                                   (format \" ~a\" i_111))"
" fold-var_113))))"
"(values fold-var_114)))))"
"(if #t"
"(for-loop_108 fold-var_112(unsafe-cdr lst_110))"
" fold-var_112))"
" fold-var_109))"
" fold-var_109))))"
" for-loop_108)"
" null"
" lst_107))))))))"
"(if(module-path-index-resolved r_101)"
"                             (let-values () (fprintf port_102 \"=~a\" (module-path-index-resolved r_101)))"
"(void))))"
"                       (write-string \">\" port_102))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_115 b_116 eql?_117)"
"(if(eql?_117(module-path-index-path a_115)(module-path-index-path b_116))"
"(eql?_117(module-path-index-base a_115)(module-path-index-base b_116))"
" #f))"
"(lambda(a_118 hash-code_119)"
"(+(hash-code_119(module-path-index-path a_118))(hash-code_119(module-path-index-base a_118))))"
"(lambda(a_120 hash-code_121)"
"(+"
"(hash-code_121(module-path-index-path a_120))"
"(hash-code_121(module-path-index-base a_120)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))"
"(values"
" struct:_65"
" make-_66"
" ?_67"
"(make-struct-field-accessor -ref_68 0 'path)"
"(make-struct-field-accessor -ref_68 1 'base)"
"(make-struct-field-accessor -ref_68 2 'resolved)"
"(make-struct-field-accessor -ref_68 3 'shift-cache)"
"(make-struct-field-mutator -set!_69 2 'resolved)"
"(make-struct-field-mutator -set!_69 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_122 base_123)(1/module-path-index-join path_122 base_123))"
"((name_124)(make-self-module-path-index(1/make-resolved-module-path name_124)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_125)"
"(lambda(mpi5_126 load?3_127 load?4_128)"
"(let-values(((mpi_129) mpi5_126))"
"(let-values(((load?_130)(if load?4_128 load?3_127 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_129)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_129)))"
"(let-values(((or-part_131)(module-path-index-resolved mpi_129)))"
"(if or-part_131"
" or-part_131"
"(let-values(((mod-name_132)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_129)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_129)"
" load?_130)"
" #f"
" load?_130)))"
"(begin"
"(if(1/resolved-module-path? mod-name_132)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_132)))"
"(set-module-path-index-resolved! mpi_129 mod-name_132)"
" mod-name_132)))))))))))"
"(case-lambda"
"((mpi_133)(module-path-index-resolve6_125 mpi_133 #f #f))"
"((mpi_134 load?3_135)(module-path-index-resolve6_125 mpi_134 load?3_135 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_136)"
"(if(module-path-index-resolved mpi_136)"
"(let-values()"
"(let-values(((path_137 base_138)(1/module-path-index-split mpi_136)))"
"(1/module-path-index-join path_137 base_138)))"
"(let-values() mpi_136))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_139)"
"(lambda(mod-path10_140 base11_141 submod8_142 submod9_143)"
"(let-values(((mod-path_144) mod-path10_140))"
"(let-values(((base_145) base11_141))"
"(let-values(((submod_146)(if submod9_143 submod8_142 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_147)(not mod-path_144)))"
"(if or-part_147 or-part_147(1/module-path? mod-path_144)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_144)))"
"(if(let-values(((or-part_148)(not base_145)))"
"(if or-part_148"
" or-part_148"
"(let-values(((or-part_149)(1/resolved-module-path? base_145)))"
"(if or-part_149 or-part_149(1/module-path-index? base_145)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_145)))"
"(if(let-values(((or-part_150)(not submod_146)))"
"(if or-part_150"
" or-part_150"
"(if(pair? submod_146)(if(list? submod_146)(andmap2 symbol? submod_146) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_146)))"
"(if(if(not mod-path_144) base_145 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_145))"
"(void))"
"(if(if submod_146 mod-path_144 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_144"
"                                 \"given submodule list\""
" submod_146))"
"(void))"
"(if submod_146"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_146))))"
"(let-values()"
"(let-values(((keep-base_151)"
"(if(path? mod-path_144)"
"(let-values() #f)"
"(if(if(pair? mod-path_144)(eq? 'quote(car mod-path_144)) #f)"
"(let-values() #f)"
"(if(symbol? mod-path_144)"
"(let-values() #f)"
"(let-values() base_145))))))"
"(module-path-index2.1 mod-path_144 keep-base_151 #f #f))))))))))))"
"(case-lambda"
"((mod-path_152 base_153)(module-path-index-join12_139 mod-path_152 base_153 #f #f))"
"((mod-path_154 base_155 submod8_156)(module-path-index-join12_139 mod-path_154 base_155 submod8_156 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_157 load?_158)"
"(if(1/module-path-index? base_157)(1/module-path-index-resolve base_157 load?_158) base_157)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_159)"
"(begin"
"(if(1/module-path-index? mpi_159)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_159)))"
"(values(module-path-index-path mpi_159)(module-path-index-base mpi_159)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_160)"
"(begin"
"(if(1/module-path-index? mpi_160)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_160)))"
"(if(not(module-path-index-path mpi_160))"
"(let-values(((r_161)(module-path-index-resolved mpi_160)))"
"(if r_161(let-values(((p_162)(1/resolved-module-path-name r_161)))(if(pair? p_162)(cdr p_162) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_163)(module-path-index2.1 #f #f name_163 #f))"
"((name_164 enclosing_165)"
"(make-self-module-path-index"
"(let-values(((name23_166) name_164)"
"((temp24_167)(if enclosing_165(1/module-path-index-resolve enclosing_165) #f)))"
"(if(variable-reference-constant?(#%variable-reference build-module-name20.1))"
"(build-module-name18.1 #f #f name23_166 temp24_167)"
"(build-module-name20.1 name23_166 temp24_167)))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_168)"
"(let-values(((r_169)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_168))))"
"(let-values(((or-part_170)"
"(let-values(((e_171)(hash-ref generic-self-mpis r_169 #f)))"
"(if e_171(ephemeron-value e_171) #f))))"
"(if or-part_170"
" or-part_170"
"(let-values(((mpi_172)(module-path-index2.1 #f #f r_169 #f)))"
"(begin(hash-set! generic-self-mpis r_169(make-ephemeron r_169 mpi_172)) mpi_172)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_173)"
"(let-values(((name_174)(1/resolved-module-path-name r_173)))"
"(1/make-resolved-module-path"
"(if(symbol? name_174) generic-module-name(cons generic-module-name(cdr name_174)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_175)"
"(let-values(((r_176)(module-path-index-resolved mpi_175)))"
"(if r_176"
"(let-values()"
"(set-module-path-index-resolved! mpi_175(resolved-module-path-to-generic-resolved-module-path r_176)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_177 from-mpi_178 to-mpi_179)"
"(if(eq? mpi_177 from-mpi_178)"
"(let-values() to-mpi_179)"
"(let-values()"
"(let-values(((base_180)(module-path-index-base mpi_177)))"
"(if(not base_180)"
"(let-values() mpi_177)"
"(let-values()"
"(let-values(((shifted-base_181)(module-path-index-shift base_180 from-mpi_178 to-mpi_179)))"
"(if(eq? shifted-base_181 base_180)"
"(let-values() mpi_177)"
"(let-values(((c62795_182)"
"(shift-cache-ref(module-path-index-shift-cache shifted-base_181) mpi_177)))"
"(if c62795_182"
" c62795_182"
"(let-values()"
"(let-values(((shifted-mpi_183)"
"(module-path-index2.1(module-path-index-path mpi_177) shifted-base_181 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_181) mpi_177 shifted-mpi_183)"
" shifted-mpi_183))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_184)"
"(let-values(((or-part_185)(module-path-index-shift-cache mpi_184)))"
"(if or-part_185"
" or-part_185"
"(let-values(((cache_186)(make-weak-hasheq)))"
"(begin(set-module-path-index-shift-cache! mpi_184 cache_186) cache_186))))))"
"(define-values(shift-cache-ref)(lambda(cache_187 v_188)(if cache_187(hash-ref cache_187 v_188 #f) #f)))"
"(define-values(shift-cache-set!)(lambda(cache_189 v_190 r_191)(hash-set! cache_189 v_190 r_191)))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_192)(eq? top-level-module-path-index mpi_192)))"
"(define-values"
"(resolve-module-path)"
"(lambda(mod-path_193 base_194)((1/current-module-name-resolver) mod-path_193 base_194 #f #t)))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
"(case-lambda"
"((name_195 from-namespace_196)(void))"
"((p_197 enclosing_198 source-stx-stx_199 load?_200)"
"(begin"
"(if(1/module-path? p_197)"
"(void)"
"         (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_197)))"
"(if(let-values(((or-part_201)(not enclosing_198)))"
"(if or-part_201 or-part_201(1/resolved-module-path? enclosing_198)))"
"(void)"
"         (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_198)))"
"(if(if(list? p_197)(if(=(length p_197) 2)(if(eq? 'quote(car p_197))(symbol?(cadr p_197)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_197)))"
"         (if (if (list? p_197) (if (eq? 'submod (car p_197)) (equal? \"..\" (cadr p_197)) #f) #f)"
"(let-values()"
"(let-values(((lst_202)(cdr p_197)))"
"(begin"
"(if(list? lst_202)(void)(let-values()(in-list lst_202)))"
"((letrec-values(((for-loop_203)"
"(lambda(enclosing_204 lst_205)"
"(if(pair? lst_205)"
"(let-values(((s_206)(unsafe-car lst_205)))"
"(if #t"
"(let-values(((enclosing_207)"
"(let-values(((enclosing_208) enclosing_204))"
"(let-values(((enclosing_209)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:345:10_210)"
" build-module-name20.1)"
"((s25_211) s_206)"
"((enclosing26_212)"
" enclosing_208)"
"((p27_213) p_197))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p27_213"
" #t"
" s25_211"
" enclosing26_212)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:345:10_210"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p27_213)"
" s25_211"
" enclosing26_212))))))"
"(values enclosing_209)))))"
"(if #t(for-loop_203 enclosing_207(unsafe-cdr lst_205)) enclosing_207))"
" enclosing_204))"
" enclosing_204))))"
" for-loop_203)"
" enclosing_198"
" lst_202))))"
"           (if (if (list? p_197) (if (eq? 'submod (car p_197)) (equal? \".\" (cadr p_197)) #f) #f)"
"(let-values()"
"(let-values(((lst_214)(cddr p_197)))"
"(begin"
"(if(list? lst_214)(void)(let-values()(in-list lst_214)))"
"((letrec-values(((for-loop_215)"
"(lambda(enclosing_216 lst_217)"
"(if(pair? lst_217)"
"(let-values(((s_218)(unsafe-car lst_217)))"
"(if #t"
"(let-values(((enclosing_219)"
"(let-values(((enclosing_220) enclosing_216))"
"(let-values(((enclosing_221)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:350:10_222)"
" build-module-name20.1)"
"((s28_223) s_218)"
"((enclosing29_224)"
" enclosing_220)"
"((p30_225) p_197))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p30_225"
" #t"
" s28_223"
" enclosing29_224)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:350:10_222"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p30_225)"
" s28_223"
" enclosing29_224))))))"
"(values enclosing_221)))))"
"(if #t(for-loop_215 enclosing_219(unsafe-cdr lst_217)) enclosing_219))"
" enclosing_216))"
" enclosing_216))))"
" for-loop_215)"
" enclosing_198"
" lst_214))))"
"(if(if(list? p_197)(eq? 'submod(car p_197)) #f)"
"(let-values()"
"(let-values(((base_226)((1/current-module-name-resolver)(cadr p_197) enclosing_198 #f #f)))"
"(let-values(((lst_227)(cddr p_197)))"
"(begin"
"(if(list? lst_227)(void)(let-values()(in-list lst_227)))"
"((letrec-values(((for-loop_228)"
"(lambda(enclosing_229 lst_230)"
"(if(pair? lst_230)"
"(let-values(((s_231)(unsafe-car lst_230)))"
"(if #t"
"(let-values(((enclosing_232)"
"(let-values(((enclosing_233) enclosing_229))"
"(let-values(((enclosing_234)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:355:12_235)"
" build-module-name20.1)"
"((s31_236) s_231)"
"((enclosing32_237)"
" enclosing_233)"
"((p33_238) p_197))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p33_238"
" #t"
" s31_236"
" enclosing32_237)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:355:12_235"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p33_238)"
" s31_236"
" enclosing32_237))))))"
"(values enclosing_234)))))"
"(if #t"
"(for-loop_228 enclosing_232(unsafe-cdr lst_230))"
" enclosing_232))"
" enclosing_229))"
" enclosing_229))))"
" for-loop_228)"
" base_226"
" lst_227)))))"
"               (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_197)))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_239 original15_240 name16_241 enclosing17_242)"
"(let-values(((name_243) name16_241))"
"(let-values(((enclosing_244) enclosing17_242))"
"(let-values(((orig-name_245)(if original15_240 original14_239 name_243)))"
"(let-values()"
"(let-values(((enclosing-module-name_246)"
"(if enclosing_244(1/resolved-module-path-name enclosing_244) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_246)"
"(let-values() name_243)"
"(if(symbol? enclosing-module-name_246)"
"(let-values()(list enclosing-module-name_246 name_243))"
"                   (if (equal? name_243 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_246)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_245))"
"(if(= 2(length enclosing-module-name_246))"
"(let-values()(car enclosing-module-name_246))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_246)))))))"
"(let-values()(append enclosing-module-name_246(list name_243))))))))))))))"
"(define-values"
"(unpack19.1$1)"
"(lambda(given-kws_247 given-args_248 name16_249 enclosing17_250)"
"(let-values(((original15_251)(pair? given-kws_247)))"
"(let-values(((original14_252)(if original15_251(car given-args_248)(void))))"
"(build-module-name18.1 original14_252 original15_251 name16_249 enclosing17_250)))))"
"(define-values"
"(build-module-name20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_253 given-argc_254)"
"(if(= given-argc_254 4)"
"(let-values(((l1_255) given-kws_253))"
"(let-values(((l1_256)(if(null? l1_255) l1_255(if(eq?(car l1_255) '#:original)(cdr l1_255) l1_255))))"
"(null? l1_256)))"
" #f))"
"(case-lambda"
"((given-kws_257 given-args_258 name_259 enclosing_260)"
"(unpack19.1$1 given-kws_257 given-args_258 name_259 enclosing_260)))"
" null"
" '(#:original)"
"(let-values(((build-module-name_261)"
"(case-lambda((name_262 enclosing_263)(unpack19.1$1 null null name_262 enclosing_263)))))"
" build-module-name_261)))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_264)"
"(begin"
"(if(let-values(((or-part_265)(not r_264)))(if or-part_265 or-part_265(1/resolved-module-path? r_264)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_264)))"
" r_264))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_266)"
"(begin"
"(if(let-values(((or-part_267)(not s_266)))"
"(if or-part_267"
" or-part_267"
"(let-values(((or-part_268)(symbol? s_266)))"
"(if or-part_268 or-part_268(if(path? s_266)(complete-path? s_266) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
"            \"(or/c #f symbol? (and/c path? complete-path?))\""
" s_266)))"
" s_266))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_269)"
"(let-values(((current-name_270)(1/current-module-declare-name)))"
"(let-values(((root-name_271)"
"(if current-name_270"
"(resolved-module-path-root-name current-name_270)"
"(if(pair? default-name_269)(car default-name_269) default-name_269))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_269)(cons root-name_271(cdr default-name_269)) root-name_271))))))"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 0)))"
"(begin"
"(unsafe-struct-set! v_102 0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
"                                 (if write?_112 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_115))"
"                                (fprintf port_111 (if write?_112 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
"                                  (fprintf port_111 \"#<promise:!running!~a>\" r_116)"
"                                  (fprintf port_111 \"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c63438_117)(object-name v_114)))"
"(if c63438_117"
"                                    ((lambda (n_118) (fprintf port_111 \"#<promise:~a>\" n_118)) c63438_117)"
"                                    (let-values () (display \"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 0)))"
"(if(null? v_114)"
"                                  (let-values () (fprintf port_111 \"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
"                                      (fprintf port_111 (if write?_112 \"#<promise!~s>\" \"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_111)"
"                                        (let-values (((fmt_119) (if write?_112 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
"                                        (display \")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" #t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 0 'val)"
"(make-struct-field-mutator -set!_130 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_147 make-_148 ?_149 -ref_150 -set!_151)"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))"
"(values struct:_147 make-_148 ?_149)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_163 make-_164 ?_165 -ref_166 -set!_167)"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_184)(raise(reraise-val this_184)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))"
"(values struct:_163 make-_164 ?_165(make-struct-field-accessor -ref_166 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_185 make-_186 ?_187 -ref_188 -set!_189)"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_206 port_207 write?_208)"
"                     (fprintf port_207 (if write?_208 \"#<running:~s>\" \"#<running:~a>\") (running-name this_206))))"
"(cons"
" prop:procedure"
"(lambda(this_209)"
"(let-values(((name_210)(running-name this_209)))"
"(if name_210"
"                         (error 'force \"reentrant promise `~.s'\" name_210)"
"                         (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))"
"(values struct:_185 make-_186 ?_187(make-struct-field-accessor -ref_188 0 'name))))"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_24)((unsafe-struct-ref p_24 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))"
"(values struct:_8 make-_9 ?_10)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_43 make-_44 ?_45 -ref_46 -set!_47)"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))"
"(values struct:_43 make-_44 ?_45(make-struct-field-accessor -ref_46 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo)))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'thunk)"
"(make-struct-field-accessor -ref_67 1 'done-evt)"
"(make-struct-field-accessor -ref_67 2 'done-sema)"
"(make-struct-field-accessor -ref_67 3 'access-sema)"
"(make-struct-field-mutator -set!_68 0 'thunk))))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_132 make-_133 ?_134 -ref_135 -set!_136)"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_148)"
"(let-values(((v_149)(unsafe-struct-ref p_148 0)))"
"(wrap-evt(if(running? v_149)(running-thread-thread v_149) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_150)"
"(let-values(((v_151)(unsafe-struct-ref p_150 0)))"
"(reify-result"
"(if(running-thread? v_151)"
"(let-values(((t_152)(running-thread-thread v_151)))"
"(let-values((()(begin(thread-wait t_152)(values))))"
"(let-values(((v_153)(unsafe-struct-ref p_150 0)))"
"(if(running-thread? v_153)"
"(error"
" 'force"
"                                   \"promise's thread terminated ~a\\n  promise: ~e\""
"                                   \"without result or exception\""
" p_150)"
" v_153))))"
" v_151))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))"
"(values struct:_132 make-_133 ?_134)))"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) #f) #f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) #f) #f)))"
"(define-values"
"(phase<?)"
"(lambda(a_7 b_8)(if(not b_8)(let-values() #f)(if(not a_7)(let-values() #t)(let-values()(< a_7 b_8))))))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'serialize-state"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'serialize-state)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 6 'context-triples)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'interned-props))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_62)"
"(serialize-state1.1"
" reachable-scopes_62"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_63 state_64)"
"(let-values(((or-part_65)(hash-ref(serialize-state-scopes state_64) scs_63 #f)))"
"(if or-part_65 or-part_65(begin(hash-set!(serialize-state-scopes state_64) scs_63 scs_63) scs_63)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_66 state_67)"
"(let-values(((or-part_68)(hash-ref(serialize-state-shifted-multi-scopes state_67) sms_66 #f)))"
"(if or-part_68"
" or-part_68"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_67) sms_66 sms_66) sms_66)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_69 state_70)"
"(if(null? mpi-shifts_69)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_71)(intern-mpi-shifts(cdr mpi-shifts_69) state_70)))"
"(let-values(((tail-table_72)"
"(let-values(((or-part_73)(hash-ref(serialize-state-mpi-shifts state_70) tail_71 #f)))"
"(if or-part_73"
" or-part_73"
"(let-values(((ht_74)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_70) tail_71 ht_74) ht_74))))))"
"(let-values(((or-part_75)(hash-ref tail-table_72(car mpi-shifts_69) #f)))"
"(if or-part_75"
" or-part_75"
"(let-values(((v_76)(cons(car mpi-shifts_69) tail_71)))"
"(begin(hash-set! tail-table_72(car mpi-shifts_69) v_76) v_76))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_77 sms_78 mpi-shifts_79 state_80)"
"(let-values(((scs-ht_81)"
"(let-values(((or-part_83)(hash-ref(serialize-state-context-triples state_80) scs_77 #f)))"
"(if or-part_83"
" or-part_83"
"(let-values(((ht_84)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_80) scs_77 ht_84) ht_84))))))"
"(let-values(((sms-ht_82)"
"(let-values(((or-part_85)(hash-ref scs-ht_81 sms_78 #f)))"
"(if or-part_85"
" or-part_85"
"(let-values(((ht_86)(make-hasheq)))(begin(hash-set! scs-ht_81 sms_78 ht_86) ht_86))))))"
"(let-values(((or-part_87)(hash-ref sms-ht_82 mpi-shifts_79 #f)))"
"(if or-part_87"
" or-part_87"
"(let-values(((vec_88)(vector-immutable scs_77 sms_78 mpi-shifts_79)))"
"(begin(hash-set! sms-ht_82 mpi-shifts_79 vec_88) vec_88))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_89 get-preserved-props_90 state_91)"
"(let-values(((v_92)(hash-ref(serialize-state-props state_91) all-props_89 'no)))"
"(if(eq? v_92 'no)"
"(let-values()"
"(let-values(((preserved-props_93)(get-preserved-props_90)))"
"(let-values(((p_94)"
"(if(zero?(hash-count preserved-props_93))"
"(let-values() #f)"
"(let-values(((c65097_95)"
"(hash-ref(serialize-state-interned-props state_91) preserved-props_93 #f)))"
"(if c65097_95"
"((lambda(p_96) p_96) c65097_95)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_91)"
" preserved-props_93"
" preserved-props_93)"
" preserved-props_93)))))))"
"(begin(hash-set!(serialize-state-props state_91) all-props_89 p_94) p_94))))"
"(let-values() v_92)))))"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8)))))))))))"
"(define-values"
"(datum-map)"
"(let-values(((datum-map5_1)"
"(lambda(s3_2 f4_3 seen1_4 seen2_5)"
"(let-values(((s_6) s3_2))"
"(let-values(((f_7) f4_3))"
"(let-values(((seen_8)(if seen2_5 seen1_4 #f)))"
"(let-values()"
"((letrec-values(((loop_9)"
"(lambda(tail?_10 s_11 prev-depth_12 prev-seen_13)"
"(let-values(((depth_14)(add1 prev-depth_12)))"
"(let-values(((seen_15)"
"(if(if prev-seen_13"
"(if(> depth_14 32)(datum-has-elements? s_11) #f)"
" #f)"
"(let-values()"
"(if(hash-ref prev-seen_13 s_11 #f)"
"(let-values()"
"((hash-ref prev-seen_13 'cycle-fail) s_11))"
"(let-values()(hash-set prev-seen_13 s_11 #t))))"
"(let-values() prev-seen_13))))"
"(if(null? s_11)"
"(let-values()(f_7 tail?_10 s_11))"
"(if(pair? s_11)"
"(let-values()"
"(f_7"
" tail?_10"
"(cons"
"(loop_9 #f(car s_11) depth_14 seen_15)"
"(loop_9 #t(cdr s_11) depth_14 seen_15))))"
"(if(vector? s_11)"
"(let-values()"
"(f_7"
" #f"
"(vector->immutable-vector"
"(let-values(((len_16)(vector-length s_11)))"
"(begin"
"(if(exact-nonnegative-integer? len_16)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                     \"exact-nonnegative-integer?\""
" len_16)))"
"(let-values(((v_17)(make-vector len_16 0)))"
"(begin"
"(if(zero? len_16)"
"(void)"
"(let-values()"
"(let-values(((vec_18 len_19)"
"(let-values(((vec_20) s_11))"
"(begin"
"(if(vector? vec_20)"
"(void)"
"(let-values()"
"(in-vector vec_20)))"
"(values"
" vec_20"
"(unsafe-vector-length"
" vec_20))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_21)"
"(lambda(i_22 pos_23)"
"(if(unsafe-fx<"
" pos_23"
" len_19)"
"(let-values(((e_24)"
"(unsafe-vector-ref"
" vec_18"
" pos_23)))"
"(if #t"
"(let-values(((i_25)"
"(let-values(((i_26)"
" i_22))"
"(let-values(((i_27)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_17"
" i_26"
"(let-values()"
"(loop_9"
" #f"
" e_24"
" depth_14"
" seen_15)))"
"(unsafe-fx+"
" 1"
" i_26)))))"
"(values"
" i_27)))))"
"(if(if #t"
"(not"
"((lambda x_28"
"(unsafe-fx="
" i_25"
" len_16))"
" e_24))"
" #f)"
"(for-loop_21"
" i_25"
"(unsafe-fx+"
" 1"
" pos_23))"
" i_25))"
" i_22))"
" i_22))))"
" for-loop_21)"
" 0"
" 0)))))"
" v_17)))))))"
"(if(box? s_11)"
"(let-values()"
"(f_7"
" #f"
"(box-immutable(loop_9 #f(unbox s_11) depth_14 seen_15))))"
"(let-values(((c66152_29)(immutable-prefab-struct-key s_11)))"
"(if c66152_29"
"((lambda(key_30)"
"(f_7"
" #f"
"(apply"
" make-prefab-struct"
" key_30"
"(alt-reverse"
"(let-values(((v*_31 start*_32 stop*_33 step*_34)"
"(normalise-inputs"
" 'in-vector"
"                                                                                   \"vector\""
"(lambda(x_35)(vector? x_35))"
"(lambda(x_36)"
"(unsafe-vector-length x_36))"
"(struct->vector s_11)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_37)"
"(lambda(fold-var_38 idx_39)"
"(if(unsafe-fx<"
" idx_39"
" stop*_33)"
"(let-values(((e_40)"
"(unsafe-vector-ref"
" v*_31"
" idx_39)))"
"(if #t"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_38))"
"(let-values(((fold-var_43)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_9"
" #f"
" e_40"
" depth_14"
" seen_15))"
" fold-var_42))))"
"(values"
" fold-var_43)))))"
"(if #t"
"(for-loop_37"
" fold-var_41"
"(unsafe-fx+"
" idx_39"
" 1))"
" fold-var_41))"
" fold-var_38))"
" fold-var_38))))"
" for-loop_37)"
" null"
" start*_32)))))))"
" c66152_29)"
"(if(if(hash? s_11)(immutable? s_11) #f)"
"(let-values()"
"(if(hash-eq? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_44) s_11))"
"(begin"
"(if((lambda(ht_45)(hash? ht_45)) ht_44)"
"(void)"
"(let-values()(default-in-hash ht_44)))"
"((letrec-values(((for-loop_46)"
"(lambda(table_47 i_48)"
"(if i_48"
"(let-values(((k_49"
" v_50)"
"(hash-iterate-key+value"
" ht_44"
" i_48)))"
"(if #t"
"(let-values(((table_51)"
"(let-values(((table_52)"
" table_47))"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_54"
" val_55)"
"(let-values()"
"(values"
" k_49"
"(loop_9"
" #f"
" v_50"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_52"
" key_54"
" val_55)))))"
"(values"
" table_53)))))"
"(if #t"
"(for-loop_46"
" table_51"
"(hash-iterate-next"
" ht_44"
" i_48))"
" table_51))"
" table_47))"
" table_47))))"
" for-loop_46)"
" '#hasheq()"
"(hash-iterate-first ht_44))))))"
"(if(hash-eqv? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_56) s_11))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(table_59 i_60)"
"(if i_60"
"(let-values(((k_61"
" v_62)"
"(hash-iterate-key+value"
" ht_56"
" i_60)))"
"(if #t"
"(let-values(((table_63)"
"(let-values(((table_64)"
" table_59))"
"(let-values(((table_65)"
"(let-values()"
"(let-values(((key_66"
" val_67)"
"(let-values()"
"(values"
" k_61"
"(loop_9"
" #f"
" v_62"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_64"
" key_66"
" val_67)))))"
"(values"
" table_65)))))"
"(if #t"
"(for-loop_58"
" table_63"
"(hash-iterate-next"
" ht_56"
" i_60))"
" table_63))"
" table_59))"
" table_59))))"
" for-loop_58)"
" '#hasheqv()"
"(hash-iterate-first ht_56))))))"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_68) s_11))"
"(begin"
"(if((lambda(ht_69)(hash? ht_69)) ht_68)"
"(void)"
"(let-values()(default-in-hash ht_68)))"
"((letrec-values(((for-loop_70)"
"(lambda(table_71 i_72)"
"(if i_72"
"(let-values(((k_73"
" v_74)"
"(hash-iterate-key+value"
" ht_68"
" i_72)))"
"(if #t"
"(let-values(((table_75)"
"(let-values(((table_76)"
" table_71))"
"(let-values(((table_77)"
"(let-values()"
"(let-values(((key_78"
" val_79)"
"(let-values()"
"(values"
" k_73"
"(loop_9"
" #f"
" v_74"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_76"
" key_78"
" val_79)))))"
"(values"
" table_77)))))"
"(if #t"
"(for-loop_70"
" table_75"
"(hash-iterate-next"
" ht_68"
" i_72))"
" table_75))"
" table_71))"
" table_71))))"
" for-loop_70)"
" '#hash()"
"(hash-iterate-first ht_68)))))))))"
"(let-values()(f_7 #f s_11))))))))))))))"
" loop_9)"
" #f"
" s_6"
" 0"
" seen_8))))))))"
"(case-lambda"
"((s_80 f_81)(datum-map5_1 s_80 f_81 #f #f))"
"((s_82 f_83 seen1_84)(datum-map5_1 s_82 f_83 seen1_84 #t)))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_85)"
"(let-values(((or-part_86)(pair? d_85)))"
"(if or-part_86"
" or-part_86"
"(let-values(((or-part_87)(vector? d_85)))"
"(if or-part_87"
" or-part_87"
"(let-values(((or-part_88)(box? d_85)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_89)(immutable-prefab-struct-key d_85)))"
"(if or-part_89"
" or-part_89"
"(if(hash? d_85)(if(immutable? d_85)(positive?(hash-count d_85)) #f) #f)))))))))))"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_22)(if(preserved-property-value? v_22)(preserved-property-value-content v_22) v_22)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_24 syntax?_25)"
"(datum-map"
" v_24"
"(lambda(tail?_26 v_27)"
"(begin"
"(if(let-values(((or-part_28)(null? v_27)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_29)(boolean? v_27)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? v_27)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(number? v_27)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(char? v_27)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(string? v_27)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(bytes? v_27)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(regexp? v_27)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(syntax?_25 v_27)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(pair? v_27)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(vector? v_27)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(box? v_27)))"
"(if or-part_39"
" or-part_39"
"(let-values(((or-part_40)(hash? v_27)))"
"(if or-part_40"
" or-part_40"
"(immutable-prefab-struct-key"
" v_27)))))))))))))))))))))))))))"
"(void)"
"           (let-values () (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_27)))"
" v_27))"
" disallow-cycles$1)))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_41) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_41))))"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations"
" syntax-mpi-shifts"
" syntax-bulk-binding-registry"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'syntax"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_67 reach_68)"
"(let-values(((prop_69)(syntax-scope-propagations s_67)))"
"(begin"
"(reach_68(if prop_69((propagation-ref prop_69) s_67)(syntax-content s_67)))"
"(reach_68(syntax-scopes s_67))"
"(reach_68(syntax-shifted-multi-scopes s_67))"
"(let-values(((ht_70)(syntax-props s_67)))"
"(begin"
"(if((lambda(ht_71)(if(hash? ht_71)(immutable? ht_71) #f)) ht_70)"
"(void)"
"(let-values()(default-in-immutable-hash ht_70)))"
"((letrec-values(((for-loop_72)"
"(lambda(fold-var_73 i_74)"
"(if i_74"
"(let-values(((k_75 v_76)"
"(unsafe-immutable-hash-iterate-key+value ht_70 i_74)))"
"(if #t"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78) fold-var_73))"
"(if(preserved-property-value?"
"(plain-property-value v_76))"
"(let-values(((fold-var_79) fold-var_78))"
"(let-values(((fold-var_80)"
"(let-values()"
"(begin"
"(let-values()"
"(reach_68 v_76))"
"(void)))))"
"(values fold-var_80)))"
" fold-var_78))))"
"(if #t"
"(for-loop_72"
" fold-var_77"
"(unsafe-immutable-hash-iterate-next ht_70 i_74))"
" fold-var_77))"
" fold-var_73))"
" fold-var_73))))"
" for-loop_72)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_70))))))))"
"(cons"
" prop:serialize"
"(lambda(s_81 ser_82 state_83)"
"(let-values(((prop_84)(syntax-scope-propagations s_81)))"
"(let-values(((content_85)(if prop_84((propagation-ref prop_84) s_81)(syntax-content s_81))))"
"(let-values(((properties_86)"
"(intern-properties"
"(syntax-props s_81)"
"(lambda()"
"(let-values(((ht_89)(syntax-props s_81)))"
"(begin"
"(if((lambda(ht_90)(hash? ht_90)) ht_89)"
"(void)"
"(let-values()(default-in-hash ht_89)))"
"((letrec-values(((for-loop_91)"
"(lambda(table_92 i_93)"
"(if i_93"
"(let-values(((k_94 v_95)"
"(hash-iterate-key+value ht_89 i_93)))"
"(if #t"
"(let-values(((table_96)"
"(let-values(((table_97)"
" table_92))"
"(if(preserved-property-value?"
" v_95)"
"(let-values(((table_98)"
" table_97))"
"(let-values(((table_99)"
"(let-values()"
"(let-values(((key_100"
" val_101)"
"(let-values()"
"(values"
" k_94"
"(check-value-to-preserve"
"(plain-property-value"
" v_95)"
" syntax?$1)))))"
"(hash-set"
" table_98"
" key_100"
" val_101)))))"
"(values table_99)))"
" table_97))))"
"(if #t"
"(for-loop_91"
" table_96"
"(hash-iterate-next ht_89 i_93))"
" table_96))"
" table_92))"
" table_92))))"
" for-loop_91)"
" '#hasheq()"
"(hash-iterate-first ht_89)))))"
" state_83)))"
"(let-values(((tamper_87)(serialize-tamper(syntax-tamper s_81))))"
"(let-values(((context-triple_88)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_81) state_83)"
"(intern-shifted-multi-scopes(syntax-shifted-multi-scopes s_81) state_83)"
"(intern-mpi-shifts(syntax-mpi-shifts s_81) state_83)"
" state_83)))"
"(if(let-values(((or-part_102) properties_86))(if or-part_102 or-part_102 tamper_87))"
"(let-values()"
"(list->vector"
"(list"
"(ser_82 content_85)"
"(ser_82 context-triple_88 #t)"
"(ser_82(syntax-srcloc s_81) #t)"
"(ser_82 properties_86)"
"(ser_82 tamper_87))))"
"(let-values()"
"(list->vector"
"(list"
"(ser_82 content_85)"
"(ser_82 context-triple_88 #t)"
"(ser_82(syntax-srcloc s_81) #t))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_103 port_104 mode_105)"
"                     (let-values ((() (begin (write-string \"#<syntax\" port_104) (values))))"
"(let-values(((srcloc_106)(syntax-srcloc s_103)))"
"(begin"
"(if srcloc_106"
"(let-values()"
"(let-values(((srcloc-str_107)(srcloc->string srcloc_106)))"
"                                 (if srcloc-str_107 (let-values () (fprintf port_104 \":~a\" srcloc-str_107)) (void))))"
"(void))"
"                           (fprintf port_104 \" ~.s\" (syntax->datum$1 s_103))"
"                           (write-string \">\" port_104)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7 8)"
" #f"
" 'syntax)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'content)"
"(make-struct-field-accessor -ref_4 1 'scopes)"
"(make-struct-field-accessor -ref_4 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 3 'scope-propagations)"
"(make-struct-field-accessor -ref_4 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 5 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 6 'srcloc)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'inspector)"
"(make-struct-field-accessor -ref_4 9 'tamper)"
"(make-struct-field-mutator -set!_5 0 'content)"
"(make-struct-field-mutator -set!_5 3 'scope-propagations)"
"(make-struct-field-mutator -set!_5 9 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f #f empty-props #f #f))"
"(define-values(identifier?)(lambda(s_108)(if(syntax?$1 s_108)(symbol?(syntax-content s_108)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_109)(syntax-map s_109(lambda(tail?_110 x_111) x_111)(lambda(s_112 d_113) d_113) syntax-content)))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_114)"
"(lambda(stx-c6_115 s7_116 stx-l2_117 stx-p3_118 stx-l4_119 stx-p5_120)"
"(let-values(((stx-c_121) stx-c6_115))"
"(let-values(((s_122) s7_116))"
"(let-values(((stx-l_123)(if stx-l4_119 stx-l2_117 #f)))"
"(let-values(((stx-p_124)(if stx-p5_120 stx-p3_118 #f)))"
"(let-values()"
"(let-values(((wrap_125)"
"(lambda(content_126)"
"(syntax1.1"
" content_126"
"(if stx-c_121(syntax-scopes stx-c_121) empty-scopes)"
"(if stx-c_121"
"(syntax-shifted-multi-scopes stx-c_121)"
" empty-shifted-multi-scopes)"
" #f"
"(if stx-c_121(syntax-mpi-shifts stx-c_121) empty-mpi-shifts)"
"(if stx-c_121(syntax-bulk-binding-registry stx-c_121) #f)"
"(if stx-l_123(syntax-srcloc stx-l_123) #f)"
"(if stx-p_124(syntax-props stx-p_124) empty-props)"
"(if stx-c_121(syntax-inspector stx-c_121) #f)"
"(if stx-c_121"
"(if(syntax-tamper stx-c_121)"
"(tamper-tainted-for-content content_126)"
" #f)"
" #f)))))"
"(syntax-map"
" s_122"
"(lambda(tail?_127 x_128)(if tail?_127 x_128(wrap_125 x_128)))"
" #f"
" #f"
" disallow-cycles))))))))))"
"(case-lambda"
"((stx-c_129 s_130)(datum->syntax8_114 stx-c_129 s_130 #f #f #f #f))"
"((stx-c_131 s_132 stx-l_133 stx-p3_134)(datum->syntax8_114 stx-c_131 s_132 stx-l_133 stx-p3_134 #t #t))"
"((stx-c_135 s_136 stx-l2_137)(datum->syntax8_114 stx-c_135 s_136 stx-l2_137 #f #t #f)))))"
"(define-values"
"(syntax-map)"
"(let-values(((syntax-map16_138)"
"(lambda(s12_139 f13_140 d->s14_141 s-e15_142 seen10_143 seen11_144)"
"(let-values(((s_145) s12_139))"
"(let-values(((f_146) f13_140))"
"(let-values(((d->s_147) d->s14_141))"
"(let-values(((s-e_148) s-e15_142))"
"(let-values(((seen_149)(if seen11_144 seen10_143 #f)))"
"(let-values()"
"((letrec-values(((loop_150)"
"(lambda(s_151)"
"(datum-map"
" s_151"
"(lambda(tail?_152 v_153)"
"(if(syntax?$1 v_153)"
"(let-values()"
"(if d->s_147"
"(d->s_147"
" v_153"
"(if s-e_148"
"(loop_150(s-e_148 v_153))"
"(syntax-content v_153)))"
" v_153))"
"(let-values()(f_146 tail?_152 v_153))))"
" seen_149))))"
" loop_150)"
" s_145))))))))))"
"(case-lambda"
"((s_154 f_155 d->s_156 s-e_157)(syntax-map16_138 s_154 f_155 d->s_156 s-e_157 #f #f))"
"((s_158 f_159 d->s_160 s-e_161 seen10_162)(syntax-map16_138 s_158 f_159 d->s_160 s-e_161 seen10_162 #t)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_163) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_163))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_164 context-triple_165 srcloc_166 props_167 tamper_168 inspector_169)"
"(syntax1.1"
" content_164"
"(vector-ref context-triple_165 0)"
"(vector-ref context-triple_165 1)"
" #f"
"(vector-ref context-triple_165 2)"
" #f"
" srcloc_166"
"(if props_167"
"(let-values(((ht_170) props_167))"
"(begin"
"(if((lambda(ht_171)(if(hash? ht_171)(immutable? ht_171) #f)) ht_170)"
"(void)"
"(let-values()(default-in-immutable-hash ht_170)))"
"((letrec-values(((for-loop_172)"
"(lambda(table_173 i_174)"
"(if i_174"
"(let-values(((k_175 v_176)(unsafe-immutable-hash-iterate-key+value ht_170 i_174)))"
"(if #t"
"(let-values(((table_177)"
"(let-values(((table_178) table_173))"
"(let-values(((table_179)"
"(let-values()"
"(let-values(((key_180 val_181)"
"(let-values()"
"(values"
" k_175"
"(preserved-property-value1.1"
" v_176)))))"
"(hash-set table_178 key_180 val_181)))))"
"(values table_179)))))"
"(if #t"
"(for-loop_172 table_177(unsafe-immutable-hash-iterate-next ht_170 i_174))"
" table_177))"
" table_173))"
" table_173))))"
" for-loop_172)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_170))))"
" empty-props)"
" inspector_169"
"(deserialize-tamper tamper_168))))"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_45 ser_46 state_47)"
"(list"
" 'deserialize-table-with-bulk-bindings"
"(ser_46(table-with-bulk-bindings-syms twbb_45))"
"(ser_46(table-with-bulk-bindings-bulk-bindings twbb_45))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'table-with-bulk-bindings)))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'syms)"
"(make-struct-field-accessor -ref_22 1 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_48 bulk-bindings_49)(table-with-bulk-bindings1.1 syms_48 bulk-bindings_49)))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_50 make-_51 ?_52 -ref_53 -set!_54)"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                  (cons prop:reach-scopes (lambda (sms_76 reach_77) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_78 ser_79 state_80)"
"(list"
" 'deserialize-bulk-binding-at"
"(ser_79(bulk-binding-at-scopes bba_78))"
"(ser_79(bulk-binding-at-bulk bba_78))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))"
"(values"
" struct:_50"
" make-_51"
" ?_52"
"(make-struct-field-accessor -ref_53 0 'scopes)"
"(make-struct-field-accessor -ref_53 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_81 bulk_82)(bulk-binding-at2.1 scopes_81 bulk_82)))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_83 make-_84 ?_85 -ref_86 -set!_87)"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))"
"(values"
" struct:_83"
" make-_84"
" ?_85"
"(make-struct-field-accessor -ref_86 0 'get-symbols)"
"(make-struct-field-accessor -ref_86 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_109 s_110 extra-shifts_111)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_109))"
" b_109"
"(append extra-shifts_111(if s_110(syntax-mpi-shifts s_110) null)))))"
"(define-values(bulk-binding-create)(lambda(b_112)(bulk-binding-class-create(bulk-binding-ref b_112))))"
"(define-values(binding-table-empty?)(lambda(bt_113)(if(hash? bt_113)(zero?(hash-count bt_113)) #f)))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_114 scopes_115 sym_116 binding_117)"
"(if(hash? bt_114)"
"(let-values()(hash-set bt_114 sym_116(hash-set(hash-ref bt_114 sym_116 '#hash()) scopes_115 binding_117)))"
"(let-values()"
"(let-values(((the-struct_118) bt_114))"
"(if(table-with-bulk-bindings? the-struct_118)"
"(let-values(((syms7_119)"
"(binding-table-add(table-with-bulk-bindings-syms bt_114) scopes_115 sym_116 binding_117)))"
"(table-with-bulk-bindings1.1 syms7_119(table-with-bulk-bindings-bulk-bindings the-struct_118)))"
"            (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_118)))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_120 scopes_121 bulk_122)"
"(if(table-with-bulk-bindings? bt_120)"
"(let-values()"
"(table-with-bulk-bindings1.1"
"(remove-matching-bindings(table-with-bulk-bindings-syms bt_120) scopes_121 bulk_122)"
"(cons(bulk-binding-at2.1 scopes_121 bulk_122)(table-with-bulk-bindings-bulk-bindings bt_120))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_120 null) scopes_121 bulk_122)))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_123 scopes_124 bulk_125)"
"(let-values(((bulk-symbols_126)(bulk-binding-symbols bulk_125 #f null)))"
"(if(<(hash-count syms_123)(hash-count bulk-symbols_126))"
"(let-values()"
"(let-values(((ht_127) syms_123))"
"(begin"
"(if((lambda(ht_128)(if(hash? ht_128)(immutable? ht_128) #f)) ht_127)"
"(void)"
"(let-values()(default-in-immutable-hash ht_127)))"
"((letrec-values(((for-loop_129)"
"(lambda(syms_130 i_131)"
"(if i_131"
"(let-values(((sym_132 sym-bindings_133)"
"(unsafe-immutable-hash-iterate-key+value ht_127 i_131)))"
"(if #t"
"(let-values(((syms_134)"
"(let-values(((syms_135) syms_130))"
"(let-values(((syms_136)"
"(let-values()"
"(if(hash-ref bulk-symbols_126 sym_132 #f)"
"(remove-matching-binding"
" syms_135"
" sym_132"
" sym-bindings_133"
" scopes_124)"
" syms_135))))"
"(values syms_136)))))"
"(if #t"
"(for-loop_129 syms_134(unsafe-immutable-hash-iterate-next ht_127 i_131))"
" syms_134))"
" syms_130))"
" syms_130))))"
" for-loop_129)"
" syms_123"
"(unsafe-immutable-hash-iterate-first ht_127)))))"
"(let-values()"
"(let-values(((ht_137) bulk-symbols_126))"
"(begin"
"(if((lambda(ht_138)(if(hash? ht_138)(immutable? ht_138) #f)) ht_137)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_137)))"
"((letrec-values(((for-loop_139)"
"(lambda(syms_140 i_141)"
"(if i_141"
"(let-values(((sym_142)(unsafe-immutable-hash-iterate-key ht_137 i_141)))"
"(if #t"
"(let-values(((syms_143)"
"(let-values(((syms_144) syms_140))"
"(let-values(((syms_145)"
"(let-values()"
"(let-values(((sym-bindings_146)"
"(hash-ref syms_144 sym_142 #f)))"
"(if sym-bindings_146"
"(remove-matching-binding"
" syms_144"
" sym_142"
" sym-bindings_146"
" scopes_124)"
" syms_144)))))"
"(values syms_145)))))"
"(if #t"
"(for-loop_139 syms_143(unsafe-immutable-hash-iterate-next ht_137 i_141))"
" syms_143))"
" syms_140))"
" syms_140))))"
" for-loop_139)"
" syms_123"
"(unsafe-immutable-hash-iterate-first ht_137)))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_147 sym_148 sym-bindings_149 scopes_150)"
"(hash-set syms_147 sym_148(hash-remove sym-bindings_149 scopes_150))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_151 state_152)"
"(let-values(((or-part_153)(hash-ref(serialize-state-bindings-intern state_152) bt_151 #f)))"
"(if or-part_153"
" or-part_153"
"(let-values(((reachable-scopes_154)(serialize-state-reachable-scopes state_152)))"
"(let-values(((new-syms_155)"
"(let-values(((ht_158)(if(hash? bt_151) bt_151(table-with-bulk-bindings-syms bt_151))))"
"(begin"
"(if((lambda(ht_159)(if(hash? ht_159)(immutable? ht_159) #f)) ht_158)"
"(void)"
"(let-values()(default-in-immutable-hash ht_158)))"
"((letrec-values(((for-loop_160)"
"(lambda(table_161 i_162)"
"(if i_162"
"(let-values(((sym_163 bindings-for-sym_164)"
"(unsafe-immutable-hash-iterate-key+value ht_158 i_162)))"
"(if #t"
"(let-values(((table_165)"
"(let-values(((new-bindings-for-sym_166)"
"(let-values(((ht_167)"
" bindings-for-sym_164))"
"(begin"
"(if((lambda(ht_168)"
"(if(hash? ht_168)"
"(immutable? ht_168)"
" #f))"
" ht_167)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_167)))"
"((letrec-values(((for-loop_169)"
"(lambda(table_170"
" i_171)"
"(if i_171"
"(let-values(((scopes_172"
" binding_173)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_167"
" i_171)))"
"(if #t"
"(let-values(((table_174)"
"(let-values(((table_175)"
" table_170))"
"(if(subset?"
" scopes_172"
" reachable-scopes_154)"
"(let-values(((table_176)"
" table_175))"
"(let-values(((table_177)"
"(let-values()"
"(let-values(((key_178"
" val_179)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_172"
" state_152)"
" binding_173))))"
"(hash-set"
" table_176"
" key_178"
" val_179)))))"
"(values"
" table_177)))"
" table_175))))"
"(if #t"
"(for-loop_169"
" table_174"
"(unsafe-immutable-hash-iterate-next"
" ht_167"
" i_171))"
" table_174))"
" table_170))"
" table_170))))"
" for-loop_169)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_167))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_180)"
"(lambda(table_181)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_182)"
"(let-values(((table_183)"
" table_181))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_166))"
"(let-values(((table_184)"
" table_183))"
"(let-values(((table_185)"
"(let-values()"
"(let-values(((key_186"
" val_187)"
"(let-values()"
"(values"
" sym_163"
" new-bindings-for-sym_166))))"
"(hash-set"
" table_184"
" key_186"
" val_187)))))"
"(values"
" table_185)))"
" table_183))))"
"(if #f"
"(for-loop_180"
" table_182)"
" table_182))"
" table_181))"
" table_181))))"
" for-loop_180)"
" table_161)))))"
"(if #t"
"(for-loop_160"
" table_165"
"(unsafe-immutable-hash-iterate-next ht_158 i_162))"
" table_165))"
" table_161))"
" table_161))))"
" for-loop_160)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_158))))))"
"(let-values(((new-bulk-bindings_156)"
"(if(hash? bt_151)"
" null"
"(alt-reverse"
"(let-values(((lst_188)(table-with-bulk-bindings-bulk-bindings bt_151)))"
"(begin"
"(if(list? lst_188)(void)(let-values()(in-list lst_188)))"
"((letrec-values(((for-loop_189)"
"(lambda(fold-var_190 lst_191)"
"(if(pair? lst_191)"
"(let-values(((bba_192)(unsafe-car lst_191)))"
"(if #t"
"(let-values(((fold-var_193)"
"(let-values(((fold-var_194) fold-var_190))"
"(if(subset?"
"(bulk-binding-at-scopes bba_192)"
" reachable-scopes_154)"
"(let-values(((fold-var_195) fold-var_194))"
"(let-values(((fold-var_196)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_197)"
" bba_192))"
"(if(bulk-binding-at?"
" the-struct_197)"
"(let-values(((scopes8_198)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_192)"
" state_152)))"
"(bulk-binding-at2.1"
" scopes8_198"
"(bulk-binding-at-bulk"
" the-struct_197)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"bulk-binding-at?\""
" the-struct_197))))"
" fold-var_195))))"
"(values fold-var_196)))"
" fold-var_194))))"
"(if #t"
"(for-loop_189 fold-var_193(unsafe-cdr lst_191))"
" fold-var_193))"
" fold-var_190))"
" fold-var_190))))"
" for-loop_189)"
" null"
" lst_188)))))))"
"(let-values(((new-bt_157)"
"(if(pair? new-bulk-bindings_156)"
"(table-with-bulk-bindings1.1 new-syms_155 new-bulk-bindings_156)"
" new-syms_155)))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_152) bt_151 new-bt_157)"
" new-bt_157)))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_199 reachable-scopes_200 reach_201 register-trigger_202)"
"(let-values(((ht_203)(if(hash? bt_199) bt_199(table-with-bulk-bindings-syms bt_199))))"
"(begin"
"(if((lambda(ht_204)(if(hash? ht_204)(immutable? ht_204) #f)) ht_203)"
"(void)"
"(let-values()(default-in-immutable-hash ht_203)))"
"((letrec-values(((for-loop_205)"
"(lambda(fold-var_206 i_207)"
"(if i_207"
"(let-values(((sym_208 bindings-for-sym_209)"
"(unsafe-immutable-hash-iterate-key+value ht_203 i_207)))"
"(if #t"
"(let-values(((fold-var_210)"
"(let-values(((ht_211) bindings-for-sym_209))"
"(begin"
"(if((lambda(ht_212)(if(hash? ht_212)(immutable? ht_212) #f))"
" ht_211)"
"(void)"
"(let-values()(default-in-immutable-hash ht_211)))"
"((letrec-values(((for-loop_213)"
"(lambda(fold-var_214 i_215)"
"(if i_215"
"(let-values(((scopes_216 binding_217)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_211"
" i_215)))"
"(if #t"
"(let-values(((fold-var_218)"
"(let-values(((fold-var_219)"
" fold-var_214))"
"(let-values(((fold-var_220)"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_216"
" binding_217"
" reachable-scopes_200"
" reach_201"
" register-trigger_202))"
"(void)))))"
"(values"
" fold-var_220)))))"
"(if #t"
"(for-loop_213"
" fold-var_218"
"(unsafe-immutable-hash-iterate-next"
" ht_211"
" i_215))"
" fold-var_218))"
" fold-var_214))"
" fold-var_214))))"
" for-loop_213)"
" fold-var_206"
"(unsafe-immutable-hash-iterate-first ht_211))))))"
"(if #t"
"(for-loop_205 fold-var_210(unsafe-immutable-hash-iterate-next ht_203 i_207))"
" fold-var_210))"
" fold-var_206))"
" fold-var_206))))"
" for-loop_205)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_203))))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_221 binding_222 reachable-scopes_223 reach_224 register-trigger_225)"
"(let-values(((v_226)"
"(if(binding-reach-scopes? binding_222)((binding-reach-scopes-ref binding_222) binding_222) #f)))"
"(if v_226"
"(let-values()"
"(if(subset? scopes_221 reachable-scopes_223)"
"(let-values()(reach_224 v_226))"
"(let-values()"
"(let-values(((ht_227) scopes_221))"
"(begin"
"(if((lambda(ht_228)(if(hash? ht_228)(immutable? ht_228) #f)) ht_227)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_227)))"
"((letrec-values(((for-loop_229)"
"(lambda(fold-var_230 i_231)"
"(if i_231"
"(let-values(((sc_232)(unsafe-immutable-hash-iterate-key ht_227 i_231)))"
"(if #t"
"(let-values(((fold-var_233)"
"(let-values(((fold-var_234) fold-var_230))"
"(if(set-member? reachable-scopes_223 sc_232)"
" fold-var_234"
"(let-values(((fold-var_235) fold-var_234))"
"(let-values(((fold-var_236)"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_225 sc_232 v_226))"
"(void)))))"
"(values fold-var_236)))))))"
"(if #t"
"(for-loop_229"
" fold-var_233"
"(unsafe-immutable-hash-iterate-next ht_227 i_231))"
" fold-var_233))"
" fold-var_230))"
" fold-var_230))))"
" for-loop_229)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_227)))))))"
"(void)))))"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(syntax-map"
" d_2"
"(lambda(tail?_3 x_4) x_4)"
"(lambda(sub-s_5 d_6)"
"(if(tamper-tainted?(syntax-tamper sub-s_5))"
"(let-values() sub-s_5)"
"(let-values()"
"(let-values(((the-struct_7) sub-s_5))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((tamper6_8)(tamper-tainted-for-content(syntax-content sub-s_5))))"
"(syntax1.1"
"(syntax-content the-struct_7)"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
"(syntax-inspector the-struct_7)"
" tamper6_8))"
"               (raise-argument-error 'struct-copy \"syntax?\" the-struct_7))))))"
" #f)))"
"(define-values(syntax-tainted?$1)(lambda(s_9)(tamper-tainted?(syntax-tamper s_9))))"
"(define-values(syntax-clean?)(lambda(s_10)(tamper-clean?(syntax-tamper s_10))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_11 insp_12)"
"(let-values(((t_13)(syntax-tamper s_11)))"
"(if(tamper-tainted? t_13)"
"(let-values() s_11)"
"(if(if t_13"
"(let-values(((or-part_14)(set-member? t_13 insp_12)))"
"(if or-part_14"
" or-part_14"
"(let-values(((ht_15) t_13))"
"(begin"
"(if((lambda(ht_16)(if(hash? ht_16)(immutable? ht_16) #f)) ht_15)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(result_18 i_19)"
"(if i_19"
"(let-values(((already-insp_20)"
"(unsafe-immutable-hash-iterate-key ht_15 i_19)))"
"(if #t"
"(let-values(((result_21)"
"(let-values(((result_22) result_18))"
"(let-values(((result_23)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_20"
" insp_12)))))"
"(values result_23)))))"
"(if(if #t(not((lambda x_24 result_21) already-insp_20)) #f)"
"(for-loop_17"
" result_21"
"(unsafe-immutable-hash-iterate-next ht_15 i_19))"
" result_21))"
" result_18))"
" result_18))))"
" for-loop_17)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_15))))))"
" #f)"
"(let-values() s_11)"
"(let-values()"
"(let-values(((the-struct_25) s_11))"
"(if(syntax?$1 the-struct_25)"
"(let-values(((tamper7_26)(set-add(if t_13(remove-inferior t_13 insp_12)(seteq)) insp_12)))"
"(syntax1.1"
"(syntax-content the-struct_25)"
"(syntax-scopes the-struct_25)"
"(syntax-shifted-multi-scopes the-struct_25)"
"(syntax-scope-propagations the-struct_25)"
"(syntax-mpi-shifts the-struct_25)"
"(syntax-bulk-binding-registry the-struct_25)"
"(syntax-srcloc the-struct_25)"
"(syntax-props the-struct_25)"
"(syntax-inspector the-struct_25)"
" tamper7_26))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_25)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_27 insp_28)"
"(let-values(((ht_29) t_27))"
"(begin"
"(if((lambda(ht_30)(if(hash? ht_30)(immutable? ht_30) #f)) ht_29)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_29)))"
"((letrec-values(((for-loop_31)"
"(lambda(table_32 i_33)"
"(if i_33"
"(let-values(((already-insp_34)(unsafe-immutable-hash-iterate-key ht_29 i_33)))"
"(if #t"
"(let-values(((table_35)"
"(let-values(((table_36) table_32))"
"(if(inspector-superior-or-same? insp_28 already-insp_34)"
" table_36"
"(let-values(((table_37) table_36))"
"(let-values(((table_38)"
"(let-values()"
"(let-values(((key_39 val_40)"
"(let-values()"
"(values"
"(let-values() already-insp_34)"
" #t))))"
"(hash-set table_37 key_39 val_40)))))"
"(values table_38)))))))"
"(if #t"
"(for-loop_31 table_35(unsafe-immutable-hash-iterate-next ht_29 i_33))"
" table_35))"
" table_32))"
" table_32))))"
" for-loop_31)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_29))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_41)"
"(lambda(s3_42 insp1_43 insp2_44)"
"(let-values(((s_45) s3_42))"
"(let-values(((insp_46)(if insp2_44 insp1_43 #f)))"
"(let-values()"
"(let-values(((t_47)(syntax-tamper s_45)))"
"(if(not(tamper-armed? t_47))"
"(let-values() s_45)"
"(if(not insp_46)"
"(let-values()"
"(let-values(((the-struct_48) s_45))"
"(if(syntax?$1 the-struct_48)"
"(let-values(((tamper8_49) #f))"
"(syntax1.1"
"(syntax-content the-struct_48)"
"(syntax-scopes the-struct_48)"
"(syntax-shifted-multi-scopes the-struct_48)"
"(syntax-scope-propagations the-struct_48)"
"(syntax-mpi-shifts the-struct_48)"
"(syntax-bulk-binding-registry the-struct_48)"
"(syntax-srcloc the-struct_48)"
"(syntax-props the-struct_48)"
"(syntax-inspector the-struct_48)"
" tamper8_49))"
"                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_48))))"
"(let-values()"
"(let-values(((new-t_50)(remove-inferior t_47 insp_46)))"
"(let-values(((the-struct_51) s_45))"
"(if(syntax?$1 the-struct_51)"
"(let-values(((tamper9_52)(if(not(set-empty? new-t_50)) new-t_50 #f)))"
"(syntax1.1"
"(syntax-content the-struct_51)"
"(syntax-scopes the-struct_51)"
"(syntax-shifted-multi-scopes the-struct_51)"
"(syntax-scope-propagations the-struct_51)"
"(syntax-mpi-shifts the-struct_51)"
"(syntax-bulk-binding-registry the-struct_51)"
"(syntax-srcloc the-struct_51)"
"(syntax-props the-struct_51)"
"(syntax-inspector the-struct_51)"
" tamper9_52))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_51))))))))))))))"
"(case-lambda((s_53)(syntax-disarm4_41 s_53 #f #f))((s_54 insp1_55)(syntax-disarm4_41 s_54 insp1_55 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_56 from-s_57)"
"(let-values(((t_58)(syntax-tamper s_56)))"
"(if(tamper-tainted? t_58)"
"(let-values() s_56)"
"(let-values()"
"(let-values(((from-t_59)(syntax-tamper from-s_57)))"
"(if(tamper-clean? from-t_59)"
"(let-values() s_56)"
"(if(tamper-tainted? from-t_59)"
"(let-values()"
"(let-values(((the-struct_60) s_56))"
"(if(syntax?$1 the-struct_60)"
"(let-values(((tamper10_61)(tamper-tainted-for-content(syntax-content s_56))))"
"(syntax1.1"
"(syntax-content the-struct_60)"
"(syntax-scopes the-struct_60)"
"(syntax-shifted-multi-scopes the-struct_60)"
"(syntax-scope-propagations the-struct_60)"
"(syntax-mpi-shifts the-struct_60)"
"(syntax-bulk-binding-registry the-struct_60)"
"(syntax-srcloc the-struct_60)"
"(syntax-props the-struct_60)"
"(syntax-inspector the-struct_60)"
" tamper10_61))"
"                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_60))))"
"(if(tamper-clean? t_58)"
"(let-values()"
"(let-values(((the-struct_62) s_56))"
"(if(syntax?$1 the-struct_62)"
"(let-values(((tamper11_63) from-t_59))"
"(syntax1.1"
"(syntax-content the-struct_62)"
"(syntax-scopes the-struct_62)"
"(syntax-shifted-multi-scopes the-struct_62)"
"(syntax-scope-propagations the-struct_62)"
"(syntax-mpi-shifts the-struct_62)"
"(syntax-bulk-binding-registry the-struct_62)"
"(syntax-srcloc the-struct_62)"
"(syntax-props the-struct_62)"
"(syntax-inspector the-struct_62)"
" tamper11_63))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_62))))"
"(let-values()"
"(let-values(((the-struct_64) s_56))"
"(if(syntax?$1 the-struct_64)"
"(let-values(((tamper12_65)"
"(let-values(((ht_66) from-t_59))"
"(begin"
"(if((lambda(ht_67)(if(hash? ht_67)(immutable? ht_67) #f)) ht_66)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(t_69 i_70)"
"(if i_70"
"(let-values(((from-i_71)"
"(unsafe-immutable-hash-iterate-key"
" ht_66"
" i_70)))"
"(if #t"
"(let-values(((t_72)"
"(let-values(((t_73) t_69))"
"(let-values(((t_74)"
"(let-values()"
"(if(set-member?"
" t_73"
" from-i_71)"
"(let-values()"
" t_73)"
"(if(any-superior?"
" t_73"
" from-i_71)"
"(let-values()"
" t_73)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_73"
" from-i_71)"
" from-i_71))))))))"
"(values t_74)))))"
"(if #t"
"(for-loop_68"
" t_72"
"(unsafe-immutable-hash-iterate-next"
" ht_66"
" i_70))"
" t_72))"
" t_69))"
" t_69))))"
" for-loop_68)"
" t_58"
"(unsafe-immutable-hash-iterate-first ht_66))))))"
"(syntax1.1"
"(syntax-content the-struct_64)"
"(syntax-scopes the-struct_64)"
"(syntax-shifted-multi-scopes the-struct_64)"
"(syntax-scope-propagations the-struct_64)"
"(syntax-mpi-shifts the-struct_64)"
"(syntax-bulk-binding-registry the-struct_64)"
"(syntax-srcloc the-struct_64)"
"(syntax-props the-struct_64)"
"(syntax-inspector the-struct_64)"
" tamper12_65))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_64)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_75)"
"(if(tamper-tainted?(syntax-tamper s_75))"
" s_75"
"(let-values(((the-struct_76) s_75))"
"(if(syntax?$1 the-struct_76)"
"(let-values(((tamper13_77)(tamper-tainted-for-content(syntax-content s_75))))"
"(syntax1.1"
"(syntax-content the-struct_76)"
"(syntax-scopes the-struct_76)"
"(syntax-shifted-multi-scopes the-struct_76)"
"(syntax-scope-propagations the-struct_76)"
"(syntax-mpi-shifts the-struct_76)"
"(syntax-bulk-binding-registry the-struct_76)"
"(syntax-srcloc the-struct_76)"
"(syntax-props the-struct_76)"
"(syntax-inspector the-struct_76)"
" tamper13_77))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_76))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_78 from-i_79)"
"(let-values(((ht_80) t_78))"
"(begin"
"(if((lambda(ht_81)(if(hash? ht_81)(immutable? ht_81) #f)) ht_80)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_80)))"
"((letrec-values(((for-loop_82)"
"(lambda(result_83 i_84)"
"(if i_84"
"(let-values(((i_85)(unsafe-immutable-hash-iterate-key ht_80 i_84)))"
"(if #t"
"(let-values(((result_86)"
"(let-values(((result_87) result_83))"
"(let-values(((result_88)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_85 from-i_79)))))"
"(values result_88)))))"
"(if(if #t(not((lambda x_89 result_86) i_85)) #f)"
"(for-loop_82 result_86(unsafe-immutable-hash-iterate-next ht_80 i_84))"
" result_86))"
" result_83))"
" result_83))))"
" for-loop_82)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_80))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_90 i_91)"
"(let-values(((or-part_92)(eq? sup-i_90 i_91)))(if or-part_92 or-part_92(inspector-superior? sup-i_90 i_91)))))"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_22)(if(fallback? smss_22)(car(fallback-search-list smss_22)) smss_22)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_23)"
"(let-values(((l_24)(cdr(fallback-search-list smss_23))))(if(null?(cdr l_24))(car l_24)(fallback1.1 l_24)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_25 smss/maybe-fallback_26)"
"(fallback1.1"
"(cons"
" smss_25"
"(if(fallback? smss/maybe-fallback_26)"
"(fallback-search-list smss/maybe-fallback_26)"
"(list smss/maybe-fallback_26))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_27 f_28)"
"(if(fallback? smss_27)"
"(let-values(((l_29)(fallback-search-list smss_27)))(fallback1.1(cons(f_28(car l_29))(cdr l_29))))"
"(f_28 smss_27))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_30 f_31)"
"(if(fallback? smss_30)"
"(fallback1.1"
"(alt-reverse"
"(let-values(((lst_32)(fallback-search-list smss_30)))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((smss_36)(unsafe-car lst_35)))"
"(if #t"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38) fold-var_34))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()(f_31 smss_36))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(if #t(for-loop_33 fold-var_37(unsafe-cdr lst_35)) fold-var_37))"
" fold-var_34))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32)))))"
"(f_31 smss_30))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_40)(if(fallback? smss_40)(fallback-search-list smss_40)(list smss_40))))"
"(define-values(cache)(make-weak-box #f))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_1)(let-values(((c_2)(weak-box-value cache)))(if c_2(let-values()(hash-remove! c_2 sym_1))(void))))"
"(()(set! cache(make-weak-box(make-hasheq))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scopes entry-phase entry-binding)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type 'entry #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'entry)))"
"(values"
" struct:_3"
" make-_4"
" ?_5"
"(make-struct-field-accessor -ref_6 0 'scopes)"
"(make-struct-field-accessor -ref_6 1 'phase)"
"(make-struct-field-accessor -ref_6 2 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_34 phase_35 scopes_36)"
"(let-values(((c_37)(weak-box-value cache)))"
"(if c_37"
"(let-values(((v_38)(hash-ref c_37 sym_34 #f)))"
"(if v_38"
"(if(eqv? phase_35(entry-phase v_38))"
"(if(set=? scopes_36(entry-scopes v_38))(entry-binding v_38) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_39 phase_40 scopes_41 b_42)"
"(let-values(((c_43)(weak-box-value cache)))"
"(if(not c_43)"
"(let-values()(begin(clear-resolve-cache!)(resolve-cache-set! sym_39 phase_40 scopes_41 b_42)))"
"(let-values()(hash-set! c_43 sym_39(entry1.1 scopes_41 phase_40 b_42)))))))"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_32 reachable-scopes_33 reach_34 register-trigger_35)"
"(binding-table-register-reachable"
"(scope-binding-table s_32)"
" reachable-scopes_33"
" reach_34"
" register-trigger_35)))"
"(cons prop:reach-scopes(lambda(s_36 reach_37)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_38 ser_39 state_40)"
"(if(binding-table-empty?(scope-binding-table s_38))"
" #f"
"(list"
" 'deserialize-scope-fill!"
"(ser_39(binding-table-prune-to-reachable(scope-binding-table s_38) state_40))))))"
"(cons"
" prop:serialize"
"(lambda(s_41 ser_42 state_43)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_43) s_41)"
"(void)"
"                         (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_41 top-level-common-scope)"
" '(deserialize-scope)"
"(list* 'deserialize-scope(scope-kind s_41))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_44 port_45 mode_46)"
"(begin"
"                       (write-string \"#<scope:\" port_45)"
"(display(scope-id sc_44) port_45)"
"                       (write-string \":\" port_45)"
"(display(scope-kind sc_44) port_45)"
"                       (write-string \">\" port_45)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'id)"
"(make-struct-field-accessor -ref_4 1 'kind)"
"(make-struct-field-accessor -ref_4 2 'binding-table)"
"(make-struct-field-mutator -set!_5 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_47)(scope1.1(new-deserialize-scope-id!) kind_47 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_48 bt_49)(set-scope-binding-table! s_48 bt_49)))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_50 make-_51 ?_52 -ref_53 -set!_54)"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_91 reach_92)(reach_92(multi-scope-scopes ms_91))))"
"(cons"
" prop:serialize"
"(lambda(ms_93 ser_94 state_95)"
"(list"
" 'deserialize-multi-scope"
"(ser_94(multi-scope-name ms_93))"
"(ser_94(multi-scope-scopes ms_93))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))"
"(values"
" struct:_50"
" make-_51"
" ?_52"
"(make-struct-field-accessor -ref_53 0 'id)"
"(make-struct-field-accessor -ref_53 1 'name)"
"(make-struct-field-accessor -ref_53 2 'scopes)"
"(make-struct-field-accessor -ref_53 3 'shifted)"
"(make-struct-field-accessor -ref_53 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_96 scopes_97)"
"(multi-scope2.1(new-deserialize-scope-id!) name_96 scopes_97(make-hasheqv)(make-hash))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_98 make-_99 ?_100 -ref_101 -set!_102)"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_124 reach_125)(reach_125(representative-scope-owner s_124))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_126 ser_127 state_128)"
"(list"
" 'deserialize-representative-scope-fill!"
"(ser_127(binding-table-prune-to-reachable(scope-binding-table s_126) state_128))"
"(ser_127(representative-scope-owner s_126)))))"
"(cons"
" prop:serialize"
"(lambda(s_129 ser_130 state_131)"
"(list"
" 'deserialize-representative-scope"
"(ser_130(scope-kind s_129))"
"(ser_130(representative-scope-phase s_129)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_132 port_133 mode_134)"
"(begin"
"                       (write-string \"#<scope:\" port_133)"
"(display(scope-id sc_132) port_133)"
"(if(representative-scope-owner sc_132)"
"(let-values()"
"(begin"
"                             (write-string \"=\" port_133)"
"(display(multi-scope-id(representative-scope-owner sc_132)) port_133)))"
"(void))"
"                       (write-string \"@\" port_133)"
"(display(representative-scope-phase sc_132) port_133)"
"                       (write-string \">\" port_133)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))"
"(values"
" struct:_98"
" make-_99"
" ?_100"
"(make-struct-field-accessor -ref_101 0 'owner)"
"(make-struct-field-accessor -ref_101 1 'phase)"
"(make-struct-field-mutator -set!_102 0 'owner)"
"(make-struct-field-mutator -set!_102 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_135 phase_136)(representative-scope3.1(new-deserialize-scope-id!) kind_135 #f #f phase_136)))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_137 bt_138 owner_139)"
"(begin(deserialize-scope-fill! s_137 bt_138)(set-representative-scope-owner! s_137 owner_139))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_140 make-_141 ?_142 -ref_143 -set!_144)"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_166 reach_167)(reach_167(shifted-multi-scope-multi-scope sms_166))))"
"(cons"
" prop:serialize"
"(lambda(sms_168 ser_169 state_170)"
"(list"
" 'deserialize-shifted-multi-scope"
"(ser_169(shifted-multi-scope-phase sms_168))"
"(ser_169(shifted-multi-scope-multi-scope sms_168)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_171 port_172 mode_173)"
"(begin"
"                       (write-string \"#<scope:\" port_172)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_171)) port_172)"
"                       (write-string \"@\" port_172)"
"(display(shifted-multi-scope-phase sms_171) port_172)"
"                       (write-string \">\" port_172)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))"
"(values"
" struct:_140"
" make-_141"
" ?_142"
"(make-struct-field-accessor -ref_143 0 'phase)"
"(make-struct-field-accessor -ref_143 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_174 multi-scope_175)(intern-shifted-multi-scope phase_174 multi-scope_175)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_176 multi-scope_177)"
"(if(phase? phase_176)"
"(let-values()"
"(let-values(((or-part_178)(hash-ref(multi-scope-shifted multi-scope_177) phase_176 #f)))"
"(if or-part_178"
" or-part_178"
"(let-values(((sms_179)(shifted-multi-scope4.1 phase_176 multi-scope_177)))"
"(begin(hash-set!(multi-scope-shifted multi-scope_177) phase_176 sms_179) sms_179)))))"
"(let-values()"
"(let-values(((or-part_180)(hash-ref(multi-scope-label-shifted multi-scope_177) phase_176 #f)))"
"(if or-part_180"
" or-part_180"
"(let-values(((sms_181)(shifted-multi-scope4.1 phase_176 multi-scope_177)))"
"(begin(hash-set!(multi-scope-label-shifted multi-scope_177) phase_176 sms_181) sms_181))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_182 make-_183 ?_184 -ref_185 -set!_186)"
"(make-struct-type 'shifted-to-label-phase #f 1 0 #f null 'prefab #f '(0) #f 'shifted-to-label-phase)))"
"(values struct:_182 make-_183 ?_184(make-struct-field-accessor -ref_185 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_203)(scope1.1(new-scope-id!) kind_203 empty-binding-table)))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_204)"
"(lambda(name6_205 name7_206)"
"(let-values(((name_207)(if name7_206 name6_205 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_207(make-hasheqv)(make-hasheqv)(make-hash))))))))"
"(case-lambda(()(new-multi-scope8_204 #f #f))((name6_208)(new-multi-scope8_204 name6_208 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_209 phase_210)"
"(let-values(((or-part_211)(hash-ref(multi-scope-scopes ms_209) phase_210 #f)))"
"(if or-part_211"
" or-part_211"
"(let-values(((s_212)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_209 phase_210)))"
"(begin(hash-set!(multi-scope-scopes ms_209) phase_210 s_212) s_212))))))"
"(define-values(scope>?)(lambda(sc1_213 sc2_214)(>(scope-id sc1_213)(scope-id sc2_214))))"
"(define-values"
"(apply-scope)"
"(lambda(s_215 sc_216 op_217 prop-op_218)"
"(if(shifted-multi-scope? sc_216)"
"(let-values(((the-struct_219) s_215))"
"(if(syntax?$1 the-struct_219)"
"(let-values(((shifted-multi-scopes27_220)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_215)"
"(lambda(smss_222)(op_217(fallback-first smss_222) sc_216))))"
"((scope-propagations28_221)"
"(if(datum-has-elements?(syntax-content s_215))"
"(prop-op_218"
"(syntax-scope-propagations s_215)"
" sc_216"
"(syntax-scopes s_215)"
"(syntax-shifted-multi-scopes s_215))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_219)"
"(syntax-scopes the-struct_219)"
" shifted-multi-scopes27_220"
" scope-propagations28_221"
"(syntax-mpi-shifts the-struct_219)"
"(syntax-bulk-binding-registry the-struct_219)"
"(syntax-srcloc the-struct_219)"
"(syntax-props the-struct_219)"
"(syntax-inspector the-struct_219)"
"(syntax-tamper the-struct_219)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_219)))"
"(let-values(((the-struct_223) s_215))"
"(if(syntax?$1 the-struct_223)"
"(let-values(((scopes29_224)(op_217(syntax-scopes s_215) sc_216))"
"((scope-propagations30_225)"
"(if(datum-has-elements?(syntax-content s_215))"
"(prop-op_218"
"(syntax-scope-propagations s_215)"
" sc_216"
"(syntax-scopes s_215)"
"(syntax-shifted-multi-scopes s_215))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_223)"
" scopes29_224"
"(syntax-shifted-multi-scopes the-struct_223)"
" scope-propagations30_225"
"(syntax-mpi-shifts the-struct_223)"
"(syntax-bulk-binding-registry the-struct_223)"
"(syntax-srcloc the-struct_223)"
"(syntax-props the-struct_223)"
"(syntax-inspector the-struct_223)"
"(syntax-tamper the-struct_223)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_223))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_226)"
"(let-values((()(begin(propagate-taint! s_226)(values))))"
"(let-values(((prop_227)(syntax-scope-propagations s_226)))"
"(if prop_227"
"(let-values(((new-content_228)"
"(syntax-map"
"(syntax-content s_226)"
"(lambda(tail?_229 x_230) x_230)"
"(lambda(sub-s_231 d_232)"
"(let-values(((the-struct_233) sub-s_231))"
"(if(syntax?$1 the-struct_233)"
"(let-values(((scopes31_234)"
"(propagation-apply prop_227(syntax-scopes sub-s_231) s_226))"
"((shifted-multi-scopes32_235)"
"(propagation-apply-shifted"
" prop_227"
"(syntax-shifted-multi-scopes sub-s_231)"
" s_226))"
"((scope-propagations33_236)"
"(propagation-merge"
" prop_227"
"(syntax-scope-propagations sub-s_231)"
"(syntax-scopes sub-s_231)"
"(syntax-shifted-multi-scopes sub-s_231))))"
"(syntax1.1"
"(syntax-content the-struct_233)"
" scopes31_234"
" shifted-multi-scopes32_235"
" scope-propagations33_236"
"(syntax-mpi-shifts the-struct_233)"
"(syntax-bulk-binding-registry the-struct_233)"
"(syntax-srcloc the-struct_233)"
"(syntax-props the-struct_233)"
"(syntax-inspector the-struct_233)"
"(syntax-tamper the-struct_233)))"
"                               (raise-argument-error 'struct-copy \"syntax?\" the-struct_233))))"
" #f)))"
"(begin"
"(set-syntax-content! s_226 new-content_228)"
"(set-syntax-scope-propagations! s_226 #f)"
" new-content_228))"
"(syntax-content s_226))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_237)"
"(let-values(((content_238)(syntax-e/no-taint s_237)))"
"(if(not(tamper-armed?(syntax-tamper s_237)))"
"(let-values() content_238)"
"(if(datum-has-elements? content_238)"
"(let-values()(taint-content content_238))"
"(let-values() content_238))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_239)"
"(if(representative-scope? sc_239)"
"(intern-shifted-multi-scope(representative-scope-phase sc_239)(representative-scope-owner sc_239))"
" sc_239)))"
"(define-values"
"(add-scope)"
"(lambda(s_240 sc_241)(apply-scope s_240(generalize-scope sc_241) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_242 scs_243)"
"(let-values(((lst_244) scs_243))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(s_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((sc_248)(unsafe-car lst_247)))"
"(if #t"
"(let-values(((s_249)"
"(let-values(((s_250) s_246))"
"(let-values(((s_251)(let-values()(add-scope s_250 sc_248))))"
"(values s_251)))))"
"(if #t(for-loop_245 s_249(unsafe-cdr lst_247)) s_249))"
" s_246))"
" s_246))))"
" for-loop_245)"
" s_242"
" lst_244)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_252 sc_253)(apply-scope s_252(generalize-scope sc_253) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_254 scs_255)"
"(let-values(((lst_256) scs_255))"
"(begin"
"(if(list? lst_256)(void)(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(s_258 lst_259)"
"(if(pair? lst_259)"
"(let-values(((sc_260)(unsafe-car lst_259)))"
"(if #t"
"(let-values(((s_261)"
"(let-values(((s_262) s_258))"
"(let-values(((s_263)(let-values()(remove-scope s_262 sc_260))))"
"(values s_263)))))"
"(if #t(for-loop_257 s_261(unsafe-cdr lst_259)) s_261))"
" s_258))"
" s_258))))"
" for-loop_257)"
" s_254"
" lst_256)))))"
"(define-values"
"(set-flip)"
"(lambda(s_264 e_265)(if(set-member? s_264 e_265)(set-remove s_264 e_265)(set-add s_264 e_265))))"
"(define-values"
"(flip-scope)"
"(lambda(s_266 sc_267)(apply-scope s_266(generalize-scope sc_267) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_268 scs_269)"
"(let-values(((lst_270) scs_269))"
"(begin"
"(if(list? lst_270)(void)(let-values()(in-list lst_270)))"
"((letrec-values(((for-loop_271)"
"(lambda(s_272 lst_273)"
"(if(pair? lst_273)"
"(let-values(((sc_274)(unsafe-car lst_273)))"
"(if #t"
"(let-values(((s_275)"
"(let-values(((s_276) s_272))"
"(let-values(((s_277)(let-values()(flip-scope s_276 sc_274))))"
"(values s_277)))))"
"(if #t(for-loop_271 s_275(unsafe-cdr lst_273)) s_275))"
" s_272))"
" s_272))))"
" for-loop_271)"
" s_268"
" lst_270)))))"
"(define-values"
"(push-scope)"
"(lambda(s_278 sms_279)"
"(let-values(((smss/maybe-fallbacks34_280) #f))"
"(let-values(((prev-result_281) #f))"
"(let-values(((push_282)"
"(lambda(smss/maybe-fallbacks_283)"
"(if(eq? smss/maybe-fallbacks34_280 smss/maybe-fallbacks_283)"
"(let-values() prev-result_281)"
"(let-values()"
"(let-values(((r_284)"
"(let-values()"
"(let-values(((smss_285)(fallback-first smss/maybe-fallbacks_283)))"
"(if(set-empty? smss_285)"
"(let-values()(set-add smss_285 sms_279))"
"(if(set-member? smss_285 sms_279)"
"(let-values() smss/maybe-fallbacks_283)"
"(let-values()"
"(fallback-push"
"(set-add smss_285 sms_279)"
" smss/maybe-fallbacks_283))))))))"
"(begin"
"(set! smss/maybe-fallbacks34_280 smss/maybe-fallbacks_283)"
"(set! prev-result_281 r_284)"
" r_284)))))))"
"(syntax-map"
" s_278"
"(lambda(tail?_286 x_287) x_287)"
"(lambda(s_288 d_289)"
"(let-values(((the-struct_290) s_288))"
"(if(syntax?$1 the-struct_290)"
"(let-values(((content35_291) d_289)"
"((shifted-multi-scopes36_292)(push_282(syntax-shifted-multi-scopes s_288))))"
"(syntax1.1"
" content35_291"
"(syntax-scopes the-struct_290)"
" shifted-multi-scopes36_292"
"(syntax-scope-propagations the-struct_290)"
"(syntax-mpi-shifts the-struct_290)"
"(syntax-bulk-binding-registry the-struct_290)"
"(syntax-srcloc the-struct_290)"
"(syntax-props the-struct_290)"
"(syntax-inspector the-struct_290)"
"(syntax-tamper the-struct_290)))"
"                 (raise-argument-error 'struct-copy \"syntax?\" the-struct_290))))"
" syntax-e/no-taint))))))"
"(define-values"
"(struct:propagation propagation10.1 propagation? propagation-prev-scs propagation-prev-smss propagation-scope-ops)"
"(let-values(((struct:_293 make-_294 ?_295 -ref_296 -set!_297)"
"(make-struct-type"
" 'propagation"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'propagation)))"
"(values"
" struct:_293"
" make-_294"
" ?_295"
"(make-struct-field-accessor -ref_296 0 'prev-scs)"
"(make-struct-field-accessor -ref_296 1 'prev-smss)"
"(make-struct-field-accessor -ref_296 2 'scope-ops))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_324 sc_325 prev-scs_326 prev-smss_327)"
"(if prop_324"
"(let-values(((the-struct_328) prop_324))"
"(if(propagation? the-struct_328)"
"(let-values(((scope-ops38_329)(hash-set(propagation-scope-ops prop_324) sc_325 'add)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_328)"
"(propagation-prev-smss the-struct_328)"
" scope-ops38_329))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_328)))"
"(propagation10.1 prev-scs_326 prev-smss_327(hasheq sc_325 'add)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_330 sc_331 prev-scs_332 prev-smss_333)"
"(if prop_330"
"(let-values(((the-struct_334) prop_330))"
"(if(propagation? the-struct_334)"
"(let-values(((scope-ops39_335)(hash-set(propagation-scope-ops prop_330) sc_331 'remove)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_334)"
"(propagation-prev-smss the-struct_334)"
" scope-ops39_335))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_334)))"
"(propagation10.1 prev-scs_332 prev-smss_333(hasheq sc_331 'remove)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_336 sc_337 prev-scs_338 prev-smss_339)"
"(if prop_336"
"(let-values(((ops_340)(propagation-scope-ops prop_336)))"
"(let-values(((current-op_341)(hash-ref ops_340 sc_337 #f)))"
"(if(if(eq? current-op_341 'flip)(= 1(hash-count ops_340)) #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_342) prop_336))"
"(if(propagation? the-struct_342)"
"(let-values(((scope-ops40_343)"
"(if(eq? current-op_341 'flip)"
"(hash-remove ops_340 sc_337)"
"(hash-set"
" ops_340"
" sc_337"
"(let-values(((tmp_344) current-op_341))"
"(if(equal? tmp_344 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_344 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_342)"
"(propagation-prev-smss the-struct_342)"
" scope-ops40_343))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_342)))))))"
"(propagation10.1 prev-scs_338 prev-smss_339(hasheq sc_337 'flip)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_345 scs_346 parent-s_347)"
"(if(not prop_345)"
"(let-values() scs_346)"
"(if(eq?(propagation-prev-scs prop_345) scs_346)"
"(let-values()(syntax-scopes parent-s_347))"
"(let-values()"
"(let-values(((ht_348)(propagation-scope-ops prop_345)))"
"(begin"
"(if((lambda(ht_349)(if(hash? ht_349)(immutable? ht_349) #f)) ht_348)"
"(void)"
"(let-values()(default-in-immutable-hash ht_348)))"
"((letrec-values(((for-loop_350)"
"(lambda(scs_351 i_352)"
"(if i_352"
"(let-values(((sc_353 op_354)"
"(unsafe-immutable-hash-iterate-key+value ht_348 i_352)))"
"(if #t"
"(let-values(((scs_355)"
"(let-values(((scs_356) scs_351))"
"(if(not(shifted-multi-scope? sc_353))"
"(let-values(((scs_357) scs_356))"
"(let-values(((scs_358)"
"(let-values()"
"(let-values(((tmp_359) op_354))"
"(if(equal? tmp_359 'add)"
"(let-values()(set-add scs_357 sc_353))"
"(if(equal? tmp_359 'remove)"
"(let-values()"
"(set-remove scs_357 sc_353))"
"(let-values()"
"(set-flip scs_357 sc_353))))))))"
"(values scs_358)))"
" scs_356))))"
"(if #t"
"(for-loop_350 scs_355(unsafe-immutable-hash-iterate-next ht_348 i_352))"
" scs_355))"
" scs_351))"
" scs_351))))"
" for-loop_350)"
" scs_346"
"(unsafe-immutable-hash-iterate-first ht_348)))))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_360 smss_361 parent-s_362)"
"(if(not prop_360)"
"(let-values() smss_361)"
"(if(eq?(propagation-prev-smss prop_360) smss_361)"
"(let-values()(syntax-shifted-multi-scopes parent-s_362))"
"(let-values()"
"(let-values(((ht_363)(propagation-scope-ops prop_360)))"
"(begin"
"(if((lambda(ht_364)(if(hash? ht_364)(immutable? ht_364) #f)) ht_363)"
"(void)"
"(let-values()(default-in-immutable-hash ht_363)))"
"((letrec-values(((for-loop_365)"
"(lambda(smss_366 i_367)"
"(if i_367"
"(let-values(((sms_368 op_369)"
"(unsafe-immutable-hash-iterate-key+value ht_363 i_367)))"
"(if #t"
"(let-values(((smss_370)"
"(let-values(((smss_371) smss_366))"
"(if(shifted-multi-scope? sms_368)"
"(let-values(((smss_372) smss_371))"
"(let-values(((smss_373)"
"(let-values()"
"(fallback-update-first"
" smss_372"
"(lambda(smss_374)"
"(let-values(((tmp_375) op_369))"
"(if(equal? tmp_375 'add)"
"(let-values()"
"(set-add smss_374 sms_368))"
"(if(equal? tmp_375 'remove)"
"(let-values()"
"(set-remove smss_374 sms_368))"
"(let-values()"
"(set-flip"
" smss_374"
" sms_368))))))))))"
"(values smss_373)))"
" smss_371))))"
"(if #t"
"(for-loop_365 smss_370(unsafe-immutable-hash-iterate-next ht_363 i_367))"
" smss_370))"
" smss_366))"
" smss_366))))"
" for-loop_365)"
" smss_361"
"(unsafe-immutable-hash-iterate-first ht_363)))))))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_376 base-prop_377 prev-scs_378 prev-smss_379)"
"(if(not prop_376)"
"(let-values() base-prop_377)"
"(if(not base-prop_377)"
"(let-values()(propagation10.1 prev-scs_378 prev-smss_379(propagation-scope-ops prop_376)))"
"(let-values()"
"(let-values(((new-ops_380)"
"(let-values(((ht_381)(propagation-scope-ops prop_376)))"
"(begin"
"(if((lambda(ht_382)(if(hash? ht_382)(immutable? ht_382) #f)) ht_381)"
"(void)"
"(let-values()(default-in-immutable-hash ht_381)))"
"((letrec-values(((for-loop_383)"
"(lambda(ops_384 i_385)"
"(if i_385"
"(let-values(((sc_386 op_387)"
"(unsafe-immutable-hash-iterate-key+value ht_381 i_385)))"
"(if #t"
"(let-values(((ops_388)"
"(let-values(((ops_389) ops_384))"
"(let-values(((ops_390)"
"(let-values()"
"(let-values(((tmp_391) op_387))"
"(if(equal? tmp_391 'add)"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'add))"
"(if(equal? tmp_391 'remove)"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'remove))"
"(let-values()"
"(let-values(((current-op_392)"
"(hash-ref"
" ops_389"
" sc_386"
" #f)))"
"(let-values(((tmp_393)"
" current-op_392))"
"(if(equal?"
" tmp_393"
" 'add)"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'remove))"
"(if(equal?"
" tmp_393"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'add))"
"(if(equal?"
" tmp_393"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_389"
" sc_386))"
"(let-values()"
"(hash-set"
" ops_389"
" sc_386"
" 'flip))))))))))))))"
"(values ops_390)))))"
"(if #t"
"(for-loop_383"
" ops_388"
"(unsafe-immutable-hash-iterate-next ht_381 i_385))"
" ops_388))"
" ops_384))"
" ops_384))))"
" for-loop_383)"
"(propagation-scope-ops base-prop_377)"
"(unsafe-immutable-hash-iterate-first ht_381))))))"
"(if(zero?(hash-count new-ops_380))"
" #f"
"(let-values(((the-struct_394) base-prop_377))"
"(if(propagation? the-struct_394)"
"(let-values(((scope-ops41_395) new-ops_380))"
"(propagation10.1"
"(propagation-prev-scs the-struct_394)"
"(propagation-prev-smss the-struct_394)"
" scope-ops41_395))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_394))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_396 delta_397)"
"(if(zero-phase? delta_397)"
"(let-values() sms_396)"
"(if(label-phase? delta_397)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_396))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_396)))"
"(shifted-multi-scope-multi-scope sms_396)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_396))"
"(let-values() sms_396)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_397(shifted-multi-scope-phase sms_396))"
"(shifted-multi-scope-multi-scope sms_396))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_398 phase_399)"
"(if(eqv? phase_399 0)"
" s_398"
"(let-values()"
"(let-values(((smss42_400) #f))"
"(let-values(((prev-result_401) #f))"
"(let-values(((shift-all_402)"
"(lambda(smss_403)"
"(if(eq? smss42_400 smss_403)"
"(let-values() prev-result_401)"
"(let-values()"
"(let-values(((r_404)"
"(let-values()"
"(fallback-map"
" smss_403"
"(lambda(smss_405)"
"(let-values(((ht_406) smss_405))"
"(begin"
"(if((lambda(ht_407)(if(hash? ht_407)(immutable? ht_407) #f))"
" ht_406)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_406)))"
"((letrec-values(((for-loop_408)"
"(lambda(table_409 i_410)"
"(if i_410"
"(let-values(((sms_411)"
"(unsafe-immutable-hash-iterate-key"
" ht_406"
" i_410)))"
"(if #t"
"(let-values(((table_412)"
"(let-values(((new-sms_413)"
"(shift-multi-scope"
" sms_411"
" phase_399)))"
"(begin"
" #t"
"((letrec-values(((for-loop_414)"
"(lambda(table_415)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_416)"
"(let-values(((table_417)"
" table_415))"
"(if new-sms_413"
"(let-values(((table_418)"
" table_417))"
"(let-values(((table_419)"
"(let-values()"
"(let-values(((key_420"
" val_421)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_413)"
" #t))))"
"(hash-set"
" table_418"
" key_420"
" val_421)))))"
"(values"
" table_419)))"
" table_417))))"
"(if #f"
"(for-loop_414"
" table_416)"
" table_416))"
" table_415))"
" table_415))))"
" for-loop_414)"
" table_409)))))"
"(if #t"
"(for-loop_408"
" table_412"
"(unsafe-immutable-hash-iterate-next"
" ht_406"
" i_410))"
" table_412))"
" table_409))"
" table_409))))"
" for-loop_408)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_406)))))))))"
"(begin(set! smss42_400 smss_403)(set! prev-result_401 r_404) r_404)))))))"
"(syntax-map"
" s_398"
"(lambda(tail?_422 d_423) d_423)"
"(lambda(s_424 d_425)"
"(let-values(((the-struct_426) s_424))"
"(if(syntax?$1 the-struct_426)"
"(let-values(((content43_427) d_425)"
"((shifted-multi-scopes44_428)(shift-all_402(syntax-shifted-multi-scopes s_424))))"
"(syntax1.1"
" content43_427"
"(syntax-scopes the-struct_426)"
" shifted-multi-scopes44_428"
"(syntax-scope-propagations the-struct_426)"
"(syntax-mpi-shifts the-struct_426)"
"(syntax-bulk-binding-registry the-struct_426)"
"(syntax-srcloc the-struct_426)"
"(syntax-props the-struct_426)"
"(syntax-inspector the-struct_426)"
"(syntax-tamper the-struct_426)))"
"                     (raise-argument-error 'struct-copy \"syntax?\" the-struct_426))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_429 src-scopes_430 dest-scopes_431)"
"(if(equal? src-scopes_430 dest-scopes_431)"
" s_429"
"(let-values(((src-smss_432 src-scs_433)"
"(set-partition"
"(let-values(((ht_436) src-scopes_430))"
"(begin"
"(if((lambda(ht_437)(if(hash? ht_437)(immutable? ht_437) #f)) ht_436)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_436)))"
"((letrec-values(((for-loop_438)"
"(lambda(table_439 i_440)"
"(if i_440"
"(let-values(((sc_441)(unsafe-immutable-hash-iterate-key ht_436 i_440)))"
"(if #t"
"(let-values(((table_442)"
"(let-values(((table_443) table_439))"
"(let-values(((table_444)"
"(let-values()"
"(let-values(((key_445 val_446)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_441))"
" #t))))"
"(hash-set"
" table_443"
" key_445"
" val_446)))))"
"(values table_444)))))"
"(if #t"
"(for-loop_438"
" table_442"
"(unsafe-immutable-hash-iterate-next ht_436 i_440))"
" table_442))"
" table_439))"
" table_439))))"
" for-loop_438)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_436))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_434 dest-scs_435)"
"(set-partition"
"(let-values(((ht_447) dest-scopes_431))"
"(begin"
"(if((lambda(ht_448)(if(hash? ht_448)(immutable? ht_448) #f)) ht_447)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_447)))"
"((letrec-values(((for-loop_449)"
"(lambda(table_450 i_451)"
"(if i_451"
"(let-values(((sc_452)(unsafe-immutable-hash-iterate-key ht_447 i_451)))"
"(if #t"
"(let-values(((table_453)"
"(let-values(((table_454) table_450))"
"(let-values(((table_455)"
"(let-values()"
"(let-values(((key_456 val_457)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_452))"
" #t))))"
"(hash-set"
" table_454"
" key_456"
" val_457)))))"
"(values table_455)))))"
"(if #t"
"(for-loop_449"
" table_453"
"(unsafe-immutable-hash-iterate-next ht_447 i_451))"
" table_453))"
" table_450))"
" table_450))))"
" for-loop_449)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_447))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs45_458) #f))"
"(let-values(((prev-result_459) #f))"
"(let-values(((swap-scs_460)"
"(lambda(scs_464)"
"(if(eq? scs45_458 scs_464)"
"(let-values() prev-result_459)"
"(let-values()"
"(let-values(((r_465)"
"(let-values()"
"(if(subset? src-scs_433 scs_464)"
"(set-union(set-subtract scs_464 src-scs_433) dest-scs_435)"
" scs_464))))"
"(begin(set! scs45_458 scs_464)(set! prev-result_459 r_465) r_465)))))))"
"(let-values(((smss46_461) #f))"
"(let-values(((prev-result_462) #f))"
"(let-values(((swap-smss_463)"
"(lambda(smss_466)"
"(if(eq? smss46_461 smss_466)"
"(let-values() prev-result_462)"
"(let-values()"
"(let-values(((r_467)"
"(let-values()"
"(fallback-update-first"
" smss_466"
"(lambda(smss_468)"
"(if(subset? src-smss_432 smss_468)"
"(set-union"
"(set-subtract smss_468 src-smss_432)"
" dest-smss_434)"
" smss_468))))))"
"(begin(set! smss46_461 smss_466)(set! prev-result_462 r_467) r_467)))))))"
"(syntax-map"
" s_429"
"(lambda(tail?_469 d_470) d_470)"
"(lambda(s_471 d_472)"
"(let-values(((the-struct_473) s_471))"
"(if(syntax?$1 the-struct_473)"
"(let-values(((content47_474) d_472)"
"((scopes48_475)(swap-scs_460(syntax-scopes s_471)))"
"((shifted-multi-scopes49_476)"
"(swap-smss_463(syntax-shifted-multi-scopes s_471))))"
"(syntax1.1"
" content47_474"
" scopes48_475"
" shifted-multi-scopes49_476"
"(syntax-scope-propagations the-struct_473)"
"(syntax-mpi-shifts the-struct_473)"
"(syntax-bulk-binding-registry the-struct_473)"
"(syntax-srcloc the-struct_473)"
"(syntax-props the-struct_473)"
"(syntax-inspector the-struct_473)"
"(syntax-tamper the-struct_473)))"
"                           (raise-argument-error 'struct-copy \"syntax?\" the-struct_473))))"
" syntax-e/no-taint)))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_477 phase_478)"
"(scope-set-at-fallback s_477(fallback-first(syntax-shifted-multi-scopes s_477)) phase_478)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_479 smss_480 phase_481)"
"(let-values(((ht_482) smss_480))"
"(begin"
"(if((lambda(ht_483)(if(hash? ht_483)(immutable? ht_483) #f)) ht_482)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_482)))"
"((letrec-values(((for-loop_484)"
"(lambda(scopes_485 i_486)"
"(if i_486"
"(let-values(((sms_487)(unsafe-immutable-hash-iterate-key ht_482 i_486)))"
"(if #t"
"(let-values(((scopes_488)"
"(let-values(((scopes_489) scopes_485))"
"(if(let-values(((or-part_490)(label-phase? phase_481)))"
"(if or-part_490"
" or-part_490"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_487)))))"
"(let-values(((scopes_491) scopes_489))"
"(let-values(((scopes_492)"
"(let-values()"
"(set-add"
" scopes_491"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_487)"
"(let-values(((ph_493)"
"(shifted-multi-scope-phase"
" sms_487)))"
"(if(shifted-to-label-phase? ph_493)"
"(shifted-to-label-phase-from ph_493)"
"(phase- ph_493 phase_481))))))))"
"(values scopes_492)))"
" scopes_489))))"
"(if #t"
"(for-loop_484 scopes_488(unsafe-immutable-hash-iterate-next ht_482 i_486))"
" scopes_488))"
" scopes_485))"
" scopes_485))))"
" for-loop_484)"
"(syntax-scopes s_479)"
"(unsafe-immutable-hash-iterate-first ht_482))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_494)"
"(begin"
"      (if (set-empty? scopes_494) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_495) scopes_494))"
"(begin"
"(if((lambda(ht_496)(if(hash? ht_496)(immutable? ht_496) #f)) ht_495)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_495)))"
"((letrec-values(((for-loop_497)"
"(lambda(max-sc_498 i_499)"
"(if i_499"
"(let-values(((sc_500)(unsafe-immutable-hash-iterate-key ht_495 i_499)))"
"(if #t"
"(let-values(((max-sc_501)"
"(let-values(((max-sc_502) max-sc_498))"
"(let-values(((max-sc_503)"
"(let-values()"
"(if(scope>? sc_500 max-sc_502)"
" sc_500"
" max-sc_502))))"
"(values max-sc_503)))))"
"(if #t"
"(for-loop_497 max-sc_501(unsafe-immutable-hash-iterate-next ht_495 i_499))"
" max-sc_501))"
" max-sc_498))"
" max-sc_498))))"
" for-loop_497)"
"(set-first scopes_494)"
"(unsafe-immutable-hash-iterate-first ht_495)))))))"
"(define-values"
"(add-binding-in-scopes!)"
"(lambda(scopes_504 sym_505 binding_506)"
"(let-values(((max-sc_507)(find-max-scope scopes_504)))"
"(let-values(((bt_508)(binding-table-add(scope-binding-table max-sc_507) scopes_504 sym_505 binding_506)))"
"(begin(set-scope-binding-table! max-sc_507 bt_508)(clear-resolve-cache! sym_505))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_509 bulk-binding_510)"
"(let-values(((max-sc_511)(find-max-scope scopes_509)))"
"(let-values(((bt_512)(binding-table-add-bulk(scope-binding-table max-sc_511) scopes_509 bulk-binding_510)))"
"(begin(set-scope-binding-table! max-sc_511 bt_512)(clear-resolve-cache!))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_513)"
"(let-values(((ht_514)(syntax-scopes s_513)))"
"(begin"
"(if((lambda(ht_515)(if(hash? ht_515)(immutable? ht_515) #f)) ht_514)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_514)))"
"((letrec-values(((for-loop_516)"
"(lambda(result_517 i_518)"
"(if i_518"
"(let-values(((sc_519)(unsafe-immutable-hash-iterate-key ht_514 i_518)))"
"(if #t"
"(let-values(((result_520)"
"(let-values(((result_521) result_517))"
"(let-values(((result_522)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_519) 'macro)))))"
"(values result_522)))))"
"(if(if #t(not((lambda x_523 result_520) sc_519)) #f)"
"(for-loop_516 result_520(unsafe-immutable-hash-iterate-next ht_514 i_518))"
" result_520))"
" result_517))"
" result_517))))"
" for-loop_516)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_514))))))"
"(define-values"
"(resolve19.1)"
"(lambda(ambiguous-value11_524"
" ambiguous-value14_525"
" exactly?12_526"
" exactly?15_527"
" extra-shifts13_528"
" extra-shifts16_529"
" s17_530"
" phase18_531)"
"(let-values(((s_532) s17_530))"
"(let-values(((phase_533) phase18_531))"
"(let-values(((ambiguous-value_534)(if ambiguous-value14_525 ambiguous-value11_524 #f)))"
"(let-values(((exactly?_535)(if exactly?15_527 exactly?12_526 #f)))"
"(let-values(((extra-shifts_536)(if extra-shifts16_529 extra-shifts13_528 null)))"
"(let-values()"
"(begin"
"                  (if (identifier? s_532) (void) (let-values () (raise-argument-error 'resolve \"identifier?\" s_532)))"
"                  (if (phase? phase_533) (void) (let-values () (raise-argument-error 'resolve \"phase?\" phase_533)))"
"((letrec-values(((fallback-loop_537)"
"(lambda(smss_538)"
"(let-values(((scopes_539)"
"(scope-set-at-fallback s_532(fallback-first smss_538) phase_533)))"
"(let-values(((sym_540)(syntax-content s_532)))"
"(let-values(((c39137_541)"
"(if(not exactly?_535)"
"(resolve-cache-get sym_540 phase_533 scopes_539)"
" #f)))"
"(if c39137_541"
"((lambda(b_542) b_542) c39137_541)"
"(let-values()"
"(let-values(((candidates_543)"
"(alt-reverse"
"(let-values(((ht_545) scopes_539))"
"(begin"
"(if((lambda(ht_546)"
"(if(hash? ht_546)(immutable? ht_546) #f))"
" ht_545)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_545)))"
"((letrec-values(((for-loop_547)"
"(lambda(fold-var_548 i_549)"
"(if i_549"
"(let-values(((sc_550)"
"(unsafe-immutable-hash-iterate-key"
" ht_545"
" i_549)))"
"(if #t"
"(let-values(((fold-var_551)"
"(let-values(((ht_552"
" bulk-bindings_553)"
"(let-values(((table_556)"
"(scope-binding-table"
" sc_550)))"
"(if(hash?"
" table_556)"
"(values"
"(hash-ref"
" table_556"
" sym_540"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_556)"
" sym_540"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_556)))))"
"((s_554)"
" s_532)"
"((extra-shifts_555)"
" extra-shifts_536))"
"(begin"
" #t"
"((letrec-values(((for-loop_557)"
"(lambda(fold-var_558"
" i_559"
" already-covered-scopes_560)"
"(if(not"
"(null?"
" i_559))"
"(let-values(((b-scopes_561)"
"(if(pair?"
" i_559)"
"(let-values()"
"(let-values(((scs_563)"
"(bulk-binding-at-scopes"
"(car"
" i_559))))"
"(if(not"
"(set-member?"
" already-covered-scopes_560"
" scs_563))"
" scs_563"
" #f)))"
"(let-values()"
"(hash-iterate-key"
" ht_552"
" i_559))))"
"((binding_562)"
"(if(pair?"
" i_559)"
"(let-values()"
"(let-values(((bulk_564)"
"(bulk-binding-at-bulk"
"(car"
" i_559))))"
"(let-values(((b-info_565)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_564"
" s_554"
" extra-shifts_555)"
" sym_540"
" #f)))"
"(if b-info_565"
"((bulk-binding-create"
" bulk_564)"
" bulk_564"
" b-info_565"
" sym_540)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_552"
" i_559)))))"
"(if #t"
"(let-values(((fold-var_566)"
"(let-values(((fold-var_567)"
" fold-var_558))"
"(if(if b-scopes_561"
"(if binding_562"
"(subset?"
" b-scopes_561"
" scopes_539)"
" #f)"
" #f)"
"(let-values(((fold-var_568)"
" fold-var_567))"
"(let-values(((fold-var_569)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" b-scopes_561"
" binding_562))"
" fold-var_568))))"
"(values"
" fold-var_569)))"
" fold-var_567))))"
"(if #t"
"(for-loop_557"
" fold-var_566"
"(if(pair?"
" i_559)"
"(let-values()"
"(cdr"
" i_559))"
"(let-values()"
"(let-values(((or-part_570)"
"(hash-iterate-next"
" ht_552"
" i_559)))"
"(if or-part_570"
" or-part_570"
" bulk-bindings_553))))"
"(if(if(pair?"
" bulk-bindings_553)"
"(if b-scopes_561"
"(if binding_562"
"(let-values(((or-part_571)"
"(not"
"(pair?"
" i_559))))"
"(if or-part_571"
" or-part_571"
"(not"
"(null?"
"(cdr"
" i_559)))))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(set-add"
" already-covered-scopes_560"
" b-scopes_561))"
"(let-values()"
" already-covered-scopes_560)))"
" fold-var_566))"
" fold-var_558))"
" fold-var_558))))"
" for-loop_557)"
" fold-var_548"
"(let-values(((or-part_572)"
"(hash-iterate-first"
" ht_552)))"
"(if or-part_572"
" or-part_572"
" bulk-bindings_553))"
" '#hasheq())))))"
"(if #t"
"(for-loop_547"
" fold-var_551"
"(unsafe-immutable-hash-iterate-next"
" ht_545"
" i_549))"
" fold-var_551))"
" fold-var_548))"
" fold-var_548))))"
" for-loop_547)"
" null"
"(unsafe-immutable-hash-iterate-first ht_545)))))))"
"(let-values(((max-candidate_544)"
"(if(pair? candidates_543)"
"(let-values(((lst_573)(cdr candidates_543)))"
"(begin"
"(if(list? lst_573)"
"(void)"
"(let-values()(in-list lst_573)))"
"((letrec-values(((for-loop_574)"
"(lambda(max-c_575 lst_576)"
"(if(pair? lst_576)"
"(let-values(((c_577)"
"(unsafe-car"
" lst_576)))"
"(if #t"
"(let-values(((max-c_578)"
"(let-values(((max-c_579)"
" max-c_575))"
"(let-values(((max-c_580)"
"(let-values()"
"(if(>"
"(set-count"
"(car"
" c_577))"
"(set-count"
"(car"
" max-c_579)))"
" c_577"
" max-c_579))))"
"(values"
" max-c_580)))))"
"(if #t"
"(for-loop_574"
" max-c_578"
"(unsafe-cdr"
" lst_576))"
" max-c_578))"
" max-c_575))"
" max-c_575))))"
" for-loop_574)"
"(car candidates_543)"
" lst_573)))"
" #f)))"
"(if max-candidate_544"
"(let-values()"
"(if(not"
"(let-values(((lst_581) candidates_543))"
"(begin"
"(if(list? lst_581)"
"(void)"
"(let-values()(in-list lst_581)))"
"((letrec-values(((for-loop_582)"
"(lambda(result_583 lst_584)"
"(if(pair? lst_584)"
"(let-values(((c_585)"
"(unsafe-car"
" lst_584)))"
"(if #t"
"(let-values(((result_586)"
"(let-values(((result_587)"
" result_583))"
"(let-values(((result_588)"
"(let-values()"
"(let-values()"
"(subset?"
"(car"
" c_585)"
"(car"
" max-candidate_544))))))"
"(values"
" result_588)))))"
"(if(if #t"
"(not"
"((lambda x_589"
"(not result_586))"
" c_585))"
" #f)"
"(for-loop_582"
" result_586"
"(unsafe-cdr lst_584))"
" result_586))"
" result_583))"
" result_583))))"
" for-loop_582)"
" #t"
" lst_581))))"
"(let-values()"
"(if(fallback? smss_538)"
"(fallback-loop_537(fallback-rest smss_538))"
" ambiguous-value_534))"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_540"
" phase_533"
" scopes_539"
"(cdr max-candidate_544))"
"(if(let-values(((or-part_590)(not exactly?_535)))"
"(if or-part_590"
" or-part_590"
"(equal?"
"(set-count scopes_539)"
"(set-count(car max-candidate_544)))))"
"(cdr max-candidate_544)"
" #f)))))"
"(let-values()"
"(if(fallback? smss_538)"
"(fallback-loop_537(fallback-rest smss_538))"
" #f)))))))))))))"
" fallback-loop_537)"
"(syntax-shifted-multi-scopes s_532)))))))))))"
"(define-values"
"(unpack20.1$1)"
"(lambda(given-kws_591 given-args_592 s17_593 phase18_594)"
"(let-values(((ambiguous-value14_595)(if(pair? given-kws_591)(eq? '#:ambiguous-value(car given-kws_591)) #f)))"
"(let-values(((ambiguous-value11_596)(if ambiguous-value14_595(car given-args_592)(void)))"
"((given-kws_597)(if ambiguous-value14_595(cdr given-kws_591) given-kws_591))"
"((given-args_598)(if ambiguous-value14_595(cdr given-args_592) given-args_592)))"
"(let-values(((exactly?15_599)(if(pair? given-kws_597)(eq? '#:exactly?(car given-kws_597)) #f)))"
"(let-values(((exactly?12_600)(if exactly?15_599(car given-args_598)(void)))"
"((given-kws_601)(if exactly?15_599(cdr given-kws_597) given-kws_597))"
"((given-args_602)(if exactly?15_599(cdr given-args_598) given-args_598)))"
"(let-values(((extra-shifts16_603)(pair? given-kws_601)))"
"(let-values(((extra-shifts13_604)(if extra-shifts16_603(car given-args_602)(void))))"
"(resolve19.1"
" ambiguous-value11_596"
" ambiguous-value14_595"
" exactly?12_600"
" exactly?15_599"
" extra-shifts13_604"
" extra-shifts16_603"
" s17_593"
" phase18_594)))))))))"
"(define-values"
"(resolve21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_605 given-argc_606)"
"(if(= given-argc_606 4)"
"(let-values(((l1_607) given-kws_605))"
"(let-values(((l1_608)"
"(if(null? l1_607) l1_607(if(eq?(car l1_607) '#:ambiguous-value)(cdr l1_607) l1_607))))"
"(let-values(((l1_609) l1_608))"
"(let-values(((l1_610)(if(null? l1_609) l1_609(if(eq?(car l1_609) '#:exactly?)(cdr l1_609) l1_609))))"
"(let-values(((l1_611) l1_610))"
"(let-values(((l1_612)"
"(if(null? l1_611) l1_611(if(eq?(car l1_611) '#:extra-shifts)(cdr l1_611) l1_611))))"
"(null? l1_612)))))))"
" #f))"
"(case-lambda"
"((given-kws_613 given-args_614 s_615 phase_616)(unpack20.1$1 given-kws_613 given-args_614 s_615 phase_616)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(let-values(((resolve_617)(case-lambda((s_618 phase_619)(unpack20.1$1 null null s_618 phase_619)))))"
" resolve_617)))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_620 b_621 phase_622)"
"(if(eq?(syntax-e$1 a_620)(syntax-e$1 b_621))"
"(equal?(syntax-scope-set a_620 phase_622)(syntax-scope-set b_621 phase_622))"
" #f)))"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 #f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-bulk-binding-registry the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_11"
"                               \"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-bulk-binding-registry the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
"      (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 #f)))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_19)"
"(begin"
"      (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_19)))"
"(alt-reverse"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(if(hash? ht_21)(immutable? ht_21) #f)) ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)(unsafe-immutable-hash-iterate-key+value ht_20 i_24)))"
"(if #t"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_23))"
"(if(if(symbol? k_25)(symbol-interned? k_25) #f)"
"(let-values(((fold-var_29) fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons(let-values() k_25) fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(if #t"
"(for-loop_22 fold-var_27(unsafe-immutable-hash-iterate-next ht_20 i_24))"
" fold-var_27))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first ht_20))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_31 key_32)"
"(if(hash-ref(syntax-props s_31) key_32 #f)"
"(let-values(((the-struct_33) s_31))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props3_34)(hash-remove(syntax-props s_31) key_32)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-bulk-binding-registry the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props3_34"
"(syntax-inspector the-struct_33)"
"(syntax-tamper the-struct_33)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))"
" s_31)))"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_27)(binding-free=id b_27))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_28)(if(full-binding? b_28)(full-binding-frame-id b_28) #f)))"
"(define-values(binding-free=id)(lambda(b_29)(if(full-binding? b_29)(full-binding-free=id b_29) #f)))"
"(define-values"
"(make-module-binding20.1)"
"(lambda(extra-inspector8_1"
" extra-inspector16_2"
" frame-id6_3"
" frame-id14_4"
" free=id7_5"
" free=id15_6"
" nominal-module2_7"
" nominal-module10_8"
" nominal-phase3_9"
" nominal-phase11_10"
" nominal-require-phase5_11"
" nominal-require-phase13_12"
" nominal-sym4_13"
" nominal-sym12_14"
" wrt1_15"
" wrt9_16"
" module17_17"
" phase18_18"
" sym19_19)"
"(let-values(((module_20) module17_17))"
"(let-values(((phase_21) phase18_18))"
"(let-values(((sym_22) sym19_19))"
"(let-values(((wrt-sym_23)(if wrt9_16 wrt1_15 sym_22)))"
"(let-values(((nominal-module_24)(if nominal-module10_8 nominal-module2_7 module_20)))"
"(let-values(((nominal-phase_25)(if nominal-phase11_10 nominal-phase3_9 phase_21)))"
"(let-values(((nominal-sym_26)(if nominal-sym12_14 nominal-sym4_13 sym_22)))"
"(let-values(((nominal-require-phase_27)(if nominal-require-phase13_12 nominal-require-phase5_11 0)))"
"(let-values(((frame-id_28)(if frame-id14_4 frame-id6_3 #f)))"
"(let-values(((free=id_29)(if free=id15_6 free=id7_5 #f)))"
"(let-values(((extra-inspector_30)(if extra-inspector16_2 extra-inspector8_1 #f)))"
"(let-values()"
"(if(let-values(((or-part_31) frame-id_28))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32) free=id_29))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33) extra-inspector_30))"
"(if or-part_33"
" or-part_33"
"(not"
"(if(eq? nominal-module_24 module_20)"
"(if(eqv? nominal-phase_25 phase_21)"
"(if(eq? nominal-sym_26 sym_22)(eqv? nominal-require-phase_27 0) #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding47.1"
" frame-id_28"
" free=id_29"
" module_20"
" phase_21"
" sym_22"
" nominal-module_24"
" nominal-phase_25"
" nominal-sym_26"
" nominal-require-phase_27"
" extra-inspector_30))"
"(let-values()(simple-module-binding48.1 module_20 phase_21 sym_22)))))))))))))))))"
"(define-values"
"(unpack21.1$1)"
"(lambda(given-kws_34 given-args_35 module17_36 phase18_37 sym19_38)"
"(let-values(((extra-inspector16_39)(if(pair? given-kws_34)(eq? '#:extra-inspector(car given-kws_34)) #f)))"
"(let-values(((extra-inspector8_40)(if extra-inspector16_39(car given-args_35)(void)))"
"((given-kws_41)(if extra-inspector16_39(cdr given-kws_34) given-kws_34))"
"((given-args_42)(if extra-inspector16_39(cdr given-args_35) given-args_35)))"
"(let-values(((frame-id14_43)(if(pair? given-kws_41)(eq? '#:frame-id(car given-kws_41)) #f)))"
"(let-values(((frame-id6_44)(if frame-id14_43(car given-args_42)(void)))"
"((given-kws_45)(if frame-id14_43(cdr given-kws_41) given-kws_41))"
"((given-args_46)(if frame-id14_43(cdr given-args_42) given-args_42)))"
"(let-values(((free=id15_47)(if(pair? given-kws_45)(eq? '#:free=id(car given-kws_45)) #f)))"
"(let-values(((free=id7_48)(if free=id15_47(car given-args_46)(void)))"
"((given-kws_49)(if free=id15_47(cdr given-kws_45) given-kws_45))"
"((given-args_50)(if free=id15_47(cdr given-args_46) given-args_46)))"
"(let-values(((nominal-module10_51)"
"(if(pair? given-kws_49)(eq? '#:nominal-module(car given-kws_49)) #f)))"
"(let-values(((nominal-module2_52)(if nominal-module10_51(car given-args_50)(void)))"
"((given-kws_53)(if nominal-module10_51(cdr given-kws_49) given-kws_49))"
"((given-args_54)(if nominal-module10_51(cdr given-args_50) given-args_50)))"
"(let-values(((nominal-phase11_55)"
"(if(pair? given-kws_53)(eq? '#:nominal-phase(car given-kws_53)) #f)))"
"(let-values(((nominal-phase3_56)(if nominal-phase11_55(car given-args_54)(void)))"
"((given-kws_57)(if nominal-phase11_55(cdr given-kws_53) given-kws_53))"
"((given-args_58)(if nominal-phase11_55(cdr given-args_54) given-args_54)))"
"(let-values(((nominal-require-phase13_59)"
"(if(pair? given-kws_57)(eq? '#:nominal-require-phase(car given-kws_57)) #f)))"
"(let-values(((nominal-require-phase5_60)"
"(if nominal-require-phase13_59(car given-args_58)(void)))"
"((given-kws_61)(if nominal-require-phase13_59(cdr given-kws_57) given-kws_57))"
"((given-args_62)"
"(if nominal-require-phase13_59(cdr given-args_58) given-args_58)))"
"(let-values(((nominal-sym12_63)"
"(if(pair? given-kws_61)(eq? '#:nominal-sym(car given-kws_61)) #f)))"
"(let-values(((nominal-sym4_64)(if nominal-sym12_63(car given-args_62)(void)))"
"((given-kws_65)(if nominal-sym12_63(cdr given-kws_61) given-kws_61))"
"((given-args_66)(if nominal-sym12_63(cdr given-args_62) given-args_62)))"
"(let-values(((wrt9_67)(pair? given-kws_65)))"
"(let-values(((wrt1_68)(if wrt9_67(car given-args_66)(void))))"
"(make-module-binding20.1"
" extra-inspector8_40"
" extra-inspector16_39"
" frame-id6_44"
" frame-id14_43"
" free=id7_48"
" free=id15_47"
" nominal-module2_52"
" nominal-module10_51"
" nominal-phase3_56"
" nominal-phase11_55"
" nominal-require-phase5_60"
" nominal-require-phase13_59"
" nominal-sym4_64"
" nominal-sym12_63"
" wrt1_68"
" wrt9_67"
" module17_36"
" phase18_37"
" sym19_38)))))))))))))))))))"
"(define-values"
"(make-module-binding22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_69 given-argc_70)"
"(if(= given-argc_70 5)"
"(let-values(((l1_71) given-kws_69))"
"(let-values(((l1_72)(if(null? l1_71) l1_71(if(eq?(car l1_71) '#:extra-inspector)(cdr l1_71) l1_71))))"
"(let-values(((l1_73) l1_72))"
"(let-values(((l1_74)(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:frame-id)(cdr l1_73) l1_73))))"
"(let-values(((l1_75) l1_74))"
"(let-values(((l1_76)(if(null? l1_75) l1_75(if(eq?(car l1_75) '#:free=id)(cdr l1_75) l1_75))))"
"(let-values(((l1_77) l1_76))"
"(let-values(((l1_78)"
"(if(null? l1_77) l1_77(if(eq?(car l1_77) '#:nominal-module)(cdr l1_77) l1_77))))"
"(let-values(((l1_79) l1_78))"
"(let-values(((l1_80)"
"(if(null? l1_79)"
" l1_79"
"(if(eq?(car l1_79) '#:nominal-phase)(cdr l1_79) l1_79))))"
"(let-values(((l1_81) l1_80))"
"(let-values(((l1_82)"
"(if(null? l1_81)"
" l1_81"
"(if(eq?(car l1_81) '#:nominal-require-phase)(cdr l1_81) l1_81))))"
"(let-values(((l1_83) l1_82))"
"(let-values(((l1_84)"
"(if(null? l1_83)"
" l1_83"
"(if(eq?(car l1_83) '#:nominal-sym)(cdr l1_83) l1_83))))"
"(let-values(((l1_85) l1_84))"
"(let-values(((l1_86)"
"(if(null? l1_85)"
" l1_85"
"(if(eq?(car l1_85) '#:wrt)(cdr l1_85) l1_85))))"
"(null? l1_86)))))))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_87 given-args_88 module_89 phase_90 sym_91)"
"(unpack21.1$1 given-kws_87 given-args_88 module_89 phase_90 sym_91)))"
" null"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:wrt)"
"(let-values(((make-module-binding_92)"
"(case-lambda((module_93 phase_94 sym_95)(unpack21.1$1 null null module_93 phase_94 sym_95)))))"
" make-module-binding_92)))"
"(define-values"
"(module-binding-update44.1)"
"(lambda(extra-inspector32_96"
" extra-inspector42_97"
" frame-id30_98"
" frame-id40_99"
" free=id31_100"
" free=id41_101"
" module23_102"
" module33_103"
" nominal-module26_104"
" nominal-module36_105"
" nominal-phase27_106"
" nominal-phase37_107"
" nominal-require-phase29_108"
" nominal-require-phase39_109"
" nominal-sym28_110"
" nominal-sym38_111"
" phase24_112"
" phase34_113"
" sym25_114"
" sym35_115"
" b43_116)"
"(let-values(((b_117) b43_116))"
"(let-values(((module_118)(if module33_103 module23_102(module-binding-module b_117))))"
"(let-values(((phase_119)(if phase34_113 phase24_112(module-binding-phase b_117))))"
"(let-values(((sym_120)(if sym35_115 sym25_114(module-binding-sym b_117))))"
"(let-values(((nominal-module_121)"
"(if nominal-module36_105 nominal-module26_104(module-binding-nominal-module b_117))))"
"(let-values(((nominal-phase_122)"
"(if nominal-phase37_107 nominal-phase27_106(module-binding-nominal-phase b_117))))"
"(let-values(((nominal-sym_123)"
"(if nominal-sym38_111 nominal-sym28_110(module-binding-nominal-sym b_117))))"
"(let-values(((nominal-require-phase_124)"
"(if nominal-require-phase39_109"
" nominal-require-phase29_108"
"(module-binding-nominal-require-phase b_117))))"
"(let-values(((frame-id_125)(if frame-id40_99 frame-id30_98(binding-frame-id b_117))))"
"(let-values(((free=id_126)(if free=id41_101 free=id31_100(binding-free=id b_117))))"
"(let-values(((extra-inspector_127)"
"(if extra-inspector42_97"
" extra-inspector32_96"
"(module-binding-extra-inspector b_117))))"
"(let-values()"
"(let-values(((...x/module-binding.rkt:62:2_128) make-module-binding22.1)"
"((module49_129) module_118)"
"((phase50_130) phase_119)"
"((sym51_131) sym_120)"
"((nominal-module52_132) nominal-module_121)"
"((nominal-phase53_133) nominal-phase_122)"
"((nominal-sym54_134) nominal-sym_123)"
"((nominal-require-phase55_135) nominal-require-phase_124)"
"((frame-id56_136) frame-id_125)"
"((free=id57_137) free=id_126)"
"((extra-inspector58_138) extra-inspector_127))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" extra-inspector58_138"
" #t"
" frame-id56_136"
" #t"
" free=id57_137"
" #t"
" nominal-module52_132"
" #t"
" nominal-phase53_133"
" #t"
" nominal-require-phase55_135"
" #t"
" nominal-sym54_134"
" #t"
" #f"
" #f"
" module49_129"
" phase50_130"
" sym51_131)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:62:2_128"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 5)"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" extra-inspector58_138"
" frame-id56_136"
" free=id57_137"
" nominal-module52_132"
" nominal-phase53_133"
" nominal-require-phase55_135"
" nominal-sym54_134)"
" module49_129"
" phase50_130"
" sym51_131)))))))))))))))))"
"(define-values"
"(unpack45.1)"
"(lambda(given-kws_139 given-args_140 b43_141)"
"(let-values(((extra-inspector42_142)(if(pair? given-kws_139)(eq? '#:extra-inspector(car given-kws_139)) #f)))"
"(let-values(((extra-inspector32_143)(if extra-inspector42_142(car given-args_140)(void)))"
"((given-kws_144)(if extra-inspector42_142(cdr given-kws_139) given-kws_139))"
"((given-args_145)(if extra-inspector42_142(cdr given-args_140) given-args_140)))"
"(let-values(((frame-id40_146)(if(pair? given-kws_144)(eq? '#:frame-id(car given-kws_144)) #f)))"
"(let-values(((frame-id30_147)(if frame-id40_146(car given-args_145)(void)))"
"((given-kws_148)(if frame-id40_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if frame-id40_146(cdr given-args_145) given-args_145)))"
"(let-values(((free=id41_150)(if(pair? given-kws_148)(eq? '#:free=id(car given-kws_148)) #f)))"
"(let-values(((free=id31_151)(if free=id41_150(car given-args_149)(void)))"
"((given-kws_152)(if free=id41_150(cdr given-kws_148) given-kws_148))"
"((given-args_153)(if free=id41_150(cdr given-args_149) given-args_149)))"
"(let-values(((module33_154)(if(pair? given-kws_152)(eq? '#:module(car given-kws_152)) #f)))"
"(let-values(((module23_155)(if module33_154(car given-args_153)(void)))"
"((given-kws_156)(if module33_154(cdr given-kws_152) given-kws_152))"
"((given-args_157)(if module33_154(cdr given-args_153) given-args_153)))"
"(let-values(((nominal-module36_158)"
"(if(pair? given-kws_156)(eq? '#:nominal-module(car given-kws_156)) #f)))"
"(let-values(((nominal-module26_159)(if nominal-module36_158(car given-args_157)(void)))"
"((given-kws_160)(if nominal-module36_158(cdr given-kws_156) given-kws_156))"
"((given-args_161)(if nominal-module36_158(cdr given-args_157) given-args_157)))"
"(let-values(((nominal-phase37_162)"
"(if(pair? given-kws_160)(eq? '#:nominal-phase(car given-kws_160)) #f)))"
"(let-values(((nominal-phase27_163)(if nominal-phase37_162(car given-args_161)(void)))"
"((given-kws_164)(if nominal-phase37_162(cdr given-kws_160) given-kws_160))"
"((given-args_165)(if nominal-phase37_162(cdr given-args_161) given-args_161)))"
"(let-values(((nominal-require-phase39_166)"
"(if(pair? given-kws_164)"
"(eq? '#:nominal-require-phase(car given-kws_164))"
" #f)))"
"(let-values(((nominal-require-phase29_167)"
"(if nominal-require-phase39_166(car given-args_165)(void)))"
"((given-kws_168)"
"(if nominal-require-phase39_166(cdr given-kws_164) given-kws_164))"
"((given-args_169)"
"(if nominal-require-phase39_166(cdr given-args_165) given-args_165)))"
"(let-values(((nominal-sym38_170)"
"(if(pair? given-kws_168)(eq? '#:nominal-sym(car given-kws_168)) #f)))"
"(let-values(((nominal-sym28_171)(if nominal-sym38_170(car given-args_169)(void)))"
"((given-kws_172)"
"(if nominal-sym38_170(cdr given-kws_168) given-kws_168))"
"((given-args_173)"
"(if nominal-sym38_170(cdr given-args_169) given-args_169)))"
"(let-values(((phase34_174)"
"(if(pair? given-kws_172)(eq? '#:phase(car given-kws_172)) #f)))"
"(let-values(((phase24_175)(if phase34_174(car given-args_173)(void)))"
"((given-kws_176)(if phase34_174(cdr given-kws_172) given-kws_172))"
"((given-args_177)"
"(if phase34_174(cdr given-args_173) given-args_173)))"
"(let-values(((sym35_178)(pair? given-kws_176)))"
"(let-values(((sym25_179)(if sym35_178(car given-args_177)(void))))"
"(module-binding-update44.1"
" extra-inspector32_143"
" extra-inspector42_142"
" frame-id30_147"
" frame-id40_146"
" free=id31_151"
" free=id41_150"
" module23_155"
" module33_154"
" nominal-module26_159"
" nominal-module36_158"
" nominal-phase27_163"
" nominal-phase37_162"
" nominal-require-phase29_167"
" nominal-require-phase39_166"
" nominal-sym28_171"
" nominal-sym38_170"
" phase24_175"
" phase34_174"
" sym25_179"
" sym35_178"
" b43_141)))))))))))))))))))))))"
"(define-values"
"(module-binding-update46.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_180 given-argc_181)"
"(if(= given-argc_181 3)"
"(let-values(((l1_182) given-kws_180))"
"(let-values(((l1_183)"
"(if(null? l1_182) l1_182(if(eq?(car l1_182) '#:extra-inspector)(cdr l1_182) l1_182))))"
"(let-values(((l1_184) l1_183))"
"(let-values(((l1_185)(if(null? l1_184) l1_184(if(eq?(car l1_184) '#:frame-id)(cdr l1_184) l1_184))))"
"(let-values(((l1_186) l1_185))"
"(let-values(((l1_187)"
"(if(null? l1_186) l1_186(if(eq?(car l1_186) '#:free=id)(cdr l1_186) l1_186))))"
"(let-values(((l1_188) l1_187))"
"(let-values(((l1_189)"
"(if(null? l1_188) l1_188(if(eq?(car l1_188) '#:module)(cdr l1_188) l1_188))))"
"(let-values(((l1_190) l1_189))"
"(let-values(((l1_191)"
"(if(null? l1_190)"
" l1_190"
"(if(eq?(car l1_190) '#:nominal-module)(cdr l1_190) l1_190))))"
"(let-values(((l1_192) l1_191))"
"(let-values(((l1_193)"
"(if(null? l1_192)"
" l1_192"
"(if(eq?(car l1_192) '#:nominal-phase)(cdr l1_192) l1_192))))"
"(let-values(((l1_194) l1_193))"
"(let-values(((l1_195)"
"(if(null? l1_194)"
" l1_194"
"(if(eq?(car l1_194) '#:nominal-require-phase)(cdr l1_194) l1_194))))"
"(let-values(((l1_196) l1_195))"
"(let-values(((l1_197)"
"(if(null? l1_196)"
" l1_196"
"(if(eq?(car l1_196) '#:nominal-sym)(cdr l1_196) l1_196))))"
"(let-values(((l1_198) l1_197))"
"(let-values(((l1_199)"
"(if(null? l1_198)"
" l1_198"
"(if(eq?(car l1_198) '#:phase)(cdr l1_198) l1_198))))"
"(let-values(((l1_200) l1_199))"
"(let-values(((l1_201)"
"(if(null? l1_200)"
" l1_200"
"(if(eq?(car l1_200) '#:sym)(cdr l1_200) l1_200))))"
"(null? l1_201)))))))))))))))))))))"
" #f))"
"(case-lambda((given-kws_202 given-args_203 b_204)(unpack45.1 given-kws_202 given-args_203 b_204)))"
" null"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:phase"
" #:sym)"
"(let-values(((module-binding-update_205)(case-lambda((b_206)(unpack45.1 null null b_206)))))"
" module-binding-update_205)))"
"(define-values"
"(module-binding?)"
"(lambda(b_207)"
"(let-values(((or-part_208)(simple-module-binding? b_207)))"
"(if or-part_208 or-part_208(full-module-binding? b_207)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding47.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector)"
"(let-values(((struct:_209 make-_210 ?_211 -ref_212 -set!_213)"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_265 ser_266 state_267)"
"(let-values(((simplified-b_268)"
"(if(full-binding-frame-id b_265)"
"(let-values(((...x/module-binding.rkt:87:16_269) module-binding-update46.1)"
"((b60_270) b_265)"
"((temp61_271) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" temp61_271"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b60_270)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:87:16_269"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list temp61_271)"
" b60_270)))"
" b_265)))"
"(if(full-module-binding? simplified-b_268)"
"(let-values()"
"(list"
" 'deserialize-full-module-binding"
"(ser_266(full-module-binding-module b_265))"
"(ser_266(full-module-binding-sym b_265))"
"(ser_266(full-module-binding-phase b_265))"
"(ser_266(full-module-binding-nominal-module b_265))"
"(ser_266(full-module-binding-nominal-phase b_265))"
"(ser_266(full-module-binding-nominal-sym b_265))"
"(ser_266(full-module-binding-nominal-require-phase b_265))"
"(ser_266(full-binding-free=id b_265))"
"(if(full-module-binding-extra-inspector b_265) '#:inspector(ser_266 #f))))"
"(let-values()(ser_266 simplified-b_268)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7)"
" #f"
" 'full-module-binding)))"
"(values"
" struct:_209"
" make-_210"
" ?_211"
"(make-struct-field-accessor -ref_212 0 'module)"
"(make-struct-field-accessor -ref_212 1 'phase)"
"(make-struct-field-accessor -ref_212 2 'sym)"
"(make-struct-field-accessor -ref_212 3 'nominal-module)"
"(make-struct-field-accessor -ref_212 4 'nominal-phase)"
"(make-struct-field-accessor -ref_212 5 'nominal-sym)"
"(make-struct-field-accessor -ref_212 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_212 7 'extra-inspector))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding48.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym)"
"(let-values(((struct:_272 make-_273 ?_274 -ref_275 -set!_276)"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_303 ser_304 state_305)"
"(list"
" 'deserialize-simple-module-binding"
"(ser_304(simple-module-binding-module b_303))"
"(ser_304(simple-module-binding-sym b_303))"
"(ser_304(simple-module-binding-phase b_303))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'simple-module-binding)))"
"(values"
" struct:_272"
" make-_273"
" ?_274"
"(make-struct-field-accessor -ref_275 0 'module)"
"(make-struct-field-accessor -ref_275 1 'phase)"
"(make-struct-field-accessor -ref_275 2 'sym))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_306"
" sym_307"
" phase_308"
" nominal-module_309"
" nominal-phase_310"
" nominal-sym_311"
" nominal-require-phase_312"
" free=id_313"
" extra-inspector_314)"
"(let-values(((...x/module-binding.rkt:125:2_315) make-module-binding22.1)"
"((module63_316) module_306)"
"((phase64_317) phase_308)"
"((sym65_318) sym_307)"
"((nominal-module66_319) nominal-module_309)"
"((nominal-phase67_320) nominal-phase_310)"
"((nominal-sym68_321) nominal-sym_311)"
"((nominal-require-phase69_322) nominal-require-phase_312)"
"((free=id70_323) free=id_313)"
"((extra-inspector71_324) extra-inspector_314))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" extra-inspector71_324"
" #t"
" #f"
" #f"
" free=id70_323"
" #t"
" nominal-module66_319"
" #t"
" nominal-phase67_320"
" #t"
" nominal-require-phase69_322"
" #t"
" nominal-sym68_321"
" #t"
" #f"
" #f"
" module63_316"
" phase64_317"
" sym65_318)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:125:2_315"
" keyword-procedure-extract"
" '(#:extra-inspector #:free=id #:nominal-module #:nominal-phase #:nominal-require-phase #:nominal-sym)"
" 5)"
" '(#:extra-inspector #:free=id #:nominal-module #:nominal-phase #:nominal-require-phase #:nominal-sym)"
"(list"
" extra-inspector71_324"
" free=id70_323"
" nominal-module66_319"
" nominal-phase67_320"
" nominal-require-phase69_322"
" nominal-sym68_321)"
" module63_316"
" phase64_317"
" sym65_318)))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_325 sym_326 phase_327)(simple-module-binding48.1 module_325 phase_327 sym_326)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_328)"
"(if(simple-module-binding? b_328)(simple-module-binding-module b_328)(full-module-binding-module b_328))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_329)"
"(if(simple-module-binding? b_329)(simple-module-binding-phase b_329)(full-module-binding-phase b_329))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_330)"
"(if(simple-module-binding? b_330)(simple-module-binding-sym b_330)(full-module-binding-sym b_330))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_331)"
"(if(simple-module-binding? b_331)"
"(simple-module-binding-module b_331)"
"(full-module-binding-nominal-module b_331))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_332)"
"(if(simple-module-binding? b_332)(simple-module-binding-phase b_332)(full-module-binding-nominal-phase b_332))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_333)"
"(if(simple-module-binding? b_333)(simple-module-binding-sym b_333)(full-module-binding-nominal-sym b_333))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_334)(if(simple-module-binding? b_334) 0(full-module-binding-nominal-require-phase b_334))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_335)(if(simple-module-binding? b_335) #f(full-module-binding-extra-inspector b_335))))"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_24 ser_25 state_26)"
"(list"
" 'deserialize-full-local-binding"
"(ser_25(full-local-binding-key b_24))"
"(ser_25(full-binding-free=id b_24))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_27 free=id_28)(full-local-binding1.1 #f free=id_28 key_27)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_29 frame-id4_30 free=id3_31 free=id5_32 key6_33)"
"(let-values(((key_34) key6_33))"
"(let-values(((frame-id_35)(if frame-id4_30 frame-id2_29 #f)))"
"(let-values(((free=id_36)(if free=id5_32 free=id3_31 #f)))"
"(let-values()"
"(if(if(not frame-id_35)(not free=id_36) #f)"
"(let-values() key_34)"
"(let-values()(full-local-binding1.1 frame-id_35 free=id_36 key_34)))))))))"
"(define-values"
"(unpack8.1)"
"(lambda(given-kws_37 given-args_38 key6_39)"
"(let-values(((frame-id4_40)(if(pair? given-kws_37)(eq? '#:frame-id(car given-kws_37)) #f)))"
"(let-values(((frame-id2_41)(if frame-id4_40(car given-args_38)(void)))"
"((given-kws_42)(if frame-id4_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if frame-id4_40(cdr given-args_38) given-args_38)))"
"(let-values(((free=id5_44)(pair? given-kws_42)))"
"(let-values(((free=id3_45)(if free=id5_44(car given-args_43)(void))))"
"(make-local-binding7.1 frame-id2_41 frame-id4_40 free=id3_45 free=id5_44 key6_39)))))))"
"(define-values"
"(make-local-binding9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_46 given-argc_47)"
"(if(= given-argc_47 3)"
"(let-values(((l1_48) given-kws_46))"
"(let-values(((l1_49)(if(null? l1_48) l1_48(if(eq?(car l1_48) '#:frame-id)(cdr l1_48) l1_48))))"
"(let-values(((l1_50) l1_49))"
"(let-values(((l1_51)(if(null? l1_50) l1_50(if(eq?(car l1_50) '#:free=id)(cdr l1_50) l1_50))))"
"(null? l1_51)))))"
" #f))"
"(case-lambda((given-kws_52 given-args_53 key_54)(unpack8.1 given-kws_52 given-args_53 key_54)))"
" null"
" '(#:frame-id #:free=id)"
"(let-values(((make-local-binding_55)(case-lambda((key_56)(unpack8.1 null null key_56)))))"
" make-local-binding_55)))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_57 frame-id14_58 free=id12_59 free=id15_60 key10_61 key13_62 b16_63)"
"(let-values(((b_64) b16_63))"
"(let-values(((key_65)(if key13_62 key10_61(local-binding-key b_64))))"
"(let-values(((frame-id_66)(if frame-id14_58 frame-id11_57(binding-frame-id b_64))))"
"(let-values(((free=id_67)(if free=id15_60 free=id12_59(binding-free=id b_64))))"
"(let-values()"
"(let-values(((...ax/local-binding.rkt:49:2_68) make-local-binding9.1)"
"((key21_69) key_65)"
"((frame-id22_70) frame-id_66)"
"((free=id23_71) free=id_67))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id22_70 #t free=id23_71 #t key21_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ax/local-binding.rkt:49:2_68"
" keyword-procedure-extract"
" '(#:frame-id #:free=id)"
" 3)"
" '(#:frame-id #:free=id)"
"(list frame-id22_70 free=id23_71)"
" key21_69))))))))))"
"(define-values"
"(unpack18.1$3)"
"(lambda(given-kws_72 given-args_73 b16_74)"
"(let-values(((frame-id14_75)(if(pair? given-kws_72)(eq? '#:frame-id(car given-kws_72)) #f)))"
"(let-values(((frame-id11_76)(if frame-id14_75(car given-args_73)(void)))"
"((given-kws_77)(if frame-id14_75(cdr given-kws_72) given-kws_72))"
"((given-args_78)(if frame-id14_75(cdr given-args_73) given-args_73)))"
"(let-values(((free=id15_79)(if(pair? given-kws_77)(eq? '#:free=id(car given-kws_77)) #f)))"
"(let-values(((free=id12_80)(if free=id15_79(car given-args_78)(void)))"
"((given-kws_81)(if free=id15_79(cdr given-kws_77) given-kws_77))"
"((given-args_82)(if free=id15_79(cdr given-args_78) given-args_78)))"
"(let-values(((key13_83)(pair? given-kws_81)))"
"(let-values(((key10_84)(if key13_83(car given-args_82)(void))))"
"(local-binding-update17.1"
" frame-id11_76"
" frame-id14_75"
" free=id12_80"
" free=id15_79"
" key10_84"
" key13_83"
" b16_74)))))))))"
"(define-values"
"(local-binding-update19.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_85 given-argc_86)"
"(if(= given-argc_86 3)"
"(let-values(((l1_87) given-kws_85))"
"(let-values(((l1_88)(if(null? l1_87) l1_87(if(eq?(car l1_87) '#:frame-id)(cdr l1_87) l1_87))))"
"(let-values(((l1_89) l1_88))"
"(let-values(((l1_90)(if(null? l1_89) l1_89(if(eq?(car l1_89) '#:free=id)(cdr l1_89) l1_89))))"
"(let-values(((l1_91) l1_90))"
"(let-values(((l1_92)(if(null? l1_91) l1_91(if(eq?(car l1_91) '#:key)(cdr l1_91) l1_91))))"
"(null? l1_92)))))))"
" #f))"
"(case-lambda((given-kws_93 given-args_94 b_95)(unpack18.1$3 given-kws_93 given-args_94 b_95)))"
" null"
" '(#:frame-id #:free=id #:key)"
"(let-values(((local-binding-update_96)(case-lambda((b_97)(unpack18.1$3 null null b_97)))))"
" local-binding-update_96)))"
"(define-values(local-binding-key)(lambda(b_98)(if(full-local-binding? b_98)(full-local-binding-key b_98) b_98)))"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer)))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'id)))))"
"(lambda(id_37)"
"(begin"
"(if(identifier? id_37)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_37)))"
"(rename-transformer1_12 id_37))))))"
"(define-values(1/rename-transformer-target)(lambda(t_38)((rename-transformer-value t_38) t_38)))"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((...r/syntax/binding.rkt:44:13_7) resolve+shift15.1)"
"((a21_8) a_1)"
"((a-phase22_9) a-phase_3)"
"((temp23_10) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp23_10 #t a21_8 a-phase22_9)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:44:13_7"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp23_10)"
" a21_8"
" a-phase22_9)))))"
"(let-values(((bb_6)"
"(let-values(((...r/syntax/binding.rkt:45:13_11) resolve+shift15.1)"
"((b24_12) b_2)"
"((b-phase25_13) b-phase_4)"
"((temp26_14) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp26_14 #t b24_12 b-phase25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:45:13_11"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp26_14)"
" b24_12"
" b-phase25_13)))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) #f))"
"        (let-values () (error \"bad binding\"))))))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_18 phase_19)"
"(let-values(((b_20)"
"(let-values(((...r/syntax/binding.rkt:69:12_21) resolve+shift15.1)"
"((id27_22) id_18)"
"((phase28_23) phase_19)"
"((temp29_24) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp29_24 #t id27_22 phase28_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:69:12_21"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp29_24)"
" id27_22"
" phase28_23)))))"
"(if(symbol? b_20)"
"(let-values() b_20)"
"(if(module-binding? b_20)"
"(let-values()(module-binding-sym b_20))"
"(if(local-binding? b_20)(let-values()(local-binding-key b_20))(let-values()(syntax-e$1 id_18))))))))"
"(define-values"
"(identifier-binding$1)"
"(lambda(id_25 phase_26)"
"(let-values(((b_27)"
"(let-values(((id30_28) id_25)((phase31_29) phase_26))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f id30_28 phase31_29)"
"(resolve+shift15.1 id30_28 phase31_29)))))"
"(if(module-binding? b_27)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_27))"
" #f"
"(list"
"(module-binding-module b_27)"
"(module-binding-sym b_27)"
"(module-binding-nominal-module b_27)"
"(module-binding-nominal-sym b_27)"
"(module-binding-phase b_27)"
"(module-binding-nominal-require-phase b_27)"
"(module-binding-nominal-phase b_27))))"
"(if(local-binding? b_27)(let-values() 'lexical)(let-values() #f))))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_30 id_31 phase_32)"
"(if(1/rename-transformer? val_30)"
"(let-values()"
"(let-values(((free=id_33)(1/rename-transformer-target val_30)))"
"(if(syntax-property$1 free=id_33 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_34)"
"(let-values(((...r/syntax/binding.rkt:101:16_35) resolve+shift15.1)"
"((id32_36) id_31)"
"((phase33_37) phase_32)"
"((temp34_38) #t)"
"((temp35_39) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp34_38 #t #f #f temp35_39 #t #f #f id32_36 phase33_37)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:101:16_35"
" keyword-procedure-extract"
" '(#:exactly? #:immediate?)"
" 4)"
" '(#:exactly? #:immediate?)"
"(list temp34_38 temp35_39)"
" id32_36"
" phase33_37)))))"
"(add-binding-in-scopes!"
"(syntax-scope-set id_31 phase_32)"
"(syntax-e$1 id_31)"
"(binding-set-free=id b_34 free=id_33)))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_40 free=id_41)"
"(if(module-binding? b_40)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:107:24_42) module-binding-update46.1)"
"((b36_43) b_40)"
"((free=id37_44) free=id_41))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1 #f #f #f #f free=id37_44 #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f b36_43)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:107:24_42"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id37_44)"
" b36_43))))"
"(if(local-binding? b_40)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:108:23_45) local-binding-update19.1)"
"((b38_46) b_40)"
"((free=id39_47) free=id_41))"
"(if(variable-reference-constant?(#%variable-reference local-binding-update19.1))"
"(local-binding-update17.1 #f #f free=id39_47 #t #f #f b38_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:108:23_45"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id39_47)"
" b38_46))))"
"        (let-values () (error \"bad binding for free=id:\" b_40))))))"
"(define-values"
"(syntax-module-path-index-shift)"
"(lambda(s_48 from-mpi_49 to-mpi_50)"
"(if(eq? from-mpi_49 to-mpi_50)"
" s_48"
"(let-values(((shift_51)(cons from-mpi_49 to-mpi_50)))"
"(let-values(((shifts40_52) #f))"
"(let-values(((prev-result_53) #f))"
"(let-values(((add-shift_54)"
"(lambda(shifts_55)"
"(if(eq? shifts40_52 shifts_55)"
"(let-values() prev-result_53)"
"(let-values()"
"(let-values(((r_56)(let-values()(cons shift_51 shifts_55))))"
"(begin(set! shifts40_52 shifts_55)(set! prev-result_53 r_56) r_56)))))))"
"(syntax-map"
" s_48"
"(lambda(tail?_57 d_58) d_58)"
"(lambda(s_59 d_60)"
"(let-values(((the-struct_61) s_59))"
"(if(syntax?$1 the-struct_61)"
"(let-values(((content41_62) d_60)((mpi-shifts42_63)(add-shift_54(syntax-mpi-shifts s_59))))"
"(syntax1.1"
" content41_62"
"(syntax-scopes the-struct_61)"
"(syntax-shifted-multi-scopes the-struct_61)"
"(syntax-scope-propagations the-struct_61)"
" mpi-shifts42_63"
"(syntax-bulk-binding-registry the-struct_61)"
"(syntax-srcloc the-struct_61)"
"(syntax-props the-struct_61)"
"(syntax-inspector the-struct_61)"
"(syntax-tamper the-struct_61)))"
"                     (raise-argument-error 'struct-copy \"syntax?\" the-struct_61))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(resolve+shift13.1)"
"(lambda(ambiguous-value1_64"
" ambiguous-value6_65"
" exactly?2_66"
" exactly?7_67"
" extra-shifts5_68"
" extra-shifts10_69"
" immediate?3_70"
" immediate?8_71"
" unbound-sym?4_72"
" unbound-sym?9_73"
" s11_74"
" phase12_75)"
"(let-values(((s_76) s11_74))"
"(let-values(((phase_77) phase12_75))"
"(let-values(((ambiguous-value_78)(if ambiguous-value6_65 ambiguous-value1_64 #f)))"
"(let-values(((exactly?_79)(if exactly?7_67 exactly?2_66 #f)))"
"(let-values(((immediate?_80)(if immediate?8_71 immediate?3_70 exactly?_79)))"
"(let-values(((unbound-sym?_81)(if unbound-sym?9_73 unbound-sym?4_72 #f)))"
"(let-values(((extra-shifts_82)(if extra-shifts10_69 extra-shifts5_68 null)))"
"(let-values()"
"(let-values(((immediate-b_83)"
"(let-values(((...r/syntax/binding.rkt:142:22_85) resolve21.1)"
"((s43_86) s_76)"
"((phase44_87) phase_77)"
"((ambiguous-value45_88) ambiguous-value_78)"
"((exactly?46_89) exactly?_79)"
"((extra-shifts47_90) extra-shifts_82))"
"(if(variable-reference-constant?(#%variable-reference resolve21.1))"
"(resolve19.1"
" ambiguous-value45_88"
" #t"
" exactly?46_89"
" #t"
" extra-shifts47_90"
" #t"
" s43_86"
" phase44_87)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:142:22_85"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(list ambiguous-value45_88 exactly?46_89 extra-shifts47_90)"
" s43_86"
" phase44_87)))))"
"(let-values(((b_84)"
"(if(if immediate-b_83"
"(if(not immediate?_80)(binding-free=id immediate-b_83) #f)"
" #f)"
"(let-values(((...r/syntax/binding.rkt:149:16_91) resolve+shift15.1)"
"((temp48_92)(binding-free=id immediate-b_83))"
"((phase49_93) phase_77)"
"((temp50_94)(append extra-shifts_82(syntax-mpi-shifts s_76)))"
"((ambiguous-value51_95) ambiguous-value_78)"
"((exactly?52_96) exactly?_79)"
"((unbound-sym?53_97) unbound-sym?_81))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" ambiguous-value51_95"
" #t"
" exactly?52_96"
" #t"
" temp50_94"
" #t"
" #f"
" #f"
" unbound-sym?53_97"
" #t"
" temp48_92"
" phase49_93)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:149:16_91"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
"(list ambiguous-value51_95 exactly?52_96 temp50_94 unbound-sym?53_97)"
" temp48_92"
" phase49_93)))"
" immediate-b_83)))"
"(if(module-binding? b_84)"
"(let-values()"
"(let-values(((mpi-shifts_98)(syntax-mpi-shifts s_76)))"
"(if(null? mpi-shifts_98)"
"(let-values() b_84)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:162:6_99) module-binding-update46.1)"
"((b54_100) b_84)"
"((temp55_101)"
"(apply-syntax-shifts(module-binding-module b_84) mpi-shifts_98))"
"((temp56_102)"
"(apply-syntax-shifts"
"(module-binding-nominal-module b_84)"
" mpi-shifts_98))"
"((temp57_103)"
"(if(binding-free=id b_84)"
"(syntax-transfer-shifts(binding-free=id b_84) s_76)"
" #f)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" #f"
" #f"
" temp57_103"
" #t"
" temp55_101"
" #t"
" temp56_102"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b54_100)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:162:6_99"
" keyword-procedure-extract"
" '(#:free=id #:module #:nominal-module)"
" 3)"
" '(#:free=id #:module #:nominal-module)"
"(list temp57_103 temp55_101 temp56_102)"
" b54_100)))))))"
"(if(if(not b_84) unbound-sym?_81 #f)"
"(let-values()(syntax-e$1 s_76))"
"(let-values() b_84)))))))))))))))"
"(define-values"
"(unpack14.1)"
"(lambda(given-kws_104 given-args_105 s11_106 phase12_107)"
"(let-values(((ambiguous-value6_108)(if(pair? given-kws_104)(eq? '#:ambiguous-value(car given-kws_104)) #f)))"
"(let-values(((ambiguous-value1_109)(if ambiguous-value6_108(car given-args_105)(void)))"
"((given-kws_110)(if ambiguous-value6_108(cdr given-kws_104) given-kws_104))"
"((given-args_111)(if ambiguous-value6_108(cdr given-args_105) given-args_105)))"
"(let-values(((exactly?7_112)(if(pair? given-kws_110)(eq? '#:exactly?(car given-kws_110)) #f)))"
"(let-values(((exactly?2_113)(if exactly?7_112(car given-args_111)(void)))"
"((given-kws_114)(if exactly?7_112(cdr given-kws_110) given-kws_110))"
"((given-args_115)(if exactly?7_112(cdr given-args_111) given-args_111)))"
"(let-values(((extra-shifts10_116)(if(pair? given-kws_114)(eq? '#:extra-shifts(car given-kws_114)) #f)))"
"(let-values(((extra-shifts5_117)(if extra-shifts10_116(car given-args_115)(void)))"
"((given-kws_118)(if extra-shifts10_116(cdr given-kws_114) given-kws_114))"
"((given-args_119)(if extra-shifts10_116(cdr given-args_115) given-args_115)))"
"(let-values(((immediate?8_120)(if(pair? given-kws_118)(eq? '#:immediate?(car given-kws_118)) #f)))"
"(let-values(((immediate?3_121)(if immediate?8_120(car given-args_119)(void)))"
"((given-kws_122)(if immediate?8_120(cdr given-kws_118) given-kws_118))"
"((given-args_123)(if immediate?8_120(cdr given-args_119) given-args_119)))"
"(let-values(((unbound-sym?9_124)(pair? given-kws_122)))"
"(let-values(((unbound-sym?4_125)(if unbound-sym?9_124(car given-args_123)(void))))"
"(resolve+shift13.1"
" ambiguous-value1_109"
" ambiguous-value6_108"
" exactly?2_113"
" exactly?7_112"
" extra-shifts5_117"
" extra-shifts10_116"
" immediate?3_121"
" immediate?8_120"
" unbound-sym?4_125"
" unbound-sym?9_124"
" s11_106"
" phase12_107)))))))))))))"
"(define-values"
"(resolve+shift15.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_126 given-argc_127)"
"(if(= given-argc_127 4)"
"(let-values(((l1_128) given-kws_126))"
"(let-values(((l1_129)"
"(if(null? l1_128) l1_128(if(eq?(car l1_128) '#:ambiguous-value)(cdr l1_128) l1_128))))"
"(let-values(((l1_130) l1_129))"
"(let-values(((l1_131)(if(null? l1_130) l1_130(if(eq?(car l1_130) '#:exactly?)(cdr l1_130) l1_130))))"
"(let-values(((l1_132) l1_131))"
"(let-values(((l1_133)"
"(if(null? l1_132) l1_132(if(eq?(car l1_132) '#:extra-shifts)(cdr l1_132) l1_132))))"
"(let-values(((l1_134) l1_133))"
"(let-values(((l1_135)"
"(if(null? l1_134)"
" l1_134"
"(if(eq?(car l1_134) '#:immediate?)(cdr l1_134) l1_134))))"
"(let-values(((l1_136) l1_135))"
"(let-values(((l1_137)"
"(if(null? l1_136)"
" l1_136"
"(if(eq?(car l1_136) '#:unbound-sym?)(cdr l1_136) l1_136))))"
"(null? l1_137)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_138 given-args_139 s_140 phase_141)(unpack14.1 given-kws_138 given-args_139 s_140 phase_141)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:immediate? #:unbound-sym?)"
"(let-values(((resolve+shift_142)(case-lambda((s_143 phase_144)(unpack14.1 null null s_143 phase_144)))))"
" resolve+shift_142)))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_145 shifts_146)"
"(if(null? shifts_146)"
"(let-values() mpi_145)"
"(let-values()"
"(let-values(((shifted-mpi_147)(apply-syntax-shifts mpi_145(cdr shifts_146))))"
"(module-path-index-shift shifted-mpi_147(caar shifts_146)(cdar shifts_146)))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_150 from-mpi_151 to-mpi_152)"
"(if(module-binding? b_150)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:187:4_153) module-binding-update46.1)"
"((b58_154) b_150)"
"((temp59_155)(module-path-index-shift(module-binding-module b_150) from-mpi_151 to-mpi_152))"
"((temp60_156)"
"(module-path-index-shift(module-binding-nominal-module b_150) from-mpi_151 to-mpi_152)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp59_155"
" #t"
" temp60_156"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b58_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:187:4_153"
" keyword-procedure-extract"
" '(#:module #:nominal-module)"
" 3)"
" '(#:module #:nominal-module)"
"(list temp59_155 temp60_156)"
" b58_154))))"
"(let-values() b_150))))"
"(define-values"
"(syntax-transfer-shifts)"
"(lambda(to-s_157 from-s_158)"
"(let-values(((lst_159)(alt-reverse(syntax-mpi-shifts from-s_158))))"
"(begin"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"((letrec-values(((for-loop_160)"
"(lambda(s_161 lst_162)"
"(if(pair? lst_162)"
"(let-values(((shift_163)(unsafe-car lst_162)))"
"(if #t"
"(let-values(((s_164)"
"(let-values(((s_165) s_161))"
"(let-values(((s_166)"
"(let-values()"
"(syntax-module-path-index-shift"
" s_165"
"(car shift_163)"
"(cdr shift_163)))))"
"(values s_166)))))"
"(if #t(for-loop_160 s_164(unsafe-cdr lst_162)) s_164))"
" s_161))"
" s_161))))"
" for-loop_160)"
" to-s_157"
" lst_159)))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module19_167)"
"(lambda(s18_168 source?16_169 source?17_170)"
"(let-values(((s_171) s18_168))"
"(let-values(((source?_172)(if source?17_170 source?16_169 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_171)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_171)))"
"(let-values(((lst_173)(alt-reverse(syntax-mpi-shifts s_171))))"
"(begin"
"(if(list? lst_173)(void)(let-values()(in-list lst_173)))"
"((letrec-values(((for-loop_174)"
"(lambda(result_175 lst_176)"
"(if(pair? lst_176)"
"(let-values(((shift_177)(unsafe-car lst_176)))"
"(if #t"
"(let-values(((result_178)"
"(let-values(((result_179) result_175))"
"(let-values(((result_180)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_181)"
"(car"
" shift_177)))"
"(let-values(((path_182"
" base_183)"
"(1/module-path-index-split"
" from-mpi_181)))"
"(if(not path_182)"
"(if(module-path-index-resolved"
" from-mpi_181)"
"(apply-syntax-shifts"
" from-mpi_181"
"(syntax-mpi-shifts"
" s_171))"
" #f)"
" #f)))))))"
"(values result_180)))))"
"(if(if #t(not((lambda x_184 result_178) shift_177)) #f)"
"(for-loop_174 result_178(unsafe-cdr lst_176))"
" result_178))"
" result_175))"
" result_175))))"
" for-loop_174)"
" #f"
" lst_173))))))))))"
"(case-lambda"
"((s_185)(syntax-source-module19_167 s_185 #f #f))"
"((s_186 source?16_187)(syntax-source-module19_167 s_186 source?16_187 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_188)"
"(begin"
"(if(identifier? id_188)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_188)))"
"(let-values(((the-struct_189)(datum->syntax$1 #f(syntax-e$1 id_188) id_188 id_188)))"
"(if(syntax?$1 the-struct_189)"
"(let-values(((mpi-shifts61_190)(syntax-mpi-shifts id_188)))"
"(syntax1.1"
"(syntax-content the-struct_189)"
"(syntax-scopes the-struct_189)"
"(syntax-shifted-multi-scopes the-struct_189)"
"(syntax-scope-propagations the-struct_189)"
" mpi-shifts61_190"
"(syntax-bulk-binding-registry the-struct_189)"
"(syntax-srcloc the-struct_189)"
"(syntax-props the-struct_189)"
"(syntax-inspector the-struct_189)"
"(syntax-tamper the-struct_189)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_189))))))"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 #t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
"    (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literalss-id)(make-built-in-symbol! 'syntax-literalss))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'provided #f 3 0 #f null 'prefab #f '(0 1 2) #f 'provided)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_32)(if(provided? v_32)(provided-binding v_32) v_32)))"
"(define-values(provided-as-protected?)(lambda(v_33)(if(provided? v_33)(provided-protected? v_33) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_34)(if(provided? v_34)(provided-syntax? v_34) #f)))"
"(define-values"
"(lifted/1.1$25)"
"(make-required"
" 'provide-binding-to-require-binding"
"(case-lambda((self_2 binding/p_3 sym_4)(apply missing-kw self_2 binding/p_3 sym_4 null)))"
" #f"
" #f))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_5 phase-shift4_6 provide-phase-level3_7 self1_8 binding/p9_9 sym10_10)"
"(let-values(((binding/p_11) binding/p9_9))"
"(let-values(((sym_12) sym10_10))"
"(let-values(((self_13) self1_8))"
"(let-values(((mpi_14) mpi2_5))"
"(let-values(((provide-phase-level_15) provide-phase-level3_7))"
"(let-values(((phase-shift_16) phase-shift4_6))"
"(let-values()"
"(let-values(((binding_17)(provided-as-binding binding/p_11)))"
"(let-values(((from-mod_18)(module-binding-module binding_17)))"
"(let-values(((...tax/bulk-binding.rkt:51:2_19) module-binding-update46.1)"
"((binding17_20) binding_17)"
"((temp18_21)(module-path-index-shift from-mod_18 self_13 mpi_14))"
"((mpi19_22) mpi_14)"
"((provide-phase-level20_23) provide-phase-level_15)"
"((sym21_24) sym_12)"
"((phase-shift22_25) phase-shift_16)"
"((temp23_26) #f)"
"((temp24_27)"
"(if(not(provided-as-protected? binding/p_11))"
"(module-binding-extra-inspector binding_17)"
" #f)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" temp24_27"
" #t"
" temp23_26"
" #t"
" #f"
" #f"
" temp18_21"
" #t"
" mpi19_22"
" #t"
" provide-phase-level20_23"
" #t"
" phase-shift22_25"
" #t"
" sym21_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding17_20)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:51:2_19"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 3)"
" '(#:extra-inspector"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" temp24_27"
" temp23_26"
" temp18_21"
" mpi19_22"
" provide-phase-level20_23"
" phase-shift22_25"
" sym21_24)"
" binding17_20))))))))))))))"
"(define-values"
"(unpack12.1$6)"
"(lambda(given-kws_28 given-args_29 binding/p9_30 sym10_31)"
"(let-values(((mpi2_32)(car given-args_29))"
"((given-kws_33)(cdr given-kws_28))"
"((given-args_34)(cdr given-args_29)))"
"(let-values(((phase-shift4_35)(car given-args_34))"
"((given-kws_36)(cdr given-kws_33))"
"((given-args_37)(cdr given-args_34)))"
"(let-values(((provide-phase-level3_38)(car given-args_37))"
"((given-kws_39)(cdr given-kws_36))"
"((given-args_40)(cdr given-args_37)))"
"(let-values(((self1_41)(car given-args_40)))"
"(provide-binding-to-require-binding11.1"
" mpi2_32"
" phase-shift4_35"
" provide-phase-level3_38"
" self1_41"
" binding/p9_30"
" sym10_31)))))))"
"(define-values"
"(provide-binding-to-require-binding13.1)"
"(lifted/1.1$25"
"(lambda(given-kws_42 given-argc_43)"
"(if(= given-argc_43 4)"
"(let-values(((l2_44) given-kws_42))"
"(if(pair? l2_44)"
"(if(eq?(car l2_44) '#:mpi)"
"(let-values(((l2_45)(cdr l2_44)))"
"(if(pair? l2_45)"
"(if(eq?(car l2_45) '#:phase-shift)"
"(let-values(((l2_46)(cdr l2_45)))"
"(if(pair? l2_46)"
"(if(eq?(car l2_46) '#:provide-phase-level)"
"(let-values(((l2_47)(cdr l2_46)))"
"(if(pair? l2_47)(if(eq?(car l2_47) '#:self)(null?(cdr l2_47)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_48 given-args_49 binding/p_50 sym_51)(unpack12.1$6 given-kws_48 given-args_49 binding/p_50 sym_51)))"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_52 make-_53 ?_54 -ref_55 -set!_56)"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 6"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_98 ser_99 reachable-scopes_100)"
"(list*"
" 'deserialize-bulk-binding"
"(ser_99(bulk-binding-mpi b_98))"
"(ser_99(bulk-binding-provide-phase-level b_98))"
"(ser_99(bulk-binding-phase-shift b_98))"
" '(#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_101 mpi-shifts_102)"
"(let-values(((or-part_103)(bulk-binding-provides b_101)))"
"(if or-part_103"
" or-part_103"
"(let-values(((mod-name_104)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_101) mpi-shifts_102))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-registry16.1 b_101)"
"(void)"
"(let-values()"
"(error"
"                                                 \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_104)))"
"(values))))"
"(let-values(((table_105)"
"(bulk-binding-registry-table(bulk-binding-bulk-binding-registry b_101))))"
"(let-values(((bulk-provide_106)(hash-ref table_105 mod-name_104 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_106"
"(void)"
"(let-values()"
"(error"
"                                                       \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_104)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self! b_101(bulk-provide-self bulk-provide_106))"
"(values))))"
"(let-values(((provides_107)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_106)"
"(bulk-binding-provide-phase-level b_101))))"
"(begin(set-bulk-binding-provides! b_101 provides_107) provides_107)))))))))))"
"(lambda(b_108 binding_109 sym_110)"
"(let-values(((...tax/bulk-binding.rkt:105:11_111) provide-binding-to-require-binding13.1)"
"((binding26_112) binding_109)"
"((sym27_113) sym_110)"
"((temp28_114)(bulk-binding-self b_108))"
"((temp29_115)(bulk-binding-mpi b_108))"
"((temp30_116)(bulk-binding-provide-phase-level b_108))"
"((temp31_117)(bulk-binding-phase-shift b_108)))"
"(if(variable-reference-constant?(#%variable-reference provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" temp29_115"
" temp31_117"
" temp30_116"
" temp28_114"
" binding26_112"
" sym27_113)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:105:11_111"
" keyword-procedure-extract"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" 4)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
"(list temp29_115 temp31_117 temp30_116 temp28_114)"
" binding26_112"
" sym27_113)))))))"
"(current-inspector)"
" #f"
" '(2 3 4 5)"
" #f"
" 'bulk-binding)))"
"(values"
" struct:_52"
" make-_53"
" ?_54"
"(make-struct-field-accessor -ref_55 0 'provides)"
"(make-struct-field-accessor -ref_55 1 'self)"
"(make-struct-field-accessor -ref_55 2 'mpi)"
"(make-struct-field-accessor -ref_55 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_55 4 'phase-shift)"
"(make-struct-field-accessor -ref_55 5 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_56 0 'provides)"
"(make-struct-field-mutator -set!_56 1 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(mpi_118 provide-phase-level_119 phase-shift_120 bulk-binding-registry_121)"
"(bulk-binding14.1 #f #f mpi_118 provide-phase-level_119 phase-shift_120 bulk-binding-registry_121)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_122 make-_123 ?_124 -ref_125 -set!_126)"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))"
"(values"
" struct:_122"
" make-_123"
" ?_124"
"(make-struct-field-accessor -ref_125 0 'self)"
"(make-struct-field-accessor -ref_125 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_148 make-_149 ?_150 -ref_151 -set!_152)"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))"
"(values struct:_148 make-_149 ?_150(make-struct-field-accessor -ref_151 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_169 mod-name_170 self_171 provides_172)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_169)"
" mod-name_170"
"(bulk-provide15.1 self_171 provides_172))))"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(define-values"
"(struct:root-expand-context"
" root-expand-context1.1"
" root-expand-context?"
" root-expand-context-module-scopes"
" root-expand-context-post-expansion-scope"
" root-expand-context-top-level-bind-scope"
" root-expand-context-all-scopes-stx"
" root-expand-context-use-site-scopes"
" root-expand-context-defined-syms"
" root-expand-context-frame-id"
" root-expand-context-counter"
" root-expand-context-lift-key)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'root-expand-context)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-scopes)"
"(make-struct-field-accessor -ref_4 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_4 4 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 5 'defined-syms)"
"(make-struct-field-accessor -ref_4 6 'frame-id)"
"(make-struct-field-accessor -ref_4 7 'counter)"
"(make-struct-field-accessor -ref_4 8 'lift-key))))"
"(define-values"
"(make-root-expand-context10.1)"
"(lambda(all-scopes-stx5_62"
" all-scopes-stx9_63"
" initial-scopes2_64"
" initial-scopes6_65"
" outside-scope3_66"
" outside-scope7_67"
" post-expansion-scope4_68"
" post-expansion-scope8_69)"
"(let-values(((initial-scopes_70)(if initial-scopes6_65 initial-scopes2_64 null)))"
"(let-values(((outside-scope_71)(if outside-scope7_67 outside-scope3_66 top-level-common-scope)))"
"(let-values(((post-expansion-scope_72)"
"(if post-expansion-scope8_69 post-expansion-scope4_68(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_73)(if all-scopes-stx9_63 all-scopes-stx5_62 #f)))"
"(let-values()"
"(let-values(((module-scopes_74)(list* post-expansion-scope_72 outside-scope_71 initial-scopes_70)))"
"(root-expand-context1.1"
" module-scopes_74"
" post-expansion-scope_72"
"(new-scope 'module)"
"(let-values(((or-part_75) all-scopes-stx_73))"
"(if or-part_75 or-part_75(add-scopes empty-syntax module-scopes_74)))"
"(box null)"
"(make-hasheqv)"
"(gensym)"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(unpack11.1)"
"(lambda(given-kws_76 given-args_77)"
"(let-values(((all-scopes-stx9_78)(if(pair? given-kws_76)(eq? '#:all-scopes-stx(car given-kws_76)) #f)))"
"(let-values(((all-scopes-stx5_79)(if all-scopes-stx9_78(car given-args_77)(void)))"
"((given-kws_80)(if all-scopes-stx9_78(cdr given-kws_76) given-kws_76))"
"((given-args_81)(if all-scopes-stx9_78(cdr given-args_77) given-args_77)))"
"(let-values(((initial-scopes6_82)(if(pair? given-kws_80)(eq? '#:initial-scopes(car given-kws_80)) #f)))"
"(let-values(((initial-scopes2_83)(if initial-scopes6_82(car given-args_81)(void)))"
"((given-kws_84)(if initial-scopes6_82(cdr given-kws_80) given-kws_80))"
"((given-args_85)(if initial-scopes6_82(cdr given-args_81) given-args_81)))"
"(let-values(((outside-scope7_86)(if(pair? given-kws_84)(eq? '#:outside-scope(car given-kws_84)) #f)))"
"(let-values(((outside-scope3_87)(if outside-scope7_86(car given-args_85)(void)))"
"((given-kws_88)(if outside-scope7_86(cdr given-kws_84) given-kws_84))"
"((given-args_89)(if outside-scope7_86(cdr given-args_85) given-args_85)))"
"(let-values(((post-expansion-scope8_90)(pair? given-kws_88)))"
"(let-values(((post-expansion-scope4_91)(if post-expansion-scope8_90(car given-args_89)(void))))"
"(make-root-expand-context10.1"
" all-scopes-stx5_79"
" all-scopes-stx9_78"
" initial-scopes2_83"
" initial-scopes6_82"
" outside-scope3_87"
" outside-scope7_86"
" post-expansion-scope4_91"
" post-expansion-scope8_90)))))))))))"
"(define-values"
"(make-root-expand-context12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_92 given-argc_93)"
"(if(= given-argc_93 2)"
"(let-values(((l1_94) given-kws_92))"
"(let-values(((l1_95)(if(null? l1_94) l1_94(if(eq?(car l1_94) '#:all-scopes-stx)(cdr l1_94) l1_94))))"
"(let-values(((l1_96) l1_95))"
"(let-values(((l1_97)(if(null? l1_96) l1_96(if(eq?(car l1_96) '#:initial-scopes)(cdr l1_96) l1_96))))"
"(let-values(((l1_98) l1_97))"
"(let-values(((l1_99)"
"(if(null? l1_98) l1_98(if(eq?(car l1_98) '#:outside-scope)(cdr l1_98) l1_98))))"
"(let-values(((l1_100) l1_99))"
"(let-values(((l1_101)"
"(if(null? l1_100)"
" l1_100"
"(if(eq?(car l1_100) '#:post-expansion-scope)(cdr l1_100) l1_100))))"
"(null? l1_101)))))))))"
" #f))"
"(case-lambda((given-kws_102 given-args_103)(unpack11.1 given-kws_102 given-args_103)))"
" null"
" '(#:all-scopes-stx #:initial-scopes #:outside-scope #:post-expansion-scope)"
"(let-values(((make-root-expand-context_104)(case-lambda(()(unpack11.1 null null)))))"
" make-root-expand-context_104)))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_105 orig-self_106 new-self_107)"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_105))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_105))"
"(syntax-module-path-index-shift(root-expand-context-all-scopes-stx ctx_105) orig-self_106 new-self_107)"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_105)))"
"(let-values(((ht_108)(root-expand-context-defined-syms ctx_105)))"
"(begin"
"(if((lambda(ht_109)(hash? ht_109)) ht_108)(void)(let-values()(default-in-hash ht_108)))"
"((letrec-values(((for-loop_110)"
"(lambda(table_111 i_112)"
"(if i_112"
"(let-values(((phase_113 ht_114)(hash-iterate-key+value ht_108 i_112)))"
"(if #t"
"(let-values(((table_115)"
"(let-values(((table_116) table_111))"
"(let-values(((table_117)"
"(let-values()"
"(let-values(((key_118 val_119)"
"(let-values()"
"(values phase_113 ht_114))))"
"(hash-set table_116 key_118 val_119)))))"
"(values table_117)))))"
"(if #t(for-loop_110 table_115(hash-iterate-next ht_108 i_112)) table_115))"
" table_111))"
" table_111))))"
" for-loop_110)"
" '#hasheqv()"
"(hash-iterate-first ht_108))))"
"(root-expand-context-frame-id ctx_105)"
"(unbox(root-expand-context-counter ctx_105))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_120)"
"(let-values(((vec_121)(if(syntax?$1 vec-s_120)(syntax-e$1 vec-s_120) #f)))"
"(begin"
"(if(if(vector? vec_121)"
"(if(=(vector-length vec_121) 7)"
"(if(syntax?$1(vector-ref vec_121 0))"
"(if(syntax-with-one-scope?(vector-ref vec_121 1))"
"(if(syntax?$1(vector-ref vec_121 2))"
"(if(syntax?$1(vector-ref vec_121 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_121 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_121 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_121 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_120)))"
"(root-expand-context1.1"
"(extract-scope-list(vector-ref vec_121 0))"
"(extract-scope(vector-ref vec_121 1))"
"(new-scope 'module)"
"(vector-ref vec_121 2)"
"(box(extract-scope-list(vector-ref vec_121 3)))"
"(unpack-defined-syms(vector-ref vec_121 4))"
"(syntax-e$1(vector-ref vec_121 5))"
"(box(syntax-e$1(vector-ref vec_121 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_122)"
"(let-values(((ht_123) v_122))"
"(begin"
"(if((lambda(ht_124)(hash? ht_124)) ht_123)(void)(let-values()(default-in-hash ht_123)))"
"((letrec-values(((for-loop_125)"
"(lambda(result_126 i_127)"
"(if i_127"
"(let-values(((phase_128 ht-s_129)(hash-iterate-key+value ht_123 i_127)))"
"(if #t"
"(let-values(((result_130)"
"(let-values(((result_131) result_126))"
"(let-values(((result_132)"
"(let-values()"
"(let-values()"
"(if(phase? phase_128)"
"(if(hash?(syntax-e$1 ht-s_129))"
"(let-values(((ht_133)(syntax-e$1 ht-s_129)))"
"(begin"
"(if((lambda(ht_134)(hash? ht_134))"
" ht_133)"
"(void)"
"(let-values()(default-in-hash ht_133)))"
"((letrec-values(((for-loop_135)"
"(lambda(result_136 i_137)"
"(if i_137"
"(let-values(((sym_138"
" id_139)"
"(hash-iterate-key+value"
" ht_133"
" i_137)))"
"(if #t"
"(let-values(((result_140)"
"(let-values(((result_141)"
" result_136))"
"(let-values(((result_142)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_138)"
"(identifier?"
" id_139)"
" #f)))))"
"(values"
" result_142)))))"
"(if(if #t"
"(not"
"((lambda x_143"
"(not"
" result_140))"
" sym_138"
" id_139))"
" #f)"
"(for-loop_135"
" result_140"
"(hash-iterate-next"
" ht_133"
" i_137))"
" result_140))"
" result_136))"
" result_136))))"
" for-loop_135)"
" #t"
"(hash-iterate-first ht_133))))"
" #f)"
" #f)))))"
"(values result_132)))))"
"(if(if #t(not((lambda x_144(not result_130)) phase_128 ht-s_129)) #f)"
"(for-loop_125 result_130(hash-iterate-next ht_123 i_127))"
" result_130))"
" result_126))"
" result_126))))"
" for-loop_125)"
" #t"
"(hash-iterate-first ht_123))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_145)(map2 generalize-scope(set->list(syntax-scope-set stx_145 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_146)(if(syntax?$1 stx_146)(= 1(set-count(syntax-scope-set stx_146 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_147)(let-values(((s_148)(syntax-scope-set stx_147 0)))(generalize-scope(set-first s_148)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_149)"
"(hash-copy"
"(let-values(((ht_150)(syntax-e$1 v_149)))"
"(begin"
"(if((lambda(ht_151)(hash? ht_151)) ht_150)(void)(let-values()(default-in-hash ht_150)))"
"((letrec-values(((for-loop_152)"
"(lambda(table_153 i_154)"
"(if i_154"
"(let-values(((phase_155 ht-s_156)(hash-iterate-key+value ht_150 i_154)))"
"(if #t"
"(let-values(((table_157)"
"(let-values(((table_158) table_153))"
"(let-values(((table_159)"
"(let-values()"
"(let-values(((key_160 val_161)"
"(let-values()"
"(values"
" phase_155"
"(hash-copy"
"(let-values(((ht_162)"
"(syntax-e$1"
" ht-s_156)))"
"(begin"
"(if((lambda(ht_163)"
"(hash? ht_163))"
" ht_162)"
"(void)"
"(let-values()"
"(default-in-hash ht_162)))"
"((letrec-values(((for-loop_164)"
"(lambda(table_165"
" i_166)"
"(if i_166"
"(let-values(((sym_167"
" id_168)"
"(hash-iterate-key+value"
" ht_162"
" i_166)))"
"(if #t"
"(let-values(((table_169)"
"(let-values(((table_170)"
" table_165))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((key_172"
" val_173)"
"(let-values()"
"(values"
" sym_167"
" id_168))))"
"(hash-set"
" table_170"
" key_172"
" val_173)))))"
"(values"
" table_171)))))"
"(if #t"
"(for-loop_164"
" table_169"
"(hash-iterate-next"
" ht_162"
" i_166))"
" table_169))"
" table_165))"
" table_165))))"
" for-loop_164)"
" '#hash()"
"(hash-iterate-first"
" ht_162)))))))))"
"(hash-set table_158 key_160 val_161)))))"
"(values table_159)))))"
"(if #t(for-loop_152 table_157(hash-iterate-next ht_150 i_154)) table_157))"
" table_153))"
" table_153))))"
" for-loop_152)"
" '#hasheqv()"
"(hash-iterate-first ht_150)))))))"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/primitive->compiled-position)(hash-ref linklet-primitive-table 'primitive->compiled-position #f))"
"(define-values(1/compiled-position->primitive)(hash-ref linklet-primitive-table 'compiled-position->primitive #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/recompile-linklet)(hash-ref linklet-primitive-table 'recompile-linklet #f))"
"(define-values(1/eval-linklet)(hash-ref linklet-primitive-table 'eval-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'module-registry #f 2 0 #f null(current-inspector) #f '(0 1) #f 'module-registry)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_27 proc_28)"
"(let-values(((lock-box_29)(module-registry-lock-box r_27)))"
"((letrec-values(((loop_30)"
"(lambda()"
"(let-values(((v_31)(unbox lock-box_29)))"
"(if(not v_31)"
"(let-values()"
"(let-values(((lock_32)(cons(make-semaphore)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_29 v_31 lock_32)"
"(let-values()(begin(proc_28) void))"
"(let-values() loop_30)))"
"(lambda()(semaphore-post(car lock_32)))))))"
"(if(eq?(current-thread)(cdr v_31))"
"(let-values()(proc_28))"
"(let-values()(begin(sync(car v_31)(cdr v_31))(loop_30)))))))))"
" loop_30)))))"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" namespace-module-registry$1"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_92 port_93 mode_94)"
"                     (let-values ((() (begin (write-string \"#<namespace\" port_93) (values))))"
"(let-values(((n_95)(namespace-source-name ns_92)))"
"(let-values((()"
"(begin"
"(if n_95"
"                                           (let-values () (fprintf port_93 \":~a\" (namespace->name ns_92)))"
"(void))"
"(values))))"
"(let-values(((phase_96)(namespace-phase ns_92)))"
"(begin"
"                               (if (zero-phase? phase_96) (void) (let-values () (fprintf port_93 \":~s\" phase_96)))"
"                               (write-string \">\" port_93)))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'source-name)"
"(make-struct-field-accessor -ref_4 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 3 'phase)"
"(make-struct-field-accessor -ref_4 4 '0-phase)"
"(make-struct-field-accessor -ref_4 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 7 'module-registry)"
"(make-struct-field-accessor -ref_4 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 10 'root-namespace)"
"(make-struct-field-accessor -ref_4 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 12 'inspector)"
"(make-struct-field-accessor -ref_4 13 'available-module-instances)"
"(make-struct-field-accessor -ref_4 14 'module-instances)"
"(make-struct-field-mutator -set!_5 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_97 make-_98 ?_99 -ref_100 -set!_101)"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))"
"(values"
" struct:_97"
" make-_98"
" ?_99"
"(make-struct-field-accessor -ref_100 0 'variables)"
"(make-struct-field-accessor -ref_100 1 'transformers))))"
"(define-values"
"(make-namespace)"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f #f #f)"
"(new-namespace11.1)))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_123"
" register?6_124"
" root-expand-ctx3_125"
" root-expand-ctx5_126"
" share-from-ns7_127"
" share-from-ns8_128)"
"(let-values(((share-from-ns_129)(if share-from-ns8_128 share-from-ns7_127 #f)))"
"(let-values(((root-expand-ctx_130)"
"(if root-expand-ctx5_126"
" root-expand-ctx3_125"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((register?_131)(if register?6_124 register?4_123 #t)))"
"(let-values()"
"(let-values(((phase_132)(if share-from-ns_129(namespace-phase share-from-ns_129) 0)))"
"(let-values(((ns_133)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_130)"
" phase_132"
" phase_132"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_129"
"(namespace-module-registry$1 share-from-ns_129)"
"(make-module-registry))"
"(if share-from-ns_129"
"(namespace-bulk-binding-registry share-from-ns_129)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_129"
"(let-values(((or-part_134)(namespace-root-namespace share-from-ns_129)))"
"(if or-part_134 or-part_134 share-from-ns_129))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_129"
"(namespace-available-module-instances share-from-ns_129)"
"(make-hasheqv))"
"(if share-from-ns_129(namespace-module-instances share-from-ns_129)(make-hasheqv)))))"
"(begin"
"(if register?_131"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_133) phase_132 ns_133))"
"(void))"
" ns_133)))))))))"
"(define-values"
"(unpack10.1$2)"
"(lambda(given-kws_135 given-args_136 share-from-ns7_137 share-from-ns8_138)"
"(let-values(((register?6_139)(if(pair? given-kws_135)(eq? '#:register?(car given-kws_135)) #f)))"
"(let-values(((register?4_140)(if register?6_139(car given-args_136)(void)))"
"((given-kws_141)(if register?6_139(cdr given-kws_135) given-kws_135))"
"((given-args_142)(if register?6_139(cdr given-args_136) given-args_136)))"
"(let-values(((root-expand-ctx5_143)(pair? given-kws_141)))"
"(let-values(((root-expand-ctx3_144)(if root-expand-ctx5_143(car given-args_142)(void))))"
"(new-namespace9.1"
" register?4_140"
" register?6_139"
" root-expand-ctx3_144"
" root-expand-ctx5_143"
" share-from-ns7_137"
" share-from-ns8_138)))))))"
"(define-values"
"(new-namespace11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_145 given-argc_146)"
"(if(if(>= given-argc_146 2)(<= given-argc_146 3) #f)"
"(let-values(((l1_147) given-kws_145))"
"(let-values(((l1_148)(if(null? l1_147) l1_147(if(eq?(car l1_147) '#:register?)(cdr l1_147) l1_147))))"
"(let-values(((l1_149) l1_148))"
"(let-values(((l1_150)"
"(if(null? l1_149) l1_149(if(eq?(car l1_149) '#:root-expand-ctx)(cdr l1_149) l1_149))))"
"(null? l1_150)))))"
" #f))"
"(case-lambda"
"((given-kws_151 given-args_152)(unpack10.1$2 given-kws_151 given-args_152 #f #f))"
"((given-kws_153 given-args_154 share-from-ns7_155)"
"(unpack10.1$2 given-kws_153 given-args_154 share-from-ns7_155 #t)))"
" null"
" '(#:register? #:root-expand-ctx)"
"(let-values(((new-namespace_156)"
"(case-lambda"
"(()(unpack10.1$2 null null #f #f))"
"((share-from-ns7_157)(unpack10.1$2 null null share-from-ns7_157 #t)))))"
" new-namespace_156)))"
"(define-values(1/current-namespace)(make-parameter(make-namespace)))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_158)(force(unbox(namespace-root-expand-ctx ns_158)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_159 root-ctx_160)(set-box!(namespace-root-expand-ctx ns_159) root-ctx_160)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_161 name_162)"
"(let-values(((or-part_163)(hash-ref(namespace-submodule-declarations ns_161) name_162 #f)))"
"(if or-part_163"
" or-part_163"
"(hash-ref(module-registry-declarations(namespace-module-registry$1 ns_161)) name_162 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_164 phase_165)"
"(let-values(((or-part_166)(hash-ref(namespace-phase-to-namespace ns_164) phase_165 #f)))"
"(if or-part_166"
" or-part_166"
"(let-values(((p-ns_167)"
"(let-values(((the-struct_168) ns_164))"
"(if(1/namespace? the-struct_168)"
"(let-values(((phase14_169) phase_165))"
"(namespace1.1"
"(namespace-mpi the-struct_168)"
"(namespace-source-name the-struct_168)"
"(namespace-root-expand-ctx the-struct_168)"
" phase14_169"
"(namespace-0-phase the-struct_168)"
"(namespace-phase-to-namespace the-struct_168)"
"(namespace-phase-level-to-definitions the-struct_168)"
"(namespace-module-registry$1 the-struct_168)"
"(namespace-bulk-binding-registry the-struct_168)"
"(namespace-submodule-declarations the-struct_168)"
"(namespace-root-namespace the-struct_168)"
"(namespace-declaration-inspector the-struct_168)"
"(namespace-inspector the-struct_168)"
"(namespace-available-module-instances the-struct_168)"
"(namespace-module-instances the-struct_168)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_168)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_164) phase_165 p-ns_167) p-ns_167))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_170)"
"(let-values(((n_171)(namespace-source-name ns_170)))"
"(if(not n_171)"
"(let-values() 'top-level)"
"(if(symbol? n_171)"
"          (let-values () (format \"'~s\" n_171))"
"          (let-values () (string-append \"\\\"\" (path->string n_171) \"\\\"\")))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_172 phase-level_173)"
"(let-values(((d_174)(hash-ref(namespace-phase-level-to-definitions ns_172) phase-level_173 #f)))"
"(let-values(((or-part_175) d_174))"
"(if or-part_175"
" or-part_175"
"(let-values()"
"(let-values(((p-ns_176)"
"(namespace->namespace-at-phase ns_172(phase+(namespace-0-phase ns_172) phase-level_173))))"
"(let-values(((d_177)"
"(definitions2.1(1/make-instance(namespace->name p-ns_176) p-ns_176)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_172) phase-level_173 d_177) d_177)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(lambda(ns_178 phase-level_179 name_180 val_181)"
"(let-values(((d_182)(namespace->definitions ns_178 phase-level_179)))"
"(1/instance-set-variable-value!(definitions-variables d_182) name_180 val_181))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_183 phase-level_184 name_185)"
"(let-values(((d_186)(namespace->definitions ns_183 phase-level_184)))"
"(1/instance-unset-variable!(definitions-variables d_186) name_185))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_187 phase-level_188 name_189 val_190)"
"(let-values(((d_191)(namespace->definitions ns_187(add1 phase-level_188))))"
"(hash-set!(definitions-transformers d_191) name_189 val_190))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_192 phase-level_193 name_194 fail-k_195)"
"(let-values(((d_196)(namespace->definitions ns_192 phase-level_193)))"
"(1/instance-variable-value(definitions-variables d_196) name_194 fail-k_195))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_197 phase-level_198 name_199 fail-k_200)"
"(let-values(((d_201)(namespace->definitions ns_197(add1 phase-level_198))))"
"(hash-ref(definitions-transformers d_201) name_199 fail-k_200))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_202 phase-shift_203)(definitions-variables(namespace->definitions ns_202 phase-shift_203))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_204 b-ns_205)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_204)(namespace-0-phase a-ns_204) 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_205)(namespace-0-phase b-ns_205) 'no-b))))"
"(define-values(original-property-sym)(gensym 'original))"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 #f))))"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values(((new-stx_6) new-stx3_2))"
"(let-values(((old-stx_7) old-stx4_3))"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) #f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()(if id_8(syntax-property$1 new-stx_6 'origin(list id_8)) new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values(((the-struct_14) new-stx_6))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-bulk-binding-registry the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values(((the-struct_16) new-stx_6))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props8_17) old-props_10))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-bulk-binding-registry the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values(((ht_20) old-props-with-origin_18))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash? ht_21)(immutable? ht_21) #f))"
" ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_20"
" i_24)))"
"(if #t"
"(let-values(((new-props_27)"
"(let-values(((new-props_28)"
" new-props_23))"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(if #t"
"(for-loop_22"
" new-props_27"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))"
" new-props_27))"
" new-props_23))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(unsafe-immutable-hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values(((ht_31) new-props_11))"
"(begin"
"(if((lambda(ht_32)"
"(if(hash? ht_32)(immutable? ht_32) #f))"
" ht_31)"
"(void)"
"(let-values()(default-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_35)))"
"(if #t"
"(let-values(((old-props_38)"
"(let-values(((old-props_39)"
" old-props_34))"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(if #t"
"(for-loop_33"
" old-props_38"
"(unsafe-immutable-hash-iterate-next"
" ht_31"
" i_35))"
" old-props_38))"
" old-props_34))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(unsafe-immutable-hash-iterate-first ht_31))))))))"
"(let-values(((the-struct_42) new-stx_6))"
"(if(syntax?$1 the-struct_42)"
"(let-values(((props9_43) updated-props_19))"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-bulk-binding-registry the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 #f #f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list(cons prop:exn:srclocs(lambda(e_24)(1/exn:fail:syntax-exprs e_24))))"
" #f"
" #f"
" '(0)"
"(lambda(str_25 cm_26 exprs_27 info_28)"
"(begin"
"(if(if(list? exprs_27)(andmap2 syntax?$1 exprs_27) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_27)))"
"(values str_25 cm_26 exprs_27)))"
" 'exn:fail:syntax)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_29 make-_30 ?_31 -ref_32 -set!_33)"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))"
"(values struct:_29 make-_30 ?_31)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_45)"
"(lambda(given-name9_46"
" message10_47"
" expr1_48"
" sub-expr2_49"
" extra-sources3_50"
" message-suffix4_51"
" expr5_52"
" sub-expr6_53"
" extra-sources7_54"
" message-suffix8_55)"
"(let-values(((given-name_56) given-name9_46))"
"(let-values(((message_57) message10_47))"
"(let-values(((expr_58)(if expr5_52 expr1_48 #f)))"
"(let-values(((sub-expr_59)(if sub-expr6_53 sub-expr2_49 #f)))"
"(let-values(((extra-sources_60)(if extra-sources7_54 extra-sources3_50 null)))"
"                            (let-values (((message-suffix_61) (if message-suffix8_55 message-suffix4_51 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax"
" given-name_56"
" message_57"
" expr_58"
" sub-expr_59"
" extra-sources_60"
" message-suffix_61)))))))))))"
"(case-lambda"
"((given-name_62 message_63)(raise-syntax-error11_45 given-name_62 message_63 #f #f #f #f #f #f #f #f))"
"((given-name_64 message_65 expr_66 sub-expr_67 extra-sources_68 message-suffix4_69)"
"(raise-syntax-error11_45"
" given-name_64"
" message_65"
" expr_66"
" sub-expr_67"
" extra-sources_68"
" message-suffix4_69"
" #t"
" #t"
" #t"
" #t))"
"((given-name_70 message_71 expr_72 sub-expr_73 extra-sources3_74)"
"(raise-syntax-error11_45 given-name_70 message_71 expr_72 sub-expr_73 extra-sources3_74 #f #t #t #t #f))"
"((given-name_75 message_76 expr_77 sub-expr2_78)"
"(raise-syntax-error11_45 given-name_75 message_76 expr_77 sub-expr2_78 #f #f #t #t #f #f))"
"((given-name_79 message_80 expr1_81)"
"(raise-syntax-error11_45 given-name_79 message_80 expr1_81 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_82)"
"(lambda(given-name21_83"
" message22_84"
" expr13_85"
" sub-expr14_86"
" extra-sources15_87"
" message-suffix16_88"
" expr17_89"
" sub-expr18_90"
" extra-sources19_91"
" message-suffix20_92)"
"(let-values(((given-name_93) given-name21_83))"
"(let-values(((message_94) message22_84))"
"(let-values(((expr_95)(if expr17_89 expr13_85 #f)))"
"(let-values(((sub-expr_96)(if sub-expr18_90 sub-expr14_86 #f)))"
"(let-values(((extra-sources_97)(if extra-sources19_91 extra-sources15_87 null)))"
"                            (let-values (((message-suffix_98) (if message-suffix20_92 message-suffix16_88 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound"
" given-name_93"
" message_94"
" expr_95"
" sub-expr_96"
" extra-sources_97"
" message-suffix_98)))))))))))"
"(case-lambda"
"((given-name_99 message_100)(raise-unbound-syntax-error23_82 given-name_99 message_100 #f #f #f #f #f #f #f #f))"
"((given-name_101 message_102 expr_103 sub-expr_104 extra-sources_105 message-suffix16_106)"
"(raise-unbound-syntax-error23_82"
" given-name_101"
" message_102"
" expr_103"
" sub-expr_104"
" extra-sources_105"
" message-suffix16_106"
" #t"
" #t"
" #t"
" #t))"
"((given-name_107 message_108 expr_109 sub-expr_110 extra-sources15_111)"
"(raise-unbound-syntax-error23_82"
" given-name_107"
" message_108"
" expr_109"
" sub-expr_110"
" extra-sources15_111"
" #f"
" #t"
" #t"
" #t"
" #f))"
"((given-name_112 message_113 expr_114 sub-expr14_115)"
"(raise-unbound-syntax-error23_82 given-name_112 message_113 expr_114 sub-expr14_115 #f #f #t #t #f #f))"
"((given-name_116 message_117 expr13_118)"
"(raise-unbound-syntax-error23_82 given-name_116 message_117 expr13_118 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_119 given-name_120 message_121 expr_122 sub-expr_123 extra-sources_124 message-suffix_125)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_130)(not given-name_120)))"
"(if or-part_130 or-part_130(symbol? given-name_120)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_120)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_121)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_121)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_124)(andmap2 syntax?$1 extra-sources_124) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_124)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_125)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_125)))"
"(values))))"
"(let-values(((name_126)"
"(format"
"                           \"~a\""
"(let-values(((or-part_131) given-name_120))"
"(if or-part_131"
" or-part_131"
"(let-values(((or-part_132)(extract-form-name expr_122)))"
"(if or-part_132 or-part_132 '?)))))))"
"(let-values(((at-message_127)"
"(let-values(((or-part_133)"
"(if sub-expr_123"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_123)))"
" #f)"
" #f)))"
"                              (if or-part_133 or-part_133 \"\"))))"
"(let-values(((in-message_128)"
"(let-values(((or-part_134)"
"(if expr_122"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_122)))"
" #f)"
" #f)))"
"                                (if or-part_134 or-part_134 \"\"))))"
"(let-values(((src-loc-str_129)"
"(let-values(((or-part_135)(extract-source-location sub-expr_123)))"
"(if or-part_135"
" or-part_135"
"(let-values(((or-part_136)(extract-source-location expr_122)))"
"                                      (if or-part_136 or-part_136 \"\"))))))"
"(raise"
"(exn:fail:syntax_119"
"(string-append"
" src-loc-str_129"
" name_126"
"                       \": \""
" message_121"
" at-message_127"
" in-message_128"
" message-suffix_125)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_137) sub-expr_123))(if or-part_137 or-part_137 expr_122))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_138) sub-expr_123))(if or-part_138 or-part_138 expr_122)))"
" extra-sources_124)"
" extra-sources_124))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_139)"
"(if(syntax?$1 s_139)"
"(let-values()"
"(let-values(((e_140)(syntax-e$1 s_139)))"
"(if(symbol? e_140)"
"(let-values() e_140)"
"(if(if(pair? e_140)(identifier?(car e_140)) #f)"
"(let-values()(syntax-e$1(car e_140)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_141)"
"(if(syntax?$1 s_141)"
"(if(syntax-srcloc s_141)"
"        (let-values (((str_142) (srcloc->string (syntax-srcloc s_141)))) (if str_142 (string-append str_142 \": \") #f))"
" #f)"
" #f)))"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type"
" 'module"
" #f"
" 18"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17)"
" #f"
" 'module)))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 0 'source-name)"
"(make-struct-field-accessor -ref_8 1 'self)"
"(make-struct-field-accessor -ref_8 2 'requires)"
"(make-struct-field-accessor -ref_8 3 'provides)"
"(make-struct-field-accessor -ref_8 4 'access)"
"(make-struct-field-accessor -ref_8 5 'language-info)"
"(make-struct-field-accessor -ref_8 6 'min-phase-level)"
"(make-struct-field-accessor -ref_8 7 'max-phase-level)"
"(make-struct-field-accessor -ref_8 8 'prepare-instance)"
"(make-struct-field-accessor -ref_8 9 'instantiate-phase)"
"(make-struct-field-accessor -ref_8 10 'primitive?)"
"(make-struct-field-accessor -ref_8 11 'predefined?)"
"(make-struct-field-accessor -ref_8 12 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_8 13 'no-protected?)"
"(make-struct-field-accessor -ref_8 14 'inspector)"
"(make-struct-field-accessor -ref_8 15 'submodule-names)"
"(make-struct-field-accessor -ref_8 16 'supermodule-name)"
"(make-struct-field-accessor -ref_8 17 'get-all-variables)"
"(make-struct-field-mutator -set!_9 4 'access))))"
"(define-values"
"(lifted/1.1$22)"
"(make-required 'make-module(case-lambda((self_111)(apply missing-kw self_111 null))) #f #f))"
"(define-values"
"(make-module34.1)"
"(lambda(cross-phase-persistent?13_112"
" cross-phase-persistent?29_113"
" get-all-variables17_114"
" get-all-variables33_115"
" instantiate-phase-callback8_116"
" language-info10_117"
" language-info26_118"
" max-phase-level7_119"
" max-phase-level23_120"
" min-phase-level6_121"
" min-phase-level22_122"
" no-protected?14_123"
" no-protected?30_124"
" predefined?12_125"
" predefined?28_126"
" prepare-instance-callback9_127"
" prepare-instance-callback25_128"
" primitive?11_129"
" primitive?27_130"
" provides5_131"
" requires4_132"
" requires20_133"
" self3_134"
" source-name2_135"
" source-name18_136"
" submodule-names15_137"
" submodule-names31_138"
" supermodule-name16_139"
" supermodule-name32_140)"
"(let-values(((source-name_141)(if source-name18_136 source-name2_135 #f)))"
"(let-values(((self_142) self3_134))"
"(let-values(((requires_143)(if requires20_133 requires4_132 null)))"
"(let-values(((provides_144) provides5_131))"
"(let-values(((min-phase-level_145)(if min-phase-level22_122 min-phase-level6_121 0)))"
"(let-values(((max-phase-level_146)(if max-phase-level23_120 max-phase-level7_119 0)))"
"(let-values(((instantiate-phase_147) instantiate-phase-callback8_116))"
"(let-values(((prepare-instance_148)"
"(if prepare-instance-callback25_128 prepare-instance-callback9_127 void)))"
"(let-values(((language-info_149)(if language-info26_118 language-info10_117 #f)))"
"(let-values(((primitive?_150)(if primitive?27_130 primitive?11_129 #f)))"
"(let-values(((predefined?_151)(if predefined?28_126 predefined?12_125 #f)))"
"(let-values(((cross-phase-persistent?_152)"
"(if cross-phase-persistent?29_113"
" cross-phase-persistent?13_112"
" primitive?_150)))"
"(let-values(((no-protected?_153)(if no-protected?30_124 no-protected?14_123 #f)))"
"(let-values(((submodule-names_154)"
"(if submodule-names31_138 submodule-names15_137 null)))"
"(let-values(((supermodule-name_155)"
"(if supermodule-name32_140 supermodule-name16_139 #f)))"
"(let-values(((get-all-variables_156)"
"(if get-all-variables33_115 get-all-variables17_114(lambda() null))))"
"(let-values()"
"(module1.1"
" source-name_141"
" self_142"
" requires_143"
" provides_144"
" #f"
" language-info_149"
" min-phase-level_145"
" max-phase-level_146"
" prepare-instance_148"
" instantiate-phase_147"
" primitive?_150"
" predefined?_151"
" cross-phase-persistent?_152"
" no-protected?_153"
"(current-code-inspector)"
" submodule-names_154"
" supermodule-name_155"
" get-all-variables_156))))))))))))))))))))"
"(define-values"
"(unpack35.1)"
"(lambda(given-kws_157 given-args_158)"
"(let-values(((cross-phase-persistent?29_159)"
"(if(pair? given-kws_157)(eq? '#:cross-phase-persistent?(car given-kws_157)) #f)))"
"(let-values(((cross-phase-persistent?13_160)(if cross-phase-persistent?29_159(car given-args_158)(void)))"
"((given-kws_161)(if cross-phase-persistent?29_159(cdr given-kws_157) given-kws_157))"
"((given-args_162)(if cross-phase-persistent?29_159(cdr given-args_158) given-args_158)))"
"(let-values(((get-all-variables33_163)"
"(if(pair? given-kws_161)(eq? '#:get-all-variables(car given-kws_161)) #f)))"
"(let-values(((get-all-variables17_164)(if get-all-variables33_163(car given-args_162)(void)))"
"((given-kws_165)(if get-all-variables33_163(cdr given-kws_161) given-kws_161))"
"((given-args_166)(if get-all-variables33_163(cdr given-args_162) given-args_162)))"
"(let-values(((instantiate-phase-callback8_167)(car given-args_166))"
"((given-kws_168)(cdr given-kws_165))"
"((given-args_169)(cdr given-args_166)))"
"(let-values(((language-info26_170)"
"(if(pair? given-kws_168)(eq? '#:language-info(car given-kws_168)) #f)))"
"(let-values(((language-info10_171)(if language-info26_170(car given-args_169)(void)))"
"((given-kws_172)(if language-info26_170(cdr given-kws_168) given-kws_168))"
"((given-args_173)(if language-info26_170(cdr given-args_169) given-args_169)))"
"(let-values(((max-phase-level23_174)"
"(if(pair? given-kws_172)(eq? '#:max-phase-level(car given-kws_172)) #f)))"
"(let-values(((max-phase-level7_175)(if max-phase-level23_174(car given-args_173)(void)))"
"((given-kws_176)(if max-phase-level23_174(cdr given-kws_172) given-kws_172))"
"((given-args_177)(if max-phase-level23_174(cdr given-args_173) given-args_173)))"
"(let-values(((min-phase-level22_178)"
"(if(pair? given-kws_176)(eq? '#:min-phase-level(car given-kws_176)) #f)))"
"(let-values(((min-phase-level6_179)(if min-phase-level22_178(car given-args_177)(void)))"
"((given-kws_180)(if min-phase-level22_178(cdr given-kws_176) given-kws_176))"
"((given-args_181)(if min-phase-level22_178(cdr given-args_177) given-args_177)))"
"(let-values(((no-protected?30_182)"
"(if(pair? given-kws_180)(eq? '#:no-protected?(car given-kws_180)) #f)))"
"(let-values(((no-protected?14_183)(if no-protected?30_182(car given-args_181)(void)))"
"((given-kws_184)(if no-protected?30_182(cdr given-kws_180) given-kws_180))"
"((given-args_185)"
"(if no-protected?30_182(cdr given-args_181) given-args_181)))"
"(let-values(((predefined?28_186)"
"(if(pair? given-kws_184)(eq? '#:predefined?(car given-kws_184)) #f)))"
"(let-values(((predefined?12_187)(if predefined?28_186(car given-args_185)(void)))"
"((given-kws_188)(if predefined?28_186(cdr given-kws_184) given-kws_184))"
"((given-args_189)"
"(if predefined?28_186(cdr given-args_185) given-args_185)))"
"(let-values(((prepare-instance-callback25_190)"
"(if(pair? given-kws_188)"
"(eq? '#:prepare-instance-callback(car given-kws_188))"
" #f)))"
"(let-values(((prepare-instance-callback9_191)"
"(if prepare-instance-callback25_190(car given-args_189)(void)))"
"((given-kws_192)"
"(if prepare-instance-callback25_190"
"(cdr given-kws_188)"
" given-kws_188))"
"((given-args_193)"
"(if prepare-instance-callback25_190"
"(cdr given-args_189)"
" given-args_189)))"
"(let-values(((primitive?27_194)"
"(if(pair? given-kws_192)"
"(eq? '#:primitive?(car given-kws_192))"
" #f)))"
"(let-values(((primitive?11_195)"
"(if primitive?27_194(car given-args_193)(void)))"
"((given-kws_196)"
"(if primitive?27_194(cdr given-kws_192) given-kws_192))"
"((given-args_197)"
"(if primitive?27_194(cdr given-args_193) given-args_193)))"
"(let-values(((provides5_198)(car given-args_197))"
"((given-kws_199)(cdr given-kws_196))"
"((given-args_200)(cdr given-args_197)))"
"(let-values(((requires20_201)"
"(if(pair? given-kws_199)"
"(eq? '#:requires(car given-kws_199))"
" #f)))"
"(let-values(((requires4_202)"
"(if requires20_201(car given-args_200)(void)))"
"((given-kws_203)"
"(if requires20_201(cdr given-kws_199) given-kws_199))"
"((given-args_204)"
"(if requires20_201(cdr given-args_200) given-args_200)))"
"(let-values(((self3_205)(car given-args_204))"
"((given-kws_206)(cdr given-kws_203))"
"((given-args_207)(cdr given-args_204)))"
"(let-values(((source-name18_208)"
"(if(pair? given-kws_206)"
"(eq? '#:source-name(car given-kws_206))"
" #f)))"
"(let-values(((source-name2_209)"
"(if source-name18_208(car given-args_207)(void)))"
"((given-kws_210)"
"(if source-name18_208"
"(cdr given-kws_206)"
" given-kws_206))"
"((given-args_211)"
"(if source-name18_208"
"(cdr given-args_207)"
" given-args_207)))"
"(let-values(((submodule-names31_212)"
"(if(pair? given-kws_210)"
"(eq? '#:submodule-names(car given-kws_210))"
" #f)))"
"(let-values(((submodule-names15_213)"
"(if submodule-names31_212"
"(car given-args_211)"
"(void)))"
"((given-kws_214)"
"(if submodule-names31_212"
"(cdr given-kws_210)"
" given-kws_210))"
"((given-args_215)"
"(if submodule-names31_212"
"(cdr given-args_211)"
" given-args_211)))"
"(let-values(((supermodule-name32_216)(pair? given-kws_214)))"
"(let-values(((supermodule-name16_217)"
"(if supermodule-name32_216"
"(car given-args_215)"
"(void))))"
"(make-module34.1"
" cross-phase-persistent?13_160"
" cross-phase-persistent?29_159"
" get-all-variables17_164"
" get-all-variables33_163"
" instantiate-phase-callback8_167"
" language-info10_171"
" language-info26_170"
" max-phase-level7_175"
" max-phase-level23_174"
" min-phase-level6_179"
" min-phase-level22_178"
" no-protected?14_183"
" no-protected?30_182"
" predefined?12_187"
" predefined?28_186"
" prepare-instance-callback9_191"
" prepare-instance-callback25_190"
" primitive?11_195"
" primitive?27_194"
" provides5_198"
" requires4_202"
" requires20_201"
" self3_205"
" source-name2_209"
" source-name18_208"
" submodule-names15_213"
" submodule-names31_212"
" supermodule-name16_217"
" supermodule-name32_216))))))))))))))))))))))))))))))))"
"(define-values"
"(make-module36.1)"
"(lifted/1.1$22"
"(lambda(given-kws_218 given-argc_219)"
"(if(= given-argc_219 2)"
"(subsets?"
" '(#:instantiate-phase-callback #:provides #:self)"
" given-kws_218"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name))"
" #f))"
"(case-lambda((given-kws_220 given-args_221)(unpack35.1 given-kws_220 given-args_221)))"
" '(#:instantiate-phase-callback #:provides #:self)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)))"
"(define-values"
"(struct:module-instance"
" module-instance37.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_222 make-_223 ?_224 -ref_225 -set!_226)"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))"
"(values"
" struct:_222"
" make-_223"
" ?_224"
"(make-struct-field-accessor -ref_225 0 'namespace)"
"(make-struct-field-accessor -ref_225 1 'module)"
"(make-struct-field-accessor -ref_225 2 'shifted-requires)"
"(make-struct-field-accessor -ref_225 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_225 4 'made-available?)"
"(make-struct-field-accessor -ref_225 5 'attached?)"
"(make-struct-field-accessor -ref_225 6 'data-box)"
"(make-struct-field-mutator -set!_226 2 'shifted-requires)"
"(make-struct-field-mutator -set!_226 4 'made-available?)"
"(make-struct-field-mutator -set!_226 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_273 m_274)(module-instance37.1 m-ns_273 m_274 #f(make-hasheqv) #f #f(box #f))))"
"(define-values"
"(lifted/2.1$9)"
"(make-required"
" 'make-module-namespace"
"(case-lambda((self_275 ns_276)(apply missing-kw self_275 ns_276 null)))"
" #f"
" #f))"
"(define-values"
"(make-module-namespace45.1)"
"(lambda(for-submodule?40_277 mpi38_278 root-expand-context39_279 ns44_280)"
"(let-values(((ns_281) ns44_280))"
"(let-values(((name-mpi_282) mpi38_278))"
"(let-values(((root-expand-ctx_283) root-expand-context39_279))"
"(let-values(((for-submodule?_284) for-submodule?40_277))"
"(let-values()"
"(let-values(((phase_285) 0))"
"(let-values(((name_286)(1/module-path-index-resolve name-mpi_282)))"
"(let-values(((m-ns_287)"
"(let-values(((the-struct_289)"
"(let-values(((...namespace/module.rkt:135:27_290) new-namespace11.1)"
"((ns156_291) ns_281)"
"((root-expand-ctx157_292) root-expand-ctx_283)"
"((temp158_293) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference new-namespace11.1))"
"(new-namespace9.1"
" temp158_293"
" #t"
" root-expand-ctx157_292"
" #t"
" ns156_291"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:135:27_290"
" keyword-procedure-extract"
" '(#:register? #:root-expand-ctx)"
" 3)"
" '(#:register? #:root-expand-ctx)"
"(list temp158_293 root-expand-ctx157_292)"
" ns156_291)))))"
"(if(1/namespace? the-struct_289)"
"(let-values(((mpi148_294) name-mpi_282)"
"((source-name149_295)(resolved-module-path-root-name name_286))"
"((phase150_296) phase_285)"
"((0-phase151_297) phase_285)"
"((submodule-declarations152_298)"
"(if for-submodule?_284"
"(namespace-submodule-declarations ns_281)"
"(make-hash)))"
"((available-module-instances153_299)(make-hasheqv))"
"((module-instances154_300)(make-hasheqv))"
"((declaration-inspector155_301)(current-code-inspector)))"
"(namespace1.1"
" mpi148_294"
" source-name149_295"
"(namespace-root-expand-ctx the-struct_289)"
" phase150_296"
" 0-phase151_297"
"(namespace-phase-to-namespace the-struct_289)"
"(namespace-phase-level-to-definitions the-struct_289)"
"(namespace-module-registry$1 the-struct_289)"
"(namespace-bulk-binding-registry the-struct_289)"
" submodule-declarations152_298"
"(namespace-root-namespace the-struct_289)"
" declaration-inspector155_301"
"(namespace-inspector the-struct_289)"
" available-module-instances153_299"
" module-instances154_300))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_289)))))"
"(let-values((()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_287) phase_285 m-ns_287)"
"(values))))"
"(let-values(((at-phase_288)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_287) phase_285 at-phase_288)"
"(hash-set! at-phase_288 name_286(make-module-instance m-ns_287 #f))"
" m-ns_287)))))))))))))"
"(define-values"
"(unpack46.1)"
"(lambda(given-kws_302 given-args_303 ns44_304)"
"(let-values(((for-submodule?40_305)(car given-args_303))"
"((given-kws_306)(cdr given-kws_302))"
"((given-args_307)(cdr given-args_303)))"
"(let-values(((mpi38_308)(car given-args_307))"
"((given-kws_309)(cdr given-kws_306))"
"((given-args_310)(cdr given-args_307)))"
"(let-values(((root-expand-context39_311)(car given-args_310)))"
"(make-module-namespace45.1 for-submodule?40_305 mpi38_308 root-expand-context39_311 ns44_304))))))"
"(define-values"
"(make-module-namespace47.1)"
"(lifted/2.1$9"
"(lambda(given-kws_312 given-argc_313)"
"(if(= given-argc_313 3)"
"(let-values(((l2_314) given-kws_312))"
"(if(pair? l2_314)"
"(if(eq?(car l2_314) '#:for-submodule?)"
"(let-values(((l2_315)(cdr l2_314)))"
"(if(pair? l2_315)"
"(if(eq?(car l2_315) '#:mpi)"
"(let-values(((l2_316)(cdr l2_315)))"
"(if(pair? l2_316)(if(eq?(car l2_316) '#:root-expand-context)(null?(cdr l2_316)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_317 given-args_318 ns_319)(unpack46.1 given-kws_317 given-args_318 ns_319)))"
" '(#:for-submodule? #:mpi #:root-expand-context)"
" '(#:for-submodule? #:mpi #:root-expand-context)))"
"(define-values"
"(declare-module!53.1)"
"(lambda(as-submodule?48_320 as-submodule?49_321 ns50_322 m51_323 mod-name52_324)"
"(let-values(((ns_325) ns50_322))"
"(let-values(((m_326) m51_323))"
"(let-values(((mod-name_327) mod-name52_324))"
"(let-values(((as-submodule?_328)(if as-submodule?49_321 as-submodule?48_320 #f)))"
"(let-values()"
"(let-values(((prior-m_329)"
"(if(not as-submodule?_328)"
"(hash-ref"
"(module-registry-declarations(namespace-module-registry$1 ns_325))"
" mod-name_327"
" #f)"
" #f)))"
"(let-values(((prior-mi_330)"
"(if prior-m_329"
"(if(not(eq? m_326 prior-m_329))"
"(let-values(((ns159_331) ns_325)"
"((mod-name160_332) mod-name_327)"
"((temp161_333)(namespace-phase ns_325)))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns159_331"
" mod-name160_332"
" temp161_333)"
"(namespace->module-instance69.1 ns159_331 mod-name160_332 temp161_333)))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_329(not(eq? m_326 prior-m_329)) #f)"
"(let-values()(check-redeclaration-ok prior-m_329 prior-mi_330 mod-name_327))"
"(void))"
"(hash-set!"
"(if as-submodule?_328"
"(namespace-submodule-declarations ns_325)"
"(module-registry-declarations(namespace-module-registry$1 ns_325)))"
" mod-name_327"
" m_326)"
"(if as-submodule?_328"
"(void)"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_325)"
" mod-name_327"
"(module-self m_326)"
"(module-provides m_326))))"
"((1/current-module-name-resolver) mod-name_327 #f)"
"(if prior-mi_330"
"(let-values()"
"(let-values(((m-ns_334)(module-instance-namespace prior-mi_330)))"
"(let-values(((states_335)(module-instance-phase-level-to-state prior-mi_330)))"
"(let-values(((phase_336)(namespace-phase ns_325)))"
"(let-values(((visit?_337)(eq? 'started(hash-ref states_335(add1 phase_336) #f))))"
"(let-values(((run?_338)(eq? 'started(hash-ref states_335 phase_336 #f))))"
"(let-values(((at-phase_339)"
"(hash-ref(namespace-module-instances ns_325) phase_336)))"
"(begin"
"(hash-set! at-phase_339 mod-name_327(make-module-instance m-ns_334 m_326))"
"(if visit?_337"
"(let-values()"
"(let-values(((ns162_340) ns_325)"
"((temp163_341)(namespace-mpi m-ns_334))"
"((phase164_342) phase_336))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!103.1))"
"(namespace-module-visit!101.1 #f #f ns162_340 temp163_341 phase164_342)"
"(namespace-module-visit!103.1 ns162_340 temp163_341 phase164_342))))"
"(void))"
"(if run?_338"
"(let-values()"
"(let-values(((ns165_343) ns_325)"
"((temp166_344)(namespace-mpi m-ns_334))"
"((phase167_345) phase_336))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns165_343"
" temp166_344"
" phase167_345)"
"(namespace-module-instantiate!95.1 ns165_343 temp166_344 phase167_345))))"
"(void))))))))))"
"(void))))))))))))"
"(define-values"
"(unpack54.1$2)"
"(lambda(given-kws_346 given-args_347 ns50_348 m51_349 mod-name52_350)"
"(let-values(((as-submodule?49_351)(pair? given-kws_346)))"
"(let-values(((as-submodule?48_352)(if as-submodule?49_351(car given-args_347)(void))))"
"(declare-module!53.1 as-submodule?48_352 as-submodule?49_351 ns50_348 m51_349 mod-name52_350)))))"
"(define-values"
"(declare-module!55.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_353 given-argc_354)"
"(if(= given-argc_354 5)"
"(let-values(((l1_355) given-kws_353))"
"(let-values(((l1_356)"
"(if(null? l1_355) l1_355(if(eq?(car l1_355) '#:as-submodule?)(cdr l1_355) l1_355))))"
"(null? l1_356)))"
" #f))"
"(case-lambda"
"((given-kws_357 given-args_358 ns_359 m_360 mod-name_361)"
"(unpack54.1$2 given-kws_357 given-args_358 ns_359 m_360 mod-name_361)))"
" null"
" '(#:as-submodule?)"
"(let-values(((declare-module!_362)"
"(case-lambda((ns_363 m_364 mod-name_365)(unpack54.1$2 null null ns_363 m_364 mod-name_365)))))"
" declare-module!_362)))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_366 prior-mi_367 mod-name_368)"
"(begin"
"(if(module-cross-phase-persistent? prior-m_366)"
"(let-values()"
"          (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_368))"
"(void))"
"(if(if prior-mi_367"
"(let-values(((or-part_369)(module-instance-attached? prior-mi_367)))"
"(if or-part_369"
" or-part_369"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_367))))))"
" #f)"
"(let-values()"
"          (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_368))"
"(void)))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_370 mod-name_371) (raise-arguments-error who_370 \"unknown module\" \"module name\" mod-name_371)))"
"(define-values"
"(namespace->module-instance67.1)"
"(lambda(check-available-at-phase-level58_372"
" check-available-at-phase-level62_373"
" complain-on-failure?57_374"
" complain-on-failure?61_375"
" install!-namespace56_376"
" install!-namespace60_377"
" unavailable-callback59_378"
" unavailable-callback63_379"
" ns64_380"
" name65_381"
" 0-phase66_382)"
"(let-values(((ns_383) ns64_380))"
"(let-values(((name_384) name65_381))"
"(let-values(((0-phase_385) 0-phase66_382))"
"(let-values(((install!-ns_386)(if install!-namespace60_377 install!-namespace56_376 #f)))"
"(let-values(((complain-on-failure?_387)(if complain-on-failure?61_375 complain-on-failure?57_374 #f)))"
"(let-values(((check-available-at-phase-level_388)"
"(if check-available-at-phase-level62_373 check-available-at-phase-level58_372 #f)))"
"(let-values(((unavailable-callback_389)"
"(if unavailable-callback63_379 unavailable-callback59_378 void)))"
"(let-values()"
"(let-values(((mi_390)"
"(let-values(((or-part_391)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_383) 0-phase_385 '#hasheq())"
" name_384"
" #f)))"
"(if or-part_391"
" or-part_391"
"(let-values(((or-part_392)"
"(let-values(((c-ns_393)"
"(let-values(((or-part_394)"
"(namespace-root-namespace ns_383)))"
"(if or-part_394 or-part_394 ns_383))))"
"(hash-ref(namespace-module-instances c-ns_393) name_384 #f))))"
"(if or-part_392"
" or-part_392"
"(if complain-on-failure?_387"
"                                            (error \"no module instance found:\" name_384 0-phase_385)"
" #f)))))))"
"(begin"
"(if(if mi_390 check-available-at-phase-level_388 #f)"
"(let-values()"
"(check-availablilty mi_390 check-available-at-phase-level_388 unavailable-callback_389))"
"(void))"
" mi_390))))))))))))"
"(define-values"
"(unpack68.1$2)"
"(lambda(given-kws_395 given-args_396 ns64_397 name65_398 0-phase66_399)"
"(let-values(((check-available-at-phase-level62_400)"
"(if(pair? given-kws_395)(eq? '#:check-available-at-phase-level(car given-kws_395)) #f)))"
"(let-values(((check-available-at-phase-level58_401)"
"(if check-available-at-phase-level62_400(car given-args_396)(void)))"
"((given-kws_402)(if check-available-at-phase-level62_400(cdr given-kws_395) given-kws_395))"
"((given-args_403)(if check-available-at-phase-level62_400(cdr given-args_396) given-args_396)))"
"(let-values(((complain-on-failure?61_404)"
"(if(pair? given-kws_402)(eq? '#:complain-on-failure?(car given-kws_402)) #f)))"
"(let-values(((complain-on-failure?57_405)(if complain-on-failure?61_404(car given-args_403)(void)))"
"((given-kws_406)(if complain-on-failure?61_404(cdr given-kws_402) given-kws_402))"
"((given-args_407)(if complain-on-failure?61_404(cdr given-args_403) given-args_403)))"
"(let-values(((install!-namespace60_408)"
"(if(pair? given-kws_406)(eq? '#:install!-namespace(car given-kws_406)) #f)))"
"(let-values(((install!-namespace56_409)(if install!-namespace60_408(car given-args_407)(void)))"
"((given-kws_410)(if install!-namespace60_408(cdr given-kws_406) given-kws_406))"
"((given-args_411)(if install!-namespace60_408(cdr given-args_407) given-args_407)))"
"(let-values(((unavailable-callback63_412)(pair? given-kws_410)))"
"(let-values(((unavailable-callback59_413)"
"(if unavailable-callback63_412(car given-args_411)(void))))"
"(namespace->module-instance67.1"
" check-available-at-phase-level58_401"
" check-available-at-phase-level62_400"
" complain-on-failure?57_405"
" complain-on-failure?61_404"
" install!-namespace56_409"
" install!-namespace60_408"
" unavailable-callback59_413"
" unavailable-callback63_412"
" ns64_397"
" name65_398"
" 0-phase66_399)))))))))))"
"(define-values"
"(namespace->module-instance69.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_414 given-argc_415)"
"(if(= given-argc_415 5)"
"(let-values(((l1_416) given-kws_414))"
"(let-values(((l1_417)"
"(if(null? l1_416)"
" l1_416"
"(if(eq?(car l1_416) '#:check-available-at-phase-level)(cdr l1_416) l1_416))))"
"(let-values(((l1_418) l1_417))"
"(let-values(((l1_419)"
"(if(null? l1_418)"
" l1_418"
"(if(eq?(car l1_418) '#:complain-on-failure?)(cdr l1_418) l1_418))))"
"(let-values(((l1_420) l1_419))"
"(let-values(((l1_421)"
"(if(null? l1_420)"
" l1_420"
"(if(eq?(car l1_420) '#:install!-namespace)(cdr l1_420) l1_420))))"
"(let-values(((l1_422) l1_421))"
"(let-values(((l1_423)"
"(if(null? l1_422)"
" l1_422"
"(if(eq?(car l1_422) '#:unavailable-callback)(cdr l1_422) l1_422))))"
"(null? l1_423)))))))))"
" #f))"
"(case-lambda"
"((given-kws_424 given-args_425 ns_426 name_427 0-phase_428)"
"(unpack68.1$2 given-kws_424 given-args_425 ns_426 name_427 0-phase_428)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:install!-namespace #:unavailable-callback)"
"(let-values(((namespace->module-instance_429)"
"(case-lambda((ns_430 name_431 0-phase_432)(unpack68.1$2 null null ns_430 name_431 0-phase_432)))))"
" namespace->module-instance_429)))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_433 name_434 0-phase_435 m_436 existing-m-ns_437)"
"(let-values(((m-ns_438)"
"(let-values(((the-struct_440) ns_433))"
"(if(1/namespace? the-struct_440)"
"(let-values(((mpi168_441)(namespace-mpi existing-m-ns_437))"
"((source-name169_442)(namespace-source-name existing-m-ns_437))"
"((root-expand-ctx170_443)(namespace-root-expand-ctx existing-m-ns_437))"
"((phase171_444)(namespace-phase existing-m-ns_437))"
"((0-phase172_445)(namespace-0-phase existing-m-ns_437))"
"((phase-to-namespace173_446)(make-hasheqv))"
"((phase-level-to-definitions174_447)"
"(if(module-cross-phase-persistent? m_436)"
"(namespace-phase-level-to-definitions existing-m-ns_437)"
"(make-hasheqv)))"
"((declaration-inspector175_448)(module-inspector m_436))"
"((inspector176_449)(namespace-inspector existing-m-ns_437)))"
"(namespace1.1"
" mpi168_441"
" source-name169_442"
" root-expand-ctx170_443"
" phase171_444"
" 0-phase172_445"
" phase-to-namespace173_446"
" phase-level-to-definitions174_447"
"(namespace-module-registry$1 the-struct_440)"
"(namespace-bulk-binding-registry the-struct_440)"
"(namespace-submodule-declarations the-struct_440)"
"(namespace-root-namespace the-struct_440)"
" declaration-inspector175_448"
" inspector176_449"
"(namespace-available-module-instances the-struct_440)"
"(namespace-module-instances the-struct_440)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_440)))))"
"(let-values(((mi_439)(make-module-instance m-ns_438 m_436)))"
"(if(module-cross-phase-persistent? m_436)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_438) 0 m-ns_438)"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_450)(namespace-root-namespace ns_433)))(if or-part_450 or-part_450 ns_433)))"
" name_434"
" mi_439)"
"(hash-set!(module-instance-phase-level-to-state mi_439) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_438) 0-phase_435 m-ns_438)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_438)"
" 0-phase_435"
"(namespace->definitions existing-m-ns_437 0-phase_435))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_439) 0 'started)(values))))"
"(let-values(((at-phase_451)"
"(let-values(((or-part_452)"
"(hash-ref(namespace-module-instances ns_433) 0-phase_435 #f)))"
"(if or-part_452"
" or-part_452"
"(let-values(((at-phase_453)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_433) 0-phase_435 at-phase_453)"
" at-phase_453))))))"
"(hash-set! at-phase_451 name_434 mi_439)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_454 name_455 0-phase_456 m_457 mpi_458)"
"(let-values(((m-ns_459)"
"(let-values(((the-struct_461) ns_454))"
"(if(1/namespace? the-struct_461)"
"(let-values(((mpi177_462) mpi_458)"
"((source-name178_463)"
"(let-values(((or-part_471)(module-source-name m_457)))"
"(if or-part_471"
" or-part_471"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_458)))))"
"((root-expand-ctx179_464)(box #f))"
"((phase180_465) 0-phase_456)"
"((0-phase181_466) 0-phase_456)"
"((phase-to-namespace182_467)(make-hasheqv))"
"((phase-level-to-definitions183_468)(make-hasheqv))"
"((declaration-inspector184_469)(module-inspector m_457))"
"((inspector185_470)(make-inspector(module-inspector m_457))))"
"(namespace1.1"
" mpi177_462"
" source-name178_463"
" root-expand-ctx179_464"
" phase180_465"
" 0-phase181_466"
" phase-to-namespace182_467"
" phase-level-to-definitions183_468"
"(namespace-module-registry$1 the-struct_461)"
"(namespace-bulk-binding-registry the-struct_461)"
"(namespace-submodule-declarations the-struct_461)"
"(namespace-root-namespace the-struct_461)"
" declaration-inspector184_469"
" inspector185_470"
"(namespace-available-module-instances the-struct_461)"
"(namespace-module-instances the-struct_461)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_461)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_459) 0-phase_456 m-ns_459)(values))))"
"(let-values(((mi_460)(make-module-instance m-ns_459 m_457)))"
"(begin"
"(if(module-cross-phase-persistent? m_457)"
"(hash-set!(namespace-module-instances ns_454) name_455 mi_460)"
"(let-values(((at-phase_472)"
"(let-values(((or-part_473)(hash-ref(namespace-module-instances ns_454) 0-phase_456 #f)))"
"(if or-part_473"
" or-part_473"
"(let-values(((at-phase_474)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_454) 0-phase_456 at-phase_474)"
" at-phase_474))))))"
"(hash-set! at-phase_472 name_455 mi_460)))"
" mi_460))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_475 check-available-at-phase-level_476 unavailable-callback_477)"
"(let-values(((m_478)(module-instance-module mi_475)))"
"(if(if m_478"
"(if(<="
"(module-min-phase-level m_478)"
"(add1 check-available-at-phase-level_476)"
"(module-max-phase-level m_478))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_475)(add1 check-available-at-phase-level_476) #f))"
" #f)"
" #f)"
"(let-values()(unavailable-callback_477))"
"(void)))))"
"(define-values"
"(namespace->module-namespace79.1)"
"(lambda(check-available-at-phase-level71_479"
" check-available-at-phase-level74_480"
" complain-on-failure?70_481"
" complain-on-failure?73_482"
" unavailable-callback72_483"
" unavailable-callback75_484"
" ns76_485"
" name77_486"
" 0-phase78_487)"
"(let-values(((ns_488) ns76_485))"
"(let-values(((name_489) name77_486))"
"(let-values(((0-phase_490) 0-phase78_487))"
"(let-values(((complain-on-failure?_491)(if complain-on-failure?73_482 complain-on-failure?70_481 #f)))"
"(let-values(((check-available-at-phase-level_492)"
"(if check-available-at-phase-level74_480 check-available-at-phase-level71_479 #f)))"
"(let-values(((unavailable-callback_493)(if unavailable-callback75_484 unavailable-callback72_483 void)))"
"(let-values()"
"(let-values(((mi_494)"
"(let-values(((...namespace/module.rkt:304:13_495) namespace->module-instance69.1)"
"((ns186_496) ns_488)"
"((name187_497) name_489)"
"((0-phase188_498) 0-phase_490)"
"((complain-on-failure?189_499) complain-on-failure?_491)"
"((check-available-at-phase-level190_500)"
" check-available-at-phase-level_492)"
"((unavailable-callback191_501) unavailable-callback_493))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1"
" check-available-at-phase-level190_500"
" #t"
" complain-on-failure?189_499"
" #t"
" #f"
" #f"
" unavailable-callback191_501"
" #t"
" ns186_496"
" name187_497"
" 0-phase188_498)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:304:13_495"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(list"
" check-available-at-phase-level190_500"
" complain-on-failure?189_499"
" unavailable-callback191_501)"
" ns186_496"
" name187_497"
" 0-phase188_498)))))"
"(if mi_494(module-instance-namespace mi_494) #f)))))))))))"
"(define-values"
"(unpack80.1)"
"(lambda(given-kws_502 given-args_503 ns76_504 name77_505 0-phase78_506)"
"(let-values(((check-available-at-phase-level74_507)"
"(if(pair? given-kws_502)(eq? '#:check-available-at-phase-level(car given-kws_502)) #f)))"
"(let-values(((check-available-at-phase-level71_508)"
"(if check-available-at-phase-level74_507(car given-args_503)(void)))"
"((given-kws_509)(if check-available-at-phase-level74_507(cdr given-kws_502) given-kws_502))"
"((given-args_510)(if check-available-at-phase-level74_507(cdr given-args_503) given-args_503)))"
"(let-values(((complain-on-failure?73_511)"
"(if(pair? given-kws_509)(eq? '#:complain-on-failure?(car given-kws_509)) #f)))"
"(let-values(((complain-on-failure?70_512)(if complain-on-failure?73_511(car given-args_510)(void)))"
"((given-kws_513)(if complain-on-failure?73_511(cdr given-kws_509) given-kws_509))"
"((given-args_514)(if complain-on-failure?73_511(cdr given-args_510) given-args_510)))"
"(let-values(((unavailable-callback75_515)(pair? given-kws_513)))"
"(let-values(((unavailable-callback72_516)(if unavailable-callback75_515(car given-args_514)(void))))"
"(namespace->module-namespace79.1"
" check-available-at-phase-level71_508"
" check-available-at-phase-level74_507"
" complain-on-failure?70_512"
" complain-on-failure?73_511"
" unavailable-callback72_516"
" unavailable-callback75_515"
" ns76_504"
" name77_505"
" 0-phase78_506)))))))))"
"(define-values"
"(namespace->module-namespace81.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_517 given-argc_518)"
"(if(= given-argc_518 5)"
"(let-values(((l1_519) given-kws_517))"
"(let-values(((l1_520)"
"(if(null? l1_519)"
" l1_519"
"(if(eq?(car l1_519) '#:check-available-at-phase-level)(cdr l1_519) l1_519))))"
"(let-values(((l1_521) l1_520))"
"(let-values(((l1_522)"
"(if(null? l1_521)"
" l1_521"
"(if(eq?(car l1_521) '#:complain-on-failure?)(cdr l1_521) l1_521))))"
"(let-values(((l1_523) l1_522))"
"(let-values(((l1_524)"
"(if(null? l1_523)"
" l1_523"
"(if(eq?(car l1_523) '#:unavailable-callback)(cdr l1_523) l1_523))))"
"(null? l1_524)))))))"
" #f))"
"(case-lambda"
"((given-kws_525 given-args_526 ns_527 name_528 0-phase_529)"
"(unpack80.1 given-kws_525 given-args_526 ns_527 name_528 0-phase_529)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(let-values(((namespace->module-namespace_530)"
"(case-lambda((ns_531 name_532 0-phase_533)(unpack80.1 null null ns_531 name_532 0-phase_533)))))"
" namespace->module-namespace_530)))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_534 mod-name_535 phase_536)"
"(let-values(((mi_537)"
"(let-values(((ns192_538) ns_534)((mod-name193_539) mod-name_535)((phase194_540) phase_536))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1 #f #f #f #f #f #f #f #f ns192_538 mod-name193_539 phase194_540)"
"(namespace->module-instance69.1 ns192_538 mod-name193_539 phase194_540)))))"
"(set-module-instance-attached?! mi_537 #t))))"
"(define-values"
"(namespace-module-instantiate!93.1)"
"(lambda(otherwise-available?84_541"
" otherwise-available?88_542"
" run-phase82_543"
" run-phase86_544"
" seen85_545"
" seen89_546"
" skip-run?83_547"
" skip-run?87_548"
" ns90_549"
" mpi91_550"
" instance-phase92_551)"
"(let-values(((ns_552) ns90_549))"
"(let-values(((mpi_553) mpi91_550))"
"(let-values(((instance-phase_554) instance-phase92_551))"
"(let-values(((run-phase_555)(if run-phase86_544 run-phase82_543(namespace-phase ns_552))))"
"(let-values(((skip-run?_556)(if skip-run?87_548 skip-run?83_547 #f)))"
"(let-values(((otherwise-available?_557)(if otherwise-available?88_542 otherwise-available?84_541 #t)))"
"(let-values(((seen_558)(if seen89_546 seen85_545 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_553)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_553)))"
"(values))))"
"(let-values(((name_559)(1/module-path-index-resolve mpi_553 #t)))"
"(let-values(((m_560)(namespace->module ns_552 name_559)))"
"(let-values((()"
"(begin"
"(if m_560"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_559)))"
"(values))))"
"(let-values(((instantiate!_561)"
"(lambda(instance-phase_562 run-phase_563 ns_564)"
"(let-values(((mi_565)"
"(let-values(((or-part_566)"
"(let-values(((ns201_567) ns_564)"
"((name202_568) name_559)"
"((instance-phase203_569)"
" instance-phase_562))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-instance69.1))"
"(namespace->module-instance67.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns201_567"
" name202_568"
" instance-phase203_569)"
"(namespace->module-instance69.1"
" ns201_567"
" name202_568"
" instance-phase203_569)))))"
"(if or-part_566"
" or-part_566"
"(namespace-create-module-instance!"
" ns_564"
" name_559"
" instance-phase_562"
" m_560"
" mpi_553)))))"
"(let-values(((...namespace/module.rkt:331:4_570)"
" run-module-instance!124.1)"
"((mi195_571) mi_565)"
"((ns196_572) ns_564)"
"((run-phase197_573) run-phase_563)"
"((skip-run?198_574) skip-run?_556)"
"((otherwise-available?199_575) otherwise-available?_557)"
"((seen200_576) seen_558))"
"(if(variable-reference-constant?"
"(#%variable-reference run-module-instance!124.1))"
"(run-module-instance!122.1"
" otherwise-available?199_575"
" run-phase197_573"
" seen200_576"
" #t"
" skip-run?198_574"
" mi195_571"
" ns196_572)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:331:4_570"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(list"
" otherwise-available?199_575"
" run-phase197_573"
" seen200_576"
" skip-run?198_574)"
" mi195_571"
" ns196_572)))))))"
"(if(module-cross-phase-persistent? m_560)"
"(let-values()"
"(instantiate!_561"
" 0"
" 0"
"(let-values(((or-part_577)(namespace-root-namespace ns_552)))"
"(if or-part_577 or-part_577 ns_552))))"
"(let-values()"
"(instantiate!_561 instance-phase_554 run-phase_555 ns_552))))))))))))))))))"
"(define-values"
"(unpack94.1)"
"(lambda(given-kws_578 given-args_579 ns90_580 mpi91_581 instance-phase92_582)"
"(let-values(((otherwise-available?88_583)"
"(if(pair? given-kws_578)(eq? '#:otherwise-available?(car given-kws_578)) #f)))"
"(let-values(((otherwise-available?84_584)(if otherwise-available?88_583(car given-args_579)(void)))"
"((given-kws_585)(if otherwise-available?88_583(cdr given-kws_578) given-kws_578))"
"((given-args_586)(if otherwise-available?88_583(cdr given-args_579) given-args_579)))"
"(let-values(((run-phase86_587)(if(pair? given-kws_585)(eq? '#:run-phase(car given-kws_585)) #f)))"
"(let-values(((run-phase82_588)(if run-phase86_587(car given-args_586)(void)))"
"((given-kws_589)(if run-phase86_587(cdr given-kws_585) given-kws_585))"
"((given-args_590)(if run-phase86_587(cdr given-args_586) given-args_586)))"
"(let-values(((seen89_591)(if(pair? given-kws_589)(eq? '#:seen(car given-kws_589)) #f)))"
"(let-values(((seen85_592)(if seen89_591(car given-args_590)(void)))"
"((given-kws_593)(if seen89_591(cdr given-kws_589) given-kws_589))"
"((given-args_594)(if seen89_591(cdr given-args_590) given-args_590)))"
"(let-values(((skip-run?87_595)(pair? given-kws_593)))"
"(let-values(((skip-run?83_596)(if skip-run?87_595(car given-args_594)(void))))"
"(namespace-module-instantiate!93.1"
" otherwise-available?84_584"
" otherwise-available?88_583"
" run-phase82_588"
" run-phase86_587"
" seen85_592"
" seen89_591"
" skip-run?83_596"
" skip-run?87_595"
" ns90_580"
" mpi91_581"
" instance-phase92_582)))))))))))"
"(define-values"
"(namespace-module-instantiate!95.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_597 given-argc_598)"
"(if(= given-argc_598 5)"
"(let-values(((l1_599) given-kws_597))"
"(let-values(((l1_600)"
"(if(null? l1_599) l1_599(if(eq?(car l1_599) '#:otherwise-available?)(cdr l1_599) l1_599))))"
"(let-values(((l1_601) l1_600))"
"(let-values(((l1_602)"
"(if(null? l1_601) l1_601(if(eq?(car l1_601) '#:run-phase)(cdr l1_601) l1_601))))"
"(let-values(((l1_603) l1_602))"
"(let-values(((l1_604)(if(null? l1_603) l1_603(if(eq?(car l1_603) '#:seen)(cdr l1_603) l1_603))))"
"(let-values(((l1_605) l1_604))"
"(let-values(((l1_606)"
"(if(null? l1_605) l1_605(if(eq?(car l1_605) '#:skip-run?)(cdr l1_605) l1_605))))"
"(null? l1_606)))))))))"
" #f))"
"(case-lambda"
"((given-kws_607 given-args_608 ns_609 mpi_610 instance-phase_611)"
"(unpack94.1 given-kws_607 given-args_608 ns_609 mpi_610 instance-phase_611)))"
" null"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(let-values(((namespace-module-instantiate!_612)"
"(case-lambda"
"((ns_613 mpi_614 instance-phase_615)(unpack94.1 null null ns_613 mpi_614 instance-phase_615)))))"
" namespace-module-instantiate!_612)))"
"(define-values"
"(namespace-module-visit!101.1)"
"(lambda(visit-phase96_616 visit-phase97_617 ns98_618 mpi99_619 instance-phase100_620)"
"(let-values(((ns_621) ns98_618))"
"(let-values(((mpi_622) mpi99_619))"
"(let-values(((instance-phase_623) instance-phase100_620))"
"(let-values(((visit-phase_624)(if visit-phase97_617 visit-phase96_616(namespace-phase ns_621))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:344:2_625) namespace-module-instantiate!95.1)"
"((ns204_626) ns_621)"
"((mpi205_627) mpi_622)"
"((instance-phase206_628) instance-phase_623)"
"((temp207_629)(add1 visit-phase_624)))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" temp207_629"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns204_626"
" mpi205_627"
" instance-phase206_628)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:344:2_625"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list temp207_629)"
" ns204_626"
" mpi205_627"
" instance-phase206_628))))))))))"
"(define-values"
"(unpack102.1)"
"(lambda(given-kws_630 given-args_631 ns98_632 mpi99_633 instance-phase100_634)"
"(let-values(((visit-phase97_635)(pair? given-kws_630)))"
"(let-values(((visit-phase96_636)(if visit-phase97_635(car given-args_631)(void))))"
"(namespace-module-visit!101.1 visit-phase96_636 visit-phase97_635 ns98_632 mpi99_633 instance-phase100_634)))))"
"(define-values"
"(namespace-module-visit!103.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_637 given-argc_638)"
"(if(= given-argc_638 5)"
"(let-values(((l1_639) given-kws_637))"
"(let-values(((l1_640)(if(null? l1_639) l1_639(if(eq?(car l1_639) '#:visit-phase)(cdr l1_639) l1_639))))"
"(null? l1_640)))"
" #f))"
"(case-lambda"
"((given-kws_641 given-args_642 ns_643 mpi_644 instance-phase_645)"
"(unpack102.1 given-kws_641 given-args_642 ns_643 mpi_644 instance-phase_645)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-visit!_646)"
"(case-lambda"
"((ns_647 mpi_648 instance-phase_649)(unpack102.1 null null ns_647 mpi_648 instance-phase_649)))))"
" namespace-module-visit!_646)))"
"(define-values"
"(namespace-module-make-available!109.1)"
"(lambda(visit-phase104_650 visit-phase105_651 ns106_652 mpi107_653 instance-phase108_654)"
"(let-values(((ns_655) ns106_652))"
"(let-values(((mpi_656) mpi107_653))"
"(let-values(((instance-phase_657) instance-phase108_654))"
"(let-values(((visit-phase_658)(if visit-phase105_651 visit-phase104_650(namespace-phase ns_655))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:347:2_659) namespace-module-instantiate!95.1)"
"((ns208_660) ns_655)"
"((mpi209_661) mpi_656)"
"((instance-phase210_662) instance-phase_657)"
"((temp211_663)(add1 visit-phase_658))"
"((temp212_664) #t))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" temp211_663"
" #t"
" #f"
" #f"
" temp212_664"
" #t"
" ns208_660"
" mpi209_661"
" instance-phase210_662)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:347:2_659"
" keyword-procedure-extract"
" '(#:run-phase #:skip-run?)"
" 5)"
" '(#:run-phase #:skip-run?)"
"(list temp211_663 temp212_664)"
" ns208_660"
" mpi209_661"
" instance-phase210_662))))))))))"
"(define-values"
"(unpack110.1)"
"(lambda(given-kws_665 given-args_666 ns106_667 mpi107_668 instance-phase108_669)"
"(let-values(((visit-phase105_670)(pair? given-kws_665)))"
"(let-values(((visit-phase104_671)(if visit-phase105_670(car given-args_666)(void))))"
"(namespace-module-make-available!109.1"
" visit-phase104_671"
" visit-phase105_670"
" ns106_667"
" mpi107_668"
" instance-phase108_669)))))"
"(define-values"
"(namespace-module-make-available!111.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_672 given-argc_673)"
"(if(= given-argc_673 5)"
"(let-values(((l1_674) given-kws_672))"
"(let-values(((l1_675)(if(null? l1_674) l1_674(if(eq?(car l1_674) '#:visit-phase)(cdr l1_674) l1_674))))"
"(null? l1_675)))"
" #f))"
"(case-lambda"
"((given-kws_676 given-args_677 ns_678 mpi_679 instance-phase_680)"
"(unpack110.1 given-kws_676 given-args_677 ns_678 mpi_679 instance-phase_680)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-make-available!_681)"
"(case-lambda"
"((ns_682 mpi_683 instance-phase_684)(unpack110.1 null null ns_682 mpi_683 instance-phase_684)))))"
" namespace-module-make-available!_681)))"
"(define-values"
"(lifted/3.1$4)"
"(make-required"
" 'run-module-instance!"
"(case-lambda((self_685 mi_686 ns_687)(apply missing-kw self_685 mi_686 ns_687 null)))"
" #f"
" #f))"
"(define-values"
"(run-module-instance!122.1)"
"(lambda(otherwise-available?114_688 run-phase112_689 seen115_690 seen119_691 skip-run?113_692 mi120_693 ns121_694)"
"(let-values(((mi_695) mi120_693))"
"(let-values(((ns_696) ns121_694))"
"(let-values(((run-phase_697) run-phase112_689))"
"(let-values(((skip-run?_698) skip-run?113_692))"
"(let-values(((otherwise-available?_699) otherwise-available?114_688))"
"(let-values(((seen_700)(if seen119_691 seen115_690 '#hasheq())))"
"(let-values()"
"(let-values(((m-ns_701)(module-instance-namespace mi_695)))"
"(let-values(((instance-phase_702)(namespace-0-phase m-ns_701)))"
"(let-values(((run-phase-level_703)(phase- run-phase_697 instance-phase_702)))"
"(if(if(let-values(((or-part_704) skip-run?_698))"
"(if or-part_704"
" or-part_704"
"(eq?"
" 'started"
"(hash-ref(module-instance-phase-level-to-state mi_695) run-phase-level_703 #f))))"
"(let-values(((or-part_705)(not otherwise-available?_699)))"
"(if or-part_705 or-part_705(module-instance-made-available? mi_695)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_706)(module-instance-module mi_695)))"
"(let-values(((mpi_707)(namespace-mpi m-ns_701)))"
"(let-values(((phase-shift_708) instance-phase_702))"
"(let-values(((bulk-binding-registry_709)(namespace-bulk-binding-registry m-ns_701)))"
"(begin"
"(if(hash-ref seen_700 mi_695 #f)"
"(let-values()"
"                                          (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_695)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_695"
"(alt-reverse"
"(let-values(((lst_710)(module-requires m_706)))"
"(begin"
"(if(list? lst_710)(void)(let-values()(in-list lst_710)))"
"((letrec-values(((for-loop_711)"
"(lambda(fold-var_712 lst_713)"
"(if(pair? lst_713)"
"(let-values(((phase+mpis_714)"
"(unsafe-car lst_713)))"
"(if #t"
"(let-values(((fold-var_715)"
"(let-values(((fold-var_716)"
" fold-var_712))"
"(let-values(((fold-var_717)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_714)"
"(alt-reverse"
"(let-values(((lst_718)"
"(cdr"
" phase+mpis_714)))"
"(begin"
"(if(list?"
" lst_718)"
"(void)"
"(let-values()"
"(in-list"
" lst_718)))"
"((letrec-values(((for-loop_719)"
"(lambda(fold-var_720"
" lst_721)"
"(if(pair?"
" lst_721)"
"(let-values(((req-mpi_722)"
"(unsafe-car"
" lst_721)))"
"(if #t"
"(let-values(((fold-var_723)"
"(let-values(((fold-var_724)"
" fold-var_720))"
"(let-values(((fold-var_725)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
"(module-path-index-shift"
" req-mpi_722"
"(module-self"
" m_706)"
" mpi_707)))"
" fold-var_724))))"
"(values"
" fold-var_725)))))"
"(if #t"
"(for-loop_719"
" fold-var_723"
"(unsafe-cdr"
" lst_721))"
" fold-var_723))"
" fold-var_720))"
" fold-var_720))))"
" for-loop_719)"
" null"
" lst_718))))))"
" fold-var_716))))"
"(values fold-var_717)))))"
"(if #t"
"(for-loop_711"
" fold-var_715"
"(unsafe-cdr lst_713))"
" fold-var_715))"
" fold-var_712))"
" fold-var_712))))"
" for-loop_711)"
" null"
" lst_710)))))))"
"(let-values(((lst_726)(module-instance-shifted-requires mi_695)))"
"(begin"
"(if(list? lst_726)(void)(let-values()(in-list lst_726)))"
"((letrec-values(((for-loop_727)"
"(lambda(fold-var_728 lst_729)"
"(if(pair? lst_729)"
"(let-values(((phase+mpis_730)(unsafe-car lst_729)))"
"(if #t"
"(let-values(((fold-var_731)"
"(let-values(((fold-var_732)"
" fold-var_728))"
"(let-values(((fold-var_733)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_734)"
"(car"
" phase+mpis_730)))"
"(let-values(((lst_735)"
"(cdr"
" phase+mpis_730)))"
"(begin"
"(if(list?"
" lst_735)"
"(void)"
"(let-values()"
"(in-list"
" lst_735)))"
"((letrec-values(((for-loop_736)"
"(lambda(fold-var_737"
" lst_738)"
"(if(pair?"
" lst_738)"
"(let-values(((req-mpi_739)"
"(unsafe-car"
" lst_738)))"
"(if #t"
"(let-values(((fold-var_740)"
"(let-values(((fold-var_741)"
" fold-var_737))"
"(let-values(((fold-var_742)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:397:8_743)"
" namespace-module-instantiate!95.1)"
"((ns213_744)"
" ns_696)"
"((req-mpi214_745)"
" req-mpi_739)"
"((temp215_746)"
"(phase+"
" instance-phase_702"
" req-phase_734))"
"((run-phase216_747)"
" run-phase_697)"
"((skip-run?217_748)"
" skip-run?_698)"
"((otherwise-available?218_749)"
" otherwise-available?_699)"
"((temp219_750)"
"(hash-set"
" seen_700"
" mpi_707"
" #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" otherwise-available?218_749"
" #t"
" run-phase216_747"
" #t"
" temp219_750"
" #t"
" skip-run?217_748"
" #t"
" ns213_744"
" req-mpi214_745"
" temp215_746)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:397:8_743"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
" 5)"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
"(list"
" otherwise-available?218_749"
" run-phase216_747"
" temp219_750"
" skip-run?217_748)"
" ns213_744"
" req-mpi214_745"
" temp215_746))))"
"(void)))))"
"(values"
" fold-var_742)))))"
"(if #t"
"(for-loop_736"
" fold-var_740"
"(unsafe-cdr"
" lst_738))"
" fold-var_740))"
" fold-var_737))"
" fold-var_737))))"
" for-loop_736)"
"(void)"
" lst_735)))))"
"(void)))))"
"(values fold-var_733)))))"
"(if #t"
"(for-loop_727 fold-var_731(unsafe-cdr lst_729))"
" fold-var_731))"
" fold-var_728))"
" fold-var_728))))"
" for-loop_727)"
"(void)"
" lst_726)))"
"(if(label-phase? instance-phase_702)"
"(void)"
"(let-values()"
"(let-values(((start_751)(module-max-phase-level m_706))"
"((end_752)(sub1(module-min-phase-level m_706)))"
"((inc_753) -1))"
"(begin"
"(if(if(real? start_751)(if(real? end_752)(real? inc_753) #f) #f)"
"(void)"
"(let-values()(in-range start_751 end_752 inc_753)))"
"((letrec-values(((for-loop_754)"
"(lambda(fold-var_755 pos_756)"
"(if(> pos_756 end_752)"
"(let-values(((phase-level_757) pos_756))"
"(if #t"
"(let-values(((fold-var_758)"
"(let-values(((fold-var_759)"
" fold-var_755))"
"(let-values(((fold-var_760)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_761)"
"(phase+"
" phase-level_757"
" phase-shift_708)))"
"(if(if(not"
" skip-run?_698)"
"(eqv?"
" phase_761"
" run-phase_697)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_695)"
" phase-level_757"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_695)"
" phase-level_757"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_701"
" phase-level_757))"
"(values))))"
"(let-values(((p-ns_762)"
"(namespace->namespace-at-phase"
" m-ns_701"
" phase_761)))"
"(let-values(((insp_763)"
"(module-inspector"
" m_706)))"
"(let-values(((data-box_764)"
"(module-instance-data-box"
" mi_695)))"
"(let-values(((prep_765)"
"(module-prepare-instance"
" m_706)))"
"(let-values(((go_766)"
"(module-instantiate-phase"
" m_706)))"
"(begin"
"(prep_765"
" data-box_764"
" p-ns_762"
" phase-shift_708"
" mpi_707"
" bulk-binding-registry_709"
" insp_763)"
"(go_766"
" data-box_764"
" p-ns_762"
" phase-shift_708"
" phase-level_757"
" mpi_707"
" bulk-binding-registry_709"
" insp_763))))))))))))"
"(if(if otherwise-available?_699"
"(if(not"
"(negative?"
" run-phase_697))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_695)"
" phase-level_757"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_696)"
" phase_761"
"(lambda(l_769)"
"(cons"
" mi_695"
" l_769))"
" null)"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_695)"
" phase-level_757"
" 'available)"
"(values))))"
"(let-values(((insp_767)"
"(module-inspector"
" m_706)))"
"(let-values(((prep_768)"
"(module-prepare-instance"
" m_706)))"
"(prep_768"
"(module-instance-data-box"
" mi_695)"
" m-ns_701"
" phase-shift_708"
" mpi_707"
" bulk-binding-registry_709"
" insp_767))))))"
"(void)))))"
"(void)))))"
"(values fold-var_760)))))"
"(if #t"
"(for-loop_754"
" fold-var_758"
"(+ pos_756 inc_753))"
" fold-var_758))"
" fold-var_755))"
" fold-var_755))))"
" for-loop_754)"
"(void)"
" start_751)))))"
"(if otherwise-available?_699"
"(let-values()(set-module-instance-made-available?! mi_695 #t))"
"(void))"
"(if skip-run?_698"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_695)"
" run-phase-level_703"
" 'started))))))))))))))))))))))"
"(define-values"
"(unpack123.1)"
"(lambda(given-kws_770 given-args_771 mi120_772 ns121_773)"
"(let-values(((otherwise-available?114_774)(car given-args_771))"
"((given-kws_775)(cdr given-kws_770))"
"((given-args_776)(cdr given-args_771)))"
"(let-values(((run-phase112_777)(car given-args_776))"
"((given-kws_778)(cdr given-kws_775))"
"((given-args_779)(cdr given-args_776)))"
"(let-values(((seen119_780)(if(pair? given-kws_778)(eq? '#:seen(car given-kws_778)) #f)))"
"(let-values(((seen115_781)(if seen119_780(car given-args_779)(void)))"
"((given-kws_782)(if seen119_780(cdr given-kws_778) given-kws_778))"
"((given-args_783)(if seen119_780(cdr given-args_779) given-args_779)))"
"(let-values(((skip-run?113_784)(car given-args_783)))"
"(run-module-instance!122.1"
" otherwise-available?114_774"
" run-phase112_777"
" seen115_781"
" seen119_780"
" skip-run?113_784"
" mi120_772"
" ns121_773))))))))"
"(define-values"
"(run-module-instance!124.1)"
"(lifted/3.1$4"
"(lambda(given-kws_785 given-argc_786)"
"(if(= given-argc_786 4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_785"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" #f))"
"(case-lambda((given-kws_787 given-args_788 mi_789 ns_790)(unpack123.1 given-kws_787 given-args_788 mi_789 ns_790)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!128_791)"
"(lambda(ns127_792 run-phase125_793 run-phase126_794)"
"(let-values(((ns_795) ns127_792))"
"(let-values(((run-phase_796)(if run-phase126_794 run-phase125_793(namespace-phase ns_795))))"
"(let-values()(namespace-run-available-modules! ns_795(add1 run-phase_796))))))))"
"(case-lambda"
"((ns_797)(namespace-visit-available-modules!128_791 ns_797 #f #f))"
"((ns_798 run-phase125_799)(namespace-visit-available-modules!128_791 ns_798 run-phase125_799 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!133_800)"
"(lambda(ns132_801 run-phase130_802 run-phase131_803)"
"(let-values(((ns_804) ns132_801))"
"(let-values(((run-phase_805)(if run-phase131_803 run-phase130_802(namespace-phase ns_804))))"
"(let-values()"
"(registry-call-with-lock"
"(namespace-module-registry$1 ns_804)"
"(lambda()"
"((letrec-values(((loop_806)"
"(lambda()"
"(let-values(((mis_807)"
"(hash-ref"
"(namespace-available-module-instances ns_804)"
" run-phase_805"
" null)))"
"(if(null? mis_807)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_804)"
" run-phase_805"
" null)"
"(let-values(((lst_808)(alt-reverse mis_807)))"
"(begin"
"(if(list? lst_808)(void)(let-values()(in-list lst_808)))"
"((letrec-values(((for-loop_809)"
"(lambda(fold-var_810 lst_811)"
"(if(pair? lst_811)"
"(let-values(((mi_812)"
"(unsafe-car lst_811)))"
"(if #t"
"(let-values(((fold-var_813)"
"(let-values(((fold-var_814)"
" fold-var_810))"
"(let-values(((fold-var_815)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:454:11_816)"
" run-module-instance!124.1)"
"((mi220_817)"
" mi_812)"
"((ns221_818)"
" ns_804)"
"((run-phase222_819)"
" run-phase_805)"
"((temp223_820)"
" #f)"
"((temp224_821)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" run-module-instance!124.1))"
"(run-module-instance!122.1"
" temp224_821"
" run-phase222_819"
" #f"
" #f"
" temp223_820"
" mi220_817"
" ns221_818)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:454:11_816"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
" 4)"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
"(list"
" temp224_821"
" run-phase222_819"
" temp223_820)"
" mi220_817"
" ns221_818))))"
"(void)))))"
"(values"
" fold-var_815)))))"
"(if #t"
"(for-loop_809"
" fold-var_813"
"(unsafe-cdr lst_811))"
" fold-var_813))"
" fold-var_810))"
" fold-var_810))))"
" for-loop_809)"
"(void)"
" lst_808)))"
"(loop_806))))))))"
" loop_806))))))))))"
"(case-lambda"
"((ns_822)(namespace-run-available-modules!133_800 ns_822 #f #f))"
"((ns_823 run-phase130_824)(namespace-run-available-modules!133_800 ns_823 run-phase130_824 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_825 name_826)"
"(let-values(((mi_827)(hash-ref(namespace-module-instances ns_825)(1/make-resolved-module-path name_826))))"
"(let-values(((...namespace/module.rkt:460:2_828) run-module-instance!124.1)"
"((mi225_829) mi_827)"
"((ns226_830) ns_825)"
"((temp227_831) 1)"
"((temp228_832) #f)"
"((temp229_833) #t))"
"(if(variable-reference-constant?(#%variable-reference run-module-instance!124.1))"
"(run-module-instance!122.1 temp229_833 temp227_831 #f #f temp228_832 mi225_829 ns226_830)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:460:2_828"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
"(list temp229_833 temp227_831 temp228_832)"
" mi225_829"
" ns226_830))))))"
"(define-values"
"(lifted/4.1$3)"
"(make-required"
" 'namespace-module-use->module+linklet-instances"
"(case-lambda((self_834 ns_835 mu_836)(apply missing-kw self_834 ns_835 mu_836 null)))"
" #f"
" #f))"
"(define-values"
"(namespace-module-use->module+linklet-instances143.1)"
"(lambda(phase-shift137_837 shift-from135_838 shift-from138_839 shift-to136_840 shift-to139_841 ns141_842 mu142_843)"
"(let-values(((ns_844) ns141_842))"
"(let-values(((mu_845) mu142_843))"
"(let-values(((shift-from_846)(if shift-from138_839 shift-from135_838 #f)))"
"(let-values(((shift-to_847)(if shift-to139_841 shift-to136_840 #f)))"
"(let-values(((phase-shift_848) phase-shift137_837))"
"(let-values()"
"(let-values(((mod_849)(module-use-module mu_845)))"
"(let-values(((mi_850)"
"(let-values(((...namespace/module.rkt:470:4_853) namespace->module-instance69.1)"
"((ns230_854) ns_844)"
"((temp231_855)"
"(1/module-path-index-resolve"
"(if shift-from_846"
"(module-path-index-shift mod_849 shift-from_846 shift-to_847)"
" mod_849)))"
"((phase-shift232_856) phase-shift_848)"
"((temp233_857) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1"
" #f"
" #f"
" temp233_857"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns230_854"
" temp231_855"
" phase-shift232_856)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:470:4_853"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp233_857)"
" ns230_854"
" temp231_855"
" phase-shift232_856)))))"
"(let-values(((m-ns_851)(module-instance-namespace mi_850)))"
"(let-values(((d_852)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_851)"
"(module-use-phase mu_845)"
" #f)))"
"(if d_852"
"(values mi_850(definitions-variables d_852))"
"                          (error \"namespace mismatch: phase level not found\"))))))))))))))"
"(define-values"
"(unpack144.1)"
"(lambda(given-kws_858 given-args_859 ns141_860 mu142_861)"
"(let-values(((phase-shift137_862)(car given-args_859))"
"((given-kws_863)(cdr given-kws_858))"
"((given-args_864)(cdr given-args_859)))"
"(let-values(((shift-from138_865)(if(pair? given-kws_863)(eq? '#:shift-from(car given-kws_863)) #f)))"
"(let-values(((shift-from135_866)(if shift-from138_865(car given-args_864)(void)))"
"((given-kws_867)(if shift-from138_865(cdr given-kws_863) given-kws_863))"
"((given-args_868)(if shift-from138_865(cdr given-args_864) given-args_864)))"
"(let-values(((shift-to139_869)(pair? given-kws_867)))"
"(let-values(((shift-to136_870)(if shift-to139_869(car given-args_868)(void))))"
"(namespace-module-use->module+linklet-instances143.1"
" phase-shift137_862"
" shift-from135_866"
" shift-from138_865"
" shift-to136_870"
" shift-to139_869"
" ns141_860"
" mu142_861))))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances145.1)"
"(lifted/4.1$3"
"(lambda(given-kws_871 given-argc_872)"
"(if(= given-argc_872 4)(subsets? '(#:phase-shift) given-kws_871 '(#:phase-shift #:shift-from #:shift-to)) #f))"
"(case-lambda((given-kws_873 given-args_874 ns_875 mu_876)(unpack144.1 given-kws_873 given-args_874 ns_875 mu_876)))"
" '(#:phase-shift)"
" '(#:phase-shift #:shift-from #:shift-to)))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_877)"
"(let-values(((access_878)"
"(let-values(((ht_879)(module-provides m_877)))"
"(begin"
"(if((lambda(ht_880)(hash? ht_880)) ht_879)(void)(let-values()(default-in-hash ht_879)))"
"((letrec-values(((for-loop_881)"
"(lambda(table_882 i_883)"
"(if i_883"
"(let-values(((phase_884 at-phase_885)"
"(hash-iterate-key+value ht_879 i_883)))"
"(if #t"
"(let-values(((table_886)"
"(let-values(((table_887) table_882))"
"(let-values(((table_888)"
"(let-values()"
"(let-values(((key_889 val_890)"
"(let-values()"
"(values"
" phase_884"
"(let-values(((ht_891)"
" at-phase_885))"
"(begin"
"(if((lambda(ht_892)"
"(hash?"
" ht_892))"
" ht_891)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_891)))"
"((letrec-values(((for-loop_893)"
"(lambda(table_894"
" i_895)"
"(if i_895"
"(let-values(((sym_896"
" binding/p_897)"
"(hash-iterate-key+value"
" ht_891"
" i_895)))"
"(if #t"
"(let-values(((table_898)"
"(let-values(((table_899)"
" table_894))"
"(let-values(((table_900)"
"(let-values()"
"(let-values(((key_901"
" val_902)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_897))"
"(if(provided-as-protected?"
" binding/p_897)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_899"
" key_901"
" val_902)))))"
"(values"
" table_900)))))"
"(if #t"
"(for-loop_893"
" table_898"
"(hash-iterate-next"
" ht_891"
" i_895))"
" table_898))"
" table_894))"
" table_894))))"
" for-loop_893)"
" '#hash()"
"(hash-iterate-first"
" ht_891))))))))"
"(hash-set"
" table_887"
" key_889"
" val_890)))))"
"(values table_888)))))"
"(if #t"
"(for-loop_881 table_886(hash-iterate-next ht_879 i_883))"
" table_886))"
" table_882))"
" table_882))))"
" for-loop_881)"
" '#hasheqv()"
"(hash-iterate-first ht_879))))))"
"(begin(set-module-access! m_877 access_878) access_878))))"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((...inding-to-module.rkt:14:4_7) namespace->module-instance69.1)"
"((ns1_8) ns_2)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                                       \"module mismatch;\\n\""
"                                       \" attempted to use a module that is not available\\n\""
"                                       \"  possible cause:\\n\""
"                                       \"   using (dynamic-require .... #f)\\n\""
"                                       \"   but need (dynamic-require .... 0)\\n\""
"                                       \"  module: ~s\\n\""
"                                       \"  phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance69.1))"
"(namespace->module-instance67.1 temp4_11 #t #f #f #f #f temp5_12 #t ns1_8 temp2_9 at-phase3_10)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...inding-to-module.rkt:14:4_7"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:unavailable-callback)"
"(list temp4_11 temp5_12)"
" ns1_8"
" temp2_9"
" at-phase3_10)))))"
"(begin"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_4))"
"(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((...r/expand/protect.rkt:53:14_23) resolve+shift15.1)"
"((id1_24) id_20)"
"((phase2_25) phase_17)"
"((temp3_26) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f temp3_26 #t #f #f id1_24 phase2_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:53:14_23"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_26)"
" id1_24"
" phase2_25)))))"
"(let-values(((c47745_27)(binding-free=id b_22)))"
"(if c47745_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
"                                                       (check-access b_22 mi_30 id_20 in-s_21 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_28"
"(let-values(((or-part_31) in-s_21))"
"(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((...r/expand/protect.rkt:66:13_32) module-binding-update46.1)"
"((next-b4_33) next-b_29)"
"((temp5_34)(syntax-inspector id_20)))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" temp5_34"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b4_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:66:13_32"
" keyword-procedure-extract"
" '(#:extra-inspector)"
" 3)"
" '(#:extra-inspector)"
"(list temp5_34)"
" next-b4_33))))"
"(let-values() next-b_29)))))"
" c47745_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" #f)))"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_8) (error \"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_36)"
"(begin"
"(if(if(procedure? proc_36)(procedure-arity-includes? proc_36 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_36)))"
"(set!-transformer1_11 proc_36))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_37)"
"(let-values(((v_38)((set!-transformer-value t_37) t_37)))"
"(if(procedure-arity-includes? v_38 1) v_38(lambda(s_39)(v_38 t_37 s_39))))))"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_2 key_3 val_4)(hash-set env_2 key_3 val_4)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_5)(let-values(((or-part_6)(eq? t_5 variable)))(if or-part_6 or-part_6(local-variable? t_5)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_7 make-_8 ?_9 -ref_10 -set!_11)"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable)))"
"(values struct:_7 make-_8 ?_9(make-struct-field-accessor -ref_10 0 'id))))"
"(define-values"
"(lifted/1.1$21)"
"(make-required"
" 'substitute-variable"
"(case-lambda((self_28 id_29 t_30)(apply missing-kw self_28 id_29 t_30 null)))"
" #f"
" #f))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_31 id4_32 t5_33)"
"(let-values(((id_34) id4_32))"
"(let-values(((t_35) t5_33))"
"(let-values(((no-stops?_36) no-stops?2_31))"
"(let-values()"
"(if(if no-stops?_36(local-variable? t_35) #f)"
"(let-values(((bind-id_37)(local-variable-id t_35)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_37)(syntax-e$1 bind-id_37) id_34 id_34)"
" id_34))"
" id_34)))))))"
"(define-values"
"(unpack7.1$4)"
"(lambda(given-kws_38 given-args_39 id4_40 t5_41)"
"(let-values(((no-stops?2_42)(car given-args_39)))(substitute-variable6.1 no-stops?2_42 id4_40 t5_41))))"
"(define-values"
"(substitute-variable8.1)"
"(lifted/1.1$21"
"(lambda(given-kws_43 given-argc_44)"
"(if(= given-argc_44 4)"
"(let-values(((l2_45) given-kws_43))"
"(if(pair? l2_45)(if(eq?(car l2_45) '#:no-stops?)(null?(cdr l2_45)) #f) #f))"
" #f))"
"(case-lambda((given-kws_46 given-args_47 id_48 t_49)(unpack7.1$4 given-kws_46 given-args_47 id_48 t_49)))"
" '(#:no-stops?)"
" '(#:no-stops?)))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_51)"
"(let-values(((or-part_52)(procedure? t_51)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(1/set!-transformer? t_51)))"
"(if or-part_53 or-part_53(1/rename-transformer? t_51)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_54)"
"(if(1/set!-transformer? t_54)"
"(let-values()(1/set!-transformer-procedure t_54))"
"(if(1/rename-transformer? t_54)(let-values()(lambda(s_55) s_55))(let-values() t_54)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_56 make-_57 ?_58 -ref_59 -set!_60)"
"(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form)))"
"(values"
" struct:_56"
" make-_57"
" ?_58"
"(make-struct-field-accessor -ref_59 0 'expander)"
"(make-struct-field-accessor -ref_59 1 'name))))"
"(define-values"
"(add-binding!15.1)"
"(lambda(in10_82 in11_83 id12_84 binding13_85 phase14_86)"
"(let-values(((id_87) id12_84))"
"(let-values(((binding_88) binding13_85))"
"(let-values(((phase_89) phase14_86))"
"(let-values(((in-s_90)(if in11_83 in10_82 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_87 in-s_90)"
"(add-binding-in-scopes!(syntax-scope-set id_87 phase_89)(syntax-e$1 id_87) binding_88)))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_91 given-args_92 id12_93 binding13_94 phase14_95)"
"(let-values(((in11_96)(pair? given-kws_91)))"
"(let-values(((in10_97)(if in11_96(car given-args_92)(void))))"
"(add-binding!15.1 in10_97 in11_96 id12_93 binding13_94 phase14_95)))))"
"(define-values"
"(add-binding!17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_98 given-argc_99)"
"(if(= given-argc_99 5)"
"(let-values(((l1_100) given-kws_98))"
"(let-values(((l1_101)(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:in)(cdr l1_100) l1_100))))"
"(null? l1_101)))"
" #f))"
"(case-lambda"
"((given-kws_102 given-args_103 id_104 binding_105 phase_106)"
"(unpack16.1$3 given-kws_102 given-args_103 id_104 binding_105 phase_106)))"
" null"
" '(#:in)"
"(let-values(((add-binding!_107)"
"(case-lambda((id_108 binding_109 phase_110)(unpack16.1$3 null null id_108 binding_109 phase_110)))))"
" add-binding!_107)))"
"(define-values"
"(add-bulk-binding!23.1)"
"(lambda(in18_111 in19_112 s20_113 binding21_114 phase22_115)"
"(let-values(((s_116) s20_113))"
"(let-values(((binding_117) binding21_114))"
"(let-values(((phase_118) phase22_115))"
"(let-values(((in-s_119)(if in19_112 in18_111 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_116)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_119 s_116))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_116 phase_118) binding_117)))))))))"
"(define-values"
"(unpack24.1)"
"(lambda(given-kws_120 given-args_121 s20_122 binding21_123 phase22_124)"
"(let-values(((in19_125)(pair? given-kws_120)))"
"(let-values(((in18_126)(if in19_125(car given-args_121)(void))))"
"(add-bulk-binding!23.1 in18_126 in19_125 s20_122 binding21_123 phase22_124)))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_127 given-argc_128)"
"(if(= given-argc_128 5)"
"(let-values(((l1_129) given-kws_127))"
"(let-values(((l1_130)(if(null? l1_129) l1_129(if(eq?(car l1_129) '#:in)(cdr l1_129) l1_129))))"
"(null? l1_130)))"
" #f))"
"(case-lambda"
"((given-kws_131 given-args_132 s_133 binding_134 phase_135)"
"(unpack24.1 given-kws_131 given-args_132 s_133 binding_134 phase_135)))"
" null"
" '(#:in)"
"(let-values(((add-bulk-binding!_136)"
"(case-lambda((s_137 binding_138 phase_139)(unpack24.1 null null s_137 binding_138 phase_139)))))"
" add-bulk-binding!_136)))"
"(define-values"
"(add-local-binding!33.1)"
"(lambda(frame-id26_140 frame-id28_141 in27_142 in29_143 id30_144 phase31_145 counter32_146)"
"(let-values(((id_147) id30_144))"
"(let-values(((phase_148) phase31_145))"
"(let-values(((counter_149) counter32_146))"
"(let-values(((frame-id_150)(if frame-id28_141 frame-id26_140 #f)))"
"(let-values(((in-s_151)(if in29_143 in27_142 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_147 in-s_151)(values))))"
"(let-values((()(begin(set-box! counter_149(add1(unbox counter_149)))(values))))"
"(let-values(((key_152)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_147) (unbox counter_149)))))"
"(begin"
"(add-binding-in-scopes!"
"(syntax-scope-set id_147 phase_148)"
"(syntax-e$1 id_147)"
"(let-values(((...ander/expand/env.rkt:97:68_153) make-local-binding9.1)"
"((key51_154) key_152)"
"((frame-id52_155) frame-id_150))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id52_155 #t #f #f key51_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/env.rkt:97:68_153"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list frame-id52_155)"
" key51_154))))"
" key_152))))))))))))"
"(define-values"
"(unpack34.1$2)"
"(lambda(given-kws_156 given-args_157 id30_158 phase31_159 counter32_160)"
"(let-values(((frame-id28_161)(if(pair? given-kws_156)(eq? '#:frame-id(car given-kws_156)) #f)))"
"(let-values(((frame-id26_162)(if frame-id28_161(car given-args_157)(void)))"
"((given-kws_163)(if frame-id28_161(cdr given-kws_156) given-kws_156))"
"((given-args_164)(if frame-id28_161(cdr given-args_157) given-args_157)))"
"(let-values(((in29_165)(pair? given-kws_163)))"
"(let-values(((in27_166)(if in29_165(car given-args_164)(void))))"
"(add-local-binding!33.1"
" frame-id26_162"
" frame-id28_161"
" in27_166"
" in29_165"
" id30_158"
" phase31_159"
" counter32_160)))))))"
"(define-values"
"(add-local-binding!35.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_167 given-argc_168)"
"(if(= given-argc_168 5)"
"(let-values(((l1_169) given-kws_167))"
"(let-values(((l1_170)(if(null? l1_169) l1_169(if(eq?(car l1_169) '#:frame-id)(cdr l1_169) l1_169))))"
"(let-values(((l1_171) l1_170))"
"(let-values(((l1_172)(if(null? l1_171) l1_171(if(eq?(car l1_171) '#:in)(cdr l1_171) l1_171))))"
"(null? l1_172)))))"
" #f))"
"(case-lambda"
"((given-kws_173 given-args_174 id_175 phase_176 counter_177)"
"(unpack34.1$2 given-kws_173 given-args_174 id_175 phase_176 counter_177)))"
" null"
" '(#:frame-id #:in)"
"(let-values(((add-local-binding!_178)"
"(case-lambda((id_179 phase_180 counter_181)(unpack34.1$2 null null id_179 phase_180 counter_181)))))"
" add-local-binding!_178)))"
"(define-values"
"(check-id-taint)"
"(lambda(id_182 in-s_183)"
"(if(syntax-tainted?$1 id_182)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_183 id_182))"
"(void))))"
"(define-values"
"(binding-lookup46.1)"
"(lambda(in36_184"
" in38_185"
" out-of-context-as-variable?37_186"
" out-of-context-as-variable?39_187"
" b40_188"
" env41_189"
" lift-envs42_190"
" ns43_191"
" phase44_192"
" id45_193)"
"(let-values(((b_194) b40_188))"
"(let-values(((env_195) env41_189))"
"(let-values(((lift-envs_196) lift-envs42_190))"
"(let-values(((ns_197) ns43_191))"
"(let-values(((phase_198) phase44_192))"
"(let-values(((id_199) id45_193))"
"(let-values(((in-s_200)(if in38_185 in36_184 #f)))"
"(let-values(((out-of-context-as-variable?_201)"
"(if out-of-context-as-variable?39_187 out-of-context-as-variable?37_186 #f)))"
"(let-values()"
"(if(module-binding? b_194)"
"(let-values()"
"(let-values(((top-level?_202)(top-level-module-path-index?(module-binding-module b_194))))"
"(let-values(((mi_203)"
"(if(not top-level?_202)"
"(binding->module-instance b_194 ns_197 phase_198 id_199)"
" #f)))"
"(let-values(((m-ns_204)"
"(if top-level?_202"
" ns_197"
"(if mi_203(module-instance-namespace mi_203) #f))))"
"(let-values((()(begin(check-taint id_199)(values))))"
"(let-values(((t_205)"
"(namespace-get-transformer"
" m-ns_204"
"(module-binding-phase b_194)"
"(module-binding-sym b_194)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_203"
"(let-values()"
"(check-access"
" b_194"
" mi_203"
" id_199"
" in-s_200"
"                                                         (if t_205 \"transformer\" \"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_206)"
"(if mi_203"
"(if(module-instance-module mi_203)"
"(module-inspector(module-instance-module mi_203))"
" #f)"
" #f)))"
"(values t_205 insp_206)))))))))"
"(if(local-binding? b_194)"
"(let-values()"
"(let-values(((t_207)(hash-ref env_195(local-binding-key b_194) missing)))"
"(if(eq? t_207 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_208)"
"(let-values(((lst_209) lift-envs_196))"
"(begin"
"(if(list? lst_209)(void)(let-values()(in-list lst_209)))"
"((letrec-values(((for-loop_210)"
"(lambda(result_211 lst_212)"
"(if(pair? lst_212)"
"(let-values(((lift-env_213)"
"(unsafe-car lst_212)))"
"(if #t"
"(let-values(((result_214)"
"(let-values(((result_215)"
" result_211))"
"(let-values(((result_216)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_213)"
"(local-binding-key"
" b_194)"
" #f)))))"
"(values result_216)))))"
"(if(if #t"
"(not"
"((lambda x_217 result_214)"
" lift-env_213))"
" #f)"
"(for-loop_210"
" result_214"
"(unsafe-cdr lst_212))"
" result_214))"
" result_211))"
" result_211))))"
" for-loop_210)"
" #f"
" lst_209)))))"
"(if or-part_208"
" or-part_208"
"(if out-of-context-as-variable?_201"
" variable"
"                                         (error \"identifier used out of context:\" id_199))))"
" #f))"
"(let-values()(begin(check-taint id_199)(values t_207 #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_194)))))))))))))))"
"(define-values"
"(unpack47.1$1)"
"(lambda(given-kws_218 given-args_219 b40_220 env41_221 lift-envs42_222 ns43_223 phase44_224 id45_225)"
"(let-values(((in38_226)(if(pair? given-kws_218)(eq? '#:in(car given-kws_218)) #f)))"
"(let-values(((in36_227)(if in38_226(car given-args_219)(void)))"
"((given-kws_228)(if in38_226(cdr given-kws_218) given-kws_218))"
"((given-args_229)(if in38_226(cdr given-args_219) given-args_219)))"
"(let-values(((out-of-context-as-variable?39_230)(pair? given-kws_228)))"
"(let-values(((out-of-context-as-variable?37_231)"
"(if out-of-context-as-variable?39_230(car given-args_229)(void))))"
"(binding-lookup46.1"
" in36_227"
" in38_226"
" out-of-context-as-variable?37_231"
" out-of-context-as-variable?39_230"
" b40_220"
" env41_221"
" lift-envs42_222"
" ns43_223"
" phase44_224"
" id45_225)))))))"
"(define-values"
"(binding-lookup48.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_232 given-argc_233)"
"(if(= given-argc_233 8)"
"(let-values(((l1_234) given-kws_232))"
"(let-values(((l1_235)(if(null? l1_234) l1_234(if(eq?(car l1_234) '#:in)(cdr l1_234) l1_234))))"
"(let-values(((l1_236) l1_235))"
"(let-values(((l1_237)"
"(if(null? l1_236)"
" l1_236"
"(if(eq?(car l1_236) '#:out-of-context-as-variable?)(cdr l1_236) l1_236))))"
"(null? l1_237)))))"
" #f))"
"(case-lambda"
"((given-kws_238 given-args_239 b_240 env_241 lift-envs_242 ns_243 phase_244 id_245)"
"(unpack47.1$1 given-kws_238 given-args_239 b_240 env_241 lift-envs_242 ns_243 phase_244 id_245)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((binding-lookup_246)"
"(case-lambda"
"((b_247 env_248 lift-envs_249 ns_250 phase_251 id_252)"
"(unpack47.1$1 null null b_247 env_248 lift-envs_249 ns_250 phase_251 id_252)))))"
" binding-lookup_246)))"
"(define-values"
"(check-taint)"
"(lambda(id_253)"
"(if(syntax-tainted?$1 id_253)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_253))"
"(void))))"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values(((lst_3) ids_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((ht_8)"
"(let-values(((ht_9) ht_5))"
"(let-values(((ht_10)"
"(let-values()"
"(hash-update"
" ht_9"
"(identifier-binding-symbol$1 id_7 phase_1)"
"(lambda(l_11)(cons id_7 l_11))"
" null))))"
"(values ht_10)))))"
"(if #t(for-loop_4 ht_8(unsafe-cdr lst_6)) ht_8))"
" ht_5))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_12 phase_13 given-id_14)"
"(if(zero?(hash-count fs_12))"
" #f"
"(let-values(((lst_15)(hash-ref fs_12(identifier-binding-symbol$1 given-id_14 phase_13) null)))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((id_19)(unsafe-car lst_18)))"
"(if #t"
"(let-values(((result_20)"
"(let-values(((result_21) result_17))"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_19"
" given-id_14"
" phase_13"
" phase_13)))))"
"(values result_22)))))"
"(if(if #t(not((lambda x_23 result_20) id_19)) #f)"
"(for-loop_16 result_20(unsafe-cdr lst_18))"
" result_20))"
" result_17))"
" result_17))))"
" for-loop_16)"
" #f"
" lst_15))))))"
"(define-values(free-id-set-empty?)(lambda(fs_24)(zero?(hash-count fs_24))))"
"(define-values"
"(struct:expand-context"
" expand-context1.1"
" expand-context?"
" expand-context-context"
" expand-context-phase"
" expand-context-namespace"
" expand-context-env"
" expand-context-post-expansion-scope-action"
" expand-context-scopes"
" expand-context-def-ctx-scopes"
" expand-context-reference-records"
" expand-context-only-immediate?"
" expand-context-just-once?"
" expand-context-module-begin-k"
" expand-context-need-eventually-defined"
" expand-context-allow-unbound?"
" expand-context-preserve-#%expression-and-do-not-add-#%top?"
" expand-context-stops"
" expand-context-current-introduction-scopes"
" expand-context-declared-submodule-names"
" expand-context-lifts"
" expand-context-lift-envs"
" expand-context-module-lifts"
" expand-context-require-lifts"
" expand-context-to-module-lifts"
" expand-context-requires+provides"
" expand-context-name"
" expand-context-observer)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context"
" 25"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24)"
" #f"
" 'expand-context)))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 0 'context)"
"(make-struct-field-accessor -ref_5 1 'phase)"
"(make-struct-field-accessor -ref_5 2 'namespace)"
"(make-struct-field-accessor -ref_5 3 'env)"
"(make-struct-field-accessor -ref_5 4 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_5 5 'scopes)"
"(make-struct-field-accessor -ref_5 6 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_5 7 'reference-records)"
"(make-struct-field-accessor -ref_5 8 'only-immediate?)"
"(make-struct-field-accessor -ref_5 9 'just-once?)"
"(make-struct-field-accessor -ref_5 10 'module-begin-k)"
"(make-struct-field-accessor -ref_5 11 'need-eventually-defined)"
"(make-struct-field-accessor -ref_5 12 'allow-unbound?)"
"(make-struct-field-accessor -ref_5 13 'preserve-#%expression-and-do-not-add-#%top?)"
"(make-struct-field-accessor -ref_5 14 'stops)"
"(make-struct-field-accessor -ref_5 15 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_5 16 'declared-submodule-names)"
"(make-struct-field-accessor -ref_5 17 'lifts)"
"(make-struct-field-accessor -ref_5 18 'lift-envs)"
"(make-struct-field-accessor -ref_5 19 'module-lifts)"
"(make-struct-field-accessor -ref_5 20 'require-lifts)"
"(make-struct-field-accessor -ref_5 21 'to-module-lifts)"
"(make-struct-field-accessor -ref_5 22 'requires+provides)"
"(make-struct-field-accessor -ref_5 23 'name)"
"(make-struct-field-accessor -ref_5 24 'observer))))"
"(define-values"
"(make-expand-context)"
"(lambda(ns_143)"
"(let-values(((root-ctx_144)(namespace-get-root-expand-ctx ns_143)))"
"(expand-context1.1"
"(root-expand-context-module-scopes root-ctx_144)"
"(root-expand-context-post-expansion-scope root-ctx_144)"
"(root-expand-context-top-level-bind-scope root-ctx_144)"
"(root-expand-context-all-scopes-stx root-ctx_144)"
"(root-expand-context-use-site-scopes root-ctx_144)"
"(root-expand-context-defined-syms root-ctx_144)"
"(root-expand-context-frame-id root-ctx_144)"
"(root-expand-context-counter root-ctx_144)"
"(root-expand-context-lift-key root-ctx_144)"
" 'top-level"
"(namespace-phase ns_143)"
" ns_143"
" empty-env"
" push-scope"
" null"
" #f"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe)))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_145 root-ctx_146)"
"(let-values(((the-struct_147) ctx_145))"
"(if(expand-context? the-struct_147)"
"(let-values(((module-scopes16_148)(root-expand-context-module-scopes root-ctx_146))"
"((post-expansion-scope17_149)(root-expand-context-post-expansion-scope root-ctx_146))"
"((top-level-bind-scope18_150)(root-expand-context-top-level-bind-scope root-ctx_146))"
"((all-scopes-stx19_151)(root-expand-context-all-scopes-stx root-ctx_146))"
"((use-site-scopes20_152)(root-expand-context-use-site-scopes root-ctx_146))"
"((defined-syms21_153)(root-expand-context-defined-syms root-ctx_146))"
"((frame-id22_154)(root-expand-context-frame-id root-ctx_146))"
"((counter23_155)(root-expand-context-counter root-ctx_146))"
"((lift-key24_156)(root-expand-context-lift-key root-ctx_146)))"
"(expand-context1.1"
" module-scopes16_148"
" post-expansion-scope17_149"
" top-level-bind-scope18_150"
" all-scopes-stx19_151"
" use-site-scopes20_152"
" defined-syms21_153"
" frame-id22_154"
" counter23_155"
" lift-key24_156"
"(expand-context-context the-struct_147)"
"(expand-context-phase the-struct_147)"
"(expand-context-namespace the-struct_147)"
"(expand-context-env the-struct_147)"
"(expand-context-post-expansion-scope-action the-struct_147)"
"(expand-context-scopes the-struct_147)"
"(expand-context-def-ctx-scopes the-struct_147)"
"(expand-context-reference-records the-struct_147)"
"(expand-context-only-immediate? the-struct_147)"
"(expand-context-just-once? the-struct_147)"
"(expand-context-module-begin-k the-struct_147)"
"(expand-context-need-eventually-defined the-struct_147)"
"(expand-context-allow-unbound? the-struct_147)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_147)"
"(expand-context-stops the-struct_147)"
"(expand-context-current-introduction-scopes the-struct_147)"
"(expand-context-declared-submodule-names the-struct_147)"
"(expand-context-lifts the-struct_147)"
"(expand-context-lift-envs the-struct_147)"
"(expand-context-module-lifts the-struct_147)"
"(expand-context-require-lifts the-struct_147)"
"(expand-context-to-module-lifts the-struct_147)"
"(expand-context-requires+provides the-struct_147)"
"(expand-context-name the-struct_147)"
"(expand-context-observer the-struct_147)))"
"        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_147)))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context6.1)"
"(lambda(fail-ok?2_157 fail-ok?3_158 who4_159 who5_160)"
"(let-values(((who_161)(if who5_160 who4_159 'unexpected)))"
"(let-values(((fail-ok?_162)(if fail-ok?3_158 fail-ok?2_157 #f)))"
"(let-values()"
"(let-values(((or-part_163)(force(current-expand-context))))"
"(if or-part_163"
" or-part_163"
"              (if fail-ok?_162 #f (raise-arguments-error who_161 \"not currently expanding\")))))))))"
"(define-values"
"(unpack7.1$3)"
"(lambda(given-kws_164 given-args_165 who4_166 who5_167)"
"(let-values(((fail-ok?3_168)(pair? given-kws_164)))"
"(let-values(((fail-ok?2_169)(if fail-ok?3_168(car given-args_165)(void))))"
"(get-current-expand-context6.1 fail-ok?2_169 fail-ok?3_168 who4_166 who5_167)))))"
"(define-values"
"(get-current-expand-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_170 given-argc_171)"
"(if(if(>= given-argc_171 2)(<= given-argc_171 3) #f)"
"(let-values(((l1_172) given-kws_170))"
"(let-values(((l1_173)(if(null? l1_172) l1_172(if(eq?(car l1_172) '#:fail-ok?)(cdr l1_172) l1_172))))"
"(null? l1_173)))"
" #f))"
"(case-lambda"
"((given-kws_174 given-args_175)(unpack7.1$3 given-kws_174 given-args_175 #f #f))"
"((given-kws_176 given-args_177 who4_178)(unpack7.1$3 given-kws_176 given-args_177 who4_178 #t)))"
" null"
" '(#:fail-ok?)"
"(let-values(((get-current-expand-context_179)"
"(case-lambda(()(unpack7.1$3 null null #f #f))((who4_180)(unpack7.1$3 null null who4_180 #t)))))"
" get-current-expand-context_179)))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_181)"
"(begin"
"(if(let-values(((or-part_182)(not v_181)))"
"(if or-part_182 or-part_182(if(procedure? v_181)(procedure-arity-includes? v_181 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_181)))"
" v_181))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_183)"
"(if(if(eq? 'expression(expand-context-context ctx_183))(not(expand-context-name ctx_183)) #f)"
"(let-values() ctx_183)"
"(let-values()"
"(let-values(((the-struct_184) ctx_183))"
"(if(expand-context? the-struct_184)"
"(let-values(((context25_185) 'expression)"
"((name26_186) #f)"
"((use-site-scopes27_187) #f)"
"((post-expansion-scope28_188) #f)"
"((frame-id29_189) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_184)"
" post-expansion-scope28_188"
"(root-expand-context-top-level-bind-scope the-struct_184)"
"(root-expand-context-all-scopes-stx the-struct_184)"
" use-site-scopes27_187"
"(root-expand-context-defined-syms the-struct_184)"
" frame-id29_189"
"(root-expand-context-counter the-struct_184)"
"(root-expand-context-lift-key the-struct_184)"
" context25_185"
"(expand-context-phase the-struct_184)"
"(expand-context-namespace the-struct_184)"
"(expand-context-env the-struct_184)"
"(expand-context-post-expansion-scope-action the-struct_184)"
"(expand-context-scopes the-struct_184)"
"(expand-context-def-ctx-scopes the-struct_184)"
"(expand-context-reference-records the-struct_184)"
"(expand-context-only-immediate? the-struct_184)"
"(expand-context-just-once? the-struct_184)"
"(expand-context-module-begin-k the-struct_184)"
"(expand-context-need-eventually-defined the-struct_184)"
"(expand-context-allow-unbound? the-struct_184)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_184)"
"(expand-context-stops the-struct_184)"
"(expand-context-current-introduction-scopes the-struct_184)"
"(expand-context-declared-submodule-names the-struct_184)"
"(expand-context-lifts the-struct_184)"
"(expand-context-lift-envs the-struct_184)"
"(expand-context-module-lifts the-struct_184)"
"(expand-context-require-lifts the-struct_184)"
"(expand-context-to-module-lifts the-struct_184)"
"(expand-context-requires+provides the-struct_184)"
" name26_186"
"(expand-context-observer the-struct_184)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_184)))))))"
"(define-values"
"(lifted/1.1$20)"
"(make-required 'as-tail-context(case-lambda((self_190 ctx_191)(apply missing-kw self_190 ctx_191 null))) #f #f))"
"(define-values"
"(as-tail-context12.1)"
"(lambda(wrt9_192 ctx11_193)"
"(let-values(((ctx_194) ctx11_193))"
"(let-values(((wrt-ctx_195) wrt9_192))"
"(let-values()"
"(if(expand-context-name wrt-ctx_195)"
"(let-values()"
"(let-values(((the-struct_196) ctx_194))"
"(if(expand-context? the-struct_196)"
"(let-values(((name30_197)(expand-context-name wrt-ctx_195)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_196)"
"(root-expand-context-post-expansion-scope the-struct_196)"
"(root-expand-context-top-level-bind-scope the-struct_196)"
"(root-expand-context-all-scopes-stx the-struct_196)"
"(root-expand-context-use-site-scopes the-struct_196)"
"(root-expand-context-defined-syms the-struct_196)"
"(root-expand-context-frame-id the-struct_196)"
"(root-expand-context-counter the-struct_196)"
"(root-expand-context-lift-key the-struct_196)"
"(expand-context-context the-struct_196)"
"(expand-context-phase the-struct_196)"
"(expand-context-namespace the-struct_196)"
"(expand-context-env the-struct_196)"
"(expand-context-post-expansion-scope-action the-struct_196)"
"(expand-context-scopes the-struct_196)"
"(expand-context-def-ctx-scopes the-struct_196)"
"(expand-context-reference-records the-struct_196)"
"(expand-context-only-immediate? the-struct_196)"
"(expand-context-just-once? the-struct_196)"
"(expand-context-module-begin-k the-struct_196)"
"(expand-context-need-eventually-defined the-struct_196)"
"(expand-context-allow-unbound? the-struct_196)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_196)"
"(expand-context-stops the-struct_196)"
"(expand-context-current-introduction-scopes the-struct_196)"
"(expand-context-declared-submodule-names the-struct_196)"
"(expand-context-lifts the-struct_196)"
"(expand-context-lift-envs the-struct_196)"
"(expand-context-module-lifts the-struct_196)"
"(expand-context-require-lifts the-struct_196)"
"(expand-context-to-module-lifts the-struct_196)"
"(expand-context-requires+provides the-struct_196)"
" name30_197"
"(expand-context-observer the-struct_196)))"
"                  (raise-argument-error 'struct-copy \"expand-context?\" the-struct_196))))"
"(let-values() ctx_194)))))))"
"(define-values"
"(unpack13.1$1)"
"(lambda(given-kws_198 given-args_199 ctx11_200)"
"(let-values(((wrt9_201)(car given-args_199)))(as-tail-context12.1 wrt9_201 ctx11_200))))"
"(define-values"
"(as-tail-context14.1)"
"(lifted/1.1$20"
"(lambda(given-kws_202 given-argc_203)"
"(if(= given-argc_203 3)"
"(let-values(((l2_204) given-kws_202))"
"(if(pair? l2_204)(if(eq?(car l2_204) '#:wrt)(null?(cdr l2_204)) #f) #f))"
" #f))"
"(case-lambda((given-kws_205 given-args_206 ctx_207)(unpack13.1$1 given-kws_205 given-args_206 ctx_207)))"
" '(#:wrt)"
" '(#:wrt)))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_208 ids_209)"
"(if(if(pair? ids_209)(null?(cdr ids_209)) #f)"
"(let-values()"
"(let-values(((the-struct_210) ctx_208))"
"(if(expand-context? the-struct_210)"
"(let-values(((name31_211)(car ids_209)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_210)"
"(root-expand-context-post-expansion-scope the-struct_210)"
"(root-expand-context-top-level-bind-scope the-struct_210)"
"(root-expand-context-all-scopes-stx the-struct_210)"
"(root-expand-context-use-site-scopes the-struct_210)"
"(root-expand-context-defined-syms the-struct_210)"
"(root-expand-context-frame-id the-struct_210)"
"(root-expand-context-counter the-struct_210)"
"(root-expand-context-lift-key the-struct_210)"
"(expand-context-context the-struct_210)"
"(expand-context-phase the-struct_210)"
"(expand-context-namespace the-struct_210)"
"(expand-context-env the-struct_210)"
"(expand-context-post-expansion-scope-action the-struct_210)"
"(expand-context-scopes the-struct_210)"
"(expand-context-def-ctx-scopes the-struct_210)"
"(expand-context-reference-records the-struct_210)"
"(expand-context-only-immediate? the-struct_210)"
"(expand-context-just-once? the-struct_210)"
"(expand-context-module-begin-k the-struct_210)"
"(expand-context-need-eventually-defined the-struct_210)"
"(expand-context-allow-unbound? the-struct_210)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_210)"
"(expand-context-stops the-struct_210)"
"(expand-context-current-introduction-scopes the-struct_210)"
"(expand-context-declared-submodule-names the-struct_210)"
"(expand-context-lifts the-struct_210)"
"(expand-context-lift-envs the-struct_210)"
"(expand-context-module-lifts the-struct_210)"
"(expand-context-require-lifts the-struct_210)"
"(expand-context-to-module-lifts the-struct_210)"
"(expand-context-requires+provides the-struct_210)"
" name31_211"
"(expand-context-observer the-struct_210)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_210))))"
"(let-values() ctx_208))))"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_289)"
"(if(pair? s_289)"
"(let-values()(let-values(((r_290)(to-syntax-list.1(cdr s_289))))(if r_290(cons(car s_289) r_290) #f)))"
"(if(syntax?$1 s_289)"
"(let-values()(to-syntax-list.1(syntax-e$1 s_289)))"
"(if(list? s_289)(let-values() s_289)(let-values() #f))))))"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_1 proc_2)(begin(add-core-binding! sym_1)(set! core-forms(hash-set core-forms sym_1 proc_2)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_3 val_4)"
"(begin(add-core-binding! sym_3)(set! core-primitives(hash-set core-primitives sym_3 val_4)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_5)"
"(let-values(((temp1_6)(datum->syntax$1 core-stx sym_5))"
"((temp2_7)"
"(let-values(((core-mpi4_9) core-mpi)((temp5_10) 0)((sym6_11) sym_5))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_9"
" temp5_10"
" sym6_11)"
"(make-module-binding22.1 core-mpi4_9 temp5_10 sym6_11))))"
"((temp3_8) 0))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f temp1_6 temp2_7 temp3_8)"
"(add-binding!17.1 temp1_6 temp2_7 temp3_8)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_12)"
"(let-values(((ns7_13) ns_12)"
"((temp8_14)"
"(let-values(((...r/namespace/core.rkt:59:3_16) make-module36.1)"
"((temp10_17) #t)"
"((temp11_18) #t)"
"((temp12_19) #t)"
"((core-mpi13_20) core-mpi)"
"((temp14_21)"
"(hasheqv"
" 0"
"(let-values(((lst_23)(list core-primitives core-forms))((lst_24) '(#f #t)))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(table_26 lst_27 lst_28)"
"(if(if(pair? lst_27)(pair? lst_28) #f)"
"(let-values(((syms_29)(unsafe-car lst_27))"
"((syntax?_30)(unsafe-car lst_28)))"
"(if(if #t #t #f)"
"(let-values(((table_31)"
"(let-values(((table_32) table_26))"
"(if #t"
"(let-values(((ht_33) syms_29))"
"(begin"
"(if((lambda(ht_34)(hash? ht_34))"
" ht_33)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_33)))"
"((letrec-values(((for-loop_35)"
"(lambda(table_36"
" i_37)"
"(if i_37"
"(let-values(((sym_38)"
"(hash-iterate-key"
" ht_33"
" i_37)))"
"(if #t"
"(let-values(((table_39)"
"(let-values(((table_40)"
" table_36))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_42"
" val_43)"
"(let-values()"
"(let-values(((b_44)"
"(let-values(((core-mpi16_45)"
" core-mpi)"
"((temp17_46)"
" 0)"
"((sym18_47)"
" sym_38))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi16_45"
" temp17_46"
" sym18_47)"
"(make-module-binding22.1"
" core-mpi16_45"
" temp17_46"
" sym18_47)))))"
"(values"
" sym_38"
"(if syntax?_30"
"(provided1.1"
" b_44"
" #f"
" #t)"
" b_44))))))"
"(hash-set"
" table_40"
" key_42"
" val_43)))))"
"(values"
" table_41)))))"
"(if #t"
"(for-loop_35"
" table_39"
"(hash-iterate-next"
" ht_33"
" i_37))"
" table_39))"
" table_36))"
" table_36))))"
" for-loop_35)"
" table_32"
"(hash-iterate-first ht_33))))"
" table_32))))"
"(if(if #t #t #f)"
"(for-loop_25"
" table_31"
"(unsafe-cdr lst_27)"
"(unsafe-cdr lst_28))"
" table_31))"
" table_26))"
" table_26))))"
" for-loop_25)"
" '#hasheq()"
" lst_23"
" lst_24)))))"
"((temp15_22)"
"(lambda(data-box_48"
" ns_49"
" phase_50"
" phase-level_51"
" self_52"
" bulk-binding-registry_53"
" insp_54)"
"(let-values(((tmp_55) phase-level_51))"
"(if(equal? tmp_55 0)"
"(let-values()"
"(begin"
"(let-values(((ht_56) core-primitives))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(fold-var_59 i_60)"
"(if i_60"
"(let-values(((sym_61 val_62)"
"(hash-iterate-key+value ht_56 i_60)))"
"(if #t"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_64)"
" fold-var_59))"
"(let-values(((fold-var_65)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_49"
" 0"
" sym_61"
" val_62))"
"(void)))))"
"(values fold-var_65)))))"
"(if #t"
"(for-loop_58"
" fold-var_63"
"(hash-iterate-next ht_56 i_60))"
" fold-var_63))"
" fold-var_59))"
" fold-var_59))))"
" for-loop_58)"
"(void)"
"(hash-iterate-first ht_56))))"
"(let-values(((ht_66) core-forms))"
"(begin"
"(if((lambda(ht_67)(hash? ht_67)) ht_66)"
"(void)"
"(let-values()(default-in-hash ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(fold-var_69 i_70)"
"(if i_70"
"(let-values(((sym_71 proc_72)"
"(hash-iterate-key+value ht_66 i_70)))"
"(if #t"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74)"
" fold-var_69))"
"(let-values(((fold-var_75)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_49"
" 0"
" sym_71"
"(core-form9.1"
" proc_72"
" sym_71)))"
"(void)))))"
"(values fold-var_75)))))"
"(if #t"
"(for-loop_68"
" fold-var_73"
"(hash-iterate-next ht_66 i_70))"
" fold-var_73))"
" fold-var_69))"
" fold-var_69))))"
" for-loop_68)"
"(void)"
"(hash-iterate-first ht_66))))))"
"(let-values()(void)))))))"
"(if(variable-reference-constant?(#%variable-reference make-module36.1))"
"(make-module34.1"
" temp10_17"
" #t"
" #f"
" #f"
" temp15_22"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_18"
" #t"
" temp12_19"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_21"
" #f"
" #f"
" core-mpi13_20"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/namespace/core.rkt:59:3_16"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
"(list temp10_17 temp15_22 temp11_18 temp12_19 temp14_21 core-mpi13_20)))))"
"((core-module-name9_15) core-module-name))"
"(if(variable-reference-constant?(#%variable-reference declare-module!55.1))"
"(declare-module!53.1 #f #f ns7_13 temp8_14 core-module-name9_15)"
"(declare-module!55.1 ns7_13 temp8_14 core-module-name9_15)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_76 phase_77)"
"(let-values(((ok?_78 id19_79 _20_80)"
"(let-values(((s_91) s_76))"
"(if(if #t"
"(let-values(((s_92)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(if(pair? s_92)"
"(if(let-values(((s_93)(car s_92)))"
"(if(syntax?$1 s_93)(symbol?(syntax-e$1 s_93)) #f))"
"(let-values(((s_94)(cdr s_92))) #t)"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_95) s_91))"
"(let-values(((id19_96 _20_97)"
"(let-values(((s_98)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(if #t"
"(let-values(((id21_99)(let-values(((s_101)(car s_98))) s_101))"
"((_22_100)(let-values(((s_102)(cdr s_98))) s_102)))"
"(values id21_99 _22_100))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_95)))))"
"(values #t id19_96 _20_97)))"
"(values #f #f #f)))))"
"(if ok?_78"
"(let-values(((b_103)"
"(let-values(((temp23_104) id19_79)((phase24_105) phase_77))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f temp23_104 phase24_105)"
"(resolve+shift15.1 temp23_104 phase24_105)))))"
"(if(module-binding? b_103)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_103)))"
"(module-binding-sym b_103)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values(((tmp_7) mode_6))"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(syntax-map"
"(let-values(((or-part_9)(syntax->list$1 s_5)))"
"(if or-part_9 or-part_9(syntax-e$1 s_5)))"
"(lambda(tail?_10 d_11) d_11)"
"(lambda(s_12 d_13)(loop_4 s_12(syntax-taint-mode-property s_12)))"
" #f)))"
"(datum->syntax$1"
" #f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_14)(syntax-e$1 s_5)))"
"(if(pair? c_14)"
"(let-values()"
"(let-values(((cd_15)"
"(if(syntax?$1(cdr c_14))(syntax-e$1(cdr c_14))(cdr c_14))))"
"(if(let-values(((or-part_16)(pair? cd_15)))"
"(if or-part_16"
" or-part_16"
"(if(syntax?$1 cd_15)(pair?(syntax-e$1 cd_15)) #f)))"
"(let-values()"
"(let-values(((d_17)(if(syntax?$1 cd_15)(syntax-e$1 cd_15) cd_15)))"
"(datum->syntax$1"
" s_5"
"(cons"
"(loop_4(car c_14)(syntax-taint-mode-property s_5))"
"(cons"
"(loop_4(car d_17) 'transparent)"
"(syntax-map"
"(syntax->list$1(cdr d_17))"
"(lambda(tail?_18 d_19) d_19)"
"(lambda(s_20 d_21)(loop_4 s_20(syntax-taint-mode-property s_20)))"
" #f)))"
" s_5"
" s_5)))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_22)(syntax-e$1 s_5)))"
"(let-values(((tmp_23)(core-form-sym c_22 phase_3)))"
"(if(if(equal? tmp_23 'begin)"
" #t"
"(if(equal? tmp_23 'begin-for-syntax)"
" #t"
"(if(equal? tmp_23 'module) #t(equal? tmp_23 '#%module-begin))))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_23 'define-values) #t(equal? tmp_23 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_24)"
"(let-values(((or-part_25)(syntax-property$1 s_24 'taint-mode)))"
"(if or-part_25 or-part_25(syntax-property$1 s_24 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_26)(syntax-property-remove(syntax-property-remove s_26 'taint-mode) 'certify-mode)))"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(alt-reverse"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((smss_10)(unsafe-car lst_9)))"
"(if #t"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_14)"
"(if(identifier? s_1)"
"(hasheq"
" 'name"
"(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_15)"
"(scope-set-at-fallback"
" s_1"
" smss_10"
" phase_2)))"
"(let-values(((context_16)"
"(scope-set->context"
" s-scs_15)))"
"(let-values(((context-ht_17)"
"(hash-set"
" init-ht_14"
" 'context"
" context_16)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_1)))"
"(let-values(((bindings_19)"
"(if(identifier?"
" s_1)"
"(let-values()"
"(alt-reverse"
"(let-values(((ht_20)"
" s-scs_15))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash?"
" ht_21)"
"(immutable?"
" ht_21)"
" #f))"
" ht_20)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23"
" i_24)"
"(if i_24"
"(let-values(((sc_25)"
"(unsafe-immutable-hash-iterate-key"
" ht_20"
" i_24)))"
"(if #t"
"(let-values(((fold-var_26)"
"(let-values(((ht_27"
" bulk-bindings_28)"
"(let-values(((table_31)"
"(scope-binding-table"
" sc_25)))"
"(if(hash?"
" table_31)"
"(values"
"(hash-ref"
" table_31"
" sym_18"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_31)"
" sym_18"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_31)))))"
"((s_29)"
" s_1)"
"((extra-shifts_30)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33"
" i_34"
" already-covered-scopes_35)"
"(if(not"
"(null?"
" i_34))"
"(let-values(((scs_36)"
"(if(pair?"
" i_34)"
"(let-values()"
"(let-values(((scs_38)"
"(bulk-binding-at-scopes"
"(car"
" i_34))))"
"(if(not"
"(set-member?"
" already-covered-scopes_35"
" scs_38))"
" scs_38"
" #f)))"
"(let-values()"
"(hash-iterate-key"
" ht_27"
" i_34))))"
"((b_37)"
"(if(pair?"
" i_34)"
"(let-values()"
"(let-values(((bulk_39)"
"(bulk-binding-at-bulk"
"(car"
" i_34))))"
"(let-values(((b-info_40)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_39"
" s_29"
" extra-shifts_30)"
" sym_18"
" #f)))"
"(if b-info_40"
"((bulk-binding-create"
" bulk_39)"
" bulk_39"
" b-info_40"
" sym_18)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_27"
" i_34)))))"
"(if #t"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_33))"
"(if(if scs_36"
"(if b_37"
"(let-values(((or-part_43)"
" all-bindings?_3))"
"(if or-part_43"
" or-part_43"
"(subset?"
" scs_36"
" s-scs_15)))"
" #f)"
" #f)"
"(let-values(((fold-var_44)"
" fold-var_42))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_36)"
" 'match?"
"(subset?"
" scs_36"
" s-scs_15)"
"(if(local-binding?"
" b_37)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_37)"
"(local-binding-key"
" b_37)"
"(vector"
"(module-binding-sym"
" b_37)"
"(module-binding-module"
" b_37)"
"(module-binding-phase"
" b_37)))))"
" fold-var_44))))"
"(values"
" fold-var_45)))"
" fold-var_42))))"
"(if #t"
"(for-loop_32"
" fold-var_41"
"(if(pair?"
" i_34)"
"(let-values()"
"(cdr"
" i_34))"
"(let-values()"
"(let-values(((or-part_46)"
"(hash-iterate-next"
" ht_27"
" i_34)))"
"(if or-part_46"
" or-part_46"
" bulk-bindings_28))))"
"(if(if(pair?"
" bulk-bindings_28)"
"(if scs_36"
"(if b_37"
"(let-values(((or-part_47)"
"(not"
"(pair?"
" i_34))))"
"(if or-part_47"
" or-part_47"
"(not"
"(null?"
"(cdr"
" i_34)))))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(set-add"
" already-covered-scopes_35"
" scs_36))"
"(let-values()"
" already-covered-scopes_35)))"
" fold-var_41))"
" fold-var_33))"
" fold-var_33))))"
" for-loop_32)"
" fold-var_23"
"(let-values(((or-part_48)"
"(hash-iterate-first"
" ht_27)))"
"(if or-part_48"
" or-part_48"
" bulk-bindings_28))"
" '#hasheq())))))"
"(if #t"
"(for-loop_22"
" fold-var_26"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))"
" fold-var_26))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first"
" ht_20))))))"
"(let-values()"
" null))))"
"(if(null? bindings_19)"
" context-ht_17"
"(hash-set"
" context-ht_17"
" 'bindings"
" bindings_19)))))))))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(if #t(for-loop_7 fold-var_11(unsafe-cdr lst_9)) fold-var_11))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_49)"
"(let-values(((...der/syntax/debug.rkt:52:2_50) sort9.1)"
"((temp1_51)"
"(alt-reverse"
"(let-values(((ht_54) scs_49))"
"(begin"
"(if((lambda(ht_55)(if(hash? ht_55)(immutable? ht_55) #f)) ht_54)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_54)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57 i_58)"
"(if i_58"
"(let-values(((sc_59)(unsafe-immutable-hash-iterate-key ht_54 i_58)))"
"(if #t"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_57))"
"(let-values(((fold-var_62)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_59)"
"(vector"
"(scope-id sc_59)"
"(scope-kind sc_59)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_59)))"
"(vector"
"(scope-id sc_59)"
"(scope-kind sc_59))))"
" fold-var_61))))"
"(values fold-var_62)))))"
"(if #t"
"(for-loop_56"
" fold-var_60"
"(unsafe-immutable-hash-iterate-next ht_54 i_58))"
" fold-var_60))"
" fold-var_57))"
" fold-var_57))))"
" for-loop_56)"
" null"
"(unsafe-immutable-hash-iterate-first ht_54))))))"
"((<2_52) <)"
"((temp3_53)(lambda(v_63)(vector-ref v_63 0))))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f temp3_53 #t temp1_51 <2_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/syntax/debug.rkt:52:2_50"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list temp3_53)"
" temp1_51"
" <2_52)))))"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_1 #f null (syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) #t)))"
"((letrec-values(((loop_6)"
"(lambda(info_7 layer_8)"
"(string-append"
"                           \"\\n  context\""
"(layer->string layer_8)"
"                           \"...:\""
"(describe-context(hash-ref info_7 'context))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_9 pos-next_10 init_11 pos-cont?_12 val-cont?_13 all-cont?_14)"
"(make-sequence '(b)(hash-ref info_7 'bindings null))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_15)"
"(lambda(fold-var_16 pos_17)"
"(if(if pos-cont?_12(pos-cont?_12 pos_17) #t)"
"(let-values(((b_18)(pos->vals_9 pos_17)))"
"(if(if val-cont?_13(val-cont?_13 b_18) #t)"
"(let-values(((fold-var_19)"
"(let-values(((fold-var_20) fold-var_16))"
"(let-values(((fold-var_21)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                               \"\\n  \""
"(if(hash-ref"
" b_18"
" 'match?"
" #f)"
"                                                                                                 \"matching\""
"                                                                                                 \"other\")"
"                                                                                               \" binding\""
"(layer->string layer_8)"
"                                                                                               \"...:\""
"                                                                                               \"\\n   \""
"(if(hash-ref"
" b_18"
" 'local"
" #f)"
"                                                                                                 \"local\""
"(format"
"                                                                                                  \"~a\""
"(hash-ref"
" b_18"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_18"
" 'context))))"
" fold-var_20))))"
"(values fold-var_21)))))"
"(if(if all-cont?_14(all-cont?_14 pos_17 b_18) #t)"
"(for-loop_15 fold-var_19(pos-next_10 pos_17))"
" fold-var_19))"
" fold-var_16))"
" fold-var_16))))"
" for-loop_15)"
" null"
" init_11)))))"
"(let-values(((fallbacks_22)(hash-ref info_7 'fallbacks null)))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_23) fallbacks_22)((start_24)(add1 layer_8)))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(exact-nonnegative-integer? start_24)"
"(void)"
"(let-values()(in-naturals start_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27 pos_28)"
"(if(if(pair? lst_27) #t #f)"
"(let-values(((fallback_29)(unsafe-car lst_27))"
"((layer_30) pos_28))"
"(if(if #t #t #f)"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32) fold-var_26))"
"(let-values(((fold-var_33)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_6"
" fallback_29"
" layer_30))"
" fold-var_32))))"
"(values fold-var_33)))))"
"(if(if #t #t #f)"
"(for-loop_25"
" fold-var_31"
"(unsafe-cdr lst_27)"
"(+ pos_28 1))"
" fold-var_31))"
" fold-var_26))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_23"
" start_24))))))))))"
" loop_6)"
" info_5"
" 0))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_34)"
"(let-values(((strs_35)"
"((letrec-values(((loop_36)"
"(lambda(strs_37 scopes_38)"
"(if(null? scopes_38)"
"(let-values()(alt-reverse strs_37))"
"(let-values()"
"                                          (let-values (((str_39) (format \" ~a\" (car scopes_38))))"
"(if(if(pair? strs_37)"
"(<(+(string-length str_39)(string-length(car strs_37))) 72)"
" #f)"
"(loop_36"
"(cons(string-append(car strs_37) str_39)(cdr strs_37))"
"(cdr scopes_38))"
"(loop_36(cons str_39 strs_37)(cdr scopes_38)))))))))"
" loop_36)"
" null"
" scopes_34)))"
"(if(null? strs_35)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_40) strs_35))"
"(begin"
"(if(list? lst_40)(void)(let-values()(in-list lst_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_42 lst_43)"
"(if(pair? lst_43)"
"(let-values(((str_44)(unsafe-car lst_43)))"
"(if #t"
"(let-values(((fold-var_45)"
"(let-values(((fold-var_46) fold-var_42))"
"(let-values(((fold-var_47)"
"(let-values()"
"(cons"
"                                                                           (let-values () (string-append \"\\n  \" str_44))"
" fold-var_46))))"
"(values fold-var_47)))))"
"(if #t(for-loop_41 fold-var_45(unsafe-cdr lst_43)) fold-var_45))"
" fold-var_42))"
" fold-var_42))))"
" for-loop_41)"
" null"
" lst_40))))))))))"
" (define-values (layer->string) (lambda (layer_48) (if (zero? layer_48) \"\" (format \" at layer ~a\" layer_48))))"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values(((tmp_8) sym_2))"
"(if(equal? tmp_8 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_8 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not"
"(let-values(((trigger-id1_9) trigger-id_3)((phase2_10) phase_5))"
"(if(variable-reference-constant?(#%variable-reference resolve21.1))"
"(resolve19.1 #f #f #f #f #f #f trigger-id1_9 phase2_10)"
"(resolve21.1 trigger-id1_9 phase2_10))))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_2"
"(let-values(((tmp_11) phase_5))"
"(if(equal? tmp_11 0)"
"                (let-values () \"\")"
"(if(equal? tmp_11 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 #f)"
"(if(not(eq?(syntax-e$1 s_1)(syntax-e$1 trigger-id_3))) s_1 #f)"
" null"
"           (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) \"\")))))))"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values(((ids_8) ids5_3))"
"(let-values(((phase_9) phase6_4))"
"(let-values(((s_10) s7_5))"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
"            (let-values (((what_12) (if what2_2 what1_1 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values(((lst_17) l_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20)))"
"(if #t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_19))"
"(let-values(((fold-var_24)"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_14"
" phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                    \"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(void)))))"
"(values fold-var_24)))))"
"(if #t"
"(for-loop_18"
" fold-var_22"
"(unsafe-cdr lst_20))"
" fold-var_22))"
" fold-var_19))"
" fold-var_19))))"
" for-loop_18)"
"(void)"
" lst_17)))"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(define-values"
"(unpack9.1$2)"
"(lambda(given-kws_25 given-args_26 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)"
"(let-values(((what2_32)(pair? given-kws_25)))"
"(let-values(((what1_33)(if what2_32(car given-args_26)(void))))"
"(check-no-duplicate-ids8.1 what1_33 what2_32 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)))))"
"(define-values"
"(check-no-duplicate-ids10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_34 given-argc_35)"
"(if(if(>= given-argc_35 5)(<= given-argc_35 6) #f)"
"(let-values(((l1_36) given-kws_34))"
"(let-values(((l1_37)(if(null? l1_36) l1_36(if(eq?(car l1_36) '#:what)(cdr l1_36) l1_36))))"
"(null? l1_37)))"
" #f))"
"(case-lambda"
"((given-kws_38 given-args_39 ids_40 phase_41 s_42)"
"(unpack9.1$2 given-kws_38 given-args_39 ids_40 phase_41 s_42 #f #f))"
"((given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48)"
"(unpack9.1$2 given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48 #t)))"
" null"
" '(#:what)"
"(let-values(((check-no-duplicate-ids_49)"
"(case-lambda"
"((ids_50 phase_51 s_52)(unpack9.1$2 null null ids_50 phase_51 s_52 #f #f))"
"((ids_53 phase_54 s_55 ht3_56)(unpack9.1$2 null null ids_53 phase_54 s_55 ht3_56 #t)))))"
" check-no-duplicate-ids_49)))"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(alt-reverse"
"(let-values(((lst_4) s_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_1))))"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'self)"
"(make-struct-field-accessor -ref_4 3 'module-self)"
"(make-struct-field-accessor -ref_4 4 'full-module-name)"
"(make-struct-field-accessor -ref_4 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_52"
" full-module-name12_53"
" lazy-syntax-literals?7_54"
" lazy-syntax-literals?13_55"
" module-self5_56"
" module-self11_57"
" namespace2_58"
" namespace8_59"
" phase3_60"
" phase9_61"
" self4_62"
" self10_63)"
"(let-values(((namespace_64)(if namespace8_59 namespace2_58(1/current-namespace))))"
"(let-values(((phase_65)(if phase9_61 phase3_60(namespace-phase namespace_64))))"
"(let-values(((self_66)(if self10_63 self4_62(namespace-mpi namespace_64))))"
"(let-values(((module-self_67)(if module-self11_57 module-self5_56 #f)))"
"(let-values(((full-module-name_68)(if full-module-name12_53 full-module-name6_52 #f)))"
"(let-values(((lazy-syntax-literals?_69)"
"(if lazy-syntax-literals?13_55 lazy-syntax-literals?7_54(if module-self_67 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_67(not full-module-name_68) #f)"
"                      (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_64"
" phase_65"
" self_66"
" module-self_67"
" full-module-name_68"
" lazy-syntax-literals?_69"
" #f)))))))))))"
"(define-values"
"(unpack15.1)"
"(lambda(given-kws_70 given-args_71)"
"(let-values(((full-module-name12_72)(if(pair? given-kws_70)(eq? '#:full-module-name(car given-kws_70)) #f)))"
"(let-values(((full-module-name6_73)(if full-module-name12_72(car given-args_71)(void)))"
"((given-kws_74)(if full-module-name12_72(cdr given-kws_70) given-kws_70))"
"((given-args_75)(if full-module-name12_72(cdr given-args_71) given-args_71)))"
"(let-values(((lazy-syntax-literals?13_76)"
"(if(pair? given-kws_74)(eq? '#:lazy-syntax-literals?(car given-kws_74)) #f)))"
"(let-values(((lazy-syntax-literals?7_77)(if lazy-syntax-literals?13_76(car given-args_75)(void)))"
"((given-kws_78)(if lazy-syntax-literals?13_76(cdr given-kws_74) given-kws_74))"
"((given-args_79)(if lazy-syntax-literals?13_76(cdr given-args_75) given-args_75)))"
"(let-values(((module-self11_80)(if(pair? given-kws_78)(eq? '#:module-self(car given-kws_78)) #f)))"
"(let-values(((module-self5_81)(if module-self11_80(car given-args_79)(void)))"
"((given-kws_82)(if module-self11_80(cdr given-kws_78) given-kws_78))"
"((given-args_83)(if module-self11_80(cdr given-args_79) given-args_79)))"
"(let-values(((namespace8_84)(if(pair? given-kws_82)(eq? '#:namespace(car given-kws_82)) #f)))"
"(let-values(((namespace2_85)(if namespace8_84(car given-args_83)(void)))"
"((given-kws_86)(if namespace8_84(cdr given-kws_82) given-kws_82))"
"((given-args_87)(if namespace8_84(cdr given-args_83) given-args_83)))"
"(let-values(((phase9_88)(if(pair? given-kws_86)(eq? '#:phase(car given-kws_86)) #f)))"
"(let-values(((phase3_89)(if phase9_88(car given-args_87)(void)))"
"((given-kws_90)(if phase9_88(cdr given-kws_86) given-kws_86))"
"((given-args_91)(if phase9_88(cdr given-args_87) given-args_87)))"
"(let-values(((self10_92)(pair? given-kws_90)))"
"(let-values(((self4_93)(if self10_92(car given-args_91)(void))))"
"(make-compile-context14.1"
" full-module-name6_73"
" full-module-name12_72"
" lazy-syntax-literals?7_77"
" lazy-syntax-literals?13_76"
" module-self5_81"
" module-self11_80"
" namespace2_85"
" namespace8_84"
" phase3_89"
" phase9_88"
" self4_93"
" self10_92)))))))))))))))"
"(define-values"
"(make-compile-context16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_94 given-argc_95)"
"(if(= given-argc_95 2)"
"(let-values(((l1_96) given-kws_94))"
"(let-values(((l1_97)(if(null? l1_96) l1_96(if(eq?(car l1_96) '#:full-module-name)(cdr l1_96) l1_96))))"
"(let-values(((l1_98) l1_97))"
"(let-values(((l1_99)"
"(if(null? l1_98) l1_98(if(eq?(car l1_98) '#:lazy-syntax-literals?)(cdr l1_98) l1_98))))"
"(let-values(((l1_100) l1_99))"
"(let-values(((l1_101)"
"(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:module-self)(cdr l1_100) l1_100))))"
"(let-values(((l1_102) l1_101))"
"(let-values(((l1_103)"
"(if(null? l1_102) l1_102(if(eq?(car l1_102) '#:namespace)(cdr l1_102) l1_102))))"
"(let-values(((l1_104) l1_103))"
"(let-values(((l1_105)"
"(if(null? l1_104) l1_104(if(eq?(car l1_104) '#:phase)(cdr l1_104) l1_104))))"
"(let-values(((l1_106) l1_105))"
"(let-values(((l1_107)"
"(if(null? l1_106)"
" l1_106"
"(if(eq?(car l1_106) '#:self)(cdr l1_106) l1_106))))"
"(null? l1_107)))))))))))))"
" #f))"
"(case-lambda((given-kws_108 given-args_109)(unpack15.1 given-kws_108 given-args_109)))"
" null"
" '(#:full-module-name #:lazy-syntax-literals? #:module-self #:namespace #:phase #:self)"
"(let-values(((make-compile-context_110)(case-lambda(()(unpack15.1 null null))))) make-compile-context_110)))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values(make-module-path-index-table)(lambda()(make-hasheq)))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_1 mpi_2)"
"(let-values(((pos_3)(add-module-path-index!/pos mpis_1 mpi_2)))"
"(if pos_3(list 'vector-ref mpi-vector-id pos_3) #f))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_4 mpi_5)"
"(if(not mpi_5)"
"(let-values() #f)"
"(if mpi_5"
"(let-values()"
"(let-values(((or-part_6)(hash-ref mpis_4 mpi_5 #f)))"
"(if or-part_6"
" or-part_6"
"(let-values(((pos_7)(hash-count mpis_4)))(begin(hash-set! mpis_4 mpi_5 pos_7) pos_7)))))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_8)"
"(let-values(((gen-order_9)(make-hasheqv)))"
"(let-values(((rev-mpis_10)"
"(let-values(((ht_13) mpis_8))"
"(begin"
"(if((lambda(ht_14)(hash? ht_14)) ht_13)(void)(let-values()(default-in-hash ht_13)))"
"((letrec-values(((for-loop_15)"
"(lambda(table_16 i_17)"
"(if i_17"
"(let-values(((k_18 v_19)(hash-iterate-key+value ht_13 i_17)))"
"(if #t"
"(let-values(((table_20)"
"(let-values(((table_21) table_16))"
"(let-values(((table_22)"
"(let-values()"
"(let-values(((key_23 val_24)"
"(let-values()"
"(values v_19 k_18))))"
"(hash-set"
" table_21"
" key_23"
" val_24)))))"
"(values table_22)))))"
"(if #t"
"(for-loop_15 table_20(hash-iterate-next ht_13 i_17))"
" table_20))"
" table_16))"
" table_16))))"
" for-loop_15)"
" '#hasheqv()"
"(hash-iterate-first ht_13))))))"
"(let-values((()"
"(begin"
"(let-values(((start_25) 0)((end_26)(hash-count rev-mpis_10))((inc_27) 1))"
"(begin"
"(if(if(real? start_25)(if(real? end_26)(real? inc_27) #f) #f)"
"(void)"
"(let-values()(in-range start_25 end_26 inc_27)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29 pos_30)"
"(if(< pos_30 end_26)"
"(let-values(((i_31) pos_30))"
"(if #t"
"(let-values(((fold-var_32)"
"(let-values(((fold-var_33) fold-var_29))"
"(let-values(((fold-var_34)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_35)"
"(hash-ref"
" rev-mpis_10"
" i_31)))"
"((letrec-values(((loop_36)"
"(lambda(mpi_37)"
"(if(hash-ref"
" gen-order_9"
" mpi_37"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_38"
" base_39)"
"(1/module-path-index-split"
" mpi_37)))"
"(begin"
"(if base_39"
"(let-values()"
"(loop_36"
" base_39))"
"(void))"
"(hash-set!"
" gen-order_9"
" mpi_37"
"(hash-count"
" gen-order_9)))))))))"
" loop_36)"
" mpi_35)))"
"(void)))))"
"(values fold-var_34)))))"
"(if #t(for-loop_28 fold-var_32(+ pos_30 inc_27)) fold-var_32))"
" fold-var_29))"
" fold-var_29))))"
" for-loop_28)"
"(void)"
" start_25)))"
"(values))))"
"(let-values(((rev-gen-order_11)"
"(let-values(((ht_40) gen-order_9))"
"(begin"
"(if((lambda(ht_41)(hash? ht_41)) ht_40)(void)(let-values()(default-in-hash ht_40)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43 i_44)"
"(if i_44"
"(let-values(((k_45 v_46)(hash-iterate-key+value ht_40 i_44)))"
"(if #t"
"(let-values(((table_47)"
"(let-values(((table_48) table_43))"
"(let-values(((table_49)"
"(let-values()"
"(let-values(((key_50 val_51)"
"(let-values()"
"(values"
" v_46"
" k_45))))"
"(hash-set"
" table_48"
" key_50"
" val_51)))))"
"(values table_49)))))"
"(if #t"
"(for-loop_42 table_47(hash-iterate-next ht_40 i_44))"
" table_47))"
" table_43))"
" table_43))))"
" for-loop_42)"
" '#hasheqv()"
"(hash-iterate-first ht_40))))))"
"(let-values(((gens_12)"
"(let-values(((len_52)(hash-count gen-order_9)))"
"(begin"
"(if(exact-nonnegative-integer? len_52)"
"(void)"
"                                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_52)))"
"(let-values(((v_53)(make-vector len_52 0)))"
"(begin"
"(if(zero? len_52)"
"(void)"
"(let-values()"
"(let-values(((start_54) 0)((end_55)(hash-count gen-order_9))((inc_56) 1))"
"(begin"
"(if(if(real? start_54)(if(real? end_55)(real? inc_56) #f) #f)"
"(void)"
"(let-values()(in-range start_54 end_55 inc_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(i_58 pos_59)"
"(if(< pos_59 end_55)"
"(let-values(((i_60) pos_59))"
"(if #t"
"(let-values(((i_61)"
"(let-values(((i_62) i_58))"
"(let-values(((i_63)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_53"
" i_62"
"(let-values()"
"(let-values(((mpi_64)"
"(hash-ref"
" rev-gen-order_11"
" i_60)))"
"(let-values(((path_65"
" base_66)"
"(1/module-path-index-split"
" mpi_64)))"
"(if(top-level-module-path-index?"
" mpi_64)"
"(let-values()"
" 'top)"
"(if(not"
" path_65)"
"(let-values()"
"(box"
"(let-values(((or-part_67)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_64))))"
"(if or-part_67"
" or-part_67"
" 'self))))"
"(if(not"
" base_66)"
"(let-values()"
"(vector"
" path_65))"
"(if base_66"
"(let-values()"
"(vector"
" path_65"
"(hash-ref"
" gen-order_9"
" base_66)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_62)))))"
"(values i_63)))))"
"(if(if #t"
"(not"
"((lambda x_68(unsafe-fx= i_61 len_52))"
" i_60))"
" #f)"
"(for-loop_57 i_61(+ pos_59 inc_56))"
" i_61))"
" i_58))"
" i_58))))"
" for-loop_57)"
" 0"
" start_54)))))"
" v_53))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_12)"
"(list"
" 'quote"
"(let-values(((vec_69 i_70)"
"(let-values(((start_71) 0)((end_72)(hash-count rev-mpis_10))((inc_73) 1))"
"(begin"
"(if(if(real? start_71)(if(real? end_72)(real? inc_73) #f) #f)"
"(void)"
"(let-values()(in-range start_71 end_72 inc_73)))"
"((letrec-values(((for-loop_74)"
"(lambda(vec_75 i_76 pos_77)"
"(if(< pos_77 end_72)"
"(let-values(((i_78) pos_77))"
"(if #t"
"(let-values(((vec_79 i_80)"
"(let-values(((vec_81) vec_75)((i_82) i_76))"
"(let-values(((vec_83 i_84)"
"(let-values()"
"(let-values(((new-vec_85)"
"(if(eq?"
" i_82"
"(unsafe-vector*-length"
" vec_81))"
"(grow-vector"
" vec_81)"
" vec_81)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_85"
" i_82"
"(let-values()"
"(hash-ref"
" gen-order_9"
"(hash-ref"
" rev-mpis_10"
" i_78))))"
"(values"
" new-vec_85"
"(unsafe-fx+"
" i_82"
" 1)))))))"
"(values vec_83 i_84)))))"
"(if #t"
"(for-loop_74 vec_79 i_80(+ pos_77 inc_73))"
"(values vec_79 i_80)))"
"(values vec_75 i_76)))"
"(values vec_75 i_76)))))"
" for-loop_74)"
"(make-vector 16)"
" 0"
" start_71)))))"
"(shrink-vector vec_69 i_70)))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_86 order-vec_87)"
"(let-values(((gen_88)(make-vector(vector-length gen-vec_86) #f)))"
"(begin"
"(let-values(((vec_89 len_90)"
"(let-values(((vec_92) gen-vec_86))"
"(begin"
"(if(vector? vec_92)(void)(let-values()(in-vector vec_92)))"
"(values vec_92(unsafe-vector-length vec_92)))))"
"((start_91) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_91)(void)(let-values()(in-naturals start_91)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_94 pos_95 pos_96)"
"(if(if(unsafe-fx< pos_95 len_90) #t #f)"
"(let-values(((d_97)(unsafe-vector-ref vec_89 pos_95))((i_98) pos_96))"
"(if(if #t #t #f)"
"(let-values(((fold-var_99)"
"(let-values(((fold-var_100) fold-var_94))"
"(let-values(((fold-var_101)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_88"
" i_98"
"(if(eq? d_97 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_97)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_97)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector-ref d_97 0)"
"(if(>(vector-length d_97) 1)"
"(vector-ref"
" gen_88"
"(vector-ref d_97 1))"
" #f)))))))"
"(void)))))"
"(values fold-var_101)))))"
"(if(if #t #t #f)"
"(for-loop_93 fold-var_99(unsafe-fx+ 1 pos_95)(+ pos_96 1))"
" fold-var_99))"
" fold-var_94))"
" fold-var_94))))"
" for-loop_93)"
"(void)"
" 0"
" start_91)))"
"(let-values(((len_102)(vector-length order-vec_87)))"
"(begin"
"(if(exact-nonnegative-integer? len_102)"
"(void)"
"              (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_102)))"
"(let-values(((v_103)(make-vector len_102 0)))"
"(begin"
"(if(zero? len_102)"
"(void)"
"(let-values()"
"(let-values(((vec_104 len_105)"
"(let-values(((vec_106) order-vec_87))"
"(begin"
"(if(vector? vec_106)(void)(let-values()(in-vector vec_106)))"
"(values vec_106(unsafe-vector-length vec_106))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_107)"
"(lambda(i_108 pos_109)"
"(if(unsafe-fx< pos_109 len_105)"
"(let-values(((p_110)(unsafe-vector-ref vec_104 pos_109)))"
"(if #t"
"(let-values(((i_111)"
"(let-values(((i_112) i_108))"
"(let-values(((i_113)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_103"
" i_112"
"(let-values()"
"(vector-ref gen_88 p_110)))"
"(unsafe-fx+ 1 i_112)))))"
"(values i_113)))))"
"(if(if #t"
"(not((lambda x_114(unsafe-fx= i_111 len_102)) p_110))"
" #f)"
"(for-loop_107 i_111(unsafe-fx+ 1 pos_109))"
" i_111))"
" i_108))"
" i_108))))"
" for-loop_107)"
" 0"
" 0)))))"
" v_103))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_115)"
"(let-values(((vec_116)(make-vector(hash-count mpis_115) #f)))"
"(begin"
"(let-values(((ht_117) mpis_115))"
"(begin"
"(if((lambda(ht_118)(hash? ht_118)) ht_117)(void)(let-values()(default-in-hash ht_117)))"
"((letrec-values(((for-loop_119)"
"(lambda(fold-var_120 i_121)"
"(if i_121"
"(let-values(((mpi_122 pos_123)(hash-iterate-key+value ht_117 i_121)))"
"(if #t"
"(let-values(((fold-var_124)"
"(let-values(((fold-var_125) fold-var_120))"
"(let-values(((fold-var_126)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_116 pos_123 mpi_122))"
"(void)))))"
"(values fold-var_126)))))"
"(if #t"
"(for-loop_119 fold-var_124(hash-iterate-next ht_117 i_121))"
" fold-var_124))"
" fold-var_120))"
" fold-var_120))))"
" for-loop_119)"
"(void)"
"(hash-iterate-first ht_117))))"
" vec_116))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_137 mpis_138)"
"(alt-reverse"
"(let-values(((lst_139) mus_137))"
"(begin"
"(if(list? lst_139)(void)(let-values()(in-list lst_139)))"
"((letrec-values(((for-loop_140)"
"(lambda(fold-var_141 lst_142)"
"(if(pair? lst_142)"
"(let-values(((mu_143)(unsafe-car lst_142)))"
"(if #t"
"(let-values(((fold-var_144)"
"(let-values(((fold-var_145) fold-var_141))"
"(let-values(((fold-var_146)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_138"
"(module-use-module mu_143))"
"(module-use-phase mu_143)))"
" fold-var_145))))"
"(values fold-var_146)))))"
"(if #t(for-loop_140 fold-var_144(unsafe-cdr lst_142)) fold-var_144))"
" fold-var_141))"
" fold-var_141))))"
" for-loop_140)"
" null"
" lst_139))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_147)"
"(let-values(((or-part_148)(null? v_147)))"
"(if or-part_148"
" or-part_148"
"(let-values(((or-part_149)(boolean? v_147)))"
"(if or-part_149"
" or-part_149"
"(let-values(((or-part_150)"
"(if(fixnum? v_147)(if(< v_147(sub1(expt 2 30)))(> v_147(-(expt 2 30))) #f) #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)(if(symbol? v_147)(symbol-interned? v_147) #f)))"
"(if or-part_151"
" or-part_151"
"(let-values(((or-part_152)(char? v_147)))(if or-part_152 or-part_152(keyword? v_147)))))))))))))"
"(define-values"
"(generate-deserialize5.1)"
"(lambda(syntax-support?1_153 syntax-support?2_154 v3_155 mpis4_156)"
"(let-values(((v_157) v3_155))"
"(let-values(((mpis_158) mpis4_156))"
"(let-values(((syntax-support?_159)(if syntax-support?2_154 syntax-support?1_153 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_160)(find-reachable-scopes v_157)))"
"(let-values(((state_161)(make-serialize-state reachable-scopes_160)))"
"(let-values(((mutables_162)(make-hasheq)))"
"(let-values(((objs_163)(make-hasheq)))"
"(let-values(((shares_164)(make-hasheq)))"
"(let-values(((obj-step_165) 0))"
"(let-values(((frontier_166) null))"
"(let-values(((add-frontier!_167)"
"(lambda(v_179)(set! frontier_166(cons v_179 frontier_166)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_180)"
"(lambda(v_181)"
"(begin"
"((letrec-values(((loop_182)"
"(lambda(v_183)"
"(if(let-values(((or-part_184)"
"(interned-literal?"
" v_183)))"
"(if or-part_184"
" or-part_184"
"(1/module-path-index?"
" v_183)))"
"(let-values()(void))"
"(if(hash-ref objs_163 v_183 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_162"
" v_183"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_164"
" v_183"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_183)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_162"
" v_183"
"(hash-count"
" mutables_162))"
"((serialize-fill!-ref"
" v_183)"
" v_183"
" add-frontier!_167"
" state_161)))"
"(if(serialize? v_183)"
"(let-values()"
"((serialize-ref"
" v_183)"
" v_183"
"(let-values(((core16_185)"
"(lambda(v15_186"
" ref?13_187"
" ref?14_188)"
"(let-values(((v_189)"
" v15_186))"
"(let-values(((ref?_190)"
"(if ref?14_188"
" ref?13_187"
" #f)))"
"(let-values()"
"(loop_182"
" v_189)))))))"
"(case-lambda"
"((v_191)"
"(core16_185"
" v_191"
" #f"
" #f))"
"((v_192"
" ref?13_193)"
"(core16_185"
" v_192"
" ref?13_193"
" #t))))"
" state_161))"
"(if(pair? v_183)"
"(let-values()"
"(begin"
"(loop_182"
"(car v_183))"
"(loop_182"
"(cdr v_183))))"
"(if(vector? v_183)"
"(let-values()"
"(if(let-values(((or-part_194)"
"(immutable?"
" v_183)))"
"(if or-part_194"
" or-part_194"
"(zero?"
"(vector-length"
" v_183))))"
"(let-values(((vec_195"
" len_196)"
"(let-values(((vec_197)"
" v_183))"
"(begin"
"(if(vector?"
" vec_197)"
"(void)"
"(let-values()"
"(in-vector"
" vec_197)))"
"(values"
" vec_197"
"(unsafe-vector-length"
" vec_197))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_198)"
"(lambda(fold-var_199"
" pos_200)"
"(if(unsafe-fx<"
" pos_200"
" len_196)"
"(let-values(((e_201)"
"(unsafe-vector-ref"
" vec_195"
" pos_200)))"
"(if #t"
"(let-values(((fold-var_202)"
"(let-values(((fold-var_203)"
" fold-var_199))"
"(let-values(((fold-var_204)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_182"
" e_201))"
"(void)))))"
"(values"
" fold-var_204)))))"
"(if #t"
"(for-loop_198"
" fold-var_202"
"(unsafe-fx+"
" 1"
" pos_200))"
" fold-var_202))"
" fold-var_199))"
" fold-var_199))))"
" for-loop_198)"
"(void)"
" 0)))"
"(begin"
"(hash-set!"
" mutables_162"
" v_183"
"(hash-count"
" mutables_162))"
"(let-values(((vec_205"
" len_206)"
"(let-values(((vec_207)"
" v_183))"
"(begin"
"(if(vector?"
" vec_207)"
"(void)"
"(let-values()"
"(in-vector"
" vec_207)))"
"(values"
" vec_207"
"(unsafe-vector-length"
" vec_207))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_208)"
"(lambda(fold-var_209"
" pos_210)"
"(if(unsafe-fx<"
" pos_210"
" len_206)"
"(let-values(((e_211)"
"(unsafe-vector-ref"
" vec_205"
" pos_210)))"
"(if #t"
"(let-values(((fold-var_212)"
"(let-values(((fold-var_213)"
" fold-var_209))"
"(let-values(((fold-var_214)"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_167"
" e_211))"
"(void)))))"
"(values"
" fold-var_214)))))"
"(if #t"
"(for-loop_208"
" fold-var_212"
"(unsafe-fx+"
" 1"
" pos_210))"
" fold-var_212))"
" fold-var_209))"
" fold-var_209))))"
" for-loop_208)"
"(void)"
" 0))))))"
"(if(box? v_183)"
"(let-values()"
"(if(immutable?"
" v_183)"
"(loop_182"
"(unbox"
" v_183))"
"(begin"
"(hash-set!"
" mutables_162"
" v_183"
"(hash-count"
" mutables_162))"
"(add-frontier!_167"
"(unbox"
" v_183)))))"
"(if(hash?"
" v_183)"
"(let-values()"
"(if(immutable?"
" v_183)"
"(let-values(((ht_215)"
" v_183))"
"(begin"
"(if((lambda(ht_216)"
"(hash?"
" ht_216))"
" ht_215)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_215)))"
"((letrec-values(((for-loop_217)"
"(lambda(fold-var_218"
" i_219)"
"(if i_219"
"(let-values(((k_220"
" v_221)"
"(hash-iterate-key+value"
" ht_215"
" i_219)))"
"(if #t"
"(let-values(((fold-var_222)"
"(let-values(((fold-var_223)"
" fold-var_218))"
"(let-values(((fold-var_224)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_182"
" k_220)"
"(loop_182"
" v_221)))"
"(void)))))"
"(values"
" fold-var_224)))))"
"(if #t"
"(for-loop_217"
" fold-var_222"
"(hash-iterate-next"
" ht_215"
" i_219))"
" fold-var_222))"
" fold-var_218))"
" fold-var_218))))"
" for-loop_217)"
"(void)"
"(hash-iterate-first"
" ht_215))))"
"(begin"
"(hash-set!"
" mutables_162"
" v_183"
"(hash-count"
" mutables_162))"
"(let-values(((ht_225)"
" v_183))"
"(begin"
"(if((lambda(ht_226)"
"(hash?"
" ht_226))"
" ht_225)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_225)))"
"((letrec-values(((for-loop_227)"
"(lambda(fold-var_228"
" i_229)"
"(if i_229"
"(let-values(((k_230"
" v_231)"
"(hash-iterate-key+value"
" ht_225"
" i_229)))"
"(if #t"
"(let-values(((fold-var_232)"
"(let-values(((fold-var_233)"
" fold-var_228))"
"(let-values(((fold-var_234)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_167"
" k_230)"
"(add-frontier!_167"
" v_231)))"
"(void)))))"
"(values"
" fold-var_234)))))"
"(if #t"
"(for-loop_227"
" fold-var_232"
"(hash-iterate-next"
" ht_225"
" i_229))"
" fold-var_232))"
" fold-var_228))"
" fold-var_228))))"
" for-loop_227)"
"(void)"
"(hash-iterate-first"
" ht_225)))))))"
"(if(prefab-struct-key"
" v_183)"
"(let-values()"
"(let-values(((v*_235"
" start*_236"
" stop*_237"
" step*_238)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                             \"vector\""
"(lambda(x_239)"
"(vector?"
" x_239))"
"(lambda(x_240)"
"(unsafe-vector-length"
" x_240))"
"(struct->vector"
" v_183)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_241)"
"(lambda(fold-var_242"
" idx_243)"
"(if(unsafe-fx<"
" idx_243"
" stop*_237)"
"(let-values(((e_244)"
"(unsafe-vector-ref"
" v*_235"
" idx_243)))"
"(if #t"
"(let-values(((fold-var_245)"
"(let-values(((fold-var_246)"
" fold-var_242))"
"(let-values(((fold-var_247)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_182"
" e_244))"
"(void)))))"
"(values"
" fold-var_247)))))"
"(if #t"
"(for-loop_241"
" fold-var_245"
"(unsafe-fx+"
" idx_243"
" 1))"
" fold-var_245))"
" fold-var_242))"
" fold-var_242))))"
" for-loop_241)"
"(void)"
" start*_236))))"
"(if(srcloc?"
" v_183)"
"(let-values()"
"(let-values(((v*_248"
" start*_249"
" stop*_250"
" step*_251)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_252)"
"(vector?"
" x_252))"
"(lambda(x_253)"
"(unsafe-vector-length"
" x_253))"
"(struct->vector"
" v_183)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_254)"
"(lambda(fold-var_255"
" idx_256)"
"(if(unsafe-fx<"
" idx_256"
" stop*_250)"
"(let-values(((e_257)"
"(unsafe-vector-ref"
" v*_248"
" idx_256)))"
"(if #t"
"(let-values(((fold-var_258)"
"(let-values(((fold-var_259)"
" fold-var_255))"
"(let-values(((fold-var_260)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_182"
" e_257))"
"(void)))))"
"(values"
" fold-var_260)))))"
"(if #t"
"(for-loop_254"
" fold-var_258"
"(unsafe-fx+"
" idx_256"
" 1))"
" fold-var_258))"
" fold-var_255))"
" fold-var_255))))"
" for-loop_254)"
"(void)"
" start*_249))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_163"
" v_183"
" obj-step_165)"
"(set! obj-step_165"
"(add1"
" obj-step_165)))))))))"
" loop_182)"
" v_181)"
"(if(null? frontier_166)"
"(void)"
"(let-values()"
"(let-values(((l_261) frontier_166))"
"(begin"
"(set! frontier_166 null)"
"(let-values(((lst_262) l_261))"
"(begin"
"(if(list? lst_262)"
"(void)"
"(let-values()(in-list lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(fold-var_264"
" lst_265)"
"(if(pair? lst_265)"
"(let-values(((v_266)"
"(unsafe-car"
" lst_265)))"
"(if #t"
"(let-values(((fold-var_267)"
"(let-values(((fold-var_268)"
" fold-var_264))"
"(let-values(((fold-var_269)"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_180"
" v_266))"
"(void)))))"
"(values"
" fold-var_269)))))"
"(if #t"
"(for-loop_263"
" fold-var_267"
"(unsafe-cdr"
" lst_265))"
" fold-var_267))"
" fold-var_264))"
" fold-var_264))))"
" for-loop_263)"
"(void)"
" lst_262)))))))))))"
" frontier-loop_180)"
" v_157)"
"(values))))"
"(let-values(((num-mutables_168)(hash-count mutables_162)))"
"(let-values(((share-step-positions_169)"
"(let-values(((share-steps_270)"
"(alt-reverse"
"(let-values(((ht_271) shares_164))"
"(begin"
"(if((lambda(ht_272)(hash? ht_272)) ht_271)"
"(void)"
"(let-values()(default-in-hash-keys ht_271)))"
"((letrec-values(((for-loop_273)"
"(lambda(fold-var_274 i_275)"
"(if i_275"
"(let-values(((obj_276)"
"(hash-iterate-key"
" ht_271"
" i_275)))"
"(if #t"
"(let-values(((fold-var_277)"
"(let-values(((fold-var_278)"
" fold-var_274))"
"(let-values(((fold-var_279)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_163"
" obj_276))"
" fold-var_278))))"
"(values"
" fold-var_279)))))"
"(if #t"
"(for-loop_273"
" fold-var_277"
"(hash-iterate-next"
" ht_271"
" i_275))"
" fold-var_277))"
" fold-var_274))"
" fold-var_274))))"
" for-loop_273)"
" null"
"(hash-iterate-first ht_271)))))))"
"(let-values(((lst_280)"
"(let-values(((share-steps18_282) share-steps_270)"
"((<19_283) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f share-steps18_282 <19_283)"
"(sort9.1 share-steps18_282 <19_283))))"
"((start_281) num-mutables_168))"
"(begin"
"(if(list? lst_280)(void)(let-values()(in-list lst_280)))"
"(if(exact-nonnegative-integer? start_281)"
"(void)"
"(let-values()(in-naturals start_281)))"
"((letrec-values(((for-loop_284)"
"(lambda(table_285 lst_286 pos_287)"
"(if(if(pair? lst_286) #t #f)"
"(let-values(((step_288)(unsafe-car lst_286))"
"((pos_289) pos_287))"
"(if(if #t #t #f)"
"(let-values(((table_290)"
"(let-values(((table_291)"
" table_285))"
"(let-values(((table_292)"
"(let-values()"
"(let-values(((key_293"
" val_294)"
"(let-values()"
"(values"
" step_288"
" pos_289))))"
"(hash-set"
" table_291"
" key_293"
" val_294)))))"
"(values table_292)))))"
"(if(if #t #t #f)"
"(for-loop_284"
" table_290"
"(unsafe-cdr lst_286)"
"(+ pos_287 1))"
" table_290))"
" table_285))"
" table_285))))"
" for-loop_284)"
" '#hasheqv()"
" lst_280"
" start_281))))))"
"(letrec-values(((ser_170)"
"(let-values(((ser11_295)"
"(lambda(v10_296 reference?8_297 reference?9_298)"
"(let-values(((v_299) v10_296))"
"(let-values(((reference?_300)"
"(if reference?9_298"
" reference?8_297"
" #f)))"
"(let-values()"
"(if(hash-ref shares_164 v_299 #f)"
"(let-values()"
"(let-values(((n_301)"
"(hash-ref"
" share-step-positions_169"
"(hash-ref objs_163 v_299))))"
"(if reference?_300"
" n_301"
"(box-immutable n_301))))"
"(let-values(((c53720_302)"
"(hash-ref"
" mutables_162"
" v_299"
" #f)))"
"(if c53720_302"
"((lambda(n_303)"
"(if reference?_300"
" n_303"
"(box-immutable n_303)))"
" c53720_302)"
"(let-values()"
"(do-ser_171 v_299)))))))))))"
"(case-lambda"
"((v_304)(ser11_295 v_304 #f #f))"
"((v_305 reference?8_306)(ser11_295 v_305 reference?8_306 #t)))))"
"((do-ser_171)"
"(lambda(v_307)"
"(if(1/module-path-index? v_307)"
"(let-values()"
"(list* 'mpi(add-module-path-index!/pos mpis_158 v_307)))"
"(if(serialize? v_307)"
"(let-values()((serialize-ref v_307) v_307 ser_170 state_161))"
"(if(pair? v_307)"
"(let-values()"
"(let-values(((a_308)(ser_170(car v_307))))"
"(let-values(((d_309)(ser_170(cdr v_307))))"
"(if(if(quoted?$1 a_308)(quoted?$1 d_309) #f)"
"(let-values()(quoted v_307))"
"(if(if(pair? d_309)(eq? 'list(car d_309)) #f)"
"(let-values()"
"(if(symbol? a_308)"
"(list* 'list a_308(cdr d_309))"
"(cons a_308(cdr d_309))))"
"(if(if(pair? d_309)"
"(not(symbol?(car d_309)))"
" #f)"
"(let-values()"
"(if(symbol? a_308)"
"(list* 'list a_308 d_309)"
"(cons a_308 d_309)))"
"(if(if(pair? d_309)"
"(if(eq? 'quote(car d_309))"
"(eq? '()(cdr d_309))"
" #f)"
" #f)"
"(let-values()"
"(if(symbol? a_308)"
"(list 'list a_308)"
"(list a_308)))"
"(let-values()(list 'cons a_308 d_309)))))))))"
"(if(null? v_307)"
"(let-values()(quoted '()))"
"(if(box? v_307)"
"(let-values()"
"(let-values(((content_310)(ser_170(unbox v_307))))"
"(if(quoted?$1 content_310)"
"(quoted v_307)"
"(list* 'box-immutable content_310))))"
"(if(vector? v_307)"
"(let-values()"
"(let-values(((content_311)"
"(alt-reverse"
"(let-values(((vec_312 len_313)"
"(let-values(((vec_314)"
" v_307))"
"(begin"
"(if(vector?"
" vec_314)"
"(void)"
"(let-values()"
"(in-vector"
" vec_314)))"
"(values"
" vec_314"
"(unsafe-vector-length"
" vec_314))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_315)"
"(lambda(fold-var_316"
" pos_317)"
"(if(unsafe-fx<"
" pos_317"
" len_313)"
"(let-values(((e_318)"
"(unsafe-vector-ref"
" vec_312"
" pos_317)))"
"(if #t"
"(let-values(((fold-var_319)"
"(let-values(((fold-var_320)"
" fold-var_316))"
"(let-values(((fold-var_321)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" e_318))"
" fold-var_320))))"
"(values"
" fold-var_321)))))"
"(if #t"
"(for-loop_315"
" fold-var_319"
"(unsafe-fx+"
" 1"
" pos_317))"
" fold-var_319))"
" fold-var_316))"
" fold-var_316))))"
" for-loop_315)"
" null"
" 0))))))"
"(if(andmap2 quoted?$1 content_311)"
"(quoted v_307)"
"(cons"
" 'vector-immutable"
"(list->vector content_311)))))"
"(if(hash? v_307)"
"(let-values()"
"(let-values(((k-content_322)"
"(alt-reverse"
"(let-values(((ht_324) v_307))"
"(begin"
"(if((lambda(ht_325)"
"(hash? ht_325))"
" ht_324)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_324)))"
"((letrec-values(((for-loop_326)"
"(lambda(fold-var_327"
" i_328)"
"(if i_328"
"(let-values(((k_329)"
"(hash-iterate-key"
" ht_324"
" i_328)))"
"(if #t"
"(let-values(((fold-var_330)"
"(let-values(((fold-var_331)"
" fold-var_327))"
"(let-values(((fold-var_332)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" k_329))"
" fold-var_331))))"
"(values"
" fold-var_332)))))"
"(if #t"
"(for-loop_326"
" fold-var_330"
"(hash-iterate-next"
" ht_324"
" i_328))"
" fold-var_330))"
" fold-var_327))"
" fold-var_327))))"
" for-loop_326)"
" null"
"(hash-iterate-first"
" ht_324)))))))"
"(let-values(((v-content_323)"
"(alt-reverse"
"(let-values(((ht_333) v_307))"
"(begin"
"(if((lambda(ht_334)"
"(hash? ht_334))"
" ht_333)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_333)))"
"((letrec-values(((for-loop_335)"
"(lambda(fold-var_336"
" i_337)"
"(if i_337"
"(let-values(((v_338)"
"(hash-iterate-value"
" ht_333"
" i_337)))"
"(if #t"
"(let-values(((fold-var_339)"
"(let-values(((fold-var_340)"
" fold-var_336))"
"(let-values(((fold-var_341)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" v_338))"
" fold-var_340))))"
"(values"
" fold-var_341)))))"
"(if #t"
"(for-loop_335"
" fold-var_339"
"(hash-iterate-next"
" ht_333"
" i_337))"
" fold-var_339))"
" fold-var_336))"
" fold-var_336))))"
" for-loop_335)"
" null"
"(hash-iterate-first"
" ht_333)))))))"
"(if(if(andmap2 quoted?$1 k-content_322)"
"(andmap2 quoted?$1 v-content_323)"
" #f)"
"(let-values()(quoted v_307))"
"(if(let-values(((lst_342) v-content_323))"
"(begin"
"(if(list? lst_342)"
"(void)"
"(let-values()(in-list lst_342)))"
"((letrec-values(((for-loop_343)"
"(lambda(result_344"
" lst_345)"
"(if(pair?"
" lst_345)"
"(let-values(((v_346)"
"(unsafe-car"
" lst_345)))"
"(if #t"
"(let-values(((result_347)"
"(let-values(((result_348)"
" result_344))"
"(let-values(((result_349)"
"(let-values()"
"(let-values()"
"(eq?"
" v_346"
" #t)))))"
"(values"
" result_349)))))"
"(if(if #t"
"(not"
"((lambda x_350"
"(not"
" result_347))"
" v_346))"
" #f)"
"(for-loop_343"
" result_347"
"(unsafe-cdr"
" lst_345))"
" result_347))"
" result_344))"
" result_344))))"
" for-loop_343)"
" #t"
" lst_342)))"
"(let-values()"
"(list*"
"(if(hash-eq? v_307)"
"(let-values() 'seteq)"
"(if(hash-eqv? v_307)"
"(let-values() 'seteqv)"
"(let-values() 'set)))"
"(list->vector k-content_322)))"
"(let-values()"
"(list"
"(if(hash-eq? v_307)"
"(let-values() 'hasheq)"
"(if(hash-eqv? v_307)"
"(let-values() 'hasheqv)"
"(let-values() 'hash)))"
"(list->vector k-content_322)"
"(list->vector v-content_323))))))))"
"(let-values(((c53721_351)"
"(prefab-struct-key v_307)))"
"(if c53721_351"
"((lambda(k_352)"
"(let-values(((content_353)"
"(alt-reverse"
"(let-values(((v*_354"
" start*_355"
" stop*_356"
" step*_357)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                        \"vector\""
"(lambda(x_358)"
"(vector?"
" x_358))"
"(lambda(x_359)"
"(unsafe-vector-length"
" x_359))"
"(struct->vector"
" v_307)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_360)"
"(lambda(fold-var_361"
" idx_362)"
"(if(unsafe-fx<"
" idx_362"
" stop*_356)"
"(let-values(((e_363)"
"(unsafe-vector-ref"
" v*_354"
" idx_362)))"
"(if #t"
"(let-values(((fold-var_364)"
"(let-values(((fold-var_365)"
" fold-var_361))"
"(let-values(((fold-var_366)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" e_363))"
" fold-var_365))))"
"(values"
" fold-var_366)))))"
"(if #t"
"(for-loop_360"
" fold-var_364"
"(unsafe-fx+"
" idx_362"
" 1))"
" fold-var_364))"
" fold-var_361))"
" fold-var_361))))"
" for-loop_360)"
" null"
" start*_355))))))"
"(if(andmap2 quoted?$1 content_353)"
"(quoted v_307)"
"(list*"
" 'make-prefab-struct"
" k_352"
" content_353))))"
" c53721_351)"
"(if(srcloc? v_307)"
"(let-values()"
"(let-values(((len_367) 6))"
"(begin"
"(if(exact-nonnegative-integer? len_367)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                                    \"exact-nonnegative-integer?\""
" len_367)))"
"(let-values(((v_368)"
"(make-vector len_367 0)))"
"(begin"
"(if(zero? len_367)"
"(void)"
"(let-values()"
"(let-values(((vec_369 len_370)"
"(let-values(((vec_372)"
"(struct->vector"
" v_307)))"
"(begin"
"(if(vector?"
" vec_372)"
"(void)"
"(let-values()"
"(in-vector"
" vec_372)))"
"(values"
" vec_372"
"(unsafe-vector-length"
" vec_372)))))"
"((start_371) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer?"
" start_371)"
"(void)"
"(let-values()"
"(in-naturals start_371)))"
"((letrec-values(((for-loop_373)"
"(lambda(i_374"
" pos_375"
" pos_376)"
"(if(if(unsafe-fx<"
" pos_375"
" len_370)"
" #t"
" #f)"
"(let-values(((e_377)"
"(unsafe-vector-ref"
" vec_369"
" pos_375))"
"((i_378)"
" pos_376))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((i_379)"
"(let-values(((i_380)"
" i_374))"
"(let-values(((i_381)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_368"
" i_380"
"(let-values()"
"(if(zero?"
" i_378)"
" #t"
"(ser_170"
" e_377))))"
"(unsafe-fx+"
" 1"
" i_380)))))"
"(values"
" i_381)))))"
"(if(if(if #t"
"(not"
"((lambda x_382"
"(unsafe-fx="
" i_379"
" len_367))"
" e_377))"
" #f)"
" #t"
" #f)"
"(for-loop_373"
" i_379"
"(unsafe-fx+"
" 1"
" pos_375)"
"(+"
" pos_376"
" 1))"
" i_379))"
" i_374))"
" i_374))))"
" for-loop_373)"
" 0"
" 0"
" start_371)))))"
" v_368)))))"
"(let-values()(quoted v_307)))))))))))))))"
"(let-values(((ser-shell_172)"
"(lambda(v_383)"
"(if(serialize-fill!? v_383)"
"(let-values()((serialize-ref v_383) v_383 ser_170 state_161))"
"(if(box? v_383)"
"(let-values() 'box)"
"(if(vector? v_383)"
"(let-values()(vector-length v_383))"
"(if(hash? v_383)"
"(let-values()"
"(if(hash-eq? v_383)"
"(let-values() 'hasheq)"
"(if(hash-eqv? v_383)"
"(let-values() 'hasheqv)"
"(let-values() 'hash))))"
"(let-values()"
"                                                              (error 'ser-shell \"unknown mutable: ~e\" v_383)))))))))"
"(let-values(((ser-shell-fill_173)"
"(lambda(v_384)"
"(if(serialize-fill!? v_384)"
"(let-values()"
"((serialize-fill!-ref v_384) v_384 ser_170 state_161))"
"(if(box? v_384)"
"(let-values()(list 'set-box!(ser_170(unbox v_384))))"
"(if(vector? v_384)"
"(let-values()"
"(list"
" 'set-vector!"
"(list->vector"
"(alt-reverse"
"(let-values(((vec_385 len_386)"
"(let-values(((vec_387) v_384))"
"(begin"
"(if(vector? vec_387)"
"(void)"
"(let-values()"
"(in-vector vec_387)))"
"(values"
" vec_387"
"(unsafe-vector-length vec_387))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_388)"
"(lambda(fold-var_389 pos_390)"
"(if(unsafe-fx<"
" pos_390"
" len_386)"
"(let-values(((v_391)"
"(unsafe-vector-ref"
" vec_385"
" pos_390)))"
"(if #t"
"(let-values(((fold-var_392)"
"(let-values(((fold-var_393)"
" fold-var_389))"
"(let-values(((fold-var_394)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" v_391))"
" fold-var_393))))"
"(values"
" fold-var_394)))))"
"(if #t"
"(for-loop_388"
" fold-var_392"
"(unsafe-fx+"
" 1"
" pos_390))"
" fold-var_392))"
" fold-var_389))"
" fold-var_389))))"
" for-loop_388)"
" null"
" 0)))))))"
"(if(hash? v_384)"
"(let-values()"
"(list"
" 'hash-set!"
"(list->vector"
"(alt-reverse"
"(let-values(((ht_395) v_384))"
"(begin"
"(if((lambda(ht_396)(hash? ht_396)) ht_395)"
"(void)"
"(let-values()(default-in-hash-keys ht_395)))"
"((letrec-values(((for-loop_397)"
"(lambda(fold-var_398 i_399)"
"(if i_399"
"(let-values(((k_400)"
"(hash-iterate-key"
" ht_395"
" i_399)))"
"(if #t"
"(let-values(((fold-var_401)"
"(let-values(((fold-var_402)"
" fold-var_398))"
"(let-values(((fold-var_403)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" k_400))"
" fold-var_402))))"
"(values"
" fold-var_403)))))"
"(if #t"
"(for-loop_397"
" fold-var_401"
"(hash-iterate-next"
" ht_395"
" i_399))"
" fold-var_401))"
" fold-var_398))"
" fold-var_398))))"
" for-loop_397)"
" null"
"(hash-iterate-first ht_395))))))"
"(list->vector"
"(alt-reverse"
"(let-values(((ht_404) v_384))"
"(begin"
"(if((lambda(ht_405)(hash? ht_405)) ht_404)"
"(void)"
"(let-values()"
"(default-in-hash-values ht_404)))"
"((letrec-values(((for-loop_406)"
"(lambda(fold-var_407 i_408)"
"(if i_408"
"(let-values(((v_409)"
"(hash-iterate-value"
" ht_404"
" i_408)))"
"(if #t"
"(let-values(((fold-var_410)"
"(let-values(((fold-var_411)"
" fold-var_407))"
"(let-values(((fold-var_412)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_170"
" v_409))"
" fold-var_411))))"
"(values"
" fold-var_412)))))"
"(if #t"
"(for-loop_406"
" fold-var_410"
"(hash-iterate-next"
" ht_404"
" i_408))"
" fold-var_410))"
" fold-var_407))"
" fold-var_407))))"
" for-loop_406)"
" null"
"(hash-iterate-first ht_404))))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                 \"unknown mutable: ~e\""
" v_384)))))))))"
"(let-values(((rev-mutables_174)"
"(let-values(((ht_413) mutables_162))"
"(begin"
"(if((lambda(ht_414)(hash? ht_414)) ht_413)"
"(void)"
"(let-values()(default-in-hash ht_413)))"
"((letrec-values(((for-loop_415)"
"(lambda(table_416 i_417)"
"(if i_417"
"(let-values(((k_418 v_419)"
"(hash-iterate-key+value"
" ht_413"
" i_417)))"
"(if #t"
"(let-values(((table_420)"
"(let-values(((table_421)"
" table_416))"
"(let-values(((table_422)"
"(let-values()"
"(let-values(((key_423"
" val_424)"
"(let-values()"
"(values"
" v_419"
" k_418))))"
"(hash-set"
" table_421"
" key_423"
" val_424)))))"
"(values"
" table_422)))))"
"(if #t"
"(for-loop_415"
" table_420"
"(hash-iterate-next"
" ht_413"
" i_417))"
" table_420))"
" table_416))"
" table_416))))"
" for-loop_415)"
" '#hasheqv()"
"(hash-iterate-first ht_413))))))"
"(let-values(((mutable-shell-bindings_175)"
"(let-values(((len_425)(hash-count mutables_162)))"
"(begin"
"(if(exact-nonnegative-integer? len_425)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                 \"exact-nonnegative-integer?\""
" len_425)))"
"(let-values(((v_426)(make-vector len_425 0)))"
"(begin"
"(if(zero? len_425)"
"(void)"
"(let-values()"
"(let-values(((start_427) 0)"
"((end_428)(hash-count mutables_162))"
"((inc_429) 1))"
"(begin"
"(if(if(real? start_427)"
"(if(real? end_428)(real? inc_429) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_427 end_428 inc_429)))"
"((letrec-values(((for-loop_430)"
"(lambda(i_431 pos_432)"
"(if(< pos_432 end_428)"
"(let-values(((i_433)"
" pos_432))"
"(if #t"
"(let-values(((i_434)"
"(let-values(((i_435)"
" i_431))"
"(let-values(((i_436)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_426"
" i_435"
"(let-values()"
"(ser-shell_172"
"(hash-ref"
" rev-mutables_174"
" i_433))))"
"(unsafe-fx+"
" 1"
" i_435)))))"
"(values"
" i_436)))))"
"(if(if #t"
"(not"
"((lambda x_437"
"(unsafe-fx="
" i_434"
" len_425))"
" i_433))"
" #f)"
"(for-loop_430"
" i_434"
"(+"
" pos_432"
" inc_429))"
" i_434))"
" i_431))"
" i_431))))"
" for-loop_430)"
" 0"
" start_427)))))"
" v_426))))))"
"(let-values(((rev-shares_176)"
"(let-values(((ht_438) shares_164))"
"(begin"
"(if((lambda(ht_439)(hash? ht_439)) ht_438)"
"(void)"
"(let-values()(default-in-hash-keys ht_438)))"
"((letrec-values(((for-loop_440)"
"(lambda(table_441 i_442)"
"(if i_442"
"(let-values(((obj_443)"
"(hash-iterate-key"
" ht_438"
" i_442)))"
"(if #t"
"(let-values(((table_444)"
"(let-values(((table_445)"
" table_441))"
"(let-values(((table_446)"
"(let-values()"
"(let-values(((key_447"
" val_448)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_169"
"(hash-ref"
" objs_163"
" obj_443))"
" obj_443))))"
"(hash-set"
" table_445"
" key_447"
" val_448)))))"
"(values"
" table_446)))))"
"(if #t"
"(for-loop_440"
" table_444"
"(hash-iterate-next"
" ht_438"
" i_442))"
" table_444))"
" table_441))"
" table_441))))"
" for-loop_440)"
" '#hasheqv()"
"(hash-iterate-first ht_438))))))"
"(let-values(((shared-bindings_177)"
"(let-values(((len_449)(hash-count shares_164)))"
"(begin"
"(if(exact-nonnegative-integer? len_449)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                     \"exact-nonnegative-integer?\""
" len_449)))"
"(let-values(((v_450)(make-vector len_449 0)))"
"(begin"
"(if(zero? len_449)"
"(void)"
"(let-values()"
"(let-values(((start_451) num-mutables_168)"
"((end_452)"
"(+"
" num-mutables_168"
"(hash-count shares_164)))"
"((inc_453) 1))"
"(begin"
"(if(if(real? start_451)"
"(if(real? end_452)"
"(real? inc_453)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_451 end_452 inc_453)))"
"((letrec-values(((for-loop_454)"
"(lambda(i_455 pos_456)"
"(if(< pos_456 end_452)"
"(let-values(((i_457)"
" pos_456))"
"(if #t"
"(let-values(((i_458)"
"(let-values(((i_459)"
" i_455))"
"(let-values(((i_460)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_450"
" i_459"
"(let-values()"
"(do-ser_171"
"(hash-ref"
" rev-shares_176"
" i_457))))"
"(unsafe-fx+"
" 1"
" i_459)))))"
"(values"
" i_460)))))"
"(if(if #t"
"(not"
"((lambda x_461"
"(unsafe-fx="
" i_458"
" len_449))"
" i_457))"
" #f)"
"(for-loop_454"
" i_458"
"(+"
" pos_456"
" inc_453))"
" i_458))"
" i_455))"
" i_455))))"
" for-loop_454)"
" 0"
" start_451)))))"
" v_450))))))"
"(let-values(((mutable-fills_178)"
"(let-values(((len_462)(hash-count mutables_162)))"
"(begin"
"(if(exact-nonnegative-integer? len_462)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                       \"exact-nonnegative-integer?\""
" len_462)))"
"(let-values(((v_463)(make-vector len_462 0)))"
"(begin"
"(if(zero? len_462)"
"(void)"
"(let-values()"
"(let-values(((start_464) 0)"
"((end_465)"
"(hash-count mutables_162))"
"((inc_466) 1))"
"(begin"
"(if(if(real? start_464)"
"(if(real? end_465)"
"(real? inc_466)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_464 end_465 inc_466)))"
"((letrec-values(((for-loop_467)"
"(lambda(i_468 pos_469)"
"(if(<"
" pos_469"
" end_465)"
"(let-values(((i_470)"
" pos_469))"
"(if #t"
"(let-values(((i_471)"
"(let-values(((i_472)"
" i_468))"
"(let-values(((i_473)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_463"
" i_472"
"(let-values()"
"(ser-shell-fill_173"
"(hash-ref"
" rev-mutables_174"
" i_470))))"
"(unsafe-fx+"
" 1"
" i_472)))))"
"(values"
" i_473)))))"
"(if(if #t"
"(not"
"((lambda x_474"
"(unsafe-fx="
" i_471"
" len_462))"
" i_470))"
" #f)"
"(for-loop_467"
" i_471"
"(+"
" pos_469"
" inc_466))"
" i_471))"
" i_468))"
" i_468))))"
" for-loop_467)"
" 0"
" start_464)))))"
" v_463))))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_159 inspector-id #f)"
"(if syntax-support?_159 bulk-binding-registry-id #f)"
"(list 'quote mutable-shell-bindings_175)"
"(list 'quote shared-bindings_177)"
"(list 'quote mutable-fills_178)"
"(list 'quote(ser_170 v_157))))))))))))))))))))))))))))"
"(define-values"
"(unpack6.1$1)"
"(lambda(given-kws_475 given-args_476 v3_477 mpis4_478)"
"(let-values(((syntax-support?2_479)(pair? given-kws_475)))"
"(let-values(((syntax-support?1_480)(if syntax-support?2_479(car given-args_476)(void))))"
"(generate-deserialize5.1 syntax-support?1_480 syntax-support?2_479 v3_477 mpis4_478)))))"
"(define-values"
"(generate-deserialize7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_481 given-argc_482)"
"(if(= given-argc_482 4)"
"(let-values(((l1_483) given-kws_481))"
"(let-values(((l1_484)"
"(if(null? l1_483) l1_483(if(eq?(car l1_483) '#:syntax-support?)(cdr l1_483) l1_483))))"
"(null? l1_484)))"
" #f))"
"(case-lambda"
"((given-kws_485 given-args_486 v_487 mpis_488)(unpack6.1$1 given-kws_485 given-args_486 v_487 mpis_488)))"
" null"
" '(#:syntax-support?)"
"(let-values(((generate-deserialize_489)(case-lambda((v_490 mpis_491)(unpack6.1$1 null null v_490 mpis_491)))))"
" generate-deserialize_489)))"
"(define-values"
"(quoted?$1)"
"(lambda(v_492)"
"(let-values(((or-part_493)(number? v_492)))"
"(if or-part_493"
" or-part_493"
"(let-values(((or-part_494)(boolean? v_492)))"
"(if or-part_494"
" or-part_494"
"(let-values(((or-part_495)(symbol? v_492)))"
"(if or-part_495 or-part_495(if(pair? v_492)(eq? 'quote(car v_492)) #f)))))))))"
"(define-values"
"(quoted)"
"(lambda(v_496)"
"(if(let-values(((or-part_497)(number? v_496)))"
"(if or-part_497"
" or-part_497"
"(let-values(((or-part_498)(boolean? v_496)))(if or-part_498 or-part_498(symbol? v_496)))))"
" v_496"
"(list* 'quote v_496))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_499"
" inspector_500"
" bulk-binding-registry_501"
" mutable-vec_502"
" shared-vec_503"
" mutable-fill-vec_504"
" result_505)"
"(let-values(((num-mutables_506)(vector-length mutable-vec_502)))"
"(let-values(((shared_507)(make-vector(+ num-mutables_506(vector-length shared-vec_503)) 'uninit)))"
"(begin"
"(let-values(((vec_508 len_509)"
"(let-values(((vec_511) mutable-vec_502))"
"(begin"
"(if(vector? vec_511)(void)(let-values()(in-vector vec_511)))"
"(values vec_511(unsafe-vector-length vec_511)))))"
"((start_510) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_510)(void)(let-values()(in-naturals start_510)))"
"((letrec-values(((for-loop_512)"
"(lambda(fold-var_513 pos_514 pos_515)"
"(if(if(unsafe-fx< pos_514 len_509) #t #f)"
"(let-values(((d_516)(unsafe-vector-ref vec_508 pos_514))((i_517) pos_515))"
"(if(if #t #t #f)"
"(let-values(((fold-var_518)"
"(let-values(((fold-var_519) fold-var_513))"
"(let-values(((fold-var_520)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" shared_507"
" i_517"
"(decode-shell"
" d_516"
" mpis_499"
" inspector_500"
" bulk-binding-registry_501"
" shared_507)))"
"(void)))))"
"(values fold-var_520)))))"
"(if(if #t #t #f)"
"(for-loop_512 fold-var_518(unsafe-fx+ 1 pos_514)(+ pos_515 1))"
" fold-var_518))"
" fold-var_513))"
" fold-var_513))))"
" for-loop_512)"
"(void)"
" 0"
" start_510)))"
"(let-values(((vec_521 len_522)"
"(let-values(((vec_524) shared-vec_503))"
"(begin"
"(if(vector? vec_524)(void)(let-values()(in-vector vec_524)))"
"(values vec_524(unsafe-vector-length vec_524)))))"
"((start_523) num-mutables_506))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_523)(void)(let-values()(in-naturals start_523)))"
"((letrec-values(((for-loop_525)"
"(lambda(fold-var_526 pos_527 pos_528)"
"(if(if(unsafe-fx< pos_527 len_522) #t #f)"
"(let-values(((d_529)(unsafe-vector-ref vec_521 pos_527))((i_530) pos_528))"
"(if(if #t #t #f)"
"(let-values(((fold-var_531)"
"(let-values(((fold-var_532) fold-var_526))"
"(let-values(((fold-var_533)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" shared_507"
" i_530"
"(decode"
" d_529"
" mpis_499"
" inspector_500"
" bulk-binding-registry_501"
" shared_507)))"
"(void)))))"
"(values fold-var_533)))))"
"(if(if #t #t #f)"
"(for-loop_525 fold-var_531(unsafe-fx+ 1 pos_527)(+ pos_528 1))"
" fold-var_531))"
" fold-var_526))"
" fold-var_526))))"
" for-loop_525)"
"(void)"
" 0"
" start_523)))"
"(let-values(((vec_534 len_535)"
"(let-values(((vec_539) mutable-fill-vec_504))"
"(begin"
"(if(vector? vec_539)(void)(let-values()(in-vector vec_539)))"
"(values vec_539(unsafe-vector-length vec_539)))))"
"((vec_536 len_537)"
"(let-values(((vec_540) shared_507))"
"(begin"
"(if(vector? vec_540)(void)(let-values()(in-vector vec_540)))"
"(values vec_540(unsafe-vector-length vec_540)))))"
"((start_538) 0))"
"(begin"
" #f"
" #f"
"(if(exact-nonnegative-integer? start_538)(void)(let-values()(in-naturals start_538)))"
"((letrec-values(((for-loop_541)"
"(lambda(fold-var_542 pos_543 pos_544 pos_545)"
"(if(if(unsafe-fx< pos_543 len_535)(if(unsafe-fx< pos_544 len_537) #t #f) #f)"
"(let-values(((d_546)(unsafe-vector-ref vec_534 pos_543))"
"((v_547)(unsafe-vector-ref vec_536 pos_544))"
"((i_548) pos_545))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_549)"
"(let-values(((fold-var_550) fold-var_542))"
"(let-values(((fold-var_551)"
"(let-values()"
"(begin"
"(let-values()"
"(decode-fill!"
" v_547"
" d_546"
" mpis_499"
" inspector_500"
" bulk-binding-registry_501"
" shared_507))"
"(void)))))"
"(values fold-var_551)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_541"
" fold-var_549"
"(unsafe-fx+ 1 pos_543)"
"(unsafe-fx+ 1 pos_544)"
"(+ pos_545 1))"
" fold-var_549))"
" fold-var_542))"
" fold-var_542))))"
" for-loop_541)"
"(void)"
" 0"
" 0"
" start_538)))"
"(decode result_505 mpis_499 inspector_500 bulk-binding-registry_501 shared_507))))))"
"(define-values"
"(decode-shell)"
"(lambda(d_552 mpis_553 inspector_554 bulk-binding-registry_555 shared_556)"
"(let-values(((tmp_557) d_552))"
"(if(equal? tmp_557 'box)"
"(let-values()(box #f))"
"(if(equal? tmp_557 'hash)"
"(let-values()(make-hasheq))"
"(if(equal? tmp_557 'hasheq)"
"(let-values()(make-hasheq))"
"(if(equal? tmp_557 'hasheqv)"
"(let-values()(make-hasheqv))"
"(let-values()"
"(if(exact-integer? d_552)"
"(let-values()(make-vector d_552))"
"(let-values()(decode d_552 mpis_553 inspector_554 bulk-binding-registry_555 shared_556)))))))))))"
"(define-values"
"(decode)"
"(lambda(d_558 mpis_559 inspector_560 bulk-binding-registry_561 shared_562)"
"((letrec-values(((decode_563)"
"(lambda(d_564)"
"(let-values(((decode-reference_600)"
"(lambda(v_601)"
"(if(number? v_601)(vector-ref shared_562 v_601)(decode_563 v_601)))))"
"(if(eq? d_564 '#:inspector)"
"(let-values() inspector_560)"
"(if(eq? d_564 '#:bulk-binding-registry)"
"(let-values() bulk-binding-registry_561)"
"(if(number? d_564)"
"(let-values() d_564)"
"(if(boolean? d_564)"
"(let-values() d_564)"
"(if(box? d_564)"
"(let-values()(vector-ref shared_562(unbox d_564)))"
"(if(symbol? d_564)"
"(let-values() d_564)"
"(if(vector? d_564)"
"(let-values()"
"(let-values(((tmp_602)(vector-length d_564)))"
"(if(equal? tmp_602 3)"
"(let-values()"
"(deserialize-syntax"
"(decode_563(vector-ref d_564 0))"
"(decode-reference_600(vector-ref d_564 1))"
"(decode-reference_600(vector-ref d_564 2))"
" #f"
" #f"
" inspector_560))"
"(if(equal? tmp_602 5)"
"(let-values()"
"(deserialize-syntax"
"(decode_563(vector-ref d_564 0))"
"(decode-reference_600(vector-ref d_564 1))"
"(decode-reference_600(vector-ref d_564 2))"
"(decode_563(vector-ref d_564 3))"
"(decode_563(vector-ref d_564 4))"
" inspector_560))"
"(if(equal? tmp_602 6)"
"(let-values()"
"(srcloc"
"(decode_563(vector-ref d_564 1))"
"(decode_563(vector-ref d_564 2))"
"(decode_563(vector-ref d_564 3))"
"(decode_563(vector-ref d_564 4))"
"(decode_563(vector-ref d_564 5))))"
"(if(equal? tmp_602 'else)"
"                                                    (let-values () (error 'deserialize \"bad encoding: ~e\" d_564))"
"(let-values()(void))))))))"
"(let-values()"
"(let-values(((tmp_603)(car d_564)))"
"(let-values(((index_604)"
"(if(symbol? tmp_603)"
"(hash-ref"
" '#hasheq((deserialize-bulk-binding-at . 18)"
"(set . 10)"
"(hash . 7)"
"(deserialize-simple-module-binding . 21)"
"(deserialize-multi-scope . 15)"
"(hasheqv . 9)"
"(seteqv . 12)"
"(deserialize-shifted-multi-scope . 16)"
"(box-immutable . 5)"
"(cons . 3)"
"(make-prefab-struct . 13)"
"(vector-immutable . 6)"
"(deserialize-scope . 14)"
"(quote . 1)"
"(deserialize-bulk-binding . 23)"
"(deserialize-table-with-bulk-bindings . 17)"
"(list . 4)"
"(deserialize-full-module-binding . 20)"
"(deserialize-representative-scope . 19)"
"(mpi . 2)"
"(hasheq . 8)"
"(deserialize-full-local-binding . 22)"
"(seteq . 11))"
" tmp_603"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_604 11)"
"(if(unsafe-fx< index_604 5)"
"(if(unsafe-fx< index_604 2)"
"(if(unsafe-fx< index_604 1)"
"(let-values()"
"(if(not(symbol?(car d_564)))"
"(alt-reverse"
"(let-values(((lst_605) d_564))"
"(begin"
"(if(list? lst_605)"
"(void)"
"(let-values()(in-list lst_605)))"
"((letrec-values(((for-loop_606)"
"(lambda(fold-var_607 lst_608)"
"(if(pair? lst_608)"
"(let-values(((d_609)"
"(unsafe-car"
" lst_608)))"
"(if #t"
"(let-values(((fold-var_610)"
"(let-values(((fold-var_611)"
" fold-var_607))"
"(let-values(((fold-var_612)"
"(let-values()"
"(cons"
"(let-values()"
"(decode_563"
" d_609))"
" fold-var_611))))"
"(values"
" fold-var_612)))))"
"(if #t"
"(for-loop_606"
" fold-var_610"
"(unsafe-cdr lst_608))"
" fold-var_610))"
" fold-var_607))"
" fold-var_607))))"
" for-loop_606)"
" null"
" lst_605))))"
"                                                          (error 'deserialize \"bad encoding: ~v\" d_564)))"
"(let-values()(cdr d_564)))"
"(if(unsafe-fx< index_604 3)"
"(let-values()(vector-ref mpis_559(cdr d_564)))"
"(if(unsafe-fx< index_604 4)"
"(let-values()"
"(cons(decode_563(cadr d_564))(decode_563(caddr d_564))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_613)(cdr d_564)))"
"(begin"
"(if(list? lst_613)"
"(void)"
"(let-values()(in-list lst_613)))"
"((letrec-values(((for-loop_614)"
"(lambda(fold-var_615 lst_616)"
"(if(pair? lst_616)"
"(let-values(((d_617)"
"(unsafe-car"
" lst_616)))"
"(if #t"
"(let-values(((fold-var_618)"
"(let-values(((fold-var_619)"
" fold-var_615))"
"(let-values(((fold-var_620)"
"(let-values()"
"(cons"
"(let-values()"
"(decode_563"
" d_617))"
" fold-var_619))))"
"(values"
" fold-var_620)))))"
"(if #t"
"(for-loop_614"
" fold-var_618"
"(unsafe-cdr lst_616))"
" fold-var_618))"
" fold-var_615))"
" fold-var_615))))"
" for-loop_614)"
" null"
" lst_613))))))))"
"(if(unsafe-fx< index_604 7)"
"(if(unsafe-fx< index_604 6)"
"(let-values()(box-immutable(decode_563(cdr d_564))))"
"(let-values()"
"(vector->immutable-vector"
"(let-values(((len_621)(vector-length(cdr d_564))))"
"(begin"
"(if(exact-nonnegative-integer? len_621)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                  \"exact-nonnegative-integer?\""
" len_621)))"
"(let-values(((v_622)(make-vector len_621 0)))"
"(begin"
"(if(zero? len_621)"
"(void)"
"(let-values()"
"(let-values(((vec_623 len_624)"
"(let-values(((vec_625)(cdr d_564)))"
"(begin"
"(if(vector? vec_625)"
"(void)"
"(let-values()"
"(in-vector vec_625)))"
"(values"
" vec_625"
"(unsafe-vector-length"
" vec_625))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_626)"
"(lambda(i_627 pos_628)"
"(if(unsafe-fx<"
" pos_628"
" len_624)"
"(let-values(((d_629)"
"(unsafe-vector-ref"
" vec_623"
" pos_628)))"
"(if #t"
"(let-values(((i_630)"
"(let-values(((i_631)"
" i_627))"
"(let-values(((i_632)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_622"
" i_631"
"(let-values()"
"(decode_563"
" d_629)))"
"(unsafe-fx+"
" 1"
" i_631)))))"
"(values"
" i_632)))))"
"(if(if #t"
"(not"
"((lambda x_633"
"(unsafe-fx="
" i_630"
" len_621))"
" d_629))"
" #f)"
"(for-loop_626"
" i_630"
"(unsafe-fx+"
" 1"
" pos_628))"
" i_630))"
" i_627))"
" i_627))))"
" for-loop_626)"
" 0"
" 0)))))"
" v_622)))))))"
"(if(unsafe-fx< index_604 8)"
"(let-values()"
"(let-values(((vec_634 len_635)"
"(let-values(((vec_638)(cadr d_564)))"
"(begin"
"(if(vector? vec_638)"
"(void)"
"(let-values()(in-vector vec_638)))"
"(values"
" vec_638"
"(unsafe-vector-length vec_638)))))"
"((vec_636 len_637)"
"(let-values(((vec_639)(caddr d_564)))"
"(begin"
"(if(vector? vec_639)"
"(void)"
"(let-values()(in-vector vec_639)))"
"(values"
" vec_639"
"(unsafe-vector-length vec_639))))))"
"(begin"
" #f"
" #f"
"((letrec-values(((for-loop_640)"
"(lambda(table_641 pos_642 pos_643)"
"(if(if(unsafe-fx< pos_642 len_635)"
"(unsafe-fx< pos_643 len_637)"
" #f)"
"(let-values(((k_644)"
"(unsafe-vector-ref"
" vec_634"
" pos_642))"
"((v_645)"
"(unsafe-vector-ref"
" vec_636"
" pos_643)))"
"(if(if #t #t #f)"
"(let-values(((table_646)"
"(let-values(((table_647)"
" table_641))"
"(let-values(((table_648)"
"(let-values()"
"(let-values(((key_649"
" val_650)"
"(let-values()"
"(values"
"(decode_563"
" k_644)"
"(decode_563"
" v_645)))))"
"(hash-set"
" table_647"
" key_649"
" val_650)))))"
"(values"
" table_648)))))"
"(if(if #t #t #f)"
"(for-loop_640"
" table_646"
"(unsafe-fx+ 1 pos_642)"
"(unsafe-fx+ 1 pos_643))"
" table_646))"
" table_641))"
" table_641))))"
" for-loop_640)"
" '#hash()"
" 0"
" 0))))"
"(if(unsafe-fx< index_604 9)"
"(let-values()"
"(let-values(((vec_651 len_652)"
"(let-values(((vec_655)(cadr d_564)))"
"(begin"
"(if(vector? vec_655)"
"(void)"
"(let-values()(in-vector vec_655)))"
"(values"
" vec_655"
"(unsafe-vector-length vec_655)))))"
"((vec_653 len_654)"
"(let-values(((vec_656)(caddr d_564)))"
"(begin"
"(if(vector? vec_656)"
"(void)"
"(let-values()(in-vector vec_656)))"
"(values"
" vec_656"
"(unsafe-vector-length vec_656))))))"
"(begin"
" #f"
" #f"
"((letrec-values(((for-loop_657)"
"(lambda(table_658 pos_659 pos_660)"
"(if(if(unsafe-fx< pos_659 len_652)"
"(unsafe-fx< pos_660 len_654)"
" #f)"
"(let-values(((k_661)"
"(unsafe-vector-ref"
" vec_651"
" pos_659))"
"((v_662)"
"(unsafe-vector-ref"
" vec_653"
" pos_660)))"
"(if(if #t #t #f)"
"(let-values(((table_663)"
"(let-values(((table_664)"
" table_658))"
"(let-values(((table_665)"
"(let-values()"
"(let-values(((key_666"
" val_667)"
"(let-values()"
"(values"
"(decode_563"
" k_661)"
"(decode_563"
" v_662)))))"
"(hash-set"
" table_664"
" key_666"
" val_667)))))"
"(values"
" table_665)))))"
"(if(if #t #t #f)"
"(for-loop_657"
" table_663"
"(unsafe-fx+ 1 pos_659)"
"(unsafe-fx+ 1 pos_660))"
" table_663))"
" table_658))"
" table_658))))"
" for-loop_657)"
" '#hasheq()"
" 0"
" 0))))"
"(if(unsafe-fx< index_604 10)"
"(let-values()"
"(let-values(((vec_668 len_669)"
"(let-values(((vec_672)(cadr d_564)))"
"(begin"
"(if(vector? vec_672)"
"(void)"
"(let-values()(in-vector vec_672)))"
"(values"
" vec_672"
"(unsafe-vector-length vec_672)))))"
"((vec_670 len_671)"
"(let-values(((vec_673)(caddr d_564)))"
"(begin"
"(if(vector? vec_673)"
"(void)"
"(let-values()(in-vector vec_673)))"
"(values"
" vec_673"
"(unsafe-vector-length vec_673))))))"
"(begin"
" #f"
" #f"
"((letrec-values(((for-loop_674)"
"(lambda(table_675 pos_676 pos_677)"
"(if(if(unsafe-fx< pos_676 len_669)"
"(unsafe-fx< pos_677 len_671)"
" #f)"
"(let-values(((k_678)"
"(unsafe-vector-ref"
" vec_668"
" pos_676))"
"((v_679)"
"(unsafe-vector-ref"
" vec_670"
" pos_677)))"
"(if(if #t #t #f)"
"(let-values(((table_680)"
"(let-values(((table_681)"
" table_675))"
"(let-values(((table_682)"
"(let-values()"
"(let-values(((key_683"
" val_684)"
"(let-values()"
"(values"
"(decode_563"
" k_678)"
"(decode_563"
" v_679)))))"
"(hash-set"
" table_681"
" key_683"
" val_684)))))"
"(values"
" table_682)))))"
"(if(if #t #t #f)"
"(for-loop_674"
" table_680"
"(unsafe-fx+ 1 pos_676)"
"(unsafe-fx+ 1 pos_677))"
" table_680))"
" table_675))"
" table_675))))"
" for-loop_674)"
" '#hasheqv()"
" 0"
" 0))))"
"(let-values()"
"(let-values(((vec_685 len_686)"
"(let-values(((vec_687)(cdr d_564)))"
"(begin"
"(if(vector? vec_687)"
"(void)"
"(let-values()(in-vector vec_687)))"
"(values"
" vec_687"
"(unsafe-vector-length vec_687))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_688)"
"(lambda(table_689 pos_690)"
"(if(unsafe-fx< pos_690 len_686)"
"(let-values(((k_691)"
"(unsafe-vector-ref"
" vec_685"
" pos_690)))"
"(if #t"
"(let-values(((table_692)"
"(let-values(((table_693)"
" table_689))"
"(let-values(((table_694)"
"(let-values()"
"(let-values(((key_695"
" val_696)"
"(let-values()"
"(values"
"(let-values()"
"(decode_563"
" k_691))"
" #t))))"
"(hash-set"
" table_693"
" key_695"
" val_696)))))"
"(values"
" table_694)))))"
"(if #t"
"(for-loop_688"
" table_692"
"(unsafe-fx+ 1 pos_690))"
" table_692))"
" table_689))"
" table_689))))"
" for-loop_688)"
" '#hash()"
" 0)))))))))"
"(if(unsafe-fx< index_604 17)"
"(if(unsafe-fx< index_604 13)"
"(if(unsafe-fx< index_604 12)"
"(let-values()"
"(let-values(((vec_697 len_698)"
"(let-values(((vec_699)(cdr d_564)))"
"(begin"
"(if(vector? vec_699)"
"(void)"
"(let-values()(in-vector vec_699)))"
"(values"
" vec_699"
"(unsafe-vector-length vec_699))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_700)"
"(lambda(table_701 pos_702)"
"(if(unsafe-fx< pos_702 len_698)"
"(let-values(((k_703)"
"(unsafe-vector-ref"
" vec_697"
" pos_702)))"
"(if #t"
"(let-values(((table_704)"
"(let-values(((table_705)"
" table_701))"
"(let-values(((table_706)"
"(let-values()"
"(let-values(((key_707"
" val_708)"
"(let-values()"
"(values"
"(let-values()"
"(decode_563"
" k_703))"
" #t))))"
"(hash-set"
" table_705"
" key_707"
" val_708)))))"
"(values"
" table_706)))))"
"(if #t"
"(for-loop_700"
" table_704"
"(unsafe-fx+ 1 pos_702))"
" table_704))"
" table_701))"
" table_701))))"
" for-loop_700)"
" '#hasheq()"
" 0))))"
"(let-values()"
"(let-values(((vec_709 len_710)"
"(let-values(((vec_711)(cdr d_564)))"
"(begin"
"(if(vector? vec_711)"
"(void)"
"(let-values()(in-vector vec_711)))"
"(values"
" vec_711"
"(unsafe-vector-length vec_711))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_712)"
"(lambda(table_713 pos_714)"
"(if(unsafe-fx< pos_714 len_710)"
"(let-values(((k_715)"
"(unsafe-vector-ref"
" vec_709"
" pos_714)))"
"(if #t"
"(let-values(((table_716)"
"(let-values(((table_717)"
" table_713))"
"(let-values(((table_718)"
"(let-values()"
"(let-values(((key_719"
" val_720)"
"(let-values()"
"(values"
"(let-values()"
"(decode_563"
" k_715))"
" #t))))"
"(hash-set"
" table_717"
" key_719"
" val_720)))))"
"(values"
" table_718)))))"
"(if #t"
"(for-loop_712"
" table_716"
"(unsafe-fx+ 1 pos_714))"
" table_716))"
" table_713))"
" table_713))))"
" for-loop_712)"
" '#hasheqv()"
" 0)))))"
"(if(unsafe-fx< index_604 14)"
"(let-values()"
"(apply"
" make-prefab-struct"
"(cadr d_564)"
"(alt-reverse"
"(let-values(((lst_721)(cddr d_564)))"
"(begin"
"(if(list? lst_721)"
"(void)"
"(let-values()(in-list lst_721)))"
"((letrec-values(((for-loop_722)"
"(lambda(fold-var_723 lst_724)"
"(if(pair? lst_724)"
"(let-values(((d_725)"
"(unsafe-car lst_724)))"
"(if #t"
"(let-values(((fold-var_726)"
"(let-values(((fold-var_727)"
" fold-var_723))"
"(let-values(((fold-var_728)"
"(let-values()"
"(cons"
"(let-values()"
"(decode_563"
" d_725))"
" fold-var_727))))"
"(values"
" fold-var_728)))))"
"(if #t"
"(for-loop_722"
" fold-var_726"
"(unsafe-cdr lst_724))"
" fold-var_726))"
" fold-var_723))"
" fold-var_723))))"
" for-loop_722)"
" null"
" lst_721))))))"
"(if(unsafe-fx< index_604 15)"
"(let-values()"
"(if(null?(cdr d_564))"
"(deserialize-scope)"
"(deserialize-scope(cdr d_564))))"
"(if(unsafe-fx< index_604 16)"
"(let-values()"
"(deserialize-multi-scope"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))"
"(let-values()"
"(deserialize-shifted-multi-scope"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))))))"
"(if(unsafe-fx< index_604 20)"
"(if(unsafe-fx< index_604 18)"
"(let-values()"
"(deserialize-table-with-bulk-bindings"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))"
"(if(unsafe-fx< index_604 19)"
"(let-values()"
"(deserialize-bulk-binding-at"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))"
"(let-values()"
"(deserialize-representative-scope"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))))"
"(if(unsafe-fx< index_604 21)"
"(let-values()"
"(deserialize-full-module-binding"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))"
"(decode_563(list-ref d_564 3))"
"(decode_563(list-ref d_564 4))"
"(decode_563(list-ref d_564 5))"
"(decode_563(list-ref d_564 6))"
"(decode_563(list-ref d_564 7))"
"(decode_563(list-ref d_564 8))"
"(decode_563(list-ref d_564 9))))"
"(if(unsafe-fx< index_604 22)"
"(let-values()"
"(deserialize-simple-module-binding"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))"
"(decode_563(list-ref d_564 3))))"
"(if(unsafe-fx< index_604 23)"
"(let-values()"
"(deserialize-full-local-binding"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))))"
"(let-values()"
"(deserialize-bulk-binding"
"(decode_563(list-ref d_564 1))"
"(decode_563(list-ref d_564 2))"
"(decode_563(list-ref d_564 3))"
"(decode_563(list-ref d_564 4))))))))))))))))))))))))"
" decode_563)"
" d_558)))"
"(define-values"
"(decode-fill!)"
"(lambda(v_729 d_730 mpis_731 inspector_732 bulk-binding-registry_733 shared_734)"
"(if d_730"
"(let-values()"
"(let-values(((tmp_735)(car d_730)))"
"(if(equal? tmp_735 'set-box!)"
"(let-values()"
"(set-box! v_729(decode(cadr d_730) mpis_731 inspector_732 bulk-binding-registry_733 shared_734)))"
"(if(equal? tmp_735 'set-vector!)"
"(let-values()"
"(let-values(((vec_736 len_737)"
"(let-values(((vec_739)(cdr d_730)))"
"(begin"
"(if(vector? vec_739)(void)(let-values()(in-vector vec_739)))"
"(values vec_739(unsafe-vector-length vec_739)))))"
"((start_738) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_738)(void)(let-values()(in-naturals start_738)))"
"((letrec-values(((for-loop_740)"
"(lambda(fold-var_741 pos_742 pos_743)"
"(if(if(unsafe-fx< pos_742 len_737) #t #f)"
"(let-values(((vv_744)(unsafe-vector-ref vec_736 pos_742))((i_745) pos_743))"
"(if(if #t #t #f)"
"(let-values(((fold-var_746)"
"(let-values(((fold-var_747) fold-var_741))"
"(let-values(((fold-var_748)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" v_729"
" i_745"
"(decode"
" vv_744"
" mpis_731"
" inspector_732"
" bulk-binding-registry_733"
" shared_734)))"
"(void)))))"
"(values fold-var_748)))))"
"(if(if #t #t #f)"
"(for-loop_740 fold-var_746(unsafe-fx+ 1 pos_742)(+ pos_743 1))"
" fold-var_746))"
" fold-var_741))"
" fold-var_741))))"
" for-loop_740)"
"(void)"
" 0"
" start_738))))"
"(if(equal? tmp_735 'hash-set!)"
"(let-values()"
"(let-values(((vec_749 len_750)"
"(let-values(((vec_753)(cadr d_730)))"
"(begin"
"(if(vector? vec_753)(void)(let-values()(in-vector vec_753)))"
"(values vec_753(unsafe-vector-length vec_753)))))"
"((vec_751 len_752)"
"(let-values(((vec_754)(caddr d_730)))"
"(begin"
"(if(vector? vec_754)(void)(let-values()(in-vector vec_754)))"
"(values vec_754(unsafe-vector-length vec_754))))))"
"(begin"
" #f"
" #f"
"((letrec-values(((for-loop_755)"
"(lambda(fold-var_756 pos_757 pos_758)"
"(if(if(unsafe-fx< pos_757 len_750)(unsafe-fx< pos_758 len_752) #f)"
"(let-values(((hk_759)(unsafe-vector-ref vec_749 pos_757))"
"((hv_760)(unsafe-vector-ref vec_751 pos_758)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_761)"
"(let-values(((fold-var_762) fold-var_756))"
"(let-values(((fold-var_763)"
"(let-values()"
"(begin"
"(let-values()"
"(hash-set!"
" v_729"
"(decode"
" hk_759"
" mpis_731"
" inspector_732"
" bulk-binding-registry_733"
" shared_734)"
"(decode"
" hv_760"
" mpis_731"
" inspector_732"
" bulk-binding-registry_733"
" shared_734)))"
"(void)))))"
"(values fold-var_763)))))"
"(if(if #t #t #f)"
"(for-loop_755"
" fold-var_761"
"(unsafe-fx+ 1 pos_757)"
"(unsafe-fx+ 1 pos_758))"
" fold-var_761))"
" fold-var_756))"
" fold-var_756))))"
" for-loop_755)"
"(void)"
" 0"
" 0))))"
"(if(equal? tmp_735 'deserialize-scope-fill!)"
"(let-values()"
"(deserialize-scope-fill!"
" v_729"
"(decode(cadr d_730) mpis_731 inspector_732 bulk-binding-registry_733 shared_734)))"
"(if(equal? tmp_735 'deserialize-representative-scope-fill!)"
"(let-values()"
"(deserialize-representative-scope-fill!"
" v_729"
"(decode(cadr d_730) mpis_731 inspector_732 bulk-binding-registry_733 shared_734)"
"(decode(caddr d_730) mpis_731 inspector_732 bulk-binding-registry_733 shared_734)))"
"                    (let-values () (error 'deserialize \"bad fill encoding: ~v\" d_730)))))))))"
"(void))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_764)"
"(let-values(((seen_765)(make-hasheq)))"
"(let-values(((reachable-scopes_766)(seteq)))"
"(let-values(((scope-triggers_767)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_768)"
"(lambda(v_769)"
"(if(interned-literal? v_769)"
"(let-values()(void))"
"(if(hash-ref seen_765 v_769 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_765 v_769 #t)"
"(if(scope-with-bindings? v_769)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_766"
"(set-add reachable-scopes_766 v_769))"
"(values))))"
"(let-values((()"
"(begin((reach-scopes-ref v_769) v_769 loop_768)(values))))"
"(let-values(((l_770)(hash-ref scope-triggers_767 v_769 null)))"
"(begin"
"(let-values(((lst_771) l_770))"
"(begin"
"(if(list? lst_771)(void)(let-values()(in-list lst_771)))"
"((letrec-values(((for-loop_772)"
"(lambda(fold-var_773 lst_774)"
"(if(pair? lst_774)"
"(let-values(((v_775)"
"(unsafe-car lst_774)))"
"(if #t"
"(let-values(((fold-var_776)"
"(let-values(((fold-var_777)"
" fold-var_773))"
"(let-values(((fold-var_778)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_768"
" v_775))"
"(void)))))"
"(values"
" fold-var_778)))))"
"(if #t"
"(for-loop_772"
" fold-var_776"
"(unsafe-cdr lst_774))"
" fold-var_776))"
" fold-var_773))"
" fold-var_773))))"
" for-loop_772)"
"(void)"
" lst_771)))"
"((scope-with-bindings-ref v_769)"
" v_769"
" reachable-scopes_766"
" loop_768"
"(lambda(sc-unreachable_779 b_780)"
"(hash-update!"
" scope-triggers_767"
" sc-unreachable_779"
"(lambda(l_781)(cons b_780 l_781))"
" null))))))))"
"(if(reach-scopes? v_769)"
"(let-values()((reach-scopes-ref v_769) v_769 loop_768))"
"(if(pair? v_769)"
"(let-values()(begin(loop_768(car v_769))(loop_768(cdr v_769))))"
"(if(vector? v_769)"
"(let-values()"
"(let-values(((vec_782 len_783)"
"(let-values(((vec_784) v_769))"
"(begin"
"(if(vector? vec_784)"
"(void)"
"(let-values()(in-vector vec_784)))"
"(values vec_784(unsafe-vector-length vec_784))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_785)"
"(lambda(fold-var_786 pos_787)"
"(if(unsafe-fx< pos_787 len_783)"
"(let-values(((e_788)"
"(unsafe-vector-ref"
" vec_782"
" pos_787)))"
"(if #t"
"(let-values(((fold-var_789)"
"(let-values(((fold-var_790)"
" fold-var_786))"
"(let-values(((fold-var_791)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_768"
" e_788))"
"(void)))))"
"(values"
" fold-var_791)))))"
"(if #t"
"(for-loop_785"
" fold-var_789"
"(unsafe-fx+ 1 pos_787))"
" fold-var_789))"
" fold-var_786))"
" fold-var_786))))"
" for-loop_785)"
"(void)"
" 0))))"
"(if(box? v_769)"
"(let-values()(loop_768(unbox v_769)))"
"(if(hash? v_769)"
"(let-values()"
"(let-values(((ht_792) v_769))"
"(begin"
"(if((lambda(ht_793)(hash? ht_793)) ht_792)"
"(void)"
"(let-values()(default-in-hash ht_792)))"
"((letrec-values(((for-loop_794)"
"(lambda(fold-var_795 i_796)"
"(if i_796"
"(let-values(((k_797 v_798)"
"(hash-iterate-key+value"
" ht_792"
" i_796)))"
"(if #t"
"(let-values(((fold-var_799)"
"(let-values(((fold-var_800)"
" fold-var_795))"
"(let-values(((fold-var_801)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_768"
" k_797)"
"(loop_768"
" v_798)))"
"(void)))))"
"(values"
" fold-var_801)))))"
"(if #t"
"(for-loop_794"
" fold-var_799"
"(hash-iterate-next"
" ht_792"
" i_796))"
" fold-var_799))"
" fold-var_795))"
" fold-var_795))))"
" for-loop_794)"
"(void)"
"(hash-iterate-first ht_792)))))"
"(if(prefab-struct-key v_769)"
"(let-values()"
"(let-values(((v*_802 start*_803 stop*_804 step*_805)"
"(normalise-inputs"
" 'in-vector"
"                                                                       \"vector\""
"(lambda(x_806)(vector? x_806))"
"(lambda(x_807)(unsafe-vector-length x_807))"
"(struct->vector v_769)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_808)"
"(lambda(fold-var_809 idx_810)"
"(if(unsafe-fx< idx_810 stop*_804)"
"(let-values(((e_811)"
"(unsafe-vector-ref"
" v*_802"
" idx_810)))"
"(if #t"
"(let-values(((fold-var_812)"
"(let-values(((fold-var_813)"
" fold-var_809))"
"(let-values(((fold-var_814)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_768"
" e_811))"
"(void)))))"
"(values"
" fold-var_814)))))"
"(if #t"
"(for-loop_808"
" fold-var_812"
"(unsafe-fx+ idx_810 1))"
" fold-var_812))"
" fold-var_809))"
" fold-var_809))))"
" for-loop_808)"
"(void)"
" start*_803))))"
"(let-values()(void))))))))))))))))"
" loop_768)"
" v_764)"
" reachable-scopes_766))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-phase"
" compiled-in-memory-max-phase"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literalss"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_67 port_68 mode_69)(write(compiled-in-memory-linklet-directory cim_67) port_68))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'compiled-in-memory)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'max-phase)"
"(make-struct-field-accessor -ref_4 3 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 4 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 5 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 6 'mpis)"
"(make-struct-field-accessor -ref_4 7 'syntax-literalss)"
"(make-struct-field-accessor -ref_4 8 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 9 'post-compiled-in-memorys))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_1 original-scopes-s_2 new-ns_3)"
"(let-values(((old-scs-post_4 old-scs-other_5)(decode-namespace-scopes original-scopes-s_2)))"
"(let-values(((new-scs-post_6 new-scs-other_7)(extract-namespace-scopes new-ns_3)))"
"(syntax-swap-scopes(syntax-swap-scopes s_1 old-scs-post_4 new-scs-post_6) old-scs-other_5 new-scs-other_7)))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_8)"
"(let-values(((root-ctx_9)(namespace-get-root-expand-ctx ns_8)))"
"(let-values(((post-expansion-sc_10)(root-expand-context-post-expansion-scope root-ctx_9)))"
"(values"
"(seteq post-expansion-sc_10)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_9)) post-expansion-sc_10))))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_11)"
"(let-values(((post-expansion-scs_12 other-scs_13)(extract-namespace-scopes ns_11)))"
"(let-values(((post-expansion-s_14)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_12))))"
"(let-values(((other-s_15)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_13))))"
"(datum->syntax$1 #f(vector post-expansion-s_14 other-s_15)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_16)"
"(let-values(((vec_17)(syntax-e$1 stx_16)))"
"(values(syntax-scope-set(vector-ref vec_17 0) 0)(syntax-scope-set(vector-ref vec_17 1) 0)))))"
"(define-values"
"(struct:header"
" header1.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" header-num-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!"
" set-header-num-syntax-literals!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'header #f 9 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_4 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_4 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_4 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_4 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_4 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_4 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_4 7 'syntax-literals)"
"(make-struct-field-accessor -ref_4 8 'num-syntax-literals)"
"(make-struct-field-mutator -set!_5 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_5 5 'require-vars-in-order)"
"(make-struct-field-mutator -set!_5 8 'num-syntax-literals))))"
"(define-values"
"(struct:variable-use variable-use2.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 0 'module-use)"
"(make-struct-field-accessor -ref_65 1 'sym))))"
"(define-values"
"(make-header)"
"(lambda(mpis_88)"
"(header1.1 mpis_88(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq)(box null) 0)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header_89 q_90)"
"(let-values(((pos_91)(header-num-syntax-literals header_89)))"
"(let-values((()(begin(set-header-num-syntax-literals! header_89(add1 pos_91))(values))))"
"(let-values(((b_92)(header-syntax-literals header_89)))"
"(begin(set-box! b_92(cons q_90(unbox b_92))) pos_91))))))"
"(define-values(empty-syntax-literals) '#&())"
"(define-values(header-empty-syntax-literals?)(lambda(header_93)(null?(unbox(header-syntax-literals header_93)))))"
"(define-values"
"(generate-lazy-syntax-literals!8.1)"
"(lambda(skip-deserialize?3_94 skip-deserialize?4_95 syntax-literals-boxes5_96 mpis6_97 self7_98)"
"(let-values(((syntax-literals-boxes_99) syntax-literals-boxes5_96))"
"(let-values(((mpis_100) mpis6_97))"
"(let-values(((self_101) self7_98))"
"(let-values(((skip-deserialize?_102)(if skip-deserialize?4_95 skip-deserialize?3_94 #f)))"
"(let-values()"
"(let-values(((syntax-literalss_103)(map2 unbox syntax-literals-boxes_99)))"
"(list"
"(list"
" 'define-values"
"(list syntax-literalss-id)"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((lst_104) syntax-literalss_103))"
"(begin"
"(if(list? lst_104)(void)(let-values()(in-list lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(fold-var_106 lst_107)"
"(if(pair? lst_107)"
"(let-values(((syntax-literals_108)(unsafe-car lst_107)))"
"(if #t"
"(let-values(((fold-var_109)"
"(let-values(((fold-var_110) fold-var_106))"
"(let-values(((fold-var_111)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'make-vector"
"(length syntax-literals_108)"
" '(#f)))"
" fold-var_110))))"
"(values fold-var_111)))))"
"(if #t"
"(for-loop_105 fold-var_109(unsafe-cdr lst_107))"
" fold-var_109))"
" fold-var_106))"
" fold-var_106))))"
" for-loop_105)"
" null"
" lst_104))))))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(phase pos)"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_102"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-vector-id '(phase))"
" '(void)"
"(list deserialize-syntax-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref(list* 'vector-ref deserialized-syntax-vector-id '(phase)) '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_100 self_101)"
" self-id)))"
"(list*"
" 'begin"
"(list* 'vector-set!(list* 'vector-ref syntax-literalss-id '(phase)) '(pos stx))"
" '(stx)))))))))))))))))"
"(define-values"
"(unpack9.1$1)"
"(lambda(given-kws_112 given-args_113 syntax-literals-boxes5_114 mpis6_115 self7_116)"
"(let-values(((skip-deserialize?4_117)(pair? given-kws_112)))"
"(let-values(((skip-deserialize?3_118)(if skip-deserialize?4_117(car given-args_113)(void))))"
"(generate-lazy-syntax-literals!8.1"
" skip-deserialize?3_118"
" skip-deserialize?4_117"
" syntax-literals-boxes5_114"
" mpis6_115"
" self7_116)))))"
"(define-values"
"(generate-lazy-syntax-literals!10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_119 given-argc_120)"
"(if(= given-argc_120 5)"
"(let-values(((l1_121) given-kws_119))"
"(let-values(((l1_122)"
"(if(null? l1_121) l1_121(if(eq?(car l1_121) '#:skip-deserialize?)(cdr l1_121) l1_121))))"
"(null? l1_122)))"
" #f))"
"(case-lambda"
"((given-kws_123 given-args_124 syntax-literals-boxes_125 mpis_126 self_127)"
"(unpack9.1$1 given-kws_123 given-args_124 syntax-literals-boxes_125 mpis_126 self_127)))"
" null"
" '(#:skip-deserialize?)"
"(let-values(((generate-lazy-syntax-literals!_128)"
"(case-lambda"
"((syntax-literals-boxes_129 mpis_130 self_131)"
"(unpack9.1$1 null null syntax-literals-boxes_129 mpis_130 self_131)))))"
" generate-lazy-syntax-literals!_128)))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(syntax-literals-boxes_132 mpis_133)"
"(let-values(((syntax-literalss_134)(map2 unbox syntax-literals-boxes_132)))"
"(if(andmap2 null? syntax-literalss_134)"
"(let-values() null)"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
" '()"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(let-values(((temp23_135)"
"(vector->immutable-vector"
"(list->vector"
"(map2"
" vector->immutable-vector"
"(map2 list->vector(map2 alt-reverse syntax-literalss_134))))))"
"((mpis24_136) mpis_133))"
"(if(variable-reference-constant?(#%variable-reference generate-deserialize7.1))"
"(generate-deserialize5.1 #f #f temp23_135 mpis24_136)"
"(generate-deserialize7.1 temp23_135 mpis24_136))))"
"(list* 'set! deserialize-syntax-id '(#f)))))))))))"
"(define-values"
"(generate-lazy-syntax-literal-lookup)"
"(lambda(phase_137 pos_138)"
"(list"
" 'let-values"
"(list(list '(stx)(generate-eager-syntax-literal-lookup phase_137 pos_138)))"
"(list 'if 'stx 'stx(list get-syntax-literal!-id(list 'quote phase_137)(list 'quote pos_138))))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(syntax-literals-boxes_139 mpis_140 base-phase_141 self_142 ns_143)"
"(let-values(((syntax-literalss_144)(map2 unbox syntax-literals-boxes_139)))"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp25_145)"
"(cons"
"(encode-namespace-scopes ns_143)"
"(append"
"(alt-reverse"
"(let-values(((start_147) 0)((end_148) base-phase_141)((inc_149) 1))"
"(begin"
"(if(if(real? start_147)(if(real? end_148)(real? inc_149) #f) #f)"
"(void)"
"(let-values()(in-range start_147 end_148 inc_149)))"
"((letrec-values(((for-loop_150)"
"(lambda(fold-var_151 pos_152)"
"(if(< pos_152 end_148)"
"(let-values(((i_153) pos_152))"
"(if #t"
"(let-values(((fold-var_154)"
"(let-values(((fold-var_155) fold-var_151))"
"(let-values(((fold-var_156)"
"(let-values()"
"(cons"
"(let-values() null)"
" fold-var_155))))"
"(values fold-var_156)))))"
"(if #t"
"(for-loop_150 fold-var_154(+ pos_152 inc_149))"
" fold-var_154))"
" fold-var_151))"
" fold-var_151))))"
" for-loop_150)"
" null"
" start_147))))"
"(map2 alt-reverse syntax-literalss_144))))"
"((mpis26_146) mpis_140))"
"(if(variable-reference-constant?(#%variable-reference generate-deserialize7.1))"
"(generate-deserialize5.1 #f #f temp25_145 mpis26_146)"
"(generate-deserialize7.1 temp25_145 mpis26_146)))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stxs)"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_141 dest-phase-id))"
"(add-module-path-index! mpis_140 self_142)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '(stxs))))"
" '((cdr ns+stxss)))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(phase_157 pos_158)"
"(list 'vector-ref(list 'vector-ref syntax-literalss-id(list 'quote phase_157))(list 'quote pos_158))))"
"(define-values"
"(syntax-literals-as-vectors)"
"(lambda(syntax-literals-boxes_159 base-phase_160)"
"(list->vector"
"(append"
"(alt-reverse"
"(let-values(((start_161) 0)((end_162) base-phase_160)((inc_163) 1))"
"(begin"
"(if(if(real? start_161)(if(real? end_162)(real? inc_163) #f) #f)"
"(void)"
"(let-values()(in-range start_161 end_162 inc_163)))"
"((letrec-values(((for-loop_164)"
"(lambda(fold-var_165 pos_166)"
"(if(< pos_166 end_162)"
"(let-values(((i_167) pos_166))"
"(if #t"
"(let-values(((fold-var_168)"
"(let-values(((fold-var_169) fold-var_165))"
"(let-values(((fold-var_170)"
"(let-values()"
"(cons(let-values() #f) fold-var_169))))"
"(values fold-var_170)))))"
"(if #t(for-loop_164 fold-var_168(+ pos_166 inc_163)) fold-var_168))"
" fold-var_165))"
" fold-var_165))))"
" for-loop_164)"
" null"
" start_161))))"
"(map2 list->vector(map2 alt-reverse(map2 unbox syntax-literals-boxes_159)))))))"
"(define-values(local-key->symbol)(lambda(key_171) key_171))"
"(define-values"
"(select-fresh)"
"(lambda(sym_172 header_173)"
"(if(symbol-conflicts? sym_172 header_173)"
"((letrec-values(((loop_174)"
"(lambda(pos_175)"
"                          (let-values (((new-sym_176) (string->symbol (format \"~a/~a\" pos_175 sym_172))))"
"(if(symbol-conflicts? new-sym_176 header_173)(loop_174(add1 pos_175)) new-sym_176)))))"
" loop_174)"
" 1)"
" sym_172)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_177 header_178)"
"(let-values(((or-part_179)(built-in-symbol? sym_177)))"
"(if or-part_179 or-part_179(hash-ref(header-define-and-import-syms header_178) sym_177 #f)))))"
"(define-values"
"(register-required-variable-use!18.1)"
"(lambda(defined?11_180 defined?12_181 header13_182 mpi14_183 phase15_184 sym16_185 extra-inspector17_186)"
"(let-values(((header_187) header13_182))"
"(let-values(((mpi_188) mpi14_183))"
"(let-values(((phase_189) phase15_184))"
"(let-values(((sym_190) sym16_185))"
"(let-values(((extra-inspector_191) extra-inspector17_186))"
"(let-values(((defined?_192)(if defined?12_181 defined?11_180 #f)))"
"(let-values()"
"(let-values(((key_193)(variable-use2.1(module-use1.1 mpi_188 phase_189) sym_190)))"
"(let-values(((variable-uses_194)(header-require-var-to-import-sym header_187)))"
"(let-values(((var-sym_195)"
"(let-values(((or-part_196)(hash-ref variable-uses_194 key_193 #f)))"
"(if or-part_196"
" or-part_196"
"(let-values(((sym_197)(select-fresh(variable-use-sym key_193) header_187)))"
"(begin"
"(hash-set! variable-uses_194 key_193 sym_197)"
"(set-header-require-vars-in-order!"
" header_187"
"(cons key_193(header-require-vars-in-order header_187)))"
"(hash-set!"
"(header-define-and-import-syms header_187)"
" sym_197"
"(if defined?_192 'defined 'required))"
" sym_197))))))"
"(begin"
"(if extra-inspector_191"
"(let-values()"
"(let-values(((extra-inspectors_198)(header-import-sym-to-extra-inspectors header_187)))"
"(hash-update!"
" extra-inspectors_198"
" var-sym_195"
"(lambda(s_199)(set-add s_199 extra-inspector_191))"
" '#hasheq())))"
"(void))"
" var-sym_195)))))))))))))"
"(define-values"
"(unpack19.1)"
"(lambda(given-kws_200 given-args_201 header13_202 mpi14_203 phase15_204 sym16_205 extra-inspector17_206)"
"(let-values(((defined?12_207)(pair? given-kws_200)))"
"(let-values(((defined?11_208)(if defined?12_207(car given-args_201)(void))))"
"(register-required-variable-use!18.1"
" defined?11_208"
" defined?12_207"
" header13_202"
" mpi14_203"
" phase15_204"
" sym16_205"
" extra-inspector17_206)))))"
"(define-values"
"(register-required-variable-use!20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_209 given-argc_210)"
"(if(= given-argc_210 7)"
"(let-values(((l1_211) given-kws_209))"
"(let-values(((l1_212)(if(null? l1_211) l1_211(if(eq?(car l1_211) '#:defined?)(cdr l1_211) l1_211))))"
"(null? l1_212)))"
" #f))"
"(case-lambda"
"((given-kws_213 given-args_214 header_215 mpi_216 phase_217 sym_218 extra-inspector_219)"
"(unpack19.1 given-kws_213 given-args_214 header_215 mpi_216 phase_217 sym_218 extra-inspector_219)))"
" null"
" '(#:defined?)"
"(let-values(((register-required-variable-use!_220)"
"(case-lambda"
"((header_221 mpi_222 phase_223 sym_224 extra-inspector_225)"
"(unpack19.1 null null header_221 mpi_222 phase_223 sym_224 extra-inspector_225)))))"
" register-required-variable-use!_220)))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_226 def-sym_227)(hash-set!(header-define-and-import-syms header_226) def-sym_227 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_228 var-sym_229)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_228) var-sym_229 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_230 phase_231 cctx_232)"
"(let-values(((mod-use-to-link-sym_233)"
"(let-values(((lst_235)(header-require-vars-in-order header_230)))"
"(begin"
"(if(list? lst_235)(void)(let-values()(in-list lst_235)))"
"((letrec-values(((for-loop_236)"
"(lambda(ht_237 lst_238)"
"(if(pair? lst_238)"
"(let-values(((vu_239)(unsafe-car lst_238)))"
"(if #t"
"(let-values(((ht_240)"
"(let-values(((ht_241) ht_237))"
"(let-values(((ht_242)"
"(let-values()"
"(let-values(((mu_243)"
"(variable-use-module-use"
" vu_239)))"
"(if(let-values(((or-part_244)"
"(hash-ref"
" ht_241"
" mu_243"
" #f)))"
"(if or-part_244"
" or-part_244"
"(eq?"
"(module-use-module mu_243)"
"(compile-context-self"
" cctx_232))))"
" ht_241"
"(hash-set"
" ht_241"
" mu_243"
"(string->symbol"
"(format"
"                                                                                       \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_243))"
"(module-use-phase mu_243)"
"(hash-count ht_241)))))))))"
"(values ht_242)))))"
"(if #t(for-loop_236 ht_240(unsafe-cdr lst_238)) ht_240))"
" ht_237))"
" ht_237))))"
" for-loop_236)"
" '#hash()"
" lst_235)))))"
"(let-values(((link-mod-uses_234)(hash-keys mod-use-to-link-sym_233)))"
"(values"
" link-mod-uses_234"
"(alt-reverse"
"(let-values(((lst_245) link-mod-uses_234))"
"(begin"
"(if(list? lst_245)(void)(let-values()(in-list lst_245)))"
"((letrec-values(((for-loop_246)"
"(lambda(fold-var_247 lst_248)"
"(if(pair? lst_248)"
"(let-values(((mu_249)(unsafe-car lst_248)))"
"(if #t"
"(let-values(((fold-var_250)"
"(let-values(((fold-var_251) fold-var_247))"
"(let-values(((fold-var_252)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_253)"
"(header-require-vars-in-order"
" header_230)))"
"(begin"
"(if(list? lst_253)"
"(void)"
"(let-values()(in-list lst_253)))"
"((letrec-values(((for-loop_254)"
"(lambda(fold-var_255"
" lst_256)"
"(if(pair? lst_256)"
"(let-values(((vu_257)"
"(unsafe-car"
" lst_256)))"
"(if #t"
"(let-values(((fold-var_258)"
"(let-values(((fold-var_259)"
" fold-var_255))"
"(if(equal?"
" mu_249"
"(variable-use-module-use"
" vu_257))"
"(let-values(((fold-var_260)"
" fold-var_259))"
"(let-values(((fold-var_261)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_262)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_230)"
" vu_257)))"
"(let-values(((ex-sym_263)"
"(variable-use-sym"
" vu_257)))"
"(if(eq?"
" var-sym_262"
" ex-sym_263)"
" var-sym_262"
"(list"
" ex-sym_263"
" var-sym_262)))))"
" fold-var_260))))"
"(values"
" fold-var_261)))"
" fold-var_259))))"
"(if #t"
"(for-loop_254"
" fold-var_258"
"(unsafe-cdr"
" lst_256))"
" fold-var_258))"
" fold-var_255))"
" fold-var_255))))"
" for-loop_254)"
" null"
" lst_253)))))"
" fold-var_251))))"
"(values fold-var_252)))))"
"(if #t(for-loop_246 fold-var_250(unsafe-cdr lst_248)) fold-var_250))"
" fold-var_247))"
" fold-var_247))))"
" for-loop_246)"
" null"
" lst_245))))"
"(alt-reverse"
"(let-values(((lst_264) link-mod-uses_234))"
"(begin"
"(if(list? lst_264)(void)(let-values()(in-list lst_264)))"
"((letrec-values(((for-loop_265)"
"(lambda(fold-var_266 lst_267)"
"(if(pair? lst_267)"
"(let-values(((mu_268)(unsafe-car lst_267)))"
"(if #t"
"(let-values(((fold-var_269)"
"(let-values(((fold-var_270) fold-var_266))"
"(let-values(((fold-var_271)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_272)"
"(alt-reverse"
"(let-values(((lst_273)"
"(header-require-vars-in-order"
" header_230)))"
"(begin"
"(if(list? lst_273)"
"(void)"
"(let-values()"
"(in-list lst_273)))"
"((letrec-values(((for-loop_274)"
"(lambda(fold-var_275"
" lst_276)"
"(if(pair?"
" lst_276)"
"(let-values(((vu_277)"
"(unsafe-car"
" lst_276)))"
"(if #t"
"(let-values(((fold-var_278)"
"(let-values(((fold-var_279)"
" fold-var_275))"
"(if(equal?"
" mu_268"
"(variable-use-module-use"
" vu_277))"
"(let-values(((fold-var_280)"
" fold-var_279))"
"(let-values(((fold-var_281)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_282)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_230)"
" vu_277)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_230)"
" var-sym_282"
" #f)))"
" fold-var_280))))"
"(values"
" fold-var_281)))"
" fold-var_279))))"
"(if #t"
"(for-loop_274"
" fold-var_278"
"(unsafe-cdr"
" lst_276))"
" fold-var_278))"
" fold-var_275))"
" fold-var_275))))"
" for-loop_274)"
" null"
" lst_273))))))"
"(if(ormap2 values extra-inspectorss_272)"
" extra-inspectorss_272"
" #f)))"
" fold-var_270))))"
"(values fold-var_271)))))"
"(if #t(for-loop_265 fold-var_269(unsafe-cdr lst_267)) fold-var_269))"
" fold-var_266))"
" fold-var_266))))"
" for-loop_265)"
" null"
" lst_264))))"
"(alt-reverse"
"(let-values(((lst_283)(header-require-vars-in-order header_230)))"
"(begin"
"(if(list? lst_283)(void)(let-values()(in-list lst_283)))"
"((letrec-values(((for-loop_284)"
"(lambda(fold-var_285 lst_286)"
"(if(pair? lst_286)"
"(let-values(((vu_287)(unsafe-car lst_286)))"
"(if #t"
"(let-values(((fold-var_288)"
"(let-values(((fold-var_289) fold-var_285))"
"(if(eq?"
"(module-use-module(variable-use-module-use vu_287))"
"(compile-context-self cctx_232))"
"(let-values(((fold-var_290) fold-var_289))"
"(let-values(((fold-var_291)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_292)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_230)"
" vu_287)))"
"(let-values(((ex-sym_293)"
"(variable-use-sym"
" vu_287)))"
"(if(eq? var-sym_292 ex-sym_293)"
" var-sym_292"
"(list var-sym_292 ex-sym_293)))))"
" fold-var_290))))"
"(values fold-var_291)))"
" fold-var_289))))"
"(if #t(for-loop_284 fold-var_288(unsafe-cdr lst_286)) fold-var_288))"
" fold-var_285))"
" fold-var_285))))"
" for-loop_284)"
" null"
" lst_283)))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_294)"
"(let-values(((p_295 base_296)(1/module-path-index-split mpi_294)))"
"(if(symbol? p_295)"
"(let-values() p_295)"
"(if(path? p_295)"
"(let-values()"
"            (let-values (((base_297 name_298 dir?_299) (split-path p_295))) (path-replace-extension name_298 #\"\")))"
"(if(string? p_295)"
"            (let-values () (path-replace-extension p_295 #\"\"))"
"(if(if(pair? p_295)(eq?(car p_295) 'quote) #f)"
"(let-values()(cadr p_295))"
"(if(if(pair? p_295)(eq?(car p_295) 'file) #f)"
"(let-values()"
"(let-values(((base_300 name_301 dir?_302)(split-path(cadr p_295))))"
"                    (path-replace-extension name_301 #\"\")))"
"(if(if(pair? p_295)(eq?(car p_295) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_295) #\"\"))"
"(let-values() 'module))))))))))"
"(define-values(instance-imports)(list ns-id phase-shift-id self-id inspector-id set-transformer!-id))"
"(define-values"
"(lifted/1.1$18)"
"(make-required 'make-instance-instance(case-lambda((self_3)(apply missing-kw self_3 null))) #f #f))"
"(define-values"
"(make-instance-instance11.1)"
"(lambda(inspector4_4 namespace1_5 phase-shift2_6 self3_7 set-transformer!5_8)"
"(let-values(((ns_9) namespace1_5))"
"(let-values(((phase-shift_10) phase-shift2_6))"
"(let-values(((self_11) self3_7))"
"(let-values(((inspector_12) inspector4_4))"
"(let-values(((set-transformer!_13) set-transformer!5_8))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_9"
" phase-shift-id"
" phase-shift_10"
" self-id"
" self_11"
" inspector-id"
" inspector_12"
" set-transformer!-id"
" set-transformer!_13)))))))))"
"(define-values"
"(unpack12.1$5)"
"(lambda(given-kws_14 given-args_15)"
"(let-values(((inspector4_16)(car given-args_15))"
"((given-kws_17)(cdr given-kws_14))"
"((given-args_18)(cdr given-args_15)))"
"(let-values(((namespace1_19)(car given-args_18))"
"((given-kws_20)(cdr given-kws_17))"
"((given-args_21)(cdr given-args_18)))"
"(let-values(((phase-shift2_22)(car given-args_21))"
"((given-kws_23)(cdr given-kws_20))"
"((given-args_24)(cdr given-args_21)))"
"(let-values(((self3_25)(car given-args_24))"
"((given-kws_26)(cdr given-kws_23))"
"((given-args_27)(cdr given-args_24)))"
"(let-values(((set-transformer!5_28)(car given-args_27)))"
"(make-instance-instance11.1"
" inspector4_16"
" namespace1_19"
" phase-shift2_22"
" self3_25"
" set-transformer!5_28))))))))"
"(define-values"
"(make-instance-instance13.1)"
"(lifted/1.1$18"
"(lambda(given-kws_29 given-argc_30)"
"(if(= given-argc_30 2)"
"(let-values(((l2_31) given-kws_29))"
"(if(pair? l2_31)"
"(if(eq?(car l2_31) '#:inspector)"
"(let-values(((l2_32)(cdr l2_31)))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:namespace)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)"
"(if(eq?(car l2_33) '#:phase-shift)"
"(let-values(((l2_34)(cdr l2_33)))"
"(if(pair? l2_34)"
"(if(eq?(car l2_34) '#:self)"
"(let-values(((l2_35)(cdr l2_34)))"
"(if(pair? l2_35)"
"(if(eq?(car l2_35) '#:set-transformer!)(null?(cdr l2_35)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_36 given-args_37)(unpack12.1$5 given-kws_36 given-args_37)))"
" '(#:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" '(#:inspector #:namespace #:phase-shift #:self #:set-transformer!)))"
"(define-values"
"(lifted/2.1$7)"
"(make-required 'make-module-body-instance-instance(case-lambda((self_38)(apply missing-kw self_38 null))) #f #f))"
"(define-values"
"(make-module-body-instance-instance16.1)"
"(lambda(set-transformer!14_39)"
"(let-values(((set-transformer!_40) set-transformer!14_39))"
"(let-values()(1/make-instance 'body-instance #f set-transformer!-id set-transformer!_40)))))"
"(define-values"
"(unpack17.1$2)"
"(lambda(given-kws_41 given-args_42)"
"(let-values(((set-transformer!14_43)(car given-args_42)))"
"(make-module-body-instance-instance16.1 set-transformer!14_43))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lifted/2.1$7"
"(lambda(given-kws_44 given-argc_45)"
"(if(= given-argc_45 2)"
"(let-values(((l2_46) given-kws_44))"
"(if(pair? l2_46)(if(eq?(car l2_46) '#:set-transformer!)(null?(cdr l2_46)) #f) #f))"
" #f))"
"(case-lambda((given-kws_47 given-args_48)(unpack17.1$2 given-kws_47 given-args_48)))"
" '(#:set-transformer!)"
" '(#:set-transformer!)))"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(lifted/1.1$17)"
"(make-required 'make-eager-instance-instance(case-lambda((self_2)(apply missing-kw self_2 null))) #f #f))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_3 dest-phase2_4 inspector5_5 namespace1_6 self3_7)"
"(let-values(((ns_8) namespace1_6))"
"(let-values(((dest-phase_9) dest-phase2_4))"
"(let-values(((self_10) self3_7))"
"(let-values(((bulk-binding-registry_11) bulk-binding-registry4_3))"
"(let-values(((inspector_12) inspector5_5))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_8"
" dest-phase-id"
" dest-phase_9"
" self-id"
" self_10"
" bulk-binding-registry-id"
" bulk-binding-registry_11"
" inspector-id"
" inspector_12"
" 'swap-top-level-scopes"
" swap-top-level-scopes)))))))))"
"(define-values"
"(unpack12.1$4)"
"(lambda(given-kws_13 given-args_14)"
"(let-values(((bulk-binding-registry4_15)(car given-args_14))"
"((given-kws_16)(cdr given-kws_13))"
"((given-args_17)(cdr given-args_14)))"
"(let-values(((dest-phase2_18)(car given-args_17))"
"((given-kws_19)(cdr given-kws_16))"
"((given-args_20)(cdr given-args_17)))"
"(let-values(((inspector5_21)(car given-args_20))"
"((given-kws_22)(cdr given-kws_19))"
"((given-args_23)(cdr given-args_20)))"
"(let-values(((namespace1_24)(car given-args_23))"
"((given-kws_25)(cdr given-kws_22))"
"((given-args_26)(cdr given-args_23)))"
"(let-values(((self3_27)(car given-args_26)))"
"(make-eager-instance-instance11.1"
" bulk-binding-registry4_15"
" dest-phase2_18"
" inspector5_21"
" namespace1_24"
" self3_27))))))))"
"(define-values"
"(make-eager-instance-instance13.1)"
"(lifted/1.1$17"
"(lambda(given-kws_28 given-argc_29)"
"(if(= given-argc_29 2)"
"(let-values(((l2_30) given-kws_28))"
"(if(pair? l2_30)"
"(if(eq?(car l2_30) '#:bulk-binding-registry)"
"(let-values(((l2_31)(cdr l2_30)))"
"(if(pair? l2_31)"
"(if(eq?(car l2_31) '#:dest-phase)"
"(let-values(((l2_32)(cdr l2_31)))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:inspector)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)"
"(if(eq?(car l2_33) '#:namespace)"
"(let-values(((l2_34)(cdr l2_33)))"
"(if(pair? l2_34)(if(eq?(car l2_34) '#:self)(null?(cdr l2_34)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_35 given-args_36)(unpack12.1$4 given-kws_35 given-args_36)))"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)))"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_1)"
"(let-values(((or-part_2)(number? datum_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_1)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_1)))(if or-part_4 or-part_4(bytes? datum_1)))))))))"
"(define-values(kernel-primitive-table$1)(primitive-table '#%kernel))"
"(define-values(datum->syntax$3)(hash-ref kernel-primitive-table$1 'datum->syntax))"
"(define-values(syntax-property$2)(hash-ref kernel-primitive-table$1 'syntax-property))"
"(define-values(syntax-e$3)(hash-ref kernel-primitive-table$1 'syntax-e))"
"(define-values(syntax?$2)(hash-ref kernel-primitive-table$1 'syntax?))"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_294)"
"(lambda(d3_295 srcloc1_296 srcloc2_297)"
"(let-values(((d_298) d3_295))"
"(let-values(((srcloc_299)(if srcloc2_297 srcloc1_296 #f)))"
"(let-values()(datum->syntax$3 #f d_298 srcloc_299)))))))"
"(case-lambda"
"((d_300)(datum->correlated4_294 d_300 #f #f))"
"((d_301 srcloc1_302)(datum->correlated4_294 d_301 srcloc1_302 #t)))))"
"(define-values(correlated-e)(lambda(e_303)(if(syntax?$2 e_303)(syntax-e$3 e_303) e_303)))"
"(define-values(correlated-cadr)(lambda(e_304)(car(correlated-e(cdr(correlated-e e_304))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_305)(let-values(((l_306)(correlated-e e_305)))(if(list? l_306)(length l_306) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_307)"
"((letrec-values(((loop_308)"
"(lambda(e_309)"
"(if(pair? e_309)"
"(let-values()(cons(car e_309)(loop_308(cdr e_309))))"
"(if(null? e_309)"
"(let-values() null)"
"(if(syntax?$2 e_309)"
"(let-values()(loop_308(syntax-e$3 e_309)))"
"                              (let-values () (error 'correlate->list \"not a list\"))))))))"
" loop_308)"
" e_307)))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_314 k_315)(syntax-property$2 e_314 k_315))"
"((e_316 k_317 v_318)(syntax-property$2 e_316 k_317 v_318))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_319)"
"(if(pair? s_319)"
"(let-values()(let-values(((r_320)(to-syntax-list.1$1(cdr s_319))))(if r_320(cons(car s_319) r_320) #f)))"
"(if(syntax?$2 s_319)"
"(let-values()(to-syntax-list.1$1(syntax-e$3 s_319)))"
"(if(list? s_319)(let-values() s_319)(let-values() #f))))))"
"(define-values(kernel-primitive-table)(1/primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(make-readtable$1)(hash-ref kernel-primitive-table 'make-readtable))"
"(define-values(datum->syntax$2)(hash-ref kernel-primitive-table 'datum->syntax))"
"(define-values(syntax-property-symbol-keys$1)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(syntax-position$1)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(syntax-column$1)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(syntax-source$1)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(syntax-e$2)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(define-values"
"(syntax->reader-syntax)"
"(lambda(v_1)"
"(syntax-map"
" v_1"
"(lambda(tail?_2 v_3) v_3)"
"(lambda(orig-s_4 d_5)"
"(let-values(((s_6)(datum->syntax$2 #f d_5(srcloc->vector(syntax-srcloc orig-s_4)))))"
"(let-values(((keys_7)(1/syntax-property-symbol-keys orig-s_4)))"
"(let-values(((lst_8) keys_7))"
"(begin"
"(if(list? lst_8)(void)(let-values()(in-list lst_8)))"
"((letrec-values(((for-loop_9)"
"(lambda(s_10 lst_11)"
"(if(pair? lst_11)"
"(let-values(((key_12)(unsafe-car lst_11)))"
"(if #t"
"(let-values(((s_13)"
"(let-values(((s_14) s_10))"
"(let-values(((s_15)"
"(let-values()"
"(1/syntax-property"
" s_14"
" key_12"
"(syntax-property$1 orig-s_4 key_12)))))"
"(values s_15)))))"
"(if #t(for-loop_9 s_13(unsafe-cdr lst_11)) s_13))"
" s_10))"
" s_10))))"
" for-loop_9)"
" s_6"
" lst_8))))))"
" syntax-e$1)))"
"(define-values"
"(srcloc->vector)"
"(lambda(s_16)"
"(if s_16"
"(vector(srcloc-source s_16)(srcloc-line s_16)(srcloc-column s_16)(srcloc-position s_16)(srcloc-span s_16))"
" #f)))"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(let-values(((e_3)"
"(if(if(datum-has-elements? s-exp_2)(syntax-srcloc stx_1) #f)"
"(let-values()"
"(datum->correlated"
"(correlated-e(datum->correlated s-exp_2))"
"(srcloc->vector(syntax-srcloc stx_1))))"
"(let-values()(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1)))))))"
"(let-values(((maybe-n_4)(syntax-property$1 stx_1 'inferred-name)))"
"(if maybe-n_4"
"(correlated-property e_3 'inferred-name(if(syntax?$1 maybe-n_4)(syntax->datum$1 maybe-n_4) maybe-n_4))"
" e_3)))))"
"(define-values"
"(compile$2)"
"(let-values(((compile7_1)"
"(lambda(in-s5_2 cctx6_3 name1_4 result-used?2_5 name3_6 result-used?4_7)"
"(let-values(((in-s_8) in-s5_2))"
"(let-values(((cctx_9) cctx6_3))"
"(let-values(((name_10)(if name3_6 name1_4 #f)))"
"(let-values(((result-used?_11)(if result-used?4_7 result-used?2_5 #t)))"
"(let-values()"
"(let-values(((compile_12)"
"(lambda(s_13 name_14 result-used?_15)"
"(compile$2 s_13 cctx_9 name_14 result-used?_15))))"
"(let-values(((s_16)(syntax-disarm$1 in-s_8)))"
"(if(pair?(syntax-e$1 s_16))"
"(let-values()"
"(let-values(((phase_17)(compile-context-phase cctx_9)))"
"(let-values(((core-sym_18)(core-form-sym s_16 phase_17)))"
"(let-values(((tmp_19) core-sym_18))"
"(let-values(((index_20)"
"(if(symbol? tmp_19)"
"(hash-ref"
" '#hasheq((#%app . 5)"
"(with-continuation-mark . 7)"
"(begin . 8)"
"(module . 2)"
"(#%expression . 11)"
"(set! . 9)"
"(let-values . 10)"
"(if . 6)"
"(quote-syntax . 13)"
"(quote . 12)"
"(letrec-values . 10)"
"(begin0 . 8)"
"(#%variable-reference . 14)"
"(lambda . 3)"
"(case-lambda . 4)"
"(#%top . 15)"
"(module* . 2))"
" tmp_19"
"(lambda() 0))"
"(if(equal? tmp_19 #f)(let-values() 1)(let-values() 0)))))"
"(if(unsafe-fx< index_20 7)"
"(if(unsafe-fx< index_20 3)"
"(if(unsafe-fx< index_20 1)"
"                                                  (let-values () (error \"unrecognized core form:\" core-sym_18))"
"(if(unsafe-fx< index_20 2)"
"(let-values()"
"(error"
"                                                       \"internal error; not a core form:\""
" s_16"
"                                                       \"at phase:\""
" phase_17))"
"                                                    (let-values () (error \"not a core expression form:\" s_16))))"
"(if(unsafe-fx< index_20 4)"
"(let-values()"
"(if result-used?_11"
"(let-values()"
"(let-values(((ok?_21 lambda18_22 formals19_23 body20_24)"
"(let-values(((s_37) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_38) s_37))"
"(let-values(((lambda18_39"
" formals19_40"
" body20_41)"
"(let-values(((s_42)"
"(if(syntax?$1"
" s_37)"
"(syntax-e$1"
" s_37)"
" s_37)))"
"(if(pair? s_42)"
"(let-values(((lambda21_43)"
"(let-values(((s_46)"
"(car"
" s_42)))"
" s_46))"
"((formals22_44"
" body23_45)"
"(let-values(((s_47)"
"(cdr"
" s_42)))"
"(let-values(((s_48)"
"(if(syntax?$1"
" s_47)"
"(syntax-e$1"
" s_47)"
" s_47)))"
"(if(pair?"
" s_48)"
"(let-values(((formals24_49)"
"(let-values(((s_51)"
"(car"
" s_48)))"
" s_51))"
"((body25_50)"
"(let-values(((s_52)"
"(cdr"
" s_48)))"
"(let-values(((s_53)"
"(if(syntax?$1"
" s_52)"
"(syntax-e$1"
" s_52)"
" s_52)))"
"(if(pair?"
" s_53)"
"(let-values(((body26_54)"
"(let-values(((s_55)"
"(car"
" s_53)))"
" s_55))"
"(()"
"(let-values(((s_56)"
"(cdr"
" s_53)))"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(null?"
" s_57)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_38))))))"
"(values"
" body26_54))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_38))))))"
"(values"
" formals24_49"
" body25_50))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_38))))))"
"(values"
" lambda21_43"
" formals22_44"
" body23_45))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_38)))))"
"(values"
" #t"
" lambda18_39"
" formals19_40"
" body20_41)))"
"(values #f #f #f #f)))))"
"(add-lambda-properties"
"(correlate*"
" s_16"
"(list*"
" 'lambda"
"(compile-lambda formals19_23 body20_24 cctx_9)))"
" name_10"
" s_16)))"
"(let-values()"
"(correlate* s_16(list 'quote(syntax->datum$1 s_16))))))"
"(if(unsafe-fx< index_20 5)"
"(let-values()"
"(if result-used?_11"
"(let-values()"
"(let-values(((ok?_58 case-lambda27_59 formals28_60 body29_61)"
"(let-values(((s_74) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_75) s_74))"
"(let-values(((case-lambda27_76"
" formals28_77"
" body29_78)"
"(let-values(((s_79)"
"(if(syntax?$1"
" s_74)"
"(syntax-e$1"
" s_74)"
" s_74)))"
"(if(pair? s_79)"
"(let-values(((case-lambda30_80)"
"(let-values(((s_83)"
"(car"
" s_79)))"
" s_83))"
"((formals31_81"
" body32_82)"
"(let-values(((s_84)"
"(cdr"
" s_79)))"
"(let-values(((s_85)"
"(if(syntax?$1"
" s_84)"
"(syntax-e$1"
" s_84)"
" s_84)))"
"(let-values(((flat-s_86)"
"(to-syntax-list.1"
" s_85)))"
"(if(not"
" flat-s_86)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_75))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_75))"
"(let-values()"
"(let-values(((formals_87"
" body_88)"
"(let-values(((lst_89)"
" flat-s_86))"
"(begin"
"(if(list?"
" lst_89)"
"(void)"
"(let-values()"
"(in-list"
" lst_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(formals_91"
" body_92"
" lst_93)"
"(if(pair?"
" lst_93)"
"(let-values(((s_94)"
"(unsafe-car"
" lst_93)))"
"(if #t"
"(let-values(((formals_95"
" body_96)"
"(let-values(((formals_97)"
" formals_91)"
"((body_98)"
" body_92))"
"(let-values(((formals_99"
" body_100)"
"(let-values()"
"(let-values(((formals36_101"
" body37_102)"
"(let-values()"
"(let-values(((s_103)"
"(if(syntax?$1"
" s_94)"
"(syntax-e$1"
" s_94)"
" s_94)))"
"(if(pair?"
" s_103)"
"(let-values(((formals33_104)"
"(let-values(((s_106)"
"(car"
" s_103)))"
" s_106))"
"((body34_105)"
"(let-values(((s_107)"
"(cdr"
" s_103)))"
"(let-values(((s_108)"
"(if(syntax?$1"
" s_107)"
"(syntax-e$1"
" s_107)"
" s_107)))"
"(if(pair?"
" s_108)"
"(let-values(((body35_109)"
"(let-values(((s_110)"
"(car"
" s_108)))"
" s_110))"
"(()"
"(let-values(((s_111)"
"(cdr"
" s_108)))"
"(let-values(((s_112)"
"(if(syntax?$1"
" s_111)"
"(syntax-e$1"
" s_111)"
" s_111)))"
"(if(null?"
" s_112)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_75))))))"
"(values"
" body35_109))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_75))))))"
"(values"
" formals33_104"
" body34_105))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_75))))))"
"(values"
"(cons"
" formals36_101"
" formals_97)"
"(cons"
" body37_102"
" body_98))))))"
"(values"
" formals_99"
" body_100)))))"
"(if #t"
"(for-loop_90"
" formals_95"
" body_96"
"(unsafe-cdr"
" lst_93))"
"(values"
" formals_95"
" body_96)))"
"(values"
" formals_91"
" body_92)))"
"(values"
" formals_91"
" body_92)))))"
" for-loop_90)"
" null"
" null"
" lst_89)))))"
"(values"
"(alt-reverse"
" formals_87)"
"(alt-reverse"
" body_88)))))))))))"
"(values"
" case-lambda30_80"
" formals31_81"
" body32_82))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_75)))))"
"(values"
" #t"
" case-lambda27_76"
" formals28_77"
" body29_78)))"
"(values #f #f #f #f)))))"
"(add-lambda-properties"
"(correlate*"
" s_16"
"(list*"
" 'case-lambda"
"(alt-reverse"
"(let-values(((lst_113) formals28_60)"
"((lst_114) body29_61))"
"(begin"
"(if(list? lst_113)"
"(void)"
"(let-values()(in-list lst_113)))"
"(if(list? lst_114)"
"(void)"
"(let-values()(in-list lst_114)))"
"((letrec-values(((for-loop_115)"
"(lambda(fold-var_116"
" lst_117"
" lst_118)"
"(if(if(pair? lst_117)"
"(pair? lst_118)"
" #f)"
"(let-values(((formals_119)"
"(unsafe-car"
" lst_117))"
"((body_120)"
"(unsafe-car"
" lst_118)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_121)"
"(let-values(((fold-var_122)"
" fold-var_116))"
"(let-values(((fold-var_123)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
" formals_119"
" body_120"
" cctx_9))"
" fold-var_122))))"
"(values"
" fold-var_123)))))"
"(if(if #t #t #f)"
"(for-loop_115"
" fold-var_121"
"(unsafe-cdr lst_117)"
"(unsafe-cdr lst_118))"
" fold-var_121))"
" fold-var_116))"
" fold-var_116))))"
" for-loop_115)"
" null"
" lst_113"
" lst_114))))))"
" name_10"
" s_16)))"
"(let-values()"
"(correlate* s_16(list 'quote(syntax->datum$1 s_16))))))"
"(if(unsafe-fx< index_20 6)"
"(let-values()"
"(let-values(((ok?_124 #%app38_125 rest39_126)"
"(let-values(((s_138) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_139) s_138))"
"(let-values(((#%app38_140 rest39_141)"
"(let-values(((s_142)"
"(if(syntax?$1"
" s_138)"
"(syntax-e$1"
" s_138)"
" s_138)))"
"(if(pair? s_142)"
"(let-values(((#%app40_143)"
"(let-values(((s_145)"
"(car"
" s_142)))"
" s_145))"
"((rest41_144)"
"(let-values(((s_146)"
"(cdr"
" s_142)))"
" s_146)))"
"(values"
" #%app40_143"
" rest41_144))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_139)))))"
"(values #t #%app38_140 rest39_141)))"
"(values #f #f #f)))))"
"(let-values(((es_137)"
"(let-values(((es_147) rest39_126))"
"(if(syntax?$1 es_147)"
"(syntax->list$1(syntax-disarm$1 es_147))"
" es_147))))"
"(alt-reverse"
"(let-values(((lst_148) es_137))"
"(begin"
"(if(list? lst_148)"
"(void)"
"(let-values()(in-list lst_148)))"
"((letrec-values(((for-loop_149)"
"(lambda(fold-var_150 lst_151)"
"(if(pair? lst_151)"
"(let-values(((s_152)"
"(unsafe-car"
" lst_151)))"
"(if #t"
"(let-values(((fold-var_153)"
"(let-values(((fold-var_154)"
" fold-var_150))"
"(let-values(((fold-var_155)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_12"
" s_152"
" #f"
" #t))"
" fold-var_154))))"
"(values"
" fold-var_155)))))"
"(if #t"
"(for-loop_149"
" fold-var_153"
"(unsafe-cdr lst_151))"
" fold-var_153))"
" fold-var_150))"
" fold-var_150))))"
" for-loop_149)"
" null"
" lst_148)))))))"
"(let-values()"
"(let-values(((ok?_156 if42_157 tst43_158 thn44_159 els45_160)"
"(let-values(((s_175) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_176) s_175))"
"(let-values(((if42_177"
" tst43_178"
" thn44_179"
" els45_180)"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_175)"
"(syntax-e$1"
" s_175)"
" s_175)))"
"(if(pair? s_181)"
"(let-values(((if46_182)"
"(let-values(((s_186)"
"(car"
" s_181)))"
" s_186))"
"((tst47_183"
" thn48_184"
" els49_185)"
"(let-values(((s_187)"
"(cdr"
" s_181)))"
"(let-values(((s_188)"
"(if(syntax?$1"
" s_187)"
"(syntax-e$1"
" s_187)"
" s_187)))"
"(if(pair?"
" s_188)"
"(let-values(((tst50_189)"
"(let-values(((s_192)"
"(car"
" s_188)))"
" s_192))"
"((thn51_190"
" els52_191)"
"(let-values(((s_193)"
"(cdr"
" s_188)))"
"(let-values(((s_194)"
"(if(syntax?$1"
" s_193)"
"(syntax-e$1"
" s_193)"
" s_193)))"
"(if(pair?"
" s_194)"
"(let-values(((thn53_195)"
"(let-values(((s_197)"
"(car"
" s_194)))"
" s_197))"
"((els54_196)"
"(let-values(((s_198)"
"(cdr"
" s_194)))"
"(let-values(((s_199)"
"(if(syntax?$1"
" s_198)"
"(syntax-e$1"
" s_198)"
" s_198)))"
"(if(pair?"
" s_199)"
"(let-values(((els55_200)"
"(let-values(((s_201)"
"(car"
" s_199)))"
" s_201))"
"(()"
"(let-values(((s_202)"
"(cdr"
" s_199)))"
"(let-values(((s_203)"
"(if(syntax?$1"
" s_202)"
"(syntax-e$1"
" s_202)"
" s_202)))"
"(if(null?"
" s_203)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_176))))))"
"(values"
" els55_200))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_176))))))"
"(values"
" thn53_195"
" els54_196))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_176))))))"
"(values"
" tst50_189"
" thn51_190"
" els52_191))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_176))))))"
"(values"
" if46_182"
" tst47_183"
" thn48_184"
" els49_185))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_176)))))"
"(values"
" #t"
" if42_177"
" tst43_178"
" thn44_179"
" els45_180)))"
"(values #f #f #f #f #f)))))"
"(correlate*"
" s_16"
"(list"
" 'if"
"(compile_12 tst43_158 #f #f)"
"(compile_12 thn44_159 name_10 result-used?_11)"
"(compile_12 els45_160 name_10 result-used?_11)))))))))"
"(if(unsafe-fx< index_20 11)"
"(if(unsafe-fx< index_20 8)"
"(let-values()"
"(let-values(((ok?_204 if56_205 key57_206 val58_207 body59_208)"
"(let-values(((s_223) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_224) s_223))"
"(let-values(((if56_225"
" key57_226"
" val58_227"
" body59_228)"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_223)"
"(syntax-e$1 s_223)"
" s_223)))"
"(if(pair? s_229)"
"(let-values(((if60_230)"
"(let-values(((s_234)"
"(car"
" s_229)))"
" s_234))"
"((key61_231"
" val62_232"
" body63_233)"
"(let-values(((s_235)"
"(cdr"
" s_229)))"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_235)"
"(syntax-e$1"
" s_235)"
" s_235)))"
"(if(pair?"
" s_236)"
"(let-values(((key64_237)"
"(let-values(((s_240)"
"(car"
" s_236)))"
" s_240))"
"((val65_238"
" body66_239)"
"(let-values(((s_241)"
"(cdr"
" s_236)))"
"(let-values(((s_242)"
"(if(syntax?$1"
" s_241)"
"(syntax-e$1"
" s_241)"
" s_241)))"
"(if(pair?"
" s_242)"
"(let-values(((val67_243)"
"(let-values(((s_245)"
"(car"
" s_242)))"
" s_245))"
"((body68_244)"
"(let-values(((s_246)"
"(cdr"
" s_242)))"
"(let-values(((s_247)"
"(if(syntax?$1"
" s_246)"
"(syntax-e$1"
" s_246)"
" s_246)))"
"(if(pair?"
" s_247)"
"(let-values(((body69_248)"
"(let-values(((s_249)"
"(car"
" s_247)))"
" s_249))"
"(()"
"(let-values(((s_250)"
"(cdr"
" s_247)))"
"(let-values(((s_251)"
"(if(syntax?$1"
" s_250)"
"(syntax-e$1"
" s_250)"
" s_250)))"
"(if(null?"
" s_251)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_224))))))"
"(values"
" body69_248))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_224))))))"
"(values"
" val67_243"
" body68_244))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_224))))))"
"(values"
" key64_237"
" val65_238"
" body66_239))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_224))))))"
"(values"
" if60_230"
" key61_231"
" val62_232"
" body63_233))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_224)))))"
"(values"
" #t"
" if56_225"
" key57_226"
" val58_227"
" body59_228)))"
"(values #f #f #f #f #f)))))"
"(correlate*"
" s_16"
"(list"
" 'with-continuation-mark"
"(compile_12 key57_206 #f #t)"
"(compile_12 val58_207 #f #t)"
"(compile_12 body59_208 name_10 result-used?_11)))))"
"(if(unsafe-fx< index_20 9)"
"(let-values()"
"(let-values(((ok?_252 begin70_253 e71_254)"
"(let-values(((s_266) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_267) s_266))"
"(let-values(((begin70_268 e71_269)"
"(let-values(((s_270)"
"(if(syntax?$1"
" s_266)"
"(syntax-e$1"
" s_266)"
" s_266)))"
"(if(pair? s_270)"
"(let-values(((begin72_271)"
"(let-values(((s_273)"
"(car"
" s_270)))"
" s_273))"
"((e73_272)"
"(let-values(((s_274)"
"(cdr"
" s_270)))"
"(let-values(((s_275)"
"(if(syntax?$1"
" s_274)"
"(syntax-e$1"
" s_274)"
" s_274)))"
"(let-values(((flat-s_276)"
"(to-syntax-list.1"
" s_275)))"
"(if(not"
" flat-s_276)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_267))"
"(if(null?"
" flat-s_276)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_267))"
"(let-values()"
" flat-s_276))))))))"
"(values"
" begin72_271"
" e73_272))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_267)))))"
"(values #t begin70_268 e71_269)))"
"(values #f #f #f)))))"
"(let-values(((used-pos_265)"
"(let-values(((tmp_277) core-sym_18))"
"(if(equal? tmp_277 'begin0)"
"(let-values() 0)"
"(let-values()(sub1(length e71_254)))))))"
"(correlate*"
" s_16"
"(list*"
" core-sym_18"
"(alt-reverse"
"(let-values(((lst_278) e71_254)((start_279) 0))"
"(begin"
"(if(list? lst_278)"
"(void)"
"(let-values()(in-list lst_278)))"
"(if(exact-nonnegative-integer? start_279)"
"(void)"
"(let-values()(in-naturals start_279)))"
"((letrec-values(((for-loop_280)"
"(lambda(fold-var_281"
" lst_282"
" pos_283)"
"(if(if(pair? lst_282) #t #f)"
"(let-values(((e_284)"
"(unsafe-car"
" lst_282))"
"((i_285) pos_283))"
"(if(if #t #t #f)"
"(let-values(((fold-var_286)"
"(let-values(((fold-var_287)"
" fold-var_281))"
"(let-values(((fold-var_288)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_289)"
"(="
" i_285"
" used-pos_265)))"
"(compile_12"
" e_284"
"(if used?_289"
" name_10"
" #f)"
" used?_289)))"
" fold-var_287))))"
"(values"
" fold-var_288)))))"
"(if(if #t #t #f)"
"(for-loop_280"
" fold-var_286"
"(unsafe-cdr lst_282)"
"(+ pos_283 1))"
" fold-var_286))"
" fold-var_281))"
" fold-var_281))))"
" for-loop_280)"
" null"
" lst_278"
" start_279)))))))))"
"(if(unsafe-fx< index_20 10)"
"(let-values()"
"(let-values(((ok?_290 set!74_291 id75_292 rhs76_293)"
"(let-values(((s_306) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_307) s_306))"
"(let-values(((set!74_308"
" id75_309"
" rhs76_310)"
"(let-values(((s_311)"
"(if(syntax?$1"
" s_306)"
"(syntax-e$1"
" s_306)"
" s_306)))"
"(if(pair? s_311)"
"(let-values(((set!77_312)"
"(let-values(((s_315)"
"(car"
" s_311)))"
" s_315))"
"((id78_313"
" rhs79_314)"
"(let-values(((s_316)"
"(cdr"
" s_311)))"
"(let-values(((s_317)"
"(if(syntax?$1"
" s_316)"
"(syntax-e$1"
" s_316)"
" s_316)))"
"(if(pair?"
" s_317)"
"(let-values(((id80_318)"
"(let-values(((s_320)"
"(car"
" s_317)))"
"(if(let-values(((or-part_321)"
"(if(syntax?$1"
" s_320)"
"(symbol?"
"(syntax-e$1"
" s_320))"
" #f)))"
"(if or-part_321"
" or-part_321"
"(symbol?"
" s_320)))"
" s_320"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"not an identifier\""
" orig-s_307"
" s_320))))"
"((rhs81_319)"
"(let-values(((s_322)"
"(cdr"
" s_317)))"
"(let-values(((s_323)"
"(if(syntax?$1"
" s_322)"
"(syntax-e$1"
" s_322)"
" s_322)))"
"(if(pair?"
" s_323)"
"(let-values(((rhs82_324)"
"(let-values(((s_325)"
"(car"
" s_323)))"
" s_325))"
"(()"
"(let-values(((s_326)"
"(cdr"
" s_323)))"
"(let-values(((s_327)"
"(if(syntax?$1"
" s_326)"
"(syntax-e$1"
" s_326)"
" s_326)))"
"(if(null?"
" s_327)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_307))))))"
"(values"
" rhs82_324))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_307))))))"
"(values"
" id80_318"
" rhs81_319))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_307))))))"
"(values"
" set!77_312"
" id78_313"
" rhs79_314))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_307)))))"
"(values"
" #t"
" set!74_308"
" id75_309"
" rhs76_310)))"
"(values #f #f #f #f)))))"
"(correlate*"
" s_16"
"(let-values(((...der/compile/expr.rkt:100:27_328)"
" compile-identifier17.1)"
"((temp83_329) id75_292)"
"((cctx84_330) cctx_9)"
"((temp85_331)"
"(compile_12 rhs76_293 id75_292 #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier17.1))"
"(compile-identifier15.1"
" temp85_331"
" #t"
" #f"
" #f"
" temp83_329"
" cctx84_330)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:100:27_328"
" keyword-procedure-extract"
" '(#:set-to)"
" 4)"
" '(#:set-to)"
"(list temp85_331)"
" temp83_329"
" cctx84_330))))))"
"(let-values()"
"(compile-let"
" core-sym_18"
" s_16"
" cctx_9"
" name_10"
" result-used?_11)))))"
"(if(unsafe-fx< index_20 13)"
"(if(unsafe-fx< index_20 12)"
"(let-values()"
"(let-values(((ok?_332 #%expression86_333 e87_334)"
"(let-values(((s_345) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_346) s_345))"
"(let-values(((#%expression86_347 e87_348)"
"(let-values(((s_349)"
"(if(syntax?$1"
" s_345)"
"(syntax-e$1"
" s_345)"
" s_345)))"
"(if(pair? s_349)"
"(let-values(((#%expression88_350)"
"(let-values(((s_352)"
"(car"
" s_349)))"
" s_352))"
"((e89_351)"
"(let-values(((s_353)"
"(cdr"
" s_349)))"
"(let-values(((s_354)"
"(if(syntax?$1"
" s_353)"
"(syntax-e$1"
" s_353)"
" s_353)))"
"(if(pair?"
" s_354)"
"(let-values(((e90_355)"
"(let-values(((s_356)"
"(car"
" s_354)))"
" s_356))"
"(()"
"(let-values(((s_357)"
"(cdr"
" s_354)))"
"(let-values(((s_358)"
"(if(syntax?$1"
" s_357)"
"(syntax-e$1"
" s_357)"
" s_357)))"
"(if(null?"
" s_358)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_346))))))"
"(values"
" e90_355))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_346))))))"
"(values"
" #%expression88_350"
" e89_351))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_346)))))"
"(values #t #%expression86_347 e87_348)))"
"(values #f #f #f)))))"
"(compile_12 e87_334 name_10 result-used?_11)))"
"(let-values()"
"(let-values(((ok?_359 quote91_360 datum92_361)"
"(let-values(((s_373) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_374) s_373))"
"(let-values(((quote91_375 datum92_376)"
"(let-values(((s_377)"
"(if(syntax?$1"
" s_373)"
"(syntax-e$1"
" s_373)"
" s_373)))"
"(if(pair? s_377)"
"(let-values(((quote93_378)"
"(let-values(((s_380)"
"(car"
" s_377)))"
" s_380))"
"((datum94_379)"
"(let-values(((s_381)"
"(cdr"
" s_377)))"
"(let-values(((s_382)"
"(if(syntax?$1"
" s_381)"
"(syntax-e$1"
" s_381)"
" s_381)))"
"(if(pair?"
" s_382)"
"(let-values(((datum95_383)"
"(let-values(((s_384)"
"(car"
" s_382)))"
" s_384))"
"(()"
"(let-values(((s_385)"
"(cdr"
" s_382)))"
"(let-values(((s_386)"
"(if(syntax?$1"
" s_385)"
"(syntax-e$1"
" s_385)"
" s_385)))"
"(if(null?"
" s_386)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_374))))))"
"(values"
" datum95_383))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_374))))))"
"(values"
" quote93_378"
" datum94_379))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_374)))))"
"(values #t quote91_375 datum92_376)))"
"(values #f #f #f)))))"
"(let-values(((datum_372)(syntax->datum$1 datum92_361)))"
"(if(self-quoting-in-linklet? datum_372)"
"(let-values()(correlate* s_16 datum_372))"
"(let-values()"
"(correlate* s_16(list 'quote datum_372))))))))"
"(if(unsafe-fx< index_20 14)"
"(let-values()"
"(let-values(((ok?_387 quote-syntax96_388 datum97_389 _98_390)"
"(let-values(((s_403) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_404) s_403))"
"(let-values(((quote-syntax96_405"
" datum97_406"
" _98_407)"
"(let-values(((s_408)"
"(if(syntax?$1"
" s_403)"
"(syntax-e$1"
" s_403)"
" s_403)))"
"(if(pair? s_408)"
"(let-values(((quote-syntax99_409)"
"(let-values(((s_412)"
"(car"
" s_408)))"
" s_412))"
"((datum100_410"
" _101_411)"
"(let-values(((s_413)"
"(cdr"
" s_408)))"
"(let-values(((s_414)"
"(if(syntax?$1"
" s_413)"
"(syntax-e$1"
" s_413)"
" s_413)))"
"(if(pair?"
" s_414)"
"(let-values(((datum102_415)"
"(let-values(((s_417)"
"(car"
" s_414)))"
" s_417))"
"((_103_416)"
"(let-values(((s_418)"
"(cdr"
" s_414)))"
" s_418)))"
"(values"
" datum102_415"
" _103_416))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_404))))))"
"(values"
" quote-syntax99_409"
" datum100_410"
" _101_411))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_404)))))"
"(values"
" #t"
" quote-syntax96_405"
" datum97_406"
" _98_407)))"
"(values #f #f #f #f)))))"
"(if result-used?_11"
"(compile-quote-syntax datum97_389 phase_17 cctx_9)"
"(correlate*"
" s_16"
"(list 'quote(syntax->datum$1 datum97_389))))))"
"(if(unsafe-fx< index_20 15)"
"(let-values()"
"(let-values(((ok?_419 #%variable-reference104_420 id105_421)"
"(let-values(((s_449) s_16))"
"(if(if #t"
"(let-values(((s_450)"
"(if(syntax?$1 s_449)"
"(syntax-e$1 s_449)"
" s_449)))"
"(if(pair? s_450)"
"(if(let-values(((s_451)"
"(car s_450)))"
" #t)"
"(let-values(((s_452)(cdr s_450)))"
"(let-values(((s_453)"
"(if(syntax?$1"
" s_452)"
"(syntax-e$1 s_452)"
" s_452)))"
"(if(pair? s_453)"
"(if(let-values(((s_454)"
"(car"
" s_453)))"
"(if(syntax?$1 s_454)"
"(symbol?"
"(syntax-e$1 s_454))"
" #f))"
"(let-values(((s_455)"
"(cdr s_453)))"
"(let-values(((s_456)"
"(if(syntax?$1"
" s_455)"
"(syntax-e$1"
" s_455)"
" s_455)))"
"(null? s_456)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_457) s_449))"
"(let-values(((#%variable-reference104_458"
" id105_459)"
"(let-values(((s_460)"
"(if(syntax?$1"
" s_449)"
"(syntax-e$1"
" s_449)"
" s_449)))"
"(if #t"
"(let-values(((#%variable-reference106_461)"
"(let-values(((s_463)"
"(car"
" s_460)))"
" s_463))"
"((id107_462)"
"(let-values(((s_464)"
"(cdr"
" s_460)))"
"(let-values(((s_465)"
"(if(syntax?$1"
" s_464)"
"(syntax-e$1"
" s_464)"
" s_464)))"
"(if #t"
"(let-values(((id108_466)"
"(let-values(((s_467)"
"(car"
" s_465)))"
" s_467))"
"(()"
"(let-values(((s_468)"
"(cdr"
" s_465)))"
"(let-values(((s_469)"
"(if(syntax?$1"
" s_468)"
"(syntax-e$1"
" s_468)"
" s_468)))"
"(values)))))"
"(values"
" id108_466))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_457))))))"
"(values"
" #%variable-reference106_461"
" id107_462))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_457)))))"
"(values"
" #t"
" #%variable-reference104_458"
" id105_459)))"
"(values #f #f #f)))))"
"(let-values(((ok?_432"
" #%variable-reference109_433"
" #%top110_434"
" id111_435)"
"(let-values(((s_470) s_16))"
"(if(if(not ok?_419)"
"(let-values(((s_471)"
"(if(syntax?$1 s_470)"
"(syntax-e$1 s_470)"
" s_470)))"
"(if(pair? s_471)"
"(if(let-values(((s_472)"
"(car s_471)))"
" #t)"
"(let-values(((s_473)"
"(cdr s_471)))"
"(let-values(((s_474)"
"(if(syntax?$1"
" s_473)"
"(syntax-e$1"
" s_473)"
" s_473)))"
"(if(pair? s_474)"
"(if(let-values(((s_475)"
"(car"
" s_474)))"
"(let-values(((s_476)"
"(if(syntax?$1"
" s_475)"
"(syntax-e$1"
" s_475)"
" s_475)))"
"(if(pair? s_476)"
"(if(let-values(((s_477)"
"(car"
" s_476)))"
" #t)"
"(let-values(((s_478)"
"(cdr"
" s_476)))"
"(if(syntax?$1"
" s_478)"
"(symbol?"
"(syntax-e$1"
" s_478))"
" #f))"
" #f)"
" #f)))"
"(let-values(((s_479)"
"(cdr"
" s_474)))"
"(let-values(((s_480)"
"(if(syntax?$1"
" s_479)"
"(syntax-e$1"
" s_479)"
" s_479)))"
"(null? s_480)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_481) s_470))"
"(let-values(((#%variable-reference109_482"
" #%top110_483"
" id111_484)"
"(let-values(((s_485)"
"(if(syntax?$1"
" s_470)"
"(syntax-e$1"
" s_470)"
" s_470)))"
"(if #t"
"(let-values(((#%variable-reference112_486)"
"(let-values(((s_489)"
"(car"
" s_485)))"
" s_489))"
"((#%top113_487"
" id114_488)"
"(let-values(((s_490)"
"(cdr"
" s_485)))"
"(let-values(((s_491)"
"(if(syntax?$1"
" s_490)"
"(syntax-e$1"
" s_490)"
" s_490)))"
"(if #t"
"(let-values(((#%top115_492"
" id116_493)"
"(let-values(((s_494)"
"(car"
" s_491)))"
"(let-values(((s_495)"
"(if(syntax?$1"
" s_494)"
"(syntax-e$1"
" s_494)"
" s_494)))"
"(if #t"
"(let-values(((#%top117_496)"
"(let-values(((s_498)"
"(car"
" s_495)))"
" s_498))"
"((id118_497)"
"(let-values(((s_499)"
"(cdr"
" s_495)))"
" s_499)))"
"(values"
" #%top117_496"
" id118_497))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_481)))))"
"(()"
"(let-values(((s_500)"
"(cdr"
" s_491)))"
"(let-values(((s_501)"
"(if(syntax?$1"
" s_500)"
"(syntax-e$1"
" s_500)"
" s_500)))"
"(values)))))"
"(values"
" #%top115_492"
" id116_493))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_481))))))"
"(values"
" #%variable-reference112_486"
" #%top113_487"
" id114_488))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_481)))))"
"(values"
" #t"
" #%variable-reference109_482"
" #%top110_483"
" id111_484)))"
"(values #f #f #f #f)))))"
"(let-values(((id_448)"
"(let-values(((or-part_502)"
"(if ok?_419 id105_421 #f)))"
"(if or-part_502"
" or-part_502"
"(if ok?_432 id111_435 #f)))))"
"(correlate*"
" s_16"
"(if id_448"
"(list"
" '#%variable-reference"
"(let-values(((id119_503) id_448)"
"((cctx120_504) cctx_9))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier17.1))"
"(compile-identifier15.1"
" #f"
" #f"
" #f"
" #f"
" id119_503"
" cctx120_504)"
"(compile-identifier17.1 id119_503 cctx120_504))))"
" '(#%variable-reference)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_9)"
"(let-values()"
"(error"
"                                                                             \"found `#%top` in a module body:\""
" s_16))"
"(void))"
"(values))))"
"(let-values(((ok?_505 #%top121_506 id122_507)"
"(let-values(((s_518) s_16))"
"(if(if #t #t #f)"
"(let-values(((orig-s_519) s_518))"
"(let-values(((#%top121_520 id122_521)"
"(let-values(((s_522)"
"(if(syntax?$1"
" s_518)"
"(syntax-e$1"
" s_518)"
" s_518)))"
"(if(pair? s_522)"
"(let-values(((#%top123_523)"
"(let-values(((s_525)"
"(car"
" s_522)))"
" s_525))"
"((id124_524)"
"(let-values(((s_526)"
"(cdr"
" s_522)))"
"(if(let-values(((or-part_527)"
"(if(syntax?$1"
" s_526)"
"(symbol?"
"(syntax-e$1"
" s_526))"
" #f)))"
"(if or-part_527"
" or-part_527"
"(symbol?"
" s_526)))"
" s_526"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"not an identifier\""
" orig-s_519"
" s_526)))))"
"(values"
" #%top123_523"
" id124_524))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_519)))))"
"(values #t #%top121_520 id122_521)))"
"(values #f #f #f)))))"
"(let-values(((...der/compile/expr.rkt:133:9_528)"
" compile-identifier17.1)"
"((temp125_529) id122_507)"
"((cctx126_530) cctx_9)"
"((temp127_531) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier17.1))"
"(compile-identifier15.1"
" #f"
" #f"
" temp127_531"
" #t"
" temp125_529"
" cctx126_530)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:133:9_528"
" keyword-procedure-extract"
" '(#:top?)"
" 4)"
" '(#:top?)"
"(list temp127_531)"
" temp125_529"
" cctx126_530))))))))))))))))"
"(if(identifier? s_16)"
"(let-values()"
"(let-values(((s128_532) s_16)((cctx129_533) cctx_9))"
"(if(variable-reference-constant?(#%variable-reference compile-identifier17.1))"
"(compile-identifier15.1 #f #f #f #f s128_532 cctx129_533)"
"(compile-identifier17.1 s128_532 cctx129_533))))"
"                                    (let-values () (error \"bad syntax after expansion:\" s_16))))))))))))))"
"(case-lambda"
"((in-s_534 cctx_535)(compile7_1 in-s_534 cctx_535 #f #f #f #f))"
"((in-s_536 cctx_537 name_538 result-used?2_539)(compile7_1 in-s_536 cctx_537 name_538 result-used?2_539 #t #t))"
"((in-s_540 cctx_541 name1_542)(compile7_1 in-s_540 cctx_541 name1_542 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_543 body_544 cctx_545)"
"(let-values(((phase_546)(compile-context-phase cctx_545)))"
"(let-values(((gen-formals_547)"
"((letrec-values(((loop_548)"
"(lambda(formals_549)"
"(if(identifier? formals_549)"
"(let-values()(local-id->symbol formals_549 phase_546))"
"(if(syntax?$1 formals_549)"
"(let-values()(loop_548(syntax-e$1 formals_549)))"
"(if(pair? formals_549)"
"(let-values()"
"(cons(loop_548(car formals_549))(loop_548(cdr formals_549))))"
"(let-values() null)))))))"
" loop_548)"
" formals_543)))"
"(list gen-formals_547(compile$2 body_544 cctx_545 #f))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_550 inferred-name_551 orig-s_552)"
"(let-values(((name_553)"
"(let-values(((or-part_556) inferred-name_551))"
"(if or-part_556 or-part_556(syntax-property$1 orig-s_552 inferred-name_551)))))"
"(let-values(((named-s_554)"
"(if name_553"
"(correlated-property"
" s_550"
" 'inferred-name"
"(if(syntax?$1 name_553)(syntax-e$1 name_553) name_553))"
" s_550)))"
"(let-values(((as-method_555)(syntax-property$1 orig-s_552 'method-arity-error)))"
"(if as-method_555(correlated-property s_550 'method-arity-error as-method_555) s_550))))))"
"(define-values"
"(compile-let)"
"(lambda(core-sym_557 s_558 cctx_559 name_560 result-used?_561)"
"(let-values(((rec?_562)(eq? core-sym_557 'letrec-values)))"
"(let-values(((ok?_563 let-values130_564 id131_565 rhs132_566 body133_567)"
"(let-values(((s_585) s_558))"
"(if(if #t #t #f)"
"(let-values(((orig-s_586) s_585))"
"(let-values(((let-values130_587 id131_588 rhs132_589 body133_590)"
"(let-values(((s_591)(if(syntax?$1 s_585)(syntax-e$1 s_585) s_585)))"
"(if(pair? s_591)"
"(let-values(((let-values134_592)"
"(let-values(((s_596)(car s_591))) s_596))"
"((id135_593 rhs136_594 body137_595)"
"(let-values(((s_597)(cdr s_591)))"
"(let-values(((s_598)"
"(if(syntax?$1 s_597)"
"(syntax-e$1 s_597)"
" s_597)))"
"(if(pair? s_598)"
"(let-values(((id138_599 rhs139_600)"
"(let-values(((s_602)(car s_598)))"
"(let-values(((s_603)"
"(if(syntax?$1 s_602)"
"(syntax-e$1 s_602)"
" s_602)))"
"(let-values(((flat-s_604)"
"(to-syntax-list.1"
" s_603)))"
"(if(not flat-s_604)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_586))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_586))"
"(let-values()"
"(let-values(((id_605 rhs_606)"
"(let-values(((lst_607)"
" flat-s_604))"
"(begin"
"(if(list?"
" lst_607)"
"(void)"
"(let-values()"
"(in-list"
" lst_607)))"
"((letrec-values(((for-loop_608)"
"(lambda(id_609"
" rhs_610"
" lst_611)"
"(if(pair?"
" lst_611)"
"(let-values(((s_612)"
"(unsafe-car"
" lst_611)))"
"(if #t"
"(let-values(((id_613"
" rhs_614)"
"(let-values(((id_615)"
" id_609)"
"((rhs_616)"
" rhs_610))"
"(let-values(((id_617"
" rhs_618)"
"(let-values()"
"(let-values(((id145_619"
" rhs146_620)"
"(let-values()"
"(let-values(((s_621)"
"(if(syntax?$1"
" s_612)"
"(syntax-e$1"
" s_612)"
" s_612)))"
"(if(pair?"
" s_621)"
"(let-values(((id141_622)"
"(let-values(((s_624)"
"(car"
" s_621)))"
"(let-values(((s_625)"
"(if(syntax?$1"
" s_624)"
"(syntax-e$1"
" s_624)"
" s_624)))"
"(let-values(((flat-s_626)"
"(to-syntax-list.1"
" s_625)))"
"(if(not"
" flat-s_626)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_586))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_586))"
"(let-values()"
"(let-values(((id_627)"
"(let-values(((lst_628)"
" flat-s_626))"
"(begin"
"(if(list?"
" lst_628)"
"(void)"
"(let-values()"
"(in-list"
" lst_628)))"
"((letrec-values(((for-loop_629)"
"(lambda(id_630"
" lst_631)"
"(if(pair?"
" lst_631)"
"(let-values(((s_632)"
"(unsafe-car"
" lst_631)))"
"(if #t"
"(let-values(((id_633)"
"(let-values(((id_634)"
" id_630))"
"(let-values(((id_635)"
"(let-values()"
"(let-values(((id147_636)"
"(let-values()"
"(if(let-values(((or-part_637)"
"(if(syntax?$1"
" s_632)"
"(symbol?"
"(syntax-e$1"
" s_632))"
" #f)))"
"(if or-part_637"
" or-part_637"
"(symbol?"
" s_632)))"
" s_632"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_586"
" s_632)))))"
"(cons"
" id147_636"
" id_634)))))"
"(values"
" id_635)))))"
"(if #t"
"(for-loop_629"
" id_633"
"(unsafe-cdr"
" lst_631))"
" id_633))"
" id_630))"
" id_630))))"
" for-loop_629)"
" null"
" lst_628)))))"
"(alt-reverse"
" id_627)))))))))"
"((rhs142_623)"
"(let-values(((s_638)"
"(cdr"
" s_621)))"
"(let-values(((s_639)"
"(if(syntax?$1"
" s_638)"
"(syntax-e$1"
" s_638)"
" s_638)))"
"(if(pair?"
" s_639)"
"(let-values(((rhs143_640)"
"(let-values(((s_641)"
"(car"
" s_639)))"
" s_641))"
"(()"
"(let-values(((s_642)"
"(cdr"
" s_639)))"
"(let-values(((s_643)"
"(if(syntax?$1"
" s_642)"
"(syntax-e$1"
" s_642)"
" s_642)))"
"(if(null?"
" s_643)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_586))))))"
"(values"
" rhs143_640))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_586))))))"
"(values"
" id141_622"
" rhs142_623))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_586))))))"
"(values"
"(cons"
" id145_619"
" id_615)"
"(cons"
" rhs146_620"
" rhs_616))))))"
"(values"
" id_617"
" rhs_618)))))"
"(if #t"
"(for-loop_608"
" id_613"
" rhs_614"
"(unsafe-cdr"
" lst_611))"
"(values"
" id_613"
" rhs_614)))"
"(values"
" id_609"
" rhs_610)))"
"(values"
" id_609"
" rhs_610)))))"
" for-loop_608)"
" null"
" null"
" lst_607)))))"
"(values"
"(alt-reverse id_605)"
"(alt-reverse"
" rhs_606))))))))))"
"((body140_601)"
"(let-values(((s_644)(cdr s_598)))"
"(let-values(((s_645)"
"(if(syntax?$1 s_644)"
"(syntax-e$1 s_644)"
" s_644)))"
"(if(pair? s_645)"
"(let-values(((body144_646)"
"(let-values(((s_647)"
"(car"
" s_645)))"
" s_647))"
"(()"
"(let-values(((s_648)"
"(cdr"
" s_645)))"
"(let-values(((s_649)"
"(if(syntax?$1"
" s_648)"
"(syntax-e$1"
" s_648)"
" s_648)))"
"(if(null? s_649)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_586))))))"
"(values body144_646))"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_586))))))"
"(values id138_599 rhs139_600 body140_601))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_586))))))"
"(values let-values134_592 id135_593 rhs136_594 body137_595))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_586)))))"
"(values #t let-values130_587 id131_588 rhs132_589 body133_590)))"
"(values #f #f #f #f #f)))))"
"(let-values(((phase_582)(compile-context-phase cctx_559)))"
"(let-values(((idss_583) id131_565))"
"(let-values(((symss_584)"
"(alt-reverse"
"(let-values(((lst_650) idss_583))"
"(begin"
"(if(list? lst_650)(void)(let-values()(in-list lst_650)))"
"((letrec-values(((for-loop_651)"
"(lambda(fold-var_652 lst_653)"
"(if(pair? lst_653)"
"(let-values(((ids_654)(unsafe-car lst_653)))"
"(if #t"
"(let-values(((fold-var_655)"
"(let-values(((fold-var_656) fold-var_652))"
"(let-values(((fold-var_657)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_658)"
" ids_654))"
"(begin"
"(if(list? lst_658)"
"(void)"
"(let-values()"
"(in-list lst_658)))"
"((letrec-values(((for-loop_659)"
"(lambda(fold-var_660"
" lst_661)"
"(if(pair?"
" lst_661)"
"(let-values(((id_662)"
"(unsafe-car"
" lst_661)))"
"(if #t"
"(let-values(((fold-var_663)"
"(let-values(((fold-var_664)"
" fold-var_660))"
"(let-values(((fold-var_665)"
"(let-values()"
"(cons"
"(let-values()"
"(local-id->symbol"
" id_662"
" phase_582))"
" fold-var_664))))"
"(values"
" fold-var_665)))))"
"(if #t"
"(for-loop_659"
" fold-var_663"
"(unsafe-cdr"
" lst_661))"
" fold-var_663))"
" fold-var_660))"
" fold-var_660))))"
" for-loop_659)"
" null"
" lst_658)))))"
" fold-var_656))))"
"(values fold-var_657)))))"
"(if #t"
"(for-loop_651 fold-var_655(unsafe-cdr lst_653))"
" fold-var_655))"
" fold-var_652))"
" fold-var_652))))"
" for-loop_651)"
" null"
" lst_650))))))"
"(correlate*"
" s_558"
"(list"
" core-sym_557"
"(alt-reverse"
"(let-values(((lst_666) symss_584)((lst_667) idss_583)((lst_668) rhs132_566))"
"(begin"
"(if(list? lst_666)(void)(let-values()(in-list lst_666)))"
"(if(list? lst_667)(void)(let-values()(in-list lst_667)))"
"(if(list? lst_668)(void)(let-values()(in-list lst_668)))"
"((letrec-values(((for-loop_669)"
"(lambda(fold-var_670 lst_671 lst_672 lst_673)"
"(if(if(pair? lst_671)(if(pair? lst_672)(pair? lst_673) #f) #f)"
"(let-values(((syms_674)(unsafe-car lst_671))"
"((ids_675)(unsafe-car lst_672))"
"((rhs_676)(unsafe-car lst_673)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_677)"
"(let-values(((fold-var_678) fold-var_670))"
"(let-values(((fold-var_679)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" syms_674"
"(compile$2"
" rhs_676"
" cctx_559"
"(if(= 1(length ids_675))"
"(car ids_675)"
" #f))))"
" fold-var_678))))"
"(values fold-var_679)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_669"
" fold-var_677"
"(unsafe-cdr lst_671)"
"(unsafe-cdr lst_672)"
"(unsafe-cdr lst_673))"
" fold-var_677))"
" fold-var_670))"
" fold-var_670))))"
" for-loop_669)"
" null"
" lst_666"
" lst_667"
" lst_668))))"
"(compile$2 body133_567 cctx_559 name_560 result-used?_561))))))))))"
"(define-values"
"(compile-identifier15.1)"
"(lambda(set-to9_680 set-to11_681 top?10_682 top?12_683 s13_684 cctx14_685)"
"(let-values(((s_686) s13_684))"
"(let-values(((cctx_687) cctx14_685))"
"(let-values(((rhs_688)(if set-to11_681 set-to9_680 #f)))"
"(let-values(((top?_689)(if top?12_683 top?10_682 #f)))"
"(let-values()"
"(let-values(((phase_690)(compile-context-phase cctx_687)))"
"(let-values(((normal-b_691)"
"(let-values(((s148_694) s_686)((phase149_695) phase_690))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f s148_694 phase149_695)"
"(resolve+shift15.1 s148_694 phase149_695)))))"
"(let-values(((b_692)"
"(let-values(((or-part_696) normal-b_691))"
"(if or-part_696"
" or-part_696"
"(let-values(((temp150_697)(compile-context-self cctx_687))"
"((phase151_698) phase_690)"
"((temp152_699)(syntax-e$1 s_686)))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp150_697"
" phase151_698"
" temp152_699)"
"(make-module-binding22.1 temp150_697 phase151_698 temp152_699)))))))"
"(let-values(((sym_693)"
"(if(local-binding? b_692)"
"(let-values()"
"(let-values(((sym_700)(local-key->symbol(local-binding-key b_692))))"
"(begin"
"(if sym_700"
"(void)"
"                                            (let-values () (error \"missing a binding after expansion:\" s_686)))"
" sym_700)))"
"(if(module-binding? b_692)"
"(let-values()"
"(let-values(((mpi_701)"
"(if top?_689"
"(compile-context-self cctx_687)"
"(module-binding-module b_692))))"
"(let-values(((mod-name_702)(1/module-path-index-resolve mpi_701)))"
"(let-values(((ns_703)(compile-context-namespace cctx_687)))"
"(let-values(((mod_704)(namespace->module ns_703 mod-name_702)))"
"(if(if mod_704(module-primitive? mod_704) #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(zero?(module-binding-phase b_692))"
"(void)"
"(let-values()"
"(error"
"                                                                         \"internal error: non-zero phase for a primitive\")))"
"(values))))"
"(let-values((()"
"(begin"
"(if rhs_688"
"(let-values()"
"(error"
"                                                                           \"internal error: cannot assign to a primitive:\""
" s_686))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ns153_706) ns_703)"
"((mpi154_707) mpi_701)"
"((temp155_708) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns153_706"
" mpi154_707"
" temp155_708)"
"(namespace-module-instantiate!95.1"
" ns153_706"
" mpi154_707"
" temp155_708)))"
"(values))))"
"(let-values(((m-ns_705)"
"(let-values(((ns156_709) ns_703)"
"((mod-name157_710) mod-name_702)"
"((temp158_711) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns156_709"
" mod-name157_710"
" temp158_711)"
"(namespace->module-namespace81.1"
" ns156_709"
" mod-name157_710"
" temp158_711)))))"
"(module-binding-sym b_692))))))"
"(if(eq? mpi_701(compile-context-module-self cctx_687))"
"(let-values()"
"(let-values(((header_712)(compile-context-header cctx_687)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_712)"
"(module-binding-sym b_692))))"
"(let-values()"
"(let-values(((temp159_713)(compile-context-header cctx_687))"
"((mpi160_714) mpi_701)"
"((temp161_715)(module-binding-phase b_692))"
"((temp162_716)(module-binding-sym b_692))"
"((temp163_717)"
"(let-values(((or-part_718)"
"(module-binding-extra-inspector"
" b_692)))"
"(if or-part_718"
" or-part_718"
"(syntax-inspector s_686)))))"
"(if(variable-reference-constant?"
"(#%variable-reference register-required-variable-use!20.1))"
"(register-required-variable-use!18.1"
" #f"
" #f"
" temp159_713"
" mpi160_714"
" temp161_715"
" temp162_716"
" temp163_717)"
"(register-required-variable-use!20.1"
" temp159_713"
" mpi160_714"
" temp161_715"
" temp162_716"
" temp163_717)))))))))))"
"                                      (let-values () (error \"not a reference to a module or local binding:\" s_686))))))"
"(correlate* s_686(if rhs_688(list 'set! sym_693 rhs_688) sym_693)))))))))))))"
"(define-values"
"(unpack16.1$2)"
"(lambda(given-kws_719 given-args_720 s13_721 cctx14_722)"
"(let-values(((set-to11_723)(if(pair? given-kws_719)(eq? '#:set-to(car given-kws_719)) #f)))"
"(let-values(((set-to9_724)(if set-to11_723(car given-args_720)(void)))"
"((given-kws_725)(if set-to11_723(cdr given-kws_719) given-kws_719))"
"((given-args_726)(if set-to11_723(cdr given-args_720) given-args_720)))"
"(let-values(((top?12_727)(pair? given-kws_725)))"
"(let-values(((top?10_728)(if top?12_727(car given-args_726)(void))))"
"(compile-identifier15.1 set-to9_724 set-to11_723 top?10_728 top?12_727 s13_721 cctx14_722)))))))"
"(define-values"
"(compile-identifier17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_729 given-argc_730)"
"(if(= given-argc_730 4)"
"(let-values(((l1_731) given-kws_729))"
"(let-values(((l1_732)(if(null? l1_731) l1_731(if(eq?(car l1_731) '#:set-to)(cdr l1_731) l1_731))))"
"(let-values(((l1_733) l1_732))"
"(let-values(((l1_734)(if(null? l1_733) l1_733(if(eq?(car l1_733) '#:top?)(cdr l1_733) l1_733))))"
"(null? l1_734)))))"
" #f))"
"(case-lambda"
"((given-kws_735 given-args_736 s_737 cctx_738)(unpack16.1$2 given-kws_735 given-args_736 s_737 cctx_738)))"
" null"
" '(#:set-to #:top?)"
"(let-values(((compile-identifier_739)(case-lambda((s_740 cctx_741)(unpack16.1$2 null null s_740 cctx_741)))))"
" compile-identifier_739)))"
"(define-values"
"(local-id->symbol)"
"(lambda(id_742 phase_743)"
"(let-values(((b_744)"
"(let-values(((id164_745) id_742)((phase165_746) phase_743))"
"(if(variable-reference-constant?(#%variable-reference resolve21.1))"
"(resolve19.1 #f #f #f #f #f #f id164_745 phase165_746)"
"(resolve21.1 id164_745 phase165_746)))))"
"(begin"
"        (if (local-binding? b_744) (void) (let-values () (error \"bad binding:\" id_742 phase_743 b_744)))"
"(local-key->symbol(local-binding-key b_744))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_747 phase_748 cctx_749)"
"(let-values(((pos_750)(add-syntax-literal!(compile-context-header cctx_749) q_747)))"
"(if(compile-context-lazy-syntax-literals? cctx_749)"
"(let-values()(generate-lazy-syntax-literal-lookup phase_748 pos_750))"
"(let-values()(generate-eager-syntax-literal-lookup phase_748 pos_750))))))"
"(define-values"
"(def-ids-to-binding-syms)"
"(lambda(ids_1 phase_2 self_3)"
"(alt-reverse"
"(let-values(((lst_4) ids_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_12)"
"(let-values(((...ile/id-to-symbol.rkt:12:14_13)"
" resolve+shift15.1)"
"((id1_14) id_8)"
"((phase2_15) phase_2)"
"((temp3_16) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp3_16"
" #t"
" #f"
" #f"
" id1_14"
" phase2_15)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ile/id-to-symbol.rkt:12:14_13"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_16)"
" id1_14"
" phase2_15)))))"
"(begin"
"(if(if(module-binding? b_12)"
"(if(eq?"
" self_3"
"(module-binding-module b_12))"
"(eqv?"
" phase_2"
"(module-binding-phase b_12))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                               \"bad binding for definition:\""
" id_8"
" self_3"
"                                                                               \"vs.\""
"(if b_12(module-binding-module b_12) #f)"
" phase_2)))"
"(module-binding-sym b_12))))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))"
"(define-values"
"(lifted/1.1$16)"
"(make-required"
" 'compile-forms"
"(case-lambda((self_2 bodys_3 cctx_4 mpis_5)(apply missing-kw self_2 bodys_3 cctx_4 mpis_5 null)))"
" #f"
" #f))"
"(define-values"
"(compile-forms16.1)"
"(lambda(body-imports1_6"
" compiled-expression-callback4_7"
" compiled-expression-callback10_8"
" encoded-root-expand-ctx-box2_9"
" encoded-root-expand-ctx-box8_10"
" other-form-callback5_11"
" other-form-callback11_12"
" root-ctx-only-if-syntax?3_13"
" root-ctx-only-if-syntax?9_14"
" to-source?6_15"
" to-source?12_16"
" bodys13_17"
" cctx14_18"
" mpis15_19)"
"(let-values(((bodys_20) bodys13_17))"
"(let-values(((cctx_21) cctx14_18))"
"(let-values(((mpis_22) mpis15_19))"
"(let-values(((body-imports_23) body-imports1_6))"
"(let-values(((encoded-root-expand-ctx-box_24)"
"(if encoded-root-expand-ctx-box8_10 encoded-root-expand-ctx-box2_9 #f)))"
"(let-values(((root-ctx-only-if-syntax?_25)"
"(if root-ctx-only-if-syntax?9_14 root-ctx-only-if-syntax?3_13 #f)))"
"(let-values(((compiled-expression-callback_26)"
"(if compiled-expression-callback10_8 compiled-expression-callback4_7 void)))"
"(let-values(((other-form-callback_27)(if other-form-callback11_12 other-form-callback5_11 void)))"
"(let-values(((to-source?_28)(if to-source?12_16 to-source?6_15 #f)))"
"(let-values()"
"(let-values(((phase_29)(compile-context-phase cctx_21)))"
"(let-values(((self_30)(compile-context-self cctx_21)))"
"(let-values(((phase-to-body_31)(make-hasheqv)))"
"(let-values(((add-body!_32)"
"(lambda(phase_56 body_57)"
"(hash-update!"
" phase-to-body_31"
" phase_56"
"(lambda(l_58)(cons body_57 l_58))"
" null))))"
"(let-values(((phase-to-header_33)(make-hasheqv)))"
"(let-values(((find-or-create-header!_34)"
"(lambda(phase_59)"
"(let-values(((or-part_60)(hash-ref phase-to-header_33 phase_59 #f)))"
"(if or-part_60"
" or-part_60"
"(let-values(((header_61)(make-header mpis_22)))"
"(begin"
"(hash-set! phase-to-header_33 phase_59 header_61)"
" header_61)))))))"
"(let-values(((saw-define-syntaxes?_35) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_21)"
"(let-values()"
"((letrec-values(((loop!_62)"
"(lambda(bodys_63 phase_64 header_65)"
"(let-values(((lst_66) bodys_63))"
"(begin"
"(if(list? lst_66)"
"(void)"
"(let-values()(in-list lst_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68"
" lst_69)"
"(if(pair? lst_69)"
"(let-values(((body_70)"
"(unsafe-car"
" lst_69)))"
"(if #t"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_68))"
"(let-values(((fold-var_73)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_74)"
"(core-form-sym"
" body_70"
" phase_64)))"
"(if(equal?"
" tmp_74"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_75"
" define-values20_76"
" id21_77"
" rhs22_78)"
"(let-values(((s_91)"
" body_70))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_92)"
" s_91))"
"(let-values(((define-values20_93"
" id21_94"
" rhs22_95)"
"(let-values(((s_96)"
"(if(syntax?$1"
" s_91)"
"(syntax-e$1"
" s_91)"
" s_91)))"
"(if(pair?"
" s_96)"
"(let-values(((define-values23_97)"
"(let-values(((s_100)"
"(car"
" s_96)))"
" s_100))"
"((id24_98"
" rhs25_99)"
"(let-values(((s_101)"
"(cdr"
" s_96)))"
"(let-values(((s_102)"
"(if(syntax?$1"
" s_101)"
"(syntax-e$1"
" s_101)"
" s_101)))"
"(if(pair?"
" s_102)"
"(let-values(((id26_103)"
"(let-values(((s_105)"
"(car"
" s_102)))"
"(let-values(((s_106)"
"(if(syntax?$1"
" s_105)"
"(syntax-e$1"
" s_105)"
" s_105)))"
"(let-values(((flat-s_107)"
"(to-syntax-list.1"
" s_106)))"
"(if(not"
" flat-s_107)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_92))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_92))"
"(let-values()"
"(let-values(((id_108)"
"(let-values(((lst_109)"
" flat-s_107))"
"(begin"
"(if(list?"
" lst_109)"
"(void)"
"(let-values()"
"(in-list"
" lst_109)))"
"((letrec-values(((for-loop_110)"
"(lambda(id_111"
" lst_112)"
"(if(pair?"
" lst_112)"
"(let-values(((s_113)"
"(unsafe-car"
" lst_112)))"
"(if #t"
"(let-values(((id_114)"
"(let-values(((id_115)"
" id_111))"
"(let-values(((id_116)"
"(let-values()"
"(let-values(((id29_117)"
"(let-values()"
"(if(let-values(((or-part_118)"
"(if(syntax?$1"
" s_113)"
"(symbol?"
"(syntax-e$1"
" s_113))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(symbol?"
" s_113)))"
" s_113"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_92"
" s_113)))))"
"(cons"
" id29_117"
" id_115)))))"
"(values"
" id_116)))))"
"(if #t"
"(for-loop_110"
" id_114"
"(unsafe-cdr"
" lst_112))"
" id_114))"
" id_111))"
" id_111))))"
" for-loop_110)"
" null"
" lst_109)))))"
"(alt-reverse"
" id_108)))))))))"
"((rhs27_104)"
"(let-values(((s_119)"
"(cdr"
" s_102)))"
"(let-values(((s_120)"
"(if(syntax?$1"
" s_119)"
"(syntax-e$1"
" s_119)"
" s_119)))"
"(if(pair?"
" s_120)"
"(let-values(((rhs28_121)"
"(let-values(((s_122)"
"(car"
" s_120)))"
" s_122))"
"(()"
"(let-values(((s_123)"
"(cdr"
" s_120)))"
"(let-values(((s_124)"
"(if(syntax?$1"
" s_123)"
"(syntax-e$1"
" s_123)"
" s_123)))"
"(if(null?"
" s_124)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_92))))))"
"(values"
" rhs28_121))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_92))))))"
"(values"
" id26_103"
" rhs27_104))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_92))))))"
"(values"
" define-values23_97"
" id24_98"
" rhs25_99))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_92)))))"
"(values"
" #t"
" define-values20_93"
" id21_94"
" rhs22_95)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((lst_125)"
"(def-ids-to-binding-syms"
" id21_77"
" phase_64"
" self_30)))"
"(begin"
"(if(list?"
" lst_125)"
"(void)"
"(let-values()"
"(in-list"
" lst_125)))"
"((letrec-values(((for-loop_126)"
"(lambda(fold-var_127"
" lst_128)"
"(if(pair?"
" lst_128)"
"(let-values(((sym_129)"
"(unsafe-car"
" lst_128)))"
"(if #t"
"(let-values(((fold-var_130)"
"(let-values(((fold-var_131)"
" fold-var_127))"
"(let-values(((fold-var_132)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_133)"
"(select-fresh"
" sym_129"
" header_65)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_65)"
" sym_129"
" def-sym_133)"
"(set-header-binding-syms-in-order!"
" header_65"
"(cons"
" sym_129"
"(header-binding-syms-in-order"
" header_65)))"
"(register-as-defined!"
" header_65"
" def-sym_133))))"
"(void)))))"
"(values"
" fold-var_132)))))"
"(if #t"
"(for-loop_126"
" fold-var_130"
"(unsafe-cdr"
" lst_128))"
" fold-var_130))"
" fold-var_127))"
" fold-var_127))))"
" for-loop_126)"
"(void)"
" lst_125)))))"
"(if(equal?"
" tmp_74"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_134"
" begin-for-syntax30_135"
" e31_136)"
"(let-values(((s_147)"
" body_70))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_148)"
" s_147))"
"(let-values(((begin-for-syntax30_149"
" e31_150)"
"(let-values(((s_151)"
"(if(syntax?$1"
" s_147)"
"(syntax-e$1"
" s_147)"
" s_147)))"
"(if(pair?"
" s_151)"
"(let-values(((begin-for-syntax32_152)"
"(let-values(((s_154)"
"(car"
" s_151)))"
" s_154))"
"((e33_153)"
"(let-values(((s_155)"
"(cdr"
" s_151)))"
"(let-values(((s_156)"
"(if(syntax?$1"
" s_155)"
"(syntax-e$1"
" s_155)"
" s_155)))"
"(let-values(((flat-s_157)"
"(to-syntax-list.1"
" s_156)))"
"(if(not"
" flat-s_157)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_148))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_148))"
"(let-values()"
" flat-s_157))))))))"
"(values"
" begin-for-syntax32_152"
" e33_153))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_148)))))"
"(values"
" #t"
" begin-for-syntax30_149"
" e31_150)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop!_62"
" e31_136"
"(add1"
" phase_64)"
"(find-or-create-header!_34"
"(add1"
" phase_64)))))"
"(let-values()"
"(void))))))"
"(void)))))"
"(values"
" fold-var_73)))))"
"(if #t"
"(for-loop_67"
" fold-var_71"
"(unsafe-cdr"
" lst_69))"
" fold-var_71))"
" fold-var_68))"
" fold-var_68))))"
" for-loop_67)"
"(void)"
" lst_66))))))"
" loop!_62)"
" bodys_20"
" phase_29"
"(find-or-create-header!_34 phase_29)))"
"(void))"
"(values))))"
"(let-values(((as-required?_36)"
"(lambda(header_158)"
"(lambda(sym_159)"
"(registered-as-required? header_158 sym_159)))))"
"(let-values(((last-i_37)(sub1(length bodys_20))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_160)"
"(lambda(bodys_161 phase_162 header_163)"
"(let-values(((lst_164) bodys_161)"
"((start_165) 0))"
"(begin"
"(if(list? lst_164)"
"(void)"
"(let-values()(in-list lst_164)))"
"(if(exact-nonnegative-integer?"
" start_165)"
"(void)"
"(let-values()"
"(in-naturals start_165)))"
"((letrec-values(((for-loop_166)"
"(lambda(fold-var_167"
" lst_168"
" pos_169)"
"(if(if(pair?"
" lst_168)"
" #t"
" #f)"
"(let-values(((in-body_170)"
"(unsafe-car"
" lst_168))"
"((i_171)"
" pos_169))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_172)"
"(let-values(((fold-var_173)"
" fold-var_167))"
"(let-values(((fold-var_174)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((body_175)"
"(syntax-disarm$1"
" in-body_170)))"
"(let-values(((tmp_176)"
"(core-form-sym"
" body_175"
" phase_162)))"
"(if(equal?"
" tmp_176"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_177"
" define-values34_178"
" id35_179"
" rhs36_180)"
"(let-values(((s_197)"
" body_175))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_198)"
" s_197))"
"(let-values(((define-values34_199"
" id35_200"
" rhs36_201)"
"(let-values(((s_202)"
"(if(syntax?$1"
" s_197)"
"(syntax-e$1"
" s_197)"
" s_197)))"
"(if(pair?"
" s_202)"
"(let-values(((define-values37_203)"
"(let-values(((s_206)"
"(car"
" s_202)))"
" s_206))"
"((id38_204"
" rhs39_205)"
"(let-values(((s_207)"
"(cdr"
" s_202)))"
"(let-values(((s_208)"
"(if(syntax?$1"
" s_207)"
"(syntax-e$1"
" s_207)"
" s_207)))"
"(if(pair?"
" s_208)"
"(let-values(((id40_209)"
"(let-values(((s_211)"
"(car"
" s_208)))"
"(let-values(((s_212)"
"(if(syntax?$1"
" s_211)"
"(syntax-e$1"
" s_211)"
" s_211)))"
"(let-values(((flat-s_213)"
"(to-syntax-list.1"
" s_212)))"
"(if(not"
" flat-s_213)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_198))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_198))"
"(let-values()"
"(let-values(((id_214)"
"(let-values(((lst_215)"
" flat-s_213))"
"(begin"
"(if(list?"
" lst_215)"
"(void)"
"(let-values()"
"(in-list"
" lst_215)))"
"((letrec-values(((for-loop_216)"
"(lambda(id_217"
" lst_218)"
"(if(pair?"
" lst_218)"
"(let-values(((s_219)"
"(unsafe-car"
" lst_218)))"
"(if #t"
"(let-values(((id_220)"
"(let-values(((id_221)"
" id_217))"
"(let-values(((id_222)"
"(let-values()"
"(let-values(((id43_223)"
"(let-values()"
"(if(let-values(((or-part_224)"
"(if(syntax?$1"
" s_219)"
"(symbol?"
"(syntax-e$1"
" s_219))"
" #f)))"
"(if or-part_224"
" or-part_224"
"(symbol?"
" s_219)))"
" s_219"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_198"
" s_219)))))"
"(cons"
" id43_223"
" id_221)))))"
"(values"
" id_222)))))"
"(if #t"
"(for-loop_216"
" id_220"
"(unsafe-cdr"
" lst_218))"
" id_220))"
" id_217))"
" id_217))))"
" for-loop_216)"
" null"
" lst_215)))))"
"(alt-reverse"
" id_214)))))))))"
"((rhs41_210)"
"(let-values(((s_225)"
"(cdr"
" s_208)))"
"(let-values(((s_226)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_226)"
"(let-values(((rhs42_227)"
"(let-values(((s_228)"
"(car"
" s_226)))"
" s_228))"
"(()"
"(let-values(((s_229)"
"(cdr"
" s_226)))"
"(let-values(((s_230)"
"(if(syntax?$1"
" s_229)"
"(syntax-e$1"
" s_229)"
" s_229)))"
"(if(null?"
" s_230)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_198))))))"
"(values"
" rhs42_227))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_198))))))"
"(values"
" id40_209"
" rhs41_210))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_198))))))"
"(values"
" define-values37_203"
" id38_204"
" rhs39_205))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_198)))))"
"(values"
" #t"
" define-values34_199"
" id35_200"
" rhs36_201)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_193)"
" id35_179))"
"(let-values(((binding-syms_194)"
"(def-ids-to-binding-syms"
" ids_193"
" phase_162"
" self_30)))"
"(let-values(((def-syms_195)"
"(if(compile-context-module-self"
" cctx_21)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_231)"
" binding-syms_194))"
"(begin"
"(if(list?"
" lst_231)"
"(void)"
"(let-values()"
"(in-list"
" lst_231)))"
"((letrec-values(((for-loop_232)"
"(lambda(fold-var_233"
" lst_234)"
"(if(pair?"
" lst_234)"
"(let-values(((binding-sym_235)"
"(unsafe-car"
" lst_234)))"
"(if #t"
"(let-values(((fold-var_236)"
"(let-values(((fold-var_237)"
" fold-var_233))"
"(let-values(((fold-var_238)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_163)"
" binding-sym_235))"
" fold-var_237))))"
"(values"
" fold-var_238)))))"
"(if #t"
"(for-loop_232"
" fold-var_236"
"(unsafe-cdr"
" lst_234))"
" fold-var_236))"
" fold-var_233))"
" fold-var_233))))"
" for-loop_232)"
" null"
" lst_231)))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_239)"
" binding-syms_194))"
"(begin"
"(if(list?"
" lst_239)"
"(void)"
"(let-values()"
"(in-list"
" lst_239)))"
"((letrec-values(((for-loop_240)"
"(lambda(fold-var_241"
" lst_242)"
"(if(pair?"
" lst_242)"
"(let-values(((binding-sym_243)"
"(unsafe-car"
" lst_242)))"
"(if #t"
"(let-values(((fold-var_244)"
"(let-values(((fold-var_245)"
" fold-var_241))"
"(let-values(((fold-var_246)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...der/compile/form.rkt:104:15_247)"
" register-required-variable-use!20.1)"
"((header44_248)"
" header_163)"
"((temp45_249)"
"(compile-context-self"
" cctx_21))"
"((phase46_250)"
" phase_162)"
"((binding-sym47_251)"
" binding-sym_243)"
"((temp48_252)"
" #f)"
"((temp49_253)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" register-required-variable-use!20.1))"
"(register-required-variable-use!18.1"
" temp49_253"
" #t"
" header44_248"
" temp45_249"
" phase46_250"
" binding-sym47_251"
" temp48_252)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/form.rkt:104:15_247"
" keyword-procedure-extract"
" '(#:defined?)"
" 7)"
" '(#:defined?)"
"(list"
" temp49_253)"
" header44_248"
" temp45_249"
" phase46_250"
" binding-sym47_251"
" temp48_252))))"
" fold-var_245))))"
"(values"
" fold-var_246)))))"
"(if #t"
"(for-loop_240"
" fold-var_244"
"(unsafe-cdr"
" lst_242))"
" fold-var_244))"
" fold-var_241))"
" fold-var_241))))"
" for-loop_240)"
" null"
" lst_239))))))))"
"(let-values(((rhs_196)"
"(compile$2"
" rhs36_180"
"(let-values(((the-struct_254)"
" cctx_21))"
"(if(compile-context?"
" the-struct_254)"
"(let-values(((phase50_255)"
" phase_162)"
"((header51_256)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_254)"
" phase50_255"
"(compile-context-self"
" the-struct_254)"
"(compile-context-module-self"
" the-struct_254)"
"(compile-context-full-module-name"
" the-struct_254)"
"(compile-context-lazy-syntax-literals?"
" the-struct_254)"
" header51_256))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                      \"compile-context?\""
" the-struct_254)))"
"(if(="
"(length"
" ids_193)"
" 1)"
"(car"
" ids_193)"
" #f))))"
"(begin"
"(compiled-expression-callback_26"
" rhs_196"
"(length"
" def-syms_195)"
" phase_162"
"(as-required?_36"
" header_163))"
"(add-body!_32"
" phase_162"
"(list"
" 'define-values"
" def-syms_195"
" rhs_196))"
"(if(let-values(((or-part_257)"
"(compile-context-module-self"
" cctx_21)))"
"(if or-part_257"
" or-part_257"
"(null?"
" ids_193)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_32"
" phase_162"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_258)"
" def-syms_195))"
"(begin"
"(if(list?"
" lst_258)"
"(void)"
"(let-values()"
"(in-list"
" lst_258)))"
"((letrec-values(((for-loop_259)"
"(lambda(fold-var_260"
" lst_261)"
"(if(pair?"
" lst_261)"
"(let-values(((def-sym_262)"
"(unsafe-car"
" lst_261)))"
"(if #t"
"(let-values(((fold-var_263)"
"(let-values(((fold-var_264)"
" fold-var_260))"
"(let-values(((fold-var_265)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_262"
" '(#f)))"
" fold-var_264))))"
"(values"
" fold-var_265)))))"
"(if #t"
"(for-loop_259"
" fold-var_263"
"(unsafe-cdr"
" lst_261))"
" fold-var_263))"
" fold-var_260))"
" fold-var_260))))"
" for-loop_259)"
" null"
" lst_258)))))"
" '((void))))"
"(add-body!_32"
" phase_162"
"(compile-top-level-bind"
" ids_193"
" binding-syms_194"
"(let-values(((the-struct_266)"
" cctx_21))"
"(if(compile-context?"
" the-struct_266)"
"(let-values(((phase52_267)"
" phase_162)"
"((header53_268)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_266)"
" phase52_267"
"(compile-context-self"
" the-struct_266)"
"(compile-context-module-self"
" the-struct_266)"
"(compile-context-full-module-name"
" the-struct_266)"
"(compile-context-lazy-syntax-literals?"
" the-struct_266)"
" header53_268))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                   \"compile-context?\""
" the-struct_266)))"
" #f))))))))))))"
"(if(equal?"
" tmp_176"
" 'define-syntaxes)"
"(let-values()"
"(let-values(((ok?_269"
" define-syntaxes54_270"
" id55_271"
" rhs56_272)"
"(let-values(((s_291)"
" body_175))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_292)"
" s_291))"
"(let-values(((define-syntaxes54_293"
" id55_294"
" rhs56_295)"
"(let-values(((s_296)"
"(if(syntax?$1"
" s_291)"
"(syntax-e$1"
" s_291)"
" s_291)))"
"(if(pair?"
" s_296)"
"(let-values(((define-syntaxes57_297)"
"(let-values(((s_300)"
"(car"
" s_296)))"
" s_300))"
"((id58_298"
" rhs59_299)"
"(let-values(((s_301)"
"(cdr"
" s_296)))"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_301)"
"(syntax-e$1"
" s_301)"
" s_301)))"
"(if(pair?"
" s_302)"
"(let-values(((id60_303)"
"(let-values(((s_305)"
"(car"
" s_302)))"
"(let-values(((s_306)"
"(if(syntax?$1"
" s_305)"
"(syntax-e$1"
" s_305)"
" s_305)))"
"(let-values(((flat-s_307)"
"(to-syntax-list.1"
" s_306)))"
"(if(not"
" flat-s_307)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_292))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_292))"
"(let-values()"
"(let-values(((id_308)"
"(let-values(((lst_309)"
" flat-s_307))"
"(begin"
"(if(list?"
" lst_309)"
"(void)"
"(let-values()"
"(in-list"
" lst_309)))"
"((letrec-values(((for-loop_310)"
"(lambda(id_311"
" lst_312)"
"(if(pair?"
" lst_312)"
"(let-values(((s_313)"
"(unsafe-car"
" lst_312)))"
"(if #t"
"(let-values(((id_314)"
"(let-values(((id_315)"
" id_311))"
"(let-values(((id_316)"
"(let-values()"
"(let-values(((id63_317)"
"(let-values()"
"(if(let-values(((or-part_318)"
"(if(syntax?$1"
" s_313)"
"(symbol?"
"(syntax-e$1"
" s_313))"
" #f)))"
"(if or-part_318"
" or-part_318"
"(symbol?"
" s_313)))"
" s_313"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_292"
" s_313)))))"
"(cons"
" id63_317"
" id_315)))))"
"(values"
" id_316)))))"
"(if #t"
"(for-loop_310"
" id_314"
"(unsafe-cdr"
" lst_312))"
" id_314))"
" id_311))"
" id_311))))"
" for-loop_310)"
" null"
" lst_309)))))"
"(alt-reverse"
" id_308)))))))))"
"((rhs61_304)"
"(let-values(((s_319)"
"(cdr"
" s_302)))"
"(let-values(((s_320)"
"(if(syntax?$1"
" s_319)"
"(syntax-e$1"
" s_319)"
" s_319)))"
"(if(pair?"
" s_320)"
"(let-values(((rhs62_321)"
"(let-values(((s_322)"
"(car"
" s_320)))"
" s_322))"
"(()"
"(let-values(((s_323)"
"(cdr"
" s_320)))"
"(let-values(((s_324)"
"(if(syntax?$1"
" s_323)"
"(syntax-e$1"
" s_323)"
" s_323)))"
"(if(null?"
" s_324)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_292))))))"
"(values"
" rhs62_321))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_292))))))"
"(values"
" id60_303"
" rhs61_304))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_292))))))"
"(values"
" define-syntaxes57_297"
" id58_298"
" rhs59_299))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_292)))))"
"(values"
" #t"
" define-syntaxes54_293"
" id55_294"
" rhs56_295)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_285)"
" id55_271))"
"(let-values(((binding-syms_286)"
"(def-ids-to-binding-syms"
" ids_285"
" phase_162"
" self_30)))"
"(let-values(((next-header_287)"
"(find-or-create-header!_34"
"(add1"
" phase_162))))"
"(let-values(((gen-syms_288)"
"(alt-reverse"
"(let-values(((lst_325)"
" binding-syms_286))"
"(begin"
"(if(list?"
" lst_325)"
"(void)"
"(let-values()"
"(in-list"
" lst_325)))"
"((letrec-values(((for-loop_326)"
"(lambda(fold-var_327"
" lst_328)"
"(if(pair?"
" lst_328)"
"(let-values(((binding-sym_329)"
"(unsafe-car"
" lst_328)))"
"(if #t"
"(let-values(((fold-var_330)"
"(let-values(((fold-var_331)"
" fold-var_327))"
"(let-values(((fold-var_332)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_329"
" next-header_287))"
" fold-var_331))))"
"(values"
" fold-var_332)))))"
"(if #t"
"(for-loop_326"
" fold-var_330"
"(unsafe-cdr"
" lst_328))"
" fold-var_330))"
" fold-var_327))"
" fold-var_327))))"
" for-loop_326)"
" null"
" lst_325))))))"
"(let-values(((rhs_289)"
"(compile$2"
" rhs56_272"
"(let-values(((the-struct_333)"
" cctx_21))"
"(if(compile-context?"
" the-struct_333)"
"(let-values(((phase64_334)"
"(add1"
" phase_162))"
"((header65_335)"
" next-header_287))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_333)"
" phase64_334"
"(compile-context-self"
" the-struct_333)"
"(compile-context-module-self"
" the-struct_333)"
"(compile-context-full-module-name"
" the-struct_333)"
"(compile-context-lazy-syntax-literals?"
" the-struct_333)"
" header65_335))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                          \"compile-context?\""
" the-struct_333))))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_26"
" rhs_289"
"(length"
" gen-syms_288)"
"(add1"
" phase_162)"
"(as-required?_36"
" header_163))"
"(values))))"
"(let-values(((transformer-set!s_290)"
"(alt-reverse"
"(let-values(((lst_336)"
" binding-syms_286)"
"((lst_337)"
" gen-syms_288))"
"(begin"
"(if(list?"
" lst_336)"
"(void)"
"(let-values()"
"(in-list"
" lst_336)))"
"(if(list?"
" lst_337)"
"(void)"
"(let-values()"
"(in-list"
" lst_337)))"
"((letrec-values(((for-loop_338)"
"(lambda(fold-var_339"
" lst_340"
" lst_341)"
"(if(if(pair?"
" lst_340)"
"(pair?"
" lst_341)"
" #f)"
"(let-values(((binding-sym_342)"
"(unsafe-car"
" lst_340))"
"((gen-sym_343)"
"(unsafe-car"
" lst_341)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_344)"
"(let-values(((fold-var_345)"
" fold-var_339))"
"(let-values(((fold-var_346)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_342)"
" gen-sym_343))"
" fold-var_345))))"
"(values"
" fold-var_346)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_338"
" fold-var_344"
"(unsafe-cdr"
" lst_340)"
"(unsafe-cdr"
" lst_341))"
" fold-var_344))"
" fold-var_339))"
" fold-var_339))))"
" for-loop_338)"
" null"
" lst_336"
" lst_337))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_21)"
"(let-values()"
"(add-body!_32"
"(add1"
" phase_162)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_288"
" rhs_289))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_290"
" '((void)))))))"
"(let-values()"
"(add-body!_32"
"(add1"
" phase_162)"
"(generate-top-level-define-syntaxes"
" gen-syms_288"
" rhs_289"
" transformer-set!s_290"
"(compile-top-level-bind"
" ids_285"
" binding-syms_286"
"(let-values(((the-struct_347)"
" cctx_21))"
"(if(compile-context?"
" the-struct_347)"
"(let-values(((phase66_348)"
" phase_162)"
"((header67_349)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_347)"
" phase66_348"
"(compile-context-self"
" the-struct_347)"
"(compile-context-module-self"
" the-struct_347)"
"(compile-context-full-module-name"
" the-struct_347)"
"(compile-context-lazy-syntax-literals?"
" the-struct_347)"
" header67_349))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                          \"compile-context?\""
" the-struct_347)))"
" gen-syms_288)))))"
"(set! saw-define-syntaxes?_35"
" #t)))))))))))"
"(if(equal?"
" tmp_176"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_350"
" begin-for-syntax68_351"
" e69_352)"
"(let-values(((s_363)"
" body_175))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_364)"
" s_363))"
"(let-values(((begin-for-syntax68_365"
" e69_366)"
"(let-values(((s_367)"
"(if(syntax?$1"
" s_363)"
"(syntax-e$1"
" s_363)"
" s_363)))"
"(if(pair?"
" s_367)"
"(let-values(((begin-for-syntax70_368)"
"(let-values(((s_370)"
"(car"
" s_367)))"
" s_370))"
"((e71_369)"
"(let-values(((s_371)"
"(cdr"
" s_367)))"
"(let-values(((s_372)"
"(if(syntax?$1"
" s_371)"
"(syntax-e$1"
" s_371)"
" s_371)))"
"(let-values(((flat-s_373)"
"(to-syntax-list.1"
" s_372)))"
"(if(not"
" flat-s_373)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_364))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_364))"
"(let-values()"
" flat-s_373))))))))"
"(values"
" begin-for-syntax70_368"
" e71_369))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_364)))))"
"(values"
" #t"
" begin-for-syntax68_365"
" e69_366)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop!_160"
" e69_352"
"(add1"
" phase_162)"
"(find-or-create-header!_34"
"(add1"
" phase_162)))))"
"(if(if(equal?"
" tmp_176"
" '#%require)"
" #t"
"(if(equal?"
" tmp_176"
" '#%provide)"
" #t"
"(if(equal?"
" tmp_176"
" '#%declare)"
" #t"
"(if(equal?"
" tmp_176"
" 'module)"
" #t"
"(equal?"
" tmp_176"
" 'module*)))))"
"(let-values()"
"(let-values(((e_374)"
"(other-form-callback_27"
" body_175"
"(let-values(((the-struct_375)"
" cctx_21))"
"(if(compile-context?"
" the-struct_375)"
"(let-values(((phase72_376)"
" phase_162)"
"((header73_377)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_375)"
" phase72_376"
"(compile-context-self"
" the-struct_375)"
"(compile-context-module-self"
" the-struct_375)"
"(compile-context-full-module-name"
" the-struct_375)"
"(compile-context-lazy-syntax-literals?"
" the-struct_375)"
" header73_377))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                    \"compile-context?\""
" the-struct_375))))))"
"(if e_374"
"(let-values()"
"(begin"
"(compiled-expression-callback_26"
" e_374"
" #f"
" phase_162"
"(as-required?_36"
" header_163))"
"(add-body!_32"
" phase_162"
" e_374)))"
"(void))))"
"(let-values()"
"(let-values(((e_378)"
"(compile$2"
" body_175"
"(let-values(((the-struct_379)"
" cctx_21))"
"(if(compile-context?"
" the-struct_379)"
"(let-values(((phase74_380)"
" phase_162)"
"((header75_381)"
" header_163))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_379)"
" phase74_380"
"(compile-context-self"
" the-struct_379)"
"(compile-context-module-self"
" the-struct_379)"
"(compile-context-full-module-name"
" the-struct_379)"
"(compile-context-lazy-syntax-literals?"
" the-struct_379)"
" header75_381))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                    \"compile-context?\""
" the-struct_379)))"
" #f"
"(="
" i_171"
" last-i_37))))"
"(begin"
"(compiled-expression-callback_26"
" e_378"
" #f"
" phase_162"
"(as-required?_36"
" header_163))"
"(add-body!_32"
" phase_162"
" e_378)))))))))))"
"(void)))))"
"(values"
" fold-var_174)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_166"
" fold-var_172"
"(unsafe-cdr"
" lst_168)"
"(+"
" pos_169"
" 1))"
" fold-var_172))"
" fold-var_167))"
" fold-var_167))))"
" for-loop_166)"
"(void)"
" lst_164"
" start_165))))))"
" loop!_160)"
" bodys_20"
" phase_29"
"(find-or-create-header!_34 phase_29))"
"(values))))"
"(let-values(((encoded-root-expand-header_38)"
"(if encoded-root-expand-ctx-box_24"
"(if(unbox encoded-root-expand-ctx-box_24)"
"(if(not"
"(if root-ctx-only-if-syntax?_25"
"(if(not saw-define-syntaxes?_35)"
"(let-values(((ht_382) phase-to-header_33))"
"(begin"
"(if((lambda(ht_383)(hash? ht_383))"
" ht_382)"
"(void)"
"(let-values()"
"(default-in-hash-values ht_382)))"
"((letrec-values(((for-loop_384)"
"(lambda(result_385"
" i_386)"
"(if i_386"
"(let-values(((h_387)"
"(hash-iterate-value"
" ht_382"
" i_386)))"
"(if #t"
"(let-values(((result_388)"
"(let-values(((result_389)"
" result_385))"
"(let-values(((result_390)"
"(let-values()"
"(let-values()"
"(header-empty-syntax-literals?"
" h_387)))))"
"(values"
" result_390)))))"
"(if(if #t"
"(not"
"((lambda x_391"
"(not"
" result_388))"
" h_387))"
" #f)"
"(for-loop_384"
" result_388"
"(hash-iterate-next"
" ht_382"
" i_386))"
" result_388))"
" result_385))"
" result_385))))"
" for-loop_384)"
" #t"
"(hash-iterate-first ht_382))))"
" #f)"
" #f))"
"(let-values(((h_392)"
"(find-or-create-header!_34 'root-ctx)))"
"(begin"
"(add-syntax-literal!"
" h_392"
"(unbox encoded-root-expand-ctx-box_24))"
" h_392))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_39)"
"(let-values(((temp76_393)(hash-keys phase-to-body_31))"
"((<77_394) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp76_393 <77_394)"
"(sort9.1 temp76_393 <77_394)))))"
"(let-values(((min-phase_40)"
"(if(pair? phases-in-order_39)"
"(car phases-in-order_39)"
" phase_29)))"
"(let-values(((max-phase_41)"
"(if(pair? phases-in-order_39)"
"(car(alt-reverse phases-in-order_39))"
" phase_29)))"
"(let-values(((struct:link-info_42"
" link-info19_43"
" link-info?_44"
" link-info-link-module-uses_45"
" link-info-imports_46"
" link-info-extra-inspectorsss_47"
" link-info-def-decls_48)"
"(let-values(((struct:_395"
" make-_396"
" ?_397"
" -ref_398"
" -set!_399)"
"(make-struct-type"
" 'link-info"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'link-info)))"
"(values"
" struct:_395"
" make-_396"
" ?_397"
"(make-struct-field-accessor"
" -ref_398"
" 0"
" 'link-module-uses)"
"(make-struct-field-accessor -ref_398 1 'imports)"
"(make-struct-field-accessor"
" -ref_398"
" 2"
" 'extra-inspectorsss)"
"(make-struct-field-accessor"
" -ref_398"
" 3"
" 'def-decls)))))"
"(let-values(((phase-to-link-info_50)"
"(let-values(((lst_431) phases-in-order_39))"
"(begin"
"(if(list? lst_431)"
"(void)"
"(let-values()(in-list lst_431)))"
"((letrec-values(((for-loop_432)"
"(lambda(table_433 lst_434)"
"(if(pair? lst_434)"
"(let-values(((phase_435)"
"(unsafe-car"
" lst_434)))"
"(if #t"
"(let-values(((table_436)"
"(let-values(((table_437)"
" table_433))"
"(let-values(((table_438)"
"(let-values()"
"(let-values(((key_439"
" val_440)"
"(let-values()"
"(let-values(((header_441)"
"(hash-ref"
" phase-to-header_33"
" phase_435"
" #f)))"
"(let-values(((link-module-uses_442"
" imports_443"
" extra-inspectorsss_444"
" def-decls_445)"
"(generate-links+imports"
" header_441"
" phase_435"
" cctx_21)))"
"(values"
" phase_435"
"(link-info19_43"
" link-module-uses_442"
" imports_443"
" extra-inspectorsss_444"
" def-decls_445)))))))"
"(hash-set"
" table_437"
" key_439"
" val_440)))))"
"(values"
" table_438)))))"
"(if #t"
"(for-loop_432"
" table_436"
"(unsafe-cdr"
" lst_434))"
" table_436))"
" table_433))"
" table_433))))"
" for-loop_432)"
" '#hash()"
" lst_431)))))"
"(let-values(((body-linklets_51)"
"(let-values(((lst_446) phases-in-order_39))"
"(begin"
"(if(list? lst_446)"
"(void)"
"(let-values()(in-list lst_446)))"
"((letrec-values(((for-loop_447)"
"(lambda(table_448"
" lst_449)"
"(if(pair? lst_449)"
"(let-values(((phase_450)"
"(unsafe-car"
" lst_449)))"
"(if #t"
"(let-values(((table_451)"
"(let-values(((table_452)"
" table_448))"
"(let-values(((table_453)"
"(let-values()"
"(let-values(((key_454"
" val_455)"
"(let-values()"
"(let-values(((bodys_456)"
"(hash-ref"
" phase-to-body_31"
" phase_450)))"
"(let-values(((li_457)"
"(hash-ref"
" phase-to-link-info_50"
" phase_450)))"
"(let-values(((binding-sym-to-define-sym_458)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_33"
" phase_450))))"
"(values"
" phase_450"
"((if to-source?_28"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_23"
"(link-info-imports_46"
" li_457))"
"(qq-append"
"(link-info-def-decls_48"
" li_457)"
"(alt-reverse"
"(let-values(((lst_459)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_33"
" phase_450))))"
"(begin"
"(if(list?"
" lst_459)"
"(void)"
"(let-values()"
"(in-list"
" lst_459)))"
"((letrec-values(((for-loop_460)"
"(lambda(fold-var_461"
" lst_462)"
"(if(pair?"
" lst_462)"
"(let-values(((binding-sym_463)"
"(unsafe-car"
" lst_462)))"
"(if #t"
"(let-values(((fold-var_464)"
"(let-values(((fold-var_465)"
" fold-var_461))"
"(let-values(((fold-var_466)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_467)"
"(hash-ref"
" binding-sym-to-define-sym_458"
" binding-sym_463)))"
"(list"
" def-sym_467"
" binding-sym_463)))"
" fold-var_465))))"
"(values"
" fold-var_466)))))"
"(if #t"
"(for-loop_460"
" fold-var_464"
"(unsafe-cdr"
" lst_462))"
" fold-var_464))"
" fold-var_461))"
" fold-var_461))))"
" for-loop_460)"
" null"
" lst_459)))))"
"(alt-reverse"
" bodys_456))))))))))"
"(hash-set"
" table_452"
" key_454"
" val_455)))))"
"(values"
" table_453)))))"
"(if #t"
"(for-loop_447"
" table_451"
"(unsafe-cdr"
" lst_449))"
" table_451))"
" table_448))"
" table_448))))"
" for-loop_447)"
" '#hasheq()"
" lst_446)))))"
"(let-values(((phase-to-link-module-uses_52)"
"(let-values(((ht_468) phase-to-link-info_50))"
"(begin"
"(if((lambda(ht_469)(hash? ht_469))"
" ht_468)"
"(void)"
"(let-values()"
"(default-in-hash ht_468)))"
"((letrec-values(((for-loop_470)"
"(lambda(table_471"
" i_472)"
"(if i_472"
"(let-values(((phase_473"
" li_474)"
"(hash-iterate-key+value"
" ht_468"
" i_472)))"
"(if #t"
"(let-values(((table_475)"
"(let-values(((table_476)"
" table_471))"
"(let-values(((table_477)"
"(let-values()"
"(let-values(((key_478"
" val_479)"
"(let-values()"
"(values"
" phase_473"
"(link-info-link-module-uses_45"
" li_474)))))"
"(hash-set"
" table_476"
" key_478"
" val_479)))))"
"(values"
" table_477)))))"
"(if #t"
"(for-loop_470"
" table_475"
"(hash-iterate-next"
" ht_468"
" i_472))"
" table_475))"
" table_471))"
" table_471))))"
" for-loop_470)"
" '#hash()"
"(hash-iterate-first ht_468))))))"
"(let-values(((phase-to-link-module-uses-expr_53)"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_480)"
" phases-in-order_39))"
"(begin"
"(if(list? lst_480)"
"(void)"
"(let-values()(in-list lst_480)))"
"((letrec-values(((for-loop_481)"
"(lambda(fold-var_482"
" lst_483)"
"(if(pair?"
" lst_483)"
"(let-values(((phase_484)"
"(unsafe-car"
" lst_483)))"
"(if #t"
"(let-values(((fold-var_485)"
"(let-values(((fold-var_486)"
" fold-var_482))"
"(let-values(((fold-var_487)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_484"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_52"
" phase_484)"
" mpis_22))))"
" fold-var_486))))"
"(values"
" fold-var_487)))))"
"(if #t"
"(for-loop_481"
" fold-var_485"
"(unsafe-cdr"
" lst_483))"
" fold-var_485))"
" fold-var_482))"
" fold-var_482))))"
" for-loop_481)"
" null"
" lst_480))))))))"
"(let-values(((phase-to-link-extra-inspectorsss_54)"
"(let-values(((ht_488)"
" phase-to-link-info_50))"
"(begin"
"(if((lambda(ht_489)(hash? ht_489))"
" ht_488)"
"(void)"
"(let-values()"
"(default-in-hash ht_488)))"
"((letrec-values(((for-loop_490)"
"(lambda(table_491"
" i_492)"
"(if i_492"
"(let-values(((phase_493"
" li_494)"
"(hash-iterate-key+value"
" ht_488"
" i_492)))"
"(if #t"
"(let-values(((table_495)"
"(let-values(((table_496)"
" table_491))"
"(let-values(((table_497)"
"(let-values()"
"(let-values(((key_498"
" val_499)"
"(let-values()"
"(values"
" phase_493"
"(link-info-extra-inspectorsss_47"
" li_494)))))"
"(hash-set"
" table_496"
" key_498"
" val_499)))))"
"(values"
" table_497)))))"
"(if #t"
"(for-loop_490"
" table_495"
"(hash-iterate-next"
" ht_488"
" i_492))"
" table_495))"
" table_491))"
" table_491))))"
" for-loop_490)"
" '#hash()"
"(hash-iterate-first ht_488))))))"
"(let-values(((syntax-literalss_55)"
"(alt-reverse"
"(let-values(((start_500) phase_29)"
"((end_501)"
"(add1 max-phase_41))"
"((inc_502) 1))"
"(begin"
"(if(if(real? start_500)"
"(if(real? end_501)"
"(real? inc_502)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_500"
" end_501"
" inc_502)))"
"((letrec-values(((for-loop_503)"
"(lambda(fold-var_504"
" pos_505)"
"(if(<"
" pos_505"
" end_501)"
"(let-values(((phase_506)"
" pos_505))"
"(if #t"
"(let-values(((fold-var_507)"
"(let-values(((fold-var_508)"
" fold-var_504))"
"(let-values(((fold-var_509)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((h_510)"
"(hash-ref"
" phase-to-header_33"
" phase_506"
" #f)))"
"(if h_510"
"(header-syntax-literals"
" h_510)"
" empty-syntax-literals)))"
" fold-var_508))))"
"(values"
" fold-var_509)))))"
"(if #t"
"(for-loop_503"
" fold-var_507"
"(+"
" pos_505"
" inc_502))"
" fold-var_507))"
" fold-var_504))"
" fold-var_504))))"
" for-loop_503)"
" null"
" start_500))))))"
"(values"
" body-linklets_51"
" min-phase_40"
" max-phase_41"
" phase-to-link-module-uses_52"
" phase-to-link-module-uses-expr_53"
" phase-to-link-extra-inspectorsss_54"
" syntax-literalss_55"
"(if encoded-root-expand-header_38"
"(header-syntax-literals"
" encoded-root-expand-header_38)"
" #f))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack17.1$1)"
"(lambda(given-kws_511 given-args_512 bodys13_513 cctx14_514 mpis15_515)"
"(let-values(((body-imports1_516)(car given-args_512))"
"((given-kws_517)(cdr given-kws_511))"
"((given-args_518)(cdr given-args_512)))"
"(let-values(((compiled-expression-callback10_519)"
"(if(pair? given-kws_517)(eq? '#:compiled-expression-callback(car given-kws_517)) #f)))"
"(let-values(((compiled-expression-callback4_520)"
"(if compiled-expression-callback10_519(car given-args_518)(void)))"
"((given-kws_521)(if compiled-expression-callback10_519(cdr given-kws_517) given-kws_517))"
"((given-args_522)(if compiled-expression-callback10_519(cdr given-args_518) given-args_518)))"
"(let-values(((encoded-root-expand-ctx-box8_523)"
"(if(pair? given-kws_521)(eq? '#:encoded-root-expand-ctx-box(car given-kws_521)) #f)))"
"(let-values(((encoded-root-expand-ctx-box2_524)"
"(if encoded-root-expand-ctx-box8_523(car given-args_522)(void)))"
"((given-kws_525)(if encoded-root-expand-ctx-box8_523(cdr given-kws_521) given-kws_521))"
"((given-args_526)(if encoded-root-expand-ctx-box8_523(cdr given-args_522) given-args_522)))"
"(let-values(((other-form-callback11_527)"
"(if(pair? given-kws_525)(eq? '#:other-form-callback(car given-kws_525)) #f)))"
"(let-values(((other-form-callback5_528)(if other-form-callback11_527(car given-args_526)(void)))"
"((given-kws_529)(if other-form-callback11_527(cdr given-kws_525) given-kws_525))"
"((given-args_530)(if other-form-callback11_527(cdr given-args_526) given-args_526)))"
"(let-values(((root-ctx-only-if-syntax?9_531)"
"(if(pair? given-kws_529)(eq? '#:root-ctx-only-if-syntax?(car given-kws_529)) #f)))"
"(let-values(((root-ctx-only-if-syntax?3_532)"
"(if root-ctx-only-if-syntax?9_531(car given-args_530)(void)))"
"((given-kws_533)(if root-ctx-only-if-syntax?9_531(cdr given-kws_529) given-kws_529))"
"((given-args_534)"
"(if root-ctx-only-if-syntax?9_531(cdr given-args_530) given-args_530)))"
"(let-values(((to-source?12_535)(pair? given-kws_533)))"
"(let-values(((to-source?6_536)(if to-source?12_535(car given-args_534)(void))))"
"(compile-forms16.1"
" body-imports1_516"
" compiled-expression-callback4_520"
" compiled-expression-callback10_519"
" encoded-root-expand-ctx-box2_524"
" encoded-root-expand-ctx-box8_523"
" other-form-callback5_528"
" other-form-callback11_527"
" root-ctx-only-if-syntax?3_532"
" root-ctx-only-if-syntax?9_531"
" to-source?6_536"
" to-source?12_535"
" bodys13_513"
" cctx14_514"
" mpis15_515))))))))))))))"
"(define-values"
"(compile-forms18.1)"
"(lifted/1.1$16"
"(lambda(given-kws_537 given-argc_538)"
"(if(= given-argc_538 5)"
"(subsets?"
" '(#:body-imports)"
" given-kws_537"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?))"
" #f))"
"(case-lambda"
"((given-kws_539 given-args_540 bodys_541 cctx_542 mpis_543)"
"(unpack17.1$1 given-kws_539 given-args_540 bodys_541 cctx_542 mpis_543)))"
" '(#:body-imports)"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_544 binding-syms_545 cctx_546 trans-exprs_547)"
"(let-values(((phase_548)(compile-context-phase cctx_546)))"
"(let-values(((self_549)(compile-context-self cctx_546)))"
"(let-values(((header_550)(compile-context-header cctx_546)))"
"(let-values(((mpis_551)(header-module-path-indexes header_550)))"
"(let-values(((top-level-bind-scope_552)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_546)))))"
"(let-values(((self-expr_553)(add-module-path-index! mpis_551 self_549)))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_554) ids_544)"
"((lst_555) binding-syms_545)"
"((lst_556)"
"(let-values(((or-part_557) trans-exprs_547))"
"(if or-part_557"
" or-part_557"
"(alt-reverse"
"(let-values(((lst_558) ids_544))"
"(begin"
"(if(list? lst_558)(void)(let-values()(in-list lst_558)))"
"((letrec-values(((for-loop_559)"
"(lambda(fold-var_560 lst_561)"
"(if(pair? lst_561)"
"(let-values(((id_562)(unsafe-car lst_561)))"
"(if #t"
"(let-values(((fold-var_563)"
"(let-values(((fold-var_564)"
" fold-var_560))"
"(let-values(((fold-var_565)"
"(let-values()"
"(cons"
"(let-values() ''#f)"
" fold-var_564))))"
"(values fold-var_565)))))"
"(if #t"
"(for-loop_559 fold-var_563(unsafe-cdr lst_561))"
" fold-var_563))"
" fold-var_560))"
" fold-var_560))))"
" for-loop_559)"
" null"
" lst_558))))))))"
"(begin"
"(if(list? lst_554)(void)(let-values()(in-list lst_554)))"
"(if(list? lst_555)(void)(let-values()(in-list lst_555)))"
"(if(list? lst_556)(void)(let-values()(in-list lst_556)))"
"((letrec-values(((for-loop_566)"
"(lambda(fold-var_567 lst_568 lst_569 lst_570)"
"(if(if(pair? lst_568)(if(pair? lst_569)(pair? lst_570) #f) #f)"
"(let-values(((id_571)(unsafe-car lst_568))"
"((binding-sym_572)(unsafe-car lst_569))"
"((trans-expr_573)(unsafe-car lst_570)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_574)"
"(let-values(((fold-var_575) fold-var_567))"
"(let-values(((fold-var_576)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_577)"
"(compile-quote-syntax"
"(remove-scope"
" id_571"
" top-level-bind-scope_552)"
" phase_548"
" cctx_546)))"
"(list"
" top-level-bind!-id"
" id-stx_577"
" self-expr_553"
" phase_548"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_572)"
" trans-expr_573)))"
" fold-var_575))))"
"(values fold-var_576)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_566"
" fold-var_574"
"(unsafe-cdr lst_568)"
"(unsafe-cdr lst_569)"
"(unsafe-cdr lst_570))"
" fold-var_574))"
" fold-var_567))"
" fold-var_567))))"
" for-loop_566)"
" null"
" lst_554"
" lst_555"
" lst_556)))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_581 rhs_582 transformer-set!s_583 finish_584)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_582)"
"(list"
" 'case-lambda"
"(list gen-syms_581(list* 'begin(qq-append transformer-set!s_583(list* finish_584 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_581"
"(list*"
" 'values"
"(alt-reverse"
"(let-values(((lst_585) gen-syms_581))"
"(begin"
"(if(list? lst_585)(void)(let-values()(in-list lst_585)))"
"((letrec-values(((for-loop_586)"
"(lambda(fold-var_587 lst_588)"
"(if(pair? lst_588)"
"(let-values(((s_589)(unsafe-car lst_588)))"
"(if #t"
"(let-values(((fold-var_590)"
"(let-values(((fold-var_591) fold-var_587))"
"(let-values(((fold-var_592)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_591))))"
"(values fold-var_592)))))"
"(if #t(for-loop_586 fold-var_590(unsafe-cdr lst_588)) fold-var_590))"
" fold-var_587))"
" fold-var_587))))"
" for-loop_586)"
" null"
" lst_585)))))))"
"(list* 'begin finish_584 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_581 '((apply values args)))) '((void))))))))"
"(define-values"
"(compiled-tops->compiled-top4.1)"
"(lambda(to-source?1_1 to-source?2_2 cims3_3)"
"(let-values(((cims_4) cims3_3))"
"(let-values(((to-source?_5)(if to-source?2_2 to-source?1_1 #f)))"
"(let-values()"
"(let-values(((ht_6)"
"(let-values(((lst_7) cims_4)((start_8) 0))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"(if(exact-nonnegative-integer? start_8)(void)(let-values()(in-naturals start_8)))"
"((letrec-values(((for-loop_9)"
"(lambda(table_10 lst_11 pos_12)"
"(if(if(pair? lst_11) #t #f)"
"(let-values(((cim_13)(unsafe-car lst_11))((i_14) pos_12))"
"(if(if #t #t #f)"
"(let-values(((table_15)"
"(let-values(((table_16) table_10))"
"(let-values(((table_17)"
"(let-values()"
"(let-values(((key_18 val_19)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_14))"
"((if to-source?_5"
" values"
" compiled-in-memory-linklet-directory)"
" cim_13)))))"
"(hash-set"
" table_16"
" key_18"
" val_19)))))"
"(values table_17)))))"
"(if(if #t #t #f)"
"(for-loop_9 table_15(unsafe-cdr lst_11)(+ pos_12 1))"
" table_15))"
" table_10))"
" table_10))))"
" for-loop_9)"
" '#hasheq()"
" lst_7"
" start_8)))))"
"(if to-source?_5"
"(let-values() ht_6)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_6)"
" 0"
" 0"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_4"
" null)))))))))"
"(define-values"
"(unpack5.1)"
"(lambda(given-kws_20 given-args_21 cims3_22)"
"(let-values(((to-source?2_23)(pair? given-kws_20)))"
"(let-values(((to-source?1_24)(if to-source?2_23(car given-args_21)(void))))"
"(compiled-tops->compiled-top4.1 to-source?1_24 to-source?2_23 cims3_22)))))"
"(define-values"
"(compiled-tops->compiled-top6.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_25 given-argc_26)"
"(if(= given-argc_26 3)"
"(let-values(((l1_27) given-kws_25))"
"(let-values(((l1_28)(if(null? l1_27) l1_27(if(eq?(car l1_27) '#:to-source?)(cdr l1_27) l1_27))))"
"(null? l1_28)))"
" #f))"
"(case-lambda((given-kws_29 given-args_30 cims_31)(unpack5.1 given-kws_29 given-args_30 cims_31)))"
" null"
" '(#:to-source?)"
"(let-values(((compiled-tops->compiled-top_32)(case-lambda((cims_33)(unpack5.1 null null cims_33)))))"
" compiled-tops->compiled-top_32)))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_34)"
"(let-values(((ht_35)(1/linklet-directory->hash ld_34)))"
"(alt-reverse"
"(let-values(((start_36) 0)((end_37)(hash-count ht_35))((inc_38) 1))"
"(begin"
"(if(if(real? start_36)(if(real? end_37)(real? inc_38) #f) #f)"
"(void)"
"(let-values()(in-range start_36 end_37 inc_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 pos_41)"
"(if(< pos_41 end_37)"
"(let-values(((i_42) pos_41))"
"(if #t"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44) fold-var_40))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" ht_35"
"(string->symbol(number->string i_42))))"
" fold-var_44))))"
"(values fold-var_45)))))"
"(if #t(for-loop_39 fold-var_43(+ pos_41 inc_38)) fold-var_43))"
" fold-var_40))"
" fold-var_40))))"
" for-loop_39)"
" null"
" start_36)))))))"
"(define-values"
"(compile-single)"
"(lambda(s_1 cctx_2)"
"(let-values(((...nder/compile/top.rkt:25:2_3) compile-top11.1)"
"((s12_4) s_1)"
"((cctx13_5) cctx_2)"
"((temp14_6) #f)"
"((temp15_7) #t))"
"(if(variable-reference-constant?(#%variable-reference compile-top11.1))"
"(compile-top9.1 temp14_6 #t temp15_7 #t #f #f s12_4 cctx13_5)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:25:2_3"
" keyword-procedure-extract"
" '(#:serializable? #:single-expression?)"
" 4)"
" '(#:serializable? #:single-expression?)"
"(list temp14_6 temp15_7)"
" s12_4"
" cctx13_5)))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_8"
" serializable?4_9"
" single-expression?2_10"
" single-expression?5_11"
" to-source?3_12"
" to-source?6_13"
" s7_14"
" cctx8_15)"
"(let-values(((s_16) s7_14))"
"(let-values(((cctx_17) cctx8_15))"
"(let-values(((serializable?_18)(if serializable?4_9 serializable?1_8 #t)))"
"(let-values(((single-expression?_19)(if single-expression?5_11 single-expression?2_10 #f)))"
"(let-values(((to-source?_20)(if to-source?6_13 to-source?3_12 #f)))"
"(let-values()"
"(let-values(((phase_21)(compile-context-phase cctx_17)))"
"(let-values(((mpis_22)(make-module-path-index-table)))"
"(let-values(((body-linklets_23"
" min-phase_24"
" max-phase_25"
" phase-to-link-module-uses_26"
" phase-to-link-module-uses-expr_27"
" phase-to-link-extra-inspectorsss_28"
" syntax-literalss_29"
" no-root-context-syntax-literals_30)"
"(let-values(((...nder/compile/top.rkt:53:4_33) compile-forms18.1)"
"((temp16_34)(list s_16))"
"((cctx17_35) cctx_17)"
"((mpis18_36) mpis_22)"
"((temp19_37)"
"(if single-expression?_19"
"(list* '()(list syntax-literalss-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literalss-id)"
" instance-imports)))"
"((to-source?20_38) to-source?_20)"
"((compile-top-level-require21_39) compile-top-level-require))"
"(if(variable-reference-constant?(#%variable-reference compile-forms18.1))"
"(compile-forms16.1"
" temp19_37"
" #f"
" #f"
" #f"
" #f"
" compile-top-level-require21_39"
" #t"
" #f"
" #f"
" to-source?20_38"
" #t"
" temp16_34"
" cctx17_35"
" mpis18_36)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:53:4_33"
" keyword-procedure-extract"
" '(#:body-imports #:other-form-callback #:to-source?)"
" 5)"
" '(#:body-imports #:other-form-callback #:to-source?)"
"(list temp19_37 compile-top-level-require21_39 to-source?20_38)"
" temp16_34"
" cctx17_35"
" mpis18_36)))))"
"(let-values(((add-metadata_31)"
"(lambda(ht_40)"
"(let-values(((ht_41)(hash-set ht_40 'original-phase phase_21)))"
"(let-values(((ht_42)(hash-set ht_41 'max-phase max-phase_25))) ht_42)))))"
"(let-values(((bundle_32)"
"((if to-source?_20 values 1/hash->linklet-bundle)"
"(add-metadata_31"
"(if serializable?_18"
"(let-values()"
"(let-values(((syntax-literalss-expr_43)"
"(generate-eager-syntax-literals!"
" syntax-literalss_29"
" mpis_22"
" phase_21"
"(compile-context-self cctx_17)"
"(compile-context-namespace cctx_17))))"
"(let-values(((link-linklet_44)"
"((if to-source?_20 values 1/compile-linklet)"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literalss-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_22))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_21) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_27)"
"(list"
" 'define-values"
"(list syntax-literalss-id)"
" syntax-literalss-expr_43)))))"
"(hash-set body-linklets_23 'link link-linklet_44))))"
"(let-values() body-linklets_23))))))"
"(if to-source?_20"
"(let-values()(hasheq #f bundle_32))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_32))"
" phase_21"
" max-phase_25"
" phase-to-link-module-uses_26"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_28"
"(mpis-as-vector mpis_22)"
"(syntax-literals-as-vectors syntax-literalss_29 phase_21)"
" null"
" null))))))))))))))))"
"(define-values"
"(unpack10.1$1)"
"(lambda(given-kws_45 given-args_46 s7_47 cctx8_48)"
"(let-values(((serializable?4_49)(if(pair? given-kws_45)(eq? '#:serializable?(car given-kws_45)) #f)))"
"(let-values(((serializable?1_50)(if serializable?4_49(car given-args_46)(void)))"
"((given-kws_51)(if serializable?4_49(cdr given-kws_45) given-kws_45))"
"((given-args_52)(if serializable?4_49(cdr given-args_46) given-args_46)))"
"(let-values(((single-expression?5_53)"
"(if(pair? given-kws_51)(eq? '#:single-expression?(car given-kws_51)) #f)))"
"(let-values(((single-expression?2_54)(if single-expression?5_53(car given-args_52)(void)))"
"((given-kws_55)(if single-expression?5_53(cdr given-kws_51) given-kws_51))"
"((given-args_56)(if single-expression?5_53(cdr given-args_52) given-args_52)))"
"(let-values(((to-source?6_57)(pair? given-kws_55)))"
"(let-values(((to-source?3_58)(if to-source?6_57(car given-args_56)(void))))"
"(compile-top9.1"
" serializable?1_50"
" serializable?4_49"
" single-expression?2_54"
" single-expression?5_53"
" to-source?3_58"
" to-source?6_57"
" s7_47"
" cctx8_48)))))))))"
"(define-values"
"(compile-top11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_59 given-argc_60)"
"(if(= given-argc_60 4)"
"(let-values(((l1_61) given-kws_59))"
"(let-values(((l1_62)(if(null? l1_61) l1_61(if(eq?(car l1_61) '#:serializable?)(cdr l1_61) l1_61))))"
"(let-values(((l1_63) l1_62))"
"(let-values(((l1_64)"
"(if(null? l1_63) l1_63(if(eq?(car l1_63) '#:single-expression?)(cdr l1_63) l1_63))))"
"(let-values(((l1_65) l1_64))"
"(let-values(((l1_66)(if(null? l1_65) l1_65(if(eq?(car l1_65) '#:to-source?)(cdr l1_65) l1_65))))"
"(null? l1_66)))))))"
" #f))"
"(case-lambda((given-kws_67 given-args_68 s_69 cctx_70)(unpack10.1$1 given-kws_67 given-args_68 s_69 cctx_70)))"
" null"
" '(#:serializable? #:single-expression? #:to-source?)"
"(let-values(((compile-top_71)(case-lambda((s_72 cctx_73)(unpack10.1$1 null null s_72 cctx_73)))))"
" compile-top_71)))"
"(define-values"
"(compile-top-level-require)"
"(lambda(s_74 cctx_75)"
"(let-values(((phase_76)(compile-context-phase cctx_75)))"
"(let-values(((tmp_77)(core-form-sym s_74 phase_76)))"
"(if(equal? tmp_77 '#%require)"
"(let-values()"
"(let-values(((form-stx_78)(compile-quote-syntax s_74 phase_76 cctx_75)))"
"(list top-level-require!-id form-stx_78 ns-id)))"
"(let-values() #f))))))"
"(define-values"
"(any-side-effects?6.1)"
"(lambda(locals1_1 locals2_2 e3_3 expected-results4_4 required-reference?5_5)"
"(let-values(((e_6) e3_3))"
"(let-values(((expected-results_7) expected-results4_4))"
"(let-values(((required-reference?_8) required-reference?5_5))"
"(let-values(((locals_9)(if locals2_2 locals1_1 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_10)"
"((letrec-values(((loop_11)"
"(lambda(e_12 locals_13)"
"(let-values(((tmp_14)"
"(if(pair?(correlated-e e_12))"
"(correlated-e(car(correlated-e e_12)))"
" #f)))"
"(if(if(equal? tmp_14 'quote)"
" #t"
"(if(equal? tmp_14 'lambda)"
" #t"
"(if(equal? tmp_14 'case-lambda)"
" #t"
"(equal? tmp_14 '#%variable-reference))))"
"(let-values() 1)"
"(if(if(equal? tmp_14 'letrec-values)"
" #t"
"(equal? tmp_14 'let-values))"
"(let-values()"
"(let-values(((ok?_15 _9_16 ids10_17 rhs11_18 body12_19)"
"(let-values(((s_34) e_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_35) s_34))"
"(let-values(((_9_36"
" ids10_37"
" rhs11_38"
" body12_39)"
"(let-values(((s_40)"
"(if(syntax?$2"
" s_34)"
"(syntax-e$3"
" s_34)"
" s_34)))"
"(if(pair? s_40)"
"(let-values(((_13_41)"
"(let-values(((s_45)"
"(car"
" s_40)))"
" s_45))"
"((ids14_42"
" rhs15_43"
" body16_44)"
"(let-values(((s_46)"
"(cdr"
" s_40)))"
"(let-values(((s_47)"
"(if(syntax?$2"
" s_46)"
"(syntax-e$3"
" s_46)"
" s_46)))"
"(if(pair?"
" s_47)"
"(let-values(((ids17_48"
" rhs18_49)"
"(let-values(((s_51)"
"(car"
" s_47)))"
"(let-values(((s_52)"
"(if(syntax?$2"
" s_51)"
"(syntax-e$3"
" s_51)"
" s_51)))"
"(let-values(((flat-s_53)"
"(to-syntax-list.1$1"
" s_52)))"
"(if(not"
" flat-s_53)"
"(let-values()"
"((lambda(false_54"
" str_55"
" e_56)"
"(error"
" str_55))"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_35))"
"(if #f"
"(let-values()"
"((lambda(false_57"
" str_58"
" e_59)"
"(error"
" str_58))"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_35))"
"(let-values()"
"(let-values(((ids_60"
" rhs_61)"
"(let-values(((lst_62)"
" flat-s_53))"
"(begin"
"(if(list?"
" lst_62)"
"(void)"
"(let-values()"
"(in-list"
" lst_62)))"
"((letrec-values(((for-loop_63)"
"(lambda(ids_64"
" rhs_65"
" lst_66)"
"(if(pair?"
" lst_66)"
"(let-values(((s_67)"
"(unsafe-car"
" lst_66)))"
"(if #t"
"(let-values(((ids_68"
" rhs_69)"
"(let-values(((ids_70)"
" ids_64)"
"((rhs_71)"
" rhs_65))"
"(let-values(((ids_72"
" rhs_73)"
"(let-values()"
"(let-values(((ids24_74"
" rhs25_75)"
"(let-values()"
"(let-values(((s_76)"
"(if(syntax?$2"
" s_67)"
"(syntax-e$3"
" s_67)"
" s_67)))"
"(if(pair?"
" s_76)"
"(let-values(((ids20_77)"
"(let-values(((s_79)"
"(car"
" s_76)))"
" s_79))"
"((rhs21_78)"
"(let-values(((s_80)"
"(cdr"
" s_76)))"
"(let-values(((s_81)"
"(if(syntax?$2"
" s_80)"
"(syntax-e$3"
" s_80)"
" s_80)))"
"(if(pair?"
" s_81)"
"(let-values(((rhs22_82)"
"(let-values(((s_83)"
"(car"
" s_81)))"
" s_83))"
"(()"
"(let-values(((s_84)"
"(cdr"
" s_81)))"
"(let-values(((s_85)"
"(if(syntax?$2"
" s_84)"
"(syntax-e$3"
" s_84)"
" s_84)))"
"(if(null?"
" s_85)"
"(values)"
"((lambda(false_86"
" str_87"
" e_88)"
"(error"
" str_87))"
" #f"
"                                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_35))))))"
"(values"
" rhs22_82))"
"((lambda(false_89"
" str_90"
" e_91)"
"(error"
" str_90))"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_35))))))"
"(values"
" ids20_77"
" rhs21_78))"
"((lambda(false_92"
" str_93"
" e_94)"
"(error"
" str_93))"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_35))))))"
"(values"
"(cons"
" ids24_74"
" ids_70)"
"(cons"
" rhs25_75"
" rhs_71))))))"
"(values"
" ids_72"
" rhs_73)))))"
"(if #t"
"(for-loop_63"
" ids_68"
" rhs_69"
"(unsafe-cdr"
" lst_66))"
"(values"
" ids_68"
" rhs_69)))"
"(values"
" ids_64"
" rhs_65)))"
"(values"
" ids_64"
" rhs_65)))))"
" for-loop_63)"
" null"
" null"
" lst_62)))))"
"(values"
"(alt-reverse"
" ids_60)"
"(alt-reverse"
" rhs_61))))))))))"
"((body19_50)"
"(let-values(((s_95)"
"(cdr"
" s_47)))"
"(let-values(((s_96)"
"(if(syntax?$2"
" s_95)"
"(syntax-e$3"
" s_95)"
" s_95)))"
"(if(pair?"
" s_96)"
"(let-values(((body23_97)"
"(let-values(((s_98)"
"(car"
" s_96)))"
" s_98))"
"(()"
"(let-values(((s_99)"
"(cdr"
" s_96)))"
"(let-values(((s_100)"
"(if(syntax?$2"
" s_99)"
"(syntax-e$3"
" s_99)"
" s_99)))"
"(if(null?"
" s_100)"
"(values)"
"((lambda(false_101"
" str_102"
" e_103)"
"(error"
" str_102))"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_35))))))"
"(values"
" body23_97))"
"((lambda(false_104"
" str_105"
" e_106)"
"(error"
" str_105))"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_35))))))"
"(values"
" ids17_48"
" rhs18_49"
" body19_50))"
"((lambda(false_107"
" str_108"
" e_109)"
"(error"
" str_108))"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_35))))))"
"(values"
" _13_41"
" ids14_42"
" rhs15_43"
" body16_44))"
"((lambda(false_110"
" str_111"
" e_112)"
"(error str_111))"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_35)))))"
"(values"
" #t"
" _9_36"
" ids10_37"
" rhs11_38"
" body12_39)))"
"(values #f #f #f #f #f)))))"
"(if(not"
"(let-values(((lst_113) ids10_17)((lst_114) rhs11_18))"
"(begin"
"(if(list? lst_113)"
"(void)"
"(let-values()(in-list lst_113)))"
"(if(list? lst_114)"
"(void)"
"(let-values()(in-list lst_114)))"
"((letrec-values(((for-loop_115)"
"(lambda(result_116"
" lst_117"
" lst_118)"
"(if(if(pair? lst_117)"
"(pair? lst_118)"
" #f)"
"(let-values(((ids_119)"
"(unsafe-car"
" lst_117))"
"((rhs_120)"
"(unsafe-car"
" lst_118)))"
"(if(if #t #t #f)"
"(let-values(((result_121)"
"(let-values(((result_122)"
" result_116))"
"(let-values(((result_123)"
"(let-values()"
"(let-values()"
"(let-values(((...pile/side-effect.rkt:27:21_124)"
" any-side-effects?8.1)"
"((rhs26_125)"
" rhs_120)"
"((temp27_126)"
"(correlated-length"
" ids_119))"
"((required-reference?28_127)"
" required-reference?_8)"
"((locals29_128)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals29_128"
" #t"
" rhs26_125"
" temp27_126"
" required-reference?28_127)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:27:21_124"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals29_128)"
" rhs26_125"
" temp27_126"
" required-reference?28_127)))))))"
"(values"
" result_123)))))"
"(if(if(if #t"
"(not"
"((lambda x_129"
" result_121)"
" ids_119))"
" #f)"
"(if #t"
"(not"
"((lambda x_130"
" result_121)"
" rhs_120))"
" #f)"
" #f)"
"(for-loop_115"
" result_121"
"(unsafe-cdr lst_117)"
"(unsafe-cdr lst_118))"
" result_121))"
" result_116))"
" result_116))))"
" for-loop_115)"
" #f"
" lst_113"
" lst_114))))"
"(loop_11"
" body12_19"
"(add-binding-info locals_13 ids10_17 rhs11_18))"
" #f)))"
"(if(equal? tmp_14 'values)"
"(let-values()"
"(let-values(((ok?_131 _30_132 e31_133)"
"(let-values(((s_144) e_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_145) s_144))"
"(let-values(((_30_146 e31_147)"
"(let-values(((s_148)"
"(if(syntax?$2"
" s_144)"
"(syntax-e$3"
" s_144)"
" s_144)))"
"(if(pair? s_148)"
"(let-values(((_32_149)"
"(let-values(((s_151)"
"(car"
" s_148)))"
" s_151))"
"((e33_150)"
"(let-values(((s_152)"
"(cdr"
" s_148)))"
"(let-values(((s_153)"
"(if(syntax?$2"
" s_152)"
"(syntax-e$3"
" s_152)"
" s_152)))"
"(let-values(((flat-s_154)"
"(to-syntax-list.1$1"
" s_153)))"
"(if(not"
" flat-s_154)"
"(let-values()"
"((lambda(false_155"
" str_156"
" e_157)"
"(error"
" str_156))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_145))"
"(if #f"
"(let-values()"
"((lambda(false_158"
" str_159"
" e_160)"
"(error"
" str_159))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_145))"
"(let-values()"
" flat-s_154))))))))"
"(values"
" _32_149"
" e33_150))"
"((lambda(false_161"
" str_162"
" e_163)"
"(error str_162))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_145)))))"
"(values #t _30_146 e31_147)))"
"(values #f #f #f)))))"
"(if(let-values(((lst_164) e31_133))"
"(begin"
"(if(list? lst_164)"
"(void)"
"(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(result_166 lst_167)"
"(if(pair? lst_167)"
"(let-values(((e_168)"
"(unsafe-car"
" lst_167)))"
"(if #t"
"(let-values(((result_169)"
"(let-values(((result_170)"
" result_166))"
"(let-values(((result_171)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:33:21_172)"
" any-side-effects?8.1)"
"((e34_173)"
" e_168)"
"((temp35_174)"
" 1)"
"((required-reference?36_175)"
" required-reference?_8)"
"((locals37_176)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals37_176"
" #t"
" e34_173"
" temp35_174"
" required-reference?36_175)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:33:21_172"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals37_176)"
" e34_173"
" temp35_174"
" required-reference?36_175))))))))"
"(values"
" result_171)))))"
"(if(if #t"
"(not"
"((lambda x_177"
"(not"
" result_169))"
" e_168))"
" #f)"
"(for-loop_165"
" result_169"
"(unsafe-cdr lst_167))"
" result_169))"
" result_166))"
" result_166))))"
" for-loop_165)"
" #t"
" lst_164)))"
"(length e31_133)"
" #f)))"
"(if(equal? tmp_14 'make-struct-type)"
"(let-values()"
"(if(ok-make-struct-type? e_12 required-reference?_8) 5 #f))"
"(if(equal? tmp_14 'make-struct-field-accessor)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'accessor)"
" 1"
" #f))"
"(if(equal? tmp_14 'make-struct-field-mutator)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'mutator)"
" 1"
" #f))"
"(let-values()"
"(let-values(((v_178)(correlated-e e_12)))"
"(if(let-values(((or-part_179)"
"(self-quoting-in-linklet? v_178)))"
"(if or-part_179"
" or-part_179"
"(if(symbol? v_178)"
"(let-values(((or-part_180)"
"(hash-ref"
" locals_13"
" v_178"
" #f)))"
"(if or-part_180"
" or-part_180"
"(let-values(((or-part_181)"
"(built-in-symbol? v_178)))"
"(if or-part_181"
" or-part_181"
"(required-reference?_8 v_178)))))"
" #f)))"
" 1"
" #f)))))))))))))"
" loop_11)"
" e_6"
" locals_9)))"
"(not"
"(if actual-results_10"
"(let-values(((or-part_182)(not expected-results_7)))"
"(if or-part_182 or-part_182(= actual-results_10 expected-results_7)))"
" #f))))))))))"
"(define-values"
"(unpack7.1$2)"
"(lambda(given-kws_183 given-args_184 e3_185 expected-results4_186 required-reference?5_187)"
"(let-values(((locals2_188)(pair? given-kws_183)))"
"(let-values(((locals1_189)(if locals2_188(car given-args_184)(void))))"
"(any-side-effects?6.1 locals1_189 locals2_188 e3_185 expected-results4_186 required-reference?5_187)))))"
"(define-values"
"(any-side-effects?8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_190 given-argc_191)"
"(if(= given-argc_191 5)"
"(let-values(((l1_192) given-kws_190))"
"(let-values(((l1_193)(if(null? l1_192) l1_192(if(eq?(car l1_192) '#:locals)(cdr l1_192) l1_192))))"
"(null? l1_193)))"
" #f))"
"(case-lambda"
"((given-kws_194 given-args_195 e_196 expected-results_197 required-reference?_198)"
"(unpack7.1$2 given-kws_194 given-args_195 e_196 expected-results_197 required-reference?_198)))"
" null"
" '(#:locals)"
"(let-values(((any-side-effects?_199)"
"(case-lambda"
"((e_200 expected-results_201 required-reference?_202)"
"(unpack7.1$2 null null e_200 expected-results_201 required-reference?_202)))))"
" any-side-effects?_199)))"
"(define-values"
"(struct:struct-op make-struct-op struct-op? struct-op-type struct-op-field-count)"
"(let-values(((struct:_203 make-_204 ?_205 -ref_206 -set!_207)"
"(make-struct-type 'struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'struct-op)))"
"(values"
" struct:_203"
" make-_204"
" ?_205"
"(make-struct-field-accessor -ref_206 0 'type)"
"(make-struct-field-accessor -ref_206 1 'field-count))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_229 idss_230 rhss_231)"
"(let-values(((lst_232) idss_230)((lst_233) rhss_231))"
"(begin"
"(if(list? lst_232)(void)(let-values()(in-list lst_232)))"
"(if(list? lst_233)(void)(let-values()(in-list lst_233)))"
"((letrec-values(((for-loop_234)"
"(lambda(locals_235 lst_236 lst_237)"
"(if(if(pair? lst_236)(pair? lst_237) #f)"
"(let-values(((ids_238)(unsafe-car lst_236))((rhs_239)(unsafe-car lst_237)))"
"(if(if #t #t #f)"
"(let-values(((locals_240)"
"(let-values(((locals_241) locals_235))"
"(let-values(((locals_242)"
"(let-values()"
"(let-values(((tmp_243)"
"(if(pair?(correlated-e rhs_239))"
"(correlated-e"
"(car(correlated-e rhs_239)))"
" #f)))"
"(if(equal? tmp_243 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_244)"
"(extract-struct-field-count-lower-bound"
" rhs_239)))"
"(let-values(((lst_245)"
"(correlated->list ids_238))"
"((lst_246)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_245)"
"(void)"
"(let-values()(in-list lst_245)))"
"(if(list? lst_246)"
"(void)"
"(let-values()(in-list lst_246)))"
"((letrec-values(((for-loop_247)"
"(lambda(locals_248"
" lst_249"
" lst_250)"
"(if(if(pair?"
" lst_249)"
"(pair? lst_250)"
" #f)"
"(let-values(((id_251)"
"(unsafe-car"
" lst_249))"
"((type_252)"
"(unsafe-car"
" lst_250)))"
"(if(if #t #t #f)"
"(let-values(((locals_253)"
"(let-values(((locals_254)"
" locals_248))"
"(let-values(((locals_255)"
"(let-values()"
"(hash-set"
" locals_254"
"(correlated-e"
" id_251)"
"(make-struct-op"
" type_252"
" field-count_244)))))"
"(values"
" locals_255)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_247"
" locals_253"
"(unsafe-cdr"
" lst_249)"
"(unsafe-cdr"
" lst_250))"
" locals_253))"
" locals_248))"
" locals_248))))"
" for-loop_247)"
" locals_241"
" lst_245"
" lst_246)))))"
"(let-values()"
"(let-values(((lst_256)"
"(correlated->list ids_238)))"
"(begin"
"(if(list? lst_256)"
"(void)"
"(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(locals_258"
" lst_259)"
"(if(pair? lst_259)"
"(let-values(((id_260)"
"(unsafe-car"
" lst_259)))"
"(if #t"
"(let-values(((locals_261)"
"(let-values(((locals_262)"
" locals_258))"
"(let-values(((locals_263)"
"(let-values()"
"(hash-set"
" locals_262"
" id_260"
" #t))))"
"(values"
" locals_263)))))"
"(if #t"
"(for-loop_257"
" locals_261"
"(unsafe-cdr"
" lst_259))"
" locals_261))"
" locals_258))"
" locals_258))))"
" for-loop_257)"
" locals_241"
" lst_256)))))))))"
"(values locals_242)))))"
"(if(if #t #t #f)"
"(for-loop_234 locals_240(unsafe-cdr lst_236)(unsafe-cdr lst_237))"
" locals_240))"
" locals_235))"
" locals_235))))"
" for-loop_234)"
" locals_229"
" lst_232"
" lst_233)))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_264 required-reference?_265)"
"(let-values(((l_266)(correlated->list e_264)))"
"(let-values(((init-field-count-expr_267)(if(>(length l_266) 3)(list-ref l_266 3) #f)))"
"(let-values(((immutables-expr_268)"
"(let-values(((or-part_269)(if(>(length l_266) 9)(list-ref l_266 9) #f)))"
"(if or-part_269 or-part_269 'null))))"
"(if(>=(length l_266) 5)"
"(if(<=(length l_266) 12)"
"(let-values(((pos->vals_270 pos-next_271 init_272 pos-cont?_273 val-cont?_274 all-cont?_275)"
"(make-sequence '(arg)(cdr l_266)))"
"((pos->vals_276 pos-next_277 init_278 pos-cont?_279 val-cont?_280 all-cont?_281)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_282)(quoted? symbol? v_282))"
"(lambda(v_283)(quoted? false? v_283))"
"(lambda(v_284)(field-count-expr-to-field-count v_284))"
"(lambda(v_285)(field-count-expr-to-field-count v_285))"
"(lambda(v_286)"
"(not"
"(let-values(((v39_287) v_286)"
"((temp40_288) 1)"
"((required-reference?41_289) required-reference?_265))"
"(if(variable-reference-constant?(#%variable-reference any-side-effects?8.1))"
"(any-side-effects?6.1 #f #f v39_287 temp40_288 required-reference?41_289)"
"(any-side-effects?8.1 v39_287 temp40_288 required-reference?41_289)))))"
"(lambda(v_290)(known-good-struct-properties? v_290 immutables-expr_268))"
"(lambda(v_291)(inspector-or-false? v_291))"
"(lambda(v_292)(procedure-spec? v_292 immutables-expr_268))"
"(lambda(v_293)(immutables-ok? v_293 init-field-count-expr_267))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_294)"
"(lambda(result_295 pos_296 pos_297)"
"(if(if(if pos-cont?_273(pos-cont?_273 pos_296) #t)"
"(if pos-cont?_279(pos-cont?_279 pos_297) #t)"
" #f)"
"(let-values(((arg_298)(pos->vals_270 pos_296))"
"((pred_299)(pos->vals_276 pos_297)))"
"(if(if(if val-cont?_274(val-cont?_274 arg_298) #t)"
"(if val-cont?_280(val-cont?_280 pred_299) #t)"
" #f)"
"(let-values(((result_300)"
"(let-values(((result_301) result_295))"
"(let-values(((result_302)"
"(let-values()"
"(let-values()(pred_299 arg_298)))))"
"(values result_302)))))"
"(if(if(if(if all-cont?_275(all-cont?_275 pos_296 arg_298) #t)"
"(not((lambda x_303(not result_300)) arg_298))"
" #f)"
"(if(if all-cont?_281(all-cont?_281 pos_297 pred_299) #t)"
"(not((lambda x_304(not result_300)) pred_299))"
" #f)"
" #f)"
"(for-loop_294 result_300(pos-next_271 pos_296)(pos-next_277 pos_297))"
" result_300))"
" result_295))"
" result_295))))"
" for-loop_294)"
" #t"
" init_272"
" init_278)))"
" #f)"
" #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_305)"
"(let-values(((l_306)(correlated->list e_305)))"
"(+(field-count-expr-to-field-count(list-ref l_306 3))(field-count-expr-to-field-count(list-ref l_306 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_307 v_308)"
"(let-values(((or-part_309)"
"(if(pair?(correlated-e v_308))"
"(if(eq?(correlated-e(car(correlated-e v_308))) 'quote)"
"(val?_307(correlated-e(correlated-cadr v_308)))"
" #f)"
" #f)))"
"(if or-part_309 or-part_309(val?_307(correlated-e v_308))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_310)(if(pair?(correlated-e v_310))(correlated-e(correlated-cadr v_310))(correlated-e v_310))))"
"(define-values(false?)(lambda(v_311)(eq?(correlated-e v_311) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_312)(if(quoted? exact-nonnegative-integer? v_312)(quoted-value v_312) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_313)"
"(let-values(((or-part_314)(quoted? false? v_313)))"
"(if or-part_314"
" or-part_314"
"(if(= 1(correlated-length v_313))(eq? 'current-inspector(correlated-e(car(correlated-e v_313)))) #f)))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_315 immutables-expr_316)"
"(let-values(((or-part_317)(quoted? null? v_315)))"
"(if or-part_317"
" or-part_317"
"(let-values(((or-part_318)(eq? 'null(correlated-e v_315))))"
"(if or-part_318"
" or-part_318"
"(if(pair?(correlated-e v_315))"
"(if(eq?(correlated-e(car(correlated-e v_315))) 'list)"
"(if(let-values(((lst_319)(cdr(correlated->list v_315))))"
"(begin"
"(if(list? lst_319)(void)(let-values()(in-list lst_319)))"
"((letrec-values(((for-loop_320)"
"(lambda(result_321 lst_322)"
"(if(pair? lst_322)"
"(let-values(((prop+val_323)(unsafe-car lst_322)))"
"(if #t"
"(let-values(((result_324)"
"(let-values(((result_325) result_321))"
"(let-values(((result_326)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_323)"
" 3)"
"(let-values(((prop+val_327)"
"(correlated->list"
" prop+val_323)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_327)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_327 1)"
"(list-ref prop+val_327 2)"
" immutables-expr_316)"
" #f))"
" #f)))))"
"(values result_326)))))"
"(if(if #t(not((lambda x_328(not result_324)) prop+val_323)) #f)"
"(for-loop_320 result_324(unsafe-cdr lst_322))"
" result_324))"
" result_321))"
" result_321))))"
" for-loop_320)"
" #t"
" lst_319)))"
"(="
"(sub1(correlated-length v_315))"
"(set-count"
"(let-values(((lst_329)(cdr(correlated->list v_315))))"
"(begin"
"(if(list? lst_329)(void)(let-values()(in-list lst_329)))"
"((letrec-values(((for-loop_330)"
"(lambda(table_331 lst_332)"
"(if(pair? lst_332)"
"(let-values(((prop+val_333)(unsafe-car lst_332)))"
"(if #t"
"(let-values(((table_334)"
"(let-values(((table_335) table_331))"
"(let-values(((table_336)"
"(let-values()"
"(let-values(((key_337 val_338)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_333)"
" 1)))"
" #t))))"
"(hash-set"
" table_335"
" key_337"
" val_338)))))"
"(values table_336)))))"
"(if #t(for-loop_330 table_334(unsafe-cdr lst_332)) table_334))"
" table_331))"
" table_331))))"
" for-loop_330)"
" '#hash()"
" lst_329)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_339 val-expr_340 immutables-expr_341)"
"(let-values(((tmp_342)(correlated-e prop-expr_339)))"
"(if(equal? tmp_342 'prop:evt)"
"(let-values()(immutable-field? val-expr_340 immutables-expr_341))"
"(if(equal? tmp_342 'prop:procedure)"
"(let-values()(immutable-field? val-expr_340 immutables-expr_341))"
"(let-values() #f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_343 immutables-expr_344)"
"(if(quoted? exact-nonnegative-integer? val-expr_343)"
"(memv(quoted-value val-expr_343)(immutables-expr-to-immutables immutables-expr_344 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_345 fail-v_346)"
"(let-values(((tmp_347)(if(pair?(correlated-e e_345))(correlated-e(car(correlated-e e_345))) #f)))"
"(if(equal? tmp_347 'quote)"
"(let-values()"
"(let-values(((v_348)(correlated-cadr e_345)))"
"(let-values(((or-part_349)"
"(if(correlated-length v_348)"
"(let-values(((l_350)(map2 correlated-e(correlated->list v_348))))"
"(if(andmap2 exact-nonnegative-integer? l_350)"
"(if(=(length l_350)(set-count(list->set l_350))) l_350 #f)"
" #f))"
" #f)))"
"(if or-part_349 or-part_349 fail-v_346))))"
"(let-values() fail-v_346)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_351 immutables-expr_352)"
"(let-values(((or-part_353)(quoted? false? e_351)))"
"(if or-part_353"
" or-part_353"
"(if(quoted? exact-nonnegative-integer? e_351)"
"(memv(quoted-value e_351)(immutables-expr-to-immutables immutables-expr_352 null))"
" #f)))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_354 init-field-count-expr_355)"
"(let-values(((l_356)(immutables-expr-to-immutables e_354 #f)))"
"(let-values(((c_357)(field-count-expr-to-field-count init-field-count-expr_355)))"
"(if l_356"
"(let-values(((lst_358) l_356))"
"(begin"
"(if(list? lst_358)(void)(let-values()(in-list lst_358)))"
"((letrec-values(((for-loop_359)"
"(lambda(result_360 lst_361)"
"(if(pair? lst_361)"
"(let-values(((n_362)(unsafe-car lst_361)))"
"(if #t"
"(let-values(((result_363)"
"(let-values(((result_364) result_360))"
"(let-values(((result_365)"
"(let-values()(let-values()(< n_362 c_357)))))"
"(values result_365)))))"
"(if(if #t(not((lambda x_366(not result_363)) n_362)) #f)"
"(for-loop_359 result_363(unsafe-cdr lst_361))"
" result_363))"
" result_360))"
" result_360))))"
" for-loop_359)"
" #t"
" lst_358)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_367 locals_368 type_369)"
"(let-values(((l_370)(correlated->list e_367)))"
"(let-values(((a_371)(if(=(length l_370) 4)(hash-ref locals_368(correlated-e(list-ref l_370 1)) #f) #f)))"
"(if(struct-op? a_371)"
"(if(eq?(struct-op-type a_371) type_369)"
"(if(<(field-count-expr-to-field-count(list-ref l_370 2))(struct-op-field-count a_371))"
"(quoted? symbol?(list-ref l_370 3))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(compile-module11.1)"
"(lambda(as-submodule?2_2"
" as-submodule?6_3"
" self1_4"
" self5_5"
" serializable?3_6"
" serializable?7_7"
" to-source?4_8"
" to-source?8_9"
" s9_10"
" cctx10_11)"
"(let-values(((s_12) s9_10))"
"(let-values(((cctx_13) cctx10_11))"
"(let-values(((given-self_14)(if self5_5 self1_4 #f)))"
"(let-values(((as-submodule?_15)(if as-submodule?6_3 as-submodule?2_2 #f)))"
"(let-values(((serializable?_16)(if serializable?7_7 serializable?3_6(not as-submodule?_15))))"
"(let-values(((to-source?_17)(if to-source?8_9 to-source?4_8 #f)))"
"(let-values()"
"(let-values(((ok?_18 module28_19 name29_20 initial-require30_21 mb31_22)"
"(let-values(((s_83)(syntax-disarm$1 s_12)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_84) s_83))"
"(let-values(((module28_85 name29_86 initial-require30_87 mb31_88)"
"(let-values(((s_89)(if(syntax?$1 s_83)(syntax-e$1 s_83) s_83)))"
"(if(pair? s_89)"
"(let-values(((module32_90)"
"(let-values(((s_94)(car s_89))) s_94))"
"((name33_91 initial-require34_92 mb35_93)"
"(let-values(((s_95)(cdr s_89)))"
"(let-values(((s_96)"
"(if(syntax?$1 s_95)"
"(syntax-e$1 s_95)"
" s_95)))"
"(if(pair? s_96)"
"(let-values(((name36_97)"
"(let-values(((s_100)"
"(car s_96)))"
" s_100))"
"((initial-require37_98 mb38_99)"
"(let-values(((s_101)"
"(cdr s_96)))"
"(let-values(((s_102)"
"(if(syntax?$1"
" s_101)"
"(syntax-e$1"
" s_101)"
" s_101)))"
"(if(pair? s_102)"
"(let-values(((initial-require39_103)"
"(let-values(((s_105)"
"(car"
" s_102)))"
" s_105))"
"((mb40_104)"
"(let-values(((s_106)"
"(cdr"
" s_102)))"
"(let-values(((s_107)"
"(if(syntax?$1"
" s_106)"
"(syntax-e$1"
" s_106)"
" s_106)))"
"(if(pair?"
" s_107)"
"(let-values(((mb41_108)"
"(let-values(((s_109)"
"(car"
" s_107)))"
" s_109))"
"(()"
"(let-values(((s_110)"
"(cdr"
" s_107)))"
"(let-values(((s_111)"
"(if(syntax?$1"
" s_110)"
"(syntax-e$1"
" s_110)"
" s_110)))"
"(if(null?"
" s_111)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_84))))))"
"(values"
" mb41_108))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_84))))))"
"(values"
" initial-require39_103"
" mb40_104))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_84))))))"
"(values"
" name36_97"
" initial-require37_98"
" mb38_99))"
"(raise-syntax-error$1"
" #f"
"                                                                             \"bad syntax\""
" orig-s_84))))))"
"(values module32_90 name33_91 initial-require34_92 mb35_93))"
"                                                        (raise-syntax-error$1 #f \"bad syntax\" orig-s_84)))))"
"(values #t module28_85 name29_86 initial-require30_87 mb31_88)))"
"(values #f #f #f #f #f)))))"
"(let-values(((ok?_37 #%module-begin42_38 body43_39)"
"(let-values(((s_112)(syntax-disarm$1 mb31_22)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_113) s_112))"
"(let-values(((#%module-begin42_114 body43_115)"
"(let-values(((s_116)"
"(if(syntax?$1 s_112)(syntax-e$1 s_112) s_112)))"
"(if(pair? s_116)"
"(let-values(((#%module-begin44_117)"
"(let-values(((s_119)(car s_116))) s_119))"
"((body45_118)"
"(let-values(((s_120)(cdr s_116)))"
"(let-values(((s_121)"
"(if(syntax?$1 s_120)"
"(syntax-e$1 s_120)"
" s_120)))"
"(let-values(((flat-s_122)"
"(to-syntax-list.1 s_121)))"
"(if(not flat-s_122)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_113))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_113))"
"(let-values() flat-s_122))))))))"
"(values #%module-begin44_117 body45_118))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_113)))))"
"(values #t #%module-begin42_114 body43_115)))"
"(values #f #f #f)))))"
"(let-values(((enclosing-self_50)(compile-context-module-self cctx_13)))"
"(let-values(((self_51)"
"(let-values(((or-part_123) given-self_14))"
"(if or-part_123"
" or-part_123"
"(make-generic-self-module-path-index"
"(make-self-module-path-index(syntax-e$1 name29_20) enclosing-self_50))))))"
"(let-values(((full-module-name_52)"
"(let-values(((parent-full-name_124)(compile-context-full-module-name cctx_13))"
"((name_125)(syntax-e$1 name29_20)))"
"(if parent-full-name_124"
"(append"
"(if(list? parent-full-name_124)"
" parent-full-name_124"
"(list parent-full-name_124))"
"(list name_125))"
" name_125))))"
"(let-values(((requires_53)(syntax-property$1 s_12 'module-requires)))"
"(let-values(((provides_54)(syntax-property$1 s_12 'module-provides)))"
"(let-values(((encoded-root-expand-ctx-box_55)"
"(box(syntax-property$1 s_12 'module-root-expand-context))))"
"(let-values(((body-context-simple?_56)"
"(syntax-property$1 s_12 'module-body-context-simple?)))"
"(let-values(((language-info_57)"
"(filter-language-info(syntax-property$1 s_12 'module-language))))"
"(let-values(((bodys_58) body43_39))"
"(let-values(((empty-result-for-module->namespace?_59) #f))"
"(let-values(((mpis_60)(make-module-path-index-table)))"
"(let-values(((body-cctx_61)"
"(let-values(((the-struct_126) cctx_13))"
"(if(compile-context? the-struct_126)"
"(let-values(((phase46_127) 0)"
"((self47_128) self_51)"
"((module-self48_129) self_51)"
"((full-module-name49_130)"
" full-module-name_52)"
"((lazy-syntax-literals?50_131) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_126)"
" phase46_127"
" self47_128"
" module-self48_129"
" full-module-name49_130"
" lazy-syntax-literals?50_131"
"(compile-context-header the-struct_126)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"compile-context?\""
" the-struct_126)))))"
"(let-values(((cross-phase-persistent?_62) #f))"
"(let-values(((side-effects_63)(make-hasheqv)))"
"(let-values(((check-side-effects!_64)"
"(lambda(e_132"
" expected-results_133"
" phase_134"
" required-reference?_135)"
"(if(hash-ref side-effects_63 phase_134 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e51_136) e_132)"
"((expected-results52_137)"
" expected-results_133)"
"((required-reference?53_138)"
" required-reference?_135))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" #f"
" #f"
" e51_136"
" expected-results52_137"
" required-reference?53_138)"
"(any-side-effects?8.1"
" e51_136"
" expected-results52_137"
" required-reference?53_138)))"
"(let-values()"
"(hash-set! side-effects_63 phase_134 #t))"
"(void)))))))"
"(let-values(((body-linklets_65"
" min-phase_66"
" max-phase_67"
" phase-to-link-module-uses_68"
" phase-to-link-module-uses-expr_69"
" phase-to-link-extra-inspectorsss_70"
" syntax-literalss_71"
" root-ctx-syntax-literals_72)"
"(let-values(((...r/compile/module.rkt:90:4_139)"
" compile-forms18.1)"
"((bodys54_140) bodys_58)"
"((body-cctx55_141) body-cctx_61)"
"((mpis56_142) mpis_60)"
"((temp57_143)"
"(list"
"(list"
" syntax-literalss-id"
" get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((encoded-root-expand-ctx-box58_144)"
" encoded-root-expand-ctx-box_55)"
"((body-context-simple?59_145)"
" body-context-simple?_56)"
"((check-side-effects!60_146)"
" check-side-effects!_64)"
"((temp61_147)"
"(lambda(body_149 cctx_150)"
"(let-values(((tmp_151)"
"(core-form-sym"
" body_149"
"(compile-context-phase"
" cctx_150))))"
"(if(equal? tmp_151 '#%declare)"
"(let-values()"
"(let-values(((ok?_152"
" #%declare63_153"
" kw64_154)"
"(let-values(((s_165)"
" body_149))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_166)"
" s_165))"
"(let-values(((#%declare63_167"
" kw64_168)"
"(let-values(((s_169)"
"(if(syntax?$1"
" s_165)"
"(syntax-e$1"
" s_165)"
" s_165)))"
"(if(pair?"
" s_169)"
"(let-values(((#%declare65_170)"
"(let-values(((s_172)"
"(car"
" s_169)))"
" s_172))"
"((kw66_171)"
"(let-values(((s_173)"
"(cdr"
" s_169)))"
"(let-values(((s_174)"
"(if(syntax?$1"
" s_173)"
"(syntax-e$1"
" s_173)"
" s_173)))"
"(let-values(((flat-s_175)"
"(to-syntax-list.1"
" s_174)))"
"(if(not"
" flat-s_175)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_166))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_166))"
"(let-values()"
" flat-s_175))))))))"
"(values"
" #%declare65_170"
" kw66_171))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_166)))))"
"(values"
" #t"
" #%declare63_167"
" kw64_168)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((lst_176)"
" kw64_154))"
"(begin"
"(if(list? lst_176)"
"(void)"
"(let-values()"
"(in-list lst_176)))"
"((letrec-values(((for-loop_177)"
"(lambda(fold-var_178"
" lst_179)"
"(if(pair?"
" lst_179)"
"(let-values(((kw_180)"
"(unsafe-car"
" lst_179)))"
"(if #t"
"(let-values(((fold-var_181)"
"(let-values(((fold-var_182)"
" fold-var_178))"
"(let-values(((fold-var_183)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_180)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_62"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_180)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_59"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_55"
" #t)))"
"(void))))"
"(void)))))"
"(values"
" fold-var_183)))))"
"(if #t"
"(for-loop_177"
" fold-var_181"
"(unsafe-cdr"
" lst_179))"
" fold-var_181))"
" fold-var_178))"
" fold-var_178))))"
" for-loop_177)"
"(void)"
" lst_176)))"
" #f)))"
"(let-values() #f)))))"
"((to-source?62_148) to-source?_17))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-forms18.1))"
"(compile-forms16.1"
" temp57_143"
" check-side-effects!60_146"
" #t"
" encoded-root-expand-ctx-box58_144"
" #t"
" temp61_147"
" #t"
" body-context-simple?59_145"
" #t"
" to-source?62_148"
" #t"
" bodys54_140"
" body-cctx55_141"
" mpis56_142)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:90:4_139"
" keyword-procedure-extract"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
" 5)"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
"(list"
" temp57_143"
" check-side-effects!60_146"
" encoded-root-expand-ctx-box58_144"
" temp61_147"
" body-context-simple?59_145"
" to-source?62_148)"
" bodys54_140"
" body-cctx55_141"
" mpis56_142)))))"
"(let-values(((all-syntax-literalss_73)"
"(if root-ctx-syntax-literals_72"
"(append"
" syntax-literalss_71"
"(list root-ctx-syntax-literals_72))"
" syntax-literalss_71)))"
"(let-values(((pre-submodules_74)"
"(let-values(((...r/compile/module.rkt:117:25_184)"
" compile-submodules27.1)"
"((temp67_185) 'module)"
"((bodys68_186) bodys_58)"
"((as-submodule?69_187)"
" as-submodule?_15)"
"((serializable?70_188)"
" serializable?_16)"
"((to-source?71_189) to-source?_17)"
"((body-cctx72_190) body-cctx_61))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules27.1))"
"(compile-submodules25.1"
" as-submodule?69_187"
" bodys68_186"
" body-cctx72_190"
" serializable?70_188"
" to-source?71_189"
" temp67_185)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:117:25_184"
" keyword-procedure-extract"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?)"
" 3)"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?)"
"(list"
" as-submodule?69_187"
" bodys68_186"
" body-cctx72_190"
" serializable?70_188"
" to-source?71_189)"
" temp67_185)))))"
"(let-values(((post-submodules_75)"
"(let-values(((...r/compile/module.rkt:123:26_191)"
" compile-submodules27.1)"
"((temp73_192) 'module*)"
"((bodys74_193) bodys_58)"
"((as-submodule?75_194)"
" as-submodule?_15)"
"((serializable?76_195)"
" serializable?_16)"
"((to-source?77_196) to-source?_17)"
"((body-cctx78_197) body-cctx_61))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules27.1))"
"(compile-submodules25.1"
" as-submodule?75_194"
" bodys74_193"
" body-cctx78_197"
" serializable?76_195"
" to-source?77_196"
" temp73_192)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:123:26_191"
" keyword-procedure-extract"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?)"
" 3)"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?)"
"(list"
" as-submodule?75_194"
" bodys74_193"
" body-cctx78_197"
" serializable?76_195"
" to-source?77_196)"
" temp73_192)))))"
"(let-values(((declaration-body_76)"
"(list"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index! mpis_60 self_51))"
"(list"
" 'define-values"
" '(cross-phase-persistent?)"
" cross-phase-persistent?_62)"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((...r/compile/module.rkt:135:33_198)"
" generate-deserialize7.1)"
"((requires79_199) requires_53)"
"((mpis80_200) mpis_60)"
"((temp81_201) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-deserialize7.1))"
"(generate-deserialize5.1"
" temp81_201"
" #t"
" requires79_199"
" mpis80_200)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:135:33_198"
" keyword-procedure-extract"
" '(#:syntax-support?)"
" 4)"
" '(#:syntax-support?)"
"(list temp81_201)"
" requires79_199"
" mpis80_200))))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((...r/compile/module.rkt:136:33_202)"
" generate-deserialize7.1)"
"((provides82_203) provides_54)"
"((mpis83_204) mpis_60)"
"((temp84_205) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-deserialize7.1))"
"(generate-deserialize5.1"
" temp84_205"
" #t"
" provides82_203"
" mpis83_204)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:136:33_202"
" keyword-procedure-extract"
" '(#:syntax-support?)"
" 4)"
" '(#:syntax-support?)"
"(list temp84_205)"
" provides82_203"
" mpis83_204))))"
"(list"
" 'define-values"
" '(side-effects)"
"(list"
" 'quote"
"(let-values(((temp85_206)"
"(hash-keys side-effects_63))"
"((<86_207) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp85_206"
" <86_207)"
"(sort9.1 temp85_206 <86_207)))))"
"(list"
" 'define-values"
" '(min-phase)"
" min-phase_66)"
"(list"
" 'define-values"
" '(max-phase)"
" max-phase_67)"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_69)"
"(list"
" 'define-values"
" '(language-info)"
"(list 'quote language-info_57)))))"
"(let-values(((declaration-linklet_77)"
"((if to-source?_17 values 1/compile-linklet)"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" variables"
" side-effects"
" cross-phase-persistent?"
" min-phase"
" max-phase"
" phase-to-link-modules"
" language-info)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
" declaration-body_76))))"
"(let-values(((syntax-literals-linklet_78)"
"((if to-source?_17"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_16"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" syntax-literalss-id"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((...r/compile/module.rkt:186:9_208)"
" generate-lazy-syntax-literals!10.1)"
"((all-syntax-literalss87_209)"
" all-syntax-literalss_73)"
"((mpis88_210) mpis_60)"
"((self89_211) self_51)"
"((temp90_212)"
"(not serializable?_16)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-lazy-syntax-literals!10.1))"
"(generate-lazy-syntax-literals!8.1"
" temp90_212"
" #t"
" all-syntax-literalss87_209"
" mpis88_210"
" self89_211)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:186:9_208"
" keyword-procedure-extract"
" '(#:skip-deserialize?)"
" 5)"
" '(#:skip-deserialize?)"
"(list temp90_212)"
" all-syntax-literalss87_209"
" mpis88_210"
" self89_211)))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-syntax-literals_72"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
"(add1 max-phase_67)"
" 0)))"
"(if empty-result-for-module->namespace?_59"
"(let-values() ''empty)"
"(let-values() ''#f))))))))))"
"(let-values(((syntax-literals-data-linklet_79)"
"(if serializable?_16"
"((if to-source?_17"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list"
" inspector-id"
" bulk-binding-registry-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(+ 2 max-phase_67)"
" '(#f)))"
"(generate-lazy-syntax-literals-data!"
" all-syntax-literalss_73"
" mpis_60)))"
" #f)))"
"(let-values(((data-linklet_80)"
"(if serializable?_16"
"((if to-source?_17"
" values"
" 1/compile-linklet)"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_60))))"
" #f)))"
"(let-values(((bundle_81)"
"(let-values(((linklets_213)"
"(hash-set"
" body-linklets_65"
" 'decl"
" declaration-linklet_77)))"
"(let-values(((linklets_214)"
"(if data-linklet_80"
"(hash-set"
" linklets_213"
" 'data"
" data-linklet_80)"
" linklets_213)))"
"(let-values(((linklets_215)"
"(hash-set"
" linklets_214"
" 'stx"
" syntax-literals-linklet_78)))"
"(let-values(((linklets_216)"
"(if syntax-literals-data-linklet_79"
"(hash-set"
" linklets_215"
" 'stx-data"
" syntax-literals-data-linklet_79)"
" linklets_215)))"
"(let-values(((linklets_217)"
"(hash-set"
" linklets_216"
" 'pre"
"(map2"
" car"
" pre-submodules_74))))"
"(let-values(((linklets_218)"
"(hash-set"
" linklets_217"
" 'post"
"(map2"
" car"
" post-submodules_75))))"
"(let-values(((linklets_219)"
"(hash-set"
" linklets_218"
" 'name"
" full-module-name_52)))"
"(1/hash->linklet-bundle"
" linklets_219))))))))))"
"(let-values(((ld_82)"
"((if to-source?_17"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_220)"
"(append"
" pre-submodules_74"
" post-submodules_75)))"
"(begin"
"(if(list? lst_220)"
"(void)"
"(let-values()"
"(in-list lst_220)))"
"((letrec-values(((for-loop_221)"
"(lambda(ht_222"
" lst_223)"
"(if(pair?"
" lst_223)"
"(let-values(((sm_224)"
"(unsafe-car"
" lst_223)))"
"(if #t"
"(let-values(((ht_225)"
"(let-values(((ht_226)"
" ht_222))"
"(let-values(((ht_227)"
"(let-values()"
"(hash-set"
" ht_226"
"(car"
" sm_224)"
"((if to-source?_17"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_224))))))"
"(values"
" ht_227)))))"
"(if #t"
"(for-loop_221"
" ht_225"
"(unsafe-cdr"
" lst_223))"
" ht_225))"
" ht_222))"
" ht_222))))"
" for-loop_221)"
"(hasheq #f bundle_81)"
" lst_220))))))"
"(if to-source?_17"
"(let-values() ld_82)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_82"
" 0"
" max-phase_67"
" phase-to-link-module-uses_68"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_70"
"(mpis-as-vector mpis_60)"
"(syntax-literals-as-vectors"
" all-syntax-literalss_73"
" 0)"
"(map2 cdr pre-submodules_74)"
"(map2"
" cdr"
" post-submodules_75)))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack12.1$3)"
"(lambda(given-kws_228 given-args_229 s9_230 cctx10_231)"
"(let-values(((as-submodule?6_232)(if(pair? given-kws_228)(eq? '#:as-submodule?(car given-kws_228)) #f)))"
"(let-values(((as-submodule?2_233)(if as-submodule?6_232(car given-args_229)(void)))"
"((given-kws_234)(if as-submodule?6_232(cdr given-kws_228) given-kws_228))"
"((given-args_235)(if as-submodule?6_232(cdr given-args_229) given-args_229)))"
"(let-values(((self5_236)(if(pair? given-kws_234)(eq? '#:self(car given-kws_234)) #f)))"
"(let-values(((self1_237)(if self5_236(car given-args_235)(void)))"
"((given-kws_238)(if self5_236(cdr given-kws_234) given-kws_234))"
"((given-args_239)(if self5_236(cdr given-args_235) given-args_235)))"
"(let-values(((serializable?7_240)"
"(if(pair? given-kws_238)(eq? '#:serializable?(car given-kws_238)) #f)))"
"(let-values(((serializable?3_241)(if serializable?7_240(car given-args_239)(void)))"
"((given-kws_242)(if serializable?7_240(cdr given-kws_238) given-kws_238))"
"((given-args_243)(if serializable?7_240(cdr given-args_239) given-args_239)))"
"(let-values(((to-source?8_244)(pair? given-kws_242)))"
"(let-values(((to-source?4_245)(if to-source?8_244(car given-args_243)(void))))"
"(compile-module11.1"
" as-submodule?2_233"
" as-submodule?6_232"
" self1_237"
" self5_236"
" serializable?3_241"
" serializable?7_240"
" to-source?4_245"
" to-source?8_244"
" s9_230"
" cctx10_231)))))))))))"
"(define-values"
"(compile-module13.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_246 given-argc_247)"
"(if(= given-argc_247 4)"
"(let-values(((l1_248) given-kws_246))"
"(let-values(((l1_249)"
"(if(null? l1_248) l1_248(if(eq?(car l1_248) '#:as-submodule?)(cdr l1_248) l1_248))))"
"(let-values(((l1_250) l1_249))"
"(let-values(((l1_251)(if(null? l1_250) l1_250(if(eq?(car l1_250) '#:self)(cdr l1_250) l1_250))))"
"(let-values(((l1_252) l1_251))"
"(let-values(((l1_253)"
"(if(null? l1_252) l1_252(if(eq?(car l1_252) '#:serializable?)(cdr l1_252) l1_252))))"
"(let-values(((l1_254) l1_253))"
"(let-values(((l1_255)"
"(if(null? l1_254)"
" l1_254"
"(if(eq?(car l1_254) '#:to-source?)(cdr l1_254) l1_254))))"
"(null? l1_255)))))))))"
" #f))"
"(case-lambda"
"((given-kws_256 given-args_257 s_258 cctx_259)(unpack12.1$3 given-kws_256 given-args_257 s_258 cctx_259)))"
" null"
" '(#:as-submodule? #:self #:serializable? #:to-source?)"
"(let-values(((compile-module_260)(case-lambda((s_261 cctx_262)(unpack12.1$3 null null s_261 cctx_262)))))"
" compile-module_260)))"
"(define-values"
"(lifted/1.1$15)"
"(make-required"
" 'compile-submodules"
"(case-lambda((self_263 form-name_264)(apply missing-kw self_263 form-name_264 null)))"
" #f"
" #f))"
"(define-values"
"(compile-submodules25.1)"
"(lambda(as-submodule?15_265 bodys14_266 cctx18_267 serializable?16_268 to-source?17_269 form-name24_270)"
"(let-values(((form-name_271) form-name24_270))"
"(let-values(((bodys_272) bodys14_266))"
"(let-values(((as-submodule?_273) as-submodule?15_265))"
"(let-values(((serializable?_274) serializable?16_268))"
"(let-values(((to-source?_275) to-source?17_269))"
"(let-values(((body-cctx_276) cctx18_267))"
"(let-values()"
"(if as-submodule?_273"
"(let-values() null)"
"(let-values()"
"((letrec-values(((loop_277)"
"(lambda(bodys_278 phase_279)"
"(if(null? bodys_278)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_280)(syntax-disarm$1(car bodys_278))))"
"(let-values(((f_281)(core-form-sym body_280 phase_279)))"
"(if(eq? f_281 form-name_271)"
"(let-values()"
"(let-values(((ok?_282 _91_283 name92_284 _93_285)"
"(let-values(((s_315) body_280))"
"(if(if #t #t #f)"
"(let-values(((orig-s_316) s_315))"
"(let-values(((_91_317 name92_318 _93_319)"
"(let-values(((s_320)"
"(if(syntax?$1"
" s_315)"
"(syntax-e$1"
" s_315)"
" s_315)))"
"(if(pair? s_320)"
"(let-values(((_94_321)"
"(let-values(((s_324)"
"(car"
" s_320)))"
" s_324))"
"((name95_322"
" _96_323)"
"(let-values(((s_325)"
"(cdr"
" s_320)))"
"(let-values(((s_326)"
"(if(syntax?$1"
" s_325)"
"(syntax-e$1"
" s_325)"
" s_325)))"
"(if(pair?"
" s_326)"
"(let-values(((name97_327)"
"(let-values(((s_329)"
"(car"
" s_326)))"
" s_329))"
"((_98_328)"
"(let-values(((s_330)"
"(cdr"
" s_326)))"
" s_330)))"
"(values"
" name97_327"
" _98_328))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_316))))))"
"(values"
" _94_321"
" name95_322"
" _96_323))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_316)))))"
"(values #t _91_317 name92_318 _93_319)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_298 module*99_299 name100_300 _101_301)"
"(let-values(((s_331) body_280))"
"(if(if #t"
"(let-values(((s_332)"
"(if(syntax?$1 s_331)"
"(syntax-e$1 s_331)"
" s_331)))"
"(if(pair? s_332)"
"(if(let-values(((s_333)"
"(car s_332)))"
" #t)"
"(let-values(((s_334)(cdr s_332)))"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_334)"
"(syntax-e$1 s_334)"
" s_334)))"
"(if(pair? s_335)"
"(if(let-values(((s_336)"
"(car"
" s_335)))"
" #t)"
"(let-values(((s_337)"
"(cdr s_335)))"
"(let-values(((s_338)"
"(if(syntax?$1"
" s_337)"
"(syntax-e$1"
" s_337)"
" s_337)))"
"(if(pair? s_338)"
"(if(let-values(((s_339)"
"(car"
" s_338)))"
"(let-values(((s_340)"
"(if(syntax?$1"
" s_339)"
"(syntax-e$1"
" s_339)"
" s_339)))"
"(eq?"
" #f"
" s_340)))"
"(let-values(((s_341)"
"(cdr"
" s_338)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_342) s_331))"
"(let-values(((module*99_343"
" name100_344"
" _101_345)"
"(let-values(((s_346)"
"(if(syntax?$1"
" s_331)"
"(syntax-e$1"
" s_331)"
" s_331)))"
"(if #t"
"(let-values(((module*102_347)"
"(let-values(((s_350)"
"(car"
" s_346)))"
" s_350))"
"((name103_348"
" _104_349)"
"(let-values(((s_351)"
"(cdr"
" s_346)))"
"(let-values(((s_352)"
"(if(syntax?$1"
" s_351)"
"(syntax-e$1"
" s_351)"
" s_351)))"
"(if #t"
"(let-values(((name105_353)"
"(let-values(((s_355)"
"(car"
" s_352)))"
" s_355))"
"((_106_354)"
"(let-values(((s_356)"
"(cdr"
" s_352)))"
"(let-values(((s_357)"
"(if(syntax?$1"
" s_356)"
"(syntax-e$1"
" s_356)"
" s_356)))"
"(if #t"
"(let-values((()"
"(let-values(((s_359)"
"(car"
" s_357)))"
"(let-values(((s_360)"
"(if(syntax?$1"
" s_359)"
"(syntax-e$1"
" s_359)"
" s_359)))"
"(values))))"
"((_107_358)"
"(let-values(((s_361)"
"(cdr"
" s_357)))"
" s_361)))"
"(values"
" _107_358))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_342))))))"
"(values"
" name105_353"
" _106_354))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_342))))))"
"(values"
" module*102_347"
" name103_348"
" _104_349))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_342)))))"
"(values"
" #t"
" module*99_343"
" name100_344"
" _101_345)))"
"(values #f #f #f #f)))))"
"(let-values(((s-shifted_314)"
"(if ok?_298"
"(let-values()"
"(syntax-shift-phase-level$1"
" body_280"
"(phase- 0 phase_279)))"
"(let-values() body_280))))"
"(cons"
"(cons"
"(syntax-e$1 name92_284)"
"(let-values(((...r/compile/module.rkt:306:22_362)"
" compile-module13.1)"
"((s-shifted108_363) s-shifted_314)"
"((body-cctx109_364) body-cctx_276)"
"((serializable?110_365) serializable?_274)"
"((to-source?111_366) to-source?_275))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module13.1))"
"(compile-module11.1"
" #f"
" #f"
" #f"
" #f"
" serializable?110_365"
" #t"
" to-source?111_366"
" #t"
" s-shifted108_363"
" body-cctx109_364)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:306:22_362"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?110_365 to-source?111_366)"
" s-shifted108_363"
" body-cctx109_364))))"
"(loop_277(cdr bodys_278) phase_279))))))"
"(if(eq? f_281 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_367 begin-for-syntax112_368 e113_369)"
"(let-values(((s_380) body_280))"
"(if(if #t #t #f)"
"(let-values(((orig-s_381) s_380))"
"(let-values(((begin-for-syntax112_382"
" e113_383)"
"(let-values(((s_384)"
"(if(syntax?$1"
" s_380)"
"(syntax-e$1"
" s_380)"
" s_380)))"
"(if(pair? s_384)"
"(let-values(((begin-for-syntax114_385)"
"(let-values(((s_387)"
"(car"
" s_384)))"
" s_387))"
"((e115_386)"
"(let-values(((s_388)"
"(cdr"
" s_384)))"
"(let-values(((s_389)"
"(if(syntax?$1"
" s_388)"
"(syntax-e$1"
" s_388)"
" s_388)))"
"(let-values(((flat-s_390)"
"(to-syntax-list.1"
" s_389)))"
"(if(not"
" flat-s_390)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_381))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_381))"
"(let-values()"
" flat-s_390))))))))"
"(values"
" begin-for-syntax114_385"
" e115_386))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_381)))))"
"(values"
" #t"
" begin-for-syntax112_382"
" e113_383)))"
"(values #f #f #f)))))"
"(append"
"(loop_277 e113_369(add1 phase_279))"
"(loop_277(cdr bodys_278) phase_279))))"
"(let-values()(loop_277(cdr bodys_278) phase_279)))))))))))"
" loop_277)"
" bodys_272"
" 0))))))))))))"
"(define-values"
"(unpack26.1$1)"
"(lambda(given-kws_391 given-args_392 form-name24_393)"
"(let-values(((as-submodule?15_394)(car given-args_392))"
"((given-kws_395)(cdr given-kws_391))"
"((given-args_396)(cdr given-args_392)))"
"(let-values(((bodys14_397)(car given-args_396))"
"((given-kws_398)(cdr given-kws_395))"
"((given-args_399)(cdr given-args_396)))"
"(let-values(((cctx18_400)(car given-args_399))"
"((given-kws_401)(cdr given-kws_398))"
"((given-args_402)(cdr given-args_399)))"
"(let-values(((serializable?16_403)(car given-args_402))"
"((given-kws_404)(cdr given-kws_401))"
"((given-args_405)(cdr given-args_402)))"
"(let-values(((to-source?17_406)(car given-args_405)))"
"(compile-submodules25.1"
" as-submodule?15_394"
" bodys14_397"
" cctx18_400"
" serializable?16_403"
" to-source?17_406"
" form-name24_393))))))))"
"(define-values"
"(compile-submodules27.1)"
"(lifted/1.1$15"
"(lambda(given-kws_407 given-argc_408)"
"(if(= given-argc_408 3)"
"(let-values(((l2_409) given-kws_407))"
"(if(pair? l2_409)"
"(if(eq?(car l2_409) '#:as-submodule?)"
"(let-values(((l2_410)(cdr l2_409)))"
"(if(pair? l2_410)"
"(if(eq?(car l2_410) '#:bodys)"
"(let-values(((l2_411)(cdr l2_410)))"
"(if(pair? l2_411)"
"(if(eq?(car l2_411) '#:cctx)"
"(let-values(((l2_412)(cdr l2_411)))"
"(if(pair? l2_412)"
"(if(eq?(car l2_412) '#:serializable?)"
"(let-values(((l2_413)(cdr l2_412)))"
"(if(pair? l2_413)(if(eq?(car l2_413) '#:to-source?)(null?(cdr l2_413)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_414 given-args_415 form-name_416)(unpack26.1$1 given-kws_414 given-args_415 form-name_416)))"
" '(#:as-submodule? #:bodys #:cctx #:serializable? #:to-source?)"
" '(#:as-submodule? #:bodys #:cctx #:serializable? #:to-source?)))"
"(define-values"
"(filter-language-info)"
"(lambda(li_417)"
"(if(vector? li_417)"
"(if(= 3(vector-length li_417))"
"(if(1/module-path?(vector-ref li_417 0))(if(symbol?(vector-ref li_417 1)) li_417 #f) #f)"
" #f)"
" #f)))"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis/fast"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_7 make-_8 ?_9 -ref_10 -set!_11)"
"(make-struct-type"
" 'requires+provides"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'requires+provides)))"
"(values"
" struct:_7"
" make-_8"
" ?_9"
"(make-struct-field-accessor -ref_10 0 'self)"
"(make-struct-field-accessor -ref_10 1 'require-mpis)"
"(make-struct-field-accessor -ref_10 2 'require-mpis/fast)"
"(make-struct-field-accessor -ref_10 3 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_10 4 'requires)"
"(make-struct-field-accessor -ref_10 5 'provides)"
"(make-struct-field-accessor -ref_10 6 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_10 7 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_10 8 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_11 7 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_11 8 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_68 make-_69 ?_70 -ref_71 -set!_72)"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))"
"(values"
" struct:_68"
" make-_69"
" ?_70"
"(make-struct-field-accessor -ref_71 0 'id)"
"(make-struct-field-accessor -ref_71 1 'phase)"
"(make-struct-field-accessor -ref_71 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_71 3 'as-transformer?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_104)"
"(requires+provides1.1"
" self_104"
"(make-hash)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_105)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_105))"
"(hash-clear!(requires+provides-requires r+p_105))"
"(hash-clear!(requires+provides-provides r+p_105))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_105)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_106 mpi_107)"
"(let-values(((or-part_108)(hash-ref(requires+provides-require-mpis/fast r+p_106) mpi_107 #f)))"
"(if or-part_108"
" or-part_108"
"(let-values(((or-part_109)(hash-ref(requires+provides-require-mpis r+p_106) mpi_107 #f)))"
"(if or-part_109"
" or-part_109"
"(begin"
"(hash-set!(requires+provides-require-mpis r+p_106) mpi_107 mpi_107)"
"(hash-set!(requires+provides-require-mpis/fast r+p_106) mpi_107 mpi_107)"
" mpi_107)))))))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_110 mod-name_111 phase-shift_112 is-cross-phase-persistent?_113)"
"(let-values(((mpi_114)(intern-mpi r+p_110 mod-name_111)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_110) mpi_114 '#hasheqv()) phase-shift_112 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_110)"
" phase-shift_112"
"(lambda(l_115)(cons mpi_114 l_115))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_110) mpi_114 make-hasheqv)"
" phase-shift_112"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_113"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_110 #f)))"
" mpi_114))))"
"(define-values"
"(lifted/1.1$14)"
"(make-required"
" 'add-defined-or-required-id!"
"(case-lambda"
"((self_116 r+p_117 id_118 phase_119 binding_120)"
"(apply missing-kw self_116 r+p_117 id_118 phase_119 binding_120 null)))"
" #f"
" #f))"
"(define-values"
"(add-defined-or-required-id!11.1)"
"(lambda(as-transformer?4_121 can-be-shadowed?3_122 can-be-shadowed?5_123 r+p7_124 id8_125 phase9_126 binding10_127)"
"(let-values(((r+p_128) r+p7_124))"
"(let-values(((id_129) id8_125))"
"(let-values(((phase_130) phase9_126))"
"(let-values(((binding_131) binding10_127))"
"(let-values(((can-be-shadowed?_132)(if can-be-shadowed?5_123 can-be-shadowed?3_122 #f)))"
"(let-values(((as-transformer?_133) as-transformer?4_121))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_130"
"(phase+"
"(module-binding-nominal-phase binding_131)"
"(module-binding-nominal-require-phase binding_131)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:112:2_134) add-defined-or-required-id-at-nominal!27.1)"
"((r+p72_135) r+p_128)"
"((id73_136) id_129)"
"((phase74_137) phase_130)"
"((temp75_138)(module-binding-nominal-module binding_131))"
"((temp76_139)(module-binding-nominal-require-phase binding_131))"
"((can-be-shadowed?77_140) can-be-shadowed?_132)"
"((as-transformer?78_141) as-transformer?_133))"
"(if(variable-reference-constant?"
"(#%variable-reference add-defined-or-required-id-at-nominal!27.1))"
"(add-defined-or-required-id-at-nominal!25.1"
" as-transformer?78_141"
" can-be-shadowed?77_140"
" temp75_138"
" temp76_139"
" r+p72_135"
" id73_136"
" phase74_137)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:112:2_134"
" keyword-procedure-extract"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" 5)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
"(list as-transformer?78_141 can-be-shadowed?77_140 temp75_138 temp76_139)"
" r+p72_135"
" id73_136"
" phase74_137)))))))))))))"
"(define-values"
"(unpack12.1$2)"
"(lambda(given-kws_142 given-args_143 r+p7_144 id8_145 phase9_146 binding10_147)"
"(let-values(((as-transformer?4_148)(car given-args_143))"
"((given-kws_149)(cdr given-kws_142))"
"((given-args_150)(cdr given-args_143)))"
"(let-values(((can-be-shadowed?5_151)(pair? given-kws_149)))"
"(let-values(((can-be-shadowed?3_152)(if can-be-shadowed?5_151(car given-args_150)(void))))"
"(add-defined-or-required-id!11.1"
" as-transformer?4_148"
" can-be-shadowed?3_152"
" can-be-shadowed?5_151"
" r+p7_144"
" id8_145"
" phase9_146"
" binding10_147))))))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lifted/1.1$14"
"(lambda(given-kws_153 given-argc_154)"
"(if(= given-argc_154 6)(subsets? '(#:as-transformer?) given-kws_153 '(#:as-transformer? #:can-be-shadowed?)) #f))"
"(case-lambda"
"((given-kws_155 given-args_156 r+p_157 id_158 phase_159 binding_160)"
"(unpack12.1$2 given-kws_155 given-args_156 r+p_157 id_158 phase_159 binding_160)))"
" '(#:as-transformer?)"
" '(#:as-transformer? #:can-be-shadowed?)))"
"(define-values"
"(lifted/2.1$6)"
"(make-required"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_161 r+p_162 id_163 phase_164)(apply missing-kw self_161 r+p_162 id_163 phase_164 null)))"
" #f"
" #f))"
"(define-values"
"(add-defined-or-required-id-at-nominal!25.1)"
"(lambda(as-transformer?17_165"
" can-be-shadowed?16_166"
" nominal-module14_167"
" nominal-require-phase15_168"
" r+p22_169"
" id23_170"
" phase24_171)"
"(let-values(((r+p_172) r+p22_169))"
"(let-values(((id_173) id23_170))"
"(let-values(((phase_174) phase24_171))"
"(let-values(((nominal-module_175) nominal-module14_167))"
"(let-values(((nominal-require-phase_176) nominal-require-phase15_168))"
"(let-values(((can-be-shadowed?_177) can-be-shadowed?16_166))"
"(let-values(((as-transformer?_178) as-transformer?17_165))"
"(let-values()"
"(let-values(((at-mod_179)"
"(hash-ref!"
"(requires+provides-requires r+p_172)"
"(intern-mpi r+p_172 nominal-module_175)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_180)(hash-ref! at-mod_179 nominal-require-phase_176 make-hasheq)))"
"(let-values(((sym_181)(syntax-e$1 id_173)))"
"(hash-set!"
" sym-to-reqds_180"
" sym_181"
"(cons"
"(required2.1 id_173 phase_174 can-be-shadowed?_177 as-transformer?_178)"
"(hash-ref sym-to-reqds_180 sym_181 null))))))))))))))))"
"(define-values"
"(unpack26.1)"
"(lambda(given-kws_182 given-args_183 r+p22_184 id23_185 phase24_186)"
"(let-values(((as-transformer?17_187)(car given-args_183))"
"((given-kws_188)(cdr given-kws_182))"
"((given-args_189)(cdr given-args_183)))"
"(let-values(((can-be-shadowed?16_190)(car given-args_189))"
"((given-kws_191)(cdr given-kws_188))"
"((given-args_192)(cdr given-args_189)))"
"(let-values(((nominal-module14_193)(car given-args_192))"
"((given-kws_194)(cdr given-kws_191))"
"((given-args_195)(cdr given-args_192)))"
"(let-values(((nominal-require-phase15_196)(car given-args_195)))"
"(add-defined-or-required-id-at-nominal!25.1"
" as-transformer?17_187"
" can-be-shadowed?16_190"
" nominal-module14_193"
" nominal-require-phase15_196"
" r+p22_184"
" id23_185"
" phase24_186)))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lifted/2.1$6"
"(lambda(given-kws_197 given-argc_198)"
"(if(= given-argc_198 5)"
"(let-values(((l2_199) given-kws_197))"
"(if(pair? l2_199)"
"(if(eq?(car l2_199) '#:as-transformer?)"
"(let-values(((l2_200)(cdr l2_199)))"
"(if(pair? l2_200)"
"(if(eq?(car l2_200) '#:can-be-shadowed?)"
"(let-values(((l2_201)(cdr l2_200)))"
"(if(pair? l2_201)"
"(if(eq?(car l2_201) '#:nominal-module)"
"(let-values(((l2_202)(cdr l2_201)))"
"(if(pair? l2_202)"
"(if(eq?(car l2_202) '#:nominal-require-phase)(null?(cdr l2_202)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_203 given-args_204 r+p_205 id_206 phase_207)"
"(unpack26.1 given-kws_203 given-args_204 r+p_205 id_206 phase_207)))"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(lifted/3.1$2)"
"(make-required"
" 'add-enclosing-module-defined-and-required!"
"(case-lambda"
"((self_208 r+p_209 enclosing-mod_210 phase-shift_211)"
"(apply missing-kw self_208 r+p_209 enclosing-mod_210 phase-shift_211 null)))"
" #f"
" #f))"
"(define-values"
"(add-enclosing-module-defined-and-required!33.1)"
"(lambda(enclosing-requires+provides28_212 r+p30_213 enclosing-mod31_214 phase-shift32_215)"
"(let-values(((r+p_216) r+p30_213))"
"(let-values(((enclosing-r+p_217) enclosing-requires+provides28_212))"
"(let-values(((enclosing-mod_218) enclosing-mod31_214))"
"(let-values(((phase-shift_219) phase-shift32_215))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_216 #f)"
"(let-values(((ht_220)(requires+provides-requires enclosing-r+p_217)))"
"(begin"
"(if((lambda(ht_221)(hash? ht_221)) ht_220)(void)(let-values()(default-in-hash ht_220)))"
"((letrec-values(((for-loop_222)"
"(lambda(fold-var_223 i_224)"
"(if i_224"
"(let-values(((mod-name_225 at-mod_226)"
"(hash-iterate-key+value ht_220 i_224)))"
"(if #t"
"(let-values(((fold-var_227)"
"(let-values(((fold-var_228) fold-var_223))"
"(let-values(((fold-var_229)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ht_230) at-mod_226))"
"(begin"
"(if((lambda(ht_231)"
"(hash? ht_231))"
" ht_230)"
"(void)"
"(let-values()"
"(default-in-hash ht_230)))"
"((letrec-values(((for-loop_232)"
"(lambda(fold-var_233"
" i_234)"
"(if i_234"
"(let-values(((phase_235"
" at-phase_236)"
"(hash-iterate-key+value"
" ht_230"
" i_234)))"
"(if #t"
"(let-values(((fold-var_237)"
"(let-values(((ht_238)"
" at-phase_236))"
"(begin"
"(if((lambda(ht_239)"
"(hash?"
" ht_239))"
" ht_238)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_238)))"
"((letrec-values(((for-loop_240)"
"(lambda(fold-var_241"
" i_242)"
"(if i_242"
"(let-values(((reqds_243)"
"(hash-iterate-value"
" ht_238"
" i_242)))"
"(if #t"
"(let-values(((fold-var_244)"
"(let-values(((lst_245)"
" reqds_243))"
"(begin"
"(if(list?"
" lst_245)"
"(void)"
"(let-values()"
"(in-list"
" lst_245)))"
"((letrec-values(((for-loop_246)"
"(lambda(fold-var_247"
" lst_248)"
"(if(pair?"
" lst_248)"
"(let-values(((reqd_249)"
"(unsafe-car"
" lst_248)))"
"(if #t"
"(let-values(((fold-var_250)"
"(let-values(((fold-var_251)"
" fold-var_247))"
"(let-values(((fold-var_252)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((.../require+provide.rkt:143:6_253)"
" add-defined-or-required-id-at-nominal!27.1)"
"((r+p79_254)"
" r+p_216)"
"((temp80_255)"
"(syntax-module-path-index-shift"
"(required-id"
" reqd_249)"
"(requires+provides-self"
" enclosing-r+p_217)"
" enclosing-mod_218))"
"((temp81_256)"
"(phase+"
"(required-phase"
" reqd_249)"
" phase-shift_219))"
"((enclosing-mod82_257)"
" enclosing-mod_218)"
"((phase-shift83_258)"
" phase-shift_219)"
"((temp84_259)"
" #t)"
"((temp85_260)"
"(required-as-transformer?"
" reqd_249)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id-at-nominal!27.1))"
"(add-defined-or-required-id-at-nominal!25.1"
" temp85_260"
" temp84_259"
" enclosing-mod82_257"
" phase-shift83_258"
" r+p79_254"
" temp80_255"
" temp81_256)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:143:6_253"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
" 5)"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
"(list"
" temp85_260"
" temp84_259"
" enclosing-mod82_257"
" phase-shift83_258)"
" r+p79_254"
" temp80_255"
" temp81_256))))"
"(void)))))"
"(values"
" fold-var_252)))))"
"(if #t"
"(for-loop_246"
" fold-var_250"
"(unsafe-cdr"
" lst_248))"
" fold-var_250))"
" fold-var_247))"
" fold-var_247))))"
" for-loop_246)"
" fold-var_241"
" lst_245)))))"
"(if #t"
"(for-loop_240"
" fold-var_244"
"(hash-iterate-next"
" ht_238"
" i_242))"
" fold-var_244))"
" fold-var_241))"
" fold-var_241))))"
" for-loop_240)"
" fold-var_233"
"(hash-iterate-first"
" ht_238))))))"
"(if #t"
"(for-loop_232"
" fold-var_237"
"(hash-iterate-next"
" ht_230"
" i_234))"
" fold-var_237))"
" fold-var_233))"
" fold-var_233))))"
" for-loop_232)"
"(void)"
"(hash-iterate-first ht_230)))))"
"(void)))))"
"(values fold-var_229)))))"
"(if #t"
"(for-loop_222 fold-var_227(hash-iterate-next ht_220 i_224))"
" fold-var_227))"
" fold-var_223))"
" fold-var_223))))"
" for-loop_222)"
"(void)"
"(hash-iterate-first ht_220))))))))))))"
"(define-values"
"(unpack34.1$1)"
"(lambda(given-kws_261 given-args_262 r+p30_263 enclosing-mod31_264 phase-shift32_265)"
"(let-values(((enclosing-requires+provides28_266)(car given-args_262)))"
"(add-enclosing-module-defined-and-required!33.1"
" enclosing-requires+provides28_266"
" r+p30_263"
" enclosing-mod31_264"
" phase-shift32_265))))"
"(define-values"
"(add-enclosing-module-defined-and-required!35.1)"
"(lifted/3.1$2"
"(lambda(given-kws_267 given-argc_268)"
"(if(= given-argc_268 5)"
"(let-values(((l2_269) given-kws_267))"
"(if(pair? l2_269)(if(eq?(car l2_269) '#:enclosing-requires+provides)(null?(cdr l2_269)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_270 given-args_271 r+p_272 enclosing-mod_273 phase-shift_274)"
"(unpack34.1$1 given-kws_270 given-args_271 r+p_272 enclosing-mod_273 phase-shift_274)))"
" '(#:enclosing-requires+provides)"
" '(#:enclosing-requires+provides)))"
"(define-values"
"(lifted/4.1$2)"
"(make-required"
" 'remove-required-id!"
"(case-lambda((self_275 r+p_276 id_277 phase_278)(apply missing-kw self_275 r+p_276 id_277 phase_278 null)))"
" #f"
" #f))"
"(define-values"
"(remove-required-id!41.1)"
"(lambda(unless-matches36_279 r+p38_280 id39_281 phase40_282)"
"(let-values(((r+p_283) r+p38_280))"
"(let-values(((id_284) id39_281))"
"(let-values(((phase_285) phase40_282))"
"(let-values(((binding_286) unless-matches36_279))"
"(let-values()"
"(let-values(((b_287)"
"(let-values(((.../require+provide.rkt:156:12_288) resolve+shift15.1)"
"((id86_289) id_284)"
"((phase87_290) phase_285)"
"((temp88_291) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp88_291 #t #f #f #f #f #f #f id86_289 phase87_290)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:156:12_288"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp88_291)"
" id86_289"
" phase87_290)))))"
"(if b_287"
"(let-values()"
"(let-values(((at-mod_292)"
"(hash-ref"
"(requires+provides-requires r+p_283)"
"(intern-mpi r+p_283(module-binding-nominal-module b_287))"
" #f)))"
"(if at-mod_292"
"(let-values()"
"(let-values(((sym-to-reqds_293)"
"(hash-ref at-mod_292(module-binding-nominal-require-phase b_287) #f)))"
"(if sym-to-reqds_293"
"(let-values()"
"(let-values(((sym_294)(syntax-e$1 id_284)))"
"(let-values(((l_295)(hash-ref sym-to-reqds_293 sym_294 null)))"
"(if(null? l_295)"
"(void)"
"(let-values()"
"(if(same-binding? b_287 binding_286)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_293"
" sym_294"
"(alt-reverse"
"(let-values(((lst_296) l_295))"
"(begin"
"(if(list? lst_296)(void)(let-values()(in-list lst_296)))"
"((letrec-values(((for-loop_297)"
"(lambda(fold-var_298 lst_299)"
"(if(pair? lst_299)"
"(let-values(((r_300)(unsafe-car lst_299)))"
"(if #t"
"(let-values(((fold-var_301)"
"(let-values(((fold-var_302)"
" fold-var_298))"
"(if(free-identifier=?$1"
"(required-id r_300)"
" id_284"
" phase_285"
" phase_285)"
" fold-var_302"
"(let-values(((fold-var_303)"
" fold-var_302))"
"(let-values(((fold-var_304)"
"(let-values()"
"(cons"
"(let-values()"
" r_300)"
" fold-var_303))))"
"(values"
" fold-var_304)))))))"
"(if #t"
"(for-loop_297"
" fold-var_301"
"(unsafe-cdr lst_299))"
" fold-var_301))"
" fold-var_298))"
" fold-var_298))))"
" for-loop_297)"
" null"
" lst_296))))))))))))"
"(void))))"
"(void))))"
"(void))))))))))"
"(define-values"
"(unpack42.1)"
"(lambda(given-kws_305 given-args_306 r+p38_307 id39_308 phase40_309)"
"(let-values(((unless-matches36_310)(car given-args_306)))"
"(remove-required-id!41.1 unless-matches36_310 r+p38_307 id39_308 phase40_309))))"
"(define-values"
"(remove-required-id!43.1)"
"(lifted/4.1$2"
"(lambda(given-kws_311 given-argc_312)"
"(if(= given-argc_312 5)"
"(let-values(((l2_313) given-kws_311))"
"(if(pair? l2_313)(if(eq?(car l2_313) '#:unless-matches)(null?(cdr l2_313)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_314 given-args_315 r+p_316 id_317 phase_318)"
"(unpack42.1 given-kws_314 given-args_315 r+p_316 id_317 phase_318)))"
" '(#:unless-matches)"
" '(#:unless-matches)))"
"(define-values"
"(lifted/5.1$1)"
"(make-required"
" 'check-not-defined"
"(case-lambda((self_319 r+p_320 id_321 phase_322)(apply missing-kw self_319 r+p_320 id_321 phase_322 null)))"
" #f"
" #f))"
"(define-values"
"(check-not-defined53.1)"
"(lambda(check-not-required?44_323"
" check-not-required?47_324"
" in45_325"
" unless-matches46_326"
" unless-matches49_327"
" r+p50_328"
" id51_329"
" phase52_330)"
"(let-values(((check-not-required?_331)(if check-not-required?47_324 check-not-required?44_323 #f)))"
"(let-values(((r+p_332) r+p50_328))"
"(let-values(((id_333) id51_329))"
"(let-values(((phase_334) phase52_330))"
"(let-values(((orig-s_335) in45_325))"
"(let-values(((ok-binding_336)(if unless-matches49_327 unless-matches46_326 #f)))"
"(let-values()"
"(let-values(((b_337)"
"(let-values(((.../require+provide.rkt:181:12_338) resolve+shift15.1)"
"((id89_339) id_333)"
"((phase90_340) phase_334)"
"((temp91_341) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp91_341 #t #f #f #f #f #f #f id89_339 phase90_340)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:181:12_338"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp91_341)"
" id89_339"
" phase90_340)))))"
"(if(not b_337)"
"(let-values()(void))"
"(if(not(module-binding? b_337))"
"                        (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_333))"
"(let-values()"
"(let-values(((defined?_342)"
"(if b_337"
"(eq?(requires+provides-self r+p_332)(module-binding-module b_337))"
" #f)))"
"(if(if(not defined?_342)(not check-not-required?_331) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_332 #f))"
"(if(if defined?_342"
"(not"
"(hash-ref"
"(hash-ref(requires+provides-phase-to-defined-syms r+p_332) phase_334 '#hasheq())"
"(module-binding-sym b_337)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((at-mod_343)"
"(hash-ref"
"(requires+provides-requires r+p_332)"
"(intern-mpi r+p_332(module-binding-nominal-module b_337))"
" #f)))"
"(if(not at-mod_343)"
"(let-values()(void))"
"(let-values()"
"(let-values(((lst_344)"
"(hash-ref"
"(hash-ref"
" at-mod_343"
"(module-binding-nominal-require-phase b_337)"
" '#hasheq())"
"(syntax-e$1 id_333)"
" null)))"
"(begin"
"(if(list? lst_344)(void)(let-values()(in-list lst_344)))"
"((letrec-values(((for-loop_345)"
"(lambda(fold-var_346 lst_347)"
"(if(pair? lst_347)"
"(let-values(((r_348)(unsafe-car lst_347)))"
"(if #t"
"(let-values(((fold-var_349)"
"(let-values(((fold-var_350)"
" fold-var_346))"
"(let-values(((fold-var_351)"
"(let-values()"
"(begin"
"(let-values()"
"(if(if ok-binding_336"
"(same-binding?"
" b_337"
" ok-binding_336)"
" #f)"
"(let-values()"
"(void))"
"(if(required-can-be-shadowed?"
" r_348)"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_332"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"identifier already \""
"(if defined?_342"
"                                                                                                                    \"defined\""
"                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_334)"
"(let-values()"
"                                                                                                                      \"\")"
"(if(label-phase?"
" phase_334)"
"(let-values()"
"                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_334)"
"(let-values()"
"                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                           \" for phase ~a\""
" phase_334))))))"
" orig-s_335"
" id_333)))))"
"(void)))))"
"(values fold-var_351)))))"
"(if #t"
"(for-loop_345"
" fold-var_349"
"(unsafe-cdr lst_347))"
" fold-var_349))"
" fold-var_346))"
" fold-var_346))))"
" for-loop_345)"
"(void)"
" lst_344)))))))))))))))))))))))"
"(define-values"
"(unpack54.1$1)"
"(lambda(given-kws_352 given-args_353 r+p50_354 id51_355 phase52_356)"
"(let-values(((check-not-required?47_357)"
"(if(pair? given-kws_352)(eq? '#:check-not-required?(car given-kws_352)) #f)))"
"(let-values(((check-not-required?44_358)(if check-not-required?47_357(car given-args_353)(void)))"
"((given-kws_359)(if check-not-required?47_357(cdr given-kws_352) given-kws_352))"
"((given-args_360)(if check-not-required?47_357(cdr given-args_353) given-args_353)))"
"(let-values(((in45_361)(car given-args_360))"
"((given-kws_362)(cdr given-kws_359))"
"((given-args_363)(cdr given-args_360)))"
"(let-values(((unless-matches49_364)(pair? given-kws_362)))"
"(let-values(((unless-matches46_365)(if unless-matches49_364(car given-args_363)(void))))"
"(check-not-defined53.1"
" check-not-required?44_358"
" check-not-required?47_357"
" in45_361"
" unless-matches46_365"
" unless-matches49_364"
" r+p50_354"
" id51_355"
" phase52_356))))))))"
"(define-values"
"(check-not-defined55.1)"
"(lifted/5.1$1"
"(lambda(given-kws_366 given-argc_367)"
"(if(= given-argc_367 5)(subsets? '(#:in) given-kws_366 '(#:check-not-required? #:in #:unless-matches)) #f))"
"(case-lambda"
"((given-kws_368 given-args_369 r+p_370 id_371 phase_372)"
"(unpack54.1$1 given-kws_368 given-args_369 r+p_370 id_371 phase_372)))"
" '(#:in)"
" '(#:check-not-required? #:in #:unless-matches)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_373 syms_374 phase_375)"
"(let-values(((phase-to-defined-syms_376)(requires+provides-phase-to-defined-syms r+p_373)))"
"(let-values(((defined-syms_377)(hash-ref phase-to-defined-syms_376 phase_375 '#hasheq())))"
"(let-values(((new-defined-syms_378)"
"(let-values(((lst_379) syms_374))"
"(begin"
"(if(list? lst_379)(void)(let-values()(in-list lst_379)))"
"((letrec-values(((for-loop_380)"
"(lambda(defined-syms_381 lst_382)"
"(if(pair? lst_382)"
"(let-values(((sym_383)(unsafe-car lst_382)))"
"(if #t"
"(let-values(((defined-syms_384)"
"(let-values(((defined-syms_385) defined-syms_381))"
"(let-values(((defined-syms_386)"
"(let-values()"
"(hash-set"
" defined-syms_385"
" sym_383"
" #t))))"
"(values defined-syms_386)))))"
"(if #t"
"(for-loop_380 defined-syms_384(unsafe-cdr lst_382))"
" defined-syms_384))"
" defined-syms_381))"
" defined-syms_381))))"
" for-loop_380)"
" defined-syms_377"
" lst_379)))))"
"(hash-set! phase-to-defined-syms_376 phase_375 new-defined-syms_378))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_387 mod-name_388 phase_389)"
"(let-values(((at-mod_390)(hash-ref(requires+provides-requires r+p_387)(intern-mpi r+p_387 mod-name_388) #f)))"
"(if at-mod_390(apply append(hash-values(hash-ref at-mod_390 phase_389 '#hasheq()))) #f))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_391)(extract-module-requires r+p_391(requires+provides-self r+p_391) 0)))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_392 mod-name_393 phase_394)"
"(let-values(((self_395)(requires+provides-self r+p_392)))"
"(let-values(((requires_396)(requires+provides-requires r+p_392)))"
"(call/ec"
"(lambda(esc_397)"
"(alt-reverse"
"(let-values(((lst_398)"
"(if mod-name_393(list(intern-mpi r+p_392 mod-name_393))(hash-keys requires_396))))"
"(begin"
"(if(list? lst_398)(void)(let-values()(in-list lst_398)))"
"((letrec-values(((for-loop_399)"
"(lambda(fold-var_400 lst_401)"
"(if(pair? lst_401)"
"(let-values(((mod-name_402)(unsafe-car lst_401)))"
"(if #t"
"(let-values(((fold-var_403)"
"(let-values(((fold-var_404) fold-var_400))"
"(if(eq? mod-name_402 self_395)"
" fold-var_404"
"(let-values(((phase-to-requireds_405)"
"(hash-ref"
" requires_396"
" mod-name_402"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_406)"
"(lambda(fold-var_407)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_408)"
"(let-values(((lst_409)"
"(if(eq?"
" phase_394"
" 'all)"
"(hash-keys"
" phase-to-requireds_405)"
"(list"
" phase_394))))"
"(begin"
"(if(list?"
" lst_409)"
"(void)"
"(let-values()"
"(in-list"
" lst_409)))"
"((letrec-values(((for-loop_410)"
"(lambda(fold-var_411"
" lst_412)"
"(if(pair?"
" lst_412)"
"(let-values(((phase_413)"
"(unsafe-car"
" lst_412)))"
"(if #t"
"(let-values(((fold-var_414)"
"(let-values(((ht_415)"
"(hash-ref"
" phase-to-requireds_405"
" phase_413"
"(lambda()"
"(esc_397"
" #f)))))"
"(begin"
"(if((lambda(ht_416)"
"(hash?"
" ht_416))"
" ht_415)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_415)))"
"((letrec-values(((for-loop_417)"
"(lambda(fold-var_418"
" i_419)"
"(if i_419"
"(let-values(((reqds_420)"
"(hash-iterate-value"
" ht_415"
" i_419)))"
"(if #t"
"(let-values(((fold-var_421)"
"(let-values(((lst_422)"
" reqds_420))"
"(begin"
"(if(list?"
" lst_422)"
"(void)"
"(let-values()"
"(in-list"
" lst_422)))"
"((letrec-values(((for-loop_423)"
"(lambda(fold-var_424"
" lst_425)"
"(if(pair?"
" lst_425)"
"(let-values(((reqd_426)"
"(unsafe-car"
" lst_425)))"
"(if #t"
"(let-values(((fold-var_427)"
"(let-values(((fold-var_428)"
" fold-var_424))"
"(let-values(((fold-var_429)"
"(let-values()"
"(cons"
"(let-values()"
" reqd_426)"
" fold-var_428))))"
"(values"
" fold-var_429)))))"
"(if #t"
"(for-loop_423"
" fold-var_427"
"(unsafe-cdr"
" lst_425))"
" fold-var_427))"
" fold-var_424))"
" fold-var_424))))"
" for-loop_423)"
" fold-var_418"
" lst_422)))))"
"(if #t"
"(for-loop_417"
" fold-var_421"
"(hash-iterate-next"
" ht_415"
" i_419))"
" fold-var_421))"
" fold-var_418))"
" fold-var_418))))"
" for-loop_417)"
" fold-var_411"
"(hash-iterate-first"
" ht_415))))))"
"(if #t"
"(for-loop_410"
" fold-var_414"
"(unsafe-cdr"
" lst_412))"
" fold-var_414))"
" fold-var_411))"
" fold-var_411))))"
" for-loop_410)"
" fold-var_407"
" lst_409)))))"
"(if #f"
"(for-loop_406"
" fold-var_408)"
" fold-var_408))"
" fold-var_407))"
" fold-var_407))))"
" for-loop_406)"
" fold-var_404)))))))"
"(if #t(for-loop_399 fold-var_403(unsafe-cdr lst_401)) fold-var_403))"
" fold-var_400))"
" fold-var_400))))"
" for-loop_399)"
" null"
" lst_398))))))))))"
"(define-values"
"(lifted/6.1$1)"
"(make-required"
" 'add-provide!"
"(case-lambda"
"((self_430 r+p_431 sym_432 phase_433 binding_434 immed-binding_435 id_436 orig-s_437)"
"(apply missing-kw self_430 r+p_431 sym_432 phase_433 binding_434 immed-binding_435 id_436 orig-s_437 null)))"
" #f"
" #f))"
"(define-values"
"(add-provide!67.1)"
"(lambda(as-protected?56_438"
" as-transformer?57_439"
" r+p60_440"
" sym61_441"
" phase62_442"
" binding63_443"
" immed-binding64_444"
" id65_445"
" orig-s66_446)"
"(let-values(((r+p_447) r+p60_440))"
"(let-values(((sym_448) sym61_441))"
"(let-values(((phase_449) phase62_442))"
"(let-values(((binding_450) binding63_443))"
"(let-values(((immed-binding_451) immed-binding64_444))"
"(let-values(((id_452) id65_445))"
"(let-values(((orig-s_453) orig-s66_446))"
"(let-values(((as-protected?_454) as-protected?56_438))"
"(let-values(((as-transformer?_455) as-transformer?57_439))"
"(let-values()"
"(begin"
"(if(if as-protected?_454"
"(not(eq?(module-binding-module immed-binding_451)(requires+provides-self r+p_447)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect imported identifier with re-provide\" sym_448))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_447)"
" phase_449"
"(lambda(at-phase_456)"
"(let-values(((b/p_457)(hash-ref at-phase_456 sym_448 #f)))"
"(let-values(((b_458)(provided-as-binding b/p_457)))"
"(if(not b_458)"
"(let-values()"
"(hash-set"
" at-phase_456"
" sym_448"
"(if(let-values(((or-part_459) as-protected?_454))"
"(if or-part_459 or-part_459 as-transformer?_455))"
"(provided1.1 binding_450 as-protected?_454 as-transformer?_455)"
" binding_450)))"
"(if(same-binding? b_458 binding_450)"
"(let-values() at-phase_456)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_453"
" id_452)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(unpack68.1$1)"
"(lambda(given-kws_460"
" given-args_461"
" r+p60_462"
" sym61_463"
" phase62_464"
" binding63_465"
" immed-binding64_466"
" id65_467"
" orig-s66_468)"
"(let-values(((as-protected?56_469)(car given-args_461))"
"((given-kws_470)(cdr given-kws_460))"
"((given-args_471)(cdr given-args_461)))"
"(let-values(((as-transformer?57_472)(car given-args_471)))"
"(add-provide!67.1"
" as-protected?56_469"
" as-transformer?57_472"
" r+p60_462"
" sym61_463"
" phase62_464"
" binding63_465"
" immed-binding64_466"
" id65_467"
" orig-s66_468)))))"
"(define-values"
"(add-provide!69.1)"
"(lifted/6.1$1"
"(lambda(given-kws_473 given-argc_474)"
"(if(= given-argc_474 9)"
"(let-values(((l2_475) given-kws_473))"
"(if(pair? l2_475)"
"(if(eq?(car l2_475) '#:as-protected?)"
"(let-values(((l2_476)(cdr l2_475)))"
"(if(pair? l2_476)(if(eq?(car l2_476) '#:as-transformer?)(null?(cdr l2_476)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_477 given-args_478 r+p_479 sym_480 phase_481 binding_482 immed-binding_483 id_484 orig-s_485)"
"(unpack68.1$1"
" given-kws_477"
" given-args_478"
" r+p_479"
" sym_480"
" phase_481"
" binding_482"
" immed-binding_483"
" id_484"
" orig-s_485)))"
" '(#:as-protected? #:as-transformer?)"
" '(#:as-protected? #:as-transformer?)))"
"(define-values"
"(attach-require-provide-properties)"
"(lambda(r+p_486 s_487 old-self_488 new-self_489)"
"(let-values(((extract-requires_490)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_492)(requires+provides-require-mpis-in-order r+p_486)))"
"(let-values(((phases-in-order_493)"
"(let-values(((temp92_494)(hash-keys phase-to-mpis-in-order_492))"
"((phase<?93_495) phase<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp92_494 phase<?93_495)"
"(sort9.1 temp92_494 phase<?93_495)))))"
"(alt-reverse"
"(let-values(((lst_496) phases-in-order_493))"
"(begin"
"(if(list? lst_496)(void)(let-values()(in-list lst_496)))"
"((letrec-values(((for-loop_497)"
"(lambda(fold-var_498 lst_499)"
"(if(pair? lst_499)"
"(let-values(((phase_500)(unsafe-car lst_499)))"
"(if #t"
"(let-values(((fold-var_501)"
"(let-values(((fold-var_502) fold-var_498))"
"(let-values(((fold-var_503)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_500"
"(alt-reverse"
"(let-values(((lst_504)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_492"
" phase_500))))"
"(begin"
"(if(list? lst_504)"
"(void)"
"(let-values()"
"(in-list lst_504)))"
"((letrec-values(((for-loop_505)"
"(lambda(fold-var_506"
" lst_507)"
"(if(pair?"
" lst_507)"
"(let-values(((mpi_508)"
"(unsafe-car"
" lst_507)))"
"(if #t"
"(let-values(((fold-var_509)"
"(let-values(((fold-var_510)"
" fold-var_506))"
"(if(eq?"
" mpi_508"
" old-self_488)"
" fold-var_510"
"(let-values(((fold-var_511)"
" fold-var_510))"
"(let-values(((fold-var_512)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_508"
" old-self_488"
" new-self_489))"
" fold-var_511))))"
"(values"
" fold-var_512)))))))"
"(if #t"
"(for-loop_505"
" fold-var_509"
"(unsafe-cdr"
" lst_507))"
" fold-var_509))"
" fold-var_506))"
" fold-var_506))))"
" for-loop_505)"
" null"
" lst_504))))))"
" fold-var_502))))"
"(values fold-var_503)))))"
"(if #t"
"(for-loop_497 fold-var_501(unsafe-cdr lst_499))"
" fold-var_501))"
" fold-var_498))"
" fold-var_498))))"
" for-loop_497)"
" null"
" lst_496)))))))))"
"(let-values(((extract-provides_491)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_486)"
" old-self_488"
" new-self_489))))"
"(let-values(((s_513)(syntax-property$1 s_487 'module-requires(extract-requires_490))))"
"(let-values(((s_514)(syntax-property$1 s_513 'module-provides(extract-provides_491)))) s_514))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_538 from-mpi_539 to-mpi_540)"
"(if(eq? from-mpi_539 to-mpi_540)"
"(let-values() provides_538)"
"(let-values()"
"(let-values(((ht_541) provides_538))"
"(begin"
"(if((lambda(ht_542)(hash? ht_542)) ht_541)(void)(let-values()(default-in-hash ht_541)))"
"((letrec-values(((for-loop_543)"
"(lambda(table_544 i_545)"
"(if i_545"
"(let-values(((phase_546 at-phase_547)(hash-iterate-key+value ht_541 i_545)))"
"(if #t"
"(let-values(((table_548)"
"(let-values(((table_549) table_544))"
"(let-values(((table_550)"
"(let-values()"
"(let-values(((key_551 val_552)"
"(let-values()"
"(values"
" phase_546"
"(let-values(((ht_553)"
" at-phase_547))"
"(begin"
"(if((lambda(ht_554)"
"(hash? ht_554))"
" ht_553)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_553)))"
"((letrec-values(((for-loop_555)"
"(lambda(table_556"
" i_557)"
"(if i_557"
"(let-values(((sym_558"
" binding_559)"
"(hash-iterate-key+value"
" ht_553"
" i_557)))"
"(if #t"
"(let-values(((table_560)"
"(let-values(((table_561)"
" table_556))"
"(let-values(((table_562)"
"(let-values()"
"(let-values(((key_563"
" val_564)"
"(let-values()"
"(values"
" sym_558"
"((letrec-values(((loop_565)"
"(lambda(binding_566)"
"(if(provided?"
" binding_566)"
"(let-values()"
"(provided1.1"
"(loop_565"
"(provided-binding"
" binding_566))"
"(provided-protected?"
" binding_566)"
"(provided-syntax?"
" binding_566)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_566"
" from-mpi_539"
" to-mpi_540))))))"
" loop_565)"
" binding_559)))))"
"(hash-set"
" table_561"
" key_563"
" val_564)))))"
"(values"
" table_562)))))"
"(if #t"
"(for-loop_555"
" table_560"
"(hash-iterate-next"
" ht_553"
" i_557))"
" table_560))"
" table_556))"
" table_556))))"
" for-loop_555)"
" '#hasheq()"
"(hash-iterate-first"
" ht_553))))))))"
"(hash-set table_549 key_551 val_552)))))"
"(values table_550)))))"
"(if #t(for-loop_543 table_548(hash-iterate-next ht_541 i_545)) table_548))"
" table_544))"
" table_544))))"
" for-loop_543)"
" '#hasheqv()"
"(hash-iterate-first ht_541))))))))"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_24 make-_25 ?_26 -ref_27 -set!_28)"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))"
"(values struct:_24 make-_25 ?_26(make-struct-field-accessor -ref_27 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_45 make-_46 ?_47 -ref_48 -set!_49)"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))"
"(values"
" struct:_45"
" make-_46"
" ?_47"
"(make-struct-field-accessor -ref_48 0 'prefix-sym)"
"(make-struct-field-accessor -ref_48 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_71 make-_72 ?_73 -ref_74 -set!_75)"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))"
"(values"
" struct:_71"
" make-_72"
" ?_73"
"(make-struct-field-accessor -ref_74 0 'to-id)"
"(make-struct-field-accessor -ref_74 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!20.1)"
"(lambda(declared-submodule-names9_97"
" declared-submodule-names14_98"
" run-phase6_99"
" run-phase11_100"
" run?7_101"
" run?12_102"
" self5_103"
" self10_104"
" visit?8_105"
" visit?13_106"
" reqs15_107"
" orig-s16_108"
" m-ns17_109"
" phase-shift18_110"
" requires+provides19_111)"
"(let-values(((reqs_112) reqs15_107))"
"(let-values(((orig-s_113) orig-s16_108))"
"(let-values(((m-ns_114) m-ns17_109))"
"(let-values(((phase-shift_115) phase-shift18_110))"
"(let-values(((requires+provides_116) requires+provides19_111))"
"(let-values(((self_117)(if self10_104 self5_103 #f)))"
"(let-values(((run-phase_118)(if run-phase11_100 run-phase6_99(namespace-phase m-ns_114))))"
"(let-values(((run?_119)(if run?12_102 run?7_101 #f)))"
"(let-values(((visit?_120)(if visit?13_106 visit?8_105 #t)))"
"(let-values(((declared-submodule-names_121)"
"(if declared-submodule-names14_98 declared-submodule-names9_97 '#hasheq())))"
"(let-values()"
"((letrec-values(((loop_122)"
"(lambda(reqs_123"
" top-req_124"
" phase-shift_125"
" just-meta_126"
" adjust_127"
" for-meta-ok?_128"
" just-meta-ok?_129"
" layer_130)"
"(let-values(((lst_131) reqs_123))"
"(begin"
"(if(list? lst_131)(void)(let-values()(in-list lst_131)))"
"((letrec-values(((for-loop_132)"
"(lambda(result_133 lst_134)"
"(if(pair? lst_134)"
"(let-values(((req_135)(unsafe-car lst_134)))"
"(if #t"
"(let-values(((result_136)"
"(let-values(((result_137)"
" result_133))"
"(let-values(((result_138)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_139)"
"(let-values(((check-nested79_141)"
"(lambda(want-layer78_142"
" ok?76_143"
" ok?77_144)"
"(let-values(((want-layer_145)"
" want-layer78_142))"
"(let-values(((ok?_146)"
"(if ok?77_144"
" ok?76_143"
" #t)))"
"(let-values()"
"(if(if ok?_146"
"(member"
" want-layer_145"
"(member"
" layer_130"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"invalid nesting\""
" orig-s_113"
" req_135)))))))))"
"(case-lambda"
"((want-layer_147)"
"(check-nested79_141"
" want-layer_147"
" #f"
" #f))"
"((want-layer_148"
" ok?76_149)"
"(check-nested79_141"
" want-layer_148"
" ok?76_149"
" #t))))))"
"(let-values(((fm_140)"
"(if(pair?"
"(syntax-e$1"
" req_135))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_135)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_135)))"
" #f)"
" #f)))"
"(let-values(((tmp_150)"
" fm_140))"
"(if(equal?"
" tmp_150"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_151"
" for-meta81_152"
" phase-level82_153"
" spec83_154)"
"(let-values(((s_168)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_169)"
" s_168))"
"(let-values(((for-meta81_170"
" phase-level82_171"
" spec83_172)"
"(let-values(((s_173)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(pair?"
" s_173)"
"(let-values(((for-meta84_174)"
"(let-values(((s_177)"
"(car"
" s_173)))"
" s_177))"
"((phase-level85_175"
" spec86_176)"
"(let-values(((s_178)"
"(cdr"
" s_173)))"
"(let-values(((s_179)"
"(if(syntax?$1"
" s_178)"
"(syntax-e$1"
" s_178)"
" s_178)))"
"(if(pair?"
" s_179)"
"(let-values(((phase-level87_180)"
"(let-values(((s_182)"
"(car"
" s_179)))"
" s_182))"
"((spec88_181)"
"(let-values(((s_183)"
"(cdr"
" s_179)))"
"(let-values(((s_184)"
"(if(syntax?$1"
" s_183)"
"(syntax-e$1"
" s_183)"
" s_183)))"
"(let-values(((flat-s_185)"
"(to-syntax-list.1"
" s_184)))"
"(if(not"
" flat-s_185)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_169))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_169))"
"(let-values()"
" flat-s_185))))))))"
"(values"
" phase-level87_180"
" spec88_181))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_169))))))"
"(values"
" for-meta84_174"
" phase-level85_175"
" spec86_176))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_169)))))"
"(values"
" #t"
" for-meta81_170"
" phase-level82_171"
" spec83_172)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_167)"
"(syntax-e$1"
" phase-level82_153)))"
"(begin"
"(if(phase?"
" p_167)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad phase\""
" orig-s_113"
" req_135)))"
"(loop_122"
" spec83_154"
"(let-values(((or-part_186)"
" top-req_124))"
"(if or-part_186"
" or-part_186"
" req_135))"
"(phase+"
" phase-shift_125"
" p_167)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))))"
"(if(equal?"
" tmp_150"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_187"
" for-syntax89_188"
" spec90_189)"
"(let-values(((s_200)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_201)"
" s_200))"
"(let-values(((for-syntax89_202"
" spec90_203)"
"(let-values(((s_204)"
"(if(syntax?$1"
" s_200)"
"(syntax-e$1"
" s_200)"
" s_200)))"
"(if(pair?"
" s_204)"
"(let-values(((for-syntax91_205)"
"(let-values(((s_207)"
"(car"
" s_204)))"
" s_207))"
"((spec92_206)"
"(let-values(((s_208)"
"(cdr"
" s_204)))"
"(let-values(((s_209)"
"(if(syntax?$1"
" s_208)"
"(syntax-e$1"
" s_208)"
" s_208)))"
"(let-values(((flat-s_210)"
"(to-syntax-list.1"
" s_209)))"
"(if(not"
" flat-s_210)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_201))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_201))"
"(let-values()"
" flat-s_210))))))))"
"(values"
" for-syntax91_205"
" spec92_206))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_201)))))"
"(values"
" #t"
" for-syntax89_202"
" spec90_203)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec90_189"
"(let-values(((or-part_211)"
" top-req_124))"
"(if or-part_211"
" or-part_211"
" req_135))"
"(phase+"
" phase-shift_125"
" 1)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_212"
" for-template93_213"
" spec94_214)"
"(let-values(((s_225)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_226)"
" s_225))"
"(let-values(((for-template93_227"
" spec94_228)"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_229)"
"(let-values(((for-template95_230)"
"(let-values(((s_232)"
"(car"
" s_229)))"
" s_232))"
"((spec96_231)"
"(let-values(((s_233)"
"(cdr"
" s_229)))"
"(let-values(((s_234)"
"(if(syntax?$1"
" s_233)"
"(syntax-e$1"
" s_233)"
" s_233)))"
"(let-values(((flat-s_235)"
"(to-syntax-list.1"
" s_234)))"
"(if(not"
" flat-s_235)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_226))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_226))"
"(let-values()"
" flat-s_235))))))))"
"(values"
" for-template95_230"
" spec96_231))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_226)))))"
"(values"
" #t"
" for-template93_227"
" spec94_228)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec94_214"
"(let-values(((or-part_236)"
" top-req_124))"
"(if or-part_236"
" or-part_236"
" req_135))"
"(phase+"
" phase-shift_125"
" -1)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_237"
" for-label97_238"
" spec98_239)"
"(let-values(((s_250)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_251)"
" s_250))"
"(let-values(((for-label97_252"
" spec98_253)"
"(let-values(((s_254)"
"(if(syntax?$1"
" s_250)"
"(syntax-e$1"
" s_250)"
" s_250)))"
"(if(pair?"
" s_254)"
"(let-values(((for-label99_255)"
"(let-values(((s_257)"
"(car"
" s_254)))"
" s_257))"
"((spec100_256)"
"(let-values(((s_258)"
"(cdr"
" s_254)))"
"(let-values(((s_259)"
"(if(syntax?$1"
" s_258)"
"(syntax-e$1"
" s_258)"
" s_258)))"
"(let-values(((flat-s_260)"
"(to-syntax-list.1"
" s_259)))"
"(if(not"
" flat-s_260)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_251))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_251))"
"(let-values()"
" flat-s_260))))))))"
"(values"
" for-label99_255"
" spec100_256))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_251)))))"
"(values"
" #t"
" for-label97_252"
" spec98_253)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec98_239"
"(let-values(((or-part_261)"
" top-req_124))"
"(if or-part_261"
" or-part_261"
" req_135))"
"(phase+"
" phase-shift_125"
" #f)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" just-meta-ok?_129)"
"(values))))"
"(let-values(((ok?_262"
" just-meta101_263"
" phase-level102_264"
" spec103_265)"
"(let-values(((s_279)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_280)"
" s_279))"
"(let-values(((just-meta101_281"
" phase-level102_282"
" spec103_283)"
"(let-values(((s_284)"
"(if(syntax?$1"
" s_279)"
"(syntax-e$1"
" s_279)"
" s_279)))"
"(if(pair?"
" s_284)"
"(let-values(((just-meta104_285)"
"(let-values(((s_288)"
"(car"
" s_284)))"
" s_288))"
"((phase-level105_286"
" spec106_287)"
"(let-values(((s_289)"
"(cdr"
" s_284)))"
"(let-values(((s_290)"
"(if(syntax?$1"
" s_289)"
"(syntax-e$1"
" s_289)"
" s_289)))"
"(if(pair?"
" s_290)"
"(let-values(((phase-level107_291)"
"(let-values(((s_293)"
"(car"
" s_290)))"
" s_293))"
"((spec108_292)"
"(let-values(((s_294)"
"(cdr"
" s_290)))"
"(let-values(((s_295)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1"
" s_294)"
" s_294)))"
"(let-values(((flat-s_296)"
"(to-syntax-list.1"
" s_295)))"
"(if(not"
" flat-s_296)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_280))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_280))"
"(let-values()"
" flat-s_296))))))))"
"(values"
" phase-level107_291"
" spec108_292))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_280))))))"
"(values"
" just-meta104_285"
" phase-level105_286"
" spec106_287))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_280)))))"
"(values"
" #t"
" just-meta101_281"
" phase-level102_282"
" spec103_283)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_278)"
"(syntax-e$1"
" phase-level102_264)))"
"(begin"
"(if(phase?"
" p_278)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad phase\""
" orig-s_113"
" req_135)))"
"(loop_122"
" spec103_265"
"(let-values(((or-part_297)"
" top-req_124))"
"(if or-part_297"
" or-part_297"
" req_135))"
" phase-shift_125"
" just-meta_126"
" adjust_127"
" for-meta-ok?_128"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_150"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_298"
" only109_299"
" spec110_300"
" id111_301)"
"(let-values(((s_314)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_315)"
" s_314))"
"(let-values(((only109_316"
" spec110_317"
" id111_318)"
"(let-values(((s_319)"
"(if(syntax?$1"
" s_314)"
"(syntax-e$1"
" s_314)"
" s_314)))"
"(if(pair?"
" s_319)"
"(let-values(((only112_320)"
"(let-values(((s_323)"
"(car"
" s_319)))"
" s_323))"
"((spec113_321"
" id114_322)"
"(let-values(((s_324)"
"(cdr"
" s_319)))"
"(let-values(((s_325)"
"(if(syntax?$1"
" s_324)"
"(syntax-e$1"
" s_324)"
" s_324)))"
"(if(pair?"
" s_325)"
"(let-values(((spec115_326)"
"(let-values(((s_328)"
"(car"
" s_325)))"
" s_328))"
"((id116_327)"
"(let-values(((s_329)"
"(cdr"
" s_325)))"
"(let-values(((s_330)"
"(if(syntax?$1"
" s_329)"
"(syntax-e$1"
" s_329)"
" s_329)))"
"(let-values(((flat-s_331)"
"(to-syntax-list.1"
" s_330)))"
"(if(not"
" flat-s_331)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_315))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_315))"
"(let-values()"
"(let-values(((id_332)"
"(let-values(((lst_333)"
" flat-s_331))"
"(begin"
"(if(list?"
" lst_333)"
"(void)"
"(let-values()"
"(in-list"
" lst_333)))"
"((letrec-values(((for-loop_334)"
"(lambda(id_335"
" lst_336)"
"(if(pair?"
" lst_336)"
"(let-values(((s_337)"
"(unsafe-car"
" lst_336)))"
"(if #t"
"(let-values(((id_338)"
"(let-values(((id_339)"
" id_335))"
"(let-values(((id_340)"
"(let-values()"
"(let-values(((id117_341)"
"(let-values()"
"(if(let-values(((or-part_342)"
"(if(syntax?$1"
" s_337)"
"(symbol?"
"(syntax-e$1"
" s_337))"
" #f)))"
"(if or-part_342"
" or-part_342"
"(symbol?"
" s_337)))"
" s_337"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_315"
" s_337)))))"
"(cons"
" id117_341"
" id_339)))))"
"(values"
" id_340)))))"
"(if #t"
"(for-loop_334"
" id_338"
"(unsafe-cdr"
" lst_336))"
" id_338))"
" id_335))"
" id_335))))"
" for-loop_334)"
" null"
" lst_333)))))"
"(alt-reverse"
" id_332))))))))))"
"(values"
" spec115_326"
" id116_327))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_315))))))"
"(values"
" only112_320"
" spec113_321"
" id114_322))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_315)))))"
"(values"
" #t"
" only109_316"
" spec110_317"
" id111_318)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec110_300)"
"(let-values(((or-part_343)"
" top-req_124))"
"(if or-part_343"
" or-part_343"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-only1.1"
"(ids->sym-set"
" id111_301))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_344"
" prefix118_345"
" id:prefix119_346"
" spec120_347)"
"(let-values(((s_360)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_361)"
" s_360))"
"(let-values(((prefix118_362"
" id:prefix119_363"
" spec120_364)"
"(let-values(((s_365)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(if(pair?"
" s_365)"
"(let-values(((prefix121_366)"
"(let-values(((s_369)"
"(car"
" s_365)))"
" s_369))"
"((id:prefix122_367"
" spec123_368)"
"(let-values(((s_370)"
"(cdr"
" s_365)))"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_370)"
"(syntax-e$1"
" s_370)"
" s_370)))"
"(if(pair?"
" s_371)"
"(let-values(((id:prefix124_372)"
"(let-values(((s_374)"
"(car"
" s_371)))"
"(if(let-values(((or-part_375)"
"(if(syntax?$1"
" s_374)"
"(symbol?"
"(syntax-e$1"
" s_374))"
" #f)))"
"(if or-part_375"
" or-part_375"
"(symbol?"
" s_374)))"
" s_374"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_361"
" s_374))))"
"((spec125_373)"
"(let-values(((s_376)"
"(cdr"
" s_371)))"
"(let-values(((s_377)"
"(if(syntax?$1"
" s_376)"
"(syntax-e$1"
" s_376)"
" s_376)))"
"(if(pair?"
" s_377)"
"(let-values(((spec126_378)"
"(let-values(((s_379)"
"(car"
" s_377)))"
" s_379))"
"(()"
"(let-values(((s_380)"
"(cdr"
" s_377)))"
"(let-values(((s_381)"
"(if(syntax?$1"
" s_380)"
"(syntax-e$1"
" s_380)"
" s_380)))"
"(if(null?"
" s_381)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_361))))))"
"(values"
" spec126_378))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_361))))))"
"(values"
" id:prefix124_372"
" spec125_373))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_361))))))"
"(values"
" prefix121_366"
" id:prefix122_367"
" spec123_368))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_361)))))"
"(values"
" #t"
" prefix118_362"
" id:prefix119_363"
" spec120_364)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec120_347)"
"(let-values(((or-part_382)"
" top-req_124))"
"(if or-part_382"
" or-part_382"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix119_346))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_383"
" all-except127_384"
" spec128_385"
" id129_386)"
"(let-values(((s_399)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_400)"
" s_399))"
"(let-values(((all-except127_401"
" spec128_402"
" id129_403)"
"(let-values(((s_404)"
"(if(syntax?$1"
" s_399)"
"(syntax-e$1"
" s_399)"
" s_399)))"
"(if(pair?"
" s_404)"
"(let-values(((all-except130_405)"
"(let-values(((s_408)"
"(car"
" s_404)))"
" s_408))"
"((spec131_406"
" id132_407)"
"(let-values(((s_409)"
"(cdr"
" s_404)))"
"(let-values(((s_410)"
"(if(syntax?$1"
" s_409)"
"(syntax-e$1"
" s_409)"
" s_409)))"
"(if(pair?"
" s_410)"
"(let-values(((spec133_411)"
"(let-values(((s_413)"
"(car"
" s_410)))"
" s_413))"
"((id134_412)"
"(let-values(((s_414)"
"(cdr"
" s_410)))"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(let-values(((flat-s_416)"
"(to-syntax-list.1"
" s_415)))"
"(if(not"
" flat-s_416)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_400))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_400))"
"(let-values()"
"(let-values(((id_417)"
"(let-values(((lst_418)"
" flat-s_416))"
"(begin"
"(if(list?"
" lst_418)"
"(void)"
"(let-values()"
"(in-list"
" lst_418)))"
"((letrec-values(((for-loop_419)"
"(lambda(id_420"
" lst_421)"
"(if(pair?"
" lst_421)"
"(let-values(((s_422)"
"(unsafe-car"
" lst_421)))"
"(if #t"
"(let-values(((id_423)"
"(let-values(((id_424)"
" id_420))"
"(let-values(((id_425)"
"(let-values()"
"(let-values(((id135_426)"
"(let-values()"
"(if(let-values(((or-part_427)"
"(if(syntax?$1"
" s_422)"
"(symbol?"
"(syntax-e$1"
" s_422))"
" #f)))"
"(if or-part_427"
" or-part_427"
"(symbol?"
" s_422)))"
" s_422"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_400"
" s_422)))))"
"(cons"
" id135_426"
" id_424)))))"
"(values"
" id_425)))))"
"(if #t"
"(for-loop_419"
" id_423"
"(unsafe-cdr"
" lst_421))"
" id_423))"
" id_420))"
" id_420))))"
" for-loop_419)"
" null"
" lst_418)))))"
"(alt-reverse"
" id_417))))))))))"
"(values"
" spec133_411"
" id134_412))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_400))))))"
"(values"
" all-except130_405"
" spec131_406"
" id132_407))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_400)))))"
"(values"
" #t"
" all-except127_401"
" spec128_402"
" id129_403)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec128_385)"
"(let-values(((or-part_428)"
" top-req_124))"
"(if or-part_428"
" or-part_428"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id129_386))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_429"
" prefix-all-except136_430"
" id:prefix137_431"
" spec138_432"
" id139_433)"
"(let-values(((s_448)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_449)"
" s_448))"
"(let-values(((prefix-all-except136_450"
" id:prefix137_451"
" spec138_452"
" id139_453)"
"(let-values(((s_454)"
"(if(syntax?$1"
" s_448)"
"(syntax-e$1"
" s_448)"
" s_448)))"
"(if(pair?"
" s_454)"
"(let-values(((prefix-all-except140_455)"
"(let-values(((s_459)"
"(car"
" s_454)))"
" s_459))"
"((id:prefix141_456"
" spec142_457"
" id143_458)"
"(let-values(((s_460)"
"(cdr"
" s_454)))"
"(let-values(((s_461)"
"(if(syntax?$1"
" s_460)"
"(syntax-e$1"
" s_460)"
" s_460)))"
"(if(pair?"
" s_461)"
"(let-values(((id:prefix144_462)"
"(let-values(((s_465)"
"(car"
" s_461)))"
"(if(let-values(((or-part_466)"
"(if(syntax?$1"
" s_465)"
"(symbol?"
"(syntax-e$1"
" s_465))"
" #f)))"
"(if or-part_466"
" or-part_466"
"(symbol?"
" s_465)))"
" s_465"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_449"
" s_465))))"
"((spec145_463"
" id146_464)"
"(let-values(((s_467)"
"(cdr"
" s_461)))"
"(let-values(((s_468)"
"(if(syntax?$1"
" s_467)"
"(syntax-e$1"
" s_467)"
" s_467)))"
"(if(pair?"
" s_468)"
"(let-values(((spec147_469)"
"(let-values(((s_471)"
"(car"
" s_468)))"
" s_471))"
"((id148_470)"
"(let-values(((s_472)"
"(cdr"
" s_468)))"
"(let-values(((s_473)"
"(if(syntax?$1"
" s_472)"
"(syntax-e$1"
" s_472)"
" s_472)))"
"(let-values(((flat-s_474)"
"(to-syntax-list.1"
" s_473)))"
"(if(not"
" flat-s_474)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_449))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_449))"
"(let-values()"
"(let-values(((id_475)"
"(let-values(((lst_476)"
" flat-s_474))"
"(begin"
"(if(list?"
" lst_476)"
"(void)"
"(let-values()"
"(in-list"
" lst_476)))"
"((letrec-values(((for-loop_477)"
"(lambda(id_478"
" lst_479)"
"(if(pair?"
" lst_479)"
"(let-values(((s_480)"
"(unsafe-car"
" lst_479)))"
"(if #t"
"(let-values(((id_481)"
"(let-values(((id_482)"
" id_478))"
"(let-values(((id_483)"
"(let-values()"
"(let-values(((id149_484)"
"(let-values()"
"(if(let-values(((or-part_485)"
"(if(syntax?$1"
" s_480)"
"(symbol?"
"(syntax-e$1"
" s_480))"
" #f)))"
"(if or-part_485"
" or-part_485"
"(symbol?"
" s_480)))"
" s_480"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_449"
" s_480)))))"
"(cons"
" id149_484"
" id_482)))))"
"(values"
" id_483)))))"
"(if #t"
"(for-loop_477"
" id_481"
"(unsafe-cdr"
" lst_479))"
" id_481))"
" id_478))"
" id_478))))"
" for-loop_477)"
" null"
" lst_476)))))"
"(alt-reverse"
" id_475))))))))))"
"(values"
" spec147_469"
" id148_470))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_449))))))"
"(values"
" id:prefix144_462"
" spec145_463"
" id146_464))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_449))))))"
"(values"
" prefix-all-except140_455"
" id:prefix141_456"
" spec142_457"
" id143_458))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_449)))))"
"(values"
" #t"
" prefix-all-except136_450"
" id:prefix137_451"
" spec138_452"
" id139_453)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec138_432)"
"(let-values(((or-part_486)"
" top-req_124))"
"(if or-part_486"
" or-part_486"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix137_431)"
"(ids->sym-set"
" id139_433))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_487"
" rename150_488"
" spec151_489"
" id:to152_490"
" id:from153_491)"
"(let-values(((s_506)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_507)"
" s_506))"
"(let-values(((rename150_508"
" spec151_509"
" id:to152_510"
" id:from153_511)"
"(let-values(((s_512)"
"(if(syntax?$1"
" s_506)"
"(syntax-e$1"
" s_506)"
" s_506)))"
"(if(pair?"
" s_512)"
"(let-values(((rename154_513)"
"(let-values(((s_517)"
"(car"
" s_512)))"
" s_517))"
"((spec155_514"
" id:to156_515"
" id:from157_516)"
"(let-values(((s_518)"
"(cdr"
" s_512)))"
"(let-values(((s_519)"
"(if(syntax?$1"
" s_518)"
"(syntax-e$1"
" s_518)"
" s_518)))"
"(if(pair?"
" s_519)"
"(let-values(((spec158_520)"
"(let-values(((s_523)"
"(car"
" s_519)))"
" s_523))"
"((id:to159_521"
" id:from160_522)"
"(let-values(((s_524)"
"(cdr"
" s_519)))"
"(let-values(((s_525)"
"(if(syntax?$1"
" s_524)"
"(syntax-e$1"
" s_524)"
" s_524)))"
"(if(pair?"
" s_525)"
"(let-values(((id:to161_526)"
"(let-values(((s_528)"
"(car"
" s_525)))"
"(if(let-values(((or-part_529)"
"(if(syntax?$1"
" s_528)"
"(symbol?"
"(syntax-e$1"
" s_528))"
" #f)))"
"(if or-part_529"
" or-part_529"
"(symbol?"
" s_528)))"
" s_528"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_507"
" s_528))))"
"((id:from162_527)"
"(let-values(((s_530)"
"(cdr"
" s_525)))"
"(let-values(((s_531)"
"(if(syntax?$1"
" s_530)"
"(syntax-e$1"
" s_530)"
" s_530)))"
"(if(pair?"
" s_531)"
"(let-values(((id:from163_532)"
"(let-values(((s_533)"
"(car"
" s_531)))"
"(if(let-values(((or-part_534)"
"(if(syntax?$1"
" s_533)"
"(symbol?"
"(syntax-e$1"
" s_533))"
" #f)))"
"(if or-part_534"
" or-part_534"
"(symbol?"
" s_533)))"
" s_533"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_507"
" s_533))))"
"(()"
"(let-values(((s_535)"
"(cdr"
" s_531)))"
"(let-values(((s_536)"
"(if(syntax?$1"
" s_535)"
"(syntax-e$1"
" s_535)"
" s_535)))"
"(if(null?"
" s_536)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_507))))))"
"(values"
" id:from163_532))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_507))))))"
"(values"
" id:to161_526"
" id:from162_527))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_507))))))"
"(values"
" spec158_520"
" id:to159_521"
" id:from160_522))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_507))))))"
"(values"
" rename154_513"
" spec155_514"
" id:to156_515"
" id:from157_516))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_507)))))"
"(values"
" #t"
" rename150_508"
" spec151_509"
" id:to152_510"
" id:from153_511)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec151_489)"
"(let-values(((or-part_537)"
" top-req_124))"
"(if or-part_537"
" or-part_537"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-rename4.1"
" id:to152_490"
"(syntax-e$1"
" id:from153_491))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_538)"
"(syntax->datum$1"
" req_135)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_541)"
"(1/module-path?"
" maybe-mp_538)))"
"(if or-part_541"
" or-part_541"
"(1/resolved-module-path?"
" maybe-mp_538)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad require spec\""
" orig-s_113"
" req_135)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_542)"
" adjust_127))"
"(if or-part_542"
" or-part_542"
"(not"
"(eq?"
" just-meta_126"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_116"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_539)"
"(if(1/resolved-module-path?"
" maybe-mp_538)"
"(resolved-module-path->module-path"
" maybe-mp_538)"
" maybe-mp_538)))"
"(let-values(((mpi_540)"
"(let-values(((...r/expand/require.rkt:159:21_543)"
" module-path->mpi29.1)"
"((mp176_544)"
" mp_539)"
"((self177_545)"
" self_117)"
"((declared-submodule-names178_546)"
" declared-submodule-names_121))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path->mpi29.1))"
"(module-path->mpi27.1"
" declared-submodule-names178_546"
" #t"
" mp176_544"
" self177_545)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:159:21_543"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 4)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names178_546)"
" mp176_544"
" self177_545)))))"
"(let-values(((...r/expand/require.rkt:161:9_547)"
" perform-require!55.1)"
"((mpi164_548)"
" mpi_540)"
"((temp165_549)"
" #f)"
"((self166_550)"
" self_117)"
"((temp167_551)"
"(let-values(((or-part_560)"
" req_135))"
"(if or-part_560"
" or-part_560"
" top-req_124)))"
"((m-ns168_552)"
" m-ns_114)"
"((phase-shift169_553)"
" phase-shift_125)"
"((run-phase170_554)"
" run-phase_118)"
"((just-meta171_555)"
" just-meta_126)"
"((adjust172_556)"
" adjust_127)"
"((requires+provides173_557)"
" requires+provides_116)"
"((run?174_558)"
" run?_119)"
"((visit?175_559)"
" visit?_120))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!55.1))"
"(perform-require!53.1"
" adjust172_556"
" #t"
" #f"
" #f"
" #f"
" #f"
" just-meta171_555"
" #t"
" phase-shift169_553"
" requires+provides173_557"
" #t"
" run-phase170_554"
" run?174_558"
" #t"
" visit?175_559"
" #t"
" mpi164_548"
" temp165_549"
" self166_550"
" temp167_551"
" m-ns168_552)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:161:9_547"
" keyword-procedure-extract"
" '(#:adjust"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)"
" 7)"
" '(#:adjust"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)"
"(list"
" adjust172_556"
" just-meta171_555"
" phase-shift169_553"
" requires+provides173_557"
" run-phase170_554"
" run?174_558"
" visit?175_559)"
" mpi164_548"
" temp165_549"
" self166_550"
" temp167_551"
" m-ns168_552))))))))))))))))))))))))))"
"(values result_138)))))"
"(if(if #t"
"(not"
"((lambda x_561(not result_136))"
" req_135))"
" #f)"
"(for-loop_132"
" result_136"
"(unsafe-cdr lst_134))"
" result_136))"
" result_133))"
" result_133))))"
" for-loop_132)"
" #t"
" lst_131))))))"
" loop_122)"
" reqs_112"
" #f"
" phase-shift_115"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))"
"(define-values"
"(unpack21.1)"
"(lambda(given-kws_562 given-args_563 reqs15_564 orig-s16_565 m-ns17_566 phase-shift18_567 requires+provides19_568)"
"(let-values(((declared-submodule-names14_569)"
"(if(pair? given-kws_562)(eq? '#:declared-submodule-names(car given-kws_562)) #f)))"
"(let-values(((declared-submodule-names9_570)(if declared-submodule-names14_569(car given-args_563)(void)))"
"((given-kws_571)(if declared-submodule-names14_569(cdr given-kws_562) given-kws_562))"
"((given-args_572)(if declared-submodule-names14_569(cdr given-args_563) given-args_563)))"
"(let-values(((run-phase11_573)(if(pair? given-kws_571)(eq? '#:run-phase(car given-kws_571)) #f)))"
"(let-values(((run-phase6_574)(if run-phase11_573(car given-args_572)(void)))"
"((given-kws_575)(if run-phase11_573(cdr given-kws_571) given-kws_571))"
"((given-args_576)(if run-phase11_573(cdr given-args_572) given-args_572)))"
"(let-values(((run?12_577)(if(pair? given-kws_575)(eq? '#:run?(car given-kws_575)) #f)))"
"(let-values(((run?7_578)(if run?12_577(car given-args_576)(void)))"
"((given-kws_579)(if run?12_577(cdr given-kws_575) given-kws_575))"
"((given-args_580)(if run?12_577(cdr given-args_576) given-args_576)))"
"(let-values(((self10_581)(if(pair? given-kws_579)(eq? '#:self(car given-kws_579)) #f)))"
"(let-values(((self5_582)(if self10_581(car given-args_580)(void)))"
"((given-kws_583)(if self10_581(cdr given-kws_579) given-kws_579))"
"((given-args_584)(if self10_581(cdr given-args_580) given-args_580)))"
"(let-values(((visit?13_585)(pair? given-kws_583)))"
"(let-values(((visit?8_586)(if visit?13_585(car given-args_584)(void))))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names9_570"
" declared-submodule-names14_569"
" run-phase6_574"
" run-phase11_573"
" run?7_578"
" run?12_577"
" self5_582"
" self10_581"
" visit?8_586"
" visit?13_585"
" reqs15_564"
" orig-s16_565"
" m-ns17_566"
" phase-shift18_567"
" requires+provides19_568)))))))))))))"
"(define-values"
"(parse-and-perform-requires!22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_587 given-argc_588)"
"(if(= given-argc_588 7)"
"(let-values(((l1_589) given-kws_587))"
"(let-values(((l1_590)"
"(if(null? l1_589)"
" l1_589"
"(if(eq?(car l1_589) '#:declared-submodule-names)(cdr l1_589) l1_589))))"
"(let-values(((l1_591) l1_590))"
"(let-values(((l1_592)"
"(if(null? l1_591) l1_591(if(eq?(car l1_591) '#:run-phase)(cdr l1_591) l1_591))))"
"(let-values(((l1_593) l1_592))"
"(let-values(((l1_594)(if(null? l1_593) l1_593(if(eq?(car l1_593) '#:run?)(cdr l1_593) l1_593))))"
"(let-values(((l1_595) l1_594))"
"(let-values(((l1_596)"
"(if(null? l1_595) l1_595(if(eq?(car l1_595) '#:self)(cdr l1_595) l1_595))))"
"(let-values(((l1_597) l1_596))"
"(let-values(((l1_598)"
"(if(null? l1_597)"
" l1_597"
"(if(eq?(car l1_597) '#:visit?)(cdr l1_597) l1_597))))"
"(null? l1_598)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_599 given-args_600 reqs_601 orig-s_602 m-ns_603 phase-shift_604 requires+provides_605)"
"(unpack21.1 given-kws_599 given-args_600 reqs_601 orig-s_602 m-ns_603 phase-shift_604 requires+provides_605)))"
" null"
" '(#:declared-submodule-names #:run-phase #:run? #:self #:visit?)"
"(let-values(((parse-and-perform-requires!_606)"
"(case-lambda"
"((reqs_607 orig-s_608 m-ns_609 phase-shift_610 requires+provides_611)"
"(unpack21.1 null null reqs_607 orig-s_608 m-ns_609 phase-shift_610 requires+provides_611)))))"
" parse-and-perform-requires!_606)))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_612)"
"(let-values(((lst_613) ids_612))"
"(begin"
"(if(list? lst_613)(void)(let-values()(in-list lst_613)))"
"((letrec-values(((for-loop_614)"
"(lambda(table_615 lst_616)"
"(if(pair? lst_616)"
"(let-values(((id_617)(unsafe-car lst_616)))"
"(if #t"
"(let-values(((table_618)"
"(let-values(((table_619) table_615))"
"(let-values(((table_620)"
"(let-values()"
"(let-values(((key_621 val_622)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_617))"
" #t))))"
"(hash-set table_619 key_621 val_622)))))"
"(values table_620)))))"
"(if #t(for-loop_614 table_618(unsafe-cdr lst_616)) table_618))"
" table_615))"
" table_615))))"
" for-loop_614)"
" '#hash()"
" lst_613)))))"
"(define-values"
"(module-path->mpi27.1)"
"(lambda(declared-submodule-names23_623 declared-submodule-names24_624 mod-path25_625 self26_626)"
"(let-values(((mod-path_627) mod-path25_625))"
"(let-values(((self_628) self26_626))"
"(let-values(((declared-submodule-names_629)"
"(if declared-submodule-names24_624 declared-submodule-names23_623 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_627)"
"(if(= 2(length mod-path_627))"
"(if(eq? 'quote(car mod-path_627))"
"(if(symbol?(cadr mod-path_627))"
"(hash-ref declared-submodule-names_629(cadr mod-path_627) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"              (1/module-path-index-join (list 'submod \".\" (cadr mod-path_627)) self_628)"
"(1/module-path-index-join mod-path_627 self_628))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_630 given-args_631 mod-path25_632 self26_633)"
"(let-values(((declared-submodule-names24_634)(pair? given-kws_630)))"
"(let-values(((declared-submodule-names23_635)(if declared-submodule-names24_634(car given-args_631)(void))))"
"(module-path->mpi27.1"
" declared-submodule-names23_635"
" declared-submodule-names24_634"
" mod-path25_632"
" self26_633)))))"
"(define-values"
"(module-path->mpi29.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_636 given-argc_637)"
"(if(= given-argc_637 4)"
"(let-values(((l1_638) given-kws_636))"
"(let-values(((l1_639)"
"(if(null? l1_638)"
" l1_638"
"(if(eq?(car l1_638) '#:declared-submodule-names)(cdr l1_638) l1_638))))"
"(null? l1_639)))"
" #f))"
"(case-lambda"
"((given-kws_640 given-args_641 mod-path_642 self_643)"
"(unpack28.1 given-kws_640 given-args_641 mod-path_642 self_643)))"
" null"
" '(#:declared-submodule-names)"
"(let-values(((module-path->mpi_644)"
"(case-lambda((mod-path_645 self_646)(unpack28.1 null null mod-path_645 self_646)))))"
" module-path->mpi_644)))"
"(define-values"
"(perform-initial-require!)"
"(lambda(mod-path_647 self_648 in-stx_649 m-ns_650 requires+provides_651)"
"(let-values(((...r/expand/require.rkt:190:2_652) perform-require!55.1)"
"((temp179_653)"
"(let-values(((mod-path189_663) mod-path_647)((self190_664) self_648))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi29.1))"
"(module-path->mpi27.1 #f #f mod-path189_663 self190_664)"
"(module-path->mpi29.1 mod-path189_663 self190_664))))"
"((temp180_654) #f)"
"((self181_655) self_648)"
"((in-stx182_656) in-stx_649)"
"((m-ns183_657) m-ns_650)"
"((temp184_658) 0)"
"((temp185_659) 0)"
"((requires+provides186_660) requires+provides_651)"
"((temp187_661) #t)"
"((temp188_662) #t))"
"(if(variable-reference-constant?(#%variable-reference perform-require!55.1))"
"(perform-require!53.1"
" #f"
" #f"
" temp187_661"
" #t"
" temp188_662"
" #t"
" #f"
" #f"
" temp184_658"
" requires+provides186_660"
" #t"
" temp185_659"
" #f"
" #f"
" #f"
" #f"
" temp179_653"
" temp180_654"
" self181_655"
" in-stx182_656"
" m-ns183_657)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:190:2_652"
" keyword-procedure-extract"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase)"
" 7)"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase)"
"(list temp187_661 temp188_662 temp184_658 requires+provides186_660 temp185_659)"
" temp179_653"
" temp180_654"
" self181_655"
" in-stx182_656"
" m-ns183_657)))))"
"(define-values"
"(lifted/1.1$13)"
"(make-required"
" 'perform-require!"
"(case-lambda"
"((self_665 mpi_666 orig-s_667 self_668 in-stx_669 m-ns_670)"
"(apply missing-kw self_665 mpi_666 orig-s_667 self_668 in-stx_669 m-ns_670 null)))"
" #f"
" #f))"
"(define-values"
"(perform-require!53.1)"
"(lambda(adjust33_671"
" adjust42_672"
" can-be-shadowed?37_673"
" can-be-shadowed?46_674"
" initial-require?38_675"
" initial-require?47_676"
" just-meta32_677"
" just-meta41_678"
" phase-shift30_679"
" requires+provides34_680"
" requires+provides43_681"
" run-phase31_682"
" run?36_683"
" run?45_684"
" visit?35_685"
" visit?44_686"
" mpi48_687"
" orig-s49_688"
" self50_689"
" in-stx51_690"
" m-ns52_691)"
"(let-values(((mpi_692) mpi48_687))"
"(let-values(((orig-s_693) orig-s49_688))"
"(let-values(((self_694) self50_689))"
"(let-values(((in-stx_695) in-stx51_690))"
"(let-values(((m-ns_696) m-ns52_691))"
"(let-values(((phase-shift_697) phase-shift30_679))"
"(let-values(((run-phase_698) run-phase31_682))"
"(let-values(((just-meta_699)(if just-meta41_678 just-meta32_677 'all)))"
"(let-values(((adjust_700)(if adjust42_672 adjust33_671 #f)))"
"(let-values(((requires+provides_701)(if requires+provides43_681 requires+provides34_680 #f)))"
"(let-values(((visit?_702)(if visit?44_686 visit?35_685 #t)))"
"(let-values(((run?_703)(if run?45_684 run?36_683 #f)))"
"(let-values(((can-be-shadowed?_704)(if can-be-shadowed?46_674 can-be-shadowed?37_673 #f)))"
"(let-values(((initial-require?_705)"
"(if initial-require?47_676 initial-require?38_675 #f)))"
"(let-values()"
"(let-values(((module-name_706)(1/module-path-index-resolve mpi_692 #t)))"
"(let-values(((bind-in-stx_707)"
"(if(adjust-rename? adjust_700)"
"(adjust-rename-to-id adjust_700)"
" in-stx_695)))"
"(let-values(((done-syms_708)(if adjust_700(make-hash) #f)))"
"(let-values(((m_709)(namespace->module m-ns_696 module-name_706)))"
"(let-values((()"
"(begin"
"(if m_709"
"(void)"
"(let-values()"
"(raise-unknown-module-error 'require module-name_706)))"
"(values))))"
"(let-values(((interned-mpi_710)"
"(if requires+provides_701"
"(add-required-module!"
" requires+provides_701"
" mpi_692"
" phase-shift_697"
"(module-cross-phase-persistent? m_709))"
" mpi_692)))"
"(let-values((()"
"(begin"
"(if visit?_702"
"(let-values()"
"(let-values(((...r/expand/require.rkt:224:4_712)"
" namespace-module-visit!103.1)"
"((m-ns200_713) m-ns_696)"
"((interned-mpi201_714) interned-mpi_710)"
"((phase-shift202_715) phase-shift_697)"
"((run-phase203_716) run-phase_698))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!103.1))"
"(namespace-module-visit!101.1"
" run-phase203_716"
" #t"
" m-ns200_713"
" interned-mpi201_714"
" phase-shift202_715)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:224:4_712"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase203_716)"
" m-ns200_713"
" interned-mpi201_714"
" phase-shift202_715))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_703"
"(let-values()"
"(let-values(((...r/expand/require.rkt:226:4_717)"
" namespace-module-instantiate!95.1)"
"((m-ns204_718) m-ns_696)"
"((interned-mpi205_719)"
" interned-mpi_710)"
"((phase-shift206_720) phase-shift_697)"
"((run-phase207_721) run-phase_698))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" run-phase207_721"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns204_718"
" interned-mpi205_719"
" phase-shift206_720)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:226:4_717"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list run-phase207_721)"
" m-ns204_718"
" interned-mpi205_719"
" phase-shift206_720))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_722) visit?_702))"
"(if or-part_722 or-part_722 run?_703)))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:229:4_723)"
" namespace-module-make-available!111.1)"
"((m-ns208_724) m-ns_696)"
"((interned-mpi209_725)"
" interned-mpi_710)"
"((phase-shift210_726)"
" phase-shift_697)"
"((run-phase211_727) run-phase_698))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-make-available!111.1))"
"(namespace-module-make-available!109.1"
" run-phase211_727"
" #t"
" m-ns208_724"
" interned-mpi209_725"
" phase-shift210_726)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:229:4_723"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase211_727)"
" m-ns208_724"
" interned-mpi209_725"
" phase-shift210_726))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:230:2_728)"
" bind-all-provides!71.1)"
"((m191_729) m_709)"
"((bind-in-stx192_730) bind-in-stx_707)"
"((phase-shift193_731) phase-shift_697)"
"((m-ns194_732) m-ns_696)"
"((interned-mpi195_733)"
" interned-mpi_710)"
"((orig-s196_734) orig-s_693)"
"((temp197_735)"
"(if(adjust-only? adjust_700)"
"(let-values()"
"(set->list"
"(adjust-only-syms adjust_700)))"
"(if(adjust-rename? adjust_700)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_700)))"
"(let-values() #f))))"
"((temp198_736)(not adjust_700))"
"((temp199_737)"
"(if(let-values(((or-part_738)"
" adjust_700))"
"(if or-part_738"
" or-part_738"
" requires+provides_701))"
"(lambda(binding_739"
" as-transformer?_740)"
"(let-values(((sym_741)"
"(module-binding-nominal-sym"
" binding_739)))"
"(let-values(((provide-phase_742)"
"(module-binding-nominal-phase"
" binding_739)))"
"(let-values(((adjusted-sym_743)"
"(if(if(not"
"(eq?"
" just-meta_699"
" 'all))"
"(not"
"(equal?"
" provide-phase_742"
" just-meta_699))"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_700)"
"(let-values()"
" sym_741)"
"(if(adjust-only?"
" adjust_700)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_700)"
" sym_741)"
"(if(hash-set!"
" done-syms_708"
" sym_741"
" #t)"
" sym_741"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_700)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                    \"~a~a\""
"(adjust-prefix-sym"
" adjust_700)"
" sym_741)))"
"(if(adjust-all-except?"
" adjust_700)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_700)"
" sym_741)"
"(hash-set!"
" done-syms_708"
" sym_741"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                        \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_700)"
" sym_741))"
" #f))"
"(if(adjust-rename?"
" adjust_700)"
"(let-values()"
"(if(eq?"
" sym_741"
"(adjust-rename-from-sym"
" adjust_700))"
"(if(hash-set!"
" done-syms_708"
" sym_741"
" #t)"
"(adjust-rename-to-id"
" adjust_700)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_743"
" requires+provides_701"
" #f)"
"(let-values()"
"(let-values(((s_744)"
"(datum->syntax$1"
" bind-in-stx_707"
" adjusted-sym_743)))"
"(let-values(((bind-phase_745)"
"(phase+"
" phase-shift_697"
" provide-phase_742)))"
"(begin"
"(if initial-require?_705"
"(void)"
"(let-values()"
"(begin"
"(let-values(((...r/expand/require.rkt:271:19_746)"
" check-not-defined55.1)"
"((temp218_747)"
" #t)"
"((requires+provides219_748)"
" requires+provides_701)"
"((s220_749)"
" s_744)"
"((bind-phase221_750)"
" bind-phase_745)"
"((binding222_751)"
" binding_739)"
"((in-stx223_752)"
" in-stx_695))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined55.1))"
"(check-not-defined53.1"
" temp218_747"
" #t"
" in-stx223_752"
" binding222_751"
" #t"
" requires+provides219_748"
" s220_749"
" bind-phase221_750)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:271:19_746"
" keyword-procedure-extract"
" '(#:check-not-required?"
" #:in"
" #:unless-matches)"
" 5)"
" '(#:check-not-required?"
" #:in"
" #:unless-matches)"
"(list"
" temp218_747"
" in-stx223_752"
" binding222_751)"
" requires+provides219_748"
" s220_749"
" bind-phase221_750)))"
"(let-values(((...r/expand/require.rkt:276:19_753)"
" remove-required-id!43.1)"
"((requires+provides224_754)"
" requires+provides_701)"
"((s225_755)"
" s_744)"
"((bind-phase226_756)"
" bind-phase_745)"
"((binding227_757)"
" binding_739))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!43.1))"
"(remove-required-id!41.1"
" binding227_757"
" requires+provides224_754"
" s225_755"
" bind-phase226_756)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:276:19_753"
" keyword-procedure-extract"
" '(#:unless-matches)"
" 5)"
" '(#:unless-matches)"
"(list"
" binding227_757)"
" requires+provides224_754"
" s225_755"
" bind-phase226_756))))))"
"(let-values(((...r/expand/require.rkt:277:17_758)"
" add-defined-or-required-id!13.1)"
"((requires+provides212_759)"
" requires+provides_701)"
"((s213_760)"
" s_744)"
"((bind-phase214_761)"
" bind-phase_745)"
"((binding215_762)"
" binding_739)"
"((can-be-shadowed?216_763)"
" can-be-shadowed?_704)"
"((as-transformer?217_764)"
" as-transformer?_740))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!13.1))"
"(add-defined-or-required-id!11.1"
" as-transformer?217_764"
" can-be-shadowed?216_763"
" #t"
" requires+provides212_759"
" s213_760"
" bind-phase214_761"
" binding215_762)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:277:17_758"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
" 6)"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
"(list"
" as-transformer?217_764"
" can-be-shadowed?216_763)"
" requires+provides212_759"
" s213_760"
" bind-phase214_761"
" binding215_762)))))))"
"(void))"
" adjusted-sym_743)))))"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" bind-all-provides!71.1))"
"(bind-all-provides!69.1"
" temp198_736"
" temp199_737"
" orig-s196_734"
" temp197_735"
" m191_729"
" bind-in-stx192_730"
" phase-shift193_731"
" m-ns194_732"
" interned-mpi195_733)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:230:2_728"
" keyword-procedure-extract"
" '(#:can-bulk? #:filter #:in #:only)"
" 7)"
" '(#:can-bulk? #:filter #:in #:only)"
"(list"
" temp198_736"
" temp199_737"
" orig-s196_734"
" temp197_735)"
" m191_729"
" bind-in-stx192_730"
" phase-shift193_731"
" m-ns194_732"
" interned-mpi195_733)))"
"(values))))"
"(let-values(((need-syms_711)"
"(if(adjust-only? adjust_700)"
"(let-values()(adjust-only-syms adjust_700))"
"(if(adjust-all-except? adjust_700)"
"(let-values()"
"(adjust-all-except-syms adjust_700))"
"(if(adjust-rename? adjust_700)"
"(let-values()"
"(set(adjust-rename-from-sym adjust_700)))"
"(let-values() #f))))))"
"(if(if need-syms_711"
"(not"
"(=(set-count need-syms_711)(hash-count done-syms_708)))"
" #f)"
"(let-values()"
"(let-values(((ht_765) need-syms_711))"
"(begin"
"(if((lambda(ht_766)"
"(if(hash? ht_766)(immutable? ht_766) #f))"
" ht_765)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_765)))"
"((letrec-values(((for-loop_767)"
"(lambda(fold-var_768 i_769)"
"(if i_769"
"(let-values(((sym_770)"
"(unsafe-immutable-hash-iterate-key"
" ht_765"
" i_769)))"
"(if #t"
"(let-values(((fold-var_771)"
"(let-values(((fold-var_772)"
" fold-var_768))"
"(let-values(((fold-var_773)"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_708"
" sym_770"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"not in nested spec\""
" orig-s_693"
" sym_770))))"
"(void)))))"
"(values"
" fold-var_773)))))"
"(if #t"
"(for-loop_767"
" fold-var_771"
"(unsafe-immutable-hash-iterate-next"
" ht_765"
" i_769))"
" fold-var_771))"
" fold-var_768))"
" fold-var_768))))"
" for-loop_767)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_765)))))"
"(void))))))))))))))))))))))))))))))"
"(define-values"
"(unpack54.1)"
"(lambda(given-kws_774 given-args_775 mpi48_776 orig-s49_777 self50_778 in-stx51_779 m-ns52_780)"
"(let-values(((adjust42_781)(if(pair? given-kws_774)(eq? '#:adjust(car given-kws_774)) #f)))"
"(let-values(((adjust33_782)(if adjust42_781(car given-args_775)(void)))"
"((given-kws_783)(if adjust42_781(cdr given-kws_774) given-kws_774))"
"((given-args_784)(if adjust42_781(cdr given-args_775) given-args_775)))"
"(let-values(((can-be-shadowed?46_785)"
"(if(pair? given-kws_783)(eq? '#:can-be-shadowed?(car given-kws_783)) #f)))"
"(let-values(((can-be-shadowed?37_786)(if can-be-shadowed?46_785(car given-args_784)(void)))"
"((given-kws_787)(if can-be-shadowed?46_785(cdr given-kws_783) given-kws_783))"
"((given-args_788)(if can-be-shadowed?46_785(cdr given-args_784) given-args_784)))"
"(let-values(((initial-require?47_789)"
"(if(pair? given-kws_787)(eq? '#:initial-require?(car given-kws_787)) #f)))"
"(let-values(((initial-require?38_790)(if initial-require?47_789(car given-args_788)(void)))"
"((given-kws_791)(if initial-require?47_789(cdr given-kws_787) given-kws_787))"
"((given-args_792)(if initial-require?47_789(cdr given-args_788) given-args_788)))"
"(let-values(((just-meta41_793)(if(pair? given-kws_791)(eq? '#:just-meta(car given-kws_791)) #f)))"
"(let-values(((just-meta32_794)(if just-meta41_793(car given-args_792)(void)))"
"((given-kws_795)(if just-meta41_793(cdr given-kws_791) given-kws_791))"
"((given-args_796)(if just-meta41_793(cdr given-args_792) given-args_792)))"
"(let-values(((phase-shift30_797)(car given-args_796))"
"((given-kws_798)(cdr given-kws_795))"
"((given-args_799)(cdr given-args_796)))"
"(let-values(((requires+provides43_800)"
"(if(pair? given-kws_798)(eq? '#:requires+provides(car given-kws_798)) #f)))"
"(let-values(((requires+provides34_801)"
"(if requires+provides43_800(car given-args_799)(void)))"
"((given-kws_802)(if requires+provides43_800(cdr given-kws_798) given-kws_798))"
"((given-args_803)"
"(if requires+provides43_800(cdr given-args_799) given-args_799)))"
"(let-values(((run-phase31_804)(car given-args_803))"
"((given-kws_805)(cdr given-kws_802))"
"((given-args_806)(cdr given-args_803)))"
"(let-values(((run?45_807)(if(pair? given-kws_805)(eq? '#:run?(car given-kws_805)) #f)))"
"(let-values(((run?36_808)(if run?45_807(car given-args_806)(void)))"
"((given-kws_809)(if run?45_807(cdr given-kws_805) given-kws_805))"
"((given-args_810)(if run?45_807(cdr given-args_806) given-args_806)))"
"(let-values(((visit?44_811)(pair? given-kws_809)))"
"(let-values(((visit?35_812)(if visit?44_811(car given-args_810)(void))))"
"(perform-require!53.1"
" adjust33_782"
" adjust42_781"
" can-be-shadowed?37_786"
" can-be-shadowed?46_785"
" initial-require?38_790"
" initial-require?47_789"
" just-meta32_794"
" just-meta41_793"
" phase-shift30_797"
" requires+provides34_801"
" requires+provides43_800"
" run-phase31_804"
" run?36_808"
" run?45_807"
" visit?35_812"
" visit?44_811"
" mpi48_776"
" orig-s49_777"
" self50_778"
" in-stx51_779"
" m-ns52_780)))))))))))))))))))"
"(define-values"
"(perform-require!55.1)"
"(lifted/1.1$13"
"(lambda(given-kws_813 given-argc_814)"
"(if(= given-argc_814 7)"
"(subsets?"
" '(#:phase-shift #:run-phase)"
" given-kws_813"
" '(#:adjust"
" #:can-be-shadowed?"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?))"
" #f))"
"(case-lambda"
"((given-kws_815 given-args_816 mpi_817 orig-s_818 self_819 in-stx_820 m-ns_821)"
"(unpack54.1 given-kws_815 given-args_816 mpi_817 orig-s_818 self_819 in-stx_820 m-ns_821)))"
" '(#:phase-shift #:run-phase)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)))"
"(define-values"
"(lifted/2.1$5)"
"(make-required"
" 'bind-all-provides!"
"(case-lambda"
"((self_822 m_823 in-stx_824 phase-shift_825 ns_826 mpi_827)"
"(apply missing-kw self_822 m_823 in-stx_824 phase-shift_825 ns_826 mpi_827 null)))"
" #f"
" #f))"
"(define-values"
"(bind-all-provides!69.1)"
"(lambda(can-bulk?58_828 filter59_829 in56_830 only57_831 m64_832 in-stx65_833 phase-shift66_834 ns67_835 mpi68_836)"
"(let-values(((m_837) m64_832))"
"(let-values(((in-stx_838) in-stx65_833))"
"(let-values(((phase-shift_839) phase-shift66_834))"
"(let-values(((ns_840) ns67_835))"
"(let-values(((mpi_841) mpi68_836))"
"(let-values(((orig-s_842) in56_830))"
"(let-values(((only-syms_843) only57_831))"
"(let-values(((can-bulk?_844) can-bulk?58_828))"
"(let-values(((filter_845) filter59_829))"
"(let-values()"
"(let-values(((self_846)(module-self m_837)))"
"(let-values(((ht_847)(module-provides m_837)))"
"(begin"
"(if((lambda(ht_848)(hash? ht_848)) ht_847)"
"(void)"
"(let-values()(default-in-hash ht_847)))"
"((letrec-values(((for-loop_849)"
"(lambda(fold-var_850 i_851)"
"(if i_851"
"(let-values(((provide-phase-level_852 provides_853)"
"(hash-iterate-key+value ht_847 i_851)))"
"(if #t"
"(let-values(((fold-var_854)"
"(let-values(((fold-var_855) fold-var_850))"
"(let-values(((fold-var_856)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_857)"
"(phase+"
" phase-shift_839"
" provide-phase-level_852)))"
"(begin"
"(if filter_845"
"(let-values()"
"(let-values(((lst_858)"
"(let-values(((or-part_859)"
" only-syms_843))"
"(if or-part_859"
" or-part_859"
"(hash-keys"
" provides_853)))))"
"(begin"
"(if(list?"
" lst_858)"
"(void)"
"(let-values()"
"(in-list"
" lst_858)))"
"((letrec-values(((for-loop_860)"
"(lambda(fold-var_861"
" lst_862)"
"(if(pair?"
" lst_862)"
"(let-values(((sym_863)"
"(unsafe-car"
" lst_862)))"
"(if #t"
"(let-values(((fold-var_864)"
"(let-values(((fold-var_865)"
" fold-var_861))"
"(let-values(((fold-var_866)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_867)"
"(hash-ref"
" provides_853"
" sym_863"
" #f)))"
"(if binding/p_867"
"(let-values()"
"(let-values(((b_868)"
"(let-values(((...r/expand/require.rkt:311:20_869)"
" provide-binding-to-require-binding13.1)"
"((binding/p228_870)"
" binding/p_867)"
"((sym229_871)"
" sym_863)"
"((self230_872)"
" self_846)"
"((mpi231_873)"
" mpi_841)"
"((provide-phase-level232_874)"
" provide-phase-level_852)"
"((phase-shift233_875)"
" phase-shift_839))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" mpi231_873"
" phase-shift233_875"
" provide-phase-level232_874"
" self230_872"
" binding/p228_870"
" sym229_871)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:311:20_869"
" keyword-procedure-extract"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
" 4)"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
"(list"
" mpi231_873"
" phase-shift233_875"
" provide-phase-level232_874"
" self230_872)"
" binding/p228_870"
" sym229_871)))))"
"(let-values(((sym_876)"
"(filter_845"
" b_868"
"(provided-as-transformer?"
" binding/p_867))))"
"(if(if sym_876"
"(not"
" can-bulk?_844)"
" #f)"
"(let-values()"
"(let-values(((temp234_877)"
"(datum->syntax$1"
" in-stx_838"
" sym_876))"
"((b235_878)"
" b_868)"
"((phase236_879)"
" phase_857))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" #f"
" #f"
" temp234_877"
" b235_878"
" phase236_879)"
"(add-binding!17.1"
" temp234_877"
" b235_878"
" phase236_879))))"
"(void)))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_866)))))"
"(if #t"
"(for-loop_860"
" fold-var_864"
"(unsafe-cdr"
" lst_862))"
" fold-var_864))"
" fold-var_861))"
" fold-var_861))))"
" for-loop_860)"
"(void)"
" lst_858))))"
"(void))"
"(if can-bulk?_844"
"(let-values()"
"(let-values(((...r/expand/require.rkt:323:6_880)"
" add-bulk-binding!25.1)"
"((in-stx237_881)"
" in-stx_838)"
"((temp238_882)"
"(bulk-binding14.1"
" provides_853"
" self_846"
" mpi_841"
" provide-phase-level_852"
" phase-shift_839"
"(namespace-bulk-binding-registry"
" ns_840)))"
"((phase239_883)"
" phase_857)"
"((orig-s240_884)"
" orig-s_842))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-bulk-binding!25.1))"
"(add-bulk-binding!23.1"
" orig-s240_884"
" #t"
" in-stx237_881"
" temp238_882"
" phase239_883)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:323:6_880"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s240_884)"
" in-stx237_881"
" temp238_882"
" phase239_883))))"
"(void)))))"
"(void)))))"
"(values fold-var_856)))))"
"(if #t"
"(for-loop_849 fold-var_854(hash-iterate-next ht_847 i_851))"
" fold-var_854))"
" fold-var_850))"
" fold-var_850))))"
" for-loop_849)"
"(void)"
"(hash-iterate-first ht_847)))))))))))))))))"
"(define-values"
"(unpack70.1)"
"(lambda(given-kws_885 given-args_886 m64_887 in-stx65_888 phase-shift66_889 ns67_890 mpi68_891)"
"(let-values(((can-bulk?58_892)(car given-args_886))"
"((given-kws_893)(cdr given-kws_885))"
"((given-args_894)(cdr given-args_886)))"
"(let-values(((filter59_895)(car given-args_894))"
"((given-kws_896)(cdr given-kws_893))"
"((given-args_897)(cdr given-args_894)))"
"(let-values(((in56_898)(car given-args_897))"
"((given-kws_899)(cdr given-kws_896))"
"((given-args_900)(cdr given-args_897)))"
"(let-values(((only57_901)(car given-args_900)))"
"(bind-all-provides!69.1"
" can-bulk?58_892"
" filter59_895"
" in56_898"
" only57_901"
" m64_887"
" in-stx65_888"
" phase-shift66_889"
" ns67_890"
" mpi68_891)))))))"
"(define-values"
"(bind-all-provides!71.1)"
"(lifted/2.1$5"
"(lambda(given-kws_902 given-argc_903)"
"(if(= given-argc_903 7)"
"(let-values(((l2_904) given-kws_902))"
"(if(pair? l2_904)"
"(if(eq?(car l2_904) '#:can-bulk?)"
"(let-values(((l2_905)(cdr l2_904)))"
"(if(pair? l2_905)"
"(if(eq?(car l2_905) '#:filter)"
"(let-values(((l2_906)(cdr l2_905)))"
"(if(pair? l2_906)"
"(if(eq?(car l2_906) '#:in)"
"(let-values(((l2_907)(cdr l2_906)))"
"(if(pair? l2_907)(if(eq?(car l2_907) '#:only)(null?(cdr l2_907)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_908 given-args_909 m_910 in-stx_911 phase-shift_912 ns_913 mpi_914)"
"(unpack70.1 given-kws_908 given-args_909 m_910 in-stx_911 phase-shift_912 ns_913 mpi_914)))"
" '(#:can-bulk? #:filter #:in #:only)"
" '(#:can-bulk? #:filter #:in #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_915)"
"(let-values(((rebuild-req_916)"
"(lambda(req_918 new-req_919)(datum->syntax$1 req_918 new-req_919 req_918 req_918))))"
"(letrec-values(((loop_917)"
"(lambda(shifted?_920)"
"(lambda(req_921)"
"(let-values(((fm_922)"
"(if(pair?(syntax-e$1 req_921))"
"(if(identifier?(car(syntax-e$1 req_921)))"
"(syntax-e$1(car(syntax-e$1 req_921)))"
" #f)"
" #f)))"
"(let-values(((tmp_923) fm_922))"
"(if(equal? tmp_923 'for-meta)"
"(let-values()"
"(let-values(((ok?_924 for-meta241_925 phase-level242_926 spec243_927)"
"(let-values(((s_941) req_921))"
"(if(if #t #t #f)"
"(let-values(((orig-s_942) s_941))"
"(let-values(((for-meta241_943 phase-level242_944 spec243_945)"
"(let-values(((s_946)"
"(if(syntax?$1 s_941)"
"(syntax-e$1 s_941)"
" s_941)))"
"(if(pair? s_946)"
"(let-values(((for-meta244_947)"
"(let-values(((s_950)"
"(car s_946)))"
" s_950))"
"((phase-level245_948 spec246_949)"
"(let-values(((s_951)"
"(cdr s_946)))"
"(let-values(((s_952)"
"(if(syntax?$1"
" s_951)"
"(syntax-e$1"
" s_951)"
" s_951)))"
"(if(pair? s_952)"
"(let-values(((phase-level247_953)"
"(let-values(((s_955)"
"(car"
" s_952)))"
" s_955))"
"((spec248_954)"
"(let-values(((s_956)"
"(cdr"
" s_952)))"
"(let-values(((s_957)"
"(if(syntax?$1"
" s_956)"
"(syntax-e$1"
" s_956)"
" s_956)))"
"(let-values(((flat-s_958)"
"(to-syntax-list.1"
" s_957)))"
"(if(not"
" flat-s_958)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_942))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_942))"
"(let-values()"
" flat-s_958))))))))"
"(values"
" phase-level247_953"
" spec248_954))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_942))))))"
"(values"
" for-meta244_947"
" phase-level245_948"
" spec246_949))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_942)))))"
"(values #t for-meta241_943 phase-level242_944 spec243_945)))"
"(values #f #f #f #f)))))"
"(let-values(((p_940)(syntax-e$1 phase-level242_926)))"
"(begin"
"(if(phase? p_940)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_921)))"
"(rebuild-req_916"
" req_921"
"(list* for-meta241_925(phase+ p_940 1)(map2(loop_917 #t) spec243_927)))))))"
"(if(equal? tmp_923 'for-syntax)"
"(let-values()"
"(let-values(((ok?_959 for-syntax249_960 spec250_961)"
"(let-values(((s_972) req_921))"
"(if(if #t #t #f)"
"(let-values(((orig-s_973) s_972))"
"(let-values(((for-syntax249_974 spec250_975)"
"(let-values(((s_976)"
"(if(syntax?$1 s_972)"
"(syntax-e$1 s_972)"
" s_972)))"
"(if(pair? s_976)"
"(let-values(((for-syntax251_977)"
"(let-values(((s_979)"
"(car s_976)))"
" s_979))"
"((spec252_978)"
"(let-values(((s_980)"
"(cdr s_976)))"
"(let-values(((s_981)"
"(if(syntax?$1"
" s_980)"
"(syntax-e$1"
" s_980)"
" s_980)))"
"(let-values(((flat-s_982)"
"(to-syntax-list.1"
" s_981)))"
"(if(not flat-s_982)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_973))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_973))"
"(let-values()"
" flat-s_982))))))))"
"(values for-syntax251_977 spec252_978))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_973)))))"
"(values #t for-syntax249_974 spec250_975)))"
"(values #f #f #f)))))"
"(rebuild-req_916 req_921(list* 'for-meta 2(map2(loop_917 #t) spec250_961)))))"
"(if(equal? tmp_923 'for-template)"
"(let-values()"
"(let-values(((ok?_983 for-template253_984 spec254_985)"
"(let-values(((s_996) req_921))"
"(if(if #t #t #f)"
"(let-values(((orig-s_997) s_996))"
"(let-values(((for-template253_998 spec254_999)"
"(let-values(((s_1000)"
"(if(syntax?$1 s_996)"
"(syntax-e$1 s_996)"
" s_996)))"
"(if(pair? s_1000)"
"(let-values(((for-template255_1001)"
"(let-values(((s_1003)"
"(car s_1000)))"
" s_1003))"
"((spec256_1002)"
"(let-values(((s_1004)"
"(cdr s_1000)))"
"(let-values(((s_1005)"
"(if(syntax?$1"
" s_1004)"
"(syntax-e$1"
" s_1004)"
" s_1004)))"
"(let-values(((flat-s_1006)"
"(to-syntax-list.1"
" s_1005)))"
"(if(not flat-s_1006)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_997))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_997))"
"(let-values()"
" flat-s_1006))))))))"
"(values"
" for-template255_1001"
" spec256_1002))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_997)))))"
"(values #t for-template253_998 spec254_999)))"
"(values #f #f #f)))))"
"(rebuild-req_916"
" req_921"
"(list* 'for-meta 0(map2(loop_917 #t) spec254_985)))))"
"(if(equal? tmp_923 'for-label)"
"(let-values()"
"(let-values(((ok?_1007 for-label257_1008 spec258_1009)"
"(let-values(((s_1020) req_921))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1021) s_1020))"
"(let-values(((for-label257_1022 spec258_1023)"
"(let-values(((s_1024)"
"(if(syntax?$1 s_1020)"
"(syntax-e$1 s_1020)"
" s_1020)))"
"(if(pair? s_1024)"
"(let-values(((for-label259_1025)"
"(let-values(((s_1027)"
"(car"
" s_1024)))"
" s_1027))"
"((spec260_1026)"
"(let-values(((s_1028)"
"(cdr"
" s_1024)))"
"(let-values(((s_1029)"
"(if(syntax?$1"
" s_1028)"
"(syntax-e$1"
" s_1028)"
" s_1028)))"
"(let-values(((flat-s_1030)"
"(to-syntax-list.1"
" s_1029)))"
"(if(not flat-s_1030)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_1021))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_1021))"
"(let-values()"
" flat-s_1030))))))))"
"(values"
" for-label259_1025"
" spec260_1026))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1021)))))"
"(values #t for-label257_1022 spec258_1023)))"
"(values #f #f #f)))))"
"(rebuild-req_916"
" req_921"
"(list* for-label257_1008(map2(loop_917 #t) spec258_1009)))))"
"(if(equal? tmp_923 'just-meta)"
"(let-values()"
"(let-values(((ok?_1031 just-meta261_1032 phase-level262_1033 spec263_1034)"
"(let-values(((s_1047) req_921))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1048) s_1047))"
"(let-values(((just-meta261_1049"
" phase-level262_1050"
" spec263_1051)"
"(let-values(((s_1052)"
"(if(syntax?$1 s_1047)"
"(syntax-e$1 s_1047)"
" s_1047)))"
"(if(pair? s_1052)"
"(let-values(((just-meta264_1053)"
"(let-values(((s_1056)"
"(car"
" s_1052)))"
" s_1056))"
"((phase-level265_1054"
" spec266_1055)"
"(let-values(((s_1057)"
"(cdr"
" s_1052)))"
"(let-values(((s_1058)"
"(if(syntax?$1"
" s_1057)"
"(syntax-e$1"
" s_1057)"
" s_1057)))"
"(if(pair? s_1058)"
"(let-values(((phase-level267_1059)"
"(let-values(((s_1061)"
"(car"
" s_1058)))"
" s_1061))"
"((spec268_1060)"
"(let-values(((s_1062)"
"(cdr"
" s_1058)))"
"(let-values(((s_1063)"
"(if(syntax?$1"
" s_1062)"
"(syntax-e$1"
" s_1062)"
" s_1062)))"
"(let-values(((flat-s_1064)"
"(to-syntax-list.1"
" s_1063)))"
"(if(not"
" flat-s_1064)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_1048))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1048))"
"(let-values()"
" flat-s_1064))))))))"
"(values"
" phase-level267_1059"
" spec268_1060))"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1048))))))"
"(values"
" just-meta264_1053"
" phase-level265_1054"
" spec266_1055))"
"(raise-syntax-error$1"
" #f"
"                                                                                  \"bad syntax\""
" orig-s_1048)))))"
"(values"
" #t"
" just-meta261_1049"
" phase-level262_1050"
" spec263_1051)))"
"(values #f #f #f #f)))))"
"(rebuild-req_916"
" req_921"
"(list*"
" just-meta261_1032"
" phase-level262_1033"
"(map2(loop_917 #f) spec263_1034)))))"
"(let-values()"
"(if shifted?_920"
" req_921"
"(datum->syntax$1 #f(list 'for-syntax req_921)))))))))))))))"
"((loop_917 #f) req_915)))))"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" top-level-bind!-id"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans-val_7)"
"(let-values(((phase_8)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_9)"
"(let-values(((...p-level-instance.rkt:25:15_10) make-module-binding22.1)"
"((mpi4_11) mpi_2)"
"((phase5_12) phase_8)"
"((sym6_13) sym_6)"
"((temp7_14)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" temp7_14"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi4_11"
" phase5_12"
" sym6_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:25:15_10"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list temp7_14)"
" mpi4_11"
" phase5_12"
" sym6_13)))))"
"(begin"
"(let-values(((id1_15) id_1)((b2_16) b_9)((phase3_17) phase_8))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f id1_15 b2_16 phase3_17)"
"(add-binding!17.1 id1_15 b2_16 phase3_17)))"
"(if trans-val_7(let-values()(maybe-install-free=id! trans-val_7 id_1 phase_8))(void))))))"
" top-level-require!-id"
"(lambda(stx_18 ns_19)"
"(let-values(((reqs_20)(cdr(syntax->list$1 stx_18))))"
"(let-values(((...p-level-instance.rkt:35:5_21) parse-and-perform-requires!22.1)"
"((temp8_22) #t)"
"((temp9_23) #f)"
"((reqs10_24) reqs_20)"
"((temp11_25) #f)"
"((ns12_26) ns_19)"
"((temp13_27)(namespace-phase ns_19))"
"((temp14_28)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" temp8_22"
" #t"
" #f"
" #f"
" temp9_23"
" #t"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:35:5_21"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 7)"
" '(#:run? #:visit?)"
"(list temp8_22 temp9_23)"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)))))))"
"(define-values"
"(lifted/1.1$12)"
"(make-required"
" 'check-require-access"
"(case-lambda"
"((self_2 linklet_3 import-module-uses_4 import-module-instances_5 insp_6 extra-inspector_7 extra-inspectorsss_8)"
"(apply"
" missing-kw"
" self_2"
" linklet_3"
" import-module-uses_4"
" import-module-instances_5"
" insp_6"
" extra-inspector_7"
" extra-inspectorsss_8"
" null)))"
" #f"
" #f))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_9"
" linklet3_10"
" import-module-uses4_11"
" import-module-instances5_12"
" insp6_13"
" extra-inspector7_14"
" extra-inspectorsss8_15)"
"(let-values(((linklet_16) linklet3_10))"
"(let-values(((skip-num-imports_17) skip-imports1_9))"
"(let-values(((import-module-uses_18) import-module-uses4_11))"
"(let-values(((import-module-instances_19) import-module-instances5_12))"
"(let-values(((insp_20) insp6_13))"
"(let-values(((extra-inspector_21) extra-inspector7_14))"
"(let-values(((extra-inspectorsss_22) extra-inspectorsss8_15))"
"(let-values()"
"(let-values(((lst_23)(list-tail(1/linklet-import-variables linklet_16) skip-num-imports_17))"
"((lst_24) import-module-uses_18)"
"((lst_25) import-module-instances_19)"
"((lst_26)"
"(let-values(((or-part_27) extra-inspectorsss_22))"
"(if or-part_27 or-part_27 import-module-uses_18))))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"(if(list? lst_25)(void)(let-values()(in-list lst_25)))"
"(if(list? lst_26)(void)(let-values()(in-list lst_26)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29 lst_30 lst_31 lst_32 lst_33)"
"(if(if(pair? lst_30)"
"(if(pair? lst_31)(if(pair? lst_32)(pair? lst_33) #f) #f)"
" #f)"
"(let-values(((import-syms_34)(unsafe-car lst_30))"
"((mu_35)(unsafe-car lst_31))"
"((mi_36)(unsafe-car lst_32))"
"((extra-inspectorss_37)(unsafe-car lst_33)))"
"(if(if #t(if #t(if #t #t #f) #f) #f)"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_29))"
"(let-values(((fold-var_40)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_41)"
"(module-instance-module"
" mi_36)))"
"(if(module-no-protected? m_41)"
"(void)"
"(let-values()"
"(let-values(((access_42)"
"(let-values(((or-part_43)"
"(module-access"
" m_41)))"
"(if or-part_43"
" or-part_43"
"(module-compute-access!"
" m_41)))))"
"(let-values(((lst_44)"
" import-syms_34)"
"((lst_45)"
"(let-values(((or-part_46)"
"(if extra-inspectorsss_22"
" extra-inspectorss_37"
" #f)))"
"(if or-part_46"
" or-part_46"
" import-syms_34))))"
"(begin"
"(if(list? lst_44)"
"(void)"
"(let-values()"
"(in-list lst_44)))"
"(if(list? lst_45)"
"(void)"
"(let-values()"
"(in-list lst_45)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49"
" lst_50)"
"(if(if(pair?"
" lst_49)"
"(pair?"
" lst_50)"
" #f)"
"(let-values(((import-sym_51)"
"(unsafe-car"
" lst_49))"
"((extra-inspectors_52)"
"(unsafe-car"
" lst_50)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54)"
" fold-var_48))"
"(let-values(((fold-var_55)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_56)"
"(hash-ref"
"(hash-ref"
" access_42"
"(module-use-phase"
" mu_35)"
" '#hasheq())"
" import-sym_51"
" 'unexported)))"
"(if(let-values(((or-part_57)"
"(eq?"
" a_56"
" 'unexported)))"
"(if or-part_57"
" or-part_57"
"(eq?"
" a_56"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_58)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_36))))"
"(if(let-values(((or-part_59)"
"(inspector-superior?"
" insp_20"
" guard-insp_58)))"
"(if or-part_59"
" or-part_59"
"(let-values(((or-part_60)"
"(if extra-inspector_21"
"(inspector-superior?"
" extra-inspector_21"
" guard-insp_58)"
" #f)))"
"(if or-part_60"
" or-part_60"
"(if extra-inspectorsss_22"
"(if extra-inspectorss_37"
"(let-values(((ht_61)"
" extra-inspectors_52))"
"(begin"
"(if((lambda(ht_62)"
"(if(hash?"
" ht_62)"
"(immutable?"
" ht_62)"
" #f))"
" ht_61)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_61)))"
"((letrec-values(((for-loop_63)"
"(lambda(result_64"
" i_65)"
"(if i_65"
"(let-values(((extra-insp_66)"
"(unsafe-immutable-hash-iterate-key"
" ht_61"
" i_65)))"
"(if #t"
"(let-values(((result_67)"
"(let-values(((result_68)"
" result_64))"
"(let-values(((result_69)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_66"
" guard-insp_58)))))"
"(values"
" result_69)))))"
"(if(if #t"
"(not"
"((lambda x_70"
"(not"
" result_67))"
" extra-insp_66))"
" #f)"
"(for-loop_63"
" result_67"
"(unsafe-immutable-hash-iterate-next"
" ht_61"
" i_65))"
" result_67))"
" result_64))"
" result_64))))"
" for-loop_63)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_61))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                              \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                              \"  variable: ~s\\n\""
"                                                                                                                                                                              \"  from module: ~a\")"
" a_56"
" import-sym_51"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_36))))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_55)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_47"
" fold-var_53"
"(unsafe-cdr"
" lst_49)"
"(unsafe-cdr"
" lst_50))"
" fold-var_53))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_44"
" lst_45))))))))"
"(void)))))"
"(values fold-var_40)))))"
"(if(if #t(if #t(if #t #t #f) #f) #f)"
"(for-loop_28"
" fold-var_38"
"(unsafe-cdr lst_30)"
"(unsafe-cdr lst_31)"
"(unsafe-cdr lst_32)"
"(unsafe-cdr lst_33))"
" fold-var_38))"
" fold-var_29))"
" fold-var_29))))"
" for-loop_28)"
"(void)"
" lst_23"
" lst_24"
" lst_25"
" lst_26)))))))))))))"
"(define-values"
"(unpack10.1)"
"(lambda(given-kws_71"
" given-args_72"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78)"
"(let-values(((skip-imports1_79)(car given-args_72)))"
"(check-require-access9.1"
" skip-imports1_79"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78))))"
"(define-values"
"(check-require-access11.1)"
"(lifted/1.1$12"
"(lambda(given-kws_80 given-argc_81)"
"(if(= given-argc_81 8)"
"(let-values(((l2_82) given-kws_80))"
"(if(pair? l2_82)(if(eq?(car l2_82) '#:skip-imports)(null?(cdr l2_82)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)"
"(unpack10.1"
" given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)))"
" '(#:skip-imports)"
" '(#:skip-imports)))"
"(define-values"
"(eval-single-top)"
"(lambda(c_1 ns_2)"
"(let-values(((...xpander/eval/top.rkt:23:2_3) eval-one-top13.1)((c14_4) c_1)((ns15_5) ns_2)((temp16_6) #t))"
"(if(variable-reference-constant?(#%variable-reference eval-one-top13.1))"
"(eval-one-top11.1 temp16_6 #t c14_4 ns15_5)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:23:2_3"
" keyword-procedure-extract"
" '(#:single-expression?)"
" 4)"
" '(#:single-expression?)"
"(list temp16_6)"
" c14_4"
" ns15_5)))))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top5_7)"
"(lambda(c3_8 ns4_9 eval-compiled1_10 eval-compiled2_11)"
"(let-values(((c_12) c3_8))"
"(let-values(((ns_13) ns4_9))"
"(let-values(((eval-compiled_14)(if eval-compiled2_11 eval-compiled1_10 eval-top)))"
"(let-values()"
"(let-values(((ld_15)"
"(if(compiled-in-memory? c_12)"
"(compiled-in-memory-linklet-directory c_12)"
" c_12)))"
"(if(hash-ref(1/linklet-directory->hash ld_15) #f #f)"
"(let-values(((c17_16) c_12)((ns18_17) ns_13))"
"(if(variable-reference-constant?(#%variable-reference eval-one-top13.1))"
"(eval-one-top11.1 #f #f c17_16 ns18_17)"
"(eval-one-top13.1 c17_16 ns18_17)))"
"(eval-multiple-tops c_12 ns_13 eval-compiled_14))))))))))"
"(case-lambda"
"((c_18 ns_19)(eval-top5_7 c_18 ns_19 #f #f))"
"((c_20 ns_21 eval-compiled1_22)(eval-top5_7 c_20 ns_21 eval-compiled1_22 #t)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_23 ns_24 eval-compiled_25)"
"(if(compiled-in-memory? c_23)"
"(let-values()"
"((letrec-values(((loop_26)"
"(lambda(cims_27)"
"(if(null? cims_27)"
"(let-values() void)"
"(if(null?(cdr cims_27))"
"(let-values()(eval-compiled_25(car cims_27) ns_24))"
"(let-values()"
"(begin(eval-compiled_25(car cims_27) ns_24)(loop_26(cdr cims_27)))))))))"
" loop_26)"
"(compiled-in-memory-pre-compiled-in-memorys c_23)))"
"(let-values()"
"((letrec-values(((loop_28)"
"(lambda(lds_29)"
"(if(null? lds_29)"
"(let-values()(void))"
"(if(null?(cdr lds_29))"
"(let-values()(eval-compiled_25(car lds_29) ns_24))"
"(let-values()"
"(begin(eval-compiled_25(car lds_29) ns_24)(loop_28(cdr lds_29)))))))))"
" loop_28)"
"(compiled-top->compiled-tops c_23))))))"
"(define-values"
"(eval-one-top11.1)"
"(lambda(single-expression?7_30 single-expression?8_31 c9_32 ns10_33)"
"(let-values(((c_34) c9_32))"
"(let-values(((ns_35) ns10_33))"
"(let-values(((single-expression?_36)(if single-expression?8_31 single-expression?7_30 #f)))"
"(let-values()"
"(let-values(((ld_37)(if(compiled-in-memory? c_34)(compiled-in-memory-linklet-directory c_34) c_34)))"
"(let-values(((h_38)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_37) #f))))"
"(let-values(((link-instance_39)"
"(if(compiled-in-memory? c_34)"
"(link-instance-from-compiled-in-memory c_34)"
"(1/instantiate-linklet"
"(hash-ref h_38 'link)"
"(list"
" deserialize-instance"
"(let-values(((...xpander/eval/top.rkt:66:35_46) make-eager-instance-instance13.1)"
"((ns19_47) ns_35)"
"((temp20_48)(namespace-phase ns_35))"
"((temp21_49)(namespace-mpi ns_35))"
"((temp22_50)(namespace-bulk-binding-registry ns_35))"
"((temp23_51)(current-code-inspector)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-eager-instance-instance13.1))"
"(make-eager-instance-instance11.1 temp22_50 temp20_48 temp23_51 ns19_47 temp21_49)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:66:35_46"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" 2)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
"(list temp22_50 temp20_48 temp23_51 ns19_47 temp21_49)))))))))"
"(let-values(((orig-phase_40)(hash-ref h_38 'original-phase)))"
"(let-values(((max-phase_41)(hash-ref h_38 'max-phase)))"
"(let-values(((phase-shift_42)(phase-(namespace-phase ns_35) orig-phase_40)))"
"(let-values(((extra-inspector_43)"
"(if(compiled-in-memory? c_34)"
"(compiled-in-memory-compile-time-inspector c_34)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_44)"
"(if(compiled-in-memory? c_34)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_34)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_45)"
"(if(compiled-in-memory? c_34)"
"(compiled-in-memory-phase-to-link-module-uses c_34)"
"(1/instance-variable-value link-instance_39 'phase-to-link-modules))))"
"((let-values(((start_52) max-phase_41)((end_53)(sub1 orig-phase_40))((inc_54) -1))"
"(begin"
"(if(if(real? start_52)(if(real? end_53)(real? inc_54) #f) #f)"
"(void)"
"(let-values()(in-range start_52 end_53 inc_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(prev-thunk_56 pos_57)"
"(if(> pos_57 end_53)"
"(let-values(((phase_58) pos_57))"
"(if #t"
"(let-values(((prev-thunk_59)"
"(let-values(((prev-thunk_60) prev-thunk_56))"
"(let-values(((prev-thunk_61)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_60)"
"(values))))"
"(let-values(((module-uses_62)"
"(hash-ref"
" phase-to-link-modules_45"
" phase_58"
" null)))"
"(let-values(((import-module-instances_63"
" import-instances_64)"
"(let-values(((mis_68"
" is_69)"
"(let-values(((lst_70)"
" module-uses_62))"
"(begin"
"(if(list?"
" lst_70)"
"(void)"
"(let-values()"
"(in-list"
" lst_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(mis_72"
" is_73"
" lst_74)"
"(if(pair?"
" lst_74)"
"(let-values(((mu_75)"
"(unsafe-car"
" lst_74)))"
"(if #t"
"(let-values(((mis_76"
" is_77)"
"(let-values(((mis_78)"
" mis_72)"
"((is_79)"
" is_73))"
"(let-values(((mis_80"
" is_81)"
"(let-values()"
"(let-values(((mis24_82"
" is25_83)"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:96:9_84)"
" namespace-module-use->module+linklet-instances145.1)"
"((ns26_85)"
" ns_35)"
"((mu27_86)"
" mu_75)"
"((temp28_87)"
"(phase-"
"(phase+"
" phase_58"
" phase-shift_42)"
"(module-use-phase"
" mu_75))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances145.1))"
"(namespace-module-use->module+linklet-instances143.1"
" temp28_87"
" #f"
" #f"
" #f"
" #f"
" ns26_85"
" mu27_86)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:96:9_84"
" keyword-procedure-extract"
" '(#:phase-shift)"
" 4)"
" '(#:phase-shift)"
"(list"
" temp28_87)"
" ns26_85"
" mu27_86))))))"
"(values"
"(cons"
" mis24_82"
" mis_78)"
"(cons"
" is25_83"
" is_79))))))"
"(values"
" mis_80"
" is_81)))))"
"(if #t"
"(for-loop_71"
" mis_76"
" is_77"
"(unsafe-cdr"
" lst_74))"
"(values"
" mis_76"
" is_77)))"
"(values"
" mis_72"
" is_73)))"
"(values"
" mis_72"
" is_73)))))"
" for-loop_71)"
" null"
" null"
" lst_70)))))"
"(values"
"(alt-reverse"
" mis_68)"
"(alt-reverse"
" is_69)))))"
"(let-values(((phase-ns_65)"
"(namespace->namespace-at-phase"
" ns_35"
"(phase+"
" phase_58"
" phase-shift_42))))"
"(let-values(((inst_66)"
"(if single-expression?_36"
" link-instance_39"
"(let-values(((...xpander/eval/top.rkt:106:22_88)"
" make-instance-instance13.1)"
"((phase-ns29_89)"
" phase-ns_65)"
"((phase-shift30_90)"
" phase-shift_42)"
"((temp31_91)"
"(namespace-mpi"
" ns_35))"
"((temp32_92)"
"(namespace-inspector"
" ns_35))"
"((temp33_93)"
"(lambda(name_94"
" val_95)"
"(namespace-set-transformer!"
" ns_35"
"(phase+"
"(sub1"
" phase_58)"
" phase-shift_42)"
" name_94"
" val_95))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-instance-instance13.1))"
"(make-instance-instance11.1"
" temp32_92"
" phase-ns29_89"
" phase-shift30_90"
" temp31_91"
" temp33_93)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:106:22_88"
" keyword-procedure-extract"
" '(#:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
" 2)"
" '(#:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
"(list"
" temp32_92"
" phase-ns29_89"
" phase-shift30_90"
" temp31_91"
" temp33_93)))))))"
"(let-values(((linklet_67)"
"(hash-ref"
" h_38"
" phase_58"
" #f)))"
"(if linklet_67"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:121:7_97)"
" check-require-access11.1)"
"((linklet34_98)"
" linklet_67)"
"((temp35_99)"
" 3)"
"((module-uses36_100)"
" module-uses_62)"
"((import-module-instances37_101)"
" import-module-instances_63)"
"((temp38_102)"
"(current-code-inspector))"
"((extra-inspector39_103)"
" extra-inspector_43)"
"((temp40_104)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_44"
" phase_58"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp35_99"
" linklet34_98"
" module-uses36_100"
" import-module-instances37_101"
" temp38_102"
" extra-inspector39_103"
" temp40_104)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:121:7_97"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp35_99)"
" linklet34_98"
" module-uses36_100"
" import-module-instances37_101"
" temp38_102"
" extra-inspector39_103"
" temp40_104)))"
"(values))))"
"(let-values(((instantiate_96)"
"(lambda()"
"(1/instantiate-linklet"
" linklet_67"
"(list*"
" top-level-instance"
" link-instance_39"
" inst_66"
" import-instances_64)"
"(namespace->instance"
" ns_35"
"(phase+"
" phase_58"
" phase-shift_42))))))"
"(if(eqv?"
" phase_58"
" orig-phase_40)"
"(let-values()"
"(if(zero-phase?"
" phase_58)"
" instantiate_96"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_65)"
"(let-values()"
"(instantiate_96))))))"
"(let-values()"
" instantiate_96)))))"
"(let-values()"
" void)))))))))))"
"(values prev-thunk_61)))))"
"(if #t"
"(for-loop_55 prev-thunk_59(+ pos_57 inc_54))"
" prev-thunk_59))"
" prev-thunk_56))"
" prev-thunk_56))))"
" for-loop_55)"
" void"
" start_52)))))))))))))))))))"
"(define-values"
"(unpack12.1$1)"
"(lambda(given-kws_105 given-args_106 c9_107 ns10_108)"
"(let-values(((single-expression?8_109)(pair? given-kws_105)))"
"(let-values(((single-expression?7_110)(if single-expression?8_109(car given-args_106)(void))))"
"(eval-one-top11.1 single-expression?7_110 single-expression?8_109 c9_107 ns10_108)))))"
"(define-values"
"(eval-one-top13.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_111 given-argc_112)"
"(if(= given-argc_112 4)"
"(let-values(((l1_113) given-kws_111))"
"(let-values(((l1_114)"
"(if(null? l1_113) l1_113(if(eq?(car l1_113) '#:single-expression?)(cdr l1_113) l1_113))))"
"(null? l1_114)))"
" #f))"
"(case-lambda((given-kws_115 given-args_116 c_117 ns_118)(unpack12.1$1 given-kws_115 given-args_116 c_117 ns_118)))"
" null"
" '(#:single-expression?)"
"(let-values(((eval-one-top_119)(case-lambda((c_120 ns_121)(unpack12.1$1 null null c_120 ns_121)))))"
" eval-one-top_119)))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_122)"
"(1/make-instance"
" 'link"
" #f"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_122)"
" syntax-literalss-id"
"(compiled-in-memory-syntax-literalss cim_122))))"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(add-binding-in-scopes!"
"(syntax-scope-set runtime-stx 0)"
" sym_1"
"(let-values(((runtime-mpi1_2) runtime-mpi)((temp2_3) 0)((sym3_4) sym_1))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1 #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f runtime-mpi1_2 temp2_3 sym3_4)"
"(make-module-binding22.1 runtime-mpi1_2 temp2_3 sym3_4))))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(define-values"
"(lifted/1.1$11)"
"(make-required"
" 'select-defined-syms-and-bind!"
"(case-lambda"
"((self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7)"
"(apply missing-kw self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7 null)))"
" #f"
" #f))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_8"
" as-transformer?10_9"
" frame-id1_10"
" in4_11"
" in9_12"
" requires+provides3_13"
" requires+provides8_14"
" top-level-bind-scope2_15"
" top-level-bind-scope7_16"
" ids11_17"
" defined-syms12_18"
" self13_19"
" phase14_20"
" all-scopes-stx15_21)"
"(let-values(((ids_22) ids11_17))"
"(let-values(((defined-syms_23) defined-syms12_18))"
"(let-values(((self_24) self13_19))"
"(let-values(((phase_25) phase14_20))"
"(let-values(((all-scopes-stx_26) all-scopes-stx15_21))"
"(let-values(((frame-id_27) frame-id1_10))"
"(let-values(((top-level-bind-scope_28)(if top-level-bind-scope7_16 top-level-bind-scope2_15 #f)))"
"(let-values(((requires+provides_29)(if requires+provides8_14 requires+provides3_13 #f)))"
"(let-values(((orig-s_30)(if in9_12 in4_11 #f)))"
"(let-values(((as-transformer?_31)(if as-transformer?10_9 as-transformer?5_8 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_32)"
"(let-values(((or-part_33)(hash-ref defined-syms_23 phase_25 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((ht_34)(make-hasheq)))"
"(begin(hash-set! defined-syms_23 phase_25 ht_34) ht_34))))))"
"(alt-reverse"
"(let-values(((lst_35) ids_22))"
"(begin"
"(if(list? lst_35)(void)(let-values()(in-list lst_35)))"
"((letrec-values(((for-loop_36)"
"(lambda(fold-var_37 lst_38)"
"(if(pair? lst_38)"
"(let-values(((id_39)(unsafe-car lst_38)))"
"(if #t"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_37))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_43)"
"(syntax-e$1"
" id_39)))"
"(let-values(((defined-sym_44)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_32"
" sym_43"
" #f)"
" id_39"
" phase_25"
" top-level-bind-scope_28))"
"(no-extra-scopes?"
" id_39"
" all-scopes-stx_26"
" top-level-bind-scope_28"
" phase_25)"
" #f)"
" sym_43"
"((letrec-values(((loop_46)"
"(lambda(pos_47)"
"(let-values(((s_48)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                    \"~a.~a\""
" sym_43"
" pos_47))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_32"
" s_48"
" #f)"
" id_39"
" phase_25"
" top-level-bind-scope_28)"
"(loop_46"
"(add1"
" pos_47))"
" s_48)))))"
" loop_46)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_32"
" defined-sym_44"
" id_39)"
"(values))))"
"(let-values(((b_45)"
"(let-values(((...er/expand/def-id.rkt:61:14_49)"
" make-module-binding22.1)"
"((self23_50)"
" self_24)"
"((phase24_51)"
" phase_25)"
"((defined-sym25_52)"
" defined-sym_44)"
"((frame-id26_53)"
" frame-id_27))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" frame-id26_53"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self23_50"
" phase24_51"
" defined-sym25_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:61:14_49"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list"
" frame-id26_53)"
" self23_50"
" phase24_51"
" defined-sym25_52)))))"
"(begin"
"(if requires+provides_29"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:63:6_54)"
" remove-required-id!43.1)"
"((requires+provides27_55)"
" requires+provides_29)"
"((id28_56)"
" id_39)"
"((phase29_57)"
" phase_25)"
"((b30_58)"
" b_45))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!43.1))"
"(remove-required-id!41.1"
" b30_58"
" requires+provides27_55"
" id28_56"
" phase29_57)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:63:6_54"
" keyword-procedure-extract"
" '(#:unless-matches)"
" 5)"
" '(#:unless-matches)"
"(list"
" b30_58)"
" requires+provides27_55"
" id28_56"
" phase29_57))))"
"(void))"
"(let-values(((...er/expand/def-id.rkt:64:4_59)"
" add-binding!17.1)"
"((id19_60)"
" id_39)"
"((b20_61)"
" b_45)"
"((phase21_62)"
" phase_25)"
"((orig-s22_63)"
" orig-s_30))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" orig-s22_63"
" #t"
" id19_60"
" b20_61"
" phase21_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:64:4_59"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s22_63)"
" id19_60"
" b20_61"
" phase21_62)))"
"(if requires+provides_29"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:66:6_64)"
" add-defined-or-required-id!13.1)"
"((requires+provides31_65)"
" requires+provides_29)"
"((id32_66)"
" id_39)"
"((phase33_67)"
" phase_25)"
"((b34_68)"
" b_45)"
"((as-transformer?35_69)"
" as-transformer?_31))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!13.1))"
"(add-defined-or-required-id!11.1"
" as-transformer?35_69"
" #f"
" #f"
" requires+provides31_65"
" id32_66"
" phase33_67"
" b34_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:66:6_64"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 6)"
" '(#:as-transformer?)"
"(list"
" as-transformer?35_69)"
" requires+provides31_65"
" id32_66"
" phase33_67"
" b34_68))))"
"(void))"
" defined-sym_44))))))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(if #t"
"(for-loop_36 fold-var_40(unsafe-cdr lst_38))"
" fold-var_40))"
" fold-var_37))"
" fold-var_37))))"
" for-loop_36)"
" null"
" lst_35))))))))))))))))))"
"(define-values"
"(unpack17.1)"
"(lambda(given-kws_70 given-args_71 ids11_72 defined-syms12_73 self13_74 phase14_75 all-scopes-stx15_76)"
"(let-values(((as-transformer?10_77)(if(pair? given-kws_70)(eq? '#:as-transformer?(car given-kws_70)) #f)))"
"(let-values(((as-transformer?5_78)(if as-transformer?10_77(car given-args_71)(void)))"
"((given-kws_79)(if as-transformer?10_77(cdr given-kws_70) given-kws_70))"
"((given-args_80)(if as-transformer?10_77(cdr given-args_71) given-args_71)))"
"(let-values(((frame-id1_81)(car given-args_80))"
"((given-kws_82)(cdr given-kws_79))"
"((given-args_83)(cdr given-args_80)))"
"(let-values(((in9_84)(if(pair? given-kws_82)(eq? '#:in(car given-kws_82)) #f)))"
"(let-values(((in4_85)(if in9_84(car given-args_83)(void)))"
"((given-kws_86)(if in9_84(cdr given-kws_82) given-kws_82))"
"((given-args_87)(if in9_84(cdr given-args_83) given-args_83)))"
"(let-values(((requires+provides8_88)"
"(if(pair? given-kws_86)(eq? '#:requires+provides(car given-kws_86)) #f)))"
"(let-values(((requires+provides3_89)(if requires+provides8_88(car given-args_87)(void)))"
"((given-kws_90)(if requires+provides8_88(cdr given-kws_86) given-kws_86))"
"((given-args_91)(if requires+provides8_88(cdr given-args_87) given-args_87)))"
"(let-values(((top-level-bind-scope7_92)(pair? given-kws_90)))"
"(let-values(((top-level-bind-scope2_93)(if top-level-bind-scope7_92(car given-args_91)(void))))"
"(select-defined-syms-and-bind!16.1"
" as-transformer?5_78"
" as-transformer?10_77"
" frame-id1_81"
" in4_85"
" in9_84"
" requires+provides3_89"
" requires+provides8_88"
" top-level-bind-scope2_93"
" top-level-bind-scope7_92"
" ids11_72"
" defined-syms12_73"
" self13_74"
" phase14_75"
" all-scopes-stx15_76))))))))))))"
"(define-values"
"(select-defined-syms-and-bind!18.1)"
"(lifted/1.1$11"
"(lambda(given-kws_94 given-argc_95)"
"(if(= given-argc_95 7)"
"(subsets?"
" '(#:frame-id)"
" given-kws_94"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope))"
" #f))"
"(case-lambda"
"((given-kws_96 given-args_97 ids_98 defined-syms_99 self_100 phase_101 all-scopes-stx_102)"
"(unpack17.1 given-kws_96 given-args_97 ids_98 defined-syms_99 self_100 phase_101 all-scopes-stx_102)))"
" '(#:frame-id)"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope)))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_103 all-scopes-stx_104 top-level-bind-scope_105 phase_106)"
"(let-values(((m-id_107)(datum->syntax$1 all-scopes-stx_104(syntax-e$1 id_103))))"
"(let-values(((or-part_108)(bound-identifier=?$1 id_103 m-id_107 phase_106)))"
"(if or-part_108"
" or-part_108"
"(if top-level-bind-scope_105"
"(bound-identifier=?$1 id_103(add-scope m-id_107 top-level-bind-scope_105) phase_106)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_109 id_110 phase_111 top-level-bind-scope_112)"
"(if prev-id_109"
"(if(not(bound-identifier=?$1 prev-id_109 id_110 phase_111))"
"(let-values(((or-part_113)(not top-level-bind-scope_112)))"
"(if or-part_113"
" or-part_113"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_109 top-level-bind-scope_112)"
"(remove-scope id_110 top-level-bind-scope_112)"
" phase_111))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_114 ctx_115)"
"(let-values(((...er/expand/def-id.rkt:86:2_116) select-defined-syms-and-bind!18.1)"
"((tl-ids36_117) tl-ids_114)"
"((temp37_118)(root-expand-context-defined-syms ctx_115))"
"((temp38_119)(namespace-mpi(expand-context-namespace ctx_115)))"
"((temp39_120)(expand-context-phase ctx_115))"
"((temp40_121)(root-expand-context-all-scopes-stx ctx_115))"
"((temp41_122)(root-expand-context-frame-id ctx_115))"
"((temp42_123)(root-expand-context-top-level-bind-scope ctx_115)))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp41_122"
" #f"
" #f"
" #f"
" #f"
" temp42_123"
" #t"
" tl-ids36_117"
" temp37_118"
" temp38_119"
" temp39_120"
" temp40_121)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:86:2_116"
" keyword-procedure-extract"
" '(#:frame-id #:top-level-bind-scope)"
" 7)"
" '(#:frame-id #:top-level-bind-scope)"
"(list temp41_122 temp42_123)"
" tl-ids36_117"
" temp37_118"
" temp38_119"
" temp39_120"
" temp40_121)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_124 phase_125 sym_126 id_127)"
"(let-values(((defined-syms-at-phase_128)"
"(let-values(((or-part_129)(hash-ref defined-syms_124 phase_125 #f)))"
"(if or-part_129"
" or-part_129"
"(let-values(((ht_130)(make-hasheq)))"
"(begin(hash-set! defined-syms_124 phase_125 ht_130) ht_130))))))"
"(hash-set! defined-syms-at-phase_128 sym_126 id_127))))"
"(define-values(box-cons!)(lambda(b_2 v_3)(set-box! b_2(cons v_3(unbox b_2)))))"
"(define-values(box-clear!)(lambda(b_4)(begin0(alt-reverse(unbox b_4))(set-box! b_4 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 0 'convert)"
"(make-struct-field-accessor -ref_8 1 'lifts)"
"(make-struct-field-accessor -ref_8 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-rhs)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(make-struct-type 'lifted-bind #f 2 0 #f null(current-inspector) #f '(0 1) #f 'lifted-bind)))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'ids)"
"(make-struct-field-accessor -ref_39 1 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_62 module*-ok?4_63 convert5_64)"
"(let-values(((convert_65) convert5_64))"
"(let-values(((module*-ok?_66)(if module*-ok?4_63 module*-ok?3_62 #f)))"
"(let-values()(lift-context1.1 convert_65(box null) module*-ok?_66))))))"
"(define-values"
"(unpack7.1$1)"
"(lambda(given-kws_67 given-args_68 convert5_69)"
"(let-values(((module*-ok?4_70)(pair? given-kws_67)))"
"(let-values(((module*-ok?3_71)(if module*-ok?4_70(car given-args_68)(void))))"
"(make-lift-context6.1 module*-ok?3_71 module*-ok?4_70 convert5_69)))))"
"(define-values"
"(make-lift-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_72 given-argc_73)"
"(if(= given-argc_73 3)"
"(let-values(((l1_74) given-kws_72))"
"(let-values(((l1_75)(if(null? l1_74) l1_74(if(eq?(car l1_74) '#:module*-ok?)(cdr l1_74) l1_74))))"
"(null? l1_75)))"
" #f))"
"(case-lambda((given-kws_76 given-args_77 convert_78)(unpack7.1$1 given-kws_76 given-args_77 convert_78)))"
" null"
" '(#:module*-ok?)"
"(let-values(((make-lift-context_79)(case-lambda((convert_80)(unpack7.1$1 null null convert_80)))))"
" make-lift-context_79)))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_81 ids_82 rhs_83 phase_84)"
"(let-values(((lifted-ids_85 lifted_86)((lift-context-convert lifts_81) ids_82 rhs_83 phase_84)))"
"(begin(box-cons!(lift-context-lifts lifts_81) lifted_86) lifted-ids_85))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_87)(box-clear!(lift-context-lifts lifts_87))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_88 counter_89)"
"(lambda(ids_90 rhs_91 phase_92)"
"(begin"
"(let-values(((lst_93) ids_90))"
"(begin"
"(if(list? lst_93)(void)(let-values()(in-list lst_93)))"
"((letrec-values(((for-loop_94)"
"(lambda(fold-var_95 lst_96)"
"(if(pair? lst_96)"
"(let-values(((id_97)(unsafe-car lst_96)))"
"(if #t"
"(let-values(((fold-var_98)"
"(let-values(((fold-var_99) fold-var_95))"
"(let-values(((fold-var_100)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((key_101)"
"(let-values(((id31_102) id_97)"
"((phase32_103)"
" phase_92)"
"((counter33_104)"
" counter_89))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" #f"
" #f"
" id31_102"
" phase32_103"
" counter33_104)"
"(add-local-binding!35.1"
" id31_102"
" phase32_103"
" counter33_104)))))"
"(set-box!"
" lift-env_88"
"(hash-set"
"(unbox lift-env_88)"
" key_101"
" variable))))"
"(void)))))"
"(values fold-var_100)))))"
"(if #t(for-loop_94 fold-var_98(unsafe-cdr lst_96)) fold-var_98))"
" fold-var_95))"
" fold-var_95))))"
" for-loop_94)"
"(void)"
" lst_93)))"
"(values ids_90(lifted-bind2.1 ids_90 rhs_91))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_105)"
"(lambda(ids_106 rhs_107 phase_108)"
"(let-values(((post-scope_109)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_105)))))"
"(let-values(((tl-ids_110)"
"(alt-reverse"
"(let-values(((lst_111) ids_106))"
"(begin"
"(if(list? lst_111)(void)(let-values()(in-list lst_111)))"
"((letrec-values(((for-loop_112)"
"(lambda(fold-var_113 lst_114)"
"(if(pair? lst_114)"
"(let-values(((id_115)(unsafe-car lst_114)))"
"(if #t"
"(let-values(((fold-var_116)"
"(let-values(((fold-var_117) fold-var_113))"
"(let-values(((fold-var_118)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_115"
" post-scope_109))"
" fold-var_117))))"
"(values fold-var_118)))))"
"(if #t"
"(for-loop_112 fold-var_116(unsafe-cdr lst_114))"
" fold-var_116))"
" fold-var_113))"
" fold-var_113))))"
" for-loop_112)"
" null"
" lst_111))))))"
"(begin"
"(select-defined-syms-and-bind!/ctx tl-ids_110 ctx_105)"
"(values tl-ids_110(lifted-bind2.1 tl-ids_110 rhs_107))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_119 body_120 s_121 phase_122)"
"(datum->syntax$1"
" #f"
"(let-values(((lst_123)(alt-reverse lifts_119)))"
"(begin"
"(if(list? lst_123)(void)(let-values()(in-list lst_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(body_125 lst_126)"
"(if(pair? lst_126)"
"(let-values(((lift_127)(unsafe-car lst_126)))"
"(if #t"
"(let-values(((body_128)"
"(let-values(((body_129) body_125))"
"(let-values(((body_130)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_127)"
"(void)"
"(let-values()"
"                                                                         (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_122)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_127)"
"(lifted-bind-rhs lift_127)))"
" body_129)))))"
"(values body_130)))))"
"(if #t(for-loop_124 body_128(unsafe-cdr lst_126)) body_128))"
" body_125))"
" body_125))))"
" for-loop_124)"
" body_120"
" lst_123))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_131 adjust-form10_132 lifts11_133 body12_134 s13_135 phase14_136)"
"(let-values(((lifts_137) lifts11_133))"
"(let-values(((body_138) body12_134))"
"(let-values(((s_139) s13_135))"
"(let-values(((phase_140) phase14_136))"
"(let-values(((adjust-form_141)(if adjust-form10_132 adjust-form9_131 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_140) 'begin)"
"(append"
"(alt-reverse"
"(let-values(((lst_142) lifts_137))"
"(begin"
"(if(list? lst_142)(void)(let-values()(in-list lst_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(fold-var_144 lst_145)"
"(if(pair? lst_145)"
"(let-values(((lift_146)(unsafe-car lst_145)))"
"(if #t"
"(let-values(((fold-var_147)"
"(let-values(((fold-var_148) fold-var_144))"
"(let-values(((fold-var_149)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_141"
"(if(lifted-bind? lift_146)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_140)"
" 'define-values)"
"(lifted-bind-ids lift_146)"
"(lifted-bind-rhs"
" lift_146))))"
"(let-values() lift_146))))"
" fold-var_148))))"
"(values fold-var_149)))))"
"(if #t"
"(for-loop_143 fold-var_147(unsafe-cdr lst_145))"
" fold-var_147))"
" fold-var_144))"
" fold-var_144))))"
" for-loop_143)"
" null"
" lst_142))))"
"(list body_138))))))))))))"
"(define-values"
"(unpack16.1$1)"
"(lambda(given-kws_150 given-args_151 lifts11_152 body12_153 s13_154 phase14_155)"
"(let-values(((adjust-form10_156)(pair? given-kws_150)))"
"(let-values(((adjust-form9_157)(if adjust-form10_156(car given-args_151)(void))))"
"(wrap-lifts-as-begin15.1 adjust-form9_157 adjust-form10_156 lifts11_152 body12_153 s13_154 phase14_155)))))"
"(define-values"
"(wrap-lifts-as-begin17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_158 given-argc_159)"
"(if(= given-argc_159 6)"
"(let-values(((l1_160) given-kws_158))"
"(let-values(((l1_161)(if(null? l1_160) l1_160(if(eq?(car l1_160) '#:adjust-form)(cdr l1_160) l1_160))))"
"(null? l1_161)))"
" #f))"
"(case-lambda"
"((given-kws_162 given-args_163 lifts_164 body_165 s_166 phase_167)"
"(unpack16.1$1 given-kws_162 given-args_163 lifts_164 body_165 s_166 phase_167)))"
" null"
" '(#:adjust-form)"
"(let-values(((wrap-lifts-as-begin_168)"
"(case-lambda"
"((lifts_169 body_170 s_171 phase_172)(unpack16.1$1 null null lifts_169 body_170 s_171 phase_172)))))"
" wrap-lifts-as-begin_168)))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_173 make-_174 ?_175 -ref_176 -set!_177)"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))"
"(values"
" struct:_173"
" make-_174"
" ?_175"
"(make-struct-field-accessor -ref_176 0 'wrt-phase)"
"(make-struct-field-accessor -ref_176 1 'lifts)"
"(make-struct-field-accessor -ref_176 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_204 module*-ok?_205)(module-lift-context18.1 phase_204(box null) module*-ok?_205)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_206)(box-clear!(module-lift-context-lifts module-lifts_206))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_207 s_208 phase_209)"
"(begin"
"(if(let-values(((or-part_210)"
"(if(module-lift-context? module-lifts_207)"
"(module-lift-context-module*-ok? module-lifts_207)"
" #f)))"
"(if or-part_210"
" or-part_210"
"(if(lift-context? module-lifts_207)(lift-context-module*-ok? module-lifts_207) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_211)(core-form-sym s_208 phase_209)))"
"(if(equal? tmp_211 'module)"
"(let-values()(void))"
"(if(equal? tmp_211 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_208))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_208)))))))"
"(if(module-lift-context? module-lifts_207)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_207) s_208))"
"(if(lift-context? module-lifts_207)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_207) s_208))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_212 make-_213 ?_214 -ref_215 -set!_216)"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))"
"(values"
" struct:_212"
" make-_213"
" ?_214"
"(make-struct-field-accessor -ref_215 0 'do-require)"
"(make-struct-field-accessor -ref_215 1 'wrt-phase)"
"(make-struct-field-accessor -ref_215 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_243 do-require_244)(require-lift-context19.1 do-require_244 wrt-phase_243(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_245)(box-clear!(require-lift-context-requires require-lifts_245))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_246 s_247 phase_248)"
"(begin"
"((require-lift-context-do-require require-lifts_246) s_247 phase_248)"
"(box-cons!(require-lift-context-requires require-lifts_246) s_247))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_249 make-_250 ?_251 -ref_252 -set!_253)"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))"
"(values"
" struct:_249"
" make-_250"
" ?_251"
"(make-struct-field-accessor -ref_252 0 'wrt-phase)"
"(make-struct-field-accessor -ref_252 1 'provides)"
"(make-struct-field-accessor -ref_252 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_252 3 'ends))))"
"(define-values"
"(lifted/1.1$10)"
"(make-required"
" 'make-to-module-lift-context"
"(case-lambda((self_285 phase_286)(apply missing-kw self_285 phase_286 null)))"
" #f"
" #f))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_287 shared-module-ends21_288 phase25_289)"
"(let-values(((phase_290) phase25_289))"
"(let-values(((ends_291) shared-module-ends21_288))"
"(let-values(((end-as-expressions?_292) end-as-expressions?22_287))"
"(let-values()(to-module-lift-context20.1 phase_290(box null) end-as-expressions?_292 ends_291)))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_293 given-args_294 phase25_295)"
"(let-values(((end-as-expressions?22_296)(car given-args_294))"
"((given-kws_297)(cdr given-kws_293))"
"((given-args_298)(cdr given-args_294)))"
"(let-values(((shared-module-ends21_299)(car given-args_298)))"
"(make-to-module-lift-context26.1 end-as-expressions?22_296 shared-module-ends21_299 phase25_295)))))"
"(define-values"
"(make-to-module-lift-context28.1)"
"(lifted/1.1$10"
"(lambda(given-kws_300 given-argc_301)"
"(if(= given-argc_301 3)"
"(let-values(((l2_302) given-kws_300))"
"(if(pair? l2_302)"
"(if(eq?(car l2_302) '#:end-as-expressions?)"
"(let-values(((l2_303)(cdr l2_302)))"
"(if(pair? l2_303)(if(eq?(car l2_303) '#:shared-module-ends)(null?(cdr l2_303)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_304 given-args_305 phase_306)(unpack27.1 given-kws_304 given-args_305 phase_306)))"
" '(#:end-as-expressions? #:shared-module-ends)"
" '(#:end-as-expressions? #:shared-module-ends)))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_307)(box-clear!(to-module-lift-context-ends to-module-lifts_307))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_308)(box-clear!(to-module-lift-context-provides to-module-lifts_308))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_309 s_310 phase_311)"
"(box-cons!(to-module-lift-context-provides to-module-lifts_309) s_310)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_312 s_313 phase_314)(box-cons!(to-module-lift-context-ends to-module-lifts_312) s_313)))"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-all-scopes-stx)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'already-expanded #f 2 0 #f null(current-inspector) #f '(0 1) #f 'already-expanded)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'all-scopes-stx))))"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))"
"(values struct:_1 make-_2 ?_3)))"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values(((lst_3) v_1))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((result_8)"
"(let-values(((result_9) result_5))"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_10)))))"
"(if(if #t(not((lambda x_11(not result_8)) s_7)) #f)"
"(for-loop_4 result_8(unsafe-cdr lst_6))"
" result_8))"
" result_5))"
" result_5))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_12 ctx_13)"
"(if(expansion-contexts? t_12)"
"(not(memq(context->symbol(expand-context-context ctx_13))(expansion-contexts-ref t_12)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_14)(if(symbol? context_14) context_14 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_15 t_16 ctx_17)"
"(let-values(((wrap_18)"
"(lambda(sym_20)"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_20)(expand-context-phase ctx_17))"
" s_15)))))"
"(let-values(((fail_19)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_17)))"
" s_15))))"
"(let-values(((tmp_21)(context->symbol(expand-context-context ctx_17))))"
"(if(equal? tmp_21 'module-begin)"
"(let-values()(wrap_18 'begin))"
"(if(if(equal? tmp_21 'module) #t(if(equal? tmp_21 'top-level) #t(equal? tmp_21 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_16))(wrap_18 '#%expression)(fail_19)))"
"(let-values()(fail_19)))))))))"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_32 key_33)"
"(if(set-member?(reference-record-already-bound rr_32) key_33)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_32"
"(set-add(reference-record-reference-before-bound rr_32) key_33))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_34)"
"(let-values(((stop?_35 fold-var_36)"
"(let-values(((lst_37) rrs_34))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(stop-after?_39 fold-var_40 lst_41)"
"(if(pair? lst_41)"
"(let-values(((rr_42)(unsafe-car lst_41)))"
"(if #t"
"(let-values(((stop-after?_43 fold-var_44)"
"(let-values(((stop-after?_45) stop-after?_39)"
"((fold-var_46) fold-var_40))"
"(if #t"
"(let-values(((stop?_47)"
"(reference-record-all-referenced?"
" rr_42)))"
"(begin"
" #t"
"((letrec-values(((for-loop_48)"
"(lambda(stop-after?_49"
" fold-var_50)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((stop-after?_51"
" fold-var_52)"
"(let-values(((stop-after?_53)"
" stop-after?_49)"
"((fold-var_54)"
" fold-var_50))"
"(if #t"
"(let-values(((stop-after?_55)"
"(let-values(((or-part_56)"
" stop-after?_53))"
"(if or-part_56"
" or-part_56"
" stop?_47))))"
"(begin"
" #t"
"((letrec-values(((for-loop_57)"
"(lambda(stop-after?_58"
" fold-var_59)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((stop-after?_60"
" fold-var_61)"
"(let-values(((stop-after?_62)"
" stop-after?_58)"
"((fold-var_63)"
" fold-var_59))"
"(if stop?_47"
"(values"
" stop-after?_62"
" fold-var_63)"
"(let-values(((stop-after?_64)"
" stop-after?_62)"
"((fold-var_65)"
" fold-var_63))"
"(let-values(((stop-after?_66"
" fold-var_67)"
"(let-values()"
"(let-values(((fold-var_68)"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?!"
" rr_42"
" #t))"
"(void)))))"
"(values"
" stop-after?_64"
" fold-var_68)))))"
"(values"
" stop-after?_66"
" fold-var_67)))))))"
"(if #f"
"(for-loop_57"
" stop-after?_60"
" fold-var_61)"
"(values"
" stop-after?_60"
" fold-var_61)))"
"(values"
" stop-after?_58"
" fold-var_59)))"
"(values"
" stop-after?_58"
" fold-var_59)))))"
" for-loop_57)"
" stop-after?_55"
" fold-var_54)))"
"(values"
" stop-after?_53"
" fold-var_54)))))"
"(if #f"
"(for-loop_48"
" stop-after?_51"
" fold-var_52)"
"(values"
" stop-after?_51"
" fold-var_52)))"
"(values"
" stop-after?_49"
" fold-var_50)))"
"(values"
" stop-after?_49"
" fold-var_50)))))"
" for-loop_48)"
" stop-after?_45"
" fold-var_46)))"
"(values stop-after?_45 fold-var_46)))))"
"(if(if #t(not((lambda x_69 stop-after?_43) rr_42)) #f)"
"(for-loop_38 stop-after?_43 fold-var_44(unsafe-cdr lst_41))"
"(values stop-after?_43 fold-var_44)))"
"(values stop-after?_39 fold-var_40)))"
"(values stop-after?_39 fold-var_40)))))"
" for-loop_38)"
" #f"
"(void)"
" lst_37)))))"
"(values fold-var_36))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_70 keys_71)"
"(begin"
"(set-reference-record-already-bound!"
" rr_70"
"(let-values(((lst_72) keys_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(ab_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((key_76)(unsafe-car lst_75)))"
"(if #t"
"(let-values(((ab_77)"
"(let-values(((ab_78) ab_74))"
"(let-values(((ab_79)(let-values()(set-add ab_78 key_76))))"
"(values ab_79)))))"
"(if #t(for-loop_73 ab_77(unsafe-cdr lst_75)) ab_77))"
" ab_74))"
" ab_74))))"
" for-loop_73)"
"(reference-record-already-bound rr_70)"
" lst_72))))"
"(set-reference-record-reference-before-bound!"
" rr_70"
"(let-values(((lst_80) keys_71))"
"(begin"
"(if(list? lst_80)(void)(let-values()(in-list lst_80)))"
"((letrec-values(((for-loop_81)"
"(lambda(rbb_82 lst_83)"
"(if(pair? lst_83)"
"(let-values(((key_84)(unsafe-car lst_83)))"
"(if #t"
"(let-values(((rbb_85)"
"(let-values(((rbb_86) rbb_82))"
"(let-values(((rbb_87)(let-values()(set-remove rbb_86 key_84))))"
"(values rbb_87)))))"
"(if #t(for-loop_81 rbb_85(unsafe-cdr lst_83)) rbb_85))"
" rbb_82))"
" rbb_82))))"
" for-loop_81)"
"(reference-record-reference-before-bound rr_70)"
" lst_80)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_88)"
"(let-values(((or-part_89)(reference-record-all-referenced? rr_88)))"
"(if or-part_89 or-part_89(positive?(set-count(reference-record-reference-before-bound rr_88)))))))"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() #f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((exit-check . 127)"
"(prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(exit-local-expr . 140)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-list . 5)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(enter-macro . 8)"
"(opaque-expr . 146)"
"(tag . 142)"
"(prim-if . 105)"
"(enter-local . 130)"
"(prim-define-values . 104)"
"(prim-submodule* . 159)"
"(block->letrec . 14)"
"(lift-provide . 151)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(prim-provide . 122)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(start-expand . 141)"
"(enter-block . 10)"
"(prim-module-begin . 102)"
"(letrec-syntaxes-renames . 19)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(prim-quote-syntax . 118)"
"(prim-let-values . 112)"
"(exit-bind . 145)"
"(module-body . 23)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(block-renames . 24)"
"(prim-quote . 117)"
"(enter-check . 126)"
"(block->list . 12)"
"(macro-pre-x . 21)"
"(prim-letrec-values . 113)"
"(prim-begin-for-syntax . 156)"
"(prim-set! . 123)"
"(local-bind . 143)"
"(local-pre . 132)"
"(prim-#%top . 116)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(lift-statement . 134)"
"(prim-begin . 107)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(enter-prim . 6)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(track-origin . 152)"
"(lift-loop . 128)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(prim-with-continaution-mark . 106)"
"(next . 3)"
"(prim-#%datum . 115)"
"(case-lambda-renames . 18)"
"(enter-list . 4)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(next-group . 13)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(exit-prim . 7)"
"(module-lift-loop . 137)"
"(visit . 0)"
"(resolve . 1)))"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_24 alternate-id2_25 s3_26 ctx4_27)"
"(let-values(((s_28) s3_26))"
"(let-values(((ctx_29) ctx4_27))"
"(let-values(((alternate-id_30)(if alternate-id2_25 alternate-id1_24 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_31)(expand-context-observer ctx_29)))"
"(if obs_31"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_31"
"(if(expand-context-only-immediate? ctx_29) 'enter-check 'visit)"
" s_28))"
"(void)))"
"(void)))"
"(if(identifier? s_28)"
"(let-values()(expand-identifier s_28 ctx_29 alternate-id_30))"
"(if(if(pair?(syntax-e/no-taint s_28))(identifier?(car(syntax-e/no-taint s_28))) #f)"
"(let-values()(expand-id-application-form s_28 ctx_29 alternate-id_30))"
"(if(let-values(((or-part_32)(pair?(syntax-e$1(syntax-disarm$1 s_28)))))"
"(if or-part_32 or-part_32(null?(syntax-e$1(syntax-disarm$1 s_28)))))"
"(let-values()(expand-implicit '#%app s_28 ctx_29 #f))"
"(if(already-expanded?(syntax-e/no-taint s_28))"
"(let-values()(expand-already-expanded s_28 ctx_29))"
"(let-values()(expand-implicit '#%datum s_28 ctx_29 #f)))))))))))))"
"(define-values"
"(unpack6.1)"
"(lambda(given-kws_33 given-args_34 s3_35 ctx4_36)"
"(let-values(((alternate-id2_37)(pair? given-kws_33)))"
"(let-values(((alternate-id1_38)(if alternate-id2_37(car given-args_34)(void))))"
"(expand5.1 alternate-id1_38 alternate-id2_37 s3_35 ctx4_36)))))"
"(define-values"
"(expand7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_39 given-argc_40)"
"(if(= given-argc_40 4)"
"(let-values(((l1_41) given-kws_39))"
"(let-values(((l1_42)(if(null? l1_41) l1_41(if(eq?(car l1_41) '#:alternate-id)(cdr l1_41) l1_41))))"
"(null? l1_42)))"
" #f))"
"(case-lambda((given-kws_43 given-args_44 s_45 ctx_46)(unpack6.1 given-kws_43 given-args_44 s_45 ctx_46)))"
" null"
" '(#:alternate-id)"
"(let-values(((expand_47)(case-lambda((s_48 ctx_49)(unpack6.1 null null s_48 ctx_49))))) expand_47)))"
"(define-values"
"(expand-identifier)"
"(lambda(s_50 ctx_51 alternate-id_52)"
"(let-values(((id_53)(let-values(((or-part_54) alternate-id_52))(if or-part_54 or-part_54 s_50))))"
"(if(free-id-set-member?(expand-context-stops ctx_51)(expand-context-phase ctx_51) id_53)"
"(let-values()"
"(begin"
"(let-values(((obs_55)(expand-context-observer ctx_51)))"
"(if obs_55"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_51))"
"(let-values()"
"(begin"
"(call-expand-observe obs_55 'enter-prim s_50)"
"(call-expand-observe obs_55 'prim-stop)"
"(call-expand-observe obs_55 'exit-prim s_50)"
"(call-expand-observe obs_55 'return s_50)))"
"(void)))"
"(void)))"
" s_50))"
"(let-values()"
"(let-values(((binding_56)"
"(let-values(((...nder/expand/main.rkt:84:19_57) resolve+shift15.1)"
"((id102_58) id_53)"
"((temp103_59)(expand-context-phase ctx_51))"
"((temp104_60) 'ambiguous)"
"((temp105_61) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp104_60 #t #f #f #f #f temp105_61 #t #f #f id102_58 temp103_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:84:19_57"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp104_60 temp105_61)"
" id102_58"
" temp103_59)))))"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_51)))"
"(if obs_62"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_51))"
"(let-values()(call-expand-observe obs_62 'resolve id_53))"
"(void)))"
"(void)))"
"(if(eq? binding_56 'ambiguous)"
"(let-values()(raise-ambiguous-error id_53 ctx_51))"
"(if(not binding_56)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_50 alternate-id_52) ctx_51 s_50))"
"(let-values()"
"(let-values(((t_63 insp-of-t_64)"
"(let-values(((...nder/expand/main.rkt:96:34_65) lookup17.1)"
"((binding106_66) binding_56)"
"((ctx107_67) ctx_51)"
"((id108_68) id_53)"
"((temp109_69)(if alternate-id_52 s_50 #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp109_69 #t #f #f binding106_66 ctx107_67 id108_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:96:34_65"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp109_69)"
" binding106_66"
" ctx107_67"
" id108_68)))))"
"(dispatch t_63 insp-of-t_64 s_50 id_53 ctx_51 binding_56))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_70 ctx_71 alternate-id_72)"
"(let-values(((disarmed-s_73)(syntax-disarm$1 s_70 #f)))"
"(let-values(((id_74)"
"(let-values(((or-part_75) alternate-id_72))"
"(if or-part_75 or-part_75(car(syntax-e$1 disarmed-s_73))))))"
"(if(free-id-set-member?(expand-context-stops ctx_71)(expand-context-phase ctx_71) id_74)"
"(let-values()"
"(begin"
"(let-values(((obs_76)(expand-context-observer ctx_71)))"
"(if obs_76"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_71))"
"(let-values()"
"(begin"
"(call-expand-observe obs_76 'enter-prim s_70)"
"(call-expand-observe obs_76 'prim-stop)"
"(call-expand-observe obs_76 'exit-prim s_70)"
"(call-expand-observe obs_76 'return s_70)))"
"(void)))"
"(void)))"
" s_70))"
"(let-values()"
"(let-values(((binding_77)"
"(let-values(((...nder/expand/main.rkt:105:19_78) resolve+shift15.1)"
"((id110_79) id_74)"
"((temp111_80)(expand-context-phase ctx_71))"
"((temp112_81) 'ambiguous)"
"((temp113_82) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp112_81 #t #f #f #f #f temp113_82 #t #f #f id110_79 temp111_80)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:105:19_78"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp112_81 temp113_82)"
" id110_79"
" temp111_80)))))"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_71)))"
"(if obs_83"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_71))"
"(let-values()(call-expand-observe obs_83 'resolve id_74))"
"(void)))"
"(void)))"
"(if(eq? binding_77 'ambiguous)"
"(let-values()(raise-ambiguous-error id_74 ctx_71))"
"(if(not binding_77)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_70 alternate-id_72) ctx_71 id_74))"
"(let-values()"
"(let-values(((t_84 insp-of-t_85)"
"(let-values(((...nder/expand/main.rkt:117:34_86) lookup17.1)"
"((binding114_87) binding_77)"
"((ctx115_88) ctx_71)"
"((id116_89) id_74)"
"((temp117_90)"
"(if alternate-id_72(car(syntax-e$1 disarmed-s_73)) #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp117_90 #t #f #f binding114_87 ctx115_88 id116_89)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:117:34_86"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp117_90)"
" binding114_87"
" ctx115_88"
" id116_89)))))"
"(if(variable? t_84)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_70 alternate-id_72) ctx_71 id_74))"
"(let-values()(dispatch t_84 insp-of-t_85 s_70 id_74 ctx_71 binding_77)))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_91 s_92 ctx_93 trigger-id_94)"
"(let-values(((disarmed-s_95)(syntax-disarm$1 s_92)))"
"(let-values(((id_96)(datum->syntax$1 disarmed-s_95 sym_91)))"
"(if(free-id-set-member?(expand-context-stops ctx_93)(expand-context-phase ctx_93) id_96)"
"(let-values()"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_93)))"
"(if obs_97"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_93))"
"(let-values()"
"(begin"
"(call-expand-observe obs_97 'enter-prim s_92)"
"(call-expand-observe obs_97 'prim-stop)"
"(call-expand-observe obs_97 'exit-prim s_92)"
"(call-expand-observe obs_97 'return s_92)))"
"(void)))"
"(void)))"
" s_92))"
"(let-values()"
"(let-values(((b_98)"
"(let-values(((...nder/expand/main.rkt:135:13_99) resolve+shift15.1)"
"((id118_100) id_96)"
"((temp119_101)(expand-context-phase ctx_93))"
"((temp120_102) 'ambiguous)"
"((temp121_103) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp120_102 #t #f #f #f #f temp121_103 #t #f #f id118_100 temp119_101)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:135:13_99"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp120_102 temp121_103)"
" id118_100"
" temp119_101)))))"
"(if(eq? b_98 'ambiguous)"
"(let-values()(raise-ambiguous-error id_96 ctx_93))"
"(let-values()"
"(let-values(((t_104 insp-of-t_105)"
"(if b_98"
"(let-values(((b122_106) b_98)((ctx123_107) ctx_93)((id124_108) id_96))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 #f #f #f #f b122_106 ctx123_107 id124_108)"
"(lookup17.1 b122_106 ctx123_107 id124_108)))"
"(values #f #f))))"
"(if(transformer? t_104)"
"(let-values()"
"(dispatch-transformer"
" t_104"
" insp-of-t_105"
"(make-explicit sym_91 s_92 disarmed-s_95)"
" id_96"
" ctx_93"
" b_98))"
"(if(expand-context-only-immediate? ctx_93)"
"(let-values()"
"(begin"
"(let-values(((obs_109)(expand-context-observer ctx_93)))"
"(if obs_109"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_109 'exit-check s_92))(void)))"
"(void)))"
" s_92))"
"(if(core-form? t_104)"
"(let-values()"
"(if(if(eq? sym_91 '#%top)"
"(if(eq?(core-form-name t_104) '#%top)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_93)"
" #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_104 s_92 ctx_93))"
"(let-values()"
"(dispatch-core-form t_104(make-explicit sym_91 s_92 disarmed-s_95) ctx_93))))"
"(let-values()(raise-syntax-implicit-error s_92 sym_91 trigger-id_94 ctx_93)))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_110 ctx_111)"
"(let-values(((ae_112)(syntax-e$1 s_110)))"
"(let-values((()"
"(begin"
"(if(bound-identifier=?$1"
"(root-expand-context-all-scopes-stx ctx_111)"
"(already-expanded-all-scopes-stx ae_112)"
"(expand-context-phase ctx_111))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_112))))"
"(values))))"
"(let-values(((result-s_113)(syntax-track-origin$1(already-expanded-s ae_112) s_110)))"
"(begin"
"(let-values(((obs_114)(expand-context-observer ctx_111)))"
"(if obs_114"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_114 'tag result-s_113)"
"(call-expand-observe obs_114 'opaque-expr result-s_113)))"
"(void)))"
"(void)))"
" result-s_113))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_115 s_116 disarmed-s_117)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_117(cons sym_115 disarmed-s_117) s_116 s_116) s_116)))"
"(define-values"
"(dispatch)"
"(lambda(t_118 insp-of-t_119 s_120 id_121 ctx_122 binding_123)"
"(if(core-form? t_118)"
"(let-values()(dispatch-core-form t_118 s_120 ctx_122))"
"(if(transformer? t_118)"
"(let-values()(dispatch-transformer t_118 insp-of-t_119 s_120 id_121 ctx_122 binding_123))"
"(if(variable? t_118)"
"(let-values()(dispatch-variable t_118 s_120 id_121 ctx_122 binding_123))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" t_118)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_124 s_125 ctx_126)"
"(if(expand-context-only-immediate? ctx_126)"
"(let-values()"
"(begin"
"(let-values(((obs_127)(expand-context-observer ctx_126)))"
"(if obs_127"
"(let-values()(if #t(let-values()(call-expand-observe obs_127 'exit-check s_125))(void)))"
"(void)))"
" s_125))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_129)(expand-context-observer ctx_126)))"
"(if obs_129"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_129 'enter-prim s_125))(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_128)((core-form-expander t_124) s_125 ctx_126)))"
"(begin"
"(let-values(((obs_130)(expand-context-observer ctx_126)))"
"(if obs_130"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_130 'exit-prim result-s_128)"
"(call-expand-observe obs_130 'return result-s_128)))"
"(void)))"
"(void)))"
" result-s_128)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_131 s_132 ctx_133)"
"(let-values((()"
"(begin"
"(let-values(((obs_135)(expand-context-observer ctx_133)))"
"(if obs_135"
"(let-values()(if #t(let-values()(call-expand-observe obs_135 'enter-prim s_132))(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_134)((core-form-expander t_131) s_132 ctx_133 #t)))"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_133)))"
"(if obs_136"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_136 'exit-prim result-s_134)"
"(call-expand-observe obs_136 'return result-s_134)))"
"(void)))"
"(void)))"
" result-s_134)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_137 insp-of-t_138 s_139 id_140 ctx_141 binding_142)"
"(if(not-in-this-expand-context? t_137 ctx_141)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_144)(expand-context-observer ctx_141)))"
"(if obs_144"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_144 'enter-macro s_139))(void)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_143)"
"(avoid-current-expand-context(substitute-alternate-id s_139 id_140) t_137 ctx_141)))"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_141)))"
"(if obs_145"
"(let-values()(if #t(let-values()(call-expand-observe obs_145 'exit-macro s_139))(void)))"
"(void)))"
"(let-values(((adj-s125_146) adj-s_143)((ctx126_147) ctx_141))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f adj-s125_146 ctx126_147)"
"(expand7.1 adj-s125_146 ctx126_147)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_150)(expand-context-observer ctx_141)))"
"(if obs_150"
"(let-values()"
"(if(expand-context-only-immediate? ctx_141)"
"(let-values()"
"(begin"
"(call-expand-observe obs_150 'visit s_139)"
"(call-expand-observe obs_150 'resolves id_140)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_148 re-ctx_149)"
"(apply-transformer t_137 insp-of-t_138 s_139 id_140 ctx_141 binding_142)))"
"(begin"
"(let-values(((obs_151)(expand-context-observer ctx_141)))"
"(if obs_151"
"(let-values()"
"(if(expand-context-only-immediate? ctx_141)"
"(let-values()(call-expand-observe obs_151 'return exp-s_148))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_141)"
"(let-values() exp-s_148)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:233:11_152) expand7.1)"
"((exp-s127_153) exp-s_148)"
"((re-ctx128_154) re-ctx_149)"
"((temp129_155)"
"(if(1/rename-transformer? t_137)(1/rename-transformer-target t_137) #f)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 temp129_155 #t exp-s127_153 re-ctx128_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:233:11_152"
" keyword-procedure-extract"
" '(#:alternate-id)"
" 4)"
" '(#:alternate-id)"
"(list temp129_155)"
" exp-s127_153"
" re-ctx128_154))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_156 s_157 id_158 ctx_159 binding_160)"
"(if(expand-context-only-immediate? ctx_159)"
"(let-values()"
"(begin"
"(let-values(((obs_161)(expand-context-observer ctx_159)))"
"(if obs_161"
"(let-values()(if #t(let-values()(call-expand-observe obs_161 'exit-check s_157))(void)))"
"(void)))"
" id_158))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_163)(expand-context-observer ctx_159)))"
"(if obs_163"
"(let-values()(if #t(let-values()(call-expand-observe obs_163 'variable s_157))(void)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_160)(values))))"
"(let-values(((result-s_162)"
"(let-values(((...nder/expand/main.rkt:248:21_164) substitute-variable8.1)"
"((id130_165) id_158)"
"((t131_166) t_156)"
"((temp132_167)(free-id-set-empty?(expand-context-stops ctx_159))))"
"(if(variable-reference-constant?(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1 temp132_167 id130_165 t131_166)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:248:21_164"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp132_167)"
" id130_165"
" t131_166)))))"
"(begin"
"(let-values(((obs_168)(expand-context-observer ctx_159)))"
"(if obs_168"
"(let-values()(if #t(let-values()(call-expand-observe obs_168 'return result-s_162))(void)))"
"(void)))"
" result-s_162))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_169 insp-of-t_170 s_171 id_172 ctx_173 binding_174)"
"(let-values((()"
"(begin"
"(let-values(((obs_187)(expand-context-observer ctx_173)))"
"(if obs_187"
"(let-values()(if #t(let-values()(call-expand-observe obs_187 'enter-macro s_171))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_175)(syntax-disarm$1 s_171)))"
"(let-values(((intro-scope_176)(new-scope 'macro)))"
"(let-values(((intro-s_177)(add-scope disarmed-s_175 intro-scope_176)))"
"(let-values(((use-s_178 use-scopes_179)(maybe-add-use-site-scope intro-s_177 ctx_173 binding_174)))"
"(let-values(((cleaned-s_180)(syntax-remove-taint-dispatch-properties use-s_178)))"
"(let-values(((def-ctx-scopes_181)(box null)))"
"(let-values(((transformed-s_182)"
"(apply-transformer-in-context"
" t_169"
" cleaned-s_180"
" ctx_173"
" insp-of-t_170"
" intro-scope_176"
" use-scopes_179"
" def-ctx-scopes_181"
" id_172)))"
"(let-values(((result-s_183)(flip-scope transformed-s_182 intro-scope_176)))"
"(let-values(((post-s_184)(maybe-add-post-expansion-scope result-s_183 ctx_173)))"
"(let-values(((tracked-s_185)(syntax-track-origin$1 post-s_184 cleaned-s_180 id_172)))"
"(let-values(((rearmed-s_186)"
"(taint-dispatch"
" tracked-s_185"
"(lambda(t-s_188)(syntax-rearm$1 t-s_188 s_171))"
"(expand-context-phase ctx_173))))"
"(begin"
"(let-values(((obs_189)(expand-context-observer ctx_173)))"
"(if obs_189"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_189 'exit-macro rearmed-s_186))"
"(void)))"
"(void)))"
"(values"
" rearmed-s_186"
"(accumulate-def-ctx-scopes ctx_173 def-ctx-scopes_181)))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_190 cleaned-s_191 ctx_192 insp-of-t_193 intro-scope_194 use-scopes_195 def-ctx-scopes_196 id_197)"
"(let-values((()"
"(begin"
"(let-values(((obs_200)(expand-context-observer ctx_192)))"
"(if obs_200"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_200 'macro-pre-x cleaned-s_191))(void)))"
"(void)))"
"(values))))"
"(let-values(((m-ctx_198)"
"(let-values(((the-struct_201) ctx_192))"
"(if(expand-context? the-struct_201)"
"(let-values(((current-introduction-scopes133_202)(cons intro-scope_194 use-scopes_195))"
"((def-ctx-scopes134_203) def-ctx-scopes_196))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_201)"
"(root-expand-context-post-expansion-scope the-struct_201)"
"(root-expand-context-top-level-bind-scope the-struct_201)"
"(root-expand-context-all-scopes-stx the-struct_201)"
"(root-expand-context-use-site-scopes the-struct_201)"
"(root-expand-context-defined-syms the-struct_201)"
"(root-expand-context-frame-id the-struct_201)"
"(root-expand-context-counter the-struct_201)"
"(root-expand-context-lift-key the-struct_201)"
"(expand-context-context the-struct_201)"
"(expand-context-phase the-struct_201)"
"(expand-context-namespace the-struct_201)"
"(expand-context-env the-struct_201)"
"(expand-context-post-expansion-scope-action the-struct_201)"
"(expand-context-scopes the-struct_201)"
" def-ctx-scopes134_203"
"(expand-context-reference-records the-struct_201)"
"(expand-context-only-immediate? the-struct_201)"
"(expand-context-just-once? the-struct_201)"
"(expand-context-module-begin-k the-struct_201)"
"(expand-context-need-eventually-defined the-struct_201)"
"(expand-context-allow-unbound? the-struct_201)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_201)"
"(expand-context-stops the-struct_201)"
" current-introduction-scopes133_202"
"(expand-context-declared-submodule-names the-struct_201)"
"(expand-context-lifts the-struct_201)"
"(expand-context-lift-envs the-struct_201)"
"(expand-context-module-lifts the-struct_201)"
"(expand-context-require-lifts the-struct_201)"
"(expand-context-to-module-lifts the-struct_201)"
"(expand-context-requires+provides the-struct_201)"
"(expand-context-name the-struct_201)"
"(expand-context-observer the-struct_201)))"
"                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_201)))))"
"(let-values(((transformed-s_199)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_198"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_192)"
"(add1(expand-context-phase ctx_192)))"
" current-module-code-inspector"
"(let-values(((or-part_204) insp-of-t_193))"
"(if or-part_204 or-part_204(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier(lambda()((transformer->procedure t_190) cleaned-s_191)))))))"
"(begin"
"(let-values(((obs_205)(expand-context-observer ctx_192)))"
"(if obs_205"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_205 'macro-post-x transformed-s_199))(void)))"
"(void)))"
"(if(syntax?$1 transformed-s_199)"
"(void)"
"(let-values()"
"(raise-argument-error"
"(syntax-e$1 id_197)"
"                 \"received value from syntax expander was not syntax\""
"                 \"received\""
" transformed-s_199)))"
" transformed-s_199))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_206 ctx_207 binding_208)"
"(if(if(root-expand-context-use-site-scopes ctx_207)"
"(if(root-expand-context-frame-id ctx_207)"
"(eq?(root-expand-context-frame-id ctx_207)(binding-frame-id binding_208))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((sc_209)(new-scope 'use-site)))"
"(let-values(((b_210)(root-expand-context-use-site-scopes ctx_207)))"
"(begin(set-box! b_210(cons sc_209(unbox b_210)))(values(add-scope s_206 sc_209)(list sc_209))))))"
"(let-values()(values s_206 null)))))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_211 ctx_212)"
"(if(root-expand-context-post-expansion-scope ctx_212)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_212) s_211(root-expand-context-post-expansion-scope ctx_212)))"
"(let-values() s_211))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_213 def-ctx-scopes_214)"
"(if(null?(unbox def-ctx-scopes_214))"
" ctx_213"
"(let-values(((the-struct_215) ctx_213))"
"(if(expand-context? the-struct_215)"
"(let-values(((scopes135_216)(append(unbox def-ctx-scopes_214)(expand-context-scopes ctx_213))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_215)"
"(root-expand-context-post-expansion-scope the-struct_215)"
"(root-expand-context-top-level-bind-scope the-struct_215)"
"(root-expand-context-all-scopes-stx the-struct_215)"
"(root-expand-context-use-site-scopes the-struct_215)"
"(root-expand-context-defined-syms the-struct_215)"
"(root-expand-context-frame-id the-struct_215)"
"(root-expand-context-counter the-struct_215)"
"(root-expand-context-lift-key the-struct_215)"
"(expand-context-context the-struct_215)"
"(expand-context-phase the-struct_215)"
"(expand-context-namespace the-struct_215)"
"(expand-context-env the-struct_215)"
"(expand-context-post-expansion-scope-action the-struct_215)"
" scopes135_216"
"(expand-context-def-ctx-scopes the-struct_215)"
"(expand-context-reference-records the-struct_215)"
"(expand-context-only-immediate? the-struct_215)"
"(expand-context-just-once? the-struct_215)"
"(expand-context-module-begin-k the-struct_215)"
"(expand-context-need-eventually-defined the-struct_215)"
"(expand-context-allow-unbound? the-struct_215)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_215)"
"(expand-context-stops the-struct_215)"
"(expand-context-current-introduction-scopes the-struct_215)"
"(expand-context-declared-submodule-names the-struct_215)"
"(expand-context-lifts the-struct_215)"
"(expand-context-lift-envs the-struct_215)"
"(expand-context-module-lifts the-struct_215)"
"(expand-context-require-lifts the-struct_215)"
"(expand-context-to-module-lifts the-struct_215)"
"(expand-context-requires+provides the-struct_215)"
"(expand-context-name the-struct_215)"
"(expand-context-observer the-struct_215)))"
"          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_215))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_217"
" in10_218"
" out-of-context-as-variable?9_219"
" out-of-context-as-variable?11_220"
" b12_221"
" ctx13_222"
" id14_223)"
"(let-values(((b_224) b12_221))"
"(let-values(((ctx_225) ctx13_222))"
"(let-values(((id_226) id14_223))"
"(let-values(((in-s_227)(if in10_218 in8_217 #f)))"
"(let-values(((out-of-context-as-variable?_228)"
"(if out-of-context-as-variable?11_220 out-of-context-as-variable?9_219 #f)))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:361:2_229) binding-lookup48.1)"
"((b136_230) b_224)"
"((temp137_231)(expand-context-env ctx_225))"
"((temp138_232)(expand-context-lift-envs ctx_225))"
"((temp139_233)(expand-context-namespace ctx_225))"
"((temp140_234)(expand-context-phase ctx_225))"
"((id141_235) id_226)"
"((in-s142_236) in-s_227)"
"((out-of-context-as-variable?143_237) out-of-context-as-variable?_228))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup48.1))"
"(binding-lookup46.1"
" in-s142_236"
" #t"
" out-of-context-as-variable?143_237"
" #t"
" b136_230"
" temp137_231"
" temp138_232"
" temp139_233"
" temp140_234"
" id141_235)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:361:2_229"
" keyword-procedure-extract"
" '(#:in #:out-of-context-as-variable?)"
" 8)"
" '(#:in #:out-of-context-as-variable?)"
"(list in-s142_236 out-of-context-as-variable?143_237)"
" b136_230"
" temp137_231"
" temp138_232"
" temp139_233"
" temp140_234"
" id141_235)))))))))))"
"(define-values"
"(unpack16.1)"
"(lambda(given-kws_238 given-args_239 b12_240 ctx13_241 id14_242)"
"(let-values(((in10_243)(if(pair? given-kws_238)(eq? '#:in(car given-kws_238)) #f)))"
"(let-values(((in8_244)(if in10_243(car given-args_239)(void)))"
"((given-kws_245)(if in10_243(cdr given-kws_238) given-kws_238))"
"((given-args_246)(if in10_243(cdr given-args_239) given-args_239)))"
"(let-values(((out-of-context-as-variable?11_247)(pair? given-kws_245)))"
"(let-values(((out-of-context-as-variable?9_248)"
"(if out-of-context-as-variable?11_247(car given-args_246)(void))))"
"(lookup15.1"
" in8_244"
" in10_243"
" out-of-context-as-variable?9_248"
" out-of-context-as-variable?11_247"
" b12_240"
" ctx13_241"
" id14_242)))))))"
"(define-values"
"(lookup17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_249 given-argc_250)"
"(if(= given-argc_250 5)"
"(let-values(((l1_251) given-kws_249))"
"(let-values(((l1_252)(if(null? l1_251) l1_251(if(eq?(car l1_251) '#:in)(cdr l1_251) l1_251))))"
"(let-values(((l1_253) l1_252))"
"(let-values(((l1_254)"
"(if(null? l1_253)"
" l1_253"
"(if(eq?(car l1_253) '#:out-of-context-as-variable?)(cdr l1_253) l1_253))))"
"(null? l1_254)))))"
" #f))"
"(case-lambda"
"((given-kws_255 given-args_256 b_257 ctx_258 id_259)"
"(unpack16.1 given-kws_255 given-args_256 b_257 ctx_258 id_259)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((lookup_260)(case-lambda((b_261 ctx_262 id_263)(unpack16.1 null null b_261 ctx_262 id_263)))))"
" lookup_260)))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_264 alternate-id_265)"
"(if(not alternate-id_265)"
"(let-values() s_264)"
"(if(identifier? s_264)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_265 s_264) s_264))"
"(let-values()"
"(let-values(((disarmed-s_266)(syntax-disarm$1 s_264)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_266(cons alternate-id_265(cdr(syntax-e$1 disarmed-s_266))) s_264)"
" s_264)"
" s_264)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_267)"
"(if(if(local-binding? binding_267)(reference-record?(binding-frame-id binding_267)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_267)(local-binding-key binding_267)))"
"(void))))"
"(define-values"
"(lifted/21.1)"
"(make-required"
" 'expand-body"
"(case-lambda((self_268 bodys_269 ctx_270)(apply missing-kw self_268 bodys_269 ctx_270 null)))"
" #f"
" #f))"
"(define-values"
"(expand-body28.1)"
"(lambda(disarmed-source19_271"
" source18_272"
" stratified?20_273"
" stratified?24_274"
" track?21_275"
" track?25_276"
" bodys26_277"
" ctx27_278)"
"(let-values(((bodys_279) bodys26_277))"
"(let-values(((ctx_280) ctx27_278))"
"(let-values(((s_281) source18_272))"
"(let-values(((disarmed-s_282) disarmed-source19_271))"
"(let-values(((stratified?_283)(if stratified?24_274 stratified?20_273 #f)))"
"(let-values(((track?_284)(if track?25_276 track?21_275 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_291)(expand-context-observer ctx_280)))"
"(if obs_291"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_291 'enter-block))(void)))"
"(void)))"
"(values))))"
"(let-values(((outside-sc_285)(new-scope 'local)))"
"(let-values(((inside-sc_286)(new-scope 'intdef)))"
"(let-values(((init-bodys_287)"
"(alt-reverse"
"(let-values(((lst_292) bodys_279))"
"(begin"
"(if(list? lst_292)(void)(let-values()(in-list lst_292)))"
"((letrec-values(((for-loop_293)"
"(lambda(fold-var_294 lst_295)"
"(if(pair? lst_295)"
"(let-values(((body_296)(unsafe-car lst_295)))"
"(if #t"
"(let-values(((fold-var_297)"
"(let-values(((fold-var_298)"
" fold-var_294))"
"(let-values(((fold-var_299)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(add-scope"
" body_296"
" outside-sc_285)"
" inside-sc_286))"
" fold-var_298))))"
"(values fold-var_299)))))"
"(if #t"
"(for-loop_293"
" fold-var_297"
"(unsafe-cdr lst_295))"
" fold-var_297))"
" fold-var_294))"
" fold-var_294))))"
" for-loop_293)"
" null"
" lst_292))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_300)(expand-context-observer ctx_280)))"
"(if obs_300"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_300"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_287)"
"(datum->syntax$1 #f bodys_279)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_288)(expand-context-phase ctx_280)))"
"(let-values(((frame-id_289)(make-reference-record)))"
"(let-values(((body-ctx_290)"
"(let-values(((the-struct_301) ctx_280))"
"(if(expand-context? the-struct_301)"
"(let-values(((context144_302)(list(make-liberal-define-context)))"
"((only-immediate?145_303) #t)"
"((post-expansion-scope146_304) inside-sc_286)"
"((post-expansion-scope-action147_305) add-scope)"
"((scopes148_306)"
"(list*"
" outside-sc_285"
" inside-sc_286"
"(expand-context-scopes ctx_280)))"
"((use-site-scopes149_307)(box null))"
"((frame-id150_308) frame-id_289)"
"((reference-records151_309)"
"(cons"
" frame-id_289"
"(expand-context-reference-records ctx_280)))"
"((all-scopes-stx152_310)"
"(add-scope"
"(add-scope"
"(root-expand-context-all-scopes-stx ctx_280)"
" outside-sc_285)"
" inside-sc_286)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_301)"
" post-expansion-scope146_304"
"(root-expand-context-top-level-bind-scope the-struct_301)"
" all-scopes-stx152_310"
" use-site-scopes149_307"
"(root-expand-context-defined-syms the-struct_301)"
" frame-id150_308"
"(root-expand-context-counter the-struct_301)"
"(root-expand-context-lift-key the-struct_301)"
" context144_302"
"(expand-context-phase the-struct_301)"
"(expand-context-namespace the-struct_301)"
"(expand-context-env the-struct_301)"
" post-expansion-scope-action147_305"
" scopes148_306"
"(expand-context-def-ctx-scopes the-struct_301)"
" reference-records151_309"
" only-immediate?145_303"
"(expand-context-just-once? the-struct_301)"
"(expand-context-module-begin-k the-struct_301)"
"(expand-context-need-eventually-defined the-struct_301)"
"(expand-context-allow-unbound? the-struct_301)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_301)"
"(expand-context-stops the-struct_301)"
"(expand-context-current-introduction-scopes the-struct_301)"
"(expand-context-declared-submodule-names the-struct_301)"
"(expand-context-lifts the-struct_301)"
"(expand-context-lift-envs the-struct_301)"
"(expand-context-module-lifts the-struct_301)"
"(expand-context-require-lifts the-struct_301)"
"(expand-context-to-module-lifts the-struct_301)"
"(expand-context-requires+provides the-struct_301)"
"(expand-context-name the-struct_301)"
"(expand-context-observer the-struct_301)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context?\""
" the-struct_301)))))"
"((letrec-values(((loop_311)"
"(lambda(body-ctx_312"
" bodys_313"
" done-bodys_314"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
" trans-idss_319"
" dups_320)"
"(if(null? bodys_313)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_322)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_322"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_322"
"(if(null? val-idss_315)"
" 'block->list"
" 'block->letrec)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_321)"
"(let-values(((...nder/expand/main.rkt:458:8_323)"
" finish-expanding-body48.1)"
"((body-ctx153_324) body-ctx_312)"
"((frame-id154_325) frame-id_289)"
"((temp155_326)"
"(alt-reverse val-idss_315))"
"((temp156_327)"
"(alt-reverse val-keyss_316))"
"((temp157_328)"
"(alt-reverse val-rhss_317))"
"((temp158_329)"
"(alt-reverse track-stxs_318))"
"((temp159_330)"
"(alt-reverse done-bodys_314))"
"((s160_331) s_281)"
"((disarmed-s161_332)"
" disarmed-s_282)"
"((stratified?162_333)"
" stratified?_283)"
"((track?163_334) track?_284))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body48.1))"
"(finish-expanding-body46.1"
" disarmed-s161_332"
" s160_331"
" stratified?162_333"
" track?163_334"
" body-ctx153_324"
" frame-id154_325"
" temp155_326"
" temp156_327"
" temp157_328"
" temp158_329"
" temp159_330)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:458:8_323"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source"
" #:stratified?"
" #:track?)"
" 9)"
" '(#:disarmed-source"
" #:source"
" #:stratified?"
" #:track?)"
"(list"
" disarmed-s161_332"
" s160_331"
" stratified?162_333"
" track?163_334)"
" body-ctx153_324"
" frame-id154_325"
" temp155_326"
" temp156_327"
" temp157_328"
" temp158_329"
" temp159_330)))))"
"(attach-disappeared-transformer-bindings"
" result-s_321"
"(alt-reverse trans-idss_319)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_337)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_337"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_337 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_335)"
"(let-values(((temp164_338)"
"(syntax-disarm$1"
"(car bodys_313)))"
"((body-ctx165_339) body-ctx_312))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp164_338"
" body-ctx165_339)"
"(expand7.1"
" temp164_338"
" body-ctx165_339)))))"
"(let-values(((disarmed-exp-body_336)"
"(syntax-disarm$1 exp-body_335)))"
"(let-values(((tmp_340)"
"(core-form-sym"
" disarmed-exp-body_336"
" phase_288)))"
"(if(equal? tmp_340 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_356)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_356"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_356"
" 'prim-begin))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_341 begin166_342 e167_343)"
"(let-values(((s_357)"
" disarmed-exp-body_336))"
"(if(if #t #t #f)"
"(let-values(((orig-s_358)"
" s_357))"
"(let-values(((begin166_359"
" e167_360)"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_357)"
"(syntax-e$1"
" s_357)"
" s_357)))"
"(if(pair?"
" s_361)"
"(let-values(((begin168_362)"
"(let-values(((s_364)"
"(car"
" s_361)))"
" s_364))"
"((e169_363)"
"(let-values(((s_365)"
"(cdr"
" s_361)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(let-values(((flat-s_367)"
"(to-syntax-list.1"
" s_366)))"
"(if(not"
" flat-s_367)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_358))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_358))"
"(let-values()"
" flat-s_367))))))))"
"(values"
" begin168_362"
" e169_363))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_358)))))"
"(values"
" #t"
" begin166_359"
" e167_360)))"
"(values #f #f #f)))))"
"(let-values(((track_354)"
"(lambda(e_368)"
"(syntax-track-origin$1"
" e_368"
" exp-body_335))))"
"(let-values(((splice-bodys_355)"
"(append"
"(map2 track_354 e167_343)"
"(cdr bodys_313))))"
"(begin"
"(let-values(((obs_369)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_369"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_369"
" 'splice"
" splice-bodys_355))"
"(void)))"
"(void)))"
"(loop_311"
" body-ctx_312"
" splice-bodys_355"
" done-bodys_314"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
" trans-idss_319"
" dups_320)))))))"
"(if(equal? tmp_340 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_391)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_391"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_391"
" 'prim-define-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_370"
" define-values170_371"
" id171_372"
" rhs172_373)"
"(let-values(((s_392)"
" disarmed-exp-body_336))"
"(if(if #t #t #f)"
"(let-values(((orig-s_393)"
" s_392))"
"(let-values(((define-values170_394"
" id171_395"
" rhs172_396)"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_392)"
"(syntax-e$1"
" s_392)"
" s_392)))"
"(if(pair?"
" s_397)"
"(let-values(((define-values173_398)"
"(let-values(((s_401)"
"(car"
" s_397)))"
" s_401))"
"((id174_399"
" rhs175_400)"
"(let-values(((s_402)"
"(cdr"
" s_397)))"
"(let-values(((s_403)"
"(if(syntax?$1"
" s_402)"
"(syntax-e$1"
" s_402)"
" s_402)))"
"(if(pair?"
" s_403)"
"(let-values(((id176_404)"
"(let-values(((s_406)"
"(car"
" s_403)))"
"(let-values(((s_407)"
"(if(syntax?$1"
" s_406)"
"(syntax-e$1"
" s_406)"
" s_406)))"
"(let-values(((flat-s_408)"
"(to-syntax-list.1"
" s_407)))"
"(if(not"
" flat-s_408)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_393))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_393))"
"(let-values()"
"(let-values(((id_409)"
"(let-values(((lst_410)"
" flat-s_408))"
"(begin"
"(if(list?"
" lst_410)"
"(void)"
"(let-values()"
"(in-list"
" lst_410)))"
"((letrec-values(((for-loop_411)"
"(lambda(id_412"
" lst_413)"
"(if(pair?"
" lst_413)"
"(let-values(((s_414)"
"(unsafe-car"
" lst_413)))"
"(if #t"
"(let-values(((id_415)"
"(let-values(((id_416)"
" id_412))"
"(let-values(((id_417)"
"(let-values()"
"(let-values(((id179_418)"
"(let-values()"
"(if(let-values(((or-part_419)"
"(if(syntax?$1"
" s_414)"
"(symbol?"
"(syntax-e$1"
" s_414))"
" #f)))"
"(if or-part_419"
" or-part_419"
"(symbol?"
" s_414)))"
" s_414"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_393"
" s_414)))))"
"(cons"
" id179_418"
" id_416)))))"
"(values"
" id_417)))))"
"(if #t"
"(for-loop_411"
" id_415"
"(unsafe-cdr"
" lst_413))"
" id_415))"
" id_412))"
" id_412))))"
" for-loop_411)"
" null"
" lst_410)))))"
"(alt-reverse"
" id_409)))))))))"
"((rhs177_405)"
"(let-values(((s_420)"
"(cdr"
" s_403)))"
"(let-values(((s_421)"
"(if(syntax?$1"
" s_420)"
"(syntax-e$1"
" s_420)"
" s_420)))"
"(if(pair?"
" s_421)"
"(let-values(((rhs178_422)"
"(let-values(((s_423)"
"(car"
" s_421)))"
" s_423))"
"(()"
"(let-values(((s_424)"
"(cdr"
" s_421)))"
"(let-values(((s_425)"
"(if(syntax?$1"
" s_424)"
"(syntax-e$1"
" s_424)"
" s_424)))"
"(if(null?"
" s_425)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_393))))))"
"(values"
" rhs178_422))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_393))))))"
"(values"
" id176_404"
" rhs177_405))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_393))))))"
"(values"
" define-values173_398"
" id174_399"
" rhs175_400))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_393)))))"
"(values"
" #t"
" define-values170_394"
" id171_395"
" rhs172_396)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_386)"
"(remove-use-site-scopes"
" id171_372"
" body-ctx_312)))"
"(let-values((()"
"(begin"
"(let-values(((obs_426)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_426"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_426"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_386"
" rhs172_373))))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((new-dups_387)"
"(let-values(((ids180_427)"
" ids_386)"
"((phase181_428)"
" phase_288)"
"((exp-body182_429)"
" exp-body_335)"
"((dups183_430)"
" dups_320))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids180_427"
" phase181_428"
" exp-body182_429"
" dups183_430"
" #t)"
"(check-no-duplicate-ids10.1"
" ids180_427"
" phase181_428"
" exp-body182_429"
" dups183_430)))))"
"(let-values(((counter_388)"
"(root-expand-context-counter"
" ctx_280)))"
"(let-values(((keys_389)"
"(alt-reverse"
"(let-values(((lst_431)"
" ids_386))"
"(begin"
"(if(list?"
" lst_431)"
"(void)"
"(let-values()"
"(in-list"
" lst_431)))"
"((letrec-values(((for-loop_432)"
"(lambda(fold-var_433"
" lst_434)"
"(if(pair?"
" lst_434)"
"(let-values(((id_435)"
"(unsafe-car"
" lst_434)))"
"(if #t"
"(let-values(((fold-var_436)"
"(let-values(((fold-var_437)"
" fold-var_433))"
"(let-values(((fold-var_438)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:496:24_439)"
" add-local-binding!35.1)"
"((id184_440)"
" id_435)"
"((phase185_441)"
" phase_288)"
"((counter186_442)"
" counter_388)"
"((frame-id187_443)"
" frame-id_289)"
"((exp-body188_444)"
" exp-body_335))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id187_443"
" #t"
" exp-body188_444"
" #t"
" id184_440"
" phase185_441"
" counter186_442)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:496:24_439"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id187_443"
" exp-body188_444)"
" id184_440"
" phase185_441"
" counter186_442))))"
" fold-var_437))))"
"(values"
" fold-var_438)))))"
"(if #t"
"(for-loop_432"
" fold-var_436"
"(unsafe-cdr"
" lst_434))"
" fold-var_436))"
" fold-var_433))"
" fold-var_433))))"
" for-loop_432)"
" null"
" lst_431))))))"
"(let-values(((extended-env_390)"
"(let-values(((lst_445)"
" keys_389)"
"((lst_446)"
" ids_386))"
"(begin"
"(if(list?"
" lst_445)"
"(void)"
"(let-values()"
"(in-list"
" lst_445)))"
"(if(list?"
" lst_446)"
"(void)"
"(let-values()"
"(in-list"
" lst_446)))"
"((letrec-values(((for-loop_447)"
"(lambda(env_448"
" lst_449"
" lst_450)"
"(if(if(pair?"
" lst_449)"
"(pair?"
" lst_450)"
" #f)"
"(let-values(((key_451)"
"(unsafe-car"
" lst_449))"
"((id_452)"
"(unsafe-car"
" lst_450)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((env_453)"
"(let-values(((env_454)"
" env_448))"
"(let-values(((env_455)"
"(let-values()"
"(env-extend"
" env_454"
" key_451"
"(local-variable1.1"
" id_452)))))"
"(values"
" env_455)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_447"
" env_453"
"(unsafe-cdr"
" lst_449)"
"(unsafe-cdr"
" lst_450))"
" env_453))"
" env_448))"
" env_448))))"
" for-loop_447)"
"(expand-context-env"
" body-ctx_312)"
" lst_445"
" lst_446)))))"
"(loop_311"
"(let-values(((the-struct_456)"
" body-ctx_312))"
"(if(expand-context?"
" the-struct_456)"
"(let-values(((env189_457)"
" extended-env_390))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_456)"
"(root-expand-context-post-expansion-scope"
" the-struct_456)"
"(root-expand-context-top-level-bind-scope"
" the-struct_456)"
"(root-expand-context-all-scopes-stx"
" the-struct_456)"
"(root-expand-context-use-site-scopes"
" the-struct_456)"
"(root-expand-context-defined-syms"
" the-struct_456)"
"(root-expand-context-frame-id"
" the-struct_456)"
"(root-expand-context-counter"
" the-struct_456)"
"(root-expand-context-lift-key"
" the-struct_456)"
"(expand-context-context"
" the-struct_456)"
"(expand-context-phase"
" the-struct_456)"
"(expand-context-namespace"
" the-struct_456)"
" env189_457"
"(expand-context-post-expansion-scope-action"
" the-struct_456)"
"(expand-context-scopes"
" the-struct_456)"
"(expand-context-def-ctx-scopes"
" the-struct_456)"
"(expand-context-reference-records"
" the-struct_456)"
"(expand-context-only-immediate?"
" the-struct_456)"
"(expand-context-just-once?"
" the-struct_456)"
"(expand-context-module-begin-k"
" the-struct_456)"
"(expand-context-need-eventually-defined"
" the-struct_456)"
"(expand-context-allow-unbound?"
" the-struct_456)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_456)"
"(expand-context-stops"
" the-struct_456)"
"(expand-context-current-introduction-scopes"
" the-struct_456)"
"(expand-context-declared-submodule-names"
" the-struct_456)"
"(expand-context-lifts"
" the-struct_456)"
"(expand-context-lift-envs"
" the-struct_456)"
"(expand-context-module-lifts"
" the-struct_456)"
"(expand-context-require-lifts"
" the-struct_456)"
"(expand-context-to-module-lifts"
" the-struct_456)"
"(expand-context-requires+provides"
" the-struct_456)"
"(expand-context-name"
" the-struct_456)"
"(expand-context-observer"
" the-struct_456)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                              \"expand-context?\""
" the-struct_456)))"
"(cdr bodys_313)"
" null"
"(cons"
" ids_386"
"(append"
"(alt-reverse"
"(let-values(((lst_458)"
" done-bodys_314))"
"(begin"
"(if(list? lst_458)"
"(void)"
"(let-values()"
"(in-list lst_458)))"
"((letrec-values(((for-loop_459)"
"(lambda(fold-var_460"
" lst_461)"
"(if(pair?"
" lst_461)"
"(let-values(((done-body_462)"
"(unsafe-car"
" lst_461)))"
"(if #t"
"(let-values(((fold-var_463)"
"(let-values(((fold-var_464)"
" fold-var_460))"
"(let-values(((fold-var_465)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_464))))"
"(values"
" fold-var_465)))))"
"(if #t"
"(for-loop_459"
" fold-var_463"
"(unsafe-cdr"
" lst_461))"
" fold-var_463))"
" fold-var_460))"
" fold-var_460))))"
" for-loop_459)"
" null"
" lst_458))))"
" val-idss_315))"
"(cons"
" keys_389"
"(append"
"(alt-reverse"
"(let-values(((lst_466)"
" done-bodys_314))"
"(begin"
"(if(list? lst_466)"
"(void)"
"(let-values()"
"(in-list lst_466)))"
"((letrec-values(((for-loop_467)"
"(lambda(fold-var_468"
" lst_469)"
"(if(pair?"
" lst_469)"
"(let-values(((done-body_470)"
"(unsafe-car"
" lst_469)))"
"(if #t"
"(let-values(((fold-var_471)"
"(let-values(((fold-var_472)"
" fold-var_468))"
"(let-values(((fold-var_473)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_472))))"
"(values"
" fold-var_473)))))"
"(if #t"
"(for-loop_467"
" fold-var_471"
"(unsafe-cdr"
" lst_469))"
" fold-var_471))"
" fold-var_468))"
" fold-var_468))))"
" for-loop_467)"
" null"
" lst_466))))"
" val-keyss_316))"
"(cons"
" rhs172_373"
"(append"
"(alt-reverse"
"(let-values(((lst_474)"
" done-bodys_314))"
"(begin"
"(if(list? lst_474)"
"(void)"
"(let-values()"
"(in-list lst_474)))"
"((letrec-values(((for-loop_475)"
"(lambda(fold-var_476"
" lst_477)"
"(if(pair?"
" lst_477)"
"(let-values(((done-body_478)"
"(unsafe-car"
" lst_477)))"
"(if #t"
"(let-values(((fold-var_479)"
"(let-values(((fold-var_480)"
" fold-var_476))"
"(let-values(((fold-var_481)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_478"
" s_281"
" phase_288))"
" fold-var_480))))"
"(values"
" fold-var_481)))))"
"(if #t"
"(for-loop_475"
" fold-var_479"
"(unsafe-cdr"
" lst_477))"
" fold-var_479))"
" fold-var_476))"
" fold-var_476))))"
" for-loop_475)"
" null"
" lst_474))))"
" val-rhss_317))"
"(cons"
" exp-body_335"
"(append"
"(alt-reverse"
"(let-values(((lst_482)"
" done-bodys_314))"
"(begin"
"(if(list? lst_482)"
"(void)"
"(let-values()"
"(in-list lst_482)))"
"((letrec-values(((for-loop_483)"
"(lambda(fold-var_484"
" lst_485)"
"(if(pair?"
" lst_485)"
"(let-values(((done-body_486)"
"(unsafe-car"
" lst_485)))"
"(if #t"
"(let-values(((fold-var_487)"
"(let-values(((fold-var_488)"
" fold-var_484))"
"(let-values(((fold-var_489)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_488))))"
"(values"
" fold-var_489)))))"
"(if #t"
"(for-loop_483"
" fold-var_487"
"(unsafe-cdr"
" lst_485))"
" fold-var_487))"
" fold-var_484))"
" fold-var_484))))"
" for-loop_483)"
" null"
" lst_482))))"
" track-stxs_318))"
" trans-idss_319"
" new-dups_387))))))))))"
"(if(equal? tmp_340 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_512)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_512"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_512"
" 'prim-define-syntaxes))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_490"
" define-syntaxes190_491"
" id191_492"
" rhs192_493)"
"(let-values(((s_513)"
" disarmed-exp-body_336))"
"(if(if #t #t #f)"
"(let-values(((orig-s_514)"
" s_513))"
"(let-values(((define-syntaxes190_515"
" id191_516"
" rhs192_517)"
"(let-values(((s_518)"
"(if(syntax?$1"
" s_513)"
"(syntax-e$1"
" s_513)"
" s_513)))"
"(if(pair?"
" s_518)"
"(let-values(((define-syntaxes193_519)"
"(let-values(((s_522)"
"(car"
" s_518)))"
" s_522))"
"((id194_520"
" rhs195_521)"
"(let-values(((s_523)"
"(cdr"
" s_518)))"
"(let-values(((s_524)"
"(if(syntax?$1"
" s_523)"
"(syntax-e$1"
" s_523)"
" s_523)))"
"(if(pair?"
" s_524)"
"(let-values(((id196_525)"
"(let-values(((s_527)"
"(car"
" s_524)))"
"(let-values(((s_528)"
"(if(syntax?$1"
" s_527)"
"(syntax-e$1"
" s_527)"
" s_527)))"
"(let-values(((flat-s_529)"
"(to-syntax-list.1"
" s_528)))"
"(if(not"
" flat-s_529)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_514))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_514))"
"(let-values()"
"(let-values(((id_530)"
"(let-values(((lst_531)"
" flat-s_529))"
"(begin"
"(if(list?"
" lst_531)"
"(void)"
"(let-values()"
"(in-list"
" lst_531)))"
"((letrec-values(((for-loop_532)"
"(lambda(id_533"
" lst_534)"
"(if(pair?"
" lst_534)"
"(let-values(((s_535)"
"(unsafe-car"
" lst_534)))"
"(if #t"
"(let-values(((id_536)"
"(let-values(((id_537)"
" id_533))"
"(let-values(((id_538)"
"(let-values()"
"(let-values(((id199_539)"
"(let-values()"
"(if(let-values(((or-part_540)"
"(if(syntax?$1"
" s_535)"
"(symbol?"
"(syntax-e$1"
" s_535))"
" #f)))"
"(if or-part_540"
" or-part_540"
"(symbol?"
" s_535)))"
" s_535"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_514"
" s_535)))))"
"(cons"
" id199_539"
" id_537)))))"
"(values"
" id_538)))))"
"(if #t"
"(for-loop_532"
" id_536"
"(unsafe-cdr"
" lst_534))"
" id_536))"
" id_533))"
" id_533))))"
" for-loop_532)"
" null"
" lst_531)))))"
"(alt-reverse"
" id_530)))))))))"
"((rhs197_526)"
"(let-values(((s_541)"
"(cdr"
" s_524)))"
"(let-values(((s_542)"
"(if(syntax?$1"
" s_541)"
"(syntax-e$1"
" s_541)"
" s_541)))"
"(if(pair?"
" s_542)"
"(let-values(((rhs198_543)"
"(let-values(((s_544)"
"(car"
" s_542)))"
" s_544))"
"(()"
"(let-values(((s_545)"
"(cdr"
" s_542)))"
"(let-values(((s_546)"
"(if(syntax?$1"
" s_545)"
"(syntax-e$1"
" s_545)"
" s_545)))"
"(if(null?"
" s_546)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_514))))))"
"(values"
" rhs198_543))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_514))))))"
"(values"
" id196_525"
" rhs197_526))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_514))))))"
"(values"
" define-syntaxes193_519"
" id194_520"
" rhs195_521))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_514)))))"
"(values"
" #t"
" define-syntaxes190_515"
" id191_516"
" rhs192_517)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_506)"
"(remove-use-site-scopes"
" id191_492"
" body-ctx_312)))"
"(let-values((()"
"(begin"
"(let-values(((obs_547)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_547"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_547"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_506"
" rhs192_493))))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((new-dups_507)"
"(let-values(((ids200_548)"
" ids_506)"
"((phase201_549)"
" phase_288)"
"((exp-body202_550)"
" exp-body_335)"
"((dups203_551)"
" dups_320))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids200_548"
" phase201_549"
" exp-body202_550"
" dups203_551"
" #t)"
"(check-no-duplicate-ids10.1"
" ids200_548"
" phase201_549"
" exp-body202_550"
" dups203_551)))))"
"(let-values(((counter_508)"
"(root-expand-context-counter"
" ctx_280)))"
"(let-values(((keys_509)"
"(alt-reverse"
"(let-values(((lst_552)"
" ids_506))"
"(begin"
"(if(list?"
" lst_552)"
"(void)"
"(let-values()"
"(in-list"
" lst_552)))"
"((letrec-values(((for-loop_553)"
"(lambda(fold-var_554"
" lst_555)"
"(if(pair?"
" lst_555)"
"(let-values(((id_556)"
"(unsafe-car"
" lst_555)))"
"(if #t"
"(let-values(((fold-var_557)"
"(let-values(((fold-var_558)"
" fold-var_554))"
"(let-values(((fold-var_559)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:538:24_560)"
" add-local-binding!35.1)"
"((id204_561)"
" id_556)"
"((phase205_562)"
" phase_288)"
"((counter206_563)"
" counter_508)"
"((frame-id207_564)"
" frame-id_289)"
"((exp-body208_565)"
" exp-body_335))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id207_564"
" #t"
" exp-body208_565"
" #t"
" id204_561"
" phase205_562"
" counter206_563)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:538:24_560"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id207_564"
" exp-body208_565)"
" id204_561"
" phase205_562"
" counter206_563))))"
" fold-var_558))))"
"(values"
" fold-var_559)))))"
"(if #t"
"(for-loop_553"
" fold-var_557"
"(unsafe-cdr"
" lst_555))"
" fold-var_557))"
" fold-var_554))"
" fold-var_554))))"
" for-loop_553)"
" null"
" lst_552))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_566)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_566"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_566"
" 'prepare-env))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((vals_510)"
"(eval-for-syntaxes-binding"
" rhs192_493"
" ids_506"
" ctx_280)))"
"(let-values(((extended-env_511)"
"(let-values(((lst_567)"
" keys_509)"
"((lst_568)"
" vals_510)"
"((lst_569)"
" ids_506))"
"(begin"
"(if(list?"
" lst_567)"
"(void)"
"(let-values()"
"(in-list"
" lst_567)))"
"(if(list?"
" lst_568)"
"(void)"
"(let-values()"
"(in-list"
" lst_568)))"
"(if(list?"
" lst_569)"
"(void)"
"(let-values()"
"(in-list"
" lst_569)))"
"((letrec-values(((for-loop_570)"
"(lambda(env_571"
" lst_572"
" lst_573"
" lst_574)"
"(if(if(pair?"
" lst_572)"
"(if(pair?"
" lst_573)"
"(pair?"
" lst_574)"
" #f)"
" #f)"
"(let-values(((key_575)"
"(unsafe-car"
" lst_572))"
"((val_576)"
"(unsafe-car"
" lst_573))"
"((id_577)"
"(unsafe-car"
" lst_574)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((env_578)"
"(let-values(((env_579)"
" env_571))"
"(let-values(((env_580)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_576"
" id_577"
" phase_288)"
"(env-extend"
" env_579"
" key_575"
" val_576)))))"
"(values"
" env_580)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_570"
" env_578"
"(unsafe-cdr"
" lst_572)"
"(unsafe-cdr"
" lst_573)"
"(unsafe-cdr"
" lst_574))"
" env_578))"
" env_571))"
" env_571))))"
" for-loop_570)"
"(expand-context-env"
" body-ctx_312)"
" lst_567"
" lst_568"
" lst_569)))))"
"(loop_311"
"(let-values(((the-struct_581)"
" body-ctx_312))"
"(if(expand-context?"
" the-struct_581)"
"(let-values(((env209_582)"
" extended-env_511))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_581)"
"(root-expand-context-post-expansion-scope"
" the-struct_581)"
"(root-expand-context-top-level-bind-scope"
" the-struct_581)"
"(root-expand-context-all-scopes-stx"
" the-struct_581)"
"(root-expand-context-use-site-scopes"
" the-struct_581)"
"(root-expand-context-defined-syms"
" the-struct_581)"
"(root-expand-context-frame-id"
" the-struct_581)"
"(root-expand-context-counter"
" the-struct_581)"
"(root-expand-context-lift-key"
" the-struct_581)"
"(expand-context-context"
" the-struct_581)"
"(expand-context-phase"
" the-struct_581)"
"(expand-context-namespace"
" the-struct_581)"
" env209_582"
"(expand-context-post-expansion-scope-action"
" the-struct_581)"
"(expand-context-scopes"
" the-struct_581)"
"(expand-context-def-ctx-scopes"
" the-struct_581)"
"(expand-context-reference-records"
" the-struct_581)"
"(expand-context-only-immediate?"
" the-struct_581)"
"(expand-context-just-once?"
" the-struct_581)"
"(expand-context-module-begin-k"
" the-struct_581)"
"(expand-context-need-eventually-defined"
" the-struct_581)"
"(expand-context-allow-unbound?"
" the-struct_581)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_581)"
"(expand-context-stops"
" the-struct_581)"
"(expand-context-current-introduction-scopes"
" the-struct_581)"
"(expand-context-declared-submodule-names"
" the-struct_581)"
"(expand-context-lifts"
" the-struct_581)"
"(expand-context-lift-envs"
" the-struct_581)"
"(expand-context-module-lifts"
" the-struct_581)"
"(expand-context-require-lifts"
" the-struct_581)"
"(expand-context-to-module-lifts"
" the-struct_581)"
"(expand-context-requires+provides"
" the-struct_581)"
"(expand-context-name"
" the-struct_581)"
"(expand-context-observer"
" the-struct_581)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                    \"expand-context?\""
" the-struct_581)))"
"(cdr bodys_313)"
" done-bodys_314"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
"(cons"
" ids_506"
" trans-idss_319)"
" new-dups_507))))))))))))"
"(let-values()"
"(if stratified?_283"
"(let-values()"
"(loop_311"
" body-ctx_312"
" null"
"(append"
"(alt-reverse bodys_313)"
"(cons exp-body_335 done-bodys_314))"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
" trans-idss_319"
" dups_320))"
"(let-values()"
"(loop_311"
" body-ctx_312"
"(cdr bodys_313)"
"(cons exp-body_335 done-bodys_314)"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
" trans-idss_319"
" dups_320))))))))))))))))"
" loop_311)"
" body-ctx_290"
" init-bodys_287"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))"
"(define-values"
"(unpack29.1$1)"
"(lambda(given-kws_583 given-args_584 bodys26_585 ctx27_586)"
"(let-values(((disarmed-source19_587)(car given-args_584))"
"((given-kws_588)(cdr given-kws_583))"
"((given-args_589)(cdr given-args_584)))"
"(let-values(((source18_590)(car given-args_589))"
"((given-kws_591)(cdr given-kws_588))"
"((given-args_592)(cdr given-args_589)))"
"(let-values(((stratified?24_593)(if(pair? given-kws_591)(eq? '#:stratified?(car given-kws_591)) #f)))"
"(let-values(((stratified?20_594)(if stratified?24_593(car given-args_592)(void)))"
"((given-kws_595)(if stratified?24_593(cdr given-kws_591) given-kws_591))"
"((given-args_596)(if stratified?24_593(cdr given-args_592) given-args_592)))"
"(let-values(((track?25_597)(pair? given-kws_595)))"
"(let-values(((track?21_598)(if track?25_597(car given-args_596)(void))))"
"(expand-body28.1"
" disarmed-source19_587"
" source18_590"
" stratified?20_594"
" stratified?24_593"
" track?21_598"
" track?25_597"
" bodys26_585"
" ctx27_586)))))))))"
"(define-values"
"(expand-body30.1)"
"(lifted/21.1"
"(lambda(given-kws_599 given-argc_600)"
"(if(= given-argc_600 4)"
"(subsets? '(#:disarmed-source #:source) given-kws_599 '(#:disarmed-source #:source #:stratified? #:track?))"
" #f))"
"(case-lambda"
"((given-kws_601 given-args_602 bodys_603 ctx_604)(unpack29.1$1 given-kws_601 given-args_602 bodys_603 ctx_604)))"
" '(#:disarmed-source #:source)"
" '(#:disarmed-source #:source #:stratified? #:track?)))"
"(define-values"
"(lifted/22.1)"
"(make-required"
" 'finish-expanding-body"
"(case-lambda"
"((self_605 body-ctx_606 frame-id_607 val-idss_608 val-keyss_609 val-rhss_610 track-stxs_611 done-bodys_612)"
"(apply"
" missing-kw"
" self_605"
" body-ctx_606"
" frame-id_607"
" val-idss_608"
" val-keyss_609"
" val-rhss_610"
" track-stxs_611"
" done-bodys_612"
" null)))"
" #f"
" #f))"
"(define-values"
"(finish-expanding-body46.1)"
"(lambda(disarmed-source32_613"
" source31_614"
" stratified?33_615"
" track?34_616"
" body-ctx39_617"
" frame-id40_618"
" val-idss41_619"
" val-keyss42_620"
" val-rhss43_621"
" track-stxs44_622"
" done-bodys45_623)"
"(let-values(((body-ctx_624) body-ctx39_617))"
"(let-values(((frame-id_625) frame-id40_618))"
"(let-values(((val-idss_626) val-idss41_619))"
"(let-values(((val-keyss_627) val-keyss42_620))"
"(let-values(((val-rhss_628) val-rhss43_621))"
"(let-values(((track-stxs_629) track-stxs44_622))"
"(let-values(((done-bodys_630) done-bodys45_623))"
"(let-values(((s_631) source31_614))"
"(let-values(((disarmed-s_632) disarmed-source32_613))"
"(let-values(((stratified?_633) stratified?33_615))"
"(let-values(((track?_634) track?34_616))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_630)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                 \"no expression after a sequence of internal definitions\""
" s_631))"
"(void))"
"(values))))"
"(let-values(((s-core-stx_635)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase body-ctx_624))))"
"(let-values(((finish-ctx_636)"
"(let-values(((the-struct_638) body-ctx_624))"
"(if(expand-context? the-struct_638)"
"(let-values(((context210_639) 'expression)"
"((use-site-scopes211_640) #f)"
"((scopes212_641)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_624))"
"(expand-context-scopes body-ctx_624)))"
"((only-immediate?213_642) #f)"
"((post-expansion-scope214_643) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_638)"
" post-expansion-scope214_643"
"(root-expand-context-top-level-bind-scope the-struct_638)"
"(root-expand-context-all-scopes-stx the-struct_638)"
" use-site-scopes211_640"
"(root-expand-context-defined-syms the-struct_638)"
"(root-expand-context-frame-id the-struct_638)"
"(root-expand-context-counter the-struct_638)"
"(root-expand-context-lift-key the-struct_638)"
" context210_639"
"(expand-context-phase the-struct_638)"
"(expand-context-namespace the-struct_638)"
"(expand-context-env the-struct_638)"
"(expand-context-post-expansion-scope-action the-struct_638)"
" scopes212_641"
"(expand-context-def-ctx-scopes the-struct_638)"
"(expand-context-reference-records the-struct_638)"
" only-immediate?213_642"
"(expand-context-just-once? the-struct_638)"
"(expand-context-module-begin-k the-struct_638)"
"(expand-context-need-eventually-defined the-struct_638)"
"(expand-context-allow-unbound? the-struct_638)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_638)"
"(expand-context-stops the-struct_638)"
"(expand-context-current-introduction-scopes the-struct_638)"
"(expand-context-declared-submodule-names the-struct_638)"
"(expand-context-lifts the-struct_638)"
"(expand-context-lift-envs the-struct_638)"
"(expand-context-module-lifts the-struct_638)"
"(expand-context-require-lifts the-struct_638)"
"(expand-context-to-module-lifts the-struct_638)"
"(expand-context-requires+provides the-struct_638)"
"(expand-context-name the-struct_638)"
"(expand-context-observer the-struct_638)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context?\""
" the-struct_638)))))"
"(let-values(((finish-bodys_637)"
"(lambda(track?_644)"
"(let-values(((block->list?_645)(null? val-idss_626)))"
"(begin"
"(if block->list?_645"
"(void)"
"(let-values()"
"(let-values(((obs_646)"
"(expand-context-observer body-ctx_624)))"
"(if obs_646"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_646 'next-group))"
"(void)))"
"(void)))))"
"(if(null?(cdr done-bodys_630))"
"(let-values()"
"(let-values(((last-ctx_647)"
"(let-values(((the-struct_649) finish-ctx_636))"
"(if(expand-context? the-struct_649)"
"(let-values(((reference-records215_650)"
"(cdr"
"(expand-context-reference-records"
" finish-ctx_636))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_649)"
"(root-expand-context-post-expansion-scope"
" the-struct_649)"
"(root-expand-context-top-level-bind-scope"
" the-struct_649)"
"(root-expand-context-all-scopes-stx"
" the-struct_649)"
"(root-expand-context-use-site-scopes"
" the-struct_649)"
"(root-expand-context-defined-syms"
" the-struct_649)"
"(root-expand-context-frame-id"
" the-struct_649)"
"(root-expand-context-counter"
" the-struct_649)"
"(root-expand-context-lift-key"
" the-struct_649)"
"(expand-context-context the-struct_649)"
"(expand-context-phase the-struct_649)"
"(expand-context-namespace the-struct_649)"
"(expand-context-env the-struct_649)"
"(expand-context-post-expansion-scope-action"
" the-struct_649)"
"(expand-context-scopes the-struct_649)"
"(expand-context-def-ctx-scopes"
" the-struct_649)"
" reference-records215_650"
"(expand-context-only-immediate?"
" the-struct_649)"
"(expand-context-just-once?"
" the-struct_649)"
"(expand-context-module-begin-k"
" the-struct_649)"
"(expand-context-need-eventually-defined"
" the-struct_649)"
"(expand-context-allow-unbound?"
" the-struct_649)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_649)"
"(expand-context-stops the-struct_649)"
"(expand-context-current-introduction-scopes"
" the-struct_649)"
"(expand-context-declared-submodule-names"
" the-struct_649)"
"(expand-context-lifts the-struct_649)"
"(expand-context-lift-envs the-struct_649)"
"(expand-context-module-lifts"
" the-struct_649)"
"(expand-context-require-lifts"
" the-struct_649)"
"(expand-context-to-module-lifts"
" the-struct_649)"
"(expand-context-requires+provides"
" the-struct_649)"
"(expand-context-name the-struct_649)"
"(expand-context-observer"
" the-struct_649)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                             \"expand-context?\""
" the-struct_649)))))"
"(let-values(((exp-body_648)"
"(let-values(((temp216_651)"
"(car done-bodys_630))"
"((last-ctx217_652) last-ctx_647))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp216_651"
" last-ctx217_652)"
"(expand7.1"
" temp216_651"
" last-ctx217_652)))))"
"(if track?_644"
"(let-values(((result-s_653)"
"(syntax-track-origin$1"
" exp-body_648"
" s_631)))"
"(begin"
"(let-values(((obs_654)"
"(expand-context-observer"
" body-ctx_624)))"
"(if obs_654"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_654"
" 'tag"
" result-s_653))"
"(void)))"
"(void)))"
" result-s_653))"
" exp-body_648))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if block->list?_645"
"(void)"
"(let-values()"
"(let-values(((obs_656)"
"(expand-context-observer"
" body-ctx_624)))"
"(if obs_656"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_656"
" 'prim-begin))"
"(void)))"
"(void)))))"
"(values))))"
"(letrec-values((()"
"(begin"
"(let-values(((obs_657)"
"(expand-context-observer"
" body-ctx_624)))"
"(if obs_657"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_657"
" 'enter-list"
" exp-bodys_655))"
"(void)))"
"(void)))"
"(values)))"
"((exp-bodys_655)"
"(alt-reverse"
"(let-values(((lst_658) done-bodys_630))"
"(begin"
"(if(list? lst_658)"
"(void)"
"(let-values()(in-list lst_658)))"
"((letrec-values(((for-loop_659)"
"(lambda(fold-var_660"
" lst_661)"
"(if(pair?"
" lst_661)"
"(let-values(((body_662)"
"(unsafe-car"
" lst_661)))"
"(if #t"
"(let-values(((fold-var_663)"
"(let-values(((fold-var_664)"
" fold-var_660))"
"(let-values(((fold-var_665)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_666)"
"(expand-context-observer"
" body-ctx_624)))"
"(if obs_666"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_666"
" 'next))"
"(void)))"
"(void)))"
"(let-values(((body222_667)"
" body_662)"
"((finish-ctx223_668)"
" finish-ctx_636))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" body222_667"
" finish-ctx223_668)"
"(expand7.1"
" body222_667"
" finish-ctx223_668)))))"
" fold-var_664))))"
"(values"
" fold-var_665)))))"
"(if #t"
"(for-loop_659"
" fold-var_663"
"(unsafe-cdr"
" lst_661))"
" fold-var_663))"
" fold-var_660))"
" fold-var_660))))"
" for-loop_659)"
" null"
" lst_658))))))"
"(begin"
"(let-values(((obs_669)"
"(expand-context-observer body-ctx_624)))"
"(if obs_669"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_669"
" 'exit-list"
" exp-bodys_655))"
"(void)))"
"(void)))"
"(let-values(((...nder/expand/main.rkt:624:6_670)"
" rebuild101.1)"
"((track?218_671) track?_644)"
"((s219_672) s_631)"
"((disarmed-s220_673) disarmed-s_632)"
"((temp221_674)"
"(list*"
"(datum->syntax$1 s-core-stx_635 'begin)"
" exp-bodys_655)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?218_671"
" #t"
" s219_672"
" disarmed-s220_673"
" temp221_674)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:624:6_670"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?218_671)"
" s219_672"
" disarmed-s220_673"
" temp221_674)))))))))))))"
"(if(null? val-idss_626)"
"(let-values()(finish-bodys_637 track?_634))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:636:4_675)"
" expand-and-split-bindings-by-reference69.1)"
"((val-idss224_676) val-idss_626)"
"((val-keyss225_677) val-keyss_627)"
"((val-rhss226_678) val-rhss_628)"
"((track-stxs227_679) track-stxs_629)"
"((temp228_680)(not stratified?_633))"
"((frame-id229_681) frame-id_625)"
"((finish-ctx230_682) finish-ctx_636)"
"((s231_683) s_631)"
"((disarmed-s232_684) disarmed-s_632)"
"((finish-bodys233_685) finish-bodys_637)"
"((track?234_686) track?_634))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-and-split-bindings-by-reference69.1))"
"(expand-and-split-bindings-by-reference67.1"
" finish-ctx230_682"
" disarmed-s232_684"
" frame-id229_681"
" finish-bodys233_685"
" s231_683"
" temp228_680"
" track?234_686"
" val-idss224_676"
" val-keyss225_677"
" val-rhss226_678"
" track-stxs227_679)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:636:4_675"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
"(list"
" finish-ctx230_682"
" disarmed-s232_684"
" frame-id229_681"
" finish-bodys233_685"
" s231_683"
" temp228_680"
" track?234_686)"
" val-idss224_676"
" val-keyss225_677"
" val-rhss226_678"
" track-stxs227_679)))))))))))))))))))))))"
"(define-values"
"(unpack47.1)"
"(lambda(given-kws_687"
" given-args_688"
" body-ctx39_689"
" frame-id40_690"
" val-idss41_691"
" val-keyss42_692"
" val-rhss43_693"
" track-stxs44_694"
" done-bodys45_695)"
"(let-values(((disarmed-source32_696)(car given-args_688))"
"((given-kws_697)(cdr given-kws_687))"
"((given-args_698)(cdr given-args_688)))"
"(let-values(((source31_699)(car given-args_698))"
"((given-kws_700)(cdr given-kws_697))"
"((given-args_701)(cdr given-args_698)))"
"(let-values(((stratified?33_702)(car given-args_701))"
"((given-kws_703)(cdr given-kws_700))"
"((given-args_704)(cdr given-args_701)))"
"(let-values(((track?34_705)(car given-args_704)))"
"(finish-expanding-body46.1"
" disarmed-source32_696"
" source31_699"
" stratified?33_702"
" track?34_705"
" body-ctx39_689"
" frame-id40_690"
" val-idss41_691"
" val-keyss42_692"
" val-rhss43_693"
" track-stxs44_694"
" done-bodys45_695)))))))"
"(define-values"
"(finish-expanding-body48.1)"
"(lifted/22.1"
"(lambda(given-kws_706 given-argc_707)"
"(if(= given-argc_707 9)"
"(let-values(((l2_708) given-kws_706))"
"(if(pair? l2_708)"
"(if(eq?(car l2_708) '#:disarmed-source)"
"(let-values(((l2_709)(cdr l2_708)))"
"(if(pair? l2_709)"
"(if(eq?(car l2_709) '#:source)"
"(let-values(((l2_710)(cdr l2_709)))"
"(if(pair? l2_710)"
"(if(eq?(car l2_710) '#:stratified?)"
"(let-values(((l2_711)(cdr l2_710)))"
"(if(pair? l2_711)(if(eq?(car l2_711) '#:track?)(null?(cdr l2_711)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_712"
" given-args_713"
" body-ctx_714"
" frame-id_715"
" val-idss_716"
" val-keyss_717"
" val-rhss_718"
" track-stxs_719"
" done-bodys_720)"
"(unpack47.1"
" given-kws_712"
" given-args_713"
" body-ctx_714"
" frame-id_715"
" val-idss_716"
" val-keyss_717"
" val-rhss_718"
" track-stxs_719"
" done-bodys_720)))"
" '(#:disarmed-source #:source #:stratified? #:track?)"
" '(#:disarmed-source #:source #:stratified? #:track?)))"
"(define-values"
"(lifted/23.1)"
"(make-required"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_721 idss_722 keyss_723 rhss_724 track-stxs_725)"
"(apply missing-kw self_721 idss_722 keyss_723 rhss_724 track-stxs_725 null)))"
" #f"
" #f))"
"(define-values"
"(expand-and-split-bindings-by-reference67.1)"
"(lambda(ctx51_726"
" disarmed-source53_727"
" frame-id50_728"
" get-body54_729"
" source52_730"
" split?49_731"
" track?55_732"
" idss63_733"
" keyss64_734"
" rhss65_735"
" track-stxs66_736)"
"(let-values(((idss_737) idss63_733))"
"(let-values(((keyss_738) keyss64_734))"
"(let-values(((rhss_739) rhss65_735))"
"(let-values(((track-stxs_740) track-stxs66_736))"
"(let-values(((split?_741) split?49_731))"
"(let-values(((frame-id_742) frame-id50_728))"
"(let-values(((ctx_743) ctx51_726))"
"(let-values(((s_744) source52_730))"
"(let-values(((disarmed-s_745) disarmed-source53_727))"
"(let-values(((get-body_746) get-body54_729))"
"(let-values(((track?_747) track?55_732))"
"(let-values()"
"(let-values(((s-core-stx_748)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_743))))"
"((letrec-values(((loop_749)"
"(lambda(idss_750"
" keyss_751"
" rhss_752"
" track-stxs_753"
" accum-idss_754"
" accum-rhss_755"
" accum-track-stxs_756"
" track?_757)"
"(if(null? idss_750)"
"(let-values()"
"(if(null? accum-idss_754)"
"(let-values()(get-body_746 track?_757))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:663:8_758)"
" rebuild101.1)"
"((track?235_759) track?_757)"
"((s236_760) s_744)"
"((disarmed-s237_761) disarmed-s_745)"
"((temp238_762)"
"(list"
"(datum->syntax$1 s-core-stx_748 'letrec-values)"
"(build-clauses"
" accum-idss_754"
" accum-rhss_755"
" accum-track-stxs_756)"
"(get-body_746 #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?235_759"
" #t"
" s236_760"
" disarmed-s237_761"
" temp238_762)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:663:8_758"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?235_759)"
" s236_760"
" disarmed-s237_761"
" temp238_762))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_768)"
"(expand-context-observer ctx_743)))"
"(if obs_768"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_768 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ids_763)(car idss_750)))"
"(let-values(((expanded-rhs_764)"
"(let-values(((temp239_769)(car rhss_752))"
"((temp240_770)"
"(as-named-context"
" ctx_743"
" ids_763)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp239_769 temp240_770)"
"(expand7.1 temp239_769 temp240_770)))))"
"(let-values(((track-stx_765)(car track-stxs_753)))"
"(let-values(((local-or-forward-references?_766)"
"(reference-record-forward-references?"
" frame-id_742)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_742"
"(car keyss_751))"
"(values))))"
"(let-values(((forward-references?_767)"
"(reference-record-forward-references?"
" frame-id_742)))"
"(if(if(not local-or-forward-references?_766)"
" split?_741"
" #f)"
"(let-values()"
"(begin"
"(if(null? accum-idss_754)"
"(void)"
"(let-values()"
"(error"
"                                                                               \"internal error: accumulated ids not empty\")))"
"(let-values(((...nder/expand/main.rkt:683:8_771)"
" rebuild101.1)"
"((track?241_772) track?_757)"
"((s242_773) s_744)"
"((disarmed-s243_774)"
" disarmed-s_745)"
"((temp244_775)"
"(list"
"(datum->syntax$1"
" s-core-stx_748"
" 'let-values)"
"(list"
"(build-clause"
" ids_763"
" expanded-rhs_764"
" track-stx_765))"
"(loop_749"
"(cdr idss_750)"
"(cdr keyss_751)"
"(cdr rhss_752)"
"(cdr track-stxs_753)"
" null"
" null"
" null"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?241_772"
" #t"
" s242_773"
" disarmed-s243_774"
" temp244_775)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:683:8_771"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?241_772)"
" s242_773"
" disarmed-s243_774"
" temp244_775)))))"
"(if(if(not forward-references?_767)"
"(let-values(((or-part_776) split?_741))"
"(if or-part_776"
" or-part_776"
"(null?(cdr idss_750))))"
" #f)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:693:8_777)"
" rebuild101.1)"
"((track?245_778) track?_757)"
"((s246_779) s_744)"
"((disarmed-s247_780)"
" disarmed-s_745)"
"((temp248_781)"
"(list"
"(datum->syntax$1"
" s-core-stx_748"
" 'letrec-values)"
"(build-clauses"
"(cons ids_763 accum-idss_754)"
"(cons"
" expanded-rhs_764"
" accum-rhss_755)"
"(cons"
" track-stx_765"
" accum-track-stxs_756))"
"(loop_749"
"(cdr idss_750)"
"(cdr keyss_751)"
"(cdr rhss_752)"
"(cdr track-stxs_753)"
" null"
" null"
" null"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?245_778"
" #t"
" s246_779"
" disarmed-s247_780"
" temp248_781)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:693:8_777"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?245_778)"
" s246_779"
" disarmed-s247_780"
" temp248_781))))"
"(let-values()"
"(loop_749"
"(cdr idss_750)"
"(cdr keyss_751)"
"(cdr rhss_752)"
"(cdr track-stxs_753)"
"(cons ids_763 accum-idss_754)"
"(cons expanded-rhs_764 accum-rhss_755)"
"(cons track-stx_765 accum-track-stxs_756)"
" track?_757))))))))))))))))"
" loop_749)"
" idss_737"
" keyss_738"
" rhss_739"
" track-stxs_740"
" null"
" null"
" null"
" track?_747))))))))))))))))"
"(define-values"
"(unpack68.1)"
"(lambda(given-kws_782 given-args_783 idss63_784 keyss64_785 rhss65_786 track-stxs66_787)"
"(let-values(((ctx51_788)(car given-args_783))"
"((given-kws_789)(cdr given-kws_782))"
"((given-args_790)(cdr given-args_783)))"
"(let-values(((disarmed-source53_791)(car given-args_790))"
"((given-kws_792)(cdr given-kws_789))"
"((given-args_793)(cdr given-args_790)))"
"(let-values(((frame-id50_794)(car given-args_793))"
"((given-kws_795)(cdr given-kws_792))"
"((given-args_796)(cdr given-args_793)))"
"(let-values(((get-body54_797)(car given-args_796))"
"((given-kws_798)(cdr given-kws_795))"
"((given-args_799)(cdr given-args_796)))"
"(let-values(((source52_800)(car given-args_799))"
"((given-kws_801)(cdr given-kws_798))"
"((given-args_802)(cdr given-args_799)))"
"(let-values(((split?49_803)(car given-args_802))"
"((given-kws_804)(cdr given-kws_801))"
"((given-args_805)(cdr given-args_802)))"
"(let-values(((track?55_806)(car given-args_805)))"
"(expand-and-split-bindings-by-reference67.1"
" ctx51_788"
" disarmed-source53_791"
" frame-id50_794"
" get-body54_797"
" source52_800"
" split?49_803"
" track?55_806"
" idss63_784"
" keyss64_785"
" rhss65_786"
" track-stxs66_787))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference69.1)"
"(lifted/23.1"
"(lambda(given-kws_807 given-argc_808)"
"(if(= given-argc_808 6)"
"(let-values(((l2_809) given-kws_807))"
"(if(pair? l2_809)"
"(if(eq?(car l2_809) '#:ctx)"
"(let-values(((l2_810)(cdr l2_809)))"
"(if(pair? l2_810)"
"(if(eq?(car l2_810) '#:disarmed-source)"
"(let-values(((l2_811)(cdr l2_810)))"
"(if(pair? l2_811)"
"(if(eq?(car l2_811) '#:frame-id)"
"(let-values(((l2_812)(cdr l2_811)))"
"(if(pair? l2_812)"
"(if(eq?(car l2_812) '#:get-body)"
"(let-values(((l2_813)(cdr l2_812)))"
"(if(pair? l2_813)"
"(if(eq?(car l2_813) '#:source)"
"(let-values(((l2_814)(cdr l2_813)))"
"(if(pair? l2_814)"
"(if(eq?(car l2_814) '#:split?)"
"(let-values(((l2_815)(cdr l2_814)))"
"(if(pair? l2_815)"
"(if(eq?(car l2_815) '#:track?)(null?(cdr l2_815)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_816 given-args_817 idss_818 keyss_819 rhss_820 track-stxs_821)"
"(unpack68.1 given-kws_816 given-args_817 idss_818 keyss_819 rhss_820 track-stxs_821)))"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_822 accum-rhss_823 accum-track-stxs_824)"
"(map2 build-clause(alt-reverse accum-idss_822)(alt-reverse accum-rhss_823)(alt-reverse accum-track-stxs_824))))"
"(define-values"
"(build-clause)"
"(lambda(ids_825 rhs_826 track-stx_827)"
"(let-values(((clause_828)(datum->syntax$1 #f(list ids_825 rhs_826))))"
"(if track-stx_827(syntax-track-origin$1 clause_828 track-stx_827) clause_828))))"
"(define-values"
"(no-binds)"
"(lambda(expr_829 s_830 phase_831)"
"(let-values(((s-core-stx_832)(syntax-shift-phase-level$1 core-stx phase_831)))"
"(let-values(((s-runtime-stx_833)(syntax-shift-phase-level$1 runtime-stx phase_831)))"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1 s-core-stx_832 'begin)"
" expr_829"
"(list(datum->syntax$1 s-core-stx_832 '#%app)(datum->syntax$1 s-runtime-stx_833 'values)))"
" s_830)))))"
"(define-values"
"(expand/capture-lifts78.1)"
"(lambda(begin-form?71_834"
" begin-form?74_835"
" expand-lifts?70_836"
" expand-lifts?73_837"
" lift-key72_838"
" lift-key75_839"
" s76_840"
" ctx77_841)"
"(let-values(((s_842) s76_840))"
"(let-values(((ctx_843) ctx77_841))"
"(let-values(((expand-lifts?_844)(if expand-lifts?73_837 expand-lifts?70_836 #f)))"
"(let-values(((begin-form?_845)(if begin-form?74_835 begin-form?71_834 #f)))"
"(let-values(((lift-key_846)(if lift-key75_839 lift-key72_838(generate-lift-key))))"
"(let-values()"
"(let-values(((context_847)(expand-context-context ctx_843)))"
"(let-values(((phase_848)(expand-context-phase ctx_843)))"
"(let-values(((local?_849)(not begin-form?_845)))"
"((letrec-values(((loop_850)"
"(lambda(s_851)"
"(let-values(((lift-env_852)(if local?_849(box empty-env) #f)))"
"(let-values(((lift-ctx_853)"
"(let-values(((...nder/expand/main.rkt:746:21_857)"
" make-lift-context8.1)"
"((temp249_858)"
"(if local?_849"
"(make-local-lift"
" lift-env_852"
"(root-expand-context-counter ctx_843))"
"(make-top-level-lift ctx_843)))"
"((temp250_859)"
"(if(not local?_849)"
"(eq? context_847 'module)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 temp250_859 #t temp249_858)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:746:21_857"
" keyword-procedure-extract"
" '(#:module*-ok?)"
" 3)"
" '(#:module*-ok?)"
"(list temp250_859)"
" temp249_858)))))"
"(let-values(((capture-ctx_854)"
"(let-values(((the-struct_860) ctx_843))"
"(if(expand-context? the-struct_860)"
"(let-values(((lift-key251_861) lift-key_846)"
"((lifts252_862) lift-ctx_853)"
"((lift-envs253_863)"
"(if local?_849"
"(cons"
" lift-env_852"
"(expand-context-lift-envs ctx_843))"
"(expand-context-lift-envs ctx_843)))"
"((module-lifts254_864)"
"(if(let-values(((or-part_865)"
" local?_849))"
"(if or-part_865"
" or-part_865"
"(not"
"(memq"
" context_847"
" '(top-level module)))))"
"(expand-context-module-lifts ctx_843)"
" lift-ctx_853)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_860)"
"(root-expand-context-post-expansion-scope"
" the-struct_860)"
"(root-expand-context-top-level-bind-scope"
" the-struct_860)"
"(root-expand-context-all-scopes-stx the-struct_860)"
"(root-expand-context-use-site-scopes the-struct_860)"
"(root-expand-context-defined-syms the-struct_860)"
"(root-expand-context-frame-id the-struct_860)"
"(root-expand-context-counter the-struct_860)"
" lift-key251_861"
"(expand-context-context the-struct_860)"
"(expand-context-phase the-struct_860)"
"(expand-context-namespace the-struct_860)"
"(expand-context-env the-struct_860)"
"(expand-context-post-expansion-scope-action"
" the-struct_860)"
"(expand-context-scopes the-struct_860)"
"(expand-context-def-ctx-scopes the-struct_860)"
"(expand-context-reference-records the-struct_860)"
"(expand-context-only-immediate? the-struct_860)"
"(expand-context-just-once? the-struct_860)"
"(expand-context-module-begin-k the-struct_860)"
"(expand-context-need-eventually-defined"
" the-struct_860)"
"(expand-context-allow-unbound? the-struct_860)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_860)"
"(expand-context-stops the-struct_860)"
"(expand-context-current-introduction-scopes"
" the-struct_860)"
"(expand-context-declared-submodule-names"
" the-struct_860)"
" lifts252_862"
" lift-envs253_863"
" module-lifts254_864"
"(expand-context-require-lifts the-struct_860)"
"(expand-context-to-module-lifts the-struct_860)"
"(expand-context-requires+provides the-struct_860)"
"(expand-context-name the-struct_860)"
"(expand-context-observer the-struct_860)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"expand-context?\""
" the-struct_860)))))"
"(let-values(((exp-s_855)"
"(let-values(((s255_866) s_851)"
"((capture-ctx256_867) capture-ctx_854))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f s255_866 capture-ctx256_867)"
"(expand7.1 s255_866 capture-ctx256_867)))))"
"(let-values(((lifts_856)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_854))))"
"(if(null? lifts_856)"
"(let-values() exp-s_855)"
"(let-values()"
"(let-values(((with-lifts-s_868)"
"(if begin-form?_845"
"(let-values(((lifts257_869) lifts_856)"
"((exp-s258_870) exp-s_855)"
"((s259_871) s_851)"
"((phase260_872) phase_848))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" lifts257_869"
" exp-s258_870"
" s259_871"
" phase260_872)"
"(wrap-lifts-as-begin17.1"
" lifts257_869"
" exp-s258_870"
" s259_871"
" phase260_872)))"
"(wrap-lifts-as-let"
" lifts_856"
" exp-s_855"
" s_851"
" phase_848))))"
"(begin"
"(let-values(((obs_873)(expand-context-observer ctx_843)))"
"(if obs_873"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_873"
" 'lift-loop"
" with-lifts-s_868))"
"(void)))"
"(void)))"
"(if expand-lifts?_844"
"(loop_850 with-lifts-s_868)"
" with-lifts-s_868)))))))))))))"
" loop_850)"
" s_842))))))))))))"
"(define-values"
"(unpack79.1)"
"(lambda(given-kws_874 given-args_875 s76_876 ctx77_877)"
"(let-values(((begin-form?74_878)(if(pair? given-kws_874)(eq? '#:begin-form?(car given-kws_874)) #f)))"
"(let-values(((begin-form?71_879)(if begin-form?74_878(car given-args_875)(void)))"
"((given-kws_880)(if begin-form?74_878(cdr given-kws_874) given-kws_874))"
"((given-args_881)(if begin-form?74_878(cdr given-args_875) given-args_875)))"
"(let-values(((expand-lifts?73_882)(if(pair? given-kws_880)(eq? '#:expand-lifts?(car given-kws_880)) #f)))"
"(let-values(((expand-lifts?70_883)(if expand-lifts?73_882(car given-args_881)(void)))"
"((given-kws_884)(if expand-lifts?73_882(cdr given-kws_880) given-kws_880))"
"((given-args_885)(if expand-lifts?73_882(cdr given-args_881) given-args_881)))"
"(let-values(((lift-key75_886)(pair? given-kws_884)))"
"(let-values(((lift-key72_887)(if lift-key75_886(car given-args_885)(void))))"
"(expand/capture-lifts78.1"
" begin-form?71_879"
" begin-form?74_878"
" expand-lifts?70_883"
" expand-lifts?73_882"
" lift-key72_887"
" lift-key75_886"
" s76_876"
" ctx77_877)))))))))"
"(define-values"
"(expand/capture-lifts80.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_888 given-argc_889)"
"(if(= given-argc_889 4)"
"(let-values(((l1_890) given-kws_888))"
"(let-values(((l1_891)(if(null? l1_890) l1_890(if(eq?(car l1_890) '#:begin-form?)(cdr l1_890) l1_890))))"
"(let-values(((l1_892) l1_891))"
"(let-values(((l1_893)"
"(if(null? l1_892) l1_892(if(eq?(car l1_892) '#:expand-lifts?)(cdr l1_892) l1_892))))"
"(let-values(((l1_894) l1_893))"
"(let-values(((l1_895)"
"(if(null? l1_894) l1_894(if(eq?(car l1_894) '#:lift-key)(cdr l1_894) l1_894))))"
"(null? l1_895)))))))"
" #f))"
"(case-lambda((given-kws_896 given-args_897 s_898 ctx_899)(unpack79.1 given-kws_896 given-args_897 s_898 ctx_899)))"
" null"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
"(let-values(((expand/capture-lifts_900)(case-lambda((s_901 ctx_902)(unpack79.1 null null s_901 ctx_902)))))"
" expand/capture-lifts_900)))"
"(define-values"
"(expand-transformer91.1)"
"(lambda(begin-form?82_903"
" begin-form?86_904"
" context81_905"
" context85_906"
" expand-lifts?83_907"
" expand-lifts?87_908"
" lift-key84_909"
" lift-key88_910"
" s89_911"
" ctx90_912)"
"(let-values(((s_913) s89_911))"
"(let-values(((ctx_914) ctx90_912))"
"(let-values(((context_915)(if context85_906 context81_905 'expression)))"
"(let-values(((begin-form?_916)(if begin-form?86_904 begin-form?82_903 #f)))"
"(let-values(((expand-lifts?_917)(if expand-lifts?87_908 expand-lifts?83_907 #t)))"
"(let-values(((lift-key_918)(if lift-key88_910 lift-key84_909(generate-lift-key))))"
"(let-values()"
"(let-values(((phase_919)(add1(expand-context-phase ctx_914))))"
"(let-values(((ns_920)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_914) phase_919)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_920 phase_919)(values))))"
"(let-values(((trans-ctx_921)"
"(let-values(((the-struct_922) ctx_914))"
"(if(expand-context? the-struct_922)"
"(let-values(((context266_923) context_915)"
"((scopes267_924) null)"
"((phase268_925) phase_919)"
"((namespace269_926) ns_920)"
"((env270_927) empty-env)"
"((only-immediate?271_928) #f)"
"((post-expansion-scope272_929) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_922)"
" post-expansion-scope272_929"
"(root-expand-context-top-level-bind-scope the-struct_922)"
"(root-expand-context-all-scopes-stx the-struct_922)"
"(root-expand-context-use-site-scopes the-struct_922)"
"(root-expand-context-defined-syms the-struct_922)"
"(root-expand-context-frame-id the-struct_922)"
"(root-expand-context-counter the-struct_922)"
"(root-expand-context-lift-key the-struct_922)"
" context266_923"
" phase268_925"
" namespace269_926"
" env270_927"
"(expand-context-post-expansion-scope-action the-struct_922)"
" scopes267_924"
"(expand-context-def-ctx-scopes the-struct_922)"
"(expand-context-reference-records the-struct_922)"
" only-immediate?271_928"
"(expand-context-just-once? the-struct_922)"
"(expand-context-module-begin-k the-struct_922)"
"(expand-context-need-eventually-defined the-struct_922)"
"(expand-context-allow-unbound? the-struct_922)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_922)"
"(expand-context-stops the-struct_922)"
"(expand-context-current-introduction-scopes the-struct_922)"
"(expand-context-declared-submodule-names the-struct_922)"
"(expand-context-lifts the-struct_922)"
"(expand-context-lift-envs the-struct_922)"
"(expand-context-module-lifts the-struct_922)"
"(expand-context-require-lifts the-struct_922)"
"(expand-context-to-module-lifts the-struct_922)"
"(expand-context-requires+provides the-struct_922)"
"(expand-context-name the-struct_922)"
"(expand-context-observer the-struct_922)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_922)))))"
"(let-values(((...nder/expand/main.rkt:806:2_930) expand/capture-lifts80.1)"
"((s261_931) s_913)"
"((trans-ctx262_932) trans-ctx_921)"
"((expand-lifts?263_933) expand-lifts?_917)"
"((begin-form?264_934) begin-form?_916)"
"((lift-key265_935) lift-key_918))"
"(if(variable-reference-constant?(#%variable-reference expand/capture-lifts80.1))"
"(expand/capture-lifts78.1"
" begin-form?264_934"
" #t"
" expand-lifts?263_933"
" #t"
" lift-key265_935"
" #t"
" s261_931"
" trans-ctx262_932)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:806:2_930"
" keyword-procedure-extract"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
" 4)"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
"(list begin-form?264_934 expand-lifts?263_933 lift-key265_935)"
" s261_931"
" trans-ctx262_932))))))))))))))))"
"(define-values"
"(unpack92.1)"
"(lambda(given-kws_936 given-args_937 s89_938 ctx90_939)"
"(let-values(((begin-form?86_940)(if(pair? given-kws_936)(eq? '#:begin-form?(car given-kws_936)) #f)))"
"(let-values(((begin-form?82_941)(if begin-form?86_940(car given-args_937)(void)))"
"((given-kws_942)(if begin-form?86_940(cdr given-kws_936) given-kws_936))"
"((given-args_943)(if begin-form?86_940(cdr given-args_937) given-args_937)))"
"(let-values(((context85_944)(if(pair? given-kws_942)(eq? '#:context(car given-kws_942)) #f)))"
"(let-values(((context81_945)(if context85_944(car given-args_943)(void)))"
"((given-kws_946)(if context85_944(cdr given-kws_942) given-kws_942))"
"((given-args_947)(if context85_944(cdr given-args_943) given-args_943)))"
"(let-values(((expand-lifts?87_948)"
"(if(pair? given-kws_946)(eq? '#:expand-lifts?(car given-kws_946)) #f)))"
"(let-values(((expand-lifts?83_949)(if expand-lifts?87_948(car given-args_947)(void)))"
"((given-kws_950)(if expand-lifts?87_948(cdr given-kws_946) given-kws_946))"
"((given-args_951)(if expand-lifts?87_948(cdr given-args_947) given-args_947)))"
"(let-values(((lift-key88_952)(pair? given-kws_950)))"
"(let-values(((lift-key84_953)(if lift-key88_952(car given-args_951)(void))))"
"(expand-transformer91.1"
" begin-form?82_941"
" begin-form?86_940"
" context81_945"
" context85_944"
" expand-lifts?83_949"
" expand-lifts?87_948"
" lift-key84_953"
" lift-key88_952"
" s89_938"
" ctx90_939)))))))))))"
"(define-values"
"(expand-transformer93.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_954 given-argc_955)"
"(if(= given-argc_955 4)"
"(let-values(((l1_956) given-kws_954))"
"(let-values(((l1_957)(if(null? l1_956) l1_956(if(eq?(car l1_956) '#:begin-form?)(cdr l1_956) l1_956))))"
"(let-values(((l1_958) l1_957))"
"(let-values(((l1_959)(if(null? l1_958) l1_958(if(eq?(car l1_958) '#:context)(cdr l1_958) l1_958))))"
"(let-values(((l1_960) l1_959))"
"(let-values(((l1_961)"
"(if(null? l1_960) l1_960(if(eq?(car l1_960) '#:expand-lifts?)(cdr l1_960) l1_960))))"
"(let-values(((l1_962) l1_961))"
"(let-values(((l1_963)"
"(if(null? l1_962) l1_962(if(eq?(car l1_962) '#:lift-key)(cdr l1_962) l1_962))))"
"(null? l1_963)))))))))"
" #f))"
"(case-lambda((given-kws_964 given-args_965 s_966 ctx_967)(unpack92.1 given-kws_964 given-args_965 s_966 ctx_967)))"
" null"
" '(#:begin-form? #:context #:expand-lifts? #:lift-key)"
"(let-values(((expand-transformer_968)(case-lambda((s_969 ctx_970)(unpack92.1 null null s_969 ctx_970)))))"
" expand-transformer_968)))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_971 ids_972 ctx_973)"
"(let-values(((exp-rhs_974)"
"(let-values(((rhs273_976) rhs_971)((temp274_977)(as-named-context ctx_973 ids_972)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1 #f #f #f #f #f #f #f #f rhs273_976 temp274_977)"
"(expand-transformer93.1 rhs273_976 temp274_977)))))"
"(let-values(((phase_975)(add1(expand-context-phase ctx_973))))"
"(values"
" exp-rhs_974"
"(eval-for-bindings"
" ids_972"
" exp-rhs_974"
" phase_975"
"(namespace->namespace-at-phase(expand-context-namespace ctx_973) phase_975)"
" ctx_973))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_978 ids_979 ctx_980)"
"(let-values(((exp-rhs_981 vals_982)(expand+eval-for-syntaxes-binding rhs_978 ids_979 ctx_980))) vals_982)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_983 s_984 phase_985 ns_986 ctx_987)"
"(let-values(((compiled_988)"
"(compile-single"
" s_984"
"(let-values(((...nder/expand/main.rkt:837:37_990) make-compile-context16.1)"
"((ns275_991) ns_986)"
"((phase276_992) phase_985))"
"(if(variable-reference-constant?(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1 #f #f #f #f #f #f ns275_991 #t phase276_992 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:837:37_990"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list ns275_991 phase276_992)))))))"
"(let-values(((vals_989)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_987"
" 1/current-namespace"
" ns_986"
" eval-jit-enabled"
" #f)"
"(let-values()(eval-single-top compiled_988 ns_986))))"
" list)))"
"(begin"
"(if(=(length vals_989)(length ids_983))"
"(void)"
"(let-values()"
"              (error \"wrong number of results (\" (length vals_989) \"vs.\" (length ids_983) \")\" \"from\" s_984)))"
" vals_989)))))"
"(define-values"
"(rebuild99.1)"
"(lambda(track?94_993 track?95_994 orig-s96_995 disarmed-orig-s97_996 new98_997)"
"(let-values(((orig-s_998) orig-s96_995))"
"(let-values(((disarmed-orig-s_999) disarmed-orig-s97_996))"
"(let-values(((new_1000) new98_997))"
"(let-values(((track?_1001)(if track?95_994 track?94_993 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1 disarmed-orig-s_999 new_1000 orig-s_998(if track?_1001 orig-s_998 #f))"
" orig-s_998))))))))"
"(define-values"
"(unpack100.1)"
"(lambda(given-kws_1002 given-args_1003 orig-s96_1004 disarmed-orig-s97_1005 new98_1006)"
"(let-values(((track?95_1007)(pair? given-kws_1002)))"
"(let-values(((track?94_1008)(if track?95_1007(car given-args_1003)(void))))"
"(rebuild99.1 track?94_1008 track?95_1007 orig-s96_1004 disarmed-orig-s97_1005 new98_1006)))))"
"(define-values"
"(rebuild101.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_1009 given-argc_1010)"
"(if(= given-argc_1010 5)"
"(let-values(((l1_1011) given-kws_1009))"
"(let-values(((l1_1012)(if(null? l1_1011) l1_1011(if(eq?(car l1_1011) '#:track?)(cdr l1_1011) l1_1011))))"
"(null? l1_1012)))"
" #f))"
"(case-lambda"
"((given-kws_1013 given-args_1014 orig-s_1015 disarmed-orig-s_1016 new_1017)"
"(unpack100.1 given-kws_1013 given-args_1014 orig-s_1015 disarmed-orig-s_1016 new_1017)))"
" null"
" '(#:track?)"
"(let-values(((rebuild_1018)"
"(case-lambda"
"((orig-s_1019 disarmed-orig-s_1020 new_1021)"
"(unpack100.1 null null orig-s_1019 disarmed-orig-s_1020 new_1021)))))"
" rebuild_1018)))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_1022 trans-idss_1023)"
"(if(null? trans-idss_1023)"
"(let-values() s_1022)"
"(let-values()"
"(syntax-property$1"
" s_1022"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_1023)"
"(let-values(((or-part_1024)(syntax-property$1 s_1022 'disappeared-binding)))"
"(if or-part_1024 or-part_1024 null))))))))"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= 1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$1 p-core-stx_3 'module*) phase_2 phase_2)"
" #f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(alt-reverse"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((sym_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_3 sym_8))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 0 'frame-id)"
"(make-struct-field-accessor -ref_5 1 'scope)"
"(make-struct-field-accessor -ref_5 2 'add-scope?)"
"(make-struct-field-accessor -ref_5 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_38 make-_39 ?_40 -ref_41 -set!_42)"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))"
"(values"
" struct:_38"
" make-_39"
" ?_40"
"(make-struct-field-accessor -ref_41 0 'id)"
"(make-struct-field-accessor -ref_41 1 'sym)"
"(make-struct-field-accessor -ref_41 2 'value)"
"(make-struct-field-accessor -ref_41 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_74)"
"(lambda(parent-ctx3_75 add-scope?4_76 parent-ctx5_77 add-scope?6_78)"
"(let-values(((parent-ctx_79)(if parent-ctx5_77 parent-ctx3_75 #f)))"
"(let-values(((add-scope?_80)(if add-scope?6_78 add-scope?4_76 #t)))"
"(let-values()"
"(let-values(((ctx_81)"
"(let-values(((temp38_85) 'syntax-local-make-definition-context))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp38_85 #t)"
"(get-current-expand-context8.1 temp38_85)))))"
"(let-values(((frame-id_82)"
"(let-values(((or-part_86)(root-expand-context-frame-id ctx_81)))"
"(if or-part_86 or-part_86(gensym)))))"
"(let-values(((sc_83)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_84)(expand-context-def-ctx-scopes ctx_81)))"
"(begin"
"(if def-ctx-scopes_84"
"(let-values()(set-box! def-ctx-scopes_84(cons sc_83(unbox def-ctx-scopes_84))))"
"(void))"
"(internal-definition-context1.1 frame-id_82 sc_83 add-scope?_80(box null)))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_74 #f #f #f #f))"
"((parent-ctx_87 add-scope?4_88)(syntax-local-make-definition-context7_74 parent-ctx_87 add-scope?4_88 #t #t))"
"((parent-ctx3_89)(syntax-local-make-definition-context7_74 parent-ctx3_89 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_90 s_91 intdef_92)"
"(let-values((()"
"(begin"
"(if(if(list? ids_90)(andmap2 identifier? ids_90) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_90)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_100)(not s_91)))(if or-part_100 or-part_100(syntax?$1 s_91)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_91)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_92)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                             \"internal-definition-context?\""
" intdef_92)))"
"(values))))"
"(let-values(((ctx_93)"
"(let-values(((temp39_101) 'local-expand))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp39_101 #t)"
"(get-current-expand-context8.1 temp39_101)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_102)(expand-context-observer ctx_93)))"
"(if obs_102"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_102 'local-bind ids_90))(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_94)(expand-context-phase ctx_93)))"
"(let-values(((intdef-env_95)(add-intdef-bindings(expand-context-env ctx_93) intdef_92)))"
"(let-values(((intdef-ids_96)"
"(alt-reverse"
"(let-values(((lst_103) ids_90))"
"(begin"
"(if(list? lst_103)(void)(let-values()(in-list lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(fold-var_105 lst_106)"
"(if(pair? lst_106)"
"(let-values(((id_107)(unsafe-car lst_106)))"
"(if #t"
"(let-values(((fold-var_108)"
"(let-values(((fold-var_109) fold-var_105))"
"(let-values(((fold-var_110)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_111)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_107"
" ctx_93)"
" ctx_93)))"
"(let-values(((...finition-context.rkt:65:23_112)"
" add-intdef-scopes23.1)"
"((pre-id40_113)"
" pre-id_111)"
"((intdef41_114)"
" intdef_92)"
"((temp42_115)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp42_115"
" #t"
" pre-id40_113"
" intdef41_114)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:65:23_112"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list"
" temp42_115)"
" pre-id40_113"
" intdef41_114)))))"
" fold-var_109))))"
"(values fold-var_110)))))"
"(if #t"
"(for-loop_104 fold-var_108(unsafe-cdr lst_106))"
" fold-var_108))"
" fold-var_105))"
" fold-var_105))))"
" for-loop_104)"
" null"
" lst_103))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_116)(expand-context-observer ctx_93)))"
"(if obs_116"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_116 'rename-list intdef-ids_96))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((syms_97)"
"(alt-reverse"
"(let-values(((lst_117) intdef-ids_96))"
"(begin"
"(if(list? lst_117)(void)(let-values()(in-list lst_117)))"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 lst_120)"
"(if(pair? lst_120)"
"(let-values(((intdef-id_121)(unsafe-car lst_120)))"
"(if #t"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123)"
" fold-var_119))"
"(let-values(((fold-var_124)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...finition-context.rkt:68:17_125)"
" add-local-binding!35.1)"
"((intdef-id43_126)"
" intdef-id_121)"
"((phase44_127)"
" phase_94)"
"((temp45_128)"
"(root-expand-context-counter"
" ctx_93))"
"((temp46_129)"
"(internal-definition-context-frame-id"
" intdef_92)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" temp46_129"
" #t"
" #f"
" #f"
" intdef-id43_126"
" phase44_127"
" temp45_128)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:68:17_125"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list"
" temp46_129)"
" intdef-id43_126"
" phase44_127"
" temp45_128))))"
" fold-var_123))))"
"(values fold-var_124)))))"
"(if #t"
"(for-loop_118 fold-var_122(unsafe-cdr lst_120))"
" fold-var_122))"
" fold-var_119))"
" fold-var_119))))"
" for-loop_118)"
" null"
" lst_117))))))"
"(let-values(((vals_98)"
"(if s_91"
"(let-values()"
"(let-values(((input-s_130)"
"(flip-introduction-scopes"
"(let-values(((...finition-context.rkt:73:48_132)"
" add-intdef-scopes23.1)"
"((s47_133) s_91)"
"((intdef48_134) intdef_92)"
"((temp49_135) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp49_135"
" #t"
" s47_133"
" intdef48_134)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:73:48_132"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list temp49_135)"
" s47_133"
" intdef48_134)))"
" ctx_93)))"
"(let-values(((tmp-env_131)"
"(let-values(((lst_136) syms_97))"
"(begin"
"(if(list? lst_136)"
"(void)"
"(let-values()(in-list lst_136)))"
"((letrec-values(((for-loop_137)"
"(lambda(env_138 lst_139)"
"(if(pair? lst_139)"
"(let-values(((sym_140)"
"(unsafe-car lst_139)))"
"(if #t"
"(let-values(((env_141)"
"(let-values(((env_142)"
" env_138))"
"(let-values(((env_143)"
"(let-values()"
"(hash-set"
" env_142"
" sym_140"
" variable))))"
"(values"
" env_143)))))"
"(if #t"
"(for-loop_137"
" env_141"
"(unsafe-cdr lst_139))"
" env_141))"
" env_138))"
" env_138))))"
" for-loop_137)"
" intdef-env_95"
" lst_136)))))"
"(eval-for-syntaxes-binding"
" input-s_130"
" ids_90"
"(let-values(((...finition-context.rkt:78:33_144)"
" make-local-expand-context35.1)"
"((temp50_145)"
"(let-values(((the-struct_148) ctx_93))"
"(if(expand-context? the-struct_148)"
"(let-values(((env53_149) tmp-env_131))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_148)"
"(root-expand-context-post-expansion-scope"
" the-struct_148)"
"(root-expand-context-top-level-bind-scope"
" the-struct_148)"
"(root-expand-context-all-scopes-stx the-struct_148)"
"(root-expand-context-use-site-scopes the-struct_148)"
"(root-expand-context-defined-syms the-struct_148)"
"(root-expand-context-frame-id the-struct_148)"
"(root-expand-context-counter the-struct_148)"
"(root-expand-context-lift-key the-struct_148)"
"(expand-context-context the-struct_148)"
"(expand-context-phase the-struct_148)"
"(expand-context-namespace the-struct_148)"
" env53_149"
"(expand-context-post-expansion-scope-action"
" the-struct_148)"
"(expand-context-scopes the-struct_148)"
"(expand-context-def-ctx-scopes the-struct_148)"
"(expand-context-reference-records the-struct_148)"
"(expand-context-only-immediate? the-struct_148)"
"(expand-context-just-once? the-struct_148)"
"(expand-context-module-begin-k the-struct_148)"
"(expand-context-need-eventually-defined"
" the-struct_148)"
"(expand-context-allow-unbound? the-struct_148)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_148)"
"(expand-context-stops the-struct_148)"
"(expand-context-current-introduction-scopes"
" the-struct_148)"
"(expand-context-declared-submodule-names"
" the-struct_148)"
"(expand-context-lifts the-struct_148)"
"(expand-context-lift-envs the-struct_148)"
"(expand-context-module-lifts the-struct_148)"
"(expand-context-require-lifts the-struct_148)"
"(expand-context-to-module-lifts the-struct_148)"
"(expand-context-requires+provides the-struct_148)"
"(expand-context-name the-struct_148)"
"(expand-context-observer the-struct_148)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_148))))"
"((temp51_146) 'expression)"
"((intdef52_147) intdef_92))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" temp51_146"
" intdef52_147"
" #f"
" #f"
" #f"
" #f"
" temp50_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:78:33_144"
" keyword-procedure-extract"
" '(#:context #:intdefs)"
" 3)"
" '(#:context #:intdefs)"
"(list temp51_146 intdef52_147)"
" temp50_145)))))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_150) ids_90))"
"(begin"
"(if(list? lst_150)(void)(let-values()(in-list lst_150)))"
"((letrec-values(((for-loop_151)"
"(lambda(fold-var_152 lst_153)"
"(if(pair? lst_153)"
"(let-values(((id_154)(unsafe-car lst_153)))"
"(if #t"
"(let-values(((fold-var_155)"
"(let-values(((fold-var_156)"
" fold-var_152))"
"(let-values(((fold-var_157)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_156))))"
"(values fold-var_157)))))"
"(if #t"
"(for-loop_151"
" fold-var_155"
"(unsafe-cdr lst_153))"
" fold-var_155))"
" fold-var_152))"
" fold-var_152))))"
" for-loop_151)"
" null"
" lst_150))))))))"
"(let-values(((env-mixins_99)(internal-definition-context-env-mixins intdef_92)))"
"(begin"
"(set-box!"
" env-mixins_99"
"(append"
"(alt-reverse"
"(let-values(((lst_158) intdef-ids_96)((lst_159) syms_97)((lst_160) vals_98))"
"(begin"
"(if(list? lst_158)(void)(let-values()(in-list lst_158)))"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"(if(list? lst_160)(void)(let-values()(in-list lst_160)))"
"((letrec-values(((for-loop_161)"
"(lambda(fold-var_162 lst_163 lst_164 lst_165)"
"(if(if(pair? lst_163)"
"(if(pair? lst_164)(pair? lst_165) #f)"
" #f)"
"(let-values(((intdef-id_166)(unsafe-car lst_163))"
"((sym_167)(unsafe-car lst_164))"
"((val_168)(unsafe-car lst_165)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_169)"
"(let-values(((fold-var_170) fold-var_162))"
"(let-values(((fold-var_171)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_168"
" intdef-id_166"
" phase_94)"
"(env-mixin2.1"
" intdef-id_166"
" sym_167"
" val_168"
"(make-weak-hasheq))))"
" fold-var_170))))"
"(values fold-var_171)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_161"
" fold-var_169"
"(unsafe-cdr lst_163)"
"(unsafe-cdr lst_164)"
"(unsafe-cdr lst_165))"
" fold-var_169))"
" fold-var_162))"
" fold-var_162))))"
" for-loop_161)"
" null"
" lst_158"
" lst_159"
" lst_160))))"
"(unbox env-mixins_99)))"
"(let-values(((obs_172)(expand-context-observer ctx_93)))"
"(if obs_172"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_172 'exit-local-bind))(void)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_173)"
"(begin"
"(if(1/internal-definition-context? intdef_173)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_173)))"
"(alt-reverse"
"(let-values(((lst_174)(unbox(internal-definition-context-env-mixins intdef_173))))"
"(begin"
"(if(list? lst_174)(void)(let-values()(in-list lst_174)))"
"((letrec-values(((for-loop_175)"
"(lambda(fold-var_176 lst_177)"
"(if(pair? lst_177)"
"(let-values(((env-mixin_178)(unsafe-car lst_177)))"
"(if #t"
"(let-values(((fold-var_179)"
"(let-values(((fold-var_180) fold-var_176))"
"(let-values(((fold-var_181)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_178))"
" fold-var_180))))"
"(values fold-var_181)))))"
"(if #t(for-loop_175 fold-var_179(unsafe-cdr lst_177)) fold-var_179))"
" fold-var_176))"
" fold-var_176))))"
" for-loop_175)"
" null"
" lst_174)))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_182)"
"(lambda(intdef11_183 s12_184 mode9_185 mode10_186)"
"(let-values(((intdef_187) intdef11_183))"
"(let-values(((s_188) s12_184))"
"(let-values(((mode_189)(if mode10_186 mode9_185 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_187)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_187)))"
"(if(syntax?$1 s_188)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_188)))"
"(let-values(((...finition-context.rkt:106:2_190) add-intdef-scopes23.1)"
"((s54_191) s_188)"
"((intdef55_192) intdef_187)"
"((temp56_193)"
"(let-values(((tmp_194) mode_189))"
"(if(equal? tmp_194 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_194 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_194 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_189))))))))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 temp56_193 #t #f #f s54_191 intdef55_192)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:106:2_190"
" keyword-procedure-extract"
" '(#:action)"
" 4)"
" '(#:action)"
"(list temp56_193)"
" s54_191"
" intdef55_192)))))))))))"
"(case-lambda"
"((intdef_195 s_196)(internal-definition-context-introduce13_182 intdef_195 s_196 #f #f))"
"((intdef_197 s_198 mode9_199)(internal-definition-context-introduce13_182 intdef_197 s_198 mode9_199 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_200)"
"(begin"
"(if(1/internal-definition-context? intdef_200)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_200)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_201 intdef_202)"
"(begin"
"(if(identifier? id_201)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_201)))"
"(if(let-values(((or-part_203)(1/internal-definition-context? intdef_202)))"
"(if or-part_203 or-part_203(if(list? intdef_202)(andmap2 1/internal-definition-context? intdef_202) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_202)))"
"(let-values(((pos->vals_204 pos-next_205 init_206 pos-cont?_207 val-cont?_208 all-cont?_209)"
"(make-sequence '(intdef)(in-intdefs intdef_202))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_210)"
"(lambda(id_211 pos_212)"
"(if(if pos-cont?_207(pos-cont?_207 pos_212) #t)"
"(let-values(((intdef_213)(pos->vals_204 pos_212)))"
"(if(if val-cont?_208(val-cont?_208 intdef_213) #t)"
"(let-values(((id_214)"
"(let-values(((id_215) id_211))"
"(let-values(((id_216)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_213"
" id_215"
" 'remove))))"
"(values id_216)))))"
"(if(if all-cont?_209(all-cont?_209 pos_212 intdef_213) #t)"
"(for-loop_210 id_214(pos-next_205 pos_212))"
" id_214))"
" id_211))"
" id_211))))"
" for-loop_210)"
" id_201"
" init_206))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_217)"
"(if(not intdefs_217)"
"(let-values()(in-list null))"
"(if(list? intdefs_217)"
"(let-values()(in-list(alt-reverse intdefs_217)))"
"(let-values()(in-value intdefs_217))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_218 intdefs_219)"
"(let-values(((pos->vals_220 pos-next_221 init_222 pos-cont?_223 val-cont?_224 all-cont?_225)"
"(make-sequence '(intdef)(in-intdefs intdefs_219))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_226)"
"(lambda(env_227 pos_228)"
"(if(if pos-cont?_223(pos-cont?_223 pos_228) #t)"
"(let-values(((intdef_229)(pos->vals_220 pos_228)))"
"(if(if val-cont?_224(val-cont?_224 intdef_229) #t)"
"(let-values(((env_230)"
"(let-values(((env_231) env_227))"
"(let-values(((env_232)"
"(let-values()"
"(let-values(((env-mixins_233)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_229))))"
"((letrec-values(((loop_234)"
"(lambda(env_235 env-mixins_236)"
"(if(null? env-mixins_236)"
"(let-values() env_235)"
"(let-values()"
"(let-values(((env-mixin_237)"
"(car"
" env-mixins_236)))"
"(let-values(((or-part_238)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" #f)))"
"(if or-part_238"
" or-part_238"
"(let-values(((new-env_239)"
"(env-extend"
"(loop_234"
" env_235"
"(cdr"
" env-mixins_236))"
"(env-mixin-sym"
" env-mixin_237)"
"(env-mixin-value"
" env-mixin_237))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" new-env_239)"
" new-env_239))))))))))"
" loop_234)"
" env_231"
" env-mixins_233)))))"
"(values env_232)))))"
"(if(if all-cont?_225(all-cont?_225 pos_228 intdef_229) #t)"
"(for-loop_226 env_230(pos-next_221 pos_228))"
" env_230))"
" env_227))"
" env_227))))"
" for-loop_226)"
" env_218"
" init_222)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_240 action18_241 always?15_242 always?17_243 s19_244 intdefs20_245)"
"(let-values(((s_246) s19_244))"
"(let-values(((intdefs_247) intdefs20_245))"
"(let-values(((always?_248)(if always?17_243 always?15_242 #f)))"
"(let-values(((action_249)(if action18_241 action16_240 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_250 pos-next_251 init_252 pos-cont?_253 val-cont?_254 all-cont?_255)"
"(make-sequence '(intdef)(in-intdefs intdefs_247))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_256)"
"(lambda(s_257 pos_258)"
"(if(if pos-cont?_253(pos-cont?_253 pos_258) #t)"
"(let-values(((intdef_259)(pos->vals_250 pos_258)))"
"(if(if val-cont?_254(val-cont?_254 intdef_259) #t)"
"(let-values(((s_260)"
"(let-values(((s_261) s_257))"
"(if(let-values(((or-part_262) always?_248))"
"(if or-part_262"
" or-part_262"
"(internal-definition-context-add-scope?"
" intdef_259)))"
"(let-values(((s_263) s_261))"
"(let-values(((s_264)"
"(let-values()"
"(action_249"
" s_263"
"(internal-definition-context-scope"
" intdef_259)))))"
"(values s_264)))"
" s_261))))"
"(if(if all-cont?_255(all-cont?_255 pos_258 intdef_259) #t)"
"(for-loop_256 s_260(pos-next_251 pos_258))"
" s_260))"
" s_257))"
" s_257))))"
" for-loop_256)"
" s_246"
" init_252))))))))))"
"(define-values"
"(unpack22.1)"
"(lambda(given-kws_265 given-args_266 s19_267 intdefs20_268)"
"(let-values(((action18_269)(if(pair? given-kws_265)(eq? '#:action(car given-kws_265)) #f)))"
"(let-values(((action16_270)(if action18_269(car given-args_266)(void)))"
"((given-kws_271)(if action18_269(cdr given-kws_265) given-kws_265))"
"((given-args_272)(if action18_269(cdr given-args_266) given-args_266)))"
"(let-values(((always?17_273)(pair? given-kws_271)))"
"(let-values(((always?15_274)(if always?17_273(car given-args_272)(void))))"
"(add-intdef-scopes21.1 action16_270 action18_269 always?15_274 always?17_273 s19_267 intdefs20_268)))))))"
"(define-values"
"(add-intdef-scopes23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_275 given-argc_276)"
"(if(= given-argc_276 4)"
"(let-values(((l1_277) given-kws_275))"
"(let-values(((l1_278)(if(null? l1_277) l1_277(if(eq?(car l1_277) '#:action)(cdr l1_277) l1_277))))"
"(let-values(((l1_279) l1_278))"
"(let-values(((l1_280)(if(null? l1_279) l1_279(if(eq?(car l1_279) '#:always?)(cdr l1_279) l1_279))))"
"(null? l1_280)))))"
" #f))"
"(case-lambda"
"((given-kws_281 given-args_282 s_283 intdefs_284)(unpack22.1 given-kws_281 given-args_282 s_283 intdefs_284)))"
" null"
" '(#:action #:always?)"
"(let-values(((add-intdef-scopes_285)(case-lambda((s_286 intdefs_287)(unpack22.1 null null s_286 intdefs_287)))))"
" add-intdef-scopes_285)))"
"(define-values"
"(lifted/1.1$9)"
"(make-required"
" 'make-local-expand-context"
"(case-lambda((self_288 ctx_289)(apply missing-kw self_288 ctx_289 null)))"
" #f"
" #f))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_290 intdefs26_291 phase25_292 phase29_293 stop-ids27_294 stop-ids31_295 ctx32_296)"
"(let-values(((ctx_297) ctx32_296))"
"(let-values(((context_298) context24_290))"
"(let-values(((phase_299)(if phase29_293 phase25_292(expand-context-phase ctx_297))))"
"(let-values(((intdefs_300) intdefs26_291))"
"(let-values(((stop-ids_301)(if stop-ids31_295 stop-ids27_294 #f)))"
"(let-values()"
"(let-values(((same-kind?_302)"
"(let-values(((or-part_304)(eq? context_298(expand-context-context ctx_297))))"
"(if or-part_304"
" or-part_304"
"(if(list? context_298)(list?(expand-context-context ctx_297)) #f)))))"
"(let-values(((all-stop-ids_303)"
"(if stop-ids_301(stop-ids->all-stop-ids stop-ids_301 phase_299) #f)))"
"(let-values(((the-struct_305) ctx_297))"
"(if(expand-context? the-struct_305)"
"(let-values(((context57_306) context_298)"
"((env58_307)(add-intdef-bindings(expand-context-env ctx_297) intdefs_300))"
"((use-site-scopes59_308)"
"(if(let-values(((or-part_319)(eq? context_298 'module)))"
"(if or-part_319 or-part_319(list? context_298)))"
"(let-values(((or-part_320)(root-expand-context-use-site-scopes ctx_297)))"
"(if or-part_320 or-part_320(box null)))"
" #f))"
"((frame-id60_309)"
"(if same-kind?_302"
"(let-values()(root-expand-context-frame-id ctx_297))"
"(if(pair? intdefs_300)"
"(let-values()(internal-definition-context-frame-id(car intdefs_300)))"
"(let-values() #f))))"
"((post-expansion-scope61_310)"
"(if intdefs_300"
"(new-scope 'macro)"
"(if same-kind?_302"
"(if(memq context_298 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_297)"
" #f)"
" #f)))"
"((post-expansion-scope-action62_311)"
"(if intdefs_300"
"(lambda(s_321 placeholder-sc_322)"
"(let-values(((s70_323) s_321)((intdefs71_324) intdefs_300))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f s70_323 intdefs71_324)"
"(add-intdef-scopes23.1 s70_323 intdefs71_324))))"
"(expand-context-post-expansion-scope-action ctx_297)))"
"((scopes63_312)"
"(append"
"(if(expand-context-def-ctx-scopes ctx_297)"
"(unbox(expand-context-def-ctx-scopes ctx_297))"
" null)"
"(expand-context-scopes ctx_297)))"
"((only-immediate?64_313)(not stop-ids_301))"
"((just-once?65_314) #f)"
"((preserve-#%expression-and-do-not-add-#%top?66_315) #t)"
"((stops67_316)"
"(free-id-set"
" phase_299"
"(let-values(((or-part_325) all-stop-ids_303))"
"(if or-part_325 or-part_325 null))))"
"((current-introduction-scopes68_317) null)"
"((all-scopes-stx69_318)"
"(let-values(((temp72_326)(root-expand-context-all-scopes-stx ctx_297))"
"((intdefs73_327) intdefs_300))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f temp72_326 intdefs73_327)"
"(add-intdef-scopes23.1 temp72_326 intdefs73_327)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_305)"
" post-expansion-scope61_310"
"(root-expand-context-top-level-bind-scope the-struct_305)"
" all-scopes-stx69_318"
" use-site-scopes59_308"
"(root-expand-context-defined-syms the-struct_305)"
" frame-id60_309"
"(root-expand-context-counter the-struct_305)"
"(root-expand-context-lift-key the-struct_305)"
" context57_306"
"(expand-context-phase the-struct_305)"
"(expand-context-namespace the-struct_305)"
" env58_307"
" post-expansion-scope-action62_311"
" scopes63_312"
"(expand-context-def-ctx-scopes the-struct_305)"
"(expand-context-reference-records the-struct_305)"
" only-immediate?64_313"
" just-once?65_314"
"(expand-context-module-begin-k the-struct_305)"
"(expand-context-need-eventually-defined the-struct_305)"
"(expand-context-allow-unbound? the-struct_305)"
" preserve-#%expression-and-do-not-add-#%top?66_315"
" stops67_316"
" current-introduction-scopes68_317"
"(expand-context-declared-submodule-names the-struct_305)"
"(expand-context-lifts the-struct_305)"
"(expand-context-lift-envs the-struct_305)"
"(expand-context-module-lifts the-struct_305)"
"(expand-context-require-lifts the-struct_305)"
"(expand-context-to-module-lifts the-struct_305)"
"(expand-context-requires+provides the-struct_305)"
"(expand-context-name the-struct_305)"
"(expand-context-observer the-struct_305)))"
"                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_305)))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_328 given-args_329 ctx32_330)"
"(let-values(((context24_331)(car given-args_329))"
"((given-kws_332)(cdr given-kws_328))"
"((given-args_333)(cdr given-args_329)))"
"(let-values(((intdefs26_334)(car given-args_333))"
"((given-kws_335)(cdr given-kws_332))"
"((given-args_336)(cdr given-args_333)))"
"(let-values(((phase29_337)(if(pair? given-kws_335)(eq? '#:phase(car given-kws_335)) #f)))"
"(let-values(((phase25_338)(if phase29_337(car given-args_336)(void)))"
"((given-kws_339)(if phase29_337(cdr given-kws_335) given-kws_335))"
"((given-args_340)(if phase29_337(cdr given-args_336) given-args_336)))"
"(let-values(((stop-ids31_341)(pair? given-kws_339)))"
"(let-values(((stop-ids27_342)(if stop-ids31_341(car given-args_340)(void))))"
"(make-local-expand-context33.1"
" context24_331"
" intdefs26_334"
" phase25_338"
" phase29_337"
" stop-ids27_342"
" stop-ids31_341"
" ctx32_330)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/1.1$9"
"(lambda(given-kws_343 given-argc_344)"
"(if(= given-argc_344 3)"
"(subsets? '(#:context #:intdefs) given-kws_343 '(#:context #:intdefs #:phase #:stop-ids))"
" #f))"
"(case-lambda((given-kws_345 given-args_346 ctx_347)(unpack34.1 given-kws_345 given-args_346 ctx_347)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_348 ctx_349)(flip-scopes s_348(expand-context-current-introduction-scopes ctx_349))))"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(if(let-values(((...and/syntax-local.rkt:63:7_3) get-current-expand-context8.1)((temp60_4) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp60_4 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:63:7_3"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp60_4))))"
" #t"
" #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_5)"
"(let-values(((...and/syntax-local.rkt:66:14_6) get-current-expand-context8.1)((temp61_7) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp61_7 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:66:14_6"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp61_7))))))"
"(if ctx_5(if(expand-context-lifts ctx_5) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_8)"
"(let-values(((...and/syntax-local.rkt:72:14_9) get-current-expand-context8.1)((temp62_10) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp62_10 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:72:14_9"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp62_10))))))"
"(if ctx_8(if(expand-context-to-module-lifts ctx_8) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_11)"
"(let-values(((...and/syntax-local.rkt:78:14_12) get-current-expand-context8.1)((temp63_13) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp63_13 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:78:14_12"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp63_13))))))"
"(if ctx_11(if(expand-context-requires+provides ctx_11) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_14)"
"(let-values(((temp64_15) 'syntax-local-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp64_15 #t)"
"(get-current-expand-context8.1 temp64_15)))))"
"(expand-context-context ctx_14))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_16)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_16)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_16)))"
"(values))))"
"(let-values(((ctx_17)"
"(let-values(((temp65_18) 'syntax-local-introduce))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp65_18 #t)"
"(get-current-expand-context8.1 temp65_18)))))"
"(flip-introduction-scopes s_16 ctx_17)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_19)"
"(let-values((()"
"(begin"
"(if(identifier? id_19)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_19)))"
"(values))))"
"(let-values(((ctx_20)"
"(let-values(((temp66_21) 'syntax-local-identifier-as-binding))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp66_21 #t)"
"(get-current-expand-context8.1 temp66_21)))))"
"(remove-use-site-scopes id_19 ctx_20)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((...and/syntax-local.rkt:100:14_23) get-current-expand-context8.1)((temp67_24) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp67_24 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:100:14_23"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp67_24))))))"
"(if ctx_22(expand-context-phase ctx_22) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_25)"
"(let-values(((temp68_27) 'syntax-local-name))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp68_27 #t)"
"(get-current-expand-context8.1 temp68_27)))))"
"(let-values(((id_26)(expand-context-name ctx_25)))"
"(if id_26(datum->syntax$1 #f(syntax-e$1 id_26) id_26) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_28)"
"(lambda(as-use-site?1_29 as-use-site?2_30)"
"(let-values(((as-use-site?_31)(if as-use-site?2_30 as-use-site?1_29 #f)))"
"(let-values()"
"(let-values(((sc_32)(new-scope(if as-use-site?_31 'use-site 'macro))))"
"(let-values(((core72_33)"
"(lambda(s71_34 mode69_35 mode70_36)"
"(let-values(((s_37) s71_34))"
"(let-values(((mode_38)(if mode70_36 mode69_35 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_37)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_37)))"
"(let-values(((tmp_39) mode_38))"
"(if(equal? tmp_39 'add)"
"(let-values()(add-scope s_37 sc_32))"
"(if(equal? tmp_39 'remove)"
"(let-values()(remove-scope s_37 sc_32))"
"(if(equal? tmp_39 'flip)"
"(let-values()(flip-scope s_37 sc_32))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_38)))))))))))))"
"(case-lambda"
"((s_40)(core72_33 s_40 #f #f))"
"((s_41 mode69_42)(core72_33 s_41 mode69_42 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_28 #f #f))"
"((as-use-site?1_43)(make-syntax-introducer3_28 as-use-site?1_43 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_44)"
"(lambda(ext-s7_45 base-s8_46 phase5_47 phase6_48)"
"(let-values(((ext-s_49) ext-s7_45))"
"(let-values(((base-s_50) base-s8_46))"
"(let-values(((phase_51)(if phase6_48 phase5_47(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_49)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_49)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_56)(syntax?$1 base-s_50)))"
"(if or-part_56 or-part_56(not base-s_50)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_50)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_51)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_51)))"
"(values))))"
"(let-values(((ext-scs_52)(syntax-scope-set ext-s_49 phase_51)))"
"(let-values(((base-scs_53)"
"(syntax-scope-set"
"(let-values(((or-part_57) base-s_50))"
"(if or-part_57 or-part_57 empty-syntax))"
" phase_51)))"
"(let-values(((delta-scs_54)(set->list(set-subtract ext-scs_52 base-scs_53))))"
"(let-values(((maybe-taint_55)"
"(if(syntax-clean? ext-s_49) values syntax-taint$1)))"
"(let-values(((core77_58)"
"(lambda(s76_59 mode74_60 mode75_61)"
"(let-values(((s_62) s76_59))"
"(let-values(((mode_63)(if mode75_61 mode74_60 'add)))"
"(let-values()"
"(maybe-taint_55"
"(let-values(((tmp_64) mode_63))"
"(if(equal? tmp_64 'add)"
"(let-values()(add-scopes s_62 delta-scs_54))"
"(if(equal? tmp_64 'remove)"
"(let-values()(remove-scopes s_62 delta-scs_54))"
"(if(equal? tmp_64 'flip)"
"(let-values()(flip-scopes s_62 delta-scs_54))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                          \"(or/c 'add 'remove 'flip)\""
" mode_63)))))))))))))"
"(case-lambda"
"((s_65)(core77_58 s_65 #f #f))"
"((s_66 mode74_67)(core77_58 s_66 mode74_67 #t))))))))))))))))))"
"(case-lambda"
"((ext-s_68 base-s_69)(make-syntax-delta-introducer9_44 ext-s_68 base-s_69 #f #f))"
"((ext-s_70 base-s_71 phase5_72)(make-syntax-delta-introducer9_44 ext-s_70 base-s_71 phase5_72 #t)))))"
"(define-values"
"(lifted/1.1$8)"
"(make-required"
" 'do-syntax-local-value"
"(case-lambda"
"((self_73 who_74 id_75 intdef_76 failure-thunk_77)"
"(apply missing-kw self_73 who_74 id_75 intdef_76 failure-thunk_77 null)))"
" #f"
" #f))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_78 who13_79 id14_80 intdef15_81 failure-thunk16_82)"
"(let-values(((who_83) who13_79))"
"(let-values(((id_84) id14_80))"
"(let-values(((intdef_85) intdef15_81))"
"(let-values(((failure-thunk_86) failure-thunk16_82))"
"(let-values(((immediate?_87) immediate?11_78))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_84)"
"(void)"
"                                  (let-values () (raise-argument-error who_83 \"identifier?\" id_84)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_91)(not failure-thunk_86)))"
"(if or-part_91"
" or-part_91"
"(if(procedure? failure-thunk_86)"
"(procedure-arity-includes? failure-thunk_86 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_83"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_86)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_92)(not intdef_85)))"
"(if or-part_92 or-part_92(1/internal-definition-context? intdef_85)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_83"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_86)))"
"(values))))"
"(let-values(((current-ctx_88)"
"(let-values(((who79_93) who_83))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who79_93 #t)"
"(get-current-expand-context8.1 who79_93)))))"
"(let-values(((ctx_89)"
"(if intdef_85"
"(let-values(((the-struct_94) current-ctx_88))"
"(if(expand-context? the-struct_94)"
"(let-values(((env80_95)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_88)"
" intdef_85)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_94)"
"(root-expand-context-post-expansion-scope the-struct_94)"
"(root-expand-context-top-level-bind-scope the-struct_94)"
"(root-expand-context-all-scopes-stx the-struct_94)"
"(root-expand-context-use-site-scopes the-struct_94)"
"(root-expand-context-defined-syms the-struct_94)"
"(root-expand-context-frame-id the-struct_94)"
"(root-expand-context-counter the-struct_94)"
"(root-expand-context-lift-key the-struct_94)"
"(expand-context-context the-struct_94)"
"(expand-context-phase the-struct_94)"
"(expand-context-namespace the-struct_94)"
" env80_95"
"(expand-context-post-expansion-scope-action the-struct_94)"
"(expand-context-scopes the-struct_94)"
"(expand-context-def-ctx-scopes the-struct_94)"
"(expand-context-reference-records the-struct_94)"
"(expand-context-only-immediate? the-struct_94)"
"(expand-context-just-once? the-struct_94)"
"(expand-context-module-begin-k the-struct_94)"
"(expand-context-need-eventually-defined the-struct_94)"
"(expand-context-allow-unbound? the-struct_94)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_94)"
"(expand-context-stops the-struct_94)"
"(expand-context-current-introduction-scopes the-struct_94)"
"(expand-context-declared-submodule-names the-struct_94)"
"(expand-context-lifts the-struct_94)"
"(expand-context-lift-envs the-struct_94)"
"(expand-context-module-lifts the-struct_94)"
"(expand-context-require-lifts the-struct_94)"
"(expand-context-to-module-lifts the-struct_94)"
"(expand-context-requires+provides the-struct_94)"
"(expand-context-name the-struct_94)"
"(expand-context-observer the-struct_94)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_94)))"
" current-ctx_88)))"
"(let-values((()"
"(begin"
"(let-values(((obs_96)(expand-context-observer ctx_89)))"
"(if obs_96"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_96 'local-value id_84))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_90)(expand-context-phase ctx_89)))"
"((letrec-values(((loop_97)"
"(lambda(id_98)"
"(let-values(((b_99)"
"(if immediate?_87"
"(let-values(((...and/syntax-local.rkt:168:18_100)"
" resolve+shift15.1)"
"((id81_101) id_98)"
"((phase82_102) phase_90)"
"((temp83_103) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp83_103"
" #t"
" #f"
" #f"
" id81_101"
" phase82_102)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:168:18_100"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp83_103)"
" id81_101"
" phase82_102)))"
"(resolve+shift/extra-inspector"
" id_98"
" phase_90"
"(expand-context-namespace ctx_89)))))"
"(begin"
"(let-values(((obs_104)(expand-context-observer ctx_89)))"
"(if obs_104"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_104 'resolve id_98))"
"(void)))"
"(void)))"
"(if(not b_99)"
"(let-values()"
"(begin"
"(let-values(((obs_105)(expand-context-observer ctx_89)))"
"(if obs_105"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_105"
" 'local-value-result"
" #f))"
"(void)))"
"(void)))"
"(if failure-thunk_86"
"(failure-thunk_86)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_98))))"
"(let-values()"
"(let-values(((v_106 insp_107)"
"(let-values(((...and/syntax-local.rkt:178:30_108)"
" lookup17.1)"
"((b84_109) b_99)"
"((ctx85_110) ctx_89)"
"((id86_111) id_98)"
"((temp87_112) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" temp87_112"
" #t"
" b84_109"
" ctx85_110"
" id86_111)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:178:30_108"
" keyword-procedure-extract"
" '(#:out-of-context-as-variable?)"
" 5)"
" '(#:out-of-context-as-variable?)"
"(list temp87_112)"
" b84_109"
" ctx85_110"
" id86_111)))))"
"(if(let-values(((or-part_113)(variable? v_106)))"
"(if or-part_113 or-part_113(core-form? v_106)))"
"(let-values()"
"(begin"
"(let-values(((obs_114)"
"(expand-context-observer ctx_89)))"
"(if obs_114"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_114"
" 'local-value-result"
" #f))"
"(void)))"
"(void)))"
"(if failure-thunk_86"
"(failure-thunk_86)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_98))))"
"(let-values()"
"(begin"
"(let-values(((obs_115)"
"(expand-context-observer ctx_89)))"
"(if obs_115"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_115"
" 'local-value-result"
" #t))"
"(void)))"
"(void)))"
"(if(1/rename-transformer? v_106)"
"(let-values()"
"(if immediate?_87"
"(values"
" v_106"
"(1/rename-transformer-target v_106))"
"(loop_97(1/rename-transformer-target v_106))))"
"(if immediate?_87"
"(let-values()(values v_106 #f))"
"(let-values() v_106))))))))))))))"
" loop_97)"
"(flip-introduction-scopes id_84 ctx_89)))))))))))))))))"
"(define-values"
"(unpack18.1$2)"
"(lambda(given-kws_116 given-args_117 who13_118 id14_119 intdef15_120 failure-thunk16_121)"
"(let-values(((immediate?11_122)(car given-args_117)))"
"(do-syntax-local-value17.1 immediate?11_122 who13_118 id14_119 intdef15_120 failure-thunk16_121))))"
"(define-values"
"(do-syntax-local-value19.1)"
"(lifted/1.1$8"
"(lambda(given-kws_123 given-argc_124)"
"(if(= given-argc_124 6)"
"(let-values(((l2_125) given-kws_123))"
"(if(pair? l2_125)(if(eq?(car l2_125) '#:immediate?)(null?(cdr l2_125)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_126 given-args_127 who_128 id_129 intdef_130 failure-thunk_131)"
"(unpack18.1$2 given-kws_126 given-args_127 who_128 id_129 intdef_130 failure-thunk_131)))"
" '(#:immediate?)"
" '(#:immediate?)))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_132)"
"(lambda(id24_133 failure-thunk20_134 intdef21_135 failure-thunk22_136 intdef23_137)"
"(let-values(((id_138) id24_133))"
"(let-values(((failure-thunk_139)(if failure-thunk22_136 failure-thunk20_134 #f)))"
"(let-values(((intdef_140)(if intdef23_137 intdef21_135 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:196:2_141) do-syntax-local-value19.1)"
"((temp88_142) 'syntax-local-value)"
"((temp89_143) #f)"
"((id90_144) id_138)"
"((intdef91_145) intdef_140)"
"((failure-thunk92_146) failure-thunk_139))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp89_143"
" temp88_142"
" id90_144"
" intdef91_145"
" failure-thunk92_146)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:196:2_141"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp89_143)"
" temp88_142"
" id90_144"
" intdef91_145"
" failure-thunk92_146))))))))))"
"(case-lambda"
"((id_147)(syntax-local-value25_132 id_147 #f #f #f #f))"
"((id_148 failure-thunk_149 intdef21_150)(syntax-local-value25_132 id_148 failure-thunk_149 intdef21_150 #t #t))"
"((id_151 failure-thunk20_152)(syntax-local-value25_132 id_151 failure-thunk20_152 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_153)"
"(lambda(id31_154 failure-thunk27_155 intdef28_156 failure-thunk29_157 intdef30_158)"
"(let-values(((id_159) id31_154))"
"(let-values(((failure-thunk_160)(if failure-thunk29_157 failure-thunk27_155 #f)))"
"(let-values(((intdef_161)(if intdef30_158 intdef28_156 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:199:2_162) do-syntax-local-value19.1)"
"((temp93_163) 'syntax-local-value/immediate)"
"((temp94_164) #t)"
"((id95_165) id_159)"
"((intdef96_166) intdef_161)"
"((failure-thunk97_167) failure-thunk_160))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp94_164"
" temp93_163"
" id95_165"
" intdef96_166"
" failure-thunk97_167)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:199:2_162"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp94_164)"
" temp93_163"
" id95_165"
" intdef96_166"
" failure-thunk97_167))))))))))"
"(case-lambda"
"((id_168)(syntax-local-value/immediate32_153 id_168 #f #f #f #f))"
"((id_169 failure-thunk_170 intdef28_171)"
"(syntax-local-value/immediate32_153 id_169 failure-thunk_170 intdef28_171 #t #t))"
"((id_172 failure-thunk27_173)(syntax-local-value/immediate32_153 id_172 failure-thunk27_173 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_174 n_175 s_176)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_176) (void) (let-values () (raise-argument-error who_174 \"syntax?\" s_176)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_175)"
"(void)"
"                        (let-values () (raise-argument-error who_174 \"exact-nonnegative-integer?\" n_175)))"
"(values))))"
"(let-values(((ctx_177)"
"(let-values(((who98_181) who_174))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who98_181 #t)"
"(get-current-expand-context8.1 who98_181)))))"
"(let-values(((lifts_178)(expand-context-lifts ctx_177)))"
"(let-values(((counter_179)(root-expand-context-counter ctx_177)))"
"(let-values(((ids_180)"
"(alt-reverse"
"(let-values(((start_182) 0)((end_183) n_175)((inc_184) 1))"
"(begin"
"(if(if(real? start_182)(if(real? end_183)(real? inc_184) #f) #f)"
"(void)"
"(let-values()(in-range start_182 end_183 inc_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(fold-var_186 pos_187)"
"(if(< pos_187 end_183)"
"(let-values(((i_188) pos_187))"
"(if #t"
"(let-values(((fold-var_189)"
"(let-values(((fold-var_190) fold-var_186))"
"(let-values(((fold-var_191)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_179"
"(add1"
"(unbox"
" counter_179)))"
"(values))))"
"(let-values(((name_192)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                \"lifted/~a\""
"(unbox"
" counter_179)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_192)"
"(new-scope"
" 'macro)))))"
" fold-var_190))))"
"(values fold-var_191)))))"
"(if #t"
"(for-loop_185 fold-var_189(+ pos_187 inc_184))"
" fold-var_189))"
" fold-var_186))"
" fold-var_186))))"
" for-loop_185)"
" null"
" start_182))))))"
"(begin"
"(let-values(((obs_193)(expand-context-observer ctx_177)))"
"(if obs_193"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_193 'local-lift ids_180 s_176))(void)))"
"(void)))"
"(map2"
"(lambda(id_194)(flip-introduction-scopes id_194 ctx_177))"
"(add-lifted!"
" lifts_178"
" ids_180"
"(flip-introduction-scopes s_176 ctx_177)"
"(expand-context-phase ctx_177))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_195)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_195))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_196 s_197)(do-lift-values-expression 'syntax-local-lift-values-expression n_196 s_197)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_198)"
"(let-values(((temp99_199) 'syntax-local-lift-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp99_199 #t)"
"(get-current-expand-context8.1 temp99_199)))))"
"(root-expand-context-lift-key ctx_198))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_200)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_200)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_200)))"
"(values))))"
"(let-values(((ctx_201)"
"(let-values(((temp100_203) 'syntax-local-lift-module))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp100_203 #t)"
"(get-current-expand-context8.1 temp100_203)))))"
"(let-values(((phase_202)(expand-context-phase ctx_201)))"
"(begin"
"(let-values(((tmp_204)(core-form-sym s_200 phase_202)))"
"(if(if(equal? tmp_204 'module) #t(equal? tmp_204 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_201) s_200 phase_202))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_200))))"
"(let-values(((obs_205)(expand-context-observer ctx_201)))"
"(if obs_205"
"(let-values()(if #t(let-values()(call-expand-observe obs_205 'lift-statement s_200))(void)))"
"(void)))))))))"
"(define-values"
"(lifted/2.1$4)"
"(make-required"
" 'do-local-lift-to-module"
"(case-lambda((self_206 who_207 s_208)(apply missing-kw self_206 who_207 s_208 null)))"
" #f"
" #f))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_209"
" get-lift-ctx36_210"
" get-wrt-phase38_211"
" intro?34_212"
" intro?42_213"
" more-checks35_214"
" more-checks43_215"
" post-wrap41_216"
" post-wrap49_217"
" pre-wrap39_218"
" pre-wrap47_219"
" shift-wrap40_220"
" shift-wrap48_221"
" who50_222"
" s51_223)"
"(let-values(((who_224) who50_222))"
"(let-values(((s_225) s51_223))"
"(let-values(((intro?_226)(if intro?42_213 intro?34_212 #t)))"
"(let-values(((more-checks_227)(if more-checks43_215 more-checks35_214 void)))"
"(let-values(((get-lift-ctx_228) get-lift-ctx36_210))"
"(let-values(((add-lifted!_229) add-lifted!37_209))"
"(let-values(((get-wrt-phase_230) get-wrt-phase38_211))"
"(let-values(((pre-wrap_231)"
"(if pre-wrap47_219 pre-wrap39_218(lambda(s_232 phase_233 lift-ctx_234) s_232))))"
"(let-values(((shift-wrap_235)"
"(if shift-wrap48_221 shift-wrap40_220(lambda(s_236 phase_237 lift-ctx_238) s_236))))"
"(let-values(((post-wrap_239)"
"(if post-wrap49_217 post-wrap41_216(lambda(s_240 phase_241 lift-ctx_242) s_240))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_225)"
"(void)"
"                                            (let-values () (raise-argument-error who_224 \"syntax?\" s_225)))"
"(values))))"
"(let-values((()(begin(more-checks_227)(values))))"
"(let-values(((ctx_243)"
"(let-values(((who101_251) who_224))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who101_251 #t)"
"(get-current-expand-context8.1 who101_251)))))"
"(let-values(((lift-ctx_244)(get-lift-ctx_228 ctx_243)))"
"(let-values(((phase_245)(expand-context-phase ctx_243)))"
"(let-values(((wrt-phase_246)(get-wrt-phase_230 lift-ctx_244)))"
"(let-values(((added-s_247)"
"(if intro?_226(flip-introduction-scopes s_225 ctx_243) s_225)))"
"(let-values(((pre-s_248)(pre-wrap_231 added-s_247 phase_245 lift-ctx_244)))"
"(let-values(((shift-s_249)"
"(let-values(((start_252) phase_245)"
"((end_253) wrt-phase_246)"
"((inc_254) -1))"
"(begin"
"(if(if(real? start_252)"
"(if(real? end_253)(real? inc_254) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_252 end_253 inc_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(s_256 pos_257)"
"(if(> pos_257 end_253)"
"(let-values(((phase_258) pos_257))"
"(if #t"
"(let-values(((s_259)"
"(let-values(((s_260)"
" s_256))"
"(let-values(((s_261)"
"(let-values()"
"(shift-wrap_235"
" s_260"
"(sub1"
" phase_258)"
" lift-ctx_244))))"
"(values"
" s_261)))))"
"(if #t"
"(for-loop_255"
" s_259"
"(+ pos_257 inc_254))"
" s_259))"
" s_256))"
" s_256))))"
" for-loop_255)"
" pre-s_248"
" start_252)))))"
"(let-values(((post-s_250)"
"(post-wrap_239 shift-s_249 wrt-phase_246 lift-ctx_244)))"
"(begin"
"(add-lifted!_229 lift-ctx_244 post-s_250 wrt-phase_246)"
"(values ctx_243 added-s_247)))))))))))))))))))))))))"
"(define-values"
"(unpack53.1)"
"(lambda(given-kws_262 given-args_263 who50_264 s51_265)"
"(let-values(((add-lifted!37_266)(car given-args_263))"
"((given-kws_267)(cdr given-kws_262))"
"((given-args_268)(cdr given-args_263)))"
"(let-values(((get-lift-ctx36_269)(car given-args_268))"
"((given-kws_270)(cdr given-kws_267))"
"((given-args_271)(cdr given-args_268)))"
"(let-values(((get-wrt-phase38_272)(car given-args_271))"
"((given-kws_273)(cdr given-kws_270))"
"((given-args_274)(cdr given-args_271)))"
"(let-values(((intro?42_275)(if(pair? given-kws_273)(eq? '#:intro?(car given-kws_273)) #f)))"
"(let-values(((intro?34_276)(if intro?42_275(car given-args_274)(void)))"
"((given-kws_277)(if intro?42_275(cdr given-kws_273) given-kws_273))"
"((given-args_278)(if intro?42_275(cdr given-args_274) given-args_274)))"
"(let-values(((more-checks43_279)(if(pair? given-kws_277)(eq? '#:more-checks(car given-kws_277)) #f)))"
"(let-values(((more-checks35_280)(if more-checks43_279(car given-args_278)(void)))"
"((given-kws_281)(if more-checks43_279(cdr given-kws_277) given-kws_277))"
"((given-args_282)(if more-checks43_279(cdr given-args_278) given-args_278)))"
"(let-values(((post-wrap49_283)(if(pair? given-kws_281)(eq? '#:post-wrap(car given-kws_281)) #f)))"
"(let-values(((post-wrap41_284)(if post-wrap49_283(car given-args_282)(void)))"
"((given-kws_285)(if post-wrap49_283(cdr given-kws_281) given-kws_281))"
"((given-args_286)(if post-wrap49_283(cdr given-args_282) given-args_282)))"
"(let-values(((pre-wrap47_287)"
"(if(pair? given-kws_285)(eq? '#:pre-wrap(car given-kws_285)) #f)))"
"(let-values(((pre-wrap39_288)(if pre-wrap47_287(car given-args_286)(void)))"
"((given-kws_289)(if pre-wrap47_287(cdr given-kws_285) given-kws_285))"
"((given-args_290)(if pre-wrap47_287(cdr given-args_286) given-args_286)))"
"(let-values(((shift-wrap48_291)(pair? given-kws_289)))"
"(let-values(((shift-wrap40_292)(if shift-wrap48_291(car given-args_290)(void))))"
"(do-local-lift-to-module52.1"
" add-lifted!37_266"
" get-lift-ctx36_269"
" get-wrt-phase38_272"
" intro?34_276"
" intro?42_275"
" more-checks35_280"
" more-checks43_279"
" post-wrap41_284"
" post-wrap49_283"
" pre-wrap39_288"
" pre-wrap47_287"
" shift-wrap40_292"
" shift-wrap48_291"
" who50_264"
" s51_265))))))))))))))))"
"(define-values"
"(do-local-lift-to-module54.1)"
"(lifted/2.1$4"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 4)"
"(subsets?"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" given-kws_293"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap))"
" #f))"
"(case-lambda((given-kws_295 given-args_296 who_297 s_298)(unpack53.1 given-kws_295 given-args_296 who_297 s_298)))"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap)))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_299 use-s_300)"
"(let-values(((sc_301)(new-scope 'macro)))"
"(let-values(((ctx_302 added-s_303)"
"(let-values(((...and/syntax-local.rkt:273:4_305) do-local-lift-to-module54.1)"
"((temp102_306) 'syntax-local-lift-require)"
"((temp103_307)(datum->syntax$1 #f s_299))"
"((temp104_308) #f)"
"((temp105_309)"
"(lambda()"
"(if(syntax?$1 use-s_300)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_300)))))"
"((expand-context-require-lifts106_310) expand-context-require-lifts)"
"((require-lift-context-wrt-phase107_311) require-lift-context-wrt-phase)"
"((add-lifted-require!108_312) add-lifted-require!)"
"((temp109_313)"
"(lambda(s_315 phase_316 require-lift-ctx_317)(require-spec-shift-for-syntax s_315)))"
"((temp110_314)"
"(lambda(s_318 phase_319 require-lift-ctx_320)"
"(wrap-form '#%require(add-scope s_318 sc_301) phase_319))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-require!108_312"
" expand-context-require-lifts106_310"
" require-lift-context-wrt-phase107_311"
" temp104_308"
" #t"
" temp105_309"
" #t"
" temp110_314"
" #t"
" #f"
" #f"
" temp109_313"
" #t"
" temp102_306"
" temp103_307)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:273:4_305"
" keyword-procedure-extract"
" '(#:add-lifted!"
" #:get-lift-ctx"
" #:get-wrt-phase"
" #:intro?"
" #:more-checks"
" #:post-wrap"
" #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-require!108_312"
" expand-context-require-lifts106_310"
" require-lift-context-wrt-phase107_311"
" temp104_308"
" temp105_309"
" temp110_314"
" temp109_313)"
" temp102_306"
" temp103_307)))))"
"(let-values(((result-s_304)(add-scope use-s_300 sc_301)))"
"(begin"
"(let-values(((obs_321)(expand-context-observer ctx_302)))"
"(if obs_321"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_321 'lift-require added-s_303 use-s_300 result-s_304))"
"(void)))"
"(void)))"
" result-s_304))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_322)"
"(let-values(((ctx_323 result-s_324)"
"(let-values(((...and/syntax-local.rkt:296:4_325) do-local-lift-to-module54.1)"
"((temp111_326) 'syntax-local-lift-module-end-declaration)"
"((s112_327) s_322)"
"((expand-context-to-module-lifts113_328) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase114_329) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!115_330) add-lifted-to-module-provide!)"
"((temp116_331)"
"(lambda(s_333 phase_334 to-module-lift-ctx_335)(wrap-form 'for-syntax s_333 #f)))"
"((temp117_332)"
"(lambda(s_336 phase_337 to-module-lift-ctx_338)"
"(wrap-form '#%provide s_336 phase_337))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!115_330"
" expand-context-to-module-lifts113_328"
" to-module-lift-context-wrt-phase114_329"
" #f"
" #f"
" #f"
" #f"
" temp117_332"
" #t"
" #f"
" #f"
" temp116_331"
" #t"
" temp111_326"
" s112_327)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:296:4_325"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-provide!115_330"
" expand-context-to-module-lifts113_328"
" to-module-lift-context-wrt-phase114_329"
" temp117_332"
" temp116_331)"
" temp111_326"
" s112_327)))))"
"(let-values(((obs_339)(expand-context-observer ctx_323)))"
"(if obs_339"
"(let-values()(if #t(let-values()(call-expand-observe obs_339 'lift-provide result-s_324))(void)))"
"(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_340)"
"(let-values(((ctx_341 also-s_342)"
"(let-values(((...and/syntax-local.rkt:311:4_343) do-local-lift-to-module54.1)"
"((temp118_344) 'syntax-local-lift-module-end-declaration)"
"((s119_345) s_340)"
"((expand-context-to-module-lifts120_346) expand-context-to-module-lifts)"
"((temp121_347)(lambda(lift-ctx_351) 0))"
"((add-lifted-to-module-end!122_348) add-lifted-to-module-end!)"
"((temp123_349)"
"(lambda(orig-s_352 phase_353 to-module-lift-ctx_354)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_354)"
"(wrap-form '#%expression orig-s_352 phase_353)"
" orig-s_352)))"
"((temp124_350)"
"(lambda(s_355 phase_356 to-module-lift-ctx_357)"
"(wrap-form 'begin-for-syntax s_355 phase_356))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!122_348"
" expand-context-to-module-lifts120_346"
" temp121_347"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp123_349"
" #t"
" temp124_350"
" #t"
" temp118_344"
" s119_345)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:311:4_343"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-end!122_348"
" expand-context-to-module-lifts120_346"
" temp121_347"
" temp123_349"
" temp124_350)"
" temp118_344"
" s119_345)))))"
"(let-values(((obs_358)(expand-context-observer ctx_341)))"
"(if obs_358"
"(let-values()(if #t(let-values()(call-expand-observe obs_358 'lift-statement s_340))(void)))"
"(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_359 s_360 phase_361)"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_361(syntax-shift-phase-level$1 core-stx phase_361) #f) sym_359) s_360))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_362)"
"(let-values(((temp125_363) 'syntax-local-module-defined-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp125_363 #t)"
"(get-current-expand-context8.1 temp125_363)))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_362)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_364 phase-level_365)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_370)(not mod-path_364)))"
"(if or-part_370 or-part_370(1/module-path? mod-path_364)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_364)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_371)(eq? phase-level_365 #t)))"
"(if or-part_371 or-part_371(phase? phase-level_365)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_365)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_366)"
"(let-values(((temp126_372) 'syntax-local-module-required-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp126_372 #t)"
"(get-current-expand-context8.1 temp126_372)))))"
"(let-values(((requires+provides_367)(expand-context-requires+provides ctx_366)))"
"(let-values(((mpi_368)"
"(if mod-path_364"
"(1/module-path-index-join mod-path_364(requires+provides-self requires+provides_367))"
" #f)))"
"(let-values(((requireds_369)"
"(extract-all-module-requires"
" requires+provides_367"
" mpi_368"
"(if(eq? phase-level_365 #t) 'all phase-level_365))))"
"(if requireds_369"
"(alt-reverse"
"(let-values(((ht_373)(requireds->phase-ht requireds_369)))"
"(begin"
"(if((lambda(ht_374)(hash? ht_374)) ht_373)(void)(let-values()(default-in-hash ht_373)))"
"((letrec-values(((for-loop_375)"
"(lambda(fold-var_376 i_377)"
"(if i_377"
"(let-values(((phase_378 ids_379)(hash-iterate-key+value ht_373 i_377)))"
"(if #t"
"(let-values(((fold-var_380)"
"(let-values(((fold-var_381) fold-var_376))"
"(let-values(((fold-var_382)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_378 ids_379))"
" fold-var_381))))"
"(values fold-var_382)))))"
"(if #t"
"(for-loop_375 fold-var_380(hash-iterate-next ht_373 i_377))"
" fold-var_380))"
" fold-var_376))"
" fold-var_376))))"
" for-loop_375)"
" null"
"(hash-iterate-first ht_373)))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_383)"
"(let-values(((lst_384) requireds_383))"
"(begin"
"(if(list? lst_384)(void)(let-values()(in-list lst_384)))"
"((letrec-values(((for-loop_385)"
"(lambda(ht_386 lst_387)"
"(if(pair? lst_387)"
"(let-values(((r_388)(unsafe-car lst_387)))"
"(if #t"
"(let-values(((ht_389)"
"(let-values(((ht_390) ht_386))"
"(let-values(((ht_391)"
"(let-values()"
"(hash-update"
" ht_390"
"(required-phase r_388)"
"(lambda(l_392)(cons(required-id r_388) l_392))"
" null))))"
"(values ht_391)))))"
"(if #t(for-loop_385 ht_389(unsafe-cdr lst_387)) ht_389))"
" ht_386))"
" ht_386))))"
" for-loop_385)"
"(hasheqv)"
" lst_384)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_393)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_398)(1/module-path? mod-path_393)))"
"(if or-part_398"
" or-part_398"
"(if(syntax?$1 mod-path_393)(1/module-path?(syntax->datum$1 mod-path_393)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_393)))"
"(values))))"
"(let-values(((ctx_394)"
"(let-values(((temp127_399) 'syntax-local-module-exports))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp127_399 #t)"
"(get-current-expand-context8.1 temp127_399)))))"
"(let-values(((ns_395)(expand-context-namespace ctx_394)))"
"(let-values(((mod-name_396)"
"(resolve-module-path"
"(if(syntax?$1 mod-path_393)(syntax->datum$1 mod-path_393) mod-path_393)"
"(1/module-path-index-resolve(namespace-mpi ns_395)))))"
"(let-values(((m_397)(namespace->module ns_395 mod-name_396)))"
"(begin"
"(if m_397(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports)))"
"(alt-reverse"
"(let-values(((ht_400)(module-provides m_397)))"
"(begin"
"(if((lambda(ht_401)(hash? ht_401)) ht_400)(void)(let-values()(default-in-hash ht_400)))"
"((letrec-values(((for-loop_402)"
"(lambda(fold-var_403 i_404)"
"(if i_404"
"(let-values(((phase_405 syms_406)(hash-iterate-key+value ht_400 i_404)))"
"(if #t"
"(let-values(((fold-var_407)"
"(let-values(((fold-var_408) fold-var_403))"
"(let-values(((fold-var_409)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_405"
"(alt-reverse"
"(let-values(((ht_410) syms_406))"
"(begin"
"(if((lambda(ht_411)"
"(hash? ht_411))"
" ht_410)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_410)))"
"((letrec-values(((for-loop_412)"
"(lambda(fold-var_413"
" i_414)"
"(if i_414"
"(let-values(((sym_415)"
"(hash-iterate-key"
" ht_410"
" i_414)))"
"(if #t"
"(let-values(((fold-var_416)"
"(let-values(((fold-var_417)"
" fold-var_413))"
"(let-values(((fold-var_418)"
"(let-values()"
"(cons"
"(let-values()"
" sym_415)"
" fold-var_417))))"
"(values"
" fold-var_418)))))"
"(if #t"
"(for-loop_412"
" fold-var_416"
"(hash-iterate-next"
" ht_410"
" i_414))"
" fold-var_416))"
" fold-var_413))"
" fold-var_413))))"
" for-loop_412)"
" null"
"(hash-iterate-first"
" ht_410)))))))"
" fold-var_408))))"
"(values fold-var_409)))))"
"(if #t"
"(for-loop_402 fold-var_407(hash-iterate-next ht_400 i_404))"
" fold-var_407))"
" fold-var_403))"
" fold-var_403))))"
" for-loop_402)"
" null"
"(hash-iterate-first ht_400)))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_419)"
"(let-values(((temp128_421) 'syntax-local-submodules))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp128_421 #t)"
"(get-current-expand-context8.1 temp128_421)))))"
"(let-values(((submods_420)(expand-context-declared-submodule-names ctx_419)))"
"(alt-reverse"
"(let-values(((ht_422)(unbox submods_420)))"
"(begin"
"(if((lambda(ht_423)(hash? ht_423)) ht_422)(void)(let-values()(default-in-hash ht_422)))"
"((letrec-values(((for-loop_424)"
"(lambda(fold-var_425 i_426)"
"(if i_426"
"(let-values(((name_427 kind_428)(hash-iterate-key+value ht_422 i_426)))"
"(if #t"
"(let-values(((fold-var_429)"
"(let-values(((fold-var_430) fold-var_425))"
"(if(eq? kind_428 'module)"
"(let-values(((fold-var_431) fold-var_430))"
"(let-values(((fold-var_432)"
"(let-values()"
"(cons"
"(let-values() name_427)"
" fold-var_431))))"
"(values fold-var_432)))"
" fold-var_430))))"
"(if #t"
"(for-loop_424 fold-var_429(hash-iterate-next ht_422 i_426))"
" fold-var_429))"
" fold-var_425))"
" fold-var_425))))"
" for-loop_424)"
" null"
"(hash-iterate-first ht_422)))))))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower58_433)"
"(lambda(id57_434 only-generated?55_435 only-generated?56_436)"
"(let-values(((id_437) id57_434))"
"(let-values(((only-generated?_438)(if only-generated?56_436 only-generated?55_435 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_437)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_437)))"
"(values))))"
"(let-values(((ctx_439)"
"(let-values(((temp129_441) 'syntax-local-get-shadower))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp129_441 #t)"
"(get-current-expand-context8.1 temp129_441)))))"
"(let-values(((new-id_440)"
"(add-scopes"
" id_437"
"(set->list"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx ctx_439)"
"(expand-context-phase ctx_439))))))"
"(if(syntax-clean? id_437) new-id_440(syntax-taint$1 new-id_440)))))))))))"
"(case-lambda"
"((id_442)(syntax-local-get-shadower58_433 id_442 #f #f))"
"((id_443 only-generated?55_444)(syntax-local-get-shadower58_433 id_443 only-generated?55_444 #t)))))"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 \"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) #f))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) 5)(srcloc-vector?(list->vector v_5)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) 5)(srcloc-vector? v_5) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 0)"
"(vector-ref v_12 1)"
"(vector-ref v_12 2)"
"(vector-ref v_12 3)"
"(vector-ref v_12 4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
"(syntax-bulk-binding-registry the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(define-values"
"(reader-syntax->syntax)"
"(lambda(v_1)"
"(datum-map"
" v_1"
"(lambda(tail?_2 v_3)"
"(if(1/syntax? v_3)"
"(let-values()"
"(let-values(((e_4)(syntax-e$2 v_3)))"
"(if(syntax?$1 e_4)"
"(let-values() e_4)"
"(let-values()"
"(let-values(((s_5)"
"(let-values(((the-struct_7) empty-syntax))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8)(reader-syntax->syntax(syntax-e$2 v_3)))"
"((srcloc2_9)"
"(srcloc"
"(syntax-source$1 v_3)"
"(syntax-line$1 v_3)"
"(syntax-column$1 v_3)"
"(syntax-position$1 v_3)"
"(syntax-span$1 v_3)))"
"((props3_10)"
"(let-values(((tmp_11)(1/syntax-property v_3 'paren-shape)))"
"(if(equal? tmp_11 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_11 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
" srcloc2_9"
" props3_10"
"(syntax-inspector the-struct_7)"
"(syntax-tamper the-struct_7)))"
"                                   (raise-argument-error 'struct-copy \"syntax?\" the-struct_7)))))"
"(let-values(((keys_6)(syntax-property-symbol-keys$1 v_3)))"
"(if(null? keys_6)"
"(let-values() s_5)"
"(if(if(null?(cdr keys_6))(eq?(car keys_6) 'paren-shape) #f)"
"(let-values() s_5)"
"(let-values()"
"(let-values(((lst_12) keys_6))"
"(begin"
"(if(list? lst_12)(void)(let-values()(in-list lst_12)))"
"((letrec-values(((for-loop_13)"
"(lambda(s_14 lst_15)"
"(if(pair? lst_15)"
"(let-values(((key_16)(unsafe-car lst_15)))"
"(if #t"
"(let-values(((s_17)"
"(let-values(((s_18) s_14))"
"(let-values(((s_19)"
"(let-values()"
"(syntax-property$1"
" s_18"
" key_16"
"(1/syntax-property v_3 key_16)"
" #t))))"
"(values s_19)))))"
"(if #t(for-loop_13 s_17(unsafe-cdr lst_15)) s_17))"
" s_14))"
" s_14))))"
" for-loop_13)"
" s_5"
" lst_12))))))))))))"
"(let-values() v_3))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(define-values(read-syntax$1)(lambda(src_1 in_2)(reader-syntax->syntax(read-syntax$2 src_1 in_2))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(reader-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7))))"
"(define-values"
"(1/syntax-e)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
"      (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_3)"
"(lambda(stx-c7_4 s8_5 stx-l1_6 stx-p2_7 ignored3_8 stx-l4_9 stx-p5_10 ignored6_11)"
"(let-values(((stx-c_12) stx-c7_4))"
"(let-values(((s_13) s8_5))"
"(let-values(((stx-l_14)(if stx-l4_9 stx-l1_6 #f)))"
"(let-values(((stx-p_15)(if stx-p5_10 stx-p2_7 #f)))"
"(let-values(((ignored_16)(if ignored6_11 ignored3_8 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_17)(not stx-c_12)))"
"(if or-part_17 or-part_17(syntax?$1 stx-c_12)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_12)))"
"(if(let-values(((or-part_18)(not stx-l_14)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(syntax?$1 stx-l_14)))"
"(if or-part_19 or-part_19(encoded-srcloc? stx-l_14)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_14)))"
"(if(let-values(((or-part_20)(not stx-p_15)))"
"(if or-part_20 or-part_20(syntax?$1 stx-p_15)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_15)))"
"(datum->syntax$1 stx-c_12 s_13(to-srcloc-stx stx-l_14) stx-p_15)))))))))))"
"(case-lambda"
"((stx-c_21 s_22)(datum->syntax9_3 stx-c_21 s_22 #f #f #f #f #f #f))"
"((stx-c_23 s_24 stx-l_25 stx-p_26 ignored3_27)"
"(datum->syntax9_3 stx-c_23 s_24 stx-l_25 stx-p_26 ignored3_27 #t #t #t))"
"((stx-c_28 s_29 stx-l_30 stx-p2_31)(datum->syntax9_3 stx-c_28 s_29 stx-l_30 stx-p2_31 #f #t #t #f))"
"((stx-c_32 s_33 stx-l1_34)(datum->syntax9_3 stx-c_32 s_33 stx-l1_34 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_35)"
"(begin"
"      (if (syntax?$1 s_35) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_35)))"
"(syntax->list$1 s_35))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_36)"
"(begin"
"      (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_36)))"
"(if(syntax-property$1 s_36 original-property-sym)(not(syntax-any-macro-scopes? s_36)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_37)"
"(lambda(a13_38 b14_39 phase11_40 phase12_41)"
"(let-values(((a_42) a13_38))"
"(let-values(((b_43) b14_39))"
"(let-values(((phase_44)(if phase12_41 phase11_40(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_42)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_42)))"
"(if(identifier? b_43)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_43)))"
"(if(phase? phase_44)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_44)))"
"(bound-identifier=?$1 a_42 b_43 phase_44)))))))))"
"(case-lambda"
"((a_45 b_46)(bound-identifier=?15_37 a_45 b_46 #f #f))"
"((a_47 b_48 phase11_49)(bound-identifier=?15_37 a_47 b_48 phase11_49 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_50)"
"(lambda(a21_51 b22_52 a-phase17_53 b-phase18_54 a-phase19_55 b-phase20_56)"
"(let-values(((a_57) a21_51))"
"(let-values(((b_58) b22_52))"
"(let-values(((a-phase_59)(if a-phase19_55 a-phase17_53(1/syntax-local-phase-level))))"
"(let-values(((b-phase_60)(if b-phase20_56 b-phase18_54 a-phase_59)))"
"(let-values()"
"(begin"
"(if(identifier? a_57)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_57)))"
"(if(identifier? b_58)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_58)))"
"(if(phase? a-phase_59)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_59)))"
"(if(phase? b-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_60)))"
"(free-identifier=?$1 a_57 b_58 a-phase_59 b-phase_60))))))))))"
"(case-lambda"
"((a_61 b_62)(free-identifier=?23_50 a_61 b_62 #f #f #f #f))"
"((a_63 b_64 a-phase_65 b-phase18_66)(free-identifier=?23_50 a_63 b_64 a-phase_65 b-phase18_66 #t #t))"
"((a_67 b_68 a-phase17_69)(free-identifier=?23_50 a_67 b_68 a-phase17_69 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_70 b_71)"
"(let-values((()"
"(begin"
"(if(identifier? a_70)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_70)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_71)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_71)))"
"(values))))"
"(let-values(((phase_72)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_70 b_71 phase_72 phase_72))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_73 b_74)"
"(let-values((()"
"(begin"
"(if(identifier? a_73)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_73)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_74)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_74)))"
"(values))))"
"(let-values(((phase_75)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_73 b_74 phase_75 phase_75))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_76 b_77)"
"(begin"
"      (if (identifier? a_76) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_76)))"
"      (if (identifier? b_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_77)))"
"(free-identifier=?$1 a_76 b_77 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding28_78)"
"(lambda(id27_79 phase25_80 phase26_81)"
"(let-values(((id_82) id27_79))"
"(let-values(((phase_83)(if phase26_81 phase25_80(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_82)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_82)))"
"(if(phase? phase_83)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_83)))"
"(identifier-binding$1 id_82 phase_83))))))))"
"(case-lambda"
"((id_84)(identifier-binding28_78 id_84 #f #f))"
"((id_85 phase25_86)(identifier-binding28_78 id_85 phase25_86 #t)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(lambda(id_87)"
"(begin"
"(if(identifier? id_87)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_87)))"
"(identifier-binding$1 id_87(add1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_88)"
"(begin"
"(if(identifier? id_88)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_88)))"
"(identifier-binding$1 id_88(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_89)"
"(begin"
"(if(identifier? id_89)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_89)))"
"(identifier-binding$1 id_89 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol33_90)"
"(lambda(id32_91 phase30_92 phase31_93)"
"(let-values(((id_94) id32_91))"
"(let-values(((phase_95)(if phase31_93 phase30_92(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_94)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_94)))"
"(if(phase? phase_95)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_95)))"
"(identifier-binding-symbol$1 id_94 phase_95))))))))"
"(case-lambda"
"((id_96)(identifier-binding-symbol33_90 id_96 #f #f))"
"((id_97 phase30_98)(identifier-binding-symbol33_90 id_97 phase30_98 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context38_99)"
"(lambda(id37_100 syms35_101 syms36_102)"
"(let-values(((id_103) id37_100))"
"(let-values(((syms_104)(if syms36_102 syms35_101 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_103)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_103)))"
"(if(if(list? syms_104)(andmap2 symbol? syms_104) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_104)))"
" id_103)))))))"
"(case-lambda"
"((id_105)(identifier-prune-lexical-context38_99 id_105 #f #f))"
"((id_106 syms35_107)(identifier-prune-lexical-context38_99 id_106 syms35_107 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info45_108)"
"(lambda(s44_109 phase40_110 all-bindings?41_111 phase42_112 all-bindings?43_113)"
"(let-values(((s_114) s44_109))"
"(let-values(((phase_115)(if phase42_112 phase40_110(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_116)(if all-bindings?43_113 all-bindings?41_111 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_114)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_114)))"
"(if(phase? phase_115)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_115)))"
"(syntax-debug-info$1 s_114 phase_115 all-bindings?_116)))))))))"
"(case-lambda"
"((s_117)(syntax-debug-info45_108 s_117 #f #f #f #f))"
"((s_118 phase_119 all-bindings?41_120)(syntax-debug-info45_108 s_118 phase_119 all-bindings?41_120 #t #t))"
"((s_121 phase40_122)(syntax-debug-info45_108 s_121 phase40_122 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_123 phase_124)"
"(begin"
"      (if (syntax?$1 s_123) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_123)))"
"(if(phase? phase_124)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_124)))"
"(syntax-shift-phase-level$1 s_123 phase_124))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_125 old-stx_126 id_127)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_125)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_125)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_126)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_126)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_127)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_127)))"
"(values))))"
"(let-values(((s_128)(syntax-track-origin$1 new-stx_125 old-stx_126 id_127)))"
"(let-values(((ctx_129)"
"(let-values(((...ander/syntax/api.rkt:185:14_130) get-current-expand-context8.1)"
"((temp65_131) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_131 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/syntax/api.rkt:185:14_130"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp65_131))))))"
"(begin"
"(if ctx_129"
"(let-values()"
"(let-values(((obs_132)(expand-context-observer ctx_129)))"
"(if obs_132"
"(let-values()(if #t(let-values()(call-expand-observe obs_132 'track-origin s_128))(void)))"
"(void))))"
"(void))"
" s_128))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax51_133)"
"(lambda(src47_134 in48_135 src49_136 in50_137)"
"(let-values(((src_138)(if src49_136 src47_134(object-name(current-input-port)))))"
"(let-values(((in_139)(if in50_137 in48_135(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_139)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_139)))"
"(read-syntax$1 src_138 in_139))))))))"
"(case-lambda"
"(()(read-syntax51_133 #f #f #f #f))"
"((src_140 in48_141)(read-syntax51_133 src_140 in48_141 #t #t))"
"((src47_142)(read-syntax51_133 src47_142 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive63_143)"
"(lambda(src53_144"
" in54_145"
" start55_146"
" readtable56_147"
" graph?57_148"
" src58_149"
" in59_150"
" start60_151"
" readtable61_152"
" graph?62_153)"
"(let-values(((src_154)(if src58_149 src53_144(object-name(current-input-port)))))"
"(let-values(((in_155)(if in59_150 in54_145(current-input-port))))"
"(let-values(((start_156)(if start60_151 start55_146 #f)))"
"(let-values(((readtable_157)(if readtable61_152 readtable56_147(current-readtable))))"
"(let-values(((graph?_158)(if graph?62_153 graph?57_148 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_155)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_155)))"
"(if(let-values(((or-part_159)(char? start_156)))"
"(if or-part_159 or-part_159(not start_156)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_156)))"
"(if(let-values(((or-part_160)(readtable? readtable_157)))"
"(if or-part_160 or-part_160(not readtable_157)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_157)))"
"(read-syntax/recursive$1 src_154 in_155 start_156 readtable_157 graph?_158)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive63_143 #f #f #f #f #f #f #f #f #f #f))"
"((src_161 in_162 start_163 readtable_164 graph?57_165)"
"(read-syntax/recursive63_143 src_161 in_162 start_163 readtable_164 graph?57_165 #t #t #t #t #t))"
"((src_166 in_167 start_168 readtable56_169)"
"(read-syntax/recursive63_143 src_166 in_167 start_168 readtable56_169 #f #t #t #t #t #f))"
"((src_170 in_171 start55_172)(read-syntax/recursive63_143 src_170 in_171 start55_172 #f #f #t #t #t #f #f))"
"((src_173 in54_174)(read-syntax/recursive63_143 src_173 in54_174 #f #f #f #t #t #f #f #f))"
"((src53_175)(read-syntax/recursive63_143 src53_175 #f #f #f #f #t #f #f #f #f)))))"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))"
"(let-values(((s_8)(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))))"
"(let-values((()"
"(begin"
"(let-values(((lst_10) requires_1))"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(fold-var_12 lst_13)"
"(if(pair? lst_13)"
"(let-values(((phase+reqs_14)(unsafe-car lst_13)))"
"(if #t"
"(let-values(((fold-var_15)"
"(let-values(((fold-var_16) fold-var_12))"
"(let-values(((fold-var_17)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_18)"
"(car"
" phase+reqs_14)))"
"(let-values(((lst_19)"
"(cdr"
" phase+reqs_14)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()"
"(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((req_23)"
"(unsafe-car"
" lst_22)))"
"(if #t"
"(let-values(((fold-var_24)"
"(let-values(((fold-var_25)"
" fold-var_21))"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_27)"
"(module-path-index-shift"
" req_23"
" original-self_5"
" self_6)))"
"(let-values(((...val/root-context.rkt:33:8_28)"
" perform-require!55.1)"
"((mpi1_29)"
" mpi_27)"
"((s2_30)"
" s_8)"
"((self3_31)"
" self_6)"
"((s4_32)"
" s_8)"
"((ns5_33)"
" ns_3)"
"((temp6_34)"
"(phase+"
" phase_18"
" phase-shift_4))"
"((phase-shift7_35)"
" phase-shift_4))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!55.1))"
"(perform-require!53.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_34"
" #f"
" #f"
" phase-shift7_35"
" #f"
" #f"
" #f"
" #f"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...val/root-context.rkt:33:8_28"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:run-phase)"
" 7)"
" '(#:phase-shift"
" #:run-phase)"
"(list"
" temp6_34"
" phase-shift7_35)"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)))))"
"(void)))))"
"(values"
" fold-var_26)))))"
"(if #t"
"(for-loop_20"
" fold-var_24"
"(unsafe-cdr"
" lst_22))"
" fold-var_24))"
" fold-var_21))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))))"
"(void)))))"
"(values fold-var_17)))))"
"(if #t"
"(for-loop_11 fold-var_15(unsafe-cdr lst_13))"
" fold-var_15))"
" fold-var_12))"
" fold-var_12))))"
" for-loop_11)"
"(void)"
" lst_10)))"
"(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_36) evaled-ld-h_2))"
"(begin"
"(if((lambda(ht_37)(hash? ht_37)) ht_36)(void)(let-values()(default-in-hash ht_36)))"
"((letrec-values(((for-loop_38)"
"(lambda(fold-var_39 i_40)"
"(if i_40"
"(let-values(((phase_41 linklet_42)(hash-iterate-key+value ht_36 i_40)))"
"(if #t"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44) fold-var_39))"
"(let-values(((fold-var_45)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_46)"
"(1/linklet-export-variables"
" linklet_42)))"
"(begin"
"(if(list? lst_46)"
"(void)"
"(let-values()"
"(in-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49)"
"(if(pair?"
" lst_49)"
"(let-values(((sym_50)"
"(unsafe-car"
" lst_49)))"
"(if #t"
"(let-values(((fold-var_51)"
"(let-values(((fold-var_52)"
" fold-var_48))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_54)"
"(datum->syntax$1"
" s_8"
" sym_50)))"
"(begin"
"(let-values(((id8_55)"
" id_54)"
"((temp9_56)"
"(let-values(((self11_58)"
" self_6)"
"((phase12_59)"
" phase_41)"
"((sym13_60)"
" sym_50))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self11_58"
" phase12_59"
" sym13_60)"
"(make-module-binding22.1"
" self11_58"
" phase12_59"
" sym13_60))))"
"((phase10_57)"
" phase_41))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" #f"
" #f"
" id8_55"
" temp9_56"
" phase10_57)"
"(add-binding!17.1"
" id8_55"
" temp9_56"
" phase10_57)))"
"(add-defined-sym!"
" defined-syms_9"
" phase_41"
" sym_50"
" id_54))))"
"(void)))))"
"(values"
" fold-var_53)))))"
"(if #t"
"(for-loop_47"
" fold-var_51"
"(unsafe-cdr"
" lst_49))"
" fold-var_51))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_46))))"
"(void)))))"
"(values fold-var_45)))))"
"(if #t"
"(for-loop_38 fold-var_43(hash-iterate-next ht_36 i_40))"
" fold-var_43))"
" fold-var_39))"
" fold-var_39))))"
" for-loop_38)"
"(void)"
"(hash-iterate-first ht_36))))"
" root-ctx_7))))))))"
"(define-values(module-cache)(make-weak-hash))"
"(define-values(make-module-cache-key)(lambda(hash-code_1)(if hash-code_1(list hash-code_1) #f)))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_2 proc_3)(hash-set! module-cache key_2(make-ephemeron key_2 proc_3))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_4)(let-values(((e_5)(hash-ref module-cache key_4 #f)))(if e_5(ephemeron-value e_5) #f))))"
"(define-values"
"(lifted/34.1)"
"(make-required 'declare-this-module(case-lambda((self_173)(apply missing-kw self_173 null))) #f #f))"
"(define-values"
"(eval-module8.1)"
"(lambda(as-submodule?2_1 as-submodule?5_2 namespace1_3 namespace4_4 supermodule-name3_5 supermodule-name6_6 c7_7)"
"(let-values(((c_8) c7_7))"
"(let-values(((ns_9)(if namespace4_4 namespace1_3(1/current-namespace))))"
"(let-values(((as-submodule?_10)(if as-submodule?5_2 as-submodule?2_1 #f)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_6 supermodule-name3_5 #f)))"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((syntax-literals-data-instance_16)"
"(if(compiled-in-memory? c_8)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_8)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_13 'stx-data))"
"(list"
" deserialize-instance"
" data-instance_14"
"(make-declaration-context-instance ns_9))))))"
"(let-values(((decl_17)(lambda(key_39)(1/instance-variable-value declaration-instance_15 key_39))))"
"(let-values(((pre-submodule-names_18)(hash-ref h_13 'pre null)))"
"(let-values(((post-submodule-names_19)(hash-ref h_13 'post null)))"
"(let-values(((default-name_20)(hash-ref h_13 'name 'module)))"
"(let-values(((cache-key_21)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_18)"
"(if(null? post-submodule-names_19)(hash-ref h_13 'hash-code #f) #f)"
" #f))))"
"(let-values(((min-phase_22)(decl_17 'min-phase)))"
"(let-values(((max-phase_23)(decl_17 'max-phase)))"
"(let-values(((phases-h_24)"
"(let-values(((start_40) min-phase_22)"
"((end_41)(add1 max-phase_23))"
"((inc_42) 1))"
"(begin"
"(if(if(real? start_40)(if(real? end_41)(real? inc_42) #f) #f)"
"(void)"
"(let-values()(in-range start_40 end_41 inc_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(table_44 pos_45)"
"(if(< pos_45 end_41)"
"(let-values(((phase-level_46) pos_45))"
"(if #t"
"(let-values(((table_47)"
"(let-values(((v_48)"
"(hash-ref"
" h_13"
" phase-level_46"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_49)"
"(lambda(table_50)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_51)"
"(let-values(((table_52)"
" table_50))"
"(if v_48"
"(let-values(((table_53)"
" table_52))"
"(let-values(((table_54)"
"(let-values()"
"(let-values(((key_55"
" val_56)"
"(let-values()"
"(values"
" phase-level_46"
"(1/eval-linklet"
" v_48)))))"
"(hash-set"
" table_53"
" key_55"
" val_56)))))"
"(values"
" table_54)))"
" table_52))))"
"(if #f"
"(for-loop_49"
" table_51)"
" table_51))"
" table_50))"
" table_50))))"
" for-loop_49)"
" table_44)))))"
"(if #t"
"(for-loop_43 table_47(+ pos_45 inc_42))"
" table_47))"
" table_44))"
" table_44))))"
" for-loop_43)"
" '#hash()"
" start_40)))))"
"(let-values(((syntax-literals-linklet_25)(1/eval-linklet(hash-ref h_13 'stx))))"
"(let-values(((extra-inspector_26)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-compile-time-inspector c_8)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_27)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv())))"
"(let-values(((requires_28)(decl_17 'requires)))"
"(let-values(((provides_29)(decl_17 'provides)))"
"(let-values(((original-self_30)(decl_17 'self-mpi)))"
"(let-values(((phase-to-link-modules_31)"
"(decl_17 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_32)"
"(make-create-root-expand-context-from-module"
" requires_28"
" phases-h_24)))"
"(let-values(((declare-submodules_33)"
"(lambda(names_57 declare-name_58 pre?_59)"
"(if dh_12"
"(let-values()"
"(if(compiled-in-memory? c_8)"
"(let-values(((lst_60)"
"(if pre?_59"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_8)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_8))))"
"(begin"
"(if(list? lst_60)"
"(void)"
"(let-values()(in-list lst_60)))"
"((letrec-values(((for-loop_61)"
"(lambda(fold-var_62"
" lst_63)"
"(if(pair? lst_63)"
"(let-values(((c_64)"
"(unsafe-car"
" lst_63)))"
"(if #t"
"(let-values(((fold-var_65)"
"(let-values(((fold-var_66)"
" fold-var_62))"
"(let-values(((fold-var_67)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:89:12_68)"
" eval-module10.1)"
"((c18_69)"
" c_64)"
"((ns19_70)"
" ns_9)"
"((declare-name20_71)"
" declare-name_58))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" #f"
" #f"
" ns19_70"
" #t"
" declare-name20_71"
" #t"
" c18_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:89:12_68"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns19_70"
" declare-name20_71)"
" c18_69))))"
"(void)))))"
"(values"
" fold-var_67)))))"
"(if #t"
"(for-loop_61"
" fold-var_65"
"(unsafe-cdr"
" lst_63))"
" fold-var_65))"
" fold-var_62))"
" fold-var_62))))"
" for-loop_61)"
"(void)"
" lst_60)))"
"(let-values(((lst_72) names_57))"
"(begin"
"(if(list? lst_72)"
"(void)"
"(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_74"
" lst_75)"
"(if(pair? lst_75)"
"(let-values(((name_76)"
"(unsafe-car"
" lst_75)))"
"(if #t"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78)"
" fold-var_74))"
"(let-values(((fold-var_79)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_80)"
"(hash-ref"
" dh_12"
" name_76"
" #f)))"
"(begin"
"(if sm-cd_80"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                   \"missing submodule declaration:\""
" name_76)))"
"(let-values(((...nder/eval/module.rkt:93:12_81)"
" eval-module10.1)"
"((sm-cd21_82)"
" sm-cd_80)"
"((ns22_83)"
" ns_9)"
"((declare-name23_84)"
" declare-name_58))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" #f"
" #f"
" ns22_83"
" #t"
" declare-name23_84"
" #t"
" sm-cd21_82)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:93:12_81"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns22_83"
" declare-name23_84)"
" sm-cd21_82))))))"
"(void)))))"
"(values"
" fold-var_79)))))"
"(if #t"
"(for-loop_73"
" fold-var_77"
"(unsafe-cdr"
" lst_75))"
" fold-var_77))"
" fold-var_74))"
" fold-var_74))))"
" for-loop_73)"
"(void)"
" lst_72)))))"
"(void)))))"
"(let-values(((declare-this-module14_36)"
"(lambda(namespace12_85)"
"(let-values(((ns_86) namespace12_85))"
"(let-values()"
"(let-values(((m_87)"
"(let-values(((...nder/eval/module.rkt:101:16_89)"
" make-module36.1)"
"((temp28_90)"
"(1/current-module-declare-source))"
"((original-self29_91)"
" original-self_30)"
"((requires30_92)"
" requires_28)"
"((provides31_93)"
" provides_29)"
"((temp32_94)"
"(decl_17"
" 'language-info))"
"((min-phase33_95)"
" min-phase_22)"
"((max-phase34_96)"
" max-phase_23)"
"((temp35_97)"
"(decl_17"
" 'cross-phase-persistent?))"
"((temp36_98)"
"(append"
" pre-submodule-names_18"
" post-submodule-names_19))"
"((supermodule-name37_99)"
" supermodule-name_11)"
"((temp38_100)"
"(lambda()"
"(get-all-variables"
" phases-h_24)))"
"((temp39_101)"
"(lambda(data-box_103"
" ns_104"
" phase-shift_105"
" self_106"
" bulk-binding-registry_107"
" insp_108)"
"(if(unbox"
" data-box_103)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_103"
" cache-key_21"
" ns_104"
" syntax-literals-linklet_25"
" data-instance_14"
" syntax-literals-data-instance_16"
" phase-shift_105"
" original-self_30"
" self_106"
" bulk-binding-registry_107"
" insp_108"
" create-root-expand-context-from-module_32)))))"
"((temp40_102)"
"(lambda(data-box_109"
" ns_110"
" phase-shift_111"
" phase-level_112"
" self_113"
" bulk-binding-registry_114"
" insp_115)"
"(let-values(((syntax-literals-instance_116)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_109))))"
"(let-values(((phase-linklet_117)"
"(hash-ref"
" phases-h_24"
" phase-level_112"
" #f)))"
"(if phase-linklet_117"
"(let-values()"
"(let-values(((module-uses_118)"
"(hash-ref"
" phase-to-link-modules_31"
" phase-level_112)))"
"(let-values(((import-module-instances_119"
" import-instances_120)"
"(let-values(((mis_123"
" is_124)"
"(let-values(((lst_125)"
" module-uses_118))"
"(begin"
"(if(list?"
" lst_125)"
"(void)"
"(let-values()"
"(in-list"
" lst_125)))"
"((letrec-values(((for-loop_126)"
"(lambda(mis_127"
" is_128"
" lst_129)"
"(if(pair?"
" lst_129)"
"(let-values(((mu_130)"
"(unsafe-car"
" lst_129)))"
"(if #t"
"(let-values(((mis_131"
" is_132)"
"(let-values(((mis_133)"
" mis_127)"
"((is_134)"
" is_128))"
"(let-values(((mis_135"
" is_136)"
"(let-values()"
"(let-values(((mis48_137"
" is49_138)"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:129:46_139)"
" namespace-module-use->module+linklet-instances145.1)"
"((ns50_140)"
" ns_110)"
"((mu51_141)"
" mu_130)"
"((original-self52_142)"
" original-self_30)"
"((self53_143)"
" self_113)"
"((temp54_144)"
"(phase+"
"(phase-"
" phase-level_112"
"(module-use-phase"
" mu_130))"
" phase-shift_111)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances145.1))"
"(namespace-module-use->module+linklet-instances143.1"
" temp54_144"
" original-self52_142"
" #t"
" self53_143"
" #t"
" ns50_140"
" mu51_141)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:129:46_139"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
" 4)"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
"(list"
" temp54_144"
" original-self52_142"
" self53_143)"
" ns50_140"
" mu51_141))))))"
"(values"
"(cons"
" mis48_137"
" mis_133)"
"(cons"
" is49_138"
" is_134))))))"
"(values"
" mis_135"
" is_136)))))"
"(if #t"
"(for-loop_126"
" mis_131"
" is_132"
"(unsafe-cdr"
" lst_129))"
"(values"
" mis_131"
" is_132)))"
"(values"
" mis_127"
" is_128)))"
"(values"
" mis_127"
" is_128)))))"
" for-loop_126)"
" null"
" null"
" lst_125)))))"
"(values"
"(alt-reverse"
" mis_123)"
"(alt-reverse"
" is_124)))))"
"(let-values((()"
"(begin"
"(let-values(((...nder/eval/module.rkt:137:33_145)"
" check-require-access11.1)"
"((phase-linklet41_146)"
" phase-linklet_117)"
"((temp42_147)"
" 2)"
"((module-uses43_148)"
" module-uses_118)"
"((import-module-instances44_149)"
" import-module-instances_119)"
"((insp45_150)"
" insp_115)"
"((extra-inspector46_151)"
" extra-inspector_26)"
"((temp47_152)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_27"
" phase-level_112"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp42_147"
" phase-linklet41_146"
" module-uses43_148"
" import-module-instances44_149"
" insp45_150"
" extra-inspector46_151"
" temp47_152)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:137:33_145"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp42_147)"
" phase-linklet41_146"
" module-uses43_148"
" import-module-instances44_149"
" insp45_150"
" extra-inspector46_151"
" temp47_152)))"
"(values))))"
"(let-values(((module-body-instance-instance_121)"
"(let-values(((...nder/eval/module.rkt:143:35_153)"
" make-module-body-instance-instance18.1)"
"((temp55_154)"
"(lambda(name_155"
" val_156)"
"(namespace-set-transformer!"
" ns_110"
"(sub1"
" phase-level_112)"
" name_155"
" val_156))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-body-instance-instance18.1))"
"(make-module-body-instance-instance16.1"
" temp55_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:143:35_153"
" keyword-procedure-extract"
" '(#:set-transformer!)"
" 2)"
" '(#:set-transformer!)"
"(list"
" temp55_154))))))"
"(let-values(((instantiate-body_122)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_117"
"(list*"
" syntax-literals-instance_116"
" module-body-instance-instance_121"
" import-instances_120)"
"(namespace->instance"
" ns_110"
" phase-level_112)))))"
"(if(zero-phase?"
" phase-level_112)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_111)"
"(let-values()"
"(instantiate-body_122))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_110)"
"(let-values()"
"(instantiate-body_122))))))"
"(let-values()"
"(let-values(((ns-1_157)"
"(namespace->namespace-at-phase"
" ns_110"
"(phase+"
" phase-shift_111"
"(sub1"
" phase-level_112)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(make-expand-context"
" ns-1_157)))"
" 1/current-namespace"
" ns_110"
" current-module-code-inspector"
" insp_115)"
"(let-values()"
"(instantiate-body_122))))))))))))"
"(void)))))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module36.1))"
"(make-module34.1"
" temp35_97"
" #t"
" temp38_100"
" #t"
" temp40_102"
" temp32_94"
" #t"
" max-phase34_96"
" #t"
" min-phase33_95"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp39_101"
" #t"
" #f"
" #f"
" provides31_93"
" requires30_92"
" #t"
" original-self29_91"
" temp28_90"
" #t"
" temp36_98"
" #t"
" supermodule-name37_99"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:101:16_89"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)"
" 2)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)"
"(list"
" temp35_97"
" temp38_100"
" temp40_102"
" temp32_94"
" max-phase34_96"
" min-phase33_95"
" temp39_101"
" provides31_93"
" requires30_92"
" original-self29_91"
" temp28_90"
" temp36_98"
" supermodule-name37_99))))))"
"(let-values(((declare-name_88)"
"(substitute-module-declare-name"
" default-name_20)))"
"(begin"
"(if as-submodule?_10"
"(void)"
"(let-values()"
"(declare-submodules_33"
" pre-submodule-names_18"
" declare-name_88"
" #t)))"
"(let-values(((...nder/eval/module.rkt:178:6_158)"
" declare-module!55.1)"
"((ns24_159) ns_86)"
"((m25_160) m_87)"
"((declare-name26_161)"
" declare-name_88)"
"((as-submodule?27_162)"
" as-submodule?_10))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!55.1))"
"(declare-module!53.1"
" as-submodule?27_162"
" #t"
" ns24_159"
" m25_160"
" declare-name26_161)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:178:6_158"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" 5)"
" '(#:as-submodule?)"
"(list as-submodule?27_162)"
" ns24_159"
" m25_160"
" declare-name26_161)))"
"(if as-submodule?_10"
"(void)"
"(let-values()"
"(declare-submodules_33"
" post-submodule-names_19"
" declare-name_88"
" #f)))))))))))"
"(let-values(((unpack15_37)"
"(lambda(given-kws_163 given-args_164)"
"(let-values(((namespace12_165)"
"(car given-args_164)))"
"(declare-this-module14_36 namespace12_165)))))"
"(let-values(((declare-this-module16_38)"
"(lifted/34.1"
"(lambda(given-kws_166 given-argc_167)"
"(if(= given-argc_167 2)"
"(let-values(((l2_168) given-kws_166))"
"(if(pair? l2_168)"
"(if(eq?(car l2_168) '#:namespace)"
"(null?(cdr l2_168))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_169 given-args_170)"
"(unpack15_37 given-kws_169 given-args_170)))"
" '(#:namespace)"
" '(#:namespace))))"
"(begin"
"(if cache-key_21"
"(let-values()"
"(module-cache-set!"
" cache-key_21"
" declare-this-module16_38))"
"(void))"
"(let-values(((...nder/eval/module.rkt:193:2_171)"
" declare-this-module16_38)"
"((ns17_172) ns_9))"
"(if(variable-reference-constant?"
"(#%variable-reference declare-this-module16_38))"
"(declare-this-module14_36 ns17_172)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:193:2_171"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list ns17_172))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack9.1)"
"(lambda(given-kws_174 given-args_175 c7_176)"
"(let-values(((as-submodule?5_177)(if(pair? given-kws_174)(eq? '#:as-submodule?(car given-kws_174)) #f)))"
"(let-values(((as-submodule?2_178)(if as-submodule?5_177(car given-args_175)(void)))"
"((given-kws_179)(if as-submodule?5_177(cdr given-kws_174) given-kws_174))"
"((given-args_180)(if as-submodule?5_177(cdr given-args_175) given-args_175)))"
"(let-values(((namespace4_181)(if(pair? given-kws_179)(eq? '#:namespace(car given-kws_179)) #f)))"
"(let-values(((namespace1_182)(if namespace4_181(car given-args_180)(void)))"
"((given-kws_183)(if namespace4_181(cdr given-kws_179) given-kws_179))"
"((given-args_184)(if namespace4_181(cdr given-args_180) given-args_180)))"
"(let-values(((supermodule-name6_185)(pair? given-kws_183)))"
"(let-values(((supermodule-name3_186)(if supermodule-name6_185(car given-args_184)(void))))"
"(eval-module8.1"
" as-submodule?2_178"
" as-submodule?5_177"
" namespace1_182"
" namespace4_181"
" supermodule-name3_186"
" supermodule-name6_185"
" c7_176)))))))))"
"(define-values"
"(eval-module10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_187 given-argc_188)"
"(if(= given-argc_188 3)"
"(let-values(((l1_189) given-kws_187))"
"(let-values(((l1_190)"
"(if(null? l1_189) l1_189(if(eq?(car l1_189) '#:as-submodule?)(cdr l1_189) l1_189))))"
"(let-values(((l1_191) l1_190))"
"(let-values(((l1_192)"
"(if(null? l1_191) l1_191(if(eq?(car l1_191) '#:namespace)(cdr l1_191) l1_191))))"
"(let-values(((l1_193) l1_192))"
"(let-values(((l1_194)"
"(if(null? l1_193)"
" l1_193"
"(if(eq?(car l1_193) '#:supermodule-name)(cdr l1_193) l1_193))))"
"(null? l1_194)))))))"
" #f))"
"(case-lambda((given-kws_195 given-args_196 c_197)(unpack9.1 given-kws_195 given-args_196 c_197)))"
" null"
" '(#:as-submodule? #:namespace #:supermodule-name)"
"(let-values(((eval-module_198)(case-lambda((c_199)(unpack9.1 null null c_199))))) eval-module_198)))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_200 make-_201 ?_202 -ref_203 -set!_204)"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))"
"(values"
" struct:_200"
" make-_201"
" ?_202"
"(make-struct-field-accessor -ref_203 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_203 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_226"
" cache-key_227"
" ns_228"
" syntax-literals-linklet_229"
" data-instance_230"
" syntax-literals-data-instance_231"
" phase-shift_232"
" original-self_233"
" self_234"
" bulk-binding-registry_235"
" insp_236"
" create-root-expand-context-from-module_237)"
"(let-values(((inst_238)"
"(let-values(((...nder/eval/module.rkt:205:4_241) make-instance-instance13.1)"
"((ns57_242) ns_228)"
"((phase-shift58_243) phase-shift_232)"
"((self59_244) self_234)"
"((insp60_245) insp_236)"
"((temp61_246)"
"                                (lambda (name_247 val_248) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(if(variable-reference-constant?(#%variable-reference make-instance-instance13.1))"
"(make-instance-instance11.1 insp60_245 ns57_242 phase-shift58_243 self59_244 temp61_246)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:205:4_241"
" keyword-procedure-extract"
" '(#:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" 2)"
" '(#:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
"(list insp60_245 ns57_242 phase-shift58_243 self59_244 temp61_246))))))"
"(let-values(((syntax-literals-instance_239)"
"(1/instantiate-linklet"
" syntax-literals-linklet_229"
"(list deserialize-instance data-instance_230 syntax-literals-data-instance_231 inst_238))))"
"(let-values((()"
"(begin"
"(set-box! data-box_226(instance-data11.1 syntax-literals-instance_239 cache-key_227))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_240)"
"(1/instance-variable-value syntax-literals-instance_239 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_240 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_228"
"(delay"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))))"
"(if(procedure? get-encoded-root-expand-ctx_240)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_228"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_240))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_228"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_237"
" ns_228"
" phase-shift_232"
" original-self_233"
" self_234)))))))))))))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_249)"
"(let-values(((ld/h_250)(if(compiled-in-memory? c_249)(compiled-in-memory-linklet-directory c_249) c_249)))"
"(let-values(((dh_251)"
"(if(1/linklet-directory? ld/h_250)"
"(let-values()(1/linklet-directory->hash ld/h_250))"
"(let-values() #f))))"
"(let-values(((h_252)(1/linklet-bundle->hash(if dh_251(hash-ref dh_251 #f) ld/h_250))))"
"(let-values(((data-instance_253)"
"(if(compiled-in-memory? c_249)"
"(make-data-instance-from-compiled-in-memory c_249)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_252 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_254)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_252 'decl))"
"(list deserialize-instance data-instance_253))))"
"(values dh_251 h_252 data-instance_253 declaration-instance_254))))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_255)"
"(let-values(((dh_256 h_257 data-instance_258 declaration-instance_259)"
"(compiled-module->dh+h+data-instance+declaration-instance c_255)))"
" declaration-instance_259)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_260)"
"(let-values(((dh_261 h_262 data-instance_263 declaration-instance_264)"
"(compiled-module->dh+h+data-instance+declaration-instance c_260)))"
"(values h_262 declaration-instance_264))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_265)(1/make-instance 'data #f mpi-vector-id(compiled-in-memory-mpis cim_265))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_266)"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literalss cim_266))))"
"(define-values"
"(make-declaration-context-instance)"
"(lambda(ns_267)"
"(1/make-instance"
" 'declaration-context"
" #f"
" inspector-id"
"(current-code-inspector)"
" bulk-binding-registry-id"
"(namespace-bulk-binding-registry ns_267))))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_268)"
"(let-values(((ht_269) phases-h_268))"
"(begin"
"(if((lambda(ht_270)(hash? ht_270)) ht_269)(void)(let-values()(default-in-hash ht_269)))"
"((letrec-values(((for-loop_271)"
"(lambda(table_272 i_273)"
"(if i_273"
"(let-values(((phase_274 linklet_275)(hash-iterate-key+value ht_269 i_273)))"
"(if #t"
"(let-values(((table_276)"
"(let-values(((table_277) table_272))"
"(let-values(((table_278)"
"(let-values()"
"(let-values(((key_279 val_280)"
"(let-values()"
"(values"
" phase_274"
"(1/linklet-export-variables"
" linklet_275)))))"
"(hash-set table_277 key_279 val_280)))))"
"(values table_278)))))"
"(if #t(for-loop_271 table_276(hash-iterate-next ht_269 i_273)) table_276))"
" table_272))"
" table_272))))"
" for-loop_271)"
" '#hash()"
"(hash-iterate-first ht_269))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_1 insp_2)"
"(syntax-map"
" s_1"
"(lambda(tail?_3 d_4) d_4)"
"(lambda(s_5 d_6)"
"(let-values(((the-struct_7) s_5))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8) d_6)"
"((inspector2_9)"
"(let-values(((or-part_10)(syntax-inspector s_5)))(if or-part_10 or-part_10 insp_2))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
" inspector2_9"
"(syntax-tamper the-struct_7)))"
"           (raise-argument-error 'struct-copy \"syntax?\" the-struct_7))))"
" syntax-content)))"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values(((src-namespace_6) src-namespace3_2))"
"(let-values(((mod-path_7) mod-path4_3))"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:14:2_9) do-attach-module21.1)"
"((temp22_10) 'namespace-attach-module)"
"((src-namespace23_11) src-namespace_6)"
"((mod-path24_12) mod-path_7)"
"((dest-namespace25_13) dest-namespace_8)"
"((temp26_14) #t))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp26_14"
" #t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:14:2_9"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp26_14)"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13))))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 #f #f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values(((src-namespace_25) src-namespace9_21))"
"(let-values(((mod-path_26) mod-path10_22))"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:21:2_28) do-attach-module21.1)"
"((temp27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_25)"
"((mod-path29_31) mod-path_26)"
"((dest-namespace30_32) dest-namespace_27)"
"((temp31_33) #f))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp31_33"
" #t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:21:2_28"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp31_33)"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32))))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 #f #f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values(((who_45) who15_41))"
"(let-values(((src-namespace_46) src-namespace16_42))"
"(let-values(((mod-path_47) mod-path17_43))"
"(let-values(((dest-namespace_48) dest-namespace18_44))"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
"                                  (let-values () (raise-argument-error who_45 \"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_47)"
"(void)"
"                                    (let-values () (raise-argument-error who_45 \"module-path?\" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
"                                      (let-values () (raise-argument-error who_45 \"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_50"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_54)"
"(lambda(mpi_55"
" phase_56"
" attach-instances?_57"
" attach-phase_58)"
"(let-values(((mod-name_59)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_55)))))"
"(let-values(((attach-this-instance?_60)"
"(if attach-instances?_57"
"(eqv? phase_56 attach-phase_58)"
" #f)))"
"(let-values(((m-ns_61)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_59"
" '#hasheqv())"
" phase_56"
" missing_52)))"
"(if(let-values(((or-part_62)"
"(eq? missing_52 m-ns_61)))"
"(if or-part_62"
" or-part_62"
"(if attach-this-instance?_60"
"(not m-ns_61)"
" #f)))"
"(let-values()"
"(let-values(((m_63)"
"(namespace->module"
" src-namespace_46"
" mod-name_59)))"
"(begin"
"(if m_63"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_59)))"
"(if(if(module-cross-phase-persistent?"
" m_63)"
"(if(not(label-phase? phase_56))"
"(not(zero-phase? phase_56))"
" #f)"
" #f)"
"(let-values()"
"(loop_54"
" mpi_55"
" 0"
" attach-instances?_57"
" 0))"
"(let-values()"
"(let-values(((already-m_64)"
"(namespace->module"
" dest-namespace_48"
" mod-name_59)))"
"(let-values((()"
"(begin"
"(if(if already-m_64"
"(not"
"(eq?"
" already-m_64"
" m_63))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_59))"
"(void))"
"(values))))"
"(let-values(((m-ns_65"
" already?_66)"
"(if attach-this-instance?_60"
"(let-values()"
"(let-values(((m-ns_67)"
"(let-values(((src-namespace32_69)"
" src-namespace_46)"
"((mod-name33_70)"
" mod-name_59)"
"((phase34_71)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_69"
" mod-name33_70"
" phase34_71)"
"(namespace->module-namespace81.1"
" src-namespace32_69"
" mod-name33_70"
" phase34_71)))))"
"(let-values((()"
"(begin"
"(if m-ns_67"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_59)))"
"(values))))"
"(let-values(((already-m-ns_68)"
"(if already-m_64"
"(let-values(((dest-namespace35_72)"
" dest-namespace_48)"
"((mod-name36_73)"
" mod-name_59)"
"((phase37_74)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_72"
" mod-name36_73"
" phase37_74)"
"(namespace->module-namespace81.1"
" dest-namespace35_72"
" mod-name36_73"
" phase37_74)))"
" #f)))"
"(begin"
"(if(if already-m-ns_68"
"(if(not"
"(eq?"
" m-ns_67"
" already-m-ns_68))"
"(not"
"(namespace-same-instance?"
" m-ns_67"
" already-m-ns_68))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_59))"
"(void))"
"(values"
" m-ns_67"
"(if already-m-ns_68"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_56)"
"(not"
"(let-values(((src-namespace38_75)"
" src-namespace_46)"
"((mod-name39_76)"
" mod-name_59)"
"((phase40_77)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_75"
" mod-name39_76"
" phase40_77)"
"(namespace->module-namespace81.1"
" src-namespace38_75"
" mod-name39_76"
" phase40_77))))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values(((src-namespace41_78)"
" src-namespace_46)"
"((mpi42_79)"
" mpi_55)"
"((phase43_80)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_78"
" mpi42_79"
" phase43_80)"
"(namespace-module-instantiate!95.1"
" src-namespace41_78"
" mpi42_79"
" phase43_80))))))"
"(void))"
"(values"
" #f"
"(if already-m_64"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_59"
"(lambda(ht_81)"
"(hash-set"
" ht_81"
" phase_56"
" m-ns_65))"
" '#hasheqv())"
"(if already?_66"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_82)"
"(module-requires"
" m_63)))"
"(begin"
"(if(list? lst_82)"
"(void)"
"(let-values()"
"(in-list"
" lst_82)))"
"((letrec-values(((for-loop_83)"
"(lambda(fold-var_84"
" lst_85)"
"(if(pair?"
" lst_85)"
"(let-values(((phase+reqs_86)"
"(unsafe-car"
" lst_85)))"
"(if #t"
"(let-values(((fold-var_87)"
"(let-values(((lst_88)"
"(cdr"
" phase+reqs_86)))"
"(begin"
"(if(list?"
" lst_88)"
"(void)"
"(let-values()"
"(in-list"
" lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(fold-var_90"
" lst_91)"
"(if(pair?"
" lst_91)"
"(let-values(((req_92)"
"(unsafe-car"
" lst_91)))"
"(if #t"
"(let-values(((fold-var_93)"
"(let-values(((fold-var_94)"
" fold-var_90))"
"(let-values(((fold-var_95)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(module-path-index-shift"
" req_92"
"(module-self"
" m_63)"
" mpi_55)"
"(phase+"
" phase_56"
"(car"
" phase+reqs_86))"
" attach-instances?_57"
" attach-phase_58))"
"(void)))))"
"(values"
" fold-var_95)))))"
"(if #t"
"(for-loop_89"
" fold-var_93"
"(unsafe-cdr"
" lst_91))"
" fold-var_93))"
" fold-var_90))"
" fold-var_90))))"
" for-loop_89)"
" fold-var_84"
" lst_88)))))"
"(if #t"
"(for-loop_83"
" fold-var_87"
"(unsafe-cdr"
" lst_85))"
" fold-var_87))"
" fold-var_84))"
" fold-var_84))))"
" for-loop_83)"
"(void)"
" lst_82)))"
"(let-values(((lst_96)"
"(module-submodule-names"
" m_63)))"
"(begin"
"(if(list? lst_96)"
"(void)"
"(let-values()"
"(in-list"
" lst_96)))"
"((letrec-values(((for-loop_97)"
"(lambda(fold-var_98"
" lst_99)"
"(if(pair?"
" lst_99)"
"(let-values(((submod-name_100)"
"(unsafe-car"
" lst_99)))"
"(if #t"
"(let-values(((fold-var_101)"
"(let-values(((fold-var_102)"
" fold-var_98))"
"(let-values(((fold-var_103)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                       \".\""
" submod-name_100)"
" mpi_55)"
" #f"
" #f"
" attach-phase_58))"
"(void)))))"
"(values"
" fold-var_103)))))"
"(if #t"
"(for-loop_97"
" fold-var_101"
"(unsafe-cdr"
" lst_99))"
" fold-var_101))"
" fold-var_98))"
" fold-var_98))))"
" for-loop_97)"
"(void)"
" lst_96)))"
"(if(module-supermodule-name"
" m_63)"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_55)"
" #f"
" #f"
" attach-phase_58))"
"(void))))))))))))))"
"(void))))))))"
" loop_54)"
"(1/module-path-index-join mod-path_47 #f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_104) todo_51))"
"(begin"
"(if((lambda(ht_105)(hash? ht_105)) ht_104)"
"(void)"
"(let-values()(default-in-hash ht_104)))"
"((letrec-values(((for-loop_106)"
"(lambda(fold-var_107 i_108)"
"(if i_108"
"(let-values(((mod-name_109 phases_110)"
"(hash-iterate-key+value"
" ht_104"
" i_108)))"
"(if #t"
"(let-values(((fold-var_111)"
"(let-values(((ht_112)"
" phases_110))"
"(begin"
"(if((lambda(ht_113)"
"(hash? ht_113))"
" ht_112)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_112)))"
"((letrec-values(((for-loop_114)"
"(lambda(fold-var_115"
" i_116)"
"(if i_116"
"(let-values(((phase_117"
" m-ns_118)"
"(hash-iterate-key+value"
" ht_112"
" i_116)))"
"(if #t"
"(let-values(((fold-var_119)"
"(let-values(((fold-var_120)"
" fold-var_115))"
"(let-values(((fold-var_121)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_122)"
"(namespace->module"
" src-namespace_46"
" mod-name_109)))"
"(begin"
"(let-values(((dest-namespace44_123)"
" dest-namespace_48)"
"((m45_124)"
" m_122)"
"((mod-name46_125)"
" mod-name_109))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!55.1))"
"(declare-module!53.1"
" #f"
" #f"
" dest-namespace44_123"
" m45_124"
" mod-name46_125)"
"(declare-module!55.1"
" dest-namespace44_123"
" m45_124"
" mod-name46_125)))"
"(if m-ns_118"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_46"
" mod-name_109"
" phase_117)"
"(let-values(((or-part_126)"
"(let-values(((dest-namespace47_127)"
" dest-namespace_48)"
"((mod-name48_128)"
" mod-name_109)"
"((phase49_129)"
" phase_117))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_127"
" mod-name48_128"
" phase49_129)"
"(namespace->module-namespace81.1"
" dest-namespace47_127"
" mod-name48_128"
" phase49_129)))))"
"(if or-part_126"
" or-part_126"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_109"
" phase_117"
" m_122"
" m-ns_118)))))"
"(void)))))"
"(void)))))"
"(values"
" fold-var_121)))))"
"(if #t"
"(for-loop_114"
" fold-var_119"
"(hash-iterate-next"
" ht_112"
" i_116))"
" fold-var_119))"
" fold-var_115))"
" fold-var_115))))"
" for-loop_114)"
" fold-var_107"
"(hash-iterate-first"
" ht_112))))))"
"(if #t"
"(for-loop_106"
" fold-var_111"
"(hash-iterate-next ht_104 i_108))"
" fold-var_111))"
" fold-var_107))"
" fold-var_107))))"
" for-loop_106)"
"(void)"
"(hash-iterate-first ht_104))))"
"(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(let-values(((ht_130) todo_51))"
"(begin"
"(if((lambda(ht_131)(hash? ht_131)) ht_130)"
"(void)"
"(let-values()(default-in-hash-keys ht_130)))"
"((letrec-values(((for-loop_132)"
"(lambda(fold-var_133 i_134)"
"(if i_134"
"(let-values(((mod-name_135)"
"(hash-iterate-key ht_130 i_134)))"
"(if #t"
"(let-values(((fold-var_136)"
"(let-values(((fold-var_137)"
" fold-var_133))"
"(let-values(((fold-var_138)"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_135"
" src-namespace_46))"
"(void)))))"
"(values fold-var_138)))))"
"(if #t"
"(for-loop_132"
" fold-var_136"
"(hash-iterate-next ht_130 i_134))"
" fold-var_136))"
" fold-var_133))"
" fold-var_133))))"
" for-loop_132)"
"(void)"
"(hash-iterate-first ht_130))))))))))))))))))))))))"
"(define-values"
"(unpack20.1)"
"(lambda(given-kws_139 given-args_140 who15_141 src-namespace16_142 mod-path17_143 dest-namespace18_144)"
"(let-values(((attach-instances?14_145)(pair? given-kws_139)))"
"(let-values(((attach-instances?13_146)(if attach-instances?14_145(car given-args_140)(void))))"
"(do-attach-module19.1"
" attach-instances?13_146"
" attach-instances?14_145"
" who15_141"
" src-namespace16_142"
" mod-path17_143"
" dest-namespace18_144)))))"
"(define-values"
"(do-attach-module21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_147 given-argc_148)"
"(if(= given-argc_148 6)"
"(let-values(((l1_149) given-kws_147))"
"(let-values(((l1_150)"
"(if(null? l1_149) l1_149(if(eq?(car l1_149) '#:attach-instances?)(cdr l1_149) l1_149))))"
"(null? l1_150)))"
" #f))"
"(case-lambda"
"((given-kws_151 given-args_152 who_153 src-namespace_154 mod-path_155 dest-namespace_156)"
"(unpack20.1 given-kws_151 given-args_152 who_153 src-namespace_154 mod-path_155 dest-namespace_156)))"
" null"
" '(#:attach-instances?)"
"(let-values(((do-attach-module_157)"
"(case-lambda"
"((who_158 src-namespace_159 mod-path_160 dest-namespace_161)"
"(unpack20.1 null null who_158 src-namespace_159 mod-path_160 dest-namespace_161)))))"
" do-attach-module_157)))"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_2)(1/current-namespace)))"
"(let-values(((phase_3)(namespace-phase current-ns_2)))"
"(let-values(((ns_4)(namespace->namespace-at-phase(make-namespace) phase_3)))"
"(begin"
"(1/namespace-attach-module current-ns_2 ''#%kernel ns_4)"
"(namespace-primitive-module-visit! ns_4 '#%kernel)"
" ns_4))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_5)"
"(lambda(s3_6 ns1_7 ns2_8)"
"(let-values(((s_9) s3_6))"
"(let-values(((ns_10)(if ns2_8 ns1_7(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_9)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_10)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_10)))"
"(values))))"
"(let-values(((root-ctx_11)(namespace-get-root-expand-ctx ns_10)))"
"(let-values(((post-scope_12)(root-expand-context-post-expansion-scope root-ctx_11)))"
"(let-values(((other-namespace-scopes_13)"
"(alt-reverse"
"(let-values(((ht_16)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_11)"
"(namespace-phase ns_10))))"
"(begin"
"(if((lambda(ht_17)(if(hash? ht_17)(immutable? ht_17) #f)) ht_16)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_16)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 i_20)"
"(if i_20"
"(let-values(((sc_21)"
"(unsafe-immutable-hash-iterate-key"
" ht_16"
" i_20)))"
"(if #t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_19))"
"(if(equal?"
" sc_21"
" post-scope_12)"
" fold-var_23"
"(let-values(((fold-var_24)"
" fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
" sc_21)"
" fold-var_24))))"
"(values"
" fold-var_25)))))))"
"(if #t"
"(for-loop_18"
" fold-var_22"
"(unsafe-immutable-hash-iterate-next"
" ht_16"
" i_20))"
" fold-var_22))"
" fold-var_19))"
" fold-var_19))))"
" for-loop_18)"
" null"
"(unsafe-immutable-hash-iterate-first ht_16)))))))"
"(let-values(((add-ns-scopes_14)"
"(lambda(s_26)"
"(syntax-set-inspector"
"(syntax-transfer-shifts"
"(add-scopes"
"(push-scope s_26 post-scope_12)"
" other-namespace-scopes_13)"
"(root-expand-context-all-scopes-stx root-ctx_11))"
"(let-values(((or-part_27)(namespace-declaration-inspector ns_10)))"
"(if or-part_27 or-part_27(current-code-inspector)))))))"
"(let-values(((maybe-module-id_15)"
"(if(pair?(1/syntax-e s_9))"
"(if(identifier?(car(1/syntax-e s_9)))"
"(add-ns-scopes_14(car(1/syntax-e s_9)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_15"
"(1/free-identifier=?"
" maybe-module-id_15"
"(1/namespace-module-identifier ns_10))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_9"
"(cons maybe-module-id_15(cdr(1/syntax-e s_9)))"
" s_9"
" s_9))"
"(let-values()(add-ns-scopes_14 s_9))))))))))))))))"
"(case-lambda"
"((s_28)(namespace-syntax-introduce4_5 s_28 #f #f))"
"((s_29 ns1_30)(namespace-syntax-introduce4_5 s_29 ns1_30 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_31)"
"(lambda(where6_32 where7_33)"
"(let-values(((where_34)(if where7_33 where6_32(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_35)(1/namespace? where_34)))"
"(if or-part_35 or-part_35(phase? where_34)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_34)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_34)(namespace-phase where_34) where_34))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_31 #f #f))"
"((where6_36)(namespace-module-identifier8_31 where6_36 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_37)"
"(begin"
"      (if (symbol? sym_37) (void) (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_37)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_37)))))"
"(define-values"
"(lifted/1.1$7)"
"(make-required"
" 'do-namespace-require"
"(case-lambda((self_38 who_39 req_40 ns_41)(apply missing-kw self_38 who_39 req_40 ns_41 null)))"
" #f"
" #f))"
"(define-values"
"(do-namespace-require17.1)"
"(lambda(run?10_42 visit?11_43 who14_44 req15_45 ns16_46)"
"(let-values(((run?_47) run?10_42))"
"(let-values(((visit?_48) visit?11_43))"
"(let-values(((who_49) who14_44))"
"(let-values(((req_50) req15_45))"
"(let-values(((ns_51) ns16_46))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_51)"
"(void)"
"                                  (let-values () (raise-argument-error who_49 \"namespace?\" ns_51)))"
"(values))))"
"(let-values(((ctx-stx_52)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_51)))))"
"(if(let-values(((or-part_53)(1/module-path-index? req_50)))"
"(if or-part_53 or-part_53(1/module-path? req_50)))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:112:4_54) perform-require!55.1)"
"((temp70_55)"
"(if(1/module-path-index? req_50) req_50(1/module-path-index-join req_50 #f)))"
"((temp71_56) #f)"
"((temp72_57) #f)"
"((ctx-stx73_58) ctx-stx_52)"
"((ns74_59) ns_51)"
"((run?75_60) run?_47)"
"((visit?76_61) visit?_48)"
"((temp77_62)(namespace-phase ns_51))"
"((temp78_63)(namespace-phase ns_51)))"
"(if(variable-reference-constant?(#%variable-reference perform-require!55.1))"
"(perform-require!53.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp77_62"
" #f"
" #f"
" temp78_63"
" run?75_60"
" #t"
" visit?76_61"
" #t"
" temp70_55"
" temp71_56"
" temp72_57"
" ctx-stx73_58"
" ns74_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:112:4_54"
" keyword-procedure-extract"
" '(#:phase-shift #:run-phase #:run? #:visit?)"
" 7)"
" '(#:phase-shift #:run-phase #:run? #:visit?)"
"(list temp77_62 temp78_63 run?75_60 visit?76_61)"
" temp70_55"
" temp71_56"
" temp72_57"
" ctx-stx73_58"
" ns74_59))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:123:4_64) parse-and-perform-requires!22.1)"
"((run?79_65) run?_47)"
"((visit?80_66) visit?_48)"
"((temp81_67)(list(1/datum->syntax ctx-stx_52 req_50)))"
"((temp82_68) #f)"
"((ns83_69) ns_51)"
"((temp84_70)(namespace-phase ns_51))"
"((temp85_71)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" run?79_65"
" #t"
" #f"
" #f"
" visit?80_66"
" #t"
" temp81_67"
" temp82_68"
" ns83_69"
" temp84_70"
" temp85_71)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:123:4_64"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 7)"
" '(#:run? #:visit?)"
"(list run?79_65 visit?80_66)"
" temp81_67"
" temp82_68"
" ns83_69"
" temp84_70"
" temp85_71)))))))))))))))"
"(define-values"
"(unpack18.1$1)"
"(lambda(given-kws_72 given-args_73 who14_74 req15_75 ns16_76)"
"(let-values(((run?10_77)(car given-args_73))"
"((given-kws_78)(cdr given-kws_72))"
"((given-args_79)(cdr given-args_73)))"
"(let-values(((visit?11_80)(car given-args_79)))"
"(do-namespace-require17.1 run?10_77 visit?11_80 who14_74 req15_75 ns16_76)))))"
"(define-values"
"(do-namespace-require19.1)"
"(lifted/1.1$7"
"(lambda(given-kws_81 given-argc_82)"
"(if(= given-argc_82 5)"
"(let-values(((l2_83) given-kws_81))"
"(if(pair? l2_83)"
"(if(eq?(car l2_83) '#:run?)"
"(let-values(((l2_84)(cdr l2_83)))"
"(if(pair? l2_84)(if(eq?(car l2_84) '#:visit?)(null?(cdr l2_84)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_85 given-args_86 who_87 req_88 ns_89)(unpack18.1$1 given-kws_85 given-args_86 who_87 req_88 ns_89)))"
" '(#:run? #:visit?)"
" '(#:run? #:visit?)))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require23_90)"
"(lambda(req22_91 ns20_92 ns21_93)"
"(let-values(((req_94) req22_91))"
"(let-values(((ns_95)(if ns21_93 ns20_92(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:132:2_96) do-namespace-require19.1)"
"((temp86_97) #t)"
"((temp87_98) #f)"
"((temp88_99) 'namespace-require)"
"((req89_100) req_94)"
"((ns90_101) ns_95))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require19.1))"
"(do-namespace-require17.1 temp86_97 temp87_98 temp88_99 req89_100 ns90_101)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:132:2_96"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 5)"
" '(#:run? #:visit?)"
"(list temp86_97 temp87_98)"
" temp88_99"
" req89_100"
" ns90_101)))))))))"
"(case-lambda"
"((req_102)(namespace-require23_90 req_102 #f #f))"
"((req_103 ns20_104)(namespace-require23_90 req_103 ns20_104 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time28_105)"
"(lambda(req27_106 ns25_107 ns26_108)"
"(let-values(((req_109) req27_106))"
"(let-values(((ns_110)(if ns26_108 ns25_107(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:135:2_111) do-namespace-require19.1)"
"((temp91_112) #f)"
"((temp92_113) #t)"
"((temp93_114) 'namespace-require/expansion-time)"
"((req94_115) req_109)"
"((ns95_116) ns_110))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require19.1))"
"(do-namespace-require17.1 temp91_112 temp92_113 temp93_114 req94_115 ns95_116)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:135:2_111"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 5)"
" '(#:run? #:visit?)"
"(list temp91_112 temp92_113)"
" temp93_114"
" req94_115"
" ns95_116)))))))))"
"(case-lambda"
"((req_117)(namespace-require/expansion-time28_105 req_117 #f #f))"
"((req_118 ns25_119)(namespace-require/expansion-time28_105 req_118 ns25_119 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant33_120)"
"(lambda(req32_121 ns30_122 ns31_123)"
"(let-values(((req_124) req32_121))"
"(let-values(((ns_125)(if ns31_123 ns30_122(1/current-namespace))))"
"(let-values()(1/namespace-require req_124 ns_125)))))))"
"(case-lambda"
"((req_126)(namespace-require/constant33_120 req_126 #f #f))"
"((req_127 ns30_128)(namespace-require/constant33_120 req_127 ns30_128 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy38_129)"
"(lambda(req37_130 ns35_131 ns36_132)"
"(let-values(((req_133) req37_130))"
"(let-values(((ns_134)(if ns36_132 ns35_131(1/current-namespace))))"
"(let-values()(1/namespace-require req_133 ns_134)))))))"
"(case-lambda"
"((req_135)(namespace-require/copy38_129 req_135 #f #f))"
"((req_136 ns35_137)(namespace-require/copy38_129 req_136 ns35_137 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value47_138)"
"(lambda(sym46_139"
" use-mapping?40_140"
" failure-thunk41_141"
" ns42_142"
" use-mapping?43_143"
" failure-thunk44_144"
" ns45_145)"
"(let-values(((sym_146) sym46_139))"
"(let-values(((use-mapping?_147)(if use-mapping?43_143 use-mapping?40_140 #f)))"
"(let-values(((failure-thunk_148)(if failure-thunk44_144 failure-thunk41_141 #f)))"
"(let-values(((ns_149)(if ns45_145 ns42_142(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_146)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_146)))"
"(if(let-values(((or-part_150)(not failure-thunk_148)))"
"(if or-part_150"
" or-part_150"
"(if(procedure? failure-thunk_148)"
"(procedure-arity-includes? failure-thunk_148 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                   \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_148)))"
"(if(1/namespace? ns_149)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_149)))"
"((call/ec"
"(lambda(escape_151)"
"(let-values(((var-ns_152 var-phase-level_153 var-sym_154)"
"(if use-mapping?_147"
"(let-values()"
"(let-values(((id_156)(1/datum->syntax #f sym_146)))"
"(let-values(((b_157)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_156 ns_149)"
"(namespace-phase ns_149)"
" ns_149)))"
"(let-values(((v_158)"
"(if b_157"
"(let-values(((b96_159) b_157)"
"((empty-env97_160) empty-env)"
"((null98_161) null)"
"((ns99_162) ns_149)"
"((temp100_163)"
"(namespace-phase ns_149))"
"((id101_164) id_156))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" binding-lookup48.1))"
"(binding-lookup46.1"
" #f"
" #f"
" #f"
" #f"
" b96_159"
" empty-env97_160"
" null98_161"
" ns99_162"
" temp100_163"
" id101_164)"
"(binding-lookup48.1"
" b96_159"
" empty-env97_160"
" null98_161"
" ns99_162"
" temp100_163"
" id101_164)))"
" variable)))"
"(begin"
"(if(variable? v_158)"
"(void)"
"(let-values()"
"(escape_151"
"(let-values(((or-part_165) failure-thunk_148))"
"(if or-part_165"
" or-part_165"
"(lambda()"
"(raise"
"(make-exn:fail:syntax"
"(format"
"(string-append"
"                                                                           \"namespace-variable-value: bound to syntax\\n\""
"                                                                           \"  in: ~s\")"
" sym_146)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_157)"
"(values"
"(let-values(((ns102_166) ns_149)"
"((temp103_167)"
"(module-binding-module b_157))"
"((temp104_168)"
"(phase-"
"(namespace-phase ns_149)"
"(module-binding-phase b_157))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns102_166"
" temp103_167"
" temp104_168)"
"(namespace->module-namespace81.1"
" ns102_166"
" temp103_167"
" temp104_168)))"
"(module-binding-phase b_157)"
"(module-binding-sym b_157))"
"(values ns_149(namespace-phase ns_149) sym_146)))))))"
"(let-values()(values ns_149(namespace-phase ns_149) sym_146)))))"
"(let-values(((val_155)"
"(namespace-get-variable"
" var-ns_152"
" var-phase-level_153"
" var-sym_154"
"(lambda()"
"(escape_151"
"(let-values(((or-part_169) failure-thunk_148))"
"(if or-part_169"
" or-part_169"
"(raise"
" exn:fail:contract:variable"
"(format"
"(string-append"
"                                                             \"namespace-variable-value: given name is not defined\\n\""
"                                                             \"  name: ~s\"))"
" sym_146))))))))"
"(lambda() val_155)))))))))))))))"
"(case-lambda"
"((sym_170)(namespace-variable-value47_138 sym_170 #f #f #f #f #f #f))"
"((sym_171 use-mapping?_172 failure-thunk_173 ns42_174)"
"(namespace-variable-value47_138 sym_171 use-mapping?_172 failure-thunk_173 ns42_174 #t #t #t))"
"((sym_175 use-mapping?_176 failure-thunk41_177)"
"(namespace-variable-value47_138 sym_175 use-mapping?_176 failure-thunk41_177 #f #t #t #f))"
"((sym_178 use-mapping?40_179)(namespace-variable-value47_138 sym_178 use-mapping?40_179 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!55_180)"
"(lambda(sym53_181 val54_182 map?49_183 ns50_184 map?51_185 ns52_186)"
"(let-values(((sym_187) sym53_181))"
"(let-values(((val_188) val54_182))"
"(let-values(((map?_189)(if map?51_185 map?49_183 #f)))"
"(let-values(((ns_190)(if ns52_186 ns50_184(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_187)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_187)))"
"(if(1/namespace? ns_190)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_190)))"
"(namespace-set-variable! ns_190(namespace-phase ns_190) sym_187 val_188)"
"(if map?_189"
"(let-values()"
"(let-values(((id_191)(1/datum->syntax #f sym_187)))"
"(let-values(((temp105_192)(1/namespace-syntax-introduce id_191 ns_190))"
"((temp106_193)"
"(let-values(((temp108_195)(namespace-mpi ns_190))"
"((temp109_196)(namespace-phase ns_190))"
"((sym110_197) sym_187))"
"(if(variable-reference-constant?"
"(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp108_195"
" temp109_196"
" sym110_197)"
"(make-module-binding22.1 temp108_195 temp109_196 sym110_197))))"
"((temp107_194)(namespace-phase ns_190)))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f temp105_192 temp106_193 temp107_194)"
"(add-binding!17.1 temp105_192 temp106_193 temp107_194)))))"
"(void)))))))))))"
"(case-lambda"
"((sym_198 val_199)(namespace-set-variable-value!55_180 sym_198 val_199 #f #f #f #f))"
"((sym_200 val_201 map?_202 ns50_203)(namespace-set-variable-value!55_180 sym_200 val_201 map?_202 ns50_203 #t #t))"
"((sym_204 val_205 map?49_206)(namespace-set-variable-value!55_180 sym_204 val_205 map?49_206 #f #t #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!60_207)"
"(lambda(sym59_208 ns57_209 ns58_210)"
"(let-values(((sym_211) sym59_208))"
"(let-values(((ns_212)(if ns58_210 ns57_209(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_211)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_211)))"
"(if(1/namespace? ns_212)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_212)))"
"(namespace-unset-variable! ns_212(namespace-phase ns_212) sym_211))))))))"
"(case-lambda"
"((sym_213)(namespace-undefine-variable!60_207 sym_213 #f #f))"
"((sym_214 ns57_215)(namespace-undefine-variable!60_207 sym_214 ns57_215 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols64_216)"
"(lambda(ns62_217 ns63_218)"
"(let-values(((ns_219)(if ns63_218 ns62_217(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_219)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_219)))"
" null))))))"
"(case-lambda"
"(()(namespace-mapped-symbols64_216 #f #f))"
"((ns62_220)(namespace-mapped-symbols64_216 ns62_220 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase68_221)"
"(lambda(ns66_222 ns67_223)"
"(let-values(((ns_224)(if ns67_223 ns66_222(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_224)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_224)))"
"(namespace-phase ns_224)))))))"
"(case-lambda(()(namespace-base-phase68_221 #f #f))((ns66_225)(namespace-base-phase68_221 ns66_225 #t)))))"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_1 self_2)"
"(let-values(((extract_3)"
"(lambda(ok?_4)"
"(let-values(((result-l_5)"
"(alt-reverse"
"(let-values(((ht_6) provides_1))"
"(begin"
"(if((lambda(ht_7)(hash? ht_7)) ht_6)"
"(void)"
"(let-values()(default-in-hash ht_6)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 i_10)"
"(if i_10"
"(let-values(((phase_11 at-phase_12)"
"(hash-iterate-key+value ht_6 i_10)))"
"(if #t"
"(let-values(((fold-var_13)"
"(let-values(((l_14)"
"(alt-reverse"
"(let-values(((ht_15)"
" at-phase_12))"
"(begin"
"(if((lambda(ht_16)"
"(hash? ht_16))"
" ht_15)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18"
" i_19)"
"(if i_19"
"(let-values(((sym_20"
" b/p_21)"
"(hash-iterate-key+value"
" ht_15"
" i_19)))"
"(if #t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_18))"
"(if(ok?_4"
" b/p_21)"
"(let-values(((fold-var_24)"
" fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_26)"
"(provided-as-binding"
" b/p_21)))"
"(cons"
" sym_20"
"(if(eq?"
" self_2"
"(module-binding-module"
" b_26))"
"(let-values()"
" null)"
"(if(if(zero-phase?"
"(module-binding-phase"
" b_26))"
"(if(zero-phase?"
"(module-binding-nominal-phase"
" b_26))"
"(eq?"
"(module-binding-sym"
" b_26)"
" sym_20)"
" #f)"
" #f)"
"(let-values()"
"(list"
"(module-binding-module"
" b_26)))"
"(let-values()"
"(list"
"(module-binding-module"
" b_26)"
"(module-binding-phase"
" b_26)"
"(module-binding-sym"
" b_26)"
"(module-binding-nominal-phase"
" b_26))))))))"
" fold-var_24))))"
"(values"
" fold-var_25)))"
" fold-var_23))))"
"(if #t"
"(for-loop_17"
" fold-var_22"
"(hash-iterate-next"
" ht_15"
" i_19))"
" fold-var_22))"
" fold-var_18))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(hash-iterate-first"
" ht_15)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_27)"
"(lambda(fold-var_28)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30)"
" fold-var_28))"
"(if(null?"
" l_14)"
" fold-var_30"
"(let-values(((fold-var_31)"
" fold-var_30))"
"(let-values(((fold-var_32)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_11"
"(let-values(((.../provide-for-api.rkt:31:20_33)"
" sort9.1)"
"((l4_34)"
" l_14)"
"((symbol<?5_35)"
" symbol<?)"
"((car6_36)"
" car))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" car6_36"
" #t"
" l4_34"
" symbol<?5_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:31:20_33"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list"
" car6_36)"
" l4_34"
" symbol<?5_35)))))"
" fold-var_31))))"
"(values"
" fold-var_32)))))))"
"(if #f"
"(for-loop_27"
" fold-var_29)"
" fold-var_29))"
" fold-var_28))"
" fold-var_28))))"
" for-loop_27)"
" fold-var_9)))))"
"(if #t"
"(for-loop_8"
" fold-var_13"
"(hash-iterate-next ht_6 i_10))"
" fold-var_13))"
" fold-var_9))"
" fold-var_9))))"
" for-loop_8)"
" null"
"(hash-iterate-first ht_6)))))))"
"(let-values(((.../provide-for-api.rkt:32:4_37) sort9.1)"
"((result-l1_38) result-l_5)"
"((<2_39) <)"
"((car3_40) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car3_40 #t result-l1_38 <2_39)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:32:4_37"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car3_40)"
" result-l1_38"
" <2_39)))))))"
"(values"
"(extract_3(lambda(b/p_41)(not(provided-as-transformer? b/p_41))))"
"(extract_3 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_42 all-vars_43)"
"(let-values(((result-l_44)"
"(alt-reverse"
"(let-values(((ht_45) all-vars_43))"
"(begin"
"(if((lambda(ht_46)(hash? ht_46)) ht_45)(void)(let-values()(default-in-hash ht_45)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48 i_49)"
"(if i_49"
"(let-values(((phase_50 vars_51)(hash-iterate-key+value ht_45 i_49)))"
"(if #t"
"(let-values(((fold-var_52)"
"(let-values(((fold-var_53) fold-var_48))"
"(if #t"
"(let-values(((l_54)"
"(let-values(((syms_55)"
"(hash-ref"
" provides_42"
" phase_50"
" '#hasheq())))"
"(alt-reverse"
"(let-values(((lst_56) vars_51))"
"(begin"
"(if(list? lst_56)"
"(void)"
"(let-values()"
"(in-list lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58"
" lst_59)"
"(if(pair?"
" lst_59)"
"(let-values(((var-sym_60)"
"(unsafe-car"
" lst_59)))"
"(if #t"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62)"
" fold-var_58))"
"(if(hash-ref"
" syms_55"
" var-sym_60"
" #f)"
" fold-var_62"
"(let-values(((fold-var_63)"
" fold-var_62))"
"(let-values(((fold-var_64)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_60)"
" fold-var_63))))"
"(values"
" fold-var_64)))))))"
"(if #t"
"(for-loop_57"
" fold-var_61"
"(unsafe-cdr"
" lst_59))"
" fold-var_61))"
" fold-var_58))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_56)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_68)"
" fold-var_66))"
"(if(null?"
" l_54)"
" fold-var_68"
"(let-values(((fold-var_69)"
" fold-var_68))"
"(let-values(((fold-var_70)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_50"
"(let-values(((l10_71)"
" l_54)"
"((symbol<?11_72)"
" symbol<?))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_71"
" symbol<?11_72)"
"(sort9.1"
" l10_71"
" symbol<?11_72)))))"
" fold-var_69))))"
"(values"
" fold-var_70)))))))"
"(if #f"
"(for-loop_65"
" fold-var_67)"
" fold-var_67))"
" fold-var_66))"
" fold-var_66))))"
" for-loop_65)"
" fold-var_53)))"
" fold-var_53))))"
"(if #t"
"(for-loop_47 fold-var_52(hash-iterate-next ht_45 i_49))"
" fold-var_52))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
" null"
"(hash-iterate-first ht_45)))))))"
"(let-values(((.../provide-for-api.rkt:49:2_73) sort9.1)((result-l7_74) result-l_44)((<8_75) <)((car9_76) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car9_76 #t result-l7_74 <8_75)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:49:2_73"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car9_76)"
" result-l7_74"
" <8_75))))))"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(1/linklet-directory? c_1)))(if or-part_3 or-part_3(1/linklet-bundle? c_1)))))))"
"(define-values"
"(compiled->linklet-directory)"
"(lambda(c_4)(if(compiled-in-memory? c_4)(compiled-in-memory-linklet-directory c_4) c_4)))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_5)"
"(let-values(((ld_6)(compiled->linklet-directory c_5)))"
"(let-values(((or-part_7)"
"(if(1/linklet-directory? ld_6)"
"(if(let-values(((b_8)(hash-ref(1/linklet-directory->hash ld_6) #f #f)))"
"(if b_8(hash-ref(1/linklet-bundle->hash b_8) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_7 or-part_7(if(1/linklet-bundle? ld_6)(hash-ref(1/linklet-bundle->hash ld_6) 'decl #f) #f))))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_9)"
"(begin"
"(if(1/compiled-module-expression? c_9)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_9)))"
"(hash-ref"
"(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_9)) #f))"
" 'name)))"
"((c_10 name_11)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_10)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_13)(symbol? name_11)))"
"(if or-part_13"
" or-part_13"
"(if(pair? name_11)(if(list? name_11)(andmap2 symbol? name_11) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_11)))"
"(values))))"
"(let-values(((prefix_12)(if(symbol? name_11) null(alt-reverse(cdr(alt-reverse name_11))))))"
"(change-module-name c_10 name_11 prefix_12)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_14 non-star?_15)"
"(begin"
"(if(1/compiled-module-expression? c_14)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_14)))"
"(if(compiled-in-memory? c_14)"
"(let-values()"
"(if non-star?_15"
"(compiled-in-memory-pre-compiled-in-memorys c_14)"
"(compiled-in-memory-post-compiled-in-memorys c_14)))"
"(let-values()"
"(let-values(((ht_16)(1/linklet-directory->hash c_14)))"
"(let-values(((bh_17)(1/linklet-bundle->hash(hash-ref ht_16 #f))))"
"(let-values(((names_18)(hash-ref bh_17(if non-star?_15 'pre 'post) null)))"
"(alt-reverse"
"(let-values(((lst_19) names_18))"
"(begin"
"(if(list? lst_19)(void)(let-values()(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21 lst_22)"
"(if(pair? lst_22)"
"(let-values(((name_23)(unsafe-car lst_22)))"
"(if #t"
"(let-values(((fold-var_24)"
"(let-values(((fold-var_25) fold-var_21))"
"(let-values(((fold-var_26)"
"(let-values()"
"(cons"
"(let-values()(hash-ref ht_16 name_23))"
" fold-var_25))))"
"(values fold-var_26)))))"
"(if #t(for-loop_20 fold-var_24(unsafe-cdr lst_22)) fold-var_24))"
" fold-var_21))"
" fold-var_21))))"
" for-loop_20)"
" null"
" lst_19)))))))))))"
"((c_27 non-star?_28 submods_29)"
"(begin"
"(if(1/compiled-module-expression? c_27)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_27)))"
"(if(if(list? submods_29)(andmap2 1/compiled-module-expression? submods_29) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_29)))"
"(if(if(compiled-in-memory? c_27)(andmap2 compiled-in-memory? submods_29) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_30)"
"(if non-star?_28 submods_29(compiled-in-memory-pre-compiled-in-memorys c_27))))"
"(let-values(((post-compiled-in-memorys_31)"
"(if non-star?_28(compiled-in-memory-post-compiled-in-memorys c_27) submods_29)))"
"(fixup-submodule-names"
"(let-values(((the-struct_32) c_27))"
"(if(compiled-in-memory? the-struct_32)"
"(let-values(((pre-compiled-in-memorys1_33) pre-compiled-in-memorys_30)"
"((post-compiled-in-memorys2_34) post-compiled-in-memorys_31)"
"((linklet-directory3_35)"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_27)) #f)"
" non-star?_28"
" submods_29)"
"(append pre-compiled-in-memorys_30 post-compiled-in-memorys_31))))"
"(compiled-in-memory1.1"
" linklet-directory3_35"
"(compiled-in-memory-phase the-struct_32)"
"(compiled-in-memory-max-phase the-struct_32)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_32)"
"(compiled-in-memory-compile-time-inspector the-struct_32)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_32)"
"(compiled-in-memory-mpis the-struct_32)"
"(compiled-in-memory-syntax-literalss the-struct_32)"
" pre-compiled-in-memorys1_33"
" post-compiled-in-memorys2_34))"
"                   (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_32)))))))"
"(let-values()"
"(fixup-submodule-names"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_27)) #f)"
" non-star?_28"
" submods_29)"
"(map2"
" compiled->linklet-directory"
"(append"
"(if non-star?_28 submods_29(1/module-compiled-submodules c_27 #t))"
"(if non-star?_28(1/module-compiled-submodules c_27 #f) submods_29)))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_36)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_36)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_36)))"
"(values))))"
"(let-values(((inst_37)(compiled-module->declaration-instance c_36)))"
"(1/instance-variable-value inst_37 'language-info)))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_38)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_38)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_38)))"
"(values))))"
"(let-values(((inst_39)(compiled-module->declaration-instance c_38)))"
"(1/instance-variable-value inst_39 'requires)))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_40)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_40)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_40)))"
"(values))))"
"(let-values(((inst_41)(compiled-module->declaration-instance c_40)))"
"(provides->api-provides"
"(1/instance-variable-value inst_41 'provides)"
"(1/instance-variable-value inst_41 'self-mpi))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_42)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_42)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_42)))"
"(values))))"
"(let-values(((h_43 inst_44)(compiled-module->h+declaration-instance c_42)))"
"(let-values(((min-phase_45)(1/instance-variable-value inst_44 'min-phase)))"
"(let-values(((max-phase_46)(1/instance-variable-value inst_44 'max-phase)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_44 'provides)"
"(let-values(((start_47) min-phase_45)((end_48)(add1 max-phase_46))((inc_49) 1))"
"(begin"
"(if(if(real? start_47)(if(real? end_48)(real? inc_49) #f) #f)"
"(void)"
"(let-values()(in-range start_47 end_48 inc_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(table_51 pos_52)"
"(if(< pos_52 end_48)"
"(let-values(((phase-level_53) pos_52))"
"(if #t"
"(let-values(((table_54)"
"(let-values(((table_55) table_51))"
"(let-values(((table_56)"
"(let-values()"
"(let-values(((key_57 val_58)"
"(let-values()"
"(let-values(((linklet_59)"
"(hash-ref"
" h_43"
" phase-level_53"
" #f)))"
"(values"
" phase-level_53"
"(if linklet_59"
"(1/linklet-export-variables"
" linklet_59)"
" null))))))"
"(hash-set table_55 key_57 val_58)))))"
"(values table_56)))))"
"(if #t(for-loop_50 table_54(+ pos_52 inc_49)) table_54))"
" table_51))"
" table_51))))"
" for-loop_50)"
" '#hash()"
" start_47))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_60)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_60)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                         \"compiled-module-expression?\""
" c_60)))"
"(values))))"
"(let-values(((inst_61)(compiled-module->declaration-instance c_60)))"
"(1/instance-variable-value inst_61 'cross-phase-persistent?)))))"
"(define-values(module-compiled-immediate-name)(lambda(c_62)(car(alt-reverse(1/module-compiled-name c_62)))))"
"(define-values"
"(change-module-name)"
"(lambda(c_63 name_64 prefix_65)"
"(let-values(((full-name_66)(if(null? prefix_65) name_64(append prefix_65(list name_64)))))"
"(let-values(((next-prefix_67)(if(null? prefix_65)(list name_64) full-name_66)))"
"(let-values(((recur_68)"
"(lambda(sub-c_69 name_70)"
"(if(equal?(1/module-compiled-name sub-c_69)(append next-prefix_67(list name_70)))"
" sub-c_69"
"(change-module-name sub-c_69 name_70 next-prefix_67)))))"
"(if(compiled-in-memory? c_63)"
"(let-values()"
"(let-values(((change-submodule-name_71)"
"(lambda(sub-c_74)(recur_68 sub-c_74(module-compiled-immediate-name sub-c_74)))))"
"(let-values(((pre-compiled-in-memorys_72)"
"(map2 change-submodule-name_71(compiled-in-memory-pre-compiled-in-memorys c_63))))"
"(let-values(((post-compiled-in-memorys_73)"
"(map2 change-submodule-name_71(compiled-in-memory-post-compiled-in-memorys c_63))))"
"(let-values(((the-struct_75) c_63))"
"(if(compiled-in-memory? the-struct_75)"
"(let-values(((pre-compiled-in-memorys4_76) pre-compiled-in-memorys_72)"
"((post-compiled-in-memorys5_77) post-compiled-in-memorys_73)"
"((linklet-directory6_78)"
"(rebuild-linklet-directory"
"(update-one-name"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_63)) #f)"
" full-name_66)"
"(append pre-compiled-in-memorys_72 post-compiled-in-memorys_73))))"
"(compiled-in-memory1.1"
" linklet-directory6_78"
"(compiled-in-memory-phase the-struct_75)"
"(compiled-in-memory-max-phase the-struct_75)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_75)"
"(compiled-in-memory-compile-time-inspector the-struct_75)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_75)"
"(compiled-in-memory-mpis the-struct_75)"
"(compiled-in-memory-syntax-literalss the-struct_75)"
" pre-compiled-in-memorys4_76"
" post-compiled-in-memorys5_77))"
"                        (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_75)))))))"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_79)(1/linklet-directory->hash c_63)))"
"(begin"
"(if((lambda(ht_80)(hash? ht_80)) ht_79)(void)(let-values()(default-in-hash ht_79)))"
"((letrec-values(((for-loop_81)"
"(lambda(table_82 i_83)"
"(if i_83"
"(let-values(((key_84 val_85)(hash-iterate-key+value ht_79 i_83)))"
"(if #t"
"(let-values(((table_86)"
"(let-values(((table_87) table_82))"
"(let-values(((table_88)"
"(let-values()"
"(let-values(((key_89 val_90)"
"(let-values()"
"(values"
" key_84"
"(if(not key_84)"
"(update-one-name"
" val_85"
" full-name_66)"
"(recur_68"
" val_85"
" key_84))))))"
"(hash-set table_87 key_89 val_90)))))"
"(values table_88)))))"
"(if #t(for-loop_81 table_86(hash-iterate-next ht_79 i_83)) table_86))"
" table_82))"
" table_82))))"
" for-loop_81)"
" '#hasheq()"
"(hash-iterate-first ht_79))))))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_91 name_92)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_91) 'name name_92))))"
"(define-values(fixup-submodule-names)(lambda(c_93)(1/module-compiled-name c_93(1/module-compiled-name c_93))))"
"(define-values"
"(rebuild-linklet-directory)"
"(lambda(main_94 submods_95)"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_96) submods_95))"
"(begin"
"(if(list? lst_96)(void)(let-values()(in-list lst_96)))"
"((letrec-values(((for-loop_97)"
"(lambda(ht_98 lst_99)"
"(if(pair? lst_99)"
"(let-values(((submod_100)(unsafe-car lst_99)))"
"(if #t"
"(let-values(((ht_101)"
"(let-values(((ht_102) ht_98))"
"(let-values(((ht_103)"
"(let-values()"
"(let-values(((name_104)"
"(module-compiled-immediate-name"
" submod_100)))"
"(if(hash-ref ht_102 name_104 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                           \"change would result in duplicate submodule name\""
"                                                                           \"name\""
" name_104))"
"(let-values()"
"(hash-set ht_102 name_104 submod_100)))))))"
"(values ht_103)))))"
"(if #t(for-loop_97 ht_101(unsafe-cdr lst_99)) ht_101))"
" ht_98))"
" ht_98))))"
" for-loop_97)"
" '#hasheq()"
" lst_96)))"
" #f"
" main_94))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_105 pre?_106 submods_107)"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_105)"
"(if pre?_106 'pre 'post)"
"(map2 module-compiled-immediate-name submods_107)))))"
"(define-values"
"(1/eval)"
"(let-values(((eval6_2)"
"(lambda(s5_3 ns1_4 compile2_5 ns3_6 compile4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((ns_9)(if ns3_6 ns1_4(1/current-namespace))))"
"(let-values(((compile_10)"
"(if compile4_7 compile2_5(lambda(s_11 ns_12)(1/compile s_11 ns_12 #f)))))"
"(let-values()"
"(if(let-values(((or-part_13)(compiled-in-memory? s_8)))"
"(if or-part_13 or-part_13(1/linklet-directory? s_8)))"
"(let-values()(eval-compiled s_8 ns_9))"
"(if(if(syntax?$1 s_8)"
"(let-values(((or-part_14)(compiled-in-memory?(1/syntax-e s_8))))"
"(if or-part_14 or-part_14(1/linklet-directory?(1/syntax-e s_8))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_8) ns_9))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:52:4_15) per-top-level53.1)"
"((s54_16) s_8)"
"((ns55_17) ns_9)"
"((temp56_18)"
"(lambda(s_19 ns_20)(eval-compiled(compile_10 s_19 ns_20) ns_20))))"
"(if(variable-reference-constant?(#%variable-reference per-top-level53.1))"
"(per-top-level51.1 #f #f #f #f temp56_18 #f #f s54_16 ns55_17)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:52:4_15"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp56_18)"
" s54_16"
" ns55_17)))))))))))))"
"(case-lambda"
"((s_21)(eval6_2 s_21 #f #f #f #f))"
"((s_22 ns_23 compile2_24)(eval6_2 s_22 ns_23 compile2_24 #t #t))"
"((s_25 ns1_26)(eval6_2 s_25 ns1_26 #f #t #f)))))"
"(define-values"
"(eval-compiled)"
"(lambda(c_27 ns_28)"
"(if(1/compiled-module-expression? c_27)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:59:4_29) eval-module10.1)((c57_30) c_27)((ns58_31) ns_28))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 #f #f ns58_31 #t #f #f c57_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:59:4_29"
" keyword-procedure-extract"
" '(#:namespace)"
" 3)"
" '(#:namespace)"
"(list ns58_31)"
" c57_30))))"
"(let-values()(eval-top c_27 ns_28 eval-compiled)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile17_32)"
"(lambda(s16_33"
" ns8_34"
" serializable?9_35"
" expand10_36"
" to-source?11_37"
" ns12_38"
" serializable?13_39"
" expand14_40"
" to-source?15_41)"
"(let-values(((s_42) s16_33))"
"(let-values(((ns_43)(if ns12_38 ns8_34(1/current-namespace))))"
"(let-values(((serializable?_44)(if serializable?13_39 serializable?9_35 #t)))"
"(let-values(((expand_45)(if expand14_40 expand10_36 expand$1)))"
"(let-values(((to-source?_46)(if to-source?15_41 to-source?11_37 #f)))"
"(let-values()"
"(let-values(((cs_47)"
"(if(1/compiled-expression? s_42)"
"(let-values()(list s_42))"
"(if(if(syntax?$1 s_42)(1/compiled-expression?(1/syntax-e s_42)) #f)"
"(let-values()(list(1/syntax-e s_42)))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:79:6_48) per-top-level53.1)"
"((s59_49) s_42)"
"((ns60_50) ns_43)"
"((temp61_51)"
"(lambda(s_53 ns_54)"
"(list"
"(compile-single$1"
" s_53"
" ns_54"
" expand_45"
" serializable?_44"
" to-source?_46))))"
"((append62_52) append))"
"(if(variable-reference-constant?"
"(#%variable-reference per-top-level53.1))"
"(per-top-level51.1"
" append62_52"
" #t"
" #f"
" #f"
" temp61_51"
" #f"
" #f"
" s59_49"
" ns60_50)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:79:6_48"
" keyword-procedure-extract"
" '(#:combine #:single)"
" 4)"
" '(#:combine #:single)"
"(list append62_52 temp61_51)"
" s59_49"
" ns60_50))))))))"
"(if(= 1(length cs_47))"
"(car cs_47)"
"(let-values(((...pander/eval/main.rkt:86:6_55) compiled-tops->compiled-top6.1)"
"((cs63_56) cs_47)"
"((to-source?64_57) to-source?_46))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top6.1))"
"(compiled-tops->compiled-top4.1 to-source?64_57 #t cs63_56)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:86:6_55"
" keyword-procedure-extract"
" '(#:to-source?)"
" 3)"
" '(#:to-source?)"
"(list to-source?64_57)"
" cs63_56))))))))))))))"
"(case-lambda"
"((s_58)(compile17_32 s_58 #f #f #f #f #f #f #f #f))"
"((s_59 ns_60 serializable?_61 expand_62 to-source?11_63)"
"(compile17_32 s_59 ns_60 serializable?_61 expand_62 to-source?11_63 #t #t #t #t))"
"((s_64 ns_65 serializable?_66 expand10_67)(compile17_32 s_64 ns_65 serializable?_66 expand10_67 #f #t #t #t #f))"
"((s_68 ns_69 serializable?9_70)(compile17_32 s_68 ns_69 serializable?9_70 #f #f #t #t #f #f))"
"((s_71 ns8_72)(compile17_32 s_71 ns8_72 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets22_73)"
"(lambda(s21_74 ns19_75 ns20_76)"
"(let-values(((s_77) s21_74))"
"(let-values(((ns_78)(if ns20_76 ns19_75(1/current-namespace))))"
"(let-values()(1/compile s_77 ns_78 #t expand$1 #t)))))))"
"(case-lambda"
"((s_79)(compile-to-linklets22_73 s_79 #f #f))"
"((s_80 ns19_81)(compile-to-linklets22_73 s_80 ns19_81 #t)))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_82 ns_83 expand_84 serializable?_85 to-source?_86)"
"(let-values(((exp-s_87)(expand_84 s_82 ns_83)))"
"((letrec-values(((loop_88)"
"(lambda(exp-s_89)"
"(let-values(((disarmed-exp-s_90)(syntax-disarm$1 exp-s_89)))"
"(let-values(((tmp_91)(core-form-sym disarmed-exp-s_90(namespace-phase ns_83))))"
"(if(equal? tmp_91 'module)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:101:7_92) compile-module13.1)"
"((exp-s65_93) exp-s_89)"
"((temp66_94)"
"(let-values(((...pander/eval/main.rkt:101:29_97)"
" make-compile-context16.1)"
"((ns69_98) ns_83))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1 #f #f #f #f #f #f ns69_98 #t #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:101:29_97"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list ns69_98)))))"
"((serializable?67_95) serializable?_85)"
"((to-source?68_96) to-source?_86))"
"(if(variable-reference-constant?(#%variable-reference compile-module13.1))"
"(compile-module11.1"
" #f"
" #f"
" #f"
" #f"
" serializable?67_95"
" #t"
" to-source?68_96"
" #t"
" exp-s65_93"
" temp66_94)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:101:7_92"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?67_95 to-source?68_96)"
" exp-s65_93"
" temp66_94))))"
"(if(equal? tmp_91 'begin)"
"(let-values()"
"(let-values(((ok?_99 begin70_100 e71_101)"
"(let-values(((s_112) disarmed-exp-s_90))"
"(if(if #t #t #f)"
"(let-values(((orig-s_113) s_112))"
"(let-values(((begin70_114 e71_115)"
"(let-values(((s_116)"
"(if(syntax?$1 s_112)"
"(syntax-e$1 s_112)"
" s_112)))"
"(if(pair? s_116)"
"(let-values(((begin72_117)"
"(let-values(((s_119)"
"(car s_116)))"
" s_119))"
"((e73_118)"
"(let-values(((s_120)"
"(cdr s_116)))"
"(let-values(((s_121)"
"(if(syntax?$1"
" s_120)"
"(syntax-e$1"
" s_120)"
" s_120)))"
"(let-values(((flat-s_122)"
"(to-syntax-list.1"
" s_121)))"
"(if(not flat-s_122)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_113))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_113))"
"(let-values()"
" flat-s_122))))))))"
"(values begin72_117 e73_118))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_113)))))"
"(values #t begin70_114 e71_115)))"
"(values #f #f #f)))))"
"(let-values(((...pander/eval/main.rkt:107:7_123) compiled-tops->compiled-top6.1)"
"((temp74_124)"
"(alt-reverse"
"(let-values(((lst_126) e71_101))"
"(begin"
"(if(list? lst_126)(void)(let-values()(in-list lst_126)))"
"((letrec-values(((for-loop_127)"
"(lambda(fold-var_128 lst_129)"
"(if(pair? lst_129)"
"(let-values(((e_130)"
"(unsafe-car lst_129)))"
"(if #t"
"(let-values(((fold-var_131)"
"(let-values(((fold-var_132)"
" fold-var_128))"
"(let-values(((fold-var_133)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_88"
" e_130))"
" fold-var_132))))"
"(values"
" fold-var_133)))))"
"(if #t"
"(for-loop_127"
" fold-var_131"
"(unsafe-cdr lst_129))"
" fold-var_131))"
" fold-var_128))"
" fold-var_128))))"
" for-loop_127)"
" null"
" lst_126)))))"
"((to-source?75_125) to-source?_86))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top6.1))"
"(compiled-tops->compiled-top4.1 to-source?75_125 #t temp74_124)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:107:7_123"
" keyword-procedure-extract"
" '(#:to-source?)"
" 3)"
" '(#:to-source?)"
"(list to-source?75_125)"
" temp74_124)))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:112:7_134) compile-top11.1)"
"((exp-s76_135) exp-s_89)"
"((temp77_136)"
"(let-values(((...pander/eval/main.rkt:112:26_139)"
" make-compile-context16.1)"
"((ns80_140) ns_83))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns80_140"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:112:26_139"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list ns80_140)))))"
"((serializable?78_137) serializable?_85)"
"((to-source?79_138) to-source?_86))"
"(if(variable-reference-constant?(#%variable-reference compile-top11.1))"
"(compile-top9.1"
" serializable?78_137"
" #t"
" #f"
" #f"
" to-source?79_138"
" #t"
" exp-s76_135"
" temp77_136)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:112:7_134"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?78_137 to-source?79_138)"
" exp-s76_135"
" temp77_136)))))))))))"
" loop_88)"
" exp-s_87))))"
"(define-values"
"(expand$1)"
"(let-values(((expand29_141)"
"(lambda(s28_142 ns24_143 log-expand?25_144 ns26_145 log-expand?27_146)"
"(let-values(((s_147) s28_142))"
"(let-values(((ns_148)(if ns26_145 ns24_143(1/current-namespace))))"
"(let-values(((log-expand?_149)(if log-expand?27_146 log-expand?25_144 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_149(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:122:2_150) per-top-level53.1)"
"((s81_151) s_147)"
"((ns82_152) ns_148)"
"((expand-single83_153) expand-single)"
"((cons84_154) cons)"
"((re-pair85_155) re-pair))"
"(if(variable-reference-constant?(#%variable-reference per-top-level53.1))"
"(per-top-level51.1"
" cons84_154"
" #t"
" #f"
" #f"
" expand-single83_153"
" re-pair85_155"
" #t"
" s81_151"
" ns82_152)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:122:2_150"
" keyword-procedure-extract"
" '(#:combine #:single #:wrap)"
" 4)"
" '(#:combine #:single #:wrap)"
"(list cons84_154 expand-single83_153 re-pair85_155)"
" s81_151"
" ns82_152)))))))))))"
"(case-lambda"
"((s_156)(expand29_141 s_156 #f #f #f #f))"
"((s_157 ns_158 log-expand?25_159)(expand29_141 s_157 ns_158 log-expand?25_159 #t #t))"
"((s_160 ns24_161)(expand29_141 s_160 ns24_161 #f #t #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_162 ns_163)"
"(let-values(((require-lifts_164 lifts_165 exp-s_166)(expand-capturing-lifts s_162(make-expand-context ns_163))))"
"(if(if(null? require-lifts_164)(null? lifts_165) #f)"
"(let-values() exp-s_166)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:133:4_167) wrap-lifts-as-begin17.1)"
"((temp86_168)(append require-lifts_164 lifts_165))"
"((temp87_169)(lambda(form_173)(expand-single form_173 ns_163)))"
"((exp-s88_170) exp-s_166)"
"((s89_171) s_162)"
"((temp90_172)(namespace-phase ns_163)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 temp87_169 #t temp86_168 exp-s88_170 s89_171 temp90_172)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:133:4_167"
" keyword-procedure-extract"
" '(#:adjust-form)"
" 6)"
" '(#:adjust-form)"
"(list temp87_169)"
" temp86_168"
" exp-s88_170"
" s89_171"
" temp90_172))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once34_174)"
"(lambda(s33_175 ns31_176 ns32_177)"
"(let-values(((s_178) s33_175))"
"(let-values(((ns_179)(if ns32_177 ns31_176(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:139:2_180) per-top-level53.1)"
"((s91_181) s_178)"
"((ns92_182) ns_179)"
"((expand-single-once93_183) expand-single-once)"
"((cons94_184) cons)"
"((re-pair95_185) re-pair)"
"((temp96_186) #t))"
"(if(variable-reference-constant?(#%variable-reference per-top-level53.1))"
"(per-top-level51.1"
" cons94_184"
" #t"
" temp96_186"
" #t"
" expand-single-once93_183"
" re-pair95_185"
" #t"
" s91_181"
" ns92_182)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:139:2_180"
" keyword-procedure-extract"
" '(#:combine #:just-once? #:single #:wrap)"
" 4)"
" '(#:combine #:just-once? #:single #:wrap)"
"(list cons94_184 temp96_186 expand-single-once93_183 re-pair95_185)"
" s91_181"
" ns92_182)))))))))"
"(case-lambda((s_187)(expand-once34_174 s_187 #f #f))((s_188 ns31_189)(expand-once34_174 s_188 ns31_189 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_190 ns_191)"
"(let-values(((require-lifts_192 lifts_193 exp-s_194)"
"(expand-capturing-lifts"
" s_190"
"(let-values(((the-struct_195)(make-expand-context ns_191)))"
"(if(expand-context? the-struct_195)"
"(let-values(((just-once?97_196) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_195)"
"(root-expand-context-post-expansion-scope the-struct_195)"
"(root-expand-context-top-level-bind-scope the-struct_195)"
"(root-expand-context-all-scopes-stx the-struct_195)"
"(root-expand-context-use-site-scopes the-struct_195)"
"(root-expand-context-defined-syms the-struct_195)"
"(root-expand-context-frame-id the-struct_195)"
"(root-expand-context-counter the-struct_195)"
"(root-expand-context-lift-key the-struct_195)"
"(expand-context-context the-struct_195)"
"(expand-context-phase the-struct_195)"
"(expand-context-namespace the-struct_195)"
"(expand-context-env the-struct_195)"
"(expand-context-post-expansion-scope-action the-struct_195)"
"(expand-context-scopes the-struct_195)"
"(expand-context-def-ctx-scopes the-struct_195)"
"(expand-context-reference-records the-struct_195)"
"(expand-context-only-immediate? the-struct_195)"
" just-once?97_196"
"(expand-context-module-begin-k the-struct_195)"
"(expand-context-need-eventually-defined the-struct_195)"
"(expand-context-allow-unbound? the-struct_195)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_195)"
"(expand-context-stops the-struct_195)"
"(expand-context-current-introduction-scopes the-struct_195)"
"(expand-context-declared-submodule-names the-struct_195)"
"(expand-context-lifts the-struct_195)"
"(expand-context-lift-envs the-struct_195)"
"(expand-context-module-lifts the-struct_195)"
"(expand-context-require-lifts the-struct_195)"
"(expand-context-to-module-lifts the-struct_195)"
"(expand-context-requires+provides the-struct_195)"
"(expand-context-name the-struct_195)"
"(expand-context-observer the-struct_195)))"
"                       (raise-argument-error 'struct-copy \"expand-context?\" the-struct_195))))))"
"(if(if(null? require-lifts_192)(null? lifts_193) #f)"
"(let-values() exp-s_194)"
"(let-values()"
"(let-values(((temp98_197)(append require-lifts_192 lifts_193))"
"((exp-s99_198) exp-s_194)"
"((s100_199) s_190)"
"((temp101_200)(namespace-phase ns_191)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 #f #f temp98_197 exp-s99_198 s100_199 temp101_200)"
"(wrap-lifts-as-begin17.1 temp98_197 exp-s99_198 s100_199 temp101_200))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form39_201)"
"(lambda(s38_202 ns36_203 ns37_204)"
"(let-values(((s_205) s38_202))"
"(let-values(((ns_206)(if ns37_204 ns36_203(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:159:2_207) per-top-level53.1)"
"((s102_208) s_205)"
"((ns103_209) ns_206)"
"((temp104_210) #f))"
"(if(variable-reference-constant?(#%variable-reference per-top-level53.1))"
"(per-top-level51.1 #f #f #f #f temp104_210 #f #f s102_208 ns103_209)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:159:2_207"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp104_210)"
" s102_208"
" ns103_209)))))))))"
"(case-lambda"
"((s_211)(expand-to-top-form39_201 s_211 #f #f))"
"((s_212 ns36_213)(expand-to-top-form39_201 s_212 ns36_213 #t)))))"
"(define-values"
"(lifted/1.1$6)"
"(make-required"
" 'per-top-level"
"(case-lambda((self_214 given-s_215 ns_216)(apply missing-kw self_214 given-s_215 ns_216 null)))"
" #f"
" #f))"
"(define-values"
"(per-top-level51.1)"
"(lambda(combine42_217"
" combine46_218"
" just-once?44_219"
" just-once?48_220"
" single41_221"
" wrap43_222"
" wrap47_223"
" given-s49_224"
" ns50_225)"
"(let-values(((given-s_226) given-s49_224))"
"(let-values(((ns_227) ns50_225))"
"(let-values(((single_228) single41_221))"
"(let-values(((combine_229)(if combine46_218 combine42_217 #f)))"
"(let-values(((wrap_230)(if wrap47_223 wrap43_222 #f)))"
"(let-values(((just-once?_231)(if just-once?48_220 just-once?44_219 #f)))"
"(let-values()"
"(let-values(((s_232)(maybe-intro given-s_226 ns_227)))"
"(let-values(((ctx_233)(make-expand-context ns_227)))"
"(let-values(((phase_234)(namespace-phase ns_227)))"
"((letrec-values(((loop_235)"
"(lambda(s_236 phase_237 ns_238)"
"(let-values(((tl-ctx_239)"
"(let-values(((the-struct_244) ctx_233))"
"(if(expand-context? the-struct_244)"
"(let-values(((phase105_245) phase_237)"
"((namespace106_246) ns_238)"
"((just-once?107_247) just-once?_231))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_244)"
"(root-expand-context-post-expansion-scope"
" the-struct_244)"
"(root-expand-context-top-level-bind-scope"
" the-struct_244)"
"(root-expand-context-all-scopes-stx the-struct_244)"
"(root-expand-context-use-site-scopes the-struct_244)"
"(root-expand-context-defined-syms the-struct_244)"
"(root-expand-context-frame-id the-struct_244)"
"(root-expand-context-counter the-struct_244)"
"(root-expand-context-lift-key the-struct_244)"
"(expand-context-context the-struct_244)"
" phase105_245"
" namespace106_246"
"(expand-context-env the-struct_244)"
"(expand-context-post-expansion-scope-action"
" the-struct_244)"
"(expand-context-scopes the-struct_244)"
"(expand-context-def-ctx-scopes the-struct_244)"
"(expand-context-reference-records the-struct_244)"
"(expand-context-only-immediate? the-struct_244)"
" just-once?107_247"
"(expand-context-module-begin-k the-struct_244)"
"(expand-context-need-eventually-defined the-struct_244)"
"(expand-context-allow-unbound? the-struct_244)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_244)"
"(expand-context-stops the-struct_244)"
"(expand-context-current-introduction-scopes"
" the-struct_244)"
"(expand-context-declared-submodule-names"
" the-struct_244)"
"(expand-context-lifts the-struct_244)"
"(expand-context-lift-envs the-struct_244)"
"(expand-context-module-lifts the-struct_244)"
"(expand-context-require-lifts the-struct_244)"
"(expand-context-to-module-lifts the-struct_244)"
"(expand-context-requires+provides the-struct_244)"
"(expand-context-name the-struct_244)"
"(expand-context-observer the-struct_244)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"expand-context?\""
" the-struct_244)))))"
"(let-values(((require-lifts_240 lifts_241 exp-s_242)"
"(expand-capturing-lifts"
" s_236"
"(let-values(((the-struct_248) tl-ctx_239))"
"(if(expand-context? the-struct_248)"
"(let-values(((only-immediate?108_249) #t)"
"((phase109_250) phase_237)"
"((namespace110_251) ns_238))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_248)"
"(root-expand-context-post-expansion-scope"
" the-struct_248)"
"(root-expand-context-top-level-bind-scope"
" the-struct_248)"
"(root-expand-context-all-scopes-stx the-struct_248)"
"(root-expand-context-use-site-scopes the-struct_248)"
"(root-expand-context-defined-syms the-struct_248)"
"(root-expand-context-frame-id the-struct_248)"
"(root-expand-context-counter the-struct_248)"
"(root-expand-context-lift-key the-struct_248)"
"(expand-context-context the-struct_248)"
" phase109_250"
" namespace110_251"
"(expand-context-env the-struct_248)"
"(expand-context-post-expansion-scope-action"
" the-struct_248)"
"(expand-context-scopes the-struct_248)"
"(expand-context-def-ctx-scopes the-struct_248)"
"(expand-context-reference-records the-struct_248)"
" only-immediate?108_249"
"(expand-context-just-once? the-struct_248)"
"(expand-context-module-begin-k the-struct_248)"
"(expand-context-need-eventually-defined"
" the-struct_248)"
"(expand-context-allow-unbound? the-struct_248)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_248)"
"(expand-context-stops the-struct_248)"
"(expand-context-current-introduction-scopes"
" the-struct_248)"
"(expand-context-declared-submodule-names"
" the-struct_248)"
"(expand-context-lifts the-struct_248)"
"(expand-context-lift-envs the-struct_248)"
"(expand-context-module-lifts the-struct_248)"
"(expand-context-require-lifts the-struct_248)"
"(expand-context-to-module-lifts the-struct_248)"
"(expand-context-requires+provides the-struct_248)"
"(expand-context-name the-struct_248)"
"(expand-context-observer the-struct_248)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_248))))))"
"(let-values(((disarmed-exp-s_243)(syntax-disarm$1 exp-s_242)))"
"(if(let-values(((or-part_252)(pair? require-lifts_240)))"
"(if or-part_252 or-part_252(pair? lifts_241)))"
"(let-values()"
"(let-values(((new-s_253)"
"(let-values(((temp111_254)"
"(append require-lifts_240 lifts_241))"
"((exp-s112_255) exp-s_242)"
"((s113_256) s_236)"
"((phase114_257) phase_237))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" temp111_254"
" exp-s112_255"
" s113_256"
" phase114_257)"
"(wrap-lifts-as-begin17.1"
" temp111_254"
" exp-s112_255"
" s113_256"
" phase114_257)))))"
"(if just-once?_231"
" new-s_253"
"(loop_235 new-s_253 phase_237 ns_238))))"
"(if(not single_228)"
"(let-values() exp-s_242)"
"(if(if just-once?_231(not(eq? exp-s_242 s_236)) #f)"
"(let-values() exp-s_242)"
"(let-values()"
"(let-values(((tmp_258)"
"(core-form-sym disarmed-exp-s_243 phase_237)))"
"(if(equal? tmp_258 'begin)"
"(let-values()"
"(let-values(((ok?_259 begin115_260 e116_261)"
"(let-values(((s_273) disarmed-exp-s_243))"
"(if(if #t #t #f)"
"(let-values(((orig-s_274) s_273))"
"(let-values(((begin115_275"
" e116_276)"
"(let-values(((s_277)"
"(if(syntax?$1"
" s_273)"
"(syntax-e$1"
" s_273)"
" s_273)))"
"(if(pair? s_277)"
"(let-values(((begin117_278)"
"(let-values(((s_280)"
"(car"
" s_277)))"
" s_280))"
"((e118_279)"
"(let-values(((s_281)"
"(cdr"
" s_277)))"
"(let-values(((s_282)"
"(if(syntax?$1"
" s_281)"
"(syntax-e$1"
" s_281)"
" s_281)))"
"(let-values(((flat-s_283)"
"(to-syntax-list.1"
" s_282)))"
"(if(not"
" flat-s_283)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_274))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_274))"
"(let-values()"
" flat-s_283))))))))"
"(values"
" begin117_278"
" e118_279))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_274)))))"
"(values"
" #t"
" begin115_275"
" e116_276)))"
"(values #f #f #f)))))"
"(letrec-values(((begin-loop_272)"
"(lambda(es_284)"
"(if(null? es_284)"
"(let-values()"
"(if combine_229 null(void)))"
"(if(if(not combine_229)"
"(null?(cdr es_284))"
" #f)"
"(let-values()"
"(loop_235"
"(car es_284)"
" phase_237"
" ns_238))"
"(let-values()"
"(let-values(((a_285)"
"(loop_235"
"(car es_284)"
" phase_237"
" ns_238)))"
"(if combine_229"
"(combine_229"
" a_285"
"(begin-loop_272"
"(cdr es_284)))"
"(begin-loop_272"
"(cdr es_284))))))))))"
"(if wrap_230"
"(wrap_230"
" begin115_260"
" exp-s_242"
"(begin-loop_272 e116_261))"
"(begin-loop_272 e116_261)))))"
"(if(equal? tmp_258 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_286"
" begin-for-syntax119_287"
" e120_288)"
"(let-values(((s_302)"
" disarmed-exp-s_243))"
"(if(if #t #t #f)"
"(let-values(((orig-s_303) s_302))"
"(let-values(((begin-for-syntax119_304"
" e120_305)"
"(let-values(((s_306)"
"(if(syntax?$1"
" s_302)"
"(syntax-e$1"
" s_302)"
" s_302)))"
"(if(pair? s_306)"
"(let-values(((begin-for-syntax121_307)"
"(let-values(((s_309)"
"(car"
" s_306)))"
" s_309))"
"((e122_308)"
"(let-values(((s_310)"
"(cdr"
" s_306)))"
"(let-values(((s_311)"
"(if(syntax?$1"
" s_310)"
"(syntax-e$1"
" s_310)"
" s_310)))"
"(let-values(((flat-s_312)"
"(to-syntax-list.1"
" s_311)))"
"(if(not"
" flat-s_312)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_303))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_303))"
"(let-values()"
" flat-s_312))))))))"
"(values"
" begin-for-syntax121_307"
" e122_308))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_303)))))"
"(values"
" #t"
" begin-for-syntax119_304"
" e120_305)))"
"(values #f #f #f)))))"
"(let-values(((next-phase_299)(add1 phase_237)))"
"(let-values(((next-ns_300)"
"(namespace->namespace-at-phase"
" ns_238"
" next-phase_299)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_300)"
"(values))))"
"(let-values(((l_301)"
"(alt-reverse"
"(let-values(((lst_313)"
" e120_288))"
"(begin"
"(if(list? lst_313)"
"(void)"
"(let-values()"
"(in-list lst_313)))"
"((letrec-values(((for-loop_314)"
"(lambda(fold-var_315"
" lst_316)"
"(if(pair?"
" lst_316)"
"(let-values(((s_317)"
"(unsafe-car"
" lst_316)))"
"(if #t"
"(let-values(((fold-var_318)"
"(let-values(((fold-var_319)"
" fold-var_315))"
"(let-values(((fold-var_320)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_235"
" s_317"
" next-phase_299"
" next-ns_300))"
" fold-var_319))))"
"(values"
" fold-var_320)))))"
"(if #t"
"(for-loop_314"
" fold-var_318"
"(unsafe-cdr"
" lst_316))"
" fold-var_318))"
" fold-var_315))"
" fold-var_315))))"
" for-loop_314)"
" null"
" lst_313))))))"
"(if wrap_230"
"(let-values()"
"(wrap_230"
" begin-for-syntax119_287"
" exp-s_242"
" l_301))"
"(if combine_229"
"(let-values() l_301)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_228 exp-s_242 ns_238)))))))))))))))"
" loop_235)"
" s_232"
" phase_234"
" ns_227)))))))))))))"
"(define-values"
"(unpack52.1)"
"(lambda(given-kws_321 given-args_322 given-s49_323 ns50_324)"
"(let-values(((combine46_325)(if(pair? given-kws_321)(eq? '#:combine(car given-kws_321)) #f)))"
"(let-values(((combine42_326)(if combine46_325(car given-args_322)(void)))"
"((given-kws_327)(if combine46_325(cdr given-kws_321) given-kws_321))"
"((given-args_328)(if combine46_325(cdr given-args_322) given-args_322)))"
"(let-values(((just-once?48_329)(if(pair? given-kws_327)(eq? '#:just-once?(car given-kws_327)) #f)))"
"(let-values(((just-once?44_330)(if just-once?48_329(car given-args_328)(void)))"
"((given-kws_331)(if just-once?48_329(cdr given-kws_327) given-kws_327))"
"((given-args_332)(if just-once?48_329(cdr given-args_328) given-args_328)))"
"(let-values(((single41_333)(car given-args_332))"
"((given-kws_334)(cdr given-kws_331))"
"((given-args_335)(cdr given-args_332)))"
"(let-values(((wrap47_336)(pair? given-kws_334)))"
"(let-values(((wrap43_337)(if wrap47_336(car given-args_335)(void))))"
"(per-top-level51.1"
" combine42_326"
" combine46_325"
" just-once?44_330"
" just-once?48_329"
" single41_333"
" wrap43_337"
" wrap47_336"
" given-s49_323"
" ns50_324))))))))))"
"(define-values"
"(per-top-level53.1)"
"(lifted/1.1$6"
"(lambda(given-kws_338 given-argc_339)"
"(if(= given-argc_339 4)(subsets? '(#:single) given-kws_338 '(#:combine #:just-once? #:single #:wrap)) #f))"
"(case-lambda"
"((given-kws_340 given-args_341 given-s_342 ns_343)(unpack52.1 given-kws_340 given-args_341 given-s_342 ns_343)))"
" '(#:single)"
" '(#:combine #:just-once? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_344 ns_345)(if(syntax?$1 s_344) s_344(1/namespace-syntax-introduce(1/datum->syntax #f s_344) ns_345))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_346 s_347 r_348)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_347)(cons form-id_346 r_348) s_347 s_347) s_347)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_349 ctx_350)"
"(let-values(((ns_351)(expand-context-namespace ctx_350)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_351)(values))))"
"(let-values(((lift-ctx_352)"
"(let-values(((temp123_355)(make-top-level-lift ctx_350)))"
"(if(variable-reference-constant?(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 #f #f temp123_355)"
"(make-lift-context8.1 temp123_355)))))"
"(let-values(((require-lift-ctx_353)"
"(make-require-lift-context(namespace-phase ns_351)(make-parse-top-lifted-require ns_351))))"
"(let-values(((exp-s_354)"
"(let-values(((s124_356) s_349)"
"((temp125_357)"
"(let-values(((the-struct_358) ctx_350))"
"(if(expand-context? the-struct_358)"
"(let-values(((lifts126_359) lift-ctx_352)"
"((module-lifts127_360) lift-ctx_352)"
"((require-lifts128_361) require-lift-ctx_353))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_358)"
"(root-expand-context-post-expansion-scope the-struct_358)"
"(root-expand-context-top-level-bind-scope the-struct_358)"
"(root-expand-context-all-scopes-stx the-struct_358)"
"(root-expand-context-use-site-scopes the-struct_358)"
"(root-expand-context-defined-syms the-struct_358)"
"(root-expand-context-frame-id the-struct_358)"
"(root-expand-context-counter the-struct_358)"
"(root-expand-context-lift-key the-struct_358)"
"(expand-context-context the-struct_358)"
"(expand-context-phase the-struct_358)"
"(expand-context-namespace the-struct_358)"
"(expand-context-env the-struct_358)"
"(expand-context-post-expansion-scope-action the-struct_358)"
"(expand-context-scopes the-struct_358)"
"(expand-context-def-ctx-scopes the-struct_358)"
"(expand-context-reference-records the-struct_358)"
"(expand-context-only-immediate? the-struct_358)"
"(expand-context-just-once? the-struct_358)"
"(expand-context-module-begin-k the-struct_358)"
"(expand-context-need-eventually-defined the-struct_358)"
"(expand-context-allow-unbound? the-struct_358)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_358)"
"(expand-context-stops the-struct_358)"
"(expand-context-current-introduction-scopes the-struct_358)"
"(expand-context-declared-submodule-names the-struct_358)"
" lifts126_359"
"(expand-context-lift-envs the-struct_358)"
" module-lifts127_360"
" require-lifts128_361"
"(expand-context-to-module-lifts the-struct_358)"
"(expand-context-requires+provides the-struct_358)"
"(expand-context-name the-struct_358)"
"(expand-context-observer the-struct_358)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_358)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f s124_356 temp125_357)"
"(expand7.1 s124_356 temp125_357)))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_353)"
"(get-and-clear-lifts! lift-ctx_352)"
" exp-s_354))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_362)"
"(lambda(s_363 phase_364)"
"(let-values(((ok?_365 #%require129_366 req130_367)"
"(let-values(((s_378)(syntax-disarm$1 s_363)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_379) s_378))"
"(let-values(((#%require129_380 req130_381)"
"(let-values(((s_382)(if(syntax?$1 s_378)(syntax-e$1 s_378) s_378)))"
"(if(pair? s_382)"
"(let-values(((#%require131_383)(let-values(((s_385)(car s_382))) s_385))"
"((req132_384)"
"(let-values(((s_386)(cdr s_382)))"
"(let-values(((s_387)"
"(if(syntax?$1 s_386)"
"(syntax-e$1 s_386)"
" s_386)))"
"(if(pair? s_387)"
"(let-values(((req133_388)"
"(let-values(((s_389)(car s_387)))"
" s_389))"
"(()"
"(let-values(((s_390)(cdr s_387)))"
"(let-values(((s_391)"
"(if(syntax?$1 s_390)"
"(syntax-e$1 s_390)"
" s_390)))"
"(if(null? s_391)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_379))))))"
"(values req133_388))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_379))))))"
"(values #%require131_383 req132_384))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_379)))))"
"(values #t #%require129_380 req130_381)))"
"(values #f #f #f)))))"
"(let-values(((...pander/eval/main.rkt:269:4_392) parse-and-perform-requires!22.1)"
"((temp134_393)(list req130_367))"
"((s135_394) s_363)"
"((ns136_395) ns_362)"
"((phase137_396) phase_364)"
"((phase138_397) phase_364)"
"((temp139_398)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" phase138_397"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp134_393"
" s135_394"
" ns136_395"
" phase137_396"
" temp139_398)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:269:4_392"
" keyword-procedure-extract"
" '(#:run-phase)"
" 7)"
" '(#:run-phase)"
"(list phase138_397)"
" temp134_393"
" s135_394"
" ns136_395"
" phase137_396"
" temp139_398)))))))"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_1)"
"(lambda(who3_2 mod-path4_3 sym5_4 fail-k1_5 fail-k2_6)"
"(let-values(((who_7) who3_2))"
"(let-values(((mod-path_8) mod-path4_3))"
"(let-values(((sym_9) sym5_4))"
"(let-values(((fail-k_10)(if fail-k2_6 fail-k1_5 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(1/module-path? mod-path_8)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(1/module-path-index? mod-path_8)))"
"(if or-part_16 or-part_16(1/resolved-module-path? mod-path_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_7"
"                                                 \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_17)(symbol? sym_9)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(not sym_9)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(equal? sym_9 0)))"
"(if or-part_19 or-part_19(void? sym_9)))))))"
"(void)"
"(let-values()"
"                                                  (raise-argument-error who_7 \"(or/c symbol? #f 0 void?)\" sym_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_10)"
"(procedure-arity-includes? fail-k_10 0)"
" #f)"
"(void)"
"                                                  (let-values () (raise-argument-error who_7 \"(-> any)\" fail-k_10)))"
"(values))))"
"(let-values(((ns_11)(1/current-namespace)))"
"(let-values(((mpi_12)"
"(if(1/module-path? mod-path_8)"
"(let-values()(1/module-path-index-join mod-path_8 #f))"
"(if(1/module-path-index? mod-path_8)"
"(let-values() mod-path_8)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_8)"
" #f))))))"
"(let-values(((mod-name_13)(1/module-path-index-resolve mpi_12 #t)))"
"(let-values(((phase_14)(namespace-phase ns_11)))"
"(if(not sym_9)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:43:4_20)"
" namespace-module-instantiate!95.1)"
"((ns20_21) ns_11)"
"((mpi21_22) mpi_12)"
"((phase22_23) phase_14)"
"((phase23_24) phase_14)"
"((temp24_25) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" temp24_25"
" #t"
" phase23_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns20_21"
" mpi21_22"
" phase22_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:43:4_20"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase)"
" 5)"
" '(#:otherwise-available? #:run-phase)"
"(list temp24_25 phase23_24)"
" ns20_21"
" mpi21_22"
" phase22_23))))"
"(if(equal? sym_9 0)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:47:4_26)"
" namespace-module-instantiate!95.1)"
"((ns25_27) ns_11)"
"((mpi26_28) mpi_12)"
"((phase27_29) phase_14)"
"((phase28_30) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" phase28_30"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns25_27"
" mpi26_28"
" phase27_29)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:47:4_26"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase28_30)"
" ns25_27"
" mpi26_28"
" phase27_29))))"
"(if(void? sym_9)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:50:4_31)"
" namespace-module-visit!103.1)"
"((ns29_32) ns_11)"
"((mpi30_33) mpi_12)"
"((phase31_34) phase_14)"
"((phase32_35) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!103.1))"
"(namespace-module-visit!101.1"
" phase32_35"
" #t"
" ns29_32"
" mpi30_33"
" phase31_34)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:50:4_31"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list phase32_35)"
" ns29_32"
" mpi30_33"
" phase31_34))))"
"(let-values()"
"(let-values(((m_36)(namespace->module ns_11 mod-name_13)))"
"(let-values(((binding/p_37)"
"(hash-ref"
"(hash-ref(module-provides m_36) 0 '#hasheq())"
" sym_9"
" #f)))"
"(if(not binding/p_37)"
"(let-values()"
"(if(eq? fail-k_10 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                             \"name is not provided\""
"                                                             \"name\""
" sym_9"
"                                                             \"module\""
" mod-name_13)"
"(fail-k_10)))"
"(let-values()"
"(let-values(((binding_38)"
"(provided-as-binding binding/p_37)))"
"(let-values(((ex-sym_39)(module-binding-sym binding_38)))"
"(let-values(((ex-phase_40)"
"(module-binding-phase binding_38)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:71:6_43)"
" namespace-module-instantiate!95.1)"
"((ns33_44) ns_11)"
"((mpi34_45) mpi_12)"
"((phase35_46) phase_14)"
"((phase36_47) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!95.1))"
"(namespace-module-instantiate!93.1"
" #f"
" #f"
" phase36_47"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns33_44"
" mpi34_45"
" phase35_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:71:6_43"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase36_47)"
" ns33_44"
" mpi34_45"
" phase35_46)))"
"(values))))"
"(let-values(((m-ns_41)"
"(let-values(((.../dynamic-require.rkt:72:19_48)"
" namespace->module-namespace81.1)"
"((ns37_49) ns_11)"
"((temp38_50)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module"
" binding_38)"
"(module-self m_36)"
" mpi_12)))"
"((temp39_51)"
"(phase-"
" phase_14"
" ex-phase_40))"
"((temp40_52) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" temp40_52"
" #t"
" #f"
" #f"
" ns37_49"
" temp38_50"
" temp39_51)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:72:19_48"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp40_52)"
" ns37_49"
" temp38_50"
" temp39_51)))))"
"(let-values((()"
"(begin"
"(if(if(provided-as-protected?"
" binding/p_37)"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_41)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_38)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_38)"
"(namespace-inspector"
" m-ns_41))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
"                                                                                         \"name is protected\""
"                                                                                         \"name\""
" sym_9"
"                                                                                         \"module\""
" mod-name_13))"
"(void))"
"(values))))"
"(let-values(((fail_42)"
"(lambda()"
"(if(eq?"
" fail-k_10"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                         \"name's binding is missing\""
"                                                                                         \"name\""
" sym_9"
"                                                                                         \"module\""
" mod-name_13)"
"(fail-k_10)))))"
"(if(not"
"(provided-as-transformer? binding/p_37))"
"(let-values()"
"(namespace-get-variable"
" m-ns_41"
" ex-phase_40"
" ex-sym_39"
" fail_42))"
"(let-values()"
"(let-values(((missing_53)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:102:8_55)"
" namespace-module-visit!103.1)"
"((ns41_56)"
" ns_11)"
"((mpi42_57)"
" mpi_12)"
"((phase43_58)"
" phase_14)"
"((phase44_59)"
" phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!103.1))"
"(namespace-module-visit!101.1"
" phase44_59"
" #t"
" ns41_56"
" mpi42_57"
" phase43_58)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:102:8_55"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list phase44_59)"
" ns41_56"
" mpi42_57"
" phase43_58)))"
"(values))))"
"(let-values(((t_54)"
"(namespace-get-transformer"
" m-ns_41"
" ex-phase_40"
" ex-sym_39"
" missing_53)))"
"(if(eq? t_54 missing_53)"
"(let-values()(fail_42))"
"(let-values()"
"(let-values(((tmp-ns_60)"
"(let-values(((ns45_62)"
" ns_11))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" new-namespace11.1))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_62"
" #t)"
"(new-namespace11.1"
" ns45_62)))))"
"(let-values(((mod-path_61)"
"(resolved-module-path->module-path"
" mod-name_13)))"
"(begin"
"(1/namespace-require"
" mod-path_61"
" tmp-ns_60)"
"(1/eval"
" sym_9"
" tmp-ns_60)))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_63 mod-path_64 sym_65)(do-dynamic-require6_1 who_63 mod-path_64 sym_65 #f #f))"
"((who_66 mod-path_67 sym_68 fail-k1_69)(do-dynamic-require6_1 who_66 mod-path_67 sym_68 fail-k1_69 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_70)"
"(lambda(mod-path10_71 sym11_72 fail-k8_73 fail-k9_74)"
"(let-values(((mod-path_75) mod-path10_71))"
"(let-values(((sym_76) sym11_72))"
"(let-values(((fail-k_77)(if fail-k9_74 fail-k8_73 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_75 sym_76 fail-k_77))))))))"
"(case-lambda"
"((mod-path_78 sym_79)(dynamic-require12_70 mod-path_78 sym_79 #f #f))"
"((mod-path_80 sym_81 fail-k8_82)(dynamic-require12_70 mod-path_80 sym_81 fail-k8_82 #t)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax18_83)"
"(lambda(mod-path16_84 sym17_85 fail-k14_86 fail-k15_87)"
"(let-values(((mod-path_88) mod-path16_84))"
"(let-values(((sym_89) sym17_85))"
"(let-values(((fail-k_90)(if fail-k15_87 fail-k14_86 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_91) 1/current-namespace))"
"(namespace->namespace-at-phase ns_91(add1(namespace-phase ns_91)))))"
"(let-values()"
"(do-dynamic-require 'dynamic-require-for-syntax mod-path_88 sym_89 fail-k_90))))))))))"
"(case-lambda"
"((mod-path_92 sym_93)(dynamic-require-for-syntax18_83 mod-path_92 sym_93 #f #f))"
"((mod-path_94 sym_95 fail-k14_96)(dynamic-require-for-syntax18_83 mod-path_94 sym_95 fail-k14_96 #t)))))"
"(define-values"
"(eval$1)"
"(case-lambda"
"((s_1)((current-eval)(intro s_1)))"
"((s_2 ns_3)"
"(begin"
"      (if (1/namespace? ns_3) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_3)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_3)"
"(let-values()((current-eval)(intro s_2 ns_3))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_4)"
"(begin"
"      (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_4)))"
"((current-eval) s_4)))"
"((s_5 ns_6)"
"(begin"
"      (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_5)))"
"      (if (1/namespace? ns_6) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_6)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_6)"
"(let-values()((current-eval) s_5)))))))"
"(define-values(compile$1)(lambda(s_7)((current-compile)(intro s_7) #f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_8)"
"(begin"
"      (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_8)))"
"((current-compile) s_8 #f))))"
"(define-values(1/expand)(lambda(s_9)(expand$1(intro s_9)(1/current-namespace) #t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_10)"
"(begin"
"      (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_10)))"
"(expand$1 s_10(1/current-namespace) #t))))"
"(define-values(1/expand-once)(lambda(s_11)(expand-once$1(intro s_11))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_12)"
"(begin"
"      (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_12)))"
"(expand-once$1 s_12))))"
"(define-values(1/expand-to-top-form)(lambda(s_13)(expand-to-top-form$1(intro s_13))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_14)"
"(begin"
"      (if (syntax?$1 s_14) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_14)))"
"(expand-to-top-form$1 s_14))))"
"(define-values"
"(intro)"
"(let-values(((intro4_15)"
"(lambda(given-s3_16 ns1_17 ns2_18)"
"(let-values(((given-s_19) given-s3_16))"
"(let-values(((ns_20)(if ns2_18 ns1_17(1/current-namespace))))"
"(let-values()"
"(let-values(((s_21)(if(syntax?$1 given-s_19) given-s_19(1/datum->syntax #f given-s_19))))"
"(1/namespace-syntax-introduce s_21 ns_20))))))))"
"(case-lambda((given-s_22)(intro4_15 given-s_22 #f #f))((given-s_23 ns1_24)(intro4_15 given-s_23 ns1_24 #t)))))"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_2)"
"(lambda(mod3_3 load?1_4 load?2_5)"
"(let-values(((mod_6) mod3_3))"
"(let-values(((load?_7)(if load?2_5 load?1_4 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_6)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_6)))"
"(values))))"
"(let-values(((ns_8)(1/current-namespace)))"
"(let-values(((name_9)"
"(let-values(((...space/api-module.rkt:26:15_10)"
" reference->resolved-module-path34.1)"
"((mod35_11) mod_6)"
"((load?36_12) load?_7))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?36_12 mod35_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:26:15_10"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?36_12)"
" mod35_11)))))"
"(if(namespace->module ns_8 name_9) #t #f))))))))))"
"(case-lambda"
"((mod_13)(module-declared?4_2 mod_13 #f #f))"
"((mod_14 load?1_15)(module-declared?4_2 mod_14 load?1_15 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_16)"
"(let-values((()"
"(begin"
"(if(module-reference? mod_16)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_16)))"
"(values))))"
"(let-values(((ns_17)(1/current-namespace)))"
"(let-values(((name_18)"
"(let-values(((...space/api-module.rkt:33:15_20) reference->resolved-module-path34.1)"
"((mod37_21) mod_16)"
"((temp38_22) #f))"
"(if(variable-reference-constant?(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp38_22 mod37_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:33:15_20"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp38_22)"
" mod37_21)))))"
"(let-values(((m_19)(namespace->module ns_17 name_18)))(if m_19(module-primitive? m_19) #f)))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_23)"
"(lambda(extract8_24 who9_25 mod10_26 load?6_27 load?7_28)"
"(let-values(((extract_29) extract8_24))"
"(let-values(((who_30) who9_25))"
"(let-values(((mod_31) mod10_26))"
"(let-values(((load?_32)(if load?7_28 load?6_27 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_31)"
"(void)"
"(let-values()(raise-argument-error who_30 module-reference-str mod_31)))"
"(values))))"
"(let-values(((m_33)"
"(namespace->module/complain"
" who_30"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:42:40_34)"
" reference->resolved-module-path34.1)"
"((mod39_35) mod_31)"
"((load?40_36) load?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?40_36 mod39_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:42:40_34"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?40_36)"
" mod39_35))))))"
"(extract_29 m_33)))))))))))"
"(case-lambda"
"((extract_37 who_38 mod_39)(module->11_23 extract_37 who_38 mod_39 #f #f))"
"((extract_40 who_41 mod_42 load?6_43)(module->11_23 extract_40 who_41 mod_42 load?6_43 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_44)"
"(lambda(mod15_45 load?13_46 load?14_47)"
"(let-values(((mod_48) mod15_45))"
"(let-values(((load?_49)(if load?14_47 load?13_46 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_48 load?_49)))))))"
"(case-lambda"
"((mod_50)(module->language-info16_44 mod_50 #f #f))"
"((mod_51 load?13_52)(module->language-info16_44 mod_51 load?13_52 #t)))))"
"(define-values(1/module->imports)(lambda(mod_53)(module-> module-requires 'module->imports mod_53)))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_54)"
"(let-values(((provides_55 self_56)"
"(module->"
"(lambda(m_57)(values(module-provides m_57)(module-self m_57)))"
" 'module->exports"
" mod_54)))"
"(provides->api-provides provides_55 self_56))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_58)"
"(module->"
"(lambda(m_59)(variables->api-nonprovides(module-provides m_59)((module-get-all-variables m_59))))"
" 'module->indirect-exports"
" mod_58)))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_60)"
"(lambda(mod20_61 ns18_62 ns19_63)"
"(let-values(((mod_64) mod20_61))"
"(let-values(((ns_65)(if ns19_63 ns18_62(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_64)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_64)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_65)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'module->namespace \"namespace?\" ns_65)))"
"(values))))"
"(let-values(((name_66)"
"(let-values(((...space/api-module.rkt:66:15_69)"
" reference->resolved-module-path34.1)"
"((mod44_70) mod_64)"
"((temp45_71) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp45_71 mod44_70)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:66:15_69"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp45_71)"
" mod44_70)))))"
"(let-values(((phase_67)(namespace-phase ns_65)))"
"(let-values(((m-ns_68)"
"(let-values(((ns46_72) ns_65)"
"((name47_73) name_66)"
"((phase48_74) phase_67))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_72"
" name47_73"
" phase48_74)"
"(namespace->module-namespace81.1 ns46_72 name47_73 phase48_74)))))"
"(begin"
"(if m-ns_68"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_65 name_66)"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"module not instantiated in the current namespace\""
"                                           \"name\""
" name_66))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_68))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                         \"current code inspector cannot access namespace of module\""
"                                         \"module name\""
" name_66)))"
"(if(namespace-get-root-expand-ctx m-ns_68)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_68"
"(let-values()"
"(if(variable-reference-constant?"
"(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((ns41_75) ns_65)"
"((temp42_76)(namespace-mpi m-ns_68))"
"((phase43_77) phase_67))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-make-available!111.1))"
"(namespace-module-make-available!109.1 #f #f ns41_75 temp42_76 phase43_77)"
"(namespace-module-make-available!111.1 ns41_75 temp42_76 phase43_77)))"
" m-ns_68))))))))))))"
"(case-lambda"
"((mod_78)(module->namespace21_60 mod_78 #f #f))"
"((mod_79 ns18_80)(module->namespace21_60 mod_79 ns18_80 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_81)"
"(lambda(insp25_82 mod26_83 ns23_84 ns24_85)"
"(let-values(((insp_86) insp25_82))"
"(let-values(((mod_87) mod26_83))"
"(let-values(((ns_88)(if ns24_85 ns23_84(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_86)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-unprotect-module \"inspector?\" insp_86)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_87)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"module-path?\""
" mod_87)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_88)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"namespace?\""
" ns_88)))"
"(values))))"
"(let-values(((name_89)"
"(let-values(((...space/api-module.rkt:91:15_92)"
" reference->resolved-module-path34.1)"
"((mod49_93) mod_87)"
"((temp50_94) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp50_94 mod49_93)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:91:15_92"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp50_94)"
" mod49_93)))))"
"(let-values(((phase_90)(namespace-phase ns_88)))"
"(let-values(((m-ns_91)"
"(let-values(((ns51_95) ns_88)"
"((name52_96) name_89)"
"((phase53_97) phase_90))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace81.1))"
"(namespace->module-namespace79.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_95"
" name52_96"
" phase53_97)"
"(namespace->module-namespace81.1 ns51_95 name52_96 phase53_97)))))"
"(begin"
"(if m-ns_91"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                             \"module not instantiated\""
"                                             \"module name\""
" name_89)))"
"(if(inspector-superior? insp_86(namespace-inspector m-ns_91))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_91"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_98 mod_99)(namespace-unprotect-module27_81 insp_98 mod_99 #f #f))"
"((insp_100 mod_101 ns23_102)(namespace-unprotect-module27_81 insp_100 mod_101 ns23_102 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_103 ns_104 name_105)"
"(let-values(((or-part_106)(namespace->module ns_104 name_105)))"
"(if or-part_106"
" or-part_106"
"        (raise-arguments-error who_103 \"unknown module in the current namespace\" \"name\" name_105)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_107)"
"(let-values(((or-part_108)(1/module-path? mod_107)))"
"(if or-part_108"
" or-part_108"
"(let-values(((or-part_109)(1/module-path-index? mod_107)))"
"(if or-part_109 or-part_109(1/resolved-module-path? mod_107)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$4)"
"(make-required"
" 'reference->resolved-module-path"
"(case-lambda((self_110 mod_111)(apply missing-kw self_110 mod_111 null)))"
" #f"
" #f))"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_112 mod31_113)"
"(let-values(((mod_114) mod31_113))"
"(let-values(((load?_115) load?29_112))"
"(let-values()"
"(if(1/resolved-module-path? mod_114)"
"(let-values() mod_114)"
"(let-values()"
"(let-values(((mpi_116)"
"(if(1/module-path-index? mod_114) mod_114(1/module-path-index-join mod_114 #f))))"
"(1/module-path-index-resolve mpi_116 load?_115)))))))))"
"(define-values"
"(unpack33.1)"
"(lambda(given-kws_117 given-args_118 mod31_119)"
"(let-values(((load?29_120)(car given-args_118)))(reference->resolved-module-path32.1 load?29_120 mod31_119))))"
"(define-values"
"(reference->resolved-module-path34.1)"
"(lifted/1.1$4"
"(lambda(given-kws_121 given-argc_122)"
"(if(= given-argc_122 3)"
"(let-values(((l2_123) given-kws_121))"
"(if(pair? l2_123)(if(eq?(car l2_123) '#:load?)(null?(cdr l2_123)) #f) #f))"
" #f))"
"(case-lambda((given-kws_124 given-args_125 mod_126)(unpack33.1 given-kws_124 given-args_125 mod_126)))"
" '(#:load?)"
" '(#:load?)))"
"(define-values"
"(prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list(cons prop:missing-module(lambda(e_26)(1/exn:fail:filesystem:missing-module-path e_26))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_27 make-_28 ?_29 -ref_30 -set!_31)"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons prop:missing-module(lambda(e_48)(1/exn:fail:syntax:missing-module-path e_48))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))"
"(values struct:_27 make-_28 ?_29(make-struct-field-accessor -ref_30 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_49)"
"(begin"
"(if(let-values(((or-part_50)(not v_49)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(1/module-path? v_49)))"
"(if or-part_51 or-part_51(if(syntax?$1 v_49)(1/module-path?(syntax->datum$1 v_49)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_49)))"
" v_49))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_52 filename_53 pre_54 rel_55 post_56 errstr_57)"
"(let-values(((path_58)(1/current-module-path-for-load)))"
"(if path_58"
"(let-values()"
"(begin"
"(if(syntax?$1 path_58)"
"(let-values()"
"(raise"
"(make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_58)(srcloc->string(syntax-srcloc path_58)) name_52)"
"(syntax->datum$1 path_58)"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
"(list path_58)"
"(syntax->datum$1 path_58))))"
"(void))"
"(raise"
"(make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_52"
" path_58"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)))))"
"(void)))))"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values(((s_7) s3_2))"
"(let-values(((context_8) context4_3))"
"(let-values(((stop-ids_9) stop-ids5_4))"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 #f)))"
"(let-values()"
"(let-values(((temp50_11) 'local-expand)"
"((s51_12) s_7)"
"((context52_13) context_8)"
"((stop-ids53_14) stop-ids_9)"
"((intdefs54_15) intdefs_10))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp50_11"
" s51_12"
" context52_13"
" stop-ids53_14"
" intdefs54_15"
" #t)"
"(do-local-expand49.1 temp50_11 s51_12 context52_13 stop-ids53_14 intdefs54_15)))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 #f #f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values(((s_31) s12_24))"
"(let-values(((context_32) context13_25))"
"(let-values(((stop-ids_33) stop-ids14_26))"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 #f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:25:2_36) do-local-expand49.1)"
"((temp55_37) 'local-expand)"
"((s56_38) s_31)"
"((context57_39) context_32)"
"((stop-ids58_40) stop-ids_33)"
"((intdefs59_41) intdefs_34)"
"((temp60_42) #t)"
"((lift-key61_43) lift-key_35))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" #f"
" #f"
" temp60_42"
" #t"
" lift-key61_43"
" #t"
" #f"
" #f"
" temp55_37"
" s56_38"
" context57_39"
" stop-ids58_40"
" intdefs59_41"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:25:2_36"
" keyword-procedure-extract"
" '(#:capture-lifts? #:lift-key)"
" 7)"
" '(#:capture-lifts? #:lift-key)"
"(list temp60_42 lift-key61_43)"
" temp55_37"
" s56_38"
" context57_39"
" stop-ids58_40"
" intdefs59_41))))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 #f #f #f #f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 #t #t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values(((s_62) s19_57))"
"(let-values(((context_63) context20_58))"
"(let-values(((stop-ids_64) stop-ids21_59))"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 #f)))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:30:2_66) do-local-expand49.1)"
"((temp62_67) 'local-expand)"
"((s63_68) s_62)"
"((context64_69) context_63)"
"((stop-ids65_70) stop-ids_64)"
"((intdefs66_71) intdefs_65)"
"((temp67_72) #t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" temp67_72"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp62_67"
" s63_68"
" context64_69"
" stop-ids65_70"
" intdefs66_71"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:30:2_66"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 7)"
" '(#:as-transformer?)"
"(list temp67_72)"
" temp62_67"
" s63_68"
" context64_69"
" stop-ids65_70"
" intdefs66_71)))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 #f #f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values(((s_88) s28_81))"
"(let-values(((context_89) context29_82))"
"(let-values(((stop-ids_90) stop-ids30_83))"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 #f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:34:2_93) do-local-expand49.1)"
"((temp68_94) 'local-expand)"
"((s69_95) s_88)"
"((context70_96) context_89)"
"((stop-ids71_97) stop-ids_90)"
"((intdefs72_98) intdefs_91)"
"((temp73_99) #t)"
"((temp74_100) #t)"
"((lift-key75_101) lift-key_92))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" temp73_99"
" #t"
" temp74_100"
" #t"
" lift-key75_101"
" #t"
" #f"
" #f"
" temp68_94"
" s69_95"
" context70_96"
" stop-ids71_97"
" intdefs72_98"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:34:2_93"
" keyword-procedure-extract"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
" 7)"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
"(list temp73_99 temp74_100 lift-key75_101)"
" temp68_94"
" s69_95"
" context70_96"
" stop-ids71_97"
" intdefs72_98))))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 #f #f #f #f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 #t #t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 #f #t #f)))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_114)"
"(let-values(((exp-s_115)"
"(let-values(((...and/local-expand.rkt:40:16_117) do-local-expand49.1)"
"((temp76_118) 'local-expand)"
"((s77_119) s_114)"
"((temp78_120) 'expression)"
"((null79_121) null)"
"((temp80_122) #f)"
"((temp81_123) #t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_123"
" #t"
" temp76_118"
" s77_119"
" temp78_120"
" null79_121"
" temp80_122"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:40:16_117"
" keyword-procedure-extract"
" '(#:skip-log-exit?)"
" 7)"
" '(#:skip-log-exit?)"
"(list temp81_123)"
" temp76_118"
" s77_119"
" temp78_120"
" null79_121"
" temp80_122)))))"
"(let-values(((ae_116)"
"(already-expanded1.1"
" exp-s_115"
"(root-expand-context-all-scopes-stx"
"(let-values(((temp82_124) 'syntax-local-expand-expression))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp82_124 #t)"
"(get-current-expand-context8.1 temp82_124)))))))"
"(begin"
"(let-values(((ctx_125)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f #f #f)"
"(get-current-expand-context8.1)))))"
"(begin"
"(let-values(((obs_126)(expand-context-observer ctx_125)))"
"(if obs_126"
"(let-values()(if #t(let-values()(call-expand-observe obs_126 'opaque-expr ae_116))(void)))"
"(void)))"
"(let-values(((obs_127)(expand-context-observer ctx_125)))"
"(if obs_127"
"(let-values()(if #t(let-values()(call-expand-observe obs_127 'exit-local exp-s_115))(void)))"
"(void)))))"
"(values exp-s_115 ae_116))))))"
"(define-values"
"(do-local-expand47.1)"
"(lambda(as-transformer?34_128"
" as-transformer?38_129"
" capture-lifts?33_130"
" capture-lifts?37_131"
" lift-key35_132"
" lift-key39_133"
" skip-log-exit?36_134"
" skip-log-exit?40_135"
" who43_136"
" s44_137"
" context45_138"
" stop-ids46_139"
" intdefs41_140"
" intdefs42_141)"
"(let-values(((who_142) who43_136))"
"(let-values(((s_143) s44_137))"
"(let-values(((context_144) context45_138))"
"(let-values(((stop-ids_145) stop-ids46_139))"
"(let-values(((intdefs_146)(if intdefs42_141 intdefs41_140 #f)))"
"(let-values(((capture-lifts?_147)(if capture-lifts?37_131 capture-lifts?33_130 #f)))"
"(let-values(((as-transformer?_148)(if as-transformer?38_129 as-transformer?34_128 #f)))"
"(let-values(((lift-key_149)"
"(if lift-key39_133"
" lift-key35_132"
"(if(let-values(((or-part_150) capture-lifts?_147))"
"(if or-part_150 or-part_150 as-transformer?_148))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_151)(if skip-log-exit?40_135 skip-log-exit?36_134 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_143)"
"(void)"
"                                          (let-values () (raise-argument-error who_142 \"syntax?\" s_143)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_158)(list? context_144)))"
"(if or-part_158"
" or-part_158"
"(memq"
" context_144"
"(if as-transformer?_148"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
"(if as-transformer?_148"
"                                                 \"(or/c 'expression 'top-level list?)\""
"                                                 \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_144)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_159)(not stop-ids_145)))"
"(if or-part_159"
" or-part_159"
"(if(list? stop-ids_145)(andmap2 identifier? stop-ids_145) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
"                                                 \"(or/c (listof identifier?) #f)\""
" stop-ids_145)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_160)(not intdefs_146)))"
"(if or-part_160"
" or-part_160"
"(let-values(((or-part_161)"
"(1/internal-definition-context? intdefs_146)))"
"(if or-part_161"
" or-part_161"
"(if(list? intdefs_146)"
"(andmap2 1/internal-definition-context? intdefs_146)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
"                                                   \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_146)))"
"(values))))"
"(let-values(((ctx_152)"
"(let-values(((who83_162) who_142))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who83_162 #t)"
"(get-current-expand-context8.1 who83_162)))))"
"(let-values(((phase_153)"
"(if as-transformer?_148"
"(add1(expand-context-phase ctx_152))"
"(expand-context-phase ctx_152))))"
"(let-values(((local-ctx_154)"
"(let-values(((...and/local-expand.rkt:86:20_163)"
" make-local-expand-context35.1)"
"((ctx84_164) ctx_152)"
"((context85_165) context_144)"
"((phase86_166) phase_153)"
"((intdefs87_167) intdefs_146)"
"((stop-ids88_168) stop-ids_145))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" context85_165"
" intdefs87_167"
" phase86_166"
" #t"
" stop-ids88_168"
" #t"
" ctx84_164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:86:20_163"
" keyword-procedure-extract"
" '(#:context #:intdefs #:phase #:stop-ids)"
" 3)"
" '(#:context #:intdefs #:phase #:stop-ids)"
"(list context85_165 intdefs87_167 phase86_166 stop-ids88_168)"
" ctx84_164)))))"
"(let-values(((input-s_155)"
"(let-values(((temp89_169)(flip-introduction-scopes s_143 ctx_152))"
"((intdefs90_170) intdefs_146))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f temp89_169 intdefs90_170)"
"(add-intdef-scopes23.1 temp89_169 intdefs90_170)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_171)"
"(expand-context-observer local-ctx_154)))"
"(if obs_171"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_171 'enter-local))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_148"
"(let-values()"
"(let-values(((obs_172)"
"(expand-context-observer local-ctx_154)))"
"(if obs_172"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_172 'phase-up))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_173)"
"(expand-context-observer local-ctx_154)))"
"(if obs_173"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_173"
" 'local-pre"
" input-s_155)"
"(call-expand-observe obs_173 'start-expand)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((output-s_156)"
"(if(if as-transformer?_148 capture-lifts?_147 #f)"
"(let-values()"
"(let-values(((...and/local-expand.rkt:100:21_174)"
" expand-transformer93.1)"
"((input-s91_175) input-s_155)"
"((local-ctx92_176) local-ctx_154)"
"((context93_177) context_144)"
"((temp94_178) #t)"
"((lift-key95_179) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1"
" temp94_178"
" #t"
" context93_177"
" #t"
" #f"
" #f"
" lift-key95_179"
" #t"
" input-s91_175"
" local-ctx92_176)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:100:21_174"
" keyword-procedure-extract"
" '(#:begin-form? #:context #:lift-key)"
" 4)"
" '(#:begin-form? #:context #:lift-key)"
"(list temp94_178 context93_177 lift-key95_179)"
" input-s91_175"
" local-ctx92_176))))"
"(if as-transformer?_148"
"(let-values()"
"(let-values(((...and/local-expand.rkt:105:21_180)"
" expand-transformer93.1)"
"((input-s96_181) input-s_155)"
"((local-ctx97_182) local-ctx_154)"
"((context98_183) context_144)"
"((temp99_184) #f)"
"((temp100_185)"
"(eq? 'top-level context_144))"
"((lift-key101_186) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1"
" temp100_185"
" #t"
" context98_183"
" #t"
" temp99_184"
" #t"
" lift-key101_186"
" #t"
" input-s96_181"
" local-ctx97_182)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:105:21_180"
" keyword-procedure-extract"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
" 4)"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
"(list"
" temp100_185"
" context98_183"
" temp99_184"
" lift-key101_186)"
" input-s96_181"
" local-ctx97_182))))"
"(if capture-lifts?_147"
"(let-values()"
"(let-values(((...and/local-expand.rkt:111:21_187)"
" expand/capture-lifts80.1)"
"((input-s102_188) input-s_155)"
"((local-ctx103_189) local-ctx_154)"
"((temp104_190) #t)"
"((lift-key105_191) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand/capture-lifts80.1))"
"(expand/capture-lifts78.1"
" temp104_190"
" #t"
" #f"
" #f"
" lift-key105_191"
" #t"
" input-s102_188"
" local-ctx103_189)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:111:21_187"
" keyword-procedure-extract"
" '(#:begin-form? #:lift-key)"
" 4)"
" '(#:begin-form? #:lift-key)"
"(list temp104_190 lift-key105_191)"
" input-s102_188"
" local-ctx103_189))))"
"(let-values()"
"(let-values(((input-s106_192) input-s_155)"
"((local-ctx107_193) local-ctx_154))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" input-s106_192"
" local-ctx107_193)"
"(expand7.1"
" input-s106_192"
" local-ctx107_193)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_194)"
"(expand-context-observer local-ctx_154)))"
"(if obs_194"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_194"
" 'local-post"
" output-s_156))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_157)"
"(flip-introduction-scopes output-s_156 ctx_152)))"
"(begin"
"(if skip-log-exit?_151"
"(void)"
"(let-values()"
"(let-values(((obs_195)"
"(expand-context-observer local-ctx_154)))"
"(if obs_195"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_195"
" 'exit-local"
" result-s_157))"
"(void)))"
"(void)))))"
" result-s_157)))))))))))))))))))))))))))"
"(define-values"
"(unpack48.1)"
"(lambda(given-kws_196 given-args_197 who43_198 s44_199 context45_200 stop-ids46_201 intdefs41_202 intdefs42_203)"
"(let-values(((as-transformer?38_204)(if(pair? given-kws_196)(eq? '#:as-transformer?(car given-kws_196)) #f)))"
"(let-values(((as-transformer?34_205)(if as-transformer?38_204(car given-args_197)(void)))"
"((given-kws_206)(if as-transformer?38_204(cdr given-kws_196) given-kws_196))"
"((given-args_207)(if as-transformer?38_204(cdr given-args_197) given-args_197)))"
"(let-values(((capture-lifts?37_208)(if(pair? given-kws_206)(eq? '#:capture-lifts?(car given-kws_206)) #f)))"
"(let-values(((capture-lifts?33_209)(if capture-lifts?37_208(car given-args_207)(void)))"
"((given-kws_210)(if capture-lifts?37_208(cdr given-kws_206) given-kws_206))"
"((given-args_211)(if capture-lifts?37_208(cdr given-args_207) given-args_207)))"
"(let-values(((lift-key39_212)(if(pair? given-kws_210)(eq? '#:lift-key(car given-kws_210)) #f)))"
"(let-values(((lift-key35_213)(if lift-key39_212(car given-args_211)(void)))"
"((given-kws_214)(if lift-key39_212(cdr given-kws_210) given-kws_210))"
"((given-args_215)(if lift-key39_212(cdr given-args_211) given-args_211)))"
"(let-values(((skip-log-exit?40_216)(pair? given-kws_214)))"
"(let-values(((skip-log-exit?36_217)(if skip-log-exit?40_216(car given-args_215)(void))))"
"(do-local-expand47.1"
" as-transformer?34_205"
" as-transformer?38_204"
" capture-lifts?33_209"
" capture-lifts?37_208"
" lift-key35_213"
" lift-key39_212"
" skip-log-exit?36_217"
" skip-log-exit?40_216"
" who43_198"
" s44_199"
" context45_200"
" stop-ids46_201"
" intdefs41_202"
" intdefs42_203)))))))))))"
"(define-values"
"(do-local-expand49.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_218 given-argc_219)"
"(if(if(>= given-argc_219 6)(<= given-argc_219 7) #f)"
"(let-values(((l1_220) given-kws_218))"
"(let-values(((l1_221)"
"(if(null? l1_220) l1_220(if(eq?(car l1_220) '#:as-transformer?)(cdr l1_220) l1_220))))"
"(let-values(((l1_222) l1_221))"
"(let-values(((l1_223)"
"(if(null? l1_222) l1_222(if(eq?(car l1_222) '#:capture-lifts?)(cdr l1_222) l1_222))))"
"(let-values(((l1_224) l1_223))"
"(let-values(((l1_225)"
"(if(null? l1_224) l1_224(if(eq?(car l1_224) '#:lift-key)(cdr l1_224) l1_224))))"
"(let-values(((l1_226) l1_225))"
"(let-values(((l1_227)"
"(if(null? l1_226)"
" l1_226"
"(if(eq?(car l1_226) '#:skip-log-exit?)(cdr l1_226) l1_226))))"
"(null? l1_227)))))))))"
" #f))"
"(case-lambda"
"((given-kws_228 given-args_229 who_230 s_231 context_232 stop-ids_233)"
"(unpack48.1 given-kws_228 given-args_229 who_230 s_231 context_232 stop-ids_233 #f #f))"
"((given-kws_234 given-args_235 who_236 s_237 context_238 stop-ids_239 intdefs41_240)"
"(unpack48.1 given-kws_234 given-args_235 who_236 s_237 context_238 stop-ids_239 intdefs41_240 #t)))"
" null"
" '(#:as-transformer? #:capture-lifts? #:lift-key #:skip-log-exit?)"
"(let-values(((do-local-expand_241)"
"(case-lambda"
"((who_242 s_243 context_244 stop-ids_245)"
"(unpack48.1 null null who_242 s_243 context_244 stop-ids_245 #f #f))"
"((who_246 s_247 context_248 stop-ids_249 intdefs41_250)"
"(unpack48.1 null null who_246 s_247 context_248 stop-ids_249 intdefs41_250 #t)))))"
" do-local-expand_241)))"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 #f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 #f #f #f #f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 #t #t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values(((s_29) s10_25))"
"(let-values(((from-s_30) from-s11_26))"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 #f #f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
"      (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values(((or-part_40) maybe-insp_39))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f temp1_2 #t)"
"(new-namespace11.1 temp1_2))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) #f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((ns_9)(1/variable-reference->namespace vr_8)))(namespace-source-name ns_9)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(define-values"
"(1/make-readtable)"
"(lambda(rt_1 . args_2)"
"(begin"
"(apply make-readtable$1 rt_1 args_2)"
"(apply"
" make-readtable$1"
" rt_1"
"((letrec-values(((loop_3)"
"(lambda(args_4)"
"(if(null? args_4)"
"(let-values() args_4)"
"(let-values()"
"(list*"
"(car args_4)"
"(cadr args_4)"
"(let-values(((p_5)(caddr args_4)))(if(procedure? p_5)(wrap-procedure p_5) p_5))"
"(loop_3(cdddr args_4))))))))"
" loop_3)"
" args_2)))))"
"(define-values"
"(wrap-procedure)"
"(lambda(p_6)"
"(if(if(procedure-arity-includes? p_6 2)(procedure-arity-includes? p_6 6) #f)"
"(let-values()"
"(case-lambda"
"((ch_7 in_8)(let-values(((v_9)(p_6 ch_7 in_8)))(if(syntax?$1 v_9)(syntax->datum$1 v_9) v_9)))"
"((ch_10 in_11 line_12 col_13 pos_14 span_15)"
"(let-values(((v_16)(p_6 ch_10 in_11 line_12 col_13 pos_14 span_15)))"
"(if(syntax?$1 v_16)(syntax->reader-syntax v_16) v_16)))))"
"(if(procedure-arity-includes? p_6 2)"
"(let-values()"
"(lambda(ch_17 in_18)"
"(let-values(((v_19)(p_6 ch_17 in_18)))(if(syntax?$1 v_19)(syntax->reader-syntax v_19) v_19))))"
"(if(procedure-arity-includes? p_6 6)"
"(let-values()"
"(lambda(ch_20 in_21 line_22 col_23 pos_24 span_25)"
"(let-values(((v_26)(p_6 ch_20 in_21 line_22 col_23 pos_24 span_25)))"
"(if(syntax?$1 v_26)(syntax->reader-syntax v_26) v_26))))"
"(void))))))"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'make-readtable"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e 1/syntax-e)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source 1/syntax-source)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column 1/syntax-column)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position 1/syntax-position)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-readtable 1/make-readtable)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry namespace-module-registry$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(define-values"
"(lifted/1.1$2)"
"(make-required 'declare-kernel-module!(case-lambda((self_5 ns_6)(apply missing-kw self_5 ns_6 null))) #f #f))"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_7 main-ids2_8 ns5_9)"
"(let-values(((ns_10) ns5_9))"
"(let-values(((eval_11) eval1_7))"
"(let-values(((main-ids_12) main-ids2_8))"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_13) copy-runtime-module!26.1)"
"((temp51_14) '#%kernel)"
"((temp52_15) '#%runtime)"
"((temp53_16)(set-union primitive-ids main-ids_12))"
"((temp54_17)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"((ns55_18) ns_10))"
"(if(variable-reference-constant?(#%variable-reference copy-runtime-module!26.1))"
"(copy-runtime-module!24.1 #f #f temp54_17 #t ns55_18 #f #f #f #f temp53_16 #t temp52_15 #t temp51_14)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:23:2_13"
" keyword-procedure-extract"
" '(#:extras #:namespace #:skip #:to)"
" 3)"
" '(#:extras #:namespace #:skip #:to)"
"(list temp54_17 ns55_18 temp53_16 temp52_15)"
" temp51_14)))"
"(let-values(((...nder/boot/kernel.rkt:30:2_19) declare-reexporting-module!50.1)"
"((temp56_20) '#%kernel)"
"((temp57_21) '(#%core #%runtime #%main))"
"((ns58_22) ns_10))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns58_22 #f #f temp56_20 temp57_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:30:2_19"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns58_22)"
" temp56_20"
" temp57_21))))))))))"
"(define-values"
"(unpack7.1)"
"(lambda(given-kws_23 given-args_24 ns5_25)"
"(let-values(((eval1_26)(car given-args_24))"
"((given-kws_27)(cdr given-kws_23))"
"((given-args_28)(cdr given-args_24)))"
"(let-values(((main-ids2_29)(car given-args_28)))(declare-kernel-module!6.1 eval1_26 main-ids2_29 ns5_25)))))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lifted/1.1$2"
"(lambda(given-kws_30 given-argc_31)"
"(if(= given-argc_31 3)"
"(let-values(((l2_32) given-kws_30))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:eval)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)(if(eq?(car l2_33) '#:main-ids)(null?(cdr l2_33)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_34 given-args_35 ns_36)(unpack7.1 given-kws_34 given-args_35 ns_36)))"
" '(#:eval #:main-ids)"
" '(#:eval #:main-ids)))"
"(define-values"
"(lifted/2.1$2)"
"(make-required 'copy-runtime-module!(case-lambda((self_37 name_38)(apply missing-kw self_37 name_38 null))) #f #f))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lambda(alts12_39"
" alts19_40"
" extras13_41"
" extras20_42"
" namespace10_43"
" primitive?14_44"
" primitive?21_45"
" protected?15_46"
" protected?22_47"
" skip11_48"
" skip18_49"
" to9_50"
" to16_51"
" name23_52)"
"(let-values(((name_53) name23_52))"
"(let-values(((to-name_54)(if to16_51 to9_50 name_53)))"
"(let-values(((ns_55) namespace10_43))"
"(let-values(((skip-syms_56)(if skip18_49 skip11_48(seteq))))"
"(let-values(((alts_57)(if alts19_40 alts12_39 '#hasheq())))"
"(let-values(((extras_58)(if extras20_42 extras13_41 '#hasheq())))"
"(let-values(((primitive?_59)(if primitive?21_45 primitive?14_44 #t)))"
"(let-values(((protected?_60)(if protected?22_47 protected?15_46 #f)))"
"(let-values()"
"(let-values(((mod-name_61)(list 'quote name_53)))"
"(let-values(((prims_62)(1/primitive-table name_53)))"
"(let-values((()"
"(begin"
"(let-values(((ht_65) prims_62))"
"(begin"
"(if((lambda(ht_66)(hash? ht_66)) ht_65)"
"(void)"
"(let-values()(default-in-hash-keys ht_65)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68 i_69)"
"(if i_69"
"(let-values(((sym_70)"
"(hash-iterate-key ht_65 i_69)))"
"(if #t"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_68))"
"(let-values(((fold-var_73)"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_70))"
"(void)))))"
"(values fold-var_73)))))"
"(if #t"
"(for-loop_67"
" fold-var_71"
"(hash-iterate-next ht_65 i_69))"
" fold-var_71))"
" fold-var_68))"
" fold-var_68))))"
" for-loop_67)"
"(void)"
"(hash-iterate-first ht_65))))"
"(values))))"
"(let-values(((ht_63)"
"(let-values(((ht_74) prims_62))"
"(begin"
"(if((lambda(ht_75)(hash? ht_75)) ht_74)"
"(void)"
"(let-values()(default-in-hash ht_74)))"
"((letrec-values(((for-loop_76)"
"(lambda(table_77 i_78)"
"(if i_78"
"(let-values(((sym_79 val_80)"
"(hash-iterate-key+value ht_74 i_78)))"
"(if #t"
"(let-values(((table_81)"
"(let-values(((table_82)"
" table_77))"
"(if(set-member?"
" skip-syms_56"
" sym_79)"
" table_82"
"(let-values(((table_83)"
" table_82))"
"(let-values(((table_84)"
"(let-values()"
"(let-values(((key_85"
" val_86)"
"(let-values()"
"(values"
" sym_79"
"(let-values(((or-part_87)"
"(hash-ref"
" alts_57"
" sym_79"
" #f)))"
"(if or-part_87"
" or-part_87"
" val_80))))))"
"(hash-set"
" table_83"
" key_85"
" val_86)))))"
"(values table_84)))))))"
"(if #t"
"(for-loop_76"
" table_81"
"(hash-iterate-next ht_74 i_78))"
" table_81))"
" table_77))"
" table_77))))"
" for-loop_76)"
" '#hasheq()"
"(hash-iterate-first ht_74))))))"
"(let-values(((ht+extras_64)"
"(let-values(((ht_88) extras_58))"
"(begin"
"(if((lambda(ht_89)(hash? ht_89)) ht_88)"
"(void)"
"(let-values()(default-in-hash ht_88)))"
"((letrec-values(((for-loop_90)"
"(lambda(ht_91 i_92)"
"(if i_92"
"(let-values(((k_93 v_94)"
"(hash-iterate-key+value"
" ht_88"
" i_92)))"
"(if #t"
"(let-values(((ht_95)"
"(let-values(((ht_96) ht_91))"
"(let-values(((ht_97)"
"(let-values()"
"(hash-set"
" ht_96"
" k_93"
" v_94))))"
"(values ht_97)))))"
"(if #t"
"(for-loop_90"
" ht_95"
"(hash-iterate-next ht_88 i_92))"
" ht_95))"
" ht_91))"
" ht_91))))"
" for-loop_90)"
" ht_63"
"(hash-iterate-first ht_88))))))"
"(let-values(((...nder/boot/kernel.rkt:51:2_98) declare-hash-based-module!41.1)"
"((to-name59_99) to-name_54)"
"((ht+extras60_100) ht+extras_64)"
"((ns61_101) ns_55)"
"((primitive?62_102) primitive?_59)"
"((protected?63_103) protected?_60))"
"(if(variable-reference-constant?"
"(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns61_101"
" primitive?62_102"
" #t"
" #f"
" #f"
" protected?63_103"
" #t"
" #f"
" #f"
" to-name59_99"
" ht+extras60_100)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:51:2_98"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:protected?)"
" 4)"
" '(#:namespace #:primitive? #:protected?)"
"(list ns61_101 primitive?62_102 protected?63_103)"
" to-name59_99"
" ht+extras60_100)))))))))))))))))))"
"(define-values"
"(unpack25.1)"
"(lambda(given-kws_104 given-args_105 name23_106)"
"(let-values(((alts19_107)(if(pair? given-kws_104)(eq? '#:alts(car given-kws_104)) #f)))"
"(let-values(((alts12_108)(if alts19_107(car given-args_105)(void)))"
"((given-kws_109)(if alts19_107(cdr given-kws_104) given-kws_104))"
"((given-args_110)(if alts19_107(cdr given-args_105) given-args_105)))"
"(let-values(((extras20_111)(if(pair? given-kws_109)(eq? '#:extras(car given-kws_109)) #f)))"
"(let-values(((extras13_112)(if extras20_111(car given-args_110)(void)))"
"((given-kws_113)(if extras20_111(cdr given-kws_109) given-kws_109))"
"((given-args_114)(if extras20_111(cdr given-args_110) given-args_110)))"
"(let-values(((namespace10_115)(car given-args_114))"
"((given-kws_116)(cdr given-kws_113))"
"((given-args_117)(cdr given-args_114)))"
"(let-values(((primitive?21_118)(if(pair? given-kws_116)(eq? '#:primitive?(car given-kws_116)) #f)))"
"(let-values(((primitive?14_119)(if primitive?21_118(car given-args_117)(void)))"
"((given-kws_120)(if primitive?21_118(cdr given-kws_116) given-kws_116))"
"((given-args_121)(if primitive?21_118(cdr given-args_117) given-args_117)))"
"(let-values(((protected?22_122)"
"(if(pair? given-kws_120)(eq? '#:protected?(car given-kws_120)) #f)))"
"(let-values(((protected?15_123)(if protected?22_122(car given-args_121)(void)))"
"((given-kws_124)(if protected?22_122(cdr given-kws_120) given-kws_120))"
"((given-args_125)(if protected?22_122(cdr given-args_121) given-args_121)))"
"(let-values(((skip18_126)(if(pair? given-kws_124)(eq? '#:skip(car given-kws_124)) #f)))"
"(let-values(((skip11_127)(if skip18_126(car given-args_125)(void)))"
"((given-kws_128)(if skip18_126(cdr given-kws_124) given-kws_124))"
"((given-args_129)(if skip18_126(cdr given-args_125) given-args_125)))"
"(let-values(((to16_130)(pair? given-kws_128)))"
"(let-values(((to9_131)(if to16_130(car given-args_129)(void))))"
"(copy-runtime-module!24.1"
" alts12_108"
" alts19_107"
" extras13_112"
" extras20_111"
" namespace10_115"
" primitive?14_119"
" primitive?21_118"
" protected?15_123"
" protected?22_122"
" skip11_127"
" skip18_126"
" to9_131"
" to16_130"
" name23_106))))))))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lifted/2.1$2"
"(lambda(given-kws_132 given-argc_133)"
"(if(= given-argc_133 3)"
"(subsets? '(#:namespace) given-kws_132 '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to))"
" #f))"
"(case-lambda((given-kws_134 given-args_135 name_136)(unpack25.1 given-kws_134 given-args_135 name_136)))"
" '(#:namespace)"
" '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/3.1$1)"
"(make-required"
" 'declare-hash-based-module!"
"(case-lambda((self_137 name_138 ht_139)(apply missing-kw self_137 name_138 ht_139 null)))"
" #f"
" #f))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lambda(namespace27_140"
" primitive?28_141"
" primitive?33_142"
" protected30_143"
" protected35_144"
" protected?29_145"
" protected?34_146"
" register-builtin?31_147"
" register-builtin?36_148"
" name37_149"
" ht38_150)"
"(let-values(((name_151) name37_149))"
"(let-values(((ht_152) ht38_150))"
"(let-values(((ns_153) namespace27_140))"
"(let-values(((primitive?_154)(if primitive?33_142 primitive?28_141 #f)))"
"(let-values(((protected?_155)(if protected?34_146 protected?29_145 #f)))"
"(let-values(((protected-syms_156)(if protected35_144 protected30_143 null)))"
"(let-values(((register-builtin?_157)(if register-builtin?36_148 register-builtin?31_147 #f)))"
"(let-values()"
"(let-values(((mpi_158)(1/module-path-index-join(list 'quote name_151) #f)))"
"(let-values(((ns64_159) ns_153)"
"((temp65_160)"
"(let-values(((...nder/boot/kernel.rkt:65:3_162) make-module36.1)"
"((temp67_163) #t)"
"((primitive?68_164) primitive?_154)"
"((temp69_165) #t)"
"((temp70_166)(not protected?_155))"
"((mpi71_167) mpi_158)"
"((temp72_168)"
"(hasheqv"
" 0"
"(let-values(((ht_170) ht_152))"
"(begin"
"(if((lambda(ht_171)(hash? ht_171)) ht_170)"
"(void)"
"(let-values()(default-in-hash-keys ht_170)))"
"((letrec-values(((for-loop_172)"
"(lambda(table_173 i_174)"
"(if i_174"
"(let-values(((sym_175)"
"(hash-iterate-key"
" ht_170"
" i_174)))"
"(if #t"
"(let-values(((table_176)"
"(let-values(((table_177)"
" table_173))"
"(let-values(((table_178)"
"(let-values()"
"(let-values(((key_179"
" val_180)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_157"
"(let-values()"
"(register-built-in-symbol!"
" sym_175))"
"(void))"
"(values))))"
"(let-values(((binding_181)"
"(let-values(((mpi74_182)"
" mpi_158)"
"((temp75_183)"
" 0)"
"((sym76_184)"
" sym_175))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi74_182"
" temp75_183"
" sym76_184)"
"(make-module-binding22.1"
" mpi74_182"
" temp75_183"
" sym76_184)))))"
"(values"
" sym_175"
"(if(let-values(((or-part_185)"
" protected?_155))"
"(if or-part_185"
" or-part_185"
"(member"
" sym_175"
" protected-syms_156)))"
"(provided1.1"
" binding_181"
" #t"
" #f)"
" binding_181)))))))"
"(hash-set"
" table_177"
" key_179"
" val_180)))))"
"(values"
" table_178)))))"
"(if #t"
"(for-loop_172"
" table_176"
"(hash-iterate-next ht_170 i_174))"
" table_176))"
" table_173))"
" table_173))))"
" for-loop_172)"
" '#hash()"
"(hash-iterate-first ht_170))))))"
"((temp73_169)"
"(lambda(data-box_186"
" ns_187"
" phase-shift_188"
" phase-level_189"
" self_190"
" bulk-binding-registry_191"
" insp_192)"
"(if(= 0 phase-level_189)"
"(let-values()"
"(let-values(((ht_193) ht_152))"
"(begin"
"(if((lambda(ht_194)(hash? ht_194)) ht_193)"
"(void)"
"(let-values()(default-in-hash ht_193)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_196 i_197)"
"(if i_197"
"(let-values(((sym_198 val_199)"
"(hash-iterate-key+value"
" ht_193"
" i_197)))"
"(if #t"
"(let-values(((fold-var_200)"
"(let-values(((fold-var_201)"
" fold-var_196))"
"(let-values(((fold-var_202)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_187"
" 0"
" sym_198"
" val_199))"
"(void)))))"
"(values"
" fold-var_202)))))"
"(if #t"
"(for-loop_195"
" fold-var_200"
"(hash-iterate-next"
" ht_193"
" i_197))"
" fold-var_200))"
" fold-var_196))"
" fold-var_196))))"
" for-loop_195)"
"(void)"
"(hash-iterate-first ht_193)))))"
"(void)))))"
"(if(variable-reference-constant?(#%variable-reference make-module36.1))"
"(make-module34.1"
" temp67_163"
" #t"
" #f"
" #f"
" temp73_169"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp70_166"
" #t"
" temp69_165"
" #t"
" #f"
" #f"
" primitive?68_164"
" #t"
" temp72_168"
" #f"
" #f"
" mpi71_167"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:65:3_162"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
"(list"
" temp67_163"
" temp73_169"
" temp70_166"
" temp69_165"
" primitive?68_164"
" temp72_168"
" mpi71_167)))))"
"((temp66_161)(1/module-path-index-resolve mpi_158)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!55.1))"
"(declare-module!53.1 #f #f ns64_159 temp65_160 temp66_161)"
"(declare-module!55.1 ns64_159 temp65_160 temp66_161))))))))))))))"
"(define-values"
"(unpack40.1$1)"
"(lambda(given-kws_203 given-args_204 name37_205 ht38_206)"
"(let-values(((namespace27_207)(car given-args_204))"
"((given-kws_208)(cdr given-kws_203))"
"((given-args_209)(cdr given-args_204)))"
"(let-values(((primitive?33_210)(if(pair? given-kws_208)(eq? '#:primitive?(car given-kws_208)) #f)))"
"(let-values(((primitive?28_211)(if primitive?33_210(car given-args_209)(void)))"
"((given-kws_212)(if primitive?33_210(cdr given-kws_208) given-kws_208))"
"((given-args_213)(if primitive?33_210(cdr given-args_209) given-args_209)))"
"(let-values(((protected35_214)(if(pair? given-kws_212)(eq? '#:protected(car given-kws_212)) #f)))"
"(let-values(((protected30_215)(if protected35_214(car given-args_213)(void)))"
"((given-kws_216)(if protected35_214(cdr given-kws_212) given-kws_212))"
"((given-args_217)(if protected35_214(cdr given-args_213) given-args_213)))"
"(let-values(((protected?34_218)(if(pair? given-kws_216)(eq? '#:protected?(car given-kws_216)) #f)))"
"(let-values(((protected?29_219)(if protected?34_218(car given-args_217)(void)))"
"((given-kws_220)(if protected?34_218(cdr given-kws_216) given-kws_216))"
"((given-args_221)(if protected?34_218(cdr given-args_217) given-args_217)))"
"(let-values(((register-builtin?36_222)(pair? given-kws_220)))"
"(let-values(((register-builtin?31_223)(if register-builtin?36_222(car given-args_221)(void))))"
"(declare-hash-based-module!39.1"
" namespace27_207"
" primitive?28_211"
" primitive?33_210"
" protected30_215"
" protected35_214"
" protected?29_219"
" protected?34_218"
" register-builtin?31_223"
" register-builtin?36_222"
" name37_205"
" ht38_206))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lifted/3.1$1"
"(lambda(given-kws_224 given-argc_225)"
"(if(= given-argc_225 4)"
"(subsets? '(#:namespace) given-kws_224 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" #f))"
"(case-lambda"
"((given-kws_226 given-args_227 name_228 ht_229)(unpack40.1$1 given-kws_226 given-args_227 name_228 ht_229)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/4.1$1)"
"(make-required"
" 'declare-reexporting-module!"
"(case-lambda((self_230 name_231 require-names_232)(apply missing-kw self_230 name_231 require-names_232 null)))"
" #f"
" #f))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lambda(namespace43_233 reexport?42_234 reexport?44_235 name46_236 require-names47_237)"
"(let-values(((name_238) name46_236))"
"(let-values(((require-names_239) require-names47_237))"
"(let-values(((reexport?_240)(if reexport?44_235 reexport?42_234 #t)))"
"(let-values(((ns_241) namespace43_233))"
"(let-values()"
"(let-values(((mpi_242)(1/module-path-index-join(list 'quote name_238) #f)))"
"(let-values(((require-mpis_243)"
"(alt-reverse"
"(let-values(((lst_244) require-names_239))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((require-name_248)(unsafe-car lst_247)))"
"(if #t"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250) fold-var_246))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_248)"
" #f))"
" fold-var_250))))"
"(values fold-var_251)))))"
"(if #t"
"(for-loop_245 fold-var_249(unsafe-cdr lst_247))"
" fold-var_249))"
" fold-var_246))"
" fold-var_246))))"
" for-loop_245)"
" null"
" lst_244))))))"
"(let-values(((ns77_252) ns_241)"
"((temp78_253)"
"(let-values(((...nder/boot/kernel.rkt:95:3_255) make-module36.1)"
"((temp80_256) #t)"
"((temp81_257) #t)"
"((mpi82_258) mpi_242)"
"((temp83_259)(list(cons 0 require-mpis_243)))"
"((temp84_260)"
"(if reexport?_240"
"(hasheqv"
" 0"
"(let-values(((lst_262) require-mpis_243))"
"(begin"
"(if(list? lst_262)(void)(let-values()(in-list lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(table_264 lst_265)"
"(if(pair? lst_265)"
"(let-values(((require-mpi_266)"
"(unsafe-car lst_265)))"
"(if #t"
"(let-values(((table_267)"
"(let-values(((m_268)"
"(namespace->module"
" ns_241"
"(1/module-path-index-resolve"
" require-mpi_266))))"
"(begin"
" #t"
"((letrec-values(((for-loop_269)"
"(lambda(table_270)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_271)"
"(let-values(((ht_272)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_268)"
"(module-self"
" m_268)"
" require-mpi_266)"
" 0)))"
"(begin"
"(if((lambda(ht_273)"
"(hash?"
" ht_273))"
" ht_272)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_272)))"
"((letrec-values(((for-loop_274)"
"(lambda(table_275"
" i_276)"
"(if i_276"
"(let-values(((sym_277"
" binding_278)"
"(hash-iterate-key+value"
" ht_272"
" i_276)))"
"(if #t"
"(let-values(((table_279)"
"(let-values(((table_280)"
" table_275))"
"(let-values(((table_281)"
"(let-values()"
"(let-values(((key_282"
" val_283)"
"(let-values()"
"(values"
" sym_277"
" binding_278))))"
"(hash-set"
" table_280"
" key_282"
" val_283)))))"
"(values"
" table_281)))))"
"(if #t"
"(for-loop_274"
" table_279"
"(hash-iterate-next"
" ht_272"
" i_276))"
" table_279))"
" table_275))"
" table_275))))"
" for-loop_274)"
" table_270"
"(hash-iterate-first"
" ht_272))))))"
"(if #f"
"(for-loop_269"
" table_271)"
" table_271))"
" table_270))"
" table_270))))"
" for-loop_269)"
" table_264)))))"
"(if #t"
"(for-loop_263"
" table_267"
"(unsafe-cdr lst_265))"
" table_267))"
" table_264))"
" table_264))))"
" for-loop_263)"
" '#hash()"
" lst_262))))"
" '#hasheqv()))"
"((void85_261) void))"
"(if(variable-reference-constant?(#%variable-reference make-module36.1))"
"(make-module34.1"
" temp80_256"
" #t"
" #f"
" #f"
" void85_261"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_257"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp84_260"
" temp83_259"
" #t"
" mpi82_258"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:95:3_255"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
"(list temp80_256 void85_261 temp81_257 temp84_260 temp83_259 mpi82_258)))))"
"((temp79_254)(1/module-path-index-resolve mpi_242)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!55.1))"
"(declare-module!53.1 #f #f ns77_252 temp78_253 temp79_254)"
"(declare-module!55.1 ns77_252 temp78_253 temp79_254))))))))))))"
"(define-values"
"(unpack49.1)"
"(lambda(given-kws_284 given-args_285 name46_286 require-names47_287)"
"(let-values(((namespace43_288)(car given-args_285))"
"((given-kws_289)(cdr given-kws_284))"
"((given-args_290)(cdr given-args_285)))"
"(let-values(((reexport?44_291)(pair? given-kws_289)))"
"(let-values(((reexport?42_292)(if reexport?44_291(car given-args_290)(void))))"
"(declare-reexporting-module!48.1"
" namespace43_288"
" reexport?42_292"
" reexport?44_291"
" name46_286"
" require-names47_287))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lifted/4.1$1"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 4)(subsets? '(#:namespace) given-kws_293 '(#:namespace #:reexport?)) #f))"
"(case-lambda"
"((given-kws_295 given-args_296 name_297 require-names_298)"
"(unpack49.1 given-kws_295 given-args_296 name_297 require-names_298)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" new:collection-path"
" 'collection-file-path"
" new:collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_1)(TH-place-channel-ref x_1 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_2)(TH-place-channel-ref x_2 0))(lambda(x_3)(TH-place-channel-ref x_3 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-accept-compiled"
" #t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(1/syntax-e exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_6)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(1/syntax-e exp_5))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_5))))"
"(let-values(((r_8)(cdr(1/syntax-e exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(1/syntax-e r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'default-load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_6)"
" #f)))))))"
"(define-values"
"(default-load-handler)"
"(lambda(path_1 expected-mod_2)"
"(begin"
"(if(path-string? path_1)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_1)))"
"(if(let-values(((or-part_3)(not expected-mod_2)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(symbol? expected-mod_2)))"
"(if or-part_4"
" or-part_4"
"(if(pair? expected-mod_2)"
"(if(list? expected-mod_2)"
"(if(let-values(((or-part_5)(not(car expected-mod_2))))"
"(if or-part_5 or-part_5(symbol?(car expected-mod_2))))"
"(andmap2 symbol?(cdr expected-mod_2))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_2)))"
"(if expected-mod_2"
"(let-values()"
"((let-values(((path1_6) path_1)"
"((temp2_7)"
"(lambda(i_8)"
"(begin"
"                             (if (regexp-match? '#rx\"[.]zo$\" path_1) (void) (let-values () (port-count-lines! i_8)))"
"(with-module-reading-parameterization+delay-source"
" path_1"
"(lambda()"
"(let-values(((c62128_9)(linklet-directory-start i_8)))"
"(if c62128_9"
"((lambda(pos_10)"
"(let-values(((b-pos_11)"
"(search-directory i_8 pos_10(encode-symbols expected-mod_2))))"
"(if b-pos_11"
"(let-values()"
"(begin"
"(file-position i_8 b-pos_11)"
"(let-values(((or-part_12)(cached-bundle i_8)))"
"(if or-part_12"
" or-part_12"
"(let-values(((v_13)(read i_8)))"
"(if(1/compiled-module-expression? v_13)"
"(lambda()((current-eval) v_13))"
"(error"
" 'default-load-handler"
"(string-append"
"                                                         \"expected a compiled module\\n\""
"                                                         \"  in: ~e\\n\""
"                                                         \"  found: ~e\")"
"(object-name i_8)"
" v_13)))))))"
"(if(pair? expected-mod_2)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                                (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_8)))))))"
" c62128_9)"
"(let-values(((c62129_14)(cached-bundle i_8)))"
"(if c62129_14"
"((lambda(thunk_15) thunk_15) c62129_14)"
"(if(if(pair? expected-mod_2)(not(car expected-mod_2)) #f)"
"(let-values() void)"
"(let-values()"
"(let-values(((s_16)(1/read-syntax(object-name i_8) i_8)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_16)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                                    \"expected a `module' declaration;\\n\""
"                                                                    \" found end-of-file\\n\""
"                                                                    \"  in: ~e\")"
"(object-name i_8)))"
"(void))"
"(values))))"
"(let-values(((m-s_17)(check-module-form s_16 path_1)))"
"(let-values(((s2_18)(1/read-syntax(object-name i_8) i_8)))"
"(begin"
"(if(eof-object? s2_18)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                            \"expected a `module' declaration;\\n\""
"                                                            \" found an extra form\\n\""
"                                                            \"  in: ~e\\n\""
"                                                            \"  found: ~.s\")"
"(object-name i_8)"
" s2_18)))"
"(lambda()((current-eval) m-s_17)))))))))))))))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 #f #f path1_6 temp2_7)"
"(call-with-input-file*63.1 path1_6 temp2_7)))))"
"(let-values()"
"(let-values(((add-top-interaction_19)"
"(lambda(s_20)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_20))))))"
"(let-values(((path3_21) path_1)"
"((temp4_22)"
"(lambda(i_23)"
"(begin"
"(port-count-lines! i_23)"
"((letrec-values(((loop_24)"
"(lambda(vals_25)"
"(let-values(((s_26)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t)"
"(let-values()"
"(1/read-syntax(object-name i_23) i_23)))))"
"(if(eof-object? s_26)"
"(apply values vals_25)"
"(loop_24"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_19 s_26)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_27"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_27)))))))))"
" loop_24)"
"(list(void)))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 #f #f path3_21 temp4_22)"
"(call-with-input-file*63.1 path3_21 temp4_22)))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_28 tag_29)"
"(let-values(((version-length_30)(string-length(version))))"
"(if(equal?(peek-byte i_28)(char->integer '#\\#))"
"(if(equal?(peek-byte i_28 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_28 2) version-length_30)"
"(if(equal?(peek-bytes version-length_30 3 i_28)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_28(+ 3 version-length_30))(char->integer tag_29))(+ version-length_30 4) #f)"
" #f)"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_31)(let-values(((pos_32)(linklet-bundle-or-directory-start i_31 '#\\D)))(if pos_32(+ pos_32 4) #f))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_33)"
"(let-values(((pos_34)(linklet-bundle-or-directory-start i_33 '#\\B)))"
"(let-values(((hash-code_35)(if pos_34(peek-bytes 20 pos_34 i_33) #f)))"
"(if(bytes? hash-code_35)"
"(if(= 20(bytes-length hash-code_35))"
"(if(let-values(((vec_36 len_37)"
"(let-values(((vec_38) hash-code_35))"
"(begin"
"(if(bytes? vec_38)(void)(let-values()(in-bytes vec_38)))"
"(values vec_38(bytes-length vec_38))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_39)"
"(lambda(result_40 pos_41)"
"(if(unsafe-fx< pos_41 len_37)"
"(let-values(((c_42)(bytes-ref vec_36 pos_41)))"
"(if #t"
"(let-values(((result_43)"
"(let-values(((result_44) result_40))"
"(let-values(((result_45)"
"(let-values()"
"(let-values()(not(eq? c_42 0))))))"
"(values result_45)))))"
"(if(if #t(not((lambda x_46 result_43) c_42)) #f)"
"(for-loop_39 result_43(unsafe-fx+ 1 pos_41))"
" result_43))"
" result_40))"
" result_40))))"
" for-loop_39)"
" #f"
" 0)))"
" hash-code_35"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_47)"
"(let-values(((c62130_48)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_47)))))"
"(if c62130_48"
"((lambda(declare-module_49)"
"(lambda()"
"(let-values(((...oot/load-handler.rkt:148:11_50) declare-module_49)((temp5_51)(1/current-namespace)))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...oot/load-handler.rkt:148:11_50"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list temp5_51)))))"
" c62130_48)"
"(let-values() #f)))))"
"(define-values"
"(read-number)"
"(lambda(i_52)"
"(let-values(((read-byte/not-eof_53)"
"(lambda(i_54)(let-values(((v_55)(read-byte i_54)))(if(eof-object? v_55) 0 v_55)))))"
"(bitwise-ior"
"(read-byte/not-eof_53 i_52)"
"(arithmetic-shift(read-byte/not-eof_53 i_52) 8)"
"(arithmetic-shift(read-byte/not-eof_53 i_52) 16)"
"(arithmetic-shift(read-byte/not-eof_53 i_52) 24)))))"
"(define-values"
"(search-directory)"
"(lambda(i_56 pos_57 bstr_58)"
"(if(zero? pos_57)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_56 pos_57)(values))))"
"(let-values(((name-len_59)(read-number i_56)))"
"(let-values(((v_60)(read-bytes name-len_59 i_56)))"
"(begin"
"(if(if(bytes? v_60)(=(bytes-length v_60) name-len_59) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                      \"failure getting submodule path\\n\""
"                      \"  in: ~e\\n\""
"                      \"  at position: ~a\\n\""
"                      \"  expected bytes: ~a\\n\""
"                      \"  read bytes: ~e\")"
"(object-name i_56)"
" pos_57"
" name-len_59"
" v_60)))"
"(if(bytes=? bstr_58 v_60)"
"(let-values()(read-number i_56))"
"(if(bytes<? bstr_58 v_60)"
"(let-values()"
"(begin(read-number i_56)(read-number i_56)(search-directory i_56(read-number i_56) bstr_58)))"
"(let-values()"
"(begin"
"(read-number i_56)"
"(read-number i_56)"
"(read-number i_56)"
"(search-directory i_56(read-number i_56) bstr_58)))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_61)"
"(if(symbol? expected-mod_61)"
"      (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(alt-reverse"
"(let-values(((lst_62)(cdr expected-mod_61)))"
"(begin"
"(if(list? lst_62)(void)(let-values()(in-list lst_62)))"
"((letrec-values(((for-loop_63)"
"(lambda(fold-var_64 lst_65)"
"(if(pair? lst_65)"
"(let-values(((s_66)(unsafe-car lst_65)))"
"(if #t"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_68) fold-var_64))"
"(let-values(((fold-var_69)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_70)"
"(string->bytes/utf-8"
"(symbol->string s_66))))"
"(let-values(((len_71)"
"(bytes-length bstr_70)))"
"(if(< len_71 255)"
"(let-values()"
"(bytes-append"
"(bytes len_71)"
" bstr_70))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_71"
" 4"
" #f"
" #f)"
" bstr_70))))))"
" fold-var_68))))"
"(values fold-var_69)))))"
"(if #t(for-loop_63 fold-var_67(unsafe-cdr lst_65)) fold-var_67))"
" fold-var_64))"
" fold-var_64))))"
" for-loop_63)"
" null"
" lst_62)))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_72 thunk_73)"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_72))"
"(let-values()(with-module-reading-parameterization thunk_73)))"
"(with-module-reading-parameterization thunk_73))))"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 #f(lambda() #f))))"
"(if v_6(cons a_5 v_6) #f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                        (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                        (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
"                                                                     (path-add-extension file_36 #\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
"                                                                       (path-add-extension alt-file_37 #\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68) alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c62332_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c62332_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c62332_71)"
"(let-values(((c62333_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c62333_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c62333_73)"
"(let-values(((c62334_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c62334_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c62334_75)"
"(let-values(((c62335_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c62335_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c62335_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) #f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) #f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box"
"(cons(cons p_92 v_93)(let-values(((or-part_97) l_96))(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" 0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_110)"
"(1/syntax-line stx_110)"
"(1/syntax-column stx_110)"
"(1/syntax-position stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) #f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1 from-namespace_115)"
" #f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 #f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 #t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
"                                                                       (if (equal? (car l_137) \"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_133 \".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"                                               (if (let-values (((or-part_138) (equal? (cadr s_126) \".\")))"
"                                                     (if or-part_138 or-part_138 (equal? (cadr s_126) \"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
"                                                             (if (equal? (cadr s_126) \"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 #f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" #f))))"
" #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(namespace-module-registry$1(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" #f)"
" #f)))"
"(if or-part_159"
" or-part_159"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_157"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_160 0(- len_161 3))"
"                                                                    \".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
"                                                                   (path-replace-extension p_162 #\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((v_166)(cadr s_126)))"
"                                                                 (if (let-values (((or-part_167) (equal? v_166 \".\")))"
"                                                                       (if or-part_167 or-part_167 (equal? v_166 \"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
"                                                                                                    \".\")))"
"(if or-part_170"
" or-part_170"
"                                                                                         (equal? (cadr s_126) \"..\")))"
" relto_127"
" #f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
"                                                                                                  \"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_126) \"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) #f))"
" #f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" #f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_176"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" #t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" #f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
"                                                                                    (if (string=? s_182 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_182 \"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" #f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_185)"
" #f)"
" #t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" #t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" #t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_173 (car s-parsed_173) \"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 0)"
"(simplify-path(cleanse-path s-parsed_173) #f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 3)"
"                                                                           (path-replace-extension name_194 #\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" #f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" #f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" #f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" #f)"
"(cons #f subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(1/eval"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))"
"(lambda(e_218 ns_219)"
"(if(eq? ns_219(1/current-namespace))"
"(c_217 e_218 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_219)"
"(let-values()(c_217 e_218 #t)))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(1/compile s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_222 in_223)"
"(begin"
"(if(input-port? in_223)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_223)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_222 in_223))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader5_1)"
"(lambda(mod-path3_2 sym4_3 fail-thunk1_4 fail-thunk2_5)"
"(let-values(((mod-path_6) mod-path3_2))"
"(let-values(((sym_7) sym4_3))"
"(let-values(((fail-thunk_8)(if fail-thunk2_5 fail-thunk1_4 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_9)(namespace-root-namespace(1/current-namespace))))"
"(let-values(((proc_10)"
"(if root-ns_9"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_9)"
"(let-values()(1/dynamic-require mod-path_6 sym_7 fail-thunk_8)))"
"(1/dynamic-require mod-path_6 sym_7 fail-thunk_8))))"
"(if(if(eq? sym_7 'read-syntax)"
"(if(procedure? proc_10)(procedure-arity-includes? proc_10 6) #f)"
" #f)"
"(let-values()"
"(lambda(name_11 input_12 mod-s_13 line_14 column_15 position_16)"
"(proc_10"
" name_11"
" input_12"
"(reader-syntax->syntax mod-s_13)"
" line_14"
" column_15"
" position_16)))"
"(let-values() proc_10)))))))))))"
"(case-lambda"
"((mod-path_17 sym_18)(dynamic-require-reader5_1 mod-path_17 sym_18 #f #f))"
"((mod-path_19 sym_20 fail-thunk1_21)(dynamic-require-reader5_1 mod-path_19 sym_20 fail-thunk1_21 #t)))))"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_3 disarmed-s_4 formals_5 bodys_6 ctx_7 log-renames-tag_8)"
"(let-values(((sc_9)(new-scope 'local)))"
"(let-values(((phase_10)(expand-context-phase ctx_7)))"
"(let-values(((ids_11)(parse-and-flatten-formals formals_5 sc_9 disarmed-s_4)))"
"(let-values((()"
"(begin"
"(let-values(((...nder/expand/expr.rkt:34:2_19) check-no-duplicate-ids10.1)"
"((ids30_20) ids_11)"
"((phase31_21) phase_10)"
"((s32_22) s_3)"
"                                       ((temp33_23) \"argument name\"))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 temp33_23 #t ids30_20 phase31_21 s32_22 #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:34:2_19"
" keyword-procedure-extract"
" '(#:what)"
" 5)"
" '(#:what)"
"(list temp33_23)"
" ids30_20"
" phase31_21"
" s32_22)))"
"(values))))"
"(let-values(((counter_12)(root-expand-context-counter ctx_7)))"
"(let-values(((keys_13)"
"(alt-reverse"
"(let-values(((lst_24) ids_11))"
"(begin"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27)"
"(if(pair? lst_27)"
"(let-values(((id_28)(unsafe-car lst_27)))"
"(if #t"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30) fold-var_26))"
"(let-values(((fold-var_31)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:39:17_32)"
" add-local-binding!35.1)"
"((id34_33)"
" id_28)"
"((phase35_34)"
" phase_10)"
"((counter36_35)"
" counter_12)"
"((s37_36)"
" s_3))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" s37_36"
" #t"
" id34_33"
" phase35_34"
" counter36_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:39:17_32"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list s37_36)"
" id34_33"
" phase35_34"
" counter36_35))))"
" fold-var_30))))"
"(values fold-var_31)))))"
"(if #t"
"(for-loop_25 fold-var_29(unsafe-cdr lst_27))"
" fold-var_29))"
" fold-var_26))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_24))))))"
"(let-values(((body-env_14)"
"(let-values(((lst_37) keys_13)((lst_38) ids_11))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"(if(list? lst_38)(void)(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(env_40 lst_41 lst_42)"
"(if(if(pair? lst_41)(pair? lst_42) #f)"
"(let-values(((key_43)(unsafe-car lst_41))"
"((id_44)(unsafe-car lst_42)))"
"(if(if #t #t #f)"
"(let-values(((env_45)"
"(let-values(((env_46) env_40))"
"(let-values(((env_47)"
"(let-values()"
"(env-extend"
" env_46"
" key_43"
"(local-variable1.1"
" id_44)))))"
"(values env_47)))))"
"(if(if #t #t #f)"
"(for-loop_39"
" env_45"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42))"
" env_45))"
" env_40))"
" env_40))))"
" for-loop_39)"
"(expand-context-env ctx_7)"
" lst_37"
" lst_38)))))"
"(let-values(((sc-formals_15)(add-scope formals_5 sc_9)))"
"(let-values(((sc-bodys_16)"
"(alt-reverse"
"(let-values(((lst_48) bodys_6))"
"(begin"
"(if(list? lst_48)(void)(let-values()(in-list lst_48)))"
"((letrec-values(((for-loop_49)"
"(lambda(fold-var_50 lst_51)"
"(if(pair? lst_51)"
"(let-values(((body_52)(unsafe-car lst_51)))"
"(if #t"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54) fold-var_50))"
"(let-values(((fold-var_55)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_52"
" sc_9))"
" fold-var_54))))"
"(values fold-var_55)))))"
"(if #t"
"(for-loop_49 fold-var_53(unsafe-cdr lst_51))"
" fold-var_53))"
" fold-var_50))"
" fold-var_50))))"
" for-loop_49)"
" null"
" lst_48))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_56)(expand-context-observer ctx_7)))"
"(if obs_56"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_56"
" log-renames-tag_8"
" sc-formals_15"
"(datum->syntax$1 #f sc-bodys_16)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_17)"
"(let-values(((the-struct_57) ctx_7))"
"(if(expand-context? the-struct_57)"
"(let-values(((env38_58) body-env_14)"
"((scopes39_59)(cons sc_9(expand-context-scopes ctx_7)))"
"((all-scopes-stx40_60)"
"(add-scope(root-expand-context-all-scopes-stx ctx_7) sc_9)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_57)"
"(root-expand-context-post-expansion-scope the-struct_57)"
"(root-expand-context-top-level-bind-scope the-struct_57)"
" all-scopes-stx40_60"
"(root-expand-context-use-site-scopes the-struct_57)"
"(root-expand-context-defined-syms the-struct_57)"
"(root-expand-context-frame-id the-struct_57)"
"(root-expand-context-counter the-struct_57)"
"(root-expand-context-lift-key the-struct_57)"
"(expand-context-context the-struct_57)"
"(expand-context-phase the-struct_57)"
"(expand-context-namespace the-struct_57)"
" env38_58"
"(expand-context-post-expansion-scope-action the-struct_57)"
" scopes39_59"
"(expand-context-def-ctx-scopes the-struct_57)"
"(expand-context-reference-records the-struct_57)"
"(expand-context-only-immediate? the-struct_57)"
"(expand-context-just-once? the-struct_57)"
"(expand-context-module-begin-k the-struct_57)"
"(expand-context-need-eventually-defined the-struct_57)"
"(expand-context-allow-unbound? the-struct_57)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_57)"
"(expand-context-stops the-struct_57)"
"(expand-context-current-introduction-scopes the-struct_57)"
"(expand-context-declared-submodule-names the-struct_57)"
"(expand-context-lifts the-struct_57)"
"(expand-context-lift-envs the-struct_57)"
"(expand-context-module-lifts the-struct_57)"
"(expand-context-require-lifts the-struct_57)"
"(expand-context-to-module-lifts the-struct_57)"
"(expand-context-requires+provides the-struct_57)"
"(expand-context-name the-struct_57)"
"(expand-context-observer the-struct_57)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_57)))))"
"(let-values(((exp-body_18)"
"(let-values(((...nder/expand/expr.rkt:53:19_61) expand-body30.1)"
"((sc-bodys41_62) sc-bodys_16)"
"((body-ctx42_63) body-ctx_17)"
"((s43_64) s_3)"
"((disarmed-s44_65) disarmed-s_4))"
"(if(variable-reference-constant?(#%variable-reference expand-body30.1))"
"(expand-body28.1"
" disarmed-s44_65"
" s43_64"
" #f"
" #f"
" #f"
" #f"
" sc-bodys41_62"
" body-ctx42_63)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:53:19_61"
" keyword-procedure-extract"
" '(#:disarmed-source #:source)"
" 4)"
" '(#:disarmed-source #:source)"
"(list disarmed-s44_65 s43_64)"
" sc-bodys41_62"
" body-ctx42_63)))))"
"(values sc-formals_15 exp-body_18)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_66)"
"(lambda(s_67 ctx_68)"
"(let-values((()"
"(begin"
"(let-values(((obs_88)(expand-context-observer ctx_68)))"
"(if obs_88"
"(let-values()(if #t(let-values()(call-expand-observe obs_88 'prim-lambda))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_69)(syntax-disarm$1 s_67)))"
"(let-values(((ok?_70 lambda45_71 formals46_72 body47_73)"
"(let-values(((s_89) disarmed-s_69))"
"(if(if #t #t #f)"
"(let-values(((orig-s_90) s_89))"
"(let-values(((lambda45_91 formals46_92 body47_93)"
"(let-values(((s_94)(if(syntax?$1 s_89)(syntax-e$1 s_89) s_89)))"
"(if(pair? s_94)"
"(let-values(((lambda48_95)(let-values(((s_98)(car s_94))) s_98))"
"((formals49_96 body50_97)"
"(let-values(((s_99)(cdr s_94)))"
"(let-values(((s_100)"
"(if(syntax?$1 s_99)"
"(syntax-e$1 s_99)"
" s_99)))"
"(if(pair? s_100)"
"(let-values(((formals51_101)"
"(let-values(((s_103)(car s_100)))"
" s_103))"
"((body52_102)"
"(let-values(((s_104)(cdr s_100)))"
"(let-values(((s_105)"
"(if(syntax?$1 s_104)"
"(syntax-e$1 s_104)"
" s_104)))"
"(let-values(((flat-s_106)"
"(to-syntax-list.1"
" s_105)))"
"(if(not flat-s_106)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_90))"
"(if(null? flat-s_106)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_90))"
"(let-values()"
" flat-s_106))))))))"
"(values formals51_101 body52_102))"
"(raise-syntax-error$1"
" #f"
"                                                                     \"bad syntax\""
" orig-s_90))))))"
"(values lambda48_95 formals49_96 body50_97))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_90)))))"
"(values #t lambda45_91 formals46_92 body47_93)))"
"(values #f #f #f #f)))))"
"(let-values(((formals_86 body_87)"
"(lambda-clause-expander s_67 disarmed-s_69 formals46_72 body47_73 ctx_68 'lambda-renames)))"
"(let-values(((s53_107) s_67)"
"((disarmed-s54_108) disarmed-s_69)"
"((temp55_109)(list(get-lambda_66 ctx_68 lambda45_71) formals_86 body_87)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s53_107 disarmed-s54_108 temp55_109)"
"(rebuild101.1 s53_107 disarmed-s54_108 temp55_109))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_110 lam-id_111) lam-id_111))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_112 lam-id_113)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_112))"
" 'lambda"
" lam-id_113"
" lam-id_113)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_114 ctx_115)"
"(let-values((()"
"(begin"
"(let-values(((obs_146)(expand-context-observer ctx_115)))"
"(if obs_146"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_146 'prim-case-lambda))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_116)(syntax-disarm$1 s_114)))"
"(let-values(((ok?_117 case-lambda56_118 formals57_119 body58_120)"
"(let-values(((s_147) disarmed-s_116))"
"(if(if #t #t #f)"
"(let-values(((orig-s_148) s_147))"
"(let-values(((case-lambda56_149 formals57_150 body58_151)"
"(let-values(((s_152)(if(syntax?$1 s_147)(syntax-e$1 s_147) s_147)))"
"(if(pair? s_152)"
"(let-values(((case-lambda59_153)"
"(let-values(((s_156)(car s_152))) s_156))"
"((formals60_154 body61_155)"
"(let-values(((s_157)(cdr s_152)))"
"(let-values(((s_158)"
"(if(syntax?$1 s_157)"
"(syntax-e$1 s_157)"
" s_157)))"
"(let-values(((flat-s_159)(to-syntax-list.1 s_158)))"
"(if(not flat-s_159)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_148))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_148))"
"(let-values()"
"(let-values(((formals_160 body_161)"
"(let-values(((lst_162)"
" flat-s_159))"
"(begin"
"(if(list? lst_162)"
"(void)"
"(let-values()"
"(in-list lst_162)))"
"((letrec-values(((for-loop_163)"
"(lambda(formals_164"
" body_165"
" lst_166)"
"(if(pair?"
" lst_166)"
"(let-values(((s_167)"
"(unsafe-car"
" lst_166)))"
"(if #t"
"(let-values(((formals_168"
" body_169)"
"(let-values(((formals_170)"
" formals_164)"
"((body_171)"
" body_165))"
"(let-values(((formals_172"
" body_173)"
"(let-values()"
"(let-values(((formals71_174"
" body72_175)"
"(let-values()"
"(let-values(((s_176)"
"(if(syntax?$1"
" s_167)"
"(syntax-e$1"
" s_167)"
" s_167)))"
"(if(pair?"
" s_176)"
"(let-values(((formals62_177)"
"(let-values(((s_179)"
"(car"
" s_176)))"
" s_179))"
"((body63_178)"
"(let-values(((s_180)"
"(cdr"
" s_176)))"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_180)"
"(syntax-e$1"
" s_180)"
" s_180)))"
"(let-values(((flat-s_182)"
"(to-syntax-list.1"
" s_181)))"
"(if(not"
" flat-s_182)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_148))"
"(if(null?"
" flat-s_182)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                      \"bad syntax\""
" orig-s_148))"
"(let-values()"
" flat-s_182))))))))"
"(values"
" formals62_177"
" body63_178))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_148))))))"
"(values"
"(cons"
" formals71_174"
" formals_170)"
"(cons"
" body72_175"
" body_171))))))"
"(values"
" formals_172"
" body_173)))))"
"(if #t"
"(for-loop_163"
" formals_168"
" body_169"
"(unsafe-cdr"
" lst_166))"
"(values"
" formals_168"
" body_169)))"
"(values"
" formals_164"
" body_165)))"
"(values"
" formals_164"
" body_165)))))"
" for-loop_163)"
" null"
" null"
" lst_162)))))"
"(values"
"(alt-reverse formals_160)"
"(alt-reverse body_161)))))))))))"
"(values case-lambda59_153 formals60_154 body61_155))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_148)))))"
"(values #t case-lambda56_149 formals57_150 body58_151)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_133 case-lambda64_134 clause65_135)"
"(let-values(((s_183) disarmed-s_116))"
"(if(if #t #t #f)"
"(let-values(((orig-s_184) s_183))"
"(let-values(((case-lambda64_185 clause65_186)"
"(let-values(((s_187)(if(syntax?$1 s_183)(syntax-e$1 s_183) s_183)))"
"(if(pair? s_187)"
"(let-values(((case-lambda66_188)"
"(let-values(((s_190)(car s_187))) s_190))"
"((clause67_189)"
"(let-values(((s_191)(cdr s_187)))"
"(let-values(((s_192)"
"(if(syntax?$1 s_191)"
"(syntax-e$1 s_191)"
" s_191)))"
"(let-values(((flat-s_193)"
"(to-syntax-list.1 s_192)))"
"(if(not flat-s_193)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_184))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_184))"
"(let-values() flat-s_193))))))))"
"(values case-lambda66_188 clause67_189))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_184)))))"
"(values #t case-lambda64_185 clause65_186)))"
"(values #f #f #f)))))"
"(let-values(((s68_194) s_114)"
"((disarmed-s69_195) disarmed-s_116)"
"((temp70_196)"
"(list*"
" case-lambda56_118"
"(alt-reverse"
"(let-values(((lst_197) formals57_119)((lst_198) body58_120)((lst_199) clause65_135))"
"(begin"
"(if(list? lst_197)(void)(let-values()(in-list lst_197)))"
"(if(list? lst_198)(void)(let-values()(in-list lst_198)))"
"(if(list? lst_199)(void)(let-values()(in-list lst_199)))"
"((letrec-values(((for-loop_200)"
"(lambda(fold-var_201 lst_202 lst_203 lst_204)"
"(if(if(pair? lst_202)"
"(if(pair? lst_203)(pair? lst_204) #f)"
" #f)"
"(let-values(((formals_205)(unsafe-car lst_202))"
"((bodys_206)(unsafe-car lst_203))"
"((clause_207)(unsafe-car lst_204)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_208)"
"(let-values(((fold-var_209) fold-var_201))"
"(let-values(((fold-var_210)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_213)"
"(expand-context-observer"
" ctx_115)))"
"(if obs_213"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_213"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-formals_211"
" exp-body_212)"
"(lambda-clause-expander"
" s_114"
" disarmed-s_116"
" formals_205"
" bodys_206"
" ctx_115"
" 'case-lambda-renames)))"
"(let-values(((clause73_214)"
" clause_207)"
"((clause74_215)"
" clause_207)"
"((temp75_216)"
"(list"
" exp-formals_211"
" exp-body_212)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" clause73_214"
" clause74_215"
" temp75_216)"
"(rebuild101.1"
" clause73_214"
" clause74_215"
" temp75_216))))))"
" fold-var_209))))"
"(values fold-var_210)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_200"
" fold-var_208"
"(unsafe-cdr lst_202)"
"(unsafe-cdr lst_203)"
"(unsafe-cdr lst_204))"
" fold-var_208))"
" fold-var_201))"
" fold-var_201))))"
" for-loop_200)"
" null"
" lst_197"
" lst_198"
" lst_199)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s68_194 disarmed-s69_195 temp70_196)"
"(rebuild101.1 s68_194 disarmed-s69_195 temp70_196))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_217 sc_218 s_219)"
"((letrec-values(((loop_220)"
"(lambda(formals_221)"
"(if(identifier? formals_221)"
"(let-values()(list(add-scope formals_221 sc_218)))"
"(if(syntax?$1 formals_221)"
"(let-values()"
"(let-values(((p_222)(syntax-e$1 formals_221)))"
"(if(pair? p_222)"
"(let-values()(loop_220 p_222))"
"(if(null? p_222)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_219 p_222))))))"
"(if(pair? formals_221)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_221))"
"(void)"
"(let-values()"
"                                      (raise-syntax-error$1 #f \"not an identifier\" s_219 (car formals_221))))"
"(cons(add-scope(car formals_221) sc_218)(loop_220(cdr formals_221)))))"
"(if(null? formals_221)"
"(let-values() null)"
"(let-values()"
"                                  (raise-syntax-error$1 \"bad argument sequence\" s_219 all-formals_217)))))))))"
" loop_220)"
" all-formals_217)))"
"(define-values"
"(lifted/1.1$1)"
"(make-required 'make-let-values-form(case-lambda((self_223)(apply missing-kw self_223 null))) #f #f))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_224"
" rec?3_225"
" rec?8_226"
" renames-log-tag5_227"
" renames-log-tag10_228"
" split-by-reference?4_229"
" split-by-reference?9_230"
" syntaxes?2_231"
" syntaxes?7_232)"
"(let-values(((log-tag_233) log-tag1_224))"
"(let-values(((syntaxes?_234)(if syntaxes?7_232 syntaxes?2_231 #f)))"
"(let-values(((rec?_235)(if rec?8_226 rec?3_225 #f)))"
"(let-values(((split-by-reference?_236)(if split-by-reference?9_230 split-by-reference?4_229 #f)))"
"(let-values(((renames-log-tag_237)(if renames-log-tag10_228 renames-log-tag5_227 'let-renames)))"
"(let-values()"
"(lambda(s_238 ctx_239)"
"(let-values((()"
"(begin"
"(let-values(((obs_303)(expand-context-observer ctx_239)))"
"(if obs_303"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_303 log-tag_233))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_240)(syntax-disarm$1 s_238)))"
"(let-values(((ok?_241"
" letrec-syntaxes+values76_242"
" id:trans77_243"
" trans-rhs78_244"
" id:val79_245"
" val-rhs80_246"
" body81_247)"
"(let-values(((s_304) disarmed-s_240))"
"(if(if syntaxes?_234 #t #f)"
"(let-values(((orig-s_305) s_304))"
"(let-values(((letrec-syntaxes+values76_306"
" id:trans77_307"
" trans-rhs78_308"
" id:val79_309"
" val-rhs80_310"
" body81_311)"
"(let-values(((s_312)"
"(if(syntax?$1 s_304)(syntax-e$1 s_304) s_304)))"
"(if(pair? s_312)"
"(let-values(((letrec-syntaxes+values82_313)"
"(let-values(((s_319)(car s_312))) s_319))"
"((id:trans83_314"
" trans-rhs84_315"
" id:val85_316"
" val-rhs86_317"
" body87_318)"
"(let-values(((s_320)(cdr s_312)))"
"(let-values(((s_321)"
"(if(syntax?$1 s_320)"
"(syntax-e$1 s_320)"
" s_320)))"
"(if(pair? s_321)"
"(let-values(((id:trans88_322"
" trans-rhs89_323)"
"(let-values(((s_327)"
"(car"
" s_321)))"
"(let-values(((s_328)"
"(if(syntax?$1"
" s_327)"
"(syntax-e$1"
" s_327)"
" s_327)))"
"(let-values(((flat-s_329)"
"(to-syntax-list.1"
" s_328)))"
"(if(not flat-s_329)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_305))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_305))"
"(let-values()"
"(let-values(((id:trans_330"
" trans-rhs_331)"
"(let-values(((lst_332)"
" flat-s_329))"
"(begin"
"(if(list?"
" lst_332)"
"(void)"
"(let-values()"
"(in-list"
" lst_332)))"
"((letrec-values(((for-loop_333)"
"(lambda(id:trans_334"
" trans-rhs_335"
" lst_336)"
"(if(pair?"
" lst_336)"
"(let-values(((s_337)"
"(unsafe-car"
" lst_336)))"
"(if #t"
"(let-values(((id:trans_338"
" trans-rhs_339)"
"(let-values(((id:trans_340)"
" id:trans_334)"
"((trans-rhs_341)"
" trans-rhs_335))"
"(let-values(((id:trans_342"
" trans-rhs_343)"
"(let-values()"
"(let-values(((id:trans119_344"
" trans-rhs120_345)"
"(let-values()"
"(let-values(((s_346)"
"(if(syntax?$1"
" s_337)"
"(syntax-e$1"
" s_337)"
" s_337)))"
"(if(pair?"
" s_346)"
"(let-values(((id:trans93_347)"
"(let-values(((s_349)"
"(car"
" s_346)))"
"(let-values(((s_350)"
"(if(syntax?$1"
" s_349)"
"(syntax-e$1"
" s_349)"
" s_349)))"
"(let-values(((flat-s_351)"
"(to-syntax-list.1"
" s_350)))"
"(if(not"
" flat-s_351)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_305))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_305))"
"(let-values()"
"(let-values(((id:trans_352)"
"(let-values(((lst_353)"
" flat-s_351))"
"(begin"
"(if(list?"
" lst_353)"
"(void)"
"(let-values()"
"(in-list"
" lst_353)))"
"((letrec-values(((for-loop_354)"
"(lambda(id:trans_355"
" lst_356)"
"(if(pair?"
" lst_356)"
"(let-values(((s_357)"
"(unsafe-car"
" lst_356)))"
"(if #t"
"(let-values(((id:trans_358)"
"(let-values(((id:trans_359)"
" id:trans_355))"
"(let-values(((id:trans_360)"
"(let-values()"
"(let-values(((id:trans121_361)"
"(let-values()"
"(if(let-values(((or-part_362)"
"(if(syntax?$1"
" s_357)"
"(symbol?"
"(syntax-e$1"
" s_357))"
" #f)))"
"(if or-part_362"
" or-part_362"
"(symbol?"
" s_357)))"
" s_357"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_305"
" s_357)))))"
"(cons"
" id:trans121_361"
" id:trans_359)))))"
"(values"
" id:trans_360)))))"
"(if #t"
"(for-loop_354"
" id:trans_358"
"(unsafe-cdr"
" lst_356))"
" id:trans_358))"
" id:trans_355))"
" id:trans_355))))"
" for-loop_354)"
" null"
" lst_353)))))"
"(alt-reverse"
" id:trans_352)))))))))"
"((trans-rhs94_348)"
"(let-values(((s_363)"
"(cdr"
" s_346)))"
"(let-values(((s_364)"
"(if(syntax?$1"
" s_363)"
"(syntax-e$1"
" s_363)"
" s_363)))"
"(if(pair?"
" s_364)"
"(let-values(((trans-rhs95_365)"
"(let-values(((s_366)"
"(car"
" s_364)))"
" s_366))"
"(()"
"(let-values(((s_367)"
"(cdr"
" s_364)))"
"(let-values(((s_368)"
"(if(syntax?$1"
" s_367)"
"(syntax-e$1"
" s_367)"
" s_367)))"
"(if(null?"
" s_368)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_305))))))"
"(values"
" trans-rhs95_365))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_305))))))"
"(values"
" id:trans93_347"
" trans-rhs94_348))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_305))))))"
"(values"
"(cons"
" id:trans119_344"
" id:trans_340)"
"(cons"
" trans-rhs120_345"
" trans-rhs_341))))))"
"(values"
" id:trans_342"
" trans-rhs_343)))))"
"(if #t"
"(for-loop_333"
" id:trans_338"
" trans-rhs_339"
"(unsafe-cdr"
" lst_336))"
"(values"
" id:trans_338"
" trans-rhs_339)))"
"(values"
" id:trans_334"
" trans-rhs_335)))"
"(values"
" id:trans_334"
" trans-rhs_335)))))"
" for-loop_333)"
" null"
" null"
" lst_332)))))"
"(values"
"(alt-reverse"
" id:trans_330)"
"(alt-reverse"
" trans-rhs_331))))))))))"
"((id:val90_324"
" val-rhs91_325"
" body92_326)"
"(let-values(((s_369)"
"(cdr"
" s_321)))"
"(let-values(((s_370)"
"(if(syntax?$1"
" s_369)"
"(syntax-e$1"
" s_369)"
" s_369)))"
"(if(pair? s_370)"
"(let-values(((id:val96_371"
" val-rhs97_372)"
"(let-values(((s_374)"
"(car"
" s_370)))"
"(let-values(((s_375)"
"(if(syntax?$1"
" s_374)"
"(syntax-e$1"
" s_374)"
" s_374)))"
"(let-values(((flat-s_376)"
"(to-syntax-list.1"
" s_375)))"
"(if(not"
" flat-s_376)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_305))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_305))"
"(let-values()"
"(let-values(((id:val_377"
" val-rhs_378)"
"(let-values(((lst_379)"
" flat-s_376))"
"(begin"
"(if(list?"
" lst_379)"
"(void)"
"(let-values()"
"(in-list"
" lst_379)))"
"((letrec-values(((for-loop_380)"
"(lambda(id:val_381"
" val-rhs_382"
" lst_383)"
"(if(pair?"
" lst_383)"
"(let-values(((s_384)"
"(unsafe-car"
" lst_383)))"
"(if #t"
"(let-values(((id:val_385"
" val-rhs_386)"
"(let-values(((id:val_387)"
" id:val_381)"
"((val-rhs_388)"
" val-rhs_382))"
"(let-values(((id:val_389"
" val-rhs_390)"
"(let-values()"
"(let-values(((id:val122_391"
" val-rhs123_392)"
"(let-values()"
"(let-values(((s_393)"
"(if(syntax?$1"
" s_384)"
"(syntax-e$1"
" s_384)"
" s_384)))"
"(if(pair?"
" s_393)"
"(let-values(((id:val99_394)"
"(let-values(((s_396)"
"(car"
" s_393)))"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_396)"
"(syntax-e$1"
" s_396)"
" s_396)))"
"(let-values(((flat-s_398)"
"(to-syntax-list.1"
" s_397)))"
"(if(not"
" flat-s_398)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_305))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_305))"
"(let-values()"
"(let-values(((id:val_399)"
"(let-values(((lst_400)"
" flat-s_398))"
"(begin"
"(if(list?"
" lst_400)"
"(void)"
"(let-values()"
"(in-list"
" lst_400)))"
"((letrec-values(((for-loop_401)"
"(lambda(id:val_402"
" lst_403)"
"(if(pair?"
" lst_403)"
"(let-values(((s_404)"
"(unsafe-car"
" lst_403)))"
"(if #t"
"(let-values(((id:val_405)"
"(let-values(((id:val_406)"
" id:val_402))"
"(let-values(((id:val_407)"
"(let-values()"
"(let-values(((id:val124_408)"
"(let-values()"
"(if(let-values(((or-part_409)"
"(if(syntax?$1"
" s_404)"
"(symbol?"
"(syntax-e$1"
" s_404))"
" #f)))"
"(if or-part_409"
" or-part_409"
"(symbol?"
" s_404)))"
" s_404"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_305"
" s_404)))))"
"(cons"
" id:val124_408"
" id:val_406)))))"
"(values"
" id:val_407)))))"
"(if #t"
"(for-loop_401"
" id:val_405"
"(unsafe-cdr"
" lst_403))"
" id:val_405))"
" id:val_402))"
" id:val_402))))"
" for-loop_401)"
" null"
" lst_400)))))"
"(alt-reverse"
" id:val_399)))))))))"
"((val-rhs100_395)"
"(let-values(((s_410)"
"(cdr"
" s_393)))"
"(let-values(((s_411)"
"(if(syntax?$1"
" s_410)"
"(syntax-e$1"
" s_410)"
" s_410)))"
"(if(pair?"
" s_411)"
"(let-values(((val-rhs101_412)"
"(let-values(((s_413)"
"(car"
" s_411)))"
" s_413))"
"(()"
"(let-values(((s_414)"
"(cdr"
" s_411)))"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(if(null?"
" s_415)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_305))))))"
"(values"
" val-rhs101_412))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_305))))))"
"(values"
" id:val99_394"
" val-rhs100_395))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_305))))))"
"(values"
"(cons"
" id:val122_391"
" id:val_387)"
"(cons"
" val-rhs123_392"
" val-rhs_388))))))"
"(values"
" id:val_389"
" val-rhs_390)))))"
"(if #t"
"(for-loop_380"
" id:val_385"
" val-rhs_386"
"(unsafe-cdr"
" lst_383))"
"(values"
" id:val_385"
" val-rhs_386)))"
"(values"
" id:val_381"
" val-rhs_382)))"
"(values"
" id:val_381"
" val-rhs_382)))))"
" for-loop_380)"
" null"
" null"
" lst_379)))))"
"(values"
"(alt-reverse"
" id:val_377)"
"(alt-reverse"
" val-rhs_378))))))))))"
"((body98_373)"
"(let-values(((s_416)"
"(cdr"
" s_370)))"
"(let-values(((s_417)"
"(if(syntax?$1"
" s_416)"
"(syntax-e$1"
" s_416)"
" s_416)))"
"(let-values(((flat-s_418)"
"(to-syntax-list.1"
" s_417)))"
"(if(not"
" flat-s_418)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_305))"
"(if(null?"
" flat-s_418)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_305))"
"(let-values()"
" flat-s_418))))))))"
"(values"
" id:val96_371"
" val-rhs97_372"
" body98_373))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_305))))))"
"(values"
" id:trans88_322"
" trans-rhs89_323"
" id:val90_324"
" val-rhs91_325"
" body92_326))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_305))))))"
"(values"
" letrec-syntaxes+values82_313"
" id:trans83_314"
" trans-rhs84_315"
" id:val85_316"
" val-rhs86_317"
" body87_318))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_305)))))"
"(values"
" #t"
" letrec-syntaxes+values76_306"
" id:trans77_307"
" trans-rhs78_308"
" id:val79_309"
" val-rhs80_310"
" body81_311)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_266 let-values102_267 id:val103_268 val-rhs104_269 body105_270)"
"(let-values(((s_419) disarmed-s_240))"
"(if(if(not syntaxes?_234) #t #f)"
"(let-values(((orig-s_420) s_419))"
"(let-values(((let-values102_421 id:val103_422 val-rhs104_423 body105_424)"
"(let-values(((s_425)"
"(if(syntax?$1 s_419)"
"(syntax-e$1 s_419)"
" s_419)))"
"(if(pair? s_425)"
"(let-values(((let-values106_426)"
"(let-values(((s_430)(car s_425))) s_430))"
"((id:val107_427 val-rhs108_428 body109_429)"
"(let-values(((s_431)(cdr s_425)))"
"(let-values(((s_432)"
"(if(syntax?$1 s_431)"
"(syntax-e$1 s_431)"
" s_431)))"
"(if(pair? s_432)"
"(let-values(((id:val110_433"
" val-rhs111_434)"
"(let-values(((s_436)"
"(car"
" s_432)))"
"(let-values(((s_437)"
"(if(syntax?$1"
" s_436)"
"(syntax-e$1"
" s_436)"
" s_436)))"
"(let-values(((flat-s_438)"
"(to-syntax-list.1"
" s_437)))"
"(if(not"
" flat-s_438)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_420))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_420))"
"(let-values()"
"(let-values(((id:val_439"
" val-rhs_440)"
"(let-values(((lst_441)"
" flat-s_438))"
"(begin"
"(if(list?"
" lst_441)"
"(void)"
"(let-values()"
"(in-list"
" lst_441)))"
"((letrec-values(((for-loop_442)"
"(lambda(id:val_443"
" val-rhs_444"
" lst_445)"
"(if(pair?"
" lst_445)"
"(let-values(((s_446)"
"(unsafe-car"
" lst_445)))"
"(if #t"
"(let-values(((id:val_447"
" val-rhs_448)"
"(let-values(((id:val_449)"
" id:val_443)"
"((val-rhs_450)"
" val-rhs_444))"
"(let-values(((id:val_451"
" val-rhs_452)"
"(let-values()"
"(let-values(((id:val125_453"
" val-rhs126_454)"
"(let-values()"
"(let-values(((s_455)"
"(if(syntax?$1"
" s_446)"
"(syntax-e$1"
" s_446)"
" s_446)))"
"(if(pair?"
" s_455)"
"(let-values(((id:val113_456)"
"(let-values(((s_458)"
"(car"
" s_455)))"
"(let-values(((s_459)"
"(if(syntax?$1"
" s_458)"
"(syntax-e$1"
" s_458)"
" s_458)))"
"(let-values(((flat-s_460)"
"(to-syntax-list.1"
" s_459)))"
"(if(not"
" flat-s_460)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_420))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_420))"
"(let-values()"
"(let-values(((id:val_461)"
"(let-values(((lst_462)"
" flat-s_460))"
"(begin"
"(if(list?"
" lst_462)"
"(void)"
"(let-values()"
"(in-list"
" lst_462)))"
"((letrec-values(((for-loop_463)"
"(lambda(id:val_464"
" lst_465)"
"(if(pair?"
" lst_465)"
"(let-values(((s_466)"
"(unsafe-car"
" lst_465)))"
"(if #t"
"(let-values(((id:val_467)"
"(let-values(((id:val_468)"
" id:val_464))"
"(let-values(((id:val_469)"
"(let-values()"
"(let-values(((id:val127_470)"
"(let-values()"
"(if(let-values(((or-part_471)"
"(if(syntax?$1"
" s_466)"
"(symbol?"
"(syntax-e$1"
" s_466))"
" #f)))"
"(if or-part_471"
" or-part_471"
"(symbol?"
" s_466)))"
" s_466"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_420"
" s_466)))))"
"(cons"
" id:val127_470"
" id:val_468)))))"
"(values"
" id:val_469)))))"
"(if #t"
"(for-loop_463"
" id:val_467"
"(unsafe-cdr"
" lst_465))"
" id:val_467))"
" id:val_464))"
" id:val_464))))"
" for-loop_463)"
" null"
" lst_462)))))"
"(alt-reverse"
" id:val_461)))))))))"
"((val-rhs114_457)"
"(let-values(((s_472)"
"(cdr"
" s_455)))"
"(let-values(((s_473)"
"(if(syntax?$1"
" s_472)"
"(syntax-e$1"
" s_472)"
" s_472)))"
"(if(pair?"
" s_473)"
"(let-values(((val-rhs115_474)"
"(let-values(((s_475)"
"(car"
" s_473)))"
" s_475))"
"(()"
"(let-values(((s_476)"
"(cdr"
" s_473)))"
"(let-values(((s_477)"
"(if(syntax?$1"
" s_476)"
"(syntax-e$1"
" s_476)"
" s_476)))"
"(if(null?"
" s_477)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_420))))))"
"(values"
" val-rhs115_474))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_420))))))"
"(values"
" id:val113_456"
" val-rhs114_457))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_420))))))"
"(values"
"(cons"
" id:val125_453"
" id:val_449)"
"(cons"
" val-rhs126_454"
" val-rhs_450))))))"
"(values"
" id:val_451"
" val-rhs_452)))))"
"(if #t"
"(for-loop_442"
" id:val_447"
" val-rhs_448"
"(unsafe-cdr"
" lst_445))"
"(values"
" id:val_447"
" val-rhs_448)))"
"(values"
" id:val_443"
" val-rhs_444)))"
"(values"
" id:val_443"
" val-rhs_444)))))"
" for-loop_442)"
" null"
" null"
" lst_441)))))"
"(values"
"(alt-reverse"
" id:val_439)"
"(alt-reverse"
" val-rhs_440))))))))))"
"((body112_435)"
"(let-values(((s_478)"
"(cdr"
" s_432)))"
"(let-values(((s_479)"
"(if(syntax?$1"
" s_478)"
"(syntax-e$1"
" s_478)"
" s_478)))"
"(let-values(((flat-s_480)"
"(to-syntax-list.1"
" s_479)))"
"(if(not"
" flat-s_480)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_420))"
"(if(null?"
" flat-s_480)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_420))"
"(let-values()"
" flat-s_480))))))))"
"(values"
" id:val110_433"
" val-rhs111_434"
" body112_435))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_420))))))"
"(values"
" let-values106_426"
" id:val107_427"
" val-rhs108_428"
" body109_429))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_420)))))"
"(values #t let-values102_421 id:val103_422 val-rhs104_423 body105_424)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_285)(new-scope 'local)))"
"(let-values(((phase_286)(expand-context-phase ctx_239)))"
"(let-values(((frame-id_287)(if split-by-reference?_236(make-reference-record) #f)))"
"(let-values(((trans-idss_288)"
"(alt-reverse"
"(let-values(((lst_481)(if syntaxes?_234 id:trans77_243 null)))"
"(begin"
"(if(list? lst_481)(void)(let-values()(in-list lst_481)))"
"((letrec-values(((for-loop_482)"
"(lambda(fold-var_483 lst_484)"
"(if(pair? lst_484)"
"(let-values(((ids_485)(unsafe-car lst_484)))"
"(if #t"
"(let-values(((fold-var_486)"
"(let-values(((fold-var_487)"
" fold-var_483))"
"(let-values(((fold-var_488)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_489)"
" ids_485))"
"(begin"
"(if(list?"
" lst_489)"
"(void)"
"(let-values()"
"(in-list"
" lst_489)))"
"((letrec-values(((for-loop_490)"
"(lambda(fold-var_491"
" lst_492)"
"(if(pair?"
" lst_492)"
"(let-values(((id_493)"
"(unsafe-car"
" lst_492)))"
"(if #t"
"(let-values(((fold-var_494)"
"(let-values(((fold-var_495)"
" fold-var_491))"
"(let-values(((fold-var_496)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_493"
" sc_285))"
" fold-var_495))))"
"(values"
" fold-var_496)))))"
"(if #t"
"(for-loop_490"
" fold-var_494"
"(unsafe-cdr"
" lst_492))"
" fold-var_494))"
" fold-var_491))"
" fold-var_491))))"
" for-loop_490)"
" null"
" lst_489)))))"
" fold-var_487))))"
"(values fold-var_488)))))"
"(if #t"
"(for-loop_482"
" fold-var_486"
"(unsafe-cdr lst_484))"
" fold-var_486))"
" fold-var_483))"
" fold-var_483))))"
" for-loop_482)"
" null"
" lst_481))))))"
"(let-values(((val-idss_289)"
"(alt-reverse"
"(let-values(((lst_497)(if syntaxes?_234 id:val79_245 id:val103_268)))"
"(begin"
"(if(list? lst_497)(void)(let-values()(in-list lst_497)))"
"((letrec-values(((for-loop_498)"
"(lambda(fold-var_499 lst_500)"
"(if(pair? lst_500)"
"(let-values(((ids_501)"
"(unsafe-car lst_500)))"
"(if #t"
"(let-values(((fold-var_502)"
"(let-values(((fold-var_503)"
" fold-var_499))"
"(let-values(((fold-var_504)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_505)"
" ids_501))"
"(begin"
"(if(list?"
" lst_505)"
"(void)"
"(let-values()"
"(in-list"
" lst_505)))"
"((letrec-values(((for-loop_506)"
"(lambda(fold-var_507"
" lst_508)"
"(if(pair?"
" lst_508)"
"(let-values(((id_509)"
"(unsafe-car"
" lst_508)))"
"(if #t"
"(let-values(((fold-var_510)"
"(let-values(((fold-var_511)"
" fold-var_507))"
"(let-values(((fold-var_512)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_509"
" sc_285))"
" fold-var_511))))"
"(values"
" fold-var_512)))))"
"(if #t"
"(for-loop_506"
" fold-var_510"
"(unsafe-cdr"
" lst_508))"
" fold-var_510))"
" fold-var_507))"
" fold-var_507))))"
" for-loop_506)"
" null"
" lst_505)))))"
" fold-var_503))))"
"(values"
" fold-var_504)))))"
"(if #t"
"(for-loop_498"
" fold-var_502"
"(unsafe-cdr lst_500))"
" fold-var_502))"
" fold-var_499))"
" fold-var_499))))"
" for-loop_498)"
" null"
" lst_497))))))"
"(let-values((()"
"(begin"
"(let-values(((temp116_513)(list trans-idss_288 val-idss_289))"
"((phase117_514) phase_286)"
"((s118_515) s_238))"
"(if(variable-reference-constant?"
"(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp116_513"
" phase117_514"
" s118_515"
" #f"
" #f)"
"(check-no-duplicate-ids10.1 temp116_513 phase117_514 s118_515)))"
"(values))))"
"(let-values(((counter_290)(root-expand-context-counter ctx_239)))"
"(let-values(((trans-keyss_291)"
"(alt-reverse"
"(let-values(((lst_516) trans-idss_288))"
"(begin"
"(if(list? lst_516)(void)(let-values()(in-list lst_516)))"
"((letrec-values(((for-loop_517)"
"(lambda(fold-var_518 lst_519)"
"(if(pair? lst_519)"
"(let-values(((ids_520)"
"(unsafe-car lst_519)))"
"(if #t"
"(let-values(((fold-var_521)"
"(let-values(((fold-var_522)"
" fold-var_518))"
"(let-values(((fold-var_523)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_524)"
" ids_520))"
"(begin"
"(if(list?"
" lst_524)"
"(void)"
"(let-values()"
"(in-list"
" lst_524)))"
"((letrec-values(((for-loop_525)"
"(lambda(fold-var_526"
" lst_527)"
"(if(pair?"
" lst_527)"
"(let-values(((id_528)"
"(unsafe-car"
" lst_527)))"
"(if #t"
"(let-values(((fold-var_529)"
"(let-values(((fold-var_530)"
" fold-var_526))"
"(let-values(((fold-var_531)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:156:27_532)"
" add-local-binding!35.1)"
"((id128_533)"
" id_528)"
"((phase129_534)"
" phase_286)"
"((counter130_535)"
" counter_290)"
"((s131_536)"
" s_238))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" s131_536"
" #t"
" id128_533"
" phase129_534"
" counter130_535)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:156:27_532"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" s131_536)"
" id128_533"
" phase129_534"
" counter130_535))))"
" fold-var_530))))"
"(values"
" fold-var_531)))))"
"(if #t"
"(for-loop_525"
" fold-var_529"
"(unsafe-cdr"
" lst_527))"
" fold-var_529))"
" fold-var_526))"
" fold-var_526))))"
" for-loop_525)"
" null"
" lst_524)))))"
" fold-var_522))))"
"(values"
" fold-var_523)))))"
"(if #t"
"(for-loop_517"
" fold-var_521"
"(unsafe-cdr lst_519))"
" fold-var_521))"
" fold-var_518))"
" fold-var_518))))"
" for-loop_517)"
" null"
" lst_516))))))"
"(let-values(((val-keyss_292)"
"(alt-reverse"
"(let-values(((lst_537) val-idss_289))"
"(begin"
"(if(list? lst_537)"
"(void)"
"(let-values()(in-list lst_537)))"
"((letrec-values(((for-loop_538)"
"(lambda(fold-var_539 lst_540)"
"(if(pair? lst_540)"
"(let-values(((ids_541)"
"(unsafe-car lst_540)))"
"(if #t"
"(let-values(((fold-var_542)"
"(let-values(((fold-var_543)"
" fold-var_539))"
"(let-values(((fold-var_544)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_545)"
" ids_541))"
"(begin"
"(if(list?"
" lst_545)"
"(void)"
"(let-values()"
"(in-list"
" lst_545)))"
"((letrec-values(((for-loop_546)"
"(lambda(fold-var_547"
" lst_548)"
"(if(pair?"
" lst_548)"
"(let-values(((id_549)"
"(unsafe-car"
" lst_548)))"
"(if #t"
"(let-values(((fold-var_550)"
"(let-values(((fold-var_551)"
" fold-var_547))"
"(let-values(((fold-var_552)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:159:25_553)"
" add-local-binding!35.1)"
"((id132_554)"
" id_549)"
"((phase133_555)"
" phase_286)"
"((counter134_556)"
" counter_290)"
"((frame-id135_557)"
" frame-id_287)"
"((s136_558)"
" s_238))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id135_557"
" #t"
" s136_558"
" #t"
" id132_554"
" phase133_555"
" counter134_556)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:159:25_553"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id135_557"
" s136_558)"
" id132_554"
" phase133_555"
" counter134_556))))"
" fold-var_551))))"
"(values"
" fold-var_552)))))"
"(if #t"
"(for-loop_546"
" fold-var_550"
"(unsafe-cdr"
" lst_548))"
" fold-var_550))"
" fold-var_547))"
" fold-var_547))))"
" for-loop_546)"
" null"
" lst_545)))))"
" fold-var_543))))"
"(values"
" fold-var_544)))))"
"(if #t"
"(for-loop_538"
" fold-var_542"
"(unsafe-cdr lst_540))"
" fold-var_542))"
" fold-var_539))"
" fold-var_539))))"
" for-loop_538)"
" null"
" lst_537))))))"
"(let-values(((bodys_293)"
"(alt-reverse"
"(let-values(((lst_559)"
"(if syntaxes?_234 body81_247 body105_270)))"
"(begin"
"(if(list? lst_559)"
"(void)"
"(let-values()(in-list lst_559)))"
"((letrec-values(((for-loop_560)"
"(lambda(fold-var_561 lst_562)"
"(if(pair? lst_562)"
"(let-values(((body_563)"
"(unsafe-car"
" lst_562)))"
"(if #t"
"(let-values(((fold-var_564)"
"(let-values(((fold-var_565)"
" fold-var_561))"
"(let-values(((fold-var_566)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_563"
" sc_285))"
" fold-var_565))))"
"(values"
" fold-var_566)))))"
"(if #t"
"(for-loop_560"
" fold-var_564"
"(unsafe-cdr lst_562))"
" fold-var_564))"
" fold-var_561))"
" fold-var_561))))"
" for-loop_560)"
" null"
" lst_559))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_567)"
"(expand-context-observer ctx_239)))"
"(if obs_567"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_567"
" renames-log-tag_237"
" val-idss_289"
"(datum->syntax$1 #f bodys_293)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_234"
"(let-values()"
"(begin"
"(let-values(((obs_568)"
"(expand-context-observer ctx_239)))"
"(if obs_568"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_568"
" 'prepare-env))"
"(void)))"
"(void)))"
"(let-values(((obs_569)"
"(expand-context-observer ctx_239)))"
"(if obs_569"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_569"
" 'enter-bind))"
"(void)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_294)"
"(alt-reverse"
"(let-values(((lst_570)"
"(if syntaxes?_234 trans-rhs78_244 '()))"
"((lst_571) trans-idss_288))"
"(begin"
"(if(list? lst_570)"
"(void)"
"(let-values()(in-list lst_570)))"
"(if(list? lst_571)"
"(void)"
"(let-values()(in-list lst_571)))"
"((letrec-values(((for-loop_572)"
"(lambda(fold-var_573"
" lst_574"
" lst_575)"
"(if(if(pair? lst_574)"
"(pair? lst_575)"
" #f)"
"(let-values(((rhs_576)"
"(unsafe-car"
" lst_574))"
"((ids_577)"
"(unsafe-car"
" lst_575)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_578)"
"(let-values(((fold-var_579)"
" fold-var_573))"
"(let-values(((fold-var_580)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_581)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_581"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_581"
" 'next))"
"(void)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_576"
" sc_285)"
" ids_577"
" ctx_239)))"
" fold-var_579))))"
"(values"
" fold-var_580)))))"
"(if(if #t #t #f)"
"(for-loop_572"
" fold-var_578"
"(unsafe-cdr lst_574)"
"(unsafe-cdr"
" lst_575))"
" fold-var_578))"
" fold-var_573))"
" fold-var_573))))"
" for-loop_572)"
" null"
" lst_570"
" lst_571))))))"
"(let-values(((rec-val-env_295)"
"(let-values(((lst_582) val-keyss_292)"
"((lst_583) val-idss_289))"
"(begin"
"(if(list? lst_582)"
"(void)"
"(let-values()(in-list lst_582)))"
"(if(list? lst_583)"
"(void)"
"(let-values()(in-list lst_583)))"
"((letrec-values(((for-loop_584)"
"(lambda(env_585"
" lst_586"
" lst_587)"
"(if(if(pair? lst_586)"
"(pair? lst_587)"
" #f)"
"(let-values(((keys_588)"
"(unsafe-car"
" lst_586))"
"((ids_589)"
"(unsafe-car"
" lst_587)))"
"(if(if #t #t #f)"
"(let-values(((env_590)"
"(let-values(((env_591)"
" env_585))"
"(if #t"
"(let-values(((lst_592)"
" keys_588)"
"((lst_593)"
" ids_589))"
"(begin"
"(if(list?"
" lst_592)"
"(void)"
"(let-values()"
"(in-list"
" lst_592)))"
"(if(list?"
" lst_593)"
"(void)"
"(let-values()"
"(in-list"
" lst_593)))"
"((letrec-values(((for-loop_594)"
"(lambda(env_595"
" lst_596"
" lst_597)"
"(if(if(pair?"
" lst_596)"
"(pair?"
" lst_597)"
" #f)"
"(let-values(((key_598)"
"(unsafe-car"
" lst_596))"
"((id_599)"
"(unsafe-car"
" lst_597)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((env_600)"
"(let-values(((env_601)"
" env_595))"
"(let-values(((env_602)"
"(let-values()"
"(env-extend"
" env_601"
" key_598"
"(local-variable1.1"
" id_599)))))"
"(values"
" env_602)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_594"
" env_600"
"(unsafe-cdr"
" lst_596)"
"(unsafe-cdr"
" lst_597))"
" env_600))"
" env_595))"
" env_595))))"
" for-loop_594)"
" env_591"
" lst_592"
" lst_593)))"
" env_591))))"
"(if(if #t #t #f)"
"(for-loop_584"
" env_590"
"(unsafe-cdr"
" lst_586)"
"(unsafe-cdr"
" lst_587))"
" env_590))"
" env_585))"
" env_585))))"
" for-loop_584)"
"(expand-context-env ctx_239)"
" lst_582"
" lst_583)))))"
"(let-values(((rec-env_296)"
"(let-values(((lst_603) trans-keyss_291)"
"((lst_604) trans-valss_294)"
"((lst_605) trans-idss_288))"
"(begin"
"(if(list? lst_603)"
"(void)"
"(let-values()(in-list lst_603)))"
"(if(list? lst_604)"
"(void)"
"(let-values()(in-list lst_604)))"
"(if(list? lst_605)"
"(void)"
"(let-values()(in-list lst_605)))"
"((letrec-values(((for-loop_606)"
"(lambda(env_607"
" lst_608"
" lst_609"
" lst_610)"
"(if(if(pair? lst_608)"
"(if(pair? lst_609)"
"(pair? lst_610)"
" #f)"
" #f)"
"(let-values(((keys_611)"
"(unsafe-car"
" lst_608))"
"((vals_612)"
"(unsafe-car"
" lst_609))"
"((ids_613)"
"(unsafe-car"
" lst_610)))"
"(if(if #t"
"(if #t #t #f)"
" #f)"
"(let-values(((env_614)"
"(let-values(((env_615)"
" env_607))"
"(let-values(((env_616)"
"(let-values()"
"(let-values(((lst_617)"
" keys_611)"
"((lst_618)"
" vals_612)"
"((lst_619)"
" ids_613))"
"(begin"
"(if(list?"
" lst_617)"
"(void)"
"(let-values()"
"(in-list"
" lst_617)))"
"(if(list?"
" lst_618)"
"(void)"
"(let-values()"
"(in-list"
" lst_618)))"
"(if(list?"
" lst_619)"
"(void)"
"(let-values()"
"(in-list"
" lst_619)))"
"((letrec-values(((for-loop_620)"
"(lambda(env_621"
" lst_622"
" lst_623"
" lst_624)"
"(if(if(pair?"
" lst_622)"
"(if(pair?"
" lst_623)"
"(pair?"
" lst_624)"
" #f)"
" #f)"
"(let-values(((key_625)"
"(unsafe-car"
" lst_622))"
"((val_626)"
"(unsafe-car"
" lst_623))"
"((id_627)"
"(unsafe-car"
" lst_624)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((env_628)"
"(let-values(((env_629)"
" env_621))"
"(let-values(((env_630)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_626"
" id_627"
" phase_286)"
"(env-extend"
" env_629"
" key_625"
" val_626)))))"
"(values"
" env_630)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_620"
" env_628"
"(unsafe-cdr"
" lst_622)"
"(unsafe-cdr"
" lst_623)"
"(unsafe-cdr"
" lst_624))"
" env_628))"
" env_621))"
" env_621))))"
" for-loop_620)"
" env_615"
" lst_617"
" lst_618"
" lst_619))))))"
"(values"
" env_616)))))"
"(if(if #t"
"(if #t #t #f)"
" #f)"
"(for-loop_606"
" env_614"
"(unsafe-cdr"
" lst_608)"
"(unsafe-cdr"
" lst_609)"
"(unsafe-cdr"
" lst_610))"
" env_614))"
" env_607))"
" env_607))))"
" for-loop_606)"
" rec-val-env_295"
" lst_603"
" lst_604"
" lst_605)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_234"
"(let-values()"
"(let-values(((obs_631)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_631"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_631"
" 'exit-bind))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_297)(as-expression-context ctx_239)))"
"(let-values(((orig-rrs_298)"
"(expand-context-reference-records"
" expr-ctx_297)))"
"(let-values(((rec-ctx_299)"
"(let-values(((the-struct_632)"
" expr-ctx_297))"
"(if(expand-context? the-struct_632)"
"(let-values(((env137_633) rec-env_296)"
"((scopes138_634)"
"(cons"
" sc_285"
"(expand-context-scopes"
" ctx_239)))"
"((reference-records139_635)"
"(if split-by-reference?_236"
"(cons"
" frame-id_287"
" orig-rrs_298)"
" orig-rrs_298))"
"((all-scopes-stx140_636)"
"(add-scope"
"(root-expand-context-all-scopes-stx"
" ctx_239)"
" sc_285)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_632)"
"(root-expand-context-post-expansion-scope"
" the-struct_632)"
"(root-expand-context-top-level-bind-scope"
" the-struct_632)"
" all-scopes-stx140_636"
"(root-expand-context-use-site-scopes"
" the-struct_632)"
"(root-expand-context-defined-syms"
" the-struct_632)"
"(root-expand-context-frame-id"
" the-struct_632)"
"(root-expand-context-counter"
" the-struct_632)"
"(root-expand-context-lift-key"
" the-struct_632)"
"(expand-context-context"
" the-struct_632)"
"(expand-context-phase the-struct_632)"
"(expand-context-namespace"
" the-struct_632)"
" env137_633"
"(expand-context-post-expansion-scope-action"
" the-struct_632)"
" scopes138_634"
"(expand-context-def-ctx-scopes"
" the-struct_632)"
" reference-records139_635"
"(expand-context-only-immediate?"
" the-struct_632)"
"(expand-context-just-once?"
" the-struct_632)"
"(expand-context-module-begin-k"
" the-struct_632)"
"(expand-context-need-eventually-defined"
" the-struct_632)"
"(expand-context-allow-unbound?"
" the-struct_632)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_632)"
"(expand-context-stops the-struct_632)"
"(expand-context-current-introduction-scopes"
" the-struct_632)"
"(expand-context-declared-submodule-names"
" the-struct_632)"
"(expand-context-lifts the-struct_632)"
"(expand-context-lift-envs"
" the-struct_632)"
"(expand-context-module-lifts"
" the-struct_632)"
"(expand-context-require-lifts"
" the-struct_632)"
"(expand-context-to-module-lifts"
" the-struct_632)"
"(expand-context-requires+provides"
" the-struct_632)"
"(expand-context-name the-struct_632)"
"(expand-context-observer"
" the-struct_632)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"expand-context?\""
" the-struct_632)))))"
"(let-values(((letrec-values-id_300)"
"(if syntaxes?_234"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_286)"
" 'letrec-values)"
" let-values102_267)))"
"(let-values(((get-body_301)"
"(lambda(track?_637)"
"(let-values((()"
"(begin"
"(let-values(((obs_640)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_640"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_640"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_638)"
"(let-values(((the-struct_641)"
" rec-ctx_299))"
"(if(expand-context?"
" the-struct_641)"
"(let-values(((reference-records141_642)"
" orig-rrs_298))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_641)"
"(root-expand-context-post-expansion-scope"
" the-struct_641)"
"(root-expand-context-top-level-bind-scope"
" the-struct_641)"
"(root-expand-context-all-scopes-stx"
" the-struct_641)"
"(root-expand-context-use-site-scopes"
" the-struct_641)"
"(root-expand-context-defined-syms"
" the-struct_641)"
"(root-expand-context-frame-id"
" the-struct_641)"
"(root-expand-context-counter"
" the-struct_641)"
"(root-expand-context-lift-key"
" the-struct_641)"
"(expand-context-context"
" the-struct_641)"
"(expand-context-phase"
" the-struct_641)"
"(expand-context-namespace"
" the-struct_641)"
"(expand-context-env"
" the-struct_641)"
"(expand-context-post-expansion-scope-action"
" the-struct_641)"
"(expand-context-scopes"
" the-struct_641)"
"(expand-context-def-ctx-scopes"
" the-struct_641)"
" reference-records141_642"
"(expand-context-only-immediate?"
" the-struct_641)"
"(expand-context-just-once?"
" the-struct_641)"
"(expand-context-module-begin-k"
" the-struct_641)"
"(expand-context-need-eventually-defined"
" the-struct_641)"
"(expand-context-allow-unbound?"
" the-struct_641)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_641)"
"(expand-context-stops"
" the-struct_641)"
"(expand-context-current-introduction-scopes"
" the-struct_641)"
"(expand-context-declared-submodule-names"
" the-struct_641)"
"(expand-context-lifts"
" the-struct_641)"
"(expand-context-lift-envs"
" the-struct_641)"
"(expand-context-module-lifts"
" the-struct_641)"
"(expand-context-require-lifts"
" the-struct_641)"
"(expand-context-to-module-lifts"
" the-struct_641)"
"(expand-context-requires+provides"
" the-struct_641)"
"(expand-context-name"
" the-struct_641)"
"(expand-context-observer"
" the-struct_641)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"expand-context?\""
" the-struct_641)))))"
"(let-values(((exp-body_639)"
"(let-values(((...nder/expand/expr.rkt:211:22_643)"
" expand-body30.1)"
"((bodys142_644)"
" bodys_293)"
"((temp143_645)"
"(let-values(((...nder/expand/expr.rkt:211:41_648)"
" as-tail-context14.1)"
"((body-ctx146_649)"
" body-ctx_638)"
"((ctx147_650)"
" ctx_239))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx147_650"
" body-ctx146_649)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:211:41_648"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx147_650)"
" body-ctx146_649))))"
"((s144_646)"
" s_238)"
"((disarmed-s145_647)"
" disarmed-s_240))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-body30.1))"
"(expand-body28.1"
" disarmed-s145_647"
" s144_646"
" #f"
" #f"
" #f"
" #f"
" bodys142_644"
" temp143_645)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:211:22_643"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source)"
" 4)"
" '(#:disarmed-source"
" #:source)"
"(list"
" disarmed-s145_647"
" s144_646)"
" bodys142_644"
" temp143_645)))))"
"(if track?_637"
"(let-values(((result-s_651)"
"(syntax-track-origin$1"
" exp-body_639"
" s_238)))"
"(begin"
"(let-values(((obs_652)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_652"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_652"
" 'tag"
" result-s_651))"
"(void)))"
"(void)))"
" result-s_651))"
" exp-body_639)))))))"
"(let-values(((result-s_302)"
"(if(not split-by-reference?_236)"
"(let-values()"
"(let-values(((s148_653) s_238)"
"((disarmed-s149_654)"
" disarmed-s_240)"
"((temp150_655)"
"(list"
" letrec-values-id_300"
"(alt-reverse"
"(let-values(((lst_656)"
" val-idss_289)"
"((lst_657)"
"(if syntaxes?_234"
" val-rhs80_246"
" val-rhs104_269)))"
"(begin"
"(if(list?"
" lst_656)"
"(void)"
"(let-values()"
"(in-list"
" lst_656)))"
"(if(list?"
" lst_657)"
"(void)"
"(let-values()"
"(in-list"
" lst_657)))"
"((letrec-values(((for-loop_658)"
"(lambda(fold-var_659"
" lst_660"
" lst_661)"
"(if(if(pair?"
" lst_660)"
"(pair?"
" lst_661)"
" #f)"
"(let-values(((ids_662)"
"(unsafe-car"
" lst_660))"
"((rhs_663)"
"(unsafe-car"
" lst_661)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_664)"
"(let-values(((fold-var_665)"
" fold-var_659))"
"(let-values(((fold-var_666)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_667)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_667"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_667"
" 'next))"
"(void)))"
"(void)))"
"(list"
" ids_662"
"(if rec?_235"
"(let-values(((temp151_668)"
"(add-scope"
" rhs_663"
" sc_285))"
"((temp152_669)"
"(as-named-context"
" rec-ctx_299"
" ids_662)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp151_668"
" temp152_669)"
"(expand7.1"
" temp151_668"
" temp152_669)))"
"(let-values(((rhs153_670)"
" rhs_663)"
"((temp154_671)"
"(as-named-context"
" expr-ctx_297"
" ids_662)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" rhs153_670"
" temp154_671)"
"(expand7.1"
" rhs153_670"
" temp154_671)))))))"
" fold-var_665))))"
"(values"
" fold-var_666)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_658"
" fold-var_664"
"(unsafe-cdr"
" lst_660)"
"(unsafe-cdr"
" lst_661))"
" fold-var_664))"
" fold-var_659))"
" fold-var_659))))"
" for-loop_658)"
" null"
" lst_656"
" lst_657))))"
"(get-body_301"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" s148_653"
" disarmed-s149_654"
" temp150_655)"
"(rebuild101.1"
" s148_653"
" disarmed-s149_654"
" temp150_655))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_673)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_673"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_673"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_674)"
"(expand-context-observer"
" ctx_239)))"
"(if obs_674"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_674"
" 'letrec-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_672)"
"(alt-reverse"
"(let-values(((lst_675)"
"(if syntaxes?_234"
" val-rhs80_246"
" val-rhs104_269)))"
"(begin"
"(if(list?"
" lst_675)"
"(void)"
"(let-values()"
"(in-list"
" lst_675)))"
"((letrec-values(((for-loop_676)"
"(lambda(fold-var_677"
" lst_678)"
"(if(pair?"
" lst_678)"
"(let-values(((rhs_679)"
"(unsafe-car"
" lst_678)))"
"(if #t"
"(let-values(((fold-var_680)"
"(let-values(((fold-var_681)"
" fold-var_677))"
"(let-values(((fold-var_682)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_679"
" sc_285))"
" fold-var_681))))"
"(values"
" fold-var_682)))))"
"(if #t"
"(for-loop_676"
" fold-var_680"
"(unsafe-cdr"
" lst_678))"
" fold-var_680))"
" fold-var_677))"
" fold-var_677))))"
" for-loop_676)"
" null"
" lst_675))))))"
"(let-values(((...nder/expand/expr.rkt:238:7_683)"
" expand-and-split-bindings-by-reference69.1)"
"((val-idss155_684)"
" val-idss_289)"
"((val-keyss156_685)"
" val-keyss_292)"
"((val-rhss157_686)"
" val-rhss_672)"
"((temp158_687)"
"(alt-reverse"
"(let-values(((lst_695)"
" val-idss_289))"
"(begin"
"(if(list?"
" lst_695)"
"(void)"
"(let-values()"
"(in-list"
" lst_695)))"
"((letrec-values(((for-loop_696)"
"(lambda(fold-var_697"
" lst_698)"
"(if(pair?"
" lst_698)"
"(let-values(((rhs_699)"
"(unsafe-car"
" lst_698)))"
"(if #t"
"(let-values(((fold-var_700)"
"(let-values(((fold-var_701)"
" fold-var_697))"
"(let-values(((fold-var_702)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_701))))"
"(values"
" fold-var_702)))))"
"(if #t"
"(for-loop_696"
" fold-var_700"
"(unsafe-cdr"
" lst_698))"
" fold-var_700))"
" fold-var_697))"
" fold-var_697))))"
" for-loop_696)"
" null"
" lst_695)))))"
"((temp159_688)"
" #t)"
"((frame-id160_689)"
" frame-id_287)"
"((rec-ctx161_690)"
" rec-ctx_299)"
"((s162_691)"
" s_238)"
"((disarmed-s163_692)"
" disarmed-s_240)"
"((get-body164_693)"
" get-body_301)"
"((temp165_694)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-and-split-bindings-by-reference69.1))"
"(expand-and-split-bindings-by-reference67.1"
" rec-ctx161_690"
" disarmed-s163_692"
" frame-id160_689"
" get-body164_693"
" s162_691"
" temp159_688"
" temp165_694"
" val-idss155_684"
" val-keyss156_685"
" val-rhss157_686"
" temp158_687)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:238:7_683"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" rec-ctx161_690"
" disarmed-s163_692"
" frame-id160_689"
" get-body164_693"
" s162_691"
" temp159_688"
" temp165_694)"
" val-idss155_684"
" val-keyss156_685"
" val-rhss157_686"
" temp158_687))))))))))"
"(attach-disappeared-transformer-bindings"
" result-s_302"
" trans-idss_288))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack12.1)"
"(lambda(given-kws_703 given-args_704)"
"(let-values(((log-tag1_705)(car given-args_704))"
"((given-kws_706)(cdr given-kws_703))"
"((given-args_707)(cdr given-args_704)))"
"(let-values(((rec?8_708)(if(pair? given-kws_706)(eq? '#:rec?(car given-kws_706)) #f)))"
"(let-values(((rec?3_709)(if rec?8_708(car given-args_707)(void)))"
"((given-kws_710)(if rec?8_708(cdr given-kws_706) given-kws_706))"
"((given-args_711)(if rec?8_708(cdr given-args_707) given-args_707)))"
"(let-values(((renames-log-tag10_712)"
"(if(pair? given-kws_710)(eq? '#:renames-log-tag(car given-kws_710)) #f)))"
"(let-values(((renames-log-tag5_713)(if renames-log-tag10_712(car given-args_711)(void)))"
"((given-kws_714)(if renames-log-tag10_712(cdr given-kws_710) given-kws_710))"
"((given-args_715)(if renames-log-tag10_712(cdr given-args_711) given-args_711)))"
"(let-values(((split-by-reference?9_716)"
"(if(pair? given-kws_714)(eq? '#:split-by-reference?(car given-kws_714)) #f)))"
"(let-values(((split-by-reference?4_717)(if split-by-reference?9_716(car given-args_715)(void)))"
"((given-kws_718)(if split-by-reference?9_716(cdr given-kws_714) given-kws_714))"
"((given-args_719)(if split-by-reference?9_716(cdr given-args_715) given-args_715)))"
"(let-values(((syntaxes?7_720)(pair? given-kws_718)))"
"(let-values(((syntaxes?2_721)(if syntaxes?7_720(car given-args_719)(void))))"
"(make-let-values-form11.1"
" log-tag1_705"
" rec?3_709"
" rec?8_708"
" renames-log-tag5_713"
" renames-log-tag10_712"
" split-by-reference?4_717"
" split-by-reference?9_716"
" syntaxes?2_721"
" syntaxes?7_720))))))))))))"
"(define-values"
"(make-let-values-form13.1)"
"(lifted/1.1$1"
"(lambda(given-kws_722 given-argc_723)"
"(if(= given-argc_723 2)"
"(subsets? '(#:log-tag) given-kws_722 '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?))"
" #f))"
"(case-lambda((given-kws_724 given-args_725)(unpack12.1 given-kws_724 given-args_725)))"
" '(#:log-tag)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((...nder/expand/expr.rkt:250:1_726) make-let-values-form13.1)((temp166_727) 'prim-let-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp166_727 #f #f #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:250:1_726"
" keyword-procedure-extract"
" '(#:log-tag)"
" 2)"
" '(#:log-tag)"
"(list temp166_727))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((...nder/expand/expr.rkt:254:1_728) make-let-values-form13.1)"
"((temp167_729) #t)"
"((temp168_730) 'prim-letrec-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp168_730 temp167_729 #t #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:254:1_728"
" keyword-procedure-extract"
" '(#:log-tag #:rec?)"
" 2)"
" '(#:log-tag #:rec?)"
"(list temp168_730 temp167_729))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((...nder/expand/expr.rkt:258:1_731) make-let-values-form13.1)"
"((temp169_732) #t)"
"((temp170_733) #t)"
"((temp171_734) #t)"
"((temp172_735) 'prim-letrec-syntaxes+values)"
"((temp173_736) 'letrec-syntaxes-renames))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp172_735 temp170_733 #t temp173_736 #t temp171_734 #t temp169_732 #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:258:1_731"
" keyword-procedure-extract"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
" 2)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
"(list temp172_735 temp170_733 temp173_736 temp171_734 temp169_732))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_737 ctx_738)"
"(let-values((()"
"(begin"
"(let-values(((obs_753)(expand-context-observer ctx_738)))"
"(if obs_753"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_753 'prim-#%stratified))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_739)(syntax-disarm$1 s_737)))"
"(let-values(((ok?_740 #%stratified-body174_741 body175_742)"
"(let-values(((s_754) disarmed-s_739))"
"(if(if #t #t #f)"
"(let-values(((orig-s_755) s_754))"
"(let-values(((#%stratified-body174_756 body175_757)"
"(let-values(((s_758)(if(syntax?$1 s_754)(syntax-e$1 s_754) s_754)))"
"(if(pair? s_758)"
"(let-values(((#%stratified-body176_759)"
"(let-values(((s_761)(car s_758))) s_761))"
"((body177_760)"
"(let-values(((s_762)(cdr s_758)))"
"(let-values(((s_763)"
"(if(syntax?$1 s_762)"
"(syntax-e$1 s_762)"
" s_762)))"
"(let-values(((flat-s_764)(to-syntax-list.1 s_763)))"
"(if(not flat-s_764)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_755))"
"(if(null? flat-s_764)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_755))"
"(let-values() flat-s_764))))))))"
"(values #%stratified-body176_759 body177_760))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_755)))))"
"(values #t #%stratified-body174_756 body175_757)))"
"(values #f #f #f)))))"
"(let-values(((...nder/expand/expr.rkt:270:3_765) expand-body30.1)"
"((temp178_766) body175_742)"
"((ctx179_767) ctx_738)"
"((temp180_768) #t)"
"((temp181_769) #t)"
"((s182_770) s_737)"
"((disarmed-s183_771) disarmed-s_739))"
"(if(variable-reference-constant?(#%variable-reference expand-body30.1))"
"(expand-body28.1 disarmed-s183_771 s182_770 temp180_768 #t temp181_769 #t temp178_766 ctx179_767)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:270:3_765"
" keyword-procedure-extract"
" '(#:disarmed-source #:source #:stratified? #:track?)"
" 4)"
" '(#:disarmed-source #:source #:stratified? #:track?)"
"(list disarmed-s183_771 s182_770 temp180_768 temp181_769)"
" temp178_766"
" ctx179_767)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_772 ctx_773)"
"(let-values((()"
"(begin"
"(let-values(((obs_790)(expand-context-observer ctx_773)))"
"(if obs_790"
"(let-values()(if #t(let-values()(call-expand-observe obs_790 'prim-#%datum))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_774)(syntax-disarm$1 s_772)))"
"(let-values(((ok?_775 #%datum184_776 datum185_777)"
"(let-values(((s_791) disarmed-s_774))"
"(if(if #t #t #f)"
"(let-values(((orig-s_792) s_791))"
"(let-values(((#%datum184_793 datum185_794)"
"(let-values(((s_795)(if(syntax?$1 s_791)(syntax-e$1 s_791) s_791)))"
"(if(pair? s_795)"
"(let-values(((#%datum186_796)"
"(let-values(((s_798)(car s_795))) s_798))"
"((datum187_797)"
"(let-values(((s_799)(cdr s_795))) s_799)))"
"(values #%datum186_796 datum187_797))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_792)))))"
"(values #t #%datum184_793 datum185_794)))"
"(values #f #f #f)))))"
"(let-values(((datum_788) datum185_777))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_788)(keyword?(syntax-e$1 datum_788)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_788))"
"(void))"
"(values))))"
"(let-values(((phase_789)(expand-context-phase ctx_773)))"
"(let-values(((s188_800) s_772)"
"((disarmed-s189_801) disarmed-s_774)"
"((temp190_802)"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_789) 'quote)"
" datum_788)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s188_800 disarmed-s189_801 temp190_802)"
"(rebuild101.1 s188_800 disarmed-s189_801 temp190_802))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_803 ctx_804)"
"(let-values((()"
"(begin"
"(let-values(((obs_820)(expand-context-observer ctx_804)))"
"(if obs_820"
"(let-values()(if #t(let-values()(call-expand-observe obs_820 'prim-#%app))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_805)(syntax-disarm$1 s_803)))"
"(let-values(((ok?_806 #%app191_807 e192_808)"
"(let-values(((s_821) disarmed-s_805))"
"(if(if #t #t #f)"
"(let-values(((orig-s_822) s_821))"
"(let-values(((#%app191_823 e192_824)"
"(let-values(((s_825)(if(syntax?$1 s_821)(syntax-e$1 s_821) s_821)))"
"(if(pair? s_825)"
"(let-values(((#%app193_826)"
"(let-values(((s_828)(car s_825))) s_828))"
"((e194_827)"
"(let-values(((s_829)(cdr s_825)))"
"(let-values(((s_830)"
"(if(syntax?$1 s_829)"
"(syntax-e$1 s_829)"
" s_829)))"
"(let-values(((flat-s_831)(to-syntax-list.1 s_830)))"
"(if(not flat-s_831)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_822))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_822))"
"(let-values() flat-s_831))))))))"
"(values #%app193_826 e194_827))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_822)))))"
"(values #t #%app191_823 e192_824)))"
"(values #f #f #f)))))"
"(let-values(((es_819) e192_808))"
"(if(null? es_819)"
"(let-values()"
"(let-values(((phase_832)(expand-context-phase ctx_804)))"
"(let-values(((s195_833) s_803)"
"((disarmed-s196_834) disarmed-s_805)"
"((temp197_835)"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_832) 'quote)"
" null)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s195_833 disarmed-s196_834 temp197_835)"
"(rebuild101.1 s195_833 disarmed-s196_834 temp197_835)))))"
"(let-values()"
"(let-values(((expr-ctx_836)(as-expression-context ctx_804)))"
"(let-values(((exp-es_837)"
"(alt-reverse"
"(let-values(((lst_839) es_819))"
"(begin"
"(if(list? lst_839)(void)(let-values()(in-list lst_839)))"
"((letrec-values(((for-loop_840)"
"(lambda(fold-var_841 lst_842)"
"(if(pair? lst_842)"
"(let-values(((e_843)(unsafe-car lst_842)))"
"(if #t"
"(let-values(((fold-var_844)"
"(let-values(((fold-var_845)"
" fold-var_841))"
"(let-values(((fold-var_846)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((e201_847)"
" e_843)"
"((expr-ctx202_848)"
" expr-ctx_836))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e201_847"
" expr-ctx202_848)"
"(expand7.1"
" e201_847"
" expr-ctx202_848))))"
" fold-var_845))))"
"(values fold-var_846)))))"
"(if #t"
"(for-loop_840 fold-var_844(unsafe-cdr lst_842))"
" fold-var_844))"
" fold-var_841))"
" fold-var_841))))"
" for-loop_840)"
" null"
" lst_839))))))"
"(let-values(((prefixless_838)(cdr(syntax-e$1 disarmed-s_805))))"
"(let-values(((s198_849) s_803)"
"((disarmed-s199_850) disarmed-s_805)"
"((temp200_851)"
"(cons"
" #%app191_807"
"(if(syntax?$1 prefixless_838)"
"(let-values(((prefixless203_852) prefixless_838)"
"((prefixless204_853) prefixless_838)"
"((exp-es205_854) exp-es_837))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f prefixless203_852 prefixless204_853 exp-es205_854)"
"(rebuild101.1 prefixless203_852 prefixless204_853 exp-es205_854)))"
" exp-es_837))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s198_849 disarmed-s199_850 temp200_851)"
"(rebuild101.1 s198_849 disarmed-s199_850 temp200_851)))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_855 ctx_856)"
"(let-values((()"
"(begin"
"(let-values(((obs_870)(expand-context-observer ctx_856)))"
"(if obs_870"
"(let-values()(if #t(let-values()(call-expand-observe obs_870 'prim-quote))(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_857 quote206_858 datum207_859)"
"(let-values(((s_871)(syntax-disarm$1 s_855)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_872) s_871))"
"(let-values(((quote206_873 datum207_874)"
"(let-values(((s_875)(if(syntax?$1 s_871)(syntax-e$1 s_871) s_871)))"
"(if(pair? s_875)"
"(let-values(((quote208_876)(let-values(((s_878)(car s_875))) s_878))"
"((datum209_877)"
"(let-values(((s_879)(cdr s_875)))"
"(let-values(((s_880)"
"(if(syntax?$1 s_879)"
"(syntax-e$1 s_879)"
" s_879)))"
"(if(pair? s_880)"
"(let-values(((datum210_881)"
"(let-values(((s_882)(car s_880)))"
" s_882))"
"(()"
"(let-values(((s_883)(cdr s_880)))"
"(let-values(((s_884)"
"(if(syntax?$1 s_883)"
"(syntax-e$1 s_883)"
" s_883)))"
"(if(null? s_884)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_872))))))"
"(values datum210_881))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_872))))))"
"(values quote208_876 datum209_877))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_872)))))"
"(values #t quote206_873 datum207_874)))"
"(values #f #f #f)))))"
" s_855)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_885 ctx_886)"
"(let-values((()"
"(begin"
"(let-values(((obs_914)(expand-context-observer ctx_886)))"
"(if obs_914"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_914 'prim-quote-syntax))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_887)(syntax-disarm$1 s_885)))"
"(let-values(((ok?_888 quote-syntax211_889 datum212_890)"
"(let-values(((s_915) disarmed-s_887))"
"(if(if #t"
"(let-values(((s_916)(if(syntax?$1 s_915)(syntax-e$1 s_915) s_915)))"
"(if(pair? s_916)"
"(if(let-values(((s_917)(car s_916))) #t)"
"(let-values(((s_918)(cdr s_916)))"
"(let-values(((s_919)(if(syntax?$1 s_918)(syntax-e$1 s_918) s_918)))"
"(if(pair? s_919)"
"(if(let-values(((s_920)(car s_919))) #t)"
"(let-values(((s_921)(cdr s_919)))"
"(let-values(((s_922)(if(syntax?$1 s_921)(syntax-e$1 s_921) s_921)))"
"(if(pair? s_922)"
"(if(let-values(((s_923)(car s_922)))"
"(let-values(((s_924)"
"(if(syntax?$1 s_923)"
"(syntax-e$1 s_923)"
" s_923)))"
"(eq? '#:local s_924)))"
"(let-values(((s_925)(cdr s_922)))"
"(let-values(((s_926)"
"(if(syntax?$1 s_925)(syntax-e$1 s_925) s_925)))"
"(null? s_926)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_927) s_915))"
"(let-values(((quote-syntax211_928 datum212_929)"
"(let-values(((s_930)(if(syntax?$1 s_915)(syntax-e$1 s_915) s_915)))"
"(if #t"
"(let-values(((quote-syntax213_931)"
"(let-values(((s_933)(car s_930))) s_933))"
"((datum214_932)"
"(let-values(((s_934)(cdr s_930)))"
"(let-values(((s_935)"
"(if(syntax?$1 s_934)"
"(syntax-e$1 s_934)"
" s_934)))"
"(if #t"
"(let-values(((datum215_936)"
"(let-values(((s_937)(car s_935)))"
" s_937))"
"(()"
"(let-values(((s_938)(cdr s_935)))"
"(let-values(((s_939)"
"(if(syntax?$1 s_938)"
"(syntax-e$1 s_938)"
" s_938)))"
"(if #t"
"(let-values((()"
"(let-values(((s_940)"
"(car"
" s_939)))"
"(let-values(((s_941)"
"(if(syntax?$1"
" s_940)"
"(syntax-e$1"
" s_940)"
" s_940)))"
"(values))))"
"(()"
"(let-values(((s_942)"
"(cdr"
" s_939)))"
"(let-values(((s_943)"
"(if(syntax?$1"
" s_942)"
"(syntax-e$1"
" s_942)"
" s_942)))"
"(values)))))"
"(values))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_927))))))"
"(values datum215_936))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_927))))))"
"(values quote-syntax213_931 datum214_932))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_927)))))"
"(values #t quote-syntax211_928 datum212_929)))"
"(values #f #f #f)))))"
"(let-values(((ok?_901 quote-syntax216_902 datum217_903)"
"(let-values(((s_944) disarmed-s_887))"
"(if(if(not ok?_888) #t #f)"
"(let-values(((orig-s_945) s_944))"
"(let-values(((quote-syntax216_946 datum217_947)"
"(let-values(((s_948)(if(syntax?$1 s_944)(syntax-e$1 s_944) s_944)))"
"(if(pair? s_948)"
"(let-values(((quote-syntax218_949)"
"(let-values(((s_951)(car s_948))) s_951))"
"((datum219_950)"
"(let-values(((s_952)(cdr s_948)))"
"(let-values(((s_953)"
"(if(syntax?$1 s_952)"
"(syntax-e$1 s_952)"
" s_952)))"
"(if(pair? s_953)"
"(let-values(((datum220_954)"
"(let-values(((s_955)(car s_953)))"
" s_955))"
"(()"
"(let-values(((s_956)(cdr s_953)))"
"(let-values(((s_957)"
"(if(syntax?$1"
" s_956)"
"(syntax-e$1"
" s_956)"
" s_956)))"
"(if(null? s_957)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_945))))))"
"(values datum220_954))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_945))))))"
"(values quote-syntax218_949 datum219_950))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_945)))))"
"(values #t quote-syntax216_946 datum217_947)))"
"(values #f #f #f)))))"
"(if ok?_888"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_886))"
"(values))))"
"(let-values(((ok?_958 _221_959 _222_960 kw223_961)"
"(let-values(((s_974) disarmed-s_887))"
"(if(if #t #t #f)"
"(let-values(((orig-s_975) s_974))"
"(let-values(((_221_976 _222_977 kw223_978)"
"(let-values(((s_979)"
"(if(syntax?$1 s_974)(syntax-e$1 s_974) s_974)))"
"(if(pair? s_979)"
"(let-values(((_224_980)"
"(let-values(((s_983)(car s_979))) s_983))"
"((_225_981 kw226_982)"
"(let-values(((s_984)(cdr s_979)))"
"(let-values(((s_985)"
"(if(syntax?$1 s_984)"
"(syntax-e$1 s_984)"
" s_984)))"
"(if(pair? s_985)"
"(let-values(((_227_986)"
"(let-values(((s_988)"
"(car s_985)))"
" s_988))"
"((kw228_987)"
"(let-values(((s_989)"
"(cdr s_985)))"
"(let-values(((s_990)"
"(if(syntax?$1"
" s_989)"
"(syntax-e$1"
" s_989)"
" s_989)))"
"(if(pair? s_990)"
"(let-values(((kw229_991)"
"(let-values(((s_992)"
"(car"
" s_990)))"
" s_992))"
"(()"
"(let-values(((s_993)"
"(cdr"
" s_990)))"
"(let-values(((s_994)"
"(if(syntax?$1"
" s_993)"
"(syntax-e$1"
" s_993)"
" s_993)))"
"(if(null?"
" s_994)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_975))))))"
"(values kw229_991))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_975))))))"
"(values _227_986 kw228_987))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_975))))))"
"(values _224_980 _225_981 kw226_982))"
"                                                           (raise-syntax-error$1 #f \"bad syntax\" orig-s_975)))))"
"(values #t _221_976 _222_977 kw223_978)))"
"(values #f #f #f #f)))))"
"(let-values(((s230_995) s_885)"
"((disarmed-s231_996) disarmed-s_887)"
"((temp232_997)(list quote-syntax211_889 datum212_890 kw223_961)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s230_995 disarmed-s231_996 temp232_997)"
"(rebuild101.1 s230_995 disarmed-s231_996 temp232_997))))))"
"(let-values()"
"(let-values(((s233_998) s_885)"
"((disarmed-s234_999) disarmed-s_887)"
"((temp235_1000)"
"(list"
" quote-syntax216_902"
"(remove-scopes datum217_903(expand-context-scopes ctx_886)))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s233_998 disarmed-s234_999 temp235_1000)"
"(rebuild101.1 s233_998 disarmed-s234_999 temp235_1000))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_1001 ctx_1002)"
"(let-values((()"
"(begin"
"(let-values(((obs_1025)(expand-context-observer ctx_1002)))"
"(if obs_1025"
"(let-values()(if #t(let-values()(call-expand-observe obs_1025 'prim-if))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1003)(syntax-disarm$1 s_1001)))"
"(let-values(((ok?_1004 if236_1005 tst237_1006 thn238_1007 els239_1008)"
"(let-values(((s_1026) disarmed-s_1003))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1027) s_1026))"
"(let-values(((if236_1028 tst237_1029 thn238_1030 els239_1031)"
"(let-values(((s_1032)(if(syntax?$1 s_1026)(syntax-e$1 s_1026) s_1026)))"
"(if(pair? s_1032)"
"(let-values(((if240_1033)"
"(let-values(((s_1037)(car s_1032))) s_1037))"
"((tst241_1034 thn242_1035 els243_1036)"
"(let-values(((s_1038)(cdr s_1032)))"
"(let-values(((s_1039)"
"(if(syntax?$1 s_1038)"
"(syntax-e$1 s_1038)"
" s_1038)))"
"(if(pair? s_1039)"
"(let-values(((tst244_1040)"
"(let-values(((s_1043)(car s_1039)))"
" s_1043))"
"((thn245_1041 els246_1042)"
"(let-values(((s_1044)(cdr s_1039)))"
"(let-values(((s_1045)"
"(if(syntax?$1"
" s_1044)"
"(syntax-e$1 s_1044)"
" s_1044)))"
"(if(pair? s_1045)"
"(let-values(((thn247_1046)"
"(let-values(((s_1048)"
"(car"
" s_1045)))"
" s_1048))"
"((els248_1047)"
"(let-values(((s_1049)"
"(cdr"
" s_1045)))"
"(let-values(((s_1050)"
"(if(syntax?$1"
" s_1049)"
"(syntax-e$1"
" s_1049)"
" s_1049)))"
"(if(pair?"
" s_1050)"
"(let-values(((els249_1051)"
"(let-values(((s_1052)"
"(car"
" s_1050)))"
" s_1052))"
"(()"
"(let-values(((s_1053)"
"(cdr"
" s_1050)))"
"(let-values(((s_1054)"
"(if(syntax?$1"
" s_1053)"
"(syntax-e$1"
" s_1053)"
" s_1053)))"
"(if(null?"
" s_1054)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_1027))))))"
"(values"
" els249_1051))"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1027))))))"
"(values"
" thn247_1046"
" els248_1047))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1027))))))"
"(values tst244_1040 thn245_1041 els246_1042))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1027))))))"
"(values if240_1033 tst241_1034 thn242_1035 els243_1036))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1027)))))"
"(values #t if236_1028 tst237_1029 thn238_1030 els239_1031)))"
"(values #f #f #f #f #f)))))"
"(let-values(((expr-ctx_1023)(as-expression-context ctx_1002)))"
"(let-values(((tail-ctx_1024)"
"(let-values(((...nder/expand/expr.rkt:355:20_1055) as-tail-context14.1)"
"((expr-ctx253_1056) expr-ctx_1023)"
"((ctx254_1057) ctx_1002))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx254_1057 expr-ctx253_1056)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:355:20_1055"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx254_1057)"
" expr-ctx253_1056)))))"
"(begin"
"(let-values(((obs_1058)(expand-context-observer ctx_1002)))"
"(if obs_1058"
"(let-values()(if #t(let-values()(call-expand-observe obs_1058 'next-group))(void)))"
"(void)))"
"(let-values(((s250_1059) s_1001)"
"((disarmed-s251_1060) disarmed-s_1003)"
"((temp252_1061)"
"(list"
" if236_1005"
"(let-values(((temp255_1062) tst237_1006)((expr-ctx256_1063) expr-ctx_1023))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp255_1062 expr-ctx256_1063)"
"(expand7.1 temp255_1062 expr-ctx256_1063)))"
"(begin"
"(let-values(((obs_1064)(expand-context-observer ctx_1002)))"
"(if obs_1064"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1064 'next))(void)))"
"(void)))"
"(let-values(((temp257_1065) thn238_1007)((tail-ctx258_1066) tail-ctx_1024))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp257_1065 tail-ctx258_1066)"
"(expand7.1 temp257_1065 tail-ctx258_1066))))"
"(begin"
"(let-values(((obs_1067)(expand-context-observer ctx_1002)))"
"(if obs_1067"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1067 'next))(void)))"
"(void)))"
"(let-values(((temp259_1068) els239_1008)((tail-ctx260_1069) tail-ctx_1024))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp259_1068 tail-ctx260_1069)"
"(expand7.1 temp259_1068 tail-ctx260_1069)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s250_1059 disarmed-s251_1060 temp252_1061)"
"(rebuild101.1 s250_1059 disarmed-s251_1060 temp252_1061))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_1070 ctx_1071)"
"(let-values((()"
"(begin"
"(let-values(((obs_1093)(expand-context-observer ctx_1071)))"
"(if obs_1093"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1093 'prim-with-continuation-mark))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1072)(syntax-disarm$1 s_1070)))"
"(let-values(((ok?_1073 with-continuation-mark261_1074 key262_1075 val263_1076 body264_1077)"
"(let-values(((s_1094) disarmed-s_1072))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1095) s_1094))"
"(let-values(((with-continuation-mark261_1096 key262_1097 val263_1098 body264_1099)"
"(let-values(((s_1100)(if(syntax?$1 s_1094)(syntax-e$1 s_1094) s_1094)))"
"(if(pair? s_1100)"
"(let-values(((with-continuation-mark265_1101)"
"(let-values(((s_1105)(car s_1100))) s_1105))"
"((key266_1102 val267_1103 body268_1104)"
"(let-values(((s_1106)(cdr s_1100)))"
"(let-values(((s_1107)"
"(if(syntax?$1 s_1106)"
"(syntax-e$1 s_1106)"
" s_1106)))"
"(if(pair? s_1107)"
"(let-values(((key269_1108)"
"(let-values(((s_1111)(car s_1107)))"
" s_1111))"
"((val270_1109 body271_1110)"
"(let-values(((s_1112)(cdr s_1107)))"
"(let-values(((s_1113)"
"(if(syntax?$1"
" s_1112)"
"(syntax-e$1 s_1112)"
" s_1112)))"
"(if(pair? s_1113)"
"(let-values(((val272_1114)"
"(let-values(((s_1116)"
"(car"
" s_1113)))"
" s_1116))"
"((body273_1115)"
"(let-values(((s_1117)"
"(cdr"
" s_1113)))"
"(let-values(((s_1118)"
"(if(syntax?$1"
" s_1117)"
"(syntax-e$1"
" s_1117)"
" s_1117)))"
"(if(pair?"
" s_1118)"
"(let-values(((body274_1119)"
"(let-values(((s_1120)"
"(car"
" s_1118)))"
" s_1120))"
"(()"
"(let-values(((s_1121)"
"(cdr"
" s_1118)))"
"(let-values(((s_1122)"
"(if(syntax?$1"
" s_1121)"
"(syntax-e$1"
" s_1121)"
" s_1121)))"
"(if(null?"
" s_1122)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_1095))))))"
"(values"
" body274_1119))"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1095))))))"
"(values"
" val272_1114"
" body273_1115))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1095))))))"
"(values key269_1108 val270_1109 body271_1110))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1095))))))"
"(values"
" with-continuation-mark265_1101"
" key266_1102"
" val267_1103"
" body268_1104))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1095)))))"
"(values #t with-continuation-mark261_1096 key262_1097 val263_1098 body264_1099)))"
"(values #f #f #f #f #f)))))"
"(let-values(((expr-ctx_1092)(as-expression-context ctx_1071)))"
"(let-values(((s275_1123) s_1070)"
"((disarmed-s276_1124) disarmed-s_1072)"
"((temp277_1125)"
"(list"
" with-continuation-mark261_1074"
"(let-values(((temp278_1126) key262_1075)((expr-ctx279_1127) expr-ctx_1092))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp278_1126 expr-ctx279_1127)"
"(expand7.1 temp278_1126 expr-ctx279_1127)))"
"(begin"
"(let-values(((obs_1128)(expand-context-observer ctx_1071)))"
"(if obs_1128"
"(let-values()(if #t(let-values()(call-expand-observe obs_1128 'next))(void)))"
"(void)))"
"(let-values(((temp280_1129) val263_1076)((expr-ctx281_1130) expr-ctx_1092))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp280_1129 expr-ctx281_1130)"
"(expand7.1 temp280_1129 expr-ctx281_1130))))"
"(begin"
"(let-values(((obs_1131)(expand-context-observer ctx_1071)))"
"(if obs_1131"
"(let-values()(if #t(let-values()(call-expand-observe obs_1131 'next))(void)))"
"(void)))"
"(let-values(((temp282_1132) body264_1077)"
"((temp283_1133)"
"(let-values(((...nder/expand/expr.rkt:384:30_1134) as-tail-context14.1)"
"((expr-ctx284_1135) expr-ctx_1092)"
"((ctx285_1136) ctx_1071))"
"(if(variable-reference-constant?"
"(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx285_1136 expr-ctx284_1135)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:384:30_1134"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx285_1136)"
" expr-ctx284_1135)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp282_1132 temp283_1133)"
"(expand7.1 temp282_1132 temp283_1133)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s275_1123 disarmed-s276_1124 temp277_1125)"
"(rebuild101.1 s275_1123 disarmed-s276_1124 temp277_1125))))))))))"
" print-values)"
"(define-values"
"(lifted/2.1$1)"
"(make-required"
" 'make-begin"
"(case-lambda((self_1137 log-tag_1138)(apply missing-kw self_1137 log-tag_1138 null)))"
" #f"
" #f))"
"(define-values"
"(make-begin17.1)"
"(lambda(list-start-index14_1139 log-tag16_1140)"
"(let-values(((log-tag_1141) log-tag16_1140))"
"(let-values(((list-start-index_1142) list-start-index14_1139))"
"(let-values()"
"(lambda(s_1143 ctx_1144)"
"(let-values((()"
"(begin"
"(let-values(((obs_1163)(expand-context-observer ctx_1144)))"
"(if obs_1163"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1163 log-tag_1141))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1145)(syntax-disarm$1 s_1143)))"
"(let-values(((ok?_1146 begin286_1147 e287_1148)"
"(let-values(((s_1164) disarmed-s_1145))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1165) s_1164))"
"(let-values(((begin286_1166 e287_1167)"
"(let-values(((s_1168)"
"(if(syntax?$1 s_1164)(syntax-e$1 s_1164) s_1164)))"
"(if(pair? s_1168)"
"(let-values(((begin288_1169)"
"(let-values(((s_1171)(car s_1168))) s_1171))"
"((e289_1170)"
"(let-values(((s_1172)(cdr s_1168)))"
"(let-values(((s_1173)"
"(if(syntax?$1 s_1172)"
"(syntax-e$1 s_1172)"
" s_1172)))"
"(let-values(((flat-s_1174)"
"(to-syntax-list.1 s_1173)))"
"(if(not flat-s_1174)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                               \"bad syntax\""
" orig-s_1165))"
"(if(null? flat-s_1174)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_1165))"
"(let-values() flat-s_1174))))))))"
"(values begin288_1169 e289_1170))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_1165)))))"
"(values #t begin286_1166 e287_1167)))"
"(values #f #f #f)))))"
"(let-values(((expr-ctx_1159)(as-expression-context ctx_1144)))"
"(let-values(((es_1160) e287_1148))"
"(let-values(((last-i_1161)(sub1(length es_1160))))"
"(let-values(((exp-es_1162)"
"(alt-reverse"
"(let-values(((lst_1175) es_1160)((start_1176) 0))"
"(begin"
"(if(list? lst_1175)(void)(let-values()(in-list lst_1175)))"
"(if(exact-nonnegative-integer? start_1176)"
"(void)"
"(let-values()(in-naturals start_1176)))"
"((letrec-values(((for-loop_1177)"
"(lambda(fold-var_1178 lst_1179 pos_1180)"
"(if(if(pair? lst_1179) #t #f)"
"(let-values(((e_1181)(unsafe-car lst_1179))"
"((i_1182) pos_1180))"
"(if(if #t #t #f)"
"(let-values(((fold-var_1183)"
"(let-values(((fold-var_1184)"
" fold-var_1178))"
"(let-values(((fold-var_1185)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(if(="
" i_1182"
" list-start-index_1142)"
"(let-values()"
"(let-values(((obs_1186)"
"(expand-context-observer"
" ctx_1144)))"
"(if obs_1186"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1186"
" 'enter-list"
"(list-tail"
" es_1160"
" i_1182)))"
"(void)))"
"(void))))"
"(void))"
"(let-values(((obs_1187)"
"(expand-context-observer"
" ctx_1144)))"
"(if obs_1187"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1187"
" 'next))"
"(void)))"
"(void)))"
"(let-values(((e293_1188)"
" e_1181)"
"((temp294_1189)"
"(if(="
" i_1182"
" last-i_1161)"
"(let-values(((...nder/expand/expr.rkt:401:21_1190)"
" as-tail-context14.1)"
"((expr-ctx295_1191)"
" expr-ctx_1159)"
"((ctx296_1192)"
" ctx_1144))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx296_1192"
" expr-ctx295_1191)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:401:21_1190"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx296_1192)"
" expr-ctx295_1191)))"
" expr-ctx_1159)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e293_1188"
" temp294_1189)"
"(expand7.1"
" e293_1188"
" temp294_1189)))))"
" fold-var_1184))))"
"(values fold-var_1185)))))"
"(if(if #t #t #f)"
"(for-loop_1177"
" fold-var_1183"
"(unsafe-cdr lst_1179)"
"(+ pos_1180 1))"
" fold-var_1183))"
" fold-var_1178))"
" fold-var_1178))))"
" for-loop_1177)"
" null"
" lst_1175"
" start_1176))))))"
"(begin"
"(if(if(= 1 list-start-index_1142)(null?(cdr es_1160)) #f)"
"(let-values()"
"(let-values(((obs_1193)(expand-context-observer ctx_1144)))"
"(if obs_1193"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1193 'enter-list(cdr es_1160)))"
"(void)))"
"(void))))"
"(void))"
"(let-values(((obs_1194)(expand-context-observer ctx_1144)))"
"(if obs_1194"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1194"
" 'exit-list"
"(list-tail exp-es_1162 list-start-index_1142)))"
"(void)))"
"(void)))"
"(let-values(((s290_1195) s_1143)"
"((disarmed-s291_1196) disarmed-s_1145)"
"((temp292_1197)(cons begin286_1147 exp-es_1162)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s290_1195 disarmed-s291_1196 temp292_1197)"
"(rebuild101.1 s290_1195 disarmed-s291_1196 temp292_1197)))))))))))))))))"
"(define-values"
"(unpack18.1)"
"(lambda(given-kws_1198 given-args_1199 log-tag16_1200)"
"(let-values(((list-start-index14_1201)(car given-args_1199)))"
"(make-begin17.1 list-start-index14_1201 log-tag16_1200))))"
"(define-values"
"(make-begin19.1)"
"(lifted/2.1$1"
"(lambda(given-kws_1202 given-argc_1203)"
"(if(= given-argc_1203 3)"
"(let-values(((l2_1204) given-kws_1202))"
"(if(pair? l2_1204)(if(eq?(car l2_1204) '#:list-start-index)(null?(cdr l2_1204)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1205 given-args_1206 log-tag_1207)(unpack18.1 given-kws_1205 given-args_1206 log-tag_1207)))"
" '(#:list-start-index)"
" '(#:list-start-index)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((...nder/expand/expr.rkt:413:1_1208) make-begin19.1)"
"((temp297_1209) 'prim-begin0)"
"((temp298_1210) 0))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp298_1210 temp297_1209)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:413:1_1208"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp298_1210)"
" temp297_1209)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((...nder/expand/expr.rkt:417:1_1211) make-begin19.1)"
"((temp299_1212) 'prim-begin0)"
"((temp300_1213) 1))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp300_1213 temp299_1212)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:417:1_1211"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp300_1213)"
" temp299_1212)))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_1214 ctx_1215)"
"(if(if(expand-context-need-eventually-defined ctx_1215)(>=(expand-context-phase ctx_1215) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_1215)"
"(expand-context-phase ctx_1215)"
"(lambda(l_1216)(cons id_1214 l_1216))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core305_1217)"
"(lambda(s303_1218 ctx304_1219 implicit-omitted?301_1220 implicit-omitted?302_1221)"
"(let-values(((s_1222) s303_1218))"
"(let-values(((ctx_1223) ctx304_1219))"
"(let-values(((implicit-omitted?_1224)"
"(if implicit-omitted?302_1221 implicit-omitted?301_1220 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1228)(expand-context-observer ctx_1223)))"
"(if obs_1228"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1228 'prim-#%top))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1225)(syntax-disarm$1 s_1222)))"
"(let-values(((id_1226)"
"(if implicit-omitted?_1224"
"(let-values() s_1222)"
"(let-values()"
"(let-values(((ok?_1229 #%top307_1230 id308_1231)"
"(let-values(((s_1242) disarmed-s_1225))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1243) s_1242))"
"(let-values(((#%top307_1244 id308_1245)"
"(let-values(((s_1246)"
"(if(syntax?$1"
" s_1242)"
"(syntax-e$1 s_1242)"
" s_1242)))"
"(if(pair? s_1246)"
"(let-values(((#%top309_1247)"
"(let-values(((s_1249)"
"(car"
" s_1246)))"
" s_1249))"
"((id310_1248)"
"(let-values(((s_1250)"
"(cdr"
" s_1246)))"
"(if(let-values(((or-part_1251)"
"(if(syntax?$1"
" s_1250)"
"(symbol?"
"(syntax-e$1"
" s_1250))"
" #f)))"
"(if or-part_1251"
" or-part_1251"
"(symbol?"
" s_1250)))"
" s_1250"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"not an identifier\""
" orig-s_1243"
" s_1250)))))"
"(values"
" #%top309_1247"
" id310_1248))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1243)))))"
"(values #t #%top307_1244 id308_1245)))"
"(values #f #f #f)))))"
" id308_1231)))))"
"(let-values(((b_1227)"
"(let-values(((...nder/expand/expr.rkt:445:13_1252) resolve+shift15.1)"
"((id311_1253) id_1226)"
"((temp312_1254)(expand-context-phase ctx_1223))"
"((temp313_1255) 'ambiguous))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp313_1255"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id311_1253"
" temp312_1254)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:445:13_1252"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp313_1255)"
" id311_1253"
" temp312_1254)))))"
"(if(eq? b_1227 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1226 ctx_1223))"
"(if(if b_1227"
"(if(module-binding? b_1227)"
"(eq?"
"(module-binding-module b_1227)"
"(namespace-mpi(expand-context-namespace ctx_1223)))"
" #f)"
" #f)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_1227))"
"(let-values() s_1222)"
"(let-values() id_1226)))"
"(if(register-eventual-variable!? id_1226 ctx_1223)"
"(let-values() id_1226)"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1223))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1226"
" #f"
" null"
"(syntax-debug-info-string id_1226 ctx_1223)))"
"(let-values()"
"(let-values(((tl-id_1256)"
"(add-scope"
" id_1226"
"(root-expand-context-top-level-bind-scope ctx_1223))))"
"(if(let-values(((tl-id314_1257) tl-id_1256)"
"((temp315_1258)(expand-context-phase ctx_1223)))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve21.1))"
"(resolve19.1 #f #f #f #f #f #f tl-id314_1257 temp315_1258)"
"(resolve21.1 tl-id314_1257 temp315_1258)))"
"(let-values()"
"(let-values(((ok?_1259 #%top316_1260 id317_1261)"
"(let-values(((s_1272) disarmed-s_1225))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1273) s_1272))"
"(let-values(((#%top316_1274 id317_1275)"
"(let-values(((s_1276)"
"(if(syntax?$1"
" s_1272)"
"(syntax-e$1"
" s_1272)"
" s_1272)))"
"(if(pair? s_1276)"
"(let-values(((#%top318_1277)"
"(let-values(((s_1279)"
"(car"
" s_1276)))"
" s_1279))"
"((id319_1278)"
"(let-values(((s_1280)"
"(cdr"
" s_1276)))"
"(if(let-values(((or-part_1281)"
"(if(syntax?$1"
" s_1280)"
"(symbol?"
"(syntax-e$1"
" s_1280))"
" #f)))"
"(if or-part_1281"
" or-part_1281"
"(symbol?"
" s_1280)))"
" s_1280"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"not an identifier\""
" orig-s_1273"
" s_1280)))))"
"(values"
" #%top318_1277"
" id319_1278))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_1273)))))"
"(values #t #%top316_1274 id317_1275)))"
"(values #f #f #f)))))"
"(let-values(((s320_1282) s_1222)"
"((disarmed-s321_1283) disarmed-s_1225)"
"((temp322_1284)(cons #%top316_1260 tl-id_1256)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" s320_1282"
" disarmed-s321_1283"
" temp322_1284)"
"(rebuild101.1"
" s320_1282"
" disarmed-s321_1283"
" temp322_1284)))))"
"(let-values() s_1222))))))))))))))))))))"
"(case-lambda"
"((s_1285 ctx_1286)(core305_1217 s_1285 ctx_1286 #f #f))"
"((s_1287 ctx_1288 implicit-omitted?301_1289)(core305_1217 s_1287 ctx_1288 implicit-omitted?301_1289 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_1290 ctx_1291)"
"(let-values((()"
"(begin"
"(let-values(((obs_1310)(expand-context-observer ctx_1291)))"
"(if obs_1310"
"(let-values()(if #t(let-values()(call-expand-observe obs_1310 'prim-set!))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1292)(syntax-disarm$1 s_1290)))"
"(let-values(((ok?_1293 set!323_1294 id324_1295 rhs325_1296)"
"(let-values(((s_1311) disarmed-s_1292))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1312) s_1311))"
"(let-values(((set!323_1313 id324_1314 rhs325_1315)"
"(let-values(((s_1316)(if(syntax?$1 s_1311)(syntax-e$1 s_1311) s_1311)))"
"(if(pair? s_1316)"
"(let-values(((set!326_1317)"
"(let-values(((s_1320)(car s_1316))) s_1320))"
"((id327_1318 rhs328_1319)"
"(let-values(((s_1321)(cdr s_1316)))"
"(let-values(((s_1322)"
"(if(syntax?$1 s_1321)"
"(syntax-e$1 s_1321)"
" s_1321)))"
"(if(pair? s_1322)"
"(let-values(((id329_1323)"
"(let-values(((s_1325)(car s_1322)))"
"(if(let-values(((or-part_1326)"
"(if(syntax?$1"
" s_1325)"
"(symbol?"
"(syntax-e$1"
" s_1325))"
" #f)))"
"(if or-part_1326"
" or-part_1326"
"(symbol? s_1325)))"
" s_1325"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"not an identifier\""
" orig-s_1312"
" s_1325))))"
"((rhs330_1324)"
"(let-values(((s_1327)(cdr s_1322)))"
"(let-values(((s_1328)"
"(if(syntax?$1"
" s_1327)"
"(syntax-e$1 s_1327)"
" s_1327)))"
"(if(pair? s_1328)"
"(let-values(((rhs331_1329)"
"(let-values(((s_1330)"
"(car"
" s_1328)))"
" s_1330))"
"(()"
"(let-values(((s_1331)"
"(cdr"
" s_1328)))"
"(let-values(((s_1332)"
"(if(syntax?$1"
" s_1331)"
"(syntax-e$1"
" s_1331)"
" s_1331)))"
"(if(null?"
" s_1332)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1312))))))"
"(values rhs331_1329))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1312))))))"
"(values id329_1323 rhs330_1324))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1312))))))"
"(values set!326_1317 id327_1318 rhs328_1319))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1312)))))"
"(values #t set!323_1313 id324_1314 rhs325_1315)))"
"(values #f #f #f #f)))))"
"(let-values(((id_1309) id324_1295))"
"((letrec-values(((rename-loop_1333)"
"(lambda(id_1334 from-rename?_1335)"
"(let-values(((binding_1336)"
"(let-values(((...nder/expand/expr.rkt:487:21_1339) resolve+shift15.1)"
"((id332_1340) id_1334)"
"((temp333_1341)(expand-context-phase ctx_1291))"
"((temp334_1342) 'ambiguous)"
"((temp335_1343) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp334_1342"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp335_1343"
" #t"
" #f"
" #f"
" id332_1340"
" temp333_1341)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:487:21_1339"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp334_1342 temp335_1343)"
" id332_1340"
" temp333_1341)))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1336 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1334 ctx_1291))"
"(void))"
"(values))))"
"(let-values(((t_1337 insp_1338)"
"(if binding_1336"
"(let-values(((binding336_1344) binding_1336)"
"((ctx337_1345) ctx_1291)"
"((s338_1346) s_1290))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" #f"
" #f"
" binding336_1344"
" ctx337_1345"
" s338_1346)"
"(lookup17.1 binding336_1344 ctx337_1345 s338_1346)))"
"(values #f #f))))"
"(begin"
"(let-values(((obs_1347)(expand-context-observer ctx_1291)))"
"(if obs_1347"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1347 'resolve id_1334))"
"(void)))"
"(void)))"
"(if(let-values(((or-part_1348)(variable? t_1337)))"
"(if or-part_1348"
" or-part_1348"
"(if(not binding_1336)"
"(let-values(((or-part_1349)"
"(register-eventual-variable!? id_1334 ctx_1291)))"
"(if or-part_1349"
" or-part_1349"
"(expand-context-allow-unbound? ctx_1291)))"
" #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_1350)(expand-context-observer ctx_1291)))"
"(if obs_1350"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1350 'next))"
"(void)))"
"(void)))"
"(register-variable-referenced-if-local! binding_1336)"
"(let-values(((s339_1351) s_1290)"
"((disarmed-s340_1352) disarmed-s_1292)"
"((temp341_1353)"
"(list"
" set!323_1294"
"(let-values(((...nder/expand/expr.rkt:506:14_1354)"
" substitute-variable8.1)"
"((id342_1355) id_1334)"
"((t343_1356) t_1337)"
"((temp344_1357)"
"(free-id-set-empty?"
"(expand-context-stops ctx_1291))))"
"(if(variable-reference-constant?"
"(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1"
" temp344_1357"
" id342_1355"
" t343_1356)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:506:14_1354"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp344_1357)"
" id342_1355"
" t343_1356)))"
"(let-values(((temp345_1358) rhs325_1296)"
"((temp346_1359)"
"(as-expression-context ctx_1291)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp345_1358 temp346_1359)"
"(expand7.1 temp345_1358 temp346_1359))))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s339_1351 disarmed-s340_1352 temp341_1353)"
"(rebuild101.1 s339_1351 disarmed-s340_1352 temp341_1353)))))"
"(if(not binding_1336)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_1290"
" id_1334"
" null"
"(syntax-debug-info-string id_1334 ctx_1291)))"
"(if(1/set!-transformer? t_1337)"
"(let-values()"
"(if(not-in-this-expand-context? t_1337 ctx_1291)"
"(let-values()"
"(let-values(((temp347_1360)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1290"
" disarmed-s_1292"
" set!323_1294"
" rhs325_1296"
" id_1334"
" from-rename?_1335)"
" t_1337"
" ctx_1291))"
"((ctx348_1361) ctx_1291))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp347_1360 ctx348_1361)"
"(expand7.1 temp347_1360 ctx348_1361))))"
"(let-values()"
"(let-values(((exp-s_1362 re-ctx_1363)"
"(apply-transformer"
" t_1337"
" insp_1338"
" s_1290"
" id_1334"
" ctx_1291"
" binding_1336)))"
"(if(expand-context-just-once? ctx_1291)"
"(let-values() exp-s_1362)"
"(let-values()"
"(let-values(((exp-s349_1364) exp-s_1362)"
"((re-ctx350_1365) re-ctx_1363))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f exp-s349_1364 re-ctx350_1365)"
"(expand7.1 exp-s349_1364 re-ctx350_1365)))))))))"
"(if(1/rename-transformer? t_1337)"
"(let-values()"
"(if(not-in-this-expand-context? t_1337 ctx_1291)"
"(let-values()"
"(let-values(((temp351_1366)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1290"
" disarmed-s_1292"
" set!323_1294"
" rhs325_1296"
" id_1334"
" from-rename?_1335"
" t_1337)"
" t_1337"
" ctx_1291))"
"((ctx352_1367) ctx_1291))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp351_1366 ctx352_1367)"
"(expand7.1 temp351_1366 ctx352_1367))))"
"(let-values()"
"(rename-loop_1333(1/rename-transformer-target t_1337) #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_1290"
" id_1334)))))))))))))"
" rename-loop_1333)"
" id_1309"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename28_1368)"
"(lambda(s22_1369"
" disarmed-s23_1370"
" set!-id24_1371"
" id25_1372"
" rhs-s26_1373"
" from-rename?27_1374"
" t20_1375"
" t21_1376)"
"(let-values(((s_1377) s22_1369))"
"(let-values(((disarmed-s_1378) disarmed-s23_1370))"
"(let-values(((set!-id_1379) set!-id24_1371))"
"(let-values(((id_1380) id25_1372))"
"(let-values(((rhs-s_1381) rhs-s26_1373))"
"(let-values(((from-rename?_1382) from-rename?27_1374))"
"(let-values(((t_1383)(if t21_1376 t20_1375 #f)))"
"(let-values()"
"(if(let-values(((or-part_1384) t_1383))"
"(if or-part_1384 or-part_1384 from-rename?_1382))"
"(let-values()"
"(let-values(((new-id_1385)"
"(if t_1383(1/rename-transformer-target t_1383) id_1380)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_1378"
"(list set!-id_1379 new-id_1385 rhs-s_1381)"
" disarmed-s_1378"
" disarmed-s_1378)"
" s_1377)))"
"(let-values() s_1377)))))))))))))"
"(case-lambda"
"((s_1386 disarmed-s_1387 set!-id_1388 id_1389 rhs-s_1390 from-rename?_1391)"
"(substitute-set!-rename28_1368 s_1386 disarmed-s_1387 set!-id_1388 id_1389 rhs-s_1390 from-rename?_1391 #f #f))"
"((s_1392 disarmed-s_1393 set!-id_1394 id_1395 rhs-s_1396 from-rename?_1397 t20_1398)"
"(substitute-set!-rename28_1368"
" s_1392"
" disarmed-s_1393"
" set!-id_1394"
" id_1395"
" rhs-s_1396"
" from-rename?_1397"
" t20_1398"
" #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_1399 ctx_1400)"
"(let-values((()"
"(begin"
"(let-values(((obs_1441)(expand-context-observer ctx_1400)))"
"(if obs_1441"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1441 'prim-#%variable-reference))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1401)(syntax-disarm$1 s_1399)))"
"(let-values(((ok?_1402 #%variable-reference353_1403 id354_1404)"
"(let-values(((s_1442) disarmed-s_1401))"
"(if(if #t"
"(let-values(((s_1443)(if(syntax?$1 s_1442)(syntax-e$1 s_1442) s_1442)))"
"(if(pair? s_1443)"
"(if(let-values(((s_1444)(car s_1443))) #t)"
"(let-values(((s_1445)(cdr s_1443)))"
"(let-values(((s_1446)(if(syntax?$1 s_1445)(syntax-e$1 s_1445) s_1445)))"
"(if(pair? s_1446)"
"(if(let-values(((s_1447)(car s_1446)))"
"(if(syntax?$1 s_1447)(symbol?(syntax-e$1 s_1447)) #f))"
"(let-values(((s_1448)(cdr s_1446)))"
"(let-values(((s_1449)"
"(if(syntax?$1 s_1448)(syntax-e$1 s_1448) s_1448)))"
"(null? s_1449)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1450) s_1442))"
"(let-values(((#%variable-reference353_1451 id354_1452)"
"(let-values(((s_1453)(if(syntax?$1 s_1442)(syntax-e$1 s_1442) s_1442)))"
"(if #t"
"(let-values(((#%variable-reference355_1454)"
"(let-values(((s_1456)(car s_1453))) s_1456))"
"((id356_1455)"
"(let-values(((s_1457)(cdr s_1453)))"
"(let-values(((s_1458)"
"(if(syntax?$1 s_1457)"
"(syntax-e$1 s_1457)"
" s_1457)))"
"(if #t"
"(let-values(((id357_1459)"
"(let-values(((s_1460)(car s_1458)))"
" s_1460))"
"(()"
"(let-values(((s_1461)(cdr s_1458)))"
"(let-values(((s_1462)"
"(if(syntax?$1"
" s_1461)"
"(syntax-e$1 s_1461)"
" s_1461)))"
"(values)))))"
"(values id357_1459))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1450))))))"
"(values #%variable-reference355_1454 id356_1455))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1450)))))"
"(values #t #%variable-reference353_1451 id354_1452)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1415 #%variable-reference358_1416 #%top359_1417 id360_1418)"
"(let-values(((s_1463) disarmed-s_1401))"
"(if(if(not ok?_1402)"
"(let-values(((s_1464)(if(syntax?$1 s_1463)(syntax-e$1 s_1463) s_1463)))"
"(if(pair? s_1464)"
"(if(let-values(((s_1465)(car s_1464))) #t)"
"(let-values(((s_1466)(cdr s_1464)))"
"(let-values(((s_1467)(if(syntax?$1 s_1466)(syntax-e$1 s_1466) s_1466)))"
"(if(pair? s_1467)"
"(if(let-values(((s_1468)(car s_1467)))"
"(let-values(((s_1469)"
"(if(syntax?$1 s_1468)(syntax-e$1 s_1468) s_1468)))"
"(if(pair? s_1469)"
"(if(let-values(((s_1470)(car s_1469))) #t)"
"(let-values(((s_1471)(cdr s_1469)))"
"(if(syntax?$1 s_1471)(symbol?(syntax-e$1 s_1471)) #f))"
" #f)"
" #f)))"
"(let-values(((s_1472)(cdr s_1467)))"
"(let-values(((s_1473)"
"(if(syntax?$1 s_1472)(syntax-e$1 s_1472) s_1472)))"
"(null? s_1473)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1474) s_1463))"
"(let-values(((#%variable-reference358_1475 #%top359_1476 id360_1477)"
"(let-values(((s_1478)"
"(if(syntax?$1 s_1463)(syntax-e$1 s_1463) s_1463)))"
"(if #t"
"(let-values(((#%variable-reference361_1479)"
"(let-values(((s_1482)(car s_1478))) s_1482))"
"((#%top362_1480 id363_1481)"
"(let-values(((s_1483)(cdr s_1478)))"
"(let-values(((s_1484)"
"(if(syntax?$1 s_1483)"
"(syntax-e$1 s_1483)"
" s_1483)))"
"(if #t"
"(let-values(((#%top364_1485 id365_1486)"
"(let-values(((s_1487)"
"(car s_1484)))"
"(let-values(((s_1488)"
"(if(syntax?$1"
" s_1487)"
"(syntax-e$1"
" s_1487)"
" s_1487)))"
"(if #t"
"(let-values(((#%top366_1489)"
"(let-values(((s_1491)"
"(car"
" s_1488)))"
" s_1491))"
"((id367_1490)"
"(let-values(((s_1492)"
"(cdr"
" s_1488)))"
" s_1492)))"
"(values"
" #%top366_1489"
" id367_1490))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1474)))))"
"(()"
"(let-values(((s_1493)"
"(cdr s_1484)))"
"(let-values(((s_1494)"
"(if(syntax?$1"
" s_1493)"
"(syntax-e$1"
" s_1493)"
" s_1493)))"
"(values)))))"
"(values #%top364_1485 id365_1486))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1474))))))"
"(values #%variable-reference361_1479 #%top362_1480 id363_1481))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_1474)))))"
"(values #t #%variable-reference358_1475 #%top359_1476 id360_1477)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1431 #%variable-reference368_1432)"
"(let-values(((s_1495) disarmed-s_1401))"
"(if(if(not"
"(let-values(((or-part_1496) ok?_1402))"
"(if or-part_1496 or-part_1496 ok?_1415)))"
" #t"
" #f)"
"(let-values(((orig-s_1497) s_1495))"
"(let-values(((#%variable-reference368_1498)"
"(let-values(((s_1499)"
"(if(syntax?$1 s_1495)(syntax-e$1 s_1495) s_1495)))"
"(if(pair? s_1499)"
"(let-values(((#%variable-reference369_1500)"
"(let-values(((s_1501)(car s_1499))) s_1501))"
"(()"
"(let-values(((s_1502)(cdr s_1499)))"
"(let-values(((s_1503)"
"(if(syntax?$1 s_1502)"
"(syntax-e$1 s_1502)"
" s_1502)))"
"(if(null? s_1503)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1497))))))"
"(values #%variable-reference369_1500))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1497)))))"
"(values #t #%variable-reference368_1498)))"
"(values #f #f)))))"
"(begin"
"(if(let-values(((or-part_1504) ok?_1402))(if or-part_1504 or-part_1504 ok?_1415))"
"(let-values()"
"(let-values(((var-id_1505)(if ok?_1402 id354_1404 id360_1418)))"
"(let-values(((binding_1506)"
"(let-values(((...nder/expand/expr.rkt:551:21_1507) resolve+shift15.1)"
"((var-id370_1508) var-id_1505)"
"((temp371_1509)(expand-context-phase ctx_1400))"
"((temp372_1510) 'ambiguous))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp372_1510"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" var-id370_1508"
" temp371_1509)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:551:21_1507"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp372_1510)"
" var-id370_1508"
" temp371_1509)))))"
"(begin"
"(if(eq? binding_1506 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1505 ctx_1400))"
"(void))"
"(if binding_1506"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                  \"unbound identifier\""
" s_1399"
" var-id_1505"
" null"
"(syntax-debug-info-string var-id_1505 ctx_1400))))))))"
"(void))"
" s_1399)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_1511 ctx_1512)"
"(let-values((()"
"(begin"
"(let-values(((obs_1528)(expand-context-observer ctx_1512)))"
"(if obs_1528"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1528 'prim-#%expression))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1513)(syntax-disarm$1 s_1511)))"
"(let-values(((ok?_1514 #%expression373_1515 e374_1516)"
"(let-values(((s_1529) disarmed-s_1513))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1530) s_1529))"
"(let-values(((#%expression373_1531 e374_1532)"
"(let-values(((s_1533)(if(syntax?$1 s_1529)(syntax-e$1 s_1529) s_1529)))"
"(if(pair? s_1533)"
"(let-values(((#%expression375_1534)"
"(let-values(((s_1536)(car s_1533))) s_1536))"
"((e376_1535)"
"(let-values(((s_1537)(cdr s_1533)))"
"(let-values(((s_1538)"
"(if(syntax?$1 s_1537)"
"(syntax-e$1 s_1537)"
" s_1537)))"
"(if(pair? s_1538)"
"(let-values(((e377_1539)"
"(let-values(((s_1540)(car s_1538)))"
" s_1540))"
"(()"
"(let-values(((s_1541)(cdr s_1538)))"
"(let-values(((s_1542)"
"(if(syntax?$1"
" s_1541)"
"(syntax-e$1 s_1541)"
" s_1541)))"
"(if(null? s_1542)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1530))))))"
"(values e377_1539))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1530))))))"
"(values #%expression375_1534 e376_1535))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1530)))))"
"(values #t #%expression373_1531 e374_1532)))"
"(values #f #f #f)))))"
"(let-values(((exp-e_1527)"
"(let-values(((temp378_1543) e374_1516)"
"((temp379_1544)"
"(let-values(((...nder/expand/expr.rkt:566:32_1545) as-tail-context14.1)"
"((temp380_1546)(as-expression-context ctx_1512))"
"((ctx381_1547) ctx_1512))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx381_1547 temp380_1546)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:566:32_1545"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx381_1547)"
" temp380_1546)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp378_1543 temp379_1544)"
"(expand7.1 temp378_1543 temp379_1544)))))"
"(let-values(((tmp_1548)"
"(if(not(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_1512))"
"(expand-context-context ctx_1512)"
" #f)))"
"(if(equal? tmp_1548 'expression)"
"(let-values()"
"(let-values(((result-s_1549)(syntax-track-origin$1 exp-e_1527 s_1511)))"
"(begin"
"(let-values(((obs_1550)(expand-context-observer ctx_1512)))"
"(if obs_1550"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1550 'tag result-s_1549))(void)))"
"(void)))"
" result-s_1549)))"
"(let-values()"
"(let-values(((s382_1551) s_1511)"
"((disarmed-s383_1552) disarmed-s_1513)"
"((temp384_1553)(list #%expression373_1515 exp-e_1527)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s382_1551 disarmed-s383_1552 temp384_1553)"
"(rebuild101.1 s382_1551 disarmed-s383_1552 temp384_1553)))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_1554 ctx_1555) (raise-syntax-error$1 #f \"not in quasiquote\" s_1554))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_1556 ctx_1557) (raise-syntax-error$1 #f \"not in quasiquote\" s_1556))))"
" print-values)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_1 id_2 at-phase_3 ns_4)"
"(if(not at-phase_3)"
"(let-values()"
"(let-values(((m_5)(namespace->module ns_4(1/module-path-index-resolve(module-binding-nominal-module b_1)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_1) '#hasheq())"
"(module-binding-nominal-sym b_1)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 insp_8)"
"(let-values(((b1_9) b_1)"
"((empty-env2_10) empty-env)"
"((null3_11) null)"
"((ns4_12) ns_4)"
"((at-phase5_13) at-phase_3)"
"((id6_14) id_2))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup48.1))"
"(binding-lookup46.1 #f #f #f #f b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)"
"(binding-lookup48.1 b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)))))"
"(not(variable? val_7)))))))"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6 expand_7 rebuild_8)"
"(let-values(((ns_9)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_10)"
"(lambda(specs_11 at-phase_12 protected?_13 layer_14)"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_15) specs_11))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(fold-var_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((spec_19)(unsafe-car lst_18)))"
"(if #t"
"(let-values(((fold-var_20)"
"(let-values(((fold-var_21) fold-var_17))"
"(let-values(((fold-var_22)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((disarmed-spec_23)"
"(syntax-disarm$1"
" spec_19)))"
"(let-values(((fm_24)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_23))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_23)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_23)))"
" #f)"
" #f)))"
"(let-values(((check-nested_25)"
"(lambda(want-layer_26)"
"(if(member"
" want-layer_26"
"(member"
" layer_14"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                       \"nested `~a' not allowed\""
" fm_24)"
" orig-s_2"
" spec_19))))))"
"(let-values(((tmp_27)"
" fm_24))"
"(let-values(((index_28)"
"(if(symbol?"
" tmp_27)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_27"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_28"
" 6)"
"(if(unsafe-fx<"
" index_28"
" 2)"
"(if(unsafe-fx<"
" index_28"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_19)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_19"
" orig-s_2"
"(syntax-e$1"
" spec_19)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                    \"bad syntax\""
" orig-s_2"
" spec_19))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'raw)"
"(values))))"
"(let-values(((ok?_29"
" for-meta1_30"
" phase-level2_31"
" spec3_32)"
"(let-values(((s_46)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_47)"
" s_46))"
"(let-values(((for-meta1_48"
" phase-level2_49"
" spec3_50)"
"(let-values(((s_51)"
"(if(syntax?$1"
" s_46)"
"(syntax-e$1"
" s_46)"
" s_46)))"
"(if(pair?"
" s_51)"
"(let-values(((for-meta4_52)"
"(let-values(((s_55)"
"(car"
" s_51)))"
" s_55))"
"((phase-level5_53"
" spec6_54)"
"(let-values(((s_56)"
"(cdr"
" s_51)))"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(pair?"
" s_57)"
"(let-values(((phase-level7_58)"
"(let-values(((s_60)"
"(car"
" s_57)))"
" s_60))"
"((spec8_59)"
"(let-values(((s_61)"
"(cdr"
" s_57)))"
"(let-values(((s_62)"
"(if(syntax?$1"
" s_61)"
"(syntax-e$1"
" s_61)"
" s_61)))"
"(let-values(((flat-s_63)"
"(to-syntax-list.1"
" s_62)))"
"(if(not"
" flat-s_63)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_47))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                      \"bad syntax\""
" orig-s_47))"
"(let-values()"
" flat-s_63))))))))"
"(values"
" phase-level7_58"
" spec8_59))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_47))))))"
"(values"
" for-meta4_52"
" phase-level5_53"
" spec6_54))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_47)))))"
"(values"
" #t"
" for-meta1_48"
" phase-level2_49"
" spec3_50)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_45)"
"(syntax-e$1"
" phase-level2_31)))"
"(begin"
"(if(phase?"
" p_45)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                            \"bad `for-meta' phase\""
" orig-s_2"
" spec_19)))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
" for-meta1_30"
" phase-level2_31"
"(loop_10"
" spec3_32"
"(phase+"
" p_45"
" at-phase_12)"
" protected?_13"
" 'phaseless))))))))))"
"(if(unsafe-fx<"
" index_28"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'raw)"
"(values))))"
"(let-values(((ok?_64"
" for-syntax9_65"
" spec10_66)"
"(let-values(((s_77)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_78)"
" s_77))"
"(let-values(((for-syntax9_79"
" spec10_80)"
"(let-values(((s_81)"
"(if(syntax?$1"
" s_77)"
"(syntax-e$1"
" s_77)"
" s_77)))"
"(if(pair?"
" s_81)"
"(let-values(((for-syntax11_82)"
"(let-values(((s_84)"
"(car"
" s_81)))"
" s_84))"
"((spec12_83)"
"(let-values(((s_85)"
"(cdr"
" s_81)))"
"(let-values(((s_86)"
"(if(syntax?$1"
" s_85)"
"(syntax-e$1"
" s_85)"
" s_85)))"
"(let-values(((flat-s_87)"
"(to-syntax-list.1"
" s_86)))"
"(if(not"
" flat-s_87)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_78))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                  \"bad syntax\""
" orig-s_78))"
"(let-values()"
" flat-s_87))))))))"
"(values"
" for-syntax11_82"
" spec12_83))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_78)))))"
"(values"
" #t"
" for-syntax9_79"
" spec10_80)))"
"(values"
" #f"
" #f"
" #f)))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
" for-syntax9_65"
"(loop_10"
" spec10_66"
"(phase+"
" 1"
" at-phase_12)"
" protected?_13"
" 'phaseless)))))))"
"(if(unsafe-fx<"
" index_28"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'raw)"
"(values))))"
"(let-values(((ok?_88"
" for-label13_89"
" spec14_90)"
"(let-values(((s_101)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_102)"
" s_101))"
"(let-values(((for-label13_103"
" spec14_104)"
"(let-values(((s_105)"
"(if(syntax?$1"
" s_101)"
"(syntax-e$1"
" s_101)"
" s_101)))"
"(if(pair?"
" s_105)"
"(let-values(((for-label15_106)"
"(let-values(((s_108)"
"(car"
" s_105)))"
" s_108))"
"((spec16_107)"
"(let-values(((s_109)"
"(cdr"
" s_105)))"
"(let-values(((s_110)"
"(if(syntax?$1"
" s_109)"
"(syntax-e$1"
" s_109)"
" s_109)))"
"(let-values(((flat-s_111)"
"(to-syntax-list.1"
" s_110)))"
"(if(not"
" flat-s_111)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                  \"bad syntax\""
" orig-s_102))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                    \"bad syntax\""
" orig-s_102))"
"(let-values()"
" flat-s_111))))))))"
"(values"
" for-label15_106"
" spec16_107))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_102)))))"
"(values"
" #t"
" for-label13_103"
" spec14_104)))"
"(values"
" #f"
" #f"
" #f)))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
" for-label13_89"
"(loop_10"
" spec14_90"
" #f"
" protected?_13"
" 'phaseless)))))))"
"(if(unsafe-fx<"
" index_28"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_13"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                          \"nested `protect' not allowed\""
" orig-s_2"
" spec_19))"
"(void))"
"(values))))"
"(let-values(((ok?_112"
" protect17_113"
" p-spec18_114)"
"(let-values(((s_125)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_126)"
" s_125))"
"(let-values(((protect17_127"
" p-spec18_128)"
"(let-values(((s_129)"
"(if(syntax?$1"
" s_125)"
"(syntax-e$1"
" s_125)"
" s_125)))"
"(if(pair?"
" s_129)"
"(let-values(((protect19_130)"
"(let-values(((s_132)"
"(car"
" s_129)))"
" s_132))"
"((p-spec20_131)"
"(let-values(((s_133)"
"(cdr"
" s_129)))"
"(let-values(((s_134)"
"(if(syntax?$1"
" s_133)"
"(syntax-e$1"
" s_133)"
" s_133)))"
"(let-values(((flat-s_135)"
"(to-syntax-list.1"
" s_134)))"
"(if(not"
" flat-s_135)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                      \"bad syntax\""
" orig-s_126))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                        \"bad syntax\""
" orig-s_126))"
"(let-values()"
" flat-s_135))))))))"
"(values"
" protect19_130"
" p-spec20_131))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                              \"bad syntax\""
" orig-s_126)))))"
"(values"
" #t"
" protect17_127"
" p-spec18_128)))"
"(values"
" #f"
" #f"
" #f)))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
" protect17_113"
"(loop_10"
" p-spec18_114"
" at-phase_12"
" #t"
" layer_14))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_136"
" rename21_137"
" id:from22_138"
" id:to23_139)"
"(let-values(((s_152)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_153)"
" s_152))"
"(let-values(((rename21_154"
" id:from22_155"
" id:to23_156)"
"(let-values(((s_157)"
"(if(syntax?$1"
" s_152)"
"(syntax-e$1"
" s_152)"
" s_152)))"
"(if(pair?"
" s_157)"
"(let-values(((rename24_158)"
"(let-values(((s_161)"
"(car"
" s_157)))"
" s_161))"
"((id:from25_159"
" id:to26_160)"
"(let-values(((s_162)"
"(cdr"
" s_157)))"
"(let-values(((s_163)"
"(if(syntax?$1"
" s_162)"
"(syntax-e$1"
" s_162)"
" s_162)))"
"(if(pair?"
" s_163)"
"(let-values(((id:from27_164)"
"(let-values(((s_166)"
"(car"
" s_163)))"
"(if(let-values(((or-part_167)"
"(if(syntax?$1"
" s_166)"
"(symbol?"
"(syntax-e$1"
" s_166))"
" #f)))"
"(if or-part_167"
" or-part_167"
"(symbol?"
" s_166)))"
" s_166"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"not an identifier\""
" orig-s_153"
" s_166))))"
"((id:to28_165)"
"(let-values(((s_168)"
"(cdr"
" s_163)))"
"(let-values(((s_169)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(pair?"
" s_169)"
"(let-values(((id:to29_170)"
"(let-values(((s_171)"
"(car"
" s_169)))"
"(if(let-values(((or-part_172)"
"(if(syntax?$1"
" s_171)"
"(symbol?"
"(syntax-e$1"
" s_171))"
" #f)))"
"(if or-part_172"
" or-part_172"
"(symbol?"
" s_171)))"
" s_171"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                      \"not an identifier\""
" orig-s_153"
" s_171))))"
"(()"
"(let-values(((s_173)"
"(cdr"
" s_169)))"
"(let-values(((s_174)"
"(if(syntax?$1"
" s_173)"
"(syntax-e$1"
" s_173)"
" s_173)))"
"(if(null?"
" s_174)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                        \"bad syntax\""
" orig-s_153))))))"
"(values"
" id:to29_170))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_153))))))"
"(values"
" id:from27_164"
" id:to28_165))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_153))))))"
"(values"
" rename24_158"
" id:from25_159"
" id:to26_160))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                            \"bad syntax\""
" orig-s_153)))))"
"(values"
" #t"
" rename21_154"
" id:from22_155"
" id:to23_156)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-identifier!"
" id:from22_138"
" orig-s_2"
"(syntax-e$1"
" id:to23_139)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))))))"
"(if(unsafe-fx<"
" index_28"
" 9)"
"(if(unsafe-fx<"
" index_28"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_175"
" struct30_176"
" id:struct31_177"
" id:field32_178)"
"(let-values(((s_191)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_192)"
" s_191))"
"(let-values(((struct30_193"
" id:struct31_194"
" id:field32_195)"
"(let-values(((s_196)"
"(if(syntax?$1"
" s_191)"
"(syntax-e$1"
" s_191)"
" s_191)))"
"(if(pair?"
" s_196)"
"(let-values(((struct33_197)"
"(let-values(((s_200)"
"(car"
" s_196)))"
" s_200))"
"((id:struct34_198"
" id:field35_199)"
"(let-values(((s_201)"
"(cdr"
" s_196)))"
"(let-values(((s_202)"
"(if(syntax?$1"
" s_201)"
"(syntax-e$1"
" s_201)"
" s_201)))"
"(if(pair?"
" s_202)"
"(let-values(((id:struct36_203)"
"(let-values(((s_205)"
"(car"
" s_202)))"
"(if(let-values(((or-part_206)"
"(if(syntax?$1"
" s_205)"
"(symbol?"
"(syntax-e$1"
" s_205))"
" #f)))"
"(if or-part_206"
" or-part_206"
"(symbol?"
" s_205)))"
" s_205"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"not an identifier\""
" orig-s_192"
" s_205))))"
"((id:field37_204)"
"(let-values(((s_207)"
"(cdr"
" s_202)))"
"(let-values(((s_208)"
"(if(syntax?$1"
" s_207)"
"(syntax-e$1"
" s_207)"
" s_207)))"
"(if(pair?"
" s_208)"
"(let-values(((id:field38_209)"
"(let-values(((s_210)"
"(car"
" s_208)))"
"(let-values(((s_211)"
"(if(syntax?$1"
" s_210)"
"(syntax-e$1"
" s_210)"
" s_210)))"
"(let-values(((flat-s_212)"
"(to-syntax-list.1"
" s_211)))"
"(if(not"
" flat-s_212)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                        \"bad syntax\""
" orig-s_192))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                          \"bad syntax\""
" orig-s_192))"
"(let-values()"
"(let-values(((id:field_213)"
"(let-values(((lst_214)"
" flat-s_212))"
"(begin"
"(if(list?"
" lst_214)"
"(void)"
"(let-values()"
"(in-list"
" lst_214)))"
"((letrec-values(((for-loop_215)"
"(lambda(id:field_216"
" lst_217)"
"(if(pair?"
" lst_217)"
"(let-values(((s_218)"
"(unsafe-car"
" lst_217)))"
"(if #t"
"(let-values(((id:field_219)"
"(let-values(((id:field_220)"
" id:field_216))"
"(let-values(((id:field_221)"
"(let-values()"
"(let-values(((id:field39_222)"
"(let-values()"
"(if(let-values(((or-part_223)"
"(if(syntax?$1"
" s_218)"
"(symbol?"
"(syntax-e$1"
" s_218))"
" #f)))"
"(if or-part_223"
" or-part_223"
"(symbol?"
" s_218)))"
" s_218"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                        \"not an identifier\""
" orig-s_192"
" s_218)))))"
"(cons"
" id:field39_222"
" id:field_220)))))"
"(values"
" id:field_221)))))"
"(if #t"
"(for-loop_215"
" id:field_219"
"(unsafe-cdr"
" lst_217))"
" id:field_219))"
" id:field_216))"
" id:field_216))))"
" for-loop_215)"
" null"
" lst_214)))))"
"(alt-reverse"
" id:field_213)))))))))"
"(()"
"(let-values(((s_224)"
"(cdr"
" s_208)))"
"(let-values(((s_225)"
"(if(syntax?$1"
" s_224)"
"(syntax-e$1"
" s_224)"
" s_224)))"
"(if(null?"
" s_225)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                    \"bad syntax\""
" orig-s_192))))))"
"(values"
" id:field38_209))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_192))))))"
"(values"
" id:struct36_203"
" id:field37_204))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_192))))))"
"(values"
" struct33_197"
" id:struct34_198"
" id:field35_199))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_192)))))"
"(values"
" #t"
" struct30_193"
" id:struct31_194"
" id:field32_195)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-struct!"
" id:struct31_177"
" orig-s_2"
" id:field32_178"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(if(unsafe-fx<"
" index_28"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_226"
" all-from40_227"
" mod-path41_228)"
"(let-values(((s_239)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_240)"
" s_239))"
"(let-values(((all-from40_241"
" mod-path41_242)"
"(let-values(((s_243)"
"(if(syntax?$1"
" s_239)"
"(syntax-e$1"
" s_239)"
" s_239)))"
"(if(pair?"
" s_243)"
"(let-values(((all-from42_244)"
"(let-values(((s_246)"
"(car"
" s_243)))"
" s_246))"
"((mod-path43_245)"
"(let-values(((s_247)"
"(cdr"
" s_243)))"
"(let-values(((s_248)"
"(if(syntax?$1"
" s_247)"
"(syntax-e$1"
" s_247)"
" s_247)))"
"(if(pair?"
" s_248)"
"(let-values(((mod-path44_249)"
"(let-values(((s_250)"
"(car"
" s_248)))"
" s_250))"
"(()"
"(let-values(((s_251)"
"(cdr"
" s_248)))"
"(let-values(((s_252)"
"(if(syntax?$1"
" s_251)"
"(syntax-e$1"
" s_251)"
" s_251)))"
"(if(null?"
" s_252)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_240))))))"
"(values"
" mod-path44_249))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_240))))))"
"(values"
" all-from42_244"
" mod-path43_245))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_240)))))"
"(values"
" #t"
" all-from40_241"
" mod-path41_242)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from"
" mod-path41_228"
" orig-s_2"
" self_4"
" null"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_253"
" all-from-except45_254"
" mod-path46_255"
" id47_256)"
"(let-values(((s_269)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_270)"
" s_269))"
"(let-values(((all-from-except45_271"
" mod-path46_272"
" id47_273)"
"(let-values(((s_274)"
"(if(syntax?$1"
" s_269)"
"(syntax-e$1"
" s_269)"
" s_269)))"
"(if(pair?"
" s_274)"
"(let-values(((all-from-except48_275)"
"(let-values(((s_278)"
"(car"
" s_274)))"
" s_278))"
"((mod-path49_276"
" id50_277)"
"(let-values(((s_279)"
"(cdr"
" s_274)))"
"(let-values(((s_280)"
"(if(syntax?$1"
" s_279)"
"(syntax-e$1"
" s_279)"
" s_279)))"
"(if(pair?"
" s_280)"
"(let-values(((mod-path51_281)"
"(let-values(((s_283)"
"(car"
" s_280)))"
" s_283))"
"((id52_282)"
"(let-values(((s_284)"
"(cdr"
" s_280)))"
"(let-values(((s_285)"
"(if(syntax?$1"
" s_284)"
"(syntax-e$1"
" s_284)"
" s_284)))"
"(let-values(((flat-s_286)"
"(to-syntax-list.1"
" s_285)))"
"(if(not"
" flat-s_286)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                      \"bad syntax\""
" orig-s_270))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                        \"bad syntax\""
" orig-s_270))"
"(let-values()"
"(let-values(((id_287)"
"(let-values(((lst_288)"
" flat-s_286))"
"(begin"
"(if(list?"
" lst_288)"
"(void)"
"(let-values()"
"(in-list"
" lst_288)))"
"((letrec-values(((for-loop_289)"
"(lambda(id_290"
" lst_291)"
"(if(pair?"
" lst_291)"
"(let-values(((s_292)"
"(unsafe-car"
" lst_291)))"
"(if #t"
"(let-values(((id_293)"
"(let-values(((id_294)"
" id_290))"
"(let-values(((id_295)"
"(let-values()"
"(let-values(((id53_296)"
"(let-values()"
"(if(let-values(((or-part_297)"
"(if(syntax?$1"
" s_292)"
"(symbol?"
"(syntax-e$1"
" s_292))"
" #f)))"
"(if or-part_297"
" or-part_297"
"(symbol?"
" s_292)))"
" s_292"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                      \"not an identifier\""
" orig-s_270"
" s_292)))))"
"(cons"
" id53_296"
" id_294)))))"
"(values"
" id_295)))))"
"(if #t"
"(for-loop_289"
" id_293"
"(unsafe-cdr"
" lst_291))"
" id_293))"
" id_290))"
" id_290))))"
" for-loop_289)"
" null"
" lst_288)))))"
"(alt-reverse"
" id_287))))))))))"
"(values"
" mod-path51_281"
" id52_282))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_270))))))"
"(values"
" all-from-except48_275"
" mod-path49_276"
" id50_277))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_270)))))"
"(values"
" #t"
" all-from-except45_271"
" mod-path46_272"
" id47_273)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from"
" mod-path46_255"
" orig-s_2"
" self_4"
" id47_256"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))))"
"(if(unsafe-fx<"
" index_28"
" 11)"
"(if(unsafe-fx<"
" index_28"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_298"
" all-defined54_299)"
"(let-values(((s_308)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_309)"
" s_308))"
"(let-values(((all-defined54_310)"
"(let-values(((s_311)"
"(if(syntax?$1"
" s_308)"
"(syntax-e$1"
" s_308)"
" s_308)))"
"(if(pair?"
" s_311)"
"(let-values(((all-defined55_312)"
"(let-values(((s_313)"
"(car"
" s_311)))"
" s_313))"
"(()"
"(let-values(((s_314)"
"(cdr"
" s_311)))"
"(let-values(((s_315)"
"(if(syntax?$1"
" s_314)"
"(syntax-e$1"
" s_314)"
" s_314)))"
"(if(null?"
" s_315)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_309))))))"
"(values"
" all-defined55_312))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_309)))))"
"(values"
" #t"
" all-defined54_310)))"
"(values"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" null"
" #f"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_316"
" all-defined-except56_317"
" id57_318)"
"(let-values(((s_329)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_330)"
" s_329))"
"(let-values(((all-defined-except56_331"
" id57_332)"
"(let-values(((s_333)"
"(if(syntax?$1"
" s_329)"
"(syntax-e$1"
" s_329)"
" s_329)))"
"(if(pair?"
" s_333)"
"(let-values(((all-defined-except58_334)"
"(let-values(((s_336)"
"(car"
" s_333)))"
" s_336))"
"((id59_335)"
"(let-values(((s_337)"
"(cdr"
" s_333)))"
"(let-values(((s_338)"
"(if(syntax?$1"
" s_337)"
"(syntax-e$1"
" s_337)"
" s_337)))"
"(let-values(((flat-s_339)"
"(to-syntax-list.1"
" s_338)))"
"(if(not"
" flat-s_339)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                  \"bad syntax\""
" orig-s_330))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                    \"bad syntax\""
" orig-s_330))"
"(let-values()"
"(let-values(((id_340)"
"(let-values(((lst_341)"
" flat-s_339))"
"(begin"
"(if(list?"
" lst_341)"
"(void)"
"(let-values()"
"(in-list"
" lst_341)))"
"((letrec-values(((for-loop_342)"
"(lambda(id_343"
" lst_344)"
"(if(pair?"
" lst_344)"
"(let-values(((s_345)"
"(unsafe-car"
" lst_344)))"
"(if #t"
"(let-values(((id_346)"
"(let-values(((id_347)"
" id_343))"
"(let-values(((id_348)"
"(let-values()"
"(let-values(((id60_349)"
"(let-values()"
"(if(let-values(((or-part_350)"
"(if(syntax?$1"
" s_345)"
"(symbol?"
"(syntax-e$1"
" s_345))"
" #f)))"
"(if or-part_350"
" or-part_350"
"(symbol?"
" s_345)))"
" s_345"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                  \"not an identifier\""
" orig-s_330"
" s_345)))))"
"(cons"
" id60_349"
" id_347)))))"
"(values"
" id_348)))))"
"(if #t"
"(for-loop_342"
" id_346"
"(unsafe-cdr"
" lst_344))"
" id_346))"
" id_343))"
" id_343))))"
" for-loop_342)"
" null"
" lst_341)))))"
"(alt-reverse"
" id_340))))))))))"
"(values"
" all-defined-except58_334"
" id59_335))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_330)))))"
"(values"
" #t"
" all-defined-except56_331"
" id57_332)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" id57_318"
" #f"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19))))))"
"(if(unsafe-fx<"
" index_28"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_351"
" prefix-all-defined61_352"
" id:prefix62_353)"
"(let-values(((s_364)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_365)"
" s_364))"
"(let-values(((prefix-all-defined61_366"
" id:prefix62_367)"
"(let-values(((s_368)"
"(if(syntax?$1"
" s_364)"
"(syntax-e$1"
" s_364)"
" s_364)))"
"(if(pair?"
" s_368)"
"(let-values(((prefix-all-defined63_369)"
"(let-values(((s_371)"
"(car"
" s_368)))"
" s_371))"
"((id:prefix64_370)"
"(let-values(((s_372)"
"(cdr"
" s_368)))"
"(let-values(((s_373)"
"(if(syntax?$1"
" s_372)"
"(syntax-e$1"
" s_372)"
" s_372)))"
"(if(pair?"
" s_373)"
"(let-values(((id:prefix65_374)"
"(let-values(((s_375)"
"(car"
" s_373)))"
"(if(let-values(((or-part_376)"
"(if(syntax?$1"
" s_375)"
"(symbol?"
"(syntax-e$1"
" s_375))"
" #f)))"
"(if or-part_376"
" or-part_376"
"(symbol?"
" s_375)))"
" s_375"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"not an identifier\""
" orig-s_365"
" s_375))))"
"(()"
"(let-values(((s_377)"
"(cdr"
" s_373)))"
"(let-values(((s_378)"
"(if(syntax?$1"
" s_377)"
"(syntax-e$1"
" s_377)"
" s_377)))"
"(if(null?"
" s_378)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_365))))))"
"(values"
" id:prefix65_374))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_365))))))"
"(values"
" prefix-all-defined63_369"
" id:prefix64_370))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_365)))))"
"(values"
" #t"
" prefix-all-defined61_366"
" id:prefix62_367)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" null"
"(syntax-e$1"
" id:prefix62_353)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(if(unsafe-fx<"
" index_28"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_379"
" prefix-all-defined-except66_380"
" id:prefix67_381"
" id68_382)"
"(let-values(((s_395)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_396)"
" s_395))"
"(let-values(((prefix-all-defined-except66_397"
" id:prefix67_398"
" id68_399)"
"(let-values(((s_400)"
"(if(syntax?$1"
" s_395)"
"(syntax-e$1"
" s_395)"
" s_395)))"
"(if(pair?"
" s_400)"
"(let-values(((prefix-all-defined-except69_401)"
"(let-values(((s_404)"
"(car"
" s_400)))"
" s_404))"
"((id:prefix70_402"
" id71_403)"
"(let-values(((s_405)"
"(cdr"
" s_400)))"
"(let-values(((s_406)"
"(if(syntax?$1"
" s_405)"
"(syntax-e$1"
" s_405)"
" s_405)))"
"(if(pair?"
" s_406)"
"(let-values(((id:prefix72_407)"
"(let-values(((s_409)"
"(car"
" s_406)))"
"(if(let-values(((or-part_410)"
"(if(syntax?$1"
" s_409)"
"(symbol?"
"(syntax-e$1"
" s_409))"
" #f)))"
"(if or-part_410"
" or-part_410"
"(symbol?"
" s_409)))"
" s_409"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"not an identifier\""
" orig-s_396"
" s_409))))"
"((id73_408)"
"(let-values(((s_411)"
"(cdr"
" s_406)))"
"(let-values(((s_412)"
"(if(syntax?$1"
" s_411)"
"(syntax-e$1"
" s_411)"
" s_411)))"
"(let-values(((flat-s_413)"
"(to-syntax-list.1"
" s_412)))"
"(if(not"
" flat-s_413)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                        \"bad syntax\""
" orig-s_396))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                          \"bad syntax\""
" orig-s_396))"
"(let-values()"
"(let-values(((id_414)"
"(let-values(((lst_415)"
" flat-s_413))"
"(begin"
"(if(list?"
" lst_415)"
"(void)"
"(let-values()"
"(in-list"
" lst_415)))"
"((letrec-values(((for-loop_416)"
"(lambda(id_417"
" lst_418)"
"(if(pair?"
" lst_418)"
"(let-values(((s_419)"
"(unsafe-car"
" lst_418)))"
"(if #t"
"(let-values(((id_420)"
"(let-values(((id_421)"
" id_417))"
"(let-values(((id_422)"
"(let-values()"
"(let-values(((id74_423)"
"(let-values()"
"(if(let-values(((or-part_424)"
"(if(syntax?$1"
" s_419)"
"(symbol?"
"(syntax-e$1"
" s_419))"
" #f)))"
"(if or-part_424"
" or-part_424"
"(symbol?"
" s_419)))"
" s_419"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                        \"not an identifier\""
" orig-s_396"
" s_419)))))"
"(cons"
" id74_423"
" id_421)))))"
"(values"
" id_422)))))"
"(if #t"
"(for-loop_416"
" id_420"
"(unsafe-cdr"
" lst_418))"
" id_420))"
" id_417))"
" id_417))))"
" for-loop_416)"
" null"
" lst_415)))))"
"(alt-reverse"
" id_414))))))))))"
"(values"
" id:prefix72_407"
" id73_408))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_396))))))"
"(values"
" prefix-all-defined-except69_401"
" id:prefix70_402"
" id71_403))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                            \"bad syntax\""
" orig-s_396)))))"
"(values"
" #t"
" prefix-all-defined-except66_397"
" id:prefix67_398"
" id68_399)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" id68_382"
"(syntax-e$1"
" id:prefix67_381)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values(((ok?_425"
" expand75_426"
" id76_427"
" datum77_428)"
"(let-values(((s_468)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_469)"
" s_468))"
"(let-values(((expand75_470"
" id76_471"
" datum77_472)"
"(let-values(((s_473)"
"(if(syntax?$1"
" s_468)"
"(syntax-e$1"
" s_468)"
" s_468)))"
"(if(pair?"
" s_473)"
"(let-values(((expand78_474)"
"(let-values(((s_477)"
"(car"
" s_473)))"
" s_477))"
"((id79_475"
" datum80_476)"
"(let-values(((s_478)"
"(cdr"
" s_473)))"
"(let-values(((s_479)"
"(if(syntax?$1"
" s_478)"
"(syntax-e$1"
" s_478)"
" s_478)))"
"(if(pair?"
" s_479)"
"(let-values(((id81_480"
" datum82_481)"
"(let-values(((s_482)"
"(car"
" s_479)))"
"(let-values(((s_483)"
"(if(syntax?$1"
" s_482)"
"(syntax-e$1"
" s_482)"
" s_482)))"
"(if(pair?"
" s_483)"
"(let-values(((id83_484)"
"(let-values(((s_486)"
"(car"
" s_483)))"
"(if(let-values(((or-part_487)"
"(if(syntax?$1"
" s_486)"
"(symbol?"
"(syntax-e$1"
" s_486))"
" #f)))"
"(if or-part_487"
" or-part_487"
"(symbol?"
" s_486)))"
" s_486"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                    \"not an identifier\""
" orig-s_469"
" s_486))))"
"((datum84_485)"
"(let-values(((s_488)"
"(cdr"
" s_483)))"
" s_488)))"
"(values"
" id83_484"
" datum84_485))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_469)))))"
"(()"
"(let-values(((s_489)"
"(cdr"
" s_479)))"
"(let-values(((s_490)"
"(if(syntax?$1"
" s_489)"
"(syntax-e$1"
" s_489)"
" s_489)))"
"(if(null?"
" s_490)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_469))))))"
"(values"
" id81_480"
" datum82_481))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_469))))))"
"(values"
" expand78_474"
" id79_475"
" datum80_476))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_469)))))"
"(values"
" #t"
" expand75_470"
" id76_471"
" datum77_472)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ok?_441"
" expand85_442"
" form86_443)"
"(let-values(((s_491)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_492)"
" s_491))"
"(let-values(((expand85_493"
" form86_494)"
"(let-values(((s_495)"
"(if(syntax?$1"
" s_491)"
"(syntax-e$1"
" s_491)"
" s_491)))"
"(if(pair?"
" s_495)"
"(let-values(((expand87_496)"
"(let-values(((s_498)"
"(car"
" s_495)))"
" s_498))"
"((form88_497)"
"(let-values(((s_499)"
"(cdr"
" s_495)))"
"(let-values(((s_500)"
"(if(syntax?$1"
" s_499)"
"(syntax-e$1"
" s_499)"
" s_499)))"
"(if(pair?"
" s_500)"
"(let-values(((form89_501)"
"(let-values(((s_502)"
"(car"
" s_500)))"
" s_502))"
"(()"
"(let-values(((s_503)"
"(cdr"
" s_500)))"
"(let-values(((s_504)"
"(if(syntax?$1"
" s_503)"
"(syntax-e$1"
" s_503)"
" s_503)))"
"(if(null?"
" s_504)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_492))))))"
"(values"
" form89_501))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_492))))))"
"(values"
" expand87_496"
" form88_497))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                            \"bad syntax\""
" orig-s_492)))))"
"(values"
" #t"
" expand85_493"
" form86_494)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((exp-spec_454)"
"(expand_7"
" form86_443"
"(let-values(((the-struct_505)"
" ctx_6))"
"(if(expand-context?"
" the-struct_505)"
"(let-values(((only-immediate?94_506)"
" #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_505)"
"(root-expand-context-post-expansion-scope"
" the-struct_505)"
"(root-expand-context-top-level-bind-scope"
" the-struct_505)"
"(root-expand-context-all-scopes-stx"
" the-struct_505)"
"(root-expand-context-use-site-scopes"
" the-struct_505)"
"(root-expand-context-defined-syms"
" the-struct_505)"
"(root-expand-context-frame-id"
" the-struct_505)"
"(root-expand-context-counter"
" the-struct_505)"
"(root-expand-context-lift-key"
" the-struct_505)"
"(expand-context-context"
" the-struct_505)"
"(expand-context-phase"
" the-struct_505)"
"(expand-context-namespace"
" the-struct_505)"
"(expand-context-env"
" the-struct_505)"
"(expand-context-post-expansion-scope-action"
" the-struct_505)"
"(expand-context-scopes"
" the-struct_505)"
"(expand-context-def-ctx-scopes"
" the-struct_505)"
"(expand-context-reference-records"
" the-struct_505)"
" only-immediate?94_506"
"(expand-context-just-once?"
" the-struct_505)"
"(expand-context-module-begin-k"
" the-struct_505)"
"(expand-context-need-eventually-defined"
" the-struct_505)"
"(expand-context-allow-unbound?"
" the-struct_505)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_505)"
"(expand-context-stops"
" the-struct_505)"
"(expand-context-current-introduction-scopes"
" the-struct_505)"
"(expand-context-declared-submodule-names"
" the-struct_505)"
"(expand-context-lifts"
" the-struct_505)"
"(expand-context-lift-envs"
" the-struct_505)"
"(expand-context-module-lifts"
" the-struct_505)"
"(expand-context-require-lifts"
" the-struct_505)"
"(expand-context-to-module-lifts"
" the-struct_505)"
"(expand-context-requires+provides"
" the-struct_505)"
"(expand-context-name"
" the-struct_505)"
"(expand-context-observer"
" the-struct_505)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                           \"expand-context?\""
" the-struct_505))))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_454))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_454)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_454"
" at-phase_12))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                              \"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_19)))"
"(values))))"
"(let-values(((ok?_455"
" begin90_456"
" spec91_457)"
"(let-values(((s_507)"
" exp-spec_454))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_508)"
" s_507))"
"(let-values(((begin90_509"
" spec91_510)"
"(let-values(((s_511)"
"(if(syntax?$1"
" s_507)"
"(syntax-e$1"
" s_507)"
" s_507)))"
"(if(pair?"
" s_511)"
"(let-values(((begin92_512)"
"(let-values(((s_514)"
"(car"
" s_511)))"
" s_514))"
"((spec93_513)"
"(let-values(((s_515)"
"(cdr"
" s_511)))"
"(let-values(((s_516)"
"(if(syntax?$1"
" s_515)"
"(syntax-e$1"
" s_515)"
" s_515)))"
"(let-values(((flat-s_517)"
"(to-syntax-list.1"
" s_516)))"
"(if(not"
" flat-s_517)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"bad syntax\""
" orig-s_508))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"bad syntax\""
" orig-s_508))"
"(let-values()"
" flat-s_517))))))))"
"(values"
" begin92_512"
" spec93_513))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                  \"bad syntax\""
" orig-s_508)))))"
"(values"
" #t"
" begin90_509"
" spec91_510)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_10"
" spec91_457"
" at-phase_12"
" protected?_13"
" layer_14))))))))))))))))))"
" fold-var_21))))"
"(values fold-var_22)))))"
"(if #t"
"(for-loop_16 fold-var_20(unsafe-cdr lst_18))"
" fold-var_20))"
" fold-var_17))"
" fold-var_17))))"
" for-loop_16)"
" null"
" lst_15))))))))"
" loop_10)"
" specs_1"
" phase_5"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_518 orig-s_519 sym_520 at-phase_521 ns_522 rp_523 protected?_524)"
"(let-values(((b_525)(resolve+shift/extra-inspector spec_518 at-phase_521 ns_522)))"
"(let-values((()"
"(begin"
"(if b_525"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_519"
" spec_518)))"
"(values))))"
"(let-values(((as-transformer?_526)(binding-for-transformer? b_525 spec_518 at-phase_521 ns_522)))"
"(let-values(((immed-b_527)"
"(let-values(((...r/expand/provide.rkt:157:18_528) resolve+shift15.1)"
"((spec104_529) spec_518)"
"((at-phase105_530) at-phase_521)"
"((temp106_531) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f temp106_531 #t #f #f spec104_529 at-phase105_530)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:157:18_528"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp106_531)"
" spec104_529"
" at-phase105_530)))))"
"(let-values(((...r/expand/provide.rkt:158:2_532) add-provide!69.1)"
"((rp95_533) rp_523)"
"((sym96_534) sym_520)"
"((at-phase97_535) at-phase_521)"
"((b98_536) b_525)"
"((immed-b99_537) immed-b_527)"
"((spec100_538) spec_518)"
"((orig-s101_539) orig-s_519)"
"((protected?102_540) protected?_524)"
"((as-transformer?103_541) as-transformer?_526))"
"(if(variable-reference-constant?(#%variable-reference add-provide!69.1))"
"(add-provide!67.1"
" protected?102_540"
" as-transformer?103_541"
" rp95_533"
" sym96_534"
" at-phase97_535"
" b98_536"
" immed-b99_537"
" spec100_538"
" orig-s101_539)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:158:2_532"
" keyword-procedure-extract"
" '(#:as-protected? #:as-transformer?)"
" 9)"
" '(#:as-protected? #:as-transformer?)"
"(list protected?102_540 as-transformer?103_541)"
" rp95_533"
" sym96_534"
" at-phase97_535"
" b98_536"
" immed-b99_537"
" spec100_538"
" orig-s101_539)))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_542 orig-s_543 fields_544 at-phase_545 ns_546 rp_547 protected?_548)"
"(let-values(((mk_549)"
"(lambda(fmt_551)"
"(let-values(((sym_552)(string->symbol(format fmt_551(syntax-e$1 id:struct_542)))))"
"(datum->syntax$1 id:struct_542 sym_552 id:struct_542)))))"
"(let-values(((mk2_550)"
"(lambda(fmt_553 field-id_554)"
"(let-values(((sym_555)"
"(string->symbol"
"(format fmt_553(syntax-e$1 id:struct_542)(syntax-e$1 field-id_554)))))"
"(datum->syntax$1 id:struct_542 sym_555 id:struct_542)))))"
"(begin"
"(let-values(((pos->vals_556 pos-next_557 init_558 pos-cont?_559 val-cont?_560 all-cont?_561)"
"                        (make-sequence '(fmt) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_562)"
"(lambda(fold-var_563 pos_564)"
"(if(if pos-cont?_559(pos-cont?_559 pos_564) #t)"
"(let-values(((fmt_565)(pos->vals_556 pos_564)))"
"(if(if val-cont?_560(val-cont?_560 fmt_565) #t)"
"(let-values(((fold-var_566)"
"(let-values(((fold-var_567) fold-var_563))"
"(let-values(((fold-var_568)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_569)(mk_549 fmt_565)))"
"(parse-identifier!"
" id_569"
" orig-s_543"
"(syntax-e$1 id_569)"
" at-phase_545"
" ns_546"
" rp_547"
" protected?_548)))"
"(void)))))"
"(values fold-var_568)))))"
"(if(if all-cont?_561(all-cont?_561 pos_564 fmt_565) #t)"
"(for-loop_562 fold-var_566(pos-next_557 pos_564))"
" fold-var_566))"
" fold-var_563))"
" fold-var_563))))"
" for-loop_562)"
"(void)"
" init_558)))"
"(let-values(((lst_570) fields_544))"
"(begin"
"(if(list? lst_570)(void)(let-values()(in-list lst_570)))"
"((letrec-values(((for-loop_571)"
"(lambda(fold-var_572 lst_573)"
"(if(pair? lst_573)"
"(let-values(((field_574)(unsafe-car lst_573)))"
"(if #t"
"(let-values(((fold-var_575)"
"(let-values(((fold-var_576) fold-var_572))"
"(let-values(((fold-var_577)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_578)"
"                                                                                          (mk2_550 \"~a-~a\" field_574)))"
"(let-values(((set-id_579)"
"(mk2_550"
"                                                                                             \"set-~a-~a!\""
" field_574)))"
"(begin"
"(parse-identifier!"
" get-id_578"
" orig-s_543"
"(syntax-e$1 get-id_578)"
" at-phase_545"
" ns_546"
" rp_547"
" protected?_548)"
"(parse-identifier!"
" set-id_579"
" orig-s_543"
"(syntax-e$1 set-id_579)"
" at-phase_545"
" ns_546"
" rp_547"
" protected?_548)))))"
"(void)))))"
"(values fold-var_577)))))"
"(if #t(for-loop_571 fold-var_575(unsafe-cdr lst_573)) fold-var_575))"
" fold-var_572))"
" fold-var_572))))"
" for-loop_571)"
"(void)"
" lst_570))))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_580 orig-s_581 self_582 except-ids_583 at-phase_584 ns_585 rp_586 protected?_587)"
"(let-values(((mod-path_588)(syntax->datum$1 mod-path-stx_580)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_588)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_581 mod-path-stx_580)))"
"(values))))"
"(let-values(((mpi_589)(1/module-path-index-join mod-path_588 self_582)))"
"(parse-all-from-module mpi_589 #f orig-s_581 except-ids_583 #f at-phase_584 ns_585 rp_586 protected?_587))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_590 matching-stx_591 orig-s_592 except-ids_593 prefix-sym_594 at-phase_595 ns_596 rp_597 protected?_598)"
"(let-values(((requireds_599)(extract-module-requires rp_597 mpi_590 at-phase_595)))"
"(let-values(((phase-desc_600)"
"(lambda()"
"(if(zero-phase? at-phase_595)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_595)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_595)))))))"
"(let-values((()"
"(begin"
"(if requireds_599"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_600))"
" orig-s_592"
" matching-stx_591)))"
"(values))))"
"(let-values(((add-prefix_601)"
"(lambda(sym_603)"
"                          (if prefix-sym_594 (string->symbol (format \"~a~a\" prefix-sym_594 sym_603)) sym_603))))"
"(let-values(((found_602)(make-hasheq)))"
"(begin"
"(let-values(((lst_604) requireds_599))"
"(begin"
"(if(list? lst_604)(void)(let-values()(in-list lst_604)))"
"((letrec-values(((for-loop_605)"
"(lambda(fold-var_606 lst_607)"
"(if(pair? lst_607)"
"(let-values(((i_608)(unsafe-car lst_607)))"
"(if #t"
"(let-values(((fold-var_609)"
"(let-values(((fold-var_610) fold-var_606))"
"(let-values(((fold-var_611)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_612)"
"(required-id i_608)))"
"(let-values(((phase_613)"
"(required-phase"
" i_608)))"
"(if(let-values(((or-part_614)"
"(if matching-stx_591"
"(not"
"(free-identifier=?$1"
" id_612"
"(datum->syntax$1"
" matching-stx_591"
"(syntax-e$1"
" id_612))"
" phase_613"
" phase_613))"
" #f)))"
"(if or-part_614"
" or-part_614"
"(let-values(((lst_615)"
" except-ids_593))"
"(begin"
"(if(list? lst_615)"
"(void)"
"(let-values()"
"(in-list"
" lst_615)))"
"((letrec-values(((for-loop_616)"
"(lambda(result_617"
" lst_618)"
"(if(pair?"
" lst_618)"
"(let-values(((except-id_619)"
"(unsafe-car"
" lst_618)))"
"(if #t"
"(let-values(((result_620)"
"(let-values(((result_621)"
" result_617))"
"(let-values(((result_622)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_612"
" except-id_619"
" phase_613"
" phase_613)"
"(hash-set!"
" found_602"
" except-id_619"
" #t)"
" #f)))))"
"(values"
" result_622)))))"
"(if(if #t"
"(not"
"((lambda x_623"
" result_620)"
" except-id_619))"
" #f)"
"(for-loop_616"
" result_620"
"(unsafe-cdr"
" lst_618))"
" result_620))"
" result_617))"
" result_617))))"
" for-loop_616)"
" #f"
" lst_615)))))"
"(void)"
"(let-values()"
"(let-values(((b_624)"
"(resolve+shift/extra-inspector"
" id_612"
" phase_613"
" ns_596)))"
"(let-values(((immed-b_625)"
"(let-values(((...r/expand/provide.rkt:224:22_626)"
" resolve+shift15.1)"
"((id116_627)"
" id_612)"
"((phase117_628)"
" phase_613)"
"((temp118_629)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp118_629"
" #t"
" #f"
" #f"
" id116_627"
" phase117_628)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:224:22_626"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list"
" temp118_629)"
" id116_627"
" phase117_628)))))"
"(let-values(((...r/expand/provide.rkt:225:6_630)"
" add-provide!69.1)"
"((rp107_631)"
" rp_597)"
"((temp108_632)"
"(add-prefix_601"
"(syntax-e$1"
" id_612)))"
"((phase109_633)"
" phase_613)"
"((b110_634)"
" b_624)"
"((immed-b111_635)"
" immed-b_625)"
"((id112_636)"
" id_612)"
"((orig-s113_637)"
" orig-s_592)"
"((protected?114_638)"
" protected?_598)"
"((temp115_639)"
"(required-as-transformer?"
" i_608)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-provide!69.1))"
"(add-provide!67.1"
" protected?114_638"
" temp115_639"
" rp107_631"
" temp108_632"
" phase109_633"
" b110_634"
" immed-b111_635"
" id112_636"
" orig-s113_637)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:225:6_630"
" keyword-procedure-extract"
" '(#:as-protected?"
" #:as-transformer?)"
" 9)"
" '(#:as-protected?"
" #:as-transformer?)"
"(list"
" protected?114_638"
" temp115_639)"
" rp107_631"
" temp108_632"
" phase109_633"
" b110_634"
" immed-b111_635"
" id112_636"
" orig-s113_637))))))))))"
"(void)))))"
"(values fold-var_611)))))"
"(if #t(for-loop_605 fold-var_609(unsafe-cdr lst_607)) fold-var_609))"
" fold-var_606))"
" fold-var_606))))"
" for-loop_605)"
"(void)"
" lst_604)))"
"(if(=(hash-count found_602)(length except-ids_593))"
"(void)"
"(let-values()"
"(let-values(((lst_640) except-ids_593))"
"(begin"
"(if(list? lst_640)(void)(let-values()(in-list lst_640)))"
"((letrec-values(((for-loop_641)"
"(lambda(fold-var_642 lst_643)"
"(if(pair? lst_643)"
"(let-values(((except-id_644)(unsafe-car lst_643)))"
"(if #t"
"(let-values(((fold-var_645)"
"(let-values(((fold-var_646) fold-var_642))"
"(let-values(((fold-var_647)"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_648)"
"(hash-ref"
" found_602"
" except-id_644"
" #f)))"
"(if or-part_648"
" or-part_648"
"(let-values(((lst_649)"
" requireds_599))"
"(begin"
"(if(list? lst_649)"
"(void)"
"(let-values()"
"(in-list"
" lst_649)))"
"((letrec-values(((for-loop_650)"
"(lambda(result_651"
" lst_652)"
"(if(pair?"
" lst_652)"
"(let-values(((i_653)"
"(unsafe-car"
" lst_652)))"
"(if #t"
"(let-values(((result_654)"
"(let-values(((result_655)"
" result_651))"
"(let-values(((result_656)"
"(let-values()"
"(let-values()"
"(let-values(((id_657)"
"(required-id"
" i_653)))"
"(let-values(((phase_658)"
"(required-phase"
" i_653)))"
"(free-identifier=?$1"
" id_657"
" except-id_644"
" phase_658"
" phase_658)))))))"
"(values"
" result_656)))))"
"(if(if #t"
"(not"
"((lambda x_659"
" result_654)"
" i_653))"
" #f)"
"(for-loop_650"
" result_654"
"(unsafe-cdr"
" lst_652))"
" result_654))"
" result_651))"
" result_651))))"
" for-loop_650)"
" #f"
" lst_649)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_591"
"                                                                                              \"excluded identifier was not defined or required in the module~a\""
"                                                                                              \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_600))"
" orig-s_592"
" except-id_644))))"
"(void)))))"
"(values fold-var_647)))))"
"(if #t"
"(for-loop_641 fold-var_645(unsafe-cdr lst_643))"
" fold-var_645))"
" fold-var_642))"
" fold-var_642))))"
" for-loop_641)"
"(void)"
" lst_640)))))))))))))"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(let-values(((lst_3) bodys_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(fold-var_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((body_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((fold-var_8)"
"(let-values(((fold-var_9) fold-var_5))"
"(let-values(((fold-var_10)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_11)(core-form-sym body_7 0)))"
"(if(equal? tmp_11 'begin)"
"(let-values()"
"(let-values(((ok?_12 begin1_13 e2_14)"
"(let-values(((s_25) body_7))"
"(if(if #t #t #f)"
"(let-values(((orig-s_26)"
" s_25))"
"(let-values(((begin1_27"
" e2_28)"
"(let-values(((s_29)"
"(if(syntax?$1"
" s_25)"
"(syntax-e$1"
" s_25)"
" s_25)))"
"(if(pair?"
" s_29)"
"(let-values(((begin3_30)"
"(let-values(((s_32)"
"(car"
" s_29)))"
" s_32))"
"((e4_31)"
"(let-values(((s_33)"
"(cdr"
" s_29)))"
"(let-values(((s_34)"
"(if(syntax?$1"
" s_33)"
"(syntax-e$1"
" s_33)"
" s_33)))"
"(let-values(((flat-s_35)"
"(to-syntax-list.1"
" s_34)))"
"(if(not"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_26))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_26))"
"(let-values()"
" flat-s_35))))))))"
"(values"
" begin3_30"
" e4_31))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_26)))))"
"(values"
" #t"
" begin1_27"
" e2_28)))"
"(values #f #f #f)))))"
"(check-body e2_14)))"
"(if(if(equal? tmp_11 '#%declare)"
" #t"
"(if(equal? tmp_11 '#%provide)"
" #t"
"(if(equal? tmp_11 '#%require)"
" #t"
"(if(equal? tmp_11 'module)"
" #t"
"(equal? tmp_11 'module*)))))"
"(let-values()(void))"
"(if(equal? tmp_11 'define-values)"
"(let-values()"
"(let-values(((ok?_36"
" define-values5_37"
" id6_38"
" rhs7_39)"
"(let-values(((s_52)"
" body_7))"
"(if(if #t #t #f)"
"(let-values(((orig-s_53)"
" s_52))"
"(let-values(((define-values5_54"
" id6_55"
" rhs7_56)"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_52)"
"(syntax-e$1"
" s_52)"
" s_52)))"
"(if(pair?"
" s_57)"
"(let-values(((define-values8_58)"
"(let-values(((s_61)"
"(car"
" s_57)))"
" s_61))"
"((id9_59"
" rhs10_60)"
"(let-values(((s_62)"
"(cdr"
" s_57)))"
"(let-values(((s_63)"
"(if(syntax?$1"
" s_62)"
"(syntax-e$1"
" s_62)"
" s_62)))"
"(if(pair?"
" s_63)"
"(let-values(((id11_64)"
"(let-values(((s_66)"
"(car"
" s_63)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(let-values(((flat-s_68)"
"(to-syntax-list.1"
" s_67)))"
"(if(not"
" flat-s_68)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_53))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_53))"
"(let-values()"
"(let-values(((id_69)"
"(let-values(((lst_70)"
" flat-s_68))"
"(begin"
"(if(list?"
" lst_70)"
"(void)"
"(let-values()"
"(in-list"
" lst_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(id_72"
" lst_73)"
"(if(pair?"
" lst_73)"
"(let-values(((s_74)"
"(unsafe-car"
" lst_73)))"
"(if #t"
"(let-values(((id_75)"
"(let-values(((id_76)"
" id_72))"
"(let-values(((id_77)"
"(let-values()"
"(let-values(((id14_78)"
"(let-values()"
"(if(let-values(((or-part_79)"
"(if(syntax?$1"
" s_74)"
"(symbol?"
"(syntax-e$1"
" s_74))"
" #f)))"
"(if or-part_79"
" or-part_79"
"(symbol?"
" s_74)))"
" s_74"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_53"
" s_74)))))"
"(cons"
" id14_78"
" id_76)))))"
"(values"
" id_77)))))"
"(if #t"
"(for-loop_71"
" id_75"
"(unsafe-cdr"
" lst_73))"
" id_75))"
" id_72))"
" id_72))))"
" for-loop_71)"
" null"
" lst_70)))))"
"(alt-reverse"
" id_69)))))))))"
"((rhs12_65)"
"(let-values(((s_80)"
"(cdr"
" s_63)))"
"(let-values(((s_81)"
"(if(syntax?$1"
" s_80)"
"(syntax-e$1"
" s_80)"
" s_80)))"
"(if(pair?"
" s_81)"
"(let-values(((rhs13_82)"
"(let-values(((s_83)"
"(car"
" s_81)))"
" s_83))"
"(()"
"(let-values(((s_84)"
"(cdr"
" s_81)))"
"(let-values(((s_85)"
"(if(syntax?$1"
" s_84)"
"(syntax-e$1"
" s_84)"
" s_84)))"
"(if(null?"
" s_85)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_53))))))"
"(values"
" rhs13_82))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_53))))))"
"(values"
" id11_64"
" rhs12_65))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_53))))))"
"(values"
" define-values8_58"
" id9_59"
" rhs10_60))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_53)))))"
"(values"
" #t"
" define-values5_54"
" id6_55"
" rhs7_56)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(check-expr"
" rhs7_39"
"(length id6_38)"
" body_7)))"
"(let-values()(disallow body_7)))))))"
"(void)))))"
"(values fold-var_10)))))"
"(if #t(for-loop_4 fold-var_8(unsafe-cdr lst_6)) fold-var_8))"
" fold-var_5))"
" fold-var_5))))"
" for-loop_4)"
"(void)"
" lst_3)))))"
"(define-values"
"(check-expr)"
"(lambda(e_86 num-results_87 enclosing_88)"
"(let-values(((tmp_89)(core-form-sym e_86 0)))"
"(if(if(equal? tmp_89 'lambda) #t(equal? tmp_89 'case-lambda))"
"(let-values()(check-count 1 num-results_87 enclosing_88))"
"(if(equal? tmp_89 'quote)"
"(let-values()"
"(let-values(((ok?_90 quote15_91 datum16_92)"
"(let-values(((s_103) e_86))"
"(if(if #t #t #f)"
"(let-values(((orig-s_104) s_103))"
"(let-values(((quote15_105 datum16_106)"
"(let-values(((s_107)(if(syntax?$1 s_103)(syntax-e$1 s_103) s_103)))"
"(if(pair? s_107)"
"(let-values(((quote17_108)"
"(let-values(((s_110)(car s_107))) s_110))"
"((datum18_109)"
"(let-values(((s_111)(cdr s_107)))"
"(let-values(((s_112)"
"(if(syntax?$1 s_111)"
"(syntax-e$1 s_111)"
" s_111)))"
"(if(pair? s_112)"
"(let-values(((datum19_113)"
"(let-values(((s_114)(car s_112)))"
" s_114))"
"(()"
"(let-values(((s_115)(cdr s_112)))"
"(let-values(((s_116)"
"(if(syntax?$1"
" s_115)"
"(syntax-e$1 s_115)"
" s_115)))"
"(if(null? s_116)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_104))))))"
"(values datum19_113))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_104))))))"
"(values quote17_108 datum18_109))"
"                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_104)))))"
"(values #t quote15_105 datum16_106)))"
"(values #f #f #f)))))"
"(begin(check-datum datum16_92)(check-count 1 num-results_87 enclosing_88))))"
"(if(equal? tmp_89 '#%app)"
"(let-values()"
"(let-values(((ok?_117 #%app20_118 rator21_119 rand22_120)"
"(let-values(((s_134) e_86))"
"(if(if #t #t #f)"
"(let-values(((orig-s_135) s_134))"
"(let-values(((#%app20_136 rator21_137 rand22_138)"
"(let-values(((s_139)(if(syntax?$1 s_134)(syntax-e$1 s_134) s_134)))"
"(if(pair? s_139)"
"(let-values(((#%app23_140)"
"(let-values(((s_143)(car s_139))) s_143))"
"((rator24_141 rand25_142)"
"(let-values(((s_144)(cdr s_139)))"
"(let-values(((s_145)"
"(if(syntax?$1 s_144)"
"(syntax-e$1 s_144)"
" s_144)))"
"(if(pair? s_145)"
"(let-values(((rator26_146)"
"(let-values(((s_148)"
"(car s_145)))"
" s_148))"
"((rand27_147)"
"(let-values(((s_149)"
"(cdr s_145)))"
"(let-values(((s_150)"
"(if(syntax?$1"
" s_149)"
"(syntax-e$1"
" s_149)"
" s_149)))"
"(let-values(((flat-s_151)"
"(to-syntax-list.1"
" s_150)))"
"(if(not flat-s_151)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_135))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_135))"
"(let-values()"
" flat-s_151))))))))"
"(values rator26_146 rand27_147))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_135))))))"
"(values #%app23_140 rator24_141 rand25_142))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_135)))))"
"(values #t #%app20_136 rator21_137 rand22_138)))"
"(values #f #f #f #f)))))"
"(let-values(((rands_133) rand22_120))"
"(begin"
"(let-values(((lst_152) rands_133))"
"(begin"
"(if(list? lst_152)(void)(let-values()(in-list lst_152)))"
"((letrec-values(((for-loop_153)"
"(lambda(fold-var_154 lst_155)"
"(if(pair? lst_155)"
"(let-values(((rand_156)(unsafe-car lst_155)))"
"(if #t"
"(let-values(((fold-var_157)"
"(let-values(((fold-var_158) fold-var_154))"
"(let-values(((fold-var_159)"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_156 1 e_86))"
"(void)))))"
"(values fold-var_159)))))"
"(if #t"
"(for-loop_153 fold-var_157(unsafe-cdr lst_155))"
" fold-var_157))"
" fold-var_154))"
" fold-var_154))))"
" for-loop_153)"
"(void)"
" lst_152)))"
"(let-values(((tmp_160)(cross-phase-primitive-name rator21_119)))"
"(if(if(equal? tmp_160 'cons) #t(equal? tmp_160 'list))"
"(let-values()(check-count 1 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'make-struct-type)"
"(let-values()(check-count 5 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'gensym)"
"(let-values()"
"(if(let-values(((or-part_161)(= 0(length rands_133))))"
"(if or-part_161"
" or-part_161"
"(if(= 1(length rands_133))(quoted-string?(car rands_133)) #f)))"
"(void)"
"(let-values()(disallow e_86))))"
"(if(equal? tmp_160 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_133))(quoted-string?(car rands_133)) #f)"
"(void)"
"(let-values()(disallow e_86))))"
"(let-values()(disallow e_86))))))))))))"
"(let-values()(void))))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_162 expected-num_163 enclosing_164)"
"(if(= is-num_162 expected-num_163)(void)(let-values()(disallow enclosing_164)))))"
"(define-values"
"(check-datum)"
"(lambda(datum_165)"
"(let-values(((d_166)(syntax-e$1 datum_165)))"
"(if(let-values(((or-part_167)(number? d_166)))"
"(if or-part_167"
" or-part_167"
"(let-values(((or-part_168)(boolean? d_166)))"
"(if or-part_168"
" or-part_168"
"(let-values(((or-part_169)(symbol? d_166)))"
"(if or-part_169"
" or-part_169"
"(let-values(((or-part_170)(string? d_166)))(if or-part_170 or-part_170(bytes? d_166)))))))))"
"(let-values()(void))"
"(let-values()(disallow datum_165))))))"
"(define-values"
"(quoted-string?)"
"(lambda(e_171)"
"(if(eq? 'quote(core-form-sym e_171 0))"
"(let-values()"
"(let-values(((ok?_172 quote28_173 datum29_174)"
"(let-values(((s_185) e_171))"
"(if(if #t #t #f)"
"(let-values(((orig-s_186) s_185))"
"(let-values(((quote28_187 datum29_188)"
"(let-values(((s_189)(if(syntax?$1 s_185)(syntax-e$1 s_185) s_185)))"
"(if(pair? s_189)"
"(let-values(((quote30_190)(let-values(((s_192)(car s_189))) s_192))"
"((datum31_191)"
"(let-values(((s_193)(cdr s_189)))"
"(let-values(((s_194)"
"(if(syntax?$1 s_193)"
"(syntax-e$1 s_193)"
" s_193)))"
"(if(pair? s_194)"
"(let-values(((datum32_195)"
"(let-values(((s_196)(car s_194)))"
" s_196))"
"(()"
"(let-values(((s_197)(cdr s_194)))"
"(let-values(((s_198)"
"(if(syntax?$1 s_197)"
"(syntax-e$1 s_197)"
" s_197)))"
"(if(null? s_198)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_186))))))"
"(values datum32_195))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_186))))))"
"(values quote30_190 datum31_191))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_186)))))"
"(values #t quote28_187 datum29_188)))"
"(values #f #f #f)))))"
"(string?(syntax-e$1 datum29_174))))"
" #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_199)"
"(let-values(((b_200)"
"(let-values(((id33_201) id_199)((temp34_202) 0))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f id33_201 temp34_202)"
"(resolve+shift15.1 id33_201 temp34_202)))))"
"(if(module-binding? b_200)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_200)))"
"(module-binding-sym b_200)"
" #f)"
" #f))))"
" (define-values (disallow) (lambda (body_203) (error \"not allowed in a cross-phase persistent module:\" body_203)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_11 ctx_12)"
"(begin"
"(if(eq?(expand-context-context ctx_12) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_13)(expand-context-observer ctx_12)))"
"(if obs_13"
"(let-values()(if #t(let-values()(call-expand-observe obs_13 'prim-module))(void)))"
"(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_11))))"
"(let-values(((s197_14) s_11)((ctx198_15) ctx_12)((temp199_16) #f))"
"(if(variable-reference-constant?(#%variable-reference expand-module14.1))"
"(expand-module12.1 #f #f #f #f #f #f #f #f s197_14 ctx198_15 temp199_16)"
"(expand-module14.1 s197_14 ctx198_15 temp199_16)))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_17 ctx_18)"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_18)))"
"(if obs_19(let-values()(if #t(let-values()(call-expand-observe obs_19 'prim-module))(void)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_17)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_20 ctx_21)"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_21)))"
"(if obs_22"
"(let-values()(if #t(let-values()(call-expand-observe obs_22 'prim-module-begin))(void)))"
"(void)))"
"(if(eq?(expand-context-context ctx_21) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_20)))"
"(if(expand-context-module-begin-k ctx_21)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_20)))"
"((expand-context-module-begin-k ctx_21)"
" s_20"
"(let-values(((the-struct_23) ctx_21))"
"(if(expand-context? the-struct_23)"
"(let-values(((module-begin-k200_24) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_23)"
"(root-expand-context-post-expansion-scope the-struct_23)"
"(root-expand-context-top-level-bind-scope the-struct_23)"
"(root-expand-context-all-scopes-stx the-struct_23)"
"(root-expand-context-use-site-scopes the-struct_23)"
"(root-expand-context-defined-syms the-struct_23)"
"(root-expand-context-frame-id the-struct_23)"
"(root-expand-context-counter the-struct_23)"
"(root-expand-context-lift-key the-struct_23)"
"(expand-context-context the-struct_23)"
"(expand-context-phase the-struct_23)"
"(expand-context-namespace the-struct_23)"
"(expand-context-env the-struct_23)"
"(expand-context-post-expansion-scope-action the-struct_23)"
"(expand-context-scopes the-struct_23)"
"(expand-context-def-ctx-scopes the-struct_23)"
"(expand-context-reference-records the-struct_23)"
"(expand-context-only-immediate? the-struct_23)"
"(expand-context-just-once? the-struct_23)"
" module-begin-k200_24"
"(expand-context-need-eventually-defined the-struct_23)"
"(expand-context-allow-unbound? the-struct_23)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_23)"
"(expand-context-stops the-struct_23)"
"(expand-context-current-introduction-scopes the-struct_23)"
"(expand-context-declared-submodule-names the-struct_23)"
"(expand-context-lifts the-struct_23)"
"(expand-context-lift-envs the-struct_23)"
"(expand-context-module-lifts the-struct_23)"
"(expand-context-require-lifts the-struct_23)"
"(expand-context-to-module-lifts the-struct_23)"
"(expand-context-requires+provides the-struct_23)"
"(expand-context-name the-struct_23)"
"(expand-context-observer the-struct_23)))"
"              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_23))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_25 ctx_26)"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_26)))"
"(if obs_27(let-values()(if #t(let-values()(call-expand-observe obs_27 'prim-declare))(void)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_25)))))"
" print-values)"
"(define-values"
"(expand-module12.1)"
"(lambda(enclosing-is-cross-phase-persistent?2_28"
" enclosing-is-cross-phase-persistent?6_29"
" enclosing-requires+provides3_30"
" enclosing-requires+provides7_31"
" keep-enclosing-scope-at-phase1_32"
" keep-enclosing-scope-at-phase5_33"
" mpis-for-enclosing-reset4_34"
" mpis-for-enclosing-reset8_35"
" s9_36"
" init-ctx10_37"
" enclosing-self11_38)"
"(let-values(((s_39) s9_36))"
"(let-values(((init-ctx_40) init-ctx10_37))"
"(let-values(((enclosing-self_41) enclosing-self11_38))"
"(let-values(((keep-enclosing-scope-at-phase_42)"
"(if keep-enclosing-scope-at-phase5_33 keep-enclosing-scope-at-phase1_32 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_43)"
"(if enclosing-is-cross-phase-persistent?6_29 enclosing-is-cross-phase-persistent?2_28 #f)))"
"(let-values(((enclosing-r+p_44)(if enclosing-requires+provides7_31 enclosing-requires+provides3_30 #f)))"
"(let-values(((mpis-for-enclosing-reset_45)"
"(if mpis-for-enclosing-reset8_35 mpis-for-enclosing-reset4_34 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_91)(expand-context-observer init-ctx_40)))"
"(if obs_91"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_91 'prim-module))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_46)(syntax-disarm$1 s_39)))"
"(let-values(((ok?_47 module201_48 id:module-name202_49 initial-require203_50 body204_51)"
"(let-values(((s_92) disarmed-s_46))"
"(if(if #t #t #f)"
"(let-values(((orig-s_93) s_92))"
"(let-values(((module201_94"
" id:module-name202_95"
" initial-require203_96"
" body204_97)"
"(let-values(((s_98)"
"(if(syntax?$1 s_92)(syntax-e$1 s_92) s_92)))"
"(if(pair? s_98)"
"(let-values(((module205_99)"
"(let-values(((s_103)(car s_98))) s_103))"
"((id:module-name206_100"
" initial-require207_101"
" body208_102)"
"(let-values(((s_104)(cdr s_98)))"
"(let-values(((s_105)"
"(if(syntax?$1 s_104)"
"(syntax-e$1 s_104)"
" s_104)))"
"(if(pair? s_105)"
"(let-values(((id:module-name209_106)"
"(let-values(((s_109)"
"(car"
" s_105)))"
"(if(let-values(((or-part_110)"
"(if(syntax?$1"
" s_109)"
"(symbol?"
"(syntax-e$1"
" s_109))"
" #f)))"
"(if or-part_110"
" or-part_110"
"(symbol?"
" s_109)))"
" s_109"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"not an identifier\""
" orig-s_93"
" s_109))))"
"((initial-require210_107"
" body211_108)"
"(let-values(((s_111)"
"(cdr"
" s_105)))"
"(let-values(((s_112)"
"(if(syntax?$1"
" s_111)"
"(syntax-e$1"
" s_111)"
" s_111)))"
"(if(pair? s_112)"
"(let-values(((initial-require212_113)"
"(let-values(((s_115)"
"(car"
" s_112)))"
" s_115))"
"((body213_114)"
"(let-values(((s_116)"
"(cdr"
" s_112)))"
"(let-values(((s_117)"
"(if(syntax?$1"
" s_116)"
"(syntax-e$1"
" s_116)"
" s_116)))"
"(let-values(((flat-s_118)"
"(to-syntax-list.1"
" s_117)))"
"(if(not"
" flat-s_118)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_93))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_93))"
"(let-values()"
" flat-s_118))))))))"
"(values"
" initial-require212_113"
" body213_114))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_93))))))"
"(values"
" id:module-name209_106"
" initial-require210_107"
" body211_108))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_93))))))"
"(values"
" module205_99"
" id:module-name206_100"
" initial-require207_101"
" body208_102))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_93)))))"
"(values"
" #t"
" module201_94"
" id:module-name202_95"
" initial-require203_96"
" body204_97)))"
"(values #f #f #f #f #f)))))"
"(let-values(((initial-require_66)(syntax->datum$1 initial-require203_50)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_119) keep-enclosing-scope-at-phase_42))"
"(if or-part_119 or-part_119(1/module-path? initial-require_66)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                 \"not a module path\""
" s_39"
" initial-require203_50)))"
"(values))))"
"(let-values(((phase_67) 0))"
"(let-values(((module-name-sym_68)(syntax-e$1 id:module-name202_49)))"
"(let-values(((outside-scope_69)(new-scope 'module)))"
"(let-values(((inside-scope_70)(new-multi-scope module-name-sym_68)))"
"(let-values(((self_71)"
"(make-self-module-path-index module-name-sym_68 enclosing-self_41)))"
"(let-values(((enclosing-mod_72)"
"(if enclosing-self_41"
"                                                        (1/module-path-index-join '(submod \"..\") self_71)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_72 mpis-for-enclosing-reset_45 #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_45"
"(cons"
" enclosing-mod_72"
"(unbox mpis-for-enclosing-reset_45))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_73)"
"(make-apply-module-scopes"
" outside-scope_69"
" inside-scope_70"
" init-ctx_40"
" keep-enclosing-scope-at-phase_42"
" self_71"
" enclosing-self_41"
" enclosing-mod_72)))"
"(let-values(((initial-require-s_74)"
"(apply-module-scopes_73 initial-require203_50)))"
"(let-values(((root-ctx_75)"
"(let-values(((...er/expand/module.rkt:112:20_120)"
" make-root-expand-context12.1)"
"((temp214_121)"
"(if keep-enclosing-scope-at-phase_42"
"(root-expand-context-module-scopes"
" init-ctx_40)"
" null))"
"((outside-scope215_122) outside-scope_69)"
"((inside-scope216_123) inside-scope_70)"
"((initial-require-s217_124)"
" initial-require-s_74))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-root-expand-context12.1))"
"(make-root-expand-context10.1"
" initial-require-s217_124"
" #t"
" temp214_121"
" #t"
" outside-scope215_122"
" #t"
" inside-scope216_123"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:112:20_120"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
" 2)"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
"(list"
" initial-require-s217_124"
" temp214_121"
" outside-scope215_122"
" inside-scope216_123))))))"
"(let-values(((new-module-scopes_76)"
"(root-expand-context-module-scopes root-ctx_75)))"
"(let-values(((frame-id_77)"
"(root-expand-context-frame-id root-ctx_75)))"
"(let-values(((m-ns_78)"
"(let-values(((...er/expand/module.rkt:127:16_125)"
" make-module-namespace47.1)"
"((temp218_126)"
"(expand-context-namespace"
" init-ctx_40))"
"((self219_127) self_71)"
"((root-ctx220_128) root-ctx_75)"
"((temp221_129)"
"(if enclosing-self_41 #t #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-namespace47.1))"
"(make-module-namespace45.1"
" temp221_129"
" self219_127"
" root-ctx220_128"
" temp218_126)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:127:16_125"
" keyword-procedure-extract"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
" 3)"
" '(#:for-submodule? #:mpi #:root-expand-context)"
"(list temp221_129 self219_127 root-ctx220_128)"
" temp218_126)))))"
"(let-values(((ctx_79)"
"(let-values(((the-struct_130)"
"(copy-root-expand-context"
" init-ctx_40"
" root-ctx_75)))"
"(if(expand-context? the-struct_130)"
"(let-values(((allow-unbound?222_131) #f)"
"((namespace223_132) m-ns_78)"
"((post-expansion-scope-action224_133)"
" add-scope)"
"((phase225_134) phase_67)"
"((just-once?226_135) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_130)"
"(root-expand-context-post-expansion-scope"
" the-struct_130)"
"(root-expand-context-top-level-bind-scope"
" the-struct_130)"
"(root-expand-context-all-scopes-stx"
" the-struct_130)"
"(root-expand-context-use-site-scopes"
" the-struct_130)"
"(root-expand-context-defined-syms"
" the-struct_130)"
"(root-expand-context-frame-id"
" the-struct_130)"
"(root-expand-context-counter"
" the-struct_130)"
"(root-expand-context-lift-key"
" the-struct_130)"
"(expand-context-context the-struct_130)"
" phase225_134"
" namespace223_132"
"(expand-context-env the-struct_130)"
" post-expansion-scope-action224_133"
"(expand-context-scopes the-struct_130)"
"(expand-context-def-ctx-scopes"
" the-struct_130)"
"(expand-context-reference-records"
" the-struct_130)"
"(expand-context-only-immediate?"
" the-struct_130)"
" just-once?226_135"
"(expand-context-module-begin-k"
" the-struct_130)"
"(expand-context-need-eventually-defined"
" the-struct_130)"
" allow-unbound?222_131"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_130)"
"(expand-context-stops the-struct_130)"
"(expand-context-current-introduction-scopes"
" the-struct_130)"
"(expand-context-declared-submodule-names"
" the-struct_130)"
"(expand-context-lifts the-struct_130)"
"(expand-context-lift-envs the-struct_130)"
"(expand-context-module-lifts"
" the-struct_130)"
"(expand-context-require-lifts"
" the-struct_130)"
"(expand-context-to-module-lifts"
" the-struct_130)"
"(expand-context-requires+provides"
" the-struct_130)"
"(expand-context-name the-struct_130)"
"(expand-context-observer the-struct_130)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                           \"expand-context?\""
" the-struct_130)))))"
"(let-values(((bodys_80)"
"(map2 apply-module-scopes_73 body204_51)))"
"(let-values(((requires+provides_81)"
"(make-requires+provides self_71)))"
"(let-values(((defined-syms_82)"
"(root-expand-context-defined-syms"
" root-ctx_75)))"
"(let-values(((mpis-to-reset_83)(box null)))"
"(let-values(((initial-require!_84)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_42)"
"(let-values()"
"(perform-initial-require!"
" initial-require_66"
" self_71"
" initial-require-s_74"
" m-ns_78"
" requires+provides_81))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_81"
" enclosing-mod_72"
" keep-enclosing-scope-at-phase_42"
" enclosing-is-cross-phase-persistent?_43)"
"(let-values(((...er/expand/module.rkt:168:7_136)"
" add-enclosing-module-defined-and-required!35.1)"
"((requires+provides227_137)"
" requires+provides_81)"
"((enclosing-r+p228_138)"
" enclosing-r+p_44)"
"((enclosing-mod229_139)"
" enclosing-mod_72)"
"((keep-enclosing-scope-at-phase230_140)"
" keep-enclosing-scope-at-phase_42))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-enclosing-module-defined-and-required!35.1))"
"(add-enclosing-module-defined-and-required!33.1"
" enclosing-r+p228_138"
" requires+provides227_137"
" enclosing-mod229_139"
" keep-enclosing-scope-at-phase230_140)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:168:7_136"
" keyword-procedure-extract"
" '(#:enclosing-requires+provides)"
" 5)"
" '(#:enclosing-requires+provides)"
"(list enclosing-r+p228_138)"
" requires+provides227_137"
" enclosing-mod229_139"
" keep-enclosing-scope-at-phase230_140)))"
"(let-values(((m-ns231_141)"
" m-ns_78)"
"((enclosing-mod232_142)"
" enclosing-mod_72)"
"((keep-enclosing-scope-at-phase233_143)"
" keep-enclosing-scope-at-phase_42))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!103.1))"
"(namespace-module-visit!101.1"
" #f"
" #f"
" m-ns231_141"
" enclosing-mod232_142"
" keep-enclosing-scope-at-phase233_143)"
"(namespace-module-visit!103.1"
" m-ns231_141"
" enclosing-mod232_142"
" keep-enclosing-scope-at-phase233_143)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_144)"
"(expand-context-observer"
" init-ctx_40)))"
"(if obs_144"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_144"
" 'prepare-env))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_84)"
"(values))))"
"(let-values(((again?_85) #f))"
"(let-values(((module-begin-k_86)"
"(lambda(mb-s_145 ctx_146)"
"(let-values((()"
"(begin"
"(if again?_85"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_81)"
"(initial-require!_84)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_85"
" #t)"
"(values))))"
"(let-values(((added-s_147)"
"(add-scope"
" mb-s_145"
" inside-scope_70)))"
"(let-values((()"
"(begin"
"(let-values(((obs_173)"
"(expand-context-observer"
" ctx_146)))"
"(if obs_173"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_173"
" 'rename-one"
" added-s_147))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_148)"
"(syntax-disarm$1"
" added-s_147)))"
"(let-values(((ok?_149"
" #%module-begin234_150"
" body235_151)"
"(let-values(((s_174)"
" disarmed-mb-s_148))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_175)"
" s_174))"
"(let-values(((#%module-begin234_176"
" body235_177)"
"(let-values(((s_178)"
"(if(syntax?$1"
" s_174)"
"(syntax-e$1"
" s_174)"
" s_174)))"
"(if(pair?"
" s_178)"
"(let-values(((#%module-begin236_179)"
"(let-values(((s_181)"
"(car"
" s_178)))"
" s_181))"
"((body237_180)"
"(let-values(((s_182)"
"(cdr"
" s_178)))"
"(let-values(((s_183)"
"(if(syntax?$1"
" s_182)"
"(syntax-e$1"
" s_182)"
" s_182)))"
"(let-values(((flat-s_184)"
"(to-syntax-list.1"
" s_183)))"
"(if(not"
" flat-s_184)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_175))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_175))"
"(let-values()"
" flat-s_184))))))))"
"(values"
" #%module-begin236_179"
" body237_180))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_175)))))"
"(values"
" #t"
" #%module-begin234_176"
" body235_177)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((bodys_162)"
" body235_151))"
"(let-values(((need-eventually-defined_163)"
"(make-hasheqv)))"
"(let-values(((module-ends_164)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_165)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_166)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_167)"
"((letrec-values(((pass-1-and-2-loop_185)"
"(lambda(bodys_186"
" phase_187)"
"(let-values(((partial-body-ctx_188)"
"(let-values(((the-struct_191)"
" ctx_146))"
"(if(expand-context?"
" the-struct_191)"
"(let-values(((context248_192)"
" 'module)"
"((phase249_193)"
" phase_187)"
"((namespace250_194)"
"(namespace->namespace-at-phase"
" m-ns_78"
" phase_187))"
"((only-immediate?251_195)"
" #t)"
"((need-eventually-defined252_196)"
" need-eventually-defined_163)"
"((declared-submodule-names253_197)"
" declared-submodule-names_166)"
"((lifts254_198)"
"(let-values(((temp258_202)"
"(make-wrap-as-definition"
" self_71"
" frame-id_77"
" inside-scope_70"
" initial-require-s_74"
" defined-syms_82"
" requires+provides_81)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-lift-context8.1))"
"(make-lift-context6.1"
" #f"
" #f"
" temp258_202)"
"(make-lift-context8.1"
" temp258_202))))"
"((module-lifts255_199)"
"(make-module-lift-context"
" phase_187"
" #t))"
"((require-lifts256_200)"
"(make-require-lift-context"
" phase_187"
"(let-values(((...er/expand/module.rkt:241:63_203)"
" make-parse-lifted-require196.1)"
"((m-ns259_204)"
" m-ns_78)"
"((self260_205)"
" self_71)"
"((requires+provides261_206)"
" requires+provides_81)"
"((declared-submodule-names262_207)"
" declared-submodule-names_166))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-parse-lifted-require196.1))"
"(make-parse-lifted-require194.1"
" declared-submodule-names262_207"
" m-ns259_204"
" self260_205"
" requires+provides261_206)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:241:63_203"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 5)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names262_207)"
" m-ns259_204"
" self260_205"
" requires+provides261_206)))))"
"((to-module-lifts257_201)"
"(let-values(((...er/expand/module.rkt:243:64_208)"
" make-to-module-lift-context28.1)"
"((phase263_209)"
" phase_187)"
"((module-ends264_210)"
" module-ends_164)"
"((temp265_211)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp265_211"
" module-ends264_210"
" phase263_209)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:243:64_208"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp265_211"
" module-ends264_210)"
" phase263_209)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_191)"
"(root-expand-context-post-expansion-scope"
" the-struct_191)"
"(root-expand-context-top-level-bind-scope"
" the-struct_191)"
"(root-expand-context-all-scopes-stx"
" the-struct_191)"
"(root-expand-context-use-site-scopes"
" the-struct_191)"
"(root-expand-context-defined-syms"
" the-struct_191)"
"(root-expand-context-frame-id"
" the-struct_191)"
"(root-expand-context-counter"
" the-struct_191)"
"(root-expand-context-lift-key"
" the-struct_191)"
" context248_192"
" phase249_193"
" namespace250_194"
"(expand-context-env"
" the-struct_191)"
"(expand-context-post-expansion-scope-action"
" the-struct_191)"
"(expand-context-scopes"
" the-struct_191)"
"(expand-context-def-ctx-scopes"
" the-struct_191)"
"(expand-context-reference-records"
" the-struct_191)"
" only-immediate?251_195"
"(expand-context-just-once?"
" the-struct_191)"
"(expand-context-module-begin-k"
" the-struct_191)"
" need-eventually-defined252_196"
"(expand-context-allow-unbound?"
" the-struct_191)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_191)"
"(expand-context-stops"
" the-struct_191)"
"(expand-context-current-introduction-scopes"
" the-struct_191)"
" declared-submodule-names253_197"
" lifts254_198"
"(expand-context-lift-envs"
" the-struct_191)"
" module-lifts255_199"
" require-lifts256_200"
" to-module-lifts257_201"
"(expand-context-requires+provides"
" the-struct_191)"
"(expand-context-name"
" the-struct_191)"
"(expand-context-observer"
" the-struct_191)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                     \"expand-context?\""
" the-struct_191)))))"
"(let-values(((partially-expanded-bodys_189)"
"(let-values(((...er/expand/module.rkt:249:11_212)"
" partially-expand-bodys75.1)"
"((bodys266_213)"
" bodys_186)"
"((s267_214)"
" s_39)"
"((temp268_215)"
"(zero?"
" phase_187))"
"((phase269_216)"
" phase_187)"
"((partial-body-ctx270_217)"
" partial-body-ctx_188)"
"((m-ns271_218)"
" m-ns_78)"
"((self272_219)"
" self_71)"
"((frame-id273_220)"
" frame-id_77)"
"((requires+provides274_221)"
" requires+provides_81)"
"((need-eventually-defined275_222)"
" need-eventually-defined_163)"
"((initial-require-s276_223)"
" initial-require-s_74)"
"((defined-syms277_224)"
" defined-syms_82)"
"((declared-keywords278_225)"
" declared-keywords_165)"
"((declared-submodule-names279_226)"
" declared-submodule-names_166)"
"((mpis-to-reset280_227)"
" mpis-to-reset_83)"
"((pass-1-and-2-loop281_228)"
" pass-1-and-2-loop_185))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" partially-expand-bodys75.1))"
"(partially-expand-bodys73.1"
" initial-require-s276_223"
" partial-body-ctx270_217"
" declared-keywords278_225"
" declared-submodule-names279_226"
" defined-syms277_224"
" frame-id273_220"
" pass-1-and-2-loop281_228"
" mpis-to-reset280_227"
" m-ns271_218"
" need-eventually-defined275_222"
" s267_214"
" phase269_216"
" requires+provides274_221"
" self272_219"
" temp268_215"
" bodys266_213)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:249:11_212"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" 3)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
"(list"
" initial-require-s276_223"
" partial-body-ctx270_217"
" declared-keywords278_225"
" declared-submodule-names279_226"
" defined-syms277_224"
" frame-id273_220"
" pass-1-and-2-loop281_228"
" mpis-to-reset280_227"
" m-ns271_218"
" need-eventually-defined275_222"
" s267_214"
" phase269_216"
" requires+provides274_221"
" self272_219"
" temp268_215)"
" bodys266_213)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_229)"
"(expand-context-observer"
" partial-body-ctx_188)))"
"(if obs_229"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_229"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_190)"
"(let-values(((the-struct_230)"
" partial-body-ctx_188))"
"(if(expand-context?"
" the-struct_230)"
"(let-values(((only-immediate?282_231)"
" #f)"
"((frame-id283_232)"
" #f)"
"((post-expansion-scope284_233)"
" #f)"
"((to-module-lifts285_234)"
"(let-values(((...er/expand/module.rkt:275:56_235)"
" make-to-module-lift-context28.1)"
"((phase286_236)"
" phase_187)"
"((module-ends287_237)"
" module-ends_164)"
"((temp288_238)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp288_238"
" module-ends287_237"
" phase286_236)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:275:56_235"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp288_238"
" module-ends287_237)"
" phase286_236)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_230)"
" post-expansion-scope284_233"
"(root-expand-context-top-level-bind-scope"
" the-struct_230)"
"(root-expand-context-all-scopes-stx"
" the-struct_230)"
"(root-expand-context-use-site-scopes"
" the-struct_230)"
"(root-expand-context-defined-syms"
" the-struct_230)"
" frame-id283_232"
"(root-expand-context-counter"
" the-struct_230)"
"(root-expand-context-lift-key"
" the-struct_230)"
"(expand-context-context"
" the-struct_230)"
"(expand-context-phase"
" the-struct_230)"
"(expand-context-namespace"
" the-struct_230)"
"(expand-context-env"
" the-struct_230)"
"(expand-context-post-expansion-scope-action"
" the-struct_230)"
"(expand-context-scopes"
" the-struct_230)"
"(expand-context-def-ctx-scopes"
" the-struct_230)"
"(expand-context-reference-records"
" the-struct_230)"
" only-immediate?282_231"
"(expand-context-just-once?"
" the-struct_230)"
"(expand-context-module-begin-k"
" the-struct_230)"
"(expand-context-need-eventually-defined"
" the-struct_230)"
"(expand-context-allow-unbound?"
" the-struct_230)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_230)"
"(expand-context-stops"
" the-struct_230)"
"(expand-context-current-introduction-scopes"
" the-struct_230)"
"(expand-context-declared-submodule-names"
" the-struct_230)"
"(expand-context-lifts"
" the-struct_230)"
"(expand-context-lift-envs"
" the-struct_230)"
"(expand-context-module-lifts"
" the-struct_230)"
"(expand-context-require-lifts"
" the-struct_230)"
" to-module-lifts285_234"
"(expand-context-requires+provides"
" the-struct_230)"
"(expand-context-name"
" the-struct_230)"
"(expand-context-observer"
" the-struct_230)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                           \"expand-context?\""
" the-struct_230)))))"
"(let-values(((...er/expand/module.rkt:279:9_239)"
" finish-expanding-body-expressons91.1)"
"((partially-expanded-bodys241_240)"
" partially-expanded-bodys_189)"
"((temp242_241)"
"(zero?"
" phase_187))"
"((phase243_242)"
" phase_187)"
"((body-ctx244_243)"
" body-ctx_190)"
"((self245_244)"
" self_71)"
"((declared-submodule-names246_245)"
" declared-submodule-names_166)"
"((mpis-to-reset247_246)"
" mpis-to-reset_83))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body-expressons91.1))"
"(finish-expanding-body-expressons89.1"
" body-ctx244_243"
" declared-submodule-names246_245"
" mpis-to-reset247_246"
" phase243_242"
" self245_244"
" temp242_241"
" partially-expanded-bodys241_240)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:279:9_239"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
"(list"
" body-ctx244_243"
" declared-submodule-names246_245"
" mpis-to-reset247_246"
" phase243_242"
" self245_244"
" temp242_241)"
" partially-expanded-bodys241_240))))))))))"
" pass-1-and-2-loop_185)"
" bodys_162"
" phase_67)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_163"
" self_71)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_247)"
"(expand-context-observer"
" ctx_146)))"
"(if obs_247"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_247"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_168)"
"(let-values(((...er/expand/module.rkt:296:7_248)"
" resolve-provides109.1)"
"((expression-expanded-bodys289_249)"
" expression-expanded-bodys_167)"
"((s290_250)"
" s_39)"
"((requires+provides291_251)"
" requires+provides_81)"
"((declared-submodule-names292_252)"
" declared-submodule-names_166)"
"((m-ns293_253)"
" m-ns_78)"
"((phase294_254)"
" phase_67)"
"((self295_255)"
" self_71)"
"((ctx296_256)"
" ctx_146))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve-provides109.1))"
"(resolve-provides107.1"
" ctx296_256"
" declared-submodule-names292_252"
" m-ns293_253"
" s290_250"
" phase294_254"
" requires+provides291_251"
" self295_255"
" expression-expanded-bodys289_249)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:296:7_248"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx296_256"
" declared-submodule-names292_252"
" m-ns293_253"
" s290_250"
" phase294_254"
" requires+provides291_251"
" self295_255)"
" expression-expanded-bodys289_249)))))"
"(let-values(((is-cross-phase-persistent?_169)"
"(hash-ref"
" declared-keywords_165"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_169"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_81)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"cannot be cross-phase persistent due to required modules\""
" s_39"
"(hash-ref"
" declared-keywords_165"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_168)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_257)"
"(expand-context-observer"
" ctx_146)))"
"(if obs_257"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_257"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((submod-ctx_170)"
"(let-values(((the-struct_258)"
" ctx_146))"
"(if(expand-context?"
" the-struct_258)"
"(let-values(((frame-id297_259)"
" #f)"
"((post-expansion-scope298_260)"
" #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_258)"
" post-expansion-scope298_260"
"(root-expand-context-top-level-bind-scope"
" the-struct_258)"
"(root-expand-context-all-scopes-stx"
" the-struct_258)"
"(root-expand-context-use-site-scopes"
" the-struct_258)"
"(root-expand-context-defined-syms"
" the-struct_258)"
" frame-id297_259"
"(root-expand-context-counter"
" the-struct_258)"
"(root-expand-context-lift-key"
" the-struct_258)"
"(expand-context-context"
" the-struct_258)"
"(expand-context-phase"
" the-struct_258)"
"(expand-context-namespace"
" the-struct_258)"
"(expand-context-env"
" the-struct_258)"
"(expand-context-post-expansion-scope-action"
" the-struct_258)"
"(expand-context-scopes"
" the-struct_258)"
"(expand-context-def-ctx-scopes"
" the-struct_258)"
"(expand-context-reference-records"
" the-struct_258)"
"(expand-context-only-immediate?"
" the-struct_258)"
"(expand-context-just-once?"
" the-struct_258)"
"(expand-context-module-begin-k"
" the-struct_258)"
"(expand-context-need-eventually-defined"
" the-struct_258)"
"(expand-context-allow-unbound?"
" the-struct_258)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_258)"
"(expand-context-stops"
" the-struct_258)"
"(expand-context-current-introduction-scopes"
" the-struct_258)"
"(expand-context-declared-submodule-names"
" the-struct_258)"
"(expand-context-lifts"
" the-struct_258)"
"(expand-context-lift-envs"
" the-struct_258)"
"(expand-context-module-lifts"
" the-struct_258)"
"(expand-context-require-lifts"
" the-struct_258)"
"(expand-context-to-module-lifts"
" the-struct_258)"
"(expand-context-requires+provides"
" the-struct_258)"
"(expand-context-name"
" the-struct_258)"
"(expand-context-observer"
" the-struct_258)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                 \"expand-context?\""
" the-struct_258)))))"
"(let-values(((declare-enclosing-module_171)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:324:14_261)"
" declare-module-for-expansion129.1)"
"((fully-expanded-bodys-except-post-submodules299_262)"
" fully-expanded-bodys-except-post-submodules_168)"
"((temp300_263)"
" id:module-name202_49)"
"((temp301_264)"
" initial-require203_50)"
"((temp302_265)"
" #%module-begin234_150)"
"((requires+provides303_266)"
" requires+provides_81)"
"((m-ns304_267)"
" m-ns_78)"
"((self305_268)"
" self_71)"
"((enclosing-self306_269)"
" enclosing-self_41)"
"((root-ctx307_270)"
" root-ctx_75))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module-for-expansion129.1))"
"(declare-module-for-expansion127.1"
" enclosing-self306_269"
" temp302_265"
" temp301_264"
" temp300_263"
" m-ns304_267"
" requires+provides303_266"
" root-ctx307_270"
" self305_268"
" fully-expanded-bodys-except-post-submodules299_262)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:324:14_261"
" keyword-procedure-extract"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" 3)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
"(list"
" enclosing-self306_269"
" temp302_265"
" temp301_264"
" temp300_263"
" m-ns304_267"
" requires+provides303_266"
" root-ctx307_270"
" self305_268)"
" fully-expanded-bodys-except-post-submodules299_262)))))))"
"(let-values(((fully-expanded-bodys_172)"
"(if(stop-at-module*?"
" ctx_146)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_168)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:339:9_271)"
" expand-post-submodules151.1)"
"((fully-expanded-bodys-except-post-submodules308_272)"
" fully-expanded-bodys-except-post-submodules_168)"
"((declare-enclosing-module309_273)"
" declare-enclosing-module_171)"
"((s310_274)"
" s_39)"
"((phase311_275)"
" phase_67)"
"((self312_276)"
" self_71)"
"((requires+provides313_277)"
" requires+provides_81)"
"((is-cross-phase-persistent?314_278)"
" is-cross-phase-persistent?_169)"
"((mpis-to-reset315_279)"
" mpis-to-reset_83)"
"((declared-submodule-names316_280)"
" declared-submodule-names_166)"
"((ctx317_281)"
" ctx_146))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-post-submodules151.1))"
"(expand-post-submodules149.1"
" ctx317_281"
" declare-enclosing-module309_273"
" declared-submodule-names316_280"
" is-cross-phase-persistent?314_278"
" mpis-to-reset315_279"
" s310_274"
" phase311_275"
" requires+provides313_277"
" self312_276"
" fully-expanded-bodys-except-post-submodules308_272)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:339:9_271"
" keyword-procedure-extract"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx317_281"
" declare-enclosing-module309_273"
" declared-submodule-names316_280"
" is-cross-phase-persistent?314_278"
" mpis-to-reset315_279"
" s310_274"
" phase311_275"
" requires+provides313_277"
" self312_276)"
" fully-expanded-bodys-except-post-submodules308_272)))))))"
"(let-values(((mb-s238_282)"
" mb-s_145)"
"((disarmed-mb-s239_283)"
" disarmed-mb-s_148)"
"((temp240_284)"
"(list*"
" #%module-begin234_150"
" fully-expanded-bodys_172)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" mb-s238_282"
" disarmed-mb-s239_283"
" temp240_284)"
"(rebuild101.1"
" mb-s238_282"
" disarmed-mb-s239_283"
" temp240_284)))))))))))))))))))))))))))"
"(let-values(((mb-ctx_87)"
"(let-values(((the-struct_285)"
" ctx_79))"
"(if(expand-context?"
" the-struct_285)"
"(let-values(((context318_286)"
" 'module-begin)"
"((module-begin-k319_287)"
" module-begin-k_86))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_285)"
"(root-expand-context-post-expansion-scope"
" the-struct_285)"
"(root-expand-context-top-level-bind-scope"
" the-struct_285)"
"(root-expand-context-all-scopes-stx"
" the-struct_285)"
"(root-expand-context-use-site-scopes"
" the-struct_285)"
"(root-expand-context-defined-syms"
" the-struct_285)"
"(root-expand-context-frame-id"
" the-struct_285)"
"(root-expand-context-counter"
" the-struct_285)"
"(root-expand-context-lift-key"
" the-struct_285)"
" context318_286"
"(expand-context-phase"
" the-struct_285)"
"(expand-context-namespace"
" the-struct_285)"
"(expand-context-env"
" the-struct_285)"
"(expand-context-post-expansion-scope-action"
" the-struct_285)"
"(expand-context-scopes"
" the-struct_285)"
"(expand-context-def-ctx-scopes"
" the-struct_285)"
"(expand-context-reference-records"
" the-struct_285)"
"(expand-context-only-immediate?"
" the-struct_285)"
"(expand-context-just-once?"
" the-struct_285)"
" module-begin-k319_287"
"(expand-context-need-eventually-defined"
" the-struct_285)"
"(expand-context-allow-unbound?"
" the-struct_285)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_285)"
"(expand-context-stops"
" the-struct_285)"
"(expand-context-current-introduction-scopes"
" the-struct_285)"
"(expand-context-declared-submodule-names"
" the-struct_285)"
"(expand-context-lifts"
" the-struct_285)"
"(expand-context-lift-envs"
" the-struct_285)"
"(expand-context-module-lifts"
" the-struct_285)"
"(expand-context-require-lifts"
" the-struct_285)"
"(expand-context-to-module-lifts"
" the-struct_285)"
"(expand-context-requires+provides"
" the-struct_285)"
"(expand-context-name"
" the-struct_285)"
"(expand-context-observer"
" the-struct_285)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                               \"expand-context?\""
" the-struct_285)))))"
"(let-values(((mb_88)"
"(let-values(((...er/expand/module.rkt:372:5_288)"
" ensure-module-begin30.1)"
"((bodys320_289)"
" bodys_80)"
"((module-name-sym321_290)"
" module-name-sym_68)"
"((initial-require-s322_291)"
" initial-require-s_74)"
"((m-ns323_292)"
" m-ns_78)"
"((mb-ctx324_293)"
" mb-ctx_87)"
"((phase325_294)"
" phase_67)"
"((s326_295)"
" s_39))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" ensure-module-begin30.1))"
"(ensure-module-begin28.1"
" mb-ctx324_293"
" initial-require-s322_291"
" m-ns323_292"
" module-name-sym321_290"
" phase325_294"
" s326_295"
" bodys320_289)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:372:5_288"
" keyword-procedure-extract"
" '(#:ctx"
" #:initial-require-s"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s)"
" 3)"
" '(#:ctx"
" #:initial-require-s"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s)"
"(list"
" mb-ctx324_293"
" initial-require-s322_291"
" m-ns323_292"
" module-name-sym321_290"
" phase325_294"
" s326_295)"
" bodys320_289)))))"
"(let-values(((expanded-mb_89)"
"(let-values(((mb327_296)"
" mb_88)"
"((mb-ctx328_297)"
" mb-ctx_87))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" mb327_296"
" mb-ctx328_297)"
"(expand7.1"
" mb327_296"
" mb-ctx328_297)))))"
"(let-values(((generic-self_90)"
"(make-generic-self-module-path-index"
" self_71)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_71)"
"(let-values(((lst_298)"
"(unbox"
" mpis-to-reset_83)))"
"(begin"
"(if(list? lst_298)"
"(void)"
"(let-values()"
"(in-list lst_298)))"
"((letrec-values(((for-loop_299)"
"(lambda(fold-var_300"
" lst_301)"
"(if(pair?"
" lst_301)"
"(let-values(((mpi_302)"
"(unsafe-car"
" lst_301)))"
"(if #t"
"(let-values(((fold-var_303)"
"(let-values(((fold-var_304)"
" fold-var_300))"
"(let-values(((fold-var_305)"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_302))"
"(void)))))"
"(values"
" fold-var_305)))))"
"(if #t"
"(for-loop_299"
" fold-var_303"
"(unsafe-cdr"
" lst_301))"
" fold-var_303))"
" fold-var_300))"
" fold-var_300))))"
" for-loop_299)"
"(void)"
" lst_298)))"
"(let-values(((result-s_306)"
"(let-values(((s329_307)"
" s_39)"
"((disarmed-s330_308)"
" disarmed-s_46)"
"((temp331_309)"
"(list"
" module201_48"
" id:module-name202_49"
" initial-require-s_74"
" expanded-mb_89)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" s329_307"
" disarmed-s330_308"
" temp331_309)"
"(rebuild101.1"
" s329_307"
" disarmed-s330_308"
" temp331_309)))))"
"(let-values(((result-s_310)"
"(syntax-module-path-index-shift"
" result-s_306"
" self_71"
" generic-self_90)))"
"(let-values(((result-s_311)"
"(attach-require-provide-properties"
" requires+provides_81"
" result-s_310"
" self_71"
" generic-self_90)))"
"(let-values(((result-s_312)"
"(attach-root-expand-context-properties"
" result-s_311"
" root-ctx_75"
" self_71"
" generic-self_90)))"
"(let-values(((result-s_313)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_81)"
"(syntax-property$1"
" result-s_312"
" 'module-body-context-simple?"
" #t)"
" result-s_312)))"
"(begin"
"(let-values(((obs_314)"
"(expand-context-observer"
" ctx_79)))"
"(if obs_314"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_314"
" 'rename-one"
" result-s_313))"
"(void)))"
"(void)))"
" result-s_313)))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack13.1)"
"(lambda(given-kws_315 given-args_316 s9_317 init-ctx10_318 enclosing-self11_319)"
"(let-values(((enclosing-is-cross-phase-persistent?6_320)"
"(if(pair? given-kws_315)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_315)) #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?2_321)"
"(if enclosing-is-cross-phase-persistent?6_320(car given-args_316)(void)))"
"((given-kws_322)(if enclosing-is-cross-phase-persistent?6_320(cdr given-kws_315) given-kws_315))"
"((given-args_323)"
"(if enclosing-is-cross-phase-persistent?6_320(cdr given-args_316) given-args_316)))"
"(let-values(((enclosing-requires+provides7_324)"
"(if(pair? given-kws_322)(eq? '#:enclosing-requires+provides(car given-kws_322)) #f)))"
"(let-values(((enclosing-requires+provides3_325)"
"(if enclosing-requires+provides7_324(car given-args_323)(void)))"
"((given-kws_326)(if enclosing-requires+provides7_324(cdr given-kws_322) given-kws_322))"
"((given-args_327)(if enclosing-requires+provides7_324(cdr given-args_323) given-args_323)))"
"(let-values(((keep-enclosing-scope-at-phase5_328)"
"(if(pair? given-kws_326)(eq? '#:keep-enclosing-scope-at-phase(car given-kws_326)) #f)))"
"(let-values(((keep-enclosing-scope-at-phase1_329)"
"(if keep-enclosing-scope-at-phase5_328(car given-args_327)(void)))"
"((given-kws_330)(if keep-enclosing-scope-at-phase5_328(cdr given-kws_326) given-kws_326))"
"((given-args_331)"
"(if keep-enclosing-scope-at-phase5_328(cdr given-args_327) given-args_327)))"
"(let-values(((mpis-for-enclosing-reset8_332)(pair? given-kws_330)))"
"(let-values(((mpis-for-enclosing-reset4_333)"
"(if mpis-for-enclosing-reset8_332(car given-args_331)(void))))"
"(expand-module12.1"
" enclosing-is-cross-phase-persistent?2_321"
" enclosing-is-cross-phase-persistent?6_320"
" enclosing-requires+provides3_325"
" enclosing-requires+provides7_324"
" keep-enclosing-scope-at-phase1_329"
" keep-enclosing-scope-at-phase5_328"
" mpis-for-enclosing-reset4_333"
" mpis-for-enclosing-reset8_332"
" s9_317"
" init-ctx10_318"
" enclosing-self11_319)))))))))))"
"(define-values"
"(expand-module14.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_334 given-argc_335)"
"(if(= given-argc_335 5)"
"(let-values(((l1_336) given-kws_334))"
"(let-values(((l1_337)"
"(if(null? l1_336)"
" l1_336"
"(if(eq?(car l1_336) '#:enclosing-is-cross-phase-persistent?)(cdr l1_336) l1_336))))"
"(let-values(((l1_338) l1_337))"
"(let-values(((l1_339)"
"(if(null? l1_338)"
" l1_338"
"(if(eq?(car l1_338) '#:enclosing-requires+provides)(cdr l1_338) l1_338))))"
"(let-values(((l1_340) l1_339))"
"(let-values(((l1_341)"
"(if(null? l1_340)"
" l1_340"
"(if(eq?(car l1_340) '#:keep-enclosing-scope-at-phase)(cdr l1_340) l1_340))))"
"(let-values(((l1_342) l1_341))"
"(let-values(((l1_343)"
"(if(null? l1_342)"
" l1_342"
"(if(eq?(car l1_342) '#:mpis-for-enclosing-reset)(cdr l1_342) l1_342))))"
"(null? l1_343)))))))))"
" #f))"
"(case-lambda"
"((given-kws_344 given-args_345 s_346 init-ctx_347 enclosing-self_348)"
"(unpack13.1 given-kws_344 given-args_345 s_346 init-ctx_347 enclosing-self_348)))"
" null"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(let-values(((expand-module_349)"
"(case-lambda"
"((s_350 init-ctx_351 enclosing-self_352)"
"(unpack13.1 null null s_350 init-ctx_351 enclosing-self_352)))))"
" expand-module_349)))"
"(define-values"
"(lifted/1.1)"
"(make-required"
" 'ensure-module-begin"
"(case-lambda((self_353 bodys_354)(apply missing-kw self_353 bodys_354 null)))"
" #f"
" #f))"
"(define-values"
"(ensure-module-begin28.1)"
"(lambda(ctx18_355 initial-require-s16_356 m-ns17_357 module-name-sym15_358 phase19_359 s20_360 bodys27_361)"
"(let-values(((bodys_362) bodys27_361))"
"(let-values(((module-name-sym_363) module-name-sym15_358))"
"(let-values(((initial-require-s_364) initial-require-s16_356))"
"(let-values(((m-ns_365) m-ns17_357))"
"(let-values(((ctx_366) ctx18_355))"
"(let-values(((phase_367) phase19_359))"
"(let-values(((s_368) s20_360))"
"(let-values()"
"(let-values(((make-mb-ctx_369)"
"(lambda()"
"(let-values(((the-struct_371) ctx_366))"
"(if(expand-context? the-struct_371)"
"(let-values(((context332_372) 'module-begin)((only-immediate?333_373) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_371)"
"(root-expand-context-post-expansion-scope the-struct_371)"
"(root-expand-context-top-level-bind-scope the-struct_371)"
"(root-expand-context-all-scopes-stx the-struct_371)"
"(root-expand-context-use-site-scopes the-struct_371)"
"(root-expand-context-defined-syms the-struct_371)"
"(root-expand-context-frame-id the-struct_371)"
"(root-expand-context-counter the-struct_371)"
"(root-expand-context-lift-key the-struct_371)"
" context332_372"
"(expand-context-phase the-struct_371)"
"(expand-context-namespace the-struct_371)"
"(expand-context-env the-struct_371)"
"(expand-context-post-expansion-scope-action the-struct_371)"
"(expand-context-scopes the-struct_371)"
"(expand-context-def-ctx-scopes the-struct_371)"
"(expand-context-reference-records the-struct_371)"
" only-immediate?333_373"
"(expand-context-just-once? the-struct_371)"
"(expand-context-module-begin-k the-struct_371)"
"(expand-context-need-eventually-defined the-struct_371)"
"(expand-context-allow-unbound? the-struct_371)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_371)"
"(expand-context-stops the-struct_371)"
"(expand-context-current-introduction-scopes the-struct_371)"
"(expand-context-declared-submodule-names the-struct_371)"
"(expand-context-lifts the-struct_371)"
"(expand-context-lift-envs the-struct_371)"
"(expand-context-module-lifts the-struct_371)"
"(expand-context-require-lifts the-struct_371)"
"(expand-context-to-module-lifts the-struct_371)"
"(expand-context-requires+provides the-struct_371)"
"(expand-context-name the-struct_371)"
"(expand-context-observer the-struct_371)))"
"                                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_371))))))"
"(let-values(((mb_370)"
"(if(= 1(length bodys_362))"
"(let-values()"
"(begin"
"(let-values(((obs_374)(expand-context-observer ctx_366)))"
"(if obs_374"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_374 'rename-one(car bodys_362)))"
"(void)))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_362)) phase_367))"
"(let-values()(car bodys_362))"
"(let-values()"
"(let-values(((partly-expanded-body_375)"
"(let-values(((temp334_376)"
"(add-enclosing-name-property"
"(car bodys_362)"
" module-name-sym_363))"
"((temp335_377)(make-mb-ctx_369)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp334_376 temp335_377)"
"(expand7.1 temp334_376 temp335_377)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_375)"
" phase_367))"
"(let-values() partly-expanded-body_375)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:450:10_378)"
" add-module-begin41.1)"
"((temp336_379)(list partly-expanded-body_375))"
"((s337_380) s_368)"
"((initial-require-s338_381) initial-require-s_364)"
"((phase339_382) phase_367)"
"((module-name-sym340_383) module-name-sym_363)"
"((temp341_384)(make-mb-ctx_369))"
"((temp342_385) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference add-module-begin41.1))"
"(add-module-begin39.1"
" temp342_385"
" #t"
" temp336_379"
" s337_380"
" initial-require-s338_381"
" phase339_382"
" module-name-sym340_383"
" temp341_384)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:450:10_378"
" keyword-procedure-extract"
" '(#:log-rename-one?)"
" 8)"
" '(#:log-rename-one?)"
"(list temp342_385)"
" temp336_379"
" s337_380"
" initial-require-s338_381"
" phase339_382"
" module-name-sym340_383"
" temp341_384))))))))))"
"(let-values()"
"(let-values(((bodys343_386) bodys_362)"
"((s344_387) s_368)"
"((initial-require-s345_388) initial-require-s_364)"
"((phase346_389) phase_367)"
"((module-name-sym347_390) module-name-sym_363)"
"((temp348_391)(make-mb-ctx_369)))"
"(if(variable-reference-constant?(#%variable-reference add-module-begin41.1))"
"(add-module-begin39.1"
" #f"
" #f"
" bodys343_386"
" s344_387"
" initial-require-s345_388"
" phase346_389"
" module-name-sym347_390"
" temp348_391)"
"(add-module-begin41.1"
" bodys343_386"
" s344_387"
" initial-require-s345_388"
" phase346_389"
" module-name-sym347_390"
" temp348_391)))))))"
"(add-enclosing-name-property mb_370 module-name-sym_363)))))))))))))"
"(define-values"
"(unpack29.1)"
"(lambda(given-kws_392 given-args_393 bodys27_394)"
"(let-values(((ctx18_395)(car given-args_393))"
"((given-kws_396)(cdr given-kws_392))"
"((given-args_397)(cdr given-args_393)))"
"(let-values(((initial-require-s16_398)(car given-args_397))"
"((given-kws_399)(cdr given-kws_396))"
"((given-args_400)(cdr given-args_397)))"
"(let-values(((m-ns17_401)(car given-args_400))"
"((given-kws_402)(cdr given-kws_399))"
"((given-args_403)(cdr given-args_400)))"
"(let-values(((module-name-sym15_404)(car given-args_403))"
"((given-kws_405)(cdr given-kws_402))"
"((given-args_406)(cdr given-args_403)))"
"(let-values(((phase19_407)(car given-args_406))"
"((given-kws_408)(cdr given-kws_405))"
"((given-args_409)(cdr given-args_406)))"
"(let-values(((s20_410)(car given-args_409)))"
"(ensure-module-begin28.1"
" ctx18_395"
" initial-require-s16_398"
" m-ns17_401"
" module-name-sym15_404"
" phase19_407"
" s20_410"
" bodys27_394)))))))))"
"(define-values"
"(ensure-module-begin30.1)"
"(lifted/1.1"
"(lambda(given-kws_411 given-argc_412)"
"(if(= given-argc_412 3)"
"(let-values(((l2_413) given-kws_411))"
"(if(pair? l2_413)"
"(if(eq?(car l2_413) '#:ctx)"
"(let-values(((l2_414)(cdr l2_413)))"
"(if(pair? l2_414)"
"(if(eq?(car l2_414) '#:initial-require-s)"
"(let-values(((l2_415)(cdr l2_414)))"
"(if(pair? l2_415)"
"(if(eq?(car l2_415) '#:m-ns)"
"(let-values(((l2_416)(cdr l2_415)))"
"(if(pair? l2_416)"
"(if(eq?(car l2_416) '#:module-name-sym)"
"(let-values(((l2_417)(cdr l2_416)))"
"(if(pair? l2_417)"
"(if(eq?(car l2_417) '#:phase)"
"(let-values(((l2_418)(cdr l2_417)))"
"(if(pair? l2_418)(if(eq?(car l2_418) '#:s)(null?(cdr l2_418)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_419 given-args_420 bodys_421)(unpack29.1 given-kws_419 given-args_420 bodys_421)))"
" '(#:ctx #:initial-require-s #:m-ns #:module-name-sym #:phase #:s)"
" '(#:ctx #:initial-require-s #:m-ns #:module-name-sym #:phase #:s)))"
"(define-values"
"(add-module-begin39.1)"
"(lambda(log-rename-one?31_422"
" log-rename-one?32_423"
" bodys33_424"
" s34_425"
" initial-require-s35_426"
" phase36_427"
" module-name-sym37_428"
" mb-ctx38_429)"
"(let-values(((bodys_430) bodys33_424))"
"(let-values(((s_431) s34_425))"
"(let-values(((initial-require-s_432) initial-require-s35_426))"
"(let-values(((phase_433) phase36_427))"
"(let-values(((module-name-sym_434) module-name-sym37_428))"
"(let-values(((mb-ctx_435) mb-ctx38_429))"
"(let-values(((log-rename-one?_436)(if log-rename-one?32_423 log-rename-one?31_422 #t)))"
"(let-values()"
"(let-values(((disarmed-initial-require-s_437)(syntax-disarm$1 initial-require-s_432)))"
"(let-values(((mb-id_438)(datum->syntax$1 disarmed-initial-require-s_437 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id349_441) mb-id_438)((phase350_442) phase_433))"
"(if(variable-reference-constant?(#%variable-reference resolve21.1))"
"(resolve19.1 #f #f #f #f #f #f mb-id349_441 phase350_442)"
"(resolve21.1 mb-id349_441 phase350_442)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_431)))"
"(values))))"
"(let-values(((mb_439)"
"(datum->syntax$1"
" disarmed-initial-require-s_437"
"(list* mb-id_438 bodys_430)"
" s_431)))"
"(let-values((()"
"(begin"
"(let-values(((obs_443)(expand-context-observer mb-ctx_435)))"
"(if obs_443"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_443 'tag mb_439))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_436"
"(let-values()"
"(let-values(((obs_444)(expand-context-observer mb-ctx_435)))"
"(if obs_444"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_444 'rename-one mb_439))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_440)"
"(let-values(((temp351_445)"
"(add-enclosing-name-property mb_439 module-name-sym_434))"
"((mb-ctx352_446) mb-ctx_435))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp351_445 mb-ctx352_446)"
"(expand7.1 temp351_445 mb-ctx352_446)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_440) phase_433))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_431"
" partly-expanded-mb_440)))"
" partly-expanded-mb_440))))))))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_447"
" given-args_448"
" bodys33_449"
" s34_450"
" initial-require-s35_451"
" phase36_452"
" module-name-sym37_453"
" mb-ctx38_454)"
"(let-values(((log-rename-one?32_455)(pair? given-kws_447)))"
"(let-values(((log-rename-one?31_456)(if log-rename-one?32_455(car given-args_448)(void))))"
"(add-module-begin39.1"
" log-rename-one?31_456"
" log-rename-one?32_455"
" bodys33_449"
" s34_450"
" initial-require-s35_451"
" phase36_452"
" module-name-sym37_453"
" mb-ctx38_454)))))"
"(define-values"
"(add-module-begin41.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_457 given-argc_458)"
"(if(= given-argc_458 8)"
"(let-values(((l1_459) given-kws_457))"
"(let-values(((l1_460)"
"(if(null? l1_459) l1_459(if(eq?(car l1_459) '#:log-rename-one?)(cdr l1_459) l1_459))))"
"(null? l1_460)))"
" #f))"
"(case-lambda"
"((given-kws_461 given-args_462 bodys_463 s_464 initial-require-s_465 phase_466 module-name-sym_467 mb-ctx_468)"
"(unpack40.1"
" given-kws_461"
" given-args_462"
" bodys_463"
" s_464"
" initial-require-s_465"
" phase_466"
" module-name-sym_467"
" mb-ctx_468)))"
" null"
" '(#:log-rename-one?)"
"(let-values(((add-module-begin_469)"
"(case-lambda"
"((bodys_470 s_471 initial-require-s_472 phase_473 module-name-sym_474 mb-ctx_475)"
"(unpack40.1"
" null"
" null"
" bodys_470"
" s_471"
" initial-require-s_472"
" phase_473"
" module-name-sym_474"
" mb-ctx_475)))))"
" add-module-begin_469)))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_476 module-name-sym_477)(syntax-property$1 stx_476 'enclosing-module-name module-name-sym_477)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_478"
" outside-scope_479"
" init-ctx_480"
" keep-enclosing-scope-at-phase_481"
" self_482"
" enclosing-self_483"
" enclosing-mod_484)"
"(lambda(s_485)"
"(let-values(((s-without-enclosing_486)"
"(if keep-enclosing-scope-at-phase_481"
" s_485"
"(remove-use-site-scopes"
"(let-values(((lst_490)(root-expand-context-module-scopes init-ctx_480)))"
"(begin"
"(if(list? lst_490)(void)(let-values()(in-list lst_490)))"
"((letrec-values(((for-loop_491)"
"(lambda(s_492 lst_493)"
"(if(pair? lst_493)"
"(let-values(((sc_494)(unsafe-car lst_493)))"
"(if #t"
"(let-values(((s_495)"
"(let-values(((s_496) s_492))"
"(let-values(((s_497)"
"(let-values()"
"(remove-scope s_496 sc_494))))"
"(values s_497)))))"
"(if #t(for-loop_491 s_495(unsafe-cdr lst_493)) s_495))"
" s_492))"
" s_492))))"
" for-loop_491)"
" s_485"
" lst_490)))"
" init-ctx_480))))"
"(let-values(((s-with-edges_487)"
"(add-scope(add-scope s-without-enclosing_486 outside-scope_479) inside-scope_478)))"
"(let-values(((s-with-suitable-enclosing_488)"
"(if keep-enclosing-scope-at-phase_481"
"(let-values()"
"(syntax-module-path-index-shift s-with-edges_487 enclosing-self_483 enclosing-mod_484))"
"(let-values() s-with-edges_487))))"
"(let-values(((s-shifted_489)"
"(syntax-module-path-index-shift"
" s-with-suitable-enclosing_488"
"(make-generic-self-module-path-index self_482)"
" self_482)))"
"(syntax-set-inspector s-shifted_489(current-code-inspector)))))))))"
"(define-values"
"(lifted/2.1)"
"(make-required"
" 'partially-expand-bodys"
"(case-lambda((self_498 bodys_499)(apply missing-kw self_498 bodys_499 null)))"
" #f"
" #f))"
"(define-values"
"(partially-expand-bodys73.1)"
"(lambda(all-scopes-stx51_500"
" ctx45_501"
" declared-keywords53_502"
" declared-submodule-names54_503"
" defined-syms52_504"
" frame-id48_505"
" loop56_506"
" mpis-to-reset55_507"
" namespace46_508"
" need-eventually-defined50_509"
" original42_510"
" phase44_511"
" requires-and-provides49_512"
" self47_513"
" tail?43_514"
" bodys72_515)"
"(let-values(((bodys_516) bodys72_515))"
"(let-values(((s_517) original42_510))"
"(let-values(((tail?_518) tail?43_514))"
"(let-values(((phase_519) phase44_511))"
"(let-values(((partial-body-ctx_520) ctx45_501))"
"(let-values(((m-ns_521) namespace46_508))"
"(let-values(((self_522) self47_513))"
"(let-values(((frame-id_523) frame-id48_505))"
"(let-values(((requires+provides_524) requires-and-provides49_512))"
"(let-values(((need-eventually-defined_525) need-eventually-defined50_509))"
"(let-values(((all-scopes-stx_526) all-scopes-stx51_500))"
"(let-values(((defined-syms_527) defined-syms52_504))"
"(let-values(((declared-keywords_528) declared-keywords53_502))"
"(let-values(((declared-submodule-names_529) declared-submodule-names54_503))"
"(let-values(((mpis-to-reset_530) mpis-to-reset55_507))"
"(let-values(((pass-1-and-2-loop_531) loop56_506))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_521 phase_519)"
"((letrec-values(((loop_532)"
"(lambda(tail?_533 bodys_534)"
"(if(null? bodys_534)"
"(let-values()"
"(if tail?_533"
"(let-values()"
"(let-values(((bodys_535)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_520))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_520)))))"
"(if(null? bodys_535)"
" null"
"(loop_532"
" #t"
"(add-post-expansion-scope"
" bodys_535"
" partial-body-ctx_520)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_539)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_539"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_539"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_536)"
"(let-values(((temp353_540)"
"(car bodys_534))"
"((partial-body-ctx354_541)"
" partial-body-ctx_520))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp353_540"
" partial-body-ctx354_541)"
"(expand7.1"
" temp353_540"
" partial-body-ctx354_541)))))"
"(let-values(((disarmed-exp-body_537)"
"(syntax-disarm$1 exp-body_536)))"
"(let-values(((lifted-defns_538)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_520))))"
"(begin"
"(if(null? lifted-defns_538)"
"(let-values()"
"(begin"
"(let-values(((obs_542)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_542"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_542"
" 'rename-list"
" lifted-defns_538))"
"(void)))"
"(void)))"
"(let-values(((obs_543)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_543"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_543"
" 'module-lift-loop"
"(append"
" lifted-defns_538"
"(cons"
" exp-body_536"
"(cdr bodys_534)))))"
"(void)))"
"(void)))))"
"(let-values()"
"(let-values(((obs_544)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_544"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_544"
" 'module-lift-end-loop"
"(cons"
" exp-body_536"
"(cdr bodys_534))))"
"(void)))"
"(void)))))"
"(let-values(((obs_545)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_545"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_545"
" 'rename-one"
" exp-body_536))"
"(void)))"
"(void)))"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_520))"
" lifted-defns_538"
"(loop_532"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_520)))"
"(let-values(((tmp_546)"
"(core-form-sym"
" disarmed-exp-body_537"
" phase_519)))"
"(if(equal? tmp_546 'begin)"
"(let-values()"
"(let-values(((ok?_547"
" begin355_548"
" e356_549)"
"(let-values(((s_562)"
" disarmed-exp-body_537))"
"(if(if #t #t #f)"
"(let-values(((orig-s_563)"
" s_562))"
"(let-values(((begin355_564"
" e356_565)"
"(let-values(((s_566)"
"(if(syntax?$1"
" s_562)"
"(syntax-e$1"
" s_562)"
" s_562)))"
"(if(pair?"
" s_566)"
"(let-values(((begin357_567)"
"(let-values(((s_569)"
"(car"
" s_566)))"
" s_569))"
"((e358_568)"
"(let-values(((s_570)"
"(cdr"
" s_566)))"
"(let-values(((s_571)"
"(if(syntax?$1"
" s_570)"
"(syntax-e$1"
" s_570)"
" s_570)))"
"(let-values(((flat-s_572)"
"(to-syntax-list.1"
" s_571)))"
"(if(not"
" flat-s_572)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                \"bad syntax\""
" orig-s_563))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                  \"bad syntax\""
" orig-s_563))"
"(let-values()"
" flat-s_572))))))))"
"(values"
" begin357_567"
" e358_568))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_563)))))"
"(values"
" #t"
" begin355_564"
" e356_565)))"
"(values #f #f #f)))))"
"(let-values(((track_560)"
"(lambda(e_573)"
"(syntax-track-origin$1"
" e_573"
" exp-body_536))))"
"(let-values(((spliced-bodys_561)"
"(append"
"(map2"
" track_560"
" e356_549)"
"(cdr bodys_534))))"
"(begin"
"(let-values(((obs_574)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_574"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_574"
" 'splice"
" spliced-bodys_561))"
"(void)))"
"(void)))"
"(loop_532"
" tail?_533"
" spliced-bodys_561))))))"
"(if(equal? tmp_546 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_590)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_590"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_590"
" 'enter-prim"
" exp-body_536))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_591)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_591"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_591"
" 'enter-prim-begin-for-syntax))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_575"
" begin-for-syntax359_576"
" e360_577)"
"(let-values(((s_592)"
" disarmed-exp-body_537))"
"(if(if #t #t #f)"
"(let-values(((orig-s_593)"
" s_592))"
"(let-values(((begin-for-syntax359_594"
" e360_595)"
"(let-values(((s_596)"
"(if(syntax?$1"
" s_592)"
"(syntax-e$1"
" s_592)"
" s_592)))"
"(if(pair?"
" s_596)"
"(let-values(((begin-for-syntax361_597)"
"(let-values(((s_599)"
"(car"
" s_596)))"
" s_599))"
"((e362_598)"
"(let-values(((s_600)"
"(cdr"
" s_596)))"
"(let-values(((s_601)"
"(if(syntax?$1"
" s_600)"
"(syntax-e$1"
" s_600)"
" s_600)))"
"(let-values(((flat-s_602)"
"(to-syntax-list.1"
" s_601)))"
"(if(not"
" flat-s_602)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                      \"bad syntax\""
" orig-s_593))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_593))"
"(let-values()"
" flat-s_602))))))))"
"(values"
" begin-for-syntax361_597"
" e362_598))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_593)))))"
"(values"
" #t"
" begin-for-syntax359_594"
" e360_595)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((nested-bodys_588)"
"(pass-1-and-2-loop_531"
" e360_577"
"(add1"
" phase_519))))"
"(let-values(((ct-m-ns_589)"
"(namespace->namespace-at-phase"
" m-ns_521"
"(add1"
" phase_519))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_521"
"(add1 phase_519))"
"(eval-nested-bodys"
" nested-bodys_588"
"(add1 phase_519)"
" ct-m-ns_589"
" self_522"
" partial-body-ctx_520)"
"(namespace-visit-available-modules!"
" m-ns_521"
" phase_519)"
"(let-values(((obs_603)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_603"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_603"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body363_604)"
" exp-body_536)"
"((disarmed-exp-body364_605)"
" disarmed-exp-body_537)"
"((temp365_606)"
"(list*"
" begin-for-syntax359_576"
" nested-bodys_588)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" exp-body363_604"
" disarmed-exp-body364_605"
" temp365_606)"
"(rebuild101.1"
" exp-body363_604"
" disarmed-exp-body364_605"
" temp365_606)))"
"(loop_532"
" tail?_533"
"(cdr"
" bodys_534))))))))))"
"(if(equal? tmp_546 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_625)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_625"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_625"
" 'enter-prim"
" exp-body_536))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_626)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_626"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_626"
" 'enter-prim-define-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_607"
" define-values366_608"
" id367_609"
" rhs368_610)"
"(let-values(((s_627)"
" disarmed-exp-body_537))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_628)"
" s_627))"
"(let-values(((define-values366_629"
" id367_630"
" rhs368_631)"
"(let-values(((s_632)"
"(if(syntax?$1"
" s_627)"
"(syntax-e$1"
" s_627)"
" s_627)))"
"(if(pair?"
" s_632)"
"(let-values(((define-values369_633)"
"(let-values(((s_636)"
"(car"
" s_632)))"
" s_636))"
"((id370_634"
" rhs371_635)"
"(let-values(((s_637)"
"(cdr"
" s_632)))"
"(let-values(((s_638)"
"(if(syntax?$1"
" s_637)"
"(syntax-e$1"
" s_637)"
" s_637)))"
"(if(pair?"
" s_638)"
"(let-values(((id372_639)"
"(let-values(((s_641)"
"(car"
" s_638)))"
"(let-values(((s_642)"
"(if(syntax?$1"
" s_641)"
"(syntax-e$1"
" s_641)"
" s_641)))"
"(let-values(((flat-s_643)"
"(to-syntax-list.1"
" s_642)))"
"(if(not"
" flat-s_643)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_628))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_628))"
"(let-values()"
"(let-values(((id_644)"
"(let-values(((lst_645)"
" flat-s_643))"
"(begin"
"(if(list?"
" lst_645)"
"(void)"
"(let-values()"
"(in-list"
" lst_645)))"
"((letrec-values(((for-loop_646)"
"(lambda(id_647"
" lst_648)"
"(if(pair?"
" lst_648)"
"(let-values(((s_649)"
"(unsafe-car"
" lst_648)))"
"(if #t"
"(let-values(((id_650)"
"(let-values(((id_651)"
" id_647))"
"(let-values(((id_652)"
"(let-values()"
"(let-values(((id382_653)"
"(let-values()"
"(if(let-values(((or-part_654)"
"(if(syntax?$1"
" s_649)"
"(symbol?"
"(syntax-e$1"
" s_649))"
" #f)))"
"(if or-part_654"
" or-part_654"
"(symbol?"
" s_649)))"
" s_649"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                            \"not an identifier\""
" orig-s_628"
" s_649)))))"
"(cons"
" id382_653"
" id_651)))))"
"(values"
" id_652)))))"
"(if #t"
"(for-loop_646"
" id_650"
"(unsafe-cdr"
" lst_648))"
" id_650))"
" id_647))"
" id_647))))"
" for-loop_646)"
" null"
" lst_645)))))"
"(alt-reverse"
" id_644)))))))))"
"((rhs373_640)"
"(let-values(((s_655)"
"(cdr"
" s_638)))"
"(let-values(((s_656)"
"(if(syntax?$1"
" s_655)"
"(syntax-e$1"
" s_655)"
" s_655)))"
"(if(pair?"
" s_656)"
"(let-values(((rhs374_657)"
"(let-values(((s_658)"
"(car"
" s_656)))"
" s_658))"
"(()"
"(let-values(((s_659)"
"(cdr"
" s_656)))"
"(let-values(((s_660)"
"(if(syntax?$1"
" s_659)"
"(syntax-e$1"
" s_659)"
" s_659)))"
"(if(null?"
" s_660)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"bad syntax\""
" orig-s_628))))))"
"(values"
" rhs374_657))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                        \"bad syntax\""
" orig-s_628))))))"
"(values"
" id372_639"
" rhs373_640))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                    \"bad syntax\""
" orig-s_628))))))"
"(values"
" define-values369_633"
" id370_634"
" rhs371_635))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_628)))))"
"(values"
" #t"
" define-values366_629"
" id367_630"
" rhs368_631)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_623)"
"(remove-use-site-scopes"
" id367_609"
" partial-body-ctx_520)))"
"(let-values((()"
"(begin"
"(let-values(((ids375_661)"
" ids_623)"
"((phase376_662)"
" phase_519)"
"((exp-body377_663)"
" exp-body_536))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids375_661"
" phase376_662"
" exp-body377_663"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids375_661"
" phase376_662"
" exp-body377_663)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:607:10_664)"
" check-ids-unbound159.1)"
"((ids378_665)"
" ids_623)"
"((phase379_666)"
" phase_519)"
"((requires+provides380_667)"
" requires+provides_524)"
"((exp-body381_668)"
" exp-body_536))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound159.1))"
"(check-ids-unbound157.1"
" exp-body381_668"
" ids378_665"
" phase379_666"
" requires+provides380_667)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:607:10_664"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body381_668)"
" ids378_665"
" phase379_666"
" requires+provides380_667)))"
"(values))))"
"(let-values(((syms_624)"
"(let-values(((...er/expand/module.rkt:608:23_669)"
" select-defined-syms-and-bind!18.1)"
"((ids383_670)"
" ids_623)"
"((defined-syms384_671)"
" defined-syms_527)"
"((self385_672)"
" self_522)"
"((phase386_673)"
" phase_519)"
"((all-scopes-stx387_674)"
" all-scopes-stx_526)"
"((frame-id388_675)"
" frame-id_523)"
"((requires+provides389_676)"
" requires+provides_524)"
"((exp-body390_677)"
" exp-body_536))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id388_675"
" exp-body390_677"
" #t"
" requires+provides389_676"
" #t"
" #f"
" #f"
" ids383_670"
" defined-syms384_671"
" self385_672"
" phase386_673"
" all-scopes-stx387_674)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:608:23_669"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" frame-id388_675"
" exp-body390_677"
" requires+provides389_676)"
" ids383_670"
" defined-syms384_671"
" self385_672"
" phase386_673"
" all-scopes-stx387_674)))))"
"(begin"
"(add-defined-syms!"
" requires+provides_524"
" syms_624"
" phase_519)"
"(let-values(((obs_678)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_678"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_678"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body391_679)"
" exp-body_536)"
"((disarmed-exp-body392_680)"
" disarmed-exp-body_537)"
"((temp393_681)"
"(list"
" define-values366_608"
" ids_623"
" rhs368_610)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" exp-body391_679"
" disarmed-exp-body392_680"
" temp393_681)"
"(rebuild101.1"
" exp-body391_679"
" disarmed-exp-body392_680"
" temp393_681)))"
"(loop_532"
" tail?_533"
"(cdr"
" bodys_534))))))))))))"
"(if(equal? tmp_546 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_702)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_702"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_702"
" 'enter-prim"
" exp-body_536))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_703)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_703"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_703"
" 'enter-prim-define-syntaxes))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_682"
" define-syntaxes394_683"
" id395_684"
" rhs396_685)"
"(let-values(((s_704)"
" disarmed-exp-body_537))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_705)"
" s_704))"
"(let-values(((define-syntaxes394_706"
" id395_707"
" rhs396_708)"
"(let-values(((s_709)"
"(if(syntax?$1"
" s_704)"
"(syntax-e$1"
" s_704)"
" s_704)))"
"(if(pair?"
" s_709)"
"(let-values(((define-syntaxes397_710)"
"(let-values(((s_713)"
"(car"
" s_709)))"
" s_713))"
"((id398_711"
" rhs399_712)"
"(let-values(((s_714)"
"(cdr"
" s_709)))"
"(let-values(((s_715)"
"(if(syntax?$1"
" s_714)"
"(syntax-e$1"
" s_714)"
" s_714)))"
"(if(pair?"
" s_715)"
"(let-values(((id400_716)"
"(let-values(((s_718)"
"(car"
" s_715)))"
"(let-values(((s_719)"
"(if(syntax?$1"
" s_718)"
"(syntax-e$1"
" s_718)"
" s_718)))"
"(let-values(((flat-s_720)"
"(to-syntax-list.1"
" s_719)))"
"(if(not"
" flat-s_720)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_705))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_705))"
"(let-values()"
"(let-values(((id_721)"
"(let-values(((lst_722)"
" flat-s_720))"
"(begin"
"(if(list?"
" lst_722)"
"(void)"
"(let-values()"
"(in-list"
" lst_722)))"
"((letrec-values(((for-loop_723)"
"(lambda(id_724"
" lst_725)"
"(if(pair?"
" lst_725)"
"(let-values(((s_726)"
"(unsafe-car"
" lst_725)))"
"(if #t"
"(let-values(((id_727)"
"(let-values(((id_728)"
" id_724))"
"(let-values(((id_729)"
"(let-values()"
"(let-values(((id410_730)"
"(let-values()"
"(if(let-values(((or-part_731)"
"(if(syntax?$1"
" s_726)"
"(symbol?"
"(syntax-e$1"
" s_726))"
" #f)))"
"(if or-part_731"
" or-part_731"
"(symbol?"
" s_726)))"
" s_726"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                              \"not an identifier\""
" orig-s_705"
" s_726)))))"
"(cons"
" id410_730"
" id_728)))))"
"(values"
" id_729)))))"
"(if #t"
"(for-loop_723"
" id_727"
"(unsafe-cdr"
" lst_725))"
" id_727))"
" id_724))"
" id_724))))"
" for-loop_723)"
" null"
" lst_722)))))"
"(alt-reverse"
" id_721)))))))))"
"((rhs401_717)"
"(let-values(((s_732)"
"(cdr"
" s_715)))"
"(let-values(((s_733)"
"(if(syntax?$1"
" s_732)"
"(syntax-e$1"
" s_732)"
" s_732)))"
"(if(pair?"
" s_733)"
"(let-values(((rhs402_734)"
"(let-values(((s_735)"
"(car"
" s_733)))"
" s_735))"
"(()"
"(let-values(((s_736)"
"(cdr"
" s_733)))"
"(let-values(((s_737)"
"(if(syntax?$1"
" s_736)"
"(syntax-e$1"
" s_736)"
" s_736)))"
"(if(null?"
" s_737)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_705))))))"
"(values"
" rhs402_734))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                          \"bad syntax\""
" orig-s_705))))))"
"(values"
" id400_716"
" rhs401_717))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                      \"bad syntax\""
" orig-s_705))))))"
"(values"
" define-syntaxes397_710"
" id398_711"
" rhs399_712))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_705)))))"
"(values"
" #t"
" define-syntaxes394_706"
" id395_707"
" rhs396_708)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_698)"
"(remove-use-site-scopes"
" id395_684"
" partial-body-ctx_520)))"
"(let-values((()"
"(begin"
"(let-values(((ids403_738)"
" ids_698)"
"((phase404_739)"
" phase_519)"
"((exp-body405_740)"
" exp-body_536))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids403_738"
" phase404_739"
" exp-body405_740"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids403_738"
" phase404_739"
" exp-body405_740)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:625:10_741)"
" check-ids-unbound159.1)"
"((ids406_742)"
" ids_698)"
"((phase407_743)"
" phase_519)"
"((requires+provides408_744)"
" requires+provides_524)"
"((exp-body409_745)"
" exp-body_536))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound159.1))"
"(check-ids-unbound157.1"
" exp-body409_745"
" ids406_742"
" phase407_743"
" requires+provides408_744)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:625:10_741"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body409_745)"
" ids406_742"
" phase407_743"
" requires+provides408_744)))"
"(values))))"
"(let-values(((syms_699)"
"(let-values(((...er/expand/module.rkt:626:23_746)"
" select-defined-syms-and-bind!18.1)"
"((ids411_747)"
" ids_698)"
"((defined-syms412_748)"
" defined-syms_527)"
"((self413_749)"
" self_522)"
"((phase414_750)"
" phase_519)"
"((all-scopes-stx415_751)"
" all-scopes-stx_526)"
"((frame-id416_752)"
" frame-id_523)"
"((requires+provides417_753)"
" requires+provides_524)"
"((exp-body418_754)"
" exp-body_536)"
"((temp419_755)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" temp419_755"
" #t"
" frame-id416_752"
" exp-body418_754"
" #t"
" requires+provides417_753"
" #t"
" #f"
" #f"
" ids411_747"
" defined-syms412_748"
" self413_749"
" phase414_750"
" all-scopes-stx415_751)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:626:23_746"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" temp419_755"
" frame-id416_752"
" exp-body418_754"
" requires+provides417_753)"
" ids411_747"
" defined-syms412_748"
" self413_749"
" phase414_750"
" all-scopes-stx415_751)))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_524"
" syms_699"
" phase_519)"
"(values))))"
"(let-values(((exp-rhs_700"
" vals_701)"
"(expand+eval-for-syntaxes-binding"
" rhs396_685"
" ids_698"
"(let-values(((the-struct_756)"
" partial-body-ctx_520))"
"(if(expand-context?"
" the-struct_756)"
"(let-values(((need-eventually-defined420_757)"
" need-eventually-defined_525))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_756)"
"(root-expand-context-post-expansion-scope"
" the-struct_756)"
"(root-expand-context-top-level-bind-scope"
" the-struct_756)"
"(root-expand-context-all-scopes-stx"
" the-struct_756)"
"(root-expand-context-use-site-scopes"
" the-struct_756)"
"(root-expand-context-defined-syms"
" the-struct_756)"
"(root-expand-context-frame-id"
" the-struct_756)"
"(root-expand-context-counter"
" the-struct_756)"
"(root-expand-context-lift-key"
" the-struct_756)"
"(expand-context-context"
" the-struct_756)"
"(expand-context-phase"
" the-struct_756)"
"(expand-context-namespace"
" the-struct_756)"
"(expand-context-env"
" the-struct_756)"
"(expand-context-post-expansion-scope-action"
" the-struct_756)"
"(expand-context-scopes"
" the-struct_756)"
"(expand-context-def-ctx-scopes"
" the-struct_756)"
"(expand-context-reference-records"
" the-struct_756)"
"(expand-context-only-immediate?"
" the-struct_756)"
"(expand-context-just-once?"
" the-struct_756)"
"(expand-context-module-begin-k"
" the-struct_756)"
" need-eventually-defined420_757"
"(expand-context-allow-unbound?"
" the-struct_756)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_756)"
"(expand-context-stops"
" the-struct_756)"
"(expand-context-current-introduction-scopes"
" the-struct_756)"
"(expand-context-declared-submodule-names"
" the-struct_756)"
"(expand-context-lifts"
" the-struct_756)"
"(expand-context-lift-envs"
" the-struct_756)"
"(expand-context-module-lifts"
" the-struct_756)"
"(expand-context-require-lifts"
" the-struct_756)"
"(expand-context-to-module-lifts"
" the-struct_756)"
"(expand-context-requires+provides"
" the-struct_756)"
"(expand-context-name"
" the-struct_756)"
"(expand-context-observer"
" the-struct_756)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                           \"expand-context?\""
" the-struct_756))))))"
"(begin"
"(let-values(((lst_758)"
" syms_699)"
"((lst_759)"
" vals_701)"
"((lst_760)"
" ids_698))"
"(begin"
"(if(list?"
" lst_758)"
"(void)"
"(let-values()"
"(in-list"
" lst_758)))"
"(if(list?"
" lst_759)"
"(void)"
"(let-values()"
"(in-list"
" lst_759)))"
"(if(list?"
" lst_760)"
"(void)"
"(let-values()"
"(in-list"
" lst_760)))"
"((letrec-values(((for-loop_761)"
"(lambda(fold-var_762"
" lst_763"
" lst_764"
" lst_765)"
"(if(if(pair?"
" lst_763)"
"(if(pair?"
" lst_764)"
"(pair?"
" lst_765)"
" #f)"
" #f)"
"(let-values(((sym_766)"
"(unsafe-car"
" lst_763))"
"((val_767)"
"(unsafe-car"
" lst_764))"
"((id_768)"
"(unsafe-car"
" lst_765)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((fold-var_769)"
"(let-values(((fold-var_770)"
" fold-var_762))"
"(let-values(((fold-var_771)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_767"
" id_768"
" phase_519)"
"(namespace-set-transformer!"
" m-ns_521"
" phase_519"
" sym_766"
" val_767)))"
"(void)))))"
"(values"
" fold-var_771)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_761"
" fold-var_769"
"(unsafe-cdr"
" lst_763)"
"(unsafe-cdr"
" lst_764)"
"(unsafe-cdr"
" lst_765))"
" fold-var_769))"
" fold-var_762))"
" fold-var_762))))"
" for-loop_761)"
"(void)"
" lst_758"
" lst_759"
" lst_760)))"
"(let-values(((obs_772)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_772"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_772"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body421_773)"
" exp-body_536)"
"((disarmed-exp-body422_774)"
" disarmed-exp-body_537)"
"((temp423_775)"
"(list"
" define-syntaxes394_683"
" ids_698"
" exp-rhs_700)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" exp-body421_773"
" disarmed-exp-body422_774"
" temp423_775)"
"(rebuild101.1"
" exp-body421_773"
" disarmed-exp-body422_774"
" temp423_775)))"
"(loop_532"
" tail?_533"
"(cdr"
" bodys_534))))))))))))))"
"(if(equal? tmp_546 '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_790)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_790"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_790"
" 'enter-prim"
" exp-body_536))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_791)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_791"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_791"
" 'enter-prim-require))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_776)"
"(remove-use-site-scopes"
" disarmed-exp-body_537"
" partial-body-ctx_520)))"
"(let-values(((ok?_777"
" #%require424_778"
" req425_779)"
"(let-values(((s_792)"
" ready-body_776))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_793)"
" s_792))"
"(let-values(((#%require424_794"
" req425_795)"
"(let-values(((s_796)"
"(if(syntax?$1"
" s_792)"
"(syntax-e$1"
" s_792)"
" s_792)))"
"(if(pair?"
" s_796)"
"(let-values(((#%require426_797)"
"(let-values(((s_799)"
"(car"
" s_796)))"
" s_799))"
"((req427_798)"
"(let-values(((s_800)"
"(cdr"
" s_796)))"
"(let-values(((s_801)"
"(if(syntax?$1"
" s_800)"
"(syntax-e$1"
" s_800)"
" s_800)))"
"(let-values(((flat-s_802)"
"(to-syntax-list.1"
" s_801)))"
"(if(not"
" flat-s_802)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                              \"bad syntax\""
" orig-s_793))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                \"bad syntax\""
" orig-s_793))"
"(let-values()"
" flat-s_802))))))))"
"(values"
" #%require426_797"
" req427_798))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                      \"bad syntax\""
" orig-s_793)))))"
"(values"
" #t"
" #%require424_794"
" req425_795)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((...er/expand/module.rkt:654:10_803)"
" parse-and-perform-requires!22.1)"
"((temp428_804)"
" req425_779)"
"((exp-body429_805)"
" exp-body_536)"
"((self430_806)"
" self_522)"
"((m-ns431_807)"
" m-ns_521)"
"((phase432_808)"
" phase_519)"
"((phase433_809)"
" phase_519)"
"((requires+provides434_810)"
" requires+provides_524)"
"((declared-submodule-names435_811)"
" declared-submodule-names_529))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names435_811"
" #t"
" phase433_809"
" #t"
" #f"
" #f"
" self430_806"
" #t"
" #f"
" #f"
" temp428_804"
" exp-body429_805"
" m-ns431_807"
" phase432_808"
" requires+provides434_810)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:654:10_803"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self)"
" 7)"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self)"
"(list"
" declared-submodule-names435_811"
" phase433_809"
" self430_806)"
" temp428_804"
" exp-body429_805"
" m-ns431_807"
" phase432_808"
" requires+provides434_810)))"
"(let-values(((obs_812)"
"(expand-context-observer"
" partial-body-ctx_520)))"
"(if obs_812"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_812"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
" exp-body_536"
"(loop_532"
" tail?_533"
"(cdr"
" bodys_534)))))))))"
"(if(equal? tmp_546 '#%provide)"
"(let-values()"
"(cons"
" exp-body_536"
"(loop_532"
" tail?_533"
"(cdr bodys_534))))"
"(if(equal? tmp_546 'module)"
"(let-values()"
"(let-values(((ready-body_813)"
"(remove-use-site-scopes"
" exp-body_536"
" partial-body-ctx_520)))"
"(let-values(((submod_814)"
"(let-values(((...er/expand/module.rkt:669:12_815)"
" expand-submodule177.1)"
"((ready-body436_816)"
" ready-body_813)"
"((self437_817)"
" self_522)"
"((partial-body-ctx438_818)"
" partial-body-ctx_520)"
"((temp439_819)"
" #f)"
"((declared-submodule-names440_820)"
" declared-submodule-names_529)"
"((mpis-to-reset441_821)"
" mpis-to-reset_530))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule177.1))"
"(expand-submodule175.1"
" declared-submodule-names440_820"
" #f"
" #f"
" #f"
" #f"
" temp439_819"
" #f"
" #f"
" mpis-to-reset441_821"
" ready-body436_816"
" self437_817"
" partial-body-ctx438_818)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:669:12_815"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names440_820"
" temp439_819"
" mpis-to-reset441_821)"
" ready-body436_816"
" self437_817"
" partial-body-ctx438_818)))))"
"(cons"
" submod_814"
"(loop_532"
" tail?_533"
"(cdr bodys_534))))))"
"(if(equal? tmp_546 'module*)"
"(let-values()"
"(cons"
" exp-body_536"
"(loop_532"
" tail?_533"
"(cdr bodys_534))))"
"(if(equal?"
" tmp_546"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_822"
" #%declare442_823"
" kw443_824)"
"(let-values(((s_835)"
" disarmed-exp-body_537))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_836)"
" s_835))"
"(let-values(((#%declare442_837"
" kw443_838)"
"(let-values(((s_839)"
"(if(syntax?$1"
" s_835)"
"(syntax-e$1"
" s_835)"
" s_835)))"
"(if(pair?"
" s_839)"
"(let-values(((#%declare444_840)"
"(let-values(((s_842)"
"(car"
" s_839)))"
" s_842))"
"((kw445_841)"
"(let-values(((s_843)"
"(cdr"
" s_839)))"
"(let-values(((s_844)"
"(if(syntax?$1"
" s_843)"
"(syntax-e$1"
" s_843)"
" s_843)))"
"(let-values(((flat-s_845)"
"(to-syntax-list.1"
" s_844)))"
"(if(not"
" flat-s_845)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                \"bad syntax\""
" orig-s_836))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                  \"bad syntax\""
" orig-s_836))"
"(let-values()"
" flat-s_845))))))))"
"(values"
" #%declare444_840"
" kw445_841))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                        \"bad syntax\""
" orig-s_836)))))"
"(values"
" #t"
" #%declare442_837"
" kw443_838)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((lst_846)"
" kw443_824))"
"(begin"
"(if(list?"
" lst_846)"
"(void)"
"(let-values()"
"(in-list"
" lst_846)))"
"((letrec-values(((for-loop_847)"
"(lambda(fold-var_848"
" lst_849)"
"(if(pair?"
" lst_849)"
"(let-values(((kw_850)"
"(unsafe-car"
" lst_849)))"
"(if #t"
"(let-values(((fold-var_851)"
"(let-values(((fold-var_852)"
" fold-var_848))"
"(let-values(((fold-var_853)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_850))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"expected a keyword\""
" exp-body_536"
" kw_850)))"
"(if(memq"
"(syntax-e$1"
" kw_850)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"not an allowed declaration keyword\""
" exp-body_536"
" kw_850)))"
"(if(hash-ref"
" declared-keywords_528"
"(syntax-e$1"
" kw_850)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"keyword declared multiple times\""
" exp-body_536"
" kw_850))"
"(void))"
"(hash-set!"
" declared-keywords_528"
"(syntax-e$1"
" kw_850)"
" kw_850)))"
"(void)))))"
"(values"
" fold-var_853)))))"
"(if #t"
"(for-loop_847"
" fold-var_851"
"(unsafe-cdr"
" lst_849))"
" fold-var_851))"
" fold-var_848))"
" fold-var_848))))"
" for-loop_847)"
"(void)"
" lst_846)))"
"(cons"
" exp-body_536"
"(loop_532"
" tail?_533"
"(cdr"
" bodys_534))))))"
"(let-values()"
"(cons"
" exp-body_536"
"(loop_532"
" tail?_533"
"(cdr"
" bodys_534)))))))))))))))))))))))))"
" loop_532)"
" tail?_518"
" bodys_516)))))))))))))))))))))"
"(define-values"
"(unpack74.1)"
"(lambda(given-kws_854 given-args_855 bodys72_856)"
"(let-values(((all-scopes-stx51_857)(car given-args_855))"
"((given-kws_858)(cdr given-kws_854))"
"((given-args_859)(cdr given-args_855)))"
"(let-values(((ctx45_860)(car given-args_859))"
"((given-kws_861)(cdr given-kws_858))"
"((given-args_862)(cdr given-args_859)))"
"(let-values(((declared-keywords53_863)(car given-args_862))"
"((given-kws_864)(cdr given-kws_861))"
"((given-args_865)(cdr given-args_862)))"
"(let-values(((declared-submodule-names54_866)(car given-args_865))"
"((given-kws_867)(cdr given-kws_864))"
"((given-args_868)(cdr given-args_865)))"
"(let-values(((defined-syms52_869)(car given-args_868))"
"((given-kws_870)(cdr given-kws_867))"
"((given-args_871)(cdr given-args_868)))"
"(let-values(((frame-id48_872)(car given-args_871))"
"((given-kws_873)(cdr given-kws_870))"
"((given-args_874)(cdr given-args_871)))"
"(let-values(((loop56_875)(car given-args_874))"
"((given-kws_876)(cdr given-kws_873))"
"((given-args_877)(cdr given-args_874)))"
"(let-values(((mpis-to-reset55_878)(car given-args_877))"
"((given-kws_879)(cdr given-kws_876))"
"((given-args_880)(cdr given-args_877)))"
"(let-values(((namespace46_881)(car given-args_880))"
"((given-kws_882)(cdr given-kws_879))"
"((given-args_883)(cdr given-args_880)))"
"(let-values(((need-eventually-defined50_884)(car given-args_883))"
"((given-kws_885)(cdr given-kws_882))"
"((given-args_886)(cdr given-args_883)))"
"(let-values(((original42_887)(car given-args_886))"
"((given-kws_888)(cdr given-kws_885))"
"((given-args_889)(cdr given-args_886)))"
"(let-values(((phase44_890)(car given-args_889))"
"((given-kws_891)(cdr given-kws_888))"
"((given-args_892)(cdr given-args_889)))"
"(let-values(((requires-and-provides49_893)(car given-args_892))"
"((given-kws_894)(cdr given-kws_891))"
"((given-args_895)(cdr given-args_892)))"
"(let-values(((self47_896)(car given-args_895))"
"((given-kws_897)(cdr given-kws_894))"
"((given-args_898)(cdr given-args_895)))"
"(let-values(((tail?43_899)(car given-args_898)))"
"(partially-expand-bodys73.1"
" all-scopes-stx51_857"
" ctx45_860"
" declared-keywords53_863"
" declared-submodule-names54_866"
" defined-syms52_869"
" frame-id48_872"
" loop56_875"
" mpis-to-reset55_878"
" namespace46_881"
" need-eventually-defined50_884"
" original42_887"
" phase44_890"
" requires-and-provides49_893"
" self47_896"
" tail?43_899"
" bodys72_856))))))))))))))))))"
"(define-values"
"(partially-expand-bodys75.1)"
"(lifted/2.1"
"(lambda(given-kws_900 given-argc_901)"
"(if(= given-argc_901 3)"
"(let-values(((l2_902) given-kws_900))"
"(if(pair? l2_902)"
"(if(eq?(car l2_902) '#:all-scopes-stx)"
"(let-values(((l2_903)(cdr l2_902)))"
"(if(pair? l2_903)"
"(if(eq?(car l2_903) '#:ctx)"
"(let-values(((l2_904)(cdr l2_903)))"
"(if(pair? l2_904)"
"(if(eq?(car l2_904) '#:declared-keywords)"
"(let-values(((l2_905)(cdr l2_904)))"
"(if(pair? l2_905)"
"(if(eq?(car l2_905) '#:declared-submodule-names)"
"(let-values(((l2_906)(cdr l2_905)))"
"(if(pair? l2_906)"
"(if(eq?(car l2_906) '#:defined-syms)"
"(let-values(((l2_907)(cdr l2_906)))"
"(if(pair? l2_907)"
"(if(eq?(car l2_907) '#:frame-id)"
"(let-values(((l2_908)(cdr l2_907)))"
"(if(pair? l2_908)"
"(if(eq?(car l2_908) '#:loop)"
"(let-values(((l2_909)(cdr l2_908)))"
"(if(pair? l2_909)"
"(if(eq?(car l2_909) '#:mpis-to-reset)"
"(let-values(((l2_910)(cdr l2_909)))"
"(if(pair? l2_910)"
"(if(eq?(car l2_910) '#:namespace)"
"(let-values(((l2_911)(cdr l2_910)))"
"(if(pair? l2_911)"
"(if(eq?(car l2_911) '#:need-eventually-defined)"
"(let-values(((l2_912)(cdr l2_911)))"
"(if(pair? l2_912)"
"(if(eq?(car l2_912) '#:original)"
"(let-values(((l2_913)(cdr l2_912)))"
"(if(pair? l2_913)"
"(if(eq?(car l2_913) '#:phase)"
"(let-values(((l2_914)(cdr l2_913)))"
"(if(pair? l2_914)"
"(if(eq?"
"(car l2_914)"
" '#:requires-and-provides)"
"(let-values(((l2_915)"
"(cdr l2_914)))"
"(if(pair? l2_915)"
"(if(eq?(car l2_915) '#:self)"
"(let-values(((l2_916)"
"(cdr l2_915)))"
"(if(pair? l2_916)"
"(if(eq?"
"(car l2_916)"
" '#:tail?)"
"(null?(cdr l2_916))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_917 given-args_918 bodys_919)(unpack74.1 given-kws_917 given-args_918 bodys_919)))"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_920 frame-id_921 inside-scope_922 all-scopes-stx_923 defined-syms_924 requires+provides_925)"
"(lambda(ids_926 rhs_927 phase_928)"
"(let-values(((scoped-ids_929)"
"(alt-reverse"
"(let-values(((lst_930) ids_926))"
"(begin"
"(if(list? lst_930)(void)(let-values()(in-list lst_930)))"
"((letrec-values(((for-loop_931)"
"(lambda(fold-var_932 lst_933)"
"(if(pair? lst_933)"
"(let-values(((id_934)(unsafe-car lst_933)))"
"(if #t"
"(let-values(((fold-var_935)"
"(let-values(((fold-var_936) fold-var_932))"
"(let-values(((fold-var_937)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_934"
" inside-scope_922))"
" fold-var_936))))"
"(values fold-var_937)))))"
"(if #t"
"(for-loop_931 fold-var_935(unsafe-cdr lst_933))"
" fold-var_935))"
" fold-var_932))"
" fold-var_932))))"
" for-loop_931)"
" null"
" lst_930))))))"
"(begin"
"(let-values(((...er/expand/module.rkt:703:4_938) select-defined-syms-and-bind!18.1)"
"((scoped-ids446_939) scoped-ids_929)"
"((defined-syms447_940) defined-syms_924)"
"((self448_941) self_920)"
"((phase449_942) phase_928)"
"((all-scopes-stx450_943) all-scopes-stx_923)"
"((frame-id451_944) frame-id_921)"
"((requires+provides452_945) requires+provides_925))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id451_944"
" #f"
" #f"
" requires+provides452_945"
" #t"
" #f"
" #f"
" scoped-ids446_939"
" defined-syms447_940"
" self448_941"
" phase449_942"
" all-scopes-stx450_943)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:703:4_938"
" keyword-procedure-extract"
" '(#:frame-id #:requires+provides)"
" 7)"
" '(#:frame-id #:requires+provides)"
"(list frame-id451_944 requires+provides452_945)"
" scoped-ids446_939"
" defined-syms447_940"
" self448_941"
" phase449_942"
" all-scopes-stx450_943)))"
"(values"
" scoped-ids_929"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_928) 'define-values)"
" scoped-ids_929"
" rhs_927))"
" inside-scope_922)))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_946 ctx_947)"
"(let-values(((sc_948)(root-expand-context-post-expansion-scope ctx_947)))"
"(alt-reverse"
"(let-values(((lst_949) bodys_946))"
"(begin"
"(if(list? lst_949)(void)(let-values()(in-list lst_949)))"
"((letrec-values(((for-loop_950)"
"(lambda(fold-var_951 lst_952)"
"(if(pair? lst_952)"
"(let-values(((body_953)(unsafe-car lst_952)))"
"(if #t"
"(let-values(((fold-var_954)"
"(let-values(((fold-var_955) fold-var_951))"
"(let-values(((fold-var_956)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_953 sc_948))"
" fold-var_955))))"
"(values fold-var_956)))))"
"(if #t(for-loop_950 fold-var_954(unsafe-cdr lst_952)) fold-var_954))"
" fold-var_951))"
" fold-var_951))))"
" for-loop_950)"
" null"
" lst_949)))))))"
"(define-values"
"(lifted/3.1)"
"(make-required"
" 'finish-expanding-body-expressons"
"(case-lambda((self_957 partially-expanded-bodys_958)(apply missing-kw self_957 partially-expanded-bodys_958 null)))"
" #f"
" #f))"
"(define-values"
"(finish-expanding-body-expressons89.1)"
"(lambda(ctx78_959"
" declared-submodule-names80_960"
" mpis-to-reset81_961"
" phase77_962"
" self79_963"
" tail?76_964"
" partially-expanded-bodys88_965)"
"(let-values(((partially-expanded-bodys_966) partially-expanded-bodys88_965))"
"(let-values(((tail?_967) tail?76_964))"
"(let-values(((phase_968) phase77_962))"
"(let-values(((body-ctx_969) ctx78_959))"
"(let-values(((self_970) self79_963))"
"(let-values(((declared-submodule-names_971) declared-submodule-names80_960))"
"(let-values(((mpis-to-reset_972) mpis-to-reset81_961))"
"(let-values()"
"((letrec-values(((loop_973)"
"(lambda(tail?_974 bodys_975)"
"(if(null? bodys_975)"
"(let-values()"
"(if tail?_974"
"(let-values()"
"(let-values(((bodys_976)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_969))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_969)))))"
"(if(null? bodys_976) null(loop_973 #t bodys_976))))"
"(let-values() bodys_975)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_982)"
"(expand-context-observer body-ctx_969)))"
"(if obs_982"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_982 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-body_977)(syntax-disarm$1(car bodys_975))))"
"(let-values(((exp-body_978)"
"(let-values(((tmp_983)"
"(core-form-sym"
" disarmed-body_977"
" phase_968)))"
"(if(equal? tmp_983 'define-values)"
"(let-values()"
"(let-values(((ok?_984"
" define-values453_985"
" id454_986"
" rhs455_987)"
"(let-values(((s_1001)"
" disarmed-body_977))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1002)"
" s_1001))"
"(let-values(((define-values453_1003"
" id454_1004"
" rhs455_1005)"
"(let-values(((s_1006)"
"(if(syntax?$1"
" s_1001)"
"(syntax-e$1"
" s_1001)"
" s_1001)))"
"(if(pair?"
" s_1006)"
"(let-values(((define-values456_1007)"
"(let-values(((s_1010)"
"(car"
" s_1006)))"
" s_1010))"
"((id457_1008"
" rhs458_1009)"
"(let-values(((s_1011)"
"(cdr"
" s_1006)))"
"(let-values(((s_1012)"
"(if(syntax?$1"
" s_1011)"
"(syntax-e$1"
" s_1011)"
" s_1011)))"
"(if(pair?"
" s_1012)"
"(let-values(((id459_1013)"
"(let-values(((s_1015)"
"(car"
" s_1012)))"
"(let-values(((s_1016)"
"(if(syntax?$1"
" s_1015)"
"(syntax-e$1"
" s_1015)"
" s_1015)))"
"(let-values(((flat-s_1017)"
"(to-syntax-list.1"
" s_1016)))"
"(if(not"
" flat-s_1017)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_1002))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_1002))"
"(let-values()"
"(let-values(((id_1018)"
"(let-values(((lst_1019)"
" flat-s_1017))"
"(begin"
"(if(list?"
" lst_1019)"
"(void)"
"(let-values()"
"(in-list"
" lst_1019)))"
"((letrec-values(((for-loop_1020)"
"(lambda(id_1021"
" lst_1022)"
"(if(pair?"
" lst_1022)"
"(let-values(((s_1023)"
"(unsafe-car"
" lst_1022)))"
"(if #t"
"(let-values(((id_1024)"
"(let-values(((id_1025)"
" id_1021))"
"(let-values(((id_1026)"
"(let-values()"
"(let-values(((id465_1027)"
"(let-values()"
"(if(let-values(((or-part_1028)"
"(if(syntax?$1"
" s_1023)"
"(symbol?"
"(syntax-e$1"
" s_1023))"
" #f)))"
"(if or-part_1028"
" or-part_1028"
"(symbol?"
" s_1023)))"
" s_1023"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_1002"
" s_1023)))))"
"(cons"
" id465_1027"
" id_1025)))))"
"(values"
" id_1026)))))"
"(if #t"
"(for-loop_1020"
" id_1024"
"(unsafe-cdr"
" lst_1022))"
" id_1024))"
" id_1021))"
" id_1021))))"
" for-loop_1020)"
" null"
" lst_1019)))))"
"(alt-reverse"
" id_1018)))))))))"
"((rhs460_1014)"
"(let-values(((s_1029)"
"(cdr"
" s_1012)))"
"(let-values(((s_1030)"
"(if(syntax?$1"
" s_1029)"
"(syntax-e$1"
" s_1029)"
" s_1029)))"
"(if(pair?"
" s_1030)"
"(let-values(((rhs461_1031)"
"(let-values(((s_1032)"
"(car"
" s_1030)))"
" s_1032))"
"(()"
"(let-values(((s_1033)"
"(cdr"
" s_1030)))"
"(let-values(((s_1034)"
"(if(syntax?$1"
" s_1033)"
"(syntax-e$1"
" s_1033)"
" s_1033)))"
"(if(null?"
" s_1034)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_1002))))))"
"(values"
" rhs461_1031))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_1002))))))"
"(values"
" id459_1013"
" rhs460_1014))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_1002))))))"
"(values"
" define-values456_1007"
" id457_1008"
" rhs458_1009))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_1002)))))"
"(values"
" #t"
" define-values453_1003"
" id454_1004"
" rhs455_1005)))"
"(values #f #f #f #f)))))"
"(let-values(((exp-rhs_1000)"
"(let-values(((temp466_1035)"
" rhs455_987)"
"((temp467_1036)"
"(as-named-context"
"(as-expression-context"
" body-ctx_969)"
" id454_986)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp466_1035"
" temp467_1036)"
"(expand7.1"
" temp466_1035"
" temp467_1036)))))"
"(let-values(((temp462_1037)(car bodys_975))"
"((disarmed-body463_1038)"
" disarmed-body_977)"
"((temp464_1039)"
"(list"
" define-values453_985"
" id454_986"
" exp-rhs_1000)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" temp462_1037"
" disarmed-body463_1038"
" temp464_1039)"
"(rebuild101.1"
" temp462_1037"
" disarmed-body463_1038"
" temp464_1039))))))"
"(if(if(equal? tmp_983 'define-syntaxes)"
" #t"
"(if(equal? tmp_983 '#%require)"
" #t"
"(if(equal? tmp_983 '#%provide)"
" #t"
"(if(equal? tmp_983 'begin-for-syntax)"
" #t"
"(if(equal? tmp_983 'module)"
" #t"
"(if(equal? tmp_983 'module*)"
" #t"
"(equal? tmp_983 '#%declare)))))))"
"(let-values()(car bodys_975))"
"(let-values()"
"(let-values(((temp468_1040)(car bodys_975))"
"((temp469_1041)"
"(as-expression-context"
" body-ctx_969)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp468_1040 temp469_1041)"
"(expand7.1 temp468_1040 temp469_1041)))))))))"
"(let-values(((lifted-defns_979)"
"(loop_973"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_969)))))"
"(let-values(((lifted-requires_980)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_969))))"
"(let-values(((lifted-modules_981)"
"(let-values(((...er/expand/module.rkt:771:8_1042)"
" expand-non-module*-submodules188.1)"
"((temp470_1043)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_969)))"
"((phase471_1044) phase_968)"
"((self472_1045) self_970)"
"((body-ctx473_1046) body-ctx_969)"
"((mpis-to-reset474_1047)"
" mpis-to-reset_972)"
"((declared-submodule-names475_1048)"
" declared-submodule-names_971))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-non-module*-submodules188.1))"
"(expand-non-module*-submodules186.1"
" declared-submodule-names475_1048"
" mpis-to-reset474_1047"
" temp470_1043"
" phase471_1044"
" self472_1045"
" body-ctx473_1046)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:771:8_1042"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:mpis-to-reset)"
" 6)"
" '(#:declared-submodule-names #:mpis-to-reset)"
"(list"
" declared-submodule-names475_1048"
" mpis-to-reset474_1047)"
" temp470_1043"
" phase471_1044"
" self472_1045"
" body-ctx473_1046)))))"
"(begin"
"(if(null? lifted-defns_979)"
"(let-values()"
"(let-values(((obs_1049)"
"(expand-context-observer body-ctx_969)))"
"(if obs_1049"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1049"
" 'module-lift-loop"
" lifted-defns_979))"
"(void)))"
"(void))))"
"(let-values()"
"(let-values(((obs_1050)"
"(expand-context-observer body-ctx_969)))"
"(if obs_1050"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1050"
" 'module-lift-end-loop"
"(cons exp-body_978(cdr bodys_975))))"
"(void)))"
"(void)))))"
"(append"
" lifted-requires_980"
" lifted-defns_979"
" lifted-modules_981"
"(cons"
" exp-body_978"
"(loop_973 tail?_974(cdr bodys_975))))))))))))))))"
" loop_973)"
" tail?_967"
" partially-expanded-bodys_966)))))))))))"
"(define-values"
"(unpack90.1)"
"(lambda(given-kws_1051 given-args_1052 partially-expanded-bodys88_1053)"
"(let-values(((ctx78_1054)(car given-args_1052))"
"((given-kws_1055)(cdr given-kws_1051))"
"((given-args_1056)(cdr given-args_1052)))"
"(let-values(((declared-submodule-names80_1057)(car given-args_1056))"
"((given-kws_1058)(cdr given-kws_1055))"
"((given-args_1059)(cdr given-args_1056)))"
"(let-values(((mpis-to-reset81_1060)(car given-args_1059))"
"((given-kws_1061)(cdr given-kws_1058))"
"((given-args_1062)(cdr given-args_1059)))"
"(let-values(((phase77_1063)(car given-args_1062))"
"((given-kws_1064)(cdr given-kws_1061))"
"((given-args_1065)(cdr given-args_1062)))"
"(let-values(((self79_1066)(car given-args_1065))"
"((given-kws_1067)(cdr given-kws_1064))"
"((given-args_1068)(cdr given-args_1065)))"
"(let-values(((tail?76_1069)(car given-args_1068)))"
"(finish-expanding-body-expressons89.1"
" ctx78_1054"
" declared-submodule-names80_1057"
" mpis-to-reset81_1060"
" phase77_1063"
" self79_1066"
" tail?76_1069"
" partially-expanded-bodys88_1053)))))))))"
"(define-values"
"(finish-expanding-body-expressons91.1)"
"(lifted/3.1"
"(lambda(given-kws_1070 given-argc_1071)"
"(if(= given-argc_1071 3)"
"(let-values(((l2_1072) given-kws_1070))"
"(if(pair? l2_1072)"
"(if(eq?(car l2_1072) '#:ctx)"
"(let-values(((l2_1073)(cdr l2_1072)))"
"(if(pair? l2_1073)"
"(if(eq?(car l2_1073) '#:declared-submodule-names)"
"(let-values(((l2_1074)(cdr l2_1073)))"
"(if(pair? l2_1074)"
"(if(eq?(car l2_1074) '#:mpis-to-reset)"
"(let-values(((l2_1075)(cdr l2_1074)))"
"(if(pair? l2_1075)"
"(if(eq?(car l2_1075) '#:phase)"
"(let-values(((l2_1076)(cdr l2_1075)))"
"(if(pair? l2_1076)"
"(if(eq?(car l2_1076) '#:self)"
"(let-values(((l2_1077)(cdr l2_1076)))"
"(if(pair? l2_1077)"
"(if(eq?(car l2_1077) '#:tail?)(null?(cdr l2_1077)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1078 given-args_1079 partially-expanded-bodys_1080)"
"(unpack90.1 given-kws_1078 given-args_1079 partially-expanded-bodys_1080)))"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_1081 self_1082)"
"(let-values(((ht_1083) need-eventually-defined_1081))"
"(begin"
"(if((lambda(ht_1084)(hash? ht_1084)) ht_1083)(void)(let-values()(default-in-hash ht_1083)))"
"((letrec-values(((for-loop_1085)"
"(lambda(fold-var_1086 i_1087)"
"(if i_1087"
"(let-values(((phase_1088 l_1089)(hash-iterate-key+value ht_1083 i_1087)))"
"(if #t"
"(let-values(((fold-var_1090)"
"(let-values(((fold-var_1091) fold-var_1086))"
"(let-values(((fold-var_1092)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_1093) l_1089))"
"(begin"
"(if(list? lst_1093)"
"(void)"
"(let-values()(in-list lst_1093)))"
"((letrec-values(((for-loop_1094)"
"(lambda(fold-var_1095"
" lst_1096)"
"(if(pair? lst_1096)"
"(let-values(((id_1097)"
"(unsafe-car"
" lst_1096)))"
"(if #t"
"(let-values(((fold-var_1098)"
"(let-values(((fold-var_1099)"
" fold-var_1095))"
"(let-values(((fold-var_1100)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1101)"
"(let-values(((id476_1102)"
" id_1097)"
"((phase477_1103)"
" phase_1088))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id476_1102"
" phase477_1103)"
"(resolve+shift15.1"
" id476_1102"
" phase477_1103)))))"
"(if(if b_1101"
"(if(module-binding?"
" b_1101)"
"(if(eq?"
"(module-binding-sym"
" b_1101)"
"(syntax-e$1"
" id_1097))"
"(eq?"
"(module-binding-module"
" b_1101)"
" self_1082)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"reference to an unbound identifier\""
" id_1097)))))"
"(void)))))"
"(values"
" fold-var_1100)))))"
"(if #t"
"(for-loop_1094"
" fold-var_1098"
"(unsafe-cdr"
" lst_1096))"
" fold-var_1098))"
" fold-var_1095))"
" fold-var_1095))))"
" for-loop_1094)"
"(void)"
" lst_1093))))"
"(void)))))"
"(values fold-var_1092)))))"
"(if #t"
"(for-loop_1085 fold-var_1090(hash-iterate-next ht_1083 i_1087))"
" fold-var_1090))"
" fold-var_1086))"
" fold-var_1086))))"
" for-loop_1085)"
"(void)"
"(hash-iterate-first ht_1083))))))"
"(define-values"
"(lifted/4.1)"
"(make-required"
" 'resolve-provides"
"(case-lambda"
"((self_1104 expression-expanded-bodys_1105)(apply missing-kw self_1104 expression-expanded-bodys_1105 null)))"
" #f"
" #f))"
"(define-values"
"(resolve-provides107.1)"
"(lambda(ctx98_1106"
" declared-submodule-names94_1107"
" namespace95_1108"
" original92_1109"
" phase96_1110"
" requires-and-provides93_1111"
" self97_1112"
" expression-expanded-bodys106_1113)"
"(let-values(((expression-expanded-bodys_1114) expression-expanded-bodys106_1113))"
"(let-values(((s_1115) original92_1109))"
"(let-values(((requires+provides_1116) requires-and-provides93_1111))"
"(let-values(((declared-submodule-names_1117) declared-submodule-names94_1107))"
"(let-values(((m-ns_1118) namespace95_1108))"
"(let-values(((phase_1119) phase96_1110))"
"(let-values(((self_1120) self97_1112))"
"(let-values(((ctx_1121) ctx98_1106))"
"(let-values()"
"((letrec-values(((loop_1122)"
"(lambda(bodys_1123 phase_1124)"
"(if(null? bodys_1123)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1125)(syntax-disarm$1(car bodys_1123))))"
"(let-values(((tmp_1126)(core-form-sym disarmed-body_1125 phase_1124)))"
"(if(equal? tmp_1126 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1141)"
"(expand-context-observer ctx_1121)))"
"(if obs_1141"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1141"
" 'enter-prim"
"(car bodys_1123)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1142)"
"(expand-context-observer"
" ctx_1121)))"
"(if obs_1142"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1142"
" 'enter-prim-provide))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1127 #%provide478_1128 spec479_1129)"
"(let-values(((s_1143) disarmed-body_1125))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1144) s_1143))"
"(let-values(((#%provide478_1145"
" spec479_1146)"
"(let-values(((s_1147)"
"(if(syntax?$1"
" s_1143)"
"(syntax-e$1"
" s_1143)"
" s_1143)))"
"(if(pair? s_1147)"
"(let-values(((#%provide480_1148)"
"(let-values(((s_1150)"
"(car"
" s_1147)))"
" s_1150))"
"((spec481_1149)"
"(let-values(((s_1151)"
"(cdr"
" s_1147)))"
"(let-values(((s_1152)"
"(if(syntax?$1"
" s_1151)"
"(syntax-e$1"
" s_1151)"
" s_1151)))"
"(let-values(((flat-s_1153)"
"(to-syntax-list.1"
" s_1152)))"
"(if(not"
" flat-s_1153)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1144))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1144))"
"(let-values()"
" flat-s_1153))))))))"
"(values"
" #%provide480_1148"
" spec481_1149))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_1144)))))"
"(values"
" #t"
" #%provide478_1145"
" spec479_1146)))"
"(values #f #f #f)))))"
"(let-values(((specs_1140)"
"(parse-and-expand-provides!"
" spec479_1129"
"(car bodys_1123)"
" requires+provides_1116"
" self_1120"
" phase_1124"
"(let-values(((the-struct_1154) ctx_1121))"
"(if(expand-context? the-struct_1154)"
"(let-values(((context482_1155)"
" 'top-level)"
"((phase483_1156) phase_1124)"
"((namespace484_1157)"
"(namespace->namespace-at-phase"
" m-ns_1118"
" phase_1124))"
"((requires+provides485_1158)"
" requires+provides_1116)"
"((declared-submodule-names486_1159)"
" declared-submodule-names_1117))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1154)"
"(root-expand-context-post-expansion-scope"
" the-struct_1154)"
"(root-expand-context-top-level-bind-scope"
" the-struct_1154)"
"(root-expand-context-all-scopes-stx"
" the-struct_1154)"
"(root-expand-context-use-site-scopes"
" the-struct_1154)"
"(root-expand-context-defined-syms"
" the-struct_1154)"
"(root-expand-context-frame-id"
" the-struct_1154)"
"(root-expand-context-counter"
" the-struct_1154)"
"(root-expand-context-lift-key"
" the-struct_1154)"
" context482_1155"
" phase483_1156"
" namespace484_1157"
"(expand-context-env the-struct_1154)"
"(expand-context-post-expansion-scope-action"
" the-struct_1154)"
"(expand-context-scopes"
" the-struct_1154)"
"(expand-context-def-ctx-scopes"
" the-struct_1154)"
"(expand-context-reference-records"
" the-struct_1154)"
"(expand-context-only-immediate?"
" the-struct_1154)"
"(expand-context-just-once?"
" the-struct_1154)"
"(expand-context-module-begin-k"
" the-struct_1154)"
"(expand-context-need-eventually-defined"
" the-struct_1154)"
"(expand-context-allow-unbound?"
" the-struct_1154)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1154)"
"(expand-context-stops the-struct_1154)"
"(expand-context-current-introduction-scopes"
" the-struct_1154)"
" declared-submodule-names486_1159"
"(expand-context-lifts the-struct_1154)"
"(expand-context-lift-envs"
" the-struct_1154)"
"(expand-context-module-lifts"
" the-struct_1154)"
"(expand-context-require-lifts"
" the-struct_1154)"
"(expand-context-to-module-lifts"
" the-struct_1154)"
" requires+provides485_1158"
"(expand-context-name the-struct_1154)"
"(expand-context-observer"
" the-struct_1154)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                \"expand-context?\""
" the-struct_1154)))"
" expand7.1"
" rebuild101.1)))"
"(begin"
"(let-values(((obs_1160)"
"(expand-context-observer ctx_1121)))"
"(if obs_1160"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_1160 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((temp487_1161)(car bodys_1123))"
"((disarmed-body488_1162)"
" disarmed-body_1125)"
"((temp489_1163)"
"(list* #%provide478_1128 specs_1140)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" temp487_1161"
" disarmed-body488_1162"
" temp489_1163)"
"(rebuild101.1"
" temp487_1161"
" disarmed-body488_1162"
" temp489_1163)))"
"(loop_1122(cdr bodys_1123) phase_1124))))))))"
"(if(equal? tmp_1126 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1164 begin-for-syntax490_1165 e491_1166)"
"(let-values(((s_1178) disarmed-body_1125))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1179) s_1178))"
"(let-values(((begin-for-syntax490_1180"
" e491_1181)"
"(let-values(((s_1182)"
"(if(syntax?$1"
" s_1178)"
"(syntax-e$1"
" s_1178)"
" s_1178)))"
"(if(pair? s_1182)"
"(let-values(((begin-for-syntax492_1183)"
"(let-values(((s_1185)"
"(car"
" s_1182)))"
" s_1185))"
"((e493_1184)"
"(let-values(((s_1186)"
"(cdr"
" s_1182)))"
"(let-values(((s_1187)"
"(if(syntax?$1"
" s_1186)"
"(syntax-e$1"
" s_1186)"
" s_1186)))"
"(let-values(((flat-s_1188)"
"(to-syntax-list.1"
" s_1187)))"
"(if(not"
" flat-s_1188)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_1179))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1179))"
"(let-values()"
" flat-s_1188))))))))"
"(values"
" begin-for-syntax492_1183"
" e493_1184))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_1179)))))"
"(values"
" #t"
" begin-for-syntax490_1180"
" e491_1181)))"
"(values #f #f #f)))))"
"(let-values(((nested-bodys_1177)"
"(loop_1122 e491_1166(add1 phase_1124))))"
"(cons"
"(let-values(((temp494_1189)(car bodys_1123))"
"((disarmed-body495_1190) disarmed-body_1125)"
"((temp496_1191)"
"(list*"
" begin-for-syntax490_1165"
" nested-bodys_1177)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" temp494_1189"
" disarmed-body495_1190"
" temp496_1191)"
"(rebuild101.1"
" temp494_1189"
" disarmed-body495_1190"
" temp496_1191)))"
"(loop_1122(cdr bodys_1123) phase_1124)))))"
"(let-values()"
"(cons"
"(car bodys_1123)"
"(loop_1122(cdr bodys_1123) phase_1124))))))))))))"
" loop_1122)"
" expression-expanded-bodys_1114"
" phase_1119))))))))))))"
"(define-values"
"(unpack108.1)"
"(lambda(given-kws_1192 given-args_1193 expression-expanded-bodys106_1194)"
"(let-values(((ctx98_1195)(car given-args_1193))"
"((given-kws_1196)(cdr given-kws_1192))"
"((given-args_1197)(cdr given-args_1193)))"
"(let-values(((declared-submodule-names94_1198)(car given-args_1197))"
"((given-kws_1199)(cdr given-kws_1196))"
"((given-args_1200)(cdr given-args_1197)))"
"(let-values(((namespace95_1201)(car given-args_1200))"
"((given-kws_1202)(cdr given-kws_1199))"
"((given-args_1203)(cdr given-args_1200)))"
"(let-values(((original92_1204)(car given-args_1203))"
"((given-kws_1205)(cdr given-kws_1202))"
"((given-args_1206)(cdr given-args_1203)))"
"(let-values(((phase96_1207)(car given-args_1206))"
"((given-kws_1208)(cdr given-kws_1205))"
"((given-args_1209)(cdr given-args_1206)))"
"(let-values(((requires-and-provides93_1210)(car given-args_1209))"
"((given-kws_1211)(cdr given-kws_1208))"
"((given-args_1212)(cdr given-args_1209)))"
"(let-values(((self97_1213)(car given-args_1212)))"
"(resolve-provides107.1"
" ctx98_1195"
" declared-submodule-names94_1198"
" namespace95_1201"
" original92_1204"
" phase96_1207"
" requires-and-provides93_1210"
" self97_1213"
" expression-expanded-bodys106_1194))))))))))"
"(define-values"
"(resolve-provides109.1)"
"(lifted/4.1"
"(lambda(given-kws_1214 given-argc_1215)"
"(if(= given-argc_1215 3)"
"(let-values(((l2_1216) given-kws_1214))"
"(if(pair? l2_1216)"
"(if(eq?(car l2_1216) '#:ctx)"
"(let-values(((l2_1217)(cdr l2_1216)))"
"(if(pair? l2_1217)"
"(if(eq?(car l2_1217) '#:declared-submodule-names)"
"(let-values(((l2_1218)(cdr l2_1217)))"
"(if(pair? l2_1218)"
"(if(eq?(car l2_1218) '#:namespace)"
"(let-values(((l2_1219)(cdr l2_1218)))"
"(if(pair? l2_1219)"
"(if(eq?(car l2_1219) '#:original)"
"(let-values(((l2_1220)(cdr l2_1219)))"
"(if(pair? l2_1220)"
"(if(eq?(car l2_1220) '#:phase)"
"(let-values(((l2_1221)(cdr l2_1220)))"
"(if(pair? l2_1221)"
"(if(eq?(car l2_1221) '#:requires-and-provides)"
"(let-values(((l2_1222)(cdr l2_1221)))"
"(if(pair? l2_1222)"
"(if(eq?(car l2_1222) '#:self)(null?(cdr l2_1222)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1223 given-args_1224 expression-expanded-bodys_1225)"
"(unpack108.1 given-kws_1223 given-args_1224 expression-expanded-bodys_1225)))"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/5.1)"
"(make-required"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_1226 fully-expanded-bodys-except-post-submodules_1227)"
"(apply missing-kw self_1226 fully-expanded-bodys-except-post-submodules_1227 null)))"
" #f"
" #f))"
"(define-values"
"(declare-module-for-expansion127.1)"
"(lambda(enclosing116_1228"
" module-begin-id112_1229"
" module-intial-require111_1230"
" module-name-id110_1231"
" namespace114_1232"
" requires-and-provides113_1233"
" root-ctx117_1234"
" self115_1235"
" fully-expanded-bodys-except-post-submodules126_1236)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1237)"
" fully-expanded-bodys-except-post-submodules126_1236))"
"(let-values(((module-name-id_1238) module-name-id110_1231))"
"(let-values(((module-initial-require_1239) module-intial-require111_1230))"
"(let-values(((module-begin-id_1240) module-begin-id112_1229))"
"(let-values(((requires+provides_1241) requires-and-provides113_1233))"
"(let-values(((m-ns_1242) namespace114_1232))"
"(let-values(((self_1243) self115_1235))"
"(let-values(((enclosing-self_1244) enclosing116_1228))"
"(let-values(((root-ctx_1245) root-ctx117_1234))"
"(let-values()"
"(let-values(((tmp-mod_1246)"
"(attach-root-expand-context-properties"
"(attach-require-provide-properties"
" requires+provides_1241"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1 core-stx 'module)"
" module-name-id_1238"
" module-initial-require_1239"
"(list*"
" module-begin-id_1240"
" fully-expanded-bodys-except-post-submodules_1237)))"
" self_1243"
" self_1243)"
" root-ctx_1245"
" self_1243"
" self_1243)))"
"(let-values(((module-name_1247)"
"(1/module-path-index-resolve"
"(let-values(((or-part_1249) enclosing-self_1244))"
"(if or-part_1249 or-part_1249 self_1243)))))"
"(let-values(((root-module-name_1248)(resolved-module-path-root-name module-name_1247)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1242"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1248))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:878:4_1250) eval-module10.1)"
"((temp497_1251)"
"(let-values(((...er/expand/module.rkt:879:5_1253) compile-module13.1)"
"((tmp-mod499_1254) tmp-mod_1246)"
"((temp500_1255)"
"(let-values(((...er/expand/module.rkt:880:21_1258)"
" make-compile-context16.1)"
"((m-ns503_1259) m-ns_1242)"
"((enclosing-self504_1260) enclosing-self_1244)"
"((temp505_1261)"
"(if enclosing-self_1244"
"(1/resolved-module-path-name"
" module-name_1247)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" temp505_1261"
" #t"
" #f"
" #f"
" enclosing-self504_1260"
" #t"
" m-ns503_1259"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:880:21_1258"
" keyword-procedure-extract"
" '(#:full-module-name #:module-self #:namespace)"
" 2)"
" '(#:full-module-name #:module-self #:namespace)"
"(list"
" temp505_1261"
" enclosing-self504_1260"
" m-ns503_1259)))))"
"((self501_1256) self_1243)"
"((temp502_1257) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module13.1))"
"(compile-module11.1"
" temp502_1257"
" #t"
" self501_1256"
" #t"
" #f"
" #f"
" #f"
" #f"
" tmp-mod499_1254"
" temp500_1255)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:879:5_1253"
" keyword-procedure-extract"
" '(#:as-submodule? #:self)"
" 4)"
" '(#:as-submodule? #:self)"
"(list temp502_1257 self501_1256)"
" tmp-mod499_1254"
" temp500_1255))))"
"((temp498_1252) #t))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 temp498_1252 #t #f #f #f #f temp497_1251)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:878:4_1250"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" 3)"
" '(#:as-submodule?)"
"(list temp498_1252)"
" temp497_1251))))))))))))))))))))"
"(define-values"
"(unpack128.1)"
"(lambda(given-kws_1262 given-args_1263 fully-expanded-bodys-except-post-submodules126_1264)"
"(let-values(((enclosing116_1265)(car given-args_1263))"
"((given-kws_1266)(cdr given-kws_1262))"
"((given-args_1267)(cdr given-args_1263)))"
"(let-values(((module-begin-id112_1268)(car given-args_1267))"
"((given-kws_1269)(cdr given-kws_1266))"
"((given-args_1270)(cdr given-args_1267)))"
"(let-values(((module-intial-require111_1271)(car given-args_1270))"
"((given-kws_1272)(cdr given-kws_1269))"
"((given-args_1273)(cdr given-args_1270)))"
"(let-values(((module-name-id110_1274)(car given-args_1273))"
"((given-kws_1275)(cdr given-kws_1272))"
"((given-args_1276)(cdr given-args_1273)))"
"(let-values(((namespace114_1277)(car given-args_1276))"
"((given-kws_1278)(cdr given-kws_1275))"
"((given-args_1279)(cdr given-args_1276)))"
"(let-values(((requires-and-provides113_1280)(car given-args_1279))"
"((given-kws_1281)(cdr given-kws_1278))"
"((given-args_1282)(cdr given-args_1279)))"
"(let-values(((root-ctx117_1283)(car given-args_1282))"
"((given-kws_1284)(cdr given-kws_1281))"
"((given-args_1285)(cdr given-args_1282)))"
"(let-values(((self115_1286)(car given-args_1285)))"
"(declare-module-for-expansion127.1"
" enclosing116_1265"
" module-begin-id112_1268"
" module-intial-require111_1271"
" module-name-id110_1274"
" namespace114_1277"
" requires-and-provides113_1280"
" root-ctx117_1283"
" self115_1286"
" fully-expanded-bodys-except-post-submodules126_1264)))))))))))"
"(define-values"
"(declare-module-for-expansion129.1)"
"(lifted/5.1"
"(lambda(given-kws_1287 given-argc_1288)"
"(if(= given-argc_1288 3)"
"(let-values(((l2_1289) given-kws_1287))"
"(if(pair? l2_1289)"
"(if(eq?(car l2_1289) '#:enclosing)"
"(let-values(((l2_1290)(cdr l2_1289)))"
"(if(pair? l2_1290)"
"(if(eq?(car l2_1290) '#:module-begin-id)"
"(let-values(((l2_1291)(cdr l2_1290)))"
"(if(pair? l2_1291)"
"(if(eq?(car l2_1291) '#:module-intial-require)"
"(let-values(((l2_1292)(cdr l2_1291)))"
"(if(pair? l2_1292)"
"(if(eq?(car l2_1292) '#:module-name-id)"
"(let-values(((l2_1293)(cdr l2_1292)))"
"(if(pair? l2_1293)"
"(if(eq?(car l2_1293) '#:namespace)"
"(let-values(((l2_1294)(cdr l2_1293)))"
"(if(pair? l2_1294)"
"(if(eq?(car l2_1294) '#:requires-and-provides)"
"(let-values(((l2_1295)(cdr l2_1294)))"
"(if(pair? l2_1295)"
"(if(eq?(car l2_1295) '#:root-ctx)"
"(let-values(((l2_1296)(cdr l2_1295)))"
"(if(pair? l2_1296)"
"(if(eq?(car l2_1296) '#:self)(null?(cdr l2_1296)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1297 given-args_1298 fully-expanded-bodys-except-post-submodules_1299)"
"(unpack128.1 given-kws_1297 given-args_1298 fully-expanded-bodys-except-post-submodules_1299)))"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_1300 root-ctx_1301 orig-self_1302 new-self_1303)"
"(syntax-property$1"
" s_1300"
" 'module-root-expand-context"
"(root-expand-context-encode-for-module root-ctx_1301 orig-self_1302 new-self_1303))))"
"(define-values"
"(lifted/6.1)"
"(make-required"
" 'expand-post-submodules"
"(case-lambda"
"((self_1304 fully-expanded-bodys-except-post-submodules_1305)"
"(apply missing-kw self_1304 fully-expanded-bodys-except-post-submodules_1305 null)))"
" #f"
" #f))"
"(define-values"
"(expand-post-submodules149.1)"
"(lambda(ctx138_1306"
" declare-enclosing130_1307"
" declared-submodule-names137_1308"
" enclosing-is-cross-phase-persistent?135_1309"
" mpis-to-reset136_1310"
" original131_1311"
" phase132_1312"
" requires-and-provides134_1313"
" self133_1314"
" fully-expanded-bodys-except-post-submodules148_1315)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1316)"
" fully-expanded-bodys-except-post-submodules148_1315))"
"(let-values(((declare-enclosing-module_1317) declare-enclosing130_1307))"
"(let-values(((s_1318) original131_1311))"
"(let-values(((phase_1319) phase132_1312))"
"(let-values(((self_1320) self133_1314))"
"(let-values(((requires+provides_1321) requires-and-provides134_1313))"
"(let-values(((enclosing-is-cross-phase-persistent?_1322) enclosing-is-cross-phase-persistent?135_1309))"
"(let-values(((mpis-to-reset_1323) mpis-to-reset136_1310))"
"(let-values(((declared-submodule-names_1324) declared-submodule-names137_1308))"
"(let-values(((submod-ctx_1325) ctx138_1306))"
"(let-values()"
"((letrec-values(((loop_1326)"
"(lambda(bodys_1327 phase_1328)"
"(if(null? bodys_1327)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1329)"
"(syntax-disarm$1(car bodys_1327))))"
"(let-values(((tmp_1330)"
"(core-form-sym disarmed-body_1329 phase_1328)))"
"(if(equal? tmp_1330 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force declare-enclosing-module_1317)"
"(values))))"
"(let-values(((ready-body_1331)"
"(remove-use-site-scopes"
"(car bodys_1327)"
" submod-ctx_1325)))"
"(let-values(((ok?_1332"
" module*506_1333"
" name507_1334"
" _508_1335)"
"(let-values(((s_1349) disarmed-body_1329))"
"(if(if #t"
"(let-values(((s_1350)"
"(if(syntax?$1 s_1349)"
"(syntax-e$1 s_1349)"
" s_1349)))"
"(if(pair? s_1350)"
"(if(let-values(((s_1351)"
"(car s_1350)))"
" #t)"
"(let-values(((s_1352)"
"(cdr s_1350)))"
"(let-values(((s_1353)"
"(if(syntax?$1"
" s_1352)"
"(syntax-e$1"
" s_1352)"
" s_1352)))"
"(if(pair? s_1353)"
"(if(let-values(((s_1354)"
"(car"
" s_1353)))"
" #t)"
"(let-values(((s_1355)"
"(cdr"
" s_1353)))"
"(let-values(((s_1356)"
"(if(syntax?$1"
" s_1355)"
"(syntax-e$1"
" s_1355)"
" s_1355)))"
"(if(pair? s_1356)"
"(if(let-values(((s_1357)"
"(car"
" s_1356)))"
"(let-values(((s_1358)"
"(if(syntax?$1"
" s_1357)"
"(syntax-e$1"
" s_1357)"
" s_1357)))"
"(eq?"
" #f"
" s_1358)))"
"(let-values(((s_1359)"
"(cdr"
" s_1356)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1360) s_1349))"
"(let-values(((module*506_1361"
" name507_1362"
" _508_1363)"
"(let-values(((s_1364)"
"(if(syntax?$1"
" s_1349)"
"(syntax-e$1"
" s_1349)"
" s_1349)))"
"(if #t"
"(let-values(((module*509_1365)"
"(let-values(((s_1368)"
"(car"
" s_1364)))"
" s_1368))"
"((name510_1366"
" _511_1367)"
"(let-values(((s_1369)"
"(cdr"
" s_1364)))"
"(let-values(((s_1370)"
"(if(syntax?$1"
" s_1369)"
"(syntax-e$1"
" s_1369)"
" s_1369)))"
"(if #t"
"(let-values(((name512_1371)"
"(let-values(((s_1373)"
"(car"
" s_1370)))"
" s_1373))"
"((_513_1372)"
"(let-values(((s_1374)"
"(cdr"
" s_1370)))"
"(let-values(((s_1375)"
"(if(syntax?$1"
" s_1374)"
"(syntax-e$1"
" s_1374)"
" s_1374)))"
"(if #t"
"(let-values((()"
"(let-values(((s_1377)"
"(car"
" s_1375)))"
"(let-values(((s_1378)"
"(if(syntax?$1"
" s_1377)"
"(syntax-e$1"
" s_1377)"
" s_1377)))"
"(values))))"
"((_514_1376)"
"(let-values(((s_1379)"
"(cdr"
" s_1375)))"
" s_1379)))"
"(values"
" _514_1376))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_1360))))))"
"(values"
" name512_1371"
" _513_1372))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1360))))))"
"(values"
" module*509_1365"
" name510_1366"
" _511_1367))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_1360)))))"
"(values"
" #t"
" module*506_1361"
" name507_1362"
" _508_1363)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_1348)"
"(if ok?_1332"
"(let-values()"
"(let-values(((neg-phase_1380)"
"(phase- 0 phase_1328)))"
"(let-values(((shifted-s_1381)"
"(syntax-shift-phase-level$1"
" ready-body_1331"
" neg-phase_1380)))"
"(let-values(((submod_1382)"
"(let-values(((...er/expand/module.rkt:926:15_1383)"
" expand-submodule177.1)"
"((shifted-s515_1384)"
" shifted-s_1381)"
"((self516_1385)"
" self_1320)"
"((submod-ctx517_1386)"
" submod-ctx_1325)"
"((temp518_1387)"
" #t)"
"((neg-phase519_1388)"
" neg-phase_1380)"
"((requires+provides520_1389)"
" requires+provides_1321)"
"((enclosing-is-cross-phase-persistent?521_1390)"
" enclosing-is-cross-phase-persistent?_1322)"
"((mpis-to-reset522_1391)"
" mpis-to-reset_1323)"
"((declared-submodule-names523_1392)"
" declared-submodule-names_1324))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule177.1))"
"(expand-submodule175.1"
" declared-submodule-names523_1392"
" enclosing-is-cross-phase-persistent?521_1390"
" #t"
" requires+provides520_1389"
" #t"
" temp518_1387"
" neg-phase519_1388"
" #t"
" mpis-to-reset522_1391"
" shifted-s515_1384"
" self516_1385"
" submod-ctx517_1386)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:926:15_1383"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names523_1392"
" enclosing-is-cross-phase-persistent?521_1390"
" requires+provides520_1389"
" temp518_1387"
" neg-phase519_1388"
" mpis-to-reset522_1391)"
" shifted-s515_1384"
" self516_1385"
" submod-ctx517_1386)))))"
"(syntax-shift-phase-level$1"
" submod_1382"
" phase_1328)))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:935:13_1393)"
" expand-submodule177.1)"
"((ready-body524_1394)"
" ready-body_1331)"
"((self525_1395)"
" self_1320)"
"((submod-ctx526_1396)"
" submod-ctx_1325)"
"((temp527_1397) #t)"
"((mpis-to-reset528_1398)"
" mpis-to-reset_1323)"
"((declared-submodule-names529_1399)"
" declared-submodule-names_1324))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule177.1))"
"(expand-submodule175.1"
" declared-submodule-names529_1399"
" #f"
" #f"
" #f"
" #f"
" temp527_1397"
" #f"
" #f"
" mpis-to-reset528_1398"
" ready-body524_1394"
" self525_1395"
" submod-ctx526_1396)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:935:13_1393"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names529_1399"
" temp527_1397"
" mpis-to-reset528_1398)"
" ready-body524_1394"
" self525_1395"
" submod-ctx526_1396)))))))"
"(cons"
" submod_1348"
"(loop_1326(cdr bodys_1327) phase_1328)))))))"
"(if(equal? tmp_1330 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1400 begin-for-syntax530_1401 e531_1402)"
"(let-values(((s_1414) disarmed-body_1329))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1415) s_1414))"
"(let-values(((begin-for-syntax530_1416"
" e531_1417)"
"(let-values(((s_1418)"
"(if(syntax?$1"
" s_1414)"
"(syntax-e$1"
" s_1414)"
" s_1414)))"
"(if(pair? s_1418)"
"(let-values(((begin-for-syntax532_1419)"
"(let-values(((s_1421)"
"(car"
" s_1418)))"
" s_1421))"
"((e533_1420)"
"(let-values(((s_1422)"
"(cdr"
" s_1418)))"
"(let-values(((s_1423)"
"(if(syntax?$1"
" s_1422)"
"(syntax-e$1"
" s_1422)"
" s_1422)))"
"(let-values(((flat-s_1424)"
"(to-syntax-list.1"
" s_1423)))"
"(if(not"
" flat-s_1424)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1415))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_1415))"
"(let-values()"
" flat-s_1424))))))))"
"(values"
" begin-for-syntax532_1419"
" e533_1420))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_1415)))))"
"(values"
" #t"
" begin-for-syntax530_1416"
" e531_1417)))"
"(values #f #f #f)))))"
"(let-values(((nested-bodys_1413)"
"(loop_1326 e531_1402(add1 phase_1328))))"
"(cons"
"(let-values(((temp534_1425)(car bodys_1327))"
"((disarmed-body535_1426)"
" disarmed-body_1329)"
"((temp536_1427)"
"(list*"
" begin-for-syntax530_1401"
" nested-bodys_1413)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" temp534_1425"
" disarmed-body535_1426"
" temp536_1427)"
"(rebuild101.1"
" temp534_1425"
" disarmed-body535_1426"
" temp536_1427)))"
"(loop_1326(cdr bodys_1327) phase_1328)))))"
"(let-values()"
"(cons"
"(car bodys_1327)"
"(loop_1326(cdr bodys_1327) phase_1328))))))))))))"
" loop_1326)"
" fully-expanded-bodys-except-post-submodules_1316"
" phase_1319))))))))))))))"
"(define-values"
"(unpack150.1)"
"(lambda(given-kws_1428 given-args_1429 fully-expanded-bodys-except-post-submodules148_1430)"
"(let-values(((ctx138_1431)(car given-args_1429))"
"((given-kws_1432)(cdr given-kws_1428))"
"((given-args_1433)(cdr given-args_1429)))"
"(let-values(((declare-enclosing130_1434)(car given-args_1433))"
"((given-kws_1435)(cdr given-kws_1432))"
"((given-args_1436)(cdr given-args_1433)))"
"(let-values(((declared-submodule-names137_1437)(car given-args_1436))"
"((given-kws_1438)(cdr given-kws_1435))"
"((given-args_1439)(cdr given-args_1436)))"
"(let-values(((enclosing-is-cross-phase-persistent?135_1440)(car given-args_1439))"
"((given-kws_1441)(cdr given-kws_1438))"
"((given-args_1442)(cdr given-args_1439)))"
"(let-values(((mpis-to-reset136_1443)(car given-args_1442))"
"((given-kws_1444)(cdr given-kws_1441))"
"((given-args_1445)(cdr given-args_1442)))"
"(let-values(((original131_1446)(car given-args_1445))"
"((given-kws_1447)(cdr given-kws_1444))"
"((given-args_1448)(cdr given-args_1445)))"
"(let-values(((phase132_1449)(car given-args_1448))"
"((given-kws_1450)(cdr given-kws_1447))"
"((given-args_1451)(cdr given-args_1448)))"
"(let-values(((requires-and-provides134_1452)(car given-args_1451))"
"((given-kws_1453)(cdr given-kws_1450))"
"((given-args_1454)(cdr given-args_1451)))"
"(let-values(((self133_1455)(car given-args_1454)))"
"(expand-post-submodules149.1"
" ctx138_1431"
" declare-enclosing130_1434"
" declared-submodule-names137_1437"
" enclosing-is-cross-phase-persistent?135_1440"
" mpis-to-reset136_1443"
" original131_1446"
" phase132_1449"
" requires-and-provides134_1452"
" self133_1455"
" fully-expanded-bodys-except-post-submodules148_1430))))))))))))"
"(define-values"
"(expand-post-submodules151.1)"
"(lifted/6.1"
"(lambda(given-kws_1456 given-argc_1457)"
"(if(= given-argc_1457 3)"
"(let-values(((l2_1458) given-kws_1456))"
"(if(pair? l2_1458)"
"(if(eq?(car l2_1458) '#:ctx)"
"(let-values(((l2_1459)(cdr l2_1458)))"
"(if(pair? l2_1459)"
"(if(eq?(car l2_1459) '#:declare-enclosing)"
"(let-values(((l2_1460)(cdr l2_1459)))"
"(if(pair? l2_1460)"
"(if(eq?(car l2_1460) '#:declared-submodule-names)"
"(let-values(((l2_1461)(cdr l2_1460)))"
"(if(pair? l2_1461)"
"(if(eq?(car l2_1461) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1462)(cdr l2_1461)))"
"(if(pair? l2_1462)"
"(if(eq?(car l2_1462) '#:mpis-to-reset)"
"(let-values(((l2_1463)(cdr l2_1462)))"
"(if(pair? l2_1463)"
"(if(eq?(car l2_1463) '#:original)"
"(let-values(((l2_1464)(cdr l2_1463)))"
"(if(pair? l2_1464)"
"(if(eq?(car l2_1464) '#:phase)"
"(let-values(((l2_1465)(cdr l2_1464)))"
"(if(pair? l2_1465)"
"(if(eq?(car l2_1465) '#:requires-and-provides)"
"(let-values(((l2_1466)(cdr l2_1465)))"
"(if(pair? l2_1466)"
"(if(eq?(car l2_1466) '#:self)(null?(cdr l2_1466)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1467 given-args_1468 fully-expanded-bodys-except-post-submodules_1469)"
"(unpack150.1 given-kws_1467 given-args_1468 fully-expanded-bodys-except-post-submodules_1469)))"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1470)"
"(free-id-set-member?"
"(expand-context-stops ctx_1470)"
"(expand-context-phase ctx_1470)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_1470)))))"
"(define-values"
"(lifted/7.1)"
"(make-required"
" 'check-ids-unbound"
"(case-lambda"
"((self_1471 ids_1472 phase_1473 requires+provides_1474)"
"(apply missing-kw self_1471 ids_1472 phase_1473 requires+provides_1474 null)))"
" #f"
" #f))"
"(define-values"
"(check-ids-unbound157.1)"
"(lambda(in152_1475 ids154_1476 phase155_1477 requires+provides156_1478)"
"(let-values(((ids_1479) ids154_1476))"
"(let-values(((phase_1480) phase155_1477))"
"(let-values(((requires+provides_1481) requires+provides156_1478))"
"(let-values(((s_1482) in152_1475))"
"(let-values()"
"(let-values(((lst_1483) ids_1479))"
"(begin"
"(if(list? lst_1483)(void)(let-values()(in-list lst_1483)))"
"((letrec-values(((for-loop_1484)"
"(lambda(fold-var_1485 lst_1486)"
"(if(pair? lst_1486)"
"(let-values(((id_1487)(unsafe-car lst_1486)))"
"(if #t"
"(let-values(((fold-var_1488)"
"(let-values(((fold-var_1489) fold-var_1485))"
"(let-values(((fold-var_1490)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...er/expand/module.rkt:960:4_1491)"
" check-not-defined55.1)"
"((requires+provides537_1492)"
" requires+provides_1481)"
"((id538_1493) id_1487)"
"((phase539_1494)"
" phase_1480)"
"((s540_1495) s_1482))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined55.1))"
"(check-not-defined53.1"
" #f"
" #f"
" s540_1495"
" #f"
" #f"
" requires+provides537_1492"
" id538_1493"
" phase539_1494)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:960:4_1491"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list s540_1495)"
" requires+provides537_1492"
" id538_1493"
" phase539_1494))))"
"(void)))))"
"(values fold-var_1490)))))"
"(if #t(for-loop_1484 fold-var_1488(unsafe-cdr lst_1486)) fold-var_1488))"
" fold-var_1485))"
" fold-var_1485))))"
" for-loop_1484)"
"(void)"
" lst_1483))))))))))"
"(define-values"
"(unpack158.1)"
"(lambda(given-kws_1496 given-args_1497 ids154_1498 phase155_1499 requires+provides156_1500)"
"(let-values(((in152_1501)(car given-args_1497)))"
"(check-ids-unbound157.1 in152_1501 ids154_1498 phase155_1499 requires+provides156_1500))))"
"(define-values"
"(check-ids-unbound159.1)"
"(lifted/7.1"
"(lambda(given-kws_1502 given-argc_1503)"
"(if(= given-argc_1503 5)"
"(let-values(((l2_1504) given-kws_1502))"
"(if(pair? l2_1504)(if(eq?(car l2_1504) '#:in)(null?(cdr l2_1504)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1505 given-args_1506 ids_1507 phase_1508 requires+provides_1509)"
"(unpack158.1 given-kws_1505 given-args_1506 ids_1507 phase_1508 requires+provides_1509)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1510 phase_1511 m-ns_1512 self_1513 ctx_1514)"
"(let-values(((lst_1515) bodys_1510))"
"(begin"
"(if(list? lst_1515)(void)(let-values()(in-list lst_1515)))"
"((letrec-values(((for-loop_1516)"
"(lambda(fold-var_1517 lst_1518)"
"(if(pair? lst_1518)"
"(let-values(((body_1519)(unsafe-car lst_1518)))"
"(if #t"
"(let-values(((fold-var_1520)"
"(let-values(((fold-var_1521) fold-var_1517))"
"(let-values(((fold-var_1522)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((disarmed-body_1523)"
"(syntax-disarm$1 body_1519)))"
"(let-values(((tmp_1524)"
"(core-form-sym"
" disarmed-body_1523"
" phase_1511)))"
"(if(equal? tmp_1524 'define-values)"
"(let-values()"
"(let-values(((ok?_1525"
" define-values541_1526"
" id542_1527"
" rhs543_1528)"
"(let-values(((s_1543)"
" disarmed-body_1523))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1544)"
" s_1543))"
"(let-values(((define-values541_1545"
" id542_1546"
" rhs543_1547)"
"(let-values(((s_1548)"
"(if(syntax?$1"
" s_1543)"
"(syntax-e$1"
" s_1543)"
" s_1543)))"
"(if(pair?"
" s_1548)"
"(let-values(((define-values544_1549)"
"(let-values(((s_1552)"
"(car"
" s_1548)))"
" s_1552))"
"((id545_1550"
" rhs546_1551)"
"(let-values(((s_1553)"
"(cdr"
" s_1548)))"
"(let-values(((s_1554)"
"(if(syntax?$1"
" s_1553)"
"(syntax-e$1"
" s_1553)"
" s_1553)))"
"(if(pair?"
" s_1554)"
"(let-values(((id547_1555)"
"(let-values(((s_1557)"
"(car"
" s_1554)))"
"(let-values(((s_1558)"
"(if(syntax?$1"
" s_1557)"
"(syntax-e$1"
" s_1557)"
" s_1557)))"
"(let-values(((flat-s_1559)"
"(to-syntax-list.1"
" s_1558)))"
"(if(not"
" flat-s_1559)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_1544))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_1544))"
"(let-values()"
"(let-values(((id_1560)"
"(let-values(((lst_1561)"
" flat-s_1559))"
"(begin"
"(if(list?"
" lst_1561)"
"(void)"
"(let-values()"
"(in-list"
" lst_1561)))"
"((letrec-values(((for-loop_1562)"
"(lambda(id_1563"
" lst_1564)"
"(if(pair?"
" lst_1564)"
"(let-values(((s_1565)"
"(unsafe-car"
" lst_1564)))"
"(if #t"
"(let-values(((id_1566)"
"(let-values(((id_1567)"
" id_1563))"
"(let-values(((id_1568)"
"(let-values()"
"(let-values(((id550_1569)"
"(let-values()"
"(if(let-values(((or-part_1570)"
"(if(syntax?$1"
" s_1565)"
"(symbol?"
"(syntax-e$1"
" s_1565))"
" #f)))"
"(if or-part_1570"
" or-part_1570"
"(symbol?"
" s_1565)))"
" s_1565"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_1544"
" s_1565)))))"
"(cons"
" id550_1569"
" id_1567)))))"
"(values"
" id_1568)))))"
"(if #t"
"(for-loop_1562"
" id_1566"
"(unsafe-cdr"
" lst_1564))"
" id_1566))"
" id_1563))"
" id_1563))))"
" for-loop_1562)"
" null"
" lst_1561)))))"
"(alt-reverse"
" id_1560)))))))))"
"((rhs548_1556)"
"(let-values(((s_1571)"
"(cdr"
" s_1554)))"
"(let-values(((s_1572)"
"(if(syntax?$1"
" s_1571)"
"(syntax-e$1"
" s_1571)"
" s_1571)))"
"(if(pair?"
" s_1572)"
"(let-values(((rhs549_1573)"
"(let-values(((s_1574)"
"(car"
" s_1572)))"
" s_1574))"
"(()"
"(let-values(((s_1575)"
"(cdr"
" s_1572)))"
"(let-values(((s_1576)"
"(if(syntax?$1"
" s_1575)"
"(syntax-e$1"
" s_1575)"
" s_1575)))"
"(if(null?"
" s_1576)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_1544))))))"
"(values"
" rhs549_1573))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_1544))))))"
"(values"
" id547_1555"
" rhs548_1556))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_1544))))))"
"(values"
" define-values544_1549"
" id545_1550"
" rhs546_1551))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_1544)))))"
"(values"
" #t"
" define-values541_1545"
" id542_1546"
" rhs543_1547)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_1541) id542_1527))"
"(let-values(((vals_1542)"
"(eval-for-bindings"
" ids_1541"
" rhs543_1528"
" phase_1511"
" m-ns_1512"
" ctx_1514)))"
"(let-values(((lst_1577) ids_1541)"
"((lst_1578) vals_1542))"
"(begin"
"(if(list? lst_1577)"
"(void)"
"(let-values()"
"(in-list lst_1577)))"
"(if(list? lst_1578)"
"(void)"
"(let-values()"
"(in-list lst_1578)))"
"((letrec-values(((for-loop_1579)"
"(lambda(fold-var_1580"
" lst_1581"
" lst_1582)"
"(if(if(pair?"
" lst_1581)"
"(pair?"
" lst_1582)"
" #f)"
"(let-values(((id_1583)"
"(unsafe-car"
" lst_1581))"
"((val_1584)"
"(unsafe-car"
" lst_1582)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_1585)"
"(let-values(((fold-var_1586)"
" fold-var_1580))"
"(let-values(((fold-var_1587)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1588)"
"(let-values(((id551_1589)"
" id_1583)"
"((phase552_1590)"
" phase_1511))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve21.1))"
"(resolve19.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id551_1589"
" phase552_1590)"
"(resolve21.1"
" id551_1589"
" phase552_1590)))))"
"(begin"
"(if(if(module-binding?"
" b_1588)"
"(equal?"
" self_1513"
"(module-binding-module"
" b_1588))"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                               \"internal error: nested binding is not to self\")))"
"(namespace-set-variable!"
" m-ns_1512"
" phase_1511"
"(module-binding-sym"
" b_1588)"
" val_1584))))"
"(void)))))"
"(values"
" fold-var_1587)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_1579"
" fold-var_1585"
"(unsafe-cdr"
" lst_1581)"
"(unsafe-cdr"
" lst_1582))"
" fold-var_1585))"
" fold-var_1580))"
" fold-var_1580))))"
" for-loop_1579)"
"(void)"
" lst_1577"
" lst_1578)))))))"
"(if(equal? tmp_1524 'define-syntaxes)"
"(let-values()(void))"
"(if(if(equal? tmp_1524 '#%provide)"
" #t"
"(if(equal? tmp_1524 '#%require)"
" #t"
"(if(equal? tmp_1524 'module)"
" #t"
"(if(equal? tmp_1524 'module*)"
" #t"
"(if(equal?"
" tmp_1524"
" 'begin-for-syntax)"
" #t"
"(equal?"
" tmp_1524"
" '#%declare))))))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_1514"
" 1/current-namespace"
" m-ns_1512)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" body_1519"
"(let-values(((...er/expand/module.rkt:992:31_1591)"
" make-compile-context16.1)"
"((m-ns553_1592)"
" m-ns_1512)"
"((phase554_1593)"
" phase_1511))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context16.1))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns553_1592"
" #t"
" phase554_1593"
" #t"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:992:31_1591"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list"
" m-ns553_1592"
" phase554_1593)))))"
" m-ns_1512))))))))))"
"(void)))))"
"(values fold-var_1522)))))"
"(if #t(for-loop_1516 fold-var_1520(unsafe-cdr lst_1518)) fold-var_1520))"
" fold-var_1517))"
" fold-var_1517))))"
" for-loop_1516)"
"(void)"
" lst_1515)))))"
"(define-values"
"(lifted/8.1)"
"(make-required"
" 'expand-submodule"
"(case-lambda((self_1594 s_1595 self_1596 ctx_1597)(apply missing-kw self_1594 s_1595 self_1596 ctx_1597 null)))"
" #f"
" #f))"
"(define-values"
"(expand-submodule175.1)"
"(lambda(declared-submodule-names165_1598"
" enclosing-is-cross-phase-persistent?163_1599"
" enclosing-is-cross-phase-persistent?169_1600"
" enclosing-requires+provides162_1601"
" enclosing-requires+provides168_1602"
" is-star?160_1603"
" keep-enclosing-scope-at-phase161_1604"
" keep-enclosing-scope-at-phase167_1605"
" mpis-to-reset164_1606"
" s172_1607"
" self173_1608"
" ctx174_1609)"
"(let-values(((s_1610) s172_1607))"
"(let-values(((self_1611) self173_1608))"
"(let-values(((ctx_1612) ctx174_1609))"
"(let-values(((is-star?_1613) is-star?160_1603))"
"(let-values(((keep-enclosing-scope-at-phase_1614)"
"(if keep-enclosing-scope-at-phase167_1605 keep-enclosing-scope-at-phase161_1604 #f)))"
"(let-values(((enclosing-r+p_1615)"
"(if enclosing-requires+provides168_1602 enclosing-requires+provides162_1601 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1616)"
"(if enclosing-is-cross-phase-persistent?169_1600"
" enclosing-is-cross-phase-persistent?163_1599"
" #f)))"
"(let-values(((mpis-to-reset_1617) mpis-to-reset164_1606))"
"(let-values(((declared-submodule-names_1618) declared-submodule-names165_1598))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1640)(expand-context-observer ctx_1612)))"
"(if obs_1640"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1640 'enter-prim s_1610))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1641)(expand-context-observer ctx_1612)))"
"(if obs_1641"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1641"
"(if is-star?_1613 'enter-prim-submodule* 'enter-prim-submodule)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1619 module555_1620 name556_1621 _557_1622)"
"(let-values(((s_1642) s_1610))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1643) s_1642))"
"(let-values(((module555_1644 name556_1645 _557_1646)"
"(let-values(((s_1647)"
"(if(syntax?$1 s_1642)"
"(syntax-e$1 s_1642)"
" s_1642)))"
"(if(pair? s_1647)"
"(let-values(((module558_1648)"
"(let-values(((s_1651)(car s_1647)))"
" s_1651))"
"((name559_1649 _560_1650)"
"(let-values(((s_1652)(cdr s_1647)))"
"(let-values(((s_1653)"
"(if(syntax?$1 s_1652)"
"(syntax-e$1 s_1652)"
" s_1652)))"
"(if(pair? s_1653)"
"(let-values(((name561_1654)"
"(let-values(((s_1656)"
"(car"
" s_1653)))"
" s_1656))"
"((_562_1655)"
"(let-values(((s_1657)"
"(cdr"
" s_1653)))"
" s_1657)))"
"(values name561_1654 _562_1655))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_1643))))))"
"(values module558_1648 name559_1649 _560_1650))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_1643)))))"
"(values #t module555_1644 name556_1645 _557_1646)))"
"(values #f #f #f #f)))))"
"(let-values(((name_1635)(syntax-e$1 name556_1621)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1618 name_1635 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                     \"submodule already declared with the same name\""
" s_1610"
" name_1635))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1618"
" name_1635"
"(syntax-e$1 module555_1620))"
"(values))))"
"(let-values(((submod_1636)"
"(let-values(((...er/expand/module.rkt:1017:4_1658) expand-module14.1)"
"((s563_1659) s_1610)"
"((temp564_1660)"
"(let-values(((the-struct_1666) ctx_1612))"
"(if(expand-context? the-struct_1666)"
"(let-values(((context570_1667) 'module)"
"((only-immediate?571_1668) #f)"
"((post-expansion-scope572_1669) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1666)"
" post-expansion-scope572_1669"
"(root-expand-context-top-level-bind-scope"
" the-struct_1666)"
"(root-expand-context-all-scopes-stx"
" the-struct_1666)"
"(root-expand-context-use-site-scopes"
" the-struct_1666)"
"(root-expand-context-defined-syms"
" the-struct_1666)"
"(root-expand-context-frame-id the-struct_1666)"
"(root-expand-context-counter the-struct_1666)"
"(root-expand-context-lift-key the-struct_1666)"
" context570_1667"
"(expand-context-phase the-struct_1666)"
"(expand-context-namespace the-struct_1666)"
"(expand-context-env the-struct_1666)"
"(expand-context-post-expansion-scope-action"
" the-struct_1666)"
"(expand-context-scopes the-struct_1666)"
"(expand-context-def-ctx-scopes the-struct_1666)"
"(expand-context-reference-records"
" the-struct_1666)"
" only-immediate?571_1668"
"(expand-context-just-once? the-struct_1666)"
"(expand-context-module-begin-k the-struct_1666)"
"(expand-context-need-eventually-defined"
" the-struct_1666)"
"(expand-context-allow-unbound? the-struct_1666)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1666)"
"(expand-context-stops the-struct_1666)"
"(expand-context-current-introduction-scopes"
" the-struct_1666)"
"(expand-context-declared-submodule-names"
" the-struct_1666)"
"(expand-context-lifts the-struct_1666)"
"(expand-context-lift-envs the-struct_1666)"
"(expand-context-module-lifts the-struct_1666)"
"(expand-context-require-lifts the-struct_1666)"
"(expand-context-to-module-lifts the-struct_1666)"
"(expand-context-requires+provides"
" the-struct_1666)"
"(expand-context-name the-struct_1666)"
"(expand-context-observer the-struct_1666)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context?\""
" the-struct_1666))))"
"((self565_1661) self_1611)"
"((keep-enclosing-scope-at-phase566_1662)"
" keep-enclosing-scope-at-phase_1614)"
"((enclosing-r+p567_1663) enclosing-r+p_1615)"
"((enclosing-is-cross-phase-persistent?568_1664)"
" enclosing-is-cross-phase-persistent?_1616)"
"((mpis-to-reset569_1665) mpis-to-reset_1617))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-module14.1))"
"(expand-module12.1"
" enclosing-is-cross-phase-persistent?568_1664"
" #t"
" enclosing-r+p567_1663"
" #t"
" keep-enclosing-scope-at-phase566_1662"
" #t"
" mpis-to-reset569_1665"
" #t"
" s563_1659"
" temp564_1660"
" self565_1661)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1017:4_1658"
" keyword-procedure-extract"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
" 5)"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(list"
" enclosing-is-cross-phase-persistent?568_1664"
" enclosing-r+p567_1663"
" keep-enclosing-scope-at-phase566_1662"
" mpis-to-reset569_1665)"
" s563_1659"
" temp564_1660"
" self565_1661)))))"
"(let-values(((ns_1637)(expand-context-namespace ctx_1612)))"
"(let-values(((module-name_1638)(1/module-path-index-resolve self_1611)))"
"(let-values(((root-module-name_1639)"
"(resolved-module-path-root-name module-name_1638)))"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1637"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1639))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1035:4_1670) eval-module10.1)"
"((temp573_1671)"
"(let-values(((...er/expand/module.rkt:1036:5_1673)"
" compile-module13.1)"
"((submod575_1674) submod_1636)"
"((temp576_1675)"
"(let-values(((...er/expand/module.rkt:1037:21_1677)"
" make-compile-context16.1)"
"((ns578_1678) ns_1637)"
"((self579_1679) self_1611)"
"((temp580_1680)"
"(1/resolved-module-path-name"
" module-name_1638)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context16.1))"
"(make-compile-context14.1"
" temp580_1680"
" #t"
" #f"
" #f"
" self579_1679"
" #t"
" ns578_1678"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1037:21_1677"
" keyword-procedure-extract"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
" 2)"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
"(list"
" temp580_1680"
" self579_1679"
" ns578_1678)))))"
"((temp577_1676) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module13.1))"
"(compile-module11.1"
" temp577_1676"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" submod575_1674"
" temp576_1675)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1036:5_1673"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" 4)"
" '(#:as-submodule?)"
"(list temp577_1676)"
" submod575_1674"
" temp576_1675))))"
"((temp574_1672) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-module10.1))"
"(eval-module8.1 temp574_1672 #t #f #f #f #f temp573_1671)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1035:4_1670"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" 3)"
" '(#:as-submodule?)"
"(list temp574_1672)"
" temp573_1671)))))"
"(let-values(((obs_1681)(expand-context-observer ctx_1612)))"
"(if obs_1681"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_1681 'exit-prim submod_1636))"
"(void)))"
"(void)))"
" submod_1636)))))))))))))))))))))))"
"(define-values"
"(unpack176.1)"
"(lambda(given-kws_1682 given-args_1683 s172_1684 self173_1685 ctx174_1686)"
"(let-values(((declared-submodule-names165_1687)(car given-args_1683))"
"((given-kws_1688)(cdr given-kws_1682))"
"((given-args_1689)(cdr given-args_1683)))"
"(let-values(((enclosing-is-cross-phase-persistent?169_1690)"
"(if(pair? given-kws_1688)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1688)) #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?163_1691)"
"(if enclosing-is-cross-phase-persistent?169_1690(car given-args_1689)(void)))"
"((given-kws_1692)"
"(if enclosing-is-cross-phase-persistent?169_1690(cdr given-kws_1688) given-kws_1688))"
"((given-args_1693)"
"(if enclosing-is-cross-phase-persistent?169_1690(cdr given-args_1689) given-args_1689)))"
"(let-values(((enclosing-requires+provides168_1694)"
"(if(pair? given-kws_1692)(eq? '#:enclosing-requires+provides(car given-kws_1692)) #f)))"
"(let-values(((enclosing-requires+provides162_1695)"
"(if enclosing-requires+provides168_1694(car given-args_1693)(void)))"
"((given-kws_1696)(if enclosing-requires+provides168_1694(cdr given-kws_1692) given-kws_1692))"
"((given-args_1697)"
"(if enclosing-requires+provides168_1694(cdr given-args_1693) given-args_1693)))"
"(let-values(((is-star?160_1698)(car given-args_1697))"
"((given-kws_1699)(cdr given-kws_1696))"
"((given-args_1700)(cdr given-args_1697)))"
"(let-values(((keep-enclosing-scope-at-phase167_1701)"
"(if(pair? given-kws_1699)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1699))"
" #f)))"
"(let-values(((keep-enclosing-scope-at-phase161_1702)"
"(if keep-enclosing-scope-at-phase167_1701(car given-args_1700)(void)))"
"((given-kws_1703)"
"(if keep-enclosing-scope-at-phase167_1701(cdr given-kws_1699) given-kws_1699))"
"((given-args_1704)"
"(if keep-enclosing-scope-at-phase167_1701(cdr given-args_1700) given-args_1700)))"
"(let-values(((mpis-to-reset164_1705)(car given-args_1704)))"
"(expand-submodule175.1"
" declared-submodule-names165_1687"
" enclosing-is-cross-phase-persistent?163_1691"
" enclosing-is-cross-phase-persistent?169_1690"
" enclosing-requires+provides162_1695"
" enclosing-requires+provides168_1694"
" is-star?160_1698"
" keep-enclosing-scope-at-phase161_1702"
" keep-enclosing-scope-at-phase167_1701"
" mpis-to-reset164_1705"
" s172_1684"
" self173_1685"
" ctx174_1686))))))))))))"
"(define-values"
"(expand-submodule177.1)"
"(lifted/8.1"
"(lambda(given-kws_1706 given-argc_1707)"
"(if(= given-argc_1707 5)"
"(subsets?"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" given-kws_1706"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset))"
" #f))"
"(case-lambda"
"((given-kws_1708 given-args_1709 s_1710 self_1711 ctx_1712)"
"(unpack176.1 given-kws_1708 given-args_1709 s_1710 self_1711 ctx_1712)))"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/9.1)"
"(make-required"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1713 bodys_1714 phase_1715 self_1716 ctx_1717)"
"(apply missing-kw self_1713 bodys_1714 phase_1715 self_1716 ctx_1717 null)))"
" #f"
" #f))"
"(define-values"
"(expand-non-module*-submodules186.1)"
"(lambda(declared-submodule-names179_1718 mpis-to-reset178_1719 bodys182_1720 phase183_1721 self184_1722 ctx185_1723)"
"(let-values(((bodys_1724) bodys182_1720))"
"(let-values(((phase_1725) phase183_1721))"
"(let-values(((self_1726) self184_1722))"
"(let-values(((ctx_1727) ctx185_1723))"
"(let-values(((mpis-to-reset_1728) mpis-to-reset178_1719))"
"(let-values(((declared-submodule-names_1729) declared-submodule-names179_1718))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_1730) bodys_1724))"
"(begin"
"(if(list? lst_1730)(void)(let-values()(in-list lst_1730)))"
"((letrec-values(((for-loop_1731)"
"(lambda(fold-var_1732 lst_1733)"
"(if(pair? lst_1733)"
"(let-values(((body_1734)(unsafe-car lst_1733)))"
"(if #t"
"(let-values(((fold-var_1735)"
"(let-values(((fold-var_1736) fold-var_1732))"
"(let-values(((fold-var_1737)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_1738)"
"(core-form-sym"
"(syntax-disarm$1"
" body_1734)"
" phase_1725)))"
"(if(equal? tmp_1738 'module)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1055:7_1739)"
" expand-submodule177.1)"
"((body581_1740)"
" body_1734)"
"((self582_1741)"
" self_1726)"
"((ctx583_1742)"
" ctx_1727)"
"((temp584_1743)"
" #f)"
"((mpis-to-reset585_1744)"
" mpis-to-reset_1728)"
"((declared-submodule-names586_1745)"
" declared-submodule-names_1729))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule177.1))"
"(expand-submodule175.1"
" declared-submodule-names586_1745"
" #f"
" #f"
" #f"
" #f"
" temp584_1743"
" #f"
" #f"
" mpis-to-reset585_1744"
" body581_1740"
" self582_1741"
" ctx583_1742)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1055:7_1739"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names586_1745"
" temp584_1743"
" mpis-to-reset585_1744)"
" body581_1740"
" self582_1741"
" ctx583_1742))))"
"(let-values() body_1734))))"
" fold-var_1736))))"
"(values fold-var_1737)))))"
"(if #t"
"(for-loop_1731 fold-var_1735(unsafe-cdr lst_1733))"
" fold-var_1735))"
" fold-var_1732))"
" fold-var_1732))))"
" for-loop_1731)"
" null"
" lst_1730)))))))))))))"
"(define-values"
"(unpack187.1)"
"(lambda(given-kws_1746 given-args_1747 bodys182_1748 phase183_1749 self184_1750 ctx185_1751)"
"(let-values(((declared-submodule-names179_1752)(car given-args_1747))"
"((given-kws_1753)(cdr given-kws_1746))"
"((given-args_1754)(cdr given-args_1747)))"
"(let-values(((mpis-to-reset178_1755)(car given-args_1754)))"
"(expand-non-module*-submodules186.1"
" declared-submodule-names179_1752"
" mpis-to-reset178_1755"
" bodys182_1748"
" phase183_1749"
" self184_1750"
" ctx185_1751)))))"
"(define-values"
"(expand-non-module*-submodules188.1)"
"(lifted/9.1"
"(lambda(given-kws_1756 given-argc_1757)"
"(if(= given-argc_1757 6)"
"(let-values(((l2_1758) given-kws_1756))"
"(if(pair? l2_1758)"
"(if(eq?(car l2_1758) '#:declared-submodule-names)"
"(let-values(((l2_1759)(cdr l2_1758)))"
"(if(pair? l2_1759)(if(eq?(car l2_1759) '#:mpis-to-reset)(null?(cdr l2_1759)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1760 given-args_1761 bodys_1762 phase_1763 self_1764 ctx_1765)"
"(unpack187.1 given-kws_1760 given-args_1761 bodys_1762 phase_1763 self_1764 ctx_1765)))"
" '(#:declared-submodule-names #:mpis-to-reset)"
" '(#:declared-submodule-names #:mpis-to-reset)))"
"(define-values"
"(lifted/10.1)"
"(make-required"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_1766 m-ns_1767 self_1768 requires+provides_1769)"
"(apply missing-kw self_1766 m-ns_1767 self_1768 requires+provides_1769 null)))"
" #f"
" #f))"
"(define-values"
"(make-parse-lifted-require194.1)"
"(lambda(declared-submodule-names189_1770 m-ns191_1771 self192_1772 requires+provides193_1773)"
"(let-values(((m-ns_1774) m-ns191_1771))"
"(let-values(((self_1775) self192_1772))"
"(let-values(((requires+provides_1776) requires+provides193_1773))"
"(let-values(((declared-submodule-names_1777) declared-submodule-names189_1770))"
"(let-values()"
"(lambda(s_1778 phase_1779)"
"(let-values(((ok?_1780 #%require587_1781 req588_1782)"
"(let-values(((s_1793)(syntax-disarm$1 s_1778)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1794) s_1793))"
"(let-values(((#%require587_1795 req588_1796)"
"(let-values(((s_1797)"
"(if(syntax?$1 s_1793)(syntax-e$1 s_1793) s_1793)))"
"(if(pair? s_1797)"
"(let-values(((#%require589_1798)"
"(let-values(((s_1800)(car s_1797))) s_1800))"
"((req590_1799)"
"(let-values(((s_1801)(cdr s_1797)))"
"(let-values(((s_1802)"
"(if(syntax?$1 s_1801)"
"(syntax-e$1 s_1801)"
" s_1801)))"
"(if(pair? s_1802)"
"(let-values(((req591_1803)"
"(let-values(((s_1804)"
"(car s_1802)))"
" s_1804))"
"(()"
"(let-values(((s_1805)"
"(cdr s_1802)))"
"(let-values(((s_1806)"
"(if(syntax?$1"
" s_1805)"
"(syntax-e$1"
" s_1805)"
" s_1805)))"
"(if(null? s_1806)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_1794))))))"
"(values req591_1803))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_1794))))))"
"(values #%require589_1798 req590_1799))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_1794)))))"
"(values #t #%require587_1795 req588_1796)))"
"(values #f #f #f)))))"
"(let-values(((...er/expand/module.rkt:1067:4_1807) parse-and-perform-requires!22.1)"
"((temp592_1808)(list req588_1782))"
"((s593_1809) s_1778)"
"((self594_1810) self_1775)"
"((m-ns595_1811) m-ns_1774)"
"((phase596_1812) phase_1779)"
"((phase597_1813) phase_1779)"
"((requires+provides598_1814) requires+provides_1776)"
"((declared-submodule-names599_1815) declared-submodule-names_1777))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names599_1815"
" #t"
" phase597_1813"
" #t"
" #f"
" #f"
" self594_1810"
" #t"
" #f"
" #f"
" temp592_1808"
" s593_1809"
" m-ns595_1811"
" phase596_1812"
" requires+provides598_1814)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1067:4_1807"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:run-phase #:self)"
" 7)"
" '(#:declared-submodule-names #:run-phase #:self)"
"(list declared-submodule-names599_1815 phase597_1813 self594_1810)"
" temp592_1808"
" s593_1809"
" m-ns595_1811"
" phase596_1812"
" requires+provides598_1814))))))))))))"
"(define-values"
"(unpack195.1)"
"(lambda(given-kws_1816 given-args_1817 m-ns191_1818 self192_1819 requires+provides193_1820)"
"(let-values(((declared-submodule-names189_1821)(car given-args_1817)))"
"(make-parse-lifted-require194.1"
" declared-submodule-names189_1821"
" m-ns191_1818"
" self192_1819"
" requires+provides193_1820))))"
"(define-values"
"(make-parse-lifted-require196.1)"
"(lifted/10.1"
"(lambda(given-kws_1822 given-argc_1823)"
"(if(= given-argc_1823 5)"
"(let-values(((l2_1824) given-kws_1822))"
"(if(pair? l2_1824)(if(eq?(car l2_1824) '#:declared-submodule-names)(null?(cdr l2_1824)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1825 given-args_1826 m-ns_1827 self_1828 requires+provides_1829)"
"(unpack195.1 given-kws_1825 given-args_1826 m-ns_1827 self_1828 requires+provides_1829)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(alt-reverse"
"(let-values(((lst_6) ids_1))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((id_10)(unsafe-car lst_9)))"
"(if #t"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(remove-use-site-scopes"
" id_10"
" ctx_3)"
" top-level-bind-scope_4))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(if #t(for-loop_7 fold-var_11(unsafe-cdr lst_9)) fold-var_11))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(begin"
"(let-values(((tl-ids1_14) tl-ids_5)((temp2_15)(expand-context-phase ctx_3))((s3_16) s_2))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_14 temp2_15 s3_16 #f #f)"
"(check-no-duplicate-ids10.1 tl-ids1_14 temp2_15 s3_16)))"
"(select-defined-syms-and-bind!/ctx tl-ids_5 ctx_3)"
" tl-ids_5)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_2)))"
"(if obs_22"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_22 'prim-define-values))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values(((s_23) s_1))"
"(if(if #t #t #f)"
"(let-values(((orig-s_24) s_23))"
"(let-values(((define-values1_25 id2_26 rhs3_27)"
"(let-values(((s_28)(if(syntax?$1 s_23)(syntax-e$1 s_23) s_23)))"
"(if(pair? s_28)"
"(let-values(((define-values4_29)"
"(let-values(((s_32)(car s_28))) s_32))"
"((id5_30 rhs6_31)"
"(let-values(((s_33)(cdr s_28)))"
"(let-values(((s_34)"
"(if(syntax?$1 s_33)"
"(syntax-e$1 s_33)"
" s_33)))"
"(if(pair? s_34)"
"(let-values(((id7_35)"
"(let-values(((s_37)(car s_34)))"
"(let-values(((s_38)"
"(if(syntax?$1"
" s_37)"
"(syntax-e$1 s_37)"
" s_37)))"
"(let-values(((flat-s_39)"
"(to-syntax-list.1"
" s_38)))"
"(if(not flat-s_39)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_24))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_24))"
"(let-values()"
"(let-values(((id_40)"
"(let-values(((lst_41)"
" flat-s_39))"
"(begin"
"(if(list?"
" lst_41)"
"(void)"
"(let-values()"
"(in-list"
" lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(id_43"
" lst_44)"
"(if(pair?"
" lst_44)"
"(let-values(((s_45)"
"(unsafe-car"
" lst_44)))"
"(if #t"
"(let-values(((id_46)"
"(let-values(((id_47)"
" id_43))"
"(let-values(((id_48)"
"(let-values()"
"(let-values(((id13_49)"
"(let-values()"
"(if(let-values(((or-part_50)"
"(if(syntax?$1"
" s_45)"
"(symbol?"
"(syntax-e$1"
" s_45))"
" #f)))"
"(if or-part_50"
" or-part_50"
"(symbol?"
" s_45)))"
" s_45"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"not an identifier\""
" orig-s_24"
" s_45)))))"
"(cons"
" id13_49"
" id_47)))))"
"(values"
" id_48)))))"
"(if #t"
"(for-loop_42"
" id_46"
"(unsafe-cdr"
" lst_44))"
" id_46))"
" id_43))"
" id_43))))"
" for-loop_42)"
" null"
" lst_41)))))"
"(alt-reverse"
" id_40)))))))))"
"((rhs8_36)"
"(let-values(((s_51)(cdr s_34)))"
"(let-values(((s_52)"
"(if(syntax?$1"
" s_51)"
"(syntax-e$1 s_51)"
" s_51)))"
"(if(pair? s_52)"
"(let-values(((rhs9_53)"
"(let-values(((s_54)"
"(car"
" s_52)))"
" s_54))"
"(()"
"(let-values(((s_55)"
"(cdr"
" s_52)))"
"(let-values(((s_56)"
"(if(syntax?$1"
" s_55)"
"(syntax-e$1"
" s_55)"
" s_55)))"
"(if(null?"
" s_56)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_24))))))"
"(values rhs9_53))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_24))))))"
"(values id7_35 rhs8_36))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_24))))))"
"(values define-values4_29 id5_30 rhs6_31))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_24)))))"
"(values #t define-values1_25 id2_26 rhs3_27)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_20)(as-expand-time-top-level-bindings id2_6 s_1 ctx_2)))"
"(let-values(((exp-rhs_21)"
"(let-values(((temp14_57) rhs3_7)((temp15_58)(as-named-context ctx_2 ids_20)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp14_57 temp15_58)"
"(expand7.1 temp14_57 temp15_58)))))"
"(let-values(((s10_59) s_1)"
"((disarmed-s11_60) disarmed-s_3)"
"((temp12_61)(list define-values1_5 ids_20 exp-rhs_21)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s10_59 disarmed-s11_60 temp12_61)"
"(rebuild101.1 s10_59 disarmed-s11_60 temp12_61))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_62 ctx_63)"
"(let-values((()"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_63)))"
"(if obs_83"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_83 'prim-define-syntaxes))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_84)(expand-context-observer ctx_63)))"
"(if obs_84"
"(let-values()(if #t(let-values()(call-expand-observe obs_84 'prepare-env))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_63) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_62)))"
"(values))))"
"(let-values(((disarmed-s_64)(syntax-disarm$1 s_62)))"
"(let-values(((ok?_65 define-syntaxes16_66 id17_67 rhs18_68)"
"(let-values(((s_85) disarmed-s_64))"
"(if(if #t #t #f)"
"(let-values(((orig-s_86) s_85))"
"(let-values(((define-syntaxes16_87 id17_88 rhs18_89)"
"(let-values(((s_90)(if(syntax?$1 s_85)(syntax-e$1 s_85) s_85)))"
"(if(pair? s_90)"
"(let-values(((define-syntaxes19_91)"
"(let-values(((s_94)(car s_90))) s_94))"
"((id20_92 rhs21_93)"
"(let-values(((s_95)(cdr s_90)))"
"(let-values(((s_96)"
"(if(syntax?$1 s_95)"
"(syntax-e$1 s_95)"
" s_95)))"
"(if(pair? s_96)"
"(let-values(((id22_97)"
"(let-values(((s_99)(car s_96)))"
"(let-values(((s_100)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1"
" s_99)"
" s_99)))"
"(let-values(((flat-s_101)"
"(to-syntax-list.1"
" s_100)))"
"(if(not flat-s_101)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_86))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_86))"
"(let-values()"
"(let-values(((id_102)"
"(let-values(((lst_103)"
" flat-s_101))"
"(begin"
"(if(list?"
" lst_103)"
"(void)"
"(let-values()"
"(in-list"
" lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(id_105"
" lst_106)"
"(if(pair?"
" lst_106)"
"(let-values(((s_107)"
"(unsafe-car"
" lst_106)))"
"(if #t"
"(let-values(((id_108)"
"(let-values(((id_109)"
" id_105))"
"(let-values(((id_110)"
"(let-values()"
"(let-values(((id28_111)"
"(let-values()"
"(if(let-values(((or-part_112)"
"(if(syntax?$1"
" s_107)"
"(symbol?"
"(syntax-e$1"
" s_107))"
" #f)))"
"(if or-part_112"
" or-part_112"
"(symbol?"
" s_107)))"
" s_107"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"not an identifier\""
" orig-s_86"
" s_107)))))"
"(cons"
" id28_111"
" id_109)))))"
"(values"
" id_110)))))"
"(if #t"
"(for-loop_104"
" id_108"
"(unsafe-cdr"
" lst_106))"
" id_108))"
" id_105))"
" id_105))))"
" for-loop_104)"
" null"
" lst_103)))))"
"(alt-reverse"
" id_102)))))))))"
"((rhs23_98)"
"(let-values(((s_113)"
"(cdr s_96)))"
"(let-values(((s_114)"
"(if(syntax?$1"
" s_113)"
"(syntax-e$1"
" s_113)"
" s_113)))"
"(if(pair? s_114)"
"(let-values(((rhs24_115)"
"(let-values(((s_116)"
"(car"
" s_114)))"
" s_116))"
"(()"
"(let-values(((s_117)"
"(cdr"
" s_114)))"
"(let-values(((s_118)"
"(if(syntax?$1"
" s_117)"
"(syntax-e$1"
" s_117)"
" s_117)))"
"(if(null?"
" s_118)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                  \"bad syntax\""
" orig-s_86))))))"
"(values rhs24_115))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_86))))))"
"(values id22_97 rhs23_98))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_86))))))"
"(values define-syntaxes19_91 id20_92 rhs21_93))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_86)))))"
"(values #t define-syntaxes16_87 id17_88 rhs18_89)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_81)(as-expand-time-top-level-bindings id17_67 s_62 ctx_63)))"
"(let-values(((exp-rhs_82)"
"(let-values(((temp29_119) rhs18_68)((temp30_120)(as-named-context ctx_63 ids_81)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1 #f #f #f #f #f #f #f #f temp29_119 temp30_120)"
"(expand-transformer93.1 temp29_119 temp30_120)))))"
"(let-values(((s25_121) s_62)"
"((disarmed-s26_122) disarmed-s_64)"
"((temp27_123)(list define-syntaxes16_66 ids_81 exp-rhs_82)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s25_121 disarmed-s26_122 temp27_123)"
"(rebuild101.1 s25_121 disarmed-s26_122 temp27_123)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_124 ctx_125) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_124))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_126 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_143)(expand-context-observer ctx_127)))"
"(if obs_143"
"(let-values()(if #t(let-values()(call-expand-observe obs_143 'prim-require))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_127) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_126)))"
"(values))))"
"(let-values(((disarmed-s_128)(syntax-disarm$1 s_126)))"
"(let-values(((ok?_129 #%require31_130 req32_131)"
"(let-values(((s_144) disarmed-s_128))"
"(if(if #t #t #f)"
"(let-values(((orig-s_145) s_144))"
"(let-values(((#%require31_146 req32_147)"
"(let-values(((s_148)(if(syntax?$1 s_144)(syntax-e$1 s_144) s_144)))"
"(if(pair? s_148)"
"(let-values(((#%require33_149)"
"(let-values(((s_151)(car s_148))) s_151))"
"((req34_150)"
"(let-values(((s_152)(cdr s_148)))"
"(let-values(((s_153)"
"(if(syntax?$1 s_152)"
"(syntax-e$1 s_152)"
" s_152)))"
"(let-values(((flat-s_154)"
"(to-syntax-list.1 s_153)))"
"(if(not flat-s_154)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_145))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_145))"
"(let-values() flat-s_154))))))))"
"(values #%require33_149 req34_150))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_145)))))"
"(values #t #%require31_146 req32_147)))"
"(values #f #f #f)))))"
"(let-values(((sc_142)(new-scope 'macro)))"
"(begin"
"(let-values(((...expand/top-level.rkt:62:3_155) parse-and-perform-requires!22.1)"
"((temp35_156)"
"(alt-reverse"
"(let-values(((lst_162) req32_131))"
"(begin"
"(if(list? lst_162)(void)(let-values()(in-list lst_162)))"
"((letrec-values(((for-loop_163)"
"(lambda(fold-var_164 lst_165)"
"(if(pair? lst_165)"
"(let-values(((req_166)(unsafe-car lst_165)))"
"(if #t"
"(let-values(((fold-var_167)"
"(let-values(((fold-var_168)"
" fold-var_164))"
"(let-values(((fold-var_169)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_166"
" sc_142))"
" fold-var_168))))"
"(values fold-var_169)))))"
"(if #t"
"(for-loop_163 fold-var_167(unsafe-cdr lst_165))"
" fold-var_167))"
" fold-var_164))"
" fold-var_164))))"
" for-loop_163)"
" null"
" lst_162)))))"
"((s36_157) s_126)"
"((temp37_158) #f)"
"((temp38_159)(expand-context-namespace ctx_127))"
"((temp39_160)(expand-context-phase ctx_127))"
"((temp40_161)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp37_158"
" #t"
" temp35_156"
" s36_157"
" temp38_159"
" temp39_160"
" temp40_161)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...expand/top-level.rkt:62:3_155"
" keyword-procedure-extract"
" '(#:visit?)"
" 7)"
" '(#:visit?)"
"(list temp37_158)"
" temp35_156"
" s36_157"
" temp38_159"
" temp39_160"
" temp40_161)))"
" s_126)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_170 ctx_171)"
"(begin"
"(let-values(((obs_172)(expand-context-observer ctx_171)))"
"(if obs_172"
"(let-values()(if #t(let-values()(call-expand-observe obs_172 'prim-provide))(void)))"
"(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_170)))))"
" print-values)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:98:0_1) declare-hash-based-module!41.1)"
"((temp1_2) '#%main)"
"((main-primitives2_3) main-primitives)"
"((ns3_4) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns3_4 #f #f #f #f #f #f #f #f temp1_2 main-primitives2_3)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:98:0_1"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns3_4)"
" temp1_2"
" main-primitives2_3))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:99:0_5) declare-hash-based-module!41.1)"
"((temp4_6) '#%utils)"
"((utils-primitives5_7) utils-primitives)"
"((ns6_8) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns6_8 #f #f #f #f #f #f #f #f temp4_6 utils-primitives5_7)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:99:0_5"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns6_8)"
" temp4_6"
" utils-primitives5_7))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:100:0_9) declare-hash-based-module!41.1)"
"((temp7_10) '#%place-struct)"
"((place-struct-primitives8_11) place-struct-primitives)"
"((ns9_12) ns)"
"((temp10_13) '(dynamic-place)))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns9_12 #f #f temp10_13 #t #f #f #f #f temp7_10 place-struct-primitives8_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:100:0_9"
" keyword-procedure-extract"
" '(#:namespace #:protected)"
" 4)"
" '(#:namespace #:protected)"
"(list ns9_12 temp10_13)"
" temp7_10"
" place-struct-primitives8_11))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:105:0_14) declare-hash-based-module!41.1)"
"((temp11_15) '#%boot)"
"((boot-primitives12_16) boot-primitives)"
"((ns13_17) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns13_17 #f #f #f #f #f #f #f #f temp11_15 boot-primitives12_16)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:105:0_14"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns13_17)"
" temp11_15"
" boot-primitives12_16))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_18)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((...tt/expander/main.rkt:112:2_19) declare-hash-based-module!41.1)"
"((temp25_20) '#%linklet)"
"((linklet-primitives26_21) linklet-primitives_18)"
"((ns27_22) ns)"
"((temp28_23) #t)"
"((temp29_24) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns27_22"
" temp28_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp29_24"
" #t"
" temp25_20"
" linklet-primitives26_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:112:2_19"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:register-builtin?)"
" 4)"
" '(#:namespace #:primitive? #:register-builtin?)"
"(list ns27_22 temp28_23 temp29_24)"
" temp25_20"
" linklet-primitives26_21)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:115:0_25) declare-hash-based-module!41.1)"
"((temp14_26) '#%expobs)"
"((expobs-primitives15_27) expobs-primitives)"
"((ns16_28) ns)"
"((temp17_29) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns16_28 #f #f #f #f temp17_29 #t #f #f temp14_26 expobs-primitives15_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:115:0_25"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 4)"
" '(#:namespace #:protected?)"
"(list ns16_28 temp17_29)"
" temp14_26"
" expobs-primitives15_27))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:117:0_30) declare-kernel-module!8.1)"
"((ns18_31) ns)"
"((eval19_32) 1/eval)"
"((temp20_33)"
"(let-values(((ht_34) main-primitives))"
"(begin"
"(if((lambda(ht_35)(hash? ht_35)) ht_34)(void)(let-values()(default-in-hash-keys ht_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_37 i_38)"
"(if i_38"
"(let-values(((name_39)(hash-iterate-key ht_34 i_38)))"
"(if #t"
"(let-values(((table_40)"
"(let-values(((table_41) table_37))"
"(let-values(((table_42)"
"(let-values()"
"(let-values(((key_43 val_44)"
"(let-values()"
"(values"
"(let-values() name_39)"
" #t))))"
"(hash-set table_41 key_43 val_44)))))"
"(values table_42)))))"
"(if #t"
"(for-loop_36 table_40(hash-iterate-next ht_34 i_38))"
" table_40))"
" table_37))"
" table_37))))"
" for-loop_36)"
" '#hash()"
"(hash-iterate-first ht_34))))))"
"(if(variable-reference-constant?(#%variable-reference declare-kernel-module!8.1))"
"(declare-kernel-module!6.1 eval19_32 temp20_33 ns18_31)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:117:0_30"
" keyword-procedure-extract"
" '(#:eval #:main-ids)"
" 3)"
" '(#:eval #:main-ids)"
"(list eval19_32 temp20_33)"
" ns18_31))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_45) runtime-instances))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((name_49)(unsafe-car lst_48)))"
"(if #t"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(if(eq? name_49 '#%kernel)"
" fold-var_51"
"(let-values(((fold-var_52) fold-var_51))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...tt/expander/main.rkt:123:2_54)"
" copy-runtime-module!26.1)"
"((name30_55) name_49)"
"((ns31_56) ns)"
"((temp32_57)"
"(let-values(((or-part_58)"
"(eq?"
" name_49"
" '#%foreign)))"
"(if or-part_58"
" or-part_58"
"(eq? name_49 '#%futures)))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" copy-runtime-module!26.1))"
"(copy-runtime-module!24.1"
" #f"
" #f"
" #f"
" #f"
" ns31_56"
" #f"
" #f"
" temp32_57"
" #t"
" #f"
" #f"
" #f"
" #f"
" name30_55)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:123:2_54"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 3)"
" '(#:namespace #:protected?)"
"(list ns31_56 temp32_57)"
" name30_55))))"
"(void)))))"
"(values fold-var_53)))))))"
"(if #t(for-loop_46 fold-var_50(unsafe-cdr lst_48)) fold-var_50))"
" fold-var_47))"
" fold-var_47))))"
" for-loop_46)"
"(void)"
" lst_45))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:127:0_59) declare-reexporting-module!50.1)"
"((temp21_60) '#%builtin)"
"((temp22_61)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns23_62) ns)"
"((temp24_63) #f))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns23_62 temp24_63 #t temp21_60 temp22_61)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:127:0_59"
" keyword-procedure-extract"
" '(#:namespace #:reexport?)"
" 4)"
" '(#:namespace #:reexport?)"
"(list ns23_62 temp24_63)"
" temp21_60"
" temp22_61))))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_64)(1/datum->syntax core-stx s_64))))"
);
