  EVAL_ONE_STR(
"(linklet"
"()"
"((1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(embedded-load embedded-load)"
"(1/syntax->datum syntax->datum)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(1/resolved-module-path? resolved-module-path?)"
"(boot boot)"
"(1/current-namespace current-namespace)"
"(expand$1 expand)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-attach-module namespace-attach-module)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(identifier? identifier?)"
"(1/syntax-e syntax-e)"
"(1/syntax-debug-info syntax-debug-info)"
"(namespace->instance namespace->instance)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/eval eval)"
"(1/namespace-require namespace-require)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(syntax?$1 syntax?)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-path-index-join module-path-index-join)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(1/module->language-info module->language-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/compile compile)"
"(1/datum->syntax datum->syntax))"
"(void)"
"(define-values"
"(qq-append)"
"  (lambda (a_106 b_107) (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing \"list?\" a_106))))"
"(void)"
"(void)"
"(define-values(call/ec) call-with-escape-continuation)"
"(void)"
"(void)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 \"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() #f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() #f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() #f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() #f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28))))))"
"(void)"
"(void)"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_455 thunk_456)(begin0(with-continuation-mark exception-handler-key exnh_455(thunk_456))(void))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_457)(gensym)))"
"(let-values(((up_458)"
"(lambda(who_459 mut?_460 set_461 ht_462 key_463 xform_464 default_465)"
"(begin"
"(if(if(hash? ht_462)(if mut?_460(not(immutable? ht_462))(immutable? ht_462)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_459"
"                           (if mut?_460 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_462)))"
"(if(if(procedure? xform_464)(procedure-arity-includes? xform_464 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_459 \"(any/c . -> . any/c)\" xform_464)))"
"(let-values(((v_466)(hash-ref ht_462 key_463 default_465)))"
"(if(eq? v_466 not-there_457)"
"                          (raise-mismatch-error who_459 \"no value found for key: \" key_463)"
"(set_461 ht_462 key_463(xform_464 v_466))))))))"
"(let-values(((hash-update_467)"
"(case-lambda"
"((ht_471 key_472 xform_473 default_474)"
"(up_458 'hash-update #f hash-set ht_471 key_472 xform_473 default_474))"
"((ht_475 key_476 xform_477)(hash-update ht_475 key_476 xform_477 not-there_457))))"
"((hash-update!_468)"
"(case-lambda"
"((ht_478 key_479 xform_480 default_481)"
"(up_458 'hash-update! #t hash-set! ht_478 key_479 xform_480 default_481))"
"((ht_482 key_483 xform_484)(hash-update! ht_482 key_483 xform_484 not-there_457))))"
"((hash-has-key?_469)"
"(lambda(ht_485 key_486)"
"(begin"
"(if(hash? ht_485)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_485 key_486)))"
"(not(eq? not-there_457(hash-ref ht_485 key_486 not-there_457))))))"
"((hash-ref!_470)"
"(lambda(ht_487 key_488 new_489)"
"(begin"
"(if(if(hash? ht_487)(not(immutable? ht_487)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
"                             \"(and/c hash? (not/c immutable?))\""
" 0"
" ht_487"
" key_488"
" new_489)))"
"(let-values(((v_490)(hash-ref ht_487 key_488 not-there_457)))"
"(if(eq? not-there_457 v_490)"
"(let-values(((n_491)(if(procedure? new_489)(new_489) new_489)))"
"(begin(hash-set! ht_487 key_488 n_491) n_491))"
" v_490))))))"
"(values hash-update_467 hash-update!_468 hash-has-key?_469 hash-ref!_470)))))"
"(void)"
"(void)"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7) s_7 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c path-for-some-system? path-string?)\" 0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c string? bytes?)\" 1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
"            (let-values () (raise-mismatch-error who_10 \"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
"                                             (finish_24 (bytes-length bs_23) #\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" #f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_34 i_35) #\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_38 root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                           \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_38"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_38"
"                                 \"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_42 #\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) 1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4 5) #\"\\\\\" (subbytes bstr_42 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_42 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 0 1)(subbytes bstr_42 2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(void)"
"(void)"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_3) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 #\"\") s_5)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(void)"
"(void)"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) #f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" #f)"
"          (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"                        (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) #f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 #f))"
"((program_29)(find-executable-path program_29 #f #f))))"
"(void)"
"(void)"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" read-square-bracket-as-paren"
" #t"
" read-curly-brace-as-paren"
" #t"
" read-square-bracket-with-tag"
" #f"
" read-curly-brace-with-tag"
" #f"
" read-accept-box"
" #t"
" read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" read-cdot"
" #f"
" read-accept-dot"
" #t"
" read-accept-infix-dot"
" #t"
" read-accept-quasiquote"
" #t"
" read-accept-reader"
" #f"
" read-accept-lang"
" #t"
" current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(void)"
"(void)"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_1)"
"(if(complete-path? collects-path_1)"
"(let-values()(simplify-path collects-path_1))"
"(if(absolute-path? collects-path_1)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_1 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_1 #t)))"
"(if p_6(simplify-path p_6) #f)))))))"
"(void)"
"(void)"
"(define-values"
"(-check-relpath)"
"(lambda(who_1 s_2)"
"(begin"
"      (if (path-string? s_2) (void) (let-values () (raise-argument-error who_1 \"path-string?\" s_2)))"
"(if(relative-path? s_2)"
"(void)"
"        (let-values () (raise-arguments-error who_1 \"invalid relative path\" \"path\" s_2))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_4 collection-path_5)"
"(begin(-check-relpath who_3 collection_4)(for-each(lambda(p_6)(-check-relpath who_3 p_6)) collection-path_5))))"
"(define-values"
"(-check-fail)"
"(lambda(who_7 fail_8)"
"(if(if(procedure? fail_8)(procedure-arity-includes? fail_8 1) #f)"
"(void)"
"      (let-values () (raise-argument-error who_7 \"(any/c . -> . any)\" fail_8)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_9 collection_10 collection-path_11)"
"(begin"
"(-check-collection 'collection-path collection_10 collection-path_11)"
"(-check-fail 'collection-path fail_9)"
"(find-col-file fail_9 collection_10 collection-path_11 #f #f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_12 check-compiled?_13 file-name_14 collection_15 collection-path_16)"
"(begin"
"(-check-relpath 'collection-file-path file-name_14)"
"(-check-collection 'collection-file-path collection_15 collection-path_16)"
"(-check-fail 'collection-file-path fail_12)"
"(find-col-file fail_12 collection_15 collection-path_16 file-name_14 check-compiled?_13))))"
"(define-values"
"(get-config-table)"
"(lambda(d_17)"
"    (let-values (((p_18) (if d_17 (build-path d_17 \"config.rktd\") #f)))"
"(let-values(((or-part_19)"
"(if p_18"
"(if(file-exists? p_18)"
"(with-input-from-file"
" p_18"
"(lambda()"
"(let-values(((v_20)(call-with-default-reading-parameterization read)))"
"(if(hash? v_20) v_20 #f))))"
" #f)"
" #f)))"
"(if or-part_19 or-part_19 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_21)(hash-ref config-table_21 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_22)"
"(if(string? p_22)"
"(let-values()(collects-relative-path->complete-path(string->path p_22)))"
"(if(bytes? p_22)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_22)))"
"(if(path? p_22)(let-values()(collects-relative-path->complete-path p_22))(let-values() p_22))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_23)"
"(if(complete-path? p_23)"
"(let-values() p_23)"
"(let-values()"
"(path->complete-path"
" p_23"
"(let-values(((or-part_24)(find-main-collects)))(if or-part_24 or-part_24(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_25 key_26 orig-l_27)"
"(let-values(((l_28)(hash-ref ht_25 key_26 #f)))"
"(if l_28"
"((letrec-values(((loop_29)"
"(lambda(l_30)"
"(if(null? l_30)"
"(let-values() null)"
"(if(not(car l_30))"
"(let-values()(append orig-l_27(loop_29(cdr l_30))))"
"(let-values()(cons(coerce-to-path(car l_30))(loop_29(cdr l_30)))))))))"
" loop_29)"
" l_28)"
" orig-l_27))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_31)(get-config-table(find-main-config))))"
"(let-values(((lf_32)"
"(coerce-to-path"
"(let-values(((or-part_33)(hash-ref ht_31 'links-file #f)))"
"(if or-part_33"
" or-part_33"
"(build-path"
"(let-values(((or-part_34)(hash-ref ht_31 'share-dir #f)))"
"                            (if or-part_34 or-part_34 (build-path 'up \"share\")))"
"                          \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) #f)"
"           (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_31) \"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_31 'links-search-files(list lf_32)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout 0(cdr old-stamp_36))) #f) #f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() #f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() #f))"
"(loop_39 base_41))"
" #f)))))"
" loop_39)"
" path_35)"
" #f)))"
"(if(not(file-exists? path_35))"
"(cons #f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_35(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes 8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes 8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 #f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= 2(length p_62))))"
"(if or-part_63 or-part_63(= 3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_60)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 #f #f)"
"(void)"
"(let-values()(hash-set! ht_67 #f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
"        (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) #f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 #f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) #t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
"                                                                                \"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
"                                                (string-append (to-string_103 collection_93) \"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_119) (format \"\\n ~a ~a\" \" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) 5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_122) (format \"\\n   ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
"                                                \"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) #t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring"
" file-name_127"
"(- len_128 4)))"
"(string-append"
"(substring file-name_127 0(- len_128 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" #f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values(((or-part_129) found-col_112))"
"(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
"          (let-values (((try-path_134) (path-add-extension path_131 #\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" #f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_140)(find-library-collection-paths extra-collects-dirs_140 null))"
"((extra-collects-dirs_141 post-collects-dirs_142)"
"(let-values(((user-too?_143)(use-user-specific-search-paths))"
"((cons-if_144)(lambda(f_146 r_147)(if f_146(cons f_146 r_147) r_147)))"
"((config-table_145)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_143"
"         (let-values (((c_148) (environment-variables-ref (current-environment-variables) #\"PLTCOLLECTS\")))"
"           (if c_148 (bytes->string/locale c_148 '#\\?) \"\"))"
"         \"\")"
"(add-config-search"
" config-table_145"
" 'collects-search-dirs"
"(cons-if_144"
"(if user-too?_143"
"           (build-path (find-system-path 'addon-dir) (get-installation-name config-table_145) \"collects\")"
" #f)"
"((letrec-values(((loop_149)"
"(lambda(l_150)"
"(if(null? l_150)"
" null"
"(let-values(((collects-path_151)(car l_150)))"
"(let-values(((v_152)(exe-relative-path->complete-path collects-path_151)))"
"(if v_152"
"(cons"
"(simplify-path(path->complete-path v_152(current-directory)))"
"(loop_149(cdr l_150)))"
"(loop_149(cdr l_150)))))))))"
" loop_149)"
"(append extra-collects-dirs_141(list(find-system-path 'collects-dir)) post-collects-dirs_142)))))))))"
"(void)"
"(void)"
"(define-values(load/use-compiled)(lambda(f_1)((current-load/use-compiled) f_1 #f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 #f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))(if or-part_9 or-part_9 0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max 0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(void)"
"(void)"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1555)"
"(if(keyword-impersonator? v_1555)(let-values()((keyword-impersonator-ref v_1555) v_1555))(let-values() #f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref 0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref 1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1556)"
"(let-values(((req_1557 allowed_1558)(procedure-keywords proc_1556))"
"((a_1559)(procedure-arity proc_1556))"
"((keywords-desc_1560)"
"(lambda(opt_1562 req_1563)"
"(format"
"                     \"~a with keyword~a~a\""
"                     (if (null? (cdr req_1563)) (format \"an ~aargument\" opt_1562) (format \"~aarguments\" opt_1562))"
"                     (if (null? (cdr req_1563)) \"\" \"s\")"
"(let-values(((tmp_1564)(length req_1563)))"
"(if(equal? tmp_1564 1)"
"                         (let-values () (format \" ~a\" (car req_1563)))"
"(if(equal? tmp_1564 2)"
"                           (let-values () (format \" ~a and ~a\" (car req_1563) (cadr req_1563)))"
"(let-values()"
"((letrec-values(((loop_1565)"
"(lambda(req_1566)"
"(if(null?(cdr req_1566))"
"                                                   (format \" and ~a\" (car req_1566))"
"                                                   (format \" ~a,~a\" (car req_1566) (loop_1565 (cdr req_1566)))))))"
" loop_1565)"
" req_1563))))))))"
"((method-adjust_1561)"
"(lambda(a_1567)"
"(if(let-values(((or-part_1568)(okm? proc_1556)))"
"(if or-part_1568 or-part_1568(keyword-method? proc_1556)))"
"(if(zero? a_1567) 0(sub1 a_1567))"
" a_1567))))"
"(string-append"
"(if(number? a_1559)"
"         (let-values () (let-values (((a_1569) (method-adjust_1561 a_1559))) (format \"~a\" a_1569)))"
"(if(arity-at-least? a_1559)"
"(let-values()"
"             (let-values (((a_1570) (method-adjust_1561 (arity-at-least-value a_1559)))) (format \"at least ~a\" a_1570)))"
"           (let-values () \"a different number\")))"
"       (if (null? req_1557) \"\" (format \" plus ~a\" (keywords-desc_1560 \"\" req_1557)))"
"(if allowed_1558"
"(let-values(((others_1571)"
"((letrec-values(((loop_1572)"
"(lambda(req_1573 allowed_1574)"
"(if(null? req_1573)"
"(let-values() allowed_1574)"
"(if(eq?(car req_1573)(car allowed_1574))"
"(let-values()(loop_1572(cdr req_1573)(cdr allowed_1574)))"
"(let-values()"
"(cons(car allowed_1574)(loop_1572 req_1573(cdr allowed_1574)))))))))"
" loop_1572)"
" req_1557"
" allowed_1558)))"
"           (if (null? others_1571) \"\" (format \" plus ~a\" (keywords-desc_1560 \"optional \" others_1571))))"
"         \" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" 0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1575 info-l_1576)"
"(if(exact-integer? v_1575)(make-struct-field-accessor(list-ref info-l_1576 3) v_1575) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure-impersonator make-kpp keyword-procedure-impersonator? kpp-ref kpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1577)(kpp-ref v_1577 0))))))"
"(define-values"
"(struct:keyword-method-impersonator make-kmp keyword-method-impersonator? kmp-ref kmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-method"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1578)(kmp-ref v_1578 0))))))"
"(define-values"
"(struct:okpp make-optional-keyword-procedure-impersonator okpp? okpp-ref okpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1579)(okpp-ref v_1579 0))))))"
"(define-values"
"(struct:okmp make-optional-keyword-method-impersonator okmp? okmp-ref okmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1580)(okmp-ref v_1580 0))))))"
"(define-values"
"(struct:keyword-procedure/arity-error make-kp/ae kp/ae? kp/ae-ref kp/ae-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 0"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string)(cons prop:incomplete-arity #t))))"
"(define-values"
"(make-keyword-procedure)"
"(case-lambda"
"((proc_1591)(make-keyword-procedure proc_1591(lambda args_1592(apply proc_1591 null null args_1592))))"
"((proc_1593 plain-proc_1594)"
"(make-optional-keyword-procedure"
"(make-keyword-checker null #f(procedure-arity proc_1593))"
" proc_1593"
" null"
" #f"
" plain-proc_1594))))"
"(define-values"
"(keyword-apply)"
"(lambda(proc_1595 kws_1596 kw-vals_1597 normal-args_1598 . normal-argss_1599)"
"(let-values(((type-error_1600)"
"(lambda(what_1601 which_1602)"
"(apply"
" raise-argument-error"
" 'keyword-apply"
" what_1601"
" which_1602"
" proc_1595"
" kws_1596"
" kw-vals_1597"
" normal-args_1598"
" normal-argss_1599))))"
"(begin"
"        (if (procedure? proc_1595) (void) (let-values () (type-error_1600 \"procedure?\" 0)))"
"((letrec-values(((loop_1603)"
"(lambda(ks_1604)"
"(if(null? ks_1604)"
"(let-values()(void))"
"(if(let-values(((or-part_1605)(not(pair? ks_1604))))"
"(if or-part_1605 or-part_1605(not(keyword?(car ks_1604)))))"
"                                (let-values () (type-error_1600 \"(listof keyword?)\" 1))"
"(if(null?(cdr ks_1604))"
"(let-values()(void))"
"(if(let-values(((or-part_1606)(not(pair?(cdr ks_1604)))))"
"(if or-part_1606 or-part_1606(not(keyword?(cadr ks_1604)))))"
"(let-values()(loop_1603(cdr ks_1604)))"
"(if(keyword<?(car ks_1604)(cadr ks_1604))"
"(let-values()(loop_1603(cdr ks_1604)))"
"(let-values()"
"                                        (type-error_1600 \"(and/c (listof? keyword?) sorted? distinct?)\" 1))))))))))"
" loop_1603)"
" kws_1596)"
"        (if (list? kw-vals_1597) (void) (let-values () (type-error_1600 \"list?\" 2)))"
"(if(=(length kws_1596)(length kw-vals_1597))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'keyword-apply"
"             \"keyword list length does not match value list length\""
"             \"keyword list length\""
"(length kws_1596)"
"             \"value list length\""
"(length kw-vals_1597)"
"             \"keyword list\""
" kws_1596"
"             \"value list\""
" kw-vals_1597)))"
"(let-values(((normal-args_1607)"
"((letrec-values(((loop_1608)"
"(lambda(normal-argss_1609 pos_1610)"
"(if(null?(cdr normal-argss_1609))"
"(let-values(((l_1611)(car normal-argss_1609)))"
"                                              (if (list? l_1611) l_1611 (type-error_1600 \"list?\" pos_1610)))"
"(cons"
"(car normal-argss_1609)"
"(loop_1608(cdr normal-argss_1609)(add1 pos_1610)))))))"
" loop_1608)"
"(cons normal-args_1598 normal-argss_1599)"
" 3)))"
"(if(null? kws_1596)"
"(apply proc_1595 normal-args_1607)"
"(apply"
"(keyword-procedure-extract/method kws_1596(+ 2(length normal-args_1607)) proc_1595 0)"
" kws_1596"
" kw-vals_1597"
" normal-args_1607)))))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1612)"
"(if(keyword-procedure? p_1612)"
"(let-values()(values(keyword-procedure-required p_1612)(keyword-procedure-allowed p_1612)))"
"(if(procedure? p_1612)"
"(let-values()"
"(if(new-procedure? p_1612)"
"(let-values(((v_1613)(new-procedure-ref p_1612)))"
"(if(procedure? v_1613)"
"(procedure-keywords v_1613)"
"(let-values(((a_1614)(procedure-accessor-ref p_1612)))"
"(if a_1614(procedure-keywords(a_1614 p_1612))(values null null)))))"
"(values null null)))"
"        (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_1612))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1615 . args_1616)(apply(keyword-procedure-extract/method null 0 proc_1615 0) null null args_1616)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1617 kws_1618)"
"((letrec-values(((loop_1619)"
"(lambda(kws_1620 required_1621 allowed_1622)"
"(if(null? kws_1620)"
"(let-values()(if(null? required_1621)(values #f #f)(values(car required_1621) #f)))"
"(if(if(pair? required_1621)(eq?(car required_1621)(car kws_1620)) #f)"
"(let-values()"
"(loop_1619(cdr kws_1620)(cdr required_1621)(if allowed_1622(cdr allowed_1622) #f)))"
"(if(not allowed_1622)"
"(let-values()(loop_1619(cdr kws_1620) required_1621 #f))"
"(if(pair? allowed_1622)"
"(let-values()"
"(if(eq?(car allowed_1622)(car kws_1620))"
"(loop_1619(cdr kws_1620) required_1621(cdr allowed_1622))"
"(loop_1619 kws_1620 required_1621(cdr allowed_1622))))"
"(let-values()(values #f(car kws_1620))))))))))"
" loop_1619)"
" kws_1618"
"(keyword-procedure-required p_1617)"
"(keyword-procedure-allowed p_1617))))"
"(define-values"
"(make-keyword-checker)"
"(lambda(req-kws_1623 allowed-kws_1624 arity_1625)"
"(let-values()"
"(if(not allowed-kws_1624)"
"(let-values()"
"(if(null? req-kws_1623)"
"(let-values()"
"(if(integer? arity_1625)"
"(let-values()(lambda(kws_1636 a_1637)(= a_1637 arity_1625)))"
"(if(arity-at-least? arity_1625)"
"(let-values()"
"(let-values(((arity_1638)(arity-at-least-value arity_1625)))"
"(lambda(kws_1639 a_1640)(>= a_1640 arity_1638))))"
"(let-values()(lambda(kws_1641 a_1642)(arity-includes? arity_1625 a_1642))))))"
"(let-values()"
"(if(integer? arity_1625)"
"(let-values()"
"(lambda(kws_1643 a_1644)(if(subset?$1 req-kws_1623 kws_1643)(= a_1644 arity_1625) #f)))"
"(if(arity-at-least? arity_1625)"
"(let-values()"
"(let-values(((arity_1645)(arity-at-least-value arity_1625)))"
"(lambda(kws_1646 a_1647)(if(subset?$1 req-kws_1623 kws_1646)(>= a_1647 arity_1645) #f))))"
"(let-values()"
"(lambda(kws_1648 a_1649)"
"(if(subset?$1 req-kws_1623 kws_1648)(arity-includes? arity_1625 a_1649) #f))))))))"
"(if(null? allowed-kws_1624)"
"(let-values()"
"(if(integer? arity_1625)"
"(let-values()(lambda(kws_1650 a_1651)(if(null? kws_1650)(= a_1651 arity_1625) #f)))"
"(if(arity-at-least? arity_1625)"
"(let-values()"
"(let-values(((arity_1652)(arity-at-least-value arity_1625)))"
"(lambda(kws_1653 a_1654)(if(null? kws_1653)(>= a_1654 arity_1652) #f))))"
"(let-values()"
"(lambda(kws_1655 a_1656)(if(null? kws_1655)(arity-includes? arity_1625 a_1656) #f))))))"
"(let-values()"
"(if(null? req-kws_1623)"
"(let-values()"
"(if(integer? arity_1625)"
"(let-values()"
"(lambda(kws_1657 a_1658)(if(subset?$1 kws_1657 allowed-kws_1624)(= a_1658 arity_1625) #f)))"
"(if(arity-at-least? arity_1625)"
"(let-values()"
"(let-values(((arity_1659)(arity-at-least-value arity_1625)))"
"(lambda(kws_1660 a_1661)"
"(if(subset?$1 kws_1660 allowed-kws_1624)(>= a_1661 arity_1659) #f))))"
"(let-values()"
"(lambda(kws_1662 a_1663)"
"(if(subset?$1 kws_1662 allowed-kws_1624)(arity-includes? arity_1625 a_1663) #f))))))"
"(let-values()"
"(if(equal? req-kws_1623 allowed-kws_1624)"
"(if(integer? arity_1625)"
"(let-values()"
"(lambda(kws_1664 a_1665)"
"(if((letrec-values(((loop_1666)"
"(lambda(kws_1667 req-kws_1668)"
"(if(null? req-kws_1668)"
"(null? kws_1667)"
"(if(null? kws_1667)"
" #f"
"(if(eq?(car kws_1667)(car req-kws_1668))"
"(loop_1666(cdr kws_1667)(cdr req-kws_1668))"
" #f))))))"
" loop_1666)"
" kws_1664"
" req-kws_1623)"
"(= a_1665 arity_1625)"
" #f)))"
"(if(arity-at-least? arity_1625)"
"(let-values()"
"(let-values(((arity_1669)(arity-at-least-value arity_1625)))"
"(lambda(kws_1670 a_1671)"
"(if((letrec-values(((loop_1672)"
"(lambda(kws_1673 req-kws_1674)"
"(if(null? req-kws_1674)"
"(null? kws_1673)"
"(if(null? kws_1673)"
" #f"
"(if(eq?(car kws_1673)(car req-kws_1674))"
"(loop_1672(cdr kws_1673)(cdr req-kws_1674))"
" #f))))))"
" loop_1672)"
" kws_1670"
" req-kws_1623)"
"(>= a_1671 arity_1669)"
" #f))))"
"(let-values()"
"(lambda(kws_1675 a_1676)"
"(if((letrec-values(((loop_1677)"
"(lambda(kws_1678 req-kws_1679)"
"(if(null? req-kws_1679)"
"(null? kws_1678)"
"(if(null? kws_1678)"
" #f"
"(if(eq?(car kws_1678)(car req-kws_1679))"
"(loop_1677(cdr kws_1678)(cdr req-kws_1679))"
" #f))))))"
" loop_1677)"
" kws_1675"
" req-kws_1623)"
"(arity-includes? arity_1625 a_1676)"
" #f)))))"
"(if(integer? arity_1625)"
"(let-values()"
"(lambda(kws_1680 a_1681)"
"(if(subsets? req-kws_1623 kws_1680 allowed-kws_1624)(= a_1681 arity_1625) #f)))"
"(if(arity-at-least? arity_1625)"
"(let-values()"
"(let-values(((arity_1682)(arity-at-least-value arity_1625)))"
"(lambda(kws_1683 a_1684)"
"(if(subsets? req-kws_1623 kws_1683 allowed-kws_1624)(>= a_1684 arity_1682) #f))))"
"(let-values()"
"(lambda(kws_1685 a_1686)"
"(if(subsets? req-kws_1623 kws_1685 allowed-kws_1624)"
"(arity-includes? arity_1625 a_1686)"
" #f))))))))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(arity_1687 a_1688)"
"(if(integer? arity_1687)"
"(let-values()(= arity_1687 a_1688))"
"(if(arity-at-least? arity_1687)"
"(let-values()(>= a_1688(arity-at-least-value a_1688)))"
"(let-values()(ormap(lambda(ar_1689)(arity-includes? ar_1689 a_1688)) arity_1687))))))"
"(define-values"
"(subset?$1)"
"(lambda(l1_1690 l2_1691)"
"(if(null? l1_1690)"
"(let-values() #t)"
"(if(null? l2_1691)"
"(let-values() #f)"
"(if(eq?(car l1_1690)(car l2_1691))"
"(let-values()(subset?$1(cdr l1_1690)(cdr l2_1691)))"
"(let-values()(subset?$1 l1_1690(cdr l2_1691))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1692 l2_1693 l3_1694)"
"(if(null? l1_1692)"
"(let-values()(subset?$1 l2_1693 l3_1694))"
"(if(null? l2_1693)"
"(let-values() #f)"
"(if(null? l3_1694)"
"(let-values() #f)"
"(let-values()"
"(let-values(((v2_1695)(car l2_1693)))"
"(if(eq?(car l1_1692) v2_1695)"
"(let-values()(subsets?(cdr l1_1692)(cdr l2_1693)(cdr l3_1694)))"
"(if(eq? v2_1695(car l3_1694))"
"(let-values()(subsets? l1_1692(cdr l2_1693)(cdr l3_1694)))"
"(let-values()(subsets? l1_1692 l2_1693(cdr l3_1694))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1696 n_1697 p_1698 method-n_1699)"
"(if(if(keyword-procedure? p_1698)((keyword-procedure-checker p_1698) kws_1696 n_1697) #f)"
"(keyword-procedure-proc p_1698)"
"(let-values(((p2_1700)"
"(if(not(keyword-procedure? p_1698))"
"(if(procedure? p_1698)"
"(let-values(((or-part_1701)"
"(if(new-procedure? p_1698)"
"(let-values(((a_1702)(procedure-accessor-ref p_1698)))"
"(if a_1702(a_1702 p_1698) #f))"
" #f)))"
"(if or-part_1701"
" or-part_1701"
"(let-values(((or-part_1703)(procedure-extract-target p_1698)))"
"(if or-part_1703 or-part_1703(if(new-procedure? p_1698) 'method #f)))))"
" #f)"
" #f)))"
"(if p2_1700"
"(if(eq? p2_1700 'method)"
"(let-values(((p3_1704)"
"(keyword-procedure-extract/method"
" kws_1696"
"(add1 n_1697)"
"(new-procedure-ref p_1698)"
"(add1 method-n_1699))))"
"(lambda(kws_1705 kw-args_1706 . args_1707)"
"(apply p3_1704 kws_1705 kw-args_1706(cons p_1698 args_1707))))"
"(keyword-procedure-extract/method kws_1696 n_1697 p2_1700 method-n_1699))"
"(lambda(kws_1708 kw-args_1709 . args_1710)"
"(let-values(((missing-kw_1711 extra-kw_1712)"
"(if(keyword-procedure? p_1698)(check-kw-args p_1698 kws_1708)(values #f(car kws_1708)))))"
"(let-values(((n_1713)"
"(let-values(((method-n_1716)"
"(+"
" method-n_1699"
"(if(let-values(((or-part_1717)(keyword-method? p_1698)))"
"(if or-part_1717 or-part_1717(okm? p_1698)))"
" 1"
" 0))))"
"(if(>= n_1697 method-n_1716)(- n_1697 method-n_1716) n_1697)))"
"((args-str_1714)"
"(if(if(null? args_1710)(null? kws_1708) #f)"
"                              \"\""
"(apply"
" string-append"
"                               \"\\n  arguments...:\""
"(append"
"                                (map (lambda (v_1718) (format \"\\n   ~e\" v_1718)) args_1710)"
"(map"
"                                 (lambda (kw_1719 kw-arg_1720) (format \"\\n   ~a ~e\" kw_1719 kw-arg_1720))"
" kws_1708"
" kw-args_1709)))))"
"((proc-name_1715)"
"(lambda(p_1721)"
"(let-values(((or-part_1722)"
"(if(named-keyword-procedure? p_1721)"
"(car(keyword-procedure-name+fail p_1721))"
" #f)))"
"(if or-part_1722"
" or-part_1722"
"(let-values(((or-part_1723)(object-name p_1721)))"
"(if or-part_1723 or-part_1723 p_1721)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1712"
"(if(keyword-procedure? p_1698)"
"(format"
"(string-append"
"                        \"application: procedure does not expect an argument with given keyword\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  given keyword: ~a\""
"                        \"~a\")"
"(proc-name_1715 p_1698)"
" extra-kw_1712"
" args-str_1714)"
"(if(procedure? p_1698)"
"(format"
"(string-append"
"                          \"application: procedure does not accept keyword arguments\\n\""
"                          \"  procedure: ~a\""
"                          \"~a\")"
"(proc-name_1715 p_1698)"
" args-str_1714)"
"(format"
"(string-append"
"                          \"application: not a procedure;\\n\""
"                          \" expected a procedure that can be applied to arguments\\n\""
"                          \"  given: ~e\""
"                          \"~a\")"
" p_1698"
" args-str_1714)))"
"(if missing-kw_1711"
"(format"
"(string-append"
"                        \"application: required keyword argument not supplied\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  required keyword: ~a\""
"                        \"~a\")"
"(proc-name_1715 p_1698)"
" missing-kw_1711"
" args-str_1714)"
"(format"
"(string-append"
"                        \"application: no case matching ~a non-keyword argument~a\\n\""
"                        \"  procedure: ~a\""
"                        \"~a\")"
"(- n_1713 2)"
"                       (if (= 1 (- n_1713 2)) \"\" \"s\")"
"(proc-name_1715 p_1698)"
" args-str_1714)))"
"(current-continuation-marks)))))))))))"
"(define-values"
"(keyword-procedure-extract)"
"(lambda(p_1724 kws_1725 n_1726)(keyword-procedure-extract/method kws_1725 n_1726 p_1724 0)))"
"(void)"
"(void)"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(void)"
"(void)"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
"                      (if (list? l_2) (void) (raise-argument-error 'reverse \"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(void)"
"(void)"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence #f 1 0 #f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2558 si_2559)"
"(begin"
"(if(if(vector? v_2558)"
"(if(= 3(vector-length v_2558))"
"(if(procedure?(vector-ref v_2558 0))"
"(if(procedure-arity-includes?(vector-ref v_2558 0) 1)"
"(if(procedure?(vector-ref v_2558 1))"
"(if(procedure-arity-includes?(vector-ref v_2558 1) 1)"
"(if(procedure?(vector-ref v_2558 2))(procedure-arity-includes?(vector-ref v_2558 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_2558)))"
"(vector->immutable-vector v_2558)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2560 si_2561)"
"(begin"
"(if(if(procedure? v_2560)(procedure-arity-includes? v_2560 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_2560)))"
" v_2560))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2562 sinfo_2563)"
"(begin"
"(if(if(procedure? v_2562)(procedure-arity-includes? v_2562 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'sequence-property-guard \"(procedure-arity-includes/c 1)\" v_2562)))"
"(lambda(self_2564)"
"(let-values(((s_2565)(v_2562 self_2564)))"
"(begin"
"(if(sequence? s_2565)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
"                  \"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2565)))"
" s_2565)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2566)"
"(let-values(((or-part_2567)(list? v_2566)))(if or-part_2567 or-part_2567(stream-via-prop? v_2566)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2568)"
"(if(null? v_2568)"
" #f"
"(let-values(((or-part_2569)(pair? v_2568)))"
"(if or-part_2569 or-part_2569(not((unsafe-vector-ref(stream-ref v_2568) 0) v_2568)))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2572)"
"(if(pair? v_2572)"
"(let-values()(car v_2572))"
"(let-values()((unsafe-vector-ref(stream-ref v_2572) 1) v_2572)))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2574)"
"(if(pair? v_2574)"
"(let-values()(cdr v_2574))"
"(let-values()"
"(let-values(((r_2575)((unsafe-vector-ref(stream-ref v_2574) 2) v_2574)))"
"(begin"
"(if(stream? r_2575)"
"(void)"
"              (let-values () (raise-mismatch-error 'stream-rest-guard \"result is not a stream: \" r_2575)))"
" r_2575))))))"
"(define-values"
"(sequence?)"
"(lambda(v_2577)"
"(let-values(((or-part_2578)(exact-nonnegative-integer? v_2577)))"
"(if or-part_2578"
" or-part_2578"
"(let-values(((or-part_2579)(do-sequence? v_2577)))"
"(if or-part_2579"
" or-part_2579"
"(let-values(((or-part_2580)(sequence-via-prop? v_2577)))"
"(if or-part_2580"
" or-part_2580"
"(let-values(((or-part_2581)(stream? v_2577)))"
"(if or-part_2581"
" or-part_2581"
"(let-values(((or-part_2582)(mpair? v_2577)))"
"(if or-part_2582"
" or-part_2582"
"(let-values(((or-part_2583)(vector? v_2577)))"
"(if or-part_2583"
" or-part_2583"
"(let-values(((or-part_2584)(flvector? v_2577)))"
"(if or-part_2584"
" or-part_2584"
"(let-values(((or-part_2585)(fxvector? v_2577)))"
"(if or-part_2585"
" or-part_2585"
"(let-values(((or-part_2586)(string? v_2577)))"
"(if or-part_2586"
" or-part_2586"
"(let-values(((or-part_2587)(bytes? v_2577)))"
"(if or-part_2587"
" or-part_2587"
"(let-values(((or-part_2588)(input-port? v_2577)))"
"(if or-part_2588"
" or-part_2588"
"(let-values(((or-part_2589)(hash? v_2577)))"
"(if or-part_2589"
" or-part_2589"
"(if(:sequence? v_2577)"
"(not(struct-type? v_2577))"
" #f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2590 v_2591)"
"(if(exact-nonnegative-integer? v_2591)"
"(let-values()(:integer-gen v_2591))"
"(if(do-sequence? v_2591)"
"(let-values()((do-sequence-ref v_2591 0)))"
"(if(mpair? v_2591)"
"(let-values()(:mlist-gen v_2591))"
"(if(list? v_2591)"
"(let-values()(:list-gen v_2591))"
"(if(vector? v_2591)"
"(let-values()(:vector-gen v_2591 0(vector-length v_2591) 1))"
"(if(flvector? v_2591)"
"(let-values()(:flvector-gen v_2591 0(flvector-length v_2591) 1))"
"(if(fxvector? v_2591)"
"(let-values()(:fxvector-gen v_2591 0(fxvector-length v_2591) 1))"
"(if(string? v_2591)"
"(let-values()(:string-gen v_2591 0(string-length v_2591) 1))"
"(if(bytes? v_2591)"
"(let-values()(:bytes-gen v_2591 0(bytes-length v_2591) 1))"
"(if(input-port? v_2591)"
"(let-values()(:input-port-gen v_2591))"
"(if(hash? v_2591)"
"(let-values()(:hash-gen v_2591 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2591)"
"(let-values()((sequence-ref v_2591) v_2591))"
"(if(:sequence? v_2591)"
"(let-values()(make-sequence who_2590((:sequence-ref v_2591) v_2591)))"
"(if(stream? v_2591)"
"(let-values()(:stream-gen v_2591))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
"                                     \"for: expected a sequence for ~a, got something else: ~v\""
"(if(= 1(length who_2590))(car who_2590) who_2590)"
" v_2591)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2592)"
"(let-values(((cont?_2593)(range-ref v_2592 2)))(if cont?_2593(not(cont?_2593(range-ref v_2592 0))) #f)))"
"(lambda(v_2594)(range-ref v_2594 0))"
"(lambda(v_2595)"
"(make-range((range-ref v_2595 1)(range-ref v_2595 0))(range-ref v_2595 1)(range-ref v_2595 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2596)(values values(range-ref v_2596 1)(range-ref v_2596 0)(range-ref v_2596 2) #f #f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2597)(in-range 0 b_2597 1))"
"((a_2598 b_2599)(in-range a_2598 b_2599 1))"
"((a_2600 b_2601 step_2602)"
"(begin"
"      (if (real? a_2600) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_2600)))"
"      (if (real? b_2601) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_2601)))"
"      (if (real? step_2602) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_2602)))"
"(let-values(((cont?_2603)"
"(if(>= step_2602 0)(lambda(x_2604)(< x_2604 b_2601))(lambda(x_2605)(> x_2605 b_2601)))))"
"(let-values(((inc_2606)(lambda(x_2607)(+ x_2607 step_2602))))(make-range a_2600 inc_2606 cont?_2603)))))))"
"(define-values(:integer-gen)(lambda(v_2608)(values values add1 0(lambda(i_2609)(< i_2609 v_2608)) #f #f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals 0))"
"((n_2610)"
"(begin"
"(if(if(integer? n_2610)(if(exact? n_2610)(>= n_2610 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_2610)))"
"(make-range n_2610 add1 #f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2611)(not(pair?(list-stream-ref v_2611 0))))"
"(lambda(v_2612)(car(list-stream-ref v_2612 0)))"
"(lambda(v_2613)(make-list-stream(cdr(list-stream-ref v_2613 0))))))"
"(cons prop:gen-sequence(lambda(v_2614)(values car cdr(list-stream-ref v_2614 0) pair? #f #f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2615)"
"(begin"
"      (if (list? l_2615) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_2615)))"
"(make-list-stream l_2615))))"
"(define-values(:list-gen)(lambda(l_2616)(values car cdr l_2616 pair? #f #f)))"
"(define-values(:mlist-gen)(lambda(l_2618)(values mcar mcdr l_2618 mpair? #f #f)))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2620)(values read-byte values p_2620 #f(lambda(x_2621)(not(eof-object? x_2621))) #f)))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2639)(values unsafe-stream-first unsafe-stream-rest l_2639 unsafe-stream-not-empty? #f #f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2640 -get_2641 -first_2642 -next_2643)"
"(values"
"(lambda(pos_2644)(-get_2641 ht_2640 pos_2644))"
"(lambda(pos_2645)(-next_2643 ht_2640 pos_2645))"
"(-first_2642 ht_2640)"
"(lambda(pos_2646) pos_2646)"
" #f"
" #f)))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2649)"
"(begin"
"(if((lambda(ht_2650)(hash? ht_2650)) ht_2649)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash \"hash?\" ht_2649)))"
"(make-do-sequence(lambda()(:hash-gen ht_2649 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2653)"
"(begin"
"(if((lambda(ht_2654)(if(hash? ht_2654)(immutable? ht_2654) #f)) ht_2653)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_2653)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2653"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2657)"
"(begin"
"(if((lambda(ht_2658)(hash? ht_2658)) ht_2657)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_2657)))"
"(make-do-sequence(lambda()(:hash-gen ht_2657 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2661)"
"(begin"
"(if((lambda(ht_2662)(if(hash? ht_2662)(immutable? ht_2662) #f)) ht_2661)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_2661)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2661"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2665)"
"(begin"
"(if((lambda(ht_2666)(hash? ht_2666)) ht_2665)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_2665)))"
"(make-do-sequence(lambda()(:hash-gen ht_2665 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2681 vec_2682 start_2683 stop_2684 step_2685 len_2686)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2683)"
"(let-values(((or-part_2687)(< start_2683 len_2686)))"
"(if or-part_2687 or-part_2687(= len_2686 start_2683 stop_2684)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"starting \" start_2683 vec_2682 0 (sub1 len_2686))))"
"(if(if(exact-integer? stop_2684)(if(<= -1 stop_2684)(<= stop_2684 len_2686) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"stopping \" stop_2684 vec_2682 -1 len_2686)))"
"(if(if(exact-integer? step_2685)(not(zero? step_2685)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_2681 \"(and/c exact-integer? (not/c zero?))\" step_2685)))"
"(if(if(< start_2683 stop_2684)(< step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void))"
"(if(if(< stop_2684 start_2683)(> step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2688 type-name_2689 vector?_2690 unsafe-vector-length_2691 vec_2692 start_2693 stop_2694 step_2695)"
"(begin"
"(if(vector?_2690 vec_2692)(void)(let-values()(raise-argument-error who_2688 type-name_2689 vec_2692)))"
"(let-values(((len_2696)(unsafe-vector-length_2691 vec_2692)))"
"(let-values(((stop*_2697)(if stop_2694 stop_2694 len_2696)))"
"(begin"
"(check-ranges who_2688 vec_2692 start_2693 stop*_2697 step_2695 len_2696)"
"(values vec_2692 start_2693 stop*_2697 step_2695)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2698 start_2699 stop_2700 step_2701)"
"(values"
"(lambda(i_2702)(unsafe-vector-ref v_2698 i_2702))"
"(if(= step_2701 1) add1(lambda(i_2703)(+ i_2703 step_2701)))"
" start_2699"
"(if(> step_2701 0)(lambda(i_2704)(< i_2704 stop_2700))(lambda(i_2705)(> i_2705 stop_2700)))"
" #f"
" #f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2706)(in-vector v_2706 0 #f 1))"
"((v_2707 start_2708)(in-vector v_2707 start_2708 #f 1))"
"((v_2709 start_2710 stop_2711)(in-vector v_2709 start_2710 stop_2711 1))"
"((v_2712 start_2713 stop_2714 step_2715)"
"(let-values(((v_2716 start_2717 stop_2718 step_2719)"
"                  (normalise-inputs 'in-vector \"vector\" vector? vector-length v_2712 start_2713 stop_2714 step_2715)))"
"(make-do-sequence(lambda()(:vector-gen v_2716 start_2717 stop_2718 step_2719)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2720 start_2721 stop_2722 step_2723)"
"(values"
"(lambda(i_2724)(string-ref v_2720 i_2724))"
"(if(= step_2723 1) add1(lambda(i_2725)(+ i_2725 step_2723)))"
" start_2721"
"(if(> step_2723 0)(lambda(i_2726)(< i_2726 stop_2722))(lambda(i_2727)(> i_2727 stop_2722)))"
" #f"
" #f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2728)(in-string v_2728 0 #f 1))"
"((v_2729 start_2730)(in-string v_2729 start_2730 #f 1))"
"((v_2731 start_2732 stop_2733)(in-string v_2731 start_2732 stop_2733 1))"
"((v_2734 start_2735 stop_2736 step_2737)"
"(let-values(((v_2738 start_2739 stop_2740 step_2741)"
"                  (normalise-inputs 'in-string \"string\" string? string-length v_2734 start_2735 stop_2736 step_2737)))"
"(make-do-sequence(lambda()(:string-gen v_2738 start_2739 stop_2740 step_2741)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2742 start_2743 stop_2744 step_2745)"
"(values"
"(lambda(i_2746)(unsafe-bytes-ref v_2742 i_2746))"
"(if(= step_2745 1) add1(lambda(i_2747)(+ i_2747 step_2745)))"
" start_2743"
"(if(> step_2745 0)(lambda(i_2748)(< i_2748 stop_2744))(lambda(i_2749)(> i_2749 stop_2744)))"
" #f"
" #f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2750)(in-bytes v_2750 0 #f 1))"
"((v_2751 start_2752)(in-bytes v_2751 start_2752 #f 1))"
"((v_2753 start_2754 stop_2755)(in-bytes v_2753 start_2754 stop_2755 1))"
"((v_2756 start_2757 stop_2758 step_2759)"
"(let-values(((v_2760 start_2761 stop_2762 step_2763)"
"                  (normalise-inputs 'in-bytes \"bytes\" bytes? bytes-length v_2756 start_2757 stop_2758 step_2759)))"
"(make-do-sequence(lambda()(:bytes-gen v_2760 start_2761 stop_2762 step_2763)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2764 start_2765 stop_2766 step_2767)"
"(values"
"(lambda(i_2768)(unsafe-flvector-ref v_2764 i_2768))"
"(if(= step_2767 1) add1(lambda(i_2769)(+ i_2769 step_2767)))"
" start_2765"
"(if(> step_2767 0)(lambda(i_2770)(< i_2770 stop_2766))(lambda(i_2771)(> i_2771 stop_2766)))"
" #f"
" #f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2772 start_2773 stop_2774 step_2775)"
"(values"
"(lambda(i_2776)(unsafe-fxvector-ref v_2772 i_2776))"
"(if(= step_2775 1) add1(lambda(i_2777)(+ i_2777 step_2775)))"
" start_2773"
"(if(> step_2775 0)(lambda(i_2778)(< i_2778 stop_2774))(lambda(i_2779)(> i_2779 stop_2774)))"
" #f"
" #f)))"
"(define-values"
"(in-value)"
"(lambda(v_2817)"
"(make-do-sequence"
"(lambda()(values(lambda(pos_2818) v_2817)(lambda(pos_2819) #f) #t(lambda(pos_2820) pos_2820) void void)))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2940)((do-stream-ref v_2940 0)))"
"(lambda(v_2941)((do-stream-ref v_2941 1)))"
"(lambda(v_2942)((do-stream-ref v_2942 2))))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_2985)"
"(let-values(((n_2986)(vector-length vec_2985)))"
"(let-values(((new-vec_2987)(make-vector(* 2 n_2986))))"
"(begin(vector-copy! new-vec_2987 0 vec_2985 0 n_2986) new-vec_2987)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_2988 i_2989)"
"(let-values(((new-vec_2990)(make-vector i_2989)))"
"(begin(vector-copy! new-vec_2990 0 vec_2988 0 i_2989) new-vec_2990))))"
"(void)"
"(void)"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 1)(list? l_3) #f) #f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()(cons(f_2(car l_5))(loop_4(cdr l_5))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_6 l1_7 l2_8)"
"(if(if(procedure? f_6)"
"(if(procedure-arity-includes? f_6 2)"
"(if(list? l1_7)(if(list? l2_8)(=(length l1_7)(length l2_8)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_9)"
"(lambda(l1_10 l2_11)"
"(if(null? l1_10)"
"(let-values() null)"
"(let-values()"
"(cons(f_6(car l1_10)(car l2_11))(loop_9(cdr l1_10)(cdr l2_11))))))))"
" loop_9)"
" l1_7"
" l2_8)"
"(map f_6 l1_7 l2_8)))"
"((f_12 l_13 . args_14)(apply map f_12 l_13 args_14)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_15)"
"(case-lambda"
"((f_16 l_17)"
"(if(if(procedure? f_16)(if(procedure-arity-includes? f_16 1)(list? l_17) #f) #f)"
"((letrec-values(((loop_18)"
"(lambda(l_19)"
"(if(null? l_19)"
"(let-values()(void))"
"(let-values()(begin(f_16(car l_19))(loop_18(cdr l_19))))))))"
" loop_18)"
" l_17)"
"(for-each f_16 l_17)))"
"((f_20 l1_21 l2_22)"
"(if(if(procedure? f_20)"
"(if(procedure-arity-includes? f_20 2)"
"(if(list? l1_21)(if(list? l2_22)(=(length l1_21)(length l2_22)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_23)"
"(lambda(l1_24 l2_25)"
"(if(null? l1_24)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(f_20(car l1_24)(car l2_25))"
"(loop_23(cdr l1_24)(cdr l2_25))))))))"
" loop_23)"
" l1_21"
" l2_22)"
"(for-each f_20 l1_21 l2_22)))"
"((f_26 l_27 . args_28)(apply for-each f_26 l_27 args_28)))))"
" for-each_15))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_29)"
"(case-lambda"
"((f_30 l_31)"
"(if(if(procedure? f_30)(if(procedure-arity-includes? f_30 1)(list? l_31) #f) #f)"
"(if(null? l_31)"
" #t"
"((letrec-values(((loop_32)"
"(lambda(l_33)"
"(if(null?(cdr l_33))"
"(let-values()(f_30(car l_33)))"
"(let-values()(if(f_30(car l_33))(loop_32(cdr l_33)) #f))))))"
" loop_32)"
" l_31))"
"(andmap f_30 l_31)))"
"((f_34 l1_35 l2_36)"
"(if(if(procedure? f_34)"
"(if(procedure-arity-includes? f_34 2)"
"(if(list? l1_35)(if(list? l2_36)(=(length l1_35)(length l2_36)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_35)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l1_38 l2_39)"
"(if(null?(cdr l1_38))"
"(let-values()(f_34(car l1_38)(car l2_39)))"
"(let-values()"
"(if(f_34(car l1_38)(car l2_39))"
"(loop_37(cdr l1_38)(cdr l2_39))"
" #f))))))"
" loop_37)"
" l1_35"
" l2_36))"
"(andmap f_34 l1_35 l2_36)))"
"((f_40 l_41 . args_42)(apply andmap f_40 l_41 args_42)))))"
" andmap_29))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_43)"
"(case-lambda"
"((f_44 l_45)"
"(if(if(procedure? f_44)(if(procedure-arity-includes? f_44 1)(list? l_45) #f) #f)"
"(if(null? l_45)"
" #f"
"((letrec-values(((loop_46)"
"(lambda(l_47)"
"(if(null?(cdr l_47))"
"(let-values()(f_44(car l_47)))"
"(let-values()"
"(let-values(((or-part_48)(f_44(car l_47))))"
"(if or-part_48 or-part_48(loop_46(cdr l_47)))))))))"
" loop_46)"
" l_45))"
"(ormap f_44 l_45)))"
"((f_49 l1_50 l2_51)"
"(if(if(procedure? f_49)"
"(if(procedure-arity-includes? f_49 2)"
"(if(list? l1_50)(if(list? l2_51)(=(length l1_50)(length l2_51)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_50)"
" #f"
"((letrec-values(((loop_52)"
"(lambda(l1_53 l2_54)"
"(if(null?(cdr l1_53))"
"(let-values()(f_49(car l1_53)(car l2_54)))"
"(let-values()"
"(let-values(((or-part_55)(f_49(car l1_53)(car l2_54))))"
"(if or-part_55 or-part_55(loop_52(cdr l1_53)(cdr l2_54)))))))))"
" loop_52)"
" l1_50"
" l2_51))"
"(ormap f_49 l1_50 l2_51)))"
"((f_56 l_57 . args_58)(apply ormap f_56 l_57 args_58)))))"
" ormap_43))"
"(void)"
"(void)"
"(define-values"
"(sort)"
"(let-values()"
"(let-values(((sort-internals_29)(make-hasheq)))"
"(let-values(((__30)"
"(let-values()"
"(let-values()"
"(begin"
"(let-values(((proc_90)"
"(lambda(vec_91 n_92)"
"(let-values(((n/2-_93)(unsafe-fxrshift n_92 1)))"
"(let-values(((n/2+_94)(unsafe-fx- n_92 n/2-_93)))"
"(letrec-values(((copying-mergesort_169)"
"(lambda(Alo_170 Blo_171 n_172)"
"(if(unsafe-fx= n_172 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170)))"
"(if(unsafe-fx= n_172 2)"
"(let-values()"
"(let-values(((x_173)"
"(unsafe-vector-ref vec_91 Alo_170))"
"((y_174)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+ Alo_170 1))))"
"(if(< y_174 x_173)"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 y_174)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 x_173)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" y_174)))))"
"(if(unsafe-fx< n_172 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170))"
"((letrec-values(((iloop_175)"
"(lambda(i_176)"
"(if(unsafe-fx<"
" i_176"
" n_172)"
"(let-values()"
"(let-values(((ref-i_177)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+"
" Alo_170"
" i_176))))"
"((letrec-values(((jloop_178)"
"(lambda(j_179)"
"(let-values(((ref-j-1_180)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx-"
" j_179"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_171"
" j_179)"
"(<"
" ref-i_177"
" ref-j-1_180)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-j-1_180)"
"(jloop_178"
"(unsafe-fx-"
" j_179"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-i_177)"
"(iloop_175"
"(unsafe-fx+"
" i_176"
" 1))))))))"
" jloop_178)"
"(unsafe-fx+"
" Blo_171"
" i_176))))"
"(void)))))"
" iloop_175)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_181)"
"(unsafe-fxrshift n_172 1)))"
"(let-values(((n/2+_182)"
"(unsafe-fx- n_172 n/2-_181)))"
"(let-values(((Amid1_183)"
"(unsafe-fx+"
" Alo_170"
" n/2-_181))"
"((Amid2_184)"
"(unsafe-fx+"
" Alo_170"
" n/2+_182))"
"((Bmid1_185)"
"(unsafe-fx+"
" Blo_171"
" n/2-_181)))"
"(begin"
"(copying-mergesort_169"
" Amid1_183"
" Bmid1_185"
" n/2+_182)"
"(copying-mergesort_169"
" Alo_170"
" Amid2_184"
" n/2-_181)"
"(let-values(((b2_186)"
"(unsafe-fx+"
" Blo_171"
" n_172)))"
"((letrec-values(((loop_187)"
"(lambda(a1_188"
" b1_189"
" c1_190)"
"(let-values(((x_191)"
"(unsafe-vector-ref"
" vec_91"
" a1_188))"
"((y_192)"
"(unsafe-vector-ref"
" vec_91"
" b1_189)))"
"(if(not"
"(<"
" y_192"
" x_191))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" x_191)"
"(let-values(((a1_193)"
"(unsafe-fx+"
" a1_188"
" 1))"
"((c1_194)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<"
" c1_194"
" b1_189)"
"(let-values()"
"(loop_187"
" a1_193"
" b1_189"
" c1_194))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" y_192)"
"(let-values(((b1_195)"
"(unsafe-fx+"
" b1_189"
" 1))"
"((c1_196)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<="
" b2_186"
" b1_195)"
"((letrec-values(((loop_197)"
"(lambda(a1_198"
" c1_199)"
"(if(unsafe-fx<"
" c1_199"
" b1_195)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_199"
"(unsafe-vector-ref"
" vec_91"
" a1_198))"
"(loop_197"
"(unsafe-fx+"
" a1_198"
" 1)"
"(unsafe-fx+"
" c1_199"
" 1))))"
"(void)))))"
" loop_197)"
" a1_188"
" c1_196)"
"(loop_187"
" a1_188"
" b1_195"
" c1_196)))))))))"
" loop_187)"
" Amid2_184"
" Bmid1_185"
" Blo_171)))))))))))))"
"(let-values(((Alo_200) 0)"
"((Amid1_201) n/2-_93)"
"((Amid2_202) n/2+_94)"
"((Ahi_203) n_92)"
"((B1lo_204) n_92))"
"(begin"
"(copying-mergesort_169 Amid1_201 B1lo_204 n/2+_94)"
"(if(zero? n/2-_93)"
"(void)"
"(let-values()(copying-mergesort_169 Alo_200 Amid2_202 n/2-_93)))"
"(let-values(((b2_205) Ahi_203))"
"((letrec-values(((loop_206)"
"(lambda(a1_207 b1_208 c1_209)"
"(let-values(((x_210)"
"(unsafe-vector-ref"
" vec_91"
" a1_207))"
"((y_211)"
"(unsafe-vector-ref"
" vec_91"
" b1_208)))"
"(if(< x_210 y_211)"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 x_210)"
"(let-values(((a1_212)"
"(unsafe-fx+ a1_207 1))"
"((c1_213)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx< c1_213 b1_208)"
"(let-values()"
"(loop_206 a1_212 b1_208 c1_213))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 y_211)"
"(let-values(((b1_214)"
"(unsafe-fx+ b1_208 1))"
"((c1_215)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx<= b2_205 b1_214)"
"((letrec-values(((loop_216)"
"(lambda(a1_217"
" c1_218)"
"(if(unsafe-fx<"
" c1_218"
" b1_214)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_218"
"(unsafe-vector-ref"
" vec_91"
" a1_217))"
"(loop_216"
"(unsafe-fx+"
" a1_217"
" 1)"
"(unsafe-fx+"
" c1_218"
" 1))))"
"(void)))))"
" loop_216)"
" a1_207"
" c1_215)"
"(loop_206"
" a1_207"
" b1_214"
" c1_215)))))))))"
" loop_206)"
" B1lo_204"
" Amid2_202"
" Alo_200))))))))))"
"(begin(hash-set! sort-internals_29 < proc_90)(hash-set! sort-internals_29 <= proc_90)))"
"(let-values(((proc_219)"
"(lambda(vec_220 n_221)"
"(let-values(((n/2-_222)(unsafe-fxrshift n_221 1)))"
"(let-values(((n/2+_223)(unsafe-fx- n_221 n/2-_222)))"
"(letrec-values(((copying-mergesort_298)"
"(lambda(Alo_299 Blo_300 n_301)"
"(if(unsafe-fx= n_301 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299)))"
"(if(unsafe-fx= n_301 2)"
"(let-values()"
"(let-values(((x_302)"
"(unsafe-vector-ref"
" vec_220"
" Alo_299))"
"((y_303)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+ Alo_299 1))))"
"(if(> y_303 x_302)"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 y_303)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 x_302)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" y_303)))))"
"(if(unsafe-fx< n_301 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299))"
"((letrec-values(((iloop_304)"
"(lambda(i_305)"
"(if(unsafe-fx<"
" i_305"
" n_301)"
"(let-values()"
"(let-values(((ref-i_306)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+"
" Alo_299"
" i_305))))"
"((letrec-values(((jloop_307)"
"(lambda(j_308)"
"(let-values(((ref-j-1_309)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx-"
" j_308"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_300"
" j_308)"
"(>"
" ref-i_306"
" ref-j-1_309)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-j-1_309)"
"(jloop_307"
"(unsafe-fx-"
" j_308"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-i_306)"
"(iloop_304"
"(unsafe-fx+"
" i_305"
" 1))))))))"
" jloop_307)"
"(unsafe-fx+"
" Blo_300"
" i_305))))"
"(void)))))"
" iloop_304)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_310)"
"(unsafe-fxrshift n_301 1)))"
"(let-values(((n/2+_311)"
"(unsafe-fx- n_301 n/2-_310)))"
"(let-values(((Amid1_312)"
"(unsafe-fx+"
" Alo_299"
" n/2-_310))"
"((Amid2_313)"
"(unsafe-fx+"
" Alo_299"
" n/2+_311))"
"((Bmid1_314)"
"(unsafe-fx+"
" Blo_300"
" n/2-_310)))"
"(begin"
"(copying-mergesort_298"
" Amid1_312"
" Bmid1_314"
" n/2+_311)"
"(copying-mergesort_298"
" Alo_299"
" Amid2_313"
" n/2-_310)"
"(let-values(((b2_315)"
"(unsafe-fx+"
" Blo_300"
" n_301)))"
"((letrec-values(((loop_316)"
"(lambda(a1_317"
" b1_318"
" c1_319)"
"(let-values(((x_320)"
"(unsafe-vector-ref"
" vec_220"
" a1_317))"
"((y_321)"
"(unsafe-vector-ref"
" vec_220"
" b1_318)))"
"(if(not"
"(>"
" y_321"
" x_320))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" x_320)"
"(let-values(((a1_322)"
"(unsafe-fx+"
" a1_317"
" 1))"
"((c1_323)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<"
" c1_323"
" b1_318)"
"(let-values()"
"(loop_316"
" a1_322"
" b1_318"
" c1_323))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" y_321)"
"(let-values(((b1_324)"
"(unsafe-fx+"
" b1_318"
" 1))"
"((c1_325)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<="
" b2_315"
" b1_324)"
"((letrec-values(((loop_326)"
"(lambda(a1_327"
" c1_328)"
"(if(unsafe-fx<"
" c1_328"
" b1_324)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_328"
"(unsafe-vector-ref"
" vec_220"
" a1_327))"
"(loop_326"
"(unsafe-fx+"
" a1_327"
" 1)"
"(unsafe-fx+"
" c1_328"
" 1))))"
"(void)))))"
" loop_326)"
" a1_317"
" c1_325)"
"(loop_316"
" a1_317"
" b1_324"
" c1_325)))))))))"
" loop_316)"
" Amid2_313"
" Bmid1_314"
" Blo_300)))))))))))))"
"(let-values(((Alo_329) 0)"
"((Amid1_330) n/2-_222)"
"((Amid2_331) n/2+_223)"
"((Ahi_332) n_221)"
"((B1lo_333) n_221))"
"(begin"
"(copying-mergesort_298 Amid1_330 B1lo_333 n/2+_223)"
"(if(zero? n/2-_222)"
"(void)"
"(let-values()"
"(copying-mergesort_298 Alo_329 Amid2_331 n/2-_222)))"
"(let-values(((b2_334) Ahi_332))"
"((letrec-values(((loop_335)"
"(lambda(a1_336 b1_337 c1_338)"
"(let-values(((x_339)"
"(unsafe-vector-ref"
" vec_220"
" a1_336))"
"((y_340)"
"(unsafe-vector-ref"
" vec_220"
" b1_337)))"
"(if(> x_339 y_340)"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_338"
" x_339)"
"(let-values(((a1_341)"
"(unsafe-fx+ a1_336 1))"
"((c1_342)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx< c1_342 b1_337)"
"(let-values()"
"(loop_335 a1_341 b1_337 c1_342))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_338"
" y_340)"
"(let-values(((b1_343)"
"(unsafe-fx+ b1_337 1))"
"((c1_344)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx<= b2_334 b1_343)"
"((letrec-values(((loop_345)"
"(lambda(a1_346"
" c1_347)"
"(if(unsafe-fx<"
" c1_347"
" b1_343)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_347"
"(unsafe-vector-ref"
" vec_220"
" a1_346))"
"(loop_345"
"(unsafe-fx+"
" a1_346"
" 1)"
"(unsafe-fx+"
" c1_347"
" 1))))"
"(void)))))"
" loop_345)"
" a1_336"
" c1_344)"
"(loop_335"
" a1_336"
" b1_343"
" c1_344)))))))))"
" loop_335)"
" B1lo_333"
" Amid2_331"
" Alo_329))))))))))"
"(begin(hash-set! sort-internals_29 > proc_219)(hash-set! sort-internals_29 >= proc_219)))"
"(let-values(((proc_348)"
"(lambda(vec_349 n_350)"
"(let-values(((n/2-_351)(unsafe-fxrshift n_350 1)))"
"(let-values(((n/2+_352)(unsafe-fx- n_350 n/2-_351)))"
"(letrec-values(((copying-mergesort_427)"
"(lambda(Alo_428 Blo_429 n_430)"
"(if(unsafe-fx= n_430 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428)))"
"(if(unsafe-fx= n_430 2)"
"(let-values()"
"(let-values(((x_431)"
"(unsafe-vector-ref"
" vec_349"
" Alo_428))"
"((y_432)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+ Alo_428 1))))"
"(if(string<? y_432 x_431)"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 y_432)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 x_431)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" y_432)))))"
"(if(unsafe-fx< n_430 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428))"
"((letrec-values(((iloop_433)"
"(lambda(i_434)"
"(if(unsafe-fx<"
" i_434"
" n_430)"
"(let-values()"
"(let-values(((ref-i_435)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+"
" Alo_428"
" i_434))))"
"((letrec-values(((jloop_436)"
"(lambda(j_437)"
"(let-values(((ref-j-1_438)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx-"
" j_437"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_429"
" j_437)"
"(string<?"
" ref-i_435"
" ref-j-1_438)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-j-1_438)"
"(jloop_436"
"(unsafe-fx-"
" j_437"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-i_435)"
"(iloop_433"
"(unsafe-fx+"
" i_434"
" 1))))))))"
" jloop_436)"
"(unsafe-fx+"
" Blo_429"
" i_434))))"
"(void)))))"
" iloop_433)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_439)"
"(unsafe-fxrshift n_430 1)))"
"(let-values(((n/2+_440)"
"(unsafe-fx- n_430 n/2-_439)))"
"(let-values(((Amid1_441)"
"(unsafe-fx+"
" Alo_428"
" n/2-_439))"
"((Amid2_442)"
"(unsafe-fx+"
" Alo_428"
" n/2+_440))"
"((Bmid1_443)"
"(unsafe-fx+"
" Blo_429"
" n/2-_439)))"
"(begin"
"(copying-mergesort_427"
" Amid1_441"
" Bmid1_443"
" n/2+_440)"
"(copying-mergesort_427"
" Alo_428"
" Amid2_442"
" n/2-_439)"
"(let-values(((b2_444)"
"(unsafe-fx+"
" Blo_429"
" n_430)))"
"((letrec-values(((loop_445)"
"(lambda(a1_446"
" b1_447"
" c1_448)"
"(let-values(((x_449)"
"(unsafe-vector-ref"
" vec_349"
" a1_446))"
"((y_450)"
"(unsafe-vector-ref"
" vec_349"
" b1_447)))"
"(if(not"
"(string<?"
" y_450"
" x_449))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" x_449)"
"(let-values(((a1_451)"
"(unsafe-fx+"
" a1_446"
" 1))"
"((c1_452)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<"
" c1_452"
" b1_447)"
"(let-values()"
"(loop_445"
" a1_451"
" b1_447"
" c1_452))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" y_450)"
"(let-values(((b1_453)"
"(unsafe-fx+"
" b1_447"
" 1))"
"((c1_454)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<="
" b2_444"
" b1_453)"
"((letrec-values(((loop_455)"
"(lambda(a1_456"
" c1_457)"
"(if(unsafe-fx<"
" c1_457"
" b1_453)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_457"
"(unsafe-vector-ref"
" vec_349"
" a1_456))"
"(loop_455"
"(unsafe-fx+"
" a1_456"
" 1)"
"(unsafe-fx+"
" c1_457"
" 1))))"
"(void)))))"
" loop_455)"
" a1_446"
" c1_454)"
"(loop_445"
" a1_446"
" b1_453"
" c1_454)))))))))"
" loop_445)"
" Amid2_442"
" Bmid1_443"
" Blo_429)))))))))))))"
"(let-values(((Alo_458) 0)"
"((Amid1_459) n/2-_351)"
"((Amid2_460) n/2+_352)"
"((Ahi_461) n_350)"
"((B1lo_462) n_350))"
"(begin"
"(copying-mergesort_427 Amid1_459 B1lo_462 n/2+_352)"
"(if(zero? n/2-_351)"
"(void)"
"(let-values()"
"(copying-mergesort_427 Alo_458 Amid2_460 n/2-_351)))"
"(let-values(((b2_463) Ahi_461))"
"((letrec-values(((loop_464)"
"(lambda(a1_465 b1_466 c1_467)"
"(let-values(((x_468)"
"(unsafe-vector-ref"
" vec_349"
" a1_465))"
"((y_469)"
"(unsafe-vector-ref"
" vec_349"
" b1_466)))"
"(if(string<? x_468 y_469)"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_467"
" x_468)"
"(let-values(((a1_470)"
"(unsafe-fx+ a1_465 1))"
"((c1_471)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx< c1_471 b1_466)"
"(let-values()"
"(loop_464 a1_470 b1_466 c1_471))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_467"
" y_469)"
"(let-values(((b1_472)"
"(unsafe-fx+ b1_466 1))"
"((c1_473)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx<= b2_463 b1_472)"
"((letrec-values(((loop_474)"
"(lambda(a1_475"
" c1_476)"
"(if(unsafe-fx<"
" c1_476"
" b1_472)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_476"
"(unsafe-vector-ref"
" vec_349"
" a1_475))"
"(loop_474"
"(unsafe-fx+"
" a1_475"
" 1)"
"(unsafe-fx+"
" c1_476"
" 1))))"
"(void)))))"
" loop_474)"
" a1_465"
" c1_473)"
"(loop_464"
" a1_465"
" b1_472"
" c1_473)))))))))"
" loop_464)"
" B1lo_462"
" Amid2_460"
" Alo_458))))))))))"
"(begin"
"(hash-set! sort-internals_29 string<? proc_348)"
"(hash-set! sort-internals_29 string<=? proc_348)))"
"(let-values(((proc_477)"
"(lambda(vec_478 n_479)"
"(let-values(((n/2-_480)(unsafe-fxrshift n_479 1)))"
"(let-values(((n/2+_481)(unsafe-fx- n_479 n/2-_480)))"
"(letrec-values(((copying-mergesort_556)"
"(lambda(Alo_557 Blo_558 n_559)"
"(if(unsafe-fx= n_559 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557)))"
"(if(unsafe-fx= n_559 2)"
"(let-values()"
"(let-values(((x_560)"
"(unsafe-vector-ref"
" vec_478"
" Alo_557))"
"((y_561)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+ Alo_557 1))))"
"(if(string-ci<? y_561 x_560)"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 y_561)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 x_560)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" y_561)))))"
"(if(unsafe-fx< n_559 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557))"
"((letrec-values(((iloop_562)"
"(lambda(i_563)"
"(if(unsafe-fx<"
" i_563"
" n_559)"
"(let-values()"
"(let-values(((ref-i_564)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+"
" Alo_557"
" i_563))))"
"((letrec-values(((jloop_565)"
"(lambda(j_566)"
"(let-values(((ref-j-1_567)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx-"
" j_566"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_558"
" j_566)"
"(string-ci<?"
" ref-i_564"
" ref-j-1_567)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-j-1_567)"
"(jloop_565"
"(unsafe-fx-"
" j_566"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-i_564)"
"(iloop_562"
"(unsafe-fx+"
" i_563"
" 1))))))))"
" jloop_565)"
"(unsafe-fx+"
" Blo_558"
" i_563))))"
"(void)))))"
" iloop_562)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_568)"
"(unsafe-fxrshift n_559 1)))"
"(let-values(((n/2+_569)"
"(unsafe-fx- n_559 n/2-_568)))"
"(let-values(((Amid1_570)"
"(unsafe-fx+"
" Alo_557"
" n/2-_568))"
"((Amid2_571)"
"(unsafe-fx+"
" Alo_557"
" n/2+_569))"
"((Bmid1_572)"
"(unsafe-fx+"
" Blo_558"
" n/2-_568)))"
"(begin"
"(copying-mergesort_556"
" Amid1_570"
" Bmid1_572"
" n/2+_569)"
"(copying-mergesort_556"
" Alo_557"
" Amid2_571"
" n/2-_568)"
"(let-values(((b2_573)"
"(unsafe-fx+"
" Blo_558"
" n_559)))"
"((letrec-values(((loop_574)"
"(lambda(a1_575"
" b1_576"
" c1_577)"
"(let-values(((x_578)"
"(unsafe-vector-ref"
" vec_478"
" a1_575))"
"((y_579)"
"(unsafe-vector-ref"
" vec_478"
" b1_576)))"
"(if(not"
"(string-ci<?"
" y_579"
" x_578))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" x_578)"
"(let-values(((a1_580)"
"(unsafe-fx+"
" a1_575"
" 1))"
"((c1_581)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<"
" c1_581"
" b1_576)"
"(let-values()"
"(loop_574"
" a1_580"
" b1_576"
" c1_581))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" y_579)"
"(let-values(((b1_582)"
"(unsafe-fx+"
" b1_576"
" 1))"
"((c1_583)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<="
" b2_573"
" b1_582)"
"((letrec-values(((loop_584)"
"(lambda(a1_585"
" c1_586)"
"(if(unsafe-fx<"
" c1_586"
" b1_582)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_586"
"(unsafe-vector-ref"
" vec_478"
" a1_585))"
"(loop_584"
"(unsafe-fx+"
" a1_585"
" 1)"
"(unsafe-fx+"
" c1_586"
" 1))))"
"(void)))))"
" loop_584)"
" a1_575"
" c1_583)"
"(loop_574"
" a1_575"
" b1_582"
" c1_583)))))))))"
" loop_574)"
" Amid2_571"
" Bmid1_572"
" Blo_558)))))))))))))"
"(let-values(((Alo_587) 0)"
"((Amid1_588) n/2-_480)"
"((Amid2_589) n/2+_481)"
"((Ahi_590) n_479)"
"((B1lo_591) n_479))"
"(begin"
"(copying-mergesort_556 Amid1_588 B1lo_591 n/2+_481)"
"(if(zero? n/2-_480)"
"(void)"
"(let-values()"
"(copying-mergesort_556 Alo_587 Amid2_589 n/2-_480)))"
"(let-values(((b2_592) Ahi_590))"
"((letrec-values(((loop_593)"
"(lambda(a1_594 b1_595 c1_596)"
"(let-values(((x_597)"
"(unsafe-vector-ref"
" vec_478"
" a1_594))"
"((y_598)"
"(unsafe-vector-ref"
" vec_478"
" b1_595)))"
"(if(string-ci<? x_597 y_598)"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_596"
" x_597)"
"(let-values(((a1_599)"
"(unsafe-fx+ a1_594 1))"
"((c1_600)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx< c1_600 b1_595)"
"(let-values()"
"(loop_593 a1_599 b1_595 c1_600))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_596"
" y_598)"
"(let-values(((b1_601)"
"(unsafe-fx+ b1_595 1))"
"((c1_602)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx<= b2_592 b1_601)"
"((letrec-values(((loop_603)"
"(lambda(a1_604"
" c1_605)"
"(if(unsafe-fx<"
" c1_605"
" b1_601)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_605"
"(unsafe-vector-ref"
" vec_478"
" a1_604))"
"(loop_603"
"(unsafe-fx+"
" a1_604"
" 1)"
"(unsafe-fx+"
" c1_605"
" 1))))"
"(void)))))"
" loop_603)"
" a1_594"
" c1_602)"
"(loop_593"
" a1_594"
" b1_601"
" c1_602)))))))))"
" loop_593)"
" B1lo_591"
" Amid2_589"
" Alo_587))))))))))"
"(begin"
"(hash-set! sort-internals_29 string-ci<? proc_477)"
"(hash-set! sort-internals_29 string-ci<=? proc_477)))"
"(let-values(((proc_606)"
"(lambda(vec_607 n_608)"
"(let-values(((n/2-_609)(unsafe-fxrshift n_608 1)))"
"(let-values(((n/2+_610)(unsafe-fx- n_608 n/2-_609)))"
"(letrec-values(((copying-mergesort_685)"
"(lambda(Alo_686 Blo_687 n_688)"
"(if(unsafe-fx= n_688 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686)))"
"(if(unsafe-fx= n_688 2)"
"(let-values()"
"(let-values(((x_689)"
"(unsafe-vector-ref"
" vec_607"
" Alo_686))"
"((y_690)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+ Alo_686 1))))"
"(if(keyword<? y_690 x_689)"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 y_690)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 x_689)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" y_690)))))"
"(if(unsafe-fx< n_688 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686))"
"((letrec-values(((iloop_691)"
"(lambda(i_692)"
"(if(unsafe-fx<"
" i_692"
" n_688)"
"(let-values()"
"(let-values(((ref-i_693)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+"
" Alo_686"
" i_692))))"
"((letrec-values(((jloop_694)"
"(lambda(j_695)"
"(let-values(((ref-j-1_696)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx-"
" j_695"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_687"
" j_695)"
"(keyword<?"
" ref-i_693"
" ref-j-1_696)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-j-1_696)"
"(jloop_694"
"(unsafe-fx-"
" j_695"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-i_693)"
"(iloop_691"
"(unsafe-fx+"
" i_692"
" 1))))))))"
" jloop_694)"
"(unsafe-fx+"
" Blo_687"
" i_692))))"
"(void)))))"
" iloop_691)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_697)"
"(unsafe-fxrshift n_688 1)))"
"(let-values(((n/2+_698)"
"(unsafe-fx- n_688 n/2-_697)))"
"(let-values(((Amid1_699)"
"(unsafe-fx+"
" Alo_686"
" n/2-_697))"
"((Amid2_700)"
"(unsafe-fx+"
" Alo_686"
" n/2+_698))"
"((Bmid1_701)"
"(unsafe-fx+"
" Blo_687"
" n/2-_697)))"
"(begin"
"(copying-mergesort_685"
" Amid1_699"
" Bmid1_701"
" n/2+_698)"
"(copying-mergesort_685"
" Alo_686"
" Amid2_700"
" n/2-_697)"
"(let-values(((b2_702)"
"(unsafe-fx+"
" Blo_687"
" n_688)))"
"((letrec-values(((loop_703)"
"(lambda(a1_704"
" b1_705"
" c1_706)"
"(let-values(((x_707)"
"(unsafe-vector-ref"
" vec_607"
" a1_704))"
"((y_708)"
"(unsafe-vector-ref"
" vec_607"
" b1_705)))"
"(if(not"
"(keyword<?"
" y_708"
" x_707))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" x_707)"
"(let-values(((a1_709)"
"(unsafe-fx+"
" a1_704"
" 1))"
"((c1_710)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<"
" c1_710"
" b1_705)"
"(let-values()"
"(loop_703"
" a1_709"
" b1_705"
" c1_710))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" y_708)"
"(let-values(((b1_711)"
"(unsafe-fx+"
" b1_705"
" 1))"
"((c1_712)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<="
" b2_702"
" b1_711)"
"((letrec-values(((loop_713)"
"(lambda(a1_714"
" c1_715)"
"(if(unsafe-fx<"
" c1_715"
" b1_711)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_715"
"(unsafe-vector-ref"
" vec_607"
" a1_714))"
"(loop_713"
"(unsafe-fx+"
" a1_714"
" 1)"
"(unsafe-fx+"
" c1_715"
" 1))))"
"(void)))))"
" loop_713)"
" a1_704"
" c1_712)"
"(loop_703"
" a1_704"
" b1_711"
" c1_712)))))))))"
" loop_703)"
" Amid2_700"
" Bmid1_701"
" Blo_687)))))))))))))"
"(let-values(((Alo_716) 0)"
"((Amid1_717) n/2-_609)"
"((Amid2_718) n/2+_610)"
"((Ahi_719) n_608)"
"((B1lo_720) n_608))"
"(begin"
"(copying-mergesort_685 Amid1_717 B1lo_720 n/2+_610)"
"(if(zero? n/2-_609)"
"(void)"
"(let-values()"
"(copying-mergesort_685 Alo_716 Amid2_718 n/2-_609)))"
"(let-values(((b2_721) Ahi_719))"
"((letrec-values(((loop_722)"
"(lambda(a1_723 b1_724 c1_725)"
"(let-values(((x_726)"
"(unsafe-vector-ref"
" vec_607"
" a1_723))"
"((y_727)"
"(unsafe-vector-ref"
" vec_607"
" b1_724)))"
"(if(keyword<? x_726 y_727)"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_725"
" x_726)"
"(let-values(((a1_728)"
"(unsafe-fx+ a1_723 1))"
"((c1_729)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx< c1_729 b1_724)"
"(let-values()"
"(loop_722 a1_728 b1_724 c1_729))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_725"
" y_727)"
"(let-values(((b1_730)"
"(unsafe-fx+ b1_724 1))"
"((c1_731)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx<= b2_721 b1_730)"
"((letrec-values(((loop_732)"
"(lambda(a1_733"
" c1_734)"
"(if(unsafe-fx<"
" c1_734"
" b1_730)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_734"
"(unsafe-vector-ref"
" vec_607"
" a1_733))"
"(loop_732"
"(unsafe-fx+"
" a1_733"
" 1)"
"(unsafe-fx+"
" c1_734"
" 1))))"
"(void)))))"
" loop_732)"
" a1_723"
" c1_731)"
"(loop_722"
" a1_723"
" b1_730"
" c1_731)))))))))"
" loop_722)"
" B1lo_720"
" Amid2_718"
" Alo_716))))))))))"
"(hash-set! sort-internals_29 keyword<? proc_606)))))))"
"(case-lambda"
"((lst_735 <?_736)"
"(let-values(((n_737)(length lst_735)))"
"(let-values()"
"(if(= n_737 0)"
"(let-values() lst_735)"
"(if(< n_737 2)"
"(let-values() lst_735)"
"(if((letrec-values(((loop_887)"
"(lambda(last_888 next_889)"
"(let-values(((or-part_890)(null? next_889)))"
"(if or-part_890"
" or-part_890"
"(if(not(<?_736(car next_889) last_888))"
"(loop_887(car next_889)(cdr next_889))"
" #f))))))"
" loop_887)"
"(car lst_735)"
"(cdr lst_735))"
"(let-values() lst_735)"
"(if(<= n_737 3)"
"(let-values()"
"(if(= n_737 2)"
"(list(cadr lst_735)(car lst_735))"
"(let-values(((a_891)(car lst_735))((b_892)(cadr lst_735))((c_893)(caddr lst_735)))"
"(let-values(((a_894)(car lst_735))((b_895)(cadr lst_735))((c_896)(caddr lst_735)))"
"(if(<?_736 b_895 a_894)"
"(if(<?_736 c_896 b_895)"
"(list c_896 b_895 a_894)"
"(if(<?_736 c_896 a_894)(list b_895 c_896 a_894)(list b_895 a_894 c_896)))"
"(if(<?_736 c_896 a_894)(list c_896 a_894 b_895)(list a_894 c_896 b_895)))))))"
"(let-values()"
"(let-values(((vec_897)(make-vector(+ n_737(ceiling(/ n_737 2))))))"
"(begin"
"((letrec-values(((loop_898)"
"(lambda(i_899 lst_900)"
"(if(pair? lst_900)"
"(let-values()"
"(begin"
"(vector-set! vec_897 i_899(car lst_900))"
"(loop_898(add1 i_899)(cdr lst_900))))"
"(void)))))"
" loop_898)"
" 0"
" lst_735)"
"(let-values(((si_1027)(hash-ref sort-internals_29 <?_736 #f)))"
"(if si_1027"
"(si_1027 vec_897 n_737)"
"(let-values()"
"(let-values(((n/2-_1028)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_1029)(unsafe-fx- n_737 n/2-_1028)))"
"(letrec-values(((copying-mergesort_1104)"
"(lambda(Alo_1105 Blo_1106 n_1107)"
"(if(unsafe-fx= n_1107 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105)))"
"(if(unsafe-fx= n_1107 2)"
"(let-values()"
"(let-values(((x_1108)"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((y_1109)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_1105 1))))"
"(if(<?_736 y_1109 x_1108)"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 y_1109)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 x_1108)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" y_1109)))))"
"(if(unsafe-fx< n_1107 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((letrec-values(((iloop_1110)"
"(lambda(i_1111)"
"(if(unsafe-fx< i_1111 n_1107)"
"(let-values()"
"(let-values(((ref-i_1112)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_1105"
" i_1111))))"
"((letrec-values(((jloop_1113)"
"(lambda(j_1114)"
"(let-values(((ref-j-1_1115)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_1114"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1106"
" j_1114)"
"(<?_736"
" ref-i_1112"
" ref-j-1_1115)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-j-1_1115)"
"(jloop_1113"
"(unsafe-fx-"
" j_1114"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-i_1112)"
"(iloop_1110"
"(unsafe-fx+"
" i_1111"
" 1))))))))"
" jloop_1113)"
"(unsafe-fx+"
" Blo_1106"
" i_1111))))"
"(void)))))"
" iloop_1110)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1116)(unsafe-fxrshift n_1107 1)))"
"(let-values(((n/2+_1117)"
"(unsafe-fx- n_1107 n/2-_1116)))"
"(let-values(((Amid1_1118)"
"(unsafe-fx+ Alo_1105 n/2-_1116))"
"((Amid2_1119)"
"(unsafe-fx+ Alo_1105 n/2+_1117))"
"((Bmid1_1120)"
"(unsafe-fx+ Blo_1106 n/2-_1116)))"
"(begin"
"(copying-mergesort_1104"
" Amid1_1118"
" Bmid1_1120"
" n/2+_1117)"
"(copying-mergesort_1104"
" Alo_1105"
" Amid2_1119"
" n/2-_1116)"
"(let-values(((b2_1121)"
"(unsafe-fx+ Blo_1106 n_1107)))"
"((letrec-values(((loop_1122)"
"(lambda(a1_1123"
" b1_1124"
" c1_1125)"
"(let-values(((x_1126)"
"(unsafe-vector-ref"
" vec_897"
" a1_1123))"
"((y_1127)"
"(unsafe-vector-ref"
" vec_897"
" b1_1124)))"
"(if(not"
"(<?_736"
" y_1127"
" x_1126))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" x_1126)"
"(let-values(((a1_1128)"
"(unsafe-fx+"
" a1_1123"
" 1))"
"((c1_1129)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<"
" c1_1129"
" b1_1124)"
"(let-values()"
"(loop_1122"
" a1_1128"
" b1_1124"
" c1_1129))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" y_1127)"
"(let-values(((b1_1130)"
"(unsafe-fx+"
" b1_1124"
" 1))"
"((c1_1131)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<="
" b2_1121"
" b1_1130)"
"((letrec-values(((loop_1132)"
"(lambda(a1_1133"
" c1_1134)"
"(if(unsafe-fx<"
" c1_1134"
" b1_1130)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1134"
"(unsafe-vector-ref"
" vec_897"
" a1_1133))"
"(loop_1132"
"(unsafe-fx+"
" a1_1133"
" 1)"
"(unsafe-fx+"
" c1_1134"
" 1))))"
"(void)))))"
" loop_1132)"
" a1_1123"
" c1_1131)"
"(loop_1122"
" a1_1123"
" b1_1130"
" c1_1131)))))))))"
" loop_1122)"
" Amid2_1119"
" Bmid1_1120"
" Blo_1106)))))))))))))"
"(let-values(((Alo_1135) 0)"
"((Amid1_1136) n/2-_1028)"
"((Amid2_1137) n/2+_1029)"
"((Ahi_1138) n_737)"
"((B1lo_1139) n_737))"
"(begin"
"(copying-mergesort_1104 Amid1_1136 B1lo_1139 n/2+_1029)"
"(if(zero? n/2-_1028)"
"(void)"
"(let-values()(copying-mergesort_1104 Alo_1135 Amid2_1137 n/2-_1028)))"
"(let-values(((b2_1140) Ahi_1138))"
"((letrec-values(((loop_1141)"
"(lambda(a1_1142 b1_1143 c1_1144)"
"(let-values(((x_1145)"
"(unsafe-vector-ref vec_897 a1_1142))"
"((y_1146)"
"(unsafe-vector-ref vec_897 b1_1143)))"
"(if(<?_736 x_1145 y_1146)"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 x_1145)"
"(let-values(((a1_1147)(unsafe-fx+ a1_1142 1))"
"((c1_1148)(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx< c1_1148 b1_1143)"
"(let-values()"
"(loop_1141 a1_1147 b1_1143 c1_1148))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 y_1146)"
"(let-values(((b1_1149)(unsafe-fx+ b1_1143 1))"
"((c1_1150)(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx<= b2_1140 b1_1149)"
"((letrec-values(((loop_1151)"
"(lambda(a1_1152 c1_1153)"
"(if(unsafe-fx<"
" c1_1153"
" b1_1149)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1153"
"(unsafe-vector-ref"
" vec_897"
" a1_1152))"
"(loop_1151"
"(unsafe-fx+"
" a1_1152"
" 1)"
"(unsafe-fx+"
" c1_1153"
" 1))))"
"(void)))))"
" loop_1151)"
" a1_1142"
" c1_1150)"
"(loop_1141 a1_1142 b1_1149 c1_1150)))))))))"
" loop_1141)"
" B1lo_1139"
" Amid2_1137"
" Alo_1135))))))))))"
"((letrec-values(((loop_1154)"
"(lambda(i_1155 r_1156)"
"(let-values(((i_1157)(sub1 i_1155)))"
"(if(< i_1157 0)"
" r_1156"
"(loop_1154 i_1157(cons(vector-ref vec_897 i_1157) r_1156)))))))"
" loop_1154)"
" n_737"
" '())))))))))))"
"((lst_1158 <?_1159 getkey_1160)"
"(if(if getkey_1160(not(eq? values getkey_1160)) #f)"
"(sort lst_1158 <?_1159 getkey_1160 #f)"
"(sort lst_1158 <?_1159)))"
"((lst_1161 <?_1162 getkey_1163 cache-keys?_1164)"
"(if(if getkey_1163(not(eq? values getkey_1163)) #f)"
"(let-values(((n_1165)(length lst_1161)))"
"(let-values()"
"(if(= n_1165 0)"
"(let-values() lst_1161)"
"(if cache-keys?_1164"
"(let-values()"
"(let-values(((vec_1180)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1181)"
"(lambda(i_1182 lst_1183)"
"(if(pair? lst_1183)"
"(let-values()"
"(let-values(((x_1184)(car lst_1183)))"
"(begin"
"(vector-set! vec_1180 i_1182(cons(getkey_1163 x_1184) x_1184))"
"(loop_1181(add1 i_1182)(cdr lst_1183)))))"
"(void)))))"
" loop_1181)"
" 0"
" lst_1161)"
"(let-values()"
"(let-values(((n/2-_1185)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1186)(unsafe-fx- n_1165 n/2-_1185)))"
"(letrec-values(((copying-mergesort_1261)"
"(lambda(Alo_1262 Blo_1263 n_1264)"
"(if(unsafe-fx= n_1264 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262)))"
"(if(unsafe-fx= n_1264 2)"
"(let-values()"
"(let-values(((x_1265)(unsafe-vector-ref vec_1180 Alo_1262))"
"((y_1266)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+ Alo_1262 1))))"
"(if(<?_1162(car y_1266)(car x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 y_1266)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 x_1265)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" y_1266)))))"
"(if(unsafe-fx< n_1264 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262))"
"((letrec-values(((iloop_1267)"
"(lambda(i_1268)"
"(if(unsafe-fx< i_1268 n_1264)"
"(let-values()"
"(let-values(((ref-i_1269)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+"
" Alo_1262"
" i_1268))))"
"((letrec-values(((jloop_1270)"
"(lambda(j_1271)"
"(let-values(((ref-j-1_1272)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx-"
" j_1271"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1263"
" j_1271)"
"(<?_1162"
"(car"
" ref-i_1269)"
"(car"
" ref-j-1_1272))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-j-1_1272)"
"(jloop_1270"
"(unsafe-fx-"
" j_1271"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-i_1269)"
"(iloop_1267"
"(unsafe-fx+"
" i_1268"
" 1))))))))"
" jloop_1270)"
"(unsafe-fx+ Blo_1263 i_1268))))"
"(void)))))"
" iloop_1267)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1273)(unsafe-fxrshift n_1264 1)))"
"(let-values(((n/2+_1274)(unsafe-fx- n_1264 n/2-_1273)))"
"(let-values(((Amid1_1275)"
"(unsafe-fx+ Alo_1262 n/2-_1273))"
"((Amid2_1276)"
"(unsafe-fx+ Alo_1262 n/2+_1274))"
"((Bmid1_1277)"
"(unsafe-fx+ Blo_1263 n/2-_1273)))"
"(begin"
"(copying-mergesort_1261"
" Amid1_1275"
" Bmid1_1277"
" n/2+_1274)"
"(copying-mergesort_1261"
" Alo_1262"
" Amid2_1276"
" n/2-_1273)"
"(let-values(((b2_1278)"
"(unsafe-fx+ Blo_1263 n_1264)))"
"((letrec-values(((loop_1279)"
"(lambda(a1_1280 b1_1281 c1_1282)"
"(let-values(((x_1283)"
"(unsafe-vector-ref"
" vec_1180"
" a1_1280))"
"((y_1284)"
"(unsafe-vector-ref"
" vec_1180"
" b1_1281)))"
"(if(not"
"(<?_1162"
"(car y_1284)"
"(car x_1283)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" x_1283)"
"(let-values(((a1_1285)"
"(unsafe-fx+"
" a1_1280"
" 1))"
"((c1_1286)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<"
" c1_1286"
" b1_1281)"
"(let-values()"
"(loop_1279"
" a1_1285"
" b1_1281"
" c1_1286))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" y_1284)"
"(let-values(((b1_1287)"
"(unsafe-fx+"
" b1_1281"
" 1))"
"((c1_1288)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<="
" b2_1278"
" b1_1287)"
"((letrec-values(((loop_1289)"
"(lambda(a1_1290"
" c1_1291)"
"(if(unsafe-fx<"
" c1_1291"
" b1_1287)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1291"
"(unsafe-vector-ref"
" vec_1180"
" a1_1290))"
"(loop_1289"
"(unsafe-fx+"
" a1_1290"
" 1)"
"(unsafe-fx+"
" c1_1291"
" 1))))"
"(void)))))"
" loop_1289)"
" a1_1280"
" c1_1288)"
"(loop_1279"
" a1_1280"
" b1_1287"
" c1_1288)))))))))"
" loop_1279)"
" Amid2_1276"
" Bmid1_1277"
" Blo_1263)))))))))))))"
"(let-values(((Alo_1292) 0)"
"((Amid1_1293) n/2-_1185)"
"((Amid2_1294) n/2+_1186)"
"((Ahi_1295) n_1165)"
"((B1lo_1296) n_1165))"
"(begin"
"(copying-mergesort_1261 Amid1_1293 B1lo_1296 n/2+_1186)"
"(if(zero? n/2-_1185)"
"(void)"
"(let-values()(copying-mergesort_1261 Alo_1292 Amid2_1294 n/2-_1185)))"
"(let-values(((b2_1297) Ahi_1295))"
"((letrec-values(((loop_1298)"
"(lambda(a1_1299 b1_1300 c1_1301)"
"(let-values(((x_1302)(unsafe-vector-ref vec_1180 a1_1299))"
"((y_1303)"
"(unsafe-vector-ref vec_1180 b1_1300)))"
"(if(<?_1162(car x_1302)(car y_1303))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 x_1302)"
"(let-values(((a1_1304)(unsafe-fx+ a1_1299 1))"
"((c1_1305)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx< c1_1305 b1_1300)"
"(let-values()"
"(loop_1298 a1_1304 b1_1300 c1_1305))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 y_1303)"
"(let-values(((b1_1306)(unsafe-fx+ b1_1300 1))"
"((c1_1307)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx<= b2_1297 b1_1306)"
"((letrec-values(((loop_1308)"
"(lambda(a1_1309 c1_1310)"
"(if(unsafe-fx<"
" c1_1310"
" b1_1306)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1310"
"(unsafe-vector-ref"
" vec_1180"
" a1_1309))"
"(loop_1308"
"(unsafe-fx+ a1_1309 1)"
"(unsafe-fx+"
" c1_1310"
" 1))))"
"(void)))))"
" loop_1308)"
" a1_1299"
" c1_1307)"
"(loop_1298 a1_1299 b1_1306 c1_1307)))))))))"
" loop_1298)"
" B1lo_1296"
" Amid2_1294"
" Alo_1292))))))))"
"((letrec-values(((loop_1311)"
"(lambda(i_1312 r_1313)"
"(let-values(((i_1314)(sub1 i_1312)))"
"(if(< i_1314 0)"
" r_1313"
"(loop_1311"
" i_1314"
"(cons(cdr(vector-ref vec_1180 i_1314)) r_1313)))))))"
" loop_1311)"
" n_1165"
" '()))))"
"(if(< n_1165 2)"
"(let-values() lst_1161)"
"(if((letrec-values(((loop_1315)"
"(lambda(last_1316 next_1317)"
"(let-values(((or-part_1318)(null? next_1317)))"
"(if or-part_1318"
" or-part_1318"
"(if(not"
"(<?_1162(getkey_1163(car next_1317))(getkey_1163 last_1316)))"
"(loop_1315(car next_1317)(cdr next_1317))"
" #f))))))"
" loop_1315)"
"(car lst_1161)"
"(cdr lst_1161))"
"(let-values() lst_1161)"
"(if(<= n_1165 3)"
"(let-values()"
"(if(= n_1165 2)"
"(list(cadr lst_1161)(car lst_1161))"
"(let-values(((a_1319)(car lst_1161))"
"((b_1320)(cadr lst_1161))"
"((c_1321)(caddr lst_1161)))"
"(let-values(((a_1322)(car lst_1161))"
"((b_1323)(cadr lst_1161))"
"((c_1324)(caddr lst_1161)))"
"(if(<?_1162(getkey_1163 b_1323)(getkey_1163 a_1322))"
"(if(<?_1162(getkey_1163 c_1324)(getkey_1163 b_1323))"
"(list c_1324 b_1323 a_1322)"
"(if(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(list b_1323 c_1324 a_1322)"
"(list b_1323 a_1322 c_1324)))"
"(if(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(list c_1324 a_1322 b_1323)"
"(list a_1322 c_1324 b_1323)))))))"
"(let-values()"
"(let-values(((vec_1325)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1326)"
"(lambda(i_1327 lst_1328)"
"(if(pair? lst_1328)"
"(let-values()"
"(begin"
"(vector-set! vec_1325 i_1327(car lst_1328))"
"(loop_1326(add1 i_1327)(cdr lst_1328))))"
"(void)))))"
" loop_1326)"
" 0"
" lst_1161)"
"(if getkey_1163"
"(let-values()"
"(let-values(((n/2-_1329)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1330)(unsafe-fx- n_1165 n/2-_1329)))"
"(letrec-values(((copying-mergesort_1405)"
"(lambda(Alo_1406 Blo_1407 n_1408)"
"(if(unsafe-fx= n_1408 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406)))"
"(if(unsafe-fx= n_1408 2)"
"(let-values()"
"(let-values(((x_1409)"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((y_1410)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1406 1))))"
"(if(<?_1162"
"(getkey_1163 y_1410)"
"(getkey_1163 x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 y_1410)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 x_1409)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" y_1410)))))"
"(if(unsafe-fx< n_1408 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((letrec-values(((iloop_1411)"
"(lambda(i_1412)"
"(if(unsafe-fx< i_1412 n_1408)"
"(let-values()"
"(let-values(((ref-i_1413)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1406"
" i_1412))))"
"((letrec-values(((jloop_1414)"
"(lambda(j_1415)"
"(let-values(((ref-j-1_1416)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1415"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1407"
" j_1415)"
"(<?_1162"
"(getkey_1163"
" ref-i_1413)"
"(getkey_1163"
" ref-j-1_1416))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-j-1_1416)"
"(jloop_1414"
"(unsafe-fx-"
" j_1415"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-i_1413)"
"(iloop_1411"
"(unsafe-fx+"
" i_1412"
" 1))))))))"
" jloop_1414)"
"(unsafe-fx+"
" Blo_1407"
" i_1412))))"
"(void)))))"
" iloop_1411)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1417)"
"(unsafe-fxrshift n_1408 1)))"
"(let-values(((n/2+_1418)"
"(unsafe-fx- n_1408 n/2-_1417)))"
"(let-values(((Amid1_1419)"
"(unsafe-fx+ Alo_1406 n/2-_1417))"
"((Amid2_1420)"
"(unsafe-fx+ Alo_1406 n/2+_1418))"
"((Bmid1_1421)"
"(unsafe-fx+ Blo_1407 n/2-_1417)))"
"(begin"
"(copying-mergesort_1405"
" Amid1_1419"
" Bmid1_1421"
" n/2+_1418)"
"(copying-mergesort_1405"
" Alo_1406"
" Amid2_1420"
" n/2-_1417)"
"(let-values(((b2_1422)"
"(unsafe-fx+ Blo_1407 n_1408)))"
"((letrec-values(((loop_1423)"
"(lambda(a1_1424"
" b1_1425"
" c1_1426)"
"(let-values(((x_1427)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1424))"
"((y_1428)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1425)))"
"(if(not"
"(<?_1162"
"(getkey_1163"
" y_1428)"
"(getkey_1163"
" x_1427)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" x_1427)"
"(let-values(((a1_1429)"
"(unsafe-fx+"
" a1_1424"
" 1))"
"((c1_1430)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<"
" c1_1430"
" b1_1425)"
"(let-values()"
"(loop_1423"
" a1_1429"
" b1_1425"
" c1_1430))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" y_1428)"
"(let-values(((b1_1431)"
"(unsafe-fx+"
" b1_1425"
" 1))"
"((c1_1432)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<="
" b2_1422"
" b1_1431)"
"((letrec-values(((loop_1433)"
"(lambda(a1_1434"
" c1_1435)"
"(if(unsafe-fx<"
" c1_1435"
" b1_1431)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1435"
"(unsafe-vector-ref"
" vec_1325"
" a1_1434))"
"(loop_1433"
"(unsafe-fx+"
" a1_1434"
" 1)"
"(unsafe-fx+"
" c1_1435"
" 1))))"
"(void)))))"
" loop_1433)"
" a1_1424"
" c1_1432)"
"(loop_1423"
" a1_1424"
" b1_1431"
" c1_1432)))))))))"
" loop_1423)"
" Amid2_1420"
" Bmid1_1421"
" Blo_1407)))))))))))))"
"(let-values(((Alo_1436) 0)"
"((Amid1_1437) n/2-_1329)"
"((Amid2_1438) n/2+_1330)"
"((Ahi_1439) n_1165)"
"((B1lo_1440) n_1165))"
"(begin"
"(copying-mergesort_1405 Amid1_1437 B1lo_1440 n/2+_1330)"
"(if(zero? n/2-_1329)"
"(void)"
"(let-values()(copying-mergesort_1405 Alo_1436 Amid2_1438 n/2-_1329)))"
"(let-values(((b2_1441) Ahi_1439))"
"((letrec-values(((loop_1442)"
"(lambda(a1_1443 b1_1444 c1_1445)"
"(let-values(((x_1446)"
"(unsafe-vector-ref vec_1325 a1_1443))"
"((y_1447)"
"(unsafe-vector-ref vec_1325 b1_1444)))"
"(if(<?_1162"
"(getkey_1163 x_1446)"
"(getkey_1163 y_1447))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 x_1446)"
"(let-values(((a1_1448)"
"(unsafe-fx+ a1_1443 1))"
"((c1_1449)"
"(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx< c1_1449 b1_1444)"
"(let-values()"
"(loop_1442 a1_1448 b1_1444 c1_1449))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 y_1447)"
"(let-values(((b1_1450)"
"(unsafe-fx+ b1_1444 1))"
"((c1_1451)"
"(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx<= b2_1441 b1_1450)"
"((letrec-values(((loop_1452)"
"(lambda(a1_1453"
" c1_1454)"
"(if(unsafe-fx<"
" c1_1454"
" b1_1450)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1454"
"(unsafe-vector-ref"
" vec_1325"
" a1_1453))"
"(loop_1452"
"(unsafe-fx+"
" a1_1453"
" 1)"
"(unsafe-fx+"
" c1_1454"
" 1))))"
"(void)))))"
" loop_1452)"
" a1_1443"
" c1_1451)"
"(loop_1442"
" a1_1443"
" b1_1450"
" c1_1451)))))))))"
" loop_1442)"
" B1lo_1440"
" Amid2_1438"
" Alo_1436))))))))"
"(let-values(((si_1455)(hash-ref sort-internals_29 <?_1162 #f)))"
"(if si_1455"
"(si_1455 vec_1325 n_1165)"
"(let-values()"
"(let-values(((n/2-_1456)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1457)(unsafe-fx- n_1165 n/2-_1456)))"
"(letrec-values(((copying-mergesort_1532)"
"(lambda(Alo_1533 Blo_1534 n_1535)"
"(if(unsafe-fx= n_1535 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533)))"
"(if(unsafe-fx= n_1535 2)"
"(let-values()"
"(let-values(((x_1536)"
"(unsafe-vector-ref"
" vec_1325"
" Alo_1533))"
"((y_1537)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1533 1))))"
"(if(<?_1162 y_1537 x_1536)"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 y_1537)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 x_1536)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" y_1537)))))"
"(if(unsafe-fx< n_1535 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((letrec-values(((iloop_1538)"
"(lambda(i_1539)"
"(if(unsafe-fx<"
" i_1539"
" n_1535)"
"(let-values()"
"(let-values(((ref-i_1540)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1533"
" i_1539))))"
"((letrec-values(((jloop_1541)"
"(lambda(j_1542)"
"(let-values(((ref-j-1_1543)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1542"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1534"
" j_1542)"
"(<?_1162"
" ref-i_1540"
" ref-j-1_1543)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-j-1_1543)"
"(jloop_1541"
"(unsafe-fx-"
" j_1542"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-i_1540)"
"(iloop_1538"
"(unsafe-fx+"
" i_1539"
" 1))))))))"
" jloop_1541)"
"(unsafe-fx+"
" Blo_1534"
" i_1539))))"
"(void)))))"
" iloop_1538)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1544)"
"(unsafe-fxrshift n_1535 1)))"
"(let-values(((n/2+_1545)"
"(unsafe-fx- n_1535 n/2-_1544)))"
"(let-values(((Amid1_1546)"
"(unsafe-fx+"
" Alo_1533"
" n/2-_1544))"
"((Amid2_1547)"
"(unsafe-fx+"
" Alo_1533"
" n/2+_1545))"
"((Bmid1_1548)"
"(unsafe-fx+"
" Blo_1534"
" n/2-_1544)))"
"(begin"
"(copying-mergesort_1532"
" Amid1_1546"
" Bmid1_1548"
" n/2+_1545)"
"(copying-mergesort_1532"
" Alo_1533"
" Amid2_1547"
" n/2-_1544)"
"(let-values(((b2_1549)"
"(unsafe-fx+"
" Blo_1534"
" n_1535)))"
"((letrec-values(((loop_1550)"
"(lambda(a1_1551"
" b1_1552"
" c1_1553)"
"(let-values(((x_1554)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1551))"
"((y_1555)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1552)))"
"(if(not"
"(<?_1162"
" y_1555"
" x_1554))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" x_1554)"
"(let-values(((a1_1556)"
"(unsafe-fx+"
" a1_1551"
" 1))"
"((c1_1557)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<"
" c1_1557"
" b1_1552)"
"(let-values()"
"(loop_1550"
" a1_1556"
" b1_1552"
" c1_1557))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" y_1555)"
"(let-values(((b1_1558)"
"(unsafe-fx+"
" b1_1552"
" 1))"
"((c1_1559)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<="
" b2_1549"
" b1_1558)"
"((letrec-values(((loop_1560)"
"(lambda(a1_1561"
" c1_1562)"
"(if(unsafe-fx<"
" c1_1562"
" b1_1558)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1562"
"(unsafe-vector-ref"
" vec_1325"
" a1_1561))"
"(loop_1560"
"(unsafe-fx+"
" a1_1561"
" 1)"
"(unsafe-fx+"
" c1_1562"
" 1))))"
"(void)))))"
" loop_1560)"
" a1_1551"
" c1_1559)"
"(loop_1550"
" a1_1551"
" b1_1558"
" c1_1559)))))))))"
" loop_1550)"
" Amid2_1547"
" Bmid1_1548"
" Blo_1534)))))))))))))"
"(let-values(((Alo_1563) 0)"
"((Amid1_1564) n/2-_1456)"
"((Amid2_1565) n/2+_1457)"
"((Ahi_1566) n_1165)"
"((B1lo_1567) n_1165))"
"(begin"
"(copying-mergesort_1532 Amid1_1564 B1lo_1567 n/2+_1457)"
"(if(zero? n/2-_1456)"
"(void)"
"(let-values()"
"(copying-mergesort_1532 Alo_1563 Amid2_1565 n/2-_1456)))"
"(let-values(((b2_1568) Ahi_1566))"
"((letrec-values(((loop_1569)"
"(lambda(a1_1570 b1_1571 c1_1572)"
"(let-values(((x_1573)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1570))"
"((y_1574)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1571)))"
"(if(<?_1162 x_1573 y_1574)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1572"
" x_1573)"
"(let-values(((a1_1575)"
"(unsafe-fx+ a1_1570 1))"
"((c1_1576)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx< c1_1576 b1_1571)"
"(let-values()"
"(loop_1569 a1_1575 b1_1571 c1_1576))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1572"
" y_1574)"
"(let-values(((b1_1577)"
"(unsafe-fx+ b1_1571 1))"
"((c1_1578)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx<= b2_1568 b1_1577)"
"((letrec-values(((loop_1579)"
"(lambda(a1_1580"
" c1_1581)"
"(if(unsafe-fx<"
" c1_1581"
" b1_1577)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1581"
"(unsafe-vector-ref"
" vec_1325"
" a1_1580))"
"(loop_1579"
"(unsafe-fx+"
" a1_1580"
" 1)"
"(unsafe-fx+"
" c1_1581"
" 1))))"
"(void)))))"
" loop_1579)"
" a1_1570"
" c1_1578)"
"(loop_1569"
" a1_1570"
" b1_1577"
" c1_1578)))))))))"
" loop_1569)"
" B1lo_1567"
" Amid2_1565"
" Alo_1563)))))))))))"
"((letrec-values(((loop_1582)"
"(lambda(i_1583 r_1584)"
"(let-values(((i_1585)(sub1 i_1583)))"
"(if(< i_1585 0)"
" r_1584"
"(loop_1582"
" i_1585"
"(cons(vector-ref vec_1325 i_1585) r_1584)))))))"
" loop_1582)"
" n_1165"
" '())))))))))))"
"(sort lst_1161 <?_1162))))))))"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(void)"
"(void)"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values(((lst_7) lst5_5))"
"(let-values(((less?_8) less?6_6))"
"(let-values(((getkey_9)(if key3_4 key1_3 #f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
"(define-values"
"(unpack8.1$2)"
"(lambda(given-kws_11 given-args_12 lst5_13 less?6_14)"
"(let-values(((cache-keys?4_15)(if(pair? given-kws_11)(eq? '#:cache-keys?(car given-kws_11)) #f)))"
"(let-values(((cache-keys?2_16)(if cache-keys?4_15(car given-args_12)(void)))"
"((given-kws_17)(if cache-keys?4_15(cdr given-kws_11) given-kws_11))"
"((given-args_18)(if cache-keys?4_15(cdr given-args_12) given-args_12)))"
"(let-values(((key3_19)(pair? given-kws_17)))"
"(let-values(((key1_20)(if key3_19(car given-args_18)(void))))"
"(sort7.1 cache-keys?2_16 cache-keys?4_15 key1_20 key3_19 lst5_13 less?6_14)))))))"
"(define-values"
"(sort9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_21 given-argc_22)"
"(if(= given-argc_22 4)"
"(let-values(((l1_23) given-kws_21))"
"(let-values(((l1_24)(if(null? l1_23) l1_23(if(eq?(car l1_23) '#:cache-keys?)(cdr l1_23) l1_23))))"
"(let-values(((l1_25) l1_24))"
"(let-values(((l1_26)(if(null? l1_25) l1_25(if(eq?(car l1_25) '#:key)(cdr l1_25) l1_25))))"
"(null? l1_26)))))"
" #f))"
"(case-lambda((given-kws_27 given-args_28 lst_29 less?_30)(unpack8.1$2 given-kws_27 given-args_28 lst_29 less?_30)))"
" null"
" '(#:cache-keys? #:key)"
"(let-values(((sort_31)(case-lambda((lst_32 less?_33)(unpack8.1$2 null null lst_32 less?_33))))) sort_31)))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 \"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
"  (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 \"non-pair found in list: \" a_79 \" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 1) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) #f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" #f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100)))))"
"(void)"
"(void)"
"(define-values"
"(make-regexp-tweaker)"
"(lambda(tweaker_61)"
"(let-values(((t_62)(make-hash)))"
"(lambda(rx_63 n_64)"
"(let-values(((run-tweak_110)"
"(lambda()"
"(if(pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_111)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_112)(regexp? tweaked_111)))"
"(if or-part_112 or-part_112(byte-regexp? tweaked_111)))"
" tweaked_111"
"(pregexp(if(bytes? tweaked_111)(bytes->string/utf-8 tweaked_111) tweaked_111)))))"
"(if(regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_113)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_114)(regexp? tweaked_113)))"
"(if or-part_114 or-part_114(byte-regexp? tweaked_113)))"
" tweaked_113"
"(regexp(if(bytes? tweaked_113)(bytes->string/utf-8 tweaked_113) tweaked_113)))))"
"(if(byte-pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_115)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_116)(regexp? tweaked_115)))"
"(if or-part_116 or-part_116(byte-regexp? tweaked_115)))"
" tweaked_115"
"(byte-pregexp"
"(if(bytes? tweaked_115) tweaked_115(string->bytes/utf-8 tweaked_115))))))"
"(if(byte-regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_117)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_118)(regexp? tweaked_117)))"
"(if or-part_118 or-part_118(byte-regexp? tweaked_117)))"
" tweaked_117"
"(byte-regexp"
"(if(bytes? tweaked_117) tweaked_117(string->bytes/utf-8 tweaked_117))))))"
"(if(string? rx_63)"
"(let-values()"
"(let-values(((tweaked_119)(tweaker_61((lambda(x_120) x_120) rx_63) n_64)))"
"(if(let-values(((or-part_121)(regexp? tweaked_119)))"
"(if or-part_121 or-part_121(byte-regexp? tweaked_119)))"
" tweaked_119"
"(regexp"
"(if(bytes? tweaked_119)(bytes->string/utf-8 tweaked_119) tweaked_119)))))"
"(if(bytes? rx_63)"
"(let-values()"
"(let-values(((tweaked_122)(tweaker_61((lambda(x_123) x_123) rx_63) n_64)))"
"(if(let-values(((or-part_124)(regexp? tweaked_122)))"
"(if or-part_124 or-part_124(byte-regexp? tweaked_122)))"
" tweaked_122"
"(byte-regexp"
"(if(bytes? tweaked_122) tweaked_122(string->bytes/utf-8 tweaked_122))))))"
"(let-values()"
"(raise-argument-error"
" 'regexp-tweaker"
"                                       \"(or/c regexp? byte-regexp? string? bytes?)\""
" rx_63)))))))))))"
"(let-values(((key_125)(cons n_64 rx_63)))"
"(let-values(((or-part_126)(hash-ref t_62 key_125 #f)))"
"(if or-part_126"
" or-part_126"
"(let-values(((rx*_127)(run-tweak_110)))(begin(hash-set! t_62 key_125 rx*_127) rx*_127))))))))))"
"(define-values(bstring-length)(lambda(s_171)(if(bytes? s_171)(bytes-length s_171)(string-length s_171))))"
"(define-values"
"(no-empty-edge-matches)"
"(make-regexp-tweaker"
"(lambda(rx_172 n_173)"
"(if(bytes? rx_172)"
"       (bytes-append #\"(?:\" rx_172 #\")(?<=\" (make-bytes n_173 (char->integer '#\\.)) #\")\")"
"       (format \"(?:~a)(?<=~a)\" rx_172 (make-bytes n_173 (char->integer '#\\.)))))))"
"(define-values"
"(regexp-match-positions*33.1)"
"(lambda(match-select23_174"
" match-select24_175"
" pattern31_176"
" string32_177"
" start25_178"
" end26_179"
" ipre27_180"
" start28_181"
" end29_182"
" ipre30_183)"
"(let-values(((pattern_184) pattern31_176))"
"(let-values(((string_185) string32_177))"
"(let-values(((start_186)(if start28_181 start25_178 0)))"
"(let-values(((end_187)(if end29_182 end26_179 #f)))"
"            (let-values (((ipre_188) (if ipre30_183 ipre27_180 #\"\")))"
"(let-values(((match-select_189)(if match-select24_175 match-select23_174 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_189)"
"(void)"
"                      (let-values () (raise-argument-error 'regexp-match-positions* \"procedure?\" match-select_189)))"
"(if(eq? match-select_189 car)"
"(let-values(((string_190)"
"(if(path? string_185)"
"(if(let-values(((or-part_191)(string? pattern_184)))"
"(if or-part_191 or-part_191(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_192)"
"(if(string? string_190)"
"(let-values()(string-length string_190))"
"(if(bytes? string_190)"
"(let-values()(bytes-length string_190))"
"(let-values() #f)))))"
"(let-values(((orig-rx_193)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_194)(regexp-max-lookbehind orig-rx_193)))"
"(begin"
"(if(let-values(((or-part_195) len_192))"
"(if or-part_195 or-part_195(input-port? string_190)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c string? bytes? path? input-port?)\""
" string_190)))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_196)(not end_187)))"
"(if or-part_196"
" or-part_196"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_197)(input-port? string_190)))"
"(if or-part_197 or-part_197(if len_192(<= start_186 len_192) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_192)"
" start_186)))"
"(if(let-values(((or-part_198)(not end_187)))"
"(if or-part_198"
" or-part_198"
"(if(<= start_186 end_187)"
"(let-values(((or-part_199)(input-port? string_190)))"
"(if or-part_199 or-part_199(if len_192(<= end_187 len_192) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_192)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_200)"
"(lambda(acc_201 start_202 end_203 ipre_204 0-ok?_205)"
"(let-values(((rx_206)"
"(if 0-ok?_205"
" orig-rx_193"
"(no-empty-edge-matches"
" orig-rx_193"
"(add1(bytes-length ipre_204))))))"
"(let-values(((m_229 ipre_230)"
"(regexp-match-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" #f"
" ipre_204"
" max-lookbehind_194)))"
"(if(not m_229)"
"((lambda(acc_231 start_232 end_233) acc_231)"
" acc_201"
" start_202"
" end_203)"
"(let-values(((mstart_234)(caar m_229)))"
"(let-values(((mend_235)(cdar m_229)))"
"(let-values(((0-ok?_236)(not(= mstart_234 mend_235))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mstart)(#%app caar ms))"
"((mend)(#%app cdar ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app + mend(#%app cdr p))))"
"(#%app"
" loop"
" '()"
" '0"
"(if end(#%app - end mend) '#f)))"
"(#%app cons(#%app car ms) acc))))"
"(input-port? string_190)"
" #f)"
"((lambda(loop_245 acc_246 start_247 end_248 ms_249)"
"(let-values(((mstart_250)(caar ms_249))"
"((mend_251)(cdar ms_249)))"
"(append"
"(map2"
"(lambda(p_252)"
"(cons"
"(+ mend_251(car p_252))"
"(+ mend_251(cdr p_252))))"
"(loop_245"
" '()"
" 0"
"(if end_248(- end_248 mend_251) #f)))"
"(cons(car ms_249) acc_246))))"
"(lambda(acc_253 new-start_254 new-end_255)"
"(loop_200"
" acc_253"
" new-start_254"
" new-end_255"
" ipre_230"
" 0-ok?_236))"
" acc_201"
" start_202"
" end_203"
" m_229)"
"(loop_200"
"((lambda(start_256 ms_257 acc_258)"
"(cons(car ms_257) acc_258))"
" start_202"
" m_229"
" acc_201)"
" mend_235"
" end_203"
" ipre_230"
" 0-ok?_236)))))))))))"
" loop_200)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t)))))))"
"(let-values(((string_259)"
"(if(path? string_185)"
"(if(let-values(((or-part_260)(string? pattern_184)))"
"(if or-part_260 or-part_260(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_261)"
"(if(string? string_259)"
"(let-values()(string-length string_259))"
"(if(bytes? string_259)"
"(let-values()(bytes-length string_259))"
"(let-values() #f)))))"
"(let-values(((orig-rx_262)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_263)(regexp-max-lookbehind orig-rx_262)))"
"(begin"
"(if(let-values(((or-part_264) len_261))"
"(if or-part_264 or-part_264(input-port? string_259)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c string? bytes? path? input-port?)\""
" string_259)))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_265)(not end_187)))"
"(if or-part_265"
" or-part_265"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_266)(input-port? string_259)))"
"(if or-part_266 or-part_266(if len_261(<= start_186 len_261) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_261)"
" start_186)))"
"(if(let-values(((or-part_267)(not end_187)))"
"(if or-part_267"
" or-part_267"
"(if(<= start_186 end_187)"
"(let-values(((or-part_268)(input-port? string_259)))"
"(if or-part_268 or-part_268(if len_261(<= end_187 len_261) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_261)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_269)"
"(lambda(acc_270 start_271 end_272 ipre_273 0-ok?_274)"
"(let-values(((rx_275)"
"(if 0-ok?_274"
" orig-rx_262"
"(no-empty-edge-matches"
" orig-rx_262"
"(add1(bytes-length ipre_273))))))"
"(let-values(((m_298 ipre_299)"
"(regexp-match-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" #f"
" ipre_273"
" max-lookbehind_263)))"
"(if(not m_298)"
"((lambda(acc_300 start_301 end_302) acc_300)"
" acc_270"
" start_271"
" end_272)"
"(let-values(((mstart_303)(caar m_298)))"
"(let-values(((mend_304)(cdar m_298)))"
"(let-values(((0-ok?_305)(not(= mstart_303 mend_304))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mend)(#%app cdar ms)))"
"(let-values(((rest)"
"(#%app"
" loop"
" '()"
" '0"
"(if end"
"(#%app - end mend)"
" '#f))))"
"(let-values(((s)"
"(#%app match-select ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(if(let-values(((or-part)"
"(if(#%app"
" pair?"
" s)"
"(#%app"
" exact-integer?"
"(#%app car s))"
" '#f)))"
"(if or-part"
" or-part"
"(#%app not s)))"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app + mend(#%app cdr p))))"
"(lambda(ps)"
"(#%app"
" map"
"(lambda(p)"
"(if p"
"(#%app"
" cons"
"(#%app"
" +"
" mend"
"(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p)))"
" '#f))"
" ps)))"
" rest)"
"(#%app cons s acc))))))"
"(input-port? string_259)"
" #f)"
"((lambda(loop_318 acc_319 start_320 end_321 ms_322)"
"(let-values(((mend_323)(cdar ms_322)))"
"(let-values(((rest_324)"
"(loop_318"
" '()"
" 0"
"(if end_321"
"(- end_321 mend_323)"
" #f))))"
"(let-values(((s_325)"
"(match-select_189 ms_322)))"
"(append"
"(map2"
"(if(let-values(((or-part_326)"
"(if(pair? s_325)"
"(exact-integer?"
"(car s_325))"
" #f)))"
"(if or-part_326"
" or-part_326"
"(not s_325)))"
"(lambda(p_327)"
"(cons"
"(+ mend_323(car p_327))"
"(+ mend_323(cdr p_327))))"
"(lambda(ps_328)"
"(map2"
"(lambda(p_329)"
"(if p_329"
"(cons"
"(+ mend_323(car p_329))"
"(+ mend_323(cdr p_329)))"
" #f))"
" ps_328)))"
" rest_324)"
"(cons s_325 acc_319))))))"
"(lambda(acc_330 new-start_331 new-end_332)"
"(loop_269"
" acc_330"
" new-start_331"
" new-end_332"
" ipre_299"
" 0-ok?_305))"
" acc_270"
" start_271"
" end_272"
" m_298)"
"(loop_269"
"((lambda(start_333 ms_334 acc_335)"
"(cons(match-select_189 ms_334) acc_335))"
" start_271"
" m_298"
" acc_270)"
" mend_304"
" end_272"
" ipre_299"
" 0-ok?_305)))))))))))"
" loop_269)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t))))))))))))))))))"
"(define-values"
"(unpack34.1$1)"
"(lambda(given-kws_336"
" given-args_337"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)"
"(let-values(((match-select24_346)(pair? given-kws_336)))"
"(let-values(((match-select23_347)(if match-select24_346(car given-args_337)(void))))"
"(regexp-match-positions*33.1"
" match-select23_347"
" match-select24_346"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)))))"
"(define-values"
"(regexp-match-peek-positions*46.1)"
"(lambda(match-select36_389"
" match-select37_390"
" pattern44_391"
" string45_392"
" start38_393"
" end39_394"
" ipre40_395"
" start41_396"
" end42_397"
" ipre43_398)"
"(let-values(((pattern_399) pattern44_391))"
"(let-values(((string_400) string45_392))"
"(let-values(((start_401)(if start41_396 start38_393 0)))"
"(let-values(((end_402)(if end42_397 end39_394 #f)))"
"            (let-values (((ipre_403) (if ipre43_398 ipre40_395 #\"\")))"
"(let-values(((match-select_404)(if match-select37_390 match-select36_389 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_404)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'regexp-match-peek-positions* \"procedure?\" match-select_404)))"
"(if(eq? match-select_404 car)"
"(let-values(((string_405)"
"(if(path? string_400)"
"(if(let-values(((or-part_406)(string? pattern_399)))"
"(if or-part_406 or-part_406(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_407)"
"(if(string? string_405)"
"(let-values()(string-length string_405))"
"(if(bytes? string_405)"
"(let-values()(bytes-length string_405))"
"(let-values() #f)))))"
"(let-values(((orig-rx_408)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_409)(regexp-max-lookbehind orig-rx_408)))"
"(begin"
"(if(input-port? string_405)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_405)))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_411)(not end_402)))"
"(if or-part_411"
" or-part_411"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_412)(input-port? string_405)))"
"(if or-part_412 or-part_412(if len_407(<= start_401 len_407) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_407)"
" start_401)))"
"(if(let-values(((or-part_413)(not end_402)))"
"(if or-part_413"
" or-part_413"
"(if(<= start_401 end_402)"
"(let-values(((or-part_414)(input-port? string_405)))"
"(if or-part_414 or-part_414(if len_407(<= end_402 len_407) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_407)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_415)"
"(lambda(acc_416 start_417 end_418 ipre_419 0-ok?_420)"
"(let-values(((rx_421)"
"(if 0-ok?_420"
" orig-rx_408"
"(no-empty-edge-matches"
" orig-rx_408"
"(add1(bytes-length ipre_419))))))"
"(let-values(((m_444 ipre_445)"
"(regexp-match-peek-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" #f"
" ipre_419"
" max-lookbehind_409)))"
"(if(not m_444)"
"((lambda(acc_446 start_447 end_448) acc_446)"
" acc_416"
" start_417"
" end_418)"
"(let-values(((mstart_449)(caar m_444)))"
"(let-values(((mend_450)(cdar m_444)))"
"(let-values(((0-ok?_451)(not(= mstart_449 mend_450))))"
"(loop_415"
"((lambda(start_455 ms_456 acc_457)"
"(cons(car ms_456) acc_457))"
" start_417"
" m_444"
" acc_416)"
" mend_450"
" end_418"
" ipre_445"
" 0-ok?_451))))))))))"
" loop_415)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t)))))))"
"(let-values(((string_458)"
"(if(path? string_400)"
"(if(let-values(((or-part_459)(string? pattern_399)))"
"(if or-part_459 or-part_459(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_460)"
"(if(string? string_458)"
"(let-values()(string-length string_458))"
"(if(bytes? string_458)"
"(let-values()(bytes-length string_458))"
"(let-values() #f)))))"
"(let-values(((orig-rx_461)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_462)(regexp-max-lookbehind orig-rx_461)))"
"(begin"
"(if(input-port? string_458)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_458)))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_464)(not end_402)))"
"(if or-part_464"
" or-part_464"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_465)(input-port? string_458)))"
"(if or-part_465 or-part_465(if len_460(<= start_401 len_460) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_460)"
" start_401)))"
"(if(let-values(((or-part_466)(not end_402)))"
"(if or-part_466"
" or-part_466"
"(if(<= start_401 end_402)"
"(let-values(((or-part_467)(input-port? string_458)))"
"(if or-part_467 or-part_467(if len_460(<= end_402 len_460) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_460)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_468)"
"(lambda(acc_469 start_470 end_471 ipre_472 0-ok?_473)"
"(let-values(((rx_474)"
"(if 0-ok?_473"
" orig-rx_461"
"(no-empty-edge-matches"
" orig-rx_461"
"(add1(bytes-length ipre_472))))))"
"(let-values(((m_497 ipre_498)"
"(regexp-match-peek-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" #f"
" ipre_472"
" max-lookbehind_462)))"
"(if(not m_497)"
"((lambda(acc_499 start_500 end_501) acc_499)"
" acc_469"
" start_470"
" end_471)"
"(let-values(((mstart_502)(caar m_497)))"
"(let-values(((mend_503)(cdar m_497)))"
"(let-values(((0-ok?_504)(not(= mstart_502 mend_503))))"
"(loop_468"
"((lambda(start_508 ms_509 acc_510)"
"(cons(match-select_404 ms_509) acc_510))"
" start_470"
" m_497"
" acc_469)"
" mend_503"
" end_471"
" ipre_498"
" 0-ok?_504))))))))))"
" loop_468)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t))))))))))))))))))"
"(define-values"
"(unpack47.1)"
"(lambda(given-kws_511"
" given-args_512"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)"
"(let-values(((match-select37_521)(pair? given-kws_511)))"
"(let-values(((match-select36_522)(if match-select37_521(car given-args_512)(void))))"
"(regexp-match-peek-positions*46.1"
" match-select36_522"
" match-select37_521"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)))))"
"(define-values"
"(get-buf+sub)"
"(lambda(string_564 pattern_565)"
"(let-values(((buf_566)"
"(if(if(string? string_564)"
"(let-values(((or-part_567)(byte-regexp? pattern_565)))"
"(if or-part_567 or-part_567(bytes? pattern_565)))"
" #f)"
"(string->bytes/utf-8 string_564(char->integer '#\\?))"
" string_564)))"
"(values"
" buf_566"
"(if(let-values(((or-part_568)(bytes? buf_566)))"
"(if or-part_568"
" or-part_568"
"(if(path? string_564)"
"(let-values(((or-part_569)(bytes? pattern_565)))"
"(if or-part_569 or-part_569(byte-regexp? pattern_565)))"
" #f)))"
" subbytes"
" substring)))))"
"(define-values"
"(regexp-split)"
"(let-values(((regexp-split57_570)"
"(lambda(pattern55_571 string56_572 start49_573 end50_574 ipre51_575 start52_576 end53_577 ipre54_578)"
"(let-values(((pattern_579) pattern55_571))"
"(let-values(((string_580) string56_572))"
"(let-values(((start_581)(if start52_576 start49_573 0)))"
"(let-values(((end_582)(if end53_577 end50_574 #f)))"
"                          (let-values (((ipre_583) (if ipre54_578 ipre51_575 #\"\")))"
"(let-values()"
"(let-values(((buf_584 sub_585)(get-buf+sub string_580 pattern_579)))"
"(let-values(((buf_586)"
"(if(path? buf_584)"
"(if(let-values(((or-part_587)(string? pattern_579)))"
"(if or-part_587 or-part_587(regexp? pattern_579)))"
"(path->string buf_584)"
"(path->bytes buf_584))"
" buf_584)))"
"(let-values(((len_588)"
"(if(string? buf_586)"
"(let-values()(string-length buf_586))"
"(if(bytes? buf_586)"
"(let-values()(bytes-length buf_586))"
"(let-values() #f)))))"
"(let-values(((orig-rx_589)"
"(if(bytes? pattern_579)"
"(let-values()(byte-regexp pattern_579))"
"(if(string? pattern_579)"
"(let-values()(regexp pattern_579))"
"(if(regexp? pattern_579)"
"(let-values() pattern_579)"
"(if(byte-regexp? pattern_579)"
"(let-values() pattern_579)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_579))))))))"
"(let-values(((max-lookbehind_590)(regexp-max-lookbehind orig-rx_589)))"
"(begin"
"(if(let-values(((or-part_591) len_588))"
"(if or-part_591 or-part_591(input-port? buf_586)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"(or/c string? bytes? path? input-port?)\""
" buf_586)))"
"(if(if(number? start_581)"
"(if(exact? start_581)(if(integer? start_581)(>= start_581 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"exact-nonnegative-integer?\""
" start_581)))"
"(if(let-values(((or-part_592)(not end_582)))"
"(if or-part_592"
" or-part_592"
"(if(number? end_582)"
"(if(exact? end_582)(if(integer? end_582)(>= end_582 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_582)))"
"(if(bytes? ipre_583)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-split \"bytes?\" ipre_583)))"
"(if(let-values(((or-part_593)(input-port? buf_586)))"
"(if or-part_593 or-part_593(if len_588(<= start_581 len_588) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"starting offset index out of range [0,~a]: \" len_588)"
" start_581)))"
"(if(let-values(((or-part_594)(not end_582)))"
"(if or-part_594"
" or-part_594"
"(if(<= start_581 end_582)"
"(let-values(((or-part_595)(input-port? buf_586)))"
"(if or-part_595 or-part_595(if len_588(<= end_582 len_588) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_581 len_588)"
" end_582)))"
"(reverse"
"((letrec-values(((loop_596)"
"(lambda(acc_597 start_598 end_599 ipre_600 0-ok?_601)"
"(let-values(((rx_602)"
"(if 0-ok?_601"
" orig-rx_589"
"(no-empty-edge-matches"
" orig-rx_589"
"(add1(bytes-length ipre_600))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons leftovers acc))"
"(input-port? buf_586)"
" #f)"
"(let-values(((__606)"
"(if(positive? start_598)"
"(let-values()"
"(let-values(((s_607)"
"(make-bytes 4096)))"
"((letrec-values(((loop_608)"
"(lambda(n_609)"
"(if(="
" n_609"
" start_598)"
"(void)"
"(let-values()"
"(let-values(((m_610)"
"(read-bytes-avail!"
" s_607"
" buf_586"
" 0"
"(min"
"(-"
" start_598"
" n_609)"
" 4096))))"
"(if(eof-object?"
" m_610)"
"(void)"
"(let-values()"
"(loop_608"
"(+"
" n_609"
" m_610))))))))))"
" loop_608)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_611) #f))"
"(let-values(((spitout_612)(open-output-bytes)))"
"(let-values(((end_619)"
"(if end_599"
"(- end_599 start_598)"
" #f)))"
"(let-values(((ms_620 ipre_621)"
"(regexp-match/end"
" rx_602"
" buf_586"
" 0"
" end_619"
" spitout_612"
" ipre_600"
" max-lookbehind_590)))"
"(let-values(((m_622)"
"(if ms_620(car ms_620) #f)))"
"(let-values(((discarded/leftovers_623)"
"(get-output-bytes"
" spitout_612)))"
"(let-values(((skipped_624)"
"(bstring-length"
" discarded/leftovers_623)))"
"(let-values(((got_625)"
"(if m_622"
"(bstring-length"
" m_622)"
" #f)))"
"(let-values(((end_626)"
"(if end_619"
"(if m_622"
"(-"
" end_619"
" skipped_624"
" got_625)"
" #f)"
" #f)))"
"(if m_622"
"(let-values(((0-ok?_627)"
"(not"
"(zero?"
" got_625))))"
"(loop_596"
"((lambda(leftovers_628"
" ms_629"
" acc_630)"
"(cons"
" leftovers_628"
" acc_630))"
" discarded/leftovers_623"
" ms_620"
" acc_597)"
" 0"
" end_626"
" ipre_621"
" 0-ok?_627))"
"((lambda(acc_631 leftover_632)"
"(if leftover_632"
"(cons"
" leftover_632"
" acc_631)"
" acc_631))"
" acc_597"
" discarded/leftovers_623))))))))))))"
"(let-values(((m_633 ipre_634)"
"(regexp-match-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" #f"
" ipre_600"
" max-lookbehind_590)))"
"(if(not m_633)"
"((lambda(acc_635 start_636 end_637)"
"(cons"
"(if end_637"
"(sub_585 buf_586 start_636 end_637)"
"(sub_585 buf_586 start_636))"
" acc_635))"
" acc_597"
" start_598"
" end_599)"
"(let-values(((mstart_638)(caar m_633)))"
"(let-values(((mend_639)(cdar m_633)))"
"(let-values(((0-ok?_640)"
"(not(= mstart_638 mend_639))))"
"(loop_596"
"((lambda(start_644 ms_645 acc_646)"
"(cons"
"(sub_585"
" buf_586"
" start_644"
"(caar ms_645))"
" acc_646))"
" start_598"
" m_633"
" acc_597)"
" mend_639"
" end_599"
" ipre_634"
" 0-ok?_640)))))))))))"
" loop_596)"
" '()"
" start_581"
" end_582"
" ipre_583"
" #t)))))))))))))))))"
"(case-lambda"
"((pattern_647 string_648)(regexp-split57_570 pattern_647 string_648 #f #f #f #f #f #f))"
"((pattern_649 string_650 start_651 end_652 ipre51_653)"
"(regexp-split57_570 pattern_649 string_650 start_651 end_652 ipre51_653 #t #t #t))"
"((pattern_654 string_655 start_656 end50_657)"
"(regexp-split57_570 pattern_654 string_655 start_656 end50_657 #f #t #t #f))"
"((pattern_658 string_659 start49_660)(regexp-split57_570 pattern_658 string_659 start49_660 #f #f #t #f #f)))))"
"(define-values"
"(regexp-match*71.1)"
"(lambda(gap-select?60_796"
" gap-select?62_797"
" match-select59_798"
" match-select61_799"
" pattern69_800"
" string70_801"
" start63_802"
" end64_803"
" ipre65_804"
" start66_805"
" end67_806"
" ipre68_807)"
"(let-values(((pattern_808) pattern69_800))"
"(let-values(((string_809) string70_801))"
"(let-values(((start_810)(if start66_805 start63_802 0)))"
"(let-values(((end_811)(if end67_806 end64_803 #f)))"
"            (let-values (((ipre_812) (if ipre68_807 ipre65_804 #\"\")))"
"(let-values(((match-select_813)(if match-select61_799 match-select59_798 car)))"
"(let-values(((gap-select_814)(if gap-select?62_797 gap-select?60_796 #f)))"
"(let-values()"
"(if(if(not match-select_813)(not gap-select_814) #f)"
"(let-values()"
"(raise"
"(exn:fail:contract"
"                          \"regexp-match*: one of `match-select' or `gap-select' must be non-#f\""
"(current-continuation-marks))))"
"(if(not match-select_813)"
"(let-values()(regexp-split pattern_808 string_809 start_810 end_811 ipre_812))"
"(if(not(procedure? match-select_813))"
"                          (let-values () (raise-argument-error 'regexp-match* \"(or/c procedure? #f)\" match-select_813))"
"(if(not(eq? match-select_813 car))"
"(let-values()"
"(let-values(((buf_815 sub_816)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_817)"
"(if(path? buf_815)"
"(if(let-values(((or-part_818)(string? pattern_808)))"
"(if or-part_818 or-part_818(regexp? pattern_808)))"
"(path->string buf_815)"
"(path->bytes buf_815))"
" buf_815)))"
"(let-values(((len_819)"
"(if(string? buf_817)"
"(let-values()(string-length buf_817))"
"(if(bytes? buf_817)"
"(let-values()(bytes-length buf_817))"
"(let-values() #f)))))"
"(let-values(((orig-rx_820)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_821)(regexp-max-lookbehind orig-rx_820)))"
"(begin"
"(if(let-values(((or-part_822) len_819))"
"(if or-part_822 or-part_822(input-port? buf_817)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"(or/c string? bytes? path? input-port?)\""
" buf_817)))"
"(if(if(number? start_810)"
"(if(exact? start_810)(if(integer? start_810)(>= start_810 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_823)(not end_811)))"
"(if or-part_823"
" or-part_823"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_824)(input-port? buf_817)))"
"(if or-part_824 or-part_824(if len_819(<= start_810 len_819) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"starting offset index out of range [0,~a]: \" len_819)"
" start_810)))"
"(if(let-values(((or-part_825)(not end_811)))"
"(if or-part_825"
" or-part_825"
"(if(<= start_810 end_811)"
"(let-values(((or-part_826)(input-port? buf_817)))"
"(if or-part_826 or-part_826(if len_819(<= end_811 len_819) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_810 len_819)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_827)"
"(lambda(acc_828 start_829 end_830 ipre_831 0-ok?_832)"
"(let-values(((rx_833)"
"(if 0-ok?_832"
" orig-rx_820"
"(no-empty-edge-matches"
" orig-rx_820"
"(add1(bytes-length ipre_831))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app match-select ms)"
"(if gap-select"
"(#%app cons leftovers acc)"
" acc)))"
"(input-port? buf_817)"
" #f)"
"(let-values(((__837)"
"(if(positive? start_829)"
"(let-values()"
"(let-values(((s_838)"
"(make-bytes 4096)))"
"((letrec-values(((loop_839)"
"(lambda(n_840)"
"(if(="
" n_840"
" start_829)"
"(void)"
"(let-values()"
"(let-values(((m_841)"
"(read-bytes-avail!"
" s_838"
" buf_817"
" 0"
"(min"
"(-"
" start_829"
" n_840)"
" 4096))))"
"(if(eof-object?"
" m_841)"
"(void)"
"(let-values()"
"(loop_839"
"(+"
" n_840"
" m_841))))))))))"
" loop_839)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_842)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_843)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_844"
" start_845"
" end_846"
" flush?_847"
" breakable?_848)"
"(let-values(((c_849)"
"(-"
" end_846"
" start_845)))"
"(begin"
"(set! discarded/leftovers_842"
"(+"
" c_849"
" discarded/leftovers_842))"
" c_849)))"
" void))))"
"(let-values(((end_850)"
"(if end_830"
"(- end_830 start_829)"
" #f)))"
"(let-values(((ms_851 ipre_852)"
"(regexp-match/end"
" rx_833"
" buf_817"
" 0"
" end_850"
" spitout_843"
" ipre_831"
" max-lookbehind_821)))"
"(let-values(((m_853)"
"(if ms_851(car ms_851) #f)))"
"(let-values(((discarded/leftovers_854)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_843)"
" discarded/leftovers_842)))"
"(let-values(((skipped_855)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_854)"
" discarded/leftovers_854)))"
"(let-values(((got_856)"
"(if m_853"
"(bstring-length"
" m_853)"
" #f)))"
"(let-values(((end_857)"
"(if end_850"
"(if m_853"
"(-"
" end_850"
" skipped_855"
" got_856)"
" #f)"
" #f)))"
"(if m_853"
"(let-values(((0-ok?_858)"
"(not"
"(zero?"
" got_856))))"
"(loop_827"
"((lambda(leftovers_859"
" ms_860"
" acc_861)"
"(cons"
"(match-select_813"
" ms_860)"
"(if gap-select_814"
"(cons"
" leftovers_859"
" acc_861)"
" acc_861)))"
" discarded/leftovers_854"
" ms_851"
" acc_828)"
" 0"
" end_857"
" ipre_852"
" 0-ok?_858))"
"((lambda(acc_862 leftover_863)"
"(if(if gap-select_814"
" leftover_863"
" #f)"
"(cons"
" leftover_863"
" acc_862)"
" acc_862))"
" acc_828"
" discarded/leftovers_854))))))))))))"
"(let-values(((m_864 ipre_865)"
"(regexp-match-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" #f"
" ipre_831"
" max-lookbehind_821)))"
"(if(not m_864)"
"((lambda(acc_866 start_867 end_868)"
"(if gap-select_814"
"(cons"
"(if end_868"
"(sub_816 buf_817 start_867 end_868)"
"(sub_816 buf_817 start_867))"
" acc_866)"
" acc_866))"
" acc_828"
" start_829"
" end_830)"
"(let-values(((mstart_869)(caar m_864)))"
"(let-values(((mend_870)(cdar m_864)))"
"(let-values(((0-ok?_871)"
"(not(= mstart_869 mend_870))))"
"(loop_827"
"((lambda(start_875 ms_876 acc_877)"
"(cons"
"(let-values(((s_878)"
"(match-select_813"
" ms_876)))"
"(if(not(pair? s_878))"
"(let-values() s_878)"
"(if(integer?(car s_878))"
"(let-values()"
"(sub_816"
" buf_817"
"(car s_878)"
"(cdr s_878)))"
"(let-values()"
"(map2"
"(lambda(m_879)"
"(if m_879"
"(sub_816"
" buf_817"
"(car m_879)"
"(cdr m_879))"
" #f))"
" s_878)))))"
"(if gap-select_814"
"(cons"
"(sub_816"
" buf_817"
" start_875"
"(caar ms_876))"
" acc_877)"
" acc_877)))"
" start_829"
" m_864"
" acc_828)"
" mend_870"
" end_830"
" ipre_865"
" 0-ok?_871)))))))))))"
" loop_827)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(if gap-select_814"
"(let-values()"
"(let-values(((buf_880 sub_881)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_882)"
"(if(path? buf_880)"
"(if(let-values(((or-part_883)(string? pattern_808)))"
"(if or-part_883 or-part_883(regexp? pattern_808)))"
"(path->string buf_880)"
"(path->bytes buf_880))"
" buf_880)))"
"(let-values(((len_884)"
"(if(string? buf_882)"
"(let-values()(string-length buf_882))"
"(if(bytes? buf_882)"
"(let-values()(bytes-length buf_882))"
"(let-values() #f)))))"
"(let-values(((orig-rx_885)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_886)(regexp-max-lookbehind orig-rx_885)))"
"(begin"
"(if(let-values(((or-part_887) len_884))"
"(if or-part_887 or-part_887(input-port? buf_882)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_882)))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_888)(not end_811)))"
"(if or-part_888"
" or-part_888"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_889)(input-port? buf_882)))"
"(if or-part_889 or-part_889(if len_884(<= start_810 len_884) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_884)"
" start_810)))"
"(if(let-values(((or-part_890)(not end_811)))"
"(if or-part_890"
" or-part_890"
"(if(<= start_810 end_811)"
"(let-values(((or-part_891)(input-port? buf_882)))"
"(if or-part_891"
" or-part_891"
"(if len_884(<= end_811 len_884) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_884)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_892)"
"(lambda(acc_893 start_894 end_895 ipre_896 0-ok?_897)"
"(let-values(((rx_898)"
"(if 0-ok?_897"
" orig-rx_885"
"(no-empty-edge-matches"
" orig-rx_885"
"(add1(bytes-length ipre_896))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app car ms)"
"(#%app cons leftovers acc)))"
"(input-port? buf_882)"
" #f)"
"(let-values(((__902)"
"(if(positive? start_894)"
"(let-values()"
"(let-values(((s_903)"
"(make-bytes 4096)))"
"((letrec-values(((loop_904)"
"(lambda(n_905)"
"(if(="
" n_905"
" start_894)"
"(void)"
"(let-values()"
"(let-values(((m_906)"
"(read-bytes-avail!"
" s_903"
" buf_882"
" 0"
"(min"
"(-"
" start_894"
" n_905)"
" 4096))))"
"(if(eof-object?"
" m_906)"
"(void)"
"(let-values()"
"(loop_904"
"(+"
" n_905"
" m_906))))))))))"
" loop_904)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_907)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_908)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_909"
" start_910"
" end_911"
" flush?_912"
" breakable?_913)"
"(let-values(((c_914)"
"(-"
" end_911"
" start_910)))"
"(begin"
"(set! discarded/leftovers_907"
"(+"
" c_914"
" discarded/leftovers_907))"
" c_914)))"
" void))))"
"(let-values(((end_915)"
"(if end_895"
"(- end_895 start_894)"
" #f)))"
"(let-values(((ms_916 ipre_917)"
"(regexp-match/end"
" rx_898"
" buf_882"
" 0"
" end_915"
" spitout_908"
" ipre_896"
" max-lookbehind_886)))"
"(let-values(((m_918)"
"(if ms_916"
"(car ms_916)"
" #f)))"
"(let-values(((discarded/leftovers_919)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_908)"
" discarded/leftovers_907)))"
"(let-values(((skipped_920)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_919)"
" discarded/leftovers_919)))"
"(let-values(((got_921)"
"(if m_918"
"(bstring-length"
" m_918)"
" #f)))"
"(let-values(((end_922)"
"(if end_915"
"(if m_918"
"(-"
" end_915"
" skipped_920"
" got_921)"
" #f)"
" #f)))"
"(if m_918"
"(let-values(((0-ok?_923)"
"(not"
"(zero?"
" got_921))))"
"(loop_892"
"((lambda(leftovers_924"
" ms_925"
" acc_926)"
"(cons"
"(car ms_925)"
"(cons"
" leftovers_924"
" acc_926)))"
" discarded/leftovers_919"
" ms_916"
" acc_893)"
" 0"
" end_922"
" ipre_917"
" 0-ok?_923))"
"((lambda(acc_927"
" leftover_928)"
"(if leftover_928"
"(cons"
" leftover_928"
" acc_927)"
" acc_927))"
" acc_893"
" discarded/leftovers_919))))))))))))"
"(let-values(((m_929 ipre_930)"
"(regexp-match-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" #f"
" ipre_896"
" max-lookbehind_886)))"
"(if(not m_929)"
"((lambda(acc_931 start_932 end_933)"
"(cons"
"(if end_933"
"(sub_881 buf_882 start_932 end_933)"
"(sub_881 buf_882 start_932))"
" acc_931))"
" acc_893"
" start_894"
" end_895)"
"(let-values(((mstart_934)(caar m_929)))"
"(let-values(((mend_935)(cdar m_929)))"
"(let-values(((0-ok?_936)"
"(not"
"(= mstart_934 mend_935))))"
"(loop_892"
"((lambda(start_940 ms_941 acc_942)"
"(cons"
"(sub_881"
" buf_882"
"(caar ms_941)"
"(cdar ms_941))"
"(cons"
"(sub_881"
" buf_882"
" start_940"
"(caar ms_941))"
" acc_942)))"
" start_894"
" m_929"
" acc_893)"
" mend_935"
" end_895"
" ipre_930"
" 0-ok?_936)))))))))))"
" loop_892)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(let-values()"
"(let-values(((buf_943 sub_944)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_945)"
"(if(path? buf_943)"
"(if(let-values(((or-part_946)(string? pattern_808)))"
"(if or-part_946 or-part_946(regexp? pattern_808)))"
"(path->string buf_943)"
"(path->bytes buf_943))"
" buf_943)))"
"(let-values(((len_947)"
"(if(string? buf_945)"
"(let-values()(string-length buf_945))"
"(if(bytes? buf_945)"
"(let-values()(bytes-length buf_945))"
"(let-values() #f)))))"
"(let-values(((orig-rx_948)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_949)(regexp-max-lookbehind orig-rx_948)))"
"(begin"
"(if(let-values(((or-part_950) len_947))"
"(if or-part_950 or-part_950(input-port? buf_945)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_945)))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_951)(not end_811)))"
"(if or-part_951"
" or-part_951"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-match* \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_952)(input-port? buf_945)))"
"(if or-part_952 or-part_952(if len_947(<= start_810 len_947) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_947)"
" start_810)))"
"(if(let-values(((or-part_953)(not end_811)))"
"(if or-part_953"
" or-part_953"
"(if(<= start_810 end_811)"
"(let-values(((or-part_954)(input-port? buf_945)))"
"(if or-part_954"
" or-part_954"
"(if len_947(<= end_811 len_947) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_947)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_955)"
"(lambda(acc_956 start_957 end_958 ipre_959 0-ok?_960)"
"(let-values(((rx_961)"
"(if 0-ok?_960"
" orig-rx_948"
"(no-empty-edge-matches"
" orig-rx_948"
"(add1(bytes-length ipre_959))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons(#%app car ms) acc))"
"(input-port? buf_945)"
" #f)"
"(let-values(((__965)"
"(if(positive? start_957)"
"(let-values()"
"(let-values(((s_966)"
"(make-bytes 4096)))"
"((letrec-values(((loop_967)"
"(lambda(n_968)"
"(if(="
" n_968"
" start_957)"
"(void)"
"(let-values()"
"(let-values(((m_969)"
"(read-bytes-avail!"
" s_966"
" buf_945"
" 0"
"(min"
"(-"
" start_957"
" n_968)"
" 4096))))"
"(if(eof-object?"
" m_969)"
"(void)"
"(let-values()"
"(loop_967"
"(+"
" n_968"
" m_969))))))))))"
" loop_967)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_970) 0))"
"(let-values(((spitout_971)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_972"
" start_973"
" end_974"
" flush?_975"
" breakable?_976)"
"(let-values(((c_977)"
"(-"
" end_974"
" start_973)))"
"(begin"
"(set! discarded/leftovers_970"
"(+"
" c_977"
" discarded/leftovers_970))"
" c_977)))"
" void)))"
"(let-values(((end_978)"
"(if end_958"
"(- end_958 start_957)"
" #f)))"
"(let-values(((ms_979 ipre_980)"
"(regexp-match/end"
" rx_961"
" buf_945"
" 0"
" end_978"
" spitout_971"
" ipre_959"
" max-lookbehind_949)))"
"(let-values(((m_981)"
"(if ms_979"
"(car ms_979)"
" #f)))"
"(let-values(((discarded/leftovers_982)"
" discarded/leftovers_970))"
"(let-values(((skipped_983)"
" discarded/leftovers_982))"
"(let-values(((got_984)"
"(if m_981"
"(bstring-length"
" m_981)"
" #f)))"
"(let-values(((end_985)"
"(if end_978"
"(if m_981"
"(-"
" end_978"
" skipped_983"
" got_984)"
" #f)"
" #f)))"
"(if m_981"
"(let-values(((0-ok?_986)"
"(not"
"(zero?"
" got_984))))"
"(loop_955"
"((lambda(leftovers_987"
" ms_988"
" acc_989)"
"(cons"
"(car ms_988)"
" acc_989))"
" discarded/leftovers_982"
" ms_979"
" acc_956)"
" 0"
" end_985"
" ipre_980"
" 0-ok?_986))"
"((lambda(acc_990"
" leftover_991)"
" acc_990)"
" acc_956"
" discarded/leftovers_982))))))))))))"
"(let-values(((m_992 ipre_993)"
"(regexp-match-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" #f"
" ipre_959"
" max-lookbehind_949)))"
"(if(not m_992)"
"((lambda(acc_994 start_995 end_996) acc_994)"
" acc_956"
" start_957"
" end_958)"
"(let-values(((mstart_997)(caar m_992)))"
"(let-values(((mend_998)(cdar m_992)))"
"(let-values(((0-ok?_999)"
"(not"
"(= mstart_997 mend_998))))"
"(loop_955"
"((lambda(start_1003 ms_1004 acc_1005)"
"(cons"
"(sub_944"
" buf_945"
"(caar ms_1004)"
"(cdar ms_1004))"
" acc_1005))"
" start_957"
" m_992"
" acc_956)"
" mend_998"
" end_958"
" ipre_993"
" 0-ok?_999)))))))))))"
" loop_955)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t))))))))))))))))))))))))"
"(define-values"
"(unpack72.1)"
"(lambda(given-kws_1006"
" given-args_1007"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)"
"(let-values(((gap-select?62_1016)(if(pair? given-kws_1006)(eq? '#:gap-select?(car given-kws_1006)) #f)))"
"(let-values(((gap-select?60_1017)(if gap-select?62_1016(car given-args_1007)(void)))"
"((given-kws_1018)(if gap-select?62_1016(cdr given-kws_1006) given-kws_1006))"
"((given-args_1019)(if gap-select?62_1016(cdr given-args_1007) given-args_1007)))"
"(let-values(((match-select61_1020)(pair? given-kws_1018)))"
"(let-values(((match-select59_1021)(if match-select61_1020(car given-args_1019)(void))))"
"(regexp-match*71.1"
" gap-select?60_1017"
" gap-select?62_1016"
" match-select59_1021"
" match-select61_1020"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)))))))"
"(void)"
"(void)"
"(define-values(exists-syms) '(error append update can-update replace truncate must-truncate truncate/replace))"
"(define-values"
"(exists-desc)"
"  \"(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)\")"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values(((path_6) path5_5))"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(unpack7.1$6)"
"(lambda(given-kws_9 given-args_10 path5_11)"
"(let-values(((for-module?4_12)(if(pair? given-kws_9)(eq? '#:for-module?(car given-kws_9)) #f)))"
"(let-values(((for-module?2_13)(if for-module?4_12(car given-args_10)(void)))"
"((given-kws_14)(if for-module?4_12(cdr given-kws_9) given-kws_9))"
"((given-args_15)(if for-module?4_12(cdr given-args_10) given-args_10)))"
"(let-values(((mode3_16)(pair? given-kws_14)))"
"(let-values(((mode1_17)(if mode3_16(car given-args_15)(void))))"
"(open-input-file6.1 for-module?2_13 for-module?4_12 mode1_17 mode3_16 path5_11)))))))"
"(define-values"
"(open-input-file8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_18 given-argc_19)"
"(if(= given-argc_19 3)"
"(let-values(((l1_20) given-kws_18))"
"(let-values(((l1_21)(if(null? l1_20) l1_20(if(eq?(car l1_20) '#:for-module?)(cdr l1_20) l1_20))))"
"(let-values(((l1_22) l1_21))"
"(let-values(((l1_23)(if(null? l1_22) l1_22(if(eq?(car l1_22) '#:mode)(cdr l1_22) l1_22))))"
"(null? l1_23)))))"
" #f))"
"(case-lambda((given-kws_24 given-args_25 path_26)(unpack7.1$6 given-kws_24 given-args_25 path_26)))"
" null"
" '(#:for-module? #:mode)"
"(let-values(((open-input-file_27)(case-lambda((path_28)(unpack7.1$6 null null path_28))))) open-input-file_27)))"
"(define-values"
"(open-output-file14.1)"
"(lambda(exists10_29 exists12_30 mode9_31 mode11_32 path13_33)"
"(let-values(((path_34) path13_33))"
"(let-values(((mode_35)(if mode11_32 mode9_31 'binary)))"
"(let-values(((exists_36)(if exists12_30 exists10_29 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_34)"
"(void)"
"                (let-values () (raise-argument-error 'open-output-file \"path-string?\" path_34)))"
"(if(memq mode_35 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-output-file binary-or-text-desc mode_35)))"
"(if(memq exists_36 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-output-file exists-desc exists_36)))"
"(open-output-file path_34 mode_35 exists_36))))))))"
"(define-values"
"(unpack15.1$1)"
"(lambda(given-kws_37 given-args_38 path13_39)"
"(let-values(((exists12_40)(if(pair? given-kws_37)(eq? '#:exists(car given-kws_37)) #f)))"
"(let-values(((exists10_41)(if exists12_40(car given-args_38)(void)))"
"((given-kws_42)(if exists12_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if exists12_40(cdr given-args_38) given-args_38)))"
"(let-values(((mode11_44)(pair? given-kws_42)))"
"(let-values(((mode9_45)(if mode11_44(car given-args_43)(void))))"
"(open-output-file14.1 exists10_41 exists12_40 mode9_45 mode11_44 path13_39)))))))"
"(define-values"
"(open-input-output-file22.1)"
"(lambda(exists18_57 exists20_58 mode17_59 mode19_60 path21_61)"
"(let-values(((path_62) path21_61))"
"(let-values(((mode_63)(if mode19_60 mode17_59 'binary)))"
"(let-values(((exists_64)(if exists20_58 exists18_57 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_62)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-output-file \"path-string?\" path_62)))"
"(if(memq mode_63 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file binary-or-text-desc mode_63)))"
"(if(memq exists_64 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file exists-desc exists_64)))"
"(open-input-output-file path_62 mode_63 exists_64))))))))"
"(define-values"
"(unpack23.1$1)"
"(lambda(given-kws_65 given-args_66 path21_67)"
"(let-values(((exists20_68)(if(pair? given-kws_65)(eq? '#:exists(car given-kws_65)) #f)))"
"(let-values(((exists18_69)(if exists20_68(car given-args_66)(void)))"
"((given-kws_70)(if exists20_68(cdr given-kws_65) given-kws_65))"
"((given-args_71)(if exists20_68(cdr given-args_66) given-args_66)))"
"(let-values(((mode19_72)(pair? given-kws_70)))"
"(let-values(((mode17_73)(if mode19_72(car given-args_71)(void))))"
"(open-input-output-file22.1 exists18_69 exists20_68 mode17_73 mode19_72 path21_67)))))))"
"(define-values"
"(call-with-input-file29.1)"
"(lambda(mode25_85 mode26_86 path27_87 proc28_88)"
"(let-values(((path_89) path27_87))"
"(let-values(((proc_90) proc28_88))"
"(let-values(((mode_91)(if mode26_86 mode25_85 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_89)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"path-string?\" path_89)))"
"(if(if(procedure? proc_90)(procedure-arity-includes? proc_90 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"(input-port? . -> . any)\" proc_90)))"
"(if(memq mode_91 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file binary-or-text-desc mode_91)))"
"(call-with-input-file path_89 proc_90 mode_91))))))))"
"(define-values"
"(unpack30.1$1)"
"(lambda(given-kws_92 given-args_93 path27_94 proc28_95)"
"(let-values(((mode26_96)(pair? given-kws_92)))"
"(let-values(((mode25_97)(if mode26_96(car given-args_93)(void))))"
"(call-with-input-file29.1 mode25_97 mode26_96 path27_94 proc28_95)))))"
"(define-values"
"(call-with-output-file38.1)"
"(lambda(exists33_109 exists35_110 mode32_111 mode34_112 path36_113 proc37_114)"
"(let-values(((path_115) path36_113))"
"(let-values(((proc_116) proc37_114))"
"(let-values(((mode_117)(if mode34_112 mode32_111 'binary)))"
"(let-values(((exists_118)(if exists35_110 exists33_109 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_115)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"path-string?\" path_115)))"
"(if(if(procedure? proc_116)(procedure-arity-includes? proc_116 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"(output-port? . -> . any)\" proc_116)))"
"(if(memq mode_117 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file binary-or-text-desc mode_117)))"
"(if(memq exists_118 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file exists-desc exists_118)))"
"(call-with-output-file path_115 proc_116 mode_117 exists_118)))))))))"
"(define-values"
"(unpack39.1$1)"
"(lambda(given-kws_119 given-args_120 path36_121 proc37_122)"
"(let-values(((exists35_123)(if(pair? given-kws_119)(eq? '#:exists(car given-kws_119)) #f)))"
"(let-values(((exists33_124)(if exists35_123(car given-args_120)(void)))"
"((given-kws_125)(if exists35_123(cdr given-kws_119) given-kws_119))"
"((given-args_126)(if exists35_123(cdr given-args_120) given-args_120)))"
"(let-values(((mode34_127)(pair? given-kws_125)))"
"(let-values(((mode32_128)(if mode34_127(car given-args_126)(void))))"
"(call-with-output-file38.1 exists33_124 exists35_123 mode32_128 mode34_127 path36_121 proc37_122)))))))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_142 mode42_143 path43_144 proc44_145)"
"(let-values(((path_146) path43_144))"
"(let-values(((proc_147) proc44_145))"
"(let-values(((mode_148)(if mode42_143 mode41_142 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_146)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"path-string?\" path_146)))"
"(if(if(procedure? proc_147)(procedure-arity-includes? proc_147 0) #f)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"(-> any)\" proc_147)))"
"(if(memq mode_148 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_148)))"
"(with-input-from-file path_146 proc_147 mode_148))))))))"
"(define-values"
"(unpack46.1)"
"(lambda(given-kws_149 given-args_150 path43_151 proc44_152)"
"(let-values(((mode42_153)(pair? given-kws_149)))"
"(let-values(((mode41_154)(if mode42_153(car given-args_150)(void))))"
"(with-input-from-file45.1 mode41_154 mode42_153 path43_151 proc44_152)))))"
"(define-values"
"(with-output-to-file54.1)"
"(lambda(exists49_166 exists51_167 mode48_168 mode50_169 path52_170 proc53_171)"
"(let-values(((path_172) path52_170))"
"(let-values(((proc_173) proc53_171))"
"(let-values(((mode_174)(if mode50_169 mode48_168 'binary)))"
"(let-values(((exists_175)(if exists51_167 exists49_166 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_172)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"path-string?\" path_172)))"
"(if(if(procedure? proc_173)(procedure-arity-includes? proc_173 0) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"(-> any)\" proc_173)))"
"(if(memq mode_174 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file binary-or-text-desc mode_174)))"
"(if(memq exists_175 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file exists-desc exists_175)))"
"(with-output-to-file path_172 proc_173 mode_174 exists_175)))))))))"
"(define-values"
"(unpack55.1)"
"(lambda(given-kws_176 given-args_177 path52_178 proc53_179)"
"(let-values(((exists51_180)(if(pair? given-kws_176)(eq? '#:exists(car given-kws_176)) #f)))"
"(let-values(((exists49_181)(if exists51_180(car given-args_177)(void)))"
"((given-kws_182)(if exists51_180(cdr given-kws_176) given-kws_176))"
"((given-args_183)(if exists51_180(cdr given-args_177) given-args_177)))"
"(let-values(((mode50_184)(pair? given-kws_182)))"
"(let-values(((mode48_185)(if mode50_184(car given-args_183)(void))))"
"(with-output-to-file54.1 exists49_181 exists51_180 mode48_185 mode50_184 path52_178 proc53_179)))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values(((path_203) path59_201))"
"(let-values(((proc_204) proc60_202))"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(define-values"
"(unpack62.1$1)"
"(lambda(given-kws_207 given-args_208 path59_209 proc60_210)"
"(let-values(((mode58_211)(pair? given-kws_207)))"
"(let-values(((mode57_212)(if mode58_211(car given-args_208)(void))))"
"(call-with-input-file*61.1 mode57_212 mode58_211 path59_209 proc60_210)))))"
"(define-values"
"(call-with-input-file*63.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_213 given-argc_214)"
"(if(= given-argc_214 4)"
"(let-values(((l1_215) given-kws_213))"
"(let-values(((l1_216)(if(null? l1_215) l1_215(if(eq?(car l1_215) '#:mode)(cdr l1_215) l1_215))))"
"(null? l1_216)))"
" #f))"
"(case-lambda"
"((given-kws_217 given-args_218 path_219 proc_220)(unpack62.1$1 given-kws_217 given-args_218 path_219 proc_220)))"
" null"
" '(#:mode)"
"(let-values(((call-with-input-file*_221)"
"(case-lambda((path_222 proc_223)(unpack62.1$1 null null path_222 proc_223)))))"
" call-with-input-file*_221)))"
"(define-values"
"(call-with-output-file*70.1)"
"(lambda(exists65_224 exists67_225 mode64_226 mode66_227 path68_228 proc69_229)"
"(let-values(((path_230) path68_228))"
"(let-values(((proc_231) proc69_229))"
"(let-values(((mode_232)(if mode66_227 mode64_226 'binary)))"
"(let-values(((exists_233)(if exists67_225 exists65_224 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_230)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"path-string?\" path_230)))"
"(if(if(procedure? proc_231)(procedure-arity-includes? proc_231 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"(output-port? . -> . any)\" proc_231)))"
"(if(memq mode_232 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* binary-or-text-desc mode_232)))"
"(if(memq exists_233 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* exists-desc exists_233)))"
"(let-values(((p_234)(open-output-file path_230 mode_232 exists_233)))"
"(dynamic-wind void(lambda()(proc_231 p_234))(lambda()(close-output-port p_234))))))))))))"
"(define-values"
"(unpack71.1)"
"(lambda(given-kws_235 given-args_236 path68_237 proc69_238)"
"(let-values(((exists67_239)(if(pair? given-kws_235)(eq? '#:exists(car given-kws_235)) #f)))"
"(let-values(((exists65_240)(if exists67_239(car given-args_236)(void)))"
"((given-kws_241)(if exists67_239(cdr given-kws_235) given-kws_235))"
"((given-args_242)(if exists67_239(cdr given-args_236) given-args_236)))"
"(let-values(((mode66_243)(pair? given-kws_241)))"
"(let-values(((mode64_244)(if mode66_243(car given-args_242)(void))))"
"(call-with-output-file*70.1 exists65_240 exists67_239 mode64_244 mode66_243 path68_237 proc69_238)))))))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(set)"
"(case-lambda"
"(() '#hash())"
"(l_71"
"(let-values(((lst_72) l_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(s_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((e_76)(unsafe-car lst_75)))"
"(let-values(((s_77)"
"(let-values(((s_78) s_74))"
"(let-values(((s_79)(let-values()(hash-set s_78 e_76 #t))))"
"(values s_79)))))"
"(for-loop_73 s_77(unsafe-cdr lst_75))))"
" s_74))))"
" for-loop_73)"
" '#hash()"
" lst_72))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() '#hasheq())"
"(l_80"
"(let-values(((lst_81) l_80))"
"(begin"
"(if(list? lst_81)(void)(let-values()(in-list lst_81)))"
"((letrec-values(((for-loop_82)"
"(lambda(s_83 lst_84)"
"(if(pair? lst_84)"
"(let-values(((e_85)(unsafe-car lst_84)))"
"(let-values(((s_86)"
"(let-values(((s_87) s_83))"
"(let-values(((s_88)(let-values()(hash-set s_87 e_85 #t))))"
"(values s_88)))))"
"(for-loop_82 s_86(unsafe-cdr lst_84))))"
" s_83))))"
" for-loop_82)"
" '#hasheq()"
" lst_81))))))"
"(define-values(seteqv)(lambda() '#hasheqv()))"
"(define-values(set?)(lambda(s_89)(hash? s_89)))"
"(define-values(set-empty?)(lambda(s_90)(zero?(hash-count s_90))))"
"(define-values(set-member?)(lambda(s_91 e_92)(hash-ref s_91 e_92 #f)))"
"(define-values(set-count)(lambda(s_93)(hash-count s_93)))"
"(define-values(set-add)(lambda(s_94 e_95)(hash-set s_94 e_95 #t)))"
"(define-values(set-remove)(lambda(s_96 e_97)(hash-remove s_96 e_97)))"
"(define-values(set-first)(lambda(s_98)(hash-iterate-key s_98(hash-iterate-first s_98))))"
"(define-values(subset?)(lambda(s1_99 s2_100)(hash-keys-subset? s1_99 s2_100)))"
"(define-values"
"(set=?)"
"(lambda(s1_101 s2_102)(if(=(hash-count s1_101)(hash-count s2_102))(hash-keys-subset? s1_101 s2_102) #f)))"
"(define-values"
"(set-subtract)"
"(lambda(s1_103 s2_104)"
"(let-values(((ht_105) s2_104))"
"(begin"
"(if((lambda(ht_106)(if(hash? ht_106)(immutable? ht_106) #f)) ht_105)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_105)))"
"((letrec-values(((for-loop_107)"
"(lambda(s1_108 i_109)"
"(if i_109"
"(let-values(((k_110)(unsafe-immutable-hash-iterate-key ht_105 i_109)))"
"(let-values(((s1_111)"
"(let-values(((s1_112) s1_108))"
"(let-values(((s1_113)(let-values()(hash-remove s1_112 k_110))))"
"(values s1_113)))))"
"(for-loop_107 s1_111(unsafe-immutable-hash-iterate-next ht_105 i_109))))"
" s1_108))))"
" for-loop_107)"
" s1_103"
"(unsafe-immutable-hash-iterate-first ht_105))))))"
"(define-values"
"(set-union)"
"(lambda(s1_114 s2_115)"
"(if(<(set-count s1_114)(set-count s2_115))"
"(set-union s2_115 s1_114)"
"(let-values(((ht_116) s2_115))"
"(begin"
"(if((lambda(ht_117)(if(hash? ht_117)(immutable? ht_117) #f)) ht_116)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_116)))"
"((letrec-values(((for-loop_118)"
"(lambda(s1_119 i_120)"
"(if i_120"
"(let-values(((k_121)(unsafe-immutable-hash-iterate-key ht_116 i_120)))"
"(let-values(((s1_122)"
"(let-values(((s1_123) s1_119))"
"(let-values(((s1_124)(let-values()(hash-set s1_123 k_121 #t))))"
"(values s1_124)))))"
"(for-loop_118 s1_122(unsafe-immutable-hash-iterate-next ht_116 i_120))))"
" s1_119))))"
" for-loop_118)"
" s1_114"
"(unsafe-immutable-hash-iterate-first ht_116)))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_125 s2_126)"
"(if(<(set-count s1_125)(set-count s2_126))"
"(set-union s2_126 s1_125)"
"(let-values(((ht_127) s2_126))"
"(begin"
"(if((lambda(ht_128)(if(hash? ht_128)(immutable? ht_128) #f)) ht_127)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_127)))"
"((letrec-values(((for-loop_129)"
"(lambda(s_130 i_131)"
"(if i_131"
"(let-values(((k_132)(unsafe-immutable-hash-iterate-key ht_127 i_131)))"
"(let-values(((s_133)"
"(let-values(((s_134) s_130))"
"(let-values(((s_135)"
"(let-values()"
"(if(hash-ref s1_125 k_132 #f)"
" s_134"
"(hash-remove s_134 k_132)))))"
"(values s_135)))))"
"(for-loop_129 s_133(unsafe-immutable-hash-iterate-next ht_127 i_131))))"
" s_130))))"
" for-loop_129)"
" s2_126"
"(unsafe-immutable-hash-iterate-first ht_127)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_136 pred_137 empty-y-set_138 empty-n-set_139)"
"(let-values(((ht_140) s_136))"
"(begin"
"(if((lambda(ht_141)(if(hash? ht_141)(immutable? ht_141) #f)) ht_140)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_140)))"
"((letrec-values(((for-loop_142)"
"(lambda(y_143 n_144 i_145)"
"(if i_145"
"(let-values(((v_146)(unsafe-immutable-hash-iterate-key ht_140 i_145)))"
"(let-values(((y_147 n_148)"
"(let-values(((y_149) y_143)((n_150) n_144))"
"(let-values(((y_151 n_152)"
"(let-values()"
"(if(pred_137 v_146)"
"(values(set-add y_149 v_146) n_150)"
"(values y_149(set-add n_150 v_146))))))"
"(values y_151 n_152)))))"
"(for-loop_142 y_147 n_148(unsafe-immutable-hash-iterate-next ht_140 i_145))))"
"(values y_143 n_144)))))"
" for-loop_142)"
" empty-y-set_138"
" empty-n-set_139"
"(unsafe-immutable-hash-iterate-first ht_140))))))"
"(define-values"
"(set->list)"
"(lambda(s_153)"
"(alt-reverse"
"(let-values(((ht_154) s_153))"
"(begin"
"(if((lambda(ht_155)(if(hash? ht_155)(immutable? ht_155) #f)) ht_154)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_154)))"
"((letrec-values(((for-loop_156)"
"(lambda(fold-var_157 i_158)"
"(if i_158"
"(let-values(((k_159)(unsafe-immutable-hash-iterate-key ht_154 i_158)))"
"(let-values(((fold-var_160)"
"(let-values(((fold-var_161) fold-var_157))"
"(let-values(((fold-var_162)"
"(let-values()"
"(cons(let-values() k_159) fold-var_161))))"
"(values fold-var_162)))))"
"(for-loop_156 fold-var_160(unsafe-immutable-hash-iterate-next ht_154 i_158))))"
" fold-var_157))))"
" for-loop_156)"
" null"
"(unsafe-immutable-hash-iterate-first ht_154)))))))"
"(define-values"
"(list->set)"
"(lambda(l_163)"
"(let-values(((lst_164) l_163))"
"(begin"
"(if(list? lst_164)(void)(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(table_166 lst_167)"
"(if(pair? lst_167)"
"(let-values(((k_168)(unsafe-car lst_167)))"
"(let-values(((table_169)"
"(let-values(((table_170) table_166))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((key_172 val_173)"
"(let-values()"
"(values(let-values() k_168) #t))))"
"(hash-set table_170 key_172 val_173)))))"
"(values table_171)))))"
"(for-loop_165 table_169(unsafe-cdr lst_167))))"
" table_166))))"
" for-loop_165)"
" '#hash()"
" lst_164)))))"
"(define-values"
"(list->seteq)"
"(lambda(l_174)"
"(let-values(((lst_175) l_174))"
"(begin"
"(if(list? lst_175)(void)(let-values()(in-list lst_175)))"
"((letrec-values(((for-loop_176)"
"(lambda(table_177 lst_178)"
"(if(pair? lst_178)"
"(let-values(((k_179)(unsafe-car lst_178)))"
"(let-values(((table_180)"
"(let-values(((table_181) table_177))"
"(let-values(((table_182)"
"(let-values()"
"(let-values(((key_183 val_184)"
"(let-values()"
"(values(let-values() k_179) #t))))"
"(hash-set table_181 key_183 val_184)))))"
"(values table_182)))))"
"(for-loop_176 table_180(unsafe-cdr lst_178))))"
" table_177))))"
" for-loop_176)"
" '#hasheq()"
" lst_175)))))"
"(void)"
"(void)"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(void)"
"(void)"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
"        (if (let-values (((or-part_9) (equal? (cadr v_8) \"..\")))"
"(if or-part_9"
" or-part_9"
"                (let-values (((or-part_10) (equal? (cadr v_8) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14)))"
"(let-values(((result_16)"
"(let-values(((result_17) result_13))"
"(let-values(((result_18)"
"(let-values()"
"(let-values()"
"                                                                        (let-values (((or-part_19) (equal? e_15 \"..\")))"
"(if or-part_19 or-part_19(symbol? e_15)))))))"
"(values result_18)))))"
"(if(not((lambda x_20(not result_16)) e_15))"
"(for-loop_12 result_16(unsafe-cdr lst_14))"
" result_16)))"
" result_13))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_21)"
"(let-values(((...arse-module-path.rkt:44:2_22) module-path-string?12.1)"
"((v13_23) v_21)"
"((temp14_24) #t)"
"((temp15_25) #t)"
"((temp16_26) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 temp14_24 #t temp16_26 #t #f #f temp15_25 #t v13_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:44:2_22"
" keyword-procedure-extract"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
"(list temp14_24 temp16_26 temp15_25)"
" v13_23)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_27)"
"(let-values(((temp17_28)(symbol->string v_27)))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_28)"
"(module-path-string?12.1 temp17_28)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_29)"
"(if(list? v_29)"
"(if(pair?(cdr v_29))"
"((letrec-values(((loop_30)"
"(lambda(v_31 first?_32)"
"(let-values(((or-part_33)(null? v_31)))"
"(if or-part_33"
" or-part_33"
"(if(string?(car v_31))"
"(if(let-values(((...arse-module-path.rkt:55:18_34) module-path-string?12.1)"
"((temp18_35)(car v_31))"
"((first?19_36) first?_32)"
"((first?20_37) first?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f first?20_37 #t #f #f first?19_36 #t temp18_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:55:18_34"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list first?20_37 first?19_36)"
" temp18_35)))"
"(loop_30(cdr v_31) #f)"
" #f)"
" #f))))))"
" loop_30)"
"(cdr v_29)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_39)(length v_38)))"
"(if(equal? tmp_39 1)"
"(let-values() #f)"
"(if(equal? tmp_39 2)"
"(let-values()"
"(let-values(((e_40)(cadr v_38)))"
"(if(string? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:68:12_41) module-path-string?12.1)"
"((e21_42) e_40)"
"((temp22_43) #t)"
"((temp23_44) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp23_44 #t temp22_43 #t #f #f e21_42)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:68:12_41"
" keyword-procedure-extract"
" '(#:file-end-ok? #:for-planet?)"
" 3)"
" '(#:file-end-ok? #:for-planet?)"
"(list temp23_44 temp22_43)"
" e21_42))))"
"(if(symbol? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:72:12_45) module-path-string?12.1)"
"((temp24_46)(symbol->string e_40))"
"((temp25_47) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f temp25_47 #t #f #f temp24_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:72:12_45"
" keyword-procedure-extract"
" '(#:for-planet?)"
" 3)"
" '(#:for-planet?)"
"(list temp25_47)"
" temp24_46))))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_48)(cadr v_38)))"
"(let-values(((pkg_49)(caddr v_38)))"
"(let-values(((subs_50)(cdddr v_38)))"
"(if file_48"
"(if(let-values(((...arse-module-path.rkt:80:15_51) module-path-string?12.1)"
"((file26_52) file_48)"
"((temp27_53) #t)"
"((temp28_54) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp28_54 #t #f #f temp27_53 #t file26_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:80:15_51"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list temp28_54 temp27_53)"
" file26_52)))"
"(if(if(list? pkg_49)"
"(if(<= 2(length pkg_49) 4)"
"(if(planet-user/pkg-string?(car pkg_49))"
"(if(planet-user/pkg-string?(cadr pkg_49))"
"(let-values(((or-part_55)(null?(cddr pkg_49))))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(planet-version-number?(caddr pkg_49))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(null?(cddr pkg_49))))"
"(if or-part_57"
" or-part_57"
"(planet-version-minor-spec?(cadddr pkg_49))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_58) subs_50))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((sub_62)(unsafe-car lst_61)))"
"(let-values(((result_63)"
"(let-values(((result_64) result_60))"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_66)"
" sub_62))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path-string?12.1))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_66)"
"(module-path-string?12.1"
" sub29_66)))))))"
"(values result_65)))))"
"(if(not((lambda x_67(not result_63)) sub_62))"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63)))"
" result_60))))"
" for-loop_59)"
" #t"
" lst_58)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_68)(exact-nonnegative-integer? v_68)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_69)"
"(let-values(((or-part_70)(planet-version-number? v_69)))"
"(if or-part_70"
" or-part_70"
"(if(pair? v_69)"
"(if(list? v_69)"
"(if(= 2(length v_69))"
"(let-values(((tmp_71)(car v_69)))"
"(if(if(equal? tmp_71 '=) #t(if(equal? tmp_71 '+) #t(equal? tmp_71 '-)))"
"(let-values()(planet-version-number?(cadr v_69)))"
"(let-values()(if(planet-version-number?(car v_69))(planet-version-number?(cadr v_69)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_72"
" dots-dir-ok?6_73"
" file-end-ok?4_74"
" file-end-ok?8_75"
" for-planet?1_76"
" for-planet?5_77"
" just-file-ok?3_78"
" just-file-ok?7_79"
" v9_80)"
"(let-values(((v_81) v9_80))"
"(let-values(((for-planet?_82)(if for-planet?5_77 for-planet?1_76 #f)))"
"(let-values(((dots-dir-ok?_83)(if dots-dir-ok?6_73 dots-dir-ok?2_72 #f)))"
"(let-values(((just-file-ok?_84)(if just-file-ok?7_79 just-file-ok?3_78 #f)))"
"(let-values(((file-end-ok?_85)(if file-end-ok?8_75 file-end-ok?4_74 #f)))"
"(let-values()"
"(let-values(((len_86)(string-length v_81)))"
"(if(positive? len_86)"
"(if(not(char=? '#\\/(string-ref v_81 0)))"
"(if(not(char=? '#\\/(string-ref v_81(sub1 len_86))))"
"(let-values(((start-package-version-pos_87 end-package-version-pos_88)"
"(if for-planet?_82(check-planet-part v_81 len_86)(values 0 0))))"
"(if start-package-version-pos_87"
"((letrec-values(((loop_89)"
"(lambda(i_90 prev-was-slash?_91 saw-slash?_92 saw-dot?_93)"
"(if(not(zero? i_90))"
"(let-values()"
"(let-values(((c_94)(string-ref v_81 i_90)))"
"(if(char=? c_94 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_91)"
"(loop_89(sub1 i_90) #t #t saw-dot?_93)"
" #f))"
"(if(char=? c_94 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_90) len_86)"
"(if(not(char=?(string-ref v_81(add1 i_90)) '#\\/))"
"(not(char=?(string-ref v_81(add1 i_90)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_92)"
"(loop_89(sub1 i_90) #f saw-slash?_92 #t)"
" #f)"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93)))"
"(if(let-values(((or-part_95)(plain-char? c_94)))"
"(if or-part_95"
" or-part_95"
"(if(char=? c_94 '#\\%)"
"(if(<(+ i_90 2) len_86)"
"(hex-sequence? v_81(add1 i_90))"
" #f)"
" #f)))"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(if(if(>= i_90 start-package-version-pos_87)"
"(< i_90 end-package-version-pos_88)"
" #f)"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_84)"
"(if saw-dot?_93(not saw-slash?_92) #f)"
" #f))"
"(let-values(((or-part_96) dots-dir-ok?_83))"
"(if or-part_96"
" or-part_96"
"((letrec-values(((loop_97)"
"(lambda(i_98)"
"(if(= i_98 len_86)"
"(let-values() #t)"
"(if(char=?(string-ref v_81 i_98) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_99)"
"(="
" len_86"
"(add1 i_98))))"
"(if or-part_99"
" or-part_99"
"(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\.)"
"(let-values(((or-part_100)"
"(="
" len_86"
"(+"
" i_98"
" 2))))"
"(if or-part_100"
" or-part_100"
"(char=?"
"(string-ref"
" v_81"
"(+ i_98 2))"
" '#\\/)))"
" #f))"
"(loop_97"
"((letrec-values(((loop_101)"
"(lambda(i_102)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_81"
" i_102))"
"(loop_101"
"(add1"
" i_102))"
" i_102))))"
" loop_101)"
" i_98))"
" #f)"
" #f))"
"(let-values()"
"(loop_97(add1 i_98))))))))"
" loop_97)"
" 0)))"
" #f))))))"
" loop_89)"
"(sub1 len_86)"
" #f"
"(not file-end-ok?_85)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(unpack11.1$1)"
"(lambda(given-kws_103 given-args_104 v9_105)"
"(let-values(((dots-dir-ok?6_106)(if(pair? given-kws_103)(eq? '#:dots-dir-ok?(car given-kws_103)) #f)))"
"(let-values(((dots-dir-ok?2_107)(if dots-dir-ok?6_106(car given-args_104)(void)))"
"((given-kws_108)(if dots-dir-ok?6_106(cdr given-kws_103) given-kws_103))"
"((given-args_109)(if dots-dir-ok?6_106(cdr given-args_104) given-args_104)))"
"(let-values(((file-end-ok?8_110)(if(pair? given-kws_108)(eq? '#:file-end-ok?(car given-kws_108)) #f)))"
"(let-values(((file-end-ok?4_111)(if file-end-ok?8_110(car given-args_109)(void)))"
"((given-kws_112)(if file-end-ok?8_110(cdr given-kws_108) given-kws_108))"
"((given-args_113)(if file-end-ok?8_110(cdr given-args_109) given-args_109)))"
"(let-values(((for-planet?5_114)(if(pair? given-kws_112)(eq? '#:for-planet?(car given-kws_112)) #f)))"
"(let-values(((for-planet?1_115)(if for-planet?5_114(car given-args_113)(void)))"
"((given-kws_116)(if for-planet?5_114(cdr given-kws_112) given-kws_112))"
"((given-args_117)(if for-planet?5_114(cdr given-args_113) given-args_113)))"
"(let-values(((just-file-ok?7_118)(pair? given-kws_116)))"
"(let-values(((just-file-ok?3_119)(if just-file-ok?7_118(car given-args_117)(void))))"
"(module-path-string?10.1"
" dots-dir-ok?2_107"
" dots-dir-ok?6_106"
" file-end-ok?4_111"
" file-end-ok?8_110"
" for-planet?1_115"
" for-planet?5_114"
" just-file-ok?3_119"
" just-file-ok?7_118"
" v9_105)))))))))))"
"(define-values"
"(module-path-string?12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_120 given-argc_121)"
"(if(= given-argc_121 3)"
"(let-values(((l1_122) given-kws_120))"
"(let-values(((l1_123)(if(null? l1_122) l1_122(if(eq?(car l1_122) '#:dots-dir-ok?)(cdr l1_122) l1_122))))"
"(let-values(((l1_124) l1_123))"
"(let-values(((l1_125)"
"(if(null? l1_124) l1_124(if(eq?(car l1_124) '#:file-end-ok?)(cdr l1_124) l1_124))))"
"(let-values(((l1_126) l1_125))"
"(let-values(((l1_127)"
"(if(null? l1_126) l1_126(if(eq?(car l1_126) '#:for-planet?)(cdr l1_126) l1_126))))"
"(let-values(((l1_128) l1_127))"
"(let-values(((l1_129)"
"(if(null? l1_128)"
" l1_128"
"(if(eq?(car l1_128) '#:just-file-ok?)(cdr l1_128) l1_128))))"
"(null? l1_129)))))))))"
" #f))"
"(case-lambda((given-kws_130 given-args_131 v_132)(unpack11.1$1 given-kws_130 given-args_131 v_132)))"
" null"
" '(#:dots-dir-ok? #:file-end-ok? #:for-planet? #:just-file-ok?)"
"(let-values(((module-path-string?_133)(case-lambda((v_134)(unpack11.1$1 null null v_134)))))"
" module-path-string?_133)))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_135)"
"(if(string? v_135)"
"(let-values(((len_136)(string-length v_135)))"
"(if(positive? len_136)"
"(let-values(((vec_137 len_138)"
"(let-values(((vec_140) v_135))"
"(begin"
"(if(string? vec_140)(void)(let-values()(in-string vec_140)))"
"(values vec_140(string-length vec_140)))))"
"((start_139) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_139)(void)(let-values()(in-naturals start_139)))"
"((letrec-values(((for-loop_141)"
"(lambda(result_142 pos_143 pos_144)"
"(if(if(unsafe-fx< pos_143 len_138) #t #f)"
"(let-values(((c_145)(string-ref vec_137 pos_143))((i_146) pos_144))"
"(let-values(((result_147)"
"(let-values(((result_148) result_142))"
"(let-values(((result_149)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_150)"
"(plain-char? c_145)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)"
"(char=? '#\\. c_145)))"
"(if or-part_151"
" or-part_151"
"(if(char=? '#\\% c_145)"
"(if(< i_146(- len_136 2))"
"(hex-sequence? v_135(add1 i_146))"
" #f)"
" #f)))))))))"
"(values result_149)))))"
"(if(if(not((lambda x_152(not result_147)) c_145))"
"(not((lambda x_153(not result_147)) i_146))"
" #f)"
"(for-loop_141 result_147(unsafe-fx+ 1 pos_143)(+ pos_144 1))"
" result_147)))"
" result_142))))"
" for-loop_141)"
" #t"
" 0"
" start_139)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_154)"
"(let-values(((or-part_155)(char<=? '#\\a c_154 '#\\z)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char<=? '#\\A c_154 '#\\Z)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char<=? '#\\0 c_154 '#\\9)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char=? '#\\- c_154)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char=? '#\\_ c_154)))"
"(if or-part_159 or-part_159(char=? '#\\+ c_154)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_160 i_161)"
"(let-values(((c1_162)(string-ref s_160 i_161)))"
"(let-values(((c2_163)(string-ref s_160(add1 i_161))))"
"(if(hex-char? c1_162)"
"(if(hex-char? c2_163)"
"(let-values(((c_164)(integer->char(+(*(hex-char->integer c1_162) 16)(hex-char->integer c2_163)))))"
"(not(plain-char? c_164)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_165)"
"(let-values(((or-part_166)(char<=? '#\\a c_165 '#\\f)))(if or-part_166 or-part_166(char<=? '#\\0 c_165 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_167)"
"(if(char<=? '#\\a c_167 '#\\f)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_167 '#\\F)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_167)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_168 len_169)"
"(let-values(((start-package-version-pos_170 end-package-version-pos_171 colon1-pos_172 colon2-pos_173)"
"((letrec-values(((loop_174)"
"(lambda(j_175"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179)"
"(if(= j_175 len_169)"
"(let-values()"
"(values"
" start-package-version-pos_176"
"(let-values(((or-part_180) end-package-version-pos_177))"
"(if or-part_180 or-part_180 j_175))"
" colon1-pos_178"
" colon2-pos_179))"
"(let-values()"
"(let-values(((tmp_181)(string-ref v_168 j_175)))"
"(if(equal? tmp_181 '#\\/)"
"(let-values()"
"(loop_174"
"(add1 j_175)"
"(let-values(((or-part_182) start-package-version-pos_176))"
"(if or-part_182 or-part_182(add1 j_175)))"
"(if start-package-version-pos_176"
"(let-values(((or-part_183) end-package-version-pos_177))"
"(if or-part_183 or-part_183 j_175))"
" #f)"
" colon1-pos_178"
" colon2-pos_179))"
"(if(equal? tmp_181 '#\\:)"
"(let-values()"
"(if colon2-pos_179"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_178"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" j_175))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" j_175"
" #f)))))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179))))))))))"
" loop_174)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_170"
"(if(> end-package-version-pos_171 start-package-version-pos_170)"
"(let-values(((or-part_184)(not colon2-pos_173)))"
"(if or-part_184 or-part_184(<(add1 colon2-pos_173) end-package-version-pos_171)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_172"
"(let-values()"
"(let-values(((colon1-end_185)"
"(let-values(((or-part_186) colon2-pos_173))"
"(if or-part_186 or-part_186 end-package-version-pos_171))))"
"(if(if(integer-sequence? v_168(add1 colon1-pos_172) colon1-end_185)"
"(let-values(((or-part_187)(not colon2-pos_173)))"
"(if or-part_187"
" or-part_187"
"(let-values(((tmp_188)(string-ref v_168(add1 colon2-pos_173))))"
"(if(equal? tmp_188 '#\\=)"
"(let-values()(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))"
"(if(if(equal? tmp_188 '#\\>) #t(equal? tmp_188 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_173) end-package-version-pos_171)"
"(char=? '#\\=(string-ref v_168(+ colon2-pos_173 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_168(+ 3 colon2-pos_173) end-package-version-pos_171))"
"(let-values()"
"(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))))"
"(let-values()"
"(integer-range-sequence?"
" v_168"
"(add1 colon2-pos_173)"
" end-package-version-pos_171)))))))"
" #f)"
"(let-values()(values colon1-pos_172 end-package-version-pos_171))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_189 start_190 end_191)"
"(if(< start_190 end_191)"
"(let-values(((start_192) start_190)((end_193) end_191)((inc_194) 1))"
"(begin"
"(if(if(real? start_192)(if(real? end_193)(real? inc_194) #f) #f)"
"(void)"
"(let-values()(in-range start_192 end_193 inc_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(result_196 pos_197)"
"(if(< pos_197 end_193)"
"(let-values(((i_198) pos_197))"
"(let-values(((result_199)"
"(let-values(((result_200) result_196))"
"(let-values(((result_201)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_189 i_198) '#\\9)))))"
"(values result_201)))))"
"(if(not((lambda x_202(not result_199)) i_198))"
"(for-loop_195 result_199(+ pos_197 inc_194))"
" result_199)))"
" result_196))))"
" for-loop_195)"
" #t"
" start_192)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_203 start_204 end_205)"
"(if(< start_204 end_205)"
"(if(let-values(((start_206) start_204)((end_207) end_205)((inc_208) 1))"
"(begin"
"(if(if(real? start_206)(if(real? end_207)(real? inc_208) #f) #f)"
"(void)"
"(let-values()(in-range start_206 end_207 inc_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(result_210 pos_211)"
"(if(< pos_211 end_207)"
"(let-values(((i_212) pos_211))"
"(let-values(((result_213)"
"(let-values(((result_214) result_210))"
"(let-values(((result_215)"
"(let-values()"
"(let-values()"
"(let-values(((c_216)(string-ref s_203 i_212)))"
"(let-values(((or-part_217)"
"(char=? c_216 '#\\-)))"
"(if or-part_217"
" or-part_217"
"(char<=? '#\\0 c_216 '#\\9))))))))"
"(values result_215)))))"
"(if(not((lambda x_218(not result_213)) i_212))"
"(for-loop_209 result_213(+ pos_211 inc_208))"
" result_213)))"
" result_210))))"
" for-loop_209)"
" #t"
" start_206)))"
"(>="
" 1"
"(let-values(((start_219) start_204)((end_220) end_205)((inc_221) 1))"
"(begin"
"(if(if(real? start_219)(if(real? end_220)(real? inc_221) #f) #f)"
"(void)"
"(let-values()(in-range start_219 end_220 inc_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_223 pos_224)"
"(if(< pos_224 end_220)"
"(let-values(((i_225) pos_224))"
"(let-values(((result_226)"
"(let-values(((result_227) result_223))"
"(let-values(((result_228)"
"(let-values()"
"(+"
" result_227"
"(let-values()"
"(if(char=?(string-ref s_203 i_225) '#\\-)"
" 1"
" 0))))))"
"(values result_228)))))"
"(for-loop_222 result_226(+ pos_224 inc_221))))"
" result_223))))"
" for-loop_222)"
" 0"
" start_219))))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()(make-struct-type 'table #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'table)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'ht)"
"(make-struct-field-accessor -ref_24 1 'count)"
"(make-struct-field-accessor -ref_24 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(weak-intern-table1.1(box(table2.1(hasheqv) 0 128)))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_51 v_52)"
"(let-values(((b_53)(weak-intern-table-box tt_51)))"
"(let-values(((t_54)(unbox b_53)))"
"(let-values(((code_55)(equal-hash-code v_52)))"
"(let-values(((vals_56)(hash-ref(table-ht t_54) code_55 null)))"
"(let-values(((or-part_57)"
"(let-values(((lst_58) vals_56))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((b_62)(unsafe-car lst_61)))"
"(let-values(((result_63)"
"(let-values(((result_64) result_60))"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((bv_66)"
"(weak-box-value"
" b_62)))"
"(if(equal? bv_66 v_52)"
" bv_66"
" #f))))))"
"(values result_65)))))"
"(if(not((lambda x_67 result_63) b_62))"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63)))"
" result_60))))"
" for-loop_59)"
" #f"
" lst_58)))))"
"(if or-part_57"
" or-part_57"
"(let-values(((pruned-t_68)(if(=(table-count t_54)(table-prune-at t_54))(prune-table t_54) t_54)))"
"(let-values(((ht_69)(table-ht pruned-t_68)))"
"(let-values(((new-t_70)"
"(table2.1"
"(hash-set ht_69 code_55(cons(make-weak-box v_52)(hash-ref ht_69 code_55 null)))"
"(add1(table-count pruned-t_68))"
"(table-prune-at pruned-t_68))))"
"(let-values(((or-part_71)(if(box-cas! b_53 t_54 new-t_70) v_52 #f)))"
"(if or-part_71 or-part_71(weak-intern! tt_51 v_52))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_72)"
"(let-values(((new-ht_73)"
"(let-values(((ht_75)(table-ht t_72)))"
"(begin"
"(if((lambda(ht_76)(hash? ht_76)) ht_75)(void)(let-values()(default-in-hash ht_75)))"
"((letrec-values(((for-loop_77)"
"(lambda(table_78 i_79)"
"(if i_79"
"(let-values(((k_80 vals_81)(hash-iterate-key+value ht_75 i_79)))"
"(let-values(((table_82)"
"(let-values(((new-vals_83)"
"(alt-reverse"
"(let-values(((lst_84) vals_81))"
"(begin"
"(if(list? lst_84)"
"(void)"
"(let-values()(in-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_86"
" lst_87)"
"(if(pair? lst_87)"
"(let-values(((b_88)"
"(unsafe-car"
" lst_87)))"
"(let-values(((fold-var_89)"
"(let-values(((fold-var_90)"
" fold-var_86))"
"(if(weak-box-value"
" b_88)"
"(let-values(((fold-var_91)"
" fold-var_90))"
"(let-values(((fold-var_92)"
"(let-values()"
"(cons"
"(let-values()"
" b_88)"
" fold-var_91))))"
"(values"
" fold-var_92)))"
" fold-var_90))))"
"(for-loop_85"
" fold-var_89"
"(unsafe-cdr"
" lst_87))))"
" fold-var_86))))"
" for-loop_85)"
" null"
" lst_84))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_93)"
"(lambda(table_94)"
"(let-values()"
"(let-values(((table_95)"
"(let-values(((table_96)"
" table_94))"
"(if(pair?"
" new-vals_83)"
"(let-values(((table_97)"
" table_96))"
"(let-values(((table_98)"
"(let-values()"
"(let-values(((key_99"
" val_100)"
"(let-values()"
"(values"
" k_80"
" new-vals_83))))"
"(hash-set"
" table_97"
" key_99"
" val_100)))))"
"(values"
" table_98)))"
" table_96))))"
" table_95)))))"
" for-loop_93)"
" table_78)))))"
"(for-loop_77 table_82(hash-iterate-next ht_75 i_79))))"
" table_78))))"
" for-loop_77)"
" '#hash()"
"(hash-iterate-first ht_75))))))"
"(let-values(((count_74)"
"(let-values(((ht_101) new-ht_73))"
"(begin"
"(if((lambda(ht_102)(hash? ht_102)) ht_101)(void)(let-values()(default-in-hash ht_101)))"
"((letrec-values(((for-loop_103)"
"(lambda(result_104 i_105)"
"(if i_105"
"(let-values(((k_106 vals_107)(hash-iterate-key+value ht_101 i_105)))"
"(let-values(((result_108)"
"(let-values(((result_109) result_104))"
"(let-values(((result_110)"
"(let-values()"
"(+"
" result_109"
"(let-values()(length vals_107))))))"
"(values result_110)))))"
"(for-loop_103 result_108(hash-iterate-next ht_101 i_105))))"
" result_104))))"
" for-loop_103)"
" 0"
"(hash-iterate-first ht_101))))))"
"(table2.1 new-ht_73 count_74(max 128(* 2 count_74)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_21 ser-push!_22 state_23)"
"(begin"
"(ser-push!_22 'tag '#:resolved-module-path)"
"(ser-push!_22(1/resolved-module-path-name r_21)))))"
"(cons"
" prop:custom-write"
"(lambda(r_24 port_25 mode_26)"
"(begin"
"                           (if mode_26 (let-values () (write-string \"#<resolved-module-path:\" port_25)) (void))"
"                           (fprintf port_25 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_24)))"
"                           (if mode_26 (let-values () (write-string \">\" port_25)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_27 b_28 eql?_29)"
"(eql?_29(1/resolved-module-path-name a_27)(1/resolved-module-path-name b_28)))"
"(lambda(a_30 hash-code_31)(hash-code_31(1/resolved-module-path-name a_30)))"
"(lambda(a_32 hash-code_33)(hash-code_33(1/resolved-module-path-name a_32))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_35)"
"(if(path? p_35)"
"      (let-values () (string-append \"\\\"\" (path->string p_35) \"\\\"\"))"
"(if(symbol? p_35)"
"        (let-values () (format \"'~s\" p_35))"
"(let-values()"
"(format"
"           \"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_35))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_36 pos-next_37 init_38 pos-cont?_39 val-cont?_40 all-cont?_41)"
"(make-sequence '(i)(cdr p_35))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_42)"
"(lambda(fold-var_43 pos_44)"
"(if(if pos-cont?_39(pos-cont?_39 pos_44) #t)"
"(let-values(((i_45)(pos->vals_36 pos_44)))"
"(if(if val-cont?_40(val-cont?_40 i_45) #t)"
"(let-values(((fold-var_46)"
"(let-values(((fold-var_47) fold-var_43))"
"(let-values(((fold-var_48)"
"(let-values()"
"(cons"
"                                                                            (let-values () (format \" ~s\" i_45))"
" fold-var_47))))"
"(values fold-var_48)))))"
"(if(if all-cont?_41(all-cont?_41 pos_44 i_45) #t)"
"(for-loop_42 fold-var_46(pos-next_37 pos_44))"
" fold-var_46))"
" fold-var_43))"
" fold-var_43))))"
" for-loop_42)"
" null"
" init_38)))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_49)"
"(let-values(((name_50)(1/resolved-module-path-name r_49)))(if(pair? name_50)(car name_50) name_50))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_51)"
"(begin"
"(if(let-values(((or-part_52)(symbol? p_51)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(if(path? p_51)(complete-path? p_51) #f)))"
"(if or-part_53"
" or-part_53"
"(if(pair? p_51)"
"(if(pair?(cdr p_51))"
"(if(list? p_51)"
"(if(let-values(((or-part_54)(symbol?(car p_51))))"
"(if or-part_54 or-part_54(if(path?(car p_51))(complete-path?(car p_51)) #f)))"
"(let-values(((lst_55)(cdr p_51)))"
"(begin"
"(if(list? lst_55)(void)(let-values()(in-list lst_55)))"
"((letrec-values(((for-loop_56)"
"(lambda(result_57 lst_58)"
"(if(pair? lst_58)"
"(let-values(((s_59)(unsafe-car lst_58)))"
"(let-values(((result_60)"
"(let-values(((result_61) result_57))"
"(let-values(((result_62)"
"(let-values()"
"(let-values()(symbol? s_59)))))"
"(values result_62)))))"
"(if(not((lambda x_63(not result_60)) s_59))"
"(for-loop_56 result_60(unsafe-cdr lst_58))"
" result_60)))"
" result_57))))"
" for-loop_56)"
" #t"
" lst_55)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_51)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_51)))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_64)"
"(let-values(((name_65)(1/resolved-module-path-name r_64)))"
"(let-values(((root-name_66)(if(pair? name_65)(car name_65) name_65)))"
"(let-values(((root-mod-path_67)(if(path? root-name_66) root-name_66(list 'quote root-name_66))))"
"(if(pair? name_65)(list* 'submod root-mod-path_67(cdr name_65)) root-mod-path_67))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_68 make-_69 ?_70 -ref_71 -set!_72)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_103 port_104 mode_105)"
"(begin"
"                           (write-string \"#<module-path-index\" port_104)"
"(if(top-level-module-path-index? r_103)"
"                             (let-values () (fprintf port_104 \":top-level\"))"
"(if(module-path-index-path r_103)"
"(let-values()"
"(let-values(((l_106)"
"((letrec-values(((loop_107)"
"(lambda(r_108)"
"(if(not r_108)"
"(let-values() null)"
"(if(1/resolved-module-path? r_108)"
"                                                                       (let-values () (list \"+\" (format \"~a\" r_108)))"
"(if(module-path-index-path r_108)"
"(let-values()"
"(cons"
"(format"
"                                                                             \"~.s\""
"(module-path-index-path r_108))"
"(loop_107(module-path-index-base r_108))))"
"(if(module-path-index-resolved r_108)"
"(let-values()"
"(list"
"                                                                              \"+\""
"(format"
"                                                                               \"~a\""
"(module-path-index-resolved r_108))))"
"(let-values() null))))))))"
" loop_107)"
" r_103)))"
"(fprintf"
" port_104"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_106)"
"(alt-reverse"
"(let-values(((lst_109)(cdr l_106)))"
"(begin"
"(if(list? lst_109)(void)(let-values()(in-list lst_109)))"
"((letrec-values(((for-loop_110)"
"(lambda(fold-var_111 lst_112)"
"(if(pair? lst_112)"
"(let-values(((i_113)(unsafe-car lst_112)))"
"(let-values(((fold-var_114)"
"(let-values(((fold-var_115)"
" fold-var_111))"
"(let-values(((fold-var_116)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                      \" ~a\""
" i_113))"
" fold-var_115))))"
"(values fold-var_116)))))"
"(for-loop_110 fold-var_114(unsafe-cdr lst_112))))"
" fold-var_111))))"
" for-loop_110)"
" null"
" lst_109))))))))"
"(if(module-path-index-resolved r_103)"
"                                 (let-values () (fprintf port_104 \"=~a\" (module-path-index-resolved r_103)))"
"(void))))"
"                           (write-string \">\" port_104))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_117 b_118 eql?_119)"
"(if(eql?_119(module-path-index-path a_117)(module-path-index-path b_118))"
"(eql?_119(module-path-index-base a_117)(module-path-index-base b_118))"
" #f))"
"(lambda(a_120 hash-code_121)"
"(+"
"(hash-code_121(module-path-index-path a_120))"
"(hash-code_121(module-path-index-base a_120))))"
"(lambda(a_122 hash-code_123)"
"(+"
"(hash-code_123(module-path-index-path a_122))"
"(hash-code_123(module-path-index-base a_122)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_68"
" make-_69"
" ?_70"
"(make-struct-field-accessor -ref_71 0 'path)"
"(make-struct-field-accessor -ref_71 1 'base)"
"(make-struct-field-accessor -ref_71 2 'resolved)"
"(make-struct-field-accessor -ref_71 3 'shift-cache)"
"(make-struct-field-mutator -set!_72 2 'resolved)"
"(make-struct-field-mutator -set!_72 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_124 base_125)(1/module-path-index-join path_124 base_125))"
"((name_126)(make-self-module-path-index(1/make-resolved-module-path name_126)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_127)"
"(lambda(mpi5_128 load?3_129 load?4_130)"
"(let-values(((mpi_131) mpi5_128))"
"(let-values(((load?_132)(if load?4_130 load?3_129 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_131)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_131)))"
"(let-values(((or-part_133)(module-path-index-resolved mpi_131)))"
"(if or-part_133"
" or-part_133"
"(let-values(((mod-name_134)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_131)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_131)"
" load?_132)"
" #f"
" load?_132)))"
"(begin"
"(if(1/resolved-module-path? mod-name_134)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_134)))"
"(set-module-path-index-resolved! mpi_131 mod-name_134)"
" mod-name_134)))))))))))"
"(case-lambda"
"((mpi_135)(module-path-index-resolve6_127 mpi_135 #f #f))"
"((mpi_136 load?3_137)(module-path-index-resolve6_127 mpi_136 load?3_137 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_138)"
"(if(module-path-index-resolved mpi_138)"
"(let-values()"
"(let-values(((path_139 base_140)(1/module-path-index-split mpi_138)))"
"(1/module-path-index-join path_139 base_140)))"
"(let-values() mpi_138))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_141)"
"(lambda(mod-path10_142 base11_143 submod8_144 submod9_145)"
"(let-values(((mod-path_146) mod-path10_142))"
"(let-values(((base_147) base11_143))"
"(let-values(((submod_148)(if submod9_145 submod8_144 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_149)(not mod-path_146)))"
"(if or-part_149 or-part_149(1/module-path? mod-path_146)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_146)))"
"(if(let-values(((or-part_150)(not base_147)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)(1/resolved-module-path? base_147)))"
"(if or-part_151 or-part_151(1/module-path-index? base_147)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_147)))"
"(if(let-values(((or-part_152)(not submod_148)))"
"(if or-part_152"
" or-part_152"
"(if(pair? submod_148)(if(list? submod_148)(andmap2 symbol? submod_148) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_148)))"
"(if(if(not mod-path_146) base_147 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_147))"
"(void))"
"(if(if submod_148 mod-path_146 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_146"
"                                 \"given submodule list\""
" submod_148))"
"(void))"
"(if submod_148"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_148))))"
"(let-values()"
"(let-values(((keep-base_153)"
"((letrec-values(((loop_154)"
"(lambda(mod-path_155)"
"(if(path? mod-path_155)"
"(let-values() #f)"
"(if(if(pair? mod-path_155)"
"(eq? 'quote(car mod-path_155))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_155)"
"(let-values() #f)"
"(if(if(pair? mod-path_155)"
"(eq? 'submod(car mod-path_155))"
" #f)"
"(let-values()(loop_154(cadr mod-path_155)))"
"(let-values() base_147))))))))"
" loop_154)"
" mod-path_146)))"
"(module-path-index2.1 mod-path_146 keep-base_153 #f #f))))))))))))"
"(case-lambda"
"((mod-path_156 base_157)(module-path-index-join12_141 mod-path_156 base_157 #f #f))"
"((mod-path_158 base_159 submod8_160)(module-path-index-join12_141 mod-path_158 base_159 submod8_160 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_161 load?_162)"
"(if(1/module-path-index? base_161)(1/module-path-index-resolve base_161 load?_162) base_161)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_163)"
"(begin"
"(if(1/module-path-index? mpi_163)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_163)))"
"(values(module-path-index-path mpi_163)(module-path-index-base mpi_163)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_164)"
"(begin"
"(if(1/module-path-index? mpi_164)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_164)))"
"(if(not(module-path-index-path mpi_164))"
"(let-values(((r_165)(module-path-index-resolved mpi_164)))"
"(if r_165(let-values(((p_166)(1/resolved-module-path-name r_165)))(if(pair? p_166)(cdr p_166) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_167)(module-path-index2.1 #f #f name_167 #f))"
"((name_168 enclosing_169)"
"(make-self-module-path-index"
"(let-values(((name23_170) name_168)"
"((temp24_171)(if enclosing_169(1/module-path-index-resolve enclosing_169) #f)))"
"(if(variable-reference-constant?(#%variable-reference build-module-name20.1))"
"(build-module-name18.1 #f #f name23_170 temp24_171)"
"(build-module-name20.1 name23_170 temp24_171)))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_172)"
"(let-values(((r_173)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_172))))"
"(let-values(((or-part_174)"
"(let-values(((e_175)(hash-ref generic-self-mpis r_173 #f)))"
"(if e_175(ephemeron-value e_175) #f))))"
"(if or-part_174"
" or-part_174"
"(let-values(((mpi_176)(module-path-index2.1 #f #f r_173 #f)))"
"(begin(hash-set! generic-self-mpis r_173(make-ephemeron r_173 mpi_176)) mpi_176)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_177)"
"(let-values(((name_178)(1/resolved-module-path-name r_177)))"
"(1/make-resolved-module-path"
"(if(symbol? name_178) generic-module-name(cons generic-module-name(cdr name_178)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_179)"
"(let-values(((r_180)(module-path-index-resolved mpi_179)))"
"(if r_180"
"(let-values()"
"(set-module-path-index-resolved! mpi_179(resolved-module-path-to-generic-resolved-module-path r_180)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_181 from-mpi_182 to-mpi_183)"
"(if(eq? mpi_181 from-mpi_182)"
"(let-values() to-mpi_183)"
"(let-values()"
"(let-values(((base_184)(module-path-index-base mpi_181)))"
"(if(not base_184)"
"(let-values() mpi_181)"
"(let-values()"
"(let-values(((shifted-base_185)(module-path-index-shift base_184 from-mpi_182 to-mpi_183)))"
"(if(eq? shifted-base_185 base_184)"
"(let-values() mpi_181)"
"(let-values(((c14585_186)"
"(shift-cache-ref(module-path-index-shift-cache shifted-base_185) mpi_181)))"
"(if c14585_186"
" c14585_186"
"(let-values()"
"(let-values(((shifted-mpi_187)"
"(module-path-index2.1(module-path-index-path mpi_181) shifted-base_185 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_185) mpi_181 shifted-mpi_187)"
" shifted-mpi_187))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_188)"
"(let-values(((or-part_189)(module-path-index-shift-cache mpi_188)))"
"(if or-part_189"
" or-part_189"
"(let-values(((cache_190)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_188 cache_190) cache_190))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_191 v_192)"
"(if cache_191"
"(let-values(((b_193)(weak-box-value cache_191)))(if b_193(hash-ref(unbox b_193) v_192 #f) #f))"
" #f)))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_194 v_195 r_196)"
"(let-values(((b_197)(weak-box-value cache_194)))"
"(if b_197(let-values()(set-box! b_197(hash-set(unbox b_197) v_195 r_196)))(void)))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_198)(eq? top-level-module-path-index mpi_198)))"
"(define-values"
"(core-module-name-resolver)"
"(case-lambda"
"((name_201 from-namespace_202)(void))"
"((p_203 enclosing_204 source-stx-stx_205 load?_206)"
"(begin"
"(if(1/module-path? p_203)"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_203)))"
"(if(let-values(((or-part_207)(not enclosing_204)))"
"(if or-part_207 or-part_207(1/resolved-module-path? enclosing_204)))"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_204)))"
"(if(if(list? p_203)(if(=(length p_203) 2)(if(eq? 'quote(car p_203))(symbol?(cadr p_203)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_203)))"
"        (if (if (list? p_203) (if (eq? 'submod (car p_203)) (equal? \"..\" (cadr p_203)) #f) #f)"
"(let-values()"
"(let-values(((lst_208)(cdr p_203)))"
"(begin"
"(if(list? lst_208)(void)(let-values()(in-list lst_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(enclosing_210 lst_211)"
"(if(pair? lst_211)"
"(let-values(((s_212)(unsafe-car lst_211)))"
"(let-values(((enclosing_213)"
"(let-values(((enclosing_214) enclosing_210))"
"(let-values(((enclosing_215)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:367:9_216)"
" build-module-name20.1)"
"((s25_217) s_212)"
"((enclosing26_218) enclosing_214)"
"((p27_219) p_203))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p27_219"
" #t"
" s25_217"
" enclosing26_218)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:367:9_216"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p27_219)"
" s25_217"
" enclosing26_218))))))"
"(values enclosing_215)))))"
"(for-loop_209 enclosing_213(unsafe-cdr lst_211))))"
" enclosing_210))))"
" for-loop_209)"
" enclosing_204"
" lst_208))))"
"          (if (if (list? p_203) (if (eq? 'submod (car p_203)) (equal? \".\" (cadr p_203)) #f) #f)"
"(let-values()"
"(let-values(((lst_220)(cddr p_203)))"
"(begin"
"(if(list? lst_220)(void)(let-values()(in-list lst_220)))"
"((letrec-values(((for-loop_221)"
"(lambda(enclosing_222 lst_223)"
"(if(pair? lst_223)"
"(let-values(((s_224)(unsafe-car lst_223)))"
"(let-values(((enclosing_225)"
"(let-values(((enclosing_226) enclosing_222))"
"(let-values(((enclosing_227)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:372:9_228)"
" build-module-name20.1)"
"((s28_229) s_224)"
"((enclosing29_230) enclosing_226)"
"((p30_231) p_203))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p30_231"
" #t"
" s28_229"
" enclosing29_230)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:372:9_228"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p30_231)"
" s28_229"
" enclosing29_230))))))"
"(values enclosing_227)))))"
"(for-loop_221 enclosing_225(unsafe-cdr lst_223))))"
" enclosing_222))))"
" for-loop_221)"
" enclosing_204"
" lst_220))))"
"(if(if(list? p_203)(eq? 'submod(car p_203)) #f)"
"(let-values()"
"(let-values(((base_232)((1/current-module-name-resolver)(cadr p_203) enclosing_204 #f #f)))"
"(let-values(((lst_233)(cddr p_203)))"
"(begin"
"(if(list? lst_233)(void)(let-values()(in-list lst_233)))"
"((letrec-values(((for-loop_234)"
"(lambda(enclosing_235 lst_236)"
"(if(pair? lst_236)"
"(let-values(((s_237)(unsafe-car lst_236)))"
"(let-values(((enclosing_238)"
"(let-values(((enclosing_239) enclosing_235))"
"(let-values(((enclosing_240)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:377:11_241)"
" build-module-name20.1)"
"((s31_242) s_237)"
"((enclosing32_243)"
" enclosing_239)"
"((p33_244) p_203))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p33_244"
" #t"
" s31_242"
" enclosing32_243)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:377:11_241"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p33_244)"
" s31_242"
" enclosing32_243))))))"
"(values enclosing_240)))))"
"(for-loop_234 enclosing_238(unsafe-cdr lst_236))))"
" enclosing_235))))"
" for-loop_234)"
" base_232"
" lst_233)))))"
"              (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_203))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_245 original15_246 name16_247 enclosing17_248)"
"(let-values(((name_249) name16_247))"
"(let-values(((enclosing_250) enclosing17_248))"
"(let-values(((orig-name_251)(if original15_246 original14_245 name_249)))"
"(let-values()"
"(let-values(((enclosing-module-name_252)"
"(if enclosing_250(1/resolved-module-path-name enclosing_250) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_252)"
"(let-values() name_249)"
"(if(symbol? enclosing-module-name_252)"
"(let-values()(list enclosing-module-name_252 name_249))"
"                   (if (equal? name_249 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_252)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_251))"
"(if(= 2(length enclosing-module-name_252))"
"(let-values()(car enclosing-module-name_252))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_252)))))))"
"(let-values()(append enclosing-module-name_252(list name_249))))))))))))))"
"(define-values"
"(unpack19.1$1)"
"(lambda(given-kws_253 given-args_254 name16_255 enclosing17_256)"
"(let-values(((original15_257)(pair? given-kws_253)))"
"(let-values(((original14_258)(if original15_257(car given-args_254)(void))))"
"(build-module-name18.1 original14_258 original15_257 name16_255 enclosing17_256)))))"
"(define-values"
"(build-module-name20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_259 given-argc_260)"
"(if(= given-argc_260 4)"
"(let-values(((l1_261) given-kws_259))"
"(let-values(((l1_262)(if(null? l1_261) l1_261(if(eq?(car l1_261) '#:original)(cdr l1_261) l1_261))))"
"(null? l1_262)))"
" #f))"
"(case-lambda"
"((given-kws_263 given-args_264 name_265 enclosing_266)"
"(unpack19.1$1 given-kws_263 given-args_264 name_265 enclosing_266)))"
" null"
" '(#:original)"
"(let-values(((build-module-name_267)"
"(case-lambda((name_268 enclosing_269)(unpack19.1$1 null null name_268 enclosing_269)))))"
" build-module-name_267)))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
" core-module-name-resolver"
"(lambda(v_270)"
"(begin"
"(if(if(procedure? v_270)(if(procedure-arity-includes? v_270 2)(procedure-arity-includes? v_270 4) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-name-resolver"
"            \"(and/c (procedure-arity-includes/c 2) (procedure-arity-includes/c 4))\""
" v_270)))"
" v_270))))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_271)"
"(begin"
"(if(let-values(((or-part_272)(not r_271)))(if or-part_272 or-part_272(1/resolved-module-path? r_271)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_271)))"
" r_271))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_273)"
"(begin"
"(if(let-values(((or-part_274)(not s_273)))"
"(if or-part_274"
" or-part_274"
"(let-values(((or-part_275)(symbol? s_273)))"
"(if or-part_275 or-part_275(if(path? s_273)(complete-path? s_273) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
"            \"(or/c #f symbol? (and/c path? complete-path?))\""
" s_273)))"
" s_273))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_276)"
"(let-values(((current-name_277)(1/current-module-declare-name)))"
"(let-values(((root-name_278)"
"(if current-name_277"
"(resolved-module-path-root-name current-name_277)"
"(if(pair? default-name_276)(car default-name_276) default-name_276))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_276)(cons root-name_278(cdr default-name_276)) root-name_278))))))"
"(void)"
"(void)"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 0)))"
"(begin"
"(unsafe-struct-set! v_102 0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
"                                 (if write?_112 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_115))"
"                                (fprintf port_111 (if write?_112 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
"                                  (fprintf port_111 \"#<promise:!running!~a>\" r_116)"
"                                  (fprintf port_111 \"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c41571_117)(object-name v_114)))"
"(if c41571_117"
"                                    ((lambda (n_118) (fprintf port_111 \"#<promise:~a>\" n_118)) c41571_117)"
"                                    (let-values () (display \"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 0)))"
"(if(null? v_114)"
"                                  (let-values () (fprintf port_111 \"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
"                                      (fprintf port_111 (if write?_112 \"#<promise!~s>\" \"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_111)"
"                                        (let-values (((fmt_119) (if write?_112 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
"                                        (display \")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" #t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 0 'val)"
"(make-struct-field-mutator -set!_130 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_146 make-_147 ?_148 -ref_149 -set!_150)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))))"
"(values struct:_146 make-_147 ?_148)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_181)(raise(reraise-val this_181)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))))"
"(values struct:_161 make-_162 ?_163(make-struct-field-accessor -ref_164 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_182 make-_183 ?_184 -ref_185 -set!_186)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_202 port_203 write?_204)"
"                         (fprintf port_203 (if write?_204 \"#<running:~s>\" \"#<running:~a>\") (running-name this_202))))"
"(cons"
" prop:procedure"
"(lambda(this_205)"
"(let-values(((name_206)(running-name this_205)))"
"(if name_206"
"                             (error 'force \"reentrant promise `~.s'\" name_206)"
"                             (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))))"
"(values struct:_182 make-_183 ?_184(make-struct-field-accessor -ref_185 0 'name))))"
"(void)"
"(void)"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_23)((unsafe-struct-ref p_23 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))))"
"(values struct:_8 make-_9 ?_10)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))))"
"(values struct:_41 make-_42 ?_43(make-struct-field-accessor -ref_44 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 'thunk)"
"(make-struct-field-accessor -ref_64 1 'done-evt)"
"(make-struct-field-accessor -ref_64 2 'done-sema)"
"(make-struct-field-accessor -ref_64 3 'access-sema)"
"(make-struct-field-mutator -set!_65 0 'thunk))))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_127 make-_128 ?_129 -ref_130 -set!_131)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_142)"
"(let-values(((v_143)(unsafe-struct-ref p_142 0)))"
"(wrap-evt(if(running? v_143)(running-thread-thread v_143) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_144)"
"(let-values(((v_145)(unsafe-struct-ref p_144 0)))"
"(reify-result"
"(if(running-thread? v_145)"
"(let-values(((t_146)(running-thread-thread v_145)))"
"(let-values((()(begin(thread-wait t_146)(values))))"
"(let-values(((v_147)(unsafe-struct-ref p_144 0)))"
"(if(running-thread? v_147)"
"(error"
" 'force"
"                                       \"promise's thread terminated ~a\\n  promise: ~e\""
"                                       \"without result or exception\""
" p_144)"
" v_147))))"
" v_145))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))))"
"(values struct:_127 make-_128 ?_129)))"
"(void)"
"(void)"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) #f) #f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) #f) #f)))"
"(define-values"
"(phase<?)"
"(lambda(a_7 b_8)(if(not b_8)(let-values() #f)(if(not a_7)(let-values() #t)(let-values()(< a_7 b_8))))))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(void)"
"(void)"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 6 'context-triples)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'interned-props)"
"(make-struct-field-accessor -ref_4 9 'syntax-context)"
"(make-struct-field-accessor -ref_4 10 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_71)"
"(serialize-state1.1"
" reachable-scopes_71"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_72 state_73)"
"(let-values(((or-part_74)(hash-ref(serialize-state-scopes state_73) scs_72 #f)))"
"(if or-part_74 or-part_74(begin(hash-set!(serialize-state-scopes state_73) scs_72 scs_72) scs_72)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_75 state_76)"
"(let-values(((or-part_77)(hash-ref(serialize-state-shifted-multi-scopes state_76) sms_75 #f)))"
"(if or-part_77"
" or-part_77"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_76) sms_75 sms_75) sms_75)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_78 state_79)"
"(if(null? mpi-shifts_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_80)(intern-mpi-shifts(cdr mpi-shifts_78) state_79)))"
"(let-values(((tail-table_81)"
"(let-values(((or-part_82)(hash-ref(serialize-state-mpi-shifts state_79) tail_80 #f)))"
"(if or-part_82"
" or-part_82"
"(let-values(((ht_83)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_79) tail_80 ht_83) ht_83))))))"
"(let-values(((or-part_84)(hash-ref tail-table_81(car mpi-shifts_78) #f)))"
"(if or-part_84"
" or-part_84"
"(let-values(((v_85)(cons(car mpi-shifts_78) tail_80)))"
"(begin(hash-set! tail-table_81(car mpi-shifts_78) v_85) v_85))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_86 sms_87 mpi-shifts_88 state_89)"
"(let-values(((scs-ht_90)"
"(let-values(((or-part_92)(hash-ref(serialize-state-context-triples state_89) scs_86 #f)))"
"(if or-part_92"
" or-part_92"
"(let-values(((ht_93)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_89) scs_86 ht_93) ht_93))))))"
"(let-values(((sms-ht_91)"
"(let-values(((or-part_94)(hash-ref scs-ht_90 sms_87 #f)))"
"(if or-part_94"
" or-part_94"
"(let-values(((ht_95)(make-hasheq)))(begin(hash-set! scs-ht_90 sms_87 ht_95) ht_95))))))"
"(let-values(((or-part_96)(hash-ref sms-ht_91 mpi-shifts_88 #f)))"
"(if or-part_96"
" or-part_96"
"(let-values(((vec_97)(vector-immutable scs_86 sms_87 mpi-shifts_88)))"
"(begin(hash-set! sms-ht_91 mpi-shifts_88 vec_97) vec_97))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_98 get-preserved-props_99 state_100)"
"(let-values(((v_101)(hash-ref(serialize-state-props state_100) all-props_98 'no)))"
"(if(eq? v_101 'no)"
"(let-values()"
"(let-values(((preserved-props_102)(get-preserved-props_99)))"
"(let-values(((p_103)"
"(if(zero?(hash-count preserved-props_102))"
"(let-values() #f)"
"(let-values(((c22697_104)"
"(hash-ref(serialize-state-interned-props state_100) preserved-props_102 #f)))"
"(if c22697_104"
"((lambda(p_105) p_105) c22697_104)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_100)"
" preserved-props_102"
" preserved-props_102)"
" preserved-props_102)))))))"
"(begin(hash-set!(serialize-state-props state_100) all-props_98 p_103) p_103))))"
"(let-values() v_101)))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_106 v_107)"
"(let-values(((b_108)(serialize-state-syntax-context state_106)))(set-box! b_108(cons v_107(unbox b_108))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_109)"
"(let-values(((b_110)(serialize-state-syntax-context state_109)))"
"(if(null?(unbox b_110)) #f(car(unbox b_110))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_111)"
"(let-values(((b_112)(serialize-state-syntax-context state_111)))(set-box! b_112(cdr(unbox b_112))))))"
"(void)"
"(void)"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8)))))))))))"
"(void)"
"(void)"
"(define-values"
"(datum-map)"
"(let-values(((datum-map5_1)"
"(lambda(s3_2 f4_3 seen1_4 seen2_5)"
"(let-values(((s_6) s3_2))"
"(let-values(((f_7) f4_3))"
"(let-values(((seen_8)(if seen2_5 seen1_4 #f)))"
"(let-values()"
"((letrec-values(((loop_9)"
"(lambda(tail?_10 s_11 prev-depth_12 prev-seen_13)"
"(let-values(((depth_14)(add1 prev-depth_12)))"
"(let-values(((seen_15)"
"(if(if prev-seen_13"
"(if(> depth_14 32)(datum-has-elements? s_11) #f)"
" #f)"
"(let-values()"
"(if(hash-ref prev-seen_13 s_11 #f)"
"(let-values()"
"((hash-ref prev-seen_13 'cycle-fail) s_11))"
"(let-values()(hash-set prev-seen_13 s_11 #t))))"
"(let-values() prev-seen_13))))"
"(if(null? s_11)"
"(let-values()(f_7 tail?_10 s_11))"
"(if(pair? s_11)"
"(let-values()"
"(f_7"
" tail?_10"
"(cons"
"(loop_9 #f(car s_11) depth_14 seen_15)"
"(loop_9 #t(cdr s_11) depth_14 seen_15))))"
"(if(let-values(((or-part_16)(symbol? s_11)))"
"(if or-part_16"
" or-part_16"
"(let-values(((or-part_17)(boolean? s_11)))"
"(if or-part_17 or-part_17(number? s_11)))))"
"(let-values()(f_7 #f s_11))"
"(if(vector? s_11)"
"(let-values()"
"(f_7"
" #f"
"(vector->immutable-vector"
"(let-values(((len_18)(vector-length s_11)))"
"(begin"
"(if(exact-nonnegative-integer? len_18)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                       \"exact-nonnegative-integer?\""
" len_18)))"
"(let-values(((v_19)(make-vector len_18 0)))"
"(begin"
"(if(zero? len_18)"
"(void)"
"(let-values()"
"(let-values(((vec_20 len_21)"
"(let-values(((vec_22) s_11))"
"(begin"
"(if(vector? vec_22)"
"(void)"
"(let-values()"
"(in-vector vec_22)))"
"(values"
" vec_22"
"(unsafe-vector-length"
" vec_22))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_23)"
"(lambda(i_24 pos_25)"
"(if(unsafe-fx<"
" pos_25"
" len_21)"
"(let-values(((e_26)"
"(unsafe-vector-ref"
" vec_20"
" pos_25)))"
"(let-values(((i_27)"
"(let-values(((i_28)"
" i_24))"
"(let-values(((i_29)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_19"
" i_28"
"(let-values()"
"(loop_9"
" #f"
" e_26"
" depth_14"
" seen_15)))"
"(unsafe-fx+"
" 1"
" i_28)))))"
"(values"
" i_29)))))"
"(if(not"
"((lambda x_30"
"(unsafe-fx="
" i_27"
" len_18))"
" e_26))"
"(for-loop_23"
" i_27"
"(unsafe-fx+"
" 1"
" pos_25))"
" i_27)))"
" i_24))))"
" for-loop_23)"
" 0"
" 0)))))"
" v_19)))))))"
"(if(box? s_11)"
"(let-values()"
"(f_7"
" #f"
"(box-immutable"
"(loop_9 #f(unbox s_11) depth_14 seen_15))))"
"(let-values(((c23117_31)"
"(immutable-prefab-struct-key s_11)))"
"(if c23117_31"
"((lambda(key_32)"
"(f_7"
" #f"
"(apply"
" make-prefab-struct"
" key_32"
"(alt-reverse"
"(let-values(((v*_33 start*_34 stop*_35 step*_36)"
"(normalise-inputs"
" 'in-vector"
"                                                                                     \"vector\""
"(lambda(x_37)(vector? x_37))"
"(lambda(x_38)"
"(unsafe-vector-length x_38))"
"(struct->vector s_11)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 idx_41)"
"(if(unsafe-fx<"
" idx_41"
" stop*_35)"
"(let-values(((e_42)"
"(unsafe-vector-ref"
" v*_33"
" idx_41)))"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44)"
" fold-var_40))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_9"
" #f"
" e_42"
" depth_14"
" seen_15))"
" fold-var_44))))"
"(values"
" fold-var_45)))))"
"(for-loop_39"
" fold-var_43"
"(unsafe-fx+"
" idx_41"
" 1))))"
" fold-var_40))))"
" for-loop_39)"
" null"
" start*_34)))))))"
" c23117_31)"
"(if(if(hash? s_11)(immutable? s_11) #f)"
"(let-values()"
"(if(hash-eq? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_46) s_11))"
"(begin"
"(if((lambda(ht_47)(hash? ht_47)) ht_46)"
"(void)"
"(let-values()(default-in-hash ht_46)))"
"((letrec-values(((for-loop_48)"
"(lambda(table_49 i_50)"
"(if i_50"
"(let-values(((k_51"
" v_52)"
"(hash-iterate-key+value"
" ht_46"
" i_50)))"
"(let-values(((table_53)"
"(let-values(((table_54)"
" table_49))"
"(let-values(((table_55)"
"(let-values()"
"(let-values(((key_56"
" val_57)"
"(let-values()"
"(values"
" k_51"
"(loop_9"
" #f"
" v_52"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_54"
" key_56"
" val_57)))))"
"(values"
" table_55)))))"
"(for-loop_48"
" table_53"
"(hash-iterate-next"
" ht_46"
" i_50))))"
" table_49))))"
" for-loop_48)"
" '#hasheq()"
"(hash-iterate-first ht_46))))))"
"(if(hash-eqv? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_58) s_11))"
"(begin"
"(if((lambda(ht_59)(hash? ht_59))"
" ht_58)"
"(void)"
"(let-values()"
"(default-in-hash ht_58)))"
"((letrec-values(((for-loop_60)"
"(lambda(table_61 i_62)"
"(if i_62"
"(let-values(((k_63"
" v_64)"
"(hash-iterate-key+value"
" ht_58"
" i_62)))"
"(let-values(((table_65)"
"(let-values(((table_66)"
" table_61))"
"(let-values(((table_67)"
"(let-values()"
"(let-values(((key_68"
" val_69)"
"(let-values()"
"(values"
" k_63"
"(loop_9"
" #f"
" v_64"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_66"
" key_68"
" val_69)))))"
"(values"
" table_67)))))"
"(for-loop_60"
" table_65"
"(hash-iterate-next"
" ht_58"
" i_62))))"
" table_61))))"
" for-loop_60)"
" '#hasheqv()"
"(hash-iterate-first ht_58))))))"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_70) s_11))"
"(begin"
"(if((lambda(ht_71)(hash? ht_71))"
" ht_70)"
"(void)"
"(let-values()"
"(default-in-hash ht_70)))"
"((letrec-values(((for-loop_72)"
"(lambda(table_73 i_74)"
"(if i_74"
"(let-values(((k_75"
" v_76)"
"(hash-iterate-key+value"
" ht_70"
" i_74)))"
"(let-values(((table_77)"
"(let-values(((table_78)"
" table_73))"
"(let-values(((table_79)"
"(let-values()"
"(let-values(((key_80"
" val_81)"
"(let-values()"
"(values"
" k_75"
"(loop_9"
" #f"
" v_76"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_78"
" key_80"
" val_81)))))"
"(values"
" table_79)))))"
"(for-loop_72"
" table_77"
"(hash-iterate-next"
" ht_70"
" i_74))))"
" table_73))))"
" for-loop_72)"
" '#hash()"
"(hash-iterate-first ht_70)))))))))"
"(let-values()(f_7 #f s_11)))))))))))))))"
" loop_9)"
" #f"
" s_6"
" 0"
" seen_8))))))))"
"(case-lambda"
"((s_82 f_83)(datum-map5_1 s_82 f_83 #f #f))"
"((s_84 f_85 seen1_86)(datum-map5_1 s_84 f_85 seen1_86 #t)))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_87)"
"(let-values(((or-part_88)(pair? d_87)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_89)(vector? d_87)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)(box? d_87)))"
"(if or-part_90"
" or-part_90"
"(let-values(((or-part_91)(immutable-prefab-struct-key d_87)))"
"(if or-part_91"
" or-part_91"
"(if(hash? d_87)(if(immutable? d_87)(positive?(hash-count d_87)) #f) #f)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_21)(if(preserved-property-value? v_21)(preserved-property-value-content v_21) v_21)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_23 syntax?_24)"
"(datum-map"
" v_23"
"(lambda(tail?_25 v_26)"
"(begin"
"(if(let-values(((or-part_27)(null? v_26)))"
"(if or-part_27"
" or-part_27"
"(let-values(((or-part_28)(boolean? v_26)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_29)(symbol? v_26)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(number? v_26)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(char? v_26)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(string? v_26)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(bytes? v_26)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(regexp? v_26)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(syntax?_24 v_26)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(pair? v_26)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(vector? v_26)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(box? v_26)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(hash? v_26)))"
"(if or-part_39"
" or-part_39"
"(immutable-prefab-struct-key"
" v_26)))))))))))))))))))))))))))"
"(void)"
"           (let-values () (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_26)))"
" v_26))"
" disallow-cycles$1)))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_40) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_40))))"
"(void)"
"(void)"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_61 reach_62)"
"(let-values(((prop_63)(syntax-scope-propagations s_61)))"
"(begin"
"(reach_62(if prop_63((propagation-ref prop_63) s_61)(syntax-content s_61)))"
"(reach_62(syntax-scopes s_61))"
"(reach_62(syntax-shifted-multi-scopes s_61))"
"(let-values(((ht_64)(syntax-props s_61)))"
"(begin"
"(if((lambda(ht_65)(if(hash? ht_65)(immutable? ht_65) #f)) ht_64)"
"(void)"
"(let-values()(default-in-immutable-hash ht_64)))"
"((letrec-values(((for-loop_66)"
"(lambda(fold-var_67 i_68)"
"(if i_68"
"(let-values(((k_69 v_70)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_64"
" i_68)))"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72) fold-var_67))"
"(if(preserved-property-value?"
"(plain-property-value v_70))"
"(let-values(((fold-var_73) fold-var_72))"
"(let-values(((fold-var_74)"
"(let-values()"
"(begin"
"(let-values()"
"(reach_62 v_70))"
"(void)))))"
"(values fold-var_74)))"
" fold-var_72))))"
"(for-loop_66"
" fold-var_71"
"(unsafe-immutable-hash-iterate-next ht_64 i_68))))"
" fold-var_67))))"
" for-loop_66)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_64))))))))"
"(cons"
" prop:serialize"
"(lambda(s_75 ser-push!_76 state_77)"
"(let-values(((prop_78)(syntax-scope-propagations s_75)))"
"(let-values(((content_79)"
"(if prop_78((propagation-ref prop_78) s_75)(syntax-content s_75))))"
"(let-values(((properties_80)"
"(intern-properties"
"(syntax-props s_75)"
"(lambda()"
"(let-values(((ht_84)(syntax-props s_75)))"
"(begin"
"(if((lambda(ht_85)(hash? ht_85)) ht_84)"
"(void)"
"(let-values()(default-in-hash ht_84)))"
"((letrec-values(((for-loop_86)"
"(lambda(table_87 i_88)"
"(if i_88"
"(let-values(((k_89 v_90)"
"(hash-iterate-key+value"
" ht_84"
" i_88)))"
"(let-values(((table_91)"
"(let-values(((table_92)"
" table_87))"
"(if(preserved-property-value?"
" v_90)"
"(let-values(((table_93)"
" table_92))"
"(let-values(((table_94)"
"(let-values()"
"(let-values(((key_95"
" val_96)"
"(let-values()"
"(values"
" k_89"
"(check-value-to-preserve"
"(plain-property-value"
" v_90)"
" syntax?$1)))))"
"(hash-set"
" table_93"
" key_95"
" val_96)))))"
"(values table_94)))"
" table_92))))"
"(for-loop_86"
" table_91"
"(hash-iterate-next ht_84 i_88))))"
" table_87))))"
" for-loop_86)"
" '#hasheq()"
"(hash-iterate-first ht_84)))))"
" state_77)))"
"(let-values(((tamper_81)(serialize-tamper(syntax-tamper s_75))))"
"(let-values(((context-triple_82)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_75) state_77)"
"(intern-shifted-multi-scopes"
"(syntax-shifted-multi-scopes s_75)"
" state_77)"
"(intern-mpi-shifts(syntax-mpi-shifts s_75) state_77)"
" state_77)))"
"(let-values(((stx-state_83)(get-syntax-context state_77)))"
"(if(let-values(((or-part_97) properties_80))"
"(if or-part_97 or-part_97 tamper_81))"
"(let-values()"
"(begin"
"(ser-push!_76 'tag '#:syntax+props)"
"(push-syntax-context! state_77 #f)"
"(ser-push!_76 content_79)"
"(pop-syntax-context! state_77)"
"(ser-push!_76 'reference context-triple_82)"
"(ser-push!_76 'reference(syntax-srcloc s_75))"
"(ser-push!_76 properties_80)"
"(ser-push!_76 tamper_81)"
"(if stx-state_83"
"(let-values()(set-syntax-state-all-sharing?! stx-state_83 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_98)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_77)"
" s_75"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_98 'share)"
"(let-values()"
"(begin"
"(ser-push!_76 'tag '#:datum->syntax)"
"(ser-push!_76(syntax->datum$1 s_75))))"
"(if(eq? sharing-mode_98 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_76 'tag '#:syntax)(values))))"
"(let-values(((this-state_99)"
"(if(no-pair-syntax-in-cdr? content_79)"
"(syntax-state26.1"
" #t"
" context-triple_82"
"(syntax-srcloc s_75))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_77 this-state_99)"
"(values))))"
"(let-values((()(begin(ser-push!_76 content_79)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_77)"
"(values))))"
"(let-values(((new-sharing-mode_100)"
"(if(if this-state_99"
"(syntax-state-all-sharing?"
" this-state_99)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_77)"
" s_75"
" new-sharing-mode_100)"
"(if(if stx-state_83"
"(eq? new-sharing-mode_100 'none)"
" #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_83 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_76 'tag '#:syntax)"
"(push-syntax-context! state_77 #f)"
"(ser-push!_76 content_79)"
"(pop-syntax-context! state_77)))))"
"(ser-push!_76 'reference context-triple_82)"
"(ser-push!_76 'reference(syntax-srcloc s_75))"
"(if stx-state_83"
"(let-values()"
"(if(if(eq?"
" context-triple_82"
"(syntax-state-context-triple stx-state_83))"
"(equal?(syntax-srcloc s_75)(syntax-state-srcloc stx-state_83))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_83 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_101 port_102 mode_103)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_102) (values))))"
"(let-values(((srcloc_104)(syntax-srcloc s_101)))"
"(begin"
"(if srcloc_104"
"(let-values()"
"(let-values(((srcloc-str_105)(srcloc->string srcloc_104)))"
"(if srcloc-str_105"
"                                       (let-values () (fprintf port_102 \":~a\" srcloc-str_105))"
"(void))))"
"(void))"
"                               (fprintf port_102 \" ~.s\" (syntax->datum$1 s_101))"
"                               (write-string \">\" port_102)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'content)"
"(make-struct-field-accessor -ref_4 1 'scopes)"
"(make-struct-field-accessor -ref_4 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 3 'scope-propagations)"
"(make-struct-field-accessor -ref_4 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 5 'srcloc)"
"(make-struct-field-accessor -ref_4 6 'props)"
"(make-struct-field-accessor -ref_4 7 'inspector)"
"(make-struct-field-accessor -ref_4 8 'tamper)"
"(make-struct-field-mutator -set!_5 0 'content)"
"(make-struct-field-mutator -set!_5 3 'scope-propagations)"
"(make-struct-field-mutator -set!_5 8 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f #f))"
"(define-values(identifier?)(lambda(s_106)(if(syntax?$1 s_106)(symbol?(syntax-content s_106)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_107)(syntax-map s_107(lambda(tail?_108 x_109) x_109)(lambda(s_110 d_111) d_111) syntax-content)))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_112)"
"(lambda(stx-c6_113 s7_114 stx-l2_115 stx-p3_116 stx-l4_117 stx-p5_118)"
"(let-values(((stx-c_119) stx-c6_113))"
"(let-values(((s_120) s7_114))"
"(let-values(((stx-l_121)(if stx-l4_117 stx-l2_115 #f)))"
"(let-values(((stx-p_122)(if stx-p5_118 stx-p3_116 #f)))"
"(let-values()"
"(let-values(((wrap_123)"
"(lambda(content_124)"
"(syntax1.1"
" content_124"
"(if stx-c_119(syntax-scopes stx-c_119) empty-scopes)"
"(if stx-c_119"
"(syntax-shifted-multi-scopes stx-c_119)"
" empty-shifted-multi-scopes)"
" #f"
"(if stx-c_119(syntax-mpi-shifts stx-c_119) empty-mpi-shifts)"
"(if stx-l_121(syntax-srcloc stx-l_121) #f)"
"(if stx-p_122(syntax-props stx-p_122) empty-props)"
"(if stx-c_119(syntax-inspector stx-c_119) #f)"
"(if stx-c_119"
"(if(syntax-tamper stx-c_119)"
"(tamper-tainted-for-content content_124)"
" #f)"
" #f)))))"
"(non-syntax-map"
" s_120"
"(lambda(tail?_125 x_126)(if tail?_125 x_126(wrap_123 x_126)))"
"(lambda(s_127) s_127)"
" disallow-cycles))))))))))"
"(case-lambda"
"((stx-c_128 s_129)(datum->syntax8_112 stx-c_128 s_129 #f #f #f #f))"
"((stx-c_130 s_131 stx-l_132 stx-p3_133)(datum->syntax8_112 stx-c_130 s_131 stx-l_132 stx-p3_133 #t #t))"
"((stx-c_134 s_135 stx-l2_136)(datum->syntax8_112 stx-c_134 s_135 stx-l2_136 #f #t #f)))))"
"(define-values"
"(syntax-map)"
"(let-values(((syntax-map16_137)"
"(lambda(s12_138 f13_139 d->s14_140 s-e15_141 seen10_142 seen11_143)"
"(let-values(((s_144) s12_138))"
"(let-values(((f_145) f13_139))"
"(let-values(((d->s_146) d->s14_140))"
"(let-values(((s-e_147) s-e15_141))"
"(let-values(((seen_148)(if seen11_143 seen10_142 #f)))"
"(let-values()"
"((letrec-values(((loop_149)"
"(lambda(s_150)"
"(datum-map"
" s_150"
"(lambda(tail?_151 v_152)"
"(if(syntax?$1 v_152)"
"(let-values()(d->s_146 v_152(loop_149(s-e_147 v_152))))"
"(let-values()(f_145 tail?_151 v_152))))"
" seen_148))))"
" loop_149)"
" s_144))))))))))"
"(case-lambda"
"((s_153 f_154 d->s_155 s-e_156)(syntax-map16_137 s_153 f_154 d->s_155 s-e_156 #f #f))"
"((s_157 f_158 d->s_159 s-e_160 seen10_161)(syntax-map16_137 s_157 f_158 d->s_159 s-e_160 seen10_161 #t)))))"
"(define-values"
"(non-syntax-map)"
"(let-values(((non-syntax-map24_162)"
"(lambda(s22_163 f23_164 s->18_165 seen19_166 s->20_167 seen21_168)"
"(let-values(((s_169) s22_163))"
"(let-values(((f_170) f23_164))"
"(let-values(((s->_171)(if s->20_167 s->18_165(lambda(x_172) x_172))))"
"(let-values(((seen_173)(if seen21_168 seen19_166 #f)))"
"(let-values()"
"((letrec-values(((loop_174)"
"(lambda(s_175)"
"(datum-map"
" s_175"
"(lambda(tail?_176 v_177)"
"(if(syntax?$1 v_177)"
"(let-values()(s->_171 v_177))"
"(let-values()(f_170 tail?_176 v_177))))"
" seen_173))))"
" loop_174)"
" s_169)))))))))"
"(case-lambda"
"((s_178 f_179)(non-syntax-map24_162 s_178 f_179 #f #f #f #f))"
"((s_180 f_181 s->_182 seen19_183)(non-syntax-map24_162 s_180 f_181 s->_182 seen19_183 #t #t))"
"((s_184 f_185 s->18_186)(non-syntax-map24_162 s_184 f_185 s->18_186 #f #t #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_187) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_187))))"
"(define-values"
"(struct:syntax-state"
" syntax-state26.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_188 make-_189 ?_190 -ref_191 -set!_192)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_188"
" make-_189"
" ?_190"
"(make-struct-field-accessor -ref_191 0 'all-sharing?)"
"(make-struct-field-accessor -ref_191 1 'context-triple)"
"(make-struct-field-accessor -ref_191 2 'srcloc)"
"(make-struct-field-mutator -set!_192 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_218)"
"(if(pair? content_218)"
"(let-values()"
"((letrec-values(((loop_219)"
"(lambda(content_220)"
"(if(if(syntax?$1 content_220)(pair?(syntax-content content_220)) #f)"
"(let-values() #f)"
"(if(pair? content_220)"
"(let-values()(loop_219(cdr content_220)))"
"(let-values() #t))))))"
" loop_219)"
"(cdr content_218)))"
"(let-values() #t))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_221 context-triple_222 srcloc_223 props_224 tamper_225 inspector_226)"
"(syntax1.1"
" content_221"
"(vector-ref context-triple_222 0)"
"(vector-ref context-triple_222 1)"
" #f"
"(vector-ref context-triple_222 2)"
" srcloc_223"
"(if props_224"
"(let-values(((ht_227) props_224))"
"(begin"
"(if((lambda(ht_228)(if(hash? ht_228)(immutable? ht_228) #f)) ht_227)"
"(void)"
"(let-values()(default-in-immutable-hash ht_227)))"
"((letrec-values(((for-loop_229)"
"(lambda(table_230 i_231)"
"(if i_231"
"(let-values(((k_232 v_233)(unsafe-immutable-hash-iterate-key+value ht_227 i_231)))"
"(let-values(((table_234)"
"(let-values(((table_235) table_230))"
"(let-values(((table_236)"
"(let-values()"
"(let-values(((key_237 val_238)"
"(let-values()"
"(values"
" k_232"
"(preserved-property-value1.1"
" v_233)))))"
"(hash-set table_235 key_237 val_238)))))"
"(values table_236)))))"
"(for-loop_229 table_234(unsafe-immutable-hash-iterate-next ht_227 i_231))))"
" table_230))))"
" for-loop_229)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_227))))"
" empty-props)"
" inspector_226"
"(deserialize-tamper tamper_225))))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_239 context-triple_240 srcloc_241 inspector_242)"
"(let-values(((s_243)(deserialize-syntax #f context-triple_240 srcloc_241 #f #f inspector_242)))"
"(datum->syntax$1 s_243 content_239 s_243 s_243))))"
"(void)"
"(void)"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_49 ser-push!_50 state_51)"
"(begin"
"(ser-push!_50 'tag '#:table-with-bulk-bindings)"
"(ser-push!_50(table-with-bulk-bindings-syms/serialize twbb_49))"
"(ser-push!_50(table-with-bulk-bindings-bulk-bindings twbb_49))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'syms)"
"(make-struct-field-accessor -ref_22 1 'syms/serialize)"
"(make-struct-field-accessor -ref_22 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_52 bulk-bindings_53)(table-with-bulk-bindings1.1 syms_52 syms_52 bulk-bindings_53)))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_54 make-_55 ?_56 -ref_57 -set!_58)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                      (cons prop:reach-scopes (lambda (sms_79 reach_80) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_81 ser-push!_82 state_83)"
"(begin"
"(ser-push!_82 'tag '#:bulk-binding-at)"
"(ser-push!_82(bulk-binding-at-scopes bba_81))"
"(ser-push!_82(bulk-binding-at-bulk bba_81))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_54"
" make-_55"
" ?_56"
"(make-struct-field-accessor -ref_57 0 'scopes)"
"(make-struct-field-accessor -ref_57 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_84 bulk_85)(bulk-binding-at2.1 scopes_84 bulk_85)))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_86 make-_87 ?_88 -ref_89 -set!_90)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_86"
" make-_87"
" ?_88"
"(make-struct-field-accessor -ref_89 0 'get-symbols)"
"(make-struct-field-accessor -ref_89 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_111 s_112 extra-shifts_113)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_111))"
" b_111"
"(append extra-shifts_113(if s_112(syntax-mpi-shifts s_112) null)))))"
"(define-values(bulk-binding-create)(lambda(b_114)(bulk-binding-class-create(bulk-binding-ref b_114))))"
"(define-values(binding-table-empty?)(lambda(bt_115)(if(hash? bt_115)(zero?(hash-count bt_115)) #f)))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_116 scopes_117 sym_118 binding_119 just-for-nominal?_120)"
"(if(hash? bt_116)"
"(let-values()(hash-set bt_116 sym_118(hash-set(hash-ref bt_116 sym_118 '#hash()) scopes_117 binding_119)))"
"(let-values()"
"(let-values(((new-syms_121)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_116)"
" scopes_117"
" sym_118"
" binding_119"
" just-for-nominal?_120)))"
"(let-values(((new-syms/serialize_122)"
"(if just-for-nominal?_120"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_116))"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_116)"
"(table-with-bulk-bindings-syms/serialize bt_116))"
"(let-values() new-syms_121)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_116)"
" scopes_117"
" sym_118"
" binding_119"
" #f))))))"
"(let-values(((the-struct_123) bt_116))"
"(if(table-with-bulk-bindings? the-struct_123)"
"(let-values(((syms7_124) new-syms_121)((syms/serialize8_125) new-syms/serialize_122))"
"(table-with-bulk-bindings1.1"
" syms7_124"
" syms/serialize8_125"
"(table-with-bulk-bindings-bulk-bindings the-struct_123)))"
"                (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_123)))))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_126 scopes_127 bulk_128)"
"(if(table-with-bulk-bindings? bt_126)"
"(let-values()"
"(let-values(((new-syms_129)"
"(remove-matching-bindings(table-with-bulk-bindings-syms bt_126) scopes_127 bulk_128)))"
"(let-values(((new-syms/serialize_130)"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_126)"
"(table-with-bulk-bindings-syms/serialize bt_126))"
" new-syms_129"
"(remove-matching-bindings"
"(table-with-bulk-bindings-syms/serialize bt_126)"
" scopes_127"
" bulk_128))))"
"(table-with-bulk-bindings1.1"
" new-syms_129"
" new-syms/serialize_130"
"(cons(bulk-binding-at2.1 scopes_127 bulk_128)(table-with-bulk-bindings-bulk-bindings bt_126))))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_126 bt_126 null) scopes_127 bulk_128)))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_131 scopes_132 bulk_133)"
"(let-values(((bulk-symbols_134)(bulk-binding-symbols bulk_133 #f null)))"
"(if(<(hash-count syms_131)(hash-count bulk-symbols_134))"
"(let-values()"
"(let-values(((ht_135) syms_131))"
"(begin"
"(if((lambda(ht_136)(if(hash? ht_136)(immutable? ht_136) #f)) ht_135)"
"(void)"
"(let-values()(default-in-immutable-hash ht_135)))"
"((letrec-values(((for-loop_137)"
"(lambda(syms_138 i_139)"
"(if i_139"
"(let-values(((sym_140 sym-bindings_141)"
"(unsafe-immutable-hash-iterate-key+value ht_135 i_139)))"
"(let-values(((syms_142)"
"(let-values(((syms_143) syms_138))"
"(let-values(((syms_144)"
"(let-values()"
"(if(hash-ref bulk-symbols_134 sym_140 #f)"
"(remove-matching-binding"
" syms_143"
" sym_140"
" sym-bindings_141"
" scopes_132)"
" syms_143))))"
"(values syms_144)))))"
"(for-loop_137 syms_142(unsafe-immutable-hash-iterate-next ht_135 i_139))))"
" syms_138))))"
" for-loop_137)"
" syms_131"
"(unsafe-immutable-hash-iterate-first ht_135)))))"
"(let-values()"
"(let-values(((ht_145) bulk-symbols_134))"
"(begin"
"(if((lambda(ht_146)(if(hash? ht_146)(immutable? ht_146) #f)) ht_145)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_145)))"
"((letrec-values(((for-loop_147)"
"(lambda(syms_148 i_149)"
"(if i_149"
"(let-values(((sym_150)(unsafe-immutable-hash-iterate-key ht_145 i_149)))"
"(let-values(((syms_151)"
"(let-values(((syms_152) syms_148))"
"(let-values(((syms_153)"
"(let-values()"
"(let-values(((sym-bindings_154)"
"(hash-ref syms_152 sym_150 #f)))"
"(if sym-bindings_154"
"(remove-matching-binding"
" syms_152"
" sym_150"
" sym-bindings_154"
" scopes_132)"
" syms_152)))))"
"(values syms_153)))))"
"(for-loop_147 syms_151(unsafe-immutable-hash-iterate-next ht_145 i_149))))"
" syms_148))))"
" for-loop_147)"
" syms_131"
"(unsafe-immutable-hash-iterate-first ht_145)))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_155 sym_156 sym-bindings_157 scopes_158)"
"(hash-set syms_155 sym_156(hash-remove sym-bindings_157 scopes_158))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_159 scs_160 s_161 extra-shifts_162)"
"(let-values(((ht_163 bulk-bindings_164)"
"(if(hash? table_159)"
"(values table_159 null)"
"(values"
"(table-with-bulk-bindings-syms table_159)"
"(table-with-bulk-bindings-bulk-bindings table_159)))))"
"(set-union"
"(let-values(((ht_165) ht_163))"
"(begin"
"(if((lambda(ht_166)(hash? ht_166)) ht_165)(void)(let-values()(default-in-hash ht_165)))"
"((letrec-values(((for-loop_167)"
"(lambda(table_168 i_169)"
"(if i_169"
"(let-values(((sym_170 at-sym_171)(hash-iterate-key+value ht_165 i_169)))"
"(let-values(((table_172)"
"(let-values(((table_173) table_168))"
"(if(let-values(((ht_174) at-sym_171))"
"(begin"
"(if((lambda(ht_175)(hash? ht_175)) ht_174)"
"(void)"
"(let-values()(default-in-hash-keys ht_174)))"
"((letrec-values(((for-loop_176)"
"(lambda(result_177 i_178)"
"(if i_178"
"(let-values(((an-scs_179)"
"(hash-iterate-key"
" ht_174"
" i_178)))"
"(let-values(((result_180)"
"(let-values(((result_181)"
" result_177))"
"(let-values(((result_182)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_179"
" scs_160)))))"
"(values"
" result_182)))))"
"(if(not"
"((lambda x_183 result_180)"
" an-scs_179))"
"(for-loop_176"
" result_180"
"(hash-iterate-next"
" ht_174"
" i_178))"
" result_180)))"
" result_177))))"
" for-loop_176)"
" #f"
"(hash-iterate-first ht_174))))"
"(let-values(((table_184) table_173))"
"(let-values(((table_185)"
"(let-values()"
"(let-values(((key_186 val_187)"
"(let-values()"
"(values"
"(let-values() sym_170)"
" #t))))"
"(hash-set table_184 key_186 val_187)))))"
"(values table_185)))"
" table_173))))"
"(for-loop_167 table_172(hash-iterate-next ht_165 i_169))))"
" table_168))))"
" for-loop_167)"
" '#hasheq()"
"(hash-iterate-first ht_165))))"
"(let-values(((lst_188) bulk-bindings_164))"
"(begin"
"(if(list? lst_188)(void)(let-values()(in-list lst_188)))"
"((letrec-values(((for-loop_189)"
"(lambda(table_190 lst_191)"
"(if(pair? lst_191)"
"(let-values(((bba_192)(unsafe-car lst_191)))"
"(let-values(((table_193)"
"(let-values(((table_194) table_190))"
"(if(subset?(bulk-binding-at-scopes bba_192) scs_160)"
"(let-values(((ht_195)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_192)"
" s_161"
" extra-shifts_162)))"
"(begin"
"(if((lambda(ht_196)(hash? ht_196)) ht_195)"
"(void)"
"(let-values()(default-in-hash-keys ht_195)))"
"((letrec-values(((for-loop_197)"
"(lambda(table_198 i_199)"
"(if i_199"
"(let-values(((sym_200)"
"(hash-iterate-key"
" ht_195"
" i_199)))"
"(let-values(((table_201)"
"(let-values(((table_202)"
" table_198))"
"(let-values(((table_203)"
"(let-values()"
"(let-values(((key_204"
" val_205)"
"(let-values()"
"(values"
"(let-values()"
" sym_200)"
" #t))))"
"(hash-set"
" table_202"
" key_204"
" val_205)))))"
"(values"
" table_203)))))"
"(for-loop_197"
" table_201"
"(hash-iterate-next ht_195 i_199))))"
" table_198))))"
" for-loop_197)"
" table_194"
"(hash-iterate-first ht_195))))"
" table_194))))"
"(for-loop_189 table_193(unsafe-cdr lst_191))))"
" table_190))))"
" for-loop_189)"
" '#hasheq()"
" lst_188)))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_206 state_207)"
"(let-values(((or-part_208)(hash-ref(serialize-state-bindings-intern state_207) bt_206 #f)))"
"(if or-part_208"
" or-part_208"
"(let-values(((reachable-scopes_209)(serialize-state-reachable-scopes state_207)))"
"(let-values(((new-syms_210)"
"(let-values(((ht_213)"
"(if(hash? bt_206) bt_206(table-with-bulk-bindings-syms/serialize bt_206))))"
"(begin"
"(if((lambda(ht_214)(if(hash? ht_214)(immutable? ht_214) #f)) ht_213)"
"(void)"
"(let-values()(default-in-immutable-hash ht_213)))"
"((letrec-values(((for-loop_215)"
"(lambda(table_216 i_217)"
"(if i_217"
"(let-values(((sym_218 bindings-for-sym_219)"
"(unsafe-immutable-hash-iterate-key+value ht_213 i_217)))"
"(let-values(((table_220)"
"(let-values(((new-bindings-for-sym_221)"
"(let-values(((ht_222)"
" bindings-for-sym_219))"
"(begin"
"(if((lambda(ht_223)"
"(if(hash? ht_223)"
"(immutable? ht_223)"
" #f))"
" ht_222)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_222)))"
"((letrec-values(((for-loop_224)"
"(lambda(table_225"
" i_226)"
"(if i_226"
"(let-values(((scopes_227"
" binding_228)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_222"
" i_226)))"
"(let-values(((table_229)"
"(let-values(((table_230)"
" table_225))"
"(if(subset?"
" scopes_227"
" reachable-scopes_209)"
"(let-values(((table_231)"
" table_230))"
"(let-values(((table_232)"
"(let-values()"
"(let-values(((key_233"
" val_234)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_227"
" state_207)"
" binding_228))))"
"(hash-set"
" table_231"
" key_233"
" val_234)))))"
"(values"
" table_232)))"
" table_230))))"
"(for-loop_224"
" table_229"
"(unsafe-immutable-hash-iterate-next"
" ht_222"
" i_226))))"
" table_225))))"
" for-loop_224)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_222))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_235)"
"(lambda(table_236)"
"(let-values()"
"(let-values(((table_237)"
"(let-values(((table_238)"
" table_236))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_221))"
"(let-values(((table_239)"
" table_238))"
"(let-values(((table_240)"
"(let-values()"
"(let-values(((key_241"
" val_242)"
"(let-values()"
"(values"
" sym_218"
" new-bindings-for-sym_221))))"
"(hash-set"
" table_239"
" key_241"
" val_242)))))"
"(values"
" table_240)))"
" table_238))))"
" table_237)))))"
" for-loop_235)"
" table_216)))))"
"(for-loop_215"
" table_220"
"(unsafe-immutable-hash-iterate-next ht_213 i_217))))"
" table_216))))"
" for-loop_215)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_213))))))"
"(let-values(((new-bulk-bindings_211)"
"(if(hash? bt_206)"
" null"
"(alt-reverse"
"(let-values(((lst_243)(table-with-bulk-bindings-bulk-bindings bt_206)))"
"(begin"
"(if(list? lst_243)(void)(let-values()(in-list lst_243)))"
"((letrec-values(((for-loop_244)"
"(lambda(fold-var_245 lst_246)"
"(if(pair? lst_246)"
"(let-values(((bba_247)(unsafe-car lst_246)))"
"(let-values(((fold-var_248)"
"(let-values(((fold-var_249) fold-var_245))"
"(if(subset?"
"(bulk-binding-at-scopes bba_247)"
" reachable-scopes_209)"
"(let-values(((fold-var_250) fold-var_249))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_252)"
" bba_247))"
"(if(bulk-binding-at?"
" the-struct_252)"
"(let-values(((scopes9_253)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_247)"
" state_207)))"
"(bulk-binding-at2.1"
" scopes9_253"
"(bulk-binding-at-bulk"
" the-struct_252)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                     \"bulk-binding-at?\""
" the-struct_252))))"
" fold-var_250))))"
"(values fold-var_251)))"
" fold-var_249))))"
"(for-loop_244 fold-var_248(unsafe-cdr lst_246))))"
" fold-var_245))))"
" for-loop_244)"
" null"
" lst_243)))))))"
"(let-values(((new-bt_212)"
"(if(pair? new-bulk-bindings_211)"
"(table-with-bulk-bindings1.1 new-syms_210 new-syms_210 new-bulk-bindings_211)"
" new-syms_210)))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_207) bt_206 new-bt_212)"
" new-bt_212)))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_254 reachable-scopes_255 reach_256 register-trigger_257)"
"(let-values(((ht_258)(if(hash? bt_254) bt_254(table-with-bulk-bindings-syms/serialize bt_254))))"
"(begin"
"(if((lambda(ht_259)(if(hash? ht_259)(immutable? ht_259) #f)) ht_258)"
"(void)"
"(let-values()(default-in-immutable-hash ht_258)))"
"((letrec-values(((for-loop_260)"
"(lambda(fold-var_261 i_262)"
"(if i_262"
"(let-values(((sym_263 bindings-for-sym_264)"
"(unsafe-immutable-hash-iterate-key+value ht_258 i_262)))"
"(let-values(((fold-var_265)"
"(let-values(((ht_266) bindings-for-sym_264))"
"(begin"
"(if((lambda(ht_267)(if(hash? ht_267)(immutable? ht_267) #f))"
" ht_266)"
"(void)"
"(let-values()(default-in-immutable-hash ht_266)))"
"((letrec-values(((for-loop_268)"
"(lambda(fold-var_269 i_270)"
"(if i_270"
"(let-values(((scopes_271 binding_272)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_266"
" i_270)))"
"(let-values(((fold-var_273)"
"(let-values(((fold-var_274)"
" fold-var_269))"
"(let-values(((fold-var_275)"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_271"
" binding_272"
" reachable-scopes_255"
" reach_256"
" register-trigger_257))"
"(void)))))"
"(values fold-var_275)))))"
"(for-loop_268"
" fold-var_273"
"(unsafe-immutable-hash-iterate-next"
" ht_266"
" i_270))))"
" fold-var_269))))"
" for-loop_268)"
" fold-var_261"
"(unsafe-immutable-hash-iterate-first ht_266))))))"
"(for-loop_260 fold-var_265(unsafe-immutable-hash-iterate-next ht_258 i_262))))"
" fold-var_261))))"
" for-loop_260)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_258))))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_276 binding_277 reachable-scopes_278 reach_279 register-trigger_280)"
"(let-values(((v_281)"
"(if(binding-reach-scopes? binding_277)((binding-reach-scopes-ref binding_277) binding_277) #f)))"
"(if v_281"
"(let-values()"
"(if(subset? scopes_276 reachable-scopes_278)"
"(let-values()(reach_279 v_281))"
"(let-values()"
"(let-values(((ht_282) scopes_276))"
"(begin"
"(if((lambda(ht_283)(if(hash? ht_283)(immutable? ht_283) #f)) ht_282)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_282)))"
"((letrec-values(((for-loop_284)"
"(lambda(fold-var_285 i_286)"
"(if i_286"
"(let-values(((sc_287)(unsafe-immutable-hash-iterate-key ht_282 i_286)))"
"(let-values(((fold-var_288)"
"(let-values(((fold-var_289) fold-var_285))"
"(if(set-member? reachable-scopes_278 sc_287)"
" fold-var_289"
"(let-values(((fold-var_290) fold-var_289))"
"(let-values(((fold-var_291)"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_280 sc_287 v_281))"
"(void)))))"
"(values fold-var_291)))))))"
"(for-loop_284"
" fold-var_288"
"(unsafe-immutable-hash-iterate-next ht_282 i_286))))"
" fold-var_285))))"
" for-loop_284)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_282)))))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(non-syntax-map"
" d_2"
"(lambda(tail?_3 x_4) x_4)"
"(lambda(sub-s_5)"
"(if(tamper-tainted?(syntax-tamper sub-s_5))"
"(let-values() sub-s_5)"
"(let-values()"
"(let-values(((the-struct_6) sub-s_5))"
"(if(syntax?$1 the-struct_6)"
"(let-values(((tamper6_7)(tamper-tainted-for-content(syntax-content sub-s_5))))"
"(syntax1.1"
"(syntax-content the-struct_6)"
"(syntax-scopes the-struct_6)"
"(syntax-shifted-multi-scopes the-struct_6)"
"(syntax-scope-propagations the-struct_6)"
"(syntax-mpi-shifts the-struct_6)"
"(syntax-srcloc the-struct_6)"
"(syntax-props the-struct_6)"
"(syntax-inspector the-struct_6)"
" tamper6_7))"
"               (raise-argument-error 'struct-copy \"syntax?\" the-struct_6)))))))))"
"(define-values(syntax-tainted?$1)(lambda(s_8)(tamper-tainted?(syntax-tamper s_8))))"
"(define-values(syntax-clean?)(lambda(s_9)(tamper-clean?(syntax-tamper s_9))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_10 insp_11)"
"(let-values(((t_12)(syntax-tamper s_10)))"
"(if(tamper-tainted? t_12)"
"(let-values() s_10)"
"(if(if t_12"
"(let-values(((or-part_13)(set-member? t_12 insp_11)))"
"(if or-part_13"
" or-part_13"
"(let-values(((ht_14) t_12))"
"(begin"
"(if((lambda(ht_15)(if(hash? ht_15)(immutable? ht_15) #f)) ht_14)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_14)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 i_18)"
"(if i_18"
"(let-values(((already-insp_19)"
"(unsafe-immutable-hash-iterate-key ht_14 i_18)))"
"(let-values(((result_20)"
"(let-values(((result_21) result_17))"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_19"
" insp_11)))))"
"(values result_22)))))"
"(if(not((lambda x_23 result_20) already-insp_19))"
"(for-loop_16"
" result_20"
"(unsafe-immutable-hash-iterate-next ht_14 i_18))"
" result_20)))"
" result_17))))"
" for-loop_16)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_14))))))"
" #f)"
"(let-values() s_10)"
"(let-values()"
"(let-values(((the-struct_24) s_10))"
"(if(syntax?$1 the-struct_24)"
"(let-values(((tamper7_25)(set-add(if t_12(remove-inferior t_12 insp_11)(seteq)) insp_11)))"
"(syntax1.1"
"(syntax-content the-struct_24)"
"(syntax-scopes the-struct_24)"
"(syntax-shifted-multi-scopes the-struct_24)"
"(syntax-scope-propagations the-struct_24)"
"(syntax-mpi-shifts the-struct_24)"
"(syntax-srcloc the-struct_24)"
"(syntax-props the-struct_24)"
"(syntax-inspector the-struct_24)"
" tamper7_25))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_24)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_26 insp_27)"
"(let-values(((ht_28) t_26))"
"(begin"
"(if((lambda(ht_29)(if(hash? ht_29)(immutable? ht_29) #f)) ht_28)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_28)))"
"((letrec-values(((for-loop_30)"
"(lambda(table_31 i_32)"
"(if i_32"
"(let-values(((already-insp_33)(unsafe-immutable-hash-iterate-key ht_28 i_32)))"
"(let-values(((table_34)"
"(let-values(((table_35) table_31))"
"(if(inspector-superior-or-same? insp_27 already-insp_33)"
" table_35"
"(let-values(((table_36) table_35))"
"(let-values(((table_37)"
"(let-values()"
"(let-values(((key_38 val_39)"
"(let-values()"
"(values"
"(let-values() already-insp_33)"
" #t))))"
"(hash-set table_36 key_38 val_39)))))"
"(values table_37)))))))"
"(for-loop_30 table_34(unsafe-immutable-hash-iterate-next ht_28 i_32))))"
" table_31))))"
" for-loop_30)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_28))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_40)"
"(lambda(s3_41 insp1_42 insp2_43)"
"(let-values(((s_44) s3_41))"
"(let-values(((insp_45)(if insp2_43 insp1_42 #f)))"
"(let-values()"
"(let-values(((t_46)(syntax-tamper s_44)))"
"(if(not(tamper-armed? t_46))"
"(let-values() s_44)"
"(if(not insp_45)"
"(let-values()"
"(let-values(((the-struct_47) s_44))"
"(if(syntax?$1 the-struct_47)"
"(let-values(((tamper8_48) #f))"
"(syntax1.1"
"(syntax-content the-struct_47)"
"(syntax-scopes the-struct_47)"
"(syntax-shifted-multi-scopes the-struct_47)"
"(syntax-scope-propagations the-struct_47)"
"(syntax-mpi-shifts the-struct_47)"
"(syntax-srcloc the-struct_47)"
"(syntax-props the-struct_47)"
"(syntax-inspector the-struct_47)"
" tamper8_48))"
"                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_47))))"
"(let-values()"
"(let-values(((new-t_49)(remove-inferior t_46 insp_45)))"
"(let-values(((the-struct_50) s_44))"
"(if(syntax?$1 the-struct_50)"
"(let-values(((tamper9_51)(if(not(set-empty? new-t_49)) new-t_49 #f)))"
"(syntax1.1"
"(syntax-content the-struct_50)"
"(syntax-scopes the-struct_50)"
"(syntax-shifted-multi-scopes the-struct_50)"
"(syntax-scope-propagations the-struct_50)"
"(syntax-mpi-shifts the-struct_50)"
"(syntax-srcloc the-struct_50)"
"(syntax-props the-struct_50)"
"(syntax-inspector the-struct_50)"
" tamper9_51))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_50))))))))))))))"
"(case-lambda((s_52)(syntax-disarm4_40 s_52 #f #f))((s_53 insp1_54)(syntax-disarm4_40 s_53 insp1_54 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_55 from-s_56)"
"(let-values(((t_57)(syntax-tamper s_55)))"
"(if(tamper-tainted? t_57)"
"(let-values() s_55)"
"(let-values()"
"(let-values(((from-t_58)(syntax-tamper from-s_56)))"
"(if(tamper-clean? from-t_58)"
"(let-values() s_55)"
"(if(tamper-tainted? from-t_58)"
"(let-values()"
"(let-values(((the-struct_59) s_55))"
"(if(syntax?$1 the-struct_59)"
"(let-values(((tamper10_60)(tamper-tainted-for-content(syntax-content s_55))))"
"(syntax1.1"
"(syntax-content the-struct_59)"
"(syntax-scopes the-struct_59)"
"(syntax-shifted-multi-scopes the-struct_59)"
"(syntax-scope-propagations the-struct_59)"
"(syntax-mpi-shifts the-struct_59)"
"(syntax-srcloc the-struct_59)"
"(syntax-props the-struct_59)"
"(syntax-inspector the-struct_59)"
" tamper10_60))"
"                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_59))))"
"(if(tamper-clean? t_57)"
"(let-values()"
"(let-values(((the-struct_61) s_55))"
"(if(syntax?$1 the-struct_61)"
"(let-values(((tamper11_62) from-t_58))"
"(syntax1.1"
"(syntax-content the-struct_61)"
"(syntax-scopes the-struct_61)"
"(syntax-shifted-multi-scopes the-struct_61)"
"(syntax-scope-propagations the-struct_61)"
"(syntax-mpi-shifts the-struct_61)"
"(syntax-srcloc the-struct_61)"
"(syntax-props the-struct_61)"
"(syntax-inspector the-struct_61)"
" tamper11_62))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_61))))"
"(let-values()"
"(let-values(((the-struct_63) s_55))"
"(if(syntax?$1 the-struct_63)"
"(let-values(((tamper12_64)"
"(let-values(((ht_65) from-t_58))"
"(begin"
"(if((lambda(ht_66)(if(hash? ht_66)(immutable? ht_66) #f)) ht_65)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_65)))"
"((letrec-values(((for-loop_67)"
"(lambda(t_68 i_69)"
"(if i_69"
"(let-values(((from-i_70)"
"(unsafe-immutable-hash-iterate-key"
" ht_65"
" i_69)))"
"(let-values(((t_71)"
"(let-values(((t_72) t_68))"
"(let-values(((t_73)"
"(let-values()"
"(if(set-member?"
" t_72"
" from-i_70)"
"(let-values() t_72)"
"(if(any-superior?"
" t_72"
" from-i_70)"
"(let-values()"
" t_72)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_72"
" from-i_70)"
" from-i_70))))))))"
"(values t_73)))))"
"(for-loop_67"
" t_71"
"(unsafe-immutable-hash-iterate-next ht_65 i_69))))"
" t_68))))"
" for-loop_67)"
" t_57"
"(unsafe-immutable-hash-iterate-first ht_65))))))"
"(syntax1.1"
"(syntax-content the-struct_63)"
"(syntax-scopes the-struct_63)"
"(syntax-shifted-multi-scopes the-struct_63)"
"(syntax-scope-propagations the-struct_63)"
"(syntax-mpi-shifts the-struct_63)"
"(syntax-srcloc the-struct_63)"
"(syntax-props the-struct_63)"
"(syntax-inspector the-struct_63)"
" tamper12_64))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_63)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_74)"
"(if(tamper-tainted?(syntax-tamper s_74))"
" s_74"
"(let-values(((the-struct_75) s_74))"
"(if(syntax?$1 the-struct_75)"
"(let-values(((tamper13_76)(tamper-tainted-for-content(syntax-content s_74))))"
"(syntax1.1"
"(syntax-content the-struct_75)"
"(syntax-scopes the-struct_75)"
"(syntax-shifted-multi-scopes the-struct_75)"
"(syntax-scope-propagations the-struct_75)"
"(syntax-mpi-shifts the-struct_75)"
"(syntax-srcloc the-struct_75)"
"(syntax-props the-struct_75)"
"(syntax-inspector the-struct_75)"
" tamper13_76))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_75))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_77 from-i_78)"
"(let-values(((ht_79) t_77))"
"(begin"
"(if((lambda(ht_80)(if(hash? ht_80)(immutable? ht_80) #f)) ht_79)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_79)))"
"((letrec-values(((for-loop_81)"
"(lambda(result_82 i_83)"
"(if i_83"
"(let-values(((i_84)(unsafe-immutable-hash-iterate-key ht_79 i_83)))"
"(let-values(((result_85)"
"(let-values(((result_86) result_82))"
"(let-values(((result_87)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_84 from-i_78)))))"
"(values result_87)))))"
"(if(not((lambda x_88 result_85) i_84))"
"(for-loop_81 result_85(unsafe-immutable-hash-iterate-next ht_79 i_83))"
" result_85)))"
" result_82))))"
" for-loop_81)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_79))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_89 i_90)"
"(let-values(((or-part_91)(eq? sup-i_89 i_90)))(if or-part_91 or-part_91(inspector-superior? sup-i_89 i_90)))))"
"(void)"
"(void)"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_21)(if(fallback? smss_21)(car(fallback-search-list smss_21)) smss_21)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_22)"
"(let-values(((l_23)(cdr(fallback-search-list smss_22))))(if(null?(cdr l_23))(car l_23)(fallback1.1 l_23)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_24 smss/maybe-fallback_25)"
"(fallback1.1"
"(cons"
" smss_24"
"(if(fallback? smss/maybe-fallback_25)"
"(fallback-search-list smss/maybe-fallback_25)"
"(list smss/maybe-fallback_25))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_26 f_27)"
"(if(fallback? smss_26)"
"(let-values(((l_28)(fallback-search-list smss_26)))(fallback1.1(cons(f_27(car l_28))(cdr l_28))))"
"(f_27 smss_26))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_29 f_30)"
"(if(fallback? smss_29)"
"(fallback1.1"
"(alt-reverse"
"(let-values(((lst_31)(fallback-search-list smss_29)))"
"(begin"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33 lst_34)"
"(if(pair? lst_34)"
"(let-values(((smss_35)(unsafe-car lst_34)))"
"(let-values(((fold-var_36)"
"(let-values(((fold-var_37) fold-var_33))"
"(let-values(((fold-var_38)"
"(let-values()"
"(cons(let-values()(f_30 smss_35)) fold-var_37))))"
"(values fold-var_38)))))"
"(for-loop_32 fold-var_36(unsafe-cdr lst_34))))"
" fold-var_33))))"
" for-loop_32)"
" null"
" lst_31)))))"
"(f_30 smss_29))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_39)(if(fallback? smss_39)(fallback-search-list smss_39)(list smss_39))))"
"(void)"
"(void)"
"(define-values(cache)(make-weak-box #f))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_1)(let-values(((c_2)(weak-box-value cache)))(if c_2(let-values()(hash-remove! c_2 sym_1))(void))))"
"(()(set! cache(make-weak-box(make-hasheq))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scopes entry-phase entry-binding)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()(make-struct-type 'entry #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'entry)))))"
"(values"
" struct:_3"
" make-_4"
" ?_5"
"(make-struct-field-accessor -ref_6 0 'scopes)"
"(make-struct-field-accessor -ref_6 1 'phase)"
"(make-struct-field-accessor -ref_6 2 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_33 phase_34 scopes_35)"
"(let-values(((c_36)(weak-box-value cache)))"
"(if c_36"
"(let-values(((v_37)(hash-ref c_36 sym_33 #f)))"
"(if v_37"
"(if(eqv? phase_34(entry-phase v_37))"
"(if(set=? scopes_35(entry-scopes v_37))(entry-binding v_37) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_38 phase_39 scopes_40 b_41)"
"(let-values(((c_42)(weak-box-value cache)))"
"(if(not c_42)"
"(let-values()(begin(clear-resolve-cache!)(resolve-cache-set! sym_38 phase_39 scopes_40 b_41)))"
"(let-values()(hash-set! c_42 sym_38(entry1.1 scopes_40 phase_39 b_41)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_31 reachable-scopes_32 reach_33 register-trigger_34)"
"(binding-table-register-reachable"
"(scope-binding-table s_31)"
" reachable-scopes_32"
" reach_33"
" register-trigger_34)))"
"(cons prop:reach-scopes(lambda(s_35 reach_36)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_37 ser-push!_38 state_39)"
"(if(binding-table-empty?(scope-binding-table s_37))"
"(let-values()(ser-push!_38 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_38 'tag '#:scope-fill!)"
"(ser-push!_38"
"(binding-table-prune-to-reachable(scope-binding-table s_37) state_39)))))))"
"(cons"
" prop:serialize"
"(lambda(s_40 ser-push!_41 state_42)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_42) s_40)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_40 top-level-common-scope)"
"(let-values()(ser-push!_41 'tag '#:scope))"
"(let-values()"
"(begin(ser-push!_41 'tag '#:scope+kind)(ser-push!_41(scope-kind s_40))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_43 port_44 mode_45)"
"(begin"
"                           (write-string \"#<scope:\" port_44)"
"(display(scope-id sc_43) port_44)"
"                           (write-string \":\" port_44)"
"(display(scope-kind sc_43) port_44)"
"                           (write-string \">\" port_44)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'id)"
"(make-struct-field-accessor -ref_4 1 'kind)"
"(make-struct-field-accessor -ref_4 2 'binding-table)"
"(make-struct-field-mutator -set!_5 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_46)(scope1.1(new-deserialize-scope-id!) kind_46 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_47 bt_48)(set-scope-binding-table! s_47 bt_48)))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_49 make-_50 ?_51 -ref_52 -set!_53)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_89 reach_90)(reach_90(multi-scope-scopes ms_89))))"
"(cons"
" prop:serialize"
"(lambda(ms_91 ser-push!_92 state_93)"
"(begin"
"(ser-push!_92 'tag '#:multi-scope)"
"(ser-push!_92(multi-scope-name ms_91))"
"(ser-push!_92(multi-scope-scopes ms_91))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_49"
" make-_50"
" ?_51"
"(make-struct-field-accessor -ref_52 0 'id)"
"(make-struct-field-accessor -ref_52 1 'name)"
"(make-struct-field-accessor -ref_52 2 'scopes)"
"(make-struct-field-accessor -ref_52 3 'shifted)"
"(make-struct-field-accessor -ref_52 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_94 scopes_95)"
"(multi-scope2.1(new-deserialize-scope-id!) name_94 scopes_95(box(hasheqv))(box(hash)))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_96 make-_97 ?_98 -ref_99 -set!_100)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_121 reach_122)(reach_122(representative-scope-owner s_121))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_123 ser-push!_124 state_125)"
"(begin"
"(ser-push!_124 'tag '#:representative-scope-fill!)"
"(ser-push!_124(binding-table-prune-to-reachable(scope-binding-table s_123) state_125))"
"(ser-push!_124(representative-scope-owner s_123)))))"
"(cons"
" prop:serialize"
"(lambda(s_126 ser-push!_127 state_128)"
"(begin"
"(ser-push!_127 'tag '#:representative-scope)"
"(ser-push!_127(scope-kind s_126))"
"(ser-push!_127(representative-scope-phase s_126)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_129 port_130 mode_131)"
"(begin"
"                           (write-string \"#<scope:\" port_130)"
"(display(scope-id sc_129) port_130)"
"(if(representative-scope-owner sc_129)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_130)"
"(display(multi-scope-id(representative-scope-owner sc_129)) port_130)))"
"(void))"
"                           (write-string \"@\" port_130)"
"(display(representative-scope-phase sc_129) port_130)"
"                           (write-string \">\" port_130)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_96"
" make-_97"
" ?_98"
"(make-struct-field-accessor -ref_99 0 'owner)"
"(make-struct-field-accessor -ref_99 1 'phase)"
"(make-struct-field-mutator -set!_100 0 'owner)"
"(make-struct-field-mutator -set!_100 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_132 phase_133)"
"(let-values(((v_134)(representative-scope3.1(new-deserialize-scope-id!) kind_132 #f #f phase_133))) v_134)))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_135 bt_136 owner_137)"
"(begin(deserialize-scope-fill! s_135 bt_136)(set-representative-scope-owner! s_135 owner_137))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_138 make-_139 ?_140 -ref_141 -set!_142)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_163 reach_164)(reach_164(shifted-multi-scope-multi-scope sms_163))))"
"(cons"
" prop:serialize"
"(lambda(sms_165 ser-push!_166 state_167)"
"(begin"
"(ser-push!_166 'tag '#:shifted-multi-scope)"
"(ser-push!_166(shifted-multi-scope-phase sms_165))"
"(ser-push!_166(shifted-multi-scope-multi-scope sms_165)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_168 port_169 mode_170)"
"(begin"
"                           (write-string \"#<scope:\" port_169)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_168)) port_169)"
"                           (write-string \"@\" port_169)"
"(display(shifted-multi-scope-phase sms_168) port_169)"
"                           (write-string \">\" port_169)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_138"
" make-_139"
" ?_140"
"(make-struct-field-accessor -ref_141 0 'phase)"
"(make-struct-field-accessor -ref_141 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_171 multi-scope_172)(intern-shifted-multi-scope phase_171 multi-scope_172)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_173 multi-scope_174)"
"(letrec-values(((transaction-loop_175)"
"(lambda(boxed-table_176 key_177 make_178)"
"(let-values(((or-part_179)(hash-ref(unbox boxed-table_176) phase_173 #f)))"
"(if or-part_179"
" or-part_179"
"(let-values(((val_180)(make_178)))"
"(let-values(((current_181)(unbox boxed-table_176)))"
"(let-values(((next_182)(hash-set current_181 key_177 val_180)))"
"(if(box-cas! boxed-table_176 current_181 next_182)"
" val_180"
"(transaction-loop_175 boxed-table_176 key_177 make_178))))))))))"
"(if(phase? phase_173)"
"(let-values()"
"(let-values(((or-part_183)(hash-ref(unbox(multi-scope-shifted multi-scope_174)) phase_173 #f)))"
"(if or-part_183"
" or-part_183"
"(transaction-loop_175"
"(multi-scope-shifted multi-scope_174)"
" phase_173"
"(lambda()(shifted-multi-scope4.1 phase_173 multi-scope_174))))))"
"(let-values()"
"(let-values(((or-part_184)(hash-ref(unbox(multi-scope-label-shifted multi-scope_174)) phase_173 #f)))"
"(if or-part_184"
" or-part_184"
"(transaction-loop_175"
"(multi-scope-label-shifted multi-scope_174)"
" phase_173"
"(lambda()(shifted-multi-scope4.1 phase_173 multi-scope_174))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_185 make-_186 ?_187 -ref_188 -set!_189)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_185 make-_186 ?_187(make-struct-field-accessor -ref_188 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_205)(scope1.1(new-scope-id!) kind_205 empty-binding-table)))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_206)"
"(lambda(name6_207 name7_208)"
"(let-values(((name_209)(if name7_208 name6_207 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_209(make-hasheqv)(box(hasheqv))(box(hash)))))))))"
"(case-lambda(()(new-multi-scope8_206 #f #f))((name6_210)(new-multi-scope8_206 name6_210 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_211 phase_212)"
"(let-values(((or-part_213)(hash-ref(multi-scope-scopes ms_211) phase_212 #f)))"
"(if or-part_213"
" or-part_213"
"(let-values(((s_214)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_211 phase_212)))"
"(begin(hash-set!(multi-scope-scopes ms_211) phase_212 s_214) s_214))))))"
"(define-values(scope>?)(lambda(sc1_215 sc2_216)(>(scope-id sc1_215)(scope-id sc2_216))))"
"(define-values(scope<?)(lambda(sc1_217 sc2_218)(<(scope-id sc1_217)(scope-id sc2_218))))"
"(define-values"
"(shifted-multi-scope<?)"
"(lambda(sms1_219 sms2_220)"
"(let-values(((ms1_221)(shifted-multi-scope-multi-scope sms1_219)))"
"(let-values(((ms2_222)(shifted-multi-scope-multi-scope sms2_220)))"
"(if(eq? ms1_221 ms2_222)"
"(let-values(((p1_223)(shifted-multi-scope-phase sms1_219))((p2_224)(shifted-multi-scope-phase sms2_220)))"
"(if(shifted-to-label-phase? p1_223)"
"(let-values()"
"(if(shifted-to-label-phase? p2_224)"
"(let-values()(phase<?(shifted-to-label-phase-from p1_223)(shifted-to-label-phase-from p2_224)))"
"(let-values() #f)))"
"(if(shifted-to-label-phase? p2_224)(let-values() #t)(let-values()(phase<? p1_223 p2_224)))))"
"(<(multi-scope-id ms1_221)(multi-scope-id ms2_222)))))))"
"(define-values"
"(apply-scope)"
"(lambda(s_225 sc_226 op_227 prop-op_228)"
"(if(shifted-multi-scope? sc_226)"
"(let-values(((the-struct_229) s_225))"
"(if(syntax?$1 the-struct_229)"
"(let-values(((shifted-multi-scopes37_230)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_225)"
"(lambda(smss_232)(op_227(fallback-first smss_232) sc_226))))"
"((scope-propagations38_231)"
"(if(datum-has-elements?(syntax-content s_225))"
"(prop-op_228"
"(syntax-scope-propagations s_225)"
" sc_226"
"(syntax-scopes s_225)"
"(syntax-shifted-multi-scopes s_225))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_229)"
"(syntax-scopes the-struct_229)"
" shifted-multi-scopes37_230"
" scope-propagations38_231"
"(syntax-mpi-shifts the-struct_229)"
"(syntax-srcloc the-struct_229)"
"(syntax-props the-struct_229)"
"(syntax-inspector the-struct_229)"
"(syntax-tamper the-struct_229)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_229)))"
"(let-values(((the-struct_233) s_225))"
"(if(syntax?$1 the-struct_233)"
"(let-values(((scopes39_234)(op_227(syntax-scopes s_225) sc_226))"
"((scope-propagations40_235)"
"(if(datum-has-elements?(syntax-content s_225))"
"(prop-op_228"
"(syntax-scope-propagations s_225)"
" sc_226"
"(syntax-scopes s_225)"
"(syntax-shifted-multi-scopes s_225))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_233)"
" scopes39_234"
"(syntax-shifted-multi-scopes the-struct_233)"
" scope-propagations40_235"
"(syntax-mpi-shifts the-struct_233)"
"(syntax-srcloc the-struct_233)"
"(syntax-props the-struct_233)"
"(syntax-inspector the-struct_233)"
"(syntax-tamper the-struct_233)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_233))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_236)"
"(let-values((()(begin(propagate-taint! s_236)(values))))"
"(let-values(((prop_237)(syntax-scope-propagations s_236)))"
"(if prop_237"
"(let-values(((new-content_238)"
"(non-syntax-map"
"(syntax-content s_236)"
"(lambda(tail?_239 x_240) x_240)"
"(lambda(sub-s_241)"
"(let-values(((the-struct_242) sub-s_241))"
"(if(syntax?$1 the-struct_242)"
"(let-values(((scopes41_243)"
"(propagation-apply prop_237(syntax-scopes sub-s_241) s_236))"
"((shifted-multi-scopes42_244)"
"(propagation-apply-shifted"
" prop_237"
"(syntax-shifted-multi-scopes sub-s_241)"
" s_236))"
"((scope-propagations43_245)"
"(propagation-merge"
" prop_237"
"(syntax-scope-propagations sub-s_241)"
"(syntax-scopes sub-s_241)"
"(syntax-shifted-multi-scopes sub-s_241))))"
"(syntax1.1"
"(syntax-content the-struct_242)"
" scopes41_243"
" shifted-multi-scopes42_244"
" scope-propagations43_245"
"(syntax-mpi-shifts the-struct_242)"
"(syntax-srcloc the-struct_242)"
"(syntax-props the-struct_242)"
"(syntax-inspector the-struct_242)"
"(syntax-tamper the-struct_242)))"
"                               (raise-argument-error 'struct-copy \"syntax?\" the-struct_242)))))))"
"(begin"
"(set-syntax-content! s_236 new-content_238)"
"(set-syntax-scope-propagations! s_236 #f)"
" new-content_238))"
"(syntax-content s_236))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_246)"
"(let-values(((content_247)(syntax-e/no-taint s_246)))"
"(if(not(tamper-armed?(syntax-tamper s_246)))"
"(let-values() content_247)"
"(if(datum-has-elements? content_247)"
"(let-values()(taint-content content_247))"
"(let-values() content_247))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_248)"
"(if(representative-scope? sc_248)"
"(intern-shifted-multi-scope(representative-scope-phase sc_248)(representative-scope-owner sc_248))"
" sc_248)))"
"(define-values"
"(add-scope)"
"(lambda(s_249 sc_250)(apply-scope s_249(generalize-scope sc_250) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_251 scs_252)"
"(let-values(((lst_253) scs_252))"
"(begin"
"(if(list? lst_253)(void)(let-values()(in-list lst_253)))"
"((letrec-values(((for-loop_254)"
"(lambda(s_255 lst_256)"
"(if(pair? lst_256)"
"(let-values(((sc_257)(unsafe-car lst_256)))"
"(let-values(((s_258)"
"(let-values(((s_259) s_255))"
"(let-values(((s_260)(let-values()(add-scope s_259 sc_257))))"
"(values s_260)))))"
"(for-loop_254 s_258(unsafe-cdr lst_256))))"
" s_255))))"
" for-loop_254)"
" s_251"
" lst_253)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_261 sc_262)(apply-scope s_261(generalize-scope sc_262) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_263 scs_264)"
"(let-values(((lst_265) scs_264))"
"(begin"
"(if(list? lst_265)(void)(let-values()(in-list lst_265)))"
"((letrec-values(((for-loop_266)"
"(lambda(s_267 lst_268)"
"(if(pair? lst_268)"
"(let-values(((sc_269)(unsafe-car lst_268)))"
"(let-values(((s_270)"
"(let-values(((s_271) s_267))"
"(let-values(((s_272)(let-values()(remove-scope s_271 sc_269))))"
"(values s_272)))))"
"(for-loop_266 s_270(unsafe-cdr lst_268))))"
" s_267))))"
" for-loop_266)"
" s_263"
" lst_265)))))"
"(define-values"
"(set-flip)"
"(lambda(s_273 e_274)(if(set-member? s_273 e_274)(set-remove s_273 e_274)(set-add s_273 e_274))))"
"(define-values"
"(flip-scope)"
"(lambda(s_275 sc_276)(apply-scope s_275(generalize-scope sc_276) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_277 scs_278)"
"(let-values(((lst_279) scs_278))"
"(begin"
"(if(list? lst_279)(void)(let-values()(in-list lst_279)))"
"((letrec-values(((for-loop_280)"
"(lambda(s_281 lst_282)"
"(if(pair? lst_282)"
"(let-values(((sc_283)(unsafe-car lst_282)))"
"(let-values(((s_284)"
"(let-values(((s_285) s_281))"
"(let-values(((s_286)(let-values()(flip-scope s_285 sc_283))))"
"(values s_286)))))"
"(for-loop_280 s_284(unsafe-cdr lst_282))))"
" s_281))))"
" for-loop_280)"
" s_277"
" lst_279)))))"
"(define-values"
"(push-scope)"
"(lambda(s_287 sms_288)"
"(let-values(((smss/maybe-fallbacks44_289) #f))"
"(let-values(((prev-result_290) #f))"
"(let-values(((push_291)"
"(lambda(smss/maybe-fallbacks_292)"
"(if(eq? smss/maybe-fallbacks44_289 smss/maybe-fallbacks_292)"
"(let-values() prev-result_290)"
"(let-values()"
"(let-values(((r_293)"
"(let-values()"
"(let-values(((smss_294)(fallback-first smss/maybe-fallbacks_292)))"
"(if(set-empty? smss_294)"
"(let-values()(set-add smss_294 sms_288))"
"(if(set-member? smss_294 sms_288)"
"(let-values() smss/maybe-fallbacks_292)"
"(let-values()"
"(fallback-push"
"(set-add smss_294 sms_288)"
" smss/maybe-fallbacks_292))))))))"
"(begin"
"(set! smss/maybe-fallbacks44_289 smss/maybe-fallbacks_292)"
"(set! prev-result_290 r_293)"
" r_293)))))))"
"(syntax-map"
" s_287"
"(lambda(tail?_295 x_296) x_296)"
"(lambda(s_297 d_298)"
"(let-values(((the-struct_299) s_297))"
"(if(syntax?$1 the-struct_299)"
"(let-values(((content45_300) d_298)"
"((shifted-multi-scopes46_301)(push_291(syntax-shifted-multi-scopes s_297))))"
"(syntax1.1"
" content45_300"
"(syntax-scopes the-struct_299)"
" shifted-multi-scopes46_301"
"(syntax-scope-propagations the-struct_299)"
"(syntax-mpi-shifts the-struct_299)"
"(syntax-srcloc the-struct_299)"
"(syntax-props the-struct_299)"
"(syntax-inspector the-struct_299)"
"(syntax-tamper the-struct_299)))"
"                 (raise-argument-error 'struct-copy \"syntax?\" the-struct_299))))"
" syntax-e/no-taint))))))"
"(define-values"
"(struct:propagation propagation10.1 propagation? propagation-prev-scs propagation-prev-smss propagation-scope-ops)"
"(let-values(((struct:_302 make-_303 ?_304 -ref_305 -set!_306)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'propagation)))))"
"(values"
" struct:_302"
" make-_303"
" ?_304"
"(make-struct-field-accessor -ref_305 0 'prev-scs)"
"(make-struct-field-accessor -ref_305 1 'prev-smss)"
"(make-struct-field-accessor -ref_305 2 'scope-ops))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_332 sc_333 prev-scs_334 prev-smss_335)"
"(if prop_332"
"(let-values(((the-struct_336) prop_332))"
"(if(propagation? the-struct_336)"
"(let-values(((scope-ops48_337)(hash-set(propagation-scope-ops prop_332) sc_333 'add)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_336)"
"(propagation-prev-smss the-struct_336)"
" scope-ops48_337))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_336)))"
"(propagation10.1 prev-scs_334 prev-smss_335(hasheq sc_333 'add)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_338 sc_339 prev-scs_340 prev-smss_341)"
"(if prop_338"
"(let-values(((the-struct_342) prop_338))"
"(if(propagation? the-struct_342)"
"(let-values(((scope-ops49_343)(hash-set(propagation-scope-ops prop_338) sc_339 'remove)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_342)"
"(propagation-prev-smss the-struct_342)"
" scope-ops49_343))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_342)))"
"(propagation10.1 prev-scs_340 prev-smss_341(hasheq sc_339 'remove)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_344 sc_345 prev-scs_346 prev-smss_347)"
"(if prop_344"
"(let-values(((ops_348)(propagation-scope-ops prop_344)))"
"(let-values(((current-op_349)(hash-ref ops_348 sc_345 #f)))"
"(if(if(eq? current-op_349 'flip)(= 1(hash-count ops_348)) #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_350) prop_344))"
"(if(propagation? the-struct_350)"
"(let-values(((scope-ops50_351)"
"(if(eq? current-op_349 'flip)"
"(hash-remove ops_348 sc_345)"
"(hash-set"
" ops_348"
" sc_345"
"(let-values(((tmp_352) current-op_349))"
"(if(equal? tmp_352 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_352 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_350)"
"(propagation-prev-smss the-struct_350)"
" scope-ops50_351))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_350)))))))"
"(propagation10.1 prev-scs_346 prev-smss_347(hasheq sc_345 'flip)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_353 scs_354 parent-s_355)"
"(if(not prop_353)"
"(let-values() scs_354)"
"(if(eq?(propagation-prev-scs prop_353) scs_354)"
"(let-values()(syntax-scopes parent-s_355))"
"(let-values()"
"(let-values(((ht_356)(propagation-scope-ops prop_353)))"
"(begin"
"(if((lambda(ht_357)(if(hash? ht_357)(immutable? ht_357) #f)) ht_356)"
"(void)"
"(let-values()(default-in-immutable-hash ht_356)))"
"((letrec-values(((for-loop_358)"
"(lambda(scs_359 i_360)"
"(if i_360"
"(let-values(((sc_361 op_362)"
"(unsafe-immutable-hash-iterate-key+value ht_356 i_360)))"
"(let-values(((scs_363)"
"(let-values(((scs_364) scs_359))"
"(if(not(shifted-multi-scope? sc_361))"
"(let-values(((scs_365) scs_364))"
"(let-values(((scs_366)"
"(let-values()"
"(let-values(((tmp_367) op_362))"
"(if(equal? tmp_367 'add)"
"(let-values()(set-add scs_365 sc_361))"
"(if(equal? tmp_367 'remove)"
"(let-values()"
"(set-remove scs_365 sc_361))"
"(let-values()"
"(set-flip scs_365 sc_361))))))))"
"(values scs_366)))"
" scs_364))))"
"(for-loop_358 scs_363(unsafe-immutable-hash-iterate-next ht_356 i_360))))"
" scs_359))))"
" for-loop_358)"
" scs_354"
"(unsafe-immutable-hash-iterate-first ht_356)))))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_368 smss_369 parent-s_370)"
"(if(not prop_368)"
"(let-values() smss_369)"
"(if(eq?(propagation-prev-smss prop_368) smss_369)"
"(let-values()(syntax-shifted-multi-scopes parent-s_370))"
"(let-values()"
"(let-values(((ht_371)(propagation-scope-ops prop_368)))"
"(begin"
"(if((lambda(ht_372)(if(hash? ht_372)(immutable? ht_372) #f)) ht_371)"
"(void)"
"(let-values()(default-in-immutable-hash ht_371)))"
"((letrec-values(((for-loop_373)"
"(lambda(smss_374 i_375)"
"(if i_375"
"(let-values(((sms_376 op_377)"
"(unsafe-immutable-hash-iterate-key+value ht_371 i_375)))"
"(let-values(((smss_378)"
"(let-values(((smss_379) smss_374))"
"(if(shifted-multi-scope? sms_376)"
"(let-values(((smss_380) smss_379))"
"(let-values(((smss_381)"
"(let-values()"
"(fallback-update-first"
" smss_380"
"(lambda(smss_382)"
"(let-values(((tmp_383) op_377))"
"(if(equal? tmp_383 'add)"
"(let-values()"
"(set-add smss_382 sms_376))"
"(if(equal? tmp_383 'remove)"
"(let-values()"
"(set-remove smss_382 sms_376))"
"(let-values()"
"(set-flip"
" smss_382"
" sms_376))))))))))"
"(values smss_381)))"
" smss_379))))"
"(for-loop_373 smss_378(unsafe-immutable-hash-iterate-next ht_371 i_375))))"
" smss_374))))"
" for-loop_373)"
" smss_369"
"(unsafe-immutable-hash-iterate-first ht_371)))))))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_384 base-prop_385 prev-scs_386 prev-smss_387)"
"(if(not prop_384)"
"(let-values() base-prop_385)"
"(if(not base-prop_385)"
"(let-values()"
"(if(if(eq?(propagation-prev-scs prop_384) prev-scs_386)"
"(eq?(propagation-prev-smss prop_384) prev-smss_387)"
" #f)"
"(let-values() prop_384)"
"(let-values()(propagation10.1 prev-scs_386 prev-smss_387(propagation-scope-ops prop_384)))))"
"(let-values()"
"(let-values(((new-ops_388)"
"(let-values(((ht_389)(propagation-scope-ops prop_384)))"
"(begin"
"(if((lambda(ht_390)(if(hash? ht_390)(immutable? ht_390) #f)) ht_389)"
"(void)"
"(let-values()(default-in-immutable-hash ht_389)))"
"((letrec-values(((for-loop_391)"
"(lambda(ops_392 i_393)"
"(if i_393"
"(let-values(((sc_394 op_395)"
"(unsafe-immutable-hash-iterate-key+value ht_389 i_393)))"
"(let-values(((ops_396)"
"(let-values(((ops_397) ops_392))"
"(let-values(((ops_398)"
"(let-values()"
"(let-values(((tmp_399) op_395))"
"(if(equal? tmp_399 'add)"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'add))"
"(if(equal? tmp_399 'remove)"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'remove))"
"(let-values()"
"(let-values(((current-op_400)"
"(hash-ref"
" ops_397"
" sc_394"
" #f)))"
"(let-values(((tmp_401)"
" current-op_400))"
"(if(equal?"
" tmp_401"
" 'add)"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'remove))"
"(if(equal?"
" tmp_401"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'add))"
"(if(equal?"
" tmp_401"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_397"
" sc_394))"
"(let-values()"
"(hash-set"
" ops_397"
" sc_394"
" 'flip))))))))))))))"
"(values ops_398)))))"
"(for-loop_391"
" ops_396"
"(unsafe-immutable-hash-iterate-next ht_389 i_393))))"
" ops_392))))"
" for-loop_391)"
"(propagation-scope-ops base-prop_385)"
"(unsafe-immutable-hash-iterate-first ht_389))))))"
"(if(zero?(hash-count new-ops_388))"
" #f"
"(let-values(((the-struct_402) base-prop_385))"
"(if(propagation? the-struct_402)"
"(let-values(((scope-ops51_403) new-ops_388))"
"(propagation10.1"
"(propagation-prev-scs the-struct_402)"
"(propagation-prev-smss the-struct_402)"
" scope-ops51_403))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_402))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_404 delta_405)"
"(if(zero-phase? delta_405)"
"(let-values() sms_404)"
"(if(label-phase? delta_405)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_404))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_404)))"
"(shifted-multi-scope-multi-scope sms_404)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_404))"
"(let-values() sms_404)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_405(shifted-multi-scope-phase sms_404))"
"(shifted-multi-scope-multi-scope sms_404))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_406 phase_407)"
"(if(eqv? phase_407 0)"
" s_406"
"(let-values()"
"(let-values(((smss52_408) #f))"
"(let-values(((prev-result_409) #f))"
"(let-values(((shift-all_410)"
"(lambda(smss_411)"
"(if(eq? smss52_408 smss_411)"
"(let-values() prev-result_409)"
"(let-values()"
"(let-values(((r_412)"
"(let-values()"
"(fallback-map"
" smss_411"
"(lambda(smss_413)"
"(let-values(((ht_414) smss_413))"
"(begin"
"(if((lambda(ht_415)(if(hash? ht_415)(immutable? ht_415) #f))"
" ht_414)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_414)))"
"((letrec-values(((for-loop_416)"
"(lambda(table_417 i_418)"
"(if i_418"
"(let-values(((sms_419)"
"(unsafe-immutable-hash-iterate-key"
" ht_414"
" i_418)))"
"(let-values(((table_420)"
"(let-values(((new-sms_421)"
"(shift-multi-scope"
" sms_419"
" phase_407)))"
"(begin"
" #t"
"((letrec-values(((for-loop_422)"
"(lambda(table_423)"
"(let-values()"
"(let-values(((table_424)"
"(let-values(((table_425)"
" table_423))"
"(if new-sms_421"
"(let-values(((table_426)"
" table_425))"
"(let-values(((table_427)"
"(let-values()"
"(let-values(((key_428"
" val_429)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_421)"
" #t))))"
"(hash-set"
" table_426"
" key_428"
" val_429)))))"
"(values"
" table_427)))"
" table_425))))"
" table_424)))))"
" for-loop_422)"
" table_417)))))"
"(for-loop_416"
" table_420"
"(unsafe-immutable-hash-iterate-next"
" ht_414"
" i_418))))"
" table_417))))"
" for-loop_416)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_414)))))))))"
"(begin(set! smss52_408 smss_411)(set! prev-result_409 r_412) r_412)))))))"
"(syntax-map"
" s_406"
"(lambda(tail?_430 d_431) d_431)"
"(lambda(s_432 d_433)"
"(let-values(((the-struct_434) s_432))"
"(if(syntax?$1 the-struct_434)"
"(let-values(((content53_435) d_433)"
"((shifted-multi-scopes54_436)(shift-all_410(syntax-shifted-multi-scopes s_432))))"
"(syntax1.1"
" content53_435"
"(syntax-scopes the-struct_434)"
" shifted-multi-scopes54_436"
"(syntax-scope-propagations the-struct_434)"
"(syntax-mpi-shifts the-struct_434)"
"(syntax-srcloc the-struct_434)"
"(syntax-props the-struct_434)"
"(syntax-inspector the-struct_434)"
"(syntax-tamper the-struct_434)))"
"                     (raise-argument-error 'struct-copy \"syntax?\" the-struct_434))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_437 src-scopes_438 dest-scopes_439)"
"(if(equal? src-scopes_438 dest-scopes_439)"
" s_437"
"(let-values(((src-smss_440 src-scs_441)"
"(set-partition"
"(let-values(((ht_444) src-scopes_438))"
"(begin"
"(if((lambda(ht_445)(if(hash? ht_445)(immutable? ht_445) #f)) ht_444)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_444)))"
"((letrec-values(((for-loop_446)"
"(lambda(table_447 i_448)"
"(if i_448"
"(let-values(((sc_449)(unsafe-immutable-hash-iterate-key ht_444 i_448)))"
"(let-values(((table_450)"
"(let-values(((table_451) table_447))"
"(let-values(((table_452)"
"(let-values()"
"(let-values(((key_453 val_454)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_449))"
" #t))))"
"(hash-set"
" table_451"
" key_453"
" val_454)))))"
"(values table_452)))))"
"(for-loop_446"
" table_450"
"(unsafe-immutable-hash-iterate-next ht_444 i_448))))"
" table_447))))"
" for-loop_446)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_444))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_442 dest-scs_443)"
"(set-partition"
"(let-values(((ht_455) dest-scopes_439))"
"(begin"
"(if((lambda(ht_456)(if(hash? ht_456)(immutable? ht_456) #f)) ht_455)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_455)))"
"((letrec-values(((for-loop_457)"
"(lambda(table_458 i_459)"
"(if i_459"
"(let-values(((sc_460)(unsafe-immutable-hash-iterate-key ht_455 i_459)))"
"(let-values(((table_461)"
"(let-values(((table_462) table_458))"
"(let-values(((table_463)"
"(let-values()"
"(let-values(((key_464 val_465)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_460))"
" #t))))"
"(hash-set"
" table_462"
" key_464"
" val_465)))))"
"(values table_463)))))"
"(for-loop_457"
" table_461"
"(unsafe-immutable-hash-iterate-next ht_455 i_459))))"
" table_458))))"
" for-loop_457)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_455))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs55_466) #f))"
"(let-values(((prev-result_467) #f))"
"(let-values(((swap-scs_468)"
"(lambda(scs_472)"
"(if(eq? scs55_466 scs_472)"
"(let-values() prev-result_467)"
"(let-values()"
"(let-values(((r_473)"
"(let-values()"
"(if(subset? src-scs_441 scs_472)"
"(set-union(set-subtract scs_472 src-scs_441) dest-scs_443)"
" scs_472))))"
"(begin(set! scs55_466 scs_472)(set! prev-result_467 r_473) r_473)))))))"
"(let-values(((smss56_469) #f))"
"(let-values(((prev-result_470) #f))"
"(let-values(((swap-smss_471)"
"(lambda(smss_474)"
"(if(eq? smss56_469 smss_474)"
"(let-values() prev-result_470)"
"(let-values()"
"(let-values(((r_475)"
"(let-values()"
"(fallback-update-first"
" smss_474"
"(lambda(smss_476)"
"(if(subset? src-smss_440 smss_476)"
"(set-union"
"(set-subtract smss_476 src-smss_440)"
" dest-smss_442)"
" smss_476))))))"
"(begin(set! smss56_469 smss_474)(set! prev-result_470 r_475) r_475)))))))"
"(syntax-map"
" s_437"
"(lambda(tail?_477 d_478) d_478)"
"(lambda(s_479 d_480)"
"(let-values(((the-struct_481) s_479))"
"(if(syntax?$1 the-struct_481)"
"(let-values(((content57_482) d_480)"
"((scopes58_483)(swap-scs_468(syntax-scopes s_479)))"
"((shifted-multi-scopes59_484)"
"(swap-smss_471(syntax-shifted-multi-scopes s_479))))"
"(syntax1.1"
" content57_482"
" scopes58_483"
" shifted-multi-scopes59_484"
"(syntax-scope-propagations the-struct_481)"
"(syntax-mpi-shifts the-struct_481)"
"(syntax-srcloc the-struct_481)"
"(syntax-props the-struct_481)"
"(syntax-inspector the-struct_481)"
"(syntax-tamper the-struct_481)))"
"                           (raise-argument-error 'struct-copy \"syntax?\" the-struct_481))))"
" syntax-e/no-taint)))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_485 phase_486)"
"(scope-set-at-fallback s_485(fallback-first(syntax-shifted-multi-scopes s_485)) phase_486)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_487 smss_488 phase_489)"
"(let-values(((ht_490) smss_488))"
"(begin"
"(if((lambda(ht_491)(if(hash? ht_491)(immutable? ht_491) #f)) ht_490)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_490)))"
"((letrec-values(((for-loop_492)"
"(lambda(scopes_493 i_494)"
"(if i_494"
"(let-values(((sms_495)(unsafe-immutable-hash-iterate-key ht_490 i_494)))"
"(let-values(((scopes_496)"
"(let-values(((scopes_497) scopes_493))"
"(if(let-values(((or-part_498)(label-phase? phase_489)))"
"(if or-part_498"
" or-part_498"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_495)))))"
"(let-values(((scopes_499) scopes_497))"
"(let-values(((scopes_500)"
"(let-values()"
"(set-add"
" scopes_499"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_495)"
"(let-values(((ph_501)"
"(shifted-multi-scope-phase"
" sms_495)))"
"(if(shifted-to-label-phase? ph_501)"
"(shifted-to-label-phase-from ph_501)"
"(phase- ph_501 phase_489))))))))"
"(values scopes_500)))"
" scopes_497))))"
"(for-loop_492 scopes_496(unsafe-immutable-hash-iterate-next ht_490 i_494))))"
" scopes_493))))"
" for-loop_492)"
"(syntax-scopes s_487)"
"(unsafe-immutable-hash-iterate-first ht_490))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_502)"
"(begin"
"      (if (set-empty? scopes_502) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_503) scopes_502))"
"(begin"
"(if((lambda(ht_504)(if(hash? ht_504)(immutable? ht_504) #f)) ht_503)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_503)))"
"((letrec-values(((for-loop_505)"
"(lambda(max-sc_506 i_507)"
"(if i_507"
"(let-values(((sc_508)(unsafe-immutable-hash-iterate-key ht_503 i_507)))"
"(let-values(((max-sc_509)"
"(let-values(((max-sc_510) max-sc_506))"
"(let-values(((max-sc_511)"
"(let-values()"
"(if(scope>? sc_508 max-sc_510) sc_508 max-sc_510))))"
"(values max-sc_511)))))"
"(for-loop_505 max-sc_509(unsafe-immutable-hash-iterate-next ht_503 i_507))))"
" max-sc_506))))"
" for-loop_505)"
"(set-first scopes_502)"
"(unsafe-immutable-hash-iterate-first ht_503)))))))"
"(define-values"
"(add-binding-in-scopes!16.1)"
"(lambda(just-for-nominal?11_512 just-for-nominal?12_513 scopes13_514 sym14_515 binding15_516)"
"(let-values(((scopes_517) scopes13_514))"
"(let-values(((sym_518) sym14_515))"
"(let-values(((binding_519) binding15_516))"
"(let-values(((just-for-nominal?_520)(if just-for-nominal?12_513 just-for-nominal?11_512 #f)))"
"(let-values()"
"(let-values(((max-sc_521)(find-max-scope scopes_517)))"
"(let-values(((bt_522)"
"(binding-table-add"
"(scope-binding-table max-sc_521)"
" scopes_517"
" sym_518"
" binding_519"
" just-for-nominal?_520)))"
"(begin(set-scope-binding-table! max-sc_521 bt_522)(clear-resolve-cache! sym_518)))))))))))"
"(define-values"
"(unpack17.1$3)"
"(lambda(given-kws_523 given-args_524 scopes13_525 sym14_526 binding15_527)"
"(let-values(((just-for-nominal?12_528)(pair? given-kws_523)))"
"(let-values(((just-for-nominal?11_529)(if just-for-nominal?12_528(car given-args_524)(void))))"
"(add-binding-in-scopes!16.1"
" just-for-nominal?11_529"
" just-for-nominal?12_528"
" scopes13_525"
" sym14_526"
" binding15_527)))))"
"(define-values"
"(add-binding-in-scopes!18.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_530 given-argc_531)"
"(if(= given-argc_531 5)"
"(let-values(((l1_532) given-kws_530))"
"(let-values(((l1_533)"
"(if(null? l1_532) l1_532(if(eq?(car l1_532) '#:just-for-nominal?)(cdr l1_532) l1_532))))"
"(null? l1_533)))"
" #f))"
"(case-lambda"
"((given-kws_534 given-args_535 scopes_536 sym_537 binding_538)"
"(unpack17.1$3 given-kws_534 given-args_535 scopes_536 sym_537 binding_538)))"
" null"
" '(#:just-for-nominal?)"
"(let-values(((add-binding-in-scopes!_539)"
"(case-lambda"
"((scopes_540 sym_541 binding_542)(unpack17.1$3 null null scopes_540 sym_541 binding_542)))))"
" add-binding-in-scopes!_539)))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_543 bulk-binding_544)"
"(let-values(((max-sc_545)(find-max-scope scopes_543)))"
"(let-values(((bt_546)(binding-table-add-bulk(scope-binding-table max-sc_545) scopes_543 bulk-binding_544)))"
"(begin(set-scope-binding-table! max-sc_545 bt_546)(clear-resolve-cache!))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_548)"
"(let-values(((ht_549)(syntax-scopes s_548)))"
"(begin"
"(if((lambda(ht_550)(if(hash? ht_550)(immutable? ht_550) #f)) ht_549)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_549)))"
"((letrec-values(((for-loop_551)"
"(lambda(result_552 i_553)"
"(if i_553"
"(let-values(((sc_554)(unsafe-immutable-hash-iterate-key ht_549 i_553)))"
"(let-values(((result_555)"
"(let-values(((result_556) result_552))"
"(let-values(((result_557)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_554) 'macro)))))"
"(values result_557)))))"
"(if(not((lambda x_558 result_555) sc_554))"
"(for-loop_551 result_555(unsafe-immutable-hash-iterate-next ht_549 i_553))"
" result_555)))"
" result_552))))"
" for-loop_551)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_549))))))"
"(define-values"
"(resolve29.1)"
"(lambda(ambiguous-value19_559"
" ambiguous-value23_560"
" exactly?20_561"
" exactly?24_562"
" extra-shifts22_563"
" extra-shifts26_564"
" get-scopes?21_565"
" get-scopes?25_566"
" s27_567"
" phase28_568)"
"(let-values(((s_569) s27_567))"
"(let-values(((phase_570) phase28_568))"
"(let-values(((ambiguous-value_571)(if ambiguous-value23_560 ambiguous-value19_559 #f)))"
"(let-values(((exactly?_572)(if exactly?24_562 exactly?20_561 #f)))"
"(let-values(((get-scopes?_573)(if get-scopes?25_566 get-scopes?21_565 #f)))"
"(let-values(((extra-shifts_574)(if extra-shifts26_564 extra-shifts22_563 null)))"
"(let-values()"
"(begin"
"                    (if (identifier? s_569) (void) (let-values () (raise-argument-error 'resolve \"identifier?\" s_569)))"
"                    (if (phase? phase_570) (void) (let-values () (raise-argument-error 'resolve \"phase?\" phase_570)))"
"((letrec-values(((fallback-loop_575)"
"(lambda(smss_576)"
"(let-values(((scopes_577)"
"(scope-set-at-fallback"
" s_569"
"(fallback-first smss_576)"
" phase_570)))"
"(let-values(((sym_578)(syntax-content s_569)))"
"(let-values(((c25320_579)"
"(if(not exactly?_572)"
"(if(not get-scopes?_573)"
"(resolve-cache-get sym_578 phase_570 scopes_577)"
" #f)"
" #f)))"
"(if c25320_579"
"((lambda(b_580) b_580) c25320_579)"
"(let-values()"
"(let-values(((candidates_581)"
"(alt-reverse"
"(let-values(((ht_583) scopes_577))"
"(begin"
"(if((lambda(ht_584)"
"(if(hash? ht_584)(immutable? ht_584) #f))"
" ht_583)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_583)))"
"((letrec-values(((for-loop_585)"
"(lambda(fold-var_586 i_587)"
"(if i_587"
"(let-values(((sc_588)"
"(unsafe-immutable-hash-iterate-key"
" ht_583"
" i_587)))"
"(let-values(((fold-var_589)"
"(let-values(((ht_590"
" bulk-bindings_591)"
"(let-values(((table_594)"
"(scope-binding-table"
" sc_588)))"
"(if(hash?"
" table_594)"
"(values"
"(hash-ref"
" table_594"
" sym_578"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_594)"
" sym_578"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_594)))))"
"((s_592)"
" s_569)"
"((extra-shifts_593)"
" extra-shifts_574))"
"(begin"
" #t"
"((letrec-values(((for-loop_595)"
"(lambda(fold-var_596"
" i_597"
" already-covered-scopes_598)"
"(if(not"
"(null?"
" i_597))"
"(let-values(((b-scopes_599)"
"(if(pair?"
" i_597)"
"(let-values()"
"(let-values(((scs_601)"
"(bulk-binding-at-scopes"
"(car"
" i_597))))"
"(if(not"
"(set-member?"
" already-covered-scopes_598"
" scs_601))"
" scs_601"
" #f)))"
"(let-values()"
"(hash-iterate-key"
" ht_590"
" i_597))))"
"((binding_600)"
"(if(pair?"
" i_597)"
"(let-values()"
"(let-values(((bulk_602)"
"(bulk-binding-at-bulk"
"(car"
" i_597))))"
"(let-values(((b-info_603)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_602"
" s_592"
" extra-shifts_593)"
" sym_578"
" #f)))"
"(if b-info_603"
"((bulk-binding-create"
" bulk_602)"
" bulk_602"
" b-info_603"
" sym_578)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_590"
" i_597)))))"
"(let-values(((fold-var_604)"
"(let-values(((fold-var_605)"
" fold-var_596))"
"(if(if b-scopes_599"
"(if binding_600"
"(subset?"
" b-scopes_599"
" scopes_577)"
" #f)"
" #f)"
"(let-values(((fold-var_606)"
" fold-var_605))"
"(let-values(((fold-var_607)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" b-scopes_599"
" binding_600))"
" fold-var_606))))"
"(values"
" fold-var_607)))"
" fold-var_605))))"
"(for-loop_595"
" fold-var_604"
"(if(pair?"
" i_597)"
"(let-values()"
"(cdr"
" i_597))"
"(let-values()"
"(let-values(((or-part_608)"
"(hash-iterate-next"
" ht_590"
" i_597)))"
"(if or-part_608"
" or-part_608"
" bulk-bindings_591))))"
"(if(if(pair?"
" bulk-bindings_591)"
"(if b-scopes_599"
"(if binding_600"
"(let-values(((or-part_609)"
"(not"
"(pair?"
" i_597))))"
"(if or-part_609"
" or-part_609"
"(not"
"(null?"
"(cdr"
" i_597)))))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(set-add"
" already-covered-scopes_598"
" b-scopes_599))"
"(let-values()"
" already-covered-scopes_598)))))"
" fold-var_596))))"
" for-loop_595)"
" fold-var_586"
"(let-values(((or-part_610)"
"(hash-iterate-first"
" ht_590)))"
"(if or-part_610"
" or-part_610"
" bulk-bindings_591))"
" '#hasheq())))))"
"(for-loop_585"
" fold-var_589"
"(unsafe-immutable-hash-iterate-next"
" ht_583"
" i_587))))"
" fold-var_586))))"
" for-loop_585)"
" null"
"(unsafe-immutable-hash-iterate-first ht_583)))))))"
"(let-values(((max-candidate_582)"
"(if(pair? candidates_581)"
"(let-values(((lst_611)(cdr candidates_581)))"
"(begin"
"(if(list? lst_611)"
"(void)"
"(let-values()(in-list lst_611)))"
"((letrec-values(((for-loop_612)"
"(lambda(max-c_613 lst_614)"
"(if(pair? lst_614)"
"(let-values(((c_615)"
"(unsafe-car"
" lst_614)))"
"(let-values(((max-c_616)"
"(let-values(((max-c_617)"
" max-c_613))"
"(let-values(((max-c_618)"
"(let-values()"
"(if(>"
"(set-count"
"(car"
" c_615))"
"(set-count"
"(car"
" max-c_617)))"
" c_615"
" max-c_617))))"
"(values"
" max-c_618)))))"
"(for-loop_612"
" max-c_616"
"(unsafe-cdr"
" lst_614))))"
" max-c_613))))"
" for-loop_612)"
"(car candidates_581)"
" lst_611)))"
" #f)))"
"(if max-candidate_582"
"(let-values()"
"(if(not"
"(let-values(((lst_619) candidates_581))"
"(begin"
"(if(list? lst_619)"
"(void)"
"(let-values()(in-list lst_619)))"
"((letrec-values(((for-loop_620)"
"(lambda(result_621 lst_622)"
"(if(pair? lst_622)"
"(let-values(((c_623)"
"(unsafe-car"
" lst_622)))"
"(let-values(((result_624)"
"(let-values(((result_625)"
" result_621))"
"(let-values(((result_626)"
"(let-values()"
"(let-values()"
"(subset?"
"(car"
" c_623)"
"(car"
" max-candidate_582))))))"
"(values"
" result_626)))))"
"(if(not"
"((lambda x_627"
"(not result_624))"
" c_623))"
"(for-loop_620"
" result_624"
"(unsafe-cdr lst_622))"
" result_624)))"
" result_621))))"
" for-loop_620)"
" #t"
" lst_619))))"
"(let-values()"
"(if(fallback? smss_576)"
"(fallback-loop_575(fallback-rest smss_576))"
" ambiguous-value_571))"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_578"
" phase_570"
" scopes_577"
"(cdr max-candidate_582))"
"(if(let-values(((or-part_628)(not exactly?_572)))"
"(if or-part_628"
" or-part_628"
"(equal?"
"(set-count scopes_577)"
"(set-count(car max-candidate_582)))))"
"(if get-scopes?_573"
"(car max-candidate_582)"
"(cdr max-candidate_582))"
" #f)))))"
"(let-values()"
"(if(fallback? smss_576)"
"(fallback-loop_575(fallback-rest smss_576))"
" #f)))))))))))))"
" fallback-loop_575)"
"(syntax-shifted-multi-scopes s_569))))))))))))"
"(define-values"
"(unpack30.1)"
"(lambda(given-kws_629 given-args_630 s27_631 phase28_632)"
"(let-values(((ambiguous-value23_633)(if(pair? given-kws_629)(eq? '#:ambiguous-value(car given-kws_629)) #f)))"
"(let-values(((ambiguous-value19_634)(if ambiguous-value23_633(car given-args_630)(void)))"
"((given-kws_635)(if ambiguous-value23_633(cdr given-kws_629) given-kws_629))"
"((given-args_636)(if ambiguous-value23_633(cdr given-args_630) given-args_630)))"
"(let-values(((exactly?24_637)(if(pair? given-kws_635)(eq? '#:exactly?(car given-kws_635)) #f)))"
"(let-values(((exactly?20_638)(if exactly?24_637(car given-args_636)(void)))"
"((given-kws_639)(if exactly?24_637(cdr given-kws_635) given-kws_635))"
"((given-args_640)(if exactly?24_637(cdr given-args_636) given-args_636)))"
"(let-values(((extra-shifts26_641)(if(pair? given-kws_639)(eq? '#:extra-shifts(car given-kws_639)) #f)))"
"(let-values(((extra-shifts22_642)(if extra-shifts26_641(car given-args_640)(void)))"
"((given-kws_643)(if extra-shifts26_641(cdr given-kws_639) given-kws_639))"
"((given-args_644)(if extra-shifts26_641(cdr given-args_640) given-args_640)))"
"(let-values(((get-scopes?25_645)(pair? given-kws_643)))"
"(let-values(((get-scopes?21_646)(if get-scopes?25_645(car given-args_644)(void))))"
"(resolve29.1"
" ambiguous-value19_634"
" ambiguous-value23_633"
" exactly?20_638"
" exactly?24_637"
" extra-shifts22_642"
" extra-shifts26_641"
" get-scopes?21_646"
" get-scopes?25_645"
" s27_631"
" phase28_632)))))))))))"
"(define-values"
"(resolve31.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_647 given-argc_648)"
"(if(= given-argc_648 4)"
"(let-values(((l1_649) given-kws_647))"
"(let-values(((l1_650)"
"(if(null? l1_649) l1_649(if(eq?(car l1_649) '#:ambiguous-value)(cdr l1_649) l1_649))))"
"(let-values(((l1_651) l1_650))"
"(let-values(((l1_652)(if(null? l1_651) l1_651(if(eq?(car l1_651) '#:exactly?)(cdr l1_651) l1_651))))"
"(let-values(((l1_653) l1_652))"
"(let-values(((l1_654)"
"(if(null? l1_653) l1_653(if(eq?(car l1_653) '#:extra-shifts)(cdr l1_653) l1_653))))"
"(let-values(((l1_655) l1_654))"
"(let-values(((l1_656)"
"(if(null? l1_655)"
" l1_655"
"(if(eq?(car l1_655) '#:get-scopes?)(cdr l1_655) l1_655))))"
"(null? l1_656)))))))))"
" #f))"
"(case-lambda"
"((given-kws_657 given-args_658 s_659 phase_660)(unpack30.1 given-kws_657 given-args_658 s_659 phase_660)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:get-scopes?)"
"(let-values(((resolve_661)(case-lambda((s_662 phase_663)(unpack30.1 null null s_662 phase_663))))) resolve_661)))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_664 b_665 phase_666)"
"(if(eq?(syntax-e$1 a_664)(syntax-e$1 b_665))"
"(equal?(syntax-scope-set a_664 phase_666)(syntax-scope-set b_665 phase_666))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 #f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_11"
"                               \"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
"      (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 #f)))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_19)"
"(begin"
"      (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_19)))"
"(alt-reverse"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(if(hash? ht_21)(immutable? ht_21) #f)) ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)(unsafe-immutable-hash-iterate-key+value ht_20 i_24)))"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_23))"
"(if(if(symbol? k_25)(symbol-interned? k_25) #f)"
"(let-values(((fold-var_29) fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons(let-values() k_25) fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(for-loop_22 fold-var_27(unsafe-immutable-hash-iterate-next ht_20 i_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first ht_20))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_31 key_32)"
"(if(hash-ref(syntax-props s_31) key_32 #f)"
"(let-values(((the-struct_33) s_31))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props3_34)(hash-remove(syntax-props s_31) key_32)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props3_34"
"(syntax-inspector the-struct_33)"
"(syntax-tamper the-struct_33)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))"
" s_31)))"
"(void)"
"(void)"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_26)(binding-free=id b_26))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_27)(if(full-binding? b_27)(full-binding-frame-id b_27) #f)))"
"(define-values(binding-free=id)(lambda(b_28)(if(full-binding? b_28)(full-binding-free=id b_28) #f)))"
"(void)"
"(void)"
"(define-values"
"(make-module-binding22.1)"
"(lambda(extra-inspector8_1"
" extra-inspector17_2"
" extra-nominal-bindings9_3"
" extra-nominal-bindings18_4"
" frame-id6_5"
" frame-id15_6"
" free=id7_7"
" free=id16_8"
" nominal-module2_9"
" nominal-module11_10"
" nominal-phase3_11"
" nominal-phase12_12"
" nominal-require-phase5_13"
" nominal-require-phase14_14"
" nominal-sym4_15"
" nominal-sym13_16"
" wrt1_17"
" wrt10_18"
" module19_19"
" phase20_20"
" sym21_21)"
"(let-values(((module_22) module19_19))"
"(let-values(((phase_23) phase20_20))"
"(let-values(((sym_24) sym21_21))"
"(let-values(((wrt-sym_25)(if wrt10_18 wrt1_17 sym_24)))"
"(let-values(((nominal-module_26)(if nominal-module11_10 nominal-module2_9 module_22)))"
"(let-values(((nominal-phase_27)(if nominal-phase12_12 nominal-phase3_11 phase_23)))"
"(let-values(((nominal-sym_28)(if nominal-sym13_16 nominal-sym4_15 sym_24)))"
"(let-values(((nominal-require-phase_29)(if nominal-require-phase14_14 nominal-require-phase5_13 0)))"
"(let-values(((frame-id_30)(if frame-id15_6 frame-id6_5 #f)))"
"(let-values(((free=id_31)(if free=id16_8 free=id7_7 #f)))"
"(let-values(((extra-inspector_32)(if extra-inspector17_2 extra-inspector8_1 #f)))"
"(let-values(((extra-nominal-bindings_33)"
"(if extra-nominal-bindings18_4 extra-nominal-bindings9_3 null)))"
"(let-values()"
"(if(let-values(((or-part_34) frame-id_30))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35) free=id_31))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36) extra-inspector_32))"
"(if or-part_36"
" or-part_36"
"(not"
"(if(eqv? nominal-phase_27 phase_23)"
"(if(eq? nominal-sym_28 sym_24)"
"(if(eqv? nominal-require-phase_29 0)"
"(null? extra-nominal-bindings_33)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding51.1"
" frame-id_30"
" free=id_31"
" module_22"
" phase_23"
" sym_24"
" nominal-module_26"
" nominal-phase_27"
" nominal-sym_28"
" nominal-require-phase_29"
" extra-inspector_32"
" extra-nominal-bindings_33))"
"(let-values()"
"(simple-module-binding52.1"
" module_22"
" phase_23"
" sym_24"
" nominal-module_26))))))))))))))))))"
"(define-values"
"(unpack23.1)"
"(lambda(given-kws_37 given-args_38 module19_39 phase20_40 sym21_41)"
"(let-values(((extra-inspector17_42)(if(pair? given-kws_37)(eq? '#:extra-inspector(car given-kws_37)) #f)))"
"(let-values(((extra-inspector8_43)(if extra-inspector17_42(car given-args_38)(void)))"
"((given-kws_44)(if extra-inspector17_42(cdr given-kws_37) given-kws_37))"
"((given-args_45)(if extra-inspector17_42(cdr given-args_38) given-args_38)))"
"(let-values(((extra-nominal-bindings18_46)"
"(if(pair? given-kws_44)(eq? '#:extra-nominal-bindings(car given-kws_44)) #f)))"
"(let-values(((extra-nominal-bindings9_47)(if extra-nominal-bindings18_46(car given-args_45)(void)))"
"((given-kws_48)(if extra-nominal-bindings18_46(cdr given-kws_44) given-kws_44))"
"((given-args_49)(if extra-nominal-bindings18_46(cdr given-args_45) given-args_45)))"
"(let-values(((frame-id15_50)(if(pair? given-kws_48)(eq? '#:frame-id(car given-kws_48)) #f)))"
"(let-values(((frame-id6_51)(if frame-id15_50(car given-args_49)(void)))"
"((given-kws_52)(if frame-id15_50(cdr given-kws_48) given-kws_48))"
"((given-args_53)(if frame-id15_50(cdr given-args_49) given-args_49)))"
"(let-values(((free=id16_54)(if(pair? given-kws_52)(eq? '#:free=id(car given-kws_52)) #f)))"
"(let-values(((free=id7_55)(if free=id16_54(car given-args_53)(void)))"
"((given-kws_56)(if free=id16_54(cdr given-kws_52) given-kws_52))"
"((given-args_57)(if free=id16_54(cdr given-args_53) given-args_53)))"
"(let-values(((nominal-module11_58)"
"(if(pair? given-kws_56)(eq? '#:nominal-module(car given-kws_56)) #f)))"
"(let-values(((nominal-module2_59)(if nominal-module11_58(car given-args_57)(void)))"
"((given-kws_60)(if nominal-module11_58(cdr given-kws_56) given-kws_56))"
"((given-args_61)(if nominal-module11_58(cdr given-args_57) given-args_57)))"
"(let-values(((nominal-phase12_62)"
"(if(pair? given-kws_60)(eq? '#:nominal-phase(car given-kws_60)) #f)))"
"(let-values(((nominal-phase3_63)(if nominal-phase12_62(car given-args_61)(void)))"
"((given-kws_64)(if nominal-phase12_62(cdr given-kws_60) given-kws_60))"
"((given-args_65)(if nominal-phase12_62(cdr given-args_61) given-args_61)))"
"(let-values(((nominal-require-phase14_66)"
"(if(pair? given-kws_64)"
"(eq? '#:nominal-require-phase(car given-kws_64))"
" #f)))"
"(let-values(((nominal-require-phase5_67)"
"(if nominal-require-phase14_66(car given-args_65)(void)))"
"((given-kws_68)"
"(if nominal-require-phase14_66(cdr given-kws_64) given-kws_64))"
"((given-args_69)"
"(if nominal-require-phase14_66(cdr given-args_65) given-args_65)))"
"(let-values(((nominal-sym13_70)"
"(if(pair? given-kws_68)(eq? '#:nominal-sym(car given-kws_68)) #f)))"
"(let-values(((nominal-sym4_71)(if nominal-sym13_70(car given-args_69)(void)))"
"((given-kws_72)(if nominal-sym13_70(cdr given-kws_68) given-kws_68))"
"((given-args_73)"
"(if nominal-sym13_70(cdr given-args_69) given-args_69)))"
"(let-values(((wrt10_74)(pair? given-kws_72)))"
"(let-values(((wrt1_75)(if wrt10_74(car given-args_73)(void))))"
"(make-module-binding22.1"
" extra-inspector8_43"
" extra-inspector17_42"
" extra-nominal-bindings9_47"
" extra-nominal-bindings18_46"
" frame-id6_51"
" frame-id15_50"
" free=id7_55"
" free=id16_54"
" nominal-module2_59"
" nominal-module11_58"
" nominal-phase3_63"
" nominal-phase12_62"
" nominal-require-phase5_67"
" nominal-require-phase14_66"
" nominal-sym4_71"
" nominal-sym13_70"
" wrt1_75"
" wrt10_74"
" module19_39"
" phase20_40"
" sym21_41)))))))))))))))))))))"
"(define-values"
"(make-module-binding24.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_76 given-argc_77)"
"(if(= given-argc_77 5)"
"(let-values(((l1_78) given-kws_76))"
"(let-values(((l1_79)(if(null? l1_78) l1_78(if(eq?(car l1_78) '#:extra-inspector)(cdr l1_78) l1_78))))"
"(let-values(((l1_80) l1_79))"
"(let-values(((l1_81)"
"(if(null? l1_80) l1_80(if(eq?(car l1_80) '#:extra-nominal-bindings)(cdr l1_80) l1_80))))"
"(let-values(((l1_82) l1_81))"
"(let-values(((l1_83)(if(null? l1_82) l1_82(if(eq?(car l1_82) '#:frame-id)(cdr l1_82) l1_82))))"
"(let-values(((l1_84) l1_83))"
"(let-values(((l1_85)"
"(if(null? l1_84) l1_84(if(eq?(car l1_84) '#:free=id)(cdr l1_84) l1_84))))"
"(let-values(((l1_86) l1_85))"
"(let-values(((l1_87)"
"(if(null? l1_86)"
" l1_86"
"(if(eq?(car l1_86) '#:nominal-module)(cdr l1_86) l1_86))))"
"(let-values(((l1_88) l1_87))"
"(let-values(((l1_89)"
"(if(null? l1_88)"
" l1_88"
"(if(eq?(car l1_88) '#:nominal-phase)(cdr l1_88) l1_88))))"
"(let-values(((l1_90) l1_89))"
"(let-values(((l1_91)"
"(if(null? l1_90)"
" l1_90"
"(if(eq?(car l1_90) '#:nominal-require-phase)(cdr l1_90) l1_90))))"
"(let-values(((l1_92) l1_91))"
"(let-values(((l1_93)"
"(if(null? l1_92)"
" l1_92"
"(if(eq?(car l1_92) '#:nominal-sym)(cdr l1_92) l1_92))))"
"(let-values(((l1_94) l1_93))"
"(let-values(((l1_95)"
"(if(null? l1_94)"
" l1_94"
"(if(eq?(car l1_94) '#:wrt)(cdr l1_94) l1_94))))"
"(null? l1_95)))))))))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_96 given-args_97 module_98 phase_99 sym_100)"
"(unpack23.1 given-kws_96 given-args_97 module_98 phase_99 sym_100)))"
" null"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:wrt)"
"(let-values(((make-module-binding_101)"
"(case-lambda((module_102 phase_103 sym_104)(unpack23.1 null null module_102 phase_103 sym_104)))))"
" make-module-binding_101)))"
"(define-values"
"(module-binding-update48.1)"
"(lambda(extra-inspector34_105"
" extra-inspector45_106"
" extra-nominal-bindings35_107"
" extra-nominal-bindings46_108"
" frame-id32_109"
" frame-id43_110"
" free=id33_111"
" free=id44_112"
" module25_113"
" module36_114"
" nominal-module28_115"
" nominal-module39_116"
" nominal-phase29_117"
" nominal-phase40_118"
" nominal-require-phase31_119"
" nominal-require-phase42_120"
" nominal-sym30_121"
" nominal-sym41_122"
" phase26_123"
" phase37_124"
" sym27_125"
" sym38_126"
" b47_127)"
"(let-values(((b_128) b47_127))"
"(let-values(((module_129)(if module36_114 module25_113(module-binding-module b_128))))"
"(let-values(((phase_130)(if phase37_124 phase26_123(module-binding-phase b_128))))"
"(let-values(((sym_131)(if sym38_126 sym27_125(module-binding-sym b_128))))"
"(let-values(((nominal-module_132)"
"(if nominal-module39_116 nominal-module28_115(module-binding-nominal-module b_128))))"
"(let-values(((nominal-phase_133)"
"(if nominal-phase40_118 nominal-phase29_117(module-binding-nominal-phase b_128))))"
"(let-values(((nominal-sym_134)"
"(if nominal-sym41_122 nominal-sym30_121(module-binding-nominal-sym b_128))))"
"(let-values(((nominal-require-phase_135)"
"(if nominal-require-phase42_120"
" nominal-require-phase31_119"
"(module-binding-nominal-require-phase b_128))))"
"(let-values(((frame-id_136)(if frame-id43_110 frame-id32_109(binding-frame-id b_128))))"
"(let-values(((free=id_137)(if free=id44_112 free=id33_111(binding-free=id b_128))))"
"(let-values(((extra-inspector_138)"
"(if extra-inspector45_106"
" extra-inspector34_105"
"(module-binding-extra-inspector b_128))))"
"(let-values(((extra-nominal-bindings_139)"
"(if extra-nominal-bindings46_108"
" extra-nominal-bindings35_107"
"(module-binding-extra-nominal-bindings b_128))))"
"(let-values()"
"(let-values(((...x/module-binding.rkt:66:2_140) make-module-binding24.1)"
"((module53_141) module_129)"
"((phase54_142) phase_130)"
"((sym55_143) sym_131)"
"((nominal-module56_144) nominal-module_132)"
"((nominal-phase57_145) nominal-phase_133)"
"((nominal-sym58_146) nominal-sym_134)"
"((nominal-require-phase59_147) nominal-require-phase_135)"
"((frame-id60_148) frame-id_136)"
"((free=id61_149) free=id_137)"
"((extra-inspector62_150) extra-inspector_138)"
"((extra-nominal-bindings63_151) extra-nominal-bindings_139))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" extra-inspector62_150"
" #t"
" extra-nominal-bindings63_151"
" #t"
" frame-id60_148"
" #t"
" free=id61_149"
" #t"
" nominal-module56_144"
" #t"
" nominal-phase57_145"
" #t"
" nominal-require-phase59_147"
" #t"
" nominal-sym58_146"
" #t"
" #f"
" #f"
" module53_141"
" phase54_142"
" sym55_143)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:66:2_140"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 5)"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" extra-inspector62_150"
" extra-nominal-bindings63_151"
" frame-id60_148"
" free=id61_149"
" nominal-module56_144"
" nominal-phase57_145"
" nominal-require-phase59_147"
" nominal-sym58_146)"
" module53_141"
" phase54_142"
" sym55_143))))))))))))))))))"
"(define-values"
"(unpack49.1$3)"
"(lambda(given-kws_152 given-args_153 b47_154)"
"(let-values(((extra-inspector45_155)(if(pair? given-kws_152)(eq? '#:extra-inspector(car given-kws_152)) #f)))"
"(let-values(((extra-inspector34_156)(if extra-inspector45_155(car given-args_153)(void)))"
"((given-kws_157)(if extra-inspector45_155(cdr given-kws_152) given-kws_152))"
"((given-args_158)(if extra-inspector45_155(cdr given-args_153) given-args_153)))"
"(let-values(((extra-nominal-bindings46_159)"
"(if(pair? given-kws_157)(eq? '#:extra-nominal-bindings(car given-kws_157)) #f)))"
"(let-values(((extra-nominal-bindings35_160)(if extra-nominal-bindings46_159(car given-args_158)(void)))"
"((given-kws_161)(if extra-nominal-bindings46_159(cdr given-kws_157) given-kws_157))"
"((given-args_162)(if extra-nominal-bindings46_159(cdr given-args_158) given-args_158)))"
"(let-values(((frame-id43_163)(if(pair? given-kws_161)(eq? '#:frame-id(car given-kws_161)) #f)))"
"(let-values(((frame-id32_164)(if frame-id43_163(car given-args_162)(void)))"
"((given-kws_165)(if frame-id43_163(cdr given-kws_161) given-kws_161))"
"((given-args_166)(if frame-id43_163(cdr given-args_162) given-args_162)))"
"(let-values(((free=id44_167)(if(pair? given-kws_165)(eq? '#:free=id(car given-kws_165)) #f)))"
"(let-values(((free=id33_168)(if free=id44_167(car given-args_166)(void)))"
"((given-kws_169)(if free=id44_167(cdr given-kws_165) given-kws_165))"
"((given-args_170)(if free=id44_167(cdr given-args_166) given-args_166)))"
"(let-values(((module36_171)(if(pair? given-kws_169)(eq? '#:module(car given-kws_169)) #f)))"
"(let-values(((module25_172)(if module36_171(car given-args_170)(void)))"
"((given-kws_173)(if module36_171(cdr given-kws_169) given-kws_169))"
"((given-args_174)(if module36_171(cdr given-args_170) given-args_170)))"
"(let-values(((nominal-module39_175)"
"(if(pair? given-kws_173)(eq? '#:nominal-module(car given-kws_173)) #f)))"
"(let-values(((nominal-module28_176)(if nominal-module39_175(car given-args_174)(void)))"
"((given-kws_177)(if nominal-module39_175(cdr given-kws_173) given-kws_173))"
"((given-args_178)(if nominal-module39_175(cdr given-args_174) given-args_174)))"
"(let-values(((nominal-phase40_179)"
"(if(pair? given-kws_177)(eq? '#:nominal-phase(car given-kws_177)) #f)))"
"(let-values(((nominal-phase29_180)(if nominal-phase40_179(car given-args_178)(void)))"
"((given-kws_181)(if nominal-phase40_179(cdr given-kws_177) given-kws_177))"
"((given-args_182)"
"(if nominal-phase40_179(cdr given-args_178) given-args_178)))"
"(let-values(((nominal-require-phase42_183)"
"(if(pair? given-kws_181)"
"(eq? '#:nominal-require-phase(car given-kws_181))"
" #f)))"
"(let-values(((nominal-require-phase31_184)"
"(if nominal-require-phase42_183(car given-args_182)(void)))"
"((given-kws_185)"
"(if nominal-require-phase42_183(cdr given-kws_181) given-kws_181))"
"((given-args_186)"
"(if nominal-require-phase42_183(cdr given-args_182) given-args_182)))"
"(let-values(((nominal-sym41_187)"
"(if(pair? given-kws_185)"
"(eq? '#:nominal-sym(car given-kws_185))"
" #f)))"
"(let-values(((nominal-sym30_188)"
"(if nominal-sym41_187(car given-args_186)(void)))"
"((given-kws_189)"
"(if nominal-sym41_187(cdr given-kws_185) given-kws_185))"
"((given-args_190)"
"(if nominal-sym41_187(cdr given-args_186) given-args_186)))"
"(let-values(((phase37_191)"
"(if(pair? given-kws_189)(eq? '#:phase(car given-kws_189)) #f)))"
"(let-values(((phase26_192)(if phase37_191(car given-args_190)(void)))"
"((given-kws_193)"
"(if phase37_191(cdr given-kws_189) given-kws_189))"
"((given-args_194)"
"(if phase37_191(cdr given-args_190) given-args_190)))"
"(let-values(((sym38_195)(pair? given-kws_193)))"
"(let-values(((sym27_196)(if sym38_195(car given-args_194)(void))))"
"(module-binding-update48.1"
" extra-inspector34_156"
" extra-inspector45_155"
" extra-nominal-bindings35_160"
" extra-nominal-bindings46_159"
" frame-id32_164"
" frame-id43_163"
" free=id33_168"
" free=id44_167"
" module25_172"
" module36_171"
" nominal-module28_176"
" nominal-module39_175"
" nominal-phase29_180"
" nominal-phase40_179"
" nominal-require-phase31_184"
" nominal-require-phase42_183"
" nominal-sym30_188"
" nominal-sym41_187"
" phase26_192"
" phase37_191"
" sym27_196"
" sym38_195"
" b47_154)))))))))))))))))))))))))"
"(define-values"
"(module-binding-update50.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_197 given-argc_198)"
"(if(= given-argc_198 3)"
"(let-values(((l1_199) given-kws_197))"
"(let-values(((l1_200)"
"(if(null? l1_199) l1_199(if(eq?(car l1_199) '#:extra-inspector)(cdr l1_199) l1_199))))"
"(let-values(((l1_201) l1_200))"
"(let-values(((l1_202)"
"(if(null? l1_201)"
" l1_201"
"(if(eq?(car l1_201) '#:extra-nominal-bindings)(cdr l1_201) l1_201))))"
"(let-values(((l1_203) l1_202))"
"(let-values(((l1_204)"
"(if(null? l1_203) l1_203(if(eq?(car l1_203) '#:frame-id)(cdr l1_203) l1_203))))"
"(let-values(((l1_205) l1_204))"
"(let-values(((l1_206)"
"(if(null? l1_205) l1_205(if(eq?(car l1_205) '#:free=id)(cdr l1_205) l1_205))))"
"(let-values(((l1_207) l1_206))"
"(let-values(((l1_208)"
"(if(null? l1_207)"
" l1_207"
"(if(eq?(car l1_207) '#:module)(cdr l1_207) l1_207))))"
"(let-values(((l1_209) l1_208))"
"(let-values(((l1_210)"
"(if(null? l1_209)"
" l1_209"
"(if(eq?(car l1_209) '#:nominal-module)(cdr l1_209) l1_209))))"
"(let-values(((l1_211) l1_210))"
"(let-values(((l1_212)"
"(if(null? l1_211)"
" l1_211"
"(if(eq?(car l1_211) '#:nominal-phase)(cdr l1_211) l1_211))))"
"(let-values(((l1_213) l1_212))"
"(let-values(((l1_214)"
"(if(null? l1_213)"
" l1_213"
"(if(eq?(car l1_213) '#:nominal-require-phase)"
"(cdr l1_213)"
" l1_213))))"
"(let-values(((l1_215) l1_214))"
"(let-values(((l1_216)"
"(if(null? l1_215)"
" l1_215"
"(if(eq?(car l1_215) '#:nominal-sym)(cdr l1_215) l1_215))))"
"(let-values(((l1_217) l1_216))"
"(let-values(((l1_218)"
"(if(null? l1_217)"
" l1_217"
"(if(eq?(car l1_217) '#:phase)(cdr l1_217) l1_217))))"
"(let-values(((l1_219) l1_218))"
"(let-values(((l1_220)"
"(if(null? l1_219)"
" l1_219"
"(if(eq?(car l1_219) '#:sym)(cdr l1_219) l1_219))))"
"(null? l1_220)))))))))))))))))))))))"
" #f))"
"(case-lambda((given-kws_221 given-args_222 b_223)(unpack49.1$3 given-kws_221 given-args_222 b_223)))"
" null"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:free=id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:phase"
" #:sym)"
"(let-values(((module-binding-update_224)(case-lambda((b_225)(unpack49.1$3 null null b_225)))))"
" module-binding-update_224)))"
"(define-values"
"(module-binding?)"
"(lambda(b_226)"
"(let-values(((or-part_227)(simple-module-binding? b_226)))"
"(if or-part_227 or-part_227(full-module-binding? b_226)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding51.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_228 make-_229 ?_230 -ref_231 -set!_232)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_288 ser-push!_289 state_290)"
"(let-values(((simplified-b_291)"
"(if(full-binding-frame-id b_288)"
"(let-values(((...x/module-binding.rkt:93:16_292) module-binding-update50.1)"
"((b65_293) b_288)"
"((temp66_294) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" temp66_294"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b65_293)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:93:16_292"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list temp66_294)"
" b65_293)))"
" b_288)))"
"(if(full-module-binding? simplified-b_291)"
"(let-values()"
"(begin"
"(ser-push!_289 'tag '#:module-binding)"
"(ser-push!_289(full-module-binding-module b_288))"
"(ser-push!_289(full-module-binding-sym b_288))"
"(ser-push!_289(full-module-binding-phase b_288))"
"(ser-push!_289(full-module-binding-nominal-module b_288))"
"(ser-push!_289(full-module-binding-nominal-phase b_288))"
"(ser-push!_289(full-module-binding-nominal-sym b_288))"
"(ser-push!_289(full-module-binding-nominal-require-phase b_288))"
"(ser-push!_289(full-binding-free=id b_288))"
"(if(full-module-binding-extra-inspector b_288)"
"(ser-push!_289 'tag '#:inspector)"
"(ser-push!_289 #f))"
"(ser-push!_289(full-module-binding-extra-nominal-bindings b_288))))"
"(let-values()(ser-push!_289 simplified-b_291)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_228"
" make-_229"
" ?_230"
"(make-struct-field-accessor -ref_231 0 'module)"
"(make-struct-field-accessor -ref_231 1 'phase)"
"(make-struct-field-accessor -ref_231 2 'sym)"
"(make-struct-field-accessor -ref_231 3 'nominal-module)"
"(make-struct-field-accessor -ref_231 4 'nominal-phase)"
"(make-struct-field-accessor -ref_231 5 'nominal-sym)"
"(make-struct-field-accessor -ref_231 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_231 7 'extra-inspector)"
"(make-struct-field-accessor -ref_231 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding52.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_295 make-_296 ?_297 -ref_298 -set!_299)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_330 ser-push!_331 state_332)"
"(begin"
"(ser-push!_331 'tag '#:simple-module-binding)"
"(ser-push!_331(simple-module-binding-module b_330))"
"(ser-push!_331(simple-module-binding-sym b_330))"
"(ser-push!_331(simple-module-binding-phase b_330))"
"(ser-push!_331(simple-module-binding-nominal-module b_330))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_295"
" make-_296"
" ?_297"
"(make-struct-field-accessor -ref_298 0 'module)"
"(make-struct-field-accessor -ref_298 1 'phase)"
"(make-struct-field-accessor -ref_298 2 'sym)"
"(make-struct-field-accessor -ref_298 3 'nominal-module))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_333"
" sym_334"
" phase_335"
" nominal-module_336"
" nominal-phase_337"
" nominal-sym_338"
" nominal-require-phase_339"
" free=id_340"
" extra-inspector_341"
" extra-nominal-bindings_342)"
"(let-values(((...x/module-binding.rkt:131:2_343) make-module-binding24.1)"
"((module68_344) module_333)"
"((phase69_345) phase_335)"
"((sym70_346) sym_334)"
"((nominal-module71_347) nominal-module_336)"
"((nominal-phase72_348) nominal-phase_337)"
"((nominal-sym73_349) nominal-sym_338)"
"((nominal-require-phase74_350) nominal-require-phase_339)"
"((free=id75_351) free=id_340)"
"((extra-inspector76_352) extra-inspector_341)"
"((extra-nominal-bindings77_353) extra-nominal-bindings_342))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" extra-inspector76_352"
" #t"
" extra-nominal-bindings77_353"
" #t"
" #f"
" #f"
" free=id75_351"
" #t"
" nominal-module71_347"
" #t"
" nominal-phase72_348"
" #t"
" nominal-require-phase74_350"
" #t"
" nominal-sym73_349"
" #t"
" #f"
" #f"
" module68_344"
" phase69_345"
" sym70_346)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:131:2_343"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 5)"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" extra-inspector76_352"
" extra-nominal-bindings77_353"
" free=id75_351"
" nominal-module71_347"
" nominal-phase72_348"
" nominal-require-phase74_350"
" nominal-sym73_349)"
" module68_344"
" phase69_345"
" sym70_346)))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_354 sym_355 phase_356 nominal-module_357)"
"(simple-module-binding52.1 module_354 phase_356 sym_355 nominal-module_357)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_358)"
"(if(simple-module-binding? b_358)(simple-module-binding-module b_358)(full-module-binding-module b_358))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_359)"
"(if(simple-module-binding? b_359)(simple-module-binding-phase b_359)(full-module-binding-phase b_359))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_360)"
"(if(simple-module-binding? b_360)(simple-module-binding-sym b_360)(full-module-binding-sym b_360))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_361)"
"(if(simple-module-binding? b_361)"
"(simple-module-binding-nominal-module b_361)"
"(full-module-binding-nominal-module b_361))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_362)"
"(if(simple-module-binding? b_362)(simple-module-binding-phase b_362)(full-module-binding-nominal-phase b_362))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_363)"
"(if(simple-module-binding? b_363)(simple-module-binding-sym b_363)(full-module-binding-nominal-sym b_363))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_364)(if(simple-module-binding? b_364) 0(full-module-binding-nominal-require-phase b_364))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_365)(if(simple-module-binding? b_365) #f(full-module-binding-extra-inspector b_365))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_366)(if(simple-module-binding? b_366) null(full-module-binding-extra-nominal-bindings b_366))))"
"(void)"
"(void)"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_23 ser-push!_24 state_25)"
"(begin"
"(ser-push!_24 'tag '#:local-binding)"
"(ser-push!_24(full-local-binding-key b_23))"
"(ser-push!_24(full-binding-free=id b_23))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_26 free=id_27)(full-local-binding1.1 #f free=id_27 key_26)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_28 frame-id4_29 free=id3_30 free=id5_31 key6_32)"
"(let-values(((key_33) key6_32))"
"(let-values(((frame-id_34)(if frame-id4_29 frame-id2_28 #f)))"
"(let-values(((free=id_35)(if free=id5_31 free=id3_30 #f)))"
"(let-values()"
"(if(if(not frame-id_34)(not free=id_35) #f)"
"(let-values() key_33)"
"(let-values()(full-local-binding1.1 frame-id_34 free=id_35 key_33)))))))))"
"(define-values"
"(unpack8.1$1)"
"(lambda(given-kws_36 given-args_37 key6_38)"
"(let-values(((frame-id4_39)(if(pair? given-kws_36)(eq? '#:frame-id(car given-kws_36)) #f)))"
"(let-values(((frame-id2_40)(if frame-id4_39(car given-args_37)(void)))"
"((given-kws_41)(if frame-id4_39(cdr given-kws_36) given-kws_36))"
"((given-args_42)(if frame-id4_39(cdr given-args_37) given-args_37)))"
"(let-values(((free=id5_43)(pair? given-kws_41)))"
"(let-values(((free=id3_44)(if free=id5_43(car given-args_42)(void))))"
"(make-local-binding7.1 frame-id2_40 frame-id4_39 free=id3_44 free=id5_43 key6_38)))))))"
"(define-values"
"(make-local-binding9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_45 given-argc_46)"
"(if(= given-argc_46 3)"
"(let-values(((l1_47) given-kws_45))"
"(let-values(((l1_48)(if(null? l1_47) l1_47(if(eq?(car l1_47) '#:frame-id)(cdr l1_47) l1_47))))"
"(let-values(((l1_49) l1_48))"
"(let-values(((l1_50)(if(null? l1_49) l1_49(if(eq?(car l1_49) '#:free=id)(cdr l1_49) l1_49))))"
"(null? l1_50)))))"
" #f))"
"(case-lambda((given-kws_51 given-args_52 key_53)(unpack8.1$1 given-kws_51 given-args_52 key_53)))"
" null"
" '(#:frame-id #:free=id)"
"(let-values(((make-local-binding_54)(case-lambda((key_55)(unpack8.1$1 null null key_55)))))"
" make-local-binding_54)))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_56 frame-id14_57 free=id12_58 free=id15_59 key10_60 key13_61 b16_62)"
"(let-values(((b_63) b16_62))"
"(let-values(((key_64)(if key13_61 key10_60(local-binding-key b_63))))"
"(let-values(((frame-id_65)(if frame-id14_57 frame-id11_56(binding-frame-id b_63))))"
"(let-values(((free=id_66)(if free=id15_59 free=id12_58(binding-free=id b_63))))"
"(let-values()"
"(let-values(((...ax/local-binding.rkt:49:2_67) make-local-binding9.1)"
"((key21_68) key_64)"
"((frame-id22_69) frame-id_65)"
"((free=id23_70) free=id_66))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id22_69 #t free=id23_70 #t key21_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ax/local-binding.rkt:49:2_67"
" keyword-procedure-extract"
" '(#:frame-id #:free=id)"
" 3)"
" '(#:frame-id #:free=id)"
"(list frame-id22_69 free=id23_70)"
" key21_68))))))))))"
"(define-values"
"(unpack18.1$3)"
"(lambda(given-kws_71 given-args_72 b16_73)"
"(let-values(((frame-id14_74)(if(pair? given-kws_71)(eq? '#:frame-id(car given-kws_71)) #f)))"
"(let-values(((frame-id11_75)(if frame-id14_74(car given-args_72)(void)))"
"((given-kws_76)(if frame-id14_74(cdr given-kws_71) given-kws_71))"
"((given-args_77)(if frame-id14_74(cdr given-args_72) given-args_72)))"
"(let-values(((free=id15_78)(if(pair? given-kws_76)(eq? '#:free=id(car given-kws_76)) #f)))"
"(let-values(((free=id12_79)(if free=id15_78(car given-args_77)(void)))"
"((given-kws_80)(if free=id15_78(cdr given-kws_76) given-kws_76))"
"((given-args_81)(if free=id15_78(cdr given-args_77) given-args_77)))"
"(let-values(((key13_82)(pair? given-kws_80)))"
"(let-values(((key10_83)(if key13_82(car given-args_81)(void))))"
"(local-binding-update17.1"
" frame-id11_75"
" frame-id14_74"
" free=id12_79"
" free=id15_78"
" key10_83"
" key13_82"
" b16_73)))))))))"
"(define-values"
"(local-binding-update19.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_84 given-argc_85)"
"(if(= given-argc_85 3)"
"(let-values(((l1_86) given-kws_84))"
"(let-values(((l1_87)(if(null? l1_86) l1_86(if(eq?(car l1_86) '#:frame-id)(cdr l1_86) l1_86))))"
"(let-values(((l1_88) l1_87))"
"(let-values(((l1_89)(if(null? l1_88) l1_88(if(eq?(car l1_88) '#:free=id)(cdr l1_88) l1_88))))"
"(let-values(((l1_90) l1_89))"
"(let-values(((l1_91)(if(null? l1_90) l1_90(if(eq?(car l1_90) '#:key)(cdr l1_90) l1_90))))"
"(null? l1_91)))))))"
" #f))"
"(case-lambda((given-kws_92 given-args_93 b_94)(unpack18.1$3 given-kws_92 given-args_93 b_94)))"
" null"
" '(#:frame-id #:free=id #:key)"
"(let-values(((local-binding-update_95)(case-lambda((b_96)(unpack18.1$3 null null b_96)))))"
" local-binding-update_95)))"
"(define-values(local-binding-key)(lambda(b_97)(if(full-local-binding? b_97)(full-local-binding-key b_97) b_97)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer)))))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'id)))))"
"(lambda(id_36)"
"(begin"
"(if(identifier? id_36)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_36)))"
"(rename-transformer1_12 id_36))))))"
"(define-values(1/rename-transformer-target)(lambda(t_37)((rename-transformer-value t_37) t_37)))"
"(void)"
"(void)"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((...r/syntax/binding.rkt:45:13_7) resolve+shift22.1)"
"((a34_8) a_1)"
"((a-phase35_9) a-phase_3)"
"((temp36_10) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f temp36_10 #t a34_8 a-phase35_9)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:45:13_7"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp36_10)"
" a34_8"
" a-phase35_9)))))"
"(let-values(((bb_6)"
"(let-values(((...r/syntax/binding.rkt:46:13_11) resolve+shift22.1)"
"((b37_12) b_2)"
"((b-phase38_13) b-phase_4)"
"((temp39_14) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f temp39_14 #t b37_12 b-phase38_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:46:13_11"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp39_14)"
" b37_12"
" b-phase38_13)))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) #f))"
"        (let-values () (error \"bad binding\" ab_16))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_18 bb_19)"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_18))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_19)))"
"(if(eqv?(module-binding-nominal-require-phase ab_18)(module-binding-nominal-require-phase bb_19))"
"(eqv?(module-binding-nominal-sym ab_18)(module-binding-nominal-sym bb_19))"
" #f)"
" #f)))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_20 phase_21)"
"(let-values(((b_22)"
"(let-values(((...r/syntax/binding.rkt:81:12_23) resolve+shift22.1)"
"((id40_24) id_20)"
"((phase41_25) phase_21)"
"((temp42_26) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f temp42_26 #t id40_24 phase41_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:81:12_23"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp42_26)"
" id40_24"
" phase41_25)))))"
"(if(symbol? b_22)"
"(let-values() b_22)"
"(if(module-binding? b_22)"
"(let-values()(module-binding-sym b_22))"
"(if(local-binding? b_22)(let-values()(local-binding-key b_22))(let-values()(syntax-e$1 id_20))))))))"
"(define-values"
"(identifier-binding$1)"
"(lambda(id_27 phase_28)"
"(let-values(((b_29)"
"(let-values(((id43_30) id_27)((phase44_31) phase_28))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f id43_30 phase44_31)"
"(resolve+shift22.1 id43_30 phase44_31)))))"
"(if(module-binding? b_29)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_29))"
" #f"
"(list"
"(module-binding-module b_29)"
"(module-binding-sym b_29)"
"(module-binding-nominal-module b_29)"
"(module-binding-nominal-sym b_29)"
"(module-binding-phase b_29)"
"(module-binding-nominal-require-phase b_29)"
"(module-binding-nominal-phase b_29))))"
"(if(local-binding? b_29)(let-values() 'lexical)(let-values() #f))))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_32 id_33 phase_34)"
"(if(1/rename-transformer? val_32)"
"(let-values()"
"(let-values(((free=id_35)(1/rename-transformer-target val_32)))"
"(if(syntax-property$1 free=id_35 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_36)"
"(let-values(((...r/syntax/binding.rkt:113:16_37) resolve+shift22.1)"
"((id48_38) id_33)"
"((phase49_39) phase_34)"
"((temp50_40) #t)"
"((temp51_41) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f temp50_40 #t #f #f temp51_41 #t #f #f id48_38 phase49_39)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:113:16_37"
" keyword-procedure-extract"
" '(#:exactly? #:immediate?)"
" 4)"
" '(#:exactly? #:immediate?)"
"(list temp50_40 temp51_41)"
" id48_38"
" phase49_39)))))"
"(let-values(((temp45_42)(syntax-scope-set id_33 phase_34))"
"((temp46_43)(syntax-e$1 id_33))"
"((temp47_44)(binding-set-free=id b_36 free=id_35)))"
"(if(variable-reference-constant?(#%variable-reference add-binding-in-scopes!18.1))"
"(add-binding-in-scopes!16.1 #f #f temp45_42 temp46_43 temp47_44)"
"(add-binding-in-scopes!18.1 temp45_42 temp46_43 temp47_44))))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_45 free=id_46)"
"(if(module-binding? b_45)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:119:24_47) module-binding-update50.1)"
"((b52_48) b_45)"
"((free=id53_49) free=id_46))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" free=id53_49"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b52_48)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:119:24_47"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id53_49)"
" b52_48))))"
"(if(local-binding? b_45)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:120:23_50) local-binding-update19.1)"
"((b54_51) b_45)"
"((free=id55_52) free=id_46))"
"(if(variable-reference-constant?(#%variable-reference local-binding-update19.1))"
"(local-binding-update17.1 #f #f free=id55_52 #t #f #f b54_51)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:120:23_50"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id55_52)"
" b54_51))))"
"        (let-values () (error \"bad binding for free=id:\" b_45))))))"
"(define-values"
"(syntax-module-path-index-shift)"
"(let-values(((syntax-module-path-index-shift6_53)"
"(lambda(s3_54 from-mpi4_55 to-mpi5_56 inspector1_57 inspector2_58)"
"(let-values(((s_59) s3_54))"
"(let-values(((from-mpi_60) from-mpi4_55))"
"(let-values(((to-mpi_61) to-mpi5_56))"
"(let-values(((inspector_62)(if inspector2_58 inspector1_57 #f)))"
"(let-values()"
"(if(eq? from-mpi_60 to-mpi_61)"
"(let-values()(if inspector_62(syntax-set-inspector s_59 inspector_62) s_59))"
"(let-values()"
"(let-values(((shift_63)(cons from-mpi_60 to-mpi_61)))"
"(let-values(((shifts56_64) #f))"
"(let-values(((prev-result_65) #f))"
"(let-values(((add-shift_66)"
"(lambda(shifts_67)"
"(if(eq? shifts56_64 shifts_67)"
"(let-values() prev-result_65)"
"(let-values()"
"(let-values(((r_68)"
"(let-values()(cons shift_63 shifts_67))))"
"(begin"
"(set! shifts56_64 shifts_67)"
"(set! prev-result_65 r_68)"
" r_68)))))))"
"(syntax-map"
" s_59"
"(lambda(tail?_69 d_70) d_70)"
"(lambda(s_71 d_72)"
"(let-values(((the-struct_73) s_71))"
"(if(syntax?$1 the-struct_73)"
"(let-values(((content57_74) d_72)"
"((mpi-shifts58_75)(add-shift_66(syntax-mpi-shifts s_71)))"
"((inspector59_76)"
"(let-values(((or-part_77)(syntax-inspector s_71)))"
"(if or-part_77 or-part_77 inspector_62))))"
"(syntax1.1"
" content57_74"
"(syntax-scopes the-struct_73)"
"(syntax-shifted-multi-scopes the-struct_73)"
"(syntax-scope-propagations the-struct_73)"
" mpi-shifts58_75"
"(syntax-srcloc the-struct_73)"
"(syntax-props the-struct_73)"
" inspector59_76"
"(syntax-tamper the-struct_73)))"
"                                               (raise-argument-error 'struct-copy \"syntax?\" the-struct_73))))"
" syntax-e/no-taint)))))))))))))))"
"(case-lambda"
"((s_78 from-mpi_79 to-mpi_80)(syntax-module-path-index-shift6_53 s_78 from-mpi_79 to-mpi_80 #f #f))"
"((s_81 from-mpi_82 to-mpi_83 inspector1_84)"
"(syntax-module-path-index-shift6_53 s_81 from-mpi_82 to-mpi_83 inspector1_84 #t)))))"
"(define-values"
"(resolve+shift20.1)"
"(lambda(ambiguous-value8_85"
" ambiguous-value13_86"
" exactly?9_87"
" exactly?14_88"
" extra-shifts12_89"
" extra-shifts17_90"
" immediate?10_91"
" immediate?15_92"
" unbound-sym?11_93"
" unbound-sym?16_94"
" s18_95"
" phase19_96)"
"(let-values(((s_97) s18_95))"
"(let-values(((phase_98) phase19_96))"
"(let-values(((ambiguous-value_99)(if ambiguous-value13_86 ambiguous-value8_85 #f)))"
"(let-values(((exactly?_100)(if exactly?14_88 exactly?9_87 #f)))"
"(let-values(((immediate?_101)(if immediate?15_92 immediate?10_91 exactly?_100)))"
"(let-values(((unbound-sym?_102)(if unbound-sym?16_94 unbound-sym?11_93 #f)))"
"(let-values(((extra-shifts_103)(if extra-shifts17_90 extra-shifts12_89 null)))"
"(let-values()"
"(let-values(((immediate-b_104)"
"(let-values(((...r/syntax/binding.rkt:162:22_106) resolve31.1)"
"((s60_107) s_97)"
"((phase61_108) phase_98)"
"((ambiguous-value62_109) ambiguous-value_99)"
"((exactly?63_110) exactly?_100)"
"((extra-shifts64_111) extra-shifts_103))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1"
" ambiguous-value62_109"
" #t"
" exactly?63_110"
" #t"
" extra-shifts64_111"
" #t"
" #f"
" #f"
" s60_107"
" phase61_108)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:162:22_106"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(list ambiguous-value62_109 exactly?63_110 extra-shifts64_111)"
" s60_107"
" phase61_108)))))"
"(let-values(((b_105)"
"(if(if immediate-b_104"
"(if(not immediate?_101)(binding-free=id immediate-b_104) #f)"
" #f)"
"(let-values(((...r/syntax/binding.rkt:169:16_112) resolve+shift22.1)"
"((temp65_113)(binding-free=id immediate-b_104))"
"((phase66_114) phase_98)"
"((temp67_115)(append extra-shifts_103(syntax-mpi-shifts s_97)))"
"((ambiguous-value68_116) ambiguous-value_99)"
"((exactly?69_117) exactly?_100)"
"((unbound-sym?70_118) unbound-sym?_102))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" ambiguous-value68_116"
" #t"
" exactly?69_117"
" #t"
" temp67_115"
" #t"
" #f"
" #f"
" unbound-sym?70_118"
" #t"
" temp65_113"
" phase66_114)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:169:16_112"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
"(list ambiguous-value68_116 exactly?69_117 temp67_115 unbound-sym?70_118)"
" temp65_113"
" phase66_114)))"
" immediate-b_104)))"
"(if(module-binding? b_105)"
"(let-values()"
"(let-values(((mpi-shifts_119)(syntax-mpi-shifts s_97)))"
"(if(null? mpi-shifts_119)"
"(let-values() b_105)"
"(let-values()"
"(let-values(((mod_120)(module-binding-module b_105)))"
"(let-values(((shifted-mod_121)(apply-syntax-shifts mod_120 mpi-shifts_119)))"
"(let-values(((nominal-mod_122)(module-binding-nominal-module b_105)))"
"(let-values(((shifted-nominal-mod_123)"
"(if(eq? mod_120 nominal-mod_122)"
" shifted-mod_121"
"(apply-syntax-shifts nominal-mod_122 mpi-shifts_119))))"
"(if(if(eq? mod_120 shifted-mod_121)"
"(if(eq? nominal-mod_122 shifted-nominal-mod_123)"
"(if(not(binding-free=id b_105))"
"(null?(module-binding-extra-nominal-bindings b_105))"
" #f)"
" #f)"
" #f)"
" b_105"
"(let-values(((...r/syntax/binding.rkt:193:10_124)"
" module-binding-update50.1)"
"((b71_125) b_105)"
"((shifted-mod72_126) shifted-mod_121)"
"((shifted-nominal-mod73_127) shifted-nominal-mod_123)"
"((temp74_128)"
"(if(binding-free=id b_105)"
"(syntax-transfer-shifts(binding-free=id b_105) s_97)"
" #f))"
"((temp75_129)"
"(alt-reverse"
"(let-values(((lst_130)"
"(module-binding-extra-nominal-bindings b_105)))"
"(begin"
"(if(list? lst_130)"
"(void)"
"(let-values()(in-list lst_130)))"
"((letrec-values(((for-loop_131)"
"(lambda(fold-var_132 lst_133)"
"(if(pair? lst_133)"
"(let-values(((b_134)"
"(unsafe-car"
" lst_133)))"
"(let-values(((fold-var_135)"
"(let-values(((fold-var_136)"
" fold-var_132))"
"(let-values(((fold-var_137)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_134"
" mpi-shifts_119))"
" fold-var_136))))"
"(values"
" fold-var_137)))))"
"(for-loop_131"
" fold-var_135"
"(unsafe-cdr lst_133))))"
" fold-var_132))))"
" for-loop_131)"
" null"
" lst_130))))))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" temp75_129"
" #t"
" #f"
" #f"
" temp74_128"
" #t"
" shifted-mod72_126"
" #t"
" shifted-nominal-mod73_127"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b71_125)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:193:10_124"
" keyword-procedure-extract"
" '(#:extra-nominal-bindings #:free=id #:module #:nominal-module)"
" 3)"
" '(#:extra-nominal-bindings #:free=id #:module #:nominal-module)"
"(list"
" temp75_129"
" temp74_128"
" shifted-mod72_126"
" shifted-nominal-mod73_127)"
" b71_125))))))))))))"
"(if(if(not b_105) unbound-sym?_102 #f)"
"(let-values()(syntax-e$1 s_97))"
"(let-values() b_105)))))))))))))))"
"(define-values"
"(unpack21.1)"
"(lambda(given-kws_138 given-args_139 s18_140 phase19_141)"
"(let-values(((ambiguous-value13_142)(if(pair? given-kws_138)(eq? '#:ambiguous-value(car given-kws_138)) #f)))"
"(let-values(((ambiguous-value8_143)(if ambiguous-value13_142(car given-args_139)(void)))"
"((given-kws_144)(if ambiguous-value13_142(cdr given-kws_138) given-kws_138))"
"((given-args_145)(if ambiguous-value13_142(cdr given-args_139) given-args_139)))"
"(let-values(((exactly?14_146)(if(pair? given-kws_144)(eq? '#:exactly?(car given-kws_144)) #f)))"
"(let-values(((exactly?9_147)(if exactly?14_146(car given-args_145)(void)))"
"((given-kws_148)(if exactly?14_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if exactly?14_146(cdr given-args_145) given-args_145)))"
"(let-values(((extra-shifts17_150)(if(pair? given-kws_148)(eq? '#:extra-shifts(car given-kws_148)) #f)))"
"(let-values(((extra-shifts12_151)(if extra-shifts17_150(car given-args_149)(void)))"
"((given-kws_152)(if extra-shifts17_150(cdr given-kws_148) given-kws_148))"
"((given-args_153)(if extra-shifts17_150(cdr given-args_149) given-args_149)))"
"(let-values(((immediate?15_154)(if(pair? given-kws_152)(eq? '#:immediate?(car given-kws_152)) #f)))"
"(let-values(((immediate?10_155)(if immediate?15_154(car given-args_153)(void)))"
"((given-kws_156)(if immediate?15_154(cdr given-kws_152) given-kws_152))"
"((given-args_157)(if immediate?15_154(cdr given-args_153) given-args_153)))"
"(let-values(((unbound-sym?16_158)(pair? given-kws_156)))"
"(let-values(((unbound-sym?11_159)(if unbound-sym?16_158(car given-args_157)(void))))"
"(resolve+shift20.1"
" ambiguous-value8_143"
" ambiguous-value13_142"
" exactly?9_147"
" exactly?14_146"
" extra-shifts12_151"
" extra-shifts17_150"
" immediate?10_155"
" immediate?15_154"
" unbound-sym?11_159"
" unbound-sym?16_158"
" s18_140"
" phase19_141)))))))))))))"
"(define-values"
"(resolve+shift22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_160 given-argc_161)"
"(if(= given-argc_161 4)"
"(let-values(((l1_162) given-kws_160))"
"(let-values(((l1_163)"
"(if(null? l1_162) l1_162(if(eq?(car l1_162) '#:ambiguous-value)(cdr l1_162) l1_162))))"
"(let-values(((l1_164) l1_163))"
"(let-values(((l1_165)(if(null? l1_164) l1_164(if(eq?(car l1_164) '#:exactly?)(cdr l1_164) l1_164))))"
"(let-values(((l1_166) l1_165))"
"(let-values(((l1_167)"
"(if(null? l1_166) l1_166(if(eq?(car l1_166) '#:extra-shifts)(cdr l1_166) l1_166))))"
"(let-values(((l1_168) l1_167))"
"(let-values(((l1_169)"
"(if(null? l1_168)"
" l1_168"
"(if(eq?(car l1_168) '#:immediate?)(cdr l1_168) l1_168))))"
"(let-values(((l1_170) l1_169))"
"(let-values(((l1_171)"
"(if(null? l1_170)"
" l1_170"
"(if(eq?(car l1_170) '#:unbound-sym?)(cdr l1_170) l1_170))))"
"(null? l1_171)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_172 given-args_173 s_174 phase_175)(unpack21.1 given-kws_172 given-args_173 s_174 phase_175)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:immediate? #:unbound-sym?)"
"(let-values(((resolve+shift_176)(case-lambda((s_177 phase_178)(unpack21.1 null null s_177 phase_178)))))"
" resolve+shift_176)))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_179 shifts_180)"
"(if(null? shifts_180)"
"(let-values() mpi_179)"
"(let-values()"
"(let-values(((shifted-mpi_181)(apply-syntax-shifts mpi_179(cdr shifts_180))))"
"(module-path-index-shift shifted-mpi_181(caar shifts_180)(cdar shifts_180)))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_182 shifts_183)"
"(if(null? shifts_183)"
"(let-values() b_182)"
"(let-values()"
"(let-values(((shifted-b_184)(apply-syntax-shifts-to-binding b_182(cdr shifts_183))))"
"(binding-module-path-index-shift shifted-b_184(caar shifts_183)(cdar shifts_183)))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_187 from-mpi_188 to-mpi_189)"
"(if(module-binding? b_187)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:229:4_190) module-binding-update50.1)"
"((b76_191) b_187)"
"((temp77_192)(module-path-index-shift(module-binding-module b_187) from-mpi_188 to-mpi_189))"
"((temp78_193)"
"(module-path-index-shift(module-binding-nominal-module b_187) from-mpi_188 to-mpi_189))"
"((temp79_194)"
"(alt-reverse"
"(let-values(((lst_195)(module-binding-extra-nominal-bindings b_187)))"
"(begin"
"(if(list? lst_195)(void)(let-values()(in-list lst_195)))"
"((letrec-values(((for-loop_196)"
"(lambda(fold-var_197 lst_198)"
"(if(pair? lst_198)"
"(let-values(((b_199)(unsafe-car lst_198)))"
"(let-values(((fold-var_200)"
"(let-values(((fold-var_201) fold-var_197))"
"(let-values(((fold-var_202)"
"(let-values()"
"(cons"
"(let-values()"
"(binding-module-path-index-shift"
" b_199"
" from-mpi_188"
" to-mpi_189))"
" fold-var_201))))"
"(values fold-var_202)))))"
"(for-loop_196 fold-var_200(unsafe-cdr lst_198))))"
" fold-var_197))))"
" for-loop_196)"
" null"
" lst_195))))))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" temp79_194"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp77_192"
" #t"
" temp78_193"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b76_191)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:229:4_190"
" keyword-procedure-extract"
" '(#:extra-nominal-bindings #:module #:nominal-module)"
" 3)"
" '(#:extra-nominal-bindings #:module #:nominal-module)"
"(list temp79_194 temp77_192 temp78_193)"
" b76_191))))"
"(let-values() b_187))))"
"(define-values"
"(syntax-transfer-shifts)"
"(let-values(((syntax-transfer-shifts27_203)"
"(lambda(to-s25_204 from-s26_205 inspector23_206 inspector24_207)"
"(let-values(((to-s_208) to-s25_204))"
"(let-values(((from-s_209) from-s26_205))"
"(let-values(((inspector_210)(if inspector24_207 inspector23_206 #f)))"
"(let-values()"
"(let-values(((shifts_211)(syntax-mpi-shifts from-s_209)))"
"(if(if(null? shifts_211) inspector_210 #f)"
"(let-values()(syntax-set-inspector to-s_208 inspector_210))"
"(let-values()"
"(let-values(((lst_212)(alt-reverse shifts_211))((start_213) 0))"
"(begin"
"(if(list? lst_212)(void)(let-values()(in-list lst_212)))"
"(if(exact-nonnegative-integer? start_213)"
"(void)"
"(let-values()(in-naturals start_213)))"
"((letrec-values(((for-loop_214)"
"(lambda(s_215 lst_216 pos_217)"
"(if(if(pair? lst_216) #t #f)"
"(let-values(((shift_218)(unsafe-car lst_216))"
"((i_219) pos_217))"
"(let-values(((s_220)"
"(let-values(((s_221) s_215))"
"(let-values(((s_222)"
"(let-values()"
"(syntax-module-path-index-shift"
" s_221"
"(car shift_218)"
"(cdr shift_218)"
"(if(zero? i_219)"
" inspector_210"
" #f)))))"
"(values s_222)))))"
"(for-loop_214 s_220(unsafe-cdr lst_216)(+ pos_217 1))))"
" s_215))))"
" for-loop_214)"
" to-s_208"
" lst_212"
" start_213)))))))))))))"
"(case-lambda"
"((to-s_223 from-s_224)(syntax-transfer-shifts27_203 to-s_223 from-s_224 #f #f))"
"((to-s_225 from-s_226 inspector23_227)(syntax-transfer-shifts27_203 to-s_225 from-s_226 inspector23_227 #t)))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_228 insp_229)"
"(syntax-map"
" s_228"
"(lambda(tail?_230 d_231) d_231)"
"(lambda(s_232 d_233)"
"(let-values(((the-struct_234) s_232))"
"(if(syntax?$1 the-struct_234)"
"(let-values(((content80_235) d_233)"
"((inspector81_236)"
"(let-values(((or-part_237)(syntax-inspector s_232)))(if or-part_237 or-part_237 insp_229))))"
"(syntax1.1"
" content80_235"
"(syntax-scopes the-struct_234)"
"(syntax-shifted-multi-scopes the-struct_234)"
"(syntax-scope-propagations the-struct_234)"
"(syntax-mpi-shifts the-struct_234)"
"(syntax-srcloc the-struct_234)"
"(syntax-props the-struct_234)"
" inspector81_236"
"(syntax-tamper the-struct_234)))"
"           (raise-argument-error 'struct-copy \"syntax?\" the-struct_234))))"
" syntax-content)))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module32_238)"
"(lambda(s31_239 source?29_240 source?30_241)"
"(let-values(((s_242) s31_239))"
"(let-values(((source?_243)(if source?30_241 source?29_240 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_242)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_242)))"
"(let-values(((lst_244)(alt-reverse(syntax-mpi-shifts s_242))))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(result_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((shift_248)(unsafe-car lst_247)))"
"(let-values(((result_249)"
"(let-values(((result_250) result_246))"
"(let-values(((result_251)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_252)"
"(car shift_248)))"
"(let-values(((path_253"
" base_254)"
"(1/module-path-index-split"
" from-mpi_252)))"
"(if(not path_253)"
"(if(module-path-index-resolved"
" from-mpi_252)"
"(apply-syntax-shifts"
" from-mpi_252"
"(syntax-mpi-shifts"
" s_242))"
" #f)"
" #f)))))))"
"(values result_251)))))"
"(if(not((lambda x_255 result_249) shift_248))"
"(for-loop_245 result_249(unsafe-cdr lst_247))"
" result_249)))"
" result_246))))"
" for-loop_245)"
" #f"
" lst_244))))))))))"
"(case-lambda"
"((s_256)(syntax-source-module32_238 s_256 #f #f))"
"((s_257 source?29_258)(syntax-source-module32_238 s_257 source?29_258 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_259)"
"(begin"
"(if(identifier? id_259)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_259)))"
"(let-values(((the-struct_260)(datum->syntax$1 #f(syntax-e$1 id_259) id_259 id_259)))"
"(if(syntax?$1 the-struct_260)"
"(let-values(((mpi-shifts82_261)(syntax-mpi-shifts id_259)))"
"(syntax1.1"
"(syntax-content the-struct_260)"
"(syntax-scopes the-struct_260)"
"(syntax-shifted-multi-scopes the-struct_260)"
"(syntax-scope-propagations the-struct_260)"
" mpi-shifts82_261"
"(syntax-srcloc the-struct_260)"
"(syntax-props the-struct_260)"
"(syntax-inspector the-struct_260)"
"(syntax-tamper the-struct_260)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_260))))))"
"(void)"
"(void)"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 #t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
"    (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(void)"
"(void)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(void)"
"(void)"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(p_31 ser-push!_32 state_33)"
"(begin"
"(ser-push!_32 'tag '#:provided)"
"(ser-push!_32(provided-binding p_31))"
"(ser-push!_32(provided-protected? p_31))"
"(ser-push!_32(provided-syntax? p_31))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_34)(if(provided? v_34)(provided-binding v_34) v_34)))"
"(define-values(provided-as-protected?)(lambda(v_35)(if(provided? v_35)(provided-protected? v_35) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_36)(if(provided? v_36)(provided-syntax? v_36) #f)))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_37 protected?_38 syntax?_39)(provided1.1 binding_37 protected?_38 syntax?_39)))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$24 lifted/2.1$24 lifted/3.1$22 lifted/4.1$22 lifted/5.1$22)"
"(make-struct-type"
" 'provide-binding-to-require-binding"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'provide-binding-to-require-binding"
"(case-lambda((self_6 binding/p_7 sym_8)(apply missing-kw self_6 binding/p_7 sym_8 null))))))"
"(current-inspector)"
"(case-lambda((self_9 binding/p_10 sym_11)(apply missing-kw self_9 binding/p_10 sym_11 null)))))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_12 phase-shift4_13 provide-phase-level3_14 self1_15 binding/p9_16 sym10_17)"
"(let-values(((binding/p_18) binding/p9_16))"
"(let-values(((sym_19) sym10_17))"
"(let-values(((self_20) self1_15))"
"(let-values(((mpi_21) mpi2_12))"
"(let-values(((provide-phase-level_22) provide-phase-level3_14))"
"(let-values(((phase-shift_23) phase-shift4_13))"
"(let-values()"
"(let-values(((binding_24)(provided-as-binding binding/p_18)))"
"(let-values(((from-mod_25)(module-binding-module binding_24)))"
"(let-values(((...tax/bulk-binding.rkt:51:2_26) module-binding-update50.1)"
"((binding17_27) binding_24)"
"((temp18_28)(module-path-index-shift from-mod_25 self_20 mpi_21))"
"((mpi19_29) mpi_21)"
"((provide-phase-level20_30) provide-phase-level_22)"
"((sym21_31) sym_19)"
"((phase-shift22_32) phase-shift_23)"
"((temp23_33) #f)"
"((temp24_34)"
"(if(not(provided-as-protected? binding/p_18))"
"(module-binding-extra-inspector binding_24)"
" #f))"
"((null25_35) null))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" temp24_34"
" #t"
" null25_35"
" #t"
" temp23_33"
" #t"
" #f"
" #f"
" temp18_28"
" #t"
" mpi19_29"
" #t"
" provide-phase-level20_30"
" #t"
" phase-shift22_32"
" #t"
" sym21_31"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding17_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:51:2_26"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 3)"
" '(#:extra-inspector"
" #:extra-nominal-bindings"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" temp24_34"
" null25_35"
" temp23_33"
" temp18_28"
" mpi19_29"
" provide-phase-level20_30"
" phase-shift22_32"
" sym21_31)"
" binding17_27))))))))))))))"
"(define-values"
"(unpack12.1$2)"
"(lambda(given-kws_36 given-args_37 binding/p9_38 sym10_39)"
"(let-values(((mpi2_40)(car given-args_37))"
"((given-kws_41)(cdr given-kws_36))"
"((given-args_42)(cdr given-args_37)))"
"(let-values(((phase-shift4_43)(car given-args_42))"
"((given-kws_44)(cdr given-kws_41))"
"((given-args_45)(cdr given-args_42)))"
"(let-values(((provide-phase-level3_46)(car given-args_45))"
"((given-kws_47)(cdr given-kws_44))"
"((given-args_48)(cdr given-args_45)))"
"(let-values(((self1_49)(car given-args_48)))"
"(provide-binding-to-require-binding11.1"
" mpi2_40"
" phase-shift4_43"
" provide-phase-level3_46"
" self1_49"
" binding/p9_38"
" sym10_39)))))))"
"(define-values"
"(provide-binding-to-require-binding13.1)"
"(lifted/2.1$24"
"(lambda(given-kws_50 given-argc_51)"
"(if(= given-argc_51 4)"
"(let-values(((l2_52) given-kws_50))"
"(if(pair? l2_52)"
"(if(eq?(car l2_52) '#:mpi)"
"(let-values(((l2_53)(cdr l2_52)))"
"(if(pair? l2_53)"
"(if(eq?(car l2_53) '#:phase-shift)"
"(let-values(((l2_54)(cdr l2_53)))"
"(if(pair? l2_54)"
"(if(eq?(car l2_54) '#:provide-phase-level)"
"(let-values(((l2_55)(cdr l2_54)))"
"(if(pair? l2_55)(if(eq?(car l2_55) '#:self)(null?(cdr l2_55)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_56 given-args_57 binding/p_58 sym_59)(unpack12.1$2 given-kws_56 given-args_57 binding/p_58 sym_59)))"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_60 make-_61 ?_62 -ref_63 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_115 ser-push!_116 reachable-scopes_117)"
"(begin"
"(ser-push!_116 'tag '#:bulk-binding)"
"(ser-push!_116(bulk-binding-prefix b_115))"
"(ser-push!_116(bulk-binding-excepts b_115))"
"(ser-push!_116(bulk-binding-mpi b_115))"
"(ser-push!_116(bulk-binding-provide-phase-level b_115))"
"(ser-push!_116(bulk-binding-phase-shift b_115))"
"(ser-push!_116 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_118 mpi-shifts_119)"
"(let-values(((or-part_120)(bulk-binding-provides b_118)))"
"(if or-part_120"
" or-part_120"
"(let-values(((mod-name_121)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_118) mpi-shifts_119))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_118)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_121)))"
"(values))))"
"(let-values(((table_122)"
"(bulk-binding-registry-table"
"(bulk-binding-bulk-binding-registry b_118))))"
"(let-values(((bulk-provide_123)(hash-ref table_122 mod-name_121 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_123"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_121)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self!"
" b_118"
"(bulk-provide-self bulk-provide_123))"
"(values))))"
"(let-values(((provides_124)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_123)"
"(bulk-binding-provide-phase-level b_118))))"
"(let-values(((excepts_125)(bulk-binding-excepts b_118)))"
"(let-values(((prefix_126)(bulk-binding-prefix b_118)))"
"(let-values(((adjusted-provides_127)"
"(if(let-values(((or-part_128) prefix_126))"
"(if or-part_128"
" or-part_128"
"(positive?(hash-count excepts_125))))"
"(let-values()"
"(let-values(((ht_129) provides_124))"
"(begin"
"(if((lambda(ht_130)(hash? ht_130)) ht_129)"
"(void)"
"(let-values()(default-in-hash ht_129)))"
"((letrec-values(((for-loop_131)"
"(lambda(table_132 i_133)"
"(if i_133"
"(let-values(((sym_134"
" val_135)"
"(hash-iterate-key+value"
" ht_129"
" i_133)))"
"(let-values(((table_136)"
"(let-values(((table_137)"
" table_132))"
"(if(hash-ref"
" excepts_125"
" sym_134"
" #f)"
" table_137"
"(let-values(((table_138)"
" table_137))"
"(let-values(((table_139)"
"(let-values()"
"(let-values(((key_140"
" val_141)"
"(let-values()"
"(values"
"(if prefix_126"
"(string->symbol"
"(format"
"                                                                                                                                                       \"~a~a\""
" prefix_126"
" sym_134))"
" sym_134)"
" val_135))))"
"(hash-set"
" table_138"
" key_140"
" val_141)))))"
"(values"
" table_139)))))))"
"(for-loop_131"
" table_136"
"(hash-iterate-next"
" ht_129"
" i_133))))"
" table_132))))"
" for-loop_131)"
" '#hash()"
"(hash-iterate-first ht_129)))))"
"(let-values() provides_124))))"
"(begin"
"(set-bulk-binding-provides! b_118 adjusted-provides_127)"
" adjusted-provides_127))))))))))))))"
"(lambda(b_142 binding_143 sym_144)"
"(let-values(((...tax/bulk-binding.rkt:122:11_145) provide-binding-to-require-binding13.1)"
"((binding27_146) binding_143)"
"((temp28_147)"
"(if(bulk-binding-prefix b_142)"
"(string->symbol"
"(substring"
"(symbol->string sym_144)"
"(string-length(symbol->string(bulk-binding-prefix b_142)))))"
" sym_144))"
"((temp29_148)(bulk-binding-self b_142))"
"((temp30_149)(bulk-binding-mpi b_142))"
"((temp31_150)(bulk-binding-provide-phase-level b_142))"
"((temp32_151)(bulk-binding-phase-shift b_142)))"
"(if(variable-reference-constant?"
"(#%variable-reference provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" temp30_149"
" temp32_151"
" temp31_150"
" temp29_148"
" binding27_146"
" temp28_147)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:122:11_145"
" keyword-procedure-extract"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" 4)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
"(list temp30_149 temp32_151 temp31_150 temp29_148)"
" binding27_146"
" temp28_147)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_60"
" make-_61"
" ?_62"
"(make-struct-field-accessor -ref_63 0 'provides)"
"(make-struct-field-accessor -ref_63 1 'prefix)"
"(make-struct-field-accessor -ref_63 2 'excepts)"
"(make-struct-field-accessor -ref_63 3 'self)"
"(make-struct-field-accessor -ref_63 4 'mpi)"
"(make-struct-field-accessor -ref_63 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_63 6 'phase-shift)"
"(make-struct-field-accessor -ref_63 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_64 0 'provides)"
"(make-struct-field-mutator -set!_64 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_152 excepts_153 mpi_154 provide-phase-level_155 phase-shift_156 bulk-binding-registry_157)"
"(bulk-binding14.1"
" #f"
" prefix_152"
" excepts_153"
" #f"
" mpi_154"
" provide-phase-level_155"
" phase-shift_156"
" bulk-binding-registry_157)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_158 make-_159 ?_160 -ref_161 -set!_162)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_158"
" make-_159"
" ?_160"
"(make-struct-field-accessor -ref_161 0 'self)"
"(make-struct-field-accessor -ref_161 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_183 make-_184 ?_185 -ref_186 -set!_187)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_183 make-_184 ?_185(make-struct-field-accessor -ref_186 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_203 mod-name_204 self_205 provides_206)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_203)"
" mod-name_204"
"(bulk-provide15.1 self_205 provides_206))))"
"(void)"
"(void)"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(void)"
"(void)"
"(define-values"
"(struct:root-expand-context"
" root-expand-context1.1"
" root-expand-context?"
" root-expand-context-module-scopes"
" root-expand-context-post-expansion-scope"
" root-expand-context-top-level-bind-scope"
" root-expand-context-all-scopes-stx"
" root-expand-context-use-site-scopes"
" root-expand-context-defined-syms"
" root-expand-context-frame-id"
" root-expand-context-counter"
" root-expand-context-lift-key)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'root-expand-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-scopes)"
"(make-struct-field-accessor -ref_4 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_4 4 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 5 'defined-syms)"
"(make-struct-field-accessor -ref_4 6 'frame-id)"
"(make-struct-field-accessor -ref_4 7 'counter)"
"(make-struct-field-accessor -ref_4 8 'lift-key))))"
"(define-values"
"(make-root-expand-context10.1)"
"(lambda(all-scopes-stx5_61"
" all-scopes-stx9_62"
" initial-scopes2_63"
" initial-scopes6_64"
" outside-scope3_65"
" outside-scope7_66"
" post-expansion-scope4_67"
" post-expansion-scope8_68)"
"(let-values(((initial-scopes_69)(if initial-scopes6_64 initial-scopes2_63 null)))"
"(let-values(((outside-scope_70)(if outside-scope7_66 outside-scope3_65 top-level-common-scope)))"
"(let-values(((post-expansion-scope_71)"
"(if post-expansion-scope8_68 post-expansion-scope4_67(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_72)(if all-scopes-stx9_62 all-scopes-stx5_61 #f)))"
"(let-values()"
"(let-values(((module-scopes_73)(list* post-expansion-scope_71 outside-scope_70 initial-scopes_69)))"
"(root-expand-context1.1"
" module-scopes_73"
" post-expansion-scope_71"
"(new-scope 'module)"
"(let-values(((or-part_74) all-scopes-stx_72))"
"(if or-part_74 or-part_74(add-scopes empty-syntax module-scopes_73)))"
"(box null)"
"(make-hasheqv)"
"                 (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(unpack11.1)"
"(lambda(given-kws_75 given-args_76)"
"(let-values(((all-scopes-stx9_77)(if(pair? given-kws_75)(eq? '#:all-scopes-stx(car given-kws_75)) #f)))"
"(let-values(((all-scopes-stx5_78)(if all-scopes-stx9_77(car given-args_76)(void)))"
"((given-kws_79)(if all-scopes-stx9_77(cdr given-kws_75) given-kws_75))"
"((given-args_80)(if all-scopes-stx9_77(cdr given-args_76) given-args_76)))"
"(let-values(((initial-scopes6_81)(if(pair? given-kws_79)(eq? '#:initial-scopes(car given-kws_79)) #f)))"
"(let-values(((initial-scopes2_82)(if initial-scopes6_81(car given-args_80)(void)))"
"((given-kws_83)(if initial-scopes6_81(cdr given-kws_79) given-kws_79))"
"((given-args_84)(if initial-scopes6_81(cdr given-args_80) given-args_80)))"
"(let-values(((outside-scope7_85)(if(pair? given-kws_83)(eq? '#:outside-scope(car given-kws_83)) #f)))"
"(let-values(((outside-scope3_86)(if outside-scope7_85(car given-args_84)(void)))"
"((given-kws_87)(if outside-scope7_85(cdr given-kws_83) given-kws_83))"
"((given-args_88)(if outside-scope7_85(cdr given-args_84) given-args_84)))"
"(let-values(((post-expansion-scope8_89)(pair? given-kws_87)))"
"(let-values(((post-expansion-scope4_90)(if post-expansion-scope8_89(car given-args_88)(void))))"
"(make-root-expand-context10.1"
" all-scopes-stx5_78"
" all-scopes-stx9_77"
" initial-scopes2_82"
" initial-scopes6_81"
" outside-scope3_86"
" outside-scope7_85"
" post-expansion-scope4_90"
" post-expansion-scope8_89)))))))))))"
"(define-values"
"(make-root-expand-context12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_91 given-argc_92)"
"(if(= given-argc_92 2)"
"(let-values(((l1_93) given-kws_91))"
"(let-values(((l1_94)(if(null? l1_93) l1_93(if(eq?(car l1_93) '#:all-scopes-stx)(cdr l1_93) l1_93))))"
"(let-values(((l1_95) l1_94))"
"(let-values(((l1_96)(if(null? l1_95) l1_95(if(eq?(car l1_95) '#:initial-scopes)(cdr l1_95) l1_95))))"
"(let-values(((l1_97) l1_96))"
"(let-values(((l1_98)"
"(if(null? l1_97) l1_97(if(eq?(car l1_97) '#:outside-scope)(cdr l1_97) l1_97))))"
"(let-values(((l1_99) l1_98))"
"(let-values(((l1_100)"
"(if(null? l1_99)"
" l1_99"
"(if(eq?(car l1_99) '#:post-expansion-scope)(cdr l1_99) l1_99))))"
"(null? l1_100)))))))))"
" #f))"
"(case-lambda((given-kws_101 given-args_102)(unpack11.1 given-kws_101 given-args_102)))"
" null"
" '(#:all-scopes-stx #:initial-scopes #:outside-scope #:post-expansion-scope)"
"(let-values(((make-root-expand-context_103)(case-lambda(()(unpack11.1 null null)))))"
" make-root-expand-context_103)))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_104 orig-self_105 new-self_106)"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_104))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_104))"
"(syntax-module-path-index-shift(root-expand-context-all-scopes-stx ctx_104) orig-self_105 new-self_106)"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_104)))"
"(let-values(((ht_107)(root-expand-context-defined-syms ctx_104)))"
"(begin"
"(if((lambda(ht_108)(hash? ht_108)) ht_107)(void)(let-values()(default-in-hash ht_107)))"
"((letrec-values(((for-loop_109)"
"(lambda(table_110 i_111)"
"(if i_111"
"(let-values(((phase_112 ht_113)(hash-iterate-key+value ht_107 i_111)))"
"(let-values(((table_114)"
"(let-values(((table_115) table_110))"
"(let-values(((table_116)"
"(let-values()"
"(let-values(((key_117 val_118)"
"(let-values()"
"(values phase_112 ht_113))))"
"(hash-set table_115 key_117 val_118)))))"
"(values table_116)))))"
"(for-loop_109 table_114(hash-iterate-next ht_107 i_111))))"
" table_110))))"
" for-loop_109)"
" '#hasheqv()"
"(hash-iterate-first ht_107))))"
"(root-expand-context-frame-id ctx_104)"
"(unbox(root-expand-context-counter ctx_104))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_119)"
"(let-values(((vec_120)(if(syntax?$1 vec-s_119)(syntax-e$1 vec-s_119) #f)))"
"(begin"
"(if(if(vector? vec_120)"
"(if(=(vector-length vec_120) 7)"
"(if(syntax?$1(vector-ref vec_120 0))"
"(if(syntax-with-one-scope?(vector-ref vec_120 1))"
"(if(syntax?$1(vector-ref vec_120 2))"
"(if(syntax?$1(vector-ref vec_120 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_120 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_120 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_120 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_119)))"
"(root-expand-context1.1"
"(extract-scope-list(vector-ref vec_120 0))"
"(extract-scope(vector-ref vec_120 1))"
"(new-scope 'module)"
"(vector-ref vec_120 2)"
"(box(extract-scope-list(vector-ref vec_120 3)))"
"(unpack-defined-syms(vector-ref vec_120 4))"
"(syntax-e$1(vector-ref vec_120 5))"
"(box(syntax-e$1(vector-ref vec_120 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_121)"
"(let-values(((ht_122) v_121))"
"(begin"
"(if((lambda(ht_123)(hash? ht_123)) ht_122)(void)(let-values()(default-in-hash ht_122)))"
"((letrec-values(((for-loop_124)"
"(lambda(result_125 i_126)"
"(if i_126"
"(let-values(((phase_127 ht-s_128)(hash-iterate-key+value ht_122 i_126)))"
"(let-values(((result_129)"
"(let-values(((result_130) result_125))"
"(let-values(((result_131)"
"(let-values()"
"(let-values()"
"(if(phase? phase_127)"
"(if(hash?(syntax-e$1 ht-s_128))"
"(let-values(((ht_132)(syntax-e$1 ht-s_128)))"
"(begin"
"(if((lambda(ht_133)(hash? ht_133)) ht_132)"
"(void)"
"(let-values()(default-in-hash ht_132)))"
"((letrec-values(((for-loop_134)"
"(lambda(result_135 i_136)"
"(if i_136"
"(let-values(((sym_137"
" id_138)"
"(hash-iterate-key+value"
" ht_132"
" i_136)))"
"(let-values(((result_139)"
"(let-values(((result_140)"
" result_135))"
"(let-values(((result_141)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_137)"
"(identifier?"
" id_138)"
" #f)))))"
"(values"
" result_141)))))"
"(if(not"
"((lambda x_142"
"(not"
" result_139))"
" sym_137"
" id_138))"
"(for-loop_134"
" result_139"
"(hash-iterate-next"
" ht_132"
" i_136))"
" result_139)))"
" result_135))))"
" for-loop_134)"
" #t"
"(hash-iterate-first ht_132))))"
" #f)"
" #f)))))"
"(values result_131)))))"
"(if(not((lambda x_143(not result_129)) phase_127 ht-s_128))"
"(for-loop_124 result_129(hash-iterate-next ht_122 i_126))"
" result_129)))"
" result_125))))"
" for-loop_124)"
" #t"
"(hash-iterate-first ht_122))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_144)(map2 generalize-scope(set->list(syntax-scope-set stx_144 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_145)(if(syntax?$1 stx_145)(= 1(set-count(syntax-scope-set stx_145 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_146)(let-values(((s_147)(syntax-scope-set stx_146 0)))(generalize-scope(set-first s_147)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_148)"
"(hash-copy"
"(let-values(((ht_149)(syntax-e$1 v_148)))"
"(begin"
"(if((lambda(ht_150)(hash? ht_150)) ht_149)(void)(let-values()(default-in-hash ht_149)))"
"((letrec-values(((for-loop_151)"
"(lambda(table_152 i_153)"
"(if i_153"
"(let-values(((phase_154 ht-s_155)(hash-iterate-key+value ht_149 i_153)))"
"(let-values(((table_156)"
"(let-values(((table_157) table_152))"
"(let-values(((table_158)"
"(let-values()"
"(let-values(((key_159 val_160)"
"(let-values()"
"(values"
" phase_154"
"(hash-copy"
"(let-values(((ht_161)"
"(syntax-e$1 ht-s_155)))"
"(begin"
"(if((lambda(ht_162)"
"(hash? ht_162))"
" ht_161)"
"(void)"
"(let-values()"
"(default-in-hash ht_161)))"
"((letrec-values(((for-loop_163)"
"(lambda(table_164"
" i_165)"
"(if i_165"
"(let-values(((sym_166"
" id_167)"
"(hash-iterate-key+value"
" ht_161"
" i_165)))"
"(let-values(((table_168)"
"(let-values(((table_169)"
" table_164))"
"(let-values(((table_170)"
"(let-values()"
"(let-values(((key_171"
" val_172)"
"(let-values()"
"(values"
" sym_166"
" id_167))))"
"(hash-set"
" table_169"
" key_171"
" val_172)))))"
"(values"
" table_170)))))"
"(for-loop_163"
" table_168"
"(hash-iterate-next"
" ht_161"
" i_165))))"
" table_164))))"
" for-loop_163)"
" '#hash()"
"(hash-iterate-first"
" ht_161)))))))))"
"(hash-set table_157 key_159 val_160)))))"
"(values table_158)))))"
"(for-loop_151 table_156(hash-iterate-next ht_149 i_153))))"
" table_152))))"
" for-loop_151)"
" '#hasheqv()"
"(hash-iterate-first ht_149)))))))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/primitive->compiled-position)(hash-ref linklet-primitive-table 'primitive->compiled-position #f))"
"(define-values(1/compiled-position->primitive)(hash-ref linklet-primitive-table 'compiled-position->primitive #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/recompile-linklet)(hash-ref linklet-primitive-table 'recompile-linklet #f))"
"(define-values(1/eval-linklet)(hash-ref linklet-primitive-table 'eval-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_26 proc_27)"
"(let-values(((lock-box_28)(module-registry-lock-box r_26)))"
"((letrec-values(((loop_29)"
"(lambda()"
"(let-values(((v_30)(unbox lock-box_28)))"
"(if(let-values(((or-part_31)(not v_30)))"
"(if or-part_31 or-part_31(sync/timeout 0(car v_30)(cdr v_30))))"
"(let-values()"
"(let-values(((sema_32)(make-semaphore)))"
"(let-values(((lock_33)(cons(semaphore-peek-evt sema_32)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_28 v_30 lock_33)"
"(let-values()(begin(proc_27) void))"
"(let-values() loop_29)))"
"(lambda()(semaphore-post sema_32)))))))"
"(if(eq?(current-thread)(cdr v_30))"
"(let-values()(proc_27))"
"(let-values()(begin(sync(car v_30)(cdr v_30))(loop_29)))))))))"
" loop_29)))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" 1/namespace-module-registry"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_91 port_92 mode_93)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_92) (values))))"
"(let-values(((n_94)(namespace-source-name ns_91)))"
"(let-values((()"
"(begin"
"(if n_94"
"                                               (let-values () (fprintf port_92 \":~a\" (namespace->name ns_91)))"
"(void))"
"(values))))"
"(let-values(((phase_95)(namespace-phase ns_91)))"
"(begin"
"                                   (if (zero-phase? phase_95) (void) (let-values () (fprintf port_92 \":~s\" phase_95)))"
"                                   (write-string \">\" port_92)))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'source-name)"
"(make-struct-field-accessor -ref_4 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 3 'phase)"
"(make-struct-field-accessor -ref_4 4 '0-phase)"
"(make-struct-field-accessor -ref_4 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 7 'module-registry)"
"(make-struct-field-accessor -ref_4 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 10 'root-namespace)"
"(make-struct-field-accessor -ref_4 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 12 'inspector)"
"(make-struct-field-accessor -ref_4 13 'available-module-instances)"
"(make-struct-field-accessor -ref_4 14 'module-instances)"
"(make-struct-field-mutator -set!_5 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_96 make-_97 ?_98 -ref_99 -set!_100)"
"(let-values()"
"(let-values()"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))))"
"(values"
" struct:_96"
" make-_97"
" ?_98"
"(make-struct-field-accessor -ref_99 0 'variables)"
"(make-struct-field-accessor -ref_99 1 'transformers))))"
"(define-values"
"(make-namespace)"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f #f #f)"
"(new-namespace11.1)))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_121"
" register?6_122"
" root-expand-ctx3_123"
" root-expand-ctx5_124"
" share-from-ns7_125"
" share-from-ns8_126)"
"(let-values(((share-from-ns_127)(if share-from-ns8_126 share-from-ns7_125 #f)))"
"(let-values(((root-expand-ctx_128)"
"(if root-expand-ctx5_124"
" root-expand-ctx3_123"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((register?_129)(if register?6_122 register?4_121 #t)))"
"(let-values()"
"(let-values(((phase_130)(if share-from-ns_127(namespace-phase share-from-ns_127) 0)))"
"(let-values(((ns_131)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_128)"
" phase_130"
" phase_130"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_127"
"(1/namespace-module-registry share-from-ns_127)"
"(make-module-registry))"
"(if share-from-ns_127"
"(namespace-bulk-binding-registry share-from-ns_127)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_127"
"(let-values(((or-part_132)(namespace-root-namespace share-from-ns_127)))"
"(if or-part_132 or-part_132 share-from-ns_127))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_127"
"(namespace-available-module-instances share-from-ns_127)"
"(make-hasheqv))"
"(if share-from-ns_127(namespace-module-instances share-from-ns_127)(make-hasheqv)))))"
"(begin"
"(if register?_129"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_131) phase_130 ns_131))"
"(void))"
" ns_131)))))))))"
"(define-values"
"(unpack10.1$4)"
"(lambda(given-kws_133 given-args_134 share-from-ns7_135 share-from-ns8_136)"
"(let-values(((register?6_137)(if(pair? given-kws_133)(eq? '#:register?(car given-kws_133)) #f)))"
"(let-values(((register?4_138)(if register?6_137(car given-args_134)(void)))"
"((given-kws_139)(if register?6_137(cdr given-kws_133) given-kws_133))"
"((given-args_140)(if register?6_137(cdr given-args_134) given-args_134)))"
"(let-values(((root-expand-ctx5_141)(pair? given-kws_139)))"
"(let-values(((root-expand-ctx3_142)(if root-expand-ctx5_141(car given-args_140)(void))))"
"(new-namespace9.1"
" register?4_138"
" register?6_137"
" root-expand-ctx3_142"
" root-expand-ctx5_141"
" share-from-ns7_135"
" share-from-ns8_136)))))))"
"(define-values"
"(new-namespace11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_143 given-argc_144)"
"(if(if(>= given-argc_144 2)(<= given-argc_144 3) #f)"
"(let-values(((l1_145) given-kws_143))"
"(let-values(((l1_146)(if(null? l1_145) l1_145(if(eq?(car l1_145) '#:register?)(cdr l1_145) l1_145))))"
"(let-values(((l1_147) l1_146))"
"(let-values(((l1_148)"
"(if(null? l1_147) l1_147(if(eq?(car l1_147) '#:root-expand-ctx)(cdr l1_147) l1_147))))"
"(null? l1_148)))))"
" #f))"
"(case-lambda"
"((given-kws_149 given-args_150)(unpack10.1$4 given-kws_149 given-args_150 #f #f))"
"((given-kws_151 given-args_152 share-from-ns7_153)"
"(unpack10.1$4 given-kws_151 given-args_152 share-from-ns7_153 #t)))"
" null"
" '(#:register? #:root-expand-ctx)"
"(let-values(((new-namespace_154)"
"(case-lambda"
"(()(unpack10.1$4 null null #f #f))"
"((share-from-ns7_155)(unpack10.1$4 null null share-from-ns7_155 #t)))))"
" new-namespace_154)))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_156)"
"(begin"
"       (if (1/namespace? v_156) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_156)))"
" v_156))))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_157)(force(unbox(namespace-root-expand-ctx ns_157)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_158 root-ctx_159)(set-box!(namespace-root-expand-ctx ns_158) root-ctx_159)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_160 name_161)"
"(let-values(((or-part_162)(hash-ref(namespace-submodule-declarations ns_160) name_161 #f)))"
"(if or-part_162"
" or-part_162"
"(hash-ref(module-registry-declarations(1/namespace-module-registry ns_160)) name_161 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_163 phase_164)"
"(let-values(((or-part_165)(hash-ref(namespace-phase-to-namespace ns_163) phase_164 #f)))"
"(if or-part_165"
" or-part_165"
"(let-values(((p-ns_166)"
"(let-values(((the-struct_167) ns_163))"
"(if(1/namespace? the-struct_167)"
"(let-values(((phase22_168) phase_164))"
"(namespace1.1"
"(namespace-mpi the-struct_167)"
"(namespace-source-name the-struct_167)"
"(namespace-root-expand-ctx the-struct_167)"
" phase22_168"
"(namespace-0-phase the-struct_167)"
"(namespace-phase-to-namespace the-struct_167)"
"(namespace-phase-level-to-definitions the-struct_167)"
"(1/namespace-module-registry the-struct_167)"
"(namespace-bulk-binding-registry the-struct_167)"
"(namespace-submodule-declarations the-struct_167)"
"(namespace-root-namespace the-struct_167)"
"(namespace-declaration-inspector the-struct_167)"
"(namespace-inspector the-struct_167)"
"(namespace-available-module-instances the-struct_167)"
"(namespace-module-instances the-struct_167)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_167)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_163) phase_164 p-ns_166) p-ns_166))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_169)"
"(let-values(((n_170)(namespace-source-name ns_169)))"
"(let-values(((s_171)"
"(if(not n_170)"
"(let-values() 'top-level)"
"(if(symbol? n_170)"
"                        (let-values () (format \"'~s\" n_170))"
"                        (let-values () (string-append \"\\\"\" (path->string n_170) \"\\\"\"))))))"
"(let-values(((r_172)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_169)))))"
"          (if (pair? r_172) (string-append \"(submod \" s_171 \" \" (substring (format \"~s\" (cdr r_172)) 1)) s_171))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_173 phase-level_174)"
"(let-values(((d_175)(hash-ref(namespace-phase-level-to-definitions ns_173) phase-level_174 #f)))"
"(let-values(((or-part_176) d_175))"
"(if or-part_176"
" or-part_176"
"(let-values()"
"(let-values(((p-ns_177)"
"(namespace->namespace-at-phase ns_173(phase+(namespace-0-phase ns_173) phase-level_174))))"
"(let-values(((d_178)"
"(definitions2.1(1/make-instance(namespace->name p-ns_177) p-ns_177)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_173) phase-level_174 d_178) d_178)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!18_179)"
"(lambda(ns14_180 phase-level15_181 name16_182 val17_183 as-constant?12_184 as-constant?13_185)"
"(let-values(((ns_186) ns14_180))"
"(let-values(((phase-level_187) phase-level15_181))"
"(let-values(((name_188) name16_182))"
"(let-values(((val_189) val17_183))"
"(let-values(((as-constant?_190)(if as-constant?13_185 as-constant?12_184 #f)))"
"(let-values()"
"(let-values(((d_191)(namespace->definitions ns_186 phase-level_187)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_191)"
" name_188"
" val_189"
" as-constant?_190)))))))))))"
"(case-lambda"
"((ns_192 phase-level_193 name_194 val_195)"
"(namespace-set-variable!18_179 ns_192 phase-level_193 name_194 val_195 #f #f))"
"((ns_196 phase-level_197 name_198 val_199 as-constant?12_200)"
"(namespace-set-variable!18_179 ns_196 phase-level_197 name_198 val_199 as-constant?12_200 #t)))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_201 phase-level_202 name_203)"
"(let-values(((d_204)(namespace->definitions ns_201 phase-level_202)))"
"(1/instance-unset-variable!(definitions-variables d_204) name_203))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_205 phase-level_206 name_207 val_208)"
"(let-values(((d_209)(namespace->definitions ns_205(add1 phase-level_206))))"
"(hash-set!(definitions-transformers d_209) name_207 val_208))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_210 phase-level_211 name_212)"
"(let-values(((d_213)(namespace->definitions ns_210(add1 phase-level_211))))"
"(hash-remove!(definitions-transformers d_213) name_212))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_214 phase-level_215 name_216 fail-k_217)"
"(let-values(((d_218)(namespace->definitions ns_214 phase-level_215)))"
"(1/instance-variable-value(definitions-variables d_218) name_216 fail-k_217))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_219 phase-level_220 name_221 fail-k_222)"
"(let-values(((d_223)(namespace->definitions ns_219(add1 phase-level_220))))"
"(hash-ref(definitions-transformers d_223) name_221 fail-k_222))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_224 phase-shift_225)(definitions-variables(namespace->definitions ns_224 phase-shift_225))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_226 b-ns_227)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_226) 0 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_227) 0 'no-b))))"
"(void)"
"(void)"
"(define-values(original-property-sym)(gensym 'original))"
"(void)"
"(void)"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 #f))))"
"(void)"
"(void)"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values(((new-stx_6) new-stx3_2))"
"(let-values(((old-stx_7) old-stx4_3))"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) #f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()"
"(if id_8"
"(syntax-property$1"
" new-stx_6"
" 'origin"
"(cons id_8(hash-ref(syntax-props new-stx_6) 'origin null)))"
" new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values(((the-struct_14) new-stx_6))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values(((the-struct_16) new-stx_6))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props8_17) old-props_10))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values(((ht_20) old-props-with-origin_18))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash? ht_21)(immutable? ht_21) #f))"
" ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_20"
" i_24)))"
"(let-values(((new-props_27)"
"(let-values(((new-props_28)"
" new-props_23))"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(for-loop_22"
" new-props_27"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(unsafe-immutable-hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values(((ht_31) new-props_11))"
"(begin"
"(if((lambda(ht_32)"
"(if(hash? ht_32)(immutable? ht_32) #f))"
" ht_31)"
"(void)"
"(let-values()(default-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_35)))"
"(let-values(((old-props_38)"
"(let-values(((old-props_39)"
" old-props_34))"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(for-loop_33"
" old-props_38"
"(unsafe-immutable-hash-iterate-next"
" ht_31"
" i_35))))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(unsafe-immutable-hash-iterate-first ht_31))))))))"
"(let-values(((the-struct_42) new-stx_6))"
"(if(syntax?$1 the-struct_42)"
"(let-values(((props9_43) updated-props_19))"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 #f #f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_52 new-stx_53)"
"(let-values(((lst_54) old-stxes_52))"
"(begin"
"(if(list? lst_54)(void)(let-values()(in-list lst_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(new-stx_56 lst_57)"
"(if(pair? lst_57)"
"(let-values(((old-stx_58)(unsafe-car lst_57)))"
"(let-values(((new-stx_59)"
"(let-values(((new-stx_60) new-stx_56))"
"(let-values(((new-stx_61)"
"(let-values()"
"(syntax-track-origin$1 new-stx_60 old-stx_58))))"
"(values new-stx_61)))))"
"(for-loop_55 new-stx_59(unsafe-cdr lst_57))))"
" new-stx_56))))"
" for-loop_55)"
" new-stx_53"
" lst_54)))))"
"(void)"
"(void)"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list(cons prop:exn:srclocs(lambda(e_23)(1/exn:fail:syntax-exprs e_23))))"
" #f"
" #f"
" '(0)"
"(lambda(str_24 cm_25 exprs_26 info_27)"
"(begin"
"(if(if(list? exprs_26)(andmap2 syntax?$1 exprs_26) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_26)))"
"(values str_24 cm_25 exprs_26)))"
" 'exn:fail:syntax)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_28 make-_29 ?_30 -ref_31 -set!_32)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_28 make-_29 ?_30)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_43)"
"(lambda(given-name9_44"
" message10_45"
" expr1_46"
" sub-expr2_47"
" extra-sources3_48"
" message-suffix4_49"
" expr5_50"
" sub-expr6_51"
" extra-sources7_52"
" message-suffix8_53)"
"(let-values(((given-name_54) given-name9_44))"
"(let-values(((message_55) message10_45))"
"(let-values(((expr_56)(if expr5_50 expr1_46 #f)))"
"(let-values(((sub-expr_57)(if sub-expr6_51 sub-expr2_47 #f)))"
"(let-values(((extra-sources_58)(if extra-sources7_52 extra-sources3_48 null)))"
"                            (let-values (((message-suffix_59) (if message-suffix8_53 message-suffix4_49 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_54"
" message_55"
" expr_56"
" sub-expr_57"
" extra-sources_58"
" message-suffix_59)))))))))))"
"(case-lambda"
"((given-name_60 message_61)(raise-syntax-error11_43 given-name_60 message_61 #f #f #f #f #f #f #f #f))"
"((given-name_62 message_63 expr_64 sub-expr_65 extra-sources_66 message-suffix4_67)"
"(raise-syntax-error11_43"
" given-name_62"
" message_63"
" expr_64"
" sub-expr_65"
" extra-sources_66"
" message-suffix4_67"
" #t"
" #t"
" #t"
" #t))"
"((given-name_68 message_69 expr_70 sub-expr_71 extra-sources3_72)"
"(raise-syntax-error11_43 given-name_68 message_69 expr_70 sub-expr_71 extra-sources3_72 #f #t #t #t #f))"
"((given-name_73 message_74 expr_75 sub-expr2_76)"
"(raise-syntax-error11_43 given-name_73 message_74 expr_75 sub-expr2_76 #f #f #t #t #f #f))"
"((given-name_77 message_78 expr1_79)"
"(raise-syntax-error11_43 given-name_77 message_78 expr1_79 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_80)"
"(lambda(given-name21_81"
" message22_82"
" expr13_83"
" sub-expr14_84"
" extra-sources15_85"
" message-suffix16_86"
" expr17_87"
" sub-expr18_88"
" extra-sources19_89"
" message-suffix20_90)"
"(let-values(((given-name_91) given-name21_81))"
"(let-values(((message_92) message22_82))"
"(let-values(((expr_93)(if expr17_87 expr13_83 #f)))"
"(let-values(((sub-expr_94)(if sub-expr18_88 sub-expr14_84 #f)))"
"(let-values(((extra-sources_95)(if extra-sources19_89 extra-sources15_85 null)))"
"                            (let-values (((message-suffix_96) (if message-suffix20_90 message-suffix16_86 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_91"
" message_92"
" expr_93"
" sub-expr_94"
" extra-sources_95"
" message-suffix_96)))))))))))"
"(case-lambda"
"((given-name_97 message_98)(raise-unbound-syntax-error23_80 given-name_97 message_98 #f #f #f #f #f #f #f #f))"
"((given-name_99 message_100 expr_101 sub-expr_102 extra-sources_103 message-suffix16_104)"
"(raise-unbound-syntax-error23_80"
" given-name_99"
" message_100"
" expr_101"
" sub-expr_102"
" extra-sources_103"
" message-suffix16_104"
" #t"
" #t"
" #t"
" #t))"
"((given-name_105 message_106 expr_107 sub-expr_108 extra-sources15_109)"
"(raise-unbound-syntax-error23_80"
" given-name_105"
" message_106"
" expr_107"
" sub-expr_108"
" extra-sources15_109"
" #f"
" #t"
" #t"
" #t"
" #f))"
"((given-name_110 message_111 expr_112 sub-expr14_113)"
"(raise-unbound-syntax-error23_80 given-name_110 message_111 expr_112 sub-expr14_113 #f #f #t #t #f #f))"
"((given-name_114 message_115 expr13_116)"
"(raise-unbound-syntax-error23_80 given-name_114 message_115 expr13_116 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_117 given-name_118 message_119 expr_120 sub-expr_121 extra-sources_122 message-suffix_123)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_128)(not given-name_118)))"
"(if or-part_128 or-part_128(symbol? given-name_118)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_118)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_119)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_119)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_122)(andmap2 syntax?$1 extra-sources_122) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_122)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_123)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_123)))"
"(values))))"
"(let-values(((name_124)"
"(format"
"                           \"~a\""
"(let-values(((or-part_129) given-name_118))"
"(if or-part_129"
" or-part_129"
"(let-values(((or-part_130)(extract-form-name expr_120)))"
"(if or-part_130 or-part_130 '?)))))))"
"(let-values(((at-message_125)"
"(let-values(((or-part_131)"
"(if sub-expr_121"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_121)))"
" #f)"
" #f)))"
"                              (if or-part_131 or-part_131 \"\"))))"
"(let-values(((in-message_126)"
"(let-values(((or-part_132)"
"(if expr_120"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_120)))"
" #f)"
" #f)))"
"                                (if or-part_132 or-part_132 \"\"))))"
"(let-values(((src-loc-str_127)"
"(let-values(((or-part_133)(extract-source-location sub-expr_121)))"
"(if or-part_133"
" or-part_133"
"(let-values(((or-part_134)(extract-source-location expr_120)))"
"                                      (if or-part_134 or-part_134 \"\"))))))"
"(raise"
"(exn:fail:syntax_117"
"(string-append"
" src-loc-str_127"
" name_124"
"                       \": \""
" message_119"
" at-message_125"
" in-message_126"
" message-suffix_123)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_135) sub-expr_121))(if or-part_135 or-part_135 expr_120))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_136) sub-expr_121))(if or-part_136 or-part_136 expr_120)))"
" extra-sources_122)"
" extra-sources_122))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_137)"
"(if(syntax?$1 s_137)"
"(let-values()"
"(let-values(((e_138)(syntax-e$1 s_137)))"
"(if(symbol? e_138)"
"(let-values() e_138)"
"(if(if(pair? e_138)(identifier?(car e_138)) #f)"
"(let-values()(syntax-e$1(car e_138)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_139)"
"(if(syntax?$1 s_139)"
"(if(syntax-srcloc s_139)"
"        (let-values (((str_140) (srcloc->string (syntax-srcloc s_139)))) (if str_140 (string-append str_140 \": \") #f))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(void)"
"(void)"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 19"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18)"
" #f"
" 'module)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'source-name)"
"(make-struct-field-accessor -ref_24 1 'self)"
"(make-struct-field-accessor -ref_24 2 'requires)"
"(make-struct-field-accessor -ref_24 3 'provides)"
"(make-struct-field-accessor -ref_24 4 'access)"
"(make-struct-field-accessor -ref_24 5 'language-info)"
"(make-struct-field-accessor -ref_24 6 'min-phase-level)"
"(make-struct-field-accessor -ref_24 7 'max-phase-level)"
"(make-struct-field-accessor -ref_24 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_24 9 'prepare-instance)"
"(make-struct-field-accessor -ref_24 10 'instantiate-phase)"
"(make-struct-field-accessor -ref_24 11 'primitive?)"
"(make-struct-field-accessor -ref_24 12 'predefined?)"
"(make-struct-field-accessor -ref_24 13 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_24 14 'no-protected?)"
"(make-struct-field-accessor -ref_24 15 'inspector)"
"(make-struct-field-accessor -ref_24 16 'submodule-names)"
"(make-struct-field-accessor -ref_24 17 'supermodule-name)"
"(make-struct-field-accessor -ref_24 18 'get-all-variables)"
"(make-struct-field-mutator -set!_25 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet"
" module-linklet-info-module-uses"
" module-linklet-info-self)"
"(let-values(((struct:_131 make-_132 ?_133 -ref_134 -set!_135)"
"(let-values()"
"(let-values()"
"(make-struct-type 'module-linklet-info #f 3 0 #f null #f #f '(0 1 2) #f 'module-linklet-info)))))"
"(values"
" struct:_131"
" make-_132"
" ?_133"
"(make-struct-field-accessor -ref_134 0 'linklet)"
"(make-struct-field-accessor -ref_134 1 'module-uses)"
"(make-struct-field-accessor -ref_134 2 'self))))"
"(define-values"
"(lifted/1.1$22 lifted/2.1$22 lifted/3.1$21 lifted/4.1$21 lifted/5.1$21)"
"(make-struct-type"
" 'make-module"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons prop:named-keyword-procedure(cons 'make-module(case-lambda((self_161)(apply missing-kw self_161 null))))))"
"(current-inspector)"
"(case-lambda((self_162)(apply missing-kw self_162 null)))))"
"(define-values"
"(make-module37.1)"
"(lambda(cross-phase-persistent?15_163"
" cross-phase-persistent?32_164"
" get-all-variables19_165"
" get-all-variables36_166"
" instantiate-phase-callback9_167"
" language-info12_168"
" language-info29_169"
" max-phase-level8_170"
" max-phase-level25_171"
" min-phase-level7_172"
" min-phase-level24_173"
" no-protected?16_174"
" no-protected?33_175"
" phase-level-linklet-info-callback11_176"
" phase-level-linklet-info-callback28_177"
" predefined?14_178"
" predefined?31_179"
" prepare-instance-callback10_180"
" prepare-instance-callback27_181"
" primitive?13_182"
" primitive?30_183"
" provides6_184"
" requires5_185"
" requires22_186"
" self4_187"
" source-name3_188"
" source-name20_189"
" submodule-names17_190"
" submodule-names34_191"
" supermodule-name18_192"
" supermodule-name35_193)"
"(let-values(((source-name_194)(if source-name20_189 source-name3_188 #f)))"
"(let-values(((self_195) self4_187))"
"(let-values(((requires_196)(if requires22_186 requires5_185 null)))"
"(let-values(((provides_197) provides6_184))"
"(let-values(((min-phase-level_198)(if min-phase-level24_173 min-phase-level7_172 0)))"
"(let-values(((max-phase-level_199)(if max-phase-level25_171 max-phase-level8_170 0)))"
"(let-values(((instantiate-phase_200) instantiate-phase-callback9_167))"
"(let-values(((prepare-instance_201)"
"(if prepare-instance-callback27_181 prepare-instance-callback10_180 void)))"
"(let-values(((phase-level-linklet-info-callback_202)"
"(if phase-level-linklet-info-callback28_177"
" phase-level-linklet-info-callback11_176"
"(lambda(phase-level_203) #f))))"
"(let-values(((language-info_204)(if language-info29_169 language-info12_168 #f)))"
"(let-values(((primitive?_205)(if primitive?30_183 primitive?13_182 #f)))"
"(let-values(((predefined?_206)(if predefined?31_179 predefined?14_178 #f)))"
"(let-values(((cross-phase-persistent?_207)"
"(if cross-phase-persistent?32_164"
" cross-phase-persistent?15_163"
" primitive?_205)))"
"(let-values(((no-protected?_208)(if no-protected?33_175 no-protected?16_174 #f)))"
"(let-values(((submodule-names_209)"
"(if submodule-names34_191 submodule-names17_190 null)))"
"(let-values(((supermodule-name_210)"
"(if supermodule-name35_193 supermodule-name18_192 #f)))"
"(let-values(((get-all-variables_211)"
"(if get-all-variables36_166"
" get-all-variables19_165"
"(lambda() null))))"
"(let-values()"
"(module1.1"
" source-name_194"
" self_195"
" requires_196"
" provides_197"
" #f"
" language-info_204"
" min-phase-level_198"
" max-phase-level_199"
" phase-level-linklet-info-callback_202"
" prepare-instance_201"
" instantiate-phase_200"
" primitive?_205"
" predefined?_206"
" cross-phase-persistent?_207"
" no-protected?_208"
"(current-code-inspector)"
" submodule-names_209"
" supermodule-name_210"
" get-all-variables_211)))))))))))))))))))))"
"(define-values"
"(unpack38.1)"
"(lambda(given-kws_212 given-args_213)"
"(let-values(((cross-phase-persistent?32_214)"
"(if(pair? given-kws_212)(eq? '#:cross-phase-persistent?(car given-kws_212)) #f)))"
"(let-values(((cross-phase-persistent?15_215)(if cross-phase-persistent?32_214(car given-args_213)(void)))"
"((given-kws_216)(if cross-phase-persistent?32_214(cdr given-kws_212) given-kws_212))"
"((given-args_217)(if cross-phase-persistent?32_214(cdr given-args_213) given-args_213)))"
"(let-values(((get-all-variables36_218)"
"(if(pair? given-kws_216)(eq? '#:get-all-variables(car given-kws_216)) #f)))"
"(let-values(((get-all-variables19_219)(if get-all-variables36_218(car given-args_217)(void)))"
"((given-kws_220)(if get-all-variables36_218(cdr given-kws_216) given-kws_216))"
"((given-args_221)(if get-all-variables36_218(cdr given-args_217) given-args_217)))"
"(let-values(((instantiate-phase-callback9_222)(car given-args_221))"
"((given-kws_223)(cdr given-kws_220))"
"((given-args_224)(cdr given-args_221)))"
"(let-values(((language-info29_225)"
"(if(pair? given-kws_223)(eq? '#:language-info(car given-kws_223)) #f)))"
"(let-values(((language-info12_226)(if language-info29_225(car given-args_224)(void)))"
"((given-kws_227)(if language-info29_225(cdr given-kws_223) given-kws_223))"
"((given-args_228)(if language-info29_225(cdr given-args_224) given-args_224)))"
"(let-values(((max-phase-level25_229)"
"(if(pair? given-kws_227)(eq? '#:max-phase-level(car given-kws_227)) #f)))"
"(let-values(((max-phase-level8_230)(if max-phase-level25_229(car given-args_228)(void)))"
"((given-kws_231)(if max-phase-level25_229(cdr given-kws_227) given-kws_227))"
"((given-args_232)(if max-phase-level25_229(cdr given-args_228) given-args_228)))"
"(let-values(((min-phase-level24_233)"
"(if(pair? given-kws_231)(eq? '#:min-phase-level(car given-kws_231)) #f)))"
"(let-values(((min-phase-level7_234)(if min-phase-level24_233(car given-args_232)(void)))"
"((given-kws_235)(if min-phase-level24_233(cdr given-kws_231) given-kws_231))"
"((given-args_236)(if min-phase-level24_233(cdr given-args_232) given-args_232)))"
"(let-values(((no-protected?33_237)"
"(if(pair? given-kws_235)(eq? '#:no-protected?(car given-kws_235)) #f)))"
"(let-values(((no-protected?16_238)(if no-protected?33_237(car given-args_236)(void)))"
"((given-kws_239)(if no-protected?33_237(cdr given-kws_235) given-kws_235))"
"((given-args_240)"
"(if no-protected?33_237(cdr given-args_236) given-args_236)))"
"(let-values(((phase-level-linklet-info-callback28_241)"
"(if(pair? given-kws_239)"
"(eq? '#:phase-level-linklet-info-callback(car given-kws_239))"
" #f)))"
"(let-values(((phase-level-linklet-info-callback11_242)"
"(if phase-level-linklet-info-callback28_241(car given-args_240)(void)))"
"((given-kws_243)"
"(if phase-level-linklet-info-callback28_241"
"(cdr given-kws_239)"
" given-kws_239))"
"((given-args_244)"
"(if phase-level-linklet-info-callback28_241"
"(cdr given-args_240)"
" given-args_240)))"
"(let-values(((predefined?31_245)"
"(if(pair? given-kws_243)(eq? '#:predefined?(car given-kws_243)) #f)))"
"(let-values(((predefined?14_246)"
"(if predefined?31_245(car given-args_244)(void)))"
"((given-kws_247)"
"(if predefined?31_245(cdr given-kws_243) given-kws_243))"
"((given-args_248)"
"(if predefined?31_245(cdr given-args_244) given-args_244)))"
"(let-values(((prepare-instance-callback27_249)"
"(if(pair? given-kws_247)"
"(eq? '#:prepare-instance-callback(car given-kws_247))"
" #f)))"
"(let-values(((prepare-instance-callback10_250)"
"(if prepare-instance-callback27_249(car given-args_248)(void)))"
"((given-kws_251)"
"(if prepare-instance-callback27_249"
"(cdr given-kws_247)"
" given-kws_247))"
"((given-args_252)"
"(if prepare-instance-callback27_249"
"(cdr given-args_248)"
" given-args_248)))"
"(let-values(((primitive?30_253)"
"(if(pair? given-kws_251)"
"(eq? '#:primitive?(car given-kws_251))"
" #f)))"
"(let-values(((primitive?13_254)"
"(if primitive?30_253(car given-args_252)(void)))"
"((given-kws_255)"
"(if primitive?30_253(cdr given-kws_251) given-kws_251))"
"((given-args_256)"
"(if primitive?30_253(cdr given-args_252) given-args_252)))"
"(let-values(((provides6_257)(car given-args_256))"
"((given-kws_258)(cdr given-kws_255))"
"((given-args_259)(cdr given-args_256)))"
"(let-values(((requires22_260)"
"(if(pair? given-kws_258)"
"(eq? '#:requires(car given-kws_258))"
" #f)))"
"(let-values(((requires5_261)"
"(if requires22_260(car given-args_259)(void)))"
"((given-kws_262)"
"(if requires22_260(cdr given-kws_258) given-kws_258))"
"((given-args_263)"
"(if requires22_260"
"(cdr given-args_259)"
" given-args_259)))"
"(let-values(((self4_264)(car given-args_263))"
"((given-kws_265)(cdr given-kws_262))"
"((given-args_266)(cdr given-args_263)))"
"(let-values(((source-name20_267)"
"(if(pair? given-kws_265)"
"(eq? '#:source-name(car given-kws_265))"
" #f)))"
"(let-values(((source-name3_268)"
"(if source-name20_267"
"(car given-args_266)"
"(void)))"
"((given-kws_269)"
"(if source-name20_267"
"(cdr given-kws_265)"
" given-kws_265))"
"((given-args_270)"
"(if source-name20_267"
"(cdr given-args_266)"
" given-args_266)))"
"(let-values(((submodule-names34_271)"
"(if(pair? given-kws_269)"
"(eq? '#:submodule-names(car given-kws_269))"
" #f)))"
"(let-values(((submodule-names17_272)"
"(if submodule-names34_271"
"(car given-args_270)"
"(void)))"
"((given-kws_273)"
"(if submodule-names34_271"
"(cdr given-kws_269)"
" given-kws_269))"
"((given-args_274)"
"(if submodule-names34_271"
"(cdr given-args_270)"
" given-args_270)))"
"(let-values(((supermodule-name35_275)"
"(pair? given-kws_273)))"
"(let-values(((supermodule-name18_276)"
"(if supermodule-name35_275"
"(car given-args_274)"
"(void))))"
"(make-module37.1"
" cross-phase-persistent?15_215"
" cross-phase-persistent?32_214"
" get-all-variables19_219"
" get-all-variables36_218"
" instantiate-phase-callback9_222"
" language-info12_226"
" language-info29_225"
" max-phase-level8_230"
" max-phase-level25_229"
" min-phase-level7_234"
" min-phase-level24_233"
" no-protected?16_238"
" no-protected?33_237"
" phase-level-linklet-info-callback11_242"
" phase-level-linklet-info-callback28_241"
" predefined?14_246"
" predefined?31_245"
" prepare-instance-callback10_250"
" prepare-instance-callback27_249"
" primitive?13_254"
" primitive?30_253"
" provides6_257"
" requires5_261"
" requires22_260"
" self4_264"
" source-name3_268"
" source-name20_267"
" submodule-names17_272"
" submodule-names34_271"
" supermodule-name18_276"
" supermodule-name35_275))))))))))))))))))))))))))))))))))"
"(define-values"
"(make-module39.1)"
"(lifted/2.1$22"
"(lambda(given-kws_277 given-argc_278)"
"(if(= given-argc_278 2)"
"(subsets?"
" '(#:instantiate-phase-callback #:provides #:self)"
" given-kws_277"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:phase-level-linklet-info-callback"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name))"
" #f))"
"(case-lambda((given-kws_279 given-args_280)(unpack38.1 given-kws_279 given-args_280)))"
" '(#:instantiate-phase-callback #:provides #:self)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:phase-level-linklet-info-callback"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)))"
"(define-values"
"(struct:module-instance"
" module-instance40.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_281 make-_282 ?_283 -ref_284 -set!_285)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_281"
" make-_282"
" ?_283"
"(make-struct-field-accessor -ref_284 0 'namespace)"
"(make-struct-field-accessor -ref_284 1 'module)"
"(make-struct-field-accessor -ref_284 2 'shifted-requires)"
"(make-struct-field-accessor -ref_284 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_284 4 'made-available?)"
"(make-struct-field-accessor -ref_284 5 'attached?)"
"(make-struct-field-accessor -ref_284 6 'data-box)"
"(make-struct-field-mutator -set!_285 2 'shifted-requires)"
"(make-struct-field-mutator -set!_285 4 'made-available?)"
"(make-struct-field-mutator -set!_285 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_331 m_332)(module-instance40.1 m-ns_331 m_332 #f(make-hasheqv) #f #f(box #f))))"
"(define-values"
"(lifted/6.1$8 lifted/7.1$8 lifted/8.1$8 lifted/9.1$8 lifted/10.1$8)"
"(make-struct-type"
" 'make-module-namespace"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-module-namespace(case-lambda((self_333 ns_334)(apply missing-kw self_333 ns_334 null))))))"
"(current-inspector)"
"(case-lambda((self_335 ns_336)(apply missing-kw self_335 ns_336 null)))))"
"(define-values"
"(make-module-namespace48.1)"
"(lambda(for-submodule?43_337 mpi41_338 root-expand-context42_339 ns47_340)"
"(let-values(((ns_341) ns47_340))"
"(let-values(((name-mpi_342) mpi41_338))"
"(let-values(((root-expand-ctx_343) root-expand-context42_339))"
"(let-values(((for-submodule?_344) for-submodule?43_337))"
"(let-values()"
"(let-values(((phase_345) 0))"
"(let-values(((name_346)(1/module-path-index-resolve name-mpi_342)))"
"(let-values(((m-ns_347)"
"(let-values(((the-struct_349)"
"(let-values(((...namespace/module.rkt:145:27_350) new-namespace11.1)"
"((ns158_351) ns_341)"
"((root-expand-ctx159_352) root-expand-ctx_343)"
"((temp160_353) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference new-namespace11.1))"
"(new-namespace9.1"
" temp160_353"
" #t"
" root-expand-ctx159_352"
" #t"
" ns158_351"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:145:27_350"
" keyword-procedure-extract"
" '(#:register? #:root-expand-ctx)"
" 3)"
" '(#:register? #:root-expand-ctx)"
"(list temp160_353 root-expand-ctx159_352)"
" ns158_351)))))"
"(if(1/namespace? the-struct_349)"
"(let-values(((mpi150_354) name-mpi_342)"
"((source-name151_355)(resolved-module-path-root-name name_346))"
"((phase152_356) phase_345)"
"((0-phase153_357) phase_345)"
"((submodule-declarations154_358)"
"(if for-submodule?_344"
"(namespace-submodule-declarations ns_341)"
"(make-hash)))"
"((available-module-instances155_359)(make-hasheqv))"
"((module-instances156_360)(make-hasheqv))"
"((declaration-inspector157_361)(current-code-inspector)))"
"(namespace1.1"
" mpi150_354"
" source-name151_355"
"(namespace-root-expand-ctx the-struct_349)"
" phase152_356"
" 0-phase153_357"
"(namespace-phase-to-namespace the-struct_349)"
"(namespace-phase-level-to-definitions the-struct_349)"
"(1/namespace-module-registry the-struct_349)"
"(namespace-bulk-binding-registry the-struct_349)"
" submodule-declarations154_358"
"(namespace-root-namespace the-struct_349)"
" declaration-inspector157_361"
"(namespace-inspector the-struct_349)"
" available-module-instances155_359"
" module-instances156_360))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_349)))))"
"(let-values((()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_347) phase_345 m-ns_347)"
"(values))))"
"(let-values(((at-phase_348)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_347) phase_345 at-phase_348)"
"(hash-set! at-phase_348 name_346(make-module-instance m-ns_347 #f))"
" m-ns_347)))))))))))))"
"(define-values"
"(unpack49.1$2)"
"(lambda(given-kws_362 given-args_363 ns47_364)"
"(let-values(((for-submodule?43_365)(car given-args_363))"
"((given-kws_366)(cdr given-kws_362))"
"((given-args_367)(cdr given-args_363)))"
"(let-values(((mpi41_368)(car given-args_367))"
"((given-kws_369)(cdr given-kws_366))"
"((given-args_370)(cdr given-args_367)))"
"(let-values(((root-expand-context42_371)(car given-args_370)))"
"(make-module-namespace48.1 for-submodule?43_365 mpi41_368 root-expand-context42_371 ns47_364))))))"
"(define-values"
"(make-module-namespace50.1)"
"(lifted/7.1$8"
"(lambda(given-kws_372 given-argc_373)"
"(if(= given-argc_373 3)"
"(let-values(((l2_374) given-kws_372))"
"(if(pair? l2_374)"
"(if(eq?(car l2_374) '#:for-submodule?)"
"(let-values(((l2_375)(cdr l2_374)))"
"(if(pair? l2_375)"
"(if(eq?(car l2_375) '#:mpi)"
"(let-values(((l2_376)(cdr l2_375)))"
"(if(pair? l2_376)(if(eq?(car l2_376) '#:root-expand-context)(null?(cdr l2_376)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_377 given-args_378 ns_379)(unpack49.1$2 given-kws_377 given-args_378 ns_379)))"
" '(#:for-submodule? #:mpi #:root-expand-context)"
" '(#:for-submodule? #:mpi #:root-expand-context)))"
"(define-values"
"(declare-module!56.1)"
"(lambda(with-submodules?51_380 with-submodules?52_381 ns53_382 m54_383 mod-name55_384)"
"(let-values(((ns_385) ns53_382))"
"(let-values(((m_386) m54_383))"
"(let-values(((mod-name_387) mod-name55_384))"
"(let-values(((with-submodules?_388)(if with-submodules?52_381 with-submodules?51_380 #t)))"
"(let-values()"
"(let-values(((prior-m_389)"
"(if with-submodules?_388"
"(hash-ref"
"(module-registry-declarations(1/namespace-module-registry ns_385))"
" mod-name_387"
" #f)"
" #f)))"
"(let-values(((prior-mi_390)"
"(if prior-m_389"
"(if(not(eq? m_386 prior-m_389))"
"(let-values(((ns161_391) ns_385)"
"((mod-name162_392) mod-name_387)"
"((temp163_393)(namespace-phase ns_385)))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns161_391"
" mod-name162_392"
" temp163_393)"
"(namespace->module-instance70.1 ns161_391 mod-name162_392 temp163_393)))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_389(not(eq? m_386 prior-m_389)) #f)"
"(let-values()(check-redeclaration-ok prior-m_389 prior-mi_390 mod-name_387))"
"(void))"
"(hash-set!"
"(if with-submodules?_388"
"(module-registry-declarations(1/namespace-module-registry ns_385))"
"(namespace-submodule-declarations ns_385))"
" mod-name_387"
" m_386)"
"(if with-submodules?_388"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_385)"
" mod-name_387"
"(module-self m_386)"
"(module-provides m_386)))"
"(void))"
"((1/current-module-name-resolver) mod-name_387 #f)"
"(if prior-mi_390"
"(let-values()"
"(let-values(((m-ns_394)(module-instance-namespace prior-mi_390)))"
"(let-values(((states_395)(module-instance-phase-level-to-state prior-mi_390)))"
"(let-values(((phase_396)(namespace-phase ns_385)))"
"(let-values(((visit?_397)(eq? 'started(hash-ref states_395(add1 phase_396) #f))))"
"(let-values(((run?_398)(eq? 'started(hash-ref states_395 phase_396 #f))))"
"(let-values(((at-phase_399)"
"(hash-ref(namespace-module-instances ns_385) phase_396)))"
"(begin"
"(hash-set! at-phase_399 mod-name_387(make-module-instance m-ns_394 m_386))"
"(if visit?_397"
"(let-values()"
"(let-values(((ns164_400) ns_385)"
"((temp165_401)(namespace-mpi m-ns_394))"
"((phase166_402) phase_396))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!104.1))"
"(namespace-module-visit!102.1 #f #f ns164_400 temp165_401 phase166_402)"
"(namespace-module-visit!104.1 ns164_400 temp165_401 phase166_402))))"
"(void))"
"(if run?_398"
"(let-values()"
"(let-values(((ns167_403) ns_385)"
"((temp168_404)(namespace-mpi m-ns_394))"
"((phase169_405) phase_396))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns167_403"
" temp168_404"
" phase169_405)"
"(namespace-module-instantiate!96.1 ns167_403 temp168_404 phase169_405))))"
"(void))))))))))"
"(void))))))))))))"
"(define-values"
"(unpack57.1)"
"(lambda(given-kws_406 given-args_407 ns53_408 m54_409 mod-name55_410)"
"(let-values(((with-submodules?52_411)(pair? given-kws_406)))"
"(let-values(((with-submodules?51_412)(if with-submodules?52_411(car given-args_407)(void))))"
"(declare-module!56.1 with-submodules?51_412 with-submodules?52_411 ns53_408 m54_409 mod-name55_410)))))"
"(define-values"
"(declare-module!58.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_413 given-argc_414)"
"(if(= given-argc_414 5)"
"(let-values(((l1_415) given-kws_413))"
"(let-values(((l1_416)"
"(if(null? l1_415) l1_415(if(eq?(car l1_415) '#:with-submodules?)(cdr l1_415) l1_415))))"
"(null? l1_416)))"
" #f))"
"(case-lambda"
"((given-kws_417 given-args_418 ns_419 m_420 mod-name_421)"
"(unpack57.1 given-kws_417 given-args_418 ns_419 m_420 mod-name_421)))"
" null"
" '(#:with-submodules?)"
"(let-values(((declare-module!_422)"
"(case-lambda((ns_423 m_424 mod-name_425)(unpack57.1 null null ns_423 m_424 mod-name_425)))))"
" declare-module!_422)))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_426 prior-mi_427 mod-name_428)"
"(begin"
"(if(module-cross-phase-persistent? prior-m_426)"
"(let-values()"
"          (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_428))"
"(void))"
"(if(if prior-mi_427"
"(let-values(((or-part_429)(module-instance-attached? prior-mi_427)))"
"(if or-part_429"
" or-part_429"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_427))))))"
" #f)"
"(let-values()"
"          (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_428))"
"(void)))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_430 mod-name_431) (raise-arguments-error who_430 \"unknown module\" \"module name\" mod-name_431)))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_432 name_433 phase-level_434)"
"(let-values(((m_435)(namespace->module ns_432 name_433)))"
"(if m_435((module-phase-level-linklet-info-callback m_435) phase-level_434) #f))))"
"(define-values"
"(namespace->module-instance68.1)"
"(lambda(check-available-at-phase-level60_436"
" check-available-at-phase-level63_437"
" complain-on-failure?59_438"
" complain-on-failure?62_439"
" unavailable-callback61_440"
" unavailable-callback64_441"
" ns65_442"
" name66_443"
" 0-phase67_444)"
"(let-values(((ns_445) ns65_442))"
"(let-values(((name_446) name66_443))"
"(let-values(((0-phase_447) 0-phase67_444))"
"(let-values(((complain-on-failure?_448)(if complain-on-failure?62_439 complain-on-failure?59_438 #f)))"
"(let-values(((check-available-at-phase-level_449)"
"(if check-available-at-phase-level63_437 check-available-at-phase-level60_436 #f)))"
"(let-values(((unavailable-callback_450)(if unavailable-callback64_441 unavailable-callback61_440 void)))"
"(let-values()"
"(let-values(((mi_451)"
"(let-values(((or-part_452)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_445) 0-phase_447 '#hasheq())"
" name_446"
" #f)))"
"(if or-part_452"
" or-part_452"
"(let-values(((or-part_453)"
"(let-values(((c-ns_454)"
"(let-values(((or-part_455)"
"(namespace-root-namespace ns_445)))"
"(if or-part_455 or-part_455 ns_445))))"
"(hash-ref(namespace-module-instances c-ns_454) name_446 #f))))"
"(if or-part_453"
" or-part_453"
"(if complain-on-failure?_448"
"                                          (error \"no module instance found:\" name_446 0-phase_447)"
" #f)))))))"
"(begin"
"(if(if mi_451 check-available-at-phase-level_449 #f)"
"(let-values()"
"(check-availablilty mi_451 check-available-at-phase-level_449 unavailable-callback_450))"
"(void))"
" mi_451)))))))))))"
"(define-values"
"(unpack69.1)"
"(lambda(given-kws_456 given-args_457 ns65_458 name66_459 0-phase67_460)"
"(let-values(((check-available-at-phase-level63_461)"
"(if(pair? given-kws_456)(eq? '#:check-available-at-phase-level(car given-kws_456)) #f)))"
"(let-values(((check-available-at-phase-level60_462)"
"(if check-available-at-phase-level63_461(car given-args_457)(void)))"
"((given-kws_463)(if check-available-at-phase-level63_461(cdr given-kws_456) given-kws_456))"
"((given-args_464)(if check-available-at-phase-level63_461(cdr given-args_457) given-args_457)))"
"(let-values(((complain-on-failure?62_465)"
"(if(pair? given-kws_463)(eq? '#:complain-on-failure?(car given-kws_463)) #f)))"
"(let-values(((complain-on-failure?59_466)(if complain-on-failure?62_465(car given-args_464)(void)))"
"((given-kws_467)(if complain-on-failure?62_465(cdr given-kws_463) given-kws_463))"
"((given-args_468)(if complain-on-failure?62_465(cdr given-args_464) given-args_464)))"
"(let-values(((unavailable-callback64_469)(pair? given-kws_467)))"
"(let-values(((unavailable-callback61_470)(if unavailable-callback64_469(car given-args_468)(void))))"
"(namespace->module-instance68.1"
" check-available-at-phase-level60_462"
" check-available-at-phase-level63_461"
" complain-on-failure?59_466"
" complain-on-failure?62_465"
" unavailable-callback61_470"
" unavailable-callback64_469"
" ns65_458"
" name66_459"
" 0-phase67_460)))))))))"
"(define-values"
"(namespace->module-instance70.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_471 given-argc_472)"
"(if(= given-argc_472 5)"
"(let-values(((l1_473) given-kws_471))"
"(let-values(((l1_474)"
"(if(null? l1_473)"
" l1_473"
"(if(eq?(car l1_473) '#:check-available-at-phase-level)(cdr l1_473) l1_473))))"
"(let-values(((l1_475) l1_474))"
"(let-values(((l1_476)"
"(if(null? l1_475)"
" l1_475"
"(if(eq?(car l1_475) '#:complain-on-failure?)(cdr l1_475) l1_475))))"
"(let-values(((l1_477) l1_476))"
"(let-values(((l1_478)"
"(if(null? l1_477)"
" l1_477"
"(if(eq?(car l1_477) '#:unavailable-callback)(cdr l1_477) l1_477))))"
"(null? l1_478)))))))"
" #f))"
"(case-lambda"
"((given-kws_479 given-args_480 ns_481 name_482 0-phase_483)"
"(unpack69.1 given-kws_479 given-args_480 ns_481 name_482 0-phase_483)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(let-values(((namespace->module-instance_484)"
"(case-lambda((ns_485 name_486 0-phase_487)(unpack69.1 null null ns_485 name_486 0-phase_487)))))"
" namespace->module-instance_484)))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_488 name_489 0-phase_490 m_491 existing-m-ns_492)"
"(let-values(((m-ns_493)"
"(let-values(((the-struct_495) ns_488))"
"(if(1/namespace? the-struct_495)"
"(let-values(((mpi170_496)(namespace-mpi existing-m-ns_492))"
"((source-name171_497)(namespace-source-name existing-m-ns_492))"
"((root-expand-ctx172_498)(namespace-root-expand-ctx existing-m-ns_492))"
"((phase173_499)(namespace-phase existing-m-ns_492))"
"((0-phase174_500)(namespace-0-phase existing-m-ns_492))"
"((phase-to-namespace175_501)(make-hasheqv))"
"((phase-level-to-definitions176_502)"
"(if(module-cross-phase-persistent? m_491)"
"(namespace-phase-level-to-definitions existing-m-ns_492)"
"(make-hasheqv)))"
"((declaration-inspector177_503)(module-inspector m_491))"
"((inspector178_504)(namespace-inspector existing-m-ns_492)))"
"(namespace1.1"
" mpi170_496"
" source-name171_497"
" root-expand-ctx172_498"
" phase173_499"
" 0-phase174_500"
" phase-to-namespace175_501"
" phase-level-to-definitions176_502"
"(1/namespace-module-registry the-struct_495)"
"(namespace-bulk-binding-registry the-struct_495)"
"(namespace-submodule-declarations the-struct_495)"
"(namespace-root-namespace the-struct_495)"
" declaration-inspector177_503"
" inspector178_504"
"(namespace-available-module-instances the-struct_495)"
"(namespace-module-instances the-struct_495)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_495)))))"
"(let-values(((mi_494)(make-module-instance m-ns_493 m_491)))"
"(if(module-cross-phase-persistent? m_491)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_493) 0 m-ns_493)"
"(hash-set!(namespace-phase-level-to-definitions m-ns_493) 0(namespace->definitions existing-m-ns_492 0))"
"(hash-set!(namespace-phase-to-namespace m-ns_493) 1(namespace->namespace-at-phase m-ns_493 1))"
"(hash-set!(namespace-phase-level-to-definitions m-ns_493) 1(namespace->definitions existing-m-ns_492 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_505)(namespace-root-namespace ns_488)))(if or-part_505 or-part_505 ns_488)))"
" name_489"
" mi_494)"
"(hash-set!(module-instance-phase-level-to-state mi_494) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_493) 0-phase_490 m-ns_493)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_493)"
" 0"
"(namespace->definitions existing-m-ns_492 0))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_494) 0 'started)(values))))"
"(let-values(((at-phase_506)"
"(let-values(((or-part_507)"
"(hash-ref(namespace-module-instances ns_488) 0-phase_490 #f)))"
"(if or-part_507"
" or-part_507"
"(let-values(((at-phase_508)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_488) 0-phase_490 at-phase_508)"
" at-phase_508))))))"
"(hash-set! at-phase_506 name_489 mi_494)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_509 name_510 0-phase_511 m_512 mpi_513)"
"(let-values(((m-ns_514)"
"(let-values(((the-struct_516) ns_509))"
"(if(1/namespace? the-struct_516)"
"(let-values(((mpi179_517) mpi_513)"
"((source-name180_518)"
"(let-values(((or-part_526)(module-source-name m_512)))"
"(if or-part_526"
" or-part_526"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_513)))))"
"((root-expand-ctx181_519)(box #f))"
"((phase182_520) 0-phase_511)"
"((0-phase183_521) 0-phase_511)"
"((phase-to-namespace184_522)(make-hasheqv))"
"((phase-level-to-definitions185_523)(make-hasheqv))"
"((declaration-inspector186_524)(module-inspector m_512))"
"((inspector187_525)(make-inspector(module-inspector m_512))))"
"(namespace1.1"
" mpi179_517"
" source-name180_518"
" root-expand-ctx181_519"
" phase182_520"
" 0-phase183_521"
" phase-to-namespace184_522"
" phase-level-to-definitions185_523"
"(1/namespace-module-registry the-struct_516)"
"(namespace-bulk-binding-registry the-struct_516)"
"(namespace-submodule-declarations the-struct_516)"
"(namespace-root-namespace the-struct_516)"
" declaration-inspector186_524"
" inspector187_525"
"(namespace-available-module-instances the-struct_516)"
"(namespace-module-instances the-struct_516)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_516)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_514) 0-phase_511 m-ns_514)(values))))"
"(let-values(((mi_515)(make-module-instance m-ns_514 m_512)))"
"(begin"
"(if(module-cross-phase-persistent? m_512)"
"(hash-set!(namespace-module-instances ns_509) name_510 mi_515)"
"(let-values(((at-phase_527)"
"(let-values(((or-part_528)(hash-ref(namespace-module-instances ns_509) 0-phase_511 #f)))"
"(if or-part_528"
" or-part_528"
"(let-values(((at-phase_529)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_509) 0-phase_511 at-phase_529)"
" at-phase_529))))))"
"(hash-set! at-phase_527 name_510 mi_515)))"
" mi_515))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_530 check-available-at-phase-level_531 unavailable-callback_532)"
"(let-values(((m_533)(module-instance-module mi_530)))"
"(if(if m_533"
"(if(<="
"(module-min-phase-level m_533)"
"(add1 check-available-at-phase-level_531)"
"(module-max-phase-level m_533))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_530)(add1 check-available-at-phase-level_531) #f))"
" #f)"
" #f)"
"(let-values()(unavailable-callback_532))"
"(void)))))"
"(define-values"
"(namespace->module-namespace80.1)"
"(lambda(check-available-at-phase-level72_534"
" check-available-at-phase-level75_535"
" complain-on-failure?71_536"
" complain-on-failure?74_537"
" unavailable-callback73_538"
" unavailable-callback76_539"
" ns77_540"
" name78_541"
" 0-phase79_542)"
"(let-values(((ns_543) ns77_540))"
"(let-values(((name_544) name78_541))"
"(let-values(((0-phase_545) 0-phase79_542))"
"(let-values(((complain-on-failure?_546)(if complain-on-failure?74_537 complain-on-failure?71_536 #f)))"
"(let-values(((check-available-at-phase-level_547)"
"(if check-available-at-phase-level75_535 check-available-at-phase-level72_534 #f)))"
"(let-values(((unavailable-callback_548)(if unavailable-callback76_539 unavailable-callback73_538 void)))"
"(let-values()"
"(let-values(((mi_549)"
"(let-values(((...namespace/module.rkt:325:13_550) namespace->module-instance70.1)"
"((ns188_551) ns_543)"
"((name189_552) name_544)"
"((0-phase190_553) 0-phase_545)"
"((complain-on-failure?191_554) complain-on-failure?_546)"
"((check-available-at-phase-level192_555)"
" check-available-at-phase-level_547)"
"((unavailable-callback193_556) unavailable-callback_548))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1"
" check-available-at-phase-level192_555"
" #t"
" complain-on-failure?191_554"
" #t"
" unavailable-callback193_556"
" #t"
" ns188_551"
" name189_552"
" 0-phase190_553)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:325:13_550"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(list"
" check-available-at-phase-level192_555"
" complain-on-failure?191_554"
" unavailable-callback193_556)"
" ns188_551"
" name189_552"
" 0-phase190_553)))))"
"(if mi_549(module-instance-namespace mi_549) #f)))))))))))"
"(define-values"
"(unpack81.1)"
"(lambda(given-kws_557 given-args_558 ns77_559 name78_560 0-phase79_561)"
"(let-values(((check-available-at-phase-level75_562)"
"(if(pair? given-kws_557)(eq? '#:check-available-at-phase-level(car given-kws_557)) #f)))"
"(let-values(((check-available-at-phase-level72_563)"
"(if check-available-at-phase-level75_562(car given-args_558)(void)))"
"((given-kws_564)(if check-available-at-phase-level75_562(cdr given-kws_557) given-kws_557))"
"((given-args_565)(if check-available-at-phase-level75_562(cdr given-args_558) given-args_558)))"
"(let-values(((complain-on-failure?74_566)"
"(if(pair? given-kws_564)(eq? '#:complain-on-failure?(car given-kws_564)) #f)))"
"(let-values(((complain-on-failure?71_567)(if complain-on-failure?74_566(car given-args_565)(void)))"
"((given-kws_568)(if complain-on-failure?74_566(cdr given-kws_564) given-kws_564))"
"((given-args_569)(if complain-on-failure?74_566(cdr given-args_565) given-args_565)))"
"(let-values(((unavailable-callback76_570)(pair? given-kws_568)))"
"(let-values(((unavailable-callback73_571)(if unavailable-callback76_570(car given-args_569)(void))))"
"(namespace->module-namespace80.1"
" check-available-at-phase-level72_563"
" check-available-at-phase-level75_562"
" complain-on-failure?71_567"
" complain-on-failure?74_566"
" unavailable-callback73_571"
" unavailable-callback76_570"
" ns77_559"
" name78_560"
" 0-phase79_561)))))))))"
"(define-values"
"(namespace->module-namespace82.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_572 given-argc_573)"
"(if(= given-argc_573 5)"
"(let-values(((l1_574) given-kws_572))"
"(let-values(((l1_575)"
"(if(null? l1_574)"
" l1_574"
"(if(eq?(car l1_574) '#:check-available-at-phase-level)(cdr l1_574) l1_574))))"
"(let-values(((l1_576) l1_575))"
"(let-values(((l1_577)"
"(if(null? l1_576)"
" l1_576"
"(if(eq?(car l1_576) '#:complain-on-failure?)(cdr l1_576) l1_576))))"
"(let-values(((l1_578) l1_577))"
"(let-values(((l1_579)"
"(if(null? l1_578)"
" l1_578"
"(if(eq?(car l1_578) '#:unavailable-callback)(cdr l1_578) l1_578))))"
"(null? l1_579)))))))"
" #f))"
"(case-lambda"
"((given-kws_580 given-args_581 ns_582 name_583 0-phase_584)"
"(unpack81.1 given-kws_580 given-args_581 ns_582 name_583 0-phase_584)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(let-values(((namespace->module-namespace_585)"
"(case-lambda((ns_586 name_587 0-phase_588)(unpack81.1 null null ns_586 name_587 0-phase_588)))))"
" namespace->module-namespace_585)))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_589 mod-name_590 phase_591)"
"(let-values(((mi_592)"
"(let-values(((ns194_593) ns_589)((mod-name195_594) mod-name_590)((phase196_595) phase_591))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1 #f #f #f #f #f #f ns194_593 mod-name195_594 phase196_595)"
"(namespace->module-instance70.1 ns194_593 mod-name195_594 phase196_595)))))"
"(set-module-instance-attached?! mi_592 #t))))"
"(define-values"
"(namespace-module-instantiate!94.1)"
"(lambda(otherwise-available?85_596"
" otherwise-available?89_597"
" run-phase83_598"
" run-phase87_599"
" seen86_600"
" seen90_601"
" skip-run?84_602"
" skip-run?88_603"
" ns91_604"
" mpi92_605"
" instance-phase93_606)"
"(let-values(((ns_607) ns91_604))"
"(let-values(((mpi_608) mpi92_605))"
"(let-values(((instance-phase_609) instance-phase93_606))"
"(let-values(((run-phase_610)(if run-phase87_599 run-phase83_598(namespace-phase ns_607))))"
"(let-values(((skip-run?_611)(if skip-run?88_603 skip-run?84_602 #f)))"
"(let-values(((otherwise-available?_612)(if otherwise-available?89_597 otherwise-available?85_596 #t)))"
"(let-values(((seen_613)(if seen90_601 seen86_600 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_608)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_608)))"
"(values))))"
"(let-values(((name_614)(1/module-path-index-resolve mpi_608 #t)))"
"(let-values(((m_615)(namespace->module ns_607 name_614)))"
"(let-values((()"
"(begin"
"(if m_615"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_614)))"
"(values))))"
"(let-values(((instantiate!_616)"
"(lambda(instance-phase_617 run-phase_618 ns_619)"
"(let-values(((mi_620)"
"(let-values(((or-part_621)"
"(let-values(((ns203_622) ns_619)"
"((name204_623) name_614)"
"((instance-phase205_624)"
" instance-phase_617))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-instance70.1))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns203_622"
" name204_623"
" instance-phase205_624)"
"(namespace->module-instance70.1"
" ns203_622"
" name204_623"
" instance-phase205_624)))))"
"(if or-part_621"
" or-part_621"
"(namespace-create-module-instance!"
" ns_619"
" name_614"
" instance-phase_617"
" m_615"
" mpi_608)))))"
"(let-values(((...namespace/module.rkt:352:4_625)"
" run-module-instance!125.1)"
"((mi197_626) mi_620)"
"((ns198_627) ns_619)"
"((run-phase199_628) run-phase_618)"
"((skip-run?200_629) skip-run?_611)"
"((otherwise-available?201_630) otherwise-available?_612)"
"((seen202_631) seen_613))"
"(if(variable-reference-constant?"
"(#%variable-reference run-module-instance!125.1))"
"(run-module-instance!123.1"
" otherwise-available?201_630"
" run-phase199_628"
" seen202_631"
" #t"
" skip-run?200_629"
" mi197_626"
" ns198_627)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:352:4_625"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(list"
" otherwise-available?201_630"
" run-phase199_628"
" seen202_631"
" skip-run?200_629)"
" mi197_626"
" ns198_627)))))))"
"(if(module-cross-phase-persistent? m_615)"
"(let-values()"
"(instantiate!_616"
" 0"
" 0"
"(let-values(((or-part_632)(namespace-root-namespace ns_607)))"
"(if or-part_632 or-part_632 ns_607))))"
"(let-values()"
"(instantiate!_616 instance-phase_609 run-phase_610 ns_607))))))))))))))))))"
"(define-values"
"(unpack95.1)"
"(lambda(given-kws_633 given-args_634 ns91_635 mpi92_636 instance-phase93_637)"
"(let-values(((otherwise-available?89_638)"
"(if(pair? given-kws_633)(eq? '#:otherwise-available?(car given-kws_633)) #f)))"
"(let-values(((otherwise-available?85_639)(if otherwise-available?89_638(car given-args_634)(void)))"
"((given-kws_640)(if otherwise-available?89_638(cdr given-kws_633) given-kws_633))"
"((given-args_641)(if otherwise-available?89_638(cdr given-args_634) given-args_634)))"
"(let-values(((run-phase87_642)(if(pair? given-kws_640)(eq? '#:run-phase(car given-kws_640)) #f)))"
"(let-values(((run-phase83_643)(if run-phase87_642(car given-args_641)(void)))"
"((given-kws_644)(if run-phase87_642(cdr given-kws_640) given-kws_640))"
"((given-args_645)(if run-phase87_642(cdr given-args_641) given-args_641)))"
"(let-values(((seen90_646)(if(pair? given-kws_644)(eq? '#:seen(car given-kws_644)) #f)))"
"(let-values(((seen86_647)(if seen90_646(car given-args_645)(void)))"
"((given-kws_648)(if seen90_646(cdr given-kws_644) given-kws_644))"
"((given-args_649)(if seen90_646(cdr given-args_645) given-args_645)))"
"(let-values(((skip-run?88_650)(pair? given-kws_648)))"
"(let-values(((skip-run?84_651)(if skip-run?88_650(car given-args_649)(void))))"
"(namespace-module-instantiate!94.1"
" otherwise-available?85_639"
" otherwise-available?89_638"
" run-phase83_643"
" run-phase87_642"
" seen86_647"
" seen90_646"
" skip-run?84_651"
" skip-run?88_650"
" ns91_635"
" mpi92_636"
" instance-phase93_637)))))))))))"
"(define-values"
"(namespace-module-instantiate!96.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_652 given-argc_653)"
"(if(= given-argc_653 5)"
"(let-values(((l1_654) given-kws_652))"
"(let-values(((l1_655)"
"(if(null? l1_654) l1_654(if(eq?(car l1_654) '#:otherwise-available?)(cdr l1_654) l1_654))))"
"(let-values(((l1_656) l1_655))"
"(let-values(((l1_657)"
"(if(null? l1_656) l1_656(if(eq?(car l1_656) '#:run-phase)(cdr l1_656) l1_656))))"
"(let-values(((l1_658) l1_657))"
"(let-values(((l1_659)(if(null? l1_658) l1_658(if(eq?(car l1_658) '#:seen)(cdr l1_658) l1_658))))"
"(let-values(((l1_660) l1_659))"
"(let-values(((l1_661)"
"(if(null? l1_660) l1_660(if(eq?(car l1_660) '#:skip-run?)(cdr l1_660) l1_660))))"
"(null? l1_661)))))))))"
" #f))"
"(case-lambda"
"((given-kws_662 given-args_663 ns_664 mpi_665 instance-phase_666)"
"(unpack95.1 given-kws_662 given-args_663 ns_664 mpi_665 instance-phase_666)))"
" null"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(let-values(((namespace-module-instantiate!_667)"
"(case-lambda"
"((ns_668 mpi_669 instance-phase_670)(unpack95.1 null null ns_668 mpi_669 instance-phase_670)))))"
" namespace-module-instantiate!_667)))"
"(define-values"
"(namespace-module-visit!102.1)"
"(lambda(visit-phase97_671 visit-phase98_672 ns99_673 mpi100_674 instance-phase101_675)"
"(let-values(((ns_676) ns99_673))"
"(let-values(((mpi_677) mpi100_674))"
"(let-values(((instance-phase_678) instance-phase101_675))"
"(let-values(((visit-phase_679)(if visit-phase98_672 visit-phase97_671(namespace-phase ns_676))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:365:2_680) namespace-module-instantiate!96.1)"
"((ns206_681) ns_676)"
"((mpi207_682) mpi_677)"
"((instance-phase208_683) instance-phase_678)"
"((temp209_684)(add1 visit-phase_679)))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp209_684"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns206_681"
" mpi207_682"
" instance-phase208_683)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:365:2_680"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list temp209_684)"
" ns206_681"
" mpi207_682"
" instance-phase208_683))))))))))"
"(define-values"
"(unpack103.1)"
"(lambda(given-kws_685 given-args_686 ns99_687 mpi100_688 instance-phase101_689)"
"(let-values(((visit-phase98_690)(pair? given-kws_685)))"
"(let-values(((visit-phase97_691)(if visit-phase98_690(car given-args_686)(void))))"
"(namespace-module-visit!102.1 visit-phase97_691 visit-phase98_690 ns99_687 mpi100_688 instance-phase101_689)))))"
"(define-values"
"(namespace-module-visit!104.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_692 given-argc_693)"
"(if(= given-argc_693 5)"
"(let-values(((l1_694) given-kws_692))"
"(let-values(((l1_695)(if(null? l1_694) l1_694(if(eq?(car l1_694) '#:visit-phase)(cdr l1_694) l1_694))))"
"(null? l1_695)))"
" #f))"
"(case-lambda"
"((given-kws_696 given-args_697 ns_698 mpi_699 instance-phase_700)"
"(unpack103.1 given-kws_696 given-args_697 ns_698 mpi_699 instance-phase_700)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-visit!_701)"
"(case-lambda"
"((ns_702 mpi_703 instance-phase_704)(unpack103.1 null null ns_702 mpi_703 instance-phase_704)))))"
" namespace-module-visit!_701)))"
"(define-values"
"(namespace-module-make-available!110.1)"
"(lambda(visit-phase105_705 visit-phase106_706 ns107_707 mpi108_708 instance-phase109_709)"
"(let-values(((ns_710) ns107_707))"
"(let-values(((mpi_711) mpi108_708))"
"(let-values(((instance-phase_712) instance-phase109_709))"
"(let-values(((visit-phase_713)(if visit-phase106_706 visit-phase105_705(namespace-phase ns_710))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:368:2_714) namespace-module-instantiate!96.1)"
"((ns210_715) ns_710)"
"((mpi211_716) mpi_711)"
"((instance-phase212_717) instance-phase_712)"
"((temp213_718)(add1 visit-phase_713))"
"((temp214_719) #t))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp213_718"
" #t"
" #f"
" #f"
" temp214_719"
" #t"
" ns210_715"
" mpi211_716"
" instance-phase212_717)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:368:2_714"
" keyword-procedure-extract"
" '(#:run-phase #:skip-run?)"
" 5)"
" '(#:run-phase #:skip-run?)"
"(list temp213_718 temp214_719)"
" ns210_715"
" mpi211_716"
" instance-phase212_717))))))))))"
"(define-values"
"(unpack111.1)"
"(lambda(given-kws_720 given-args_721 ns107_722 mpi108_723 instance-phase109_724)"
"(let-values(((visit-phase106_725)(pair? given-kws_720)))"
"(let-values(((visit-phase105_726)(if visit-phase106_725(car given-args_721)(void))))"
"(namespace-module-make-available!110.1"
" visit-phase105_726"
" visit-phase106_725"
" ns107_722"
" mpi108_723"
" instance-phase109_724)))))"
"(define-values"
"(namespace-module-make-available!112.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_727 given-argc_728)"
"(if(= given-argc_728 5)"
"(let-values(((l1_729) given-kws_727))"
"(let-values(((l1_730)(if(null? l1_729) l1_729(if(eq?(car l1_729) '#:visit-phase)(cdr l1_729) l1_729))))"
"(null? l1_730)))"
" #f))"
"(case-lambda"
"((given-kws_731 given-args_732 ns_733 mpi_734 instance-phase_735)"
"(unpack111.1 given-kws_731 given-args_732 ns_733 mpi_734 instance-phase_735)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-make-available!_736)"
"(case-lambda"
"((ns_737 mpi_738 instance-phase_739)(unpack111.1 null null ns_737 mpi_738 instance-phase_739)))))"
" namespace-module-make-available!_736)))"
"(define-values"
"(lifted/11.1$5 lifted/12.1$5 lifted/13.1$5 lifted/14.1$5 lifted/15.1$5)"
"(make-struct-type"
" 'run-module-instance!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'run-module-instance!"
"(case-lambda((self_740 mi_741 ns_742)(apply missing-kw self_740 mi_741 ns_742 null))))))"
"(current-inspector)"
"(case-lambda((self_743 mi_744 ns_745)(apply missing-kw self_743 mi_744 ns_745 null)))))"
"(define-values"
"(run-module-instance!123.1)"
"(lambda(otherwise-available?115_746 run-phase113_747 seen116_748 seen120_749 skip-run?114_750 mi121_751 ns122_752)"
"(let-values(((mi_753) mi121_751))"
"(let-values(((ns_754) ns122_752))"
"(let-values(((run-phase_755) run-phase113_747))"
"(let-values(((skip-run?_756) skip-run?114_750))"
"(let-values(((otherwise-available?_757) otherwise-available?115_746))"
"(let-values(((seen_758)(if seen120_749 seen116_748 '#hasheq())))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_759)(module-instance-namespace mi_753)))"
"(let-values(((instance-phase_760)(namespace-0-phase m-ns_759)))"
"(let-values(((run-phase-level_761)(phase- run-phase_755 instance-phase_760)))"
"(if(if(let-values(((or-part_762) skip-run?_756))"
"(if or-part_762"
" or-part_762"
"(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state mi_753)"
" run-phase-level_761"
" #f))))"
"(let-values(((or-part_763)(not otherwise-available?_757)))"
"(if or-part_763 or-part_763(module-instance-made-available? mi_753)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_764)(module-instance-module mi_753)))"
"(let-values(((mpi_765)(namespace-mpi m-ns_759)))"
"(let-values(((phase-shift_766) instance-phase_760))"
"(let-values(((bulk-binding-registry_767)"
"(namespace-bulk-binding-registry m-ns_759)))"
"(begin"
"(if(hash-ref seen_758 mi_753 #f)"
"(let-values()"
"                                            (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_753)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_753"
"(alt-reverse"
"(let-values(((lst_768)(module-requires m_764)))"
"(begin"
"(if(list? lst_768)(void)(let-values()(in-list lst_768)))"
"((letrec-values(((for-loop_769)"
"(lambda(fold-var_770 lst_771)"
"(if(pair? lst_771)"
"(let-values(((phase+mpis_772)"
"(unsafe-car lst_771)))"
"(let-values(((fold-var_773)"
"(let-values(((fold-var_774)"
" fold-var_770))"
"(let-values(((fold-var_775)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_772)"
"(alt-reverse"
"(let-values(((lst_776)"
"(cdr"
" phase+mpis_772)))"
"(begin"
"(if(list?"
" lst_776)"
"(void)"
"(let-values()"
"(in-list"
" lst_776)))"
"((letrec-values(((for-loop_777)"
"(lambda(fold-var_778"
" lst_779)"
"(if(pair?"
" lst_779)"
"(let-values(((req-mpi_780)"
"(unsafe-car"
" lst_779)))"
"(let-values(((fold-var_781)"
"(let-values(((fold-var_782)"
" fold-var_778))"
"(let-values(((fold-var_783)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
"(module-path-index-shift"
" req-mpi_780"
"(module-self"
" m_764)"
" mpi_765)))"
" fold-var_782))))"
"(values"
" fold-var_783)))))"
"(for-loop_777"
" fold-var_781"
"(unsafe-cdr"
" lst_779))))"
" fold-var_778))))"
" for-loop_777)"
" null"
" lst_776))))))"
" fold-var_774))))"
"(values fold-var_775)))))"
"(for-loop_769"
" fold-var_773"
"(unsafe-cdr lst_771))))"
" fold-var_770))))"
" for-loop_769)"
" null"
" lst_768)))))))"
"(let-values(((lst_784)(module-instance-shifted-requires mi_753)))"
"(begin"
"(if(list? lst_784)(void)(let-values()(in-list lst_784)))"
"((letrec-values(((for-loop_785)"
"(lambda(fold-var_786 lst_787)"
"(if(pair? lst_787)"
"(let-values(((phase+mpis_788)(unsafe-car lst_787)))"
"(let-values(((fold-var_789)"
"(let-values(((fold-var_790)"
" fold-var_786))"
"(let-values(((fold-var_791)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_792)"
"(car"
" phase+mpis_788)))"
"(let-values(((lst_793)"
"(cdr"
" phase+mpis_788)))"
"(begin"
"(if(list?"
" lst_793)"
"(void)"
"(let-values()"
"(in-list"
" lst_793)))"
"((letrec-values(((for-loop_794)"
"(lambda(fold-var_795"
" lst_796)"
"(if(pair?"
" lst_796)"
"(let-values(((req-mpi_797)"
"(unsafe-car"
" lst_796)))"
"(let-values(((fold-var_798)"
"(let-values(((fold-var_799)"
" fold-var_795))"
"(let-values(((fold-var_800)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:420:9_801)"
" namespace-module-instantiate!96.1)"
"((ns215_802)"
" ns_754)"
"((req-mpi216_803)"
" req-mpi_797)"
"((temp217_804)"
"(phase+"
" instance-phase_760"
" req-phase_792))"
"((run-phase218_805)"
" run-phase_755)"
"((skip-run?219_806)"
" skip-run?_756)"
"((otherwise-available?220_807)"
" otherwise-available?_757)"
"((temp221_808)"
"(hash-set"
" seen_758"
" mi_753"
" #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" otherwise-available?220_807"
" #t"
" run-phase218_805"
" #t"
" temp221_808"
" #t"
" skip-run?219_806"
" #t"
" ns215_802"
" req-mpi216_803"
" temp217_804)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:420:9_801"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
" 5)"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
"(list"
" otherwise-available?220_807"
" run-phase218_805"
" temp221_808"
" skip-run?219_806)"
" ns215_802"
" req-mpi216_803"
" temp217_804))))"
"(void)))))"
"(values"
" fold-var_800)))))"
"(for-loop_794"
" fold-var_798"
"(unsafe-cdr"
" lst_796))))"
" fold-var_795))))"
" for-loop_794)"
"(void)"
" lst_793)))))"
"(void)))))"
"(values fold-var_791)))))"
"(for-loop_785 fold-var_789(unsafe-cdr lst_787))))"
" fold-var_786))))"
" for-loop_785)"
"(void)"
" lst_784)))"
"(if(label-phase? instance-phase_760)"
"(void)"
"(let-values()"
"(let-values(((start_809)(module-max-phase-level m_764))"
"((end_810)(sub1(module-min-phase-level m_764)))"
"((inc_811) -1))"
"(begin"
"(if(if(real? start_809)(if(real? end_810)(real? inc_811) #f) #f)"
"(void)"
"(let-values()(in-range start_809 end_810 inc_811)))"
"((letrec-values(((for-loop_812)"
"(lambda(fold-var_813 pos_814)"
"(if(> pos_814 end_810)"
"(let-values(((phase-level_815) pos_814))"
"(let-values(((fold-var_816)"
"(let-values(((fold-var_817)"
" fold-var_813))"
"(let-values(((fold-var_818)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_819)"
"(phase+"
" phase-level_815"
" phase-shift_766)))"
"(if(if(not"
" skip-run?_756)"
"(eqv?"
" phase_819"
" run-phase_755)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_753)"
" phase-level_815"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_753)"
" phase-level_815"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_759"
" phase-level_815))"
"(values))))"
"(let-values(((p-ns_820)"
"(namespace->namespace-at-phase"
" m-ns_759"
" phase_819)))"
"(let-values(((insp_821)"
"(module-inspector"
" m_764)))"
"(let-values(((data-box_822)"
"(module-instance-data-box"
" mi_753)))"
"(let-values(((prep_823)"
"(module-prepare-instance"
" m_764)))"
"(let-values(((go_824)"
"(module-instantiate-phase"
" m_764)))"
"(begin"
"(prep_823"
" data-box_822"
" p-ns_820"
" phase-shift_766"
" mpi_765"
" bulk-binding-registry_767"
" insp_821)"
"(go_824"
" data-box_822"
" p-ns_820"
" phase-shift_766"
" phase-level_815"
" mpi_765"
" bulk-binding-registry_767"
" insp_821))))))))))))"
"(if(if otherwise-available?_757"
"(if(not"
"(negative?"
" run-phase_755))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_753)"
" phase-level_815"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_754)"
" phase_819"
"(lambda(l_825)"
"(cons"
" mi_753"
" l_825))"
" null)"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_753)"
" phase-level_815"
" 'available)))"
"(void)))))"
"(void)))))"
"(values fold-var_818)))))"
"(for-loop_812"
" fold-var_816"
"(+ pos_814 inc_811))))"
" fold-var_813))))"
" for-loop_812)"
"(void)"
" start_809)))))"
"(if otherwise-available?_757"
"(let-values()(set-module-instance-made-available?! mi_753 #t))"
"(void))"
"(if skip-run?_756"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_753)"
" run-phase-level_761"
" 'started)))))))))))))))))))))))"
"(define-values"
"(unpack124.1)"
"(lambda(given-kws_826 given-args_827 mi121_828 ns122_829)"
"(let-values(((otherwise-available?115_830)(car given-args_827))"
"((given-kws_831)(cdr given-kws_826))"
"((given-args_832)(cdr given-args_827)))"
"(let-values(((run-phase113_833)(car given-args_832))"
"((given-kws_834)(cdr given-kws_831))"
"((given-args_835)(cdr given-args_832)))"
"(let-values(((seen120_836)(if(pair? given-kws_834)(eq? '#:seen(car given-kws_834)) #f)))"
"(let-values(((seen116_837)(if seen120_836(car given-args_835)(void)))"
"((given-kws_838)(if seen120_836(cdr given-kws_834) given-kws_834))"
"((given-args_839)(if seen120_836(cdr given-args_835) given-args_835)))"
"(let-values(((skip-run?114_840)(car given-args_839)))"
"(run-module-instance!123.1"
" otherwise-available?115_830"
" run-phase113_833"
" seen116_837"
" seen120_836"
" skip-run?114_840"
" mi121_828"
" ns122_829))))))))"
"(define-values"
"(run-module-instance!125.1)"
"(lifted/12.1$5"
"(lambda(given-kws_841 given-argc_842)"
"(if(= given-argc_842 4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_841"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" #f))"
"(case-lambda((given-kws_843 given-args_844 mi_845 ns_846)(unpack124.1 given-kws_843 given-args_844 mi_845 ns_846)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!129_847)"
"(lambda(ns128_848 run-phase126_849 run-phase127_850)"
"(let-values(((ns_851) ns128_848))"
"(let-values(((run-phase_852)(if run-phase127_850 run-phase126_849(namespace-phase ns_851))))"
"(let-values()(namespace-run-available-modules! ns_851(add1 run-phase_852))))))))"
"(case-lambda"
"((ns_853)(namespace-visit-available-modules!129_847 ns_853 #f #f))"
"((ns_854 run-phase126_855)(namespace-visit-available-modules!129_847 ns_854 run-phase126_855 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!134_856)"
"(lambda(ns133_857 run-phase131_858 run-phase132_859)"
"(let-values(((ns_860) ns133_857))"
"(let-values(((run-phase_861)(if run-phase132_859 run-phase131_858(namespace-phase ns_860))))"
"(let-values()"
"(if(null?(hash-ref(namespace-available-module-instances ns_860) run-phase_861 null))"
"(void)"
"(let-values()"
"(registry-call-with-lock"
"(1/namespace-module-registry ns_860)"
"(lambda()"
"((letrec-values(((loop_862)"
"(lambda()"
"(let-values(((mis_863)"
"(hash-ref"
"(namespace-available-module-instances ns_860)"
" run-phase_861"
" null)))"
"(if(null? mis_863)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_860)"
" run-phase_861"
" null)"
"(let-values(((lst_864)(alt-reverse mis_863)))"
"(begin"
"(if(list? lst_864)"
"(void)"
"(let-values()(in-list lst_864)))"
"((letrec-values(((for-loop_865)"
"(lambda(fold-var_866 lst_867)"
"(if(pair? lst_867)"
"(let-values(((mi_868)"
"(unsafe-car"
" lst_867)))"
"(let-values(((fold-var_869)"
"(let-values(((fold-var_870)"
" fold-var_866))"
"(let-values(((fold-var_871)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:476:13_872)"
" run-module-instance!125.1)"
"((mi222_873)"
" mi_868)"
"((ns223_874)"
" ns_860)"
"((run-phase224_875)"
" run-phase_861)"
"((temp225_876)"
" #f)"
"((temp226_877)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" run-module-instance!125.1))"
"(run-module-instance!123.1"
" temp226_877"
" run-phase224_875"
" #f"
" #f"
" temp225_876"
" mi222_873"
" ns223_874)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:476:13_872"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
" 4)"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
"(list"
" temp226_877"
" run-phase224_875"
" temp225_876)"
" mi222_873"
" ns223_874))))"
"(void)))))"
"(values"
" fold-var_871)))))"
"(for-loop_865"
" fold-var_869"
"(unsafe-cdr lst_867))))"
" fold-var_866))))"
" for-loop_865)"
"(void)"
" lst_864)))"
"(loop_862))))))))"
" loop_862))))))))))))"
"(case-lambda"
"((ns_878)(namespace-run-available-modules!134_856 ns_878 #f #f))"
"((ns_879 run-phase131_880)(namespace-run-available-modules!134_856 ns_879 run-phase131_880 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_881 name_882)"
"(let-values(((mi_883)(hash-ref(namespace-module-instances ns_881)(1/make-resolved-module-path name_882))))"
"(let-values(((...namespace/module.rkt:482:2_884) run-module-instance!125.1)"
"((mi227_885) mi_883)"
"((ns228_886) ns_881)"
"((temp229_887) 1)"
"((temp230_888) #f)"
"((temp231_889) #t))"
"(if(variable-reference-constant?(#%variable-reference run-module-instance!125.1))"
"(run-module-instance!123.1 temp231_889 temp229_887 #f #f temp230_888 mi227_885 ns228_886)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:482:2_884"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
"(list temp231_889 temp229_887 temp230_888)"
" mi227_885"
" ns228_886))))))"
"(define-values"
"(lifted/16.1$4 lifted/17.1$4 lifted/18.1$4 lifted/19.1$4 lifted/20.1$4)"
"(make-struct-type"
" 'namespace-module-use->module+linklet-instances"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'namespace-module-use->module+linklet-instances"
"(case-lambda((self_890 ns_891 mu_892)(apply missing-kw self_890 ns_891 mu_892 null))))))"
"(current-inspector)"
"(case-lambda((self_893 ns_894 mu_895)(apply missing-kw self_893 ns_894 mu_895 null)))))"
"(define-values"
"(namespace-module-use->module+linklet-instances144.1)"
"(lambda(phase-shift138_896 shift-from136_897 shift-from139_898 shift-to137_899 shift-to140_900 ns142_901 mu143_902)"
"(let-values(((ns_903) ns142_901))"
"(let-values(((mu_904) mu143_902))"
"(let-values(((shift-from_905)(if shift-from139_898 shift-from136_897 #f)))"
"(let-values(((shift-to_906)(if shift-to140_900 shift-to137_899 #f)))"
"(let-values(((phase-shift_907) phase-shift138_896))"
"(let-values()"
"(let-values(((mod_908)(module-use-module mu_904)))"
"(let-values(((mi_909)"
"(let-values(((...namespace/module.rkt:492:4_912) namespace->module-instance70.1)"
"((ns232_913) ns_903)"
"((temp233_914)"
"(1/module-path-index-resolve"
"(if shift-from_905"
"(module-path-index-shift mod_908 shift-from_905 shift-to_906)"
" mod_908)))"
"((phase-shift234_915) phase-shift_907)"
"((temp235_916) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1"
" #f"
" #f"
" temp235_916"
" #t"
" #f"
" #f"
" ns232_913"
" temp233_914"
" phase-shift234_915)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:492:4_912"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp235_916)"
" ns232_913"
" temp233_914"
" phase-shift234_915)))))"
"(let-values(((m-ns_910)(module-instance-namespace mi_909)))"
"(let-values(((d_911)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_910)"
"(module-use-phase mu_904)"
" #f)))"
"(if d_911"
"(values mi_909(definitions-variables d_911))"
"                          (error \"namespace mismatch: phase level not found\" mu_904))))))))))))))"
"(define-values"
"(unpack145.1)"
"(lambda(given-kws_917 given-args_918 ns142_919 mu143_920)"
"(let-values(((phase-shift138_921)(car given-args_918))"
"((given-kws_922)(cdr given-kws_917))"
"((given-args_923)(cdr given-args_918)))"
"(let-values(((shift-from139_924)(if(pair? given-kws_922)(eq? '#:shift-from(car given-kws_922)) #f)))"
"(let-values(((shift-from136_925)(if shift-from139_924(car given-args_923)(void)))"
"((given-kws_926)(if shift-from139_924(cdr given-kws_922) given-kws_922))"
"((given-args_927)(if shift-from139_924(cdr given-args_923) given-args_923)))"
"(let-values(((shift-to140_928)(pair? given-kws_926)))"
"(let-values(((shift-to137_929)(if shift-to140_928(car given-args_927)(void))))"
"(namespace-module-use->module+linklet-instances144.1"
" phase-shift138_921"
" shift-from136_925"
" shift-from139_924"
" shift-to137_929"
" shift-to140_928"
" ns142_919"
" mu143_920))))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances146.1)"
"(lifted/17.1$4"
"(lambda(given-kws_930 given-argc_931)"
"(if(= given-argc_931 4)(subsets? '(#:phase-shift) given-kws_930 '(#:phase-shift #:shift-from #:shift-to)) #f))"
"(case-lambda((given-kws_932 given-args_933 ns_934 mu_935)(unpack145.1 given-kws_932 given-args_933 ns_934 mu_935)))"
" '(#:phase-shift)"
" '(#:phase-shift #:shift-from #:shift-to)))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_936)"
"(let-values(((access_937)"
"(let-values(((ht_938)(module-provides m_936)))"
"(begin"
"(if((lambda(ht_939)(hash? ht_939)) ht_938)(void)(let-values()(default-in-hash ht_938)))"
"((letrec-values(((for-loop_940)"
"(lambda(table_941 i_942)"
"(if i_942"
"(let-values(((phase_943 at-phase_944)"
"(hash-iterate-key+value ht_938 i_942)))"
"(let-values(((table_945)"
"(let-values(((table_946) table_941))"
"(let-values(((table_947)"
"(let-values()"
"(let-values(((key_948 val_949)"
"(let-values()"
"(values"
" phase_943"
"(let-values(((ht_950)"
" at-phase_944))"
"(begin"
"(if((lambda(ht_951)"
"(hash?"
" ht_951))"
" ht_950)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_950)))"
"((letrec-values(((for-loop_952)"
"(lambda(table_953"
" i_954)"
"(if i_954"
"(let-values(((sym_955"
" binding/p_956)"
"(hash-iterate-key+value"
" ht_950"
" i_954)))"
"(let-values(((table_957)"
"(let-values(((table_958)"
" table_953))"
"(let-values(((table_959)"
"(let-values()"
"(let-values(((key_960"
" val_961)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_956))"
"(if(provided-as-protected?"
" binding/p_956)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_958"
" key_960"
" val_961)))))"
"(values"
" table_959)))))"
"(for-loop_952"
" table_957"
"(hash-iterate-next"
" ht_950"
" i_954))))"
" table_953))))"
" for-loop_952)"
" '#hash()"
"(hash-iterate-first"
" ht_950))))))))"
"(hash-set table_946 key_948 val_949)))))"
"(values table_947)))))"
"(for-loop_940 table_945(hash-iterate-next ht_938 i_942))))"
" table_941))))"
" for-loop_940)"
" '#hasheqv()"
"(hash-iterate-first ht_938))))))"
"(begin(set-module-access! m_936 access_937) access_937))))"
"(void)"
"(void)"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((...inding-to-module.rkt:14:4_7) namespace->module-instance70.1)"
"((ns1_8) ns_2)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                                       \"module mismatch;\\n\""
"                                       \" attempted to use a module that is not available\\n\""
"                                       \"  possible cause:\\n\""
"                                       \"   using (dynamic-require .... #f)\\n\""
"                                       \"   but need (dynamic-require .... 0)\\n\""
"                                       \"  module: ~s\\n\""
"                                       \"  phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance70.1))"
"(namespace->module-instance68.1 temp4_11 #t #f #f temp5_12 #t ns1_8 temp2_9 at-phase3_10)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...inding-to-module.rkt:14:4_7"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:unavailable-callback)"
"(list temp4_11 temp5_12)"
" ns1_8"
" temp2_9"
" at-phase3_10)))))"
"(begin"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(void)"
"(void)"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_4))"
"(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((...r/expand/protect.rkt:53:14_23) resolve+shift22.1)"
"((id1_24) id_20)"
"((phase2_25) phase_17)"
"((temp3_26) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f temp3_26 #t #f #f id1_24 phase2_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:53:14_23"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_26)"
" id1_24"
" phase2_25)))))"
"(let-values(((c19986_27)(binding-free=id b_22)))"
"(if c19986_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
"                                                       (check-access b_22 mi_30 id_20 in-s_21 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_28"
"(let-values(((or-part_31) in-s_21))"
"(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((...r/expand/protect.rkt:66:13_32) module-binding-update50.1)"
"((next-b4_33) next-b_29)"
"((temp5_34)(syntax-inspector id_20)))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update50.1))"
"(module-binding-update48.1"
" temp5_34"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b4_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:66:13_32"
" keyword-procedure-extract"
" '(#:extra-inspector)"
" 3)"
" '(#:extra-inspector)"
"(list temp5_34)"
" next-b4_33))))"
"(let-values() next-b_29)))))"
" c19986_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_8) (error \"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_35)"
"(begin"
"(if(if(procedure? proc_35)(procedure-arity-includes? proc_35 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_35)))"
"(set!-transformer1_11 proc_35))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_36)"
"(let-values(((v_37)((set!-transformer-value t_36) t_36)))"
"(if(procedure-arity-includes? v_37 1) v_37(lambda(s_38)(v_37 t_36 s_38))))))"
"(void)"
"(void)"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_6 key_7 val_8)(hash-set env_6 key_7 val_8)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_9)(let-values(((or-part_10)(eq? t_9 variable)))(if or-part_10 or-part_10(local-variable? t_9)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_11 make-_12 ?_13 -ref_14 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable)))))"
"(values struct:_11 make-_12 ?_13(make-struct-field-accessor -ref_14 0 'id))))"
"(define-values"
"(lifted/1.1$21 lifted/2.1$21 lifted/3.1$20 lifted/4.1$20 lifted/5.1$20)"
"(make-struct-type"
" 'substitute-variable"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'substitute-variable(case-lambda((self_31 id_32 t_33)(apply missing-kw self_31 id_32 t_33 null))))))"
"(current-inspector)"
"(case-lambda((self_34 id_35 t_36)(apply missing-kw self_34 id_35 t_36 null)))))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_37 id4_38 t5_39)"
"(let-values(((id_40) id4_38))"
"(let-values(((t_41) t5_39))"
"(let-values(((no-stops?_42) no-stops?2_37))"
"(let-values()"
"(if(if no-stops?_42(local-variable? t_41) #f)"
"(let-values(((bind-id_43)(local-variable-id t_41)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_43)(syntax-e$1 bind-id_43) id_40 id_40)"
" id_40))"
" id_40)))))))"
"(define-values"
"(unpack7.1$5)"
"(lambda(given-kws_44 given-args_45 id4_46 t5_47)"
"(let-values(((no-stops?2_48)(car given-args_45)))(substitute-variable6.1 no-stops?2_48 id4_46 t5_47))))"
"(define-values"
"(substitute-variable8.1)"
"(lifted/2.1$21"
"(lambda(given-kws_49 given-argc_50)"
"(if(= given-argc_50 4)"
"(let-values(((l2_51) given-kws_49))"
"(if(pair? l2_51)(if(eq?(car l2_51) '#:no-stops?)(null?(cdr l2_51)) #f) #f))"
" #f))"
"(case-lambda((given-kws_52 given-args_53 id_54 t_55)(unpack7.1$5 given-kws_52 given-args_53 id_54 t_55)))"
" '(#:no-stops?)"
" '(#:no-stops?)))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_57)"
"(let-values(((or-part_58)(procedure? t_57)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)(1/set!-transformer? t_57)))"
"(if or-part_59 or-part_59(1/rename-transformer? t_57)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_60)"
"(if(1/set!-transformer? t_60)"
"(let-values()(1/set!-transformer-procedure t_60))"
"(if(1/rename-transformer? t_60)(let-values()(lambda(s_61) s_61))(let-values() t_60)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(let-values()"
"(let-values()(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form)))))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 0 'expander)"
"(make-struct-field-accessor -ref_65 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_87 in12_88 just-for-nominal?11_89 just-for-nominal?13_90 id14_91 binding15_92 phase16_93)"
"(let-values(((id_94) id14_91))"
"(let-values(((binding_95) binding15_92))"
"(let-values(((phase_96) phase16_93))"
"(let-values(((in-s_97)(if in12_88 in10_87 #f)))"
"(let-values(((just-for-nominal?_98)(if just-for-nominal?13_90 just-for-nominal?11_89 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_94 in-s_97)"
"(let-values(((...ander/expand/env.rkt:85:2_99) add-binding-in-scopes!18.1)"
"((temp53_100)(syntax-scope-set id_94 phase_96))"
"((temp54_101)(syntax-e$1 id_94))"
"((binding55_102) binding_95)"
"((just-for-nominal?56_103) just-for-nominal?_98))"
"(if(variable-reference-constant?(#%variable-reference add-binding-in-scopes!18.1))"
"(add-binding-in-scopes!16.1 just-for-nominal?56_103 #t temp53_100 temp54_101 binding55_102)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/env.rkt:85:2_99"
" keyword-procedure-extract"
" '(#:just-for-nominal?)"
" 5)"
" '(#:just-for-nominal?)"
"(list just-for-nominal?56_103)"
" temp53_100"
" temp54_101"
" binding55_102))))))))))))"
"(define-values"
"(unpack18.1$2)"
"(lambda(given-kws_104 given-args_105 id14_106 binding15_107 phase16_108)"
"(let-values(((in12_109)(if(pair? given-kws_104)(eq? '#:in(car given-kws_104)) #f)))"
"(let-values(((in10_110)(if in12_109(car given-args_105)(void)))"
"((given-kws_111)(if in12_109(cdr given-kws_104) given-kws_104))"
"((given-args_112)(if in12_109(cdr given-args_105) given-args_105)))"
"(let-values(((just-for-nominal?13_113)(pair? given-kws_111)))"
"(let-values(((just-for-nominal?11_114)(if just-for-nominal?13_113(car given-args_112)(void))))"
"(add-binding!17.1"
" in10_110"
" in12_109"
" just-for-nominal?11_114"
" just-for-nominal?13_113"
" id14_106"
" binding15_107"
" phase16_108)))))))"
"(define-values"
"(add-binding!19.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_115 given-argc_116)"
"(if(= given-argc_116 5)"
"(let-values(((l1_117) given-kws_115))"
"(let-values(((l1_118)(if(null? l1_117) l1_117(if(eq?(car l1_117) '#:in)(cdr l1_117) l1_117))))"
"(let-values(((l1_119) l1_118))"
"(let-values(((l1_120)"
"(if(null? l1_119) l1_119(if(eq?(car l1_119) '#:just-for-nominal?)(cdr l1_119) l1_119))))"
"(null? l1_120)))))"
" #f))"
"(case-lambda"
"((given-kws_121 given-args_122 id_123 binding_124 phase_125)"
"(unpack18.1$2 given-kws_121 given-args_122 id_123 binding_124 phase_125)))"
" null"
" '(#:in #:just-for-nominal?)"
"(let-values(((add-binding!_126)"
"(case-lambda((id_127 binding_128 phase_129)(unpack18.1$2 null null id_127 binding_128 phase_129)))))"
" add-binding!_126)))"
"(define-values"
"(add-bulk-binding!25.1)"
"(lambda(in20_130 in21_131 s22_132 binding23_133 phase24_134)"
"(let-values(((s_135) s22_132))"
"(let-values(((binding_136) binding23_133))"
"(let-values(((phase_137) phase24_134))"
"(let-values(((in-s_138)(if in21_131 in20_130 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_135)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_138 s_135))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_135 phase_137) binding_136)))))))))"
"(define-values"
"(unpack26.1$1)"
"(lambda(given-kws_139 given-args_140 s22_141 binding23_142 phase24_143)"
"(let-values(((in21_144)(pair? given-kws_139)))"
"(let-values(((in20_145)(if in21_144(car given-args_140)(void))))"
"(add-bulk-binding!25.1 in20_145 in21_144 s22_141 binding23_142 phase24_143)))))"
"(define-values"
"(add-bulk-binding!27.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_146 given-argc_147)"
"(if(= given-argc_147 5)"
"(let-values(((l1_148) given-kws_146))"
"(let-values(((l1_149)(if(null? l1_148) l1_148(if(eq?(car l1_148) '#:in)(cdr l1_148) l1_148))))"
"(null? l1_149)))"
" #f))"
"(case-lambda"
"((given-kws_150 given-args_151 s_152 binding_153 phase_154)"
"(unpack26.1$1 given-kws_150 given-args_151 s_152 binding_153 phase_154)))"
" null"
" '(#:in)"
"(let-values(((add-bulk-binding!_155)"
"(case-lambda((s_156 binding_157 phase_158)(unpack26.1$1 null null s_156 binding_157 phase_158)))))"
" add-bulk-binding!_155)))"
"(define-values"
"(add-local-binding!35.1)"
"(lambda(frame-id28_159 frame-id30_160 in29_161 in31_162 id32_163 phase33_164 counter34_165)"
"(let-values(((id_166) id32_163))"
"(let-values(((phase_167) phase33_164))"
"(let-values(((counter_168) counter34_165))"
"(let-values(((frame-id_169)(if frame-id30_160 frame-id28_159 #f)))"
"(let-values(((in-s_170)(if in31_162 in29_161 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_166 in-s_170)(values))))"
"(let-values((()(begin(set-box! counter_168(add1(unbox counter_168)))(values))))"
"(let-values(((key_171)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_166) (unbox counter_168)))))"
"(begin"
"(let-values(((temp57_172)(syntax-scope-set id_166 phase_167))"
"((temp58_173)(syntax-e$1 id_166))"
"((temp59_174)"
"(let-values(((...ander/expand/env.rkt:98:68_175) make-local-binding9.1)"
"((key60_176) key_171)"
"((frame-id61_177) frame-id_169))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id61_177 #t #f #f key60_176)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/env.rkt:98:68_175"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list frame-id61_177)"
" key60_176)))))"
"(if(variable-reference-constant?(#%variable-reference add-binding-in-scopes!18.1))"
"(add-binding-in-scopes!16.1 #f #f temp57_172 temp58_173 temp59_174)"
"(add-binding-in-scopes!18.1 temp57_172 temp58_173 temp59_174)))"
" key_171))))))))))))"
"(define-values"
"(unpack36.1)"
"(lambda(given-kws_178 given-args_179 id32_180 phase33_181 counter34_182)"
"(let-values(((frame-id30_183)(if(pair? given-kws_178)(eq? '#:frame-id(car given-kws_178)) #f)))"
"(let-values(((frame-id28_184)(if frame-id30_183(car given-args_179)(void)))"
"((given-kws_185)(if frame-id30_183(cdr given-kws_178) given-kws_178))"
"((given-args_186)(if frame-id30_183(cdr given-args_179) given-args_179)))"
"(let-values(((in31_187)(pair? given-kws_185)))"
"(let-values(((in29_188)(if in31_187(car given-args_186)(void))))"
"(add-local-binding!35.1"
" frame-id28_184"
" frame-id30_183"
" in29_188"
" in31_187"
" id32_180"
" phase33_181"
" counter34_182)))))))"
"(define-values"
"(add-local-binding!37.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_189 given-argc_190)"
"(if(= given-argc_190 5)"
"(let-values(((l1_191) given-kws_189))"
"(let-values(((l1_192)(if(null? l1_191) l1_191(if(eq?(car l1_191) '#:frame-id)(cdr l1_191) l1_191))))"
"(let-values(((l1_193) l1_192))"
"(let-values(((l1_194)(if(null? l1_193) l1_193(if(eq?(car l1_193) '#:in)(cdr l1_193) l1_193))))"
"(null? l1_194)))))"
" #f))"
"(case-lambda"
"((given-kws_195 given-args_196 id_197 phase_198 counter_199)"
"(unpack36.1 given-kws_195 given-args_196 id_197 phase_198 counter_199)))"
" null"
" '(#:frame-id #:in)"
"(let-values(((add-local-binding!_200)"
"(case-lambda((id_201 phase_202 counter_203)(unpack36.1 null null id_201 phase_202 counter_203)))))"
" add-local-binding!_200)))"
"(define-values"
"(check-id-taint)"
"(lambda(id_204 in-s_205)"
"(if(syntax-tainted?$1 id_204)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_205 id_204))"
"(void))))"
"(define-values"
"(binding-lookup48.1)"
"(lambda(in38_206"
" in40_207"
" out-of-context-as-variable?39_208"
" out-of-context-as-variable?41_209"
" b42_210"
" env43_211"
" lift-envs44_212"
" ns45_213"
" phase46_214"
" id47_215)"
"(let-values(((b_216) b42_210))"
"(let-values(((env_217) env43_211))"
"(let-values(((lift-envs_218) lift-envs44_212))"
"(let-values(((ns_219) ns45_213))"
"(let-values(((phase_220) phase46_214))"
"(let-values(((id_221) id47_215))"
"(let-values(((in-s_222)(if in40_207 in38_206 #f)))"
"(let-values(((out-of-context-as-variable?_223)"
"(if out-of-context-as-variable?41_209 out-of-context-as-variable?39_208 #f)))"
"(let-values()"
"(if(module-binding? b_216)"
"(let-values()"
"(let-values(((top-level?_224)(top-level-module-path-index?(module-binding-module b_216))))"
"(let-values(((mi_225)"
"(if(not top-level?_224)"
"(binding->module-instance b_216 ns_219 phase_220 id_221)"
" #f)))"
"(let-values(((m-ns_226)"
"(if top-level?_224"
" ns_219"
"(if mi_225(module-instance-namespace mi_225) #f))))"
"(let-values((()(begin(check-taint id_221)(values))))"
"(let-values(((t_227)"
"(namespace-get-transformer"
" m-ns_226"
"(module-binding-phase b_216)"
"(module-binding-sym b_216)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_225"
"(let-values()"
"(check-access"
" b_216"
" mi_225"
" id_221"
" in-s_222"
"                                                         (if t_227 \"transformer\" \"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_228)"
"(if mi_225"
"(if(module-instance-module mi_225)"
"(module-inspector(module-instance-module mi_225))"
" #f)"
" #f)))"
"(values t_227 insp_228)))))))))"
"(if(local-binding? b_216)"
"(let-values()"
"(let-values(((t_229)(hash-ref env_217(local-binding-key b_216) missing)))"
"(if(eq? t_229 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_230)"
"(let-values(((lst_231) lift-envs_218))"
"(begin"
"(if(list? lst_231)(void)(let-values()(in-list lst_231)))"
"((letrec-values(((for-loop_232)"
"(lambda(result_233 lst_234)"
"(if(pair? lst_234)"
"(let-values(((lift-env_235)"
"(unsafe-car lst_234)))"
"(let-values(((result_236)"
"(let-values(((result_237)"
" result_233))"
"(let-values(((result_238)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_235)"
"(local-binding-key"
" b_216)"
" #f)))))"
"(values result_238)))))"
"(if(not"
"((lambda x_239 result_236)"
" lift-env_235))"
"(for-loop_232"
" result_236"
"(unsafe-cdr lst_234))"
" result_236)))"
" result_233))))"
" for-loop_232)"
" #f"
" lst_231)))))"
"(if or-part_230"
" or-part_230"
"(if out-of-context-as-variable?_223"
" variable"
"                                         (error \"identifier used out of context:\" id_221))))"
" #f))"
"(let-values()(begin(check-taint id_221)(values t_229 #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_216)))))))))))))))"
"(define-values"
"(unpack49.1$1)"
"(lambda(given-kws_240 given-args_241 b42_242 env43_243 lift-envs44_244 ns45_245 phase46_246 id47_247)"
"(let-values(((in40_248)(if(pair? given-kws_240)(eq? '#:in(car given-kws_240)) #f)))"
"(let-values(((in38_249)(if in40_248(car given-args_241)(void)))"
"((given-kws_250)(if in40_248(cdr given-kws_240) given-kws_240))"
"((given-args_251)(if in40_248(cdr given-args_241) given-args_241)))"
"(let-values(((out-of-context-as-variable?41_252)(pair? given-kws_250)))"
"(let-values(((out-of-context-as-variable?39_253)"
"(if out-of-context-as-variable?41_252(car given-args_251)(void))))"
"(binding-lookup48.1"
" in38_249"
" in40_248"
" out-of-context-as-variable?39_253"
" out-of-context-as-variable?41_252"
" b42_242"
" env43_243"
" lift-envs44_244"
" ns45_245"
" phase46_246"
" id47_247)))))))"
"(define-values"
"(binding-lookup50.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_254 given-argc_255)"
"(if(= given-argc_255 8)"
"(let-values(((l1_256) given-kws_254))"
"(let-values(((l1_257)(if(null? l1_256) l1_256(if(eq?(car l1_256) '#:in)(cdr l1_256) l1_256))))"
"(let-values(((l1_258) l1_257))"
"(let-values(((l1_259)"
"(if(null? l1_258)"
" l1_258"
"(if(eq?(car l1_258) '#:out-of-context-as-variable?)(cdr l1_258) l1_258))))"
"(null? l1_259)))))"
" #f))"
"(case-lambda"
"((given-kws_260 given-args_261 b_262 env_263 lift-envs_264 ns_265 phase_266 id_267)"
"(unpack49.1$1 given-kws_260 given-args_261 b_262 env_263 lift-envs_264 ns_265 phase_266 id_267)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((binding-lookup_268)"
"(case-lambda"
"((b_269 env_270 lift-envs_271 ns_272 phase_273 id_274)"
"(unpack49.1$1 null null b_269 env_270 lift-envs_271 ns_272 phase_273 id_274)))))"
" binding-lookup_268)))"
"(define-values"
"(check-taint)"
"(lambda(id_275)"
"(if(syntax-tainted?$1 id_275)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_275))"
"(void))))"
"(void)"
"(void)"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values(((lst_3) ids_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6)))"
"(let-values(((ht_8)"
"(let-values(((ht_9) ht_5))"
"(let-values(((ht_10)"
"(let-values()"
"(hash-update"
" ht_9"
"(identifier-binding-symbol$1 id_7 phase_1)"
"(lambda(l_11)(cons id_7 l_11))"
" null))))"
"(values ht_10)))))"
"(for-loop_4 ht_8(unsafe-cdr lst_6))))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_12 phase_13 given-id_14)"
"(if(zero?(hash-count fs_12))"
" #f"
"(let-values(((lst_15)(hash-ref fs_12(identifier-binding-symbol$1 given-id_14 phase_13) null)))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((id_19)(unsafe-car lst_18)))"
"(let-values(((result_20)"
"(let-values(((result_21) result_17))"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_19"
" given-id_14"
" phase_13"
" phase_13)))))"
"(values result_22)))))"
"(if(not((lambda x_23 result_20) id_19))"
"(for-loop_16 result_20(unsafe-cdr lst_18))"
" result_20)))"
" result_17))))"
" for-loop_16)"
" #f"
" lst_15))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_24)(let-values(((c_25)(hash-count fs_24)))(<= c_25 1))))"
"(void)"
"(void)"
"(define-values"
"(struct:expand-context"
" expand-context1.1"
" expand-context?"
" expand-context-context"
" expand-context-phase"
" expand-context-namespace"
" expand-context-env"
" expand-context-user-env"
" expand-context-post-expansion-scope-action"
" expand-context-scopes"
" expand-context-def-ctx-scopes"
" expand-context-binding-layer"
" expand-context-reference-records"
" expand-context-only-immediate?"
" expand-context-just-once?"
" expand-context-module-begin-k"
" expand-context-need-eventually-defined"
" expand-context-allow-unbound?"
" expand-context-preserve-#%expression-and-do-not-add-#%top?"
" expand-context-stops"
" expand-context-current-introduction-scopes"
" expand-context-declared-submodule-names"
" expand-context-lifts"
" expand-context-lift-envs"
" expand-context-module-lifts"
" expand-context-require-lifts"
" expand-context-to-module-lifts"
" expand-context-requires+provides"
" expand-context-name"
" expand-context-observer)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context"
" 27"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26)"
" #f"
" 'expand-context)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'context)"
"(make-struct-field-accessor -ref_9 1 'phase)"
"(make-struct-field-accessor -ref_9 2 'namespace)"
"(make-struct-field-accessor -ref_9 3 'env)"
"(make-struct-field-accessor -ref_9 4 'user-env)"
"(make-struct-field-accessor -ref_9 5 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_9 6 'scopes)"
"(make-struct-field-accessor -ref_9 7 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_9 8 'binding-layer)"
"(make-struct-field-accessor -ref_9 9 'reference-records)"
"(make-struct-field-accessor -ref_9 10 'only-immediate?)"
"(make-struct-field-accessor -ref_9 11 'just-once?)"
"(make-struct-field-accessor -ref_9 12 'module-begin-k)"
"(make-struct-field-accessor -ref_9 13 'need-eventually-defined)"
"(make-struct-field-accessor -ref_9 14 'allow-unbound?)"
"(make-struct-field-accessor -ref_9 15 'preserve-#%expression-and-do-not-add-#%top?)"
"(make-struct-field-accessor -ref_9 16 'stops)"
"(make-struct-field-accessor -ref_9 17 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_9 18 'declared-submodule-names)"
"(make-struct-field-accessor -ref_9 19 'lifts)"
"(make-struct-field-accessor -ref_9 20 'lift-envs)"
"(make-struct-field-accessor -ref_9 21 'module-lifts)"
"(make-struct-field-accessor -ref_9 22 'require-lifts)"
"(make-struct-field-accessor -ref_9 23 'to-module-lifts)"
"(make-struct-field-accessor -ref_9 24 'requires+provides)"
"(make-struct-field-accessor -ref_9 25 'name)"
"(make-struct-field-accessor -ref_9 26 'observer))))"
"(define-values"
"(make-expand-context)"
"(lambda(ns_156)"
"(let-values(((root-ctx_157)(namespace-get-root-expand-ctx ns_156)))"
"(expand-context1.1"
"(root-expand-context-module-scopes root-ctx_157)"
"(root-expand-context-post-expansion-scope root-ctx_157)"
"(root-expand-context-top-level-bind-scope root-ctx_157)"
"(root-expand-context-all-scopes-stx root-ctx_157)"
"(root-expand-context-use-site-scopes root-ctx_157)"
"(root-expand-context-defined-syms root-ctx_157)"
"(root-expand-context-frame-id root-ctx_157)"
"(root-expand-context-counter root-ctx_157)"
"(root-expand-context-lift-key root-ctx_157)"
" 'top-level"
"(namespace-phase ns_156)"
" ns_156"
" empty-env"
" '#hasheq()"
" push-scope"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_157)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe)))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_158 root-ctx_159)"
"(let-values(((the-struct_160) ctx_158))"
"(if(expand-context? the-struct_160)"
"(let-values(((module-scopes16_161)(root-expand-context-module-scopes root-ctx_159))"
"((post-expansion-scope17_162)(root-expand-context-post-expansion-scope root-ctx_159))"
"((top-level-bind-scope18_163)(root-expand-context-top-level-bind-scope root-ctx_159))"
"((all-scopes-stx19_164)(root-expand-context-all-scopes-stx root-ctx_159))"
"((use-site-scopes20_165)(root-expand-context-use-site-scopes root-ctx_159))"
"((defined-syms21_166)(root-expand-context-defined-syms root-ctx_159))"
"((frame-id22_167)(root-expand-context-frame-id root-ctx_159))"
"((counter23_168)(root-expand-context-counter root-ctx_159))"
"((lift-key24_169)(root-expand-context-lift-key root-ctx_159))"
"((binding-layer25_170)(root-expand-context-frame-id root-ctx_159)))"
"(expand-context1.1"
" module-scopes16_161"
" post-expansion-scope17_162"
" top-level-bind-scope18_163"
" all-scopes-stx19_164"
" use-site-scopes20_165"
" defined-syms21_166"
" frame-id22_167"
" counter23_168"
" lift-key24_169"
"(expand-context-context the-struct_160)"
"(expand-context-phase the-struct_160)"
"(expand-context-namespace the-struct_160)"
"(expand-context-env the-struct_160)"
"(expand-context-user-env the-struct_160)"
"(expand-context-post-expansion-scope-action the-struct_160)"
"(expand-context-scopes the-struct_160)"
"(expand-context-def-ctx-scopes the-struct_160)"
" binding-layer25_170"
"(expand-context-reference-records the-struct_160)"
"(expand-context-only-immediate? the-struct_160)"
"(expand-context-just-once? the-struct_160)"
"(expand-context-module-begin-k the-struct_160)"
"(expand-context-need-eventually-defined the-struct_160)"
"(expand-context-allow-unbound? the-struct_160)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_160)"
"(expand-context-stops the-struct_160)"
"(expand-context-current-introduction-scopes the-struct_160)"
"(expand-context-declared-submodule-names the-struct_160)"
"(expand-context-lifts the-struct_160)"
"(expand-context-lift-envs the-struct_160)"
"(expand-context-module-lifts the-struct_160)"
"(expand-context-require-lifts the-struct_160)"
"(expand-context-to-module-lifts the-struct_160)"
"(expand-context-requires+provides the-struct_160)"
"(expand-context-name the-struct_160)"
"(expand-context-observer the-struct_160)))"
"        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_160)))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context6.1)"
"(lambda(fail-ok?2_171 fail-ok?3_172 who4_173 who5_174)"
"(let-values(((who_175)(if who5_174 who4_173 'unexpected)))"
"(let-values(((fail-ok?_176)(if fail-ok?3_172 fail-ok?2_171 #f)))"
"(let-values()"
"(let-values(((or-part_177)(force(current-expand-context))))"
"(if or-part_177"
" or-part_177"
"              (if fail-ok?_176 #f (raise-arguments-error who_175 \"not currently expanding\")))))))))"
"(define-values"
"(unpack7.1$4)"
"(lambda(given-kws_178 given-args_179 who4_180 who5_181)"
"(let-values(((fail-ok?3_182)(pair? given-kws_178)))"
"(let-values(((fail-ok?2_183)(if fail-ok?3_182(car given-args_179)(void))))"
"(get-current-expand-context6.1 fail-ok?2_183 fail-ok?3_182 who4_180 who5_181)))))"
"(define-values"
"(get-current-expand-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_184 given-argc_185)"
"(if(if(>= given-argc_185 2)(<= given-argc_185 3) #f)"
"(let-values(((l1_186) given-kws_184))"
"(let-values(((l1_187)(if(null? l1_186) l1_186(if(eq?(car l1_186) '#:fail-ok?)(cdr l1_186) l1_186))))"
"(null? l1_187)))"
" #f))"
"(case-lambda"
"((given-kws_188 given-args_189)(unpack7.1$4 given-kws_188 given-args_189 #f #f))"
"((given-kws_190 given-args_191 who4_192)(unpack7.1$4 given-kws_190 given-args_191 who4_192 #t)))"
" null"
" '(#:fail-ok?)"
"(let-values(((get-current-expand-context_193)"
"(case-lambda(()(unpack7.1$4 null null #f #f))((who4_194)(unpack7.1$4 null null who4_194 #t)))))"
" get-current-expand-context_193)))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_195)"
"(begin"
"(if(let-values(((or-part_196)(not v_195)))"
"(if or-part_196 or-part_196(if(procedure? v_195)(procedure-arity-includes? v_195 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_195)))"
" v_195))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_197)"
"(if(if(eq? 'expression(expand-context-context ctx_197))(not(expand-context-name ctx_197)) #f)"
"(let-values() ctx_197)"
"(let-values()"
"(let-values(((the-struct_198) ctx_197))"
"(if(expand-context? the-struct_198)"
"(let-values(((context26_199) 'expression)((name27_200) #f)((post-expansion-scope28_201) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_198)"
" post-expansion-scope28_201"
"(root-expand-context-top-level-bind-scope the-struct_198)"
"(root-expand-context-all-scopes-stx the-struct_198)"
"(root-expand-context-use-site-scopes the-struct_198)"
"(root-expand-context-defined-syms the-struct_198)"
"(root-expand-context-frame-id the-struct_198)"
"(root-expand-context-counter the-struct_198)"
"(root-expand-context-lift-key the-struct_198)"
" context26_199"
"(expand-context-phase the-struct_198)"
"(expand-context-namespace the-struct_198)"
"(expand-context-env the-struct_198)"
"(expand-context-user-env the-struct_198)"
"(expand-context-post-expansion-scope-action the-struct_198)"
"(expand-context-scopes the-struct_198)"
"(expand-context-def-ctx-scopes the-struct_198)"
"(expand-context-binding-layer the-struct_198)"
"(expand-context-reference-records the-struct_198)"
"(expand-context-only-immediate? the-struct_198)"
"(expand-context-just-once? the-struct_198)"
"(expand-context-module-begin-k the-struct_198)"
"(expand-context-need-eventually-defined the-struct_198)"
"(expand-context-allow-unbound? the-struct_198)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_198)"
"(expand-context-stops the-struct_198)"
"(expand-context-current-introduction-scopes the-struct_198)"
"(expand-context-declared-submodule-names the-struct_198)"
"(expand-context-lifts the-struct_198)"
"(expand-context-lift-envs the-struct_198)"
"(expand-context-module-lifts the-struct_198)"
"(expand-context-require-lifts the-struct_198)"
"(expand-context-to-module-lifts the-struct_198)"
"(expand-context-requires+provides the-struct_198)"
" name27_200"
"(expand-context-observer the-struct_198)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_198)))))))"
"(define-values"
"(lifted/1.1$20 lifted/2.1$20 lifted/3.1$19 lifted/4.1$19 lifted/5.1$19)"
"(make-struct-type"
" 'as-tail-context"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'as-tail-context(case-lambda((self_202 ctx_203)(apply missing-kw self_202 ctx_203 null))))))"
"(current-inspector)"
"(case-lambda((self_204 ctx_205)(apply missing-kw self_204 ctx_205 null)))))"
"(define-values"
"(as-tail-context12.1)"
"(lambda(wrt9_206 ctx11_207)"
"(let-values(((ctx_208) ctx11_207))"
"(let-values(((wrt-ctx_209) wrt9_206))"
"(let-values()"
"(if(expand-context-name wrt-ctx_209)"
"(let-values()"
"(let-values(((the-struct_210) ctx_208))"
"(if(expand-context? the-struct_210)"
"(let-values(((name29_211)(expand-context-name wrt-ctx_209)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_210)"
"(root-expand-context-post-expansion-scope the-struct_210)"
"(root-expand-context-top-level-bind-scope the-struct_210)"
"(root-expand-context-all-scopes-stx the-struct_210)"
"(root-expand-context-use-site-scopes the-struct_210)"
"(root-expand-context-defined-syms the-struct_210)"
"(root-expand-context-frame-id the-struct_210)"
"(root-expand-context-counter the-struct_210)"
"(root-expand-context-lift-key the-struct_210)"
"(expand-context-context the-struct_210)"
"(expand-context-phase the-struct_210)"
"(expand-context-namespace the-struct_210)"
"(expand-context-env the-struct_210)"
"(expand-context-user-env the-struct_210)"
"(expand-context-post-expansion-scope-action the-struct_210)"
"(expand-context-scopes the-struct_210)"
"(expand-context-def-ctx-scopes the-struct_210)"
"(expand-context-binding-layer the-struct_210)"
"(expand-context-reference-records the-struct_210)"
"(expand-context-only-immediate? the-struct_210)"
"(expand-context-just-once? the-struct_210)"
"(expand-context-module-begin-k the-struct_210)"
"(expand-context-need-eventually-defined the-struct_210)"
"(expand-context-allow-unbound? the-struct_210)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_210)"
"(expand-context-stops the-struct_210)"
"(expand-context-current-introduction-scopes the-struct_210)"
"(expand-context-declared-submodule-names the-struct_210)"
"(expand-context-lifts the-struct_210)"
"(expand-context-lift-envs the-struct_210)"
"(expand-context-module-lifts the-struct_210)"
"(expand-context-require-lifts the-struct_210)"
"(expand-context-to-module-lifts the-struct_210)"
"(expand-context-requires+provides the-struct_210)"
" name29_211"
"(expand-context-observer the-struct_210)))"
"                  (raise-argument-error 'struct-copy \"expand-context?\" the-struct_210))))"
"(let-values() ctx_208)))))))"
"(define-values"
"(unpack13.1$1)"
"(lambda(given-kws_212 given-args_213 ctx11_214)"
"(let-values(((wrt9_215)(car given-args_213)))(as-tail-context12.1 wrt9_215 ctx11_214))))"
"(define-values"
"(as-tail-context14.1)"
"(lifted/2.1$20"
"(lambda(given-kws_216 given-argc_217)"
"(if(= given-argc_217 3)"
"(let-values(((l2_218) given-kws_216))"
"(if(pair? l2_218)(if(eq?(car l2_218) '#:wrt)(null?(cdr l2_218)) #f) #f))"
" #f))"
"(case-lambda((given-kws_219 given-args_220 ctx_221)(unpack13.1$1 given-kws_219 given-args_220 ctx_221)))"
" '(#:wrt)"
" '(#:wrt)))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_222 ids_223)"
"(if(if(pair? ids_223)(null?(cdr ids_223)) #f)"
"(let-values()"
"(let-values(((the-struct_224) ctx_222))"
"(if(expand-context? the-struct_224)"
"(let-values(((name30_225)(car ids_223)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_224)"
"(root-expand-context-post-expansion-scope the-struct_224)"
"(root-expand-context-top-level-bind-scope the-struct_224)"
"(root-expand-context-all-scopes-stx the-struct_224)"
"(root-expand-context-use-site-scopes the-struct_224)"
"(root-expand-context-defined-syms the-struct_224)"
"(root-expand-context-frame-id the-struct_224)"
"(root-expand-context-counter the-struct_224)"
"(root-expand-context-lift-key the-struct_224)"
"(expand-context-context the-struct_224)"
"(expand-context-phase the-struct_224)"
"(expand-context-namespace the-struct_224)"
"(expand-context-env the-struct_224)"
"(expand-context-user-env the-struct_224)"
"(expand-context-post-expansion-scope-action the-struct_224)"
"(expand-context-scopes the-struct_224)"
"(expand-context-def-ctx-scopes the-struct_224)"
"(expand-context-binding-layer the-struct_224)"
"(expand-context-reference-records the-struct_224)"
"(expand-context-only-immediate? the-struct_224)"
"(expand-context-just-once? the-struct_224)"
"(expand-context-module-begin-k the-struct_224)"
"(expand-context-need-eventually-defined the-struct_224)"
"(expand-context-allow-unbound? the-struct_224)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_224)"
"(expand-context-stops the-struct_224)"
"(expand-context-current-introduction-scopes the-struct_224)"
"(expand-context-declared-submodule-names the-struct_224)"
"(expand-context-lifts the-struct_224)"
"(expand-context-lift-envs the-struct_224)"
"(expand-context-module-lifts the-struct_224)"
"(expand-context-require-lifts the-struct_224)"
"(expand-context-to-module-lifts the-struct_224)"
"(expand-context-requires+provides the-struct_224)"
" name30_225"
"(expand-context-observer the-struct_224)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_224))))"
"(let-values() ctx_222))))"
"(void)"
"(void)"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_289)"
"(if(pair? s_289)"
"(let-values()(let-values(((r_290)(to-syntax-list.1(cdr s_289))))(if r_290(cons(car s_289) r_290) #f)))"
"(if(syntax?$1 s_289)"
"(let-values()(to-syntax-list.1(syntax-e$1 s_289)))"
"(if(list? s_289)(let-values() s_289)(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_1 proc_2)(begin(add-core-binding! sym_1)(set! core-forms(hash-set core-forms sym_1 proc_2)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_3 val_4)"
"(begin(add-core-binding! sym_3)(set! core-primitives(hash-set core-primitives sym_3 val_4)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_5)"
"(let-values(((temp1_6)(datum->syntax$1 core-stx sym_5))"
"((temp2_7)"
"(let-values(((core-mpi4_9) core-mpi)((temp5_10) 0)((sym6_11) sym_5))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_9"
" temp5_10"
" sym6_11)"
"(make-module-binding24.1 core-mpi4_9 temp5_10 sym6_11))))"
"((temp3_8) 0))"
"(if(variable-reference-constant?(#%variable-reference add-binding!19.1))"
"(add-binding!17.1 #f #f #f #f temp1_6 temp2_7 temp3_8)"
"(add-binding!19.1 temp1_6 temp2_7 temp3_8)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_12)"
"(let-values(((ns7_13) ns_12)"
"((temp8_14)"
"(let-values(((...r/namespace/core.rkt:59:3_16) make-module39.1)"
"((temp10_17) #t)"
"((temp11_18) #t)"
"((temp12_19) #t)"
"((core-mpi13_20) core-mpi)"
"((temp14_21)"
"(hasheqv"
" 0"
"(let-values(((lst_23)(list core-primitives core-forms))((lst_24) '(#f #t)))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(table_26 lst_27 lst_28)"
"(if(if(pair? lst_27)(pair? lst_28) #f)"
"(let-values(((syms_29)(unsafe-car lst_27))"
"((syntax?_30)(unsafe-car lst_28)))"
"(let-values(((table_31)"
"(let-values(((table_32) table_26))"
"(let-values(((ht_33) syms_29))"
"(begin"
"(if((lambda(ht_34)(hash? ht_34))"
" ht_33)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_33)))"
"((letrec-values(((for-loop_35)"
"(lambda(table_36"
" i_37)"
"(if i_37"
"(let-values(((sym_38)"
"(hash-iterate-key"
" ht_33"
" i_37)))"
"(let-values(((table_39)"
"(let-values(((table_40)"
" table_36))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_42"
" val_43)"
"(let-values()"
"(let-values(((b_44)"
"(let-values(((core-mpi16_45)"
" core-mpi)"
"((temp17_46)"
" 0)"
"((sym18_47)"
" sym_38))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi16_45"
" temp17_46"
" sym18_47)"
"(make-module-binding24.1"
" core-mpi16_45"
" temp17_46"
" sym18_47)))))"
"(values"
" sym_38"
"(if syntax?_30"
"(provided1.1"
" b_44"
" #f"
" #t)"
" b_44))))))"
"(hash-set"
" table_40"
" key_42"
" val_43)))))"
"(values"
" table_41)))))"
"(for-loop_35"
" table_39"
"(hash-iterate-next"
" ht_33"
" i_37))))"
" table_36))))"
" for-loop_35)"
" table_32"
"(hash-iterate-first ht_33)))))))"
"(for-loop_25"
" table_31"
"(unsafe-cdr lst_27)"
"(unsafe-cdr lst_28))))"
" table_26))))"
" for-loop_25)"
" '#hasheq()"
" lst_23"
" lst_24)))))"
"((temp15_22)"
"(lambda(data-box_48"
" ns_49"
" phase_50"
" phase-level_51"
" self_52"
" bulk-binding-registry_53"
" insp_54)"
"(let-values(((tmp_55) phase-level_51))"
"(if(equal? tmp_55 0)"
"(let-values()"
"(begin"
"(let-values(((ht_56) core-primitives))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(fold-var_59 i_60)"
"(if i_60"
"(let-values(((sym_61 val_62)"
"(hash-iterate-key+value ht_56 i_60)))"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_64)"
" fold-var_59))"
"(let-values(((fold-var_65)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_49"
" 0"
" sym_61"
" val_62))"
"(void)))))"
"(values fold-var_65)))))"
"(for-loop_58"
" fold-var_63"
"(hash-iterate-next ht_56 i_60))))"
" fold-var_59))))"
" for-loop_58)"
"(void)"
"(hash-iterate-first ht_56))))"
"(let-values(((ht_66) core-forms))"
"(begin"
"(if((lambda(ht_67)(hash? ht_67)) ht_66)"
"(void)"
"(let-values()(default-in-hash ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(fold-var_69 i_70)"
"(if i_70"
"(let-values(((sym_71 proc_72)"
"(hash-iterate-key+value ht_66 i_70)))"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74)"
" fold-var_69))"
"(let-values(((fold-var_75)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_49"
" 0"
" sym_71"
"(core-form9.1"
" proc_72"
" sym_71)))"
"(void)))))"
"(values fold-var_75)))))"
"(for-loop_68"
" fold-var_73"
"(hash-iterate-next ht_66 i_70))))"
" fold-var_69))))"
" for-loop_68)"
"(void)"
"(hash-iterate-first ht_66))))))"
"(let-values()(void)))))))"
"(if(variable-reference-constant?(#%variable-reference make-module39.1))"
"(make-module37.1"
" temp10_17"
" #t"
" #f"
" #f"
" temp15_22"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_18"
" #t"
" #f"
" #f"
" temp12_19"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_21"
" #f"
" #f"
" core-mpi13_20"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/namespace/core.rkt:59:3_16"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
"(list temp10_17 temp15_22 temp11_18 temp12_19 temp14_21 core-mpi13_20)))))"
"((core-module-name9_15) core-module-name))"
"(if(variable-reference-constant?(#%variable-reference declare-module!58.1))"
"(declare-module!56.1 #f #f ns7_13 temp8_14 core-module-name9_15)"
"(declare-module!58.1 ns7_13 temp8_14 core-module-name9_15)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_76 phase_77)"
"(let-values(((ok?_78 id19_79 _20_80)"
"(let-values(((s_91) s_76))"
"(if(let-values(((s_92)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(if(pair? s_92)"
"(if(let-values(((s_93)(car s_92)))(if(syntax?$1 s_93)(symbol?(syntax-e$1 s_93)) #f))"
"(let-values(((s_94)(cdr s_92))) #t)"
" #f)"
" #f))"
"(let-values(((orig-s_95) s_91))"
"(let-values(((id19_96 _20_97)"
"(let-values(((s_98)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(let-values(((id21_99)(let-values(((s_101)(car s_98))) s_101))"
"((_22_100)(let-values(((s_102)(cdr s_98))) s_102)))"
"(values id21_99 _22_100)))))"
"(values #t id19_96 _20_97)))"
"(values #f #f #f)))))"
"(if ok?_78"
"(let-values(((b_103)"
"(let-values(((temp23_104) id19_79)((phase24_105) phase_77))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f temp23_104 phase24_105)"
"(resolve+shift22.1 temp23_104 phase24_105)))))"
"(if(module-binding? b_103)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_103)))"
"(module-binding-sym b_103)"
" #f)"
" #f))"
" #f))))"
"(void)"
"(void)"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values(((tmp_7) mode_6))"
"(if(equal? tmp_7 'none)"
"(let-values() s_5)"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(non-syntax-map"
"(let-values(((or-part_9)(syntax->list$1 s_5)))"
"(if or-part_9 or-part_9(syntax-e$1 s_5)))"
"(lambda(tail?_10 d_11) d_11)"
"(lambda(s_12)(loop_4 s_12(syntax-taint-mode-property s_12))))))"
"(datum->syntax$1"
" #f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_13)(syntax-e$1 s_5)))"
"(if(pair? c_13)"
"(let-values()"
"(let-values(((cd_14)(cdr c_13)))"
"(if(let-values(((or-part_15)(pair? cd_14)))"
"(if or-part_15"
" or-part_15"
"(if(syntax?$1 cd_14)(pair?(syntax-e$1 cd_14)) #f)))"
"(let-values()"
"(let-values(((d_16)(if(syntax?$1 cd_14)(syntax-e$1 cd_14) cd_14)))"
"(datum->syntax$1"
" s_5"
"(cons"
"(loop_4(car c_13)(syntax-taint-mode-property(car c_13)))"
"(cons"
"(loop_4(car d_16) 'transparent)"
"(non-syntax-map"
"(let-values(((or-part_17)(syntax->list$1(cdr d_16))))"
"(if or-part_17 or-part_17(cdr d_16)))"
"(lambda(tail?_18 d_19) d_19)"
"(lambda(s_20)(loop_4 s_20(syntax-taint-mode-property s_20))))))"
" s_5"
" s_5)))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_21)(syntax-e$1 s_5)))"
"(let-values(((tmp_22)(core-form-sym c_21 phase_3)))"
"(if(if(equal? tmp_22 'begin)"
" #t"
"(if(equal? tmp_22 'begin-for-syntax) #t(equal? tmp_22 '#%module-begin)))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_22 'define-values) #t(equal? tmp_22 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque)))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_23)"
"(let-values(((or-part_24)(syntax-property$1 s_23 'taint-mode)))"
"(if or-part_24 or-part_24(syntax-property$1 s_23 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_25)(syntax-property-remove(syntax-property-remove s_25 'taint-mode) 'certify-mode)))"
"(void)"
"(void)"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(void)"
"(void)"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(alt-reverse"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((smss_10)(unsafe-car lst_9)))"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_14)"
"(if(identifier? s_1)"
"(hasheq"
" 'name"
"(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_15)"
"(scope-set-at-fallback"
" s_1"
" smss_10"
" phase_2)))"
"(let-values(((context_16)"
"(scope-set->context"
" s-scs_15)))"
"(let-values(((context-ht_17)"
"(hash-set"
" init-ht_14"
" 'context"
" context_16)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_1)))"
"(let-values(((bindings_19)"
"(if(identifier?"
" s_1)"
"(let-values()"
"(alt-reverse"
"(let-values(((ht_20)"
" s-scs_15))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash?"
" ht_21)"
"(immutable?"
" ht_21)"
" #f))"
" ht_20)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23"
" i_24)"
"(if i_24"
"(let-values(((sc_25)"
"(unsafe-immutable-hash-iterate-key"
" ht_20"
" i_24)))"
"(let-values(((fold-var_26)"
"(let-values(((ht_27"
" bulk-bindings_28)"
"(let-values(((table_31)"
"(scope-binding-table"
" sc_25)))"
"(if(hash?"
" table_31)"
"(values"
"(hash-ref"
" table_31"
" sym_18"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_31)"
" sym_18"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_31)))))"
"((s_29)"
" s_1)"
"((extra-shifts_30)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33"
" i_34"
" already-covered-scopes_35)"
"(if(not"
"(null?"
" i_34))"
"(let-values(((scs_36)"
"(if(pair?"
" i_34)"
"(let-values()"
"(let-values(((scs_38)"
"(bulk-binding-at-scopes"
"(car"
" i_34))))"
"(if(not"
"(set-member?"
" already-covered-scopes_35"
" scs_38))"
" scs_38"
" #f)))"
"(let-values()"
"(hash-iterate-key"
" ht_27"
" i_34))))"
"((b_37)"
"(if(pair?"
" i_34)"
"(let-values()"
"(let-values(((bulk_39)"
"(bulk-binding-at-bulk"
"(car"
" i_34))))"
"(let-values(((b-info_40)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_39"
" s_29"
" extra-shifts_30)"
" sym_18"
" #f)))"
"(if b-info_40"
"((bulk-binding-create"
" bulk_39)"
" bulk_39"
" b-info_40"
" sym_18)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_27"
" i_34)))))"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_33))"
"(if(if scs_36"
"(if b_37"
"(let-values(((or-part_43)"
" all-bindings?_3))"
"(if or-part_43"
" or-part_43"
"(subset?"
" scs_36"
" s-scs_15)))"
" #f)"
" #f)"
"(let-values(((fold-var_44)"
" fold-var_42))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_36)"
" 'match?"
"(subset?"
" scs_36"
" s-scs_15)"
"(if(local-binding?"
" b_37)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_37)"
"(local-binding-key"
" b_37)"
"(vector"
"(module-binding-sym"
" b_37)"
"(module-binding-module"
" b_37)"
"(module-binding-phase"
" b_37)))))"
" fold-var_44))))"
"(values"
" fold-var_45)))"
" fold-var_42))))"
"(for-loop_32"
" fold-var_41"
"(if(pair?"
" i_34)"
"(let-values()"
"(cdr"
" i_34))"
"(let-values()"
"(let-values(((or-part_46)"
"(hash-iterate-next"
" ht_27"
" i_34)))"
"(if or-part_46"
" or-part_46"
" bulk-bindings_28))))"
"(if(if(pair?"
" bulk-bindings_28)"
"(if scs_36"
"(if b_37"
"(let-values(((or-part_47)"
"(not"
"(pair?"
" i_34))))"
"(if or-part_47"
" or-part_47"
"(not"
"(null?"
"(cdr"
" i_34)))))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(set-add"
" already-covered-scopes_35"
" scs_36))"
"(let-values()"
" already-covered-scopes_35)))))"
" fold-var_33))))"
" for-loop_32)"
" fold-var_23"
"(let-values(((or-part_48)"
"(hash-iterate-first"
" ht_27)))"
"(if or-part_48"
" or-part_48"
" bulk-bindings_28))"
" '#hasheq())))))"
"(for-loop_22"
" fold-var_26"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first"
" ht_20))))))"
"(let-values()"
" null))))"
"(if(null? bindings_19)"
" context-ht_17"
"(hash-set"
" context-ht_17"
" 'bindings"
" bindings_19)))))))))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(for-loop_7 fold-var_11(unsafe-cdr lst_9))))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_49)"
"(let-values(((...der/syntax/debug.rkt:52:2_50) sort9.1)"
"((temp1_51)"
"(alt-reverse"
"(let-values(((ht_54) scs_49))"
"(begin"
"(if((lambda(ht_55)(if(hash? ht_55)(immutable? ht_55) #f)) ht_54)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_54)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57 i_58)"
"(if i_58"
"(let-values(((sc_59)(unsafe-immutable-hash-iterate-key ht_54 i_58)))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_57))"
"(let-values(((fold-var_62)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_59)"
"(vector"
"(scope-id sc_59)"
"(scope-kind sc_59)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_59)))"
"(vector"
"(scope-id sc_59)"
"(scope-kind sc_59))))"
" fold-var_61))))"
"(values fold-var_62)))))"
"(for-loop_56"
" fold-var_60"
"(unsafe-immutable-hash-iterate-next ht_54 i_58))))"
" fold-var_57))))"
" for-loop_56)"
" null"
"(unsafe-immutable-hash-iterate-first ht_54))))))"
"((<2_52) <)"
"((temp3_53)(lambda(v_63)(vector-ref v_63 0))))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f temp3_53 #t temp1_51 <2_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/syntax/debug.rkt:52:2_50"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list temp3_53)"
" temp1_51"
" <2_52)))))"
"(void)"
"(void)"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_1 #f null (syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) #t)))"
"(if(not"
"(let-values(((or-part_6)(pair?(hash-ref info_5 'bindings null))))"
"(if or-part_6"
" or-part_6"
"(let-values(((lst_7)(hash-ref info_5 'fallbacks null)))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(result_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((fb-info_11)(unsafe-car lst_10)))"
"(let-values(((result_12)"
"(let-values(((result_13) result_9))"
"(let-values(((result_14)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref fb-info_11 'bindings null))))))"
"(values result_14)))))"
"(if(not((lambda x_15 result_12) fb-info_11))"
"(for-loop_8 result_12(unsafe-cdr lst_10))"
" result_12)))"
" result_9))))"
" for-loop_8)"
" #f"
" lst_7))))))"
"        (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_16)"
"((letrec-values(((loop_18)"
"(lambda(info_19 layer_20)"
"(apply"
" append"
"(cons"
"(hash-ref info_19 'context)"
"(alt-reverse"
"(let-values(((lst_21)(hash-ref info_19 'bindings null)))"
"(begin"
"(if(list? lst_21)(void)(let-values()(in-list lst_21)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 lst_24)"
"(if(pair? lst_24)"
"(let-values(((b_25)(unsafe-car lst_24)))"
"(let-values(((fold-var_26)"
"(let-values(((fold-var_27)"
" fold-var_23))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" b_25"
" 'context))"
" fold-var_27))))"
"(values fold-var_28)))))"
"(for-loop_22"
" fold-var_26"
"(unsafe-cdr lst_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
" lst_21)))))"
"(let-values(((fallbacks_29)(hash-ref info_19 'fallbacks null)))"
"(alt-reverse"
"(let-values(((lst_30) fallbacks_29)((start_31)(add1 layer_20)))"
"(begin"
"(if(list? lst_30)(void)(let-values()(in-list lst_30)))"
"(if(exact-nonnegative-integer? start_31)"
"(void)"
"(let-values()(in-naturals start_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33 lst_34 pos_35)"
"(if(if(pair? lst_34) #t #f)"
"(let-values(((fallback_36)"
"(unsafe-car lst_34))"
"((layer_37) pos_35))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39)"
" fold-var_33))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_18"
" fallback_36"
" layer_37))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(for-loop_32"
" fold-var_38"
"(unsafe-cdr lst_34)"
"(+ pos_35 1))))"
" fold-var_33))))"
" for-loop_32)"
" null"
" lst_30"
" start_31)))))))))"
" loop_18)"
" info_5"
" 0)))"
"(let-values(((common-scopes_17)"
"(if(null? relevant-scope-sets_16)"
"(set)"
"(let-values(((lst_41) relevant-scope-sets_16))"
"(begin"
"(if(list? lst_41)(void)(let-values()(in-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(s_43 lst_44)"
"(if(pair? lst_44)"
"(let-values(((l_45)(unsafe-car lst_44)))"
"(let-values(((s_46)"
"(let-values(((s_47) s_43))"
"(let-values(((s_48)"
"(let-values()"
"(set-intersect"
" s_47"
"(list->set l_45)))))"
"(values s_48)))))"
"(for-loop_42 s_46(unsafe-cdr lst_44))))"
" s_43))))"
" for-loop_42)"
"(list->set(car relevant-scope-sets_16))"
" lst_41))))))"
"(string-append"
"((letrec-values(((loop_49)"
"(lambda(info_50 layer_51)"
"(string-append"
"                                    \"\\n  context\""
"(layer->string layer_51)"
"                                    \"...:\""
"(describe-context(hash-ref info_50 'context) common-scopes_17)"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_52)"
"(let-values(((temp1_53)(hash-ref info_50 'bindings null))"
"((temp2_54)"
"(lambda(a_55 b_56)"
"(if(hash-ref a_55 'match? #f)"
"(not(hash-ref b_56 'match? #f))"
" #f))))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp1_53 temp2_54)"
"(sort9.1 temp1_53 temp2_54)))))"
"(begin"
"(if(list? lst_52)(void)(let-values()(in-list lst_52)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58 lst_59)"
"(if(pair? lst_59)"
"(let-values(((b_60)(unsafe-car lst_59)))"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62)"
" fold-var_58))"
"(let-values(((fold-var_63)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                                      \"\\n  \""
"(if(hash-ref"
" b_60"
" 'match?"
" #f)"
"                                                                                                        \"matching\""
"                                                                                                        \"other\")"
"                                                                                                      \" binding\""
"(layer->string"
" layer_51)"
"                                                                                                      \"...:\""
"                                                                                                      \"\\n   \""
"(if(hash-ref"
" b_60"
" 'local"
" #f)"
"                                                                                                        \"local\""
"(format"
"                                                                                                         \"~a\""
"(hash-ref"
" b_60"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_60"
" 'context)"
" common-scopes_17)))"
" fold-var_62))))"
"(values fold-var_63)))))"
"(for-loop_57 fold-var_61(unsafe-cdr lst_59))))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_52)))))"
"(let-values(((fallbacks_64)(hash-ref info_50 'fallbacks null)))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_65) fallbacks_64)((start_66)(add1 layer_51)))"
"(begin"
"(if(list? lst_65)(void)(let-values()(in-list lst_65)))"
"(if(exact-nonnegative-integer? start_66)"
"(void)"
"(let-values()(in-naturals start_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68 lst_69 pos_70)"
"(if(if(pair? lst_69) #t #f)"
"(let-values(((fallback_71)(unsafe-car lst_69))"
"((layer_72) pos_70))"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74)"
" fold-var_68))"
"(let-values(((fold-var_75)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_49"
" fallback_71"
" layer_72))"
" fold-var_74))))"
"(values fold-var_75)))))"
"(for-loop_67"
" fold-var_73"
"(unsafe-cdr lst_69)"
"(+ pos_70 1))))"
" fold-var_68))))"
" for-loop_67)"
" null"
" lst_65"
" start_66))))))))))"
" loop_49)"
" info_5"
" 0)"
"(if(set-empty? common-scopes_17)"
"                 \"\""
"(string-append"
"                  \"\\n  common scopes...:\""
"(describe-context"
"(alt-reverse"
"(let-values(((lst_76)(hash-ref info_5 'context)))"
"(begin"
"(if(list? lst_76)(void)(let-values()(in-list lst_76)))"
"((letrec-values(((for-loop_77)"
"(lambda(fold-var_78 lst_79)"
"(if(pair? lst_79)"
"(let-values(((s_80)(unsafe-car lst_79)))"
"(let-values(((fold-var_81)"
"(let-values(((fold-var_82) fold-var_78))"
"(if(set-member? common-scopes_17 s_80)"
"(let-values(((fold-var_83) fold-var_82))"
"(let-values(((fold-var_84)"
"(let-values()"
"(cons"
"(let-values() s_80)"
" fold-var_83))))"
"(values fold-var_84)))"
" fold-var_82))))"
"(for-loop_77 fold-var_81(unsafe-cdr lst_79))))"
" fold-var_78))))"
" for-loop_77)"
" null"
" lst_76))))"
"(set))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_85 common-scopes_86)"
"(let-values(((strs_87)"
"((letrec-values(((loop_88)"
"(lambda(strs_89 scopes_90)"
"(if(null? scopes_90)"
"(let-values()(alt-reverse strs_89))"
"(let-values()"
"                                          (let-values (((str_91) (format \" ~a\" (car scopes_90))))"
"(if(if(pair? strs_89)"
"(<(+(string-length str_91)(string-length(car strs_89))) 72)"
" #f)"
"(loop_88"
"(cons(string-append(car strs_89) str_91)(cdr strs_89))"
"(cdr scopes_90))"
"(loop_88(cons str_91 strs_89)(cdr scopes_90)))))))))"
" loop_88)"
" null"
"(if(set-empty? common-scopes_86)"
" scopes_85"
"(append"
"(alt-reverse"
"(let-values(((lst_92) scopes_85))"
"(begin"
"(if(list? lst_92)(void)(let-values()(in-list lst_92)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_94 lst_95)"
"(if(pair? lst_95)"
"(let-values(((s_96)(unsafe-car lst_95)))"
"(let-values(((fold-var_97)"
"(let-values(((fold-var_98) fold-var_94))"
"(if(not(set-member? common-scopes_86 s_96))"
"(let-values(((fold-var_99) fold-var_98))"
"(let-values(((fold-var_100)"
"(let-values()"
"(cons"
"(let-values() s_96)"
" fold-var_99))))"
"(values fold-var_100)))"
" fold-var_98))))"
"(for-loop_93 fold-var_97(unsafe-cdr lst_95))))"
" fold-var_94))))"
" for-loop_93)"
" null"
" lst_92))))"
"                      (list \"[common scopes]\"))))))"
"(if(null? strs_87)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_101) strs_87))"
"(begin"
"(if(list? lst_101)(void)(let-values()(in-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_103 lst_104)"
"(if(pair? lst_104)"
"(let-values(((str_105)(unsafe-car lst_104)))"
"(let-values(((fold-var_106)"
"(let-values(((fold-var_107) fold-var_103))"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"                                                                         (let-values () (string-append \"\\n  \" str_105))"
" fold-var_107))))"
"(values fold-var_108)))))"
"(for-loop_102 fold-var_106(unsafe-cdr lst_104))))"
" fold-var_103))))"
" for-loop_102)"
" null"
" lst_101))))))))))"
" (define-values (layer->string) (lambda (layer_109) (if (zero? layer_109) \"\" (format \" at layer ~a\" layer_109))))"
"(void)"
"(void)"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values(((tmp_8) sym_2))"
"(if(equal? tmp_8 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_8 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not"
"(let-values(((trigger-id1_9) trigger-id_3)((phase2_10) phase_5))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1 #f #f #f #f #f #f #f #f trigger-id1_9 phase2_10)"
"(resolve31.1 trigger-id1_9 phase2_10))))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_2"
"(let-values(((tmp_11) phase_5))"
"(if(equal? tmp_11 0)"
"                (let-values () \"\")"
"(if(equal? tmp_11 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 #f)"
"(if unbound?_7(if(not(eq?(syntax-e$1 s_1)(syntax-e$1 trigger-id_3))) s_1 #f) #f)"
" null"
"           (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) \"\")))))))"
"(void)"
"(void)"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values(((ids_8) ids5_3))"
"(let-values(((phase_9) phase6_4))"
"(let-values(((s_10) s7_5))"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
"            (let-values (((what_12) (if what2_2 what1_1 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values(((lst_17) l_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20)))"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_19))"
"(let-values(((fold-var_24)"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_14"
" phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(void)))))"
"(values fold-var_24)))))"
"(for-loop_18"
" fold-var_22"
"(unsafe-cdr lst_20))))"
" fold-var_19))))"
" for-loop_18)"
"(void)"
" lst_17)))"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(define-values"
"(unpack9.1$2)"
"(lambda(given-kws_25 given-args_26 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)"
"(let-values(((what2_32)(pair? given-kws_25)))"
"(let-values(((what1_33)(if what2_32(car given-args_26)(void))))"
"(check-no-duplicate-ids8.1 what1_33 what2_32 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)))))"
"(define-values"
"(check-no-duplicate-ids10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_34 given-argc_35)"
"(if(if(>= given-argc_35 5)(<= given-argc_35 6) #f)"
"(let-values(((l1_36) given-kws_34))"
"(let-values(((l1_37)(if(null? l1_36) l1_36(if(eq?(car l1_36) '#:what)(cdr l1_36) l1_36))))"
"(null? l1_37)))"
" #f))"
"(case-lambda"
"((given-kws_38 given-args_39 ids_40 phase_41 s_42)"
"(unpack9.1$2 given-kws_38 given-args_39 ids_40 phase_41 s_42 #f #f))"
"((given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48)"
"(unpack9.1$2 given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48 #t)))"
" null"
" '(#:what)"
"(let-values(((check-no-duplicate-ids_49)"
"(case-lambda"
"((ids_50 phase_51 s_52)(unpack9.1$2 null null ids_50 phase_51 s_52 #f #f))"
"((ids_53 phase_54 s_55 ht3_56)(unpack9.1$2 null null ids_53 phase_54 s_55 ht3_56 #t)))))"
" check-no-duplicate-ids_49)))"
"(void)"
"(void)"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(alt-reverse"
"(let-values(((lst_4) s_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(for-loop_5 fold-var_9(unsafe-cdr lst_7))))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_1))))"
"(void)"
"(void)"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-top-level-bind-scope"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 3 'self)"
"(make-struct-field-accessor -ref_4 4 'module-self)"
"(make-struct-field-accessor -ref_4 5 'full-module-name)"
"(make-struct-field-accessor -ref_4 6 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 7 'header))))"
"(define-values"
"(make-compile-context16.1)"
"(lambda(full-module-name7_56"
" full-module-name14_57"
" lazy-syntax-literals?8_58"
" lazy-syntax-literals?15_59"
" module-self6_60"
" module-self13_61"
" namespace2_62"
" namespace9_63"
" phase3_64"
" phase10_65"
" self5_66"
" self12_67"
" top-level-bind-scope4_68"
" top-level-bind-scope11_69)"
"(let-values(((namespace_70)(if namespace9_63 namespace2_62(1/current-namespace))))"
"(let-values(((phase_71)(if phase10_65 phase3_64(namespace-phase namespace_70))))"
"(let-values(((top-level-bind-scope_72)(if top-level-bind-scope11_69 top-level-bind-scope4_68 #f)))"
"(let-values(((self_73)(if self12_67 self5_66(namespace-mpi namespace_70))))"
"(let-values(((module-self_74)(if module-self13_61 module-self6_60 #f)))"
"(let-values(((full-module-name_75)(if full-module-name14_57 full-module-name7_56 #f)))"
"(let-values(((lazy-syntax-literals?_76)"
"(if lazy-syntax-literals?15_59 lazy-syntax-literals?8_58(if module-self_74 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_74(not full-module-name_75) #f)"
"                        (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_70"
" phase_71"
" top-level-bind-scope_72"
" self_73"
" module-self_74"
" full-module-name_75"
" lazy-syntax-literals?_76"
" #f))))))))))))"
"(define-values"
"(unpack17.1$2)"
"(lambda(given-kws_77 given-args_78)"
"(let-values(((full-module-name14_79)(if(pair? given-kws_77)(eq? '#:full-module-name(car given-kws_77)) #f)))"
"(let-values(((full-module-name7_80)(if full-module-name14_79(car given-args_78)(void)))"
"((given-kws_81)(if full-module-name14_79(cdr given-kws_77) given-kws_77))"
"((given-args_82)(if full-module-name14_79(cdr given-args_78) given-args_78)))"
"(let-values(((lazy-syntax-literals?15_83)"
"(if(pair? given-kws_81)(eq? '#:lazy-syntax-literals?(car given-kws_81)) #f)))"
"(let-values(((lazy-syntax-literals?8_84)(if lazy-syntax-literals?15_83(car given-args_82)(void)))"
"((given-kws_85)(if lazy-syntax-literals?15_83(cdr given-kws_81) given-kws_81))"
"((given-args_86)(if lazy-syntax-literals?15_83(cdr given-args_82) given-args_82)))"
"(let-values(((module-self13_87)(if(pair? given-kws_85)(eq? '#:module-self(car given-kws_85)) #f)))"
"(let-values(((module-self6_88)(if module-self13_87(car given-args_86)(void)))"
"((given-kws_89)(if module-self13_87(cdr given-kws_85) given-kws_85))"
"((given-args_90)(if module-self13_87(cdr given-args_86) given-args_86)))"
"(let-values(((namespace9_91)(if(pair? given-kws_89)(eq? '#:namespace(car given-kws_89)) #f)))"
"(let-values(((namespace2_92)(if namespace9_91(car given-args_90)(void)))"
"((given-kws_93)(if namespace9_91(cdr given-kws_89) given-kws_89))"
"((given-args_94)(if namespace9_91(cdr given-args_90) given-args_90)))"
"(let-values(((phase10_95)(if(pair? given-kws_93)(eq? '#:phase(car given-kws_93)) #f)))"
"(let-values(((phase3_96)(if phase10_95(car given-args_94)(void)))"
"((given-kws_97)(if phase10_95(cdr given-kws_93) given-kws_93))"
"((given-args_98)(if phase10_95(cdr given-args_94) given-args_94)))"
"(let-values(((self12_99)(if(pair? given-kws_97)(eq? '#:self(car given-kws_97)) #f)))"
"(let-values(((self5_100)(if self12_99(car given-args_98)(void)))"
"((given-kws_101)(if self12_99(cdr given-kws_97) given-kws_97))"
"((given-args_102)(if self12_99(cdr given-args_98) given-args_98)))"
"(let-values(((top-level-bind-scope11_103)(pair? given-kws_101)))"
"(let-values(((top-level-bind-scope4_104)"
"(if top-level-bind-scope11_103(car given-args_102)(void))))"
"(make-compile-context16.1"
" full-module-name7_80"
" full-module-name14_79"
" lazy-syntax-literals?8_84"
" lazy-syntax-literals?15_83"
" module-self6_88"
" module-self13_87"
" namespace2_92"
" namespace9_91"
" phase3_96"
" phase10_95"
" self5_100"
" self12_99"
" top-level-bind-scope4_104"
" top-level-bind-scope11_103)))))))))))))))))"
"(define-values"
"(make-compile-context18.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_105 given-argc_106)"
"(if(= given-argc_106 2)"
"(let-values(((l1_107) given-kws_105))"
"(let-values(((l1_108)"
"(if(null? l1_107) l1_107(if(eq?(car l1_107) '#:full-module-name)(cdr l1_107) l1_107))))"
"(let-values(((l1_109) l1_108))"
"(let-values(((l1_110)"
"(if(null? l1_109)"
" l1_109"
"(if(eq?(car l1_109) '#:lazy-syntax-literals?)(cdr l1_109) l1_109))))"
"(let-values(((l1_111) l1_110))"
"(let-values(((l1_112)"
"(if(null? l1_111) l1_111(if(eq?(car l1_111) '#:module-self)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)"
"(if(null? l1_113) l1_113(if(eq?(car l1_113) '#:namespace)(cdr l1_113) l1_113))))"
"(let-values(((l1_115) l1_114))"
"(let-values(((l1_116)"
"(if(null? l1_115) l1_115(if(eq?(car l1_115) '#:phase)(cdr l1_115) l1_115))))"
"(let-values(((l1_117) l1_116))"
"(let-values(((l1_118)"
"(if(null? l1_117)"
" l1_117"
"(if(eq?(car l1_117) '#:self)(cdr l1_117) l1_117))))"
"(let-values(((l1_119) l1_118))"
"(let-values(((l1_120)"
"(if(null? l1_119)"
" l1_119"
"(if(eq?(car l1_119) '#:top-level-bind-scope)(cdr l1_119) l1_119))))"
"(null? l1_120)))))))))))))))"
" #f))"
"(case-lambda((given-kws_121 given-args_122)(unpack17.1$2 given-kws_121 given-args_122)))"
" null"
" '(#:full-module-name #:lazy-syntax-literals? #:module-self #:namespace #:phase #:self #:top-level-bind-scope)"
"(let-values(((make-compile-context_123)(case-lambda(()(unpack17.1$2 null null))))) make-compile-context_123)))"
"(void)"
"(void)"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'normal)"
"(make-struct-field-accessor -ref_4 1 'fast))))"
"(define-values(make-module-path-index-intern-table)(lambda()(mpi-intern-table1.1(make-hash)(make-hasheq))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_26 mpi_27)"
"(let-values(((or-part_28)(hash-ref(mpi-intern-table-fast t_26) mpi_27 #f)))"
"(if or-part_28"
" or-part_28"
"(let-values(((name_29 base_30)(1/module-path-index-split mpi_27)))"
"(if(not name_29)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 mpi_27) mpi_27))"
"(let-values()"
"(let-values(((interned-base_31)(if base_30(intern-module-path-index! t_26 base_30) #f)))"
"(let-values(((at-name_32)"
"(let-values(((or-part_34)(hash-ref(mpi-intern-table-normal t_26) name_29 #f)))"
"(if or-part_34"
" or-part_34"
"(let-values(((at-name_35)(make-hasheq)))"
"(begin"
"(hash-set!(mpi-intern-table-normal t_26) name_29 at-name_35)"
" at-name_35))))))"
"(let-values(((i-mpi_33)"
"(let-values(((or-part_36)(hash-ref at-name_32 interned-base_31 #f)))"
"(if or-part_36"
" or-part_36"
"(let-values(((mpi_37)"
"(if(eq? base_30 interned-base_31)"
" mpi_27"
"(let-values(((the-struct_38) mpi_27))"
"(if(1/module-path-index? the-struct_38)"
"(let-values(((base3_39) interned-base_31))"
"(module-path-index2.1"
"(module-path-index-path the-struct_38)"
" base3_39"
"(module-path-index-resolved the-struct_38)"
"(module-path-index-shift-cache the-struct_38)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"module-path-index?\""
" the-struct_38))))))"
"(begin(hash-set! at-name_32 interned-base_31 mpi_37) mpi_37))))))"
"(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 i-mpi_33) i-mpi_33)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'positions)"
"(make-struct-field-accessor -ref_4 1 'intern))))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_26 mpi_27)"
"(let-values(((pos_28)(add-module-path-index!/pos mpis_26 mpi_27)))"
"(if pos_28(list 'vector-ref mpi-vector-id pos_28) #f))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_29 mpi_30)"
"(if(not mpi_30)"
"(let-values() #f)"
"(if mpi_30"
"(let-values()"
"(let-values(((mpi_31)(intern-module-path-index!(module-path-index-table-intern mpis_29) mpi_30))"
"((positions_32)(module-path-index-table-positions mpis_29)))"
"(let-values(((or-part_33)(hash-ref positions_32 mpi_31 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((pos_34)(hash-count positions_32)))"
"(begin(hash-set! positions_32 mpi_31 pos_34) pos_34))))))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_35)"
"(let-values(((positions_36)(module-path-index-table-positions mpis_35)))"
"(let-values(((gen-order_37)(make-hasheqv)))"
"(let-values(((rev-positions_38)"
"(let-values(((ht_41) positions_36))"
"(begin"
"(if((lambda(ht_42)(hash? ht_42)) ht_41)(void)(let-values()(default-in-hash ht_41)))"
"((letrec-values(((for-loop_43)"
"(lambda(table_44 i_45)"
"(if i_45"
"(let-values(((k_46 v_47)(hash-iterate-key+value ht_41 i_45)))"
"(let-values(((table_48)"
"(let-values(((table_49) table_44))"
"(let-values(((table_50)"
"(let-values()"
"(let-values(((key_51 val_52)"
"(let-values()"
"(values v_47 k_46))))"
"(hash-set"
" table_49"
" key_51"
" val_52)))))"
"(values table_50)))))"
"(for-loop_43 table_48(hash-iterate-next ht_41 i_45))))"
" table_44))))"
" for-loop_43)"
" '#hasheqv()"
"(hash-iterate-first ht_41))))))"
"(let-values((()"
"(begin"
"(let-values(((start_53) 0)((end_54)(hash-count rev-positions_38))((inc_55) 1))"
"(begin"
"(if(if(real? start_53)(if(real? end_54)(real? inc_55) #f) #f)"
"(void)"
"(let-values()(in-range start_53 end_54 inc_55)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57 pos_58)"
"(if(< pos_58 end_54)"
"(let-values(((i_59) pos_58))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_57))"
"(let-values(((fold-var_62)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_63)"
"(hash-ref"
" rev-positions_38"
" i_59)))"
"((letrec-values(((loop_64)"
"(lambda(mpi_65)"
"(if(hash-ref"
" gen-order_37"
" mpi_65"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_66"
" base_67)"
"(1/module-path-index-split"
" mpi_65)))"
"(begin"
"(if base_67"
"(let-values()"
"(loop_64"
" base_67))"
"(void))"
"(hash-set!"
" gen-order_37"
" mpi_65"
"(hash-count"
" gen-order_37)))))))))"
" loop_64)"
" mpi_63)))"
"(void)))))"
"(values fold-var_62)))))"
"(for-loop_56 fold-var_60(+ pos_58 inc_55))))"
" fold-var_57))))"
" for-loop_56)"
"(void)"
" start_53)))"
"(values))))"
"(let-values(((rev-gen-order_39)"
"(let-values(((ht_68) gen-order_37))"
"(begin"
"(if((lambda(ht_69)(hash? ht_69)) ht_68)(void)(let-values()(default-in-hash ht_68)))"
"((letrec-values(((for-loop_70)"
"(lambda(table_71 i_72)"
"(if i_72"
"(let-values(((k_73 v_74)(hash-iterate-key+value ht_68 i_72)))"
"(let-values(((table_75)"
"(let-values(((table_76) table_71))"
"(let-values(((table_77)"
"(let-values()"
"(let-values(((key_78 val_79)"
"(let-values()"
"(values"
" v_74"
" k_73))))"
"(hash-set"
" table_76"
" key_78"
" val_79)))))"
"(values table_77)))))"
"(for-loop_70 table_75(hash-iterate-next ht_68 i_72))))"
" table_71))))"
" for-loop_70)"
" '#hasheqv()"
"(hash-iterate-first ht_68))))))"
"(let-values(((gens_40)"
"(let-values(((len_80)(hash-count gen-order_37)))"
"(begin"
"(if(exact-nonnegative-integer? len_80)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_80)))"
"(let-values(((v_81)(make-vector len_80 0)))"
"(begin"
"(if(zero? len_80)"
"(void)"
"(let-values()"
"(let-values(((start_82) 0)((end_83)(hash-count gen-order_37))((inc_84) 1))"
"(begin"
"(if(if(real? start_82)(if(real? end_83)(real? inc_84) #f) #f)"
"(void)"
"(let-values()(in-range start_82 end_83 inc_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(i_86 pos_87)"
"(if(< pos_87 end_83)"
"(let-values(((i_88) pos_87))"
"(let-values(((i_89)"
"(let-values(((i_90) i_86))"
"(let-values(((i_91)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_81"
" i_90"
"(let-values()"
"(let-values(((mpi_92)"
"(hash-ref"
" rev-gen-order_39"
" i_88)))"
"(let-values(((path_93"
" base_94)"
"(1/module-path-index-split"
" mpi_92)))"
"(if(top-level-module-path-index?"
" mpi_92)"
"(let-values()"
" 'top)"
"(if(not"
" path_93)"
"(let-values()"
"(box"
"(let-values(((or-part_95)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_92))))"
"(if or-part_95"
" or-part_95"
" 'self))))"
"(if(not"
" base_94)"
"(let-values()"
"(vector"
" path_93))"
"(if base_94"
"(let-values()"
"(vector"
" path_93"
"(hash-ref"
" gen-order_37"
" base_94)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_90)))))"
"(values i_91)))))"
"(if(not"
"((lambda x_96(unsafe-fx= i_89 len_80))"
" i_88))"
"(for-loop_85 i_89(+ pos_87 inc_84))"
" i_89)))"
" i_86))))"
" for-loop_85)"
" 0"
" start_82)))))"
" v_81))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_40)"
"(list"
" 'quote"
"(let-values(((vec_97 i_98)"
"(let-values(((start_99) 0)((end_100)(hash-count rev-positions_38))((inc_101) 1))"
"(begin"
"(if(if(real? start_99)(if(real? end_100)(real? inc_101) #f) #f)"
"(void)"
"(let-values()(in-range start_99 end_100 inc_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(vec_103 i_104 pos_105)"
"(if(< pos_105 end_100)"
"(let-values(((i_106) pos_105))"
"(let-values(((vec_107 i_108)"
"(let-values(((vec_109) vec_103)"
"((i_110) i_104))"
"(let-values(((vec_111 i_112)"
"(let-values()"
"(let-values(((new-vec_113)"
"(if(eq?"
" i_110"
"(unsafe-vector*-length"
" vec_109))"
"(grow-vector"
" vec_109)"
" vec_109)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_113"
" i_110"
"(let-values()"
"(hash-ref"
" gen-order_37"
"(hash-ref"
" rev-positions_38"
" i_106))))"
"(values"
" new-vec_113"
"(unsafe-fx+"
" i_110"
" 1)))))))"
"(values vec_111 i_112)))))"
"(for-loop_102 vec_107 i_108(+ pos_105 inc_101))))"
"(values vec_103 i_104)))))"
" for-loop_102)"
"(make-vector 16)"
" 0"
" start_99)))))"
"(shrink-vector vec_97 i_98))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_114 order-vec_115)"
"(let-values(((gen_116)(make-vector(vector-length gen-vec_114) #f)))"
"(begin"
"(let-values(((vec_117 len_118)"
"(let-values(((vec_120) gen-vec_114))"
"(begin"
"(if(vector? vec_120)(void)(let-values()(in-vector vec_120)))"
"(values vec_120(unsafe-vector-length vec_120)))))"
"((start_119) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_119)(void)(let-values()(in-naturals start_119)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_122 pos_123 pos_124)"
"(if(if(unsafe-fx< pos_123 len_118) #t #f)"
"(let-values(((d_125)(unsafe-vector-ref vec_117 pos_123))((i_126) pos_124))"
"(let-values(((fold-var_127)"
"(let-values(((fold-var_128) fold-var_122))"
"(let-values(((fold-var_129)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_116"
" i_126"
"(if(eq? d_125 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_125)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_125)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector-ref d_125 0)"
"(if(>(vector-length d_125) 1)"
"(vector-ref"
" gen_116"
"(vector-ref d_125 1))"
" #f)))))))"
"(void)))))"
"(values fold-var_129)))))"
"(for-loop_121 fold-var_127(unsafe-fx+ 1 pos_123)(+ pos_124 1))))"
" fold-var_122))))"
" for-loop_121)"
"(void)"
" 0"
" start_119)))"
"(let-values(((len_130)(vector-length order-vec_115)))"
"(begin"
"(if(exact-nonnegative-integer? len_130)"
"(void)"
"              (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_130)))"
"(let-values(((v_131)(make-vector len_130 0)))"
"(begin"
"(if(zero? len_130)"
"(void)"
"(let-values()"
"(let-values(((vec_132 len_133)"
"(let-values(((vec_134) order-vec_115))"
"(begin"
"(if(vector? vec_134)(void)(let-values()(in-vector vec_134)))"
"(values vec_134(unsafe-vector-length vec_134))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_135)"
"(lambda(i_136 pos_137)"
"(if(unsafe-fx< pos_137 len_133)"
"(let-values(((p_138)(unsafe-vector-ref vec_132 pos_137)))"
"(let-values(((i_139)"
"(let-values(((i_140) i_136))"
"(let-values(((i_141)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_131"
" i_140"
"(let-values()"
"(vector-ref gen_116 p_138)))"
"(unsafe-fx+ 1 i_140)))))"
"(values i_141)))))"
"(if(not((lambda x_142(unsafe-fx= i_139 len_130)) p_138))"
"(for-loop_135 i_139(unsafe-fx+ 1 pos_137))"
" i_139)))"
" i_136))))"
" for-loop_135)"
" 0"
" 0)))))"
" v_131))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_143)"
"(let-values(((positions_144)(module-path-index-table-positions mpis_143)))"
"(let-values(((vec_145)(make-vector(hash-count positions_144) #f)))"
"(begin"
"(let-values(((ht_146) positions_144))"
"(begin"
"(if((lambda(ht_147)(hash? ht_147)) ht_146)(void)(let-values()(default-in-hash ht_146)))"
"((letrec-values(((for-loop_148)"
"(lambda(fold-var_149 i_150)"
"(if i_150"
"(let-values(((mpi_151 pos_152)(hash-iterate-key+value ht_146 i_150)))"
"(let-values(((fold-var_153)"
"(let-values(((fold-var_154) fold-var_149))"
"(let-values(((fold-var_155)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_145 pos_152 mpi_151))"
"(void)))))"
"(values fold-var_155)))))"
"(for-loop_148 fold-var_153(hash-iterate-next ht_146 i_150))))"
" fold-var_149))))"
" for-loop_148)"
"(void)"
"(hash-iterate-first ht_146))))"
" vec_145)))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_166 mpis_167)"
"(alt-reverse"
"(let-values(((lst_168) mus_166))"
"(begin"
"(if(list? lst_168)(void)(let-values()(in-list lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(fold-var_170 lst_171)"
"(if(pair? lst_171)"
"(let-values(((mu_172)(unsafe-car lst_171)))"
"(let-values(((fold-var_173)"
"(let-values(((fold-var_174) fold-var_170))"
"(let-values(((fold-var_175)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_167"
"(module-use-module mu_172))"
"(module-use-phase mu_172)))"
" fold-var_174))))"
"(values fold-var_175)))))"
"(for-loop_169 fold-var_173(unsafe-cdr lst_171))))"
" fold-var_170))))"
" for-loop_169)"
" null"
" lst_168))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_176)"
"(let-values(((or-part_177)(null? v_176)))"
"(if or-part_177"
" or-part_177"
"(let-values(((or-part_178)(boolean? v_176)))"
"(if or-part_178"
" or-part_178"
"(let-values(((or-part_179)"
"(if(fixnum? v_176)(if(< v_176(sub1(expt 2 30)))(> v_176(-(expt 2 30))) #f) #f)))"
"(if or-part_179"
" or-part_179"
"(let-values(((or-part_180)(symbol? v_176)))"
"(if or-part_180"
" or-part_180"
"(let-values(((or-part_181)(char? v_176)))(if or-part_181 or-part_181(keyword? v_176)))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_182 mpis_183)"
"(let-values(((phases-in-order_184)"
"(let-values(((temp10_185)(hash-keys phase-to-link-module-uses_182))((<11_186) <))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp10_185 <11_186)"
"(sort9.1 temp10_185 <11_186)))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_187) phases-in-order_184))"
"(begin"
"(if(list? lst_187)(void)(let-values()(in-list lst_187)))"
"((letrec-values(((for-loop_188)"
"(lambda(fold-var_189 lst_190)"
"(if(pair? lst_190)"
"(let-values(((phase_191)(unsafe-car lst_190)))"
"(let-values(((fold-var_192)"
"(let-values(((fold-var_193) fold-var_189))"
"(let-values(((fold-var_194)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_191"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_182"
" phase_191)"
" mpis_183))))"
" fold-var_193))))"
"(values fold-var_194)))))"
"(for-loop_188 fold-var_192(unsafe-cdr lst_190))))"
" fold-var_189))))"
" for-loop_188)"
" null"
" lst_187)))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_195 syntax-support?3_196 v4_197 mpis5_198)"
"(let-values(((v_199) v4_197))"
"(let-values(((mpis_200) mpis5_198))"
"(let-values(((syntax-support?_201)(if syntax-support?3_196 syntax-support?2_195 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_202)(find-reachable-scopes v_199)))"
"(let-values(((state_203)(make-serialize-state reachable-scopes_202)))"
"(let-values(((mutables_204)(make-hasheq)))"
"(let-values(((objs_205)(make-hasheq)))"
"(let-values(((shares_206)(make-hasheq)))"
"(let-values(((obj-step_207) 0))"
"(let-values(((frontier_208) null))"
"(letrec-values(((add-frontier!_209)"
"(case-lambda"
"((v_228)(set! frontier_208(cons v_228 frontier_208)))"
"((kind_229 v_230)(add-frontier!_209 v_230)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_231)"
"(lambda(v_232)"
"(begin"
"((letrec-values(((loop_233)"
"(lambda(v_234)"
"(if(let-values(((or-part_235)"
"(interned-literal?"
" v_234)))"
"(if or-part_235"
" or-part_235"
"(1/module-path-index?"
" v_234)))"
"(let-values()(void))"
"(if(hash-ref objs_205 v_234 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_204"
" v_234"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_206"
" v_234"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_234)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"((serialize-fill!-ref"
" v_234)"
" v_234"
" add-frontier!_209"
" state_203)))"
"(if(serialize? v_234)"
"(let-values()"
"((serialize-ref"
" v_234)"
" v_234"
"(case-lambda"
"((v_236)"
"(loop_233 v_236))"
"((kind_237 v_238)"
"(loop_233"
" v_238)))"
" state_203))"
"(if(pair? v_234)"
"(let-values()"
"(begin"
"(loop_233"
"(car v_234))"
"(loop_233"
"(cdr v_234))))"
"(if(vector? v_234)"
"(let-values()"
"(if(let-values(((or-part_239)"
"(immutable?"
" v_234)))"
"(if or-part_239"
" or-part_239"
"(zero?"
"(vector-length"
" v_234))))"
"(let-values(((vec_240"
" len_241)"
"(let-values(((vec_242)"
" v_234))"
"(begin"
"(if(vector?"
" vec_242)"
"(void)"
"(let-values()"
"(in-vector"
" vec_242)))"
"(values"
" vec_242"
"(unsafe-vector-length"
" vec_242))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_243)"
"(lambda(fold-var_244"
" pos_245)"
"(if(unsafe-fx<"
" pos_245"
" len_241)"
"(let-values(((e_246)"
"(unsafe-vector-ref"
" vec_240"
" pos_245)))"
"(let-values(((fold-var_247)"
"(let-values(((fold-var_248)"
" fold-var_244))"
"(let-values(((fold-var_249)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_246))"
"(void)))))"
"(values"
" fold-var_249)))))"
"(for-loop_243"
" fold-var_247"
"(unsafe-fx+"
" 1"
" pos_245))))"
" fold-var_244))))"
" for-loop_243)"
"(void)"
" 0)))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(let-values(((vec_250"
" len_251)"
"(let-values(((vec_252)"
" v_234))"
"(begin"
"(if(vector?"
" vec_252)"
"(void)"
"(let-values()"
"(in-vector"
" vec_252)))"
"(values"
" vec_252"
"(unsafe-vector-length"
" vec_252))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_253)"
"(lambda(fold-var_254"
" pos_255)"
"(if(unsafe-fx<"
" pos_255"
" len_251)"
"(let-values(((e_256)"
"(unsafe-vector-ref"
" vec_250"
" pos_255)))"
"(let-values(((fold-var_257)"
"(let-values(((fold-var_258)"
" fold-var_254))"
"(let-values(((fold-var_259)"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_209"
" e_256))"
"(void)))))"
"(values"
" fold-var_259)))))"
"(for-loop_253"
" fold-var_257"
"(unsafe-fx+"
" 1"
" pos_255))))"
" fold-var_254))))"
" for-loop_253)"
"(void)"
" 0))))))"
"(if(box? v_234)"
"(let-values()"
"(if(immutable?"
" v_234)"
"(loop_233"
"(unbox"
" v_234))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(add-frontier!_209"
"(unbox"
" v_234)))))"
"(if(hash?"
" v_234)"
"(let-values()"
"(if(immutable?"
" v_234)"
"(let-values(((lst_260)"
"(sorted-hash-keys"
" v_234)))"
"(begin"
"(if(list?"
" lst_260)"
"(void)"
"(let-values()"
"(in-list"
" lst_260)))"
"((letrec-values(((for-loop_261)"
"(lambda(fold-var_262"
" lst_263)"
"(if(pair?"
" lst_263)"
"(let-values(((k_264)"
"(unsafe-car"
" lst_263)))"
"(let-values(((fold-var_265)"
"(let-values(((fold-var_266)"
" fold-var_262))"
"(let-values(((fold-var_267)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_233"
" k_264)"
"(loop_233"
"(hash-ref"
" v_234"
" k_264))))"
"(void)))))"
"(values"
" fold-var_267)))))"
"(for-loop_261"
" fold-var_265"
"(unsafe-cdr"
" lst_263))))"
" fold-var_262))))"
" for-loop_261)"
"(void)"
" lst_260)))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(let-values(((lst_268)"
"(sorted-hash-keys"
" v_234)))"
"(begin"
"(if(list?"
" lst_268)"
"(void)"
"(let-values()"
"(in-list"
" lst_268)))"
"((letrec-values(((for-loop_269)"
"(lambda(fold-var_270"
" lst_271)"
"(if(pair?"
" lst_271)"
"(let-values(((k_272)"
"(unsafe-car"
" lst_271)))"
"(let-values(((fold-var_273)"
"(let-values(((fold-var_274)"
" fold-var_270))"
"(let-values(((fold-var_275)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_209"
" k_272)"
"(add-frontier!_209"
"(hash-ref"
" v_234"
" k_272))))"
"(void)))))"
"(values"
" fold-var_275)))))"
"(for-loop_269"
" fold-var_273"
"(unsafe-cdr"
" lst_271))))"
" fold-var_270))))"
" for-loop_269)"
"(void)"
" lst_268))))))"
"(if(prefab-struct-key"
" v_234)"
"(let-values()"
"(let-values(((v*_276"
" start*_277"
" stop*_278"
" step*_279)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                             \"vector\""
"(lambda(x_280)"
"(vector?"
" x_280))"
"(lambda(x_281)"
"(unsafe-vector-length"
" x_281))"
"(struct->vector"
" v_234)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_282)"
"(lambda(fold-var_283"
" idx_284)"
"(if(unsafe-fx<"
" idx_284"
" stop*_278)"
"(let-values(((e_285)"
"(unsafe-vector-ref"
" v*_276"
" idx_284)))"
"(let-values(((fold-var_286)"
"(let-values(((fold-var_287)"
" fold-var_283))"
"(let-values(((fold-var_288)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_285))"
"(void)))))"
"(values"
" fold-var_288)))))"
"(for-loop_282"
" fold-var_286"
"(unsafe-fx+"
" idx_284"
" 1))))"
" fold-var_283))))"
" for-loop_282)"
"(void)"
" start*_277))))"
"(if(srcloc?"
" v_234)"
"(let-values()"
"(let-values(((v*_289"
" start*_290"
" stop*_291"
" step*_292)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_293)"
"(vector?"
" x_293))"
"(lambda(x_294)"
"(unsafe-vector-length"
" x_294))"
"(struct->vector"
" v_234)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_295)"
"(lambda(fold-var_296"
" idx_297)"
"(if(unsafe-fx<"
" idx_297"
" stop*_291)"
"(let-values(((e_298)"
"(unsafe-vector-ref"
" v*_289"
" idx_297)))"
"(let-values(((fold-var_299)"
"(let-values(((fold-var_300)"
" fold-var_296))"
"(let-values(((fold-var_301)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_298))"
"(void)))))"
"(values"
" fold-var_301)))))"
"(for-loop_295"
" fold-var_299"
"(unsafe-fx+"
" idx_297"
" 1))))"
" fold-var_296))))"
" for-loop_295)"
"(void)"
" start*_290))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_205"
" v_234"
" obj-step_207)"
"(set! obj-step_207"
"(add1"
" obj-step_207)))))))))"
" loop_233)"
" v_232)"
"(if(null? frontier_208)"
"(void)"
"(let-values()"
"(let-values(((l_302) frontier_208))"
"(begin"
"(set! frontier_208 null)"
"(let-values(((lst_303) l_302))"
"(begin"
"(if(list? lst_303)"
"(void)"
"(let-values()(in-list lst_303)))"
"((letrec-values(((for-loop_304)"
"(lambda(fold-var_305"
" lst_306)"
"(if(pair? lst_306)"
"(let-values(((v_307)"
"(unsafe-car"
" lst_306)))"
"(let-values(((fold-var_308)"
"(let-values(((fold-var_309)"
" fold-var_305))"
"(let-values(((fold-var_310)"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_231"
" v_307))"
"(void)))))"
"(values"
" fold-var_310)))))"
"(for-loop_304"
" fold-var_308"
"(unsafe-cdr"
" lst_306))))"
" fold-var_305))))"
" for-loop_304)"
"(void)"
" lst_303)))))))))))"
" frontier-loop_231)"
" v_199)"
"(values))))"
"(let-values(((num-mutables_210)(hash-count mutables_204)))"
"(let-values(((share-step-positions_211)"
"(let-values(((share-steps_311)"
"(alt-reverse"
"(let-values(((ht_312) shares_206))"
"(begin"
"(if((lambda(ht_313)(hash? ht_313)) ht_312)"
"(void)"
"(let-values()(default-in-hash-keys ht_312)))"
"((letrec-values(((for-loop_314)"
"(lambda(fold-var_315 i_316)"
"(if i_316"
"(let-values(((obj_317)"
"(hash-iterate-key"
" ht_312"
" i_316)))"
"(let-values(((fold-var_318)"
"(let-values(((fold-var_319)"
" fold-var_315))"
"(let-values(((fold-var_320)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_205"
" obj_317))"
" fold-var_319))))"
"(values"
" fold-var_320)))))"
"(for-loop_314"
" fold-var_318"
"(hash-iterate-next"
" ht_312"
" i_316))))"
" fold-var_315))))"
" for-loop_314)"
" null"
"(hash-iterate-first ht_312)))))))"
"(let-values(((lst_321)"
"(let-values(((share-steps12_323) share-steps_311)"
"((<13_324) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f share-steps12_323 <13_324)"
"(sort9.1 share-steps12_323 <13_324))))"
"((start_322) num-mutables_210))"
"(begin"
"(if(list? lst_321)(void)(let-values()(in-list lst_321)))"
"(if(exact-nonnegative-integer? start_322)"
"(void)"
"(let-values()(in-naturals start_322)))"
"((letrec-values(((for-loop_325)"
"(lambda(table_326 lst_327 pos_328)"
"(if(if(pair? lst_327) #t #f)"
"(let-values(((step_329)(unsafe-car lst_327))"
"((pos_330) pos_328))"
"(let-values(((table_331)"
"(let-values(((table_332)"
" table_326))"
"(let-values(((table_333)"
"(let-values()"
"(let-values(((key_334"
" val_335)"
"(let-values()"
"(values"
" step_329"
" pos_330))))"
"(hash-set"
" table_332"
" key_334"
" val_335)))))"
"(values table_333)))))"
"(for-loop_325"
" table_331"
"(unsafe-cdr lst_327)"
"(+ pos_328 1))))"
" table_326))))"
" for-loop_325)"
" '#hasheqv()"
" lst_321"
" start_322))))))"
"(let-values(((stream_212) null))"
"(let-values(((stream-size_213) 0))"
"(let-values(((next-push-position_214)(lambda() stream-size_213)))"
"(let-values(((quoted?_215)"
"(lambda(pos_336)"
"(let-values(((v_337)"
"(list-ref"
" stream_212"
"(- stream-size_213(add1 pos_336)))))"
"(let-values(((or-part_338)(not(keyword? v_337))))"
"(if or-part_338 or-part_338(eq? '#:quote v_337)))))))"
"(let-values(((ser-reset!_216)"
"(lambda(pos_339)"
"(begin"
"(set! stream_212"
"(list-tail stream_212(- stream-size_213 pos_339)))"
"(set! stream-size_213 pos_339)))))"
"(let-values(((reap-stream!_217)"
"(lambda()"
"(begin0"
"(list->vector(alt-reverse stream_212))"
"(set! stream_212 null)"
"(set! stream-size_213 0)))))"
"(letrec-values(((ser-push!_218)"
"(case-lambda"
"((v_340)"
"(if(hash-ref shares_206 v_340 #f)"
"(let-values()"
"(let-values(((n_341)"
"(hash-ref"
" share-step-positions_211"
"(hash-ref objs_205 v_340))))"
"(begin"
"(ser-push!_218 'tag '#:ref)"
"(ser-push!_218 'exact n_341))))"
"(let-values(((c22907_342)"
"(hash-ref mutables_204 v_340 #f)))"
"(if c22907_342"
"((lambda(n_343)"
"(begin"
"(ser-push!_218 'tag '#:ref)"
"(ser-push!_218 'exact n_343)))"
" c22907_342)"
"(let-values()(ser-push-encoded!_219 v_340))))))"
"((kind_344 v_345)"
"(let-values(((tmp_346) kind_344))"
"(if(equal? tmp_346 'exact)"
"(let-values()"
"(begin"
"(set! stream_212(cons v_345 stream_212))"
"(set! stream-size_213(add1 stream-size_213))))"
"(if(equal? tmp_346 'tag)"
"(let-values()(ser-push!_218 'exact v_345))"
"(if(equal? tmp_346 'reference)"
"(let-values()"
"(if(hash-ref shares_206 v_345 #f)"
"(let-values()"
"(let-values(((n_347)"
"(hash-ref"
" share-step-positions_211"
"(hash-ref"
" objs_205"
" v_345))))"
"(ser-push!_218 'exact n_347)))"
"(let-values(((c22913_348)"
"(hash-ref"
" mutables_204"
" v_345"
" #f)))"
"(if c22913_348"
"((lambda(n_349)"
"(ser-push!_218 'exact n_349))"
" c22913_348)"
"(let-values()"
"(ser-push!_218 v_345))))))"
"(let-values()(ser-push!_218 v_345)))))))))"
"((ser-push-encoded!_219)"
"(lambda(v_350)"
"(if(keyword? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:quote)"
"(ser-push!_218 'exact v_350)))"
"(if(1/module-path-index? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:mpi)"
"(ser-push!_218"
" 'exact"
"(add-module-path-index!/pos mpis_200 v_350))))"
"(if(serialize? v_350)"
"(let-values()"
"((serialize-ref v_350)"
" v_350"
" ser-push!_218"
" state_203))"
"(if(if(list? v_350)"
"(if(pair? v_350)(pair?(cdr v_350)) #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_351)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(length v_350))"
"(values))))"
"(let-values(((all-quoted?_352)"
"(let-values(((lst_353)"
" v_350))"
"(begin"
"(if(list? lst_353)"
"(void)"
"(let-values()"
"(in-list"
" lst_353)))"
"((letrec-values(((for-loop_354)"
"(lambda(all-quoted?_355"
" lst_356)"
"(if(pair?"
" lst_356)"
"(let-values(((i_357)"
"(unsafe-car"
" lst_356)))"
"(let-values(((all-quoted?_358)"
"(let-values(((all-quoted?_359)"
" all-quoted?_355))"
"(let-values(((all-quoted?_360)"
"(let-values()"
"(let-values(((i-pos_361)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_357)"
"(if all-quoted?_359"
"(quoted?_215"
" i-pos_361)"
" #f))))))"
"(values"
" all-quoted?_360)))))"
"(for-loop_354"
" all-quoted?_358"
"(unsafe-cdr"
" lst_356))))"
" all-quoted?_355))))"
" for-loop_354)"
" #t"
" lst_353)))))"
"(if all-quoted?_352"
"(let-values()"
"(begin"
"(ser-reset!_216 start-pos_351)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218 'exact v_350)))"
"(void)))))))"
"(if(pair? v_350)"
"(let-values()"
"(let-values(((start-pos_362)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_363)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
"(car v_350))"
"(values))))"
"(let-values(((d-pos_364)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218(cdr v_350))"
"(if(if(quoted?_215 a-pos_363)"
"(quoted?_215 d-pos_364)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_362)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
"(if(box? v_350)"
"(let-values()"
"(let-values(((start-pos_365)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_366)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218(unbox v_350))"
"(if(quoted?_215 v-pos_366)"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_365)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))"
"(if(vector? v_350)"
"(let-values()"
"(let-values(((start-pos_367)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(vector-length"
" v_350))"
"(values))))"
"(let-values(((all-quoted?_368)"
"(let-values(((vec_369"
" len_370)"
"(let-values(((vec_371)"
" v_350))"
"(begin"
"(if(vector?"
" vec_371)"
"(void)"
"(let-values()"
"(in-vector"
" vec_371)))"
"(values"
" vec_371"
"(unsafe-vector-length"
" vec_371))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_372)"
"(lambda(all-quoted?_373"
" pos_374)"
"(if(unsafe-fx<"
" pos_374"
" len_370)"
"(let-values(((i_375)"
"(unsafe-vector-ref"
" vec_369"
" pos_374)))"
"(let-values(((all-quoted?_376)"
"(let-values(((all-quoted?_377)"
" all-quoted?_373))"
"(let-values(((all-quoted?_378)"
"(let-values()"
"(let-values(((i-pos_379)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_375)"
"(if all-quoted?_377"
"(quoted?_215"
" i-pos_379)"
" #f))))))"
"(values"
" all-quoted?_378)))))"
"(for-loop_372"
" all-quoted?_376"
"(unsafe-fx+"
" 1"
" pos_374))))"
" all-quoted?_373))))"
" for-loop_372)"
" #t"
" 0)))))"
"(if all-quoted?_368"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_367)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))"
"(if(hash? v_350)"
"(let-values()"
"(let-values(((start-pos_380)"
"(next-push-position_214)))"
"(let-values(((as-set?_381)"
"(let-values(((ht_384)"
" v_350))"
"(begin"
"(if((lambda(ht_385)"
"(hash?"
" ht_385))"
" ht_384)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_384)))"
"((letrec-values(((for-loop_386)"
"(lambda(result_387"
" i_388)"
"(if i_388"
"(let-values(((val_389)"
"(hash-iterate-value"
" ht_384"
" i_388)))"
"(let-values(((result_390)"
"(let-values(((result_391)"
" result_387))"
"(let-values(((result_392)"
"(let-values()"
"(let-values()"
"(eq?"
" val_389"
" #t)))))"
"(values"
" result_392)))))"
"(if(not"
"((lambda x_393"
"(not"
" result_390))"
" val_389))"
"(for-loop_386"
" result_390"
"(hash-iterate-next"
" ht_384"
" i_388))"
" result_390)))"
" result_387))))"
" for-loop_386)"
" #t"
"(hash-iterate-first"
" ht_384))))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
"(if as-set?_381"
"(if(hash-eq?"
" v_350)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_350)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_350)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_350)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(hash-count"
" v_350))"
"(values))))"
"(let-values(((ks_382)"
"(sorted-hash-keys"
" v_350)))"
"(let-values(((all-quoted?_383)"
"(let-values(((lst_394)"
" ks_382))"
"(begin"
"(if(list?"
" lst_394)"
"(void)"
"(let-values()"
"(in-list"
" lst_394)))"
"((letrec-values(((for-loop_395)"
"(lambda(all-quoted?_396"
" lst_397)"
"(if(pair?"
" lst_397)"
"(let-values(((k_398)"
"(unsafe-car"
" lst_397)))"
"(let-values(((all-quoted?_399)"
"(let-values(((all-quoted?_400)"
" all-quoted?_396))"
"(let-values(((all-quoted?_401)"
"(let-values()"
"(let-values(((k-pos_402)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" k_398)"
"(values))))"
"(let-values(((v-pos_403)"
"(next-push-position_214)))"
"(begin"
"(if as-set?_381"
"(void)"
"(let-values()"
"(ser-push!_218"
"(hash-ref"
" v_350"
" k_398))))"
"(if all-quoted?_400"
"(if(quoted?_215"
" k-pos_402)"
"(let-values(((or-part_404)"
" as-set?_381))"
"(if or-part_404"
" or-part_404"
"(quoted?_215"
" v-pos_403)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_401)))))"
"(for-loop_395"
" all-quoted?_399"
"(unsafe-cdr"
" lst_397))))"
" all-quoted?_396))))"
" for-loop_395)"
" #t"
" lst_394)))))"
"(if all-quoted?_383"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_380)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
"(let-values(((c22918_405)"
"(prefab-struct-key"
" v_350)))"
"(if c22918_405"
"((lambda(k_406)"
"(let-values(((vec_407)"
"(struct->vector"
" v_350)))"
"(let-values(((start-pos_408)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
" k_406)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(sub1"
"(vector-length"
" vec_407)))"
"(values))))"
"(let-values(((all-quoted?_409)"
"(let-values(((v*_410"
" start*_411"
" stop*_412"
" step*_413)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_414)"
"(vector?"
" x_414))"
"(lambda(x_415)"
"(unsafe-vector-length"
" x_415))"
" vec_407"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_416)"
"(lambda(all-quoted?_417"
" idx_418)"
"(if(unsafe-fx<"
" idx_418"
" stop*_412)"
"(let-values(((i_419)"
"(unsafe-vector-ref"
" v*_410"
" idx_418)))"
"(let-values(((all-quoted?_420)"
"(let-values(((all-quoted?_421)"
" all-quoted?_417))"
"(let-values(((all-quoted?_422)"
"(let-values()"
"(let-values(((i-pos_423)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_419)"
"(if all-quoted?_421"
"(quoted?_215"
" i-pos_423)"
" #f))))))"
"(values"
" all-quoted?_422)))))"
"(for-loop_416"
" all-quoted?_420"
"(unsafe-fx+"
" idx_418"
" 1))))"
" all-quoted?_417))))"
" for-loop_416)"
" #t"
" start*_411)))))"
"(if all-quoted?_409"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_408)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
" c22918_405)"
"(if(srcloc? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:srcloc)"
"(ser-push!_218"
"(srcloc-source v_350))"
"(ser-push!_218"
"(srcloc-line v_350))"
"(ser-push!_218"
"(srcloc-column v_350))"
"(ser-push!_218"
"(srcloc-position v_350))"
"(ser-push!_218"
"(srcloc-span v_350))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350))))))))))))))))"
"((ser-push-optional-quote!_220)(lambda()(void))))"
"(let-values(((ser-shell!_221)"
"(lambda(v_424)"
"(if(serialize-fill!? v_424)"
"(let-values()"
"((serialize-ref v_424)"
" v_424"
" ser-push!_218"
" state_203))"
"(if(box? v_424)"
"(let-values()(ser-push!_218 'tag '#:box))"
"(if(vector? v_424)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:vector)"
"(ser-push!_218 'exact(vector-length v_424))))"
"(if(hash? v_424)"
"(let-values()"
"(ser-push!_218"
" 'tag"
"(if(hash-eq? v_424)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_424)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                           \"unknown mutable: ~e\""
" v_424)))))))))"
"(let-values(((ser-shell-fill!_222)"
"(lambda(v_425)"
"(if(serialize-fill!? v_425)"
"(let-values()"
"((serialize-fill!-ref v_425)"
" v_425"
" ser-push!_218"
" state_203))"
"(if(box? v_425)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:set-box!)"
"(ser-push!_218(unbox v_425))))"
"(if(vector? v_425)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:set-vector!)"
"(ser-push!_218 'exact(vector-length v_425))"
"(let-values(((vec_426 len_427)"
"(let-values(((vec_428)"
" v_425))"
"(begin"
"(if(vector? vec_428)"
"(void)"
"(let-values()"
"(in-vector vec_428)))"
"(values"
" vec_428"
"(unsafe-vector-length"
" vec_428))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_429)"
"(lambda(fold-var_430"
" pos_431)"
"(if(unsafe-fx<"
" pos_431"
" len_427)"
"(let-values(((v_432)"
"(unsafe-vector-ref"
" vec_426"
" pos_431)))"
"(let-values(((fold-var_433)"
"(let-values(((fold-var_434)"
" fold-var_430))"
"(let-values(((fold-var_435)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_218"
" v_432))"
"(void)))))"
"(values"
" fold-var_435)))))"
"(for-loop_429"
" fold-var_433"
"(unsafe-fx+"
" 1"
" pos_431))))"
" fold-var_430))))"
" for-loop_429)"
"(void)"
" 0)))))"
"(if(hash? v_425)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(hash-count v_425))"
"(values))))"
"(let-values(((ks_436)"
"(sorted-hash-keys v_425)))"
"(let-values(((lst_437) ks_436))"
"(begin"
"(if(list? lst_437)"
"(void)"
"(let-values()"
"(in-list lst_437)))"
"((letrec-values(((for-loop_438)"
"(lambda(fold-var_439"
" lst_440)"
"(if(pair?"
" lst_440)"
"(let-values(((k_441)"
"(unsafe-car"
" lst_440)))"
"(let-values(((fold-var_442)"
"(let-values(((fold-var_443)"
" fold-var_439))"
"(let-values(((fold-var_444)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_218"
" k_441)"
"(ser-push!_218"
"(hash-ref"
" v_425"
" k_441))))"
"(void)))))"
"(values"
" fold-var_444)))))"
"(for-loop_438"
" fold-var_442"
"(unsafe-cdr"
" lst_440))))"
" fold-var_439))))"
" for-loop_438)"
"(void)"
" lst_437)))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                             \"unknown mutable: ~e\""
" v_425)))))))))"
"(let-values(((rev-mutables_223)"
"(let-values(((ht_445) mutables_204))"
"(begin"
"(if((lambda(ht_446)(hash? ht_446)) ht_445)"
"(void)"
"(let-values()(default-in-hash ht_445)))"
"((letrec-values(((for-loop_447)"
"(lambda(table_448 i_449)"
"(if i_449"
"(let-values(((k_450 v_451)"
"(hash-iterate-key+value"
" ht_445"
" i_449)))"
"(let-values(((table_452)"
"(let-values(((table_453)"
" table_448))"
"(let-values(((table_454)"
"(let-values()"
"(let-values(((key_455"
" val_456)"
"(let-values()"
"(values"
" v_451"
" k_450))))"
"(hash-set"
" table_453"
" key_455"
" val_456)))))"
"(values"
" table_454)))))"
"(for-loop_447"
" table_452"
"(hash-iterate-next"
" ht_445"
" i_449))))"
" table_448))))"
" for-loop_447)"
" '#hasheqv()"
"(hash-iterate-first ht_445))))))"
"(let-values(((mutable-shell-bindings_224)"
"(begin"
"(let-values(((start_457) 0)"
"((end_458)(hash-count mutables_204))"
"((inc_459) 1))"
"(begin"
"(if(if(real? start_457)"
"(if(real? end_458)(real? inc_459) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_457 end_458 inc_459)))"
"((letrec-values(((for-loop_460)"
"(lambda(fold-var_461"
" pos_462)"
"(if(< pos_462 end_458)"
"(let-values(((i_463)"
" pos_462))"
"(let-values(((fold-var_464)"
"(let-values(((fold-var_465)"
" fold-var_461))"
"(let-values(((fold-var_466)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_221"
"(hash-ref"
" rev-mutables_223"
" i_463)))"
"(void)))))"
"(values"
" fold-var_466)))))"
"(for-loop_460"
" fold-var_464"
"(+"
" pos_462"
" inc_459))))"
" fold-var_461))))"
" for-loop_460)"
"(void)"
" start_457)))"
"(reap-stream!_217))))"
"(let-values(((rev-shares_225)"
"(let-values(((ht_467) shares_206))"
"(begin"
"(if((lambda(ht_468)(hash? ht_468)) ht_467)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_467)))"
"((letrec-values(((for-loop_469)"
"(lambda(table_470 i_471)"
"(if i_471"
"(let-values(((obj_472)"
"(hash-iterate-key"
" ht_467"
" i_471)))"
"(let-values(((table_473)"
"(let-values(((table_474)"
" table_470))"
"(let-values(((table_475)"
"(let-values()"
"(let-values(((key_476"
" val_477)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_211"
"(hash-ref"
" objs_205"
" obj_472))"
" obj_472))))"
"(hash-set"
" table_474"
" key_476"
" val_477)))))"
"(values"
" table_475)))))"
"(for-loop_469"
" table_473"
"(hash-iterate-next"
" ht_467"
" i_471))))"
" table_470))))"
" for-loop_469)"
" '#hasheqv()"
"(hash-iterate-first ht_467))))))"
"(let-values(((shared-bindings_226)"
"(begin"
"(let-values(((start_478) num-mutables_210)"
"((end_479)"
"(+"
" num-mutables_210"
"(hash-count shares_206)))"
"((inc_480) 1))"
"(begin"
"(if(if(real? start_478)"
"(if(real? end_479)"
"(real? inc_480)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_478 end_479 inc_480)))"
"((letrec-values(((for-loop_481)"
"(lambda(fold-var_482"
" pos_483)"
"(if(<"
" pos_483"
" end_479)"
"(let-values(((i_484)"
" pos_483))"
"(let-values(((fold-var_485)"
"(let-values(((fold-var_486)"
" fold-var_482))"
"(let-values(((fold-var_487)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_219"
"(hash-ref"
" rev-shares_225"
" i_484)))"
"(void)))))"
"(values"
" fold-var_487)))))"
"(for-loop_481"
" fold-var_485"
"(+"
" pos_483"
" inc_480))))"
" fold-var_482))))"
" for-loop_481)"
"(void)"
" start_478)))"
"(reap-stream!_217))))"
"(let-values(((mutable-fills_227)"
"(begin"
"(let-values(((start_488) 0)"
"((end_489)"
"(hash-count mutables_204))"
"((inc_490) 1))"
"(begin"
"(if(if(real? start_488)"
"(if(real? end_489)"
"(real? inc_490)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_488"
" end_489"
" inc_490)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" pos_493)"
"(if(<"
" pos_493"
" end_489)"
"(let-values(((i_494)"
" pos_493))"
"(let-values(((fold-var_495)"
"(let-values(((fold-var_496)"
" fold-var_492))"
"(let-values(((fold-var_497)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_222"
"(hash-ref"
" rev-mutables_223"
" i_494)))"
"(void)))))"
"(values"
" fold-var_497)))))"
"(for-loop_491"
" fold-var_495"
"(+"
" pos_493"
" inc_490))))"
" fold-var_492))))"
" for-loop_491)"
"(void)"
" start_488)))"
"(reap-stream!_217))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_201 inspector-id #f)"
"(if syntax-support?_201 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_204))"
"(list 'quote mutable-shell-bindings_224)"
"(list 'quote(hash-count shares_206))"
"(list 'quote shared-bindings_226)"
"(list 'quote mutable-fills_227)"
"(list"
" 'quote"
"(begin"
"(ser-push!_218 v_199)"
"(reap-stream!_217)))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack7.1$3)"
"(lambda(given-kws_498 given-args_499 v4_500 mpis5_501)"
"(let-values(((syntax-support?3_502)(pair? given-kws_498)))"
"(let-values(((syntax-support?2_503)(if syntax-support?3_502(car given-args_499)(void))))"
"(generate-deserialize6.1 syntax-support?2_503 syntax-support?3_502 v4_500 mpis5_501)))))"
"(define-values"
"(generate-deserialize8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_504 given-argc_505)"
"(if(= given-argc_505 4)"
"(let-values(((l1_506) given-kws_504))"
"(let-values(((l1_507)"
"(if(null? l1_506) l1_506(if(eq?(car l1_506) '#:syntax-support?)(cdr l1_506) l1_506))))"
"(null? l1_507)))"
" #f))"
"(case-lambda"
"((given-kws_508 given-args_509 v_510 mpis_511)(unpack7.1$3 given-kws_508 given-args_509 v_510 mpis_511)))"
" null"
" '(#:syntax-support?)"
"(let-values(((generate-deserialize_512)(case-lambda((v_513 mpis_514)(unpack7.1$3 null null v_513 mpis_514)))))"
" generate-deserialize_512)))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_515)"
"(let-values(((ks_516)(hash-keys ht_515)))"
"(if(null? ks_516)"
"(let-values() ks_516)"
"(if(null?(cdr ks_516))"
"(let-values() ks_516)"
"(if(andmap2 symbol? ks_516)"
"(let-values()"
"(let-values(((ks14_517) ks_516)((symbol<?15_518) symbol<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f ks14_517 symbol<?15_518)"
"(sort9.1 ks14_517 symbol<?15_518))))"
"(if(andmap2 scope? ks_516)"
"(let-values()"
"(let-values(((ks16_519) ks_516)((scope<?17_520) scope<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f ks16_519 scope<?17_520)"
"(sort9.1 ks16_519 scope<?17_520))))"
"(if(andmap2 shifted-multi-scope? ks_516)"
"(let-values()"
"(let-values(((ks18_521) ks_516)((shifted-multi-scope<?19_522) shifted-multi-scope<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f ks18_521 shifted-multi-scope<?19_522)"
"(sort9.1 ks18_521 shifted-multi-scope<?19_522))))"
"(if(andmap2 real? ks_516)"
"(let-values()"
"(let-values(((ks20_523) ks_516)((<21_524) <))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f ks20_523 <21_524)"
"(sort9.1 ks20_523 <21_524))))"
"(let-values() ks_516))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" num-mutables_528"
" mutable-vec_529"
" num-shared_530"
" shared-vec_531"
" mutable-fill-vec_532"
" result-vec_533)"
"(let-values(((shared_534)(make-vector(+ num-mutables_528 num-shared_530) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_537) 0)((end_538) num-mutables_528)((inc_539) 1))"
"(begin"
"(if(if(real? start_537)(if(real? end_538)(real? inc_539) #f) #f)"
"(void)"
"(let-values()(in-range start_537 end_538 inc_539)))"
"((letrec-values(((for-loop_540)"
"(lambda(pos_541 pos_542)"
"(if(< pos_542 end_538)"
"(let-values(((i_543) pos_542))"
"(let-values(((pos_544)"
"(let-values(((pos_545) pos_541))"
"(let-values(((pos_546)"
"(let-values()"
"(let-values(((d_547 next-pos_548)"
"(decode-shell"
" mutable-vec_529"
" pos_545"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534)))"
"(begin"
"(vector-set!"
" shared_534"
" i_543"
" d_547)"
" next-pos_548)))))"
"(values pos_546)))))"
"(for-loop_540 pos_544(+ pos_542 inc_539))))"
" pos_541))))"
" for-loop_540)"
" 0"
" start_537)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_549) num-mutables_528)"
"((end_550)(+ num-mutables_528 num-shared_530))"
"((inc_551) 1))"
"(begin"
"(if(if(real? start_549)(if(real? end_550)(real? inc_551) #f) #f)"
"(void)"
"(let-values()(in-range start_549 end_550 inc_551)))"
"((letrec-values(((for-loop_552)"
"(lambda(pos_553 pos_554)"
"(if(< pos_554 end_550)"
"(let-values(((i_555) pos_554))"
"(let-values(((pos_556)"
"(let-values(((pos_557) pos_553))"
"(let-values(((pos_558)"
"(let-values()"
"(let-values(((d_559 next-pos_560)"
"(decode"
" shared-vec_531"
" pos_557"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534)))"
"(begin"
"(vector-set!"
" shared_534"
" i_555"
" d_559)"
" next-pos_560)))))"
"(values pos_558)))))"
"(for-loop_552 pos_556(+ pos_554 inc_551))))"
" pos_553))))"
" for-loop_552)"
" 0"
" start_549)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_561) 0)"
"((end_562) num-mutables_528)"
"((inc_563) 1)"
"((vec_564 len_565)"
"(let-values(((vec_566) shared_534))"
"(begin"
"(if(vector? vec_566)(void)(let-values()(in-vector vec_566)))"
"(values vec_566(unsafe-vector-length vec_566))))))"
"(begin"
"(if(if(real? start_561)(if(real? end_562)(real? inc_563) #f) #f)"
"(void)"
"(let-values()(in-range start_561 end_562 inc_563)))"
" #f"
"((letrec-values(((for-loop_567)"
"(lambda(pos_568 pos_569 pos_570)"
"(if(if(< pos_569 end_562)(unsafe-fx< pos_570 len_565) #f)"
"(let-values(((i_571) pos_569)"
"((v_572)(unsafe-vector-ref vec_564 pos_570)))"
"(let-values(((pos_573)"
"(let-values(((pos_574) pos_568))"
"(let-values(((pos_575)"
"(let-values()"
"(decode-fill!"
" v_572"
" mutable-fill-vec_532"
" pos_574"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534))))"
"(values pos_575)))))"
"(for-loop_567"
" pos_573"
"(+ pos_569 inc_563)"
"(unsafe-fx+ 1 pos_570))))"
" pos_568))))"
" for-loop_567)"
" 0"
" start_561"
" 0)))"
"(values))))"
"(let-values(((result_535 done-pos_536)"
"(decode result-vec_533 0 mpis_525 inspector_526 bulk-binding-registry_527 shared_534)))"
" result_535)))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_576 pos_577 mpis_578 inspector_579 bulk-binding-registry_580 shared_581)"
"(let-values(((tmp_582)(vector-ref vec_576 pos_577)))"
"(if(equal? tmp_582 '#:box)"
"(let-values()(values(box #f)(add1 pos_577)))"
"(if(equal? tmp_582 '#:vector)"
"(let-values()(values(make-vector(vector-ref vec_576(add1 pos_577)))(+ pos_577 2)))"
"(if(equal? tmp_582 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_577)))"
"(if(equal? tmp_582 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_577)))"
"(if(equal? tmp_582 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_577)))"
"(let-values()"
"(decode vec_576 pos_577 mpis_578 inspector_579 bulk-binding-registry_580 shared_581))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_583 pos_584 mpis_585 inspector_586 bulk-binding-registry_587 shared_588)"
"(let-values()"
"(let-values(((tmp_650)(vector-ref vec_583 pos_584)))"
"(let-values(((index_651)"
"(if(keyword? tmp_650)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 23)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:bulk-binding-at . 21)"
"(#:multi-scope . 18)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 24)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 19)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 25)"
"(#:bulk-binding . 26)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 20)"
"(#:seteq . 14)"
"(#:provided . 27)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 22))"
" tmp_650"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_651 13)"
"(if(unsafe-fx< index_651 6)"
"(if(unsafe-fx< index_651 2)"
"(if(unsafe-fx< index_651 1)"
"(let-values()(values(vector-ref vec_583 pos_584)(add1 pos_584)))"
"(let-values()(values(vector-ref shared_588(vector-ref vec_583(add1 pos_584)))(+ pos_584 2))))"
"(if(unsafe-fx< index_651 3)"
"(let-values()(values inspector_586(add1 pos_584)))"
"(if(unsafe-fx< index_651 4)"
"(let-values()(values bulk-binding-registry_587(add1 pos_584)))"
"(if(unsafe-fx< index_651 5)"
"(let-values()"
"(let-values(((content_652 next-pos_653)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_654 next-pos_655)"
"(let-values(((i_656)(vector-ref vec_583 next-pos_653)))"
"(if(exact-integer? i_656)"
"(values(vector-ref shared_588 i_656)(add1 next-pos_653))"
"(decode"
" vec_583"
" next-pos_653"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_657 next-pos_658)"
"(let-values(((i_659)(vector-ref vec_583 next-pos_655)))"
"(if(exact-integer? i_659)"
"(values(vector-ref shared_588 i_659)(add1 next-pos_655))"
"(decode"
" vec_583"
" next-pos_655"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(values"
"(deserialize-syntax content_652 context_654 srcloc_657 #f #f inspector_586)"
" next-pos_658)))))"
"(let-values()"
"(let-values(((content_660 next-pos_661)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_662 next-pos_663)"
"(let-values(((i_664)(vector-ref vec_583 next-pos_661)))"
"(if(exact-integer? i_664)"
"(values(vector-ref shared_588 i_664)(add1 next-pos_661))"
"(decode"
" vec_583"
" next-pos_661"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_665 next-pos_666)"
"(let-values(((i_667)(vector-ref vec_583 next-pos_663)))"
"(if(exact-integer? i_667)"
"(values(vector-ref shared_588 i_667)(add1 next-pos_663))"
"(decode"
" vec_583"
" next-pos_663"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(values"
"(deserialize-datum->syntax content_660 context_662 srcloc_665 inspector_586)"
" next-pos_666)))))))))"
"(if(unsafe-fx< index_651 9)"
"(if(unsafe-fx< index_651 7)"
"(let-values()"
"(let-values(((content_668 next-pos_669)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_670 next-pos_671)"
"(let-values(((i_672)(vector-ref vec_583 next-pos_669)))"
"(if(exact-integer? i_672)"
"(values(vector-ref shared_588 i_672)(add1 next-pos_669))"
"(decode"
" vec_583"
" next-pos_669"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_673 next-pos_674)"
"(let-values(((i_675)(vector-ref vec_583 next-pos_671)))"
"(if(exact-integer? i_675)"
"(values(vector-ref shared_588 i_675)(add1 next-pos_671))"
"(decode"
" vec_583"
" next-pos_671"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((props_676 next-pos_677)"
"(decode"
" vec_583"
" next-pos_674"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((tamper_678 next-pos_679)"
"(decode"
" vec_583"
" next-pos_677"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-syntax"
" content_668"
" context_670"
" srcloc_673"
" props_676"
" tamper_678"
" inspector_586)"
" next-pos_679)))))))"
"(if(unsafe-fx< index_651 8)"
"(let-values()"
"(let-values(((source_680 next-pos_681)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((line_682 next-pos_683)"
"(decode"
" vec_583"
" next-pos_681"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((column_684 next-pos_685)"
"(decode"
" vec_583"
" next-pos_683"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((position_686 next-pos_687)"
"(decode"
" vec_583"
" next-pos_685"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((span_688 next-pos_689)"
"(decode"
" vec_583"
" next-pos_687"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(srcloc source_680 line_682 column_684 position_686 span_688)"
" next-pos_689)))))))"
"(let-values()(values(vector-ref vec_583(add1 pos_584))(+ pos_584 2)))))"
"(if(unsafe-fx< index_651 10)"
"(let-values()(values(vector-ref mpis_585(vector-ref vec_583(add1 pos_584)))(+ pos_584 2)))"
"(if(unsafe-fx< index_651 11)"
"(let-values()"
"(let-values(((v_690 next-pos_691)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(box-immutable v_690) next-pos_691)))"
"(if(unsafe-fx< index_651 12)"
"(let-values()"
"(let-values(((a_692 next-pos_693)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((d_694 next-pos_695)"
"(decode"
" vec_583"
" next-pos_693"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(cons a_692 d_694) next-pos_695))))"
"(let-values()"
"(let-values(((len_696)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((r_697)(make-vector len_696)))"
"(let-values(((next-pos_698)"
"(let-values(((start_699) 0)((end_700) len_696)((inc_701) 1))"
"(begin"
"(if(if(real? start_699)(if(real? end_700)(real? inc_701) #f) #f)"
"(void)"
"(let-values()(in-range start_699 end_700 inc_701)))"
"((letrec-values(((for-loop_702)"
"(lambda(pos_703 pos_704)"
"(if(< pos_704 end_700)"
"(let-values(((i_705) pos_704))"
"(let-values(((pos_706)"
"(let-values(((pos_707) pos_703))"
"(let-values(((pos_708)"
"(let-values()"
"(let-values(((v_709"
" next-pos_710)"
"(let-values(((v_711"
" next-pos_712)"
"(decode"
" vec_583"
" pos_707"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
" v_711"
" next-pos_712))))"
"(begin"
"(vector-set!"
" r_697"
" i_705"
" v_709)"
" next-pos_710)))))"
"(values pos_708)))))"
"(for-loop_702 pos_706(+ pos_704 inc_701))))"
" pos_703))))"
" for-loop_702)"
"(+ pos_584 2)"
" start_699)))))"
"(values"
"(if(eq?(vector-ref vec_583 pos_584) '#:list)"
"(vector->list r_697)"
"(vector->immutable-vector r_697))"
" next-pos_698))))))))))"
"(if(unsafe-fx< index_651 20)"
"(if(unsafe-fx< index_651 16)"
"(if(unsafe-fx< index_651 14)"
"(let-values()"
"(let-values(((ht_713)"
"(let-values(((tmp_715)(vector-ref vec_583 pos_584)))"
"(if(equal? tmp_715 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_715 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_715 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_714)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((start_716) 0)((end_717) len_714)((inc_718) 1))"
"(begin"
"(if(if(real? start_716)(if(real? end_717)(real? inc_718) #f) #f)"
"(void)"
"(let-values()(in-range start_716 end_717 inc_718)))"
"((letrec-values(((for-loop_719)"
"(lambda(ht_720 pos_721 pos_722)"
"(if(< pos_722 end_717)"
"(let-values(((i_723) pos_722))"
"(let-values(((ht_724 pos_725)"
"(let-values(((ht_726) ht_720)((pos_727) pos_721))"
"(let-values(((ht_728 pos_729)"
"(let-values()"
"(let-values(((k_730 next-pos_731)"
"(decode"
" vec_583"
" pos_727"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((v_732 next-pos_733)"
"(decode"
" vec_583"
" next-pos_731"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(hash-set ht_726 k_730 v_732)"
" next-pos_733))))))"
"(values ht_728 pos_729)))))"
"(for-loop_719 ht_724 pos_725(+ pos_722 inc_718))))"
"(values ht_720 pos_721)))))"
" for-loop_719)"
" ht_713"
"(+ pos_584 2)"
" start_716))))))"
"(if(unsafe-fx< index_651 15)"
"(let-values()"
"(let-values(((s_734)"
"(let-values(((tmp_736)(vector-ref vec_583 pos_584)))"
"(if(equal? tmp_736 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_736 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_736 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_735)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((start_737) 0)((end_738) len_735)((inc_739) 1))"
"(begin"
"(if(if(real? start_737)(if(real? end_738)(real? inc_739) #f) #f)"
"(void)"
"(let-values()(in-range start_737 end_738 inc_739)))"
"((letrec-values(((for-loop_740)"
"(lambda(s_741 pos_742 pos_743)"
"(if(< pos_743 end_738)"
"(let-values(((i_744) pos_743))"
"(let-values(((s_745 pos_746)"
"(let-values(((s_747) s_741)((pos_748) pos_742))"
"(let-values(((s_749 pos_750)"
"(let-values()"
"(let-values(((k_751 next-pos_752)"
"(decode"
" vec_583"
" pos_748"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(set-add s_747 k_751)"
" next-pos_752)))))"
"(values s_749 pos_750)))))"
"(for-loop_740 s_745 pos_746(+ pos_743 inc_739))))"
"(values s_741 pos_742)))))"
" for-loop_740)"
" s_734"
"(+ pos_584 2)"
" start_737))))))"
"(let-values()"
"(let-values(((key_753 next-pos_754)"
"(let-values(((k_758 next-pos_759)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values k_758 next-pos_759))))"
"(let-values(((len_755)(vector-ref vec_583 next-pos_754)))"
"(let-values(((r_756 done-pos_757)"
"(let-values(((start_760) 0)((end_761) len_755)((inc_762) 1))"
"(begin"
"(if(if(real? start_760)(if(real? end_761)(real? inc_762) #f) #f)"
"(void)"
"(let-values()(in-range start_760 end_761 inc_762)))"
"((letrec-values(((for-loop_763)"
"(lambda(r_764 pos_765 pos_766)"
"(if(< pos_766 end_761)"
"(let-values(((i_767) pos_766))"
"(let-values(((r_768 pos_769)"
"(let-values(((r_770) r_764)"
"((pos_771) pos_765))"
"(let-values(((r_772 pos_773)"
"(let-values()"
"(let-values(((v_774"
" next-pos_775)"
"(decode"
" vec_583"
" pos_771"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(cons"
" v_774"
" r_770)"
" next-pos_775)))))"
"(values r_772 pos_773)))))"
"(for-loop_763 r_768 pos_769(+ pos_766 inc_762))))"
"(values r_764 pos_765)))))"
" for-loop_763)"
" null"
"(add1 next-pos_754)"
" start_760)))))"
"(values(apply make-prefab-struct key_753(alt-reverse r_756)) done-pos_757)))))))"
"(if(unsafe-fx< index_651 17)"
"(let-values()(values(deserialize-scope)(add1 pos_584)))"
"(if(unsafe-fx< index_651 18)"
"(let-values()"
"(let-values(((kind_776 next-pos_777)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-scope kind_776) next-pos_777)))"
"(if(unsafe-fx< index_651 19)"
"(let-values()"
"(let-values(((name_778 next-pos_779)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((scopes_780 next-pos_781)"
"(decode"
" vec_583"
" next-pos_779"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-multi-scope name_778 scopes_780) next-pos_781))))"
"(let-values()"
"(let-values(((phase_782 next-pos_783)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((multi-scope_784 next-pos_785)"
"(decode"
" vec_583"
" next-pos_783"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-shifted-multi-scope phase_782 multi-scope_784) next-pos_785))))))))"
"(if(unsafe-fx< index_651 23)"
"(if(unsafe-fx< index_651 21)"
"(let-values()"
"(let-values(((syms_786 next-pos_787)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk-bindings_788 next-pos_789)"
"(decode"
" vec_583"
" next-pos_787"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-table-with-bulk-bindings syms_786 bulk-bindings_788) next-pos_789))))"
"(if(unsafe-fx< index_651 22)"
"(let-values()"
"(let-values(((scopes_790 next-pos_791)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk_792 next-pos_793)"
"(decode"
" vec_583"
" next-pos_791"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-bulk-binding-at scopes_790 bulk_792) next-pos_793))))"
"(let-values()"
"(let-values(((kind_794 next-pos_795)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_796 next-pos_797)"
"(decode"
" vec_583"
" next-pos_795"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-representative-scope kind_794 phase_796) next-pos_797))))))"
"(if(unsafe-fx< index_651 25)"
"(if(unsafe-fx< index_651 24)"
"(let-values()"
"(let-values(((module_798 next-pos_799)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_800 next-pos_801)"
"(decode"
" vec_583"
" next-pos_799"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_802 next-pos_803)"
"(decode"
" vec_583"
" next-pos_801"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-module_804 next-pos_805)"
"(decode"
" vec_583"
" next-pos_803"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-phase_806 next-pos_807)"
"(decode"
" vec_583"
" next-pos_805"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-sym_808 next-pos_809)"
"(decode"
" vec_583"
" next-pos_807"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-require-phase_810 next-pos_811)"
"(decode"
" vec_583"
" next-pos_809"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((free=id_812 next-pos_813)"
"(decode"
" vec_583"
" next-pos_811"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((extra-inspector_814 next-pos_815)"
"(decode"
" vec_583"
" next-pos_813"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((extra-nominal-bindings_816 next-pos_817)"
"(decode"
" vec_583"
" next-pos_815"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-full-module-binding"
" module_798"
" sym_800"
" phase_802"
" nominal-module_804"
" nominal-phase_806"
" nominal-sym_808"
" nominal-require-phase_810"
" free=id_812"
" extra-inspector_814"
" extra-nominal-bindings_816)"
" next-pos_817))))))))))))"
"(let-values()"
"(let-values(((module_818 next-pos_819)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_820 next-pos_821)"
"(decode"
" vec_583"
" next-pos_819"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_822 next-pos_823)"
"(decode"
" vec_583"
" next-pos_821"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-module_824 next-pos_825)"
"(decode"
" vec_583"
" next-pos_823"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-simple-module-binding module_818 sym_820 phase_822 nominal-module_824)"
" next-pos_825)))))))"
"(if(unsafe-fx< index_651 26)"
"(let-values()"
"(let-values(((key_826 next-pos_827)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((free=id_828 next-pos_829)"
"(decode"
" vec_583"
" next-pos_827"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-full-local-binding key_826 free=id_828) next-pos_829))))"
"(if(unsafe-fx< index_651 27)"
"(let-values()"
"(let-values(((prefix_830 next-pos_831)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((excepts_832 next-pos_833)"
"(decode"
" vec_583"
" next-pos_831"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((mpi_834 next-pos_835)"
"(decode"
" vec_583"
" next-pos_833"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((provide-phase-level_836 next-pos_837)"
"(decode"
" vec_583"
" next-pos_835"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase-shift_838 next-pos_839)"
"(decode"
" vec_583"
" next-pos_837"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk-binding-registry_840 next-pos_841)"
"(decode"
" vec_583"
" next-pos_839"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-bulk-binding"
" prefix_830"
" excepts_832"
" mpi_834"
" provide-phase-level_836"
" phase-shift_838"
" bulk-binding-registry_840)"
" next-pos_841))))))))"
"(let-values()"
"(let-values(((binding_842 next-pos_843)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((protected?_844 next-pos_845)"
"(decode"
" vec_583"
" next-pos_843"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((syntax?_846 next-pos_847)"
"(decode"
" vec_583"
" next-pos_845"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-provided binding_842 protected?_844 syntax?_846)"
" next-pos_847))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_848 vec_849 pos_850 mpis_851 inspector_852 bulk-binding-registry_853 shared_854)"
"(let-values(((tmp_855)(vector-ref vec_849 pos_850)))"
"(if(equal? tmp_855 #f)"
"(let-values()(add1 pos_850))"
"(if(equal? tmp_855 '#:set-box!)"
"(let-values()"
"(let-values(((c_856 next-pos_857)"
"(decode vec_849(add1 pos_850) mpis_851 inspector_852 bulk-binding-registry_853 shared_854)))"
"(begin(set-box! v_848 c_856) next-pos_857)))"
"(if(equal? tmp_855 '#:set-vector!)"
"(let-values()"
"(let-values(((len_858)(vector-ref vec_849(add1 pos_850))))"
"(let-values(((start_859) 0)((end_860) len_858)((inc_861) 1))"
"(begin"
"(if(if(real? start_859)(if(real? end_860)(real? inc_861) #f) #f)"
"(void)"
"(let-values()(in-range start_859 end_860 inc_861)))"
"((letrec-values(((for-loop_862)"
"(lambda(pos_863 pos_864)"
"(if(< pos_864 end_860)"
"(let-values(((i_865) pos_864))"
"(let-values(((pos_866)"
"(let-values(((pos_867) pos_863))"
"(let-values(((pos_868)"
"(let-values()"
"(let-values(((c_869 next-pos_870)"
"(decode"
" vec_849"
" pos_867"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin"
"(vector-set! v_848 i_865 c_869)"
" next-pos_870)))))"
"(values pos_868)))))"
"(for-loop_862 pos_866(+ pos_864 inc_861))))"
" pos_863))))"
" for-loop_862)"
"(+ pos_850 2)"
" start_859)))))"
"(if(equal? tmp_855 '#:set-hash!)"
"(let-values()"
"(let-values(((len_871)(vector-ref vec_849(add1 pos_850))))"
"(let-values(((start_872) 0)((end_873) len_871)((inc_874) 1))"
"(begin"
"(if(if(real? start_872)(if(real? end_873)(real? inc_874) #f) #f)"
"(void)"
"(let-values()(in-range start_872 end_873 inc_874)))"
"((letrec-values(((for-loop_875)"
"(lambda(pos_876 pos_877)"
"(if(< pos_877 end_873)"
"(let-values(((i_878) pos_877))"
"(let-values(((pos_879)"
"(let-values(((pos_880) pos_876))"
"(let-values(((pos_881)"
"(let-values()"
"(let-values(((key_882 next-pos_883)"
"(decode"
" vec_849"
" pos_880"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(let-values(((val_884 done-pos_885)"
"(decode"
" vec_849"
" next-pos_883"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin"
"(hash-set! v_848 key_882 val_884)"
" done-pos_885))))))"
"(values pos_881)))))"
"(for-loop_875 pos_879(+ pos_877 inc_874))))"
" pos_876))))"
" for-loop_875)"
"(+ pos_850 2)"
" start_872)))))"
"(if(equal? tmp_855 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_886 next-pos_887)"
"(decode"
" vec_849"
"(add1 pos_850)"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin(deserialize-scope-fill! v_848 c_886) next-pos_887)))"
"(if(equal? tmp_855 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_888 next-pos_889)"
"(decode"
" vec_849"
"(add1 pos_850)"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(let-values(((d_890 done-pos_891)"
"(decode"
" vec_849"
" next-pos_889"
" mpis_851"
" inspector_852"
" bulk-binding-registry_853"
" shared_854)))"
"(begin(deserialize-representative-scope-fill! v_848 a_888 d_890) done-pos_891))))"
"                  (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector-ref vec_849 pos_850))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_892)"
"(let-values(((seen_893)(make-hasheq)))"
"(let-values(((reachable-scopes_894)(seteq)))"
"(let-values(((scope-triggers_895)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_896)"
"(lambda(v_897)"
"(if(interned-literal? v_897)"
"(let-values()(void))"
"(if(hash-ref seen_893 v_897 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_893 v_897 #t)"
"(if(scope-with-bindings? v_897)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_894"
"(set-add reachable-scopes_894 v_897))"
"(values))))"
"(let-values((()"
"(begin((reach-scopes-ref v_897) v_897 loop_896)(values))))"
"(let-values(((l_898)(hash-ref scope-triggers_895 v_897 null)))"
"(begin"
"(let-values(((lst_899) l_898))"
"(begin"
"(if(list? lst_899)(void)(let-values()(in-list lst_899)))"
"((letrec-values(((for-loop_900)"
"(lambda(fold-var_901 lst_902)"
"(if(pair? lst_902)"
"(let-values(((v_903)"
"(unsafe-car lst_902)))"
"(let-values(((fold-var_904)"
"(let-values(((fold-var_905)"
" fold-var_901))"
"(let-values(((fold-var_906)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" v_903))"
"(void)))))"
"(values"
" fold-var_906)))))"
"(for-loop_900"
" fold-var_904"
"(unsafe-cdr lst_902))))"
" fold-var_901))))"
" for-loop_900)"
"(void)"
" lst_899)))"
"((scope-with-bindings-ref v_897)"
" v_897"
" reachable-scopes_894"
" loop_896"
"(lambda(sc-unreachable_907 b_908)"
"(hash-update!"
" scope-triggers_895"
" sc-unreachable_907"
"(lambda(l_909)(cons b_908 l_909))"
" null))))))))"
"(if(reach-scopes? v_897)"
"(let-values()((reach-scopes-ref v_897) v_897 loop_896))"
"(if(pair? v_897)"
"(let-values()(begin(loop_896(car v_897))(loop_896(cdr v_897))))"
"(if(vector? v_897)"
"(let-values()"
"(let-values(((vec_910 len_911)"
"(let-values(((vec_912) v_897))"
"(begin"
"(if(vector? vec_912)"
"(void)"
"(let-values()(in-vector vec_912)))"
"(values vec_912(unsafe-vector-length vec_912))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_913)"
"(lambda(fold-var_914 pos_915)"
"(if(unsafe-fx< pos_915 len_911)"
"(let-values(((e_916)"
"(unsafe-vector-ref"
" vec_910"
" pos_915)))"
"(let-values(((fold-var_917)"
"(let-values(((fold-var_918)"
" fold-var_914))"
"(let-values(((fold-var_919)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" e_916))"
"(void)))))"
"(values"
" fold-var_919)))))"
"(for-loop_913"
" fold-var_917"
"(unsafe-fx+ 1 pos_915))))"
" fold-var_914))))"
" for-loop_913)"
"(void)"
" 0))))"
"(if(box? v_897)"
"(let-values()(loop_896(unbox v_897)))"
"(if(hash? v_897)"
"(let-values()"
"(let-values(((ht_920) v_897))"
"(begin"
"(if((lambda(ht_921)(hash? ht_921)) ht_920)"
"(void)"
"(let-values()(default-in-hash ht_920)))"
"((letrec-values(((for-loop_922)"
"(lambda(fold-var_923 i_924)"
"(if i_924"
"(let-values(((k_925 v_926)"
"(hash-iterate-key+value"
" ht_920"
" i_924)))"
"(let-values(((fold-var_927)"
"(let-values(((fold-var_928)"
" fold-var_923))"
"(let-values(((fold-var_929)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_896"
" k_925)"
"(loop_896"
" v_926)))"
"(void)))))"
"(values"
" fold-var_929)))))"
"(for-loop_922"
" fold-var_927"
"(hash-iterate-next ht_920 i_924))))"
" fold-var_923))))"
" for-loop_922)"
"(void)"
"(hash-iterate-first ht_920)))))"
"(if(prefab-struct-key v_897)"
"(let-values()"
"(let-values(((v*_930 start*_931 stop*_932 step*_933)"
"(normalise-inputs"
" 'in-vector"
"                                                                       \"vector\""
"(lambda(x_934)(vector? x_934))"
"(lambda(x_935)(unsafe-vector-length x_935))"
"(struct->vector v_897)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_936)"
"(lambda(fold-var_937 idx_938)"
"(if(unsafe-fx< idx_938 stop*_932)"
"(let-values(((e_939)"
"(unsafe-vector-ref"
" v*_930"
" idx_938)))"
"(let-values(((fold-var_940)"
"(let-values(((fold-var_941)"
" fold-var_937))"
"(let-values(((fold-var_942)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_896"
" e_939))"
"(void)))))"
"(values"
" fold-var_942)))))"
"(for-loop_936"
" fold-var_940"
"(unsafe-fx+ idx_938 1))))"
" fold-var_937))))"
" for-loop_936)"
"(void)"
" start*_931))))"
"(let-values()(void))))))))))))))))"
" loop_896)"
" v_892)"
" reachable-scopes_894))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(void)"
"(void)"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_66 port_67 mode_68)(write(compiled-in-memory-linklet-directory cim_66) port_67))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 2 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 3 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 4 'mpis)"
"(make-struct-field-accessor -ref_4 5 'syntax-literals)"
"(make-struct-field-accessor -ref_4 6 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 7 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 8 'namespace-scopes)"
"(make-struct-field-accessor -ref_4 9 'purely-functional?))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'post)"
"(make-struct-field-accessor -ref_4 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_26 original-scopes-s_27 new-ns_28)"
"(let-values(((old-scs-post_29 old-scs-other_30)"
"(if(namespace-scopes? original-scopes-s_27)"
"(values(namespace-scopes-post original-scopes-s_27)(namespace-scopes-other original-scopes-s_27))"
"(decode-namespace-scopes original-scopes-s_27))))"
"(let-values(((new-scs-post_31 new-scs-other_32)(extract-namespace-scopes/values new-ns_28)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_26 old-scs-post_29 new-scs-post_31)"
" old-scs-other_30"
" new-scs-other_32)))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_33)"
"(let-values(((root-ctx_34)(namespace-get-root-expand-ctx ns_33)))"
"(let-values(((post-expansion-sc_35)(root-expand-context-post-expansion-scope root-ctx_34)))"
"(values"
"(seteq post-expansion-sc_35)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_34)) post-expansion-sc_35))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_36)"
"(let-values(((scs-post_37 scs-other_38)(extract-namespace-scopes/values ns_36)))"
"(namespace-scopes1.1 scs-post_37 scs-other_38))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_39)"
"(let-values(((post-expansion-scs_40 other-scs_41)(extract-namespace-scopes/values ns_39)))"
"(let-values(((post-expansion-s_42)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_40))))"
"(let-values(((other-s_43)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_41))))"
"(datum->syntax$1 #f(vector post-expansion-s_42 other-s_43)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_44)"
"(let-values(((vec_45)(syntax-e$1 stx_44)))"
"(values(syntax-scope-set(vector-ref vec_45 0) 0)(syntax-scope-set(vector-ref vec_45 1) 0)))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_46 nss2_47)"
"(if(set=?(namespace-scopes-post nss1_46)(namespace-scopes-post nss2_47))"
"(set=?(namespace-scopes-other nss1_46)(namespace-scopes-other nss2_47))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'stxes)"
"(make-struct-field-accessor -ref_4 1 'count)"
"(make-struct-field-mutator -set!_5 0 'stxes)"
"(make-struct-field-mutator -set!_5 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_29 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_29 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_29 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_29 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_29 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_29 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_29 7 'syntax-literals)"
"(make-struct-field-mutator -set!_30 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_30 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_81 make-_82 ?_83 -ref_84 -set!_85)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_81"
" make-_82"
" ?_83"
"(make-struct-field-accessor -ref_84 0 'module-use)"
"(make-struct-field-accessor -ref_84 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(syntax-literals1.1 null 0)))"
"(define-values"
"(make-header)"
"(lambda(mpis_106 syntax-literals_107)"
"(header2.1 mpis_106(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_107)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_108 q_109)"
"(let-values(((sl_110)"
"(if(header? header-or-literals_108)"
"(header-syntax-literals header-or-literals_108)"
" header-or-literals_108)))"
"(let-values(((pos_111)(syntax-literals-count sl_110)))"
"(begin"
"(set-syntax-literals-count! sl_110(add1 pos_111))"
"(set-syntax-literals-stxes! sl_110(cons q_109(syntax-literals-stxes sl_110)))"
" pos_111)))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_112 vec_113)"
"(let-values(((pos_114)(syntax-literals-count sl_112)))"
"(begin"
"(let-values(((vec_115 len_116)"
"(let-values(((vec_117) vec_113))"
"(begin"
"(if(vector? vec_117)(void)(let-values()(in-vector vec_117)))"
"(values vec_117(unsafe-vector-length vec_117))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 pos_120)"
"(if(unsafe-fx< pos_120 len_116)"
"(let-values(((e_121)(unsafe-vector-ref vec_115 pos_120)))"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123) fold-var_119))"
"(let-values(((fold-var_124)"
"(let-values()"
"(begin"
"(let-values()(add-syntax-literal! sl_112 e_121))"
"(void)))))"
"(values fold-var_124)))))"
"(for-loop_118 fold-var_122(unsafe-fx+ 1 pos_120))))"
" fold-var_119))))"
" for-loop_118)"
"(void)"
" 0)))"
"(cons pos_114(vector-length vec_113))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_125)(null?(syntax-literals-stxes sl_125))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_126 skip-deserialize?5_127 sl6_128 mpis7_129 self8_130)"
"(let-values(((sl_131) sl6_128))"
"(let-values(((mpis_132) mpis7_129))"
"(let-values(((self_133) self8_130))"
"(let-values(((skip-deserialize?_134)(if skip-deserialize?5_127 skip-deserialize?4_126 #f)))"
"(let-values()"
"(list"
"(list 'define-values(list syntax-literals-id)(list* 'make-vector(syntax-literals-count sl_131) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* 'vector-ref syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_134"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_132 self_133)"
" self-id"
" inspector-id)))"
"(list* 'begin(list* 'vector-set! syntax-literals-id '(pos stx)) '(stx))))))))))))))))))"
"(define-values"
"(unpack10.1$3)"
"(lambda(given-kws_135 given-args_136 sl6_137 mpis7_138 self8_139)"
"(let-values(((skip-deserialize?5_140)(pair? given-kws_135)))"
"(let-values(((skip-deserialize?4_141)(if skip-deserialize?5_140(car given-args_136)(void))))"
"(generate-lazy-syntax-literals!9.1"
" skip-deserialize?4_141"
" skip-deserialize?5_140"
" sl6_137"
" mpis7_138"
" self8_139)))))"
"(define-values"
"(generate-lazy-syntax-literals!11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_142 given-argc_143)"
"(if(= given-argc_143 5)"
"(let-values(((l1_144) given-kws_142))"
"(let-values(((l1_145)"
"(if(null? l1_144) l1_144(if(eq?(car l1_144) '#:skip-deserialize?)(cdr l1_144) l1_144))))"
"(null? l1_145)))"
" #f))"
"(case-lambda"
"((given-kws_146 given-args_147 sl_148 mpis_149 self_150)"
"(unpack10.1$3 given-kws_146 given-args_147 sl_148 mpis_149 self_150)))"
" null"
" '(#:skip-deserialize?)"
"(let-values(((generate-lazy-syntax-literals!_151)"
"(case-lambda((sl_152 mpis_153 self_154)(unpack10.1$3 null null sl_152 mpis_153 self_154)))))"
" generate-lazy-syntax-literals!_151)))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_155 mpis_156)"
"(if(syntax-literals-empty? sl_155)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_157)"
"(vector->immutable-vector(list->vector(alt-reverse(syntax-literals-stxes sl_155)))))"
"((mpis26_158) mpis_156))"
"(if(variable-reference-constant?(#%variable-reference generate-deserialize8.1))"
"(generate-deserialize6.1 #f #f temp25_157 mpis26_158)"
"(generate-deserialize8.1 temp25_157 mpis26_158)))))"
"(list* 'set! deserialize-syntax-id '(#f))))))))))"
"(define-values"
"(generate-lazy-syntax-literal-lookup)"
"(lambda(pos_159)(list get-syntax-literal!-id(list 'quote pos_159))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_160 mpis_161 base-phase_162 self_163 ns_164)"
"(if(syntax-literals-empty? sl_160)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_165)"
"(cons(encode-namespace-scopes ns_164)(alt-reverse(syntax-literals-stxes sl_160))))"
"((mpis28_166) mpis_161))"
"(if(variable-reference-constant?(#%variable-reference generate-deserialize8.1))"
"(generate-deserialize6.1 #f #f temp27_165 mpis28_166)"
"(generate-deserialize8.1 temp27_165 mpis28_166)))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_162 dest-phase-id))"
"(add-module-path-index! mpis_161 self_163)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss))))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(pos_167)(list 'vector-ref syntax-literals-id(list 'quote pos_167))))"
"(define-values"
"(syntax-literals-as-vector)"
"(lambda(sl_168)(list->vector(alt-reverse(syntax-literals-stxes sl_168)))))"
"(define-values(local-key->symbol)(lambda(key_170) key_170))"
"(define-values"
"(select-fresh)"
"(lambda(sym_171 header_172)"
"(if(symbol-conflicts? sym_171 header_172)"
"((letrec-values(((loop_173)"
"(lambda(pos_174)"
"                          (let-values (((new-sym_175) (string->symbol (format \"~a/~a\" pos_174 sym_171))))"
"(if(symbol-conflicts? new-sym_175 header_172)(loop_173(add1 pos_174)) new-sym_175)))))"
" loop_173)"
" 1)"
" sym_171)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_176 header_177)"
"(let-values(((or-part_178)(built-in-symbol? sym_176)))"
"(if or-part_178 or-part_178(hash-ref(header-define-and-import-syms header_177) sym_176 #f)))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_179 defined?13_180 header14_181 mpi15_182 phase16_183 sym17_184 extra-inspector18_185)"
"(let-values(((header_186) header14_181))"
"(let-values(((mpi_187) mpi15_182))"
"(let-values(((phase_188) phase16_183))"
"(let-values(((sym_189) sym17_184))"
"(let-values(((extra-inspector_190) extra-inspector18_185))"
"(let-values(((defined?_191)(if defined?13_180 defined?12_179 #f)))"
"(let-values()"
"(let-values(((key_192)(variable-use3.1(module-use1.1 mpi_187 phase_188) sym_189)))"
"(let-values(((variable-uses_193)(header-require-var-to-import-sym header_186)))"
"(let-values(((var-sym_194)"
"(let-values(((or-part_195)(hash-ref variable-uses_193 key_192 #f)))"
"(if or-part_195"
" or-part_195"
"(let-values(((sym_196)(select-fresh(variable-use-sym key_192) header_186)))"
"(begin"
"(hash-set! variable-uses_193 key_192 sym_196)"
"(set-header-require-vars-in-order!"
" header_186"
"(cons key_192(header-require-vars-in-order header_186)))"
"(hash-set!"
"(header-define-and-import-syms header_186)"
" sym_196"
"(if defined?_191 'defined 'required))"
" sym_196))))))"
"(begin"
"(if extra-inspector_190"
"(let-values()"
"(let-values(((extra-inspectors_197)(header-import-sym-to-extra-inspectors header_186)))"
"(hash-update!"
" extra-inspectors_197"
" var-sym_194"
"(lambda(s_198)(set-add s_198 extra-inspector_190))"
" '#hasheq())))"
"(void))"
" var-sym_194)))))))))))))"
"(define-values"
"(unpack20.1$1)"
"(lambda(given-kws_199 given-args_200 header14_201 mpi15_202 phase16_203 sym17_204 extra-inspector18_205)"
"(let-values(((defined?13_206)(pair? given-kws_199)))"
"(let-values(((defined?12_207)(if defined?13_206(car given-args_200)(void))))"
"(register-required-variable-use!19.1"
" defined?12_207"
" defined?13_206"
" header14_201"
" mpi15_202"
" phase16_203"
" sym17_204"
" extra-inspector18_205)))))"
"(define-values"
"(register-required-variable-use!21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_208 given-argc_209)"
"(if(= given-argc_209 7)"
"(let-values(((l1_210) given-kws_208))"
"(let-values(((l1_211)(if(null? l1_210) l1_210(if(eq?(car l1_210) '#:defined?)(cdr l1_210) l1_210))))"
"(null? l1_211)))"
" #f))"
"(case-lambda"
"((given-kws_212 given-args_213 header_214 mpi_215 phase_216 sym_217 extra-inspector_218)"
"(unpack20.1$1 given-kws_212 given-args_213 header_214 mpi_215 phase_216 sym_217 extra-inspector_218)))"
" null"
" '(#:defined?)"
"(let-values(((register-required-variable-use!_219)"
"(case-lambda"
"((header_220 mpi_221 phase_222 sym_223 extra-inspector_224)"
"(unpack20.1$1 null null header_220 mpi_221 phase_222 sym_223 extra-inspector_224)))))"
" register-required-variable-use!_219)))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_225 def-sym_226)(hash-set!(header-define-and-import-syms header_225) def-sym_226 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_227 var-sym_228)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_227) var-sym_228 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_229 phase_230 cctx_231)"
"(let-values(((mod-use-to-link-sym_232)"
"(let-values(((lst_234)(header-require-vars-in-order header_229)))"
"(begin"
"(if(list? lst_234)(void)(let-values()(in-list lst_234)))"
"((letrec-values(((for-loop_235)"
"(lambda(ht_236 lst_237)"
"(if(pair? lst_237)"
"(let-values(((vu_238)(unsafe-car lst_237)))"
"(let-values(((ht_239)"
"(let-values(((ht_240) ht_236))"
"(let-values(((ht_241)"
"(let-values()"
"(let-values(((mu_242)"
"(variable-use-module-use"
" vu_238)))"
"(if(let-values(((or-part_243)"
"(hash-ref"
" ht_240"
" mu_242"
" #f)))"
"(if or-part_243"
" or-part_243"
"(eq?"
"(module-use-module mu_242)"
"(compile-context-self"
" cctx_231))))"
" ht_240"
"(hash-set"
" ht_240"
" mu_242"
"(string->symbol"
"(format"
"                                                                                     \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_242))"
"(module-use-phase mu_242)"
"(hash-count ht_240)))))))))"
"(values ht_241)))))"
"(for-loop_235 ht_239(unsafe-cdr lst_237))))"
" ht_236))))"
" for-loop_235)"
" '#hash()"
" lst_234)))))"
"(let-values(((link-mod-uses_233)(hash-keys mod-use-to-link-sym_232)))"
"(values"
" link-mod-uses_233"
"(alt-reverse"
"(let-values(((lst_244) link-mod-uses_233))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((mu_248)(unsafe-car lst_247)))"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250) fold-var_246))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_252)"
"(header-require-vars-in-order"
" header_229)))"
"(begin"
"(if(list? lst_252)"
"(void)"
"(let-values()(in-list lst_252)))"
"((letrec-values(((for-loop_253)"
"(lambda(fold-var_254"
" lst_255)"
"(if(pair? lst_255)"
"(let-values(((vu_256)"
"(unsafe-car"
" lst_255)))"
"(let-values(((fold-var_257)"
"(let-values(((fold-var_258)"
" fold-var_254))"
"(if(equal?"
" mu_248"
"(variable-use-module-use"
" vu_256))"
"(let-values(((fold-var_259)"
" fold-var_258))"
"(let-values(((fold-var_260)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_261)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_256)))"
"(let-values(((ex-sym_262)"
"(variable-use-sym"
" vu_256)))"
"(if(eq?"
" var-sym_261"
" ex-sym_262)"
" var-sym_261"
"(list"
" ex-sym_262"
" var-sym_261)))))"
" fold-var_259))))"
"(values"
" fold-var_260)))"
" fold-var_258))))"
"(for-loop_253"
" fold-var_257"
"(unsafe-cdr"
" lst_255))))"
" fold-var_254))))"
" for-loop_253)"
" null"
" lst_252)))))"
" fold-var_250))))"
"(values fold-var_251)))))"
"(for-loop_245 fold-var_249(unsafe-cdr lst_247))))"
" fold-var_246))))"
" for-loop_245)"
" null"
" lst_244))))"
"(alt-reverse"
"(let-values(((lst_263) link-mod-uses_233))"
"(begin"
"(if(list? lst_263)(void)(let-values()(in-list lst_263)))"
"((letrec-values(((for-loop_264)"
"(lambda(fold-var_265 lst_266)"
"(if(pair? lst_266)"
"(let-values(((mu_267)(unsafe-car lst_266)))"
"(let-values(((fold-var_268)"
"(let-values(((fold-var_269) fold-var_265))"
"(let-values(((fold-var_270)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_271)"
"(alt-reverse"
"(let-values(((lst_272)"
"(header-require-vars-in-order"
" header_229)))"
"(begin"
"(if(list? lst_272)"
"(void)"
"(let-values()"
"(in-list lst_272)))"
"((letrec-values(((for-loop_273)"
"(lambda(fold-var_274"
" lst_275)"
"(if(pair?"
" lst_275)"
"(let-values(((vu_276)"
"(unsafe-car"
" lst_275)))"
"(let-values(((fold-var_277)"
"(let-values(((fold-var_278)"
" fold-var_274))"
"(if(equal?"
" mu_267"
"(variable-use-module-use"
" vu_276))"
"(let-values(((fold-var_279)"
" fold-var_278))"
"(let-values(((fold-var_280)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_281)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_276)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_229)"
" var-sym_281"
" #f)))"
" fold-var_279))))"
"(values"
" fold-var_280)))"
" fold-var_278))))"
"(for-loop_273"
" fold-var_277"
"(unsafe-cdr"
" lst_275))))"
" fold-var_274))))"
" for-loop_273)"
" null"
" lst_272))))))"
"(if(ormap2 values extra-inspectorss_271)"
" extra-inspectorss_271"
" #f)))"
" fold-var_269))))"
"(values fold-var_270)))))"
"(for-loop_264 fold-var_268(unsafe-cdr lst_266))))"
" fold-var_265))))"
" for-loop_264)"
" null"
" lst_263))))"
"(alt-reverse"
"(let-values(((lst_282)(header-require-vars-in-order header_229)))"
"(begin"
"(if(list? lst_282)(void)(let-values()(in-list lst_282)))"
"((letrec-values(((for-loop_283)"
"(lambda(fold-var_284 lst_285)"
"(if(pair? lst_285)"
"(let-values(((vu_286)(unsafe-car lst_285)))"
"(let-values(((fold-var_287)"
"(let-values(((fold-var_288) fold-var_284))"
"(if(eq?"
"(module-use-module(variable-use-module-use vu_286))"
"(compile-context-self cctx_231))"
"(let-values(((fold-var_289) fold-var_288))"
"(let-values(((fold-var_290)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_291)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_286)))"
"(let-values(((ex-sym_292)"
"(variable-use-sym vu_286)))"
"(if(eq? var-sym_291 ex-sym_292)"
" var-sym_291"
"(list var-sym_291 ex-sym_292)))))"
" fold-var_289))))"
"(values fold-var_290)))"
" fold-var_288))))"
"(for-loop_283 fold-var_287(unsafe-cdr lst_285))))"
" fold-var_284))))"
" for-loop_283)"
" null"
" lst_282)))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_293)"
"(let-values(((p_294 base_295)(1/module-path-index-split mpi_293)))"
"(if(symbol? p_294)"
"(let-values() p_294)"
"(if(path? p_294)"
"(let-values()"
"            (let-values (((base_296 name_297 dir?_298) (split-path p_294))) (path-replace-extension name_297 #\"\")))"
"(if(string? p_294)"
"            (let-values () (path-replace-extension p_294 #\"\"))"
"(if(if(pair? p_294)(eq?(car p_294) 'quote) #f)"
"(let-values()(cadr p_294))"
"(if(if(pair? p_294)(eq?(car p_294) 'file) #f)"
"(let-values()"
"(let-values(((base_299 name_300 dir?_301)(split-path(cadr p_294))))"
"                    (path-replace-extension name_300 #\"\")))"
"(if(if(pair? p_294)(eq?(car p_294) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_294) #\"\"))"
"(let-values() 'module))))))))))"
"(void)"
"(void)"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(lifted/1.1$19 lifted/2.1$19 lifted/3.1$18 lifted/4.1$18 lifted/5.1$18)"
"(make-struct-type"
" 'make-instance-instance"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-instance-instance(case-lambda((self_11)(apply missing-kw self_11 null))))))"
"(current-inspector)"
"(case-lambda((self_12)(apply missing-kw self_12 null)))))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_13 inspector4_14 namespace1_15 phase-shift2_16 self3_17 set-transformer!6_18)"
"(let-values(((ns_19) namespace1_15))"
"(let-values(((phase-shift_20) phase-shift2_16))"
"(let-values(((self_21) self3_17))"
"(let-values(((inspector_22) inspector4_14))"
"(let-values(((bulk-binding-registry_23) bulk-binding-registry5_13))"
"(let-values(((set-transformer!_24) set-transformer!6_18))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_19"
" phase-shift-id"
" phase-shift_20"
" self-id"
" self_21"
" inspector-id"
" inspector_22"
" bulk-binding-registry-id"
" bulk-binding-registry_23"
" set-transformer!-id"
" set-transformer!_24))))))))))"
"(define-values"
"(unpack14.1$1)"
"(lambda(given-kws_25 given-args_26)"
"(let-values(((bulk-binding-registry5_27)(car given-args_26))"
"((given-kws_28)(cdr given-kws_25))"
"((given-args_29)(cdr given-args_26)))"
"(let-values(((inspector4_30)(car given-args_29))"
"((given-kws_31)(cdr given-kws_28))"
"((given-args_32)(cdr given-args_29)))"
"(let-values(((namespace1_33)(car given-args_32))"
"((given-kws_34)(cdr given-kws_31))"
"((given-args_35)(cdr given-args_32)))"
"(let-values(((phase-shift2_36)(car given-args_35))"
"((given-kws_37)(cdr given-kws_34))"
"((given-args_38)(cdr given-args_35)))"
"(let-values(((self3_39)(car given-args_38))"
"((given-kws_40)(cdr given-kws_37))"
"((given-args_41)(cdr given-args_38)))"
"(let-values(((set-transformer!6_42)(car given-args_41)))"
"(make-instance-instance13.1"
" bulk-binding-registry5_27"
" inspector4_30"
" namespace1_33"
" phase-shift2_36"
" self3_39"
" set-transformer!6_42)))))))))"
"(define-values"
"(make-instance-instance15.1)"
"(lifted/2.1$19"
"(lambda(given-kws_43 given-argc_44)"
"(if(= given-argc_44 2)"
"(let-values(((l2_45) given-kws_43))"
"(if(pair? l2_45)"
"(if(eq?(car l2_45) '#:bulk-binding-registry)"
"(let-values(((l2_46)(cdr l2_45)))"
"(if(pair? l2_46)"
"(if(eq?(car l2_46) '#:inspector)"
"(let-values(((l2_47)(cdr l2_46)))"
"(if(pair? l2_47)"
"(if(eq?(car l2_47) '#:namespace)"
"(let-values(((l2_48)(cdr l2_47)))"
"(if(pair? l2_48)"
"(if(eq?(car l2_48) '#:phase-shift)"
"(let-values(((l2_49)(cdr l2_48)))"
"(if(pair? l2_49)"
"(if(eq?(car l2_49) '#:self)"
"(let-values(((l2_50)(cdr l2_49)))"
"(if(pair? l2_50)"
"(if(eq?(car l2_50) '#:set-transformer!)(null?(cdr l2_50)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_51 given-args_52)(unpack14.1$1 given-kws_51 given-args_52)))"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)))"
"(define-values"
"(lifted/6.1$7 lifted/7.1$7 lifted/8.1$7 lifted/9.1$7 lifted/10.1$7)"
"(make-struct-type"
" 'make-module-body-instance-instance"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-module-body-instance-instance(case-lambda((self_53)(apply missing-kw self_53 null))))))"
"(current-inspector)"
"(case-lambda((self_54)(apply missing-kw self_54 null)))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_55)"
"(let-values(((set-transformer!_56) set-transformer!16_55))"
"(let-values()(1/make-instance 'body-instance #f set-transformer!-id set-transformer!_56)))))"
"(define-values"
"(unpack19.1)"
"(lambda(given-kws_57 given-args_58)"
"(let-values(((set-transformer!16_59)(car given-args_58)))"
"(make-module-body-instance-instance18.1 set-transformer!16_59))))"
"(define-values"
"(make-module-body-instance-instance20.1)"
"(lifted/7.1$7"
"(lambda(given-kws_60 given-argc_61)"
"(if(= given-argc_61 2)"
"(let-values(((l2_62) given-kws_60))"
"(if(pair? l2_62)(if(eq?(car l2_62) '#:set-transformer!)(null?(cdr l2_62)) #f) #f))"
" #f))"
"(case-lambda((given-kws_63 given-args_64)(unpack19.1 given-kws_63 given-args_64)))"
" '(#:set-transformer!)"
" '(#:set-transformer!)))"
"(void)"
"(void)"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(lifted/1.1$18 lifted/2.1$18 lifted/3.1$17 lifted/4.1$17 lifted/5.1$17)"
"(make-struct-type"
" 'make-eager-instance-instance"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-eager-instance-instance(case-lambda((self_6)(apply missing-kw self_6 null))))))"
"(current-inspector)"
"(case-lambda((self_7)(apply missing-kw self_7 null)))))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_8 dest-phase2_9 inspector5_10 namespace1_11 self3_12)"
"(let-values(((ns_13) namespace1_11))"
"(let-values(((dest-phase_14) dest-phase2_9))"
"(let-values(((self_15) self3_12))"
"(let-values(((bulk-binding-registry_16) bulk-binding-registry4_8))"
"(let-values(((inspector_17) inspector5_10))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_13"
" dest-phase-id"
" dest-phase_14"
" self-id"
" self_15"
" bulk-binding-registry-id"
" bulk-binding-registry_16"
" inspector-id"
" inspector_17"
" 'swap-top-level-scopes"
" swap-top-level-scopes)))))))))"
"(define-values"
"(unpack12.1$1)"
"(lambda(given-kws_18 given-args_19)"
"(let-values(((bulk-binding-registry4_20)(car given-args_19))"
"((given-kws_21)(cdr given-kws_18))"
"((given-args_22)(cdr given-args_19)))"
"(let-values(((dest-phase2_23)(car given-args_22))"
"((given-kws_24)(cdr given-kws_21))"
"((given-args_25)(cdr given-args_22)))"
"(let-values(((inspector5_26)(car given-args_25))"
"((given-kws_27)(cdr given-kws_24))"
"((given-args_28)(cdr given-args_25)))"
"(let-values(((namespace1_29)(car given-args_28))"
"((given-kws_30)(cdr given-kws_27))"
"((given-args_31)(cdr given-args_28)))"
"(let-values(((self3_32)(car given-args_31)))"
"(make-eager-instance-instance11.1"
" bulk-binding-registry4_20"
" dest-phase2_23"
" inspector5_26"
" namespace1_29"
" self3_32))))))))"
"(define-values"
"(make-eager-instance-instance13.1)"
"(lifted/2.1$18"
"(lambda(given-kws_33 given-argc_34)"
"(if(= given-argc_34 2)"
"(let-values(((l2_35) given-kws_33))"
"(if(pair? l2_35)"
"(if(eq?(car l2_35) '#:bulk-binding-registry)"
"(let-values(((l2_36)(cdr l2_35)))"
"(if(pair? l2_36)"
"(if(eq?(car l2_36) '#:dest-phase)"
"(let-values(((l2_37)(cdr l2_36)))"
"(if(pair? l2_37)"
"(if(eq?(car l2_37) '#:inspector)"
"(let-values(((l2_38)(cdr l2_37)))"
"(if(pair? l2_38)"
"(if(eq?(car l2_38) '#:namespace)"
"(let-values(((l2_39)(cdr l2_38)))"
"(if(pair? l2_39)(if(eq?(car l2_39) '#:self)(null?(cdr l2_39)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_40 given-args_41)(unpack12.1$1 given-kws_40 given-args_41)))"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)))"
"(void)"
"(void)"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_1)"
"(let-values(((or-part_2)(number? datum_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_1)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_1)))(if or-part_4 or-part_4(bytes? datum_1)))))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table$1)(primitive-table '#%kernel))"
"(define-values(datum->syntax$3)(hash-ref kernel-primitive-table$1 'datum->syntax))"
"(define-values(syntax-property$2)(hash-ref kernel-primitive-table$1 'syntax-property))"
"(define-values(syntax-e$3)(hash-ref kernel-primitive-table$1 'syntax-e))"
"(define-values(syntax?$2)(hash-ref kernel-primitive-table$1 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_294)"
"(lambda(d3_295 srcloc1_296 srcloc2_297)"
"(let-values(((d_298) d3_295))"
"(let-values(((srcloc_299)(if srcloc2_297 srcloc1_296 #f)))"
"(let-values()(datum->syntax$3 #f d_298 srcloc_299)))))))"
"(case-lambda"
"((d_300)(datum->correlated4_294 d_300 #f #f))"
"((d_301 srcloc1_302)(datum->correlated4_294 d_301 srcloc1_302 #t)))))"
"(define-values(correlated-e)(lambda(e_303)(if(syntax?$2 e_303)(syntax-e$3 e_303) e_303)))"
"(define-values(correlated-cadr)(lambda(e_304)(car(correlated-e(cdr(correlated-e e_304))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_305)(let-values(((l_306)(correlated-e e_305)))(if(list? l_306)(length l_306) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_307)"
"((letrec-values(((loop_308)"
"(lambda(e_309)"
"(if(pair? e_309)"
"(let-values()(cons(car e_309)(loop_308(cdr e_309))))"
"(if(null? e_309)"
"(let-values() null)"
"(if(syntax?$2 e_309)"
"(let-values()(loop_308(syntax-e$3 e_309)))"
"                              (let-values () (error 'correlate->list \"not a list\"))))))))"
" loop_308)"
" e_307)))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_314 k_315)(syntax-property$2 e_314 k_315))"
"((e_316 k_317 v_318)(syntax-property$2 e_316 k_317 v_318))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_319)"
"(if(pair? s_319)"
"(let-values()(let-values(((r_320)(to-syntax-list.1$1(cdr s_319))))(if r_320(cons(car s_319) r_320) #f)))"
"(if(syntax?$2 s_319)"
"(let-values()(to-syntax-list.1$1(syntax-e$3 s_319)))"
"(if(list? s_319)(let-values() s_319)(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table)(1/primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(syntax-property-symbol-keys$1)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(syntax-position$1)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(syntax-column$1)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(syntax-source$1)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(syntax-e$2)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(srcloc->vector)"
"(lambda(s_16)"
"(if s_16"
"(vector(srcloc-source s_16)(srcloc-line s_16)(srcloc-column s_16)(srcloc-position s_16)(srcloc-span s_16))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(let-values(((e_3)"
"(if(if(datum-has-elements? s-exp_2)(syntax-srcloc stx_1) #f)"
"(let-values()"
"(datum->correlated"
"(correlated-e(datum->correlated s-exp_2))"
"(srcloc->vector(syntax-srcloc stx_1))))"
"(let-values()(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1)))))))"
"(let-values(((maybe-n_4)(syntax-property$1 stx_1 'inferred-name)))"
"(if maybe-n_4"
"(correlated-property e_3 'inferred-name(if(syntax?$1 maybe-n_4)(syntax->datum$1 maybe-n_4) maybe-n_4))"
" e_3)))))"
"(void)"
"(void)"
"(define-values"
"(compile$2)"
"(let-values(((compile7_6)"
"(lambda(in-s5_7 cctx6_8 name1_9 result-used?2_10 name3_11 result-used?4_12)"
"(let-values(((in-s_13) in-s5_7))"
"(let-values(((cctx_14) cctx6_8))"
"(let-values(((name_15)(if name3_11 name1_9 #f)))"
"(let-values(((result-used?_16)(if result-used?4_12 result-used?2_10 #t)))"
"(let-values()"
"(let-values(((compile_17)"
"(lambda(s_18 name_19 result-used?_20)"
"(compile$2 s_18 cctx_14 name_19 result-used?_20))))"
"(let-values(((s_21)(syntax-disarm$1 in-s_13)))"
"(if(pair?(syntax-e$1 s_21))"
"(let-values()"
"(let-values(((phase_22)(compile-context-phase cctx_14)))"
"(let-values(((core-sym_23)(core-form-sym s_21 phase_22)))"
"(let-values(((tmp_24) core-sym_23))"
"(let-values(((index_25)"
"(if(symbol? tmp_24)"
"(hash-ref"
" '#hasheq((#%app . 5)"
"(with-continuation-mark . 7)"
"(begin . 9)"
"(module . 2)"
"(#%expression . 13)"
"(set! . 10)"
"(let-values . 11)"
"(if . 6)"
"(quote-syntax . 15)"
"(quote . 14)"
"(letrec-values . 12)"
"(begin0 . 8)"
"(#%variable-reference . 16)"
"(lambda . 3)"
"(case-lambda . 4)"
"(#%top . 17)"
"(module* . 2))"
" tmp_24"
"(lambda() 0))"
"(if(equal? tmp_24 #f)(let-values() 1)(let-values() 0)))))"
"(if(unsafe-fx< index_25 8)"
"(if(unsafe-fx< index_25 3)"
"(if(unsafe-fx< index_25 1)"
"                                                  (let-values () (error \"unrecognized core form:\" core-sym_23))"
"(if(unsafe-fx< index_25 2)"
"(let-values()"
"(error"
"                                                       \"internal error; not a core form:\""
" s_21"
"                                                       \"at phase:\""
" phase_22))"
"                                                    (let-values () (error \"not a core expression form:\" s_21))))"
"(if(unsafe-fx< index_25 5)"
"(if(unsafe-fx< index_25 4)"
"(let-values()"
"(if result-used?_16"
"(let-values()"
"(let-values(((ok?_26 lambda28_27 formals29_28 body30_29)"
"(let-values(((s_42) s_21))"
"(let-values(((orig-s_43) s_42))"
"(let-values(((lambda28_44"
" formals29_45"
" body30_46)"
"(let-values(((s_47)"
"(if(syntax?$1"
" s_42)"
"(syntax-e$1"
" s_42)"
" s_42)))"
"(if(pair? s_47)"
"(let-values(((lambda31_48)"
"(let-values(((s_51)"
"(car"
" s_47)))"
" s_51))"
"((formals32_49"
" body33_50)"
"(let-values(((s_52)"
"(cdr"
" s_47)))"
"(let-values(((s_53)"
"(if(syntax?$1"
" s_52)"
"(syntax-e$1"
" s_52)"
" s_52)))"
"(if(pair?"
" s_53)"
"(let-values(((formals34_54)"
"(let-values(((s_56)"
"(car"
" s_53)))"
" s_56))"
"((body35_55)"
"(let-values(((s_57)"
"(cdr"
" s_53)))"
"(let-values(((s_58)"
"(if(syntax?$1"
" s_57)"
"(syntax-e$1"
" s_57)"
" s_57)))"
"(let-values(((flat-s_59)"
"(to-syntax-list.1"
" s_58)))"
"(if(not"
" flat-s_59)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_43))"
"(if(null?"
" flat-s_59)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_43))"
"(let-values()"
" flat-s_59))))))))"
"(values"
" formals34_54"
" body35_55))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_43))))))"
"(values"
" lambda31_48"
" formals32_49"
" body33_50))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_43)))))"
"(values"
" #t"
" lambda28_44"
" formals29_45"
" body30_46))))))"
"(add-lambda-properties"
"(correlate*"
" s_21"
"(list*"
" 'lambda"
"(compile-lambda formals29_28 body30_29 cctx_14)))"
" name_15"
" s_21)))"
"(let-values()"
"(correlate* s_21(list 'quote(syntax->datum$1 s_21))))))"
"(let-values()"
"(if result-used?_16"
"(let-values()"
"(let-values(((ok?_60 case-lambda36_61 formals37_62 body38_63)"
"(let-values(((s_76) s_21))"
"(let-values(((orig-s_77) s_76))"
"(let-values(((case-lambda36_78"
" formals37_79"
" body38_80)"
"(let-values(((s_81)"
"(if(syntax?$1"
" s_76)"
"(syntax-e$1"
" s_76)"
" s_76)))"
"(if(pair? s_81)"
"(let-values(((case-lambda39_82)"
"(let-values(((s_85)"
"(car"
" s_81)))"
" s_85))"
"((formals40_83"
" body41_84)"
"(let-values(((s_86)"
"(cdr"
" s_81)))"
"(let-values(((s_87)"
"(if(syntax?$1"
" s_86)"
"(syntax-e$1"
" s_86)"
" s_86)))"
"(let-values(((flat-s_88)"
"(to-syntax-list.1"
" s_87)))"
"(if(not"
" flat-s_88)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_77))"
"(let-values()"
"(let-values(((formals_89"
" body_90)"
"(let-values(((lst_91)"
" flat-s_88))"
"(begin"
"(if(list?"
" lst_91)"
"(void)"
"(let-values()"
"(in-list"
" lst_91)))"
"((letrec-values(((for-loop_92)"
"(lambda(formals_93"
" body_94"
" lst_95)"
"(if(pair?"
" lst_95)"
"(let-values(((s_96)"
"(unsafe-car"
" lst_95)))"
"(let-values(((formals_97"
" body_98)"
"(let-values(((formals_99)"
" formals_93)"
"((body_100)"
" body_94))"
"(let-values(((formals_101"
" body_102)"
"(let-values()"
"(let-values(((formals44_103"
" body45_104)"
"(let-values()"
"(let-values(((s_105)"
"(if(syntax?$1"
" s_96)"
"(syntax-e$1"
" s_96)"
" s_96)))"
"(if(pair?"
" s_105)"
"(let-values(((formals42_106)"
"(let-values(((s_108)"
"(car"
" s_105)))"
" s_108))"
"((body43_107)"
"(let-values(((s_109)"
"(cdr"
" s_105)))"
"(let-values(((s_110)"
"(if(syntax?$1"
" s_109)"
"(syntax-e$1"
" s_109)"
" s_109)))"
"(let-values(((flat-s_111)"
"(to-syntax-list.1"
" s_110)))"
"(if(not"
" flat-s_111)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_77))"
"(if(null?"
" flat-s_111)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_77))"
"(let-values()"
" flat-s_111))))))))"
"(values"
" formals42_106"
" body43_107))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_77))))))"
"(values"
"(cons"
" formals44_103"
" formals_99)"
"(cons"
" body45_104"
" body_100))))))"
"(values"
" formals_101"
" body_102)))))"
"(for-loop_92"
" formals_97"
" body_98"
"(unsafe-cdr"
" lst_95))))"
"(values"
" formals_93"
" body_94)))))"
" for-loop_92)"
" null"
" null"
" lst_91)))))"
"(values"
"(alt-reverse"
" formals_89)"
"(alt-reverse"
" body_90))))))))))"
"(values"
" case-lambda39_82"
" formals40_83"
" body41_84))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_77)))))"
"(values"
" #t"
" case-lambda36_78"
" formals37_79"
" body38_80))))))"
"(add-lambda-properties"
"(correlate*"
" s_21"
"(list*"
" 'case-lambda"
"(alt-reverse"
"(let-values(((lst_112) formals37_62)"
"((lst_113) body38_63))"
"(begin"
"(if(list? lst_112)"
"(void)"
"(let-values()(in-list lst_112)))"
"(if(list? lst_113)"
"(void)"
"(let-values()(in-list lst_113)))"
"((letrec-values(((for-loop_114)"
"(lambda(fold-var_115"
" lst_116"
" lst_117)"
"(if(if(pair? lst_116)"
"(pair? lst_117)"
" #f)"
"(let-values(((formals_118)"
"(unsafe-car"
" lst_116))"
"((body_119)"
"(unsafe-car"
" lst_117)))"
"(let-values(((fold-var_120)"
"(let-values(((fold-var_121)"
" fold-var_115))"
"(let-values(((fold-var_122)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
" formals_118"
" body_119"
" cctx_14))"
" fold-var_121))))"
"(values"
" fold-var_122)))))"
"(for-loop_114"
" fold-var_120"
"(unsafe-cdr lst_116)"
"(unsafe-cdr lst_117))))"
" fold-var_115))))"
" for-loop_114)"
" null"
" lst_112"
" lst_113))))))"
" name_15"
" s_21)))"
"(let-values()"
"(correlate* s_21(list 'quote(syntax->datum$1 s_21)))))))"
"(if(unsafe-fx< index_25 6)"
"(let-values()"
"(let-values(((ok?_123 #%app46_124 rest47_125)"
"(let-values(((s_137) s_21))"
"(let-values(((orig-s_138) s_137))"
"(let-values(((#%app46_139 rest47_140)"
"(let-values(((s_141)"
"(if(syntax?$1"
" s_137)"
"(syntax-e$1 s_137)"
" s_137)))"
"(if(pair? s_141)"
"(let-values(((#%app48_142)"
"(let-values(((s_144)"
"(car"
" s_141)))"
" s_144))"
"((rest49_143)"
"(let-values(((s_145)"
"(cdr"
" s_141)))"
" s_145)))"
"(values"
" #%app48_142"
" rest49_143))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_138)))))"
"(values #t #%app46_139 rest47_140))))))"
"(let-values(((es_136)"
"(let-values(((es_146) rest47_125))"
"(if(syntax?$1 es_146)"
"(syntax->list$1(syntax-disarm$1 es_146))"
" es_146))))"
"(alt-reverse"
"(let-values(((lst_147) es_136))"
"(begin"
"(if(list? lst_147)"
"(void)"
"(let-values()(in-list lst_147)))"
"((letrec-values(((for-loop_148)"
"(lambda(fold-var_149 lst_150)"
"(if(pair? lst_150)"
"(let-values(((s_151)"
"(unsafe-car"
" lst_150)))"
"(let-values(((fold-var_152)"
"(let-values(((fold-var_153)"
" fold-var_149))"
"(let-values(((fold-var_154)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_17"
" s_151"
" #f"
" #t))"
" fold-var_153))))"
"(values"
" fold-var_154)))))"
"(for-loop_148"
" fold-var_152"
"(unsafe-cdr lst_150))))"
" fold-var_149))))"
" for-loop_148)"
" null"
" lst_147)))))))"
"(if(unsafe-fx< index_25 7)"
"(let-values()"
"(let-values(((ok?_155 if50_156 tst51_157 thn52_158 els53_159)"
"(let-values(((s_175) s_21))"
"(let-values(((orig-s_176) s_175))"
"(let-values(((if50_177"
" tst51_178"
" thn52_179"
" els53_180)"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_175)"
"(syntax-e$1"
" s_175)"
" s_175)))"
"(if(pair? s_181)"
"(let-values(((if54_182)"
"(let-values(((s_186)"
"(car"
" s_181)))"
" s_186))"
"((tst55_183"
" thn56_184"
" els57_185)"
"(let-values(((s_187)"
"(cdr"
" s_181)))"
"(let-values(((s_188)"
"(if(syntax?$1"
" s_187)"
"(syntax-e$1"
" s_187)"
" s_187)))"
"(if(pair?"
" s_188)"
"(let-values(((tst58_189)"
"(let-values(((s_192)"
"(car"
" s_188)))"
" s_192))"
"((thn59_190"
" els60_191)"
"(let-values(((s_193)"
"(cdr"
" s_188)))"
"(let-values(((s_194)"
"(if(syntax?$1"
" s_193)"
"(syntax-e$1"
" s_193)"
" s_193)))"
"(if(pair?"
" s_194)"
"(let-values(((thn61_195)"
"(let-values(((s_197)"
"(car"
" s_194)))"
" s_197))"
"((els62_196)"
"(let-values(((s_198)"
"(cdr"
" s_194)))"
"(let-values(((s_199)"
"(if(syntax?$1"
" s_198)"
"(syntax-e$1"
" s_198)"
" s_198)))"
"(if(pair?"
" s_199)"
"(let-values(((els63_200)"
"(let-values(((s_201)"
"(car"
" s_199)))"
" s_201))"
"(()"
"(let-values(((s_202)"
"(cdr"
" s_199)))"
"(let-values(((s_203)"
"(if(syntax?$1"
" s_202)"
"(syntax-e$1"
" s_202)"
" s_202)))"
"(if(null?"
" s_203)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_176))))))"
"(values"
" els63_200))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_176))))))"
"(values"
" thn61_195"
" els62_196))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_176))))))"
"(values"
" tst58_189"
" thn59_190"
" els60_191))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_176))))))"
"(values"
" if54_182"
" tst55_183"
" thn56_184"
" els57_185))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_176)))))"
"(values"
" #t"
" if50_177"
" tst51_178"
" thn52_179"
" els53_180))))))"
"(let-values(((tst-e_174)(compile_17 tst51_157 #f #f)))"
"(if(eq?(correlated-e tst-e_174) #t)"
"(let-values()"
"(compile_17 thn52_158 name_15 result-used?_16))"
"(if(eq?(correlated-e tst-e_174) #f)"
"(let-values()"
"(compile_17 els53_159 name_15 result-used?_16))"
"(let-values()"
"(correlate*"
" s_21"
"(list"
" 'if"
" tst-e_174"
"(compile_17 thn52_158 name_15 result-used?_16)"
"(compile_17"
" els53_159"
" name_15"
" result-used?_16)))))))))"
"(let-values()"
"(let-values(((ok?_204 if64_205 key65_206 val66_207 body67_208)"
"(let-values(((s_223) s_21))"
"(let-values(((orig-s_224) s_223))"
"(let-values(((if64_225"
" key65_226"
" val66_227"
" body67_228)"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_223)"
"(syntax-e$1"
" s_223)"
" s_223)))"
"(if(pair? s_229)"
"(let-values(((if68_230)"
"(let-values(((s_234)"
"(car"
" s_229)))"
" s_234))"
"((key69_231"
" val70_232"
" body71_233)"
"(let-values(((s_235)"
"(cdr"
" s_229)))"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_235)"
"(syntax-e$1"
" s_235)"
" s_235)))"
"(if(pair?"
" s_236)"
"(let-values(((key72_237)"
"(let-values(((s_240)"
"(car"
" s_236)))"
" s_240))"
"((val73_238"
" body74_239)"
"(let-values(((s_241)"
"(cdr"
" s_236)))"
"(let-values(((s_242)"
"(if(syntax?$1"
" s_241)"
"(syntax-e$1"
" s_241)"
" s_241)))"
"(if(pair?"
" s_242)"
"(let-values(((val75_243)"
"(let-values(((s_245)"
"(car"
" s_242)))"
" s_245))"
"((body76_244)"
"(let-values(((s_246)"
"(cdr"
" s_242)))"
"(let-values(((s_247)"
"(if(syntax?$1"
" s_246)"
"(syntax-e$1"
" s_246)"
" s_246)))"
"(if(pair?"
" s_247)"
"(let-values(((body77_248)"
"(let-values(((s_249)"
"(car"
" s_247)))"
" s_249))"
"(()"
"(let-values(((s_250)"
"(cdr"
" s_247)))"
"(let-values(((s_251)"
"(if(syntax?$1"
" s_250)"
"(syntax-e$1"
" s_250)"
" s_250)))"
"(if(null?"
" s_251)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_224))))))"
"(values"
" body77_248))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_224))))))"
"(values"
" val75_243"
" body76_244))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_224))))))"
"(values"
" key72_237"
" val73_238"
" body74_239))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_224))))))"
"(values"
" if68_230"
" key69_231"
" val70_232"
" body71_233))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_224)))))"
"(values"
" #t"
" if64_225"
" key65_226"
" val66_227"
" body67_228))))))"
"(correlate*"
" s_21"
"(list"
" 'with-continuation-mark"
"(compile_17 key65_206 #f #t)"
"(compile_17 val66_207 #f #t)"
"(compile_17 body67_208 name_15 result-used?_16)))))))))"
"(if(unsafe-fx< index_25 12)"
"(if(unsafe-fx< index_25 9)"
"(let-values()"
"(let-values(((ok?_252 begin078_253 e79_254)"
"(let-values(((s_266) s_21))"
"(let-values(((orig-s_267) s_266))"
"(let-values(((begin078_268 e79_269)"
"(let-values(((s_270)"
"(if(syntax?$1 s_266)"
"(syntax-e$1 s_266)"
" s_266)))"
"(if(pair? s_270)"
"(let-values(((begin080_271)"
"(let-values(((s_273)"
"(car"
" s_270)))"
" s_273))"
"((e81_272)"
"(let-values(((s_274)"
"(cdr"
" s_270)))"
"(let-values(((s_275)"
"(if(syntax?$1"
" s_274)"
"(syntax-e$1"
" s_274)"
" s_274)))"
"(let-values(((flat-s_276)"
"(to-syntax-list.1"
" s_275)))"
"(if(not"
" flat-s_276)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_267))"
"(if(null?"
" flat-s_276)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_267))"
"(let-values()"
" flat-s_276))))))))"
"(values begin080_271 e81_272))"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_267)))))"
"(values #t begin078_268 e79_269))))))"
"(let-values(((es_265) e79_254))"
"(correlate*"
" s_21"
"(list*"
" 'begin0"
"(compile_17(car es_265) name_15 result-used?_16)"
"(alt-reverse"
"(let-values(((lst_277)(cdr es_265)))"
"(begin"
"(if(list? lst_277)"
"(void)"
"(let-values()(in-list lst_277)))"
"((letrec-values(((for-loop_278)"
"(lambda(fold-var_279 lst_280)"
"(if(pair? lst_280)"
"(let-values(((e_281)"
"(unsafe-car"
" lst_280)))"
"(let-values(((fold-var_282)"
"(let-values(((fold-var_283)"
" fold-var_279))"
"(let-values(((fold-var_284)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_17"
" e_281"
" #f"
" #f))"
" fold-var_283))))"
"(values"
" fold-var_284)))))"
"(for-loop_278"
" fold-var_282"
"(unsafe-cdr lst_280))))"
" fold-var_279))))"
" for-loop_278)"
" null"
" lst_277)))))))))"
"(if(unsafe-fx< index_25 10)"
"(let-values()"
"(let-values(((ok?_285 begin82_286 e83_287)"
"(let-values(((s_298) s_21))"
"(let-values(((orig-s_299) s_298))"
"(let-values(((begin82_300 e83_301)"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_298)"
"(syntax-e$1 s_298)"
" s_298)))"
"(if(pair? s_302)"
"(let-values(((begin84_303)"
"(let-values(((s_305)"
"(car"
" s_302)))"
" s_305))"
"((e85_304)"
"(let-values(((s_306)"
"(cdr"
" s_302)))"
"(let-values(((s_307)"
"(if(syntax?$1"
" s_306)"
"(syntax-e$1"
" s_306)"
" s_306)))"
"(let-values(((flat-s_308)"
"(to-syntax-list.1"
" s_307)))"
"(if(not"
" flat-s_308)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_299))"
"(if(null?"
" flat-s_308)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_299))"
"(let-values()"
" flat-s_308))))))))"
"(values"
" begin84_303"
" e85_304))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_299)))))"
"(values #t begin82_300 e83_301))))))"
"(correlate*"
" s_21"
"(compile-begin e83_287 cctx_14 name_15 result-used?_16))))"
"(if(unsafe-fx< index_25 11)"
"(let-values()"
"(let-values(((ok?_309 set!86_310 id87_311 rhs88_312)"
"(let-values(((s_325) s_21))"
"(let-values(((orig-s_326) s_325))"
"(let-values(((set!86_327 id87_328 rhs88_329)"
"(let-values(((s_330)"
"(if(syntax?$1"
" s_325)"
"(syntax-e$1"
" s_325)"
" s_325)))"
"(if(pair? s_330)"
"(let-values(((set!89_331)"
"(let-values(((s_334)"
"(car"
" s_330)))"
" s_334))"
"((id90_332"
" rhs91_333)"
"(let-values(((s_335)"
"(cdr"
" s_330)))"
"(let-values(((s_336)"
"(if(syntax?$1"
" s_335)"
"(syntax-e$1"
" s_335)"
" s_335)))"
"(if(pair?"
" s_336)"
"(let-values(((id92_337)"
"(let-values(((s_339)"
"(car"
" s_336)))"
"(if(let-values(((or-part_340)"
"(if(syntax?$1"
" s_339)"
"(symbol?"
"(syntax-e$1"
" s_339))"
" #f)))"
"(if or-part_340"
" or-part_340"
"(symbol?"
" s_339)))"
" s_339"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"not an identifier\""
" orig-s_326"
" s_339))))"
"((rhs93_338)"
"(let-values(((s_341)"
"(cdr"
" s_336)))"
"(let-values(((s_342)"
"(if(syntax?$1"
" s_341)"
"(syntax-e$1"
" s_341)"
" s_341)))"
"(if(pair?"
" s_342)"
"(let-values(((rhs94_343)"
"(let-values(((s_344)"
"(car"
" s_342)))"
" s_344))"
"(()"
"(let-values(((s_345)"
"(cdr"
" s_342)))"
"(let-values(((s_346)"
"(if(syntax?$1"
" s_345)"
"(syntax-e$1"
" s_345)"
" s_345)))"
"(if(null?"
" s_346)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_326))))))"
"(values"
" rhs94_343))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_326))))))"
"(values"
" id92_337"
" rhs93_338))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_326))))))"
"(values"
" set!89_331"
" id90_332"
" rhs91_333))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_326)))))"
"(values"
" #t"
" set!86_327"
" id87_328"
" rhs88_329))))))"
"(correlate*"
" s_21"
"(let-values(((...der/compile/expr.rkt:108:27_347)"
" compile-identifier27.1)"
"((temp95_348) id87_311)"
"((cctx96_349) cctx_14)"
"((temp97_350)"
"(compile_17 rhs88_312 id87_311 #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1"
" temp97_350"
" #t"
" #f"
" #f"
" temp95_348"
" cctx96_349)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:108:27_347"
" keyword-procedure-extract"
" '(#:set-to)"
" 4)"
" '(#:set-to)"
"(list temp97_350)"
" temp95_348"
" cctx96_349))))))"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:111:9_351)"
" compile-let18.1)"
"((core-sym98_352) core-sym_23)"
"((s99_353) s_21)"
"((cctx100_354) cctx_14)"
"((name101_355) name_15)"
"((temp102_356) #f)"
"((result-used?103_357) result-used?_16))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-let18.1))"
"(compile-let16.1"
" temp102_356"
" core-sym98_352"
" s99_353"
" cctx100_354"
" name101_355"
" result-used?103_357)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:111:9_351"
" keyword-procedure-extract"
" '(#:rec?)"
" 7)"
" '(#:rec?)"
"(list temp102_356)"
" core-sym98_352"
" s99_353"
" cctx100_354"
" name101_355"
" result-used?103_357)))))))"
"(if(unsafe-fx< index_25 14)"
"(if(unsafe-fx< index_25 13)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:113:9_358) compile-let18.1)"
"((core-sym104_359) core-sym_23)"
"((s105_360) s_21)"
"((cctx106_361) cctx_14)"
"((name107_362) name_15)"
"((temp108_363) #f)"
"((result-used?109_364) result-used?_16))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-let18.1))"
"(compile-let16.1"
" temp108_363"
" core-sym104_359"
" s105_360"
" cctx106_361"
" name107_362"
" result-used?109_364)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:113:9_358"
" keyword-procedure-extract"
" '(#:rec?)"
" 7)"
" '(#:rec?)"
"(list temp108_363)"
" core-sym104_359"
" s105_360"
" cctx106_361"
" name107_362"
" result-used?109_364))))"
"(let-values()"
"(let-values(((ok?_365 #%expression110_366 e111_367)"
"(let-values(((s_378) s_21))"
"(let-values(((orig-s_379) s_378))"
"(let-values(((#%expression110_380 e111_381)"
"(let-values(((s_382)"
"(if(syntax?$1"
" s_378)"
"(syntax-e$1 s_378)"
" s_378)))"
"(if(pair? s_382)"
"(let-values(((#%expression112_383)"
"(let-values(((s_385)"
"(car"
" s_382)))"
" s_385))"
"((e113_384)"
"(let-values(((s_386)"
"(cdr"
" s_382)))"
"(let-values(((s_387)"
"(if(syntax?$1"
" s_386)"
"(syntax-e$1"
" s_386)"
" s_386)))"
"(if(pair?"
" s_387)"
"(let-values(((e114_388)"
"(let-values(((s_389)"
"(car"
" s_387)))"
" s_389))"
"(()"
"(let-values(((s_390)"
"(cdr"
" s_387)))"
"(let-values(((s_391)"
"(if(syntax?$1"
" s_390)"
"(syntax-e$1"
" s_390)"
" s_390)))"
"(if(null?"
" s_391)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_379))))))"
"(values"
" e114_388))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_379))))))"
"(values"
" #%expression112_383"
" e113_384))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_379)))))"
"(values #t #%expression110_380 e111_381))))))"
"(compile_17 e111_367 name_15 result-used?_16))))"
"(if(unsafe-fx< index_25 15)"
"(let-values()"
"(let-values(((ok?_392 quote115_393 datum116_394)"
"(let-values(((s_406) s_21))"
"(let-values(((orig-s_407) s_406))"
"(let-values(((quote115_408 datum116_409)"
"(let-values(((s_410)"
"(if(syntax?$1"
" s_406)"
"(syntax-e$1 s_406)"
" s_406)))"
"(if(pair? s_410)"
"(let-values(((quote117_411)"
"(let-values(((s_413)"
"(car"
" s_410)))"
" s_413))"
"((datum118_412)"
"(let-values(((s_414)"
"(cdr"
" s_410)))"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(if(pair?"
" s_415)"
"(let-values(((datum119_416)"
"(let-values(((s_417)"
"(car"
" s_415)))"
" s_417))"
"(()"
"(let-values(((s_418)"
"(cdr"
" s_415)))"
"(let-values(((s_419)"
"(if(syntax?$1"
" s_418)"
"(syntax-e$1"
" s_418)"
" s_418)))"
"(if(null?"
" s_419)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_407))))))"
"(values"
" datum119_416))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_407))))))"
"(values"
" quote117_411"
" datum118_412))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_407)))))"
"(values #t quote115_408 datum116_409))))))"
"(let-values(((datum_405)(syntax->datum$1 datum116_394)))"
"(if(self-quoting-in-linklet? datum_405)"
"(let-values()(correlate* s_21 datum_405))"
"(let-values()"
"(correlate* s_21(list 'quote datum_405)))))))"
"(if(unsafe-fx< index_25 16)"
"(let-values()"
"(let-values(((ok?_420"
" quote-syntax120_421"
" datum121_422"
" _122_423)"
"(let-values(((s_436) s_21))"
"(let-values(((orig-s_437) s_436))"
"(let-values(((quote-syntax120_438"
" datum121_439"
" _122_440)"
"(let-values(((s_441)"
"(if(syntax?$1"
" s_436)"
"(syntax-e$1"
" s_436)"
" s_436)))"
"(if(pair? s_441)"
"(let-values(((quote-syntax123_442)"
"(let-values(((s_445)"
"(car"
" s_441)))"
" s_445))"
"((datum124_443"
" _125_444)"
"(let-values(((s_446)"
"(cdr"
" s_441)))"
"(let-values(((s_447)"
"(if(syntax?$1"
" s_446)"
"(syntax-e$1"
" s_446)"
" s_446)))"
"(if(pair?"
" s_447)"
"(let-values(((datum126_448)"
"(let-values(((s_450)"
"(car"
" s_447)))"
" s_450))"
"((_127_449)"
"(let-values(((s_451)"
"(cdr"
" s_447)))"
" s_451)))"
"(values"
" datum126_448"
" _127_449))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_437))))))"
"(values"
" quote-syntax123_442"
" datum124_443"
" _125_444))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_437)))))"
"(values"
" #t"
" quote-syntax120_438"
" datum121_439"
" _122_440))))))"
"(if result-used?_16"
"(compile-quote-syntax datum121_422 cctx_14)"
"(correlate*"
" s_21"
"(list 'quote(syntax->datum$1 datum121_422))))))"
"(if(unsafe-fx< index_25 17)"
"(let-values()"
"(let-values(((ok?_452 #%variable-reference128_453 id129_454)"
"(let-values(((s_482) s_21))"
"(if(let-values(((s_483)"
"(if(syntax?$1 s_482)"
"(syntax-e$1 s_482)"
" s_482)))"
"(if(pair? s_483)"
"(if(let-values(((s_484)"
"(car s_483)))"
" #t)"
"(let-values(((s_485)(cdr s_483)))"
"(let-values(((s_486)"
"(if(syntax?$1"
" s_485)"
"(syntax-e$1 s_485)"
" s_485)))"
"(if(pair? s_486)"
"(if(let-values(((s_487)"
"(car"
" s_486)))"
"(if(syntax?$1 s_487)"
"(symbol?"
"(syntax-e$1 s_487))"
" #f))"
"(let-values(((s_488)"
"(cdr s_486)))"
"(let-values(((s_489)"
"(if(syntax?$1"
" s_488)"
"(syntax-e$1"
" s_488)"
" s_488)))"
"(null? s_489)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_490) s_482))"
"(let-values(((#%variable-reference128_491"
" id129_492)"
"(let-values(((s_493)"
"(if(syntax?$1"
" s_482)"
"(syntax-e$1"
" s_482)"
" s_482)))"
"(let-values(((#%variable-reference130_494)"
"(let-values(((s_496)"
"(car"
" s_493)))"
" s_496))"
"((id131_495)"
"(let-values(((s_497)"
"(cdr"
" s_493)))"
"(let-values(((s_498)"
"(if(syntax?$1"
" s_497)"
"(syntax-e$1"
" s_497)"
" s_497)))"
"(let-values(((id132_499)"
"(let-values(((s_500)"
"(car"
" s_498)))"
" s_500))"
"(()"
"(let-values(((s_501)"
"(cdr"
" s_498)))"
"(let-values(((s_502)"
"(if(syntax?$1"
" s_501)"
"(syntax-e$1"
" s_501)"
" s_501)))"
"(values)))))"
"(values"
" id132_499))))))"
"(values"
" #%variable-reference130_494"
" id131_495)))))"
"(values"
" #t"
" #%variable-reference128_491"
" id129_492)))"
"(values #f #f #f)))))"
"(let-values(((ok?_465"
" #%variable-reference133_466"
" #%top134_467"
" id135_468)"
"(let-values(((s_503) s_21))"
"(if(if(not ok?_452)"
"(let-values(((s_504)"
"(if(syntax?$1 s_503)"
"(syntax-e$1 s_503)"
" s_503)))"
"(if(pair? s_504)"
"(if(let-values(((s_505)"
"(car s_504)))"
" #t)"
"(let-values(((s_506)"
"(cdr s_504)))"
"(let-values(((s_507)"
"(if(syntax?$1"
" s_506)"
"(syntax-e$1"
" s_506)"
" s_506)))"
"(if(pair? s_507)"
"(if(let-values(((s_508)"
"(car"
" s_507)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(if(pair? s_509)"
"(if(let-values(((s_510)"
"(car"
" s_509)))"
" #t)"
"(let-values(((s_511)"
"(cdr"
" s_509)))"
"(if(syntax?$1"
" s_511)"
"(symbol?"
"(syntax-e$1"
" s_511))"
" #f))"
" #f)"
" #f)))"
"(let-values(((s_512)"
"(cdr"
" s_507)))"
"(let-values(((s_513)"
"(if(syntax?$1"
" s_512)"
"(syntax-e$1"
" s_512)"
" s_512)))"
"(null? s_513)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_514) s_503))"
"(let-values(((#%variable-reference133_515"
" #%top134_516"
" id135_517)"
"(let-values(((s_518)"
"(if(syntax?$1"
" s_503)"
"(syntax-e$1"
" s_503)"
" s_503)))"
"(let-values(((#%variable-reference136_519)"
"(let-values(((s_522)"
"(car"
" s_518)))"
" s_522))"
"((#%top137_520"
" id138_521)"
"(let-values(((s_523)"
"(cdr"
" s_518)))"
"(let-values(((s_524)"
"(if(syntax?$1"
" s_523)"
"(syntax-e$1"
" s_523)"
" s_523)))"
"(let-values(((#%top139_525"
" id140_526)"
"(let-values(((s_527)"
"(car"
" s_524)))"
"(let-values(((s_528)"
"(if(syntax?$1"
" s_527)"
"(syntax-e$1"
" s_527)"
" s_527)))"
"(let-values(((#%top141_529)"
"(let-values(((s_531)"
"(car"
" s_528)))"
" s_531))"
"((id142_530)"
"(let-values(((s_532)"
"(cdr"
" s_528)))"
" s_532)))"
"(values"
" #%top141_529"
" id142_530)))))"
"(()"
"(let-values(((s_533)"
"(cdr"
" s_524)))"
"(let-values(((s_534)"
"(if(syntax?$1"
" s_533)"
"(syntax-e$1"
" s_533)"
" s_533)))"
"(values)))))"
"(values"
" #%top139_525"
" id140_526))))))"
"(values"
" #%variable-reference136_519"
" #%top137_520"
" id138_521)))))"
"(values"
" #t"
" #%variable-reference133_515"
" #%top134_516"
" id135_517)))"
"(values #f #f #f #f)))))"
"(let-values(((id_481)"
"(let-values(((or-part_535)"
"(if ok?_452 id129_454 #f)))"
"(if or-part_535"
" or-part_535"
"(if ok?_465 id135_468 #f)))))"
"(correlate*"
" s_21"
"(if id_481"
"(list"
" '#%variable-reference"
"(let-values(((id143_536) id_481)"
"((cctx144_537) cctx_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-identifier27.1))"
"(compile-identifier25.1"
" #f"
" #f"
" #f"
" #f"
" id143_536"
" cctx144_537)"
"(compile-identifier27.1"
" id143_536"
" cctx144_537))))"
" '(#%variable-reference)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_14)"
"(let-values()"
"(error"
"                                                                               \"found `#%top` in a module body:\""
" s_21))"
"(void))"
"(values))))"
"(let-values(((ok?_538 #%top145_539 id146_540)"
"(let-values(((s_551) s_21))"
"(let-values(((orig-s_552) s_551))"
"(let-values(((#%top145_553 id146_554)"
"(let-values(((s_555)"
"(if(syntax?$1"
" s_551)"
"(syntax-e$1"
" s_551)"
" s_551)))"
"(if(pair? s_555)"
"(let-values(((#%top147_556)"
"(let-values(((s_558)"
"(car"
" s_555)))"
" s_558))"
"((id148_557)"
"(let-values(((s_559)"
"(cdr"
" s_555)))"
"(if(let-values(((or-part_560)"
"(if(syntax?$1"
" s_559)"
"(symbol?"
"(syntax-e$1"
" s_559))"
" #f)))"
"(if or-part_560"
" or-part_560"
"(symbol?"
" s_559)))"
" s_559"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"not an identifier\""
" orig-s_552"
" s_559)))))"
"(values"
" #%top147_556"
" id148_557))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_552)))))"
"(values #t #%top145_553 id146_554))))))"
"(let-values(((...der/compile/expr.rkt:143:9_561)"
" compile-identifier27.1)"
"((temp149_562) id146_540)"
"((cctx150_563) cctx_14)"
"((temp151_564) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1"
" #f"
" #f"
" temp151_564"
" #t"
" temp149_562"
" cctx150_563)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:143:9_561"
" keyword-procedure-extract"
" '(#:top?)"
" 4)"
" '(#:top?)"
"(list temp151_564)"
" temp149_562"
" cctx150_563)))))))))))))))))"
"(if(identifier? s_21)"
"(let-values()"
"(let-values(((s152_565) s_21)((cctx153_566) cctx_14))"
"(if(variable-reference-constant?(#%variable-reference compile-identifier27.1))"
"(compile-identifier25.1 #f #f #f #f s152_565 cctx153_566)"
"(compile-identifier27.1 s152_565 cctx153_566))))"
"                                    (let-values () (error \"bad syntax after expansion:\" s_21))))))))))))))"
"(case-lambda"
"((in-s_567 cctx_568)(compile7_6 in-s_567 cctx_568 #f #f #f #f))"
"((in-s_569 cctx_570 name_571 result-used?2_572)(compile7_6 in-s_569 cctx_570 name_571 result-used?2_572 #t #t))"
"((in-s_573 cctx_574 name1_575)(compile7_6 in-s_573 cctx_574 name1_575 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_576 bodys_577 cctx_578)"
"(let-values(((phase_579)(compile-context-phase cctx_578)))"
"(let-values(((gen-formals_580)"
"((letrec-values(((loop_581)"
"(lambda(formals_582)"
"(if(identifier? formals_582)"
"(let-values()(local-id->symbol formals_582 phase_579))"
"(if(syntax?$1 formals_582)"
"(let-values()(loop_581(syntax-e$1 formals_582)))"
"(if(pair? formals_582)"
"(let-values()"
"(cons(loop_581(car formals_582))(loop_581(cdr formals_582))))"
"(let-values() null)))))))"
" loop_581)"
" formals_576)))"
"(list gen-formals_580(compile-sequence bodys_577 cctx_578 #f #t))))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_583 cctx_584 name_585 result-used?_586)"
"(if(null?(cdr bodys_583))"
"(compile$2(car bodys_583) cctx_584 name_585 result-used?_586)"
"(compile-begin bodys_583 cctx_584 name_585 result-used?_586))))"
"(define-values"
"(compile-begin)"
"(lambda(es_587 cctx_588 name_589 result-used?_590)"
"(let-values(((used-pos_591)(sub1(length es_587))))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_592) es_587)((start_593) 0))"
"(begin"
"(if(list? lst_592)(void)(let-values()(in-list lst_592)))"
"(if(exact-nonnegative-integer? start_593)(void)(let-values()(in-naturals start_593)))"
"((letrec-values(((for-loop_594)"
"(lambda(fold-var_595 lst_596 pos_597)"
"(if(if(pair? lst_596) #t #f)"
"(let-values(((e_598)(unsafe-car lst_596))((i_599) pos_597))"
"(let-values(((fold-var_600)"
"(let-values(((fold-var_601) fold-var_595))"
"(let-values(((fold-var_602)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_603)"
"(= i_599 used-pos_591)))"
"(compile$2"
" e_598"
" cctx_588"
"(if used?_603 name_589 #f)"
"(if used?_603 result-used?_590 #f))))"
" fold-var_601))))"
"(values fold-var_602)))))"
"(for-loop_594 fold-var_600(unsafe-cdr lst_596)(+ pos_597 1))))"
" fold-var_595))))"
" for-loop_594)"
" null"
" lst_592"
" start_593))))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_604 inferred-name_605 orig-s_606)"
"(letrec-values(((simplify-name_607)"
"(lambda(v_611)"
"(if(pair? v_611)"
"(let-values()"
"(let-values(((n1_612)(simplify-name_607(car v_611))))"
"(let-values(((n2_613)(simplify-name_607(cdr v_611))))"
"(if(eq? n1_612 n2_613) n1_612 v_611))))"
"(let-values() v_611)))))"
"(let-values(((name_608)"
"(let-values(((or-part_614)"
"(let-values(((v_615)"
"(simplify-name_607(syntax-property$1 orig-s_606 'inferred-name))))"
"(if(let-values(((or-part_616)(symbol? v_615)))"
"(if or-part_616"
" or-part_616"
"(let-values(((or-part_617)(syntax?$1 v_615)))"
"(if or-part_617 or-part_617(void? v_615)))))"
" v_615"
" #f))))"
"(if or-part_614 or-part_614 inferred-name_605))))"
"(let-values(((named-s_609)"
"(if name_608"
"(correlated-property"
" s_604"
" 'inferred-name"
"(if(syntax?$1 name_608)(syntax-e$1 name_608) name_608))"
" s_604)))"
"(let-values(((as-method_610)(syntax-property$1 orig-s_606 'method-arity-error)))"
"(if as-method_610(correlated-property named-s_609 'method-arity-error as-method_610) named-s_609)))))))"
"(define-values"
"(lifted/1.1$17 lifted/2.1$17 lifted/3.1$16 lifted/4.1$16 lifted/5.1$16)"
"(make-struct-type"
" 'compile-let"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'compile-let"
"(case-lambda"
"((self_618 core-sym_619 s_620 cctx_621 name_622 result-used?_623)"
"(apply missing-kw self_618 core-sym_619 s_620 cctx_621 name_622 result-used?_623 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_624 core-sym_625 s_626 cctx_627 name_628 result-used?_629)"
"(apply missing-kw self_624 core-sym_625 s_626 cctx_627 name_628 result-used?_629 null)))))"
"(define-values"
"(compile-let16.1)"
"(lambda(rec?9_630 core-sym11_631 s12_632 cctx13_633 name14_634 result-used?15_635)"
"(let-values(((core-sym_636) core-sym11_631))"
"(let-values(((s_637) s12_632))"
"(let-values(((cctx_638) cctx13_633))"
"(let-values(((name_639) name14_634))"
"(let-values(((rec?_640) rec?9_630))"
"(let-values(((result-used?_641) result-used?15_635))"
"(let-values()"
"(let-values(((rec?_642)(eq? core-sym_636 'letrec-values)))"
"(let-values(((ok?_643 let-values154_644 id155_645 rhs156_646 body157_647)"
"(let-values(((s_665) s_637))"
"(let-values(((orig-s_666) s_665))"
"(let-values(((let-values154_667 id155_668 rhs156_669 body157_670)"
"(let-values(((s_671)"
"(if(syntax?$1 s_665)(syntax-e$1 s_665) s_665)))"
"(if(pair? s_671)"
"(let-values(((let-values158_672)"
"(let-values(((s_676)(car s_671))) s_676))"
"((id159_673 rhs160_674 body161_675)"
"(let-values(((s_677)(cdr s_671)))"
"(let-values(((s_678)"
"(if(syntax?$1 s_677)"
"(syntax-e$1 s_677)"
" s_677)))"
"(if(pair? s_678)"
"(let-values(((id162_679 rhs163_680)"
"(let-values(((s_682)"
"(car s_678)))"
"(let-values(((s_683)"
"(if(syntax?$1"
" s_682)"
"(syntax-e$1"
" s_682)"
" s_682)))"
"(let-values(((flat-s_684)"
"(to-syntax-list.1"
" s_683)))"
"(if(not flat-s_684)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_666))"
"(let-values()"
"(let-values(((id_685"
" rhs_686)"
"(let-values(((lst_687)"
" flat-s_684))"
"(begin"
"(if(list?"
" lst_687)"
"(void)"
"(let-values()"
"(in-list"
" lst_687)))"
"((letrec-values(((for-loop_688)"
"(lambda(id_689"
" rhs_690"
" lst_691)"
"(if(pair?"
" lst_691)"
"(let-values(((s_692)"
"(unsafe-car"
" lst_691)))"
"(let-values(((id_693"
" rhs_694)"
"(let-values(((id_695)"
" id_689)"
"((rhs_696)"
" rhs_690))"
"(let-values(((id_697"
" rhs_698)"
"(let-values()"
"(let-values(((id168_699"
" rhs169_700)"
"(let-values()"
"(let-values(((s_701)"
"(if(syntax?$1"
" s_692)"
"(syntax-e$1"
" s_692)"
" s_692)))"
"(if(pair?"
" s_701)"
"(let-values(((id165_702)"
"(let-values(((s_704)"
"(car"
" s_701)))"
"(let-values(((s_705)"
"(if(syntax?$1"
" s_704)"
"(syntax-e$1"
" s_704)"
" s_704)))"
"(let-values(((flat-s_706)"
"(to-syntax-list.1"
" s_705)))"
"(if(not"
" flat-s_706)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_666))"
"(let-values()"
"(let-values(((id_707)"
"(let-values(((lst_708)"
" flat-s_706))"
"(begin"
"(if(list?"
" lst_708)"
"(void)"
"(let-values()"
"(in-list"
" lst_708)))"
"((letrec-values(((for-loop_709)"
"(lambda(id_710"
" lst_711)"
"(if(pair?"
" lst_711)"
"(let-values(((s_712)"
"(unsafe-car"
" lst_711)))"
"(let-values(((id_713)"
"(let-values(((id_714)"
" id_710))"
"(let-values(((id_715)"
"(let-values()"
"(let-values(((id170_716)"
"(let-values()"
"(if(let-values(((or-part_717)"
"(if(syntax?$1"
" s_712)"
"(symbol?"
"(syntax-e$1"
" s_712))"
" #f)))"
"(if or-part_717"
" or-part_717"
"(symbol?"
" s_712)))"
" s_712"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_666"
" s_712)))))"
"(cons"
" id170_716"
" id_714)))))"
"(values"
" id_715)))))"
"(for-loop_709"
" id_713"
"(unsafe-cdr"
" lst_711))))"
" id_710))))"
" for-loop_709)"
" null"
" lst_708)))))"
"(alt-reverse"
" id_707))))))))"
"((rhs166_703)"
"(let-values(((s_718)"
"(cdr"
" s_701)))"
"(let-values(((s_719)"
"(if(syntax?$1"
" s_718)"
"(syntax-e$1"
" s_718)"
" s_718)))"
"(if(pair?"
" s_719)"
"(let-values(((rhs167_720)"
"(let-values(((s_721)"
"(car"
" s_719)))"
" s_721))"
"(()"
"(let-values(((s_722)"
"(cdr"
" s_719)))"
"(let-values(((s_723)"
"(if(syntax?$1"
" s_722)"
"(syntax-e$1"
" s_722)"
" s_722)))"
"(if(null?"
" s_723)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_666))))))"
"(values"
" rhs167_720))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_666))))))"
"(values"
" id165_702"
" rhs166_703))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_666))))))"
"(values"
"(cons"
" id168_699"
" id_695)"
"(cons"
" rhs169_700"
" rhs_696))))))"
"(values"
" id_697"
" rhs_698)))))"
"(for-loop_688"
" id_693"
" rhs_694"
"(unsafe-cdr"
" lst_691))))"
"(values"
" id_689"
" rhs_690)))))"
" for-loop_688)"
" null"
" null"
" lst_687)))))"
"(values"
"(alt-reverse"
" id_685)"
"(alt-reverse"
" rhs_686)))))))))"
"((body164_681)"
"(let-values(((s_724)"
"(cdr s_678)))"
"(let-values(((s_725)"
"(if(syntax?$1"
" s_724)"
"(syntax-e$1"
" s_724)"
" s_724)))"
"(let-values(((flat-s_726)"
"(to-syntax-list.1"
" s_725)))"
"(if(not flat-s_726)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_666))"
"(if(null? flat-s_726)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_666))"
"(let-values()"
" flat-s_726))))))))"
"(values id162_679 rhs163_680 body164_681))"
"(raise-syntax-error$1"
" #f"
"                                                                             \"bad syntax\""
" orig-s_666))))))"
"(values let-values158_672 id159_673 rhs160_674 body161_675))"
"                                                        (raise-syntax-error$1 #f \"bad syntax\" orig-s_666)))))"
"(values #t let-values154_667 id155_668 rhs156_669 body157_670))))))"
"(let-values(((phase_662)(compile-context-phase cctx_638)))"
"(let-values(((idss_663) id155_645))"
"(let-values(((symss_664)"
"(alt-reverse"
"(let-values(((lst_727) idss_663))"
"(begin"
"(if(list? lst_727)(void)(let-values()(in-list lst_727)))"
"((letrec-values(((for-loop_728)"
"(lambda(fold-var_729 lst_730)"
"(if(pair? lst_730)"
"(let-values(((ids_731)(unsafe-car lst_730)))"
"(let-values(((fold-var_732)"
"(let-values(((fold-var_733)"
" fold-var_729))"
"(let-values(((fold-var_734)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_735)"
" ids_731))"
"(begin"
"(if(list?"
" lst_735)"
"(void)"
"(let-values()"
"(in-list"
" lst_735)))"
"((letrec-values(((for-loop_736)"
"(lambda(fold-var_737"
" lst_738)"
"(if(pair?"
" lst_738)"
"(let-values(((id_739)"
"(unsafe-car"
" lst_738)))"
"(let-values(((fold-var_740)"
"(let-values(((fold-var_741)"
" fold-var_737))"
"(let-values(((fold-var_742)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_743)"
"(local-id->symbol"
" id_739"
" phase_662)))"
"(if rec?_642"
"(add-undefined-error-name-property"
" sym_743"
" id_739)"
" sym_743)))"
" fold-var_741))))"
"(values"
" fold-var_742)))))"
"(for-loop_736"
" fold-var_740"
"(unsafe-cdr"
" lst_738))))"
" fold-var_737))))"
" for-loop_736)"
" null"
" lst_735)))))"
" fold-var_733))))"
"(values fold-var_734)))))"
"(for-loop_728"
" fold-var_732"
"(unsafe-cdr lst_730))))"
" fold-var_729))))"
" for-loop_728)"
" null"
" lst_727))))))"
"(correlate*"
" s_637"
"(list"
" core-sym_636"
"(alt-reverse"
"(let-values(((lst_744) symss_664)((lst_745) idss_663)((lst_746) rhs156_646))"
"(begin"
"(if(list? lst_744)(void)(let-values()(in-list lst_744)))"
"(if(list? lst_745)(void)(let-values()(in-list lst_745)))"
"(if(list? lst_746)(void)(let-values()(in-list lst_746)))"
"((letrec-values(((for-loop_747)"
"(lambda(fold-var_748 lst_749 lst_750 lst_751)"
"(if(if(pair? lst_749)"
"(if(pair? lst_750)(pair? lst_751) #f)"
" #f)"
"(let-values(((syms_752)(unsafe-car lst_749))"
"((ids_753)(unsafe-car lst_750))"
"((rhs_754)(unsafe-car lst_751)))"
"(let-values(((fold-var_755)"
"(let-values(((fold-var_756) fold-var_748))"
"(let-values(((fold-var_757)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" syms_752"
"(compile$2"
" rhs_754"
" cctx_638"
"(if(="
" 1"
"(length ids_753))"
"(car ids_753)"
" #f))))"
" fold-var_756))))"
"(values fold-var_757)))))"
"(for-loop_747"
" fold-var_755"
"(unsafe-cdr lst_749)"
"(unsafe-cdr lst_750)"
"(unsafe-cdr lst_751))))"
" fold-var_748))))"
" for-loop_747)"
" null"
" lst_744"
" lst_745"
" lst_746))))"
"(compile-sequence body157_647 cctx_638 name_639 result-used?_641)))))))))))))))))"
"(define-values"
"(unpack17.1$1)"
"(lambda(given-kws_758 given-args_759 core-sym11_760 s12_761 cctx13_762 name14_763 result-used?15_764)"
"(let-values(((rec?9_765)(car given-args_759)))"
"(compile-let16.1 rec?9_765 core-sym11_760 s12_761 cctx13_762 name14_763 result-used?15_764))))"
"(define-values"
"(compile-let18.1)"
"(lifted/2.1$17"
"(lambda(given-kws_766 given-argc_767)"
"(if(= given-argc_767 7)"
"(let-values(((l2_768) given-kws_766))"
"(if(pair? l2_768)(if(eq?(car l2_768) '#:rec?)(null?(cdr l2_768)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_769 given-args_770 core-sym_771 s_772 cctx_773 name_774 result-used?_775)"
"(unpack17.1$1 given-kws_769 given-args_770 core-sym_771 s_772 cctx_773 name_774 result-used?_775)))"
" '(#:rec?)"
" '(#:rec?)))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_776 orig-id_777)"
"(let-values(((id_778)(correlate* orig-id_777 sym_776)))"
"(correlated-property"
" id_778"
" 'undefined-error-name"
"(let-values(((or-part_779)(syntax-property$1 orig-id_777 'undefined-error-name)))"
"(if or-part_779 or-part_779(syntax-e$1 orig-id_777)))))))"
"(define-values"
"(compile-identifier25.1)"
"(lambda(set-to19_780 set-to21_781 top?20_782 top?22_783 s23_784 cctx24_785)"
"(let-values(((s_786) s23_784))"
"(let-values(((cctx_787) cctx24_785))"
"(let-values(((rhs_788)(if set-to21_781 set-to19_780 #f)))"
"(let-values(((top?_789)(if top?22_783 top?20_782 #f)))"
"(let-values()"
"(let-values(((phase_790)(compile-context-phase cctx_787)))"
"(let-values(((normal-b_791)"
"(let-values(((s171_794) s_786)((phase172_795) phase_790))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f s171_794 phase172_795)"
"(resolve+shift22.1 s171_794 phase172_795)))))"
"(let-values(((b_792)"
"(let-values(((or-part_796) normal-b_791))"
"(if or-part_796"
" or-part_796"
"(let-values(((or-part_797)"
"(resolve-with-top-level-bind-scope s_786 phase_790 cctx_787)))"
"(if or-part_797"
" or-part_797"
"(let-values(((temp173_798)(compile-context-self cctx_787))"
"((phase174_799) phase_790)"
"((temp175_800)(syntax-e$1 s_786)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp173_798"
" phase174_799"
" temp175_800)"
"(make-module-binding24.1 temp173_798 phase174_799 temp175_800)))))))))"
"(let-values(((sym_793)"
"(if(local-binding? b_792)"
"(let-values()"
"(let-values(((sym_801)(local-key->symbol(local-binding-key b_792))))"
"(begin"
"(if sym_801"
"(void)"
"                                            (let-values () (error \"missing a binding after expansion:\" s_786)))"
" sym_801)))"
"(if(module-binding? b_792)"
"(let-values()"
"(let-values(((mpi_802)"
"(if top?_789"
"(compile-context-self cctx_787)"
"(module-binding-module b_792))))"
"(let-values(((mod-name_803)(1/module-path-index-resolve mpi_802)))"
"(let-values(((ns_804)(compile-context-namespace cctx_787)))"
"(let-values(((mod_805)(namespace->module ns_804 mod-name_803)))"
"(if(if mod_805(module-primitive? mod_805) #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(zero?(module-binding-phase b_792))"
"(void)"
"(let-values()"
"(error"
"                                                                         \"internal error: non-zero phase for a primitive\")))"
"(values))))"
"(let-values((()"
"(begin"
"(if rhs_788"
"(let-values()"
"(error"
"                                                                           \"internal error: cannot assign to a primitive:\""
" s_786))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ns176_807) ns_804)"
"((mpi177_808) mpi_802)"
"((temp178_809) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns176_807"
" mpi177_808"
" temp178_809)"
"(namespace-module-instantiate!96.1"
" ns176_807"
" mpi177_808"
" temp178_809)))"
"(values))))"
"(let-values(((m-ns_806)"
"(let-values(((ns179_810) ns_804)"
"((mod-name180_811) mod-name_803)"
"((temp181_812) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns179_810"
" mod-name180_811"
" temp181_812)"
"(namespace->module-namespace82.1"
" ns179_810"
" mod-name180_811"
" temp181_812)))))"
"(module-binding-sym b_792))))))"
"(if(eq? mpi_802(compile-context-module-self cctx_787))"
"(let-values()"
"(let-values(((header_813)(compile-context-header cctx_787)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_813)"
"(module-binding-sym b_792))))"
"(let-values()"
"(let-values(((temp182_814)(compile-context-header cctx_787))"
"((mpi183_815) mpi_802)"
"((temp184_816)(module-binding-phase b_792))"
"((temp185_817)(module-binding-sym b_792))"
"((temp186_818)"
"(let-values(((or-part_819)"
"(module-binding-extra-inspector"
" b_792)))"
"(if or-part_819"
" or-part_819"
"(syntax-inspector s_786)))))"
"(if(variable-reference-constant?"
"(#%variable-reference register-required-variable-use!21.1))"
"(register-required-variable-use!19.1"
" #f"
" #f"
" temp182_814"
" mpi183_815"
" temp184_816"
" temp185_817"
" temp186_818)"
"(register-required-variable-use!21.1"
" temp182_814"
" mpi183_815"
" temp184_816"
" temp185_817"
" temp186_818)))))))))))"
"                                      (let-values () (error \"not a reference to a module or local binding:\" s_786))))))"
"(correlate* s_786(if rhs_788(list 'set! sym_793 rhs_788) sym_793)))))))))))))"
"(define-values"
"(unpack26.1)"
"(lambda(given-kws_820 given-args_821 s23_822 cctx24_823)"
"(let-values(((set-to21_824)(if(pair? given-kws_820)(eq? '#:set-to(car given-kws_820)) #f)))"
"(let-values(((set-to19_825)(if set-to21_824(car given-args_821)(void)))"
"((given-kws_826)(if set-to21_824(cdr given-kws_820) given-kws_820))"
"((given-args_827)(if set-to21_824(cdr given-args_821) given-args_821)))"
"(let-values(((top?22_828)(pair? given-kws_826)))"
"(let-values(((top?20_829)(if top?22_828(car given-args_827)(void))))"
"(compile-identifier25.1 set-to19_825 set-to21_824 top?20_829 top?22_828 s23_822 cctx24_823)))))))"
"(define-values"
"(compile-identifier27.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_830 given-argc_831)"
"(if(= given-argc_831 4)"
"(let-values(((l1_832) given-kws_830))"
"(let-values(((l1_833)(if(null? l1_832) l1_832(if(eq?(car l1_832) '#:set-to)(cdr l1_832) l1_832))))"
"(let-values(((l1_834) l1_833))"
"(let-values(((l1_835)(if(null? l1_834) l1_834(if(eq?(car l1_834) '#:top?)(cdr l1_834) l1_834))))"
"(null? l1_835)))))"
" #f))"
"(case-lambda"
"((given-kws_836 given-args_837 s_838 cctx_839)(unpack26.1 given-kws_836 given-args_837 s_838 cctx_839)))"
" null"
" '(#:set-to #:top?)"
"(let-values(((compile-identifier_840)(case-lambda((s_841 cctx_842)(unpack26.1 null null s_841 cctx_842)))))"
" compile-identifier_840)))"
"(define-values"
"(resolve-with-top-level-bind-scope)"
"(lambda(s_843 phase_844 cctx_845)"
"(let-values(((top-level-scope_846)(compile-context-top-level-bind-scope cctx_845)))"
"(if top-level-scope_846"
"(let-values()"
"(let-values(((tl-s_847)(add-scope s_843 top-level-scope_846)))"
"(let-values(((tl-s187_848) tl-s_847)((phase188_849) phase_844))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f tl-s187_848 phase188_849)"
"(resolve+shift22.1 tl-s187_848 phase188_849)))))"
"(let-values() #f)))))"
"(define-values"
"(local-id->symbol)"
"(lambda(id_850 phase_851)"
"(let-values(((b_852)"
"(let-values(((id189_853) id_850)((phase190_854) phase_851))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1 #f #f #f #f #f #f #f #f id189_853 phase190_854)"
"(resolve31.1 id189_853 phase190_854)))))"
"(begin"
"        (if (local-binding? b_852) (void) (let-values () (error \"bad binding:\" id_850 phase_851 b_852)))"
"(local-key->symbol(local-binding-key b_852))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_855 cctx_856)"
"(let-values(((pos_857)(add-syntax-literal!(compile-context-header cctx_856) q_855)))"
"(if(compile-context-lazy-syntax-literals? cctx_856)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_857))"
"(let-values()(generate-eager-syntax-literal-lookup pos_857))))))"
"(void)"
"(void)"
"(define-values"
"(def-ids-to-binding-syms)"
"(lambda(ids_1 phase_2 self_3 cctx_4)"
"(alt-reverse"
"(let-values(((lst_5) ids_1))"
"(begin"
"(if(list? lst_5)(void)(let-values()(in-list lst_5)))"
"((letrec-values(((for-loop_6)"
"(lambda(fold-var_7 lst_8)"
"(if(pair? lst_8)"
"(let-values(((id_9)(unsafe-car lst_8)))"
"(let-values(((fold-var_10)"
"(let-values(((fold-var_11) fold-var_7))"
"(let-values(((fold-var_12)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((top-level-scope_13)"
"(compile-context-top-level-bind-scope"
" cctx_4)))"
"(let-values(((tl-id_14)"
"(if top-level-scope_13"
"(add-scope"
" id_9"
" top-level-scope_13)"
" id_9)))"
"(let-values(((b_15)"
"(let-values(((...ile/id-to-symbol.rkt:18:14_16)"
" resolve+shift22.1)"
"((tl-id1_17)"
" tl-id_14)"
"((phase2_18) phase_2)"
"((temp3_19) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp3_19"
" #t"
" #f"
" #f"
" tl-id1_17"
" phase2_18)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ile/id-to-symbol.rkt:18:14_16"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_19)"
" tl-id1_17"
" phase2_18)))))"
"(begin"
"(if(if(module-binding? b_15)"
"(if(eq?"
" self_3"
"(module-binding-module b_15))"
"(eqv?"
" phase_2"
"(module-binding-phase b_15))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                                 \"bad binding for definition:\""
" id_9"
" self_3"
"                                                                                 \"vs.\""
"(if b_15"
"(module-binding-module b_15)"
" #f)"
" phase_2)))"
"(module-binding-sym b_15))))))"
" fold-var_11))))"
"(values fold-var_12)))))"
"(for-loop_6 fold-var_10(unsafe-cdr lst_8))))"
" fold-var_7))))"
" for-loop_6)"
" null"
" lst_5))))))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$16 lifted/2.1$16 lifted/3.1$15 lifted/4.1$15 lifted/5.1$15)"
"(make-struct-type"
" 'compile-forms"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'compile-forms"
"(case-lambda((self_6 bodys_7 cctx_8 mpis_9)(apply missing-kw self_6 bodys_7 cctx_8 mpis_9 null))))))"
"(current-inspector)"
"(case-lambda((self_10 bodys_11 cctx_12 mpis_13)(apply missing-kw self_10 bodys_11 cctx_12 mpis_13 null)))))"
"(define-values"
"(compile-forms24.1)"
"(lambda(body-imports1_14"
" body-suffix-forms2_15"
" body-suffix-forms12_16"
" compiled-expression-callback6_17"
" compiled-expression-callback16_18"
" definition-callback7_19"
" definition-callback17_20"
" encoded-root-expand-ctx-box4_21"
" encoded-root-expand-ctx-box14_22"
" force-phases3_23"
" force-phases13_24"
" get-module-linklet-info9_25"
" get-module-linklet-info19_26"
" other-form-callback8_27"
" other-form-callback18_28"
" root-ctx-only-if-syntax?5_29"
" root-ctx-only-if-syntax?15_30"
" to-source?10_31"
" to-source?20_32"
" bodys21_33"
" cctx22_34"
" mpis23_35)"
"(let-values(((bodys_36) bodys21_33))"
"(let-values(((cctx_37) cctx22_34))"
"(let-values(((mpis_38) mpis23_35))"
"(let-values(((body-imports_39) body-imports1_14))"
"(let-values(((body-suffix-forms_40)(if body-suffix-forms12_16 body-suffix-forms2_15 null)))"
"(let-values(((force-phases_41)(if force-phases13_24 force-phases3_23 null)))"
"(let-values(((encoded-root-expand-ctx-box_42)"
"(if encoded-root-expand-ctx-box14_22 encoded-root-expand-ctx-box4_21 #f)))"
"(let-values(((root-ctx-only-if-syntax?_43)"
"(if root-ctx-only-if-syntax?15_30 root-ctx-only-if-syntax?5_29 #f)))"
"(let-values(((compiled-expression-callback_44)"
"(if compiled-expression-callback16_18 compiled-expression-callback6_17 void)))"
"(let-values(((definition-callback_45)"
"(if definition-callback17_20 definition-callback7_19 void)))"
"(let-values(((other-form-callback_46)"
"(if other-form-callback18_28 other-form-callback8_27 void)))"
"(let-values(((get-module-linklet-info_47)"
"(if get-module-linklet-info19_26"
" get-module-linklet-info9_25"
"(lambda(mod-name_48 p_49) #f))))"
"(let-values(((to-source?_50)(if to-source?20_32 to-source?10_31 #f)))"
"(let-values()"
"(let-values(((phase_51)(compile-context-phase cctx_37)))"
"(let-values(((self_52)(compile-context-self cctx_37)))"
"(let-values(((syntax-literals_53)(make-syntax-literals)))"
"(let-values(((phase-to-body_54)(make-hasheqv)))"
"(let-values(((add-body!_55)"
"(lambda(phase_79 body_80)"
"(hash-update!"
" phase-to-body_54"
" phase_79"
"(lambda(l_81)(cons body_80 l_81))"
" null))))"
"(let-values(((phase-to-header_56)(make-hasheqv)))"
"(let-values(((find-or-create-header!_57)"
"(lambda(phase_82)"
"(let-values(((or-part_83)"
"(hash-ref phase-to-header_56 phase_82 #f)))"
"(if or-part_83"
" or-part_83"
"(let-values(((header_84)"
"(make-header mpis_38 syntax-literals_53)))"
"(begin"
"(hash-set! phase-to-header_56 phase_82 header_84)"
" header_84)))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_85) force-phases_41))"
"(begin"
"(if(list? lst_85)"
"(void)"
"(let-values()(in-list lst_85)))"
"((letrec-values(((for-loop_86)"
"(lambda(fold-var_87 lst_88)"
"(if(pair? lst_88)"
"(let-values(((phase_89)"
"(unsafe-car"
" lst_88)))"
"(let-values(((fold-var_90)"
"(let-values(((fold-var_91)"
" fold-var_87))"
"(let-values(((fold-var_92)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_57"
" phase_89)"
"(add-body!_55"
" phase_89"
" '(void))))"
"(void)))))"
"(values"
" fold-var_92)))))"
"(for-loop_86"
" fold-var_90"
"(unsafe-cdr lst_88))))"
" fold-var_87))))"
" for-loop_86)"
"(void)"
" lst_85)))"
"(values))))"
"(let-values(((saw-define-syntaxes?_58) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_37)"
"(let-values()"
"((letrec-values(((loop!_93)"
"(lambda(bodys_94"
" phase_95"
" header_96)"
"(let-values(((lst_97)"
" bodys_94))"
"(begin"
"(if(list? lst_97)"
"(void)"
"(let-values()"
"(in-list lst_97)))"
"((letrec-values(((for-loop_98)"
"(lambda(fold-var_99"
" lst_100)"
"(if(pair?"
" lst_100)"
"(let-values(((body_101)"
"(unsafe-car"
" lst_100)))"
"(let-values(((fold-var_102)"
"(let-values(((fold-var_103)"
" fold-var_99))"
"(let-values(((fold-var_104)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_105)"
"(core-form-sym"
" body_101"
" phase_95)))"
"(if(equal?"
" tmp_105"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_106"
" define-values28_107"
" id29_108"
" rhs30_109)"
"(let-values(((s_122)"
" body_101))"
"(let-values(((orig-s_123)"
" s_122))"
"(let-values(((define-values28_124"
" id29_125"
" rhs30_126)"
"(let-values(((s_127)"
"(if(syntax?$1"
" s_122)"
"(syntax-e$1"
" s_122)"
" s_122)))"
"(if(pair?"
" s_127)"
"(let-values(((define-values31_128)"
"(let-values(((s_131)"
"(car"
" s_127)))"
" s_131))"
"((id32_129"
" rhs33_130)"
"(let-values(((s_132)"
"(cdr"
" s_127)))"
"(let-values(((s_133)"
"(if(syntax?$1"
" s_132)"
"(syntax-e$1"
" s_132)"
" s_132)))"
"(if(pair?"
" s_133)"
"(let-values(((id34_134)"
"(let-values(((s_136)"
"(car"
" s_133)))"
"(let-values(((s_137)"
"(if(syntax?$1"
" s_136)"
"(syntax-e$1"
" s_136)"
" s_136)))"
"(let-values(((flat-s_138)"
"(to-syntax-list.1"
" s_137)))"
"(if(not"
" flat-s_138)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_123))"
"(let-values()"
"(let-values(((id_139)"
"(let-values(((lst_140)"
" flat-s_138))"
"(begin"
"(if(list?"
" lst_140)"
"(void)"
"(let-values()"
"(in-list"
" lst_140)))"
"((letrec-values(((for-loop_141)"
"(lambda(id_142"
" lst_143)"
"(if(pair?"
" lst_143)"
"(let-values(((s_144)"
"(unsafe-car"
" lst_143)))"
"(let-values(((id_145)"
"(let-values(((id_146)"
" id_142))"
"(let-values(((id_147)"
"(let-values()"
"(let-values(((id37_148)"
"(let-values()"
"(if(let-values(((or-part_149)"
"(if(syntax?$1"
" s_144)"
"(symbol?"
"(syntax-e$1"
" s_144))"
" #f)))"
"(if or-part_149"
" or-part_149"
"(symbol?"
" s_144)))"
" s_144"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_123"
" s_144)))))"
"(cons"
" id37_148"
" id_146)))))"
"(values"
" id_147)))))"
"(for-loop_141"
" id_145"
"(unsafe-cdr"
" lst_143))))"
" id_142))))"
" for-loop_141)"
" null"
" lst_140)))))"
"(alt-reverse"
" id_139))))))))"
"((rhs35_135)"
"(let-values(((s_150)"
"(cdr"
" s_133)))"
"(let-values(((s_151)"
"(if(syntax?$1"
" s_150)"
"(syntax-e$1"
" s_150)"
" s_150)))"
"(if(pair?"
" s_151)"
"(let-values(((rhs36_152)"
"(let-values(((s_153)"
"(car"
" s_151)))"
" s_153))"
"(()"
"(let-values(((s_154)"
"(cdr"
" s_151)))"
"(let-values(((s_155)"
"(if(syntax?$1"
" s_154)"
"(syntax-e$1"
" s_154)"
" s_154)))"
"(if(null?"
" s_155)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_123))))))"
"(values"
" rhs36_152))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_123))))))"
"(values"
" id34_134"
" rhs35_135))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_123))))))"
"(values"
" define-values31_128"
" id32_129"
" rhs33_130))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_123)))))"
"(values"
" #t"
" define-values28_124"
" id29_125"
" rhs30_126))))))"
"(let-values(((lst_156)"
"(def-ids-to-binding-syms"
" id29_108"
" phase_95"
" self_52"
" cctx_37)))"
"(begin"
"(if(list?"
" lst_156)"
"(void)"
"(let-values()"
"(in-list"
" lst_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_158"
" lst_159)"
"(if(pair?"
" lst_159)"
"(let-values(((sym_160)"
"(unsafe-car"
" lst_159)))"
"(let-values(((fold-var_161)"
"(let-values(((fold-var_162)"
" fold-var_158))"
"(let-values(((fold-var_163)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_164)"
"(select-fresh"
" sym_160"
" header_96)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_96)"
" sym_160"
" def-sym_164)"
"(set-header-binding-syms-in-order!"
" header_96"
"(cons"
" sym_160"
"(header-binding-syms-in-order"
" header_96)))"
"(register-as-defined!"
" header_96"
" def-sym_164))))"
"(void)))))"
"(values"
" fold-var_163)))))"
"(for-loop_157"
" fold-var_161"
"(unsafe-cdr"
" lst_159))))"
" fold-var_158))))"
" for-loop_157)"
"(void)"
" lst_156)))))"
"(if(equal?"
" tmp_105"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_165"
" begin-for-syntax38_166"
" e39_167)"
"(let-values(((s_178)"
" body_101))"
"(let-values(((orig-s_179)"
" s_178))"
"(let-values(((begin-for-syntax38_180"
" e39_181)"
"(let-values(((s_182)"
"(if(syntax?$1"
" s_178)"
"(syntax-e$1"
" s_178)"
" s_178)))"
"(if(pair?"
" s_182)"
"(let-values(((begin-for-syntax40_183)"
"(let-values(((s_185)"
"(car"
" s_182)))"
" s_185))"
"((e41_184)"
"(let-values(((s_186)"
"(cdr"
" s_182)))"
"(let-values(((s_187)"
"(if(syntax?$1"
" s_186)"
"(syntax-e$1"
" s_186)"
" s_186)))"
"(let-values(((flat-s_188)"
"(to-syntax-list.1"
" s_187)))"
"(if(not"
" flat-s_188)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_179))"
"(let-values()"
" flat-s_188)))))))"
"(values"
" begin-for-syntax40_183"
" e41_184))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_179)))))"
"(values"
" #t"
" begin-for-syntax38_180"
" e39_181))))))"
"(loop!_93"
" e39_167"
"(add1"
" phase_95)"
"(find-or-create-header!_57"
"(add1"
" phase_95)))))"
"(let-values()"
"(void))))))"
"(void)))))"
"(values"
" fold-var_104)))))"
"(for-loop_98"
" fold-var_102"
"(unsafe-cdr"
" lst_100))))"
" fold-var_99))))"
" for-loop_98)"
"(void)"
" lst_97))))))"
" loop!_93)"
" bodys_36"
" phase_51"
"(find-or-create-header!_57 phase_51)))"
"(void))"
"(values))))"
"(let-values(((as-required?_59)"
"(lambda(header_189)"
"(lambda(sym_190)"
"(registered-as-required? header_189 sym_190)))))"
"(let-values(((last-i_60)(sub1(length bodys_36))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_191)"
"(lambda(bodys_192"
" phase_193"
" header_194)"
"(let-values(((lst_195)"
" bodys_192)"
"((start_196)"
" 0))"
"(begin"
"(if(list? lst_195)"
"(void)"
"(let-values()"
"(in-list lst_195)))"
"(if(exact-nonnegative-integer?"
" start_196)"
"(void)"
"(let-values()"
"(in-naturals"
" start_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(fold-var_198"
" lst_199"
" pos_200)"
"(if(if(pair?"
" lst_199)"
" #t"
" #f)"
"(let-values(((in-body_201)"
"(unsafe-car"
" lst_199))"
"((i_202)"
" pos_200))"
"(let-values(((fold-var_203)"
"(let-values(((fold-var_204)"
" fold-var_198))"
"(let-values(((fold-var_205)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((body_206)"
"(syntax-disarm$1"
" in-body_201)))"
"(let-values(((tmp_207)"
"(core-form-sym"
" body_206"
" phase_193)))"
"(if(equal?"
" tmp_207"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_208"
" define-values42_209"
" id43_210"
" rhs44_211)"
"(let-values(((s_228)"
" body_206))"
"(let-values(((orig-s_229)"
" s_228))"
"(let-values(((define-values42_230"
" id43_231"
" rhs44_232)"
"(let-values(((s_233)"
"(if(syntax?$1"
" s_228)"
"(syntax-e$1"
" s_228)"
" s_228)))"
"(if(pair?"
" s_233)"
"(let-values(((define-values45_234)"
"(let-values(((s_237)"
"(car"
" s_233)))"
" s_237))"
"((id46_235"
" rhs47_236)"
"(let-values(((s_238)"
"(cdr"
" s_233)))"
"(let-values(((s_239)"
"(if(syntax?$1"
" s_238)"
"(syntax-e$1"
" s_238)"
" s_238)))"
"(if(pair?"
" s_239)"
"(let-values(((id48_240)"
"(let-values(((s_242)"
"(car"
" s_239)))"
"(let-values(((s_243)"
"(if(syntax?$1"
" s_242)"
"(syntax-e$1"
" s_242)"
" s_242)))"
"(let-values(((flat-s_244)"
"(to-syntax-list.1"
" s_243)))"
"(if(not"
" flat-s_244)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_229))"
"(let-values()"
"(let-values(((id_245)"
"(let-values(((lst_246)"
" flat-s_244))"
"(begin"
"(if(list?"
" lst_246)"
"(void)"
"(let-values()"
"(in-list"
" lst_246)))"
"((letrec-values(((for-loop_247)"
"(lambda(id_248"
" lst_249)"
"(if(pair?"
" lst_249)"
"(let-values(((s_250)"
"(unsafe-car"
" lst_249)))"
"(let-values(((id_251)"
"(let-values(((id_252)"
" id_248))"
"(let-values(((id_253)"
"(let-values()"
"(let-values(((id51_254)"
"(let-values()"
"(if(let-values(((or-part_255)"
"(if(syntax?$1"
" s_250)"
"(symbol?"
"(syntax-e$1"
" s_250))"
" #f)))"
"(if or-part_255"
" or-part_255"
"(symbol?"
" s_250)))"
" s_250"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_229"
" s_250)))))"
"(cons"
" id51_254"
" id_252)))))"
"(values"
" id_253)))))"
"(for-loop_247"
" id_251"
"(unsafe-cdr"
" lst_249))))"
" id_248))))"
" for-loop_247)"
" null"
" lst_246)))))"
"(alt-reverse"
" id_245))))))))"
"((rhs49_241)"
"(let-values(((s_256)"
"(cdr"
" s_239)))"
"(let-values(((s_257)"
"(if(syntax?$1"
" s_256)"
"(syntax-e$1"
" s_256)"
" s_256)))"
"(if(pair?"
" s_257)"
"(let-values(((rhs50_258)"
"(let-values(((s_259)"
"(car"
" s_257)))"
" s_259))"
"(()"
"(let-values(((s_260)"
"(cdr"
" s_257)))"
"(let-values(((s_261)"
"(if(syntax?$1"
" s_260)"
"(syntax-e$1"
" s_260)"
" s_260)))"
"(if(null?"
" s_261)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_229))))))"
"(values"
" rhs50_258))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_229))))))"
"(values"
" id48_240"
" rhs49_241))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_229))))))"
"(values"
" define-values45_234"
" id46_235"
" rhs47_236))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_229)))))"
"(values"
" #t"
" define-values42_230"
" id43_231"
" rhs44_232))))))"
"(let-values(((ids_224)"
" id43_210))"
"(let-values(((binding-syms_225)"
"(def-ids-to-binding-syms"
" ids_224"
" phase_193"
" self_52"
" cctx_37)))"
"(let-values(((def-syms_226)"
"(if(compile-context-module-self"
" cctx_37)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_262)"
" binding-syms_225))"
"(begin"
"(if(list?"
" lst_262)"
"(void)"
"(let-values()"
"(in-list"
" lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(fold-var_264"
" lst_265)"
"(if(pair?"
" lst_265)"
"(let-values(((binding-sym_266)"
"(unsafe-car"
" lst_265)))"
"(let-values(((fold-var_267)"
"(let-values(((fold-var_268)"
" fold-var_264))"
"(let-values(((fold-var_269)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_194)"
" binding-sym_266))"
" fold-var_268))))"
"(values"
" fold-var_269)))))"
"(for-loop_263"
" fold-var_267"
"(unsafe-cdr"
" lst_265))))"
" fold-var_264))))"
" for-loop_263)"
" null"
" lst_262)))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_270)"
" binding-syms_225))"
"(begin"
"(if(list?"
" lst_270)"
"(void)"
"(let-values()"
"(in-list"
" lst_270)))"
"((letrec-values(((for-loop_271)"
"(lambda(fold-var_272"
" lst_273)"
"(if(pair?"
" lst_273)"
"(let-values(((binding-sym_274)"
"(unsafe-car"
" lst_273)))"
"(let-values(((fold-var_275)"
"(let-values(((fold-var_276)"
" fold-var_272))"
"(let-values(((fold-var_277)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...der/compile/form.rkt:121:15_278)"
" register-required-variable-use!21.1)"
"((header52_279)"
" header_194)"
"((temp53_280)"
"(compile-context-self"
" cctx_37))"
"((phase54_281)"
" phase_193)"
"((binding-sym55_282)"
" binding-sym_274)"
"((temp56_283)"
" #f)"
"((temp57_284)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" register-required-variable-use!21.1))"
"(register-required-variable-use!19.1"
" temp57_284"
" #t"
" header52_279"
" temp53_280"
" phase54_281"
" binding-sym55_282"
" temp56_283)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/form.rkt:121:15_278"
" keyword-procedure-extract"
" '(#:defined?)"
" 7)"
" '(#:defined?)"
"(list"
" temp57_284)"
" header52_279"
" temp53_280"
" phase54_281"
" binding-sym55_282"
" temp56_283))))"
" fold-var_276))))"
"(values"
" fold-var_277)))))"
"(for-loop_271"
" fold-var_275"
"(unsafe-cdr"
" lst_273))))"
" fold-var_272))))"
" for-loop_271)"
" null"
" lst_270))))))))"
"(let-values(((rhs_227)"
"(compile$2"
" rhs44_211"
"(let-values(((the-struct_285)"
" cctx_37))"
"(if(compile-context?"
" the-struct_285)"
"(let-values(((phase58_286)"
" phase_193)"
"((header59_287)"
" header_194))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_285)"
" phase58_286"
"(compile-context-top-level-bind-scope"
" the-struct_285)"
"(compile-context-self"
" the-struct_285)"
"(compile-context-module-self"
" the-struct_285)"
"(compile-context-full-module-name"
" the-struct_285)"
"(compile-context-lazy-syntax-literals?"
" the-struct_285)"
" header59_287))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_285)))"
"(if(="
"(length"
" ids_224)"
" 1)"
"(car"
" ids_224)"
" #f))))"
"(begin"
"(definition-callback_45)"
"(compiled-expression-callback_44"
" rhs_227"
"(length"
" def-syms_226)"
" phase_193"
"(as-required?_59"
" header_194))"
"(add-body!_55"
" phase_193"
"(propagate-inline-property"
"(correlate*"
" body_206"
"(list"
" 'define-values"
" def-syms_226"
" rhs_227))"
" body_206))"
"(if(let-values(((or-part_288)"
"(compile-context-module-self"
" cctx_37)))"
"(if or-part_288"
" or-part_288"
"(null?"
" ids_224)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_55"
" phase_193"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_289)"
" def-syms_226))"
"(begin"
"(if(list?"
" lst_289)"
"(void)"
"(let-values()"
"(in-list"
" lst_289)))"
"((letrec-values(((for-loop_290)"
"(lambda(fold-var_291"
" lst_292)"
"(if(pair?"
" lst_292)"
"(let-values(((def-sym_293)"
"(unsafe-car"
" lst_292)))"
"(let-values(((fold-var_294)"
"(let-values(((fold-var_295)"
" fold-var_291))"
"(let-values(((fold-var_296)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_293"
" '(#f)))"
" fold-var_295))))"
"(values"
" fold-var_296)))))"
"(for-loop_290"
" fold-var_294"
"(unsafe-cdr"
" lst_292))))"
" fold-var_291))))"
" for-loop_290)"
" null"
" lst_289)))))"
" '((void))))"
"(add-body!_55"
" phase_193"
"(compile-top-level-bind"
" ids_224"
" binding-syms_225"
"(let-values(((the-struct_297)"
" cctx_37))"
"(if(compile-context?"
" the-struct_297)"
"(let-values(((phase60_298)"
" phase_193)"
"((header61_299)"
" header_194))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_297)"
" phase60_298"
"(compile-context-top-level-bind-scope"
" the-struct_297)"
"(compile-context-self"
" the-struct_297)"
"(compile-context-module-self"
" the-struct_297)"
"(compile-context-full-module-name"
" the-struct_297)"
"(compile-context-lazy-syntax-literals?"
" the-struct_297)"
" header61_299))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"compile-context?\""
" the-struct_297)))"
" #f))))))))))))"
"(if(equal?"
" tmp_207"
" 'define-syntaxes)"
"(let-values()"
"(let-values(((ok?_300"
" define-syntaxes62_301"
" id63_302"
" rhs64_303)"
"(let-values(((s_322)"
" body_206))"
"(let-values(((orig-s_323)"
" s_322))"
"(let-values(((define-syntaxes62_324"
" id63_325"
" rhs64_326)"
"(let-values(((s_327)"
"(if(syntax?$1"
" s_322)"
"(syntax-e$1"
" s_322)"
" s_322)))"
"(if(pair?"
" s_327)"
"(let-values(((define-syntaxes65_328)"
"(let-values(((s_331)"
"(car"
" s_327)))"
" s_331))"
"((id66_329"
" rhs67_330)"
"(let-values(((s_332)"
"(cdr"
" s_327)))"
"(let-values(((s_333)"
"(if(syntax?$1"
" s_332)"
"(syntax-e$1"
" s_332)"
" s_332)))"
"(if(pair?"
" s_333)"
"(let-values(((id68_334)"
"(let-values(((s_336)"
"(car"
" s_333)))"
"(let-values(((s_337)"
"(if(syntax?$1"
" s_336)"
"(syntax-e$1"
" s_336)"
" s_336)))"
"(let-values(((flat-s_338)"
"(to-syntax-list.1"
" s_337)))"
"(if(not"
" flat-s_338)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_323))"
"(let-values()"
"(let-values(((id_339)"
"(let-values(((lst_340)"
" flat-s_338))"
"(begin"
"(if(list?"
" lst_340)"
"(void)"
"(let-values()"
"(in-list"
" lst_340)))"
"((letrec-values(((for-loop_341)"
"(lambda(id_342"
" lst_343)"
"(if(pair?"
" lst_343)"
"(let-values(((s_344)"
"(unsafe-car"
" lst_343)))"
"(let-values(((id_345)"
"(let-values(((id_346)"
" id_342))"
"(let-values(((id_347)"
"(let-values()"
"(let-values(((id71_348)"
"(let-values()"
"(if(let-values(((or-part_349)"
"(if(syntax?$1"
" s_344)"
"(symbol?"
"(syntax-e$1"
" s_344))"
" #f)))"
"(if or-part_349"
" or-part_349"
"(symbol?"
" s_344)))"
" s_344"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_323"
" s_344)))))"
"(cons"
" id71_348"
" id_346)))))"
"(values"
" id_347)))))"
"(for-loop_341"
" id_345"
"(unsafe-cdr"
" lst_343))))"
" id_342))))"
" for-loop_341)"
" null"
" lst_340)))))"
"(alt-reverse"
" id_339))))))))"
"((rhs69_335)"
"(let-values(((s_350)"
"(cdr"
" s_333)))"
"(let-values(((s_351)"
"(if(syntax?$1"
" s_350)"
"(syntax-e$1"
" s_350)"
" s_350)))"
"(if(pair?"
" s_351)"
"(let-values(((rhs70_352)"
"(let-values(((s_353)"
"(car"
" s_351)))"
" s_353))"
"(()"
"(let-values(((s_354)"
"(cdr"
" s_351)))"
"(let-values(((s_355)"
"(if(syntax?$1"
" s_354)"
"(syntax-e$1"
" s_354)"
" s_354)))"
"(if(null?"
" s_355)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_323))))))"
"(values"
" rhs70_352))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_323))))))"
"(values"
" id68_334"
" rhs69_335))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_323))))))"
"(values"
" define-syntaxes65_328"
" id66_329"
" rhs67_330))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_323)))))"
"(values"
" #t"
" define-syntaxes62_324"
" id63_325"
" rhs64_326))))))"
"(let-values(((ids_316)"
" id63_302))"
"(let-values(((binding-syms_317)"
"(def-ids-to-binding-syms"
" ids_316"
" phase_193"
" self_52"
" cctx_37)))"
"(let-values(((next-header_318)"
"(find-or-create-header!_57"
"(add1"
" phase_193))))"
"(let-values(((gen-syms_319)"
"(alt-reverse"
"(let-values(((lst_356)"
" binding-syms_317))"
"(begin"
"(if(list?"
" lst_356)"
"(void)"
"(let-values()"
"(in-list"
" lst_356)))"
"((letrec-values(((for-loop_357)"
"(lambda(fold-var_358"
" lst_359)"
"(if(pair?"
" lst_359)"
"(let-values(((binding-sym_360)"
"(unsafe-car"
" lst_359)))"
"(let-values(((fold-var_361)"
"(let-values(((fold-var_362)"
" fold-var_358))"
"(let-values(((fold-var_363)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_360"
" next-header_318))"
" fold-var_362))))"
"(values"
" fold-var_363)))))"
"(for-loop_357"
" fold-var_361"
"(unsafe-cdr"
" lst_359))))"
" fold-var_358))))"
" for-loop_357)"
" null"
" lst_356))))))"
"(let-values(((rhs_320)"
"(compile$2"
" rhs64_303"
"(let-values(((the-struct_364)"
" cctx_37))"
"(if(compile-context?"
" the-struct_364)"
"(let-values(((phase72_365)"
"(add1"
" phase_193))"
"((header73_366)"
" next-header_318))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_364)"
" phase72_365"
"(compile-context-top-level-bind-scope"
" the-struct_364)"
"(compile-context-self"
" the-struct_364)"
"(compile-context-module-self"
" the-struct_364)"
"(compile-context-full-module-name"
" the-struct_364)"
"(compile-context-lazy-syntax-literals?"
" the-struct_364)"
" header73_366))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                    \"compile-context?\""
" the-struct_364))))))"
"(let-values((()"
"(begin"
"(definition-callback_45)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_44"
" rhs_320"
"(length"
" gen-syms_319)"
"(add1"
" phase_193)"
"(as-required?_59"
" header_194))"
"(values))))"
"(let-values(((transformer-set!s_321)"
"(alt-reverse"
"(let-values(((lst_367)"
" binding-syms_317)"
"((lst_368)"
" gen-syms_319))"
"(begin"
"(if(list?"
" lst_367)"
"(void)"
"(let-values()"
"(in-list"
" lst_367)))"
"(if(list?"
" lst_368)"
"(void)"
"(let-values()"
"(in-list"
" lst_368)))"
"((letrec-values(((for-loop_369)"
"(lambda(fold-var_370"
" lst_371"
" lst_372)"
"(if(if(pair?"
" lst_371)"
"(pair?"
" lst_372)"
" #f)"
"(let-values(((binding-sym_373)"
"(unsafe-car"
" lst_371))"
"((gen-sym_374)"
"(unsafe-car"
" lst_372)))"
"(let-values(((fold-var_375)"
"(let-values(((fold-var_376)"
" fold-var_370))"
"(let-values(((fold-var_377)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_373)"
" gen-sym_374))"
" fold-var_376))))"
"(values"
" fold-var_377)))))"
"(for-loop_369"
" fold-var_375"
"(unsafe-cdr"
" lst_371)"
"(unsafe-cdr"
" lst_372))))"
" fold-var_370))))"
" for-loop_369)"
" null"
" lst_367"
" lst_368))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_37)"
"(let-values()"
"(add-body!_55"
"(add1"
" phase_193)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_319"
" rhs_320))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_321"
" '((void)))))))"
"(let-values()"
"(add-body!_55"
"(add1"
" phase_193)"
"(generate-top-level-define-syntaxes"
" gen-syms_319"
" rhs_320"
" transformer-set!s_321"
"(compile-top-level-bind"
" ids_316"
" binding-syms_317"
"(let-values(((the-struct_378)"
" cctx_37))"
"(if(compile-context?"
" the-struct_378)"
"(let-values(((phase74_379)"
" phase_193)"
"((header75_380)"
" header_194))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_378)"
" phase74_379"
"(compile-context-top-level-bind-scope"
" the-struct_378)"
"(compile-context-self"
" the-struct_378)"
"(compile-context-module-self"
" the-struct_378)"
"(compile-context-full-module-name"
" the-struct_378)"
"(compile-context-lazy-syntax-literals?"
" the-struct_378)"
" header75_380))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                      \"compile-context?\""
" the-struct_378)))"
" gen-syms_319)))))"
"(set! saw-define-syntaxes?_58"
" #t))))))))))))"
"(if(equal?"
" tmp_207"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_381"
" begin-for-syntax76_382"
" e77_383)"
"(let-values(((s_394)"
" body_206))"
"(let-values(((orig-s_395)"
" s_394))"
"(let-values(((begin-for-syntax76_396"
" e77_397)"
"(let-values(((s_398)"
"(if(syntax?$1"
" s_394)"
"(syntax-e$1"
" s_394)"
" s_394)))"
"(if(pair?"
" s_398)"
"(let-values(((begin-for-syntax78_399)"
"(let-values(((s_401)"
"(car"
" s_398)))"
" s_401))"
"((e79_400)"
"(let-values(((s_402)"
"(cdr"
" s_398)))"
"(let-values(((s_403)"
"(if(syntax?$1"
" s_402)"
"(syntax-e$1"
" s_402)"
" s_402)))"
"(let-values(((flat-s_404)"
"(to-syntax-list.1"
" s_403)))"
"(if(not"
" flat-s_404)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_395))"
"(let-values()"
" flat-s_404)))))))"
"(values"
" begin-for-syntax78_399"
" e79_400))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_395)))))"
"(values"
" #t"
" begin-for-syntax76_396"
" e77_397))))))"
"(loop!_191"
" e77_383"
"(add1"
" phase_193)"
"(find-or-create-header!_57"
"(add1"
" phase_193)))))"
"(if(if(equal?"
" tmp_207"
" '#%require)"
" #t"
"(if(equal?"
" tmp_207"
" '#%provide)"
" #t"
"(if(equal?"
" tmp_207"
" '#%declare)"
" #t"
"(if(equal?"
" tmp_207"
" 'module)"
" #t"
"(equal?"
" tmp_207"
" 'module*)))))"
"(let-values()"
"(let-values(((e_405)"
"(other-form-callback_46"
" body_206"
"(let-values(((the-struct_406)"
" cctx_37))"
"(if(compile-context?"
" the-struct_406)"
"(let-values(((phase80_407)"
" phase_193)"
"((header81_408)"
" header_194))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_406)"
" phase80_407"
"(compile-context-top-level-bind-scope"
" the-struct_406)"
"(compile-context-self"
" the-struct_406)"
"(compile-context-module-self"
" the-struct_406)"
"(compile-context-full-module-name"
" the-struct_406)"
"(compile-context-lazy-syntax-literals?"
" the-struct_406)"
" header81_408))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                              \"compile-context?\""
" the-struct_406))))))"
"(if e_405"
"(let-values()"
"(begin"
"(compiled-expression-callback_44"
" e_405"
" #f"
" phase_193"
"(as-required?_59"
" header_194))"
"(add-body!_55"
" phase_193"
" e_405)))"
"(void))))"
"(let-values()"
"(let-values(((e_409)"
"(compile$2"
" body_206"
"(let-values(((the-struct_410)"
" cctx_37))"
"(if(compile-context?"
" the-struct_410)"
"(let-values(((phase82_411)"
" phase_193)"
"((header83_412)"
" header_194))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_410)"
" phase82_411"
"(compile-context-top-level-bind-scope"
" the-struct_410)"
"(compile-context-self"
" the-struct_410)"
"(compile-context-module-self"
" the-struct_410)"
"(compile-context-full-module-name"
" the-struct_410)"
"(compile-context-lazy-syntax-literals?"
" the-struct_410)"
" header83_412))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                              \"compile-context?\""
" the-struct_410)))"
" #f"
"(="
" i_202"
" last-i_60))))"
"(begin"
"(compiled-expression-callback_44"
" e_409"
" #f"
" phase_193"
"(as-required?_59"
" header_194))"
"(add-body!_55"
" phase_193"
" e_409)))))))))))"
"(void)))))"
"(values"
" fold-var_205)))))"
"(for-loop_197"
" fold-var_203"
"(unsafe-cdr"
" lst_199)"
"(+"
" pos_200"
" 1))))"
" fold-var_198))))"
" for-loop_197)"
"(void)"
" lst_195"
" start_196))))))"
" loop!_191)"
" bodys_36"
" phase_51"
"(find-or-create-header!_57 phase_51))"
"(values))))"
"(let-values(((encoded-root-expand-pos_61)"
"(if encoded-root-expand-ctx-box_42"
"(if(unbox encoded-root-expand-ctx-box_42)"
"(if(not"
"(if root-ctx-only-if-syntax?_43"
"(if(not saw-define-syntaxes?_58)"
"(syntax-literals-empty?"
" syntax-literals_53)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_53"
"(unbox encoded-root-expand-ctx-box_42))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_62)"
"(let-values(((temp84_413)"
"(hash-keys phase-to-body_54))"
"((<85_414) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp84_413 <85_414)"
"(sort9.1 temp84_413 <85_414)))))"
"(let-values(((min-phase_63)"
"(if(pair? phases-in-order_62)"
"(car phases-in-order_62)"
" phase_51)))"
"(let-values(((max-phase_64)"
"(if(pair? phases-in-order_62)"
"(car(alt-reverse phases-in-order_62))"
" phase_51)))"
"(let-values(((struct:link-info_65"
" link-info27_66"
" link-info?_67"
" link-info-link-module-uses_68"
" link-info-imports_69"
" link-info-extra-inspectorsss_70"
" link-info-def-decls_71)"
"(let-values(((struct:_415"
" make-_416"
" ?_417"
" -ref_418"
" -set!_419)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'link-info"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'link-info)))))"
"(values"
" struct:_415"
" make-_416"
" ?_417"
"(make-struct-field-accessor"
" -ref_418"
" 0"
" 'link-module-uses)"
"(make-struct-field-accessor"
" -ref_418"
" 1"
" 'imports)"
"(make-struct-field-accessor"
" -ref_418"
" 2"
" 'extra-inspectorsss)"
"(make-struct-field-accessor"
" -ref_418"
" 3"
" 'def-decls)))))"
"(let-values(((phase-to-link-info_73)"
"(let-values(((lst_450)"
" phases-in-order_62))"
"(begin"
"(if(list? lst_450)"
"(void)"
"(let-values()"
"(in-list lst_450)))"
"((letrec-values(((for-loop_451)"
"(lambda(table_452"
" lst_453)"
"(if(pair?"
" lst_453)"
"(let-values(((phase_454)"
"(unsafe-car"
" lst_453)))"
"(let-values(((table_455)"
"(let-values(((table_456)"
" table_452))"
"(let-values(((table_457)"
"(let-values()"
"(let-values(((key_458"
" val_459)"
"(let-values()"
"(let-values(((header_460)"
"(hash-ref"
" phase-to-header_56"
" phase_454"
" #f)))"
"(let-values(((link-module-uses_461"
" imports_462"
" extra-inspectorsss_463"
" def-decls_464)"
"(generate-links+imports"
" header_460"
" phase_454"
" cctx_37)))"
"(values"
" phase_454"
"(link-info27_66"
" link-module-uses_461"
" imports_462"
" extra-inspectorsss_463"
" def-decls_464)))))))"
"(hash-set"
" table_456"
" key_458"
" val_459)))))"
"(values"
" table_457)))))"
"(for-loop_451"
" table_455"
"(unsafe-cdr"
" lst_453))))"
" table_452))))"
" for-loop_451)"
" '#hash()"
" lst_450)))))"
"(let-values(((body-linklets+module-uses_74)"
"(let-values(((lst_465)"
" phases-in-order_62))"
"(begin"
"(if(list? lst_465)"
"(void)"
"(let-values()"
"(in-list lst_465)))"
"((letrec-values(((for-loop_466)"
"(lambda(table_467"
" lst_468)"
"(if(pair?"
" lst_468)"
"(let-values(((phase_469)"
"(unsafe-car"
" lst_468)))"
"(let-values(((table_470)"
"(let-values(((table_471)"
" table_467))"
"(let-values(((table_472)"
"(let-values()"
"(let-values(((key_473"
" val_474)"
"(let-values()"
"(let-values(((bodys_475)"
"(hash-ref"
" phase-to-body_54"
" phase_469)))"
"(let-values(((li_476)"
"(hash-ref"
" phase-to-link-info_73"
" phase_469)))"
"(let-values(((binding-sym-to-define-sym_477)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_56"
" phase_469))))"
"(let-values(((module-uses_478)"
"(link-info-link-module-uses_68"
" li_476)))"
"(let-values(((linklet_479"
" new-module-uses_480)"
"(let-values()"
"((if to-source?_50"
"(lambda(l_481"
" name_482"
" keys_483"
" getter_484)"
"(values"
" l_481"
" keys_483))"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_39"
"(link-info-imports_69"
" li_476))"
"(qq-append"
"(link-info-def-decls_71"
" li_476)"
"(alt-reverse"
"(let-values(((lst_485)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_56"
" phase_469))))"
"(begin"
"(if(list?"
" lst_485)"
"(void)"
"(let-values()"
"(in-list"
" lst_485)))"
"((letrec-values(((for-loop_486)"
"(lambda(fold-var_487"
" lst_488)"
"(if(pair?"
" lst_488)"
"(let-values(((binding-sym_489)"
"(unsafe-car"
" lst_488)))"
"(let-values(((fold-var_490)"
"(let-values(((fold-var_491)"
" fold-var_487))"
"(let-values(((fold-var_492)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_493)"
"(hash-ref"
" binding-sym-to-define-sym_477"
" binding-sym_489)))"
"(list"
" def-sym_493"
" binding-sym_489)))"
" fold-var_491))))"
"(values"
" fold-var_492)))))"
"(for-loop_486"
" fold-var_490"
"(unsafe-cdr"
" lst_488))))"
" fold-var_487))))"
" for-loop_486)"
" null"
" lst_485)))))"
"(qq-append"
"(alt-reverse"
" bodys_475)"
" body-suffix-forms_40))"
" 'module"
"(list->vector"
"(append"
"(alt-reverse"
"(let-values(((lst_494)"
" body-imports_39))"
"(begin"
"(if(list?"
" lst_494)"
"(void)"
"(let-values()"
"(in-list"
" lst_494)))"
"((letrec-values(((for-loop_495)"
"(lambda(fold-var_496"
" lst_497)"
"(if(pair?"
" lst_497)"
"(let-values(((i_498)"
"(unsafe-car"
" lst_497)))"
"(let-values(((fold-var_499)"
"(let-values(((fold-var_500)"
" fold-var_496))"
"(let-values(((fold-var_501)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_500))))"
"(values"
" fold-var_501)))))"
"(for-loop_495"
" fold-var_499"
"(unsafe-cdr"
" lst_497))))"
" fold-var_496))))"
" for-loop_495)"
" null"
" lst_494))))"
"(link-info-link-module-uses_68"
" li_476)))"
"(make-module-use-to-linklet"
"(compile-context-namespace"
" cctx_37)"
" get-module-linklet-info_47"
"(link-info-link-module-uses_68"
" li_476))))))"
"(values"
" phase_469"
"(cons"
" linklet_479"
"(list-tail"
"(vector->list"
" new-module-uses_480)"
"(length"
" body-imports_39))))))))))))"
"(hash-set"
" table_471"
" key_473"
" val_474)))))"
"(values"
" table_472)))))"
"(for-loop_466"
" table_470"
"(unsafe-cdr"
" lst_468))))"
" table_467))))"
" for-loop_466)"
" '#hasheq()"
" lst_465)))))"
"(let-values(((body-linklets_75)"
"(let-values(((ht_502)"
" body-linklets+module-uses_74))"
"(begin"
"(if((lambda(ht_503)"
"(hash? ht_503))"
" ht_502)"
"(void)"
"(let-values()"
"(default-in-hash ht_502)))"
"((letrec-values(((for-loop_504)"
"(lambda(table_505"
" i_506)"
"(if i_506"
"(let-values(((phase_507"
" l+mus_508)"
"(hash-iterate-key+value"
" ht_502"
" i_506)))"
"(let-values(((table_509)"
"(let-values(((table_510)"
" table_505))"
"(let-values(((table_511)"
"(let-values()"
"(let-values(((key_512"
" val_513)"
"(let-values()"
"(values"
" phase_507"
"(car"
" l+mus_508)))))"
"(hash-set"
" table_510"
" key_512"
" val_513)))))"
"(values"
" table_511)))))"
"(for-loop_504"
" table_509"
"(hash-iterate-next"
" ht_502"
" i_506))))"
" table_505))))"
" for-loop_504)"
" '#hasheq()"
"(hash-iterate-first"
" ht_502))))))"
"(let-values(((phase-to-link-module-uses_76)"
"(let-values(((ht_514)"
" body-linklets+module-uses_74))"
"(begin"
"(if((lambda(ht_515)"
"(hash? ht_515))"
" ht_514)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_514)))"
"((letrec-values(((for-loop_516)"
"(lambda(table_517"
" i_518)"
"(if i_518"
"(let-values(((phase_519"
" l+mus_520)"
"(hash-iterate-key+value"
" ht_514"
" i_518)))"
"(let-values(((table_521)"
"(let-values(((table_522)"
" table_517))"
"(let-values(((table_523)"
"(let-values()"
"(let-values(((key_524"
" val_525)"
"(let-values()"
"(values"
" phase_519"
"(cdr"
" l+mus_520)))))"
"(hash-set"
" table_522"
" key_524"
" val_525)))))"
"(values"
" table_523)))))"
"(for-loop_516"
" table_521"
"(hash-iterate-next"
" ht_514"
" i_518))))"
" table_517))))"
" for-loop_516)"
" '#hasheq()"
"(hash-iterate-first"
" ht_514))))))"
"(let-values(((phase-to-link-module-uses-expr_77)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_76"
" mpis_38)))"
"(let-values(((phase-to-link-extra-inspectorsss_78)"
"(let-values(((ht_526)"
" phase-to-link-info_73))"
"(begin"
"(if((lambda(ht_527)"
"(hash? ht_527))"
" ht_526)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_526)))"
"((letrec-values(((for-loop_528)"
"(lambda(table_529"
" i_530)"
"(if i_530"
"(let-values(((phase_531"
" li_532)"
"(hash-iterate-key+value"
" ht_526"
" i_530)))"
"(let-values(((table_533)"
"(let-values(((table_534)"
" table_529))"
"(let-values(((table_535)"
"(let-values()"
"(let-values(((key_536"
" val_537)"
"(let-values()"
"(values"
" phase_531"
"(link-info-extra-inspectorsss_70"
" li_532)))))"
"(hash-set"
" table_534"
" key_536"
" val_537)))))"
"(values"
" table_535)))))"
"(for-loop_528"
" table_533"
"(hash-iterate-next"
" ht_526"
" i_530))))"
" table_529))))"
" for-loop_528)"
" '#hash()"
"(hash-iterate-first"
" ht_526))))))"
"(values"
" body-linklets_75"
" min-phase_63"
" max-phase_64"
" phase-to-link-module-uses_76"
" phase-to-link-module-uses-expr_77"
" phase-to-link-extra-inspectorsss_78"
" syntax-literals_53"
" encoded-root-expand-pos_61)))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack25.1$2)"
"(lambda(given-kws_538 given-args_539 bodys21_540 cctx22_541 mpis23_542)"
"(let-values(((body-imports1_543)(car given-args_539))"
"((given-kws_544)(cdr given-kws_538))"
"((given-args_545)(cdr given-args_539)))"
"(let-values(((body-suffix-forms12_546)"
"(if(pair? given-kws_544)(eq? '#:body-suffix-forms(car given-kws_544)) #f)))"
"(let-values(((body-suffix-forms2_547)(if body-suffix-forms12_546(car given-args_545)(void)))"
"((given-kws_548)(if body-suffix-forms12_546(cdr given-kws_544) given-kws_544))"
"((given-args_549)(if body-suffix-forms12_546(cdr given-args_545) given-args_545)))"
"(let-values(((compiled-expression-callback16_550)"
"(if(pair? given-kws_548)(eq? '#:compiled-expression-callback(car given-kws_548)) #f)))"
"(let-values(((compiled-expression-callback6_551)"
"(if compiled-expression-callback16_550(car given-args_549)(void)))"
"((given-kws_552)(if compiled-expression-callback16_550(cdr given-kws_548) given-kws_548))"
"((given-args_553)(if compiled-expression-callback16_550(cdr given-args_549) given-args_549)))"
"(let-values(((definition-callback17_554)"
"(if(pair? given-kws_552)(eq? '#:definition-callback(car given-kws_552)) #f)))"
"(let-values(((definition-callback7_555)(if definition-callback17_554(car given-args_553)(void)))"
"((given-kws_556)(if definition-callback17_554(cdr given-kws_552) given-kws_552))"
"((given-args_557)(if definition-callback17_554(cdr given-args_553) given-args_553)))"
"(let-values(((encoded-root-expand-ctx-box14_558)"
"(if(pair? given-kws_556)(eq? '#:encoded-root-expand-ctx-box(car given-kws_556)) #f)))"
"(let-values(((encoded-root-expand-ctx-box4_559)"
"(if encoded-root-expand-ctx-box14_558(car given-args_557)(void)))"
"((given-kws_560)"
"(if encoded-root-expand-ctx-box14_558(cdr given-kws_556) given-kws_556))"
"((given-args_561)"
"(if encoded-root-expand-ctx-box14_558(cdr given-args_557) given-args_557)))"
"(let-values(((force-phases13_562)"
"(if(pair? given-kws_560)(eq? '#:force-phases(car given-kws_560)) #f)))"
"(let-values(((force-phases3_563)(if force-phases13_562(car given-args_561)(void)))"
"((given-kws_564)(if force-phases13_562(cdr given-kws_560) given-kws_560))"
"((given-args_565)(if force-phases13_562(cdr given-args_561) given-args_561)))"
"(let-values(((get-module-linklet-info19_566)"
"(if(pair? given-kws_564)"
"(eq? '#:get-module-linklet-info(car given-kws_564))"
" #f)))"
"(let-values(((get-module-linklet-info9_567)"
"(if get-module-linklet-info19_566(car given-args_565)(void)))"
"((given-kws_568)"
"(if get-module-linklet-info19_566(cdr given-kws_564) given-kws_564))"
"((given-args_569)"
"(if get-module-linklet-info19_566(cdr given-args_565) given-args_565)))"
"(let-values(((other-form-callback18_570)"
"(if(pair? given-kws_568)"
"(eq? '#:other-form-callback(car given-kws_568))"
" #f)))"
"(let-values(((other-form-callback8_571)"
"(if other-form-callback18_570(car given-args_569)(void)))"
"((given-kws_572)"
"(if other-form-callback18_570(cdr given-kws_568) given-kws_568))"
"((given-args_573)"
"(if other-form-callback18_570(cdr given-args_569) given-args_569)))"
"(let-values(((root-ctx-only-if-syntax?15_574)"
"(if(pair? given-kws_572)"
"(eq? '#:root-ctx-only-if-syntax?(car given-kws_572))"
" #f)))"
"(let-values(((root-ctx-only-if-syntax?5_575)"
"(if root-ctx-only-if-syntax?15_574(car given-args_573)(void)))"
"((given-kws_576)"
"(if root-ctx-only-if-syntax?15_574(cdr given-kws_572) given-kws_572))"
"((given-args_577)"
"(if root-ctx-only-if-syntax?15_574"
"(cdr given-args_573)"
" given-args_573)))"
"(let-values(((to-source?20_578)(pair? given-kws_576)))"
"(let-values(((to-source?10_579)"
"(if to-source?20_578(car given-args_577)(void))))"
"(compile-forms24.1"
" body-imports1_543"
" body-suffix-forms2_547"
" body-suffix-forms12_546"
" compiled-expression-callback6_551"
" compiled-expression-callback16_550"
" definition-callback7_555"
" definition-callback17_554"
" encoded-root-expand-ctx-box4_559"
" encoded-root-expand-ctx-box14_558"
" force-phases3_563"
" force-phases13_562"
" get-module-linklet-info9_567"
" get-module-linklet-info19_566"
" other-form-callback8_571"
" other-form-callback18_570"
" root-ctx-only-if-syntax?5_575"
" root-ctx-only-if-syntax?15_574"
" to-source?10_579"
" to-source?20_578"
" bodys21_540"
" cctx22_541"
" mpis23_542))))))))))))))))))))))"
"(define-values"
"(compile-forms26.1)"
"(lifted/2.1$16"
"(lambda(given-kws_580 given-argc_581)"
"(if(= given-argc_581 5)"
"(subsets?"
" '(#:body-imports)"
" given-kws_580"
" '(#:body-imports"
" #:body-suffix-forms"
" #:compiled-expression-callback"
" #:definition-callback"
" #:encoded-root-expand-ctx-box"
" #:force-phases"
" #:get-module-linklet-info"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?))"
" #f))"
"(case-lambda"
"((given-kws_582 given-args_583 bodys_584 cctx_585 mpis_586)"
"(unpack25.1$2 given-kws_582 given-args_583 bodys_584 cctx_585 mpis_586)))"
" '(#:body-imports)"
" '(#:body-imports"
" #:body-suffix-forms"
" #:compiled-expression-callback"
" #:definition-callback"
" #:encoded-root-expand-ctx-box"
" #:force-phases"
" #:get-module-linklet-info"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_587 binding-syms_588 cctx_589 trans-exprs_590)"
"(let-values(((phase_591)(compile-context-phase cctx_589)))"
"(let-values(((self_592)(compile-context-self cctx_589)))"
"(let-values(((header_593)(compile-context-header cctx_589)))"
"(let-values(((mpis_594)(header-module-path-indexes header_593)))"
"(let-values(((top-level-bind-scope_595)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_589)))))"
"(let-values(((self-expr_596)(add-module-path-index! mpis_594 self_592)))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_597) ids_587)"
"((lst_598) binding-syms_588)"
"((lst_599)"
"(let-values(((or-part_600) trans-exprs_590))"
"(if or-part_600"
" or-part_600"
"(alt-reverse"
"(let-values(((lst_601) ids_587))"
"(begin"
"(if(list? lst_601)(void)(let-values()(in-list lst_601)))"
"((letrec-values(((for-loop_602)"
"(lambda(fold-var_603 lst_604)"
"(if(pair? lst_604)"
"(let-values(((id_605)(unsafe-car lst_604)))"
"(let-values(((fold-var_606)"
"(let-values(((fold-var_607)"
" fold-var_603))"
"(let-values(((fold-var_608)"
"(let-values()"
"(cons"
"(let-values() ''#f)"
" fold-var_607))))"
"(values fold-var_608)))))"
"(for-loop_602 fold-var_606(unsafe-cdr lst_604))))"
" fold-var_603))))"
" for-loop_602)"
" null"
" lst_601))))))))"
"(begin"
"(if(list? lst_597)(void)(let-values()(in-list lst_597)))"
"(if(list? lst_598)(void)(let-values()(in-list lst_598)))"
"(if(list? lst_599)(void)(let-values()(in-list lst_599)))"
"((letrec-values(((for-loop_609)"
"(lambda(fold-var_610 lst_611 lst_612 lst_613)"
"(if(if(pair? lst_611)(if(pair? lst_612)(pair? lst_613) #f) #f)"
"(let-values(((id_614)(unsafe-car lst_611))"
"((binding-sym_615)(unsafe-car lst_612))"
"((trans-expr_616)(unsafe-car lst_613)))"
"(let-values(((fold-var_617)"
"(let-values(((fold-var_618) fold-var_610))"
"(let-values(((fold-var_619)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_620)"
"(compile-quote-syntax"
"(remove-scope"
" id_614"
" top-level-bind-scope_595)"
" cctx_589)))"
"(list"
" top-level-bind!-id"
" id-stx_620"
" self-expr_596"
" phase_591"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_615)"
" trans-expr_616)))"
" fold-var_618))))"
"(values fold-var_619)))))"
"(for-loop_609"
" fold-var_617"
"(unsafe-cdr lst_611)"
"(unsafe-cdr lst_612)"
"(unsafe-cdr lst_613))))"
" fold-var_610))))"
" for-loop_609)"
" null"
" lst_597"
" lst_598"
" lst_599)))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_623 rhs_624 transformer-set!s_625 finish_626)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_624)"
"(list"
" 'case-lambda"
"(list gen-syms_623(list* 'begin(qq-append transformer-set!s_625(list* finish_626 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_623"
"(list*"
" 'values"
"(alt-reverse"
"(let-values(((lst_627) gen-syms_623))"
"(begin"
"(if(list? lst_627)(void)(let-values()(in-list lst_627)))"
"((letrec-values(((for-loop_628)"
"(lambda(fold-var_629 lst_630)"
"(if(pair? lst_630)"
"(let-values(((s_631)(unsafe-car lst_630)))"
"(let-values(((fold-var_632)"
"(let-values(((fold-var_633) fold-var_629))"
"(let-values(((fold-var_634)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_633))))"
"(values fold-var_634)))))"
"(for-loop_628 fold-var_632(unsafe-cdr lst_630))))"
" fold-var_629))))"
" for-loop_628)"
" null"
" lst_627)))))))"
"(list* 'begin finish_626 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_623 '((apply values args)))) '((void))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_635 orig-s_636)"
"(let-values(((v_637)(syntax-property$1 orig-s_636 'compiler-hint:cross-module-inline)))"
"(if v_637(correlated-property e_635 'compiler-hint:cross-module-inline v_637) e_635))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(ns_638 get-module-linklet-info_639 init-mus_640)"
"(let-values(((mu-intern-table_641)(make-hash)))"
"(let-values(((intern-module-use_642)"
"(lambda(mu_643)"
"(let-values(((mod-name_644)(1/module-path-index-resolve(module-use-module mu_643))))"
"(let-values(((or-part_645)"
"(hash-ref mu-intern-table_641(cons mod-name_644(module-use-phase mu_643)) #f)))"
"(if or-part_645"
" or-part_645"
"(begin"
"(hash-set! mu-intern-table_641(cons mod-name_644(module-use-phase mu_643)) mu_643)"
" mu_643)))))))"
"(begin"
"(for-each2 intern-module-use_642 init-mus_640)"
"(lambda(mu_646)"
"(if mu_646"
"(let-values()"
"(let-values(((mod-name_647)(1/module-path-index-resolve(module-use-module mu_646))))"
"(let-values(((mli_648)"
"(let-values(((or-part_649)"
"(get-module-linklet-info_639 mod-name_647(module-use-phase mu_646))))"
"(if or-part_649"
" or-part_649"
"(namespace->module-linklet-info ns_638 mod-name_647(module-use-phase mu_646))))))"
"(if mli_648"
"(values"
"(module-linklet-info-linklet mli_648)"
"(if(module-linklet-info-module-uses mli_648)"
"(list->vector"
"(append"
" '(#f #f)"
"(alt-reverse"
"(let-values(((pos->vals_650"
" pos-next_651"
" init_652"
" pos-cont?_653"
" val-cont?_654"
" all-cont?_655)"
"(make-sequence '(sub-mu)(module-linklet-info-module-uses mli_648))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_656)"
"(lambda(fold-var_657 pos_658)"
"(if(if pos-cont?_653(pos-cont?_653 pos_658) #t)"
"(let-values(((sub-mu_659)(pos->vals_650 pos_658)))"
"(if(if val-cont?_654(val-cont?_654 sub-mu_659) #t)"
"(let-values(((fold-var_660)"
"(let-values(((fold-var_661) fold-var_657))"
"(let-values(((fold-var_662)"
"(let-values()"
"(cons"
"(let-values()"
"(intern-module-use_642"
"(module-use1.1"
"(module-path-index-shift"
"(module-use-module"
" sub-mu_659)"
"(module-linklet-info-self"
" mli_648)"
"(module-use-module"
" mu_646))"
"(module-use-phase"
" sub-mu_659))))"
" fold-var_661))))"
"(values fold-var_662)))))"
"(if(if all-cont?_655(all-cont?_655 pos_658 sub-mu_659) #t)"
"(for-loop_656 fold-var_660(pos-next_651 pos_658))"
" fold-var_660))"
" fold-var_657))"
" fold-var_657))))"
" for-loop_656)"
" null"
" init_652))))))"
" #f))"
"(values #f #f)))))"
"(let-values()(values #f #f)))))))))"
"(void)"
"(void)"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_1 ns_2)"
"(let-values(((mpis_3)(make-module-path-index-table)))"
"(let-values(((mpi-trees_4)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_12)"
"(let-values(((vec_13 i_14)"
"(let-values(((vec_15 len_16)"
"(let-values(((vec_17)(compiled-in-memory-mpis cim_12)))"
"(begin"
"(if(vector? vec_17)(void)(let-values()(in-vector vec_17)))"
"(values vec_17(unsafe-vector-length vec_17))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_18)"
"(lambda(vec_19 i_20 pos_21)"
"(if(unsafe-fx< pos_21 len_16)"
"(let-values(((mpi_22)"
"(unsafe-vector-ref vec_15 pos_21)))"
"(let-values(((vec_23 i_24)"
"(let-values(((vec_25) vec_19)"
"((i_26) i_20))"
"(let-values(((vec_27 i_28)"
"(let-values()"
"(let-values(((new-vec_29)"
"(if(eq?"
" i_26"
"(unsafe-vector*-length"
" vec_25))"
"(grow-vector"
" vec_25)"
" vec_25)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_29"
" i_26"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_3"
" mpi_22)))"
"(values"
" new-vec_29"
"(unsafe-fx+"
" i_26"
" 1)))))))"
"(values vec_27 i_28)))))"
"(for-loop_18 vec_23 i_24(unsafe-fx+ 1 pos_21))))"
"(values vec_19 i_20)))))"
" for-loop_18)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_13 i_14))))))"
"(let-values(((syntax-literals_5)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_6)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_30)"
"(add-syntax-literals! syntax-literals_5(compiled-in-memory-syntax-literals cim_30))))))"
"(let-values(((module-uses-tables_7) null))"
"(let-values(((module-uses-tables-count_8) 0))"
"(let-values(((phase-to-link-module-uses-trees_9)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_31)"
"(let-values(((pos_32) module-uses-tables-count_8))"
"(begin"
"(set! module-uses-tables_7"
"(cons"
"(compiled-in-memory-phase-to-link-module-uses cim_31)"
" module-uses-tables_7))"
"(set! module-uses-tables-count_8(add1 pos_32))"
" pos_32))))))"
"(let-values(((syntax-literals-expr_10)"
"(generate-eager-syntax-literals! syntax-literals_5 mpis_3 0 #f ns_2)))"
"(let-values(((phase-to-link-module-uses-expr_11)"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((lst_33)(alt-reverse module-uses-tables_7)))"
"(begin"
"(if(list? lst_33)(void)(let-values()(in-list lst_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_35 lst_36)"
"(if(pair? lst_36)"
"(let-values(((phase-to-link-module-uses_37)"
"(unsafe-car lst_36)))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_35))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_37"
" mpis_3))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(for-loop_34 fold-var_38(unsafe-cdr lst_36))))"
" fold-var_35))))"
" for-loop_34)"
" null"
" lst_33)))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_3))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_4))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_11)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_9))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_10)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_6)))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_41 proc_42)"
"((letrec-values(((loop_43)"
"(lambda(cims_44)"
"(alt-reverse"
"(let-values(((lst_45) cims_44))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((cim_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(let-values(((fold-var_52)"
"(let-values()"
"(cons"
"(let-values()"
"(vector"
"(proc_42 cim_49)"
"(loop_43"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_49))"
"(loop_43"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_49))))"
" fold-var_51))))"
"(values fold-var_52)))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
" null"
" lst_45)))))))"
" loop_43)"
" cims_41)))"
"(void)"
"(void)"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_1"
" merge-serialization?5_2"
" namespace3_3"
" namespace6_4"
" to-source?1_5"
" to-source?4_6"
" all-cims7_7)"
"(let-values(((all-cims_8) all-cims7_7))"
"(let-values(((to-source?_9)(if to-source?4_6 to-source?1_5 #f)))"
"(let-values(((merge-serialization?_10)(if merge-serialization?5_2 merge-serialization?2_1 #f)))"
"(let-values(((ns_11)(if namespace6_4 namespace3_3 #f)))"
"(let-values()"
"(let-values(((cims_12)(remove-nontail-purely-functional all-cims_8)))"
"(if(= 1(length cims_12))"
"(let-values()(car cims_12))"
"(let-values()"
"(let-values(((sequence-ht_13)"
"(let-values(((lst_15) cims_12)((start_16) 0))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"(if(exact-nonnegative-integer? start_16)"
"(void)"
"(let-values()(in-naturals start_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(table_18 lst_19 pos_20)"
"(if(if(pair? lst_19) #t #f)"
"(let-values(((cim_21)(unsafe-car lst_19))((i_22) pos_20))"
"(let-values(((table_23)"
"(let-values(((table_24) table_18))"
"(let-values(((table_25)"
"(let-values()"
"(let-values(((key_26"
" val_27)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_22))"
"((if to-source?_9"
" values"
" compiled-in-memory-linklet-directory)"
" cim_21)))))"
"(hash-set"
" table_24"
" key_26"
" val_27)))))"
"(values table_25)))))"
"(for-loop_17"
" table_23"
"(unsafe-cdr lst_19)"
"(+ pos_20 1))))"
" table_18))))"
" for-loop_17)"
" '#hasheq()"
" lst_15"
" start_16)))))"
"(let-values(((ht_14)"
"(if merge-serialization?_10"
"(hash-set"
" sequence-ht_13"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle"
"(hasheq 0(build-shared-data-linklet cims_12 ns_11))))))"
" sequence-ht_13)))"
"(if to-source?_9"
"(let-values() ht_14)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_14)"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_12"
" null"
" #f"
" #f)))))))))))))))"
"(define-values"
"(unpack9.1$1)"
"(lambda(given-kws_28 given-args_29 all-cims7_30)"
"(let-values(((merge-serialization?5_31)"
"(if(pair? given-kws_28)(eq? '#:merge-serialization?(car given-kws_28)) #f)))"
"(let-values(((merge-serialization?2_32)(if merge-serialization?5_31(car given-args_29)(void)))"
"((given-kws_33)(if merge-serialization?5_31(cdr given-kws_28) given-kws_28))"
"((given-args_34)(if merge-serialization?5_31(cdr given-args_29) given-args_29)))"
"(let-values(((namespace6_35)(if(pair? given-kws_33)(eq? '#:namespace(car given-kws_33)) #f)))"
"(let-values(((namespace3_36)(if namespace6_35(car given-args_34)(void)))"
"((given-kws_37)(if namespace6_35(cdr given-kws_33) given-kws_33))"
"((given-args_38)(if namespace6_35(cdr given-args_34) given-args_34)))"
"(let-values(((to-source?4_39)(pair? given-kws_37)))"
"(let-values(((to-source?1_40)(if to-source?4_39(car given-args_38)(void))))"
"(compiled-tops->compiled-top8.1"
" merge-serialization?2_32"
" merge-serialization?5_31"
" namespace3_36"
" namespace6_35"
" to-source?1_40"
" to-source?4_39"
" all-cims7_30)))))))))"
"(define-values"
"(compiled-tops->compiled-top10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_41 given-argc_42)"
"(if(= given-argc_42 3)"
"(let-values(((l1_43) given-kws_41))"
"(let-values(((l1_44)"
"(if(null? l1_43) l1_43(if(eq?(car l1_43) '#:merge-serialization?)(cdr l1_43) l1_43))))"
"(let-values(((l1_45) l1_44))"
"(let-values(((l1_46)(if(null? l1_45) l1_45(if(eq?(car l1_45) '#:namespace)(cdr l1_45) l1_45))))"
"(let-values(((l1_47) l1_46))"
"(let-values(((l1_48)(if(null? l1_47) l1_47(if(eq?(car l1_47) '#:to-source?)(cdr l1_47) l1_47))))"
"(null? l1_48)))))))"
" #f))"
"(case-lambda((given-kws_49 given-args_50 all-cims_51)(unpack9.1$1 given-kws_49 given-args_50 all-cims_51)))"
" null"
" '(#:merge-serialization? #:namespace #:to-source?)"
"(let-values(((compiled-tops->compiled-top_52)(case-lambda((all-cims_53)(unpack9.1$1 null null all-cims_53)))))"
" compiled-tops->compiled-top_52)))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_54)"
"(let-values(((ht_55)(1/linklet-directory->hash ld_54)))"
"(alt-reverse"
"(let-values(((start_56) 0)((end_57)(hash-count ht_55))((inc_58) 1))"
"(begin"
"(if(if(real? start_56)(if(real? end_57)(real? inc_58) #f) #f)"
"(void)"
"(let-values()(in-range start_56 end_57 inc_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(fold-var_60 pos_61)"
"(if(< pos_61 end_57)"
"(let-values(((i_62) pos_61))"
"(let-values(((fold-var_63)"
"(let-values(((top_64)"
"(hash-ref"
" ht_55"
"(string->symbol(number->string i_62))"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66)"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_68)"
" fold-var_66))"
"(if top_64"
"(let-values(((fold-var_69)"
" fold-var_68))"
"(let-values(((fold-var_70)"
"(let-values()"
"(cons"
"(let-values()"
" top_64)"
" fold-var_69))))"
"(values fold-var_70)))"
" fold-var_68))))"
" fold-var_67)))))"
" for-loop_65)"
" fold-var_60)))))"
"(for-loop_59 fold-var_63(+ pos_61 inc_58))))"
" fold-var_60))))"
" for-loop_59)"
" null"
" start_56)))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_71)"
"((letrec-values(((loop_72)"
"(lambda(cims_73)"
"(if(null? cims_73)"
"(let-values() null)"
"(if(null?(cdr cims_73))"
"(let-values() cims_73)"
"(if(if(compiled-in-memory?(car cims_73))"
"(compiled-in-memory-purely-functional?(car cims_73))"
" #f)"
"(let-values()(loop_72(cdr cims_73)))"
"(let-values()(cons(car cims_73)(cdr cims_73)))))))))"
" loop_72)"
" cims_71)))"
"(void)"
"(void)"
"(define-values"
"(any-side-effects?6.1)"
"(lambda(locals1_1 locals2_2 e3_3 expected-results4_4 required-reference?5_5)"
"(let-values(((e_6) e3_3))"
"(let-values(((expected-results_7) expected-results4_4))"
"(let-values(((required-reference?_8) required-reference?5_5))"
"(let-values(((locals_9)(if locals2_2 locals1_1 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_10)"
"((letrec-values(((loop_11)"
"(lambda(e_12 locals_13)"
"(let-values(((tmp_14)"
"(if(pair?(correlated-e e_12))"
"(correlated-e(car(correlated-e e_12)))"
" #f)))"
"(let-values(((index_15)"
"(if(symbol? tmp_14)"
"(hash-ref"
" '#hasheq((values . 3)"
"(begin . 5)"
"(void . 4)"
"(make-struct-type . 7)"
"(let-values . 2)"
"(quote . 1)"
"(letrec-values . 2)"
"(make-struct-field-mutator . 9)"
"(begin0 . 6)"
"(#%variable-reference . 1)"
"(lambda . 1)"
"(case-lambda . 1)"
"(make-struct-field-accessor . 8))"
" tmp_14"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_15 4)"
"(if(unsafe-fx< index_15 1)"
"(let-values()"
"(let-values(((v_16)(correlated-e e_12)))"
"(if(let-values(((or-part_17)"
"(self-quoting-in-linklet? v_16)))"
"(if or-part_17"
" or-part_17"
"(if(symbol? v_16)"
"(let-values(((or-part_18)"
"(hash-ref locals_13 v_16 #f)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)"
"(built-in-symbol? v_16)))"
"(if or-part_19"
" or-part_19"
"(required-reference?_8 v_16)))))"
" #f)))"
" 1"
" #f)))"
"(if(unsafe-fx< index_15 2)"
"(let-values() 1)"
"(if(unsafe-fx< index_15 3)"
"(let-values()"
"(let-values(((ok?_20 _9_21 ids10_22 rhs11_23 body12_24)"
"(let-values(((s_39) e_12))"
"(let-values(((orig-s_40) s_39))"
"(let-values(((_9_41"
" ids10_42"
" rhs11_43"
" body12_44)"
"(let-values(((s_45)"
"(if(syntax?$2"
" s_39)"
"(syntax-e$3"
" s_39)"
" s_39)))"
"(if(pair? s_45)"
"(let-values(((_13_46)"
"(let-values(((s_50)"
"(car"
" s_45)))"
" s_50))"
"((ids14_47"
" rhs15_48"
" body16_49)"
"(let-values(((s_51)"
"(cdr"
" s_45)))"
"(let-values(((s_52)"
"(if(syntax?$2"
" s_51)"
"(syntax-e$3"
" s_51)"
" s_51)))"
"(if(pair?"
" s_52)"
"(let-values(((ids17_53"
" rhs18_54)"
"(let-values(((s_56)"
"(car"
" s_52)))"
"(let-values(((s_57)"
"(if(syntax?$2"
" s_56)"
"(syntax-e$3"
" s_56)"
" s_56)))"
"(let-values(((flat-s_58)"
"(to-syntax-list.1$1"
" s_57)))"
"(if(not"
" flat-s_58)"
"(let-values()"
"((lambda(false_59"
" str_60"
" e_61)"
"(error"
" str_60))"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_40))"
"(let-values()"
"(let-values(((ids_65"
" rhs_66)"
"(let-values(((lst_67)"
" flat-s_58))"
"(begin"
"(if(list?"
" lst_67)"
"(void)"
"(let-values()"
"(in-list"
" lst_67)))"
"((letrec-values(((for-loop_68)"
"(lambda(ids_69"
" rhs_70"
" lst_71)"
"(if(pair?"
" lst_71)"
"(let-values(((s_72)"
"(unsafe-car"
" lst_71)))"
"(let-values(((ids_73"
" rhs_74)"
"(let-values(((ids_75)"
" ids_69)"
"((rhs_76)"
" rhs_70))"
"(let-values(((ids_77"
" rhs_78)"
"(let-values()"
"(let-values(((ids24_79"
" rhs25_80)"
"(let-values()"
"(let-values(((s_81)"
"(if(syntax?$2"
" s_72)"
"(syntax-e$3"
" s_72)"
" s_72)))"
"(if(pair?"
" s_81)"
"(let-values(((ids20_82)"
"(let-values(((s_84)"
"(car"
" s_81)))"
" s_84))"
"((rhs21_83)"
"(let-values(((s_85)"
"(cdr"
" s_81)))"
"(let-values(((s_86)"
"(if(syntax?$2"
" s_85)"
"(syntax-e$3"
" s_85)"
" s_85)))"
"(if(pair?"
" s_86)"
"(let-values(((rhs22_87)"
"(let-values(((s_88)"
"(car"
" s_86)))"
" s_88))"
"(()"
"(let-values(((s_89)"
"(cdr"
" s_86)))"
"(let-values(((s_90)"
"(if(syntax?$2"
" s_89)"
"(syntax-e$3"
" s_89)"
" s_89)))"
"(if(null?"
" s_90)"
"(values)"
"((lambda(false_91"
" str_92"
" e_93)"
"(error"
" str_92))"
" #f"
"                                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_40))))))"
"(values"
" rhs22_87))"
"((lambda(false_94"
" str_95"
" e_96)"
"(error"
" str_95))"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_40))))))"
"(values"
" ids20_82"
" rhs21_83))"
"((lambda(false_97"
" str_98"
" e_99)"
"(error"
" str_98))"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_40))))))"
"(values"
"(cons"
" ids24_79"
" ids_75)"
"(cons"
" rhs25_80"
" rhs_76))))))"
"(values"
" ids_77"
" rhs_78)))))"
"(for-loop_68"
" ids_73"
" rhs_74"
"(unsafe-cdr"
" lst_71))))"
"(values"
" ids_69"
" rhs_70)))))"
" for-loop_68)"
" null"
" null"
" lst_67)))))"
"(values"
"(alt-reverse"
" ids_65)"
"(alt-reverse"
" rhs_66)))))))))"
"((body19_55)"
"(let-values(((s_100)"
"(cdr"
" s_52)))"
"(let-values(((s_101)"
"(if(syntax?$2"
" s_100)"
"(syntax-e$3"
" s_100)"
" s_100)))"
"(if(pair?"
" s_101)"
"(let-values(((body23_102)"
"(let-values(((s_103)"
"(car"
" s_101)))"
" s_103))"
"(()"
"(let-values(((s_104)"
"(cdr"
" s_101)))"
"(let-values(((s_105)"
"(if(syntax?$2"
" s_104)"
"(syntax-e$3"
" s_104)"
" s_104)))"
"(if(null?"
" s_105)"
"(values)"
"((lambda(false_106"
" str_107"
" e_108)"
"(error"
" str_107))"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_40))))))"
"(values"
" body23_102))"
"((lambda(false_109"
" str_110"
" e_111)"
"(error"
" str_110))"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_40))))))"
"(values"
" ids17_53"
" rhs18_54"
" body19_55))"
"((lambda(false_112"
" str_113"
" e_114)"
"(error"
" str_113))"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_40))))))"
"(values"
" _13_46"
" ids14_47"
" rhs15_48"
" body16_49))"
"((lambda(false_115"
" str_116"
" e_117)"
"(error str_116))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_40)))))"
"(values"
" #t"
" _9_41"
" ids10_42"
" rhs11_43"
" body12_44))))))"
"(if(not"
"(let-values(((lst_118) ids10_22)"
"((lst_119) rhs11_23))"
"(begin"
"(if(list? lst_118)"
"(void)"
"(let-values()(in-list lst_118)))"
"(if(list? lst_119)"
"(void)"
"(let-values()(in-list lst_119)))"
"((letrec-values(((for-loop_120)"
"(lambda(result_121"
" lst_122"
" lst_123)"
"(if(if(pair? lst_122)"
"(pair? lst_123)"
" #f)"
"(let-values(((ids_124)"
"(unsafe-car"
" lst_122))"
"((rhs_125)"
"(unsafe-car"
" lst_123)))"
"(let-values(((result_126)"
"(let-values(((result_127)"
" result_121))"
"(let-values(((result_128)"
"(let-values()"
"(let-values()"
"(let-values(((...pile/side-effect.rkt:27:21_129)"
" any-side-effects?8.1)"
"((rhs26_130)"
" rhs_125)"
"((temp27_131)"
"(correlated-length"
" ids_124))"
"((required-reference?28_132)"
" required-reference?_8)"
"((locals29_133)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals29_133"
" #t"
" rhs26_130"
" temp27_131"
" required-reference?28_132)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:27:21_129"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals29_133)"
" rhs26_130"
" temp27_131"
" required-reference?28_132)))))))"
"(values"
" result_128)))))"
"(if(if(not"
"((lambda x_134"
" result_126)"
" ids_124))"
"(not"
"((lambda x_135"
" result_126)"
" rhs_125))"
" #f)"
"(for-loop_120"
" result_126"
"(unsafe-cdr"
" lst_122)"
"(unsafe-cdr"
" lst_123))"
" result_126)))"
" result_121))))"
" for-loop_120)"
" #f"
" lst_118"
" lst_119))))"
"(loop_11"
" body12_24"
"(add-binding-info locals_13 ids10_22 rhs11_23))"
" #f)))"
"(let-values()"
"(let-values(((ok?_136 _30_137 e31_138)"
"(let-values(((s_149) e_12))"
"(let-values(((orig-s_150) s_149))"
"(let-values(((_30_151 e31_152)"
"(let-values(((s_153)"
"(if(syntax?$2"
" s_149)"
"(syntax-e$3"
" s_149)"
" s_149)))"
"(if(pair? s_153)"
"(let-values(((_32_154)"
"(let-values(((s_156)"
"(car"
" s_153)))"
" s_156))"
"((e33_155)"
"(let-values(((s_157)"
"(cdr"
" s_153)))"
"(let-values(((s_158)"
"(if(syntax?$2"
" s_157)"
"(syntax-e$3"
" s_157)"
" s_157)))"
"(let-values(((flat-s_159)"
"(to-syntax-list.1$1"
" s_158)))"
"(if(not"
" flat-s_159)"
"(let-values()"
"((lambda(false_160"
" str_161"
" e_162)"
"(error"
" str_161))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_150))"
"(let-values()"
" flat-s_159)))))))"
"(values"
" _32_154"
" e33_155))"
"((lambda(false_166"
" str_167"
" e_168)"
"(error str_167))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_150)))))"
"(values #t _30_151 e31_152))))))"
"(if(let-values(((lst_169) e31_138))"
"(begin"
"(if(list? lst_169)"
"(void)"
"(let-values()(in-list lst_169)))"
"((letrec-values(((for-loop_170)"
"(lambda(result_171 lst_172)"
"(if(pair? lst_172)"
"(let-values(((e_173)"
"(unsafe-car"
" lst_172)))"
"(let-values(((result_174)"
"(let-values(((result_175)"
" result_171))"
"(let-values(((result_176)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:33:21_177)"
" any-side-effects?8.1)"
"((e34_178)"
" e_173)"
"((temp35_179)"
" 1)"
"((required-reference?36_180)"
" required-reference?_8)"
"((locals37_181)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals37_181"
" #t"
" e34_178"
" temp35_179"
" required-reference?36_180)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:33:21_177"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals37_181)"
" e34_178"
" temp35_179"
" required-reference?36_180))))))))"
"(values"
" result_176)))))"
"(if(not"
"((lambda x_182"
"(not"
" result_174))"
" e_173))"
"(for-loop_170"
" result_174"
"(unsafe-cdr"
" lst_172))"
" result_174)))"
" result_171))))"
" for-loop_170)"
" #t"
" lst_169)))"
"(length e31_138)"
" #f))))))"
"(if(unsafe-fx< index_15 6)"
"(if(unsafe-fx< index_15 5)"
"(let-values()"
"(let-values(((ok?_183 _38_184 e39_185)"
"(let-values(((s_196) e_12))"
"(let-values(((orig-s_197) s_196))"
"(let-values(((_38_198 e39_199)"
"(let-values(((s_200)"
"(if(syntax?$2"
" s_196)"
"(syntax-e$3"
" s_196)"
" s_196)))"
"(if(pair? s_200)"
"(let-values(((_40_201)"
"(let-values(((s_203)"
"(car"
" s_200)))"
" s_203))"
"((e41_202)"
"(let-values(((s_204)"
"(cdr"
" s_200)))"
"(let-values(((s_205)"
"(if(syntax?$2"
" s_204)"
"(syntax-e$3"
" s_204)"
" s_204)))"
"(let-values(((flat-s_206)"
"(to-syntax-list.1$1"
" s_205)))"
"(if(not"
" flat-s_206)"
"(let-values()"
"((lambda(false_207"
" str_208"
" e_209)"
"(error"
" str_208))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_197))"
"(let-values()"
" flat-s_206)))))))"
"(values"
" _40_201"
" e41_202))"
"((lambda(false_213"
" str_214"
" e_215)"
"(error str_214))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_197)))))"
"(values #t _38_198 e39_199))))))"
"(if(let-values(((lst_216) e39_185))"
"(begin"
"(if(list? lst_216)"
"(void)"
"(let-values()(in-list lst_216)))"
"((letrec-values(((for-loop_217)"
"(lambda(result_218 lst_219)"
"(if(pair? lst_219)"
"(let-values(((e_220)"
"(unsafe-car"
" lst_219)))"
"(let-values(((result_221)"
"(let-values(((result_222)"
" result_218))"
"(let-values(((result_223)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:38:21_224)"
" any-side-effects?8.1)"
"((e42_225)"
" e_220)"
"((temp43_226)"
" 1)"
"((required-reference?44_227)"
" required-reference?_8)"
"((locals45_228)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals45_228"
" #t"
" e42_225"
" temp43_226"
" required-reference?44_227)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:38:21_224"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals45_228)"
" e42_225"
" temp43_226"
" required-reference?44_227))))))))"
"(values"
" result_223)))))"
"(if(not"
"((lambda x_229"
"(not"
" result_221))"
" e_220))"
"(for-loop_217"
" result_221"
"(unsafe-cdr lst_219))"
" result_221)))"
" result_218))))"
" for-loop_217)"
" #t"
" lst_216)))"
" 1"
" #f)))"
"(let-values()"
"(let-values(((ok?_230 _46_231 e47_232)"
"(let-values(((s_243) e_12))"
"(let-values(((orig-s_244) s_243))"
"(let-values(((_46_245 e47_246)"
"(let-values(((s_247)"
"(if(syntax?$2"
" s_243)"
"(syntax-e$3"
" s_243)"
" s_243)))"
"(if(pair? s_247)"
"(let-values(((_48_248)"
"(let-values(((s_250)"
"(car"
" s_247)))"
" s_250))"
"((e49_249)"
"(let-values(((s_251)"
"(cdr"
" s_247)))"
"(let-values(((s_252)"
"(if(syntax?$2"
" s_251)"
"(syntax-e$3"
" s_251)"
" s_251)))"
"(let-values(((flat-s_253)"
"(to-syntax-list.1$1"
" s_252)))"
"(if(not"
" flat-s_253)"
"(let-values()"
"((lambda(false_254"
" str_255"
" e_256)"
"(error"
" str_255))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_244))"
"(let-values()"
" flat-s_253)))))))"
"(values"
" _48_248"
" e49_249))"
"((lambda(false_260"
" str_261"
" e_262)"
"(error str_261))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_244)))))"
"(values #t _46_245 e47_246))))))"
"((letrec-values(((bloop_263)"
"(lambda(es_264)"
"(if(null? es_264)"
"(let-values() #f)"
"(if(null?(cdr es_264))"
"(let-values()"
"(loop_11"
"(car es_264)"
" locals_13))"
"(let-values()"
"(if(not"
"(let-values(((...pile/side-effect.rkt:46:28_265)"
" any-side-effects?8.1)"
"((temp50_266)"
"(car es_264))"
"((temp51_267)"
" #f)"
"((required-reference?52_268)"
" required-reference?_8)"
"((locals53_269)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals53_269"
" #t"
" temp50_266"
" temp51_267"
" required-reference?52_268)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:46:28_265"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list locals53_269)"
" temp50_266"
" temp51_267"
" required-reference?52_268))))"
"(bloop_263(cdr es_264))"
" #f)))))))"
" bloop_263)"
" e47_232))))"
"(if(unsafe-fx< index_15 7)"
"(let-values()"
"(let-values(((ok?_270 _54_271 e055_272 e56_273)"
"(let-values(((s_286) e_12))"
"(let-values(((orig-s_287) s_286))"
"(let-values(((_54_288 e055_289 e56_290)"
"(let-values(((s_291)"
"(if(syntax?$2"
" s_286)"
"(syntax-e$3"
" s_286)"
" s_286)))"
"(if(pair? s_291)"
"(let-values(((_57_292)"
"(let-values(((s_295)"
"(car"
" s_291)))"
" s_295))"
"((e058_293"
" e59_294)"
"(let-values(((s_296)"
"(cdr"
" s_291)))"
"(let-values(((s_297)"
"(if(syntax?$2"
" s_296)"
"(syntax-e$3"
" s_296)"
" s_296)))"
"(if(pair?"
" s_297)"
"(let-values(((e060_298)"
"(let-values(((s_300)"
"(car"
" s_297)))"
" s_300))"
"((e61_299)"
"(let-values(((s_301)"
"(cdr"
" s_297)))"
"(let-values(((s_302)"
"(if(syntax?$2"
" s_301)"
"(syntax-e$3"
" s_301)"
" s_301)))"
"(let-values(((flat-s_303)"
"(to-syntax-list.1$1"
" s_302)))"
"(if(not"
" flat-s_303)"
"(let-values()"
"((lambda(false_304"
" str_305"
" e_306)"
"(error"
" str_305))"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_287))"
"(let-values()"
" flat-s_303)))))))"
"(values"
" e060_298"
" e61_299))"
"((lambda(false_310"
" str_311"
" e_312)"
"(error"
" str_311))"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_287))))))"
"(values"
" _57_292"
" e058_293"
" e59_294))"
"((lambda(false_313"
" str_314"
" e_315)"
"(error str_314))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_287)))))"
"(values"
" #t"
" _54_288"
" e055_289"
" e56_290))))))"
"(if(let-values(((lst_316) e56_273))"
"(begin"
"(if(list? lst_316)"
"(void)"
"(let-values()(in-list lst_316)))"
"((letrec-values(((for-loop_317)"
"(lambda(result_318 lst_319)"
"(if(pair? lst_319)"
"(let-values(((e_320)"
"(unsafe-car"
" lst_319)))"
"(let-values(((result_321)"
"(let-values(((result_322)"
" result_318))"
"(let-values(((result_323)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:51:21_324)"
" any-side-effects?8.1)"
"((e62_325)"
" e_320)"
"((temp63_326)"
" #f)"
"((required-reference?64_327)"
" required-reference?_8)"
"((locals65_328)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals65_328"
" #t"
" e62_325"
" temp63_326"
" required-reference?64_327)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:51:21_324"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals65_328)"
" e62_325"
" temp63_326"
" required-reference?64_327))))))))"
"(values"
" result_323)))))"
"(if(not"
"((lambda x_329"
"(not"
" result_321))"
" e_320))"
"(for-loop_317"
" result_321"
"(unsafe-cdr lst_319))"
" result_321)))"
" result_318))))"
" for-loop_317)"
" #t"
" lst_316)))"
"(loop_11 e055_272 locals_13)"
" #f)))"
"(if(unsafe-fx< index_15 8)"
"(let-values()"
"(if(ok-make-struct-type? e_12 required-reference?_8)"
" 5"
" #f))"
"(if(unsafe-fx< index_15 9)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'accessor)"
" 1"
" #f))"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'mutator)"
" 1"
" #f))))))))))))"
" loop_11)"
" e_6"
" locals_9)))"
"(not"
"(if actual-results_10"
"(let-values(((or-part_330)(not expected-results_7)))"
"(if or-part_330 or-part_330(= actual-results_10 expected-results_7)))"
" #f))))))))))"
"(define-values"
"(unpack7.1$2)"
"(lambda(given-kws_331 given-args_332 e3_333 expected-results4_334 required-reference?5_335)"
"(let-values(((locals2_336)(pair? given-kws_331)))"
"(let-values(((locals1_337)(if locals2_336(car given-args_332)(void))))"
"(any-side-effects?6.1 locals1_337 locals2_336 e3_333 expected-results4_334 required-reference?5_335)))))"
"(define-values"
"(any-side-effects?8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_338 given-argc_339)"
"(if(= given-argc_339 5)"
"(let-values(((l1_340) given-kws_338))"
"(let-values(((l1_341)(if(null? l1_340) l1_340(if(eq?(car l1_340) '#:locals)(cdr l1_340) l1_340))))"
"(null? l1_341)))"
" #f))"
"(case-lambda"
"((given-kws_342 given-args_343 e_344 expected-results_345 required-reference?_346)"
"(unpack7.1$2 given-kws_342 given-args_343 e_344 expected-results_345 required-reference?_346)))"
" null"
" '(#:locals)"
"(let-values(((any-side-effects?_347)"
"(case-lambda"
"((e_348 expected-results_349 required-reference?_350)"
"(unpack7.1$2 null null e_348 expected-results_349 required-reference?_350)))))"
" any-side-effects?_347)))"
"(define-values"
"(struct:struct-op make-struct-op struct-op? struct-op-type struct-op-field-count)"
"(let-values(((struct:_351 make-_352 ?_353 -ref_354 -set!_355)"
"(let-values()"
"(let-values()(make-struct-type 'struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'struct-op)))))"
"(values"
" struct:_351"
" make-_352"
" ?_353"
"(make-struct-field-accessor -ref_354 0 'type)"
"(make-struct-field-accessor -ref_354 1 'field-count))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_376 idss_377 rhss_378)"
"(let-values(((lst_379) idss_377)((lst_380) rhss_378))"
"(begin"
"(if(list? lst_379)(void)(let-values()(in-list lst_379)))"
"(if(list? lst_380)(void)(let-values()(in-list lst_380)))"
"((letrec-values(((for-loop_381)"
"(lambda(locals_382 lst_383 lst_384)"
"(if(if(pair? lst_383)(pair? lst_384) #f)"
"(let-values(((ids_385)(unsafe-car lst_383))((rhs_386)(unsafe-car lst_384)))"
"(let-values(((locals_387)"
"(let-values(((locals_388) locals_382))"
"(let-values(((locals_389)"
"(let-values()"
"((letrec-values(((loop_390)"
"(lambda(rhs_391)"
"(let-values(((tmp_392)"
"(if(pair?"
"(correlated-e"
" rhs_391))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_391)))"
" #f)))"
"(if(equal?"
" tmp_392"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_393)"
"(extract-struct-field-count-lower-bound"
" rhs_391)))"
"(let-values(((lst_394)"
"(correlated->list"
" ids_385))"
"((lst_395)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_394)"
"(void)"
"(let-values()"
"(in-list lst_394)))"
"(if(list? lst_395)"
"(void)"
"(let-values()"
"(in-list lst_395)))"
"((letrec-values(((for-loop_396)"
"(lambda(locals_397"
" lst_398"
" lst_399)"
"(if(if(pair?"
" lst_398)"
"(pair?"
" lst_399)"
" #f)"
"(let-values(((id_400)"
"(unsafe-car"
" lst_398))"
"((type_401)"
"(unsafe-car"
" lst_399)))"
"(let-values(((locals_402)"
"(let-values(((locals_403)"
" locals_397))"
"(let-values(((locals_404)"
"(let-values()"
"(hash-set"
" locals_403"
"(correlated-e"
" id_400)"
"(make-struct-op"
" type_401"
" field-count_393)))))"
"(values"
" locals_404)))))"
"(for-loop_396"
" locals_402"
"(unsafe-cdr"
" lst_398)"
"(unsafe-cdr"
" lst_399))))"
" locals_397))))"
" for-loop_396)"
" locals_388"
" lst_394"
" lst_395)))))"
"(if(equal? tmp_392 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_391)))"
"(loop_390"
"(caddr"
"(correlated->list"
" rhs_391)))"
"(loop_390 #f)))"
"(let-values()"
"(let-values(((lst_405)"
"(correlated->list"
" ids_385)))"
"(begin"
"(if(list? lst_405)"
"(void)"
"(let-values()"
"(in-list lst_405)))"
"((letrec-values(((for-loop_406)"
"(lambda(locals_407"
" lst_408)"
"(if(pair?"
" lst_408)"
"(let-values(((id_409)"
"(unsafe-car"
" lst_408)))"
"(let-values(((locals_410)"
"(let-values(((locals_411)"
" locals_407))"
"(let-values(((locals_412)"
"(let-values()"
"(hash-set"
" locals_411"
"(correlated-e"
" id_409)"
" #t))))"
"(values"
" locals_412)))))"
"(for-loop_406"
" locals_410"
"(unsafe-cdr"
" lst_408))))"
" locals_407))))"
" for-loop_406)"
" locals_388"
" lst_405))))))))))"
" loop_390)"
" rhs_386))))"
"(values locals_389)))))"
"(for-loop_381 locals_387(unsafe-cdr lst_383)(unsafe-cdr lst_384))))"
" locals_382))))"
" for-loop_381)"
" locals_376"
" lst_379"
" lst_380)))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_413 required-reference?_414)"
"(let-values(((l_415)(correlated->list e_413)))"
"(let-values(((init-field-count-expr_416)(if(>(length l_415) 3)(list-ref l_415 3) #f)))"
"(let-values(((immutables-expr_417)"
"(let-values(((or-part_418)(if(>(length l_415) 9)(list-ref l_415 9) #f)))"
"(if or-part_418 or-part_418 'null))))"
"(if(>=(length l_415) 5)"
"(if(<=(length l_415) 12)"
"(let-values(((pos->vals_419 pos-next_420 init_421 pos-cont?_422 val-cont?_423 all-cont?_424)"
"(make-sequence '(arg)(cdr l_415)))"
"((pos->vals_425 pos-next_426 init_427 pos-cont?_428 val-cont?_429 all-cont?_430)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_431)(quoted? symbol? v_431))"
"(lambda(v_432)(quoted? false? v_432))"
"(lambda(v_433)(field-count-expr-to-field-count v_433))"
"(lambda(v_434)(field-count-expr-to-field-count v_434))"
"(lambda(v_435)"
"(not"
"(let-values(((v67_436) v_435)"
"((temp68_437) 1)"
"((required-reference?69_438) required-reference?_414))"
"(if(variable-reference-constant?(#%variable-reference any-side-effects?8.1))"
"(any-side-effects?6.1 #f #f v67_436 temp68_437 required-reference?69_438)"
"(any-side-effects?8.1 v67_436 temp68_437 required-reference?69_438)))))"
"(lambda(v_439)(known-good-struct-properties? v_439 immutables-expr_417))"
"(lambda(v_440)(inspector-or-false? v_440))"
"(lambda(v_441)(procedure-spec? v_441 immutables-expr_417))"
"(lambda(v_442)(immutables-ok? v_442 init-field-count-expr_416))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_443)"
"(lambda(result_444 pos_445 pos_446)"
"(if(if(if pos-cont?_422(pos-cont?_422 pos_445) #t)"
"(if pos-cont?_428(pos-cont?_428 pos_446) #t)"
" #f)"
"(let-values(((arg_447)(pos->vals_419 pos_445))"
"((pred_448)(pos->vals_425 pos_446)))"
"(if(if(if val-cont?_423(val-cont?_423 arg_447) #t)"
"(if val-cont?_429(val-cont?_429 pred_448) #t)"
" #f)"
"(let-values(((result_449)"
"(let-values(((result_450) result_444))"
"(let-values(((result_451)"
"(let-values()"
"(let-values()(pred_448 arg_447)))))"
"(values result_451)))))"
"(if(if(if(if all-cont?_424(all-cont?_424 pos_445 arg_447) #t)"
"(not((lambda x_452(not result_449)) arg_447))"
" #f)"
"(if(if all-cont?_430(all-cont?_430 pos_446 pred_448) #t)"
"(not((lambda x_453(not result_449)) pred_448))"
" #f)"
" #f)"
"(for-loop_443 result_449(pos-next_420 pos_445)(pos-next_426 pos_446))"
" result_449))"
" result_444))"
" result_444))))"
" for-loop_443)"
" #t"
" init_421"
" init_427)))"
" #f)"
" #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_454)"
"(let-values(((l_455)(correlated->list e_454)))"
"(+(field-count-expr-to-field-count(list-ref l_455 3))(field-count-expr-to-field-count(list-ref l_455 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_456 v_457)"
"(let-values(((or-part_458)"
"(if(pair?(correlated-e v_457))"
"(if(eq?(correlated-e(car(correlated-e v_457))) 'quote)"
"(val?_456(correlated-e(correlated-cadr v_457)))"
" #f)"
" #f)))"
"(if or-part_458 or-part_458(val?_456(correlated-e v_457))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_459)(if(pair?(correlated-e v_459))(correlated-e(correlated-cadr v_459))(correlated-e v_459))))"
"(define-values(false?)(lambda(v_460)(eq?(correlated-e v_460) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_461)(if(quoted? exact-nonnegative-integer? v_461)(quoted-value v_461) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_462)"
"(let-values(((or-part_463)(quoted? false? v_462)))"
"(if or-part_463"
" or-part_463"
"(if(= 1(correlated-length v_462))(eq? 'current-inspector(correlated-e(car(correlated-e v_462)))) #f)))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_464 immutables-expr_465)"
"(let-values(((or-part_466)(quoted? null? v_464)))"
"(if or-part_466"
" or-part_466"
"(let-values(((or-part_467)(eq? 'null(correlated-e v_464))))"
"(if or-part_467"
" or-part_467"
"(if(pair?(correlated-e v_464))"
"(if(eq?(correlated-e(car(correlated-e v_464))) 'list)"
"(if(let-values(((lst_468)(cdr(correlated->list v_464))))"
"(begin"
"(if(list? lst_468)(void)(let-values()(in-list lst_468)))"
"((letrec-values(((for-loop_469)"
"(lambda(result_470 lst_471)"
"(if(pair? lst_471)"
"(let-values(((prop+val_472)(unsafe-car lst_471)))"
"(let-values(((result_473)"
"(let-values(((result_474) result_470))"
"(let-values(((result_475)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_472)"
" 3)"
"(let-values(((prop+val_476)"
"(correlated->list"
" prop+val_472)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_476)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_476 1)"
"(list-ref prop+val_476 2)"
" immutables-expr_465)"
" #f))"
" #f)))))"
"(values result_475)))))"
"(if(not((lambda x_477(not result_473)) prop+val_472))"
"(for-loop_469 result_473(unsafe-cdr lst_471))"
" result_473)))"
" result_470))))"
" for-loop_469)"
" #t"
" lst_468)))"
"(="
"(sub1(correlated-length v_464))"
"(set-count"
"(let-values(((lst_478)(cdr(correlated->list v_464))))"
"(begin"
"(if(list? lst_478)(void)(let-values()(in-list lst_478)))"
"((letrec-values(((for-loop_479)"
"(lambda(table_480 lst_481)"
"(if(pair? lst_481)"
"(let-values(((prop+val_482)(unsafe-car lst_481)))"
"(let-values(((table_483)"
"(let-values(((table_484) table_480))"
"(let-values(((table_485)"
"(let-values()"
"(let-values(((key_486 val_487)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_482)"
" 1)))"
" #t))))"
"(hash-set"
" table_484"
" key_486"
" val_487)))))"
"(values table_485)))))"
"(for-loop_479 table_483(unsafe-cdr lst_481))))"
" table_480))))"
" for-loop_479)"
" '#hash()"
" lst_478)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_488 val-expr_489 immutables-expr_490)"
"(let-values(((tmp_491)(correlated-e prop-expr_488)))"
"(if(equal? tmp_491 'prop:evt)"
"(let-values()(immutable-field? val-expr_489 immutables-expr_490))"
"(if(equal? tmp_491 'prop:procedure)"
"(let-values()(immutable-field? val-expr_489 immutables-expr_490))"
"(let-values() #f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_492 immutables-expr_493)"
"(if(quoted? exact-nonnegative-integer? val-expr_492)"
"(memv(quoted-value val-expr_492)(immutables-expr-to-immutables immutables-expr_493 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_494 fail-v_495)"
"(let-values(((tmp_496)(if(pair?(correlated-e e_494))(correlated-e(car(correlated-e e_494))) #f)))"
"(if(equal? tmp_496 'quote)"
"(let-values()"
"(let-values(((v_497)(correlated-cadr e_494)))"
"(let-values(((or-part_498)"
"(if(correlated-length v_497)"
"(let-values(((l_499)(map2 correlated-e(correlated->list v_497))))"
"(if(andmap2 exact-nonnegative-integer? l_499)"
"(if(=(length l_499)(set-count(list->set l_499))) l_499 #f)"
" #f))"
" #f)))"
"(if or-part_498 or-part_498 fail-v_495))))"
"(let-values() fail-v_495)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_500 immutables-expr_501)"
"(let-values(((or-part_502)(quoted? false? e_500)))"
"(if or-part_502"
" or-part_502"
"(if(quoted? exact-nonnegative-integer? e_500)"
"(memv(quoted-value e_500)(immutables-expr-to-immutables immutables-expr_501 null))"
" #f)))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_503 init-field-count-expr_504)"
"(let-values(((l_505)(immutables-expr-to-immutables e_503 #f)))"
"(let-values(((c_506)(field-count-expr-to-field-count init-field-count-expr_504)))"
"(if l_505"
"(let-values(((lst_507) l_505))"
"(begin"
"(if(list? lst_507)(void)(let-values()(in-list lst_507)))"
"((letrec-values(((for-loop_508)"
"(lambda(result_509 lst_510)"
"(if(pair? lst_510)"
"(let-values(((n_511)(unsafe-car lst_510)))"
"(let-values(((result_512)"
"(let-values(((result_513) result_509))"
"(let-values(((result_514)"
"(let-values()(let-values()(< n_511 c_506)))))"
"(values result_514)))))"
"(if(not((lambda x_515(not result_512)) n_511))"
"(for-loop_508 result_512(unsafe-cdr lst_510))"
" result_512)))"
" result_509))))"
" for-loop_508)"
" #t"
" lst_507)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_516 locals_517 type_518)"
"(let-values(((l_519)(correlated->list e_516)))"
"(let-values(((a_520)(if(=(length l_519) 4)(hash-ref locals_517(correlated-e(list-ref l_519 1)) #f) #f)))"
"(if(struct-op? a_520)"
"(if(eq?(struct-op-type a_520) type_518)"
"(if(<(field-count-expr-to-field-count(list-ref l_519 2))(struct-op-field-count a_520))"
"(quoted? symbol?(list-ref l_519 3))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(void)"
"(define-values"
"(compile-single)"
"(lambda(s_1 cctx_2)"
"(let-values(((...nder/compile/top.rkt:28:2_3) compile-top11.1)"
"((s12_4) s_1)"
"((cctx13_5) cctx_2)"
"((temp14_6) #f)"
"((temp15_7) #t))"
"(if(variable-reference-constant?(#%variable-reference compile-top11.1))"
"(compile-top9.1 temp14_6 #t temp15_7 #t #f #f s12_4 cctx13_5)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:28:2_3"
" keyword-procedure-extract"
" '(#:serializable? #:single-expression?)"
" 4)"
" '(#:serializable? #:single-expression?)"
"(list temp14_6 temp15_7)"
" s12_4"
" cctx13_5)))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_8"
" serializable?4_9"
" single-expression?2_10"
" single-expression?5_11"
" to-source?3_12"
" to-source?6_13"
" s7_14"
" cctx8_15)"
"(let-values(((s_16) s7_14))"
"(let-values(((cctx_17) cctx8_15))"
"(let-values(((serializable?_18)(if serializable?4_9 serializable?1_8 #t)))"
"(let-values(((single-expression?_19)(if single-expression?5_11 single-expression?2_10 #f)))"
"(let-values(((to-source?_20)(if to-source?6_13 to-source?3_12 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_21)(compile-context-phase cctx_17)))"
"(let-values(((mpis_22)(make-module-path-index-table)))"
"(let-values(((purely-functional?_23) #t))"
"(let-values(((body-linklets_24"
" min-phase_25"
" max-phase_26"
" phase-to-link-module-uses_27"
" phase-to-link-module-uses-expr_28"
" phase-to-link-extra-inspectorsss_29"
" syntax-literals_30"
" no-root-context-pos_31)"
"(let-values(((...nder/compile/top.rkt:60:5_34) compile-forms26.1)"
"((temp16_35)(list s_16))"
"((cctx17_36) cctx_17)"
"((mpis18_37) mpis_22)"
"((temp19_38)"
"(if single-expression?_19"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((to-source?20_39) to-source?_20)"
"((temp21_40)(lambda()(set! purely-functional?_23 #f)))"
"((temp22_41)"
"(lambda(e_43 expected-results_44 phase_45 required-reference?_46)"
"(if(if purely-functional?_23"
"(let-values(((e24_47) e_43)"
"((expected-results25_48) expected-results_44)"
"((required-reference?26_49)"
" required-reference?_46))"
"(if(variable-reference-constant?"
"(#%variable-reference any-side-effects?8.1))"
"(any-side-effects?6.1"
" #f"
" #f"
" e24_47"
" expected-results25_48"
" required-reference?26_49)"
"(any-side-effects?8.1"
" e24_47"
" expected-results25_48"
" required-reference?26_49)))"
" #f)"
"(let-values()(set! purely-functional?_23 #f))"
"(void))))"
"((temp23_42)"
"(lambda(s_50 cctx_51)"
"(begin"
"(set! purely-functional?_23 #f)"
"(compile-top-level-require s_50 cctx_51)))))"
"(if(variable-reference-constant?(#%variable-reference compile-forms26.1))"
"(compile-forms24.1"
" temp19_38"
" #f"
" #f"
" temp22_41"
" #t"
" temp21_40"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp23_42"
" #t"
" #f"
" #f"
" to-source?20_39"
" #t"
" temp16_35"
" cctx17_36"
" mpis18_37)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:60:5_34"
" keyword-procedure-extract"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:definition-callback"
" #:other-form-callback"
" #:to-source?)"
" 5)"
" '(#:body-imports"
" #:compiled-expression-callback"
" #:definition-callback"
" #:other-form-callback"
" #:to-source?)"
"(list temp19_38 temp22_41 temp21_40 temp23_42 to-source?20_39)"
" temp16_35"
" cctx17_36"
" mpis18_37)))))"
"(let-values(((add-metadata_32)"
"(lambda(ht_52)"
"(let-values(((ht_53)(hash-set ht_52 'original-phase phase_21)))"
"(let-values(((ht_54)(hash-set ht_53 'max-phase max-phase_26))) ht_54)))))"
"(let-values(((bundle_33)"
"((if to-source?_20 values 1/hash->linklet-bundle)"
"(add-metadata_32"
"(if serializable?_18"
"(let-values()"
"(let-values(((syntax-literals-expr_55)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_30"
" mpis_22"
" phase_21"
"(compile-context-self cctx_17)"
"(compile-context-namespace cctx_17)))))"
"(let-values(((link-linklet_56)"
"((if to-source?_20"
" values"
"(lambda(s_57)"
"(let-values()(1/compile-linklet s_57))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_22))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_21) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_28)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_55)))))"
"(hash-set body-linklets_24 'link link-linklet_56))))"
"(let-values() body-linklets_24))))))"
"(if to-source?_20"
"(let-values()(hasheq #f bundle_33))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_33))"
" phase-to-link-module-uses_27"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_29"
"(mpis-as-vector mpis_22)"
"(syntax-literals-as-vector syntax-literals_30)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_17))"
" purely-functional?_23))))))))))))))))))"
"(define-values"
"(unpack10.1$2)"
"(lambda(given-kws_58 given-args_59 s7_60 cctx8_61)"
"(let-values(((serializable?4_62)(if(pair? given-kws_58)(eq? '#:serializable?(car given-kws_58)) #f)))"
"(let-values(((serializable?1_63)(if serializable?4_62(car given-args_59)(void)))"
"((given-kws_64)(if serializable?4_62(cdr given-kws_58) given-kws_58))"
"((given-args_65)(if serializable?4_62(cdr given-args_59) given-args_59)))"
"(let-values(((single-expression?5_66)"
"(if(pair? given-kws_64)(eq? '#:single-expression?(car given-kws_64)) #f)))"
"(let-values(((single-expression?2_67)(if single-expression?5_66(car given-args_65)(void)))"
"((given-kws_68)(if single-expression?5_66(cdr given-kws_64) given-kws_64))"
"((given-args_69)(if single-expression?5_66(cdr given-args_65) given-args_65)))"
"(let-values(((to-source?6_70)(pair? given-kws_68)))"
"(let-values(((to-source?3_71)(if to-source?6_70(car given-args_69)(void))))"
"(compile-top9.1"
" serializable?1_63"
" serializable?4_62"
" single-expression?2_67"
" single-expression?5_66"
" to-source?3_71"
" to-source?6_70"
" s7_60"
" cctx8_61)))))))))"
"(define-values"
"(compile-top11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_72 given-argc_73)"
"(if(= given-argc_73 4)"
"(let-values(((l1_74) given-kws_72))"
"(let-values(((l1_75)(if(null? l1_74) l1_74(if(eq?(car l1_74) '#:serializable?)(cdr l1_74) l1_74))))"
"(let-values(((l1_76) l1_75))"
"(let-values(((l1_77)"
"(if(null? l1_76) l1_76(if(eq?(car l1_76) '#:single-expression?)(cdr l1_76) l1_76))))"
"(let-values(((l1_78) l1_77))"
"(let-values(((l1_79)(if(null? l1_78) l1_78(if(eq?(car l1_78) '#:to-source?)(cdr l1_78) l1_78))))"
"(null? l1_79)))))))"
" #f))"
"(case-lambda((given-kws_80 given-args_81 s_82 cctx_83)(unpack10.1$2 given-kws_80 given-args_81 s_82 cctx_83)))"
" null"
" '(#:serializable? #:single-expression? #:to-source?)"
"(let-values(((compile-top_84)(case-lambda((s_85 cctx_86)(unpack10.1$2 null null s_85 cctx_86)))))"
" compile-top_84)))"
"(define-values"
"(compile-top-level-require)"
"(lambda(s_87 cctx_88)"
"(let-values(((phase_89)(compile-context-phase cctx_88)))"
"(let-values(((tmp_90)(core-form-sym s_87 phase_89)))"
"(if(equal? tmp_90 '#%require)"
"(let-values()"
"(let-values(((form-stx_91)(compile-quote-syntax s_87 cctx_88)))"
"(list top-level-require!-id form-stx_91 ns-id)))"
"(let-values() #f))))))"
"(void)"
"(void)"
"(define-values"
"(compile-module15.1)"
"(lambda(as-submodule?3_6"
" as-submodule?9_7"
" modules-being-compiled6_8"
" modules-being-compiled12_9"
" self1_10"
" self7_11"
" serializable?4_12"
" serializable?10_13"
" to-source?5_14"
" to-source?11_15"
" with-submodules?2_16"
" with-submodules?8_17"
" s13_18"
" cctx14_19)"
"(let-values(((s_20) s13_18))"
"(let-values(((cctx_21) cctx14_19))"
"(let-values(((given-self_22)(if self7_11 self1_10 #f)))"
"(let-values(((with-submodules?_23)(if with-submodules?8_17 with-submodules?2_16 #t)))"
"(let-values(((as-submodule?_24)(if as-submodule?9_7 as-submodule?3_6 #f)))"
"(let-values(((serializable?_25)(if serializable?10_13 serializable?4_12 with-submodules?_23)))"
"(let-values(((to-source?_26)(if to-source?11_15 to-source?5_14 #f)))"
"(let-values(((modules-being-compiled_27)"
"(if modules-being-compiled12_9"
" modules-being-compiled6_8"
"(if with-submodules?_23(make-hasheq) #f))))"
"(let-values()"
"(let-values()"
"(let-values(((ok?_28 module34_29 name35_30 initial-require36_31 mb37_32)"
"(let-values(((s_92)(syntax-disarm$1 s_20)))"
"(let-values(((orig-s_93) s_92))"
"(let-values(((module34_94 name35_95 initial-require36_96 mb37_97)"
"(let-values(((s_98)"
"(if(syntax?$1 s_92)(syntax-e$1 s_92) s_92)))"
"(if(pair? s_98)"
"(let-values(((module38_99)"
"(let-values(((s_103)(car s_98))) s_103))"
"((name39_100 initial-require40_101 mb41_102)"
"(let-values(((s_104)(cdr s_98)))"
"(let-values(((s_105)"
"(if(syntax?$1 s_104)"
"(syntax-e$1 s_104)"
" s_104)))"
"(if(pair? s_105)"
"(let-values(((name42_106)"
"(let-values(((s_109)"
"(car"
" s_105)))"
" s_109))"
"((initial-require43_107"
" mb44_108)"
"(let-values(((s_110)"
"(cdr"
" s_105)))"
"(let-values(((s_111)"
"(if(syntax?$1"
" s_110)"
"(syntax-e$1"
" s_110)"
" s_110)))"
"(if(pair? s_111)"
"(let-values(((initial-require45_112)"
"(let-values(((s_114)"
"(car"
" s_111)))"
" s_114))"
"((mb46_113)"
"(let-values(((s_115)"
"(cdr"
" s_111)))"
"(let-values(((s_116)"
"(if(syntax?$1"
" s_115)"
"(syntax-e$1"
" s_115)"
" s_115)))"
"(if(pair?"
" s_116)"
"(let-values(((mb47_117)"
"(let-values(((s_118)"
"(car"
" s_116)))"
" s_118))"
"(()"
"(let-values(((s_119)"
"(cdr"
" s_116)))"
"(let-values(((s_120)"
"(if(syntax?$1"
" s_119)"
"(syntax-e$1"
" s_119)"
" s_119)))"
"(if(null?"
" s_120)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_93))))))"
"(values"
" mb47_117))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_93))))))"
"(values"
" initial-require45_112"
" mb46_113))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_93))))))"
"(values"
" name42_106"
" initial-require43_107"
" mb44_108))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_93))))))"
"(values"
" module38_99"
" name39_100"
" initial-require40_101"
" mb41_102))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_93)))))"
"(values #t module34_94 name35_95 initial-require36_96 mb37_97))))))"
"(let-values(((ok?_47 #%module-begin48_48 body49_49)"
"(let-values(((s_121)(syntax-disarm$1 mb37_32)))"
"(let-values(((orig-s_122) s_121))"
"(let-values(((#%module-begin48_123 body49_124)"
"(let-values(((s_125)"
"(if(syntax?$1 s_121)"
"(syntax-e$1 s_121)"
" s_121)))"
"(if(pair? s_125)"
"(let-values(((#%module-begin50_126)"
"(let-values(((s_128)(car s_125))) s_128))"
"((body51_127)"
"(let-values(((s_129)(cdr s_125)))"
"(let-values(((s_130)"
"(if(syntax?$1 s_129)"
"(syntax-e$1 s_129)"
" s_129)))"
"(let-values(((flat-s_131)"
"(to-syntax-list.1 s_130)))"
"(if(not flat-s_131)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_122))"
"(let-values() flat-s_131)))))))"
"(values #%module-begin50_126 body51_127))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_122)))))"
"(values #t #%module-begin48_123 body49_124))))))"
"(let-values(((enclosing-self_60)(compile-context-module-self cctx_21)))"
"(let-values(((self_61)"
"(let-values(((or-part_132) given-self_22))"
"(if or-part_132"
" or-part_132"
"(make-generic-self-module-path-index"
"(make-self-module-path-index"
"(syntax-e$1 name35_30)"
" enclosing-self_60))))))"
"(let-values(((full-module-name_62)"
"(let-values(((parent-full-name_133)"
"(compile-context-full-module-name cctx_21))"
"((name_134)(syntax-e$1 name35_30)))"
"(if parent-full-name_133"
"(append"
"(if(list? parent-full-name_133)"
" parent-full-name_133"
"(list parent-full-name_133))"
"(list name_134))"
" name_134))))"
"(let-values(((requires_63)(syntax-property$1 s_20 'module-requires)))"
"(let-values(((provides_64)(syntax-property$1 s_20 'module-provides)))"
"(let-values(((encoded-root-expand-ctx-box_65)"
"(box(syntax-property$1 s_20 'module-root-expand-context))))"
"(let-values(((body-context-simple?_66)"
"(syntax-property$1 s_20 'module-body-context-simple?)))"
"(let-values(((language-info_67)"
"(filter-language-info"
"(syntax-property$1 s_20 'module-language))))"
"(let-values(((bodys_68) body49_49))"
"(let-values(((empty-result-for-module->namespace?_69) #f))"
"(let-values(((mpis_70)(make-module-path-index-table)))"
"(let-values(((body-cctx_71)"
"(let-values(((the-struct_135) cctx_21))"
"(if(compile-context? the-struct_135)"
"(let-values(((phase52_136) 0)"
"((self53_137) self_61)"
"((module-self54_138) self_61)"
"((full-module-name55_139)"
" full-module-name_62)"
"((lazy-syntax-literals?56_140) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_135)"
" phase52_136"
"(compile-context-top-level-bind-scope"
" the-struct_135)"
" self53_137"
" module-self54_138"
" full-module-name55_139"
" lazy-syntax-literals?56_140"
"(compile-context-header the-struct_135)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"compile-context?\""
" the-struct_135)))))"
"(let-values(((cross-phase-persistent?_72) #f))"
"(let-values(((side-effects_73)(make-hasheqv)))"
"(let-values(((check-side-effects!_74)"
"(lambda(e_141"
" expected-results_142"
" phase_143"
" required-reference?_144)"
"(if(hash-ref side-effects_73 phase_143 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e57_145) e_141)"
"((expected-results58_146)"
" expected-results_142)"
"((required-reference?59_147)"
" required-reference?_144))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" #f"
" #f"
" e57_145"
" expected-results58_146"
" required-reference?59_147)"
"(any-side-effects?8.1"
" e57_145"
" expected-results58_146"
" required-reference?59_147)))"
"(let-values()"
"(hash-set!"
" side-effects_73"
" phase_143"
" #t))"
"(void)))))))"
"(let-values(((pre-submodules_75)"
"(let-values(((...r/compile/module.rkt:90:26_148)"
" compile-submodules33.1)"
"((temp60_149) 'module)"
"((bodys61_150) bodys_68)"
"((with-submodules?62_151)"
" with-submodules?_23)"
"((serializable?63_152)"
" serializable?_25)"
"((to-source?64_153) to-source?_26)"
"((body-cctx65_154) body-cctx_71)"
"((modules-being-compiled66_155)"
" modules-being-compiled_27))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules33.1))"
"(compile-submodules31.1"
" bodys61_150"
" body-cctx65_154"
" modules-being-compiled66_155"
" serializable?63_152"
" to-source?64_153"
" with-submodules?62_151"
" temp60_149)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:90:26_148"
" keyword-procedure-extract"
" '(#:bodys"
" #:cctx"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
" 3)"
" '(#:bodys"
" #:cctx"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
"(list"
" bodys61_150"
" body-cctx65_154"
" modules-being-compiled66_155"
" serializable?63_152"
" to-source?64_153"
" with-submodules?62_151)"
" temp60_149)))))"
"(let-values(((body-linklets_76"
" min-phase_77"
" max-phase_78"
" phase-to-link-module-uses_79"
" phase-to-link-module-uses-expr_80"
" phase-to-link-extra-inspectorsss_81"
" syntax-literals_82"
" root-ctx-pos_83)"
"(let-values(((...r/compile/module.rkt:107:5_156)"
" compile-forms26.1)"
"((bodys67_157) bodys_68)"
"((body-cctx68_158) body-cctx_71)"
"((mpis69_159) mpis_70)"
"((temp70_160)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp71_161) '((void)))"
"((temp72_162) '(0))"
"((encoded-root-expand-ctx-box73_163)"
" encoded-root-expand-ctx-box_65)"
"((body-context-simple?74_164)"
" body-context-simple?_66)"
"((check-side-effects!75_165)"
" check-side-effects!_74)"
"((temp76_166)"
"(lambda(body_169 cctx_170)"
"(let-values(((tmp_171)"
"(core-form-sym"
" body_169"
"(compile-context-phase"
" cctx_170))))"
"(if(equal?"
" tmp_171"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_172"
" #%declare79_173"
" kw80_174)"
"(let-values(((s_185)"
" body_169))"
"(let-values(((orig-s_186)"
" s_185))"
"(let-values(((#%declare79_187"
" kw80_188)"
"(let-values(((s_189)"
"(if(syntax?$1"
" s_185)"
"(syntax-e$1"
" s_185)"
" s_185)))"
"(if(pair?"
" s_189)"
"(let-values(((#%declare81_190)"
"(let-values(((s_192)"
"(car"
" s_189)))"
" s_192))"
"((kw82_191)"
"(let-values(((s_193)"
"(cdr"
" s_189)))"
"(let-values(((s_194)"
"(if(syntax?$1"
" s_193)"
"(syntax-e$1"
" s_193)"
" s_193)))"
"(let-values(((flat-s_195)"
"(to-syntax-list.1"
" s_194)))"
"(if(not"
" flat-s_195)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_186))"
"(let-values()"
" flat-s_195)))))))"
"(values"
" #%declare81_190"
" kw82_191))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_186)))))"
"(values"
" #t"
" #%declare79_187"
" kw80_188))))))"
"(begin"
"(let-values(((lst_196)"
" kw80_174))"
"(begin"
"(if(list?"
" lst_196)"
"(void)"
"(let-values()"
"(in-list"
" lst_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(fold-var_198"
" lst_199)"
"(if(pair?"
" lst_199)"
"(let-values(((kw_200)"
"(unsafe-car"
" lst_199)))"
"(let-values(((fold-var_201)"
"(let-values(((fold-var_202)"
" fold-var_198))"
"(let-values(((fold-var_203)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_200)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_72"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_200)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_69"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_65"
" #t)))"
"(void))))"
"(void)))))"
"(values"
" fold-var_203)))))"
"(for-loop_197"
" fold-var_201"
"(unsafe-cdr"
" lst_199))))"
" fold-var_198))))"
" for-loop_197)"
"(void)"
" lst_196)))"
" #f)))"
"(let-values() #f)))))"
"((temp77_167)"
"(lambda(mod-name_204 phase_205)"
"(let-values(((ht_206)"
"(if modules-being-compiled_27"
"(hash-ref"
" modules-being-compiled_27"
" mod-name_204"
" #f)"
" #f)))"
"(if ht_206"
"(hash-ref"
" ht_206"
" phase_205"
" #f)"
" #f))))"
"((to-source?78_168)"
" to-source?_26))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-forms26.1))"
"(compile-forms24.1"
" temp70_160"
" temp71_161"
" #t"
" check-side-effects!75_165"
" #t"
" #f"
" #f"
" encoded-root-expand-ctx-box73_163"
" #t"
" temp72_162"
" #t"
" temp77_167"
" #t"
" temp76_166"
" #t"
" body-context-simple?74_164"
" #t"
" to-source?78_168"
" #t"
" bodys67_157"
" body-cctx68_158"
" mpis69_159)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:107:5_156"
" keyword-procedure-extract"
" '(#:body-imports"
" #:body-suffix-forms"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:force-phases"
" #:get-module-linklet-info"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
" 5)"
" '(#:body-imports"
" #:body-suffix-forms"
" #:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:force-phases"
" #:get-module-linklet-info"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
"(list"
" temp70_160"
" temp71_161"
" check-side-effects!75_165"
" encoded-root-expand-ctx-box73_163"
" temp72_162"
" temp77_167"
" temp76_166"
" body-context-simple?74_164"
" to-source?78_168)"
" bodys67_157"
" body-cctx68_158"
" mpis69_159)))))"
"(let-values((()"
"(begin"
"(if with-submodules?_23"
"(let-values()"
"(hash-set!"
" modules-being-compiled_27"
"(1/module-path-index-resolve self_61)"
"(let-values(((ht_207)"
" body-linklets_76))"
"(begin"
"(if((lambda(ht_208)"
"(hash? ht_208))"
" ht_207)"
"(void)"
"(let-values()"
"(default-in-hash ht_207)))"
"((letrec-values(((for-loop_209)"
"(lambda(table_210"
" i_211)"
"(if i_211"
"(let-values(((phase_212"
" linklet_213)"
"(hash-iterate-key+value"
" ht_207"
" i_211)))"
"(let-values(((table_214)"
"(let-values(((table_215)"
" table_210))"
"(let-values(((table_216)"
"(let-values()"
"(let-values(((key_217"
" val_218)"
"(let-values()"
"(values"
" phase_212"
"(module-linklet-info2.1"
" linklet_213"
"(hash-ref"
" phase-to-link-module-uses_79"
" phase_212"
" #f)"
" self_61)))))"
"(hash-set"
" table_215"
" key_217"
" val_218)))))"
"(values"
" table_216)))))"
"(for-loop_209"
" table_214"
"(hash-iterate-next"
" ht_207"
" i_211))))"
" table_210))))"
" for-loop_209)"
" '#hasheq()"
"(hash-iterate-first ht_207))))))"
"(void))"
"(values))))"
"(let-values(((post-submodules_84)"
"(let-values(((...r/compile/module.rkt:145:27_219)"
" compile-submodules33.1)"
"((temp83_220) 'module*)"
"((bodys84_221) bodys_68)"
"((with-submodules?85_222)"
" with-submodules?_23)"
"((serializable?86_223)"
" serializable?_25)"
"((to-source?87_224)"
" to-source?_26)"
"((body-cctx88_225)"
" body-cctx_71)"
"((modules-being-compiled89_226)"
" modules-being-compiled_27))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules33.1))"
"(compile-submodules31.1"
" bodys84_221"
" body-cctx88_225"
" modules-being-compiled89_226"
" serializable?86_223"
" to-source?87_224"
" with-submodules?85_222"
" temp83_220)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:145:27_219"
" keyword-procedure-extract"
" '(#:bodys"
" #:cctx"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
" 3)"
" '(#:bodys"
" #:cctx"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?"
" #:with-submodules?)"
"(list"
" bodys84_221"
" body-cctx88_225"
" modules-being-compiled89_226"
" serializable?86_223"
" to-source?87_224"
" with-submodules?85_222)"
" temp83_220)))))"
"(let-values(((declaration-body_85)"
"(list"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index!"
" mpis_70"
" self_61))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((...r/compile/module.rkt:157:34_227)"
" generate-deserialize8.1)"
"((requires90_228)"
" requires_63)"
"((mpis91_229) mpis_70)"
"((temp92_230) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-deserialize8.1))"
"(generate-deserialize6.1"
" temp92_230"
" #t"
" requires90_228"
" mpis91_229)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:157:34_227"
" keyword-procedure-extract"
" '(#:syntax-support?)"
" 4)"
" '(#:syntax-support?)"
"(list temp92_230)"
" requires90_228"
" mpis91_229))))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((...r/compile/module.rkt:158:34_231)"
" generate-deserialize8.1)"
"((provides93_232)"
" provides_64)"
"((mpis94_233) mpis_70)"
"((temp95_234) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-deserialize8.1))"
"(generate-deserialize6.1"
" temp95_234"
" #t"
" provides93_232"
" mpis94_233)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:158:34_231"
" keyword-procedure-extract"
" '(#:syntax-support?)"
" 4)"
" '(#:syntax-support?)"
"(list temp95_234)"
" provides93_232"
" mpis94_233))))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_80))))"
"(let-values(((declaration-linklet_86)"
"((if to-source?_26"
" values"
"(lambda(s_235)"
"(let-values()"
"(1/compile-linklet"
" s_235"
" 'decl))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
" declaration-body_85))))"
"(let-values(((syntax-literals-linklet_87)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_82))"
"((if to-source?_26"
" values"
"(lambda(s_236)"
"(let-values()"
"(1/compile-linklet"
" s_236"
" 'syntax-literals))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_25"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((...r/compile/module.rkt:201:15_237)"
" generate-lazy-syntax-literals!11.1)"
"((syntax-literals96_238)"
" syntax-literals_82)"
"((mpis97_239)"
" mpis_70)"
"((self98_240)"
" self_61)"
"((temp99_241)"
"(not"
" serializable?_25)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-lazy-syntax-literals!11.1))"
"(generate-lazy-syntax-literals!9.1"
" temp99_241"
" #t"
" syntax-literals96_238"
" mpis97_239"
" self98_240)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:201:15_237"
" keyword-procedure-extract"
" '(#:skip-deserialize?)"
" 5)"
" '(#:skip-deserialize?)"
"(list temp99_241)"
" syntax-literals96_238"
" mpis97_239"
" self98_240)))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_83"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_83)))"
"(if empty-result-for-module->namespace?_69"
"(let-values() ''empty)"
"(let-values()"
" ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_88)"
"(if serializable?_25"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_82))"
"((if to-source?_26"
" values"
"(lambda(s_242)"
"(let-values()"
"(1/compile-linklet"
" s_242"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_82)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_82"
" mpis_70))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_89)"
"(if serializable?_25"
"((if to-source?_26"
" values"
"(lambda(s_243)"
"(let-values()"
"(1/compile-linklet"
" s_243"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_70))))"
" #f)))"
"(let-values(((bundle_90)"
"(let-values(((bundle_244)"
"(hash-set"
" body-linklets_76"
" 'name"
" full-module-name_62)))"
"(let-values(((bundle_245)"
"(hash-set"
" bundle_244"
" 'decl"
" declaration-linklet_86)))"
"(let-values(((bundle_246)"
"(if data-linklet_89"
"(hash-set"
" bundle_245"
" 'data"
" data-linklet_89)"
" bundle_245)))"
"(let-values(((bundle_247)"
"(if syntax-literals-linklet_87"
"(hash-set"
" bundle_246"
" 'stx"
" syntax-literals-linklet_87)"
" bundle_246)))"
"(let-values(((bundle_248)"
"(if syntax-literals-data-linklet_88"
"(hash-set"
" bundle_247"
" 'stx-data"
" syntax-literals-data-linklet_88)"
" bundle_247)))"
"(let-values(((bundle_249)"
"(if(null?"
" pre-submodules_75)"
" bundle_248"
"(hash-set"
" bundle_248"
" 'pre"
"(map2"
" car"
" pre-submodules_75)))))"
"(let-values(((bundle_250)"
"(if(null?"
" post-submodules_84)"
" bundle_249"
"(hash-set"
" bundle_249"
" 'post"
"(map2"
" car"
" post-submodules_84)))))"
"(let-values(((bundle_251)"
"(if cross-phase-persistent?_72"
"(hash-set"
" bundle_250"
" 'cross-phase-persistent?"
" #t)"
" bundle_250)))"
"(let-values(((bundle_252)"
"(if language-info_67"
"(hash-set"
" bundle_251"
" 'language-info"
" language-info_67)"
" bundle_251)))"
"(let-values(((bundle_253)"
"(if(zero?"
" min-phase_77)"
" bundle_252"
"(hash-set"
" bundle_252"
" 'min-phase"
" min-phase_77))))"
"(let-values(((bundle_254)"
"(if(zero?"
" max-phase_78)"
" bundle_253"
"(hash-set"
" bundle_253"
" 'max-phase"
" max-phase_78))))"
"(let-values(((bundle_255)"
"(if(hash-count"
" side-effects_73)"
"(hash-set"
" bundle_254"
" 'side-effects"
"(let-values(((temp100_256)"
"(hash-keys"
" side-effects_73))"
"((<101_257)"
" <))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp100_256"
" <101_257)"
"(sort9.1"
" temp100_256"
" <101_257))))"
" bundle_254)))"
"(let-values(((bundle_258)"
"(if empty-result-for-module->namespace?_69"
"(hash-set"
" bundle_255"
" 'module->namespace"
" 'empty)"
" bundle_255)))"
"(1/hash->linklet-bundle"
" bundle_258))))))))))))))))"
"(let-values(((ld_91)"
"(if(if(null?"
" pre-submodules_75)"
"(if(null?"
" post-submodules_84)"
"(not"
" as-submodule?_24)"
" #f)"
" #f)"
"(let-values() bundle_90)"
"(let-values()"
"((if to-source?_26"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_259)"
"(append"
" pre-submodules_75"
" post-submodules_84)))"
"(begin"
"(if(list? lst_259)"
"(void)"
"(let-values()"
"(in-list"
" lst_259)))"
"((letrec-values(((for-loop_260)"
"(lambda(ht_261"
" lst_262)"
"(if(pair?"
" lst_262)"
"(let-values(((sm_263)"
"(unsafe-car"
" lst_262)))"
"(let-values(((ht_264)"
"(let-values(((ht_265)"
" ht_261))"
"(let-values(((ht_266)"
"(let-values()"
"(hash-set"
" ht_265"
"(car"
" sm_263)"
"((if to-source?_26"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_263))))))"
"(values"
" ht_266)))))"
"(for-loop_260"
" ht_264"
"(unsafe-cdr"
" lst_262))))"
" ht_261))))"
" for-loop_260)"
"(hasheq"
" #f"
" bundle_90)"
" lst_259))))))))"
"(if to-source?_26"
"(let-values() ld_91)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_91"
" phase-to-link-module-uses_79"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_81"
"(mpis-as-vector mpis_70)"
"(syntax-literals-as-vector"
" syntax-literals_82)"
"(map2 cdr pre-submodules_75)"
"(map2 cdr post-submodules_84)"
" #f"
" #f)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_267 given-args_268 s13_269 cctx14_270)"
"(let-values(((as-submodule?9_271)(if(pair? given-kws_267)(eq? '#:as-submodule?(car given-kws_267)) #f)))"
"(let-values(((as-submodule?3_272)(if as-submodule?9_271(car given-args_268)(void)))"
"((given-kws_273)(if as-submodule?9_271(cdr given-kws_267) given-kws_267))"
"((given-args_274)(if as-submodule?9_271(cdr given-args_268) given-args_268)))"
"(let-values(((modules-being-compiled12_275)"
"(if(pair? given-kws_273)(eq? '#:modules-being-compiled(car given-kws_273)) #f)))"
"(let-values(((modules-being-compiled6_276)(if modules-being-compiled12_275(car given-args_274)(void)))"
"((given-kws_277)(if modules-being-compiled12_275(cdr given-kws_273) given-kws_273))"
"((given-args_278)(if modules-being-compiled12_275(cdr given-args_274) given-args_274)))"
"(let-values(((self7_279)(if(pair? given-kws_277)(eq? '#:self(car given-kws_277)) #f)))"
"(let-values(((self1_280)(if self7_279(car given-args_278)(void)))"
"((given-kws_281)(if self7_279(cdr given-kws_277) given-kws_277))"
"((given-args_282)(if self7_279(cdr given-args_278) given-args_278)))"
"(let-values(((serializable?10_283)"
"(if(pair? given-kws_281)(eq? '#:serializable?(car given-kws_281)) #f)))"
"(let-values(((serializable?4_284)(if serializable?10_283(car given-args_282)(void)))"
"((given-kws_285)(if serializable?10_283(cdr given-kws_281) given-kws_281))"
"((given-args_286)(if serializable?10_283(cdr given-args_282) given-args_282)))"
"(let-values(((to-source?11_287)"
"(if(pair? given-kws_285)(eq? '#:to-source?(car given-kws_285)) #f)))"
"(let-values(((to-source?5_288)(if to-source?11_287(car given-args_286)(void)))"
"((given-kws_289)(if to-source?11_287(cdr given-kws_285) given-kws_285))"
"((given-args_290)(if to-source?11_287(cdr given-args_286) given-args_286)))"
"(let-values(((with-submodules?8_291)(pair? given-kws_289)))"
"(let-values(((with-submodules?2_292)(if with-submodules?8_291(car given-args_290)(void))))"
"(compile-module15.1"
" as-submodule?3_272"
" as-submodule?9_271"
" modules-being-compiled6_276"
" modules-being-compiled12_275"
" self1_280"
" self7_279"
" serializable?4_284"
" serializable?10_283"
" to-source?5_288"
" to-source?11_287"
" with-submodules?2_292"
" with-submodules?8_291"
" s13_269"
" cctx14_270)))))))))))))))"
"(define-values"
"(compile-module17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 4)"
"(let-values(((l1_295) given-kws_293))"
"(let-values(((l1_296)"
"(if(null? l1_295) l1_295(if(eq?(car l1_295) '#:as-submodule?)(cdr l1_295) l1_295))))"
"(let-values(((l1_297) l1_296))"
"(let-values(((l1_298)"
"(if(null? l1_297)"
" l1_297"
"(if(eq?(car l1_297) '#:modules-being-compiled)(cdr l1_297) l1_297))))"
"(let-values(((l1_299) l1_298))"
"(let-values(((l1_300)(if(null? l1_299) l1_299(if(eq?(car l1_299) '#:self)(cdr l1_299) l1_299))))"
"(let-values(((l1_301) l1_300))"
"(let-values(((l1_302)"
"(if(null? l1_301)"
" l1_301"
"(if(eq?(car l1_301) '#:serializable?)(cdr l1_301) l1_301))))"
"(let-values(((l1_303) l1_302))"
"(let-values(((l1_304)"
"(if(null? l1_303)"
" l1_303"
"(if(eq?(car l1_303) '#:to-source?)(cdr l1_303) l1_303))))"
"(let-values(((l1_305) l1_304))"
"(let-values(((l1_306)"
"(if(null? l1_305)"
" l1_305"
"(if(eq?(car l1_305) '#:with-submodules?)(cdr l1_305) l1_305))))"
"(null? l1_306)))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_307 given-args_308 s_309 cctx_310)(unpack16.1$3 given-kws_307 given-args_308 s_309 cctx_310)))"
" null"
" '(#:as-submodule? #:modules-being-compiled #:self #:serializable? #:to-source? #:with-submodules?)"
"(let-values(((compile-module_311)(case-lambda((s_312 cctx_313)(unpack16.1$3 null null s_312 cctx_313)))))"
" compile-module_311)))"
"(define-values"
"(lifted/1.1$15 lifted/2.1$15 lifted/3.1$14 lifted/4.1$14 lifted/5.1$14)"
"(make-struct-type"
" 'compile-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'compile-submodules"
"(case-lambda((self_314 form-name_315)(apply missing-kw self_314 form-name_315 null))))))"
"(current-inspector)"
"(case-lambda((self_316 form-name_317)(apply missing-kw self_316 form-name_317 null)))))"
"(define-values"
"(compile-submodules31.1)"
"(lambda(bodys18_318"
" cctx22_319"
" modules-being-compiled23_320"
" serializable?20_321"
" to-source?21_322"
" with-submodules?19_323"
" form-name30_324)"
"(let-values(((form-name_325) form-name30_324))"
"(let-values(((bodys_326) bodys18_318))"
"(let-values(((with-submodules?_327) with-submodules?19_323))"
"(let-values(((serializable?_328) serializable?20_321))"
"(let-values(((to-source?_329) to-source?21_322))"
"(let-values(((body-cctx_330) cctx22_319))"
"(let-values(((modules-being-compiled_331) modules-being-compiled23_320))"
"(let-values()"
"(if(not with-submodules?_327)"
"(let-values() null)"
"(let-values()"
"((letrec-values(((loop_332)"
"(lambda(bodys_333 phase_334)"
"(if(null? bodys_333)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_335)(syntax-disarm$1(car bodys_333))))"
"(let-values(((f_336)(core-form-sym body_335 phase_334)))"
"(if(eq? f_336 form-name_325)"
"(let-values()"
"(let-values(((ok?_337 _102_338 name103_339 _104_340)"
"(let-values(((s_370) body_335))"
"(let-values(((orig-s_371) s_370))"
"(let-values(((_102_372 name103_373 _104_374)"
"(let-values(((s_375)"
"(if(syntax?$1"
" s_370)"
"(syntax-e$1"
" s_370)"
" s_370)))"
"(if(pair? s_375)"
"(let-values(((_105_376)"
"(let-values(((s_379)"
"(car"
" s_375)))"
" s_379))"
"((name106_377"
" _107_378)"
"(let-values(((s_380)"
"(cdr"
" s_375)))"
"(let-values(((s_381)"
"(if(syntax?$1"
" s_380)"
"(syntax-e$1"
" s_380)"
" s_380)))"
"(if(pair?"
" s_381)"
"(let-values(((name108_382)"
"(let-values(((s_384)"
"(car"
" s_381)))"
" s_384))"
"((_109_383)"
"(let-values(((s_385)"
"(cdr"
" s_381)))"
" s_385)))"
"(values"
" name108_382"
" _109_383))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_371))))))"
"(values"
" _105_376"
" name106_377"
" _107_378))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_371)))))"
"(values"
" #t"
" _102_372"
" name103_373"
" _104_374))))))"
"(let-values(((ok?_353 module*110_354 name111_355 _112_356)"
"(let-values(((s_386) body_335))"
"(if(let-values(((s_387)"
"(if(syntax?$1 s_386)"
"(syntax-e$1 s_386)"
" s_386)))"
"(if(pair? s_387)"
"(if(let-values(((s_388)"
"(car s_387)))"
" #t)"
"(let-values(((s_389)(cdr s_387)))"
"(let-values(((s_390)"
"(if(syntax?$1"
" s_389)"
"(syntax-e$1 s_389)"
" s_389)))"
"(if(pair? s_390)"
"(if(let-values(((s_391)"
"(car"
" s_390)))"
" #t)"
"(let-values(((s_392)"
"(cdr s_390)))"
"(let-values(((s_393)"
"(if(syntax?$1"
" s_392)"
"(syntax-e$1"
" s_392)"
" s_392)))"
"(if(pair? s_393)"
"(if(let-values(((s_394)"
"(car"
" s_393)))"
"(let-values(((s_395)"
"(if(syntax?$1"
" s_394)"
"(syntax-e$1"
" s_394)"
" s_394)))"
"(eq?"
" #f"
" s_395)))"
"(let-values(((s_396)"
"(cdr"
" s_393)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_397) s_386))"
"(let-values(((module*110_398"
" name111_399"
" _112_400)"
"(let-values(((s_401)"
"(if(syntax?$1"
" s_386)"
"(syntax-e$1"
" s_386)"
" s_386)))"
"(let-values(((module*113_402)"
"(let-values(((s_405)"
"(car"
" s_401)))"
" s_405))"
"((name114_403"
" _115_404)"
"(let-values(((s_406)"
"(cdr"
" s_401)))"
"(let-values(((s_407)"
"(if(syntax?$1"
" s_406)"
"(syntax-e$1"
" s_406)"
" s_406)))"
"(let-values(((name116_408)"
"(let-values(((s_410)"
"(car"
" s_407)))"
" s_410))"
"((_117_409)"
"(let-values(((s_411)"
"(cdr"
" s_407)))"
"(let-values(((s_412)"
"(if(syntax?$1"
" s_411)"
"(syntax-e$1"
" s_411)"
" s_411)))"
"(let-values((()"
"(let-values(((s_414)"
"(car"
" s_412)))"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_414)"
"(syntax-e$1"
" s_414)"
" s_414)))"
"(values))))"
"((_118_413)"
"(let-values(((s_416)"
"(cdr"
" s_412)))"
" s_416)))"
"(values"
" _118_413))))))"
"(values"
" name116_408"
" _117_409))))))"
"(values"
" module*113_402"
" name114_403"
" _115_404)))))"
"(values"
" #t"
" module*110_398"
" name111_399"
" _112_400)))"
"(values #f #f #f #f)))))"
"(let-values(((s-shifted_369)"
"(if ok?_353"
"(let-values()"
"(syntax-shift-phase-level$1"
" body_335"
"(phase- 0 phase_334)))"
"(let-values() body_335))))"
"(cons"
"(cons"
"(syntax-e$1 name103_339)"
"(let-values(((...r/compile/module.rkt:362:22_417)"
" compile-module17.1)"
"((s-shifted119_418) s-shifted_369)"
"((body-cctx120_419) body-cctx_330)"
"((temp121_420) #t)"
"((serializable?122_421) serializable?_328)"
"((to-source?123_422) to-source?_329)"
"((modules-being-compiled124_423)"
" modules-being-compiled_331))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module17.1))"
"(compile-module15.1"
" temp121_420"
" #t"
" modules-being-compiled124_423"
" #t"
" #f"
" #f"
" serializable?122_421"
" #t"
" to-source?123_422"
" #t"
" #f"
" #f"
" s-shifted119_418"
" body-cctx120_419)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:362:22_417"
" keyword-procedure-extract"
" '(#:as-submodule?"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?)"
" 4)"
" '(#:as-submodule?"
" #:modules-being-compiled"
" #:serializable?"
" #:to-source?)"
"(list"
" temp121_420"
" modules-being-compiled124_423"
" serializable?122_421"
" to-source?123_422)"
" s-shifted119_418"
" body-cctx120_419))))"
"(loop_332(cdr bodys_333) phase_334))))))"
"(if(eq? f_336 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_424 begin-for-syntax125_425 e126_426)"
"(let-values(((s_437) body_335))"
"(let-values(((orig-s_438) s_437))"
"(let-values(((begin-for-syntax125_439"
" e126_440)"
"(let-values(((s_441)"
"(if(syntax?$1"
" s_437)"
"(syntax-e$1"
" s_437)"
" s_437)))"
"(if(pair? s_441)"
"(let-values(((begin-for-syntax127_442)"
"(let-values(((s_444)"
"(car"
" s_441)))"
" s_444))"
"((e128_443)"
"(let-values(((s_445)"
"(cdr"
" s_441)))"
"(let-values(((s_446)"
"(if(syntax?$1"
" s_445)"
"(syntax-e$1"
" s_445)"
" s_445)))"
"(let-values(((flat-s_447)"
"(to-syntax-list.1"
" s_446)))"
"(if(not"
" flat-s_447)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_438))"
"(let-values()"
" flat-s_447)))))))"
"(values"
" begin-for-syntax127_442"
" e128_443))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_438)))))"
"(values"
" #t"
" begin-for-syntax125_439"
" e126_440))))))"
"(append"
"(loop_332 e126_426(add1 phase_334))"
"(loop_332(cdr bodys_333) phase_334))))"
"(let-values()(loop_332(cdr bodys_333) phase_334)))))))))))"
" loop_332)"
" bodys_326"
" 0)))))))))))))"
"(define-values"
"(unpack32.1)"
"(lambda(given-kws_448 given-args_449 form-name30_450)"
"(let-values(((bodys18_451)(car given-args_449))"
"((given-kws_452)(cdr given-kws_448))"
"((given-args_453)(cdr given-args_449)))"
"(let-values(((cctx22_454)(car given-args_453))"
"((given-kws_455)(cdr given-kws_452))"
"((given-args_456)(cdr given-args_453)))"
"(let-values(((modules-being-compiled23_457)(car given-args_456))"
"((given-kws_458)(cdr given-kws_455))"
"((given-args_459)(cdr given-args_456)))"
"(let-values(((serializable?20_460)(car given-args_459))"
"((given-kws_461)(cdr given-kws_458))"
"((given-args_462)(cdr given-args_459)))"
"(let-values(((to-source?21_463)(car given-args_462))"
"((given-kws_464)(cdr given-kws_461))"
"((given-args_465)(cdr given-args_462)))"
"(let-values(((with-submodules?19_466)(car given-args_465)))"
"(compile-submodules31.1"
" bodys18_451"
" cctx22_454"
" modules-being-compiled23_457"
" serializable?20_460"
" to-source?21_463"
" with-submodules?19_466"
" form-name30_450)))))))))"
"(define-values"
"(compile-submodules33.1)"
"(lifted/2.1$15"
"(lambda(given-kws_467 given-argc_468)"
"(if(= given-argc_468 3)"
"(let-values(((l2_469) given-kws_467))"
"(if(pair? l2_469)"
"(if(eq?(car l2_469) '#:bodys)"
"(let-values(((l2_470)(cdr l2_469)))"
"(if(pair? l2_470)"
"(if(eq?(car l2_470) '#:cctx)"
"(let-values(((l2_471)(cdr l2_470)))"
"(if(pair? l2_471)"
"(if(eq?(car l2_471) '#:modules-being-compiled)"
"(let-values(((l2_472)(cdr l2_471)))"
"(if(pair? l2_472)"
"(if(eq?(car l2_472) '#:serializable?)"
"(let-values(((l2_473)(cdr l2_472)))"
"(if(pair? l2_473)"
"(if(eq?(car l2_473) '#:to-source?)"
"(let-values(((l2_474)(cdr l2_473)))"
"(if(pair? l2_474)"
"(if(eq?(car l2_474) '#:with-submodules?)(null?(cdr l2_474)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_475 given-args_476 form-name_477)(unpack32.1 given-kws_475 given-args_476 form-name_477)))"
" '(#:bodys #:cctx #:modules-being-compiled #:serializable? #:to-source? #:with-submodules?)"
" '(#:bodys #:cctx #:modules-being-compiled #:serializable? #:to-source? #:with-submodules?)))"
"(define-values"
"(filter-language-info)"
"(lambda(li_478)"
"(if(vector? li_478)"
"(if(= 3(vector-length li_478))"
"(if(1/module-path?(vector-ref li_478 0))(if(symbol?(vector-ref li_478 1)) li_478 #f) #f)"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_1 declared-submodule-names2_2 mod-path3_3 self4_4)"
"(let-values(((mod-path_5) mod-path3_3))"
"(let-values(((self_6) self4_4))"
"(let-values(((declared-submodule-names_7)"
"(if declared-submodule-names2_2 declared-submodule-names1_1 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))(hash-ref declared-submodule-names_7(cadr mod-path_5) #f) #f)"
" #f)"
" #f)"
" #f)"
"              (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_5)) self_6))"
"(if(if(list? mod-path_5)"
"(if(eq? 'submod(car mod-path_5))"
"(let-values(((mod-path_8)(cadr mod-path_5)))"
"(if(list? mod-path_8)"
"(if(= 2(length mod-path_8))"
"(if(eq? 'quote(car mod-path_8))"
"(if(symbol?(cadr mod-path_8))"
"(hash-ref declared-submodule-names_7(cadr mod-path_8) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                  (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_5)) (cddr mod-path_5)) self_6))"
"(let-values()(1/module-path-index-join mod-path_5 self_6))))))))))"
"(define-values"
"(unpack6.1$1)"
"(lambda(given-kws_9 given-args_10 mod-path3_11 self4_12)"
"(let-values(((declared-submodule-names2_13)(pair? given-kws_9)))"
"(let-values(((declared-submodule-names1_14)(if declared-submodule-names2_13(car given-args_10)(void))))"
"(module-path->mpi5.1 declared-submodule-names1_14 declared-submodule-names2_13 mod-path3_11 self4_12)))))"
"(define-values"
"(module-path->mpi7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_15 given-argc_16)"
"(if(= given-argc_16 4)"
"(let-values(((l1_17) given-kws_15))"
"(let-values(((l1_18)"
"(if(null? l1_17) l1_17(if(eq?(car l1_17) '#:declared-submodule-names)(cdr l1_17) l1_17))))"
"(null? l1_18)))"
" #f))"
"(case-lambda"
"((given-kws_19 given-args_20 mod-path_21 self_22)(unpack6.1$1 given-kws_19 given-args_20 mod-path_21 self_22)))"
" null"
" '(#:declared-submodule-names)"
"(let-values(((module-path->mpi_23)"
"(case-lambda((mod-path_24 self_25)(unpack6.1$1 null null mod-path_24 self_25)))))"
" module-path->mpi_23)))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_26 ctx_27)"
"(let-values(((...pand/module-path.rkt:31:2_28) module-path->mpi7.1)"
"((mod-path8_29) mod-path_26)"
"((temp9_30)(namespace-mpi(expand-context-namespace ctx_27)))"
"((temp10_31)(expand-context-declared-submodule-names ctx_27)))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi7.1))"
"(module-path->mpi5.1 temp10_31 #t mod-path8_29 temp9_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pand/module-path.rkt:31:2_28"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 4)"
" '(#:declared-submodule-names)"
"(list temp10_31)"
" mod-path8_29"
" temp9_30)))))"
"(void)"
"(void)"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_1 phase_2)"
"(let-values(((s-scs_3)(syntax-scope-set s_1 phase_2)))"
"(let-values(((ht_4) s-scs_3))"
"(begin"
"(if((lambda(ht_5)(if(hash? ht_5)(immutable? ht_5) #f)) ht_4)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_4)))"
"((letrec-values(((for-loop_6)"
"(lambda(syms_7 i_8)"
"(if i_8"
"(let-values(((sc_9)(unsafe-immutable-hash-iterate-key ht_4 i_8)))"
"(let-values(((syms_10)"
"(let-values(((syms_11) syms_7))"
"(let-values(((syms_12)"
"(let-values()"
"(set-union"
" syms_11"
"(binding-table-symbols"
"(scope-binding-table sc_9)"
" s-scs_3"
" s_1"
" null)))))"
"(values syms_12)))))"
"(for-loop_6 syms_10(unsafe-immutable-hash-iterate-next ht_4 i_8))))"
" syms_7))))"
" for-loop_6)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_4)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'self)"
"(make-struct-field-accessor -ref_39 1 'require-mpis)"
"(make-struct-field-accessor -ref_39 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_39 3 'requires)"
"(make-struct-field-accessor -ref_39 4 'provides)"
"(make-struct-field-accessor -ref_39 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_39 6 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_39 7 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_40 6 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_40 7 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_91 make-_92 ?_93 -ref_94 -set!_95)"
"(let-values()"
"(let-values()"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))))"
"(values"
" struct:_91"
" make-_92"
" ?_93"
"(make-struct-field-accessor -ref_94 0 'id)"
"(make-struct-field-accessor -ref_94 1 'phase)"
"(make-struct-field-accessor -ref_94 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_94 3 'as-transformer?))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_161"
" make-_162"
" ?_163"
"(make-struct-field-accessor -ref_164 0 'provides)"
"(make-struct-field-accessor -ref_164 1 'prefix-len)"
"(make-struct-field-accessor -ref_164 2 's)"
"(make-struct-field-accessor -ref_164 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_164 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_201)"
"(requires+provides1.1"
" self_201"
"(make-module-path-index-intern-table)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_202)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_202))"
"(hash-clear!(requires+provides-requires r+p_202))"
"(hash-clear!(requires+provides-provides r+p_202))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_202)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_203 mpi_204)(intern-module-path-index!(requires+provides-require-mpis r+p_203) mpi_204)))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_205 mod-name_206 phase-shift_207 is-cross-phase-persistent?_208)"
"(let-values(((mpi_209)(intern-mpi r+p_205 mod-name_206)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_205) mpi_209 '#hasheqv()) phase-shift_207 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_205)"
" phase-shift_207"
"(lambda(l_210)(cons mpi_209 l_210))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_205) mpi_209 make-hasheqv)"
" phase-shift_207"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_208"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_205 #f)))"
" mpi_209))))"
"(define-values"
"(lifted/1.1$14 lifted/2.1$14 lifted/3.1$13 lifted/4.1$13 lifted/5.1$13)"
"(make-struct-type"
" 'add-defined-or-required-id!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'add-defined-or-required-id!"
"(case-lambda"
"((self_211 r+p_212 id_213 phase_214 binding_215)"
"(apply missing-kw self_211 r+p_212 id_213 phase_214 binding_215 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_216 r+p_217 id_218 phase_219 binding_220)"
"(apply missing-kw self_216 r+p_217 id_218 phase_219 binding_220 null)))))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lambda(as-transformer?6_221 can-be-shadowed?5_222 can-be-shadowed?7_223 r+p9_224 id10_225 phase11_226 binding12_227)"
"(let-values(((r+p_228) r+p9_224))"
"(let-values(((id_229) id10_225))"
"(let-values(((phase_230) phase11_226))"
"(let-values(((binding_231) binding12_227))"
"(let-values(((can-be-shadowed?_232)(if can-be-shadowed?7_223 can-be-shadowed?5_222 #f)))"
"(let-values(((as-transformer?_233) as-transformer?6_221))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_230"
"(phase+"
"(module-binding-nominal-phase binding_231)"
"(module-binding-nominal-require-phase binding_231)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:118:2_234) add-defined-or-required-id-at-nominal!29.1)"
"((r+p108_235) r+p_228)"
"((id109_236) id_229)"
"((phase110_237) phase_230)"
"((temp111_238)(module-binding-nominal-module binding_231))"
"((temp112_239)(module-binding-nominal-require-phase binding_231))"
"((can-be-shadowed?113_240) can-be-shadowed?_232)"
"((as-transformer?114_241) as-transformer?_233))"
"(if(variable-reference-constant?"
"(#%variable-reference add-defined-or-required-id-at-nominal!29.1))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?114_241"
" can-be-shadowed?113_240"
" temp111_238"
" temp112_239"
" r+p108_235"
" id109_236"
" phase110_237)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:118:2_234"
" keyword-procedure-extract"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" 5)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
"(list as-transformer?114_241 can-be-shadowed?113_240 temp111_238 temp112_239)"
" r+p108_235"
" id109_236"
" phase110_237)))))))))))))"
"(define-values"
"(unpack14.1)"
"(lambda(given-kws_242 given-args_243 r+p9_244 id10_245 phase11_246 binding12_247)"
"(let-values(((as-transformer?6_248)(car given-args_243))"
"((given-kws_249)(cdr given-kws_242))"
"((given-args_250)(cdr given-args_243)))"
"(let-values(((can-be-shadowed?7_251)(pair? given-kws_249)))"
"(let-values(((can-be-shadowed?5_252)(if can-be-shadowed?7_251(car given-args_250)(void))))"
"(add-defined-or-required-id!13.1"
" as-transformer?6_248"
" can-be-shadowed?5_252"
" can-be-shadowed?7_251"
" r+p9_244"
" id10_245"
" phase11_246"
" binding12_247))))))"
"(define-values"
"(add-defined-or-required-id!15.1)"
"(lifted/2.1$14"
"(lambda(given-kws_253 given-argc_254)"
"(if(= given-argc_254 6)(subsets? '(#:as-transformer?) given-kws_253 '(#:as-transformer? #:can-be-shadowed?)) #f))"
"(case-lambda"
"((given-kws_255 given-args_256 r+p_257 id_258 phase_259 binding_260)"
"(unpack14.1 given-kws_255 given-args_256 r+p_257 id_258 phase_259 binding_260)))"
" '(#:as-transformer?)"
" '(#:as-transformer? #:can-be-shadowed?)))"
"(define-values"
"(lifted/6.1$6 lifted/7.1$6 lifted/8.1$6 lifted/9.1$6 lifted/10.1$6)"
"(make-struct-type"
" 'add-defined-or-required-id-at-nominal!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_261 r+p_262 id_263 phase_264)(apply missing-kw self_261 r+p_262 id_263 phase_264 null))))))"
"(current-inspector)"
"(case-lambda((self_265 r+p_266 id_267 phase_268)(apply missing-kw self_265 r+p_266 id_267 phase_268 null)))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lambda(as-transformer?19_269"
" can-be-shadowed?18_270"
" nominal-module16_271"
" nominal-require-phase17_272"
" r+p24_273"
" id25_274"
" phase26_275)"
"(let-values(((r+p_276) r+p24_273))"
"(let-values(((id_277) id25_274))"
"(let-values(((phase_278) phase26_275))"
"(let-values(((nominal-module_279) nominal-module16_271))"
"(let-values(((nominal-require-phase_280) nominal-require-phase17_272))"
"(let-values(((can-be-shadowed?_281) can-be-shadowed?18_270))"
"(let-values(((as-transformer?_282) as-transformer?19_269))"
"(let-values()"
"(let-values(((at-mod_283)"
"(hash-ref!"
"(requires+provides-requires r+p_276)"
"(intern-mpi r+p_276 nominal-module_279)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_284)(hash-ref! at-mod_283 nominal-require-phase_280 make-hasheq)))"
"(let-values(((sym_285)(syntax-e$1 id_277)))"
"(hash-set!"
" sym-to-reqds_284"
" sym_285"
"(cons"
"(required2.1 id_277 phase_278 can-be-shadowed?_281 as-transformer?_282)"
"(hash-ref sym-to-reqds_284 sym_285 null))))))))))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_286 given-args_287 r+p24_288 id25_289 phase26_290)"
"(let-values(((as-transformer?19_291)(car given-args_287))"
"((given-kws_292)(cdr given-kws_286))"
"((given-args_293)(cdr given-args_287)))"
"(let-values(((can-be-shadowed?18_294)(car given-args_293))"
"((given-kws_295)(cdr given-kws_292))"
"((given-args_296)(cdr given-args_293)))"
"(let-values(((nominal-module16_297)(car given-args_296))"
"((given-kws_298)(cdr given-kws_295))"
"((given-args_299)(cdr given-args_296)))"
"(let-values(((nominal-require-phase17_300)(car given-args_299)))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?19_291"
" can-be-shadowed?18_294"
" nominal-module16_297"
" nominal-require-phase17_300"
" r+p24_288"
" id25_289"
" phase26_290)))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!29.1)"
"(lifted/7.1$6"
"(lambda(given-kws_301 given-argc_302)"
"(if(= given-argc_302 5)"
"(let-values(((l2_303) given-kws_301))"
"(if(pair? l2_303)"
"(if(eq?(car l2_303) '#:as-transformer?)"
"(let-values(((l2_304)(cdr l2_303)))"
"(if(pair? l2_304)"
"(if(eq?(car l2_304) '#:can-be-shadowed?)"
"(let-values(((l2_305)(cdr l2_304)))"
"(if(pair? l2_305)"
"(if(eq?(car l2_305) '#:nominal-module)"
"(let-values(((l2_306)(cdr l2_305)))"
"(if(pair? l2_306)"
"(if(eq?(car l2_306) '#:nominal-require-phase)(null?(cdr l2_306)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_307 given-args_308 r+p_309 id_310 phase_311)"
"(unpack28.1 given-kws_307 given-args_308 r+p_309 id_310 phase_311)))"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(lifted/11.1$4 lifted/12.1$4 lifted/13.1$4 lifted/14.1$4 lifted/15.1$4)"
"(make-struct-type"
" 'add-bulk-required-ids!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'add-bulk-required-ids!"
"(case-lambda"
"((self_312 r+p_313 s_314 self_315 nominal-module_316 phase-shift_317 provides_318 provide-phase-level_319)"
"(apply"
" missing-kw"
" self_312"
" r+p_313"
" s_314"
" self_315"
" nominal-module_316"
" phase-shift_317"
" provides_318"
" provide-phase-level_319"
" null))))))"
"(current-inspector)"
"(case-lambda"
"((self_320 r+p_321 s_322 self_323 nominal-module_324 phase-shift_325 provides_326 provide-phase-level_327)"
"(apply"
" missing-kw"
" self_320"
" r+p_321"
" s_322"
" self_323"
" nominal-module_324"
" phase-shift_325"
" provides_326"
" provide-phase-level_327"
" null)))))"
"(define-values"
"(add-bulk-required-ids!53.1)"
"(lambda(accum-update-nominals36_328"
" can-be-shadowed?34_329"
" check-and-remove?35_330"
" excepts31_331"
" in33_332"
" prefix30_333"
" symbols-accum32_334"
" who37_335"
" r+p46_336"
" s47_337"
" self48_338"
" nominal-module49_339"
" phase-shift50_340"
" provides51_341"
" provide-phase-level52_342)"
"(let-values(((r+p_343) r+p46_336))"
"(let-values(((s_344) s47_337))"
"(let-values(((self_345) self48_338))"
"(let-values(((nominal-module_346) nominal-module49_339))"
"(let-values(((phase-shift_347) phase-shift50_340))"
"(let-values(((provides_348) provides51_341))"
"(let-values(((provide-phase-level_349) provide-phase-level52_342))"
"(let-values(((bulk-prefix_350) prefix30_333))"
"(let-values(((bulk-excepts_351) excepts31_331))"
"(let-values(((symbols-accum_352) symbols-accum32_334))"
"(let-values(((orig-s_353) in33_332))"
"(let-values(((can-be-shadowed?_354) can-be-shadowed?34_329))"
"(let-values(((check-and-remove?_355) check-and-remove?35_330))"
"(let-values(((accum-update-nominals_356) accum-update-nominals36_328))"
"(let-values(((who_357) who37_335))"
"(let-values()"
"(let-values(((phase_358)(phase+ provide-phase-level_349 phase-shift_347)))"
"(let-values(((shortcut-table_359)"
"(if check-and-remove?_355"
"(if(>(hash-count provides_348) 64)"
"(syntax-mapped-names s_344 phase_358)"
" #f)"
" #f)))"
"(let-values(((mpi_360)(intern-mpi r+p_343 nominal-module_346)))"
"(let-values(((at-mod_361)"
"(hash-ref!"
"(requires+provides-requires r+p_343)"
" mpi_360"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_362)"
"(hash-ref! at-mod_361 phase-shift_347 make-hasheq)))"
"(let-values(((prefix-len_363)"
"(if bulk-prefix_350"
"(string-length(symbol->string bulk-prefix_350))"
" 0)))"
"(let-values(((br_364)"
"(bulk-required4.1"
" provides_348"
" prefix-len_363"
" s_344"
" provide-phase-level_349"
" can-be-shadowed?_354)))"
"(let-values(((ht_365) provides_348))"
"(begin"
"(if((lambda(ht_366)(hash? ht_366)) ht_365)"
"(void)"
"(let-values()(default-in-hash ht_365)))"
"((letrec-values(((for-loop_367)"
"(lambda(fold-var_368 i_369)"
"(if i_369"
"(let-values(((out-sym_370 binding/p_371)"
"(hash-iterate-key+value"
" ht_365"
" i_369)))"
"(let-values(((fold-var_372)"
"(let-values(((fold-var_373)"
" fold-var_368))"
"(let-values(((fold-var_374)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if symbols-accum_352"
"(let-values()"
"(hash-set!"
" symbols-accum_352"
" out-sym_370"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_351"
" out-sym_370"
" #f)"
"(void)"
"(let-values()"
"(let-values(((sym_375)"
"(if(not"
" bulk-prefix_350)"
"(let-values()"
" out-sym_370)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                            \"~a~a\""
" bulk-prefix_350"
" out-sym_370))))))"
"(begin"
"(if(if check-and-remove?_355"
"(let-values(((or-part_376)"
"(not"
" shortcut-table_359)))"
"(if or-part_376"
" or-part_376"
"(hash-ref"
" shortcut-table_359"
" sym_375"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((.../require+provide.rkt:170:8_377)"
" check-not-defined89.1)"
"((temp115_378)"
" #t)"
"((r+p116_379)"
" r+p_343)"
"((temp117_380)"
"(datum->syntax$1"
" s_344"
" sym_375"
" s_344))"
"((phase118_381)"
" phase_358)"
"((orig-s119_382)"
" orig-s_353)"
"((temp120_383)"
"(lambda()"
"(let-values(((.../require+provide.rkt:174:29_387)"
" provide-binding-to-require-binding13.1)"
"((binding/p124_388)"
" binding/p_371)"
"((sym125_389)"
" sym_375)"
"((self126_390)"
" self_345)"
"((mpi127_391)"
" mpi_360)"
"((provide-phase-level128_392)"
" provide-phase-level_349)"
"((phase-shift129_393)"
" phase-shift_347))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" mpi127_391"
" phase-shift129_393"
" provide-phase-level128_392"
" self126_390"
" binding/p124_388"
" sym125_389)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:174:29_387"
" keyword-procedure-extract"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
" 4)"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
"(list"
" mpi127_391"
" phase-shift129_393"
" provide-phase-level128_392"
" self126_390)"
" binding/p124_388"
" sym125_389)))))"
"((temp121_384)"
" #t)"
"((accum-update-nominals122_385)"
" accum-update-nominals_356)"
"((who123_386)"
" who_357))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined89.1))"
"(check-not-defined87.1"
" accum-update-nominals122_385"
" #t"
" temp115_378"
" #t"
" orig-s119_382"
" temp121_384"
" #t"
" temp120_383"
" #t"
" who123_386"
" r+p116_379"
" temp117_380"
" phase118_381)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:170:8_377"
" keyword-procedure-extract"
" '(#:accum-update-nominals"
" #:check-not-required?"
" #:in"
" #:remove-shadowed!?"
" #:unless-matches"
" #:who)"
" 5)"
" '(#:accum-update-nominals"
" #:check-not-required?"
" #:in"
" #:remove-shadowed!?"
" #:unless-matches"
" #:who)"
"(list"
" accum-update-nominals122_385"
" temp115_378"
" orig-s119_382"
" temp121_384"
" temp120_383"
" who123_386)"
" r+p116_379"
" temp117_380"
" phase118_381))))"
"(void))"
"(hash-set!"
" sym-to-reqds_362"
" sym_375"
"(cons"
" br_364"
"(hash-ref"
" sym-to-reqds_362"
" sym_375"
" null)))))))))"
"(void)))))"
"(values"
" fold-var_374)))))"
"(for-loop_367"
" fold-var_372"
"(hash-iterate-next ht_365 i_369))))"
" fold-var_368))))"
" for-loop_367)"
"(void)"
"(hash-iterate-first ht_365)))))))))))))))))))))))))))))"
"(define-values"
"(unpack54.1)"
"(lambda(given-kws_394"
" given-args_395"
" r+p46_396"
" s47_397"
" self48_398"
" nominal-module49_399"
" phase-shift50_400"
" provides51_401"
" provide-phase-level52_402)"
"(let-values(((accum-update-nominals36_403)(car given-args_395))"
"((given-kws_404)(cdr given-kws_394))"
"((given-args_405)(cdr given-args_395)))"
"(let-values(((can-be-shadowed?34_406)(car given-args_405))"
"((given-kws_407)(cdr given-kws_404))"
"((given-args_408)(cdr given-args_405)))"
"(let-values(((check-and-remove?35_409)(car given-args_408))"
"((given-kws_410)(cdr given-kws_407))"
"((given-args_411)(cdr given-args_408)))"
"(let-values(((excepts31_412)(car given-args_411))"
"((given-kws_413)(cdr given-kws_410))"
"((given-args_414)(cdr given-args_411)))"
"(let-values(((in33_415)(car given-args_414))"
"((given-kws_416)(cdr given-kws_413))"
"((given-args_417)(cdr given-args_414)))"
"(let-values(((prefix30_418)(car given-args_417))"
"((given-kws_419)(cdr given-kws_416))"
"((given-args_420)(cdr given-args_417)))"
"(let-values(((symbols-accum32_421)(car given-args_420))"
"((given-kws_422)(cdr given-kws_419))"
"((given-args_423)(cdr given-args_420)))"
"(let-values(((who37_424)(car given-args_423)))"
"(add-bulk-required-ids!53.1"
" accum-update-nominals36_403"
" can-be-shadowed?34_406"
" check-and-remove?35_409"
" excepts31_412"
" in33_415"
" prefix30_418"
" symbols-accum32_421"
" who37_424"
" r+p46_396"
" s47_397"
" self48_398"
" nominal-module49_399"
" phase-shift50_400"
" provides51_401"
" provide-phase-level52_402)))))))))))"
"(define-values"
"(add-bulk-required-ids!55.1)"
"(lifted/12.1$4"
"(lambda(given-kws_425 given-argc_426)"
"(if(= given-argc_426 9)"
"(let-values(((l2_427) given-kws_425))"
"(if(pair? l2_427)"
"(if(eq?(car l2_427) '#:accum-update-nominals)"
"(let-values(((l2_428)(cdr l2_427)))"
"(if(pair? l2_428)"
"(if(eq?(car l2_428) '#:can-be-shadowed?)"
"(let-values(((l2_429)(cdr l2_428)))"
"(if(pair? l2_429)"
"(if(eq?(car l2_429) '#:check-and-remove?)"
"(let-values(((l2_430)(cdr l2_429)))"
"(if(pair? l2_430)"
"(if(eq?(car l2_430) '#:excepts)"
"(let-values(((l2_431)(cdr l2_430)))"
"(if(pair? l2_431)"
"(if(eq?(car l2_431) '#:in)"
"(let-values(((l2_432)(cdr l2_431)))"
"(if(pair? l2_432)"
"(if(eq?(car l2_432) '#:prefix)"
"(let-values(((l2_433)(cdr l2_432)))"
"(if(pair? l2_433)"
"(if(eq?(car l2_433) '#:symbols-accum)"
"(let-values(((l2_434)(cdr l2_433)))"
"(if(pair? l2_434)"
"(if(eq?(car l2_434) '#:who)(null?(cdr l2_434)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_435"
" given-args_436"
" r+p_437"
" s_438"
" self_439"
" nominal-module_440"
" phase-shift_441"
" provides_442"
" provide-phase-level_443)"
"(unpack54.1"
" given-kws_435"
" given-args_436"
" r+p_437"
" s_438"
" self_439"
" nominal-module_440"
" phase-shift_441"
" provides_442"
" provide-phase-level_443)))"
" '(#:accum-update-nominals #:can-be-shadowed? #:check-and-remove? #:excepts #:in #:prefix #:symbols-accum #:who)"
" '(#:accum-update-nominals #:can-be-shadowed? #:check-and-remove? #:excepts #:in #:prefix #:symbols-accum #:who)))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_444 nominal-module_445 phase_446 sym_447)"
"(let-values(((prefix-len_448)(bulk-required-prefix-len br_444)))"
"(let-values(((out-sym_449)"
"(if(zero? prefix-len_448)"
" sym_447"
"(string->symbol(substring(symbol->string sym_447) prefix-len_448)))))"
"(let-values(((binding/p_450)(hash-ref(bulk-required-provides br_444) out-sym_449)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_444) sym_447)"
"(phase+ phase_446(bulk-required-provide-phase-level br_444))"
"(bulk-required-can-be-shadowed? br_444)"
"(provided-as-transformer? binding/p_450)))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_451 mod-name_452 phase_453 sym_454)"
"(if(bulk-required? r_451)(bulk-required->required r_451 mod-name_452 phase_453 sym_454) r_451)))"
"(define-values"
"(lifted/16.1$3 lifted/17.1$3 lifted/18.1$3 lifted/19.1$3 lifted/20.1$3)"
"(make-struct-type"
" 'add-enclosing-module-defined-and-required!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'add-enclosing-module-defined-and-required!"
"(case-lambda"
"((self_455 r+p_456 enclosing-mod_457 phase-shift_458)"
"(apply missing-kw self_455 r+p_456 enclosing-mod_457 phase-shift_458 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_459 r+p_460 enclosing-mod_461 phase-shift_462)"
"(apply missing-kw self_459 r+p_460 enclosing-mod_461 phase-shift_462 null)))))"
"(define-values"
"(add-enclosing-module-defined-and-required!61.1)"
"(lambda(enclosing-requires+provides56_463 r+p58_464 enclosing-mod59_465 phase-shift60_466)"
"(let-values(((r+p_467) r+p58_464))"
"(let-values(((enclosing-r+p_468) enclosing-requires+provides56_463))"
"(let-values(((enclosing-mod_469) enclosing-mod59_465))"
"(let-values(((phase-shift_470) phase-shift60_466))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_467 #f)"
"(let-values(((ht_471)(requires+provides-requires enclosing-r+p_468)))"
"(begin"
"(if((lambda(ht_472)(hash? ht_472)) ht_471)(void)(let-values()(default-in-hash ht_471)))"
"((letrec-values(((for-loop_473)"
"(lambda(fold-var_474 i_475)"
"(if i_475"
"(let-values(((mod-name_476 at-mod_477)"
"(hash-iterate-key+value ht_471 i_475)))"
"(let-values(((fold-var_478)"
"(let-values(((fold-var_479) fold-var_474))"
"(let-values(((fold-var_480)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ht_481) at-mod_477))"
"(begin"
"(if((lambda(ht_482)"
"(hash? ht_482))"
" ht_481)"
"(void)"
"(let-values()"
"(default-in-hash ht_481)))"
"((letrec-values(((for-loop_483)"
"(lambda(fold-var_484"
" i_485)"
"(if i_485"
"(let-values(((phase_486"
" at-phase_487)"
"(hash-iterate-key+value"
" ht_481"
" i_485)))"
"(let-values(((fold-var_488)"
"(let-values(((ht_489)"
" at-phase_487))"
"(begin"
"(if((lambda(ht_490)"
"(hash?"
" ht_490))"
" ht_489)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_489)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" i_493)"
"(if i_493"
"(let-values(((sym_494"
" reqds_495)"
"(hash-iterate-key+value"
" ht_489"
" i_493)))"
"(let-values(((fold-var_496)"
"(let-values(((lst_497)"
" reqds_495))"
"(begin"
"(if(list?"
" lst_497)"
"(void)"
"(let-values()"
"(in-list"
" lst_497)))"
"((letrec-values(((for-loop_498)"
"(lambda(fold-var_499"
" lst_500)"
"(if(pair?"
" lst_500)"
"(let-values(((reqd/maybe-bulk_501)"
"(unsafe-car"
" lst_500)))"
"(let-values(((fold-var_502)"
"(let-values(((fold-var_503)"
" fold-var_499))"
"(let-values(((fold-var_504)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_505)"
"(normalize-required"
" reqd/maybe-bulk_501"
" mod-name_476"
" phase_486"
" sym_494)))"
"(let-values(((.../require+provide.rkt:214:6_506)"
" add-defined-or-required-id-at-nominal!29.1)"
"((r+p130_507)"
" r+p_467)"
"((temp131_508)"
"(syntax-shift-phase-level$1"
"(syntax-module-path-index-shift"
"(required-id"
" reqd_505)"
"(requires+provides-self"
" enclosing-r+p_468)"
" enclosing-mod_469)"
" phase-shift_470))"
"((temp132_509)"
"(phase+"
"(required-phase"
" reqd_505)"
" phase-shift_470))"
"((enclosing-mod133_510)"
" enclosing-mod_469)"
"((phase-shift134_511)"
" phase-shift_470)"
"((temp135_512)"
" #t)"
"((temp136_513)"
"(required-as-transformer?"
" reqd_505)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id-at-nominal!29.1))"
"(add-defined-or-required-id-at-nominal!27.1"
" temp136_513"
" temp135_512"
" enclosing-mod133_510"
" phase-shift134_511"
" r+p130_507"
" temp131_508"
" temp132_509)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:214:6_506"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
" 5)"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
"(list"
" temp136_513"
" temp135_512"
" enclosing-mod133_510"
" phase-shift134_511)"
" r+p130_507"
" temp131_508"
" temp132_509)))))"
"(void)))))"
"(values"
" fold-var_504)))))"
"(for-loop_498"
" fold-var_502"
"(unsafe-cdr"
" lst_500))))"
" fold-var_499))))"
" for-loop_498)"
" fold-var_492"
" lst_497)))))"
"(for-loop_491"
" fold-var_496"
"(hash-iterate-next"
" ht_489"
" i_493))))"
" fold-var_492))))"
" for-loop_491)"
" fold-var_484"
"(hash-iterate-first"
" ht_489))))))"
"(for-loop_483"
" fold-var_488"
"(hash-iterate-next"
" ht_481"
" i_485))))"
" fold-var_484))))"
" for-loop_483)"
"(void)"
"(hash-iterate-first ht_481)))))"
"(void)))))"
"(values fold-var_480)))))"
"(for-loop_473 fold-var_478(hash-iterate-next ht_471 i_475))))"
" fold-var_474))))"
" for-loop_473)"
"(void)"
"(hash-iterate-first ht_471))))))))))))"
"(define-values"
"(unpack62.1)"
"(lambda(given-kws_514 given-args_515 r+p58_516 enclosing-mod59_517 phase-shift60_518)"
"(let-values(((enclosing-requires+provides56_519)(car given-args_515)))"
"(add-enclosing-module-defined-and-required!61.1"
" enclosing-requires+provides56_519"
" r+p58_516"
" enclosing-mod59_517"
" phase-shift60_518))))"
"(define-values"
"(add-enclosing-module-defined-and-required!63.1)"
"(lifted/17.1$3"
"(lambda(given-kws_520 given-argc_521)"
"(if(= given-argc_521 5)"
"(let-values(((l2_522) given-kws_520))"
"(if(pair? l2_522)(if(eq?(car l2_522) '#:enclosing-requires+provides)(null?(cdr l2_522)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_523 given-args_524 r+p_525 enclosing-mod_526 phase-shift_527)"
"(unpack62.1 given-kws_523 given-args_524 r+p_525 enclosing-mod_526 phase-shift_527)))"
" '(#:enclosing-requires+provides)"
" '(#:enclosing-requires+provides)))"
"(define-values"
"(lifted/21.1$1 lifted/22.1$1 lifted/23.1$1 lifted/24.1$1 lifted/25.1$1)"
"(make-struct-type"
" 'remove-required-id!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'remove-required-id!"
"(case-lambda((self_528 r+p_529 id_530 phase_531)(apply missing-kw self_528 r+p_529 id_530 phase_531 null))))))"
"(current-inspector)"
"(case-lambda((self_532 r+p_533 id_534 phase_535)(apply missing-kw self_532 r+p_533 id_534 phase_535 null)))))"
"(define-values"
"(remove-required-id!69.1)"
"(lambda(unless-matches64_536 r+p66_537 id67_538 phase68_539)"
"(let-values(((r+p_540) r+p66_537))"
"(let-values(((id_541) id67_538))"
"(let-values(((phase_542) phase68_539))"
"(let-values(((binding_543) unless-matches64_536))"
"(let-values()"
"(let-values(((b_544)"
"(let-values(((.../require+provide.rkt:231:12_545) resolve+shift22.1)"
"((id137_546) id_541)"
"((phase138_547) phase_542)"
"((temp139_548) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f temp139_548 #t #f #f #f #f #f #f id137_546 phase138_547)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:231:12_545"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp139_548)"
" id137_546"
" phase138_547)))))"
"(if b_544"
"(let-values()"
"(let-values(((mpi_549)(intern-mpi r+p_540(module-binding-nominal-module b_544))))"
"(let-values(((at-mod_550)(hash-ref(requires+provides-requires r+p_540) mpi_549 #f)))"
"(if at-mod_550"
"(let-values()"
"(let-values(((nominal-phase_551)(module-binding-nominal-require-phase b_544)))"
"(let-values(((sym-to-reqds_552)(hash-ref at-mod_550 nominal-phase_551 #f)))"
"(if sym-to-reqds_552"
"(let-values()"
"(let-values(((sym_553)(syntax-e$1 id_541)))"
"(let-values(((l_554)(hash-ref sym-to-reqds_552 sym_553 null)))"
"(if(null? l_554)"
"(void)"
"(let-values()"
"(if(same-binding? b_544 binding_543)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_552"
" sym_553"
"(remove-non-matching-requireds"
" l_554"
" id_541"
" phase_542"
" mpi_549"
" nominal-phase_551"
" sym_553)))))))))"
"(void)))))"
"(void)))))"
"(void))))))))))"
"(define-values"
"(unpack70.1)"
"(lambda(given-kws_555 given-args_556 r+p66_557 id67_558 phase68_559)"
"(let-values(((unless-matches64_560)(car given-args_556)))"
"(remove-required-id!69.1 unless-matches64_560 r+p66_557 id67_558 phase68_559))))"
"(define-values"
"(remove-required-id!71.1)"
"(lifted/22.1$1"
"(lambda(given-kws_561 given-argc_562)"
"(if(= given-argc_562 5)"
"(let-values(((l2_563) given-kws_561))"
"(if(pair? l2_563)(if(eq?(car l2_563) '#:unless-matches)(null?(cdr l2_563)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_564 given-args_565 r+p_566 id_567 phase_568)"
"(unpack70.1 given-kws_564 given-args_565 r+p_566 id_567 phase_568)))"
" '(#:unless-matches)"
" '(#:unless-matches)))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_569 id_570 phase_571 mpi_572 nominal-phase_573 sym_574)"
"(alt-reverse"
"(let-values(((lst_575) reqds_569))"
"(begin"
"(if(list? lst_575)(void)(let-values()(in-list lst_575)))"
"((letrec-values(((for-loop_576)"
"(lambda(fold-var_577 lst_578)"
"(if(pair? lst_578)"
"(let-values(((r_579)(unsafe-car lst_578)))"
"(let-values(((fold-var_580)"
"(let-values(((r_581)"
"(normalize-required"
" r_579"
" mpi_572"
" nominal-phase_573"
" sym_574)))"
"(begin"
" #t"
"((letrec-values(((for-loop_582)"
"(lambda(fold-var_583)"
"(let-values()"
"(let-values(((fold-var_584)"
"(let-values(((fold-var_585)"
" fold-var_583))"
"(if(free-identifier=?$1"
"(required-id r_581)"
" id_570"
" phase_571"
" phase_571)"
" fold-var_585"
"(let-values(((fold-var_586)"
" fold-var_585))"
"(let-values(((fold-var_587)"
"(let-values()"
"(cons"
"(let-values()"
" r_581)"
" fold-var_586))))"
"(values"
" fold-var_587)))))))"
" fold-var_584)))))"
" for-loop_582)"
" fold-var_577)))))"
"(for-loop_576 fold-var_580(unsafe-cdr lst_578))))"
" fold-var_577))))"
" for-loop_576)"
" null"
" lst_575))))))"
"(define-values"
"(lifted/26.1$1 lifted/27.1$1 lifted/28.1$1 lifted/29.1$1 lifted/30.1$1)"
"(make-struct-type"
" 'check-not-defined"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-not-defined"
"(case-lambda((self_588 r+p_589 id_590 phase_591)(apply missing-kw self_588 r+p_589 id_590 phase_591 null))))))"
"(current-inspector)"
"(case-lambda((self_592 r+p_593 id_594 phase_595)(apply missing-kw self_592 r+p_593 id_594 phase_595 null)))))"
"(define-values"
"(check-not-defined87.1)"
"(lambda(accum-update-nominals76_596"
" accum-update-nominals82_597"
" check-not-required?72_598"
" check-not-required?78_599"
" in73_600"
" remove-shadowed!?75_601"
" remove-shadowed!?81_602"
" unless-matches74_603"
" unless-matches80_604"
" who77_605"
" r+p84_606"
" id85_607"
" phase86_608)"
"(let-values(((check-not-required?_609)(if check-not-required?78_599 check-not-required?72_598 #f)))"
"(let-values(((r+p_610) r+p84_606))"
"(let-values(((id_611) id85_607))"
"(let-values(((phase_612) phase86_608))"
"(let-values(((orig-s_613) in73_600))"
"(let-values(((ok-binding/delayed_614)(if unless-matches80_604 unless-matches74_603 #f)))"
"(let-values(((remove-shadowed!?_615)(if remove-shadowed!?81_602 remove-shadowed!?75_601 #f)))"
"(let-values(((accum-update-nominals_616)"
"(if accum-update-nominals82_597 accum-update-nominals76_596 #f)))"
"(let-values(((who_617) who77_605))"
"(let-values()"
"(let-values(((b_618)"
"(let-values(((.../require+provide.rkt:263:12_619) resolve+shift22.1)"
"((id140_620) id_611)"
"((phase141_621) phase_612)"
"((temp142_622) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" temp142_622"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id140_620"
" phase141_621)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:263:12_619"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp142_622)"
" id140_620"
" phase141_621)))))"
"(if(not b_618)"
"(let-values()(void))"
"(if(not(module-binding? b_618))"
"                              (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_611))"
"(let-values()"
"(let-values(((defined?_623)"
"(if b_618"
"(eq?(requires+provides-self r+p_610)(module-binding-module b_618))"
" #f)))"
"(if(if(not defined?_623)(not check-not-required?_609) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_610 #f))"
"(if(if defined?_623"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_610)"
" phase_612"
" '#hasheq())"
"(module-binding-sym b_618)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((mpi_624)"
"(intern-mpi r+p_610(module-binding-nominal-module b_618))))"
"(let-values(((at-mod_625)"
"(hash-ref(requires+provides-requires r+p_610) mpi_624 #f)))"
"(let-values(((ok-binding_626)"
"(if(procedure? ok-binding/delayed_614)"
"(ok-binding/delayed_614)"
" ok-binding/delayed_614)))"
"(if(not at-mod_625)"
"(let-values()(void))"
"(if(if ok-binding_626(same-binding? b_618 ok-binding_626) #f)"
"(let-values()"
"(if(same-binding-nominals? b_618 ok-binding_626)"
"(void)"
"(let-values()"
"(let-values(((update!_627)"
"(lambda()"
"(let-values(((.../require+provide.rkt:304:12_628)"
" add-binding!19.1)"
"((temp143_629) #t)"
"((id144_630) id_611)"
"((temp145_631)"
"(let-values(((.../require+provide.rkt:307:13_633)"
" module-binding-update50.1)"
"((b147_634) b_618)"
"((temp148_635)"
"(cons"
" ok-binding_626"
"(module-binding-extra-nominal-bindings"
" b_618))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-binding-update50.1))"
"(module-binding-update48.1"
" #f"
" #f"
" temp148_635"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b147_634)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:307:13_633"
" keyword-procedure-extract"
" '(#:extra-nominal-bindings)"
" 3)"
" '(#:extra-nominal-bindings)"
"(list temp148_635)"
" b147_634))))"
"((phase146_632) phase_612))"
"(if(variable-reference-constant?"
"(#%variable-reference add-binding!19.1))"
"(add-binding!17.1"
" #f"
" #f"
" temp143_629"
" #t"
" id144_630"
" temp145_631"
" phase146_632)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:304:12_628"
" keyword-procedure-extract"
" '(#:just-for-nominal?)"
" 5)"
" '(#:just-for-nominal?)"
"(list temp143_629)"
" id144_630"
" temp145_631"
" phase146_632))))))"
"(if accum-update-nominals_616"
"(let-values()"
"(set-box!"
" accum-update-nominals_616"
"(cons update!_627(unbox accum-update-nominals_616))))"
"(let-values()(update!_627)))))))"
"(let-values()"
"(let-values(((nominal-phase_636)"
"(module-binding-nominal-require-phase b_618)))"
"(let-values(((sym-to-reqds_637)"
"(hash-ref at-mod_625 nominal-phase_636 '#hasheq())))"
"(let-values(((reqds_638)"
"(hash-ref"
" sym-to-reqds_637"
"(syntax-e$1 id_611)"
" null)))"
"(begin"
"(let-values(((lst_639) reqds_638))"
"(begin"
"(if(list? lst_639)"
"(void)"
"(let-values()(in-list lst_639)))"
"((letrec-values(((for-loop_640)"
"(lambda(fold-var_641 lst_642)"
"(if(pair? lst_642)"
"(let-values(((r_643)"
"(unsafe-car"
" lst_642)))"
"(let-values(((fold-var_644)"
"(let-values(((fold-var_645)"
" fold-var_641))"
"(let-values(((fold-var_646)"
"(let-values()"
"(begin"
"(let-values()"
"(if(if(bulk-required?"
" r_643)"
"(bulk-required-can-be-shadowed?"
" r_643)"
"(required-can-be-shadowed?"
" r_643))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_610"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" who_617"
"(string-append"
"                                                                                                                                  \"identifier already \""
"(if defined?_623"
"                                                                                                                                    \"defined\""
"                                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_612)"
"(let-values()"
"                                                                                                                                      \"\")"
"(if(label-phase?"
" phase_612)"
"(let-values()"
"                                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_612)"
"(let-values()"
"                                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                                           \" for phase ~a\""
" phase_612))))))"
" orig-s_613"
" id_611))))"
"(void)))))"
"(values"
" fold-var_646)))))"
"(for-loop_640"
" fold-var_644"
"(unsafe-cdr lst_642))))"
" fold-var_641))))"
" for-loop_640)"
"(void)"
" lst_639)))"
"(if(if remove-shadowed!?_615(pair? reqds_638) #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_637"
"(syntax-e$1 id_611)"
"(remove-non-matching-requireds"
" reqds_638"
" id_611"
" phase_612"
" mpi_624"
" nominal-phase_636"
"(syntax-e$1 id_611))))"
"(void))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack88.1)"
"(lambda(given-kws_647 given-args_648 r+p84_649 id85_650 phase86_651)"
"(let-values(((accum-update-nominals82_652)"
"(if(pair? given-kws_647)(eq? '#:accum-update-nominals(car given-kws_647)) #f)))"
"(let-values(((accum-update-nominals76_653)(if accum-update-nominals82_652(car given-args_648)(void)))"
"((given-kws_654)(if accum-update-nominals82_652(cdr given-kws_647) given-kws_647))"
"((given-args_655)(if accum-update-nominals82_652(cdr given-args_648) given-args_648)))"
"(let-values(((check-not-required?78_656)"
"(if(pair? given-kws_654)(eq? '#:check-not-required?(car given-kws_654)) #f)))"
"(let-values(((check-not-required?72_657)(if check-not-required?78_656(car given-args_655)(void)))"
"((given-kws_658)(if check-not-required?78_656(cdr given-kws_654) given-kws_654))"
"((given-args_659)(if check-not-required?78_656(cdr given-args_655) given-args_655)))"
"(let-values(((in73_660)(car given-args_659))"
"((given-kws_661)(cdr given-kws_658))"
"((given-args_662)(cdr given-args_659)))"
"(let-values(((remove-shadowed!?81_663)"
"(if(pair? given-kws_661)(eq? '#:remove-shadowed!?(car given-kws_661)) #f)))"
"(let-values(((remove-shadowed!?75_664)(if remove-shadowed!?81_663(car given-args_662)(void)))"
"((given-kws_665)(if remove-shadowed!?81_663(cdr given-kws_661) given-kws_661))"
"((given-args_666)(if remove-shadowed!?81_663(cdr given-args_662) given-args_662)))"
"(let-values(((unless-matches80_667)"
"(if(pair? given-kws_665)(eq? '#:unless-matches(car given-kws_665)) #f)))"
"(let-values(((unless-matches74_668)(if unless-matches80_667(car given-args_666)(void)))"
"((given-kws_669)(if unless-matches80_667(cdr given-kws_665) given-kws_665))"
"((given-args_670)(if unless-matches80_667(cdr given-args_666) given-args_666)))"
"(let-values(((who77_671)(car given-args_670)))"
"(check-not-defined87.1"
" accum-update-nominals76_653"
" accum-update-nominals82_652"
" check-not-required?72_657"
" check-not-required?78_656"
" in73_660"
" remove-shadowed!?75_664"
" remove-shadowed!?81_663"
" unless-matches74_668"
" unless-matches80_667"
" who77_671"
" r+p84_649"
" id85_650"
" phase86_651)))))))))))))"
"(define-values"
"(check-not-defined89.1)"
"(lifted/27.1$1"
"(lambda(given-kws_672 given-argc_673)"
"(if(= given-argc_673 5)"
"(subsets?"
" '(#:in #:who)"
" given-kws_672"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who))"
" #f))"
"(case-lambda"
"((given-kws_674 given-args_675 r+p_676 id_677 phase_678)"
"(unpack88.1 given-kws_674 given-args_675 r+p_676 id_677 phase_678)))"
" '(#:in #:who)"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_679 syms_680 phase_681)"
"(let-values(((phase-to-defined-syms_682)(requires+provides-phase-to-defined-syms r+p_679)))"
"(let-values(((defined-syms_683)(hash-ref phase-to-defined-syms_682 phase_681 '#hasheq())))"
"(let-values(((new-defined-syms_684)"
"(let-values(((lst_685) syms_680))"
"(begin"
"(if(list? lst_685)(void)(let-values()(in-list lst_685)))"
"((letrec-values(((for-loop_686)"
"(lambda(defined-syms_687 lst_688)"
"(if(pair? lst_688)"
"(let-values(((sym_689)(unsafe-car lst_688)))"
"(let-values(((defined-syms_690)"
"(let-values(((defined-syms_691) defined-syms_687))"
"(let-values(((defined-syms_692)"
"(let-values()"
"(hash-set"
" defined-syms_691"
" sym_689"
" #t))))"
"(values defined-syms_692)))))"
"(for-loop_686 defined-syms_690(unsafe-cdr lst_688))))"
" defined-syms_687))))"
" for-loop_686)"
" defined-syms_683"
" lst_685)))))"
"(hash-set! phase-to-defined-syms_682 phase_681 new-defined-syms_684))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_693 mod-name_694 phase_695)"
"(let-values(((mpi_696)(intern-mpi r+p_693 mod-name_694)))"
"(let-values(((at-mod_697)(hash-ref(requires+provides-requires r+p_693) mpi_696 #f)))"
"(if at-mod_697"
"(alt-reverse"
"(let-values(((ht_698)(hash-ref at-mod_697 phase_695 '#hasheq())))"
"(begin"
"(if((lambda(ht_699)(hash? ht_699)) ht_698)(void)(let-values()(default-in-hash ht_698)))"
"((letrec-values(((for-loop_700)"
"(lambda(fold-var_701 i_702)"
"(if i_702"
"(let-values(((sym_703 reqds_704)(hash-iterate-key+value ht_698 i_702)))"
"(let-values(((fold-var_705)"
"(let-values(((lst_706) reqds_704))"
"(begin"
"(if(list? lst_706)(void)(let-values()(in-list lst_706)))"
"((letrec-values(((for-loop_707)"
"(lambda(fold-var_708 lst_709)"
"(if(pair? lst_709)"
"(let-values(((reqd_710)"
"(unsafe-car lst_709)))"
"(let-values(((fold-var_711)"
"(let-values(((fold-var_712)"
" fold-var_708))"
"(let-values(((fold-var_713)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_710"
" mpi_696"
" phase_695"
" sym_703))"
" fold-var_712))))"
"(values"
" fold-var_713)))))"
"(for-loop_707"
" fold-var_711"
"(unsafe-cdr lst_709))))"
" fold-var_708))))"
" for-loop_707)"
" fold-var_701"
" lst_706)))))"
"(for-loop_700 fold-var_705(hash-iterate-next ht_698 i_702))))"
" fold-var_701))))"
" for-loop_700)"
" null"
"(hash-iterate-first ht_698)))))"
" #f)))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_714)"
"(let-values(((or-part_715)(extract-module-requires r+p_714(requires+provides-self r+p_714) 0)))"
"(if or-part_715 or-part_715 null))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_716 mod-name_717 phase_718)"
"(let-values(((self_719)(requires+provides-self r+p_716)))"
"(let-values(((requires_720)(requires+provides-requires r+p_716)))"
"(call/ec"
"(lambda(esc_721)"
"(alt-reverse"
"(let-values(((lst_722)"
"(if mod-name_717(list(intern-mpi r+p_716 mod-name_717))(hash-keys requires_720))))"
"(begin"
"(if(list? lst_722)(void)(let-values()(in-list lst_722)))"
"((letrec-values(((for-loop_723)"
"(lambda(fold-var_724 lst_725)"
"(if(pair? lst_725)"
"(let-values(((mod-name_726)(unsafe-car lst_725)))"
"(let-values(((fold-var_727)"
"(let-values(((fold-var_728) fold-var_724))"
"(if(eq? mod-name_726 self_719)"
" fold-var_728"
"(let-values(((phase-to-requireds_729)"
"(hash-ref"
" requires_720"
" mod-name_726"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_730)"
"(lambda(fold-var_731)"
"(let-values()"
"(let-values(((fold-var_732)"
"(let-values(((lst_733)"
"(if(eq?"
" phase_718"
" 'all)"
"(hash-keys"
" phase-to-requireds_729)"
"(list"
" phase_718))))"
"(begin"
"(if(list?"
" lst_733)"
"(void)"
"(let-values()"
"(in-list"
" lst_733)))"
"((letrec-values(((for-loop_734)"
"(lambda(fold-var_735"
" lst_736)"
"(if(pair?"
" lst_736)"
"(let-values(((phase_737)"
"(unsafe-car"
" lst_736)))"
"(let-values(((fold-var_738)"
"(let-values(((ht_739)"
"(hash-ref"
" phase-to-requireds_729"
" phase_737"
"(lambda()"
"(esc_721"
" #f)))))"
"(begin"
"(if((lambda(ht_740)"
"(hash?"
" ht_740))"
" ht_739)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_739)))"
"((letrec-values(((for-loop_741)"
"(lambda(fold-var_742"
" i_743)"
"(if i_743"
"(let-values(((sym_744"
" reqds_745)"
"(hash-iterate-key+value"
" ht_739"
" i_743)))"
"(let-values(((fold-var_746)"
"(let-values(((lst_747)"
" reqds_745))"
"(begin"
"(if(list?"
" lst_747)"
"(void)"
"(let-values()"
"(in-list"
" lst_747)))"
"((letrec-values(((for-loop_748)"
"(lambda(fold-var_749"
" lst_750)"
"(if(pair?"
" lst_750)"
"(let-values(((reqd_751)"
"(unsafe-car"
" lst_750)))"
"(let-values(((fold-var_752)"
"(let-values(((fold-var_753)"
" fold-var_749))"
"(let-values(((fold-var_754)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_751"
" mod-name_726"
" phase_737"
" sym_744))"
" fold-var_753))))"
"(values"
" fold-var_754)))))"
"(for-loop_748"
" fold-var_752"
"(unsafe-cdr"
" lst_750))))"
" fold-var_749))))"
" for-loop_748)"
" fold-var_742"
" lst_747)))))"
"(for-loop_741"
" fold-var_746"
"(hash-iterate-next"
" ht_739"
" i_743))))"
" fold-var_742))))"
" for-loop_741)"
" fold-var_735"
"(hash-iterate-first"
" ht_739))))))"
"(for-loop_734"
" fold-var_738"
"(unsafe-cdr"
" lst_736))))"
" fold-var_735))))"
" for-loop_734)"
" fold-var_731"
" lst_733)))))"
" fold-var_732)))))"
" for-loop_730)"
" fold-var_728)))))))"
"(for-loop_723 fold-var_727(unsafe-cdr lst_725))))"
" fold-var_724))))"
" for-loop_723)"
" null"
" lst_722))))))))))"
"(define-values"
"(lifted/31.1$1 lifted/32.1$1 lifted/33.1$1 lifted/34.1$1 lifted/35.1$1)"
"(make-struct-type"
" 'add-provide!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'add-provide!"
"(case-lambda"
"((self_755 r+p_756 sym_757 phase_758 binding_759 immed-binding_760 id_761 orig-s_762)"
"(apply missing-kw self_755 r+p_756 sym_757 phase_758 binding_759 immed-binding_760 id_761 orig-s_762 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_763 r+p_764 sym_765 phase_766 binding_767 immed-binding_768 id_769 orig-s_770)"
"(apply missing-kw self_763 r+p_764 sym_765 phase_766 binding_767 immed-binding_768 id_769 orig-s_770 null)))))"
"(define-values"
"(add-provide!101.1)"
"(lambda(as-protected?90_771"
" as-transformer?91_772"
" r+p94_773"
" sym95_774"
" phase96_775"
" binding97_776"
" immed-binding98_777"
" id99_778"
" orig-s100_779)"
"(let-values(((r+p_780) r+p94_773))"
"(let-values(((sym_781) sym95_774))"
"(let-values(((phase_782) phase96_775))"
"(let-values(((binding_783) binding97_776))"
"(let-values(((immed-binding_784) immed-binding98_777))"
"(let-values(((id_785) id99_778))"
"(let-values(((orig-s_786) orig-s100_779))"
"(let-values(((as-protected?_787) as-protected?90_771))"
"(let-values(((as-transformer?_788) as-transformer?91_772))"
"(let-values()"
"(begin"
"(if(if as-protected?_787"
"(not(eq?(module-binding-module immed-binding_784)(requires+provides-self r+p_780)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_781))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_780)"
" phase_782"
"(lambda(at-phase_789)"
"(let-values(((b/p_790)(hash-ref at-phase_789 sym_781 #f)))"
"(let-values(((b_791)(provided-as-binding b/p_790)))"
"(if(not b_791)"
"(let-values()"
"(hash-set"
" at-phase_789"
" sym_781"
"(if(let-values(((or-part_792) as-protected?_787))"
"(if or-part_792 or-part_792 as-transformer?_788))"
"(provided1.1 binding_783 as-protected?_787 as-transformer?_788)"
" binding_783)))"
"(if(same-binding? b_791 binding_783)"
"(let-values() at-phase_789)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_786"
" id_785)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(unpack102.1)"
"(lambda(given-kws_793"
" given-args_794"
" r+p94_795"
" sym95_796"
" phase96_797"
" binding97_798"
" immed-binding98_799"
" id99_800"
" orig-s100_801)"
"(let-values(((as-protected?90_802)(car given-args_794))"
"((given-kws_803)(cdr given-kws_793))"
"((given-args_804)(cdr given-args_794)))"
"(let-values(((as-transformer?91_805)(car given-args_804)))"
"(add-provide!101.1"
" as-protected?90_802"
" as-transformer?91_805"
" r+p94_795"
" sym95_796"
" phase96_797"
" binding97_798"
" immed-binding98_799"
" id99_800"
" orig-s100_801)))))"
"(define-values"
"(add-provide!103.1)"
"(lifted/32.1$1"
"(lambda(given-kws_806 given-argc_807)"
"(if(= given-argc_807 9)"
"(let-values(((l2_808) given-kws_806))"
"(if(pair? l2_808)"
"(if(eq?(car l2_808) '#:as-protected?)"
"(let-values(((l2_809)(cdr l2_808)))"
"(if(pair? l2_809)(if(eq?(car l2_809) '#:as-transformer?)(null?(cdr l2_809)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_810 given-args_811 r+p_812 sym_813 phase_814 binding_815 immed-binding_816 id_817 orig-s_818)"
"(unpack102.1"
" given-kws_810"
" given-args_811"
" r+p_812"
" sym_813"
" phase_814"
" binding_815"
" immed-binding_816"
" id_817"
" orig-s_818)))"
" '(#:as-protected? #:as-transformer?)"
" '(#:as-protected? #:as-transformer?)))"
"(define-values"
"(attach-require-provide-properties)"
"(lambda(r+p_819 s_820 old-self_821 new-self_822)"
"(let-values(((extract-requires_823)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_825)(requires+provides-require-mpis-in-order r+p_819)))"
"(let-values(((phases-in-order_826)"
"(let-values(((temp149_827)(hash-keys phase-to-mpis-in-order_825))"
"((phase<?150_828) phase<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp149_827 phase<?150_828)"
"(sort9.1 temp149_827 phase<?150_828)))))"
"(alt-reverse"
"(let-values(((lst_829) phases-in-order_826))"
"(begin"
"(if(list? lst_829)(void)(let-values()(in-list lst_829)))"
"((letrec-values(((for-loop_830)"
"(lambda(fold-var_831 lst_832)"
"(if(pair? lst_832)"
"(let-values(((phase_833)(unsafe-car lst_832)))"
"(let-values(((fold-var_834)"
"(let-values(((fold-var_835) fold-var_831))"
"(let-values(((fold-var_836)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_833"
"(alt-reverse"
"(let-values(((lst_837)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_825"
" phase_833))))"
"(begin"
"(if(list? lst_837)"
"(void)"
"(let-values()"
"(in-list lst_837)))"
"((letrec-values(((for-loop_838)"
"(lambda(fold-var_839"
" lst_840)"
"(if(pair?"
" lst_840)"
"(let-values(((mpi_841)"
"(unsafe-car"
" lst_840)))"
"(let-values(((fold-var_842)"
"(let-values(((fold-var_843)"
" fold-var_839))"
"(if(eq?"
" mpi_841"
" old-self_821)"
" fold-var_843"
"(let-values(((fold-var_844)"
" fold-var_843))"
"(let-values(((fold-var_845)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_841"
" old-self_821"
" new-self_822))"
" fold-var_844))))"
"(values"
" fold-var_845)))))))"
"(for-loop_838"
" fold-var_842"
"(unsafe-cdr"
" lst_840))))"
" fold-var_839))))"
" for-loop_838)"
" null"
" lst_837))))))"
" fold-var_835))))"
"(values fold-var_836)))))"
"(for-loop_830 fold-var_834(unsafe-cdr lst_832))))"
" fold-var_831))))"
" for-loop_830)"
" null"
" lst_829)))))))))"
"(let-values(((extract-provides_824)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_819)"
" old-self_821"
" new-self_822))))"
"(let-values(((s_846)(syntax-property$1 s_820 'module-requires(extract-requires_823))))"
"(let-values(((s_847)(syntax-property$1 s_846 'module-provides(extract-provides_824)))) s_847))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_871 from-mpi_872 to-mpi_873)"
"(if(eq? from-mpi_872 to-mpi_873)"
"(let-values() provides_871)"
"(let-values()"
"(let-values(((ht_874) provides_871))"
"(begin"
"(if((lambda(ht_875)(hash? ht_875)) ht_874)(void)(let-values()(default-in-hash ht_874)))"
"((letrec-values(((for-loop_876)"
"(lambda(table_877 i_878)"
"(if i_878"
"(let-values(((phase_879 at-phase_880)(hash-iterate-key+value ht_874 i_878)))"
"(let-values(((table_881)"
"(let-values(((table_882) table_877))"
"(let-values(((table_883)"
"(let-values()"
"(let-values(((key_884 val_885)"
"(let-values()"
"(values"
" phase_879"
"(let-values(((ht_886)"
" at-phase_880))"
"(begin"
"(if((lambda(ht_887)"
"(hash? ht_887))"
" ht_886)"
"(void)"
"(let-values()"
"(default-in-hash ht_886)))"
"((letrec-values(((for-loop_888)"
"(lambda(table_889"
" i_890)"
"(if i_890"
"(let-values(((sym_891"
" binding_892)"
"(hash-iterate-key+value"
" ht_886"
" i_890)))"
"(let-values(((table_893)"
"(let-values(((table_894)"
" table_889))"
"(if(symbol-interned?"
" sym_891)"
"(let-values(((table_895)"
" table_894))"
"(let-values(((table_896)"
"(let-values()"
"(let-values(((key_897"
" val_898)"
"(let-values()"
"(values"
" sym_891"
"((letrec-values(((loop_899)"
"(lambda(binding_900)"
"(if(provided?"
" binding_900)"
"(let-values()"
"(provided1.1"
"(loop_899"
"(provided-binding"
" binding_900))"
"(provided-protected?"
" binding_900)"
"(provided-syntax?"
" binding_900)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_900"
" from-mpi_872"
" to-mpi_873))))))"
" loop_899)"
" binding_892)))))"
"(hash-set"
" table_895"
" key_897"
" val_898)))))"
"(values"
" table_896)))"
" table_894))))"
"(for-loop_888"
" table_893"
"(hash-iterate-next"
" ht_886"
" i_890))))"
" table_889))))"
" for-loop_888)"
" '#hasheq()"
"(hash-iterate-first"
" ht_886))))))))"
"(hash-set table_882 key_884 val_885)))))"
"(values table_883)))))"
"(for-loop_876 table_881(hash-iterate-next ht_874 i_878))))"
" table_877))))"
" for-loop_876)"
" '#hasheqv()"
"(hash-iterate-first ht_874))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_21 make-_22 ?_23(make-struct-field-accessor -ref_24 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_41 make-_42 ?_43(make-struct-field-accessor -ref_44 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 'prefix-sym)"
"(make-struct-field-accessor -ref_64 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_86 make-_87 ?_88 -ref_89 -set!_90)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_86"
" make-_87"
" ?_88"
"(make-struct-field-accessor -ref_89 0 'to-id)"
"(make-struct-field-accessor -ref_89 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(lifted/1.1$13 lifted/2.1$13 lifted/3.1$12 lifted/4.1$12 lifted/5.1$12)"
"(make-struct-type"
" 'parse-and-perform-requires!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'parse-and-perform-requires!"
"(case-lambda"
"((self_111 reqs_112 orig-s_113 m-ns_114 phase-shift_115 requires+provides_116)"
"(apply missing-kw self_111 reqs_112 orig-s_113 m-ns_114 phase-shift_115 requires+provides_116 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_117 reqs_118 orig-s_119 m-ns_120 phase-shift_121 requires+provides_122)"
"(apply missing-kw self_117 reqs_118 orig-s_119 m-ns_120 phase-shift_121 requires+provides_122 null)))))"
"(define-values"
"(parse-and-perform-requires!28.1)"
"(lambda(copy-variable-as-constant?11_123"
" copy-variable-as-constant?20_124"
" copy-variable-phase-level10_125"
" copy-variable-phase-level19_126"
" declared-submodule-names9_127"
" declared-submodule-names18_128"
" run-phase6_129"
" run-phase15_130"
" run?7_131"
" run?16_132"
" self5_133"
" self14_134"
" skip-variable-phase-level12_135"
" skip-variable-phase-level21_136"
" visit?8_137"
" visit?17_138"
" who13_139"
" reqs23_140"
" orig-s24_141"
" m-ns25_142"
" phase-shift26_143"
" requires+provides27_144)"
"(let-values(((reqs_145) reqs23_140))"
"(let-values(((orig-s_146) orig-s24_141))"
"(let-values(((m-ns_147) m-ns25_142))"
"(let-values(((phase-shift_148) phase-shift26_143))"
"(let-values(((requires+provides_149) requires+provides27_144))"
"(let-values(((self_150)(if self14_134 self5_133 #f)))"
"(let-values(((run-phase_151)(if run-phase15_130 run-phase6_129(namespace-phase m-ns_147))))"
"(let-values(((run?_152)(if run?16_132 run?7_131 #f)))"
"(let-values(((visit?_153)(if visit?17_138 visit?8_137 #t)))"
"(let-values(((declared-submodule-names_154)"
"(if declared-submodule-names18_128 declared-submodule-names9_127 '#hasheq())))"
"(let-values(((copy-variable-phase-level_155)"
"(if copy-variable-phase-level19_126 copy-variable-phase-level10_125 #f)))"
"(let-values(((copy-variable-as-constant?_156)"
"(if copy-variable-as-constant?20_124 copy-variable-as-constant?11_123 #f)))"
"(let-values(((skip-variable-phase-level_157)"
"(if skip-variable-phase-level21_136 skip-variable-phase-level12_135 #f)))"
"(let-values(((who_158) who13_139))"
"(let-values()"
"((letrec-values(((loop_159)"
"(lambda(reqs_160"
" top-req_161"
" phase-shift_162"
" just-meta_163"
" adjust_164"
" for-meta-ok?_165"
" just-meta-ok?_166"
" layer_167)"
"(let-values(((lst_168) reqs_160))"
"(begin"
"(if(list? lst_168)(void)(let-values()(in-list lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(result_170 lst_171)"
"(if(pair? lst_171)"
"(let-values(((req_172)"
"(unsafe-car lst_171)))"
"(let-values(((result_173)"
"(let-values(((result_174)"
" result_170))"
"(let-values(((result_175)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_176)"
"(let-values(((check-nested106_178)"
"(lambda(want-layer105_179"
" ok?103_180"
" ok?104_181)"
"(let-values(((want-layer_182)"
" want-layer105_179))"
"(let-values(((ok?_183)"
"(if ok?104_181"
" ok?103_180"
" #t)))"
"(let-values()"
"(if(if ok?_183"
"(member"
" want-layer_182"
"(member"
" layer_167"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"invalid nesting\""
" orig-s_146"
" req_172)))))))))"
"(case-lambda"
"((want-layer_184)"
"(check-nested106_178"
" want-layer_184"
" #f"
" #f))"
"((want-layer_185"
" ok?103_186)"
"(check-nested106_178"
" want-layer_185"
" ok?103_186"
" #t))))))"
"(let-values(((fm_177)"
"(if(pair?"
"(syntax-e$1"
" req_172))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_172)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_172)))"
" #f)"
" #f)))"
"(let-values(((tmp_187)"
" fm_177))"
"(if(equal?"
" tmp_187"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" for-meta-ok?_165)"
"(values))))"
"(let-values(((ok?_188"
" for-meta108_189"
" phase-level109_190"
" spec110_191)"
"(let-values(((s_205)"
" req_172))"
"(let-values(((orig-s_206)"
" s_205))"
"(let-values(((for-meta108_207"
" phase-level109_208"
" spec110_209)"
"(let-values(((s_210)"
"(if(syntax?$1"
" s_205)"
"(syntax-e$1"
" s_205)"
" s_205)))"
"(if(pair?"
" s_210)"
"(let-values(((for-meta111_211)"
"(let-values(((s_214)"
"(car"
" s_210)))"
" s_214))"
"((phase-level112_212"
" spec113_213)"
"(let-values(((s_215)"
"(cdr"
" s_210)))"
"(let-values(((s_216)"
"(if(syntax?$1"
" s_215)"
"(syntax-e$1"
" s_215)"
" s_215)))"
"(if(pair?"
" s_216)"
"(let-values(((phase-level114_217)"
"(let-values(((s_219)"
"(car"
" s_216)))"
" s_219))"
"((spec115_218)"
"(let-values(((s_220)"
"(cdr"
" s_216)))"
"(let-values(((s_221)"
"(if(syntax?$1"
" s_220)"
"(syntax-e$1"
" s_220)"
" s_220)))"
"(let-values(((flat-s_222)"
"(to-syntax-list.1"
" s_221)))"
"(if(not"
" flat-s_222)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_206))"
"(let-values()"
" flat-s_222)))))))"
"(values"
" phase-level114_217"
" spec115_218))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_206))))))"
"(values"
" for-meta111_211"
" phase-level112_212"
" spec113_213))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_206)))))"
"(values"
" #t"
" for-meta108_207"
" phase-level109_208"
" spec110_209))))))"
"(let-values(((p_204)"
"(syntax-e$1"
" phase-level109_190)))"
"(begin"
"(if(phase?"
" p_204)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad phase\""
" orig-s_146"
" req_172)))"
"(loop_159"
" spec110_191"
"(let-values(((or-part_223)"
" top-req_161))"
"(if or-part_223"
" or-part_223"
" req_172))"
"(phase+"
" phase-shift_162"
" p_204)"
" just-meta_163"
" adjust_164"
" #f"
" just-meta-ok?_166"
" 'raw))))))"
"(if(equal?"
" tmp_187"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" for-meta-ok?_165)"
"(values))))"
"(let-values(((ok?_224"
" for-syntax116_225"
" spec117_226)"
"(let-values(((s_237)"
" req_172))"
"(let-values(((orig-s_238)"
" s_237))"
"(let-values(((for-syntax116_239"
" spec117_240)"
"(let-values(((s_241)"
"(if(syntax?$1"
" s_237)"
"(syntax-e$1"
" s_237)"
" s_237)))"
"(if(pair?"
" s_241)"
"(let-values(((for-syntax118_242)"
"(let-values(((s_244)"
"(car"
" s_241)))"
" s_244))"
"((spec119_243)"
"(let-values(((s_245)"
"(cdr"
" s_241)))"
"(let-values(((s_246)"
"(if(syntax?$1"
" s_245)"
"(syntax-e$1"
" s_245)"
" s_245)))"
"(let-values(((flat-s_247)"
"(to-syntax-list.1"
" s_246)))"
"(if(not"
" flat-s_247)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_238))"
"(let-values()"
" flat-s_247)))))))"
"(values"
" for-syntax118_242"
" spec119_243))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_238)))))"
"(values"
" #t"
" for-syntax116_239"
" spec117_240))))))"
"(loop_159"
" spec117_226"
"(let-values(((or-part_248)"
" top-req_161))"
"(if or-part_248"
" or-part_248"
" req_172))"
"(phase+"
" phase-shift_162"
" 1)"
" just-meta_163"
" adjust_164"
" #f"
" just-meta-ok?_166"
" 'raw))))"
"(if(equal?"
" tmp_187"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" for-meta-ok?_165)"
"(values))))"
"(let-values(((ok?_249"
" for-template120_250"
" spec121_251)"
"(let-values(((s_262)"
" req_172))"
"(let-values(((orig-s_263)"
" s_262))"
"(let-values(((for-template120_264"
" spec121_265)"
"(let-values(((s_266)"
"(if(syntax?$1"
" s_262)"
"(syntax-e$1"
" s_262)"
" s_262)))"
"(if(pair?"
" s_266)"
"(let-values(((for-template122_267)"
"(let-values(((s_269)"
"(car"
" s_266)))"
" s_269))"
"((spec123_268)"
"(let-values(((s_270)"
"(cdr"
" s_266)))"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_270)"
"(syntax-e$1"
" s_270)"
" s_270)))"
"(let-values(((flat-s_272)"
"(to-syntax-list.1"
" s_271)))"
"(if(not"
" flat-s_272)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_263))"
"(let-values()"
" flat-s_272)))))))"
"(values"
" for-template122_267"
" spec123_268))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_263)))))"
"(values"
" #t"
" for-template120_264"
" spec121_265))))))"
"(loop_159"
" spec121_251"
"(let-values(((or-part_273)"
" top-req_161))"
"(if or-part_273"
" or-part_273"
" req_172))"
"(phase+"
" phase-shift_162"
" -1)"
" just-meta_163"
" adjust_164"
" #f"
" just-meta-ok?_166"
" 'raw))))"
"(if(equal?"
" tmp_187"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" for-meta-ok?_165)"
"(values))))"
"(let-values(((ok?_274"
" for-label124_275"
" spec125_276)"
"(let-values(((s_287)"
" req_172))"
"(let-values(((orig-s_288)"
" s_287))"
"(let-values(((for-label124_289"
" spec125_290)"
"(let-values(((s_291)"
"(if(syntax?$1"
" s_287)"
"(syntax-e$1"
" s_287)"
" s_287)))"
"(if(pair?"
" s_291)"
"(let-values(((for-label126_292)"
"(let-values(((s_294)"
"(car"
" s_291)))"
" s_294))"
"((spec127_293)"
"(let-values(((s_295)"
"(cdr"
" s_291)))"
"(let-values(((s_296)"
"(if(syntax?$1"
" s_295)"
"(syntax-e$1"
" s_295)"
" s_295)))"
"(let-values(((flat-s_297)"
"(to-syntax-list.1"
" s_296)))"
"(if(not"
" flat-s_297)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_288))"
"(let-values()"
" flat-s_297)))))))"
"(values"
" for-label126_292"
" spec127_293))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_288)))))"
"(values"
" #t"
" for-label124_289"
" spec125_290))))))"
"(loop_159"
" spec125_276"
"(let-values(((or-part_298)"
" top-req_161))"
"(if or-part_298"
" or-part_298"
" req_172))"
"(phase+"
" phase-shift_162"
" #f)"
" just-meta_163"
" adjust_164"
" #f"
" just-meta-ok?_166"
" 'raw))))"
"(if(equal?"
" tmp_187"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'raw"
" just-meta-ok?_166)"
"(values))))"
"(let-values(((ok?_299"
" just-meta128_300"
" phase-level129_301"
" spec130_302)"
"(let-values(((s_316)"
" req_172))"
"(let-values(((orig-s_317)"
" s_316))"
"(let-values(((just-meta128_318"
" phase-level129_319"
" spec130_320)"
"(let-values(((s_321)"
"(if(syntax?$1"
" s_316)"
"(syntax-e$1"
" s_316)"
" s_316)))"
"(if(pair?"
" s_321)"
"(let-values(((just-meta131_322)"
"(let-values(((s_325)"
"(car"
" s_321)))"
" s_325))"
"((phase-level132_323"
" spec133_324)"
"(let-values(((s_326)"
"(cdr"
" s_321)))"
"(let-values(((s_327)"
"(if(syntax?$1"
" s_326)"
"(syntax-e$1"
" s_326)"
" s_326)))"
"(if(pair?"
" s_327)"
"(let-values(((phase-level134_328)"
"(let-values(((s_330)"
"(car"
" s_327)))"
" s_330))"
"((spec135_329)"
"(let-values(((s_331)"
"(cdr"
" s_327)))"
"(let-values(((s_332)"
"(if(syntax?$1"
" s_331)"
"(syntax-e$1"
" s_331)"
" s_331)))"
"(let-values(((flat-s_333)"
"(to-syntax-list.1"
" s_332)))"
"(if(not"
" flat-s_333)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_317))"
"(let-values()"
" flat-s_333)))))))"
"(values"
" phase-level134_328"
" spec135_329))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_317))))))"
"(values"
" just-meta131_322"
" phase-level132_323"
" spec133_324))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_317)))))"
"(values"
" #t"
" just-meta128_318"
" phase-level129_319"
" spec130_320))))))"
"(let-values(((p_315)"
"(syntax-e$1"
" phase-level129_301)))"
"(begin"
"(if(phase?"
" p_315)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad phase\""
" orig-s_146"
" req_172)))"
"(loop_159"
" spec130_302"
"(let-values(((or-part_334)"
" top-req_161))"
"(if or-part_334"
" or-part_334"
" req_172))"
" phase-shift_162"
" p_315"
" adjust_164"
" for-meta-ok?_165"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_187"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_335"
" only136_336"
" spec137_337"
" id138_338)"
"(let-values(((s_351)"
" req_172))"
"(let-values(((orig-s_352)"
" s_351))"
"(let-values(((only136_353"
" spec137_354"
" id138_355)"
"(let-values(((s_356)"
"(if(syntax?$1"
" s_351)"
"(syntax-e$1"
" s_351)"
" s_351)))"
"(if(pair?"
" s_356)"
"(let-values(((only139_357)"
"(let-values(((s_360)"
"(car"
" s_356)))"
" s_360))"
"((spec140_358"
" id141_359)"
"(let-values(((s_361)"
"(cdr"
" s_356)))"
"(let-values(((s_362)"
"(if(syntax?$1"
" s_361)"
"(syntax-e$1"
" s_361)"
" s_361)))"
"(if(pair?"
" s_362)"
"(let-values(((spec142_363)"
"(let-values(((s_365)"
"(car"
" s_362)))"
" s_365))"
"((id143_364)"
"(let-values(((s_366)"
"(cdr"
" s_362)))"
"(let-values(((s_367)"
"(if(syntax?$1"
" s_366)"
"(syntax-e$1"
" s_366)"
" s_366)))"
"(let-values(((flat-s_368)"
"(to-syntax-list.1"
" s_367)))"
"(if(not"
" flat-s_368)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_352))"
"(let-values()"
"(let-values(((id_369)"
"(let-values(((lst_370)"
" flat-s_368))"
"(begin"
"(if(list?"
" lst_370)"
"(void)"
"(let-values()"
"(in-list"
" lst_370)))"
"((letrec-values(((for-loop_371)"
"(lambda(id_372"
" lst_373)"
"(if(pair?"
" lst_373)"
"(let-values(((s_374)"
"(unsafe-car"
" lst_373)))"
"(let-values(((id_375)"
"(let-values(((id_376)"
" id_372))"
"(let-values(((id_377)"
"(let-values()"
"(let-values(((id144_378)"
"(let-values()"
"(if(let-values(((or-part_379)"
"(if(syntax?$1"
" s_374)"
"(symbol?"
"(syntax-e$1"
" s_374))"
" #f)))"
"(if or-part_379"
" or-part_379"
"(symbol?"
" s_374)))"
" s_374"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_352"
" s_374)))))"
"(cons"
" id144_378"
" id_376)))))"
"(values"
" id_377)))))"
"(for-loop_371"
" id_375"
"(unsafe-cdr"
" lst_373))))"
" id_372))))"
" for-loop_371)"
" null"
" lst_370)))))"
"(alt-reverse"
" id_369)))))))))"
"(values"
" spec142_363"
" id143_364))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_352))))))"
"(values"
" only139_357"
" spec140_358"
" id141_359))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_352)))))"
"(values"
" #t"
" only136_353"
" spec137_354"
" id138_355))))))"
"(loop_159"
"(list"
" spec137_337)"
"(let-values(((or-part_380)"
" top-req_161))"
"(if or-part_380"
" or-part_380"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-only1.1"
"(ids->sym-set"
" id138_338))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_187"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_381"
" prefix145_382"
" id:prefix146_383"
" spec147_384)"
"(let-values(((s_397)"
" req_172))"
"(let-values(((orig-s_398)"
" s_397))"
"(let-values(((prefix145_399"
" id:prefix146_400"
" spec147_401)"
"(let-values(((s_402)"
"(if(syntax?$1"
" s_397)"
"(syntax-e$1"
" s_397)"
" s_397)))"
"(if(pair?"
" s_402)"
"(let-values(((prefix148_403)"
"(let-values(((s_406)"
"(car"
" s_402)))"
" s_406))"
"((id:prefix149_404"
" spec150_405)"
"(let-values(((s_407)"
"(cdr"
" s_402)))"
"(let-values(((s_408)"
"(if(syntax?$1"
" s_407)"
"(syntax-e$1"
" s_407)"
" s_407)))"
"(if(pair?"
" s_408)"
"(let-values(((id:prefix151_409)"
"(let-values(((s_411)"
"(car"
" s_408)))"
"(if(let-values(((or-part_412)"
"(if(syntax?$1"
" s_411)"
"(symbol?"
"(syntax-e$1"
" s_411))"
" #f)))"
"(if or-part_412"
" or-part_412"
"(symbol?"
" s_411)))"
" s_411"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_398"
" s_411))))"
"((spec152_410)"
"(let-values(((s_413)"
"(cdr"
" s_408)))"
"(let-values(((s_414)"
"(if(syntax?$1"
" s_413)"
"(syntax-e$1"
" s_413)"
" s_413)))"
"(if(pair?"
" s_414)"
"(let-values(((spec153_415)"
"(let-values(((s_416)"
"(car"
" s_414)))"
" s_416))"
"(()"
"(let-values(((s_417)"
"(cdr"
" s_414)))"
"(let-values(((s_418)"
"(if(syntax?$1"
" s_417)"
"(syntax-e$1"
" s_417)"
" s_417)))"
"(if(null?"
" s_418)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_398))))))"
"(values"
" spec153_415))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_398))))))"
"(values"
" id:prefix151_409"
" spec152_410))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_398))))))"
"(values"
" prefix148_403"
" id:prefix149_404"
" spec150_405))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_398)))))"
"(values"
" #t"
" prefix145_399"
" id:prefix146_400"
" spec147_401))))))"
"(loop_159"
"(list"
" spec147_384)"
"(let-values(((or-part_419)"
" top-req_161))"
"(if or-part_419"
" or-part_419"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix146_383))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_187"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_420"
" all-except154_421"
" spec155_422"
" id156_423)"
"(let-values(((s_436)"
" req_172))"
"(let-values(((orig-s_437)"
" s_436))"
"(let-values(((all-except154_438"
" spec155_439"
" id156_440)"
"(let-values(((s_441)"
"(if(syntax?$1"
" s_436)"
"(syntax-e$1"
" s_436)"
" s_436)))"
"(if(pair?"
" s_441)"
"(let-values(((all-except157_442)"
"(let-values(((s_445)"
"(car"
" s_441)))"
" s_445))"
"((spec158_443"
" id159_444)"
"(let-values(((s_446)"
"(cdr"
" s_441)))"
"(let-values(((s_447)"
"(if(syntax?$1"
" s_446)"
"(syntax-e$1"
" s_446)"
" s_446)))"
"(if(pair?"
" s_447)"
"(let-values(((spec160_448)"
"(let-values(((s_450)"
"(car"
" s_447)))"
" s_450))"
"((id161_449)"
"(let-values(((s_451)"
"(cdr"
" s_447)))"
"(let-values(((s_452)"
"(if(syntax?$1"
" s_451)"
"(syntax-e$1"
" s_451)"
" s_451)))"
"(let-values(((flat-s_453)"
"(to-syntax-list.1"
" s_452)))"
"(if(not"
" flat-s_453)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_437))"
"(let-values()"
"(let-values(((id_454)"
"(let-values(((lst_455)"
" flat-s_453))"
"(begin"
"(if(list?"
" lst_455)"
"(void)"
"(let-values()"
"(in-list"
" lst_455)))"
"((letrec-values(((for-loop_456)"
"(lambda(id_457"
" lst_458)"
"(if(pair?"
" lst_458)"
"(let-values(((s_459)"
"(unsafe-car"
" lst_458)))"
"(let-values(((id_460)"
"(let-values(((id_461)"
" id_457))"
"(let-values(((id_462)"
"(let-values()"
"(let-values(((id162_463)"
"(let-values()"
"(if(let-values(((or-part_464)"
"(if(syntax?$1"
" s_459)"
"(symbol?"
"(syntax-e$1"
" s_459))"
" #f)))"
"(if or-part_464"
" or-part_464"
"(symbol?"
" s_459)))"
" s_459"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_437"
" s_459)))))"
"(cons"
" id162_463"
" id_461)))))"
"(values"
" id_462)))))"
"(for-loop_456"
" id_460"
"(unsafe-cdr"
" lst_458))))"
" id_457))))"
" for-loop_456)"
" null"
" lst_455)))))"
"(alt-reverse"
" id_454)))))))))"
"(values"
" spec160_448"
" id161_449))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_437))))))"
"(values"
" all-except157_442"
" spec158_443"
" id159_444))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_437)))))"
"(values"
" #t"
" all-except154_438"
" spec155_439"
" id156_440))))))"
"(loop_159"
"(list"
" spec155_422)"
"(let-values(((or-part_465)"
" top-req_161))"
"(if or-part_465"
" or-part_465"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id156_423))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_187"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_466"
" prefix-all-except163_467"
" id:prefix164_468"
" spec165_469"
" id166_470)"
"(let-values(((s_485)"
" req_172))"
"(let-values(((orig-s_486)"
" s_485))"
"(let-values(((prefix-all-except163_487"
" id:prefix164_488"
" spec165_489"
" id166_490)"
"(let-values(((s_491)"
"(if(syntax?$1"
" s_485)"
"(syntax-e$1"
" s_485)"
" s_485)))"
"(if(pair?"
" s_491)"
"(let-values(((prefix-all-except167_492)"
"(let-values(((s_496)"
"(car"
" s_491)))"
" s_496))"
"((id:prefix168_493"
" spec169_494"
" id170_495)"
"(let-values(((s_497)"
"(cdr"
" s_491)))"
"(let-values(((s_498)"
"(if(syntax?$1"
" s_497)"
"(syntax-e$1"
" s_497)"
" s_497)))"
"(if(pair?"
" s_498)"
"(let-values(((id:prefix171_499)"
"(let-values(((s_502)"
"(car"
" s_498)))"
"(if(let-values(((or-part_503)"
"(if(syntax?$1"
" s_502)"
"(symbol?"
"(syntax-e$1"
" s_502))"
" #f)))"
"(if or-part_503"
" or-part_503"
"(symbol?"
" s_502)))"
" s_502"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_486"
" s_502))))"
"((spec172_500"
" id173_501)"
"(let-values(((s_504)"
"(cdr"
" s_498)))"
"(let-values(((s_505)"
"(if(syntax?$1"
" s_504)"
"(syntax-e$1"
" s_504)"
" s_504)))"
"(if(pair?"
" s_505)"
"(let-values(((spec174_506)"
"(let-values(((s_508)"
"(car"
" s_505)))"
" s_508))"
"((id175_507)"
"(let-values(((s_509)"
"(cdr"
" s_505)))"
"(let-values(((s_510)"
"(if(syntax?$1"
" s_509)"
"(syntax-e$1"
" s_509)"
" s_509)))"
"(let-values(((flat-s_511)"
"(to-syntax-list.1"
" s_510)))"
"(if(not"
" flat-s_511)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_486))"
"(let-values()"
"(let-values(((id_512)"
"(let-values(((lst_513)"
" flat-s_511))"
"(begin"
"(if(list?"
" lst_513)"
"(void)"
"(let-values()"
"(in-list"
" lst_513)))"
"((letrec-values(((for-loop_514)"
"(lambda(id_515"
" lst_516)"
"(if(pair?"
" lst_516)"
"(let-values(((s_517)"
"(unsafe-car"
" lst_516)))"
"(let-values(((id_518)"
"(let-values(((id_519)"
" id_515))"
"(let-values(((id_520)"
"(let-values()"
"(let-values(((id176_521)"
"(let-values()"
"(if(let-values(((or-part_522)"
"(if(syntax?$1"
" s_517)"
"(symbol?"
"(syntax-e$1"
" s_517))"
" #f)))"
"(if or-part_522"
" or-part_522"
"(symbol?"
" s_517)))"
" s_517"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_486"
" s_517)))))"
"(cons"
" id176_521"
" id_519)))))"
"(values"
" id_520)))))"
"(for-loop_514"
" id_518"
"(unsafe-cdr"
" lst_516))))"
" id_515))))"
" for-loop_514)"
" null"
" lst_513)))))"
"(alt-reverse"
" id_512)))))))))"
"(values"
" spec174_506"
" id175_507))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_486))))))"
"(values"
" id:prefix171_499"
" spec172_500"
" id173_501))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_486))))))"
"(values"
" prefix-all-except167_492"
" id:prefix168_493"
" spec169_494"
" id170_495))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_486)))))"
"(values"
" #t"
" prefix-all-except163_487"
" id:prefix164_488"
" spec165_489"
" id166_490))))))"
"(loop_159"
"(list"
" spec165_469)"
"(let-values(((or-part_523)"
" top-req_161))"
"(if or-part_523"
" or-part_523"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix164_468)"
"(ids->sym-set"
" id166_470))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_187"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_176"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_524"
" rename177_525"
" spec178_526"
" id:to179_527"
" id:from180_528)"
"(let-values(((s_543)"
" req_172))"
"(let-values(((orig-s_544)"
" s_543))"
"(let-values(((rename177_545"
" spec178_546"
" id:to179_547"
" id:from180_548)"
"(let-values(((s_549)"
"(if(syntax?$1"
" s_543)"
"(syntax-e$1"
" s_543)"
" s_543)))"
"(if(pair?"
" s_549)"
"(let-values(((rename181_550)"
"(let-values(((s_554)"
"(car"
" s_549)))"
" s_554))"
"((spec182_551"
" id:to183_552"
" id:from184_553)"
"(let-values(((s_555)"
"(cdr"
" s_549)))"
"(let-values(((s_556)"
"(if(syntax?$1"
" s_555)"
"(syntax-e$1"
" s_555)"
" s_555)))"
"(if(pair?"
" s_556)"
"(let-values(((spec185_557)"
"(let-values(((s_560)"
"(car"
" s_556)))"
" s_560))"
"((id:to186_558"
" id:from187_559)"
"(let-values(((s_561)"
"(cdr"
" s_556)))"
"(let-values(((s_562)"
"(if(syntax?$1"
" s_561)"
"(syntax-e$1"
" s_561)"
" s_561)))"
"(if(pair?"
" s_562)"
"(let-values(((id:to188_563)"
"(let-values(((s_565)"
"(car"
" s_562)))"
"(if(let-values(((or-part_566)"
"(if(syntax?$1"
" s_565)"
"(symbol?"
"(syntax-e$1"
" s_565))"
" #f)))"
"(if or-part_566"
" or-part_566"
"(symbol?"
" s_565)))"
" s_565"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_544"
" s_565))))"
"((id:from189_564)"
"(let-values(((s_567)"
"(cdr"
" s_562)))"
"(let-values(((s_568)"
"(if(syntax?$1"
" s_567)"
"(syntax-e$1"
" s_567)"
" s_567)))"
"(if(pair?"
" s_568)"
"(let-values(((id:from190_569)"
"(let-values(((s_570)"
"(car"
" s_568)))"
"(if(let-values(((or-part_571)"
"(if(syntax?$1"
" s_570)"
"(symbol?"
"(syntax-e$1"
" s_570))"
" #f)))"
"(if or-part_571"
" or-part_571"
"(symbol?"
" s_570)))"
" s_570"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_544"
" s_570))))"
"(()"
"(let-values(((s_572)"
"(cdr"
" s_568)))"
"(let-values(((s_573)"
"(if(syntax?$1"
" s_572)"
"(syntax-e$1"
" s_572)"
" s_572)))"
"(if(null?"
" s_573)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_544))))))"
"(values"
" id:from190_569))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_544))))))"
"(values"
" id:to188_563"
" id:from189_564))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_544))))))"
"(values"
" spec185_557"
" id:to186_558"
" id:from187_559))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_544))))))"
"(values"
" rename181_550"
" spec182_551"
" id:to183_552"
" id:from184_553))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_544)))))"
"(values"
" #t"
" rename177_545"
" spec178_546"
" id:to179_547"
" id:from180_548))))))"
"(loop_159"
"(list"
" spec178_526)"
"(let-values(((or-part_574)"
" top-req_161))"
"(if or-part_574"
" or-part_574"
" req_172))"
" phase-shift_162"
" just-meta_163"
"(adjust-rename4.1"
" id:to179_527"
"(syntax-e$1"
" id:from180_528))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_575)"
"(syntax->datum$1"
" req_172)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_578)"
"(1/module-path?"
" maybe-mp_575)))"
"(if or-part_578"
" or-part_578"
"(1/resolved-module-path?"
" maybe-mp_575)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad require spec\""
" orig-s_146"
" req_172)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_579)"
" adjust_164))"
"(if or-part_579"
" or-part_579"
"(not"
"(eq?"
" just-meta_163"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_149"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_576)"
"(if(1/resolved-module-path?"
" maybe-mp_575)"
"(resolved-module-path->module-path"
" maybe-mp_575)"
" maybe-mp_575)))"
"(let-values(((mpi_577)"
"(let-values(((...r/expand/require.rkt:166:21_580)"
" module-path->mpi7.1)"
"((mp207_581)"
" mp_576)"
"((self208_582)"
" self_150)"
"((declared-submodule-names209_583)"
" declared-submodule-names_154))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path->mpi7.1))"
"(module-path->mpi5.1"
" declared-submodule-names209_583"
" #t"
" mp207_581"
" self208_582)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:166:21_580"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 4)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names209_583)"
" mp207_581"
" self208_582)))))"
"(let-values(((...r/expand/require.rkt:168:9_584)"
" perform-require!74.1)"
"((mpi191_585)"
" mpi_577)"
"((req192_586)"
" req_172)"
"((self193_587)"
" self_150)"
"((temp194_588)"
"(let-values(((or-part_601)"
" req_172))"
"(if or-part_601"
" or-part_601"
" top-req_161)))"
"((m-ns195_589)"
" m-ns_147)"
"((phase-shift196_590)"
" phase-shift_162)"
"((run-phase197_591)"
" run-phase_151)"
"((just-meta198_592)"
" just-meta_163)"
"((adjust199_593)"
" adjust_164)"
"((requires+provides200_594)"
" requires+provides_149)"
"((run?201_595)"
" run?_152)"
"((visit?202_596)"
" visit?_153)"
"((copy-variable-phase-level203_597)"
" copy-variable-phase-level_155)"
"((copy-variable-as-constant?204_598)"
" copy-variable-as-constant?_156)"
"((skip-variable-phase-level205_599)"
" skip-variable-phase-level_157)"
"((who206_600)"
" who_158))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!74.1))"
"(perform-require!72.1"
" adjust199_593"
" #t"
" #f"
" #f"
" copy-variable-as-constant?204_598"
" #t"
" copy-variable-phase-level203_597"
" #t"
" #f"
" #f"
" just-meta198_592"
" #t"
" phase-shift196_590"
" requires+provides200_594"
" #t"
" run-phase197_591"
" run?201_595"
" #t"
" skip-variable-phase-level205_599"
" #t"
" visit?202_596"
" #t"
" who206_600"
" mpi191_585"
" req192_586"
" self193_587"
" temp194_588"
" m-ns195_589)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:168:9_584"
" keyword-procedure-extract"
" '(#:adjust"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)"
" 7)"
" '(#:adjust"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)"
"(list"
" adjust199_593"
" copy-variable-as-constant?204_598"
" copy-variable-phase-level203_597"
" just-meta198_592"
" phase-shift196_590"
" requires+provides200_594"
" run-phase197_591"
" run?201_595"
" skip-variable-phase-level205_599"
" visit?202_596"
" who206_600)"
" mpi191_585"
" req192_586"
" self193_587"
" temp194_588"
" m-ns195_589))))))))))))))))))))))))))"
"(values"
" result_175)))))"
"(if(not"
"((lambda x_602"
"(not result_173))"
" req_172))"
"(for-loop_169"
" result_173"
"(unsafe-cdr lst_171))"
" result_173)))"
" result_170))))"
" for-loop_169)"
" #t"
" lst_168))))))"
" loop_159)"
" reqs_145"
" #f"
" phase-shift_148"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))))))"
"(define-values"
"(unpack29.1$1)"
"(lambda(given-kws_603 given-args_604 reqs23_605 orig-s24_606 m-ns25_607 phase-shift26_608 requires+provides27_609)"
"(let-values(((copy-variable-as-constant?20_610)"
"(if(pair? given-kws_603)(eq? '#:copy-variable-as-constant?(car given-kws_603)) #f)))"
"(let-values(((copy-variable-as-constant?11_611)"
"(if copy-variable-as-constant?20_610(car given-args_604)(void)))"
"((given-kws_612)(if copy-variable-as-constant?20_610(cdr given-kws_603) given-kws_603))"
"((given-args_613)(if copy-variable-as-constant?20_610(cdr given-args_604) given-args_604)))"
"(let-values(((copy-variable-phase-level19_614)"
"(if(pair? given-kws_612)(eq? '#:copy-variable-phase-level(car given-kws_612)) #f)))"
"(let-values(((copy-variable-phase-level10_615)"
"(if copy-variable-phase-level19_614(car given-args_613)(void)))"
"((given-kws_616)(if copy-variable-phase-level19_614(cdr given-kws_612) given-kws_612))"
"((given-args_617)(if copy-variable-phase-level19_614(cdr given-args_613) given-args_613)))"
"(let-values(((declared-submodule-names18_618)"
"(if(pair? given-kws_616)(eq? '#:declared-submodule-names(car given-kws_616)) #f)))"
"(let-values(((declared-submodule-names9_619)"
"(if declared-submodule-names18_618(car given-args_617)(void)))"
"((given-kws_620)(if declared-submodule-names18_618(cdr given-kws_616) given-kws_616))"
"((given-args_621)(if declared-submodule-names18_618(cdr given-args_617) given-args_617)))"
"(let-values(((run-phase15_622)(if(pair? given-kws_620)(eq? '#:run-phase(car given-kws_620)) #f)))"
"(let-values(((run-phase6_623)(if run-phase15_622(car given-args_621)(void)))"
"((given-kws_624)(if run-phase15_622(cdr given-kws_620) given-kws_620))"
"((given-args_625)(if run-phase15_622(cdr given-args_621) given-args_621)))"
"(let-values(((run?16_626)(if(pair? given-kws_624)(eq? '#:run?(car given-kws_624)) #f)))"
"(let-values(((run?7_627)(if run?16_626(car given-args_625)(void)))"
"((given-kws_628)(if run?16_626(cdr given-kws_624) given-kws_624))"
"((given-args_629)(if run?16_626(cdr given-args_625) given-args_625)))"
"(let-values(((self14_630)(if(pair? given-kws_628)(eq? '#:self(car given-kws_628)) #f)))"
"(let-values(((self5_631)(if self14_630(car given-args_629)(void)))"
"((given-kws_632)(if self14_630(cdr given-kws_628) given-kws_628))"
"((given-args_633)(if self14_630(cdr given-args_629) given-args_629)))"
"(let-values(((skip-variable-phase-level21_634)"
"(if(pair? given-kws_632)"
"(eq? '#:skip-variable-phase-level(car given-kws_632))"
" #f)))"
"(let-values(((skip-variable-phase-level12_635)"
"(if skip-variable-phase-level21_634(car given-args_633)(void)))"
"((given-kws_636)"
"(if skip-variable-phase-level21_634(cdr given-kws_632) given-kws_632))"
"((given-args_637)"
"(if skip-variable-phase-level21_634(cdr given-args_633) given-args_633)))"
"(let-values(((visit?17_638)"
"(if(pair? given-kws_636)(eq? '#:visit?(car given-kws_636)) #f)))"
"(let-values(((visit?8_639)(if visit?17_638(car given-args_637)(void)))"
"((given-kws_640)(if visit?17_638(cdr given-kws_636) given-kws_636))"
"((given-args_641)(if visit?17_638(cdr given-args_637) given-args_637)))"
"(let-values(((who13_642)(car given-args_641)))"
"(parse-and-perform-requires!28.1"
" copy-variable-as-constant?11_611"
" copy-variable-as-constant?20_610"
" copy-variable-phase-level10_615"
" copy-variable-phase-level19_614"
" declared-submodule-names9_619"
" declared-submodule-names18_618"
" run-phase6_623"
" run-phase15_622"
" run?7_627"
" run?16_626"
" self5_631"
" self14_630"
" skip-variable-phase-level12_635"
" skip-variable-phase-level21_634"
" visit?8_639"
" visit?17_638"
" who13_642"
" reqs23_605"
" orig-s24_606"
" m-ns25_607"
" phase-shift26_608"
" requires+provides27_609))))))))))))))))))))"
"(define-values"
"(parse-and-perform-requires!30.1)"
"(lifted/2.1$13"
"(lambda(given-kws_643 given-argc_644)"
"(if(= given-argc_644 7)"
"(subsets?"
" '(#:who)"
" given-kws_643"
" '(#:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:declared-submodule-names"
" #:run-phase"
" #:run?"
" #:self"
" #:skip-variable-phase-level"
" #:visit?"
" #:who))"
" #f))"
"(case-lambda"
"((given-kws_645 given-args_646 reqs_647 orig-s_648 m-ns_649 phase-shift_650 requires+provides_651)"
"(unpack29.1$1 given-kws_645 given-args_646 reqs_647 orig-s_648 m-ns_649 phase-shift_650 requires+provides_651)))"
" '(#:who)"
" '(#:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:declared-submodule-names"
" #:run-phase"
" #:run?"
" #:self"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_652)"
"(let-values(((lst_653) ids_652))"
"(begin"
"(if(list? lst_653)(void)(let-values()(in-list lst_653)))"
"((letrec-values(((for-loop_654)"
"(lambda(table_655 lst_656)"
"(if(pair? lst_656)"
"(let-values(((id_657)(unsafe-car lst_656)))"
"(let-values(((table_658)"
"(let-values(((table_659) table_655))"
"(let-values(((table_660)"
"(let-values()"
"(let-values(((key_661 val_662)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_657))"
" #t))))"
"(hash-set table_659 key_661 val_662)))))"
"(values table_660)))))"
"(for-loop_654 table_658(unsafe-cdr lst_656))))"
" table_655))))"
" for-loop_654)"
" '#hash()"
" lst_653)))))"
"(define-values"
"(lifted/6.1$5 lifted/7.1$5 lifted/8.1$5 lifted/9.1$5 lifted/10.1$5)"
"(make-struct-type"
" 'perform-initial-require!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'perform-initial-require!"
"(case-lambda"
"((self_663 mod-path_664 self_665 in-stx_666 m-ns_667 requires+provides_668)"
"(apply missing-kw self_663 mod-path_664 self_665 in-stx_666 m-ns_667 requires+provides_668 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_669 mod-path_670 self_671 in-stx_672 m-ns_673 requires+provides_674)"
"(apply missing-kw self_669 mod-path_670 self_671 in-stx_672 m-ns_673 requires+provides_674 null)))))"
"(define-values"
"(perform-initial-require!38.1)"
"(lambda(who31_675 mod-path33_676 self34_677 in-stx35_678 m-ns36_679 requires+provides37_680)"
"(let-values(((mod-path_681) mod-path33_676))"
"(let-values(((self_682) self34_677))"
"(let-values(((in-stx_683) in-stx35_678))"
"(let-values(((m-ns_684) m-ns36_679))"
"(let-values(((requires+provides_685) requires+provides37_680))"
"(let-values(((who_686) who31_675))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:192:2_687) perform-require!74.1)"
"((temp210_688)"
"(let-values(((mod-path221_699) mod-path_681)((self222_700) self_682))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi7.1))"
"(module-path->mpi5.1 #f #f mod-path221_699 self222_700)"
"(module-path->mpi7.1 mod-path221_699 self222_700))))"
"((temp211_689) #f)"
"((self212_690) self_682)"
"((in-stx213_691) in-stx_683)"
"((m-ns214_692) m-ns_684)"
"((temp215_693) 0)"
"((temp216_694) 0)"
"((requires+provides217_695) requires+provides_685)"
"((temp218_696) #t)"
"((temp219_697) #t)"
"((who220_698) who_686))"
"(if(variable-reference-constant?(#%variable-reference perform-require!74.1))"
"(perform-require!72.1"
" #f"
" #f"
" temp218_696"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp219_697"
" #t"
" #f"
" #f"
" temp215_693"
" requires+provides217_695"
" #t"
" temp216_694"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" who220_698"
" temp210_688"
" temp211_689"
" self212_690"
" in-stx213_691"
" m-ns214_692)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:192:2_687"
" keyword-procedure-extract"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase #:who)"
" 7)"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase #:who)"
"(list temp218_696 temp219_697 temp215_693 requires+provides217_695 temp216_694 who220_698)"
" temp210_688"
" temp211_689"
" self212_690"
" in-stx213_691"
" m-ns214_692))))))))))))"
"(define-values"
"(unpack39.1)"
"(lambda(given-kws_701 given-args_702 mod-path33_703 self34_704 in-stx35_705 m-ns36_706 requires+provides37_707)"
"(let-values(((who31_708)(car given-args_702)))"
"(perform-initial-require!38.1"
" who31_708"
" mod-path33_703"
" self34_704"
" in-stx35_705"
" m-ns36_706"
" requires+provides37_707))))"
"(define-values"
"(perform-initial-require!40.1)"
"(lifted/7.1$5"
"(lambda(given-kws_709 given-argc_710)"
"(if(= given-argc_710 7)"
"(let-values(((l2_711) given-kws_709))"
"(if(pair? l2_711)(if(eq?(car l2_711) '#:who)(null?(cdr l2_711)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_712 given-args_713 mod-path_714 self_715 in-stx_716 m-ns_717 requires+provides_718)"
"(unpack39.1 given-kws_712 given-args_713 mod-path_714 self_715 in-stx_716 m-ns_717 requires+provides_718)))"
" '(#:who)"
" '(#:who)))"
"(define-values"
"(lifted/11.1$3 lifted/12.1$3 lifted/13.1$3 lifted/14.1$3 lifted/15.1$3)"
"(make-struct-type"
" 'perform-require!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'perform-require!"
"(case-lambda"
"((self_719 mpi_720 orig-s_721 self_722 in-stx_723 m-ns_724)"
"(apply missing-kw self_719 mpi_720 orig-s_721 self_722 in-stx_723 m-ns_724 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_725 mpi_726 orig-s_727 self_728 in-stx_729 m-ns_730)"
"(apply missing-kw self_725 mpi_726 orig-s_727 self_728 in-stx_729 m-ns_730 null)))))"
"(define-values"
"(perform-require!72.1)"
"(lambda(adjust44_731"
" adjust57_732"
" can-be-shadowed?48_733"
" can-be-shadowed?61_734"
" copy-variable-as-constant?51_735"
" copy-variable-as-constant?64_736"
" copy-variable-phase-level50_737"
" copy-variable-phase-level63_738"
" initial-require?49_739"
" initial-require?62_740"
" just-meta43_741"
" just-meta56_742"
" phase-shift41_743"
" requires+provides45_744"
" requires+provides58_745"
" run-phase42_746"
" run?47_747"
" run?60_748"
" skip-variable-phase-level52_749"
" skip-variable-phase-level65_750"
" visit?46_751"
" visit?59_752"
" who53_753"
" mpi67_754"
" orig-s68_755"
" self69_756"
" in-stx70_757"
" m-ns71_758)"
"(let-values(((mpi_759) mpi67_754))"
"(let-values(((orig-s_760) orig-s68_755))"
"(let-values(((self_761) self69_756))"
"(let-values(((in-stx_762) in-stx70_757))"
"(let-values(((m-ns_763) m-ns71_758))"
"(let-values(((phase-shift_764) phase-shift41_743))"
"(let-values(((run-phase_765) run-phase42_746))"
"(let-values(((just-meta_766)(if just-meta56_742 just-meta43_741 'all)))"
"(let-values(((adjust_767)(if adjust57_732 adjust44_731 #f)))"
"(let-values(((requires+provides_768)(if requires+provides58_745 requires+provides45_744 #f)))"
"(let-values(((visit?_769)(if visit?59_752 visit?46_751 #t)))"
"(let-values(((run?_770)(if run?60_748 run?47_747 #f)))"
"(let-values(((can-be-shadowed?_771)(if can-be-shadowed?61_734 can-be-shadowed?48_733 #f)))"
"(let-values(((initial-require?_772)"
"(if initial-require?62_740 initial-require?49_739 #f)))"
"(let-values(((copy-variable-phase-level_773)"
"(if copy-variable-phase-level63_738 copy-variable-phase-level50_737 #f)))"
"(let-values(((copy-variable-as-constant?_774)"
"(if copy-variable-as-constant?64_736"
" copy-variable-as-constant?51_735"
" #f)))"
"(let-values(((skip-variable-phase-level_775)"
"(if skip-variable-phase-level65_750"
" skip-variable-phase-level52_749"
" #f)))"
"(let-values(((who_776) who53_753))"
"(let-values()"
"(let-values()"
"(let-values(((module-name_777)(1/module-path-index-resolve mpi_759 #t)))"
"(let-values(((bind-in-stx_778)"
"(if(adjust-rename? adjust_767)"
"(adjust-rename-to-id adjust_767)"
" in-stx_762)))"
"(let-values(((done-syms_779)(if adjust_767(make-hash) #f)))"
"(let-values(((m_780)(namespace->module m-ns_763 module-name_777)))"
"(let-values((()"
"(begin"
"(if m_780"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_777)))"
"(values))))"
"(let-values(((interned-mpi_781)"
"(if requires+provides_768"
"(add-required-module!"
" requires+provides_768"
" mpi_759"
" phase-shift_764"
"(module-cross-phase-persistent? m_780))"
" mpi_759)))"
"(let-values((()"
"(begin"
"(if visit?_769"
"(let-values()"
"(let-values(((...r/expand/require.rkt:234:5_787)"
" namespace-module-visit!104.1)"
"((m-ns236_788) m-ns_763)"
"((interned-mpi237_789)"
" interned-mpi_781)"
"((phase-shift238_790)"
" phase-shift_764)"
"((run-phase239_791)"
" run-phase_765))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!104.1))"
"(namespace-module-visit!102.1"
" run-phase239_791"
" #t"
" m-ns236_788"
" interned-mpi237_789"
" phase-shift238_790)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:234:5_787"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase239_791)"
" m-ns236_788"
" interned-mpi237_789"
" phase-shift238_790))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_770"
"(let-values()"
"(let-values(((...r/expand/require.rkt:236:5_792)"
" namespace-module-instantiate!96.1)"
"((m-ns240_793) m-ns_763)"
"((interned-mpi241_794)"
" interned-mpi_781)"
"((phase-shift242_795)"
" phase-shift_764)"
"((run-phase243_796)"
" run-phase_765))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" run-phase243_796"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns240_793"
" interned-mpi241_794"
" phase-shift242_795)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:236:5_792"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list run-phase243_796)"
" m-ns240_793"
" interned-mpi241_794"
" phase-shift242_795))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_797)"
" visit?_769))"
"(if or-part_797"
" or-part_797"
" run?_770)))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:239:5_798)"
" namespace-module-make-available!112.1)"
"((m-ns244_799) m-ns_763)"
"((interned-mpi245_800)"
" interned-mpi_781)"
"((phase-shift246_801)"
" phase-shift_764)"
"((run-phase247_802)"
" run-phase_765))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-make-available!112.1))"
"(namespace-module-make-available!110.1"
" run-phase247_802"
" #t"
" m-ns244_799"
" interned-mpi245_800"
" phase-shift246_801)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:239:5_798"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase247_802)"
" m-ns244_799"
" interned-mpi245_800"
" phase-shift246_801))))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_782)"
"(if(let-values(((or-part_803)"
"(not adjust_767)))"
"(if or-part_803"
" or-part_803"
"(let-values(((or-part_804)"
"(adjust-prefix?"
" adjust_767)))"
"(if or-part_804"
" or-part_804"
"(adjust-all-except?"
" adjust_767)))))"
"(not skip-variable-phase-level_775)"
" #f)))"
"(let-values(((bulk-prefix_783)"
"(if(adjust-prefix? adjust_767)"
"(let-values()"
"(adjust-prefix-sym adjust_767))"
"(if(adjust-all-except? adjust_767)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_767))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_784)"
"(if(adjust-all-except? adjust_767)"
"(let-values()"
"(adjust-all-except-syms adjust_767))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_785)"
"(if can-bulk-bind?_782"
"(box null)"
" #f)))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:252:3_805)"
" bind-all-provides!98.1)"
"((m223_806) m_780)"
"((bind-in-stx224_807)"
" bind-in-stx_778)"
"((phase-shift225_808)"
" phase-shift_764)"
"((m-ns226_809)"
" m-ns_763)"
"((interned-mpi227_810)"
" interned-mpi_781)"
"((orig-s228_811)"
" orig-s_760)"
"((temp229_812)"
"(if(adjust-only?"
" adjust_767)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_767)))"
"(if(adjust-rename?"
" adjust_767)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_767)))"
"(let-values()"
" #f))))"
"((just-meta230_813)"
" just-meta_766)"
"((can-bulk-bind?231_814)"
" can-bulk-bind?_782)"
"((bulk-prefix232_815)"
" bulk-prefix_783)"
"((bulk-excepts233_816)"
" bulk-excepts_784)"
"((temp234_817)"
"(if requires+provides_768"
"(if can-bulk-bind?_782"
"(lambda(provides_819"
" provide-phase-level_820)"
"(let-values(((...r/expand/require.rkt:268:23_821)"
" add-bulk-required-ids!55.1)"
"((requires+provides248_822)"
" requires+provides_768)"
"((bind-in-stx249_823)"
" bind-in-stx_778)"
"((temp250_824)"
"(module-self"
" m_780))"
"((mpi251_825)"
" mpi_759)"
"((phase-shift252_826)"
" phase-shift_764)"
"((provides253_827)"
" provides_819)"
"((provide-phase-level254_828)"
" provide-phase-level_820)"
"((bulk-prefix255_829)"
" bulk-prefix_783)"
"((bulk-excepts256_830)"
" bulk-excepts_784)"
"((temp257_831)"
"(if(positive?"
"(hash-count"
" bulk-excepts_784))"
" done-syms_779"
" #f))"
"((can-be-shadowed?258_832)"
" can-be-shadowed?_771)"
"((temp259_833)"
"(not"
" initial-require?_772))"
"((orig-s260_834)"
" orig-s_760)"
"((update-nominals-box261_835)"
" update-nominals-box_785)"
"((who262_836)"
" who_776))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-bulk-required-ids!55.1))"
"(add-bulk-required-ids!53.1"
" update-nominals-box261_835"
" can-be-shadowed?258_832"
" temp259_833"
" bulk-excepts256_830"
" orig-s260_834"
" bulk-prefix255_829"
" temp257_831"
" who262_836"
" requires+provides248_822"
" bind-in-stx249_823"
" temp250_824"
" mpi251_825"
" phase-shift252_826"
" provides253_827"
" provide-phase-level254_828)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:268:23_821"
" keyword-procedure-extract"
" '(#:accum-update-nominals"
" #:can-be-shadowed?"
" #:check-and-remove?"
" #:excepts"
" #:in"
" #:prefix"
" #:symbols-accum"
" #:who)"
" 9)"
" '(#:accum-update-nominals"
" #:can-be-shadowed?"
" #:check-and-remove?"
" #:excepts"
" #:in"
" #:prefix"
" #:symbols-accum"
" #:who)"
"(list"
" update-nominals-box261_835"
" can-be-shadowed?258_832"
" temp259_833"
" bulk-excepts256_830"
" orig-s260_834"
" bulk-prefix255_829"
" temp257_831"
" who262_836)"
" requires+provides248_822"
" bind-in-stx249_823"
" temp250_824"
" mpi251_825"
" phase-shift252_826"
" provides253_827"
" provide-phase-level254_828))))"
" #f)"
" #f))"
"((temp235_818)"
"(if(let-values(((or-part_837)"
"(not"
" can-bulk-bind?_782)))"
"(if or-part_837"
" or-part_837"
" copy-variable-phase-level_773))"
"(lambda(binding_838"
" as-transformer?_839)"
"(let-values(((sym_840)"
"(module-binding-nominal-sym"
" binding_838)))"
"(let-values(((provide-phase_841)"
"(module-binding-nominal-phase"
" binding_838)))"
"(let-values(((adjusted-sym_842)"
"(if(if skip-variable-phase-level_775"
"(if(not"
" as-transformer?_839)"
"(equal?"
" provide-phase_841"
" skip-variable-phase-level_775)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_767)"
"(let-values()"
" sym_840)"
"(if(adjust-only?"
" adjust_767)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_767)"
" sym_840)"
"(if(hash-set!"
" done-syms_779"
" sym_840"
" #t)"
" sym_840"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_767)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                      \"~a~a\""
"(adjust-prefix-sym"
" adjust_767)"
" sym_840)))"
"(if(adjust-all-except?"
" adjust_767)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_767)"
" sym_840)"
"(hash-set!"
" done-syms_779"
" sym_840"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                          \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_767)"
" sym_840))"
" #f))"
"(if(adjust-rename?"
" adjust_767)"
"(let-values()"
"(if(eq?"
" sym_840"
"(adjust-rename-from-sym"
" adjust_767))"
"(if(hash-set!"
" done-syms_779"
" sym_840"
" #t)"
"(adjust-rename-to-id"
" adjust_767)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_842"
" requires+provides_768"
" #f)"
"(let-values()"
"(let-values(((s_843)"
"(datum->syntax$1"
" bind-in-stx_778"
" adjusted-sym_842)))"
"(let-values(((bind-phase_844)"
"(phase+"
" phase-shift_764"
" provide-phase_841)))"
"(begin"
"(if initial-require?_772"
"(void)"
"(let-values()"
"(let-values(((...r/expand/require.rkt:315:20_845)"
" check-not-defined89.1)"
"((temp269_846)"
" #t)"
"((requires+provides270_847)"
" requires+provides_768)"
"((s271_848)"
" s_843)"
"((bind-phase272_849)"
" bind-phase_844)"
"((binding273_850)"
" binding_838)"
"((orig-s274_851)"
" orig-s_760)"
"((temp275_852)"
" #t)"
"((who276_853)"
" who_776))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined89.1))"
"(check-not-defined87.1"
" #f"
" #f"
" temp269_846"
" #t"
" orig-s274_851"
" temp275_852"
" #t"
" binding273_850"
" #t"
" who276_853"
" requires+provides270_847"
" s271_848"
" bind-phase272_849)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:315:20_845"
" keyword-procedure-extract"
" '(#:check-not-required?"
" #:in"
" #:remove-shadowed!?"
" #:unless-matches"
" #:who)"
" 5)"
" '(#:check-not-required?"
" #:in"
" #:remove-shadowed!?"
" #:unless-matches"
" #:who)"
"(list"
" temp269_846"
" orig-s274_851"
" temp275_852"
" binding273_850"
" who276_853)"
" requires+provides270_847"
" s271_848"
" bind-phase272_849)))))"
"(let-values(((...r/expand/require.rkt:322:18_854)"
" add-defined-or-required-id!15.1)"
"((requires+provides263_855)"
" requires+provides_768)"
"((s264_856)"
" s_843)"
"((bind-phase265_857)"
" bind-phase_844)"
"((binding266_858)"
" binding_838)"
"((can-be-shadowed?267_859)"
" can-be-shadowed?_771)"
"((as-transformer?268_860)"
" as-transformer?_839))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!15.1))"
"(add-defined-or-required-id!13.1"
" as-transformer?268_860"
" can-be-shadowed?267_859"
" #t"
" requires+provides263_855"
" s264_856"
" bind-phase265_857"
" binding266_858)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:322:18_854"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
" 6)"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
"(list"
" as-transformer?268_860"
" can-be-shadowed?267_859)"
" requires+provides263_855"
" s264_856"
" bind-phase265_857"
" binding266_858)))))))"
"(void))"
"(if(if adjusted-sym_842"
"(if copy-variable-phase-level_773"
"(if(not"
" as-transformer?_839)"
"(equal?"
" provide-phase_841"
" copy-variable-phase-level_773)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_763"
" adjusted-sym_842"
" binding_838"
" copy-variable-phase-level_773"
" phase-shift_764"
" copy-variable-as-constant?_774))"
"(void))"
" adjusted-sym_842)))))"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" bind-all-provides!98.1))"
"(bind-all-provides!96.1"
" temp234_817"
" bulk-excepts233_816"
" bulk-prefix232_815"
" can-bulk-bind?231_814"
" temp235_818"
" orig-s228_811"
" just-meta230_813"
" temp229_812"
" m223_806"
" bind-in-stx224_807"
" phase-shift225_808"
" m-ns226_809"
" interned-mpi227_810)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:252:3_805"
" keyword-procedure-extract"
" '(#:bulk-callback"
" #:bulk-excepts"
" #:bulk-prefix"
" #:can-bulk?"
" #:filter"
" #:in"
" #:just-meta"
" #:only)"
" 7)"
" '(#:bulk-callback"
" #:bulk-excepts"
" #:bulk-prefix"
" #:can-bulk?"
" #:filter"
" #:in"
" #:just-meta"
" #:only)"
"(list"
" temp234_817"
" bulk-excepts233_816"
" bulk-prefix232_815"
" can-bulk-bind?231_814"
" temp235_818"
" orig-s228_811"
" just-meta230_813"
" temp229_812)"
" m223_806"
" bind-in-stx224_807"
" phase-shift225_808"
" m-ns226_809"
" interned-mpi227_810)))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_785"
"(let-values()"
"(let-values(((lst_861)"
"(unbox"
" update-nominals-box_785)))"
"(begin"
"(if(list? lst_861)"
"(void)"
"(let-values()"
"(in-list lst_861)))"
"((letrec-values(((for-loop_862)"
"(lambda(fold-var_863"
" lst_864)"
"(if(pair?"
" lst_864)"
"(let-values(((update!_865)"
"(unsafe-car"
" lst_864)))"
"(let-values(((fold-var_866)"
"(let-values(((fold-var_867)"
" fold-var_863))"
"(let-values(((fold-var_868)"
"(let-values()"
"(begin"
"(let-values()"
"(update!_865))"
"(void)))))"
"(values"
" fold-var_868)))))"
"(for-loop_862"
" fold-var_866"
"(unsafe-cdr"
" lst_864))))"
" fold-var_863))))"
" for-loop_862)"
"(void)"
" lst_861))))"
"(void))"
"(values))))"
"(let-values(((need-syms_786)"
"(if(adjust-only? adjust_767)"
"(let-values()"
"(adjust-only-syms"
" adjust_767))"
"(if(adjust-all-except?"
" adjust_767)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_767))"
"(if(adjust-rename?"
" adjust_767)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_767)))"
"(let-values() #f))))))"
"(if(if need-syms_786"
"(not"
"(="
"(set-count need-syms_786)"
"(hash-count done-syms_779)))"
" #f)"
"(let-values()"
"(let-values(((ht_869) need-syms_786))"
"(begin"
"(if((lambda(ht_870)"
"(if(hash? ht_870)"
"(immutable? ht_870)"
" #f))"
" ht_869)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_869)))"
"((letrec-values(((for-loop_871)"
"(lambda(fold-var_872"
" i_873)"
"(if i_873"
"(let-values(((sym_874)"
"(unsafe-immutable-hash-iterate-key"
" ht_869"
" i_873)))"
"(let-values(((fold-var_875)"
"(let-values(((fold-var_876)"
" fold-var_872))"
"(let-values(((fold-var_877)"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_779"
" sym_874"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_776"
"                                                                                                                                                     \"not in nested spec\""
" orig-s_760"
" sym_874))))"
"(void)))))"
"(values"
" fold-var_877)))))"
"(for-loop_871"
" fold-var_875"
"(unsafe-immutable-hash-iterate-next"
" ht_869"
" i_873))))"
" fold-var_872))))"
" for-loop_871)"
"(void)"
"(unsafe-immutable-hash-iterate-first"
" ht_869)))))"
"(void))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack73.1)"
"(lambda(given-kws_878 given-args_879 mpi67_880 orig-s68_881 self69_882 in-stx70_883 m-ns71_884)"
"(let-values(((adjust57_885)(if(pair? given-kws_878)(eq? '#:adjust(car given-kws_878)) #f)))"
"(let-values(((adjust44_886)(if adjust57_885(car given-args_879)(void)))"
"((given-kws_887)(if adjust57_885(cdr given-kws_878) given-kws_878))"
"((given-args_888)(if adjust57_885(cdr given-args_879) given-args_879)))"
"(let-values(((can-be-shadowed?61_889)"
"(if(pair? given-kws_887)(eq? '#:can-be-shadowed?(car given-kws_887)) #f)))"
"(let-values(((can-be-shadowed?48_890)(if can-be-shadowed?61_889(car given-args_888)(void)))"
"((given-kws_891)(if can-be-shadowed?61_889(cdr given-kws_887) given-kws_887))"
"((given-args_892)(if can-be-shadowed?61_889(cdr given-args_888) given-args_888)))"
"(let-values(((copy-variable-as-constant?64_893)"
"(if(pair? given-kws_891)(eq? '#:copy-variable-as-constant?(car given-kws_891)) #f)))"
"(let-values(((copy-variable-as-constant?51_894)"
"(if copy-variable-as-constant?64_893(car given-args_892)(void)))"
"((given-kws_895)(if copy-variable-as-constant?64_893(cdr given-kws_891) given-kws_891))"
"((given-args_896)(if copy-variable-as-constant?64_893(cdr given-args_892) given-args_892)))"
"(let-values(((copy-variable-phase-level63_897)"
"(if(pair? given-kws_895)(eq? '#:copy-variable-phase-level(car given-kws_895)) #f)))"
"(let-values(((copy-variable-phase-level50_898)"
"(if copy-variable-phase-level63_897(car given-args_896)(void)))"
"((given-kws_899)(if copy-variable-phase-level63_897(cdr given-kws_895) given-kws_895))"
"((given-args_900)"
"(if copy-variable-phase-level63_897(cdr given-args_896) given-args_896)))"
"(let-values(((initial-require?62_901)"
"(if(pair? given-kws_899)(eq? '#:initial-require?(car given-kws_899)) #f)))"
"(let-values(((initial-require?49_902)(if initial-require?62_901(car given-args_900)(void)))"
"((given-kws_903)(if initial-require?62_901(cdr given-kws_899) given-kws_899))"
"((given-args_904)(if initial-require?62_901(cdr given-args_900) given-args_900)))"
"(let-values(((just-meta56_905)"
"(if(pair? given-kws_903)(eq? '#:just-meta(car given-kws_903)) #f)))"
"(let-values(((just-meta43_906)(if just-meta56_905(car given-args_904)(void)))"
"((given-kws_907)(if just-meta56_905(cdr given-kws_903) given-kws_903))"
"((given-args_908)(if just-meta56_905(cdr given-args_904) given-args_904)))"
"(let-values(((phase-shift41_909)(car given-args_908))"
"((given-kws_910)(cdr given-kws_907))"
"((given-args_911)(cdr given-args_908)))"
"(let-values(((requires+provides58_912)"
"(if(pair? given-kws_910)"
"(eq? '#:requires+provides(car given-kws_910))"
" #f)))"
"(let-values(((requires+provides45_913)"
"(if requires+provides58_912(car given-args_911)(void)))"
"((given-kws_914)"
"(if requires+provides58_912(cdr given-kws_910) given-kws_910))"
"((given-args_915)"
"(if requires+provides58_912(cdr given-args_911) given-args_911)))"
"(let-values(((run-phase42_916)(car given-args_915))"
"((given-kws_917)(cdr given-kws_914))"
"((given-args_918)(cdr given-args_915)))"
"(let-values(((run?60_919)"
"(if(pair? given-kws_917)(eq? '#:run?(car given-kws_917)) #f)))"
"(let-values(((run?47_920)(if run?60_919(car given-args_918)(void)))"
"((given-kws_921)(if run?60_919(cdr given-kws_917) given-kws_917))"
"((given-args_922)"
"(if run?60_919(cdr given-args_918) given-args_918)))"
"(let-values(((skip-variable-phase-level65_923)"
"(if(pair? given-kws_921)"
"(eq? '#:skip-variable-phase-level(car given-kws_921))"
" #f)))"
"(let-values(((skip-variable-phase-level52_924)"
"(if skip-variable-phase-level65_923"
"(car given-args_922)"
"(void)))"
"((given-kws_925)"
"(if skip-variable-phase-level65_923"
"(cdr given-kws_921)"
" given-kws_921))"
"((given-args_926)"
"(if skip-variable-phase-level65_923"
"(cdr given-args_922)"
" given-args_922)))"
"(let-values(((visit?59_927)"
"(if(pair? given-kws_925)"
"(eq? '#:visit?(car given-kws_925))"
" #f)))"
"(let-values(((visit?46_928)"
"(if visit?59_927(car given-args_926)(void)))"
"((given-kws_929)"
"(if visit?59_927(cdr given-kws_925) given-kws_925))"
"((given-args_930)"
"(if visit?59_927(cdr given-args_926) given-args_926)))"
"(let-values(((who53_931)(car given-args_930)))"
"(perform-require!72.1"
" adjust44_886"
" adjust57_885"
" can-be-shadowed?48_890"
" can-be-shadowed?61_889"
" copy-variable-as-constant?51_894"
" copy-variable-as-constant?64_893"
" copy-variable-phase-level50_898"
" copy-variable-phase-level63_897"
" initial-require?49_902"
" initial-require?62_901"
" just-meta43_906"
" just-meta56_905"
" phase-shift41_909"
" requires+provides45_913"
" requires+provides58_912"
" run-phase42_916"
" run?47_920"
" run?60_919"
" skip-variable-phase-level52_924"
" skip-variable-phase-level65_923"
" visit?46_928"
" visit?59_927"
" who53_931"
" mpi67_880"
" orig-s68_881"
" self69_882"
" in-stx70_883"
" m-ns71_884))))))))))))))))))))))))))"
"(define-values"
"(perform-require!74.1)"
"(lifted/12.1$3"
"(lambda(given-kws_932 given-argc_933)"
"(if(= given-argc_933 7)"
"(subsets?"
" '(#:phase-shift #:run-phase #:who)"
" given-kws_932"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who))"
" #f))"
"(case-lambda"
"((given-kws_934 given-args_935 mpi_936 orig-s_937 self_938 in-stx_939 m-ns_940)"
"(unpack73.1 given-kws_934 given-args_935 mpi_936 orig-s_937 self_938 in-stx_939 m-ns_940)))"
" '(#:phase-shift #:run-phase #:who)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)))"
"(define-values"
"(lifted/16.1$2 lifted/17.1$2 lifted/18.1$2 lifted/19.1$2 lifted/20.1$2)"
"(make-struct-type"
" 'bind-all-provides!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'bind-all-provides!"
"(case-lambda"
"((self_941 m_942 in-stx_943 phase-shift_944 ns_945 mpi_946)"
"(apply missing-kw self_941 m_942 in-stx_943 phase-shift_944 ns_945 mpi_946 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_947 m_948 in-stx_949 phase-shift_950 ns_951 mpi_952)"
"(apply missing-kw self_947 m_948 in-stx_949 phase-shift_950 ns_951 mpi_952 null)))))"
"(define-values"
"(bind-all-provides!96.1)"
"(lambda(bulk-callback82_953"
" bulk-excepts80_954"
" bulk-prefix79_955"
" can-bulk?78_956"
" filter81_957"
" in75_958"
" just-meta77_959"
" only76_960"
" m91_961"
" in-stx92_962"
" phase-shift93_963"
" ns94_964"
" mpi95_965)"
"(let-values(((m_966) m91_961))"
"(let-values(((in-stx_967) in-stx92_962))"
"(let-values(((phase-shift_968) phase-shift93_963))"
"(let-values(((ns_969) ns94_964))"
"(let-values(((mpi_970) mpi95_965))"
"(let-values(((orig-s_971) in75_958))"
"(let-values(((only-syms_972) only76_960))"
"(let-values(((just-meta_973) just-meta77_959))"
"(let-values(((can-bulk?_974) can-bulk?78_956))"
"(let-values(((bulk-prefix_975) bulk-prefix79_955))"
"(let-values(((bulk-excepts_976) bulk-excepts80_954))"
"(let-values(((filter_977) filter81_957))"
"(let-values(((bulk-callback_978) bulk-callback82_953))"
"(let-values()"
"(let-values(((self_979)(module-self m_966)))"
"(let-values(((ht_980)(module-provides m_966)))"
"(begin"
"(if((lambda(ht_981)(hash? ht_981)) ht_980)"
"(void)"
"(let-values()(default-in-hash ht_980)))"
"((letrec-values(((for-loop_982)"
"(lambda(fold-var_983 i_984)"
"(if i_984"
"(let-values(((provide-phase-level_985 provides_986)"
"(hash-iterate-key+value ht_980 i_984)))"
"(let-values(((fold-var_987)"
"(let-values(((fold-var_988) fold-var_983))"
"(if(let-values(((or-part_989)"
"(eq?"
" just-meta_973"
" 'all)))"
"(if or-part_989"
" or-part_989"
"(eqv?"
" just-meta_973"
" provide-phase-level_985)))"
"(let-values(((fold-var_990)"
" fold-var_988))"
"(let-values(((fold-var_991)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_992)"
"(phase+"
" phase-shift_968"
" provide-phase-level_985)))"
"(begin"
"(if bulk-callback_978"
"(let-values()"
"(bulk-callback_978"
" provides_986"
" provide-phase-level_985))"
"(void))"
"(if filter_977"
"(let-values()"
"(let-values(((lst_993)"
"(let-values(((or-part_994)"
" only-syms_972))"
"(if or-part_994"
" or-part_994"
"(hash-keys"
" provides_986)))))"
"(begin"
"(if(list?"
" lst_993)"
"(void)"
"(let-values()"
"(in-list"
" lst_993)))"
"((letrec-values(((for-loop_995)"
"(lambda(fold-var_996"
" lst_997)"
"(if(pair?"
" lst_997)"
"(let-values(((sym_998)"
"(unsafe-car"
" lst_997)))"
"(let-values(((fold-var_999)"
"(let-values(((fold-var_1000)"
" fold-var_996))"
"(let-values(((fold-var_1001)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_1002)"
"(hash-ref"
" provides_986"
" sym_998"
" #f)))"
"(if binding/p_1002"
"(let-values()"
"(let-values(((b_1003)"
"(let-values(((...r/expand/require.rkt:374:20_1004)"
" provide-binding-to-require-binding13.1)"
"((binding/p277_1005)"
" binding/p_1002)"
"((sym278_1006)"
" sym_998)"
"((self279_1007)"
" self_979)"
"((mpi280_1008)"
" mpi_970)"
"((provide-phase-level281_1009)"
" provide-phase-level_985)"
"((phase-shift282_1010)"
" phase-shift_968))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" mpi280_1008"
" phase-shift282_1010"
" provide-phase-level281_1009"
" self279_1007"
" binding/p277_1005"
" sym278_1006)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:374:20_1004"
" keyword-procedure-extract"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
" 4)"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
"(list"
" mpi280_1008"
" phase-shift282_1010"
" provide-phase-level281_1009"
" self279_1007)"
" binding/p277_1005"
" sym278_1006)))))"
"(let-values(((sym_1011)"
"(filter_977"
" b_1003"
"(provided-as-transformer?"
" binding/p_1002))))"
"(if(if sym_1011"
"(not"
" can-bulk?_974)"
" #f)"
"(let-values()"
"(let-values(((temp283_1012)"
"(datum->syntax$1"
" in-stx_967"
" sym_1011))"
"((b284_1013)"
" b_1003)"
"((phase285_1014)"
" phase_992))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!19.1))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" temp283_1012"
" b284_1013"
" phase285_1014)"
"(add-binding!19.1"
" temp283_1012"
" b284_1013"
" phase285_1014))))"
"(void)))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_1001)))))"
"(for-loop_995"
" fold-var_999"
"(unsafe-cdr"
" lst_997))))"
" fold-var_996))))"
" for-loop_995)"
"(void)"
" lst_993))))"
"(void))"
"(if can-bulk?_974"
"(let-values()"
"(let-values(((...r/expand/require.rkt:386:6_1015)"
" add-bulk-binding!27.1)"
"((in-stx286_1016)"
" in-stx_967)"
"((temp287_1017)"
"(bulk-binding14.1"
"(if(not"
" bulk-prefix_975)"
"(if(zero?"
"(hash-count"
" bulk-excepts_976))"
" provides_986"
" #f)"
" #f)"
" bulk-prefix_975"
" bulk-excepts_976"
" self_979"
" mpi_970"
" provide-phase-level_985"
" phase-shift_968"
"(namespace-bulk-binding-registry"
" ns_969)))"
"((phase288_1018)"
" phase_992)"
"((orig-s289_1019)"
" orig-s_971))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-bulk-binding!27.1))"
"(add-bulk-binding!25.1"
" orig-s289_1019"
" #t"
" in-stx286_1016"
" temp287_1017"
" phase288_1018)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:386:6_1015"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s289_1019)"
" in-stx286_1016"
" temp287_1017"
" phase288_1018))))"
"(void)))))"
"(void)))))"
"(values fold-var_991)))"
" fold-var_988))))"
"(for-loop_982"
" fold-var_987"
"(hash-iterate-next ht_980 i_984))))"
" fold-var_983))))"
" for-loop_982)"
"(void)"
"(hash-iterate-first ht_980)))))))))))))))))))))"
"(define-values"
"(unpack97.1)"
"(lambda(given-kws_1020 given-args_1021 m91_1022 in-stx92_1023 phase-shift93_1024 ns94_1025 mpi95_1026)"
"(let-values(((bulk-callback82_1027)(car given-args_1021))"
"((given-kws_1028)(cdr given-kws_1020))"
"((given-args_1029)(cdr given-args_1021)))"
"(let-values(((bulk-excepts80_1030)(car given-args_1029))"
"((given-kws_1031)(cdr given-kws_1028))"
"((given-args_1032)(cdr given-args_1029)))"
"(let-values(((bulk-prefix79_1033)(car given-args_1032))"
"((given-kws_1034)(cdr given-kws_1031))"
"((given-args_1035)(cdr given-args_1032)))"
"(let-values(((can-bulk?78_1036)(car given-args_1035))"
"((given-kws_1037)(cdr given-kws_1034))"
"((given-args_1038)(cdr given-args_1035)))"
"(let-values(((filter81_1039)(car given-args_1038))"
"((given-kws_1040)(cdr given-kws_1037))"
"((given-args_1041)(cdr given-args_1038)))"
"(let-values(((in75_1042)(car given-args_1041))"
"((given-kws_1043)(cdr given-kws_1040))"
"((given-args_1044)(cdr given-args_1041)))"
"(let-values(((just-meta77_1045)(car given-args_1044))"
"((given-kws_1046)(cdr given-kws_1043))"
"((given-args_1047)(cdr given-args_1044)))"
"(let-values(((only76_1048)(car given-args_1047)))"
"(bind-all-provides!96.1"
" bulk-callback82_1027"
" bulk-excepts80_1030"
" bulk-prefix79_1033"
" can-bulk?78_1036"
" filter81_1039"
" in75_1042"
" just-meta77_1045"
" only76_1048"
" m91_1022"
" in-stx92_1023"
" phase-shift93_1024"
" ns94_1025"
" mpi95_1026)))))))))))"
"(define-values"
"(bind-all-provides!98.1)"
"(lifted/17.1$2"
"(lambda(given-kws_1049 given-argc_1050)"
"(if(= given-argc_1050 7)"
"(let-values(((l2_1051) given-kws_1049))"
"(if(pair? l2_1051)"
"(if(eq?(car l2_1051) '#:bulk-callback)"
"(let-values(((l2_1052)(cdr l2_1051)))"
"(if(pair? l2_1052)"
"(if(eq?(car l2_1052) '#:bulk-excepts)"
"(let-values(((l2_1053)(cdr l2_1052)))"
"(if(pair? l2_1053)"
"(if(eq?(car l2_1053) '#:bulk-prefix)"
"(let-values(((l2_1054)(cdr l2_1053)))"
"(if(pair? l2_1054)"
"(if(eq?(car l2_1054) '#:can-bulk?)"
"(let-values(((l2_1055)(cdr l2_1054)))"
"(if(pair? l2_1055)"
"(if(eq?(car l2_1055) '#:filter)"
"(let-values(((l2_1056)(cdr l2_1055)))"
"(if(pair? l2_1056)"
"(if(eq?(car l2_1056) '#:in)"
"(let-values(((l2_1057)(cdr l2_1056)))"
"(if(pair? l2_1057)"
"(if(eq?(car l2_1057) '#:just-meta)"
"(let-values(((l2_1058)(cdr l2_1057)))"
"(if(pair? l2_1058)"
"(if(eq?(car l2_1058) '#:only)(null?(cdr l2_1058)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1059 given-args_1060 m_1061 in-stx_1062 phase-shift_1063 ns_1064 mpi_1065)"
"(unpack97.1 given-kws_1059 given-args_1060 m_1061 in-stx_1062 phase-shift_1063 ns_1064 mpi_1065)))"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_1066)"
"(let-values(((rebuild-req_1067)"
"(lambda(req_1069 new-req_1070)(datum->syntax$1 req_1069 new-req_1070 req_1069 req_1069))))"
"(letrec-values(((loop_1068)"
"(lambda(shifted?_1071)"
"(lambda(req_1072)"
"(let-values(((fm_1073)"
"(if(pair?(syntax-e$1 req_1072))"
"(if(identifier?(car(syntax-e$1 req_1072)))"
"(syntax-e$1(car(syntax-e$1 req_1072)))"
" #f)"
" #f)))"
"(let-values(((tmp_1074) fm_1073))"
"(if(equal? tmp_1074 'for-meta)"
"(let-values()"
"(let-values(((ok?_1075 for-meta290_1076 phase-level291_1077 spec292_1078)"
"(let-values(((s_1092) req_1072))"
"(let-values(((orig-s_1093) s_1092))"
"(let-values(((for-meta290_1094 phase-level291_1095 spec292_1096)"
"(let-values(((s_1097)"
"(if(syntax?$1 s_1092)"
"(syntax-e$1 s_1092)"
" s_1092)))"
"(if(pair? s_1097)"
"(let-values(((for-meta293_1098)"
"(let-values(((s_1101)"
"(car s_1097)))"
" s_1101))"
"((phase-level294_1099 spec295_1100)"
"(let-values(((s_1102)"
"(cdr s_1097)))"
"(let-values(((s_1103)"
"(if(syntax?$1"
" s_1102)"
"(syntax-e$1"
" s_1102)"
" s_1102)))"
"(if(pair? s_1103)"
"(let-values(((phase-level296_1104)"
"(let-values(((s_1106)"
"(car"
" s_1103)))"
" s_1106))"
"((spec297_1105)"
"(let-values(((s_1107)"
"(cdr"
" s_1103)))"
"(let-values(((s_1108)"
"(if(syntax?$1"
" s_1107)"
"(syntax-e$1"
" s_1107)"
" s_1107)))"
"(let-values(((flat-s_1109)"
"(to-syntax-list.1"
" s_1108)))"
"(if(not"
" flat-s_1109)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_1093))"
"(let-values()"
" flat-s_1109)))))))"
"(values"
" phase-level296_1104"
" spec297_1105))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1093))))))"
"(values"
" for-meta293_1098"
" phase-level294_1099"
" spec295_1100))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1093)))))"
"(values"
" #t"
" for-meta290_1094"
" phase-level291_1095"
" spec292_1096))))))"
"(let-values(((p_1091)(syntax-e$1 phase-level291_1077)))"
"(begin"
"(if(phase? p_1091)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_1072)))"
"(rebuild-req_1067"
" req_1072"
"(list*"
" for-meta290_1076"
"(phase+ p_1091 1)"
"(map2(loop_1068 #t) spec292_1078)))))))"
"(if(equal? tmp_1074 'for-syntax)"
"(let-values()"
"(let-values(((ok?_1110 for-syntax298_1111 spec299_1112)"
"(let-values(((s_1123) req_1072))"
"(let-values(((orig-s_1124) s_1123))"
"(let-values(((for-syntax298_1125 spec299_1126)"
"(let-values(((s_1127)"
"(if(syntax?$1 s_1123)"
"(syntax-e$1 s_1123)"
" s_1123)))"
"(if(pair? s_1127)"
"(let-values(((for-syntax300_1128)"
"(let-values(((s_1130)"
"(car s_1127)))"
" s_1130))"
"((spec301_1129)"
"(let-values(((s_1131)"
"(cdr s_1127)))"
"(let-values(((s_1132)"
"(if(syntax?$1"
" s_1131)"
"(syntax-e$1"
" s_1131)"
" s_1131)))"
"(let-values(((flat-s_1133)"
"(to-syntax-list.1"
" s_1132)))"
"(if(not flat-s_1133)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_1124))"
"(let-values()"
" flat-s_1133)))))))"
"(values for-syntax300_1128 spec301_1129))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1124)))))"
"(values #t for-syntax298_1125 spec299_1126))))))"
"(rebuild-req_1067"
" req_1072"
"(list* 'for-meta 2(map2(loop_1068 #t) spec299_1112)))))"
"(if(equal? tmp_1074 'for-template)"
"(let-values()"
"(let-values(((ok?_1134 for-template302_1135 spec303_1136)"
"(let-values(((s_1147) req_1072))"
"(let-values(((orig-s_1148) s_1147))"
"(let-values(((for-template302_1149 spec303_1150)"
"(let-values(((s_1151)"
"(if(syntax?$1 s_1147)"
"(syntax-e$1 s_1147)"
" s_1147)))"
"(if(pair? s_1151)"
"(let-values(((for-template304_1152)"
"(let-values(((s_1154)"
"(car s_1151)))"
" s_1154))"
"((spec305_1153)"
"(let-values(((s_1155)"
"(cdr s_1151)))"
"(let-values(((s_1156)"
"(if(syntax?$1"
" s_1155)"
"(syntax-e$1"
" s_1155)"
" s_1155)))"
"(let-values(((flat-s_1157)"
"(to-syntax-list.1"
" s_1156)))"
"(if(not flat-s_1157)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1148))"
"(let-values()"
" flat-s_1157)))))))"
"(values for-template304_1152 spec305_1153))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_1148)))))"
"(values #t for-template302_1149 spec303_1150))))))"
"(rebuild-req_1067"
" req_1072"
"(list* 'for-meta 0(map2(loop_1068 #t) spec303_1136)))))"
"(if(equal? tmp_1074 'for-label)"
"(let-values()"
"(let-values(((ok?_1158 for-label306_1159 spec307_1160)"
"(let-values(((s_1171) req_1072))"
"(let-values(((orig-s_1172) s_1171))"
"(let-values(((for-label306_1173 spec307_1174)"
"(let-values(((s_1175)"
"(if(syntax?$1 s_1171)"
"(syntax-e$1 s_1171)"
" s_1171)))"
"(if(pair? s_1175)"
"(let-values(((for-label308_1176)"
"(let-values(((s_1178)"
"(car s_1175)))"
" s_1178))"
"((spec309_1177)"
"(let-values(((s_1179)"
"(cdr s_1175)))"
"(let-values(((s_1180)"
"(if(syntax?$1"
" s_1179)"
"(syntax-e$1"
" s_1179)"
" s_1179)))"
"(let-values(((flat-s_1181)"
"(to-syntax-list.1"
" s_1180)))"
"(if(not flat-s_1181)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1172))"
"(let-values()"
" flat-s_1181)))))))"
"(values for-label308_1176 spec309_1177))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1172)))))"
"(values #t for-label306_1173 spec307_1174))))))"
"(rebuild-req_1067"
" req_1072"
"(list* for-label306_1159(map2(loop_1068 #t) spec307_1160)))))"
"(if(equal? tmp_1074 'just-meta)"
"(let-values()"
"(let-values(((ok?_1182 just-meta310_1183 phase-level311_1184 spec312_1185)"
"(let-values(((s_1198) req_1072))"
"(let-values(((orig-s_1199) s_1198))"
"(let-values(((just-meta310_1200"
" phase-level311_1201"
" spec312_1202)"
"(let-values(((s_1203)"
"(if(syntax?$1 s_1198)"
"(syntax-e$1 s_1198)"
" s_1198)))"
"(if(pair? s_1203)"
"(let-values(((just-meta313_1204)"
"(let-values(((s_1207)"
"(car"
" s_1203)))"
" s_1207))"
"((phase-level314_1205"
" spec315_1206)"
"(let-values(((s_1208)"
"(cdr"
" s_1203)))"
"(let-values(((s_1209)"
"(if(syntax?$1"
" s_1208)"
"(syntax-e$1"
" s_1208)"
" s_1208)))"
"(if(pair? s_1209)"
"(let-values(((phase-level316_1210)"
"(let-values(((s_1212)"
"(car"
" s_1209)))"
" s_1212))"
"((spec317_1211)"
"(let-values(((s_1213)"
"(cdr"
" s_1209)))"
"(let-values(((s_1214)"
"(if(syntax?$1"
" s_1213)"
"(syntax-e$1"
" s_1213)"
" s_1213)))"
"(let-values(((flat-s_1215)"
"(to-syntax-list.1"
" s_1214)))"
"(if(not"
" flat-s_1215)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                            \"bad syntax\""
" orig-s_1199))"
"(let-values()"
" flat-s_1215)))))))"
"(values"
" phase-level316_1210"
" spec317_1211))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1199))))))"
"(values"
" just-meta313_1204"
" phase-level314_1205"
" spec315_1206))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1199)))))"
"(values"
" #t"
" just-meta310_1200"
" phase-level311_1201"
" spec312_1202))))))"
"(rebuild-req_1067"
" req_1072"
"(list*"
" just-meta310_1183"
" phase-level311_1184"
"(map2(loop_1068 #f) spec312_1185)))))"
"(let-values()"
"(if shifted?_1071"
" req_1072"
"(datum->syntax$1 #f(list 'for-syntax req_1072)))))))))))))))"
"((loop_1068 #f) req_1066)))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_1216 adjusted-sym_1217 binding_1218 phase-level_1219 phase-shift_1220 as-constant?_1221)"
"(let-values(((i-ns_1222)"
"(let-values(((...r/expand/require.rkt:437:15_1224) namespace->module-namespace82.1)"
"((m-ns318_1225) m-ns_1216)"
"((temp319_1226)(1/module-path-index-resolve(module-binding-module binding_1218)))"
"((temp320_1227)(phase-(module-binding-phase binding_1218) phase-level_1219))"
"((temp321_1228) #t))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp321_1228"
" #t"
" #f"
" #f"
" m-ns318_1225"
" temp319_1226"
" temp320_1227)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:437:15_1224"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp321_1228)"
" m-ns318_1225"
" temp319_1226"
" temp320_1227)))))"
"(let-values(((val_1223)"
"(namespace-get-variable"
" i-ns_1222"
"(module-binding-phase binding_1218)"
"(module-binding-sym binding_1218)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                          \"namespace mismatch;\\n\""
"                          \" variable not found\\n\""
"                          \"  variable name: ~s\\n\""
"                          \"  phase level: ~s\")"
"(module-binding-sym binding_1218)"
"(module-binding-phase binding_1218)))))))"
"(namespace-set-variable!"
" m-ns_1216"
"(phase+ phase-shift_1220 phase-level_1219)"
" adjusted-sym_1217"
" val_1223"
" as-constant?_1221)))))"
"(void)"
"(void)"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" top-level-bind!-id"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans-val_7)"
"(let-values(((phase_8)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_9)"
"(let-values(((...p-level-instance.rkt:25:15_10) make-module-binding24.1)"
"((mpi4_11) mpi_2)"
"((phase5_12) phase_8)"
"((sym6_13) sym_6)"
"((temp7_14)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" temp7_14"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi4_11"
" phase5_12"
" sym6_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:25:15_10"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list temp7_14)"
" mpi4_11"
" phase5_12"
" sym6_13)))))"
"(begin"
"(let-values(((id1_15) id_1)((b2_16) b_9)((phase3_17) phase_8))"
"(if(variable-reference-constant?(#%variable-reference add-binding!19.1))"
"(add-binding!17.1 #f #f #f #f id1_15 b2_16 phase3_17)"
"(add-binding!19.1 id1_15 b2_16 phase3_17)))"
"(if trans-val_7(let-values()(maybe-install-free=id! trans-val_7 id_1 phase_8))(void))))))"
" top-level-require!-id"
"(lambda(stx_18 ns_19)"
"(let-values(((reqs_20)(cdr(syntax->list$1 stx_18))))"
"(let-values(((...p-level-instance.rkt:35:5_21) parse-and-perform-requires!30.1)"
"((temp8_22) #t)"
"((temp9_23) #f)"
"((reqs10_24) reqs_20)"
"((temp11_25) #f)"
"((ns12_26) ns_19)"
"((temp13_27)(namespace-phase ns_19))"
"((temp14_28)(make-requires+provides #f))"
"((temp15_29) 'require))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_22"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp9_23"
" #t"
" temp15_29"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:35:5_21"
" keyword-procedure-extract"
" '(#:run? #:visit? #:who)"
" 7)"
" '(#:run? #:visit? #:who)"
"(list temp8_22 temp9_23 temp15_29)"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)))))))"
"(void)"
"(void)"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_1 data-linklet_2 ns_3)"
"(let-values(((data-instance_4)"
"(1/instantiate-linklet"
" data-linklet_2"
"(list"
" deserialize-instance"
"(let-values(((...r/eval/multi-top.rkt:17:31_14) make-eager-instance-instance13.1)"
"((ns1_15) ns_3)"
"((temp2_16)(namespace-phase ns_3))"
"((temp3_17)(namespace-mpi ns_3))"
"((temp4_18)(namespace-bulk-binding-registry ns_3))"
"((temp5_19)(current-code-inspector)))"
"(if(variable-reference-constant?(#%variable-reference make-eager-instance-instance13.1))"
"(make-eager-instance-instance11.1 temp4_18 temp2_16 temp5_19 ns1_15 temp3_17)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/eval/multi-top.rkt:17:31_14"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" 2)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
"(list temp4_18 temp2_16 temp5_19 ns1_15 temp3_17))))))))"
"(let-values(((data_5)(lambda(key_20)(1/instance-variable-value data-instance_4 key_20))))"
"(let-values(((mpi-vector_6)(data_5 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_7)(data_5 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_8)(data_5 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_9)(data_5 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_10)(data_5 'syntax-literals)))"
"(let-values(((syntax-literals-trees_11)(data_5 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_12)(extract-namespace-scopes ns_3)))"
"(letrec-values(((construct-compiled-in-memory_13)"
"(lambda(ld_21"
" mpi-vector-tree_22"
" phase-to-link-modules-tree_23"
" syntax-literals-tree_24)"
"(let-values(((is-module?_25)"
"(let-values(((or-part_31)(1/linklet-bundle? ld_21)))"
"(if or-part_31"
" or-part_31"
"(let-values(((b_32)"
"(hash-ref"
"(1/linklet-directory->hash ld_21)"
" #f"
" #f)))"
"(if b_32"
"(hash-ref(1/linklet-bundle->hash b_32) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_26)(vector-ref mpi-vector-tree_22 0)))"
"(let-values(((syntax-literals-spec_27)"
"(vector-ref syntax-literals-tree_24 0)))"
"(let-values(((pres_28)"
"(if is-module?_25"
"(extract-submodules ld_21 'pre)"
"(compiled-top->compiled-tops ld_21))))"
"(let-values(((posts_29)"
"(if is-module?_25"
"(extract-submodules ld_21 'post)"
" null)))"
"(let-values(((map-construct-compiled-in-memory_30)"
"(lambda(l_33 vec-pos_34)"
"(alt-reverse"
"(let-values(((lst_35) l_33)"
"((lst_36)"
"(vector-ref"
" mpi-vector-tree_22"
" vec-pos_34))"
"((lst_37)"
"(vector-ref"
" phase-to-link-modules-tree_23"
" vec-pos_34))"
"((lst_38)"
"(vector-ref"
" syntax-literals-tree_24"
" vec-pos_34)))"
"(begin"
"(if(list? lst_35)"
"(void)"
"(let-values()(in-list lst_35)))"
"(if(list? lst_36)"
"(void)"
"(let-values()(in-list lst_36)))"
"(if(list? lst_37)"
"(void)"
"(let-values()(in-list lst_37)))"
"(if(list? lst_38)"
"(void)"
"(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40"
" lst_41"
" lst_42"
" lst_43"
" lst_44)"
"(if(if(pair? lst_41)"
"(if(pair? lst_42)"
"(if(pair? lst_43)"
"(pair? lst_44)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_45)"
"(unsafe-car"
" lst_41))"
"((mpi-vector-tree_46)"
"(unsafe-car"
" lst_42))"
"((phase-to-link-modules-tree_47)"
"(unsafe-car"
" lst_43))"
"((syntax-literals-tree_48)"
"(unsafe-car"
" lst_44)))"
"(let-values(((fold-var_49)"
"(let-values(((fold-var_50)"
" fold-var_40))"
"(let-values(((fold-var_51)"
"(let-values()"
"(cons"
"(let-values()"
"(construct-compiled-in-memory_13"
" sub-ld_45"
" mpi-vector-tree_46"
" phase-to-link-modules-tree_47"
" syntax-literals-tree_48))"
" fold-var_50))))"
"(values"
" fold-var_51)))))"
"(for-loop_39"
" fold-var_49"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42)"
"(unsafe-cdr lst_43)"
"(unsafe-cdr"
" lst_44))))"
" fold-var_40))))"
" for-loop_39)"
" null"
" lst_35"
" lst_36"
" lst_37"
" lst_38)))))))"
"(compiled-in-memory1.1"
" ld_21"
"(vector-ref"
" phase-to-link-modules-vector_8"
"(vector-ref phase-to-link-modules-tree_23 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_52)(vector-length mpi-pos-vec_26)))"
"(begin"
"(if(exact-nonnegative-integer? len_52)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_52)))"
"(let-values(((v_53)(make-vector len_52 0)))"
"(begin"
"(if(zero? len_52)"
"(void)"
"(let-values()"
"(let-values(((vec_54 len_55)"
"(let-values(((vec_56) mpi-pos-vec_26))"
"(begin"
"(if(vector? vec_56)"
"(void)"
"(let-values()"
"(in-vector vec_56)))"
"(values"
" vec_56"
"(unsafe-vector-length vec_56))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_57)"
"(lambda(i_58 pos_59)"
"(if(unsafe-fx< pos_59 len_55)"
"(let-values(((pos_60)"
"(unsafe-vector-ref"
" vec_54"
" pos_59)))"
"(let-values(((i_61)"
"(let-values(((i_62)"
" i_58))"
"(let-values(((i_63)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_53"
" i_62"
"(let-values()"
"(vector-ref"
" mpi-vector_6"
" pos_60)))"
"(unsafe-fx+"
" 1"
" i_62)))))"
"(values"
" i_63)))))"
"(if(not"
"((lambda x_64"
"(unsafe-fx="
" i_61"
" len_52))"
" pos_60))"
"(for-loop_57"
" i_61"
"(unsafe-fx+"
" 1"
" pos_59))"
" i_61)))"
" i_58))))"
" for-loop_57)"
" 0"
" 0)))))"
" v_53))))"
"(let-values(((len_65)(cdr syntax-literals-spec_27)))"
"(begin"
"(if(exact-nonnegative-integer? len_65)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_65)))"
"(let-values(((v_66)(make-vector len_65 0)))"
"(begin"
"(if(zero? len_65)"
"(void)"
"(let-values()"
"(let-values(((start_67) 0)"
"((end_68)(cdr syntax-literals-spec_27))"
"((inc_69) 1))"
"(begin"
"(if(if(real? start_67)"
"(if(real? end_68)(real? inc_69) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_67 end_68 inc_69)))"
"((letrec-values(((for-loop_70)"
"(lambda(i_71 pos_72)"
"(if(< pos_72 end_68)"
"(let-values(((i_73)"
" pos_72))"
"(let-values(((i_74)"
"(let-values(((i_75)"
" i_71))"
"(let-values(((i_76)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_66"
" i_75"
"(let-values()"
"(if syntax-literals_10"
"(vector-ref"
" syntax-literals_10"
"(+"
"(car"
" syntax-literals-spec_27)"
" i_73))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_75)))))"
"(values"
" i_76)))))"
"(if(not"
"((lambda x_77"
"(unsafe-fx="
" i_74"
" len_65))"
" i_73))"
"(for-loop_70"
" i_74"
"(+ pos_72 inc_69))"
" i_74)))"
" i_71))))"
" for-loop_70)"
" 0"
" start_67)))))"
" v_66))))"
"(map-construct-compiled-in-memory_30 pres_28 1)"
"(map-construct-compiled-in-memory_30 posts_29 2)"
" namespace-scopes_12"
" #f))))))))))"
"(map2"
" construct-compiled-in-memory_13"
" tops_1"
" mpi-vector-trees_7"
" phase-to-link-modules-trees_9"
" syntax-literals-trees_11)))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_78 names-key_79)"
"(if(1/linklet-bundle? ld_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_80)(1/linklet-directory->hash ld_78)))"
"(let-values(((mod_81)(hash-ref h_80 #f #f)))"
"            (let-values ((() (begin (if mod_81 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_82)(1/linklet-bundle->hash mod_81)))"
"(let-values(((names_83)(hash-ref mh_82 names-key_79 null)))"
"(alt-reverse"
"(let-values(((lst_84) names_83))"
"(begin"
"(if(list? lst_84)(void)(let-values()(in-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_86 lst_87)"
"(if(pair? lst_87)"
"(let-values(((name_88)(unsafe-car lst_87)))"
"(let-values(((fold-var_89)"
"(let-values(((fold-var_90) fold-var_86))"
"(let-values(((fold-var_91)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" h_80"
" name_88"
"(lambda()"
"(error"
"                                                                                      \"missing submodule declaration:\""
" name_88))))"
" fold-var_90))))"
"(values fold-var_91)))))"
"(for-loop_85 fold-var_89(unsafe-cdr lst_87))))"
" fold-var_86))))"
" for-loop_85)"
" null"
" lst_84)))))))))))))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$12 lifted/2.1$12 lifted/3.1$11 lifted/4.1$11 lifted/5.1$11)"
"(make-struct-type"
" 'check-require-access"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-require-access"
"(case-lambda"
"((self_6"
" linklet_7"
" import-module-uses_8"
" import-module-instances_9"
" insp_10"
" extra-inspector_11"
" extra-inspectorsss_12)"
"(apply"
" missing-kw"
" self_6"
" linklet_7"
" import-module-uses_8"
" import-module-instances_9"
" insp_10"
" extra-inspector_11"
" extra-inspectorsss_12"
" null))))))"
"(current-inspector)"
"(case-lambda"
"((self_13"
" linklet_14"
" import-module-uses_15"
" import-module-instances_16"
" insp_17"
" extra-inspector_18"
" extra-inspectorsss_19)"
"(apply"
" missing-kw"
" self_13"
" linklet_14"
" import-module-uses_15"
" import-module-instances_16"
" insp_17"
" extra-inspector_18"
" extra-inspectorsss_19"
" null)))))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_20"
" linklet3_21"
" import-module-uses4_22"
" import-module-instances5_23"
" insp6_24"
" extra-inspector7_25"
" extra-inspectorsss8_26)"
"(let-values(((linklet_27) linklet3_21))"
"(let-values(((skip-num-imports_28) skip-imports1_20))"
"(let-values(((import-module-uses_29) import-module-uses4_22))"
"(let-values(((import-module-instances_30) import-module-instances5_23))"
"(let-values(((insp_31) insp6_24))"
"(let-values(((extra-inspector_32) extra-inspector7_25))"
"(let-values(((extra-inspectorsss_33) extra-inspectorsss8_26))"
"(let-values()"
"(let-values(((lst_34)(list-tail(1/linklet-import-variables linklet_27) skip-num-imports_28))"
"((lst_35) import-module-uses_29)"
"((lst_36) import-module-instances_30)"
"((lst_37)"
"(let-values(((or-part_38) extra-inspectorsss_33))"
"(if or-part_38 or-part_38 import-module-uses_29))))"
"(begin"
"(if(list? lst_34)(void)(let-values()(in-list lst_34)))"
"(if(list? lst_35)(void)(let-values()(in-list lst_35)))"
"(if(list? lst_36)(void)(let-values()(in-list lst_36)))"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 lst_41 lst_42 lst_43 lst_44)"
"(if(if(pair? lst_41)"
"(if(pair? lst_42)(if(pair? lst_43)(pair? lst_44) #f) #f)"
" #f)"
"(let-values(((import-syms_45)(unsafe-car lst_41))"
"((mu_46)(unsafe-car lst_42))"
"((mi_47)(unsafe-car lst_43))"
"((extra-inspectorss_48)(unsafe-car lst_44)))"
"(let-values(((fold-var_49)"
"(let-values(((fold-var_50) fold-var_40))"
"(let-values(((fold-var_51)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_52)"
"(module-instance-module"
" mi_47)))"
"(if(module-no-protected? m_52)"
"(void)"
"(let-values()"
"(let-values(((access_53)"
"(let-values(((or-part_54)"
"(module-access"
" m_52)))"
"(if or-part_54"
" or-part_54"
"(module-compute-access!"
" m_52)))))"
"(let-values(((lst_55)"
" import-syms_45)"
"((lst_56)"
"(let-values(((or-part_57)"
"(if extra-inspectorsss_33"
" extra-inspectorss_48"
" #f)))"
"(if or-part_57"
" or-part_57"
" import-syms_45))))"
"(begin"
"(if(list? lst_55)"
"(void)"
"(let-values()"
"(in-list lst_55)))"
"(if(list? lst_56)"
"(void)"
"(let-values()"
"(in-list lst_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(fold-var_59"
" lst_60"
" lst_61)"
"(if(if(pair?"
" lst_60)"
"(pair?"
" lst_61)"
" #f)"
"(let-values(((import-sym_62)"
"(unsafe-car"
" lst_60))"
"((extra-inspectors_63)"
"(unsafe-car"
" lst_61)))"
"(let-values(((fold-var_64)"
"(let-values(((fold-var_65)"
" fold-var_59))"
"(let-values(((fold-var_66)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_67)"
"(hash-ref"
"(hash-ref"
" access_53"
"(module-use-phase"
" mu_46)"
" '#hasheq())"
" import-sym_62"
" 'unexported)))"
"(if(let-values(((or-part_68)"
"(eq?"
" a_67"
" 'unexported)))"
"(if or-part_68"
" or-part_68"
"(eq?"
" a_67"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_69)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_47))))"
"(if(let-values(((or-part_70)"
"(inspector-superior?"
" insp_31"
" guard-insp_69)))"
"(if or-part_70"
" or-part_70"
"(let-values(((or-part_71)"
"(if extra-inspector_32"
"(inspector-superior?"
" extra-inspector_32"
" guard-insp_69)"
" #f)))"
"(if or-part_71"
" or-part_71"
"(if extra-inspectorsss_33"
"(if extra-inspectorss_48"
"(let-values(((ht_72)"
" extra-inspectors_63))"
"(begin"
"(if((lambda(ht_73)"
"(if(hash?"
" ht_73)"
"(immutable?"
" ht_73)"
" #f))"
" ht_72)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_72)))"
"((letrec-values(((for-loop_74)"
"(lambda(result_75"
" i_76)"
"(if i_76"
"(let-values(((extra-insp_77)"
"(unsafe-immutable-hash-iterate-key"
" ht_72"
" i_76)))"
"(let-values(((result_78)"
"(let-values(((result_79)"
" result_75))"
"(let-values(((result_80)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_77"
" guard-insp_69)))))"
"(values"
" result_80)))))"
"(if(not"
"((lambda x_81"
"(not"
" result_78))"
" extra-insp_77))"
"(for-loop_74"
" result_78"
"(unsafe-immutable-hash-iterate-next"
" ht_72"
" i_76))"
" result_78)))"
" result_75))))"
" for-loop_74)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_72))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                          \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                          \"  variable: ~s\\n\""
"                                                                                                                                                                          \"  from module: ~a\")"
" a_67"
" import-sym_62"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_47))))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_66)))))"
"(for-loop_58"
" fold-var_64"
"(unsafe-cdr"
" lst_60)"
"(unsafe-cdr"
" lst_61))))"
" fold-var_59))))"
" for-loop_58)"
"(void)"
" lst_55"
" lst_56))))))))"
"(void)))))"
"(values fold-var_51)))))"
"(for-loop_39"
" fold-var_49"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42)"
"(unsafe-cdr lst_43)"
"(unsafe-cdr lst_44))))"
" fold-var_40))))"
" for-loop_39)"
"(void)"
" lst_34"
" lst_35"
" lst_36"
" lst_37)))))))))))))"
"(define-values"
"(unpack10.1$1)"
"(lambda(given-kws_82"
" given-args_83"
" linklet3_84"
" import-module-uses4_85"
" import-module-instances5_86"
" insp6_87"
" extra-inspector7_88"
" extra-inspectorsss8_89)"
"(let-values(((skip-imports1_90)(car given-args_83)))"
"(check-require-access9.1"
" skip-imports1_90"
" linklet3_84"
" import-module-uses4_85"
" import-module-instances5_86"
" insp6_87"
" extra-inspector7_88"
" extra-inspectorsss8_89))))"
"(define-values"
"(check-require-access11.1)"
"(lifted/2.1$12"
"(lambda(given-kws_91 given-argc_92)"
"(if(= given-argc_92 8)"
"(let-values(((l2_93) given-kws_91))"
"(if(pair? l2_93)(if(eq?(car l2_93) '#:skip-imports)(null?(cdr l2_93)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_94"
" given-args_95"
" linklet_96"
" import-module-uses_97"
" import-module-instances_98"
" insp_99"
" extra-inspector_100"
" extra-inspectorsss_101)"
"(unpack10.1$1"
" given-kws_94"
" given-args_95"
" linklet_96"
" import-module-uses_97"
" import-module-instances_98"
" insp_99"
" extra-inspector_100"
" extra-inspectorsss_101)))"
" '(#:skip-imports)"
" '(#:skip-imports)))"
"(void)"
"(void)"
"(define-values"
"(eval-single-top)"
"(lambda(c_6 ns_7)"
"(let-values(((...xpander/eval/top.rkt:30:2_8) eval-one-top26.1)((c27_9) c_6)((ns28_10) ns_7)((temp29_11) #t))"
"(if(variable-reference-constant?(#%variable-reference eval-one-top26.1))"
"(eval-one-top24.1 #f #f temp29_11 #t c27_9 ns28_10)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:30:2_8"
" keyword-procedure-extract"
" '(#:single-expression?)"
" 4)"
" '(#:single-expression?)"
"(list temp29_11)"
" c27_9"
" ns28_10)))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_12)"
"(let-values(((ld_13)(if(compiled-in-memory? c_12)(compiled-in-memory-linklet-directory c_12) c_12)))"
"(if(1/linklet-directory? ld_13)(not(hash-ref(1/linklet-directory->hash ld_13) #f #f)) #f))))"
"(define-values"
"(eval-top7.1)"
"(lambda(as-tail?1_14 as-tail?2_15 c5_16 ns6_17 eval-compiled3_18 eval-compiled4_19)"
"(let-values(((c_20) c5_16))"
"(let-values(((ns_21) ns6_17))"
"(let-values(((eval-compiled_22)(if eval-compiled4_19 eval-compiled3_18 eval-top9.1)))"
"(let-values(((as-tail?_23)(if as-tail?2_15 as-tail?1_14 #t)))"
"(let-values()"
"(if(compiled-multiple-top? c_20)"
"(let-values(((...xpander/eval/top.rkt:41:6_24) eval-multiple-tops17.1)"
"((c30_25) c_20)"
"((ns31_26) ns_21)"
"((eval-compiled32_27) eval-compiled_22)"
"((as-tail?33_28) as-tail?_23))"
"(if(variable-reference-constant?(#%variable-reference eval-multiple-tops17.1))"
"(eval-multiple-tops15.1 as-tail?33_28 c30_25 ns31_26 eval-compiled32_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:41:6_24"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 5)"
" '(#:as-tail?)"
"(list as-tail?33_28)"
" c30_25"
" ns31_26"
" eval-compiled32_27)))"
"(let-values(((...xpander/eval/top.rkt:42:6_29) eval-one-top26.1)"
"((c34_30) c_20)"
"((ns35_31) ns_21)"
"((as-tail?36_32) as-tail?_23))"
"(if(variable-reference-constant?(#%variable-reference eval-one-top26.1))"
"(eval-one-top24.1 as-tail?36_32 #t #f #f c34_30 ns35_31)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:42:6_29"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list as-tail?36_32)"
" c34_30"
" ns35_31)))))))))))"
"(define-values"
"(unpack8.1)"
"(lambda(given-kws_33 given-args_34 c5_35 ns6_36 eval-compiled3_37 eval-compiled4_38)"
"(let-values(((as-tail?2_39)(pair? given-kws_33)))"
"(let-values(((as-tail?1_40)(if as-tail?2_39(car given-args_34)(void))))"
"(eval-top7.1 as-tail?1_40 as-tail?2_39 c5_35 ns6_36 eval-compiled3_37 eval-compiled4_38)))))"
"(define-values"
"(eval-top9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_41 given-argc_42)"
"(if(if(>= given-argc_42 4)(<= given-argc_42 5) #f)"
"(let-values(((l1_43) given-kws_41))"
"(let-values(((l1_44)(if(null? l1_43) l1_43(if(eq?(car l1_43) '#:as-tail?)(cdr l1_43) l1_43))))"
"(null? l1_44)))"
" #f))"
"(case-lambda"
"((given-kws_45 given-args_46 c_47 ns_48)(unpack8.1 given-kws_45 given-args_46 c_47 ns_48 #f #f))"
"((given-kws_49 given-args_50 c_51 ns_52 eval-compiled3_53)"
"(unpack8.1 given-kws_49 given-args_50 c_51 ns_52 eval-compiled3_53 #t)))"
" null"
" '(#:as-tail?)"
"(let-values(((eval-top_54)"
"(case-lambda"
"((c_55 ns_56)(unpack8.1 null null c_55 ns_56 #f #f))"
"((c_57 ns_58 eval-compiled3_59)(unpack8.1 null null c_57 ns_58 eval-compiled3_59 #t)))))"
" eval-top_54)))"
"(define-values"
"(lifted/1.1$11 lifted/2.1$11 lifted/3.1$10 lifted/4.1$10 lifted/5.1$10)"
"(make-struct-type"
" 'eval-multiple-tops"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'eval-multiple-tops"
"(case-lambda"
"((self_60 c_61 ns_62 eval-compiled_63)(apply missing-kw self_60 c_61 ns_62 eval-compiled_63 null))))))"
"(current-inspector)"
"(case-lambda((self_64 c_65 ns_66 eval-compiled_67)(apply missing-kw self_64 c_65 ns_66 eval-compiled_67 null)))))"
"(define-values"
"(eval-multiple-tops15.1)"
"(lambda(as-tail?10_68 c12_69 ns13_70 eval-compiled14_71)"
"(let-values(((c_72) c12_69))"
"(let-values(((ns_73) ns13_70))"
"(let-values(((eval-compiled_74) eval-compiled14_71))"
"(let-values(((as-tail?_75) as-tail?10_68))"
"(let-values()"
"(let-values(((eval-compiled-parts_76)"
"(lambda(l_77)"
"((letrec-values(((loop_78)"
"(lambda(l_79)"
"(if(null? l_79)"
"(let-values() void)"
"(if(null?(cdr l_79))"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:51:8_80)"
" eval-compiled_74)"
"((temp37_81)(car l_79))"
"((ns38_82) ns_73)"
"((as-tail?39_83) as-tail?_75))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:51:8_80"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list as-tail?39_83)"
" temp37_81"
" ns38_82)))"
"(let-values()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:53:8_84)"
" eval-compiled_74)"
"((temp40_85)(car l_79))"
"((ns41_86) ns_73)"
"((temp42_87) #f))"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:53:8_84"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list temp42_87)"
" temp40_85"
" ns41_86))"
"(loop_78(cdr l_79)))))))))"
" loop_78)"
" l_77))))"
"(if(compiled-in-memory? c_72)"
"(let-values()(eval-compiled-parts_76(compiled-in-memory-pre-compiled-in-memorys c_72)))"
"(let-values(((c30100_88)(hash-ref(1/linklet-directory->hash c_72) 'data #f)))"
"(if c30100_88"
"((lambda(data-ld_89)"
"(eval-compiled-parts_76"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_72)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_89) #f)) 0)"
" ns_73)))"
" c30100_88)"
"(let-values()(eval-compiled-parts_76(compiled-top->compiled-tops c_72))))))))))))))"
"(define-values"
"(unpack16.1$2)"
"(lambda(given-kws_90 given-args_91 c12_92 ns13_93 eval-compiled14_94)"
"(let-values(((as-tail?10_95)(car given-args_91)))"
"(eval-multiple-tops15.1 as-tail?10_95 c12_92 ns13_93 eval-compiled14_94))))"
"(define-values"
"(eval-multiple-tops17.1)"
"(lifted/2.1$11"
"(lambda(given-kws_96 given-argc_97)"
"(if(= given-argc_97 5)"
"(let-values(((l2_98) given-kws_96))"
"(if(pair? l2_98)(if(eq?(car l2_98) '#:as-tail?)(null?(cdr l2_98)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_99 given-args_100 c_101 ns_102 eval-compiled_103)"
"(unpack16.1$2 given-kws_99 given-args_100 c_101 ns_102 eval-compiled_103)))"
" '(#:as-tail?)"
" '(#:as-tail?)))"
"(define-values"
"(eval-one-top24.1)"
"(lambda(as-tail?19_104 as-tail?21_105 single-expression?18_106 single-expression?20_107 c22_108 ns23_109)"
"(let-values(((c_110) c22_108))"
"(let-values(((ns_111) ns23_109))"
"(let-values(((single-expression?_112)(if single-expression?20_107 single-expression?18_106 #f)))"
"(let-values(((as-tail?_113)(if as-tail?21_105 as-tail?19_104 #t)))"
"(let-values()"
"(let-values()"
"(let-values(((ld_114)"
"(if(compiled-in-memory? c_110)(compiled-in-memory-linklet-directory c_110) c_110)))"
"(let-values(((h_115)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_114) #f))))"
"(let-values(((link-instance_116)"
"(if(compiled-in-memory? c_110)"
"(link-instance-from-compiled-in-memory"
" c_110"
"(if(not single-expression?_112) ns_111 #f))"
"(1/instantiate-linklet"
"(hash-ref h_115 'link)"
"(list"
" deserialize-instance"
"(let-values(((...xpander/eval/top.rkt:86:36_124)"
" make-eager-instance-instance13.1)"
"((ns43_125) ns_111)"
"((temp44_126)(namespace-phase ns_111))"
"((temp45_127)(namespace-mpi ns_111))"
"((temp46_128)(namespace-bulk-binding-registry ns_111))"
"((temp47_129)(current-code-inspector)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-eager-instance-instance13.1))"
"(make-eager-instance-instance11.1"
" temp46_128"
" temp44_126"
" temp47_129"
" ns43_125"
" temp45_127)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:86:36_124"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" 2)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
"(list temp46_128 temp44_126 temp47_129 ns43_125 temp45_127)))))))))"
"(let-values(((orig-phase_117)(hash-ref h_115 'original-phase)))"
"(let-values(((max-phase_118)(hash-ref h_115 'max-phase)))"
"(let-values(((phase-shift_119)(phase-(namespace-phase ns_111) orig-phase_117)))"
"(let-values(((extra-inspector_120)"
"(if(compiled-in-memory? c_110)"
"(compiled-in-memory-compile-time-inspector c_110)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_121)"
"(if(compiled-in-memory? c_110)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_110)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_122)"
"(if(compiled-in-memory? c_110)"
"(compiled-in-memory-phase-to-link-module-uses c_110)"
"(1/instance-variable-value link-instance_116 'phase-to-link-modules))))"
"(let-values(((thunk_123)"
"(let-values(((start_130) max-phase_118)"
"((end_131)(sub1 orig-phase_117))"
"((inc_132) -1))"
"(begin"
"(if(if(real? start_130)"
"(if(real? end_131)(real? inc_132) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_130 end_131 inc_132)))"
"((letrec-values(((for-loop_133)"
"(lambda(prev-thunk_134 pos_135)"
"(if(> pos_135 end_131)"
"(let-values(((phase_136) pos_135))"
"(let-values(((prev-thunk_137)"
"(let-values(((prev-thunk_138)"
" prev-thunk_134))"
"(let-values(((prev-thunk_139)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_138"
" #f)"
"(values))))"
"(let-values(((module-uses_140)"
"(hash-ref"
" phase-to-link-modules_122"
" phase_136"
" null)))"
"(let-values(((import-module-instances_141"
" import-instances_142)"
"(let-values(((mis_146"
" is_147)"
"(let-values(((lst_148)"
" module-uses_140))"
"(begin"
"(if(list?"
" lst_148)"
"(void)"
"(let-values()"
"(in-list"
" lst_148)))"
"((letrec-values(((for-loop_149)"
"(lambda(mis_150"
" is_151"
" lst_152)"
"(if(pair?"
" lst_152)"
"(let-values(((mu_153)"
"(unsafe-car"
" lst_152)))"
"(let-values(((mis_154"
" is_155)"
"(let-values(((mis_156)"
" mis_150)"
"((is_157)"
" is_151))"
"(let-values(((mis_158"
" is_159)"
"(let-values()"
"(let-values(((mis48_160"
" is49_161)"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:117:20_162)"
" namespace-module-use->module+linklet-instances146.1)"
"((ns50_163)"
" ns_111)"
"((mu51_164)"
" mu_153)"
"((temp52_165)"
"(phase-"
"(phase+"
" phase_136"
" phase-shift_119)"
"(module-use-phase"
" mu_153))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances146.1))"
"(namespace-module-use->module+linklet-instances144.1"
" temp52_165"
" #f"
" #f"
" #f"
" #f"
" ns50_163"
" mu51_164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:117:20_162"
" keyword-procedure-extract"
" '(#:phase-shift)"
" 4)"
" '(#:phase-shift)"
"(list"
" temp52_165)"
" ns50_163"
" mu51_164))))))"
"(values"
"(cons"
" mis48_160"
" mis_156)"
"(cons"
" is49_161"
" is_157))))))"
"(values"
" mis_158"
" is_159)))))"
"(for-loop_149"
" mis_154"
" is_155"
"(unsafe-cdr"
" lst_152))))"
"(values"
" mis_150"
" is_151)))))"
" for-loop_149)"
" null"
" null"
" lst_148)))))"
"(values"
"(alt-reverse"
" mis_146)"
"(alt-reverse"
" is_147)))))"
"(let-values(((phase-ns_143)"
"(namespace->namespace-at-phase"
" ns_111"
"(phase+"
" phase_136"
" phase-shift_119))))"
"(let-values(((inst_144)"
"(if single-expression?_112"
" link-instance_116"
"(let-values(((...xpander/eval/top.rkt:127:24_166)"
" make-instance-instance15.1)"
"((phase-ns53_167)"
" phase-ns_143)"
"((phase-shift54_168)"
" phase-shift_119)"
"((temp55_169)"
"(namespace-mpi"
" ns_111))"
"((temp56_170)"
"(namespace-inspector"
" ns_111))"
"((temp57_171)"
"(namespace-bulk-binding-registry"
" ns_111))"
"((temp58_172)"
"(lambda(name_173"
" val_174)"
"(namespace-set-transformer!"
" ns_111"
"(phase+"
"(sub1"
" phase_136)"
" phase-shift_119)"
" name_173"
" val_174))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-instance-instance15.1))"
"(make-instance-instance13.1"
" temp57_171"
" temp56_170"
" phase-ns53_167"
" phase-shift54_168"
" temp55_169"
" temp58_172)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:127:24_166"
" keyword-procedure-extract"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
" 2)"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
"(list"
" temp57_171"
" temp56_170"
" phase-ns53_167"
" phase-shift54_168"
" temp55_169"
" temp58_172)))))))"
"(let-values(((linklet_145)"
"(hash-ref"
" h_115"
" phase_136"
" #f)))"
"(if linklet_145"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:143:9_176)"
" check-require-access11.1)"
"((linklet59_177)"
" linklet_145)"
"((temp60_178)"
" 3)"
"((module-uses61_179)"
" module-uses_140)"
"((import-module-instances62_180)"
" import-module-instances_141)"
"((temp63_181)"
"(current-code-inspector))"
"((extra-inspector64_182)"
" extra-inspector_120)"
"((temp65_183)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_121"
" phase_136"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp60_178"
" linklet59_177"
" module-uses61_179"
" import-module-instances62_180"
" temp63_181"
" extra-inspector64_182"
" temp65_183)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:143:9_176"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp60_178)"
" linklet59_177"
" module-uses61_179"
" import-module-instances62_180"
" temp63_181"
" extra-inspector64_182"
" temp65_183)))"
"(values))))"
"(let-values(((instantiate_175)"
"(lambda(tail?_184)"
"(1/instantiate-linklet"
" linklet_145"
"(list*"
" top-level-instance"
" link-instance_116"
" inst_144"
" import-instances_142)"
"(namespace->instance"
" ns_111"
"(phase+"
" phase_136"
" phase-shift_119))"
"(not"
" tail?_184)))))"
"(if(zero-phase?"
" phase_136)"
"(let-values()"
" instantiate_175)"
"(if single-expression?_112"
"(let-values()"
"(lambda(tail?_185)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_143)"
"(let-values()"
"(instantiate_175"
" tail?_185)))))"
"(let-values()"
"(let-values(((ns-1_186)"
"(namespace->namespace-at-phase"
" phase-ns_143"
"(sub1"
" phase_136))))"
"(lambda(tail?_187)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(make-expand-context"
" ns-1_186)"
" 1/current-namespace"
" phase-ns_143)"
"(let-values()"
"(instantiate_175"
" tail?_187)))))))))))"
"(let-values()"
" void)))))))))))"
"(values"
" prev-thunk_139)))))"
"(for-loop_133"
" prev-thunk_137"
"(+ pos_135 inc_132))))"
" prev-thunk_134))))"
" for-loop_133)"
" void"
" start_130)))))"
"(thunk_123 as-tail?_113)))))))))))))))))))"
"(define-values"
"(unpack25.1$1)"
"(lambda(given-kws_188 given-args_189 c22_190 ns23_191)"
"(let-values(((as-tail?21_192)(if(pair? given-kws_188)(eq? '#:as-tail?(car given-kws_188)) #f)))"
"(let-values(((as-tail?19_193)(if as-tail?21_192(car given-args_189)(void)))"
"((given-kws_194)(if as-tail?21_192(cdr given-kws_188) given-kws_188))"
"((given-args_195)(if as-tail?21_192(cdr given-args_189) given-args_189)))"
"(let-values(((single-expression?20_196)(pair? given-kws_194)))"
"(let-values(((single-expression?18_197)(if single-expression?20_196(car given-args_195)(void))))"
"(eval-one-top24.1"
" as-tail?19_193"
" as-tail?21_192"
" single-expression?18_197"
" single-expression?20_196"
" c22_190"
" ns23_191)))))))"
"(define-values"
"(eval-one-top26.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_198 given-argc_199)"
"(if(= given-argc_199 4)"
"(let-values(((l1_200) given-kws_198))"
"(let-values(((l1_201)(if(null? l1_200) l1_200(if(eq?(car l1_200) '#:as-tail?)(cdr l1_200) l1_200))))"
"(let-values(((l1_202) l1_201))"
"(let-values(((l1_203)"
"(if(null? l1_202)"
" l1_202"
"(if(eq?(car l1_202) '#:single-expression?)(cdr l1_202) l1_202))))"
"(null? l1_203)))))"
" #f))"
"(case-lambda((given-kws_204 given-args_205 c_206 ns_207)(unpack25.1$1 given-kws_204 given-args_205 c_206 ns_207)))"
" null"
" '(#:as-tail? #:single-expression?)"
"(let-values(((eval-one-top_208)(case-lambda((c_209 ns_210)(unpack25.1$1 null null c_209 ns_210)))))"
" eval-one-top_208)))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_211 to-ns_212)"
"(let-values(((orig-syntax-literals_213)(compiled-in-memory-syntax-literals cim_211)))"
"(let-values(((syntax-literals_214)"
"(if(not to-ns_212)"
"(let-values() orig-syntax-literals_213)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_211)"
"(extract-namespace-scopes to-ns_212))"
"(let-values() orig-syntax-literals_213)"
"(let-values()"
"(let-values(((len_215)(vector-length orig-syntax-literals_213)))"
"(begin"
"(if(exact-nonnegative-integer? len_215)"
"(void)"
"                                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_215)))"
"(let-values(((v_216)(make-vector len_215 0)))"
"(begin"
"(if(zero? len_215)"
"(void)"
"(let-values()"
"(let-values(((vec_217 len_218)"
"(let-values(((vec_219) orig-syntax-literals_213))"
"(begin"
"(if(vector? vec_219)"
"(void)"
"(let-values()(in-vector vec_219)))"
"(values vec_219(unsafe-vector-length vec_219))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_220)"
"(lambda(i_221 pos_222)"
"(if(unsafe-fx< pos_222 len_218)"
"(let-values(((s_223)"
"(unsafe-vector-ref vec_217 pos_222)))"
"(let-values(((i_224)"
"(let-values(((i_225) i_221))"
"(let-values(((i_226)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_216"
" i_225"
"(let-values()"
"(swap-top-level-scopes"
" s_223"
"(compiled-in-memory-namespace-scopes"
" cim_211)"
" to-ns_212)))"
"(unsafe-fx+"
" 1"
" i_225)))))"
"(values i_226)))))"
"(if(not"
"((lambda x_227(unsafe-fx= i_224 len_215))"
" s_223))"
"(for-loop_220 i_224(unsafe-fx+ 1 pos_222))"
" i_224)))"
" i_221))))"
" for-loop_220)"
" 0"
" 0)))))"
" v_216)))))))))"
"(1/make-instance"
" 'link"
" #f"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_211)"
" syntax-literals-id"
" syntax-literals_214)))))"
"(void)"
"(void)"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(let-values(((temp1_2)(syntax-scope-set runtime-stx 0))"
"((sym2_3) sym_1)"
"((temp3_4)"
"(let-values(((runtime-mpi4_5) runtime-mpi)((temp5_6) 0)((sym6_7) sym_1))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" runtime-mpi4_5"
" temp5_6"
" sym6_7)"
"(make-module-binding24.1 runtime-mpi4_5 temp5_6 sym6_7)))))"
"(if(variable-reference-constant?(#%variable-reference add-binding-in-scopes!18.1))"
"(add-binding-in-scopes!16.1 #f #f temp1_2 sym2_3 temp3_4)"
"(add-binding-in-scopes!18.1 temp1_2 sym2_3 temp3_4)))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$10 lifted/2.1$10 lifted/3.1$9 lifted/4.1$9 lifted/5.1$9)"
"(make-struct-type"
" 'select-defined-syms-and-bind!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'select-defined-syms-and-bind!"
"(case-lambda"
"((self_6 ids_7 defined-syms_8 self_9 phase_10 all-scopes-stx_11)"
"(apply missing-kw self_6 ids_7 defined-syms_8 self_9 phase_10 all-scopes-stx_11 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_12 ids_13 defined-syms_14 self_15 phase_16 all-scopes-stx_17)"
"(apply missing-kw self_12 ids_13 defined-syms_14 self_15 phase_16 all-scopes-stx_17 null)))))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_18"
" as-transformer?10_19"
" frame-id1_20"
" in4_21"
" in9_22"
" requires+provides3_23"
" requires+provides8_24"
" top-level-bind-scope2_25"
" top-level-bind-scope7_26"
" ids11_27"
" defined-syms12_28"
" self13_29"
" phase14_30"
" all-scopes-stx15_31)"
"(let-values(((ids_32) ids11_27))"
"(let-values(((defined-syms_33) defined-syms12_28))"
"(let-values(((self_34) self13_29))"
"(let-values(((phase_35) phase14_30))"
"(let-values(((all-scopes-stx_36) all-scopes-stx15_31))"
"(let-values(((frame-id_37) frame-id1_20))"
"(let-values(((top-level-bind-scope_38)(if top-level-bind-scope7_26 top-level-bind-scope2_25 #f)))"
"(let-values(((requires+provides_39)(if requires+provides8_24 requires+provides3_23 #f)))"
"(let-values(((orig-s_40)(if in9_22 in4_21 #f)))"
"(let-values(((as-transformer?_41)(if as-transformer?10_19 as-transformer?5_18 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_42)"
"(let-values(((or-part_43)(hash-ref defined-syms_33 phase_35 #f)))"
"(if or-part_43"
" or-part_43"
"(let-values(((ht_44)(make-hasheq)))"
"(begin(hash-set! defined-syms_33 phase_35 ht_44) ht_44))))))"
"(alt-reverse"
"(let-values(((lst_45) ids_32))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((id_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(let-values(((fold-var_52)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_53)"
"(syntax-e$1"
" id_49)))"
"(let-values(((defined-sym_54)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_42"
" sym_53"
" #f)"
" id_49"
" phase_35"
" top-level-bind-scope_38))"
"(no-extra-scopes?"
" id_49"
" all-scopes-stx_36"
" top-level-bind-scope_38"
" phase_35)"
" #f)"
" sym_53"
"((letrec-values(((loop_56)"
"(lambda(pos_57)"
"(let-values(((s_58)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                  \"~a.~a\""
" sym_53"
" pos_57))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_42"
" s_58"
" #f)"
" id_49"
" phase_35"
" top-level-bind-scope_38)"
"(loop_56"
"(add1"
" pos_57))"
" s_58)))))"
" loop_56)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_42"
" defined-sym_54"
" id_49)"
"(values))))"
"(let-values(((b_55)"
"(let-values(((...er/expand/def-id.rkt:61:14_59)"
" make-module-binding24.1)"
"((self23_60)"
" self_34)"
"((phase24_61)"
" phase_35)"
"((defined-sym25_62)"
" defined-sym_54)"
"((frame-id26_63)"
" frame-id_37)"
"((sym27_64)"
" sym_53))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" frame-id26_63"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sym27_64"
" #t"
" #f"
" #f"
" self23_60"
" phase24_61"
" defined-sym25_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:61:14_59"
" keyword-procedure-extract"
" '(#:frame-id"
" #:nominal-sym)"
" 5)"
" '(#:frame-id"
" #:nominal-sym)"
"(list"
" frame-id26_63"
" sym27_64)"
" self23_60"
" phase24_61"
" defined-sym25_62)))))"
"(begin"
"(if requires+provides_39"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:64:6_65)"
" remove-required-id!71.1)"
"((requires+provides28_66)"
" requires+provides_39)"
"((id29_67)"
" id_49)"
"((phase30_68)"
" phase_35)"
"((b31_69)"
" b_55))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!71.1))"
"(remove-required-id!69.1"
" b31_69"
" requires+provides28_66"
" id29_67"
" phase30_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:64:6_65"
" keyword-procedure-extract"
" '(#:unless-matches)"
" 5)"
" '(#:unless-matches)"
"(list"
" b31_69)"
" requires+provides28_66"
" id29_67"
" phase30_68))))"
"(void))"
"(let-values(((...er/expand/def-id.rkt:65:4_70)"
" add-binding!19.1)"
"((id19_71)"
" id_49)"
"((b20_72)"
" b_55)"
"((phase21_73)"
" phase_35)"
"((orig-s22_74)"
" orig-s_40))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!19.1))"
"(add-binding!17.1"
" orig-s22_74"
" #t"
" #f"
" #f"
" id19_71"
" b20_72"
" phase21_73)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:65:4_70"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s22_74)"
" id19_71"
" b20_72"
" phase21_73)))"
"(if requires+provides_39"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:67:6_75)"
" add-defined-or-required-id!15.1)"
"((requires+provides32_76)"
" requires+provides_39)"
"((id33_77)"
" id_49)"
"((phase34_78)"
" phase_35)"
"((b35_79)"
" b_55)"
"((as-transformer?36_80)"
" as-transformer?_41))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!15.1))"
"(add-defined-or-required-id!13.1"
" as-transformer?36_80"
" #f"
" #f"
" requires+provides32_76"
" id33_77"
" phase34_78"
" b35_79)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:67:6_75"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 6)"
" '(#:as-transformer?)"
"(list"
" as-transformer?36_80)"
" requires+provides32_76"
" id33_77"
" phase34_78"
" b35_79))))"
"(void))"
" defined-sym_54))))))"
" fold-var_51))))"
"(values fold-var_52)))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
" null"
" lst_45))))))))))))))))))"
"(define-values"
"(unpack17.1)"
"(lambda(given-kws_81 given-args_82 ids11_83 defined-syms12_84 self13_85 phase14_86 all-scopes-stx15_87)"
"(let-values(((as-transformer?10_88)(if(pair? given-kws_81)(eq? '#:as-transformer?(car given-kws_81)) #f)))"
"(let-values(((as-transformer?5_89)(if as-transformer?10_88(car given-args_82)(void)))"
"((given-kws_90)(if as-transformer?10_88(cdr given-kws_81) given-kws_81))"
"((given-args_91)(if as-transformer?10_88(cdr given-args_82) given-args_82)))"
"(let-values(((frame-id1_92)(car given-args_91))"
"((given-kws_93)(cdr given-kws_90))"
"((given-args_94)(cdr given-args_91)))"
"(let-values(((in9_95)(if(pair? given-kws_93)(eq? '#:in(car given-kws_93)) #f)))"
"(let-values(((in4_96)(if in9_95(car given-args_94)(void)))"
"((given-kws_97)(if in9_95(cdr given-kws_93) given-kws_93))"
"((given-args_98)(if in9_95(cdr given-args_94) given-args_94)))"
"(let-values(((requires+provides8_99)"
"(if(pair? given-kws_97)(eq? '#:requires+provides(car given-kws_97)) #f)))"
"(let-values(((requires+provides3_100)(if requires+provides8_99(car given-args_98)(void)))"
"((given-kws_101)(if requires+provides8_99(cdr given-kws_97) given-kws_97))"
"((given-args_102)(if requires+provides8_99(cdr given-args_98) given-args_98)))"
"(let-values(((top-level-bind-scope7_103)(pair? given-kws_101)))"
"(let-values(((top-level-bind-scope2_104)"
"(if top-level-bind-scope7_103(car given-args_102)(void))))"
"(select-defined-syms-and-bind!16.1"
" as-transformer?5_89"
" as-transformer?10_88"
" frame-id1_92"
" in4_96"
" in9_95"
" requires+provides3_100"
" requires+provides8_99"
" top-level-bind-scope2_104"
" top-level-bind-scope7_103"
" ids11_83"
" defined-syms12_84"
" self13_85"
" phase14_86"
" all-scopes-stx15_87))))))))))))"
"(define-values"
"(select-defined-syms-and-bind!18.1)"
"(lifted/2.1$10"
"(lambda(given-kws_105 given-argc_106)"
"(if(= given-argc_106 7)"
"(subsets?"
" '(#:frame-id)"
" given-kws_105"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope))"
" #f))"
"(case-lambda"
"((given-kws_107 given-args_108 ids_109 defined-syms_110 self_111 phase_112 all-scopes-stx_113)"
"(unpack17.1 given-kws_107 given-args_108 ids_109 defined-syms_110 self_111 phase_112 all-scopes-stx_113)))"
" '(#:frame-id)"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope)))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_114 all-scopes-stx_115 top-level-bind-scope_116 phase_117)"
"(let-values(((m-id_118)(datum->syntax$1 all-scopes-stx_115(syntax-e$1 id_114))))"
"(let-values(((or-part_119)(bound-identifier=?$1 id_114 m-id_118 phase_117)))"
"(if or-part_119"
" or-part_119"
"(if top-level-bind-scope_116"
"(bound-identifier=?$1 id_114(add-scope m-id_118 top-level-bind-scope_116) phase_117)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_120 id_121 phase_122 top-level-bind-scope_123)"
"(if prev-id_120"
"(if(not(bound-identifier=?$1 prev-id_120 id_121 phase_122))"
"(let-values(((or-part_124)(not top-level-bind-scope_123)))"
"(if or-part_124"
" or-part_124"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_120 top-level-bind-scope_123)"
"(remove-scope id_121 top-level-bind-scope_123)"
" phase_122))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_125 ctx_126)"
"(let-values(((...er/expand/def-id.rkt:87:2_127) select-defined-syms-and-bind!18.1)"
"((tl-ids37_128) tl-ids_125)"
"((temp38_129)(root-expand-context-defined-syms ctx_126))"
"((temp39_130)(namespace-mpi(expand-context-namespace ctx_126)))"
"((temp40_131)(expand-context-phase ctx_126))"
"((temp41_132)(root-expand-context-all-scopes-stx ctx_126))"
"((temp42_133)(root-expand-context-frame-id ctx_126))"
"((temp43_134)(root-expand-context-top-level-bind-scope ctx_126)))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp42_133"
" #f"
" #f"
" #f"
" #f"
" temp43_134"
" #t"
" tl-ids37_128"
" temp38_129"
" temp39_130"
" temp40_131"
" temp41_132)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:87:2_127"
" keyword-procedure-extract"
" '(#:frame-id #:top-level-bind-scope)"
" 7)"
" '(#:frame-id #:top-level-bind-scope)"
"(list temp42_133 temp43_134)"
" tl-ids37_128"
" temp38_129"
" temp39_130"
" temp40_131"
" temp41_132)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_135 phase_136 sym_137 id_138)"
"(let-values(((defined-syms-at-phase_139)"
"(let-values(((or-part_140)(hash-ref defined-syms_135 phase_136 #f)))"
"(if or-part_140"
" or-part_140"
"(let-values(((ht_141)(make-hasheq)))"
"(begin(hash-set! defined-syms_135 phase_136 ht_141) ht_141))))))"
"(hash-set! defined-syms-at-phase_139 sym_137 id_138))))"
"(void)"
"(void)"
"(define-values(box-cons!)(lambda(b_6 v_7)(set-box! b_6(cons v_7(unbox b_6)))))"
"(define-values(box-clear!)(lambda(b_8)(begin0(alt-reverse(unbox b_8))(set-box! b_8 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_9 make-_10 ?_11 -ref_12 -set!_13)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))))"
"(values"
" struct:_9"
" make-_10"
" ?_11"
"(make-struct-field-accessor -ref_12 0 'convert)"
"(make-struct-field-accessor -ref_12 1 'lifts)"
"(make-struct-field-accessor -ref_12 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-rhs)"
"(let-values(((struct:_39 make-_40 ?_41 -ref_42 -set!_43)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lifted-bind #f 2 0 #f null(current-inspector) #f '(0 1) #f 'lifted-bind)))))"
"(values"
" struct:_39"
" make-_40"
" ?_41"
"(make-struct-field-accessor -ref_42 0 'ids)"
"(make-struct-field-accessor -ref_42 1 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_64 module*-ok?4_65 convert5_66)"
"(let-values(((convert_67) convert5_66))"
"(let-values(((module*-ok?_68)(if module*-ok?4_65 module*-ok?3_64 #f)))"
"(let-values()(lift-context1.1 convert_67(box null) module*-ok?_68))))))"
"(define-values"
"(unpack7.1$1)"
"(lambda(given-kws_69 given-args_70 convert5_71)"
"(let-values(((module*-ok?4_72)(pair? given-kws_69)))"
"(let-values(((module*-ok?3_73)(if module*-ok?4_72(car given-args_70)(void))))"
"(make-lift-context6.1 module*-ok?3_73 module*-ok?4_72 convert5_71)))))"
"(define-values"
"(make-lift-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_74 given-argc_75)"
"(if(= given-argc_75 3)"
"(let-values(((l1_76) given-kws_74))"
"(let-values(((l1_77)(if(null? l1_76) l1_76(if(eq?(car l1_76) '#:module*-ok?)(cdr l1_76) l1_76))))"
"(null? l1_77)))"
" #f))"
"(case-lambda((given-kws_78 given-args_79 convert_80)(unpack7.1$1 given-kws_78 given-args_79 convert_80)))"
" null"
" '(#:module*-ok?)"
"(let-values(((make-lift-context_81)(case-lambda((convert_82)(unpack7.1$1 null null convert_82)))))"
" make-lift-context_81)))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_83 ids_84 rhs_85 phase_86)"
"(let-values(((lifted-ids_87 lifted_88)((lift-context-convert lifts_83) ids_84 rhs_85 phase_86)))"
"(begin(box-cons!(lift-context-lifts lifts_83) lifted_88) lifted-ids_87))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_89)(box-clear!(lift-context-lifts lifts_89))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_90 counter_91)"
"(lambda(ids_92 rhs_93 phase_94)"
"(begin"
"(let-values(((lst_95) ids_92))"
"(begin"
"(if(list? lst_95)(void)(let-values()(in-list lst_95)))"
"((letrec-values(((for-loop_96)"
"(lambda(fold-var_97 lst_98)"
"(if(pair? lst_98)"
"(let-values(((id_99)(unsafe-car lst_98)))"
"(let-values(((fold-var_100)"
"(let-values(((fold-var_101) fold-var_97))"
"(let-values(((fold-var_102)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((key_103)"
"(let-values(((id31_104) id_99)"
"((phase32_105)"
" phase_94)"
"((counter33_106)"
" counter_91))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" #f"
" #f"
" #f"
" #f"
" id31_104"
" phase32_105"
" counter33_106)"
"(add-local-binding!37.1"
" id31_104"
" phase32_105"
" counter33_106)))))"
"(set-box!"
" lift-env_90"
"(hash-set"
"(unbox lift-env_90)"
" key_103"
" variable))))"
"(void)))))"
"(values fold-var_102)))))"
"(for-loop_96 fold-var_100(unsafe-cdr lst_98))))"
" fold-var_97))))"
" for-loop_96)"
"(void)"
" lst_95)))"
"(values ids_92(lifted-bind2.1 ids_92 rhs_93))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_107)"
"(lambda(ids_108 rhs_109 phase_110)"
"(let-values(((post-scope_111)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_107)))))"
"(let-values(((tl-ids_112)"
"(alt-reverse"
"(let-values(((lst_113) ids_108))"
"(begin"
"(if(list? lst_113)(void)(let-values()(in-list lst_113)))"
"((letrec-values(((for-loop_114)"
"(lambda(fold-var_115 lst_116)"
"(if(pair? lst_116)"
"(let-values(((id_117)(unsafe-car lst_116)))"
"(let-values(((fold-var_118)"
"(let-values(((fold-var_119) fold-var_115))"
"(let-values(((fold-var_120)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope id_117 post-scope_111))"
" fold-var_119))))"
"(values fold-var_120)))))"
"(for-loop_114 fold-var_118(unsafe-cdr lst_116))))"
" fold-var_115))))"
" for-loop_114)"
" null"
" lst_113))))))"
"(begin"
"(select-defined-syms-and-bind!/ctx tl-ids_112 ctx_107)"
"(values tl-ids_112(lifted-bind2.1 tl-ids_112 rhs_109))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_121 body_122 s_123 phase_124)"
"(datum->syntax$1"
" #f"
"(let-values(((lst_125)(alt-reverse lifts_121)))"
"(begin"
"(if(list? lst_125)(void)(let-values()(in-list lst_125)))"
"((letrec-values(((for-loop_126)"
"(lambda(body_127 lst_128)"
"(if(pair? lst_128)"
"(let-values(((lift_129)(unsafe-car lst_128)))"
"(let-values(((body_130)"
"(let-values(((body_131) body_127))"
"(let-values(((body_132)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_129)"
"(void)"
"(let-values()"
"                                                                       (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_124)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_129)"
"(lifted-bind-rhs lift_129)))"
" body_131)))))"
"(values body_132)))))"
"(for-loop_126 body_130(unsafe-cdr lst_128))))"
" body_127))))"
" for-loop_126)"
" body_122"
" lst_125))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_133 adjust-form10_134 lifts11_135 body12_136 s13_137 phase14_138)"
"(let-values(((lifts_139) lifts11_135))"
"(let-values(((body_140) body12_136))"
"(let-values(((s_141) s13_137))"
"(let-values(((phase_142) phase14_138))"
"(let-values(((adjust-form_143)(if adjust-form10_134 adjust-form9_133 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_142) 'begin)"
"(append"
"(alt-reverse"
"(let-values(((lst_144) lifts_139))"
"(begin"
"(if(list? lst_144)(void)(let-values()(in-list lst_144)))"
"((letrec-values(((for-loop_145)"
"(lambda(fold-var_146 lst_147)"
"(if(pair? lst_147)"
"(let-values(((lift_148)(unsafe-car lst_147)))"
"(let-values(((fold-var_149)"
"(let-values(((fold-var_150) fold-var_146))"
"(let-values(((fold-var_151)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_143"
"(if(lifted-bind? lift_148)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_142)"
" 'define-values)"
"(lifted-bind-ids lift_148)"
"(lifted-bind-rhs lift_148))))"
"(let-values() lift_148))))"
" fold-var_150))))"
"(values fold-var_151)))))"
"(for-loop_145 fold-var_149(unsafe-cdr lst_147))))"
" fold-var_146))))"
" for-loop_145)"
" null"
" lst_144))))"
"(list body_140))))))))))))"
"(define-values"
"(unpack16.1$1)"
"(lambda(given-kws_152 given-args_153 lifts11_154 body12_155 s13_156 phase14_157)"
"(let-values(((adjust-form10_158)(pair? given-kws_152)))"
"(let-values(((adjust-form9_159)(if adjust-form10_158(car given-args_153)(void))))"
"(wrap-lifts-as-begin15.1 adjust-form9_159 adjust-form10_158 lifts11_154 body12_155 s13_156 phase14_157)))))"
"(define-values"
"(wrap-lifts-as-begin17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_160 given-argc_161)"
"(if(= given-argc_161 6)"
"(let-values(((l1_162) given-kws_160))"
"(let-values(((l1_163)(if(null? l1_162) l1_162(if(eq?(car l1_162) '#:adjust-form)(cdr l1_162) l1_162))))"
"(null? l1_163)))"
" #f))"
"(case-lambda"
"((given-kws_164 given-args_165 lifts_166 body_167 s_168 phase_169)"
"(unpack16.1$1 given-kws_164 given-args_165 lifts_166 body_167 s_168 phase_169)))"
" null"
" '(#:adjust-form)"
"(let-values(((wrap-lifts-as-begin_170)"
"(case-lambda"
"((lifts_171 body_172 s_173 phase_174)(unpack16.1$1 null null lifts_171 body_172 s_173 phase_174)))))"
" wrap-lifts-as-begin_170)))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_175 make-_176 ?_177 -ref_178 -set!_179)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_175"
" make-_176"
" ?_177"
"(make-struct-field-accessor -ref_178 0 'wrt-phase)"
"(make-struct-field-accessor -ref_178 1 'lifts)"
"(make-struct-field-accessor -ref_178 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_205 module*-ok?_206)(module-lift-context18.1 phase_205(box null) module*-ok?_206)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_207)(box-clear!(module-lift-context-lifts module-lifts_207))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_208 s_209 phase_210)"
"(begin"
"(if(let-values(((or-part_211)"
"(if(module-lift-context? module-lifts_208)"
"(module-lift-context-module*-ok? module-lifts_208)"
" #f)))"
"(if or-part_211"
" or-part_211"
"(if(lift-context? module-lifts_208)(lift-context-module*-ok? module-lifts_208) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_212)(core-form-sym s_209 phase_210)))"
"(if(equal? tmp_212 'module)"
"(let-values()(void))"
"(if(equal? tmp_212 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_209))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_209)))))))"
"(if(module-lift-context? module-lifts_208)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_208) s_209))"
"(if(lift-context? module-lifts_208)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_208) s_209))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_213 make-_214 ?_215 -ref_216 -set!_217)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_213"
" make-_214"
" ?_215"
"(make-struct-field-accessor -ref_216 0 'do-require)"
"(make-struct-field-accessor -ref_216 1 'wrt-phase)"
"(make-struct-field-accessor -ref_216 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_243 do-require_244)(require-lift-context19.1 do-require_244 wrt-phase_243(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_245)(box-clear!(require-lift-context-requires require-lifts_245))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_246 s_247 phase_248)"
"(begin"
"((require-lift-context-do-require require-lifts_246) s_247 phase_248)"
"(box-cons!(require-lift-context-requires require-lifts_246) s_247))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_249 make-_250 ?_251 -ref_252 -set!_253)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_249"
" make-_250"
" ?_251"
"(make-struct-field-accessor -ref_252 0 'wrt-phase)"
"(make-struct-field-accessor -ref_252 1 'provides)"
"(make-struct-field-accessor -ref_252 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_252 3 'ends))))"
"(define-values"
"(lifted/1.1$9 lifted/2.1$9 lifted/3.1$8 lifted/4.1$8 lifted/5.1$8)"
"(make-struct-type"
" 'make-to-module-lift-context"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'make-to-module-lift-context"
"(case-lambda((self_284 phase_285)(apply missing-kw self_284 phase_285 null))))))"
"(current-inspector)"
"(case-lambda((self_286 phase_287)(apply missing-kw self_286 phase_287 null)))))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_288 shared-module-ends21_289 phase25_290)"
"(let-values(((phase_291) phase25_290))"
"(let-values(((ends_292) shared-module-ends21_289))"
"(let-values(((end-as-expressions?_293) end-as-expressions?22_288))"
"(let-values()(to-module-lift-context20.1 phase_291(box null) end-as-expressions?_293 ends_292)))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_294 given-args_295 phase25_296)"
"(let-values(((end-as-expressions?22_297)(car given-args_295))"
"((given-kws_298)(cdr given-kws_294))"
"((given-args_299)(cdr given-args_295)))"
"(let-values(((shared-module-ends21_300)(car given-args_299)))"
"(make-to-module-lift-context26.1 end-as-expressions?22_297 shared-module-ends21_300 phase25_296)))))"
"(define-values"
"(make-to-module-lift-context28.1)"
"(lifted/2.1$9"
"(lambda(given-kws_301 given-argc_302)"
"(if(= given-argc_302 3)"
"(let-values(((l2_303) given-kws_301))"
"(if(pair? l2_303)"
"(if(eq?(car l2_303) '#:end-as-expressions?)"
"(let-values(((l2_304)(cdr l2_303)))"
"(if(pair? l2_304)(if(eq?(car l2_304) '#:shared-module-ends)(null?(cdr l2_304)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_305 given-args_306 phase_307)(unpack27.1 given-kws_305 given-args_306 phase_307)))"
" '(#:end-as-expressions? #:shared-module-ends)"
" '(#:end-as-expressions? #:shared-module-ends)))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_308)(box-clear!(to-module-lift-context-ends to-module-lifts_308))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_309)(box-clear!(to-module-lift-context-provides to-module-lifts_309))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_310 s_311 phase_312)"
"(box-cons!(to-module-lift-context-provides to-module-lifts_310) s_311)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_313 s_314 phase_315)(box-cons!(to-module-lift-context-ends to-module-lifts_313) s_314)))"
"(void)"
"(void)"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'already-expanded"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'binding-layer))))"
"(void)"
"(void)"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_1 make-_2 ?_3)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values(((lst_3) v_1))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6)))"
"(let-values(((result_8)"
"(let-values(((result_9) result_5))"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_10)))))"
"(if(not((lambda x_11(not result_8)) s_7))"
"(for-loop_4 result_8(unsafe-cdr lst_6))"
" result_8)))"
" result_5))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_12 ctx_13)"
"(if(expansion-contexts? t_12)"
"(not(memq(context->symbol(expand-context-context ctx_13))(expansion-contexts-ref t_12)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_14)(if(symbol? context_14) context_14 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_15 t_16 ctx_17)"
"(let-values(((wrap_18)"
"(lambda(sym_20)"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_20)(expand-context-phase ctx_17))"
" s_15)))))"
"(let-values(((fail_19)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_17)))"
" s_15))))"
"(let-values(((tmp_21)(context->symbol(expand-context-context ctx_17))))"
"(if(equal? tmp_21 'module-begin)"
"(let-values()(wrap_18 'begin))"
"(if(if(equal? tmp_21 'module) #t(if(equal? tmp_21 'top-level) #t(equal? tmp_21 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_16))(wrap_18 '#%expression)(fail_19)))"
"(let-values()(fail_19)))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_31 key_32)"
"(if(set-member?(reference-record-already-bound rr_31) key_32)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_31"
"(set-add(reference-record-reference-before-bound rr_31) key_32))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_33)"
"(let-values(((stop?_34 fold-var_35)"
"(let-values(((lst_36) rrs_33))"
"(begin"
"(if(list? lst_36)(void)(let-values()(in-list lst_36)))"
"((letrec-values(((for-loop_37)"
"(lambda(stop-after?_38 fold-var_39 lst_40)"
"(if(pair? lst_40)"
"(let-values(((rr_41)(unsafe-car lst_40)))"
"(let-values(((stop-after?_42 fold-var_43)"
"(let-values(((stop-after?_44) stop-after?_38)"
"((fold-var_45) fold-var_39))"
"(let-values(((stop?_46)"
"(reference-record-all-referenced? rr_41)))"
"(begin"
" #t"
"((letrec-values(((for-loop_47)"
"(lambda(stop-after?_48 fold-var_49)"
"(let-values()"
"(let-values(((stop-after?_50"
" fold-var_51)"
"(let-values(((stop-after?_52)"
" stop-after?_48)"
"((fold-var_53)"
" fold-var_49))"
"(let-values(((stop-after?_54)"
"(let-values(((or-part_55)"
" stop-after?_52))"
"(if or-part_55"
" or-part_55"
" stop?_46))))"
"(begin"
" #t"
"((letrec-values(((for-loop_56)"
"(lambda(stop-after?_57"
" fold-var_58)"
"(let-values()"
"(let-values(((stop-after?_59"
" fold-var_60)"
"(let-values(((stop-after?_61)"
" stop-after?_57)"
"((fold-var_62)"
" fold-var_58))"
"(if stop?_46"
"(values"
" stop-after?_61"
" fold-var_62)"
"(let-values(((stop-after?_63)"
" stop-after?_61)"
"((fold-var_64)"
" fold-var_62))"
"(let-values(((stop-after?_65"
" fold-var_66)"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?!"
" rr_41"
" #t))"
"(void)))))"
"(values"
" stop-after?_63"
" fold-var_67)))))"
"(values"
" stop-after?_65"
" fold-var_66)))))))"
"(values"
" stop-after?_59"
" fold-var_60))))))"
" for-loop_56)"
" stop-after?_54"
" fold-var_53))))))"
"(values"
" stop-after?_50"
" fold-var_51))))))"
" for-loop_47)"
" stop-after?_44"
" fold-var_45))))))"
"(if(not((lambda x_68 stop-after?_42) rr_41))"
"(for-loop_37 stop-after?_42 fold-var_43(unsafe-cdr lst_40))"
"(values stop-after?_42 fold-var_43))))"
"(values stop-after?_38 fold-var_39)))))"
" for-loop_37)"
" #f"
"(void)"
" lst_36)))))"
"(values fold-var_35))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_69 keys_70)"
"(begin"
"(set-reference-record-already-bound!"
" rr_69"
"(let-values(((lst_71) keys_70))"
"(begin"
"(if(list? lst_71)(void)(let-values()(in-list lst_71)))"
"((letrec-values(((for-loop_72)"
"(lambda(ab_73 lst_74)"
"(if(pair? lst_74)"
"(let-values(((key_75)(unsafe-car lst_74)))"
"(let-values(((ab_76)"
"(let-values(((ab_77) ab_73))"
"(let-values(((ab_78)(let-values()(set-add ab_77 key_75))))"
"(values ab_78)))))"
"(for-loop_72 ab_76(unsafe-cdr lst_74))))"
" ab_73))))"
" for-loop_72)"
"(reference-record-already-bound rr_69)"
" lst_71))))"
"(set-reference-record-reference-before-bound!"
" rr_69"
"(let-values(((lst_79) keys_70))"
"(begin"
"(if(list? lst_79)(void)(let-values()(in-list lst_79)))"
"((letrec-values(((for-loop_80)"
"(lambda(rbb_81 lst_82)"
"(if(pair? lst_82)"
"(let-values(((key_83)(unsafe-car lst_82)))"
"(let-values(((rbb_84)"
"(let-values(((rbb_85) rbb_81))"
"(let-values(((rbb_86)(let-values()(set-remove rbb_85 key_83))))"
"(values rbb_86)))))"
"(for-loop_80 rbb_84(unsafe-cdr lst_82))))"
" rbb_81))))"
" for-loop_80)"
"(reference-record-reference-before-bound rr_69)"
" lst_79)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_87)"
"(let-values(((or-part_88)(reference-record-all-referenced? rr_87)))"
"(if or-part_88 or-part_88(positive?(set-count(reference-record-reference-before-bound rr_87)))))))"
"(void)"
"(void)"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() #f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(prim-letrec-values . 113)"
"(enter-macro . 8)"
"(opaque-expr . 146)"
"(prim-set! . 123)"
"(prim-if . 105)"
"(prim-define-values . 104)"
"(block->letrec . 14)"
"(lift-statement . 134)"
"(enter-prim . 6)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(track-origin . 152)"
"(lift-loop . 128)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(start-expand . 141)"
"(enter-block . 10)"
"(prim-module-begin . 102)"
"(letrec-syntaxes-renames . 19)"
"(prim-#%datum . 115)"
"(enter-list . 4)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(next-group . 13)"
"(prim-quote-syntax . 118)"
"(exit-prim . 7)"
"(module-lift-loop . 137)"
"(exit-bind . 145)"
"(module-body . 23)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(exit-check . 127)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(exit-local-expr . 140)"
"(exit-list . 5)"
"(block-renames . 24)"
"(prim-quote . 117)"
"(enter-check . 126)"
"(block->list . 12)"
"(macro-pre-x . 21)"
"(prim-begin-for-syntax . 156)"
"(tag . 142)"
"(local-bind . 143)"
"(enter-local . 130)"
"(local-pre . 132)"
"(prim-#%top . 116)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(prim-submodule* . 159)"
"(lift-provide . 151)"
"(prim-begin . 107)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(prim-provide . 122)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(prim-with-continaution-mark . 106)"
"(next . 3)"
"(case-lambda-renames . 18)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(visit . 0)"
"(prim-let-values . 112)"
"(resolve . 1)))"
"(void)"
"(void)"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_21 alternate-id2_22 s3_23 ctx4_24)"
"(let-values(((s_25) s3_23))"
"(let-values(((ctx_26) ctx4_24))"
"(let-values(((alternate-id_27)(if alternate-id2_22 alternate-id1_21 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_28)(expand-context-observer ctx_26)))"
"(if obs_28"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_28"
"(if(expand-context-only-immediate? ctx_26) 'enter-check 'visit)"
" s_25)))"
"(void)))"
"(if(identifier? s_25)"
"(let-values()(expand-identifier s_25 ctx_26 alternate-id_27))"
"(if(if(pair?(syntax-e/no-taint s_25))(identifier?(car(syntax-e/no-taint s_25))) #f)"
"(let-values()(expand-id-application-form s_25 ctx_26 alternate-id_27))"
"(if(let-values(((or-part_29)(pair?(syntax-e$1(syntax-disarm$1 s_25)))))"
"(if or-part_29 or-part_29(null?(syntax-e$1(syntax-disarm$1 s_25)))))"
"(let-values()(expand-implicit '#%app s_25 ctx_26 #f))"
"(if(already-expanded?(syntax-e/no-taint s_25))"
"(let-values()(expand-already-expanded s_25 ctx_26))"
"(let-values()(expand-implicit '#%datum s_25 ctx_26 #f)))))))))))))"
"(define-values"
"(unpack6.1)"
"(lambda(given-kws_30 given-args_31 s3_32 ctx4_33)"
"(let-values(((alternate-id2_34)(pair? given-kws_30)))"
"(let-values(((alternate-id1_35)(if alternate-id2_34(car given-args_31)(void))))"
"(expand5.1 alternate-id1_35 alternate-id2_34 s3_32 ctx4_33)))))"
"(define-values"
"(expand7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_36 given-argc_37)"
"(if(= given-argc_37 4)"
"(let-values(((l1_38) given-kws_36))"
"(let-values(((l1_39)(if(null? l1_38) l1_38(if(eq?(car l1_38) '#:alternate-id)(cdr l1_38) l1_38))))"
"(null? l1_39)))"
" #f))"
"(case-lambda((given-kws_40 given-args_41 s_42 ctx_43)(unpack6.1 given-kws_40 given-args_41 s_42 ctx_43)))"
" null"
" '(#:alternate-id)"
"(let-values(((expand_44)(case-lambda((s_45 ctx_46)(unpack6.1 null null s_45 ctx_46))))) expand_44)))"
"(define-values"
"(expand-identifier)"
"(lambda(s_47 ctx_48 alternate-id_49)"
"(let-values(((id_50)(let-values(((or-part_51) alternate-id_49))(if or-part_51 or-part_51 s_47))))"
"(if(free-id-set-member?(expand-context-stops ctx_48)(expand-context-phase ctx_48) id_50)"
"(let-values()"
"(begin"
"(let-values(((obs_52)(expand-context-observer ctx_48)))"
"(if obs_52"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()"
"(begin"
"(call-expand-observe obs_52 'enter-prim s_47)"
"(call-expand-observe obs_52 'prim-stop)"
"(call-expand-observe obs_52 'exit-prim s_47)"
"(call-expand-observe obs_52 'return s_47)))"
"(void)))"
"(void)))"
" s_47))"
"(let-values()"
"(let-values(((binding_53)"
"(let-values(((...nder/expand/main.rkt:85:19_54) resolve+shift22.1)"
"((id54_55) id_50)"
"((temp55_56)(expand-context-phase ctx_48))"
"((temp56_57) 'ambiguous)"
"((temp57_58) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 temp56_57 #t #f #f #f #f temp57_58 #t #f #f id54_55 temp55_56)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:85:19_54"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp56_57 temp57_58)"
" id54_55"
" temp55_56)))))"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_48)))"
"(if obs_59"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()(call-expand-observe obs_59 'resolve id_50))"
"(void)))"
"(void)))"
"(if(eq? binding_53 'ambiguous)"
"(let-values()(raise-ambiguous-error id_50 ctx_48))"
"(if(not binding_53)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_47 alternate-id_49) ctx_48 s_47))"
"(let-values()"
"(let-values(((t_60 insp-of-t_61)"
"(let-values(((...nder/expand/main.rkt:97:34_62) lookup17.1)"
"((binding58_63) binding_53)"
"((ctx59_64) ctx_48)"
"((id60_65) id_50)"
"((temp61_66)(if alternate-id_49 s_47 #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp61_66 #t #f #f binding58_63 ctx59_64 id60_65)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:97:34_62"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp61_66)"
" binding58_63"
" ctx59_64"
" id60_65)))))"
"(dispatch t_60 insp-of-t_61 s_47 id_50 ctx_48 binding_53))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_67 ctx_68 alternate-id_69)"
"(let-values(((disarmed-s_70)(syntax-disarm$1 s_67 #f)))"
"(let-values(((id_71)"
"(let-values(((or-part_72) alternate-id_69))"
"(if or-part_72 or-part_72(car(syntax-e$1 disarmed-s_70))))))"
"(if(free-id-set-member?(expand-context-stops ctx_68)(expand-context-phase ctx_68) id_71)"
"(let-values()"
"(begin"
"(let-values(((obs_73)(expand-context-observer ctx_68)))"
"(if obs_73"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_68))"
"(let-values()"
"(begin"
"(call-expand-observe obs_73 'enter-prim s_67)"
"(call-expand-observe obs_73 'prim-stop)"
"(call-expand-observe obs_73 'exit-prim s_67)"
"(call-expand-observe obs_73 'return s_67)))"
"(void)))"
"(void)))"
" s_67))"
"(let-values()"
"(let-values(((binding_74)"
"(let-values(((...nder/expand/main.rkt:106:19_75) resolve+shift22.1)"
"((id62_76) id_71)"
"((temp63_77)(expand-context-phase ctx_68))"
"((temp64_78) 'ambiguous)"
"((temp65_79) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 temp64_78 #t #f #f #f #f temp65_79 #t #f #f id62_76 temp63_77)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:106:19_75"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp64_78 temp65_79)"
" id62_76"
" temp63_77)))))"
"(begin"
"(let-values(((obs_80)(expand-context-observer ctx_68)))"
"(if obs_80"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_68))"
"(let-values()(call-expand-observe obs_80 'resolve id_71))"
"(void)))"
"(void)))"
"(if(eq? binding_74 'ambiguous)"
"(let-values()(raise-ambiguous-error id_71 ctx_68))"
"(if(not binding_74)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_67 alternate-id_69) ctx_68 id_71))"
"(let-values()"
"(let-values(((t_81 insp-of-t_82)"
"(let-values(((...nder/expand/main.rkt:118:34_83) lookup17.1)"
"((binding66_84) binding_74)"
"((ctx67_85) ctx_68)"
"((id68_86) id_71)"
"((temp69_87)(if alternate-id_69(car(syntax-e$1 disarmed-s_70)) #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp69_87 #t #f #f binding66_84 ctx67_85 id68_86)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:118:34_83"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp69_87)"
" binding66_84"
" ctx67_85"
" id68_86)))))"
"(if(variable? t_81)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_67 alternate-id_69) ctx_68 id_71))"
"(let-values()(dispatch t_81 insp-of-t_82 s_67 id_71 ctx_68 binding_74)))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_88 s_89 ctx_90 trigger-id_91)"
"(let-values(((disarmed-s_92)(syntax-disarm$1 s_89)))"
"(let-values(((id_93)(datum->syntax$1 disarmed-s_92 sym_88)))"
"(if(free-id-set-member?(expand-context-stops ctx_90)(expand-context-phase ctx_90) id_93)"
"(let-values()"
"(begin"
"(let-values(((obs_94)(expand-context-observer ctx_90)))"
"(if obs_94"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_90))"
"(let-values()"
"(begin"
"(call-expand-observe obs_94 'enter-prim s_89)"
"(call-expand-observe obs_94 'prim-stop)"
"(call-expand-observe obs_94 'exit-prim s_89)"
"(call-expand-observe obs_94 'return s_89)))"
"(void)))"
"(void)))"
" s_89))"
"(let-values()"
"(let-values(((b_95)"
"(let-values(((...nder/expand/main.rkt:136:13_96) resolve+shift22.1)"
"((id70_97) id_93)"
"((temp71_98)(expand-context-phase ctx_90))"
"((temp72_99) 'ambiguous)"
"((temp73_100) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 temp72_99 #t #f #f #f #f temp73_100 #t #f #f id70_97 temp71_98)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:136:13_96"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp72_99 temp73_100)"
" id70_97"
" temp71_98)))))"
"(if(eq? b_95 'ambiguous)"
"(let-values()(raise-ambiguous-error id_93 ctx_90))"
"(let-values()"
"(let-values(((t_101 insp-of-t_102)"
"(if b_95"
"(let-values(((b74_103) b_95)((ctx75_104) ctx_90)((id76_105) id_93))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 #f #f #f #f b74_103 ctx75_104 id76_105)"
"(lookup17.1 b74_103 ctx75_104 id76_105)))"
"(values #f #f))))"
"(if(transformer? t_101)"
"(let-values()"
"(dispatch-transformer"
" t_101"
" insp-of-t_102"
"(make-explicit sym_88 s_89 disarmed-s_92)"
" id_93"
" ctx_90"
" b_95))"
"(if(expand-context-only-immediate? ctx_90)"
"(let-values()"
"(begin"
"(let-values(((obs_106)(expand-context-observer ctx_90)))"
"(if obs_106"
"(let-values()(let-values()(call-expand-observe obs_106 'exit-check s_89)))"
"(void)))"
" s_89))"
"(if(core-form? t_101)"
"(let-values()"
"(if(if(eq? sym_88 '#%top)"
"(if(eq?(core-form-name t_101) '#%top)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_90)"
" #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_101 s_89 ctx_90))"
"(let-values()"
"(dispatch-core-form t_101(make-explicit sym_88 s_89 disarmed-s_92) ctx_90))))"
"(let-values()"
"(let-values(((tl-id_107)"
"(if(eq? sym_88 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_90)"
"(add-scope s_89(root-expand-context-top-level-bind-scope ctx_90))"
" #f)"
" #f)))"
"(if(if tl-id_107"
"(let-values(((tl-id77_108) tl-id_107)((temp78_109)(expand-context-phase ctx_90)))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1 #f #f #f #f #f #f #f #f tl-id77_108 temp78_109)"
"(resolve31.1 tl-id77_108 temp78_109)))"
" #f)"
"(let-values() tl-id_107)"
"(let-values()"
"(raise-syntax-implicit-error s_89 sym_88 trigger-id_91 ctx_90))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_110 ctx_111)"
"(let-values(((ae_112)(syntax-e$1 s_110)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_114)(syntax-any-macro-scopes? s_110)))"
"(if or-part_114"
" or-part_114"
"(not"
"(eq?(expand-context-binding-layer ctx_111)(already-expanded-binding-layer ae_112)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_112)))"
"(void))"
"(values))))"
"(let-values(((result-s_113)(syntax-track-origin$1(already-expanded-s ae_112) s_110)))"
"(begin"
"(let-values(((obs_115)(expand-context-observer ctx_111)))"
"(if obs_115"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_115 'tag result-s_113)"
"(call-expand-observe obs_115 'opaque-expr result-s_113))))"
"(void)))"
" result-s_113))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_116 s_117 disarmed-s_118)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_118(cons sym_116 disarmed-s_118) s_117 s_117) s_117)))"
"(define-values"
"(dispatch)"
"(lambda(t_119 insp-of-t_120 s_121 id_122 ctx_123 binding_124)"
"(if(core-form? t_119)"
"(let-values()(dispatch-core-form t_119 s_121 ctx_123))"
"(if(transformer? t_119)"
"(let-values()(dispatch-transformer t_119 insp-of-t_120 s_121 id_122 ctx_123 binding_124))"
"(if(variable? t_119)"
"(let-values()(dispatch-variable t_119 s_121 id_122 ctx_123 binding_124))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" t_119)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_125 s_126 ctx_127)"
"(if(expand-context-only-immediate? ctx_127)"
"(let-values()"
"(begin"
"(let-values(((obs_128)(expand-context-observer ctx_127)))"
"(if obs_128(let-values()(let-values()(call-expand-observe obs_128 'exit-check s_126)))(void)))"
" s_126))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_130)(expand-context-observer ctx_127)))"
"(if obs_130"
"(let-values()(let-values()(call-expand-observe obs_130 'enter-prim s_126)))"
"(void)))"
"(values))))"
"(let-values(((result-s_129)((core-form-expander t_125) s_126 ctx_127)))"
"(begin"
"(let-values(((obs_131)(expand-context-observer ctx_127)))"
"(if obs_131"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_131 'exit-prim result-s_129)"
"(call-expand-observe obs_131 'return result-s_129))))"
"(void)))"
" result-s_129)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_132 s_133 ctx_134)"
"(let-values((()"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_134)))"
"(if obs_136"
"(let-values()(let-values()(call-expand-observe obs_136 'enter-prim s_133)))"
"(void)))"
"(values))))"
"(let-values(((result-s_135)((core-form-expander t_132) s_133 ctx_134 #t)))"
"(begin"
"(let-values(((obs_137)(expand-context-observer ctx_134)))"
"(if obs_137"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_137 'exit-prim result-s_135)"
"(call-expand-observe obs_137 'return result-s_135))))"
"(void)))"
" result-s_135)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_138 insp-of-t_139 s_140 id_141 ctx_142 binding_143)"
"(if(not-in-this-expand-context? t_138 ctx_142)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_142)))"
"(if obs_145"
"(let-values()(let-values()(call-expand-observe obs_145 'enter-macro s_140)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_144)"
"(avoid-current-expand-context(substitute-alternate-id s_140 id_141) t_138 ctx_142)))"
"(begin"
"(let-values(((obs_146)(expand-context-observer ctx_142)))"
"(if obs_146(let-values()(let-values()(call-expand-observe obs_146 'exit-macro s_140)))(void)))"
"(let-values(((adj-s79_147) adj-s_144)((ctx80_148) ctx_142))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f adj-s79_147 ctx80_148)"
"(expand7.1 adj-s79_147 ctx80_148)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_151)(expand-context-observer ctx_142)))"
"(if obs_151"
"(let-values()"
"(if(expand-context-only-immediate? ctx_142)"
"(let-values()"
"(begin"
"(call-expand-observe obs_151 'visit s_140)"
"(call-expand-observe obs_151 'resolves id_141)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_149 re-ctx_150)"
"(apply-transformer t_138 insp-of-t_139 s_140 id_141 ctx_142 binding_143)))"
"(begin"
"(let-values(((obs_152)(expand-context-observer ctx_142)))"
"(if obs_152"
"(let-values()"
"(if(expand-context-only-immediate? ctx_142)"
"(let-values()(call-expand-observe obs_152 'return exp-s_149))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_142)"
"(let-values() exp-s_149)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:245:11_153) expand7.1)"
"((exp-s81_154) exp-s_149)"
"((re-ctx82_155) re-ctx_150)"
"((temp83_156)(if(1/rename-transformer? t_138)(1/rename-transformer-target t_138) #f)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 temp83_156 #t exp-s81_154 re-ctx82_155)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:245:11_153"
" keyword-procedure-extract"
" '(#:alternate-id)"
" 4)"
" '(#:alternate-id)"
"(list temp83_156)"
" exp-s81_154"
" re-ctx82_155))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_157 s_158 id_159 ctx_160 binding_161)"
"(if(expand-context-only-immediate? ctx_160)"
"(let-values()"
"(begin"
"(let-values(((obs_162)(expand-context-observer ctx_160)))"
"(if obs_162(let-values()(let-values()(call-expand-observe obs_162 'exit-check s_158)))(void)))"
" id_159))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_164)(expand-context-observer ctx_160)))"
"(if obs_164"
"(let-values()(let-values()(call-expand-observe obs_164 'variable s_158)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_161)(values))))"
"(let-values(((result-s_163)"
"(let-values(((...nder/expand/main.rkt:260:21_165) substitute-variable8.1)"
"((id84_166) id_159)"
"((t85_167) t_157)"
"((temp86_168)"
"(free-id-set-empty-or-just-module*?(expand-context-stops ctx_160))))"
"(if(variable-reference-constant?(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1 temp86_168 id84_166 t85_167)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:260:21_165"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp86_168)"
" id84_166"
" t85_167)))))"
"(begin"
"(let-values(((obs_169)(expand-context-observer ctx_160)))"
"(if obs_169"
"(let-values()(let-values()(call-expand-observe obs_169 'return result-s_163)))"
"(void)))"
" result-s_163))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_170 insp-of-t_171 s_172 id_173 ctx_174 binding_175)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_188)(expand-context-observer ctx_174)))"
"(if obs_188"
"(let-values()(let-values()(call-expand-observe obs_188 'enter-macro s_172)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_176)(syntax-disarm$1 s_172)))"
"(let-values(((intro-scope_177)(new-scope 'macro)))"
"(let-values(((intro-s_178)(add-scope disarmed-s_176 intro-scope_177)))"
"(let-values(((use-s_179 use-scopes_180)(maybe-add-use-site-scope intro-s_178 ctx_174 binding_175)))"
"(let-values(((cleaned-s_181)(syntax-remove-taint-dispatch-properties use-s_179)))"
"(let-values(((def-ctx-scopes_182)(box null)))"
"(let-values(((transformed-s_183)"
"(apply-transformer-in-context"
" t_170"
" cleaned-s_181"
" ctx_174"
" insp-of-t_171"
" intro-scope_177"
" use-scopes_180"
" def-ctx-scopes_182"
" id_173)))"
"(let-values(((result-s_184)(flip-scope transformed-s_183 intro-scope_177)))"
"(let-values(((post-s_185)(maybe-add-post-expansion-scope result-s_184 ctx_174)))"
"(let-values(((tracked-s_186)(syntax-track-origin$1 post-s_185 cleaned-s_181 id_173)))"
"(let-values(((rearmed-s_187)"
"(taint-dispatch"
" tracked-s_186"
"(lambda(t-s_189)(syntax-rearm$1 t-s_189 s_172))"
"(expand-context-phase ctx_174))))"
"(begin"
"(let-values(((obs_190)(expand-context-observer ctx_174)))"
"(if obs_190"
"(let-values()"
"(let-values()(call-expand-observe obs_190 'exit-macro rearmed-s_187)))"
"(void)))"
"(values"
" rearmed-s_187"
"(accumulate-def-ctx-scopes ctx_174 def-ctx-scopes_182))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_191 cleaned-s_192 ctx_193 insp-of-t_194 intro-scope_195 use-scopes_196 def-ctx-scopes_197 id_198)"
"(let-values((()"
"(begin"
"(let-values(((obs_203)(expand-context-observer ctx_193)))"
"(if obs_203"
"(let-values()(let-values()(call-expand-observe obs_203 'macro-pre-x cleaned-s_192)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_199)"
"(not"
"(let-values(((or-part_204)(expand-context-only-immediate? ctx_193)))"
"(if or-part_204"
" or-part_204"
"(not(free-id-set-empty-or-just-module*?(expand-context-stops ctx_193))))))))"
"(let-values(((accum-ctx_200)"
"(if(if confine-def-ctx-scopes?_199"
"(if(expand-context-def-ctx-scopes ctx_193)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_193))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_193(expand-context-def-ctx-scopes ctx_193))"
" ctx_193)))"
"(let-values(((m-ctx_201)"
"(let-values(((the-struct_205) accum-ctx_200))"
"(if(expand-context? the-struct_205)"
"(let-values(((current-introduction-scopes87_206)(cons intro-scope_195 use-scopes_196))"
"((def-ctx-scopes88_207)"
"(if confine-def-ctx-scopes?_199"
" def-ctx-scopes_197"
"(expand-context-def-ctx-scopes ctx_193))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_205)"
"(root-expand-context-post-expansion-scope the-struct_205)"
"(root-expand-context-top-level-bind-scope the-struct_205)"
"(root-expand-context-all-scopes-stx the-struct_205)"
"(root-expand-context-use-site-scopes the-struct_205)"
"(root-expand-context-defined-syms the-struct_205)"
"(root-expand-context-frame-id the-struct_205)"
"(root-expand-context-counter the-struct_205)"
"(root-expand-context-lift-key the-struct_205)"
"(expand-context-context the-struct_205)"
"(expand-context-phase the-struct_205)"
"(expand-context-namespace the-struct_205)"
"(expand-context-env the-struct_205)"
"(expand-context-user-env the-struct_205)"
"(expand-context-post-expansion-scope-action the-struct_205)"
"(expand-context-scopes the-struct_205)"
" def-ctx-scopes88_207"
"(expand-context-binding-layer the-struct_205)"
"(expand-context-reference-records the-struct_205)"
"(expand-context-only-immediate? the-struct_205)"
"(expand-context-just-once? the-struct_205)"
"(expand-context-module-begin-k the-struct_205)"
"(expand-context-need-eventually-defined the-struct_205)"
"(expand-context-allow-unbound? the-struct_205)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_205)"
"(expand-context-stops the-struct_205)"
" current-introduction-scopes87_206"
"(expand-context-declared-submodule-names the-struct_205)"
"(expand-context-lifts the-struct_205)"
"(expand-context-lift-envs the-struct_205)"
"(expand-context-module-lifts the-struct_205)"
"(expand-context-require-lifts the-struct_205)"
"(expand-context-to-module-lifts the-struct_205)"
"(expand-context-requires+provides the-struct_205)"
"(expand-context-name the-struct_205)"
"(expand-context-observer the-struct_205)))"
"                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_205)))))"
"(let-values(((transformed-s_202)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_201"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_193)"
"(add1(expand-context-phase ctx_193)))"
" current-module-code-inspector"
"(let-values(((or-part_208) insp-of-t_194))"
"(if or-part_208 or-part_208(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_191) cleaned-s_192)))))))"
"(begin"
"(let-values(((obs_209)(expand-context-observer ctx_193)))"
"(if obs_209"
"(let-values()(let-values()(call-expand-observe obs_209 'macro-post-x transformed-s_202)))"
"(void)))"
"(if(syntax?$1 transformed-s_202)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_198)"
"                     \"received value from syntax expander was not syntax\""
"                     \"received\""
" transformed-s_202)))"
" transformed-s_202))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_210 ctx_211 binding_212)"
"(if(if(root-expand-context-use-site-scopes ctx_211)"
"(matching-frame?(root-expand-context-frame-id ctx_211)(binding-frame-id binding_212))"
" #f)"
"(let-values()"
"(let-values(((sc_213)(new-scope 'use-site)))"
"(let-values(((b_214)(root-expand-context-use-site-scopes ctx_211)))"
"(begin(set-box! b_214(cons sc_213(unbox b_214)))(values(add-scope s_210 sc_213)(list sc_213))))))"
"(let-values()(values s_210 null)))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_215 bind-frame-id_216)"
"(if current-frame-id_215"
"(let-values(((or-part_217)(eq? current-frame-id_215 bind-frame-id_216)))"
"(if or-part_217 or-part_217(eq? current-frame-id_215 'all)))"
" #f)))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_218 ctx_219)"
"(if(root-expand-context-post-expansion-scope ctx_219)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_219) s_218(root-expand-context-post-expansion-scope ctx_219)))"
"(let-values() s_218))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_220 def-ctx-scopes_221)"
"(if(null?(unbox def-ctx-scopes_221))"
" ctx_220"
"(let-values(((the-struct_222) ctx_220))"
"(if(expand-context? the-struct_222)"
"(let-values(((scopes89_223)(append(unbox def-ctx-scopes_221)(expand-context-scopes ctx_220))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_222)"
"(root-expand-context-post-expansion-scope the-struct_222)"
"(root-expand-context-top-level-bind-scope the-struct_222)"
"(root-expand-context-all-scopes-stx the-struct_222)"
"(root-expand-context-use-site-scopes the-struct_222)"
"(root-expand-context-defined-syms the-struct_222)"
"(root-expand-context-frame-id the-struct_222)"
"(root-expand-context-counter the-struct_222)"
"(root-expand-context-lift-key the-struct_222)"
"(expand-context-context the-struct_222)"
"(expand-context-phase the-struct_222)"
"(expand-context-namespace the-struct_222)"
"(expand-context-env the-struct_222)"
"(expand-context-user-env the-struct_222)"
"(expand-context-post-expansion-scope-action the-struct_222)"
" scopes89_223"
"(expand-context-def-ctx-scopes the-struct_222)"
"(expand-context-binding-layer the-struct_222)"
"(expand-context-reference-records the-struct_222)"
"(expand-context-only-immediate? the-struct_222)"
"(expand-context-just-once? the-struct_222)"
"(expand-context-module-begin-k the-struct_222)"
"(expand-context-need-eventually-defined the-struct_222)"
"(expand-context-allow-unbound? the-struct_222)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_222)"
"(expand-context-stops the-struct_222)"
"(expand-context-current-introduction-scopes the-struct_222)"
"(expand-context-declared-submodule-names the-struct_222)"
"(expand-context-lifts the-struct_222)"
"(expand-context-lift-envs the-struct_222)"
"(expand-context-module-lifts the-struct_222)"
"(expand-context-require-lifts the-struct_222)"
"(expand-context-to-module-lifts the-struct_222)"
"(expand-context-requires+provides the-struct_222)"
"(expand-context-name the-struct_222)"
"(expand-context-observer the-struct_222)))"
"          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_222))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_224"
" in10_225"
" out-of-context-as-variable?9_226"
" out-of-context-as-variable?11_227"
" b12_228"
" ctx13_229"
" id14_230)"
"(let-values(((b_231) b12_228))"
"(let-values(((ctx_232) ctx13_229))"
"(let-values(((id_233) id14_230))"
"(let-values(((in-s_234)(if in10_225 in8_224 #f)))"
"(let-values(((out-of-context-as-variable?_235)"
"(if out-of-context-as-variable?11_227 out-of-context-as-variable?9_226 #f)))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:395:2_236) binding-lookup50.1)"
"((b90_237) b_231)"
"((temp91_238)(expand-context-env ctx_232))"
"((temp92_239)(expand-context-lift-envs ctx_232))"
"((temp93_240)(expand-context-namespace ctx_232))"
"((temp94_241)(expand-context-phase ctx_232))"
"((id95_242) id_233)"
"((in-s96_243) in-s_234)"
"((out-of-context-as-variable?97_244) out-of-context-as-variable?_235))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup50.1))"
"(binding-lookup48.1"
" in-s96_243"
" #t"
" out-of-context-as-variable?97_244"
" #t"
" b90_237"
" temp91_238"
" temp92_239"
" temp93_240"
" temp94_241"
" id95_242)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:395:2_236"
" keyword-procedure-extract"
" '(#:in #:out-of-context-as-variable?)"
" 8)"
" '(#:in #:out-of-context-as-variable?)"
"(list in-s96_243 out-of-context-as-variable?97_244)"
" b90_237"
" temp91_238"
" temp92_239"
" temp93_240"
" temp94_241"
" id95_242)))))))))))"
"(define-values"
"(unpack16.1)"
"(lambda(given-kws_245 given-args_246 b12_247 ctx13_248 id14_249)"
"(let-values(((in10_250)(if(pair? given-kws_245)(eq? '#:in(car given-kws_245)) #f)))"
"(let-values(((in8_251)(if in10_250(car given-args_246)(void)))"
"((given-kws_252)(if in10_250(cdr given-kws_245) given-kws_245))"
"((given-args_253)(if in10_250(cdr given-args_246) given-args_246)))"
"(let-values(((out-of-context-as-variable?11_254)(pair? given-kws_252)))"
"(let-values(((out-of-context-as-variable?9_255)"
"(if out-of-context-as-variable?11_254(car given-args_253)(void))))"
"(lookup15.1"
" in8_251"
" in10_250"
" out-of-context-as-variable?9_255"
" out-of-context-as-variable?11_254"
" b12_247"
" ctx13_248"
" id14_249)))))))"
"(define-values"
"(lookup17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_256 given-argc_257)"
"(if(= given-argc_257 5)"
"(let-values(((l1_258) given-kws_256))"
"(let-values(((l1_259)(if(null? l1_258) l1_258(if(eq?(car l1_258) '#:in)(cdr l1_258) l1_258))))"
"(let-values(((l1_260) l1_259))"
"(let-values(((l1_261)"
"(if(null? l1_260)"
" l1_260"
"(if(eq?(car l1_260) '#:out-of-context-as-variable?)(cdr l1_260) l1_260))))"
"(null? l1_261)))))"
" #f))"
"(case-lambda"
"((given-kws_262 given-args_263 b_264 ctx_265 id_266)"
"(unpack16.1 given-kws_262 given-args_263 b_264 ctx_265 id_266)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((lookup_267)(case-lambda((b_268 ctx_269 id_270)(unpack16.1 null null b_268 ctx_269 id_270)))))"
" lookup_267)))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_271 alternate-id_272)"
"(if(not alternate-id_272)"
"(let-values() s_271)"
"(if(identifier? s_271)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_272 s_271) s_271))"
"(let-values()"
"(let-values(((disarmed-s_273)(syntax-disarm$1 s_271)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_273(cons alternate-id_272(cdr(syntax-e$1 disarmed-s_273))) s_271)"
" s_271)"
" s_271)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_274)"
"(if(if(local-binding? binding_274)(reference-record?(binding-frame-id binding_274)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_274)(local-binding-key binding_274)))"
"(void))))"
"(define-values"
"(expand/capture-lifts28.1)"
"(lambda(always-wrap?21_275"
" always-wrap?25_276"
" begin-form?19_277"
" begin-form?23_278"
" expand-lifts?18_279"
" expand-lifts?22_280"
" lift-key20_281"
" lift-key24_282"
" s26_283"
" ctx27_284)"
"(let-values(((s_285) s26_283))"
"(let-values(((ctx_286) ctx27_284))"
"(let-values(((expand-lifts?_287)(if expand-lifts?22_280 expand-lifts?18_279 #f)))"
"(let-values(((begin-form?_288)(if begin-form?23_278 begin-form?19_277 #f)))"
"(let-values(((lift-key_289)(if lift-key24_282 lift-key20_281(generate-lift-key))))"
"(let-values(((always-wrap?_290)(if always-wrap?25_276 always-wrap?21_275 #f)))"
"(let-values()"
"(let-values(((context_291)(expand-context-context ctx_286)))"
"(let-values(((phase_292)(expand-context-phase ctx_286)))"
"(let-values(((local?_293)(not begin-form?_288)))"
"((letrec-values(((loop_294)"
"(lambda(s_295 always-wrap?_296)"
"(let-values(((lift-env_297)(if local?_293(box empty-env) #f)))"
"(let-values(((lift-ctx_298)"
"(let-values(((...nder/expand/main.rkt:451:21_303)"
" make-lift-context8.1)"
"((temp98_304)"
"(if local?_293"
"(make-local-lift"
" lift-env_297"
"(root-expand-context-counter ctx_286))"
"(make-top-level-lift ctx_286)))"
"((temp99_305)"
"(if(not local?_293)"
"(eq? context_291 'module)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 temp99_305 #t temp98_304)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:451:21_303"
" keyword-procedure-extract"
" '(#:module*-ok?)"
" 3)"
" '(#:module*-ok?)"
"(list temp99_305)"
" temp98_304)))))"
"(let-values(((capture-ctx_299)"
"(let-values(((the-struct_306) ctx_286))"
"(if(expand-context? the-struct_306)"
"(let-values(((lift-key100_307) lift-key_289)"
"((lifts101_308) lift-ctx_298)"
"((lift-envs102_309)"
"(if local?_293"
"(cons"
" lift-env_297"
"(expand-context-lift-envs ctx_286))"
"(expand-context-lift-envs ctx_286)))"
"((module-lifts103_310)"
"(if(let-values(((or-part_311)"
" local?_293))"
"(if or-part_311"
" or-part_311"
"(not"
"(memq"
" context_291"
" '(top-level module)))))"
"(expand-context-module-lifts ctx_286)"
" lift-ctx_298)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_306)"
"(root-expand-context-post-expansion-scope"
" the-struct_306)"
"(root-expand-context-top-level-bind-scope"
" the-struct_306)"
"(root-expand-context-all-scopes-stx the-struct_306)"
"(root-expand-context-use-site-scopes"
" the-struct_306)"
"(root-expand-context-defined-syms the-struct_306)"
"(root-expand-context-frame-id the-struct_306)"
"(root-expand-context-counter the-struct_306)"
" lift-key100_307"
"(expand-context-context the-struct_306)"
"(expand-context-phase the-struct_306)"
"(expand-context-namespace the-struct_306)"
"(expand-context-env the-struct_306)"
"(expand-context-user-env the-struct_306)"
"(expand-context-post-expansion-scope-action"
" the-struct_306)"
"(expand-context-scopes the-struct_306)"
"(expand-context-def-ctx-scopes the-struct_306)"
"(expand-context-binding-layer the-struct_306)"
"(expand-context-reference-records the-struct_306)"
"(expand-context-only-immediate? the-struct_306)"
"(expand-context-just-once? the-struct_306)"
"(expand-context-module-begin-k the-struct_306)"
"(expand-context-need-eventually-defined"
" the-struct_306)"
"(expand-context-allow-unbound? the-struct_306)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_306)"
"(expand-context-stops the-struct_306)"
"(expand-context-current-introduction-scopes"
" the-struct_306)"
"(expand-context-declared-submodule-names"
" the-struct_306)"
" lifts101_308"
" lift-envs102_309"
" module-lifts103_310"
"(expand-context-require-lifts the-struct_306)"
"(expand-context-to-module-lifts the-struct_306)"
"(expand-context-requires+provides the-struct_306)"
"(expand-context-name the-struct_306)"
"(expand-context-observer the-struct_306)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context?\""
" the-struct_306)))))"
"(let-values(((exp-s_300)"
"(let-values(((s104_312) s_295)"
"((capture-ctx105_313) capture-ctx_299))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f s104_312 capture-ctx105_313)"
"(expand7.1 s104_312 capture-ctx105_313)))))"
"(let-values(((lifts_301)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_299))))"
"(let-values(((with-lifts-s_302)"
"(if(let-values(((or-part_314)(pair? lifts_301)))"
"(if or-part_314 or-part_314 always-wrap?_296))"
"(let-values()"
"(if begin-form?_288"
"(let-values(((lifts106_315) lifts_301)"
"((exp-s107_316) exp-s_300)"
"((s108_317) s_295)"
"((phase109_318) phase_292))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" lifts106_315"
" exp-s107_316"
" s108_317"
" phase109_318)"
"(wrap-lifts-as-begin17.1"
" lifts106_315"
" exp-s107_316"
" s108_317"
" phase109_318)))"
"(wrap-lifts-as-let"
" lifts_301"
" exp-s_300"
" s_295"
" phase_292)))"
"(let-values() exp-s_300))))"
"(if(let-values(((or-part_319)(not expand-lifts?_287)))"
"(if or-part_319 or-part_319(null? lifts_301)))"
"(let-values() with-lifts-s_302)"
"(let-values()"
"(begin"
"(let-values(((obs_320)"
"(expand-context-observer ctx_286)))"
"(if obs_320"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_320"
" 'lift-loop"
" with-lifts-s_302)))"
"(void)))"
"(loop_294 with-lifts-s_302 #f)))))))))))))"
" loop_294)"
" s_285"
" always-wrap?_290)))))))))))))"
"(define-values"
"(unpack29.1)"
"(lambda(given-kws_321 given-args_322 s26_323 ctx27_324)"
"(let-values(((always-wrap?25_325)(if(pair? given-kws_321)(eq? '#:always-wrap?(car given-kws_321)) #f)))"
"(let-values(((always-wrap?21_326)(if always-wrap?25_325(car given-args_322)(void)))"
"((given-kws_327)(if always-wrap?25_325(cdr given-kws_321) given-kws_321))"
"((given-args_328)(if always-wrap?25_325(cdr given-args_322) given-args_322)))"
"(let-values(((begin-form?23_329)(if(pair? given-kws_327)(eq? '#:begin-form?(car given-kws_327)) #f)))"
"(let-values(((begin-form?19_330)(if begin-form?23_329(car given-args_328)(void)))"
"((given-kws_331)(if begin-form?23_329(cdr given-kws_327) given-kws_327))"
"((given-args_332)(if begin-form?23_329(cdr given-args_328) given-args_328)))"
"(let-values(((expand-lifts?22_333)"
"(if(pair? given-kws_331)(eq? '#:expand-lifts?(car given-kws_331)) #f)))"
"(let-values(((expand-lifts?18_334)(if expand-lifts?22_333(car given-args_332)(void)))"
"((given-kws_335)(if expand-lifts?22_333(cdr given-kws_331) given-kws_331))"
"((given-args_336)(if expand-lifts?22_333(cdr given-args_332) given-args_332)))"
"(let-values(((lift-key24_337)(pair? given-kws_335)))"
"(let-values(((lift-key20_338)(if lift-key24_337(car given-args_336)(void))))"
"(expand/capture-lifts28.1"
" always-wrap?21_326"
" always-wrap?25_325"
" begin-form?19_330"
" begin-form?23_329"
" expand-lifts?18_334"
" expand-lifts?22_333"
" lift-key20_338"
" lift-key24_337"
" s26_323"
" ctx27_324)))))))))))"
"(define-values"
"(expand/capture-lifts30.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_339 given-argc_340)"
"(if(= given-argc_340 4)"
"(let-values(((l1_341) given-kws_339))"
"(let-values(((l1_342)(if(null? l1_341) l1_341(if(eq?(car l1_341) '#:always-wrap?)(cdr l1_341) l1_341))))"
"(let-values(((l1_343) l1_342))"
"(let-values(((l1_344)"
"(if(null? l1_343) l1_343(if(eq?(car l1_343) '#:begin-form?)(cdr l1_343) l1_343))))"
"(let-values(((l1_345) l1_344))"
"(let-values(((l1_346)"
"(if(null? l1_345) l1_345(if(eq?(car l1_345) '#:expand-lifts?)(cdr l1_345) l1_345))))"
"(let-values(((l1_347) l1_346))"
"(let-values(((l1_348)"
"(if(null? l1_347) l1_347(if(eq?(car l1_347) '#:lift-key)(cdr l1_347) l1_347))))"
"(null? l1_348)))))))))"
" #f))"
"(case-lambda((given-kws_349 given-args_350 s_351 ctx_352)(unpack29.1 given-kws_349 given-args_350 s_351 ctx_352)))"
" null"
" '(#:always-wrap? #:begin-form? #:expand-lifts? #:lift-key)"
"(let-values(((expand/capture-lifts_353)(case-lambda((s_354 ctx_355)(unpack29.1 null null s_354 ctx_355)))))"
" expand/capture-lifts_353)))"
"(define-values"
"(expand-transformer43.1)"
"(lambda(always-wrap?35_356"
" always-wrap?40_357"
" begin-form?32_358"
" begin-form?37_359"
" context31_360"
" context36_361"
" expand-lifts?33_362"
" expand-lifts?38_363"
" lift-key34_364"
" lift-key39_365"
" s41_366"
" ctx42_367)"
"(let-values(((s_368) s41_366))"
"(let-values(((ctx_369) ctx42_367))"
"(let-values(((context_370)(if context36_361 context31_360 'expression)))"
"(let-values(((begin-form?_371)(if begin-form?37_359 begin-form?32_358 #f)))"
"(let-values(((expand-lifts?_372)(if expand-lifts?38_363 expand-lifts?33_362 #t)))"
"(let-values(((lift-key_373)(if lift-key39_365 lift-key34_364(generate-lift-key))))"
"(let-values(((always-wrap?_374)(if always-wrap?40_357 always-wrap?35_356 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_375)(add1(expand-context-phase ctx_369))))"
"(let-values(((ns_376)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_369) phase_375)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_376 phase_375)(values))))"
"(let-values(((trans-ctx_377)"
"(let-values(((the-struct_378) ctx_369))"
"(if(expand-context? the-struct_378)"
"(let-values(((context116_379) context_370)"
"((scopes117_380) null)"
"((phase118_381) phase_375)"
"((namespace119_382) ns_376)"
"((env120_383) empty-env)"
"((only-immediate?121_384) #f)"
"((def-ctx-scopes122_385) #f)"
"((post-expansion-scope123_386) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_378)"
" post-expansion-scope123_386"
"(root-expand-context-top-level-bind-scope the-struct_378)"
"(root-expand-context-all-scopes-stx the-struct_378)"
"(root-expand-context-use-site-scopes the-struct_378)"
"(root-expand-context-defined-syms the-struct_378)"
"(root-expand-context-frame-id the-struct_378)"
"(root-expand-context-counter the-struct_378)"
"(root-expand-context-lift-key the-struct_378)"
" context116_379"
" phase118_381"
" namespace119_382"
" env120_383"
"(expand-context-user-env the-struct_378)"
"(expand-context-post-expansion-scope-action the-struct_378)"
" scopes117_380"
" def-ctx-scopes122_385"
"(expand-context-binding-layer the-struct_378)"
"(expand-context-reference-records the-struct_378)"
" only-immediate?121_384"
"(expand-context-just-once? the-struct_378)"
"(expand-context-module-begin-k the-struct_378)"
"(expand-context-need-eventually-defined the-struct_378)"
"(expand-context-allow-unbound? the-struct_378)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_378)"
"(expand-context-stops the-struct_378)"
"(expand-context-current-introduction-scopes the-struct_378)"
"(expand-context-declared-submodule-names the-struct_378)"
"(expand-context-lifts the-struct_378)"
"(expand-context-lift-envs the-struct_378)"
"(expand-context-module-lifts the-struct_378)"
"(expand-context-require-lifts the-struct_378)"
"(expand-context-to-module-lifts the-struct_378)"
"(expand-context-requires+provides the-struct_378)"
"(expand-context-name the-struct_378)"
"(expand-context-observer the-struct_378)))"
"                                              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_378)))))"
"(let-values(((...nder/expand/main.rkt:517:3_387) expand/capture-lifts30.1)"
"((s110_388) s_368)"
"((trans-ctx111_389) trans-ctx_377)"
"((expand-lifts?112_390) expand-lifts?_372)"
"((begin-form?113_391) begin-form?_371)"
"((lift-key114_392) lift-key_373)"
"((always-wrap?115_393) always-wrap?_374))"
"(if(variable-reference-constant?(#%variable-reference expand/capture-lifts30.1))"
"(expand/capture-lifts28.1"
" always-wrap?115_393"
" #t"
" begin-form?113_391"
" #t"
" expand-lifts?112_390"
" #t"
" lift-key114_392"
" #t"
" s110_388"
" trans-ctx111_389)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:517:3_387"
" keyword-procedure-extract"
" '(#:always-wrap? #:begin-form? #:expand-lifts? #:lift-key)"
" 4)"
" '(#:always-wrap? #:begin-form? #:expand-lifts? #:lift-key)"
"(list always-wrap?115_393 begin-form?113_391 expand-lifts?112_390 lift-key114_392)"
" s110_388"
" trans-ctx111_389))))))))))))))))))"
"(define-values"
"(unpack44.1)"
"(lambda(given-kws_394 given-args_395 s41_396 ctx42_397)"
"(let-values(((always-wrap?40_398)(if(pair? given-kws_394)(eq? '#:always-wrap?(car given-kws_394)) #f)))"
"(let-values(((always-wrap?35_399)(if always-wrap?40_398(car given-args_395)(void)))"
"((given-kws_400)(if always-wrap?40_398(cdr given-kws_394) given-kws_394))"
"((given-args_401)(if always-wrap?40_398(cdr given-args_395) given-args_395)))"
"(let-values(((begin-form?37_402)(if(pair? given-kws_400)(eq? '#:begin-form?(car given-kws_400)) #f)))"
"(let-values(((begin-form?32_403)(if begin-form?37_402(car given-args_401)(void)))"
"((given-kws_404)(if begin-form?37_402(cdr given-kws_400) given-kws_400))"
"((given-args_405)(if begin-form?37_402(cdr given-args_401) given-args_401)))"
"(let-values(((context36_406)(if(pair? given-kws_404)(eq? '#:context(car given-kws_404)) #f)))"
"(let-values(((context31_407)(if context36_406(car given-args_405)(void)))"
"((given-kws_408)(if context36_406(cdr given-kws_404) given-kws_404))"
"((given-args_409)(if context36_406(cdr given-args_405) given-args_405)))"
"(let-values(((expand-lifts?38_410)"
"(if(pair? given-kws_408)(eq? '#:expand-lifts?(car given-kws_408)) #f)))"
"(let-values(((expand-lifts?33_411)(if expand-lifts?38_410(car given-args_409)(void)))"
"((given-kws_412)(if expand-lifts?38_410(cdr given-kws_408) given-kws_408))"
"((given-args_413)(if expand-lifts?38_410(cdr given-args_409) given-args_409)))"
"(let-values(((lift-key39_414)(pair? given-kws_412)))"
"(let-values(((lift-key34_415)(if lift-key39_414(car given-args_413)(void))))"
"(expand-transformer43.1"
" always-wrap?35_399"
" always-wrap?40_398"
" begin-form?32_403"
" begin-form?37_402"
" context31_407"
" context36_406"
" expand-lifts?33_411"
" expand-lifts?38_410"
" lift-key34_415"
" lift-key39_414"
" s41_396"
" ctx42_397)))))))))))))"
"(define-values"
"(expand-transformer45.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_416 given-argc_417)"
"(if(= given-argc_417 4)"
"(let-values(((l1_418) given-kws_416))"
"(let-values(((l1_419)(if(null? l1_418) l1_418(if(eq?(car l1_418) '#:always-wrap?)(cdr l1_418) l1_418))))"
"(let-values(((l1_420) l1_419))"
"(let-values(((l1_421)"
"(if(null? l1_420) l1_420(if(eq?(car l1_420) '#:begin-form?)(cdr l1_420) l1_420))))"
"(let-values(((l1_422) l1_421))"
"(let-values(((l1_423)"
"(if(null? l1_422) l1_422(if(eq?(car l1_422) '#:context)(cdr l1_422) l1_422))))"
"(let-values(((l1_424) l1_423))"
"(let-values(((l1_425)"
"(if(null? l1_424)"
" l1_424"
"(if(eq?(car l1_424) '#:expand-lifts?)(cdr l1_424) l1_424))))"
"(let-values(((l1_426) l1_425))"
"(let-values(((l1_427)"
"(if(null? l1_426)"
" l1_426"
"(if(eq?(car l1_426) '#:lift-key)(cdr l1_426) l1_426))))"
"(null? l1_427)))))))))))"
" #f))"
"(case-lambda((given-kws_428 given-args_429 s_430 ctx_431)(unpack44.1 given-kws_428 given-args_429 s_430 ctx_431)))"
" null"
" '(#:always-wrap? #:begin-form? #:context #:expand-lifts? #:lift-key)"
"(let-values(((expand-transformer_432)(case-lambda((s_433 ctx_434)(unpack44.1 null null s_433 ctx_434)))))"
" expand-transformer_432)))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_435 ids_436 ctx_437)"
"(let-values(((exp-rhs_438)"
"(let-values(((rhs124_440) rhs_435)((temp125_441)(as-named-context ctx_437 ids_436)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer45.1))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f rhs124_440 temp125_441)"
"(expand-transformer45.1 rhs124_440 temp125_441)))))"
"(let-values(((phase_439)(add1(expand-context-phase ctx_437))))"
"(values"
" exp-rhs_438"
"(eval-for-bindings"
" ids_436"
" exp-rhs_438"
" phase_439"
"(namespace->namespace-at-phase(expand-context-namespace ctx_437) phase_439)"
" ctx_437))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_442 ids_443 ctx_444)"
"(let-values(((exp-rhs_445 vals_446)(expand+eval-for-syntaxes-binding rhs_442 ids_443 ctx_444))) vals_446)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_447 s_448 phase_449 ns_450 ctx_451)"
"(let-values(((compiled_452)"
"(compile-single"
" s_448"
"(let-values(((...nder/expand/main.rkt:549:37_454) make-compile-context18.1)"
"((ns126_455) ns_450)"
"((phase127_456) phase_449))"
"(if(variable-reference-constant?(#%variable-reference make-compile-context18.1))"
"(make-compile-context16.1 #f #f #f #f #f #f ns126_455 #t phase127_456 #t #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:549:37_454"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list ns126_455 phase127_456)))))))"
"(let-values(((vals_453)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_451"
" 1/current-namespace"
" ns_450"
" eval-jit-enabled"
" #f)"
"(let-values()(eval-single-top compiled_452 ns_450))))"
" list)))"
"(begin"
"(if(=(length vals_453)(length ids_447))"
"(void)"
"(let-values()"
"              (error \"wrong number of results (\" (length vals_453) \"vs.\" (length ids_447) \")\" \"from\" s_448)))"
" vals_453)))))"
"(define-values"
"(rebuild51.1)"
"(lambda(track?46_457 track?47_458 orig-s48_459 disarmed-orig-s49_460 new50_461)"
"(let-values(((orig-s_462) orig-s48_459))"
"(let-values(((disarmed-orig-s_463) disarmed-orig-s49_460))"
"(let-values(((new_464) new50_461))"
"(let-values(((track?_465)(if track?47_458 track?46_457 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1 disarmed-orig-s_463 new_464 orig-s_462(if track?_465 orig-s_462 #f))"
" orig-s_462))))))))"
"(define-values"
"(unpack52.1$1)"
"(lambda(given-kws_466 given-args_467 orig-s48_468 disarmed-orig-s49_469 new50_470)"
"(let-values(((track?47_471)(pair? given-kws_466)))"
"(let-values(((track?46_472)(if track?47_471(car given-args_467)(void))))"
"(rebuild51.1 track?46_472 track?47_471 orig-s48_468 disarmed-orig-s49_469 new50_470)))))"
"(define-values"
"(rebuild53.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_473 given-argc_474)"
"(if(= given-argc_474 5)"
"(let-values(((l1_475) given-kws_473))"
"(let-values(((l1_476)(if(null? l1_475) l1_475(if(eq?(car l1_475) '#:track?)(cdr l1_475) l1_475))))"
"(null? l1_476)))"
" #f))"
"(case-lambda"
"((given-kws_477 given-args_478 orig-s_479 disarmed-orig-s_480 new_481)"
"(unpack52.1$1 given-kws_477 given-args_478 orig-s_479 disarmed-orig-s_480 new_481)))"
" null"
" '(#:track?)"
"(let-values(((rebuild_482)"
"(case-lambda"
"((orig-s_483 disarmed-orig-s_484 new_485)"
"(unpack52.1$1 null null orig-s_483 disarmed-orig-s_484 new_485)))))"
" rebuild_482)))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_486 trans-idss_487)"
"(if(null? trans-idss_487)"
"(let-values() s_486)"
"(let-values()"
"(syntax-property$1"
" s_486"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_487)"
"(let-values(((or-part_488)(syntax-property$1 s_486 'disappeared-binding)))"
"(if or-part_488 or-part_488 null))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_489 ctx_490)"
"(if((letrec-values(((loop_491)"
"(lambda(ids_492)"
"(let-values(((or-part_493)(identifier? ids_492)))"
"(if or-part_493"
" or-part_493"
"(if(pair? ids_492)"
"(let-values(((or-part_494)(loop_491(car ids_492))))"
"(if or-part_494 or-part_494(loop_491(cdr ids_492))))"
" #f))))))"
" loop_491)"
" ids_489)"
"(gensym 'binding-layer)"
"(expand-context-binding-layer ctx_490))))"
"(void)"
"(void)"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= 1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$1 p-core-stx_3 'module*) phase_2 phase_2)"
" #f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(alt-reverse"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((sym_8)(unsafe-car lst_7)))"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_3 sym_8))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(for-loop_5 fold-var_9(unsafe-cdr lst_7))))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(void)"
"(void)"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'frame-id)"
"(make-struct-field-accessor -ref_9 1 'scope)"
"(make-struct-field-accessor -ref_9 2 'add-scope?)"
"(make-struct-field-accessor -ref_9 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_41"
" make-_42"
" ?_43"
"(make-struct-field-accessor -ref_44 0 'id)"
"(make-struct-field-accessor -ref_44 1 'sym)"
"(make-struct-field-accessor -ref_44 2 'value)"
"(make-struct-field-accessor -ref_44 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_76)"
"(lambda(parent-ctx3_77 add-scope?4_78 parent-ctx5_79 add-scope?6_80)"
"(let-values(((parent-ctx_81)(if parent-ctx5_79 parent-ctx3_77 #f)))"
"(let-values(((add-scope?_82)(if add-scope?6_80 add-scope?4_78 #t)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_87)(not parent-ctx_81)))"
"(if or-part_87 or-part_87(1/internal-definition-context? parent-ctx_81)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                             \"(or/c #f internal-definition-context?)\""
" parent-ctx_81)))"
"(values))))"
"(let-values(((ctx_83)"
"(let-values(((temp38_88) 'syntax-local-make-definition-context))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp38_88 #t)"
"(get-current-expand-context8.1 temp38_88)))))"
"(let-values(((frame-id_84)"
"(let-values(((or-part_89)(root-expand-context-frame-id ctx_83)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)"
"(if parent-ctx_81"
"(internal-definition-context-frame-id parent-ctx_81)"
" #f)))"
"(if or-part_90 or-part_90(gensym)))))))"
"(let-values(((sc_85)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_86)(expand-context-def-ctx-scopes ctx_83)))"
"(begin"
"(if def-ctx-scopes_86"
"(void)"
"(let-values()"
"                                        (error \"internal error: no box to accumulate definition-context scopes\")))"
"(set-box! def-ctx-scopes_86(cons sc_85(unbox def-ctx-scopes_86)))"
"(internal-definition-context1.1"
" frame-id_84"
" sc_85"
" add-scope?_82"
"(box null))))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_76 #f #f #f #f))"
"((parent-ctx_91 add-scope?4_92)(syntax-local-make-definition-context7_76 parent-ctx_91 add-scope?4_92 #t #t))"
"((parent-ctx3_93)(syntax-local-make-definition-context7_76 parent-ctx3_93 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_94 s_95 intdef_96)"
"(let-values((()"
"(begin"
"(if(if(list? ids_94)(andmap2 identifier? ids_94) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_94)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_104)(not s_95)))(if or-part_104 or-part_104(syntax?$1 s_95)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_95)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_96)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                             \"internal-definition-context?\""
" intdef_96)))"
"(values))))"
"(let-values(((ctx_97)"
"(let-values(((temp39_105) 'local-expand))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp39_105 #t)"
"(get-current-expand-context8.1 temp39_105)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_106)(expand-context-observer ctx_97)))"
"(if obs_106"
"(let-values()(let-values()(call-expand-observe obs_106 'local-bind ids_94)))"
"(void)))"
"(values))))"
"(let-values(((phase_98)(expand-context-phase ctx_97)))"
"(let-values(((intdef-env_99)(add-intdef-bindings(expand-context-env ctx_97) intdef_96)))"
"(let-values(((intdef-ids_100)"
"(alt-reverse"
"(let-values(((lst_107) ids_94))"
"(begin"
"(if(list? lst_107)(void)(let-values()(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_109 lst_110)"
"(if(pair? lst_110)"
"(let-values(((id_111)(unsafe-car lst_110)))"
"(let-values(((fold-var_112)"
"(let-values(((fold-var_113) fold-var_109))"
"(let-values(((fold-var_114)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_115)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_111"
" ctx_97)"
" ctx_97)))"
"(let-values(((...finition-context.rkt:71:23_116)"
" add-intdef-scopes23.1)"
"((pre-id40_117)"
" pre-id_115)"
"((intdef41_118)"
" intdef_96)"
"((temp42_119)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp42_119"
" #t"
" pre-id40_117"
" intdef41_118)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:71:23_116"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list temp42_119)"
" pre-id40_117"
" intdef41_118)))))"
" fold-var_113))))"
"(values fold-var_114)))))"
"(for-loop_108 fold-var_112(unsafe-cdr lst_110))))"
" fold-var_109))))"
" for-loop_108)"
" null"
" lst_107))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_97)))"
"(if obs_120"
"(let-values()"
"(let-values()(call-expand-observe obs_120 'rename-list intdef-ids_100)))"
"(void)))"
"(values))))"
"(let-values(((syms_101)"
"(alt-reverse"
"(let-values(((lst_121) intdef-ids_100))"
"(begin"
"(if(list? lst_121)(void)(let-values()(in-list lst_121)))"
"((letrec-values(((for-loop_122)"
"(lambda(fold-var_123 lst_124)"
"(if(pair? lst_124)"
"(let-values(((intdef-id_125)(unsafe-car lst_124)))"
"(let-values(((fold-var_126)"
"(let-values(((fold-var_127)"
" fold-var_123))"
"(let-values(((fold-var_128)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...finition-context.rkt:74:17_129)"
" add-local-binding!37.1)"
"((intdef-id43_130)"
" intdef-id_125)"
"((phase44_131)"
" phase_98)"
"((temp45_132)"
"(root-expand-context-counter"
" ctx_97))"
"((temp46_133)"
"(internal-definition-context-frame-id"
" intdef_96)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" temp46_133"
" #t"
" #f"
" #f"
" intdef-id43_130"
" phase44_131"
" temp45_132)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:74:17_129"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list"
" temp46_133)"
" intdef-id43_130"
" phase44_131"
" temp45_132))))"
" fold-var_127))))"
"(values fold-var_128)))))"
"(for-loop_122 fold-var_126(unsafe-cdr lst_124))))"
" fold-var_123))))"
" for-loop_122)"
" null"
" lst_121))))))"
"(let-values(((vals_102)"
"(if s_95"
"(let-values()"
"(let-values(((input-s_134)"
"(flip-introduction-scopes"
"(let-values(((...finition-context.rkt:79:48_136)"
" add-intdef-scopes23.1)"
"((s47_137) s_95)"
"((intdef48_138) intdef_96)"
"((temp49_139) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp49_139"
" #t"
" s47_137"
" intdef48_138)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:79:48_136"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list temp49_139)"
" s47_137"
" intdef48_138)))"
" ctx_97)))"
"(let-values(((tmp-env_135)"
"(let-values(((lst_140) syms_101))"
"(begin"
"(if(list? lst_140)"
"(void)"
"(let-values()(in-list lst_140)))"
"((letrec-values(((for-loop_141)"
"(lambda(env_142 lst_143)"
"(if(pair? lst_143)"
"(let-values(((sym_144)"
"(unsafe-car lst_143)))"
"(let-values(((env_145)"
"(let-values(((env_146)"
" env_142))"
"(let-values(((env_147)"
"(let-values()"
"(hash-set"
" env_146"
" sym_144"
" variable))))"
"(values"
" env_147)))))"
"(for-loop_141"
" env_145"
"(unsafe-cdr lst_143))))"
" env_142))))"
" for-loop_141)"
" intdef-env_99"
" lst_140)))))"
"(eval-for-syntaxes-binding"
" input-s_134"
" ids_94"
"(let-values(((...finition-context.rkt:84:33_148)"
" make-local-expand-context35.1)"
"((temp50_149)"
"(let-values(((the-struct_152) ctx_97))"
"(if(expand-context? the-struct_152)"
"(let-values(((env53_153) tmp-env_135))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_152)"
"(root-expand-context-post-expansion-scope"
" the-struct_152)"
"(root-expand-context-top-level-bind-scope"
" the-struct_152)"
"(root-expand-context-all-scopes-stx the-struct_152)"
"(root-expand-context-use-site-scopes the-struct_152)"
"(root-expand-context-defined-syms the-struct_152)"
"(root-expand-context-frame-id the-struct_152)"
"(root-expand-context-counter the-struct_152)"
"(root-expand-context-lift-key the-struct_152)"
"(expand-context-context the-struct_152)"
"(expand-context-phase the-struct_152)"
"(expand-context-namespace the-struct_152)"
" env53_153"
"(expand-context-user-env the-struct_152)"
"(expand-context-post-expansion-scope-action"
" the-struct_152)"
"(expand-context-scopes the-struct_152)"
"(expand-context-def-ctx-scopes the-struct_152)"
"(expand-context-binding-layer the-struct_152)"
"(expand-context-reference-records the-struct_152)"
"(expand-context-only-immediate? the-struct_152)"
"(expand-context-just-once? the-struct_152)"
"(expand-context-module-begin-k the-struct_152)"
"(expand-context-need-eventually-defined"
" the-struct_152)"
"(expand-context-allow-unbound? the-struct_152)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_152)"
"(expand-context-stops the-struct_152)"
"(expand-context-current-introduction-scopes"
" the-struct_152)"
"(expand-context-declared-submodule-names"
" the-struct_152)"
"(expand-context-lifts the-struct_152)"
"(expand-context-lift-envs the-struct_152)"
"(expand-context-module-lifts the-struct_152)"
"(expand-context-require-lifts the-struct_152)"
"(expand-context-to-module-lifts the-struct_152)"
"(expand-context-requires+provides the-struct_152)"
"(expand-context-name the-struct_152)"
"(expand-context-observer the-struct_152)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_152))))"
"((temp51_150) 'expression)"
"((intdef52_151) intdef_96))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" temp51_150"
" intdef52_151"
" #f"
" #f"
" #f"
" #f"
" temp50_149)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:84:33_148"
" keyword-procedure-extract"
" '(#:context #:intdefs)"
" 3)"
" '(#:context #:intdefs)"
"(list temp51_150 intdef52_151)"
" temp50_149)))))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_154) ids_94))"
"(begin"
"(if(list? lst_154)(void)(let-values()(in-list lst_154)))"
"((letrec-values(((for-loop_155)"
"(lambda(fold-var_156 lst_157)"
"(if(pair? lst_157)"
"(let-values(((id_158)(unsafe-car lst_157)))"
"(let-values(((fold-var_159)"
"(let-values(((fold-var_160)"
" fold-var_156))"
"(let-values(((fold-var_161)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_160))))"
"(values fold-var_161)))))"
"(for-loop_155"
" fold-var_159"
"(unsafe-cdr lst_157))))"
" fold-var_156))))"
" for-loop_155)"
" null"
" lst_154))))))))"
"(let-values(((env-mixins_103)(internal-definition-context-env-mixins intdef_96)))"
"(begin"
"(set-box!"
" env-mixins_103"
"(append"
"(alt-reverse"
"(let-values(((lst_162) intdef-ids_100)((lst_163) syms_101)((lst_164) vals_102))"
"(begin"
"(if(list? lst_162)(void)(let-values()(in-list lst_162)))"
"(if(list? lst_163)(void)(let-values()(in-list lst_163)))"
"(if(list? lst_164)(void)(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(fold-var_166 lst_167 lst_168 lst_169)"
"(if(if(pair? lst_167)"
"(if(pair? lst_168)(pair? lst_169) #f)"
" #f)"
"(let-values(((intdef-id_170)(unsafe-car lst_167))"
"((sym_171)(unsafe-car lst_168))"
"((val_172)(unsafe-car lst_169)))"
"(let-values(((fold-var_173)"
"(let-values(((fold-var_174) fold-var_166))"
"(let-values(((fold-var_175)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_172"
" intdef-id_170"
" phase_98)"
"(env-mixin2.1"
" intdef-id_170"
" sym_171"
" val_172"
"(make-weak-hasheq))))"
" fold-var_174))))"
"(values fold-var_175)))))"
"(for-loop_165"
" fold-var_173"
"(unsafe-cdr lst_167)"
"(unsafe-cdr lst_168)"
"(unsafe-cdr lst_169))))"
" fold-var_166))))"
" for-loop_165)"
" null"
" lst_162"
" lst_163"
" lst_164))))"
"(unbox env-mixins_103)))"
"(let-values(((obs_176)(expand-context-observer ctx_97)))"
"(if obs_176"
"(let-values()(let-values()(call-expand-observe obs_176 'exit-local-bind)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_177)"
"(begin"
"(if(1/internal-definition-context? intdef_177)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_177)))"
"(alt-reverse"
"(let-values(((lst_178)(unbox(internal-definition-context-env-mixins intdef_177))))"
"(begin"
"(if(list? lst_178)(void)(let-values()(in-list lst_178)))"
"((letrec-values(((for-loop_179)"
"(lambda(fold-var_180 lst_181)"
"(if(pair? lst_181)"
"(let-values(((env-mixin_182)(unsafe-car lst_181)))"
"(let-values(((fold-var_183)"
"(let-values(((fold-var_184) fold-var_180))"
"(let-values(((fold-var_185)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_182))"
" fold-var_184))))"
"(values fold-var_185)))))"
"(for-loop_179 fold-var_183(unsafe-cdr lst_181))))"
" fold-var_180))))"
" for-loop_179)"
" null"
" lst_178)))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_186)"
"(lambda(intdef11_187 s12_188 mode9_189 mode10_190)"
"(let-values(((intdef_191) intdef11_187))"
"(let-values(((s_192) s12_188))"
"(let-values(((mode_193)(if mode10_190 mode9_189 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_191)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_191)))"
"(if(syntax?$1 s_192)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_192)))"
"(let-values(((...finition-context.rkt:112:2_194) add-intdef-scopes23.1)"
"((s54_195) s_192)"
"((intdef55_196) intdef_191)"
"((temp56_197)"
"(let-values(((tmp_198) mode_193))"
"(if(equal? tmp_198 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_198 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_198 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_193))))))))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 temp56_197 #t #f #f s54_195 intdef55_196)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:112:2_194"
" keyword-procedure-extract"
" '(#:action)"
" 4)"
" '(#:action)"
"(list temp56_197)"
" s54_195"
" intdef55_196)))))))))))"
"(case-lambda"
"((intdef_199 s_200)(internal-definition-context-introduce13_186 intdef_199 s_200 #f #f))"
"((intdef_201 s_202 mode9_203)(internal-definition-context-introduce13_186 intdef_201 s_202 mode9_203 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_204)"
"(begin"
"(if(1/internal-definition-context? intdef_204)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_204)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_205 intdef_206)"
"(begin"
"(if(identifier? id_205)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_205)))"
"(if(let-values(((or-part_207)(1/internal-definition-context? intdef_206)))"
"(if or-part_207 or-part_207(if(list? intdef_206)(andmap2 1/internal-definition-context? intdef_206) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_206)))"
"(let-values(((pos->vals_208 pos-next_209 init_210 pos-cont?_211 val-cont?_212 all-cont?_213)"
"(make-sequence '(intdef)(in-intdefs intdef_206))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_214)"
"(lambda(id_215 pos_216)"
"(if(if pos-cont?_211(pos-cont?_211 pos_216) #t)"
"(let-values(((intdef_217)(pos->vals_208 pos_216)))"
"(if(if val-cont?_212(val-cont?_212 intdef_217) #t)"
"(let-values(((id_218)"
"(let-values(((id_219) id_215))"
"(let-values(((id_220)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_217"
" id_219"
" 'remove))))"
"(values id_220)))))"
"(if(if all-cont?_213(all-cont?_213 pos_216 intdef_217) #t)"
"(for-loop_214 id_218(pos-next_209 pos_216))"
" id_218))"
" id_215))"
" id_215))))"
" for-loop_214)"
" id_205"
" init_210))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_221)"
"(if(not intdefs_221)"
"(let-values()(in-list null))"
"(if(list? intdefs_221)"
"(let-values()(in-list(alt-reverse intdefs_221)))"
"(let-values()(in-value intdefs_221))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_222 intdefs_223)"
"(let-values(((pos->vals_224 pos-next_225 init_226 pos-cont?_227 val-cont?_228 all-cont?_229)"
"(make-sequence '(intdef)(in-intdefs intdefs_223))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_230)"
"(lambda(env_231 pos_232)"
"(if(if pos-cont?_227(pos-cont?_227 pos_232) #t)"
"(let-values(((intdef_233)(pos->vals_224 pos_232)))"
"(if(if val-cont?_228(val-cont?_228 intdef_233) #t)"
"(let-values(((env_234)"
"(let-values(((env_235) env_231))"
"(let-values(((env_236)"
"(let-values()"
"(let-values(((env-mixins_237)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_233))))"
"((letrec-values(((loop_238)"
"(lambda(env_239 env-mixins_240)"
"(if(null? env-mixins_240)"
"(let-values() env_239)"
"(let-values()"
"(let-values(((env-mixin_241)"
"(car"
" env-mixins_240)))"
"(let-values(((or-part_242)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_241)"
" env_239"
" #f)))"
"(if or-part_242"
" or-part_242"
"(let-values(((new-env_243)"
"(env-extend"
"(loop_238"
" env_239"
"(cdr"
" env-mixins_240))"
"(env-mixin-sym"
" env-mixin_241)"
"(env-mixin-value"
" env-mixin_241))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_241)"
" env_239"
" new-env_243)"
" new-env_243))))))))))"
" loop_238)"
" env_235"
" env-mixins_237)))))"
"(values env_236)))))"
"(if(if all-cont?_229(all-cont?_229 pos_232 intdef_233) #t)"
"(for-loop_230 env_234(pos-next_225 pos_232))"
" env_234))"
" env_231))"
" env_231))))"
" for-loop_230)"
" env_222"
" init_226)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_244 action18_245 always?15_246 always?17_247 s19_248 intdefs20_249)"
"(let-values(((s_250) s19_248))"
"(let-values(((intdefs_251) intdefs20_249))"
"(let-values(((always?_252)(if always?17_247 always?15_246 #f)))"
"(let-values(((action_253)(if action18_245 action16_244 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_254 pos-next_255 init_256 pos-cont?_257 val-cont?_258 all-cont?_259)"
"(make-sequence '(intdef)(in-intdefs intdefs_251))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_260)"
"(lambda(s_261 pos_262)"
"(if(if pos-cont?_257(pos-cont?_257 pos_262) #t)"
"(let-values(((intdef_263)(pos->vals_254 pos_262)))"
"(if(if val-cont?_258(val-cont?_258 intdef_263) #t)"
"(let-values(((s_264)"
"(let-values(((s_265) s_261))"
"(if(let-values(((or-part_266) always?_252))"
"(if or-part_266"
" or-part_266"
"(internal-definition-context-add-scope?"
" intdef_263)))"
"(let-values(((s_267) s_265))"
"(let-values(((s_268)"
"(let-values()"
"(action_253"
" s_267"
"(internal-definition-context-scope"
" intdef_263)))))"
"(values s_268)))"
" s_265))))"
"(if(if all-cont?_259(all-cont?_259 pos_262 intdef_263) #t)"
"(for-loop_260 s_264(pos-next_255 pos_262))"
" s_264))"
" s_261))"
" s_261))))"
" for-loop_260)"
" s_250"
" init_256))))))))))"
"(define-values"
"(unpack22.1)"
"(lambda(given-kws_269 given-args_270 s19_271 intdefs20_272)"
"(let-values(((action18_273)(if(pair? given-kws_269)(eq? '#:action(car given-kws_269)) #f)))"
"(let-values(((action16_274)(if action18_273(car given-args_270)(void)))"
"((given-kws_275)(if action18_273(cdr given-kws_269) given-kws_269))"
"((given-args_276)(if action18_273(cdr given-args_270) given-args_270)))"
"(let-values(((always?17_277)(pair? given-kws_275)))"
"(let-values(((always?15_278)(if always?17_277(car given-args_276)(void))))"
"(add-intdef-scopes21.1 action16_274 action18_273 always?15_278 always?17_277 s19_271 intdefs20_272)))))))"
"(define-values"
"(add-intdef-scopes23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_279 given-argc_280)"
"(if(= given-argc_280 4)"
"(let-values(((l1_281) given-kws_279))"
"(let-values(((l1_282)(if(null? l1_281) l1_281(if(eq?(car l1_281) '#:action)(cdr l1_281) l1_281))))"
"(let-values(((l1_283) l1_282))"
"(let-values(((l1_284)(if(null? l1_283) l1_283(if(eq?(car l1_283) '#:always?)(cdr l1_283) l1_283))))"
"(null? l1_284)))))"
" #f))"
"(case-lambda"
"((given-kws_285 given-args_286 s_287 intdefs_288)(unpack22.1 given-kws_285 given-args_286 s_287 intdefs_288)))"
" null"
" '(#:action #:always?)"
"(let-values(((add-intdef-scopes_289)(case-lambda((s_290 intdefs_291)(unpack22.1 null null s_290 intdefs_291)))))"
" add-intdef-scopes_289)))"
"(define-values"
"(lifted/1.1$8 lifted/2.1$8 lifted/3.1$7 lifted/4.1$7 lifted/5.1$7)"
"(make-struct-type"
" 'make-local-expand-context"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-local-expand-context(case-lambda((self_292 ctx_293)(apply missing-kw self_292 ctx_293 null))))))"
"(current-inspector)"
"(case-lambda((self_294 ctx_295)(apply missing-kw self_294 ctx_295 null)))))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_296 intdefs26_297 phase25_298 phase29_299 stop-ids27_300 stop-ids31_301 ctx32_302)"
"(let-values(((ctx_303) ctx32_302))"
"(let-values(((context_304) context24_296))"
"(let-values(((phase_305)(if phase29_299 phase25_298(expand-context-phase ctx_303))))"
"(let-values(((intdefs_306) intdefs26_297))"
"(let-values(((stop-ids_307)(if stop-ids31_301 stop-ids27_300 #f)))"
"(let-values()"
"(let-values(((same-kind?_308)"
"(let-values(((or-part_311)(eq? context_304(expand-context-context ctx_303))))"
"(if or-part_311"
" or-part_311"
"(if(list? context_304)(list?(expand-context-context ctx_303)) #f)))))"
"(let-values(((all-stop-ids_309)"
"(if stop-ids_307(stop-ids->all-stop-ids stop-ids_307 phase_305) #f)))"
"(let-values(((def-ctx-scopes_310)"
"(if(expand-context-def-ctx-scopes ctx_303)"
"(unbox(expand-context-def-ctx-scopes ctx_303))"
" null)))"
"(let-values(((the-struct_312) ctx_303))"
"(if(expand-context? the-struct_312)"
"(let-values(((context57_313) context_304)"
"((env58_314)(add-intdef-bindings(expand-context-env ctx_303) intdefs_306))"
"((use-site-scopes59_315)"
"(if(let-values(((or-part_325)(eq? context_304 'module)))"
"(if or-part_325 or-part_325(list? context_304)))"
"(let-values(((or-part_326)(root-expand-context-use-site-scopes ctx_303)))"
"(if or-part_326 or-part_326(box null)))"
" #f))"
"((frame-id60_316)"
"(let-values(((pos->vals_327"
" pos-next_328"
" init_329"
" pos-cont?_330"
" val-cont?_331"
" all-cont?_332)"
"(make-sequence '(intdef)(in-intdefs intdefs_306))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_333)"
"(lambda(frame-id_334 pos_335)"
"(if(if pos-cont?_330(pos-cont?_330 pos_335) #t)"
"(let-values(((intdef_336)(pos->vals_327 pos_335)))"
"(if(if val-cont?_331(val-cont?_331 intdef_336) #t)"
"(let-values(((frame-id_337)"
"(let-values(((frame-id_338)"
" frame-id_334))"
"(let-values(((frame-id_339)"
"(let-values()"
"(let-values(((i-frame-id_340)"
"(internal-definition-context-frame-id"
" intdef_336)))"
"(if(if frame-id_338"
"(if i-frame-id_340"
"(not"
"(eq?"
" frame-id_338"
" i-frame-id_340))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values(((or-part_341)"
" frame-id_338))"
"(if or-part_341"
" or-part_341"
" i-frame-id_340))))))))"
"(values frame-id_339)))))"
"(if(if all-cont?_332"
"(all-cont?_332 pos_335 intdef_336)"
" #t)"
"(for-loop_333"
" frame-id_337"
"(pos-next_328 pos_335))"
" frame-id_337))"
" frame-id_334))"
" frame-id_334))))"
" for-loop_333)"
"(root-expand-context-frame-id ctx_303)"
" init_329))))"
"((post-expansion-scope61_317)"
"(if intdefs_306"
"(new-scope 'macro)"
"(if same-kind?_308"
"(if(memq context_304 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_303)"
" #f)"
" #f)))"
"((post-expansion-scope-action62_318)"
"(if intdefs_306"
"(lambda(s_342 placeholder-sc_343)"
"(let-values(((s69_344) s_342)((intdefs70_345) intdefs_306))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f s69_344 intdefs70_345)"
"(add-intdef-scopes23.1 s69_344 intdefs70_345))))"
"(expand-context-post-expansion-scope-action ctx_303)))"
"((scopes63_319)(append def-ctx-scopes_310(expand-context-scopes ctx_303)))"
"((only-immediate?64_320)(not stop-ids_307))"
"((just-once?65_321) #f)"
"((preserve-#%expression-and-do-not-add-#%top?66_322) #t)"
"((stops67_323)"
"(free-id-set"
" phase_305"
"(let-values(((or-part_346) all-stop-ids_309))"
"(if or-part_346 or-part_346 null))))"
"((current-introduction-scopes68_324) null))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_312)"
" post-expansion-scope61_317"
"(root-expand-context-top-level-bind-scope the-struct_312)"
"(root-expand-context-all-scopes-stx the-struct_312)"
" use-site-scopes59_315"
"(root-expand-context-defined-syms the-struct_312)"
" frame-id60_316"
"(root-expand-context-counter the-struct_312)"
"(root-expand-context-lift-key the-struct_312)"
" context57_313"
"(expand-context-phase the-struct_312)"
"(expand-context-namespace the-struct_312)"
" env58_314"
"(expand-context-user-env the-struct_312)"
" post-expansion-scope-action62_318"
" scopes63_319"
"(expand-context-def-ctx-scopes the-struct_312)"
"(expand-context-binding-layer the-struct_312)"
"(expand-context-reference-records the-struct_312)"
" only-immediate?64_320"
" just-once?65_321"
"(expand-context-module-begin-k the-struct_312)"
"(expand-context-need-eventually-defined the-struct_312)"
"(expand-context-allow-unbound? the-struct_312)"
" preserve-#%expression-and-do-not-add-#%top?66_322"
" stops67_323"
" current-introduction-scopes68_324"
"(expand-context-declared-submodule-names the-struct_312)"
"(expand-context-lifts the-struct_312)"
"(expand-context-lift-envs the-struct_312)"
"(expand-context-module-lifts the-struct_312)"
"(expand-context-require-lifts the-struct_312)"
"(expand-context-to-module-lifts the-struct_312)"
"(expand-context-requires+provides the-struct_312)"
"(expand-context-name the-struct_312)"
"(expand-context-observer the-struct_312)))"
"                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_312))))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_347 given-args_348 ctx32_349)"
"(let-values(((context24_350)(car given-args_348))"
"((given-kws_351)(cdr given-kws_347))"
"((given-args_352)(cdr given-args_348)))"
"(let-values(((intdefs26_353)(car given-args_352))"
"((given-kws_354)(cdr given-kws_351))"
"((given-args_355)(cdr given-args_352)))"
"(let-values(((phase29_356)(if(pair? given-kws_354)(eq? '#:phase(car given-kws_354)) #f)))"
"(let-values(((phase25_357)(if phase29_356(car given-args_355)(void)))"
"((given-kws_358)(if phase29_356(cdr given-kws_354) given-kws_354))"
"((given-args_359)(if phase29_356(cdr given-args_355) given-args_355)))"
"(let-values(((stop-ids31_360)(pair? given-kws_358)))"
"(let-values(((stop-ids27_361)(if stop-ids31_360(car given-args_359)(void))))"
"(make-local-expand-context33.1"
" context24_350"
" intdefs26_353"
" phase25_357"
" phase29_356"
" stop-ids27_361"
" stop-ids31_360"
" ctx32_349)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/2.1$8"
"(lambda(given-kws_362 given-argc_363)"
"(if(= given-argc_363 3)"
"(subsets? '(#:context #:intdefs) given-kws_362 '(#:context #:intdefs #:phase #:stop-ids))"
" #f))"
"(case-lambda((given-kws_364 given-args_365 ctx_366)(unpack34.1 given-kws_364 given-args_365 ctx_366)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_367 ctx_368)(flip-scopes s_367(expand-context-current-introduction-scopes ctx_368))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(if(let-values(((...and/syntax-local.rkt:65:7_11) get-current-expand-context8.1)((temp65_12) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_12 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:65:7_11"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp65_12))))"
" #t"
" #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_13)"
"(let-values(((...and/syntax-local.rkt:68:14_14) get-current-expand-context8.1)((temp66_15) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp66_15 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:68:14_14"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp66_15))))))"
"(if ctx_13(if(expand-context-lifts ctx_13) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_16)"
"(let-values(((...and/syntax-local.rkt:74:14_17) get-current-expand-context8.1)((temp67_18) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp67_18 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:74:14_17"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp67_18))))))"
"(if ctx_16(if(expand-context-to-module-lifts ctx_16) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_19)"
"(let-values(((...and/syntax-local.rkt:80:14_20) get-current-expand-context8.1)((temp68_21) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp68_21 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:80:14_20"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp68_21))))))"
"(if ctx_19(if(expand-context-requires+provides ctx_19) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((temp69_23) 'syntax-local-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp69_23 #t)"
"(get-current-expand-context8.1 temp69_23)))))"
"(expand-context-context ctx_22))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_24)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_24)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_24)))"
"(values))))"
"(let-values(((ctx_25)"
"(let-values(((temp70_26) 'syntax-local-introduce))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp70_26 #t)"
"(get-current-expand-context8.1 temp70_26)))))"
"(flip-introduction-scopes s_24 ctx_25)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_27)"
"(let-values((()"
"(begin"
"(if(identifier? id_27)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_27)))"
"(values))))"
"(let-values(((ctx_28)"
"(let-values(((temp71_29) 'syntax-local-identifier-as-binding))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp71_29 #t)"
"(get-current-expand-context8.1 temp71_29)))))"
"(remove-use-site-scopes id_27 ctx_28)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_30)"
"(let-values(((...and/syntax-local.rkt:102:14_31) get-current-expand-context8.1)((temp72_32) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp72_32 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:102:14_31"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp72_32))))))"
"(if ctx_30(expand-context-phase ctx_30) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_33)"
"(let-values(((temp73_35) 'syntax-local-name))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp73_35 #t)"
"(get-current-expand-context8.1 temp73_35)))))"
"(let-values(((id_34)(expand-context-name ctx_33)))"
"(if id_34(datum->syntax$1 #f(syntax-e$1 id_34) id_34) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_36)"
"(lambda(as-use-site?1_37 as-use-site?2_38)"
"(let-values(((as-use-site?_39)(if as-use-site?2_38 as-use-site?1_37 #f)))"
"(let-values()"
"(let-values(((sc_40)(new-scope(if as-use-site?_39 'use-site 'macro))))"
"(let-values(((core77_41)"
"(lambda(s76_42 mode74_43 mode75_44)"
"(let-values(((s_45) s76_42))"
"(let-values(((mode_46)(if mode75_44 mode74_43 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_45)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_45)))"
"(let-values(((tmp_47) mode_46))"
"(if(equal? tmp_47 'add)"
"(let-values()(add-scope s_45 sc_40))"
"(if(equal? tmp_47 'remove)"
"(let-values()(remove-scope s_45 sc_40))"
"(if(equal? tmp_47 'flip)"
"(let-values()(flip-scope s_45 sc_40))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_46)))))))))))))"
"(case-lambda"
"((s_48)(core77_41 s_48 #f #f))"
"((s_49 mode74_50)(core77_41 s_49 mode74_50 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_36 #f #f))"
"((as-use-site?1_51)(make-syntax-introducer3_36 as-use-site?1_51 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_52)"
"(lambda(ext-s7_53 base-s8_54 phase5_55 phase6_56)"
"(let-values(((ext-s_57) ext-s7_53))"
"(let-values(((base-s_58) base-s8_54))"
"(let-values(((phase_59)(if phase6_56 phase5_55(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_57)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_57)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_65)(syntax?$1 base-s_58)))"
"(if or-part_65 or-part_65(not base-s_58)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_58)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_59)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_59)))"
"(values))))"
"(let-values(((ext-scs_60)(syntax-scope-set ext-s_57 phase_59)))"
"(let-values(((base-scs_61)"
"(syntax-scope-set"
"(let-values(((or-part_66) base-s_58))"
"(if or-part_66 or-part_66 empty-syntax))"
" phase_59)))"
"(let-values(((use-base-scs_62)"
"(if(subset? base-scs_61 ext-scs_60)"
" base-scs_61"
"(let-values(((or-part_67)"
"(if(identifier? base-s_58)"
"(let-values(((...and/syntax-local.rkt:137:36_68)"
" resolve31.1)"
"((base-s79_69) base-s_58)"
"((phase80_70) phase_59)"
"((temp81_71) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve31.1))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_71"
" #t"
" base-s79_69"
" phase80_70)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:137:36_68"
" keyword-procedure-extract"
" '(#:get-scopes?)"
" 4)"
" '(#:get-scopes?)"
"(list temp81_71)"
" base-s79_69"
" phase80_70)))"
" #f)))"
"(if or-part_67 or-part_67(seteq))))))"
"(let-values(((delta-scs_63)"
"(set->list(set-subtract ext-scs_60 use-base-scs_62))))"
"(let-values(((maybe-taint_64)"
"(if(syntax-clean? ext-s_57) values syntax-taint$1)))"
"(let-values(((core85_72)"
"(lambda(s84_73 mode82_74 mode83_75)"
"(let-values(((s_76) s84_73))"
"(let-values(((mode_77)(if mode83_75 mode82_74 'add)))"
"(let-values()"
"(maybe-taint_64"
"(let-values(((tmp_78) mode_77))"
"(if(equal? tmp_78 'add)"
"(let-values()(add-scopes s_76 delta-scs_63))"
"(if(equal? tmp_78 'remove)"
"(let-values()(remove-scopes s_76 delta-scs_63))"
"(if(equal? tmp_78 'flip)"
"(let-values()(flip-scopes s_76 delta-scs_63))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                            \"(or/c 'add 'remove 'flip)\""
" mode_77)))))))))))))"
"(case-lambda"
"((s_79)(core85_72 s_79 #f #f))"
"((s_80 mode82_81)(core85_72 s_80 mode82_81 #t)))))))))))))))))))"
"(case-lambda"
"((ext-s_82 base-s_83)(make-syntax-delta-introducer9_52 ext-s_82 base-s_83 #f #f))"
"((ext-s_84 base-s_85 phase5_86)(make-syntax-delta-introducer9_52 ext-s_84 base-s_85 phase5_86 #t)))))"
"(define-values"
"(lifted/1.1$7 lifted/2.1$7 lifted/3.1$6 lifted/4.1$6 lifted/5.1$6)"
"(make-struct-type"
" 'do-syntax-local-value"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'do-syntax-local-value"
"(case-lambda"
"((self_87 who_88 id_89 intdef_90 failure-thunk_91)"
"(apply missing-kw self_87 who_88 id_89 intdef_90 failure-thunk_91 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_92 who_93 id_94 intdef_95 failure-thunk_96)"
"(apply missing-kw self_92 who_93 id_94 intdef_95 failure-thunk_96 null)))))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_97 who13_98 id14_99 intdef15_100 failure-thunk16_101)"
"(let-values(((who_102) who13_98))"
"(let-values(((id_103) id14_99))"
"(let-values(((intdef_104) intdef15_100))"
"(let-values(((failure-thunk_105) failure-thunk16_101))"
"(let-values(((immediate?_106) immediate?11_97))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_103)"
"(void)"
"                                  (let-values () (raise-argument-error who_102 \"identifier?\" id_103)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_110)(not failure-thunk_105)))"
"(if or-part_110"
" or-part_110"
"(if(procedure? failure-thunk_105)"
"(procedure-arity-includes? failure-thunk_105 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_102"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_105)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_111)(not intdef_104)))"
"(if or-part_111 or-part_111(1/internal-definition-context? intdef_104)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_102"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_105)))"
"(values))))"
"(let-values(((current-ctx_107)"
"(let-values(((who87_112) who_102))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who87_112 #t)"
"(get-current-expand-context8.1 who87_112)))))"
"(let-values(((ctx_108)"
"(if intdef_104"
"(let-values(((the-struct_113) current-ctx_107))"
"(if(expand-context? the-struct_113)"
"(let-values(((env88_114)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_107)"
" intdef_104)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_113)"
"(root-expand-context-post-expansion-scope the-struct_113)"
"(root-expand-context-top-level-bind-scope the-struct_113)"
"(root-expand-context-all-scopes-stx the-struct_113)"
"(root-expand-context-use-site-scopes the-struct_113)"
"(root-expand-context-defined-syms the-struct_113)"
"(root-expand-context-frame-id the-struct_113)"
"(root-expand-context-counter the-struct_113)"
"(root-expand-context-lift-key the-struct_113)"
"(expand-context-context the-struct_113)"
"(expand-context-phase the-struct_113)"
"(expand-context-namespace the-struct_113)"
" env88_114"
"(expand-context-user-env the-struct_113)"
"(expand-context-post-expansion-scope-action the-struct_113)"
"(expand-context-scopes the-struct_113)"
"(expand-context-def-ctx-scopes the-struct_113)"
"(expand-context-binding-layer the-struct_113)"
"(expand-context-reference-records the-struct_113)"
"(expand-context-only-immediate? the-struct_113)"
"(expand-context-just-once? the-struct_113)"
"(expand-context-module-begin-k the-struct_113)"
"(expand-context-need-eventually-defined the-struct_113)"
"(expand-context-allow-unbound? the-struct_113)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_113)"
"(expand-context-stops the-struct_113)"
"(expand-context-current-introduction-scopes the-struct_113)"
"(expand-context-declared-submodule-names the-struct_113)"
"(expand-context-lifts the-struct_113)"
"(expand-context-lift-envs the-struct_113)"
"(expand-context-module-lifts the-struct_113)"
"(expand-context-require-lifts the-struct_113)"
"(expand-context-to-module-lifts the-struct_113)"
"(expand-context-requires+provides the-struct_113)"
"(expand-context-name the-struct_113)"
"(expand-context-observer the-struct_113)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_113)))"
" current-ctx_107)))"
"(let-values((()"
"(begin"
"(let-values(((obs_115)(expand-context-observer ctx_108)))"
"(if obs_115"
"(let-values()"
"(let-values()(call-expand-observe obs_115 'local-value id_103)))"
"(void)))"
"(values))))"
"(let-values(((phase_109)(expand-context-phase ctx_108)))"
"((letrec-values(((loop_116)"
"(lambda(id_117)"
"(let-values(((b_118)"
"(if immediate?_106"
"(let-values(((...and/syntax-local.rkt:175:18_119)"
" resolve+shift22.1)"
"((id89_120) id_117)"
"((phase90_121) phase_109)"
"((temp91_122) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp91_122"
" #t"
" #f"
" #f"
" id89_120"
" phase90_121)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:175:18_119"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp91_122)"
" id89_120"
" phase90_121)))"
"(resolve+shift/extra-inspector"
" id_117"
" phase_109"
"(expand-context-namespace ctx_108)))))"
"(begin"
"(let-values(((obs_123)(expand-context-observer ctx_108)))"
"(if obs_123"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_123 'resolve id_117)))"
"(void)))"
"(if(not b_118)"
"(let-values()"
"(begin"
"(let-values(((obs_124)(expand-context-observer ctx_108)))"
"(if obs_124"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_124"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_105"
"(failure-thunk_105)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_117))))"
"(let-values()"
"(let-values(((v_125 insp_126)"
"(let-values(((...and/syntax-local.rkt:185:30_127)"
" lookup17.1)"
"((b92_128) b_118)"
"((ctx93_129) ctx_108)"
"((id94_130) id_117)"
"((temp95_131) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" temp95_131"
" #t"
" b92_128"
" ctx93_129"
" id94_130)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:185:30_127"
" keyword-procedure-extract"
" '(#:out-of-context-as-variable?)"
" 5)"
" '(#:out-of-context-as-variable?)"
"(list temp95_131)"
" b92_128"
" ctx93_129"
" id94_130)))))"
"(if(let-values(((or-part_132)(variable? v_125)))"
"(if or-part_132 or-part_132(core-form? v_125)))"
"(let-values()"
"(begin"
"(let-values(((obs_133)"
"(expand-context-observer ctx_108)))"
"(if obs_133"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_133"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_105"
"(failure-thunk_105)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_117))))"
"(let-values()"
"(begin"
"(let-values(((obs_134)"
"(expand-context-observer ctx_108)))"
"(if obs_134"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_134"
" 'local-value-result"
" #t)))"
"(void)))"
"(if(1/rename-transformer? v_125)"
"(let-values()"
"(if immediate?_106"
"(values"
" v_125"
"(1/rename-transformer-target v_125))"
"(loop_116(1/rename-transformer-target v_125))))"
"(if immediate?_106"
"(let-values()(values v_125 #f))"
"(let-values() v_125))))))))))))))"
" loop_116)"
"(flip-introduction-scopes id_103 ctx_108)))))))))))))))))"
"(define-values"
"(unpack18.1$1)"
"(lambda(given-kws_135 given-args_136 who13_137 id14_138 intdef15_139 failure-thunk16_140)"
"(let-values(((immediate?11_141)(car given-args_136)))"
"(do-syntax-local-value17.1 immediate?11_141 who13_137 id14_138 intdef15_139 failure-thunk16_140))))"
"(define-values"
"(do-syntax-local-value19.1)"
"(lifted/2.1$7"
"(lambda(given-kws_142 given-argc_143)"
"(if(= given-argc_143 6)"
"(let-values(((l2_144) given-kws_142))"
"(if(pair? l2_144)(if(eq?(car l2_144) '#:immediate?)(null?(cdr l2_144)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_145 given-args_146 who_147 id_148 intdef_149 failure-thunk_150)"
"(unpack18.1$1 given-kws_145 given-args_146 who_147 id_148 intdef_149 failure-thunk_150)))"
" '(#:immediate?)"
" '(#:immediate?)))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_151)"
"(lambda(id24_152 failure-thunk20_153 intdef21_154 failure-thunk22_155 intdef23_156)"
"(let-values(((id_157) id24_152))"
"(let-values(((failure-thunk_158)(if failure-thunk22_155 failure-thunk20_153 #f)))"
"(let-values(((intdef_159)(if intdef23_156 intdef21_154 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:203:2_160) do-syntax-local-value19.1)"
"((temp96_161) 'syntax-local-value)"
"((temp97_162) #f)"
"((id98_163) id_157)"
"((intdef99_164) intdef_159)"
"((failure-thunk100_165) failure-thunk_158))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp97_162"
" temp96_161"
" id98_163"
" intdef99_164"
" failure-thunk100_165)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:203:2_160"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp97_162)"
" temp96_161"
" id98_163"
" intdef99_164"
" failure-thunk100_165))))))))))"
"(case-lambda"
"((id_166)(syntax-local-value25_151 id_166 #f #f #f #f))"
"((id_167 failure-thunk_168 intdef21_169)(syntax-local-value25_151 id_167 failure-thunk_168 intdef21_169 #t #t))"
"((id_170 failure-thunk20_171)(syntax-local-value25_151 id_170 failure-thunk20_171 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_172)"
"(lambda(id31_173 failure-thunk27_174 intdef28_175 failure-thunk29_176 intdef30_177)"
"(let-values(((id_178) id31_173))"
"(let-values(((failure-thunk_179)(if failure-thunk29_176 failure-thunk27_174 #f)))"
"(let-values(((intdef_180)(if intdef30_177 intdef28_175 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:206:2_181) do-syntax-local-value19.1)"
"((temp101_182) 'syntax-local-value/immediate)"
"((temp102_183) #t)"
"((id103_184) id_178)"
"((intdef104_185) intdef_180)"
"((failure-thunk105_186) failure-thunk_179))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp102_183"
" temp101_182"
" id103_184"
" intdef104_185"
" failure-thunk105_186)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:206:2_181"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp102_183)"
" temp101_182"
" id103_184"
" intdef104_185"
" failure-thunk105_186))))))))))"
"(case-lambda"
"((id_187)(syntax-local-value/immediate32_172 id_187 #f #f #f #f))"
"((id_188 failure-thunk_189 intdef28_190)"
"(syntax-local-value/immediate32_172 id_188 failure-thunk_189 intdef28_190 #t #t))"
"((id_191 failure-thunk27_192)(syntax-local-value/immediate32_172 id_191 failure-thunk27_192 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_193 n_194 s_195)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_195) (void) (let-values () (raise-argument-error who_193 \"syntax?\" s_195)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_194)"
"(void)"
"                        (let-values () (raise-argument-error who_193 \"exact-nonnegative-integer?\" n_194)))"
"(values))))"
"(let-values(((ctx_196)"
"(let-values(((who106_200) who_193))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who106_200 #t)"
"(get-current-expand-context8.1 who106_200)))))"
"(let-values(((lifts_197)(expand-context-lifts ctx_196)))"
"(let-values(((counter_198)(root-expand-context-counter ctx_196)))"
"(let-values(((ids_199)"
"(alt-reverse"
"(let-values(((start_201) 0)((end_202) n_194)((inc_203) 1))"
"(begin"
"(if(if(real? start_201)(if(real? end_202)(real? inc_203) #f) #f)"
"(void)"
"(let-values()(in-range start_201 end_202 inc_203)))"
"((letrec-values(((for-loop_204)"
"(lambda(fold-var_205 pos_206)"
"(if(< pos_206 end_202)"
"(let-values(((i_207) pos_206))"
"(let-values(((fold-var_208)"
"(let-values(((fold-var_209) fold-var_205))"
"(let-values(((fold-var_210)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_198"
"(add1"
"(unbox"
" counter_198)))"
"(values))))"
"(let-values(((name_211)"
"(string->unreadable-symbol"
"(format"
"                                                                                                              \"lifted/~a\""
"(unbox"
" counter_198)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_211)"
"(new-scope 'macro)))))"
" fold-var_209))))"
"(values fold-var_210)))))"
"(for-loop_204 fold-var_208(+ pos_206 inc_203))))"
" fold-var_205))))"
" for-loop_204)"
" null"
" start_201))))))"
"(begin"
"(let-values(((obs_212)(expand-context-observer ctx_196)))"
"(if obs_212"
"(let-values()(let-values()(call-expand-observe obs_212 'local-lift ids_199 s_195)))"
"(void)))"
"(map2"
"(lambda(id_213)(flip-introduction-scopes id_213 ctx_196))"
"(add-lifted!"
" lifts_197"
" ids_199"
"(flip-introduction-scopes s_195 ctx_196)"
"(expand-context-phase ctx_196))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_214)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_214))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_215 s_216)(do-lift-values-expression 'syntax-local-lift-values-expression n_215 s_216)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_217)"
"(let-values(((temp107_218) 'syntax-local-lift-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp107_218 #t)"
"(get-current-expand-context8.1 temp107_218)))))"
"(root-expand-context-lift-key ctx_217))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_219)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_219)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_219)))"
"(values))))"
"(let-values(((ctx_220)"
"(let-values(((temp108_222) 'syntax-local-lift-module))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp108_222 #t)"
"(get-current-expand-context8.1 temp108_222)))))"
"(let-values(((phase_221)(expand-context-phase ctx_220)))"
"(begin"
"(let-values(((tmp_223)(core-form-sym s_219 phase_221)))"
"(if(if(equal? tmp_223 'module) #t(equal? tmp_223 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_220) s_219 phase_221))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_219))))"
"(let-values(((obs_224)(expand-context-observer ctx_220)))"
"(if obs_224"
"(let-values()(let-values()(call-expand-observe obs_224 'lift-statement s_219)))"
"(void)))))))))"
"(define-values"
"(lifted/6.1$4 lifted/7.1$4 lifted/8.1$4 lifted/9.1$4 lifted/10.1$4)"
"(make-struct-type"
" 'do-local-lift-to-module"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'do-local-lift-to-module"
"(case-lambda((self_225 who_226 s_227)(apply missing-kw self_225 who_226 s_227 null))))))"
"(current-inspector)"
"(case-lambda((self_228 who_229 s_230)(apply missing-kw self_228 who_229 s_230 null)))))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_231"
" get-lift-ctx36_232"
" get-wrt-phase38_233"
" intro?34_234"
" intro?42_235"
" more-checks35_236"
" more-checks43_237"
" post-wrap41_238"
" post-wrap49_239"
" pre-wrap39_240"
" pre-wrap47_241"
" shift-wrap40_242"
" shift-wrap48_243"
" who50_244"
" s51_245)"
"(let-values(((who_246) who50_244))"
"(let-values(((s_247) s51_245))"
"(let-values(((intro?_248)(if intro?42_235 intro?34_234 #t)))"
"(let-values(((more-checks_249)(if more-checks43_237 more-checks35_236 void)))"
"(let-values(((get-lift-ctx_250) get-lift-ctx36_232))"
"(let-values(((add-lifted!_251) add-lifted!37_231))"
"(let-values(((get-wrt-phase_252) get-wrt-phase38_233))"
"(let-values(((pre-wrap_253)"
"(if pre-wrap47_241 pre-wrap39_240(lambda(s_254 phase_255 lift-ctx_256) s_254))))"
"(let-values(((shift-wrap_257)"
"(if shift-wrap48_243 shift-wrap40_242(lambda(s_258 phase_259 lift-ctx_260) s_258))))"
"(let-values(((post-wrap_261)"
"(if post-wrap49_239 post-wrap41_238(lambda(s_262 phase_263 lift-ctx_264) s_262))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_247)"
"(void)"
"                                            (let-values () (raise-argument-error who_246 \"syntax?\" s_247)))"
"(values))))"
"(let-values((()(begin(more-checks_249)(values))))"
"(let-values(((ctx_265)"
"(let-values(((who109_273) who_246))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who109_273 #t)"
"(get-current-expand-context8.1 who109_273)))))"
"(let-values(((lift-ctx_266)(get-lift-ctx_250 ctx_265)))"
"(let-values(((phase_267)(expand-context-phase ctx_265)))"
"(let-values(((wrt-phase_268)(get-wrt-phase_252 lift-ctx_266)))"
"(let-values(((added-s_269)"
"(if intro?_248(flip-introduction-scopes s_247 ctx_265) s_247)))"
"(let-values(((pre-s_270)(pre-wrap_253 added-s_269 phase_267 lift-ctx_266)))"
"(let-values(((shift-s_271)"
"(let-values(((start_274) phase_267)"
"((end_275) wrt-phase_268)"
"((inc_276) -1))"
"(begin"
"(if(if(real? start_274)"
"(if(real? end_275)(real? inc_276) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_274 end_275 inc_276)))"
"((letrec-values(((for-loop_277)"
"(lambda(s_278 pos_279)"
"(if(> pos_279 end_275)"
"(let-values(((phase_280) pos_279))"
"(let-values(((s_281)"
"(let-values(((s_282)"
" s_278))"
"(let-values(((s_283)"
"(let-values()"
"(shift-wrap_257"
" s_282"
"(sub1"
" phase_280)"
" lift-ctx_266))))"
"(values s_283)))))"
"(for-loop_277"
" s_281"
"(+ pos_279 inc_276))))"
" s_278))))"
" for-loop_277)"
" pre-s_270"
" start_274)))))"
"(let-values(((post-s_272)"
"(post-wrap_261 shift-s_271 wrt-phase_268 lift-ctx_266)))"
"(begin"
"(add-lifted!_251 lift-ctx_266 post-s_272 wrt-phase_268)"
"(values ctx_265 added-s_269)))))))))))))))))))))))))"
"(define-values"
"(unpack53.1)"
"(lambda(given-kws_284 given-args_285 who50_286 s51_287)"
"(let-values(((add-lifted!37_288)(car given-args_285))"
"((given-kws_289)(cdr given-kws_284))"
"((given-args_290)(cdr given-args_285)))"
"(let-values(((get-lift-ctx36_291)(car given-args_290))"
"((given-kws_292)(cdr given-kws_289))"
"((given-args_293)(cdr given-args_290)))"
"(let-values(((get-wrt-phase38_294)(car given-args_293))"
"((given-kws_295)(cdr given-kws_292))"
"((given-args_296)(cdr given-args_293)))"
"(let-values(((intro?42_297)(if(pair? given-kws_295)(eq? '#:intro?(car given-kws_295)) #f)))"
"(let-values(((intro?34_298)(if intro?42_297(car given-args_296)(void)))"
"((given-kws_299)(if intro?42_297(cdr given-kws_295) given-kws_295))"
"((given-args_300)(if intro?42_297(cdr given-args_296) given-args_296)))"
"(let-values(((more-checks43_301)(if(pair? given-kws_299)(eq? '#:more-checks(car given-kws_299)) #f)))"
"(let-values(((more-checks35_302)(if more-checks43_301(car given-args_300)(void)))"
"((given-kws_303)(if more-checks43_301(cdr given-kws_299) given-kws_299))"
"((given-args_304)(if more-checks43_301(cdr given-args_300) given-args_300)))"
"(let-values(((post-wrap49_305)(if(pair? given-kws_303)(eq? '#:post-wrap(car given-kws_303)) #f)))"
"(let-values(((post-wrap41_306)(if post-wrap49_305(car given-args_304)(void)))"
"((given-kws_307)(if post-wrap49_305(cdr given-kws_303) given-kws_303))"
"((given-args_308)(if post-wrap49_305(cdr given-args_304) given-args_304)))"
"(let-values(((pre-wrap47_309)"
"(if(pair? given-kws_307)(eq? '#:pre-wrap(car given-kws_307)) #f)))"
"(let-values(((pre-wrap39_310)(if pre-wrap47_309(car given-args_308)(void)))"
"((given-kws_311)(if pre-wrap47_309(cdr given-kws_307) given-kws_307))"
"((given-args_312)(if pre-wrap47_309(cdr given-args_308) given-args_308)))"
"(let-values(((shift-wrap48_313)(pair? given-kws_311)))"
"(let-values(((shift-wrap40_314)(if shift-wrap48_313(car given-args_312)(void))))"
"(do-local-lift-to-module52.1"
" add-lifted!37_288"
" get-lift-ctx36_291"
" get-wrt-phase38_294"
" intro?34_298"
" intro?42_297"
" more-checks35_302"
" more-checks43_301"
" post-wrap41_306"
" post-wrap49_305"
" pre-wrap39_310"
" pre-wrap47_309"
" shift-wrap40_314"
" shift-wrap48_313"
" who50_286"
" s51_287))))))))))))))))"
"(define-values"
"(do-local-lift-to-module54.1)"
"(lifted/7.1$4"
"(lambda(given-kws_315 given-argc_316)"
"(if(= given-argc_316 4)"
"(subsets?"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" given-kws_315"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap))"
" #f))"
"(case-lambda((given-kws_317 given-args_318 who_319 s_320)(unpack53.1 given-kws_317 given-args_318 who_319 s_320)))"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap)))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_321 use-s_322)"
"(let-values(((sc_323)(new-scope 'macro)))"
"(let-values(((ctx_324 added-s_325)"
"(let-values(((...and/syntax-local.rkt:280:4_327) do-local-lift-to-module54.1)"
"((temp110_328) 'syntax-local-lift-require)"
"((temp111_329)(datum->syntax$1 #f s_321))"
"((temp112_330) #f)"
"((temp113_331)"
"(lambda()"
"(if(syntax?$1 use-s_322)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_322)))))"
"((expand-context-require-lifts114_332) expand-context-require-lifts)"
"((require-lift-context-wrt-phase115_333) require-lift-context-wrt-phase)"
"((add-lifted-require!116_334) add-lifted-require!)"
"((temp117_335)"
"(lambda(s_337 phase_338 require-lift-ctx_339)(require-spec-shift-for-syntax s_337)))"
"((temp118_336)"
"(lambda(s_340 phase_341 require-lift-ctx_342)"
"(wrap-form '#%require(add-scope s_340 sc_323) phase_341))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-require!116_334"
" expand-context-require-lifts114_332"
" require-lift-context-wrt-phase115_333"
" temp112_330"
" #t"
" temp113_331"
" #t"
" temp118_336"
" #t"
" #f"
" #f"
" temp117_335"
" #t"
" temp110_328"
" temp111_329)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:280:4_327"
" keyword-procedure-extract"
" '(#:add-lifted!"
" #:get-lift-ctx"
" #:get-wrt-phase"
" #:intro?"
" #:more-checks"
" #:post-wrap"
" #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-require!116_334"
" expand-context-require-lifts114_332"
" require-lift-context-wrt-phase115_333"
" temp112_330"
" temp113_331"
" temp118_336"
" temp117_335)"
" temp110_328"
" temp111_329)))))"
"(let-values(((result-s_326)(add-scope use-s_322 sc_323)))"
"(begin"
"(let-values(((obs_343)(expand-context-observer ctx_324)))"
"(if obs_343"
"(let-values()"
"(let-values()(call-expand-observe obs_343 'lift-require added-s_325 use-s_322 result-s_326)))"
"(void)))"
" result-s_326))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_344)"
"(let-values(((ctx_345 result-s_346)"
"(let-values(((...and/syntax-local.rkt:303:4_347) do-local-lift-to-module54.1)"
"((temp119_348) 'syntax-local-lift-module-end-declaration)"
"((s120_349) s_344)"
"((expand-context-to-module-lifts121_350) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase122_351) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!123_352) add-lifted-to-module-provide!)"
"((temp124_353)"
"(lambda(s_355 phase_356 to-module-lift-ctx_357)(wrap-form 'for-syntax s_355 #f)))"
"((temp125_354)"
"(lambda(s_358 phase_359 to-module-lift-ctx_360)"
"(wrap-form '#%provide s_358 phase_359))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!123_352"
" expand-context-to-module-lifts121_350"
" to-module-lift-context-wrt-phase122_351"
" #f"
" #f"
" #f"
" #f"
" temp125_354"
" #t"
" #f"
" #f"
" temp124_353"
" #t"
" temp119_348"
" s120_349)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:303:4_347"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-provide!123_352"
" expand-context-to-module-lifts121_350"
" to-module-lift-context-wrt-phase122_351"
" temp125_354"
" temp124_353)"
" temp119_348"
" s120_349)))))"
"(let-values(((obs_361)(expand-context-observer ctx_345)))"
"(if obs_361(let-values()(let-values()(call-expand-observe obs_361 'lift-provide result-s_346)))(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_362)"
"(let-values(((ctx_363 also-s_364)"
"(let-values(((...and/syntax-local.rkt:318:4_365) do-local-lift-to-module54.1)"
"((temp126_366) 'syntax-local-lift-module-end-declaration)"
"((s127_367) s_362)"
"((expand-context-to-module-lifts128_368) expand-context-to-module-lifts)"
"((temp129_369)(lambda(lift-ctx_373) 0))"
"((add-lifted-to-module-end!130_370) add-lifted-to-module-end!)"
"((temp131_371)"
"(lambda(orig-s_374 phase_375 to-module-lift-ctx_376)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_376)"
"(wrap-form '#%expression orig-s_374 phase_375)"
" orig-s_374)))"
"((temp132_372)"
"(lambda(s_377 phase_378 to-module-lift-ctx_379)"
"(wrap-form 'begin-for-syntax s_377 phase_378))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!130_370"
" expand-context-to-module-lifts128_368"
" temp129_369"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp131_371"
" #t"
" temp132_372"
" #t"
" temp126_366"
" s127_367)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:318:4_365"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-end!130_370"
" expand-context-to-module-lifts128_368"
" temp129_369"
" temp131_371"
" temp132_372)"
" temp126_366"
" s127_367)))))"
"(let-values(((obs_380)(expand-context-observer ctx_363)))"
"(if obs_380(let-values()(let-values()(call-expand-observe obs_380 'lift-statement s_362)))(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_381 s_382 phase_383)"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_383(syntax-shift-phase-level$1 core-stx phase_383) #f) sym_381) s_382))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_384)"
"(let-values(((temp133_385) 'syntax-local-module-defined-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp133_385 #t)"
"(get-current-expand-context8.1 temp133_385)))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_384)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_386 phase-level_387)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_392)(not mod-path_386)))"
"(if or-part_392 or-part_392(1/module-path? mod-path_386)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_386)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_393)(eq? phase-level_387 #t)))"
"(if or-part_393 or-part_393(phase? phase-level_387)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_387)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_388)"
"(let-values(((temp134_394) 'syntax-local-module-required-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp134_394 #t)"
"(get-current-expand-context8.1 temp134_394)))))"
"(let-values(((requires+provides_389)(expand-context-requires+provides ctx_388)))"
"(let-values(((mpi_390)(if mod-path_386(module-path->mpi/context mod-path_386 ctx_388) #f)))"
"(let-values(((requireds_391)"
"(extract-all-module-requires"
" requires+provides_389"
" mpi_390"
"(if(eq? phase-level_387 #t) 'all phase-level_387))))"
"(if requireds_391"
"(alt-reverse"
"(let-values(((ht_395)(requireds->phase-ht requireds_391)))"
"(begin"
"(if((lambda(ht_396)(hash? ht_396)) ht_395)(void)(let-values()(default-in-hash ht_395)))"
"((letrec-values(((for-loop_397)"
"(lambda(fold-var_398 i_399)"
"(if i_399"
"(let-values(((phase_400 ids_401)(hash-iterate-key+value ht_395 i_399)))"
"(let-values(((fold-var_402)"
"(let-values(((fold-var_403) fold-var_398))"
"(let-values(((fold-var_404)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_400 ids_401))"
" fold-var_403))))"
"(values fold-var_404)))))"
"(for-loop_397 fold-var_402(hash-iterate-next ht_395 i_399))))"
" fold-var_398))))"
" for-loop_397)"
" null"
"(hash-iterate-first ht_395)))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_405)"
"(let-values(((lst_406) requireds_405))"
"(begin"
"(if(list? lst_406)(void)(let-values()(in-list lst_406)))"
"((letrec-values(((for-loop_407)"
"(lambda(ht_408 lst_409)"
"(if(pair? lst_409)"
"(let-values(((r_410)(unsafe-car lst_409)))"
"(let-values(((ht_411)"
"(let-values(((ht_412) ht_408))"
"(let-values(((ht_413)"
"(let-values()"
"(hash-update"
" ht_412"
"(required-phase r_410)"
"(lambda(l_414)(cons(required-id r_410) l_414))"
" null))))"
"(values ht_413)))))"
"(for-loop_407 ht_411(unsafe-cdr lst_409))))"
" ht_408))))"
" for-loop_407)"
"(hasheqv)"
" lst_406)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_415)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_420)(1/module-path? mod-path_415)))"
"(if or-part_420"
" or-part_420"
"(if(syntax?$1 mod-path_415)(1/module-path?(syntax->datum$1 mod-path_415)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_415)))"
"(values))))"
"(let-values(((ctx_416)"
"(let-values(((temp135_421) 'syntax-local-module-exports))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp135_421 #t)"
"(get-current-expand-context8.1 temp135_421)))))"
"(let-values(((ns_417)(expand-context-namespace ctx_416)))"
"(let-values(((mod-name_418)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_415)(syntax->datum$1 mod-path_415) mod-path_415)"
" ctx_416)"
" #t)))"
"(let-values(((m_419)(namespace->module ns_417 mod-name_418)))"
"(begin"
"(if m_419(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_418)))"
"(alt-reverse"
"(let-values(((ht_422)(module-provides m_419)))"
"(begin"
"(if((lambda(ht_423)(hash? ht_423)) ht_422)(void)(let-values()(default-in-hash ht_422)))"
"((letrec-values(((for-loop_424)"
"(lambda(fold-var_425 i_426)"
"(if i_426"
"(let-values(((phase_427 syms_428)(hash-iterate-key+value ht_422 i_426)))"
"(let-values(((fold-var_429)"
"(let-values(((fold-var_430) fold-var_425))"
"(let-values(((fold-var_431)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_427"
"(alt-reverse"
"(let-values(((ht_432) syms_428))"
"(begin"
"(if((lambda(ht_433)"
"(hash? ht_433))"
" ht_432)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_432)))"
"((letrec-values(((for-loop_434)"
"(lambda(fold-var_435"
" i_436)"
"(if i_436"
"(let-values(((sym_437)"
"(hash-iterate-key"
" ht_432"
" i_436)))"
"(let-values(((fold-var_438)"
"(let-values(((fold-var_439)"
" fold-var_435))"
"(let-values(((fold-var_440)"
"(let-values()"
"(cons"
"(let-values()"
" sym_437)"
" fold-var_439))))"
"(values"
" fold-var_440)))))"
"(for-loop_434"
" fold-var_438"
"(hash-iterate-next"
" ht_432"
" i_436))))"
" fold-var_435))))"
" for-loop_434)"
" null"
"(hash-iterate-first ht_432)))))))"
" fold-var_430))))"
"(values fold-var_431)))))"
"(for-loop_424 fold-var_429(hash-iterate-next ht_422 i_426))))"
" fold-var_425))))"
" for-loop_424)"
" null"
"(hash-iterate-first ht_422)))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_441)"
"(let-values(((temp136_443) 'syntax-local-submodules))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp136_443 #t)"
"(get-current-expand-context8.1 temp136_443)))))"
"(let-values(((submods_442)(expand-context-declared-submodule-names ctx_441)))"
"(alt-reverse"
"(let-values(((ht_444) submods_442))"
"(begin"
"(if((lambda(ht_445)(hash? ht_445)) ht_444)(void)(let-values()(default-in-hash ht_444)))"
"((letrec-values(((for-loop_446)"
"(lambda(fold-var_447 i_448)"
"(if i_448"
"(let-values(((name_449 kind_450)(hash-iterate-key+value ht_444 i_448)))"
"(let-values(((fold-var_451)"
"(let-values(((fold-var_452) fold-var_447))"
"(if(eq? kind_450 'module)"
"(let-values(((fold-var_453) fold-var_452))"
"(let-values(((fold-var_454)"
"(let-values()"
"(cons(let-values() name_449) fold-var_453))))"
"(values fold-var_454)))"
" fold-var_452))))"
"(for-loop_446 fold-var_451(hash-iterate-next ht_444 i_448))))"
" fold-var_447))))"
" for-loop_446)"
" null"
"(hash-iterate-first ht_444)))))))))"
"(define-values"
"(1/syntax-local-environment-ref)"
"(let-values(((syntax-local-environment-ref58_455)"
"(lambda(key57_456 default55_457 default56_458)"
"(let-values(((key_459) key57_456))"
"(let-values(((default_460)(if default56_458 default55_457 #f)))"
"(let-values()"
"(let-values(((ctx_461)"
"(let-values(((temp137_462) 'syntax-local-environment-ref))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp137_462 #t)"
"(get-current-expand-context8.1 temp137_462)))))"
"(hash-ref(expand-context-user-env ctx_461) key_459 default_460))))))))"
"(case-lambda"
"((key_463)(syntax-local-environment-ref58_455 key_463 #f #f))"
"((key_464 default55_465)(syntax-local-environment-ref58_455 key_464 default55_465 #t)))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower63_466)"
"(lambda(id62_467 only-generated?60_468 only-generated?61_469)"
"(let-values(((id_470) id62_467))"
"(let-values(((only-generated?_471)(if only-generated?61_469 only-generated?60_468 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_470)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_470)))"
"(values))))"
"(let-values(((ctx_472)"
"(let-values(((temp138_474) 'syntax-local-get-shadower))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp138_474 #t)"
"(get-current-expand-context8.1 temp138_474)))))"
"(let-values(((new-id_473)(add-scopes id_470(expand-context-scopes ctx_472))))"
"(if(syntax-clean? id_470) new-id_473(syntax-taint$1 new-id_473)))))))))))"
"(case-lambda"
"((id_475)(syntax-local-get-shadower63_466 id_475 #f #f))"
"((id_476 only-generated?60_477)(syntax-local-get-shadower63_466 id_476 only-generated?60_477 #t)))))"
"(void)"
"(void)"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 \"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) #f))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) 5)(srcloc-vector?(list->vector v_5)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) 5)(srcloc-vector? v_5) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 0)"
"(vector-ref v_12 1)"
"(vector-ref v_12 2)"
"(vector-ref v_12 3)"
"(vector-ref v_12 4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(void)"
"(void)"
"(define-values"
"(reader-syntax->syntax)"
"(lambda(v_1)"
"(datum-map"
" v_1"
"(lambda(tail?_2 v_3)"
"(if(1/syntax? v_3)"
"(let-values()"
"(let-values(((e_4)(syntax-e$2 v_3)))"
"(if(syntax?$1 e_4)"
"(let-values() e_4)"
"(let-values()"
"(let-values(((s_5)"
"(let-values(((the-struct_7) empty-syntax))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8)(reader-syntax->syntax(syntax-e$2 v_3)))"
"((srcloc2_9)"
"(srcloc"
"(syntax-source$1 v_3)"
"(syntax-line$1 v_3)"
"(syntax-column$1 v_3)"
"(syntax-position$1 v_3)"
"(syntax-span$1 v_3)))"
"((props3_10)"
"(let-values(((tmp_11)(1/syntax-property v_3 'paren-shape)))"
"(if(equal? tmp_11 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_11 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
" srcloc2_9"
" props3_10"
"(syntax-inspector the-struct_7)"
"(syntax-tamper the-struct_7)))"
"                                   (raise-argument-error 'struct-copy \"syntax?\" the-struct_7)))))"
"(let-values(((keys_6)(syntax-property-symbol-keys$1 v_3)))"
"(if(null? keys_6)"
"(let-values() s_5)"
"(if(if(null?(cdr keys_6))(eq?(car keys_6) 'paren-shape) #f)"
"(let-values() s_5)"
"(let-values()"
"(let-values(((lst_12) keys_6))"
"(begin"
"(if(list? lst_12)(void)(let-values()(in-list lst_12)))"
"((letrec-values(((for-loop_13)"
"(lambda(s_14 lst_15)"
"(if(pair? lst_15)"
"(let-values(((key_16)(unsafe-car lst_15)))"
"(let-values(((s_17)"
"(let-values(((s_18) s_14))"
"(let-values(((s_19)"
"(let-values()"
"(syntax-property$1"
" s_18"
" key_16"
"(1/syntax-property v_3 key_16)"
" #t))))"
"(values s_19)))))"
"(for-loop_13 s_17(unsafe-cdr lst_15))))"
" s_14))))"
" for-loop_13)"
" s_5"
" lst_12))))))))))))"
"(let-values() v_3))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(void)"
"(void)"
"(define-values"
"(read-syntax$1)"
"(lambda(src_1 in_2)(let-values()(reader-syntax->syntax(read-syntax$2 src_1 in_2)))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(let-values()(reader-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7)))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-e)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
"      (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values(maybe-syntax->datum)(lambda(s_3)(if(syntax?$1 s_3)(syntax->datum$1 s_3) s_3)))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_4)"
"(lambda(stx-c7_5 s8_6 stx-l1_7 stx-p2_8 ignored3_9 stx-l4_10 stx-p5_11 ignored6_12)"
"(let-values(((stx-c_13) stx-c7_5))"
"(let-values(((s_14) s8_6))"
"(let-values(((stx-l_15)(if stx-l4_10 stx-l1_7 #f)))"
"(let-values(((stx-p_16)(if stx-p5_11 stx-p2_8 #f)))"
"(let-values(((ignored_17)(if ignored6_12 ignored3_9 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_18)(not stx-c_13)))"
"(if or-part_18 or-part_18(syntax?$1 stx-c_13)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_13)))"
"(if(let-values(((or-part_19)(not stx-l_15)))"
"(if or-part_19"
" or-part_19"
"(let-values(((or-part_20)(syntax?$1 stx-l_15)))"
"(if or-part_20 or-part_20(encoded-srcloc? stx-l_15)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_15)))"
"(if(let-values(((or-part_21)(not stx-p_16)))"
"(if or-part_21 or-part_21(syntax?$1 stx-p_16)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_16)))"
"(datum->syntax$1 stx-c_13 s_14(to-srcloc-stx stx-l_15) stx-p_16)))))))))))"
"(case-lambda"
"((stx-c_22 s_23)(datum->syntax9_4 stx-c_22 s_23 #f #f #f #f #f #f))"
"((stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28)"
"(datum->syntax9_4 stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28 #t #t #t))"
"((stx-c_29 s_30 stx-l_31 stx-p2_32)(datum->syntax9_4 stx-c_29 s_30 stx-l_31 stx-p2_32 #f #t #t #f))"
"((stx-c_33 s_34 stx-l1_35)(datum->syntax9_4 stx-c_33 s_34 stx-l1_35 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_36)"
"(begin"
"      (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_36)))"
"(syntax->list$1 s_36))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_37)"
"(begin"
"      (if (syntax?$1 s_37) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_37)))"
"(if(syntax-property$1 s_37 original-property-sym)(not(syntax-any-macro-scopes? s_37)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_38)"
"(lambda(a13_39 b14_40 phase11_41 phase12_42)"
"(let-values(((a_43) a13_39))"
"(let-values(((b_44) b14_40))"
"(let-values(((phase_45)(if phase12_42 phase11_41(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_43)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_43)))"
"(if(identifier? b_44)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_44)))"
"(if(phase? phase_45)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_45)))"
"(bound-identifier=?$1 a_43 b_44 phase_45)))))))))"
"(case-lambda"
"((a_46 b_47)(bound-identifier=?15_38 a_46 b_47 #f #f))"
"((a_48 b_49 phase11_50)(bound-identifier=?15_38 a_48 b_49 phase11_50 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_51)"
"(lambda(a21_52 b22_53 a-phase17_54 b-phase18_55 a-phase19_56 b-phase20_57)"
"(let-values(((a_58) a21_52))"
"(let-values(((b_59) b22_53))"
"(let-values(((a-phase_60)(if a-phase19_56 a-phase17_54(1/syntax-local-phase-level))))"
"(let-values(((b-phase_61)(if b-phase20_57 b-phase18_55 a-phase_60)))"
"(let-values()"
"(begin"
"(if(identifier? a_58)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_58)))"
"(if(identifier? b_59)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_59)))"
"(if(phase? a-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_60)))"
"(if(phase? b-phase_61)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_61)))"
"(free-identifier=?$1 a_58 b_59 a-phase_60 b-phase_61))))))))))"
"(case-lambda"
"((a_62 b_63)(free-identifier=?23_51 a_62 b_63 #f #f #f #f))"
"((a_64 b_65 a-phase_66 b-phase18_67)(free-identifier=?23_51 a_64 b_65 a-phase_66 b-phase18_67 #t #t))"
"((a_68 b_69 a-phase17_70)(free-identifier=?23_51 a_68 b_69 a-phase17_70 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_71 b_72)"
"(let-values((()"
"(begin"
"(if(identifier? a_71)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_71)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_72)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_72)))"
"(values))))"
"(let-values(((phase_73)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_71 b_72 phase_73 phase_73))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_74 b_75)"
"(let-values((()"
"(begin"
"(if(identifier? a_74)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_74)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_75)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_75)))"
"(values))))"
"(let-values(((phase_76)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_74 b_75 phase_76 phase_76))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_77 b_78)"
"(begin"
"      (if (identifier? a_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_77)))"
"      (if (identifier? b_78) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_78)))"
"(free-identifier=?$1 a_77 b_78 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding28_79)"
"(lambda(id27_80 phase25_81 phase26_82)"
"(let-values(((id_83) id27_80))"
"(let-values(((phase_84)(if phase26_82 phase25_81(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_83)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_83)))"
"(if(phase? phase_84)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_84)))"
"(identifier-binding$1 id_83 phase_84))))))))"
"(case-lambda"
"((id_85)(identifier-binding28_79 id_85 #f #f))"
"((id_86 phase25_87)(identifier-binding28_79 id_86 phase25_87 #t)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(lambda(id_88)"
"(begin"
"(if(identifier? id_88)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_88)))"
"(identifier-binding$1 id_88(add1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_89)"
"(begin"
"(if(identifier? id_89)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_89)))"
"(identifier-binding$1 id_89(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_90)"
"(begin"
"(if(identifier? id_90)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_90)))"
"(identifier-binding$1 id_90 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol33_91)"
"(lambda(id32_92 phase30_93 phase31_94)"
"(let-values(((id_95) id32_92))"
"(let-values(((phase_96)(if phase31_94 phase30_93(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_95)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_95)))"
"(if(phase? phase_96)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_96)))"
"(identifier-binding-symbol$1 id_95 phase_96))))))))"
"(case-lambda"
"((id_97)(identifier-binding-symbol33_91 id_97 #f #f))"
"((id_98 phase30_99)(identifier-binding-symbol33_91 id_98 phase30_99 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context38_100)"
"(lambda(id37_101 syms35_102 syms36_103)"
"(let-values(((id_104) id37_101))"
"(let-values(((syms_105)(if syms36_103 syms35_102 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_104)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_104)))"
"(if(if(list? syms_105)(andmap2 symbol? syms_105) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_105)))"
" id_104)))))))"
"(case-lambda"
"((id_106)(identifier-prune-lexical-context38_100 id_106 #f #f))"
"((id_107 syms35_108)(identifier-prune-lexical-context38_100 id_107 syms35_108 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info45_109)"
"(lambda(s44_110 phase40_111 all-bindings?41_112 phase42_113 all-bindings?43_114)"
"(let-values(((s_115) s44_110))"
"(let-values(((phase_116)(if phase42_113 phase40_111(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_117)(if all-bindings?43_114 all-bindings?41_112 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_115)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_115)))"
"(if(phase? phase_116)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_116)))"
"(syntax-debug-info$1 s_115 phase_116 all-bindings?_117)))))))))"
"(case-lambda"
"((s_118)(syntax-debug-info45_109 s_118 #f #f #f #f))"
"((s_119 phase_120 all-bindings?41_121)(syntax-debug-info45_109 s_119 phase_120 all-bindings?41_121 #t #t))"
"((s_122 phase40_123)(syntax-debug-info45_109 s_122 phase40_123 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_124 phase_125)"
"(begin"
"      (if (syntax?$1 s_124) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_124)))"
"(if(phase? phase_125)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_125)))"
"(syntax-shift-phase-level$1 s_124 phase_125))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_126 old-stx_127 id_128)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_126)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_126)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_127)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_128)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_128)))"
"(values))))"
"(let-values(((s_129)(syntax-track-origin$1 new-stx_126 old-stx_127 id_128)))"
"(let-values(((ctx_130)"
"(let-values(((...ander/syntax/api.rkt:191:14_131) get-current-expand-context8.1)"
"((temp65_132) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_132 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/syntax/api.rkt:191:14_131"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp65_132))))))"
"(begin"
"(if ctx_130"
"(let-values()"
"(let-values(((obs_133)(expand-context-observer ctx_130)))"
"(if obs_133"
"(let-values()(let-values()(call-expand-observe obs_133 'track-origin s_129)))"
"(void))))"
"(void))"
" s_129))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax51_134)"
"(lambda(src47_135 in48_136 src49_137 in50_138)"
"(let-values(((src_139)(if src49_137 src47_135(object-name(current-input-port)))))"
"(let-values(((in_140)(if in50_138 in48_136(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_140)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_140)))"
"(read-syntax$1 src_139 in_140))))))))"
"(case-lambda"
"(()(read-syntax51_134 #f #f #f #f))"
"((src_141 in48_142)(read-syntax51_134 src_141 in48_142 #t #t))"
"((src47_143)(read-syntax51_134 src47_143 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive63_144)"
"(lambda(src53_145"
" in54_146"
" start55_147"
" readtable56_148"
" graph?57_149"
" src58_150"
" in59_151"
" start60_152"
" readtable61_153"
" graph?62_154)"
"(let-values(((src_155)(if src58_150 src53_145(object-name(current-input-port)))))"
"(let-values(((in_156)(if in59_151 in54_146(current-input-port))))"
"(let-values(((start_157)(if start60_152 start55_147 #f)))"
"(let-values(((readtable_158)(if readtable61_153 readtable56_148(current-readtable))))"
"(let-values(((graph?_159)(if graph?62_154 graph?57_149 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_156)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_156)))"
"(if(let-values(((or-part_160)(char? start_157)))"
"(if or-part_160 or-part_160(not start_157)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_157)))"
"(if(let-values(((or-part_161)(readtable? readtable_158)))"
"(if or-part_161 or-part_161(not readtable_158)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_158)))"
"(read-syntax/recursive$1 src_155 in_156 start_157 readtable_158 graph?_159)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive63_144 #f #f #f #f #f #f #f #f #f #f))"
"((src_162 in_163 start_164 readtable_165 graph?57_166)"
"(read-syntax/recursive63_144 src_162 in_163 start_164 readtable_165 graph?57_166 #t #t #t #t #t))"
"((src_167 in_168 start_169 readtable56_170)"
"(read-syntax/recursive63_144 src_167 in_168 start_169 readtable56_170 #f #t #t #t #t #f))"
"((src_171 in_172 start55_173)(read-syntax/recursive63_144 src_171 in_172 start55_173 #f #f #t #t #t #f #f))"
"((src_174 in54_175)(read-syntax/recursive63_144 src_174 in54_175 #f #f #f #t #t #f #f #f))"
"((src53_176)(read-syntax/recursive63_144 src53_176 #f #f #f #f #t #f #f #f #f)))))"
"(void)"
"(void)"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))"
"(let-values(((s_8)"
"(syntax-shift-phase-level$1"
"(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))"
" phase-shift_4)))"
"(let-values((()"
"(begin"
"(let-values(((lst_10) requires_1))"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(fold-var_12 lst_13)"
"(if(pair? lst_13)"
"(let-values(((phase+reqs_14)(unsafe-car lst_13)))"
"(let-values(((fold-var_15)"
"(let-values(((fold-var_16) fold-var_12))"
"(let-values(((fold-var_17)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_18)"
"(car"
" phase+reqs_14)))"
"(let-values(((lst_19)"
"(cdr"
" phase+reqs_14)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()"
"(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((req_23)"
"(unsafe-car"
" lst_22)))"
"(let-values(((fold-var_24)"
"(let-values(((fold-var_25)"
" fold-var_21))"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_27)"
"(module-path-index-shift"
" req_23"
" original-self_5"
" self_6)))"
"(let-values(((...val/root-context.rkt:35:8_28)"
" perform-require!74.1)"
"((mpi1_29)"
" mpi_27)"
"((s2_30)"
" s_8)"
"((self3_31)"
" self_6)"
"((s4_32)"
" s_8)"
"((ns5_33)"
" ns_3)"
"((temp6_34)"
"(phase+"
" phase_18"
" phase-shift_4))"
"((phase-shift7_35)"
" phase-shift_4)"
"((temp8_36)"
" 'module))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!74.1))"
"(perform-require!72.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_34"
" #f"
" #f"
" phase-shift7_35"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_36"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...val/root-context.rkt:35:8_28"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:run-phase"
" #:who)"
" 7)"
" '(#:phase-shift"
" #:run-phase"
" #:who)"
"(list"
" temp6_34"
" phase-shift7_35"
" temp8_36)"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)))))"
"(void)))))"
"(values"
" fold-var_26)))))"
"(for-loop_20"
" fold-var_24"
"(unsafe-cdr"
" lst_22))))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))))"
"(void)))))"
"(values fold-var_17)))))"
"(for-loop_11 fold-var_15(unsafe-cdr lst_13))))"
" fold-var_12))))"
" for-loop_11)"
"(void)"
" lst_10)))"
"(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_37) evaled-ld-h_2))"
"(begin"
"(if((lambda(ht_38)(hash? ht_38)) ht_37)(void)(let-values()(default-in-hash ht_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 i_41)"
"(if i_41"
"(let-values(((phase_42 linklet_43)(hash-iterate-key+value ht_37 i_41)))"
"(let-values(((fold-var_44)"
"(let-values(((fold-var_45) fold-var_40))"
"(let-values(((fold-var_46)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_47)"
"(1/linklet-export-variables"
" linklet_43)))"
"(begin"
"(if(list? lst_47)"
"(void)"
"(let-values()(in-list lst_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(fold-var_49"
" lst_50)"
"(if(pair?"
" lst_50)"
"(let-values(((sym_51)"
"(unsafe-car"
" lst_50)))"
"(let-values(((fold-var_52)"
"(let-values(((fold-var_53)"
" fold-var_49))"
"(let-values(((fold-var_54)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_55)"
"(datum->syntax$1"
" s_8"
" sym_51)))"
"(begin"
"(let-values(((id9_56)"
" id_55)"
"((temp10_57)"
"(let-values(((self12_59)"
" self_6)"
"((phase13_60)"
" phase_42)"
"((sym14_61)"
" sym_51))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self12_59"
" phase13_60"
" sym14_61)"
"(make-module-binding24.1"
" self12_59"
" phase13_60"
" sym14_61))))"
"((temp11_58)"
"(phase+"
" phase_42"
" phase-shift_4)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!19.1))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" id9_56"
" temp10_57"
" temp11_58)"
"(add-binding!19.1"
" id9_56"
" temp10_57"
" temp11_58)))"
"(add-defined-sym!"
" defined-syms_9"
" phase_42"
" sym_51"
" id_55))))"
"(void)))))"
"(values"
" fold-var_54)))))"
"(for-loop_48"
" fold-var_52"
"(unsafe-cdr"
" lst_50))))"
" fold-var_49))))"
" for-loop_48)"
"(void)"
" lst_47))))"
"(void)))))"
"(values fold-var_46)))))"
"(for-loop_39 fold-var_44(hash-iterate-next ht_37 i_41))))"
" fold-var_40))))"
" for-loop_39)"
"(void)"
"(hash-iterate-first ht_37))))"
" root-ctx_7))))))))"
"(void)"
"(void)"
"(define-values(module-cache)(make-weak-hash))"
"(define-values(make-module-cache-key)(lambda(hash-code_1)(if hash-code_1(list hash-code_1) #f)))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_2 proc_3)(hash-set! module-cache key_2(make-ephemeron key_2 proc_3))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_4)(let-values(((e_5)(hash-ref module-cache key_4 #f)))(if e_5(ephemeron-value e_5) #f))))"
"(void)"
"(void)"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_1"
" namespace4_2"
" supermodule-name3_3"
" supermodule-name6_4"
" with-submodules?2_5"
" with-submodules?5_6"
" c7_7)"
"(let-values(((c_8) c7_7))"
"(let-values(((ns_9)(if namespace4_2 namespace1_1(1/current-namespace))))"
"(let-values(((with-submodules?_10)(if with-submodules?5_6 with-submodules?2_5 #t)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_4 supermodule-name3_3 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((syntax-literals-data-instance_16)"
"(if(compiled-in-memory? c_8)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_8)"
"(let-values(((l_37)(hash-ref h_13 'stx-data #f)))"
"(if l_37"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_37)"
"(list deserialize-instance data-instance_14)))"
"(if(eq?(hash-ref h_13 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values((()"
"(begin"
"(if(not(load-on-demand-enabled))"
"(let-values()"
"(let-values(((deserialize-syntax_38)"
"(1/instance-variable-value"
" syntax-literals-data-instance_16"
" deserialize-syntax-id)))"
"(if deserialize-syntax_38(let-values()(deserialize-syntax_38))(void))))"
"(void))"
"(values))))"
"(let-values(((decl_17)"
"(lambda(key_39)(1/instance-variable-value declaration-instance_15 key_39))))"
"(let-values(((pre-submodule-names_18)(hash-ref h_13 'pre null)))"
"(let-values(((post-submodule-names_19)(hash-ref h_13 'post null)))"
"(let-values(((default-name_20)(hash-ref h_13 'name 'module)))"
"(let-values(((cache-key_21)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_18)"
"(if(null? post-submodule-names_19)(hash-ref h_13 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_22)(hash-ref h_13 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_23)(hash-ref h_13 'min-phase 0)))"
"(let-values(((max-phase_24)(hash-ref h_13 'max-phase 0)))"
"(let-values(((language-info_25)(hash-ref h_13 'language-info #f)))"
"(let-values(((phases-h_26)"
"(let-values(((start_40) min-phase_23)"
"((end_41)(add1 max-phase_24))"
"((inc_42) 1))"
"(begin"
"(if(if(real? start_40)"
"(if(real? end_41)(real? inc_42) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_40 end_41 inc_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(table_44 pos_45)"
"(if(< pos_45 end_41)"
"(let-values(((phase-level_46) pos_45))"
"(let-values(((table_47)"
"(let-values(((v_48)"
"(hash-ref"
" h_13"
" phase-level_46"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_49)"
"(lambda(table_50)"
"(let-values()"
"(let-values(((table_51)"
"(let-values(((table_52)"
" table_50))"
"(if v_48"
"(let-values(((table_53)"
" table_52))"
"(let-values(((table_54)"
"(let-values()"
"(let-values(((key_55"
" val_56)"
"(let-values()"
"(values"
" phase-level_46"
"(1/eval-linklet"
" v_48)))))"
"(hash-set"
" table_53"
" key_55"
" val_56)))))"
"(values"
" table_54)))"
" table_52))))"
" table_51)))))"
" for-loop_49)"
" table_44)))))"
"(for-loop_43"
" table_47"
"(+ pos_45 inc_42))))"
" table_44))))"
" for-loop_43)"
" '#hash()"
" start_40)))))"
"(let-values(((syntax-literals-linklet_27)"
"(let-values(((l_57)(hash-ref h_13 'stx #f)))"
"(if l_57(1/eval-linklet l_57) #f))))"
"(let-values(((extra-inspector_28)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-compile-time-inspector c_8)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_29)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv())))"
"(let-values(((requires_30)(decl_17 'requires)))"
"(let-values(((provides_31)(decl_17 'provides)))"
"(let-values(((original-self_32)(decl_17 'self-mpi)))"
"(let-values(((phase-to-link-modules_33)"
"(decl_17 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_34)"
"(make-create-root-expand-context-from-module"
" requires_30"
" phases-h_26)))"
"(let-values(((declare-submodules_35)"
"(lambda(ns_58 names_59 declare-name_60 pre?_61)"
"(if dh_12"
"(let-values()"
"(if(compiled-in-memory? c_8)"
"(let-values(((lst_62)"
"(if pre?_61"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_8)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_8))))"
"(begin"
"(if(list? lst_62)"
"(void)"
"(let-values()(in-list lst_62)))"
"((letrec-values(((for-loop_63)"
"(lambda(fold-var_64"
" lst_65)"
"(if(pair?"
" lst_65)"
"(let-values(((c_66)"
"(unsafe-car"
" lst_65)))"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_68)"
" fold-var_64))"
"(let-values(((fold-var_69)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:108:13_70)"
" eval-module10.1)"
"((c12_71)"
" c_66)"
"((ns13_72)"
" ns_58)"
"((declare-name14_73)"
" declare-name_60))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" ns13_72"
" #t"
" declare-name14_73"
" #t"
" #f"
" #f"
" c12_71)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:108:13_70"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns13_72"
" declare-name14_73)"
" c12_71))))"
"(void)))))"
"(values"
" fold-var_69)))))"
"(for-loop_63"
" fold-var_67"
"(unsafe-cdr"
" lst_65))))"
" fold-var_64))))"
" for-loop_63)"
"(void)"
" lst_62)))"
"(let-values(((lst_74) names_59))"
"(begin"
"(if(list? lst_74)"
"(void)"
"(let-values()(in-list lst_74)))"
"((letrec-values(((for-loop_75)"
"(lambda(fold-var_76"
" lst_77)"
"(if(pair?"
" lst_77)"
"(let-values(((name_78)"
"(unsafe-car"
" lst_77)))"
"(let-values(((fold-var_79)"
"(let-values(((fold-var_80)"
" fold-var_76))"
"(let-values(((fold-var_81)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_82)"
"(hash-ref"
" dh_12"
" name_78"
" #f)))"
"(begin"
"(if sm-cd_82"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                         \"missing submodule declaration:\""
" name_78)))"
"(let-values(((...nder/eval/module.rkt:112:13_83)"
" eval-module10.1)"
"((sm-cd15_84)"
" sm-cd_82)"
"((ns16_85)"
" ns_58)"
"((declare-name17_86)"
" declare-name_60))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" ns16_85"
" #t"
" declare-name17_86"
" #t"
" #f"
" #f"
" sm-cd15_84)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:112:13_83"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns16_85"
" declare-name17_86)"
" sm-cd15_84))))))"
"(void)))))"
"(values"
" fold-var_81)))))"
"(for-loop_75"
" fold-var_79"
"(unsafe-cdr"
" lst_77))))"
" fold-var_76))))"
" for-loop_75)"
"(void)"
" lst_74)))))"
"(void)))))"
"(let-values(((declare-this-module_36)"
"(lambda(ns_87)"
"(let-values(((m_88)"
"(let-values(((...nder/eval/module.rkt:120:17_90)"
" make-module39.1)"
"((temp22_91)"
"(1/current-module-declare-source))"
"((original-self23_92)"
" original-self_32)"
"((requires24_93)"
" requires_30)"
"((provides25_94)"
" provides_31)"
"((language-info26_95)"
" language-info_25)"
"((min-phase27_96)"
" min-phase_23)"
"((max-phase28_97)"
" max-phase_24)"
"((cross-phase-persistent?29_98)"
" cross-phase-persistent?_22)"
"((temp30_99)"
"(append"
" pre-submodule-names_18"
" post-submodule-names_19))"
"((supermodule-name31_100)"
" supermodule-name_11)"
"((temp32_101)"
"(lambda()"
"(get-all-variables"
" phases-h_26)))"
"((temp33_102)"
"(lambda(phase-level_105)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_26"
" phase-level_105"
" #f)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_105"
" #f)"
" original-self_32)))"
"((temp34_103)"
"(lambda(data-box_106"
" ns_107"
" phase-shift_108"
" self_109"
" bulk-binding-registry_110"
" insp_111)"
"(if(unbox"
" data-box_106)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_106"
" cache-key_21"
" ns_107"
" syntax-literals-linklet_27"
" data-instance_14"
" syntax-literals-data-instance_16"
" phase-shift_108"
" original-self_32"
" self_109"
" bulk-binding-registry_110"
" insp_111"
" create-root-expand-context-from-module_34)))))"
"((temp35_104)"
"(lambda(data-box_112"
" ns_113"
" phase-shift_114"
" phase-level_115"
" self_116"
" bulk-binding-registry_117"
" insp_118)"
"(let-values()"
"(let-values(((syntax-literals-instance_119)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_112))))"
"(let-values(((phase-linklet_120)"
"(hash-ref"
" phases-h_26"
" phase-level_115"
" #f)))"
"(if phase-linklet_120"
"(let-values()"
"(let-values(((module-uses_121)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_115)))"
"(let-values(((import-module-instances_122"
" import-instances_123)"
"(let-values(((mis_126"
" is_127)"
"(let-values(((lst_128)"
" module-uses_121))"
"(begin"
"(if(list?"
" lst_128)"
"(void)"
"(let-values()"
"(in-list"
" lst_128)))"
"((letrec-values(((for-loop_129)"
"(lambda(mis_130"
" is_131"
" lst_132)"
"(if(pair?"
" lst_132)"
"(let-values(((mu_133)"
"(unsafe-car"
" lst_132)))"
"(let-values(((mis_134"
" is_135)"
"(let-values(((mis_136)"
" mis_130)"
"((is_137)"
" is_131))"
"(let-values(((mis_138"
" is_139)"
"(let-values()"
"(let-values(((mis43_140"
" is44_141)"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:155:48_142)"
" namespace-module-use->module+linklet-instances146.1)"
"((ns45_143)"
" ns_113)"
"((mu46_144)"
" mu_133)"
"((original-self47_145)"
" original-self_32)"
"((self48_146)"
" self_116)"
"((temp49_147)"
"(phase+"
"(phase-"
" phase-level_115"
"(module-use-phase"
" mu_133))"
" phase-shift_114)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances146.1))"
"(namespace-module-use->module+linklet-instances144.1"
" temp49_147"
" original-self47_145"
" #t"
" self48_146"
" #t"
" ns45_143"
" mu46_144)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:155:48_142"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
" 4)"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
"(list"
" temp49_147"
" original-self47_145"
" self48_146)"
" ns45_143"
" mu46_144))))))"
"(values"
"(cons"
" mis43_140"
" mis_136)"
"(cons"
" is44_141"
" is_137))))))"
"(values"
" mis_138"
" is_139)))))"
"(for-loop_129"
" mis_134"
" is_135"
"(unsafe-cdr"
" lst_132))))"
"(values"
" mis_130"
" is_131)))))"
" for-loop_129)"
" null"
" null"
" lst_128)))))"
"(values"
"(alt-reverse"
" mis_126)"
"(alt-reverse"
" is_127)))))"
"(let-values((()"
"(begin"
"(let-values(((...nder/eval/module.rkt:163:35_148)"
" check-require-access11.1)"
"((phase-linklet36_149)"
" phase-linklet_120)"
"((temp37_150)"
" 2)"
"((module-uses38_151)"
" module-uses_121)"
"((import-module-instances39_152)"
" import-module-instances_122)"
"((insp40_153)"
" insp_118)"
"((extra-inspector41_154)"
" extra-inspector_28)"
"((temp42_155)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_29"
" phase-level_115"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp37_150"
" phase-linklet36_149"
" module-uses38_151"
" import-module-instances39_152"
" insp40_153"
" extra-inspector41_154"
" temp42_155)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:163:35_148"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp37_150)"
" phase-linklet36_149"
" module-uses38_151"
" import-module-instances39_152"
" insp40_153"
" extra-inspector41_154"
" temp42_155)))"
"(values))))"
"(let-values(((module-body-instance-instance_124)"
"(let-values(((...nder/eval/module.rkt:169:37_156)"
" make-module-body-instance-instance20.1)"
"((temp50_157)"
"(lambda(name_158"
" val_159)"
"(namespace-set-transformer!"
" ns_113"
"(sub1"
" phase-level_115)"
" name_158"
" val_159))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-body-instance-instance20.1))"
"(make-module-body-instance-instance18.1"
" temp50_157)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:169:37_156"
" keyword-procedure-extract"
" '(#:set-transformer!)"
" 2)"
" '(#:set-transformer!)"
"(list"
" temp50_157))))))"
"(let-values(((instantiate-body_125)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_120"
"(list*"
" syntax-literals-instance_119"
" module-body-instance-instance_124"
" import-instances_123)"
"(namespace->instance"
" ns_113"
" phase-level_115)))))"
"(if(zero-phase?"
" phase-level_115)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_114)"
"(let-values()"
"(instantiate-body_125))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_113)"
"(let-values()"
"(instantiate-body_125))))))"
"(let-values()"
"(let-values(((ns-1_160)"
"(namespace->namespace-at-phase"
" ns_113"
"(phase+"
" phase-shift_114"
"(sub1"
" phase-level_115)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(make-expand-context"
" ns-1_160)))"
" 1/current-namespace"
" ns_113"
" current-module-code-inspector"
" insp_118)"
"(let-values()"
"(instantiate-body_125))))))))))))"
"(void))))))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module39.1))"
"(make-module37.1"
" cross-phase-persistent?29_98"
" #t"
" temp32_101"
" #t"
" temp35_104"
" language-info26_95"
" #t"
" max-phase28_97"
" #t"
" min-phase27_96"
" #t"
" #f"
" #f"
" temp33_102"
" #t"
" #f"
" #f"
" temp34_103"
" #t"
" #f"
" #f"
" provides25_94"
" requires24_93"
" #t"
" original-self23_92"
" temp22_91"
" #t"
" temp30_99"
" #t"
" supermodule-name31_100"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:120:17_90"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:phase-level-linklet-info-callback"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)"
" 2)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:phase-level-linklet-info-callback"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:source-name"
" #:submodule-names"
" #:supermodule-name)"
"(list"
" cross-phase-persistent?29_98"
" temp32_101"
" temp35_104"
" language-info26_95"
" max-phase28_97"
" min-phase27_96"
" temp33_102"
" temp34_103"
" provides25_94"
" requires24_93"
" original-self23_92"
" temp22_91"
" temp30_99"
" supermodule-name31_100))))))"
"(let-values(((declare-name_89)"
"(substitute-module-declare-name"
" default-name_20)))"
"(begin"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_87"
" pre-submodule-names_18"
" declare-name_89"
" #t))"
"(void))"
"(let-values(((...nder/eval/module.rkt:204:7_161)"
" declare-module!58.1)"
"((ns18_162) ns_87)"
"((m19_163) m_88)"
"((declare-name20_164)"
" declare-name_89)"
"((with-submodules?21_165)"
" with-submodules?_10))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!58.1))"
"(declare-module!56.1"
" with-submodules?21_165"
" #t"
" ns18_162"
" m19_163"
" declare-name20_164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:204:7_161"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 5)"
" '(#:with-submodules?)"
"(list with-submodules?21_165)"
" ns18_162"
" m19_163"
" declare-name20_164)))"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_87"
" post-submodule-names_19"
" declare-name_89"
" #f))"
"(void))))))))"
"(begin"
"(if cache-key_21"
"(let-values()"
"(module-cache-set!"
" cache-key_21"
" declare-this-module_36))"
"(void))"
"(declare-this-module_36"
" ns_9)))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack9.1)"
"(lambda(given-kws_166 given-args_167 c7_168)"
"(let-values(((namespace4_169)(if(pair? given-kws_166)(eq? '#:namespace(car given-kws_166)) #f)))"
"(let-values(((namespace1_170)(if namespace4_169(car given-args_167)(void)))"
"((given-kws_171)(if namespace4_169(cdr given-kws_166) given-kws_166))"
"((given-args_172)(if namespace4_169(cdr given-args_167) given-args_167)))"
"(let-values(((supermodule-name6_173)"
"(if(pair? given-kws_171)(eq? '#:supermodule-name(car given-kws_171)) #f)))"
"(let-values(((supermodule-name3_174)(if supermodule-name6_173(car given-args_172)(void)))"
"((given-kws_175)(if supermodule-name6_173(cdr given-kws_171) given-kws_171))"
"((given-args_176)(if supermodule-name6_173(cdr given-args_172) given-args_172)))"
"(let-values(((with-submodules?5_177)(pair? given-kws_175)))"
"(let-values(((with-submodules?2_178)(if with-submodules?5_177(car given-args_176)(void))))"
"(eval-module8.1"
" namespace1_170"
" namespace4_169"
" supermodule-name3_174"
" supermodule-name6_173"
" with-submodules?2_178"
" with-submodules?5_177"
" c7_168)))))))))"
"(define-values"
"(eval-module10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_179 given-argc_180)"
"(if(= given-argc_180 3)"
"(let-values(((l1_181) given-kws_179))"
"(let-values(((l1_182)(if(null? l1_181) l1_181(if(eq?(car l1_181) '#:namespace)(cdr l1_181) l1_181))))"
"(let-values(((l1_183) l1_182))"
"(let-values(((l1_184)"
"(if(null? l1_183) l1_183(if(eq?(car l1_183) '#:supermodule-name)(cdr l1_183) l1_183))))"
"(let-values(((l1_185) l1_184))"
"(let-values(((l1_186)"
"(if(null? l1_185)"
" l1_185"
"(if(eq?(car l1_185) '#:with-submodules?)(cdr l1_185) l1_185))))"
"(null? l1_186)))))))"
" #f))"
"(case-lambda((given-kws_187 given-args_188 c_189)(unpack9.1 given-kws_187 given-args_188 c_189)))"
" null"
" '(#:namespace #:supermodule-name #:with-submodules?)"
"(let-values(((eval-module_190)(case-lambda((c_191)(unpack9.1 null null c_191))))) eval-module_190)))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_192 make-_193 ?_194 -ref_195 -set!_196)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_192"
" make-_193"
" ?_194"
"(make-struct-field-accessor -ref_195 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_195 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_217"
" cache-key_218"
" ns_219"
" syntax-literals-linklet_220"
" data-instance_221"
" syntax-literals-data-instance_222"
" phase-shift_223"
" original-self_224"
" self_225"
" bulk-binding-registry_226"
" insp_227"
" create-root-expand-context-from-module_228)"
"(let-values(((inst_229)"
"(let-values(((...nder/eval/module.rkt:231:4_232) make-instance-instance15.1)"
"((ns52_233) ns_219)"
"((phase-shift53_234) phase-shift_223)"
"((self54_235) self_225)"
"((insp55_236) insp_227)"
"((bulk-binding-registry56_237) bulk-binding-registry_226)"
"((temp57_238)"
"                                (lambda (name_239 val_240) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(if(variable-reference-constant?(#%variable-reference make-instance-instance15.1))"
"(make-instance-instance13.1"
" bulk-binding-registry56_237"
" insp55_236"
" ns52_233"
" phase-shift53_234"
" self54_235"
" temp57_238)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:231:4_232"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" 2)"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
"(list"
" bulk-binding-registry56_237"
" insp55_236"
" ns52_233"
" phase-shift53_234"
" self54_235"
" temp57_238))))))"
"(let-values(((syntax-literals-instance_230)"
"(if syntax-literals-linklet_220"
"(1/instantiate-linklet"
" syntax-literals-linklet_220"
"(list deserialize-instance data-instance_221 syntax-literals-data-instance_222 inst_229))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_217(instance-data11.1 syntax-literals-instance_230 cache-key_218))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_231)"
"(1/instance-variable-value syntax-literals-instance_230 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_231 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_219"
"(delay"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))))"
"(if(procedure? get-encoded-root-expand-ctx_231)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_219"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_231))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_219"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_228"
" ns_219"
" phase-shift_223"
" original-self_224"
" self_225)))))))))))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_241)"
"(let-values(((ld/h_242)(if(compiled-in-memory? c_241)(compiled-in-memory-linklet-directory c_241) c_241)))"
"(let-values(((dh_243)"
"(if(1/linklet-directory? ld/h_242)"
"(let-values()(1/linklet-directory->hash ld/h_242))"
"(let-values() #f))))"
"(let-values(((h_244)(1/linklet-bundle->hash(if dh_243(hash-ref dh_243 #f) ld/h_242))))"
"(values dh_243 h_244))))))"
"(define-values"
"(compiled-module->h)"
"(lambda(c_245)(let-values(((dh_246 h_247)(compiled-module->dh+h c_245))) h_247)))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_248)"
"(let-values(((dh_249 h_250)(compiled-module->dh+h c_248)))"
"(let-values(((data-instance_251)"
"(if(compiled-in-memory? c_248)"
"(make-data-instance-from-compiled-in-memory c_248)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_250 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_252)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_250 'decl))"
"(list deserialize-instance data-instance_251))))"
"(values dh_249 h_250 data-instance_251 declaration-instance_252))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_253)"
"(let-values(((dh_254 h_255 data-instance_256 declaration-instance_257)"
"(compiled-module->dh+h+data-instance+declaration-instance c_253)))"
" declaration-instance_257)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_258)"
"(let-values(((dh_259 h_260 data-instance_261 declaration-instance_262)"
"(compiled-module->dh+h+data-instance+declaration-instance c_258)))"
"(values h_260 declaration-instance_262))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_263)(1/make-instance 'data #f mpi-vector-id(compiled-in-memory-mpis cim_263))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_264)"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_264))))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f get-syntax-literal!-id(lambda(pos_265) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" get-syntax-literal!-id"
"(lambda(pos_266) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_267)"
"(let-values(((ht_268) phases-h_267))"
"(begin"
"(if((lambda(ht_269)(hash? ht_269)) ht_268)(void)(let-values()(default-in-hash ht_268)))"
"((letrec-values(((for-loop_270)"
"(lambda(table_271 i_272)"
"(if i_272"
"(let-values(((phase_273 linklet_274)(hash-iterate-key+value ht_268 i_272)))"
"(let-values(((table_275)"
"(let-values(((table_276) table_271))"
"(let-values(((table_277)"
"(let-values()"
"(let-values(((key_278 val_279)"
"(let-values()"
"(values"
" phase_273"
"(1/linklet-export-variables"
" linklet_274)))))"
"(hash-set table_276 key_278 val_279)))))"
"(values table_277)))))"
"(for-loop_270 table_275(hash-iterate-next ht_268 i_272))))"
" table_271))))"
" for-loop_270)"
" '#hash()"
"(hash-iterate-first ht_268))))))"
"(void)"
"(void)"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values(((src-namespace_6) src-namespace3_2))"
"(let-values(((mod-path_7) mod-path4_3))"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:14:2_9) do-attach-module21.1)"
"((temp22_10) 'namespace-attach-module)"
"((src-namespace23_11) src-namespace_6)"
"((mod-path24_12) mod-path_7)"
"((dest-namespace25_13) dest-namespace_8)"
"((temp26_14) #t))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp26_14"
" #t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:14:2_9"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp26_14)"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13))))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 #f #f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values(((src-namespace_25) src-namespace9_21))"
"(let-values(((mod-path_26) mod-path10_22))"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:21:2_28) do-attach-module21.1)"
"((temp27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_25)"
"((mod-path29_31) mod-path_26)"
"((dest-namespace30_32) dest-namespace_27)"
"((temp31_33) #f))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp31_33"
" #t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:21:2_28"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp31_33)"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32))))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 #f #f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values(((who_45) who15_41))"
"(let-values(((src-namespace_46) src-namespace16_42))"
"(let-values(((mod-path_47) mod-path17_43))"
"(let-values(((dest-namespace_48) dest-namespace18_44))"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
"                                  (let-values () (raise-argument-error who_45 \"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_54)(1/module-path? mod-path_47)))"
"(if or-part_54 or-part_54(1/resolved-module-path? mod-path_47)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_45"
"                                       \"(or/c module-path? resolved-module-path?)\""
" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
"                                      (let-values () (raise-argument-error who_45 \"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_50"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_55)"
"(lambda(mpi_56"
" phase_57"
" attach-instances?_58"
" attach-phase_59)"
"(let-values(((mod-name_60)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_56)))))"
"(let-values(((attach-this-instance?_61)"
"(if attach-instances?_58"
"(eqv? phase_57 attach-phase_59)"
" #f)))"
"(let-values(((m-ns_62)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_60"
" '#hasheqv())"
" phase_57"
" missing_52)))"
"(if(let-values(((or-part_63)"
"(eq? missing_52 m-ns_62)))"
"(if or-part_63"
" or-part_63"
"(if attach-this-instance?_61"
"(not m-ns_62)"
" #f)))"
"(let-values()"
"(let-values(((m_64)"
"(namespace->module"
" src-namespace_46"
" mod-name_60)))"
"(begin"
"(if m_64"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_60)))"
"(if(if(module-cross-phase-persistent?"
" m_64)"
"(if(not(label-phase? phase_57))"
"(not(zero-phase? phase_57))"
" #f)"
" #f)"
"(let-values()"
"(loop_55"
" mpi_56"
" 0"
" attach-instances?_58"
" 0))"
"(let-values()"
"(let-values(((already-m_65)"
"(namespace->module"
" dest-namespace_48"
" mod-name_60)))"
"(let-values((()"
"(begin"
"(if(if already-m_65"
"(not"
"(eq?"
" already-m_65"
" m_64))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_60))"
"(void))"
"(values))))"
"(let-values(((m-ns_66"
" already?_67)"
"(if attach-this-instance?_61"
"(let-values()"
"(let-values(((m-ns_68)"
"(let-values(((src-namespace32_70)"
" src-namespace_46)"
"((mod-name33_71)"
" mod-name_60)"
"((phase34_72)"
" phase_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_70"
" mod-name33_71"
" phase34_72)"
"(namespace->module-namespace82.1"
" src-namespace32_70"
" mod-name33_71"
" phase34_72)))))"
"(let-values((()"
"(begin"
"(if m-ns_68"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_60)))"
"(values))))"
"(let-values(((already-m-ns_69)"
"(if already-m_65"
"(let-values(((dest-namespace35_73)"
" dest-namespace_48)"
"((mod-name36_74)"
" mod-name_60)"
"((phase37_75)"
" phase_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_73"
" mod-name36_74"
" phase37_75)"
"(namespace->module-namespace82.1"
" dest-namespace35_73"
" mod-name36_74"
" phase37_75)))"
" #f)))"
"(begin"
"(if(if already-m-ns_69"
"(if(not"
"(eq?"
" m-ns_68"
" already-m-ns_69))"
"(not"
"(namespace-same-instance?"
" m-ns_68"
" already-m-ns_69))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_60))"
"(void))"
"(values"
" m-ns_68"
"(if already-m-ns_69"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_57)"
"(not"
"(let-values(((src-namespace38_76)"
" src-namespace_46)"
"((mod-name39_77)"
" mod-name_60)"
"((phase40_78)"
" phase_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_76"
" mod-name39_77"
" phase40_78)"
"(namespace->module-namespace82.1"
" src-namespace38_76"
" mod-name39_77"
" phase40_78))))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values(((src-namespace41_79)"
" src-namespace_46)"
"((mpi42_80)"
" mpi_56)"
"((phase43_81)"
" phase_57))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_79"
" mpi42_80"
" phase43_81)"
"(namespace-module-instantiate!96.1"
" src-namespace41_79"
" mpi42_80"
" phase43_81))))))"
"(void))"
"(values"
" #f"
"(if already-m_65"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_60"
"(lambda(ht_82)"
"(hash-set"
" ht_82"
" phase_57"
" m-ns_66))"
" '#hasheqv())"
"(if already?_67"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_83)"
"(module-requires"
" m_64)))"
"(begin"
"(if(list? lst_83)"
"(void)"
"(let-values()"
"(in-list"
" lst_83)))"
"((letrec-values(((for-loop_84)"
"(lambda(fold-var_85"
" lst_86)"
"(if(pair?"
" lst_86)"
"(let-values(((phase+reqs_87)"
"(unsafe-car"
" lst_86)))"
"(let-values(((fold-var_88)"
"(let-values(((lst_89)"
"(cdr"
" phase+reqs_87)))"
"(begin"
"(if(list?"
" lst_89)"
"(void)"
"(let-values()"
"(in-list"
" lst_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(fold-var_91"
" lst_92)"
"(if(pair?"
" lst_92)"
"(let-values(((req_93)"
"(unsafe-car"
" lst_92)))"
"(let-values(((fold-var_94)"
"(let-values(((fold-var_95)"
" fold-var_91))"
"(let-values(((fold-var_96)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(module-path-index-shift"
" req_93"
"(module-self"
" m_64)"
" mpi_56)"
"(phase+"
" phase_57"
"(car"
" phase+reqs_87))"
" attach-instances?_58"
" attach-phase_59))"
"(void)))))"
"(values"
" fold-var_96)))))"
"(for-loop_90"
" fold-var_94"
"(unsafe-cdr"
" lst_92))))"
" fold-var_91))))"
" for-loop_90)"
" fold-var_85"
" lst_89)))))"
"(for-loop_84"
" fold-var_88"
"(unsafe-cdr"
" lst_86))))"
" fold-var_85))))"
" for-loop_84)"
"(void)"
" lst_83)))"
"(let-values(((lst_97)"
"(module-submodule-names"
" m_64)))"
"(begin"
"(if(list? lst_97)"
"(void)"
"(let-values()"
"(in-list"
" lst_97)))"
"((letrec-values(((for-loop_98)"
"(lambda(fold-var_99"
" lst_100)"
"(if(pair?"
" lst_100)"
"(let-values(((submod-name_101)"
"(unsafe-car"
" lst_100)))"
"(let-values(((fold-var_102)"
"(let-values(((fold-var_103)"
" fold-var_99))"
"(let-values(((fold-var_104)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                     \".\""
" submod-name_101)"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void)))))"
"(values"
" fold-var_104)))))"
"(for-loop_98"
" fold-var_102"
"(unsafe-cdr"
" lst_100))))"
" fold-var_99))))"
" for-loop_98)"
"(void)"
" lst_97)))"
"(if(module-supermodule-name"
" m_64)"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void))))))))))))))"
"(void))))))))"
" loop_55)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_47)"
"(resolved-module-path->module-path mod-path_47)"
" mod-path_47)"
" #f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_105) todo_51))"
"(begin"
"(if((lambda(ht_106)(hash? ht_106)) ht_105)"
"(void)"
"(let-values()(default-in-hash ht_105)))"
"((letrec-values(((for-loop_107)"
"(lambda(fold-var_108 i_109)"
"(if i_109"
"(let-values(((mod-name_110 phases_111)"
"(hash-iterate-key+value"
" ht_105"
" i_109)))"
"(let-values(((fold-var_112)"
"(let-values(((ht_113)"
" phases_111))"
"(begin"
"(if((lambda(ht_114)"
"(hash? ht_114))"
" ht_113)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_113)))"
"((letrec-values(((for-loop_115)"
"(lambda(fold-var_116"
" i_117)"
"(if i_117"
"(let-values(((phase_118"
" m-ns_119)"
"(hash-iterate-key+value"
" ht_113"
" i_117)))"
"(let-values(((fold-var_120)"
"(let-values(((fold-var_121)"
" fold-var_116))"
"(let-values(((fold-var_122)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_123)"
"(namespace->module"
" src-namespace_46"
" mod-name_110)))"
"(begin"
"(let-values(((dest-namespace44_124)"
" dest-namespace_48)"
"((m45_125)"
" m_123)"
"((mod-name46_126)"
" mod-name_110))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!58.1))"
"(declare-module!56.1"
" #f"
" #f"
" dest-namespace44_124"
" m45_125"
" mod-name46_126)"
"(declare-module!58.1"
" dest-namespace44_124"
" m45_125"
" mod-name46_126)))"
"(if m-ns_119"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_46"
" mod-name_110"
" phase_118)"
"(let-values(((or-part_127)"
"(let-values(((dest-namespace47_128)"
" dest-namespace_48)"
"((mod-name48_129)"
" mod-name_110)"
"((phase49_130)"
" phase_118))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_128"
" mod-name48_129"
" phase49_130)"
"(namespace->module-namespace82.1"
" dest-namespace47_128"
" mod-name48_129"
" phase49_130)))))"
"(if or-part_127"
" or-part_127"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_110"
" phase_118"
" m_123"
" m-ns_119)))))"
"(void)))))"
"(void)))))"
"(values"
" fold-var_122)))))"
"(for-loop_115"
" fold-var_120"
"(hash-iterate-next"
" ht_113"
" i_117))))"
" fold-var_116))))"
" for-loop_115)"
" fold-var_108"
"(hash-iterate-first"
" ht_113))))))"
"(for-loop_107"
" fold-var_112"
"(hash-iterate-next ht_105 i_109))))"
" fold-var_108))))"
" for-loop_107)"
"(void)"
"(hash-iterate-first ht_105))))"
"(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(let-values(((ht_131) todo_51))"
"(begin"
"(if((lambda(ht_132)(hash? ht_132)) ht_131)"
"(void)"
"(let-values()(default-in-hash-keys ht_131)))"
"((letrec-values(((for-loop_133)"
"(lambda(fold-var_134 i_135)"
"(if i_135"
"(let-values(((mod-name_136)"
"(hash-iterate-key ht_131 i_135)))"
"(let-values(((fold-var_137)"
"(let-values(((fold-var_138)"
" fold-var_134))"
"(let-values(((fold-var_139)"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_136"
" src-namespace_46))"
"(void)))))"
"(values fold-var_139)))))"
"(for-loop_133"
" fold-var_137"
"(hash-iterate-next ht_131 i_135))))"
" fold-var_134))))"
" for-loop_133)"
"(void)"
"(hash-iterate-first ht_131))))))))))))))))))))))))"
"(define-values"
"(unpack20.1)"
"(lambda(given-kws_140 given-args_141 who15_142 src-namespace16_143 mod-path17_144 dest-namespace18_145)"
"(let-values(((attach-instances?14_146)(pair? given-kws_140)))"
"(let-values(((attach-instances?13_147)(if attach-instances?14_146(car given-args_141)(void))))"
"(do-attach-module19.1"
" attach-instances?13_147"
" attach-instances?14_146"
" who15_142"
" src-namespace16_143"
" mod-path17_144"
" dest-namespace18_145)))))"
"(define-values"
"(do-attach-module21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_148 given-argc_149)"
"(if(= given-argc_149 6)"
"(let-values(((l1_150) given-kws_148))"
"(let-values(((l1_151)"
"(if(null? l1_150) l1_150(if(eq?(car l1_150) '#:attach-instances?)(cdr l1_150) l1_150))))"
"(null? l1_151)))"
" #f))"
"(case-lambda"
"((given-kws_152 given-args_153 who_154 src-namespace_155 mod-path_156 dest-namespace_157)"
"(unpack20.1 given-kws_152 given-args_153 who_154 src-namespace_155 mod-path_156 dest-namespace_157)))"
" null"
" '(#:attach-instances?)"
"(let-values(((do-attach-module_158)"
"(case-lambda"
"((who_159 src-namespace_160 mod-path_161 dest-namespace_162)"
"(unpack20.1 null null who_159 src-namespace_160 mod-path_161 dest-namespace_162)))))"
" do-attach-module_158)))"
"(void)"
"(void)"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_1)(1/current-namespace)))"
"(let-values(((phase_2)(namespace-phase current-ns_1)))"
"(let-values(((ns_3)(namespace->namespace-at-phase(make-namespace) phase_2)))"
"(begin"
"(1/namespace-attach-module current-ns_1 ''#%kernel ns_3)"
"(namespace-primitive-module-visit! ns_3 '#%kernel)"
" ns_3))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_4)"
"(lambda(s3_5 ns1_6 ns2_7)"
"(let-values(((s_8) s3_5))"
"(let-values(((ns_9)(if ns2_7 ns1_6(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_9)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_9)))"
"(values))))"
"(let-values(((root-ctx_10)(namespace-get-root-expand-ctx ns_9)))"
"(let-values(((post-scope_11)(root-expand-context-post-expansion-scope root-ctx_10)))"
"(let-values(((other-namespace-scopes_12)"
"(alt-reverse"
"(let-values(((ht_15)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_10)"
"(namespace-phase ns_9))))"
"(begin"
"(if((lambda(ht_16)(if(hash? ht_16)(immutable? ht_16) #f)) ht_15)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18 i_19)"
"(if i_19"
"(let-values(((sc_20)"
"(unsafe-immutable-hash-iterate-key"
" ht_15"
" i_19)))"
"(let-values(((fold-var_21)"
"(let-values(((fold-var_22)"
" fold-var_18))"
"(if(equal?"
" sc_20"
" post-scope_11)"
" fold-var_22"
"(let-values(((fold-var_23)"
" fold-var_22))"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()"
" sc_20)"
" fold-var_23))))"
"(values"
" fold-var_24)))))))"
"(for-loop_17"
" fold-var_21"
"(unsafe-immutable-hash-iterate-next"
" ht_15"
" i_19))))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(unsafe-immutable-hash-iterate-first ht_15)))))))"
"(let-values(((add-ns-scopes_13)"
"(lambda(s_25)"
"(syntax-transfer-shifts"
"(add-scopes"
"(push-scope s_25 post-scope_11)"
" other-namespace-scopes_12)"
"(root-expand-context-all-scopes-stx root-ctx_10)"
"(let-values(((or-part_26)(namespace-declaration-inspector ns_9)))"
"(if or-part_26 or-part_26(current-code-inspector)))))))"
"(let-values(((maybe-module-id_14)"
"(if(pair?(1/syntax-e s_8))"
"(if(identifier?(car(1/syntax-e s_8)))"
"(add-ns-scopes_13(car(1/syntax-e s_8)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_14"
"(1/free-identifier=?"
" maybe-module-id_14"
"(1/namespace-module-identifier ns_9))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_8"
"(cons maybe-module-id_14(cdr(1/syntax-e s_8)))"
" s_8"
" s_8))"
"(let-values()(add-ns-scopes_13 s_8))))))))))))))))"
"(case-lambda"
"((s_27)(namespace-syntax-introduce4_4 s_27 #f #f))"
"((s_28 ns1_29)(namespace-syntax-introduce4_4 s_28 ns1_29 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_30)"
"(lambda(where6_31 where7_32)"
"(let-values(((where_33)(if where7_32 where6_31(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_34)(1/namespace? where_33)))"
"(if or-part_34 or-part_34(phase? where_33)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_33)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_33)(namespace-phase where_33) where_33))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_30 #f #f))"
"((where6_35)(namespace-module-identifier8_30 where6_35 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_36)"
"(begin"
"      (if (symbol? sym_36) (void) (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_36)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_36)))))"
"(define-values"
"(do-namespace-require23.1)"
"(lambda(copy-variable-as-constant?13_37"
" copy-variable-as-constant?18_38"
" copy-variable-phase-level12_39"
" copy-variable-phase-level17_40"
" run?10_41"
" run?15_42"
" skip-variable-phase-level14_43"
" skip-variable-phase-level19_44"
" visit?11_45"
" visit?16_46"
" who20_47"
" req21_48"
" ns22_49)"
"(let-values(((run?_50)(if run?15_42 run?10_41 #t)))"
"(let-values(((visit?_51)(if visit?16_46 visit?11_45 #f)))"
"(let-values(((who_52) who20_47))"
"(let-values(((req_53) req21_48))"
"(let-values(((ns_54) ns22_49))"
"(let-values(((copy-variable-phase-level_55)"
"(if copy-variable-phase-level17_40 copy-variable-phase-level12_39 #f)))"
"(let-values(((copy-variable-as-constant?_56)"
"(if copy-variable-as-constant?18_38 copy-variable-as-constant?13_37 #f)))"
"(let-values(((skip-variable-phase-level_57)"
"(if skip-variable-phase-level19_44 skip-variable-phase-level14_43 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_54)"
"(void)"
"                                        (let-values () (raise-argument-error who_52 \"namespace?\" ns_54)))"
"(values))))"
"(let-values(((ctx-stx_58)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_54)))))"
"(if(let-values(((or-part_59)(1/module-path-index? req_53)))"
"(if or-part_59 or-part_59(1/module-path? req_53)))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:116:4_60) perform-require!74.1)"
"((temp78_61)"
"(if(1/module-path-index? req_53)"
" req_53"
"(1/module-path-index-join req_53 #f)))"
"((temp79_62) #f)"
"((temp80_63) #f)"
"((ctx-stx81_64) ctx-stx_58)"
"((ns82_65) ns_54)"
"((run?83_66) run?_50)"
"((visit?84_67) visit?_51)"
"((temp85_68)(namespace-phase ns_54))"
"((temp86_69)(namespace-phase ns_54))"
"((copy-variable-phase-level87_70) copy-variable-phase-level_55)"
"((copy-variable-as-constant?88_71) copy-variable-as-constant?_56)"
"((skip-variable-phase-level89_72) skip-variable-phase-level_57)"
"((who90_73) who_52))"
"(if(variable-reference-constant?(#%variable-reference perform-require!74.1))"
"(perform-require!72.1"
" #f"
" #f"
" #f"
" #f"
" copy-variable-as-constant?88_71"
" #t"
" copy-variable-phase-level87_70"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp85_68"
" #f"
" #f"
" temp86_69"
" run?83_66"
" #t"
" skip-variable-phase-level89_72"
" #t"
" visit?84_67"
" #t"
" who90_73"
" temp78_61"
" temp79_62"
" temp80_63"
" ctx-stx81_64"
" ns82_65)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:116:4_60"
" keyword-procedure-extract"
" '(#:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:phase-shift"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)"
" 7)"
" '(#:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:phase-shift"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)"
"(list"
" copy-variable-as-constant?88_71"
" copy-variable-phase-level87_70"
" temp85_68"
" temp86_69"
" run?83_66"
" skip-variable-phase-level89_72"
" visit?84_67"
" who90_73)"
" temp78_61"
" temp79_62"
" temp80_63"
" ctx-stx81_64"
" ns82_65))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:131:4_74) parse-and-perform-requires!30.1)"
"((run?91_75) run?_50)"
"((visit?92_76) visit?_51)"
"((temp93_77)(list(1/datum->syntax ctx-stx_58 req_53)))"
"((temp94_78) #f)"
"((ns95_79) ns_54)"
"((temp96_80)(namespace-phase ns_54))"
"((temp97_81)(make-requires+provides #f))"
"((skip-variable-phase-level98_82) skip-variable-phase-level_57)"
"((who99_83) who_52))"
"(if(variable-reference-constant?"
"(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" run?91_75"
" #t"
" #f"
" #f"
" skip-variable-phase-level98_82"
" #t"
" visit?92_76"
" #t"
" who99_83"
" temp93_77"
" temp94_78"
" ns95_79"
" temp96_80"
" temp97_81)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:131:4_74"
" keyword-procedure-extract"
" '(#:run? #:skip-variable-phase-level #:visit? #:who)"
" 7)"
" '(#:run? #:skip-variable-phase-level #:visit? #:who)"
"(list run?91_75 skip-variable-phase-level98_82 visit?92_76 who99_83)"
" temp93_77"
" temp94_78"
" ns95_79"
" temp96_80"
" temp97_81))))))))))))))))))"
"(define-values"
"(unpack24.1)"
"(lambda(given-kws_84 given-args_85 who20_86 req21_87 ns22_88)"
"(let-values(((copy-variable-as-constant?18_89)"
"(if(pair? given-kws_84)(eq? '#:copy-variable-as-constant?(car given-kws_84)) #f)))"
"(let-values(((copy-variable-as-constant?13_90)(if copy-variable-as-constant?18_89(car given-args_85)(void)))"
"((given-kws_91)(if copy-variable-as-constant?18_89(cdr given-kws_84) given-kws_84))"
"((given-args_92)(if copy-variable-as-constant?18_89(cdr given-args_85) given-args_85)))"
"(let-values(((copy-variable-phase-level17_93)"
"(if(pair? given-kws_91)(eq? '#:copy-variable-phase-level(car given-kws_91)) #f)))"
"(let-values(((copy-variable-phase-level12_94)(if copy-variable-phase-level17_93(car given-args_92)(void)))"
"((given-kws_95)(if copy-variable-phase-level17_93(cdr given-kws_91) given-kws_91))"
"((given-args_96)(if copy-variable-phase-level17_93(cdr given-args_92) given-args_92)))"
"(let-values(((run?15_97)(if(pair? given-kws_95)(eq? '#:run?(car given-kws_95)) #f)))"
"(let-values(((run?10_98)(if run?15_97(car given-args_96)(void)))"
"((given-kws_99)(if run?15_97(cdr given-kws_95) given-kws_95))"
"((given-args_100)(if run?15_97(cdr given-args_96) given-args_96)))"
"(let-values(((skip-variable-phase-level19_101)"
"(if(pair? given-kws_99)(eq? '#:skip-variable-phase-level(car given-kws_99)) #f)))"
"(let-values(((skip-variable-phase-level14_102)"
"(if skip-variable-phase-level19_101(car given-args_100)(void)))"
"((given-kws_103)(if skip-variable-phase-level19_101(cdr given-kws_99) given-kws_99))"
"((given-args_104)"
"(if skip-variable-phase-level19_101(cdr given-args_100) given-args_100)))"
"(let-values(((visit?16_105)(pair? given-kws_103)))"
"(let-values(((visit?11_106)(if visit?16_105(car given-args_104)(void))))"
"(do-namespace-require23.1"
" copy-variable-as-constant?13_90"
" copy-variable-as-constant?18_89"
" copy-variable-phase-level12_94"
" copy-variable-phase-level17_93"
" run?10_98"
" run?15_97"
" skip-variable-phase-level14_102"
" skip-variable-phase-level19_101"
" visit?11_106"
" visit?16_105"
" who20_86"
" req21_87"
" ns22_88)))))))))))))"
"(define-values"
"(do-namespace-require25.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_107 given-argc_108)"
"(if(= given-argc_108 5)"
"(let-values(((l1_109) given-kws_107))"
"(let-values(((l1_110)"
"(if(null? l1_109)"
" l1_109"
"(if(eq?(car l1_109) '#:copy-variable-as-constant?)(cdr l1_109) l1_109))))"
"(let-values(((l1_111) l1_110))"
"(let-values(((l1_112)"
"(if(null? l1_111)"
" l1_111"
"(if(eq?(car l1_111) '#:copy-variable-phase-level)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)(if(null? l1_113) l1_113(if(eq?(car l1_113) '#:run?)(cdr l1_113) l1_113))))"
"(let-values(((l1_115) l1_114))"
"(let-values(((l1_116)"
"(if(null? l1_115)"
" l1_115"
"(if(eq?(car l1_115) '#:skip-variable-phase-level)(cdr l1_115) l1_115))))"
"(let-values(((l1_117) l1_116))"
"(let-values(((l1_118)"
"(if(null? l1_117)"
" l1_117"
"(if(eq?(car l1_117) '#:visit?)(cdr l1_117) l1_117))))"
"(null? l1_118)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_119 given-args_120 who_121 req_122 ns_123)"
"(unpack24.1 given-kws_119 given-args_120 who_121 req_122 ns_123)))"
" null"
" '(#:copy-variable-as-constant? #:copy-variable-phase-level #:run? #:skip-variable-phase-level #:visit?)"
"(let-values(((do-namespace-require_124)"
"(case-lambda((who_125 req_126 ns_127)(unpack24.1 null null who_125 req_126 ns_127)))))"
" do-namespace-require_124)))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require29_128)"
"(lambda(req28_129 ns26_130 ns27_131)"
"(let-values(((req_132) req28_129))"
"(let-values(((ns_133)(if ns27_131 ns26_130(1/current-namespace))))"
"(let-values()"
"(let-values(((temp100_134) 'namespace-require)((req101_135) req_132)((ns102_136) ns_133))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require25.1))"
"(do-namespace-require23.1 #f #f #f #f #f #f #f #f #f #f temp100_134 req101_135 ns102_136)"
"(do-namespace-require25.1 temp100_134 req101_135 ns102_136)))))))))"
"(case-lambda"
"((req_137)(namespace-require29_128 req_137 #f #f))"
"((req_138 ns26_139)(namespace-require29_128 req_138 ns26_139 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time34_140)"
"(lambda(req33_141 ns31_142 ns32_143)"
"(let-values(((req_144) req33_141))"
"(let-values(((ns_145)(if ns32_143 ns31_142(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:145:2_146) do-namespace-require25.1)"
"((temp103_147) #f)"
"((temp104_148) #t)"
"((temp105_149) 'namespace-require/expansion-time)"
"((req106_150) req_144)"
"((ns107_151) ns_145))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require25.1))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" temp103_147"
" #t"
" #f"
" #f"
" temp104_148"
" #t"
" temp105_149"
" req106_150"
" ns107_151)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:145:2_146"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 5)"
" '(#:run? #:visit?)"
"(list temp103_147 temp104_148)"
" temp105_149"
" req106_150"
" ns107_151)))))))))"
"(case-lambda"
"((req_152)(namespace-require/expansion-time34_140 req_152 #f #f))"
"((req_153 ns31_154)(namespace-require/expansion-time34_140 req_153 ns31_154 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant39_155)"
"(lambda(req38_156 ns36_157 ns37_158)"
"(let-values(((req_159) req38_156))"
"(let-values(((ns_160)(if ns37_158 ns36_157(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:148:2_161) do-namespace-require25.1)"
"((temp108_162) 'namespace-require/constant)"
"((req109_163) req_159)"
"((ns110_164) ns_160)"
"((temp111_165) 0)"
"((temp112_166) #t))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require25.1))"
"(do-namespace-require23.1"
" temp112_166"
" #t"
" temp111_165"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp108_162"
" req109_163"
" ns110_164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:148:2_161"
" keyword-procedure-extract"
" '(#:copy-variable-as-constant? #:copy-variable-phase-level)"
" 5)"
" '(#:copy-variable-as-constant? #:copy-variable-phase-level)"
"(list temp112_166 temp111_165)"
" temp108_162"
" req109_163"
" ns110_164)))))))))"
"(case-lambda"
"((req_167)(namespace-require/constant39_155 req_167 #f #f))"
"((req_168 ns36_169)(namespace-require/constant39_155 req_168 ns36_169 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy44_170)"
"(lambda(req43_171 ns41_172 ns42_173)"
"(let-values(((req_174) req43_171))"
"(let-values(((ns_175)(if ns42_173 ns41_172(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:153:2_176) do-namespace-require25.1)"
"((temp113_177) 'namespace-require/copy)"
"((req114_178) req_174)"
"((ns115_179) ns_175)"
"((temp116_180) 0)"
"((temp117_181) 0))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require25.1))"
"(do-namespace-require23.1"
" #f"
" #f"
" temp116_180"
" #t"
" #f"
" #f"
" temp117_181"
" #t"
" #f"
" #f"
" temp113_177"
" req114_178"
" ns115_179)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:153:2_176"
" keyword-procedure-extract"
" '(#:copy-variable-phase-level #:skip-variable-phase-level)"
" 5)"
" '(#:copy-variable-phase-level #:skip-variable-phase-level)"
"(list temp116_180 temp117_181)"
" temp113_177"
" req114_178"
" ns115_179)))))))))"
"(case-lambda"
"((req_182)(namespace-require/copy44_170 req_182 #f #f))"
"((req_183 ns41_184)(namespace-require/copy44_170 req_183 ns41_184 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value53_185)"
"(lambda(sym52_186"
" use-mapping?46_187"
" failure-thunk47_188"
" ns48_189"
" use-mapping?49_190"
" failure-thunk50_191"
" ns51_192)"
"(let-values(((sym_193) sym52_186))"
"(let-values(((use-mapping?_194)(if use-mapping?49_190 use-mapping?46_187 #f)))"
"(let-values(((failure-thunk_195)(if failure-thunk50_191 failure-thunk47_188 #f)))"
"(let-values(((ns_196)(if ns51_192 ns48_189(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_193)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_193)))"
"(if(let-values(((or-part_197)(not failure-thunk_195)))"
"(if or-part_197"
" or-part_197"
"(if(procedure? failure-thunk_195)"
"(procedure-arity-includes? failure-thunk_195 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                   \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_195)))"
"(if(1/namespace? ns_196)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_196)))"
"((call/ec"
"(lambda(escape_198)"
"(let-values(((var-ns_199 var-phase-level_200 var-sym_201)"
"(if use-mapping?_194"
"(let-values()"
"(let-values(((id_203)(1/datum->syntax #f sym_193)))"
"(let-values(((b_204)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_203 ns_196)"
"(namespace-phase ns_196)"
" ns_196)))"
"(let-values((()"
"(begin"
"(if b_204"
"(let-values()"
"(namespace-visit-available-modules! ns_196))"
"(void))"
"(values))))"
"(let-values(((v_205 extra-inspector_206)"
"(if b_204"
"(let-values(((b118_207) b_204)"
"((empty-env119_208) empty-env)"
"((null120_209) null)"
"((ns121_210) ns_196)"
"((temp122_211)"
"(namespace-phase ns_196))"
"((id123_212) id_203))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" binding-lookup50.1))"
"(binding-lookup48.1"
" #f"
" #f"
" #f"
" #f"
" b118_207"
" empty-env119_208"
" null120_209"
" ns121_210"
" temp122_211"
" id123_212)"
"(binding-lookup50.1"
" b118_207"
" empty-env119_208"
" null120_209"
" ns121_210"
" temp122_211"
" id123_212)))"
"(values variable #f))))"
"(begin"
"(if(variable? v_205)"
"(void)"
"(let-values()"
"(escape_198"
"(let-values(((or-part_213) failure-thunk_195))"
"(if or-part_213"
" or-part_213"
"(lambda()"
"(raise"
"(make-exn:fail:syntax$1"
"(format"
"(string-append"
"                                                                             \"namespace-variable-value: bound to syntax\\n\""
"                                                                             \"  in: ~s\")"
" sym_193)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_204)"
"(values"
"(if(top-level-module-path-index?"
"(module-binding-module b_204))"
" ns_196"
"(let-values(((...er/namespace/api.rkt:197:25_214)"
" namespace->module-namespace82.1)"
"((ns124_215) ns_196)"
"((temp125_216)"
"(module-binding-module b_204))"
"((temp126_217)"
"(phase-"
"(namespace-phase ns_196)"
"(module-binding-phase b_204)))"
"((temp127_218) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp127_218"
" #t"
" #f"
" #f"
" ns124_215"
" temp125_216"
" temp126_217)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:197:25_214"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp127_218)"
" ns124_215"
" temp125_216"
" temp126_217))))"
"(module-binding-phase b_204)"
"(module-binding-sym b_204))"
"(values ns_196(namespace-phase ns_196) sym_193))))))))"
"(let-values()(values ns_196(namespace-phase ns_196) sym_193)))))"
"(let-values(((val_202)"
"(namespace-get-variable"
" var-ns_199"
" var-phase-level_200"
" var-sym_201"
"(lambda()"
"(escape_198"
"(let-values(((or-part_219) failure-thunk_195))"
"(if or-part_219"
" or-part_219"
"(raise"
"(exn:fail:contract:variable"
"(format"
"(string-append"
"                                                              \"namespace-variable-value: given name is not defined\\n\""
"                                                              \"  name: ~s\")"
" sym_193)"
"(current-continuation-marks)"
" sym_193)))))))))"
"(lambda() val_202)))))))))))))))"
"(case-lambda"
"((sym_220)(namespace-variable-value53_185 sym_220 #f #f #f #f #f #f))"
"((sym_221 use-mapping?_222 failure-thunk_223 ns48_224)"
"(namespace-variable-value53_185 sym_221 use-mapping?_222 failure-thunk_223 ns48_224 #t #t #t))"
"((sym_225 use-mapping?_226 failure-thunk47_227)"
"(namespace-variable-value53_185 sym_225 use-mapping?_226 failure-thunk47_227 #f #t #t #f))"
"((sym_228 use-mapping?46_229)(namespace-variable-value53_185 sym_228 use-mapping?46_229 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!63_230)"
"(lambda(sym61_231"
" val62_232"
" map?55_233"
" ns56_234"
" as-constant?57_235"
" map?58_236"
" ns59_237"
" as-constant?60_238)"
"(let-values(((sym_239) sym61_231))"
"(let-values(((val_240) val62_232))"
"(let-values(((map?_241)(if map?58_236 map?55_233 #f)))"
"(let-values(((ns_242)(if ns59_237 ns56_234(1/current-namespace))))"
"(let-values(((as-constant?_243)(if as-constant?60_238 as-constant?57_235 #f)))"
"(let-values()"
"(begin"
"(if(symbol? sym_239)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_239)))"
"(if(1/namespace? ns_242)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_242)))"
"(namespace-set-variable!"
" ns_242"
"(namespace-phase ns_242)"
" sym_239"
" val_240"
" as-constant?_243)"
"(if map?_241"
"(let-values()"
"(let-values((()"
"(begin"
"(namespace-unset-transformer!"
" ns_242"
"(namespace-phase ns_242)"
" sym_239)"
"(values))))"
"(let-values(((id_244)(1/datum->syntax #f sym_239)))"
"(let-values(((temp128_245)(1/namespace-syntax-introduce id_244 ns_242))"
"((temp129_246)"
"(let-values(((temp131_248)(namespace-mpi ns_242))"
"((temp132_249)(namespace-phase ns_242))"
"((sym133_250) sym_239))"
"(if(variable-reference-constant?"
"(#%variable-reference make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp131_248"
" temp132_249"
" sym133_250)"
"(make-module-binding24.1"
" temp131_248"
" temp132_249"
" sym133_250))))"
"((temp130_247)(namespace-phase ns_242)))"
"(if(variable-reference-constant?(#%variable-reference add-binding!19.1))"
"(add-binding!17.1 #f #f #f #f temp128_245 temp129_246 temp130_247)"
"(add-binding!19.1 temp128_245 temp129_246 temp130_247))))))"
"(void))))))))))))"
"(case-lambda"
"((sym_251 val_252)(namespace-set-variable-value!63_230 sym_251 val_252 #f #f #f #f #f #f))"
"((sym_253 val_254 map?_255 ns_256 as-constant?57_257)"
"(namespace-set-variable-value!63_230 sym_253 val_254 map?_255 ns_256 as-constant?57_257 #t #t #t))"
"((sym_258 val_259 map?_260 ns56_261)"
"(namespace-set-variable-value!63_230 sym_258 val_259 map?_260 ns56_261 #f #t #t #f))"
"((sym_262 val_263 map?55_264)(namespace-set-variable-value!63_230 sym_262 val_263 map?55_264 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!68_265)"
"(lambda(sym67_266 ns65_267 ns66_268)"
"(let-values(((sym_269) sym67_266))"
"(let-values(((ns_270)(if ns66_268 ns65_267(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_269)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_269)))"
"(if(1/namespace? ns_270)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_270)))"
"(namespace-unset-variable! ns_270(namespace-phase ns_270) sym_269))))))))"
"(case-lambda"
"((sym_271)(namespace-undefine-variable!68_265 sym_271 #f #f))"
"((sym_272 ns65_273)(namespace-undefine-variable!68_265 sym_272 ns65_273 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols72_274)"
"(lambda(ns70_275 ns71_276)"
"(let-values(((ns_277)(if ns71_276 ns70_275(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_277)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_277)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_277))"
"(namespace-phase ns_277))"
"(list->set(1/instance-variable-names(namespace->instance ns_277 0)))))))))))"
"(case-lambda"
"(()(namespace-mapped-symbols72_274 #f #f))"
"((ns70_278)(namespace-mapped-symbols72_274 ns70_278 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase76_279)"
"(lambda(ns74_280 ns75_281)"
"(let-values(((ns_282)(if ns75_281 ns74_280(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_282)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_282)))"
"(namespace-phase ns_282)))))))"
"(case-lambda(()(namespace-base-phase76_279 #f #f))((ns74_283)(namespace-base-phase76_279 ns74_283 #t)))))"
"(void)"
"(void)"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_1 self_2)"
"(let-values(((extract_3)"
"(lambda(ok?_4)"
"(let-values(((result-l_5)"
"(alt-reverse"
"(let-values(((ht_6) provides_1))"
"(begin"
"(if((lambda(ht_7)(hash? ht_7)) ht_6)"
"(void)"
"(let-values()(default-in-hash ht_6)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 i_10)"
"(if i_10"
"(let-values(((phase_11 at-phase_12)"
"(hash-iterate-key+value ht_6 i_10)))"
"(let-values(((fold-var_13)"
"(let-values(((l_14)"
"(alt-reverse"
"(let-values(((ht_15)"
" at-phase_12))"
"(begin"
"(if((lambda(ht_16)"
"(hash? ht_16))"
" ht_15)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18"
" i_19)"
"(if i_19"
"(let-values(((sym_20"
" b/p_21)"
"(hash-iterate-key+value"
" ht_15"
" i_19)))"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_18))"
"(if(ok?_4"
" b/p_21)"
"(let-values(((fold-var_24)"
" fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_26)"
"(provided-as-binding"
" b/p_21)))"
"(list"
" sym_20"
"(if(eq?"
" self_2"
"(module-binding-module"
" b_26))"
"(let-values()"
" null)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_27)"
"(cons"
" b_26"
"(module-binding-extra-nominal-bindings"
" b_26))))"
"(begin"
"(if(list?"
" lst_27)"
"(void)"
"(let-values()"
"(in-list"
" lst_27)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29"
" lst_30)"
"(if(pair?"
" lst_30)"
"(let-values(((b_31)"
"(unsafe-car"
" lst_30)))"
"(let-values(((fold-var_32)"
"(let-values(((fold-var_33)"
" fold-var_29))"
"(let-values(((fold-var_34)"
"(let-values()"
"(cons"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_31)"
" phase_11)"
"(eq?"
"(module-binding-nominal-sym"
" b_31)"
" sym_20)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_31))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_31)"
"(module-binding-phase"
" b_31)"
"(module-binding-nominal-sym"
" b_31)"
"(module-binding-nominal-phase"
" b_31)))))"
" fold-var_33))))"
"(values"
" fold-var_34)))))"
"(for-loop_28"
" fold-var_32"
"(unsafe-cdr"
" lst_30))))"
" fold-var_29))))"
" for-loop_28)"
" null"
" lst_27)))))))))"
" fold-var_24))))"
"(values"
" fold-var_25)))"
" fold-var_23))))"
"(for-loop_17"
" fold-var_22"
"(hash-iterate-next"
" ht_15"
" i_19))))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(hash-iterate-first"
" ht_15)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_35)"
"(lambda(fold-var_36)"
"(let-values()"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38)"
" fold-var_36))"
"(if(null?"
" l_14)"
" fold-var_38"
"(let-values(((fold-var_39)"
" fold-var_38))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_11"
"(let-values(((.../provide-for-api.rkt:35:20_41)"
" sort9.1)"
"((l4_42)"
" l_14)"
"((symbol<?5_43)"
" symbol<?)"
"((car6_44)"
" car))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" car6_44"
" #t"
" l4_42"
" symbol<?5_43)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:35:20_41"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list"
" car6_44)"
" l4_42"
" symbol<?5_43)))))"
" fold-var_39))))"
"(values"
" fold-var_40)))))))"
" fold-var_37)))))"
" for-loop_35)"
" fold-var_9)))))"
"(for-loop_8"
" fold-var_13"
"(hash-iterate-next ht_6 i_10))))"
" fold-var_9))))"
" for-loop_8)"
" null"
"(hash-iterate-first ht_6)))))))"
"(let-values(((.../provide-for-api.rkt:36:4_45) sort9.1)"
"((result-l1_46) result-l_5)"
"((phase<?2_47) phase<?)"
"((car3_48) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car3_48 #t result-l1_46 phase<?2_47)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:36:4_45"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car3_48)"
" result-l1_46"
" phase<?2_47)))))))"
"(values"
"(extract_3(lambda(b/p_49)(not(provided-as-transformer? b/p_49))))"
"(extract_3 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_50 all-vars_51)"
"(let-values(((result-l_52)"
"(alt-reverse"
"(let-values(((ht_53) all-vars_51))"
"(begin"
"(if((lambda(ht_54)(hash? ht_54)) ht_53)(void)(let-values()(default-in-hash ht_53)))"
"((letrec-values(((for-loop_55)"
"(lambda(fold-var_56 i_57)"
"(if i_57"
"(let-values(((phase_58 vars_59)(hash-iterate-key+value ht_53 i_57)))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_56))"
"(let-values(((l_62)"
"(let-values(((syms_63)"
"(hash-ref"
" provides_50"
" phase_58"
" '#hasheq())))"
"(alt-reverse"
"(let-values(((lst_64) vars_59))"
"(begin"
"(if(list? lst_64)"
"(void)"
"(let-values()(in-list lst_64)))"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66"
" lst_67)"
"(if(pair?"
" lst_67)"
"(let-values(((var-sym_68)"
"(unsafe-car"
" lst_67)))"
"(let-values(((fold-var_69)"
"(let-values(((fold-var_70)"
" fold-var_66))"
"(if(hash-ref"
" syms_63"
" var-sym_68"
" #f)"
" fold-var_70"
"(let-values(((fold-var_71)"
" fold-var_70))"
"(let-values(((fold-var_72)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_68)"
" fold-var_71))))"
"(values"
" fold-var_72)))))))"
"(for-loop_65"
" fold-var_69"
"(unsafe-cdr"
" lst_67))))"
" fold-var_66))))"
" for-loop_65)"
" null"
" lst_64)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_74)"
"(let-values()"
"(let-values(((fold-var_75)"
"(let-values(((fold-var_76)"
" fold-var_74))"
"(if(null?"
" l_62)"
" fold-var_76"
"(let-values(((fold-var_77)"
" fold-var_76))"
"(let-values(((fold-var_78)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_58"
"(let-values(((l10_79)"
" l_62)"
"((symbol<?11_80)"
" symbol<?))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_79"
" symbol<?11_80)"
"(sort9.1"
" l10_79"
" symbol<?11_80)))))"
" fold-var_77))))"
"(values"
" fold-var_78)))))))"
" fold-var_75)))))"
" for-loop_73)"
" fold-var_61))))))"
"(for-loop_55 fold-var_60(hash-iterate-next ht_53 i_57))))"
" fold-var_56))))"
" for-loop_55)"
" null"
"(hash-iterate-first ht_53)))))))"
"(let-values(((.../provide-for-api.rkt:53:2_81) sort9.1)"
"((result-l7_82) result-l_52)"
"((phase<?8_83) phase<?)"
"((car9_84) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car9_84 #t result-l7_82 phase<?8_83)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:53:2_81"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car9_84)"
" result-l7_82"
" phase<?8_83))))))"
"(void)"
"(void)"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(1/linklet-directory? c_1)))(if or-part_3 or-part_3(1/linklet-bundle? c_1)))))))"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_4)(if(compiled-in-memory? c_4)(compiled-in-memory-linklet-directory c_4) c_4)))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_5)"
"(let-values(((ld_6)(compiled->linklet-directory-or-bundle c_5)))"
"(let-values(((or-part_7)"
"(if(1/linklet-directory? ld_6)"
"(if(let-values(((b_8)(hash-ref(1/linklet-directory->hash ld_6) #f #f)))"
"(if b_8(hash-ref(1/linklet-bundle->hash b_8) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_7"
" or-part_7"
"(if(1/linklet-bundle? ld_6)(if(hash-ref(1/linklet-bundle->hash ld_6) 'decl #f) #t #f) #f))))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_9)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_9)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_9)))"
"(values))))"
"(let-values(((ld_10)(compiled->linklet-directory-or-bundle c_9)))"
"(let-values(((b_11)(if(1/linklet-bundle? ld_10) ld_10(hash-ref(1/linklet-directory->hash ld_10) #f))))"
"(hash-ref(1/linklet-bundle->hash b_11) 'name)))))"
"((c_12 name_13)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_12)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(symbol? name_13)))"
"(if or-part_15"
" or-part_15"
"(if(pair? name_13)(if(list? name_13)(andmap2 symbol? name_13) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_13)))"
"(values))))"
"(let-values(((prefix_14)(if(symbol? name_13) null(alt-reverse(cdr(alt-reverse name_13))))))"
"(change-module-name c_12 name_13 prefix_14)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_16 non-star?_17)"
"(begin"
"(if(1/compiled-module-expression? c_16)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_16)))"
"(if(compiled-in-memory? c_16)"
"(let-values()"
"(if non-star?_17"
"(compiled-in-memory-pre-compiled-in-memorys c_16)"
"(compiled-in-memory-post-compiled-in-memorys c_16)))"
"(let-values()"
"(if(1/linklet-directory? c_16)"
"(let-values()"
"(let-values(((ht_18)(1/linklet-directory->hash c_16)))"
"(let-values(((bh_19)(1/linklet-bundle->hash(hash-ref ht_18 #f))))"
"(let-values(((names_20)(hash-ref bh_19(if non-star?_17 'pre 'post) null)))"
"(alt-reverse"
"(let-values(((lst_21) names_20))"
"(begin"
"(if(list? lst_21)(void)(let-values()(in-list lst_21)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 lst_24)"
"(if(pair? lst_24)"
"(let-values(((name_25)(unsafe-car lst_24)))"
"(let-values(((fold-var_26)"
"(let-values(((fold-var_27) fold-var_23))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref ht_18 name_25))"
" fold-var_27))))"
"(values fold-var_28)))))"
"(for-loop_22 fold-var_26(unsafe-cdr lst_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
" lst_21))))))))"
"(let-values() null))))))"
"((c_29 non-star?_30 submods_31)"
"(begin"
"(if(1/compiled-module-expression? c_29)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_29)))"
"(if(if(list? submods_31)(andmap2 1/compiled-module-expression? submods_31) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_31)))"
"(if(if(null? submods_31)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_29)) #f)"
"(let-values() c_29)"
"(if(if(compiled-in-memory? c_29)(andmap2 compiled-in-memory? submods_31) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_32)"
"(if non-star?_30 submods_31(compiled-in-memory-pre-compiled-in-memorys c_29))))"
"(let-values(((post-compiled-in-memorys_33)"
"(if non-star?_30(compiled-in-memory-post-compiled-in-memorys c_29) submods_31)))"
"(let-values(((n-c_34)(normalize-to-linklet-directory c_29)))"
"(fixup-submodule-names"
"(let-values(((the-struct_35) n-c_34))"
"(if(compiled-in-memory? the-struct_35)"
"(let-values(((pre-compiled-in-memorys1_36) pre-compiled-in-memorys_32)"
"((post-compiled-in-memorys2_37) post-compiled-in-memorys_33)"
"((linklet-directory3_38)"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_34))"
" #f)"
" non-star?_30"
" submods_31)"
"(append pre-compiled-in-memorys_32 post-compiled-in-memorys_33))))"
"(compiled-in-memory1.1"
" linklet-directory3_38"
"(compiled-in-memory-phase-to-link-module-uses the-struct_35)"
"(compiled-in-memory-compile-time-inspector the-struct_35)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_35)"
"(compiled-in-memory-mpis the-struct_35)"
"(compiled-in-memory-syntax-literals the-struct_35)"
" pre-compiled-in-memorys1_36"
" post-compiled-in-memorys2_37"
"(compiled-in-memory-namespace-scopes the-struct_35)"
"(compiled-in-memory-purely-functional? the-struct_35)))"
"                       (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_35))))))))"
"(let-values()"
"(let-values(((n-c_39)(normalize-to-linklet-directory c_29)))"
"(fixup-submodule-names"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_39)) #f)"
" non-star?_30"
" submods_31)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_30 submods_31(1/module-compiled-submodules c_29 #t))"
"(if non-star?_30(1/module-compiled-submodules c_29 #f) submods_31)))))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_40)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_40)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_40)))"
"(values))))"
"(let-values(((h_41)(compiled-module->h c_40)))(hash-ref h_41 'language-info #f)))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_42)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_42)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_42)))"
"(values))))"
"(let-values(((inst_43)(compiled-module->declaration-instance c_42)))"
"(1/instance-variable-value inst_43 'requires)))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_44)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_44)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_44)))"
"(values))))"
"(let-values(((inst_45)(compiled-module->declaration-instance c_44)))"
"(provides->api-provides"
"(1/instance-variable-value inst_45 'provides)"
"(1/instance-variable-value inst_45 'self-mpi))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_46)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_46)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_46)))"
"(values))))"
"(let-values(((h_47 inst_48)(compiled-module->h+declaration-instance c_46)))"
"(let-values(((min-phase_49)(hash-ref h_47 'min-phase 0)))"
"(let-values(((max-phase_50)(hash-ref h_47 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_48 'provides)"
"(let-values(((start_51) min-phase_49)((end_52)(add1 max-phase_50))((inc_53) 1))"
"(begin"
"(if(if(real? start_51)(if(real? end_52)(real? inc_53) #f) #f)"
"(void)"
"(let-values()(in-range start_51 end_52 inc_53)))"
"((letrec-values(((for-loop_54)"
"(lambda(table_55 pos_56)"
"(if(< pos_56 end_52)"
"(let-values(((phase-level_57) pos_56))"
"(let-values(((table_58)"
"(let-values(((table_59) table_55))"
"(let-values(((table_60)"
"(let-values()"
"(let-values(((key_61 val_62)"
"(let-values()"
"(let-values(((linklet_63)"
"(hash-ref"
" h_47"
" phase-level_57"
" #f)))"
"(values"
" phase-level_57"
"(if linklet_63"
"(1/linklet-export-variables"
" linklet_63)"
" null))))))"
"(hash-set table_59 key_61 val_62)))))"
"(values table_60)))))"
"(for-loop_54 table_58(+ pos_56 inc_53))))"
" table_55))))"
" for-loop_54)"
" '#hash()"
" start_51))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_64)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_64)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                         \"compiled-module-expression?\""
" c_64)))"
"(values))))"
"(let-values(((h_65)(compiled-module->h c_64)))(hash-ref h_65 'cross-phase-persistent? #f)))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_66)"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_66))"
"(let-values() c_66)"
"(if(1/linklet-bundle? c_66)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_66)))"
"(let-values()"
"(let-values(((the-struct_67) c_66))"
"(if(compiled-in-memory? the-struct_67)"
"(let-values(((linklet-directory4_68)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_66))))"
"(compiled-in-memory1.1"
" linklet-directory4_68"
"(compiled-in-memory-phase-to-link-module-uses the-struct_67)"
"(compiled-in-memory-compile-time-inspector the-struct_67)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_67)"
"(compiled-in-memory-mpis the-struct_67)"
"(compiled-in-memory-syntax-literals the-struct_67)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_67)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_67)"
"(compiled-in-memory-namespace-scopes the-struct_67)"
"(compiled-in-memory-purely-functional? the-struct_67)))"
"              (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_67))))))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_69)(let-values(((n_70)(1/module-compiled-name c_69)))(if(pair? n_70)(car(alt-reverse n_70)) n_70))))"
"(define-values"
"(change-module-name)"
"(lambda(c_71 name_72 prefix_73)"
"(let-values(((full-name_74)(if(null? prefix_73) name_72(append prefix_73(list name_72)))))"
"(let-values(((next-prefix_75)(if(null? prefix_73)(list name_72) full-name_74)))"
"(let-values(((recur_76)"
"(lambda(sub-c_77 name_78)"
"(if(equal?(1/module-compiled-name sub-c_77)(append next-prefix_75(list name_78)))"
" sub-c_77"
"(change-module-name sub-c_77 name_78 next-prefix_75)))))"
"(if(compiled-in-memory? c_71)"
"(let-values()"
"(let-values(((change-submodule-name_79)"
"(lambda(sub-c_82)(recur_76 sub-c_82(module-compiled-immediate-name sub-c_82)))))"
"(let-values(((pre-compiled-in-memorys_80)"
"(map2 change-submodule-name_79(compiled-in-memory-pre-compiled-in-memorys c_71))))"
"(let-values(((post-compiled-in-memorys_81)"
"(map2 change-submodule-name_79(compiled-in-memory-post-compiled-in-memorys c_71))))"
"(let-values(((the-struct_83) c_71))"
"(if(compiled-in-memory? the-struct_83)"
"(let-values(((pre-compiled-in-memorys5_84) pre-compiled-in-memorys_80)"
"((post-compiled-in-memorys6_85) post-compiled-in-memorys_81)"
"((linklet-directory7_86)"
"(rebuild-linklet-directory"
"(update-one-name"
"(hash-ref"
"(1/linklet-directory->hash(compiled->linklet-directory-or-bundle c_71))"
" #f)"
" full-name_74)"
"(append pre-compiled-in-memorys_80 post-compiled-in-memorys_81))))"
"(compiled-in-memory1.1"
" linklet-directory7_86"
"(compiled-in-memory-phase-to-link-module-uses the-struct_83)"
"(compiled-in-memory-compile-time-inspector the-struct_83)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_83)"
"(compiled-in-memory-mpis the-struct_83)"
"(compiled-in-memory-syntax-literals the-struct_83)"
" pre-compiled-in-memorys5_84"
" post-compiled-in-memorys6_85"
"(compiled-in-memory-namespace-scopes the-struct_83)"
"(compiled-in-memory-purely-functional? the-struct_83)))"
"                        (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_83)))))))"
"(if(1/linklet-directory? c_71)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_87)(1/linklet-directory->hash c_71)))"
"(begin"
"(if((lambda(ht_88)(hash? ht_88)) ht_87)(void)(let-values()(default-in-hash ht_87)))"
"((letrec-values(((for-loop_89)"
"(lambda(table_90 i_91)"
"(if i_91"
"(let-values(((key_92 val_93)(hash-iterate-key+value ht_87 i_91)))"
"(let-values(((table_94)"
"(let-values(((table_95) table_90))"
"(let-values(((table_96)"
"(let-values()"
"(let-values(((key_97 val_98)"
"(let-values()"
"(values"
" key_92"
"(if(not key_92)"
"(update-one-name"
" val_93"
" full-name_74)"
"(recur_76"
" val_93"
" key_92))))))"
"(hash-set table_95 key_97 val_98)))))"
"(values table_96)))))"
"(for-loop_89 table_94(hash-iterate-next ht_87 i_91))))"
" table_90))))"
" for-loop_89)"
" '#hasheq()"
"(hash-iterate-first ht_87))))))"
"(let-values()(update-one-name c_71 full-name_74)))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_99 name_100)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_99) 'name name_100))))"
"(define-values(fixup-submodule-names)(lambda(c_101)(1/module-compiled-name c_101(1/module-compiled-name c_101))))"
"(define-values"
"(rebuild-linklet-directory)"
"(lambda(main_102 submods_103)"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_104) submods_103))"
"(begin"
"(if(list? lst_104)(void)(let-values()(in-list lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(ht_106 lst_107)"
"(if(pair? lst_107)"
"(let-values(((submod_108)(unsafe-car lst_107)))"
"(let-values(((ht_109)"
"(let-values(((ht_110) ht_106))"
"(let-values(((ht_111)"
"(let-values()"
"(let-values(((name_112)"
"(module-compiled-immediate-name"
" submod_108)))"
"(if(hash-ref ht_110 name_112 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                         \"change would result in duplicate submodule name\""
"                                                                         \"name\""
" name_112))"
"(let-values()"
"(hash-set ht_110 name_112 submod_108)))))))"
"(values ht_111)))))"
"(for-loop_105 ht_109(unsafe-cdr lst_107))))"
" ht_106))))"
" for-loop_105)"
" '#hasheq()"
" lst_104)))"
" #f"
" main_102))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_113 pre?_114 submods_115)"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_113)"
"(if pre?_114 'pre 'post)"
"(map2 module-compiled-immediate-name submods_115)))))"
"(void)"
"(void)"
"(define-values"
"(1/eval)"
"(let-values(((eval6_6)"
"(lambda(s5_7 ns1_8 compile2_9 ns3_10 compile4_11)"
"(let-values(((s_12) s5_7))"
"(let-values(((ns_13)(if ns3_10 ns1_8(1/current-namespace))))"
"(let-values(((compile_14)"
"(if compile4_11 compile2_9(lambda(s_15 ns_16)(1/compile s_15 ns_16 #f)))))"
"(let-values()"
"(if(let-values(((or-part_17)(compiled-in-memory? s_12)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(1/linklet-directory? s_12)))"
"(if or-part_18 or-part_18(1/linklet-bundle? s_12)))))"
"(let-values()"
"(let-values(((s61_19) s_12)((ns62_20) ns_13))"
"(if(variable-reference-constant?(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 #f #f s61_19 ns62_20)"
"(eval-compiled14.1 s61_19 ns62_20))))"
"(if(if(syntax?$1 s_12)"
"(let-values(((or-part_21)(compiled-in-memory?(1/syntax-e s_12))))"
"(if or-part_21"
" or-part_21"
"(let-values(((or-part_22)(1/linklet-directory?(1/syntax-e s_12))))"
"(if or-part_22 or-part_22(1/linklet-bundle?(1/syntax-e s_12))))))"
" #f)"
"(let-values()"
"(let-values(((temp63_23)(1/syntax->datum s_12))((ns64_24) ns_13))"
"(if(variable-reference-constant?(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 #f #f temp63_23 ns64_24)"
"(eval-compiled14.1 temp63_23 ns64_24))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:55:4_25) per-top-level60.1)"
"((s65_26) s_12)"
"((ns66_27) ns_13)"
"((temp67_28)"
"(lambda(s_29 ns_30 tail?_31)"
"(let-values(((...pander/eval/main.rkt:57:30_32) eval-compiled14.1)"
"((temp68_33)(compile_14 s_29 ns_30))"
"((ns69_34) ns_30)"
"((tail?70_35) tail?_31))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-compiled14.1))"
"(eval-compiled12.1 tail?70_35 #t temp68_33 ns69_34)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:57:30_32"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 4)"
" '(#:as-tail?)"
"(list tail?70_35)"
" temp68_33"
" ns69_34))))))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1 #f #f #f #f temp67_28 #f #f s65_26 ns66_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:55:4_25"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp67_28)"
" s65_26"
" ns66_27)))))))))))))"
"(case-lambda"
"((s_36)(eval6_6 s_36 #f #f #f #f))"
"((s_37 ns_38 compile2_39)(eval6_6 s_37 ns_38 compile2_39 #t #t))"
"((s_40 ns1_41)(eval6_6 s_40 ns1_41 #f #t #f)))))"
"(define-values"
"(eval-compiled12.1)"
"(lambda(as-tail?8_42 as-tail?9_43 c10_44 ns11_45)"
"(let-values(((c_46) c10_44))"
"(let-values(((ns_47) ns11_45))"
"(let-values(((as-tail?_48)(if as-tail?9_43 as-tail?8_42 #t)))"
"(let-values()"
"(if(1/compiled-module-expression? c_46)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:62:4_49) eval-module10.1)((c71_50) c_46)((ns72_51) ns_47))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 ns72_51 #t #f #f #f #f c71_50)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:62:4_49"
" keyword-procedure-extract"
" '(#:namespace)"
" 3)"
" '(#:namespace)"
"(list ns72_51)"
" c71_50))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:64:4_52) eval-top9.1)"
"((c73_53) c_46)"
"((ns74_54) ns_47)"
"((eval-compiled75_55) eval-compiled14.1)"
"((as-tail?76_56) as-tail?_48))"
"(if(variable-reference-constant?(#%variable-reference eval-top9.1))"
"(eval-top7.1 as-tail?76_56 #t c73_53 ns74_54 eval-compiled75_55 #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:64:4_52"
" keyword-procedure-extract"
" '(#:as-tail?)"
" 5)"
" '(#:as-tail?)"
"(list as-tail?76_56)"
" c73_53"
" ns74_54"
" eval-compiled75_55)))))))))))"
"(define-values"
"(unpack13.1)"
"(lambda(given-kws_57 given-args_58 c10_59 ns11_60)"
"(let-values(((as-tail?9_61)(pair? given-kws_57)))"
"(let-values(((as-tail?8_62)(if as-tail?9_61(car given-args_58)(void))))"
"(eval-compiled12.1 as-tail?8_62 as-tail?9_61 c10_59 ns11_60)))))"
"(define-values"
"(eval-compiled14.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_63 given-argc_64)"
"(if(= given-argc_64 4)"
"(let-values(((l1_65) given-kws_63))"
"(let-values(((l1_66)(if(null? l1_65) l1_65(if(eq?(car l1_65) '#:as-tail?)(cdr l1_65) l1_65))))"
"(null? l1_66)))"
" #f))"
"(case-lambda((given-kws_67 given-args_68 c_69 ns_70)(unpack13.1 given-kws_67 given-args_68 c_69 ns_70)))"
" null"
" '(#:as-tail?)"
"(let-values(((eval-compiled_71)(case-lambda((c_72 ns_73)(unpack13.1 null null c_72 ns_73))))) eval-compiled_71)))"
"(define-values"
"(1/compile)"
"(let-values(((compile24_74)"
"(lambda(s23_75"
" ns15_76"
" serializable?16_77"
" expand17_78"
" to-source?18_79"
" ns19_80"
" serializable?20_81"
" expand21_82"
" to-source?22_83)"
"(let-values(((s_84) s23_75))"
"(let-values(((ns_85)(if ns19_80 ns15_76(1/current-namespace))))"
"(let-values(((serializable?_86)(if serializable?20_81 serializable?16_77 #t)))"
"(let-values(((expand_87)(if expand21_82 expand17_78 expand$1)))"
"(let-values(((to-source?_88)(if to-source?22_83 to-source?18_79 #f)))"
"(let-values()"
"(let-values(((cs_89)"
"(if(1/compiled-expression? s_84)"
"(let-values()(list s_84))"
"(if(if(syntax?$1 s_84)(1/compiled-expression?(1/syntax-e s_84)) #f)"
"(let-values()(list(1/syntax-e s_84)))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:82:6_90) per-top-level60.1)"
"((s77_91) s_84)"
"((ns78_92) ns_85)"
"((temp79_93)"
"(lambda(s_95 ns_96 as-tail?_97)"
"(list"
"(compile-single$1"
" s_95"
" ns_96"
" expand_87"
" serializable?_86"
" to-source?_88))))"
"((append80_94) append))"
"(if(variable-reference-constant?"
"(#%variable-reference per-top-level60.1))"
"(per-top-level58.1"
" append80_94"
" #t"
" #f"
" #f"
" temp79_93"
" #f"
" #f"
" s77_91"
" ns78_92)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:82:6_90"
" keyword-procedure-extract"
" '(#:combine #:single)"
" 4)"
" '(#:combine #:single)"
"(list append80_94 temp79_93)"
" s77_91"
" ns78_92))))))))"
"(if(if(= 1(length cs_89))(not(compiled-multiple-top?(car cs_89))) #f)"
"(car cs_89)"
"(let-values(((...pander/eval/main.rkt:91:6_98) compiled-tops->compiled-top10.1)"
"((cs81_99) cs_89)"
"((to-source?82_100) to-source?_88)"
"((serializable?83_101) serializable?_86)"
"((ns84_102) ns_85))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top10.1))"
"(compiled-tops->compiled-top8.1"
" serializable?83_101"
" #t"
" ns84_102"
" #t"
" to-source?82_100"
" #t"
" cs81_99)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:91:6_98"
" keyword-procedure-extract"
" '(#:merge-serialization? #:namespace #:to-source?)"
" 3)"
" '(#:merge-serialization? #:namespace #:to-source?)"
"(list serializable?83_101 ns84_102 to-source?82_100)"
" cs81_99))))))))))))))"
"(case-lambda"
"((s_103)(compile24_74 s_103 #f #f #f #f #f #f #f #f))"
"((s_104 ns_105 serializable?_106 expand_107 to-source?18_108)"
"(compile24_74 s_104 ns_105 serializable?_106 expand_107 to-source?18_108 #t #t #t #t))"
"((s_109 ns_110 serializable?_111 expand17_112)"
"(compile24_74 s_109 ns_110 serializable?_111 expand17_112 #f #t #t #t #f))"
"((s_113 ns_114 serializable?16_115)(compile24_74 s_113 ns_114 serializable?16_115 #f #f #t #t #f #f))"
"((s_116 ns15_117)(compile24_74 s_116 ns15_117 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets29_118)"
"(lambda(s28_119 ns26_120 ns27_121)"
"(let-values(((s_122) s28_119))"
"(let-values(((ns_123)(if ns27_121 ns26_120(1/current-namespace))))"
"(let-values()(1/compile s_122 ns_123 #t expand$1 #t)))))))"
"(case-lambda"
"((s_124)(compile-to-linklets29_118 s_124 #f #f))"
"((s_125 ns26_126)(compile-to-linklets29_118 s_125 ns26_126 #t)))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_127 ns_128 expand_129 serializable?_130 to-source?_131)"
"(let-values(((exp-s_132)(expand_129 s_127 ns_128)))"
"((letrec-values(((loop_133)"
"(lambda(exp-s_134)"
"(let-values(((disarmed-exp-s_135)(syntax-disarm$1 exp-s_134)))"
"(let-values(((tmp_136)(core-form-sym disarmed-exp-s_135(namespace-phase ns_128))))"
"(if(equal? tmp_136 'module)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:109:7_137) compile-module17.1)"
"((exp-s85_138) exp-s_134)"
"((temp86_139)"
"(let-values(((...pander/eval/main.rkt:109:29_142)"
" make-compile-context18.1)"
"((ns89_143) ns_128)"
"((temp90_144)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx ns_128))))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context18.1))"
"(make-compile-context16.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns89_143"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp90_144"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:109:29_142"
" keyword-procedure-extract"
" '(#:namespace #:top-level-bind-scope)"
" 2)"
" '(#:namespace #:top-level-bind-scope)"
"(list ns89_143 temp90_144)))))"
"((serializable?87_140) serializable?_130)"
"((to-source?88_141) to-source?_131))"
"(if(variable-reference-constant?(#%variable-reference compile-module17.1))"
"(compile-module15.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" serializable?87_140"
" #t"
" to-source?88_141"
" #t"
" #f"
" #f"
" exp-s85_138"
" temp86_139)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:109:7_137"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?87_140 to-source?88_141)"
" exp-s85_138"
" temp86_139))))"
"(if(equal? tmp_136 'begin)"
"(let-values()"
"(let-values(((ok?_145 begin91_146 e92_147)"
"(let-values(((s_158) disarmed-exp-s_135))"
"(let-values(((orig-s_159) s_158))"
"(let-values(((begin91_160 e92_161)"
"(let-values(((s_162)"
"(if(syntax?$1 s_158)"
"(syntax-e$1 s_158)"
" s_158)))"
"(if(pair? s_162)"
"(let-values(((begin93_163)"
"(let-values(((s_165)"
"(car s_162)))"
" s_165))"
"((e94_164)"
"(let-values(((s_166)"
"(cdr s_162)))"
"(let-values(((s_167)"
"(if(syntax?$1"
" s_166)"
"(syntax-e$1"
" s_166)"
" s_166)))"
"(let-values(((flat-s_168)"
"(to-syntax-list.1"
" s_167)))"
"(if(not flat-s_168)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_159))"
"(let-values()"
" flat-s_168)))))))"
"(values begin93_163 e94_164))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_159)))))"
"(values #t begin91_160 e92_161))))))"
"(let-values(((...pander/eval/main.rkt:117:7_169) compiled-tops->compiled-top10.1)"
"((temp95_170)"
"(alt-reverse"
"(let-values(((lst_172) e92_147))"
"(begin"
"(if(list? lst_172)(void)(let-values()(in-list lst_172)))"
"((letrec-values(((for-loop_173)"
"(lambda(fold-var_174 lst_175)"
"(if(pair? lst_175)"
"(let-values(((e_176)"
"(unsafe-car lst_175)))"
"(let-values(((fold-var_177)"
"(let-values(((fold-var_178)"
" fold-var_174))"
"(let-values(((fold-var_179)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_133"
" e_176))"
" fold-var_178))))"
"(values"
" fold-var_179)))))"
"(for-loop_173"
" fold-var_177"
"(unsafe-cdr lst_175))))"
" fold-var_174))))"
" for-loop_173)"
" null"
" lst_172)))))"
"((to-source?96_171) to-source?_131))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top10.1))"
"(compiled-tops->compiled-top8.1 #f #f #f #f to-source?96_171 #t temp95_170)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:117:7_169"
" keyword-procedure-extract"
" '(#:to-source?)"
" 3)"
" '(#:to-source?)"
"(list to-source?96_171)"
" temp95_170)))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:122:7_180) compile-top11.1)"
"((exp-s97_181) exp-s_134)"
"((temp98_182)"
"(let-values(((...pander/eval/main.rkt:122:26_185)"
" make-compile-context18.1)"
"((ns101_186) ns_128)"
"((temp102_187)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx ns_128))))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context18.1))"
"(make-compile-context16.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns101_186"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp102_187"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:122:26_185"
" keyword-procedure-extract"
" '(#:namespace #:top-level-bind-scope)"
" 2)"
" '(#:namespace #:top-level-bind-scope)"
"(list ns101_186 temp102_187)))))"
"((serializable?99_183) serializable?_130)"
"((to-source?100_184) to-source?_131))"
"(if(variable-reference-constant?(#%variable-reference compile-top11.1))"
"(compile-top9.1"
" serializable?99_183"
" #t"
" #f"
" #f"
" to-source?100_184"
" #t"
" exp-s97_181"
" temp98_182)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:122:7_180"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?99_183 to-source?100_184)"
" exp-s97_181"
" temp98_182)))))))))))"
" loop_133)"
" exp-s_132))))"
"(define-values"
"(expand$1)"
"(let-values(((expand36_188)"
"(lambda(s35_189 ns31_190 log-expand?32_191 ns33_192 log-expand?34_193)"
"(let-values(((s_194) s35_189))"
"(let-values(((ns_195)(if ns33_192 ns31_190(1/current-namespace))))"
"(let-values(((log-expand?_196)(if log-expand?34_193 log-expand?32_191 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_196(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:134:2_197) per-top-level60.1)"
"((s103_198) s_194)"
"((ns104_199) ns_195)"
"((temp105_200)"
"(lambda(s_203 ns_204 as-tail?_205)(expand-single s_203 ns_204)))"
"((cons106_201) cons)"
"((re-pair107_202) re-pair))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1"
" cons106_201"
" #t"
" #f"
" #f"
" temp105_200"
" re-pair107_202"
" #t"
" s103_198"
" ns104_199)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:134:2_197"
" keyword-procedure-extract"
" '(#:combine #:single #:wrap)"
" 4)"
" '(#:combine #:single #:wrap)"
"(list cons106_201 temp105_200 re-pair107_202)"
" s103_198"
" ns104_199)))))))))))"
"(case-lambda"
"((s_206)(expand36_188 s_206 #f #f #f #f))"
"((s_207 ns_208 log-expand?32_209)(expand36_188 s_207 ns_208 log-expand?32_209 #t #t))"
"((s_210 ns31_211)(expand36_188 s_210 ns31_211 #f #t #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_212 ns_213)"
"(let-values(((require-lifts_214 lifts_215 exp-s_216)(expand-capturing-lifts s_212(make-expand-context ns_213))))"
"(if(if(null? require-lifts_214)(null? lifts_215) #f)"
"(let-values() exp-s_216)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:145:4_217) wrap-lifts-as-begin17.1)"
"((temp108_218)(append require-lifts_214 lifts_215))"
"((temp109_219)(lambda(form_223)(expand-single form_223 ns_213)))"
"((exp-s110_220) exp-s_216)"
"((s111_221) s_212)"
"((temp112_222)(namespace-phase ns_213)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 temp109_219 #t temp108_218 exp-s110_220 s111_221 temp112_222)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:145:4_217"
" keyword-procedure-extract"
" '(#:adjust-form)"
" 6)"
" '(#:adjust-form)"
"(list temp109_219)"
" temp108_218"
" exp-s110_220"
" s111_221"
" temp112_222))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once41_224)"
"(lambda(s40_225 ns38_226 ns39_227)"
"(let-values(((s_228) s40_225))"
"(let-values(((ns_229)(if ns39_227 ns38_226(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:151:2_230) per-top-level60.1)"
"((s113_231) s_228)"
"((ns114_232) ns_229)"
"((temp115_233)"
"(lambda(s_237 ns_238 as-tail?_239)(expand-single-once s_237 ns_238)))"
"((cons116_234) cons)"
"((re-pair117_235) re-pair)"
"((temp118_236) #t))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1"
" cons116_234"
" #t"
" temp118_236"
" #t"
" temp115_233"
" re-pair117_235"
" #t"
" s113_231"
" ns114_232)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:151:2_230"
" keyword-procedure-extract"
" '(#:combine #:just-once? #:single #:wrap)"
" 4)"
" '(#:combine #:just-once? #:single #:wrap)"
"(list cons116_234 temp118_236 temp115_233 re-pair117_235)"
" s113_231"
" ns114_232)))))))))"
"(case-lambda((s_240)(expand-once41_224 s_240 #f #f))((s_241 ns38_242)(expand-once41_224 s_241 ns38_242 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_243 ns_244)"
"(let-values(((require-lifts_245 lifts_246 exp-s_247)"
"(expand-capturing-lifts"
" s_243"
"(let-values(((the-struct_248)(make-expand-context ns_244)))"
"(if(expand-context? the-struct_248)"
"(let-values(((just-once?119_249) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_248)"
"(root-expand-context-post-expansion-scope the-struct_248)"
"(root-expand-context-top-level-bind-scope the-struct_248)"
"(root-expand-context-all-scopes-stx the-struct_248)"
"(root-expand-context-use-site-scopes the-struct_248)"
"(root-expand-context-defined-syms the-struct_248)"
"(root-expand-context-frame-id the-struct_248)"
"(root-expand-context-counter the-struct_248)"
"(root-expand-context-lift-key the-struct_248)"
"(expand-context-context the-struct_248)"
"(expand-context-phase the-struct_248)"
"(expand-context-namespace the-struct_248)"
"(expand-context-env the-struct_248)"
"(expand-context-user-env the-struct_248)"
"(expand-context-post-expansion-scope-action the-struct_248)"
"(expand-context-scopes the-struct_248)"
"(expand-context-def-ctx-scopes the-struct_248)"
"(expand-context-binding-layer the-struct_248)"
"(expand-context-reference-records the-struct_248)"
"(expand-context-only-immediate? the-struct_248)"
" just-once?119_249"
"(expand-context-module-begin-k the-struct_248)"
"(expand-context-need-eventually-defined the-struct_248)"
"(expand-context-allow-unbound? the-struct_248)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_248)"
"(expand-context-stops the-struct_248)"
"(expand-context-current-introduction-scopes the-struct_248)"
"(expand-context-declared-submodule-names the-struct_248)"
"(expand-context-lifts the-struct_248)"
"(expand-context-lift-envs the-struct_248)"
"(expand-context-module-lifts the-struct_248)"
"(expand-context-require-lifts the-struct_248)"
"(expand-context-to-module-lifts the-struct_248)"
"(expand-context-requires+provides the-struct_248)"
"(expand-context-name the-struct_248)"
"(expand-context-observer the-struct_248)))"
"                       (raise-argument-error 'struct-copy \"expand-context?\" the-struct_248))))))"
"(if(if(null? require-lifts_245)(null? lifts_246) #f)"
"(let-values() exp-s_247)"
"(let-values()"
"(let-values(((temp120_250)(append require-lifts_245 lifts_246))"
"((exp-s121_251) exp-s_247)"
"((s122_252) s_243)"
"((temp123_253)(namespace-phase ns_244)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 #f #f temp120_250 exp-s121_251 s122_252 temp123_253)"
"(wrap-lifts-as-begin17.1 temp120_250 exp-s121_251 s122_252 temp123_253))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form46_254)"
"(lambda(s45_255 ns43_256 ns44_257)"
"(let-values(((s_258) s45_255))"
"(let-values(((ns_259)(if ns44_257 ns43_256(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:171:2_260) per-top-level60.1)"
"((s124_261) s_258)"
"((ns125_262) ns_259)"
"((temp126_263) #f))"
"(if(variable-reference-constant?(#%variable-reference per-top-level60.1))"
"(per-top-level58.1 #f #f #f #f temp126_263 #f #f s124_261 ns125_262)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:171:2_260"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp126_263)"
" s124_261"
" ns125_262)))))))))"
"(case-lambda"
"((s_264)(expand-to-top-form46_254 s_264 #f #f))"
"((s_265 ns43_266)(expand-to-top-form46_254 s_265 ns43_266 #t)))))"
"(define-values"
"(lifted/1.1$6 lifted/2.1$6 lifted/3.1$5 lifted/4.1$5 lifted/5.1$5)"
"(make-struct-type"
" 'per-top-level"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'per-top-level"
"(case-lambda((self_267 given-s_268 ns_269)(apply missing-kw self_267 given-s_268 ns_269 null))))))"
"(current-inspector)"
"(case-lambda((self_270 given-s_271 ns_272)(apply missing-kw self_270 given-s_271 ns_272 null)))))"
"(define-values"
"(per-top-level58.1)"
"(lambda(combine49_273"
" combine53_274"
" just-once?51_275"
" just-once?55_276"
" single48_277"
" wrap50_278"
" wrap54_279"
" given-s56_280"
" ns57_281)"
"(let-values(((given-s_282) given-s56_280))"
"(let-values(((ns_283) ns57_281))"
"(let-values(((single_284) single48_277))"
"(let-values(((combine_285)(if combine53_274 combine49_273 #f)))"
"(let-values(((wrap_286)(if wrap54_279 wrap50_278 #f)))"
"(let-values(((just-once?_287)(if just-once?55_276 just-once?51_275 #f)))"
"(let-values()"
"(let-values(((s_288)(maybe-intro given-s_282 ns_283)))"
"(let-values(((ctx_289)(make-expand-context ns_283)))"
"(let-values(((phase_290)(namespace-phase ns_283)))"
"((letrec-values(((loop_291)"
"(lambda(s_292 phase_293 ns_294 as-tail?_295)"
"(let-values(((tl-ctx_296)"
"(let-values(((the-struct_301) ctx_289))"
"(if(expand-context? the-struct_301)"
"(let-values(((phase127_302) phase_293)"
"((namespace128_303) ns_294)"
"((just-once?129_304) just-once?_287))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_301)"
"(root-expand-context-post-expansion-scope"
" the-struct_301)"
"(root-expand-context-top-level-bind-scope"
" the-struct_301)"
"(root-expand-context-all-scopes-stx the-struct_301)"
"(root-expand-context-use-site-scopes the-struct_301)"
"(root-expand-context-defined-syms the-struct_301)"
"(root-expand-context-frame-id the-struct_301)"
"(root-expand-context-counter the-struct_301)"
"(root-expand-context-lift-key the-struct_301)"
"(expand-context-context the-struct_301)"
" phase127_302"
" namespace128_303"
"(expand-context-env the-struct_301)"
"(expand-context-user-env the-struct_301)"
"(expand-context-post-expansion-scope-action"
" the-struct_301)"
"(expand-context-scopes the-struct_301)"
"(expand-context-def-ctx-scopes the-struct_301)"
"(expand-context-binding-layer the-struct_301)"
"(expand-context-reference-records the-struct_301)"
"(expand-context-only-immediate? the-struct_301)"
" just-once?129_304"
"(expand-context-module-begin-k the-struct_301)"
"(expand-context-need-eventually-defined the-struct_301)"
"(expand-context-allow-unbound? the-struct_301)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_301)"
"(expand-context-stops the-struct_301)"
"(expand-context-current-introduction-scopes"
" the-struct_301)"
"(expand-context-declared-submodule-names"
" the-struct_301)"
"(expand-context-lifts the-struct_301)"
"(expand-context-lift-envs the-struct_301)"
"(expand-context-module-lifts the-struct_301)"
"(expand-context-require-lifts the-struct_301)"
"(expand-context-to-module-lifts the-struct_301)"
"(expand-context-requires+provides the-struct_301)"
"(expand-context-name the-struct_301)"
"(expand-context-observer the-struct_301)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"expand-context?\""
" the-struct_301)))))"
"(let-values(((require-lifts_297 lifts_298 exp-s_299)"
"(expand-capturing-lifts"
" s_292"
"(let-values(((the-struct_305) tl-ctx_296))"
"(if(expand-context? the-struct_305)"
"(let-values(((only-immediate?130_306) #t)"
"((def-ctx-scopes131_307)(box null))"
"((phase132_308) phase_293)"
"((namespace133_309) ns_294))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_305)"
"(root-expand-context-post-expansion-scope"
" the-struct_305)"
"(root-expand-context-top-level-bind-scope"
" the-struct_305)"
"(root-expand-context-all-scopes-stx the-struct_305)"
"(root-expand-context-use-site-scopes the-struct_305)"
"(root-expand-context-defined-syms the-struct_305)"
"(root-expand-context-frame-id the-struct_305)"
"(root-expand-context-counter the-struct_305)"
"(root-expand-context-lift-key the-struct_305)"
"(expand-context-context the-struct_305)"
" phase132_308"
" namespace133_309"
"(expand-context-env the-struct_305)"
"(expand-context-user-env the-struct_305)"
"(expand-context-post-expansion-scope-action"
" the-struct_305)"
"(expand-context-scopes the-struct_305)"
" def-ctx-scopes131_307"
"(expand-context-binding-layer the-struct_305)"
"(expand-context-reference-records the-struct_305)"
" only-immediate?130_306"
"(expand-context-just-once? the-struct_305)"
"(expand-context-module-begin-k the-struct_305)"
"(expand-context-need-eventually-defined"
" the-struct_305)"
"(expand-context-allow-unbound? the-struct_305)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_305)"
"(expand-context-stops the-struct_305)"
"(expand-context-current-introduction-scopes"
" the-struct_305)"
"(expand-context-declared-submodule-names"
" the-struct_305)"
"(expand-context-lifts the-struct_305)"
"(expand-context-lift-envs the-struct_305)"
"(expand-context-module-lifts the-struct_305)"
"(expand-context-require-lifts the-struct_305)"
"(expand-context-to-module-lifts the-struct_305)"
"(expand-context-requires+provides the-struct_305)"
"(expand-context-name the-struct_305)"
"(expand-context-observer the-struct_305)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_305))))))"
"(let-values(((disarmed-exp-s_300)(syntax-disarm$1 exp-s_299)))"
"(if(let-values(((or-part_310)(pair? require-lifts_297)))"
"(if or-part_310 or-part_310(pair? lifts_298)))"
"(let-values()"
"(let-values(((new-s_311)"
"(let-values(((temp134_312)"
"(append require-lifts_297 lifts_298))"
"((exp-s135_313) exp-s_299)"
"((s136_314) s_292)"
"((phase137_315) phase_293))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" temp134_312"
" exp-s135_313"
" s136_314"
" phase137_315)"
"(wrap-lifts-as-begin17.1"
" temp134_312"
" exp-s135_313"
" s136_314"
" phase137_315)))))"
"(if just-once?_287"
" new-s_311"
"(loop_291 new-s_311 phase_293 ns_294 as-tail?_295))))"
"(if(not single_284)"
"(let-values() exp-s_299)"
"(if(if just-once?_287(not(eq? exp-s_299 s_292)) #f)"
"(let-values() exp-s_299)"
"(let-values()"
"(let-values(((tmp_316)"
"(core-form-sym disarmed-exp-s_300 phase_293)))"
"(if(equal? tmp_316 'begin)"
"(let-values()"
"(let-values(((ok?_317 begin138_318 e139_319)"
"(let-values(((s_331) disarmed-exp-s_300))"
"(let-values(((orig-s_332) s_331))"
"(let-values(((begin138_333 e139_334)"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_331)"
"(syntax-e$1"
" s_331)"
" s_331)))"
"(if(pair? s_335)"
"(let-values(((begin140_336)"
"(let-values(((s_338)"
"(car"
" s_335)))"
" s_338))"
"((e141_337)"
"(let-values(((s_339)"
"(cdr"
" s_335)))"
"(let-values(((s_340)"
"(if(syntax?$1"
" s_339)"
"(syntax-e$1"
" s_339)"
" s_339)))"
"(let-values(((flat-s_341)"
"(to-syntax-list.1"
" s_340)))"
"(if(not"
" flat-s_341)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_332))"
"(let-values()"
" flat-s_341)))))))"
"(values"
" begin140_336"
" e141_337))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_332)))))"
"(values"
" #t"
" begin138_333"
" e139_334))))))"
"(letrec-values(((begin-loop_330)"
"(lambda(es_342)"
"(if(null? es_342)"
"(let-values()"
"(if combine_285 null(void)))"
"(if(if(not combine_285)"
"(null?(cdr es_342))"
" #f)"
"(let-values()"
"(loop_291"
"(car es_342)"
" phase_293"
" ns_294"
" as-tail?_295))"
"(let-values()"
"(let-values(((a_343)"
"(loop_291"
"(car es_342)"
" phase_293"
" ns_294"
" #f)))"
"(if combine_285"
"(combine_285"
" a_343"
"(begin-loop_330"
"(cdr es_342)))"
"(begin-loop_330"
"(cdr es_342))))))))))"
"(if wrap_286"
"(wrap_286"
" begin138_318"
" exp-s_299"
"(begin-loop_330 e139_319))"
"(begin-loop_330 e139_319)))))"
"(if(equal? tmp_316 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_344"
" begin-for-syntax142_345"
" e143_346)"
"(let-values(((s_360)"
" disarmed-exp-s_300))"
"(let-values(((orig-s_361) s_360))"
"(let-values(((begin-for-syntax142_362"
" e143_363)"
"(let-values(((s_364)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(if(pair? s_364)"
"(let-values(((begin-for-syntax144_365)"
"(let-values(((s_367)"
"(car"
" s_364)))"
" s_367))"
"((e145_366)"
"(let-values(((s_368)"
"(cdr"
" s_364)))"
"(let-values(((s_369)"
"(if(syntax?$1"
" s_368)"
"(syntax-e$1"
" s_368)"
" s_368)))"
"(let-values(((flat-s_370)"
"(to-syntax-list.1"
" s_369)))"
"(if(not"
" flat-s_370)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_361))"
"(let-values()"
" flat-s_370)))))))"
"(values"
" begin-for-syntax144_365"
" e145_366))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_361)))))"
"(values"
" #t"
" begin-for-syntax142_362"
" e143_363))))))"
"(let-values(((next-phase_357)(add1 phase_293)))"
"(let-values(((next-ns_358)"
"(namespace->namespace-at-phase"
" ns_294"
" next-phase_357)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_358)"
"(values))))"
"(let-values(((l_359)"
"(alt-reverse"
"(let-values(((lst_371)"
" e143_346))"
"(begin"
"(if(list? lst_371)"
"(void)"
"(let-values()"
"(in-list lst_371)))"
"((letrec-values(((for-loop_372)"
"(lambda(fold-var_373"
" lst_374)"
"(if(pair?"
" lst_374)"
"(let-values(((s_375)"
"(unsafe-car"
" lst_374)))"
"(let-values(((fold-var_376)"
"(let-values(((fold-var_377)"
" fold-var_373))"
"(let-values(((fold-var_378)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_291"
" s_375"
" next-phase_357"
" next-ns_358"
" #f))"
" fold-var_377))))"
"(values"
" fold-var_378)))))"
"(for-loop_372"
" fold-var_376"
"(unsafe-cdr"
" lst_374))))"
" fold-var_373))))"
" for-loop_372)"
" null"
" lst_371))))))"
"(if wrap_286"
"(let-values()"
"(wrap_286"
" begin-for-syntax142_345"
" exp-s_299"
" l_359))"
"(if combine_285"
"(let-values() l_359)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_284"
" exp-s_299"
" ns_294"
" as-tail?_295)))))))))))))))"
" loop_291)"
" s_288"
" phase_290"
" ns_283"
" #t)))))))))))))"
"(define-values"
"(unpack59.1)"
"(lambda(given-kws_379 given-args_380 given-s56_381 ns57_382)"
"(let-values(((combine53_383)(if(pair? given-kws_379)(eq? '#:combine(car given-kws_379)) #f)))"
"(let-values(((combine49_384)(if combine53_383(car given-args_380)(void)))"
"((given-kws_385)(if combine53_383(cdr given-kws_379) given-kws_379))"
"((given-args_386)(if combine53_383(cdr given-args_380) given-args_380)))"
"(let-values(((just-once?55_387)(if(pair? given-kws_385)(eq? '#:just-once?(car given-kws_385)) #f)))"
"(let-values(((just-once?51_388)(if just-once?55_387(car given-args_386)(void)))"
"((given-kws_389)(if just-once?55_387(cdr given-kws_385) given-kws_385))"
"((given-args_390)(if just-once?55_387(cdr given-args_386) given-args_386)))"
"(let-values(((single48_391)(car given-args_390))"
"((given-kws_392)(cdr given-kws_389))"
"((given-args_393)(cdr given-args_390)))"
"(let-values(((wrap54_394)(pair? given-kws_392)))"
"(let-values(((wrap50_395)(if wrap54_394(car given-args_393)(void))))"
"(per-top-level58.1"
" combine49_384"
" combine53_383"
" just-once?51_388"
" just-once?55_387"
" single48_391"
" wrap50_395"
" wrap54_394"
" given-s56_381"
" ns57_382))))))))))"
"(define-values"
"(per-top-level60.1)"
"(lifted/2.1$6"
"(lambda(given-kws_396 given-argc_397)"
"(if(= given-argc_397 4)(subsets? '(#:single) given-kws_396 '(#:combine #:just-once? #:single #:wrap)) #f))"
"(case-lambda"
"((given-kws_398 given-args_399 given-s_400 ns_401)(unpack59.1 given-kws_398 given-args_399 given-s_400 ns_401)))"
" '(#:single)"
" '(#:combine #:just-once? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_402 ns_403)(if(syntax?$1 s_402) s_402(1/namespace-syntax-introduce(1/datum->syntax #f s_402) ns_403))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_404 s_405 r_406)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_405)(cons form-id_404 r_406) s_405 s_405) s_405)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_407 ctx_408)"
"(let-values()"
"(let-values(((ns_409)(expand-context-namespace ctx_408)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_409)(values))))"
"(let-values(((lift-ctx_410)"
"(let-values(((temp146_413)(make-top-level-lift ctx_408)))"
"(if(variable-reference-constant?(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 #f #f temp146_413)"
"(make-lift-context8.1 temp146_413)))))"
"(let-values(((require-lift-ctx_411)"
"(make-require-lift-context(namespace-phase ns_409)(make-parse-top-lifted-require ns_409))))"
"(let-values(((exp-s_412)"
"(let-values(((s147_414) s_407)"
"((temp148_415)"
"(let-values(((the-struct_416) ctx_408))"
"(if(expand-context? the-struct_416)"
"(let-values(((lifts149_417) lift-ctx_410)"
"((module-lifts150_418) lift-ctx_410)"
"((require-lifts151_419) require-lift-ctx_411))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_416)"
"(root-expand-context-post-expansion-scope the-struct_416)"
"(root-expand-context-top-level-bind-scope the-struct_416)"
"(root-expand-context-all-scopes-stx the-struct_416)"
"(root-expand-context-use-site-scopes the-struct_416)"
"(root-expand-context-defined-syms the-struct_416)"
"(root-expand-context-frame-id the-struct_416)"
"(root-expand-context-counter the-struct_416)"
"(root-expand-context-lift-key the-struct_416)"
"(expand-context-context the-struct_416)"
"(expand-context-phase the-struct_416)"
"(expand-context-namespace the-struct_416)"
"(expand-context-env the-struct_416)"
"(expand-context-user-env the-struct_416)"
"(expand-context-post-expansion-scope-action the-struct_416)"
"(expand-context-scopes the-struct_416)"
"(expand-context-def-ctx-scopes the-struct_416)"
"(expand-context-binding-layer the-struct_416)"
"(expand-context-reference-records the-struct_416)"
"(expand-context-only-immediate? the-struct_416)"
"(expand-context-just-once? the-struct_416)"
"(expand-context-module-begin-k the-struct_416)"
"(expand-context-need-eventually-defined the-struct_416)"
"(expand-context-allow-unbound? the-struct_416)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_416)"
"(expand-context-stops the-struct_416)"
"(expand-context-current-introduction-scopes the-struct_416)"
"(expand-context-declared-submodule-names the-struct_416)"
" lifts149_417"
"(expand-context-lift-envs the-struct_416)"
" module-lifts150_418"
" require-lifts151_419"
"(expand-context-to-module-lifts the-struct_416)"
"(expand-context-requires+provides the-struct_416)"
"(expand-context-name the-struct_416)"
"(expand-context-observer the-struct_416)))"
"                                              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_416)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f s147_414 temp148_415)"
"(expand7.1 s147_414 temp148_415)))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_411)"
"(get-and-clear-lifts! lift-ctx_410)"
" exp-s_412)))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_420)"
"(lambda(s_421 phase_422)"
"(let-values(((ok?_423 #%require152_424 req153_425)"
"(let-values(((s_436)(syntax-disarm$1 s_421)))"
"(let-values(((orig-s_437) s_436))"
"(let-values(((#%require152_438 req153_439)"
"(let-values(((s_440)(if(syntax?$1 s_436)(syntax-e$1 s_436) s_436)))"
"(if(pair? s_440)"
"(let-values(((#%require154_441)(let-values(((s_443)(car s_440))) s_443))"
"((req155_442)"
"(let-values(((s_444)(cdr s_440)))"
"(let-values(((s_445)"
"(if(syntax?$1 s_444)"
"(syntax-e$1 s_444)"
" s_444)))"
"(if(pair? s_445)"
"(let-values(((req156_446)"
"(let-values(((s_447)(car s_445))) s_447))"
"(()"
"(let-values(((s_448)(cdr s_445)))"
"(let-values(((s_449)"
"(if(syntax?$1 s_448)"
"(syntax-e$1 s_448)"
" s_448)))"
"(if(null? s_449)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_437))))))"
"(values req156_446))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_437))))))"
"(values #%require154_441 req155_442))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_437)))))"
"(values #t #%require152_438 req153_439))))))"
"(let-values(((...pander/eval/main.rkt:285:4_450) parse-and-perform-requires!30.1)"
"((temp157_451)(list req153_425))"
"((s158_452) s_421)"
"((ns159_453) ns_420)"
"((phase160_454) phase_422)"
"((phase161_455) phase_422)"
"((temp162_456)(make-requires+provides #f))"
"((temp163_457) 'require))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" phase161_455"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp163_457"
" temp157_451"
" s158_452"
" ns159_453"
" phase160_454"
" temp162_456)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:285:4_450"
" keyword-procedure-extract"
" '(#:run-phase #:who)"
" 7)"
" '(#:run-phase #:who)"
"(list phase161_455 temp163_457)"
" temp157_451"
" s158_452"
" ns159_453"
" phase160_454"
" temp162_456)))))))"
"(void)"
"(void)"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_1)"
"(lambda(who3_2 mod-path4_3 sym5_4 fail-k1_5 fail-k2_6)"
"(let-values(((who_7) who3_2))"
"(let-values(((mod-path_8) mod-path4_3))"
"(let-values(((sym_9) sym5_4))"
"(let-values(((fail-k_10)(if fail-k2_6 fail-k1_5 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(1/module-path? mod-path_8)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(1/module-path-index? mod-path_8)))"
"(if or-part_16 or-part_16(1/resolved-module-path? mod-path_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_7"
"                                                 \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_17)(symbol? sym_9)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(not sym_9)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(equal? sym_9 0)))"
"(if or-part_19 or-part_19(void? sym_9)))))))"
"(void)"
"(let-values()"
"                                                  (raise-argument-error who_7 \"(or/c symbol? #f 0 void?)\" sym_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_10)"
"(procedure-arity-includes? fail-k_10 0)"
" #f)"
"(void)"
"                                                  (let-values () (raise-argument-error who_7 \"(-> any)\" fail-k_10)))"
"(values))))"
"(let-values(((ns_11)(1/current-namespace)))"
"(let-values(((mpi_12)"
"(if(1/module-path? mod-path_8)"
"(let-values()(1/module-path-index-join mod-path_8 #f))"
"(if(1/module-path-index? mod-path_8)"
"(let-values() mod-path_8)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_8)"
" #f))))))"
"(let-values(((mod-name_13)(1/module-path-index-resolve mpi_12 #t)))"
"(let-values(((phase_14)(namespace-phase ns_11)))"
"(if(not sym_9)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:43:4_20)"
" namespace-module-instantiate!96.1)"
"((ns20_21) ns_11)"
"((mpi21_22) mpi_12)"
"((phase22_23) phase_14)"
"((phase23_24) phase_14)"
"((temp24_25) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" temp24_25"
" #t"
" phase23_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns20_21"
" mpi21_22"
" phase22_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:43:4_20"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase)"
" 5)"
" '(#:otherwise-available? #:run-phase)"
"(list temp24_25 phase23_24)"
" ns20_21"
" mpi21_22"
" phase22_23))))"
"(if(equal? sym_9 0)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:47:4_26)"
" namespace-module-instantiate!96.1)"
"((ns25_27) ns_11)"
"((mpi26_28) mpi_12)"
"((phase27_29) phase_14)"
"((phase28_30) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase28_30"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns25_27"
" mpi26_28"
" phase27_29)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:47:4_26"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase28_30)"
" ns25_27"
" mpi26_28"
" phase27_29))))"
"(if(void? sym_9)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:50:4_31)"
" namespace-module-visit!104.1)"
"((ns29_32) ns_11)"
"((mpi30_33) mpi_12)"
"((phase31_34) phase_14)"
"((phase32_35) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!104.1))"
"(namespace-module-visit!102.1"
" phase32_35"
" #t"
" ns29_32"
" mpi30_33"
" phase31_34)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:50:4_31"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list phase32_35)"
" ns29_32"
" mpi30_33"
" phase31_34))))"
"(let-values()"
"(let-values(((m_36)(namespace->module ns_11 mod-name_13)))"
"(let-values((()"
"(begin"
"(if m_36"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_13)))"
"(values))))"
"(let-values(((binding/p_37)"
"(hash-ref"
"(hash-ref(module-provides m_36) 0 '#hasheq())"
" sym_9"
" #f)))"
"(if(not binding/p_37)"
"(let-values()"
"(if(eq? fail-k_10 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                               \"name is not provided\""
"                                                               \"name\""
" sym_9"
"                                                               \"module\""
" mod-name_13)"
"(fail-k_10)))"
"(let-values()"
"(let-values(((binding_38)"
"(provided-as-binding binding/p_37)))"
"(let-values(((ex-sym_39)"
"(module-binding-sym binding_38)))"
"(let-values(((ex-phase_40)"
"(module-binding-phase binding_38)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:72:6_46)"
" namespace-module-instantiate!96.1)"
"((ns33_47) ns_11)"
"((mpi34_48) mpi_12)"
"((phase35_49) phase_14)"
"((phase36_50) phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!96.1))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase36_50"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns33_47"
" mpi34_48"
" phase35_49)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:72:6_46"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase36_50)"
" ns33_47"
" mpi34_48"
" phase35_49)))"
"(values))))"
"(let-values(((ex-mod-name_41)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_38)"
"(module-self m_36)"
" mpi_12))))"
"(let-values(((m-ns_42)"
"(let-values(((.../dynamic-require.rkt:78:19_51)"
" namespace->module-namespace82.1)"
"((ns37_52) ns_11)"
"((ex-mod-name38_53)"
" ex-mod-name_41)"
"((temp39_54)"
"(phase-"
" phase_14"
" ex-phase_40))"
"((temp40_55) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp40_55"
" #t"
" #f"
" #f"
" ns37_52"
" ex-mod-name38_53"
" temp39_54)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:78:19_51"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp40_55)"
" ns37_52"
" ex-mod-name38_53"
" temp39_54)))))"
"(let-values(((mi_43)"
"(namespace->module"
" ns_11"
" ex-mod-name_41)))"
"(let-values(((access_44)"
"(let-values(((or-part_56)"
"(module-access"
" m_36)))"
"(if or-part_56"
" or-part_56"
"(module-compute-access!"
" m_36)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
" access_44"
" ex-sym_39"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_42)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_38)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_38)"
"(namespace-inspector"
" m-ns_42))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
"                                                                                                 \"name is protected\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13))"
"(void))"
"(values))))"
"(let-values(((fail_45)"
"(lambda()"
"(if(eq?"
" fail-k_10"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                 \"name's binding is missing\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13)"
"(fail-k_10)))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_37))"
"(let-values()"
"(namespace-get-variable"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" fail_45))"
"(let-values()"
"(let-values(((missing_57)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:104:8_59)"
" namespace-module-visit!104.1)"
"((ns41_60)"
" ns_11)"
"((mpi42_61)"
" mpi_12)"
"((phase43_62)"
" phase_14)"
"((phase44_63)"
" phase_14))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!104.1))"
"(namespace-module-visit!102.1"
" phase44_63"
" #t"
" ns41_60"
" mpi42_61"
" phase43_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:104:8_59"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list"
" phase44_63)"
" ns41_60"
" mpi42_61"
" phase43_62)))"
"(values))))"
"(let-values(((t_58)"
"(namespace-get-transformer"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" missing_57)))"
"(if(eq? t_58 missing_57)"
"(let-values()(fail_45))"
"(let-values()"
"(let-values(((tmp-ns_64)"
"(let-values(((ns45_66)"
" ns_11))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" new-namespace11.1))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_66"
" #t)"
"(new-namespace11.1"
" ns45_66)))))"
"(let-values(((mod-path_65)"
"(resolved-module-path->module-path"
" mod-name_13)))"
"(begin"
"(1/namespace-require"
" mod-path_65"
" tmp-ns_64)"
"(1/eval"
" sym_9"
" tmp-ns_64)))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_67 mod-path_68 sym_69)(do-dynamic-require6_1 who_67 mod-path_68 sym_69 #f #f))"
"((who_70 mod-path_71 sym_72 fail-k1_73)(do-dynamic-require6_1 who_70 mod-path_71 sym_72 fail-k1_73 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_74)"
"(lambda(mod-path10_75 sym11_76 fail-k8_77 fail-k9_78)"
"(let-values(((mod-path_79) mod-path10_75))"
"(let-values(((sym_80) sym11_76))"
"(let-values(((fail-k_81)(if fail-k9_78 fail-k8_77 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_79 sym_80 fail-k_81))))))))"
"(case-lambda"
"((mod-path_82 sym_83)(dynamic-require12_74 mod-path_82 sym_83 #f #f))"
"((mod-path_84 sym_85 fail-k8_86)(dynamic-require12_74 mod-path_84 sym_85 fail-k8_86 #t)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax18_87)"
"(lambda(mod-path16_88 sym17_89 fail-k14_90 fail-k15_91)"
"(let-values(((mod-path_92) mod-path16_88))"
"(let-values(((sym_93) sym17_89))"
"(let-values(((fail-k_94)(if fail-k15_91 fail-k14_90 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_95)(1/current-namespace)))"
"(namespace->namespace-at-phase ns_95(add1(namespace-phase ns_95)))))"
"(let-values()"
"(do-dynamic-require 'dynamic-require-for-syntax mod-path_92 sym_93 fail-k_94))))))))))"
"(case-lambda"
"((mod-path_96 sym_97)(dynamic-require-for-syntax18_87 mod-path_96 sym_97 #f #f))"
"((mod-path_98 sym_99 fail-k14_100)(dynamic-require-for-syntax18_87 mod-path_98 sym_99 fail-k14_100 #t)))))"
"(void)"
"(void)"
"(define-values"
"(eval$1)"
"(case-lambda"
"((s_1)((current-eval)(intro s_1)))"
"((s_2 ns_3)"
"(begin"
"      (if (1/namespace? ns_3) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_3)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_3)"
"(let-values()((current-eval)(intro s_2 ns_3))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_4)"
"(begin"
"      (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_4)))"
"((current-eval) s_4)))"
"((s_5 ns_6)"
"(begin"
"      (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_5)))"
"      (if (1/namespace? ns_6) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_6)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_6)"
"(let-values()((current-eval) s_5)))))))"
"(define-values(compile$1)(lambda(s_7)((current-compile)(intro s_7) #f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_8)"
"(begin"
"      (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_8)))"
"((current-compile) s_8 #f))))"
"(define-values(1/expand)(lambda(s_9)(expand$1(intro s_9)(1/current-namespace) #t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_10)"
"(begin"
"      (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_10)))"
"(expand$1 s_10(1/current-namespace) #t))))"
"(define-values(1/expand-once)(lambda(s_11)(expand-once$1(intro s_11))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_12)"
"(begin"
"      (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_12)))"
"(expand-once$1 s_12))))"
"(define-values(1/expand-to-top-form)(lambda(s_13)(expand-to-top-form$1(intro s_13))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_14)"
"(begin"
"      (if (syntax?$1 s_14) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_14)))"
"(expand-to-top-form$1 s_14))))"
"(define-values"
"(intro)"
"(let-values(((intro4_15)"
"(lambda(given-s3_16 ns1_17 ns2_18)"
"(let-values(((given-s_19) given-s3_16))"
"(let-values(((ns_20)(if ns2_18 ns1_17(1/current-namespace))))"
"(let-values()"
"(let-values(((s_21)(if(syntax?$1 given-s_19) given-s_19(1/datum->syntax #f given-s_19))))"
"(1/namespace-syntax-introduce s_21 ns_20))))))))"
"(case-lambda((given-s_22)(intro4_15 given-s_22 #f #f))((given-s_23 ns1_24)(intro4_15 given-s_23 ns1_24 #t)))))"
"(void)"
"(void)"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_6)"
"(lambda(mod3_7 load?1_8 load?2_9)"
"(let-values(((mod_10) mod3_7))"
"(let-values(((load?_11)(if load?2_9 load?1_8 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_10)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_10)))"
"(values))))"
"(let-values(((ns_12)(1/current-namespace)))"
"(let-values(((name_13)"
"(let-values(((...space/api-module.rkt:28:15_14)"
" reference->resolved-module-path34.1)"
"((mod35_15) mod_10)"
"((load?36_16) load?_11))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?36_16 mod35_15)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:28:15_14"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?36_16)"
" mod35_15)))))"
"(if(namespace->module ns_12 name_13) #t #f))))))))))"
"(case-lambda"
"((mod_17)(module-declared?4_6 mod_17 #f #f))"
"((mod_18 load?1_19)(module-declared?4_6 mod_18 load?1_19 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_20)"
"(let-values((()"
"(begin"
"(if(module-reference? mod_20)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_20)))"
"(values))))"
"(let-values(((ns_21)(1/current-namespace)))"
"(let-values(((name_22)"
"(let-values(((...space/api-module.rkt:35:15_24) reference->resolved-module-path34.1)"
"((mod37_25) mod_20)"
"((temp38_26) #f))"
"(if(variable-reference-constant?(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp38_26 mod37_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:35:15_24"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp38_26)"
" mod37_25)))))"
"(let-values(((m_23)(namespace->module ns_21 name_22)))(if m_23(module-primitive? m_23) #f)))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_27)"
"(lambda(extract8_28 who9_29 mod10_30 load?6_31 load?7_32)"
"(let-values(((extract_33) extract8_28))"
"(let-values(((who_34) who9_29))"
"(let-values(((mod_35) mod10_30))"
"(let-values(((load?_36)(if load?7_32 load?6_31 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_35)"
"(void)"
"(let-values()(raise-argument-error who_34 module-reference-str mod_35)))"
"(values))))"
"(let-values(((m_37)"
"(namespace->module/complain"
" who_34"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:44:40_38)"
" reference->resolved-module-path34.1)"
"((mod39_39) mod_35)"
"((load?40_40) load?_36))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?40_40 mod39_39)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:44:40_38"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?40_40)"
" mod39_39))))))"
"(extract_33 m_37)))))))))))"
"(case-lambda"
"((extract_41 who_42 mod_43)(module->11_27 extract_41 who_42 mod_43 #f #f))"
"((extract_44 who_45 mod_46 load?6_47)(module->11_27 extract_44 who_45 mod_46 load?6_47 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_48)"
"(lambda(mod15_49 load?13_50 load?14_51)"
"(let-values(((mod_52) mod15_49))"
"(let-values(((load?_53)(if load?14_51 load?13_50 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_52 load?_53)))))))"
"(case-lambda"
"((mod_54)(module->language-info16_48 mod_54 #f #f))"
"((mod_55 load?13_56)(module->language-info16_48 mod_55 load?13_56 #t)))))"
"(define-values(1/module->imports)(lambda(mod_57)(module-> module-requires 'module->imports mod_57)))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_58)"
"(let-values(((provides_59 self_60)"
"(module->"
"(lambda(m_61)(values(module-provides m_61)(module-self m_61)))"
" 'module->exports"
" mod_58)))"
"(provides->api-provides provides_59 self_60))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_62)"
"(module->"
"(lambda(m_63)(variables->api-nonprovides(module-provides m_63)((module-get-all-variables m_63))))"
" 'module->indirect-exports"
" mod_62)))"
"(define-values"
"(1/module-provide-protected?)"
"(lambda(mod_64 sym_65)"
"(module->"
"(lambda(m_66)"
"(let-values(((b/p_67)(hash-ref(module-provides m_66) sym_65 #f)))"
"(let-values(((or-part_68)(not b/p_67)))(if or-part_68 or-part_68(provided-as-protected? b/p_67)))))"
" 'module-provide-protected?"
" mod_64)))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_69)"
"(lambda(mod20_70 ns18_71 ns19_72)"
"(let-values(((mod_73) mod20_70))"
"(let-values(((ns_74)(if ns19_72 ns18_71(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_73)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_73)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_74)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'module->namespace \"namespace?\" ns_74)))"
"(values))))"
"(let-values(((name_75)"
"(let-values(((...space/api-module.rkt:74:15_78)"
" reference->resolved-module-path34.1)"
"((mod44_79) mod_73)"
"((temp45_80) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp45_80 mod44_79)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:74:15_78"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp45_80)"
" mod44_79)))))"
"(let-values(((phase_76)(namespace-phase ns_74)))"
"(let-values(((m-ns_77)"
"(let-values(((ns46_81) ns_74)"
"((name47_82) name_75)"
"((phase48_83) phase_76))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_81"
" name47_82"
" phase48_83)"
"(namespace->module-namespace82.1 ns46_81 name47_82 phase48_83)))))"
"(begin"
"(if m-ns_77"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_74 name_75)"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"module not instantiated in the current namespace\""
"                                           \"name\""
" name_75))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_77))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                         \"current code inspector cannot access namespace of module\""
"                                         \"module name\""
" name_75)))"
"(if(namespace-get-root-expand-ctx m-ns_77)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_77"
"(let-values()"
"(if(variable-reference-constant?"
"(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((ns41_84) ns_74)"
"((temp42_85)(namespace-mpi m-ns_77))"
"((phase43_86) phase_76))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-make-available!112.1))"
"(namespace-module-make-available!110.1 #f #f ns41_84 temp42_85 phase43_86)"
"(namespace-module-make-available!112.1 ns41_84 temp42_85 phase43_86)))"
" m-ns_77))))))))))))"
"(case-lambda"
"((mod_87)(module->namespace21_69 mod_87 #f #f))"
"((mod_88 ns18_89)(module->namespace21_69 mod_88 ns18_89 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_90)"
"(lambda(insp25_91 mod26_92 ns23_93 ns24_94)"
"(let-values(((insp_95) insp25_91))"
"(let-values(((mod_96) mod26_92))"
"(let-values(((ns_97)(if ns24_94 ns23_93(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_95)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-unprotect-module \"inspector?\" insp_95)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_96)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"module-path?\""
" mod_96)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_97)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"namespace?\""
" ns_97)))"
"(values))))"
"(let-values(((name_98)"
"(let-values(((...space/api-module.rkt:99:15_101)"
" reference->resolved-module-path34.1)"
"((mod49_102) mod_96)"
"((temp50_103) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp50_103 mod49_102)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:99:15_101"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp50_103)"
" mod49_102)))))"
"(let-values(((phase_99)(namespace-phase ns_97)))"
"(let-values(((m-ns_100)"
"(let-values(((ns51_104) ns_97)"
"((name52_105) name_98)"
"((phase53_106) phase_99))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace82.1))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_104"
" name52_105"
" phase53_106)"
"(namespace->module-namespace82.1"
" ns51_104"
" name52_105"
" phase53_106)))))"
"(begin"
"(if m-ns_100"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                             \"module not instantiated\""
"                                             \"module name\""
" name_98)))"
"(if(inspector-superior? insp_95(namespace-inspector m-ns_100))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_100"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_107 mod_108)(namespace-unprotect-module27_90 insp_107 mod_108 #f #f))"
"((insp_109 mod_110 ns23_111)(namespace-unprotect-module27_90 insp_109 mod_110 ns23_111 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_112 ns_113 name_114)"
"(let-values(((or-part_115)(namespace->module ns_113 name_114)))"
"(if or-part_115"
" or-part_115"
"        (raise-arguments-error who_112 \"unknown module in the current namespace\" \"name\" name_114)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_116)"
"(let-values(((or-part_117)(1/module-path? mod_116)))"
"(if or-part_117"
" or-part_117"
"(let-values(((or-part_118)(1/module-path-index? mod_116)))"
"(if or-part_118 or-part_118(1/resolved-module-path? mod_116)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$5 lifted/2.1$5 lifted/3.1$4 lifted/4.1$4 lifted/5.1$4)"
"(make-struct-type"
" 'reference->resolved-module-path"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'reference->resolved-module-path"
"(case-lambda((self_119 mod_120)(apply missing-kw self_119 mod_120 null))))))"
"(current-inspector)"
"(case-lambda((self_121 mod_122)(apply missing-kw self_121 mod_122 null)))))"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_123 mod31_124)"
"(let-values(((mod_125) mod31_124))"
"(let-values(((load?_126) load?29_123))"
"(let-values()"
"(if(1/resolved-module-path? mod_125)"
"(let-values() mod_125)"
"(let-values()"
"(let-values(((mpi_127)"
"(if(1/module-path-index? mod_125) mod_125(1/module-path-index-join mod_125 #f))))"
"(1/module-path-index-resolve mpi_127 load?_126)))))))))"
"(define-values"
"(unpack33.1)"
"(lambda(given-kws_128 given-args_129 mod31_130)"
"(let-values(((load?29_131)(car given-args_129)))(reference->resolved-module-path32.1 load?29_131 mod31_130))))"
"(define-values"
"(reference->resolved-module-path34.1)"
"(lifted/2.1$5"
"(lambda(given-kws_132 given-argc_133)"
"(if(= given-argc_133 3)"
"(let-values(((l2_134) given-kws_132))"
"(if(pair? l2_134)(if(eq?(car l2_134) '#:load?)(null?(cdr l2_134)) #f) #f))"
" #f))"
"(case-lambda((given-kws_135 given-args_136 mod_137)(unpack33.1 given-kws_135 given-args_136 mod_137)))"
" '(#:load?)"
" '(#:load?)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:missing-module(lambda(e_25)(1/exn:fail:filesystem:missing-module-path e_25))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons 1/prop:missing-module(lambda(e_46)(1/exn:fail:syntax:missing-module-path e_46))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_26 make-_27 ?_28(make-struct-field-accessor -ref_29 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_47)"
"(begin"
"(if(let-values(((or-part_48)(not v_47)))"
"(if or-part_48"
" or-part_48"
"(let-values(((or-part_49)(1/module-path? v_47)))"
"(if or-part_49 or-part_49(if(syntax?$1 v_47)(1/module-path?(syntax->datum$1 v_47)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_47)))"
" v_47))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_50 filename_51 pre_52 rel_53 post_54 errstr_55)"
"(let-values(((path_56)(1/current-module-path-for-load)))"
"(if path_56"
"(let-values()"
"(begin"
"(if(syntax?$1 path_56)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a~a~a~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_56)(srcloc->string(syntax-srcloc path_56)) name_50)"
"(syntax->datum$1 path_56)"
" filename_51"
" pre_52"
" rel_53"
" post_54"
" errstr_55)"
"(current-continuation-marks)"
"(list path_56)"
"(syntax->datum$1 path_56))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_50"
" path_56"
" filename_51"
" pre_52"
" rel_53"
" post_54"
" errstr_55)"
"(current-continuation-marks)"
" path_56))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values(((s_7) s3_2))"
"(let-values(((context_8) context4_3))"
"(let-values(((stop-ids_9) stop-ids5_4))"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 #f)))"
"(let-values()"
"(let-values(((temp63_11) 'local-expand)"
"((s64_12) s_7)"
"((context65_13) context_8)"
"((stop-ids66_14) stop-ids_9)"
"((intdefs67_15) intdefs_10))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp63_11"
" s64_12"
" context65_13"
" stop-ids66_14"
" intdefs67_15"
" #t)"
"(do-local-expand62.1 temp63_11 s64_12 context65_13 stop-ids66_14 intdefs67_15)))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 #f #f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values(((s_31) s12_24))"
"(let-values(((context_32) context13_25))"
"(let-values(((stop-ids_33) stop-ids14_26))"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 #f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:27:2_36) do-local-expand62.1)"
"((temp68_37) 'local-expand)"
"((s69_38) s_31)"
"((context70_39) context_32)"
"((stop-ids71_40) stop-ids_33)"
"((intdefs72_41) intdefs_34)"
"((temp73_42) #t)"
"((lift-key74_43) lift-key_35))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" temp73_42"
" #t"
" lift-key74_43"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:27:2_36"
" keyword-procedure-extract"
" '(#:capture-lifts? #:lift-key)"
" 7)"
" '(#:capture-lifts? #:lift-key)"
"(list temp73_42 lift-key74_43)"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41))))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 #f #f #f #f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 #t #t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values(((s_62) s19_57))"
"(let-values(((context_63) context20_58))"
"(let-values(((stop-ids_64) stop-ids21_59))"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 #f)))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:32:2_66) do-local-expand62.1)"
"((temp75_67) 'local-expand)"
"((s76_68) s_62)"
"((context77_69) context_63)"
"((stop-ids78_70) stop-ids_64)"
"((intdefs79_71) intdefs_65)"
"((temp80_72) #t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" temp80_72"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:32:2_66"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 7)"
" '(#:as-transformer?)"
"(list temp80_72)"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71)))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 #f #f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values(((s_88) s28_81))"
"(let-values(((context_89) context29_82))"
"(let-values(((stop-ids_90) stop-ids30_83))"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 #f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:36:2_93) do-local-expand62.1)"
"((temp81_94) 'local-expand)"
"((s82_95) s_88)"
"((context83_96) context_89)"
"((stop-ids84_97) stop-ids_90)"
"((intdefs85_98) intdefs_91)"
"((temp86_99) #t)"
"((temp87_100) #t)"
"((lift-key88_101) lift-key_92))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" temp86_99"
" #t"
" temp87_100"
" #t"
" lift-key88_101"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:36:2_93"
" keyword-procedure-extract"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
" 7)"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
"(list temp86_99 temp87_100 lift-key88_101)"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98))))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 #f #f #f #f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 #t #t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 #f #t #f)))))"
"(define-values"
"(do-syntax-local-expand-expression39.1)"
"(lambda(local-keys33_114 local-keys35_115 local-values34_116 local-values36_117 who37_118 s38_119)"
"(let-values(((who_120) who37_118))"
"(let-values(((s_121) s38_119))"
"(let-values(((local-keys_122)(if local-keys35_115 local-keys33_114 null)))"
"(let-values(((local-values_123)(if local-values36_117 local-values34_116 null)))"
"(let-values()"
"(let-values(((exp-s_124)"
"(let-values(((...and/local-expand.rkt:44:16_127) do-local-expand62.1)"
"((who89_128) who_120)"
"((s90_129) s_121)"
"((temp91_130) 'expression)"
"((null92_131) null)"
"((temp93_132) #f)"
"((temp94_133) #t)"
"((local-keys95_134) local-keys_122)"
"((local-values96_135) local-values_123))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand62.1))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" local-keys95_134"
" #t"
" local-values96_135"
" #t"
" temp94_133"
" #t"
" who89_128"
" s90_129"
" temp91_130"
" null92_131"
" temp93_132"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:44:16_127"
" keyword-procedure-extract"
" '(#:local-keys #:local-values #:skip-log-exit?)"
" 7)"
" '(#:local-keys #:local-values #:skip-log-exit?)"
"(list local-keys95_134 local-values96_135 temp94_133)"
" who89_128"
" s90_129"
" temp91_130"
" null92_131"
" temp93_132)))))"
"(let-values(((ctx_125)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f #f #f)"
"(get-current-expand-context8.1)))))"
"(let-values(((ae_126)"
"(already-expanded1.1"
"(flip-introduction-scopes exp-s_124 ctx_125)"
"(expand-context-binding-layer"
"(let-values(((temp97_136) 'syntax-local-expand-expression))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp97_136 #t)"
"(get-current-expand-context8.1 temp97_136)))))))"
"(begin"
"(let-values(((obs_137)(expand-context-observer ctx_125)))"
"(if obs_137"
"(let-values()(let-values()(call-expand-observe obs_137 'opaque-expr ae_126)))"
"(void)))"
"(let-values(((obs_138)(expand-context-observer ctx_125)))"
"(if obs_138"
"(let-values()(let-values()(call-expand-observe obs_138 'exit-local exp-s_124)))"
"(void)))"
"(values exp-s_124(flip-introduction-scopes(datum->syntax$1 #f ae_126) ctx_125)))))))))))))"
"(define-values"
"(unpack40.1$1)"
"(lambda(given-kws_139 given-args_140 who37_141 s38_142)"
"(let-values(((local-keys35_143)(if(pair? given-kws_139)(eq? '#:local-keys(car given-kws_139)) #f)))"
"(let-values(((local-keys33_144)(if local-keys35_143(car given-args_140)(void)))"
"((given-kws_145)(if local-keys35_143(cdr given-kws_139) given-kws_139))"
"((given-args_146)(if local-keys35_143(cdr given-args_140) given-args_140)))"
"(let-values(((local-values36_147)(pair? given-kws_145)))"
"(let-values(((local-values34_148)(if local-values36_147(car given-args_146)(void))))"
"(do-syntax-local-expand-expression39.1"
" local-keys33_144"
" local-keys35_143"
" local-values34_148"
" local-values36_147"
" who37_141"
" s38_142)))))))"
"(define-values"
"(do-syntax-local-expand-expression41.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_149 given-argc_150)"
"(if(= given-argc_150 4)"
"(let-values(((l1_151) given-kws_149))"
"(let-values(((l1_152)(if(null? l1_151) l1_151(if(eq?(car l1_151) '#:local-keys)(cdr l1_151) l1_151))))"
"(let-values(((l1_153) l1_152))"
"(let-values(((l1_154)"
"(if(null? l1_153) l1_153(if(eq?(car l1_153) '#:local-values)(cdr l1_153) l1_153))))"
"(null? l1_154)))))"
" #f))"
"(case-lambda"
"((given-kws_155 given-args_156 who_157 s_158)(unpack40.1$1 given-kws_155 given-args_156 who_157 s_158)))"
" null"
" '(#:local-keys #:local-values)"
"(let-values(((do-syntax-local-expand-expression_159)"
"(case-lambda((who_160 s_161)(unpack40.1$1 null null who_160 s_161)))))"
" do-syntax-local-expand-expression_159)))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_162)"
"(let-values(((temp98_163) 'syntax-local-expand-expression)((s99_164) s_162))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-expand-expression41.1))"
"(do-syntax-local-expand-expression39.1 #f #f #f #f temp98_163 s99_164)"
"(do-syntax-local-expand-expression41.1 temp98_163 s99_164)))))"
"(define-values"
"(1/syntax-local-expand-expression/extend-environment)"
"(lambda(s_165 keys_166 values_167)"
"(let-values(((...and/local-expand.rkt:65:2_168) do-syntax-local-expand-expression41.1)"
"((temp100_169) 'syntax-local-expand-expression/extend-environment)"
"((s101_170) s_165)"
"((keys102_171) keys_166)"
"((values103_172) values_167))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-expand-expression41.1))"
"(do-syntax-local-expand-expression39.1 keys102_171 #t values103_172 #t temp100_169 s101_170)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:65:2_168"
" keyword-procedure-extract"
" '(#:local-keys #:local-values)"
" 4)"
" '(#:local-keys #:local-values)"
"(list keys102_171 values103_172)"
" temp100_169"
" s101_170)))))"
"(define-values"
"(do-local-expand60.1)"
"(lambda(as-transformer?43_173"
" as-transformer?49_174"
" capture-lifts?42_175"
" capture-lifts?48_176"
" lift-key44_177"
" lift-key50_178"
" local-keys46_179"
" local-keys52_180"
" local-values47_181"
" local-values53_182"
" skip-log-exit?45_183"
" skip-log-exit?51_184"
" who56_185"
" s57_186"
" context58_187"
" stop-ids59_188"
" intdefs54_189"
" intdefs55_190)"
"(let-values(((who_191) who56_185))"
"(let-values(((s_192) s57_186))"
"(let-values(((context_193) context58_187))"
"(let-values(((stop-ids_194) stop-ids59_188))"
"(let-values(((intdefs_195)(if intdefs55_190 intdefs54_189 #f)))"
"(let-values(((capture-lifts?_196)(if capture-lifts?48_176 capture-lifts?42_175 #f)))"
"(let-values(((as-transformer?_197)(if as-transformer?49_174 as-transformer?43_173 #f)))"
"(let-values(((lift-key_198)"
"(if lift-key50_178"
" lift-key44_177"
"(if(let-values(((or-part_199) capture-lifts?_196))"
"(if or-part_199 or-part_199 as-transformer?_197))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_200)(if skip-log-exit?51_184 skip-log-exit?45_183 #f)))"
"(let-values(((local-keys_201)(if local-keys52_180 local-keys46_179 null)))"
"(let-values(((local-values_202)(if local-values53_182 local-values47_181 null)))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_192)"
"(void)"
"                                                (let-values () (raise-argument-error who_191 \"syntax?\" s_192)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_210)(list? context_193)))"
"(if or-part_210"
" or-part_210"
"(memq"
" context_193"
"(if as-transformer?_197"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"(if as-transformer?_197"
"                                                       \"(or/c 'expression 'top-level list?)\""
"                                                       \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_193)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_211)(not stop-ids_194)))"
"(if or-part_211"
" or-part_211"
"(if(list? stop-ids_194)"
"(andmap2 identifier? stop-ids_194)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"                                                       \"(or/c (listof identifier?) #f)\""
" stop-ids_194)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_212)(not intdefs_195)))"
"(if or-part_212"
" or-part_212"
"(let-values(((or-part_213)"
"(1/internal-definition-context? intdefs_195)))"
"(if or-part_213"
" or-part_213"
"(if(list? intdefs_195)"
"(andmap2 1/internal-definition-context? intdefs_195)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_191"
"                                                         \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_195)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-keys_201)"
"(void)"
"(let-values()"
"                                                          (raise-argument-error who_191 \"list?\" local-keys_201)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-values_202)"
"(void)"
"(let-values()"
"                                                            (raise-argument-error who_191 \"list?\" local-values_202)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(=(length local-keys_201)(length local-values_202))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_191"
"                                                               \"different lengths for list of keys and values for extending the environment\""
"                                                               \"keys\""
" local-keys_201"
"                                                               \"values\""
" local-values_202)))"
"(values))))"
"(let-values(((ctx_203)"
"(let-values(((who104_214) who_191))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who104_214 #t)"
"(get-current-expand-context8.1 who104_214)))))"
"(let-values(((phase_204)"
"(if as-transformer?_197"
"(add1(expand-context-phase ctx_203))"
"(expand-context-phase ctx_203))))"
"(let-values(((base-local-ctx_205)"
"(let-values(((...and/local-expand.rkt:119:26_215)"
" make-local-expand-context35.1)"
"((ctx105_216) ctx_203)"
"((context106_217) context_193)"
"((phase107_218) phase_204)"
"((intdefs108_219) intdefs_195)"
"((stop-ids109_220) stop-ids_194))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" context106_217"
" intdefs108_219"
" phase107_218"
" #t"
" stop-ids109_220"
" #t"
" ctx105_216)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:119:26_215"
" keyword-procedure-extract"
" '(#:context #:intdefs #:phase #:stop-ids)"
" 3)"
" '(#:context #:intdefs #:phase #:stop-ids)"
"(list"
" context106_217"
" intdefs108_219"
" phase107_218"
" stop-ids109_220)"
" ctx105_216)))))"
"(let-values(((local-ctx_206)"
"(let-values(((the-struct_221) base-local-ctx_205))"
"(if(expand-context? the-struct_221)"
"(let-values(((user-env110_222)"
"(let-values(((lst_223)"
" local-keys_201)"
"((lst_224)"
" local-values_202))"
"(begin"
"(if(list? lst_223)"
"(void)"
"(let-values()"
"(in-list lst_223)))"
"(if(list? lst_224)"
"(void)"
"(let-values()"
"(in-list lst_224)))"
"((letrec-values(((for-loop_225)"
"(lambda(user-env_226"
" lst_227"
" lst_228)"
"(if(if(pair?"
" lst_227)"
"(pair?"
" lst_228)"
" #f)"
"(let-values(((key_229)"
"(unsafe-car"
" lst_227))"
"((value_230)"
"(unsafe-car"
" lst_228)))"
"(let-values(((user-env_231)"
"(let-values(((user-env_232)"
" user-env_226))"
"(let-values(((user-env_233)"
"(let-values()"
"(hash-set"
" user-env_232"
" key_229"
" value_230))))"
"(values"
" user-env_233)))))"
"(for-loop_225"
" user-env_231"
"(unsafe-cdr"
" lst_227)"
"(unsafe-cdr"
" lst_228))))"
" user-env_226))))"
" for-loop_225)"
"(expand-context-user-env"
" base-local-ctx_205)"
" lst_223"
" lst_224)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_221)"
"(root-expand-context-post-expansion-scope"
" the-struct_221)"
"(root-expand-context-top-level-bind-scope"
" the-struct_221)"
"(root-expand-context-all-scopes-stx"
" the-struct_221)"
"(root-expand-context-use-site-scopes"
" the-struct_221)"
"(root-expand-context-defined-syms the-struct_221)"
"(root-expand-context-frame-id the-struct_221)"
"(root-expand-context-counter the-struct_221)"
"(root-expand-context-lift-key the-struct_221)"
"(expand-context-context the-struct_221)"
"(expand-context-phase the-struct_221)"
"(expand-context-namespace the-struct_221)"
"(expand-context-env the-struct_221)"
" user-env110_222"
"(expand-context-post-expansion-scope-action"
" the-struct_221)"
"(expand-context-scopes the-struct_221)"
"(expand-context-def-ctx-scopes the-struct_221)"
"(expand-context-binding-layer the-struct_221)"
"(expand-context-reference-records the-struct_221)"
"(expand-context-only-immediate? the-struct_221)"
"(expand-context-just-once? the-struct_221)"
"(expand-context-module-begin-k the-struct_221)"
"(expand-context-need-eventually-defined"
" the-struct_221)"
"(expand-context-allow-unbound? the-struct_221)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_221)"
"(expand-context-stops the-struct_221)"
"(expand-context-current-introduction-scopes"
" the-struct_221)"
"(expand-context-declared-submodule-names"
" the-struct_221)"
"(expand-context-lifts the-struct_221)"
"(expand-context-lift-envs the-struct_221)"
"(expand-context-module-lifts the-struct_221)"
"(expand-context-require-lifts the-struct_221)"
"(expand-context-to-module-lifts the-struct_221)"
"(expand-context-requires+provides the-struct_221)"
"(expand-context-name the-struct_221)"
"(expand-context-observer the-struct_221)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context?\""
" the-struct_221)))))"
"(let-values(((input-s_207)"
"(let-values(((temp111_234)"
"(flip-introduction-scopes"
" s_192"
" ctx_203))"
"((intdefs112_235) intdefs_195))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" #f"
" #f"
" temp111_234"
" intdefs112_235)"
"(add-intdef-scopes23.1"
" temp111_234"
" intdefs112_235)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_236)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_236"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_236"
" 'enter-local)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_197"
"(let-values()"
"(let-values(((obs_237)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_237"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_237"
" 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_238)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_238"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_238"
" 'local-pre"
" input-s_207)"
"(call-expand-observe"
" obs_238"
" 'start-expand))))"
"(void)))"
"(values))))"
"(let-values(((output-s_208)"
"(if(if as-transformer?_197"
" capture-lifts?_196"
" #f)"
"(let-values()"
"(let-values(((...and/local-expand.rkt:137:22_239)"
" expand-transformer45.1)"
"((input-s113_240)"
" input-s_207)"
"((local-ctx114_241)"
" local-ctx_206)"
"((context115_242)"
" context_193)"
"((temp116_243) #f)"
"((temp117_244) #t)"
"((lift-key118_245)"
" lift-key_198)"
"((temp119_246) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-transformer45.1))"
"(expand-transformer43.1"
" temp119_246"
" #t"
" temp117_244"
" #t"
" context115_242"
" #t"
" temp116_243"
" #t"
" lift-key118_245"
" #t"
" input-s113_240"
" local-ctx114_241)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:137:22_239"
" keyword-procedure-extract"
" '(#:always-wrap?"
" #:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
" 4)"
" '(#:always-wrap?"
" #:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
"(list"
" temp119_246"
" temp117_244"
" context115_242"
" temp116_243"
" lift-key118_245)"
" input-s113_240"
" local-ctx114_241))))"
"(if as-transformer?_197"
"(let-values()"
"(let-values(((...and/local-expand.rkt:144:22_247)"
" expand-transformer45.1)"
"((input-s120_248)"
" input-s_207)"
"((local-ctx121_249)"
" local-ctx_206)"
"((context122_250)"
" context_193)"
"((temp123_251) #f)"
"((temp124_252)"
"(eq?"
" 'top-level"
" context_193))"
"((lift-key125_253)"
" lift-key_198))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-transformer45.1))"
"(expand-transformer43.1"
" #f"
" #f"
" temp124_252"
" #t"
" context122_250"
" #t"
" temp123_251"
" #t"
" lift-key125_253"
" #t"
" input-s120_248"
" local-ctx121_249)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:144:22_247"
" keyword-procedure-extract"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
" 4)"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
"(list"
" temp124_252"
" context122_250"
" temp123_251"
" lift-key125_253)"
" input-s120_248"
" local-ctx121_249))))"
"(if capture-lifts?_196"
"(let-values()"
"(let-values(((...and/local-expand.rkt:150:22_254)"
" expand/capture-lifts30.1)"
"((input-s126_255)"
" input-s_207)"
"((local-ctx127_256)"
" local-ctx_206)"
"((temp128_257) #t)"
"((lift-key129_258)"
" lift-key_198)"
"((temp130_259) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand/capture-lifts30.1))"
"(expand/capture-lifts28.1"
" temp130_259"
" #t"
" temp128_257"
" #t"
" #f"
" #f"
" lift-key129_258"
" #t"
" input-s126_255"
" local-ctx127_256)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:150:22_254"
" keyword-procedure-extract"
" '(#:always-wrap?"
" #:begin-form?"
" #:lift-key)"
" 4)"
" '(#:always-wrap?"
" #:begin-form?"
" #:lift-key)"
"(list"
" temp130_259"
" temp128_257"
" lift-key129_258)"
" input-s126_255"
" local-ctx127_256))))"
"(let-values()"
"(let-values(((input-s131_260)"
" input-s_207)"
"((local-ctx132_261)"
" local-ctx_206))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" input-s131_260"
" local-ctx132_261)"
"(expand7.1"
" input-s131_260"
" local-ctx132_261)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_262)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_262"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_262"
" 'local-post"
" output-s_208)))"
"(void)))"
"(values))))"
"(let-values(((result-s_209)"
"(flip-introduction-scopes"
" output-s_208"
" ctx_203)))"
"(begin"
"(if skip-log-exit?_200"
"(void)"
"(let-values()"
"(let-values(((obs_263)"
"(expand-context-observer"
" local-ctx_206)))"
"(if obs_263"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_263"
" 'exit-local"
" result-s_209)))"
"(void)))))"
" result-s_209))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack61.1)"
"(lambda(given-kws_264 given-args_265 who56_266 s57_267 context58_268 stop-ids59_269 intdefs54_270 intdefs55_271)"
"(let-values(((as-transformer?49_272)(if(pair? given-kws_264)(eq? '#:as-transformer?(car given-kws_264)) #f)))"
"(let-values(((as-transformer?43_273)(if as-transformer?49_272(car given-args_265)(void)))"
"((given-kws_274)(if as-transformer?49_272(cdr given-kws_264) given-kws_264))"
"((given-args_275)(if as-transformer?49_272(cdr given-args_265) given-args_265)))"
"(let-values(((capture-lifts?48_276)(if(pair? given-kws_274)(eq? '#:capture-lifts?(car given-kws_274)) #f)))"
"(let-values(((capture-lifts?42_277)(if capture-lifts?48_276(car given-args_275)(void)))"
"((given-kws_278)(if capture-lifts?48_276(cdr given-kws_274) given-kws_274))"
"((given-args_279)(if capture-lifts?48_276(cdr given-args_275) given-args_275)))"
"(let-values(((lift-key50_280)(if(pair? given-kws_278)(eq? '#:lift-key(car given-kws_278)) #f)))"
"(let-values(((lift-key44_281)(if lift-key50_280(car given-args_279)(void)))"
"((given-kws_282)(if lift-key50_280(cdr given-kws_278) given-kws_278))"
"((given-args_283)(if lift-key50_280(cdr given-args_279) given-args_279)))"
"(let-values(((local-keys52_284)(if(pair? given-kws_282)(eq? '#:local-keys(car given-kws_282)) #f)))"
"(let-values(((local-keys46_285)(if local-keys52_284(car given-args_283)(void)))"
"((given-kws_286)(if local-keys52_284(cdr given-kws_282) given-kws_282))"
"((given-args_287)(if local-keys52_284(cdr given-args_283) given-args_283)))"
"(let-values(((local-values53_288)"
"(if(pair? given-kws_286)(eq? '#:local-values(car given-kws_286)) #f)))"
"(let-values(((local-values47_289)(if local-values53_288(car given-args_287)(void)))"
"((given-kws_290)(if local-values53_288(cdr given-kws_286) given-kws_286))"
"((given-args_291)(if local-values53_288(cdr given-args_287) given-args_287)))"
"(let-values(((skip-log-exit?51_292)(pair? given-kws_290)))"
"(let-values(((skip-log-exit?45_293)(if skip-log-exit?51_292(car given-args_291)(void))))"
"(do-local-expand60.1"
" as-transformer?43_273"
" as-transformer?49_272"
" capture-lifts?42_277"
" capture-lifts?48_276"
" lift-key44_281"
" lift-key50_280"
" local-keys46_285"
" local-keys52_284"
" local-values47_289"
" local-values53_288"
" skip-log-exit?45_293"
" skip-log-exit?51_292"
" who56_266"
" s57_267"
" context58_268"
" stop-ids59_269"
" intdefs54_270"
" intdefs55_271)))))))))))))))"
"(define-values"
"(do-local-expand62.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_294 given-argc_295)"
"(if(if(>= given-argc_295 6)(<= given-argc_295 7) #f)"
"(let-values(((l1_296) given-kws_294))"
"(let-values(((l1_297)"
"(if(null? l1_296) l1_296(if(eq?(car l1_296) '#:as-transformer?)(cdr l1_296) l1_296))))"
"(let-values(((l1_298) l1_297))"
"(let-values(((l1_299)"
"(if(null? l1_298) l1_298(if(eq?(car l1_298) '#:capture-lifts?)(cdr l1_298) l1_298))))"
"(let-values(((l1_300) l1_299))"
"(let-values(((l1_301)"
"(if(null? l1_300) l1_300(if(eq?(car l1_300) '#:lift-key)(cdr l1_300) l1_300))))"
"(let-values(((l1_302) l1_301))"
"(let-values(((l1_303)"
"(if(null? l1_302)"
" l1_302"
"(if(eq?(car l1_302) '#:local-keys)(cdr l1_302) l1_302))))"
"(let-values(((l1_304) l1_303))"
"(let-values(((l1_305)"
"(if(null? l1_304)"
" l1_304"
"(if(eq?(car l1_304) '#:local-values)(cdr l1_304) l1_304))))"
"(let-values(((l1_306) l1_305))"
"(let-values(((l1_307)"
"(if(null? l1_306)"
" l1_306"
"(if(eq?(car l1_306) '#:skip-log-exit?)(cdr l1_306) l1_306))))"
"(null? l1_307)))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_308 given-args_309 who_310 s_311 context_312 stop-ids_313)"
"(unpack61.1 given-kws_308 given-args_309 who_310 s_311 context_312 stop-ids_313 #f #f))"
"((given-kws_314 given-args_315 who_316 s_317 context_318 stop-ids_319 intdefs54_320)"
"(unpack61.1 given-kws_314 given-args_315 who_316 s_317 context_318 stop-ids_319 intdefs54_320 #t)))"
" null"
" '(#:as-transformer? #:capture-lifts? #:lift-key #:local-keys #:local-values #:skip-log-exit?)"
"(let-values(((do-local-expand_321)"
"(case-lambda"
"((who_322 s_323 context_324 stop-ids_325)"
"(unpack61.1 null null who_322 s_323 context_324 stop-ids_325 #f #f))"
"((who_326 s_327 context_328 stop-ids_329 intdefs54_330)"
"(unpack61.1 null null who_326 s_327 context_328 stop-ids_329 intdefs54_330 #t)))))"
" do-local-expand_321)))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 #f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 #f #f #f #f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 #t #t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values(((s_29) s10_25))"
"(let-values(((from-s_30) from-s11_26))"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 #f #f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
"      (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values(((or-part_40) maybe-insp_39))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(void)"
"(void)"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f temp1_2 #t)"
"(new-namespace11.1 temp1_2))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) #f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((ns_9)(1/variable-reference->namespace vr_8)))(namespace-source-name ns_9)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(void)"
"(void)"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'syntax-local-expand-expression/extend-environment"
" 'syntax-local-environment-ref"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e 1/syntax-e)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source 1/syntax-source)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column 1/syntax-column)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position 1/syntax-position)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module 1/prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'syntax-local-expand-expression/extend-environment"
" 1/syntax-local-expand-expression/extend-environment))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-environment-ref 1/syntax-local-environment-ref))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry 1/namespace-module-registry))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$3 lifted/2.1$3 lifted/3.1$3 lifted/4.1$3 lifted/5.1$3)"
"(make-struct-type"
" 'declare-kernel-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'declare-kernel-module!(case-lambda((self_21 ns_22)(apply missing-kw self_21 ns_22 null))))))"
"(current-inspector)"
"(case-lambda((self_23 ns_24)(apply missing-kw self_23 ns_24 null)))))"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_25 main-ids2_26 ns5_27)"
"(let-values(((ns_28) ns5_27))"
"(let-values(((eval_29) eval1_25))"
"(let-values(((main-ids_30) main-ids2_26))"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_31) copy-runtime-module!26.1)"
"((temp51_32) '#%kernel)"
"((temp52_33) '#%runtime)"
"((temp53_34)(set-union primitive-ids main-ids_30))"
"((temp54_35)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"((ns55_36) ns_28))"
"(if(variable-reference-constant?(#%variable-reference copy-runtime-module!26.1))"
"(copy-runtime-module!24.1 #f #f temp54_35 #t ns55_36 #f #f #f #f temp53_34 #t temp52_33 #t temp51_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:23:2_31"
" keyword-procedure-extract"
" '(#:extras #:namespace #:skip #:to)"
" 3)"
" '(#:extras #:namespace #:skip #:to)"
"(list temp54_35 ns55_36 temp53_34 temp52_33)"
" temp51_32)))"
"(let-values(((...nder/boot/kernel.rkt:30:2_37) declare-reexporting-module!50.1)"
"((temp56_38) '#%kernel)"
"((temp57_39) '(#%core #%runtime #%main))"
"((ns58_40) ns_28))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns58_40 #f #f temp56_38 temp57_39)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:30:2_37"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns58_40)"
" temp56_38"
" temp57_39))))))))))"
"(define-values"
"(unpack7.1)"
"(lambda(given-kws_41 given-args_42 ns5_43)"
"(let-values(((eval1_44)(car given-args_42))"
"((given-kws_45)(cdr given-kws_41))"
"((given-args_46)(cdr given-args_42)))"
"(let-values(((main-ids2_47)(car given-args_46)))(declare-kernel-module!6.1 eval1_44 main-ids2_47 ns5_43)))))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lifted/2.1$3"
"(lambda(given-kws_48 given-argc_49)"
"(if(= given-argc_49 3)"
"(let-values(((l2_50) given-kws_48))"
"(if(pair? l2_50)"
"(if(eq?(car l2_50) '#:eval)"
"(let-values(((l2_51)(cdr l2_50)))"
"(if(pair? l2_51)(if(eq?(car l2_51) '#:main-ids)(null?(cdr l2_51)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_52 given-args_53 ns_54)(unpack7.1 given-kws_52 given-args_53 ns_54)))"
" '(#:eval #:main-ids)"
" '(#:eval #:main-ids)))"
"(define-values"
"(lifted/6.1$3 lifted/7.1$3 lifted/8.1$3 lifted/9.1$3 lifted/10.1$3)"
"(make-struct-type"
" 'copy-runtime-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'copy-runtime-module!(case-lambda((self_55 name_56)(apply missing-kw self_55 name_56 null))))))"
"(current-inspector)"
"(case-lambda((self_57 name_58)(apply missing-kw self_57 name_58 null)))))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lambda(alts12_59"
" alts19_60"
" extras13_61"
" extras20_62"
" namespace10_63"
" primitive?14_64"
" primitive?21_65"
" protected?15_66"
" protected?22_67"
" skip11_68"
" skip18_69"
" to9_70"
" to16_71"
" name23_72)"
"(let-values(((name_73) name23_72))"
"(let-values(((to-name_74)(if to16_71 to9_70 name_73)))"
"(let-values(((ns_75) namespace10_63))"
"(let-values(((skip-syms_76)(if skip18_69 skip11_68(seteq))))"
"(let-values(((alts_77)(if alts19_60 alts12_59 '#hasheq())))"
"(let-values(((extras_78)(if extras20_62 extras13_61 '#hasheq())))"
"(let-values(((primitive?_79)(if primitive?21_65 primitive?14_64 #t)))"
"(let-values(((protected?_80)(if protected?22_67 protected?15_66 #f)))"
"(let-values()"
"(let-values(((mod-name_81)(list 'quote name_73)))"
"(let-values(((prims_82)(1/primitive-table name_73)))"
"(let-values((()"
"(begin"
"(let-values(((ht_85) prims_82))"
"(begin"
"(if((lambda(ht_86)(hash? ht_86)) ht_85)"
"(void)"
"(let-values()(default-in-hash-keys ht_85)))"
"((letrec-values(((for-loop_87)"
"(lambda(fold-var_88 i_89)"
"(if i_89"
"(let-values(((sym_90)"
"(hash-iterate-key ht_85 i_89)))"
"(let-values(((fold-var_91)"
"(let-values(((fold-var_92)"
" fold-var_88))"
"(let-values(((fold-var_93)"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_90))"
"(void)))))"
"(values fold-var_93)))))"
"(for-loop_87"
" fold-var_91"
"(hash-iterate-next ht_85 i_89))))"
" fold-var_88))))"
" for-loop_87)"
"(void)"
"(hash-iterate-first ht_85))))"
"(values))))"
"(let-values(((ht_83)"
"(let-values(((ht_94) prims_82))"
"(begin"
"(if((lambda(ht_95)(hash? ht_95)) ht_94)"
"(void)"
"(let-values()(default-in-hash ht_94)))"
"((letrec-values(((for-loop_96)"
"(lambda(table_97 i_98)"
"(if i_98"
"(let-values(((sym_99 val_100)"
"(hash-iterate-key+value ht_94 i_98)))"
"(let-values(((table_101)"
"(let-values(((table_102) table_97))"
"(if(set-member?"
" skip-syms_76"
" sym_99)"
" table_102"
"(let-values(((table_103)"
" table_102))"
"(let-values(((table_104)"
"(let-values()"
"(let-values(((key_105"
" val_106)"
"(let-values()"
"(values"
" sym_99"
"(let-values(((or-part_107)"
"(hash-ref"
" alts_77"
" sym_99"
" #f)))"
"(if or-part_107"
" or-part_107"
" val_100))))))"
"(hash-set"
" table_103"
" key_105"
" val_106)))))"
"(values table_104)))))))"
"(for-loop_96"
" table_101"
"(hash-iterate-next ht_94 i_98))))"
" table_97))))"
" for-loop_96)"
" '#hasheq()"
"(hash-iterate-first ht_94))))))"
"(let-values(((ht+extras_84)"
"(let-values(((ht_108) extras_78))"
"(begin"
"(if((lambda(ht_109)(hash? ht_109)) ht_108)"
"(void)"
"(let-values()(default-in-hash ht_108)))"
"((letrec-values(((for-loop_110)"
"(lambda(ht_111 i_112)"
"(if i_112"
"(let-values(((k_113 v_114)"
"(hash-iterate-key+value"
" ht_108"
" i_112)))"
"(let-values(((ht_115)"
"(let-values(((ht_116) ht_111))"
"(let-values(((ht_117)"
"(let-values()"
"(hash-set"
" ht_116"
" k_113"
" v_114))))"
"(values ht_117)))))"
"(for-loop_110"
" ht_115"
"(hash-iterate-next ht_108 i_112))))"
" ht_111))))"
" for-loop_110)"
" ht_83"
"(hash-iterate-first ht_108))))))"
"(let-values(((...nder/boot/kernel.rkt:51:2_118) declare-hash-based-module!41.1)"
"((to-name59_119) to-name_74)"
"((ht+extras60_120) ht+extras_84)"
"((ns61_121) ns_75)"
"((primitive?62_122) primitive?_79)"
"((protected?63_123) protected?_80))"
"(if(variable-reference-constant?"
"(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns61_121"
" primitive?62_122"
" #t"
" #f"
" #f"
" protected?63_123"
" #t"
" #f"
" #f"
" to-name59_119"
" ht+extras60_120)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:51:2_118"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:protected?)"
" 4)"
" '(#:namespace #:primitive? #:protected?)"
"(list ns61_121 primitive?62_122 protected?63_123)"
" to-name59_119"
" ht+extras60_120)))))))))))))))))))"
"(define-values"
"(unpack25.1)"
"(lambda(given-kws_124 given-args_125 name23_126)"
"(let-values(((alts19_127)(if(pair? given-kws_124)(eq? '#:alts(car given-kws_124)) #f)))"
"(let-values(((alts12_128)(if alts19_127(car given-args_125)(void)))"
"((given-kws_129)(if alts19_127(cdr given-kws_124) given-kws_124))"
"((given-args_130)(if alts19_127(cdr given-args_125) given-args_125)))"
"(let-values(((extras20_131)(if(pair? given-kws_129)(eq? '#:extras(car given-kws_129)) #f)))"
"(let-values(((extras13_132)(if extras20_131(car given-args_130)(void)))"
"((given-kws_133)(if extras20_131(cdr given-kws_129) given-kws_129))"
"((given-args_134)(if extras20_131(cdr given-args_130) given-args_130)))"
"(let-values(((namespace10_135)(car given-args_134))"
"((given-kws_136)(cdr given-kws_133))"
"((given-args_137)(cdr given-args_134)))"
"(let-values(((primitive?21_138)(if(pair? given-kws_136)(eq? '#:primitive?(car given-kws_136)) #f)))"
"(let-values(((primitive?14_139)(if primitive?21_138(car given-args_137)(void)))"
"((given-kws_140)(if primitive?21_138(cdr given-kws_136) given-kws_136))"
"((given-args_141)(if primitive?21_138(cdr given-args_137) given-args_137)))"
"(let-values(((protected?22_142)"
"(if(pair? given-kws_140)(eq? '#:protected?(car given-kws_140)) #f)))"
"(let-values(((protected?15_143)(if protected?22_142(car given-args_141)(void)))"
"((given-kws_144)(if protected?22_142(cdr given-kws_140) given-kws_140))"
"((given-args_145)(if protected?22_142(cdr given-args_141) given-args_141)))"
"(let-values(((skip18_146)(if(pair? given-kws_144)(eq? '#:skip(car given-kws_144)) #f)))"
"(let-values(((skip11_147)(if skip18_146(car given-args_145)(void)))"
"((given-kws_148)(if skip18_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if skip18_146(cdr given-args_145) given-args_145)))"
"(let-values(((to16_150)(pair? given-kws_148)))"
"(let-values(((to9_151)(if to16_150(car given-args_149)(void))))"
"(copy-runtime-module!24.1"
" alts12_128"
" alts19_127"
" extras13_132"
" extras20_131"
" namespace10_135"
" primitive?14_139"
" primitive?21_138"
" protected?15_143"
" protected?22_142"
" skip11_147"
" skip18_146"
" to9_151"
" to16_150"
" name23_126))))))))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lifted/7.1$3"
"(lambda(given-kws_152 given-argc_153)"
"(if(= given-argc_153 3)"
"(subsets? '(#:namespace) given-kws_152 '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to))"
" #f))"
"(case-lambda((given-kws_154 given-args_155 name_156)(unpack25.1 given-kws_154 given-args_155 name_156)))"
" '(#:namespace)"
" '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/11.1$2 lifted/12.1$2 lifted/13.1$2 lifted/14.1$2 lifted/15.1$2)"
"(make-struct-type"
" 'declare-hash-based-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-hash-based-module!"
"(case-lambda((self_157 name_158 ht_159)(apply missing-kw self_157 name_158 ht_159 null))))))"
"(current-inspector)"
"(case-lambda((self_160 name_161 ht_162)(apply missing-kw self_160 name_161 ht_162 null)))))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lambda(namespace27_163"
" primitive?28_164"
" primitive?33_165"
" protected30_166"
" protected35_167"
" protected?29_168"
" protected?34_169"
" register-builtin?31_170"
" register-builtin?36_171"
" name37_172"
" ht38_173)"
"(let-values(((name_174) name37_172))"
"(let-values(((ht_175) ht38_173))"
"(let-values(((ns_176) namespace27_163))"
"(let-values(((primitive?_177)(if primitive?33_165 primitive?28_164 #f)))"
"(let-values(((protected?_178)(if protected?34_169 protected?29_168 #f)))"
"(let-values(((protected-syms_179)(if protected35_167 protected30_166 null)))"
"(let-values(((register-builtin?_180)(if register-builtin?36_171 register-builtin?31_170 #f)))"
"(let-values()"
"(let-values(((mpi_181)(1/module-path-index-join(list 'quote name_174) #f)))"
"(let-values(((ns64_182) ns_176)"
"((temp65_183)"
"(let-values(((...nder/boot/kernel.rkt:65:3_185) make-module39.1)"
"((temp67_186) #t)"
"((primitive?68_187) primitive?_177)"
"((temp69_188) #t)"
"((temp70_189)(not protected?_178))"
"((mpi71_190) mpi_181)"
"((temp72_191)"
"(hasheqv"
" 0"
"(let-values(((ht_193) ht_175))"
"(begin"
"(if((lambda(ht_194)(hash? ht_194)) ht_193)"
"(void)"
"(let-values()(default-in-hash-keys ht_193)))"
"((letrec-values(((for-loop_195)"
"(lambda(table_196 i_197)"
"(if i_197"
"(let-values(((sym_198)"
"(hash-iterate-key"
" ht_193"
" i_197)))"
"(let-values(((table_199)"
"(let-values(((table_200)"
" table_196))"
"(let-values(((table_201)"
"(let-values()"
"(let-values(((key_202"
" val_203)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_180"
"(let-values()"
"(register-built-in-symbol!"
" sym_198))"
"(void))"
"(values))))"
"(let-values(((binding_204)"
"(let-values(((mpi74_205)"
" mpi_181)"
"((temp75_206)"
" 0)"
"((sym76_207)"
" sym_198))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding24.1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi74_205"
" temp75_206"
" sym76_207)"
"(make-module-binding24.1"
" mpi74_205"
" temp75_206"
" sym76_207)))))"
"(values"
" sym_198"
"(if(let-values(((or-part_208)"
" protected?_178))"
"(if or-part_208"
" or-part_208"
"(member"
" sym_198"
" protected-syms_179)))"
"(provided1.1"
" binding_204"
" #t"
" #f)"
" binding_204)))))))"
"(hash-set"
" table_200"
" key_202"
" val_203)))))"
"(values table_201)))))"
"(for-loop_195"
" table_199"
"(hash-iterate-next ht_193 i_197))))"
" table_196))))"
" for-loop_195)"
" '#hash()"
"(hash-iterate-first ht_193))))))"
"((temp73_192)"
"(lambda(data-box_209"
" ns_210"
" phase-shift_211"
" phase-level_212"
" self_213"
" bulk-binding-registry_214"
" insp_215)"
"(if(= 0 phase-level_212)"
"(let-values()"
"(let-values(((ht_216) ht_175))"
"(begin"
"(if((lambda(ht_217)(hash? ht_217)) ht_216)"
"(void)"
"(let-values()(default-in-hash ht_216)))"
"((letrec-values(((for-loop_218)"
"(lambda(fold-var_219 i_220)"
"(if i_220"
"(let-values(((sym_221 val_222)"
"(hash-iterate-key+value"
" ht_216"
" i_220)))"
"(let-values(((fold-var_223)"
"(let-values(((fold-var_224)"
" fold-var_219))"
"(let-values(((fold-var_225)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_210"
" 0"
" sym_221"
" val_222))"
"(void)))))"
"(values"
" fold-var_225)))))"
"(for-loop_218"
" fold-var_223"
"(hash-iterate-next"
" ht_216"
" i_220))))"
" fold-var_219))))"
" for-loop_218)"
"(void)"
"(hash-iterate-first ht_216)))))"
"(void)))))"
"(if(variable-reference-constant?(#%variable-reference make-module39.1))"
"(make-module37.1"
" temp67_186"
" #t"
" #f"
" #f"
" temp73_192"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp70_189"
" #t"
" #f"
" #f"
" temp69_188"
" #t"
" #f"
" #f"
" primitive?68_187"
" #t"
" temp72_191"
" #f"
" #f"
" mpi71_190"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:65:3_185"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
"(list"
" temp67_186"
" temp73_192"
" temp70_189"
" temp69_188"
" primitive?68_187"
" temp72_191"
" mpi71_190)))))"
"((temp66_184)(1/module-path-index-resolve mpi_181)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!58.1))"
"(declare-module!56.1 #f #f ns64_182 temp65_183 temp66_184)"
"(declare-module!58.1 ns64_182 temp65_183 temp66_184))))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_226 given-args_227 name37_228 ht38_229)"
"(let-values(((namespace27_230)(car given-args_227))"
"((given-kws_231)(cdr given-kws_226))"
"((given-args_232)(cdr given-args_227)))"
"(let-values(((primitive?33_233)(if(pair? given-kws_231)(eq? '#:primitive?(car given-kws_231)) #f)))"
"(let-values(((primitive?28_234)(if primitive?33_233(car given-args_232)(void)))"
"((given-kws_235)(if primitive?33_233(cdr given-kws_231) given-kws_231))"
"((given-args_236)(if primitive?33_233(cdr given-args_232) given-args_232)))"
"(let-values(((protected35_237)(if(pair? given-kws_235)(eq? '#:protected(car given-kws_235)) #f)))"
"(let-values(((protected30_238)(if protected35_237(car given-args_236)(void)))"
"((given-kws_239)(if protected35_237(cdr given-kws_235) given-kws_235))"
"((given-args_240)(if protected35_237(cdr given-args_236) given-args_236)))"
"(let-values(((protected?34_241)(if(pair? given-kws_239)(eq? '#:protected?(car given-kws_239)) #f)))"
"(let-values(((protected?29_242)(if protected?34_241(car given-args_240)(void)))"
"((given-kws_243)(if protected?34_241(cdr given-kws_239) given-kws_239))"
"((given-args_244)(if protected?34_241(cdr given-args_240) given-args_240)))"
"(let-values(((register-builtin?36_245)(pair? given-kws_243)))"
"(let-values(((register-builtin?31_246)(if register-builtin?36_245(car given-args_244)(void))))"
"(declare-hash-based-module!39.1"
" namespace27_230"
" primitive?28_234"
" primitive?33_233"
" protected30_238"
" protected35_237"
" protected?29_242"
" protected?34_241"
" register-builtin?31_246"
" register-builtin?36_245"
" name37_228"
" ht38_229))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lifted/12.1$2"
"(lambda(given-kws_247 given-argc_248)"
"(if(= given-argc_248 4)"
"(subsets? '(#:namespace) given-kws_247 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" #f))"
"(case-lambda"
"((given-kws_249 given-args_250 name_251 ht_252)(unpack40.1 given-kws_249 given-args_250 name_251 ht_252)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/16.1$1 lifted/17.1$1 lifted/18.1$1 lifted/19.1$1 lifted/20.1$1)"
"(make-struct-type"
" 'declare-reexporting-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-reexporting-module!"
"(case-lambda"
"((self_253 name_254 require-names_255)(apply missing-kw self_253 name_254 require-names_255 null))))))"
"(current-inspector)"
"(case-lambda((self_256 name_257 require-names_258)(apply missing-kw self_256 name_257 require-names_258 null)))))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lambda(namespace43_259 reexport?42_260 reexport?44_261 name46_262 require-names47_263)"
"(let-values(((name_264) name46_262))"
"(let-values(((require-names_265) require-names47_263))"
"(let-values(((reexport?_266)(if reexport?44_261 reexport?42_260 #t)))"
"(let-values(((ns_267) namespace43_259))"
"(let-values()"
"(let-values(((mpi_268)(1/module-path-index-join(list 'quote name_264) #f)))"
"(let-values(((require-mpis_269)"
"(alt-reverse"
"(let-values(((lst_270) require-names_265))"
"(begin"
"(if(list? lst_270)(void)(let-values()(in-list lst_270)))"
"((letrec-values(((for-loop_271)"
"(lambda(fold-var_272 lst_273)"
"(if(pair? lst_273)"
"(let-values(((require-name_274)(unsafe-car lst_273)))"
"(let-values(((fold-var_275)"
"(let-values(((fold-var_276) fold-var_272))"
"(let-values(((fold-var_277)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_274)"
" #f))"
" fold-var_276))))"
"(values fold-var_277)))))"
"(for-loop_271 fold-var_275(unsafe-cdr lst_273))))"
" fold-var_272))))"
" for-loop_271)"
" null"
" lst_270))))))"
"(let-values(((ns77_278) ns_267)"
"((temp78_279)"
"(let-values(((...nder/boot/kernel.rkt:95:3_281) make-module39.1)"
"((temp80_282) #t)"
"((temp81_283) #t)"
"((mpi82_284) mpi_268)"
"((temp83_285)(list(cons 0 require-mpis_269)))"
"((temp84_286)"
"(if reexport?_266"
"(hasheqv"
" 0"
"(let-values(((lst_288) require-mpis_269))"
"(begin"
"(if(list? lst_288)(void)(let-values()(in-list lst_288)))"
"((letrec-values(((for-loop_289)"
"(lambda(table_290 lst_291)"
"(if(pair? lst_291)"
"(let-values(((require-mpi_292)"
"(unsafe-car lst_291)))"
"(let-values(((table_293)"
"(let-values(((m_294)"
"(namespace->module"
" ns_267"
"(1/module-path-index-resolve"
" require-mpi_292))))"
"(begin"
" #t"
"((letrec-values(((for-loop_295)"
"(lambda(table_296)"
"(let-values()"
"(let-values(((table_297)"
"(let-values(((ht_298)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_294)"
"(module-self"
" m_294)"
" require-mpi_292)"
" 0)))"
"(begin"
"(if((lambda(ht_299)"
"(hash?"
" ht_299))"
" ht_298)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_298)))"
"((letrec-values(((for-loop_300)"
"(lambda(table_301"
" i_302)"
"(if i_302"
"(let-values(((sym_303"
" binding_304)"
"(hash-iterate-key+value"
" ht_298"
" i_302)))"
"(let-values(((table_305)"
"(let-values(((table_306)"
" table_301))"
"(let-values(((table_307)"
"(let-values()"
"(let-values(((key_308"
" val_309)"
"(let-values()"
"(values"
" sym_303"
" binding_304))))"
"(hash-set"
" table_306"
" key_308"
" val_309)))))"
"(values"
" table_307)))))"
"(for-loop_300"
" table_305"
"(hash-iterate-next"
" ht_298"
" i_302))))"
" table_301))))"
" for-loop_300)"
" table_296"
"(hash-iterate-first"
" ht_298))))))"
" table_297)))))"
" for-loop_295)"
" table_290)))))"
"(for-loop_289"
" table_293"
"(unsafe-cdr lst_291))))"
" table_290))))"
" for-loop_289)"
" '#hash()"
" lst_288))))"
" '#hasheqv()))"
"((void85_287) void))"
"(if(variable-reference-constant?(#%variable-reference make-module39.1))"
"(make-module37.1"
" temp80_282"
" #t"
" #f"
" #f"
" void85_287"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_283"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp84_286"
" temp83_285"
" #t"
" mpi82_284"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:95:3_281"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
"(list temp80_282 void85_287 temp81_283 temp84_286 temp83_285 mpi82_284)))))"
"((temp79_280)(1/module-path-index-resolve mpi_268)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!58.1))"
"(declare-module!56.1 #f #f ns77_278 temp78_279 temp79_280)"
"(declare-module!58.1 ns77_278 temp78_279 temp79_280))))))))))))"
"(define-values"
"(unpack49.1)"
"(lambda(given-kws_310 given-args_311 name46_312 require-names47_313)"
"(let-values(((namespace43_314)(car given-args_311))"
"((given-kws_315)(cdr given-kws_310))"
"((given-args_316)(cdr given-args_311)))"
"(let-values(((reexport?44_317)(pair? given-kws_315)))"
"(let-values(((reexport?42_318)(if reexport?44_317(car given-args_316)(void))))"
"(declare-reexporting-module!48.1"
" namespace43_314"
" reexport?42_318"
" reexport?44_317"
" name46_312"
" require-names47_313))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lifted/17.1$1"
"(lambda(given-kws_319 given-argc_320)"
"(if(= given-argc_320 4)(subsets? '(#:namespace) given-kws_319 '(#:namespace #:reexport?)) #f))"
"(case-lambda"
"((given-kws_321 given-args_322 name_323 require-names_324)"
"(unpack49.1 given-kws_321 given-args_322 name_323 require-names_324)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(void)"
"(void)"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module-provide-protected?"
" 1/module-provide-protected?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(void)"
"(void)"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" collection-path"
" 'collection-file-path"
" collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(void)"
"(void)"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(void)"
"(void)"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_1)(TH-place-channel-ref x_1 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_2)(TH-place-channel-ref x_2 0))(lambda(x_3)(TH-place-channel-ref x_3 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(void)"
"(void)"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-accept-compiled"
" #t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(1/syntax-e exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_6)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(1/syntax-e exp_5))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_5))))"
"(let-values(((r_8)(cdr(1/syntax-e exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(1/syntax-e r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'default-load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_6)"
" #f)))))))"
"(void)"
"(void)"
"(define-values"
"(default-load-handler)"
"(lambda(path_1 expected-mod_2)"
"(begin"
"(if(path-string? path_1)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_1)))"
"(if(let-values(((or-part_3)(not expected-mod_2)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(symbol? expected-mod_2)))"
"(if or-part_4"
" or-part_4"
"(if(pair? expected-mod_2)"
"(if(list? expected-mod_2)"
"(if(let-values(((or-part_5)(not(car expected-mod_2))))"
"(if or-part_5 or-part_5(symbol?(car expected-mod_2))))"
"(andmap2 symbol?(cdr expected-mod_2))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_2)))"
"(if expected-mod_2"
"(let-values()"
"((call-with-input-module-file"
" path_1"
"(lambda(i_6)"
"(begin"
"                (if (regexp-match? '#rx\"[.]zo$\" path_1) (void) (let-values () (port-count-lines! i_6)))"
"(with-module-reading-parameterization+delay-source"
" path_1"
"(lambda()"
"(let-values(((c36651_7)(linklet-directory-start i_6)))"
"(if c36651_7"
"((lambda(pos_8)"
"(let-values(((b-pos_9)(search-directory i_6 pos_8(encode-symbols expected-mod_2))))"
"(if b-pos_9"
"(let-values()"
"(begin"
"(file-position i_6 b-pos_9)"
"(let-values(((or-part_10)(cached-bundle i_6)))"
"(if or-part_10"
" or-part_10"
"(let-values(((v_11)(read i_6)))"
"(if(1/compiled-module-expression? v_11)"
"(lambda()((current-eval) v_11))"
"(error"
" 'default-load-handler"
"                                           (string-append \"expected a compiled module\\n\" \"  in: ~e\\n\" \"  found: ~e\")"
"(object-name i_6)"
" v_11)))))))"
"(if(pair? expected-mod_2)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                   (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_6)))))))"
" c36651_7)"
"(let-values(((c36652_12)(cached-bundle i_6)))"
"(if c36652_12"
"((lambda(thunk_13) thunk_13) c36652_12)"
"(if(if(pair? expected-mod_2)(not(car expected-mod_2)) #f)"
"(let-values() void)"
"(let-values()"
"(let-values(((s_14)(1/read-syntax(object-name i_6) i_6)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_14)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                       \"expected a `module' declaration;\\n\""
"                                                       \" found end-of-file\\n\""
"                                                       \"  in: ~e\")"
"(object-name i_6)))"
"(void))"
"(values))))"
"(let-values(((m-s_15)(check-module-form s_14 path_1)))"
"(let-values(((s2_16)(1/read-syntax(object-name i_6) i_6)))"
"(begin"
"(if(eof-object? s2_16)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                               \"expected a `module' declaration;\\n\""
"                                               \" found an extra form\\n\""
"                                               \"  in: ~e\\n\""
"                                               \"  found: ~.s\")"
"(object-name i_6)"
" s2_16)))"
"(lambda()((current-eval) m-s_15))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_17)"
"(lambda(s_18)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_18))))))"
"(let-values(((path1_19) path_1)"
"((temp2_20)"
"(lambda(i_21)"
"(begin"
"(port-count-lines! i_21)"
"((letrec-values(((loop_22)"
"(lambda(vals_23)"
"(let-values(((s_24)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_1))"
"(let-values()"
"(1/read-syntax(object-name i_21) i_21)))"
"(1/read-syntax(object-name i_21) i_21))))))"
"(if(eof-object? s_24)"
"(apply values vals_23)"
"(loop_22"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_17 s_24)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_25"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_25)))))))))"
" loop_22)"
"(list(void)))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 #f #f path1_19 temp2_20)"
"(call-with-input-file*63.1 path1_19 temp2_20)))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_26 tag_27)"
"(let-values(((version-length_28)(string-length(version))))"
"(if(equal?(peek-byte i_26)(char->integer '#\\#))"
"(if(equal?(peek-byte i_26 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_26 2) version-length_28)"
"(if(equal?(peek-bytes version-length_28 3 i_26)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_26(+ 3 version-length_28))(char->integer tag_27))(+ version-length_28 4) #f)"
" #f)"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_29)(let-values(((pos_30)(linklet-bundle-or-directory-start i_29 '#\\D)))(if pos_30(+ pos_30 4) #f))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_31)"
"(let-values(((pos_32)(linklet-bundle-or-directory-start i_31 '#\\B)))"
"(let-values(((hash-code_33)(if pos_32(peek-bytes 20 pos_32 i_31) #f)))"
"(if(bytes? hash-code_33)"
"(if(= 20(bytes-length hash-code_33))"
"(if(let-values(((vec_34 len_35)"
"(let-values(((vec_36) hash-code_33))"
"(begin"
"(if(bytes? vec_36)(void)(let-values()(in-bytes vec_36)))"
"(values vec_36(bytes-length vec_36))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_37)"
"(lambda(result_38 pos_39)"
"(if(unsafe-fx< pos_39 len_35)"
"(let-values(((c_40)(bytes-ref vec_34 pos_39)))"
"(let-values(((result_41)"
"(let-values(((result_42) result_38))"
"(let-values(((result_43)"
"(let-values()"
"(let-values()(not(eq? c_40 0))))))"
"(values result_43)))))"
"(if(not((lambda x_44 result_41) c_40))"
"(for-loop_37 result_41(unsafe-fx+ 1 pos_39))"
" result_41)))"
" result_38))))"
" for-loop_37)"
" #f"
" 0)))"
" hash-code_33"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_45)"
"(let-values(((c36685_46)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_45)))))"
"(if c36685_46"
"((lambda(declare-module_47)(lambda()(declare-module_47(1/current-namespace)))) c36685_46)"
"(let-values() #f)))))"
"(define-values"
"(read-number)"
"(lambda(i_48)"
"(let-values(((read-byte/not-eof_49)"
"(lambda(i_50)(let-values(((v_51)(read-byte i_50)))(if(eof-object? v_51) 0 v_51)))))"
"(bitwise-ior"
"(read-byte/not-eof_49 i_48)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 8)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 16)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 24)))))"
"(define-values"
"(search-directory)"
"(lambda(i_52 pos_53 bstr_54)"
"(if(zero? pos_53)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_52 pos_53)(values))))"
"(let-values(((name-len_55)(read-number i_52)))"
"(let-values(((v_56)(read-bytes name-len_55 i_52)))"
"(begin"
"(if(if(bytes? v_56)(=(bytes-length v_56) name-len_55) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                      \"failure getting submodule path\\n\""
"                      \"  in: ~e\\n\""
"                      \"  at position: ~a\\n\""
"                      \"  expected bytes: ~a\\n\""
"                      \"  read bytes: ~e\")"
"(object-name i_52)"
" pos_53"
" name-len_55"
" v_56)))"
"(if(bytes=? bstr_54 v_56)"
"(let-values()(read-number i_52))"
"(if(bytes<? bstr_54 v_56)"
"(let-values()"
"(begin(read-number i_52)(read-number i_52)(search-directory i_52(read-number i_52) bstr_54)))"
"(let-values()"
"(begin"
"(read-number i_52)"
"(read-number i_52)"
"(read-number i_52)"
"(search-directory i_52(read-number i_52) bstr_54)))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_57)"
"(if(symbol? expected-mod_57)"
"      (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(alt-reverse"
"(let-values(((lst_58)(cdr expected-mod_57)))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(fold-var_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((s_62)(unsafe-car lst_61)))"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_64) fold-var_60))"
"(let-values(((fold-var_65)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_66)"
"(string->bytes/utf-8"
"(symbol->string s_62))))"
"(let-values(((len_67)"
"(bytes-length bstr_66)))"
"(if(< len_67 255)"
"(let-values()"
"(bytes-append(bytes len_67) bstr_66))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_67"
" 4"
" #f"
" #f)"
" bstr_66))))))"
" fold-var_64))))"
"(values fold-var_65)))))"
"(for-loop_59 fold-var_63(unsafe-cdr lst_61))))"
" fold-var_60))))"
" for-loop_59)"
" null"
" lst_58)))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_68 thunk_69)"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_68))"
"(let-values()(with-module-reading-parameterization thunk_69)))"
"(with-module-reading-parameterization thunk_69))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_70 proc_71)"
"(let-values(((i_72) #f))"
"(dynamic-wind"
"(lambda()"
"(set! i_72"
"(let-values(((...oot/load-handler.rkt:215:22_73) open-input-file8.1)((path3_74) path_70)((temp4_75) #t))"
"(if(variable-reference-constant?(#%variable-reference open-input-file8.1))"
"(open-input-file6.1 temp4_75 #t #f #f path3_74)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...oot/load-handler.rkt:215:22_73"
" keyword-procedure-extract"
" '(#:for-module?)"
" 3)"
" '(#:for-module?)"
"(list temp4_75)"
" path3_74)))))"
"(lambda()(proc_71 i_72))"
"(lambda()(close-input-port i_72))))))"
"(void)"
"(void)"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 #f(lambda() #f))))"
"(if v_6(cons a_5 v_6) #f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                        (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                        (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
"                                                                     (path-add-extension file_36 #\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
"                                                                       (path-add-extension alt-file_37 #\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68) alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c36816_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c36816_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c36816_71)"
"(let-values(((c36817_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c36817_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c36817_73)"
"(let-values(((c36818_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c36818_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c36818_75)"
"(let-values(((c36819_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c36819_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c36819_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) #f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) #f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box"
"(cons(cons p_92 v_93)(let-values(((or-part_97) l_96))(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" 0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_110)"
"(1/syntax-line stx_110)"
"(1/syntax-column stx_110)"
"(1/syntax-position stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) #f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry from-namespace_115)"
" #f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 #f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 #t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
"                                                                       (if (equal? (car l_137) \"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_133 \".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"                                               (if (let-values (((or-part_138) (equal? (cadr s_126) \".\")))"
"                                                     (if or-part_138 or-part_138 (equal? (cadr s_126) \"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
"                                                             (if (equal? (cadr s_126) \"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 #f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" #f))))"
" #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(1/namespace-module-registry(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" #f)"
" #f)))"
"(if or-part_159"
" or-part_159"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_157"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(1/make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_160 0(- len_161 3))"
"                                                                    \".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
"                                                                   (path-replace-extension p_162 #\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((v_166)(cadr s_126)))"
"                                                                 (if (let-values (((or-part_167) (equal? v_166 \".\")))"
"                                                                       (if or-part_167 or-part_167 (equal? v_166 \"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
"                                                                                                    \".\")))"
"(if or-part_170"
" or-part_170"
"                                                                                         (equal? (cadr s_126) \"..\")))"
" relto_127"
" #f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
"                                                                                                  \"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_126) \"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) #f))"
" #f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" #f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_176"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" #t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" #f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
"                                                                                    (if (string=? s_182 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_182 \"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" #f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_185)"
" #f)"
" #t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" #t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" #t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_173 (car s-parsed_173) \"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 0)"
"(simplify-path(cleanse-path s-parsed_173) #f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 3)"
"                                                                           (path-replace-extension name_194 #\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" #f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" #f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" #f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" #f)"
"(cons #f subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(1/eval"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))"
"(lambda(e_218 ns_219)"
"(if(eq? ns_219(1/current-namespace))"
"(c_217 e_218 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_219)"
"(let-values()(c_217 e_218 #t)))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(1/compile s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_222 in_223)"
"(begin"
"(if(input-port? in_223)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_223)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_222 in_223))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(void)"
"(void)"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader5_1)"
"(lambda(mod-path3_2 sym4_3 fail-thunk1_4 fail-thunk2_5)"
"(let-values(((mod-path_6) mod-path3_2))"
"(let-values(((sym_7) sym4_3))"
"(let-values(((fail-thunk_8)(if fail-thunk2_5 fail-thunk1_4 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_9)(namespace-root-namespace(1/current-namespace))))"
"(let-values(((proc_10)"
"(if root-ns_9"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_9)"
"(let-values()(1/dynamic-require mod-path_6 sym_7 fail-thunk_8)))"
"(1/dynamic-require mod-path_6 sym_7 fail-thunk_8))))"
"(if(if(eq? sym_7 'read-syntax)"
"(if(procedure? proc_10)(procedure-arity-includes? proc_10 6) #f)"
" #f)"
"(let-values()"
"(lambda(name_11 input_12 mod-s_13 line_14 column_15 position_16)"
"(proc_10"
" name_11"
" input_12"
"(reader-syntax->syntax mod-s_13)"
" line_14"
" column_15"
" position_16)))"
"(let-values() proc_10)))))))))))"
"(case-lambda"
"((mod-path_17 sym_18)(dynamic-require-reader5_1 mod-path_17 sym_18 #f #f))"
"((mod-path_19 sym_20 fail-thunk1_21)(dynamic-require-reader5_1 mod-path_19 sym_20 fail-thunk1_21 #t)))))"
"(void)"
"(void)"
"(define-values"
"(lifted/1.1$2 lifted/2.1$2 lifted/3.1$2 lifted/4.1$2 lifted/5.1$2)"
"(make-struct-type"
" 'expand-body"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'expand-body(case-lambda((self_16 bodys_17 ctx_18)(apply missing-kw self_16 bodys_17 ctx_18 null))))))"
"(current-inspector)"
"(case-lambda((self_19 bodys_20 ctx_21)(apply missing-kw self_19 bodys_20 ctx_21 null)))))"
"(define-values"
"(expand-body9.1)"
"(lambda(disarmed-source2_22 source1_23 stratified?3_24 stratified?6_25 bodys7_26 ctx8_27)"
"(let-values(((bodys_28) bodys7_26))"
"(let-values(((ctx_29) ctx8_27))"
"(let-values(((s_30) source1_23))"
"(let-values(((disarmed-s_31) disarmed-source2_22))"
"(let-values(((stratified?_32)(if stratified?6_25 stratified?3_24 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_42)(expand-context-observer ctx_29)))"
"(if obs_42"
"(let-values()(let-values()(call-expand-observe obs_42 'enter-block)))"
"(void)))"
"(values))))"
"(let-values(((outside-sc_33)(new-scope 'local)))"
"(let-values(((inside-sc_34)(new-scope 'intdef)))"
"(let-values(((init-bodys_35)"
"(alt-reverse"
"(let-values(((lst_43) bodys_28))"
"(begin"
"(if(list? lst_43)(void)(let-values()(in-list lst_43)))"
"((letrec-values(((for-loop_44)"
"(lambda(fold-var_45 lst_46)"
"(if(pair? lst_46)"
"(let-values(((body_47)(unsafe-car lst_46)))"
"(let-values(((fold-var_48)"
"(let-values(((fold-var_49) fold-var_45))"
"(let-values(((fold-var_50)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(add-scope"
" body_47"
" outside-sc_33)"
" inside-sc_34))"
" fold-var_49))))"
"(values fold-var_50)))))"
"(for-loop_44 fold-var_48(unsafe-cdr lst_46))))"
" fold-var_45))))"
" for-loop_44)"
" null"
" lst_43))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_51)(expand-context-observer ctx_29)))"
"(if obs_51"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_51"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_35)"
"(datum->syntax$1 #f bodys_28))))"
"(void)))"
"(values))))"
"(let-values(((phase_36)(expand-context-phase ctx_29)))"
"(let-values(((frame-id_37)(make-reference-record)))"
"(let-values(((def-ctx-scopes_38)(box null)))"
"(let-values(((body-ctx_39)"
"(let-values(((the-struct_52) ctx_29))"
"(if(expand-context? the-struct_52)"
"(let-values(((context54_53)(list(make-liberal-define-context)))"
"((name55_54) #f)"
"((only-immediate?56_55) #t)"
"((def-ctx-scopes57_56) def-ctx-scopes_38)"
"((post-expansion-scope58_57) inside-sc_34)"
"((post-expansion-scope-action59_58) add-scope)"
"((scopes60_59)"
"(list*"
" outside-sc_33"
" inside-sc_34"
"(expand-context-scopes ctx_29)))"
"((use-site-scopes61_60)(box null))"
"((frame-id62_61) frame-id_37)"
"((reference-records63_62)"
"(cons"
" frame-id_37"
"(expand-context-reference-records ctx_29))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_52)"
" post-expansion-scope58_57"
"(root-expand-context-top-level-bind-scope the-struct_52)"
"(root-expand-context-all-scopes-stx the-struct_52)"
" use-site-scopes61_60"
"(root-expand-context-defined-syms the-struct_52)"
" frame-id62_61"
"(root-expand-context-counter the-struct_52)"
"(root-expand-context-lift-key the-struct_52)"
" context54_53"
"(expand-context-phase the-struct_52)"
"(expand-context-namespace the-struct_52)"
"(expand-context-env the-struct_52)"
"(expand-context-user-env the-struct_52)"
" post-expansion-scope-action59_58"
" scopes60_59"
" def-ctx-scopes57_56"
"(expand-context-binding-layer the-struct_52)"
" reference-records63_62"
" only-immediate?56_55"
"(expand-context-just-once? the-struct_52)"
"(expand-context-module-begin-k the-struct_52)"
"(expand-context-need-eventually-defined the-struct_52)"
"(expand-context-allow-unbound? the-struct_52)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_52)"
"(expand-context-stops the-struct_52)"
"(expand-context-current-introduction-scopes the-struct_52)"
"(expand-context-declared-submodule-names the-struct_52)"
"(expand-context-lifts the-struct_52)"
"(expand-context-lift-envs the-struct_52)"
"(expand-context-module-lifts the-struct_52)"
"(expand-context-require-lifts the-struct_52)"
"(expand-context-to-module-lifts the-struct_52)"
"(expand-context-requires+provides the-struct_52)"
" name55_54"
"(expand-context-observer the-struct_52)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context?\""
" the-struct_52)))))"
"(let-values(((maybe-increment-binding-layer_40)"
"(lambda(ids_63 body-ctx_64)"
"(if(eq?"
"(expand-context-binding-layer body-ctx_64)"
"(expand-context-binding-layer ctx_29))"
"(increment-binding-layer ids_63 body-ctx_64)"
"(expand-context-binding-layer body-ctx_64)))))"
"(let-values(((name_41)(expand-context-name ctx_29)))"
"((letrec-values(((loop_65)"
"(lambda(body-ctx_66"
" bodys_67"
" done-bodys_68"
" val-idss_69"
" val-keyss_70"
" val-rhss_71"
" track-stxs_72"
" trans-idss_73"
" dups_74)"
"(if(null? bodys_67)"
"(let-values()"
"(begin"
"(let-values(((obs_75)"
"(expand-context-observer body-ctx_66)))"
"(if obs_75"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_75"
"(if(null? val-idss_69)"
" 'block->list"
" 'block->letrec))))"
"(void)))"
"(let-values(((...nder/expand/body.rkt:83:6_76)"
" finish-expanding-body32.1)"
"((body-ctx64_77) body-ctx_66)"
"((frame-id65_78) frame-id_37)"
"((def-ctx-scopes66_79) def-ctx-scopes_38)"
"((temp67_80)(alt-reverse val-idss_69))"
"((temp68_81)(alt-reverse val-keyss_70))"
"((temp69_82)(alt-reverse val-rhss_71))"
"((temp70_83)(alt-reverse track-stxs_72))"
"((temp71_84)(alt-reverse done-bodys_68))"
"((s72_85) s_30)"
"((disarmed-s73_86) disarmed-s_31)"
"((stratified?74_87) stratified?_32)"
"((name75_88) name_41)"
"((temp76_89)(alt-reverse trans-idss_73)))"
"(if(variable-reference-constant?"
"(#%variable-reference finish-expanding-body32.1))"
"(finish-expanding-body30.1"
" temp76_89"
" disarmed-s73_86"
" name75_88"
" s72_85"
" stratified?74_87"
" body-ctx64_77"
" frame-id65_78"
" def-ctx-scopes66_79"
" temp67_80"
" temp68_81"
" temp69_82"
" temp70_83"
" temp71_84)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:83:6_76"
" keyword-procedure-extract"
" '(#:disappeared-transformer-bindings"
" #:disarmed-source"
" #:name"
" #:source"
" #:stratified?)"
" 10)"
" '(#:disappeared-transformer-bindings"
" #:disarmed-source"
" #:name"
" #:source"
" #:stratified?)"
"(list"
" temp76_89"
" disarmed-s73_86"
" name75_88"
" s72_85"
" stratified?74_87)"
" body-ctx64_77"
" frame-id65_78"
" def-ctx-scopes66_79"
" temp67_80"
" temp68_81"
" temp69_82"
" temp70_83"
" temp71_84)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_92)"
"(expand-context-observer"
" body-ctx_66)))"
"(if obs_92"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_92"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_90)"
"(let-values(((temp77_93)"
"(syntax-disarm$1"
"(car bodys_67)))"
"((temp78_94)"
"(if(if name_41"
"(null?(cdr bodys_67))"
" #f)"
"(let-values(((the-struct_95)"
" body-ctx_66))"
"(if(expand-context?"
" the-struct_95)"
"(let-values(((name79_96)"
" name_41))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_95)"
"(root-expand-context-post-expansion-scope"
" the-struct_95)"
"(root-expand-context-top-level-bind-scope"
" the-struct_95)"
"(root-expand-context-all-scopes-stx"
" the-struct_95)"
"(root-expand-context-use-site-scopes"
" the-struct_95)"
"(root-expand-context-defined-syms"
" the-struct_95)"
"(root-expand-context-frame-id"
" the-struct_95)"
"(root-expand-context-counter"
" the-struct_95)"
"(root-expand-context-lift-key"
" the-struct_95)"
"(expand-context-context"
" the-struct_95)"
"(expand-context-phase"
" the-struct_95)"
"(expand-context-namespace"
" the-struct_95)"
"(expand-context-env"
" the-struct_95)"
"(expand-context-user-env"
" the-struct_95)"
"(expand-context-post-expansion-scope-action"
" the-struct_95)"
"(expand-context-scopes"
" the-struct_95)"
"(expand-context-def-ctx-scopes"
" the-struct_95)"
"(expand-context-binding-layer"
" the-struct_95)"
"(expand-context-reference-records"
" the-struct_95)"
"(expand-context-only-immediate?"
" the-struct_95)"
"(expand-context-just-once?"
" the-struct_95)"
"(expand-context-module-begin-k"
" the-struct_95)"
"(expand-context-need-eventually-defined"
" the-struct_95)"
"(expand-context-allow-unbound?"
" the-struct_95)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_95)"
"(expand-context-stops"
" the-struct_95)"
"(expand-context-current-introduction-scopes"
" the-struct_95)"
"(expand-context-declared-submodule-names"
" the-struct_95)"
"(expand-context-lifts"
" the-struct_95)"
"(expand-context-lift-envs"
" the-struct_95)"
"(expand-context-module-lifts"
" the-struct_95)"
"(expand-context-require-lifts"
" the-struct_95)"
"(expand-context-to-module-lifts"
" the-struct_95)"
"(expand-context-requires+provides"
" the-struct_95)"
" name79_96"
"(expand-context-observer"
" the-struct_95)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"expand-context?\""
" the-struct_95)))"
" body-ctx_66)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp77_93 temp78_94)"
"(expand7.1 temp77_93 temp78_94)))))"
"(let-values(((disarmed-exp-body_91)"
"(syntax-disarm$1 exp-body_90)))"
"(let-values(((tmp_97)"
"(core-form-sym"
" disarmed-exp-body_91"
" phase_36)))"
"(if(equal? tmp_97 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_113)"
"(expand-context-observer"
" body-ctx_66)))"
"(if obs_113"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_113"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_98 begin80_99 e81_100)"
"(let-values(((s_114)"
" disarmed-exp-body_91))"
"(let-values(((orig-s_115)"
" s_114))"
"(let-values(((begin80_116"
" e81_117)"
"(let-values(((s_118)"
"(if(syntax?$1"
" s_114)"
"(syntax-e$1"
" s_114)"
" s_114)))"
"(if(pair?"
" s_118)"
"(let-values(((begin82_119)"
"(let-values(((s_121)"
"(car"
" s_118)))"
" s_121))"
"((e83_120)"
"(let-values(((s_122)"
"(cdr"
" s_118)))"
"(let-values(((s_123)"
"(if(syntax?$1"
" s_122)"
"(syntax-e$1"
" s_122)"
" s_122)))"
"(let-values(((flat-s_124)"
"(to-syntax-list.1"
" s_123)))"
"(if(not"
" flat-s_124)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_115))"
"(let-values()"
" flat-s_124)))))))"
"(values"
" begin82_119"
" e83_120))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_115)))))"
"(values"
" #t"
" begin80_116"
" e81_117))))))"
"(let-values(((track_111)"
"(lambda(e_125)"
"(syntax-track-origin$1"
" e_125"
" exp-body_90))))"
"(let-values(((splice-bodys_112)"
"(append"
"(map2 track_111 e81_100)"
"(cdr bodys_67))))"
"(begin"
"(let-values(((obs_126)"
"(expand-context-observer"
" body-ctx_66)))"
"(if obs_126"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_126"
" 'splice"
" splice-bodys_112)))"
"(void)))"
"(loop_65"
" body-ctx_66"
" splice-bodys_112"
" done-bodys_68"
" val-idss_69"
" val-keyss_70"
" val-rhss_71"
" track-stxs_72"
" trans-idss_73"
" dups_74)))))))"
"(if(equal? tmp_97 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_148)"
"(expand-context-observer"
" body-ctx_66)))"
"(if obs_148"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_148"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_127"
" define-values84_128"
" id85_129"
" rhs86_130)"
"(let-values(((s_149)"
" disarmed-exp-body_91))"
"(let-values(((orig-s_150)"
" s_149))"
"(let-values(((define-values84_151"
" id85_152"
" rhs86_153)"
"(let-values(((s_154)"
"(if(syntax?$1"
" s_149)"
"(syntax-e$1"
" s_149)"
" s_149)))"
"(if(pair?"
" s_154)"
"(let-values(((define-values87_155)"
"(let-values(((s_158)"
"(car"
" s_154)))"
" s_158))"
"((id88_156"
" rhs89_157)"
"(let-values(((s_159)"
"(cdr"
" s_154)))"
"(let-values(((s_160)"
"(if(syntax?$1"
" s_159)"
"(syntax-e$1"
" s_159)"
" s_159)))"
"(if(pair?"
" s_160)"
"(let-values(((id90_161)"
"(let-values(((s_163)"
"(car"
" s_160)))"
"(let-values(((s_164)"
"(if(syntax?$1"
" s_163)"
"(syntax-e$1"
" s_163)"
" s_163)))"
"(let-values(((flat-s_165)"
"(to-syntax-list.1"
" s_164)))"
"(if(not"
" flat-s_165)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_150))"
"(let-values()"
"(let-values(((id_166)"
"(let-values(((lst_167)"
" flat-s_165))"
"(begin"
"(if(list?"
" lst_167)"
"(void)"
"(let-values()"
"(in-list"
" lst_167)))"
"((letrec-values(((for-loop_168)"
"(lambda(id_169"
" lst_170)"
"(if(pair?"
" lst_170)"
"(let-values(((s_171)"
"(unsafe-car"
" lst_170)))"
"(let-values(((id_172)"
"(let-values(((id_173)"
" id_169))"
"(let-values(((id_174)"
"(let-values()"
"(let-values(((id93_175)"
"(let-values()"
"(if(let-values(((or-part_176)"
"(if(syntax?$1"
" s_171)"
"(symbol?"
"(syntax-e$1"
" s_171))"
" #f)))"
"(if or-part_176"
" or-part_176"
"(symbol?"
" s_171)))"
" s_171"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_150"
" s_171)))))"
"(cons"
" id93_175"
" id_173)))))"
"(values"
" id_174)))))"
"(for-loop_168"
" id_172"
"(unsafe-cdr"
" lst_170))))"
" id_169))))"
" for-loop_168)"
" null"
" lst_167)))))"
"(alt-reverse"
" id_166))))))))"
"((rhs91_162)"
"(let-values(((s_177)"
"(cdr"
" s_160)))"
"(let-values(((s_178)"
"(if(syntax?$1"
" s_177)"
"(syntax-e$1"
" s_177)"
" s_177)))"
"(if(pair?"
" s_178)"
"(let-values(((rhs92_179)"
"(let-values(((s_180)"
"(car"
" s_178)))"
" s_180))"
"(()"
"(let-values(((s_181)"
"(cdr"
" s_178)))"
"(let-values(((s_182)"
"(if(syntax?$1"
" s_181)"
"(syntax-e$1"
" s_181)"
" s_181)))"
"(if(null?"
" s_182)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_150))))))"
"(values"
" rhs92_179))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_150))))))"
"(values"
" id90_161"
" rhs91_162))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_150))))))"
"(values"
" define-values87_155"
" id88_156"
" rhs89_157))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_150)))))"
"(values"
" #t"
" define-values84_151"
" id85_152"
" rhs86_153))))))"
"(let-values(((ids_143)"
"(remove-use-site-scopes"
" id85_129"
" body-ctx_66)))"
"(let-values((()"
"(begin"
"(let-values(((obs_183)"
"(expand-context-observer"
" body-ctx_66)))"
"(if obs_183"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_183"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_143"
" rhs86_130)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_144)"
"(let-values(((ids94_184)"
" ids_143)"
"((phase95_185)"
" phase_36)"
"((exp-body96_186)"
" exp-body_90)"
"((dups97_187)"
" dups_74))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids94_184"
" phase95_185"
" exp-body96_186"
" dups97_187"
" #t)"
"(check-no-duplicate-ids10.1"
" ids94_184"
" phase95_185"
" exp-body96_186"
" dups97_187)))))"
"(let-values(((counter_145)"
"(root-expand-context-counter"
" ctx_29)))"
"(let-values(((keys_146)"
"(alt-reverse"
"(let-values(((lst_188)"
" ids_143))"
"(begin"
"(if(list?"
" lst_188)"
"(void)"
"(let-values()"
"(in-list"
" lst_188)))"
"((letrec-values(((for-loop_189)"
"(lambda(fold-var_190"
" lst_191)"
"(if(pair?"
" lst_191)"
"(let-values(((id_192)"
"(unsafe-car"
" lst_191)))"
"(let-values(((fold-var_193)"
"(let-values(((fold-var_194)"
" fold-var_190))"
"(let-values(((fold-var_195)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/body.rkt:124:24_196)"
" add-local-binding!37.1)"
"((id98_197)"
" id_192)"
"((phase99_198)"
" phase_36)"
"((counter100_199)"
" counter_145)"
"((frame-id101_200)"
" frame-id_37)"
"((exp-body102_201)"
" exp-body_90))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" frame-id101_200"
" #t"
" exp-body102_201"
" #t"
" id98_197"
" phase99_198"
" counter100_199)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:124:24_196"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id101_200"
" exp-body102_201)"
" id98_197"
" phase99_198"
" counter100_199))))"
" fold-var_194))))"
"(values"
" fold-var_195)))))"
"(for-loop_189"
" fold-var_193"
"(unsafe-cdr"
" lst_191))))"
" fold-var_190))))"
" for-loop_189)"
" null"
" lst_188))))))"
"(let-values(((extended-env_147)"
"(let-values(((lst_202)"
" keys_146)"
"((lst_203)"
" ids_143))"
"(begin"
"(if(list?"
" lst_202)"
"(void)"
"(let-values()"
"(in-list"
" lst_202)))"
"(if(list?"
" lst_203)"
"(void)"
"(let-values()"
"(in-list"
" lst_203)))"
"((letrec-values(((for-loop_204)"
"(lambda(env_205"
" lst_206"
" lst_207)"
"(if(if(pair?"
" lst_206)"
"(pair?"
" lst_207)"
" #f)"
"(let-values(((key_208)"
"(unsafe-car"
" lst_206))"
"((id_209)"
"(unsafe-car"
" lst_207)))"
"(let-values(((env_210)"
"(let-values(((env_211)"
" env_205))"
"(let-values(((env_212)"
"(let-values()"
"(env-extend"
" env_211"
" key_208"
"(local-variable1.1"
" id_209)))))"
"(values"
" env_212)))))"
"(for-loop_204"
" env_210"
"(unsafe-cdr"
" lst_206)"
"(unsafe-cdr"
" lst_207))))"
" env_205))))"
" for-loop_204)"
"(expand-context-env"
" body-ctx_66)"
" lst_202"
" lst_203)))))"
"(loop_65"
"(let-values(((the-struct_213)"
" body-ctx_66))"
"(if(expand-context?"
" the-struct_213)"
"(let-values(((env103_214)"
" extended-env_147)"
"((binding-layer104_215)"
"(maybe-increment-binding-layer_40"
" ids_143"
" body-ctx_66)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_213)"
"(root-expand-context-post-expansion-scope"
" the-struct_213)"
"(root-expand-context-top-level-bind-scope"
" the-struct_213)"
"(root-expand-context-all-scopes-stx"
" the-struct_213)"
"(root-expand-context-use-site-scopes"
" the-struct_213)"
"(root-expand-context-defined-syms"
" the-struct_213)"
"(root-expand-context-frame-id"
" the-struct_213)"
"(root-expand-context-counter"
" the-struct_213)"
"(root-expand-context-lift-key"
" the-struct_213)"
"(expand-context-context"
" the-struct_213)"
"(expand-context-phase"
" the-struct_213)"
"(expand-context-namespace"
" the-struct_213)"
" env103_214"
"(expand-context-user-env"
" the-struct_213)"
"(expand-context-post-expansion-scope-action"
" the-struct_213)"
"(expand-context-scopes"
" the-struct_213)"
"(expand-context-def-ctx-scopes"
" the-struct_213)"
" binding-layer104_215"
"(expand-context-reference-records"
" the-struct_213)"
"(expand-context-only-immediate?"
" the-struct_213)"
"(expand-context-just-once?"
" the-struct_213)"
"(expand-context-module-begin-k"
" the-struct_213)"
"(expand-context-need-eventually-defined"
" the-struct_213)"
"(expand-context-allow-unbound?"
" the-struct_213)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_213)"
"(expand-context-stops"
" the-struct_213)"
"(expand-context-current-introduction-scopes"
" the-struct_213)"
"(expand-context-declared-submodule-names"
" the-struct_213)"
"(expand-context-lifts"
" the-struct_213)"
"(expand-context-lift-envs"
" the-struct_213)"
"(expand-context-module-lifts"
" the-struct_213)"
"(expand-context-require-lifts"
" the-struct_213)"
"(expand-context-to-module-lifts"
" the-struct_213)"
"(expand-context-requires+provides"
" the-struct_213)"
"(expand-context-name"
" the-struct_213)"
"(expand-context-observer"
" the-struct_213)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                  \"expand-context?\""
" the-struct_213)))"
"(cdr bodys_67)"
" null"
"(cons"
" ids_143"
"(append"
"(alt-reverse"
"(let-values(((lst_216)"
" done-bodys_68))"
"(begin"
"(if(list? lst_216)"
"(void)"
"(let-values()"
"(in-list"
" lst_216)))"
"((letrec-values(((for-loop_217)"
"(lambda(fold-var_218"
" lst_219)"
"(if(pair?"
" lst_219)"
"(let-values(((done-body_220)"
"(unsafe-car"
" lst_219)))"
"(let-values(((fold-var_221)"
"(let-values(((fold-var_222)"
" fold-var_218))"
"(let-values(((fold-var_223)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_222))))"
"(values"
" fold-var_223)))))"
"(for-loop_217"
" fold-var_221"
"(unsafe-cdr"
" lst_219))))"
" fold-var_218))))"
" for-loop_217)"
" null"
" lst_216))))"
" val-idss_69))"
"(cons"
" keys_146"
"(append"
"(alt-reverse"
"(let-values(((lst_224)"
" done-bodys_68))"
"(begin"
"(if(list? lst_224)"
"(void)"
"(let-values()"
"(in-list"
" lst_224)))"
"((letrec-values(((for-loop_225)"
"(lambda(fold-var_226"
" lst_227)"
"(if(pair?"
" lst_227)"
"(let-values(((done-body_228)"
"(unsafe-car"
" lst_227)))"
"(let-values(((fold-var_229)"
"(let-values(((fold-var_230)"
" fold-var_226))"
"(let-values(((fold-var_231)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_230))))"
"(values"
" fold-var_231)))))"
"(for-loop_225"
" fold-var_229"
"(unsafe-cdr"
" lst_227))))"
" fold-var_226))))"
" for-loop_225)"
" null"
" lst_224))))"
" val-keyss_70))"
"(cons"
" rhs86_130"
"(append"
"(alt-reverse"
"(let-values(((lst_232)"
" done-bodys_68))"
"(begin"
"(if(list? lst_232)"
"(void)"
"(let-values()"
"(in-list"
" lst_232)))"
"((letrec-values(((for-loop_233)"
"(lambda(fold-var_234"
" lst_235)"
"(if(pair?"
" lst_235)"
"(let-values(((done-body_236)"
"(unsafe-car"
" lst_235)))"
"(let-values(((fold-var_237)"
"(let-values(((fold-var_238)"
" fold-var_234))"
"(let-values(((fold-var_239)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_236"
" s_30"
" phase_36))"
" fold-var_238))))"
"(values"
" fold-var_239)))))"
"(for-loop_233"
" fold-var_237"
"(unsafe-cdr"
" lst_235))))"
" fold-var_234))))"
" for-loop_233)"
" null"
" lst_232))))"
" val-rhss_71))"
"(cons"
" exp-body_90"
"(append"
"(alt-reverse"
"(let-values(((lst_240)"
" done-bodys_68))"
"(begin"
"(if(list? lst_240)"
"(void)"
"(let-values()"
"(in-list"
" lst_240)))"
"((letrec-values(((for-loop_241)"
"(lambda(fold-var_242"
" lst_243)"
"(if(pair?"
" lst_243)"
"(let-values(((done-body_244)"
"(unsafe-car"
" lst_243)))"
"(let-values(((fold-var_245)"
"(let-values(((fold-var_246)"
" fold-var_242))"
"(let-values(((fold-var_247)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_246))))"
"(values"
" fold-var_247)))))"
"(for-loop_241"
" fold-var_245"
"(unsafe-cdr"
" lst_243))))"
" fold-var_242))))"
" for-loop_241)"
" null"
" lst_240))))"
" track-stxs_72))"
" trans-idss_73"
" new-dups_144))))))))))"
"(if(equal? tmp_97 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_270)"
"(expand-context-observer"
" body-ctx_66)))"
"(if obs_270"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_270"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_248"
" define-syntaxes105_249"
" id106_250"
" rhs107_251)"
"(let-values(((s_271)"
" disarmed-exp-body_91))"
"(let-values(((orig-s_272)"
" s_271))"
"(let-values(((define-syntaxes105_273"
" id106_274"
" rhs107_275)"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_271)"
"(syntax-e$1"
" s_271)"
" s_271)))"
"(if(pair?"
" s_276)"
"(let-values(((define-syntaxes108_277)"
"(let-values(((s_280)"
"(car"
" s_276)))"
" s_280))"
"((id109_278"
" rhs110_279)"
"(let-values(((s_281)"
"(cdr"
" s_276)))"
"(let-values(((s_282)"
"(if(syntax?$1"
" s_281)"
"(syntax-e$1"
" s_281)"
" s_281)))"
"(if(pair?"
" s_282)"
"(let-values(((id111_283)"
"(let-values(((s_285)"
"(car"
" s_282)))"
"(let-values(((s_286)"
"(if(syntax?$1"
" s_285)"
"(syntax-e$1"
" s_285)"
" s_285)))"
"(let-values(((flat-s_287)"
"(to-syntax-list.1"
" s_286)))"
"(if(not"
" flat-s_287)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_272))"
"(let-values()"
"(let-values(((id_288)"
"(let-values(((lst_289)"
" flat-s_287))"
"(begin"
"(if(list?"
" lst_289)"
"(void)"
"(let-values()"
"(in-list"
" lst_289)))"
"((letrec-values(((for-loop_290)"
"(lambda(id_291"
" lst_292)"
"(if(pair?"
" lst_292)"
"(let-values(((s_293)"
"(unsafe-car"
" lst_292)))"
"(let-values(((id_294)"
"(let-values(((id_295)"
" id_291))"
"(let-values(((id_296)"
"(let-values()"
"(let-values(((id114_297)"
"(let-values()"
"(if(let-values(((or-part_298)"
"(if(syntax?$1"
" s_293)"
"(symbol?"
"(syntax-e$1"
" s_293))"
" #f)))"
"(if or-part_298"
" or-part_298"
"(symbol?"
" s_293)))"
" s_293"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_272"
" s_293)))))"
"(cons"
" id114_297"
" id_295)))))"
"(values"
" id_296)))))"
"(for-loop_290"
" id_294"
"(unsafe-cdr"
" lst_292))))"
" id_291))))"
" for-loop_290)"
" null"
" lst_289)))))"
"(alt-reverse"
" id_288))))))))"
"((rhs112_284)"
"(let-values(((s_299)"
"(cdr"
" s_282)))"
"(let-values(((s_300)"
"(if(syntax?$1"
" s_299)"
"(syntax-e$1"
" s_299)"
" s_299)))"
"(if(pair?"
" s_300)"
"(let-values(((rhs113_301)"
"(let-values(((s_302)"
"(car"
" s_300)))"
" s_302))"
"(()"
"(let-values(((s_303)"
"(cdr"
" s_300)))"
"(let-values(((s_304)"
"(if(syntax?$1"
" s_303)"
"(syntax-e$1"
" s_303)"
" s_303)))"
"(if(null?"
" s_304)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_272))))))"
"(values"
" rhs113_301))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_272))))))"
"(values"
" id111_283"
" rhs112_284))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_272))))))"
"(values"
" define-syntaxes108_277"
" id109_278"
" rhs110_279))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_272)))))"
"(values"
" #t"
" define-syntaxes105_273"
" id106_274"
" rhs107_275))))))"
"(let-values(((ids_264)"
"(remove-use-site-scopes"
" id106_250"
" body-ctx_66)))"
"(let-values((()"
"(begin"
"(let-values(((obs_305)"
"(expand-context-observer"
" body-ctx_66)))"
"(if obs_305"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_305"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_264"
" rhs107_251)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_265)"
"(let-values(((ids115_306)"
" ids_264)"
"((phase116_307)"
" phase_36)"
"((exp-body117_308)"
" exp-body_90)"
"((dups118_309)"
" dups_74))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids115_306"
" phase116_307"
" exp-body117_308"
" dups118_309"
" #t)"
"(check-no-duplicate-ids10.1"
" ids115_306"
" phase116_307"
" exp-body117_308"
" dups118_309)))))"
"(let-values(((counter_266)"
"(root-expand-context-counter"
" ctx_29)))"
"(let-values(((keys_267)"
"(alt-reverse"
"(let-values(((lst_310)"
" ids_264))"
"(begin"
"(if(list?"
" lst_310)"
"(void)"
"(let-values()"
"(in-list"
" lst_310)))"
"((letrec-values(((for-loop_311)"
"(lambda(fold-var_312"
" lst_313)"
"(if(pair?"
" lst_313)"
"(let-values(((id_314)"
"(unsafe-car"
" lst_313)))"
"(let-values(((fold-var_315)"
"(let-values(((fold-var_316)"
" fold-var_312))"
"(let-values(((fold-var_317)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/body.rkt:167:24_318)"
" add-local-binding!37.1)"
"((id119_319)"
" id_314)"
"((phase120_320)"
" phase_36)"
"((counter121_321)"
" counter_266)"
"((frame-id122_322)"
" frame-id_37)"
"((exp-body123_323)"
" exp-body_90))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" frame-id122_322"
" #t"
" exp-body123_323"
" #t"
" id119_319"
" phase120_320"
" counter121_321)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:167:24_318"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id122_322"
" exp-body123_323)"
" id119_319"
" phase120_320"
" counter121_321))))"
" fold-var_316))))"
"(values"
" fold-var_317)))))"
"(for-loop_311"
" fold-var_315"
"(unsafe-cdr"
" lst_313))))"
" fold-var_312))))"
" for-loop_311)"
" null"
" lst_310))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_324)"
"(expand-context-observer"
" body-ctx_66)))"
"(if obs_324"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_324"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values(((vals_268)"
"(eval-for-syntaxes-binding"
" rhs107_251"
" ids_264"
" body-ctx_66)))"
"(let-values(((extended-env_269)"
"(let-values(((lst_325)"
" keys_267)"
"((lst_326)"
" vals_268)"
"((lst_327)"
" ids_264))"
"(begin"
"(if(list?"
" lst_325)"
"(void)"
"(let-values()"
"(in-list"
" lst_325)))"
"(if(list?"
" lst_326)"
"(void)"
"(let-values()"
"(in-list"
" lst_326)))"
"(if(list?"
" lst_327)"
"(void)"
"(let-values()"
"(in-list"
" lst_327)))"
"((letrec-values(((for-loop_328)"
"(lambda(env_329"
" lst_330"
" lst_331"
" lst_332)"
"(if(if(pair?"
" lst_330)"
"(if(pair?"
" lst_331)"
"(pair?"
" lst_332)"
" #f)"
" #f)"
"(let-values(((key_333)"
"(unsafe-car"
" lst_330))"
"((val_334)"
"(unsafe-car"
" lst_331))"
"((id_335)"
"(unsafe-car"
" lst_332)))"
"(let-values(((env_336)"
"(let-values(((env_337)"
" env_329))"
"(let-values(((env_338)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_334"
" id_335"
" phase_36)"
"(env-extend"
" env_337"
" key_333"
" val_334)))))"
"(values"
" env_338)))))"
"(for-loop_328"
" env_336"
"(unsafe-cdr"
" lst_330)"
"(unsafe-cdr"
" lst_331)"
"(unsafe-cdr"
" lst_332))))"
" env_329))))"
" for-loop_328)"
"(expand-context-env"
" body-ctx_66)"
" lst_325"
" lst_326"
" lst_327)))))"
"(loop_65"
"(let-values(((the-struct_339)"
" body-ctx_66))"
"(if(expand-context?"
" the-struct_339)"
"(let-values(((env124_340)"
" extended-env_269)"
"((binding-layer125_341)"
"(maybe-increment-binding-layer_40"
" ids_264"
" body-ctx_66)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_339)"
"(root-expand-context-post-expansion-scope"
" the-struct_339)"
"(root-expand-context-top-level-bind-scope"
" the-struct_339)"
"(root-expand-context-all-scopes-stx"
" the-struct_339)"
"(root-expand-context-use-site-scopes"
" the-struct_339)"
"(root-expand-context-defined-syms"
" the-struct_339)"
"(root-expand-context-frame-id"
" the-struct_339)"
"(root-expand-context-counter"
" the-struct_339)"
"(root-expand-context-lift-key"
" the-struct_339)"
"(expand-context-context"
" the-struct_339)"
"(expand-context-phase"
" the-struct_339)"
"(expand-context-namespace"
" the-struct_339)"
" env124_340"
"(expand-context-user-env"
" the-struct_339)"
"(expand-context-post-expansion-scope-action"
" the-struct_339)"
"(expand-context-scopes"
" the-struct_339)"
"(expand-context-def-ctx-scopes"
" the-struct_339)"
" binding-layer125_341"
"(expand-context-reference-records"
" the-struct_339)"
"(expand-context-only-immediate?"
" the-struct_339)"
"(expand-context-just-once?"
" the-struct_339)"
"(expand-context-module-begin-k"
" the-struct_339)"
"(expand-context-need-eventually-defined"
" the-struct_339)"
"(expand-context-allow-unbound?"
" the-struct_339)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_339)"
"(expand-context-stops"
" the-struct_339)"
"(expand-context-current-introduction-scopes"
" the-struct_339)"
"(expand-context-declared-submodule-names"
" the-struct_339)"
"(expand-context-lifts"
" the-struct_339)"
"(expand-context-lift-envs"
" the-struct_339)"
"(expand-context-module-lifts"
" the-struct_339)"
"(expand-context-require-lifts"
" the-struct_339)"
"(expand-context-to-module-lifts"
" the-struct_339)"
"(expand-context-requires+provides"
" the-struct_339)"
"(expand-context-name"
" the-struct_339)"
"(expand-context-observer"
" the-struct_339)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                        \"expand-context?\""
" the-struct_339)))"
"(cdr bodys_67)"
" done-bodys_68"
" val-idss_69"
" val-keyss_70"
" val-rhss_71"
" track-stxs_72"
"(cons"
" ids_264"
" trans-idss_73)"
" new-dups_265))))))))))))"
"(let-values()"
"(if stratified?_32"
"(let-values()"
"(loop_65"
" body-ctx_66"
" null"
"(append"
"(alt-reverse bodys_67)"
"(cons exp-body_90 done-bodys_68))"
" val-idss_69"
" val-keyss_70"
" val-rhss_71"
" track-stxs_72"
" trans-idss_73"
" dups_74))"
"(let-values()"
"(loop_65"
" body-ctx_66"
"(cdr bodys_67)"
"(cons exp-body_90 done-bodys_68)"
" val-idss_69"
" val-keyss_70"
" val-rhss_71"
" track-stxs_72"
" trans-idss_73"
" dups_74))))))))))))))))"
" loop_65)"
" body-ctx_39"
" init-bodys_35"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))))"
"(define-values"
"(unpack10.1)"
"(lambda(given-kws_342 given-args_343 bodys7_344 ctx8_345)"
"(let-values(((disarmed-source2_346)(car given-args_343))"
"((given-kws_347)(cdr given-kws_342))"
"((given-args_348)(cdr given-args_343)))"
"(let-values(((source1_349)(car given-args_348))"
"((given-kws_350)(cdr given-kws_347))"
"((given-args_351)(cdr given-args_348)))"
"(let-values(((stratified?6_352)(pair? given-kws_350)))"
"(let-values(((stratified?3_353)(if stratified?6_352(car given-args_351)(void))))"
"(expand-body9.1"
" disarmed-source2_346"
" source1_349"
" stratified?3_353"
" stratified?6_352"
" bodys7_344"
" ctx8_345)))))))"
"(define-values"
"(expand-body11.1)"
"(lifted/2.1$2"
"(lambda(given-kws_354 given-argc_355)"
"(if(= given-argc_355 4)"
"(subsets? '(#:disarmed-source #:source) given-kws_354 '(#:disarmed-source #:source #:stratified?))"
" #f))"
"(case-lambda"
"((given-kws_356 given-args_357 bodys_358 ctx_359)(unpack10.1 given-kws_356 given-args_357 bodys_358 ctx_359)))"
" '(#:disarmed-source #:source)"
" '(#:disarmed-source #:source #:stratified?)))"
"(define-values"
"(lifted/6.1$2 lifted/7.1$2 lifted/8.1$2 lifted/9.1$2 lifted/10.1$2)"
"(make-struct-type"
" 'finish-expanding-body"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'finish-expanding-body"
"(case-lambda"
"((self_360"
" body-ctx_361"
" frame-id_362"
" def-ctx-scopes_363"
" val-idss_364"
" val-keyss_365"
" val-rhss_366"
" track-stxs_367"
" done-bodys_368)"
"(apply"
" missing-kw"
" self_360"
" body-ctx_361"
" frame-id_362"
" def-ctx-scopes_363"
" val-idss_364"
" val-keyss_365"
" val-rhss_366"
" track-stxs_367"
" done-bodys_368"
" null))))))"
"(current-inspector)"
"(case-lambda"
"((self_369"
" body-ctx_370"
" frame-id_371"
" def-ctx-scopes_372"
" val-idss_373"
" val-keyss_374"
" val-rhss_375"
" track-stxs_376"
" done-bodys_377)"
"(apply"
" missing-kw"
" self_369"
" body-ctx_370"
" frame-id_371"
" def-ctx-scopes_372"
" val-idss_373"
" val-keyss_374"
" val-rhss_375"
" track-stxs_376"
" done-bodys_377"
" null)))))"
"(define-values"
"(finish-expanding-body30.1)"
"(lambda(disappeared-transformer-bindings16_378"
" disarmed-source13_379"
" name15_380"
" source12_381"
" stratified?14_382"
" body-ctx22_383"
" frame-id23_384"
" def-ctx-scopes24_385"
" val-idss25_386"
" val-keyss26_387"
" val-rhss27_388"
" track-stxs28_389"
" done-bodys29_390)"
"(let-values(((body-ctx_391) body-ctx22_383))"
"(let-values(((frame-id_392) frame-id23_384))"
"(let-values(((def-ctx-scopes_393) def-ctx-scopes24_385))"
"(let-values(((val-idss_394) val-idss25_386))"
"(let-values(((val-keyss_395) val-keyss26_387))"
"(let-values(((val-rhss_396) val-rhss27_388))"
"(let-values(((track-stxs_397) track-stxs28_389))"
"(let-values(((done-bodys_398) done-bodys29_390))"
"(let-values(((s_399) source12_381))"
"(let-values(((disarmed-s_400) disarmed-source13_379))"
"(let-values(((stratified?_401) stratified?14_382))"
"(let-values(((name_402) name15_380))"
"(let-values(((disappeared-transformer-bindings_403)"
" disappeared-transformer-bindings16_378))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_398)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                     \"no expression after a sequence of internal definitions\""
" s_399))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_404)"
"(let-values(((the-struct_406)"
"(accumulate-def-ctx-scopes"
" body-ctx_391"
" def-ctx-scopes_393)))"
"(if(expand-context? the-struct_406)"
"(let-values(((context126_407) 'expression)"
"((use-site-scopes127_408)(box null))"
"((scopes128_409)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_391))"
"(expand-context-scopes body-ctx_391)))"
"((only-immediate?129_410) #f)"
"((def-ctx-scopes130_411) #f)"
"((post-expansion-scope131_412) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_406)"
" post-expansion-scope131_412"
"(root-expand-context-top-level-bind-scope the-struct_406)"
"(root-expand-context-all-scopes-stx the-struct_406)"
" use-site-scopes127_408"
"(root-expand-context-defined-syms the-struct_406)"
"(root-expand-context-frame-id the-struct_406)"
"(root-expand-context-counter the-struct_406)"
"(root-expand-context-lift-key the-struct_406)"
" context126_407"
"(expand-context-phase the-struct_406)"
"(expand-context-namespace the-struct_406)"
"(expand-context-env the-struct_406)"
"(expand-context-user-env the-struct_406)"
"(expand-context-post-expansion-scope-action the-struct_406)"
" scopes128_409"
" def-ctx-scopes130_411"
"(expand-context-binding-layer the-struct_406)"
"(expand-context-reference-records the-struct_406)"
" only-immediate?129_410"
"(expand-context-just-once? the-struct_406)"
"(expand-context-module-begin-k the-struct_406)"
"(expand-context-need-eventually-defined the-struct_406)"
"(expand-context-allow-unbound? the-struct_406)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_406)"
"(expand-context-stops the-struct_406)"
"(expand-context-current-introduction-scopes the-struct_406)"
"(expand-context-declared-submodule-names the-struct_406)"
"(expand-context-lifts the-struct_406)"
"(expand-context-lift-envs the-struct_406)"
"(expand-context-module-lifts the-struct_406)"
"(expand-context-require-lifts the-struct_406)"
"(expand-context-to-module-lifts the-struct_406)"
"(expand-context-requires+provides the-struct_406)"
"(expand-context-name the-struct_406)"
"(expand-context-observer the-struct_406)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"expand-context?\""
" the-struct_406)))))"
"(let-values(((finish-bodys_405)"
"(lambda()"
"(let-values(((block->list?_413)(null? val-idss_394)))"
"(let-values((()"
"(begin"
"(if block->list?_413"
"(void)"
"(let-values()"
"(let-values(((obs_416)"
"(expand-context-observer"
" body-ctx_391)))"
"(if obs_416"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_416"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values((()"
"(begin"
"(if block->list?_413"
"(void)"
"(let-values()"
"(let-values(((obs_417)"
"(expand-context-observer"
" body-ctx_391)))"
"(if obs_417"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_417"
" 'prim-begin)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_414)(sub1(length done-bodys_398))))"
"(letrec-values((()"
"(begin"
"(let-values(((obs_418)"
"(expand-context-observer"
" body-ctx_391)))"
"(if obs_418"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_418"
" 'enter-list"
" exp-bodys_415)))"
"(void)))"
"(values)))"
"((exp-bodys_415)"
"(alt-reverse"
"(let-values(((lst_419) done-bodys_398)"
"((start_420) 0))"
"(begin"
"(if(list? lst_419)"
"(void)"
"(let-values()(in-list lst_419)))"
"(if(exact-nonnegative-integer?"
" start_420)"
"(void)"
"(let-values()"
"(in-naturals start_420)))"
"((letrec-values(((for-loop_421)"
"(lambda(fold-var_422"
" lst_423"
" pos_424)"
"(if(if(pair?"
" lst_423)"
" #t"
" #f)"
"(let-values(((body_425)"
"(unsafe-car"
" lst_423))"
"((i_426)"
" pos_424))"
"(let-values(((fold-var_427)"
"(let-values(((fold-var_428)"
" fold-var_422))"
"(let-values(((fold-var_429)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_430)"
"(expand-context-observer"
" body-ctx_391)))"
"(if obs_430"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_430"
" 'next)))"
"(void)))"
"(let-values(((body132_431)"
" body_425)"
"((temp133_432)"
"(if(if name_402"
"(="
" i_426"
" last-i_414)"
" #f)"
"(let-values(((the-struct_433)"
" finish-ctx_404))"
"(if(expand-context?"
" the-struct_433)"
"(let-values(((name134_434)"
" name_402))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_433)"
"(root-expand-context-post-expansion-scope"
" the-struct_433)"
"(root-expand-context-top-level-bind-scope"
" the-struct_433)"
"(root-expand-context-all-scopes-stx"
" the-struct_433)"
"(root-expand-context-use-site-scopes"
" the-struct_433)"
"(root-expand-context-defined-syms"
" the-struct_433)"
"(root-expand-context-frame-id"
" the-struct_433)"
"(root-expand-context-counter"
" the-struct_433)"
"(root-expand-context-lift-key"
" the-struct_433)"
"(expand-context-context"
" the-struct_433)"
"(expand-context-phase"
" the-struct_433)"
"(expand-context-namespace"
" the-struct_433)"
"(expand-context-env"
" the-struct_433)"
"(expand-context-user-env"
" the-struct_433)"
"(expand-context-post-expansion-scope-action"
" the-struct_433)"
"(expand-context-scopes"
" the-struct_433)"
"(expand-context-def-ctx-scopes"
" the-struct_433)"
"(expand-context-binding-layer"
" the-struct_433)"
"(expand-context-reference-records"
" the-struct_433)"
"(expand-context-only-immediate?"
" the-struct_433)"
"(expand-context-just-once?"
" the-struct_433)"
"(expand-context-module-begin-k"
" the-struct_433)"
"(expand-context-need-eventually-defined"
" the-struct_433)"
"(expand-context-allow-unbound?"
" the-struct_433)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_433)"
"(expand-context-stops"
" the-struct_433)"
"(expand-context-current-introduction-scopes"
" the-struct_433)"
"(expand-context-declared-submodule-names"
" the-struct_433)"
"(expand-context-lifts"
" the-struct_433)"
"(expand-context-lift-envs"
" the-struct_433)"
"(expand-context-module-lifts"
" the-struct_433)"
"(expand-context-require-lifts"
" the-struct_433)"
"(expand-context-to-module-lifts"
" the-struct_433)"
"(expand-context-requires+provides"
" the-struct_433)"
" name134_434"
"(expand-context-observer"
" the-struct_433)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                    \"expand-context?\""
" the-struct_433)))"
" finish-ctx_404)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" body132_431"
" temp133_432)"
"(expand7.1"
" body132_431"
" temp133_432)))))"
" fold-var_428))))"
"(values"
" fold-var_429)))))"
"(for-loop_421"
" fold-var_427"
"(unsafe-cdr"
" lst_423)"
"(+"
" pos_424"
" 1))))"
" fold-var_422))))"
" for-loop_421)"
" null"
" lst_419"
" start_420))))))"
"(begin"
"(let-values(((obs_435)"
"(expand-context-observer body-ctx_391)))"
"(if obs_435"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_435"
" 'exit-list"
" exp-bodys_415)))"
"(void)))"
" exp-bodys_415)))))))))"
"(if(if(null? val-idss_394)(null? disappeared-transformer-bindings_403) #f)"
"(let-values()(finish-bodys_405))"
"(let-values()"
"(let-values(((exp-s_436)"
"(let-values(((...nder/expand/body.rkt:256:18_437)"
" expand-and-split-bindings-by-reference53.1)"
"((val-idss135_438) val-idss_394)"
"((val-keyss136_439) val-keyss_395)"
"((val-rhss137_440) val-rhss_396)"
"((track-stxs138_441) track-stxs_397)"
"((temp139_442)(not stratified?_401))"
"((frame-id140_443) frame-id_392)"
"((finish-ctx141_444) finish-ctx_404)"
"((s142_445) s_399)"
"((disarmed-s143_446) disarmed-s_400)"
"((finish-bodys144_447) finish-bodys_405)"
"((temp145_448) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-and-split-bindings-by-reference53.1))"
"(expand-and-split-bindings-by-reference51.1"
" finish-ctx141_444"
" disarmed-s143_446"
" frame-id140_443"
" finish-bodys144_447"
" s142_445"
" temp139_442"
" temp145_448"
" val-idss135_438"
" val-keyss136_439"
" val-rhss137_440"
" track-stxs138_441)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:256:18_437"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" finish-ctx141_444"
" disarmed-s143_446"
" frame-id140_443"
" finish-bodys144_447"
" s142_445"
" temp139_442"
" temp145_448)"
" val-idss135_438"
" val-keyss136_439"
" val-rhss137_440"
" track-stxs138_441)))))"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_436"
" disappeared-transformer-bindings_403))))))))))))))))))))))))"
"(define-values"
"(unpack31.1$1)"
"(lambda(given-kws_449"
" given-args_450"
" body-ctx22_451"
" frame-id23_452"
" def-ctx-scopes24_453"
" val-idss25_454"
" val-keyss26_455"
" val-rhss27_456"
" track-stxs28_457"
" done-bodys29_458)"
"(let-values(((disappeared-transformer-bindings16_459)(car given-args_450))"
"((given-kws_460)(cdr given-kws_449))"
"((given-args_461)(cdr given-args_450)))"
"(let-values(((disarmed-source13_462)(car given-args_461))"
"((given-kws_463)(cdr given-kws_460))"
"((given-args_464)(cdr given-args_461)))"
"(let-values(((name15_465)(car given-args_464))"
"((given-kws_466)(cdr given-kws_463))"
"((given-args_467)(cdr given-args_464)))"
"(let-values(((source12_468)(car given-args_467))"
"((given-kws_469)(cdr given-kws_466))"
"((given-args_470)(cdr given-args_467)))"
"(let-values(((stratified?14_471)(car given-args_470)))"
"(finish-expanding-body30.1"
" disappeared-transformer-bindings16_459"
" disarmed-source13_462"
" name15_465"
" source12_468"
" stratified?14_471"
" body-ctx22_451"
" frame-id23_452"
" def-ctx-scopes24_453"
" val-idss25_454"
" val-keyss26_455"
" val-rhss27_456"
" track-stxs28_457"
" done-bodys29_458))))))))"
"(define-values"
"(finish-expanding-body32.1)"
"(lifted/7.1$2"
"(lambda(given-kws_472 given-argc_473)"
"(if(= given-argc_473 10)"
"(let-values(((l2_474) given-kws_472))"
"(if(pair? l2_474)"
"(if(eq?(car l2_474) '#:disappeared-transformer-bindings)"
"(let-values(((l2_475)(cdr l2_474)))"
"(if(pair? l2_475)"
"(if(eq?(car l2_475) '#:disarmed-source)"
"(let-values(((l2_476)(cdr l2_475)))"
"(if(pair? l2_476)"
"(if(eq?(car l2_476) '#:name)"
"(let-values(((l2_477)(cdr l2_476)))"
"(if(pair? l2_477)"
"(if(eq?(car l2_477) '#:source)"
"(let-values(((l2_478)(cdr l2_477)))"
"(if(pair? l2_478)(if(eq?(car l2_478) '#:stratified?)(null?(cdr l2_478)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_479"
" given-args_480"
" body-ctx_481"
" frame-id_482"
" def-ctx-scopes_483"
" val-idss_484"
" val-keyss_485"
" val-rhss_486"
" track-stxs_487"
" done-bodys_488)"
"(unpack31.1$1"
" given-kws_479"
" given-args_480"
" body-ctx_481"
" frame-id_482"
" def-ctx-scopes_483"
" val-idss_484"
" val-keyss_485"
" val-rhss_486"
" track-stxs_487"
" done-bodys_488)))"
" '(#:disappeared-transformer-bindings #:disarmed-source #:name #:source #:stratified?)"
" '(#:disappeared-transformer-bindings #:disarmed-source #:name #:source #:stratified?)))"
"(define-values"
"(lifted/11.1$1 lifted/12.1$1 lifted/13.1$1 lifted/14.1$1 lifted/15.1$1)"
"(make-struct-type"
" 'expand-and-split-bindings-by-reference"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_489 idss_490 keyss_491 rhss_492 track-stxs_493)"
"(apply missing-kw self_489 idss_490 keyss_491 rhss_492 track-stxs_493 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_494 idss_495 keyss_496 rhss_497 track-stxs_498)"
"(apply missing-kw self_494 idss_495 keyss_496 rhss_497 track-stxs_498 null)))))"
"(define-values"
"(expand-and-split-bindings-by-reference51.1)"
"(lambda(ctx35_499"
" disarmed-source37_500"
" frame-id34_501"
" get-body38_502"
" source36_503"
" split?33_504"
" track?39_505"
" idss47_506"
" keyss48_507"
" rhss49_508"
" track-stxs50_509)"
"(let-values(((idss_510) idss47_506))"
"(let-values(((keyss_511) keyss48_507))"
"(let-values(((rhss_512) rhss49_508))"
"(let-values(((track-stxs_513) track-stxs50_509))"
"(let-values(((split?_514) split?33_504))"
"(let-values(((frame-id_515) frame-id34_501))"
"(let-values(((ctx_516) ctx35_499))"
"(let-values(((s_517) source36_503))"
"(let-values(((disarmed-s_518) disarmed-source37_500))"
"(let-values(((get-body_519) get-body38_502))"
"(let-values(((track?_520) track?39_505))"
"(let-values()"
"(let-values(((s-core-stx_521)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_516))))"
"((letrec-values(((loop_522)"
"(lambda(idss_523"
" keyss_524"
" rhss_525"
" track-stxs_526"
" accum-idss_527"
" accum-rhss_528"
" accum-track-stxs_529"
" track?_530"
" get-list?_531)"
"(if(null? idss_523)"
"(let-values()"
"(if(if(null? accum-idss_527) get-list?_531 #f)"
"(let-values()(get-body_519))"
"(let-values()"
"(let-values(((result-s_532)"
"(let-values(((...nder/expand/body.rkt:290:10_533)"
" rebuild53.1)"
"((track?146_534) track?_530)"
"((s147_535) s_517)"
"((disarmed-s148_536)"
" disarmed-s_518)"
"((temp149_537)"
"(list*"
"(if(null? accum-idss_527)"
"(datum->syntax$1"
" s-core-stx_521"
" 'let-values)"
"(datum->syntax$1"
" s-core-stx_521"
" 'letrec-values))"
"(build-clauses"
" accum-idss_527"
" accum-rhss_528"
" accum-track-stxs_529)"
"(get-body_519))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" track?146_534"
" #t"
" s147_535"
" disarmed-s148_536"
" temp149_537)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:290:10_533"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?146_534)"
" s147_535"
" disarmed-s148_536"
" temp149_537)))))"
"(begin"
"(if track?_530"
"(let-values()"
"(let-values(((obs_538)"
"(expand-context-observer ctx_516)))"
"(if obs_538"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_538"
" 'tag"
" result-s_532)))"
"(void))))"
"(void))"
"(if get-list?_531(list result-s_532) result-s_532))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_544)"
"(expand-context-observer ctx_516)))"
"(if obs_544"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_544 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_539)(car idss_523)))"
"(let-values(((expanded-rhs_540)"
"(let-values(((temp150_545)(car rhss_525))"
"((temp151_546)"
"(as-named-context"
" ctx_516"
" ids_539)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp150_545 temp151_546)"
"(expand7.1 temp150_545 temp151_546)))))"
"(let-values(((track-stx_541)(car track-stxs_526)))"
"(let-values(((local-or-forward-references?_542)"
"(reference-record-forward-references?"
" frame-id_515)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_515"
"(car keyss_524))"
"(values))))"
"(let-values(((forward-references?_543)"
"(reference-record-forward-references?"
" frame-id_515)))"
"(if(if(not local-or-forward-references?_542)"
" split?_514"
" #f)"
"(let-values()"
"(begin"
"(if(null? accum-idss_527)"
"(void)"
"(let-values()"
"(error"
"                                                                               \"internal error: accumulated ids not empty\")))"
"((if get-list?_531 list values)"
"(let-values(((...nder/expand/body.rkt:316:9_547)"
" rebuild53.1)"
"((track?152_548) track?_530)"
"((s153_549) s_517)"
"((disarmed-s154_550)"
" disarmed-s_518)"
"((temp155_551)"
"(list*"
"(datum->syntax$1"
" s-core-stx_521"
" 'let-values)"
"(list"
"(build-clause"
" ids_539"
" expanded-rhs_540"
" track-stx_541))"
"(loop_522"
"(cdr idss_523)"
"(cdr keyss_524)"
"(cdr rhss_525)"
"(cdr track-stxs_526)"
" null"
" null"
" null"
" #f"
" #t))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" track?152_548"
" #t"
" s153_549"
" disarmed-s154_550"
" temp155_551)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:316:9_547"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?152_548)"
" s153_549"
" disarmed-s154_550"
" temp155_551))))))"
"(if(if(not forward-references?_543)"
"(let-values(((or-part_552) split?_514))"
"(if or-part_552"
" or-part_552"
"(null?(cdr idss_523))))"
" #f)"
"(let-values()"
"((if get-list?_531 list values)"
"(let-values(((...nder/expand/body.rkt:327:9_553)"
" rebuild53.1)"
"((track?156_554) track?_530)"
"((s157_555) s_517)"
"((disarmed-s158_556)"
" disarmed-s_518)"
"((temp159_557)"
"(list*"
"(datum->syntax$1"
" s-core-stx_521"
" 'letrec-values)"
"(build-clauses"
"(cons ids_539 accum-idss_527)"
"(cons"
" expanded-rhs_540"
" accum-rhss_528)"
"(cons"
" track-stx_541"
" accum-track-stxs_529))"
"(loop_522"
"(cdr idss_523)"
"(cdr keyss_524)"
"(cdr rhss_525)"
"(cdr track-stxs_526)"
" null"
" null"
" null"
" #f"
" #t))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" track?156_554"
" #t"
" s157_555"
" disarmed-s158_556"
" temp159_557)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/body.rkt:327:9_553"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?156_554)"
" s157_555"
" disarmed-s158_556"
" temp159_557)))))"
"(let-values()"
"(loop_522"
"(cdr idss_523)"
"(cdr keyss_524)"
"(cdr rhss_525)"
"(cdr track-stxs_526)"
"(cons ids_539 accum-idss_527)"
"(cons expanded-rhs_540 accum-rhss_528)"
"(cons track-stx_541 accum-track-stxs_529)"
" track?_530"
" get-list?_531))))))))))))))))"
" loop_522)"
" idss_510"
" keyss_511"
" rhss_512"
" track-stxs_513"
" null"
" null"
" null"
" track?_520"
" #f))))))))))))))))"
"(define-values"
"(unpack52.1)"
"(lambda(given-kws_558 given-args_559 idss47_560 keyss48_561 rhss49_562 track-stxs50_563)"
"(let-values(((ctx35_564)(car given-args_559))"
"((given-kws_565)(cdr given-kws_558))"
"((given-args_566)(cdr given-args_559)))"
"(let-values(((disarmed-source37_567)(car given-args_566))"
"((given-kws_568)(cdr given-kws_565))"
"((given-args_569)(cdr given-args_566)))"
"(let-values(((frame-id34_570)(car given-args_569))"
"((given-kws_571)(cdr given-kws_568))"
"((given-args_572)(cdr given-args_569)))"
"(let-values(((get-body38_573)(car given-args_572))"
"((given-kws_574)(cdr given-kws_571))"
"((given-args_575)(cdr given-args_572)))"
"(let-values(((source36_576)(car given-args_575))"
"((given-kws_577)(cdr given-kws_574))"
"((given-args_578)(cdr given-args_575)))"
"(let-values(((split?33_579)(car given-args_578))"
"((given-kws_580)(cdr given-kws_577))"
"((given-args_581)(cdr given-args_578)))"
"(let-values(((track?39_582)(car given-args_581)))"
"(expand-and-split-bindings-by-reference51.1"
" ctx35_564"
" disarmed-source37_567"
" frame-id34_570"
" get-body38_573"
" source36_576"
" split?33_579"
" track?39_582"
" idss47_560"
" keyss48_561"
" rhss49_562"
" track-stxs50_563))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference53.1)"
"(lifted/12.1$1"
"(lambda(given-kws_583 given-argc_584)"
"(if(= given-argc_584 6)"
"(let-values(((l2_585) given-kws_583))"
"(if(pair? l2_585)"
"(if(eq?(car l2_585) '#:ctx)"
"(let-values(((l2_586)(cdr l2_585)))"
"(if(pair? l2_586)"
"(if(eq?(car l2_586) '#:disarmed-source)"
"(let-values(((l2_587)(cdr l2_586)))"
"(if(pair? l2_587)"
"(if(eq?(car l2_587) '#:frame-id)"
"(let-values(((l2_588)(cdr l2_587)))"
"(if(pair? l2_588)"
"(if(eq?(car l2_588) '#:get-body)"
"(let-values(((l2_589)(cdr l2_588)))"
"(if(pair? l2_589)"
"(if(eq?(car l2_589) '#:source)"
"(let-values(((l2_590)(cdr l2_589)))"
"(if(pair? l2_590)"
"(if(eq?(car l2_590) '#:split?)"
"(let-values(((l2_591)(cdr l2_590)))"
"(if(pair? l2_591)"
"(if(eq?(car l2_591) '#:track?)(null?(cdr l2_591)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_592 given-args_593 idss_594 keyss_595 rhss_596 track-stxs_597)"
"(unpack52.1 given-kws_592 given-args_593 idss_594 keyss_595 rhss_596 track-stxs_597)))"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_598 accum-rhss_599 accum-track-stxs_600)"
"(map2 build-clause(alt-reverse accum-idss_598)(alt-reverse accum-rhss_599)(alt-reverse accum-track-stxs_600))))"
"(define-values"
"(build-clause)"
"(lambda(ids_601 rhs_602 track-stx_603)"
"(let-values(((clause_604)(datum->syntax$1 #f(list ids_601 rhs_602))))"
"(if track-stx_603(syntax-track-origin$1 clause_604 track-stx_603) clause_604))))"
"(define-values"
"(no-binds)"
"(lambda(expr_605 s_606 phase_607)"
"(let-values(((s-core-stx_608)(syntax-shift-phase-level$1 core-stx phase_607)))"
"(let-values(((s-runtime-stx_609)(syntax-shift-phase-level$1 runtime-stx phase_607)))"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1 s-core-stx_608 'begin)"
" expr_605"
"(list(datum->syntax$1 s-core-stx_608 '#%app)(datum->syntax$1 s-runtime-stx_609 'values)))"
" s_606)))))"
"(void)"
"(void)"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_11 disarmed-s_12 formals_13 bodys_14 ctx_15 log-renames-tag_16)"
"(let-values(((sc_17)(new-scope 'local)))"
"(let-values(((phase_18)(expand-context-phase ctx_15)))"
"(let-values(((ids_19)(parse-and-flatten-formals formals_13 sc_17 disarmed-s_12)))"
"(let-values((()"
"(begin"
"(let-values(((...nder/expand/expr.rkt:36:2_27) check-no-duplicate-ids10.1)"
"((ids30_28) ids_19)"
"((phase31_29) phase_18)"
"((s32_30) s_11)"
"                                       ((temp33_31) \"argument name\"))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 temp33_31 #t ids30_28 phase31_29 s32_30 #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:36:2_27"
" keyword-procedure-extract"
" '(#:what)"
" 5)"
" '(#:what)"
"(list temp33_31)"
" ids30_28"
" phase31_29"
" s32_30)))"
"(values))))"
"(let-values(((counter_20)(root-expand-context-counter ctx_15)))"
"(let-values(((keys_21)"
"(alt-reverse"
"(let-values(((lst_32) ids_19))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((id_36)(unsafe-car lst_35)))"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38) fold-var_34))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:41:17_40)"
" add-local-binding!37.1)"
"((id34_41)"
" id_36)"
"((phase35_42)"
" phase_18)"
"((counter36_43)"
" counter_20)"
"((s37_44)"
" s_11))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" #f"
" #f"
" s37_44"
" #t"
" id34_41"
" phase35_42"
" counter36_43)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:41:17_40"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list s37_44)"
" id34_41"
" phase35_42"
" counter36_43))))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(for-loop_33 fold-var_37(unsafe-cdr lst_35))))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32))))))"
"(let-values(((body-env_22)"
"(let-values(((lst_45) keys_21)((lst_46) ids_19))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"(if(list? lst_46)(void)(let-values()(in-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(env_48 lst_49 lst_50)"
"(if(if(pair? lst_49)(pair? lst_50) #f)"
"(let-values(((key_51)(unsafe-car lst_49))"
"((id_52)(unsafe-car lst_50)))"
"(let-values(((env_53)"
"(let-values(((env_54) env_48))"
"(let-values(((env_55)"
"(let-values()"
"(env-extend"
" env_54"
" key_51"
"(local-variable1.1 id_52)))))"
"(values env_55)))))"
"(for-loop_47"
" env_53"
"(unsafe-cdr lst_49)"
"(unsafe-cdr lst_50))))"
" env_48))))"
" for-loop_47)"
"(expand-context-env ctx_15)"
" lst_45"
" lst_46)))))"
"(let-values(((sc-formals_23)(add-scope formals_13 sc_17)))"
"(let-values(((sc-bodys_24)"
"(alt-reverse"
"(let-values(((lst_56) bodys_14))"
"(begin"
"(if(list? lst_56)(void)(let-values()(in-list lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58 lst_59)"
"(if(pair? lst_59)"
"(let-values(((body_60)(unsafe-car lst_59)))"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62) fold-var_58))"
"(let-values(((fold-var_63)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_60"
" sc_17))"
" fold-var_62))))"
"(values fold-var_63)))))"
"(for-loop_57 fold-var_61(unsafe-cdr lst_59))))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_56))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_64)(expand-context-observer ctx_15)))"
"(if obs_64"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_64"
" log-renames-tag_16"
" sc-formals_23"
"(datum->syntax$1 #f sc-bodys_24))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_25)"
"(let-values(((the-struct_65) ctx_15))"
"(if(expand-context? the-struct_65)"
"(let-values(((env38_66) body-env_22)"
"((scopes39_67)(cons sc_17(expand-context-scopes ctx_15)))"
"((binding-layer40_68)(increment-binding-layer ids_19 ctx_15))"
"((frame-id41_69) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_65)"
"(root-expand-context-post-expansion-scope the-struct_65)"
"(root-expand-context-top-level-bind-scope the-struct_65)"
"(root-expand-context-all-scopes-stx the-struct_65)"
"(root-expand-context-use-site-scopes the-struct_65)"
"(root-expand-context-defined-syms the-struct_65)"
" frame-id41_69"
"(root-expand-context-counter the-struct_65)"
"(root-expand-context-lift-key the-struct_65)"
"(expand-context-context the-struct_65)"
"(expand-context-phase the-struct_65)"
"(expand-context-namespace the-struct_65)"
" env38_66"
"(expand-context-user-env the-struct_65)"
"(expand-context-post-expansion-scope-action the-struct_65)"
" scopes39_67"
"(expand-context-def-ctx-scopes the-struct_65)"
" binding-layer40_68"
"(expand-context-reference-records the-struct_65)"
"(expand-context-only-immediate? the-struct_65)"
"(expand-context-just-once? the-struct_65)"
"(expand-context-module-begin-k the-struct_65)"
"(expand-context-need-eventually-defined the-struct_65)"
"(expand-context-allow-unbound? the-struct_65)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_65)"
"(expand-context-stops the-struct_65)"
"(expand-context-current-introduction-scopes the-struct_65)"
"(expand-context-declared-submodule-names the-struct_65)"
"(expand-context-lifts the-struct_65)"
"(expand-context-lift-envs the-struct_65)"
"(expand-context-module-lifts the-struct_65)"
"(expand-context-require-lifts the-struct_65)"
"(expand-context-to-module-lifts the-struct_65)"
"(expand-context-requires+provides the-struct_65)"
"(expand-context-name the-struct_65)"
"(expand-context-observer the-struct_65)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_65)))))"
"(let-values(((exp-body_26)"
"(let-values(((...nder/expand/expr.rkt:54:19_70) expand-body11.1)"
"((sc-bodys42_71) sc-bodys_24)"
"((body-ctx43_72) body-ctx_25)"
"((s44_73) s_11)"
"((disarmed-s45_74) disarmed-s_12))"
"(if(variable-reference-constant?(#%variable-reference expand-body11.1))"
"(expand-body9.1 disarmed-s45_74 s44_73 #f #f sc-bodys42_71 body-ctx43_72)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:54:19_70"
" keyword-procedure-extract"
" '(#:disarmed-source #:source)"
" 4)"
" '(#:disarmed-source #:source)"
"(list disarmed-s45_74 s44_73)"
" sc-bodys42_71"
" body-ctx43_72)))))"
"(values sc-formals_23 exp-body_26)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_75)"
"(lambda(s_76 ctx_77)"
"(let-values((()"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_77)))"
"(if obs_97(let-values()(let-values()(call-expand-observe obs_97 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_78)(syntax-disarm$1 s_76)))"
"(let-values(((ok?_79 lambda46_80 formals47_81 body48_82)"
"(let-values(((s_98) disarmed-s_78))"
"(let-values(((orig-s_99) s_98))"
"(let-values(((lambda46_100 formals47_101 body48_102)"
"(let-values(((s_103)(if(syntax?$1 s_98)(syntax-e$1 s_98) s_98)))"
"(if(pair? s_103)"
"(let-values(((lambda49_104)(let-values(((s_107)(car s_103))) s_107))"
"((formals50_105 body51_106)"
"(let-values(((s_108)(cdr s_103)))"
"(let-values(((s_109)"
"(if(syntax?$1 s_108)"
"(syntax-e$1 s_108)"
" s_108)))"
"(if(pair? s_109)"
"(let-values(((formals52_110)"
"(let-values(((s_112)(car s_109)))"
" s_112))"
"((body53_111)"
"(let-values(((s_113)(cdr s_109)))"
"(let-values(((s_114)"
"(if(syntax?$1 s_113)"
"(syntax-e$1 s_113)"
" s_113)))"
"(let-values(((flat-s_115)"
"(to-syntax-list.1"
" s_114)))"
"(if(not flat-s_115)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_99))"
"(if(null? flat-s_115)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_99))"
"(let-values()"
" flat-s_115))))))))"
"(values formals52_110 body53_111))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_99))))))"
"(values lambda49_104 formals50_105 body51_106))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_99)))))"
"(values #t lambda46_100 formals47_101 body48_102))))))"
"(let-values(((formals_95 body_96)"
"(lambda-clause-expander s_76 disarmed-s_78 formals47_81 body48_82 ctx_77 'lambda-renames)))"
"(let-values(((s54_116) s_76)"
"((disarmed-s55_117) disarmed-s_78)"
"((temp56_118)(list*(get-lambda_75 ctx_77 lambda46_80) formals_95 body_96)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s54_116 disarmed-s55_117 temp56_118)"
"(rebuild53.1 s54_116 disarmed-s55_117 temp56_118))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_119 lam-id_120) lam-id_120))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_121 lam-id_122)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_121))"
" 'lambda"
" lam-id_122"
" lam-id_122)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_123 ctx_124)"
"(let-values((()"
"(begin"
"(let-values(((obs_155)(expand-context-observer ctx_124)))"
"(if obs_155"
"(let-values()(let-values()(call-expand-observe obs_155 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_125)(syntax-disarm$1 s_123)))"
"(let-values(((ok?_126 case-lambda57_127 formals58_128 body59_129)"
"(let-values(((s_156) disarmed-s_125))"
"(let-values(((orig-s_157) s_156))"
"(let-values(((case-lambda57_158 formals58_159 body59_160)"
"(let-values(((s_161)(if(syntax?$1 s_156)(syntax-e$1 s_156) s_156)))"
"(if(pair? s_161)"
"(let-values(((case-lambda60_162)"
"(let-values(((s_165)(car s_161))) s_165))"
"((formals61_163 body62_164)"
"(let-values(((s_166)(cdr s_161)))"
"(let-values(((s_167)"
"(if(syntax?$1 s_166)"
"(syntax-e$1 s_166)"
" s_166)))"
"(let-values(((flat-s_168)(to-syntax-list.1 s_167)))"
"(if(not flat-s_168)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_157))"
"(let-values()"
"(let-values(((formals_169 body_170)"
"(let-values(((lst_171)"
" flat-s_168))"
"(begin"
"(if(list? lst_171)"
"(void)"
"(let-values()"
"(in-list lst_171)))"
"((letrec-values(((for-loop_172)"
"(lambda(formals_173"
" body_174"
" lst_175)"
"(if(pair?"
" lst_175)"
"(let-values(((s_176)"
"(unsafe-car"
" lst_175)))"
"(let-values(((formals_177"
" body_178)"
"(let-values(((formals_179)"
" formals_173)"
"((body_180)"
" body_174))"
"(let-values(((formals_181"
" body_182)"
"(let-values()"
"(let-values(((formals72_183"
" body73_184)"
"(let-values()"
"(let-values(((s_185)"
"(if(syntax?$1"
" s_176)"
"(syntax-e$1"
" s_176)"
" s_176)))"
"(if(pair?"
" s_185)"
"(let-values(((formals63_186)"
"(let-values(((s_188)"
"(car"
" s_185)))"
" s_188))"
"((body64_187)"
"(let-values(((s_189)"
"(cdr"
" s_185)))"
"(let-values(((s_190)"
"(if(syntax?$1"
" s_189)"
"(syntax-e$1"
" s_189)"
" s_189)))"
"(let-values(((flat-s_191)"
"(to-syntax-list.1"
" s_190)))"
"(if(not"
" flat-s_191)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_157))"
"(if(null?"
" flat-s_191)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_157))"
"(let-values()"
" flat-s_191))))))))"
"(values"
" formals63_186"
" body64_187))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_157))))))"
"(values"
"(cons"
" formals72_183"
" formals_179)"
"(cons"
" body73_184"
" body_180))))))"
"(values"
" formals_181"
" body_182)))))"
"(for-loop_172"
" formals_177"
" body_178"
"(unsafe-cdr"
" lst_175))))"
"(values"
" formals_173"
" body_174)))))"
" for-loop_172)"
" null"
" null"
" lst_171)))))"
"(values"
"(alt-reverse formals_169)"
"(alt-reverse body_170))))))))))"
"(values case-lambda60_162 formals61_163 body62_164))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_157)))))"
"(values #t case-lambda57_158 formals58_159 body59_160))))))"
"(let-values(((ok?_142 case-lambda65_143 clause66_144)"
"(let-values(((s_192) disarmed-s_125))"
"(let-values(((orig-s_193) s_192))"
"(let-values(((case-lambda65_194 clause66_195)"
"(let-values(((s_196)(if(syntax?$1 s_192)(syntax-e$1 s_192) s_192)))"
"(if(pair? s_196)"
"(let-values(((case-lambda67_197)"
"(let-values(((s_199)(car s_196))) s_199))"
"((clause68_198)"
"(let-values(((s_200)(cdr s_196)))"
"(let-values(((s_201)"
"(if(syntax?$1 s_200)"
"(syntax-e$1 s_200)"
" s_200)))"
"(let-values(((flat-s_202)(to-syntax-list.1 s_201)))"
"(if(not flat-s_202)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_193))"
"(let-values() flat-s_202)))))))"
"(values case-lambda67_197 clause68_198))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_193)))))"
"(values #t case-lambda65_194 clause66_195))))))"
"(let-values(((s69_203) s_123)"
"((disarmed-s70_204) disarmed-s_125)"
"((temp71_205)"
"(list*"
" case-lambda57_127"
"(alt-reverse"
"(let-values(((lst_206) formals58_128)((lst_207) body59_129)((lst_208) clause66_144))"
"(begin"
"(if(list? lst_206)(void)(let-values()(in-list lst_206)))"
"(if(list? lst_207)(void)(let-values()(in-list lst_207)))"
"(if(list? lst_208)(void)(let-values()(in-list lst_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(fold-var_210 lst_211 lst_212 lst_213)"
"(if(if(pair? lst_211)"
"(if(pair? lst_212)(pair? lst_213) #f)"
" #f)"
"(let-values(((formals_214)(unsafe-car lst_211))"
"((body_215)(unsafe-car lst_212))"
"((clause_216)(unsafe-car lst_213)))"
"(let-values(((fold-var_217)"
"(let-values(((fold-var_218) fold-var_210))"
"(let-values(((fold-var_219)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_222)"
"(expand-context-observer"
" ctx_124)))"
"(if obs_222"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_222"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-formals_220"
" exp-body_221)"
"(lambda-clause-expander"
" s_123"
" disarmed-s_125"
" formals_214"
" body_215"
" ctx_124"
" 'case-lambda-renames)))"
"(let-values(((clause74_223)"
" clause_216)"
"((clause75_224)"
" clause_216)"
"((temp76_225)"
"(list*"
" exp-formals_220"
" exp-body_221)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" clause74_223"
" clause75_224"
" temp76_225)"
"(rebuild53.1"
" clause74_223"
" clause75_224"
" temp76_225))))))"
" fold-var_218))))"
"(values fold-var_219)))))"
"(for-loop_209"
" fold-var_217"
"(unsafe-cdr lst_211)"
"(unsafe-cdr lst_212)"
"(unsafe-cdr lst_213))))"
" fold-var_210))))"
" for-loop_209)"
" null"
" lst_206"
" lst_207"
" lst_208)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s69_203 disarmed-s70_204 temp71_205)"
"(rebuild53.1 s69_203 disarmed-s70_204 temp71_205))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_226 sc_227 s_228)"
"((letrec-values(((loop_229)"
"(lambda(formals_230)"
"(if(identifier? formals_230)"
"(let-values()(list(add-scope formals_230 sc_227)))"
"(if(syntax?$1 formals_230)"
"(let-values()"
"(let-values(((p_231)(syntax-e$1 formals_230)))"
"(if(pair? p_231)"
"(let-values()(loop_229 p_231))"
"(if(null? p_231)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_228 p_231))))))"
"(if(pair? formals_230)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_230))"
"(void)"
"(let-values()"
"                                      (raise-syntax-error$1 #f \"not an identifier\" s_228 (car formals_230))))"
"(cons(add-scope(car formals_230) sc_227)(loop_229(cdr formals_230)))))"
"(if(null? formals_230)"
"(let-values() null)"
"(let-values()"
"                                  (raise-syntax-error$1 \"bad argument sequence\" s_228 all-formals_226)))))))))"
" loop_229)"
" all-formals_226)))"
"(define-values"
"(lifted/1.1$1 lifted/2.1$1 lifted/3.1$1 lifted/4.1$1 lifted/5.1$1)"
"(make-struct-type"
" 'make-let-values-form"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-let-values-form(case-lambda((self_232)(apply missing-kw self_232 null))))))"
"(current-inspector)"
"(case-lambda((self_233)(apply missing-kw self_233 null)))))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_234"
" rec?3_235"
" rec?8_236"
" renames-log-tag5_237"
" renames-log-tag10_238"
" split-by-reference?4_239"
" split-by-reference?9_240"
" syntaxes?2_241"
" syntaxes?7_242)"
"(let-values(((log-tag_243) log-tag1_234))"
"(let-values(((syntaxes?_244)(if syntaxes?7_242 syntaxes?2_241 #f)))"
"(let-values(((rec?_245)(if rec?8_236 rec?3_235 #f)))"
"(let-values(((split-by-reference?_246)(if split-by-reference?9_240 split-by-reference?4_239 #f)))"
"(let-values(((renames-log-tag_247)(if renames-log-tag10_238 renames-log-tag5_237 'let-renames)))"
"(let-values()"
"(lambda(s_248 ctx_249)"
"(let-values((()"
"(begin"
"(let-values(((obs_313)(expand-context-observer ctx_249)))"
"(if obs_313"
"(let-values()(let-values()(call-expand-observe obs_313 log-tag_243)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_250)(syntax-disarm$1 s_248)))"
"(let-values(((ok?_251"
" letrec-syntaxes+values77_252"
" id:trans78_253"
" trans-rhs79_254"
" id:val80_255"
" val-rhs81_256"
" body82_257)"
"(let-values(((s_314) disarmed-s_250))"
"(if(if syntaxes?_244 #t #f)"
"(let-values(((orig-s_315) s_314))"
"(let-values(((letrec-syntaxes+values77_316"
" id:trans78_317"
" trans-rhs79_318"
" id:val80_319"
" val-rhs81_320"
" body82_321)"
"(let-values(((s_322)"
"(if(syntax?$1 s_314)(syntax-e$1 s_314) s_314)))"
"(if(pair? s_322)"
"(let-values(((letrec-syntaxes+values83_323)"
"(let-values(((s_329)(car s_322))) s_329))"
"((id:trans84_324"
" trans-rhs85_325"
" id:val86_326"
" val-rhs87_327"
" body88_328)"
"(let-values(((s_330)(cdr s_322)))"
"(let-values(((s_331)"
"(if(syntax?$1 s_330)"
"(syntax-e$1 s_330)"
" s_330)))"
"(if(pair? s_331)"
"(let-values(((id:trans89_332"
" trans-rhs90_333)"
"(let-values(((s_337)"
"(car"
" s_331)))"
"(let-values(((s_338)"
"(if(syntax?$1"
" s_337)"
"(syntax-e$1"
" s_337)"
" s_337)))"
"(let-values(((flat-s_339)"
"(to-syntax-list.1"
" s_338)))"
"(if(not flat-s_339)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_315))"
"(let-values()"
"(let-values(((id:trans_340"
" trans-rhs_341)"
"(let-values(((lst_342)"
" flat-s_339))"
"(begin"
"(if(list?"
" lst_342)"
"(void)"
"(let-values()"
"(in-list"
" lst_342)))"
"((letrec-values(((for-loop_343)"
"(lambda(id:trans_344"
" trans-rhs_345"
" lst_346)"
"(if(pair?"
" lst_346)"
"(let-values(((s_347)"
"(unsafe-car"
" lst_346)))"
"(let-values(((id:trans_348"
" trans-rhs_349)"
"(let-values(((id:trans_350)"
" id:trans_344)"
"((trans-rhs_351)"
" trans-rhs_345))"
"(let-values(((id:trans_352"
" trans-rhs_353)"
"(let-values()"
"(let-values(((id:trans120_354"
" trans-rhs121_355)"
"(let-values()"
"(let-values(((s_356)"
"(if(syntax?$1"
" s_347)"
"(syntax-e$1"
" s_347)"
" s_347)))"
"(if(pair?"
" s_356)"
"(let-values(((id:trans94_357)"
"(let-values(((s_359)"
"(car"
" s_356)))"
"(let-values(((s_360)"
"(if(syntax?$1"
" s_359)"
"(syntax-e$1"
" s_359)"
" s_359)))"
"(let-values(((flat-s_361)"
"(to-syntax-list.1"
" s_360)))"
"(if(not"
" flat-s_361)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_315))"
"(let-values()"
"(let-values(((id:trans_362)"
"(let-values(((lst_363)"
" flat-s_361))"
"(begin"
"(if(list?"
" lst_363)"
"(void)"
"(let-values()"
"(in-list"
" lst_363)))"
"((letrec-values(((for-loop_364)"
"(lambda(id:trans_365"
" lst_366)"
"(if(pair?"
" lst_366)"
"(let-values(((s_367)"
"(unsafe-car"
" lst_366)))"
"(let-values(((id:trans_368)"
"(let-values(((id:trans_369)"
" id:trans_365))"
"(let-values(((id:trans_370)"
"(let-values()"
"(let-values(((id:trans122_371)"
"(let-values()"
"(if(let-values(((or-part_372)"
"(if(syntax?$1"
" s_367)"
"(symbol?"
"(syntax-e$1"
" s_367))"
" #f)))"
"(if or-part_372"
" or-part_372"
"(symbol?"
" s_367)))"
" s_367"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_315"
" s_367)))))"
"(cons"
" id:trans122_371"
" id:trans_369)))))"
"(values"
" id:trans_370)))))"
"(for-loop_364"
" id:trans_368"
"(unsafe-cdr"
" lst_366))))"
" id:trans_365))))"
" for-loop_364)"
" null"
" lst_363)))))"
"(alt-reverse"
" id:trans_362))))))))"
"((trans-rhs95_358)"
"(let-values(((s_373)"
"(cdr"
" s_356)))"
"(let-values(((s_374)"
"(if(syntax?$1"
" s_373)"
"(syntax-e$1"
" s_373)"
" s_373)))"
"(if(pair?"
" s_374)"
"(let-values(((trans-rhs96_375)"
"(let-values(((s_376)"
"(car"
" s_374)))"
" s_376))"
"(()"
"(let-values(((s_377)"
"(cdr"
" s_374)))"
"(let-values(((s_378)"
"(if(syntax?$1"
" s_377)"
"(syntax-e$1"
" s_377)"
" s_377)))"
"(if(null?"
" s_378)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_315))))))"
"(values"
" trans-rhs96_375))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_315))))))"
"(values"
" id:trans94_357"
" trans-rhs95_358))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_315))))))"
"(values"
"(cons"
" id:trans120_354"
" id:trans_350)"
"(cons"
" trans-rhs121_355"
" trans-rhs_351))))))"
"(values"
" id:trans_352"
" trans-rhs_353)))))"
"(for-loop_343"
" id:trans_348"
" trans-rhs_349"
"(unsafe-cdr"
" lst_346))))"
"(values"
" id:trans_344"
" trans-rhs_345)))))"
" for-loop_343)"
" null"
" null"
" lst_342)))))"
"(values"
"(alt-reverse"
" id:trans_340)"
"(alt-reverse"
" trans-rhs_341)))))))))"
"((id:val91_334"
" val-rhs92_335"
" body93_336)"
"(let-values(((s_379)"
"(cdr"
" s_331)))"
"(let-values(((s_380)"
"(if(syntax?$1"
" s_379)"
"(syntax-e$1"
" s_379)"
" s_379)))"
"(if(pair? s_380)"
"(let-values(((id:val97_381"
" val-rhs98_382)"
"(let-values(((s_384)"
"(car"
" s_380)))"
"(let-values(((s_385)"
"(if(syntax?$1"
" s_384)"
"(syntax-e$1"
" s_384)"
" s_384)))"
"(let-values(((flat-s_386)"
"(to-syntax-list.1"
" s_385)))"
"(if(not"
" flat-s_386)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_315))"
"(let-values()"
"(let-values(((id:val_387"
" val-rhs_388)"
"(let-values(((lst_389)"
" flat-s_386))"
"(begin"
"(if(list?"
" lst_389)"
"(void)"
"(let-values()"
"(in-list"
" lst_389)))"
"((letrec-values(((for-loop_390)"
"(lambda(id:val_391"
" val-rhs_392"
" lst_393)"
"(if(pair?"
" lst_393)"
"(let-values(((s_394)"
"(unsafe-car"
" lst_393)))"
"(let-values(((id:val_395"
" val-rhs_396)"
"(let-values(((id:val_397)"
" id:val_391)"
"((val-rhs_398)"
" val-rhs_392))"
"(let-values(((id:val_399"
" val-rhs_400)"
"(let-values()"
"(let-values(((id:val123_401"
" val-rhs124_402)"
"(let-values()"
"(let-values(((s_403)"
"(if(syntax?$1"
" s_394)"
"(syntax-e$1"
" s_394)"
" s_394)))"
"(if(pair?"
" s_403)"
"(let-values(((id:val100_404)"
"(let-values(((s_406)"
"(car"
" s_403)))"
"(let-values(((s_407)"
"(if(syntax?$1"
" s_406)"
"(syntax-e$1"
" s_406)"
" s_406)))"
"(let-values(((flat-s_408)"
"(to-syntax-list.1"
" s_407)))"
"(if(not"
" flat-s_408)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_315))"
"(let-values()"
"(let-values(((id:val_409)"
"(let-values(((lst_410)"
" flat-s_408))"
"(begin"
"(if(list?"
" lst_410)"
"(void)"
"(let-values()"
"(in-list"
" lst_410)))"
"((letrec-values(((for-loop_411)"
"(lambda(id:val_412"
" lst_413)"
"(if(pair?"
" lst_413)"
"(let-values(((s_414)"
"(unsafe-car"
" lst_413)))"
"(let-values(((id:val_415)"
"(let-values(((id:val_416)"
" id:val_412))"
"(let-values(((id:val_417)"
"(let-values()"
"(let-values(((id:val125_418)"
"(let-values()"
"(if(let-values(((or-part_419)"
"(if(syntax?$1"
" s_414)"
"(symbol?"
"(syntax-e$1"
" s_414))"
" #f)))"
"(if or-part_419"
" or-part_419"
"(symbol?"
" s_414)))"
" s_414"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_315"
" s_414)))))"
"(cons"
" id:val125_418"
" id:val_416)))))"
"(values"
" id:val_417)))))"
"(for-loop_411"
" id:val_415"
"(unsafe-cdr"
" lst_413))))"
" id:val_412))))"
" for-loop_411)"
" null"
" lst_410)))))"
"(alt-reverse"
" id:val_409))))))))"
"((val-rhs101_405)"
"(let-values(((s_420)"
"(cdr"
" s_403)))"
"(let-values(((s_421)"
"(if(syntax?$1"
" s_420)"
"(syntax-e$1"
" s_420)"
" s_420)))"
"(if(pair?"
" s_421)"
"(let-values(((val-rhs102_422)"
"(let-values(((s_423)"
"(car"
" s_421)))"
" s_423))"
"(()"
"(let-values(((s_424)"
"(cdr"
" s_421)))"
"(let-values(((s_425)"
"(if(syntax?$1"
" s_424)"
"(syntax-e$1"
" s_424)"
" s_424)))"
"(if(null?"
" s_425)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_315))))))"
"(values"
" val-rhs102_422))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_315))))))"
"(values"
" id:val100_404"
" val-rhs101_405))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_315))))))"
"(values"
"(cons"
" id:val123_401"
" id:val_397)"
"(cons"
" val-rhs124_402"
" val-rhs_398))))))"
"(values"
" id:val_399"
" val-rhs_400)))))"
"(for-loop_390"
" id:val_395"
" val-rhs_396"
"(unsafe-cdr"
" lst_393))))"
"(values"
" id:val_391"
" val-rhs_392)))))"
" for-loop_390)"
" null"
" null"
" lst_389)))))"
"(values"
"(alt-reverse"
" id:val_387)"
"(alt-reverse"
" val-rhs_388)))))))))"
"((body99_383)"
"(let-values(((s_426)"
"(cdr"
" s_380)))"
"(let-values(((s_427)"
"(if(syntax?$1"
" s_426)"
"(syntax-e$1"
" s_426)"
" s_426)))"
"(let-values(((flat-s_428)"
"(to-syntax-list.1"
" s_427)))"
"(if(not"
" flat-s_428)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_315))"
"(if(null?"
" flat-s_428)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_315))"
"(let-values()"
" flat-s_428))))))))"
"(values"
" id:val97_381"
" val-rhs98_382"
" body99_383))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_315))))))"
"(values"
" id:trans89_332"
" trans-rhs90_333"
" id:val91_334"
" val-rhs92_335"
" body93_336))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_315))))))"
"(values"
" letrec-syntaxes+values83_323"
" id:trans84_324"
" trans-rhs85_325"
" id:val86_326"
" val-rhs87_327"
" body88_328))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_315)))))"
"(values"
" #t"
" letrec-syntaxes+values77_316"
" id:trans78_317"
" trans-rhs79_318"
" id:val80_319"
" val-rhs81_320"
" body82_321)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_276 let-values103_277 id:val104_278 val-rhs105_279 body106_280)"
"(let-values(((s_429) disarmed-s_250))"
"(if(if(not syntaxes?_244) #t #f)"
"(let-values(((orig-s_430) s_429))"
"(let-values(((let-values103_431 id:val104_432 val-rhs105_433 body106_434)"
"(let-values(((s_435)"
"(if(syntax?$1 s_429)"
"(syntax-e$1 s_429)"
" s_429)))"
"(if(pair? s_435)"
"(let-values(((let-values107_436)"
"(let-values(((s_440)(car s_435))) s_440))"
"((id:val108_437 val-rhs109_438 body110_439)"
"(let-values(((s_441)(cdr s_435)))"
"(let-values(((s_442)"
"(if(syntax?$1 s_441)"
"(syntax-e$1 s_441)"
" s_441)))"
"(if(pair? s_442)"
"(let-values(((id:val111_443"
" val-rhs112_444)"
"(let-values(((s_446)"
"(car"
" s_442)))"
"(let-values(((s_447)"
"(if(syntax?$1"
" s_446)"
"(syntax-e$1"
" s_446)"
" s_446)))"
"(let-values(((flat-s_448)"
"(to-syntax-list.1"
" s_447)))"
"(if(not"
" flat-s_448)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_430))"
"(let-values()"
"(let-values(((id:val_449"
" val-rhs_450)"
"(let-values(((lst_451)"
" flat-s_448))"
"(begin"
"(if(list?"
" lst_451)"
"(void)"
"(let-values()"
"(in-list"
" lst_451)))"
"((letrec-values(((for-loop_452)"
"(lambda(id:val_453"
" val-rhs_454"
" lst_455)"
"(if(pair?"
" lst_455)"
"(let-values(((s_456)"
"(unsafe-car"
" lst_455)))"
"(let-values(((id:val_457"
" val-rhs_458)"
"(let-values(((id:val_459)"
" id:val_453)"
"((val-rhs_460)"
" val-rhs_454))"
"(let-values(((id:val_461"
" val-rhs_462)"
"(let-values()"
"(let-values(((id:val126_463"
" val-rhs127_464)"
"(let-values()"
"(let-values(((s_465)"
"(if(syntax?$1"
" s_456)"
"(syntax-e$1"
" s_456)"
" s_456)))"
"(if(pair?"
" s_465)"
"(let-values(((id:val114_466)"
"(let-values(((s_468)"
"(car"
" s_465)))"
"(let-values(((s_469)"
"(if(syntax?$1"
" s_468)"
"(syntax-e$1"
" s_468)"
" s_468)))"
"(let-values(((flat-s_470)"
"(to-syntax-list.1"
" s_469)))"
"(if(not"
" flat-s_470)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_430))"
"(let-values()"
"(let-values(((id:val_471)"
"(let-values(((lst_472)"
" flat-s_470))"
"(begin"
"(if(list?"
" lst_472)"
"(void)"
"(let-values()"
"(in-list"
" lst_472)))"
"((letrec-values(((for-loop_473)"
"(lambda(id:val_474"
" lst_475)"
"(if(pair?"
" lst_475)"
"(let-values(((s_476)"
"(unsafe-car"
" lst_475)))"
"(let-values(((id:val_477)"
"(let-values(((id:val_478)"
" id:val_474))"
"(let-values(((id:val_479)"
"(let-values()"
"(let-values(((id:val128_480)"
"(let-values()"
"(if(let-values(((or-part_481)"
"(if(syntax?$1"
" s_476)"
"(symbol?"
"(syntax-e$1"
" s_476))"
" #f)))"
"(if or-part_481"
" or-part_481"
"(symbol?"
" s_476)))"
" s_476"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_430"
" s_476)))))"
"(cons"
" id:val128_480"
" id:val_478)))))"
"(values"
" id:val_479)))))"
"(for-loop_473"
" id:val_477"
"(unsafe-cdr"
" lst_475))))"
" id:val_474))))"
" for-loop_473)"
" null"
" lst_472)))))"
"(alt-reverse"
" id:val_471))))))))"
"((val-rhs115_467)"
"(let-values(((s_482)"
"(cdr"
" s_465)))"
"(let-values(((s_483)"
"(if(syntax?$1"
" s_482)"
"(syntax-e$1"
" s_482)"
" s_482)))"
"(if(pair?"
" s_483)"
"(let-values(((val-rhs116_484)"
"(let-values(((s_485)"
"(car"
" s_483)))"
" s_485))"
"(()"
"(let-values(((s_486)"
"(cdr"
" s_483)))"
"(let-values(((s_487)"
"(if(syntax?$1"
" s_486)"
"(syntax-e$1"
" s_486)"
" s_486)))"
"(if(null?"
" s_487)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_430))))))"
"(values"
" val-rhs116_484))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_430))))))"
"(values"
" id:val114_466"
" val-rhs115_467))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_430))))))"
"(values"
"(cons"
" id:val126_463"
" id:val_459)"
"(cons"
" val-rhs127_464"
" val-rhs_460))))))"
"(values"
" id:val_461"
" val-rhs_462)))))"
"(for-loop_452"
" id:val_457"
" val-rhs_458"
"(unsafe-cdr"
" lst_455))))"
"(values"
" id:val_453"
" val-rhs_454)))))"
" for-loop_452)"
" null"
" null"
" lst_451)))))"
"(values"
"(alt-reverse"
" id:val_449)"
"(alt-reverse"
" val-rhs_450)))))))))"
"((body113_445)"
"(let-values(((s_488)"
"(cdr"
" s_442)))"
"(let-values(((s_489)"
"(if(syntax?$1"
" s_488)"
"(syntax-e$1"
" s_488)"
" s_488)))"
"(let-values(((flat-s_490)"
"(to-syntax-list.1"
" s_489)))"
"(if(not"
" flat-s_490)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_430))"
"(if(null?"
" flat-s_490)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_430))"
"(let-values()"
" flat-s_490))))))))"
"(values"
" id:val111_443"
" val-rhs112_444"
" body113_445))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_430))))))"
"(values"
" let-values107_436"
" id:val108_437"
" val-rhs109_438"
" body110_439))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_430)))))"
"(values #t let-values103_431 id:val104_432 val-rhs105_433 body106_434)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_295)(new-scope 'local)))"
"(let-values(((phase_296)(expand-context-phase ctx_249)))"
"(let-values(((frame-id_297)(if syntaxes?_244(make-reference-record) #f)))"
"(let-values(((trans-idss_298)"
"(alt-reverse"
"(let-values(((lst_491)(if syntaxes?_244 id:trans78_253 null)))"
"(begin"
"(if(list? lst_491)(void)(let-values()(in-list lst_491)))"
"((letrec-values(((for-loop_492)"
"(lambda(fold-var_493 lst_494)"
"(if(pair? lst_494)"
"(let-values(((ids_495)(unsafe-car lst_494)))"
"(let-values(((fold-var_496)"
"(let-values(((fold-var_497)"
" fold-var_493))"
"(let-values(((fold-var_498)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_499)"
" ids_495))"
"(begin"
"(if(list?"
" lst_499)"
"(void)"
"(let-values()"
"(in-list"
" lst_499)))"
"((letrec-values(((for-loop_500)"
"(lambda(fold-var_501"
" lst_502)"
"(if(pair?"
" lst_502)"
"(let-values(((id_503)"
"(unsafe-car"
" lst_502)))"
"(let-values(((fold-var_504)"
"(let-values(((fold-var_505)"
" fold-var_501))"
"(let-values(((fold-var_506)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_503"
" sc_295))"
" fold-var_505))))"
"(values"
" fold-var_506)))))"
"(for-loop_500"
" fold-var_504"
"(unsafe-cdr"
" lst_502))))"
" fold-var_501))))"
" for-loop_500)"
" null"
" lst_499)))))"
" fold-var_497))))"
"(values fold-var_498)))))"
"(for-loop_492"
" fold-var_496"
"(unsafe-cdr lst_494))))"
" fold-var_493))))"
" for-loop_492)"
" null"
" lst_491))))))"
"(let-values(((val-idss_299)"
"(alt-reverse"
"(let-values(((lst_507)(if syntaxes?_244 id:val80_255 id:val104_278)))"
"(begin"
"(if(list? lst_507)(void)(let-values()(in-list lst_507)))"
"((letrec-values(((for-loop_508)"
"(lambda(fold-var_509 lst_510)"
"(if(pair? lst_510)"
"(let-values(((ids_511)"
"(unsafe-car lst_510)))"
"(let-values(((fold-var_512)"
"(let-values(((fold-var_513)"
" fold-var_509))"
"(let-values(((fold-var_514)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_515)"
" ids_511))"
"(begin"
"(if(list?"
" lst_515)"
"(void)"
"(let-values()"
"(in-list"
" lst_515)))"
"((letrec-values(((for-loop_516)"
"(lambda(fold-var_517"
" lst_518)"
"(if(pair?"
" lst_518)"
"(let-values(((id_519)"
"(unsafe-car"
" lst_518)))"
"(let-values(((fold-var_520)"
"(let-values(((fold-var_521)"
" fold-var_517))"
"(let-values(((fold-var_522)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_519"
" sc_295))"
" fold-var_521))))"
"(values"
" fold-var_522)))))"
"(for-loop_516"
" fold-var_520"
"(unsafe-cdr"
" lst_518))))"
" fold-var_517))))"
" for-loop_516)"
" null"
" lst_515)))))"
" fold-var_513))))"
"(values fold-var_514)))))"
"(for-loop_508"
" fold-var_512"
"(unsafe-cdr lst_510))))"
" fold-var_509))))"
" for-loop_508)"
" null"
" lst_507))))))"
"(let-values((()"
"(begin"
"(let-values(((temp117_523)(list trans-idss_298 val-idss_299))"
"((phase118_524) phase_296)"
"((s119_525) s_248))"
"(if(variable-reference-constant?"
"(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp117_523"
" phase118_524"
" s119_525"
" #f"
" #f)"
"(check-no-duplicate-ids10.1 temp117_523 phase118_524 s119_525)))"
"(values))))"
"(let-values(((counter_300)(root-expand-context-counter ctx_249)))"
"(let-values(((trans-keyss_301)"
"(alt-reverse"
"(let-values(((lst_526) trans-idss_298))"
"(begin"
"(if(list? lst_526)(void)(let-values()(in-list lst_526)))"
"((letrec-values(((for-loop_527)"
"(lambda(fold-var_528 lst_529)"
"(if(pair? lst_529)"
"(let-values(((ids_530)"
"(unsafe-car lst_529)))"
"(let-values(((fold-var_531)"
"(let-values(((fold-var_532)"
" fold-var_528))"
"(let-values(((fold-var_533)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_534)"
" ids_530))"
"(begin"
"(if(list?"
" lst_534)"
"(void)"
"(let-values()"
"(in-list"
" lst_534)))"
"((letrec-values(((for-loop_535)"
"(lambda(fold-var_536"
" lst_537)"
"(if(pair?"
" lst_537)"
"(let-values(((id_538)"
"(unsafe-car"
" lst_537)))"
"(let-values(((fold-var_539)"
"(let-values(((fold-var_540)"
" fold-var_536))"
"(let-values(((fold-var_541)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:157:27_542)"
" add-local-binding!37.1)"
"((id129_543)"
" id_538)"
"((phase130_544)"
" phase_296)"
"((counter131_545)"
" counter_300)"
"((frame-id132_546)"
" frame-id_297)"
"((s133_547)"
" s_248))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" frame-id132_546"
" #t"
" s133_547"
" #t"
" id129_543"
" phase130_544"
" counter131_545)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:157:27_542"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id132_546"
" s133_547)"
" id129_543"
" phase130_544"
" counter131_545))))"
" fold-var_540))))"
"(values"
" fold-var_541)))))"
"(for-loop_535"
" fold-var_539"
"(unsafe-cdr"
" lst_537))))"
" fold-var_536))))"
" for-loop_535)"
" null"
" lst_534)))))"
" fold-var_532))))"
"(values"
" fold-var_533)))))"
"(for-loop_527"
" fold-var_531"
"(unsafe-cdr lst_529))))"
" fold-var_528))))"
" for-loop_527)"
" null"
" lst_526))))))"
"(let-values(((val-keyss_302)"
"(alt-reverse"
"(let-values(((lst_548) val-idss_299))"
"(begin"
"(if(list? lst_548)"
"(void)"
"(let-values()(in-list lst_548)))"
"((letrec-values(((for-loop_549)"
"(lambda(fold-var_550 lst_551)"
"(if(pair? lst_551)"
"(let-values(((ids_552)"
"(unsafe-car lst_551)))"
"(let-values(((fold-var_553)"
"(let-values(((fold-var_554)"
" fold-var_550))"
"(let-values(((fold-var_555)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_556)"
" ids_552))"
"(begin"
"(if(list?"
" lst_556)"
"(void)"
"(let-values()"
"(in-list"
" lst_556)))"
"((letrec-values(((for-loop_557)"
"(lambda(fold-var_558"
" lst_559)"
"(if(pair?"
" lst_559)"
"(let-values(((id_560)"
"(unsafe-car"
" lst_559)))"
"(let-values(((fold-var_561)"
"(let-values(((fold-var_562)"
" fold-var_558))"
"(let-values(((fold-var_563)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:160:25_564)"
" add-local-binding!37.1)"
"((id134_565)"
" id_560)"
"((phase135_566)"
" phase_296)"
"((counter136_567)"
" counter_300)"
"((frame-id137_568)"
" frame-id_297)"
"((s138_569)"
" s_248))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!37.1))"
"(add-local-binding!35.1"
" frame-id137_568"
" #t"
" s138_569"
" #t"
" id134_565"
" phase135_566"
" counter136_567)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:160:25_564"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id137_568"
" s138_569)"
" id134_565"
" phase135_566"
" counter136_567))))"
" fold-var_562))))"
"(values"
" fold-var_563)))))"
"(for-loop_557"
" fold-var_561"
"(unsafe-cdr"
" lst_559))))"
" fold-var_558))))"
" for-loop_557)"
" null"
" lst_556)))))"
" fold-var_554))))"
"(values"
" fold-var_555)))))"
"(for-loop_549"
" fold-var_553"
"(unsafe-cdr lst_551))))"
" fold-var_550))))"
" for-loop_549)"
" null"
" lst_548))))))"
"(let-values(((bodys_303)"
"(alt-reverse"
"(let-values(((lst_570)"
"(if syntaxes?_244 body82_257 body106_280)))"
"(begin"
"(if(list? lst_570)"
"(void)"
"(let-values()(in-list lst_570)))"
"((letrec-values(((for-loop_571)"
"(lambda(fold-var_572 lst_573)"
"(if(pair? lst_573)"
"(let-values(((body_574)"
"(unsafe-car"
" lst_573)))"
"(let-values(((fold-var_575)"
"(let-values(((fold-var_576)"
" fold-var_572))"
"(let-values(((fold-var_577)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_574"
" sc_295))"
" fold-var_576))))"
"(values"
" fold-var_577)))))"
"(for-loop_571"
" fold-var_575"
"(unsafe-cdr lst_573))))"
" fold-var_572))))"
" for-loop_571)"
" null"
" lst_570))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_578)"
"(expand-context-observer ctx_249)))"
"(if obs_578"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_578"
" renames-log-tag_247"
" val-idss_299"
"(datum->syntax$1 #f bodys_303))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_244"
"(let-values()"
"(begin"
"(let-values(((obs_579)"
"(expand-context-observer ctx_249)))"
"(if obs_579"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_579"
" 'prepare-env)))"
"(void)))"
"(let-values(((obs_580)"
"(expand-context-observer ctx_249)))"
"(if obs_580"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_580"
" 'enter-bind)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_304)"
"(alt-reverse"
"(let-values(((lst_581)"
"(if syntaxes?_244 trans-rhs79_254 '()))"
"((lst_582) trans-idss_298))"
"(begin"
"(if(list? lst_581)"
"(void)"
"(let-values()(in-list lst_581)))"
"(if(list? lst_582)"
"(void)"
"(let-values()(in-list lst_582)))"
"((letrec-values(((for-loop_583)"
"(lambda(fold-var_584"
" lst_585"
" lst_586)"
"(if(if(pair? lst_585)"
"(pair? lst_586)"
" #f)"
"(let-values(((rhs_587)"
"(unsafe-car"
" lst_585))"
"((ids_588)"
"(unsafe-car"
" lst_586)))"
"(let-values(((fold-var_589)"
"(let-values(((fold-var_590)"
" fold-var_584))"
"(let-values(((fold-var_591)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_592)"
"(expand-context-observer"
" ctx_249)))"
"(if obs_592"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_592"
" 'next)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_587"
" sc_295)"
" ids_588"
" ctx_249)))"
" fold-var_590))))"
"(values"
" fold-var_591)))))"
"(for-loop_583"
" fold-var_589"
"(unsafe-cdr lst_585)"
"(unsafe-cdr lst_586))))"
" fold-var_584))))"
" for-loop_583)"
" null"
" lst_581"
" lst_582))))))"
"(let-values(((rec-val-env_305)"
"(let-values(((lst_593) val-keyss_302)"
"((lst_594) val-idss_299))"
"(begin"
"(if(list? lst_593)"
"(void)"
"(let-values()(in-list lst_593)))"
"(if(list? lst_594)"
"(void)"
"(let-values()(in-list lst_594)))"
"((letrec-values(((for-loop_595)"
"(lambda(env_596"
" lst_597"
" lst_598)"
"(if(if(pair? lst_597)"
"(pair? lst_598)"
" #f)"
"(let-values(((keys_599)"
"(unsafe-car"
" lst_597))"
"((ids_600)"
"(unsafe-car"
" lst_598)))"
"(let-values(((env_601)"
"(let-values(((env_602)"
" env_596))"
"(let-values(((lst_603)"
" keys_599)"
"((lst_604)"
" ids_600))"
"(begin"
"(if(list?"
" lst_603)"
"(void)"
"(let-values()"
"(in-list"
" lst_603)))"
"(if(list?"
" lst_604)"
"(void)"
"(let-values()"
"(in-list"
" lst_604)))"
"((letrec-values(((for-loop_605)"
"(lambda(env_606"
" lst_607"
" lst_608)"
"(if(if(pair?"
" lst_607)"
"(pair?"
" lst_608)"
" #f)"
"(let-values(((key_609)"
"(unsafe-car"
" lst_607))"
"((id_610)"
"(unsafe-car"
" lst_608)))"
"(let-values(((env_611)"
"(let-values(((env_612)"
" env_606))"
"(let-values(((env_613)"
"(let-values()"
"(env-extend"
" env_612"
" key_609"
"(local-variable1.1"
" id_610)))))"
"(values"
" env_613)))))"
"(for-loop_605"
" env_611"
"(unsafe-cdr"
" lst_607)"
"(unsafe-cdr"
" lst_608))))"
" env_606))))"
" for-loop_605)"
" env_602"
" lst_603"
" lst_604))))))"
"(for-loop_595"
" env_601"
"(unsafe-cdr lst_597)"
"(unsafe-cdr lst_598))))"
" env_596))))"
" for-loop_595)"
"(expand-context-env ctx_249)"
" lst_593"
" lst_594)))))"
"(let-values(((rec-env_306)"
"(let-values(((lst_614) trans-keyss_301)"
"((lst_615) trans-valss_304)"
"((lst_616) trans-idss_298))"
"(begin"
"(if(list? lst_614)"
"(void)"
"(let-values()(in-list lst_614)))"
"(if(list? lst_615)"
"(void)"
"(let-values()(in-list lst_615)))"
"(if(list? lst_616)"
"(void)"
"(let-values()(in-list lst_616)))"
"((letrec-values(((for-loop_617)"
"(lambda(env_618"
" lst_619"
" lst_620"
" lst_621)"
"(if(if(pair? lst_619)"
"(if(pair? lst_620)"
"(pair? lst_621)"
" #f)"
" #f)"
"(let-values(((keys_622)"
"(unsafe-car"
" lst_619))"
"((vals_623)"
"(unsafe-car"
" lst_620))"
"((ids_624)"
"(unsafe-car"
" lst_621)))"
"(let-values(((env_625)"
"(let-values(((env_626)"
" env_618))"
"(let-values(((env_627)"
"(let-values()"
"(let-values(((lst_628)"
" keys_622)"
"((lst_629)"
" vals_623)"
"((lst_630)"
" ids_624))"
"(begin"
"(if(list?"
" lst_628)"
"(void)"
"(let-values()"
"(in-list"
" lst_628)))"
"(if(list?"
" lst_629)"
"(void)"
"(let-values()"
"(in-list"
" lst_629)))"
"(if(list?"
" lst_630)"
"(void)"
"(let-values()"
"(in-list"
" lst_630)))"
"((letrec-values(((for-loop_631)"
"(lambda(env_632"
" lst_633"
" lst_634"
" lst_635)"
"(if(if(pair?"
" lst_633)"
"(if(pair?"
" lst_634)"
"(pair?"
" lst_635)"
" #f)"
" #f)"
"(let-values(((key_636)"
"(unsafe-car"
" lst_633))"
"((val_637)"
"(unsafe-car"
" lst_634))"
"((id_638)"
"(unsafe-car"
" lst_635)))"
"(let-values(((env_639)"
"(let-values(((env_640)"
" env_632))"
"(let-values(((env_641)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_637"
" id_638"
" phase_296)"
"(env-extend"
" env_640"
" key_636"
" val_637)))))"
"(values"
" env_641)))))"
"(for-loop_631"
" env_639"
"(unsafe-cdr"
" lst_633)"
"(unsafe-cdr"
" lst_634)"
"(unsafe-cdr"
" lst_635))))"
" env_632))))"
" for-loop_631)"
" env_626"
" lst_628"
" lst_629"
" lst_630))))))"
"(values"
" env_627)))))"
"(for-loop_617"
" env_625"
"(unsafe-cdr lst_619)"
"(unsafe-cdr lst_620)"
"(unsafe-cdr"
" lst_621))))"
" env_618))))"
" for-loop_617)"
" rec-val-env_305"
" lst_614"
" lst_615"
" lst_616)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_244"
"(let-values()"
"(let-values(((obs_642)"
"(expand-context-observer"
" ctx_249)))"
"(if obs_642"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_642"
" 'exit-bind)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_307)(as-expression-context ctx_249)))"
"(let-values(((orig-rrs_308)"
"(expand-context-reference-records"
" expr-ctx_307)))"
"(let-values(((rec-ctx_309)"
"(let-values(((the-struct_643)"
" expr-ctx_307))"
"(if(expand-context? the-struct_643)"
"(let-values(((env139_644) rec-env_306)"
"((scopes140_645)"
"(cons"
" sc_295"
"(expand-context-scopes"
" ctx_249)))"
"((reference-records141_646)"
"(if split-by-reference?_246"
"(cons"
" frame-id_297"
" orig-rrs_308)"
" orig-rrs_308))"
"((binding-layer142_647)"
"(increment-binding-layer"
"(cons"
" trans-idss_298"
" val-idss_299)"
" ctx_249)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_643)"
"(root-expand-context-post-expansion-scope"
" the-struct_643)"
"(root-expand-context-top-level-bind-scope"
" the-struct_643)"
"(root-expand-context-all-scopes-stx"
" the-struct_643)"
"(root-expand-context-use-site-scopes"
" the-struct_643)"
"(root-expand-context-defined-syms"
" the-struct_643)"
"(root-expand-context-frame-id"
" the-struct_643)"
"(root-expand-context-counter"
" the-struct_643)"
"(root-expand-context-lift-key"
" the-struct_643)"
"(expand-context-context"
" the-struct_643)"
"(expand-context-phase the-struct_643)"
"(expand-context-namespace"
" the-struct_643)"
" env139_644"
"(expand-context-user-env"
" the-struct_643)"
"(expand-context-post-expansion-scope-action"
" the-struct_643)"
" scopes140_645"
"(expand-context-def-ctx-scopes"
" the-struct_643)"
" binding-layer142_647"
" reference-records141_646"
"(expand-context-only-immediate?"
" the-struct_643)"
"(expand-context-just-once?"
" the-struct_643)"
"(expand-context-module-begin-k"
" the-struct_643)"
"(expand-context-need-eventually-defined"
" the-struct_643)"
"(expand-context-allow-unbound?"
" the-struct_643)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_643)"
"(expand-context-stops the-struct_643)"
"(expand-context-current-introduction-scopes"
" the-struct_643)"
"(expand-context-declared-submodule-names"
" the-struct_643)"
"(expand-context-lifts the-struct_643)"
"(expand-context-lift-envs"
" the-struct_643)"
"(expand-context-module-lifts"
" the-struct_643)"
"(expand-context-require-lifts"
" the-struct_643)"
"(expand-context-to-module-lifts"
" the-struct_643)"
"(expand-context-requires+provides"
" the-struct_643)"
"(expand-context-name the-struct_643)"
"(expand-context-observer"
" the-struct_643)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"expand-context?\""
" the-struct_643)))))"
"(let-values(((letrec-values-id_310)"
"(if syntaxes?_244"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_296)"
" 'letrec-values)"
" let-values103_277)))"
"(let-values(((get-body_311)"
"(lambda()"
"(let-values((()"
"(begin"
"(let-values(((obs_649)"
"(expand-context-observer"
" ctx_249)))"
"(if obs_649"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_649"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_648)"
"(let-values(((the-struct_650)"
" rec-ctx_309))"
"(if(expand-context?"
" the-struct_650)"
"(let-values(((reference-records147_651)"
" orig-rrs_308))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_650)"
"(root-expand-context-post-expansion-scope"
" the-struct_650)"
"(root-expand-context-top-level-bind-scope"
" the-struct_650)"
"(root-expand-context-all-scopes-stx"
" the-struct_650)"
"(root-expand-context-use-site-scopes"
" the-struct_650)"
"(root-expand-context-defined-syms"
" the-struct_650)"
"(root-expand-context-frame-id"
" the-struct_650)"
"(root-expand-context-counter"
" the-struct_650)"
"(root-expand-context-lift-key"
" the-struct_650)"
"(expand-context-context"
" the-struct_650)"
"(expand-context-phase"
" the-struct_650)"
"(expand-context-namespace"
" the-struct_650)"
"(expand-context-env"
" the-struct_650)"
"(expand-context-user-env"
" the-struct_650)"
"(expand-context-post-expansion-scope-action"
" the-struct_650)"
"(expand-context-scopes"
" the-struct_650)"
"(expand-context-def-ctx-scopes"
" the-struct_650)"
"(expand-context-binding-layer"
" the-struct_650)"
" reference-records147_651"
"(expand-context-only-immediate?"
" the-struct_650)"
"(expand-context-just-once?"
" the-struct_650)"
"(expand-context-module-begin-k"
" the-struct_650)"
"(expand-context-need-eventually-defined"
" the-struct_650)"
"(expand-context-allow-unbound?"
" the-struct_650)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_650)"
"(expand-context-stops"
" the-struct_650)"
"(expand-context-current-introduction-scopes"
" the-struct_650)"
"(expand-context-declared-submodule-names"
" the-struct_650)"
"(expand-context-lifts"
" the-struct_650)"
"(expand-context-lift-envs"
" the-struct_650)"
"(expand-context-module-lifts"
" the-struct_650)"
"(expand-context-require-lifts"
" the-struct_650)"
"(expand-context-to-module-lifts"
" the-struct_650)"
"(expand-context-requires+provides"
" the-struct_650)"
"(expand-context-name"
" the-struct_650)"
"(expand-context-observer"
" the-struct_650)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"expand-context?\""
" the-struct_650)))))"
"(let-values(((...nder/expand/expr.rkt:212:5_652)"
" expand-body11.1)"
"((bodys143_653)"
" bodys_303)"
"((temp144_654)"
"(let-values(((...nder/expand/expr.rkt:212:24_657)"
" as-tail-context14.1)"
"((body-ctx148_658)"
" body-ctx_648)"
"((ctx149_659)"
" ctx_249))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx149_659"
" body-ctx148_658)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:212:24_657"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx149_659)"
" body-ctx148_658))))"
"((s145_655) s_248)"
"((disarmed-s146_656)"
" disarmed-s_250))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-body11.1))"
"(expand-body9.1"
" disarmed-s146_656"
" s145_655"
" #f"
" #f"
" bodys143_653"
" temp144_654)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:212:5_652"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source)"
" 4)"
" '(#:disarmed-source #:source)"
"(list"
" disarmed-s146_656"
" s145_655)"
" bodys143_653"
" temp144_654))))))))"
"(let-values(((result-s_312)"
"(if(not split-by-reference?_246)"
"(let-values()"
"(let-values(((s150_660) s_248)"
"((disarmed-s151_661)"
" disarmed-s_250)"
"((temp152_662)"
"(list*"
" letrec-values-id_310"
"(alt-reverse"
"(let-values(((lst_663)"
" val-idss_299)"
"((lst_664)"
"(if syntaxes?_244"
" val-rhs81_256"
" val-rhs105_279)))"
"(begin"
"(if(list?"
" lst_663)"
"(void)"
"(let-values()"
"(in-list"
" lst_663)))"
"(if(list?"
" lst_664)"
"(void)"
"(let-values()"
"(in-list"
" lst_664)))"
"((letrec-values(((for-loop_665)"
"(lambda(fold-var_666"
" lst_667"
" lst_668)"
"(if(if(pair?"
" lst_667)"
"(pair?"
" lst_668)"
" #f)"
"(let-values(((ids_669)"
"(unsafe-car"
" lst_667))"
"((rhs_670)"
"(unsafe-car"
" lst_668)))"
"(let-values(((fold-var_671)"
"(let-values(((fold-var_672)"
" fold-var_666))"
"(let-values(((fold-var_673)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_674)"
"(expand-context-observer"
" ctx_249)))"
"(if obs_674"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_674"
" 'next)))"
"(void)))"
"(list"
" ids_669"
"(if rec?_245"
"(let-values(((temp153_675)"
"(add-scope"
" rhs_670"
" sc_295))"
"((temp154_676)"
"(as-named-context"
" rec-ctx_309"
" ids_669)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp153_675"
" temp154_676)"
"(expand7.1"
" temp153_675"
" temp154_676)))"
"(let-values(((rhs155_677)"
" rhs_670)"
"((temp156_678)"
"(as-named-context"
" expr-ctx_307"
" ids_669)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" rhs155_677"
" temp156_678)"
"(expand7.1"
" rhs155_677"
" temp156_678)))))))"
" fold-var_672))))"
"(values"
" fold-var_673)))))"
"(for-loop_665"
" fold-var_671"
"(unsafe-cdr"
" lst_667)"
"(unsafe-cdr"
" lst_668))))"
" fold-var_666))))"
" for-loop_665)"
" null"
" lst_663"
" lst_664))))"
"(get-body_311))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" s150_660"
" disarmed-s151_661"
" temp152_662)"
"(rebuild53.1"
" s150_660"
" disarmed-s151_661"
" temp152_662))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_680)"
"(expand-context-observer"
" ctx_249)))"
"(if obs_680"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_680"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_681)"
"(expand-context-observer"
" ctx_249)))"
"(if obs_681"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_681"
" 'letrec-values)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_679)"
"(alt-reverse"
"(let-values(((lst_682)"
"(if syntaxes?_244"
" val-rhs81_256"
" val-rhs105_279)))"
"(begin"
"(if(list?"
" lst_682)"
"(void)"
"(let-values()"
"(in-list"
" lst_682)))"
"((letrec-values(((for-loop_683)"
"(lambda(fold-var_684"
" lst_685)"
"(if(pair?"
" lst_685)"
"(let-values(((rhs_686)"
"(unsafe-car"
" lst_685)))"
"(let-values(((fold-var_687)"
"(let-values(((fold-var_688)"
" fold-var_684))"
"(let-values(((fold-var_689)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_686"
" sc_295))"
" fold-var_688))))"
"(values"
" fold-var_689)))))"
"(for-loop_683"
" fold-var_687"
"(unsafe-cdr"
" lst_685))))"
" fold-var_684))))"
" for-loop_683)"
" null"
" lst_682))))))"
"(let-values(((...nder/expand/expr.rkt:234:7_690)"
" expand-and-split-bindings-by-reference53.1)"
"((val-idss157_691)"
" val-idss_299)"
"((val-keyss158_692)"
" val-keyss_302)"
"((val-rhss159_693)"
" val-rhss_679)"
"((temp160_694)"
"(alt-reverse"
"(let-values(((lst_702)"
" val-idss_299))"
"(begin"
"(if(list?"
" lst_702)"
"(void)"
"(let-values()"
"(in-list"
" lst_702)))"
"((letrec-values(((for-loop_703)"
"(lambda(fold-var_704"
" lst_705)"
"(if(pair?"
" lst_705)"
"(let-values(((rhs_706)"
"(unsafe-car"
" lst_705)))"
"(let-values(((fold-var_707)"
"(let-values(((fold-var_708)"
" fold-var_704))"
"(let-values(((fold-var_709)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_708))))"
"(values"
" fold-var_709)))))"
"(for-loop_703"
" fold-var_707"
"(unsafe-cdr"
" lst_705))))"
" fold-var_704))))"
" for-loop_703)"
" null"
" lst_702)))))"
"((temp161_695)"
" #t)"
"((frame-id162_696)"
" frame-id_297)"
"((rec-ctx163_697)"
" rec-ctx_309)"
"((s164_698)"
" s_248)"
"((disarmed-s165_699)"
" disarmed-s_250)"
"((get-body166_700)"
" get-body_311)"
"((temp167_701)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-and-split-bindings-by-reference53.1))"
"(expand-and-split-bindings-by-reference51.1"
" rec-ctx163_697"
" disarmed-s165_699"
" frame-id162_696"
" get-body166_700"
" s164_698"
" temp161_695"
" temp167_701"
" val-idss157_691"
" val-keyss158_692"
" val-rhss159_693"
" temp160_694)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:234:7_690"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" rec-ctx163_697"
" disarmed-s165_699"
" frame-id162_696"
" get-body166_700"
" s164_698"
" temp161_695"
" temp167_701)"
" val-idss157_691"
" val-keyss158_692"
" val-rhss159_693"
" temp160_694))))))))))"
"(attach-disappeared-transformer-bindings"
" result-s_312"
" trans-idss_298))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack12.1)"
"(lambda(given-kws_710 given-args_711)"
"(let-values(((log-tag1_712)(car given-args_711))"
"((given-kws_713)(cdr given-kws_710))"
"((given-args_714)(cdr given-args_711)))"
"(let-values(((rec?8_715)(if(pair? given-kws_713)(eq? '#:rec?(car given-kws_713)) #f)))"
"(let-values(((rec?3_716)(if rec?8_715(car given-args_714)(void)))"
"((given-kws_717)(if rec?8_715(cdr given-kws_713) given-kws_713))"
"((given-args_718)(if rec?8_715(cdr given-args_714) given-args_714)))"
"(let-values(((renames-log-tag10_719)"
"(if(pair? given-kws_717)(eq? '#:renames-log-tag(car given-kws_717)) #f)))"
"(let-values(((renames-log-tag5_720)(if renames-log-tag10_719(car given-args_718)(void)))"
"((given-kws_721)(if renames-log-tag10_719(cdr given-kws_717) given-kws_717))"
"((given-args_722)(if renames-log-tag10_719(cdr given-args_718) given-args_718)))"
"(let-values(((split-by-reference?9_723)"
"(if(pair? given-kws_721)(eq? '#:split-by-reference?(car given-kws_721)) #f)))"
"(let-values(((split-by-reference?4_724)(if split-by-reference?9_723(car given-args_722)(void)))"
"((given-kws_725)(if split-by-reference?9_723(cdr given-kws_721) given-kws_721))"
"((given-args_726)(if split-by-reference?9_723(cdr given-args_722) given-args_722)))"
"(let-values(((syntaxes?7_727)(pair? given-kws_725)))"
"(let-values(((syntaxes?2_728)(if syntaxes?7_727(car given-args_726)(void))))"
"(make-let-values-form11.1"
" log-tag1_712"
" rec?3_716"
" rec?8_715"
" renames-log-tag5_720"
" renames-log-tag10_719"
" split-by-reference?4_724"
" split-by-reference?9_723"
" syntaxes?2_728"
" syntaxes?7_727))))))))))))"
"(define-values"
"(make-let-values-form13.1)"
"(lifted/2.1$1"
"(lambda(given-kws_729 given-argc_730)"
"(if(= given-argc_730 2)"
"(subsets? '(#:log-tag) given-kws_729 '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?))"
" #f))"
"(case-lambda((given-kws_731 given-args_732)(unpack12.1 given-kws_731 given-args_732)))"
" '(#:log-tag)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((...nder/expand/expr.rkt:246:1_733) make-let-values-form13.1)((temp168_734) 'prim-let-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp168_734 #f #f #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:246:1_733"
" keyword-procedure-extract"
" '(#:log-tag)"
" 2)"
" '(#:log-tag)"
"(list temp168_734))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((...nder/expand/expr.rkt:250:1_735) make-let-values-form13.1)"
"((temp169_736) #t)"
"((temp170_737) 'prim-letrec-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp170_737 temp169_736 #t #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:250:1_735"
" keyword-procedure-extract"
" '(#:log-tag #:rec?)"
" 2)"
" '(#:log-tag #:rec?)"
"(list temp170_737 temp169_736))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((...nder/expand/expr.rkt:254:1_738) make-let-values-form13.1)"
"((temp171_739) #t)"
"((temp172_740) #t)"
"((temp173_741) #t)"
"((temp174_742) 'prim-letrec-syntaxes+values)"
"((temp175_743) 'letrec-syntaxes-renames))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp174_742 temp172_740 #t temp175_743 #t temp173_741 #t temp171_739 #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:254:1_738"
" keyword-procedure-extract"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
" 2)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
"(list temp174_742 temp172_740 temp175_743 temp173_741 temp171_739))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_744 ctx_745)"
"(let-values((()"
"(begin"
"(let-values(((obs_760)(expand-context-observer ctx_745)))"
"(if obs_760"
"(let-values()(let-values()(call-expand-observe obs_760 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_746)(syntax-disarm$1 s_744)))"
"(let-values(((ok?_747 #%stratified-body176_748 body177_749)"
"(let-values(((s_761) disarmed-s_746))"
"(let-values(((orig-s_762) s_761))"
"(let-values(((#%stratified-body176_763 body177_764)"
"(let-values(((s_765)(if(syntax?$1 s_761)(syntax-e$1 s_761) s_761)))"
"(if(pair? s_765)"
"(let-values(((#%stratified-body178_766)"
"(let-values(((s_768)(car s_765))) s_768))"
"((body179_767)"
"(let-values(((s_769)(cdr s_765)))"
"(let-values(((s_770)"
"(if(syntax?$1 s_769)"
"(syntax-e$1 s_769)"
" s_769)))"
"(let-values(((flat-s_771)(to-syntax-list.1 s_770)))"
"(if(not flat-s_771)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_762))"
"(if(null? flat-s_771)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_762))"
"(let-values() flat-s_771))))))))"
"(values #%stratified-body178_766 body179_767))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_762)))))"
"(values #t #%stratified-body176_763 body177_764))))))"
"(let-values(((s180_772) s_744)"
"((disarmed-s181_773) disarmed-s_746)"
"((temp182_774)"
"(list*"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_745))"
" 'begin)"
"(let-values(((...nder/expand/expr.rkt:269:8_775) expand-body11.1)"
"((temp183_776) body177_749)"
"((ctx184_777) ctx_745)"
"((temp185_778) #t)"
"((s186_779) s_744)"
"((disarmed-s187_780) disarmed-s_746))"
"(if(variable-reference-constant?(#%variable-reference expand-body11.1))"
"(expand-body9.1 disarmed-s187_780 s186_779 temp185_778 #t temp183_776 ctx184_777)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:269:8_775"
" keyword-procedure-extract"
" '(#:disarmed-source #:source #:stratified?)"
" 4)"
" '(#:disarmed-source #:source #:stratified?)"
"(list disarmed-s187_780 s186_779 temp185_778)"
" temp183_776"
" ctx184_777))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s180_772 disarmed-s181_773 temp182_774)"
"(rebuild53.1 s180_772 disarmed-s181_773 temp182_774)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_781 ctx_782)"
"(let-values((()"
"(begin"
"(let-values(((obs_799)(expand-context-observer ctx_782)))"
"(if obs_799"
"(let-values()(let-values()(call-expand-observe obs_799 'prim-#%datum)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_783)(syntax-disarm$1 s_781)))"
"(let-values(((ok?_784 #%datum188_785 datum189_786)"
"(let-values(((s_800) disarmed-s_783))"
"(let-values(((orig-s_801) s_800))"
"(let-values(((#%datum188_802 datum189_803)"
"(let-values(((s_804)(if(syntax?$1 s_800)(syntax-e$1 s_800) s_800)))"
"(if(pair? s_804)"
"(let-values(((#%datum190_805)"
"(let-values(((s_807)(car s_804))) s_807))"
"((datum191_806)(let-values(((s_808)(cdr s_804))) s_808)))"
"(values #%datum190_805 datum191_806))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_801)))))"
"(values #t #%datum188_802 datum189_803))))))"
"(let-values(((datum_797) datum189_786))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_797)(keyword?(syntax-e$1 datum_797)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_797))"
"(void))"
"(values))))"
"(let-values(((phase_798)(expand-context-phase ctx_782)))"
"(let-values(((s192_809) s_781)"
"((disarmed-s193_810) disarmed-s_783)"
"((temp194_811)"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_798) 'quote)"
" datum_797)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s192_809 disarmed-s193_810 temp194_811)"
"(rebuild53.1 s192_809 disarmed-s193_810 temp194_811))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_812 ctx_813)"
"(let-values((()"
"(begin"
"(let-values(((obs_829)(expand-context-observer ctx_813)))"
"(if obs_829(let-values()(let-values()(call-expand-observe obs_829 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_814)(syntax-disarm$1 s_812)))"
"(let-values(((ok?_815 #%app195_816 e196_817)"
"(let-values(((s_830) disarmed-s_814))"
"(let-values(((orig-s_831) s_830))"
"(let-values(((#%app195_832 e196_833)"
"(let-values(((s_834)(if(syntax?$1 s_830)(syntax-e$1 s_830) s_830)))"
"(if(pair? s_834)"
"(let-values(((#%app197_835)(let-values(((s_837)(car s_834))) s_837))"
"((e198_836)"
"(let-values(((s_838)(cdr s_834)))"
"(let-values(((s_839)"
"(if(syntax?$1 s_838)"
"(syntax-e$1 s_838)"
" s_838)))"
"(let-values(((flat-s_840)(to-syntax-list.1 s_839)))"
"(if(not flat-s_840)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_831))"
"(let-values() flat-s_840)))))))"
"(values #%app197_835 e198_836))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_831)))))"
"(values #t #%app195_832 e196_833))))))"
"(let-values(((es_828) e196_817))"
"(if(null? es_828)"
"(let-values()"
"(let-values(((phase_841)(expand-context-phase ctx_813)))"
"(let-values(((s199_842) s_812)"
"((disarmed-s200_843) disarmed-s_814)"
"((temp201_844)"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_841) 'quote)"
" null)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s199_842 disarmed-s200_843 temp201_844)"
"(rebuild53.1 s199_842 disarmed-s200_843 temp201_844)))))"
"(let-values()"
"(let-values(((expr-ctx_845)(as-expression-context ctx_813)))"
"(let-values(((exp-es_846)"
"(alt-reverse"
"(let-values(((lst_848) es_828))"
"(begin"
"(if(list? lst_848)(void)(let-values()(in-list lst_848)))"
"((letrec-values(((for-loop_849)"
"(lambda(fold-var_850 lst_851)"
"(if(pair? lst_851)"
"(let-values(((e_852)(unsafe-car lst_851)))"
"(let-values(((fold-var_853)"
"(let-values(((fold-var_854)"
" fold-var_850))"
"(let-values(((fold-var_855)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((e205_856)"
" e_852)"
"((expr-ctx206_857)"
" expr-ctx_845))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e205_856"
" expr-ctx206_857)"
"(expand7.1"
" e205_856"
" expr-ctx206_857))))"
" fold-var_854))))"
"(values fold-var_855)))))"
"(for-loop_849 fold-var_853(unsafe-cdr lst_851))))"
" fold-var_850))))"
" for-loop_849)"
" null"
" lst_848))))))"
"(let-values(((prefixless_847)(cdr(syntax-e$1 disarmed-s_814))))"
"(let-values(((s202_858) s_812)"
"((disarmed-s203_859) disarmed-s_814)"
"((temp204_860)"
"(cons"
" #%app195_816"
"(if(syntax?$1 prefixless_847)"
"(let-values(((prefixless207_861) prefixless_847)"
"((prefixless208_862) prefixless_847)"
"((exp-es209_863) exp-es_846))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f prefixless207_861 prefixless208_862 exp-es209_863)"
"(rebuild53.1 prefixless207_861 prefixless208_862 exp-es209_863)))"
" exp-es_846))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s202_858 disarmed-s203_859 temp204_860)"
"(rebuild53.1 s202_858 disarmed-s203_859 temp204_860)))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_864 ctx_865)"
"(let-values((()"
"(begin"
"(let-values(((obs_879)(expand-context-observer ctx_865)))"
"(if obs_879(let-values()(let-values()(call-expand-observe obs_879 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_866 quote210_867 datum211_868)"
"(let-values(((s_880)(syntax-disarm$1 s_864)))"
"(let-values(((orig-s_881) s_880))"
"(let-values(((quote210_882 datum211_883)"
"(let-values(((s_884)(if(syntax?$1 s_880)(syntax-e$1 s_880) s_880)))"
"(if(pair? s_884)"
"(let-values(((quote212_885)(let-values(((s_887)(car s_884))) s_887))"
"((datum213_886)"
"(let-values(((s_888)(cdr s_884)))"
"(let-values(((s_889)"
"(if(syntax?$1 s_888)"
"(syntax-e$1 s_888)"
" s_888)))"
"(if(pair? s_889)"
"(let-values(((datum214_890)"
"(let-values(((s_891)(car s_889)))"
" s_891))"
"(()"
"(let-values(((s_892)(cdr s_889)))"
"(let-values(((s_893)"
"(if(syntax?$1 s_892)"
"(syntax-e$1 s_892)"
" s_892)))"
"(if(null? s_893)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_881))))))"
"(values datum214_890))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_881))))))"
"(values quote212_885 datum213_886))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_881)))))"
"(values #t quote210_882 datum211_883))))))"
" s_864)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_894 ctx_895)"
"(let-values((()"
"(begin"
"(let-values(((obs_923)(expand-context-observer ctx_895)))"
"(if obs_923"
"(let-values()(let-values()(call-expand-observe obs_923 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_896)(syntax-disarm$1 s_894)))"
"(let-values(((ok?_897 quote-syntax215_898 datum216_899)"
"(let-values(((s_924) disarmed-s_896))"
"(if(let-values(((s_925)(if(syntax?$1 s_924)(syntax-e$1 s_924) s_924)))"
"(if(pair? s_925)"
"(if(let-values(((s_926)(car s_925))) #t)"
"(let-values(((s_927)(cdr s_925)))"
"(let-values(((s_928)(if(syntax?$1 s_927)(syntax-e$1 s_927) s_927)))"
"(if(pair? s_928)"
"(if(let-values(((s_929)(car s_928))) #t)"
"(let-values(((s_930)(cdr s_928)))"
"(let-values(((s_931)(if(syntax?$1 s_930)(syntax-e$1 s_930) s_930)))"
"(if(pair? s_931)"
"(if(let-values(((s_932)(car s_931)))"
"(let-values(((s_933)"
"(if(syntax?$1 s_932)(syntax-e$1 s_932) s_932)))"
"(eq? '#:local s_933)))"
"(let-values(((s_934)(cdr s_931)))"
"(let-values(((s_935)"
"(if(syntax?$1 s_934)(syntax-e$1 s_934) s_934)))"
"(null? s_935)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_936) s_924))"
"(let-values(((quote-syntax215_937 datum216_938)"
"(let-values(((s_939)(if(syntax?$1 s_924)(syntax-e$1 s_924) s_924)))"
"(let-values(((quote-syntax217_940)"
"(let-values(((s_942)(car s_939))) s_942))"
"((datum218_941)"
"(let-values(((s_943)(cdr s_939)))"
"(let-values(((s_944)"
"(if(syntax?$1 s_943)"
"(syntax-e$1 s_943)"
" s_943)))"
"(let-values(((datum219_945)"
"(let-values(((s_946)(car s_944)))"
" s_946))"
"(()"
"(let-values(((s_947)(cdr s_944)))"
"(let-values(((s_948)"
"(if(syntax?$1 s_947)"
"(syntax-e$1 s_947)"
" s_947)))"
"(let-values((()"
"(let-values(((s_949)"
"(car"
" s_948)))"
"(let-values(((s_950)"
"(if(syntax?$1"
" s_949)"
"(syntax-e$1"
" s_949)"
" s_949)))"
"(values))))"
"(()"
"(let-values(((s_951)"
"(cdr"
" s_948)))"
"(let-values(((s_952)"
"(if(syntax?$1"
" s_951)"
"(syntax-e$1"
" s_951)"
" s_951)))"
"(values)))))"
"(values))))))"
"(values datum219_945))))))"
"(values quote-syntax217_940 datum218_941)))))"
"(values #t quote-syntax215_937 datum216_938)))"
"(values #f #f #f)))))"
"(let-values(((ok?_910 quote-syntax220_911 datum221_912)"
"(let-values(((s_953) disarmed-s_896))"
"(if(if(not ok?_897) #t #f)"
"(let-values(((orig-s_954) s_953))"
"(let-values(((quote-syntax220_955 datum221_956)"
"(let-values(((s_957)(if(syntax?$1 s_953)(syntax-e$1 s_953) s_953)))"
"(if(pair? s_957)"
"(let-values(((quote-syntax222_958)"
"(let-values(((s_960)(car s_957))) s_960))"
"((datum223_959)"
"(let-values(((s_961)(cdr s_957)))"
"(let-values(((s_962)"
"(if(syntax?$1 s_961)"
"(syntax-e$1 s_961)"
" s_961)))"
"(if(pair? s_962)"
"(let-values(((datum224_963)"
"(let-values(((s_964)(car s_962)))"
" s_964))"
"(()"
"(let-values(((s_965)(cdr s_962)))"
"(let-values(((s_966)"
"(if(syntax?$1"
" s_965)"
"(syntax-e$1"
" s_965)"
" s_965)))"
"(if(null? s_966)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_954))))))"
"(values datum224_963))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_954))))))"
"(values quote-syntax222_958 datum223_959))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_954)))))"
"(values #t quote-syntax220_955 datum221_956)))"
"(values #f #f #f)))))"
"(if ok?_897"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_895))"
"(values))))"
"(let-values(((ok?_967 _225_968 _226_969 kw227_970)"
"(let-values(((s_983) disarmed-s_896))"
"(let-values(((orig-s_984) s_983))"
"(let-values(((_225_985 _226_986 kw227_987)"
"(let-values(((s_988)"
"(if(syntax?$1 s_983)(syntax-e$1 s_983) s_983)))"
"(if(pair? s_988)"
"(let-values(((_228_989)"
"(let-values(((s_992)(car s_988))) s_992))"
"((_229_990 kw230_991)"
"(let-values(((s_993)(cdr s_988)))"
"(let-values(((s_994)"
"(if(syntax?$1 s_993)"
"(syntax-e$1 s_993)"
" s_993)))"
"(if(pair? s_994)"
"(let-values(((_231_995)"
"(let-values(((s_997)"
"(car s_994)))"
" s_997))"
"((kw232_996)"
"(let-values(((s_998)"
"(cdr s_994)))"
"(let-values(((s_999)"
"(if(syntax?$1"
" s_998)"
"(syntax-e$1"
" s_998)"
" s_998)))"
"(if(pair? s_999)"
"(let-values(((kw233_1000)"
"(let-values(((s_1001)"
"(car"
" s_999)))"
" s_1001))"
"(()"
"(let-values(((s_1002)"
"(cdr"
" s_999)))"
"(let-values(((s_1003)"
"(if(syntax?$1"
" s_1002)"
"(syntax-e$1"
" s_1002)"
" s_1002)))"
"(if(null?"
" s_1003)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_984))))))"
"(values kw233_1000))"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_984))))))"
"(values _231_995 kw232_996))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_984))))))"
"(values _228_989 _229_990 kw230_991))"
"                                                         (raise-syntax-error$1 #f \"bad syntax\" orig-s_984)))))"
"(values #t _225_985 _226_986 kw227_987))))))"
"(let-values(((s234_1004) s_894)"
"((disarmed-s235_1005) disarmed-s_896)"
"((temp236_1006)(list quote-syntax215_898 datum216_899 kw227_970)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s234_1004 disarmed-s235_1005 temp236_1006)"
"(rebuild53.1 s234_1004 disarmed-s235_1005 temp236_1006))))))"
"(let-values()"
"(let-values(((s237_1007) s_894)"
"((disarmed-s238_1008) disarmed-s_896)"
"((temp239_1009)"
"(list"
" quote-syntax220_911"
"(remove-scopes datum221_912(expand-context-scopes ctx_895)))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s237_1007 disarmed-s238_1008 temp239_1009)"
"(rebuild53.1 s237_1007 disarmed-s238_1008 temp239_1009))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_1010 ctx_1011)"
"(let-values((()"
"(begin"
"(let-values(((obs_1034)(expand-context-observer ctx_1011)))"
"(if obs_1034(let-values()(let-values()(call-expand-observe obs_1034 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1012)(syntax-disarm$1 s_1010)))"
"(let-values(((ok?_1013 if240_1014 tst241_1015 thn242_1016 els243_1017)"
"(let-values(((s_1035) disarmed-s_1012))"
"(let-values(((orig-s_1036) s_1035))"
"(let-values(((if240_1037 tst241_1038 thn242_1039 els243_1040)"
"(let-values(((s_1041)(if(syntax?$1 s_1035)(syntax-e$1 s_1035) s_1035)))"
"(if(pair? s_1041)"
"(let-values(((if244_1042)(let-values(((s_1046)(car s_1041))) s_1046))"
"((tst245_1043 thn246_1044 els247_1045)"
"(let-values(((s_1047)(cdr s_1041)))"
"(let-values(((s_1048)"
"(if(syntax?$1 s_1047)"
"(syntax-e$1 s_1047)"
" s_1047)))"
"(if(pair? s_1048)"
"(let-values(((tst248_1049)"
"(let-values(((s_1052)(car s_1048)))"
" s_1052))"
"((thn249_1050 els250_1051)"
"(let-values(((s_1053)(cdr s_1048)))"
"(let-values(((s_1054)"
"(if(syntax?$1 s_1053)"
"(syntax-e$1 s_1053)"
" s_1053)))"
"(if(pair? s_1054)"
"(let-values(((thn251_1055)"
"(let-values(((s_1057)"
"(car"
" s_1054)))"
" s_1057))"
"((els252_1056)"
"(let-values(((s_1058)"
"(cdr"
" s_1054)))"
"(let-values(((s_1059)"
"(if(syntax?$1"
" s_1058)"
"(syntax-e$1"
" s_1058)"
" s_1058)))"
"(if(pair?"
" s_1059)"
"(let-values(((els253_1060)"
"(let-values(((s_1061)"
"(car"
" s_1059)))"
" s_1061))"
"(()"
"(let-values(((s_1062)"
"(cdr"
" s_1059)))"
"(let-values(((s_1063)"
"(if(syntax?$1"
" s_1062)"
"(syntax-e$1"
" s_1062)"
" s_1062)))"
"(if(null?"
" s_1063)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1036))))))"
"(values"
" els253_1060))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1036))))))"
"(values"
" thn251_1055"
" els252_1056))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1036))))))"
"(values tst248_1049 thn249_1050 els250_1051))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1036))))))"
"(values if244_1042 tst245_1043 thn246_1044 els247_1045))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1036)))))"
"(values #t if240_1037 tst241_1038 thn242_1039 els243_1040))))))"
"(let-values(((expr-ctx_1032)(as-expression-context ctx_1011)))"
"(let-values(((tail-ctx_1033)"
"(let-values(((...nder/expand/expr.rkt:354:20_1064) as-tail-context14.1)"
"((expr-ctx257_1065) expr-ctx_1032)"
"((ctx258_1066) ctx_1011))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx258_1066 expr-ctx257_1065)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:354:20_1064"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx258_1066)"
" expr-ctx257_1065)))))"
"(begin"
"(let-values(((obs_1067)(expand-context-observer ctx_1011)))"
"(if obs_1067(let-values()(let-values()(call-expand-observe obs_1067 'next-group)))(void)))"
"(let-values(((s254_1068) s_1010)"
"((disarmed-s255_1069) disarmed-s_1012)"
"((temp256_1070)"
"(list"
" if240_1014"
"(let-values(((temp259_1071) tst241_1015)((expr-ctx260_1072) expr-ctx_1032))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp259_1071 expr-ctx260_1072)"
"(expand7.1 temp259_1071 expr-ctx260_1072)))"
"(begin"
"(let-values(((obs_1073)(expand-context-observer ctx_1011)))"
"(if obs_1073"
"(let-values()(let-values()(call-expand-observe obs_1073 'next)))"
"(void)))"
"(let-values(((temp261_1074) thn242_1016)((tail-ctx262_1075) tail-ctx_1033))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp261_1074 tail-ctx262_1075)"
"(expand7.1 temp261_1074 tail-ctx262_1075))))"
"(begin"
"(let-values(((obs_1076)(expand-context-observer ctx_1011)))"
"(if obs_1076"
"(let-values()(let-values()(call-expand-observe obs_1076 'next)))"
"(void)))"
"(let-values(((temp263_1077) els243_1017)((tail-ctx264_1078) tail-ctx_1033))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp263_1077 tail-ctx264_1078)"
"(expand7.1 temp263_1077 tail-ctx264_1078)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s254_1068 disarmed-s255_1069 temp256_1070)"
"(rebuild53.1 s254_1068 disarmed-s255_1069 temp256_1070))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_1079 ctx_1080)"
"(let-values((()"
"(begin"
"(let-values(((obs_1102)(expand-context-observer ctx_1080)))"
"(if obs_1102"
"(let-values()(let-values()(call-expand-observe obs_1102 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1081)(syntax-disarm$1 s_1079)))"
"(let-values(((ok?_1082 with-continuation-mark265_1083 key266_1084 val267_1085 body268_1086)"
"(let-values(((s_1103) disarmed-s_1081))"
"(let-values(((orig-s_1104) s_1103))"
"(let-values(((with-continuation-mark265_1105 key266_1106 val267_1107 body268_1108)"
"(let-values(((s_1109)(if(syntax?$1 s_1103)(syntax-e$1 s_1103) s_1103)))"
"(if(pair? s_1109)"
"(let-values(((with-continuation-mark269_1110)"
"(let-values(((s_1114)(car s_1109))) s_1114))"
"((key270_1111 val271_1112 body272_1113)"
"(let-values(((s_1115)(cdr s_1109)))"
"(let-values(((s_1116)"
"(if(syntax?$1 s_1115)"
"(syntax-e$1 s_1115)"
" s_1115)))"
"(if(pair? s_1116)"
"(let-values(((key273_1117)"
"(let-values(((s_1120)(car s_1116)))"
" s_1120))"
"((val274_1118 body275_1119)"
"(let-values(((s_1121)(cdr s_1116)))"
"(let-values(((s_1122)"
"(if(syntax?$1 s_1121)"
"(syntax-e$1 s_1121)"
" s_1121)))"
"(if(pair? s_1122)"
"(let-values(((val276_1123)"
"(let-values(((s_1125)"
"(car"
" s_1122)))"
" s_1125))"
"((body277_1124)"
"(let-values(((s_1126)"
"(cdr"
" s_1122)))"
"(let-values(((s_1127)"
"(if(syntax?$1"
" s_1126)"
"(syntax-e$1"
" s_1126)"
" s_1126)))"
"(if(pair?"
" s_1127)"
"(let-values(((body278_1128)"
"(let-values(((s_1129)"
"(car"
" s_1127)))"
" s_1129))"
"(()"
"(let-values(((s_1130)"
"(cdr"
" s_1127)))"
"(let-values(((s_1131)"
"(if(syntax?$1"
" s_1130)"
"(syntax-e$1"
" s_1130)"
" s_1130)))"
"(if(null?"
" s_1131)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1104))))))"
"(values"
" body278_1128))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1104))))))"
"(values"
" val276_1123"
" body277_1124))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1104))))))"
"(values key273_1117 val274_1118 body275_1119))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1104))))))"
"(values"
" with-continuation-mark269_1110"
" key270_1111"
" val271_1112"
" body272_1113))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1104)))))"
"(values #t with-continuation-mark265_1105 key266_1106 val267_1107 body268_1108))))))"
"(let-values(((expr-ctx_1101)(as-expression-context ctx_1080)))"
"(let-values(((s279_1132) s_1079)"
"((disarmed-s280_1133) disarmed-s_1081)"
"((temp281_1134)"
"(list"
" with-continuation-mark265_1083"
"(let-values(((temp282_1135) key266_1084)((expr-ctx283_1136) expr-ctx_1101))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp282_1135 expr-ctx283_1136)"
"(expand7.1 temp282_1135 expr-ctx283_1136)))"
"(begin"
"(let-values(((obs_1137)(expand-context-observer ctx_1080)))"
"(if obs_1137"
"(let-values()(let-values()(call-expand-observe obs_1137 'next)))"
"(void)))"
"(let-values(((temp284_1138) val267_1085)((expr-ctx285_1139) expr-ctx_1101))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp284_1138 expr-ctx285_1139)"
"(expand7.1 temp284_1138 expr-ctx285_1139))))"
"(begin"
"(let-values(((obs_1140)(expand-context-observer ctx_1080)))"
"(if obs_1140"
"(let-values()(let-values()(call-expand-observe obs_1140 'next)))"
"(void)))"
"(let-values(((temp286_1141) body268_1086)"
"((temp287_1142)"
"(let-values(((...nder/expand/expr.rkt:383:30_1143) as-tail-context14.1)"
"((expr-ctx288_1144) expr-ctx_1101)"
"((ctx289_1145) ctx_1080))"
"(if(variable-reference-constant?"
"(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx289_1145 expr-ctx288_1144)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:383:30_1143"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx289_1145)"
" expr-ctx288_1144)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp286_1141 temp287_1142)"
"(expand7.1 temp286_1141 temp287_1142)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s279_1132 disarmed-s280_1133 temp281_1134)"
"(rebuild53.1 s279_1132 disarmed-s280_1133 temp281_1134))))))))))"
" print-values)"
"(define-values"
"(lifted/6.1$1 lifted/7.1$1 lifted/8.1$1 lifted/9.1$1 lifted/10.1$1)"
"(make-struct-type"
" 'make-begin"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-begin(case-lambda((self_1146 log-tag_1147)(apply missing-kw self_1146 log-tag_1147 null))))))"
"(current-inspector)"
"(case-lambda((self_1148 log-tag_1149)(apply missing-kw self_1148 log-tag_1149 null)))))"
"(define-values"
"(make-begin17.1)"
"(lambda(list-start-index14_1150 log-tag16_1151)"
"(let-values(((log-tag_1152) log-tag16_1151))"
"(let-values(((list-start-index_1153) list-start-index14_1150))"
"(let-values()"
"(lambda(s_1154 ctx_1155)"
"(let-values((()"
"(begin"
"(let-values(((obs_1174)(expand-context-observer ctx_1155)))"
"(if obs_1174"
"(let-values()(let-values()(call-expand-observe obs_1174 log-tag_1152)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1156)(syntax-disarm$1 s_1154)))"
"(let-values(((ok?_1157 begin290_1158 e291_1159)"
"(let-values(((s_1175) disarmed-s_1156))"
"(let-values(((orig-s_1176) s_1175))"
"(let-values(((begin290_1177 e291_1178)"
"(let-values(((s_1179)"
"(if(syntax?$1 s_1175)(syntax-e$1 s_1175) s_1175)))"
"(if(pair? s_1179)"
"(let-values(((begin292_1180)"
"(let-values(((s_1182)(car s_1179))) s_1182))"
"((e293_1181)"
"(let-values(((s_1183)(cdr s_1179)))"
"(let-values(((s_1184)"
"(if(syntax?$1 s_1183)"
"(syntax-e$1 s_1183)"
" s_1183)))"
"(let-values(((flat-s_1185)"
"(to-syntax-list.1 s_1184)))"
"(if(not flat-s_1185)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                             \"bad syntax\""
" orig-s_1176))"
"(if(null? flat-s_1185)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                               \"bad syntax\""
" orig-s_1176))"
"(let-values() flat-s_1185))))))))"
"(values begin292_1180 e293_1181))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_1176)))))"
"(values #t begin290_1177 e291_1178))))))"
"(let-values(((expr-ctx_1170)(as-expression-context ctx_1155)))"
"(let-values(((es_1171) e291_1159))"
"(let-values(((last-i_1172)(sub1(length es_1171))))"
"(let-values(((exp-es_1173)"
"(alt-reverse"
"(let-values(((lst_1186) es_1171)((start_1187) 0))"
"(begin"
"(if(list? lst_1186)(void)(let-values()(in-list lst_1186)))"
"(if(exact-nonnegative-integer? start_1187)"
"(void)"
"(let-values()(in-naturals start_1187)))"
"((letrec-values(((for-loop_1188)"
"(lambda(fold-var_1189 lst_1190 pos_1191)"
"(if(if(pair? lst_1190) #t #f)"
"(let-values(((e_1192)(unsafe-car lst_1190))"
"((i_1193) pos_1191))"
"(let-values(((fold-var_1194)"
"(let-values(((fold-var_1195)"
" fold-var_1189))"
"(let-values(((fold-var_1196)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(if(="
" i_1193"
" list-start-index_1153)"
"(let-values()"
"(let-values(((obs_1197)"
"(expand-context-observer"
" ctx_1155)))"
"(if obs_1197"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1197"
" 'enter-list"
"(list-tail"
" es_1171"
" i_1193))))"
"(void))))"
"(void))"
"(let-values(((obs_1198)"
"(expand-context-observer"
" ctx_1155)))"
"(if obs_1198"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1198"
" 'next)))"
"(void)))"
"(let-values(((e297_1199)"
" e_1192)"
"((temp298_1200)"
"(if(="
" i_1193"
" last-i_1172)"
"(let-values(((...nder/expand/expr.rkt:400:21_1201)"
" as-tail-context14.1)"
"((expr-ctx299_1202)"
" expr-ctx_1170)"
"((ctx300_1203)"
" ctx_1155))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx300_1203"
" expr-ctx299_1202)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:400:21_1201"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx300_1203)"
" expr-ctx299_1202)))"
" expr-ctx_1170)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e297_1199"
" temp298_1200)"
"(expand7.1"
" e297_1199"
" temp298_1200)))))"
" fold-var_1195))))"
"(values fold-var_1196)))))"
"(for-loop_1188"
" fold-var_1194"
"(unsafe-cdr lst_1190)"
"(+ pos_1191 1))))"
" fold-var_1189))))"
" for-loop_1188)"
" null"
" lst_1186"
" start_1187))))))"
"(begin"
"(if(if(= 1 list-start-index_1153)(null?(cdr es_1171)) #f)"
"(let-values()"
"(let-values(((obs_1204)(expand-context-observer ctx_1155)))"
"(if obs_1204"
"(let-values()"
"(let-values()(call-expand-observe obs_1204 'enter-list(cdr es_1171))))"
"(void))))"
"(void))"
"(let-values(((obs_1205)(expand-context-observer ctx_1155)))"
"(if obs_1205"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1205"
" 'exit-list"
"(list-tail exp-es_1173 list-start-index_1153))))"
"(void)))"
"(let-values(((s294_1206) s_1154)"
"((disarmed-s295_1207) disarmed-s_1156)"
"((temp296_1208)(cons begin290_1158 exp-es_1173)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s294_1206 disarmed-s295_1207 temp296_1208)"
"(rebuild53.1 s294_1206 disarmed-s295_1207 temp296_1208)))))))))))))))))"
"(define-values"
"(unpack18.1)"
"(lambda(given-kws_1209 given-args_1210 log-tag16_1211)"
"(let-values(((list-start-index14_1212)(car given-args_1210)))"
"(make-begin17.1 list-start-index14_1212 log-tag16_1211))))"
"(define-values"
"(make-begin19.1)"
"(lifted/7.1$1"
"(lambda(given-kws_1213 given-argc_1214)"
"(if(= given-argc_1214 3)"
"(let-values(((l2_1215) given-kws_1213))"
"(if(pair? l2_1215)(if(eq?(car l2_1215) '#:list-start-index)(null?(cdr l2_1215)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1216 given-args_1217 log-tag_1218)(unpack18.1 given-kws_1216 given-args_1217 log-tag_1218)))"
" '(#:list-start-index)"
" '(#:list-start-index)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((nonempty-begin_1219)"
"(let-values(((...nder/expand/expr.rkt:412:23_1220) make-begin19.1)"
"((temp301_1221) 'prim-begin0)"
"((temp302_1222) 0))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp302_1222 temp301_1221)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:412:23_1220"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp302_1222)"
" temp301_1221)))))"
"(lambda(s_1223 ctx_1224)"
"(let-values(((context_1225)(expand-context-context ctx_1224)))"
"(if(let-values(((or-part_1226)(eq? context_1225 'top-level)))"
"(if or-part_1226 or-part_1226(eq? context_1225 'module)))"
"(let-values()"
"(let-values(((disarmed-s_1227)(syntax-disarm$1 s_1223)))"
"(let-values(((ok?_1228 begin303_1229)"
"(let-values(((s_1238) disarmed-s_1227))"
"(if(let-values(((s_1239)(if(syntax?$1 s_1238)(syntax-e$1 s_1238) s_1238)))"
"(if(pair? s_1239)"
"(if(let-values(((s_1240)(car s_1239))) #t)"
"(let-values(((s_1241)(cdr s_1239)))"
"(let-values(((s_1242)(if(syntax?$1 s_1241)(syntax-e$1 s_1241) s_1241)))"
"(null? s_1242)))"
" #f)"
" #f))"
"(let-values(((orig-s_1243) s_1238))"
"(let-values(((begin303_1244)"
"(let-values(((s_1245)"
"(if(syntax?$1 s_1238)(syntax-e$1 s_1238) s_1238)))"
"(let-values(((begin304_1246)"
"(let-values(((s_1247)(car s_1245))) s_1247))"
"(()"
"(let-values(((s_1248)(cdr s_1245)))"
"(let-values(((s_1249)"
"(if(syntax?$1 s_1248)"
"(syntax-e$1 s_1248)"
" s_1248)))"
"(values)))))"
"(values begin304_1246)))))"
"(values #t begin303_1244)))"
"(values #f #f)))))"
"(if ok?_1228 s_1223(nonempty-begin_1219 s_1223 ctx_1224)))))"
"(let-values()(nonempty-begin_1219 s_1223 ctx_1224))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((...nder/expand/expr.rkt:429:1_1250) make-begin19.1)"
"((temp305_1251) 'prim-begin0)"
"((temp306_1252) 1))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp306_1252 temp305_1251)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:429:1_1250"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp306_1252)"
" temp305_1251)))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_1253 ctx_1254)"
"(if(if(expand-context-need-eventually-defined ctx_1254)(>=(expand-context-phase ctx_1254) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_1254)"
"(expand-context-phase ctx_1254)"
"(lambda(l_1255)(cons id_1253 l_1255))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core311_1256)"
"(lambda(s309_1257 ctx310_1258 implicit-omitted?307_1259 implicit-omitted?308_1260)"
"(let-values(((s_1261) s309_1257))"
"(let-values(((ctx_1262) ctx310_1258))"
"(let-values(((implicit-omitted?_1263)"
"(if implicit-omitted?308_1260 implicit-omitted?307_1259 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1267)(expand-context-observer ctx_1262)))"
"(if obs_1267"
"(let-values()"
"(let-values()(call-expand-observe obs_1267 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1264)(syntax-disarm$1 s_1261)))"
"(let-values(((id_1265)"
"(if implicit-omitted?_1263"
"(let-values() s_1261)"
"(let-values()"
"(let-values(((ok?_1268 #%top313_1269 id314_1270)"
"(let-values(((s_1281) disarmed-s_1264))"
"(let-values(((orig-s_1282) s_1281))"
"(let-values(((#%top313_1283 id314_1284)"
"(let-values(((s_1285)"
"(if(syntax?$1 s_1281)"
"(syntax-e$1 s_1281)"
" s_1281)))"
"(if(pair? s_1285)"
"(let-values(((#%top315_1286)"
"(let-values(((s_1288)"
"(car"
" s_1285)))"
" s_1288))"
"((id316_1287)"
"(let-values(((s_1289)"
"(cdr"
" s_1285)))"
"(if(let-values(((or-part_1290)"
"(if(syntax?$1"
" s_1289)"
"(symbol?"
"(syntax-e$1"
" s_1289))"
" #f)))"
"(if or-part_1290"
" or-part_1290"
"(symbol?"
" s_1289)))"
" s_1289"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_1282"
" s_1289)))))"
"(values"
" #%top315_1286"
" id316_1287))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1282)))))"
"(values #t #%top313_1283 id314_1284))))))"
" id314_1270)))))"
"(let-values(((b_1266)"
"(let-values(((...nder/expand/expr.rkt:457:13_1291) resolve+shift22.1)"
"((id317_1292) id_1265)"
"((temp318_1293)(expand-context-phase ctx_1262))"
"((temp319_1294) 'ambiguous))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" temp319_1294"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id317_1292"
" temp318_1293)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:457:13_1291"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp319_1294)"
" id317_1292"
" temp318_1293)))))"
"(if(eq? b_1266 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1265 ctx_1262))"
"(if(if b_1266"
"(if(module-binding? b_1266)"
"(eq?"
"(module-binding-module b_1266)"
"(namespace-mpi(expand-context-namespace ctx_1262)))"
" #f)"
" #f)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_1266))"
"(let-values() s_1261)"
"(let-values() id_1265)))"
"(if(register-eventual-variable!? id_1265 ctx_1262)"
"(let-values() id_1265)"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1262))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1265"
" #f"
" null"
"(syntax-debug-info-string id_1265 ctx_1262)))"
"(let-values()"
"(let-values(((tl-id_1295)"
"(add-scope"
" id_1265"
"(root-expand-context-top-level-bind-scope ctx_1262))))"
"(if(let-values(((tl-id320_1296) tl-id_1295)"
"((temp321_1297)(expand-context-phase ctx_1262)))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve31.1))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" tl-id320_1296"
" temp321_1297)"
"(resolve31.1 tl-id320_1296 temp321_1297)))"
"(let-values()"
"(if implicit-omitted?_1263"
"(let-values() id_1265)"
"(let-values()"
"(let-values(((ok?_1298 #%top322_1299 id323_1300)"
"(let-values(((s_1311) disarmed-s_1264))"
"(let-values(((orig-s_1312) s_1311))"
"(let-values(((#%top322_1313 id323_1314)"
"(let-values(((s_1315)"
"(if(syntax?$1"
" s_1311)"
"(syntax-e$1"
" s_1311)"
" s_1311)))"
"(if(pair? s_1315)"
"(let-values(((#%top324_1316)"
"(let-values(((s_1318)"
"(car"
" s_1315)))"
" s_1318))"
"((id325_1317)"
"(let-values(((s_1319)"
"(cdr"
" s_1315)))"
"(if(let-values(((or-part_1320)"
"(if(syntax?$1"
" s_1319)"
"(symbol?"
"(syntax-e$1"
" s_1319))"
" #f)))"
"(if or-part_1320"
" or-part_1320"
"(symbol?"
" s_1319)))"
" s_1319"
"(raise-syntax-error$1"
" #f"
"                                                                                                                  \"not an identifier\""
" orig-s_1312"
" s_1319)))))"
"(values"
" #%top324_1316"
" id325_1317))"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_1312)))))"
"(values #t #%top322_1313 id323_1314))))))"
"(let-values(((s326_1321) s_1261)"
"((disarmed-s327_1322) disarmed-s_1264)"
"((temp328_1323)(cons #%top322_1299 id_1265)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" s326_1321"
" disarmed-s327_1322"
" temp328_1323)"
"(rebuild53.1"
" s326_1321"
" disarmed-s327_1322"
" temp328_1323)))))))"
"(let-values() s_1261))))))))))))))))))))"
"(case-lambda"
"((s_1324 ctx_1325)(core311_1256 s_1324 ctx_1325 #f #f))"
"((s_1326 ctx_1327 implicit-omitted?307_1328)(core311_1256 s_1326 ctx_1327 implicit-omitted?307_1328 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_1329 ctx_1330)"
"(let-values((()"
"(begin"
"(let-values(((obs_1349)(expand-context-observer ctx_1330)))"
"(if obs_1349(let-values()(let-values()(call-expand-observe obs_1349 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1331)(syntax-disarm$1 s_1329)))"
"(let-values(((ok?_1332 set!329_1333 id330_1334 rhs331_1335)"
"(let-values(((s_1350) disarmed-s_1331))"
"(let-values(((orig-s_1351) s_1350))"
"(let-values(((set!329_1352 id330_1353 rhs331_1354)"
"(let-values(((s_1355)(if(syntax?$1 s_1350)(syntax-e$1 s_1350) s_1350)))"
"(if(pair? s_1355)"
"(let-values(((set!332_1356)"
"(let-values(((s_1359)(car s_1355))) s_1359))"
"((id333_1357 rhs334_1358)"
"(let-values(((s_1360)(cdr s_1355)))"
"(let-values(((s_1361)"
"(if(syntax?$1 s_1360)"
"(syntax-e$1 s_1360)"
" s_1360)))"
"(if(pair? s_1361)"
"(let-values(((id335_1362)"
"(let-values(((s_1364)(car s_1361)))"
"(if(let-values(((or-part_1365)"
"(if(syntax?$1"
" s_1364)"
"(symbol?"
"(syntax-e$1"
" s_1364))"
" #f)))"
"(if or-part_1365"
" or-part_1365"
"(symbol? s_1364)))"
" s_1364"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"not an identifier\""
" orig-s_1351"
" s_1364))))"
"((rhs336_1363)"
"(let-values(((s_1366)(cdr s_1361)))"
"(let-values(((s_1367)"
"(if(syntax?$1 s_1366)"
"(syntax-e$1 s_1366)"
" s_1366)))"
"(if(pair? s_1367)"
"(let-values(((rhs337_1368)"
"(let-values(((s_1369)"
"(car"
" s_1367)))"
" s_1369))"
"(()"
"(let-values(((s_1370)"
"(cdr"
" s_1367)))"
"(let-values(((s_1371)"
"(if(syntax?$1"
" s_1370)"
"(syntax-e$1"
" s_1370)"
" s_1370)))"
"(if(null?"
" s_1371)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1351))))))"
"(values rhs337_1368))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1351))))))"
"(values id335_1362 rhs336_1363))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1351))))))"
"(values set!332_1356 id333_1357 rhs334_1358))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1351)))))"
"(values #t set!329_1352 id330_1353 rhs331_1354))))))"
"(let-values(((id_1348) id330_1334))"
"((letrec-values(((rename-loop_1372)"
"(lambda(id_1373 from-rename?_1374)"
"(let-values(((binding_1375)"
"(let-values(((...nder/expand/expr.rkt:504:21_1378) resolve+shift22.1)"
"((id338_1379) id_1373)"
"((temp339_1380)(expand-context-phase ctx_1330))"
"((temp340_1381) 'ambiguous)"
"((temp341_1382) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" temp340_1381"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp341_1382"
" #t"
" #f"
" #f"
" id338_1379"
" temp339_1380)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:504:21_1378"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp340_1381 temp341_1382)"
" id338_1379"
" temp339_1380)))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1375 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1373 ctx_1330))"
"(void))"
"(values))))"
"(let-values(((t_1376 insp_1377)"
"(if binding_1375"
"(let-values(((binding342_1383) binding_1375)"
"((ctx343_1384) ctx_1330)"
"((s344_1385) s_1329))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" #f"
" #f"
" binding342_1383"
" ctx343_1384"
" s344_1385)"
"(lookup17.1 binding342_1383 ctx343_1384 s344_1385)))"
"(values #f #f))))"
"(begin"
"(let-values(((obs_1386)(expand-context-observer ctx_1330)))"
"(if obs_1386"
"(let-values()"
"(let-values()(call-expand-observe obs_1386 'resolve id_1373)))"
"(void)))"
"(if(let-values(((or-part_1387)(variable? t_1376)))"
"(if or-part_1387"
" or-part_1387"
"(if(not binding_1375)"
"(let-values(((or-part_1388)"
"(register-eventual-variable!? id_1373 ctx_1330)))"
"(if or-part_1388"
" or-part_1388"
"(expand-context-allow-unbound? ctx_1330)))"
" #f)))"
"(let-values()"
"(begin"
"(if(if(module-binding? binding_1375)"
"(not"
"(eq?"
"(module-binding-module binding_1375)"
"(namespace-mpi(expand-context-namespace ctx_1330))))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate module-required identifier\""
" s_1329"
" id_1373))"
"(void))"
"(let-values(((obs_1389)(expand-context-observer ctx_1330)))"
"(if obs_1389"
"(let-values()"
"(let-values()(call-expand-observe obs_1389 'next)))"
"(void)))"
"(register-variable-referenced-if-local! binding_1375)"
"(let-values(((s345_1390) s_1329)"
"((disarmed-s346_1391) disarmed-s_1331)"
"((temp347_1392)"
"(list"
" set!329_1333"
"(let-values(((...nder/expand/expr.rkt:527:14_1393)"
" substitute-variable8.1)"
"((id348_1394) id_1373)"
"((t349_1395) t_1376)"
"((temp350_1396)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops ctx_1330))))"
"(if(variable-reference-constant?"
"(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1"
" temp350_1396"
" id348_1394"
" t349_1395)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:527:14_1393"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp350_1396)"
" id348_1394"
" t349_1395)))"
"(let-values(((temp351_1397) rhs331_1335)"
"((temp352_1398)"
"(as-expression-context ctx_1330)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp351_1397 temp352_1398)"
"(expand7.1 temp351_1397 temp352_1398))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s345_1390 disarmed-s346_1391 temp347_1392)"
"(rebuild53.1 s345_1390 disarmed-s346_1391 temp347_1392)))))"
"(if(not binding_1375)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_1329"
" id_1373"
" null"
"(syntax-debug-info-string id_1373 ctx_1330)))"
"(if(1/set!-transformer? t_1376)"
"(let-values()"
"(if(not-in-this-expand-context? t_1376 ctx_1330)"
"(let-values()"
"(let-values(((temp353_1399)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1329"
" disarmed-s_1331"
" set!329_1333"
" rhs331_1335"
" id_1373"
" from-rename?_1374)"
" t_1376"
" ctx_1330))"
"((ctx354_1400) ctx_1330))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp353_1399 ctx354_1400)"
"(expand7.1 temp353_1399 ctx354_1400))))"
"(let-values()"
"(let-values(((exp-s_1401 re-ctx_1402)"
"(apply-transformer"
" t_1376"
" insp_1377"
" s_1329"
" id_1373"
" ctx_1330"
" binding_1375)))"
"(if(expand-context-just-once? ctx_1330)"
"(let-values() exp-s_1401)"
"(let-values()"
"(let-values(((exp-s355_1403) exp-s_1401)"
"((re-ctx356_1404) re-ctx_1402))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f exp-s355_1403 re-ctx356_1404)"
"(expand7.1 exp-s355_1403 re-ctx356_1404)))))))))"
"(if(1/rename-transformer? t_1376)"
"(let-values()"
"(if(not-in-this-expand-context? t_1376 ctx_1330)"
"(let-values()"
"(let-values(((temp357_1405)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1329"
" disarmed-s_1331"
" set!329_1333"
" rhs331_1335"
" id_1373"
" from-rename?_1374"
" t_1376)"
" t_1376"
" ctx_1330))"
"((ctx358_1406) ctx_1330))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp357_1405 ctx358_1406)"
"(expand7.1 temp357_1405 ctx358_1406))))"
"(let-values()"
"(rename-loop_1372(1/rename-transformer-target t_1376) #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_1329"
" id_1373)))))))))))))"
" rename-loop_1372)"
" id_1348"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename28_1407)"
"(lambda(s22_1408"
" disarmed-s23_1409"
" set!-id24_1410"
" id25_1411"
" rhs-s26_1412"
" from-rename?27_1413"
" t20_1414"
" t21_1415)"
"(let-values(((s_1416) s22_1408))"
"(let-values(((disarmed-s_1417) disarmed-s23_1409))"
"(let-values(((set!-id_1418) set!-id24_1410))"
"(let-values(((id_1419) id25_1411))"
"(let-values(((rhs-s_1420) rhs-s26_1412))"
"(let-values(((from-rename?_1421) from-rename?27_1413))"
"(let-values(((t_1422)(if t21_1415 t20_1414 #f)))"
"(let-values()"
"(if(let-values(((or-part_1423) t_1422))"
"(if or-part_1423 or-part_1423 from-rename?_1421))"
"(let-values()"
"(let-values(((new-id_1424)"
"(if t_1422(1/rename-transformer-target t_1422) id_1419)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_1417"
"(list set!-id_1418 new-id_1424 rhs-s_1420)"
" disarmed-s_1417"
" disarmed-s_1417)"
" s_1416)))"
"(let-values() s_1416)))))))))))))"
"(case-lambda"
"((s_1425 disarmed-s_1426 set!-id_1427 id_1428 rhs-s_1429 from-rename?_1430)"
"(substitute-set!-rename28_1407 s_1425 disarmed-s_1426 set!-id_1427 id_1428 rhs-s_1429 from-rename?_1430 #f #f))"
"((s_1431 disarmed-s_1432 set!-id_1433 id_1434 rhs-s_1435 from-rename?_1436 t20_1437)"
"(substitute-set!-rename28_1407"
" s_1431"
" disarmed-s_1432"
" set!-id_1433"
" id_1434"
" rhs-s_1435"
" from-rename?_1436"
" t20_1437"
" #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_1438 ctx_1439)"
"(let-values((()"
"(begin"
"(let-values(((obs_1480)(expand-context-observer ctx_1439)))"
"(if obs_1480"
"(let-values()(let-values()(call-expand-observe obs_1480 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1440)(syntax-disarm$1 s_1438)))"
"(let-values(((ok?_1441 #%variable-reference359_1442 id360_1443)"
"(let-values(((s_1481) disarmed-s_1440))"
"(if(let-values(((s_1482)(if(syntax?$1 s_1481)(syntax-e$1 s_1481) s_1481)))"
"(if(pair? s_1482)"
"(if(let-values(((s_1483)(car s_1482))) #t)"
"(let-values(((s_1484)(cdr s_1482)))"
"(let-values(((s_1485)(if(syntax?$1 s_1484)(syntax-e$1 s_1484) s_1484)))"
"(if(pair? s_1485)"
"(if(let-values(((s_1486)(car s_1485)))"
"(if(syntax?$1 s_1486)(symbol?(syntax-e$1 s_1486)) #f))"
"(let-values(((s_1487)(cdr s_1485)))"
"(let-values(((s_1488)"
"(if(syntax?$1 s_1487)(syntax-e$1 s_1487) s_1487)))"
"(null? s_1488)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_1489) s_1481))"
"(let-values(((#%variable-reference359_1490 id360_1491)"
"(let-values(((s_1492)(if(syntax?$1 s_1481)(syntax-e$1 s_1481) s_1481)))"
"(let-values(((#%variable-reference361_1493)"
"(let-values(((s_1495)(car s_1492))) s_1495))"
"((id362_1494)"
"(let-values(((s_1496)(cdr s_1492)))"
"(let-values(((s_1497)"
"(if(syntax?$1 s_1496)"
"(syntax-e$1 s_1496)"
" s_1496)))"
"(let-values(((id363_1498)"
"(let-values(((s_1499)(car s_1497)))"
" s_1499))"
"(()"
"(let-values(((s_1500)(cdr s_1497)))"
"(let-values(((s_1501)"
"(if(syntax?$1 s_1500)"
"(syntax-e$1 s_1500)"
" s_1500)))"
"(values)))))"
"(values id363_1498))))))"
"(values #%variable-reference361_1493 id362_1494)))))"
"(values #t #%variable-reference359_1490 id360_1491)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1454 #%variable-reference364_1455 #%top365_1456 id366_1457)"
"(let-values(((s_1502) disarmed-s_1440))"
"(if(if(not ok?_1441)"
"(let-values(((s_1503)(if(syntax?$1 s_1502)(syntax-e$1 s_1502) s_1502)))"
"(if(pair? s_1503)"
"(if(let-values(((s_1504)(car s_1503))) #t)"
"(let-values(((s_1505)(cdr s_1503)))"
"(let-values(((s_1506)(if(syntax?$1 s_1505)(syntax-e$1 s_1505) s_1505)))"
"(if(pair? s_1506)"
"(if(let-values(((s_1507)(car s_1506)))"
"(let-values(((s_1508)"
"(if(syntax?$1 s_1507)(syntax-e$1 s_1507) s_1507)))"
"(if(pair? s_1508)"
"(if(let-values(((s_1509)(car s_1508))) #t)"
"(let-values(((s_1510)(cdr s_1508)))"
"(if(syntax?$1 s_1510)(symbol?(syntax-e$1 s_1510)) #f))"
" #f)"
" #f)))"
"(let-values(((s_1511)(cdr s_1506)))"
"(let-values(((s_1512)"
"(if(syntax?$1 s_1511)(syntax-e$1 s_1511) s_1511)))"
"(null? s_1512)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1513) s_1502))"
"(let-values(((#%variable-reference364_1514 #%top365_1515 id366_1516)"
"(let-values(((s_1517)"
"(if(syntax?$1 s_1502)(syntax-e$1 s_1502) s_1502)))"
"(let-values(((#%variable-reference367_1518)"
"(let-values(((s_1521)(car s_1517))) s_1521))"
"((#%top368_1519 id369_1520)"
"(let-values(((s_1522)(cdr s_1517)))"
"(let-values(((s_1523)"
"(if(syntax?$1 s_1522)"
"(syntax-e$1 s_1522)"
" s_1522)))"
"(let-values(((#%top370_1524 id371_1525)"
"(let-values(((s_1526)(car s_1523)))"
"(let-values(((s_1527)"
"(if(syntax?$1 s_1526)"
"(syntax-e$1 s_1526)"
" s_1526)))"
"(let-values(((#%top372_1528)"
"(let-values(((s_1530)"
"(car"
" s_1527)))"
" s_1530))"
"((id373_1529)"
"(let-values(((s_1531)"
"(cdr"
" s_1527)))"
" s_1531)))"
"(values"
" #%top372_1528"
" id373_1529)))))"
"(()"
"(let-values(((s_1532)(cdr s_1523)))"
"(let-values(((s_1533)"
"(if(syntax?$1 s_1532)"
"(syntax-e$1 s_1532)"
" s_1532)))"
"(values)))))"
"(values #%top370_1524 id371_1525))))))"
"(values #%variable-reference367_1518 #%top368_1519 id369_1520)))))"
"(values #t #%variable-reference364_1514 #%top365_1515 id366_1516)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1470 #%variable-reference374_1471)"
"(let-values(((s_1534) disarmed-s_1440))"
"(if(if(not"
"(let-values(((or-part_1535) ok?_1441))"
"(if or-part_1535 or-part_1535 ok?_1454)))"
" #t"
" #f)"
"(let-values(((orig-s_1536) s_1534))"
"(let-values(((#%variable-reference374_1537)"
"(let-values(((s_1538)"
"(if(syntax?$1 s_1534)(syntax-e$1 s_1534) s_1534)))"
"(if(pair? s_1538)"
"(let-values(((#%variable-reference375_1539)"
"(let-values(((s_1540)(car s_1538))) s_1540))"
"(()"
"(let-values(((s_1541)(cdr s_1538)))"
"(let-values(((s_1542)"
"(if(syntax?$1 s_1541)"
"(syntax-e$1 s_1541)"
" s_1541)))"
"(if(null? s_1542)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1536))))))"
"(values #%variable-reference375_1539))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1536)))))"
"(values #t #%variable-reference374_1537)))"
"(values #f #f)))))"
"(begin"
"(if(let-values(((or-part_1543) ok?_1441))(if or-part_1543 or-part_1543 ok?_1454))"
"(let-values()"
"(let-values(((var-id_1544)(if ok?_1441 id360_1443 id366_1457)))"
"(let-values(((binding_1545)"
"(let-values(((...nder/expand/expr.rkt:572:21_1546) resolve+shift22.1)"
"((var-id376_1547) var-id_1544)"
"((temp377_1548)(expand-context-phase ctx_1439))"
"((temp378_1549) 'ambiguous))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1"
" temp378_1549"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" var-id376_1547"
" temp377_1548)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:572:21_1546"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp378_1549)"
" var-id376_1547"
" temp377_1548)))))"
"(begin"
"(if(eq? binding_1545 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1544 ctx_1439))"
"(void))"
"(if binding_1545"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                  \"unbound identifier\""
" s_1438"
" var-id_1544"
" null"
"(syntax-debug-info-string var-id_1544 ctx_1439))))))))"
"(void))"
" s_1438)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_1550 ctx_1551)"
"(let-values((()"
"(begin"
"(let-values(((obs_1567)(expand-context-observer ctx_1551)))"
"(if obs_1567"
"(let-values()(let-values()(call-expand-observe obs_1567 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1552)(syntax-disarm$1 s_1550)))"
"(let-values(((ok?_1553 #%expression379_1554 e380_1555)"
"(let-values(((s_1568) disarmed-s_1552))"
"(let-values(((orig-s_1569) s_1568))"
"(let-values(((#%expression379_1570 e380_1571)"
"(let-values(((s_1572)(if(syntax?$1 s_1568)(syntax-e$1 s_1568) s_1568)))"
"(if(pair? s_1572)"
"(let-values(((#%expression381_1573)"
"(let-values(((s_1575)(car s_1572))) s_1575))"
"((e382_1574)"
"(let-values(((s_1576)(cdr s_1572)))"
"(let-values(((s_1577)"
"(if(syntax?$1 s_1576)"
"(syntax-e$1 s_1576)"
" s_1576)))"
"(if(pair? s_1577)"
"(let-values(((e383_1578)"
"(let-values(((s_1579)(car s_1577)))"
" s_1579))"
"(()"
"(let-values(((s_1580)(cdr s_1577)))"
"(let-values(((s_1581)"
"(if(syntax?$1 s_1580)"
"(syntax-e$1 s_1580)"
" s_1580)))"
"(if(null? s_1581)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1569))))))"
"(values e383_1578))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1569))))))"
"(values #%expression381_1573 e382_1574))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1569)))))"
"(values #t #%expression379_1570 e380_1571))))))"
"(let-values(((exp-e_1566)"
"(let-values(((temp384_1582) e380_1555)"
"((temp385_1583)"
"(let-values(((...nder/expand/expr.rkt:587:32_1584) as-tail-context14.1)"
"((temp386_1585)(as-expression-context ctx_1551))"
"((ctx387_1586) ctx_1551))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx387_1586 temp386_1585)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:587:32_1584"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx387_1586)"
" temp386_1585)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp384_1582 temp385_1583)"
"(expand7.1 temp384_1582 temp385_1583)))))"
"(let-values(((tmp_1587)"
"(if(not(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_1551))"
"(expand-context-context ctx_1551)"
" #f)))"
"(if(equal? tmp_1587 'expression)"
"(let-values()"
"(let-values(((result-s_1588)(syntax-track-origin$1 exp-e_1566 s_1550)))"
"(begin"
"(let-values(((obs_1589)(expand-context-observer ctx_1551)))"
"(if obs_1589"
"(let-values()(let-values()(call-expand-observe obs_1589 'tag result-s_1588)))"
"(void)))"
" result-s_1588)))"
"(let-values()"
"(let-values(((s388_1590) s_1550)"
"((disarmed-s389_1591) disarmed-s_1552)"
"((temp390_1592)(list #%expression379_1554 exp-e_1566)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s388_1590 disarmed-s389_1591 temp390_1592)"
"(rebuild53.1 s388_1590 disarmed-s389_1591 temp390_1592)))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_1593 ctx_1594) (raise-syntax-error$1 #f \"not in quasiquote\" s_1593))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_1595 ctx_1596) (raise-syntax-error$1 #f \"not in quasiquote\" s_1595))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_1 id_2 at-phase_3 ns_4)"
"(if(not at-phase_3)"
"(let-values()"
"(let-values(((m_5)(namespace->module ns_4(1/module-path-index-resolve(module-binding-nominal-module b_1)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_1) '#hasheq())"
"(module-binding-nominal-sym b_1)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 insp_8)"
"(let-values(((b1_9) b_1)"
"((empty-env2_10) empty-env)"
"((null3_11) null)"
"((ns4_12) ns_4)"
"((at-phase5_13) at-phase_3)"
"((id6_14) id_2))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup50.1))"
"(binding-lookup48.1 #f #f #f #f b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)"
"(binding-lookup50.1 b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)))))"
"(not(variable? val_7)))))))"
"(void)"
"(void)"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6)"
"(let-values(((ns_7)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_8)"
"(lambda(specs_9 at-phase_10 protected?_11 layer_12)"
"(let-values(((track-stxess_13 exp-specss_14)"
"(let-values(((track-stxes_15 exp-specs_16)"
"(let-values(((lst_17) specs_9))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(track-stxes_19 exp-specs_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((spec_22)"
"(unsafe-car lst_21)))"
"(let-values(((track-stxes_23"
" exp-specs_24)"
"(let-values(((track-stxes_25)"
" track-stxes_19)"
"((exp-specs_26)"
" exp-specs_20))"
"(let-values(((track-stxes_27"
" exp-specs_28)"
"(let-values()"
"(let-values(((track-stxes1_29"
" exp-specs2_30)"
"(let-values()"
"(let-values(((disarmed-spec_31)"
"(syntax-disarm$1"
" spec_22)))"
"(let-values(((fm_32)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_31))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_31)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_31)))"
" #f)"
" #f)))"
"(let-values(((check-nested_33)"
"(lambda(want-layer_34)"
"(if(member"
" want-layer_34"
"(member"
" layer_12"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                            \"nested `~a' not allowed\""
" fm_32)"
" orig-s_2"
" spec_22))))))"
"(let-values(((tmp_35)"
" fm_32))"
"(let-values(((index_36)"
"(if(symbol?"
" tmp_35)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_35"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_36"
" 6)"
"(if(unsafe-fx<"
" index_36"
" 2)"
"(if(unsafe-fx<"
" index_36"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_22)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_22"
" orig-s_2"
"(syntax-e$1"
" spec_22)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                         \"bad syntax\""
" orig-s_2"
" spec_22))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_37"
" for-meta3_38"
" phase-level4_39"
" spec5_40)"
"(let-values(((s_56)"
" disarmed-spec_31))"
"(let-values(((orig-s_57)"
" s_56))"
"(let-values(((for-meta3_58"
" phase-level4_59"
" spec5_60)"
"(let-values(((s_61)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(pair?"
" s_61)"
"(let-values(((for-meta6_62)"
"(let-values(((s_65)"
"(car"
" s_61)))"
" s_65))"
"((phase-level7_63"
" spec8_64)"
"(let-values(((s_66)"
"(cdr"
" s_61)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(if(pair?"
" s_67)"
"(let-values(((phase-level9_68)"
"(let-values(((s_70)"
"(car"
" s_67)))"
" s_70))"
"((spec10_69)"
"(let-values(((s_71)"
"(cdr"
" s_67)))"
"(let-values(((s_72)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(let-values(((flat-s_73)"
"(to-syntax-list.1"
" s_72)))"
"(if(not"
" flat-s_73)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_57))"
"(let-values()"
" flat-s_73)))))))"
"(values"
" phase-level9_68"
" spec10_69))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_57))))))"
"(values"
" for-meta6_62"
" phase-level7_63"
" spec8_64))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_57)))))"
"(values"
" #t"
" for-meta3_58"
" phase-level4_59"
" spec5_60))))))"
"(let-values(((p_53)"
"(syntax-e$1"
" phase-level4_39)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_53)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"bad `for-meta' phase\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((track-stxes_54"
" exp-specs_55)"
"(loop_8"
" spec5_40"
"(phase+"
" p_53"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_54"
"(let-values(((spec11_74)"
" spec_22)"
"((spec12_75)"
" spec_22)"
"((temp13_76)"
"(list*"
" for-meta3_38"
" phase-level4_39"
" exp-specs_55)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" spec11_74"
" spec12_75"
" temp13_76)"
"(rebuild53.1"
" spec11_74"
" spec12_75"
" temp13_76)))))))))))))"
"(if(unsafe-fx<"
" index_36"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_77"
" for-syntax14_78"
" spec15_79)"
"(let-values(((s_92)"
" disarmed-spec_31))"
"(let-values(((orig-s_93)"
" s_92))"
"(let-values(((for-syntax14_94"
" spec15_95)"
"(let-values(((s_96)"
"(if(syntax?$1"
" s_92)"
"(syntax-e$1"
" s_92)"
" s_92)))"
"(if(pair?"
" s_96)"
"(let-values(((for-syntax16_97)"
"(let-values(((s_99)"
"(car"
" s_96)))"
" s_99))"
"((spec17_98)"
"(let-values(((s_100)"
"(cdr"
" s_96)))"
"(let-values(((s_101)"
"(if(syntax?$1"
" s_100)"
"(syntax-e$1"
" s_100)"
" s_100)))"
"(let-values(((flat-s_102)"
"(to-syntax-list.1"
" s_101)))"
"(if(not"
" flat-s_102)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_93))"
"(let-values()"
" flat-s_102)))))))"
"(values"
" for-syntax16_97"
" spec17_98))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_93)))))"
"(values"
" #t"
" for-syntax14_94"
" spec15_95))))))"
"(let-values(((track-stxes_90"
" exp-specs_91)"
"(loop_8"
" spec15_79"
"(phase+"
" 1"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_90"
"(let-values(((spec18_103)"
" spec_22)"
"((spec19_104)"
" spec_22)"
"((temp20_105)"
"(list*"
" for-syntax14_78"
" exp-specs_91)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" spec18_103"
" spec19_104"
" temp20_105)"
"(rebuild53.1"
" spec18_103"
" spec19_104"
" temp20_105))))))))))"
"(if(unsafe-fx<"
" index_36"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_106"
" for-label21_107"
" spec22_108)"
"(let-values(((s_121)"
" disarmed-spec_31))"
"(let-values(((orig-s_122)"
" s_121))"
"(let-values(((for-label21_123"
" spec22_124)"
"(let-values(((s_125)"
"(if(syntax?$1"
" s_121)"
"(syntax-e$1"
" s_121)"
" s_121)))"
"(if(pair?"
" s_125)"
"(let-values(((for-label23_126)"
"(let-values(((s_128)"
"(car"
" s_125)))"
" s_128))"
"((spec24_127)"
"(let-values(((s_129)"
"(cdr"
" s_125)))"
"(let-values(((s_130)"
"(if(syntax?$1"
" s_129)"
"(syntax-e$1"
" s_129)"
" s_129)))"
"(let-values(((flat-s_131)"
"(to-syntax-list.1"
" s_130)))"
"(if(not"
" flat-s_131)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_122))"
"(let-values()"
" flat-s_131)))))))"
"(values"
" for-label23_126"
" spec24_127))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_122)))))"
"(values"
" #t"
" for-label21_123"
" spec22_124))))))"
"(let-values(((track-stxes_119"
" exp-specs_120)"
"(loop_8"
" spec22_108"
" #f"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_119"
"(let-values(((spec25_132)"
" spec_22)"
"((spec26_133)"
" spec_22)"
"((temp27_134)"
"(list*"
" for-label21_107"
" exp-specs_120)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" spec25_132"
" spec26_133"
" temp27_134)"
"(rebuild53.1"
" spec25_132"
" spec26_133"
" temp27_134))))))))))"
"(if(unsafe-fx<"
" index_36"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_11"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"nested `protect' not allowed\""
" orig-s_2"
" spec_22))"
"(void))"
"(values))))"
"(let-values(((ok?_135"
" protect28_136"
" p-spec29_137)"
"(let-values(((s_150)"
" disarmed-spec_31))"
"(let-values(((orig-s_151)"
" s_150))"
"(let-values(((protect28_152"
" p-spec29_153)"
"(let-values(((s_154)"
"(if(syntax?$1"
" s_150)"
"(syntax-e$1"
" s_150)"
" s_150)))"
"(if(pair?"
" s_154)"
"(let-values(((protect30_155)"
"(let-values(((s_157)"
"(car"
" s_154)))"
" s_157))"
"((p-spec31_156)"
"(let-values(((s_158)"
"(cdr"
" s_154)))"
"(let-values(((s_159)"
"(if(syntax?$1"
" s_158)"
"(syntax-e$1"
" s_158)"
" s_158)))"
"(let-values(((flat-s_160)"
"(to-syntax-list.1"
" s_159)))"
"(if(not"
" flat-s_160)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_151))"
"(let-values()"
" flat-s_160)))))))"
"(values"
" protect30_155"
" p-spec31_156))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_151)))))"
"(values"
" #t"
" protect28_152"
" p-spec29_153))))))"
"(let-values(((track-stxes_148"
" exp-specs_149)"
"(loop_8"
" p-spec29_137"
" at-phase_10"
" #t"
" layer_12)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_148"
"(let-values(((spec32_161)"
" spec_22)"
"((spec33_162)"
" spec_22)"
"((temp34_163)"
"(list*"
" protect28_136"
" exp-specs_149)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" spec32_161"
" spec33_162"
" temp34_163)"
"(rebuild53.1"
" spec32_161"
" spec33_162"
" temp34_163)))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_164"
" rename35_165"
" id:from36_166"
" id:to37_167)"
"(let-values(((s_180)"
" disarmed-spec_31))"
"(let-values(((orig-s_181)"
" s_180))"
"(let-values(((rename35_182"
" id:from36_183"
" id:to37_184)"
"(let-values(((s_185)"
"(if(syntax?$1"
" s_180)"
"(syntax-e$1"
" s_180)"
" s_180)))"
"(if(pair?"
" s_185)"
"(let-values(((rename38_186)"
"(let-values(((s_189)"
"(car"
" s_185)))"
" s_189))"
"((id:from39_187"
" id:to40_188)"
"(let-values(((s_190)"
"(cdr"
" s_185)))"
"(let-values(((s_191)"
"(if(syntax?$1"
" s_190)"
"(syntax-e$1"
" s_190)"
" s_190)))"
"(if(pair?"
" s_191)"
"(let-values(((id:from41_192)"
"(let-values(((s_194)"
"(car"
" s_191)))"
"(if(let-values(((or-part_195)"
"(if(syntax?$1"
" s_194)"
"(symbol?"
"(syntax-e$1"
" s_194))"
" #f)))"
"(if or-part_195"
" or-part_195"
"(symbol?"
" s_194)))"
" s_194"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_181"
" s_194))))"
"((id:to42_193)"
"(let-values(((s_196)"
"(cdr"
" s_191)))"
"(let-values(((s_197)"
"(if(syntax?$1"
" s_196)"
"(syntax-e$1"
" s_196)"
" s_196)))"
"(if(pair?"
" s_197)"
"(let-values(((id:to43_198)"
"(let-values(((s_199)"
"(car"
" s_197)))"
"(if(let-values(((or-part_200)"
"(if(syntax?$1"
" s_199)"
"(symbol?"
"(syntax-e$1"
" s_199))"
" #f)))"
"(if or-part_200"
" or-part_200"
"(symbol?"
" s_199)))"
" s_199"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_181"
" s_199))))"
"(()"
"(let-values(((s_201)"
"(cdr"
" s_197)))"
"(let-values(((s_202)"
"(if(syntax?$1"
" s_201)"
"(syntax-e$1"
" s_201)"
" s_201)))"
"(if(null?"
" s_202)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_181))))))"
"(values"
" id:to43_198))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_181))))))"
"(values"
" id:from41_192"
" id:to42_193))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_181))))))"
"(values"
" rename38_186"
" id:from39_187"
" id:to40_188))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_181)))))"
"(values"
" #t"
" rename35_182"
" id:from36_183"
" id:to37_184))))))"
"(begin"
"(parse-identifier!"
" id:from36_166"
" orig-s_2"
"(syntax-e$1"
" id:to37_167)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))))))"
"(if(unsafe-fx<"
" index_36"
" 9)"
"(if(unsafe-fx<"
" index_36"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_203"
" struct44_204"
" id:struct45_205"
" id:field46_206)"
"(let-values(((s_219)"
" disarmed-spec_31))"
"(let-values(((orig-s_220)"
" s_219))"
"(let-values(((struct44_221"
" id:struct45_222"
" id:field46_223)"
"(let-values(((s_224)"
"(if(syntax?$1"
" s_219)"
"(syntax-e$1"
" s_219)"
" s_219)))"
"(if(pair?"
" s_224)"
"(let-values(((struct47_225)"
"(let-values(((s_228)"
"(car"
" s_224)))"
" s_228))"
"((id:struct48_226"
" id:field49_227)"
"(let-values(((s_229)"
"(cdr"
" s_224)))"
"(let-values(((s_230)"
"(if(syntax?$1"
" s_229)"
"(syntax-e$1"
" s_229)"
" s_229)))"
"(if(pair?"
" s_230)"
"(let-values(((id:struct50_231)"
"(let-values(((s_233)"
"(car"
" s_230)))"
"(if(let-values(((or-part_234)"
"(if(syntax?$1"
" s_233)"
"(symbol?"
"(syntax-e$1"
" s_233))"
" #f)))"
"(if or-part_234"
" or-part_234"
"(symbol?"
" s_233)))"
" s_233"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_220"
" s_233))))"
"((id:field51_232)"
"(let-values(((s_235)"
"(cdr"
" s_230)))"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_235)"
"(syntax-e$1"
" s_235)"
" s_235)))"
"(if(pair?"
" s_236)"
"(let-values(((id:field52_237)"
"(let-values(((s_238)"
"(car"
" s_236)))"
"(let-values(((s_239)"
"(if(syntax?$1"
" s_238)"
"(syntax-e$1"
" s_238)"
" s_238)))"
"(let-values(((flat-s_240)"
"(to-syntax-list.1"
" s_239)))"
"(if(not"
" flat-s_240)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_220))"
"(let-values()"
"(let-values(((id:field_241)"
"(let-values(((lst_242)"
" flat-s_240))"
"(begin"
"(if(list?"
" lst_242)"
"(void)"
"(let-values()"
"(in-list"
" lst_242)))"
"((letrec-values(((for-loop_243)"
"(lambda(id:field_244"
" lst_245)"
"(if(pair?"
" lst_245)"
"(let-values(((s_246)"
"(unsafe-car"
" lst_245)))"
"(let-values(((id:field_247)"
"(let-values(((id:field_248)"
" id:field_244))"
"(let-values(((id:field_249)"
"(let-values()"
"(let-values(((id:field53_250)"
"(let-values()"
"(if(let-values(((or-part_251)"
"(if(syntax?$1"
" s_246)"
"(symbol?"
"(syntax-e$1"
" s_246))"
" #f)))"
"(if or-part_251"
" or-part_251"
"(symbol?"
" s_246)))"
" s_246"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_220"
" s_246)))))"
"(cons"
" id:field53_250"
" id:field_248)))))"
"(values"
" id:field_249)))))"
"(for-loop_243"
" id:field_247"
"(unsafe-cdr"
" lst_245))))"
" id:field_244))))"
" for-loop_243)"
" null"
" lst_242)))))"
"(alt-reverse"
" id:field_241))))))))"
"(()"
"(let-values(((s_252)"
"(cdr"
" s_236)))"
"(let-values(((s_253)"
"(if(syntax?$1"
" s_252)"
"(syntax-e$1"
" s_252)"
" s_252)))"
"(if(null?"
" s_253)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_220))))))"
"(values"
" id:field52_237))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_220))))))"
"(values"
" id:struct50_231"
" id:field51_232))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_220))))))"
"(values"
" struct47_225"
" id:struct48_226"
" id:field49_227))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_220)))))"
"(values"
" #t"
" struct44_221"
" id:struct45_222"
" id:field46_223))))))"
"(begin"
"(parse-struct!"
" id:struct45_205"
" orig-s_2"
" id:field46_206"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_36"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_254"
" all-from54_255"
" mod-path55_256)"
"(let-values(((s_267)"
" disarmed-spec_31))"
"(let-values(((orig-s_268)"
" s_267))"
"(let-values(((all-from54_269"
" mod-path55_270)"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_267)"
"(syntax-e$1"
" s_267)"
" s_267)))"
"(if(pair?"
" s_271)"
"(let-values(((all-from56_272)"
"(let-values(((s_274)"
"(car"
" s_271)))"
" s_274))"
"((mod-path57_273)"
"(let-values(((s_275)"
"(cdr"
" s_271)))"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_275)"
"(syntax-e$1"
" s_275)"
" s_275)))"
"(if(pair?"
" s_276)"
"(let-values(((mod-path58_277)"
"(let-values(((s_278)"
"(car"
" s_276)))"
" s_278))"
"(()"
"(let-values(((s_279)"
"(cdr"
" s_276)))"
"(let-values(((s_280)"
"(if(syntax?$1"
" s_279)"
"(syntax-e$1"
" s_279)"
" s_279)))"
"(if(null?"
" s_280)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_268))))))"
"(values"
" mod-path58_277))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_268))))))"
"(values"
" all-from56_272"
" mod-path57_273))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_268)))))"
"(values"
" #t"
" all-from54_269"
" mod-path55_270))))))"
"(begin"
"(parse-all-from"
" mod-path55_256"
" orig-s_2"
" self_4"
" null"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_281"
" all-from-except59_282"
" mod-path60_283"
" id61_284)"
"(let-values(((s_297)"
" disarmed-spec_31))"
"(let-values(((orig-s_298)"
" s_297))"
"(let-values(((all-from-except59_299"
" mod-path60_300"
" id61_301)"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_297)"
"(syntax-e$1"
" s_297)"
" s_297)))"
"(if(pair?"
" s_302)"
"(let-values(((all-from-except62_303)"
"(let-values(((s_306)"
"(car"
" s_302)))"
" s_306))"
"((mod-path63_304"
" id64_305)"
"(let-values(((s_307)"
"(cdr"
" s_302)))"
"(let-values(((s_308)"
"(if(syntax?$1"
" s_307)"
"(syntax-e$1"
" s_307)"
" s_307)))"
"(if(pair?"
" s_308)"
"(let-values(((mod-path65_309)"
"(let-values(((s_311)"
"(car"
" s_308)))"
" s_311))"
"((id66_310)"
"(let-values(((s_312)"
"(cdr"
" s_308)))"
"(let-values(((s_313)"
"(if(syntax?$1"
" s_312)"
"(syntax-e$1"
" s_312)"
" s_312)))"
"(let-values(((flat-s_314)"
"(to-syntax-list.1"
" s_313)))"
"(if(not"
" flat-s_314)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_298))"
"(let-values()"
"(let-values(((id_315)"
"(let-values(((lst_316)"
" flat-s_314))"
"(begin"
"(if(list?"
" lst_316)"
"(void)"
"(let-values()"
"(in-list"
" lst_316)))"
"((letrec-values(((for-loop_317)"
"(lambda(id_318"
" lst_319)"
"(if(pair?"
" lst_319)"
"(let-values(((s_320)"
"(unsafe-car"
" lst_319)))"
"(let-values(((id_321)"
"(let-values(((id_322)"
" id_318))"
"(let-values(((id_323)"
"(let-values()"
"(let-values(((id67_324)"
"(let-values()"
"(if(let-values(((or-part_325)"
"(if(syntax?$1"
" s_320)"
"(symbol?"
"(syntax-e$1"
" s_320))"
" #f)))"
"(if or-part_325"
" or-part_325"
"(symbol?"
" s_320)))"
" s_320"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_298"
" s_320)))))"
"(cons"
" id67_324"
" id_322)))))"
"(values"
" id_323)))))"
"(for-loop_317"
" id_321"
"(unsafe-cdr"
" lst_319))))"
" id_318))))"
" for-loop_317)"
" null"
" lst_316)))))"
"(alt-reverse"
" id_315)))))))))"
"(values"
" mod-path65_309"
" id66_310))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_298))))))"
"(values"
" all-from-except62_303"
" mod-path63_304"
" id64_305))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_298)))))"
"(values"
" #t"
" all-from-except59_299"
" mod-path60_300"
" id61_301))))))"
"(begin"
"(parse-all-from"
" mod-path60_283"
" orig-s_2"
" self_4"
" id61_284"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))))"
"(if(unsafe-fx<"
" index_36"
" 11)"
"(if(unsafe-fx<"
" index_36"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_326"
" all-defined68_327)"
"(let-values(((s_336)"
" disarmed-spec_31))"
"(let-values(((orig-s_337)"
" s_336))"
"(let-values(((all-defined68_338)"
"(let-values(((s_339)"
"(if(syntax?$1"
" s_336)"
"(syntax-e$1"
" s_336)"
" s_336)))"
"(if(pair?"
" s_339)"
"(let-values(((all-defined69_340)"
"(let-values(((s_341)"
"(car"
" s_339)))"
" s_341))"
"(()"
"(let-values(((s_342)"
"(cdr"
" s_339)))"
"(let-values(((s_343)"
"(if(syntax?$1"
" s_342)"
"(syntax-e$1"
" s_342)"
" s_342)))"
"(if(null?"
" s_343)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_337))))))"
"(values"
" all-defined69_340))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_337)))))"
"(values"
" #t"
" all-defined68_338))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_344"
" all-defined-except70_345"
" id71_346)"
"(let-values(((s_357)"
" disarmed-spec_31))"
"(let-values(((orig-s_358)"
" s_357))"
"(let-values(((all-defined-except70_359"
" id71_360)"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_357)"
"(syntax-e$1"
" s_357)"
" s_357)))"
"(if(pair?"
" s_361)"
"(let-values(((all-defined-except72_362)"
"(let-values(((s_364)"
"(car"
" s_361)))"
" s_364))"
"((id73_363)"
"(let-values(((s_365)"
"(cdr"
" s_361)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(let-values(((flat-s_367)"
"(to-syntax-list.1"
" s_366)))"
"(if(not"
" flat-s_367)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_358))"
"(let-values()"
"(let-values(((id_368)"
"(let-values(((lst_369)"
" flat-s_367))"
"(begin"
"(if(list?"
" lst_369)"
"(void)"
"(let-values()"
"(in-list"
" lst_369)))"
"((letrec-values(((for-loop_370)"
"(lambda(id_371"
" lst_372)"
"(if(pair?"
" lst_372)"
"(let-values(((s_373)"
"(unsafe-car"
" lst_372)))"
"(let-values(((id_374)"
"(let-values(((id_375)"
" id_371))"
"(let-values(((id_376)"
"(let-values()"
"(let-values(((id74_377)"
"(let-values()"
"(if(let-values(((or-part_378)"
"(if(syntax?$1"
" s_373)"
"(symbol?"
"(syntax-e$1"
" s_373))"
" #f)))"
"(if or-part_378"
" or-part_378"
"(symbol?"
" s_373)))"
" s_373"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_358"
" s_373)))))"
"(cons"
" id74_377"
" id_375)))))"
"(values"
" id_376)))))"
"(for-loop_370"
" id_374"
"(unsafe-cdr"
" lst_372))))"
" id_371))))"
" for-loop_370)"
" null"
" lst_369)))))"
"(alt-reverse"
" id_368)))))))))"
"(values"
" all-defined-except72_362"
" id73_363))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_358)))))"
"(values"
" #t"
" all-defined-except70_359"
" id71_360))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id71_346"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22)))))))"
"(if(unsafe-fx<"
" index_36"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_379"
" prefix-all-defined75_380"
" id:prefix76_381)"
"(let-values(((s_392)"
" disarmed-spec_31))"
"(let-values(((orig-s_393)"
" s_392))"
"(let-values(((prefix-all-defined75_394"
" id:prefix76_395)"
"(let-values(((s_396)"
"(if(syntax?$1"
" s_392)"
"(syntax-e$1"
" s_392)"
" s_392)))"
"(if(pair?"
" s_396)"
"(let-values(((prefix-all-defined77_397)"
"(let-values(((s_399)"
"(car"
" s_396)))"
" s_399))"
"((id:prefix78_398)"
"(let-values(((s_400)"
"(cdr"
" s_396)))"
"(let-values(((s_401)"
"(if(syntax?$1"
" s_400)"
"(syntax-e$1"
" s_400)"
" s_400)))"
"(if(pair?"
" s_401)"
"(let-values(((id:prefix79_402)"
"(let-values(((s_403)"
"(car"
" s_401)))"
"(if(let-values(((or-part_404)"
"(if(syntax?$1"
" s_403)"
"(symbol?"
"(syntax-e$1"
" s_403))"
" #f)))"
"(if or-part_404"
" or-part_404"
"(symbol?"
" s_403)))"
" s_403"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_393"
" s_403))))"
"(()"
"(let-values(((s_405)"
"(cdr"
" s_401)))"
"(let-values(((s_406)"
"(if(syntax?$1"
" s_405)"
"(syntax-e$1"
" s_405)"
" s_405)))"
"(if(null?"
" s_406)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_393))))))"
"(values"
" id:prefix79_402))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_393))))))"
"(values"
" prefix-all-defined77_397"
" id:prefix78_398))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_393)))))"
"(values"
" #t"
" prefix-all-defined75_394"
" id:prefix76_395))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
"(syntax-e$1"
" id:prefix76_381)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_36"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_407"
" prefix-all-defined-except80_408"
" id:prefix81_409"
" id82_410)"
"(let-values(((s_423)"
" disarmed-spec_31))"
"(let-values(((orig-s_424)"
" s_423))"
"(let-values(((prefix-all-defined-except80_425"
" id:prefix81_426"
" id82_427)"
"(let-values(((s_428)"
"(if(syntax?$1"
" s_423)"
"(syntax-e$1"
" s_423)"
" s_423)))"
"(if(pair?"
" s_428)"
"(let-values(((prefix-all-defined-except83_429)"
"(let-values(((s_432)"
"(car"
" s_428)))"
" s_432))"
"((id:prefix84_430"
" id85_431)"
"(let-values(((s_433)"
"(cdr"
" s_428)))"
"(let-values(((s_434)"
"(if(syntax?$1"
" s_433)"
"(syntax-e$1"
" s_433)"
" s_433)))"
"(if(pair?"
" s_434)"
"(let-values(((id:prefix86_435)"
"(let-values(((s_437)"
"(car"
" s_434)))"
"(if(let-values(((or-part_438)"
"(if(syntax?$1"
" s_437)"
"(symbol?"
"(syntax-e$1"
" s_437))"
" #f)))"
"(if or-part_438"
" or-part_438"
"(symbol?"
" s_437)))"
" s_437"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_424"
" s_437))))"
"((id87_436)"
"(let-values(((s_439)"
"(cdr"
" s_434)))"
"(let-values(((s_440)"
"(if(syntax?$1"
" s_439)"
"(syntax-e$1"
" s_439)"
" s_439)))"
"(let-values(((flat-s_441)"
"(to-syntax-list.1"
" s_440)))"
"(if(not"
" flat-s_441)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_424))"
"(let-values()"
"(let-values(((id_442)"
"(let-values(((lst_443)"
" flat-s_441))"
"(begin"
"(if(list?"
" lst_443)"
"(void)"
"(let-values()"
"(in-list"
" lst_443)))"
"((letrec-values(((for-loop_444)"
"(lambda(id_445"
" lst_446)"
"(if(pair?"
" lst_446)"
"(let-values(((s_447)"
"(unsafe-car"
" lst_446)))"
"(let-values(((id_448)"
"(let-values(((id_449)"
" id_445))"
"(let-values(((id_450)"
"(let-values()"
"(let-values(((id88_451)"
"(let-values()"
"(if(let-values(((or-part_452)"
"(if(syntax?$1"
" s_447)"
"(symbol?"
"(syntax-e$1"
" s_447))"
" #f)))"
"(if or-part_452"
" or-part_452"
"(symbol?"
" s_447)))"
" s_447"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_424"
" s_447)))))"
"(cons"
" id88_451"
" id_449)))))"
"(values"
" id_450)))))"
"(for-loop_444"
" id_448"
"(unsafe-cdr"
" lst_446))))"
" id_445))))"
" for-loop_444)"
" null"
" lst_443)))))"
"(alt-reverse"
" id_442)))))))))"
"(values"
" id:prefix86_435"
" id87_436))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_424))))))"
"(values"
" prefix-all-defined-except83_429"
" id:prefix84_430"
" id85_431))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_424)))))"
"(values"
" #t"
" prefix-all-defined-except80_425"
" id:prefix81_426"
" id82_427))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id82_410"
"(syntax-e$1"
" id:prefix81_409)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values(((ok?_453"
" expand89_454"
" id90_455"
" datum91_456)"
"(let-values(((s_498)"
" disarmed-spec_31))"
"(let-values(((orig-s_499)"
" s_498))"
"(let-values(((expand89_500"
" id90_501"
" datum91_502)"
"(let-values(((s_503)"
"(if(syntax?$1"
" s_498)"
"(syntax-e$1"
" s_498)"
" s_498)))"
"(if(pair?"
" s_503)"
"(let-values(((expand92_504)"
"(let-values(((s_507)"
"(car"
" s_503)))"
" s_507))"
"((id93_505"
" datum94_506)"
"(let-values(((s_508)"
"(cdr"
" s_503)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(if(pair?"
" s_509)"
"(let-values(((id95_510"
" datum96_511)"
"(let-values(((s_512)"
"(car"
" s_509)))"
"(let-values(((s_513)"
"(if(syntax?$1"
" s_512)"
"(syntax-e$1"
" s_512)"
" s_512)))"
"(if(pair?"
" s_513)"
"(let-values(((id97_514)"
"(let-values(((s_516)"
"(car"
" s_513)))"
"(if(let-values(((or-part_517)"
"(if(syntax?$1"
" s_516)"
"(symbol?"
"(syntax-e$1"
" s_516))"
" #f)))"
"(if or-part_517"
" or-part_517"
"(symbol?"
" s_516)))"
" s_516"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_499"
" s_516))))"
"((datum98_515)"
"(let-values(((s_518)"
"(cdr"
" s_513)))"
" s_518)))"
"(values"
" id97_514"
" datum98_515))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_499)))))"
"(()"
"(let-values(((s_519)"
"(cdr"
" s_509)))"
"(let-values(((s_520)"
"(if(syntax?$1"
" s_519)"
"(syntax-e$1"
" s_519)"
" s_519)))"
"(if(null?"
" s_520)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_499))))))"
"(values"
" id95_510"
" datum96_511))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_499))))))"
"(values"
" expand92_504"
" id93_505"
" datum94_506))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_499)))))"
"(values"
" #t"
" expand89_500"
" id90_501"
" datum91_502))))))"
"(let-values(((ok?_469"
" expand99_470"
" form100_471)"
"(let-values(((s_521)"
" disarmed-spec_31))"
"(let-values(((orig-s_522)"
" s_521))"
"(let-values(((expand99_523"
" form100_524)"
"(let-values(((s_525)"
"(if(syntax?$1"
" s_521)"
"(syntax-e$1"
" s_521)"
" s_521)))"
"(if(pair?"
" s_525)"
"(let-values(((expand101_526)"
"(let-values(((s_528)"
"(car"
" s_525)))"
" s_528))"
"((form102_527)"
"(let-values(((s_529)"
"(cdr"
" s_525)))"
"(let-values(((s_530)"
"(if(syntax?$1"
" s_529)"
"(syntax-e$1"
" s_529)"
" s_529)))"
"(if(pair?"
" s_530)"
"(let-values(((form103_531)"
"(let-values(((s_532)"
"(car"
" s_530)))"
" s_532))"
"(()"
"(let-values(((s_533)"
"(cdr"
" s_530)))"
"(let-values(((s_534)"
"(if(syntax?$1"
" s_533)"
"(syntax-e$1"
" s_533)"
" s_533)))"
"(if(null?"
" s_534)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_522))))))"
"(values"
" form103_531))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_522))))))"
"(values"
" expand101_526"
" form102_527))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_522)))))"
"(values"
" #t"
" expand99_523"
" form100_524))))))"
"(let-values(((exp-spec_482)"
"(let-values(((temp108_535)"
" form100_471)"
"((temp109_536)"
"(let-values(((the-struct_537)"
" ctx_6))"
"(if(expand-context?"
" the-struct_537)"
"(let-values(((only-immediate?110_538)"
" #t)"
"((def-ctx-scopes111_539)"
"(box"
" null)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_537)"
"(root-expand-context-post-expansion-scope"
" the-struct_537)"
"(root-expand-context-top-level-bind-scope"
" the-struct_537)"
"(root-expand-context-all-scopes-stx"
" the-struct_537)"
"(root-expand-context-use-site-scopes"
" the-struct_537)"
"(root-expand-context-defined-syms"
" the-struct_537)"
"(root-expand-context-frame-id"
" the-struct_537)"
"(root-expand-context-counter"
" the-struct_537)"
"(root-expand-context-lift-key"
" the-struct_537)"
"(expand-context-context"
" the-struct_537)"
"(expand-context-phase"
" the-struct_537)"
"(expand-context-namespace"
" the-struct_537)"
"(expand-context-env"
" the-struct_537)"
"(expand-context-user-env"
" the-struct_537)"
"(expand-context-post-expansion-scope-action"
" the-struct_537)"
"(expand-context-scopes"
" the-struct_537)"
" def-ctx-scopes111_539"
"(expand-context-binding-layer"
" the-struct_537)"
"(expand-context-reference-records"
" the-struct_537)"
" only-immediate?110_538"
"(expand-context-just-once?"
" the-struct_537)"
"(expand-context-module-begin-k"
" the-struct_537)"
"(expand-context-need-eventually-defined"
" the-struct_537)"
"(expand-context-allow-unbound?"
" the-struct_537)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_537)"
"(expand-context-stops"
" the-struct_537)"
"(expand-context-current-introduction-scopes"
" the-struct_537)"
"(expand-context-declared-submodule-names"
" the-struct_537)"
"(expand-context-lifts"
" the-struct_537)"
"(expand-context-lift-envs"
" the-struct_537)"
"(expand-context-module-lifts"
" the-struct_537)"
"(expand-context-require-lifts"
" the-struct_537)"
"(expand-context-to-module-lifts"
" the-struct_537)"
"(expand-context-requires+provides"
" the-struct_537)"
"(expand-context-name"
" the-struct_537)"
"(expand-context-observer"
" the-struct_537)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"expand-context?\""
" the-struct_537)))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp108_535"
" temp109_536)"
"(expand7.1"
" temp108_535"
" temp109_536)))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_482))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_482)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_482"
" at-phase_10))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                   \"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((ok?_483"
" begin104_484"
" spec105_485)"
"(let-values(((s_540)"
" exp-spec_482))"
"(let-values(((orig-s_541)"
" s_540))"
"(let-values(((begin104_542"
" spec105_543)"
"(let-values(((s_544)"
"(if(syntax?$1"
" s_540)"
"(syntax-e$1"
" s_540)"
" s_540)))"
"(if(pair?"
" s_544)"
"(let-values(((begin106_545)"
"(let-values(((s_547)"
"(car"
" s_544)))"
" s_547))"
"((spec107_546)"
"(let-values(((s_548)"
"(cdr"
" s_544)))"
"(let-values(((s_549)"
"(if(syntax?$1"
" s_548)"
"(syntax-e$1"
" s_548)"
" s_548)))"
"(let-values(((flat-s_550)"
"(to-syntax-list.1"
" s_549)))"
"(if(not"
" flat-s_550)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_541))"
"(let-values()"
" flat-s_550)))))))"
"(values"
" begin106_545"
" spec107_546))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_541)))))"
"(values"
" #t"
" begin104_542"
" spec105_543))))))"
"(let-values(((track-stxes_496"
" exp-specs_497)"
"(loop_8"
" spec105_485"
" at-phase_10"
" protected?_11"
" layer_12)))"
"(values"
"(list*"
" spec_22"
" exp-spec_482"
" track-stxes_496)"
" exp-specs_497)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_29"
" track-stxes_25)"
"(cons"
" exp-specs2_30"
" exp-specs_26))))))"
"(values"
" track-stxes_27"
" exp-specs_28)))))"
"(for-loop_18"
" track-stxes_23"
" exp-specs_24"
"(unsafe-cdr lst_21))))"
"(values track-stxes_19 exp-specs_20)))))"
" for-loop_18)"
" null"
" null"
" lst_17)))))"
"(values(alt-reverse track-stxes_15)(alt-reverse exp-specs_16)))))"
"(values(apply append track-stxess_13)(apply append exp-specss_14))))))"
" loop_8)"
" specs_1"
" phase_5"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_551 orig-s_552 sym_553 at-phase_554 ns_555 rp_556 protected?_557)"
"(let-values(((b_558)(resolve+shift/extra-inspector spec_551 at-phase_554 ns_555)))"
"(let-values((()"
"(begin"
"(if b_558"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_552"
" spec_551)))"
"(values))))"
"(let-values(((as-transformer?_559)(binding-for-transformer? b_558 spec_551 at-phase_554 ns_555)))"
"(let-values(((immed-b_560)"
"(let-values(((...r/expand/provide.rkt:187:18_561) resolve+shift22.1)"
"((spec121_562) spec_551)"
"((at-phase122_563) at-phase_554)"
"((temp123_564) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f temp123_564 #t #f #f spec121_562 at-phase122_563)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:187:18_561"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp123_564)"
" spec121_562"
" at-phase122_563)))))"
"(let-values(((...r/expand/provide.rkt:188:2_565) add-provide!103.1)"
"((rp112_566) rp_556)"
"((sym113_567) sym_553)"
"((at-phase114_568) at-phase_554)"
"((b115_569) b_558)"
"((immed-b116_570) immed-b_560)"
"((spec117_571) spec_551)"
"((orig-s118_572) orig-s_552)"
"((protected?119_573) protected?_557)"
"((as-transformer?120_574) as-transformer?_559))"
"(if(variable-reference-constant?(#%variable-reference add-provide!103.1))"
"(add-provide!101.1"
" protected?119_573"
" as-transformer?120_574"
" rp112_566"
" sym113_567"
" at-phase114_568"
" b115_569"
" immed-b116_570"
" spec117_571"
" orig-s118_572)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:188:2_565"
" keyword-procedure-extract"
" '(#:as-protected? #:as-transformer?)"
" 9)"
" '(#:as-protected? #:as-transformer?)"
"(list protected?119_573 as-transformer?120_574)"
" rp112_566"
" sym113_567"
" at-phase114_568"
" b115_569"
" immed-b116_570"
" spec117_571"
" orig-s118_572)))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_575 orig-s_576 fields_577 at-phase_578 ns_579 rp_580 protected?_581)"
"(let-values(((mk_582)"
"(lambda(fmt_584)"
"(let-values(((sym_585)(string->symbol(format fmt_584(syntax-e$1 id:struct_575)))))"
"(datum->syntax$1 id:struct_575 sym_585 id:struct_575)))))"
"(let-values(((mk2_583)"
"(lambda(fmt_586 field-id_587)"
"(let-values(((sym_588)"
"(string->symbol"
"(format fmt_586(syntax-e$1 id:struct_575)(syntax-e$1 field-id_587)))))"
"(datum->syntax$1 id:struct_575 sym_588 id:struct_575)))))"
"(begin"
"(let-values(((pos->vals_589 pos-next_590 init_591 pos-cont?_592 val-cont?_593 all-cont?_594)"
"                        (make-sequence '(fmt) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_595)"
"(lambda(fold-var_596 pos_597)"
"(if(if pos-cont?_592(pos-cont?_592 pos_597) #t)"
"(let-values(((fmt_598)(pos->vals_589 pos_597)))"
"(if(if val-cont?_593(val-cont?_593 fmt_598) #t)"
"(let-values(((fold-var_599)"
"(let-values(((fold-var_600) fold-var_596))"
"(let-values(((fold-var_601)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_602)(mk_582 fmt_598)))"
"(parse-identifier!"
" id_602"
" orig-s_576"
"(syntax-e$1 id_602)"
" at-phase_578"
" ns_579"
" rp_580"
" protected?_581)))"
"(void)))))"
"(values fold-var_601)))))"
"(if(if all-cont?_594(all-cont?_594 pos_597 fmt_598) #t)"
"(for-loop_595 fold-var_599(pos-next_590 pos_597))"
" fold-var_599))"
" fold-var_596))"
" fold-var_596))))"
" for-loop_595)"
"(void)"
" init_591)))"
"(let-values(((lst_603) fields_577))"
"(begin"
"(if(list? lst_603)(void)(let-values()(in-list lst_603)))"
"((letrec-values(((for-loop_604)"
"(lambda(fold-var_605 lst_606)"
"(if(pair? lst_606)"
"(let-values(((field_607)(unsafe-car lst_606)))"
"(let-values(((fold-var_608)"
"(let-values(((fold-var_609) fold-var_605))"
"(let-values(((fold-var_610)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_611)"
"                                                                                        (mk2_583 \"~a-~a\" field_607)))"
"(let-values(((set-id_612)"
"(mk2_583"
"                                                                                           \"set-~a-~a!\""
" field_607)))"
"(begin"
"(parse-identifier!"
" get-id_611"
" orig-s_576"
"(syntax-e$1 get-id_611)"
" at-phase_578"
" ns_579"
" rp_580"
" protected?_581)"
"(parse-identifier!"
" set-id_612"
" orig-s_576"
"(syntax-e$1 set-id_612)"
" at-phase_578"
" ns_579"
" rp_580"
" protected?_581)))))"
"(void)))))"
"(values fold-var_610)))))"
"(for-loop_604 fold-var_608(unsafe-cdr lst_606))))"
" fold-var_605))))"
" for-loop_604)"
"(void)"
" lst_603))))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_613 orig-s_614 self_615 except-ids_616 at-phase_617 ns_618 rp_619 protected?_620 ctx_621)"
"(let-values(((mod-path_622)(syntax->datum$1 mod-path-stx_613)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_622)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_614 mod-path-stx_613)))"
"(values))))"
"(let-values(((mpi_623)(module-path->mpi/context mod-path_622 ctx_621)))"
"(parse-all-from-module mpi_623 #f orig-s_614 except-ids_616 #f at-phase_617 ns_618 rp_619 protected?_620))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_624 matching-stx_625 orig-s_626 except-ids_627 prefix-sym_628 at-phase_629 ns_630 rp_631 protected?_632)"
"(let-values(((requireds_633)(extract-module-requires rp_631 mpi_624 at-phase_629)))"
"(let-values(((phase-desc_634)"
"(lambda()"
"(if(zero-phase? at-phase_629)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_629)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_629)))))))"
"(let-values((()"
"(begin"
"(if requireds_633"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_634))"
" orig-s_626"
" matching-stx_625)))"
"(values))))"
"(let-values(((add-prefix_635)"
"(lambda(sym_637)"
"                          (if prefix-sym_628 (string->symbol (format \"~a~a\" prefix-sym_628 sym_637)) sym_637))))"
"(let-values(((found_636)(make-hasheq)))"
"(begin"
"(let-values(((lst_638) requireds_633))"
"(begin"
"(if(list? lst_638)(void)(let-values()(in-list lst_638)))"
"((letrec-values(((for-loop_639)"
"(lambda(fold-var_640 lst_641)"
"(if(pair? lst_641)"
"(let-values(((i_642)(unsafe-car lst_641)))"
"(let-values(((fold-var_643)"
"(let-values(((fold-var_644) fold-var_640))"
"(let-values(((fold-var_645)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_646)"
"(required-id i_642)))"
"(let-values(((phase_647)"
"(required-phase i_642)))"
"(if(let-values(((or-part_648)"
"(if matching-stx_625"
"(not"
"(if(eqv?"
" phase_647"
" at-phase_629)"
"(free-identifier=?$1"
" id_646"
"(datum->syntax$1"
" matching-stx_625"
"(syntax-e$1"
" id_646))"
" phase_647"
" phase_647)"
" #f))"
" #f)))"
"(if or-part_648"
" or-part_648"
"(let-values(((lst_649)"
" except-ids_627))"
"(begin"
"(if(list? lst_649)"
"(void)"
"(let-values()"
"(in-list lst_649)))"
"((letrec-values(((for-loop_650)"
"(lambda(result_651"
" lst_652)"
"(if(pair?"
" lst_652)"
"(let-values(((except-id_653)"
"(unsafe-car"
" lst_652)))"
"(let-values(((result_654)"
"(let-values(((result_655)"
" result_651))"
"(let-values(((result_656)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_646"
" except-id_653"
" phase_647"
" phase_647)"
"(hash-set!"
" found_636"
" except-id_653"
" #t)"
" #f)))))"
"(values"
" result_656)))))"
"(if(not"
"((lambda x_657"
" result_654)"
" except-id_653))"
"(for-loop_650"
" result_654"
"(unsafe-cdr"
" lst_652))"
" result_654)))"
" result_651))))"
" for-loop_650)"
" #f"
" lst_649)))))"
"(void)"
"(let-values()"
"(let-values(((b_658)"
"(resolve+shift/extra-inspector"
" id_646"
" phase_647"
" ns_630)))"
"(let-values(((immed-b_659)"
"(let-values(((...r/expand/provide.rkt:255:22_660)"
" resolve+shift22.1)"
"((id133_661)"
" id_646)"
"((phase134_662)"
" phase_647)"
"((temp135_663)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp135_663"
" #t"
" #f"
" #f"
" id133_661"
" phase134_662)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:255:22_660"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list"
" temp135_663)"
" id133_661"
" phase134_662)))))"
"(let-values(((...r/expand/provide.rkt:256:6_664)"
" add-provide!103.1)"
"((rp124_665)"
" rp_631)"
"((temp125_666)"
"(add-prefix_635"
"(syntax-e$1"
" id_646)))"
"((phase126_667)"
" phase_647)"
"((b127_668)"
" b_658)"
"((immed-b128_669)"
" immed-b_659)"
"((id129_670)"
" id_646)"
"((orig-s130_671)"
" orig-s_626)"
"((protected?131_672)"
" protected?_632)"
"((temp132_673)"
"(required-as-transformer?"
" i_642)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-provide!103.1))"
"(add-provide!101.1"
" protected?131_672"
" temp132_673"
" rp124_665"
" temp125_666"
" phase126_667"
" b127_668"
" immed-b128_669"
" id129_670"
" orig-s130_671)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:256:6_664"
" keyword-procedure-extract"
" '(#:as-protected?"
" #:as-transformer?)"
" 9)"
" '(#:as-protected?"
" #:as-transformer?)"
"(list"
" protected?131_672"
" temp132_673)"
" rp124_665"
" temp125_666"
" phase126_667"
" b127_668"
" immed-b128_669"
" id129_670"
" orig-s130_671))))))))))"
"(void)))))"
"(values fold-var_645)))))"
"(for-loop_639 fold-var_643(unsafe-cdr lst_641))))"
" fold-var_640))))"
" for-loop_639)"
"(void)"
" lst_638)))"
"(if(=(hash-count found_636)(length except-ids_627))"
"(void)"
"(let-values()"
"(let-values(((lst_674) except-ids_627))"
"(begin"
"(if(list? lst_674)(void)(let-values()(in-list lst_674)))"
"((letrec-values(((for-loop_675)"
"(lambda(fold-var_676 lst_677)"
"(if(pair? lst_677)"
"(let-values(((except-id_678)(unsafe-car lst_677)))"
"(let-values(((fold-var_679)"
"(let-values(((fold-var_680) fold-var_676))"
"(let-values(((fold-var_681)"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_682)"
"(hash-ref"
" found_636"
" except-id_678"
" #f)))"
"(if or-part_682"
" or-part_682"
"(let-values(((lst_683)"
" requireds_633))"
"(begin"
"(if(list? lst_683)"
"(void)"
"(let-values()"
"(in-list lst_683)))"
"((letrec-values(((for-loop_684)"
"(lambda(result_685"
" lst_686)"
"(if(pair?"
" lst_686)"
"(let-values(((i_687)"
"(unsafe-car"
" lst_686)))"
"(let-values(((result_688)"
"(let-values(((result_689)"
" result_685))"
"(let-values(((result_690)"
"(let-values()"
"(let-values()"
"(let-values(((id_691)"
"(required-id"
" i_687)))"
"(let-values(((phase_692)"
"(required-phase"
" i_687)))"
"(free-identifier=?$1"
" id_691"
" except-id_678"
" phase_692"
" phase_692)))))))"
"(values"
" result_690)))))"
"(if(not"
"((lambda x_693"
" result_688)"
" i_687))"
"(for-loop_684"
" result_688"
"(unsafe-cdr"
" lst_686))"
" result_688)))"
" result_685))))"
" for-loop_684)"
" #f"
" lst_683)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_625"
"                                                                                            \"excluded identifier was not defined or required in the module~a\""
"                                                                                            \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_634))"
" orig-s_626"
" except-id_678))))"
"(void)))))"
"(values fold-var_681)))))"
"(for-loop_675 fold-var_679(unsafe-cdr lst_677))))"
" fold-var_676))))"
" for-loop_675)"
"(void)"
" lst_674)))))))))))))"
"(void)"
"(void)"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(let-values(((lst_3) bodys_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(fold-var_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((body_7)(unsafe-car lst_6)))"
"(let-values(((fold-var_8)"
"(let-values(((fold-var_9) fold-var_5))"
"(let-values(((fold-var_10)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_11)(core-form-sym body_7 0)))"
"(if(equal? tmp_11 'begin)"
"(let-values()"
"(let-values(((ok?_12 begin1_13 e2_14)"
"(let-values(((s_25) body_7))"
"(let-values(((orig-s_26)"
" s_25))"
"(let-values(((begin1_27"
" e2_28)"
"(let-values(((s_29)"
"(if(syntax?$1"
" s_25)"
"(syntax-e$1"
" s_25)"
" s_25)))"
"(if(pair?"
" s_29)"
"(let-values(((begin3_30)"
"(let-values(((s_32)"
"(car"
" s_29)))"
" s_32))"
"((e4_31)"
"(let-values(((s_33)"
"(cdr"
" s_29)))"
"(let-values(((s_34)"
"(if(syntax?$1"
" s_33)"
"(syntax-e$1"
" s_33)"
" s_33)))"
"(let-values(((flat-s_35)"
"(to-syntax-list.1"
" s_34)))"
"(if(not"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_26))"
"(let-values()"
" flat-s_35)))))))"
"(values"
" begin3_30"
" e4_31))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_26)))))"
"(values"
" #t"
" begin1_27"
" e2_28))))))"
"(check-body e2_14)))"
"(if(if(equal? tmp_11 '#%declare)"
" #t"
"(if(equal? tmp_11 '#%provide)"
" #t"
"(if(equal? tmp_11 '#%require)"
" #t"
"(if(equal? tmp_11 'module)"
" #t"
"(equal? tmp_11 'module*)))))"
"(let-values()(void))"
"(if(equal? tmp_11 'define-values)"
"(let-values()"
"(let-values(((ok?_36"
" define-values5_37"
" id6_38"
" rhs7_39)"
"(let-values(((s_52)"
" body_7))"
"(let-values(((orig-s_53)"
" s_52))"
"(let-values(((define-values5_54"
" id6_55"
" rhs7_56)"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_52)"
"(syntax-e$1"
" s_52)"
" s_52)))"
"(if(pair?"
" s_57)"
"(let-values(((define-values8_58)"
"(let-values(((s_61)"
"(car"
" s_57)))"
" s_61))"
"((id9_59"
" rhs10_60)"
"(let-values(((s_62)"
"(cdr"
" s_57)))"
"(let-values(((s_63)"
"(if(syntax?$1"
" s_62)"
"(syntax-e$1"
" s_62)"
" s_62)))"
"(if(pair?"
" s_63)"
"(let-values(((id11_64)"
"(let-values(((s_66)"
"(car"
" s_63)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(let-values(((flat-s_68)"
"(to-syntax-list.1"
" s_67)))"
"(if(not"
" flat-s_68)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_53))"
"(let-values()"
"(let-values(((id_69)"
"(let-values(((lst_70)"
" flat-s_68))"
"(begin"
"(if(list?"
" lst_70)"
"(void)"
"(let-values()"
"(in-list"
" lst_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(id_72"
" lst_73)"
"(if(pair?"
" lst_73)"
"(let-values(((s_74)"
"(unsafe-car"
" lst_73)))"
"(let-values(((id_75)"
"(let-values(((id_76)"
" id_72))"
"(let-values(((id_77)"
"(let-values()"
"(let-values(((id14_78)"
"(let-values()"
"(if(let-values(((or-part_79)"
"(if(syntax?$1"
" s_74)"
"(symbol?"
"(syntax-e$1"
" s_74))"
" #f)))"
"(if or-part_79"
" or-part_79"
"(symbol?"
" s_74)))"
" s_74"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_53"
" s_74)))))"
"(cons"
" id14_78"
" id_76)))))"
"(values"
" id_77)))))"
"(for-loop_71"
" id_75"
"(unsafe-cdr"
" lst_73))))"
" id_72))))"
" for-loop_71)"
" null"
" lst_70)))))"
"(alt-reverse"
" id_69))))))))"
"((rhs12_65)"
"(let-values(((s_80)"
"(cdr"
" s_63)))"
"(let-values(((s_81)"
"(if(syntax?$1"
" s_80)"
"(syntax-e$1"
" s_80)"
" s_80)))"
"(if(pair?"
" s_81)"
"(let-values(((rhs13_82)"
"(let-values(((s_83)"
"(car"
" s_81)))"
" s_83))"
"(()"
"(let-values(((s_84)"
"(cdr"
" s_81)))"
"(let-values(((s_85)"
"(if(syntax?$1"
" s_84)"
"(syntax-e$1"
" s_84)"
" s_84)))"
"(if(null?"
" s_85)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_53))))))"
"(values"
" rhs13_82))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_53))))))"
"(values"
" id11_64"
" rhs12_65))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_53))))))"
"(values"
" define-values8_58"
" id9_59"
" rhs10_60))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_53)))))"
"(values"
" #t"
" define-values5_54"
" id6_55"
" rhs7_56))))))"
"(check-expr"
" rhs7_39"
"(length id6_38)"
" body_7)))"
"(let-values()(disallow body_7)))))))"
"(void)))))"
"(values fold-var_10)))))"
"(for-loop_4 fold-var_8(unsafe-cdr lst_6))))"
" fold-var_5))))"
" for-loop_4)"
"(void)"
" lst_3)))))"
"(define-values"
"(check-expr)"
"(lambda(e_86 num-results_87 enclosing_88)"
"(let-values(((tmp_89)(core-form-sym e_86 0)))"
"(if(if(equal? tmp_89 'lambda) #t(equal? tmp_89 'case-lambda))"
"(let-values()(check-count 1 num-results_87 enclosing_88))"
"(if(equal? tmp_89 'quote)"
"(let-values()"
"(let-values(((ok?_90 quote15_91 datum16_92)"
"(let-values(((s_103) e_86))"
"(let-values(((orig-s_104) s_103))"
"(let-values(((quote15_105 datum16_106)"
"(let-values(((s_107)(if(syntax?$1 s_103)(syntax-e$1 s_103) s_103)))"
"(if(pair? s_107)"
"(let-values(((quote17_108)(let-values(((s_110)(car s_107))) s_110))"
"((datum18_109)"
"(let-values(((s_111)(cdr s_107)))"
"(let-values(((s_112)"
"(if(syntax?$1 s_111)"
"(syntax-e$1 s_111)"
" s_111)))"
"(if(pair? s_112)"
"(let-values(((datum19_113)"
"(let-values(((s_114)(car s_112)))"
" s_114))"
"(()"
"(let-values(((s_115)(cdr s_112)))"
"(let-values(((s_116)"
"(if(syntax?$1 s_115)"
"(syntax-e$1 s_115)"
" s_115)))"
"(if(null? s_116)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_104))))))"
"(values datum19_113))"
"(raise-syntax-error$1"
" #f"
"                                                                     \"bad syntax\""
" orig-s_104))))))"
"(values quote17_108 datum18_109))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_104)))))"
"(values #t quote15_105 datum16_106))))))"
"(begin(check-datum datum16_92)(check-count 1 num-results_87 enclosing_88))))"
"(if(equal? tmp_89 '#%app)"
"(let-values()"
"(let-values(((ok?_117 #%app20_118 rator21_119 rand22_120)"
"(let-values(((s_134) e_86))"
"(let-values(((orig-s_135) s_134))"
"(let-values(((#%app20_136 rator21_137 rand22_138)"
"(let-values(((s_139)(if(syntax?$1 s_134)(syntax-e$1 s_134) s_134)))"
"(if(pair? s_139)"
"(let-values(((#%app23_140)"
"(let-values(((s_143)(car s_139))) s_143))"
"((rator24_141 rand25_142)"
"(let-values(((s_144)(cdr s_139)))"
"(let-values(((s_145)"
"(if(syntax?$1 s_144)"
"(syntax-e$1 s_144)"
" s_144)))"
"(if(pair? s_145)"
"(let-values(((rator26_146)"
"(let-values(((s_148)(car s_145)))"
" s_148))"
"((rand27_147)"
"(let-values(((s_149)(cdr s_145)))"
"(let-values(((s_150)"
"(if(syntax?$1"
" s_149)"
"(syntax-e$1 s_149)"
" s_149)))"
"(let-values(((flat-s_151)"
"(to-syntax-list.1"
" s_150)))"
"(if(not flat-s_151)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_135))"
"(let-values()"
" flat-s_151)))))))"
"(values rator26_146 rand27_147))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_135))))))"
"(values #%app23_140 rator24_141 rand25_142))"
"                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_135)))))"
"(values #t #%app20_136 rator21_137 rand22_138))))))"
"(let-values(((rands_133) rand22_120))"
"(begin"
"(let-values(((lst_152) rands_133))"
"(begin"
"(if(list? lst_152)(void)(let-values()(in-list lst_152)))"
"((letrec-values(((for-loop_153)"
"(lambda(fold-var_154 lst_155)"
"(if(pair? lst_155)"
"(let-values(((rand_156)(unsafe-car lst_155)))"
"(let-values(((fold-var_157)"
"(let-values(((fold-var_158) fold-var_154))"
"(let-values(((fold-var_159)"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_156 1 e_86))"
"(void)))))"
"(values fold-var_159)))))"
"(for-loop_153 fold-var_157(unsafe-cdr lst_155))))"
" fold-var_154))))"
" for-loop_153)"
"(void)"
" lst_152)))"
"(let-values(((tmp_160)(cross-phase-primitive-name rator21_119)))"
"(if(if(equal? tmp_160 'cons) #t(equal? tmp_160 'list))"
"(let-values()(check-count 1 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'make-struct-type)"
"(let-values()(check-count 5 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_87 enclosing_88))"
"(if(equal? tmp_160 'gensym)"
"(let-values()"
"(if(let-values(((or-part_161)(= 0(length rands_133))))"
"(if or-part_161"
" or-part_161"
"(if(= 1(length rands_133))(quoted-string?(car rands_133)) #f)))"
"(void)"
"(let-values()(disallow e_86))))"
"(if(equal? tmp_160 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_133))(quoted-string?(car rands_133)) #f)"
"(void)"
"(let-values()(disallow e_86))))"
"(let-values()(disallow e_86))))))))))))"
"(let-values()(void))))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_162 expected-num_163 enclosing_164)"
"(if(= is-num_162 expected-num_163)(void)(let-values()(disallow enclosing_164)))))"
"(define-values"
"(check-datum)"
"(lambda(datum_165)"
"(let-values(((d_166)(syntax-e$1 datum_165)))"
"(if(let-values(((or-part_167)(number? d_166)))"
"(if or-part_167"
" or-part_167"
"(let-values(((or-part_168)(boolean? d_166)))"
"(if or-part_168"
" or-part_168"
"(let-values(((or-part_169)(symbol? d_166)))"
"(if or-part_169"
" or-part_169"
"(let-values(((or-part_170)(string? d_166)))(if or-part_170 or-part_170(bytes? d_166)))))))))"
"(let-values()(void))"
"(let-values()(disallow datum_165))))))"
"(define-values"
"(quoted-string?)"
"(lambda(e_171)"
"(if(eq? 'quote(core-form-sym e_171 0))"
"(let-values()"
"(let-values(((ok?_172 quote28_173 datum29_174)"
"(let-values(((s_185) e_171))"
"(let-values(((orig-s_186) s_185))"
"(let-values(((quote28_187 datum29_188)"
"(let-values(((s_189)(if(syntax?$1 s_185)(syntax-e$1 s_185) s_185)))"
"(if(pair? s_189)"
"(let-values(((quote30_190)(let-values(((s_192)(car s_189))) s_192))"
"((datum31_191)"
"(let-values(((s_193)(cdr s_189)))"
"(let-values(((s_194)"
"(if(syntax?$1 s_193)"
"(syntax-e$1 s_193)"
" s_193)))"
"(if(pair? s_194)"
"(let-values(((datum32_195)"
"(let-values(((s_196)(car s_194)))"
" s_196))"
"(()"
"(let-values(((s_197)(cdr s_194)))"
"(let-values(((s_198)"
"(if(syntax?$1 s_197)"
"(syntax-e$1 s_197)"
" s_197)))"
"(if(null? s_198)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_186))))))"
"(values datum32_195))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_186))))))"
"(values quote30_190 datum31_191))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_186)))))"
"(values #t quote28_187 datum29_188))))))"
"(string?(syntax-e$1 datum29_174))))"
" #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_199)"
"(let-values(((b_200)"
"(let-values(((id33_201) id_199)((temp34_202) 0))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift22.1))"
"(resolve+shift20.1 #f #f #f #f #f #f #f #f #f #f id33_201 temp34_202)"
"(resolve+shift22.1 id33_201 temp34_202)))))"
"(if(module-binding? b_200)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_200)))"
"(module-binding-sym b_200)"
" #f)"
" #f))))"
" (define-values (disallow) (lambda (body_203) (error \"not allowed in a cross-phase persistent module:\" body_203)))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_51 ctx_52)"
"(begin"
"(if(eq?(expand-context-context ctx_52) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_53)(expand-context-observer ctx_52)))"
"(if obs_53(let-values()(let-values()(call-expand-observe obs_53 'prim-module)))(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_51))))"
"(let-values()"
"(let-values(((s203_54) s_51)((ctx204_55) ctx_52)((temp205_56) #f))"
"(if(variable-reference-constant?(#%variable-reference expand-module16.1))"
"(expand-module14.1 #f #f #f #f #f #f #f #f #f #f s203_54 ctx204_55 temp205_56)"
"(expand-module16.1 s203_54 ctx204_55 temp205_56))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_57 ctx_58)"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_58)))"
"(if obs_59(let-values()(let-values()(call-expand-observe obs_59 'prim-module)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_57)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_60 ctx_61)"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_61)))"
"(if obs_62(let-values()(let-values()(call-expand-observe obs_62 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_61) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_60)))"
"(if(expand-context-module-begin-k ctx_61)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_60)))"
"((expand-context-module-begin-k ctx_61)"
" s_60"
"(let-values(((the-struct_63) ctx_61))"
"(if(expand-context? the-struct_63)"
"(let-values(((module-begin-k206_64) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_63)"
"(root-expand-context-post-expansion-scope the-struct_63)"
"(root-expand-context-top-level-bind-scope the-struct_63)"
"(root-expand-context-all-scopes-stx the-struct_63)"
"(root-expand-context-use-site-scopes the-struct_63)"
"(root-expand-context-defined-syms the-struct_63)"
"(root-expand-context-frame-id the-struct_63)"
"(root-expand-context-counter the-struct_63)"
"(root-expand-context-lift-key the-struct_63)"
"(expand-context-context the-struct_63)"
"(expand-context-phase the-struct_63)"
"(expand-context-namespace the-struct_63)"
"(expand-context-env the-struct_63)"
"(expand-context-user-env the-struct_63)"
"(expand-context-post-expansion-scope-action the-struct_63)"
"(expand-context-scopes the-struct_63)"
"(expand-context-def-ctx-scopes the-struct_63)"
"(expand-context-binding-layer the-struct_63)"
"(expand-context-reference-records the-struct_63)"
"(expand-context-only-immediate? the-struct_63)"
"(expand-context-just-once? the-struct_63)"
" module-begin-k206_64"
"(expand-context-need-eventually-defined the-struct_63)"
"(expand-context-allow-unbound? the-struct_63)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_63)"
"(expand-context-stops the-struct_63)"
"(expand-context-current-introduction-scopes the-struct_63)"
"(expand-context-declared-submodule-names the-struct_63)"
"(expand-context-lifts the-struct_63)"
"(expand-context-lift-envs the-struct_63)"
"(expand-context-module-lifts the-struct_63)"
"(expand-context-require-lifts the-struct_63)"
"(expand-context-to-module-lifts the-struct_63)"
"(expand-context-requires+provides the-struct_63)"
"(expand-context-name the-struct_63)"
"(expand-context-observer the-struct_63)))"
"              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_63))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_65 ctx_66)"
"(begin"
"(let-values(((obs_67)(expand-context-observer ctx_66)))"
"(if obs_67(let-values()(let-values()(call-expand-observe obs_67 'prim-declare)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_65)))))"
" print-values)"
"(define-values"
"(expand-module14.1)"
"(lambda(enclosing-all-scopes-stx2_68"
" enclosing-all-scopes-stx7_69"
" enclosing-is-cross-phase-persistent?3_70"
" enclosing-is-cross-phase-persistent?8_71"
" enclosing-requires+provides4_72"
" enclosing-requires+provides9_73"
" keep-enclosing-scope-at-phase1_74"
" keep-enclosing-scope-at-phase6_75"
" mpis-for-enclosing-reset5_76"
" mpis-for-enclosing-reset10_77"
" s11_78"
" init-ctx12_79"
" enclosing-self13_80)"
"(let-values(((s_81) s11_78))"
"(let-values(((init-ctx_82) init-ctx12_79))"
"(let-values(((enclosing-self_83) enclosing-self13_80))"
"(let-values(((keep-enclosing-scope-at-phase_84)"
"(if keep-enclosing-scope-at-phase6_75 keep-enclosing-scope-at-phase1_74 #f)))"
"(let-values(((enclosing-all-scopes-stx_85)"
"(if enclosing-all-scopes-stx7_69 enclosing-all-scopes-stx2_68 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_86)"
"(if enclosing-is-cross-phase-persistent?8_71 enclosing-is-cross-phase-persistent?3_70 #f)))"
"(let-values(((enclosing-r+p_87)"
"(if enclosing-requires+provides9_73 enclosing-requires+provides4_72 #f)))"
"(let-values(((mpis-for-enclosing-reset_88)"
"(if mpis-for-enclosing-reset10_77 mpis-for-enclosing-reset5_76 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_136)(expand-context-observer init-ctx_82)))"
"(if obs_136"
"(let-values()(let-values()(call-expand-observe obs_136 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_89)(syntax-disarm$1 s_81)))"
"(let-values(((ok?_90 module207_91 id:module-name208_92 initial-require209_93 body210_94)"
"(let-values(((s_137) disarmed-s_89))"
"(let-values(((orig-s_138) s_137))"
"(let-values(((module207_139"
" id:module-name208_140"
" initial-require209_141"
" body210_142)"
"(let-values(((s_143)"
"(if(syntax?$1 s_137)"
"(syntax-e$1 s_137)"
" s_137)))"
"(if(pair? s_143)"
"(let-values(((module211_144)"
"(let-values(((s_148)(car s_143))) s_148))"
"((id:module-name212_145"
" initial-require213_146"
" body214_147)"
"(let-values(((s_149)(cdr s_143)))"
"(let-values(((s_150)"
"(if(syntax?$1 s_149)"
"(syntax-e$1 s_149)"
" s_149)))"
"(if(pair? s_150)"
"(let-values(((id:module-name215_151)"
"(let-values(((s_154)"
"(car"
" s_150)))"
"(if(let-values(((or-part_155)"
"(if(syntax?$1"
" s_154)"
"(symbol?"
"(syntax-e$1"
" s_154))"
" #f)))"
"(if or-part_155"
" or-part_155"
"(symbol?"
" s_154)))"
" s_154"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"not an identifier\""
" orig-s_138"
" s_154))))"
"((initial-require216_152"
" body217_153)"
"(let-values(((s_156)"
"(cdr"
" s_150)))"
"(let-values(((s_157)"
"(if(syntax?$1"
" s_156)"
"(syntax-e$1"
" s_156)"
" s_156)))"
"(if(pair? s_157)"
"(let-values(((initial-require218_158)"
"(let-values(((s_160)"
"(car"
" s_157)))"
" s_160))"
"((body219_159)"
"(let-values(((s_161)"
"(cdr"
" s_157)))"
"(let-values(((s_162)"
"(if(syntax?$1"
" s_161)"
"(syntax-e$1"
" s_161)"
" s_161)))"
"(let-values(((flat-s_163)"
"(to-syntax-list.1"
" s_162)))"
"(if(not"
" flat-s_163)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_138))"
"(let-values()"
" flat-s_163)))))))"
"(values"
" initial-require218_158"
" body219_159))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_138))))))"
"(values"
" id:module-name215_151"
" initial-require216_152"
" body217_153))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_138))))))"
"(values"
" module211_144"
" id:module-name212_145"
" initial-require213_146"
" body214_147))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_138)))))"
"(values"
" #t"
" module207_139"
" id:module-name208_140"
" initial-require209_141"
" body210_142))))))"
"(let-values(((initial-require_109)(syntax->datum$1 initial-require209_93)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_164) keep-enclosing-scope-at-phase_84))"
"(if or-part_164 or-part_164(1/module-path? initial-require_109)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                   \"not a module path\""
" s_81"
" initial-require209_93)))"
"(values))))"
"(let-values(((phase_110) 0))"
"(let-values(((module-name-sym_111)(syntax-e$1 id:module-name208_92)))"
"(let-values(((outside-scope_112)(new-scope 'module)))"
"(let-values(((inside-scope_113)(new-multi-scope module-name-sym_111)))"
"(let-values(((self_114)"
"(make-self-module-path-index"
"(if enclosing-self_83"
" module-name-sym_111"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_111)))"
" enclosing-self_83)))"
"(let-values(((enclosing-mod_115)"
"(if enclosing-self_83"
"                                                          (1/module-path-index-join '(submod \"..\") self_114)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_115 mpis-for-enclosing-reset_88 #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_88"
"(cons"
" enclosing-mod_115"
"(unbox mpis-for-enclosing-reset_88))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_116)"
"(make-apply-module-scopes"
" outside-scope_112"
" inside-scope_113"
" init-ctx_82"
" keep-enclosing-scope-at-phase_84"
" self_114"
" enclosing-self_83"
" enclosing-mod_115)))"
"(let-values(((all-scopes-s_117)"
"(apply-module-scopes_116"
"(if enclosing-all-scopes-stx_85"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_85"
" keep-enclosing-scope-at-phase_84)"
" initial-require209_93))))"
"(let-values(((initial-require-s_118)"
"(apply-module-scopes_116 initial-require209_93)))"
"(let-values(((root-ctx_119)"
"(let-values(((...er/expand/module.rkt:124:20_165)"
" make-root-expand-context12.1)"
"((temp220_166)"
"(if keep-enclosing-scope-at-phase_84"
"(root-expand-context-module-scopes"
" init-ctx_82)"
" null))"
"((outside-scope221_167)"
" outside-scope_112)"
"((inside-scope222_168) inside-scope_113)"
"((all-scopes-s223_169) all-scopes-s_117))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-root-expand-context12.1))"
"(make-root-expand-context10.1"
" all-scopes-s223_169"
" #t"
" temp220_166"
" #t"
" outside-scope221_167"
" #t"
" inside-scope222_168"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:124:20_165"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
" 2)"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
"(list"
" all-scopes-s223_169"
" temp220_166"
" outside-scope221_167"
" inside-scope222_168))))))"
"(let-values(((new-module-scopes_120)"
"(root-expand-context-module-scopes root-ctx_119)))"
"(let-values(((frame-id_121)"
"(root-expand-context-frame-id root-ctx_119)))"
"(let-values(((m-ns_122)"
"(let-values(((...er/expand/module.rkt:139:16_170)"
" make-module-namespace50.1)"
"((temp224_171)"
"(expand-context-namespace"
" init-ctx_82))"
"((self225_172) self_114)"
"((root-ctx226_173) root-ctx_119)"
"((temp227_174)"
"(if enclosing-self_83 #t #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-namespace50.1))"
"(make-module-namespace48.1"
" temp227_174"
" self225_172"
" root-ctx226_173"
" temp224_171)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:139:16_170"
" keyword-procedure-extract"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
" 3)"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
"(list"
" temp227_174"
" self225_172"
" root-ctx226_173)"
" temp224_171)))))"
"(let-values(((ctx_123)"
"(let-values(((the-struct_175)"
"(copy-root-expand-context"
" init-ctx_82"
" root-ctx_119)))"
"(if(expand-context? the-struct_175)"
"(let-values(((allow-unbound?228_176) #f)"
"((namespace229_177) m-ns_122)"
"((post-expansion-scope-action230_178)"
" add-scope)"
"((phase231_179) phase_110)"
"((just-once?232_180) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_175)"
"(root-expand-context-post-expansion-scope"
" the-struct_175)"
"(root-expand-context-top-level-bind-scope"
" the-struct_175)"
"(root-expand-context-all-scopes-stx"
" the-struct_175)"
"(root-expand-context-use-site-scopes"
" the-struct_175)"
"(root-expand-context-defined-syms"
" the-struct_175)"
"(root-expand-context-frame-id"
" the-struct_175)"
"(root-expand-context-counter"
" the-struct_175)"
"(root-expand-context-lift-key"
" the-struct_175)"
"(expand-context-context the-struct_175)"
" phase231_179"
" namespace229_177"
"(expand-context-env the-struct_175)"
"(expand-context-user-env"
" the-struct_175)"
" post-expansion-scope-action230_178"
"(expand-context-scopes the-struct_175)"
"(expand-context-def-ctx-scopes"
" the-struct_175)"
"(expand-context-binding-layer"
" the-struct_175)"
"(expand-context-reference-records"
" the-struct_175)"
"(expand-context-only-immediate?"
" the-struct_175)"
" just-once?232_180"
"(expand-context-module-begin-k"
" the-struct_175)"
"(expand-context-need-eventually-defined"
" the-struct_175)"
" allow-unbound?228_176"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_175)"
"(expand-context-stops the-struct_175)"
"(expand-context-current-introduction-scopes"
" the-struct_175)"
"(expand-context-declared-submodule-names"
" the-struct_175)"
"(expand-context-lifts the-struct_175)"
"(expand-context-lift-envs"
" the-struct_175)"
"(expand-context-module-lifts"
" the-struct_175)"
"(expand-context-require-lifts"
" the-struct_175)"
"(expand-context-to-module-lifts"
" the-struct_175)"
"(expand-context-requires+provides"
" the-struct_175)"
"(expand-context-name the-struct_175)"
"(expand-context-observer"
" the-struct_175)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                               \"expand-context?\""
" the-struct_175)))))"
"(let-values(((bodys_124)"
"(let-values(((scoped-s_181)"
"(apply-module-scopes_116"
" disarmed-s_89)))"
"(let-values(((ok?_182"
" _233_183"
" _234_184"
" _235_185"
" body236_186)"
"(let-values(((s_201)"
" scoped-s_181))"
"(let-values(((orig-s_202)"
" s_201))"
"(let-values(((_233_203"
" _234_204"
" _235_205"
" body236_206)"
"(let-values(((s_207)"
"(if(syntax?$1"
" s_201)"
"(syntax-e$1"
" s_201)"
" s_201)))"
"(if(pair?"
" s_207)"
"(let-values(((_237_208)"
"(let-values(((s_212)"
"(car"
" s_207)))"
" s_212))"
"((_238_209"
" _239_210"
" body240_211)"
"(let-values(((s_213)"
"(cdr"
" s_207)))"
"(let-values(((s_214)"
"(if(syntax?$1"
" s_213)"
"(syntax-e$1"
" s_213)"
" s_213)))"
"(if(pair?"
" s_214)"
"(let-values(((_241_215)"
"(let-values(((s_218)"
"(car"
" s_214)))"
" s_218))"
"((_242_216"
" body243_217)"
"(let-values(((s_219)"
"(cdr"
" s_214)))"
"(let-values(((s_220)"
"(if(syntax?$1"
" s_219)"
"(syntax-e$1"
" s_219)"
" s_219)))"
"(if(pair?"
" s_220)"
"(let-values(((_244_221)"
"(let-values(((s_223)"
"(car"
" s_220)))"
" s_223))"
"((body245_222)"
"(let-values(((s_224)"
"(cdr"
" s_220)))"
"(let-values(((s_225)"
"(if(syntax?$1"
" s_224)"
"(syntax-e$1"
" s_224)"
" s_224)))"
"(let-values(((flat-s_226)"
"(to-syntax-list.1"
" s_225)))"
"(if(not"
" flat-s_226)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_202))"
"(let-values()"
" flat-s_226)))))))"
"(values"
" _244_221"
" body245_222))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_202))))))"
"(values"
" _241_215"
" _242_216"
" body243_217))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_202))))))"
"(values"
" _237_208"
" _238_209"
" _239_210"
" body240_211))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_202)))))"
"(values"
" #t"
" _233_203"
" _234_204"
" _235_205"
" body236_206))))))"
" body236_186))))"
"(let-values(((requires+provides_125)"
"(make-requires+provides self_114)))"
"(let-values(((defined-syms_126)"
"(root-expand-context-defined-syms"
" root-ctx_119)))"
"(let-values(((mpis-to-reset_127)(box null)))"
"(let-values(((initial-require!_128)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_84)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:172:7_227)"
" perform-initial-require!40.1)"
"((initial-require246_228)"
" initial-require_109)"
"((self247_229)"
" self_114)"
"((all-scopes-s248_230)"
" all-scopes-s_117)"
"((m-ns249_231)"
" m-ns_122)"
"((requires+provides250_232)"
" requires+provides_125)"
"((temp251_233)"
" 'module))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-initial-require!40.1))"
"(perform-initial-require!38.1"
" temp251_233"
" initial-require246_228"
" self247_229"
" all-scopes-s248_230"
" m-ns249_231"
" requires+provides250_232)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:172:7_227"
" keyword-procedure-extract"
" '(#:who)"
" 7)"
" '(#:who)"
"(list temp251_233)"
" initial-require246_228"
" self247_229"
" all-scopes-s248_230"
" m-ns249_231"
" requires+provides250_232))))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_125"
" enclosing-mod_115"
" keep-enclosing-scope-at-phase_84"
" enclosing-is-cross-phase-persistent?_86)"
"(let-values(((...er/expand/module.rkt:184:7_234)"
" add-enclosing-module-defined-and-required!63.1)"
"((requires+provides252_235)"
" requires+provides_125)"
"((enclosing-r+p253_236)"
" enclosing-r+p_87)"
"((enclosing-mod254_237)"
" enclosing-mod_115)"
"((keep-enclosing-scope-at-phase255_238)"
" keep-enclosing-scope-at-phase_84))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-enclosing-module-defined-and-required!63.1))"
"(add-enclosing-module-defined-and-required!61.1"
" enclosing-r+p253_236"
" requires+provides252_235"
" enclosing-mod254_237"
" keep-enclosing-scope-at-phase255_238)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:184:7_234"
" keyword-procedure-extract"
" '(#:enclosing-requires+provides)"
" 5)"
" '(#:enclosing-requires+provides)"
"(list"
" enclosing-r+p253_236)"
" requires+provides252_235"
" enclosing-mod254_237"
" keep-enclosing-scope-at-phase255_238)))"
"(let-values(((m-ns256_239)"
" m-ns_122)"
"((enclosing-mod257_240)"
" enclosing-mod_115)"
"((keep-enclosing-scope-at-phase258_241)"
" keep-enclosing-scope-at-phase_84))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!104.1))"
"(namespace-module-visit!102.1"
" #f"
" #f"
" m-ns256_239"
" enclosing-mod257_240"
" keep-enclosing-scope-at-phase258_241)"
"(namespace-module-visit!104.1"
" m-ns256_239"
" enclosing-mod257_240"
" keep-enclosing-scope-at-phase258_241)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_242)"
"(expand-context-observer"
" init-ctx_82)))"
"(if obs_242"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_242"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_128)"
"(values))))"
"(let-values(((again?_129) #f))"
"(let-values(((module-begin-k_130)"
"(lambda(mb-s_243 ctx_244)"
"(let-values((()"
"(begin"
"(if again?_129"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_125)"
"(initial-require!_128)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_129"
" #t)"
"(values))))"
"(let-values(((added-s_245)"
"(add-scope"
" mb-s_243"
" inside-scope_113)))"
"(let-values((()"
"(begin"
"(let-values(((obs_271)"
"(expand-context-observer"
" ctx_244)))"
"(if obs_271"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_271"
" 'rename-one"
" added-s_245)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_246)"
"(syntax-disarm$1"
" added-s_245)))"
"(let-values(((ok?_247"
" #%module-begin259_248"
" body260_249)"
"(let-values(((s_272)"
" disarmed-mb-s_246))"
"(let-values(((orig-s_273)"
" s_272))"
"(let-values(((#%module-begin259_274"
" body260_275)"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_272)"
"(syntax-e$1"
" s_272)"
" s_272)))"
"(if(pair?"
" s_276)"
"(let-values(((#%module-begin261_277)"
"(let-values(((s_279)"
"(car"
" s_276)))"
" s_279))"
"((body262_278)"
"(let-values(((s_280)"
"(cdr"
" s_276)))"
"(let-values(((s_281)"
"(if(syntax?$1"
" s_280)"
"(syntax-e$1"
" s_280)"
" s_280)))"
"(let-values(((flat-s_282)"
"(to-syntax-list.1"
" s_281)))"
"(if(not"
" flat-s_282)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_273))"
"(let-values()"
" flat-s_282)))))))"
"(values"
" #%module-begin261_277"
" body262_278))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_273)))))"
"(values"
" #t"
" #%module-begin259_274"
" body260_275))))))"
"(let-values(((bodys_260)"
" body260_249))"
"(let-values(((need-eventually-defined_261)"
"(make-hasheqv)))"
"(let-values(((module-ends_262)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_263)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_264)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_265)"
"((letrec-values(((pass-1-and-2-loop_283)"
"(lambda(bodys_284"
" phase_285)"
"(let-values(((def-ctx-scopes_286)"
"(box"
" null)))"
"(let-values(((partial-body-ctx_287)"
"(let-values(((the-struct_290)"
" ctx_244))"
"(if(expand-context?"
" the-struct_290)"
"(let-values(((context273_291)"
" 'module)"
"((phase274_292)"
" phase_285)"
"((namespace275_293)"
"(namespace->namespace-at-phase"
" m-ns_122"
" phase_285))"
"((only-immediate?276_294)"
" #t)"
"((def-ctx-scopes277_295)"
" def-ctx-scopes_286)"
"((need-eventually-defined278_296)"
" need-eventually-defined_261)"
"((declared-submodule-names279_297)"
" declared-submodule-names_264)"
"((lifts280_298)"
"(let-values(((temp284_302)"
"(make-wrap-as-definition"
" self_114"
" frame-id_121"
" inside-scope_113"
" all-scopes-s_117"
" defined-syms_126"
" requires+provides_125)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-lift-context8.1))"
"(make-lift-context6.1"
" #f"
" #f"
" temp284_302)"
"(make-lift-context8.1"
" temp284_302))))"
"((module-lifts281_299)"
"(make-module-lift-context"
" phase_285"
" #t))"
"((require-lifts282_300)"
"(make-require-lift-context"
" phase_285"
"(let-values(((...er/expand/module.rkt:262:63_303)"
" make-parse-lifted-require202.1)"
"((m-ns285_304)"
" m-ns_122)"
"((self286_305)"
" self_114)"
"((requires+provides287_306)"
" requires+provides_125)"
"((declared-submodule-names288_307)"
" declared-submodule-names_264))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-parse-lifted-require202.1))"
"(make-parse-lifted-require200.1"
" declared-submodule-names288_307"
" m-ns285_304"
" self286_305"
" requires+provides287_306)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:262:63_303"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 5)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names288_307)"
" m-ns285_304"
" self286_305"
" requires+provides287_306)))))"
"((to-module-lifts283_301)"
"(let-values(((...er/expand/module.rkt:264:64_308)"
" make-to-module-lift-context28.1)"
"((phase289_309)"
" phase_285)"
"((module-ends290_310)"
" module-ends_262)"
"((temp291_311)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp291_311"
" module-ends290_310"
" phase289_309)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:264:64_308"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp291_311"
" module-ends290_310)"
" phase289_309)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_290)"
"(root-expand-context-post-expansion-scope"
" the-struct_290)"
"(root-expand-context-top-level-bind-scope"
" the-struct_290)"
"(root-expand-context-all-scopes-stx"
" the-struct_290)"
"(root-expand-context-use-site-scopes"
" the-struct_290)"
"(root-expand-context-defined-syms"
" the-struct_290)"
"(root-expand-context-frame-id"
" the-struct_290)"
"(root-expand-context-counter"
" the-struct_290)"
"(root-expand-context-lift-key"
" the-struct_290)"
" context273_291"
" phase274_292"
" namespace275_293"
"(expand-context-env"
" the-struct_290)"
"(expand-context-user-env"
" the-struct_290)"
"(expand-context-post-expansion-scope-action"
" the-struct_290)"
"(expand-context-scopes"
" the-struct_290)"
" def-ctx-scopes277_295"
"(expand-context-binding-layer"
" the-struct_290)"
"(expand-context-reference-records"
" the-struct_290)"
" only-immediate?276_294"
"(expand-context-just-once?"
" the-struct_290)"
"(expand-context-module-begin-k"
" the-struct_290)"
" need-eventually-defined278_296"
"(expand-context-allow-unbound?"
" the-struct_290)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_290)"
"(expand-context-stops"
" the-struct_290)"
"(expand-context-current-introduction-scopes"
" the-struct_290)"
" declared-submodule-names279_297"
" lifts280_298"
"(expand-context-lift-envs"
" the-struct_290)"
" module-lifts281_299"
" require-lifts282_300"
" to-module-lifts283_301"
"(expand-context-requires+provides"
" the-struct_290)"
"(expand-context-name"
" the-struct_290)"
"(expand-context-observer"
" the-struct_290)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                           \"expand-context?\""
" the-struct_290)))))"
"(let-values(((partially-expanded-bodys_288)"
"(let-values(((...er/expand/module.rkt:270:11_312)"
" partially-expand-bodys77.1)"
"((bodys292_313)"
" bodys_284)"
"((s293_314)"
" s_81)"
"((temp294_315)"
"(zero?"
" phase_285))"
"((phase295_316)"
" phase_285)"
"((partial-body-ctx296_317)"
" partial-body-ctx_287)"
"((m-ns297_318)"
" m-ns_122)"
"((self298_319)"
" self_114)"
"((frame-id299_320)"
" frame-id_121)"
"((requires+provides300_321)"
" requires+provides_125)"
"((need-eventually-defined301_322)"
" need-eventually-defined_261)"
"((all-scopes-s302_323)"
" all-scopes-s_117)"
"((defined-syms303_324)"
" defined-syms_126)"
"((declared-keywords304_325)"
" declared-keywords_263)"
"((declared-submodule-names305_326)"
" declared-submodule-names_264)"
"((mpis-to-reset306_327)"
" mpis-to-reset_127)"
"((pass-1-and-2-loop307_328)"
" pass-1-and-2-loop_283))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" partially-expand-bodys77.1))"
"(partially-expand-bodys75.1"
" all-scopes-s302_323"
" partial-body-ctx296_317"
" declared-keywords304_325"
" declared-submodule-names305_326"
" defined-syms303_324"
" frame-id299_320"
" pass-1-and-2-loop307_328"
" mpis-to-reset306_327"
" m-ns297_318"
" need-eventually-defined301_322"
" s293_314"
" phase295_316"
" requires+provides300_321"
" self298_319"
" temp294_315"
" bodys292_313)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:270:11_312"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" 3)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
"(list"
" all-scopes-s302_323"
" partial-body-ctx296_317"
" declared-keywords304_325"
" declared-submodule-names305_326"
" defined-syms303_324"
" frame-id299_320"
" pass-1-and-2-loop307_328"
" mpis-to-reset306_327"
" m-ns297_318"
" need-eventually-defined301_322"
" s293_314"
" phase295_316"
" requires+provides300_321"
" self298_319"
" temp294_315)"
" bodys292_313)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_329)"
"(expand-context-observer"
" partial-body-ctx_287)))"
"(if obs_329"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_329"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_289)"
"(let-values(((the-struct_330)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_287"
" def-ctx-scopes_286)))"
"(if(expand-context?"
" the-struct_330)"
"(let-values(((only-immediate?308_331)"
" #f)"
"((def-ctx-scopes309_332)"
" #f)"
"((post-expansion-scope310_333)"
" #f)"
"((to-module-lifts311_334)"
"(let-values(((...er/expand/module.rkt:296:56_335)"
" make-to-module-lift-context28.1)"
"((phase312_336)"
" phase_285)"
"((module-ends313_337)"
" module-ends_262)"
"((temp314_338)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp314_338"
" module-ends313_337"
" phase312_336)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:296:56_335"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp314_338"
" module-ends313_337)"
" phase312_336)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_330)"
" post-expansion-scope310_333"
"(root-expand-context-top-level-bind-scope"
" the-struct_330)"
"(root-expand-context-all-scopes-stx"
" the-struct_330)"
"(root-expand-context-use-site-scopes"
" the-struct_330)"
"(root-expand-context-defined-syms"
" the-struct_330)"
"(root-expand-context-frame-id"
" the-struct_330)"
"(root-expand-context-counter"
" the-struct_330)"
"(root-expand-context-lift-key"
" the-struct_330)"
"(expand-context-context"
" the-struct_330)"
"(expand-context-phase"
" the-struct_330)"
"(expand-context-namespace"
" the-struct_330)"
"(expand-context-env"
" the-struct_330)"
"(expand-context-user-env"
" the-struct_330)"
"(expand-context-post-expansion-scope-action"
" the-struct_330)"
"(expand-context-scopes"
" the-struct_330)"
" def-ctx-scopes309_332"
"(expand-context-binding-layer"
" the-struct_330)"
"(expand-context-reference-records"
" the-struct_330)"
" only-immediate?308_331"
"(expand-context-just-once?"
" the-struct_330)"
"(expand-context-module-begin-k"
" the-struct_330)"
"(expand-context-need-eventually-defined"
" the-struct_330)"
"(expand-context-allow-unbound?"
" the-struct_330)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_330)"
"(expand-context-stops"
" the-struct_330)"
"(expand-context-current-introduction-scopes"
" the-struct_330)"
"(expand-context-declared-submodule-names"
" the-struct_330)"
"(expand-context-lifts"
" the-struct_330)"
"(expand-context-lift-envs"
" the-struct_330)"
"(expand-context-module-lifts"
" the-struct_330)"
"(expand-context-require-lifts"
" the-struct_330)"
" to-module-lifts311_334"
"(expand-context-requires+provides"
" the-struct_330)"
"(expand-context-name"
" the-struct_330)"
"(expand-context-observer"
" the-struct_330)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                 \"expand-context?\""
" the-struct_330)))))"
"(let-values(((...er/expand/module.rkt:300:9_339)"
" finish-expanding-body-expressons93.1)"
"((partially-expanded-bodys266_340)"
" partially-expanded-bodys_288)"
"((temp267_341)"
"(zero?"
" phase_285))"
"((phase268_342)"
" phase_285)"
"((body-ctx269_343)"
" body-ctx_289)"
"((self270_344)"
" self_114)"
"((declared-submodule-names271_345)"
" declared-submodule-names_264)"
"((mpis-to-reset272_346)"
" mpis-to-reset_127))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body-expressons93.1))"
"(finish-expanding-body-expressons91.1"
" body-ctx269_343"
" declared-submodule-names271_345"
" mpis-to-reset272_346"
" phase268_342"
" self270_344"
" temp267_341"
" partially-expanded-bodys266_340)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:300:9_339"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
"(list"
" body-ctx269_343"
" declared-submodule-names271_345"
" mpis-to-reset272_346"
" phase268_342"
" self270_344"
" temp267_341)"
" partially-expanded-bodys266_340)))))))))))"
" pass-1-and-2-loop_283)"
" bodys_260"
" phase_110)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_261"
" self_114)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_347)"
"(expand-context-observer"
" ctx_244)))"
"(if obs_347"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_347"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_266)"
"(let-values(((...er/expand/module.rkt:317:7_348)"
" resolve-provides111.1)"
"((expression-expanded-bodys315_349)"
" expression-expanded-bodys_265)"
"((s316_350)"
" s_81)"
"((requires+provides317_351)"
" requires+provides_125)"
"((declared-submodule-names318_352)"
" declared-submodule-names_264)"
"((m-ns319_353)"
" m-ns_122)"
"((phase320_354)"
" phase_110)"
"((self321_355)"
" self_114)"
"((ctx322_356)"
" ctx_244))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve-provides111.1))"
"(resolve-provides109.1"
" ctx322_356"
" declared-submodule-names318_352"
" m-ns319_353"
" s316_350"
" phase320_354"
" requires+provides317_351"
" self321_355"
" expression-expanded-bodys315_349)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:317:7_348"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx322_356"
" declared-submodule-names318_352"
" m-ns319_353"
" s316_350"
" phase320_354"
" requires+provides317_351"
" self321_355)"
" expression-expanded-bodys315_349)))))"
"(let-values(((is-cross-phase-persistent?_267)"
"(hash-ref"
" declared-keywords_263"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_267"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_125)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"cannot be cross-phase persistent due to required modules\""
" s_81"
"(hash-ref"
" declared-keywords_263"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_266)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_357)"
"(expand-context-observer"
" ctx_244)))"
"(if obs_357"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_357"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-ctx_268)"
"(let-values(((the-struct_358)"
" ctx_244))"
"(if(expand-context?"
" the-struct_358)"
"(let-values(((frame-id323_359)"
" #f)"
"((post-expansion-scope324_360)"
" #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_358)"
" post-expansion-scope324_360"
"(root-expand-context-top-level-bind-scope"
" the-struct_358)"
"(root-expand-context-all-scopes-stx"
" the-struct_358)"
"(root-expand-context-use-site-scopes"
" the-struct_358)"
"(root-expand-context-defined-syms"
" the-struct_358)"
" frame-id323_359"
"(root-expand-context-counter"
" the-struct_358)"
"(root-expand-context-lift-key"
" the-struct_358)"
"(expand-context-context"
" the-struct_358)"
"(expand-context-phase"
" the-struct_358)"
"(expand-context-namespace"
" the-struct_358)"
"(expand-context-env"
" the-struct_358)"
"(expand-context-user-env"
" the-struct_358)"
"(expand-context-post-expansion-scope-action"
" the-struct_358)"
"(expand-context-scopes"
" the-struct_358)"
"(expand-context-def-ctx-scopes"
" the-struct_358)"
"(expand-context-binding-layer"
" the-struct_358)"
"(expand-context-reference-records"
" the-struct_358)"
"(expand-context-only-immediate?"
" the-struct_358)"
"(expand-context-just-once?"
" the-struct_358)"
"(expand-context-module-begin-k"
" the-struct_358)"
"(expand-context-need-eventually-defined"
" the-struct_358)"
"(expand-context-allow-unbound?"
" the-struct_358)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_358)"
"(expand-context-stops"
" the-struct_358)"
"(expand-context-current-introduction-scopes"
" the-struct_358)"
"(expand-context-declared-submodule-names"
" the-struct_358)"
"(expand-context-lifts"
" the-struct_358)"
"(expand-context-lift-envs"
" the-struct_358)"
"(expand-context-module-lifts"
" the-struct_358)"
"(expand-context-require-lifts"
" the-struct_358)"
"(expand-context-to-module-lifts"
" the-struct_358)"
"(expand-context-requires+provides"
" the-struct_358)"
"(expand-context-name"
" the-struct_358)"
"(expand-context-observer"
" the-struct_358)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                     \"expand-context?\""
" the-struct_358)))))"
"(let-values(((declare-enclosing-module_269)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:345:14_361)"
" declare-module-for-expansion131.1)"
"((fully-expanded-bodys-except-post-submodules325_362)"
" fully-expanded-bodys-except-post-submodules_266)"
"((temp326_363)"
" id:module-name208_92)"
"((temp327_364)"
" initial-require209_93)"
"((temp328_365)"
" #%module-begin259_248)"
"((requires+provides329_366)"
" requires+provides_125)"
"((m-ns330_367)"
" m-ns_122)"
"((self331_368)"
" self_114)"
"((enclosing-self332_369)"
" enclosing-self_83)"
"((root-ctx333_370)"
" root-ctx_119))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module-for-expansion131.1))"
"(declare-module-for-expansion129.1"
" enclosing-self332_369"
" temp328_365"
" temp327_364"
" temp326_363"
" m-ns330_367"
" requires+provides329_366"
" root-ctx333_370"
" self331_368"
" fully-expanded-bodys-except-post-submodules325_362)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:345:14_361"
" keyword-procedure-extract"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" 3)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
"(list"
" enclosing-self332_369"
" temp328_365"
" temp327_364"
" temp326_363"
" m-ns330_367"
" requires+provides329_366"
" root-ctx333_370"
" self331_368)"
" fully-expanded-bodys-except-post-submodules325_362)))))))"
"(let-values(((fully-expanded-bodys_270)"
"(if(stop-at-module*?"
" ctx_244)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_266)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:360:9_371)"
" expand-post-submodules155.1)"
"((fully-expanded-bodys-except-post-submodules334_372)"
" fully-expanded-bodys-except-post-submodules_266)"
"((declare-enclosing-module335_373)"
" declare-enclosing-module_269)"
"((s336_374)"
" s_81)"
"((phase337_375)"
" phase_110)"
"((self338_376)"
" self_114)"
"((requires+provides339_377)"
" requires+provides_125)"
"((is-cross-phase-persistent?340_378)"
" is-cross-phase-persistent?_267)"
"((all-scopes-s341_379)"
" all-scopes-s_117)"
"((mpis-to-reset342_380)"
" mpis-to-reset_127)"
"((declared-submodule-names343_381)"
" declared-submodule-names_264)"
"((ctx344_382)"
" ctx_244))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-post-submodules155.1))"
"(expand-post-submodules153.1"
" all-scopes-s341_379"
" ctx344_382"
" declare-enclosing-module335_373"
" declared-submodule-names343_381"
" is-cross-phase-persistent?340_378"
" mpis-to-reset342_380"
" s336_374"
" phase337_375"
" requires+provides339_377"
" self338_376"
" fully-expanded-bodys-except-post-submodules334_372)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:360:9_371"
" keyword-procedure-extract"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" all-scopes-s341_379"
" ctx344_382"
" declare-enclosing-module335_373"
" declared-submodule-names343_381"
" is-cross-phase-persistent?340_378"
" mpis-to-reset342_380"
" s336_374"
" phase337_375"
" requires+provides339_377"
" self338_376)"
" fully-expanded-bodys-except-post-submodules334_372)))))))"
"(let-values(((mb-s263_383)"
" mb-s_243)"
"((disarmed-mb-s264_384)"
" disarmed-mb-s_246)"
"((temp265_385)"
"(list*"
" #%module-begin259_248"
" fully-expanded-bodys_270)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" mb-s263_383"
" disarmed-mb-s264_384"
" temp265_385)"
"(rebuild53.1"
" mb-s263_383"
" disarmed-mb-s264_384"
" temp265_385)))))))))))))))))))))))))))"
"(let-values(((mb-ctx_131)"
"(let-values(((the-struct_386)"
" ctx_123))"
"(if(expand-context?"
" the-struct_386)"
"(let-values(((context345_387)"
" 'module-begin)"
"((module-begin-k346_388)"
" module-begin-k_130))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_386)"
"(root-expand-context-post-expansion-scope"
" the-struct_386)"
"(root-expand-context-top-level-bind-scope"
" the-struct_386)"
"(root-expand-context-all-scopes-stx"
" the-struct_386)"
"(root-expand-context-use-site-scopes"
" the-struct_386)"
"(root-expand-context-defined-syms"
" the-struct_386)"
"(root-expand-context-frame-id"
" the-struct_386)"
"(root-expand-context-counter"
" the-struct_386)"
"(root-expand-context-lift-key"
" the-struct_386)"
" context345_387"
"(expand-context-phase"
" the-struct_386)"
"(expand-context-namespace"
" the-struct_386)"
"(expand-context-env"
" the-struct_386)"
"(expand-context-user-env"
" the-struct_386)"
"(expand-context-post-expansion-scope-action"
" the-struct_386)"
"(expand-context-scopes"
" the-struct_386)"
"(expand-context-def-ctx-scopes"
" the-struct_386)"
"(expand-context-binding-layer"
" the-struct_386)"
"(expand-context-reference-records"
" the-struct_386)"
"(expand-context-only-immediate?"
" the-struct_386)"
"(expand-context-just-once?"
" the-struct_386)"
" module-begin-k346_388"
"(expand-context-need-eventually-defined"
" the-struct_386)"
"(expand-context-allow-unbound?"
" the-struct_386)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_386)"
"(expand-context-stops"
" the-struct_386)"
"(expand-context-current-introduction-scopes"
" the-struct_386)"
"(expand-context-declared-submodule-names"
" the-struct_386)"
"(expand-context-lifts"
" the-struct_386)"
"(expand-context-lift-envs"
" the-struct_386)"
"(expand-context-module-lifts"
" the-struct_386)"
"(expand-context-require-lifts"
" the-struct_386)"
"(expand-context-to-module-lifts"
" the-struct_386)"
"(expand-context-requires+provides"
" the-struct_386)"
"(expand-context-name"
" the-struct_386)"
"(expand-context-observer"
" the-struct_386)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"expand-context?\""
" the-struct_386)))))"
"(let-values(((mb-scopes-s_132)"
"(if keep-enclosing-scope-at-phase_84"
" disarmed-s_89"
" all-scopes-s_117)))"
"(let-values(((mb_133)"
"(let-values(((...er/expand/module.rkt:401:5_389)"
" ensure-module-begin32.1)"
"((bodys347_390)"
" bodys_124)"
"((module-name-sym348_391)"
" module-name-sym_111)"
"((mb-scopes-s349_392)"
" mb-scopes-s_132)"
"((m-ns350_393)"
" m-ns_122)"
"((mb-ctx351_394)"
" mb-ctx_131)"
"((phase352_395)"
" phase_110)"
"((s353_396)"
" s_81))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" ensure-module-begin32.1))"
"(ensure-module-begin30.1"
" mb-ctx351_394"
" m-ns350_393"
" module-name-sym348_391"
" phase352_395"
" s353_396"
" mb-scopes-s349_392"
" bodys347_390)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:401:5_389"
" keyword-procedure-extract"
" '(#:ctx"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s"
" #:scopes-s)"
" 3)"
" '(#:ctx"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s"
" #:scopes-s)"
"(list"
" mb-ctx351_394"
" m-ns350_393"
" module-name-sym348_391"
" phase352_395"
" s353_396"
" mb-scopes-s349_392)"
" bodys347_390)))))"
"(let-values(((expanded-mb_134)"
"(let-values()"
"(let-values(((mb354_397)"
" mb_133)"
"((mb-ctx355_398)"
" mb-ctx_131))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" mb354_397"
" mb-ctx355_398)"
"(expand7.1"
" mb354_397"
" mb-ctx355_398))))))"
"(let-values(((generic-self_135)"
"(make-generic-self-module-path-index"
" self_114)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_114)"
"(let-values(((lst_399)"
"(unbox"
" mpis-to-reset_127)))"
"(begin"
"(if(list? lst_399)"
"(void)"
"(let-values()"
"(in-list lst_399)))"
"((letrec-values(((for-loop_400)"
"(lambda(fold-var_401"
" lst_402)"
"(if(pair?"
" lst_402)"
"(let-values(((mpi_403)"
"(unsafe-car"
" lst_402)))"
"(let-values(((fold-var_404)"
"(let-values(((fold-var_405)"
" fold-var_401))"
"(let-values(((fold-var_406)"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_403))"
"(void)))))"
"(values"
" fold-var_406)))))"
"(for-loop_400"
" fold-var_404"
"(unsafe-cdr"
" lst_402))))"
" fold-var_401))))"
" for-loop_400)"
"(void)"
" lst_399)))"
"(let-values(((result-s_407)"
"(let-values(((s356_408)"
" s_81)"
"((disarmed-s357_409)"
" disarmed-s_89)"
"((temp358_410)"
"(list"
" module207_91"
" id:module-name208_92"
" initial-require-s_118"
" expanded-mb_134)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" s356_408"
" disarmed-s357_409"
" temp358_410)"
"(rebuild53.1"
" s356_408"
" disarmed-s357_409"
" temp358_410)))))"
"(let-values(((result-s_411)"
"(syntax-module-path-index-shift"
" result-s_407"
" self_114"
" generic-self_135)))"
"(let-values(((result-s_412)"
"(attach-require-provide-properties"
" requires+provides_125"
" result-s_411"
" self_114"
" generic-self_135)))"
"(let-values(((result-s_413)"
"(attach-root-expand-context-properties"
" result-s_412"
" root-ctx_119"
" self_114"
" generic-self_135)))"
"(let-values(((result-s_414)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_125)"
"(syntax-property$1"
" result-s_413"
" 'module-body-context-simple?"
" #t)"
" result-s_413)))"
"(begin"
"(let-values(((obs_415)"
"(expand-context-observer"
" ctx_123)))"
"(if obs_415"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_415"
" 'rename-one"
" result-s_414)))"
"(void)))"
" result-s_414))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack15.1)"
"(lambda(given-kws_416 given-args_417 s11_418 init-ctx12_419 enclosing-self13_420)"
"(let-values(((enclosing-all-scopes-stx7_421)"
"(if(pair? given-kws_416)(eq? '#:enclosing-all-scopes-stx(car given-kws_416)) #f)))"
"(let-values(((enclosing-all-scopes-stx2_422)(if enclosing-all-scopes-stx7_421(car given-args_417)(void)))"
"((given-kws_423)(if enclosing-all-scopes-stx7_421(cdr given-kws_416) given-kws_416))"
"((given-args_424)(if enclosing-all-scopes-stx7_421(cdr given-args_417) given-args_417)))"
"(let-values(((enclosing-is-cross-phase-persistent?8_425)"
"(if(pair? given-kws_423)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_423)) #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?3_426)"
"(if enclosing-is-cross-phase-persistent?8_425(car given-args_424)(void)))"
"((given-kws_427)"
"(if enclosing-is-cross-phase-persistent?8_425(cdr given-kws_423) given-kws_423))"
"((given-args_428)"
"(if enclosing-is-cross-phase-persistent?8_425(cdr given-args_424) given-args_424)))"
"(let-values(((enclosing-requires+provides9_429)"
"(if(pair? given-kws_427)(eq? '#:enclosing-requires+provides(car given-kws_427)) #f)))"
"(let-values(((enclosing-requires+provides4_430)"
"(if enclosing-requires+provides9_429(car given-args_428)(void)))"
"((given-kws_431)(if enclosing-requires+provides9_429(cdr given-kws_427) given-kws_427))"
"((given-args_432)(if enclosing-requires+provides9_429(cdr given-args_428) given-args_428)))"
"(let-values(((keep-enclosing-scope-at-phase6_433)"
"(if(pair? given-kws_431)(eq? '#:keep-enclosing-scope-at-phase(car given-kws_431)) #f)))"
"(let-values(((keep-enclosing-scope-at-phase1_434)"
"(if keep-enclosing-scope-at-phase6_433(car given-args_432)(void)))"
"((given-kws_435)"
"(if keep-enclosing-scope-at-phase6_433(cdr given-kws_431) given-kws_431))"
"((given-args_436)"
"(if keep-enclosing-scope-at-phase6_433(cdr given-args_432) given-args_432)))"
"(let-values(((mpis-for-enclosing-reset10_437)(pair? given-kws_435)))"
"(let-values(((mpis-for-enclosing-reset5_438)"
"(if mpis-for-enclosing-reset10_437(car given-args_436)(void))))"
"(expand-module14.1"
" enclosing-all-scopes-stx2_422"
" enclosing-all-scopes-stx7_421"
" enclosing-is-cross-phase-persistent?3_426"
" enclosing-is-cross-phase-persistent?8_425"
" enclosing-requires+provides4_430"
" enclosing-requires+provides9_429"
" keep-enclosing-scope-at-phase1_434"
" keep-enclosing-scope-at-phase6_433"
" mpis-for-enclosing-reset5_438"
" mpis-for-enclosing-reset10_437"
" s11_418"
" init-ctx12_419"
" enclosing-self13_420)))))))))))))"
"(define-values"
"(expand-module16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_439 given-argc_440)"
"(if(= given-argc_440 5)"
"(let-values(((l1_441) given-kws_439))"
"(let-values(((l1_442)"
"(if(null? l1_441)"
" l1_441"
"(if(eq?(car l1_441) '#:enclosing-all-scopes-stx)(cdr l1_441) l1_441))))"
"(let-values(((l1_443) l1_442))"
"(let-values(((l1_444)"
"(if(null? l1_443)"
" l1_443"
"(if(eq?(car l1_443) '#:enclosing-is-cross-phase-persistent?)(cdr l1_443) l1_443))))"
"(let-values(((l1_445) l1_444))"
"(let-values(((l1_446)"
"(if(null? l1_445)"
" l1_445"
"(if(eq?(car l1_445) '#:enclosing-requires+provides)(cdr l1_445) l1_445))))"
"(let-values(((l1_447) l1_446))"
"(let-values(((l1_448)"
"(if(null? l1_447)"
" l1_447"
"(if(eq?(car l1_447) '#:keep-enclosing-scope-at-phase)(cdr l1_447) l1_447))))"
"(let-values(((l1_449) l1_448))"
"(let-values(((l1_450)"
"(if(null? l1_449)"
" l1_449"
"(if(eq?(car l1_449) '#:mpis-for-enclosing-reset)(cdr l1_449) l1_449))))"
"(null? l1_450)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_451 given-args_452 s_453 init-ctx_454 enclosing-self_455)"
"(unpack15.1 given-kws_451 given-args_452 s_453 init-ctx_454 enclosing-self_455)))"
" null"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(let-values(((expand-module_456)"
"(case-lambda"
"((s_457 init-ctx_458 enclosing-self_459)"
"(unpack15.1 null null s_457 init-ctx_458 enclosing-self_459)))))"
" expand-module_456)))"
"(define-values"
"(lifted/1.1 lifted/2.1 lifted/3.1 lifted/4.1 lifted/5.1)"
"(make-struct-type"
" 'ensure-module-begin"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'ensure-module-begin(case-lambda((self_460 bodys_461)(apply missing-kw self_460 bodys_461 null))))))"
"(current-inspector)"
"(case-lambda((self_462 bodys_463)(apply missing-kw self_462 bodys_463 null)))))"
"(define-values"
"(ensure-module-begin30.1)"
"(lambda(ctx20_464 m-ns19_465 module-name-sym17_466 phase21_467 s22_468 scopes-s18_469 bodys29_470)"
"(let-values(((bodys_471) bodys29_470))"
"(let-values(((module-name-sym_472) module-name-sym17_466))"
"(let-values(((scopes-s_473) scopes-s18_469))"
"(let-values(((m-ns_474) m-ns19_465))"
"(let-values(((ctx_475) ctx20_464))"
"(let-values(((phase_476) phase21_467))"
"(let-values(((s_477) s22_468))"
"(let-values()"
"(let-values(((make-mb-ctx_478)"
"(lambda()"
"(let-values(((the-struct_480) ctx_475))"
"(if(expand-context? the-struct_480)"
"(let-values(((context359_481) 'module-begin)((only-immediate?360_482) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_480)"
"(root-expand-context-post-expansion-scope the-struct_480)"
"(root-expand-context-top-level-bind-scope the-struct_480)"
"(root-expand-context-all-scopes-stx the-struct_480)"
"(root-expand-context-use-site-scopes the-struct_480)"
"(root-expand-context-defined-syms the-struct_480)"
"(root-expand-context-frame-id the-struct_480)"
"(root-expand-context-counter the-struct_480)"
"(root-expand-context-lift-key the-struct_480)"
" context359_481"
"(expand-context-phase the-struct_480)"
"(expand-context-namespace the-struct_480)"
"(expand-context-env the-struct_480)"
"(expand-context-user-env the-struct_480)"
"(expand-context-post-expansion-scope-action the-struct_480)"
"(expand-context-scopes the-struct_480)"
"(expand-context-def-ctx-scopes the-struct_480)"
"(expand-context-binding-layer the-struct_480)"
"(expand-context-reference-records the-struct_480)"
" only-immediate?360_482"
"(expand-context-just-once? the-struct_480)"
"(expand-context-module-begin-k the-struct_480)"
"(expand-context-need-eventually-defined the-struct_480)"
"(expand-context-allow-unbound? the-struct_480)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_480)"
"(expand-context-stops the-struct_480)"
"(expand-context-current-introduction-scopes the-struct_480)"
"(expand-context-declared-submodule-names the-struct_480)"
"(expand-context-lifts the-struct_480)"
"(expand-context-lift-envs the-struct_480)"
"(expand-context-module-lifts the-struct_480)"
"(expand-context-require-lifts the-struct_480)"
"(expand-context-to-module-lifts the-struct_480)"
"(expand-context-requires+provides the-struct_480)"
"(expand-context-name the-struct_480)"
"(expand-context-observer the-struct_480)))"
"                                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_480))))))"
"(let-values(((mb_479)"
"(if(= 1(length bodys_471))"
"(let-values()"
"(begin"
"(let-values(((obs_483)(expand-context-observer ctx_475)))"
"(if obs_483"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_483 'rename-one(car bodys_471))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_471)) phase_476))"
"(let-values()(car bodys_471))"
"(let-values()"
"(let-values(((partly-expanded-body_484)"
"(let-values()"
"(let-values(((temp361_485)"
"(add-enclosing-name-property"
"(car bodys_471)"
" module-name-sym_472))"
"((temp362_486)(make-mb-ctx_478)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp361_485 temp362_486)"
"(expand7.1 temp361_485 temp362_486))))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_484)"
" phase_476))"
"(let-values() partly-expanded-body_484)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:483:10_487)"
" add-module-begin43.1)"
"((temp363_488)(list partly-expanded-body_484))"
"((s364_489) s_477)"
"((scopes-s365_490) scopes-s_473)"
"((phase366_491) phase_476)"
"((module-name-sym367_492) module-name-sym_472)"
"((temp368_493)(make-mb-ctx_478))"
"((temp369_494) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference add-module-begin43.1))"
"(add-module-begin41.1"
" temp369_494"
" #t"
" temp363_488"
" s364_489"
" scopes-s365_490"
" phase366_491"
" module-name-sym367_492"
" temp368_493)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:483:10_487"
" keyword-procedure-extract"
" '(#:log-rename-one?)"
" 8)"
" '(#:log-rename-one?)"
"(list temp369_494)"
" temp363_488"
" s364_489"
" scopes-s365_490"
" phase366_491"
" module-name-sym367_492"
" temp368_493))))))))))"
"(let-values()"
"(let-values(((bodys370_495) bodys_471)"
"((s371_496) s_477)"
"((scopes-s372_497) scopes-s_473)"
"((phase373_498) phase_476)"
"((module-name-sym374_499) module-name-sym_472)"
"((temp375_500)(make-mb-ctx_478)))"
"(if(variable-reference-constant?(#%variable-reference add-module-begin43.1))"
"(add-module-begin41.1"
" #f"
" #f"
" bodys370_495"
" s371_496"
" scopes-s372_497"
" phase373_498"
" module-name-sym374_499"
" temp375_500)"
"(add-module-begin43.1"
" bodys370_495"
" s371_496"
" scopes-s372_497"
" phase373_498"
" module-name-sym374_499"
" temp375_500)))))))"
"(add-enclosing-name-property mb_479 module-name-sym_472)))))))))))))"
"(define-values"
"(unpack31.1)"
"(lambda(given-kws_501 given-args_502 bodys29_503)"
"(let-values(((ctx20_504)(car given-args_502))"
"((given-kws_505)(cdr given-kws_501))"
"((given-args_506)(cdr given-args_502)))"
"(let-values(((m-ns19_507)(car given-args_506))"
"((given-kws_508)(cdr given-kws_505))"
"((given-args_509)(cdr given-args_506)))"
"(let-values(((module-name-sym17_510)(car given-args_509))"
"((given-kws_511)(cdr given-kws_508))"
"((given-args_512)(cdr given-args_509)))"
"(let-values(((phase21_513)(car given-args_512))"
"((given-kws_514)(cdr given-kws_511))"
"((given-args_515)(cdr given-args_512)))"
"(let-values(((s22_516)(car given-args_515))"
"((given-kws_517)(cdr given-kws_514))"
"((given-args_518)(cdr given-args_515)))"
"(let-values(((scopes-s18_519)(car given-args_518)))"
"(ensure-module-begin30.1"
" ctx20_504"
" m-ns19_507"
" module-name-sym17_510"
" phase21_513"
" s22_516"
" scopes-s18_519"
" bodys29_503)))))))))"
"(define-values"
"(ensure-module-begin32.1)"
"(lifted/2.1"
"(lambda(given-kws_520 given-argc_521)"
"(if(= given-argc_521 3)"
"(let-values(((l2_522) given-kws_520))"
"(if(pair? l2_522)"
"(if(eq?(car l2_522) '#:ctx)"
"(let-values(((l2_523)(cdr l2_522)))"
"(if(pair? l2_523)"
"(if(eq?(car l2_523) '#:m-ns)"
"(let-values(((l2_524)(cdr l2_523)))"
"(if(pair? l2_524)"
"(if(eq?(car l2_524) '#:module-name-sym)"
"(let-values(((l2_525)(cdr l2_524)))"
"(if(pair? l2_525)"
"(if(eq?(car l2_525) '#:phase)"
"(let-values(((l2_526)(cdr l2_525)))"
"(if(pair? l2_526)"
"(if(eq?(car l2_526) '#:s)"
"(let-values(((l2_527)(cdr l2_526)))"
"(if(pair? l2_527)"
"(if(eq?(car l2_527) '#:scopes-s)(null?(cdr l2_527)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_528 given-args_529 bodys_530)(unpack31.1 given-kws_528 given-args_529 bodys_530)))"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)))"
"(define-values"
"(add-module-begin41.1)"
"(lambda(log-rename-one?33_531"
" log-rename-one?34_532"
" bodys35_533"
" s36_534"
" scopes-s37_535"
" phase38_536"
" module-name-sym39_537"
" mb-ctx40_538)"
"(let-values(((bodys_539) bodys35_533))"
"(let-values(((s_540) s36_534))"
"(let-values(((scopes-s_541) scopes-s37_535))"
"(let-values(((phase_542) phase38_536))"
"(let-values(((module-name-sym_543) module-name-sym39_537))"
"(let-values(((mb-ctx_544) mb-ctx40_538))"
"(let-values(((log-rename-one?_545)(if log-rename-one?34_532 log-rename-one?33_531 #t)))"
"(let-values()"
"(let-values(((disarmed-scopes-s_546)(syntax-disarm$1 scopes-s_541)))"
"(let-values(((mb-id_547)(datum->syntax$1 disarmed-scopes-s_546 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id376_550) mb-id_547)((phase377_551) phase_542))"
"(if(variable-reference-constant?(#%variable-reference resolve31.1))"
"(resolve29.1 #f #f #f #f #f #f #f #f mb-id376_550 phase377_551)"
"(resolve31.1 mb-id376_550 phase377_551)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_540)))"
"(values))))"
"(let-values(((mb_548)"
"(datum->syntax$1 disarmed-scopes-s_546(list* mb-id_547 bodys_539) s_540)))"
"(let-values((()"
"(begin"
"(let-values(((obs_552)(expand-context-observer mb-ctx_544)))"
"(if obs_552"
"(let-values()"
"(let-values()(call-expand-observe obs_552 'tag mb_548)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_545"
"(let-values()"
"(let-values(((obs_553)(expand-context-observer mb-ctx_544)))"
"(if obs_553"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_553 'rename-one mb_548)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_549)"
"(let-values()"
"(let-values(((temp378_554)"
"(add-enclosing-name-property mb_548 module-name-sym_543))"
"((mb-ctx379_555) mb-ctx_544))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp378_554 mb-ctx379_555)"
"(expand7.1 temp378_554 mb-ctx379_555))))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_549) phase_542))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_540"
" partly-expanded-mb_549)))"
" partly-expanded-mb_549))))))))))))))))))"
"(define-values"
"(unpack42.1)"
"(lambda(given-kws_556"
" given-args_557"
" bodys35_558"
" s36_559"
" scopes-s37_560"
" phase38_561"
" module-name-sym39_562"
" mb-ctx40_563)"
"(let-values(((log-rename-one?34_564)(pair? given-kws_556)))"
"(let-values(((log-rename-one?33_565)(if log-rename-one?34_564(car given-args_557)(void))))"
"(add-module-begin41.1"
" log-rename-one?33_565"
" log-rename-one?34_564"
" bodys35_558"
" s36_559"
" scopes-s37_560"
" phase38_561"
" module-name-sym39_562"
" mb-ctx40_563)))))"
"(define-values"
"(add-module-begin43.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_566 given-argc_567)"
"(if(= given-argc_567 8)"
"(let-values(((l1_568) given-kws_566))"
"(let-values(((l1_569)"
"(if(null? l1_568) l1_568(if(eq?(car l1_568) '#:log-rename-one?)(cdr l1_568) l1_568))))"
"(null? l1_569)))"
" #f))"
"(case-lambda"
"((given-kws_570 given-args_571 bodys_572 s_573 scopes-s_574 phase_575 module-name-sym_576 mb-ctx_577)"
"(unpack42.1 given-kws_570 given-args_571 bodys_572 s_573 scopes-s_574 phase_575 module-name-sym_576 mb-ctx_577)))"
" null"
" '(#:log-rename-one?)"
"(let-values(((add-module-begin_578)"
"(case-lambda"
"((bodys_579 s_580 scopes-s_581 phase_582 module-name-sym_583 mb-ctx_584)"
"(unpack42.1 null null bodys_579 s_580 scopes-s_581 phase_582 module-name-sym_583 mb-ctx_584)))))"
" add-module-begin_578)))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_585 module-name-sym_586)(syntax-property$1 stx_585 'enclosing-module-name module-name-sym_586)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_587"
" outside-scope_588"
" init-ctx_589"
" keep-enclosing-scope-at-phase_590"
" self_591"
" enclosing-self_592"
" enclosing-mod_593)"
"(lambda(s_594)"
"(let-values()"
"(let-values(((s-without-enclosing_595)"
"(if keep-enclosing-scope-at-phase_590"
" s_594"
"(remove-use-site-scopes"
"(let-values(((lst_598)(root-expand-context-module-scopes init-ctx_589)))"
"(begin"
"(if(list? lst_598)(void)(let-values()(in-list lst_598)))"
"((letrec-values(((for-loop_599)"
"(lambda(s_600 lst_601)"
"(if(pair? lst_601)"
"(let-values(((sc_602)(unsafe-car lst_601)))"
"(let-values(((s_603)"
"(let-values(((s_604) s_600))"
"(let-values(((s_605)"
"(let-values()"
"(remove-scope s_604 sc_602))))"
"(values s_605)))))"
"(for-loop_599 s_603(unsafe-cdr lst_601))))"
" s_600))))"
" for-loop_599)"
" s_594"
" lst_598)))"
" init-ctx_589))))"
"(let-values(((s-with-edges_596)"
"(add-scope(add-scope s-without-enclosing_595 outside-scope_588) inside-scope_587)))"
"(let-values(((s-with-suitable-enclosing_597)"
"(if keep-enclosing-scope-at-phase_590"
"(let-values()"
"(syntax-module-path-index-shift s-with-edges_596 enclosing-self_592 enclosing-mod_593))"
"(let-values() s-with-edges_596))))"
"(syntax-module-path-index-shift"
" s-with-suitable-enclosing_597"
"(make-generic-self-module-path-index self_591)"
" self_591"
"(current-code-inspector)))))))))"
"(define-values"
"(lifted/6.1 lifted/7.1 lifted/8.1 lifted/9.1 lifted/10.1)"
"(make-struct-type"
" 'partially-expand-bodys"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'partially-expand-bodys(case-lambda((self_606 bodys_607)(apply missing-kw self_606 bodys_607 null))))))"
"(current-inspector)"
"(case-lambda((self_608 bodys_609)(apply missing-kw self_608 bodys_609 null)))))"
"(define-values"
"(partially-expand-bodys75.1)"
"(lambda(all-scopes-stx53_610"
" ctx47_611"
" declared-keywords55_612"
" declared-submodule-names56_613"
" defined-syms54_614"
" frame-id50_615"
" loop58_616"
" mpis-to-reset57_617"
" namespace48_618"
" need-eventually-defined52_619"
" original44_620"
" phase46_621"
" requires-and-provides51_622"
" self49_623"
" tail?45_624"
" bodys74_625)"
"(let-values(((bodys_626) bodys74_625))"
"(let-values(((s_627) original44_620))"
"(let-values(((tail?_628) tail?45_624))"
"(let-values(((phase_629) phase46_621))"
"(let-values(((partial-body-ctx_630) ctx47_611))"
"(let-values(((m-ns_631) namespace48_618))"
"(let-values(((self_632) self49_623))"
"(let-values(((frame-id_633) frame-id50_615))"
"(let-values(((requires+provides_634) requires-and-provides51_622))"
"(let-values(((need-eventually-defined_635) need-eventually-defined52_619))"
"(let-values(((all-scopes-stx_636) all-scopes-stx53_610))"
"(let-values(((defined-syms_637) defined-syms54_614))"
"(let-values(((declared-keywords_638) declared-keywords55_612))"
"(let-values(((declared-submodule-names_639) declared-submodule-names56_613))"
"(let-values(((mpis-to-reset_640) mpis-to-reset57_617))"
"(let-values(((pass-1-and-2-loop_641) loop58_616))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_631 phase_629)"
"((letrec-values(((loop_642)"
"(lambda(tail?_643 bodys_644)"
"(if(null? bodys_644)"
"(let-values()"
"(if tail?_643"
"(let-values()"
"(let-values(((bodys_645)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_630))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_630)))))"
"(if(null? bodys_645)"
" null"
"(loop_642"
" #t"
"(add-post-expansion-scope"
" bodys_645"
" partial-body-ctx_630)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_649)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_649"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_649"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_646)"
"(let-values()"
"(let-values(((temp380_650)"
"(car bodys_644))"
"((partial-body-ctx381_651)"
" partial-body-ctx_630))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp380_650"
" partial-body-ctx381_651)"
"(expand7.1"
" temp380_650"
" partial-body-ctx381_651))))))"
"(let-values(((disarmed-exp-body_647)"
"(syntax-disarm$1 exp-body_646)))"
"(let-values(((lifted-defns_648)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_630))))"
"(begin"
"(if(null? lifted-defns_648)"
"(let-values()"
"(begin"
"(let-values(((obs_652)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_652"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_652"
" 'rename-list"
" lifted-defns_648)))"
"(void)))"
"(let-values(((obs_653)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_653"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_653"
" 'module-lift-loop"
"(append"
" lifted-defns_648"
"(cons"
" exp-body_646"
"(cdr bodys_644))))))"
"(void)))))"
"(let-values()"
"(let-values(((obs_654)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_654"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_654"
" 'module-lift-end-loop"
"(cons"
" exp-body_646"
"(cdr bodys_644)))))"
"(void)))))"
"(let-values(((obs_655)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_655"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_655"
" 'rename-one"
" exp-body_646)))"
"(void)))"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_630))"
" lifted-defns_648"
"(loop_642"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_630)))"
"(let-values(((tmp_656)"
"(core-form-sym"
" disarmed-exp-body_647"
" phase_629)))"
"(if(equal? tmp_656 'begin)"
"(let-values()"
"(let-values(((ok?_657"
" begin382_658"
" e383_659)"
"(let-values(((s_672)"
" disarmed-exp-body_647))"
"(let-values(((orig-s_673)"
" s_672))"
"(let-values(((begin382_674"
" e383_675)"
"(let-values(((s_676)"
"(if(syntax?$1"
" s_672)"
"(syntax-e$1"
" s_672)"
" s_672)))"
"(if(pair?"
" s_676)"
"(let-values(((begin384_677)"
"(let-values(((s_679)"
"(car"
" s_676)))"
" s_679))"
"((e385_678)"
"(let-values(((s_680)"
"(cdr"
" s_676)))"
"(let-values(((s_681)"
"(if(syntax?$1"
" s_680)"
"(syntax-e$1"
" s_680)"
" s_680)))"
"(let-values(((flat-s_682)"
"(to-syntax-list.1"
" s_681)))"
"(if(not"
" flat-s_682)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                              \"bad syntax\""
" orig-s_673))"
"(let-values()"
" flat-s_682)))))))"
"(values"
" begin384_677"
" e385_678))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_673)))))"
"(values"
" #t"
" begin382_674"
" e383_675))))))"
"(let-values(((track_670)"
"(lambda(e_683)"
"(syntax-track-origin$1"
" e_683"
" exp-body_646))))"
"(let-values(((spliced-bodys_671)"
"(append"
"(map2"
" track_670"
" e383_659)"
"(cdr bodys_644))))"
"(begin"
"(let-values(((obs_684)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_684"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_684"
" 'splice"
" spliced-bodys_671)))"
"(void)))"
"(loop_642"
" tail?_643"
" spliced-bodys_671))))))"
"(if(equal? tmp_656 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_700)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_700"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_700"
" 'enter-prim"
" exp-body_646)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_701)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_701"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_701"
" 'enter-prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values(((ok?_685"
" begin-for-syntax386_686"
" e387_687)"
"(let-values(((s_702)"
" disarmed-exp-body_647))"
"(let-values(((orig-s_703)"
" s_702))"
"(let-values(((begin-for-syntax386_704"
" e387_705)"
"(let-values(((s_706)"
"(if(syntax?$1"
" s_702)"
"(syntax-e$1"
" s_702)"
" s_702)))"
"(if(pair?"
" s_706)"
"(let-values(((begin-for-syntax388_707)"
"(let-values(((s_709)"
"(car"
" s_706)))"
" s_709))"
"((e389_708)"
"(let-values(((s_710)"
"(cdr"
" s_706)))"
"(let-values(((s_711)"
"(if(syntax?$1"
" s_710)"
"(syntax-e$1"
" s_710)"
" s_710)))"
"(let-values(((flat-s_712)"
"(to-syntax-list.1"
" s_711)))"
"(if(not"
" flat-s_712)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                    \"bad syntax\""
" orig-s_703))"
"(let-values()"
" flat-s_712)))))))"
"(values"
" begin-for-syntax388_707"
" e389_708))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                            \"bad syntax\""
" orig-s_703)))))"
"(values"
" #t"
" begin-for-syntax386_704"
" e387_705))))))"
"(let-values(((nested-bodys_698)"
"(pass-1-and-2-loop_641"
" e387_687"
"(add1"
" phase_629))))"
"(let-values(((ct-m-ns_699)"
"(namespace->namespace-at-phase"
" m-ns_631"
"(add1"
" phase_629))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_631"
"(add1 phase_629))"
"(eval-nested-bodys"
" nested-bodys_698"
"(add1 phase_629)"
" ct-m-ns_699"
" self_632"
" partial-body-ctx_630)"
"(namespace-visit-available-modules!"
" m-ns_631"
" phase_629)"
"(let-values(((obs_713)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_713"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_713"
" 'exit-prim)))"
"(void)))"
"(cons"
"(let-values(((exp-body390_714)"
" exp-body_646)"
"((disarmed-exp-body391_715)"
" disarmed-exp-body_647)"
"((temp392_716)"
"(list*"
" begin-for-syntax386_686"
" nested-bodys_698)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" exp-body390_714"
" disarmed-exp-body391_715"
" temp392_716)"
"(rebuild53.1"
" exp-body390_714"
" disarmed-exp-body391_715"
" temp392_716)))"
"(loop_642"
" tail?_643"
"(cdr"
" bodys_644))))))))))"
"(if(equal? tmp_656 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_735)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_735"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_735"
" 'enter-prim"
" exp-body_646)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_736)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_736"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_736"
" 'enter-prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_717"
" define-values393_718"
" id394_719"
" rhs395_720)"
"(let-values(((s_737)"
" disarmed-exp-body_647))"
"(let-values(((orig-s_738)"
" s_737))"
"(let-values(((define-values393_739"
" id394_740"
" rhs395_741)"
"(let-values(((s_742)"
"(if(syntax?$1"
" s_737)"
"(syntax-e$1"
" s_737)"
" s_737)))"
"(if(pair?"
" s_742)"
"(let-values(((define-values396_743)"
"(let-values(((s_746)"
"(car"
" s_742)))"
" s_746))"
"((id397_744"
" rhs398_745)"
"(let-values(((s_747)"
"(cdr"
" s_742)))"
"(let-values(((s_748)"
"(if(syntax?$1"
" s_747)"
"(syntax-e$1"
" s_747)"
" s_747)))"
"(if(pair?"
" s_748)"
"(let-values(((id399_749)"
"(let-values(((s_751)"
"(car"
" s_748)))"
"(let-values(((s_752)"
"(if(syntax?$1"
" s_751)"
"(syntax-e$1"
" s_751)"
" s_751)))"
"(let-values(((flat-s_753)"
"(to-syntax-list.1"
" s_752)))"
"(if(not"
" flat-s_753)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                          \"bad syntax\""
" orig-s_738))"
"(let-values()"
"(let-values(((id_754)"
"(let-values(((lst_755)"
" flat-s_753))"
"(begin"
"(if(list?"
" lst_755)"
"(void)"
"(let-values()"
"(in-list"
" lst_755)))"
"((letrec-values(((for-loop_756)"
"(lambda(id_757"
" lst_758)"
"(if(pair?"
" lst_758)"
"(let-values(((s_759)"
"(unsafe-car"
" lst_758)))"
"(let-values(((id_760)"
"(let-values(((id_761)"
" id_757))"
"(let-values(((id_762)"
"(let-values()"
"(let-values(((id409_763)"
"(let-values()"
"(if(let-values(((or-part_764)"
"(if(syntax?$1"
" s_759)"
"(symbol?"
"(syntax-e$1"
" s_759))"
" #f)))"
"(if or-part_764"
" or-part_764"
"(symbol?"
" s_759)))"
" s_759"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                      \"not an identifier\""
" orig-s_738"
" s_759)))))"
"(cons"
" id409_763"
" id_761)))))"
"(values"
" id_762)))))"
"(for-loop_756"
" id_760"
"(unsafe-cdr"
" lst_758))))"
" id_757))))"
" for-loop_756)"
" null"
" lst_755)))))"
"(alt-reverse"
" id_754))))))))"
"((rhs400_750)"
"(let-values(((s_765)"
"(cdr"
" s_748)))"
"(let-values(((s_766)"
"(if(syntax?$1"
" s_765)"
"(syntax-e$1"
" s_765)"
" s_765)))"
"(if(pair?"
" s_766)"
"(let-values(((rhs401_767)"
"(let-values(((s_768)"
"(car"
" s_766)))"
" s_768))"
"(()"
"(let-values(((s_769)"
"(cdr"
" s_766)))"
"(let-values(((s_770)"
"(if(syntax?$1"
" s_769)"
"(syntax-e$1"
" s_769)"
" s_769)))"
"(if(null?"
" s_770)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"bad syntax\""
" orig-s_738))))))"
"(values"
" rhs401_767))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_738))))))"
"(values"
" id399_749"
" rhs400_750))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                  \"bad syntax\""
" orig-s_738))))))"
"(values"
" define-values396_743"
" id397_744"
" rhs398_745))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_738)))))"
"(values"
" #t"
" define-values393_739"
" id394_740"
" rhs395_741))))))"
"(let-values(((ids_733)"
"(remove-use-site-scopes"
" id394_719"
" partial-body-ctx_630)))"
"(let-values((()"
"(begin"
"(let-values(((ids402_771)"
" ids_733)"
"((phase403_772)"
" phase_629)"
"((exp-body404_773)"
" exp-body_646))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids402_771"
" phase403_772"
" exp-body404_773"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids402_771"
" phase403_772"
" exp-body404_773)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:645:10_774)"
" check-ids-unbound163.1)"
"((ids405_775)"
" ids_733)"
"((phase406_776)"
" phase_629)"
"((requires+provides407_777)"
" requires+provides_634)"
"((exp-body408_778)"
" exp-body_646))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound163.1))"
"(check-ids-unbound161.1"
" exp-body408_778"
" ids405_775"
" phase406_776"
" requires+provides407_777)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:645:10_774"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body408_778)"
" ids405_775"
" phase406_776"
" requires+provides407_777)))"
"(values))))"
"(let-values(((syms_734)"
"(let-values(((...er/expand/module.rkt:646:23_779)"
" select-defined-syms-and-bind!18.1)"
"((ids410_780)"
" ids_733)"
"((defined-syms411_781)"
" defined-syms_637)"
"((self412_782)"
" self_632)"
"((phase413_783)"
" phase_629)"
"((all-scopes-stx414_784)"
" all-scopes-stx_636)"
"((frame-id415_785)"
" frame-id_633)"
"((requires+provides416_786)"
" requires+provides_634)"
"((exp-body417_787)"
" exp-body_646))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id415_785"
" exp-body417_787"
" #t"
" requires+provides416_786"
" #t"
" #f"
" #f"
" ids410_780"
" defined-syms411_781"
" self412_782"
" phase413_783"
" all-scopes-stx414_784)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:646:23_779"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" frame-id415_785"
" exp-body417_787"
" requires+provides416_786)"
" ids410_780"
" defined-syms411_781"
" self412_782"
" phase413_783"
" all-scopes-stx414_784)))))"
"(begin"
"(add-defined-syms!"
" requires+provides_634"
" syms_734"
" phase_629)"
"(let-values(((obs_788)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_788"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_788"
" 'exit-prim)))"
"(void)))"
"(cons"
"(let-values(((exp-body418_789)"
" exp-body_646)"
"((disarmed-exp-body419_790)"
" disarmed-exp-body_647)"
"((temp420_791)"
"(list"
" define-values393_718"
" ids_733"
" rhs395_720)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" exp-body418_789"
" disarmed-exp-body419_790"
" temp420_791)"
"(rebuild53.1"
" exp-body418_789"
" disarmed-exp-body419_790"
" temp420_791)))"
"(loop_642"
" tail?_643"
"(cdr"
" bodys_644))))))))))))"
"(if(equal? tmp_656 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_812)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_812"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_812"
" 'enter-prim"
" exp-body_646)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_813)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_813"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_813"
" 'enter-prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_792"
" define-syntaxes421_793"
" id422_794"
" rhs423_795)"
"(let-values(((s_814)"
" disarmed-exp-body_647))"
"(let-values(((orig-s_815)"
" s_814))"
"(let-values(((define-syntaxes421_816"
" id422_817"
" rhs423_818)"
"(let-values(((s_819)"
"(if(syntax?$1"
" s_814)"
"(syntax-e$1"
" s_814)"
" s_814)))"
"(if(pair?"
" s_819)"
"(let-values(((define-syntaxes424_820)"
"(let-values(((s_823)"
"(car"
" s_819)))"
" s_823))"
"((id425_821"
" rhs426_822)"
"(let-values(((s_824)"
"(cdr"
" s_819)))"
"(let-values(((s_825)"
"(if(syntax?$1"
" s_824)"
"(syntax-e$1"
" s_824)"
" s_824)))"
"(if(pair?"
" s_825)"
"(let-values(((id427_826)"
"(let-values(((s_828)"
"(car"
" s_825)))"
"(let-values(((s_829)"
"(if(syntax?$1"
" s_828)"
"(syntax-e$1"
" s_828)"
" s_828)))"
"(let-values(((flat-s_830)"
"(to-syntax-list.1"
" s_829)))"
"(if(not"
" flat-s_830)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_815))"
"(let-values()"
"(let-values(((id_831)"
"(let-values(((lst_832)"
" flat-s_830))"
"(begin"
"(if(list?"
" lst_832)"
"(void)"
"(let-values()"
"(in-list"
" lst_832)))"
"((letrec-values(((for-loop_833)"
"(lambda(id_834"
" lst_835)"
"(if(pair?"
" lst_835)"
"(let-values(((s_836)"
"(unsafe-car"
" lst_835)))"
"(let-values(((id_837)"
"(let-values(((id_838)"
" id_834))"
"(let-values(((id_839)"
"(let-values()"
"(let-values(((id437_840)"
"(let-values()"
"(if(let-values(((or-part_841)"
"(if(syntax?$1"
" s_836)"
"(symbol?"
"(syntax-e$1"
" s_836))"
" #f)))"
"(if or-part_841"
" or-part_841"
"(symbol?"
" s_836)))"
" s_836"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                        \"not an identifier\""
" orig-s_815"
" s_836)))))"
"(cons"
" id437_840"
" id_838)))))"
"(values"
" id_839)))))"
"(for-loop_833"
" id_837"
"(unsafe-cdr"
" lst_835))))"
" id_834))))"
" for-loop_833)"
" null"
" lst_832)))))"
"(alt-reverse"
" id_831))))))))"
"((rhs428_827)"
"(let-values(((s_842)"
"(cdr"
" s_825)))"
"(let-values(((s_843)"
"(if(syntax?$1"
" s_842)"
"(syntax-e$1"
" s_842)"
" s_842)))"
"(if(pair?"
" s_843)"
"(let-values(((rhs429_844)"
"(let-values(((s_845)"
"(car"
" s_843)))"
" s_845))"
"(()"
"(let-values(((s_846)"
"(cdr"
" s_843)))"
"(let-values(((s_847)"
"(if(syntax?$1"
" s_846)"
"(syntax-e$1"
" s_846)"
" s_846)))"
"(if(null?"
" s_847)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"bad syntax\""
" orig-s_815))))))"
"(values"
" rhs429_844))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                        \"bad syntax\""
" orig-s_815))))))"
"(values"
" id427_826"
" rhs428_827))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                    \"bad syntax\""
" orig-s_815))))))"
"(values"
" define-syntaxes424_820"
" id425_821"
" rhs426_822))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_815)))))"
"(values"
" #t"
" define-syntaxes421_816"
" id422_817"
" rhs423_818))))))"
"(let-values(((ids_808)"
"(remove-use-site-scopes"
" id422_794"
" partial-body-ctx_630)))"
"(let-values((()"
"(begin"
"(let-values(((ids430_848)"
" ids_808)"
"((phase431_849)"
" phase_629)"
"((exp-body432_850)"
" exp-body_646))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids430_848"
" phase431_849"
" exp-body432_850"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids430_848"
" phase431_849"
" exp-body432_850)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:663:10_851)"
" check-ids-unbound163.1)"
"((ids433_852)"
" ids_808)"
"((phase434_853)"
" phase_629)"
"((requires+provides435_854)"
" requires+provides_634)"
"((exp-body436_855)"
" exp-body_646))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound163.1))"
"(check-ids-unbound161.1"
" exp-body436_855"
" ids433_852"
" phase434_853"
" requires+provides435_854)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:663:10_851"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body436_855)"
" ids433_852"
" phase434_853"
" requires+provides435_854)))"
"(values))))"
"(let-values(((syms_809)"
"(let-values(((...er/expand/module.rkt:664:23_856)"
" select-defined-syms-and-bind!18.1)"
"((ids438_857)"
" ids_808)"
"((defined-syms439_858)"
" defined-syms_637)"
"((self440_859)"
" self_632)"
"((phase441_860)"
" phase_629)"
"((all-scopes-stx442_861)"
" all-scopes-stx_636)"
"((frame-id443_862)"
" frame-id_633)"
"((requires+provides444_863)"
" requires+provides_634)"
"((exp-body445_864)"
" exp-body_646)"
"((temp446_865)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" temp446_865"
" #t"
" frame-id443_862"
" exp-body445_864"
" #t"
" requires+provides444_863"
" #t"
" #f"
" #f"
" ids438_857"
" defined-syms439_858"
" self440_859"
" phase441_860"
" all-scopes-stx442_861)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:664:23_856"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" temp446_865"
" frame-id443_862"
" exp-body445_864"
" requires+provides444_863)"
" ids438_857"
" defined-syms439_858"
" self440_859"
" phase441_860"
" all-scopes-stx442_861)))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_634"
" syms_809"
" phase_629)"
"(values))))"
"(let-values(((exp-rhs_810"
" vals_811)"
"(expand+eval-for-syntaxes-binding"
" rhs423_795"
" ids_808"
"(let-values(((the-struct_866)"
" partial-body-ctx_630))"
"(if(expand-context?"
" the-struct_866)"
"(let-values(((need-eventually-defined447_867)"
" need-eventually-defined_635))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_866)"
"(root-expand-context-post-expansion-scope"
" the-struct_866)"
"(root-expand-context-top-level-bind-scope"
" the-struct_866)"
"(root-expand-context-all-scopes-stx"
" the-struct_866)"
"(root-expand-context-use-site-scopes"
" the-struct_866)"
"(root-expand-context-defined-syms"
" the-struct_866)"
"(root-expand-context-frame-id"
" the-struct_866)"
"(root-expand-context-counter"
" the-struct_866)"
"(root-expand-context-lift-key"
" the-struct_866)"
"(expand-context-context"
" the-struct_866)"
"(expand-context-phase"
" the-struct_866)"
"(expand-context-namespace"
" the-struct_866)"
"(expand-context-env"
" the-struct_866)"
"(expand-context-user-env"
" the-struct_866)"
"(expand-context-post-expansion-scope-action"
" the-struct_866)"
"(expand-context-scopes"
" the-struct_866)"
"(expand-context-def-ctx-scopes"
" the-struct_866)"
"(expand-context-binding-layer"
" the-struct_866)"
"(expand-context-reference-records"
" the-struct_866)"
"(expand-context-only-immediate?"
" the-struct_866)"
"(expand-context-just-once?"
" the-struct_866)"
"(expand-context-module-begin-k"
" the-struct_866)"
" need-eventually-defined447_867"
"(expand-context-allow-unbound?"
" the-struct_866)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_866)"
"(expand-context-stops"
" the-struct_866)"
"(expand-context-current-introduction-scopes"
" the-struct_866)"
"(expand-context-declared-submodule-names"
" the-struct_866)"
"(expand-context-lifts"
" the-struct_866)"
"(expand-context-lift-envs"
" the-struct_866)"
"(expand-context-module-lifts"
" the-struct_866)"
"(expand-context-require-lifts"
" the-struct_866)"
"(expand-context-to-module-lifts"
" the-struct_866)"
"(expand-context-requires+provides"
" the-struct_866)"
"(expand-context-name"
" the-struct_866)"
"(expand-context-observer"
" the-struct_866)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                           \"expand-context?\""
" the-struct_866))))))"
"(begin"
"(let-values(((lst_868)"
" syms_809)"
"((lst_869)"
" vals_811)"
"((lst_870)"
" ids_808))"
"(begin"
"(if(list?"
" lst_868)"
"(void)"
"(let-values()"
"(in-list"
" lst_868)))"
"(if(list?"
" lst_869)"
"(void)"
"(let-values()"
"(in-list"
" lst_869)))"
"(if(list?"
" lst_870)"
"(void)"
"(let-values()"
"(in-list"
" lst_870)))"
"((letrec-values(((for-loop_871)"
"(lambda(fold-var_872"
" lst_873"
" lst_874"
" lst_875)"
"(if(if(pair?"
" lst_873)"
"(if(pair?"
" lst_874)"
"(pair?"
" lst_875)"
" #f)"
" #f)"
"(let-values(((sym_876)"
"(unsafe-car"
" lst_873))"
"((val_877)"
"(unsafe-car"
" lst_874))"
"((id_878)"
"(unsafe-car"
" lst_875)))"
"(let-values(((fold-var_879)"
"(let-values(((fold-var_880)"
" fold-var_872))"
"(let-values(((fold-var_881)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_877"
" id_878"
" phase_629)"
"(namespace-set-transformer!"
" m-ns_631"
" phase_629"
" sym_876"
" val_877)))"
"(void)))))"
"(values"
" fold-var_881)))))"
"(for-loop_871"
" fold-var_879"
"(unsafe-cdr"
" lst_873)"
"(unsafe-cdr"
" lst_874)"
"(unsafe-cdr"
" lst_875))))"
" fold-var_872))))"
" for-loop_871)"
"(void)"
" lst_868"
" lst_869"
" lst_870)))"
"(let-values(((obs_882)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_882"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_882"
" 'exit-prim)))"
"(void)))"
"(cons"
"(let-values(((exp-body448_883)"
" exp-body_646)"
"((disarmed-exp-body449_884)"
" disarmed-exp-body_647)"
"((temp450_885)"
"(list"
" define-syntaxes421_793"
" ids_808"
" exp-rhs_810)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" exp-body448_883"
" disarmed-exp-body449_884"
" temp450_885)"
"(rebuild53.1"
" exp-body448_883"
" disarmed-exp-body449_884"
" temp450_885)))"
"(loop_642"
" tail?_643"
"(cdr"
" bodys_644))))))))))))))"
"(if(equal? tmp_656 '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_900)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_900"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_900"
" 'enter-prim"
" exp-body_646)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_901)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_901"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_901"
" 'enter-prim-require)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_886)"
"(remove-use-site-scopes"
" disarmed-exp-body_647"
" partial-body-ctx_630)))"
"(let-values(((ok?_887"
" #%require451_888"
" req452_889)"
"(let-values(((s_902)"
" ready-body_886))"
"(let-values(((orig-s_903)"
" s_902))"
"(let-values(((#%require451_904"
" req452_905)"
"(let-values(((s_906)"
"(if(syntax?$1"
" s_902)"
"(syntax-e$1"
" s_902)"
" s_902)))"
"(if(pair?"
" s_906)"
"(let-values(((#%require453_907)"
"(let-values(((s_909)"
"(car"
" s_906)))"
" s_909))"
"((req454_908)"
"(let-values(((s_910)"
"(cdr"
" s_906)))"
"(let-values(((s_911)"
"(if(syntax?$1"
" s_910)"
"(syntax-e$1"
" s_910)"
" s_910)))"
"(let-values(((flat-s_912)"
"(to-syntax-list.1"
" s_911)))"
"(if(not"
" flat-s_912)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                            \"bad syntax\""
" orig-s_903))"
"(let-values()"
" flat-s_912)))))))"
"(values"
" #%require453_907"
" req454_908))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                    \"bad syntax\""
" orig-s_903)))))"
"(values"
" #t"
" #%require451_904"
" req452_905))))))"
"(begin"
"(let-values(((...er/expand/module.rkt:692:10_913)"
" parse-and-perform-requires!30.1)"
"((temp455_914)"
" req452_889)"
"((exp-body456_915)"
" exp-body_646)"
"((self457_916)"
" self_632)"
"((m-ns458_917)"
" m-ns_631)"
"((phase459_918)"
" phase_629)"
"((phase460_919)"
" phase_629)"
"((requires+provides461_920)"
" requires+provides_634)"
"((declared-submodule-names462_921)"
" declared-submodule-names_639)"
"((temp463_922)"
" 'module))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names462_921"
" #t"
" phase460_919"
" #t"
" #f"
" #f"
" self457_916"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp463_922"
" temp455_914"
" exp-body456_915"
" m-ns458_917"
" phase459_918"
" requires+provides461_920)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:692:10_913"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self"
" #:who)"
" 7)"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self"
" #:who)"
"(list"
" declared-submodule-names462_921"
" phase460_919"
" self457_916"
" temp463_922)"
" temp455_914"
" exp-body456_915"
" m-ns458_917"
" phase459_918"
" requires+provides461_920)))"
"(let-values(((obs_923)"
"(expand-context-observer"
" partial-body-ctx_630)))"
"(if obs_923"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_923"
" 'exit-prim)))"
"(void)))"
"(cons"
" exp-body_646"
"(loop_642"
" tail?_643"
"(cdr"
" bodys_644)))))))))"
"(if(equal? tmp_656 '#%provide)"
"(let-values()"
"(cons"
" exp-body_646"
"(loop_642"
" tail?_643"
"(cdr bodys_644))))"
"(if(equal? tmp_656 'module)"
"(let-values()"
"(let-values(((ready-body_924)"
"(remove-use-site-scopes"
" exp-body_646"
" partial-body-ctx_630)))"
"(let-values(((submod_925)"
"(let-values(((...er/expand/module.rkt:708:12_926)"
" expand-submodule183.1)"
"((ready-body464_927)"
" ready-body_924)"
"((self465_928)"
" self_632)"
"((partial-body-ctx466_929)"
" partial-body-ctx_630)"
"((temp467_930)"
" #f)"
"((declared-submodule-names468_931)"
" declared-submodule-names_639)"
"((mpis-to-reset469_932)"
" mpis-to-reset_640))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names468_931"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp467_930"
" #f"
" #f"
" mpis-to-reset469_932"
" ready-body464_927"
" self465_928"
" partial-body-ctx466_929)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:708:12_926"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names468_931"
" temp467_930"
" mpis-to-reset469_932)"
" ready-body464_927"
" self465_928"
" partial-body-ctx466_929)))))"
"(cons"
" submod_925"
"(loop_642"
" tail?_643"
"(cdr bodys_644))))))"
"(if(equal? tmp_656 'module*)"
"(let-values()"
"(cons"
" exp-body_646"
"(loop_642"
" tail?_643"
"(cdr bodys_644))))"
"(if(equal?"
" tmp_656"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_933"
" #%declare470_934"
" kw471_935)"
"(let-values(((s_946)"
" disarmed-exp-body_647))"
"(let-values(((orig-s_947)"
" s_946))"
"(let-values(((#%declare470_948"
" kw471_949)"
"(let-values(((s_950)"
"(if(syntax?$1"
" s_946)"
"(syntax-e$1"
" s_946)"
" s_946)))"
"(if(pair?"
" s_950)"
"(let-values(((#%declare472_951)"
"(let-values(((s_953)"
"(car"
" s_950)))"
" s_953))"
"((kw473_952)"
"(let-values(((s_954)"
"(cdr"
" s_950)))"
"(let-values(((s_955)"
"(if(syntax?$1"
" s_954)"
"(syntax-e$1"
" s_954)"
" s_954)))"
"(let-values(((flat-s_956)"
"(to-syntax-list.1"
" s_955)))"
"(if(not"
" flat-s_956)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                              \"bad syntax\""
" orig-s_947))"
"(let-values()"
" flat-s_956)))))))"
"(values"
" #%declare472_951"
" kw473_952))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                      \"bad syntax\""
" orig-s_947)))))"
"(values"
" #t"
" #%declare470_948"
" kw471_949))))))"
"(begin"
"(let-values(((lst_957)"
" kw471_935))"
"(begin"
"(if(list?"
" lst_957)"
"(void)"
"(let-values()"
"(in-list"
" lst_957)))"
"((letrec-values(((for-loop_958)"
"(lambda(fold-var_959"
" lst_960)"
"(if(pair?"
" lst_960)"
"(let-values(((kw_961)"
"(unsafe-car"
" lst_960)))"
"(let-values(((fold-var_962)"
"(let-values(((fold-var_963)"
" fold-var_959))"
"(let-values(((fold-var_964)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_961))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"expected a keyword\""
" exp-body_646"
" kw_961)))"
"(if(memq"
"(syntax-e$1"
" kw_961)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"not an allowed declaration keyword\""
" exp-body_646"
" kw_961)))"
"(if(hash-ref"
" declared-keywords_638"
"(syntax-e$1"
" kw_961)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"keyword declared multiple times\""
" exp-body_646"
" kw_961))"
"(void))"
"(hash-set!"
" declared-keywords_638"
"(syntax-e$1"
" kw_961)"
" kw_961)))"
"(void)))))"
"(values"
" fold-var_964)))))"
"(for-loop_958"
" fold-var_962"
"(unsafe-cdr"
" lst_960))))"
" fold-var_959))))"
" for-loop_958)"
"(void)"
" lst_957)))"
"(cons"
" exp-body_646"
"(loop_642"
" tail?_643"
"(cdr"
" bodys_644))))))"
"(let-values()"
"(cons"
" exp-body_646"
"(loop_642"
" tail?_643"
"(cdr"
" bodys_644)))))))))))))))))))))))))"
" loop_642)"
" tail?_628"
" bodys_626)))))))))))))))))))))"
"(define-values"
"(unpack76.1)"
"(lambda(given-kws_965 given-args_966 bodys74_967)"
"(let-values(((all-scopes-stx53_968)(car given-args_966))"
"((given-kws_969)(cdr given-kws_965))"
"((given-args_970)(cdr given-args_966)))"
"(let-values(((ctx47_971)(car given-args_970))"
"((given-kws_972)(cdr given-kws_969))"
"((given-args_973)(cdr given-args_970)))"
"(let-values(((declared-keywords55_974)(car given-args_973))"
"((given-kws_975)(cdr given-kws_972))"
"((given-args_976)(cdr given-args_973)))"
"(let-values(((declared-submodule-names56_977)(car given-args_976))"
"((given-kws_978)(cdr given-kws_975))"
"((given-args_979)(cdr given-args_976)))"
"(let-values(((defined-syms54_980)(car given-args_979))"
"((given-kws_981)(cdr given-kws_978))"
"((given-args_982)(cdr given-args_979)))"
"(let-values(((frame-id50_983)(car given-args_982))"
"((given-kws_984)(cdr given-kws_981))"
"((given-args_985)(cdr given-args_982)))"
"(let-values(((loop58_986)(car given-args_985))"
"((given-kws_987)(cdr given-kws_984))"
"((given-args_988)(cdr given-args_985)))"
"(let-values(((mpis-to-reset57_989)(car given-args_988))"
"((given-kws_990)(cdr given-kws_987))"
"((given-args_991)(cdr given-args_988)))"
"(let-values(((namespace48_992)(car given-args_991))"
"((given-kws_993)(cdr given-kws_990))"
"((given-args_994)(cdr given-args_991)))"
"(let-values(((need-eventually-defined52_995)(car given-args_994))"
"((given-kws_996)(cdr given-kws_993))"
"((given-args_997)(cdr given-args_994)))"
"(let-values(((original44_998)(car given-args_997))"
"((given-kws_999)(cdr given-kws_996))"
"((given-args_1000)(cdr given-args_997)))"
"(let-values(((phase46_1001)(car given-args_1000))"
"((given-kws_1002)(cdr given-kws_999))"
"((given-args_1003)(cdr given-args_1000)))"
"(let-values(((requires-and-provides51_1004)(car given-args_1003))"
"((given-kws_1005)(cdr given-kws_1002))"
"((given-args_1006)(cdr given-args_1003)))"
"(let-values(((self49_1007)(car given-args_1006))"
"((given-kws_1008)(cdr given-kws_1005))"
"((given-args_1009)(cdr given-args_1006)))"
"(let-values(((tail?45_1010)(car given-args_1009)))"
"(partially-expand-bodys75.1"
" all-scopes-stx53_968"
" ctx47_971"
" declared-keywords55_974"
" declared-submodule-names56_977"
" defined-syms54_980"
" frame-id50_983"
" loop58_986"
" mpis-to-reset57_989"
" namespace48_992"
" need-eventually-defined52_995"
" original44_998"
" phase46_1001"
" requires-and-provides51_1004"
" self49_1007"
" tail?45_1010"
" bodys74_967))))))))))))))))))"
"(define-values"
"(partially-expand-bodys77.1)"
"(lifted/7.1"
"(lambda(given-kws_1011 given-argc_1012)"
"(if(= given-argc_1012 3)"
"(let-values(((l2_1013) given-kws_1011))"
"(if(pair? l2_1013)"
"(if(eq?(car l2_1013) '#:all-scopes-stx)"
"(let-values(((l2_1014)(cdr l2_1013)))"
"(if(pair? l2_1014)"
"(if(eq?(car l2_1014) '#:ctx)"
"(let-values(((l2_1015)(cdr l2_1014)))"
"(if(pair? l2_1015)"
"(if(eq?(car l2_1015) '#:declared-keywords)"
"(let-values(((l2_1016)(cdr l2_1015)))"
"(if(pair? l2_1016)"
"(if(eq?(car l2_1016) '#:declared-submodule-names)"
"(let-values(((l2_1017)(cdr l2_1016)))"
"(if(pair? l2_1017)"
"(if(eq?(car l2_1017) '#:defined-syms)"
"(let-values(((l2_1018)(cdr l2_1017)))"
"(if(pair? l2_1018)"
"(if(eq?(car l2_1018) '#:frame-id)"
"(let-values(((l2_1019)(cdr l2_1018)))"
"(if(pair? l2_1019)"
"(if(eq?(car l2_1019) '#:loop)"
"(let-values(((l2_1020)(cdr l2_1019)))"
"(if(pair? l2_1020)"
"(if(eq?(car l2_1020) '#:mpis-to-reset)"
"(let-values(((l2_1021)(cdr l2_1020)))"
"(if(pair? l2_1021)"
"(if(eq?(car l2_1021) '#:namespace)"
"(let-values(((l2_1022)(cdr l2_1021)))"
"(if(pair? l2_1022)"
"(if(eq?(car l2_1022) '#:need-eventually-defined)"
"(let-values(((l2_1023)(cdr l2_1022)))"
"(if(pair? l2_1023)"
"(if(eq?(car l2_1023) '#:original)"
"(let-values(((l2_1024)(cdr l2_1023)))"
"(if(pair? l2_1024)"
"(if(eq?(car l2_1024) '#:phase)"
"(let-values(((l2_1025)(cdr l2_1024)))"
"(if(pair? l2_1025)"
"(if(eq?"
"(car l2_1025)"
" '#:requires-and-provides)"
"(let-values(((l2_1026)"
"(cdr l2_1025)))"
"(if(pair? l2_1026)"
"(if(eq?(car l2_1026) '#:self)"
"(let-values(((l2_1027)"
"(cdr l2_1026)))"
"(if(pair? l2_1027)"
"(if(eq?"
"(car l2_1027)"
" '#:tail?)"
"(null?(cdr l2_1027))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_1028 given-args_1029 bodys_1030)(unpack76.1 given-kws_1028 given-args_1029 bodys_1030)))"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_1031 frame-id_1032 inside-scope_1033 all-scopes-stx_1034 defined-syms_1035 requires+provides_1036)"
"(lambda(ids_1037 rhs_1038 phase_1039)"
"(let-values(((scoped-ids_1040)"
"(alt-reverse"
"(let-values(((lst_1041) ids_1037))"
"(begin"
"(if(list? lst_1041)(void)(let-values()(in-list lst_1041)))"
"((letrec-values(((for-loop_1042)"
"(lambda(fold-var_1043 lst_1044)"
"(if(pair? lst_1044)"
"(let-values(((id_1045)(unsafe-car lst_1044)))"
"(let-values(((fold-var_1046)"
"(let-values(((fold-var_1047) fold-var_1043))"
"(let-values(((fold-var_1048)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_1045"
" inside-scope_1033))"
" fold-var_1047))))"
"(values fold-var_1048)))))"
"(for-loop_1042 fold-var_1046(unsafe-cdr lst_1044))))"
" fold-var_1043))))"
" for-loop_1042)"
" null"
" lst_1041))))))"
"(begin"
"(let-values(((...er/expand/module.rkt:742:4_1049) select-defined-syms-and-bind!18.1)"
"((scoped-ids474_1050) scoped-ids_1040)"
"((defined-syms475_1051) defined-syms_1035)"
"((self476_1052) self_1031)"
"((phase477_1053) phase_1039)"
"((all-scopes-stx478_1054) all-scopes-stx_1034)"
"((frame-id479_1055) frame-id_1032)"
"((requires+provides480_1056) requires+provides_1036))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id479_1055"
" #f"
" #f"
" requires+provides480_1056"
" #t"
" #f"
" #f"
" scoped-ids474_1050"
" defined-syms475_1051"
" self476_1052"
" phase477_1053"
" all-scopes-stx478_1054)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:742:4_1049"
" keyword-procedure-extract"
" '(#:frame-id #:requires+provides)"
" 7)"
" '(#:frame-id #:requires+provides)"
"(list frame-id479_1055 requires+provides480_1056)"
" scoped-ids474_1050"
" defined-syms475_1051"
" self476_1052"
" phase477_1053"
" all-scopes-stx478_1054)))"
"(values"
" scoped-ids_1040"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_1039) 'define-values)"
" scoped-ids_1040"
" rhs_1038))"
" inside-scope_1033)))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_1057 ctx_1058)"
"(let-values(((sc_1059)(root-expand-context-post-expansion-scope ctx_1058)))"
"(alt-reverse"
"(let-values(((lst_1060) bodys_1057))"
"(begin"
"(if(list? lst_1060)(void)(let-values()(in-list lst_1060)))"
"((letrec-values(((for-loop_1061)"
"(lambda(fold-var_1062 lst_1063)"
"(if(pair? lst_1063)"
"(let-values(((body_1064)(unsafe-car lst_1063)))"
"(let-values(((fold-var_1065)"
"(let-values(((fold-var_1066) fold-var_1062))"
"(let-values(((fold-var_1067)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_1064 sc_1059))"
" fold-var_1066))))"
"(values fold-var_1067)))))"
"(for-loop_1061 fold-var_1065(unsafe-cdr lst_1063))))"
" fold-var_1062))))"
" for-loop_1061)"
" null"
" lst_1060)))))))"
"(define-values"
"(lifted/11.1 lifted/12.1 lifted/13.1 lifted/14.1 lifted/15.1)"
"(make-struct-type"
" 'finish-expanding-body-expressons"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'finish-expanding-body-expressons"
"(case-lambda"
"((self_1068 partially-expanded-bodys_1069)(apply missing-kw self_1068 partially-expanded-bodys_1069 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1070 partially-expanded-bodys_1071)(apply missing-kw self_1070 partially-expanded-bodys_1071 null)))))"
"(define-values"
"(finish-expanding-body-expressons91.1)"
"(lambda(ctx80_1072"
" declared-submodule-names82_1073"
" mpis-to-reset83_1074"
" phase79_1075"
" self81_1076"
" tail?78_1077"
" partially-expanded-bodys90_1078)"
"(let-values(((partially-expanded-bodys_1079) partially-expanded-bodys90_1078))"
"(let-values(((tail?_1080) tail?78_1077))"
"(let-values(((phase_1081) phase79_1075))"
"(let-values(((body-ctx_1082) ctx80_1072))"
"(let-values(((self_1083) self81_1076))"
"(let-values(((declared-submodule-names_1084) declared-submodule-names82_1073))"
"(let-values(((mpis-to-reset_1085) mpis-to-reset83_1074))"
"(let-values()"
"((letrec-values(((loop_1086)"
"(lambda(tail?_1087 bodys_1088)"
"(if(null? bodys_1088)"
"(let-values()"
"(if tail?_1087"
"(let-values()"
"(let-values(((bodys_1089)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_1082))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_1082)))))"
"(if(null? bodys_1089) null(loop_1086 #t bodys_1089))))"
"(let-values() bodys_1088)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1095)"
"(expand-context-observer body-ctx_1082)))"
"(if obs_1095"
"(let-values()"
"(let-values()(call-expand-observe obs_1095 'next)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-body_1090)(syntax-disarm$1(car bodys_1088))))"
"(let-values(((exp-body_1091)"
"(let-values(((tmp_1096)"
"(core-form-sym"
" disarmed-body_1090"
" phase_1081)))"
"(if(equal? tmp_1096 'define-values)"
"(let-values()"
"(let-values(((ok?_1097"
" define-values481_1098"
" id482_1099"
" rhs483_1100)"
"(let-values(((s_1114)"
" disarmed-body_1090))"
"(let-values(((orig-s_1115) s_1114))"
"(let-values(((define-values481_1116"
" id482_1117"
" rhs483_1118)"
"(let-values(((s_1119)"
"(if(syntax?$1"
" s_1114)"
"(syntax-e$1"
" s_1114)"
" s_1114)))"
"(if(pair? s_1119)"
"(let-values(((define-values484_1120)"
"(let-values(((s_1123)"
"(car"
" s_1119)))"
" s_1123))"
"((id485_1121"
" rhs486_1122)"
"(let-values(((s_1124)"
"(cdr"
" s_1119)))"
"(let-values(((s_1125)"
"(if(syntax?$1"
" s_1124)"
"(syntax-e$1"
" s_1124)"
" s_1124)))"
"(if(pair?"
" s_1125)"
"(let-values(((id487_1126)"
"(let-values(((s_1128)"
"(car"
" s_1125)))"
"(let-values(((s_1129)"
"(if(syntax?$1"
" s_1128)"
"(syntax-e$1"
" s_1128)"
" s_1128)))"
"(let-values(((flat-s_1130)"
"(to-syntax-list.1"
" s_1129)))"
"(if(not"
" flat-s_1130)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_1115))"
"(let-values()"
"(let-values(((id_1131)"
"(let-values(((lst_1132)"
" flat-s_1130))"
"(begin"
"(if(list?"
" lst_1132)"
"(void)"
"(let-values()"
"(in-list"
" lst_1132)))"
"((letrec-values(((for-loop_1133)"
"(lambda(id_1134"
" lst_1135)"
"(if(pair?"
" lst_1135)"
"(let-values(((s_1136)"
"(unsafe-car"
" lst_1135)))"
"(let-values(((id_1137)"
"(let-values(((id_1138)"
" id_1134))"
"(let-values(((id_1139)"
"(let-values()"
"(let-values(((id493_1140)"
"(let-values()"
"(if(let-values(((or-part_1141)"
"(if(syntax?$1"
" s_1136)"
"(symbol?"
"(syntax-e$1"
" s_1136))"
" #f)))"
"(if or-part_1141"
" or-part_1141"
"(symbol?"
" s_1136)))"
" s_1136"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_1115"
" s_1136)))))"
"(cons"
" id493_1140"
" id_1138)))))"
"(values"
" id_1139)))))"
"(for-loop_1133"
" id_1137"
"(unsafe-cdr"
" lst_1135))))"
" id_1134))))"
" for-loop_1133)"
" null"
" lst_1132)))))"
"(alt-reverse"
" id_1131))))))))"
"((rhs488_1127)"
"(let-values(((s_1142)"
"(cdr"
" s_1125)))"
"(let-values(((s_1143)"
"(if(syntax?$1"
" s_1142)"
"(syntax-e$1"
" s_1142)"
" s_1142)))"
"(if(pair?"
" s_1143)"
"(let-values(((rhs489_1144)"
"(let-values(((s_1145)"
"(car"
" s_1143)))"
" s_1145))"
"(()"
"(let-values(((s_1146)"
"(cdr"
" s_1143)))"
"(let-values(((s_1147)"
"(if(syntax?$1"
" s_1146)"
"(syntax-e$1"
" s_1146)"
" s_1146)))"
"(if(null?"
" s_1147)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_1115))))))"
"(values"
" rhs489_1144))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_1115))))))"
"(values"
" id487_1126"
" rhs488_1127))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_1115))))))"
"(values"
" define-values484_1120"
" id485_1121"
" rhs486_1122))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_1115)))))"
"(values"
" #t"
" define-values481_1116"
" id482_1117"
" rhs483_1118))))))"
"(let-values(((exp-rhs_1113)"
"(let-values()"
"(let-values(((temp494_1148)"
" rhs483_1100)"
"((temp495_1149)"
"(as-named-context"
"(as-expression-context"
" body-ctx_1082)"
" id482_1099)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp494_1148"
" temp495_1149)"
"(expand7.1"
" temp494_1148"
" temp495_1149))))))"
"(let-values(((temp490_1150)(car bodys_1088))"
"((disarmed-body491_1151)"
" disarmed-body_1090)"
"((temp492_1152)"
"(list"
" define-values481_1098"
" id482_1099"
" exp-rhs_1113)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" temp490_1150"
" disarmed-body491_1151"
" temp492_1152)"
"(rebuild53.1"
" temp490_1150"
" disarmed-body491_1151"
" temp492_1152))))))"
"(if(if(equal? tmp_1096 'define-syntaxes)"
" #t"
"(if(equal? tmp_1096 '#%require)"
" #t"
"(if(equal? tmp_1096 '#%provide)"
" #t"
"(if(equal? tmp_1096 'begin-for-syntax)"
" #t"
"(if(equal? tmp_1096 'module)"
" #t"
"(if(equal? tmp_1096 'module*)"
" #t"
"(equal? tmp_1096 '#%declare)))))))"
"(let-values()(car bodys_1088))"
"(let-values()"
"(let-values()"
"(let-values(((temp496_1153)(car bodys_1088))"
"((temp497_1154)"
"(as-expression-context"
" body-ctx_1082)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp496_1153 temp497_1154)"
"(expand7.1"
" temp496_1153"
" temp497_1154))))))))))"
"(let-values(((lifted-defns_1092)"
"(loop_1086"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_1082)))))"
"(let-values(((lifted-requires_1093)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_1082))))"
"(let-values(((lifted-modules_1094)"
"(let-values(((...er/expand/module.rkt:814:8_1155)"
" expand-non-module*-submodules194.1)"
"((temp498_1156)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_1082)))"
"((phase499_1157) phase_1081)"
"((self500_1158) self_1083)"
"((body-ctx501_1159) body-ctx_1082)"
"((mpis-to-reset502_1160)"
" mpis-to-reset_1085)"
"((declared-submodule-names503_1161)"
" declared-submodule-names_1084))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-non-module*-submodules194.1))"
"(expand-non-module*-submodules192.1"
" declared-submodule-names503_1161"
" mpis-to-reset502_1160"
" temp498_1156"
" phase499_1157"
" self500_1158"
" body-ctx501_1159)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:814:8_1155"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:mpis-to-reset)"
" 6)"
" '(#:declared-submodule-names #:mpis-to-reset)"
"(list"
" declared-submodule-names503_1161"
" mpis-to-reset502_1160)"
" temp498_1156"
" phase499_1157"
" self500_1158"
" body-ctx501_1159)))))"
"(begin"
"(if(null? lifted-defns_1092)"
"(let-values()"
"(let-values(((obs_1162)"
"(expand-context-observer body-ctx_1082)))"
"(if obs_1162"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1162"
" 'module-lift-loop"
" lifted-defns_1092)))"
"(void))))"
"(let-values()"
"(let-values(((obs_1163)"
"(expand-context-observer body-ctx_1082)))"
"(if obs_1163"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1163"
" 'module-lift-end-loop"
"(cons exp-body_1091(cdr bodys_1088)))))"
"(void)))))"
"(append"
" lifted-requires_1093"
" lifted-defns_1092"
" lifted-modules_1094"
"(cons"
" exp-body_1091"
"(loop_1086 tail?_1087(cdr bodys_1088))))))))))))))))"
" loop_1086)"
" tail?_1080"
" partially-expanded-bodys_1079)))))))))))"
"(define-values"
"(unpack92.1)"
"(lambda(given-kws_1164 given-args_1165 partially-expanded-bodys90_1166)"
"(let-values(((ctx80_1167)(car given-args_1165))"
"((given-kws_1168)(cdr given-kws_1164))"
"((given-args_1169)(cdr given-args_1165)))"
"(let-values(((declared-submodule-names82_1170)(car given-args_1169))"
"((given-kws_1171)(cdr given-kws_1168))"
"((given-args_1172)(cdr given-args_1169)))"
"(let-values(((mpis-to-reset83_1173)(car given-args_1172))"
"((given-kws_1174)(cdr given-kws_1171))"
"((given-args_1175)(cdr given-args_1172)))"
"(let-values(((phase79_1176)(car given-args_1175))"
"((given-kws_1177)(cdr given-kws_1174))"
"((given-args_1178)(cdr given-args_1175)))"
"(let-values(((self81_1179)(car given-args_1178))"
"((given-kws_1180)(cdr given-kws_1177))"
"((given-args_1181)(cdr given-args_1178)))"
"(let-values(((tail?78_1182)(car given-args_1181)))"
"(finish-expanding-body-expressons91.1"
" ctx80_1167"
" declared-submodule-names82_1170"
" mpis-to-reset83_1173"
" phase79_1176"
" self81_1179"
" tail?78_1182"
" partially-expanded-bodys90_1166)))))))))"
"(define-values"
"(finish-expanding-body-expressons93.1)"
"(lifted/12.1"
"(lambda(given-kws_1183 given-argc_1184)"
"(if(= given-argc_1184 3)"
"(let-values(((l2_1185) given-kws_1183))"
"(if(pair? l2_1185)"
"(if(eq?(car l2_1185) '#:ctx)"
"(let-values(((l2_1186)(cdr l2_1185)))"
"(if(pair? l2_1186)"
"(if(eq?(car l2_1186) '#:declared-submodule-names)"
"(let-values(((l2_1187)(cdr l2_1186)))"
"(if(pair? l2_1187)"
"(if(eq?(car l2_1187) '#:mpis-to-reset)"
"(let-values(((l2_1188)(cdr l2_1187)))"
"(if(pair? l2_1188)"
"(if(eq?(car l2_1188) '#:phase)"
"(let-values(((l2_1189)(cdr l2_1188)))"
"(if(pair? l2_1189)"
"(if(eq?(car l2_1189) '#:self)"
"(let-values(((l2_1190)(cdr l2_1189)))"
"(if(pair? l2_1190)"
"(if(eq?(car l2_1190) '#:tail?)(null?(cdr l2_1190)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1191 given-args_1192 partially-expanded-bodys_1193)"
"(unpack92.1 given-kws_1191 given-args_1192 partially-expanded-bodys_1193)))"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_1194 self_1195)"
"(let-values(((ht_1196) need-eventually-defined_1194))"
"(begin"
"(if((lambda(ht_1197)(hash? ht_1197)) ht_1196)(void)(let-values()(default-in-hash ht_1196)))"
"((letrec-values(((for-loop_1198)"
"(lambda(fold-var_1199 i_1200)"
"(if i_1200"
"(let-values(((phase_1201 l_1202)(hash-iterate-key+value ht_1196 i_1200)))"
"(let-values(((fold-var_1203)"
"(let-values(((fold-var_1204) fold-var_1199))"
"(let-values(((fold-var_1205)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_1206) l_1202))"
"(begin"
"(if(list? lst_1206)"
"(void)"
"(let-values()(in-list lst_1206)))"
"((letrec-values(((for-loop_1207)"
"(lambda(fold-var_1208"
" lst_1209)"
"(if(pair? lst_1209)"
"(let-values(((id_1210)"
"(unsafe-car"
" lst_1209)))"
"(let-values(((fold-var_1211)"
"(let-values(((fold-var_1212)"
" fold-var_1208))"
"(let-values(((fold-var_1213)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1214)"
"(let-values(((id504_1215)"
" id_1210)"
"((phase505_1216)"
" phase_1201))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift22.1))"
"(resolve+shift20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id504_1215"
" phase505_1216)"
"(resolve+shift22.1"
" id504_1215"
" phase505_1216)))))"
"(if(if b_1214"
"(if(module-binding?"
" b_1214)"
"(if(eq?"
"(module-binding-sym"
" b_1214)"
"(syntax-e$1"
" id_1210))"
"(eq?"
"(module-binding-module"
" b_1214)"
" self_1195)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"reference to an unbound identifier\""
" id_1210)))))"
"(void)))))"
"(values"
" fold-var_1213)))))"
"(for-loop_1207"
" fold-var_1211"
"(unsafe-cdr"
" lst_1209))))"
" fold-var_1208))))"
" for-loop_1207)"
"(void)"
" lst_1206))))"
"(void)))))"
"(values fold-var_1205)))))"
"(for-loop_1198 fold-var_1203(hash-iterate-next ht_1196 i_1200))))"
" fold-var_1199))))"
" for-loop_1198)"
"(void)"
"(hash-iterate-first ht_1196))))))"
"(define-values"
"(lifted/16.1 lifted/17.1 lifted/18.1 lifted/19.1 lifted/20.1)"
"(make-struct-type"
" 'resolve-provides"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'resolve-provides"
"(case-lambda"
"((self_1217 expression-expanded-bodys_1218)(apply missing-kw self_1217 expression-expanded-bodys_1218 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1219 expression-expanded-bodys_1220)(apply missing-kw self_1219 expression-expanded-bodys_1220 null)))))"
"(define-values"
"(resolve-provides109.1)"
"(lambda(ctx100_1221"
" declared-submodule-names96_1222"
" namespace97_1223"
" original94_1224"
" phase98_1225"
" requires-and-provides95_1226"
" self99_1227"
" expression-expanded-bodys108_1228)"
"(let-values(((expression-expanded-bodys_1229) expression-expanded-bodys108_1228))"
"(let-values(((s_1230) original94_1224))"
"(let-values(((requires+provides_1231) requires-and-provides95_1226))"
"(let-values(((declared-submodule-names_1232) declared-submodule-names96_1222))"
"(let-values(((m-ns_1233) namespace97_1223))"
"(let-values(((phase_1234) phase98_1225))"
"(let-values(((self_1235) self99_1227))"
"(let-values(((ctx_1236) ctx100_1221))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_1237)"
"(lambda(bodys_1238 phase_1239)"
"(if(null? bodys_1238)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1240)(syntax-disarm$1(car bodys_1238))))"
"(let-values(((tmp_1241)"
"(core-form-sym disarmed-body_1240 phase_1239)))"
"(if(equal? tmp_1241 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1257)"
"(expand-context-observer"
" ctx_1236)))"
"(if obs_1257"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1257"
" 'enter-prim"
"(car bodys_1238))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1258)"
"(expand-context-observer"
" ctx_1236)))"
"(if obs_1258"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1258"
" 'enter-prim-provide)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1242 #%provide506_1243 spec507_1244)"
"(let-values(((s_1259) disarmed-body_1240))"
"(let-values(((orig-s_1260) s_1259))"
"(let-values(((#%provide506_1261"
" spec507_1262)"
"(let-values(((s_1263)"
"(if(syntax?$1"
" s_1259)"
"(syntax-e$1"
" s_1259)"
" s_1259)))"
"(if(pair? s_1263)"
"(let-values(((#%provide508_1264)"
"(let-values(((s_1266)"
"(car"
" s_1263)))"
" s_1266))"
"((spec509_1265)"
"(let-values(((s_1267)"
"(cdr"
" s_1263)))"
"(let-values(((s_1268)"
"(if(syntax?$1"
" s_1267)"
"(syntax-e$1"
" s_1267)"
" s_1267)))"
"(let-values(((flat-s_1269)"
"(to-syntax-list.1"
" s_1268)))"
"(if(not"
" flat-s_1269)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1260))"
"(let-values()"
" flat-s_1269)))))))"
"(values"
" #%provide508_1264"
" spec509_1265))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_1260)))))"
"(values"
" #t"
" #%provide506_1261"
" spec507_1262))))))"
"(let-values(((track-stxes_1255 specs_1256)"
"(parse-and-expand-provides!"
" spec507_1244"
"(car bodys_1238)"
" requires+provides_1231"
" self_1235"
" phase_1239"
"(let-values(((the-struct_1270) ctx_1236))"
"(if(expand-context? the-struct_1270)"
"(let-values(((context510_1271)"
" 'top-level)"
"((phase511_1272)"
" phase_1239)"
"((namespace512_1273)"
"(namespace->namespace-at-phase"
" m-ns_1233"
" phase_1239))"
"((requires+provides513_1274)"
" requires+provides_1231)"
"((declared-submodule-names514_1275)"
" declared-submodule-names_1232))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1270)"
"(root-expand-context-post-expansion-scope"
" the-struct_1270)"
"(root-expand-context-top-level-bind-scope"
" the-struct_1270)"
"(root-expand-context-all-scopes-stx"
" the-struct_1270)"
"(root-expand-context-use-site-scopes"
" the-struct_1270)"
"(root-expand-context-defined-syms"
" the-struct_1270)"
"(root-expand-context-frame-id"
" the-struct_1270)"
"(root-expand-context-counter"
" the-struct_1270)"
"(root-expand-context-lift-key"
" the-struct_1270)"
" context510_1271"
" phase511_1272"
" namespace512_1273"
"(expand-context-env the-struct_1270)"
"(expand-context-user-env"
" the-struct_1270)"
"(expand-context-post-expansion-scope-action"
" the-struct_1270)"
"(expand-context-scopes"
" the-struct_1270)"
"(expand-context-def-ctx-scopes"
" the-struct_1270)"
"(expand-context-binding-layer"
" the-struct_1270)"
"(expand-context-reference-records"
" the-struct_1270)"
"(expand-context-only-immediate?"
" the-struct_1270)"
"(expand-context-just-once?"
" the-struct_1270)"
"(expand-context-module-begin-k"
" the-struct_1270)"
"(expand-context-need-eventually-defined"
" the-struct_1270)"
"(expand-context-allow-unbound?"
" the-struct_1270)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1270)"
"(expand-context-stops"
" the-struct_1270)"
"(expand-context-current-introduction-scopes"
" the-struct_1270)"
" declared-submodule-names514_1275"
"(expand-context-lifts"
" the-struct_1270)"
"(expand-context-lift-envs"
" the-struct_1270)"
"(expand-context-module-lifts"
" the-struct_1270)"
"(expand-context-require-lifts"
" the-struct_1270)"
"(expand-context-to-module-lifts"
" the-struct_1270)"
" requires+provides513_1274"
"(expand-context-name"
" the-struct_1270)"
"(expand-context-observer"
" the-struct_1270)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                  \"expand-context?\""
" the-struct_1270))))))"
"(begin"
"(let-values(((obs_1276)"
"(expand-context-observer ctx_1236)))"
"(if obs_1276"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1276 'exit-prim)))"
"(void)))"
"(cons"
"(syntax-track-origin*"
" track-stxes_1255"
"(let-values(((temp515_1277)(car bodys_1238))"
"((disarmed-body516_1278)"
" disarmed-body_1240)"
"((temp517_1279)"
"(list* #%provide506_1243 specs_1256)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" temp515_1277"
" disarmed-body516_1278"
" temp517_1279)"
"(rebuild53.1"
" temp515_1277"
" disarmed-body516_1278"
" temp517_1279))))"
"(loop_1237(cdr bodys_1238) phase_1239))))))))"
"(if(equal? tmp_1241 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1280 begin-for-syntax518_1281 e519_1282)"
"(let-values(((s_1294) disarmed-body_1240))"
"(let-values(((orig-s_1295) s_1294))"
"(let-values(((begin-for-syntax518_1296"
" e519_1297)"
"(let-values(((s_1298)"
"(if(syntax?$1"
" s_1294)"
"(syntax-e$1"
" s_1294)"
" s_1294)))"
"(if(pair? s_1298)"
"(let-values(((begin-for-syntax520_1299)"
"(let-values(((s_1301)"
"(car"
" s_1298)))"
" s_1301))"
"((e521_1300)"
"(let-values(((s_1302)"
"(cdr"
" s_1298)))"
"(let-values(((s_1303)"
"(if(syntax?$1"
" s_1302)"
"(syntax-e$1"
" s_1302)"
" s_1302)))"
"(let-values(((flat-s_1304)"
"(to-syntax-list.1"
" s_1303)))"
"(if(not"
" flat-s_1304)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_1295))"
"(let-values()"
" flat-s_1304)))))))"
"(values"
" begin-for-syntax520_1299"
" e521_1300))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_1295)))))"
"(values"
" #t"
" begin-for-syntax518_1296"
" e519_1297))))))"
"(let-values(((nested-bodys_1293)"
"(loop_1237 e519_1282(add1 phase_1239))))"
"(cons"
"(let-values(((temp522_1305)(car bodys_1238))"
"((disarmed-body523_1306) disarmed-body_1240)"
"((temp524_1307)"
"(list*"
" begin-for-syntax518_1281"
" nested-bodys_1293)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" temp522_1305"
" disarmed-body523_1306"
" temp524_1307)"
"(rebuild53.1"
" temp522_1305"
" disarmed-body523_1306"
" temp524_1307)))"
"(loop_1237(cdr bodys_1238) phase_1239)))))"
"(let-values()"
"(cons"
"(car bodys_1238)"
"(loop_1237(cdr bodys_1238) phase_1239))))))))))))"
" loop_1237)"
" expression-expanded-bodys_1229"
" phase_1234)))))))))))))"
"(define-values"
"(unpack110.1)"
"(lambda(given-kws_1308 given-args_1309 expression-expanded-bodys108_1310)"
"(let-values(((ctx100_1311)(car given-args_1309))"
"((given-kws_1312)(cdr given-kws_1308))"
"((given-args_1313)(cdr given-args_1309)))"
"(let-values(((declared-submodule-names96_1314)(car given-args_1313))"
"((given-kws_1315)(cdr given-kws_1312))"
"((given-args_1316)(cdr given-args_1313)))"
"(let-values(((namespace97_1317)(car given-args_1316))"
"((given-kws_1318)(cdr given-kws_1315))"
"((given-args_1319)(cdr given-args_1316)))"
"(let-values(((original94_1320)(car given-args_1319))"
"((given-kws_1321)(cdr given-kws_1318))"
"((given-args_1322)(cdr given-args_1319)))"
"(let-values(((phase98_1323)(car given-args_1322))"
"((given-kws_1324)(cdr given-kws_1321))"
"((given-args_1325)(cdr given-args_1322)))"
"(let-values(((requires-and-provides95_1326)(car given-args_1325))"
"((given-kws_1327)(cdr given-kws_1324))"
"((given-args_1328)(cdr given-args_1325)))"
"(let-values(((self99_1329)(car given-args_1328)))"
"(resolve-provides109.1"
" ctx100_1311"
" declared-submodule-names96_1314"
" namespace97_1317"
" original94_1320"
" phase98_1323"
" requires-and-provides95_1326"
" self99_1329"
" expression-expanded-bodys108_1310))))))))))"
"(define-values"
"(resolve-provides111.1)"
"(lifted/17.1"
"(lambda(given-kws_1330 given-argc_1331)"
"(if(= given-argc_1331 3)"
"(let-values(((l2_1332) given-kws_1330))"
"(if(pair? l2_1332)"
"(if(eq?(car l2_1332) '#:ctx)"
"(let-values(((l2_1333)(cdr l2_1332)))"
"(if(pair? l2_1333)"
"(if(eq?(car l2_1333) '#:declared-submodule-names)"
"(let-values(((l2_1334)(cdr l2_1333)))"
"(if(pair? l2_1334)"
"(if(eq?(car l2_1334) '#:namespace)"
"(let-values(((l2_1335)(cdr l2_1334)))"
"(if(pair? l2_1335)"
"(if(eq?(car l2_1335) '#:original)"
"(let-values(((l2_1336)(cdr l2_1335)))"
"(if(pair? l2_1336)"
"(if(eq?(car l2_1336) '#:phase)"
"(let-values(((l2_1337)(cdr l2_1336)))"
"(if(pair? l2_1337)"
"(if(eq?(car l2_1337) '#:requires-and-provides)"
"(let-values(((l2_1338)(cdr l2_1337)))"
"(if(pair? l2_1338)"
"(if(eq?(car l2_1338) '#:self)(null?(cdr l2_1338)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1339 given-args_1340 expression-expanded-bodys_1341)"
"(unpack110.1 given-kws_1339 given-args_1340 expression-expanded-bodys_1341)))"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/21.1 lifted/22.1 lifted/23.1 lifted/24.1 lifted/25.1)"
"(make-struct-type"
" 'declare-module-for-expansion"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_1342 fully-expanded-bodys-except-post-submodules_1343)"
"(apply missing-kw self_1342 fully-expanded-bodys-except-post-submodules_1343 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1344 fully-expanded-bodys-except-post-submodules_1345)"
"(apply missing-kw self_1344 fully-expanded-bodys-except-post-submodules_1345 null)))))"
"(define-values"
"(declare-module-for-expansion129.1)"
"(lambda(enclosing118_1346"
" module-begin-id114_1347"
" module-intial-require113_1348"
" module-name-id112_1349"
" namespace116_1350"
" requires-and-provides115_1351"
" root-ctx119_1352"
" self117_1353"
" fully-expanded-bodys-except-post-submodules128_1354)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1355)"
" fully-expanded-bodys-except-post-submodules128_1354))"
"(let-values(((module-name-id_1356) module-name-id112_1349))"
"(let-values(((module-initial-require_1357) module-intial-require113_1348))"
"(let-values(((module-begin-id_1358) module-begin-id114_1347))"
"(let-values(((requires+provides_1359) requires-and-provides115_1351))"
"(let-values(((m-ns_1360) namespace116_1350))"
"(let-values(((self_1361) self117_1353))"
"(let-values(((enclosing-self_1362) enclosing118_1346))"
"(let-values(((root-ctx_1363) root-ctx119_1352))"
"(let-values()"
"(let-values(((tmp-mod_1364)"
"(attach-root-expand-context-properties"
"(attach-require-provide-properties"
" requires+provides_1359"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1 core-stx 'module)"
" module-name-id_1356"
" module-initial-require_1357"
"(list*"
" module-begin-id_1358"
" fully-expanded-bodys-except-post-submodules_1355)))"
" self_1361"
" self_1361)"
" root-ctx_1363"
" self_1361"
" self_1361)))"
"(let-values(((module-name_1365)"
"(1/module-path-index-resolve"
"(let-values(((or-part_1367) enclosing-self_1362))"
"(if or-part_1367 or-part_1367 self_1361)))))"
"(let-values(((root-module-name_1366)(resolved-module-path-root-name module-name_1365)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1360"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1366))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:924:4_1368) eval-module10.1)"
"((temp525_1369)"
"(let-values(((...er/expand/module.rkt:925:5_1371) compile-module17.1)"
"((tmp-mod527_1372) tmp-mod_1364)"
"((temp528_1373)"
"(let-values(((...er/expand/module.rkt:926:21_1376)"
" make-compile-context18.1)"
"((m-ns531_1377) m-ns_1360)"
"((enclosing-self532_1378) enclosing-self_1362)"
"((temp533_1379)"
"(if enclosing-self_1362"
"(1/resolved-module-path-name"
" module-name_1365)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context18.1))"
"(make-compile-context16.1"
" temp533_1379"
" #t"
" #f"
" #f"
" enclosing-self532_1378"
" #t"
" m-ns531_1377"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:926:21_1376"
" keyword-procedure-extract"
" '(#:full-module-name #:module-self #:namespace)"
" 2)"
" '(#:full-module-name #:module-self #:namespace)"
"(list"
" temp533_1379"
" enclosing-self532_1378"
" m-ns531_1377)))))"
"((self529_1374) self_1361)"
"((temp530_1375) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module17.1))"
"(compile-module15.1"
" #f"
" #f"
" #f"
" #f"
" self529_1374"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp530_1375"
" #t"
" tmp-mod527_1372"
" temp528_1373)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:925:5_1371"
" keyword-procedure-extract"
" '(#:self #:with-submodules?)"
" 4)"
" '(#:self #:with-submodules?)"
"(list self529_1374 temp530_1375)"
" tmp-mod527_1372"
" temp528_1373))))"
"((temp526_1370) #f))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 #f #f #f #f temp526_1370 #t temp525_1369)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:924:4_1368"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 3)"
" '(#:with-submodules?)"
"(list temp526_1370)"
" temp525_1369))))))))))))))))))))"
"(define-values"
"(unpack130.1)"
"(lambda(given-kws_1380 given-args_1381 fully-expanded-bodys-except-post-submodules128_1382)"
"(let-values(((enclosing118_1383)(car given-args_1381))"
"((given-kws_1384)(cdr given-kws_1380))"
"((given-args_1385)(cdr given-args_1381)))"
"(let-values(((module-begin-id114_1386)(car given-args_1385))"
"((given-kws_1387)(cdr given-kws_1384))"
"((given-args_1388)(cdr given-args_1385)))"
"(let-values(((module-intial-require113_1389)(car given-args_1388))"
"((given-kws_1390)(cdr given-kws_1387))"
"((given-args_1391)(cdr given-args_1388)))"
"(let-values(((module-name-id112_1392)(car given-args_1391))"
"((given-kws_1393)(cdr given-kws_1390))"
"((given-args_1394)(cdr given-args_1391)))"
"(let-values(((namespace116_1395)(car given-args_1394))"
"((given-kws_1396)(cdr given-kws_1393))"
"((given-args_1397)(cdr given-args_1394)))"
"(let-values(((requires-and-provides115_1398)(car given-args_1397))"
"((given-kws_1399)(cdr given-kws_1396))"
"((given-args_1400)(cdr given-args_1397)))"
"(let-values(((root-ctx119_1401)(car given-args_1400))"
"((given-kws_1402)(cdr given-kws_1399))"
"((given-args_1403)(cdr given-args_1400)))"
"(let-values(((self117_1404)(car given-args_1403)))"
"(declare-module-for-expansion129.1"
" enclosing118_1383"
" module-begin-id114_1386"
" module-intial-require113_1389"
" module-name-id112_1392"
" namespace116_1395"
" requires-and-provides115_1398"
" root-ctx119_1401"
" self117_1404"
" fully-expanded-bodys-except-post-submodules128_1382)))))))))))"
"(define-values"
"(declare-module-for-expansion131.1)"
"(lifted/22.1"
"(lambda(given-kws_1405 given-argc_1406)"
"(if(= given-argc_1406 3)"
"(let-values(((l2_1407) given-kws_1405))"
"(if(pair? l2_1407)"
"(if(eq?(car l2_1407) '#:enclosing)"
"(let-values(((l2_1408)(cdr l2_1407)))"
"(if(pair? l2_1408)"
"(if(eq?(car l2_1408) '#:module-begin-id)"
"(let-values(((l2_1409)(cdr l2_1408)))"
"(if(pair? l2_1409)"
"(if(eq?(car l2_1409) '#:module-intial-require)"
"(let-values(((l2_1410)(cdr l2_1409)))"
"(if(pair? l2_1410)"
"(if(eq?(car l2_1410) '#:module-name-id)"
"(let-values(((l2_1411)(cdr l2_1410)))"
"(if(pair? l2_1411)"
"(if(eq?(car l2_1411) '#:namespace)"
"(let-values(((l2_1412)(cdr l2_1411)))"
"(if(pair? l2_1412)"
"(if(eq?(car l2_1412) '#:requires-and-provides)"
"(let-values(((l2_1413)(cdr l2_1412)))"
"(if(pair? l2_1413)"
"(if(eq?(car l2_1413) '#:root-ctx)"
"(let-values(((l2_1414)(cdr l2_1413)))"
"(if(pair? l2_1414)"
"(if(eq?(car l2_1414) '#:self)(null?(cdr l2_1414)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1415 given-args_1416 fully-expanded-bodys-except-post-submodules_1417)"
"(unpack130.1 given-kws_1415 given-args_1416 fully-expanded-bodys-except-post-submodules_1417)))"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_1418 root-ctx_1419 orig-self_1420 new-self_1421)"
"(let-values(((s_1422)"
"(syntax-property$1"
" s_1418"
" 'module-root-expand-context"
"(root-expand-context-encode-for-module root-ctx_1419 orig-self_1420 new-self_1421))))"
"(let-values(((s_1423)"
"(syntax-property$1 s_1422 'module-body-context(root-expand-context-all-scopes-stx root-ctx_1419))))"
"(let-values(((s_1424)"
"(syntax-property$1"
" s_1423"
" 'module-body-inside-context"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope root-ctx_1419)))))"
" s_1424)))))"
"(define-values"
"(lifted/26.1 lifted/27.1 lifted/28.1 lifted/29.1 lifted/30.1)"
"(make-struct-type"
" 'expand-post-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-post-submodules"
"(case-lambda"
"((self_1425 fully-expanded-bodys-except-post-submodules_1426)"
"(apply missing-kw self_1425 fully-expanded-bodys-except-post-submodules_1426 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1427 fully-expanded-bodys-except-post-submodules_1428)"
"(apply missing-kw self_1427 fully-expanded-bodys-except-post-submodules_1428 null)))))"
"(define-values"
"(expand-post-submodules153.1)"
"(lambda(all-scopes-s138_1429"
" ctx141_1430"
" declare-enclosing132_1431"
" declared-submodule-names140_1432"
" enclosing-is-cross-phase-persistent?137_1433"
" mpis-to-reset139_1434"
" original133_1435"
" phase134_1436"
" requires-and-provides136_1437"
" self135_1438"
" fully-expanded-bodys-except-post-submodules152_1439)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1440)"
" fully-expanded-bodys-except-post-submodules152_1439))"
"(let-values(((declare-enclosing-module_1441) declare-enclosing132_1431))"
"(let-values(((s_1442) original133_1435))"
"(let-values(((phase_1443) phase134_1436))"
"(let-values(((self_1444) self135_1438))"
"(let-values(((requires+provides_1445) requires-and-provides136_1437))"
"(let-values(((enclosing-is-cross-phase-persistent?_1446) enclosing-is-cross-phase-persistent?137_1433))"
"(let-values(((all-scopes-s_1447) all-scopes-s138_1429))"
"(let-values(((mpis-to-reset_1448) mpis-to-reset139_1434))"
"(let-values(((declared-submodule-names_1449) declared-submodule-names140_1432))"
"(let-values(((submod-ctx_1450) ctx141_1430))"
"(let-values()"
"((letrec-values(((loop_1451)"
"(lambda(bodys_1452 phase_1453)"
"(if(null? bodys_1452)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1454)"
"(syntax-disarm$1(car bodys_1452))))"
"(let-values(((tmp_1455)"
"(core-form-sym disarmed-body_1454 phase_1453)))"
"(if(equal? tmp_1455 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force declare-enclosing-module_1441)"
"(values))))"
"(let-values(((ready-body_1456)"
"(remove-use-site-scopes"
"(car bodys_1452)"
" submod-ctx_1450)))"
"(let-values(((ok?_1457"
" module*534_1458"
" name535_1459"
" _536_1460)"
"(let-values(((s_1474)"
" disarmed-body_1454))"
"(if(let-values(((s_1475)"
"(if(syntax?$1 s_1474)"
"(syntax-e$1 s_1474)"
" s_1474)))"
"(if(pair? s_1475)"
"(if(let-values(((s_1476)"
"(car s_1475)))"
" #t)"
"(let-values(((s_1477)"
"(cdr s_1475)))"
"(let-values(((s_1478)"
"(if(syntax?$1"
" s_1477)"
"(syntax-e$1"
" s_1477)"
" s_1477)))"
"(if(pair? s_1478)"
"(if(let-values(((s_1479)"
"(car"
" s_1478)))"
" #t)"
"(let-values(((s_1480)"
"(cdr"
" s_1478)))"
"(let-values(((s_1481)"
"(if(syntax?$1"
" s_1480)"
"(syntax-e$1"
" s_1480)"
" s_1480)))"
"(if(pair? s_1481)"
"(if(let-values(((s_1482)"
"(car"
" s_1481)))"
"(let-values(((s_1483)"
"(if(syntax?$1"
" s_1482)"
"(syntax-e$1"
" s_1482)"
" s_1482)))"
"(eq?"
" #f"
" s_1483)))"
"(let-values(((s_1484)"
"(cdr"
" s_1481)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values(((orig-s_1485) s_1474))"
"(let-values(((module*534_1486"
" name535_1487"
" _536_1488)"
"(let-values(((s_1489)"
"(if(syntax?$1"
" s_1474)"
"(syntax-e$1"
" s_1474)"
" s_1474)))"
"(let-values(((module*537_1490)"
"(let-values(((s_1493)"
"(car"
" s_1489)))"
" s_1493))"
"((name538_1491"
" _539_1492)"
"(let-values(((s_1494)"
"(cdr"
" s_1489)))"
"(let-values(((s_1495)"
"(if(syntax?$1"
" s_1494)"
"(syntax-e$1"
" s_1494)"
" s_1494)))"
"(let-values(((name540_1496)"
"(let-values(((s_1498)"
"(car"
" s_1495)))"
" s_1498))"
"((_541_1497)"
"(let-values(((s_1499)"
"(cdr"
" s_1495)))"
"(let-values(((s_1500)"
"(if(syntax?$1"
" s_1499)"
"(syntax-e$1"
" s_1499)"
" s_1499)))"
"(let-values((()"
"(let-values(((s_1502)"
"(car"
" s_1500)))"
"(let-values(((s_1503)"
"(if(syntax?$1"
" s_1502)"
"(syntax-e$1"
" s_1502)"
" s_1502)))"
"(values))))"
"((_542_1501)"
"(let-values(((s_1504)"
"(cdr"
" s_1500)))"
" s_1504)))"
"(values"
" _542_1501))))))"
"(values"
" name540_1496"
" _541_1497))))))"
"(values"
" module*537_1490"
" name538_1491"
" _539_1492)))))"
"(values"
" #t"
" module*534_1486"
" name535_1487"
" _536_1488)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_1473)"
"(if ok?_1457"
"(let-values()"
"(let-values(((neg-phase_1505)"
"(phase-"
" 0"
" phase_1453)))"
"(let-values(((shifted-s_1506)"
"(syntax-shift-phase-level$1"
" ready-body_1456"
" neg-phase_1505)))"
"(let-values(((submod_1507)"
"(let-values(((...er/expand/module.rkt:981:15_1508)"
" expand-submodule183.1)"
"((shifted-s543_1509)"
" shifted-s_1506)"
"((self544_1510)"
" self_1444)"
"((submod-ctx545_1511)"
" submod-ctx_1450)"
"((temp546_1512)"
" #t)"
"((neg-phase547_1513)"
" neg-phase_1505)"
"((all-scopes-s548_1514)"
" all-scopes-s_1447)"
"((requires+provides549_1515)"
" requires+provides_1445)"
"((enclosing-is-cross-phase-persistent?550_1516)"
" enclosing-is-cross-phase-persistent?_1446)"
"((mpis-to-reset551_1517)"
" mpis-to-reset_1448)"
"((declared-submodule-names552_1518)"
" declared-submodule-names_1449))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names552_1518"
" all-scopes-s548_1514"
" #t"
" enclosing-is-cross-phase-persistent?550_1516"
" #t"
" requires+provides549_1515"
" #t"
" temp546_1512"
" neg-phase547_1513"
" #t"
" mpis-to-reset551_1517"
" shifted-s543_1509"
" self544_1510"
" submod-ctx545_1511)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:981:15_1508"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names552_1518"
" all-scopes-s548_1514"
" enclosing-is-cross-phase-persistent?550_1516"
" requires+provides549_1515"
" temp546_1512"
" neg-phase547_1513"
" mpis-to-reset551_1517)"
" shifted-s543_1509"
" self544_1510"
" submod-ctx545_1511)))))"
"(syntax-shift-phase-level$1"
" submod_1507"
" phase_1453)))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:991:13_1519)"
" expand-submodule183.1)"
"((ready-body553_1520)"
" ready-body_1456)"
"((self554_1521)"
" self_1444)"
"((submod-ctx555_1522)"
" submod-ctx_1450)"
"((temp556_1523) #t)"
"((mpis-to-reset557_1524)"
" mpis-to-reset_1448)"
"((declared-submodule-names558_1525)"
" declared-submodule-names_1449))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names558_1525"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp556_1523"
" #f"
" #f"
" mpis-to-reset557_1524"
" ready-body553_1520"
" self554_1521"
" submod-ctx555_1522)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:991:13_1519"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names558_1525"
" temp556_1523"
" mpis-to-reset557_1524)"
" ready-body553_1520"
" self554_1521"
" submod-ctx555_1522)))))))"
"(cons"
" submod_1473"
"(loop_1451(cdr bodys_1452) phase_1453)))))))"
"(if(equal? tmp_1455 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1526"
" begin-for-syntax559_1527"
" e560_1528)"
"(let-values(((s_1540) disarmed-body_1454))"
"(let-values(((orig-s_1541) s_1540))"
"(let-values(((begin-for-syntax559_1542"
" e560_1543)"
"(let-values(((s_1544)"
"(if(syntax?$1"
" s_1540)"
"(syntax-e$1"
" s_1540)"
" s_1540)))"
"(if(pair? s_1544)"
"(let-values(((begin-for-syntax561_1545)"
"(let-values(((s_1547)"
"(car"
" s_1544)))"
" s_1547))"
"((e562_1546)"
"(let-values(((s_1548)"
"(cdr"
" s_1544)))"
"(let-values(((s_1549)"
"(if(syntax?$1"
" s_1548)"
"(syntax-e$1"
" s_1548)"
" s_1548)))"
"(let-values(((flat-s_1550)"
"(to-syntax-list.1"
" s_1549)))"
"(if(not"
" flat-s_1550)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1541))"
"(let-values()"
" flat-s_1550)))))))"
"(values"
" begin-for-syntax561_1545"
" e562_1546))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_1541)))))"
"(values"
" #t"
" begin-for-syntax559_1542"
" e560_1543))))))"
"(let-values(((nested-bodys_1539)"
"(loop_1451 e560_1528(add1 phase_1453))))"
"(cons"
"(let-values(((temp563_1551)(car bodys_1452))"
"((disarmed-body564_1552)"
" disarmed-body_1454)"
"((temp565_1553)"
"(list*"
" begin-for-syntax559_1527"
" nested-bodys_1539)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild53.1))"
"(rebuild51.1"
" #f"
" #f"
" temp563_1551"
" disarmed-body564_1552"
" temp565_1553)"
"(rebuild53.1"
" temp563_1551"
" disarmed-body564_1552"
" temp565_1553)))"
"(loop_1451(cdr bodys_1452) phase_1453)))))"
"(let-values()"
"(cons"
"(car bodys_1452)"
"(loop_1451(cdr bodys_1452) phase_1453))))))))))))"
" loop_1451)"
" fully-expanded-bodys-except-post-submodules_1440"
" phase_1443)))))))))))))))"
"(define-values"
"(unpack154.1)"
"(lambda(given-kws_1554 given-args_1555 fully-expanded-bodys-except-post-submodules152_1556)"
"(let-values(((all-scopes-s138_1557)(car given-args_1555))"
"((given-kws_1558)(cdr given-kws_1554))"
"((given-args_1559)(cdr given-args_1555)))"
"(let-values(((ctx141_1560)(car given-args_1559))"
"((given-kws_1561)(cdr given-kws_1558))"
"((given-args_1562)(cdr given-args_1559)))"
"(let-values(((declare-enclosing132_1563)(car given-args_1562))"
"((given-kws_1564)(cdr given-kws_1561))"
"((given-args_1565)(cdr given-args_1562)))"
"(let-values(((declared-submodule-names140_1566)(car given-args_1565))"
"((given-kws_1567)(cdr given-kws_1564))"
"((given-args_1568)(cdr given-args_1565)))"
"(let-values(((enclosing-is-cross-phase-persistent?137_1569)(car given-args_1568))"
"((given-kws_1570)(cdr given-kws_1567))"
"((given-args_1571)(cdr given-args_1568)))"
"(let-values(((mpis-to-reset139_1572)(car given-args_1571))"
"((given-kws_1573)(cdr given-kws_1570))"
"((given-args_1574)(cdr given-args_1571)))"
"(let-values(((original133_1575)(car given-args_1574))"
"((given-kws_1576)(cdr given-kws_1573))"
"((given-args_1577)(cdr given-args_1574)))"
"(let-values(((phase134_1578)(car given-args_1577))"
"((given-kws_1579)(cdr given-kws_1576))"
"((given-args_1580)(cdr given-args_1577)))"
"(let-values(((requires-and-provides136_1581)(car given-args_1580))"
"((given-kws_1582)(cdr given-kws_1579))"
"((given-args_1583)(cdr given-args_1580)))"
"(let-values(((self135_1584)(car given-args_1583)))"
"(expand-post-submodules153.1"
" all-scopes-s138_1557"
" ctx141_1560"
" declare-enclosing132_1563"
" declared-submodule-names140_1566"
" enclosing-is-cross-phase-persistent?137_1569"
" mpis-to-reset139_1572"
" original133_1575"
" phase134_1578"
" requires-and-provides136_1581"
" self135_1584"
" fully-expanded-bodys-except-post-submodules152_1556)))))))))))))"
"(define-values"
"(expand-post-submodules155.1)"
"(lifted/27.1"
"(lambda(given-kws_1585 given-argc_1586)"
"(if(= given-argc_1586 3)"
"(let-values(((l2_1587) given-kws_1585))"
"(if(pair? l2_1587)"
"(if(eq?(car l2_1587) '#:all-scopes-s)"
"(let-values(((l2_1588)(cdr l2_1587)))"
"(if(pair? l2_1588)"
"(if(eq?(car l2_1588) '#:ctx)"
"(let-values(((l2_1589)(cdr l2_1588)))"
"(if(pair? l2_1589)"
"(if(eq?(car l2_1589) '#:declare-enclosing)"
"(let-values(((l2_1590)(cdr l2_1589)))"
"(if(pair? l2_1590)"
"(if(eq?(car l2_1590) '#:declared-submodule-names)"
"(let-values(((l2_1591)(cdr l2_1590)))"
"(if(pair? l2_1591)"
"(if(eq?(car l2_1591) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1592)(cdr l2_1591)))"
"(if(pair? l2_1592)"
"(if(eq?(car l2_1592) '#:mpis-to-reset)"
"(let-values(((l2_1593)(cdr l2_1592)))"
"(if(pair? l2_1593)"
"(if(eq?(car l2_1593) '#:original)"
"(let-values(((l2_1594)(cdr l2_1593)))"
"(if(pair? l2_1594)"
"(if(eq?(car l2_1594) '#:phase)"
"(let-values(((l2_1595)(cdr l2_1594)))"
"(if(pair? l2_1595)"
"(if(eq?(car l2_1595) '#:requires-and-provides)"
"(let-values(((l2_1596)(cdr l2_1595)))"
"(if(pair? l2_1596)"
"(if(eq?(car l2_1596) '#:self)"
"(null?(cdr l2_1596))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1597 given-args_1598 fully-expanded-bodys-except-post-submodules_1599)"
"(unpack154.1 given-kws_1597 given-args_1598 fully-expanded-bodys-except-post-submodules_1599)))"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:all-scopes-s"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1600)"
"(free-id-set-member?"
"(expand-context-stops ctx_1600)"
"(expand-context-phase ctx_1600)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_1600)))))"
"(define-values"
"(lifted/31.1 lifted/32.1 lifted/33.1 lifted/34.1 lifted/35.1)"
"(make-struct-type"
" 'check-ids-unbound"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-ids-unbound"
"(case-lambda"
"((self_1601 ids_1602 phase_1603 requires+provides_1604)"
"(apply missing-kw self_1601 ids_1602 phase_1603 requires+provides_1604 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1605 ids_1606 phase_1607 requires+provides_1608)"
"(apply missing-kw self_1605 ids_1606 phase_1607 requires+provides_1608 null)))))"
"(define-values"
"(check-ids-unbound161.1)"
"(lambda(in156_1609 ids158_1610 phase159_1611 requires+provides160_1612)"
"(let-values(((ids_1613) ids158_1610))"
"(let-values(((phase_1614) phase159_1611))"
"(let-values(((requires+provides_1615) requires+provides160_1612))"
"(let-values(((s_1616) in156_1609))"
"(let-values()"
"(let-values(((lst_1617) ids_1613))"
"(begin"
"(if(list? lst_1617)(void)(let-values()(in-list lst_1617)))"
"((letrec-values(((for-loop_1618)"
"(lambda(fold-var_1619 lst_1620)"
"(if(pair? lst_1620)"
"(let-values(((id_1621)(unsafe-car lst_1620)))"
"(let-values(((fold-var_1622)"
"(let-values(((fold-var_1623) fold-var_1619))"
"(let-values(((fold-var_1624)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1016:4_1625)"
" check-not-defined89.1)"
"((requires+provides566_1626)"
" requires+provides_1615)"
"((id567_1627) id_1621)"
"((phase568_1628) phase_1614)"
"((s569_1629) s_1616)"
"((temp570_1630) 'module))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined89.1))"
"(check-not-defined87.1"
" #f"
" #f"
" #f"
" #f"
" s569_1629"
" #f"
" #f"
" #f"
" #f"
" temp570_1630"
" requires+provides566_1626"
" id567_1627"
" phase568_1628)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1016:4_1625"
" keyword-procedure-extract"
" '(#:in #:who)"
" 5)"
" '(#:in #:who)"
"(list s569_1629 temp570_1630)"
" requires+provides566_1626"
" id567_1627"
" phase568_1628))))"
"(void)))))"
"(values fold-var_1624)))))"
"(for-loop_1618 fold-var_1622(unsafe-cdr lst_1620))))"
" fold-var_1619))))"
" for-loop_1618)"
"(void)"
" lst_1617))))))))))"
"(define-values"
"(unpack162.1)"
"(lambda(given-kws_1631 given-args_1632 ids158_1633 phase159_1634 requires+provides160_1635)"
"(let-values(((in156_1636)(car given-args_1632)))"
"(check-ids-unbound161.1 in156_1636 ids158_1633 phase159_1634 requires+provides160_1635))))"
"(define-values"
"(check-ids-unbound163.1)"
"(lifted/32.1"
"(lambda(given-kws_1637 given-argc_1638)"
"(if(= given-argc_1638 5)"
"(let-values(((l2_1639) given-kws_1637))"
"(if(pair? l2_1639)(if(eq?(car l2_1639) '#:in)(null?(cdr l2_1639)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1640 given-args_1641 ids_1642 phase_1643 requires+provides_1644)"
"(unpack162.1 given-kws_1640 given-args_1641 ids_1642 phase_1643 requires+provides_1644)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1645 phase_1646 m-ns_1647 self_1648 ctx_1649)"
"(let-values(((lst_1650) bodys_1645))"
"(begin"
"(if(list? lst_1650)(void)(let-values()(in-list lst_1650)))"
"((letrec-values(((for-loop_1651)"
"(lambda(fold-var_1652 lst_1653)"
"(if(pair? lst_1653)"
"(let-values(((body_1654)(unsafe-car lst_1653)))"
"(let-values(((fold-var_1655)"
"(let-values(((fold-var_1656) fold-var_1652))"
"(let-values(((fold-var_1657)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((disarmed-body_1658)"
"(syntax-disarm$1 body_1654)))"
"(let-values(((tmp_1659)"
"(core-form-sym"
" disarmed-body_1658"
" phase_1646)))"
"(if(equal? tmp_1659 'define-values)"
"(let-values()"
"(let-values(((ok?_1660"
" define-values571_1661"
" id572_1662"
" rhs573_1663)"
"(let-values(((s_1678)"
" disarmed-body_1658))"
"(let-values(((orig-s_1679)"
" s_1678))"
"(let-values(((define-values571_1680"
" id572_1681"
" rhs573_1682)"
"(let-values(((s_1683)"
"(if(syntax?$1"
" s_1678)"
"(syntax-e$1"
" s_1678)"
" s_1678)))"
"(if(pair?"
" s_1683)"
"(let-values(((define-values574_1684)"
"(let-values(((s_1687)"
"(car"
" s_1683)))"
" s_1687))"
"((id575_1685"
" rhs576_1686)"
"(let-values(((s_1688)"
"(cdr"
" s_1683)))"
"(let-values(((s_1689)"
"(if(syntax?$1"
" s_1688)"
"(syntax-e$1"
" s_1688)"
" s_1688)))"
"(if(pair?"
" s_1689)"
"(let-values(((id577_1690)"
"(let-values(((s_1692)"
"(car"
" s_1689)))"
"(let-values(((s_1693)"
"(if(syntax?$1"
" s_1692)"
"(syntax-e$1"
" s_1692)"
" s_1692)))"
"(let-values(((flat-s_1694)"
"(to-syntax-list.1"
" s_1693)))"
"(if(not"
" flat-s_1694)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_1679))"
"(let-values()"
"(let-values(((id_1695)"
"(let-values(((lst_1696)"
" flat-s_1694))"
"(begin"
"(if(list?"
" lst_1696)"
"(void)"
"(let-values()"
"(in-list"
" lst_1696)))"
"((letrec-values(((for-loop_1697)"
"(lambda(id_1698"
" lst_1699)"
"(if(pair?"
" lst_1699)"
"(let-values(((s_1700)"
"(unsafe-car"
" lst_1699)))"
"(let-values(((id_1701)"
"(let-values(((id_1702)"
" id_1698))"
"(let-values(((id_1703)"
"(let-values()"
"(let-values(((id580_1704)"
"(let-values()"
"(if(let-values(((or-part_1705)"
"(if(syntax?$1"
" s_1700)"
"(symbol?"
"(syntax-e$1"
" s_1700))"
" #f)))"
"(if or-part_1705"
" or-part_1705"
"(symbol?"
" s_1700)))"
" s_1700"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_1679"
" s_1700)))))"
"(cons"
" id580_1704"
" id_1702)))))"
"(values"
" id_1703)))))"
"(for-loop_1697"
" id_1701"
"(unsafe-cdr"
" lst_1699))))"
" id_1698))))"
" for-loop_1697)"
" null"
" lst_1696)))))"
"(alt-reverse"
" id_1695))))))))"
"((rhs578_1691)"
"(let-values(((s_1706)"
"(cdr"
" s_1689)))"
"(let-values(((s_1707)"
"(if(syntax?$1"
" s_1706)"
"(syntax-e$1"
" s_1706)"
" s_1706)))"
"(if(pair?"
" s_1707)"
"(let-values(((rhs579_1708)"
"(let-values(((s_1709)"
"(car"
" s_1707)))"
" s_1709))"
"(()"
"(let-values(((s_1710)"
"(cdr"
" s_1707)))"
"(let-values(((s_1711)"
"(if(syntax?$1"
" s_1710)"
"(syntax-e$1"
" s_1710)"
" s_1710)))"
"(if(null?"
" s_1711)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_1679))))))"
"(values"
" rhs579_1708))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_1679))))))"
"(values"
" id577_1690"
" rhs578_1691))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_1679))))))"
"(values"
" define-values574_1684"
" id575_1685"
" rhs576_1686))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_1679)))))"
"(values"
" #t"
" define-values571_1680"
" id572_1681"
" rhs573_1682))))))"
"(let-values(((ids_1676) id572_1662))"
"(let-values(((vals_1677)"
"(eval-for-bindings"
" ids_1676"
" rhs573_1663"
" phase_1646"
" m-ns_1647"
" ctx_1649)))"
"(let-values(((lst_1712) ids_1676)"
"((lst_1713) vals_1677))"
"(begin"
"(if(list? lst_1712)"
"(void)"
"(let-values()"
"(in-list lst_1712)))"
"(if(list? lst_1713)"
"(void)"
"(let-values()"
"(in-list lst_1713)))"
"((letrec-values(((for-loop_1714)"
"(lambda(fold-var_1715"
" lst_1716"
" lst_1717)"
"(if(if(pair?"
" lst_1716)"
"(pair?"
" lst_1717)"
" #f)"
"(let-values(((id_1718)"
"(unsafe-car"
" lst_1716))"
"((val_1719)"
"(unsafe-car"
" lst_1717)))"
"(let-values(((fold-var_1720)"
"(let-values(((fold-var_1721)"
" fold-var_1715))"
"(let-values(((fold-var_1722)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1723)"
"(let-values(((id581_1724)"
" id_1718)"
"((phase582_1725)"
" phase_1646))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve31.1))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id581_1724"
" phase582_1725)"
"(resolve31.1"
" id581_1724"
" phase582_1725)))))"
"(begin"
"(if(if(module-binding?"
" b_1723)"
"(equal?"
" self_1648"
"(module-binding-module"
" b_1723))"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                           \"internal error: nested binding is not to self\")))"
"(namespace-set-variable!"
" m-ns_1647"
" phase_1646"
"(module-binding-sym"
" b_1723)"
" val_1719))))"
"(void)))))"
"(values"
" fold-var_1722)))))"
"(for-loop_1714"
" fold-var_1720"
"(unsafe-cdr"
" lst_1716)"
"(unsafe-cdr"
" lst_1717))))"
" fold-var_1715))))"
" for-loop_1714)"
"(void)"
" lst_1712"
" lst_1713)))))))"
"(if(equal? tmp_1659 'define-syntaxes)"
"(let-values()(void))"
"(if(if(equal? tmp_1659 '#%provide)"
" #t"
"(if(equal? tmp_1659 '#%require)"
" #t"
"(if(equal? tmp_1659 'module)"
" #t"
"(if(equal? tmp_1659 'module*)"
" #t"
"(if(equal?"
" tmp_1659"
" 'begin-for-syntax)"
" #t"
"(equal?"
" tmp_1659"
" '#%declare))))))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_1649"
" 1/current-namespace"
" m-ns_1647)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" body_1654"
"(let-values(((...er/expand/module.rkt:1048:31_1726)"
" make-compile-context18.1)"
"((m-ns583_1727)"
" m-ns_1647)"
"((phase584_1728)"
" phase_1646))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context18.1))"
"(make-compile-context16.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns583_1727"
" #t"
" phase584_1728"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1048:31_1726"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list"
" m-ns583_1727"
" phase584_1728)))))"
" m-ns_1647))))))))))"
"(void)))))"
"(values fold-var_1657)))))"
"(for-loop_1651 fold-var_1655(unsafe-cdr lst_1653))))"
" fold-var_1652))))"
" for-loop_1651)"
"(void)"
" lst_1650)))))"
"(define-values"
"(lifted/36.1 lifted/37.1 lifted/38.1 lifted/39.1 lifted/40.1)"
"(make-struct-type"
" 'expand-submodule"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-submodule"
"(case-lambda"
"((self_1729 s_1730 self_1731 ctx_1732)(apply missing-kw self_1729 s_1730 self_1731 ctx_1732 null))))))"
"(current-inspector)"
"(case-lambda((self_1733 s_1734 self_1735 ctx_1736)(apply missing-kw self_1733 s_1734 self_1735 ctx_1736 null)))))"
"(define-values"
"(expand-submodule181.1)"
"(lambda(declared-submodule-names170_1737"
" enclosing-all-scopes-stx168_1738"
" enclosing-all-scopes-stx175_1739"
" enclosing-is-cross-phase-persistent?167_1740"
" enclosing-is-cross-phase-persistent?174_1741"
" enclosing-requires+provides166_1742"
" enclosing-requires+provides173_1743"
" is-star?164_1744"
" keep-enclosing-scope-at-phase165_1745"
" keep-enclosing-scope-at-phase172_1746"
" mpis-to-reset169_1747"
" s178_1748"
" self179_1749"
" ctx180_1750)"
"(let-values(((s_1751) s178_1748))"
"(let-values(((self_1752) self179_1749))"
"(let-values(((ctx_1753) ctx180_1750))"
"(let-values(((is-star?_1754) is-star?164_1744))"
"(let-values(((keep-enclosing-scope-at-phase_1755)"
"(if keep-enclosing-scope-at-phase172_1746 keep-enclosing-scope-at-phase165_1745 #f)))"
"(let-values(((enclosing-r+p_1756)"
"(if enclosing-requires+provides173_1743 enclosing-requires+provides166_1742 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1757)"
"(if enclosing-is-cross-phase-persistent?174_1741"
" enclosing-is-cross-phase-persistent?167_1740"
" #f)))"
"(let-values(((enclosing-all-scopes-stx_1758)"
"(if enclosing-all-scopes-stx175_1739 enclosing-all-scopes-stx168_1738 #f)))"
"(let-values(((mpis-to-reset_1759) mpis-to-reset169_1747))"
"(let-values(((declared-submodule-names_1760) declared-submodule-names170_1737))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1782)(expand-context-observer ctx_1753)))"
"(if obs_1782"
"(let-values()"
"(let-values()(call-expand-observe obs_1782 'enter-prim s_1751)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1783)(expand-context-observer ctx_1753)))"
"(if obs_1783"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1783"
"(if is-star?_1754 'enter-prim-submodule* 'enter-prim-submodule))))"
"(void)))"
"(values))))"
"(let-values(((ok?_1761 module585_1762 name586_1763 _587_1764)"
"(let-values(((s_1784) s_1751))"
"(let-values(((orig-s_1785) s_1784))"
"(let-values(((module585_1786 name586_1787 _587_1788)"
"(let-values(((s_1789)"
"(if(syntax?$1 s_1784)"
"(syntax-e$1 s_1784)"
" s_1784)))"
"(if(pair? s_1789)"
"(let-values(((module588_1790)"
"(let-values(((s_1793)(car s_1789)))"
" s_1793))"
"((name589_1791 _590_1792)"
"(let-values(((s_1794)(cdr s_1789)))"
"(let-values(((s_1795)"
"(if(syntax?$1 s_1794)"
"(syntax-e$1 s_1794)"
" s_1794)))"
"(if(pair? s_1795)"
"(let-values(((name591_1796)"
"(let-values(((s_1798)"
"(car"
" s_1795)))"
" s_1798))"
"((_592_1797)"
"(let-values(((s_1799)"
"(cdr"
" s_1795)))"
" s_1799)))"
"(values name591_1796 _592_1797))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_1785))))))"
"(values module588_1790 name589_1791 _590_1792))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_1785)))))"
"(values #t module585_1786 name586_1787 _587_1788))))))"
"(let-values(((name_1777)(syntax-e$1 name586_1763)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1760 name_1777 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                       \"submodule already declared with the same name\""
" s_1751"
" name_1777))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1760"
" name_1777"
"(syntax-e$1 module585_1762))"
"(values))))"
"(let-values(((submod_1778)"
"(let-values(((...er/expand/module.rkt:1074:4_1800)"
" expand-module16.1)"
"((s593_1801) s_1751)"
"((temp594_1802)"
"(let-values(((the-struct_1809) ctx_1753))"
"(if(expand-context? the-struct_1809)"
"(let-values(((context601_1810) 'module)"
"((only-immediate?602_1811) #f)"
"((post-expansion-scope603_1812) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1809)"
" post-expansion-scope603_1812"
"(root-expand-context-top-level-bind-scope"
" the-struct_1809)"
"(root-expand-context-all-scopes-stx"
" the-struct_1809)"
"(root-expand-context-use-site-scopes"
" the-struct_1809)"
"(root-expand-context-defined-syms"
" the-struct_1809)"
"(root-expand-context-frame-id the-struct_1809)"
"(root-expand-context-counter the-struct_1809)"
"(root-expand-context-lift-key the-struct_1809)"
" context601_1810"
"(expand-context-phase the-struct_1809)"
"(expand-context-namespace the-struct_1809)"
"(expand-context-env the-struct_1809)"
"(expand-context-user-env the-struct_1809)"
"(expand-context-post-expansion-scope-action"
" the-struct_1809)"
"(expand-context-scopes the-struct_1809)"
"(expand-context-def-ctx-scopes the-struct_1809)"
"(expand-context-binding-layer the-struct_1809)"
"(expand-context-reference-records"
" the-struct_1809)"
" only-immediate?602_1811"
"(expand-context-just-once? the-struct_1809)"
"(expand-context-module-begin-k the-struct_1809)"
"(expand-context-need-eventually-defined"
" the-struct_1809)"
"(expand-context-allow-unbound? the-struct_1809)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1809)"
"(expand-context-stops the-struct_1809)"
"(expand-context-current-introduction-scopes"
" the-struct_1809)"
"(expand-context-declared-submodule-names"
" the-struct_1809)"
"(expand-context-lifts the-struct_1809)"
"(expand-context-lift-envs the-struct_1809)"
"(expand-context-module-lifts the-struct_1809)"
"(expand-context-require-lifts the-struct_1809)"
"(expand-context-to-module-lifts"
" the-struct_1809)"
"(expand-context-requires+provides"
" the-struct_1809)"
"(expand-context-name the-struct_1809)"
"(expand-context-observer the-struct_1809)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                       \"expand-context?\""
" the-struct_1809))))"
"((self595_1803) self_1752)"
"((keep-enclosing-scope-at-phase596_1804)"
" keep-enclosing-scope-at-phase_1755)"
"((enclosing-all-scopes-stx597_1805)"
" enclosing-all-scopes-stx_1758)"
"((enclosing-r+p598_1806) enclosing-r+p_1756)"
"((enclosing-is-cross-phase-persistent?599_1807)"
" enclosing-is-cross-phase-persistent?_1757)"
"((mpis-to-reset600_1808) mpis-to-reset_1759))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-module16.1))"
"(expand-module14.1"
" enclosing-all-scopes-stx597_1805"
" #t"
" enclosing-is-cross-phase-persistent?599_1807"
" #t"
" enclosing-r+p598_1806"
" #t"
" keep-enclosing-scope-at-phase596_1804"
" #t"
" mpis-to-reset600_1808"
" #t"
" s593_1801"
" temp594_1802"
" self595_1803)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1074:4_1800"
" keyword-procedure-extract"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
" 5)"
" '(#:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(list"
" enclosing-all-scopes-stx597_1805"
" enclosing-is-cross-phase-persistent?599_1807"
" enclosing-r+p598_1806"
" keep-enclosing-scope-at-phase596_1804"
" mpis-to-reset600_1808)"
" s593_1801"
" temp594_1802"
" self595_1803)))))"
"(let-values(((ns_1779)(expand-context-namespace ctx_1753)))"
"(let-values(((module-name_1780)(1/module-path-index-resolve self_1752)))"
"(let-values(((root-module-name_1781)"
"(resolved-module-path-root-name module-name_1780)))"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1779"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1781))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1093:4_1813) eval-module10.1)"
"((temp604_1814)"
"(let-values(((...er/expand/module.rkt:1094:5_1816)"
" compile-module17.1)"
"((submod606_1817) submod_1778)"
"((temp607_1818)"
"(let-values(((...er/expand/module.rkt:1095:21_1820)"
" make-compile-context18.1)"
"((ns609_1821) ns_1779)"
"((self610_1822) self_1752)"
"((temp611_1823)"
"(1/resolved-module-path-name"
" module-name_1780)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context18.1))"
"(make-compile-context16.1"
" temp611_1823"
" #t"
" #f"
" #f"
" self610_1822"
" #t"
" ns609_1821"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1095:21_1820"
" keyword-procedure-extract"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
" 2)"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
"(list"
" temp611_1823"
" self610_1822"
" ns609_1821)))))"
"((temp608_1819) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module17.1))"
"(compile-module15.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp608_1819"
" #t"
" submod606_1817"
" temp607_1818)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1094:5_1816"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 4)"
" '(#:with-submodules?)"
"(list temp608_1819)"
" submod606_1817"
" temp607_1818))))"
"((temp605_1815) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-module10.1))"
"(eval-module8.1 #f #f #f #f temp605_1815 #t temp604_1814)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1093:4_1813"
" keyword-procedure-extract"
" '(#:with-submodules?)"
" 3)"
" '(#:with-submodules?)"
"(list temp605_1815)"
" temp604_1814)))))"
"(let-values(((obs_1824)(expand-context-observer ctx_1753)))"
"(if obs_1824"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1824 'exit-prim submod_1778)))"
"(void)))"
" submod_1778))))))))))))))))))))))))"
"(define-values"
"(unpack182.1)"
"(lambda(given-kws_1825 given-args_1826 s178_1827 self179_1828 ctx180_1829)"
"(let-values(((declared-submodule-names170_1830)(car given-args_1826))"
"((given-kws_1831)(cdr given-kws_1825))"
"((given-args_1832)(cdr given-args_1826)))"
"(let-values(((enclosing-all-scopes-stx175_1833)"
"(if(pair? given-kws_1831)(eq? '#:enclosing-all-scopes-stx(car given-kws_1831)) #f)))"
"(let-values(((enclosing-all-scopes-stx168_1834)"
"(if enclosing-all-scopes-stx175_1833(car given-args_1832)(void)))"
"((given-kws_1835)(if enclosing-all-scopes-stx175_1833(cdr given-kws_1831) given-kws_1831))"
"((given-args_1836)(if enclosing-all-scopes-stx175_1833(cdr given-args_1832) given-args_1832)))"
"(let-values(((enclosing-is-cross-phase-persistent?174_1837)"
"(if(pair? given-kws_1835)"
"(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1835))"
" #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?167_1838)"
"(if enclosing-is-cross-phase-persistent?174_1837(car given-args_1836)(void)))"
"((given-kws_1839)"
"(if enclosing-is-cross-phase-persistent?174_1837(cdr given-kws_1835) given-kws_1835))"
"((given-args_1840)"
"(if enclosing-is-cross-phase-persistent?174_1837(cdr given-args_1836) given-args_1836)))"
"(let-values(((enclosing-requires+provides173_1841)"
"(if(pair? given-kws_1839)(eq? '#:enclosing-requires+provides(car given-kws_1839)) #f)))"
"(let-values(((enclosing-requires+provides166_1842)"
"(if enclosing-requires+provides173_1841(car given-args_1840)(void)))"
"((given-kws_1843)"
"(if enclosing-requires+provides173_1841(cdr given-kws_1839) given-kws_1839))"
"((given-args_1844)"
"(if enclosing-requires+provides173_1841(cdr given-args_1840) given-args_1840)))"
"(let-values(((is-star?164_1845)(car given-args_1844))"
"((given-kws_1846)(cdr given-kws_1843))"
"((given-args_1847)(cdr given-args_1844)))"
"(let-values(((keep-enclosing-scope-at-phase172_1848)"
"(if(pair? given-kws_1846)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1846))"
" #f)))"
"(let-values(((keep-enclosing-scope-at-phase165_1849)"
"(if keep-enclosing-scope-at-phase172_1848(car given-args_1847)(void)))"
"((given-kws_1850)"
"(if keep-enclosing-scope-at-phase172_1848(cdr given-kws_1846) given-kws_1846))"
"((given-args_1851)"
"(if keep-enclosing-scope-at-phase172_1848(cdr given-args_1847) given-args_1847)))"
"(let-values(((mpis-to-reset169_1852)(car given-args_1851)))"
"(expand-submodule181.1"
" declared-submodule-names170_1830"
" enclosing-all-scopes-stx168_1834"
" enclosing-all-scopes-stx175_1833"
" enclosing-is-cross-phase-persistent?167_1838"
" enclosing-is-cross-phase-persistent?174_1837"
" enclosing-requires+provides166_1842"
" enclosing-requires+provides173_1841"
" is-star?164_1845"
" keep-enclosing-scope-at-phase165_1849"
" keep-enclosing-scope-at-phase172_1848"
" mpis-to-reset169_1852"
" s178_1827"
" self179_1828"
" ctx180_1829))))))))))))))"
"(define-values"
"(expand-submodule183.1)"
"(lifted/37.1"
"(lambda(given-kws_1853 given-argc_1854)"
"(if(= given-argc_1854 5)"
"(subsets?"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" given-kws_1853"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset))"
" #f))"
"(case-lambda"
"((given-kws_1855 given-args_1856 s_1857 self_1858 ctx_1859)"
"(unpack182.1 given-kws_1855 given-args_1856 s_1857 self_1858 ctx_1859)))"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" '(#:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/41.1 lifted/42.1 lifted/43.1 lifted/44.1 lifted/45.1)"
"(make-struct-type"
" 'expand-non-module*-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1860 bodys_1861 phase_1862 self_1863 ctx_1864)"
"(apply missing-kw self_1860 bodys_1861 phase_1862 self_1863 ctx_1864 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1865 bodys_1866 phase_1867 self_1868 ctx_1869)"
"(apply missing-kw self_1865 bodys_1866 phase_1867 self_1868 ctx_1869 null)))))"
"(define-values"
"(expand-non-module*-submodules192.1)"
"(lambda(declared-submodule-names185_1870 mpis-to-reset184_1871 bodys188_1872 phase189_1873 self190_1874 ctx191_1875)"
"(let-values(((bodys_1876) bodys188_1872))"
"(let-values(((phase_1877) phase189_1873))"
"(let-values(((self_1878) self190_1874))"
"(let-values(((ctx_1879) ctx191_1875))"
"(let-values(((mpis-to-reset_1880) mpis-to-reset184_1871))"
"(let-values(((declared-submodule-names_1881) declared-submodule-names185_1870))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_1882) bodys_1876))"
"(begin"
"(if(list? lst_1882)(void)(let-values()(in-list lst_1882)))"
"((letrec-values(((for-loop_1883)"
"(lambda(fold-var_1884 lst_1885)"
"(if(pair? lst_1885)"
"(let-values(((body_1886)(unsafe-car lst_1885)))"
"(let-values(((fold-var_1887)"
"(let-values(((fold-var_1888) fold-var_1884))"
"(let-values(((fold-var_1889)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_1890)"
"(core-form-sym"
"(syntax-disarm$1"
" body_1886)"
" phase_1877)))"
"(if(equal? tmp_1890 'module)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1113:7_1891)"
" expand-submodule183.1)"
"((body612_1892)"
" body_1886)"
"((self613_1893)"
" self_1878)"
"((ctx614_1894)"
" ctx_1879)"
"((temp615_1895) #f)"
"((mpis-to-reset616_1896)"
" mpis-to-reset_1880)"
"((declared-submodule-names617_1897)"
" declared-submodule-names_1881))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule183.1))"
"(expand-submodule181.1"
" declared-submodule-names617_1897"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp615_1895"
" #f"
" #f"
" mpis-to-reset616_1896"
" body612_1892"
" self613_1893"
" ctx614_1894)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1113:7_1891"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names617_1897"
" temp615_1895"
" mpis-to-reset616_1896)"
" body612_1892"
" self613_1893"
" ctx614_1894))))"
"(let-values() body_1886))))"
" fold-var_1888))))"
"(values fold-var_1889)))))"
"(for-loop_1883 fold-var_1887(unsafe-cdr lst_1885))))"
" fold-var_1884))))"
" for-loop_1883)"
" null"
" lst_1882)))))))))))))"
"(define-values"
"(unpack193.1)"
"(lambda(given-kws_1898 given-args_1899 bodys188_1900 phase189_1901 self190_1902 ctx191_1903)"
"(let-values(((declared-submodule-names185_1904)(car given-args_1899))"
"((given-kws_1905)(cdr given-kws_1898))"
"((given-args_1906)(cdr given-args_1899)))"
"(let-values(((mpis-to-reset184_1907)(car given-args_1906)))"
"(expand-non-module*-submodules192.1"
" declared-submodule-names185_1904"
" mpis-to-reset184_1907"
" bodys188_1900"
" phase189_1901"
" self190_1902"
" ctx191_1903)))))"
"(define-values"
"(expand-non-module*-submodules194.1)"
"(lifted/42.1"
"(lambda(given-kws_1908 given-argc_1909)"
"(if(= given-argc_1909 6)"
"(let-values(((l2_1910) given-kws_1908))"
"(if(pair? l2_1910)"
"(if(eq?(car l2_1910) '#:declared-submodule-names)"
"(let-values(((l2_1911)(cdr l2_1910)))"
"(if(pair? l2_1911)(if(eq?(car l2_1911) '#:mpis-to-reset)(null?(cdr l2_1911)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1912 given-args_1913 bodys_1914 phase_1915 self_1916 ctx_1917)"
"(unpack193.1 given-kws_1912 given-args_1913 bodys_1914 phase_1915 self_1916 ctx_1917)))"
" '(#:declared-submodule-names #:mpis-to-reset)"
" '(#:declared-submodule-names #:mpis-to-reset)))"
"(define-values"
"(lifted/46.1 lifted/47.1 lifted/48.1 lifted/49.1 lifted/50.1)"
"(make-struct-type"
" 'make-parse-lifted-require"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_1918 m-ns_1919 self_1920 requires+provides_1921)"
"(apply missing-kw self_1918 m-ns_1919 self_1920 requires+provides_1921 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1922 m-ns_1923 self_1924 requires+provides_1925)"
"(apply missing-kw self_1922 m-ns_1923 self_1924 requires+provides_1925 null)))))"
"(define-values"
"(make-parse-lifted-require200.1)"
"(lambda(declared-submodule-names195_1926 m-ns197_1927 self198_1928 requires+provides199_1929)"
"(let-values(((m-ns_1930) m-ns197_1927))"
"(let-values(((self_1931) self198_1928))"
"(let-values(((requires+provides_1932) requires+provides199_1929))"
"(let-values(((declared-submodule-names_1933) declared-submodule-names195_1926))"
"(let-values()"
"(lambda(s_1934 phase_1935)"
"(let-values(((ok?_1936 #%require618_1937 req619_1938)"
"(let-values(((s_1949)(syntax-disarm$1 s_1934)))"
"(let-values(((orig-s_1950) s_1949))"
"(let-values(((#%require618_1951 req619_1952)"
"(let-values(((s_1953)"
"(if(syntax?$1 s_1949)(syntax-e$1 s_1949) s_1949)))"
"(if(pair? s_1953)"
"(let-values(((#%require620_1954)"
"(let-values(((s_1956)(car s_1953))) s_1956))"
"((req621_1955)"
"(let-values(((s_1957)(cdr s_1953)))"
"(let-values(((s_1958)"
"(if(syntax?$1 s_1957)"
"(syntax-e$1 s_1957)"
" s_1957)))"
"(if(pair? s_1958)"
"(let-values(((req622_1959)"
"(let-values(((s_1960)"
"(car s_1958)))"
" s_1960))"
"(()"
"(let-values(((s_1961)"
"(cdr s_1958)))"
"(let-values(((s_1962)"
"(if(syntax?$1"
" s_1961)"
"(syntax-e$1"
" s_1961)"
" s_1961)))"
"(if(null? s_1962)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_1950))))))"
"(values req622_1959))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_1950))))))"
"(values #%require620_1954 req621_1955))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_1950)))))"
"(values #t #%require618_1951 req619_1952))))))"
"(let-values(((...er/expand/module.rkt:1125:4_1963) parse-and-perform-requires!30.1)"
"((temp623_1964)(list req619_1938))"
"((s624_1965) s_1934)"
"((self625_1966) self_1931)"
"((m-ns626_1967) m-ns_1930)"
"((phase627_1968) phase_1935)"
"((phase628_1969) phase_1935)"
"((requires+provides629_1970) requires+provides_1932)"
"((declared-submodule-names630_1971) declared-submodule-names_1933)"
"((temp631_1972) 'require))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names630_1971"
" #t"
" phase628_1969"
" #t"
" #f"
" #f"
" self625_1966"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp631_1972"
" temp623_1964"
" s624_1965"
" m-ns626_1967"
" phase627_1968"
" requires+provides629_1970)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1125:4_1963"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:run-phase #:self #:who)"
" 7)"
" '(#:declared-submodule-names #:run-phase #:self #:who)"
"(list declared-submodule-names630_1971 phase628_1969 self625_1966 temp631_1972)"
" temp623_1964"
" s624_1965"
" m-ns626_1967"
" phase627_1968"
" requires+provides629_1970))))))))))))"
"(define-values"
"(unpack201.1)"
"(lambda(given-kws_1973 given-args_1974 m-ns197_1975 self198_1976 requires+provides199_1977)"
"(let-values(((declared-submodule-names195_1978)(car given-args_1974)))"
"(make-parse-lifted-require200.1"
" declared-submodule-names195_1978"
" m-ns197_1975"
" self198_1976"
" requires+provides199_1977))))"
"(define-values"
"(make-parse-lifted-require202.1)"
"(lifted/47.1"
"(lambda(given-kws_1979 given-argc_1980)"
"(if(= given-argc_1980 5)"
"(let-values(((l2_1981) given-kws_1979))"
"(if(pair? l2_1981)(if(eq?(car l2_1981) '#:declared-submodule-names)(null?(cdr l2_1981)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1982 given-args_1983 m-ns_1984 self_1985 requires+provides_1986)"
"(unpack201.1 given-kws_1982 given-args_1983 m-ns_1984 self_1985 requires+provides_1986)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(void)"
"(void)"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(alt-reverse"
"(let-values(((lst_7) ids_1))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((id_11)(unsafe-car lst_10)))"
"(let-values(((fold-var_12)"
"(let-values(((fold-var_13) fold-var_9))"
"(let-values(((fold-var_14)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-use-site-scopes"
" id_11"
" ctx_3))"
" fold-var_13))))"
"(values fold-var_14)))))"
"(for-loop_8 fold-var_12(unsafe-cdr lst_10))))"
" fold-var_9))))"
" for-loop_8)"
" null"
" lst_7))))))"
"(let-values((()"
"(begin"
"(let-values(((tl-ids1_15) tl-ids_5)((temp2_16)(expand-context-phase ctx_3))((s3_17) s_2))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_15 temp2_16 s3_17 #f #f)"
"(check-no-duplicate-ids10.1 tl-ids1_15 temp2_16 s3_17)))"
"(values))))"
"(let-values(((tmp-bind-ids_6)"
"(alt-reverse"
"(let-values(((lst_18) tl-ids_5))"
"(begin"
"(if(list? lst_18)(void)(let-values()(in-list lst_18)))"
"((letrec-values(((for-loop_19)"
"(lambda(fold-var_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((id_22)(unsafe-car lst_21)))"
"(let-values(((fold-var_23)"
"(let-values(((fold-var_24) fold-var_20))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_22"
" top-level-bind-scope_4))"
" fold-var_24))))"
"(values fold-var_25)))))"
"(for-loop_19 fold-var_23(unsafe-cdr lst_21))))"
" fold-var_20))))"
" for-loop_19)"
" null"
" lst_18))))))"
"(begin(select-defined-syms-and-bind!/ctx tmp-bind-ids_6 ctx_3) tl-ids_5)))))))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_2)))"
"(if obs_22"
"(let-values()(let-values()(call-expand-observe obs_22 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values(((s_23) s_1))"
"(let-values(((orig-s_24) s_23))"
"(let-values(((define-values1_25 id2_26 rhs3_27)"
"(let-values(((s_28)(if(syntax?$1 s_23)(syntax-e$1 s_23) s_23)))"
"(if(pair? s_28)"
"(let-values(((define-values4_29)"
"(let-values(((s_32)(car s_28))) s_32))"
"((id5_30 rhs6_31)"
"(let-values(((s_33)(cdr s_28)))"
"(let-values(((s_34)"
"(if(syntax?$1 s_33)"
"(syntax-e$1 s_33)"
" s_33)))"
"(if(pair? s_34)"
"(let-values(((id7_35)"
"(let-values(((s_37)(car s_34)))"
"(let-values(((s_38)"
"(if(syntax?$1 s_37)"
"(syntax-e$1 s_37)"
" s_37)))"
"(let-values(((flat-s_39)"
"(to-syntax-list.1"
" s_38)))"
"(if(not flat-s_39)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_24))"
"(let-values()"
"(let-values(((id_40)"
"(let-values(((lst_41)"
" flat-s_39))"
"(begin"
"(if(list?"
" lst_41)"
"(void)"
"(let-values()"
"(in-list"
" lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(id_43"
" lst_44)"
"(if(pair?"
" lst_44)"
"(let-values(((s_45)"
"(unsafe-car"
" lst_44)))"
"(let-values(((id_46)"
"(let-values(((id_47)"
" id_43))"
"(let-values(((id_48)"
"(let-values()"
"(let-values(((id13_49)"
"(let-values()"
"(if(let-values(((or-part_50)"
"(if(syntax?$1"
" s_45)"
"(symbol?"
"(syntax-e$1"
" s_45))"
" #f)))"
"(if or-part_50"
" or-part_50"
"(symbol?"
" s_45)))"
" s_45"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_24"
" s_45)))))"
"(cons"
" id13_49"
" id_47)))))"
"(values"
" id_48)))))"
"(for-loop_42"
" id_46"
"(unsafe-cdr"
" lst_44))))"
" id_43))))"
" for-loop_42)"
" null"
" lst_41)))))"
"(alt-reverse"
" id_40))))))))"
"((rhs8_36)"
"(let-values(((s_51)(cdr s_34)))"
"(let-values(((s_52)"
"(if(syntax?$1 s_51)"
"(syntax-e$1 s_51)"
" s_51)))"
"(if(pair? s_52)"
"(let-values(((rhs9_53)"
"(let-values(((s_54)"
"(car"
" s_52)))"
" s_54))"
"(()"
"(let-values(((s_55)"
"(cdr"
" s_52)))"
"(let-values(((s_56)"
"(if(syntax?$1"
" s_55)"
"(syntax-e$1"
" s_55)"
" s_55)))"
"(if(null?"
" s_56)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_24))))))"
"(values rhs9_53))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_24))))))"
"(values id7_35 rhs8_36))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_24))))))"
"(values define-values4_29 id5_30 rhs6_31))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_24)))))"
"(values #t define-values1_25 id2_26 rhs3_27))))))"
"(let-values(((ids_20)(as-expand-time-top-level-bindings id2_6 s_1 ctx_2)))"
"(let-values(((exp-rhs_21)"
"(let-values(((temp14_57) rhs3_7)((temp15_58)(as-named-context ctx_2 ids_20)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp14_57 temp15_58)"
"(expand7.1 temp14_57 temp15_58)))))"
"(let-values(((s10_59) s_1)"
"((disarmed-s11_60) disarmed-s_3)"
"((temp12_61)(list define-values1_5 ids_20 exp-rhs_21)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s10_59 disarmed-s11_60 temp12_61)"
"(rebuild53.1 s10_59 disarmed-s11_60 temp12_61))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_62 ctx_63)"
"(let-values((()"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_63)))"
"(if obs_83"
"(let-values()(let-values()(call-expand-observe obs_83 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_84)(expand-context-observer ctx_63)))"
"(if obs_84(let-values()(let-values()(call-expand-observe obs_84 'prepare-env)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_63) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_62)))"
"(values))))"
"(let-values(((disarmed-s_64)(syntax-disarm$1 s_62)))"
"(let-values(((ok?_65 define-syntaxes16_66 id17_67 rhs18_68)"
"(let-values(((s_85) disarmed-s_64))"
"(let-values(((orig-s_86) s_85))"
"(let-values(((define-syntaxes16_87 id17_88 rhs18_89)"
"(let-values(((s_90)(if(syntax?$1 s_85)(syntax-e$1 s_85) s_85)))"
"(if(pair? s_90)"
"(let-values(((define-syntaxes19_91)"
"(let-values(((s_94)(car s_90))) s_94))"
"((id20_92 rhs21_93)"
"(let-values(((s_95)(cdr s_90)))"
"(let-values(((s_96)"
"(if(syntax?$1 s_95)"
"(syntax-e$1 s_95)"
" s_95)))"
"(if(pair? s_96)"
"(let-values(((id22_97)"
"(let-values(((s_99)(car s_96)))"
"(let-values(((s_100)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1 s_99)"
" s_99)))"
"(let-values(((flat-s_101)"
"(to-syntax-list.1"
" s_100)))"
"(if(not flat-s_101)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_86))"
"(let-values()"
"(let-values(((id_102)"
"(let-values(((lst_103)"
" flat-s_101))"
"(begin"
"(if(list?"
" lst_103)"
"(void)"
"(let-values()"
"(in-list"
" lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(id_105"
" lst_106)"
"(if(pair?"
" lst_106)"
"(let-values(((s_107)"
"(unsafe-car"
" lst_106)))"
"(let-values(((id_108)"
"(let-values(((id_109)"
" id_105))"
"(let-values(((id_110)"
"(let-values()"
"(let-values(((id28_111)"
"(let-values()"
"(if(let-values(((or-part_112)"
"(if(syntax?$1"
" s_107)"
"(symbol?"
"(syntax-e$1"
" s_107))"
" #f)))"
"(if or-part_112"
" or-part_112"
"(symbol?"
" s_107)))"
" s_107"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_86"
" s_107)))))"
"(cons"
" id28_111"
" id_109)))))"
"(values"
" id_110)))))"
"(for-loop_104"
" id_108"
"(unsafe-cdr"
" lst_106))))"
" id_105))))"
" for-loop_104)"
" null"
" lst_103)))))"
"(alt-reverse"
" id_102))))))))"
"((rhs23_98)"
"(let-values(((s_113)(cdr s_96)))"
"(let-values(((s_114)"
"(if(syntax?$1"
" s_113)"
"(syntax-e$1"
" s_113)"
" s_113)))"
"(if(pair? s_114)"
"(let-values(((rhs24_115)"
"(let-values(((s_116)"
"(car"
" s_114)))"
" s_116))"
"(()"
"(let-values(((s_117)"
"(cdr"
" s_114)))"
"(let-values(((s_118)"
"(if(syntax?$1"
" s_117)"
"(syntax-e$1"
" s_117)"
" s_117)))"
"(if(null?"
" s_118)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_86))))))"
"(values rhs24_115))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_86))))))"
"(values id22_97 rhs23_98))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_86))))))"
"(values define-syntaxes19_91 id20_92 rhs21_93))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_86)))))"
"(values #t define-syntaxes16_87 id17_88 rhs18_89))))))"
"(let-values(((ids_81)(as-expand-time-top-level-bindings id17_67 s_62 ctx_63)))"
"(let-values(((exp-rhs_82)"
"(let-values(((temp29_119) rhs18_68)((temp30_120)(as-named-context ctx_63 ids_81)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer45.1))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f temp29_119 temp30_120)"
"(expand-transformer45.1 temp29_119 temp30_120)))))"
"(let-values(((s25_121) s_62)"
"((disarmed-s26_122) disarmed-s_64)"
"((temp27_123)(list define-syntaxes16_66 ids_81 exp-rhs_82)))"
"(if(variable-reference-constant?(#%variable-reference rebuild53.1))"
"(rebuild51.1 #f #f s25_121 disarmed-s26_122 temp27_123)"
"(rebuild53.1 s25_121 disarmed-s26_122 temp27_123)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_124 ctx_125) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_124))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_126 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_143)(expand-context-observer ctx_127)))"
"(if obs_143"
"(let-values()(let-values()(call-expand-observe obs_143 'prim-require)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_127) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_126)))"
"(values))))"
"(let-values(((disarmed-s_128)(syntax-disarm$1 s_126)))"
"(let-values(((ok?_129 #%require31_130 req32_131)"
"(let-values(((s_144) disarmed-s_128))"
"(let-values(((orig-s_145) s_144))"
"(let-values(((#%require31_146 req32_147)"
"(let-values(((s_148)(if(syntax?$1 s_144)(syntax-e$1 s_144) s_144)))"
"(if(pair? s_148)"
"(let-values(((#%require33_149)"
"(let-values(((s_151)(car s_148))) s_151))"
"((req34_150)"
"(let-values(((s_152)(cdr s_148)))"
"(let-values(((s_153)"
"(if(syntax?$1 s_152)"
"(syntax-e$1 s_152)"
" s_152)))"
"(let-values(((flat-s_154)(to-syntax-list.1 s_153)))"
"(if(not flat-s_154)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_145))"
"(let-values() flat-s_154)))))))"
"(values #%require33_149 req34_150))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_145)))))"
"(values #t #%require31_146 req32_147))))))"
"(let-values(((sc_142)(new-scope 'macro)))"
"(begin"
"(let-values(((...ander/expand/top.rkt:62:3_155) parse-and-perform-requires!30.1)"
"((temp35_156)"
"(alt-reverse"
"(let-values(((lst_163) req32_131))"
"(begin"
"(if(list? lst_163)(void)(let-values()(in-list lst_163)))"
"((letrec-values(((for-loop_164)"
"(lambda(fold-var_165 lst_166)"
"(if(pair? lst_166)"
"(let-values(((req_167)(unsafe-car lst_166)))"
"(let-values(((fold-var_168)"
"(let-values(((fold-var_169) fold-var_165))"
"(let-values(((fold-var_170)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_167"
" sc_142))"
" fold-var_169))))"
"(values fold-var_170)))))"
"(for-loop_164 fold-var_168(unsafe-cdr lst_166))))"
" fold-var_165))))"
" for-loop_164)"
" null"
" lst_163)))))"
"((s36_157) s_126)"
"((temp37_158) #f)"
"((temp38_159)(expand-context-namespace ctx_127))"
"((temp39_160)(expand-context-phase ctx_127))"
"((temp40_161)(make-requires+provides #f))"
"((temp41_162) 'require))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!30.1))"
"(parse-and-perform-requires!28.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp37_158"
" #t"
" temp41_162"
" temp35_156"
" s36_157"
" temp38_159"
" temp39_160"
" temp40_161)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/top.rkt:62:3_155"
" keyword-procedure-extract"
" '(#:visit? #:who)"
" 7)"
" '(#:visit? #:who)"
"(list temp37_158 temp41_162)"
" temp35_156"
" s36_157"
" temp38_159"
" temp39_160"
" temp40_161)))"
" s_126)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_171 ctx_172)"
"(begin"
"(let-values(((obs_173)(expand-context-observer ctx_172)))"
"(if obs_173(let-values()(let-values()(call-expand-observe obs_173 'prim-provide)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_171)))))"
" print-values)"
"(void)"
"(void)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:101:0_1) declare-hash-based-module!41.1)"
"((temp1_2) '#%main)"
"((main-primitives2_3) main-primitives)"
"((ns3_4) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns3_4 #f #f #f #f #f #f #f #f temp1_2 main-primitives2_3)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:101:0_1"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns3_4)"
" temp1_2"
" main-primitives2_3))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:102:0_5) declare-hash-based-module!41.1)"
"((temp4_6) '#%utils)"
"((utils-primitives5_7) utils-primitives)"
"((ns6_8) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns6_8 #f #f #f #f #f #f #f #f temp4_6 utils-primitives5_7)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:102:0_5"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns6_8)"
" temp4_6"
" utils-primitives5_7))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:103:0_9) declare-hash-based-module!41.1)"
"((temp7_10) '#%place-struct)"
"((place-struct-primitives8_11) place-struct-primitives)"
"((ns9_12) ns)"
"((temp10_13) '(dynamic-place)))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns9_12 #f #f temp10_13 #t #f #f #f #f temp7_10 place-struct-primitives8_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:103:0_9"
" keyword-procedure-extract"
" '(#:namespace #:protected)"
" 4)"
" '(#:namespace #:protected)"
"(list ns9_12 temp10_13)"
" temp7_10"
" place-struct-primitives8_11))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:108:0_14) declare-hash-based-module!41.1)"
"((temp11_15) '#%boot)"
"((boot-primitives12_16) boot-primitives)"
"((ns13_17) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns13_17 #f #f #f #f #f #f #f #f temp11_15 boot-primitives12_16)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:108:0_14"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns13_17)"
" temp11_15"
" boot-primitives12_16))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_18)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((...gs/expander/main.rkt:115:2_19) declare-hash-based-module!41.1)"
"((temp25_20) '#%linklet)"
"((linklet-primitives26_21) linklet-primitives_18)"
"((ns27_22) ns)"
"((temp28_23) #t)"
"((temp29_24) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns27_22"
" temp28_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp29_24"
" #t"
" temp25_20"
" linklet-primitives26_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:115:2_19"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:register-builtin?)"
" 4)"
" '(#:namespace #:primitive? #:register-builtin?)"
"(list ns27_22 temp28_23 temp29_24)"
" temp25_20"
" linklet-primitives26_21)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:118:0_25) declare-hash-based-module!41.1)"
"((temp14_26) '#%expobs)"
"((expobs-primitives15_27) expobs-primitives)"
"((ns16_28) ns)"
"((temp17_29) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns16_28 #f #f #f #f temp17_29 #t #f #f temp14_26 expobs-primitives15_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:118:0_25"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 4)"
" '(#:namespace #:protected?)"
"(list ns16_28 temp17_29)"
" temp14_26"
" expobs-primitives15_27))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:120:0_30) declare-kernel-module!8.1)"
"((ns18_31) ns)"
"((eval19_32) 1/eval)"
"((temp20_33)"
"(let-values(((ht_34) main-primitives))"
"(begin"
"(if((lambda(ht_35)(hash? ht_35)) ht_34)(void)(let-values()(default-in-hash-keys ht_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_37 i_38)"
"(if i_38"
"(let-values(((name_39)(hash-iterate-key ht_34 i_38)))"
"(let-values(((table_40)"
"(let-values(((table_41) table_37))"
"(let-values(((table_42)"
"(let-values()"
"(let-values(((key_43 val_44)"
"(let-values()"
"(values"
"(let-values() name_39)"
" #t))))"
"(hash-set table_41 key_43 val_44)))))"
"(values table_42)))))"
"(for-loop_36 table_40(hash-iterate-next ht_34 i_38))))"
" table_37))))"
" for-loop_36)"
" '#hash()"
"(hash-iterate-first ht_34))))))"
"(if(variable-reference-constant?(#%variable-reference declare-kernel-module!8.1))"
"(declare-kernel-module!6.1 eval19_32 temp20_33 ns18_31)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:120:0_30"
" keyword-procedure-extract"
" '(#:eval #:main-ids)"
" 3)"
" '(#:eval #:main-ids)"
"(list eval19_32 temp20_33)"
" ns18_31))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_45) runtime-instances))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((name_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(if(eq? name_49 '#%kernel)"
" fold-var_51"
"(let-values(((fold-var_52) fold-var_51))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...gs/expander/main.rkt:126:2_54)"
" copy-runtime-module!26.1)"
"((name30_55) name_49)"
"((ns31_56) ns)"
"((temp32_57)"
"(let-values(((or-part_58)"
"(eq?"
" name_49"
" '#%foreign)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)"
"(eq?"
" name_49"
" '#%futures)))"
"(if or-part_59"
" or-part_59"
"(eq?"
" name_49"
" '#%unsafe)))))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" copy-runtime-module!26.1))"
"(copy-runtime-module!24.1"
" #f"
" #f"
" #f"
" #f"
" ns31_56"
" #f"
" #f"
" temp32_57"
" #t"
" #f"
" #f"
" #f"
" #f"
" name30_55)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:126:2_54"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 3)"
" '(#:namespace #:protected?)"
"(list ns31_56 temp32_57)"
" name30_55))))"
"(void)))))"
"(values fold-var_53)))))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
"(void)"
" lst_45))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...gs/expander/main.rkt:131:0_60) declare-reexporting-module!50.1)"
"((temp21_61) '#%builtin)"
"((temp22_62)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns23_63) ns)"
"((temp24_64) #f))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns23_63 temp24_64 #t temp21_61 temp22_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...gs/expander/main.rkt:131:0_60"
" keyword-procedure-extract"
" '(#:namespace #:reexport?)"
" 4)"
" '(#:namespace #:reexport?)"
"(list ns23_63 temp24_64)"
" temp21_61"
" temp22_62))))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_65)(1/datum->syntax core-stx s_65)))"
"(void))"
);
